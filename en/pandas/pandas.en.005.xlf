<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="en" datatype="htmlbody" original="pandas">
    <body>
      <group id="pandas">
        <trans-unit id="36cebb92475b0fc4e1c3710fa2cb5c82d4345675" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.plotting.lag_plot(series, lag=1, ax=None, **kwds)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/plotting/_misc.py#L394-L409&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6e062aa33ed6a07db0c64e429b395892f2c2178" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.plotting.parallel_coordinates(frame, class_column, cols=None, ax=None, color=None, use_columns=False, xticks=None, colormap=None, axvlines=True, axvlines_kwds=None, sort_labels=False, **kwds)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/plotting/_misc.py#L316-L391&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="306b333d4ca8dc4b20b7c78471561ab5d10b65a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.plotting.radviz(frame, class_column, ax=None, color=None, colormap=None, **kwds)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/plotting/_misc.py#L143-L213&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ed8d58d4f363d941a978bd421d9a1065e9409e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.plotting.register_matplotlib_converters(explicit=True)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/plotting/_misc.py#L33-L52&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;pandas.plotting.register_matplotlib_converters(explicit=True)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/plotting/_misc.py#L33-L52&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="feeb5656414b4428af903419801f93f2ceab24c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.plotting.scatter_matrix(frame, alpha=0.5, figsize=None, ax=None, grid=False, diagonal='hist', marker='.', density_kwds=None, hist_kwds=None, range_padding=0.05, **kwds)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/plotting/_misc.py#L74-L140&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf74e834cd3c364106a50a449a291ced920f42be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.qcut(x, q, labels=None, retbins=False, precision=3, duplicates='raise')&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/core/reshape/tile.py#L278-L354&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20bc2352e51f994ccd3bf526cb3165682dc4681b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.read_clipboard(sep='\s+', **kwargs)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/io/clipboards.py#L10-L73&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa6dd4fe6def9f459c8e43cb93797dd9de8ef23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.read_csv(filepath_or_buffer: Union[str, pathlib.Path, IO[~AnyStr]], sep=',', delimiter=None, header='infer', names=None, index_col=None, usecols=None, squeeze=False, prefix=None, mangle_dupe_cols=True, dtype=None, engine=None, converters=None, true_values=None, false_values=None, skipinitialspace=False, skiprows=None, skipfooter=0, nrows=None, na_values=None, keep_default_na=True, na_filter=True, verbose=False, skip_blank_lines=True, parse_dates=False, infer_datetime_format=False, keep_date_col=False, date_parser=None, dayfirst=False, cache_dates=True, iterator=False, chunksize=None, compression='infer', thousands=None, decimal=b'.', lineterminator=None, quotechar='&quot;', quoting=0, doublequote=True, escapechar=None, comment=None, encoding=None, dialect=None, error_bad_lines=True, warn_bad_lines=True, delim_whitespace=False, low_memory=True, memory_map=False, float_precision=None)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/io/parsers.py#L539-L685&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8059cbdb2f40510ee89625a60776987cbe8f902a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.read_excel(io, sheet_name=0, header=0, names=None, index_col=None, usecols=None, squeeze=False, dtype=None, engine=None, converters=None, true_values=None, false_values=None, skiprows=None, nrows=None, na_values=None, keep_default_na=True, verbose=False, parse_dates=False, date_parser=None, thousands=None, comment=None, skip_footer=0, skipfooter=0, convert_float=True, mangle_dupe_cols=True, **kwds)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/io/excel/_base.py#L272-L341&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2479bf877a064a07c743265ca0a43e52d435d75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.read_feather(path, columns=None, use_threads=True)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/io/feather_format.py#L69-L119&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de44dcfb2fada87062abb4f523658874c50a04d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.read_fwf(filepath_or_buffer: Union[str, pathlib.Path, IO[~AnyStr]], colspecs='infer', widths=None, infer_nrows=100, **kwds)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/io/parsers.py#L711-L791&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b069697826c8f0f556fb534a419d680fe37c338" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.read_gbq(query, project_id=None, index_col=None, col_order=None, reauth=False, auth_local_webserver=False, dialect=None, location=None, configuration=None, credentials=None, use_bqstorage_api=None, private_key=None, verbose=None)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/io/gbq.py#L16-L177&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a7e13c4ca57bd209906e434a413168697e65b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.read_hdf(path_or_buf, key=None, mode='r', **kwargs)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/io/pytables.py#L283-L415&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f0eecc69aa9a2ea346dffb1e201f0d8a6cddfe3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.read_html(io, match='.+', flavor=None, header=None, index_col=None, skiprows=None, attrs=None, parse_dates=False, thousands=', ', encoding=None, decimal='.', converters=None, na_values=None, keep_default_na=True, displayed_only=True)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/io/html.py#L923-L1106&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da1e1faffd8b4417131d97c183f4cc93c410ae8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.read_json(path_or_buf=None, orient=None, typ='frame', dtype=None, convert_axes=None, convert_dates=True, keep_default_dates=True, numpy=False, precise_float=False, date_unit=None, encoding=None, lines=False, chunksize=None, compression='infer')&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/io/json/_json.py#L334-L598&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30379f5e37ad85148d04814b330e20e99d06f40a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.read_msgpack(path_or_buf, encoding='utf-8', iterator=False, **kwargs)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/io/packers.py#L156-L240&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45047bcb04c6c76749e316ba1b467d8dabc10c39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.read_parquet(path, engine='auto', columns=None, **kwargs)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/io/parquet.py#L256-L294&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1daa298f86ca7a77cec7f92a03fcf87cdd3e1931" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.read_pickle(path, compression='infer')&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/io/pickle.py#L83-L164&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a31ab4191d0586763c8901200f8da569ad525705" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.read_sas(filepath_or_buffer, format=None, index=None, encoding=None, chunksize=None, iterator=False)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/io/sas/sasreader.py#L7-L86&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bf6b39e438581457461f6bb0dc11a6e5f49624e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.read_sql(sql, con, index_col=None, coerce_float=True, params=None, parse_dates=None, columns=None, chunksize=None)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/io/sql.py#L336-L437&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49752fa6c426756393d9b160c54cbaed290e6540" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.read_sql_query(sql, con, index_col=None, coerce_float=True, params=None, parse_dates=None, chunksize=None)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/io/sql.py#L263-L333&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e771011e4d3551723a9f389fd3c1471fe16e46c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.read_sql_table(table_name, con, schema=None, index_col=None, coerce_float=True, parse_dates=None, columns=None, chunksize=None)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/io/sql.py#L167-L260&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4b9654e353a268c648898683d45160423fa6b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.read_stata(filepath_or_buffer, convert_dates=True, convert_categoricals=True, encoding=None, index_col=None, convert_missing=False, preserve_dtypes=True, columns=None, order_categoricals=True, chunksize=None, iterator=False)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/io/stata.py#L201-L237&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64d512b71551798e8c6d062d975b6ac9bda1a845" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.read_table(filepath_or_buffer: Union[str, pathlib.Path, IO[~AnyStr]], sep='t', delimiter=None, header='infer', names=None, index_col=None, usecols=None, squeeze=False, prefix=None, mangle_dupe_cols=True, dtype=None, engine=None, converters=None, true_values=None, false_values=None, skipinitialspace=False, skiprows=None, skipfooter=0, nrows=None, na_values=None, keep_default_na=True, na_filter=True, verbose=False, skip_blank_lines=True, parse_dates=False, infer_datetime_format=False, keep_date_col=False, date_parser=None, dayfirst=False, cache_dates=True, iterator=False, chunksize=None, compression='infer', thousands=None, decimal=b'.', lineterminator=None, quotechar='&quot;', quoting=0, doublequote=True, escapechar=None, comment=None, encoding=None, dialect=None, error_bad_lines=True, warn_bad_lines=True, delim_whitespace=False, low_memory=True, memory_map=False, float_precision=None)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/io/parsers.py#L539-L685&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a702fa6f965c10df4203d7497a02878230c89f18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.test(extra_args=None)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/util/_tester.py#L10-L26&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;pandas.test(extra_args=None)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/util/_tester.py#L10-L26&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dd2f1554f0eb1c05d625a827f6099406442883eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.testing.assert_frame_equal(left, right, check_dtype=True, check_index_type='equiv', check_column_type='equiv', check_frame_type=True, check_less_precise=False, check_names=True, by_blocks=False, check_exact=False, check_datetimelike_compat=False, check_categorical=True, check_like=False, obj='DataFrame')&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/util/testing.py#L1223-L1404&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26a3d34f0e6c7b9ec0eab1088bc9475e46b995e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.testing.assert_index_equal(left: pandas.core.indexes.base.Index, right: pandas.core.indexes.base.Index, exact: Union[bool, str] = 'equiv', check_names: bool = True, check_less_precise: Union[bool, int] = False, check_exact: bool = True, check_categorical: bool = True, obj: str = 'Index') &amp;rarr; None&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/util/testing.py#L574-L706&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3973a39a75ca52b4677087d5717edd01488ff63a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.testing.assert_series_equal(left, right, check_dtype=True, check_index_type='equiv', check_series_type=True, check_less_precise=False, check_names=True, check_exact=False, check_datetimelike_compat=False, check_categorical=True, obj='Series')&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/util/testing.py#L1072-L1219&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ed231777f52b4a9e49a52d55c930148c0116c99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.timedelta_range(start=None, end=None, periods=None, freq=None, name=None, closed=None)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/core/indexes/timedeltas.py#L737-L810&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dcec12c84737d27bcf8d8f3d324295249427076" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.to_datetime(arg, errors='raise', dayfirst=False, yearfirst=False, utc=None, box=True, format=None, exact=True, unit=None, infer_datetime_format=False, origin='unix', cache=True)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/core/tools/datetimes.py#L559-L795&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5b065ef56f39298c2f9b2b05b4dd059fcc8bcf1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.to_numeric(arg, errors='raise', downcast=None)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/core/tools/numeric.py#L19-L196&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d8508ea4345edde60029f43dcbc387d2c12310" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.to_timedelta(arg, unit='ns', box=True, errors='raise')&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/core/tools/timedeltas.py#L19-L127&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaeacdfcdca764897d15a76fe8c317f749e5782f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.tseries.frequencies.to_offset(freq)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/tseries/frequencies.py#L71-L179&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;pandas.tseries.frequencies.to_offset(freq)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/tseries/frequencies.py#L71-L179&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dd8987aef6a473dc3894604f6cef39094c537a1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.tseries.offsets.BDay&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/tseries/offsets.py#L525-L637&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;pandas.tseries.offsets.BDay&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/tseries/offsets.py#L525-L637&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1da6ed122a7aaac378b687826f871edaa60d0204" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.tseries.offsets.BMonthBegin&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/tseries/offsets.py#L1170-L1176&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;pandas.tseries.offsets.BMonthBegin&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/tseries/offsets.py#L1170-L1176&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4e48b457f0ff878415fc21e1875fcd54ee308b06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.tseries.offsets.BMonthEnd&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/tseries/offsets.py#L1161-L1167&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;pandas.tseries.offsets.BMonthEnd&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/tseries/offsets.py#L1161-L1167&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4767db9d65ffa8690da95383575b2981be0d40f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.tseries.offsets.CBMonthBegin&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/tseries/offsets.py#L1283-L1284&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;pandas.tseries.offsets.CBMonthBegin&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/tseries/offsets.py#L1283-L1284&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e7d35dd5474bbe98e7372f5b937ba17a44b7713a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.tseries.offsets.CBMonthEnd&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/tseries/offsets.py#L1277-L1278&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;pandas.tseries.offsets.CBMonthEnd&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/tseries/offsets.py#L1277-L1278&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a6a0d65411ac060c4bba558436ba81dd99ec972c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.tseries.offsets.CDay&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/tseries/offsets.py#L997-L1072&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;pandas.tseries.offsets.CDay&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/tseries/offsets.py#L997-L1072&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ddf1f7f9397ba18ed059b833b7746eb385d5bf1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.unique(values)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/core/algorithms.py#L316-L407&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;pandas.unique(values)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/core/algorithms.py#L316-L407&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4ca0724bf95c9fa1a1191d965d3d79e39dfde871" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.util.hash_array(vals, encoding='utf8', hash_key=None, categorize=True)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/core/util/hashing.py#L244-L321&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4b4a2fbd331cddbf591cddc4e6d019ddbbad6ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.util.hash_pandas_object(obj, index=True, encoding='utf8', hash_key=None, categorize=True)&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/core/util/hashing.py#L57-L136&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e38c90f8a3d78823174620fe59a8fff9ead5b84f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas.wide_to_long(df, stubnames, i, j, sep='', suffix='\d+')&lt;/code&gt;&lt;a href=&quot;http://github.com/pandas-dev/pandas/blob/v0.25.0/pandas/core/reshape/melt.py#L192-L474&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6da6d59b0334737a1ab46bd3129a238d52e08dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas_type&lt;/code&gt; is the logical type of the column, and is one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f07f87de2f70d5fa03e029016977b7088bc599f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;period_range&lt;/code&gt;: fixed frequency date range generated from a time rule or DateOffset. An ndarray of &lt;code&gt;Period&lt;/code&gt; objects, representing timespans</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="753b0194c7a1f067ae6faa673b4bff6332e709e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pytest.mark&lt;/code&gt; can be used to set metadata on test functions, e.g. &lt;code&gt;skip&lt;/code&gt; or &lt;code&gt;xfail&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="207315454eda7a5edce016663a604d7766577edc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;raise&lt;/code&gt; : allow exceptions to be raised</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f3be17dddf5635bdd8d1854324e819f6ded8c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;read_csv&lt;/code&gt; and &lt;code&gt;to_csv&lt;/code&gt;, as they are complementary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db4204f6eb5abe29010cf473b74f9fc205095b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;register_dataframe_accessor,&lt;/code&gt;&lt;a href=&quot;pandas.api.extensions.register_index_accessor#pandas.api.extensions.register_index_accessor&quot;&gt;&lt;code&gt;register_index_accessor&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;register_dataframe_accessor,&lt;/code&gt;&lt;a href=&quot;pandas.api.extensions.register_index_accessor#pandas.api.extensions.register_index_accessor&quot;&gt;&lt;code&gt;register_index_accessor&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5bbf9b4766e5704bfce5cdf3a379e246b5423ee0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;register_dataframe_accessor,&lt;/code&gt;&lt;a href=&quot;pandas.api.extensions.register_series_accessor#pandas.api.extensions.register_series_accessor&quot;&gt;&lt;code&gt;register_series_accessor&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;register_dataframe_accessor,&lt;/code&gt;&lt;a href=&quot;pandas.api.extensions.register_series_accessor#pandas.api.extensions.register_series_accessor&quot;&gt;&lt;code&gt;register_series_accessor&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8fa46d988ee46648791232026e18783d48a0740c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;register_series_accessor,&lt;/code&gt;&lt;a href=&quot;pandas.api.extensions.register_index_accessor#pandas.api.extensions.register_index_accessor&quot;&gt;&lt;code&gt;register_index_accessor&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;register_series_accessor,&lt;/code&gt;&lt;a href=&quot;pandas.api.extensions.register_index_accessor#pandas.api.extensions.register_index_accessor&quot;&gt;&lt;code&gt;register_index_accessor&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="011db3a7b263177fb9f5ca0ceba219be04e2d459" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reindex&lt;/code&gt;: Does any pre-conversion of the input index then calls &lt;code&gt;get_indexer&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb899c8b55e2d565b68ad7263408fd7fed994191" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;removals&lt;/code&gt; must be included in the old categories. Values which were in the removed categories will be set to NaN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de6e2c24f1d548dc36c6d50797fe2c349c000d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;right&lt;/code&gt;: Another DataFrame or named Series object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19698bd03467fa9c10fedf50c9b5193c776112e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;right_index&lt;/code&gt;: Same usage as &lt;code&gt;left_index&lt;/code&gt; for the right DataFrame or Series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2788b0b3ad2261e8ba03a8861051753146c21a5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;right_on&lt;/code&gt;: Columns or index levels from the right DataFrame or Series to use as keys. Can either be column names, index level names, or arrays with length equal to the length of the DataFrame or Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="576ed52b35ae4b0cc158224d3303f63a3e4158e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;row&amp;lt;n&amp;gt;&lt;/code&gt; where &lt;code&gt;n&lt;/code&gt; is the numeric position of the row</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a75538f97a216ed6d4514bdbfaf60a4f8549da3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt; are equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="769e9ac267f0cc409468f439822b58543bd37c91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self&lt;/code&gt; or &lt;code&gt;other&lt;/code&gt; has length 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec7056e9df9b30179b126a8b444373977ec1be9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sep&lt;/code&gt; other than a single character (e.g. regex separators)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a497a78d37fa14f11f08cc48a9c32581a0d9f61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sep=None&lt;/code&gt; with &lt;code&gt;delim_whitespace=False&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c690487cf7f3c2cafcefa40d4dc10349d6cc19a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;skipfooter&lt;/code&gt; higher than 0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e62c63ccd01f1f5a463a8c47c7b84671b91348b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slepian&lt;/code&gt; (needs width)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b72dd6c5030470906012a49094f94f8f3e0c815d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slice_locs&lt;/code&gt;: returns the &amp;ldquo;range&amp;rdquo; to slice between two labels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="facb7efb825246c723fbbe3833bae2049f983e7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sort&lt;/code&gt;: Sort the result DataFrame by the join keys in lexicographical order. Defaults to &lt;code&gt;True&lt;/code&gt;, setting to &lt;code&gt;False&lt;/code&gt; will improve performance substantially in many cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6953f1bf3169dbb887bf054977852f6104cf0966" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stack&lt;/code&gt;: &amp;ldquo;pivot&amp;rdquo; a level of the (possibly hierarchical) column labels, returning a &lt;code&gt;DataFrame&lt;/code&gt; with an index with a new inner-most level of row labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2209b9f3acfde5b8ee187e32e3a51a2c32c2be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suffixes&lt;/code&gt;: A tuple of string suffixes to apply to overlapping columns. Defaults to &lt;code&gt;('_x', '_y')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="263fa06fb218d3890629ab83d056b00eac8a257e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;symmetric_difference&lt;/code&gt; contains elements that appear in either &lt;code&gt;idx1&lt;/code&gt; or &lt;code&gt;idx2&lt;/code&gt; but not both. Equivalent to the Index created by &lt;code&gt;idx1.difference(idx2) | idx2.difference(idx1)&lt;/code&gt; with duplicates dropped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e390b76c58e603e0b20cc1d0457e61ffe85aaf9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;table_styles&lt;/code&gt; are extremely flexible, but not as fun to type out by hand. We hope to collect some useful ones either in pandas, or preferable in a new package that &lt;a href=&quot;#Extensibility&quot;&gt;builds on top&lt;/a&gt; the tools here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d92471d6f5d6e869e4962c56ba54c591aad45439" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;table_styles&lt;/code&gt; should be a list of dictionaries. Each dictionary should have the &lt;code&gt;selector&lt;/code&gt; and &lt;code&gt;props&lt;/code&gt; keys. The value for &lt;code&gt;selector&lt;/code&gt; should be a valid CSS selector. Recall that all the styles are already attached to an &lt;code&gt;id&lt;/code&gt;, unique to each &lt;code&gt;Styler&lt;/code&gt;. This selector is in addition to that &lt;code&gt;id&lt;/code&gt;. The value for &lt;code&gt;props&lt;/code&gt; should be a list of tuples of &lt;code&gt;('attribute', 'value')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac67f25c52bcf40b0c6e693880f566548606a96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;take&lt;/code&gt;: Analogous to ndarray.take</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b1cc8e6202be2d882c2bddcb19eb5e1f9eb9c1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;target=None&lt;/code&gt;, but the expression is multiline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6c3f221be3647821c08c11bb20cd5b39313530d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timedelta&lt;/code&gt;: &lt;code&gt;{'unit': 'ns'}&lt;/code&gt;. The &lt;code&gt;'unit'&lt;/code&gt; is optional, and if omitted it is assumed to be nanoseconds. This metadata is optional altogether</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eba886bdf2159aaf4a55f4d6a7e392bec6fbc11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tm.assert_series_equal&lt;/code&gt; (and its counter part &lt;code&gt;tm.assert_frame_equal&lt;/code&gt;), for pandas object comparisons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a208b632eff3b323d3cafa3db9736689d62c274" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unicode&lt;/code&gt;: &lt;code&gt;{'encoding': encoding}&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94f6d344fd76f1f27509fe7b0c367f1bc55d384b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;union&lt;/code&gt;, &lt;code&gt;intersection&lt;/code&gt;: computes the union or intersection of two Index objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0117dbfd745ac5e00dd6af6bd20074ccbc037d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;union_categoricals&lt;/code&gt; also works with a &lt;code&gt;CategoricalIndex&lt;/code&gt;, or &lt;code&gt;Series&lt;/code&gt; containing categorical data, but note that the resulting array will always be a plain &lt;code&gt;Categorical&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d6451250f9d0e714b706e00fdfee799ac1dc0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;union_categoricals&lt;/code&gt; also works with the case of combining two categoricals of the same categories and order information (e.g. what you could also &lt;code&gt;append&lt;/code&gt; for).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e3d23a31da3c254e8b125ba607019bf40f91dd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unstack&lt;/code&gt;: (inverse operation of &lt;code&gt;stack&lt;/code&gt;) &amp;ldquo;pivot&amp;rdquo; a level of the (possibly hierarchical) row index to the column axis, producing a reshaped &lt;code&gt;DataFrame&lt;/code&gt; with a new inner-most level of column labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6a73054c0fcfd2a7bd56657004ddad0336e7f68" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;validate&lt;/code&gt; : string, default None. If specified, checks if merge is of specified type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd63ef5287067a4746f5c21ae4760a5514307d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;verify_integrity&lt;/code&gt; : boolean, default False. Check whether the new concatenated axis contains duplicates. This can be very expensive relative to the actual data concatenation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="769721f32db1bcd3008f23e38192f1638aba6fae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;where&lt;/code&gt; is related to &lt;code&gt;numpy.where&lt;/code&gt;, as its functionality is based on it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="928017e317771a18d8af4b43bcf127ed9992d676" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;xs&lt;/code&gt; can not be used to set values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cce0ac7c2ef45487c4245ed555c9d3f6dc2a39e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yield&lt;/code&gt; expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e90f348a2b9c7ee0c6490e9a8dad7c494b7a6ed" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in version 0.17.1&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e12a11b8ad045b3ff804297d7533a81b26e897c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in version 0.2.0 of pandas-gbq&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a1802fceb703f346764e5dbc0b592be84733df" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in version 0.20.0&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1abd7b86a20eea885c14c8555417db367ab751df" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in version 0.3.1 of pandas-gbq&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bc1c0fd7bb5a7bf7722d8fb68df0dca99716384" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in version 0.5.0 of pandas-gbq&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70acc4f299c3f70cdec639187223b16b7ec63c32" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in version 0.8.0 of pandas-gbq&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c85b48dae27afc8b6675bbec2bb0db6094f5f9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: The &lt;code&gt;DataFrame.style&lt;/code&gt; attribute is a property that returns a &lt;code&gt;Styler&lt;/code&gt; object. &lt;code&gt;Styler&lt;/code&gt; has a &lt;code&gt;_repr_html_&lt;/code&gt; method defined on it so they are rendered automatically. If you want the actual HTML back for further processing or for writing to file call the &lt;code&gt;.render()&lt;/code&gt; method which returns a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa7108767704a060ca409968b3eea993b5682aa0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pandas&lt;/em&gt; existing test structure is &lt;em&gt;mostly&lt;/em&gt; classed based, meaning that you will typically find tests wrapped in a class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4faf74d91304bf01b152316e4fc43d7396693007" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pandas&lt;/em&gt; follows the &lt;a href=&quot;http://www.python.org/dev/peps/pep-0008/&quot;&gt;PEP8&lt;/a&gt; standard and uses &lt;a href=&quot;https://black.readthedocs.io/en/stable/&quot;&gt;Black&lt;/a&gt; and &lt;a href=&quot;http://flake8.pycqa.org/en/latest/&quot;&gt;Flake8&lt;/a&gt; to ensure a consistent code format throughout the project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1111257e205d4a55c30b8060d85596d241fb7c4d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pandas&lt;/em&gt; is serious about testing and strongly encourages contributors to embrace &lt;a href=&quot;https://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;test-driven development (TDD)&lt;/a&gt;. This development process &amp;ldquo;relies on the repetition of a very short development cycle: first the developer writes an (initially failing) automated test case that defines a desired improvement or new function, then produces the minimum amount of code to pass that test.&amp;rdquo; So, before actually writing any code, you should write your tests. Often the test can be taken from the original GitHub issue. However, it is always worth considering additional use cases and writing corresponding tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7b212fbe362b5fa85fa3ea02cface7f7a136347" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pandas&lt;/em&gt; uses &lt;a href=&quot;https://pypi.org/project/isort/&quot;&gt;isort&lt;/a&gt; to standardise import formatting across the codebase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71f50ab1689ad72702fcd2e962c53d360db9082a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pandas&lt;/em&gt; uses the &lt;a href=&quot;https://google.github.io/styleguide/cppguide.html&quot;&gt;Google&lt;/a&gt; standard. Google provides an open source style checker called &lt;code&gt;cpplint&lt;/code&gt;, but we use a fork of it that can be found &lt;a href=&quot;https://github.com/cpplint/cpplint&quot;&gt;here&lt;/a&gt;. Here are &lt;em&gt;some&lt;/em&gt; of the more common &lt;code&gt;cpplint&lt;/code&gt; issues:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f8bb90361715007e3640b4a0862e9551c06ba68" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;this is an internal non-public method&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a1ccb05a390cda74c158661d853f42e7425de1d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;**kwargs:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;**kwargs:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6019b57dc5446b7c915cbc170e108eddd02051a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;**kwargs&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;**kwargs&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="edc6bb373a52f77478afb1ca650c80da28f3a2ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;**kwds :&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cad2cc62286f4d0cdcf09daf978053159ddafbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;**kwds&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;**kwds&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6d1cfdd5ec9b97b24d0b398cd661cd193bb6af7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;*args, **kwargs :&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aad3c035c96b70e371eb68645aa63334c27e858f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;*args, **kwargs:&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b769d02b422b0d2e4316dee4ef8b4d1319be3bbe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;*args, **kwargs&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="839041d41df06389ab2ab2477bddecd2f8802293" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;*args&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;*args&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="44a677e3557070d2b8b03a888fc3e21813087013" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aggregation&lt;/strong&gt;: compute a summary statistic (or statistics) for each group. Some examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d13bc9aaed1e6e0959db4f5fe01b849723bcf1d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Applying&lt;/strong&gt; a function to each group independently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cca5236c82d7326b82006e362dd3d38b30b2f91" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Axes&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Axes&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6feab750b01c0ec788fae560bbebe3c2ac794157" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bad:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Bad:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3044a438f1fe239c44b70405f918ed54bff24f85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Checks for Alphabetic and Numeric Characters&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="696d2c53dcbdc7e8ac91b401881390f98b42dd28" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Checks for Character Case&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f22bf9d6ced37f8071dfac7d5a4053b55a3d179e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Checks for Whitespace&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0e9fd8014c03739c12d092c2e670bc58474b892" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Combining&lt;/strong&gt; the results into a data structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a260395683b314ebe795a22b34423c9f7d43e421" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DataFrame&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;DataFrame&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d54fa49091aa760639d350d87b354c935aae8bf0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DataFrames&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;DataFrames&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8fd405001371867cc5d2938405c8a50a52d11b52" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Date&lt;/strong&gt;: Jul 18, 2019 &lt;strong&gt;Version&lt;/strong&gt;: 0.25.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb759552e7c4dd28d940ded2934c570eea7783b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DatetimeIndex&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;DatetimeIndex&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="62fd6447cf32b5aa93d980fff0015a8e10c6c2e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Download documentation&lt;/strong&gt;:  |</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d86f750ea0ccbc8839547da958ce7f764a6d5298" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Dropping missing values&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a220913388281f47b30690ef20f2f33590890bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Ease-of-use&lt;/strong&gt;: Is one tool easier/harder to use (you may have to be the judge of this, given side-by-side code comparisons)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b3c1be36e439da5a8a65329d0c4a045fa0a18d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Filtration&lt;/strong&gt;: discard some groups, according to a group-wise computation that evaluates True or False. Some examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbb0ed1fae427542bf7746fdd4f506d0231df4c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;From ndarray&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="608a35be299ef87c3fc8b9ad43789a164f77b75d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Functionality / flexibility&lt;/strong&gt;: what can/cannot be done with each tool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c98e92b56720f471cf4b7532e90a03db5d5d0bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Getting values on a DataFrame with an index that has integer labels&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17e762dd892a6835953030280693631a3607b242" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Getting values with a MultiIndex&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde73d3b07d46094cf9c7211f58bf48f67c217a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Getting values&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="805a0ffb11b78d88d54fcf745ffbed4d564d3f3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Good:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Good:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f3fdcf398c8b72f36ea86505090e7dc188956d91" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Hierarchical Indexes&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05b91422735e81e5a71f5f926d2d36831f7d23c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Hierarchical&lt;/strong&gt; labeling of axes (possible to have multiple labels per tick)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="659f07b42c0e6fe2b84c54a22d1cab37f2704efb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;However&lt;/strong&gt;, the packages in the linux package managers are often a few versions behind, so to get the newest version of pandas, it&amp;rsquo;s recommended to install using the &lt;code&gt;pip&lt;/code&gt; or &lt;code&gt;conda&lt;/code&gt; methods described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c369f4cb2d8f180932d402045580c310212babac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If you have a parametrized dtype you should set the ``_metadata`` class property&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88f6c761428761731faf99a89b91ce51d9ad614b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Indexing both axes&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d0fa35181def20a556262967b2172d7abd1292a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Indexing just the rows&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72ce6a0e1a62bc482d948aee6b0f8621cf7ebb84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;List-like `to_replace`&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="263b9cbced38e469eaed3c03fbd7565d4db72b1c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Many of these methods or variants thereof are available on the objects that contain an index (Series/DataFrame) and those should most likely be used before calling these methods directly.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ab7d5e57ec4990ef02bbcd4a3850c8136ca7f6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Minimum number of periods&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b1ba577923423a077b69bdb322f08a55f6f3768" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Missing values&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="983bb7b7cd76b20b8d9fb855bd69da91e7f4d1d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;More Detailed Checks for Numeric Characters&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a94c4d8a87899b18960880b00edb2bc00ba341ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Multi level columns: simple case&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="145f7b3c749052ba7f95ebe6212eb0c2da36ba2b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MultiIndex&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;MultiIndex&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0d3209e0c54c9477432debdc52556a7e6cac6457" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Non-square DataFrame with mixed dtypes&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dfae2820b8c3e724ad95bfde6a9b4539a58d6fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;None&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;None&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4361d7273e7675ab05b4cb1704ce7bfee937df3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Developers can check out &lt;a href=&quot;https://github.com/pandas-dev/pandas/blob/master/pandas/core/config.py&quot;&gt;pandas/core/config.py&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd20ca1be00a364e98af66505bb240453416e1fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The option &amp;lsquo;mode.sim_interactive&amp;rsquo; is mostly used for debugging purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dda33d781b309c20cf199d7039a75bbcada66818" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Using this form of shorthand may cause your code to break if new options with similar names are added in future versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56aa9612d576b79ae92176add23130f8d5a0a2f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Other Parameters&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3fbec4c362c2ab550bb4420db4f621395cfb680" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Performance&lt;/strong&gt;: how fast are operations. Hard numbers/benchmarks are preferable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d339486449f95a8b55f32d29b46a6a50313d2cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Prescribing the level(s) to be stacked&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="475a5fff2197c3059eae8a2ddefa9a464e3bb9a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Regular expression `to_replace`&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a8c12f7345ecf3d3cdf6153119bca331252edd1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Scalar `to_replace` and `value`&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587b9262f6d8ffd02341aa97434b2a3d22b3bf45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Series&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Series&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0ecac7b4db23fd8d09c283d4ff408d955099fefe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Setting values&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de5fe5ee88231b1a05da23b04e79251a3ce71707" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Shallow copy versus default (deep) copy:&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="027b8d42b21d2c26b5fc7570b6d15d8ded483a18" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Single level columns&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1beb62e9d76f8ab9d14cac2cbd72e2297c9fcea0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Specifying the values&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b2ae44bc064519ccfa6ca7d70f513716ae4ab2c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Splitting&lt;/strong&gt; the data into groups based on some criteria.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9be7ddc49b9e6343bb06cdfc980e409ebf05059" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Square DataFrame with homogeneous dtype&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2325b1f151a49e7750d76a80adee26fd5f8d0a94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This is not an actual numpy dtype&lt;/strong&gt;, but a duck type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda23aa4910ca836b6c226dc7571bc9c4dad3ac8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Time series&lt;/strong&gt;-specific functionality: date range generation and frequency conversion, moving window statistics, moving window linear regressions, date shifting and lagging, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53e3cdb6dcdf4fa17e191886d7db1dd095b005c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TimedeltaIndex&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;TimedeltaIndex&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="45c78ff9706c70535da0452bbd0855e9693368ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Transformation&lt;/strong&gt;: perform some group-specific computations and return a like-indexed object. Some examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bece64075c638a9ddb5c597403bf732e2346a50" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Useful links&lt;/strong&gt;: &lt;a href=&quot;https://pypi.org/project/pandas&quot;&gt;Binary Installers&lt;/a&gt; | &lt;a href=&quot;https://github.com/pandas-dev/pandas&quot;&gt;Source Repository&lt;/a&gt; | &lt;a href=&quot;https://github.com/pandas-dev/pandas/issues&quot;&gt;Issues &amp;amp; Ideas&lt;/a&gt; | &lt;a href=&quot;https://stackoverflow.com/questions/tagged/pandas&quot;&gt;Q&amp;amp;A Support&lt;/a&gt; | &lt;a href=&quot;https://groups.google.com/forum/#!forum/pydata&quot;&gt;Mailing List&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aea9eacf8d2729bb6dffd49fe9c9b9058c770dc0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using integer input&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="492dd03e24fbe4607064d063a4f8d502d6b4f01a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using string input&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae87c504b12154dadf9962651d49d8967c84eb8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;__call__&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;__call__&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0954314b0ec8ce640aaf726efb9c1ab730d1b667" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;all&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;all&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="12ff350f3dcf15568d0e5c80e6b93ab30967c71f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;any&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;any&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c99e1098e76b50e10db1f4991c89b1dff1a4d3d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;apply&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;apply&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fdddcd78336a851d5a0817e3750cb714a882ad66" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;apply_index&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;apply_index&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dff43d6d8defd148557bfbb9f6fd11500b593305" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ax&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ax&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9d321ef5daf3e9f93e972d4b96ed42aaa5ea921f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;bins&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;bins&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ae82c4c025e03d6d4ecfc909af076265cc3c9323" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;categories&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;categories&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="32d9ddd290579fd482e6e9fe36fae792181573f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;codes&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;codes&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="33f1a4bf6c2e44061b8e2cf7fe525d70a965606c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;copy&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;copy&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dd4407eb6a0d33ca68376b2474c858c9b80bfd10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;day&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;day&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ee58f5fa92a35a2ccc4b56735b167e7d597d95cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;delta&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;delta&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c1efdbb887a4733e68f280219f3a06a55b1cfb2e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dict-like `to_replace`&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf811a22f83dddb21a69a8188734cfd593a96bc9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dropna&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;dropna&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e0104ba269f15457dc31dd1e89c7f39f3315fba5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;empty&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;empty&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c428ae0647406cbe0d5cb8cb88df8f8144268ef8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;end_time&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;end_time&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="32d22a8efad836c95fb55af6b0b93e877de88c3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;env&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;env&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6a31f6fbf238f1679548e9b48d64da4107314c7a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;fold&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;fold&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a74f807f7aed710b34e61fec5174f1f637dfab0b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;freq&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;freq&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2d9500265b086b8953f6d20dcbc6f2ec1ef3eaf8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;freqstr&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;freqstr&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2b44373ea9532648a4566bef07cd9223885b8684" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;get_rule_code_suffix&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;get_rule_code_suffix&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ae5cc0b54445b3b299c3805a0de4823ebc9bd794" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;get_weeks&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;get_weeks&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="97450c375fa7c26a3a5ff825af36834219de5e38" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;get_year_end&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;get_year_end&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="de7f8de2db3aa6ad3b07b06e619acd5fdcaff9c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;groups&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;groups&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0d81ac607914c28841e7a43b61216c511e91b6f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;has_duplicates&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;has_duplicates&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="977fe633cd9bf7cf3d8c20eb9345f86e516ce653" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;hour&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;hour&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="06bd364ed5816c40687c327ac753e1385f96a501" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;isAnchored&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;isAnchored&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="62df0414b58bf66bf61c80e36437dd69b1aa8227" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;is_all_dates&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;is_all_dates&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b95cccc19ba32b06d316f95b7c8c99f0b088727d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;is_boolean&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;is_boolean&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="547b4a044649c6f763b75c94491577824697d797" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;is_floating&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;is_floating&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="69da55ddab9f4eceac13926c64d61a0fba349779" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;is_integer&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;is_integer&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="839bbc0a531f072473937accd661851ea443877c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;is_interval&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;is_interval&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ba7fdb2644f1d6b5d1511175bb306af7c4ecaa11" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;is_leap_year&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;is_leap_year&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="700f752c7b3379b300bb45d3710a56c781ee618a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;is_lexsorted_for_tuple&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;is_lexsorted_for_tuple&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7ae2eeb4ac9000bc48ae18eaa5e4cebd945d4180" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;is_mixed&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;is_mixed&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ba8b2d24e53ef3f961667f51e07db184cf2666d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;is_numeric&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;is_numeric&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="786168ebe040e465b6c4238f263c552f07453577" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;is_object&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;is_object&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cfeaedf020c8e0b3b474bd0df1e48f9ccfee8f0e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;is_populated&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;is_populated&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d36017f7ad74ea4364fb0437b75923ae39913f29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;isoformat&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;isoformat&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a203800e96549967f8f18123e741efb836366004" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;kwds&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;kwds&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="040987cbb3e3ab557b26b29413c0608c0103f8f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;level, sort_remaining are compat parameters&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfccd5cec0b603eadecd5cb66ea7e8574605b0d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;levels&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;levels&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8acb01a1a6bc758cfbb8ed4d674354d7c0ebfca0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;loader&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;loader&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="be2f568f383c587c8b3a6d69e9442dd40914f88d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;m_offset&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;m_offset&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1c5c83491458df61941d580be400ae15bd847775" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;many-to-many&lt;/strong&gt; joins: joining columns on columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d376cb21670c5304b011233985631f4369027623" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;many-to-one&lt;/strong&gt; joins: for example when joining an index (unique) to one or more columns in a different &lt;code&gt;DataFrame&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3583f509294d17dcde4747e5bb29dab152c9e7bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;microsecond&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;microsecond&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9140174cdbc9a1f2b26512234b81393332cdccf6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;minute&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;minute&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3d95e206f79597057649343ef5e266e3f96d2f0e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;month&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;month&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f810f79a2630765b9651210d00a76337d99974d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;name&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;name&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6222334d1eab79089ee2f96076b839e9e2fbeb5a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;names&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;names&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0084620c05d0d30944964f0ca0af6f378aa6e22d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;nanos&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;nanos&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a55df30868fcede7310a04c0064c3d753c930667" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;nanosecond&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;nanosecond&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3cee7b3f7970fce6caa3ce2494474f9b4a9c5113" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;now&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;now&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fe38eb67314b7e80fdda0c3a8713f10f7c1fd96c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;onOffset&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;onOffset&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b28a99001f353b63cd68af013bbb4b68014c8bab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;one-to-one&lt;/strong&gt; joins: for example when joining two &lt;code&gt;DataFrame&lt;/code&gt; objects on their indexes (which must contain unique values).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12da9b36cc5a41db97f78423768e38e008b6be9f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ordered&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ordered&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4929239386739bb5f662df6776c2677cb7ca8961" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ordinal&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ordinal&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="80367f4edb5daf1127ad2d5bd5e4d50939ecb558" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pandas&lt;/strong&gt; is a &lt;a href=&quot;https://www.python.org&quot;&gt;Python&lt;/a&gt; package providing fast, flexible, and expressive data structures designed to make working with &amp;ldquo;relational&amp;rdquo; or &amp;ldquo;labeled&amp;rdquo; data both easy and intuitive. It aims to be the fundamental high-level building block for doing practical, &lt;strong&gt;real world&lt;/strong&gt; data analysis in Python. Additionally, it has the broader goal of becoming &lt;strong&gt;the most powerful and flexible open source data analysis / manipulation tool available in any language&lt;/strong&gt;. It is already well on its way toward this goal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22f1a6fbb4345dc014154747dcf72abb10772fc9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;quarter&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;quarter&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1d77430137b4edea0c5acaa4a8d3757a87344faa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;qyear&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;qyear&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="63f78aa2ce98b8da35a42755fd7ee8b4ce0c31ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;rule_code&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;rule_code&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ad0613d4a89fce9ad43f611fc15f76d893efc7df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;second&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;second&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e266afa343b76abbf5018fc71b7a48ddb3ad80b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;start_time&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;start_time&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="13d2492dc066320c355a48a10c1949a38bff89d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;template&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;template&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a540ba3088d2bf646c8c75130b9fed47e3249959" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tz&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;tz&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5ecbe4a6f3dee6036d3db9c0b48fd5cdf0877ddd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tzinfo&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;tzinfo&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2fe8c102c8793c67d6746562319d7cce28d3e604" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;value&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="84e8a56c0fc645ac3685ddb667ec195083c9919e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;view&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;view&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d0b03a0d69fac771c057b010efb5b45c5f392709" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;weekofyear&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;weekofyear&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e7c61629000a90ec433bbef8d74536eda67edf58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;year&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;year&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ee031e6a0d489da27992e04f082dc4fff76f711b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;year_has_extra_week&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;year_has_extra_week&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6dcd4ce23d88e2ee9568ba546c007c63d9131c1b" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="translated">A</target>
        </trans-unit>
        <trans-unit id="23ae7b6dee5a35d234981bbffe7880a499da5661" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;backward&amp;rdquo; search selects the last row in the right DataFrame whose &amp;lsquo;on&amp;rsquo; key is less than or equal to the left&amp;rsquo;s key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cd328d02bacfa62aeec2a6b0360ca1e066751dc" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;forward&amp;rdquo; search selects the first row in the right DataFrame whose &amp;lsquo;on&amp;rsquo; key is greater than or equal to the left&amp;rsquo;s key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="129a2fb71b51da24ededcb295cf657ec97f6e46f" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;nearest&amp;rdquo; search selects the row in the right DataFrame whose &amp;lsquo;on&amp;rsquo; key is closest in absolute distance to the left&amp;rsquo;s key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d5d136aefcbacb946c1ae272ba70d3a9da2afd6" translate="yes" xml:space="preserve">
          <source>A 1-D array indicating if each value is missing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="998085ab07fc48c902bcd2de070af3e47216fb2b" translate="yes" xml:space="preserve">
          <source>A 1-D sequence. Sequences that aren&amp;rsquo;t pandas objects are coerced to ndarrays before factorization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b0bc7cc0211b19f5f62c37073662ba5c5f9314" translate="yes" xml:space="preserve">
          <source>A 1-d boolean-dtype array indicating missing values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e8855b6b00a7c864d6b4d2e88b019cdf14f16fc" translate="yes" xml:space="preserve">
          <source>A 1-d integer-dtype array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a14f4a8b3a4f0e82e926df49fe8c38413a522db5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../reference/api/pandas.api.extensions.extensiondtype#pandas.api.extensions.ExtensionDtype&quot;&gt;&lt;code&gt;pandas.api.extensions.ExtensionDtype&lt;/code&gt;&lt;/a&gt; is similar to a &lt;code&gt;numpy.dtype&lt;/code&gt; object. It describes the data type. Implementors are responsible for a few unique items like the name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e26be7f585e54a027d97a164525dd92027cf3e8f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt; is a representation of the distribution of data. This function calls &lt;code&gt;matplotlib.pyplot.hist()&lt;/code&gt;, on each series in the DataFrame, resulting in one histogram per column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cda651390d140119a5a96e6823b08942ae1b442" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Categorical&lt;/code&gt; can be stored in a &lt;code&gt;Series&lt;/code&gt; or &lt;code&gt;DataFrame&lt;/code&gt;. To create a Series of dtype &lt;code&gt;category&lt;/code&gt;, use &lt;code&gt;cat = s.astype(dtype)&lt;/code&gt; or &lt;code&gt;Series(..., dtype=dtype)&lt;/code&gt; where &lt;code&gt;dtype&lt;/code&gt; is either</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a7341e1d7f0606e680872c1a81050f77f768d98" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DataFrame&lt;/code&gt; in pandas is analogous to a SAS data set - a two-dimensional data source with labeled columns that can be of different types. As will be shown in this document, almost any operation that can be applied to a data set using SAS&amp;rsquo;s &lt;code&gt;DATA&lt;/code&gt; step, can also be accomplished in pandas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b472425037e947b644f98571ab2d5542f8936566" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DataFrame&lt;/code&gt; in pandas is analogous to a Stata data set &amp;ndash; a two-dimensional data source with labeled columns that can be of different types. As will be shown in this document, almost any operation that can be applied to a data set in Stata can also be accomplished in pandas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb8d685bea95a6054d0037a28885d820cb0463e7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DataFrame&lt;/code&gt; with one row for each match, and one column for each group. Its rows have a &lt;code&gt;MultiIndex&lt;/code&gt; with first levels that come from the subject &lt;code&gt;Series&lt;/code&gt;. The last level is named &amp;lsquo;match&amp;rsquo; and indexes the matches in each item of the &lt;code&gt;Series&lt;/code&gt;. Any capture group names in regular expression pat will be used for column names; otherwise capture group numbers will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="020ede9fdb4a0083f4a3a9a2d64d8c3bed3cc507" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DataFrame&lt;/code&gt;, in the case of a &lt;code&gt;MultiIndex&lt;/code&gt; in the columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b382b6afa3e255ce3e6500208e73ec54a21f42c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Series&lt;/code&gt; is the data structure that represents one column of a &lt;code&gt;DataFrame&lt;/code&gt;. SAS doesn&amp;rsquo;t have a separate data structure for a single column, but in general, working with a &lt;code&gt;Series&lt;/code&gt; is analogous to referencing a column in the &lt;code&gt;DATA&lt;/code&gt; step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fddacd490d5990cc01e4477d67fa03f87ffb9a5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Series&lt;/code&gt; is the data structure that represents one column of a &lt;code&gt;DataFrame&lt;/code&gt;. Stata doesn&amp;rsquo;t have a separate data structure for a single column, but in general, working with a &lt;code&gt;Series&lt;/code&gt; is analogous to referencing a column of a data set in Stata.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cf8e9f30d96293570eb696b7a7ce085c1ebe54f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Series&lt;/code&gt;, in the case of a simple column Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8dfdbf2c5da7ffc404b231ba2789185c07bf9b4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;border=border&lt;/code&gt; attribute is included in the opening &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; tag. Default &lt;code&gt;pd.options.display.html.border&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2e4efdb199c0f9851032c4cbe326b90470c6ad6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;callable&lt;/code&gt; function with one argument (the calling Series or DataFrame) and that returns valid output for indexing (one of the above)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6dc4d85a2a04cd1ae65ec2800a7d4953efc6bf5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;callable&lt;/code&gt; function with one argument (the calling Series or DataFrame) and that returns valid output for indexing (one of the above).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41421d7fe4a712cfb554d42ec14d3ddf347ace5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;callable&lt;/code&gt; function with one argument (the calling Series or DataFrame) and that returns valid output for indexing (one of the above). This is useful in method chains, when you don&amp;rsquo;t have a reference to the calling object, but would like to base your selection on some value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dd52eb18899c234df5a24218fee44cace1ccac0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;re&lt;/code&gt; module flag, for example &lt;code&gt;re.IGNORECASE&lt;/code&gt;. These allow to modify regular expression matching for things like case, spaces, etc. Multiple flags can be combined with the bitwise OR operator, for example &lt;code&gt;re.IGNORECASE | re.MULTILINE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94318c06fadc0cb677fbaffbc542397b76810cc1" translate="yes" xml:space="preserve">
          <source>A DataFrame of the two merged objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cc894fd684122f8255a14eebdc11edf9f60b77c" translate="yes" xml:space="preserve">
          <source>A DataFrame that contains each stub name as a variable, with new index (i, j).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0e93212489a184d05179f45fb4bfaef8b62c13a" translate="yes" xml:space="preserve">
          <source>A DataFrame that must have the same length as self.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d31e2a26fa4772bd60eaeccbd745e2b4675ac790" translate="yes" xml:space="preserve">
          <source>A DataFrame where all columns are the same type (e.g., int64) results in an array of the same type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64531078e6246f71e9486f6df9601e4ff5e667e6" translate="yes" xml:space="preserve">
          <source>A DataFrame with mixed type columns(e.g., str/object, int64, float32) results in an ndarray of the broadest type that accommodates these mixed types (e.g., object).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c1c613ce5a7bfb976cb3fde15e5cc1174baed3a" translate="yes" xml:space="preserve">
          <source>A DataFrame with one row for each subject string, and one column for each group. Any capture group names in regular expression pat will be used for column names; otherwise capture group numbers will be used. The dtype of each result column is always object, even when no match is found. If &lt;code&gt;expand=False&lt;/code&gt; and pat has only one capture group, then return a Series (if subject is a Series) or Index (if subject is an Index).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5493edcbad7b5693ad045bc64baf42df5f2a6fb4" translate="yes" xml:space="preserve">
          <source>A DataFrame with the affected columns rounded to the specified number of decimal places.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7baf5a611b477752e930fa064798398d1dc2b781" translate="yes" xml:space="preserve">
          <source>A DataFrame with the same values stored as dense arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a35c7b3e7bd88f262e8b47ead54e536f3a822f3" translate="yes" xml:space="preserve">
          <source>A Grouper allows the user to specify a groupby instruction for a target object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0775b35586990965e6467888204904b27ada1c06" translate="yes" xml:space="preserve">
          <source>A NumPy array is returned when &lt;code&gt;subplots&lt;/code&gt; is True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9978df43017cc3ce23869c64697c734a8e7aec03" translate="yes" xml:space="preserve">
          <source>A NumPy array representing the underlying data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a8a05ac64e1863e93baa4404b62fb1c00ea7f7" translate="yes" xml:space="preserve">
          <source>A NumPy ndarray representing the values in this Series or Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b035e2002dbd6cf38325e49520076df4df4bb7" translate="yes" xml:space="preserve">
          <source>A PeriodDtype instance from which to extract a &lt;code&gt;freq&lt;/code&gt;. If both &lt;code&gt;freq&lt;/code&gt; and &lt;code&gt;dtype&lt;/code&gt; are specified, then the frequencies must match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="477b64fb8a64e6facfe2a9d91b79d681cf3f3192" translate="yes" xml:space="preserve">
          <source>A Python docstring is a string used to document a Python module, class, function or method, so programmers can understand what it does without having to read the details of the implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="888efa594ba850914259111f5087a44cf9751f55" translate="yes" xml:space="preserve">
          <source>A Python function, to be called on each of the axis labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5dbc5837a63fdf3f7ab57275f4a743edbf9cf41" translate="yes" xml:space="preserve">
          <source>A SAS data set can be built from specified values by placing the data after a &lt;code&gt;datalines&lt;/code&gt; statement and specifying the column names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="228caf9ee533f0864f073bed840ec95ad617b755" translate="yes" xml:space="preserve">
          <source>A SQL table is returned as two-dimensional data structure with labeled axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04c34169499497c5236db24b5ea52a03044fb5a" translate="yes" xml:space="preserve">
          <source>A Series and a scalar &lt;code&gt;where&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="053bf2c081fed8dbd596052b8e6deeec27dce52a" translate="yes" xml:space="preserve">
          <source>A Series of booleans indicating whether the given pattern matches the end of each string element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11754a701bb5f87b180c6cb0e34d771794a456e0" translate="yes" xml:space="preserve">
          <source>A Series of booleans indicating whether the given pattern matches the start of each string element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fb359a31344a47d625eecba8e2626bbe3c4410f" translate="yes" xml:space="preserve">
          <source>A Series or Index of boolean values indicating whether the given pattern is contained within the string of each element of the Series or Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8372573e739c3338f77fcf74a9bb8cb95d26ee71" translate="yes" xml:space="preserve">
          <source>A Series or Index of integer values indicating the length of each element in the Series or Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5763bca0749112df39999492eab2737d2601611" translate="yes" xml:space="preserve">
          <source>A Series that must have the same length as self.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ac1547bae4682a35e2a87b4d1a0814a793e7b98" translate="yes" xml:space="preserve">
          <source>A Series whose index is the original column names and whose values is the memory usage of each column in bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85d2a5332848bd9ee95489577d26925ba096d7d8" translate="yes" xml:space="preserve">
          <source>A Stata data set can be built from specified values by placing the data after an &lt;code&gt;input&lt;/code&gt; statement and specifying the column names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f30d90104792708e75f003be69371517147be88b" translate="yes" xml:space="preserve">
          <source>A URL, a file-like object, or a raw string containing HTML. Note that lxml only accepts the http, ftp and file url protocols. If you have a URL that starts with &lt;code&gt;'https'&lt;/code&gt; you might try removing the &lt;code&gt;'s'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dbc5368e0df4d6b5ba95293bb52cbd8812f00f9" translate="yes" xml:space="preserve">
          <source>A ValueError is raised if there are any duplicates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a33d40660e38c1e07caa2563afca7cfdcb99e99" translate="yes" xml:space="preserve">
          <source>A Window sub-classed for the particular operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7eb78c0a23d59a79a8cba8e235988aa5bb6a17d" translate="yes" xml:space="preserve">
          <source>A bar plot is a plot that presents categorical data with rectangular bars with lengths proportional to the values that they represent. A bar plot shows comparisons among discrete categories. One axis of the plot shows the specific categories being compared, and the other axis represents a measured value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8018b164719d90f144d1ad89bfc942e80f97dd" translate="yes" xml:space="preserve">
          <source>A black list of data types to omit from the result. Ignored for &lt;code&gt;Series&lt;/code&gt;. Here are the options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2358c3743527c311927874f6f78c74aaa5271406" translate="yes" xml:space="preserve">
          <source>A blank line is left between the short summary and the extended summary. And every paragraph in the extended summary is finished by a dot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="291ac89cd7a035804893188f0816799fe9a6cc18" translate="yes" xml:space="preserve">
          <source>A boolean array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="321cf4194468ef189f8ae742407526982ab9609f" translate="yes" xml:space="preserve">
          <source>A boolean array of the same length as the axis being sliced, e.g. &lt;code&gt;[True, False, True]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b462de0d9c5c03d360e00e3da794a218cc87c62c" translate="yes" xml:space="preserve">
          <source>A boolean array of whether my values are NA.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="137cd797d508776490681e435fda88611317b922" translate="yes" xml:space="preserve">
          <source>A boolean array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7441006a70dcc11b6af5eca1b8e8f5653753ff4" translate="yes" xml:space="preserve">
          <source>A boolean indicating if a scalar &lt;a href=&quot;pandas.interval#pandas.Interval&quot;&gt;&lt;code&gt;Interval&lt;/code&gt;&lt;/a&gt; is empty, or a boolean &lt;code&gt;ndarray&lt;/code&gt; positionally indicating if an &lt;code&gt;Interval&lt;/code&gt; in an &lt;a href=&quot;pandas.arrays.intervalarray#pandas.arrays.IntervalArray&quot;&gt;&lt;code&gt;IntervalArray&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;pandas.intervalindex#pandas.IntervalIndex&quot;&gt;&lt;code&gt;IntervalIndex&lt;/code&gt;&lt;/a&gt; is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e21bf4c2cedc840658e5f79d3061d77a23bfaae9" translate="yes" xml:space="preserve">
          <source>A boolean indicating if a scalar &lt;code&gt;Interval&lt;/code&gt; is empty, or a boolean &lt;code&gt;ndarray&lt;/code&gt; positionally indicating if an &lt;code&gt;Interval&lt;/code&gt; in an &lt;code&gt;IntervalArray&lt;/code&gt; or &lt;code&gt;IntervalIndex&lt;/code&gt; is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4422599152db83df2ff780eb7c7cec461db06d3" translate="yes" xml:space="preserve">
          <source>A bounded slice-like interval; the elements of an IntervalArray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da9cf157799cdd842ff21badc747e0a8c5caa402" translate="yes" xml:space="preserve">
          <source>A bounded slice-like interval; the elements of an IntervalIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c8f9b60271f24a5ac9abb9b293e5028702f2663" translate="yes" xml:space="preserve">
          <source>A box plot is a method for graphically depicting groups of numerical data through their quartiles. The box extends from the Q1 to Q3 quartile values of the data, with a line at the median (Q2). The whiskers extend from the edges of box to show the range of the data. The position of the whiskers is set by default to 1.5*IQR (IQR = Q3 - Q1) from the edges of the box. Outlier points are those past the end of the whiskers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93eea29e9903a4e1c912c36f620f39bae08708ea" translate="yes" xml:space="preserve">
          <source>A call to one of the &lt;code&gt;.set_&lt;/code&gt; or &lt;code&gt;.hide_&lt;/code&gt; methods, e.g. &lt;code&gt;.set_caption&lt;/code&gt; or &lt;code&gt;.hide_columns&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c23d5d57ba003a6f06ee756274baa576133624" translate="yes" xml:space="preserve">
          <source>A callable that gets instances of the scalar type and returns a string. By default, &lt;a href=&quot;https://docs.python.org/3/library/functions.html#repr&quot;&gt;&lt;code&gt;repr()&lt;/code&gt;&lt;/a&gt; is used when &lt;code&gt;boxed=False&lt;/code&gt; and &lt;code&gt;str()&lt;/code&gt; is used when &lt;code&gt;boxed=True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2defc42e3eac90d792d35736ae009fdb8abf1132" translate="yes" xml:space="preserve">
          <source>A callable that takes a dataframe as its first argument, and returns a dataframe, a series or a scalar. In addition the callable may take positional and keyword arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="545e14764db2ce8073498f1cc6e536e5d57ea2d2" translate="yes" xml:space="preserve">
          <source>A categorical array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a950fbdea228ab39e2cbc9c4e84e1a16491cafcc" translate="yes" xml:space="preserve">
          <source>A character code (one of &amp;lsquo;biufcmMOSUV&amp;rsquo;), default &amp;lsquo;O&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a301a15b87a7279e11102b4bff942ea398a6ea3" translate="yes" xml:space="preserve">
          <source>A character indicating the separation of the variable names in the wide format, to be stripped from the names in the long format. For example, if your column names are A-suffix1, A-suffix2, you can strip the hyphen by specifying &lt;code&gt;sep=&amp;rsquo;-&amp;lsquo;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42aa0f23b020409b730078967222bf88786aa01e" translate="yes" xml:space="preserve">
          <source>A class decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa28b7784860d12e8a6434fec445207207a3b34b" translate="yes" xml:space="preserve">
          <source>A closed interval (in mathematics denoted by square brackets) contains its endpoints, i.e. the closed interval &lt;code&gt;[0, 5]&lt;/code&gt; is characterized by the conditions &lt;code&gt;0 &amp;lt;= x &amp;lt;= 5&lt;/code&gt;. This is what &lt;code&gt;closed='both'&lt;/code&gt; stands for. An open interval (in mathematics denoted by parentheses) does not contain its endpoints, i.e. the open interval &lt;code&gt;(0, 5)&lt;/code&gt; is characterized by the conditions &lt;code&gt;0 &amp;lt; x &amp;lt; 5&lt;/code&gt;. This is what &lt;code&gt;closed='neither'&lt;/code&gt; stands for. Intervals can also be half-open or half-closed, i.e. &lt;code&gt;[0, 5)&lt;/code&gt; is described by &lt;code&gt;0 &amp;lt;= x &amp;lt; 5&lt;/code&gt; (&lt;code&gt;closed='left'&lt;/code&gt;) and &lt;code&gt;(0, 5]&lt;/code&gt; is described by &lt;code&gt;0 &amp;lt; x &amp;lt;= 5&lt;/code&gt; (&lt;code&gt;closed='right'&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ca904ce7dbfb4f6282a1f521867899d8a8d0ff1" translate="yes" xml:space="preserve">
          <source>A collection of intervals may be stored in an &lt;a href=&quot;api/pandas.arrays.intervalarray#pandas.arrays.IntervalArray&quot;&gt;&lt;code&gt;arrays.IntervalArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7fa96b358b3fd840aad5a09d5f84c1d22e3371a" translate="yes" xml:space="preserve">
          <source>A collection of timedeltas may be stored in a &lt;a href=&quot;api/pandas.arrays.periodarray#pandas.arrays.PeriodArray&quot;&gt;&lt;code&gt;arrays.PeriodArray&lt;/code&gt;&lt;/a&gt;. Every period in a &lt;code&gt;PeriodArray&lt;/code&gt; must have the same &lt;code&gt;freq&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec657595a0f08327d4435c704c95fb21754da6c1" translate="yes" xml:space="preserve">
          <source>A collection of timedeltas may be stored in a &lt;code&gt;TimedeltaArray&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8b99123e0ba254645c79e49277474743f661f4" translate="yes" xml:space="preserve">
          <source>A collection of timestamps may be stored in a &lt;a href=&quot;api/pandas.arrays.datetimearray#pandas.arrays.DatetimeArray&quot;&gt;&lt;code&gt;arrays.DatetimeArray&lt;/code&gt;&lt;/a&gt;. For timezone-aware data, the &lt;code&gt;.dtype&lt;/code&gt; of a &lt;code&gt;DatetimeArray&lt;/code&gt; is a &lt;a href=&quot;api/pandas.datetimetzdtype#pandas.DatetimeTZDtype&quot;&gt;&lt;code&gt;DatetimeTZDtype&lt;/code&gt;&lt;/a&gt;. For timezone-naive data, &lt;code&gt;np.dtype(&quot;datetime64[ns]&quot;)&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8062624311e2f215ac01390e9dc2ee777cdd4e81" translate="yes" xml:space="preserve">
          <source>A column name or position whose values will be used to color the marker points according to a colormap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbfd30f564536f7e83aaff8d32b675773f494fff" translate="yes" xml:space="preserve">
          <source>A comma-separated values (csv) file is returned as two-dimensional data structure with labeled axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3fb26b012dc1d94d8889633b2251bc656919688" translate="yes" xml:space="preserve">
          <source>A concise tutorial with real life examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="975e8720cf6b105764ae5616e7c249ebb93d99a0" translate="yes" xml:space="preserve">
          <source>A consideration when using this chart is that the box and the whiskers can overlap, which is very common when plotting small sets of data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3b27f6e705bf2f3252f0d117b3376886d387db5" translate="yes" xml:space="preserve">
          <source>A copy of the object with all matching occurrences of &lt;code&gt;pat&lt;/code&gt; replaced by &lt;code&gt;repl&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db54f3d11ac545cfc36eeb2fc785add41b6ed0be" translate="yes" xml:space="preserve">
          <source>A css id is included in the opening &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; tag if specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="861af26725ae444e628c026f892366a2ae765577" translate="yes" xml:space="preserve">
          <source>A custom data type, to be paired with an ExtensionArray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54ca9cd626f82af8e59956d05e0edf1fc35572a7" translate="yes" xml:space="preserve">
          <source>A database URI could be provided as as str. SQLite DBAPI connection mode not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ecd3529d735e1b2b84a7f9524c34c573b2d5046" translate="yes" xml:space="preserve">
          <source>A dataframe containing columns from both the caller and &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df167c03934a0bd9515a805221221cc8be2e6cde" translate="yes" xml:space="preserve">
          <source>A datetime to use as file creation date. Default is the current time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="221b68c174a8483fea94eff81558811ab70bd69d" translate="yes" xml:space="preserve">
          <source>A default repr displaying the type, (truncated) data, length, and dtype is provided. It can be customized or replaced by by overriding:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f72b7d74de7ed1c6a748206acfa1ff71c57492f1" translate="yes" xml:space="preserve">
          <source>A dense array of values to store in the SparseArray. This may contain &lt;code&gt;fill_value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46d19d51aff503758d316f65d6411c7c23257eb8" translate="yes" xml:space="preserve">
          <source>A dict of item-&amp;gt;dtype of what to downcast if possible, or the string &amp;lsquo;infer&amp;rsquo; which will try to downcast to an appropriate equal type (e.g. float64 to int64 if possible).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d4c4555257db0e0c8b015b65850a7188c13adc1" translate="yes" xml:space="preserve">
          <source>A dict or &lt;code&gt;Series&lt;/code&gt;, providing a &lt;code&gt;label -&amp;gt; group name&lt;/code&gt; mapping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbbff779fc7b1ce2a08a29305ad82f2b8a02468f" translate="yes" xml:space="preserve">
          <source>A dictionary of global variables, taken from globals() by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c422ebe7b955b183d28b1ae20b4d27cadee68e" translate="yes" xml:space="preserve">
          <source>A dictionary of local variables, taken from locals() by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1feac20fcbc9d41a1a0c06b99e121ea37dd6b19" translate="yes" xml:space="preserve">
          <source>A directory of projects providing &lt;a href=&quot;development/extending#extending-register-accessors&quot;&gt;extension accessors&lt;/a&gt;. This is for users to discover new accessors and for library authors to coordinate on the namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="706fe789ffbc6e30dbefab917f201118d18d645f" translate="yes" xml:space="preserve">
          <source>A fairly common use of the &lt;code&gt;keys&lt;/code&gt; argument is to override the column names when creating a new &lt;code&gt;DataFrame&lt;/code&gt; based on existing &lt;code&gt;Series&lt;/code&gt;. Notice how the default behaviour consists on letting the resulting &lt;code&gt;DataFrame&lt;/code&gt; inherit the parent &lt;code&gt;Series&lt;/code&gt;&amp;rsquo; name, when these existed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13491899c69f3f5001c04553eb8fa4c30e396163" translate="yes" xml:space="preserve">
          <source>A full list of the packages available as part of the &lt;a href=&quot;http://docs.continuum.io/anaconda/&quot;&gt;Anaconda&lt;/a&gt; distribution &lt;a href=&quot;http://docs.continuum.io/anaconda/pkg-docs.html&quot;&gt;can be found here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c09501b58b77e14c125e7629d3370f90ee6a099e" translate="yes" xml:space="preserve">
          <source>A generator that iterates over the rows of the frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1197c0a006d163af4ba91ea7fbf13fcf546666fd" translate="yes" xml:space="preserve">
          <source>A groupby operation involves some combination of splitting the object, applying a function, and combining the results. This can be used to group large amounts of data and compute operations on these groups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afd0c17f0f426036d4e354c54845b08cb088a304" translate="yes" xml:space="preserve">
          <source>A guide to import layout as per pep8 can be found &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/#imports/&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3401db91915a8723375be1b8803bd11a3b998cce" translate="yes" xml:space="preserve">
          <source>A handy pandas &lt;a href=&quot;http://pandas.pydata.org/Pandas_Cheat_Sheet.pdf&quot;&gt;cheat sheet&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f7d84946dddb7488ca500de20b5ec9b34a741a0" translate="yes" xml:space="preserve">
          <source>A histogram can be stacked using &lt;code&gt;stacked=True&lt;/code&gt;. Bin size can be changed using the &lt;code&gt;bins&lt;/code&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3dcfba3f9705039f226d5a27a77f19f72597d6e" translate="yes" xml:space="preserve">
          <source>A histogram is a representation of the distribution of data. This function groups the values of all given Series in the DataFrame into bins and draws all bins in one &lt;a href=&quot;https://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;matplotlib.axes.Axes&lt;/code&gt;&lt;/a&gt;. This is useful when the DataFrame&amp;rsquo;s Series are in a similar scale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3abd44b58039746be5d9838d4e3561eb3ab8d97" translate="yes" xml:space="preserve">
          <source>A histogram plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8412e8baa0b83fab19bd517167dd5e19c3324401" translate="yes" xml:space="preserve">
          <source>A horizontal bar plot is a plot that presents quantitative data with rectangular bars with lengths proportional to the values that they represent. A bar plot shows comparisons among discrete categories. One axis of the plot shows the specific categories being compared, and the other axis represents a measured value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ce35e6fa8b0d3a877d5e32ceb7fa47f5f4589ae" translate="yes" xml:space="preserve">
          <source>A keyword argument to &lt;code&gt;Styler.__init__&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5e53327d70d8dc3647f0deaa26ff616c881c3c6" translate="yes" xml:space="preserve">
          <source>A label for the data set. Must be 80 characters or smaller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a905a90e336b6a71d7fb9f185bc7004274a791cf" translate="yes" xml:space="preserve">
          <source>A leap year is a year, which has 366 days (instead of 365) including 29th of February as an intercalary day. Leap years are years which are multiples of four with the exception of years divisible by 100 but not by 400.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f73bfbce9596385baeefa6e7586169f2a9497d46" translate="yes" xml:space="preserve">
          <source>A length-2 sequence where each element is optionally a string indicating the suffix to add to overlapping column names in &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; respectively. Pass a value of &lt;code&gt;None&lt;/code&gt; instead of a string to indicate that the column name from &lt;code&gt;left&lt;/code&gt; or &lt;code&gt;right&lt;/code&gt; should be left as-is, with no suffix. At least one of the values must not be None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22cf442a732f5ea50f538aec3d0fb17c0d5b33cd" translate="yes" xml:space="preserve">
          <source>A list (or series or numpy array)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bc5179b5bb7bb56bc971d8b4de615843951c4a9" translate="yes" xml:space="preserve">
          <source>A list of Term (or convertible) objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb48a81b7123eca7d9b5e4d4f95e3f19d59da631" translate="yes" xml:space="preserve">
          <source>A list of any of the above things.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7826f4a1792bc4a9c7a2dde26f3005d796cbb72" translate="yes" xml:space="preserve">
          <source>A list of column names to use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="172456e59be82684553f3103426492d503c42296" translate="yes" xml:space="preserve">
          <source>A list of columns names to return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb570ec5cd01a7d5097b0f9caefe8b924e04e7a3" translate="yes" xml:space="preserve">
          <source>A list of field widths which can be used instead of &amp;lsquo;colspecs&amp;rsquo; if the intervals are contiguous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="430830fc7bda4d4dfe4243cf537e2ab4f7c07a85" translate="yes" xml:space="preserve">
          <source>A list of objects implementing the &lt;code&gt;__getitem__&lt;/code&gt; special method that you can use to inject an additional collection of namespaces to use for variable lookup. For example, this is used in the &lt;a href=&quot;pandas.dataframe.query#pandas.DataFrame.query&quot;&gt;&lt;code&gt;query()&lt;/code&gt;&lt;/a&gt; method to inject the &lt;code&gt;DataFrame.index&lt;/code&gt; and &lt;code&gt;DataFrame.columns&lt;/code&gt; variables that refer to their respective &lt;a href=&quot;pandas.dataframe#pandas.DataFrame&quot;&gt;&lt;code&gt;DataFrame&lt;/code&gt;&lt;/a&gt; instance attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb9e87e5d925122ca10748bd441b35743e2b080" translate="yes" xml:space="preserve">
          <source>A list of strings (i.e. &lt;code&gt;['X', 'Y']&lt;/code&gt;) can be passed to boxplot in order to group the data by combination of the variables in the x-axis:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb75ce91c50b50d1d0f16723270bc3d684090ce1" translate="yes" xml:space="preserve">
          <source>A list of tuples giving the extents of the fixed-width fields of each line as half-open intervals (i.e., [from, to[ ). String value &amp;lsquo;infer&amp;rsquo; can be used to instruct the parser to try detecting the column specifications from the first 100 rows of the data which are not being skipped via skiprows (default=&amp;rsquo;infer&amp;rsquo;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fadd55b943cf0d1e7df64a0ad58d12f5a919e510" translate="yes" xml:space="preserve">
          <source>A list of values to use for xticks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1c3000f3036ba6eabd686d083fd47b7385de5dd" translate="yes" xml:space="preserve">
          <source>A list or NumPy array of the same length as the selected axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c62d330b50a2836b0fd72e1b055157e5d10e1d" translate="yes" xml:space="preserve">
          <source>A list or array of integers &lt;code&gt;[4, 3, 0]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b95ab6166cfe391f72d040a2ed4c33169f0a15d" translate="yes" xml:space="preserve">
          <source>A list or array of integers, e.g. &lt;code&gt;[4, 3, 0]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95486f64cd588dd4a2747efbd280216a60af81b3" translate="yes" xml:space="preserve">
          <source>A list or array of labels &lt;code&gt;['a', 'b', 'c']&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bb9c5a0dd95cbef62113cb64908a7f3f324e504" translate="yes" xml:space="preserve">
          <source>A list or array of labels, e.g. &lt;code&gt;['a', 'b', 'c']&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a14b968ff9d47a69a3a7d368163c84dd3f1918" translate="yes" xml:space="preserve">
          <source>A list-like of dtypes : Excludes the provided data types from the result. To exclude numeric types submit &lt;code&gt;numpy.number&lt;/code&gt;. To exclude object columns submit the data type &lt;code&gt;numpy.object&lt;/code&gt;. Strings can also be used in the style of &lt;code&gt;select_dtypes&lt;/code&gt; (e.g. &lt;code&gt;df.describe(include=['O'])&lt;/code&gt;). To exclude pandas categorical columns, use &lt;code&gt;'category'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171877dc80665e3e3c23f70112cd20f7408f8699" translate="yes" xml:space="preserve">
          <source>A list-like of dtypes : Limits the results to the provided data types. To limit the result to numeric types submit &lt;code&gt;numpy.number&lt;/code&gt;. To limit it instead to object columns submit the &lt;code&gt;numpy.object&lt;/code&gt; data type. Strings can also be used in the style of &lt;code&gt;select_dtypes&lt;/code&gt; (e.g. &lt;code&gt;df.describe(include=['O'])&lt;/code&gt;). To select pandas categorical columns, use &lt;code&gt;'category'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d28cdab6aac704918e38261cdf6a53a6fb7875" translate="yes" xml:space="preserve">
          <source>A literal &lt;code&gt;'%'&lt;/code&gt; character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49cd7f4d4021afca59873404ed4ad05b87b9223c" translate="yes" xml:space="preserve">
          <source>A matrix of scatter plots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f6f85b19da6767dbe4feeb187f266851b73d2d5" translate="yes" xml:space="preserve">
          <source>A minimum of 1 period is required for the rolling calculation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feb0cf25ecd76bb95b449d04e161ee980958ae41" translate="yes" xml:space="preserve">
          <source>A minimum of 4 periods is required for the expanding calculation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cba59662e54021f597afb4000949e0c5d0d1ce9" translate="yes" xml:space="preserve">
          <source>A minimum of 4 periods is required for the rolling calculation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ede376dbfc4f7fc8c85fcbbda79d0d5806c4b390" translate="yes" xml:space="preserve">
          <source>A minimum of one period is required for the rolling calculation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bc0a93b2501b19dfcdf3c8e413a4f1d77c3b00c" translate="yes" xml:space="preserve">
          <source>A mixin class, &lt;code&gt;ExtensionScalarOpsMixin&lt;/code&gt; supports this second approach. If developing an &lt;code&gt;ExtensionArray&lt;/code&gt; subclass, for example &lt;code&gt;MyExtensionArray&lt;/code&gt;, can simply include &lt;code&gt;ExtensionScalarOpsMixin&lt;/code&gt; as a parent class of &lt;code&gt;MyExtensionArray&lt;/code&gt;, and then call the methods &lt;code&gt;_add_arithmetic_ops()&lt;/code&gt; and/or &lt;code&gt;_add_comparison_ops()&lt;/code&gt; to hook the operators into your &lt;code&gt;MyExtensionArray&lt;/code&gt; class, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef25934872f572a7b15d00fa7dbc3b65f77310fc" translate="yes" xml:space="preserve">
          <source>A multi-level, or hierarchical, Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bd43f635642ff4cff20058700defd9f6e945786" translate="yes" xml:space="preserve">
          <source>A multi-level, or hierarchical, index object for pandas objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b23a90525f75b1a8092d1f88ec43a33eae1f0240" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;IntervalArray&lt;/code&gt; can be constructed directly from an array-like of &lt;code&gt;Interval&lt;/code&gt; objects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f07d66797c00f4671754715a2232690088d1bbae" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;IntervalIndex&lt;/code&gt; is typically constructed using &lt;a href=&quot;pandas.interval_range#pandas.interval_range&quot;&gt;&lt;code&gt;interval_range()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1667bf1fe2ee62c6f58c14952585fa2815ecd547" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;MultiIndex&lt;/code&gt; is typically constructed using one of the helper methods &lt;a href=&quot;pandas.multiindex.from_arrays#pandas.MultiIndex.from_arrays&quot;&gt;&lt;code&gt;MultiIndex.from_arrays()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;pandas.multiindex.from_product#pandas.MultiIndex.from_product&quot;&gt;&lt;code&gt;MultiIndex.from_product()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;pandas.multiindex.from_tuples#pandas.MultiIndex.from_tuples&quot;&gt;&lt;code&gt;MultiIndex.from_tuples()&lt;/code&gt;&lt;/a&gt;. For example (using &lt;code&gt;.from_arrays&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba31711d157d740be3264ceff446e1f2b45f66b" translate="yes" xml:space="preserve">
          <source>A new DataFrame with the new columns in addition to all the existing columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66f3a17c523e02178b953b05d319da488a4cb06d" translate="yes" xml:space="preserve">
          <source>A new MultiIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="531bf25e6a188bd9bdb526edab03b1a24aef2314" translate="yes" xml:space="preserve">
          <source>A new Series object as a view of the same data in memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fe81a58824076bcb9a6241291d7a0ba77a6d9c9" translate="yes" xml:space="preserve">
          <source>A new object of same type as caller containing &lt;code&gt;n&lt;/code&gt; items randomly sampled from the caller object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8568517d7cc88ed53ba55c7cee83af88f71c21df" translate="yes" xml:space="preserve">
          <source>A nonexistent time does not exist in a particular timezone where clocks moved forward due to DST.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f07d91fcaaab112a2092771645362fc7307022a0" translate="yes" xml:space="preserve">
          <source>A nonexistent time does not exist in a particular timezone where clocks moved forward due to DST. Valid values are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69c5b16f6e5f317f7385f38ce8d83323ae87cad6" translate="yes" xml:space="preserve">
          <source>A number between 0 or 100. The largest value will cover &lt;code&gt;width&lt;/code&gt; percent of the cell&amp;rsquo;s width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a25e78deb56eacf70a7757cf1eecd2b7dd32527" translate="yes" xml:space="preserve">
          <source>A number of examples using a DataFrame with a MultiIndex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b62fee0dff5f669d0bab3bd4ea6c5d11f9c98a" translate="yes" xml:space="preserve">
          <source>A numpy array of either the specified dtype or, if dtype==None (default), the same dtype as categorical.categories.dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b354fc31937f60d7a76ae481f1e977a52a7d4a86" translate="yes" xml:space="preserve">
          <source>A one-dimensional numpy array of the &lt;code&gt;Index&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a677167f8907deb58d67e2c0987e3604e617efd9" translate="yes" xml:space="preserve">
          <source>A pandas &lt;code&gt;DataFrame&lt;/code&gt; can be constructed in many different ways, but for a small number of values, it is often convenient to specify it as a Python dictionary, where the keys are the column names and the values are the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b406871dd4686636d94013f44da0298f72838aa" translate="yes" xml:space="preserve">
          <source>A pandas ExtensionArray for NumPy data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c56f14b6f221acfcf6538a4d5d53d62baab46561" translate="yes" xml:space="preserve">
          <source>A pandas class (in the form &lt;code&gt;:class:`pandas.Series`&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b31542ac58bacfd3e3ab6e6fa465ee6996c0e1d" translate="yes" xml:space="preserve">
          <source>A pandas function (in the form &lt;code&gt;:func:`pandas.to_datetime`&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e8d7f655c1f76608ee00b88a56e5cad0f5c1f6" translate="yes" xml:space="preserve">
          <source>A pandas method (in the form &lt;code&gt;:meth:`pandas.Series.sum`&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb44bce3570c566eb4e97398324a6abe4780d54a" translate="yes" xml:space="preserve">
          <source>A passed user-defined-function will be passed a Series for evaluation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f507949ad64b70bbe3eacb02e84f1e58ace73f" translate="yes" xml:space="preserve">
          <source>A pattern may contain optional groups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3562f586cec8b1cc61b5afe4edd9a660159768ed" translate="yes" xml:space="preserve">
          <source>A pattern with one group will return a DataFrame with one column if expand=True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56e3d868def1495cebee5509b704554a8492d155" translate="yes" xml:space="preserve">
          <source>A pattern with one group will return a DataFrame with one column. Indices with no matches will not appear in the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="780e45ae7abc5123f4ed70543948438eaeb5e50e" translate="yes" xml:space="preserve">
          <source>A pattern with one group will return a Series if expand=False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20576ab2a1b83675363c95cae938d9838a991737" translate="yes" xml:space="preserve">
          <source>A pattern with two groups will return a DataFrame with two columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4db431f4ea2737bb073679447483caa32c0f5d8" translate="yes" xml:space="preserve">
          <source>A pattern with two groups will return a DataFrame with two columns. Non-matches will be NaN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afb9a65afa810093ff9aef0886b921d18c9bdad9" translate="yes" xml:space="preserve">
          <source>A pie plot is a proportional representation of the numerical data in a column. This function wraps &lt;code&gt;matplotlib.pyplot.pie()&lt;/code&gt; for the specified column. If no column reference is passed and &lt;code&gt;subplots=True&lt;/code&gt; a pie plot is drawn for each numerical column independently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c02461d5827d470fdabd38d74585f79b81f1e94" translate="yes" xml:space="preserve">
          <source>A plot instance to which to add the information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e28290a82f59270b76733ce7e0c945d86f6d6a9a" translate="yes" xml:space="preserve">
          <source>A primarily label-location based indexer, with integer position fallback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e3f5e1301550fefb9a2d6a06bc55debcee17f73" translate="yes" xml:space="preserve">
          <source>A pull-request will be considered for merging when you have an all &amp;lsquo;green&amp;rsquo; build. If any tests are failing, then you will get a red &amp;lsquo;X&amp;rsquo;, where you can click through to see the individual failed tests. This is an example of a green build.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d181b1b30312f31529b5c74130788628812875e5" translate="yes" xml:space="preserve">
          <source>A ragged (meaning not-a-regular frequency), time-indexed DataFrame</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f27ec696dfdeef3f6e20b78da2f70af5ac178ff3" translate="yes" xml:space="preserve">
          <source>A random 50% sample of the &lt;code&gt;DataFrame&lt;/code&gt; with replacement:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2602d057cf8f715c5f24f738d8405f6cd419468" translate="yes" xml:space="preserve">
          <source>A recent alternative to statically compiling Cython code, is to use a &lt;em&gt;dynamic jit-compiler&lt;/em&gt;, Numba.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52f94d02d643c1aea3da952002d5a738d62aacb5" translate="yes" xml:space="preserve">
          <source>A regular expression capturing the wanted suffixes. &amp;lsquo;\d+&amp;rsquo; captures numeric suffixes. Suffixes with no numbers could be specified with the negated character class &amp;lsquo;\D+&amp;rsquo;. You can also further disambiguate suffixes, for example, if your wide variables are of the form A-one, B-two,.., and you have an unrelated column A-rating, you can ignore the last one by specifying &lt;code&gt;suffix=&amp;rsquo;(!?one|two)&amp;rsquo;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca21c10303ddca3d54d0963019d39da3256807f7" translate="yes" xml:space="preserve">
          <source>A scalar bandwidth can be specified. Using a small bandwidth value can lead to over-fitting, while using a large bandwidth value may result in under-fitting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1226ab21ff0a7497ecf8dc8b66d6b6ab25e3a04f" translate="yes" xml:space="preserve">
          <source>A scalar is treated as a column label</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c881f0b0716e33433e5c914b8361233b4ec8277" translate="yes" xml:space="preserve">
          <source>A scalar or array of insertion points with the same shape as &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf6a79a0d8977213f5722c70d68a187ae9ac8204" translate="yes" xml:space="preserve">
          <source>A scalar, list-like, dict-like or functions transformations to apply to that axis&amp;rsquo; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33903393ddc4ea423258cb85183528299c5b8696" translate="yes" xml:space="preserve">
          <source>A screenshot of the output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="336b5951f602bea7c2d6fe770dd40a28ebe8448d" translate="yes" xml:space="preserve">
          <source>A selection of dtypes or strings to be included/excluded. At least one of these parameters must be supplied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c48e4c177ab064653e8fd0f48af4a8962ce7da" translate="yes" xml:space="preserve">
          <source>A sequence of color strings referred to by name, RGB or RGBA code, which will be used for each point&amp;rsquo;s color recursively. For instance [&amp;lsquo;green&amp;rsquo;,&amp;rsquo;yellow&amp;rsquo;] all points will be filled in green or yellow, alternatively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6a94f4e572e64a745b981748e89b43a946af03" translate="yes" xml:space="preserve">
          <source>A sequence of scalars, which will be used for each point&amp;rsquo;s size recursively. For instance, when passing [2,14] all points size will be either 2 or 14, alternatively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b64daadea5626491fbf5db3fcf8bc7e0f7283910" translate="yes" xml:space="preserve">
          <source>A set of lesson for new pandas users: &lt;a href=&quot;https://bitbucket.org/hrojas/learn-pandas&quot;&gt;https://bitbucket.org/hrojas/learn-pandas&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d45a3e45991643ecb07ca2f9775e8bd4e8b486a" translate="yes" xml:space="preserve">
          <source>A simple example could be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="560d28aa71e67bede330fee034338709f560938d" translate="yes" xml:space="preserve">
          <source>A single color string referred to by name, RGB or RGBA code, for instance &amp;lsquo;red&amp;rsquo; or &amp;lsquo;#a98d19&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af247fff46bc2028323bb97b5fbe095b057799f3" translate="yes" xml:space="preserve">
          <source>A single element array_like may be converted to bool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac56350a77b76b345ba96bd47786adcc197995e6" translate="yes" xml:space="preserve">
          <source>A single label, e.g. &lt;code&gt;5&lt;/code&gt; or &lt;code&gt;'a'&lt;/code&gt; (Note that &lt;code&gt;5&lt;/code&gt; is interpreted as a &lt;em&gt;label&lt;/em&gt; of the index. This use is &lt;strong&gt;not&lt;/strong&gt; an integer position along the index.).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7efc6ef4a56b8354215f692d1db9a7df69fd9b92" translate="yes" xml:space="preserve">
          <source>A single label, e.g. &lt;code&gt;5&lt;/code&gt; or &lt;code&gt;'a'&lt;/code&gt;, (note that &lt;code&gt;5&lt;/code&gt; is interpreted as a &lt;em&gt;label&lt;/em&gt; of the index, and &lt;strong&gt;never&lt;/strong&gt; as an integer position along the index).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb6f4e333711a762fa7d82d2e0917c1d0bf1dc1" translate="yes" xml:space="preserve">
          <source>A single scalar so all points have the same size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af0b8ecf86c5d5dd7722d0b88d0562095c6b91c5" translate="yes" xml:space="preserve">
          <source>A slice object with ints &lt;code&gt;1:7&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def19382dad4ad922102e00d351991648b2324d8" translate="yes" xml:space="preserve">
          <source>A slice object with ints, e.g. &lt;code&gt;1:7&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6219eee7b6e908ec1db2acfcd15a430c9096708" translate="yes" xml:space="preserve">
          <source>A slice object with labels &lt;code&gt;'a':'f'&lt;/code&gt; (Note that contrary to usual python slices, &lt;strong&gt;both&lt;/strong&gt; the start and the stop are included, when present in the index! See &lt;a href=&quot;#indexing-slicing-with-labels&quot;&gt;Slicing with labels&lt;/a&gt; and &lt;a href=&quot;advanced#advanced-endpoints-are-inclusive&quot;&gt;Endpoints are inclusive&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="babd7f360087328e1cbe51c8ea331d26cbfc67d8" translate="yes" xml:space="preserve">
          <source>A slice object with labels, e.g. &lt;code&gt;'a':'f'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76b3c5034cd4cb4eda54d115bbfa1a3ba483a6ed" translate="yes" xml:space="preserve">
          <source>A specific axis to squeeze. By default, all length-1 axes are squeezed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33bbbb440673494a038d4f38646a13139fd7ef2c" translate="yes" xml:space="preserve">
          <source>A specification for a groupby instruction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adc2155254303cdb6fde34444b18a76ddbe99c52" translate="yes" xml:space="preserve">
          <source>A string identifying the data type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5de55a572b9ddd2c1eb972b80faba72145574b" translate="yes" xml:space="preserve">
          <source>A string or regex delimiter. The default of &amp;lsquo;s+&amp;rsquo; denotes one or more whitespace characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdc419be794652b6e321b30b9159d5c97826e14d" translate="yes" xml:space="preserve">
          <source>A string passed to &lt;code&gt;groupby&lt;/code&gt; may refer to either a column or an index level. If a string matches both a column name and an index level name, a &lt;code&gt;ValueError&lt;/code&gt; will be raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9424648fb1ea891f630cdb2749eebd52640d76c3" translate="yes" xml:space="preserve">
          <source>A string representing the compression to use in the output file, only used when the first argument is a filename. By default, the compression is inferred from the filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="266f538342125e91a218d62f32644c4c7a288dcd" translate="yes" xml:space="preserve">
          <source>A string representing the compression to use in the output file. By default, infers from the file extension in specified path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e6ab0f692b236447823a7710475565e83dfa50c" translate="yes" xml:space="preserve">
          <source>A string representing the encoding to use in the output file, defaults to &amp;lsquo;utf-8&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c090ef41f26bb4f8ee41cdefae20825c7038ad8f" translate="yes" xml:space="preserve">
          <source>A string variable consisting of only a few different values. Converting such a string variable to a categorical variable will save some memory, see &lt;a href=&quot;#categorical-memory&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b10f74c6fea21062766ff43948fc7ab920109251" translate="yes" xml:space="preserve">
          <source>A summary of our current import sections ( in order ):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417d8969b400c40a54d9b93e9252b19817a2e76a" translate="yes" xml:space="preserve">
          <source>A test run of this yields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97935e9fd62d4cb3e74690eb324898101cd4482f" translate="yes" xml:space="preserve">
          <source>A timezone that has a variable offset from UTC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e6fcee6cd36246720815bf49dea9fa23ae96cc" translate="yes" xml:space="preserve">
          <source>A tuple is treated as &lt;code&gt;(row_indexer, column_indexer)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51170c3612f0e238982de73e8851adbab432e507" translate="yes" xml:space="preserve">
          <source>A tuple with the length of each level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05d887e27be68f0c9239e5f852b039d9af7d2dcd" translate="yes" xml:space="preserve">
          <source>A useful shortcut to &lt;a href=&quot;../reference/api/pandas.concat#pandas.concat&quot;&gt;&lt;code&gt;concat()&lt;/code&gt;&lt;/a&gt; are the &lt;a href=&quot;../reference/api/pandas.dataframe.append#pandas.DataFrame.append&quot;&gt;&lt;code&gt;append()&lt;/code&gt;&lt;/a&gt; instance methods on &lt;code&gt;Series&lt;/code&gt; and &lt;code&gt;DataFrame&lt;/code&gt;. These methods actually predated &lt;code&gt;concat&lt;/code&gt;. They concatenate along &lt;code&gt;axis=0&lt;/code&gt;, namely the index:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="855e5774400694858f55f6a6aa480a4a9bbad32c" translate="yes" xml:space="preserve">
          <source>A valid slice for &lt;code&gt;data&lt;/code&gt; to limit the style application to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="806384b836c8829ddbb844b70a645f71c3670124" translate="yes" xml:space="preserve">
          <source>A value in the Series with the index of the key value in self.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="238c966170e2c362f1bebf55a8cd5fe97d841b36" translate="yes" xml:space="preserve">
          <source>A walkthrough of how this method fits in with other tools for combining pandas objects can be found &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1f384b93ce2d8c6fdf12c1978e0cf1aa42fc345" translate="yes" xml:space="preserve">
          <source>A white list of data types to include in the result. Ignored for &lt;code&gt;Series&lt;/code&gt;. Here are the options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d93d10ff0fbef1b4aa0ddc24e10e907746d3c85a" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="89c25a6e98b7d12432623429744aea6cf501424a" translate="yes" xml:space="preserve">
          <source>API reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb7fa297fa4c8dd37e164aadefd8301f6de08988" translate="yes" xml:space="preserve">
          <source>Abbreviations are allowed. &lt;code&gt;s&lt;/code&gt; indicates &lt;code&gt;series&lt;/code&gt; and &lt;code&gt;sp&lt;/code&gt; indicates &lt;code&gt;split&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f5b62d6764f1f55a97d5e91b75429994f3bde4" translate="yes" xml:space="preserve">
          <source>Able to set new names partially and by level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cec9182ff12ed794f893db0e8832df4fba8d0cd" translate="yes" xml:space="preserve">
          <source>Able to set new names without level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f790867c92a1bef0dad74a1b33677ceb72803dd2" translate="yes" xml:space="preserve">
          <source>Able to set new names without level. Defaults to returning new index. Length of names must match number of levels in MultiIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b3f5db8c9aef2a32f65b676288223ee74b6142" translate="yes" xml:space="preserve">
          <source>About docstrings and standards</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d29857edb11e04582ddd6b053854794bf0936370" translate="yes" xml:space="preserve">
          <source>About the pandas documentation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f8e3023a7e271d75317202cad77ad06ad74d60" translate="yes" xml:space="preserve">
          <source>Above we used &lt;code&gt;Styler.apply&lt;/code&gt; to pass in each column one at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1afc9f815efa25869f36c426856c0d50cff88ff7" translate="yes" xml:space="preserve">
          <source>Absolute numeric values in a Series with a Timedelta element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="472a3c9539db820049b6cc8c1a33cf2c88767d81" translate="yes" xml:space="preserve">
          <source>Absolute numeric values in a Series with complex numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa092f6c2dca577033a7c01a9be9ea605da13d7a" translate="yes" xml:space="preserve">
          <source>Absolute numeric values in a Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da76715c21c89743a49a1b88d1f8784e0afe3448" translate="yes" xml:space="preserve">
          <source>Abstract base class for custom 1-D array types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5535499ce913127eb6d3bb979fd45beffa184c7a" translate="yes" xml:space="preserve">
          <source>Accelerated operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae9702096ce628b5de93deae9774172617429bc" translate="yes" xml:space="preserve">
          <source>Accepted combinations are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5664e76a479ee248476c223255b23ca446819348" translate="yes" xml:space="preserve">
          <source>Access a group of rows and columns by integer position(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af070a2ef42952cdfe4e6daef08c054522254b9a" translate="yes" xml:space="preserve">
          <source>Access a group of rows and columns by label(s) or a boolean array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="571703e1eee688facebe5feee4fe5b4591389f5e" translate="yes" xml:space="preserve">
          <source>Access a group of rows and columns by label(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77db6adcea2c39f27e595517732f5d4772837ecd" translate="yes" xml:space="preserve">
          <source>Access a single value for a row/column label pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="471d500b5d1e9438f8f54bf641c2652e5f35cdbd" translate="yes" xml:space="preserve">
          <source>Access a single value for a row/column pair by integer position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60402195c907152dfa10f6ebda0d26d601aa3ce7" translate="yes" xml:space="preserve">
          <source>Access a single value using a label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a76d22414f82494a9f1731db7eae88adf244eacf" translate="yes" xml:space="preserve">
          <source>Access group of rows and columns by integer position(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0729ab4f172171fe20aaf5af8f64164a9580623" translate="yes" xml:space="preserve">
          <source>Access group of values using labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="547cfc7558e9e8755a8cea3edea36cf00e80e196" translate="yes" xml:space="preserve">
          <source>Accessor</source>
          <target state="translated">Accessor</target>
        </trans-unit>
        <trans-unit id="1c0c20f3012be00aa4c5ea3cf20353c2ab2a00a3" translate="yes" xml:space="preserve">
          <source>Accessor for SparseSparse from other sparse matrix data types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eb5efc27617f9ea0129f0a603341e7061be0cb8" translate="yes" xml:space="preserve">
          <source>Accessor object for categorical properties of the Series values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa43ed343809bd84f81377d50acb25c9932472c9" translate="yes" xml:space="preserve">
          <source>Accessor object for datetimelike properties of the Series values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5b0e226ed894764db92e76b6c1f1203c0b805bb" translate="yes" xml:space="preserve">
          <source>Accessors</source>
          <target state="translated">Accessors</target>
        </trans-unit>
        <trans-unit id="1e5973ce5adbd1805b2ce5c9197d0a853e93c2b5" translate="yes" xml:space="preserve">
          <source>Add DataFrames.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f61fed1a5dfb20b6b8d8ae7ebe0888aa8ab57bf2" translate="yes" xml:space="preserve">
          <source>Add a column to indicate NaNs, if False NaNs are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="effeaf940b3dcc632e1bc64176092152b0e66a17" translate="yes" xml:space="preserve">
          <source>Add a hierarchical index at the outermost level of the data with the &lt;code&gt;keys&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd2d08d98c2c7013cd1c227626b55845dd0c7592" translate="yes" xml:space="preserve">
          <source>Add a scalar with operator version which return the same results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa1d3b3b555ddff1cfb5f071fe8853b6db77676" translate="yes" xml:space="preserve">
          <source>Add all row / columns (e.g. for subtotal / grand totals)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87fd714f590ccae35117490d67f03b429c1a9394" translate="yes" xml:space="preserve">
          <source>Add an offset of twenty seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f8793a866b7b4145197c13ef85e8f7b06bbad2f" translate="yes" xml:space="preserve">
          <source>Add another line with different logic, to do the -else</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab4633693c38d44b32792acbe0460a1e2a0ca84f" translate="yes" xml:space="preserve">
          <source>Add examples with explanations that illustrate how the parameters can be used for extended functionality</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f7b2233162a258f2025ea390049a0d553a5f4ab" translate="yes" xml:space="preserve">
          <source>Add index (row) labels, default True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe53a535e15f97dbf20df06700454252c906028" translate="yes" xml:space="preserve">
          <source>Add new categories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e651eb6b2fd103695439d00ef0658ba33acde87" translate="yes" xml:space="preserve">
          <source>Add row/column margins (subtotals).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ce3ba970e8f6614377c456a8886f3953fdbb6b0" translate="yes" xml:space="preserve">
          <source>Add the Series dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caaf37cdcb9efb6eb20714f93c67f030acac6008" translate="yes" xml:space="preserve">
          <source>Add the Series header (index name).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab63ccab91a860232510b3e6983d6a935aacea7f" translate="yes" xml:space="preserve">
          <source>Add the Series length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4166e42f32882fb5f7a3b9f841462d9b8bc3362b" translate="yes" xml:space="preserve">
          <source>Add the Series name if not None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb1570caf5de72964686b10c5cb0593f37ee415" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;engine=&amp;rsquo;python&amp;rsquo;&lt;/code&gt; to &lt;code&gt;pd.read_csv&lt;/code&gt; removes the Warning:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb625e4bd082d723ed32d121cfb3850514269eb" translate="yes" xml:space="preserve">
          <source>Adding interesting links and/or inline examples to this section is a great &lt;em&gt;First Pull Request&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff2db62965fd4ec2159e88f1728d30b578250fe" translate="yes" xml:space="preserve">
          <source>Adding tests is one of the most common requests after code is pushed to &lt;em&gt;pandas&lt;/em&gt;. Therefore, it is worth getting in the habit of writing tests ahead of time so this is never an issue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d90e6ad3a3143fe403a99e97baa388bda8f35227" translate="yes" xml:space="preserve">
          <source>Adding type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e3197a9edf55512a88ff93fa98cd4a2c6af62b8" translate="yes" xml:space="preserve">
          <source>Additional arguments passed to the parquet library. See &lt;a href=&quot;../../user_guide/io#io-parquet&quot;&gt;pandas io&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bbf23a6f110aad96e56a542d028a3b45f01fe67" translate="yes" xml:space="preserve">
          <source>Additional character for filling, default is whitespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f868ba69970d5adc895cb6fc982b11398608547" translate="yes" xml:space="preserve">
          <source>Additional character for filling, default is whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5f00a75698de0decf04d53cd896092ca429a336" translate="yes" xml:space="preserve">
          <source>Additional formatting can be done to the boxplot, like suppressing the grid (&lt;code&gt;grid=False&lt;/code&gt;), rotating the labels in the x-axis (i.e. &lt;code&gt;rot=45&lt;/code&gt;) or changing the fontsize (i.e. &lt;code&gt;fontsize=15&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a79d21c8d8978f98f06bafc0315a4e2e91511a1" translate="yes" xml:space="preserve">
          <source>Additional help can be found in the &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/user_guide/io.html&quot;&gt;online docs for IO Tools&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b2c039299fbbdf3f73a2c2b9e1cd868fb9e16b1" translate="yes" xml:space="preserve">
          <source>Additional help can be found in the online docs for &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/user_guide/io.html&quot;&gt;IO Tools&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b63194914b33c0b8c6562f13b3de6fb0861b9a28" translate="yes" xml:space="preserve">
          <source>Additional keyword arguments are documented in &lt;a href=&quot;pandas.dataframe.plot#pandas.DataFrame.plot&quot;&gt;&lt;code&gt;DataFrame.plot()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a92138f76a4f75107212545771ee9690736d494" translate="yes" xml:space="preserve">
          <source>Additional keyword arguments are documented in &lt;code&gt;pandas.%(this-datatype)s.plot()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f77b7d7e991548216c6fc91af99562848d8b438" translate="yes" xml:space="preserve">
          <source>Additional keyword arguments are passed into &lt;code&gt;DataFrame.shift&lt;/code&gt; or &lt;code&gt;Series.shift&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de51821f8da63036dbf9eedde706efe80a82a38" translate="yes" xml:space="preserve">
          <source>Additional keyword arguments passed to HDFStore.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c16ec53974822eab11d6be1177d204426435af40" translate="yes" xml:space="preserve">
          <source>Additional keyword arguments passed to func.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f12dd7427a3f1f4a23c693900a83772e05769b7" translate="yes" xml:space="preserve">
          <source>Additional keyword arguments passed to the reduction function. Currently, &lt;code&gt;ddof&lt;/code&gt; is the only supported kwarg.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aa55a53be8442fd14de9803e500012913a3e44b" translate="yes" xml:space="preserve">
          <source>Additional keyword arguments to be passed to the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8105d198128ff86acf9f2e021930cd11fdeac96a" translate="yes" xml:space="preserve">
          <source>Additional keyword arguments to pass as keywords arguments to &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6360fb70a43f1cf47c1aa89f29ac2718a149cae7" translate="yes" xml:space="preserve">
          <source>Additional keywords are documented in &lt;a href=&quot;pandas.dataframe.plot#pandas.DataFrame.plot&quot;&gt;&lt;code&gt;DataFrame.plot()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c37b3a74e6dc6d7bde168d79e84aa184d9d03168" translate="yes" xml:space="preserve">
          <source>Additional keywords have no effect but might be accepted for compatibility with NumPy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74894d53f17c583b05b09d39f14aa103fae5d8fd" translate="yes" xml:space="preserve">
          <source>Additional keywords have no effect but might be accepted for compatibility with numpy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2a91e26fe026c5172b8876f9234f0d0da693559" translate="yes" xml:space="preserve">
          <source>Additional standards are outlined on the &lt;a href=&quot;https://github.com/pandas-dev/pandas/wiki/Code-Style-and-Conventions&quot;&gt;code style wiki page&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24dc0ac55511e6232bce56464ea60046df11e385" translate="yes" xml:space="preserve">
          <source>Additional strings to recognize as NA/NaN. If dict passed, specific per-column NA values. By default the following values are interpreted as NaN: &amp;lsquo;&amp;rsquo;, &amp;lsquo;#N/A&amp;rsquo;, &amp;lsquo;#N/A N/A&amp;rsquo;, &amp;lsquo;#NA&amp;rsquo;, &amp;lsquo;-1.#IND&amp;rsquo;, &amp;lsquo;-1.#QNAN&amp;rsquo;, &amp;lsquo;-NaN&amp;rsquo;, &amp;lsquo;-nan&amp;rsquo;, &amp;lsquo;1.#IND&amp;rsquo;, &amp;lsquo;1.#QNAN&amp;rsquo;, &amp;lsquo;N/A&amp;rsquo;, &amp;lsquo;NA&amp;rsquo;, &amp;lsquo;NULL&amp;rsquo;, &amp;lsquo;NaN&amp;rsquo;, &amp;lsquo;n/a&amp;rsquo;, &amp;lsquo;nan&amp;rsquo;, &amp;lsquo;null&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a99df4707adcde3ebe08cb1827bbc766dbe8fcb5" translate="yes" xml:space="preserve">
          <source>Additionally, datetime-like input is also supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a57325fbc393e54d9d569144b748f9cc049309b" translate="yes" xml:space="preserve">
          <source>Additionally, if the underlying memory representation of the returned array matters, we recommend specifying the &lt;code&gt;dtype&lt;/code&gt; as a concrete object rather than a string alias or allowing it to be inferred. For example, a future version of pandas or a 3rd-party library may include a dedicated ExtensionArray for string data. In this event, the following would no longer return a &lt;a href=&quot;pandas.arrays.pandasarray#pandas.arrays.PandasArray&quot;&gt;&lt;code&gt;arrays.PandasArray&lt;/code&gt;&lt;/a&gt; backed by a NumPy array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9450ad36827b1e3ac04a52c290d9d93be3ade960" translate="yes" xml:space="preserve">
          <source>Adjust the resampled time labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e70c73c15dc50ff5ffc90bc95d9de439f9869373" translate="yes" xml:space="preserve">
          <source>Advanced indexing with hierarchical index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d139f2d724e9965261ca71ad7e0c423a391180b" translate="yes" xml:space="preserve">
          <source>After running the installer, the user will have access to pandas and the rest of the &lt;a href=&quot;http://www.scipy.org/&quot;&gt;SciPy&lt;/a&gt; stack without needing to install anything else, and without needing to wait for any software to be compiled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c36755dcb24e2ece0c42441769dcdd181cb998" translate="yes" xml:space="preserve">
          <source>After the feature branch has been update locally, you can now update your pull request by pushing to the branch on GitHub:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25bbda6d5ad189afb1aca1160b607c85b106c65c" translate="yes" xml:space="preserve">
          <source>After the header, we will add a line for each related method or function, followed by a space, a colon, another space, and a short description that illustrated what this method or function does, why is it relevant in this context, and what are the key differences between the documented function and the one referencing. The description must also finish with a dot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e03f4da6fa0dad421870a441243e0aff3f04e11" translate="yes" xml:space="preserve">
          <source>After the title, each parameter in the signature must be documented, including &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt;, but not &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f277bbc7e30131ee94975ddace77c995e5d0cc" translate="yes" xml:space="preserve">
          <source>Aggregate over the columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ea81396e0f8a72c75513804e9c02d94c3e6a014" translate="yes" xml:space="preserve">
          <source>Aggregate these functions over the rows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87cfe9cc5a7727e613d12a160f2919d1b7bc7e7b" translate="yes" xml:space="preserve">
          <source>Aggregate using one or more operations over the specified axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14526701999c496bfc4432c25a753047cc67a7c6" translate="yes" xml:space="preserve">
          <source>Aggregating over the columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="869b3d20c318473ef97f4d18fca448cefb943c37" translate="yes" xml:space="preserve">
          <source>Aggregating over the entire DataFrame with &lt;code&gt;axis=None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ba037c0e4c06d192c83e08070b15787f07daaa" translate="yes" xml:space="preserve">
          <source>Aggregation</source>
          <target state="translated">Aggregation</target>
        </trans-unit>
        <trans-unit id="1adc3bcabf1198cc1d17b3bf82f6bbdb701216a8" translate="yes" xml:space="preserve">
          <source>Akin to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ee56a30bca692093bb4ef9ac32ab7f62d8c93ec" translate="yes" xml:space="preserve">
          <source>Alias for is_monotonic_increasing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cf504c4a4809f325e3f80bc28719773a159b710" translate="yes" xml:space="preserve">
          <source>Alias for self._offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01db349064339acf9f6e564388264504ccbe049c" translate="yes" xml:space="preserve">
          <source>Alias for sep.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fafa312b420672b6a5f6fbd21ed24238fc2340dc" translate="yes" xml:space="preserve">
          <source>Alias for tzinfo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="377d96c505871c9c772ed17e4ece868d9a930d88" translate="yes" xml:space="preserve">
          <source>Alias of &lt;code&gt;skipfooter&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbd8e25a2e1c1b40471a08029f9eb113e35c6adf" translate="yes" xml:space="preserve">
          <source>Alias of Period.dayofweek.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ba393c90acf51adcaf85b984ea8cfb8967c8ac" translate="yes" xml:space="preserve">
          <source>Alias of backfill.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e0733bf9399ad8fcac8ce5a6615481661ffe0de" translate="yes" xml:space="preserve">
          <source>Alias of isna.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb6a7c4df79279c426589ab99096dcb5c5c9998" translate="yes" xml:space="preserve">
          <source>Alias of notna.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="767f7ccc3e91e0fde606832b9448ea36bd00ef19" translate="yes" xml:space="preserve">
          <source>Alias.</source>
          <target state="translated">Alias.</target>
        </trans-unit>
        <trans-unit id="c2fcd83c94bb9ff4c9a1f07c4148ffddeee096b1" translate="yes" xml:space="preserve">
          <source>Aliasing axis names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c83b0ec2d98a2ca38077be2f03102aedeb0ab261" translate="yes" xml:space="preserve">
          <source>Align</source>
          <target state="translated">Align</target>
        </trans-unit>
        <trans-unit id="54968c259b81bdd52b050b49b98e883384836555" translate="yes" xml:space="preserve">
          <source>Align &lt;code&gt;self&lt;/code&gt; with &lt;code&gt;threshold&lt;/code&gt; along the given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f238c2f88c7492fadcada52090261a28d8bc6ed" translate="yes" xml:space="preserve">
          <source>Align object with &lt;code&gt;threshold&lt;/code&gt; along the given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db3ee3fd96f9645deb953cbfc48798950757fb99" translate="yes" xml:space="preserve">
          <source>Align object with lower and upper along the given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94de57be2283434a230537a0c965dbf32c79b567" translate="yes" xml:space="preserve">
          <source>Align on index (0), columns (1), or both (None)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="652c3d98922ec58102dd8083d2626f00e51464df" translate="yes" xml:space="preserve">
          <source>Align two objects on their axes with the specified join method for each axis Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6789aee7ecbe1aca93588f9e7107bcea8bc41dcf" translate="yes" xml:space="preserve">
          <source>Aligned objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a97bfd2a8d92db8785fd79a6fbc89cc0fe03052e" translate="yes" xml:space="preserve">
          <source>Alignment axis if needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d3a8c357af77f2bdd1bf0ee4cd0f84f8ce2a227" translate="yes" xml:space="preserve">
          <source>Alignment level if needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="826c3949f0a5e49eb5d1dd4cd1fd5226533bc9c2" translate="yes" xml:space="preserve">
          <source>Aligns on indices. There is no return value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46b19787b14686839bcab83b76f95fce95fbcd7f" translate="yes" xml:space="preserve">
          <source>All Negative</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3697b5b29a98c3333bb195c8b999452c0dfaed02" translate="yes" xml:space="preserve">
          <source>All Positive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3dfee3962168b1715da8d8f4557ee34e8600845" translate="yes" xml:space="preserve">
          <source>All calls to &lt;code&gt;np.random&lt;/code&gt; are seeded with 123456.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="990b379df5f4a0c820dbd4725fef6177cf0f0edb" translate="yes" xml:space="preserve">
          <source>All contributions, bug reports, bug fixes, documentation improvements, enhancements, and ideas are welcome.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4dec1c0a0922afed6568c7f3ea254e3b5e43b19" translate="yes" xml:space="preserve">
          <source>All extra variables are left untouched. This simply uses &lt;code&gt;pandas.melt&lt;/code&gt; under the hood, but is hard-coded to &amp;ldquo;do the right thing&amp;rdquo; in a typical case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36e7017892ad7da7cb75803226dd71f48495c3dc" translate="yes" xml:space="preserve">
          <source>All methods using an optional dependency should include a test asserting that an &lt;code&gt;ImportError&lt;/code&gt; is raised when the optional dependency is not found. This test should be skipped if the library is present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98015c0b8700982997b465bc978b84bf1a82c0a7" translate="yes" xml:space="preserve">
          <source>All non-overlapping matches of pattern or regular expression in each string of this Series/Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa1c981e922bea07d2d11c7b2760b91441d57fce" translate="yes" xml:space="preserve">
          <source>All of the &lt;code&gt;MultiIndex&lt;/code&gt; constructors accept a &lt;code&gt;names&lt;/code&gt; argument which stores string names for the levels themselves. If no names are provided, &lt;code&gt;None&lt;/code&gt; will be assigned:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e13297ab873b6a5314040a0d4053ef46d5856916" translate="yes" xml:space="preserve">
          <source>All of the above examples have integers as suffixes. It is possible to have non-integers as suffixes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08069ab08720d9f2f28b8f3c6b7f9f36fe259bca" translate="yes" xml:space="preserve">
          <source>All of the functions above accept a regexp pattern (&lt;code&gt;re.search&lt;/code&gt; style) as an argument, and so passing in a substring will work - as long as it is unambiguous:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57547a34a91555469f48337b5580ce14cb920e9e" translate="yes" xml:space="preserve">
          <source>All optional dependencies should be documented in &lt;a href=&quot;../install#install-optional-dependencies&quot;&gt;Optional dependencies&lt;/a&gt; and the minimum required version should be set in the &lt;code&gt;pandas.compat._optional.VERSIONS&lt;/code&gt; dict.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f865fec421d5c0a0e53bd3c8c7b38a20dbf18764" translate="yes" xml:space="preserve">
          <source>All options also have a default value, and you can use &lt;code&gt;reset_option&lt;/code&gt; to do just that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02ee31d6261eaa0f0f795e4c0bbd58063cfade3a" translate="yes" xml:space="preserve">
          <source>All other plotting keyword arguments to be passed to &lt;a href=&quot;https://matplotlib.org/api/_as_gen/matplotlib.pyplot.boxplot.html#matplotlib.pyplot.boxplot&quot;&gt;&lt;code&gt;matplotlib.pyplot.boxplot()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fdffa5685145bcd6efc2c5c9b920ac9c0401713" translate="yes" xml:space="preserve">
          <source>All other plotting keyword arguments to be passed to &lt;code&gt;matplotlib.pyplot.hist()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc784adf40cec97ea30000931337c94fd90f8634" translate="yes" xml:space="preserve">
          <source>All other plotting keyword arguments to be passed to matplotlib&amp;rsquo;s boxplot function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d703b1f563d1afd4dbdb3d821719ede270260ec5" translate="yes" xml:space="preserve">
          <source>All pandas data structures are value-mutable (the values they contain can be altered) but not always size-mutable. The length of a Series cannot be changed, but, for example, columns can be inserted into a DataFrame. However, the vast majority of methods produce new objects and leave the input data untouched. In general we like to &lt;strong&gt;favor immutability&lt;/strong&gt; where sensible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe0dab1cc9c0539dcc5a5fbdc941c49ae4d41b70" translate="yes" xml:space="preserve">
          <source>All remaining variables in the data frame are left intact.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d113e02fdb7ab92e40c2595b83596a6f3aa7dc5d" translate="yes" xml:space="preserve">
          <source>All tests should go into the &lt;code&gt;tests&lt;/code&gt; subdirectory of the specific package. This folder contains many current examples of tests, and we suggest looking to these for inspiration. If your test requires working with files or network connectivity, there is more information on the &lt;a href=&quot;https://github.com/pandas-dev/pandas/wiki/Testing&quot;&gt;testing page&lt;/a&gt; of the wiki.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54f8e270c07dd3c542c18864cbccf99ae03e97c" translate="yes" xml:space="preserve">
          <source>All values of categorical data are either in &lt;code&gt;categories&lt;/code&gt; or &lt;code&gt;np.nan&lt;/code&gt;. Order is defined by the order of &lt;code&gt;categories&lt;/code&gt;, not lexical order of the values. Internally, the data structure consists of a &lt;code&gt;categories&lt;/code&gt; array and an integer array of &lt;code&gt;codes&lt;/code&gt; which point to the real value in the &lt;code&gt;categories&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1fccd655f3caacfc2184704c29354f2a73cf901" translate="yes" xml:space="preserve">
          <source>All values of the &lt;code&gt;Categorical&lt;/code&gt; are either in &lt;code&gt;categories&lt;/code&gt; or &lt;code&gt;np.nan&lt;/code&gt;. Assigning values outside of &lt;code&gt;categories&lt;/code&gt; will raise a &lt;code&gt;ValueError&lt;/code&gt;. Order is defined by the order of the &lt;code&gt;categories&lt;/code&gt;, not lexical order of the values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="872e6a37355016b192c655c006da82289ebd7d0c" translate="yes" xml:space="preserve">
          <source>Allowed inputs are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e73c44b25290dbff4de9880f1690aeef5bef63f5" translate="yes" xml:space="preserve">
          <source>Allows intuitive getting and setting of subsets of the data set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da5c5f9395f8ffd2d83abbc37535c30153fa5611" translate="yes" xml:space="preserve">
          <source>Allows plotting of one column versus another. If not specified, all numerical columns are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2222a9acd1f427ea13f75cc8c8920d045ceeb211" translate="yes" xml:space="preserve">
          <source>Allows plotting of one column versus another. If not specified, the index of the DataFrame is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95f1a3cd6aefa5092f4c6c63b1565ab1c4db1b21" translate="yes" xml:space="preserve">
          <source>Almost all code examples in the docs are run (and the output saved) during the doc build. This approach means that code examples will always be up to date, but it does make the doc building a bit more complex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e715876c08f65ee2faffdbc29c5d10e5908683" translate="yes" xml:space="preserve">
          <source>Already this has shaved a third off, not too bad for a simple copy and paste.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56e6e5247b8ce4d2f564e5716842c055b3620d71" translate="yes" xml:space="preserve">
          <source>Also available on indices:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c9a64323d289adf0adf9d4a62f9332cf71e87d" translate="yes" xml:space="preserve">
          <source>Also copy underlying data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8688e8f9d5920552dced8960c503990a7c242f4f" translate="yes" xml:space="preserve">
          <source>Also make a copy of the underlying data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58fe1db8752a85a318812e2c8a049764c2e11aee" translate="yes" xml:space="preserve">
          <source>Also supports optionally iterating or breaking of the file into chunks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec67e695fa3b22d620d4158e699ce3b5bd6552b4" translate="yes" xml:space="preserve">
          <source>Also, it is a common practice to generate online (html) documentation automatically from docstrings. &lt;a href=&quot;https://www.sphinx-doc.org&quot;&gt;Sphinx&lt;/a&gt; serves this purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48a40b2931bd008ea0c6b3aab8dca471b140e21b" translate="yes" xml:space="preserve">
          <source>Also, we would like sensible default behaviors for the common API functions which take into account the typical orientation of time series and cross-sectional data sets. When using ndarrays to store 2- and 3-dimensional data, a burden is placed on the user to consider the orientation of the data set when writing functions; axes are considered more or less equivalent (except when C- or Fortran-contiguousness matters for performance). In pandas, the axes are intended to lend more semantic meaning to the data; i.e., for a particular data set there is likely to be a &amp;ldquo;right&amp;rdquo; way to orient the data. The goal, then, is to reduce the amount of mental effort required to code up data transformations in downstream functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d969051df9f7e0ec18e3310a4fcecff8567f8c7d" translate="yes" xml:space="preserve">
          <source>Altair</source>
          <target state="translated">Altair</target>
        </trans-unit>
        <trans-unit id="12e20aa6a3c6e4610194032f3f0023fa315ec813" translate="yes" xml:space="preserve">
          <source>Altair is a declarative statistical visualization library for Python. With Altair, you can spend more time understanding your data and its meaning. Altair&amp;rsquo;s API is simple, friendly and consistent and built on top of the powerful Vega-Lite JSON specification. This elegant simplicity produces beautiful and effective visualizations with a minimal amount of code. Altair works with Pandas DataFrames.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6919b7960308879831596bc551ccb8c290daedc" translate="yes" xml:space="preserve">
          <source>Alter DataFrame index labels or name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8929912ef1d6d7e3e09cc7cc2f62656a3141c17e" translate="yes" xml:space="preserve">
          <source>Alter Index or MultiIndex name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d866e9374a295b716559ffb8a097f765e5b12a61" translate="yes" xml:space="preserve">
          <source>Alter Series index labels or name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07a46a6855420d99a289b12ca3db7719f7b47805" translate="yes" xml:space="preserve">
          <source>Alter axes labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9943acce0d963828d5a98d8c7ffdd2b10cae370c" translate="yes" xml:space="preserve">
          <source>Alter the name of the index or columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="618955d9f2dff94fd2e6c9c6cf5c20ae71c22fe8" translate="yes" xml:space="preserve">
          <source>Alternative argument name for sep.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3748670c9c740deb78241ccfd0082ee6c2d359e0" translate="yes" xml:space="preserve">
          <source>Alternative to specifying axis (&lt;code&gt;labels, axis=0&lt;/code&gt; is equivalent to &lt;code&gt;index=labels&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfc7c188e91a434a25ceefd94bc5f26beae50c8a" translate="yes" xml:space="preserve">
          <source>Alternative to specifying axis (&lt;code&gt;labels, axis=1&lt;/code&gt; is equivalent to &lt;code&gt;columns=labels&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be6fc44d6bd4a53df78802fd4be96ef053e135a3" translate="yes" xml:space="preserve">
          <source>Alternative to specifying axis (&lt;code&gt;mapper, axis=0&lt;/code&gt; is equivalent to &lt;code&gt;index=mapper&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1daf096be0c82441db572acc608dff851f55258a" translate="yes" xml:space="preserve">
          <source>Alternative to specifying axis (&lt;code&gt;mapper, axis=1&lt;/code&gt; is equivalent to &lt;code&gt;columns=mapper&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b3599feefce2ac49968fa5179d452885b09c98d" translate="yes" xml:space="preserve">
          <source>Alternatively, change &lt;code&gt;Series.name&lt;/code&gt; with a scalar value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79cca640c2a15a398c16b4a6997573022eb2e364" translate="yes" xml:space="preserve">
          <source>Alternatively, consider breaking up the unit test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4455f2ba248d4dff512809f7287a58f93a0d98d9" translate="yes" xml:space="preserve">
          <source>Alternatively, pandas accepts an open &lt;code&gt;pandas.HDFStore&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4917db0d32f7437b208c04cbdbee2d76f592ebbc" translate="yes" xml:space="preserve">
          <source>Alternatively, the same behavior can be achieved by directly referencing an existing Series or sequence:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="691e9ef6ca67379f4facf8d3b7fe8d58f627f7b6" translate="yes" xml:space="preserve">
          <source>Although the following examples are both DatetimeIndex objects, the first one returns False because it has no timezone component unlike the second one, which returns True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da9932e801ce7d11c3e887676f4d7afa22f71f6" translate="yes" xml:space="preserve">
          <source>Always generate specific day of week. 0 for Monday</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d994b49228e0fb103fe2d219eff6b06e3d4a079" translate="yes" xml:space="preserve">
          <source>Always returns Series even if only one value is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1738b9203af0c801addf930223e6acd4a6a98084" translate="yes" xml:space="preserve">
          <source>Always returns new objects. If copy=False and no reindexing is required then original objects are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb279b8bac3e2b6cef20e1ac203a9077ea72557" translate="yes" xml:space="preserve">
          <source>Amazon S3 access</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="963f014df344e6e7a97229c812cc6f181374b0d7" translate="yes" xml:space="preserve">
          <source>Among flexible wrappers (&lt;code&gt;add&lt;/code&gt;, &lt;code&gt;sub&lt;/code&gt;, &lt;code&gt;mul&lt;/code&gt;, &lt;code&gt;div&lt;/code&gt;, &lt;code&gt;mod&lt;/code&gt;, &lt;code&gt;pow&lt;/code&gt;) to arithmetic operators: &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;//&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;**&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78e909d85700abd871852bc9cbdbe10e58b585a3" translate="yes" xml:space="preserve">
          <source>Among flexible wrappers (&lt;code&gt;eq&lt;/code&gt;, &lt;code&gt;ne&lt;/code&gt;, &lt;code&gt;le&lt;/code&gt;, &lt;code&gt;lt&lt;/code&gt;, &lt;code&gt;ge&lt;/code&gt;, &lt;code&gt;gt&lt;/code&gt;) to comparison operators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="847cd5467a9c32521deaed4962bb2765dadc1c10" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;pandas.arrays.intervalarray#pandas.arrays.IntervalArray&quot;&gt;&lt;code&gt;IntervalArray&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;pandas.intervalindex#pandas.IntervalIndex&quot;&gt;&lt;code&gt;IntervalIndex&lt;/code&gt;&lt;/a&gt; returns a boolean &lt;code&gt;ndarray&lt;/code&gt; positionally indicating if an &lt;code&gt;Interval&lt;/code&gt; is empty:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b60b41780cace6b200450cead2068c89b71d5d03" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;pandas.interval#pandas.Interval&quot;&gt;&lt;code&gt;Interval&lt;/code&gt;&lt;/a&gt; that contains points is not empty:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="938c9d626222ce72cdb6a7f836a0997b768a4eab" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Index&lt;/code&gt; containing the unique categories allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b02406a5e68c7037642128036872d93ebb55bae7" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Interval&lt;/code&gt; that contains a single point is not empty:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d5863e82090dbf47424575dbac073de4c09d460" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Interval&lt;/code&gt; that contains points is not empty:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28c61f3a8db213c8811f70f6ebd35ad6ab71851d" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Interval&lt;/code&gt; that does not contain any points is empty:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5923d490117622fd9213dc0ef9771056a8459e5b" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;IntervalArray&lt;/code&gt; or &lt;code&gt;IntervalIndex&lt;/code&gt; returns a boolean &lt;code&gt;ndarray&lt;/code&gt; positionally indicating if an &lt;code&gt;Interval&lt;/code&gt; is empty:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a2549a1a85a34f33519e764a4235f996044ec8e" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;asof&lt;/code&gt; is a thin wrapper around &lt;code&gt;get_loc&lt;/code&gt; with method=&amp;rsquo;pad&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc09ae5efd177081c792b5b63a1012f6c70fae1a" translate="yes" xml:space="preserve">
          <source>An ExtensionArray containing the unique values of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caf10cc30bab02dc52dd055e56b9f31c6d9b0eac" translate="yes" xml:space="preserve">
          <source>An ExtensionArray for storing sparse data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bc9d798fc3e223198c64b32b044801357c95c76" translate="yes" xml:space="preserve">
          <source>An ExtensionArray is considered boolean when the &lt;code&gt;_is_boolean&lt;/code&gt; attribute is set to True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d6deb8a9c57453e36434f825e0f42a26ad8c4b2" translate="yes" xml:space="preserve">
          <source>An ExtensionArray of the values stored within. For extension types, this is the actual array. For NumPy native types, this is a thin (no copy) wrapper around &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.html#numpy.ndarray&quot;&gt;&lt;code&gt;numpy.ndarray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ce3a07aa2cda528d602b053341f320202a6f64e" translate="yes" xml:space="preserve">
          <source>An ExtensionDtype for Interval data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56777cc7f1d6fff44bcfcb64395901b82a592f30" translate="yes" xml:space="preserve">
          <source>An ExtensionDtype for Period data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41b5aad2bf52ccdb101b0462c26fbd4e7aafe9b0" translate="yes" xml:space="preserve">
          <source>An ExtensionDtype for int16 integer data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d947fa68007bd8826618f0c95b643b31adb32c3" translate="yes" xml:space="preserve">
          <source>An ExtensionDtype for int32 integer data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25544bde241211db0e1ab4fe7c700448657d12d5" translate="yes" xml:space="preserve">
          <source>An ExtensionDtype for int64 integer data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52bd08d38ec348feb89fc71e8fd4eb654ddb511d" translate="yes" xml:space="preserve">
          <source>An ExtensionDtype for int8 integer data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22448e2e1b949246f30d9e44a775cc0fc00abc19" translate="yes" xml:space="preserve">
          <source>An ExtensionDtype for timezone-aware datetime data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d1c0384891e14748f8de7efd1c782a1d763dbb3" translate="yes" xml:space="preserve">
          <source>An ExtensionDtype for uint16 integer data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6aa7388126b92e2b147f6eff3d31dd31df02edc" translate="yes" xml:space="preserve">
          <source>An ExtensionDtype for uint32 integer data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a90e6bb51b3d73bb8b4ed36bbb4e728849bed2c" translate="yes" xml:space="preserve">
          <source>An ExtensionDtype for uint64 integer data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="464f4a0dd628de09972f24f3c50b4fd657a4355f" translate="yes" xml:space="preserve">
          <source>An ExtensionDtype for uint8 integer data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fd31eccd7d689c69b4e8ee09c92af09ac2e63ed" translate="yes" xml:space="preserve">
          <source>An Index consisting of an array of timestamps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="621c1c00f4fbaf171706a036d4654da6d646aae7" translate="yes" xml:space="preserve">
          <source>An Index instance can &lt;strong&gt;only&lt;/strong&gt; contain hashable objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a879783495a2c401a4791ad9a35c7860583a60" translate="yes" xml:space="preserve">
          <source>An Index instance can &lt;strong&gt;only&lt;/strong&gt; contain hashable objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="602573e1d52fb9df16a11a22ee6a646be74c644d" translate="yes" xml:space="preserve">
          <source>An Index of &lt;a href=&quot;pandas.interval#pandas.Interval&quot;&gt;&lt;code&gt;Interval&lt;/code&gt;&lt;/a&gt; s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a55c53386f51a6d922bcf3330a8509cd9d014d9d" translate="yes" xml:space="preserve">
          <source>An Index of Interval objects that are all closed on the same side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8515402ff4147bffb695756a70b9049cdf53d0d9" translate="yes" xml:space="preserve">
          <source>An Index of intervals that are all closed on the same side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536f262ad5d965a607fff4008ff8a2341f11bc48" translate="yes" xml:space="preserve">
          <source>An Index with an underlying &lt;code&gt;Categorical&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c8519322acd97581a5414ad4c607dbaf2eaa455" translate="yes" xml:space="preserve">
          <source>An area plot displays quantitative data visually. This function wraps the matplotlib area function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef822eb8290730986c05856487a5402b5d41d09f" translate="yes" xml:space="preserve">
          <source>An argument to &lt;code&gt;DataFrame.loc&lt;/code&gt; that identifies which columns are hidden.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8fcc6a12ac43585a1c8d85e1b361c53ab33dc07" translate="yes" xml:space="preserve">
          <source>An argument to &lt;code&gt;DataFrame.loc&lt;/code&gt; that restricts which elements &lt;code&gt;formatter&lt;/code&gt; is applied to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="266fab886fd3eb4a4aaa80811bc66bd2e2c4a8d0" translate="yes" xml:space="preserve">
          <source>An array of ints indicating which positions to take.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d64a1497a49406c993c42ab8528c4e14792c5be" translate="yes" xml:space="preserve">
          <source>An array of locations (indices) of the labels from the Index which correspond to the return values of the &lt;code&gt;asof&lt;/code&gt; function for every element in &lt;code&gt;where&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afc6db592eb951e870b0e2fc7ba00c5932ce2a55" translate="yes" xml:space="preserve">
          <source>An array of tuples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67f55947a3407f40ea29d802d9e21cc6c662d3cc" translate="yes" xml:space="preserve">
          <source>An array of values to be printed in, e.g. the Series repr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4dee4090deedf2711f4fd67e3156127ced095b4" translate="yes" xml:space="preserve">
          <source>An array suitable for factorization. This should maintain order and be a supported dtype (Float64, Int64, UInt64, String, Object). By default, the extension array is cast to object dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="097e7ede4817318ab5b4cd1266acc311559067e1" translate="yes" xml:space="preserve">
          <source>An array-like containing the elements taken from the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f3b93a374a21a89c8b42336f3e05092d94e1f9a" translate="yes" xml:space="preserve">
          <source>An array-like object representing the respective bin for each value of &lt;code&gt;x&lt;/code&gt;. The type depends on the value of &lt;code&gt;labels&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3314fcfba8e2f2c60fe01eaa33c8eb7e82a66dc6" translate="yes" xml:space="preserve">
          <source>An example of an actual empty DataFrame. Notice the index is empty:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505929e337f583f52da37a04958fc64f74b14fe2" translate="yes" xml:space="preserve">
          <source>An example with subplots, so an array of axes is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="226454d30a9070403b645515633c958fb571aad3" translate="yes" xml:space="preserve">
          <source>An if-then on one column</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec71265f99608c07b0017b838a24f938e5b92c3f" translate="yes" xml:space="preserve">
          <source>An if-then with assignment to 2 columns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="897727e58a510bbf3b5dec014490adf2865d8c94" translate="yes" xml:space="preserve">
          <source>An immutable container for datetimes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56cc23fff6754e9e9184319751d93350980feda6" translate="yes" xml:space="preserve">
          <source>An indexer into &lt;code&gt;self&lt;/code&gt; that specifies which values are used in the formatting process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f6b4be800bb58881690a2f9195dc6115ce189e9" translate="yes" xml:space="preserve">
          <source>An indexer into the target of the values not found. These correspond to the -1 in the indexer array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd3728e55d62590bd20d4b70c4a0186859f72e80" translate="yes" xml:space="preserve">
          <source>An indicated for whether or not your array is being printed within a Series, DataFrame, or Index (True), or just by itself (False). This may be useful if you want scalar values to appear differently within a Series versus on its own (e.g. quoted or not).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e84c268d911a19a465c9ca0d9df0f4df316ca6" translate="yes" xml:space="preserve">
          <source>An instance of &amp;lsquo;ExtensionDtype&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b823750dc87c78b9f72dbde378574755d0b86d5" translate="yes" xml:space="preserve">
          <source>An instance of &lt;code&gt;CategoricalDtype&lt;/code&gt; to use for this categorical</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf68fa4f030577ebc623df235e7d76bbcab774b5" translate="yes" xml:space="preserve">
          <source>An integer NumPy array that&amp;rsquo;s an indexer into the original ExtensionArray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cd8dd27fddbf105b49cbea3bca4904191d898c6" translate="yes" xml:space="preserve">
          <source>An integer array, where each integer points to a category in categories or dtype.categories, or else is -1 for NaN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19ea293f39c29163e601fc4a6cd3035e33e4e4a6" translate="yes" xml:space="preserve">
          <source>An integer e.g. &lt;code&gt;5&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc8cf5c5e6a565b6547a8a9c047785beebbc0e82" translate="yes" xml:space="preserve">
          <source>An integer ndarray that&amp;rsquo;s an indexer into &lt;code&gt;uniques&lt;/code&gt;. &lt;code&gt;uniques.take(labels)&lt;/code&gt; will have the same values as &lt;code&gt;values&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f4b0e493707a633f44b15109cc3f05d465e496c" translate="yes" xml:space="preserve">
          <source>An integer ndarray with the factorized values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f83f4368b934f5515e91954b47a7cf56c066614f" translate="yes" xml:space="preserve">
          <source>An integer, e.g. &lt;code&gt;5&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e44037454fba4531deeb47c52aea3cfdde9aa97e" translate="yes" xml:space="preserve">
          <source>An ndarray containing the non- &lt;code&gt;fill_value&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4009b73f727e2ff299e1c74f97b206fb8c97192c" translate="yes" xml:space="preserve">
          <source>An ndarray is returned with one &lt;a href=&quot;https://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;matplotlib.axes.Axes&lt;/code&gt;&lt;/a&gt; per column when &lt;code&gt;subplots=True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98387f74c95263ee5465e0e9565177e28eedcb21" translate="yes" xml:space="preserve">
          <source>An ndarray that allows field access using attributes, analogous to typed columns in a spreadsheet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e3e0c62088399ff46868c6c90f294672bac3f0" translate="yes" xml:space="preserve">
          <source>An ndarray with int64 dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c296d52b57abbdb7cf83c5f1ad8c702810e4abb" translate="yes" xml:space="preserve">
          <source>An object of same type as caller if inplace=False, None otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51883ce3490bc76950586f85485f1278c50f498a" translate="yes" xml:space="preserve">
          <source>An object to iterate over namedtuples for each row in the DataFrame with the first field possibly being the index and following fields being the column values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a84d9d31e0102802ac91d90e60c0e56c4ceda5" translate="yes" xml:space="preserve">
          <source>An obvious example would be the &lt;code&gt;head()&lt;/code&gt; and &lt;code&gt;tail()&lt;/code&gt; methods. As &lt;code&gt;tail()&lt;/code&gt; does the equivalent as &lt;code&gt;head()&lt;/code&gt; but at the end of the &lt;code&gt;Series&lt;/code&gt; or &lt;code&gt;DataFrame&lt;/code&gt; instead of at the beginning, it is good to let the users know about it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c7d0f96ed3a44693fa95fcadd9ff46eec98368" translate="yes" xml:space="preserve">
          <source>An ordered Categorical preserves the category ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e058f1934a0a020951f26d4bb40826e28044d225" translate="yes" xml:space="preserve">
          <source>An unordered Categorical will return categories in the order of appearance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf50ebe3d358d4a0cb7c54e22cac343ba4920b60" translate="yes" xml:space="preserve">
          <source>An upsampled Series or DataFrame with &lt;code&gt;NaN&lt;/code&gt; values filled with their nearest value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="522d724913802d245374eb55c76e079a834e2728" translate="yes" xml:space="preserve">
          <source>An upsampled Series or DataFrame with backward filled NaN values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b9e7068c1dbb32f1132f5aa9937793c25daf246" translate="yes" xml:space="preserve">
          <source>An upsampled Series or DataFrame with missing values filled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c748a4f33b925ab2152a5b47a0a90bfe3acf1e05" translate="yes" xml:space="preserve">
          <source>An upsampled Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd590ef748561f10fd881dfd052c3aedf1bcfb18" translate="yes" xml:space="preserve">
          <source>Analogous function for DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="547a3b4f2f0ecef974d0a9bb552ee6f3a31dc474" translate="yes" xml:space="preserve">
          <source>Analogous method for DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887ab48cf55e9cca52da3c27725e2eda36702966" translate="yes" xml:space="preserve">
          <source>Analogous, but less strict, relying on re.search instead of re.match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e85497ece22b07c717d81f1822015435311d6ee0" translate="yes" xml:space="preserve">
          <source>Analogous, but stricter, relying on re.match instead of re.search.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec838aa4601a807389f44fb7f65bdd72acaf7034" translate="yes" xml:space="preserve">
          <source>Analogously, &lt;a href=&quot;../reference/api/pandas.dataframe.cov#pandas.DataFrame.cov&quot;&gt;&lt;code&gt;DataFrame.cov()&lt;/code&gt;&lt;/a&gt; to compute pairwise covariances among the series in the DataFrame, also excluding NA/null values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e7fb0526878aaf979ce612466ab216c7ea021c" translate="yes" xml:space="preserve">
          <source>Analyzes both numeric and object series, as well as &lt;code&gt;DataFrame&lt;/code&gt; column sets of mixed data types. The output will vary depending on what is provided. Refer to the notes below for more detail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a8b1b862835a33c837de70caae292fe1ab7757" translate="yes" xml:space="preserve">
          <source>And also you can create string intervals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="626ce01756bed8e7f919ab8dbc6250276ae353e3" translate="yes" xml:space="preserve">
          <source>And crucially the input and output shapes of &lt;code&gt;func&lt;/code&gt; must match. If &lt;code&gt;x&lt;/code&gt; is the input then &lt;code&gt;func(x).shape == x.shape&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9c5cc84e004a3bd81ce765ec1f8f0c42e365e49" translate="yes" xml:space="preserve">
          <source>And now with the color determined by a column as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8bea05e29d34e04e5494ec156767bb1de2b028e" translate="yes" xml:space="preserve">
          <source>And you&amp;rsquo;ll have the satisfaction of seeing your new and improved documentation!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f5701e26bba2500f2b2914d8a67e75c3f5461b" translate="yes" xml:space="preserve">
          <source>Andrews Curves</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30ed6a5ee55288b217480846194be4d815051fd3" translate="yes" xml:space="preserve">
          <source>Andrews curves have the functional form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17e4cf52e7f0ded798e994e5c852d6c9c54ade37" translate="yes" xml:space="preserve">
          <source>Another advantage to installing Anaconda is that you don&amp;rsquo;t need admin rights to install it. Anaconda can install in the user&amp;rsquo;s home directory, which makes it trivial to delete Anaconda if you decide (just delete that folder).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91f5725516ab9766afe5f216dacecbb152763c8d" translate="yes" xml:space="preserve">
          <source>Another example using integers for the index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99fe3c1c43dd19c24179ec0234b139bf85b0926e" translate="yes" xml:space="preserve">
          <source>Another method to draw a box plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d6cbcf719f3b3ea4f2a3b7745ef11cb2d71916c" translate="yes" xml:space="preserve">
          <source>Another option to join using the key columns is to use the &lt;code&gt;on&lt;/code&gt; parameter. DataFrame.join always uses &lt;code&gt;other&lt;/code&gt;&amp;rsquo;s index but we can use any column in &lt;code&gt;df&lt;/code&gt;. This method preserves the original DataFrame&amp;rsquo;s index in the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de853957b004225a9e7c1703b6fa1c1a19d32eca" translate="yes" xml:space="preserve">
          <source>Another reason you might need to update your pull request is to solve conflicts with changes that have been merged into the master branch since you opened your pull request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e120459c22f1dbb403235c4780f83dad81ca41f0" translate="yes" xml:space="preserve">
          <source>Any NA values will be NA in the result. Out of bounds values will be NA in the resulting Series or Categorical object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc4653e0dec663c993e1b8bf2c31902d8dc2b037" translate="yes" xml:space="preserve">
          <source>Any Series passed will have their name attributes used unless row or column names for the cross-tabulation are specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5bd284889323e281cb4ecaaf6bfb79897b6487e" translate="yes" xml:space="preserve">
          <source>Any additional keyword arguments are passed through to &lt;code&gt;self.template.render&lt;/code&gt;. This is useful when you need to provide additional variables for a custom template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a89fec0f90fcdc7e46b4461a004174e6768d6604" translate="yes" xml:space="preserve">
          <source>Any additional kwargs are passed to the engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1ea0cb81de2fbda6f191b29e37d3346f0da2baa" translate="yes" xml:space="preserve">
          <source>Any datetime values with time zone information parsed via the &lt;code&gt;parse_dates&lt;/code&gt; parameter will be converted to UTC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af00ae2cb03d25dd2517c645ac88a8875aadfaed" translate="yes" xml:space="preserve">
          <source>Any datetime values with time zone information will be converted to UTC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea43faeb9100a22df9d3b18d94c6c6c5b6eb2404" translate="yes" xml:space="preserve">
          <source>Any expression that is a valid &lt;a href=&quot;../reference/api/pandas.eval#pandas.eval&quot;&gt;&lt;code&gt;pandas.eval()&lt;/code&gt;&lt;/a&gt; expression is also a valid &lt;a href=&quot;../reference/api/pandas.dataframe.eval#pandas.DataFrame.eval&quot;&gt;&lt;code&gt;DataFrame.eval()&lt;/code&gt;&lt;/a&gt; expression, with the added benefit that you don&amp;rsquo;t have to prefix the name of the &lt;a href=&quot;../reference/api/pandas.dataframe#pandas.DataFrame&quot;&gt;&lt;code&gt;DataFrame&lt;/code&gt;&lt;/a&gt; to the column(s) you&amp;rsquo;re interested in evaluating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5964cd2d7c79472697fe32851fce192640c6dbff" translate="yes" xml:space="preserve">
          <source>Any input passed containing Categorical data will have &lt;strong&gt;all&lt;/strong&gt; of its categories included in the cross-tabulation, even if the actual data does not contain any instances of a particular category.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce16c259e759f906f8065019dbf4a811189652b6" translate="yes" xml:space="preserve">
          <source>Any nanosecond resolution will be lost.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ceb80800eb57e57ca5b1b17e4f4beb32b44748" translate="yes" xml:space="preserve">
          <source>Any other form of observational / statistical data sets. The data actually need not be labeled at all to be placed into a pandas data structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf00b212bf8aed69a4cf5a5c69e5692c7a383077" translate="yes" xml:space="preserve">
          <source>Any other module used in the examples must be explicitly imported, one per line (as recommended in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008#imports&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 8#imports&lt;/strong&gt;&lt;/a&gt;) and avoiding aliases. Avoid excessive imports, but if needed, imports from the standard library go first, followed by third-party libraries (like matplotlib).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3632ffd552cc1d333862f7fa1372c18be2ee605a" translate="yes" xml:space="preserve">
          <source>Any single or multiple element data structure, or list-like object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba937ed25eac91be6494338327246df991da190" translate="yes" xml:space="preserve">
          <source>Any valid string path is acceptable. The string could be a URL. Valid URL schemes include http, ftp, s3, and file. For file URLs, a host is expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e954390c5f626600a8327f64c43b3441dffdc0fc" translate="yes" xml:space="preserve">
          <source>Any valid string path is acceptable. The string could be a URL. Valid URL schemes include http, ftp, s3, and file. For file URLs, a host is expected. A local file could be: &lt;a href=&quot;file://localhost/path/to/table.csv&quot;&gt;file://localhost/path/to/table.csv&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4548d91026734d1a3e360f967c361b2d835711d" translate="yes" xml:space="preserve">
          <source>Any valid string path is acceptable. The string could be a URL. Valid URL schemes include http, ftp, s3, and file. For file URLs, a host is expected. A local file could be: &lt;code&gt;file://localhost/path/to/table.csv&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3680aacea1c49425f4ba9338e259c5d070cb7046" translate="yes" xml:space="preserve">
          <source>Any valid string path is acceptable. The string could be a URL. Valid URL schemes include http, ftp, s3, and file. For file URLs, a host is expected. A local file could be: &lt;code&gt;file://localhost/path/to/table.dta&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c7d7846c6e8605dcce2d8416166539c4565e50" translate="yes" xml:space="preserve">
          <source>Any valid string path is acceptable. The string could be a URL. Valid URL schemes include http, ftp, s3, and file. For file URLs, a host is expected. A local file could be: &lt;code&gt;file://localhost/path/to/table.feather&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3fb17dd2ac024ef5d7baf9a3e21d8f07096da15" translate="yes" xml:space="preserve">
          <source>Any valid string path is acceptable. The string could be a URL. Valid URL schemes include http, ftp, s3, and file. For file URLs, a host is expected. A local file could be: &lt;code&gt;file://localhost/path/to/table.h5&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b41054070a92e52620dfa7c505a3f87b483b55f" translate="yes" xml:space="preserve">
          <source>Any valid string path is acceptable. The string could be a URL. Valid URL schemes include http, ftp, s3, and file. For file URLs, a host is expected. A local file could be: &lt;code&gt;file://localhost/path/to/table.json&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a1068aa62d158902d0259159b4c681158e327c" translate="yes" xml:space="preserve">
          <source>Any valid string path is acceptable. The string could be a URL. Valid URL schemes include http, ftp, s3, and file. For file URLs, a host is expected. A local file could be: &lt;code&gt;file://localhost/path/to/table.parquet&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26bce3851691b4e1bdd4bed182b8228bda9df4d8" translate="yes" xml:space="preserve">
          <source>Any valid string path is acceptable. The string could be a URL. Valid URL schemes include http, ftp, s3, and file. For file URLs, a host is expected. A local file could be: &lt;code&gt;file://localhost/path/to/table.sas&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a4dbceac8f3bec865509b44937581123348753b" translate="yes" xml:space="preserve">
          <source>Any valid string path is acceptable. The string could be a URL. Valid URL schemes include http, ftp, s3, and file. For file URLs, a host is expected. A local file could be: &lt;code&gt;file://localhost/path/to/table.xlsx&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c94d227677d6c608740abe99f043bc116a355178" translate="yes" xml:space="preserve">
          <source>Append a collection of Index options together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6ae934ab327be0ffca6e997a261eff151fab1bb" translate="yes" xml:space="preserve">
          <source>Append rows of &lt;code&gt;other&lt;/code&gt; to the end of caller, returning a new object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89016439f19acb30e6533070052e850ed50424b7" translate="yes" xml:space="preserve">
          <source>Append to Table in file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e46f7c7ab05c305ed0b5626f1d3ac5dd0983902d" translate="yes" xml:space="preserve">
          <source>Append to Table in file. Node must already exist and be Table format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0d524f23186eee2587b4407d925996e831b953c" translate="yes" xml:space="preserve">
          <source>Appending rows to a DataFrame</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b6dbedb0e02feab044cae1916b238a63f4b6ff9" translate="yes" xml:space="preserve">
          <source>Apply &lt;code&gt;func(self, *args, **kwargs)&lt;/code&gt;, and return the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94497a0a4ca7a575b2592eda0a7d365fe2cdb86c" translate="yes" xml:space="preserve">
          <source>Apply a function &lt;code&gt;func&lt;/code&gt; with arguments to this GroupBy object and return the function&amp;rsquo;s result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5143e9d4258b60419a7c7e5ffbf3fc7ca5ef63d1" translate="yes" xml:space="preserve">
          <source>Apply a function &lt;code&gt;func&lt;/code&gt; with arguments to this Resampler object and return the function&amp;rsquo;s result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2300bda8dfb36de22262ab09601b8c2095beace7" translate="yes" xml:space="preserve">
          <source>Apply a function along an axis of the DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bff7ddcf0f3f5f0835d4bd50c78c0e63b8bc94db" translate="yes" xml:space="preserve">
          <source>Apply a function along input axis of DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c3c648ff2f278f5dd00aebf40bbd60c48c34da9" translate="yes" xml:space="preserve">
          <source>Apply a function column-wise, row-wise, or table-wise, updating the HTML representation with the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f47a1d2e3202baba633d75d32f2bd208fc9a2251" translate="yes" xml:space="preserve">
          <source>Apply a function elementwise on a whole DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dba89c279b194e9feebdd7a247e60645e906873" translate="yes" xml:space="preserve">
          <source>Apply a function elementwise, updating the HTML representation with a style which is selected in accordance with the return value of a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d19bce463ae6d687c3211a328de06346c0198ddd" translate="yes" xml:space="preserve">
          <source>Apply a function elementwise, updating the HTML representation with the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9fc9721d30f4b68442c02bc34a966d1181acedf" translate="yes" xml:space="preserve">
          <source>Apply a function row-/column-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2cfb8d5e20b73670b865ee96e6004e3d1273218" translate="yes" xml:space="preserve">
          <source>Apply a function row-wise, column-wise, or table-wise to modify the dataframe&amp;rsquo;s styling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8590e597670d8ae719ff88bcc2427073dc1b4754" translate="yes" xml:space="preserve">
          <source>Apply a function to a Dataframe elementwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e513e0471347ab4f6e2d08cba5597f1ea52478ae" translate="yes" xml:space="preserve">
          <source>Apply a function to a Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3334bbea8770ad0831f1befb79be3cd156ba64bb" translate="yes" xml:space="preserve">
          <source>Apply a function to each row or column of a DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77115550b5fd17c93f359d31ef6137b34d9d7cf3" translate="yes" xml:space="preserve">
          <source>Apply a function with arguments to a dataframe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09b993fe836e3dd31282b3bd112d72ca026c4a15" translate="yes" xml:space="preserve">
          <source>Apply a function with arguments to a series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa16d38d8218f1b1baf532dd1d351ef49f3f132" translate="yes" xml:space="preserve">
          <source>Apply a mapping correspondence on a &lt;a href=&quot;pandas.series#pandas.Series&quot;&gt;&lt;code&gt;Series&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c06b035a5935e9638f3dfb494ff727245c715bc" translate="yes" xml:space="preserve">
          <source>Apply a mapping correspondence on an &lt;a href=&quot;pandas.index#pandas.Index&quot;&gt;&lt;code&gt;Index&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d01583cb8d2903e7fe2cd5193163018ea81e7e4c" translate="yes" xml:space="preserve">
          <source>Apply aggregate function to the GroupBy object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5255708f120370968ac378ac76421f03e0d4da4" translate="yes" xml:space="preserve">
          <source>Apply func(self, *args, **kwargs).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="975a062726ebd91c737ffbd4f9aff859e8879d00" translate="yes" xml:space="preserve">
          <source>Apply function &lt;code&gt;func&lt;/code&gt; group-wise and combine the results together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98b81f8e4ab1a47ad56803e26276ee21c2eb53ec" translate="yes" xml:space="preserve">
          <source>Apply function column-by-column to the GroupBy object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f176ab21606a6853ebdfa6d4ba690888f2ad592d" translate="yes" xml:space="preserve">
          <source>Apply function to each group instead of to the full GroupBy object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f732af265db12b2eb102d6e6f9778389e9596e" translate="yes" xml:space="preserve">
          <source>Apply function to each group instead of to the full Resampler object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ac449be0da05ed96379c1260bef7cae0d7fcaef" translate="yes" xml:space="preserve">
          <source>Apply function to the full GroupBy object instead of to each group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2dcac8637bce624d3a775a32300ec0de72a3d27" translate="yes" xml:space="preserve">
          <source>Apply more complex functions on a &lt;a href=&quot;pandas.series#pandas.Series&quot;&gt;&lt;code&gt;Series&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed84febd003c363f3e308dcc4d8477d2917ac1cd" translate="yes" xml:space="preserve">
          <source>Apply the &lt;code&gt;put&lt;/code&gt; method to its &lt;code&gt;values&lt;/code&gt; attribute if it has one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b90247298470303ce02272df923dc51603af1da" translate="yes" xml:space="preserve">
          <source>Arbitrary intervals can be represented as &lt;a href=&quot;api/pandas.interval#pandas.Interval&quot;&gt;&lt;code&gt;Interval&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9136336b08be2ef8400d733db679b54eba6a1979" translate="yes" xml:space="preserve">
          <source>Arbitrary matrix data (homogeneously typed or heterogeneous) with row and column labels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a8df98ea0a1a2b1cc7ea9fc6fe7f2ef81f17cdd" translate="yes" xml:space="preserve">
          <source>Area plot, or array of area plots if subplots is True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="085dff8849960bf8f4f6b108e7bc653f8ecb6301" translate="yes" xml:space="preserve">
          <source>Area plots are stacked by default. Set to False to create a unstacked plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d19efa680eea3f3d4c11af936730565283f52fc" translate="yes" xml:space="preserve">
          <source>Area plots are stacked by default. To produce an unstacked plot, pass &lt;code&gt;stacked=False&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ce062b6b439a641079f6aa78d1ebdc9f858f9f1" translate="yes" xml:space="preserve">
          <source>Argument &amp;lsquo;first&amp;rsquo; puts NaNs at the beginning, &amp;lsquo;last&amp;rsquo; puts NaNs at the end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f7ec3385fe5b71b7b0948792155501c520c6606" translate="yes" xml:space="preserve">
          <source>Arguments and keyword arguments to be passed into func.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fece9ebb467e36ae935eb7f9713ac9a4f47e841" translate="yes" xml:space="preserve">
          <source>Arguments passed to &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77cf61da9c55f002d8350208d7a4be6efc2b4bf7" translate="yes" xml:space="preserve">
          <source>Arithmetic operations except for the left shift (&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;) and right shift (&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;) operators, e.g., &lt;code&gt;df + 2 * pi / s ** 4 % 42 - the_golden_ratio&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107004472b7ba4e5e31f3082ee1fb5a1239eec61" translate="yes" xml:space="preserve">
          <source>Array</source>
          <target state="translated">Array</target>
        </trans-unit>
        <trans-unit id="238a5476b2b099dbf0d0f2fd0cf448d18972ec8a" translate="yes" xml:space="preserve">
          <source>Array Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0ee63133fe93106d055fbf2b3c6b7f07d4b60c5" translate="yes" xml:space="preserve">
          <source>Array of 1D containing data with &lt;code&gt;datetime.timedelta&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f91c450c43c0f85e2c3631ce43a8ff7eea347f" translate="yes" xml:space="preserve">
          <source>Array of booleans denoting where values in the original data are not NA.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2914ff2a577fc90dfcce0c3436118d9930be510c" translate="yes" xml:space="preserve">
          <source>Array of indices that sort &lt;code&gt;self&lt;/code&gt;. If NaN values are contained, NaN values are placed at the end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d19e541771bdeca8f12189b199116e8c7fc52ee" translate="yes" xml:space="preserve">
          <source>Array of insertion points with the same shape as &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d602ccc2c74f67094dbd18d07b323b210f86d4" translate="yes" xml:space="preserve">
          <source>Array of integer (optional missing) values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="942a9c2dde1bb5b33c155be51bf12da3f140ad4f" translate="yes" xml:space="preserve">
          <source>Array of tuples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9998edca027b5a55687972ba225c84eec75d6d8d" translate="yes" xml:space="preserve">
          <source>Array of values to aggregate according to the factors. Requires &lt;code&gt;aggfunc&lt;/code&gt; be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4994f8305c8ede2a4fbbef9d44d5fdff597cc221" translate="yes" xml:space="preserve">
          <source>Array or Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23e3b01214e4ea46c8073e7bdc0f1cac5885fd0f" translate="yes" xml:space="preserve">
          <source>Array scalar view of the timedelta in nanoseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23767dc7557f5945cbb8ba4d30fca848cfd29d35" translate="yes" xml:space="preserve">
          <source>Array type for storing data that come from a fixed set of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a42a6e7ac57209c5e1202eb4dc0c09c59154dc55" translate="yes" xml:space="preserve">
          <source>Array view compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="009502c447ec7d96528d2a280ce25c93db16dfcc" translate="yes" xml:space="preserve">
          <source>Array-like containing Interval objects from which to build the IntervalArray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="132b728c54772094b9970598280c64f833458c4c" translate="yes" xml:space="preserve">
          <source>Array-like containing Interval objects from which to build the IntervalIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c67c3cba1438a75ab4caaa8ea41aa48a5268e770" translate="yes" xml:space="preserve">
          <source>Array-like to check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e16351d17e8649d8f461b8778533016da6c36375" translate="yes" xml:space="preserve">
          <source>Array/Index converted to the specified time zone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="939b23db2d54a7a0d2e5d70a0277084f0eb7a9ed" translate="yes" xml:space="preserve">
          <source>As PEP-257 is quite open, and some other standards exist on top of it. In the case of pandas, the numpy docstring convention is followed. The conventions is explained in this document:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e27d143ad19e97f7227c73adf01cdc2e7f8d4b30" translate="yes" xml:space="preserve">
          <source>As a convenience, you can pass a list of arrays directly into &lt;code&gt;Series&lt;/code&gt; or &lt;code&gt;DataFrame&lt;/code&gt; to construct a &lt;code&gt;MultiIndex&lt;/code&gt; automatically:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda53a4c4e48eb257243eebaf80c6bd419c3f026" translate="yes" xml:space="preserve">
          <source>As a signal to other Python libraries that this column should be treated as a categorical variable (e.g. to use suitable statistical methods or plot types).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f24f12dc6c724e0240d3a4576966a3668efd7b9c" translate="yes" xml:space="preserve">
          <source>As an example of fully-formed metadata:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9377f014c8844995e9b60ccba27bdb65175bc72" translate="yes" xml:space="preserve">
          <source>As data comes in many shapes and forms, pandas aims to be flexible with regard to handling missing data. While &lt;code&gt;NaN&lt;/code&gt; is the default missing value marker for reasons of computational speed and convenience, we need to be able to easily detect this value with data of different types: floating point, integer, boolean, and general object. In many cases, however, the Python &lt;code&gt;None&lt;/code&gt; will arise and we wish to also consider that &amp;ldquo;missing&amp;rdquo; or &amp;ldquo;not available&amp;rdquo; or &amp;ldquo;NA&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8934ae536cd293f4bfa00f46820585f3d7d9f8a" translate="yes" xml:space="preserve">
          <source>As described above, &lt;a href=&quot;../reference/api/pandas.get_option#pandas.get_option&quot;&gt;&lt;code&gt;get_option()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../reference/api/pandas.set_option#pandas.set_option&quot;&gt;&lt;code&gt;set_option()&lt;/code&gt;&lt;/a&gt; are available from the pandas namespace. To change an option, call &lt;code&gt;set_option('option regex', new_value)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c7defdfdc687af9373e54d8765f30c6fb017f90" translate="yes" xml:space="preserve">
          <source>As in the &lt;code&gt;asof&lt;/code&gt; function, if the label (a particular entry in &lt;code&gt;where&lt;/code&gt;) is not in the index, the latest index label upto the passed label is chosen and its index returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0e54ad809afc4f8c8c6c4e0c4e5c908300c5421" translate="yes" xml:space="preserve">
          <source>As is customary, we import pandas and NumPy as follows. This means that we can refer to the libraries as &lt;code&gt;pd&lt;/code&gt; and &lt;code&gt;np&lt;/code&gt;, respectively, for the rest of the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d5f4fbf9647762a6718f8a6c10d79ebe7323f70" translate="yes" xml:space="preserve">
          <source>As is customary, we import pandas and NumPy as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4614d5f6b2a0e164e0e308f8950233642be2895" translate="yes" xml:space="preserve">
          <source>As mentioned when introducing the data structures in the &lt;a href=&quot;../getting_started/basics#basics&quot;&gt;last section&lt;/a&gt;, the primary function of indexing with &lt;code&gt;[]&lt;/code&gt; (a.k.a. &lt;code&gt;__getitem__&lt;/code&gt; for those familiar with implementing class behavior in Python) is selecting out lower-dimensional slices. The following table shows return type values when indexing pandas objects with &lt;code&gt;[]&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7899dce97ab31d004dc7480ccbd9a5ebae6e590d" translate="yes" xml:space="preserve">
          <source>As of Numba version 0.20, pandas objects cannot be passed directly to Numba-compiled functions. Instead, one must pass the NumPy array underlying the pandas object to the Numba-compiled function as demonstrated below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2f440cbc24f45cddbef328860e8b7553ecf4431" translate="yes" xml:space="preserve">
          <source>As one might expect, the majority of the time is now spent in &lt;code&gt;apply_integrate_f&lt;/code&gt;, so if we wanted to make anymore efficiencies we must continue to concentrate our efforts here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca0de0cc1b26797dae23d82b46c6ba5c562b070d" translate="yes" xml:space="preserve">
          <source>As part of &lt;a href=&quot;#contributing-ci&quot;&gt;Continuous Integration&lt;/a&gt; checks we run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faad7ef7c45cc09af88242e59189452288d712dc" translate="yes" xml:space="preserve">
          <source>As part of your implementation, we require that you defer to pandas when a pandas container (&lt;a href=&quot;../reference/api/pandas.series#pandas.Series&quot;&gt;&lt;code&gt;Series&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../reference/api/pandas.dataframe#pandas.DataFrame&quot;&gt;&lt;code&gt;DataFrame&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../reference/api/pandas.index#pandas.Index&quot;&gt;&lt;code&gt;Index&lt;/code&gt;&lt;/a&gt;) is detected in &lt;code&gt;inputs&lt;/code&gt;. If any of those is present, you should return &lt;code&gt;NotImplemented&lt;/code&gt;. Pandas will take care of unboxing the array from the container and re-calling the ufunc with the unwrapped input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a89661b1f02acecf5ace3c9e152793213304c68" translate="yes" xml:space="preserve">
          <source>As this behaviour is separate from the core conversion to numeric values, any errors raised during the downcasting will be surfaced regardless of the value of the &amp;lsquo;errors&amp;rsquo; input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb135afb35545b147907c44c27fb473436d8a127" translate="yes" xml:space="preserve">
          <source>As well as for the index:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe68f69ab8fa8237a092ab8977c826892318baa" translate="yes" xml:space="preserve">
          <source>As you can see (if you&amp;rsquo;ve read the rest of the documentation), the resulting object&amp;rsquo;s index has a &lt;a href=&quot;advanced#advanced-hierarchical&quot;&gt;hierarchical index&lt;/a&gt;. This means that we can now select out each chunk by key:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="618daa756c845f885d18abd41625a59d356e9bf8" translate="yes" xml:space="preserve">
          <source>As you can see, the columns &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, and &lt;code&gt;D&lt;/code&gt; are automatically tab completed. &lt;code&gt;E&lt;/code&gt; is there as well; the rest of the attributes have been truncated for brevity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b834a23499e8c15822cc934dd05176b29187712" translate="yes" xml:space="preserve">
          <source>Assembling a datetime from multiple columns of a DataFrame. The keys can be common abbreviations like [&amp;lsquo;year&amp;rsquo;, &amp;lsquo;month&amp;rsquo;, &amp;lsquo;day&amp;rsquo;, &amp;lsquo;minute&amp;rsquo;, &amp;lsquo;second&amp;rsquo;, &amp;lsquo;ms&amp;rsquo;, &amp;lsquo;us&amp;rsquo;, &amp;lsquo;ns&amp;rsquo;]) or plurals of the same</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3292c12a856a02722a46d87471ff4e6faefa104" translate="yes" xml:space="preserve">
          <source>AssertionError</source>
          <target state="translated">AssertionError</target>
        </trans-unit>
        <trans-unit id="283f18394b73b039f6d3a20ab0fcc53c7eac4a11" translate="yes" xml:space="preserve">
          <source>Assign a color to each category. Example: [&amp;lsquo;blue&amp;rsquo;, &amp;lsquo;green&amp;rsquo;].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b1e500e0a5afdc981828f55bcdcfad2c7d393f0" translate="yes" xml:space="preserve">
          <source>Assign desired index to given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a021f75ae7f14b71e657d6db0074fd6055230cdc" translate="yes" xml:space="preserve">
          <source>Assign new columns to a DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc3b8d3cceb5ddcf3392fc04826930abcee54c4b" translate="yes" xml:space="preserve">
          <source>Assigning multiple columns within the same &lt;code&gt;assign&lt;/code&gt; is possible. For Python 3.6 and above, later items in &amp;lsquo;**kwargs&amp;rsquo; may refer to newly created or modified columns in &amp;lsquo;df&amp;rsquo;; items are computed and assigned into &amp;lsquo;df&amp;rsquo; in order. For Python 3.5 and below, the order of keyword arguments is not specified, you cannot refer to newly created or modified columns. All items are computed first, and then assigned in alphabetical order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c262fde6cbb3acac8e59aff9dcebb16fbdf33e" translate="yes" xml:space="preserve">
          <source>Assigning to &lt;code&gt;categories&lt;/code&gt; is a inplace operation!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faea98a2a6fe70393f6626ce4e21abb41e5d1c17" translate="yes" xml:space="preserve">
          <source>Assignment is allowed though by default the original DataFrame is not modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a8074d78106ceedec166c0de30aa4dde93c6a85" translate="yes" xml:space="preserve">
          <source>Assigns values outside boundary to boundary values. Thresholds can be singular values or array like, and in the latter case the clipping is performed element-wise in the specified axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d1b3b84c9b22507a5f24e22d734e960126f5aa6" translate="yes" xml:space="preserve">
          <source>Assuming that &lt;code&gt;self&lt;/code&gt; is sorted:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17a38dea37330e2a552db63fa600f01bcb06ac49" translate="yes" xml:space="preserve">
          <source>Assuming that the index is sorted, return the passed index label if it is in the index, or return the previous index label if the passed one is not in the index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="847e9227f6008bb57a50a373b97aedb9329f39e7" translate="yes" xml:space="preserve">
          <source>Assuming the missing data are missing at random this results in an estimate for the covariance matrix which is unbiased. However, for many applications this estimate may not be acceptable because the estimated covariance matrix is not guaranteed to be positive semi-definite. This could lead to estimated correlations having absolute values which are greater than one, and/or a non-invertible covariance matrix. See &lt;a href=&quot;http://en.wikipedia.org/w/index.php?title=Estimation_of_covariance_matrices&quot;&gt;Estimation of covariance matrices&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8285d78da67fd75904fc813a6e40923d77fe6a15" translate="yes" xml:space="preserve">
          <source>At this point you should be able to import pandas from your locally built version:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38a0725a9db4327acc5ab4a8b0e28950a3af0804" translate="yes" xml:space="preserve">
          <source>Attempt to convert values of non-string, non-numeric objects (like decimal.Decimal) to floating point, useful for SQL result sets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c99086bed7a57f1848cf039b09832b569d18bb7d" translate="yes" xml:space="preserve">
          <source>Attempt to infer better dtypes for object columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd5dc03079d44b34bb699f1394078a605fdcb2fd" translate="yes" xml:space="preserve">
          <source>Attempts soft conversion of object-dtyped columns, leaving non-object and unconvertible columns unchanged. The inference rules are the same as during normal Series/DataFrame construction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd95b409a19cffedeaa0c6241c16f85d21ca6316" translate="yes" xml:space="preserve">
          <source>Attempts to convert values of non-string, non-numeric objects (like decimal.Decimal) to floating point, useful for SQL result sets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e19388759ea8f1a1e341460fa22ad603047fa05" translate="yes" xml:space="preserve">
          <source>Attempts to convert values of non-string, non-numeric objects (like decimal.Decimal) to floating point. Can result in loss of Precision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91bce955e5463a031508f84438b6f67b9451abdf" translate="yes" xml:space="preserve">
          <source>Attempts to convert values of non-string, non-numeric objects (like decimal.Decimal) to floating point. Useful for SQL result sets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="575bb8290ede2b9667d8e92089409003fa80b2b9" translate="yes" xml:space="preserve">
          <source>Attribute access</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90385977bc9ea5c42c50a4e0b51d0d672bc1f6e6" translate="yes" xml:space="preserve">
          <source>Attribute access, e.g., &lt;code&gt;df.a&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e30390c6b25519953f15954ce4132cba67fdd587" translate="yes" xml:space="preserve">
          <source>AttributeError</source>
          <target state="translated">AttributeError</target>
        </trans-unit>
        <trans-unit id="a6652617f2c799eb11ee727b16c5646c48af6905" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">Attributes</target>
        </trans-unit>
        <trans-unit id="cc3307fda48a46f4a297fa8558a9d4ff399cabe1" translate="yes" xml:space="preserve">
          <source>Attributes and underlying data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7fa36005fcbd9c2ea2fe9205f82f8e8f278ceaf" translate="yes" xml:space="preserve">
          <source>Autocorrelation Plot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8a219b0276e739b8fdfb1dc1ab4123104c572aa" translate="yes" xml:space="preserve">
          <source>Automatic and explicit &lt;strong&gt;data alignment&lt;/strong&gt;: objects can be explicitly aligned to a set of labels, or the user can simply ignore the labels and let &lt;code&gt;Series&lt;/code&gt;, &lt;code&gt;DataFrame&lt;/code&gt;, etc. automatically align the data for you in computations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2931a9a21b541225c024193258e14ebcd1821756" translate="yes" xml:space="preserve">
          <source>Available cases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91791fb1c671bc50f26bfde0c65300d3feece464" translate="yes" xml:space="preserve">
          <source>Available kwargs: {days, seconds, microseconds, milliseconds, minutes, hours, weeks}. Values for construction in compat with datetime.timedelta. Numpy ints and floats will be coerced to python ints and floats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48315d4da6f457296128d582ea2ac7a8107a6caa" translate="yes" xml:space="preserve">
          <source>Available options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="057b4b33c8569c09b413019743ff85bf2e11c330" translate="yes" xml:space="preserve">
          <source>Available options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570d8f848f14577f6db35c538f58ded1b980df07" translate="yes" xml:space="preserve">
          <source>Axis along which the function is applied:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04388f6c2b31d163b02edafe90363be434b40e5d" translate="yes" xml:space="preserve">
          <source>Axis along which to fill missing values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af3d9cf81d0ecd6ab4007608d578ff18fdd812f5" translate="yes" xml:space="preserve">
          <source>Axis for the function to be applied on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4459d9afa7679398ad4d66b0656daae6713bba0" translate="yes" xml:space="preserve">
          <source>Axis to be sorted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db1906fbeee0195046920ed075d5b0c52d721b71" translate="yes" xml:space="preserve">
          <source>Axis to direct sorting. The value &amp;lsquo;index&amp;rsquo; is accepted for compatibility with DataFrame.sort_values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="862ef98b62dba3b71ef4b57ec3dd6a3acf52b3c2" translate="yes" xml:space="preserve">
          <source>Axis to direct sorting. This can only be 0 for Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da437f06c43e7aa9897ec00d2ab29db84eeb9c7f" translate="yes" xml:space="preserve">
          <source>Axis to interpolate along.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9d77bb4e0a86d5d1f7eff95d4ee2e0930c4df3d" translate="yes" xml:space="preserve">
          <source>Axis to retrieve cross-section on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3809ca7a13f05d63ec4d467aacddf1c13864454b" translate="yes" xml:space="preserve">
          <source>Axis to sample. Accepts axis number or name. Default is stat axis for given data type (0 for Series and DataFrames).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ae544f18e576798e0e3b3ba5c3c1bbae3a15b2" translate="yes" xml:space="preserve">
          <source>Axis to target with &lt;code&gt;mapper&lt;/code&gt;. Can be either the axis name (&amp;lsquo;index&amp;rsquo;, &amp;lsquo;columns&amp;rsquo;) or number (0, 1). The default is &amp;lsquo;index&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60eb28a9f49cf47b0a8cc1e32d75b6c5cf627ed5" translate="yes" xml:space="preserve">
          <source>Axis to target. Can be either the axis name (&amp;lsquo;index&amp;rsquo;, &amp;lsquo;columns&amp;rsquo;) or number (0, 1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd0361baee21e1b1202b20962818725f461d664b" translate="yes" xml:space="preserve">
          <source>Axis to truncate. Truncates the index (rows) by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae4f281df5a5d0ff3cad6371f76d5c29b6d953ec" translate="yes" xml:space="preserve">
          <source>B</source>
          <target state="translated">B</target>
        </trans-unit>
        <trans-unit id="578a49fac35655f8a7cd81c0227ca8247bcee12c" translate="yes" xml:space="preserve">
          <source>BDay</source>
          <target state="translated">BDay</target>
        </trans-unit>
        <trans-unit id="70bcc0687642f6fc9c81360e6f3673a3778d04ea" translate="yes" xml:space="preserve">
          <source>BDay.apply()</source>
          <target state="translated">BDay.apply()</target>
        </trans-unit>
        <trans-unit id="38fb47316f1665a955e415da88e14cf8d35c0d5d" translate="yes" xml:space="preserve">
          <source>BDay.apply_index()</source>
          <target state="translated">BDay.apply_index()</target>
        </trans-unit>
        <trans-unit id="f668da582f90311e06eb85b4c863392d09ac0445" translate="yes" xml:space="preserve">
          <source>BDay.base</source>
          <target state="translated">BDay.base</target>
        </trans-unit>
        <trans-unit id="2e5b863d8240050f8f609a53d2573634a907b463" translate="yes" xml:space="preserve">
          <source>BDay.copy()</source>
          <target state="translated">BDay.copy()</target>
        </trans-unit>
        <trans-unit id="4aa6708ea2eed05450c22c6b1deb9009720040c2" translate="yes" xml:space="preserve">
          <source>BDay.freqstr</source>
          <target state="translated">BDay.freqstr</target>
        </trans-unit>
        <trans-unit id="4387a471f6aa72675640a612f972597e0ab2ef3a" translate="yes" xml:space="preserve">
          <source>BDay.isAnchored()</source>
          <target state="translated">BDay.isAnchored()</target>
        </trans-unit>
        <trans-unit id="e87c4a0f58c3cd8c92053e4c01058dd048960e93" translate="yes" xml:space="preserve">
          <source>BDay.kwds</source>
          <target state="translated">BDay.kwds</target>
        </trans-unit>
        <trans-unit id="371109edbd1e6fce60eb53f0e3d744a3486c4b54" translate="yes" xml:space="preserve">
          <source>BDay.name</source>
          <target state="translated">BDay.name</target>
        </trans-unit>
        <trans-unit id="42d2eb17788b1f93ff2bba8afe1564964febb8cc" translate="yes" xml:space="preserve">
          <source>BDay.nanos</source>
          <target state="translated">BDay.nanos</target>
        </trans-unit>
        <trans-unit id="56e71dfbe3149f5caa028d9ccdbf0499807b82fc" translate="yes" xml:space="preserve">
          <source>BDay.normalize</source>
          <target state="translated">BDay.normalize</target>
        </trans-unit>
        <trans-unit id="fde36cf02f1f883dd61753e8b8f46f384fd8a2c9" translate="yes" xml:space="preserve">
          <source>BDay.offset</source>
          <target state="translated">BDay.offset</target>
        </trans-unit>
        <trans-unit id="971b4a3e19d3ae8c701df3efd769b8f960ea8d7b" translate="yes" xml:space="preserve">
          <source>BDay.onOffset()</source>
          <target state="translated">BDay.onOffset()</target>
        </trans-unit>
        <trans-unit id="44cbb356f5795834d375c1ed778a95e2143e982e" translate="yes" xml:space="preserve">
          <source>BDay.rollback()</source>
          <target state="translated">BDay.rollback()</target>
        </trans-unit>
        <trans-unit id="c645b47c42f91be300f84a75327a4d7a92e7d3e1" translate="yes" xml:space="preserve">
          <source>BDay.rollforward()</source>
          <target state="translated">BDay.rollforward()</target>
        </trans-unit>
        <trans-unit id="4c136618fb56cf9ff4b6e161cde54e7fb0a4da32" translate="yes" xml:space="preserve">
          <source>BDay.rule_code</source>
          <target state="translated">BDay.rule_code</target>
        </trans-unit>
        <trans-unit id="1c50baa4b6f2c8346ae6645f25465fba26111845" translate="yes" xml:space="preserve">
          <source>BLD: Updates to the build process/scripts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ab6400027a24921db9bda1ea459e4ebedfab6b5" translate="yes" xml:space="preserve">
          <source>BMonthBegin</source>
          <target state="translated">BMonthBegin</target>
        </trans-unit>
        <trans-unit id="83504f89e36bc5bd4a061677b8f16854a7d10372" translate="yes" xml:space="preserve">
          <source>BMonthBegin.apply()</source>
          <target state="translated">BMonthBegin.apply()</target>
        </trans-unit>
        <trans-unit id="ad4226df114f26a1b3a5bcbf5051028d17657cd4" translate="yes" xml:space="preserve">
          <source>BMonthBegin.apply_index()</source>
          <target state="translated">BMonthBegin.apply_index()</target>
        </trans-unit>
        <trans-unit id="9a71ee36783e7271d13c3602e2cf13bf6c50443e" translate="yes" xml:space="preserve">
          <source>BMonthBegin.base</source>
          <target state="translated">BMonthBegin.base</target>
        </trans-unit>
        <trans-unit id="f19d3d1fca7c9f7816afa37df91d1a2136cacea2" translate="yes" xml:space="preserve">
          <source>BMonthBegin.copy()</source>
          <target state="translated">BMonthBegin.copy()</target>
        </trans-unit>
        <trans-unit id="b36894f2391084d0a4f570770f6b7d436244adb3" translate="yes" xml:space="preserve">
          <source>BMonthBegin.freqstr</source>
          <target state="translated">BMonthBegin.freqstr</target>
        </trans-unit>
        <trans-unit id="d51bfda2d5b9b32dde7585e767507c15df6fb017" translate="yes" xml:space="preserve">
          <source>BMonthBegin.isAnchored()</source>
          <target state="translated">BMonthBegin.isAnchored()</target>
        </trans-unit>
        <trans-unit id="ead9bc8f26ab6b516fad35f962f22d914c50baff" translate="yes" xml:space="preserve">
          <source>BMonthBegin.kwds</source>
          <target state="translated">BMonthBegin.kwds</target>
        </trans-unit>
        <trans-unit id="b4f602da183da0c4971db8be98f97ba0b05925e1" translate="yes" xml:space="preserve">
          <source>BMonthBegin.name</source>
          <target state="translated">BMonthBegin.name</target>
        </trans-unit>
        <trans-unit id="0752010aab7475242f703198fb7477d6fbe21bc6" translate="yes" xml:space="preserve">
          <source>BMonthBegin.nanos</source>
          <target state="translated">BMonthBegin.nanos</target>
        </trans-unit>
        <trans-unit id="87fbc048ce1c0eb56438b7470975cef09cc8b927" translate="yes" xml:space="preserve">
          <source>BMonthBegin.normalize</source>
          <target state="translated">BMonthBegin.normalize</target>
        </trans-unit>
        <trans-unit id="12fef1a5e6701c70a293f0cd2f492af3b39ac4e2" translate="yes" xml:space="preserve">
          <source>BMonthBegin.onOffset()</source>
          <target state="translated">BMonthBegin.onOffset()</target>
        </trans-unit>
        <trans-unit id="0be58f0e18ca5c503615b148117c6659591ef3b0" translate="yes" xml:space="preserve">
          <source>BMonthBegin.rollback()</source>
          <target state="translated">BMonthBegin.rollback()</target>
        </trans-unit>
        <trans-unit id="dc00734ff65de7e51275ba27bacff91566fab0d6" translate="yes" xml:space="preserve">
          <source>BMonthBegin.rollforward()</source>
          <target state="translated">BMonthBegin.rollforward()</target>
        </trans-unit>
        <trans-unit id="1882f2ee5bbb1e5811cce1472c56173928d38300" translate="yes" xml:space="preserve">
          <source>BMonthBegin.rule_code</source>
          <target state="translated">BMonthBegin.rule_code</target>
        </trans-unit>
        <trans-unit id="bafb7d6e6e395608f4698d7a436f64848984968d" translate="yes" xml:space="preserve">
          <source>BMonthEnd</source>
          <target state="translated">BMonthEnd</target>
        </trans-unit>
        <trans-unit id="93aef6426c2905e7e864abc1d05aec74d099decd" translate="yes" xml:space="preserve">
          <source>BMonthEnd.apply()</source>
          <target state="translated">BMonthEnd.apply()</target>
        </trans-unit>
        <trans-unit id="8d733aac78064da7356434e2f247eb43b036bf0d" translate="yes" xml:space="preserve">
          <source>BMonthEnd.apply_index()</source>
          <target state="translated">BMonthEnd.apply_index()</target>
        </trans-unit>
        <trans-unit id="588d1d94be691d2661c59a082780912d9975069a" translate="yes" xml:space="preserve">
          <source>BMonthEnd.base</source>
          <target state="translated">BMonthEnd.base</target>
        </trans-unit>
        <trans-unit id="aea40f3239eb0cafbf172cd005bd9874cb93f880" translate="yes" xml:space="preserve">
          <source>BMonthEnd.copy()</source>
          <target state="translated">BMonthEnd.copy()</target>
        </trans-unit>
        <trans-unit id="ec201850a96522b991d05792f69605047996e83e" translate="yes" xml:space="preserve">
          <source>BMonthEnd.freqstr</source>
          <target state="translated">BMonthEnd.freqstr</target>
        </trans-unit>
        <trans-unit id="2b9af9d9dcccf4ba44b9b6ed70d24c176b952540" translate="yes" xml:space="preserve">
          <source>BMonthEnd.isAnchored()</source>
          <target state="translated">BMonthEnd.isAnchored()</target>
        </trans-unit>
        <trans-unit id="20cf33775806497e9afa6187a3ce470c6b09f0f7" translate="yes" xml:space="preserve">
          <source>BMonthEnd.kwds</source>
          <target state="translated">BMonthEnd.kwds</target>
        </trans-unit>
        <trans-unit id="b4261373c0bfbe930942c9169dbc3817613f5884" translate="yes" xml:space="preserve">
          <source>BMonthEnd.name</source>
          <target state="translated">BMonthEnd.name</target>
        </trans-unit>
        <trans-unit id="d969126bdf278de74603044ec851c7d1958f23df" translate="yes" xml:space="preserve">
          <source>BMonthEnd.nanos</source>
          <target state="translated">BMonthEnd.nanos</target>
        </trans-unit>
        <trans-unit id="d82f7b361ac9331042f4c1154faba469bfc81b56" translate="yes" xml:space="preserve">
          <source>BMonthEnd.normalize</source>
          <target state="translated">BMonthEnd.normalize</target>
        </trans-unit>
        <trans-unit id="cdbf86eaa44e013b7f1c79124f2e78f5e51186d0" translate="yes" xml:space="preserve">
          <source>BMonthEnd.onOffset()</source>
          <target state="translated">BMonthEnd.onOffset()</target>
        </trans-unit>
        <trans-unit id="13ffb2d489edb5588207c4c97ee50f778980046a" translate="yes" xml:space="preserve">
          <source>BMonthEnd.rollback()</source>
          <target state="translated">BMonthEnd.rollback()</target>
        </trans-unit>
        <trans-unit id="29ab63ff3d4fbadca4689c3ccc9961c2c945bfb9" translate="yes" xml:space="preserve">
          <source>BMonthEnd.rollforward()</source>
          <target state="translated">BMonthEnd.rollforward()</target>
        </trans-unit>
        <trans-unit id="30af282c5b3bead78940770aa617b462b3218cb1" translate="yes" xml:space="preserve">
          <source>BMonthEnd.rule_code</source>
          <target state="translated">BMonthEnd.rule_code</target>
        </trans-unit>
        <trans-unit id="2dd7fe2f0e111468c8fb06c625f031c4e26c89de" translate="yes" xml:space="preserve">
          <source>BQuarterBegin</source>
          <target state="translated">BQuarterBegin</target>
        </trans-unit>
        <trans-unit id="cc8503b057ed0b42b2223b3b02dd54edff04eb71" translate="yes" xml:space="preserve">
          <source>BQuarterBegin.apply()</source>
          <target state="translated">BQuarterBegin.apply()</target>
        </trans-unit>
        <trans-unit id="03f0f88c9812bf0529c8995dc4e94b226540f03b" translate="yes" xml:space="preserve">
          <source>BQuarterBegin.apply_index()</source>
          <target state="translated">BQuarterBegin.apply_index()</target>
        </trans-unit>
        <trans-unit id="9bc8203026f657cb0433fac8b25e7d77e2bcaeb7" translate="yes" xml:space="preserve">
          <source>BQuarterBegin.base</source>
          <target state="translated">BQuarterBegin.base</target>
        </trans-unit>
        <trans-unit id="c6e78295cbf042fdb64088d9d795e2c38128eafb" translate="yes" xml:space="preserve">
          <source>BQuarterBegin.copy()</source>
          <target state="translated">BQuarterBegin.copy()</target>
        </trans-unit>
        <trans-unit id="6810c49d1554576585c134cfb92b3800fcaae2ca" translate="yes" xml:space="preserve">
          <source>BQuarterBegin.freqstr</source>
          <target state="translated">BQuarterBegin.freqstr</target>
        </trans-unit>
        <trans-unit id="ae785ff1caa5839c64e8192fcb2007f17811ac47" translate="yes" xml:space="preserve">
          <source>BQuarterBegin.isAnchored()</source>
          <target state="translated">BQuarterBegin.isAnchored()</target>
        </trans-unit>
        <trans-unit id="b41a0ccd75c16e573b8fd7abfa2b0a537372c7d3" translate="yes" xml:space="preserve">
          <source>BQuarterBegin.kwds</source>
          <target state="translated">BQuarterBegin.kwds</target>
        </trans-unit>
        <trans-unit id="3e3747ad39fc8dba0fdb8ff4df79320713cfa09e" translate="yes" xml:space="preserve">
          <source>BQuarterBegin.name</source>
          <target state="translated">BQuarterBegin.name</target>
        </trans-unit>
        <trans-unit id="e699ff5bff2f2d7956dd59d327e24d2a38e6ae25" translate="yes" xml:space="preserve">
          <source>BQuarterBegin.nanos</source>
          <target state="translated">BQuarterBegin.nanos</target>
        </trans-unit>
        <trans-unit id="6b68257de6cd776672e22f3f778599f900b1ca7b" translate="yes" xml:space="preserve">
          <source>BQuarterBegin.normalize</source>
          <target state="translated">BQuarterBegin.normalize</target>
        </trans-unit>
        <trans-unit id="1541ddb731454b991bc452afbe4f6dbbb66338a4" translate="yes" xml:space="preserve">
          <source>BQuarterBegin.onOffset()</source>
          <target state="translated">BQuarterBegin.onOffset()</target>
        </trans-unit>
        <trans-unit id="b473c14cd03bd8ca7f48223a01a37944f71058c8" translate="yes" xml:space="preserve">
          <source>BQuarterBegin.rollback()</source>
          <target state="translated">BQuarterBegin.rollback()</target>
        </trans-unit>
        <trans-unit id="c3ca8ba0bb9894428417cef1549214e635ce71a0" translate="yes" xml:space="preserve">
          <source>BQuarterBegin.rollforward()</source>
          <target state="translated">BQuarterBegin.rollforward()</target>
        </trans-unit>
        <trans-unit id="ae4229d9922ca2b4f573e09b52349dfd3ec80a9f" translate="yes" xml:space="preserve">
          <source>BQuarterBegin.rule_code</source>
          <target state="translated">BQuarterBegin.rule_code</target>
        </trans-unit>
        <trans-unit id="ee0f2f9fa29caae6fafd63c0f35120474440c449" translate="yes" xml:space="preserve">
          <source>BQuarterEnd</source>
          <target state="translated">BQuarterEnd</target>
        </trans-unit>
        <trans-unit id="884babd85f88a9c0ab97ddd7bd6db204d9a9d095" translate="yes" xml:space="preserve">
          <source>BQuarterEnd.apply()</source>
          <target state="translated">BQuarterEnd.apply()</target>
        </trans-unit>
        <trans-unit id="c642bdc5749f8b1de6a52573d5949fe410fbcf0f" translate="yes" xml:space="preserve">
          <source>BQuarterEnd.apply_index()</source>
          <target state="translated">BQuarterEnd.apply_index()</target>
        </trans-unit>
        <trans-unit id="1bc9be695a13e6d6d9e0c4f27054b33a2c04e54a" translate="yes" xml:space="preserve">
          <source>BQuarterEnd.base</source>
          <target state="translated">BQuarterEnd.base</target>
        </trans-unit>
        <trans-unit id="f79d238f6b96a962ad40b42d3d1e9f07ff633611" translate="yes" xml:space="preserve">
          <source>BQuarterEnd.copy()</source>
          <target state="translated">BQuarterEnd.copy()</target>
        </trans-unit>
        <trans-unit id="244da55f87b78e30b4932eb4742db8a3d04740fc" translate="yes" xml:space="preserve">
          <source>BQuarterEnd.freqstr</source>
          <target state="translated">BQuarterEnd.freqstr</target>
        </trans-unit>
        <trans-unit id="913536e49ed4a9415ed76a805a49119117a20a1c" translate="yes" xml:space="preserve">
          <source>BQuarterEnd.isAnchored()</source>
          <target state="translated">BQuarterEnd.isAnchored()</target>
        </trans-unit>
        <trans-unit id="6939bd82f0f3cfb62f4988da4e426e5691d7e3f3" translate="yes" xml:space="preserve">
          <source>BQuarterEnd.kwds</source>
          <target state="translated">BQuarterEnd.kwds</target>
        </trans-unit>
        <trans-unit id="4b507a844b9ebef6fdf53eae5d1342e8649bf071" translate="yes" xml:space="preserve">
          <source>BQuarterEnd.name</source>
          <target state="translated">BQuarterEnd.name</target>
        </trans-unit>
        <trans-unit id="46b29831cc18204f3a3ade3da7d143eff22fa80d" translate="yes" xml:space="preserve">
          <source>BQuarterEnd.nanos</source>
          <target state="translated">BQuarterEnd.nanos</target>
        </trans-unit>
        <trans-unit id="ce503ae4e5774b2e18f6993579c3cadc2b725992" translate="yes" xml:space="preserve">
          <source>BQuarterEnd.normalize</source>
          <target state="translated">BQuarterEnd.normalize</target>
        </trans-unit>
        <trans-unit id="756e2e9da7ae8c8417ecaaa6b8a6bc555675d615" translate="yes" xml:space="preserve">
          <source>BQuarterEnd.onOffset()</source>
          <target state="translated">BQuarterEnd.onOffset()</target>
        </trans-unit>
        <trans-unit id="da564479ebcb31505d0126e5208e399e7a01fb71" translate="yes" xml:space="preserve">
          <source>BQuarterEnd.rollback()</source>
          <target state="translated">BQuarterEnd.rollback()</target>
        </trans-unit>
        <trans-unit id="effb0e5231cc8e88af18d9b014de363dc8080b7f" translate="yes" xml:space="preserve">
          <source>BQuarterEnd.rollforward()</source>
          <target state="translated">BQuarterEnd.rollforward()</target>
        </trans-unit>
        <trans-unit id="befeb1a429c920aef4ee786e08148eaa49161150" translate="yes" xml:space="preserve">
          <source>BQuarterEnd.rule_code</source>
          <target state="translated">BQuarterEnd.rule_code</target>
        </trans-unit>
        <trans-unit id="df0f11b1cbf0c94d3ead344a7108999434fbd8d6" translate="yes" xml:space="preserve">
          <source>BUG: Bug fix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed372d25ab983682c8e0930d23f3a73aacc97b35" translate="yes" xml:space="preserve">
          <source>BY-group</source>
          <target state="translated">BY-group</target>
        </trans-unit>
        <trans-unit id="9e238df64af90be60a1e9693d4b685f6adc2e5d3" translate="yes" xml:space="preserve">
          <source>BYearBegin</source>
          <target state="translated">BYearBegin</target>
        </trans-unit>
        <trans-unit id="3737eb090c31a022aef3b162fb65dc9146f66101" translate="yes" xml:space="preserve">
          <source>BYearBegin.apply()</source>
          <target state="translated">BYearBegin.apply()</target>
        </trans-unit>
        <trans-unit id="056d88a7f937cfa52ea9912267c76c32b05b5bab" translate="yes" xml:space="preserve">
          <source>BYearBegin.apply_index()</source>
          <target state="translated">BYearBegin.apply_index()</target>
        </trans-unit>
        <trans-unit id="8eca5628265a22d597e7175bc09a7374fb9e8962" translate="yes" xml:space="preserve">
          <source>BYearBegin.base</source>
          <target state="translated">BYearBegin.base</target>
        </trans-unit>
        <trans-unit id="e5d3ca32286baaa144a588892569a5882c4275ce" translate="yes" xml:space="preserve">
          <source>BYearBegin.copy()</source>
          <target state="translated">BYearBegin.copy()</target>
        </trans-unit>
        <trans-unit id="7c88fbf4ee1dd1bf09a7fc8bb2be41a4a0b28d74" translate="yes" xml:space="preserve">
          <source>BYearBegin.freqstr</source>
          <target state="translated">BYearBegin.freqstr</target>
        </trans-unit>
        <trans-unit id="8592bbbd135037082e34811ba6cb7b2eb80907e8" translate="yes" xml:space="preserve">
          <source>BYearBegin.isAnchored()</source>
          <target state="translated">BYearBegin.isAnchored()</target>
        </trans-unit>
        <trans-unit id="bcc29f0796faa0db5cb2889cdda532ed24543f0b" translate="yes" xml:space="preserve">
          <source>BYearBegin.kwds</source>
          <target state="translated">BYearBegin.kwds</target>
        </trans-unit>
        <trans-unit id="f18c10b0b65b62a24f3da35788798f1373c2f13e" translate="yes" xml:space="preserve">
          <source>BYearBegin.name</source>
          <target state="translated">BYearBegin.name</target>
        </trans-unit>
        <trans-unit id="b4008b8291953497057e362b2840686211d18b86" translate="yes" xml:space="preserve">
          <source>BYearBegin.nanos</source>
          <target state="translated">BYearBegin.nanos</target>
        </trans-unit>
        <trans-unit id="912edcb593d2d242c1e24036fb45a73b2340ac95" translate="yes" xml:space="preserve">
          <source>BYearBegin.normalize</source>
          <target state="translated">BYearBegin.normalize</target>
        </trans-unit>
        <trans-unit id="0561f36ce44a730da0ea82523eb85d8b43907660" translate="yes" xml:space="preserve">
          <source>BYearBegin.onOffset()</source>
          <target state="translated">BYearBegin.onOffset()</target>
        </trans-unit>
        <trans-unit id="5c7a415cc7bc462f27f221d91ea83b15aba21b3a" translate="yes" xml:space="preserve">
          <source>BYearBegin.rollback()</source>
          <target state="translated">BYearBegin.rollback()</target>
        </trans-unit>
        <trans-unit id="2b265f3a6898fccc0f486221bf0f80f2d00ff185" translate="yes" xml:space="preserve">
          <source>BYearBegin.rollforward()</source>
          <target state="translated">BYearBegin.rollforward()</target>
        </trans-unit>
        <trans-unit id="edd272205139e71992f6533b051a96dcd18604ae" translate="yes" xml:space="preserve">
          <source>BYearBegin.rule_code</source>
          <target state="translated">BYearBegin.rule_code</target>
        </trans-unit>
        <trans-unit id="0fee7b2de6fbfdf8d1fbf0a9827f8fd9de59e54a" translate="yes" xml:space="preserve">
          <source>BYearEnd</source>
          <target state="translated">BYearEnd</target>
        </trans-unit>
        <trans-unit id="f5b961e54d023617cb494b1e17dca4cf1b7c0d91" translate="yes" xml:space="preserve">
          <source>BYearEnd.apply()</source>
          <target state="translated">BYearEnd.apply()</target>
        </trans-unit>
        <trans-unit id="55e78526b23b55ce0f39ed6200ac4191490a3c92" translate="yes" xml:space="preserve">
          <source>BYearEnd.apply_index()</source>
          <target state="translated">BYearEnd.apply_index()</target>
        </trans-unit>
        <trans-unit id="54a12a12395792a986e490963229ed101d73564b" translate="yes" xml:space="preserve">
          <source>BYearEnd.base</source>
          <target state="translated">BYearEnd.base</target>
        </trans-unit>
        <trans-unit id="5673f38572ad306cf9cbd99e9c350987a4cb92c8" translate="yes" xml:space="preserve">
          <source>BYearEnd.copy()</source>
          <target state="translated">BYearEnd.copy()</target>
        </trans-unit>
        <trans-unit id="ecb8a3037ad6fafe19674392d990d26771ef3de5" translate="yes" xml:space="preserve">
          <source>BYearEnd.freqstr</source>
          <target state="translated">BYearEnd.freqstr</target>
        </trans-unit>
        <trans-unit id="3bff57e5980b415bc3e5fb02d67eaba48e39514a" translate="yes" xml:space="preserve">
          <source>BYearEnd.isAnchored()</source>
          <target state="translated">BYearEnd.isAnchored()</target>
        </trans-unit>
        <trans-unit id="0a8d7606a7d0240772827bfed1e64ced3f6d65ce" translate="yes" xml:space="preserve">
          <source>BYearEnd.kwds</source>
          <target state="translated">BYearEnd.kwds</target>
        </trans-unit>
        <trans-unit id="11ea2ac2ad5ae2896ab1d96734d876ba39c538e2" translate="yes" xml:space="preserve">
          <source>BYearEnd.name</source>
          <target state="translated">BYearEnd.name</target>
        </trans-unit>
        <trans-unit id="9f3bf5cc1560ee6ca82e6b24ab464e8c406c5f93" translate="yes" xml:space="preserve">
          <source>BYearEnd.nanos</source>
          <target state="translated">BYearEnd.nanos</target>
        </trans-unit>
        <trans-unit id="b01052f37fc5cb55e358f49ea906b98c0ffb3425" translate="yes" xml:space="preserve">
          <source>BYearEnd.normalize</source>
          <target state="translated">BYearEnd.normalize</target>
        </trans-unit>
        <trans-unit id="48236773e7957e81dc0e4ea078d79e27a8b750df" translate="yes" xml:space="preserve">
          <source>BYearEnd.onOffset()</source>
          <target state="translated">BYearEnd.onOffset()</target>
        </trans-unit>
        <trans-unit id="2deea8490be7443539a3e38a853b53c4dd7d062b" translate="yes" xml:space="preserve">
          <source>BYearEnd.rollback()</source>
          <target state="translated">BYearEnd.rollback()</target>
        </trans-unit>
        <trans-unit id="170da2f03679a6c64fda69c019a315934dc11f9e" translate="yes" xml:space="preserve">
          <source>BYearEnd.rollforward()</source>
          <target state="translated">BYearEnd.rollforward()</target>
        </trans-unit>
        <trans-unit id="c77eeb234cb6c64c47b69db5e41cd1adbee744cb" translate="yes" xml:space="preserve">
          <source>BYearEnd.rule_code</source>
          <target state="translated">BYearEnd.rule_code</target>
        </trans-unit>
        <trans-unit id="23cbbf32aabe4a968bfc7e9f60a162c44d971426" translate="yes" xml:space="preserve">
          <source>Back in an interactive IPython session:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5626aa3cb28fff5db5e5281b96c5b8d6470607d" translate="yes" xml:space="preserve">
          <source>Backward fill NaN values in the resampled data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76b814d2b638f1f90a41d9bf5e81f2ea628507a0" translate="yes" xml:space="preserve">
          <source>Backward fill the new missing values in the resampled data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d1b09014608f534feed5fe656d7bcd70b970daf" translate="yes" xml:space="preserve">
          <source>Backward fill the values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fd78925dba59eef91afba0cdabe923520e5ee69" translate="yes" xml:space="preserve">
          <source>Backwards compatibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8ba7250a3312316dd4dde33e404a17ad97e4564" translate="yes" xml:space="preserve">
          <source>Bar charts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60722378d992b90df959c8477ac087deff7fe316" translate="yes" xml:space="preserve">
          <source>Bar plots</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d70189b4eaa35d4e593674bb9281eae7072ffc37" translate="yes" xml:space="preserve">
          <source>Base R</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972abc36d9bf845148d943cfd45af43b6a74318e" translate="yes" xml:space="preserve">
          <source>Based on the review you get on your pull request, you will probably need to make some changes to the code. In that case, you can make them in your branch, add a new commit to that branch, push it to GitHub, and the pull request will be automatically updated. Pushing them to GitHub again is done by:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa2c96dacf00c451ef465f6115a45a20bccf1256" translate="yes" xml:space="preserve">
          <source>Basic</source>
          <target state="translated">Basic</target>
        </trans-unit>
        <trans-unit id="20b19d89ef0aed3f2d4f1afed1d3f801c6b85aa5" translate="yes" xml:space="preserve">
          <source>Basic example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d79655c1e33cfbd6a7943e513b25ae898a2fd8e5" translate="yes" xml:space="preserve">
          <source>Basic plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37e5fe27e7d9a3c22821ebd2278e8a145488792c" translate="yes" xml:space="preserve">
          <source>Basic plotting for DataFrame objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f5e0ff768136b7c8c5659c035724307ecd5cb4e" translate="yes" xml:space="preserve">
          <source>Basic plotting for Series objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64860fe1e7c29840fd05e60c7b76207877ef71fd" translate="yes" xml:space="preserve">
          <source>Basic plotting: &lt;code&gt;plot&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fcebeefad3cdbbf8733aa928160dec7dc90c1a1" translate="yes" xml:space="preserve">
          <source>Basics</source>
          <target state="translated">Basics</target>
        </trans-unit>
        <trans-unit id="47705b59eb35418875a7da72261d664a2f0aca5b" translate="yes" xml:space="preserve">
          <source>Be aware that assigning to &lt;code&gt;categories&lt;/code&gt; is a inplace operation, while all methods return new categorical data per default (but can be called with &lt;code&gt;inplace=True&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="609055a6070911660e1dd562284d9588085eec44" translate="yes" xml:space="preserve">
          <source>Be careful with DST changes. When there is sequential data, pandas can infer the DST time:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c11270c924855e413440f8e3b4609087308179b" translate="yes" xml:space="preserve">
          <source>Be careful with DST changes. When there is sequential data, pandas can infer the DST time: &amp;gt;&amp;gt;&amp;gt; s = pd.to_datetime(pd.Series([&amp;lsquo;2018-10-28 01:30:00&amp;rsquo;, &amp;hellip; &amp;lsquo;2018-10-28 02:00:00&amp;rsquo;, &amp;hellip; &amp;lsquo;2018-10-28 02:30:00&amp;rsquo;, &amp;hellip; &amp;lsquo;2018-10-28 02:00:00&amp;rsquo;, &amp;hellip; &amp;lsquo;2018-10-28 02:30:00&amp;rsquo;, &amp;hellip; &amp;lsquo;2018-10-28 03:00:00&amp;rsquo;, &amp;hellip; &amp;lsquo;2018-10-28 03:30:00&amp;rsquo;])) &amp;gt;&amp;gt;&amp;gt; s.dt.tz_localize(&amp;lsquo;CET&amp;rsquo;, ambiguous=&amp;rsquo;infer&amp;rsquo;) 0 2018-10-28 01:30:00+02:00 1 2018-10-28 02:00:00+02:00 2 2018-10-28 02:30:00+02:00 3 2018-10-28 02:00:00+01:00 4 2018-10-28 02:30:00+01:00 5 2018-10-28 03:00:00+01:00 6 2018-10-28 03:30:00+01:00 dtype: datetime64[ns, CET]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a19905d915137043f272861c345d80f174c78e3" translate="yes" xml:space="preserve">
          <source>BeautifulSoup4</source>
          <target state="translated">BeautifulSoup4</target>
        </trans-unit>
        <trans-unit id="20c07225f14069f78c80dd8e6e480f98340b6213" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;iterrows&lt;/code&gt; returns a Series for each row, it does &lt;strong&gt;not&lt;/strong&gt; preserve dtypes across the rows (dtypes are preserved across columns for DataFrames). For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4b8d32d305ca1701d9bf393afa8b228de7a11fb" translate="yes" xml:space="preserve">
          <source>Because ExtensionArrays are 1D-only, this is a no-op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da34c08f88e8bb6d6dba825fee707cc3cc84528b" translate="yes" xml:space="preserve">
          <source>Because omitting the &lt;code&gt;dtype&lt;/code&gt; passes the data through to NumPy, a mixture of valid integers and NA will return a floating-point NumPy array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8529ce360e280e7510f8bfd6a73f0bc83ec8ae3" translate="yes" xml:space="preserve">
          <source>Because the index is a DatetimeIndex containing only dates, we can specify &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; as strings. They will be coerced to Timestamps before truncation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b01b17515dc52f74847508a603ccaec2dfadf041" translate="yes" xml:space="preserve">
          <source>Before diving into all of the details of &lt;code&gt;concat&lt;/code&gt; and what it can do, here is a simple example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e1481b0cb125c9de57525bb947c3a764abdd36e" translate="yes" xml:space="preserve">
          <source>Before using this function you should read the &lt;a href=&quot;../../user_guide/io#io-html-gotchas&quot;&gt;gotchas about the HTML parsing libraries&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db4c65748b6944dfc89514f39e7e98e06a479d32" translate="yes" xml:space="preserve">
          <source>Behavior when the destination table exists. Value can be one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6c851aee5fe7ddc9fd242b1d2822afd8878ea8a" translate="yes" xml:space="preserve">
          <source>Below example shows how to define &lt;code&gt;SubclassedSeries&lt;/code&gt; and &lt;code&gt;SubclassedDataFrame&lt;/code&gt; overriding constructor properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc49f7d0108cf1fbe93126c806a7158f864eb3d6" translate="yes" xml:space="preserve">
          <source>Below is an example to define two original properties, &amp;ldquo;internal_cache&amp;rdquo; as a temporary property and &amp;ldquo;added_property&amp;rdquo; as a normal property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce35bc7834efceacada59a786825d7601c4db1b9" translate="yes" xml:space="preserve">
          <source>Bin values into discrete Intervals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc72aee41d01d45074eb0aa2e60d41ee3b83f12" translate="yes" xml:space="preserve">
          <source>Bin values into discrete intervals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb3efbb2538732c7feb15bf3f60103e13f5819df" translate="yes" xml:space="preserve">
          <source>Bin values into equal-sized Intervals based on rank or sample quantiles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3163bc413c6b649c8e32b9e7f1fb4a061ece9765" translate="yes" xml:space="preserve">
          <source>Binary operator functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cc1259e21c7e613999e790394c5c675e22538ae" translate="yes" xml:space="preserve">
          <source>Binary search is used to find the required insertion points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bde31cfca8ba562bc619cff686e2f052166fa00" translate="yes" xml:space="preserve">
          <source>Bins can be useful for going from a continuous variable to a categorical variable; instead of counting unique apparitions of values, divide the index in the specified number of half-open bins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba6f603187f9f3e8876cd6b02ae3fca1ecc04c02" translate="yes" xml:space="preserve">
          <source>Blank cells include &lt;code&gt;blank&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ff440de8d23dfe665747a8cf3c9d62a3d1cf5ab" translate="yes" xml:space="preserve">
          <source>Blaze</source>
          <target state="translated">Blaze</target>
        </trans-unit>
        <trans-unit id="f06b7ff8dcee65d80f8bbc09f77519581c47c993" translate="yes" xml:space="preserve">
          <source>Blaze provides a standard API for doing computations with various in-memory and on-disk backends: NumPy, Pandas, SQLAlchemy, MongoDB, PyTables, PySpark.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="287774ec74cb6ddd4c419e7e15e9549f8e939989" translate="yes" xml:space="preserve">
          <source>Bokeh</source>
          <target state="translated">Bokeh</target>
        </trans-unit>
        <trans-unit id="80be675605bee4cb1ede9f567737e75867600672" translate="yes" xml:space="preserve">
          <source>Bokeh is a Python interactive visualization library for large datasets that natively uses the latest web technologies. Its goal is to provide elegant, concise construction of novel graphics in the style of Protovis/D3, while delivering high-performance interactivity over large data to thin clients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dc421fcf453e80e2d84d33be1e5cac7ba51a33b" translate="yes" xml:space="preserve">
          <source>Boolean array positionally indicating where an overlap occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="022b0ef129359bf4caefd05760bd350781ea6b2d" translate="yes" xml:space="preserve">
          <source>Boolean array to indicate which entries are not NA.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68f3f11169411d53479639d67be61b5695cbb223" translate="yes" xml:space="preserve">
          <source>Boolean expressions consisting of only scalar values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3a6c6f975fa74c13e061d4b56deac14c441f61" translate="yes" xml:space="preserve">
          <source>Boolean indexing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd9fff177f12842df4a793f24f32ba72815be25c" translate="yes" xml:space="preserve">
          <source>Boolean indicating if the IntervalIndex has overlapping intervals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63f993a6d07b9658cc8fb2e02056076e92256399" translate="yes" xml:space="preserve">
          <source>Boolean indicator if the date belongs to a leap year.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d3bf18ce8c74ccadc928fc2d17fa77a03e0d0f7" translate="yes" xml:space="preserve">
          <source>Boolean inverse of isna.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8638002de3c20d4f7f02ef7937511690e4972eaf" translate="yes" xml:space="preserve">
          <source>Boolean inverse of notna.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f1251288c90060da992539978775155b522ef0" translate="yes" xml:space="preserve">
          <source>Boolean inverse of pandas.isna.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c16ad7d9b91e2596bbc6b8ad524438b9b4c3961" translate="yes" xml:space="preserve">
          <source>Boolean inverse of pandas.notna.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e990b4649c2bc674f3ef76c7ea016d66a37722" translate="yes" xml:space="preserve">
          <source>Boolean list with the same length as the row axis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54f3fd197821f35d7cc4ec8c59ac98fe9d5c879" translate="yes" xml:space="preserve">
          <source>Boolean operations, e.g., &lt;code&gt;df &amp;lt; df2 and df3 &amp;lt; df4 or not df_bool&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d88eb78a78682585d0f6340eef365f08c7cda023" translate="yes" xml:space="preserve">
          <source>Boolean same-sized DataFrame showing places of NA elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f76f02336bf20b6f10d78001acc5acd0c87c9a72" translate="yes" xml:space="preserve">
          <source>Boolean: &lt;code&gt;'bool'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e8612ea969d1680a44a840e85c8e565c3ef8c43" translate="yes" xml:space="preserve">
          <source>Booleans are valid because they are int subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5281b317ab6c3d15d836edf8a074eccb13a73c2b" translate="yes" xml:space="preserve">
          <source>Booleans indicating if dates belong to a leap year.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="606e5cb4e58c7fa936ef9764e276cb734d04557e" translate="yes" xml:space="preserve">
          <source>Bootstrap Plot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a6577311d3635f544049b00b0211bbe161a25cb" translate="yes" xml:space="preserve">
          <source>Bootstrap plot on mean, median and mid-range statistics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12cfcb28f21f551a1d596a8c9a1fead955dc64ca" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;Styler.apply&lt;/code&gt;, and &lt;code&gt;Styler.applymap&lt;/code&gt; accept a &lt;code&gt;subset&lt;/code&gt; keyword. This allows you to apply styles to specific rows or columns, without having to code that logic into your &lt;code&gt;style&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="667f44ad700147f40dc1bb44b2965c5c43206240" translate="yes" xml:space="preserve">
          <source>Both DataFrames must be sorted by the key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66bb145eb5891dc142843d18eaca9d3ef1f32bb9" translate="yes" xml:space="preserve">
          <source>Both NA and null values are automatically excluded from the calculation. (See the note below about bias from missing values.) A threshold can be set for the minimum number of observations for each value created. Comparisons with observations below this threshold will be returned as &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb68bff5a80fa34bfffc6e32034333c4baa9edc6" translate="yes" xml:space="preserve">
          <source>Both Neg and Pos</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5564daf8202c5e95c5a63616639ee79fba95d94" translate="yes" xml:space="preserve">
          <source>Both of those methods take a function (and some other keyword arguments) and applies your function to the DataFrame in a certain way. &lt;code&gt;Styler.applymap&lt;/code&gt; works through the DataFrame elementwise. &lt;code&gt;Styler.apply&lt;/code&gt; passes each column or row into your DataFrame one-at-a-time or the entire table at once, depending on the &lt;code&gt;axis&lt;/code&gt; keyword argument. For columnwise use &lt;code&gt;axis=0&lt;/code&gt;, rowwise use &lt;code&gt;axis=1&lt;/code&gt;, and for the entire table at once use &lt;code&gt;axis=None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b2296cefe9f0809fb53daac12fd608a8f64778f" translate="yes" xml:space="preserve">
          <source>Boundary values are included by default:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb04674c1bc1045c67626e52198999ae63da9e0" translate="yes" xml:space="preserve">
          <source>Boxplots can be created for every column in the dataframe by &lt;code&gt;df.boxplot()&lt;/code&gt; or indicating the columns to be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c8ffe321aef10292008ce1489645fe86a84dc1e" translate="yes" xml:space="preserve">
          <source>Boxplots of variables distributions grouped by the values of a third variable can be created using the option &lt;code&gt;by&lt;/code&gt;. For instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29bb000243f005695909b0543b224a3db4e225d3" translate="yes" xml:space="preserve">
          <source>Brief primer on merge methods (relational algebra)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52308f11211dd1ac661d43cfae2dc5cd35a8edc8" translate="yes" xml:space="preserve">
          <source>Broadcast across a level, matching Index values on the passed MultiIndex level</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
