<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="">
    <body>
      <group id="">
        <trans-unit id="686299f7711a328af7f7ede481ecd878f135b9f6" translate="yes" xml:space="preserve">
          <source>Generally speaking, &lt;code&gt;v-if&lt;/code&gt; has higher toggle costs while &lt;code&gt;v-show&lt;/code&gt; has higher initial render costs. So prefer &lt;code&gt;v-show&lt;/code&gt; if you need to toggle something very often, and prefer &lt;code&gt;v-if&lt;/code&gt; if the condition is unlikely to change at runtime.</source>
          <target state="translated">一般に、 &lt;code&gt;v-if&lt;/code&gt; のトグルコストは高く、 &lt;code&gt;v-show&lt;/code&gt; の初期レンダリングコストは高くなります。 したがって、頻繁に何かを切り替える必要がある場合は &lt;code&gt;v-show&lt;/code&gt; を選択し、実行時に条件が変更される可能性が低い場合は &lt;code&gt;v-if&lt;/code&gt; を選択します。</target>
        </trans-unit>
        <trans-unit id="54c5f98c2534a5664e54bdf67174809b2a27c8a3" translate="yes" xml:space="preserve">
          <source>Get Support</source>
          <target state="translated">支持を得ます</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">入門</target>
        </trans-unit>
        <trans-unit id="4687f4eea959b8d3a7678579930ba86b60298a4b" translate="yes" xml:space="preserve">
          <source>Global API</source>
          <target state="translated">グローバルAPI</target>
        </trans-unit>
        <trans-unit id="d99de9060d9d291cf15a1d729547287918e216dc" translate="yes" xml:space="preserve">
          <source>Global Config</source>
          <target state="translated">全体設定</target>
        </trans-unit>
        <trans-unit id="a87e1f8386cdfab8951563f9287ce245995f5751" translate="yes" xml:space="preserve">
          <source>Global Mixin</source>
          <target state="translated">グローバルミックスイン</target>
        </trans-unit>
        <trans-unit id="12acfdfcb7281091faacdbe76162537707d677a4" translate="yes" xml:space="preserve">
          <source>Global Registration</source>
          <target state="translated">グローバル登録</target>
        </trans-unit>
        <trans-unit id="d23476cf27dc98d9e3173cbdb68ad4566d7bbe61" translate="yes" xml:space="preserve">
          <source>Global registration often isn&amp;rsquo;t ideal. For example, if you&amp;rsquo;re using a build system like Webpack, globally registering all components means that even if you stop using a component, it could still be included in your final build. This unnecessarily increases the amount of JavaScript your users have to download.</source>
          <target state="translated">多くの場合、グローバル登録は理想的ではありません。 たとえば、Webpackなどのビルドシステムを使用している場合、コンポーネントの使用を停止しても、すべてのコンポーネントをグローバルに登録すると、最終的なビルドが行われる場合があります。 これにより、ユーザーがダウンロードする必要のあるJavaScriptの量が不必要に増加します。</target>
        </trans-unit>
        <trans-unit id="e2b51a4acf3ac2ad46709058f4a65e88a724bd55" translate="yes" xml:space="preserve">
          <source>Global state management</source>
          <target state="translated">グローバルな状態管理</target>
        </trans-unit>
        <trans-unit id="d2cdbb9287a2eee1e29278ad1a52afa18af50490" translate="yes" xml:space="preserve">
          <source>Globally registered components can be used in the template of any root Vue instance (&lt;code&gt;new Vue&lt;/code&gt;) created afterwards &amp;ndash; and even inside all subcomponents of that Vue instance&amp;rsquo;s component tree.</source>
          <target state="translated">グローバルに登録されたコンポーネントは、後で作成されるルートVueインスタンス（ &lt;code&gt;new Vue&lt;/code&gt; ）のテンプレートで使用できます。 さらに、そのVueインスタンスのコンポーネントツリーのすべてのサブコンポーネントで使用できます。</target>
        </trans-unit>
        <trans-unit id="9d53a8dc9787d0f1938039b6b2df16c89e2967b1" translate="yes" xml:space="preserve">
          <source>Go ahead and enter &lt;code&gt;app3.seen = false&lt;/code&gt; in the console. You should see the message disappear.</source>
          <target state="translated">コンソールに &lt;code&gt;app3.seen = false&lt;/code&gt; と入力します。 メッセージが消えます。</target>
        </trans-unit>
        <trans-unit id="61dedcf053ff33692baacbf7789c5d7195d9acbe" translate="yes" xml:space="preserve">
          <source>Good</source>
          <target state="translated">Good</target>
        </trans-unit>
        <trans-unit id="bf073fae640ded81eeb7a4cee70faff4a623c16c" translate="yes" xml:space="preserve">
          <source>Guide</source>
          <target state="translated">Guide</target>
        </trans-unit>
        <trans-unit id="613dffa8c694c4b79227626375484864e1cbb5bc" translate="yes" xml:space="preserve">
          <source>HTML &amp;amp; CSS</source>
          <target state="translated">HTMLとCSS</target>
        </trans-unit>
        <trans-unit id="ecb5ae374f41987062d1edb5a439c141fbcfee47" translate="yes" xml:space="preserve">
          <source>HTML Interpolation &lt;sup&gt;removed&lt;/sup&gt;</source>
          <target state="translated">HTML補間が&lt;sup&gt;削除&lt;/sup&gt;さ&lt;sup&gt;れました&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="61152bedc285b45e3443132c85b9e9eab87b1c71" translate="yes" xml:space="preserve">
          <source>HTML attribute names are case-insensitive, so browsers will interpret any uppercase characters as lowercase. That means when you&amp;rsquo;re using in-DOM templates, camelCased prop names need to use their kebab-cased (hyphen-delimited) equivalents:</source>
          <target state="translated">HTML属性名では大文字と小文字が区別されないため、ブラウザは大文字を小文字として解釈します。 これは、DOMでテンプレートを使用している場合、キャメルケースのプロップ名は、同等のケバブケース（ハイフン区切り）を使用する必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="206317f92c61c3721e7b0ef393e74b50f2adc608" translate="yes" xml:space="preserve">
          <source>HTML elements,</source>
          <target state="translated">HTML要素、</target>
        </trans-unit>
        <trans-unit id="b7d20a95e49462d14a4c08f7dda3686750b36c96" translate="yes" xml:space="preserve">
          <source>HTML interpolation has been &lt;a href=&quot;#HTML-Interpolation-removed&quot;&gt;removed in favor of &lt;code&gt;v-html&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">HTML補間は&lt;a href=&quot;#HTML-Interpolation-removed&quot;&gt;削除&lt;/a&gt;され、 &lt;code&gt;v-html&lt;/code&gt; が採用されました。</target>
        </trans-unit>
        <trans-unit id="0b1c56685d95ab775546bda4c6e1ef23eea39b81" translate="yes" xml:space="preserve">
          <source>HTML interpolations (&lt;code&gt;{{{ foo }}}&lt;/code&gt;) have been removed in favor of the &lt;a href=&quot;../api/index#v-html&quot;&gt;&lt;code&gt;v-html&lt;/code&gt; directive&lt;/a&gt;.</source>
          <target state="translated">HTML補間（ &lt;code&gt;{{{ foo }}}&lt;/code&gt; ）が削除され、 &lt;a href=&quot;../api/index#v-html&quot;&gt; &lt;code&gt;v-html&lt;/code&gt; ディレクティブ&lt;/a&gt;が採用されました。</target>
        </trans-unit>
        <trans-unit id="ec5f7d68ba95b6c2f0128818861a5fb3a7ce41b3" translate="yes" xml:space="preserve">
          <source>HTML&amp;rsquo;s built-in input types won&amp;rsquo;t always meet your needs. Fortunately, Vue components allow you to build reusable inputs with completely customized behavior. These inputs even work with &lt;code&gt;v-model&lt;/code&gt;! To learn more, read about &lt;a href=&quot;components#Using-v-model-on-Components&quot;&gt;custom inputs&lt;/a&gt; in the Components guide.</source>
          <target state="translated">HTMLの組み込み入力タイプは、必ずしもニーズを満たしているとは限りません。 幸いなことに、Vueコンポーネントを使用すると、完全にカスタマイズされた動作で再利用可能な入力を構築できます。 これらの入力は &lt;code&gt;v-model&lt;/code&gt; でも機能します！ 詳細については、コンポーネントガイドの&lt;a href=&quot;components#Using-v-model-on-Components&quot;&gt;カスタム入力&lt;/a&gt;についてお読みください。</target>
        </trans-unit>
        <trans-unit id="69b83e92529f5151314d046d862c4a9c77d93516" translate="yes" xml:space="preserve">
          <source>HTML-based templates make it much easier to progressively migrate existing applications to take advantage of Vue&amp;rsquo;s reactivity features.</source>
          <target state="translated">HTMLベースのテンプレートを使用すると、既存のアプリケーションを段階的に移行し、Vueの応答性機能を活用できます。</target>
        </trans-unit>
        <trans-unit id="5e6fab8d8bdb45dbc0c724b264884e741a1423d5" translate="yes" xml:space="preserve">
          <source>Handling Edge Cases</source>
          <target state="translated">エッジケースの取り扱い</target>
        </trans-unit>
        <trans-unit id="0c27db799f42037e36231e8871e3549a290cef26" translate="yes" xml:space="preserve">
          <source>Handling Loading State</source>
          <target state="translated">負荷状態の処理</target>
        </trans-unit>
        <trans-unit id="f70e7e4e8994ebaac734eaf505f7cb87f5015b0f" translate="yes" xml:space="preserve">
          <source>Handling User Input</source>
          <target state="translated">ユーザー入力の処理</target>
        </trans-unit>
        <trans-unit id="553c9fd444b729d939071ffd415fb951213f90a4" translate="yes" xml:space="preserve">
          <source>Hashbangs are no longer required for Google to crawl a URL, so they are no longer the default (or even an option) for the hash strategy.</source>
          <target state="translated">ハッシュ禁止は、GoogleがURLをクロールする必要がなくなり、デフォルト（またはオプション）のハッシュ戦略ではなくなりました。</target>
        </trans-unit>
        <trans-unit id="a8d68b23680238f325efc34072a89db096cd1404" translate="yes" xml:space="preserve">
          <source>Having this validator extracted out, we&amp;rsquo;ve also more comfortably built it up into a more robust solution. The state quirks have been eliminated and it&amp;rsquo;s actually impossible for users to enter anything wrong, similar to what the browser&amp;rsquo;s native number input tries to do.</source>
          <target state="translated">このバリデータを抽出することで、より堅牢なソリューションをより快適に構築できました。 この状態の習慣は解消されており、ユーザーが間違った状態を入力することは実際には不可能です。 これは、ブラウザのネイティブの数値入力試行に似ています。</target>
        </trans-unit>
        <trans-unit id="5d3e638fd34dc7467faa0ba823b8497588b5815b" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;attributeName&lt;/code&gt; will be dynamically evaluated as a JavaScript expression, and its evaluated value will be used as the final value for the argument. For example, if your Vue instance has a data property, &lt;code&gt;attributeName&lt;/code&gt;, whose value is &lt;code&gt;&quot;href&quot;&lt;/code&gt;, then this binding will be equivalent to &lt;code&gt;v-bind:href&lt;/code&gt;.</source>
          <target state="translated">ここで、 &lt;code&gt;attributeName&lt;/code&gt; はJavaScript式として動的に評価され、その評価値は引数の最終値として使用されます。 たとえば、Vueインスタンスに値 &lt;code&gt;&quot;href&quot;&lt;/code&gt; のデータプロパティ &lt;code&gt;attributeName&lt;/code&gt; がある場合、このバインディングは &lt;code&gt;v-bind:href&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="89a97b67c98ddcf2e842f6272379190e542a3a62" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;filterA&lt;/code&gt; is defined as a function taking three arguments. The value of &lt;code&gt;message&lt;/code&gt; will be passed into the first argument. The plain string &lt;code&gt;'arg1'&lt;/code&gt; will be passed into the &lt;code&gt;filterA&lt;/code&gt; as its second argument, and the value of expression &lt;code&gt;arg2&lt;/code&gt; will be evaluated and passed in as the third argument.</source>
          <target state="translated">ここで、 &lt;code&gt;filterA&lt;/code&gt; は3つの引数を取る関数として定義されています。 &lt;code&gt;message&lt;/code&gt; の値は最初の引数に渡されます。 プレーンストリング &lt;code&gt;'arg1'&lt;/code&gt; は2番目の引数として &lt;code&gt;filterA&lt;/code&gt; に渡され、式 &lt;code&gt;arg2&lt;/code&gt; の値は3番目の引数として評価されて渡されます。</target>
        </trans-unit>
        <trans-unit id="b533c1b3a997459bdeab6c6103d2b8341430c012" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;href&lt;/code&gt; is the argument, which tells the &lt;code&gt;v-bind&lt;/code&gt; directive to bind the element&amp;rsquo;s &lt;code&gt;href&lt;/code&gt; attribute to the value of the expression &lt;code&gt;url&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;href&lt;/code&gt; は引数であり、 &lt;code&gt;v-bind&lt;/code&gt; ディレクティブに、要素の &lt;code&gt;href&lt;/code&gt; 属性を式 &lt;code&gt;url&lt;/code&gt; の値にバインドするよう指示します。</target>
        </trans-unit>
        <trans-unit id="e8a2ad49522f0c5140bd579d6e3f6cc63de82a9e" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;slot=&quot;default&quot;&lt;/code&gt; can be omitted as it is implied:</source>
          <target state="translated">ここで、 &lt;code&gt;slot=&quot;default&quot;&lt;/code&gt; は暗黙的に省略できます。</target>
        </trans-unit>
        <trans-unit id="a5a992eb5c40fb541d26012305484c0906879154" translate="yes" xml:space="preserve">
          <source>Here the argument is the event name to listen to. We will talk about event handling in more detail too.</source>
          <target state="translated">引数は、リッスンするイベントの名前です。 イベント処理についても詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="f407b88178ffc4e03f9f78c8af7c050fb1a05bb8" translate="yes" xml:space="preserve">
          <source>Here we are encountering something new. The &lt;code&gt;v-bind&lt;/code&gt; attribute you are seeing is called a &lt;strong&gt;directive&lt;/strong&gt;. Directives are prefixed with &lt;code&gt;v-&lt;/code&gt; to indicate that they are special attributes provided by Vue, and as you may have guessed, they apply special reactive behavior to the rendered DOM. Here, it is basically saying &amp;ldquo;keep this element&amp;rsquo;s &lt;code&gt;title&lt;/code&gt; attribute up-to-date with the &lt;code&gt;message&lt;/code&gt; property on the Vue instance.&amp;rdquo;</source>
          <target state="translated">ここで、私たちは何か新しいことに出会いました。 表示される &lt;code&gt;v-bind&lt;/code&gt; 属性は、 &lt;strong&gt;directives&lt;/strong&gt;と呼ばれます。 ディレクティブの前に &lt;code&gt;v-&lt;/code&gt; が付けられ、これがVueによって提供される特別な属性であることを示します。 ご想像のとおり、レンダリングされたDOMに特別なレスポンシブ動作を適用します。 ここでは基本的に、「この要素の &lt;code&gt;title&lt;/code&gt; 属性をVueインスタンスの &lt;code&gt;message&lt;/code&gt; プロパティで最新に保ちます」と言います。</target>
        </trans-unit>
        <trans-unit id="20439924cb310f6e6ebea9dce4e509745f1d1bb0" translate="yes" xml:space="preserve">
          <source>Here we have declared a computed property &lt;code&gt;reversedMessage&lt;/code&gt;. The function we provided will be used as the getter function for the property &lt;code&gt;vm.reversedMessage&lt;/code&gt;:</source>
          <target state="translated">ここで、計算されたプロパティ &lt;code&gt;reversedMessage&lt;/code&gt; を宣言しました。 提供された関数は、プロパティ &lt;code&gt;vm.reversedMessage&lt;/code&gt; の get関数として使用されます。</target>
        </trans-unit>
        <trans-unit id="41a58605aec4adfd7f18a1d980084fe022c01384" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a complete example of a simple todo list:</source>
          <target state="translated">簡単なTo Doリストの完全な例を次に示します。</target>
        </trans-unit>
        <trans-unit id="e6deaab1ac1757bb576b7c7fb31ce01f23836233" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of a &lt;code&gt;smart-list&lt;/code&gt; component that delegates to more specific components, depending on the props passed to it:</source>
          <target state="translated">以下は、渡されたプロパティに応じて、より具体的なコンポーネントに委任する &lt;code&gt;smart-list&lt;/code&gt; コンポーネントの例です。</target>
        </trans-unit>
        <trans-unit id="8edc36b060f6cabd0970dde81f8964d59b6e1225" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of a Vue component:</source>
          <target state="translated">Vueコンポーネントの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="b31be59658661ba4e66f41944f3554b7a0be5398" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of a file we&amp;rsquo;ll call &lt;code&gt;Hello.vue&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Hello.vue&lt;/code&gt; は、 Hello.vueを呼び出すファイルの例です。</target>
        </trans-unit>
        <trans-unit id="b33ffef562696923d8035d66d6b00e446f9c5cd6" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example using a template component:</source>
          <target state="translated">テンプレートコンポーネントを使用した例を次に示します。</target>
        </trans-unit>
        <trans-unit id="99ff339aed17c551cb54d5842ca9646f53c8ed64" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example with all of these modifiers used together:</source>
          <target state="translated">以下は、これらすべての修飾子を一緒に使用する例です。</target>
        </trans-unit>
        <trans-unit id="18a91a386128ffc554ca249fb0825499466cf9d3" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example, omitting prefixed CSS rules for the sake of brevity:</source>
          <target state="translated">簡単にするために、次の例ではプレフィックスのCSSルールを省略しています。</target>
        </trans-unit>
        <trans-unit id="79a379c34c53ce83d07e71356345ea69136a74d1" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example:</source>
          <target state="translated">例えば：</target>
        </trans-unit>
        <trans-unit id="f7ffc75a586e32509010b20213e0f4e623c0e848" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s that in action:</source>
          <target state="translated">実際の動作は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="9a829483e3b314613758a5a663c73e6905d5701b" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;slot-scope&lt;/code&gt; declares the received props object as the &lt;code&gt;slotProps&lt;/code&gt; variable, and makes it available inside the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; scope. You can name &lt;code&gt;slotProps&lt;/code&gt; anything you like similar to naming function arguments in JavaScript.</source>
          <target state="translated">ここで、 &lt;code&gt;slot-scope&lt;/code&gt; は受信したpropsオブジェクトを &lt;code&gt;slotProps&lt;/code&gt; 変数として宣言し、 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; スコープ内で使用可能にします。 JavaScriptの関数引数の命名と同様に、 &lt;code&gt;slotProps&lt;/code&gt; には任意の名前を付けることができます。</target>
        </trans-unit>
        <trans-unit id="f68e5bf516c14d7636dc7e787f07b009104eba6f" translate="yes" xml:space="preserve">
          <source>Here, the &lt;code&gt;v-if&lt;/code&gt; directive would remove/insert the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element based on the truthiness of the value of the expression &lt;code&gt;seen&lt;/code&gt;.</source>
          <target state="translated">ここで、 &lt;code&gt;v-if&lt;/code&gt; ディレクティブは、 &lt;code&gt;seen&lt;/code&gt; 式の値の真実性に基づいて &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 要素を削除/挿入します。</target>
        </trans-unit>
        <trans-unit id="8e26e3e40dfd6774d32a14ec704c7c19bb0bf799" translate="yes" xml:space="preserve">
          <source>Hook Functions</source>
          <target state="translated">フック機能</target>
        </trans-unit>
        <trans-unit id="d2bdd950b4b524b4faf0540c42b846e440d3ebd2" translate="yes" xml:space="preserve">
          <source>Hook functions with the same name are merged into an array so that all of them will be called. Mixin hooks will be called &lt;strong&gt;before&lt;/strong&gt; the component&amp;rsquo;s own hooks.</source>
          <target state="translated">同じ名前のフック関数は、すべてが呼び出されるように配列にマージされます。 mixinフックは、コンポーネント自体のフックの&lt;strong&gt;前&lt;/strong&gt;に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="656dedbf5301c31ed9bdf32f2a451638643101f3" translate="yes" xml:space="preserve">
          <source>How Changes Are Tracked</source>
          <target state="translated">変更を追跡する方法</target>
        </trans-unit>
        <trans-unit id="a056aea1f6dc2d57c44eacd2de4c8078611a80e1" translate="yes" xml:space="preserve">
          <source>How long will it take to migrate a Vue 1.x app to 2.0?</source>
          <target state="translated">Vue 1.xアプリを2.0に移行するのにどれくらい時間がかかりますか？</target>
        </trans-unit>
        <trans-unit id="a173386c8ab0ffd650a7e5d8b6fb73ce6260ce4e" translate="yes" xml:space="preserve">
          <source>How many times you get distracted and start playing with a cool new feature. 😉 Not judging, it also happened to us while building 2.0!</source>
          <target state="translated">気晴らしを開始し、クールな新機能でプレイを開始する回数。 2.0ビルド中に、判断を下すことなくそれが起こりました！</target>
        </trans-unit>
        <trans-unit id="5b51fcd95b1bb4c1d0a2feadea82b32351c13de4" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;inline-template&lt;/code&gt; makes the scope of your templates harder to reason about. As a best practice, prefer defining templates inside the component using the &lt;code&gt;template&lt;/code&gt; option or in a &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element in a &lt;code&gt;.vue&lt;/code&gt; file.</source>
          <target state="translated">ただし、 &lt;code&gt;inline-template&lt;/code&gt; を使用すると、テンプレートの範囲を推測するのが難しくなります。 ベストプラクティスとして、 &lt;code&gt;template&lt;/code&gt; オプションを使用して、コンポーネント内または &lt;code&gt;.vue&lt;/code&gt; ファイルの &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 要素でテンプレートを定義することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="42d602a14282520e03f05621c18e657389b28401" translate="yes" xml:space="preserve">
          <source>However, even this barely scratches the surface of what scoped slots are capable of. For real-life, powerful examples of scoped slot usage, we recommend browsing libraries such as &lt;a href=&quot;https://github.com/Akryum/vue-virtual-scroller&quot;&gt;Vue Virtual Scroller&lt;/a&gt;, &lt;a href=&quot;https://github.com/posva/vue-promised&quot;&gt;Vue Promised&lt;/a&gt;, and &lt;a href=&quot;https://github.com/LinusBorg/portal-vue&quot;&gt;Portal Vue&lt;/a&gt;.</source>
          <target state="translated">ただし、これはスコープスロットの機能のごく一部にしか影響しません。 スコープスロットの実際の強力な使用例については、 &lt;a href=&quot;https://github.com/Akryum/vue-virtual-scroller&quot;&gt;Vue Virtual Scroller&lt;/a&gt; 、 &lt;a href=&quot;https://github.com/posva/vue-promised&quot;&gt;Vue Promised&lt;/a&gt; 、 &lt;a href=&quot;https://github.com/LinusBorg/portal-vue&quot;&gt;Portal Vue&lt;/a&gt;などのライブラリを参照することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="e377ccc91063a19e1128087c043b05ac14bc27fd" translate="yes" xml:space="preserve">
          <source>However, for applications that use &lt;strong&gt;only&lt;/strong&gt; global component definitions via &lt;code&gt;Vue.component&lt;/code&gt;, we recommend kebab-case instead. The reasons are:</source>
          <target state="translated">ただし、Vue.componentを介してグローバルコンポーネント定義&lt;strong&gt;のみ&lt;/strong&gt;を使用するアプリケーションの場合&lt;strong&gt;は&lt;/strong&gt; 、代わりにkebab -caseをお勧めします。 その理由は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="92e85fdd91d6f41600c13668283501481ec58917" translate="yes" xml:space="preserve">
          <source>However, if you&amp;rsquo;re requiring/importing components using a &lt;strong&gt;module system&lt;/strong&gt;, e.g. via Webpack or Browserify, you&amp;rsquo;ll get an error:</source>
          <target state="translated">ただし、Webpack、Browserifyなどを介して&lt;strong&gt;モジュールシステム&lt;/strong&gt;を使用してコンポーネントを要求/インポートすると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="002e68a8e4165cd18ac4324c9c1241124753edbf" translate="yes" xml:space="preserve">
          <source>However, if you&amp;rsquo;ve ruled out the above and find yourself in this extremely rare situation of having to manually force an update, you can do so with &lt;a href=&quot;../api/index#vm-forceUpdate&quot;&gt;&lt;code&gt;$forceUpdate&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ただし、手動更新を強制する必要がある非常にまれな状況で上記および&lt;a href=&quot;../api/index#vm-forceUpdate&quot;&gt; &lt;code&gt;$forceUpdate&lt;/code&gt; &lt;/a&gt;を除外する場合は、 $ forceUpdateを使用して削除できます。</target>
        </trans-unit>
        <trans-unit id="317d1532f6f3ac08090592a8fdf8e37b997ac4a2" translate="yes" xml:space="preserve">
          <source>However, in some cases you may want to have both on the same element, for example having a CSS animation triggered by Vue, along with a CSS transition effect on hover. In these cases, you will have to explicitly declare the type you want Vue to care about in a &lt;code&gt;type&lt;/code&gt; attribute, with a value of either &lt;code&gt;animation&lt;/code&gt; or &lt;code&gt;transition&lt;/code&gt;.</source>
          <target state="translated">ただし、場合によっては、VueによってトリガーされるCSSアニメーションやホバリング時のCSSトランジションエフェクトなど、同じ要素に両方を配置することもできます。 これらの場合、Vueが関心を持つ &lt;code&gt;type&lt;/code&gt; 属性で明示的に宣言し、その値を &lt;code&gt;animation&lt;/code&gt; または &lt;code&gt;transition&lt;/code&gt; に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="88b48c81e2c3197a6ab15508375bec7eb9392d39" translate="yes" xml:space="preserve">
          <source>However, just as with other directives, the shorthand is only available when an argument is provided. That means the following syntax is invalid:</source>
          <target state="translated">ただし、他のディレクティブと同様に、略語は引数が指定されている場合にのみ使用できます。 つまり、次の構文は無効です。</target>
        </trans-unit>
        <trans-unit id="8e607f87fc1472f8d762256cb7690621e8b2099d" translate="yes" xml:space="preserve">
          <source>However, not everyone wants to use TypeScript. In many smaller-scale use cases, introducing a type system may result in more overhead than productivity gain. In those cases you&amp;rsquo;d be better off going with Vue instead, since using Angular without TypeScript can be challenging.</source>
          <target state="translated">ただし、すべての人がTypeScriptを使用するわけではありません。 多くの小規模なユースケースでは、型システムを実装すると、生産性を高めるよりもオーバーヘッドが増える可能性があります。 これらの場合、TypeScriptなしでAngularを使用することは困難な場合があるため、代わりにVueを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="ec8343c1410b44b823f35ff99f46fde41c340d0f" translate="yes" xml:space="preserve">
          <source>However, there are downsides to dependency injection. It couples components in your application to the way they&amp;rsquo;re currently organized, making refactoring more difficult. Provided properties are also not reactive. This is by design, because using them to create a central data store scales just as poorly as &lt;a href=&quot;#Accessing-the-Root-Instance&quot;&gt;using &lt;code&gt;$root&lt;/code&gt;&lt;/a&gt; for the same purpose. If the properties you want to share are specific to your app, rather than generic, or if you ever want to update provided data inside ancestors, then that&amp;rsquo;s a good sign that you probably need a real state management solution like &lt;a href=&quot;https://github.com/vuejs/vuex&quot;&gt;Vuex&lt;/a&gt; instead.</source>
          <target state="translated">ただし、依存性注入には欠点があります。 アプリケーションのコンポーネントを組織の現在の方法に接続し、リファクタリングをより困難にします。 指定されたプロパティもリアクティブではありません。 これは仕様です。 これらを使用して中央データストアを作成すると、同じ目的で&lt;a href=&quot;#Accessing-the-Root-Instance&quot;&gt; &lt;code&gt;$root&lt;/code&gt; &lt;/a&gt;を使用した場合と同様に拡張性が低くなります。 共有するプロパティが汎用ではなくアプリ固有である場合、または先祖の内部で提供されるデータを更新する場合は、代わりに&lt;a href=&quot;https://github.com/vuejs/vuex&quot;&gt;Vuexの&lt;/a&gt;ような実際の状態管理ソリューションが必要であることを示します。</target>
        </trans-unit>
        <trans-unit id="484afbd80ed598ca9c40608f3d779c450b8063ca" translate="yes" xml:space="preserve">
          <source>However, this can be a bit verbose if you have multiple conditional classes. That&amp;rsquo;s why it&amp;rsquo;s also possible to use the object syntax inside array syntax:</source>
          <target state="translated">ただし、複数の条件付きクラスがある場合、これは少し冗長です。 したがって、配列構文内でオブジェクト構文を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="226b6257bd14a41b418cc2a3219aded857a502c5" translate="yes" xml:space="preserve">
          <source>However, this won&amp;rsquo;t automatically pass any data to the component, because components have isolated scopes of their own. In order to pass the iterated data into the component, we should also use props:</source>
          <target state="translated">ただし、コンポーネントは独自のスコープを分離するため、これは自動的にコンポーネントにデータを渡しません。 また、小道具を使用して、反復データをコンポーネントに渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="9beda99dc2b127dc999f5b7cc2a4cd360648f73d" translate="yes" xml:space="preserve">
          <source>However, when communicating between distant descendants/ancestors, &lt;code&gt;$emit&lt;/code&gt; won&amp;rsquo;t help you. Instead, the simplest possible upgrade would be to use a centralized event hub. This has the added benefit of allowing you to communicate between components no matter where they are in the component tree - even between siblings! Because Vue instances implement an event emitter interface, you can actually use an empty Vue instance for this purpose.</source>
          <target state="translated">ただし、遠い子孫/祖先の間で通信する場合、 &lt;code&gt;$emit&lt;/code&gt; は役に立ちません。 代わりに、最も簡単なアップグレードは、集中型イベントハブを使用することです。 これには、兄弟間でさえ、コンポーネントツリー内の任意の場所のコンポーネント間で通信できるという利点があります。 Vueインスタンスはイベントエミッタインターフェイスを実装しているため、この目的のために空のVueインスタンスを実際に使用できます。</target>
        </trans-unit>
        <trans-unit id="1a1f757f908ed45ae57de4307c1068e94a1b0cef" translate="yes" xml:space="preserve">
          <source>However, you can still wrap default slot content in a &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; if you wish to be explicit:</source>
          <target state="translated">ただし、明示的にしたい場合は、デフォルトのスロットコンテンツを &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; でラップできます。</target>
        </trans-unit>
        <trans-unit id="2a7fc3d6b914325c881febd71fbf6f3338aea8b7" translate="yes" xml:space="preserve">
          <source>I hope that right now, you&amp;rsquo;re reading this sentence in your preferred language. If not, would you like to help us get there?</source>
          <target state="translated">今、この文をお気に入りの言語で読んでください。 そうでない場合、私たちがそこに着くのを助けたいですか？</target>
        </trans-unit>
        <trans-unit id="b957c41023281a182ae498da3fc29d81076e5bc0" translate="yes" xml:space="preserve">
          <source>I&amp;rsquo;m glad you asked! The answer is no. About 90% of the API is the same and the core concepts haven&amp;rsquo;t changed. It&amp;rsquo;s long because we like to offer very detailed explanations and include a lot of examples. Rest assured, &lt;strong&gt;this is not something you have to read from top to bottom!&lt;/strong&gt;</source>
          <target state="translated">聞いてうれしいです！ 答えはいいえだ。 APIの約90％は同じであり、コアの概念は変更されていません。 非常に詳細な説明を提供し、多くの例を含めるのが好きなので、長いです。 &lt;strong&gt;これは、上から下まで読む必要があるものではありませんのでご&lt;/strong&gt;安心&lt;strong&gt;ください！&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b3507f10505e91a18afb212ac7e9aa0befd70ebf" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&amp;lt;navigation-link&amp;gt;&lt;/code&gt;&amp;lsquo;s template did &lt;strong&gt;not&lt;/strong&gt; contain a &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; element, any content provided between its opening and closing tag would be discarded.</source>
          <target state="translated">&lt;code&gt;&amp;lt;navigation-link&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; 要素は&amp;lt;navigation-link&amp;gt;テンプレートに含まれ&lt;strong&gt;ません&lt;/strong&gt; 。開始タグと終了タグの間に提供されたコンテンツは破棄されます。</target>
        </trans-unit>
        <trans-unit id="4775d5880e56a64ce430a67fd93821ff5271a8f6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;elementOrSelector&lt;/code&gt; argument is not provided, the template will be rendered as an off-document element, and you will have to use native DOM API to insert it into the document yourself.</source>
          <target state="translated">&lt;code&gt;elementOrSelector&lt;/code&gt; 引数が指定されていない場合、テンプレートはドキュメントの外部の要素としてレンダリングされ、ネイティブDOM APIを使用してドキュメントに挿入する必要があります。</target>
        </trans-unit>
        <trans-unit id="6814c905755d5d0673271362491140f9bfec32ae" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;isButtonDisabled&lt;/code&gt; has the value of &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, or &lt;code&gt;false&lt;/code&gt;, the &lt;code&gt;disabled&lt;/code&gt; attribute will not even be included in the rendered &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">&lt;code&gt;isButtonDisabled&lt;/code&gt; の値が &lt;code&gt;null&lt;/code&gt; 、 &lt;code&gt;undefined&lt;/code&gt; 、または &lt;code&gt;false&lt;/code&gt; の場合、 &lt;code&gt;disabled&lt;/code&gt; 属性はレンダリングされた &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 要素に含まれません。</target>
        </trans-unit>
        <trans-unit id="deb91108b05984da997ff690270396ce3ba6ac45" translate="yes" xml:space="preserve">
          <source>If I upgrade to Vue 2, will I also have to upgrade Vuex and Vue Router?</source>
          <target state="translated">Vue 2にアップグレードする場合、VuexとVue Routerもアップグレードする必要がありますか？</target>
        </trans-unit>
        <trans-unit id="af93e3aeb163599bea53f782e2751ff74ad451b7" translate="yes" xml:space="preserve">
          <source>If Vue didn&amp;rsquo;t have this rule, clicking on one button would affect the data of &lt;em&gt;all other instances&lt;/em&gt;, like below:</source>
          <target state="translated">Vueにこのルールがない場合、1つのボタンをクリックすると&lt;em&gt;、他のすべてのインスタンスの&lt;/em&gt;データに次のように影響します。</target>
        </trans-unit>
        <trans-unit id="b7586f731f0b07604a55b0bff8fa3025687fb239" translate="yes" xml:space="preserve">
          <source>If a Vue instance didn&amp;rsquo;t receive the &lt;code&gt;el&lt;/code&gt; option at instantiation, it will be in &amp;ldquo;unmounted&amp;rdquo; state, without an associated DOM element. &lt;code&gt;vm.$mount()&lt;/code&gt; can be used to manually start the mounting of an unmounted Vue instance.</source>
          <target state="translated">Vueインスタンスがインスタンス化時に &lt;code&gt;el&lt;/code&gt; オプションを受け取らない場合、関連付けられたDOM要素なしで「アンマウント」状態になります。 &lt;code&gt;vm.$mount()&lt;/code&gt; を使用して、マウントされていないVueインスタンスのマウントを手動で開始できます。</target>
        </trans-unit>
        <trans-unit id="6d5c5a2c7610113711661bfb46b69f9a5e5ddb79" translate="yes" xml:space="preserve">
          <source>If a component only makes sense in the context of a single parent component, that relationship should be evident in its name. Since editors typically organize files alphabetically, this also keeps these related files next to each other.</source>
          <target state="translated">コンポーネントが単一の親コンポーネントのコンテキストでのみ意味をなす場合、関係はその名前で明確になります。 編集者は通常、ファイルをアルファベット順に整理します。したがって、これらの関連ファイルも隣接しています。</target>
        </trans-unit>
        <trans-unit id="b5928a9e5cf47cbe7b8911ef9b07fba741c7d9aa" translate="yes" xml:space="preserve">
          <source>If a runtime error occurs during a component&amp;rsquo;s render, it will be passed to the global &lt;code&gt;Vue.config.errorHandler&lt;/code&gt; config function if it has been set. It might be a good idea to leverage this hook together with an error-tracking service like &lt;a href=&quot;https://sentry.io&quot;&gt;Sentry&lt;/a&gt;, which provides &lt;a href=&quot;https://sentry.io/for/vue/&quot;&gt;an official integration&lt;/a&gt; for Vue.</source>
          <target state="translated">コンポーネントのレンダリング中にランタイムエラーが発生した場合、設定されている場合、グローバル &lt;code&gt;Vue.config.errorHandler&lt;/code&gt; 構成関数に渡されます。 Vueの&lt;a href=&quot;https://sentry.io/for/vue/&quot;&gt;公式統合&lt;/a&gt;を提供する&lt;a href=&quot;https://sentry.io&quot;&gt;Sentry&lt;/a&gt;などのエラー追跡サービスでこのフックを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="08aa6aa203690ff56afb57ae212ba05b4f6c10ba" translate="yes" xml:space="preserve">
          <source>If both event and callback are given, remove the listener for that specific callback only.</source>
          <target state="translated">イベントとコールバックの両方が指定されている場合、その特定のコールバックのみのリスナーを削除します。</target>
        </trans-unit>
        <trans-unit id="94a6cbe6ca363d5ecbd722fc5378a6b8f28c5053" translate="yes" xml:space="preserve">
          <source>If instead, your intent is to conditionally skip execution of the loop, you can place the &lt;code&gt;v-if&lt;/code&gt; on a wrapper element (or &lt;a href=&quot;conditional#Conditional-Groups-with-v-if-on-lt-template-gt&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;&lt;/a&gt;). For example:</source>
          <target state="translated">あるいは、ループ実行を条件付きでスキップすることを目的とするv-ifは、ラッパー要素（または&lt;a href=&quot;conditional#Conditional-Groups-with-v-if-on-lt-template-gt&quot;&gt; &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; &lt;/a&gt; ）にv-ifを配置できます。 例えば：</target>
        </trans-unit>
        <trans-unit id="50d9bd5e8b2424d69b89a9acc464902a1ecc6350" translate="yes" xml:space="preserve">
          <source>If it needs to be injected from a property with a different name, use &lt;code&gt;from&lt;/code&gt; to denote the source property:</source>
          <target state="translated">別の名前のプロパティから注入する必要がある場合は、 &lt;code&gt;from&lt;/code&gt; を使用してソースプロパティを示します。</target>
        </trans-unit>
        <trans-unit id="f0caf8a9ac2bcc9fe7de24b53400b7eedb0a1ea6" translate="yes" xml:space="preserve">
          <source>If multiple &lt;code&gt;errorCaptured&lt;/code&gt; hooks exist on a component&amp;rsquo;s inheritance chain or parent chain, all of them will be invoked on the same error.</source>
          <target state="translated">コンポーネントの継承チェーンまたは親チェーンに複数の &lt;code&gt;errorCaptured&lt;/code&gt; フックがある場合、それらはすべて同じエラーで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="8faa43e0b6fd3244a15d3b9a3afc829c3468152d" translate="yes" xml:space="preserve">
          <source>If neither &lt;code&gt;render&lt;/code&gt; function nor &lt;code&gt;template&lt;/code&gt; option is present, the in-DOM HTML of the mounting DOM element will be extracted as the template. In this case, Runtime + Compiler build of Vue should be used.</source>
          <target state="translated">&lt;code&gt;render&lt;/code&gt; 機能も &lt;code&gt;template&lt;/code&gt; オプションも存在しない場合、マウントされるDOM要素のDOMのHTMLはテンプレートとして抽出されます。 この場合、Vue Runtime + Compilerビルドを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="9b01e73de7162db0cb72a3eeafeeb2620b8021a4" translate="yes" xml:space="preserve">
          <source>If no CSS transitions/animations are detected and no JavaScript hooks are provided, the DOM operations for insertion and/or removal will be executed immediately on next frame (Note: this is a browser animation frame, different from Vue&amp;rsquo;s concept of &lt;code&gt;nextTick&lt;/code&gt;).</source>
          <target state="translated">CSSの遷移/アニメーションが検出されず、JavaScriptフックが提供されない場合、次のフレームでDOMの挿入および/または削除操作がすぐに実行されます。 （注：これはブラウザアニメーションフレームであり、Vue &lt;code&gt;nextTick&lt;/code&gt; はコンセプトとは異なります）。</target>
        </trans-unit>
        <trans-unit id="5bc33fe28ba69d339fb37eab66ba597ee9dc10b1" translate="yes" xml:space="preserve">
          <source>If no arguments are provided, remove all event listeners;</source>
          <target state="translated">引数が指定されていない場合、すべてのイベントリスナーを削除します。</target>
        </trans-unit>
        <trans-unit id="91aba20875e905d73638256716c23f9b7b43a58d" translate="yes" xml:space="preserve">
          <source>If only the event is provided, remove all listeners for that event;</source>
          <target state="translated">イベントのみが提供される場合、そのイベントのすべてのリスナーを削除します。</target>
        </trans-unit>
        <trans-unit id="575587717723913920c46177080895c689efec3d" translate="yes" xml:space="preserve">
          <source>If render function is present in the Vue option, the template will be ignored.</source>
          <target state="translated">Vueオプションにレンダリング機能がある場合、テンプレートは無視されます。</target>
        </trans-unit>
        <trans-unit id="85fd7702f7debf176df5e9e28d28b4d2f2479f88" translate="yes" xml:space="preserve">
          <source>If required, a deep clone of the original object can be obtained by passing &lt;code&gt;vm.$data&lt;/code&gt; through &lt;code&gt;JSON.parse(JSON.stringify(...))&lt;/code&gt;.</source>
          <target state="translated">必要に応じて、 &lt;code&gt;JSON.parse(JSON.stringify(...))&lt;/code&gt; 介して &lt;code&gt;vm.$data&lt;/code&gt; を渡すことにより、元のオブジェクトのディープクローンを取得できます。</target>
        </trans-unit>
        <trans-unit id="21380cb2235ba519b963494fea54adad9607a338" translate="yes" xml:space="preserve">
          <source>If so, please feel free to fork the repo for &lt;a href=&quot;https://github.com/vuejs/vuejs.org/&quot;&gt;these docs&lt;/a&gt; or for any other officially maintained documentation, then start translating. Once you&amp;rsquo;ve made some progress, open an issue or pull request in the main repo and we&amp;rsquo;ll put out a call for more contributors to help you out.</source>
          <target state="translated">その場合、 &lt;a href=&quot;https://github.com/vuejs/vuejs.org/&quot;&gt;これら&lt;/a&gt;または他の公式に維持されているドキュメントのリポジトリをフォークし、翻訳を開始します。 進捗を確認したら、メインリポジトリで課題を開くか、プルリクエストを送信します。 より多くの貢献者を探しています。</target>
        </trans-unit>
        <trans-unit id="b3b0a88772445b0201a5544af343a6bd0d139fcc" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;errorCaptured&lt;/code&gt; hook itself throws an error, both this error and the original captured error are sent to the global &lt;code&gt;config.errorHandler&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;errorCaptured&lt;/code&gt; フック自体がエラーをスローし、このエラーとキャプチャされた元のエラーの両方がグローバル &lt;code&gt;config.errorHandler&lt;/code&gt; に送信されます。</target>
        </trans-unit>
        <trans-unit id="7303cbac97656642d551545dc4e5cababd70308f" translate="yes" xml:space="preserve">
          <source>If the component is a functional component, the render function also receives an extra argument &lt;code&gt;context&lt;/code&gt;, which provides access to contextual data since functional components are instance-less.</source>
          <target state="translated">コンポーネントが機能コンポーネントである場合、機能コンポーネントにはインスタンスがないため、レンダリング関数はコンテキストデータへのアクセスを提供する追加の引数 &lt;code&gt;context&lt;/code&gt; も受け取ります。</target>
        </trans-unit>
        <trans-unit id="71e1040d1b4539c4a4df0fdf98d510e6cb4c6439" translate="yes" xml:space="preserve">
          <source>If the initial value of your &lt;code&gt;v-model&lt;/code&gt; expression does not match any of the options, the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element will render in an &amp;ldquo;unselected&amp;rdquo; state. On iOS this will cause the user not being able to select the first item because iOS does not fire a change event in this case. It is therefore recommended to provide a disabled option with an empty value, as demonstrated in the example above.</source>
          <target state="translated">&lt;code&gt;v-model&lt;/code&gt; 式の初期値がどのオプションとも一致しない場合、 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 要素は「選択解除」されます。 iOSでは、この場合、iOSはchangeイベントを発生させないため、ユーザーは最初のアイテムを選択できません。 したがって、上記の例に示すように、空の値で無効なオプションを指定することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="3be14640de0939678c1a24bad38088404e2ca8c9" translate="yes" xml:space="preserve">
          <source>If the string starts with &lt;code&gt;#&lt;/code&gt; it will be used as a querySelector and use the selected element&amp;rsquo;s innerHTML as the template string. This allows the use of the common &lt;code&gt;&amp;lt;script type=&quot;x-template&quot;&amp;gt;&lt;/code&gt; trick to include templates.</source>
          <target state="translated">文字列が &lt;code&gt;#&lt;/code&gt; で始まる場合、それはquerySelectorとして使用され、選択された要素のinnerHTMLをテンプレート文字列として使用します。 これにより、一般的な &lt;code&gt;&amp;lt;script type=&quot;x-template&quot;&amp;gt;&lt;/code&gt; トリックを使用してテンプレートを含めることができます。</target>
        </trans-unit>
        <trans-unit id="95e2a9dfaa380a0de81081767f202693968ef8fc" translate="yes" xml:space="preserve">
          <source>If the transition component provided &lt;a href=&quot;#JavaScript-Hooks&quot;&gt;JavaScript hooks&lt;/a&gt;, these hooks will be called at appropriate timings.</source>
          <target state="translated">遷移コンポーネントが&lt;a href=&quot;#JavaScript-Hooks&quot;&gt;JavaScriptフックを&lt;/a&gt;提供する場合、これらのフックは適切なタイミングで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="0bebbf9e60227c2180beccfec6669351ce887915" translate="yes" xml:space="preserve">
          <source>If there&amp;rsquo;s a 3rd-party router you prefer to use, such as &lt;a href=&quot;https://github.com/visionmedia/page.js&quot;&gt;Page.js&lt;/a&gt; or &lt;a href=&quot;https://github.com/flatiron/director&quot;&gt;Director&lt;/a&gt;, integration is &lt;a href=&quot;https://github.com/chrisvfritz/vue-2.0-simple-routing-example/compare/master...pagejs&quot;&gt;similarly easy&lt;/a&gt;. Here&amp;rsquo;s a &lt;a href=&quot;https://github.com/chrisvfritz/vue-2.0-simple-routing-example/tree/pagejs&quot;&gt;complete example&lt;/a&gt; using Page.js.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/visionmedia/page.js&quot;&gt;Page.js&lt;/a&gt;や&lt;a href=&quot;https://github.com/flatiron/director&quot;&gt;Director&lt;/a&gt;など、使用したいサードパーティのルーターがある場合、統合も&lt;a href=&quot;https://github.com/chrisvfritz/vue-2.0-simple-routing-example/compare/master...pagejs&quot;&gt;同様に簡単&lt;/a&gt;です。 Page.jsを使用した&lt;a href=&quot;https://github.com/chrisvfritz/vue-2.0-simple-routing-example/tree/pagejs&quot;&gt;完全な例&lt;/a&gt;を次に示します。</target>
        </trans-unit>
        <trans-unit id="403bdf723c083d8b2ccede629d30e16d178e61fd" translate="yes" xml:space="preserve">
          <source>If this option is available at instantiation, the instance will immediately enter compilation; otherwise, the user will have to explicitly call &lt;code&gt;vm.$mount()&lt;/code&gt; to manually start the compilation.</source>
          <target state="translated">インスタンス化時にこのオプションが使用可能な場合、インスタンスはすぐにコンパイルされます。 そうでない場合、ユーザーは &lt;code&gt;vm.$mount()&lt;/code&gt; を明示的に呼び出して、コンパイルを手動で開始する必要があります。</target>
        </trans-unit>
        <trans-unit id="916a06724e966c52ae5b3afbcb15fb0a47533851" translate="yes" xml:space="preserve">
          <source>If you also want to apply a transition on the initial render of a node, you can add the &lt;code&gt;appear&lt;/code&gt; attribute:</source>
          <target state="translated">トランジションをノードの初期レンダリングにも適用する場合、 &lt;code&gt;appear&lt;/code&gt; 属性を追加できます。</target>
        </trans-unit>
        <trans-unit id="7ec74309d0b36ccc7bac1396b5fe53120fd641ab" translate="yes" xml:space="preserve">
          <source>If you are a fan of CSS-in-JS, many of the popular CSS-in-JS libraries support Vue (e.g. &lt;a href=&quot;https://github.com/styled-components/vue-styled-components&quot;&gt;styled-components-vue&lt;/a&gt; and &lt;a href=&quot;https://github.com/egoist/vue-emotion&quot;&gt;vue-emotion&lt;/a&gt;). The main difference between React and Vue here is that the default method of styling in Vue is through more familiar &lt;code&gt;style&lt;/code&gt; tags in &lt;a href=&quot;single-file-components&quot;&gt;single-file components&lt;/a&gt;.</source>
          <target state="translated">CSS-in-JSのファンなら、多くの一般的なCSS-in-JSライブラリがVueをサポートしています（例：styled-components-vueおよび&lt;a href=&quot;https://github.com/egoist/vue-emotion&quot;&gt;vue-emotion&lt;/a&gt; ）。 ここでのReactとVueの主な違いは、Vueのデフォルトのスタイリング方法が単一ファイルコンポーネントのより馴染みのある &lt;code&gt;style&lt;/code&gt; タグを使用&lt;a href=&quot;single-file-components&quot;&gt;する&lt;/a&gt;ことです。</target>
        </trans-unit>
        <trans-unit id="8905225615c521ffb76784bc94d7b858597c4fa8" translate="yes" xml:space="preserve">
          <source>If you are an experienced frontend developer and want to know how Vue compares to other libraries/frameworks, check out the &lt;a href=&quot;guide/comparison&quot;&gt;Comparison with Other Frameworks&lt;/a&gt;.</source>
          <target state="translated">あなたが経験豊富なフロントエンド開発者であり、Vueが他のライブラリ/フレームワークとどのように比較されるかを見たい場合は、他のフレームワークとの比較を参照してください。</target>
        </trans-unit>
        <trans-unit id="fbcbc82a190068637d910f1c319db9b6e1926788" translate="yes" xml:space="preserve">
          <source>If you are developing a large project, working with other developers, or sometimes include 3rd-party HTML/CSS (e.g. from Auth0), consistent scoping will ensure that your styles only apply to the components they are meant for.</source>
          <target state="translated">大規模なプロジェクトを開発している場合、他の開発者と協力している場合、またはサードパーティのHTML / CSS（たとえばAuth0から）を含める場合、一貫したスコープにより、コンポーネントのみに適用されます。</target>
        </trans-unit>
        <trans-unit id="d40ab587db89fe2bdc56b68cb15d14ec1f64b7eb" translate="yes" xml:space="preserve">
          <source>If you are familiar with Virtual DOM concepts and prefer the raw power of JavaScript, you can also &lt;a href=&quot;render-function&quot;&gt;directly write render functions&lt;/a&gt; instead of templates, with optional JSX support.</source>
          <target state="translated">仮想DOMの概念に精通しており、JavaScriptの生の力を好む場合は、オプションのJSXサポートを使用して、テンプレートではなく&lt;a href=&quot;render-function&quot;&gt;レンダリング関数を直接記述する&lt;/a&gt;こともできます。</target>
        </trans-unit>
        <trans-unit id="96c8aaaa2941143cf085fd81f80dc6fc001828e4" translate="yes" xml:space="preserve">
          <source>If you are using Webpack, and prefer separating JavaScript and template files, you can use &lt;a href=&quot;https://github.com/ktsn/vue-template-loader&quot;&gt;vue-template-loader&lt;/a&gt;, which also transforms the template files into JavaScript render functions during the build step.</source>
          <target state="translated">Webpackを使用していて、JavaScriptファイルとテンプレートファイルを分離する場合は、 &lt;a href=&quot;https://github.com/ktsn/vue-template-loader&quot;&gt;vue-template-loaderを&lt;/a&gt;使用できます。 これにより、ビルドステップ中にテンプレートファイルがJavaScriptレンダリング関数に変換されます。</target>
        </trans-unit>
        <trans-unit id="89858e35b068365a82039534b03f306fb0a1b8c0" translate="yes" xml:space="preserve">
          <source>If you are using native ES Modules, there is also an ES Modules compatible build:</source>
          <target state="translated">ネイティブESモジュールを使用している場合は、ESモジュール互換ビルドもあります。</target>
        </trans-unit>
        <trans-unit id="f554b9ea3847cd26d76c47af993f74bd496cd6f0" translate="yes" xml:space="preserve">
          <source>If you are using template-based functional components, you will also have to manually add attributes and listeners. Since we have access to the individual context contents, we can use &lt;code&gt;data.attrs&lt;/code&gt; to pass along any HTML attributes and &lt;code&gt;listeners&lt;/code&gt;&lt;em&gt;(the alias for &lt;code&gt;data.on&lt;/code&gt;)&lt;/em&gt; to pass along any event listeners.</source>
          <target state="translated">テンプレートベースの機能コンポーネントを使用している場合は、属性とリスナーも手動で追加する必要があります。 個々のコンテキストコンテンツにアクセスできるため、 &lt;code&gt;data.attrs&lt;/code&gt; を使用してHTML属性と &lt;code&gt;listeners&lt;/code&gt; &lt;em&gt;（ &lt;code&gt;data.on&lt;/code&gt; のエイリアス）&lt;/em&gt;を渡し、イベントリスナーを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="8f0f868039c608a8992e0ecad40e6cc8c9afaa6c" translate="yes" xml:space="preserve">
          <source>If you are using the full build, i.e. directly including Vue via a script tag without a build tool, make sure to use the minified version (&lt;code&gt;vue.min.js&lt;/code&gt;) for production. Both versions can be found in the &lt;a href=&quot;installation#Direct-lt-script-gt-Include&quot;&gt;Installation guide&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;vue.min.js&lt;/code&gt; はvue.min.jsを使用しています。つまり、ビルドツールを使用せずにスクリプトタグを介してVueを直接含める場合は、必ず製品版に縮小版（vue.min.js）を使用してください。 両方のバージョンは、 &lt;a href=&quot;installation#Direct-lt-script-gt-Include&quot;&gt;インストールガイドに&lt;/a&gt;記載されています 。</target>
        </trans-unit>
        <trans-unit id="0b251e43cfeb3150b9ce15a72f34811cb195e1d1" translate="yes" xml:space="preserve">
          <source>If you do &lt;strong&gt;not&lt;/strong&gt; want the root element of a component to inherit attributes, you can set &lt;code&gt;inheritAttrs: false&lt;/code&gt; in the component&amp;rsquo;s options. For example:</source>
          <target state="translated">コンポーネントのルート要素に属性を継承さ&lt;strong&gt;せ&lt;/strong&gt;たく&lt;strong&gt;ない&lt;/strong&gt;場合は、コンポーネントオプションで &lt;code&gt;inheritAttrs: false&lt;/code&gt; を設定できます。 例えば：</target>
        </trans-unit>
        <trans-unit id="83b896d00583e6604507095ce6adcb8923125b4d" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t declare &lt;code&gt;message&lt;/code&gt; in the data option, Vue will warn you that the render function is trying to access a property that doesn&amp;rsquo;t exist.</source>
          <target state="translated">データオプションで &lt;code&gt;message&lt;/code&gt; を宣言しない場合、Vueはレンダリング関数が存在しないプロパティにアクセスしようとしていることを警告します。</target>
        </trans-unit>
        <trans-unit id="46b8f4debe19961ca67a65010685320784bdc244" translate="yes" xml:space="preserve">
          <source>If you find type inference or member completion isn&amp;rsquo;t working, annotating certain methods may help address these problems. Using the &lt;code&gt;--noImplicitAny&lt;/code&gt; option will help find many of these unannotated methods.</source>
          <target state="translated">型推論またはメンバー補完が機能しない場合は、特定のメソッドに注釈を付けることでこれらの問題に対処できる場合があります。 &lt;code&gt;--noImplicitAny&lt;/code&gt; オプションは、これらの注釈のないメソッドの多くを見つけるのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="c99d9927ea3c8d31465469a680b0264760b24597" translate="yes" xml:space="preserve">
          <source>If you find yourself needing to force an update in Vue, in 99.99% of cases, you&amp;rsquo;ve made a mistake somewhere.</source>
          <target state="translated">99.99％のケースでVueの更新を強制する必要がある場合、どこかで間違いを犯しています。</target>
        </trans-unit>
        <trans-unit id="a282623f6bdd7b021ecb4c856f00a4975082becf" translate="yes" xml:space="preserve">
          <source>If you happen to be using partials in a performance-critical part of your app, then you should upgrade to &lt;a href=&quot;render-function#Functional-Components&quot;&gt;functional components&lt;/a&gt;. They must be in a plain JS/JSX file (rather than in a &lt;code&gt;.vue&lt;/code&gt; file) and are stateless and instanceless, like partials. This makes rendering extremely fast.</source>
          <target state="translated">アプリがパフォーマンスが重要なパーシャルを使用する場合、機能コンポーネントにアップグレードする必要があります。 これらはプレーンなJS / JSXファイル（ &lt;code&gt;.vue&lt;/code&gt; ファイルではない）である必要があり、パーシャルのようにステートレスでインスタンスレスです。 これにより、レンダリングが非常に高速になります。</target>
        </trans-unit>
        <trans-unit id="f6790c4d625e03a0db14e824c77f7252c8ac6b22" translate="yes" xml:space="preserve">
          <source>If you have any questions on how you can get more involved with your local Vue community, reach out at &lt;a href=&quot;https://www.twitter.com/vuejs_events&quot;&gt;@Vuejs_Events&lt;/a&gt;!</source>
          <target state="translated">地元のVueコミュニティに参加する方法について質問がある場合は、 &lt;a href=&quot;https://www.twitter.com/vuejs_events&quot;&gt;@ Vuejs_Events&lt;/a&gt;までご連絡ください！</target>
        </trans-unit>
        <trans-unit id="065d3201caaa2141d71da739cdfc7e30446a0749" translate="yes" xml:space="preserve">
          <source>If you have any tests, run them and see what still fails. If you don&amp;rsquo;t have tests, just open the app in your browser and keep an eye out for warnings or errors as you navigate around.</source>
          <target state="translated">テストがある場合は、テストを実行して、まだ失敗するものを確認します。 テストがない場合は、ブラウザーでアプリを開き、警告とエラーを監視します。</target>
        </trans-unit>
        <trans-unit id="4b6b5852b50da5bcf815176a6c34db9a40804fe5" translate="yes" xml:space="preserve">
          <source>If you need multiple aliases, you can also use an array syntax:</source>
          <target state="translated">複数のエイリアスが必要な場合は、配列構文も使用できます。</target>
        </trans-unit>
        <trans-unit id="a86c834af1858680fe5ab3f3504c46895d429410" translate="yes" xml:space="preserve">
          <source>If you need to add new routes after the router has been instantiated, you can replace the router&amp;rsquo;s matcher with a new one that includes the route you&amp;rsquo;d like to add:</source>
          <target state="translated">ルーターをインスタンス化した後に新しいルートを追加する必要がある場合は、ルーターマッチャーを、追加するルートを含む新しいマッチャーに置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="ddaed66412f9035c897a73c53b95d7b75a77f86c" translate="yes" xml:space="preserve">
          <source>If you need to compile templates on the client (e.g. passing a string to the &lt;code&gt;template&lt;/code&gt; option, or mounting to an element using its in-DOM HTML as the template), you will need the compiler and thus the full build:</source>
          <target state="translated">クライアントが &lt;code&gt;template&lt;/code&gt; をコンパイルする必要がある場合（たとえば、テンプレートオプションに文字列を渡すか、DOM内のHTMLをテンプレートとして使用して要素をマウントする場合）、コンパイラー、したがってフルビルドが必要です。</target>
        </trans-unit>
        <trans-unit id="1f48f8167c0a23ab61df4005f4d4a72ae2eb587c" translate="yes" xml:space="preserve">
          <source>If you need to programmatically generate routes when starting up your app, you can do so by dynamically pushing definitions to a routes array. For example:</source>
          <target state="translated">アプリの起動時にプログラムでルートを生成する必要がある場合は、定義をルート配列に動的にプッシュすることで作成できます。 例えば：</target>
        </trans-unit>
        <trans-unit id="c75b905774715058912c0cd6cc8289b46519b9fd" translate="yes" xml:space="preserve">
          <source>If you need to stagger list transitions, you can control timing by setting and accessing a &lt;code&gt;data-index&lt;/code&gt; (or similar attribute) on an element. See &lt;a href=&quot;transitions#Staggering-List-Transitions&quot;&gt;an example here&lt;/a&gt;.</source>
          <target state="translated">リストの遷移をずらす必要がある場合は、要素の &lt;code&gt;data-index&lt;/code&gt; （または同様の属性）を設定してアクセスすることにより、タイミングを制御できます。 この&lt;a href=&quot;transitions#Staggering-List-Transitions&quot;&gt;例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3f36db052506affc289d8cbab07f304cc42b2cfc" translate="yes" xml:space="preserve">
          <source>If you only need very simple routing and do not wish to involve a full-featured router library, you can do so by dynamically rendering a page-level component like this:</source>
          <target state="translated">非常に単純なルーティングのみが必要で、フル機能のルーターライブラリを使用したくない場合は、次のようにページレベルのコンポーネントを動的にレンダリングすることでこれを実行できます。</target>
        </trans-unit>
        <trans-unit id="83934613eeb1fab05cbec23a2b6576ef65c9de74" translate="yes" xml:space="preserve">
          <source>If you open up your JavaScript console again and enter &lt;code&gt;app2.message = 'some new message'&lt;/code&gt;, you&amp;rsquo;ll once again see that the bound HTML - in this case the &lt;code&gt;title&lt;/code&gt; attribute - has been updated.</source>
          <target state="translated">JavaScriptコンソールを再度 &lt;code&gt;app2.message = 'some new message'&lt;/code&gt; 再度入力して、バインドされたHTML（この場合は &lt;code&gt;title&lt;/code&gt; 属性）が更新されたことを確認します。</target>
        </trans-unit>
        <trans-unit id="aee69dbd3a0e9f50e62e6f6016f428f6608cc1d0" translate="yes" xml:space="preserve">
          <source>If you prefer a class-based API when declaring components, you can use the officially maintained &lt;a href=&quot;https://github.com/vuejs/vue-class-component&quot;&gt;vue-class-component&lt;/a&gt; decorator:</source>
          <target state="translated">コンポーネントを宣言するときに&lt;a href=&quot;https://github.com/vuejs/vue-class-component&quot;&gt;クラス&lt;/a&gt;ベースのAPIを使用する場合は、公式に管理されているvue-class-componentデコレータを使用できます。</target>
        </trans-unit>
        <trans-unit id="75403d1bbcd622140e98147df81237f72e89afbb" translate="yes" xml:space="preserve">
          <source>If you prefer something more interactive, you can also check out &lt;a href=&quot;https://scrimba.com/playlist/pXKqta&quot;&gt;this tutorial series on Scrimba&lt;/a&gt;, which gives you a mix of screencast and code playground that you can pause and play around with anytime.</source>
          <target state="translated">よりインタラクティブなものが&lt;a href=&quot;https://scrimba.com/playlist/pXKqta&quot;&gt;必要&lt;/a&gt;な場合は、Scrimbaのこのチュートリアルシリーズをご覧ください。 スクリーンキャストとコードのプレイグラウンドが混在しているため、いつでも一時停止して再生できます。</target>
        </trans-unit>
        <trans-unit id="a1803a0174123ec0c71857041cc2fd5b41d4ca83" translate="yes" xml:space="preserve">
          <source>If you really need to override another &lt;code&gt;!important&lt;/code&gt;, you must use the string syntax:</source>
          <target state="translated">別の &lt;code&gt;!important&lt;/code&gt; を本当にオーバーライドする必要がある場合は、文字列構文を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="b9b3464a0443a4fd3675c6560f46c9a5c23720d5" translate="yes" xml:space="preserve">
          <source>If you really want to duplicate the same element/component many times, you can do so with a factory function. For example, the following render function is a perfectly valid way of rendering 20 identical paragraphs:</source>
          <target state="translated">同じ要素/コンポーネントを何度も複製したい場合は、ファクトリ関数を使用して複製できます。 たとえば、次のレンダリング関数は、20の同一の段落をレンダリングするための完全に有効な方法です。</target>
        </trans-unit>
        <trans-unit id="035e11da3a8ba14dbdb2e0af739ac5d197d754c9" translate="yes" xml:space="preserve">
          <source>If you still want to call an unwatch function inside the callback, you should check its availability first:</source>
          <target state="translated">コールバックでunwatch関数を呼び出す場合は、最初にその可用性を確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="e745791f30101cac58a2b81a7963801c737409a8" translate="yes" xml:space="preserve">
          <source>If you try this in your template however, Vue will show an error, explaining that &lt;strong&gt;every component must have a single root element&lt;/strong&gt;. You can fix this error by wrapping the template in a parent element, such as:</source>
          <target state="translated">ただし、テンプレートでこれを試みると、Vueは&lt;strong&gt;すべてのコンポーネントに単一のルート要素が必要であることを&lt;/strong&gt;説明するエラーを表示します。 このエラーは、次のような親要素でテンプレートをラップすることで修正できます。</target>
        </trans-unit>
        <trans-unit id="867330159a7ddc38fc78ddc898cba459aac34c10" translate="yes" xml:space="preserve">
          <source>If you use any non-Vue custom elements in your templates, such as a web component, PascalCase ensures that your Vue components remain distinctly visible.</source>
          <target state="translated">テンプレートで非Vueカスタム要素（Webコンポーネントなど）を使用する場合、PascalCaseはVueコンポーネントが明確に表示されるようにします。</target>
        </trans-unit>
        <trans-unit id="60f8e15ea64a01da65a785bd3977a29768fe4144" translate="yes" xml:space="preserve">
          <source>If you want to coerce a prop, setup a local computed value based on it instead. For example, instead of:</source>
          <target state="translated">プロップを強制する場合は、代わりにそれに基づいてローカルに計算された値を設定します。 たとえば、次の代わりに：</target>
        </trans-unit>
        <trans-unit id="ec0a06cc0af41c0df81514c72a42baf2a7b4e3e2" translate="yes" xml:space="preserve">
          <source>If you want to dive right in and start playing with single-file components, check out &lt;a href=&quot;https://codesandbox.io/s/o29j95wx9&quot;&gt;this simple todo app&lt;/a&gt; on CodeSandbox.</source>
          <target state="translated">すぐに飛び込んで単一ファイルコンポーネントを使用したい場合は、CodeSandboxで&lt;a href=&quot;https://codesandbox.io/s/o29j95wx9&quot;&gt;この簡単な&lt;/a&gt; ToDo アプリをご覧ください。</target>
        </trans-unit>
        <trans-unit id="46daea4d2cc73e0262635e93ef739858416c1a90" translate="yes" xml:space="preserve">
          <source>If you want to pass all the properties of an object as props, you can use &lt;code&gt;v-bind&lt;/code&gt; without an argument (&lt;code&gt;v-bind&lt;/code&gt; instead of &lt;code&gt;v-bind:prop-name&lt;/code&gt;). For example, given a &lt;code&gt;post&lt;/code&gt; object:</source>
          <target state="translated">オブジェクトのすべてのプロパティを小道具として渡したい場合、引数なしで &lt;code&gt;v-bind&lt;/code&gt; を使用できます（ &lt;code&gt;v-bind:prop-name&lt;/code&gt; 代わりにv-bind：prop-name）。 たとえば、与えられた &lt;code&gt;post&lt;/code&gt; オブジェクト：</target>
        </trans-unit>
        <trans-unit id="caa62e4207841b276f4bf69747cc49086ed59533" translate="yes" xml:space="preserve">
          <source>If you want to register a directive locally instead, components also accept a &lt;code&gt;directives&lt;/code&gt; option:</source>
          <target state="translated">代わりにディレクティブをローカルで登録する場合、コンポーネントは &lt;code&gt;directives&lt;/code&gt; オプションも受け入れます。</target>
        </trans-unit>
        <trans-unit id="a5c60bce10cae3d5303941aa3e57ed099d7e4435" translate="yes" xml:space="preserve">
          <source>If you want user input to be automatically typecast as a number, you can add the &lt;code&gt;number&lt;/code&gt; modifier to your &lt;code&gt;v-model&lt;/code&gt; managed inputs:</source>
          <target state="translated">ユーザー入力を自動的に &lt;code&gt;number&lt;/code&gt; としてキャストする場合は、 &lt;code&gt;v-model&lt;/code&gt; 管理入力に数値修飾子を追加できます。</target>
        </trans-unit>
        <trans-unit id="2a16d061cc634d4f68b39e327bf7521b345a10fa" translate="yes" xml:space="preserve">
          <source>If you want whitespace from user input to be trimmed automatically, you can add the &lt;code&gt;trim&lt;/code&gt; modifier to your &lt;code&gt;v-model&lt;/code&gt;-managed inputs:</source>
          <target state="translated">ユーザー入力から空白を自動的にトリミングする場合は、 &lt;code&gt;v-model&lt;/code&gt; managementの入力に &lt;code&gt;trim&lt;/code&gt; 修飾子を追加できます。</target>
        </trans-unit>
        <trans-unit id="27e01c628ccff4f037b351b0e994f9073ee50cc8" translate="yes" xml:space="preserve">
          <source>If you were previously relying on &lt;code&gt;vm.$watch&lt;/code&gt; to do something with the DOM after a component updates, you can instead do so in the &lt;code&gt;updated&lt;/code&gt; lifecycle hook.</source>
          <target state="translated">以前に &lt;code&gt;vm.$watch&lt;/code&gt; を使用してコンポーネントの更新後にDOMで何かを実行した場合は、代わりに &lt;code&gt;updated&lt;/code&gt; ライフサイクルフックを使用して実行できます。</target>
        </trans-unit>
        <trans-unit id="d09ac65f465dd8ab501455462ff8cb0ee50716d0" translate="yes" xml:space="preserve">
          <source>If you would like to also toggle a class in the list conditionally, you can do it with a ternary expression:</source>
          <target state="translated">リスト内のクラスを条件付きで切り替える場合は、3項式を使用して切り替えることができます。</target>
        </trans-unit>
        <trans-unit id="bba4a4286bcc04db765fc3867dbf7ddb1a48e9be" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to learn more about Vue before diving in, we created a video walking through the core principles and a sample project.</source>
          <target state="translated">ダイビングの前にVueについて詳しく知りたい場合は、中核となる原則とサンプルプロジェクトを紹介するビデオを作成しました。</target>
        </trans-unit>
        <trans-unit id="8bdbab444a3ccfd0f249abc5bdb15834f654b882" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re a &lt;strong&gt;Browserify&lt;/strong&gt; user that would like to use async components, its creator has unfortunately &lt;a href=&quot;https://github.com/substack/node-browserify/issues/58#issuecomment-21978224&quot;&gt;made it clear&lt;/a&gt; that async loading &amp;ldquo;is not something that Browserify will ever support.&amp;rdquo; Officially, at least. The Browserify community has found &lt;a href=&quot;https://github.com/vuejs/vuejs.org/issues/620&quot;&gt;some workarounds&lt;/a&gt;, which may be helpful for existing and complex applications. For all other scenarios, we recommend using Webpack for built-in, first-class async support.</source>
          <target state="translated">非同期コンポーネントを使用する&lt;strong&gt;Browserify&lt;/strong&gt;ユーザーの場合、作成者は残念ながら非同期読み込みが「Browserifyでサポートされていない」ことを指定しています。 少なくとも公式には。 Browserifyコミュニティは、既存の複雑なアプリケーションに役立つ&lt;a href=&quot;https://github.com/vuejs/vuejs.org/issues/620&quot;&gt;回避策&lt;/a&gt;を見つけました 。 他のすべてのシナリオでは、組み込みのファーストクラスの非同期サポートにWebpackを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="edcc3ba94bcb1cfdcb2e9c17bd2ce8899e7c55b1" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re coming from React, you may be wondering how vuex compares to &lt;a href=&quot;https://github.com/reactjs/redux&quot;&gt;redux&lt;/a&gt;, the most popular Flux implementation in that ecosystem. Redux is actually view-layer agnostic, so it can easily be used with Vue via &lt;a href=&quot;https://yarnpkg.com/en/packages?q=redux%20vue&amp;amp;p=1&quot;&gt;simple bindings&lt;/a&gt;. Vuex is different in that it &lt;em&gt;knows&lt;/em&gt; it&amp;rsquo;s in a Vue app. This allows it to better integrate with Vue, offering a more intuitive API and improved development experience.</source>
          <target state="translated">Reactから来ているのであれば、エコシステムで最も人気のあるFlux実装である&lt;a href=&quot;https://github.com/reactjs/redux&quot;&gt;redux&lt;/a&gt;と比較してvuexに何が起こるのか疑問に思うかもしれません。 Reduxは実際にはビューレイヤーに結び付けられていないため、 &lt;a href=&quot;https://yarnpkg.com/en/packages?q=redux%20vue&amp;amp;p=1&quot;&gt;単純なバインディング&lt;/a&gt;を介してVueで簡単に使用できます 。 Vuexは、Vueアプリにあることを認識しているという点で異なります。 これにより、Vueとの統合が改善され、より直感的なAPIと改善された開発エクスペリエンスが提供されます。</target>
        </trans-unit>
        <trans-unit id="ac6cff90ff8235cb92a798958233e09ce65f41ef" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not careful, recursive components can also lead to infinite loops:</source>
          <target state="translated">注意して、再帰的なコンポーネントは無限ループにつながる可能性があります。</target>
        </trans-unit>
        <trans-unit id="31dfe6cb288a0519fc0e0e9ea5786682c1441d3d" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not using a module system with &lt;code&gt;import&lt;/code&gt;/&lt;code&gt;require&lt;/code&gt;, you can probably skip this section for now. If you are, we have some special instructions and tips just for you.</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; / &lt;code&gt;require&lt;/code&gt; でモジュールシステムを使用していない場合は、この時点でこのセクションをスキップできます。 その場合、特別な指示とヒントがあります。</target>
        </trans-unit>
        <trans-unit id="4cd1a70ae99b09e3c3ad5742cdad75a7a51ef4df" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not yet familiar with Vue&amp;rsquo;s components, you can skip this for now.</source>
          <target state="translated">Vueコンポーネントを初めて使用する場合は、今のところこれをスキップできます。</target>
        </trans-unit>
        <trans-unit id="3fc717a96a6a10a9a99af5efe59b5bba0e6a070d" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re still here, then it&amp;rsquo;s likely you&amp;rsquo;re using a module system, such as with Babel and Webpack. In these cases, we recommend creating a &lt;code&gt;components&lt;/code&gt; directory, with each component in its own file.</source>
          <target state="translated">まだここにいる場合は、BabelやWebpackなどのモジュールシステムを使用している可能性があります。 このような場合、各コンポーネントが独自のファイルに &lt;code&gt;components&lt;/code&gt; ディレクトリを作成することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="ea196c4500fb63b55d56b5fae7f497c03397f1ba" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re writing a lot of &lt;code&gt;render&lt;/code&gt; functions, it might feel painful to write something like this:</source>
          <target state="translated">多数の &lt;code&gt;render&lt;/code&gt; 関数を書いている場合、次のようなものを作成するのは苦痛かもしれません。</target>
        </trans-unit>
        <trans-unit id="1e55f976e59b49199d2ea7af9a5149f956c1e601" translate="yes" xml:space="preserve">
          <source>If your directive needs multiple values, you can also pass in a JavaScript object literal. Remember, directives can take any valid JavaScript expression.</source>
          <target state="translated">ディレクティブに複数の値が必要な場合は、JavaScriptオブジェクトリテラルを渡すこともできます。 ディレクティブは任意の有効なJavaScript式であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ac40dacaf019bddc14aed2d0fa2773dee73842cf" translate="yes" xml:space="preserve">
          <source>Imagine this is the template for &lt;code&gt;bootstrap-date-input&lt;/code&gt;:</source>
          <target state="translated">これが &lt;code&gt;bootstrap-date-input&lt;/code&gt; のテンプレートだと想像してください：</target>
        </trans-unit>
        <trans-unit id="224c21757ea8bf64841521a52786c7584cd3070c" translate="yes" xml:space="preserve">
          <source>Implicit parent-child communication</source>
          <target state="translated">暗黙の親子通信</target>
        </trans-unit>
        <trans-unit id="55330d37bd375d0971edbec4ed65271fd1ecea19" translate="yes" xml:space="preserve">
          <source>Implicit parent-child communication &lt;sup&gt;use with caution&lt;/sup&gt;</source>
          <target state="translated">暗黙の親子通信&lt;sup&gt;を使用する場合は注意してください&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="cff0737239eca41b60241cc75c9ed0aa10e7cf12" translate="yes" xml:space="preserve">
          <source>In 2.2.0+ and above, &lt;code&gt;activated&lt;/code&gt; and &lt;code&gt;deactivated&lt;/code&gt; will fire for all nested components inside a &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; tree.</source>
          <target state="translated">2.2.0から、 &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; ツリーのすべてのネストされたコンポーネントが &lt;code&gt;activated&lt;/code&gt; および &lt;code&gt;deactivated&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="b549760aeed2ab9d1d4db1c8e2a9ad9c0ecadc86" translate="yes" xml:space="preserve">
          <source>In 2.2.0+, this hook also captures errors in component lifecycle hooks. Also, when this hook is &lt;code&gt;undefined&lt;/code&gt;, captured errors will be logged with &lt;code&gt;console.error&lt;/code&gt; instead of crashing the app.</source>
          <target state="translated">2.2.0以降、このフックはコンポーネントライフサイクルフックエラーもキャプチャします。 また、このフックが &lt;code&gt;undefined&lt;/code&gt; 場合、キャプチャされたエラーはアプリをクラッシュさせる代わりに &lt;code&gt;console.error&lt;/code&gt; に記録されます 。</target>
        </trans-unit>
        <trans-unit id="999b4c5d77cbbc3bee12f8c040b08340523086be" translate="yes" xml:space="preserve">
          <source>In 2.2.0+, when using &lt;code&gt;v-for&lt;/code&gt; with a component, a &lt;a href=&quot;list#key&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/a&gt; is now required.</source>
          <target state="translated">2.2.0以降では、 &lt;code&gt;v-for&lt;/code&gt; はコンポーネントでv-forを使用するときに&lt;a href=&quot;list#key&quot;&gt; &lt;code&gt;key&lt;/code&gt; &lt;/a&gt; を必要とします。</target>
        </trans-unit>
        <trans-unit id="ecaafff83b9fcb93b3e419ce8a4773d634c3148b" translate="yes" xml:space="preserve">
          <source>In 2.4.0+, this hook also captures errors thrown inside Vue custom event handlers.</source>
          <target state="translated">2.4.0以降、このフックはVueカスタムイベントハンドラーでスローされたエラーもキャプチャします。</target>
        </trans-unit>
        <trans-unit id="edef70fc2b7c008af4bf42ee31332936b525d0f1" translate="yes" xml:space="preserve">
          <source>In 2.5.0+ injections can be optional with default value:</source>
          <target state="translated">2.5.0以降では、デフォルト値を使用した注入はオプションになります。</target>
        </trans-unit>
        <trans-unit id="4b8a8ed5d2d9e4a1e1eed10aaf95fe05167d5fd5" translate="yes" xml:space="preserve">
          <source>In 2.5.0+, if you are using &lt;a href=&quot;single-file-components&quot;&gt;single-file components&lt;/a&gt;, template-based functional components can be declared with:</source>
          <target state="translated">2.5.0以降、 &lt;a href=&quot;single-file-components&quot;&gt;単一のファイルコンポーネント&lt;/a&gt;を使用している場合、次のようにテンプレートベースの機能コンポーネントを宣言できます。</target>
        </trans-unit>
        <trans-unit id="98c67c0761e7da9c00c57d35a0738163cb924a2e" translate="yes" xml:space="preserve">
          <source>In 2.6+, &lt;code&gt;v-for&lt;/code&gt; can also work on values that implement the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol&quot;&gt;Iterable Protocol&lt;/a&gt;, including native &lt;code&gt;Map&lt;/code&gt; and &lt;code&gt;Set&lt;/code&gt;. However, it should be noted that Vue 2.x currently does not support reactivity on &lt;code&gt;Map&lt;/code&gt; and &lt;code&gt;Set&lt;/code&gt; values, so cannot automatically detect changes.</source>
          <target state="translated">2.6以降、 &lt;code&gt;v-for&lt;/code&gt; は、ネイティブ &lt;code&gt;Map&lt;/code&gt; および &lt;code&gt;Set&lt;/code&gt; を含む&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol&quot;&gt;Iterable Protocol&lt;/a&gt;を実装する値に対しても機能します。 ただし、Vue 2.xは現在、 &lt;code&gt;Map&lt;/code&gt; 値と &lt;code&gt;Set&lt;/code&gt; 値の応答性をサポートしていないため、変更を自動的に検出することはできません。</target>
        </trans-unit>
        <trans-unit id="5553d76d7cbc80714e9fa7174eeef5474643a592" translate="yes" xml:space="preserve">
          <source>In 2.6.0+, this hook also captures errors thrown inside &lt;code&gt;v-on&lt;/code&gt; DOM listeners. In addition, if any of the covered hooks or handlers returns a Promise chain (e.g. async functions), the error from that Promise chain will also be handled.</source>
          <target state="translated">2.6.0以降、このフックは &lt;code&gt;v-on&lt;/code&gt; DOMリスナーでスローされたエラーもキャプチャします。 さらに、対象となるフックまたはハンドラーのいずれかがPromiseチェーン（非同期関数など）を返す場合、そのPromiseチェーンからのエラーも処理されます。</target>
        </trans-unit>
        <trans-unit id="5b65e8c99e14e1d3d5fad411cf67fa65a409639e" translate="yes" xml:space="preserve">
          <source>In 2.6.0, we introduced a new unified syntax (the &lt;code&gt;v-slot&lt;/code&gt; directive) for named and scoped slots. It replaces the &lt;code&gt;slot&lt;/code&gt; and &lt;code&gt;slot-scope&lt;/code&gt; attributes, which are now deprecated, but have &lt;em&gt;not&lt;/em&gt; been removed and are still documented &lt;a href=&quot;#Deprecated-Syntax&quot;&gt;here&lt;/a&gt;. The rationale for introducing the new syntax is described in this &lt;a href=&quot;https://github.com/vuejs/rfcs/blob/master/active-rfcs/0001-new-slot-syntax.md&quot;&gt;RFC&lt;/a&gt;.</source>
          <target state="translated">2.6.0では、名前付きスロットとスコープ付きスロット（ &lt;code&gt;v-slot&lt;/code&gt; ディレクティブ）の新しい統合構文が導入されています。 &lt;code&gt;slot&lt;/code&gt; と &lt;code&gt;slot-scope&lt;/code&gt; 属性を置き換えます。 これらの属性は廃止されましたが&lt;em&gt;、&lt;/em&gt;削除&lt;em&gt;さ&lt;/em&gt;れて&lt;em&gt;おらず&lt;/em&gt; 、ここに記載&lt;em&gt;さ&lt;/em&gt;れて&lt;em&gt;い&lt;/em&gt;ます。 新しい構文を導入するための原則はこの&lt;a href=&quot;https://github.com/vuejs/rfcs/blob/master/active-rfcs/0001-new-slot-syntax.md&quot;&gt;RFCで&lt;/a&gt;説明されます 。</target>
        </trans-unit>
        <trans-unit id="1efb26c55b50e56d58b23c52bfa3f35fba3a9ae3" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../guide/single-file-components&quot;&gt;single-file components&lt;/a&gt;, &lt;code&gt;scoped&lt;/code&gt; styles will not apply to content inside &lt;code&gt;v-html&lt;/code&gt;, because that HTML is not processed by Vue&amp;rsquo;s template compiler. If you want to target &lt;code&gt;v-html&lt;/code&gt; content with scoped CSS, you can instead use &lt;a href=&quot;https://vue-loader.vuejs.org/en/features/css-modules.html&quot;&gt;CSS modules&lt;/a&gt; or an additional, global &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; element with a manual scoping strategy such as BEM.</source>
          <target state="translated">&lt;a href=&quot;../guide/single-file-components&quot;&gt;単一ファイルコンポーネントの場合&lt;/a&gt; 、 &lt;code&gt;scoped&lt;/code&gt; スタイルは &lt;code&gt;v-html&lt;/code&gt; のコンテンツには適用されません。 HTMLは、Vueのテンプレートコンパイラによって処理されません。 スコープCSSを使用して &lt;code&gt;v-html&lt;/code&gt; コンテンツをターゲットにしたい場合は、代わりに&lt;a href=&quot;https://vue-loader.vuejs.org/en/features/css-modules.html&quot;&gt;CSSモジュール&lt;/a&gt;または追加のグローバル &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 要素をBEMなどの手動スコープ戦略とともに使用できます。</target>
        </trans-unit>
        <trans-unit id="0c8d376f7dee4247b96adc0876ef4edbaf45e20c" translate="yes" xml:space="preserve">
          <source>In JavaScript, PascalCase is the convention for classes and prototype constructors - essentially, anything that can have distinct instances. Vue components also have instances, so it makes sense to also use PascalCase. As an added benefit, using PascalCase within JSX (and templates) allows readers of the code to more easily distinguish between components and HTML elements.</source>
          <target state="translated">JavaScriptでは、PascalCaseはクラスおよびプロトタイプコンストラクターのルールです。 基本的に、個別のインスタンスを持つことができるもの。 Vueコンポーネントにはインスタンスもあるため、PascalCaseを使用するのは理にかなっています。 追加の利点として、JSX（およびテンプレート）でPascalCaseを使用すると、コードリーダーがコンポーネントとHTML要素を区別しやすくなります。</target>
        </trans-unit>
        <trans-unit id="0e6aff66522249011aa1aa6c3f9299f8a6a28ad8" translate="yes" xml:space="preserve">
          <source>In JavaScript, splitting objects with multiple properties over multiple lines is widely considered a good convention, because it&amp;rsquo;s much easier to read. Our templates and &lt;a href=&quot;../guide/render-function#JSX&quot;&gt;JSX&lt;/a&gt; deserve the same consideration.</source>
          <target state="translated">JavaScriptでは、複数のプロパティを持つオブジェクトを複数行に分割することは、読みやすいため、慣例として広く考えられています。 私たちのテンプレートと&lt;a href=&quot;../guide/render-function#JSX&quot;&gt;JSX&lt;/a&gt;は同じ考慮に値します。</target>
        </trans-unit>
        <trans-unit id="0e2913db7ffdacc418eed127754b210542e820db" translate="yes" xml:space="preserve">
          <source>In Polymer, the team has also made its data-binding system very limited in order to compensate for the performance. For example, the only expressions supported in Polymer templates are boolean negation and single method calls. Its computed property implementation is also not very flexible.</source>
          <target state="translated">Polymerでは、チームはパフォーマンスを補完するためにデータバインディングシステムを厳しく制限しています。 たとえば、Polymerテンプレートでサポートされる式は、ブール否定と単一メソッド呼び出しのみです。 計算されたプロパティの実装もあまり柔軟ではありません。</target>
        </trans-unit>
        <trans-unit id="b180ff4b776b13afecd7e06c14be26a036f40513" translate="yes" xml:space="preserve">
          <source>In React, all components express their UI within render functions using JSX, a declarative XML-like syntax that works within JavaScript.</source>
          <target state="translated">Reactは、すべてのコンポーネントがJavaScript内で機能する宣言型のXMLに似た構文であるJSXを使用して、レンダリング関数のUIを表します。</target>
        </trans-unit>
        <trans-unit id="0c74e086bdc4e1b0963bd8e65da5a6cf41a27ae4" translate="yes" xml:space="preserve">
          <source>In React, everything is just JavaScript. Not only are HTML structures expressed via JSX, the recent trends also tend to put CSS management inside JavaScript as well. This approach has its own benefits, but also comes with various trade-offs that may not seem worthwhile for every developer.</source>
          <target state="translated">Reactでは、すべてが単なるJavaScriptです。 HTML構造がJSXで表されるだけでなく、最近の傾向ではJavaScriptでCSS管理が行われる傾向もあります。 このアプローチには独自の利点がありますが、すべての開発者にとって価値のないさまざまなトレードオフが伴います。</target>
        </trans-unit>
        <trans-unit id="e01224b36d0e229721ad0a27e329111636e12ad4" translate="yes" xml:space="preserve">
          <source>In React, when a component&amp;rsquo;s state changes, it triggers the re-render of the entire component sub-tree, starting at that component as root. To avoid unnecessary re-renders of child components, you need to either use &lt;code&gt;PureComponent&lt;/code&gt; or implement &lt;code&gt;shouldComponentUpdate&lt;/code&gt; whenever you can. You may also need to use immutable data structures to make your state changes more optimization-friendly. However, in certain cases you may not be able to rely on such optimizations because &lt;code&gt;PureComponent/shouldComponentUpdate&lt;/code&gt; assumes the entire sub tree&amp;rsquo;s render output is determined by the props of the current component. If that is not the case, then such optimizations may lead to inconsistent DOM state.</source>
          <target state="translated">Reactでは、コンポーネントの状態が変化すると、コンポーネントのルートから開始され、コンポーネントサブツリー全体の再レンダリングがトリガーされます。 子コンポーネントの不必要な再レンダリングを回避するには、可能な &lt;code&gt;PureComponent&lt;/code&gt; を使用するか、 shouldComponentUpdateを実装する必要があります。 状態の変更を最適化により適したものにするために、不変のデータ構造を使用する必要もあります。 ただし、 &lt;code&gt;PureComponent/shouldComponentUpdate&lt;/code&gt; は、サブツリー全体のレンダリング出力が現在のコンポーネントの小道具によって決定されるため、特定の場合、そのような最適化に依存できない場合があります。 そうでない場合、そのような最適化は一貫性のないDOM状態につながる可能性があります。</target>
        </trans-unit>
        <trans-unit id="850444a28d2f3a6b68ecd836b4765b12b999a6f4" translate="yes" xml:space="preserve">
          <source>In Vue 2.x, &lt;code&gt;Vue.observable&lt;/code&gt; directly mutates the object passed to it, so that it is equivalent to the object returned, as &lt;a href=&quot;../guide/instance#Data-and-Methods&quot;&gt;demonstrated here&lt;/a&gt;. In Vue 3.x, a reactive proxy will be returned instead, leaving the original object non-reactive if mutated directly. Therefore, for future compatibility, we recommend always working with the object returned by &lt;code&gt;Vue.observable&lt;/code&gt;, rather than the object originally passed to it.</source>
          <target state="translated">Vue 2.xでは、 &lt;code&gt;Vue.observable&lt;/code&gt; は渡されたオブジェクトを直接変更するため、 &lt;a href=&quot;../guide/instance#Data-and-Methods&quot;&gt;ここに示すよう&lt;/a&gt;に、返されたオブジェクトと同等です 。 Vue 3.xでは、代わりにリアクティブプロキシが返され、直接変更された場合、元のオブジェクトは非アクティブのままになります。 したがって、将来の互換性のために、最初に渡されたオブジェクトではなく、常に &lt;code&gt;Vue.observable&lt;/code&gt; によって返されたオブジェクトを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="9ed32cf518158ed818bb81f6b262961d6f11529c" translate="yes" xml:space="preserve">
          <source>In Vue, a component is essentially a Vue instance with pre-defined options. Registering a component in Vue is straightforward:</source>
          <target state="translated">Vueでは、コンポーネントは基本的に定義済みのオプションを持つVueインスタンスです。 Vueへのコンポーネントの登録は簡単です：</target>
        </trans-unit>
        <trans-unit id="640123531948ef3b9eb7980eb088b64ca536081b" translate="yes" xml:space="preserve">
          <source>In Vue, a component&amp;rsquo;s dependencies are automatically tracked during its render, so the system knows precisely which components actually need to re-render when state changes. Each component can be considered to have &lt;code&gt;shouldComponentUpdate&lt;/code&gt; automatically implemented for you, without the nested component caveats.</source>
          <target state="translated">Vueはレンダリング中にコンポーネントの依存関係を自動的に追跡するため、システムは、状態が変化したときに実際に再レンダリングする必要があるコンポーネントを正確に認識します。 各コンポーネントは、ネストされたコンポーネントの警告なしに、 &lt;code&gt;shouldComponentUpdate&lt;/code&gt; が自動的に実装されると想定できます。</target>
        </trans-unit>
        <trans-unit id="18335155b76d4fad8194e8bdec133a87f6304254" translate="yes" xml:space="preserve">
          <source>In Vue, we also have &lt;a href=&quot;render-function&quot;&gt;render functions&lt;/a&gt; and even &lt;a href=&quot;render-function#JSX&quot;&gt;support JSX&lt;/a&gt;, because sometimes you do need that power. However, as the default experience we offer templates as a simpler alternative. Any valid HTML is also a valid Vue template, and this leads to a few advantages of its own:</source>
          <target state="translated">Vueには&lt;a href=&quot;render-function&quot;&gt;レンダリング機能&lt;/a&gt;もあり、 &lt;a href=&quot;render-function#JSX&quot;&gt;JSXをサポートする&lt;/a&gt;こともあります。 ただし、デフォルトのエクスペリエンスに代わるシンプルなテンプレートとしてテンプレートを提供しています。 有効なHTMLは有効なVueテンプレートでもあるため、いくつかのユニークな利点があります。</target>
        </trans-unit>
        <trans-unit id="030d10ad2ba05486f4deb446ef11d5e04ed0a4f7" translate="yes" xml:space="preserve">
          <source>In Webpack 4+, you can use the &lt;code&gt;mode&lt;/code&gt; option:</source>
          <target state="translated">Webpack 4+では、 &lt;code&gt;mode&lt;/code&gt; オプションを使用できます。</target>
        </trans-unit>
        <trans-unit id="316b5f68fcb7371b1ffc1163190a5aa5dbe2b1f0" translate="yes" xml:space="preserve">
          <source>In a large application, it is necessary to divide the whole app into components to make development manageable. We will talk a lot more about components &lt;a href=&quot;guide/components&quot;&gt;later in the guide&lt;/a&gt;, but here&amp;rsquo;s an (imaginary) example of what an app&amp;rsquo;s template might look like with components:</source>
          <target state="translated">大規模なアプリケーションの場合、開発を管理しやすくするために、アプリケーション全体をコンポーネントに分割する必要があります。 コンポーネントの詳細についてはガイドの後半で&lt;a href=&quot;guide/components&quot;&gt;学習します&lt;/a&gt;が、コンポーネントアプリテンプレートがどのように見えるかを示す（想像上の）例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b9d1075c896ee6a04f422ac930836698aaea2b0a" translate="yes" xml:space="preserve">
          <source>In a typical app, however, you&amp;rsquo;ll likely have an array of posts in &lt;code&gt;data&lt;/code&gt;:</source>
          <target state="translated">ただし、一般的なアプリでは、 &lt;code&gt;data&lt;/code&gt; に投稿の配列が含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="4f4e2e50a87f6ed41c151d22eff006d5759a7c9c" translate="yes" xml:space="preserve">
          <source>In addition to data properties, Vue instances expose a number of useful instance properties and methods. These are prefixed with &lt;code&gt;$&lt;/code&gt; to differentiate them from user-defined properties. For example:</source>
          <target state="translated">データプロパティに加えて、Vueインスタンスは多くの有用なインスタンスプロパティとメソッドを公開します。 これらには、ユーザー定義のプロパティと区別するために接頭辞 &lt;code&gt;$&lt;/code&gt; が付いています。 例えば：</target>
        </trans-unit>
        <trans-unit id="80219b5bbf693b189078749f367546bbbcf16aa2" translate="yes" xml:space="preserve">
          <source>In addition to text interpolation, we can also bind element attributes like this:</source>
          <target state="translated">テキスト補間に加えて、次のような要素属性をバインドすることもできます。</target>
        </trans-unit>
        <trans-unit id="a5994728cbddc196dcd0ef1858badc921029a1e1" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;code&gt;watch&lt;/code&gt; option, you can also use the imperative &lt;a href=&quot;../api/index#vm-watch&quot;&gt;vm.$watch API&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;watch&lt;/code&gt; オプションへのwatch追加、命令型&lt;a href=&quot;../api/index#vm-watch&quot;&gt;vm。&lt;/a&gt; $ watch APIを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="3e32faab7e104e620749fb0ceef10880dd5beb4c" translate="yes" xml:space="preserve">
          <source>In addition to the default set of directives shipped in core (&lt;code&gt;v-model&lt;/code&gt; and &lt;code&gt;v-show&lt;/code&gt;), Vue also allows you to register your own custom directives. Note that in Vue 2.0, the primary form of code reuse and abstraction is components - however there may be cases where you need some low-level DOM access on plain elements, and this is where custom directives would still be useful. An example would be focusing on an input element, like this one:</source>
          <target state="translated">コアに含まれるデフォルトのディレクティブセット（ &lt;code&gt;v-model&lt;/code&gt; および &lt;code&gt;v-show&lt;/code&gt; ）に加えて、Vueでは独自のカスタムディレクティブを登録することもできます。 Vue 2.0では、コードの再利用と抽象化の主な形式はコンポーネントですが、プレーンな要素には低レベルのDOMアクセスが必要な場合があり、カスタムディレクティブは依然として有用です。 例として、次の入力要素に注目してください。</target>
        </trans-unit>
        <trans-unit id="7d28a8c09a6baf609edfa9fc404ef67e9134cea0" translate="yes" xml:space="preserve">
          <source>In addition, &lt;code&gt;type&lt;/code&gt; can also be a custom constructor function and the assertion will be made with an &lt;code&gt;instanceof&lt;/code&gt; check. For example, given the following constructor function exists:</source>
          <target state="translated">さらに、 &lt;code&gt;type&lt;/code&gt; はカスタムコンストラクター関数でもあり、 &lt;code&gt;instanceof&lt;/code&gt; チェックでアサーションが作成されます 。 たとえば、次のコンストラクター関数がある場合：</target>
        </trans-unit>
        <trans-unit id="a858e091d2bb7c6e47ea11f2b98a3648f57a8e3b" translate="yes" xml:space="preserve">
          <source>In addition, each instance/component can still own and manage its own private state:</source>
          <target state="translated">さらに、各インスタンス/コンポーネントは、独自のプライベート状態を引き続き所有および管理できます。</target>
        </trans-unit>
        <trans-unit id="ee9ca0d32bcd7721be259373df69a9266664877b" translate="yes" xml:space="preserve">
          <source>In addition, every time the parent component is updated, all props in the child component will be refreshed with the latest value. This means you should &lt;strong&gt;not&lt;/strong&gt; attempt to mutate a prop inside a child component. If you do, Vue will warn you in the console.</source>
          <target state="translated">さらに、親コンポーネントが更新されるたびに、子コンポーネントのすべての小道具が最新の値で更新されます。 これは、子コンポーネントの小道具を変更しようとしてはなら&lt;strong&gt;ない&lt;/strong&gt;ことを意味します。 その場合、Vueはコンソールで警告します。</target>
        </trans-unit>
        <trans-unit id="2dbcc3158e141581bb6b942a272d46856d1b275a" translate="yes" xml:space="preserve">
          <source>In case you haven&amp;rsquo;t noticed yet, Vue performs DOM updates &lt;strong&gt;asynchronously&lt;/strong&gt;. Whenever a data change is observed, it will open a queue and buffer all the data changes that happen in the same event loop. If the same watcher is triggered multiple times, it will be pushed into the queue only once. This buffered de-duplication is important in avoiding unnecessary calculations and DOM manipulations. Then, in the next event loop &amp;ldquo;tick&amp;rdquo;, Vue flushes the queue and performs the actual (already de-duped) work. Internally Vue tries native &lt;code&gt;Promise.then&lt;/code&gt;, &lt;code&gt;MutationObserver&lt;/code&gt;, and &lt;code&gt;setImmediate&lt;/code&gt; for the asynchronous queuing and falls back to &lt;code&gt;setTimeout(fn, 0)&lt;/code&gt;.</source>
          <target state="translated">まだ認識していない場合、VueはDOM更新を&lt;strong&gt;非同期的に&lt;/strong&gt;実行し&lt;strong&gt;ます&lt;/strong&gt; 。 データの変更が観察されるたびに、キューを開き、同じイベントループで発生したデータの変更をバッファします。 同じウォッチャーが複数回トリガーされた場合、キューにプッシュされるのは1回だけです。 このバッファリングされた重複排除は、不必要な計算とDOM操作を回避するために重要です。 次に、次のイベントループ「ティック」で、Vueはキューをフラッシュし、実際の（既に重複排除された）作業を実行します。 内部的には、Vue &lt;code&gt;Promise.then&lt;/code&gt; ネイティブPromise.then、 &lt;code&gt;MutationObserver&lt;/code&gt; 、および非同期キューイング用の &lt;code&gt;setImmediate&lt;/code&gt; が &lt;code&gt;setTimeout(fn, 0)&lt;/code&gt; フォールバックします。</target>
        </trans-unit>
        <trans-unit id="aaebcaa832cc872ee62580c8ab1928e2e9c98159" translate="yes" xml:space="preserve">
          <source>In case you prefer setting up your own build setup from scratch, you will need to manually configure webpack with &lt;a href=&quot;https://vue-loader.vuejs.org&quot;&gt;vue-loader&lt;/a&gt;. To learn more about webpack itself, check out &lt;a href=&quot;https://webpack.js.org/configuration/&quot;&gt;their official docs&lt;/a&gt; and &lt;a href=&quot;https://webpack.academy/p/the-core-concepts&quot;&gt;Webpack Academy&lt;/a&gt;.</source>
          <target state="translated">独自のビルドセットアップをゼロからセットアップする場合は、 &lt;a href=&quot;https://vue-loader.vuejs.org&quot;&gt;vue-loader&lt;/a&gt;を使用してwebpackを手動で構成する必要があります。 Webpack自体の詳細について&lt;a href=&quot;https://webpack.js.org/configuration/&quot;&gt;は、公式ドキュメント&lt;/a&gt;および&lt;a href=&quot;https://webpack.academy/p/the-core-concepts&quot;&gt;Webpack Academyを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="14c7c4ad32435f4b7855ae564fc2ea7c8c969cd8" translate="yes" xml:space="preserve">
          <source>In cases like above, when &lt;em&gt;only&lt;/em&gt; the default slot is provided content, the component&amp;rsquo;s tags can be used as the slot&amp;rsquo;s template. This allows us to use &lt;code&gt;v-slot&lt;/code&gt; directly on the component:</source>
          <target state="translated">このような場合、デフォルトスロット&lt;em&gt;のみ&lt;/em&gt;がコンテンツを提供される場合、コンポーネントのタグをスロットのテンプレートとして使用できます。 これにより、コンポーネントは &lt;code&gt;v-slot&lt;/code&gt; 直接使用できます。</target>
        </trans-unit>
        <trans-unit id="4aa7f570dcb37787dd83b543d84d7b6f36311f16" translate="yes" xml:space="preserve">
          <source>In cases like this, we can mark components as &lt;code&gt;functional&lt;/code&gt;, which means that they&amp;rsquo;re stateless (no &lt;a href=&quot;../api/index#Options-Data&quot;&gt;reactive data&lt;/a&gt;) and instanceless (no &lt;code&gt;this&lt;/code&gt; context). A &lt;strong&gt;functional component&lt;/strong&gt; looks like this:</source>
          <target state="translated">そのような場合、コンポーネントを &lt;code&gt;functional&lt;/code&gt; としてマークできます 。 これは、コンポーネントがステートレス（ &lt;a href=&quot;../api/index#Options-Data&quot;&gt;リアクティブデータなし&lt;/a&gt; ）およびインスタンスレス（ &lt;code&gt;this&lt;/code&gt; コンテキストなし）であることを意味します。 &lt;strong&gt;機能コンポーネント&lt;/strong&gt;は次のようになります。</target>
        </trans-unit>
        <trans-unit id="7115593cdb5e7c5bc03b8752b74312ce66ca58e0" translate="yes" xml:space="preserve">
          <source>In committed code, prop definitions should always be as detailed as possible, specifying at least type(s).</source>
          <target state="translated">コミットされたコードでは、少なくともタイプごとに、プロップ定義を常に可能な限り詳細にする必要があります。</target>
        </trans-unit>
        <trans-unit id="7bfd4fed8d270a9c14023eb29a927d5b4c0ecab4" translate="yes" xml:space="preserve">
          <source>In comparison, &lt;code&gt;v-show&lt;/code&gt; is much simpler - the element is always rendered regardless of initial condition, with CSS-based toggling.</source>
          <target state="translated">それに比べて、 &lt;code&gt;v-show&lt;/code&gt; ははるかに簡単です。 CSSベースの切り替えにより、要素は常に初期条件に関係なくレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="d22711c22222a7cebea6f132a3ff7ea151c0f818" translate="yes" xml:space="preserve">
          <source>In comparison, a method invocation will &lt;strong&gt;always&lt;/strong&gt; run the function whenever a re-render happens.</source>
          <target state="translated">対照的に、メソッドコールは、再レンダリングが発生するたびに&lt;strong&gt;常に&lt;/strong&gt;関数を実行します。</target>
        </trans-unit>
        <trans-unit id="07f3fad6ea47761ecb752634045422b5f91f5f10" translate="yes" xml:space="preserve">
          <source>In development, Vue will warn you if a component is ever provided incorrectly formatted props, helping you catch potential sources of error.</source>
          <target state="translated">開発中に、Vueは、コンポーネントに不正な形式の小道具が提供されている場合に警告を発し、潜在的なエラーの原因を見つけるのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="9a8c437a03d6e7a0e6f5698507548a4d93c2d7fe" translate="yes" xml:space="preserve">
          <source>In every subcomponent of a &lt;code&gt;new Vue&lt;/code&gt; instance, this root instance can be accessed with the &lt;code&gt;$root&lt;/code&gt; property. For example, in this root instance:</source>
          <target state="translated">&lt;code&gt;new Vue&lt;/code&gt; インスタンスのすべてのサブコンポーネントは、 &lt;code&gt;$root&lt;/code&gt; プロパティを介してこのルートインスタンスにアクセスできます。 たとえば、次のルートインスタンス：</target>
        </trans-unit>
        <trans-unit id="097d80c1c9662de13d79de78efe60775b83d52ef" translate="yes" xml:space="preserve">
          <source>In fact, you can think of dependency injection as sort of &amp;ldquo;long-range props&amp;rdquo;, except:</source>
          <target state="translated">実際、依存性注入は、次の場合を除いて、一種の「長距離支柱」と考えることができます。</target>
        </trans-unit>
        <trans-unit id="7bc506457177d40f6c274f20bb75f39f6557a677" translate="yes" xml:space="preserve">
          <source>In general, whenever something can be achieved in plain JavaScript, we want to avoid introducing a special syntax like filters to take care of the same concern. Here&amp;rsquo;s how you can replace Vue&amp;rsquo;s built-in directive filters:</source>
          <target state="translated">一般に、プレーンなJavaScriptで何かを達成できるときはいつでも、フィルターのような特別な構文を導入して同じ懸念に対処することを避けたいと思います。 Vueの組み込みディレクティブフィルターを置き換える方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="ae9ee797c12050e7d3af19214520a26751de6044" translate="yes" xml:space="preserve">
          <source>In large applications, we may need to divide the app into smaller chunks and only load a component from the server when it&amp;rsquo;s needed. To make that easier, Vue allows you to define your component as a factory function that asynchronously resolves your component definition. Vue will only trigger the factory function when the component needs to be rendered and will cache the result for future re-renders. For example:</source>
          <target state="translated">大規模なアプリケーションの場合、アプリを小さなチャンクに分割し、必要な場合にのみサーバーからコンポーネントをロードする必要があります。 これを簡単にするために、Vueではコンポーネント定義を非同期的に解決するファクトリ関数としてコンポーネントを定義できます。 Vueは、コンポーネントをレンダリングする必要がある場合にのみファクトリー機能をトリガーし、将来の再レンダリングのために結果をキャッシュします。 例えば：</target>
        </trans-unit>
        <trans-unit id="447ec0f63a19e47502450736e07a06c1647bfe27" translate="yes" xml:space="preserve">
          <source>In many Vue projects, global components will be defined using &lt;code&gt;Vue.component&lt;/code&gt;, followed by &lt;code&gt;new Vue({ el: '#container' })&lt;/code&gt; to target a container element in the body of every page.</source>
          <target state="translated">多くのVueプロジェクトは、 &lt;code&gt;Vue.component&lt;/code&gt; を使用してグローバルコンポーネントを定義してから、 &lt;code&gt;new Vue({ el: '#container' })&lt;/code&gt; を各ページの本文のコンテナー要素に追加します。</target>
        </trans-unit>
        <trans-unit id="53ccc949f90a192c185068356f4f8dd5029eb128" translate="yes" xml:space="preserve">
          <source>In many cases though, you&amp;rsquo;ll still run into strange behavior (e.g. &lt;code&gt;0.035.toFixed(2)&lt;/code&gt; rounds up to &lt;code&gt;0.04&lt;/code&gt;, but &lt;code&gt;0.045&lt;/code&gt; rounds down to &lt;code&gt;0.04&lt;/code&gt;). To work around these issues, you can use the &lt;a href=&quot;http://openexchangerates.github.io/accounting.js/&quot;&gt;&lt;code&gt;accounting&lt;/code&gt;&lt;/a&gt; library to more reliably format currencies.</source>
          <target state="translated">ただし、多くの場合、依然として奇妙に動作します（たとえば、 &lt;code&gt;0.035.toFixed(2)&lt;/code&gt; は &lt;code&gt;0.04&lt;/code&gt; までですが、 &lt;code&gt;0.045&lt;/code&gt; は 0.04に切り捨てられます）。 これらの問題を回避するには、 &lt;a href=&quot;http://openexchangerates.github.io/accounting.js/&quot;&gt; &lt;code&gt;accounting&lt;/code&gt; &lt;/a&gt;ライブラリを使用して、より確実に通貨をフォーマットします。</target>
        </trans-unit>
        <trans-unit id="c390053bb2e4d5c93dcd01989be3871147f8ba8c" translate="yes" xml:space="preserve">
          <source>In many cases, you may want the same behavior on &lt;code&gt;bind&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt;, but don&amp;rsquo;t care about the other hooks. For example:</source>
          <target state="translated">多くの場合、 &lt;code&gt;bind&lt;/code&gt; と &lt;code&gt;update&lt;/code&gt; は同じ動作を必要としますが、他のフックは気にしません。 例えば：</target>
        </trans-unit>
        <trans-unit id="a111823d1c021115efbe8d836af1c2f184002aa1" translate="yes" xml:space="preserve">
          <source>In most cases, Vue can automatically figure out when the transition has finished. By default, Vue waits for the first &lt;code&gt;transitionend&lt;/code&gt; or &lt;code&gt;animationend&lt;/code&gt; event on the root transition element. However, this may not always be desired - for example, we may have a choreographed transition sequence where some nested inner elements have a delayed transition or a longer transition duration than the root transition element.</source>
          <target state="translated">ほとんどの場合、Vueは移行がいつ終了したかを自動的に判断できます。 デフォルトでは、Vueはルート遷移要素の最初の &lt;code&gt;transitionend&lt;/code&gt; または &lt;code&gt;animationend&lt;/code&gt; イベントを待ちます。 ただし、これは常に望ましいとは限りません。 たとえば、一部の入れ子になった内部要素がルート遷移要素よりも遅延した遷移または長い遷移期間を持つ振付遷移シーケンスがある場合があります。</target>
        </trans-unit>
        <trans-unit id="5bb963c73fa00775099a6347ea2baa7e2a3e2c72" translate="yes" xml:space="preserve">
          <source>In most cases, it&amp;rsquo;s best to avoid reaching into other component instances or manually manipulating DOM elements. There are cases, however, when it can be appropriate.</source>
          <target state="translated">ほとんどの場合、他のコンポーネントインスタンスにアクセスしたり、DOM要素を手動で操作したりしないでください。 ただし、適切な場合があります。</target>
        </trans-unit>
        <trans-unit id="b6c86a77b0b04c3ca150f69dd5331a352786535a" translate="yes" xml:space="preserve">
          <source>In most cases, reaching into the parent makes your application more difficult to debug and understand, especially if you mutate data in the parent. When looking at that component later, it will be very difficult to figure out where that mutation came from.</source>
          <target state="translated">ほとんどの場合、親に到達すると、特に親のデータを変更する場合に、アプリケーションのデバッグと理解が難しくなります。 後でコンポーネントを見ると、突然変異がどこから来たのかを知ることは非常に困難です。</target>
        </trans-unit>
        <trans-unit id="419bd771510d306d9921bc5eb07cb10e9cc4094a" translate="yes" xml:space="preserve">
          <source>In natural English, adjectives and other descriptors do typically appear before the nouns, while exceptions require connector words. For example:</source>
          <target state="translated">自然英語では、通常、形容詞や他の記述子は名詞の前に現れますが、連結語は例外です。 例えば：</target>
        </trans-unit>
        <trans-unit id="e5c5a11b792a6a6c3c9dbe85b25f28ab2feb0a79" translate="yes" xml:space="preserve">
          <source>In normal use cases you shouldn&amp;rsquo;t have to call this method yourself. Prefer controlling the lifecycle of child components in a data-driven fashion using &lt;code&gt;v-if&lt;/code&gt; and &lt;code&gt;v-for&lt;/code&gt;.</source>
          <target state="translated">通常の使用例では、このメソッドを自分で呼び出す必要はありません。 &lt;code&gt;v-if&lt;/code&gt; および &lt;code&gt;v-for&lt;/code&gt; を使用して、データ駆動型の方法で子コ​​ンポーネントのライフサイクルを制御することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4d273535df632e4e8ae9260566c4f2451d604b5c" translate="yes" xml:space="preserve">
          <source>In our case, let&amp;rsquo;s make that point the &lt;code&gt;tree-folder&lt;/code&gt; component. We know the child that creates the paradox is the &lt;code&gt;tree-folder-contents&lt;/code&gt; component, so we&amp;rsquo;ll wait until the &lt;code&gt;beforeCreate&lt;/code&gt; lifecycle hook to register it:</source>
          <target state="translated">この場合、そのポイントを &lt;code&gt;tree-folder&lt;/code&gt; コンポーネントにします。 パラドックスを作成する子は &lt;code&gt;tree-folder-contents&lt;/code&gt; コンポーネントであることがわかっているため、 &lt;code&gt;beforeCreate&lt;/code&gt; ライフサイクルフックが登録されるまで待機します。</target>
        </trans-unit>
        <trans-unit id="8fc49bd00753f672db39f74244a5be9e57229d11" translate="yes" xml:space="preserve">
          <source>In our experience, it&amp;rsquo;s better to &lt;em&gt;always&lt;/em&gt; add a unique key, so that you and your team simply never have to worry about these edge cases. Then in the rare, performance-critical scenarios where object constancy isn&amp;rsquo;t necessary, you can make a conscious exception.</source>
          <target state="translated">私たちの経験では、あなたとあなたのチームがこれらのエッジケースについて心配する必要がないように、一意のキーを追加することは&lt;em&gt;常に&lt;/em&gt;良いです。 第二に、オブジェクトの恒常性が必要とされない、パフォーマンスが重要なまれなシナリオでは、意識的な例外を作成できます。</target>
        </trans-unit>
        <trans-unit id="a7da1d060c31fa0a41ee9f1ab266ae7cb095dc2c" translate="yes" xml:space="preserve">
          <source>In situations where computed properties are not feasible (e.g. inside nested &lt;code&gt;v-for&lt;/code&gt; loops), you can use a method:</source>
          <target state="translated">計算されたプロパティを実行できない状況（ネストされた &lt;code&gt;v-for&lt;/code&gt; ループなど）では、次のメソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="0f3807437f4c73a9a48f84e425ea613aac544cc0" translate="yes" xml:space="preserve">
          <source>In some cases, we may need &amp;ldquo;two-way binding&amp;rdquo; for a prop. Unfortunately, true two-way binding can create maintenance issues, because child components can mutate the parent without the source of that mutation being obvious in both the parent and the child.</source>
          <target state="translated">場合によっては、小道具に「双方向バインディング」が必要な場合があります。 残念なことに、子コンポーネントは親と子の両方で変異の原因を明らかにすることなく親を変異させることができるため、真の双方向バインディングはメンテナンスの問題を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="1940a94800d8a762af2d6a0c31713ae2122b98c5" translate="yes" xml:space="preserve">
          <source>In such cases you can specify an explicit transition duration (in milliseconds) using the &lt;code&gt;duration&lt;/code&gt; prop on the &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; component:</source>
          <target state="translated">このような場合、 &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; コンポーネントの &lt;code&gt;duration&lt;/code&gt; プロパティを使用して、明示的な移行期間（ミリ秒単位）を指定できます。</target>
        </trans-unit>
        <trans-unit id="eb7b8e5881c6c604581549ecd2e87a6d5a150d11" translate="yes" xml:space="preserve">
          <source>In that case, the &lt;code&gt;.native&lt;/code&gt; listener in the parent would silently break. There would be no errors, but the &lt;code&gt;onFocus&lt;/code&gt; handler wouldn&amp;rsquo;t be called when we expected it to.</source>
          <target state="translated">その場合、親の &lt;code&gt;.native&lt;/code&gt; リスナーは黙って中断します。 エラーは発生しませんが、 &lt;code&gt;onFocus&lt;/code&gt; ハンドラーは期待どおりに呼び出されません。</target>
        </trans-unit>
        <trans-unit id="8c963edc9ad3f82196cbef815577797afa016c7d" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://cdn.jsdelivr.net/npm/vue/dist/&quot;&gt;&lt;code&gt;dist/&lt;/code&gt; directory of the NPM package&lt;/a&gt; you will find many different builds of Vue.js. Here&amp;rsquo;s an overview of the difference between them:</source>
          <target state="translated">&lt;a href=&quot;https://cdn.jsdelivr.net/npm/vue/dist/&quot;&gt;NPMパッケージの&lt;/a&gt; &lt;code&gt;dist/&lt;/code&gt; ディレクトリには、Vue.jsのさまざまなビルドがあります 。 これらの違いの概要は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="1f40ffd220cc5bc553599168b68b9a1d61abb356" translate="yes" xml:space="preserve">
          <source>In the above example, the handler will only be called if &lt;code&gt;$event.key&lt;/code&gt; is equal to &lt;code&gt;'PageDown'&lt;/code&gt;.</source>
          <target state="translated">上記の例では、 &lt;code&gt;$event.key&lt;/code&gt; が &lt;code&gt;'PageDown'&lt;/code&gt; に等しい場合にのみハンドラーが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4792c37807464f6bc3e88fc7e7650b64df280b7d" translate="yes" xml:space="preserve">
          <source>In the case of boolean attributes, where their mere existence implies &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;v-bind&lt;/code&gt; works a little differently. In this example:</source>
          <target state="translated">単なる存在が &lt;code&gt;true&lt;/code&gt; を意味するブール属性の場合 、 &lt;code&gt;v-bind&lt;/code&gt; はわずかに異なる動作をします。 この例では：</target>
        </trans-unit>
        <trans-unit id="bb18b983202c7fe25cd6f2bdde9cc28d610f7cf0" translate="yes" xml:space="preserve">
          <source>In the console, enter &lt;code&gt;app4.todos.push({ text: 'New item' })&lt;/code&gt;. You should see a new item appended to the list.</source>
          <target state="translated">コンソールで、 &lt;code&gt;app4.todos.push({ text: 'New item' })&lt;/code&gt; 。 新しいアイテムがリストに追加されます。</target>
        </trans-unit>
        <trans-unit id="95310bafe87b1cd719e23dc5ad106b31232edbf5" translate="yes" xml:space="preserve">
          <source>In the example above, &lt;code&gt;currentTabComponent&lt;/code&gt; can contain either:</source>
          <target state="translated">上記の例では、 &lt;code&gt;currentTabComponent&lt;/code&gt; には次のいずれかを含めることができます。</target>
        </trans-unit>
        <trans-unit id="d04b574a39526af2226086b101aac912fd89cf7c" translate="yes" xml:space="preserve">
          <source>In the example above, either &lt;code&gt;appear&lt;/code&gt; attribute or &lt;code&gt;v-on:appear&lt;/code&gt; hook will cause an appear transition.</source>
          <target state="translated">上記の例では、 &lt;code&gt;appear&lt;/code&gt; 属性または &lt;code&gt;v-on:appear&lt;/code&gt; フックのいずれかにより、外観が変化します。</target>
        </trans-unit>
        <trans-unit id="62a3df45a50f5bfc852f235683adae371735692a" translate="yes" xml:space="preserve">
          <source>In the future, you can consult the &lt;a href=&quot;../api/index#Instance-Properties&quot;&gt;API reference&lt;/a&gt; for a full list of instance properties and methods.</source>
          <target state="translated">将来、インスタンスのプロパティとメソッドの完全なリストについては、 &lt;a href=&quot;../api/index#Instance-Properties&quot;&gt;APIリファレンス&lt;/a&gt;を参照できます。</target>
        </trans-unit>
        <trans-unit id="61e01a36c0b76503c82d3b378dd53c34675f6cd7" translate="yes" xml:space="preserve">
          <source>In the parent, we can support this feature by adding a &lt;code&gt;postFontSize&lt;/code&gt; data property:</source>
          <target state="translated">親は、 &lt;code&gt;postFontSize&lt;/code&gt; データプロパティを追加することにより、この機能をサポートできます。</target>
        </trans-unit>
        <trans-unit id="bd63d2b019faa52d4307ffd579cbe3aabbbc0774" translate="yes" xml:space="preserve">
          <source>In the two examples above, we happen to pass string values, but &lt;em&gt;any&lt;/em&gt; type of value can actually be passed to a prop.</source>
          <target state="translated">上記の2つの例では、文字列値を渡すことができますが、実際には&lt;em&gt;任意の&lt;/em&gt;タイプの値をプロップに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="dd9b704f820476ed2050280cb293d51fab68d129" translate="yes" xml:space="preserve">
          <source>In these cases, you can also use the &lt;code&gt;key&lt;/code&gt; attribute to transition between different states of the same element. Instead of using &lt;code&gt;v-if&lt;/code&gt; and &lt;code&gt;v-else&lt;/code&gt;, the above example could be rewritten as:</source>
          <target state="translated">これらの場合、 &lt;code&gt;key&lt;/code&gt; 属性を使用して、同じ要素の異なる状態間を遷移することもできます。 &lt;code&gt;v-if&lt;/code&gt; および &lt;code&gt;v-else&lt;/code&gt; を使用する代わりに、上記の例を次のように書き換えることができます。</target>
        </trans-unit>
        <trans-unit id="270ed3979fc2c798270823f8c8f6f6d7b3c0fe7a" translate="yes" xml:space="preserve">
          <source>In these cases, you can define your components as plain JavaScript objects:</source>
          <target state="translated">これらの場合、コンポーネントをプレーンなJavaScriptオブジェクトとして定義できます。</target>
        </trans-unit>
        <trans-unit id="2a3f7f2ff8f42344402992b4038b21897eb06f33" translate="yes" xml:space="preserve">
          <source>In this case, &lt;code&gt;filterA&lt;/code&gt;, defined with a single argument, will receive the value of &lt;code&gt;message&lt;/code&gt;, and then the &lt;code&gt;filterB&lt;/code&gt; function will be called with the result of &lt;code&gt;filterA&lt;/code&gt; passed into &lt;code&gt;filterB&lt;/code&gt;&amp;lsquo;s single argument.</source>
          <target state="translated">この場合、単一の引数で定義された &lt;code&gt;filterA&lt;/code&gt; は &lt;code&gt;message&lt;/code&gt; の値を受け取り、 &lt;code&gt;filterA&lt;/code&gt; の結果はfilterAの単一の引数に渡され、filterB関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="51f8bfe75335d793eeba7a8a459bb7388dddda84" translate="yes" xml:space="preserve">
          <source>In this case, two different values for &lt;code&gt;class&lt;/code&gt; are defined:</source>
          <target state="translated">この場合、 &lt;code&gt;class&lt;/code&gt; 2つの異なる値が定義されています。</target>
        </trans-unit>
        <trans-unit id="5a41e15d26b4745e4e15ab1dd537dc8ed976bef4" translate="yes" xml:space="preserve">
          <source>In this case, using the &lt;code&gt;watch&lt;/code&gt; option allows us to perform an asynchronous operation (accessing an API), limit how often we perform that operation, and set intermediary states until we get a final answer. None of that would be possible with a computed property.</source>
          <target state="translated">この場合、 &lt;code&gt;watch&lt;/code&gt; オプションを使用すると、非同期操作（APIへのアクセス）を実行し、その操作の実行頻度を制限し、最終回答が利用可能になるまで中間状態を設定できます。 計算されたプロパティでは不可能です。</target>
        </trans-unit>
        <trans-unit id="c77863cfdbda9f76e5977da8ad51a7454c3913a0" translate="yes" xml:space="preserve">
          <source>In this component, all descendants of &lt;code&gt;&amp;lt;google-map&amp;gt;&lt;/code&gt; needed access to a &lt;code&gt;getMap&lt;/code&gt; method, in order to know which map to interact with. Unfortunately, using the &lt;code&gt;$parent&lt;/code&gt; property didn&amp;rsquo;t scale well to more deeply nested components. That&amp;rsquo;s where dependency injection can be useful, using two new instance options: &lt;code&gt;provide&lt;/code&gt; and &lt;code&gt;inject&lt;/code&gt;.</source>
          <target state="translated">このコンポーネントでは、 &lt;code&gt;&amp;lt;google-map&amp;gt;&lt;/code&gt; のすべての子孫は、どのマップと対話するかを知るために &lt;code&gt;getMap&lt;/code&gt; メソッドにアクセスする必要がありました。 残念ながら、 &lt;code&gt;$parent&lt;/code&gt; プロパティの使用は、深くネストされたコンポーネントではうまく機能しませんでした。 ここで、依存性注入は2つの新しいインスタンスオプションを &lt;code&gt;provide&lt;/code&gt; ます： provideと &lt;code&gt;inject&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="87c32991080d62b6805604f45e74c2b9dbeebfae" translate="yes" xml:space="preserve">
          <source>In this example, we&amp;rsquo;ve chosen to name the object containing all our slot props &lt;code&gt;slotProps&lt;/code&gt;, but you can use any name you like.</source>
          <target state="translated">この例では、すべてのスロットprops &lt;code&gt;slotProps&lt;/code&gt; を含むオブジェクトに名前を付けることを選択しましたが 、好きな名前を使用できます。</target>
        </trans-unit>
        <trans-unit id="2fe86abd2c9033c394d4520eeee5520850f8fc84" translate="yes" xml:space="preserve">
          <source>In this example, when &lt;code&gt;eventName&lt;/code&gt;&amp;lsquo;s value is &lt;code&gt;&quot;focus&quot;&lt;/code&gt;, &lt;code&gt;v-on:[eventName]&lt;/code&gt; will be equivalent to &lt;code&gt;v-on:focus&lt;/code&gt;.</source>
          <target state="translated">この例では、 &lt;code&gt;eventName&lt;/code&gt; の値が &lt;code&gt;&quot;focus&quot;&lt;/code&gt; 場合、 &lt;code&gt;v-on:[eventName]&lt;/code&gt; は &lt;code&gt;v-on:focus&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="f0f426e265453130f5824fc7740883c382b44aac" translate="yes" xml:space="preserve">
          <source>In-template expressions are very convenient, but they are meant for simple operations. Putting too much logic in your templates can make them bloated and hard to maintain. For example:</source>
          <target state="translated">テンプレート内の式は非常に便利ですが、単純な操作を目的としています。 テンプレートにあまりにも多くのロジックを配置すると、テンプレートが肥大化し、保守が困難になる場合があります。 例えば：</target>
        </trans-unit>
        <trans-unit id="14f1365ed8291193e8cace94a5ade677414a902d" translate="yes" xml:space="preserve">
          <source>Individual nodes</source>
          <target state="translated">個々のノード</target>
        </trans-unit>
        <trans-unit id="62ac95bcfcaea7ee52c78bc13557436b1b7e8b9e" translate="yes" xml:space="preserve">
          <source>Information for React Developers</source>
          <target state="translated">React開発者向けの情報</target>
        </trans-unit>
        <trans-unit id="a44289ee2d1bd2c3982f79cb3d372150789f0e39" translate="yes" xml:space="preserve">
          <source>Inline Templates</source>
          <target state="translated">インラインテンプレート</target>
        </trans-unit>
        <trans-unit id="d6a0f79f1797a1db2dda5bb9c7106c3808038d31" translate="yes" xml:space="preserve">
          <source>Inside &lt;code&gt;v-for&lt;/code&gt; blocks we have full access to parent scope properties. &lt;code&gt;v-for&lt;/code&gt; also supports an optional second argument for the index of the current item.</source>
          <target state="translated">&lt;code&gt;v-for&lt;/code&gt; ブロック内では、親スコープのプロパティにフルアクセスできます。 &lt;code&gt;v-for&lt;/code&gt; は、現在のアイテムインデックスのオプションの2番目の引数もサポートします。</target>
        </trans-unit>
        <trans-unit id="df082a453d9989c585680725b67df591a35ff7cd" translate="yes" xml:space="preserve">
          <source>Install a Vue.js plugin. If the plugin is an Object, it must expose an &lt;code&gt;install&lt;/code&gt; method. If it is a function itself, it will be treated as the install method. The install method will be called with Vue as the argument.</source>
          <target state="translated">Vue.jsプラグインをインストールします。 プラグインがオブジェクトの場合、 &lt;code&gt;install&lt;/code&gt; メソッドを公開する必要があります。 関数自体の場合、インストール方法として扱われます。 installメソッドは、Vueを引数として呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="76cfe08fef21bde292ada7bf7c0aed2cb8221c4a" translate="yes" xml:space="preserve">
          <source>Instance DOM Options</source>
          <target state="translated">インスタンスDOMオプション</target>
        </trans-unit>
        <trans-unit id="ff364c35cc3bd1adde1c021645e9ea7d4cfa6d27" translate="yes" xml:space="preserve">
          <source>Instance Lifecycle Hooks</source>
          <target state="translated">インスタンスのライフサイクルフック</target>
        </trans-unit>
        <trans-unit id="973fbc314de18d3a6034820e1c145f308866aa0a" translate="yes" xml:space="preserve">
          <source>Instance Methods / Data</source>
          <target state="translated">インスタンスメソッド/データ</target>
        </trans-unit>
        <trans-unit id="072a5ac49177533e4f02b944ecefcab1e2a8405f" translate="yes" xml:space="preserve">
          <source>Instance Methods / Events</source>
          <target state="translated">インスタンスメソッド/イベント</target>
        </trans-unit>
        <trans-unit id="217d7335931d2bbee9b9778f9ae71c201b5b2ba6" translate="yes" xml:space="preserve">
          <source>Instance Methods / Lifecycle</source>
          <target state="translated">インスタンスメソッド/ライフサイクル</target>
        </trans-unit>
        <trans-unit id="227bff69876b172aeee6752f9b003b6b9627ce6c" translate="yes" xml:space="preserve">
          <source>Instance Properties</source>
          <target state="translated">インスタンスのプロパティ</target>
        </trans-unit>
        <trans-unit id="b4f963982241acc7a523f3640f34c5d31eeeb04c" translate="yes" xml:space="preserve">
          <source>Instead of a computed property, we can define the same function as a method. For the end result, the two approaches are indeed exactly the same. However, the difference is that &lt;strong&gt;computed properties are cached based on their reactive dependencies.&lt;/strong&gt; A computed property will only re-evaluate when some of its reactive dependencies have changed. This means as long as &lt;code&gt;message&lt;/code&gt; has not changed, multiple access to the &lt;code&gt;reversedMessage&lt;/code&gt; computed property will immediately return the previously computed result without having to run the function again.</source>
          <target state="translated">計算されたプロパティの代わりに、メソッドと同じ関数を定義できます。 最終結果については、2つのアプローチは実際にはまったく同じです。 違いは、 &lt;strong&gt;計算されたプロパティが事後依存に基づいてキャッシュされること&lt;/strong&gt; &lt;strong&gt;です。&lt;/strong&gt; 計算されたプロパティは、リアクティブな依存関係の一部が変更された場合にのみ再評価されます。 つまり、 &lt;code&gt;message&lt;/code&gt; が変更されていない限り、 &lt;code&gt;reversedMessage&lt;/code&gt; 計算プロパティへの複数アクセスは、関数を再度実行することなく、以前に計算された結果をすぐに返します。</target>
        </trans-unit>
        <trans-unit id="1b4b07b3bfde3c37c88bc87409ab0932e79deaf1" translate="yes" xml:space="preserve">
          <source>Instead of binding directly to a method name, we can also use methods in an inline JavaScript statement:</source>
          <target state="translated">メソッド名に直接バインドする代わりに、インラインJavaScriptステートメントでメソッドを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="e8cfda798ff1c2483b2312e929e673f1a5762a04" translate="yes" xml:space="preserve">
          <source>Instead of hard-coding the content for each todo, we can let the parent component take control by making every todo a slot, then binding &lt;code&gt;todo&lt;/code&gt; as a slot prop:</source>
          <target state="translated">各仕事の内容をハードコーディングする代わりに、すべての仕事をスロットに残し、その &lt;code&gt;todo&lt;/code&gt; をスロットの小道具としてバインドして、コントロールを親コンポーネントに残すことができます。</target>
        </trans-unit>
        <trans-unit id="ce7ba8338e1ddfeb030dce1f2c4b233f9f6e562c" translate="yes" xml:space="preserve">
          <source>Instead of using this interface to watch events emitted by the store itself (e.g. &lt;code&gt;store.on('mutation', callback)&lt;/code&gt;), a new method &lt;code&gt;store.subscribe&lt;/code&gt; is introduced. Typical usage inside a plugin would be:</source>
          <target state="translated">このインターフェイスを使用して、ストア自体がstores.on（ 'mutation'、callback）（ &lt;code&gt;store.on('mutation', callback)&lt;/code&gt; などのイベントを保存するstore.on（ 'mutation'、callback）の代わりに、新しいメソッド &lt;code&gt;store.subscribe&lt;/code&gt; が導入されました。 だった。 プラグインでの一般的な使用例を次に示します。</target>
        </trans-unit>
        <trans-unit id="c042f3d9b71b32db250543be269d410c99d13527" translate="yes" xml:space="preserve">
          <source>Instead of:</source>
          <target state="translated">の代わりに：</target>
        </trans-unit>
        <trans-unit id="c45f60db0ef01bd679b8e4fcc3944f81d86bbcba" translate="yes" xml:space="preserve">
          <source>Instead, &lt;strong&gt;a component&amp;rsquo;s &lt;code&gt;data&lt;/code&gt; option must be a function&lt;/strong&gt;, so that each instance can maintain an independent copy of the returned data object:</source>
          <target state="translated">代わりに&lt;strong&gt;、コンポーネントの &lt;code&gt;data&lt;/code&gt; オプション&lt;/strong&gt; &lt;strong&gt;は関数でなければなりません&lt;/strong&gt; 。 これにより、各インスタンスは、返されたデータオブジェクトの独立したコピーを持つことができます。</target>
        </trans-unit>
        <trans-unit id="de7d48ff36cd012d479333deddf79964e9f6ef8d" translate="yes" xml:space="preserve">
          <source>Instead, retrieve reactive data directly.</source>
          <target state="translated">代わりに、リアクティブデータを直接取得します。</target>
        </trans-unit>
        <trans-unit id="3f19e4bbba14c8cf11229dc99c18e65e5c769ff2" translate="yes" xml:space="preserve">
          <source>Instead, we recommend combining the two prefixes into &lt;code&gt;$_&lt;/code&gt;, as a convention for user-defined private properties that guarantee no conflicts with Vue.</source>
          <target state="translated">代わりに、Vueと競合しないようにするために、ユーザー定義のプライベートプロパティのルールとして、2つのプレフィックスを &lt;code&gt;$_&lt;/code&gt; 結合することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="c287d7ed2127cbc1824f61b424108dfdd71928ca" translate="yes" xml:space="preserve">
          <source>Instead, we want each component instance to only manage its own data. For that to happen, each instance must generate a unique data object. In JavaScript, this can be accomplished by returning the object in a function:</source>
          <target state="translated">代わりに、各コンポーネントインスタンスが独自のデータのみを管理するようにしてください。 そのためには、各インスタンスが一意のデータオブジェクトを生成する必要があります。 JavaScriptでは、オブジェクトを関数として返すことでこれを実現できます。</target>
        </trans-unit>
        <trans-unit id="ce0cc627a5064aba30be950b8ad2481ae6f54dff" translate="yes" xml:space="preserve">
          <source>Instead, you must always specify the name of the slot if you wish to use the shorthand:</source>
          <target state="translated">代わりに、略語を使用する場合は、常にスロットの名前を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="e8afed2c977a300920d4774ed7aaf9deb5512321" translate="yes" xml:space="preserve">
          <source>Instead, you should use an array of &lt;strong&gt;objects&lt;/strong&gt; so that &lt;code&gt;v-model&lt;/code&gt; can update the field on the object. For example:</source>
          <target state="translated">代わりに、 &lt;strong&gt;オブジェクトの&lt;/strong&gt;配列を使用して、 &lt;code&gt;v-model&lt;/code&gt; が&lt;strong&gt;オブジェクトの&lt;/strong&gt;フィールドを更新できるようにする必要があり&lt;strong&gt;ます&lt;/strong&gt; 。 例えば：</target>
        </trans-unit>
        <trans-unit id="379c57f76110aace6f90c62a627b81f0dbbb50b8" translate="yes" xml:space="preserve">
          <source>Integrating 3rd-Party Routers</source>
          <target state="translated">サードパーティのルーター統合</target>
        </trans-unit>
        <trans-unit id="17e18e17ef79745c1f295aa1481626993cd060bc" translate="yes" xml:space="preserve">
          <source>Interestingly, there are quite a few similarities in how Angular and Vue are addressing these AngularJS issues.</source>
          <target state="translated">興味深いことに、AngularとVueがこれらのAngularJSの問題に対処する方法には、かなりの数の類似点があります。</target>
        </trans-unit>
        <trans-unit id="a02ab300dc1e2d3aba3bbbb2499900bcfcafa6b5" translate="yes" xml:space="preserve">
          <source>Internally, scoped slots work by wrapping your slot content in a function passed a single argument:</source>
          <target state="translated">内部的に、スコープ付きスロットは、単一の引数を渡された関数でスロットの内容をラップすることにより機能します。</target>
        </trans-unit>
        <trans-unit id="6a9858c9bf3149456595f98943cf88e41039822e" translate="yes" xml:space="preserve">
          <source>Interpolation</source>
          <target state="translated">Interpolation</target>
        </trans-unit>
        <trans-unit id="8c3512fba6689d1150362df7589fdd0259a7670c" translate="yes" xml:space="preserve">
          <source>Interpolation on textareas (&lt;code&gt;&amp;lt;textarea&amp;gt;{{text}}&amp;lt;/textarea&amp;gt;&lt;/code&gt;) won't work. Use &lt;code&gt;v-model&lt;/code&gt; instead.</source>
          <target state="translated">テキスト領域の補間（ &lt;code&gt;&amp;lt;textarea&amp;gt;{{text}}&amp;lt;/textarea&amp;gt;&lt;/code&gt; textarea&amp;gt; {{text}} &amp;lt;/ textarea&amp;gt;）は機能しません。 代わりに &lt;code&gt;v-model&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="74ebae54b757a56e2bc6baaef1874a08b06640a9" translate="yes" xml:space="preserve">
          <source>Interpolation within Attributes &lt;sup&gt;removed&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;削除された&lt;/sup&gt;属性の補間</target>
        </trans-unit>
        <trans-unit id="fb6efaa267240ec6e8121cc0f552cf518066ff57" translate="yes" xml:space="preserve">
          <source>Interpolation within attributes is no longer valid. For example:</source>
          <target state="translated">属性の補間は無効になっています。 例えば：</target>
        </trans-unit>
        <trans-unit id="10efc8300e4de32a0bfa767fd16f85f0fca31378" translate="yes" xml:space="preserve">
          <source>Interpolations</source>
          <target state="translated">Interpolations</target>
        </trans-unit>
        <trans-unit id="b4e6a310890f62289340d7802703b8c2586c6d86" translate="yes" xml:space="preserve">
          <source>Intro</source>
          <target state="translated">Intro</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="52da9e9435184a9a9be23be1c62462bd7a0b062b" translate="yes" xml:space="preserve">
          <source>It also makes it much easier for designers and less experienced developers to parse and contribute to the codebase.</source>
          <target state="translated">また、デザイナーおよび経験の浅い開発者がコードベースを分析し、貢献することをはるかに容易にします。</target>
        </trans-unit>
        <trans-unit id="242a4787e446f757f3ac8fde1ce7050c81ebb1cc" translate="yes" xml:space="preserve">
          <source>It can also be used to force replacement of an element/component instead of reusing it. This can be useful when you want to:</source>
          <target state="translated">また、要素/コンポーネントを再利用する代わりに強制的に置換するためにも使用できます。 これは、次の場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="bf94cb95d2a6204ed6e671a125bae5746aa13ec0" translate="yes" xml:space="preserve">
          <source>It cannot generate projects from user-built &lt;a href=&quot;https://cli.vuejs.org/guide/plugins-and-presets.html#presets&quot;&gt;presets&lt;/a&gt;, which can be especially useful for enterprise environments with pre-established conventions.</source>
          <target state="translated">ユーザーが作成した&lt;a href=&quot;https://cli.vuejs.org/guide/plugins-and-presets.html#presets&quot;&gt;プリセット&lt;/a&gt;からプロジェクトを生成することはできません。 これは、ルールが事前に確立されているエンタープライズ環境で特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="37750b9b71f6bf6ac1b868dd8c8eae2a17dab1cf" translate="yes" xml:space="preserve">
          <source>It depends on a few factors:</source>
          <target state="translated">それはいくつかの要因に依存します：</target>
        </trans-unit>
        <trans-unit id="70b676c863532ffe7d78b42611fe7b4038b9d1dc" translate="yes" xml:space="preserve">
          <source>It does not allow any configuration during project generation, while Vue CLI runs on top of an upgradeable runtime dependency that can be extended via &lt;a href=&quot;https://cli.vuejs.org/guide/plugins-and-presets.html#plugins&quot;&gt;plugins&lt;/a&gt;.</source>
          <target state="translated">Vue CLIは、 &lt;a href=&quot;https://cli.vuejs.org/guide/plugins-and-presets.html#plugins&quot;&gt;プラグイン&lt;/a&gt;を介して拡張できるアップグレード可能なランタイム依存関係で実行されますが、プロジェクト生成中の構成は許可しません。</target>
        </trans-unit>
        <trans-unit id="240dd640eed272f9ee3a7566a0beee5ed35abc4a" translate="yes" xml:space="preserve">
          <source>It generally takes more time to navigate through nested sub-directories, than scrolling through a single &lt;code&gt;components&lt;/code&gt; directory.</source>
          <target state="translated">一般に、単一の &lt;code&gt;components&lt;/code&gt; ディレクトリをスクロールするよりも、ネストされたサブディレクトリをナビゲートするのに時間がかかります。</target>
        </trans-unit>
        <trans-unit id="23f753667cec6acdcb632b79682184c7b7b2e7aa" translate="yes" xml:space="preserve">
          <source>It is a very common need to call &lt;code&gt;event.preventDefault()&lt;/code&gt; or &lt;code&gt;event.stopPropagation()&lt;/code&gt; inside event handlers. Although we can do this easily inside methods, it would be better if the methods can be purely about data logic rather than having to deal with DOM event details.</source>
          <target state="translated">イベントハンドラで &lt;code&gt;event.preventDefault()&lt;/code&gt; または &lt;code&gt;event.stopPropagation()&lt;/code&gt; を呼び出すことは、非常に一般的なニーズです。 これはメソッドで簡単に実行できますが、DOMイベントの詳細を処理するよりも、メソッドが純粋にデータロジックに関するものである方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="4e8708ee403dc8bba50752b03a6d6d4b4352acb0" translate="yes" xml:space="preserve">
          <source>It is also possible to add an &amp;ldquo;else block&amp;rdquo; with &lt;code&gt;v-else&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;v-else&lt;/code&gt; を使用して「elseブロック」を追加することもできます 。</target>
        </trans-unit>
        <trans-unit id="b1e03924ee6970dca117928a311e1533f2014100" translate="yes" xml:space="preserve">
          <source>It is no longer supported to have &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt;s with the same name in the same template. When a slot is rendered it is &amp;ldquo;used up&amp;rdquo; and cannot be rendered elsewhere in the same render tree. If you must render the same content in multiple places, pass that content as a prop.</source>
          <target state="translated">同じテンプレートに同じ名前 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; を含めることはサポートされなくなりました。 スロットがレンダリングされると、スロットは「使い果たされ」、同じレンダリングツリーの他の場所でレンダリングできません。 同じコンテンツを複数の場所でレンダリングする必要がある場合は、そのコンテンツを小道具として渡します。</target>
        </trans-unit>
        <trans-unit id="d9093e211b6a6e41ed8691587734eee35acd8952" translate="yes" xml:space="preserve">
          <source>It is now prohibited to replace a component instance&amp;rsquo;s root $data. This prevents some edge cases in the reactivity system and makes the component state more predictable (especially with type-checking systems).</source>
          <target state="translated">コンポーネントインスタンスのルート$データを置き換えることは現在禁止されています。 これにより、リアクティブシステムの一部のエッジケースが防止され、コンポーネントの状態がより予測可能になります（特に型チェックシステムの場合）。</target>
        </trans-unit>
        <trans-unit id="7ae415c6af2657c64c911e26e414175ec588acbe" translate="yes" xml:space="preserve">
          <source>It is often a good idea to bind to a style object directly so that the template is cleaner:</source>
          <target state="translated">多くの場合、テンプレートがクリーンになるように、スタイルオブジェクトに直接バインドすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="1576748fb05ab8ce1c2e6c48f332f0a5704cb1b7" translate="yes" xml:space="preserve">
          <source>It is often overlooked that the source of truth in Vue applications is the raw &lt;code&gt;data&lt;/code&gt; object - a Vue instance only proxies access to it. Therefore, if you have a piece of state that should be shared by multiple instances, you can share it by identity:</source>
          <target state="translated">Vueアプリケーションの真のソースは生の &lt;code&gt;data&lt;/code&gt; オブジェクトであることがしばしば見過ごされています。 Vueインスタンスはプロキシアクセスのみ。 したがって、複数のインスタンスで共有する必要がある状態がある場合は、IDで共有できます。</target>
        </trans-unit>
        <trans-unit id="41c09ac650c82070b83c3fbdfde0270b1b2629a2" translate="yes" xml:space="preserve">
          <source>It is recommended to provide a &lt;code&gt;key&lt;/code&gt; attribute with &lt;code&gt;v-for&lt;/code&gt; whenever possible, unless the iterated DOM content is simple, or you are intentionally relying on the default behavior for performance gains.</source>
          <target state="translated">繰り返しDOMコンテンツが単純であるか、パフォーマンスを改善するためにデフォルトの動作に意図的に依存していない限り、可能な場合は常に &lt;code&gt;v-for&lt;/code&gt; で &lt;code&gt;key&lt;/code&gt; 属性を提供することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="158301256c28a9020989b897a8c306e76ca398cb" translate="yes" xml:space="preserve">
          <source>It mostly works well, but the delayed state updates can cause strange behavior. For example, click on the &lt;code&gt;Result&lt;/code&gt; tab and try entering &lt;code&gt;9.999&lt;/code&gt; into one of those inputs. When the input loses focus, its value will update to &lt;code&gt;$10.00&lt;/code&gt;. When looking at the calculated total however, you&amp;rsquo;ll see that &lt;code&gt;9.999&lt;/code&gt; is what&amp;rsquo;s stored in our data. The version of reality that the user sees is out of sync!</source>
          <target state="translated">それはかなりうまくいきますが、遅延状態を更新すると奇妙な動作を引き起こす可能性があります。 たとえば、[ &lt;code&gt;Result&lt;/code&gt; ]タブをクリックして、これらの入力のいずれかに &lt;code&gt;9.999&lt;/code&gt; を入力してみてください。 入力がフォーカスを失うと、その値は &lt;code&gt;$10.00&lt;/code&gt; 更新されます。 ただし、計算された合計を見ると、データに &lt;code&gt;9.999&lt;/code&gt; が含まれていることがわかります。 ユーザーに表示される実際のバージョンは同期されていません！</target>
        </trans-unit>
        <trans-unit id="5c7b220831f2244cc3f3b0618d0e11be1b6ee123" translate="yes" xml:space="preserve">
          <source>It only offers a single template that assumes you&amp;rsquo;re building a single-page application, while Vue offers a wide variety of default options for various purposes and build systems.</source>
          <target state="translated">Vueには、目的やビルドシステムごとに異なるデフォルトオプションがありますが、単一のページアプリケーションを作成することを前提に、単一のテンプレートのみを提供します。</target>
        </trans-unit>
        <trans-unit id="d429d77b592d7a12031c03e84167b80ce44e01ac" translate="yes" xml:space="preserve">
          <source>It requires saving the &lt;code&gt;picker&lt;/code&gt; to the component instance, when it&amp;rsquo;s possible that only lifecycle hooks need access to it. This isn&amp;rsquo;t terrible, but it could be considered clutter.</source>
          <target state="translated">ライフサイクルフックのみにアクセスする必要がある場合は、コンポーネントインスタンスに &lt;code&gt;picker&lt;/code&gt; を保存する必要があります。 これはひどいことではありませんが、混乱する可能性があります。</target>
        </trans-unit>
        <trans-unit id="2b6375c65084a2fbe49aa4574ab7168511258809" translate="yes" xml:space="preserve">
          <source>It should be noted that &lt;strong&gt;this limitation does &lt;em&gt;not&lt;/em&gt; apply if you are using string templates from one of the following sources&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;次のソースの文字列テンプレートを使用している場合&lt;/strong&gt; 、 &lt;strong&gt;この制限&lt;/strong&gt;は&lt;strong&gt;適用&lt;/strong&gt; &lt;strong&gt;され&lt;/strong&gt;ないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="59833298d090a415397bceadf5ff0bd3a66b0de9" translate="yes" xml:space="preserve">
          <source>It will render:</source>
          <target state="translated">レンダリングされます：</target>
        </trans-unit>
        <trans-unit id="e8131a6805d411d3c8871b6a4ec5d84d6d47f8b3" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s actually possible to transition between any number of elements, either by using multiple &lt;code&gt;v-if&lt;/code&gt;s or binding a single element to a dynamic property. For example:</source>
          <target state="translated">実際、複数の &lt;code&gt;v-if&lt;/code&gt; を使用するか、単一の要素を動的プロパティにバインドすることにより、任意の数の要素間を遷移できます。 例えば：</target>
        </trans-unit>
        <trans-unit id="1f0eec334e7b1ca80024f1af665b1bef3cd4f2a0" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s also a good idea to explicitly add &lt;code&gt;v-bind:css=&quot;false&quot;&lt;/code&gt; for JavaScript-only transitions so that Vue can skip the CSS detection. This also prevents CSS rules from accidentally interfering with the transition.</source>
          <target state="translated">VueがCSS検出をスキップできるように、 &lt;code&gt;v-bind:css=&quot;false&quot;&lt;/code&gt; をJavaScriptのみの遷移に明示的に追加することもお勧めします。 これにより、CSSルールが誤って移行を防ぐことも防止されます。</target>
        </trans-unit>
        <trans-unit id="ea8bac071f56eff3c599037448c4745e3f78f107" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s common for an app to be organized into a tree of nested components:</source>
          <target state="translated">通常、アプリはネストされたコンポーネントのツリーで編成されます。</target>
        </trans-unit>
        <trans-unit id="529381524bf490d0fa30c365c3a6643e1ab87406" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s easier to locate the handler function implementations within your JS code by skimming the HTML template.</source>
          <target state="translated">HTMLテンプレートをスキミングすることにより、JSコードでハンドラー関数の実装を見つけるのが簡単になります。</target>
        </trans-unit>
        <trans-unit id="3cb4d6d25e874e731b1a5bd3fcf3592c111ac7d3" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s easy to toggle the presence of an element, too:</source>
          <target state="translated">要素の存在を簡単に切り替えることができます。</target>
        </trans-unit>
        <trans-unit id="e8a1b4e2622ff4412a28418661a05714360fa046" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s important to note that many of these limitations are intentional design decisions made by the create-react-app team and they do have their advantages. For example, as long as your project&amp;rsquo;s needs are very simple and you never need to &amp;ldquo;eject&amp;rdquo; to customize your build process, you&amp;rsquo;ll be able to update it as a dependency. You can read more about the &lt;a href=&quot;https://github.com/facebookincubator/create-react-app#philosophy&quot;&gt;differing philosophy here&lt;/a&gt;.</source>
          <target state="translated">これらの制限の多くは、create-react-appチームが意図的に行った設計上の決定であり、利点があることに注意することが重要です。 たとえば、プロジェクトのニーズが非常に単純で、ビルドプロセスをカスタマイズするために「イジェクト」する必要がない限り、プロジェクトを依存関係として更新できます。 &lt;a href=&quot;https://github.com/facebookincubator/create-react-app#philosophy&quot;&gt;さまざまな哲学の&lt;/a&gt;詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="eba37741216bb34acb503b7bccb11a46196d44f7" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s important to note that you should never replace the original state object in your actions - the components and the store need to share reference to the same object in order for mutations to be observed.</source>
          <target state="translated">アクション内の元の状態オブジェクトは決して置き換えてはならないことに注意することが重要です。 コンポーネントとストアは、突然変異を観察するために同じオブジェクトへの参照を共有する必要があります。</target>
        </trans-unit>
        <trans-unit id="471a1dd215ec1df9cced88727c09d955351467bb" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s rare that global components are ever referenced in JavaScript, so following a convention for JavaScript makes less sense.</source>
          <target state="translated">グローバルコンポーネントはJavaScriptで参照されることはほとんどないため、グローバルJavaScriptルールに従うことはほとんど意味がありません。</target>
        </trans-unit>
        <trans-unit id="6dbbee3b3142d705f32e4ea9a33d016015abd4b0" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s recommended to wrap the entire contents in a new element, like this:</source>
          <target state="translated">次のように、コンテンツ全体を新しい要素でラップすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="fb69fc29789fe29cf276273312bfe243527744c9" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s sometimes useful to emit a specific value with an event. For example, we may want the &lt;code&gt;&amp;lt;blog-post&amp;gt;&lt;/code&gt; component to be in charge of how much to enlarge the text by. In those cases, we can use &lt;code&gt;$emit&lt;/code&gt;&amp;lsquo;s 2nd parameter to provide this value:</source>
          <target state="translated">イベントで特定の値を発行すると便利な場合があります。 たとえば、テキストの展開量を &lt;code&gt;&amp;lt;blog-post&amp;gt;&lt;/code&gt; コンポーネントに決定させることができます。 これらの場合、 &lt;code&gt;$emit&lt;/code&gt; 2番目のパラメーターを使用してこの値を提供できます。</target>
        </trans-unit>
        <trans-unit id="0e4779d05c5a545a6bd2f3323d3fe430a37f5d7b" translate="yes" xml:space="preserve">
          <source>JSX</source>
          <target state="translated">JSX</target>
        </trans-unit>
        <trans-unit id="acc00892c117ef61e4f9ab3d9331cb95e0f00caa" translate="yes" xml:space="preserve">
          <source>JSX vs Templates</source>
          <target state="translated">JSXとテンプレート</target>
        </trans-unit>
        <trans-unit id="de6da78717be0e5457a235494d2556f25b2595f3" translate="yes" xml:space="preserve">
          <source>JavaScript Hooks</source>
          <target state="translated">JavaScriptフック</target>
        </trans-unit>
        <trans-unit id="b2bdc615d0b1e25db680b5ea62ca160d5e24612e" translate="yes" xml:space="preserve">
          <source>JavaScript&amp;rsquo;s native &lt;code&gt;.filter&lt;/code&gt; can also manage much more complex filtering operations, because you have access to the full power of JavaScript within computed properties. For example, if you wanted to find all active users and case-insensitively match against both their name and email:</source>
          <target state="translated">JavaScriptのネイティブ &lt;code&gt;.filter&lt;/code&gt; は、計算されたプロパティでJavaScriptのすべての機能にアクセスできるため、はるかに複雑なフィルタリング操作を管理できます。 たとえば、すべてのアクティブなユーザーを検索し、名前とメールの両方で大文字と小文字を区別しないで一致させる場合：</target>
        </trans-unit>
        <trans-unit id="be4bdcf0feb91c266b9ddb8530b4392dc9b7e35e" translate="yes" xml:space="preserve">
          <source>Join the Vue.js Community!</source>
          <target state="translated">Vue.jsコミュニティに参加しましょう！</target>
        </trans-unit>
        <trans-unit id="61cbea5eb9c474841bbd881e5ab4ec7c34f644ee" translate="yes" xml:space="preserve">
          <source>Just like with HTML elements, it&amp;rsquo;s often useful to be able to pass content to a component, like this:</source>
          <target state="translated">HTML要素と同様に、次のようにコンテンツをコンポーネントに渡すことができると便利な場合がよくあります。</target>
        </trans-unit>
        <trans-unit id="027fca0ba6266bff1583f80f2ced47d62346398f" translate="yes" xml:space="preserve">
          <source>Just to support relatively little markup in a template:</source>
          <target state="translated">テンプレートで比較的小さなマークアップをサポートするためだけに：</target>
        </trans-unit>
        <trans-unit id="d66c8dcebdd2226f233aec952c13c29103045708" translate="yes" xml:space="preserve">
          <source>Keep in mind, however, that components built with this pattern are still inherently fragile. For example, imagine we add a new &lt;code&gt;&amp;lt;google-map-region&amp;gt;&lt;/code&gt; component and when &lt;code&gt;&amp;lt;google-map-markers&amp;gt;&lt;/code&gt; appears within that, it should only render markers that fall within that region:</source>
          <target state="translated">ただし、このパターンで構築されたコンポーネントは本質的に脆弱であることに注意してください。 たとえば、新しい &lt;code&gt;&amp;lt;google-map-region&amp;gt;&lt;/code&gt; コンポーネントを追加し、その中に &lt;code&gt;&amp;lt;google-map-markers&amp;gt;&lt;/code&gt; が表示された場合、その領域内のマーカーのみをレンダリングするとします。</target>
        </trans-unit>
        <trans-unit id="6da44efd57019ab966f7e6f60ef152a26f453f56" translate="yes" xml:space="preserve">
          <source>Key Codes</source>
          <target state="translated">キーコード</target>
        </trans-unit>
        <trans-unit id="c2970ed4e4bcc1bc09ed400bc881c877da7aa156" translate="yes" xml:space="preserve">
          <source>Key Modifiers</source>
          <target state="translated">キー修飾子</target>
        </trans-unit>
        <trans-unit id="3e3436c44b271fc9f4ddc4a5694abe70d414be31" translate="yes" xml:space="preserve">
          <source>Keyed &lt;code&gt;v-for&lt;/code&gt;&lt;sup&gt;essential&lt;/sup&gt;</source>
          <target state="translated">&lt;code&gt;v-for&lt;/code&gt; key with &lt;sup&gt;essential&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="c75c97df0a3fadad8262ee8e7d09b174b5374e8e" translate="yes" xml:space="preserve">
          <source>Keyed v-for</source>
          <target state="translated">キー付きV-for</target>
        </trans-unit>
        <trans-unit id="9cf20628a323dc6f8efd78ac79c3f26ce8cbd3a6" translate="yes" xml:space="preserve">
          <source>Keys:</source>
          <target state="translated">Keys:</target>
        </trans-unit>
        <trans-unit id="bb23b6faea770d3a5e16178dbc59584678b24aa0" translate="yes" xml:space="preserve">
          <source>Knockout</source>
          <target state="translated">Knockout</target>
        </trans-unit>
        <trans-unit id="bc0968409752cc62e7fa235b2d725b7b8c2c6eb5" translate="yes" xml:space="preserve">
          <source>Knockout was a pioneer in the MVVM and dependency tracking spaces and its reactivity system is very similar to Vue&amp;rsquo;s. Its &lt;a href=&quot;http://knockoutjs.com/documentation/browser-support.html&quot;&gt;browser support&lt;/a&gt; is also very impressive considering everything it does, with support back to IE6! Vue on the other hand only supports IE9+.</source>
          <target state="translated">KnockoutはMVVMおよび依存関係追跡スペースの先駆者であり、その反応システムはVueと非常によく似ています。 &lt;a href=&quot;http://knockoutjs.com/documentation/browser-support.html&quot;&gt;ブラウザのサポート&lt;/a&gt;もすべての機能を考慮して非常に印象的で、IE6に戻りました！ 一方、VueはIE9 +のみをサポートします。</target>
        </trans-unit>
        <trans-unit id="a8d8aa2835fc3129b6920d079159549c156fa63c" translate="yes" xml:space="preserve">
          <source>Large applications can often grow in complexity, due to multiple pieces of state scattered across many components and the interactions between them. To solve this problem, Vue offers &lt;a href=&quot;https://github.com/vuejs/vuex&quot;&gt;vuex&lt;/a&gt;: our own Elm-inspired state management library. It even integrates into &lt;a href=&quot;https://github.com/vuejs/vue-devtools&quot;&gt;vue-devtools&lt;/a&gt;, providing zero-setup access to &lt;a href=&quot;https://raw.githubusercontent.com/vuejs/vue-devtools/master/media/demo.gif&quot;&gt;time travel debugging&lt;/a&gt;.</source>
          <target state="translated">大規模なアプリケーションは、多くのコンポーネントに散在する複数の状態とそれらの間の相互作用により、より複雑になることがよくあります。 Vueは、この問題を解決するために&lt;a href=&quot;https://github.com/vuejs/vuex&quot;&gt;vuex&lt;/a&gt;を提供しています。 これは、独自のElmに触発された状態管理ライブラリです。 さらに、vue-devtools &lt;a href=&quot;https://github.com/vuejs/vue-devtools&quot;&gt;と&lt;/a&gt;統合して、 &lt;a href=&quot;https://raw.githubusercontent.com/vuejs/vue-devtools/master/media/demo.gif&quot;&gt;タイムトラベルデバッグ&lt;/a&gt;へのセットアップアクセスをゼロにします。</target>
        </trans-unit>
        <trans-unit id="72406d3bbbb2f67e5c1e70370160f257ae0ba129" translate="yes" xml:space="preserve">
          <source>Lastly, the styling in Vue&amp;rsquo;s single-file components is very flexible. Through &lt;a href=&quot;https://github.com/vuejs/vue-loader&quot;&gt;vue-loader&lt;/a&gt;, you can use any preprocessor, post-processor, and even deep integration with &lt;a href=&quot;https://vue-loader.vuejs.org/en/features/css-modules.html&quot;&gt;CSS Modules&lt;/a&gt; &amp;ndash; all within the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">最後に、Vueの単一ファイルコンポーネントのスタイリングは非常に柔軟です。 &lt;a href=&quot;https://github.com/vuejs/vue-loader&quot;&gt;vue-loader&lt;/a&gt;を使用すると、すべての &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 要素内で任意のプリプロセッサー、ポストプロセッサー、および&lt;a href=&quot;https://vue-loader.vuejs.org/en/features/css-modules.html&quot;&gt;CSSモジュール&lt;/a&gt;との深い統合を使用できます。</target>
        </trans-unit>
        <trans-unit id="8c1e35e7e7dfbb463a1648c90eafb0e342703312" translate="yes" xml:space="preserve">
          <source>Latest stable version: 2.6.10</source>
          <target state="translated">最新の安定バージョン：2.6.10</target>
        </trans-unit>
        <trans-unit id="be0c59519c5e2b5fe13b0f7ff4bf498d719b4a7e" translate="yes" xml:space="preserve">
          <source>Learn more about dependency injection in &lt;a href=&quot;../api/index#provide-inject&quot;&gt;the API doc&lt;/a&gt;.</source>
          <target state="translated">依存性注入の詳細については、 &lt;a href=&quot;../api/index#provide-inject&quot;&gt;APIドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="13b64b875178e4752802d8b808be11083d0726fa" translate="yes" xml:space="preserve">
          <source>Learning Curve</source>
          <target state="translated">学習曲線</target>
        </trans-unit>
        <trans-unit id="0ccfd80d1c7d66dca3a0e6fc501777ae369d0d15" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s dive into a simple example where a &lt;code&gt;render&lt;/code&gt; function would be practical. Say you want to generate anchored headings:</source>
          <target state="translated">&lt;code&gt;render&lt;/code&gt; 機能が実用的な簡単な例を見てみましょう。 固定見出しを生成するとします。</target>
        </trans-unit>
        <trans-unit id="8ae601ac39b42a0ce2f774ed4c117e44fb796a7c" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say you have a list of todos:</source>
          <target state="translated">Todoのリストがあるとしましょう：</target>
        </trans-unit>
        <trans-unit id="a0a681ce0e5b2dc3f8e587da2d3c87e6868974b2" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say you want to make a custom directive that allows you to pin elements to your page using fixed positioning. We could create a custom directive where the value updates the vertical positioning in pixels, like this:</source>
          <target state="translated">固定位置を使用して要素をページに固定できるカスタムディレクティブを作成するとします。 次のように、値がピクセル単位で垂直位置を更新するカスタムディレクティブを作成できます。</target>
        </trans-unit>
        <trans-unit id="2a858d496553eddcff13ca95af4e5a9c35dff1f6" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say you&amp;rsquo;re building a file directory tree, like in Finder or File Explorer. You might have a &lt;code&gt;tree-folder&lt;/code&gt; component with this template:</source>
          <target state="translated">FinderやFile Explorerのようなファイルディレクトリツリーを構築しているとします。 次のテンプレートを含む &lt;code&gt;tree-folder&lt;/code&gt; コンポーネントがある場合があります 。</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">MITライセンスの下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="963a6d001df804654ef3a7108a4f994e4ad3043d" translate="yes" xml:space="preserve">
          <source>Lifecycle Diagram</source>
          <target state="translated">ライフサイクル図</target>
        </trans-unit>
        <trans-unit id="2404fc2fb7f08994c22ba2e88d94f0289f80699e" translate="yes" xml:space="preserve">
          <source>Lifecycle Events (in the order they are called)</source>
          <target state="translated">ライフサイクルイベント（呼び出し順序）</target>
        </trans-unit>
        <trans-unit id="4e48f698aadae9546857e8298a5bcd17843d6036" translate="yes" xml:space="preserve">
          <source>Lifecycle Hooks</source>
          <target state="translated">ライフサイクルフック</target>
        </trans-unit>
        <trans-unit id="014bcd654c60d5250fad2123b073b9c0ac3340f6" translate="yes" xml:space="preserve">
          <source>Links</source>
          <target state="translated">Links</target>
        </trans-unit>
        <trans-unit id="34959794ca38ca0b2f99ab6b512cce0bcb1574fd" translate="yes" xml:space="preserve">
          <source>List Entering/Leaving Transitions</source>
          <target state="translated">移行の開始/終了リスト</target>
        </trans-unit>
        <trans-unit id="ec66c1c1aadebafa9aea3a9e5e78a70374186e6e" translate="yes" xml:space="preserve">
          <source>List Move Transitions</source>
          <target state="translated">リスト移動遷移</target>
        </trans-unit>
        <trans-unit id="97c5ac00feef7e4e4dea6fbc37427502208da0a0" translate="yes" xml:space="preserve">
          <source>List Rendering</source>
          <target state="translated">リストのレンダリング</target>
        </trans-unit>
        <trans-unit id="66a9aa57e0afea8cd99a3f75a8c6d3489f047106" translate="yes" xml:space="preserve">
          <source>List Transitions</source>
          <target state="translated">遷移のリスト</target>
        </trans-unit>
        <trans-unit id="78b30713ef8e682cdf6d1254269a44a2a34f3330" translate="yes" xml:space="preserve">
          <source>Listen for a custom event on the current vm. Events can be triggered by &lt;code&gt;vm.$emit&lt;/code&gt;. The callback will receive all the additional arguments passed into these event-triggering methods.</source>
          <target state="translated">現在のvmでカスタムイベントをリッスンします。 イベントは &lt;code&gt;vm.$emit&lt;/code&gt; によってトリガーできます。 コールバックは、これらのイベントトリガーメソッドに渡される追加の引数を受け取ります。</target>
        </trans-unit>
        <trans-unit id="e49f77d4075cf41a76ef9beacb50d0f6b9aefcc0" translate="yes" xml:space="preserve">
          <source>Listen for a custom event, but only once. The listener will be removed once it triggers for the first time.</source>
          <target state="translated">カスタムイベントをリッスンしますが、一度だけです。 リスナーは、最初にトリガーされたときに削除されます。</target>
        </trans-unit>
        <trans-unit id="43e6ad0a03b8b1a9446a11f0e19551c8b4dc800d" translate="yes" xml:space="preserve">
          <source>Listen for an event only once with &lt;code&gt;$once(eventName, eventHandler)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$once(eventName, eventHandler)&lt;/code&gt; リッスンします</target>
        </trans-unit>
        <trans-unit id="696df6abce8abb54e8cd9a4d788b6b19b808783e" translate="yes" xml:space="preserve">
          <source>Listen for an event with &lt;code&gt;$on(eventName, eventHandler)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$on(eventName, eventHandler)&lt;/code&gt; イベントをリッスンします</target>
        </trans-unit>
        <trans-unit id="2a358a8843be76d3c49082380039fa0679262430" translate="yes" xml:space="preserve">
          <source>Listening for Native Events on Components with &lt;code&gt;v-on&lt;/code&gt;&lt;sup&gt;changed&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;変更された&lt;/sup&gt;コンポーネントに対するネイティブイベントをリッスンする</target>
        </trans-unit>
        <trans-unit id="6d24ce075567f8634478a57941ae0b0eecc75979" translate="yes" xml:space="preserve">
          <source>Listening to Child Components Events</source>
          <target state="translated">子コンポーネントイベントのリッスン</target>
        </trans-unit>
        <trans-unit id="4068e29f0d00dd78b6cb63522d95b7fd8466fe66" translate="yes" xml:space="preserve">
          <source>Listening to Events</source>
          <target state="translated">イベントを聞く</target>
        </trans-unit>
        <trans-unit id="454c823d312bb21fb3768d64892637753b93fb76" translate="yes" xml:space="preserve">
          <source>Listening to custom events on a child component (the handler is called when &amp;ldquo;my-event&amp;rdquo; is emitted on the child):</source>
          <target state="translated">子コンポーネントのカスタムイベントをリッスンします（子が「my-event」を起動すると、ハンドラーが呼び出されます）。</target>
        </trans-unit>
        <trans-unit id="8631bfe9aed59c0e3f179ac4e96195bbc6860960" translate="yes" xml:space="preserve">
          <source>Listening to the kebab-cased version will have no effect:</source>
          <target state="translated">ケバブ版を聞いても効果はありません。</target>
        </trans-unit>
        <trans-unit id="ba43e280bc7445e5b4f1d1db31b10f615d04d7e1" translate="yes" xml:space="preserve">
          <source>Local Registration</source>
          <target state="translated">ローカル登録</target>
        </trans-unit>
        <trans-unit id="5aa492ab1eff8abbb7c26a1b8e7859024fe0d373" translate="yes" xml:space="preserve">
          <source>Local Registration in a Module System</source>
          <target state="translated">モジュールシステムでのローカル登録</target>
        </trans-unit>
        <trans-unit id="c21bde3b85066869a4def12bbecd2597d5f1d6cf" translate="yes" xml:space="preserve">
          <source>Logic is now decoupled from the presentation layer, making maintenance (change/extension of logic) much easier.</source>
          <target state="translated">ロジックはプレゼンテーション層から分離されており、メンテナンス（ロジックの変更/拡張）がはるかに簡単になりました。</target>
        </trans-unit>
        <trans-unit id="9ba90cc7a29b593100819375e54c2166bf952ca3" translate="yes" xml:space="preserve">
          <source>Maintaining State</source>
          <target state="translated">状態を維持する</target>
        </trans-unit>
        <trans-unit id="b0f21a5d13bd1abc123a654d0af01af3751372ba" translate="yes" xml:space="preserve">
          <source>Make Vue ignore custom elements defined outside of Vue (e.g., using the Web Components APIs). Otherwise, it will throw a warning about an &lt;code&gt;Unknown custom element&lt;/code&gt;, assuming that you forgot to register a global component or misspelled a component name.</source>
          <target state="translated">VueがVueの外部で定義されたカスタム要素を無視するようにします（たとえば、WebコンポーネントAPIを使用）。 それ以外の場合は、グローバルコンポーネントの登録を忘れたか、コンポーネント名のスペルを間違えた場合、 &lt;code&gt;Unknown custom element&lt;/code&gt; に関する警告がスローされます。</target>
        </trans-unit>
        <trans-unit id="40cc7de2e3efbc03590e2caf3615a6df24defc19" translate="yes" xml:space="preserve">
          <source>Make an object reactive. Internally, Vue uses this on the object returned by the &lt;code&gt;data&lt;/code&gt; function.</source>
          <target state="translated">オブジェクトをリアクティブにします。 内部的に、Vueは &lt;code&gt;data&lt;/code&gt; 関数によって返されるオブジェクトでこれを使用します。</target>
        </trans-unit>
        <trans-unit id="1ca710d6ed72907ab1882247d85dafbe4c288636" translate="yes" xml:space="preserve">
          <source>Make sure to read about &lt;a href=&quot;#Explanation-of-Different-Builds&quot;&gt;the different builds of Vue&lt;/a&gt; and use the &lt;strong&gt;production&lt;br/&gt; version&lt;/strong&gt; in your published site, replacing &lt;code&gt;vue.js&lt;/code&gt; with &lt;code&gt;vue.min.js&lt;/code&gt;. This is a smaller build optimized for speed instead of development experience.</source>
          <target state="translated">Vue &lt;a href=&quot;#Explanation-of-Different-Builds&quot;&gt;のさまざまなビルド&lt;/a&gt;について読み、 &lt;strong&gt;プロダクション&lt;/strong&gt;を使用する &lt;strong&gt;&lt;br/&gt;&lt;/strong&gt; 公開サイトの&lt;strong&gt;バージョン&lt;/strong&gt; &lt;code&gt;vue.js&lt;/code&gt; を &lt;code&gt;vue.min.js&lt;/code&gt; に置き換えます。 これは、開発エクスペリエンスではなく、速度が最適化された小規模なビルドです。</target>
        </trans-unit>
        <trans-unit id="e3c022bac6422a256a8effaab478918265d7cabe" translate="yes" xml:space="preserve">
          <source>Managing many state transitions can quickly increase the complexity of a Vue instance or component. Fortunately, many animations can be extracted out into dedicated child components. Let&amp;rsquo;s do this with the animated integer from our earlier example:</source>
          <target state="translated">多くの状態遷移を管理すると、Vueインスタンスまたはコンポーネントの複雑さが急速に増加する可能性があります。 幸いなことに、多くのアニメーションを専用の子コンポーネントに抽出できます。 前の例のアニメーション整数を使用してこれを行いましょう。</target>
        </trans-unit>
        <trans-unit id="7c3bd17fad3bf74f92a5f858b73034ae0e335d8b" translate="yes" xml:space="preserve">
          <source>Managing state on &lt;code&gt;this.$root&lt;/code&gt; and/or using a &lt;a href=&quot;../guide/migration#dispatch-and-broadcast-replaced&quot;&gt;global event bus&lt;/a&gt; can be convenient for very simple cases, but are not appropriate for most applications. Vuex offers not only a central place to manage state, but also tools for organizing, tracking, and debugging state changes.</source>
          <target state="translated">&lt;code&gt;this.$root&lt;/code&gt; 状態を管理し、 &lt;a href=&quot;../guide/migration#dispatch-and-broadcast-replaced&quot;&gt;グローバルイベントバス&lt;/a&gt;を使用することは非常に簡単な場合に便利ですが、ほとんどのアプリケーションには適していません。 Vuexは、状態を管理する中心的な場所だけでなく、状態の変化を整理、追跡、デバッグするためのツールも提供します。</target>
        </trans-unit>
        <trans-unit id="f8ce6aa2bb23c0ea42fa8eff08fdeb57d8d46f86" translate="yes" xml:space="preserve">
          <source>Manipulate children, props, or data before passing them on to a child component</source>
          <target state="translated">子コンポーネントに渡す前に、子、小道具、またはデータを操作する</target>
        </trans-unit>
        <trans-unit id="94450504feac5b15b4e2b00b870ff24df0d15b30" translate="yes" xml:space="preserve">
          <source>Many files with similar names, making rapid file switching in code editors more difficult.</source>
          <target state="translated">類似した名前の多くのファイルは、コードエディターでの迅速なファイル切り替えをより困難にします。</target>
        </trans-unit>
        <trans-unit id="e9845a3a28b614ba4d1f3f00fed1ceb01c5a0858" translate="yes" xml:space="preserve">
          <source>Many nested sub-directories, which increases the time it takes to browse components in an editor&amp;rsquo;s sidebar.</source>
          <target state="translated">ネストされたサブディレクトリがたくさん。 これにより、エディターのサイドバーでコンポーネントを参照する時間が長くなります。</target>
        </trans-unit>
        <trans-unit id="871f71bb96ca0bb4e5791c4ef660e24c2c568ffe" translate="yes" xml:space="preserve">
          <source>Many of your components will be relatively generic, possibly only wrapping an element like an input or a button. We sometimes refer to these as &lt;a href=&quot;../style-guide/index#Base-component-names-strongly-recommended&quot;&gt;base components&lt;/a&gt; and they tend to be used very frequently across your components.</source>
          <target state="translated">コンポーネントの多くは比較的一般的で、おそらく入力やボタンなどの要素をラップするだけです。 これらは&lt;a href=&quot;../style-guide/index#Base-component-names-strongly-recommended&quot;&gt;基本コンポーネント&lt;/a&gt;と呼ばれることもあり、コンポーネント全体で非常に頻繁に使用される傾向があります。</target>
        </trans-unit>
        <trans-unit id="d3f90d76037526451c4d4d6a19af05a35509fe8a" translate="yes" xml:space="preserve">
          <source>Mapping an Array to Elements with &lt;code&gt;v-for&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;v-for&lt;/code&gt; を使用した要素へのv-for配列</target>
        </trans-unit>
        <trans-unit id="f03a6d54b8b6514c9c14a1dc9c7ad30c6d8ce6b1" translate="yes" xml:space="preserve">
          <source>Meta Instance Methods</source>
          <target state="translated">メタインスタンスメソッド</target>
        </trans-unit>
        <trans-unit id="2f4694e23c9582e9a5db1045c363b51dfc44e4fe" translate="yes" xml:space="preserve">
          <source>Method Event Handlers</source>
          <target state="translated">メソッドイベントハンドラー</target>
        </trans-unit>
        <trans-unit id="7695e9b47d9ba02cf1af67839a1c5a56784566b4" translate="yes" xml:space="preserve">
          <source>Methods in Inline Handlers</source>
          <target state="translated">インラインハンドラーメソッド</target>
        </trans-unit>
        <trans-unit id="d1290d394bc9cbc272b779c93460593c97002ca1" translate="yes" xml:space="preserve">
          <source>Methods to be mixed into the Vue instance. You can access these methods directly on the VM instance, or use them in directive expressions. All methods will have their &lt;code&gt;this&lt;/code&gt; context automatically bound to the Vue instance.</source>
          <target state="translated">Vueインスタンスと混合されたメソッド。 VMインスタンスでこれらのメソッドに直接アクセスするか、ディレクティブ式で使用できます。 すべてのメソッドの &lt;code&gt;this&lt;/code&gt; コンテキストは、Vueインスタンスに自動的にバインドされます。</target>
        </trans-unit>
        <trans-unit id="431ecb390fd9ca8c90c7d10a3d2d7c57e8f24d12" translate="yes" xml:space="preserve">
          <source>Middlewares &lt;sup&gt;replaced&lt;/sup&gt;</source>
          <target state="translated">ミドルウェアの&lt;sup&gt;交換&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="a7c29497fcc9380f26664db064158964ed034b2e" translate="yes" xml:space="preserve">
          <source>Middlewares are replaced by plugins. A plugin is a function that receives the store as the only argument, and can listen to the mutation event on the store:</source>
          <target state="translated">ミドルウェアはプラグインに置き換えられました。 プラグインは、ストアを唯一の引数として使用し、ストア上の変更イベントをリッスンできる関数です。</target>
        </trans-unit>
        <trans-unit id="de3452a9ee78ce898468e14c739e9cdea57d03f0" translate="yes" xml:space="preserve">
          <source>Migration from Vue 1.x</source>
          <target state="translated">Vue 1.xからの移行</target>
        </trans-unit>
        <trans-unit id="33235c234b4d4ff968729d9a75b61daade922a4c" translate="yes" xml:space="preserve">
          <source>Migration from Vue Router 0.7.x</source>
          <target state="translated">Vue Router 0.7.xからの移行</target>
        </trans-unit>
        <trans-unit id="85c2e4a1b81a8d15a3bcd89e26321a5e8bae795c" translate="yes" xml:space="preserve">
          <source>Migration from Vuex 0.6.x to 1.0</source>
          <target state="translated">Vuex 0.6.xから1.0への移行</target>
        </trans-unit>
        <trans-unit id="56ce9269c79d7b84814a50d956fd29f09b1efb47" translate="yes" xml:space="preserve">
          <source>Mixin hooks are called in the order they are provided, and called before the component&amp;rsquo;s own hooks.</source>
          <target state="translated">Mixinフックは、コンポーネント自体のフックの前に、指定された順序で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d634308003ff858f289d2833f637dfc9bee3fc78" translate="yes" xml:space="preserve">
          <source>Mixins</source>
          <target state="translated">Mixins</target>
        </trans-unit>
        <trans-unit id="06fc764968134bc875ae2b80299dfa521ccaf9ca" translate="yes" xml:space="preserve">
          <source>Mixins are a flexible way to distribute reusable functionalities for Vue components. A mixin object can contain any component options. When a component uses a mixin, all options in the mixin will be &amp;ldquo;mixed&amp;rdquo; into the component&amp;rsquo;s own options.</source>
          <target state="translated">ミックスインは、Vueコンポーネントの再利用可能な機能を配布するための柔軟な方法です。 ミックスインオブジェクトには、任意のコンポーネントオプションを含めることができます。 コンポーネントがミックスインを使用する場合、ミックスインのすべてのオプションがコンポーネントのオプションに「ミックス」されます。</target>
        </trans-unit>
        <trans-unit id="049a096df6b896be6526afb4fccc301157e04515" translate="yes" xml:space="preserve">
          <source>MobX has become quite popular in the React community and it actually uses a nearly identical reactivity system to Vue. To a limited extent, the React + MobX workflow can be thought of as a more verbose Vue, so if you&amp;rsquo;re using that combination and are enjoying it, jumping into Vue is probably the next logical step.</source>
          <target state="translated">MobXはReactコミュニティで非常に人気があり、実際にはVueとほぼ同じリアクティブシステムを使用しています。 限られた範囲で、React + MobXワークフローはより冗長なVueと見なすことができます。 そのため、この組み合わせを楽しんでいるのであれば、おそらくVueにジャンプすることが次の論理的なステップです。</target>
        </trans-unit>
        <trans-unit id="91de419c6a3b3cf41aa4545caf2eb8b01499b085" translate="yes" xml:space="preserve">
          <source>Modifier(s)</source>
          <target state="translated">Modifier(s)</target>
        </trans-unit>
        <trans-unit id="3a7ea294bf33134dce4b142b8b7182de29b978b2" translate="yes" xml:space="preserve">
          <source>Modifiers</source>
          <target state="translated">Modifiers</target>
        </trans-unit>
        <trans-unit id="c78835db37c935d808d9977de5814282ad48b4f6" translate="yes" xml:space="preserve">
          <source>Modifiers Keys:</source>
          <target state="translated">修飾キー：</target>
        </trans-unit>
        <trans-unit id="9c9674aab8b56f915029a2d1e586af8120c00891" translate="yes" xml:space="preserve">
          <source>Modifiers are special postfixes denoted by a dot, which indicate that a directive should be bound in some special way. For example, the &lt;code&gt;.prevent&lt;/code&gt; modifier tells the &lt;code&gt;v-on&lt;/code&gt; directive to call &lt;code&gt;event.preventDefault()&lt;/code&gt; on the triggered event:</source>
          <target state="translated">修飾子は、ドットで示される特別な接尾辞です。 これは、ディレクティブを特別な方法でバインドする必要があることを示しています。 たとえば、 &lt;code&gt;.prevent&lt;/code&gt; 修飾子は、トリガーされたイベントで &lt;code&gt;event.preventDefault()&lt;/code&gt; を呼び出すよう &lt;code&gt;v-on&lt;/code&gt; ディレクティブに指示します。</target>
        </trans-unit>
        <trans-unit id="8c585db7d0122a15a54cf6c6876ffe8cc3e86e63" translate="yes" xml:space="preserve">
          <source>Module Systems</source>
          <target state="translated">モジュールシステム</target>
        </trans-unit>
        <trans-unit id="a6d2bd6abfd4bb67af5f7cf3bcc6c49be04098be" translate="yes" xml:space="preserve">
          <source>More mature tooling support. Vue provides official support for &lt;a href=&quot;https://github.com/vuejs/vue-loader&quot;&gt;webpack&lt;/a&gt; and &lt;a href=&quot;https://github.com/vuejs/vueify&quot;&gt;Browserify&lt;/a&gt;, while Riot relies on community support for build system integration.</source>
          <target state="translated">より成熟したツールのサポート。 Vueは&lt;a href=&quot;https://github.com/vuejs/vue-loader&quot;&gt;webpack&lt;/a&gt;と&lt;a href=&quot;https://github.com/vuejs/vueify&quot;&gt;Browserifyの&lt;/a&gt;公式サポートを提供し、Riotはビルドシステム統合のコミュニティサポートに依存しています。</target>
        </trans-unit>
        <trans-unit id="8ac57078adf5d9e220c754f33e3cab2a4c61f61d" translate="yes" xml:space="preserve">
          <source>Most of the tips below are enabled by default if you are using &lt;a href=&quot;https://cli.vuejs.org&quot;&gt;Vue CLI&lt;/a&gt;. This section is only relevant if you are using a custom build setup.</source>
          <target state="translated">&lt;a href=&quot;https://cli.vuejs.org&quot;&gt;Vue CLI&lt;/a&gt;を使用している場合、以下のヒントのほとんどはデフォルトで有効になっています。 このセクションは、カスタムビルドセットアップを使用している場合にのみ関連します。</target>
        </trans-unit>
        <trans-unit id="ff6e88abb4082a25af5cddfc16c8063e7092c245" translate="yes" xml:space="preserve">
          <source>Most use cases of mutating a prop can be replaced by one of these options:</source>
          <target state="translated">小道具を変更するためのほとんどのユースケースは、次のオプションのいずれかに置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="0f6138bafcc1d5e10b1c4ef89a77bfaf9ad800f1" translate="yes" xml:space="preserve">
          <source>Mouse Button Modifiers</source>
          <target state="translated">マウスボタン修飾子</target>
        </trans-unit>
        <trans-unit id="6a5aa2d48e5943f597c67e02c2fd245883968d95" translate="yes" xml:space="preserve">
          <source>Much better, isn&amp;rsquo;t it?</source>
          <target state="translated">はるかに良い音。</target>
        </trans-unit>
        <trans-unit id="d62651fa8a2e7b83b1b472f6394d7ec9c1b77f13" translate="yes" xml:space="preserve">
          <source>Much simpler! Sort of. The code is shorter, but also requires greater familiarity with Vue instance properties. In this case, you have to know that when you pass children without a &lt;code&gt;v-slot&lt;/code&gt; directive into a component, like the &lt;code&gt;Hello world!&lt;/code&gt; inside of &lt;code&gt;anchored-heading&lt;/code&gt;, those children are stored on the component instance at &lt;code&gt;$slots.default&lt;/code&gt;. If you haven&amp;rsquo;t already, &lt;strong&gt;it&amp;rsquo;s recommended to read through the &lt;a href=&quot;../api/index#Instance-Properties&quot;&gt;instance properties API&lt;/a&gt; before diving into render functions.&lt;/strong&gt;</source>
          <target state="translated">はるかに簡単です！ 並べ替え。 コードは短くなりますが、Vueインスタンスのプロパティに精通する必要もあります。 この場合、 &lt;code&gt;Hello world!&lt;/code&gt; ように、 &lt;code&gt;v-slot&lt;/code&gt; ディレクティブなしでコンポーネントに子を渡します。 、あなたはそれを知る必要があります。 &lt;code&gt;$slots.default&lt;/code&gt; &lt;code&gt;anchored-heading&lt;/code&gt; 内部では 、これらの子は$ slots.defaultのコンポーネントインスタンスに保存されます。 まだ&lt;strong&gt;&lt;a href=&quot;../api/index#Instance-Properties&quot;&gt;取得し&lt;/a&gt;&lt;/strong&gt;ていない場合は、 &lt;strong&gt;レンダリング関数&lt;/strong&gt; &lt;strong&gt;にジャンプする前にインスタンスプロパティAPIを読むことをお勧めします&lt;/strong&gt; &lt;strong&gt;。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ae7fd6f6c6f4ea4c4eacb2f56da39f0b2fb1a420" translate="yes" xml:space="preserve">
          <source>Multi-attribute elements</source>
          <target state="translated">多属性要素</target>
        </trans-unit>
        <trans-unit id="ceea8f5866781984f4ad8f3e46247846aa62fb94" translate="yes" xml:space="preserve">
          <source>Multi-attribute elements &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">多属性要素を&lt;sup&gt;強くお勧めします&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="c74c369ff94e794c799780bff5d5ea7fad8ef38a" translate="yes" xml:space="preserve">
          <source>Multi-word component names</source>
          <target state="translated">複数ワードのコンポーネント名</target>
        </trans-unit>
        <trans-unit id="d3d1a8c17e83b5f0002fdfe859df802f2669490e" translate="yes" xml:space="preserve">
          <source>Multi-word component names &lt;sup&gt;essential&lt;/sup&gt;</source>
          <target state="translated">複数ワードのコンポーネント名が&lt;sup&gt;必要です&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="0f05bd0026ab6ceb1bb040af8f4b0c24c530607d" translate="yes" xml:space="preserve">
          <source>Multiline text</source>
          <target state="translated">複数行テキスト</target>
        </trans-unit>
        <trans-unit id="f6620aef040214a72d3c2e57f8f5384fa762cf0c" translate="yes" xml:space="preserve">
          <source>Multiple Values</source>
          <target state="translated">複数の値</target>
        </trans-unit>
        <trans-unit id="e7051b9f8df86c845f6fca692b6b3cadd5b8a10a" translate="yes" xml:space="preserve">
          <source>Multiple checkboxes, bound to the same Array:</source>
          <target state="translated">同じ配列にバインドされた複数のチェックボックス：</target>
        </trans-unit>
        <trans-unit id="4bb517cb00682f4c08a606d69d3a2147fe97738f" translate="yes" xml:space="preserve">
          <source>Multiple nodes where only 1 is rendered at a time</source>
          <target state="translated">一度に1つだけがレンダリングされる複数のノード</target>
        </trans-unit>
        <trans-unit id="e6e9d08847648f1f24b432d66915720d2a3cd5b3" translate="yes" xml:space="preserve">
          <source>Multiple select (bound to Array):</source>
          <target state="translated">複数選択（配列にバインド）：</target>
        </trans-unit>
        <trans-unit id="646b4dd27caf266ac22f395b2a33613ba629a308" translate="yes" xml:space="preserve">
          <source>Mustaches cannot be used inside HTML attributes. Instead, use a &lt;a href=&quot;../api/index#v-bind&quot;&gt;v-bind directive&lt;/a&gt;:</source>
          <target state="translated">口ひげはHTML属性で使用できません。 代わりに、 &lt;a href=&quot;../api/index#v-bind&quot;&gt;v-bindディレクティブを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="a1ceb98e8d45e6f84a7b372d2bc5ecdc0a979de1" translate="yes" xml:space="preserve">
          <source>Mutating a prop locally is now considered an anti-pattern, e.g. declaring a prop and then setting &lt;code&gt;this.myProp = 'someOtherValue'&lt;/code&gt; in the component. Due to the new rendering mechanism, whenever the parent component re-renders, the child component&amp;rsquo;s local changes will be overwritten.</source>
          <target state="translated">ローカルで小道具を変更することは、アンチパターンと見なされます。 たとえば、小道具を宣言してから、コンポーネントで &lt;code&gt;this.myProp = 'someOtherValue'&lt;/code&gt; を設定します。 新しいレンダリングメカニズムは、親コンポーネントが再レンダリングされるたびに、子コンポーネントのローカルな変更を上書きします。</target>
        </trans-unit>
        <trans-unit id="0acccbc6d162746eb3fb69dff7df3fa404b932c2" translate="yes" xml:space="preserve">
          <source>Mutation Methods</source>
          <target state="translated">突然変異法</target>
        </trans-unit>
        <trans-unit id="5f08c22f9167f78491a6ca2175a2bc368b8504f7" translate="yes" xml:space="preserve">
          <source>Mutation methods, as the name suggests, mutate the original array they are called on. In comparison, there are also non-mutating methods, e.g. &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;concat()&lt;/code&gt; and &lt;code&gt;slice()&lt;/code&gt;, which do not mutate the original array but &lt;strong&gt;always return a new array&lt;/strong&gt;. When working with non-mutating methods, you can replace the old array with the new one:</source>
          <target state="translated">名前が示すように、mutationメソッドは、呼び出し元の元の配列を変更します。 比較すると、元の配列を変更せずに&lt;strong&gt;常に新しい配列&lt;/strong&gt;を&lt;strong&gt;返す&lt;/strong&gt; &lt;code&gt;filter()&lt;/code&gt; 、 &lt;code&gt;concat()&lt;/code&gt; 、および &lt;code&gt;slice()&lt;/code&gt; などの変更されていないメソッドもあります 。 変更しない方法を使用する場合、古い配列を新しい配列に置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="7d94ebbf07f5417771d7c7fd06f208703494bf50" translate="yes" xml:space="preserve">
          <source>NPM</source>
          <target state="translated">NPM</target>
        </trans-unit>
        <trans-unit id="5d35915fe00d2c128685549b04a6a30f49020050" translate="yes" xml:space="preserve">
          <source>NPM is the recommended installation method when building large scale applications with Vue. It pairs nicely with module bundlers such as &lt;a href=&quot;https://webpack.js.org/&quot;&gt;Webpack&lt;/a&gt; or &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt;. Vue also provides accompanying tools for authoring &lt;a href=&quot;single-file-components&quot;&gt;Single File Components&lt;/a&gt;.</source>
          <target state="translated">NPMは、Vueで大規模なアプリケーションを構築するための推奨インストール方法です。 Webpackや&lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt;などのモジュールバンドルとうまく&lt;a href=&quot;https://webpack.js.org/&quot;&gt;ペア&lt;/a&gt; リングします。 Vueは、 &lt;a href=&quot;single-file-components&quot;&gt;単一ファイルコンポーネント&lt;/a&gt;を作成するためのコンパニオンツールも提供します 。</target>
        </trans-unit>
        <trans-unit id="39674384c8d92e5f7a36d0d3f3e397a2e95cfa07" translate="yes" xml:space="preserve">
          <source>Name Casing</source>
          <target state="translated">ネームケーシング</target>
        </trans-unit>
        <trans-unit id="0ab2cdaecd6bb74527ceec8c7c8e94dbe4ba99ce" translate="yes" xml:space="preserve">
          <source>Name conflicts (e.g. multiple &lt;code&gt;ButtonDelete.vue&lt;/code&gt; components) make it more difficult to quickly navigate to a specific component in a code editor.</source>
          <target state="translated">名前の競合（複数の &lt;code&gt;ButtonDelete.vue&lt;/code&gt; コンポーネントなど）により、コードエディターで特定のコンポーネントにすばやく移動することが難しくなります。</target>
        </trans-unit>
        <trans-unit id="7a6baafc30ef8e96b10f64b5ae02d071b89f11b7" translate="yes" xml:space="preserve">
          <source>Named Slots</source>
          <target state="translated">名前付きスロット</target>
        </trans-unit>
        <trans-unit id="ad1343c1fa843d537b321f552fb2d9e3249973f3" translate="yes" xml:space="preserve">
          <source>Named Slots Shorthand</source>
          <target state="translated">名前付きスロットの略記</target>
        </trans-unit>
        <trans-unit id="eb77d0a7e3904d77f8e4a7c84a101f0e60e5b947" translate="yes" xml:space="preserve">
          <source>Named Slots with the &lt;code&gt;slot&lt;/code&gt; Attribute</source>
          <target state="translated">&lt;code&gt;slot&lt;/code&gt; 属性を持つ名前付きスロット</target>
        </trans-unit>
        <trans-unit id="8e9a0bbd092de06c02318f4224dc00dd0e597d4b" translate="yes" xml:space="preserve">
          <source>Native Rendering</source>
          <target state="translated">ネイティブレンダリング</target>
        </trans-unit>
        <trans-unit id="2b1f77c5995cd9dac2e37e8101252626e5271812" translate="yes" xml:space="preserve">
          <source>New in 2.1.0+</source>
          <target state="translated">2.1.0以降の新機能</target>
        </trans-unit>
        <trans-unit id="2ebe6a1174c620d032840e985bebc14e9c813501" translate="yes" xml:space="preserve">
          <source>New in 2.1.0+: returns a Promise if no callback is provided and Promise is supported in the execution environment. Please note that Vue does not come with a Promise polyfill, so if you target browsers that don&amp;rsquo;t support Promises natively (looking at you, IE), you will have to provide a polyfill yourself.</source>
          <target state="translated">2.1.0以降の新機能：コールバックが提供されておらず、実行環境がプロミスをサポートしている場合、プロミスを返します。 Vueにはプロミスポリフィルが付属していないため、プロミス（IEを参照）をネイティブでサポートしないブラウザーをターゲットにしている場合、自分でポリフィルを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="a23469cb28697e68c77d280bbb32f3803b532a34" translate="yes" xml:space="preserve">
          <source>New in 2.1.4+</source>
          <target state="translated">2.1.4以降の新機能</target>
        </trans-unit>
        <trans-unit id="6c6aade3e6584c7a8b32cab964c7a674d3b07efd" translate="yes" xml:space="preserve">
          <source>New in 2.2.0</source>
          <target state="translated">2.2.0の新機能</target>
        </trans-unit>
        <trans-unit id="0f9f45aff79e86f97a647ac660d1cac6b64f6ae9" translate="yes" xml:space="preserve">
          <source>New in 2.2.0+</source>
          <target state="translated">2.2.0以降の新機能</target>
        </trans-unit>
        <trans-unit id="0222464ccf0d40a3f2619ea19d32c2ebca8e8947" translate="yes" xml:space="preserve">
          <source>New in 2.3.0+</source>
          <target state="translated">2.3.0以降の新機能</target>
        </trans-unit>
        <trans-unit id="b02f6830ecc8383c4879860f5a1da68ddd041c03" translate="yes" xml:space="preserve">
          <source>New in 2.4.0+</source>
          <target state="translated">2.4.0以降の新機能</target>
        </trans-unit>
        <trans-unit id="50e01eb5f080e39b850973e99d037d430ae13836" translate="yes" xml:space="preserve">
          <source>New in 2.5.0+</source>
          <target state="translated">2.5.0以降の新機能</target>
        </trans-unit>
        <trans-unit id="053c4407e09eb77d114f51a7a8bc3d31c0dc62de" translate="yes" xml:space="preserve">
          <source>New in 2.6.0+</source>
          <target state="translated">2.6.0以降の新機能</target>
        </trans-unit>
        <trans-unit id="1c463bc393dd8ee82390da1c8679bbb86e610abe" translate="yes" xml:space="preserve">
          <source>No longer necessary, since warnings come with stack traces by default now.</source>
          <target state="translated">警告はデフォルトでスタックトレースに添付されるようになったため、警告は不要になりました。</target>
        </trans-unit>
        <trans-unit id="66c6e5d0b724903ee1ff6e6099b203d955086d1a" translate="yes" xml:space="preserve">
          <source>No real use. If you do happen to rely on this feature somehow and aren&amp;rsquo;t sure how to work around it, post on &lt;a href=&quot;https://forum.vuejs.org/&quot;&gt;the forum&lt;/a&gt; for ideas.</source>
          <target state="translated">実際の使用はありません。 どういうわけかこの機能に依存していて、それを回避する方法がわからない場合は&lt;a href=&quot;https://forum.vuejs.org/&quot;&gt;、フォーラムに&lt;/a&gt;アイデアを投稿してください。</target>
        </trans-unit>
        <trans-unit id="499b8c29716c6bc9380fa29ea0c868d469132ef2" translate="yes" xml:space="preserve">
          <source>Nodes, Trees, and the Virtual DOM</source>
          <target state="translated">ノード、ツリー、および仮想DOM</target>
        </trans-unit>
        <trans-unit id="67dbd82660f093394a26b3ae3623994010f0c69e" translate="yes" xml:space="preserve">
          <source>Non-Prop Attributes</source>
          <target state="translated">非プロップ属性</target>
        </trans-unit>
        <trans-unit id="3a775c24cf85519f3493a1f3184bcda0bc6bbbc5" translate="yes" xml:space="preserve">
          <source>Non-flux state management</source>
          <target state="translated">非フラックス状態管理</target>
        </trans-unit>
        <trans-unit id="7d2d13e9ec1357ce0a1972e320ea404789b39c3f" translate="yes" xml:space="preserve">
          <source>Non-flux state management &lt;sup&gt;use with caution&lt;/sup&gt;</source>
          <target state="translated">非フラックス状態管理&lt;sup&gt;を使用する場合は注意してください&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="54aa04fe9a9673dccd2cdb7588ee890d8cbf364d" translate="yes" xml:space="preserve">
          <source>Note every child in a &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; must be &lt;strong&gt;uniquely keyed&lt;/strong&gt; for the animations to work properly.</source>
          <target state="translated">&lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; のすべての子には、アニメーションが適切に機能するための&lt;strong&gt;一意のキーが&lt;/strong&gt;必要であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="01d9b9321e6ff665ab2980ef004ad4d70ee364dd" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; requires the components being switched between to all have names, either using the &lt;code&gt;name&lt;/code&gt; option on a component, or through local/global registration.</source>
          <target state="translated">&lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; では、コンポーネントの &lt;code&gt;name&lt;/code&gt; オプションまたはローカル/グローバル登録を使用して、コンポーネントがすべての名前に切り替える必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f371b641eda948d758990f934853de8872ee227f" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;inheritAttrs: false&lt;/code&gt; option does &lt;strong&gt;not&lt;/strong&gt; affect &lt;code&gt;style&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt; bindings.</source>
          <target state="translated">&lt;code&gt;inheritAttrs: false&lt;/code&gt; オプションは、 &lt;code&gt;style&lt;/code&gt; と &lt;code&gt;class&lt;/code&gt; バインディングに影響し&lt;strong&gt;ません&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="4865cbc834beecb2b610f666cf562d7362926a15" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;mounted&lt;/code&gt; does &lt;strong&gt;not&lt;/strong&gt; guarantee that all child components have also been mounted. If you want to wait until the entire view has been rendered, you can use &lt;a href=&quot;#vm-nextTick&quot;&gt;vm.$nextTick&lt;/a&gt; inside of &lt;code&gt;mounted&lt;/code&gt;:</source>
          <target state="translated">マウント&lt;strong&gt;は&lt;/strong&gt; &lt;strong&gt;、&lt;/strong&gt;すべての子コンポーネントもマウントされる&lt;strong&gt;ことを&lt;/strong&gt;保証&lt;strong&gt;しない&lt;/strong&gt;ことに注意してください。 ビュー全体がレンダリングされるまで待機する場合は、vm in mountにします。 $ nextTickを使用できます。</target>
        </trans-unit>
        <trans-unit id="8aa1b05ebbda7e5b2744c6d248de2032ac1d216f" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;target=&quot;_blank&quot;&lt;/code&gt; is not supported on &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;, so if you need to open a link in a new tab, you have to use &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;target=&quot;_blank&quot;&lt;/code&gt; は &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; ではサポートされていないため、新しいタブでリンクを開く必要がある場合は、代わりに &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e4d9853311324c1062785017be6c36f8e6cda485" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;updated&lt;/code&gt; does &lt;strong&gt;not&lt;/strong&gt; guarantee that all child components have also been re-rendered. If you want to wait until the entire view has been re-rendered, you can use &lt;a href=&quot;#vm-nextTick&quot;&gt;vm.$nextTick&lt;/a&gt; inside of &lt;code&gt;updated&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;updated&lt;/code&gt; &lt;strong&gt;は&lt;/strong&gt; 、すべての子コンポーネントが再レンダリングされたことを保証するもので&lt;strong&gt;はない&lt;/strong&gt;ことに注意してください。 ビュー全体が再レンダリングされるのを待つ場合、 &lt;a href=&quot;#vm-nextTick&quot;&gt;Vm&lt;/a&gt; inが更新されます。 $ nextTickを使用できます。</target>
        </trans-unit>
        <trans-unit id="e111be77d17fe6743b1bb02879c8402ce1acfd03" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;v-bind&lt;/code&gt; with the &lt;code&gt;.sync&lt;/code&gt; modifier does &lt;strong&gt;not&lt;/strong&gt; work with expressions (e.g. &lt;code&gt;v-bind:title.sync=&amp;rdquo;doc.title + &amp;lsquo;!&amp;rsquo;&amp;rdquo;&lt;/code&gt; is invalid). Instead, you must only provide the name of the property you want to bind, similar to &lt;code&gt;v-model&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.sync&lt;/code&gt; 修飾子を持つ &lt;code&gt;v-bind&lt;/code&gt; が式で機能し&lt;strong&gt;ない&lt;/strong&gt; .sync（例： &lt;code&gt;v-bind:title.sync=&amp;rdquo;doc.title + &amp;lsquo;!&amp;rsquo;&amp;rdquo;&lt;/code&gt; は無効です）。 代わりに、 &lt;code&gt;v-model&lt;/code&gt; と同様に、バインドするプロパティの名前を指定するだけです。</target>
        </trans-unit>
        <trans-unit id="771a269b6d8c0e9ec3e7216d190b9a4d937f48ce" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;v-show&lt;/code&gt; doesn&amp;rsquo;t support the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element, nor does it work with &lt;code&gt;v-else&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;v-show&lt;/code&gt; は &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 要素をサポートしておらず、 &lt;code&gt;v-else&lt;/code&gt; では機能しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a4d9068c552bdf157869d707a68e7ff8a3725d0e" translate="yes" xml:space="preserve">
          <source>Note that &lt;strong&gt;&lt;code&gt;v-slot&lt;/code&gt; can only be added to a &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;&lt;/strong&gt; (with &lt;a href=&quot;#Abbreviated-Syntax-for-Lone-Default-Slots&quot;&gt;one exception&lt;/a&gt;), unlike the deprecated &lt;a href=&quot;#Deprecated-Syntax&quot;&gt;&lt;code&gt;slot&lt;/code&gt; attribute&lt;/a&gt;.</source>
          <target state="translated">廃止された&lt;a href=&quot;#Deprecated-Syntax&quot;&gt; &lt;code&gt;slot&lt;/code&gt; 属性&lt;/a&gt;とは異なり、 &lt;strong&gt; &lt;code&gt;v-slot&lt;/code&gt; は &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; にのみ追加できます&lt;/strong&gt; （ &lt;a href=&quot;#Abbreviated-Syntax-for-Lone-Default-Slots&quot;&gt;1つの例外があります&lt;/a&gt; ）。</target>
        </trans-unit>
        <trans-unit id="776dcb74ada7f4cc1814737bb17df3646b8395ff" translate="yes" xml:space="preserve">
          <source>Note that &lt;strong&gt;locally registered components are &lt;em&gt;not&lt;/em&gt; also available in subcomponents&lt;/strong&gt;. For example, if you wanted &lt;code&gt;ComponentA&lt;/code&gt; to be available in &lt;code&gt;ComponentB&lt;/code&gt;, you&amp;rsquo;d have to use:</source>
          <target state="translated">&lt;strong&gt;ローカルに登録&lt;/strong&gt; &lt;strong&gt;されたコンポーネントはサブコンポーネント&lt;/strong&gt;では&lt;strong&gt;使用&lt;/strong&gt; &lt;strong&gt;でき&lt;em&gt;ない&lt;/em&gt;&lt;/strong&gt;ことに注意してください。 たとえば、ComponentAをComponentBで使用できるようにするには、次を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="8881ac4ac19e2ded818c92290bbcf16a14c24745" translate="yes" xml:space="preserve">
          <source>Note that &lt;strong&gt;you should not use an arrow function to define a method&lt;/strong&gt; (e.g. &lt;code&gt;plus: () =&amp;gt; this.a++&lt;/code&gt;). The reason is arrow functions bind the parent context, so &lt;code&gt;this&lt;/code&gt; will not be the Vue instance as you expect and &lt;code&gt;this.a&lt;/code&gt; will be undefined.</source>
          <target state="translated">&lt;strong&gt;メソッド定義で矢印関数を使用&lt;/strong&gt; &lt;strong&gt;し&lt;/strong&gt; &lt;strong&gt;ないで&lt;/strong&gt; &lt;strong&gt;ください&lt;/strong&gt; （例 &lt;code&gt;plus: () =&amp;gt; this.a++&lt;/code&gt; ）。 理由は、 &lt;code&gt;this&lt;/code&gt; は予想どおりVueインスタンスではなく、矢印関数が親コンテキストをバインドするため、 &lt;code&gt;this.a&lt;/code&gt; は未定義だからです。</target>
        </trans-unit>
        <trans-unit id="835968cbd8027db3d9ca26ddf24e18c1f5c52040" translate="yes" xml:space="preserve">
          <source>Note that &lt;strong&gt;you should not use an arrow function to define a watcher&lt;/strong&gt; (e.g. &lt;code&gt;searchQuery: newValue =&amp;gt; this.updateAutocomplete(newValue)&lt;/code&gt;). The reason is arrow functions bind the parent context, so &lt;code&gt;this&lt;/code&gt; will not be the Vue instance as you expect and &lt;code&gt;this.updateAutocomplete&lt;/code&gt; will be undefined.</source>
          <target state="translated">&lt;strong&gt;ウォッチャー定義で矢印関数を使用&lt;/strong&gt; &lt;strong&gt;し&lt;/strong&gt; &lt;strong&gt;ないで&lt;/strong&gt; &lt;strong&gt;ください&lt;/strong&gt; （例 &lt;code&gt;searchQuery: newValue =&amp;gt; this.updateAutocomplete(newValue)&lt;/code&gt; ）。 理由は、 &lt;code&gt;this&lt;/code&gt; が予想どおりVueインスタンスではなく、矢印関数が親コンテキストをバインドするため、 &lt;code&gt;this.updateAutocomplete&lt;/code&gt; が未定義だからです。</target>
        </trans-unit>
        <trans-unit id="ae4a42d86a3cca81f57342eb0f1aed6f05d0e695" translate="yes" xml:space="preserve">
          <source>Note that Vue&amp;rsquo;s event system is different from the browser&amp;rsquo;s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget&quot;&gt;EventTarget API&lt;/a&gt;. Though they work similarly, &lt;code&gt;$emit&lt;/code&gt;, &lt;code&gt;$on&lt;/code&gt;, and &lt;code&gt;$off&lt;/code&gt; are &lt;strong&gt;not&lt;/strong&gt; aliases for &lt;code&gt;dispatchEvent&lt;/code&gt;, &lt;code&gt;addEventListener&lt;/code&gt;, and &lt;code&gt;removeEventListener&lt;/code&gt;.</source>
          <target state="translated">Vueのイベントシステムは、ブラウザーの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget&quot;&gt;EventTarget API&lt;/a&gt;とは異なることに注意してください。 これらは同様に機能しますが、 &lt;code&gt;$emit&lt;/code&gt; 、 &lt;code&gt;$on&lt;/code&gt; 、および &lt;code&gt;$off&lt;/code&gt; は、 &lt;code&gt;dispatchEvent&lt;/code&gt; 、 &lt;code&gt;addEventListener&lt;/code&gt; 、および &lt;code&gt;removeEventListener&lt;/code&gt; のエイリアスではあり&lt;strong&gt;ません&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="9c4518368215428ba1ec224631fb3c0691204e72" translate="yes" xml:space="preserve">
          <source>Note that for other directives (e.g. &lt;code&gt;v-if&lt;/code&gt; and &lt;code&gt;v-show&lt;/code&gt;), JavaScript&amp;rsquo;s normal truthiness still applies.</source>
          <target state="translated">他のディレクティブ（ &lt;code&gt;v-if&lt;/code&gt; や &lt;code&gt;v-show&lt;/code&gt; など ）については、JavaScriptの通常の真実性が引き続き適用されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="59c87a2470ce03d315d2bf588709c8b05af9d942" translate="yes" xml:space="preserve">
          <source>Note that if you use an arrow function with a computed property, &lt;code&gt;this&lt;/code&gt; won&amp;rsquo;t be the component&amp;rsquo;s instance, but you can still access the instance as the function&amp;rsquo;s first argument:</source>
          <target state="translated">計算プロパティで矢印関数を使用する場合、 &lt;code&gt;this&lt;/code&gt; はコンポーネントのインスタンスではないことに注意してください。ただし、関数の最初の引数としてインスタンスにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="76ac594b131a812ccc4dec6f17d0ccc6f38ab19e" translate="yes" xml:space="preserve">
          <source>Note that if you use an arrow function with the &lt;code&gt;data&lt;/code&gt; property, &lt;code&gt;this&lt;/code&gt; won&amp;rsquo;t be the component&amp;rsquo;s instance, but you can still access the instance as the function&amp;rsquo;s first argument:</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; プロパティで矢印関数を使用する場合、 &lt;code&gt;this&lt;/code&gt; はコンポーネントのインスタンスではありませんが、関数の最初の引数としてインスタンスにアクセスできることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b92212320fc7b39925a58ec2e6b387152eda8b23" translate="yes" xml:space="preserve">
          <source>Note that in ES2015+, placing a variable name like &lt;code&gt;ComponentA&lt;/code&gt; inside an object is shorthand for &lt;code&gt;ComponentA: ComponentA&lt;/code&gt;, meaning the name of the variable is both:</source>
          <target state="translated">ES2015 +では、 &lt;code&gt;ComponentA&lt;/code&gt; などの変数名をオブジェクトに配置することは、 &lt;code&gt;ComponentA: ComponentA&lt;/code&gt; 省略形であり、変数の名前は両方であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="38d7decb45ee1373ac91755a507d8307efe29952" translate="yes" xml:space="preserve">
          <source>Note that in this method we update the state of our app without touching the DOM - all DOM manipulations are handled by Vue, and the code you write is focused on the underlying logic.</source>
          <target state="translated">このメソッドは、DOMに触れることなくアプリの状態を更新することに注意してください。 すべてのDOM操作はVueによって処理され、作成するコードは基になるロジックに焦点を合わせます。</target>
        </trans-unit>
        <trans-unit id="d39c5b6e21dbfd1407f27da7320c3009d1f4fce3" translate="yes" xml:space="preserve">
          <source>Note that it&amp;rsquo;s &lt;strong&gt;not&lt;/strong&gt; recommended to use &lt;code&gt;v-if&lt;/code&gt; and &lt;code&gt;v-for&lt;/code&gt; together. Refer to &lt;a href=&quot;../style-guide/index#Avoid-v-if-with-v-for-essential&quot;&gt;style guide&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;v-if&lt;/code&gt; と &lt;code&gt;v-for&lt;/code&gt; を一緒に使用することはお勧め&lt;strong&gt;できません&lt;/strong&gt; 。 詳細については、 &lt;a href=&quot;../style-guide/index#Avoid-v-if-with-v-for-essential&quot;&gt;スタイルガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="8cc9bca625b5e998dd62bb4f93dc90d8caa850ab" translate="yes" xml:space="preserve">
          <source>Note that modifier keys are different from regular keys and when used with &lt;code&gt;keyup&lt;/code&gt; events, they have to be pressed when the event is emitted. In other words, &lt;code&gt;keyup.ctrl&lt;/code&gt; will only trigger if you release a key while holding down &lt;code&gt;ctrl&lt;/code&gt;. It won&amp;rsquo;t trigger if you release the &lt;code&gt;ctrl&lt;/code&gt; key alone. If you do want such behaviour, use the &lt;code&gt;keyCode&lt;/code&gt; for &lt;code&gt;ctrl&lt;/code&gt; instead: &lt;code&gt;keyup.17&lt;/code&gt;.</source>
          <target state="translated">修飾キーは通常のキーとは異なり、キー &lt;code&gt;keyup&lt;/code&gt; イベントで使用する場合は、イベントが発生したときに押す必要があることに注意してください。 つまり、keyup.ctrlを &lt;code&gt;ctrl&lt;/code&gt; で押し下げ、keyup.ctrlをキーアップした場合にのみ、keyup.ctrlがトリガーされます。 &lt;code&gt;ctrl&lt;/code&gt; のみctrlキーはトリガーしません。 この動作が必要な場合は、代わりに &lt;code&gt;ctrl&lt;/code&gt; の &lt;code&gt;keyCode&lt;/code&gt; を使用してください： &lt;code&gt;keyup.17&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="782e93758e1a8da260782325b450852c804d73f2" translate="yes" xml:space="preserve">
          <source>Note that objects and arrays in JavaScript are passed by reference, so if the prop is an array or object, mutating the object or array itself inside the child component &lt;strong&gt;will&lt;/strong&gt; affect parent state.</source>
          <target state="translated">JavaScriptオブジェクトと配列は参照によって渡されるため、小道具が配列またはオブジェクトである場合、子コンポーネントのオブジェクトまたは配列自体を変更すると、親の状態に影響します。</target>
        </trans-unit>
        <trans-unit id="3151ecc6011010f2ef8540f5f9ad70909763b9e7" translate="yes" xml:space="preserve">
          <source>Note that props are validated &lt;strong&gt;before&lt;/strong&gt; a component instance is created, so instance properties (e.g. &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;computed&lt;/code&gt;, etc) will not be available inside &lt;code&gt;default&lt;/code&gt; or &lt;code&gt;validator&lt;/code&gt; functions.</source>
          <target state="translated">プロパティインスタンスはコンポーネントインスタンスが作成さ&lt;strong&gt;れる前に&lt;/strong&gt;検証さ&lt;strong&gt;れるため&lt;/strong&gt; 、インスタンスプロパティ（例： &lt;code&gt;data&lt;/code&gt; 、 &lt;code&gt;computed&lt;/code&gt; など）は、 &lt;code&gt;default&lt;/code&gt; または &lt;code&gt;validator&lt;/code&gt; 関数内で使用できません。</target>
        </trans-unit>
        <trans-unit id="84136e18c6c864e905f34757af495e8cd152f729" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; elements are still efficiently re-used, because they don&amp;rsquo;t have &lt;code&gt;key&lt;/code&gt; attributes.</source>
          <target state="translated">&lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; 要素には &lt;code&gt;key&lt;/code&gt; 属性がなく、依然として効率的に再利用されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8c6f6de9e542ddf567ea5a5cf5a2069dcc0d7d80" translate="yes" xml:space="preserve">
          <source>Note that the abbreviated syntax for default slot &lt;strong&gt;cannot&lt;/strong&gt; be mixed with named slots, as it would lead to scope ambiguity:</source>
          <target state="translated">デフォルトのスロット略語構文を名前付きスロット&lt;strong&gt;と&lt;/strong&gt;混在させることは&lt;strong&gt;でき&lt;/strong&gt;ず、スコープが曖昧になる&lt;strong&gt;可能性が&lt;/strong&gt;ある&lt;strong&gt;ことに&lt;/strong&gt;注意してください。</target>
        </trans-unit>
        <trans-unit id="d9393e6c94f522abc9f4a9fa2054455519ccc108" translate="yes" xml:space="preserve">
          <source>Note that the same merge strategies are used in &lt;code&gt;Vue.extend()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Vue.extend()&lt;/code&gt; は同じマージ戦略を使用します。</target>
        </trans-unit>
        <trans-unit id="b19b165a75219255a66fd8c95f88d1f25d66fca4" translate="yes" xml:space="preserve">
          <source>Note that with &lt;code&gt;immediate&lt;/code&gt; option you won&amp;rsquo;t be able to unwatch the given property on the first callback call.</source>
          <target state="translated">&lt;code&gt;immediate&lt;/code&gt; オプションを使用した最初のコールバック呼び出しでは、特定のプロパティを非表示にできないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="09e5eb4daa67f823465bf8f428dfecbb3f5135d5" translate="yes" xml:space="preserve">
          <source>Note that you have to include &lt;code&gt;strict: true&lt;/code&gt; (or at least &lt;code&gt;noImplicitThis: true&lt;/code&gt; which is a part of &lt;code&gt;strict&lt;/code&gt; flag) to leverage type checking of &lt;code&gt;this&lt;/code&gt; in component methods otherwise it is always treated as &lt;code&gt;any&lt;/code&gt; type.</source>
          <target state="translated">コンポーネントメソッドで &lt;code&gt;this&lt;/code&gt; タイプチェックを利用するには、 &lt;code&gt;strict: true&lt;/code&gt; （または少なくとも &lt;code&gt;strict&lt;/code&gt; フラグの一部である &lt;code&gt;noImplicitThis: true&lt;/code&gt; を含める必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3c9f11f51925aec7450ae0935dd3b229a967e2c1" translate="yes" xml:space="preserve">
          <source>Note that you must use &lt;a href=&quot;https://github.com/vuejs/vue-router&quot;&gt;Vue Router&lt;/a&gt; 2.4.0+ if you wish to use the above syntax for route components.</source>
          <target state="translated">ルートコンポーネントに上記の構文を使用する場合、 &lt;a href=&quot;https://github.com/vuejs/vue-router&quot;&gt;Vue Router&lt;/a&gt; 2.4.0+を使用する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="a9a477d195904adab9bde1cc82c2b08801e6b422" translate="yes" xml:space="preserve">
          <source>Note that you still have to declare the &lt;code&gt;checked&lt;/code&gt; prop in component&amp;rsquo;s &lt;code&gt;props&lt;/code&gt; option.</source>
          <target state="translated">コンポーネントの &lt;code&gt;props&lt;/code&gt; オプションで &lt;code&gt;checked&lt;/code&gt; propを宣言する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ea28128f17211fcef9f44807c81be52f215e0561" translate="yes" xml:space="preserve">
          <source>Note the &lt;code&gt;is=&quot;todo-item&quot;&lt;/code&gt; attribute. This is necessary in DOM templates, because only an &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element is valid inside a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;. It does the same thing as &lt;code&gt;&amp;lt;todo-item&amp;gt;&lt;/code&gt;, but works around a potential browser parsing error. See &lt;a href=&quot;components#DOM-Template-Parsing-Caveats&quot;&gt;DOM Template Parsing Caveats&lt;/a&gt; to learn more.</source>
          <target state="translated">&lt;code&gt;is=&quot;todo-item&quot;&lt;/code&gt; 属性に注意してください。 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 内では &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素のみが有効であるため、これはDOMテンプレートで必要です。 &lt;code&gt;&amp;lt;todo-item&amp;gt;&lt;/code&gt; と同じようにしますが、潜在的なブラウザー解析エラーを回避します。 詳細については、 &lt;a href=&quot;components#DOM-Template-Parsing-Caveats&quot;&gt;DOMテンプレート解析警告&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="056476ec0b830039894a5b3089419b4a5d60c537" translate="yes" xml:space="preserve">
          <source>Note, &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; is designed for the case where it has one direct child component that is being toggled. It does not work if you have &lt;code&gt;v-for&lt;/code&gt; inside it. When there are multiple conditional children, as above, &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; requires that only one child is rendered at a time.</source>
          <target state="translated">&lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; は、切り替えられる直接の子コンポーネントが1つある場合のために設計されています。 内部に &lt;code&gt;v-for&lt;/code&gt; がある場合は機能しません。 上記のように複数の条件付き子がある場合、 &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; では、一度に1つの子のみをレンダリングする必要があります。</target>
        </trans-unit>
        <trans-unit id="1d29dd3fc2d4ef6a6ce13aedfe8172fb47b148bd" translate="yes" xml:space="preserve">
          <source>Note: On Macintosh keyboards, meta is the command key (⌘). On Windows keyboards, meta is the Windows key (⊞). On Sun Microsystems keyboards, meta is marked as a solid diamond (◆). On certain keyboards, specifically MIT and Lisp machine keyboards and successors, such as the Knight keyboard, space-cadet keyboard, meta is labeled &amp;ldquo;META&amp;rdquo;. On Symbolics keyboards, meta is labeled &amp;ldquo;META&amp;rdquo; or &amp;ldquo;Meta&amp;rdquo;.</source>
          <target state="translated">注：Macintoshキーボードでは、metaはコマンドキー（⌘）です。 Windowsキーボードでは、metaはWindowsキー（⊞）です。 Sun Microsystemsキーボードでは、メタは塗りつぶされたひし形（◆）としてマークされます。 特定のキーボード、特にMITキーボードとLispマシンキーボード、およびKnightキーボードや宇宙飛行士の士官候補生キーボードなどの後継では、メタラベルは「META」です。 Symbolicsキーボードでは、メタには「META」または「Meta」というラベルが付いています。</target>
        </trans-unit>
        <trans-unit id="9028e9d05d6a455c1974133f7e5293ddabaa337b" translate="yes" xml:space="preserve">
          <source>Note: in versions before 2.3.0, the &lt;code&gt;props&lt;/code&gt; option is required if you wish to accept props in a functional component. In 2.3.0+ you can omit the &lt;code&gt;props&lt;/code&gt; option and all attributes found on the component node will be implicitly extracted as props.</source>
          <target state="translated">注：2.3.0より前のバージョンでは、機能コンポーネントがpropsを受け入れる場合、 &lt;code&gt;props&lt;/code&gt; オプションが必要です。 2.3.0以降では、 &lt;code&gt;props&lt;/code&gt; オプションを省略できます。コンポーネントノードで見つかったすべての属性は、暗黙的にpropsとして抽出されます。</target>
        </trans-unit>
        <trans-unit id="94a9d4709f41005aebf7f630aea0e9e8dcba6214" translate="yes" xml:space="preserve">
          <source>Note: the &lt;code&gt;provide&lt;/code&gt; and &lt;code&gt;inject&lt;/code&gt; bindings are NOT reactive. This is intentional. However, if you pass down an observed object, properties on that object do remain reactive.</source>
          <target state="translated">注：バインドの &lt;code&gt;provide&lt;/code&gt; と &lt;code&gt;inject&lt;/code&gt; はリアクティブではありません。 これは意図的なものです。 ただし、監視対象オブジェクトを渡す場合、そのオブジェクトのプロパティはリアクティブのままです。</target>
        </trans-unit>
        <trans-unit id="458f74037e32ee6cfbdde797c11bd7a73de43a01" translate="yes" xml:space="preserve">
          <source>Note: this option does &lt;strong&gt;not&lt;/strong&gt; affect &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;style&lt;/code&gt; bindings.</source>
          <target state="translated">注：このオプションは、 &lt;code&gt;class&lt;/code&gt; および &lt;code&gt;style&lt;/code&gt; バインディングに&lt;strong&gt;は&lt;/strong&gt;影響し&lt;strong&gt;ません&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="0598de4737485dd16187bee300278ba69862eb70" translate="yes" xml:space="preserve">
          <source>Note: when mutating (rather than replacing) an Object or an Array, the old value will be the same as new value because they reference the same Object/Array. Vue doesn&amp;rsquo;t keep a copy of the pre-mutate value.</source>
          <target state="translated">注：オブジェクトまたは配列を（置き換えるのではなく）変更すると、古い値は新しい値と同じになります。 それらは同じオブジェクト/配列を参照します。 Vueは、変更前の値のコピーを保持しません。</target>
        </trans-unit>
        <trans-unit id="b91291f0de6e06db99bb183c76dabbf60ffa395f" translate="yes" xml:space="preserve">
          <source>Notice all actions that mutate the store&amp;rsquo;s state are put inside the store itself. This type of centralized state management makes it easier to understand what type of mutations could happen and how they are triggered. Now when something goes wrong, we&amp;rsquo;ll also have a log of what happened leading up to the bug.</source>
          <target state="translated">ストアの状態を変更するすべてのアクションは、ストア自体の内部に配置されることに注意してください。 このタイプの集中状態管理により、発生する可能性のある突然変異のタイプとそれらをトリガーする方法を理解しやすくなります。 何か問題が発生した場合は、バグまで何が起こったかのログを取得します。</target>
        </trans-unit>
        <trans-unit id="5bc1f6f3474e7672908319c7bc94aae61f59580d" translate="yes" xml:space="preserve">
          <source>Notice that when clicking on the buttons, each one maintains its own, separate &lt;code&gt;count&lt;/code&gt;. That&amp;rsquo;s because each time you use a component, a new &lt;strong&gt;instance&lt;/strong&gt; of it is created.</source>
          <target state="translated">ボタンをクリックすると、各ボタンは独自の個別の &lt;code&gt;count&lt;/code&gt; 維持することに注意してください。 これは、コンポーネントを使用するたびに、その新しい&lt;strong&gt;インスタンス&lt;/strong&gt;が作成されるためです。</target>
        </trans-unit>
        <trans-unit id="777758140398dbba4754b09995581bb165f2d561" translate="yes" xml:space="preserve">
          <source>Now &lt;code&gt;v-model&lt;/code&gt; should work perfectly with this component:</source>
          <target state="translated">これで、 &lt;code&gt;v-model&lt;/code&gt; はこのコンポーネントで完全に機能するはずです。</target>
        </trans-unit>
        <trans-unit id="f41ecd46e8d6d6bb70e920ed57d983ae6565a184" translate="yes" xml:space="preserve">
          <source>Now both &lt;code&gt;ComponentA&lt;/code&gt; and &lt;code&gt;ComponentC&lt;/code&gt; can be used inside &lt;code&gt;ComponentB&lt;/code&gt;&amp;lsquo;s template.</source>
          <target state="translated">これで、ComponentBのテンプレートでComponentAと &lt;code&gt;ComponentC&lt;/code&gt; の両方を使用できます。</target>
        </trans-unit>
        <trans-unit id="64af1694b13df77b316f8c73909dd8b963af9613" translate="yes" xml:space="preserve">
          <source>Now everything inside the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; elements will be passed to the corresponding slots. Any content not wrapped in a &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; using &lt;code&gt;v-slot&lt;/code&gt; is assumed to be for the default slot.</source>
          <target state="translated">これで、 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 要素のすべてが対応するスロットに渡されます。 &lt;code&gt;v-slot&lt;/code&gt; を使用して &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; でラップされていないコンテンツは、デフォルトスロット用であると想定されます。</target>
        </trans-unit>
        <trans-unit id="6d0f458e8cae4f3622f936273f3e1139e34d7a7b" translate="yes" xml:space="preserve">
          <source>Now in the component where you&amp;rsquo;ve defined this &lt;code&gt;ref&lt;/code&gt;, you can use:</source>
          <target state="translated">この &lt;code&gt;ref&lt;/code&gt; を定義したコンポーネントでは、次を使用できます。</target>
        </trans-unit>
        <trans-unit id="10c100aabba7af200c0826cfd9a4189752cd557e" translate="yes" xml:space="preserve">
          <source>Now it&amp;rsquo;s time to take a deep dive! One of Vue&amp;rsquo;s most distinct features is the unobtrusive reactivity system. Models are just plain JavaScript objects. When you modify them, the view updates. It makes state management simple and intuitive, but it&amp;rsquo;s also important to understand how it works to avoid some common gotchas. In this section, we are going to dig into some of the lower-level details of Vue&amp;rsquo;s reactivity system.</source>
          <target state="translated">深く潜りましょう！ Vueの最も特徴的な機能の1つは、控えめなレスポンシブシステムです。 モデルは単なるJavaScriptオブジェクトです。 それらを変更すると、ビューが更新されます。 状態管理をシンプルかつ直感的に保ちながら、一般的な落とし穴を回避するためにどのように機能するかを理解することも重要です。 このセクションでは、Vueのリアクティブシステムの低レベルの詳細を掘り下げます。</target>
        </trans-unit>
        <trans-unit id="8b6e6c5e29a0011ecf92b2b3f2e105991af96fc7" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s add a button to enlarge the text right before the content of every post:</source>
          <target state="translated">次に、すべての投稿のコンテンツの直前にテキストを拡大するボタンを追加しましょう。</target>
        </trans-unit>
        <trans-unit id="27f3edc7f43414bdb880e462618cc2a4be655f49" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s dive into an example, transitioning entering and leaving using the same CSS classes we&amp;rsquo;ve used previously:</source>
          <target state="translated">ここで、以前に使用したのと同じCSSクラスを使用して、エントリと終了を移行する例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="dd26b2548ee21e904e0d33fa95d291ffe37c263c" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s dive into an example. Here&amp;rsquo;s a JavaScript transition using Velocity.js:</source>
          <target state="translated">例を見てみましょう。 Velocity.jsを使用したJavaScriptの移行は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="db457f96df4f0407b03b33810d84f20e49792e2d" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s update the transition for our on/off buttons with &lt;code&gt;out-in&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;out-in&lt;/code&gt; を使用してオン/オフボタンの遷移を更新します。</target>
        </trans-unit>
        <trans-unit id="850bba741090a632ab041dbea9329ab10babf270" translate="yes" xml:space="preserve">
          <source>Now the &lt;code&gt;&amp;lt;base-input&amp;gt;&lt;/code&gt; component is a &lt;strong&gt;fully transparent wrapper&lt;/strong&gt;, meaning it can be used exactly like a normal &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element: all the same attributes and listeners will work, without the &lt;code&gt;.native&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;&amp;lt;base-input&amp;gt;&lt;/code&gt; コンポーネントは&lt;strong&gt;完全に透明なラッパー&lt;/strong&gt;です。 つまり、通常の &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素と同じように使用できます。 すべての同じ属性とリスナーは、 &lt;code&gt;.native&lt;/code&gt; 修飾子なしで機能します。</target>
        </trans-unit>
        <trans-unit id="33d4814b929f161b38b9f934ab2aa6a05b1be4d4" translate="yes" xml:space="preserve">
          <source>Now the &lt;em&gt;Posts&lt;/em&gt; tab maintains its state (the selected post) even when it&amp;rsquo;s not rendered. See &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/Lp20op9o/&quot;&gt;this fiddle&lt;/a&gt; for the complete code.</source>
          <target state="translated">[ &lt;em&gt;投稿&lt;/em&gt; ]タブは、レンダリングされていない場合でもその状態（選択した投稿）を保持します。 完全なコードについては、 &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/Lp20op9o/&quot;&gt;このフィドル&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3a866376561d170695076f998d16ef29475c4851" translate="yes" xml:space="preserve">
          <source>Now those inputs will be rendered from scratch each time you toggle. See for yourself:</source>
          <target state="translated">これらの入力は、トグルするたびにゼロからレンダリングされます。 自分を探してください：</target>
        </trans-unit>
        <trans-unit id="5237d0862d1e32d66a1238befdcec2a1cee4d6bd" translate="yes" xml:space="preserve">
          <source>Now we can pass the todo into each repeated component using &lt;code&gt;v-bind&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;v-bind&lt;/code&gt; はv-bindを使用して、繰り返される各コンポーネントにtodoを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="8ac2bcabccc1a40d27783fa177eb9745afd5270c" translate="yes" xml:space="preserve">
          <source>Now we get:</source>
          <target state="translated">今、私たちは得る：</target>
        </trans-unit>
        <trans-unit id="923823ddc53818b43f37e1756295008b20a5e569" translate="yes" xml:space="preserve">
          <source>Now we&amp;rsquo;ll answer both what the community can do for you and what you can do for the community.</source>
          <target state="translated">次に、コミュニティがあなたのためにできることと、あなたがコミュニティのためにできることの両方に答えてください。</target>
        </trans-unit>
        <trans-unit id="65acc113a97fb20c77fd8e66d6b9e5577e37c2d1" translate="yes" xml:space="preserve">
          <source>Now when using &lt;code&gt;v-model&lt;/code&gt; on this component:</source>
          <target state="translated">このコンポーネントで &lt;code&gt;v-model&lt;/code&gt; を使用する場合：</target>
        </trans-unit>
        <trans-unit id="248dcb3a91e49c1782db9a10e1b75d0c45f374c4" translate="yes" xml:space="preserve">
          <source>Now when we use &lt;code&gt;&amp;lt;submit-button&amp;gt;&lt;/code&gt; in a parent component, providing no content for the slot:</source>
          <target state="translated">親コンポーネントで &lt;code&gt;&amp;lt;submit-button&amp;gt;&lt;/code&gt; を使用し、スロットのコンテンツを提供しない場合：</target>
        </trans-unit>
        <trans-unit id="a992bbc0f49c4600f1fce407f7a3883535b20007" translate="yes" xml:space="preserve">
          <source>Now when we use the &lt;code&gt;&amp;lt;todo-list&amp;gt;&lt;/code&gt; component, we can optionally define an alternative &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; for todo items, but with access to data from the child:</source>
          <target state="translated">&lt;code&gt;&amp;lt;todo-list&amp;gt;&lt;/code&gt; コンポーネントを使用する場合、オプションでtodoアイテムの代替 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; を定義できますが、子からのデータにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="5c6ac744ac13f4f3529e5b95ada6cc236397759d" translate="yes" xml:space="preserve">
          <source>Now when you run &lt;code&gt;vm.fullName = 'John Doe'&lt;/code&gt;, the setter will be invoked and &lt;code&gt;vm.firstName&lt;/code&gt; and &lt;code&gt;vm.lastName&lt;/code&gt; will be updated accordingly.</source>
          <target state="translated">&lt;code&gt;vm.fullName = 'John Doe'&lt;/code&gt; は &lt;code&gt;vm.firstName&lt;/code&gt; を設定し、それに応じてvm.firstNameと &lt;code&gt;vm.lastName&lt;/code&gt; を更新します。</target>
        </trans-unit>
        <trans-unit id="c95a512db9f39a3a016016301d2d32cc53d1129b" translate="yes" xml:space="preserve">
          <source>Now whenever &lt;code&gt;sourceOfTruth&lt;/code&gt; is mutated, both &lt;code&gt;vmA&lt;/code&gt; and &lt;code&gt;vmB&lt;/code&gt; will update their views automatically. Subcomponents within each of these instances would also have access via &lt;code&gt;this.$root.$data&lt;/code&gt;. We have a single source of truth now, but debugging would be a nightmare. Any piece of data could be changed by any part of our app at any time, without leaving a trace.</source>
          <target state="translated">&lt;code&gt;vmA&lt;/code&gt; 、 sourceOfTruth vmBの場合は常に、vmAと &lt;code&gt;vmB&lt;/code&gt; の両方が自動的にビューを更新します。 これらの各インスタンス内のサブコンポーネントには、 &lt;code&gt;this.$root.$data&lt;/code&gt; からもアクセスできます 。 現在、真実の唯一の情報源がありますが、デバッグは悪夢です。 一部のデータは、トレースを残すことなく、アプリのどの部分でもいつでも変更できます。</target>
        </trans-unit>
        <trans-unit id="f0a99cd123681e2aa2af5f62113a3388dd485458" translate="yes" xml:space="preserve">
          <source>Now you can compose it in another component&amp;rsquo;s template:</source>
          <target state="translated">これで、別のコンポーネントテンプレートで作成できます。</target>
        </trans-unit>
        <trans-unit id="a3cafea5f9fea2834964a51ae219c94edcf43d7b" translate="yes" xml:space="preserve">
          <source>Now, whenever a new property is added to &lt;code&gt;post&lt;/code&gt; objects, it will automatically be available inside &lt;code&gt;&amp;lt;blog-post&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">これで、新しいプロパティが &lt;code&gt;post&lt;/code&gt; オブジェクトに追加されるたびに、自動的に &lt;code&gt;&amp;lt;blog-post&amp;gt;&lt;/code&gt; で利用可能になります。</target>
        </trans-unit>
        <trans-unit id="b7baa1d40c4ea29afc9098732bffee2a861a6c44" translate="yes" xml:space="preserve">
          <source>Number</source>
          <target state="translated">Number</target>
        </trans-unit>
        <trans-unit id="1249f1b2253683fc003ea8f094caa69928eaf837" translate="yes" xml:space="preserve">
          <source>Nuxt.js</source>
          <target state="translated">Nuxt.js</target>
        </trans-unit>
        <trans-unit id="f579c523960af1aec824c6fdc57af6d4abd76a1f" translate="yes" xml:space="preserve">
          <source>OR</source>
          <target state="translated">OR</target>
        </trans-unit>
        <trans-unit id="2883f191bc5ebfdc16c0813eff659b35363ea69b" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="translated">Object</target>
        </trans-unit>
        <trans-unit id="86580d14a7ddf3bcd41cb5bf79f5c784db2009b3" translate="yes" xml:space="preserve">
          <source>Object Change Detection Caveats</source>
          <target state="translated">オブジェクト変更検出警告</target>
        </trans-unit>
        <trans-unit id="bff5a67a67ce40c0fd925410f2eb22f8e622ed24" translate="yes" xml:space="preserve">
          <source>Object Literals</source>
          <target state="translated">オブジェクトリテラル</target>
        </trans-unit>
        <trans-unit id="68654e143c9a95a12dddf5b994152ad350c30fec" translate="yes" xml:space="preserve">
          <source>Object Syntax</source>
          <target state="translated">オブジェクト構文</target>
        </trans-unit>
        <trans-unit id="955b2e0aa5e53a4916bce29cbfdc2fd4cc269476" translate="yes" xml:space="preserve">
          <source>Official Declaration in NPM Packages</source>
          <target state="translated">NPMパッケージの公式宣言</target>
        </trans-unit>
        <trans-unit id="e0d4eccd8c718c1a4aa53fa3e4adb3463704c6c3" translate="yes" xml:space="preserve">
          <source>Official Flux-Like Implementation</source>
          <target state="translated">公式のフラックスのような実装</target>
        </trans-unit>
        <trans-unit id="d41ddeb6775e329516c16fc6584211bbddf25a44" translate="yes" xml:space="preserve">
          <source>Official Router</source>
          <target state="translated">公式ルーター</target>
        </trans-unit>
        <trans-unit id="28ad6876beffc882a2da696718cda5f0b89ad0ed" translate="yes" xml:space="preserve">
          <source>On &lt;code&gt;input&lt;/code&gt;, emit its own custom &lt;code&gt;input&lt;/code&gt; event with the new value</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; 、新しい値を持つ独自のカスタム入力イベントを発行します</target>
        </trans-unit>
        <trans-unit id="8d04e03632e4eea5ab7fbb011f47571b7d133e29" translate="yes" xml:space="preserve">
          <source>On a higher level, we can divide components into two categories: presentational ones and logical ones. We recommend using templates for presentational components and render function / JSX for logical ones. The percentage of these components depends on the type of app you are building, but in general we find presentational ones to be much more common.</source>
          <target state="translated">上位レベルでは、コンポーネントをプレゼンテーションとロジックの2つのカテゴリに分類できます。 プレゼンテーションコンポーネントにはテンプレートを使用し、論理コンポーネントにはRendering / JSXを使用することをお勧めします。 これらのコンポーネントの割合は、作成しているアプリの種類によって異なりますが、一般的にプレゼンテーション用のものははるかに一般的であることがわかります。</target>
        </trans-unit>
        <trans-unit id="ecfd81e3f5a0816680f9b8987dee9ab76e3a2d2b" translate="yes" xml:space="preserve">
          <source>On normal components, attributes not defined as props are automatically added to the root element of the component, replacing or &lt;a href=&quot;class-and-style&quot;&gt;intelligently merging with&lt;/a&gt; any existing attributes of the same name.</source>
          <target state="translated">通常のコンポーネントの場合、小道具として定義されていない属性は、コンポーネントのルート要素に自動的に追加され、同じ名前の既存の属性を置き換えるか、 &lt;a href=&quot;class-and-style&quot;&gt;インテリジェントにマージし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="115970ef5ff2b56182595889250a6ca56011969e" translate="yes" xml:space="preserve">
          <source>On root Vue instances (i.e. instances created with &lt;code&gt;new Vue({ ... })&lt;/code&gt;), you must use &lt;code&gt;propsData&lt;/code&gt; instead of &lt;code&gt;props&lt;/code&gt;.</source>
          <target state="translated">ルートVueインスタンス（つまり、 &lt;code&gt;new Vue({ ... })&lt;/code&gt; 作成されたインスタンス）では、 &lt;code&gt;props&lt;/code&gt; の代わりに &lt;code&gt;propsData&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="6cc2844f3ba73496715d5d711c0cabc37d43bc1d" translate="yes" xml:space="preserve">
          <source>On the other hand, &lt;code&gt;$refs&lt;/code&gt; are designed primarily for programmatic access in JavaScript - it is not recommended to rely on them in templates, because that would mean referring to state that does not belong to the instance itself. This would violate Vue&amp;rsquo;s data-driven view model.</source>
          <target state="translated">一方、 &lt;code&gt;$refs&lt;/code&gt; 、主にJavaScriptプログラムによるアクセス用に設計されています。 テンプレートに依存することはお勧めしません。 これは、インスタンスに属さない状態を参照するためです。 これは、Vueのデータ駆動型ビューモデルに違反します。</target>
        </trans-unit>
        <trans-unit id="b540e34dd34eb0880938f77efa7424968025eadc" translate="yes" xml:space="preserve">
          <source>On the other hand, the runtime-only build is fully CSP-compliant. When using the runtime-only build with &lt;a href=&quot;https://github.com/vuejs-templates/webpack-simple&quot;&gt;Webpack + vue-loader&lt;/a&gt; or &lt;a href=&quot;https://github.com/vuejs-templates/browserify-simple&quot;&gt;Browserify + vueify&lt;/a&gt;, your templates will be precompiled into &lt;code&gt;render&lt;/code&gt; functions which work perfectly in CSP environments.</source>
          <target state="translated">一方、ランタイムのみのビルドは完全にCSPに準拠しています。 &lt;a href=&quot;https://github.com/vuejs-templates/webpack-simple&quot;&gt;Webpack + vue-loader&lt;/a&gt;または&lt;a href=&quot;https://github.com/vuejs-templates/browserify-simple&quot;&gt;Browserify + vueify&lt;/a&gt;でランタイムのみのビルドを使用する場合、テンプレートはCSP環境で完全に機能 &lt;code&gt;render&lt;/code&gt; 関数にプリコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="8d767e2d19bb7e35a75d58e381e3d41454c0c3f2" translate="yes" xml:space="preserve">
          <source>On this page, we&amp;rsquo;ll only cover entering, leaving, and list transitions, but you can see the next section for &lt;a href=&quot;transitioning-state&quot;&gt;managing state transitions&lt;/a&gt;.</source>
          <target state="translated">このページでは、 &lt;a href=&quot;transitioning-state&quot;&gt;遷移&lt;/a&gt;の開始、終了、およびリストのみに焦点を当てていますが、状態遷移の管理に関する次のセクションを参照できます。</target>
        </trans-unit>
        <trans-unit id="37eb05f4d4e96c1234bdb668f4b2f5b554eed08a" translate="yes" xml:space="preserve">
          <source>Once a prop is registered, you can pass data to it as a custom attribute, like this:</source>
          <target state="translated">小道具が登録されると、次のように、カスタム属性として小道具にデータを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="66af394c02eb313b263b2c4b24ed3c50b4c07c98" translate="yes" xml:space="preserve">
          <source>Once again, try not to overuse this pattern. While convenient in those rare cases when you have to render a lot of static content, it&amp;rsquo;s simply not necessary unless you actually notice slow rendering &amp;ndash; plus, it could cause a lot of confusion later. For example, imagine another developer who&amp;rsquo;s not familiar with &lt;code&gt;v-once&lt;/code&gt; or simply misses it in the template. They might spend hours trying to figure out why the template isn&amp;rsquo;t updating correctly.</source>
          <target state="translated">繰り返しますが、このパターンを使いすぎないでください。 これは、多くの静的コンテンツをレンダリングする必要があるまれな場合に役立ちますが、レンダリングが実際に遅いことに気付いていない限り、必要ありません。 さらに、後で多くの混乱を引き起こす可能性があります。 たとえば、 &lt;code&gt;v-once&lt;/code&gt; になじみのない別の開発者、または単にテンプレートを見逃している開発者を想像してください。 テンプレートが正しく更新されない理由を理解しようとして何時間も費やすことがあります。</target>
        </trans-unit>
        <trans-unit id="60427c06e75efde50ce039ae0b452cc000ae7ef8" translate="yes" xml:space="preserve">
          <source>Once observed, you can no longer add reactive properties to the root data object. It is therefore recommended to declare all root-level reactive properties upfront, before creating the instance.</source>
          <target state="translated">一度確認すると、ルートプロパティオブジェクトにpost-propertiesを追加できなくなります。 したがって、インスタンスを作成する前に、すべてのルートレベルのリアクティブプロパティを事前に宣言することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="decb1a1fde9ee9b3e759b559bcf2ede344d13377" translate="yes" xml:space="preserve">
          <source>Once you feel comfortable with the knowledge you&amp;rsquo;ve just digested, we recommend coming back to read the full guide on &lt;a href=&quot;components-dynamic-async&quot;&gt;Dynamic &amp;amp; Async Components&lt;/a&gt;, as well as the other pages in the Components In-Depth section of the sidebar.</source>
          <target state="translated">知識に満足している場合は、サイドバーのコンポーネントの詳細セクションにある&lt;a href=&quot;components-dynamic-async&quot;&gt;動的および非同期コンポーネント&lt;/a&gt;およびその他のページの完全なガイドを読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="f50329c826448bbda1ee5ce8c2c416fac8c003a3" translate="yes" xml:space="preserve">
          <source>One important note is that these FLIP transitions do not work with elements set to &lt;code&gt;display: inline&lt;/code&gt;. As an alternative, you can use &lt;code&gt;display: inline-block&lt;/code&gt; or place elements in a flex context.</source>
          <target state="translated">重要な注意点の1つは、これらのFLIPトランジションは、 &lt;code&gt;display: inline&lt;/code&gt; するように設定された要素では機能しないことです：inline ：inline。 または、 &lt;code&gt;display: inline-block&lt;/code&gt; 使用するか、要素をflexコンテキストに配置できます。</target>
        </trans-unit>
        <trans-unit id="15a19c04bf3761da4954cadebd24295dde2b8675" translate="yes" xml:space="preserve">
          <source>One important thing to note is that &lt;strong&gt;separation of concerns is not equal to separation of file types.&lt;/strong&gt; In modern UI development, we have found that instead of dividing the codebase into three huge layers that interweave with one another, it makes much more sense to divide them into loosely-coupled components and compose them. Inside a component, its template, logic and styles are inherently coupled, and collocating them actually makes the component more cohesive and maintainable.</source>
          <target state="translated">注意すべき重要な点の1つは&lt;strong&gt;、懸念事項の分離が&lt;/strong&gt; &lt;strong&gt;ファイルタイプの分離と等しくないことです。&lt;/strong&gt; 最新のUI開発では、コードベースを3つの巨大な織り合わせ層に分割するのではなく、疎結合コンポーネントに分割する方がはるかに理にかなっています。 コンポーネントの内部では、そのテンプレート、ロジック、およびスタイルは本質的に接続されており、それらを実際に配置すると、コンポーネントの結合性と保守性が向上します。</target>
        </trans-unit>
        <trans-unit id="ba41464fb51dc3d17291a7984b07e3ead107d6cd" translate="yes" xml:space="preserve">
          <source>One of the most common transition types uses CSS transitions. Here&amp;rsquo;s an example:</source>
          <target state="translated">最も一般的な遷移タイプの1つは、CSS遷移を使用します。 例えば：</target>
        </trans-unit>
        <trans-unit id="7b71ee323d52ac501596f9b35d6767689ddb4ebc" translate="yes" xml:space="preserve">
          <source>One of the most common uses for these methods is to communicate between a parent and its direct children. In these cases, you can actually &lt;a href=&quot;components#Form-Input-Components-using-Custom-Events&quot;&gt;listen to an &lt;code&gt;$emit&lt;/code&gt; from a child with &lt;code&gt;v-on&lt;/code&gt;&lt;/a&gt;. This allows you to keep the convenience of events with added explicitness.</source>
          <target state="translated">これらのメソッドの最も一般的な使用法の1つは、親とその直接の子の間で通信することです。 これらの場合、実際&lt;a href=&quot;components#Form-Input-Components-using-Custom-Events&quot;&gt;に子 &lt;code&gt;v-on&lt;/code&gt; から &lt;code&gt;$emit&lt;/code&gt; を聞く&lt;/a&gt;ことができます。 これにより、明確さを追加し、イベントの利便性を維持できます。</target>
        </trans-unit>
        <trans-unit id="70774a581a1c775647bf86a829f4e0651d0e222a" translate="yes" xml:space="preserve">
          <source>One or More Named Parameters &lt;sup&gt;changed&lt;/sup&gt;</source>
          <target state="translated">1つ以上の名前付きパラメーターが&lt;sup&gt;変更されました&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="4e3d2bc9560217cd384652200da10fbf0bdb8e0b" translate="yes" xml:space="preserve">
          <source>One thing to note: similar to how &lt;code&gt;v-bind:class&lt;/code&gt; and &lt;code&gt;v-bind:style&lt;/code&gt; have special treatment in templates, they have their own top-level fields in VNode data objects. This object also allows you to bind normal HTML attributes as well as DOM properties such as &lt;code&gt;innerHTML&lt;/code&gt; (this would replace the &lt;code&gt;v-html&lt;/code&gt; directive):</source>
          <target state="translated">留意すべきことが1つあります。 v &lt;code&gt;v-bind:class&lt;/code&gt; および &lt;code&gt;v-bind:style&lt;/code&gt; がテンプレートで特別な処理を行う方法と同様に、VNodeデータオブジェクトには独自のトップレベルフィールドがあります。 このオブジェクトを使用すると、 &lt;code&gt;innerHTML&lt;/code&gt; などのDOMプロパティだけでなく、通常のHTML属性（ &lt;code&gt;v-html&lt;/code&gt; ディレクティブを置き換える）もバインドできます。</target>
        </trans-unit>
        <trans-unit id="0d00cba8d56cb34c07366778b058997e1e6be989" translate="yes" xml:space="preserve">
          <source>One time bindings (&lt;code&gt;{{* foo }}&lt;/code&gt;) have been replaced by the new &lt;a href=&quot;../api/index#v-once&quot;&gt;&lt;code&gt;v-once&lt;/code&gt; directive&lt;/a&gt;.</source>
          <target state="translated">ワンタイムバインディング（ &lt;code&gt;{{* foo }}&lt;/code&gt; ）は、新しい &lt;code&gt;v-once&lt;/code&gt; ディレクティブに置き換えられました。</target>
        </trans-unit>
        <trans-unit id="b6a0ca5f17117a2d79de1ddff5f7c2037c280f5f" translate="yes" xml:space="preserve">
          <source>One-Time Bindings &lt;sup&gt;replaced&lt;/sup&gt;</source>
          <target state="translated">ワンタイムバインディングを&lt;sup&gt;置き換える&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="6a82bece6c6f4d9547ea740b83ea3c0446063eb1" translate="yes" xml:space="preserve">
          <source>One-Way Data Flow</source>
          <target state="translated">一方向のデータフロー</target>
        </trans-unit>
        <trans-unit id="545c63628a39318763f613482d1fbb98218b985f" translate="yes" xml:space="preserve">
          <source>Only UMD builds are available from Bower.</source>
          <target state="translated">Bowerから入手できるのはUMDビルドのみです。</target>
        </trans-unit>
        <trans-unit id="afb58a0b3374e0000a3d5235d1868b2071496402" translate="yes" xml:space="preserve">
          <source>Only Vue Router 2 is compatible with Vue 2, so if you&amp;rsquo;re updating Vue, you&amp;rsquo;ll have to update Vue Router as well. That&amp;rsquo;s why we&amp;rsquo;ve included details on the migration path here in the main docs. For a complete guide on using the new Vue Router, see the &lt;a href=&quot;https://router.vuejs.org/en/&quot;&gt;Vue Router docs&lt;/a&gt;.</source>
          <target state="translated">Vueを更新する場合、Vue Router 2もVue 2と互換性があるため、Vue Routerも更新する必要があります。したがって、メインドキュメントには移行パスの詳細が含まれるようになりました。 新しいVue Routerの使用に関する完全なガイドについては、 &lt;a href=&quot;https://router.vuejs.org/en/&quot;&gt;Vue Routerのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="83950822db2f31bcab4a982049e8a2377ef9aa81" translate="yes" xml:space="preserve">
          <source>Only Vue Router 2 is compatible with Vue 2, so yes, you&amp;rsquo;ll have to follow the &lt;a href=&quot;migration-vue-router&quot;&gt;migration path for Vue Router&lt;/a&gt; as well. Fortunately, most applications don&amp;rsquo;t have a lot of router code, so this likely won&amp;rsquo;t take more than an hour.</source>
          <target state="translated">Vue Router 2のみがVue 2と互換性があります。したがって&lt;a href=&quot;migration-vue-router&quot;&gt;、&lt;/a&gt; Vue Routerの移行パスに従う必要があります。 幸いなことに、ほとんどのアプリケーションには多くのルーターコードがなく、1時間もかかりません。</target>
        </trans-unit>
        <trans-unit id="2cbd6f69ac9f00bc6cc9a5cada50b773f8b9b204" translate="yes" xml:space="preserve">
          <source>Only in 2.2.0+: Also works with Array + index.</source>
          <target state="translated">2.2.0以降のみ：配列+インデックスで動作します。</target>
        </trans-unit>
        <trans-unit id="95478f28e516ba5806445048a3c04633ee9620d8" translate="yes" xml:space="preserve">
          <source>Optimization Efforts</source>
          <target state="translated">最適化の取り組み</target>
        </trans-unit>
        <trans-unit id="780c075090673488095ee8c24e310c188ceb0e25" translate="yes" xml:space="preserve">
          <source>Option Merging</source>
          <target state="translated">統合オプション</target>
        </trans-unit>
        <trans-unit id="34b239efa2fca3d9404779824c96746803cb0ac3" translate="yes" xml:space="preserve">
          <source>Options / Assets</source>
          <target state="translated">オプション/資産</target>
        </trans-unit>
        <trans-unit id="a8322b7d3e6ea2843e0f110827e9f381192e83db" translate="yes" xml:space="preserve">
          <source>Options / Composition</source>
          <target state="translated">オプション/構成</target>
        </trans-unit>
        <trans-unit id="23f8ac645a29b2a587df1e001744b1d9555b758c" translate="yes" xml:space="preserve">
          <source>Options / DOM</source>
          <target state="translated">オプション/ DOM</target>
        </trans-unit>
        <trans-unit id="7e61ca3b6c7817347db226ad3551cc64c2d446f7" translate="yes" xml:space="preserve">
          <source>Options / Data</source>
          <target state="translated">オプション/データ</target>
        </trans-unit>
        <trans-unit id="83461f255e0b700d1fc468a6266119fa610f9019" translate="yes" xml:space="preserve">
          <source>Options / Lifecycle Hooks</source>
          <target state="translated">オプション/ライフサイクルフック</target>
        </trans-unit>
        <trans-unit id="7d2f97ccdee65e286d78a496a5ee8cd549c930ee" translate="yes" xml:space="preserve">
          <source>Options / Misc</source>
          <target state="translated">オプション/その他</target>
        </trans-unit>
        <trans-unit id="c65a7777ad439fc6385d6da8d4c12a4f89868164" translate="yes" xml:space="preserve">
          <source>Options such as &lt;code&gt;acceptStatement&lt;/code&gt;, &lt;code&gt;deep&lt;/code&gt;, &lt;code&gt;priority&lt;/code&gt;, etc have all been removed. To replace &lt;code&gt;twoWay&lt;/code&gt; directives, see &lt;a href=&quot;#Two-Way-Filters-replaced&quot;&gt;this example&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;acceptStatement&lt;/code&gt; 、 &lt;code&gt;deep&lt;/code&gt; 、 &lt;code&gt;priority&lt;/code&gt; などのオプションはすべて削除されました。 &lt;code&gt;twoWay&lt;/code&gt; ディレクティブを置き換えるには、 &lt;a href=&quot;#Two-Way-Filters-replaced&quot;&gt;この例&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="268262a68726a842a9214f48a664175ac456e7a4" translate="yes" xml:space="preserve">
          <source>Options that expect object values, for example &lt;code&gt;methods&lt;/code&gt;, &lt;code&gt;components&lt;/code&gt; and &lt;code&gt;directives&lt;/code&gt;, will be merged into the same object. The component&amp;rsquo;s options will take priority when there are conflicting keys in these objects:</source>
          <target state="translated">&lt;code&gt;methods&lt;/code&gt; 、 &lt;code&gt;components&lt;/code&gt; 、 &lt;code&gt;directives&lt;/code&gt; などのオブジェクト値を期待するオプションは、同じオブジェクトにマージされます。 これらのオブジェクトに競合するキーがある場合、コンポーネントオプションが優先されます。</target>
        </trans-unit>
        <trans-unit id="6e8a33817f19f064f5e6cf9b1efc94083145cda9" translate="yes" xml:space="preserve">
          <source>Or a data/computed property:</source>
          <target state="translated">またはデータ/計算されたプロパティ：</target>
        </trans-unit>
        <trans-unit id="60f24c4199344a7f41d53a7637411a2eabdf966c" translate="yes" xml:space="preserve">
          <source>Or a render function:</source>
          <target state="translated">または、レンダリング機能：</target>
        </trans-unit>
        <trans-unit id="023f1403c5535c7569fdca6e12645578c310b4c5" translate="yes" xml:space="preserve">
          <source>Or alternatively, you could use Webpack&amp;rsquo;s asynchronous &lt;code&gt;import&lt;/code&gt; when you register the component locally:</source>
          <target state="translated">または、コンポーネントをローカルに登録するときにWebpackの非同期 &lt;code&gt;import&lt;/code&gt; 使用できます。</target>
        </trans-unit>
        <trans-unit id="45c03a2813f8f4d2212c4aad0f6ca1365bfc8c76" translate="yes" xml:space="preserve">
          <source>Or better yet, pass removal methods an index:</source>
          <target state="translated">さらに良いことに、インデックスをdeleteメソッドに渡します。</target>
        </trans-unit>
        <trans-unit id="7655b19551e9be2b132e49ba50a30e1355a9890c" translate="yes" xml:space="preserve">
          <source>Or even other components:</source>
          <target state="translated">または他のコンポーネント：</target>
        </trans-unit>
        <trans-unit id="03b6295d62d0a9f390c82c14d8335ae12a8dffb8" translate="yes" xml:space="preserve">
          <source>Or if &lt;code&gt;myElement&lt;/code&gt; is the last child:</source>
          <target state="translated">または、 &lt;code&gt;myElement&lt;/code&gt; が最後の子の場合：</target>
        </trans-unit>
        <trans-unit id="a001bd7723a1c2e569009fd7dcd66c9ec91d9d8c" translate="yes" xml:space="preserve">
          <source>Or if you&amp;rsquo;re using ES2015 modules, such as through Babel and Webpack, that might look more like:</source>
          <target state="translated">または、BabelやWebpackなどのES2015モジュールを使用している場合：</target>
        </trans-unit>
        <trans-unit id="24f03f9044ac60a104f95613db5b63ecc9c3a137" translate="yes" xml:space="preserve">
          <source>Or with a render function:</source>
          <target state="translated">または、レンダリング関数を使用する場合：</target>
        </trans-unit>
        <trans-unit id="7f55d71b1414a39798d6cca5dd9a4e4bcb171abc" translate="yes" xml:space="preserve">
          <source>Or with component methods:</source>
          <target state="translated">または、コンポーネントメソッドを使用する場合：</target>
        </trans-unit>
        <trans-unit id="014d7bb6d9a77fedd188db250f7b0d093aca38d2" translate="yes" xml:space="preserve">
          <source>Or, if the event handler is a method:</source>
          <target state="translated">または、イベントハンドラーがメソッドの場合：</target>
        </trans-unit>
        <trans-unit id="283f8ac5294276aa36ea18c510c09f047be7a9ce" translate="yes" xml:space="preserve">
          <source>Or, if you&amp;rsquo;re using the runtime-only build of Vue:</source>
          <target state="translated">または、Vueのランタイム専用ビルドを使用している場合：</target>
        </trans-unit>
        <trans-unit id="42dd049e1164508d70fdffd3fa7096495d134200" translate="yes" xml:space="preserve">
          <source>Or, the &lt;code&gt;slot&lt;/code&gt; attribute can also be used directly on a normal element:</source>
          <target state="translated">&lt;code&gt;slot&lt;/code&gt; では、通常の要素でスロット属性を直接使用できます。</target>
        </trans-unit>
        <trans-unit id="eda804a2c09c29b8cf6a5a0b90c532b90ce7782e" translate="yes" xml:space="preserve">
          <source>Or, using &lt;a href=&quot;https://github.com/hughsk/envify&quot;&gt;envify&lt;/a&gt; with Grunt and &lt;a href=&quot;https://github.com/jmreidy/grunt-browserify&quot;&gt;grunt-browserify&lt;/a&gt;:</source>
          <target state="translated">または&lt;a href=&quot;https://github.com/jmreidy/grunt-browserify&quot;&gt;envifyを&lt;/a&gt; Gruntおよびgrunt- browserifyとともに使用します 。</target>
        </trans-unit>
        <trans-unit id="4a6aaeff2cbead89c1f4935f438fab6a604b15ba" translate="yes" xml:space="preserve">
          <source>Or, using &lt;a href=&quot;https://github.com/hughsk/envify&quot;&gt;envify&lt;/a&gt; with Gulp:</source>
          <target state="translated">または、 &lt;a href=&quot;https://github.com/hughsk/envify&quot;&gt;Gulp&lt;/a&gt;でenvifyを使用します。</target>
        </trans-unit>
        <trans-unit id="1dde4fa7292ce9cc3269b98cdb60ec01006edb1f" translate="yes" xml:space="preserve">
          <source>Order matters when using modifiers because the relevant code is generated in the same order. Therefore using &lt;code&gt;v-on:click.prevent.self&lt;/code&gt; will prevent &lt;strong&gt;all clicks&lt;/strong&gt; while &lt;code&gt;v-on:click.self.prevent&lt;/code&gt; will only prevent clicks on the element itself.</source>
          <target state="translated">関連するコードは同じ順序で生成されるため、修飾子を使用する場合、順序は重要です。 したがって、 &lt;code&gt;v-on:click.prevent.self&lt;/code&gt; を使用&lt;strong&gt;すると&lt;/strong&gt; 、 &lt;strong&gt;すべてのクリックが&lt;/strong&gt;防止され、 &lt;code&gt;v-on:click.self.prevent&lt;/code&gt; は要素自体のクリックのみを防止します。</target>
        </trans-unit>
        <trans-unit id="39e64d7abff6f773ffb6cbec098e4c76feffd596" translate="yes" xml:space="preserve">
          <source>Order of words in component names</source>
          <target state="translated">コンポーネント名の語順</target>
        </trans-unit>
        <trans-unit id="4ca3deef66606ab2cc6dd3240ad8a0d842c161e3" translate="yes" xml:space="preserve">
          <source>Order of words in component names &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">コンポーネント名の語順を&lt;sup&gt;強くお勧めします&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="ce2a84f2c2447c5ea7220c9144eb3ca335437fca" translate="yes" xml:space="preserve">
          <source>Organizing Components</source>
          <target state="translated">コンポーネントの整理</target>
        </trans-unit>
        <trans-unit id="c5c0f6920c95f31314076af49b17314ea73698db" translate="yes" xml:space="preserve">
          <source>Organizing Transitions into Components</source>
          <target state="translated">トランジションをコンポーネントに整理する</target>
        </trans-unit>
        <trans-unit id="0ba799c410addb3c357f8f4ace9cc3fe6bde69ff" translate="yes" xml:space="preserve">
          <source>Other Examples</source>
          <target state="translated">その他の例</target>
        </trans-unit>
        <trans-unit id="b8975bed11b093ad4d25765fbdba52b25cdf43ca" translate="yes" xml:space="preserve">
          <source>Our &lt;a href=&quot;https://vuejs.org/coc&quot;&gt;Code of Conduct&lt;/a&gt; is a guide to make it easier to enrich all of us and the technical communities in which we participate.</source>
          <target state="translated">私たちの行動規範は、私たち全員と私たちが参加する技術コミュニティを豊かにするためのガイドです。</target>
        </trans-unit>
        <trans-unit id="e13c5dab7f9b9edcb291ceb3ccaa49cace4cfdc4" translate="yes" xml:space="preserve">
          <source>Our custom directive is now flexible enough to support a few different use cases.</source>
          <target state="translated">カスタムディレクティブは、いくつかの異なるユースケースをサポートするのに十分な柔軟性を備えています。</target>
        </trans-unit>
        <trans-unit id="37f52ec20ab2f8bf7b37f62b547cb8e20c076916" translate="yes" xml:space="preserve">
          <source>Our setup code is kept separate from our cleanup code, making it more difficult to programmatically clean up anything we set up.</source>
          <target state="translated">セットアップコードはクリーンアップコードとは別に保持されるため、プログラムでセットアップをクリーンアップするのがより難しくなります。</target>
        </trans-unit>
        <trans-unit id="238d7a51a5c3679447b882c1766791e18087ee23" translate="yes" xml:space="preserve">
          <source>Over time though, Knockout development has slowed and it&amp;rsquo;s begun to show its age a little. For example, its component system lacks a full set of lifecycle hooks and although it&amp;rsquo;s a very common use case, the interface for passing children to a component feels a little clunky compared to &lt;a href=&quot;components#Content-Distribution-with-Slots&quot;&gt;Vue&amp;rsquo;s&lt;/a&gt;.</source>
          <target state="translated">しかし、時間が経つにつれて、ノックアウトの開発は遅くなり、少し年齢を示し始めました。 たとえば、コンポーネントシステムにはライフサイクルフックの完全なセットがなく、非常に一般的なユースケースですが、コンポーネントに子を渡すためのインターフェイスは&lt;a href=&quot;components#Content-Distribution-with-Slots&quot;&gt;Vue&lt;/a&gt;と比較して少し不格好に感じます。</target>
        </trans-unit>
        <trans-unit id="801ee7630523d9225a5832eb0b586c416639bcdd" translate="yes" xml:space="preserve">
          <source>Overall this removes the need for a whole class of performance optimizations from the developer&amp;rsquo;s plate, and allows them to focus more on building the app itself as it scales.</source>
          <target state="translated">全体として、これにより、開発者プレートからパフォーマンス最適化のクラス全体が不要になり、スケーリングに合わせてアプリ自体の構築に集中できます。</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="9ddaaee77cc1ce72a49a759b344df34d9c4b8e47" translate="yes" xml:space="preserve">
          <source>Parcel</source>
          <target state="translated">Parcel</target>
        </trans-unit>
        <trans-unit id="33422ae8d86c599fdf8a4eca4a9f0b44c416cdcc" translate="yes" xml:space="preserve">
          <source>Partials have been removed in favor of more explicit data flow between components, using props. Unless you&amp;rsquo;re using a partial in a performance-critical area, the recommendation is to use a &lt;a href=&quot;components&quot;&gt;normal component&lt;/a&gt; instead. If you were dynamically binding the &lt;code&gt;name&lt;/code&gt; of a partial, you can use a &lt;a href=&quot;components#Dynamic-Components&quot;&gt;dynamic component&lt;/a&gt;.</source>
          <target state="translated">小道具を使用してコンポーネント間のデータフローをより明確にするために、パーシャルが削除されました。 パフォーマンスが重要な領域でパーシャルを使用している場合を除き、代わりに通常のコンポーネントを使用することをお勧めします。 部分的な &lt;code&gt;name&lt;/code&gt; 動的にバインドする場合は、 &lt;a href=&quot;components#Dynamic-Components&quot;&gt;動的コンポーネントを&lt;/a&gt;使用できます 。</target>
        </trans-unit>
        <trans-unit id="338863b7eee72484e07f62862d08e6032c44cc9e" translate="yes" xml:space="preserve">
          <source>PascalCase has a few advantages over kebab-case:</source>
          <target state="translated">PascalCaseには、ケバブの場合に比べていくつかの利点があります。</target>
        </trans-unit>
        <trans-unit id="548d3885edc6e4335d13093c595410a7b884affc" translate="yes" xml:space="preserve">
          <source>PascalCase works best with autocompletion in code editors, as it&amp;rsquo;s consistent with how we reference components in JS(X) and templates, wherever possible. However, mixed case filenames can sometimes create issues on case-insensitive file systems, which is why kebab-case is also perfectly acceptable.</source>
          <target state="translated">PascalCaseは、コードエディターのオートコンプリートで最適に機能します。JS（X）およびテンプレートでコンポーネントを参照するのと可能な限り一貫性があるためです。 ただし、大文字と小文字が混在するファイル名は、大文字と小文字を区別しないファイルシステムで問題を引き起こす可能性があるため、kebab-caseは完全に受け入れられます。</target>
        </trans-unit>
        <trans-unit id="7a196eac2c28fafbe4d9187661633bcbf6027ce5" translate="yes" xml:space="preserve">
          <source>Pass props to an instance during its creation. This is primarily intended to make unit testing easier.</source>
          <target state="translated">作成中にインスタンスに小道具を渡します。 これは主に、単体テストを簡単にすることを目的としています。</target>
        </trans-unit>
        <trans-unit id="b15f86774ec499f2e12e99cefb07c19682388f39" translate="yes" xml:space="preserve">
          <source>Passing Attributes and Events to Child Elements/Components</source>
          <target state="translated">属性とイベントを子要素/コンポーネントに渡す</target>
        </trans-unit>
        <trans-unit id="2d887895f60f5b27f1b6d8b4caca996b7ba1b2ec" translate="yes" xml:space="preserve">
          <source>Passing Data to Child Components with Props</source>
          <target state="translated">小道具を使用してデータを子コンポーネントに渡す</target>
        </trans-unit>
        <trans-unit id="433763659eeaa495cbff9aab4fe004119a2898a6" translate="yes" xml:space="preserve">
          <source>Passing Static or Dynamic Props</source>
          <target state="translated">静的または動的な小道具を渡す</target>
        </trans-unit>
        <trans-unit id="69be14b609ea17960c4d679c5eac924f94c81a81" translate="yes" xml:space="preserve">
          <source>Passing a Boolean</source>
          <target state="translated">ブール値を渡す</target>
        </trans-unit>
        <trans-unit id="d0fe306e90e1b3d68f9dfb33a59e5241fa360572" translate="yes" xml:space="preserve">
          <source>Passing a Number</source>
          <target state="translated">パス番号</target>
        </trans-unit>
        <trans-unit id="7c0a78154538069738bcf2cc5806f8c67f3744ba" translate="yes" xml:space="preserve">
          <source>Passing an Array</source>
          <target state="translated">配列を渡す</target>
        </trans-unit>
        <trans-unit id="acf0b569b0457811ee77b0ce38bc6a81b61b14f2" translate="yes" xml:space="preserve">
          <source>Passing an Object</source>
          <target state="translated">オブジェクトを渡す</target>
        </trans-unit>
        <trans-unit id="d7c9bb0f37131e5505011ab717b8002aabd88b14" translate="yes" xml:space="preserve">
          <source>Passing in &lt;code&gt;immediate: true&lt;/code&gt; in the option will trigger the callback immediately with the current value of the expression:</source>
          <target state="translated">&lt;code&gt;immediate: true&lt;/code&gt; Pass true：オプションのtrueを使用すると、式の現在の値でコールバックがすぐにトリガーされます。</target>
        </trans-unit>
        <trans-unit id="035acdf774e378174fd9c2b1135b63f7dfac1cf3" translate="yes" xml:space="preserve">
          <source>Passing the Properties of an Object</source>
          <target state="translated">オブジェクトのプロパティを渡す</target>
        </trans-unit>
        <trans-unit id="c141d90b1516060d8a91d0883b728d5ba2fca7a4" translate="yes" xml:space="preserve">
          <source>Performance-wise, Vue outperforms Ember &lt;a href=&quot;https://stefankrause.net/js-frameworks-benchmark8/table.html&quot;&gt;by a fair margin&lt;/a&gt;, even after the latest Glimmer engine update in Ember 3.x. Vue automatically batches updates, while in Ember you need to manually manage run loops in performance-critical situations.</source>
          <target state="translated">パフォーマンスに関しては、最新のGlimmerエンジンをEmber 3.xで更新した後でも、VueはEmberよりも&lt;a href=&quot;https://stefankrause.net/js-frameworks-benchmark8/table.html&quot;&gt;はるかに&lt;/a&gt;優れたマージンを持っています。 Vueバッチは自動的に更新されますが、Emberでは、パフォーマンスが重要な状況で実行ループを手動で管理する必要があります。</target>
        </trans-unit>
        <trans-unit id="07ba11f36689ab7bebcb8bac7bb946785fdc5fcf" translate="yes" xml:space="preserve">
          <source>Please refer to the &lt;a href=&quot;https://github.com/vuejs/vue/blob/dev/src/core/vdom/vnode.js&quot;&gt;VNode class declaration&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/vuejs/vue/blob/dev/src/core/vdom/vnode.js&quot;&gt;VNodeクラス宣言を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ac81e979c05bfcd7c0a62185f40c627cb4bf8d0e" translate="yes" xml:space="preserve">
          <source>Please refer to the &lt;a href=&quot;https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer&quot;&gt;vue-server-renderer package documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer&quot;&gt;vue-server-rendererパッケージのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ab2e26dd8b8868a3969cb3321e0c983c0d9d67d4" translate="yes" xml:space="preserve">
          <source>Plugins</source>
          <target state="translated">Plugins</target>
        </trans-unit>
        <trans-unit id="2ec26164bdb69a59c55861e3e8bf8c2338afa489" translate="yes" xml:space="preserve">
          <source>Plugins may add to Vue&amp;rsquo;s global/instance properties and component options. In these cases, type declarations are needed to make plugins compile in TypeScript. Fortunately, there&amp;rsquo;s a TypeScript feature to augment existing types called &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation&quot;&gt;module augmentation&lt;/a&gt;.</source>
          <target state="translated">プラグインは、Vueのグローバル/インスタンスプロパティおよびコンポーネントオプションに追加できます。 これらの場合、TypeScriptを使用してプラグインをコンパイルするには、型宣言が必要です。 幸いなことに、 &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation&quot;&gt;モジュール拡張&lt;/a&gt;と呼ばれる既存の型を拡張するTypeScript機能があります 。</target>
        </trans-unit>
        <trans-unit id="a77c0e9519023f6d3be8c4d42d0b610cd78973f1" translate="yes" xml:space="preserve">
          <source>Plugins usually add global-level functionality to Vue. There is no strictly defined scope for a plugin - there are typically several types of plugins:</source>
          <target state="translated">通常、プラグインはグローバルレベルの機能をVueに追加します。 プラグインには厳密に定義されたスコープはありません。通常、いくつかのタイプのプラグインがあります。</target>
        </trans-unit>
        <trans-unit id="6b444c9bbd597a6dbe29c3f8f817d1db7e6559dd" translate="yes" xml:space="preserve">
          <source>Polymer</source>
          <target state="translated">Polymer</target>
        </trans-unit>
        <trans-unit id="48e622aad7a867a5952bf32f2af768cae8dc7ee2" translate="yes" xml:space="preserve">
          <source>Polymer is another Google-sponsored project and in fact was a source of inspiration for Vue as well. Vue&amp;rsquo;s components can be loosely compared to Polymer&amp;rsquo;s custom elements and both provide a very similar development style. The biggest difference is that Polymer is built upon the latest Web Components features and requires non-trivial polyfills to work (with degraded performance) in browsers that don&amp;rsquo;t support those features natively. In contrast, Vue works without any dependencies or polyfills down to IE9.</source>
          <target state="translated">Polymerは、Googleが後援する別のプロジェクトであり、実際にはVueのインスピレーションの源でした。 Vueコンポーネントは、Polymerカスタム要素と大まかに比較でき、どちらも非常に類似した開発スタイルを提供します。 最大の違いは、Polymerが最新のWebコンポーネント機能に基づいて構築されており、これらの機能をネイティブにサポートしていないブラウザーで動作するためにかなりのポリフィル（パフォーマンスの低下）が必要なことです。 です。 対照的に、VueはIE9まで依存関係やポリフィルなしで機能します。</target>
        </trans-unit>
        <trans-unit id="e3ed11ed8d0e10e94e25f6a0c663996776050be2" translate="yes" xml:space="preserve">
          <source>Pre-Compiling Templates</source>
          <target state="translated">テンプレートのプリコンパイル</target>
        </trans-unit>
        <trans-unit id="15730848aa8545d4e8c4a13694b301ad43855149" translate="yes" xml:space="preserve">
          <source>Preact and Other React-Like Libraries</source>
          <target state="translated">Preactおよび他のReactライクなライブラリ</target>
        </trans-unit>
        <trans-unit id="13b722a113ea767b74d7b7af219e735b33c584e7" translate="yes" xml:space="preserve">
          <source>Prefer class selectors over element selectors in &lt;code&gt;scoped&lt;/code&gt; styles, because large numbers of element selectors are slow.</source>
          <target state="translated">多くの要素セレクターが遅いため、 &lt;code&gt;scoped&lt;/code&gt; スタイルの要素セレクターよりもクラスセレクターの方が適しています。</target>
        </trans-unit>
        <trans-unit id="90eceb016c51a762f15c7287008c113f6f37296c" translate="yes" xml:space="preserve">
          <source>Prefix</source>
          <target state="translated">Prefix</target>
        </trans-unit>
        <trans-unit id="0862f2579db5a3bc1211bb13bd8e3d71a3009a33" translate="yes" xml:space="preserve">
          <source>Pretty cool, right?</source>
          <target state="translated">かなりクールだよね？</target>
        </trans-unit>
        <trans-unit id="d28e5e120a6410b8fa39239f3e826f7cc472afd9" translate="yes" xml:space="preserve">
          <source>Previously, &lt;code&gt;v-el&lt;/code&gt;/&lt;code&gt;v-ref&lt;/code&gt; combined with &lt;code&gt;v-for&lt;/code&gt; would produce an array of elements/components, because there was no way to give each item a unique name. You can still achieve this behavior by giving each item the same &lt;code&gt;ref&lt;/code&gt;:</source>
          <target state="translated">以前は、各アイテムに一意の名前を付ける方法がなかったため、 &lt;code&gt;v-el&lt;/code&gt; / &lt;code&gt;v-ref&lt;/code&gt; とv-el &lt;code&gt;v-for&lt;/code&gt; を組み合わせて要素/コンポーネントの配列が生成されました。 各アイテムに同じ &lt;code&gt;ref&lt;/code&gt; を与えることで、この動作を実現できます：</target>
        </trans-unit>
        <trans-unit id="d470a2a77dc4521dc133ec45eef2767f713b0387" translate="yes" xml:space="preserve">
          <source>Previously, &lt;code&gt;v-for=&quot;number in 10&quot;&lt;/code&gt; would have &lt;code&gt;number&lt;/code&gt; starting at 0 and ending at 9. Now it starts at 1 and ends at 10.</source>
          <target state="translated">以前は、 &lt;code&gt;v-for=&quot;number in 10&quot;&lt;/code&gt; は0で始まり9で終わる &lt;code&gt;number&lt;/code&gt; ありました。現在は1で始まり10で終わります。</target>
        </trans-unit>
        <trans-unit id="1140ac9954dc5a38cef519f604f5c32be573d951" translate="yes" xml:space="preserve">
          <source>Primarily used to preserve component state or avoid re-rendering.</source>
          <target state="translated">主にコンポーネントの状態を保持し、再レンダリングを回避するために使用されます。</target>
        </trans-unit>
        <trans-unit id="54685256c4d8355200332707df1e1ca7c0e02261" translate="yes" xml:space="preserve">
          <source>Priority A Rules: Essential (Error Prevention)</source>
          <target state="translated">優先度Aルール：必須（エラー防止）</target>
        </trans-unit>
        <trans-unit id="5e8b1025d5987c3729d2b01eada46b2522bba9e3" translate="yes" xml:space="preserve">
          <source>Priority A: Essential</source>
          <target state="translated">優先度A：必須</target>
        </trans-unit>
        <trans-unit id="387f936830407167742df6ab963bfa0088949c5b" translate="yes" xml:space="preserve">
          <source>Priority B Rules: Strongly Recommended (Improving Readability)</source>
          <target state="translated">優先度Bのルール：強くお勧めします（読みやすさの向上）</target>
        </trans-unit>
        <trans-unit id="736596242b03557a18a34e5f65ea6a2b562cbebd" translate="yes" xml:space="preserve">
          <source>Priority B: Strongly Recommended</source>
          <target state="translated">優先度B：強くお勧めします</target>
        </trans-unit>
        <trans-unit id="bdd836597207d18ba5b3d19036238a4cd88fa60f" translate="yes" xml:space="preserve">
          <source>Priority C Rules: Recommended (Minimizing Arbitrary Choices and Cognitive Overhead)</source>
          <target state="translated">優先度Cのルール：推奨（任意選択および認知オーバーヘッドの最小化）</target>
        </trans-unit>
        <trans-unit id="2974ce185c92ec782a626e16a8514e803539b365" translate="yes" xml:space="preserve">
          <source>Priority C: Recommended</source>
          <target state="translated">優先度C：推奨</target>
        </trans-unit>
        <trans-unit id="47bd70395bb96139b28544a3748794466e50c29a" translate="yes" xml:space="preserve">
          <source>Priority D Rules: Use with Caution (Potentially Dangerous Patterns)</source>
          <target state="translated">優先度Dのルール：慎重に使用してください（潜在的に危険なパターン）</target>
        </trans-unit>
        <trans-unit id="94fef0d8e8f642d6dc69557c9f10b185198cefc4" translate="yes" xml:space="preserve">
          <source>Priority D: Use with Caution</source>
          <target state="translated">優先度D：注意して使用する</target>
        </trans-unit>
        <trans-unit id="f5cd87102ef90d5553f07151bd4bd9dd0bc22e76" translate="yes" xml:space="preserve">
          <source>Private property names</source>
          <target state="translated">私有地名</target>
        </trans-unit>
        <trans-unit id="190351e7c1964109dd0d07bb44b4406d321887f5" translate="yes" xml:space="preserve">
          <source>Private property names &lt;sup&gt;essential&lt;/sup&gt;</source>
          <target state="translated">プライベートプロパティ名が&lt;sup&gt;必要です&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="7d03d42c737cd08e3c616e333f7637225318bb7d" translate="yes" xml:space="preserve">
          <source>Problem solved!</source>
          <target state="translated">問題が解決しました！</target>
        </trans-unit>
        <trans-unit id="c5c5063b096172b05347461de69b1892f161c926" translate="yes" xml:space="preserve">
          <source>Production Deployment</source>
          <target state="translated">生産開発</target>
        </trans-unit>
        <trans-unit id="24b510d5213c71d3e2ce9940d48c8b9fa3d13829" translate="yes" xml:space="preserve">
          <source>Programmatic Event Listeners</source>
          <target state="translated">プログラムイベントリスナー</target>
        </trans-unit>
        <trans-unit id="6ac41420921db4b82a6fc5a064c1c845ef1ef7bc" translate="yes" xml:space="preserve">
          <source>Programmatic Navigation</source>
          <target state="translated">プログラムによるナビゲーション</target>
        </trans-unit>
        <trans-unit id="476b867d91093b69a7500380688c889567822c8b" translate="yes" xml:space="preserve">
          <source>Programmatically choose one of several other components to delegate to</source>
          <target state="translated">プログラムで委任する他のいくつかのコンポーネントのいずれかを選択します</target>
        </trans-unit>
        <trans-unit id="ee3cf99bb774be8991c68e2bbfef328b2095ab6c" translate="yes" xml:space="preserve">
          <source>Project Creation</source>
          <target state="translated">プロジェクトを作成する</target>
        </trans-unit>
        <trans-unit id="cf8dbc35f90ca7fe4e3262afb2f4d8617ccb053f" translate="yes" xml:space="preserve">
          <source>Prop Casing (camelCase vs kebab-case)</source>
          <target state="translated">プロップケーシング（キャメルケースとケバブケース）</target>
        </trans-unit>
        <trans-unit id="1c763ccd366cdd65c783dc8f22bc1a65ff00cadb" translate="yes" xml:space="preserve">
          <source>Prop Mutation &lt;sup&gt;deprecated&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;非推奨の&lt;/sup&gt; Prop Mutation</target>
        </trans-unit>
        <trans-unit id="23ca9a44a1ade4d87027ae10b8309bece2e74a54" translate="yes" xml:space="preserve">
          <source>Prop Types</source>
          <target state="translated">支柱タイプ</target>
        </trans-unit>
        <trans-unit id="0d718a828e84189a6c1ea77a0099a78e06d7d7c9" translate="yes" xml:space="preserve">
          <source>Prop Validation</source>
          <target state="translated">プロップ検証</target>
        </trans-unit>
        <trans-unit id="3ad34219a208945c8ea06d8eb918df83f7e61456" translate="yes" xml:space="preserve">
          <source>Prop definitions</source>
          <target state="translated">ポスト定義</target>
        </trans-unit>
        <trans-unit id="e2f4b4fdf875186ea4cf16dbb812dbea30216d87" translate="yes" xml:space="preserve">
          <source>Prop definitions &lt;sup&gt;essential&lt;/sup&gt;</source>
          <target state="translated">サポート列の定義は&lt;sup&gt;不可欠です&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="895e352dc19c97709d5567c55fe72b1a6d482c35" translate="yes" xml:space="preserve">
          <source>Prop name casing</source>
          <target state="translated">プロップ名のケーシング</target>
        </trans-unit>
        <trans-unit id="b90f11ae0da8cbfe0b2f736a16886c055d6bffd1" translate="yes" xml:space="preserve">
          <source>Prop name casing &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">小道具名の&lt;sup&gt;強力な&lt;/sup&gt;サポート</target>
        </trans-unit>
        <trans-unit id="66e61e4c98d3b3a635091c842dada04fef1b9143" translate="yes" xml:space="preserve">
          <source>Properly configuring all the discussed aspects of a production-ready server-rendered app can be a daunting task. Luckily, there is an excellent community project that aims to make all of this easier: &lt;a href=&quot;https://nuxtjs.org/&quot;&gt;Nuxt.js&lt;/a&gt;. Nuxt.js is a higher-level framework built on top of the Vue ecosystem which provides an extremely streamlined development experience for writing universal Vue applications. Better yet, you can even use it as a static site generator (with pages authored as single-file Vue components)! We highly recommend giving it a try.</source>
          <target state="translated">プロダクション対応のサーバーレンダリングアプリで説明されているすべての側面を適切に構成することは、困難な作業になる可能性があります。 幸いなことに、このすべてを簡単にすることを目的とした優れたコミュニティプロジェクト&lt;a href=&quot;https://nuxtjs.org/&quot;&gt;Nuxt.jsがあり&lt;/a&gt;ます。 Nuxt.jsは、Vueエコシステムの上に構築された高レベルのフレームワークであり、ユニバーサルVueアプリケーションを作成するための非常に合理化された開発エクスペリエンスを提供します。 さらに良いことに、静的なサイトジェネレーターとして使用できます（ページが単一のファイルVueコンポーネントとして作成される場合）。 私はそれを試すことを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="fc7c765b5dbb95f7134159f12c7f78946b944760" translate="yes" xml:space="preserve">
          <source>Properly trigger lifecycle hooks of a component</source>
          <target state="translated">コンポーネントのライフサイクルフックを適切にトリガーする</target>
        </trans-unit>
        <trans-unit id="e9f3056a7ba256cf707e7dce02bf806a8e3e1baf" translate="yes" xml:space="preserve">
          <source>Properties that start with &lt;code&gt;_&lt;/code&gt; or &lt;code&gt;$&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; be proxied on the Vue instance because they may conflict with Vue&amp;rsquo;s internal properties and API methods. You will have to access them as &lt;code&gt;vm.$data._property&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;_&lt;/code&gt; または &lt;code&gt;$&lt;/code&gt; で始まるプロパティは、Vueの内部プロパティおよびAPIメソッドと競合する可能性があるため、Vueインスタンスによってプロキシされ&lt;strong&gt;ません&lt;/strong&gt; 。 それらに &lt;code&gt;vm.$data._property&lt;/code&gt; としてアクセスする必要があります。</target>
        </trans-unit>
        <trans-unit id="e5561bc237fb41709bb2e8b651d704c1664ae03e" translate="yes" xml:space="preserve">
          <source>Props</source>
          <target state="translated">Props</target>
        </trans-unit>
        <trans-unit id="824b655ece5f935a9f95c151296cb1d2ff2e73ec" translate="yes" xml:space="preserve">
          <source>Props are custom attributes you can register on a component. When a value is passed to a prop attribute, it becomes a property on that component instance. To pass a title to our blog post component, we can include it in the list of props this component accepts, using a &lt;code&gt;props&lt;/code&gt; option:</source>
          <target state="translated">小道具は、コンポーネントに登録できるカスタム属性です。 prop属性に値が渡されると、そのコンポーネントインスタンスのプロパティになります。 ブログ投稿コンポーネントにタイトルを渡すには、 &lt;code&gt;props&lt;/code&gt; オプションを使用して、このコンポーネントが受け入れる小道具のリストにタイトルを含めることができます。</target>
        </trans-unit>
        <trans-unit id="02635ba77eef9661786c01a78d90b7501db1be4e" translate="yes" xml:space="preserve">
          <source>Props are now always one-way down. To produce side effects in the parent scope, a component needs to explicitly emit an event instead of relying on implicit binding. For more information, see:</source>
          <target state="translated">小道具は常に一方向です。 親スコープで副作用を生成するには、コンポーネントは暗黙的なバインディングに依存するのではなく、明示的にイベントを発行する必要があります。 詳細については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="f6122d047108de3e0837cf3e23276a8775fc2406" translate="yes" xml:space="preserve">
          <source>Props on a Root Instance &lt;sup&gt;replaced&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;置換された&lt;/sup&gt;ルートインスタンスの小道具</target>
        </trans-unit>
        <trans-unit id="877adb56a197e1259015de3210d87c2e790b7975" translate="yes" xml:space="preserve">
          <source>Provide an alternative render output when the default &lt;code&gt;render&lt;/code&gt; function encounters an error. The error will be passed to &lt;code&gt;renderError&lt;/code&gt; as the second argument. This is particularly useful when used together with hot-reload.</source>
          <target state="translated">デフォルトの &lt;code&gt;render&lt;/code&gt; 機能でエラーが発生した場合、代替レンダリング出力を提供します。 エラーは2番目の引数として &lt;code&gt;renderError&lt;/code&gt; に渡されます。 これは、ホットリロードで使用する場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="02efa133aeef7a133aefd2f252af936a5cccad26" translate="yes" xml:space="preserve">
          <source>Provide the Vue instance an existing DOM element to mount on. It can be a CSS selector string or an actual HTMLElement.</source>
          <target state="translated">マウントする既存のDOM要素をVueインスタンスに提供します。 CSSセレクター文字列または実際のHTMLElementにすることができます。</target>
        </trans-unit>
        <trans-unit id="dcf49ab626c30fff5ed5ee4dbe07721b4605c56b" translate="yes" xml:space="preserve">
          <source>Quasar Framework SSR + PWA</source>
          <target state="translated">Quasar Framework SSR + PWA</target>
        </trans-unit>
        <trans-unit id="282e30765bd347047d1a351ac3b6f1cf18becd81" translate="yes" xml:space="preserve">
          <source>Quoted attribute values</source>
          <target state="translated">引用された属性値</target>
        </trans-unit>
        <trans-unit id="683b9e103293a057ef4362aa5bc974a4f8bd8131" translate="yes" xml:space="preserve">
          <source>Quoted attribute values &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;強く推奨される&lt;/sup&gt;属性値の引用</target>
        </trans-unit>
        <trans-unit id="ed1e44a4093ca562205b72061c34f1507e70c015" translate="yes" xml:space="preserve">
          <source>RFC-0001</source>
          <target state="translated">RFC-0001</target>
        </trans-unit>
        <trans-unit id="b11bf19e3f65b4a1ada383e41f26dab5c503940e" translate="yes" xml:space="preserve">
          <source>Radio</source>
          <target state="translated">Radio</target>
        </trans-unit>
        <trans-unit id="76550ff95e4521edf8dc9e8329b78993dc047414" translate="yes" xml:space="preserve">
          <source>Raw HTML</source>
          <target state="translated">生のHTML</target>
        </trans-unit>
        <trans-unit id="4d1f996aa17807ebebdb5143b01f86f170d5bea6" translate="yes" xml:space="preserve">
          <source>React</source>
          <target state="translated">React</target>
        </trans-unit>
        <trans-unit id="b183e9aafa930f129da2c452cc641903b8199bea" translate="yes" xml:space="preserve">
          <source>React Native enables you to write native-rendered apps for iOS and Android using the same React component model. This is great in that as a developer, you can apply your knowledge of a framework across multiple platforms. On this front, Vue has an official collaboration with &lt;a href=&quot;https://weex.apache.org/&quot;&gt;Weex&lt;/a&gt;, a cross-platform UI framework created by Alibaba Group and being incubated by the Apache Software Foundation (ASF). Weex allows you to use the same Vue component syntax to author components that can not only be rendered in the browser, but also natively on iOS and Android!</source>
          <target state="translated">React Nativeを使用すると、同じReactコンポーネントモデルを使用してiOSおよびAndroid用のネイティブレンダリングアプリを作成できます。 これは開発者として素晴らしいことです。フレームワークの知識を複数のプラットフォームに適用できます。 この点で、Vueは、Alibaba Groupによって作成され、Apache Software Foundation（ASF）によって開発されたクロスプラットフォームUIフレームワークである&lt;a href=&quot;https://weex.apache.org/&quot;&gt;Weex&lt;/a&gt;と公式に協力しています。 Weexを使用すると、同じVueコンポーネント構文を使用して、iOSとAndroidでネイティブにブラウザーでレンダリングできるコンポーネントを作成できます！</target>
        </trans-unit>
        <trans-unit id="ee4366331847de86650378c9e4041dac06218df0" translate="yes" xml:space="preserve">
          <source>React and Vue share many similarities. They both:</source>
          <target state="translated">ReactとVueには多くの類似点があります。 彼らは両方です：</target>
        </trans-unit>
        <trans-unit id="bb65ef679dc307f628a20a0b729cd808d18c5ac0" translate="yes" xml:space="preserve">
          <source>React is renowned for its steep learning curve. Before you can really get started, you need to know about JSX and probably ES2015+, since many examples use React&amp;rsquo;s class syntax. You also have to learn about build systems, because although you could technically use Babel Standalone to live-compile your code in the browser, it&amp;rsquo;s absolutely not suitable for production.</source>
          <target state="translated">Reactは、急な学習曲線で有名です。 多くの例ではReactのクラス構文を使用しているため、始める前にJSXおよびおそらくES2015 +について知る必要があります。 また、ビルドシステムについて学ぶ必要があります。 技術的には、Babel Standaloneを使用してブラウザーでコードをライブコンパイルすることはできますが、実稼働には絶対に適していません。</target>
        </trans-unit>
        <trans-unit id="bb1b40c27f9e4939cf3ff484fca2a9371f8d3b42" translate="yes" xml:space="preserve">
          <source>React-like libraries usually try to share as much of their API and ecosystem with React as is feasible. For that reason, the vast majority of comparisons above will also apply to them. The main difference will typically be a reduced ecosystem, often significantly, compared to React. Since these libraries cannot be 100% compatible with everything in the React ecosystem, some tooling and companion libraries may not be usable. Or, even if they appear to work, they could break at any time unless your specific React-like library is officially supported on par with React.</source>
          <target state="translated">通常、Reactライクなライブラリは、できるだけ多くのAPIとエコシステムをReactと共有しようとします。 そのため、上記の比較のほとんどはそれらにも適用されます。 主な違いは、Reactと比較して通常大幅に削減されるエコシステムです。 これらのライブラリはすべてのReactエコシステムと完全に互換性があるわけではないため、一部のツールライブラリとコンパニオンライブラリは利用できない場合があります。 または、動作しているように見えても、特定のReactライクなライブラリがReactによって公式にサポートされていない限り、いつでも壊れる可能性があります。</target>
        </trans-unit>
        <trans-unit id="96578d9c2e6eaee240051ff91e83f741cc87e93b" translate="yes" xml:space="preserve">
          <source>Reactivity</source>
          <target state="translated">Reactivity</target>
        </trans-unit>
        <trans-unit id="38be1878e88addc141471e2ac5be059c49256537" translate="yes" xml:space="preserve">
          <source>Reactivity in Depth</source>
          <target state="translated">深度反応性</target>
        </trans-unit>
        <trans-unit id="446d7c237336d575135ddcd7063341761426b025" translate="yes" xml:space="preserve">
          <source>Ready for More?</source>
          <target state="translated">もっと準備はいい？</target>
        </trans-unit>
        <trans-unit id="40fe62216df511ee5c87bc8e026789c819f7b21e" translate="yes" xml:space="preserve">
          <source>Really though, any transition attribute can be dynamically bound. And it&amp;rsquo;s not only attributes. Since event hooks are methods, they have access to any data in the context. That means depending on the state of your component, your JavaScript transitions can behave differently.</source>
          <target state="translated">ただし、実際には、どの遷移属性も動的にバインドできます。 そして、それは単なる属性ではありません。 イベントフックはメソッドであるため、コンテキスト内のすべてのデータにアクセスできます。 つまり、コンポーネントの状態に応じて、JavaScript遷移の動作が異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="cdb5994a5662a9b7831e2e56b44ea27b6edb5bab" translate="yes" xml:space="preserve">
          <source>Recent versions of Angular, with &lt;a href=&quot;https://en.wikipedia.org/wiki/Ahead-of-time_compilation&quot;&gt;AOT compilation&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Tree_shaking&quot;&gt;tree-shaking&lt;/a&gt;, have been able to get its size down considerably. However, a full-featured Vue 2 project with Vuex + Vue Router included (~30KB gzipped) is still significantly lighter than an out-of-the-box, AOT-compiled application generated by &lt;code&gt;angular-cli&lt;/code&gt; (~65KB gzipped).</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Ahead-of-time_compilation&quot;&gt;AOTコンパイル&lt;/a&gt;および&lt;a href=&quot;https://en.wikipedia.org/wiki/Tree_shaking&quot;&gt;ツリーシェー&lt;/a&gt;キングを備えた最近のバージョンのAngularでは、サイズを大幅に削減できました。 ただし、Vuex + Vue Routerを含むフル機能のVue 2プロジェクト（〜30KB gzip圧縮）は、angular-cli（〜65KB gzip圧縮）によって生成されたAOTコンパイルされた角度付きCLIボックスアプリケーションよりも大幅に軽量です。</target>
        </trans-unit>
        <trans-unit id="3f99a56b4630f2ac18091fad78531d1626d4dac4" translate="yes" xml:space="preserve">
          <source>Recommended Configuration</source>
          <target state="translated">推奨構成</target>
        </trans-unit>
        <trans-unit id="f9d18b779732cc0ea4b60f929feea8a7c40df5fc" translate="yes" xml:space="preserve">
          <source>Recreating dynamic components is normally useful behavior, but in this case, we&amp;rsquo;d really like those tab component instances to be cached once they&amp;rsquo;re created for the first time. To solve this problem, we can wrap our dynamic component with a &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; element:</source>
          <target state="translated">通常、動的コンポーネントの再作成は便利な動作ですが、この場合、これらのタブコンポーネントインスタンスを最初に作成するときにキャッシュする必要があります。 解決策は、動的コンポーネントを &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; 要素でラップすることです。</target>
        </trans-unit>
        <trans-unit id="25c0556aa6352203342eea1a65c58a623378dbcc" translate="yes" xml:space="preserve">
          <source>Recursive Components</source>
          <target state="translated">再帰的なコンポーネント</target>
        </trans-unit>
        <trans-unit id="46819d95829c2f8ee915e7d271f512463387fc11" translate="yes" xml:space="preserve">
          <source>Refactoring becomes more difficult, because find-and-replace often isn&amp;rsquo;t sufficient to update relative references to a moved component.</source>
          <target state="translated">移動したコンポーネントへの相対参照を更新することは、多くの場合、検索と置換だけでは不十分であり、リファクタリングがより困難になります。</target>
        </trans-unit>
        <trans-unit id="f4234eefb475a2340f218d9e7a7e6c874a82a6fa" translate="yes" xml:space="preserve">
          <source>Refer to the respective build tool documentations to see how it&amp;rsquo;s done:</source>
          <target state="translated">各ビルドツールのドキュメントを参照して、これがどのように行われるかを確認してください。</target>
        </trans-unit>
        <trans-unit id="8d8b1f50199fd6cb6ab6141f41a87fd8dae1f00d" translate="yes" xml:space="preserve">
          <source>Register or retrieve a global component. Registration also automatically sets the component&amp;rsquo;s &lt;code&gt;name&lt;/code&gt; with the given &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">グローバルコンポーネントを登録または取得します。 登録により、指定された &lt;code&gt;id&lt;/code&gt; を持つコンポーネントの &lt;code&gt;name&lt;/code&gt; が自動的に設定されます。</target>
        </trans-unit>
        <trans-unit id="0168019975e7b996b73bc3be3562ac476872545c" translate="yes" xml:space="preserve">
          <source>Register or retrieve a global directive.</source>
          <target state="translated">グローバルディレクティブを登録または取得します。</target>
        </trans-unit>
        <trans-unit id="13bd6c258247a18188a7e24270fbc9f007d7c82d" translate="yes" xml:space="preserve">
          <source>Register or retrieve a global filter.</source>
          <target state="translated">グローバルフィルターを登録または取得します。</target>
        </trans-unit>
        <trans-unit id="76de89743a325c94ab024ae33f08812f80d685bb" translate="yes" xml:space="preserve">
          <source>Relation to Custom Elements</source>
          <target state="translated">カスタム要素との関係</target>
        </trans-unit>
        <trans-unit id="0ea4af908fe06688dd3fc02035189b08293c5074" translate="yes" xml:space="preserve">
          <source>Release Notes</source>
          <target state="translated">リリースノート</target>
        </trans-unit>
        <trans-unit id="d92abdf653f23351eb7a0ab4d23290ee1313902d" translate="yes" xml:space="preserve">
          <source>Remember that &lt;strong&gt;global registration must take place before the root Vue instance is created (with &lt;code&gt;new Vue&lt;/code&gt;)&lt;/strong&gt;. &lt;a href=&quot;https://github.com/chrisvfritz/vue-enterprise-boilerplate/blob/master/src/components/_globals.js&quot;&gt;Here&amp;rsquo;s an example&lt;/a&gt; of this pattern in a real project context.</source>
          <target state="translated">&lt;strong&gt;ルートVueインスタンスが作成される前に、グローバル登録を行う必要があることに&lt;/strong&gt;注意してください&lt;strong&gt;（ &lt;code&gt;new Vue&lt;/code&gt; ）&lt;/strong&gt; 。 &lt;a href=&quot;https://github.com/chrisvfritz/vue-enterprise-boilerplate/blob/master/src/components/_globals.js&quot;&gt;以下&lt;/a&gt;に、実際のプロジェクトコンテキストでのこのパターンの例を示します。</target>
        </trans-unit>
        <trans-unit id="73942b04c7d6e9cc0cafd922223a9eab5438c235" translate="yes" xml:space="preserve">
          <source>Remove custom event listener(s).</source>
          <target state="translated">カスタムイベントリスナーを削除します。</target>
        </trans-unit>
        <trans-unit id="25c548f4a7b9b6ef1cfbffbca926739476b1c4e2" translate="yes" xml:space="preserve">
          <source>Removed due to hooks simplification. If you really must suppress transition errors, you can use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch&quot;&gt;&lt;code&gt;try&lt;/code&gt;&amp;hellip;&lt;code&gt;catch&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">フックの簡素化により削除されました。 移行エラーを抑制する必要がある場合は、代わりに&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch&quot;&gt; &lt;code&gt;try&lt;/code&gt; &amp;hellip; &lt;code&gt;catch&lt;/code&gt; を&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="e7f3ed71f5d7421b91e0c25cc42984adb65b4fdd" translate="yes" xml:space="preserve">
          <source>Renamed to &lt;code&gt;base&lt;/code&gt; for consistency with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;the HTML &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; element&lt;/a&gt;.</source>
          <target state="translated">HTMLの &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; 要素と一致するように &lt;code&gt;base&lt;/code&gt; に&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;名前が変更さ&lt;/a&gt;れました。</target>
        </trans-unit>
        <trans-unit id="3aa893c2a6ebe75166762d5109366b728fa5dc54" translate="yes" xml:space="preserve">
          <source>Render Functions &amp;amp; JSX</source>
          <target state="translated">レンダリング関数とJSX</target>
        </trans-unit>
        <trans-unit id="f54e5429aec68f05a2b3b43a85ee9662c29159d7" translate="yes" xml:space="preserve">
          <source>Render Functions - Slots</source>
          <target state="translated">レンダリング機能スロット</target>
        </trans-unit>
        <trans-unit id="aeac0239d7806a13c73e4eacbb8e89032112b08f" translate="yes" xml:space="preserve">
          <source>Render functions with JSX have a few advantages:</source>
          <target state="translated">JSXを使用した関数のレンダリングには、いくつかの利点があります。</target>
        </trans-unit>
        <trans-unit id="c0f479c7d13498bbd2aa42eae8f88242964120b5" translate="yes" xml:space="preserve">
          <source>Render the element and component &lt;strong&gt;once&lt;/strong&gt; only. On subsequent re-renders, the element/component and all its children will be treated as static content and skipped. This can be used to optimize update performance.</source>
          <target state="translated">要素とコンポーネントを一&lt;strong&gt;度&lt;/strong&gt;だけレンダリングします。 その後の再レンダリングでは、要素/コンポーネントとそのすべての子は静的コンテンツとして扱われ、スキップされます。 これは、更新パフォーマンスを最適化するために使用できます。</target>
        </trans-unit>
        <trans-unit id="1c510f643528b3292df74bbcf70195487418102f" translate="yes" xml:space="preserve">
          <source>Render the element or template block multiple times based on the source data. The directive&amp;rsquo;s value must use the special syntax &lt;code&gt;alias in expression&lt;/code&gt; to provide an alias for the current element being iterated on:</source>
          <target state="translated">ソースデータに基づいて要素またはテンプレートブロックを複数回レンダリングします。 ディレクティブの値は、 &lt;code&gt;alias in expression&lt;/code&gt; 特別な構文エイリアスaliasを使用して、繰り返される現在の要素のエイリアスを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="9647e21c53c63f65c167aa12298837e080c17cb0" translate="yes" xml:space="preserve">
          <source>Rendering plain HTML elements is very fast in Vue, but sometimes you might have a component that contains &lt;strong&gt;a lot&lt;/strong&gt; of static content. In these cases, you can ensure that it&amp;rsquo;s only evaluated once and then cached by adding the &lt;code&gt;v-once&lt;/code&gt; directive to the root element, like this:</source>
          <target state="translated">VueでのプレーンHTML要素のレンダリングは非常に高速&lt;strong&gt;です&lt;/strong&gt;が、 &lt;strong&gt;多く&lt;/strong&gt;の静的コンテンツを持つコンポーネントが存在する場合があります。 これらの場合、 &lt;code&gt;v-once&lt;/code&gt; ディレクティブをルート要素に追加して、次のように1回だけ評価してからキャッシュできます。</target>
        </trans-unit>
        <trans-unit id="9a09ee1cf84326d5d5b1fbbb8dcaca046fb652f2" translate="yes" xml:space="preserve">
          <source>Replacing &lt;code&gt;vm.$data&lt;/code&gt;&lt;sup&gt;removed&lt;/sup&gt;</source>
          <target state="translated">&lt;code&gt;vm.$data&lt;/code&gt; 置換は&lt;sup&gt;削除&lt;/sup&gt;さ&lt;sup&gt;れました&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="6336d2b4c545bfdb0a2c2e6130a2fe522bc117ed" translate="yes" xml:space="preserve">
          <source>Replacing Template Features with Plain JavaScript</source>
          <target state="translated">テンプレート機能をプレーンなJavaScriptに置き換えます</target>
        </trans-unit>
        <trans-unit id="3694e119ff9868c46a5da68ac50107adb0cd0254" translate="yes" xml:space="preserve">
          <source>Replacing an Array</source>
          <target state="translated">アレイの交換</target>
        </trans-unit>
        <trans-unit id="448ceec811e5cd1612b41b145f75a74425a6d60a" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;capitalize&lt;/code&gt; Filter</source>
          <target state="translated">&lt;code&gt;capitalize&lt;/code&gt; フィルターの交換</target>
        </trans-unit>
        <trans-unit id="8ebc9242fd66a164fb0466c94c267b085022f523" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;currency&lt;/code&gt; Filter</source>
          <target state="translated">&lt;code&gt;currency&lt;/code&gt; フィルターの交換</target>
        </trans-unit>
        <trans-unit id="6e8e54f171683ed43699d784bb3a20daa786f68a" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;debounce&lt;/code&gt; Filter</source>
          <target state="translated">&lt;code&gt;debounce&lt;/code&gt; フィルターの交換</target>
        </trans-unit>
        <trans-unit id="bc05ccbf460e1bee1b220a363cd9b366122fc62c" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;filterBy&lt;/code&gt; Filter</source>
          <target state="translated">&lt;code&gt;filterBy&lt;/code&gt; フィルター</target>
        </trans-unit>
        <trans-unit id="5aadbac5cc6d5572fbf9f02300727b922b52477f" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;json&lt;/code&gt; Filter</source>
          <target state="translated">&lt;code&gt;json&lt;/code&gt; フィルターの交換</target>
        </trans-unit>
        <trans-unit id="5af22200afbbae6350485e71f8a0930a62620a3b" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;limitBy&lt;/code&gt; Filter</source>
          <target state="translated">&lt;code&gt;limitBy&lt;/code&gt; フィルター</target>
        </trans-unit>
        <trans-unit id="63239b2dfa73a07907b85e48d0e4e3d07aa51efd" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;lowercase&lt;/code&gt; Filter</source>
          <target state="translated">&lt;code&gt;lowercase&lt;/code&gt; フィルターの交換</target>
        </trans-unit>
        <trans-unit id="307535ec9952915e10873762b9b0a59ea99d17d1" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;orderBy&lt;/code&gt; Filter</source>
          <target state="translated">&lt;code&gt;orderBy&lt;/code&gt; フィルター</target>
        </trans-unit>
        <trans-unit id="5a0b57fe75978a4fde52508fa6b11e6a9fcbade8" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;pluralize&lt;/code&gt; Filter</source>
          <target state="translated">&lt;code&gt;pluralize&lt;/code&gt; フィルター</target>
        </trans-unit>
        <trans-unit id="5895ba028c303252e37b6295f10778b7ca351267" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;uppercase&lt;/code&gt; Filter</source>
          <target state="translated">&lt;code&gt;uppercase&lt;/code&gt; フィルターの交換</target>
        </trans-unit>
        <trans-unit id="c183ebe6cda4d505c2e49d3160c8367d36be5b90" translate="yes" xml:space="preserve">
          <source>Replacing/Merging with Existing Attributes</source>
          <target state="translated">既存の属性で置換/マージ</target>
        </trans-unit>
        <trans-unit id="87df60de337fb58864343e396696d74611e0d403" translate="yes" xml:space="preserve">
          <source>Resources</source>
          <target state="translated">Resources</target>
        </trans-unit>
        <trans-unit id="bd4afc0073cac79bf136f8e1d922b83f76e969ad" translate="yes" xml:space="preserve">
          <source>Result:</source>
          <target state="translated">Result:</target>
        </trans-unit>
        <trans-unit id="1f5b54bbca313ab53947ed8a4f97b16e01f729d9" translate="yes" xml:space="preserve">
          <source>Reusable Transitions</source>
          <target state="translated">再利用可能な遷移</target>
        </trans-unit>
        <trans-unit id="a48bbafb258bfc790b66aec7d45e0a6a8fa1cd83" translate="yes" xml:space="preserve">
          <source>Reusing Components</source>
          <target state="translated">コンポーネントの再利用</target>
        </trans-unit>
        <trans-unit id="b836c4c63ed0b1bed339e82e9c78c2b817e6736c" translate="yes" xml:space="preserve">
          <source>Riot</source>
          <target state="translated">Riot</target>
        </trans-unit>
        <trans-unit id="6e85617241bed85b4dcd2ae064b3025078b134e9" translate="yes" xml:space="preserve">
          <source>Riot 3.0 provides a similar component-based development model (which is called a &amp;ldquo;tag&amp;rdquo; in Riot), with a minimal and beautifully designed API. Riot and Vue probably share a lot in design philosophies. However, despite being a bit heavier than Riot, Vue does offer some significant advantages:</source>
          <target state="translated">Riot 3.0は、最小限に美しく設計されたAPIを備えた同様のコンポーネントベースの開発モデル（Riotでは「タグ」と呼ばれます）を提供します。 RiotとVueは、おそらく彼らのデザイン哲学において多くのことを共有しています。 ただし、Riotより少し重いにもかかわらず、Vueにはいくつかの重要な利点があります。</target>
        </trans-unit>
        <trans-unit id="cee656e4e4fb4012f85e12695536c23a5e0e62c3" translate="yes" xml:space="preserve">
          <source>Rollup</source>
          <target state="translated">Rollup</target>
        </trans-unit>
        <trans-unit id="8e4ecad6a05d926091d335638bbc9859c1de1f8b" translate="yes" xml:space="preserve">
          <source>Rollup + rollup-plugin-vue</source>
          <target state="translated">ロールアップ+ rollup-plugin-vue</target>
        </trans-unit>
        <trans-unit id="42ec7ccbef29d0422b242b5178f06191bc8484d0" translate="yes" xml:space="preserve">
          <source>Route Definitions</source>
          <target state="translated">ルート定義</target>
        </trans-unit>
        <trans-unit id="6e3b967c60ba49b0f518c43998cb2dc91dd2134c" translate="yes" xml:space="preserve">
          <source>Route Hooks</source>
          <target state="translated">ルートフック</target>
        </trans-unit>
        <trans-unit id="2b73a7098cbf7da1b1613b48acc5eb7c6f35331c" translate="yes" xml:space="preserve">
          <source>Route Matching</source>
          <target state="translated">ルートマッチング</target>
        </trans-unit>
        <trans-unit id="18febd25894978ca61139fd68c461cb521819d89" translate="yes" xml:space="preserve">
          <source>Route Options: Misc</source>
          <target state="translated">ルートオプション：その他</target>
        </trans-unit>
        <trans-unit id="f0865cca790a39153b3f106f9c19244b4f157bd4" translate="yes" xml:space="preserve">
          <source>Route matching now uses &lt;a href=&quot;https://github.com/pillarjs/path-to-regexp&quot;&gt;path-to-regexp&lt;/a&gt; under the hood, making it much more flexible than previously.</source>
          <target state="translated">ルートマッチングは、正規表現へのパスを&lt;a href=&quot;https://github.com/pillarjs/path-to-regexp&quot;&gt;内部的&lt;/a&gt;に使用するため、以前よりもはるかに柔軟です。</target>
        </trans-unit>
        <trans-unit id="32027b0a6491682801317490f82d9b553e764f1b" translate="yes" xml:space="preserve">
          <source>Router Initialization</source>
          <target state="translated">ルーターの初期化</target>
        </trans-unit>
        <trans-unit id="1b4778ead27c045154fa8a8032dcbf9b6b10e64f" translate="yes" xml:space="preserve">
          <source>Router Options: Modes</source>
          <target state="translated">ルーターオプション：モード</target>
        </trans-unit>
        <trans-unit id="9add2b84e8289fb0ea9dcb2637e5d5907ca4d748" translate="yes" xml:space="preserve">
          <source>Routes are now defined as an array on a &lt;a href=&quot;https://router.vuejs.org/en/essentials/getting-started.html#javascript&quot;&gt;&lt;code&gt;routes&lt;/code&gt; option&lt;/a&gt; at router instantiation. So these routes for example:</source>
          <target state="translated">ルートは、ルーターをインスタンス化する際の&lt;a href=&quot;https://router.vuejs.org/en/essentials/getting-started.html#javascript&quot;&gt; &lt;code&gt;routes&lt;/code&gt; オプションの&lt;/a&gt;配列として定義されるようになりました。 たとえば、これらのルートは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="7d15dd1bec2e055c5b177c9f869305ae6c54c9bb" translate="yes" xml:space="preserve">
          <source>Routing</source>
          <target state="translated">Routing</target>
        </trans-unit>
        <trans-unit id="d670f1115ef0c3c29b2d47e241e7dd62eafb1e11" translate="yes" xml:space="preserve">
          <source>Rule Categories</source>
          <target state="translated">ルールカテゴリ</target>
        </trans-unit>
        <trans-unit id="91ba54d8bd5025bb2cb3e7a4cd0c0785af90a756" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find &lt;code&gt;keep-alive&lt;/code&gt; attributes.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;keep-alive&lt;/code&gt; 属性を見つけます。</target>
        </trans-unit>
        <trans-unit id="6d2ac67778b450ed0b9659002961f8409d707930" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find CSS selectors targeting named slots (e.g. &lt;code&gt;[slot=&quot;my-slot-name&quot;]&lt;/code&gt;).</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパーを&lt;/a&gt;実行し、名前付きスロットをターゲットとするCSSセレクターを見つけます（たとえば &lt;code&gt;[slot=&quot;my-slot-name&quot;]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="fb8ef12ba88bdd9ea8d64f474b58bd5f002af15c" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find HTML interpolations.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、HTML補間を見つけます。</target>
        </trans-unit>
        <trans-unit id="e29967481758c6af408495a286989e2f4b3a4403" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find all examples of this hook.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパーを&lt;/a&gt;実行して、このフックのすべての例を見つけます。</target>
        </trans-unit>
        <trans-unit id="131ad91eddecfe4bcd3aa1d2c3dae1e7c9a6d28b" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;$dispatch&lt;/code&gt; and &lt;code&gt;$broadcast&lt;/code&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;$dispatch&lt;/code&gt; および &lt;code&gt;$broadcast&lt;/code&gt; 例を見つけます。</target>
        </trans-unit>
        <trans-unit id="b5547bdef16b43ebf6aa5572275c3effebf29215" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;.$remove&lt;/code&gt; on an array. If you miss any, you should see &lt;strong&gt;console errors&lt;/strong&gt; from the missing method.</source>
          <target state="translated">アレイのコードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行します。 &lt;code&gt;.$remove&lt;/code&gt; 例を見つけます。 何かを見逃した場合、見つからないメソッドから&lt;strong&gt;コンソールエラーが表示さ&lt;/strong&gt;れます。</target>
        </trans-unit>
        <trans-unit id="4d1a3ee9aa64afee960f48bf970646ff2ca1516a" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;.$set&lt;/code&gt; on an array. If you miss any, you should see &lt;strong&gt;console errors&lt;/strong&gt; from the missing method.</source>
          <target state="translated">アレイのコードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行します。 &lt;code&gt;.$set&lt;/code&gt; 例を見つけます。 何かを見逃した場合、見つからないメソッドから&lt;strong&gt;コンソールエラーが表示さ&lt;/strong&gt;れます。</target>
        </trans-unit>
        <trans-unit id="f7cf2f519c21c26383d689b999383e7f48c8daeb" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.config.async&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Vue.config.async&lt;/code&gt; で &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行し、 サンプルVue.config.asyncを見つけます。</target>
        </trans-unit>
        <trans-unit id="adba4cc2d78c532c252af8489b44bb0c82a60071" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.config.debug&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Vue.config.debug&lt;/code&gt; で &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行し、 サンプルVue.config.debugを見つけます。</target>
        </trans-unit>
        <trans-unit id="842114654af7636636f5d0ca2790f492b054f6ff" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.config.delimiters&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Vue.config.delimiters&lt;/code&gt; で &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行し、 サンプルVue.config.delimitersを見つけます。</target>
        </trans-unit>
        <trans-unit id="56d3c94b1fca7d1fecbd0be685fc6a65bfb4e3ff" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.config.unsafeDelimiters&lt;/code&gt;. After this, the helper will also find instances of HTML interpolation so that you can replace them with `v-html`.</source>
          <target state="translated">&lt;code&gt;Vue.config.unsafeDelimiters&lt;/code&gt; で &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行し、 サンプルVue.config.unsafeDelimitersを見つけます。 この後、ヘルパーはHTML補間のインスタンスも検出するため、それらを `v-html`に置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="7abfe983d07d10f68fd1a923086c66cfb28e6a0a" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.elementDirective&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Vue.elementDirective&lt;/code&gt; で &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、Vue.elementDirectiveの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="0cbd833dba88270b867f404265f89cd61957dd9e" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.partial&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Vue.partial&lt;/code&gt; で &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行し、Vue.partialの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="2be876bb1c3f71e3306a218289a786bebe66e6ac" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.set&lt;/code&gt; or &lt;code&gt;Vue.delete&lt;/code&gt; on a Vue instance. If you miss any, they'll trigger &lt;strong&gt;console warnings&lt;/strong&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行し、Vueインスタンスで &lt;code&gt;Vue.set&lt;/code&gt; または &lt;code&gt;Vue.delete&lt;/code&gt; の例を見つけます。 何かが見つからないと、 &lt;strong&gt;コンソールアラート&lt;/strong&gt;がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="b9c98c79eef3d7a23f61df5ef62ac7e471ae74fb" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.transition&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Vue.transition&lt;/code&gt; で &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;トランジションヘルパー&lt;/a&gt;を実行して、 Vue.transitionの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="3cd48bf0c847ee511a1c8d066fdfbdc6f4f6ffc4" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;replace: false&lt;/code&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行し、 &lt;code&gt;replace: false&lt;/code&gt; 例を見つけます。</target>
        </trans-unit>
        <trans-unit id="bc77c164d9ea83ca27d60242ad248d1e7b987f0e" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;router.alias&lt;/code&gt; being called.</source>
          <target state="translated">&lt;code&gt;router.alias&lt;/code&gt; で &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 router.aliasと呼ばれる例を見つけます。</target>
        </trans-unit>
        <trans-unit id="7cf69302085bdd68f35cf86d99ec675583acea23" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;router.go&lt;/code&gt; being used where &lt;code&gt;router.push&lt;/code&gt; should be used instead.</source>
          <target state="translated">&lt;code&gt;router.push&lt;/code&gt; で &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行し、代わりにrouter.pushを使用する必要があるrouter.goの使用例を探します。</target>
        </trans-unit>
        <trans-unit id="e39b23f840933b639f0659fde34e12f635127e7f" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;router.map&lt;/code&gt; being called.</source>
          <target state="translated">&lt;code&gt;router.map&lt;/code&gt; で &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、呼び出されているrouter.mapの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="b828dfd9e2d7bcae2364000145b56e764e6ebe03" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;router.on&lt;/code&gt; being called.</source>
          <target state="translated">&lt;code&gt;router.on&lt;/code&gt; で &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 router.onと呼ばれる例を見つけます。</target>
        </trans-unit>
        <trans-unit id="f9a6975194aa0ce1b5cad1c6626af7c35453fcd0" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;router.redirect&lt;/code&gt; being called.</source>
          <target state="translated">&lt;code&gt;router.redirect&lt;/code&gt; で &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、呼び出されるrouter.redirectの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="cc5f2a33706f0e2d3f4cdbd090a5e649c5b6ae0f" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;router.start&lt;/code&gt; being called.</source>
          <target state="translated">&lt;code&gt;router.start&lt;/code&gt; で &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 呼び出されているrouter.startの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="f5f2fbe802e2c06eba8dee0a46275f8ee4460bc0" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;store.on&lt;/code&gt;, &lt;code&gt;store.off&lt;/code&gt;, and &lt;code&gt;store.emit&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;store.on&lt;/code&gt; で &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、store.on、 &lt;code&gt;store.off&lt;/code&gt; 、および &lt;code&gt;store.emit&lt;/code&gt; の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="00ad6c9fe856a5b4567b7a4dab60a0fe45a37f40" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;store.watch&lt;/code&gt; with a string as the first argument.</source>
          <target state="translated">&lt;code&gt;store.watch&lt;/code&gt; で &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行し、最初の引数として文字列を使用してサンプルのstore.watchを見つけます。</target>
        </trans-unit>
        <trans-unit id="4f47a47355d74434a753364a679e2f4c9a402ae5" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;track-by&lt;/code&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;track-by&lt;/code&gt; 例を見つけます。</target>
        </trans-unit>
        <trans-unit id="da0f85cb5aa67bdac2ea466f36918db2fcd36b05" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;v-el&lt;/code&gt; and &lt;code&gt;v-ref&lt;/code&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;v-el&lt;/code&gt; および &lt;code&gt;v-ref&lt;/code&gt; の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="7aa5783c6df3a82bb69131d32c3850e7f84cfda7" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$after&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行し、 &lt;code&gt;vm.$after&lt;/code&gt; サンプルを見つけます。 見つからなかった場合、 &lt;strong&gt;コンソールエラー&lt;/strong&gt;が表示されます。</target>
        </trans-unit>
        <trans-unit id="09e7d78d817c1fd2a45c3cf9b9c21a2069c4fd37" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$appendTo&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;vm.$appendTo&lt;/code&gt; &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行し、 vmを見つけます。 $ AppendToの例。 見つからなかった場合、 &lt;strong&gt;コンソールエラー&lt;/strong&gt;が表示されます。</target>
        </trans-unit>
        <trans-unit id="d7350cc4e203e91682eee37d60894b3e1314af48" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$before&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行し、 &lt;code&gt;vm.$before&lt;/code&gt; サンプルを見つけます。 見つからなかった場合、 &lt;strong&gt;コンソールエラー&lt;/strong&gt;が表示されます。</target>
        </trans-unit>
        <trans-unit id="c0c4f878eaed231fe0dbb2225df03cd65dc84e13" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$eval&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行し、 &lt;code&gt;vm.$eval&lt;/code&gt; 例を見つけます。 見つからなかった場合、 &lt;strong&gt;コンソールエラー&lt;/strong&gt;が表示されます。</target>
        </trans-unit>
        <trans-unit id="3f8e856f05355ed8982ce86f4336ff6eacabf3e2" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$get&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行し、 &lt;code&gt;vm.$get&lt;/code&gt; サンプルを見つけます。 見つからなかった場合、 &lt;strong&gt;コンソールエラー&lt;/strong&gt;が表示されます。</target>
        </trans-unit>
        <trans-unit id="bd0dd654ce3404b139a97c6070c1ea80255ce0fd" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$interpolate&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行し、 &lt;code&gt;vm.$interpolate&lt;/code&gt; 例を見つけます。 見つからなかった場合、 &lt;strong&gt;コンソールエラー&lt;/strong&gt;が表示されます。</target>
        </trans-unit>
        <trans-unit id="81bbbda8f1ba1322792aa46e4294439738bc392f" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$log&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行し、 &lt;code&gt;vm.$log&lt;/code&gt; 例を見つけます 。 見つからなかった場合、 &lt;strong&gt;コンソールエラー&lt;/strong&gt;が表示されます。</target>
        </trans-unit>
        <trans-unit id="381f44de62059e317b1f31d7ce9b3541555d602b" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$remove&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行し、 &lt;code&gt;vm.$remove&lt;/code&gt; 例を見つけます。 見つからなかった場合、 &lt;strong&gt;コンソールエラー&lt;/strong&gt;が表示されます。</target>
        </trans-unit>
        <trans-unit id="b874a37ca4886af9d3b7780e6010cf89d9c7f988" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of arbitrary route properties not scoped under meta.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、メタスコープではないルートプロパティの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="1fa158cea69bdd4c40bd2a48988a099538d4dc5e" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of defined directives. The helper will flag all of them, as it's likely in most cases that you'll want to refactor to a component.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、事前定義されたディレクティブの例を見つけます。 ほとんどの場合、コンポーネントをリファクタリングする必要があるため、ヘルパーはそれらすべてにフラグを立てます。</target>
        </trans-unit>
        <trans-unit id="979e6458f784d896c90752c57e560652f6c8525d" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of filters being used inside directives. If you miss any, you should also see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパーを&lt;/a&gt;実行して、ディレクティブで使用されるフィルターの例を見つけます。 見逃した場合は、 &lt;strong&gt;コンソールエラー&lt;/strong&gt;も表示され&lt;strong&gt;ます&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="801a0e4488b5e174aaaa485bb9fbdd0fb7f5b389" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of filters used in directives like &lt;code&gt;v-model&lt;/code&gt;. If you miss any, you should also see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;v-model&lt;/code&gt; などのディレクティブで使用されるフィルターの例を見つけます。 見逃した場合は、 &lt;strong&gt;コンソールエラー&lt;/strong&gt;も表示され&lt;strong&gt;ます&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="83b833ef69efe1e17f7ef29c061f04dea5876bad" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of interpolation used within attributes.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパーを&lt;/a&gt;実行して、属性で使用される補間の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="9bb76b174b8438ba3c0f4ba54b4026ce44dd98ca" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of overwriting &lt;code&gt;vm.$data&lt;/code&gt;. If you miss any, &lt;strong&gt;console warnings&lt;/strong&gt; will be emitted.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行し、 &lt;code&gt;vm.$data&lt;/code&gt; を上書きする例を見つけます 。 何かを見逃すと、 &lt;strong&gt;コンソールの警告が表示され&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="8dbff7c8c83dec265171807e5ec5ea40ea988ad1" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of style bindings with &lt;code&gt;!important&lt;/code&gt; in objects.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、オブジェクトに &lt;code&gt;!important&lt;/code&gt; を含むスタイルバインディングの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="93ebbb2019ca1300c683d3ae1afb72a96650f915" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;$loadingRouteData&lt;/code&gt; meta property.</source>
          <target state="translated">&lt;code&gt;$loadingRouteData&lt;/code&gt; &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、$ loadingRouteDataメタプロパティの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="52407d926e2b5716bf90f4cb35758896e87892ed" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;.once&lt;/code&gt; and &lt;code&gt;.sync&lt;/code&gt; modifiers.</source>
          <target state="translated">&lt;code&gt;.once&lt;/code&gt; で &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、.onceおよび &lt;code&gt;.sync&lt;/code&gt; 修飾子の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="2c8ce2853d843c2c72201a428aaae4467ceec09d" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;abstract: true&lt;/code&gt; option.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;abstract: true&lt;/code&gt; オプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="2258f58c39858d2874ac267df312bf5774d76c18" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;activate&lt;/code&gt; hook.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパーを&lt;/a&gt;実行して、 &lt;code&gt;activate&lt;/code&gt; フックの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="0d2dd196d33a6838401706a980c174ba91eb1c6e" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;cache: false&lt;/code&gt; option.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;cache: false&lt;/code&gt; オプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="635b9a1176068b8a0020a01c4f47cb421d064226" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;canActivate&lt;/code&gt; hook.</source>
          <target state="translated">&lt;code&gt;canActivate&lt;/code&gt; で &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、canActivateフックの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="1ef7f740384cd3cfdf159ef6085f2faaac1ec88f" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;canDeactivate&lt;/code&gt; hook.</source>
          <target state="translated">&lt;code&gt;canDeactivate&lt;/code&gt; で &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、canDeactivateフックの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="416c87ed212eefdaa2ddbf02f6a0ba2e74d86959" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;canReuse: false&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;canReuse: false&lt;/code&gt; &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行し、canReuse：falseオプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="ce44d3b81054ffa59cb49fd62f006c1d791e2ab0" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;coerce&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;coerce&lt;/code&gt; &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、強制オプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="61fdd38d446cfe928998b1181aa744e45596c1c5" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;data&lt;/code&gt; hook.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;data&lt;/code&gt; フックの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="eeb9b18e06a447d16bfa196a854b2eb06f05360a" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;deactivate&lt;/code&gt; hook.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;deactivate&lt;/code&gt; フックの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="f483517518991a282467c00ae1cad300e136b269" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;debounce&lt;/code&gt; attribute.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;debounce&lt;/code&gt; 属性の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="b65067f3a77b357e086f22629678c364185b2ab2" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;hashbang: false&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;hashbang: false&lt;/code&gt; &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、hashbang：falseオプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="8a2e5b8abfbc6295fa11dd1caccde1ae7c3d69af" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;history: true&lt;/code&gt; option.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;history: true&lt;/code&gt; オプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="452c89b5559555a477ca0eb92f956476ce00d5cd" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;middlewares&lt;/code&gt; option on a store.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、ストア &lt;code&gt;middlewares&lt;/code&gt; オプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="6faa58ba44b5eb605740b8397f8693bbaaa6f840" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;root&lt;/code&gt; option.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;root&lt;/code&gt; オプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="ab45ded99a30a006bddeceb3fd6aa38bb6c3d9c6" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;saveScrollPosition: true&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;saveScrollPosition: true&lt;/code&gt; で&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行し、saveScrollPosition：trueオプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="6ec2df901f80374c6ff66f398825204e5f18d423" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;subRoutes&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;subRoutes&lt;/code&gt; で &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、subRoutesオプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="7178b2cc5e9e2a36383d9e60b9eea90fb3bcb121" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;suppressTransitionError: true&lt;/code&gt; option.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;遷移ヘルパーを&lt;/a&gt;実行し、 &lt;code&gt;suppressTransitionError: true&lt;/code&gt; オプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="4e988285e061dd6f2c40c32cddfbc676c1aab12a" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;transition&lt;/code&gt; attribute.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;遷移ヘルパーを&lt;/a&gt;実行して、 &lt;code&gt;transition&lt;/code&gt; 属性の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="c5f2b82da8cac7dc4262de8c7c93d4a46587dbca" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;transition&lt;/code&gt; attribute. During your update, you can transition (pun very much intended) to the new staggering strategy as well.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;遷移ヘルパーを&lt;/a&gt;実行して、 &lt;code&gt;transition&lt;/code&gt; 属性の例を見つけます。 更新中に、新しい驚異的な戦略に移行することもできます（非常に意図的です）。</target>
        </trans-unit>
        <trans-unit id="34922f45eeac604f53b4193f84913c2beb89b350" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;transitionOnLoad: true&lt;/code&gt; option.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパーを&lt;/a&gt;実行し、 &lt;code&gt;transitionOnLoad: true&lt;/code&gt; オプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="c9c97a1b14162dd07775888af56118c3a3370301" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;twoWay&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;twoWay&lt;/code&gt; で &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、twoWayオプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="cb3445799897bdc7ce3106b11c9b2c1f1d554568" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;v-else&lt;/code&gt; with &lt;code&gt;v-show&lt;/code&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行し、 &lt;code&gt;v-show&lt;/code&gt; でv- &lt;code&gt;v-else&lt;/code&gt; 例を見つけます。</target>
        </trans-unit>
        <trans-unit id="bccc02e6c6793423ef659db42169cb5afa5716d0" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;v-link-active&lt;/code&gt; directive.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;v-link-active&lt;/code&gt; ディレクティブの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="ea921119a7e1635ac4e5a00b3d8a84491101f3fb" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;v-link&lt;/code&gt; directive.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;v-link&lt;/code&gt; ディレクティブの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="a825bdc145076ec6a6e4b0c215f030aa3ba79b85" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the `.literal` modifier on a directive.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、ディレクティブ `.literal`修飾子の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="733bb79e129d2dca49869269db0a3698c6f65fa8" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the obsolete argument order. Note that if you name your index arguments something unusual like &lt;code&gt;position&lt;/code&gt; or &lt;code&gt;num&lt;/code&gt;, the helper will not flag them.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、廃止された引数の順序の例を見つけます。 インデックス引数に &lt;code&gt;position&lt;/code&gt; や &lt;code&gt;num&lt;/code&gt; などの珍しい名前を付けた場合、ヘルパーはそれらにフラグを付けないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="da725380e126a62727af458ad28bac7c6524d798" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the obsolete argument order. Note that if you name your key arguments something like &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;property&lt;/code&gt;, the helper will not flag them.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、廃止された引数の順序の例を見つけます。 キー引数にnameや &lt;code&gt;property&lt;/code&gt; などの &lt;code&gt;name&lt;/code&gt; 指定すると、ヘルパーはフラグを付けないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="f1e1035d99ed76f7515df578e692ff719107895a" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the obsolete route syntax.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、廃止されたルート構文の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="142bb71333ac86e488c9aacc373010de66e961e1" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the obsolete text filters. If you miss any, you should also see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、廃止されたテキストフィルターの例を見つけます。 見逃した場合は、 &lt;strong&gt;コンソールエラー&lt;/strong&gt;も表示され&lt;strong&gt;ます&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="397d5ab0302428112127147010f4482ef9051b5e" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the obsolete usage.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、使用されなくなった使用例を探します。</target>
        </trans-unit>
        <trans-unit id="c1aa36c4bb555ce2607bb2d08c4631182d133d50" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the old filter syntax. If you miss any, you should also see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、古いフィルター構文の例を見つけます。 見逃した場合は、 &lt;strong&gt;コンソールエラー&lt;/strong&gt;も表示され&lt;strong&gt;ます&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="20564b7f4450c4fa59c4a3ba6fa87121c27fe89f" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the the old &lt;code&gt;keyCode&lt;/code&gt; configuration syntax.</source>
          <target state="translated">&lt;code&gt;keyCode&lt;/code&gt; で &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、古いkeyCode設定構文の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="cc0976e79e68e3874825b8d9309f7bc3cf13503f" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the these param attributes.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、これらのparam属性の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="4a53e2c9b9e1ccea5753bf6c5b26aa93f8d31041" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of these removed variables. If you miss any, you should also see &lt;strong&gt;console errors&lt;/strong&gt; such as: &lt;code&gt;Uncaught ReferenceError: $index is not defined&lt;/code&gt;</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、これらの削除された変数の例を見つけます。 見逃した場合は、次のような&lt;strong&gt;コンソールエラー&lt;/strong&gt;も表示されます &lt;code&gt;Uncaught ReferenceError: $index is not defined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b0ae781de5086e5c0e4123dc4514d344522a5237" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find one-time bindings.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、ワンタイムバインディングを見つけます。</target>
        </trans-unit>
        <trans-unit id="2c800955474c5ae66271d1f51e3a706afff6e929" translate="yes" xml:space="preserve">
          <source>Run your bundling command with the actual &lt;code&gt;NODE_ENV&lt;/code&gt; environment variable set to &lt;code&gt;&quot;production&quot;&lt;/code&gt;. This tells &lt;code&gt;vueify&lt;/code&gt; to avoid including hot-reload and development related code.</source>
          <target state="translated">実際の &lt;code&gt;NODE_ENV&lt;/code&gt; 環境変数を &lt;code&gt;&quot;production&quot;&lt;/code&gt; に設定して、バンドルコマンドを実行します。 これにより、 &lt;code&gt;vueify&lt;/code&gt; にホットリロードまたは開発関連のコードが含まれなくなります。</target>
        </trans-unit>
        <trans-unit id="65124f23df07644ee66ed5e04606bd6c7b54318b" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite or app after upgrading and look for &lt;strong&gt;console warnings&lt;/strong&gt; about duplicate slots &lt;code&gt;v-model&lt;/code&gt;.</source>
          <target state="translated">アップグレード後にエンドツーエンドのテストスイートまたはアプリを実行し、スロット &lt;code&gt;v-model&lt;/code&gt; 複製&lt;strong&gt;に関するコンソールの警告&lt;/strong&gt;を探します。</target>
        </trans-unit>
        <trans-unit id="0276baa533bc89d334fafab4aee362813fb56fba" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite or app after upgrading and look for &lt;strong&gt;console warnings&lt;/strong&gt; about inline value attributes with &lt;code&gt;v-model&lt;/code&gt;.</source>
          <target state="translated">アップグレード後にエンドツーエンドのテストスイートまたはアプリを実行し、 &lt;code&gt;v-model&lt;/code&gt; を使用して、インライン値属性に関する&lt;strong&gt;コンソール警告&lt;/strong&gt;を探します。</target>
        </trans-unit>
        <trans-unit id="b9168febc3cd9fb510564d5d619d53cfceebc829" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite or app after upgrading and look for &lt;strong&gt;console warnings&lt;/strong&gt; about multiple root elements in a template.</source>
          <target state="translated">アップグレード後にエンドツーエンドのテストスイートまたはアプリを実行し、テンプレート内の複数のルート要素に関する&lt;strong&gt;コンソール警告&lt;/strong&gt;を探します。</target>
        </trans-unit>
        <trans-unit id="6cd905d20455b18138224bc59c413711a6de22a2" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite or app after upgrading and look for &lt;strong&gt;console warnings&lt;/strong&gt; about prop mutations.</source>
          <target state="translated">アップグレード後にエンドツーエンドのテストスイートまたはアプリを実行し、propの変異に関する&lt;strong&gt;コンソールの警告&lt;/strong&gt;を探します。</target>
        </trans-unit>
        <trans-unit id="7da416f4436591687e3ea5cf9d579fb6711b7dbd" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite or app after upgrading and look for &lt;strong&gt;console warnings&lt;/strong&gt; about the &lt;code&gt;el&lt;/code&gt; option with &lt;code&gt;Vue.extend&lt;/code&gt;.</source>
          <target state="translated">アップグレード後にエンドツーエンドのテストスイートまたはアプリを実行し、 &lt;code&gt;Vue.extend&lt;/code&gt; で &lt;code&gt;el&lt;/code&gt; オプションに関する&lt;strong&gt;コンソール警告&lt;/strong&gt;を探します。</target>
        </trans-unit>
        <trans-unit id="de5aa3b1e8bcd9a2e9b6648cc6da29ebd7c682fa" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite, if you have one. The &lt;strong&gt;failed tests&lt;/strong&gt; should alert to you to any parts of your app that may be affected by this change.</source>
          <target state="translated">エンドツーエンドのテストスイートがある場合は実行します。 &lt;strong&gt;テストに失敗&lt;/strong&gt;すると、この変更の影響を受ける可能性のあるアプリのすべての部分について警告する必要があります。</target>
        </trans-unit>
        <trans-unit id="25b0475e8303e55dc27cdda9bbd8ef8c1c492011" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite, if you have one. The &lt;strong&gt;failed tests&lt;/strong&gt; should alert to you to the fact that a watcher was relying on the old behavior.</source>
          <target state="translated">エンドツーエンドのテストスイートがある場合は実行します。 &lt;strong&gt;失敗したテスト&lt;/strong&gt;は、ウォッチャーが古い動作に依存しているという事実を警告します。</target>
        </trans-unit>
        <trans-unit id="3925b4e9140324a46bda954fa3ba6a11551d44d8" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite, if you have one. The &lt;strong&gt;failed tests&lt;/strong&gt; should alert to you to the fact that props passed to root instances are no longer working.</source>
          <target state="translated">エンドツーエンドのテストスイートがある場合は実行します。 &lt;strong&gt;テストに失敗&lt;/strong&gt;すると、ルートインスタンスに渡されたプロップが機能しなくなったことを警告する必要があります。</target>
        </trans-unit>
        <trans-unit id="c7a107bdb49919e8c77ec76a87618731104be368" translate="yes" xml:space="preserve">
          <source>Run your test suite, if you have one. The &lt;strong&gt;failed tests&lt;/strong&gt; should alert to you to any parts of your app that may be affected by this change.</source>
          <target state="translated">テストスイートがある場合は実行します。 &lt;strong&gt;テストに失敗&lt;/strong&gt;すると、この変更の影響を受ける可能性のあるアプリのすべての部分について警告する必要があります。</target>
        </trans-unit>
        <trans-unit id="13285023695c206297d4666f3184c48b775d9ec3" translate="yes" xml:space="preserve">
          <source>Runtime + Compiler vs. Runtime-only</source>
          <target state="translated">ランタイム+コンパイラーvsランタイムのみ</target>
        </trans-unit>
        <trans-unit id="ce3caf82d6dc4282305777c04d22cb7e32e8739f" translate="yes" xml:space="preserve">
          <source>Runtime Performance</source>
          <target state="translated">実行時のパフォーマンス</target>
        </trans-unit>
        <trans-unit id="0ab3eee80056a96ec147159fe704ef0b8dcd1e74" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#slot-scope&quot;&gt;&lt;code&gt;slot-scope&lt;/code&gt;&lt;/a&gt; except that &lt;code&gt;scope&lt;/code&gt; can only be used on &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; elements.</source>
          <target state="translated">スコープが &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 要素でのみ使用できることを除いて、 &lt;a href=&quot;#slot-scope&quot;&gt; &lt;code&gt;slot-scope&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="c41f297530a1a4027d4fe5146dc89421c3603b93" translate="yes" xml:space="preserve">
          <source>Sarah Drasner demonstrates this in the demo below, using a combination of timed and interactivity-driven state changes:</source>
          <target state="translated">Sarah Drasnerは、以下のデモでタイミングとインタラクティブな状態変更の組み合わせを使用してこれを示しています。</target>
        </trans-unit>
        <trans-unit id="a29f0256272e79ca91a1c4e608f09a6264397d12" translate="yes" xml:space="preserve">
          <source>Scale</source>
          <target state="translated">Scale</target>
        </trans-unit>
        <trans-unit id="88011a37856972ada6fede54fa2220927bfb5ac0" translate="yes" xml:space="preserve">
          <source>Scaling Down</source>
          <target state="translated">削減</target>
        </trans-unit>
        <trans-unit id="2d20a53538fb773c0616dc1ef8c4f21c2ceb637d" translate="yes" xml:space="preserve">
          <source>Scaling Up</source>
          <target state="translated">拡大する</target>
        </trans-unit>
        <trans-unit id="bf1e630e7268556a0635e37341aa31c69f284094" translate="yes" xml:space="preserve">
          <source>Scoped Slots</source>
          <target state="translated">スコープ付きスロット</target>
        </trans-unit>
        <trans-unit id="c891d436871bb971da8c2ff8081958bff3ddb19a" translate="yes" xml:space="preserve">
          <source>Scoped Slots with the &lt;code&gt;slot-scope&lt;/code&gt; Attribute</source>
          <target state="translated">&lt;code&gt;slot-scope&lt;/code&gt; 属性を持つスコープ付きスロット</target>
        </trans-unit>
        <trans-unit id="6aa971b69d2fe9a8fec7d58fa039f9aafe0f8da1" translate="yes" xml:space="preserve">
          <source>Scoped slot functions are now guaranteed to return an array of VNodes, unless the return value is invalid, in which case the function will return &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">スコープスロット関数は &lt;code&gt;undefined&lt;/code&gt; あり、戻り値が無効でない限り、VNodeの配列を返すことが保証されています。 その場合、関数は未定義を返します。</target>
        </trans-unit>
        <trans-unit id="dfa277d957af13fbcf610edac48d6ff9d1d53991" translate="yes" xml:space="preserve">
          <source>Search your codebase for the regex &lt;code&gt;/\w+ in \d+/&lt;/code&gt;. Wherever it appears in a &lt;code&gt;v-for&lt;/code&gt;, check to see if you may be affected.</source>
          <target state="translated">&lt;code&gt;/\w+ in \d+/&lt;/code&gt; 正規表現/ \ w +で/ \ w +のコードベースを検索します。 &lt;code&gt;v-for&lt;/code&gt; のどこかに影響があるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="0d4f1b3e1926d0de28455af2f7b050061aa08a61" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/1Leb7up8/&quot;&gt;this fiddle&lt;/a&gt; for the full code. Note, however, that if you find yourself having to do a lot of setup and cleanup within a single component, the best solution will usually be to create more modular components. In this case, we&amp;rsquo;d recommend creating a reusable &lt;code&gt;&amp;lt;input-datepicker&amp;gt;&lt;/code&gt; component.</source>
          <target state="translated">完全なコードについては、 &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/1Leb7up8/&quot;&gt;このフィドル&lt;/a&gt;を参照してください。 ただし、1つのコンポーネント内で多くのセットアップとクリーンアップを行う必要がある場合は、通常、より多くのモジュールコンポーネントを作成することが最善のソリューションであることを覚えておいてください。 この場合、 &lt;code&gt;&amp;lt;input-datepicker&amp;gt;&lt;/code&gt; コンポーネントを作成することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="04b10db48b879dd4894715118934c8f16e790244" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/65gLu2b6/&quot;&gt;this fiddle&lt;/a&gt; for the complete code behind the above demo.</source>
          <target state="translated">上記のデモの背後にある完全なコードについては、 &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/65gLu2b6/&quot;&gt;このフィドル&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="030b52b1aecbbfd160c5986ee59275d22c9f7672" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/o3nycadu/&quot;&gt;this fiddle&lt;/a&gt; to experiment with the full code, or &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/b2qj69o1/&quot;&gt;this version&lt;/a&gt; for an example binding to a component&amp;rsquo;s options object, instead of its registered name.</source>
          <target state="translated">完全なコードを試すには、 &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/o3nycadu/&quot;&gt;このフィドル&lt;/a&gt;をご覧ください。 コンポーネントを登録名ではなくオプションオブジェクトにバインドする例については、 &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/b2qj69o1/&quot;&gt;このバージョン&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="bc6fd808ffb90ac93f1cb9d312e01c08b9a59bf3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/compiler-options.html&quot;&gt;TypeScript compiler options docs&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/compiler-options.html&quot;&gt;TypeScriptコンパイラオプションのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="8f4b188488a5cff189e4cfc9d54ff0931435281a" translate="yes" xml:space="preserve">
          <source>See example &lt;a href=&quot;https://github.com/vuejs/vuex/blob/1.0/docs/en/plugins.md&quot;&gt;the plugins docs&lt;/a&gt; for more info.</source>
          <target state="translated">詳細については、プラグインのドキュメントの例を参照してください。</target>
        </trans-unit>
        <trans-unit id="b7cdc723bd45704f63d3132765b8411da257e1bf" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/sdras/pen/YZBGNp/&quot;&gt;Vue-controlled Wall-E&lt;/a&gt; by Sarah Drasner (&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;CodePen&lt;/a&gt; Sarah Drasner（@sdras）に&lt;a href=&quot;https://codepen.io/sdras/pen/YZBGNp/&quot;&gt;よる&lt;/a&gt; Pen Vue Control Wall-Eを参照してください。</target>
        </trans-unit>
        <trans-unit id="8598222918d3c6e513d63060cf55e2971ded729a" translate="yes" xml:space="preserve">
          <source>Select</source>
          <target state="translated">Select</target>
        </trans-unit>
        <trans-unit id="d84be9de2f9e35e379e0e4f6e0bb2340cf1b2d0b" translate="yes" xml:space="preserve">
          <source>Select Options</source>
          <target state="translated">選択肢一つを選択してください</target>
        </trans-unit>
        <trans-unit id="33e3b8ff7914aff97145e0add0103e5154bdde21" translate="yes" xml:space="preserve">
          <source>Self-closing components</source>
          <target state="translated">自己閉鎖コンポーネント</target>
        </trans-unit>
        <trans-unit id="8aa1710830cfa45dfe404022342d5aade64a9767" translate="yes" xml:space="preserve">
          <source>Self-closing components &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">自己閉鎖コンポーネントを&lt;sup&gt;強く推奨&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="01fe9a20a8fdeb0f312fdcea1363c6a939cf772b" translate="yes" xml:space="preserve">
          <source>Server-Side Rendering</source>
          <target state="translated">サーバー側レンダリング</target>
        </trans-unit>
        <trans-unit id="d986e7075907e08286bd92c14ff694e5215b1ede" translate="yes" xml:space="preserve">
          <source>Set this to &lt;code&gt;false&lt;/code&gt; to prevent the production tip on Vue startup.</source>
          <target state="translated">これが &lt;code&gt;false&lt;/code&gt; に設定されている場合、Vueの起動時に制作のヒントは表示されません。</target>
        </trans-unit>
        <trans-unit id="0322b76a288cd27bf5d650f3c073fe32426bc786" translate="yes" xml:space="preserve">
          <source>Set this to &lt;code&gt;true&lt;/code&gt; to enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel. Only works in development mode and in browsers that support the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark&quot;&gt;performance.mark&lt;/a&gt; API.</source>
          <target state="translated">これを &lt;code&gt;true&lt;/code&gt; に設定すると、ブラウザのdevtoolパフォーマンス/タイムラインパネルでコンポーネントの初期化、コンパイル、レンダリング、およびパフォーマンストレースパッチが有効になります。 開発モードおよび&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark&quot;&gt;performance.mark&lt;/a&gt; APIをサポートするブラウザーでのみ機能します。</target>
        </trans-unit>
        <trans-unit id="97f2f59947f62c014c5d7c2a4de9191db27303ae" translate="yes" xml:space="preserve">
          <source>Share (and Build) Your Experience</source>
          <target state="translated">経験を共有（および構築）する</target>
        </trans-unit>
        <trans-unit id="89dd25c3e7bb9f776951ef9ad74e60a7d6dd05bb" translate="yes" xml:space="preserve">
          <source>Shorthands</source>
          <target state="translated">Shorthands</target>
        </trans-unit>
        <trans-unit id="1ae7276e79db945fd551dc9db134399c32bb6984" translate="yes" xml:space="preserve">
          <source>Should either be updated to use an inline expression:</source>
          <target state="translated">インライン式を使用するには更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="b0a3536bb7788ee14bd41892adba577744a1012d" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;$root&lt;/code&gt;, the &lt;code&gt;$parent&lt;/code&gt; property can be used to access the parent instance from a child. This can be tempting to reach for as a lazy alternative to passing data with a prop.</source>
          <target state="translated">&lt;code&gt;$root&lt;/code&gt; 、子は &lt;code&gt;$parent&lt;/code&gt; プロパティを使用して親インスタンスにアクセスできます。 小道具を使用してデータを渡すための怠laな代替手段としてこれに到達することができます。</target>
        </trans-unit>
        <trans-unit id="dadac4906f4bc6e4a81d9058bdcbf1bbcb397f71" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;v-else&lt;/code&gt;, a &lt;code&gt;v-else-if&lt;/code&gt; element must immediately follow a &lt;code&gt;v-if&lt;/code&gt; or a &lt;code&gt;v-else-if&lt;/code&gt; element.</source>
          <target state="translated">&lt;code&gt;v-else&lt;/code&gt; 、 &lt;code&gt;v-else-if&lt;/code&gt; 要素は &lt;code&gt;v-if&lt;/code&gt; または &lt;code&gt;v-else-if&lt;/code&gt; 要素の直後になければなりません。</target>
        </trans-unit>
        <trans-unit id="af9b7b6d2657eb7de92b424e723e1ce34e27dd45" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;v-on&lt;/code&gt; and &lt;code&gt;v-bind&lt;/code&gt;, &lt;code&gt;v-slot&lt;/code&gt; also has a shorthand, replacing everything before the argument (&lt;code&gt;v-slot:&lt;/code&gt;) with the special symbol &lt;code&gt;#&lt;/code&gt;. For example, &lt;code&gt;v-slot:header&lt;/code&gt; can be rewritten as &lt;code&gt;#header&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;v-on&lt;/code&gt; および &lt;code&gt;v-bind&lt;/code&gt; 、 &lt;code&gt;v-slot&lt;/code&gt; にも省略形があり、引数の前のすべてを置き換えます（ &lt;code&gt;v-slot:&lt;/code&gt; は特別な記号 &lt;code&gt;#&lt;/code&gt; 置き換えられます。たとえば、 &lt;code&gt;v-slot:header&lt;/code&gt; は &lt;code&gt;#header&lt;/code&gt; に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="110921f9f16f79ec9020d42a774f85de76c9358e" translate="yes" xml:space="preserve">
          <source>Similar to prop defaults, you need to use a factory function for non primitive values:</source>
          <target state="translated">propのデフォルトと同様に、非プリミティブ値にはファクトリー関数を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="3115d0b13d887f54dba012634384e7c25cfdf659" translate="yes" xml:space="preserve">
          <source>Similar to template &lt;code&gt;v-if&lt;/code&gt;, you can also use a &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; tag with &lt;code&gt;v-for&lt;/code&gt; to render a block of multiple elements. For example:</source>
          <target state="translated">テンプレート &lt;code&gt;v-if&lt;/code&gt; と同様に、 &lt;code&gt;v-for&lt;/code&gt; で &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; タグを使用して、複数の要素のブロックをレンダリングできます。 例えば：</target>
        </trans-unit>
        <trans-unit id="9032b6dd131e5bdf77e7f1e8c9ad6ef9e98b4db4" translate="yes" xml:space="preserve">
          <source>Similarly, you can use dynamic arguments to bind a handler to a dynamic event name:</source>
          <target state="translated">同様に、動的引数を使用してハンドラーを動的イベント名にバインドできます。</target>
        </trans-unit>
        <trans-unit id="e756f11c70f78a0ba1866d4795579c59fa6d1833" translate="yes" xml:space="preserve">
          <source>Simple Assertions</source>
          <target state="translated">単純なアサーション</target>
        </trans-unit>
        <trans-unit id="bbba1d068bf49ca0e64f1e344f51043367c2266d" translate="yes" xml:space="preserve">
          <source>Simple Routing From Scratch</source>
          <target state="translated">最初から簡単なルーティング</target>
        </trans-unit>
        <trans-unit id="4e794aae53f27e868a697d7573dd5ec04e937e2a" translate="yes" xml:space="preserve">
          <source>Simple State Management from Scratch</source>
          <target state="translated">ゼロからの簡単な状態管理</target>
        </trans-unit>
        <trans-unit id="7a423acd4331de7d207764fc94ba09543c17ef88" translate="yes" xml:space="preserve">
          <source>Simple computed properties</source>
          <target state="translated">単純な計算プロパティ</target>
        </trans-unit>
        <trans-unit id="28fbbfbd1e3c5e7641094f470de044776bb5ad02" translate="yes" xml:space="preserve">
          <source>Simple computed properties &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">単純な計算プロパティを&lt;sup&gt;強くお勧めします&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="37761f78a8d655b3953b071e198e22dcd5a02587" translate="yes" xml:space="preserve">
          <source>Simple expressions in templates</source>
          <target state="translated">テンプレート内の単純な式</target>
        </trans-unit>
        <trans-unit id="fcf7b67ac329ddfb22fdf3fbec785727bf9bf466" translate="yes" xml:space="preserve">
          <source>Simple expressions in templates &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">テンプレート内の単純な式を&lt;sup&gt;強くお勧めします&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="211d49f995dbe282f57faa15874e031ac53eeff7" translate="yes" xml:space="preserve">
          <source>Simpler, well-named computed properties are:</source>
          <target state="translated">以下は、よりシンプルでわかりやすい計算プロパティです。</target>
        </trans-unit>
        <trans-unit id="63a2bccabf19824dace120aef2460e5986003d8a" translate="yes" xml:space="preserve">
          <source>Simplifying computed properties forces you to give each value a descriptive name, even if it&amp;rsquo;s not reused. This makes it much easier for other developers (and future you) to focus in on the code they care about and figure out what&amp;rsquo;s going on.</source>
          <target state="translated">計算されたプロパティを簡素化するには、再利用されない場合でも、各値に意味のある名前を付ける必要があります。 これにより、他の開発者（および将来の開発者）が関心のあるコードに集中し、何が起こっているのかを確認することがはるかに簡単になります。</target>
        </trans-unit>
        <trans-unit id="5fd1e98b263d4df6091312537a5b1fb83da16e24" translate="yes" xml:space="preserve">
          <source>Simply download and include with a script tag. &lt;code&gt;Vue&lt;/code&gt; will be registered as a global variable.</source>
          <target state="translated">単にダウンロードして、スクリプトタグに含めます。 &lt;code&gt;Vue&lt;/code&gt; はグローバル変数として登録されます。</target>
        </trans-unit>
        <trans-unit id="d5938f34f8624b63802c3118f180d5e293766247" translate="yes" xml:space="preserve">
          <source>Simultaneous entering and leaving transitions aren&amp;rsquo;t always desirable though, so Vue offers some alternative &lt;strong&gt;transition modes&lt;/strong&gt;:</source>
          <target state="translated">ただし、トランジションを同時に開始および終了することが常に望ましいとは限らないため、Vueはいくつかの代替&lt;strong&gt;トランジションモードを&lt;/strong&gt;提供し&lt;strong&gt;ます&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="6a69d78f54bcf8ac6e1f4a3963e04cee33a026d0" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;$nextTick()&lt;/code&gt; returns a promise, you can achieve the same as the above using the new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;ES2016 async/await&lt;/a&gt; syntax:</source>
          <target state="translated">&lt;code&gt;$nextTick()&lt;/code&gt; はpromiseを返すため、新しい&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;ES2016 async / await&lt;/a&gt;構文で同じことを実現できます。</target>
        </trans-unit>
        <trans-unit id="10a777de149e5a77b75501c009eb466a9bc93514" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;v-ref&lt;/code&gt; is no longer a directive, but a special attribute, it can also be dynamically defined. This is especially useful in combination with &lt;code&gt;v-for&lt;/code&gt;. For example:</source>
          <target state="translated">&lt;code&gt;v-ref&lt;/code&gt; はディレクティブではなく、特別な属性であり、動的に定義することもできます。 これは、 &lt;code&gt;v-for&lt;/code&gt; と組み合わせて使用​​すると特に便利です。 例えば：</target>
        </trans-unit>
        <trans-unit id="9de3c1e0a71e1edcdc7ffbc2b45060ebfe43b095" translate="yes" xml:space="preserve">
          <source>Since Vue &lt;a href=&quot;reactivity#Async-Update-Queue&quot;&gt;performs DOM updates asynchronously&lt;/a&gt;, assertions on DOM updates resulting from state change will have to be made in a &lt;code&gt;Vue.nextTick&lt;/code&gt; callback:</source>
          <target state="translated">VueはDOM更新を&lt;a href=&quot;reactivity#Async-Update-Queue&quot;&gt;非同期的&lt;/a&gt;に実行するため、Vue.nextTickコールバックの状態が変化したため、 &lt;code&gt;Vue.nextTick&lt;/code&gt; DOM更新を行う必要があります。</target>
        </trans-unit>
        <trans-unit id="a6f5eaf2601394efec9f1b3f5eff696573b84807" translate="yes" xml:space="preserve">
          <source>Since Vue doesn&amp;rsquo;t allow dynamically adding root-level reactive properties, you have to initialize Vue instances by declaring all root-level reactive data properties upfront, even with an empty value:</source>
          <target state="translated">Vueではルートレベルのリアクティブプロパティを動的に追加できないため、値が空であっても、すべてのルートレベルのリアクティブデータプロパティを事前に宣言し、Vueインスタンスを初期化する必要があります。</target>
        </trans-unit>
        <trans-unit id="17a485dec90726f134aafab30671454807556666" translate="yes" xml:space="preserve">
          <source>Since component names should always be multi-word, this convention prevents you from having to choose an arbitrary prefix for simple component wrappers (e.g. &lt;code&gt;MyButton&lt;/code&gt;, &lt;code&gt;VueButton&lt;/code&gt;).</source>
          <target state="translated">この規則により、コンポーネント名は常にmultiwordでなければならないため、単純なコンポーネントラッパー（ &lt;code&gt;MyButton&lt;/code&gt; 、 &lt;code&gt;VueButton&lt;/code&gt; など）の任意のプレフィックスを選択する必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="ba2168060abb1674449c97121137c7602377ef42" translate="yes" xml:space="preserve">
          <source>Since components are reusable Vue instances, they accept the same options as &lt;code&gt;new Vue&lt;/code&gt;, such as &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;computed&lt;/code&gt;, &lt;code&gt;watch&lt;/code&gt;, &lt;code&gt;methods&lt;/code&gt;, and lifecycle hooks. The only exceptions are a few root-specific options like &lt;code&gt;el&lt;/code&gt;.</source>
          <target state="translated">コンポーネントは再利用可能なVueインスタンスであるため、 &lt;code&gt;data&lt;/code&gt; 、 &lt;code&gt;computed&lt;/code&gt; 、 &lt;code&gt;watch&lt;/code&gt; 、 &lt;code&gt;methods&lt;/code&gt; 、ライフサイクルフックなど、 &lt;code&gt;new Vue&lt;/code&gt; と同じオプションを受け入れます。 唯一の例外は、 &lt;code&gt;el&lt;/code&gt; のようなルート固有のオプションです。</target>
        </trans-unit>
        <trans-unit id="2b68173db2c99b86c3a75462f226a7b75ff0f1d5" translate="yes" xml:space="preserve">
          <source>Since editors typically organize files alphabetically, all the important relationships between components are now evident at a glance.</source>
          <target state="translated">編集者は通常、ファイルをアルファベット順に整理するため、コンポーネント間のすべての重要な関係が一目でわかります。</target>
        </trans-unit>
        <trans-unit id="ef79f75d79e817472bd0ed5aad52845e59dbf2e4" translate="yes" xml:space="preserve">
          <source>Since functional components are just functions, they&amp;rsquo;re much cheaper to render.</source>
          <target state="translated">機能コンポーネントは単なる機能であるため、レンダリングははるかに安価です。</target>
        </trans-unit>
        <trans-unit id="5ca066badcd55a6324af0033eddd42706cb8d9c3" translate="yes" xml:space="preserve">
          <source>Since it&amp;rsquo;s a generic mechanism for Vue to identify nodes, the &lt;code&gt;key&lt;/code&gt; also has other uses that are not specifically tied to &lt;code&gt;v-for&lt;/code&gt;, as we will see later in the guide.</source>
          <target state="translated">Vueはノードを識別するための一般的なメカニズムであるため、キーには &lt;code&gt;v-for&lt;/code&gt; に特に関連付けられていない他の用途があります。 これについては、このガイドの後半で説明します。</target>
        </trans-unit>
        <trans-unit id="c460325ca52e3630249720f5552ae7b020e4765a" translate="yes" xml:space="preserve">
          <source>Since the runtime-only builds are roughly 30% lighter-weight than their full-build counterparts, you should use it whenever you can. If you still wish to use the full build instead, you need to configure an alias in your bundler:</source>
          <target state="translated">ランタイムのみのビルドは、フルビルドよりも約30％軽量であり、可能な限り使用する必要があります。 それでも代わりにフルビルドを使用する場合は、バンドラーでエイリアスを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="e62e1d6e39e14f551529b609a48c6fb619bb1df6" translate="yes" xml:space="preserve">
          <source>Since these are &lt;a href=&quot;https://cdn.jsdelivr.net/npm/vue/types/&quot;&gt;published on NPM&lt;/a&gt;, and the latest TypeScript knows how to resolve type declarations in NPM packages, this means when installed via NPM, you don&amp;rsquo;t need any additional tooling to use TypeScript with Vue.</source>
          <target state="translated">これらは&lt;a href=&quot;https://cdn.jsdelivr.net/npm/vue/types/&quot;&gt;NPM&lt;/a&gt;で公開されており、最新のTypeScriptはNPMパッケージの型宣言を解決する方法を知っているため、NPMを介してインストールする場合、VueでTypeScriptを使用するために追加のツールは必要ありません。</target>
        </trans-unit>
        <trans-unit id="4ea3d2ff946bc5b79835d964012d367a993b9ca6" translate="yes" xml:space="preserve">
          <source>Since these components are so frequently used, you may want to simply make them global instead of importing them everywhere. A prefix makes this possible with Webpack:</source>
          <target state="translated">これらのコンポーネントは頻繁に使用されるため、どこにでもインポートするのではなく、単にグローバルにしたい場合があります。 プレフィックスは、Webpackでこれを可能にします。</target>
        </trans-unit>
        <trans-unit id="796906cd98540356e295c43d625d24ed68862aac" translate="yes" xml:space="preserve">
          <source>Since we&amp;rsquo;re no longer using filter options that require a value to be returned, our currency work could actually be done asynchronously. That means if we had a lot of apps that had to work with currencies, we could easily refactor this logic into a shared microservice.</source>
          <target state="translated">値を返す必要があるフィルターオプションを使用しなくなったため、通貨処理は実際に非同期で実行できます。 これは、通貨を操作する必要があるアプリがたくさんある場合、このロジックを共有マイクロサービスに簡単にリファクタリングできることを意味します。</target>
        </trans-unit>
        <trans-unit id="a31aa77b805847e93b5d67d3ae054b43de8ddfb3" translate="yes" xml:space="preserve">
          <source>Since you don&amp;rsquo;t have to manually attach event listeners in JS, your ViewModel code can be pure logic and DOM-free. This makes it easier to test.</source>
          <target state="translated">JSでイベントリスナーを手動でアタッチする必要がないため、ViewModelコードは純粋なロジックとDOMフリーです。 これにより、テストが簡単になります。</target>
        </trans-unit>
        <trans-unit id="59debd2931aa770a2b0975329d41213dcd9c5d88" translate="yes" xml:space="preserve">
          <source>Since you don&amp;rsquo;t need to know about JSX, ES2015, or build systems to get started with Vue, it also typically takes developers less than a day reading &lt;a href=&quot;../index&quot;&gt;the guide&lt;/a&gt; to learn enough to build non-trivial applications.</source>
          <target state="translated">Vueの使用を開始するためにJSX、ES2015、またはビルドシステムについて知る必要がないため、開発者は&lt;a href=&quot;../index&quot;&gt;ガイド&lt;/a&gt;を読むのに通常1日もかかりません。</target>
        </trans-unit>
        <trans-unit id="4a6e205b866dd29d282ce270191d3645216b482d" translate="yes" xml:space="preserve">
          <source>Single File Components</source>
          <target state="translated">単一ファイルコンポーネント</target>
        </trans-unit>
        <trans-unit id="5e7f1d7d63552994a465b38c32202f3620abe335" translate="yes" xml:space="preserve">
          <source>Single checkbox, boolean value:</source>
          <target state="translated">単一のチェックボックス、ブール値：</target>
        </trans-unit>
        <trans-unit id="040f06c8b02b9ecd8ce3bcc463d52f44ab71de30" translate="yes" xml:space="preserve">
          <source>Single select:</source>
          <target state="translated">単一選択：</target>
        </trans-unit>
        <trans-unit id="95ef58f9b3d77202b180ce829f19b7953db91e4d" translate="yes" xml:space="preserve">
          <source>Single-file (&lt;code&gt;.vue&lt;/code&gt;) components</source>
          <target state="translated">単一ファイル（ &lt;code&gt;.vue&lt;/code&gt; ）コンポーネント</target>
        </trans-unit>
        <trans-unit id="a0fcc7019dc5bbeb59c13b0247440b91dff10e8e" translate="yes" xml:space="preserve">
          <source>Single-file component filename casing</source>
          <target state="translated">単一ファイルコンポーネントのファイル名の場合</target>
        </trans-unit>
        <trans-unit id="093c716d53dd968ee64e9ba688e8285861d21500" translate="yes" xml:space="preserve">
          <source>Single-file component filename casing &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">単一ファイルコンポーネントの大文字と小文字を区別するファイル名を&lt;sup&gt;強くお勧めします&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="aad2c1946beed7073bd3f80b10b836af1bd801c0" translate="yes" xml:space="preserve">
          <source>Single-file component top-level element order</source>
          <target state="translated">単一ファイルコンポーネント内の最上位要素の順序</target>
        </trans-unit>
        <trans-unit id="369e619c0ac6b0e41c0c5e5672725a1dad22811c" translate="yes" xml:space="preserve">
          <source>Single-file component top-level element order &lt;sup&gt;recommended&lt;/sup&gt;</source>
          <target state="translated">単一ファイルコンポーネントの最上位要素の順序を&lt;sup&gt;推奨&lt;/sup&gt;する</target>
        </trans-unit>
        <trans-unit id="e5ab16f7ba44150cac61508afe92cbd1d1dd294b" translate="yes" xml:space="preserve">
          <source>Single-instance component names</source>
          <target state="translated">単一インスタンスのコンポーネント名</target>
        </trans-unit>
        <trans-unit id="801a9b431b0affdfa69d3dd93084d1b29dae9cb0" translate="yes" xml:space="preserve">
          <source>Single-instance component names &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">単一インスタンスのコンポーネント名を&lt;sup&gt;強くお勧めします&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="b7152342a267362add3c0d7f69f720f7a9c76c9e" translate="yes" xml:space="preserve">
          <source>Size</source>
          <target state="translated">Size</target>
        </trans-unit>
        <trans-unit id="896ccfe8515d070b5a15610d907daecc5196a888" translate="yes" xml:space="preserve">
          <source>Skip compilation for this element and all its children. You can use this for displaying raw mustache tags. Skipping large numbers of nodes with no directives on them can also speed up compilation.</source>
          <target state="translated">この要素とそのすべての子のコンパイルをスキップします。 これを使用して、生の口ひげタグを表示できます。 また、ディレクティブなしで多数のノードをスキップすることにより、コンパイルを高速化できます。</target>
        </trans-unit>
        <trans-unit id="083d20797ac518ecfd2d5802f11e56f053d9b2a3" translate="yes" xml:space="preserve">
          <source>Slot Content</source>
          <target state="translated">スロットの内容</target>
        </trans-unit>
        <trans-unit id="0c1a16e17517d5db584e59f03e5701a1df0aec29" translate="yes" xml:space="preserve">
          <source>Slots</source>
          <target state="translated">Slots</target>
        </trans-unit>
        <trans-unit id="0c05d5215c9958f423cfa89492ade3561c496be1" translate="yes" xml:space="preserve">
          <source>Small, focused computed properties make fewer assumptions about how information will be used, so require less refactoring as requirements change.</source>
          <target state="translated">小さく焦点を絞った計算プロパティは、情報がどのように使用されるかについての仮定を少なくし、要件の変更に伴うリファクタリングの必要性を減らします。</target>
        </trans-unit>
        <trans-unit id="270782c16d7dfcd9bacc30c93f3205da13a192a6" translate="yes" xml:space="preserve">
          <source>So even if we only render elements for a small fraction of users, we have to iterate over the entire list every time we re-render, whether or not the set of active users has changed.</source>
          <target state="translated">したがって、ユーザーの要素の小さなサブセットのみがレンダリングされる場合でも、アクティブなユーザーのセットが変更されたかどうかに関係なく、リストが再レンダリングされるたびにリスト全体を繰り返す必要があります。</target>
        </trans-unit>
        <trans-unit id="9efa5f0263f4584699ee25a6ef7cd96b38af2cbd" translate="yes" xml:space="preserve">
          <source>So far we&amp;rsquo;ve only been binding to simple property keys in our templates. But Vue.js actually supports the full power of JavaScript expressions inside all data bindings:</source>
          <target state="translated">以前は、テンプレートの単純なプロパティキーにのみバインドしていました。 ただし、Vue.jsは、すべてのデータバインディングでJavaScript式のフルパワーをサポートします。</target>
        </trans-unit>
        <trans-unit id="fc43cc8fe805d607917adfb57b267a4c1e366e21" translate="yes" xml:space="preserve">
          <source>So far, we&amp;rsquo;ve managed transitions for:</source>
          <target state="translated">これまで、次の移行を管理しました。</target>
        </trans-unit>
        <trans-unit id="9990ce27d68bc258ecfe618b1e117aba2e010d2d" translate="yes" xml:space="preserve">
          <source>So far, we&amp;rsquo;ve only created components using &lt;code&gt;Vue.component&lt;/code&gt;:</source>
          <target state="translated">これまでのところ、私は &lt;code&gt;Vue.component&lt;/code&gt; を使用してコンポーネントのみを作成しました 。</target>
        </trans-unit>
        <trans-unit id="67796fb098e807812b451996ffa7c37901a92525" translate="yes" xml:space="preserve">
          <source>So far, we&amp;rsquo;ve only seen props listed as an array of strings:</source>
          <target state="translated">これまでのところ、文字列の配列としてリストされた小道具を見てきました。</target>
        </trans-unit>
        <trans-unit id="bcb7e6dc22797e50c31c81c6ca57f0d64cd4b40a" translate="yes" xml:space="preserve">
          <source>So far, you&amp;rsquo;ve seen props passed a static value, like in:</source>
          <target state="translated">これまで、小道具が次のような静的な値を渡すのを見てきました：</target>
        </trans-unit>
        <trans-unit id="bf5ea7f867584dc6f766ba242591c6f576f49d80" translate="yes" xml:space="preserve">
          <source>So far, you&amp;rsquo;ve seen uses of &lt;code&gt;$emit&lt;/code&gt;, listened to with &lt;code&gt;v-on&lt;/code&gt;, but Vue instances also offer other methods in its events interface. We can:</source>
          <target state="translated">これまで、 &lt;code&gt;$emit&lt;/code&gt; listened &lt;code&gt;v-on&lt;/code&gt; の使用を見てきましたが、Vueインスタンスはイベントインターフェイスで他のメソッドも提供します。 私たちはできる：</target>
        </trans-unit>
        <trans-unit id="8d84a44b86d81a516326f9813e2b3977e997a457" translate="yes" xml:space="preserve">
          <source>So this might be a good time to refactor the &lt;code&gt;&amp;lt;blog-post&amp;gt;&lt;/code&gt; component to accept a single &lt;code&gt;post&lt;/code&gt; prop instead:</source>
          <target state="translated">したがって、これは &lt;code&gt;&amp;lt;blog-post&amp;gt;&lt;/code&gt; コンポーネントをリファクタリングし、代わりに単一の &lt;code&gt;post&lt;/code&gt; 小道具を受け入れる良い機会かもしれません：</target>
        </trans-unit>
        <trans-unit id="d6aa2762b60d0919d3cc5d125c99532a28d73b78" translate="yes" xml:space="preserve">
          <source>So what about for when we have a whole list of items we want to render simultaneously, for example with &lt;code&gt;v-for&lt;/code&gt;? In this case, we&amp;rsquo;ll use the &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; component. Before we dive into an example though, there are a few things that are important to know about this component:</source>
          <target state="translated">それで &lt;code&gt;v-for&lt;/code&gt; たとえばv-forを使用して、同時にレンダリングするアイテムのリスト全体がある場合はどうでしょうか？ この場合、 &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; コンポーネントを使用します。 ただし、例を説明する前に、このコンポーネントについて知っておくべき重要なことがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="147f6354f521a67959c12f2f8261d77ce2bb9c39" translate="yes" xml:space="preserve">
          <source>Some HTML elements, such as &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; have restrictions on what elements can appear inside them, and some elements such as &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; can only appear inside certain other elements.</source>
          <target state="translated">&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 、および &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; などの一部のHTML要素には、内部に表示できる要素に制限があり、 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; 、および &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; パーツ要素は、特定の他の要素内に表示されます。</target>
        </trans-unit>
        <trans-unit id="9c0790e8dcd7f3a0c69aa32f511de55c1f1ea0e6" translate="yes" xml:space="preserve">
          <source>Some advantages of this convention:</source>
          <target state="translated">このルールの利点：</target>
        </trans-unit>
        <trans-unit id="2108424fbba417074fadf0d75a3e1edc693ebce6" translate="yes" xml:space="preserve">
          <source>Some argue that you&amp;rsquo;d need to learn an extra DSL (Domain-Specific Language) to be able to write templates - we believe this difference is superficial at best. First, JSX doesn&amp;rsquo;t mean the user doesn&amp;rsquo;t need to learn anything - it&amp;rsquo;s additional syntax on top of plain JavaScript, so it can be easy for someone familiar with JavaScript to learn, but saying it&amp;rsquo;s essentially free is misleading. Similarly, a template is just additional syntax on top of plain HTML and thus has very low learning cost for those who are already familiar with HTML. With the DSL we are also able to help the user get more done with less code (e.g. &lt;code&gt;v-on&lt;/code&gt; modifiers). The same task can involve a lot more code when using plain JSX or render functions.</source>
          <target state="translated">テンプレートを書くには追加のDSL（ドメイン固有の言語）を学ぶ必要があると主張する人もいます。この違いはせいぜい表面的なものだと思います。 まず、JSXはユーザーが何も学ぶ必要がないという意味ではありません。プレーンJavaScriptの追加構文なので、JavaScriptに精通している人なら誰でも簡単に学ぶことができますが、フリーであることが不可欠です。 同様に、テンプレートはプレーンHTMLの単なる追加構文であるため、HTMLに慣れている人にとっては学習コストは非常に低くなります。 DSLを使用すると、ユーザーはより少ないコードでより多くのことを実行できます（ &lt;code&gt;v-on&lt;/code&gt; 修飾子など）。 プレーンJSXまたはレンダリング関数を使用する場合、同じタスクにさらに多くのコードが含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="a9ef7770ac385e4eae53d066a2f3c10a8b6c4ab6" translate="yes" xml:space="preserve">
          <source>Some directives can take an &amp;ldquo;argument&amp;rdquo;, denoted by a colon after the directive name. For example, the &lt;code&gt;v-bind&lt;/code&gt; directive is used to reactively update an HTML attribute:</source>
          <target state="translated">一部のディレクティブは、ディレクティブ名の後にコロンで示される「引数」を取ることができます。 たとえば、 &lt;code&gt;v-bind&lt;/code&gt; ディレクティブは、事後にHTML属性を更新するために使用されます。</target>
        </trans-unit>
        <trans-unit id="09428a807ec781f76bc254d725a9a4e0a2df7f8b" translate="yes" xml:space="preserve">
          <source>Some environments, such as Google Chrome Apps, enforce Content Security Policy (CSP), which prohibits the use of &lt;code&gt;new Function()&lt;/code&gt; for evaluating expressions. The full build depends on this feature to compile templates, so is unusable in these environments.</source>
          <target state="translated">Google Chrome Appsなどの一部の環境は、コンテンツセキュリティポリシー（CSP）の対象です。 これにより、式を評価するための &lt;code&gt;new Function()&lt;/code&gt; 使用が禁止されます。 これらの環境ではテンプレートをコンパイルするためにこの機能に依存しているため、フルビルドは使用できません。</target>
        </trans-unit>
        <trans-unit id="5a2e23d7e711dac515b3913d004594ddb71e0888" translate="yes" xml:space="preserve">
          <source>Some features of Vue exist to accommodate rare edge cases or smoother migrations from a legacy code base. When overused however, they can make your code more difficult to maintain or even become a source of bugs. These rules shine a light on potentially risky features, describing when and why they should be avoided.</source>
          <target state="translated">Vueのいくつかの機能は、まれなエッジケースまたはレガシーコードベースからのスムーズな移行に対応するために存在します。 ただし、使いすぎると、コードの保守が難しくなったり、バグが発生したりする可能性があります。 これらのルールは、潜在的に危険な機能に光を当て、それらを回避するタイミングと理由を説明します。</target>
        </trans-unit>
        <trans-unit id="d10fd1239637017ec222f508352aa84bee00680a" translate="yes" xml:space="preserve">
          <source>Some of Vue&amp;rsquo;s syntax will look very similar to AngularJS (e.g. &lt;code&gt;v-if&lt;/code&gt; vs &lt;code&gt;ng-if&lt;/code&gt;). This is because there were a lot of things that AngularJS got right and these were an inspiration for Vue very early in its development. There are also many pains that come with AngularJS however, where Vue has attempted to offer a significant improvement.</source>
          <target state="translated">Vueの構文の一部は、AngularJSと非常によく似ています（例： &lt;code&gt;v-if&lt;/code&gt; vs &lt;code&gt;ng-if&lt;/code&gt; ）。 これは、AngularJSが多くの点で正しいことであり、開発の非常に早い段階でVueに影響を与えたためです。 しかし、Vueが大幅な改善を試みたAngularJSには大きな苦痛があります。</target>
        </trans-unit>
        <trans-unit id="ba632b521cfadde631ed92ffd03194fe0b0a9806" translate="yes" xml:space="preserve">
          <source>Some of the current hooks have different behavior and there are also a couple new hooks.</source>
          <target state="translated">現在のフックには動作が異なるものと、新しいフックがあるものがあります。</target>
        </trans-unit>
        <trans-unit id="823d42c9ef6472009b44bd254d2588f2ed0ae4c8" translate="yes" xml:space="preserve">
          <source>Some of the most notable differences include:</source>
          <target state="translated">最も注目すべき違いは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="85976567c84aab5c4b5906f9117b4275cd11d741" translate="yes" xml:space="preserve">
          <source>Some of the sections below may also be slightly outdated due to recent updates in React 16+, and we are planning to work with the React community to revamp this section in the near future.</source>
          <target state="translated">以下のセクションの一部は、React 16+の最近の更新のために少し古くなっている可能性があり、Reactコミュニティと協力して、近い将来このセクションを修正します。</target>
        </trans-unit>
        <trans-unit id="e66b9d4602dcda92a8811e8379102ad854fa4037" translate="yes" xml:space="preserve">
          <source>Some plugins provided by Vue.js official plugins such as &lt;code&gt;vue-router&lt;/code&gt; automatically calls &lt;code&gt;Vue.use()&lt;/code&gt; if &lt;code&gt;Vue&lt;/code&gt; is available as a global variable. However in a module environment such as CommonJS, you always need to call &lt;code&gt;Vue.use()&lt;/code&gt; explicitly:</source>
          <target state="translated">&lt;code&gt;vue-router&lt;/code&gt; など、Vue.jsの公式プラグインによって提供される一部のプラグインは、 &lt;code&gt;Vue&lt;/code&gt; がグローバル変数として使用可能な場合、自動的に &lt;code&gt;Vue.use()&lt;/code&gt; 呼び出します。 ただし、CommonJSなどのモジュール環境では、 &lt;code&gt;Vue.use()&lt;/code&gt; を常に明示的に呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="9fe62eac7aa92f9e248fd4f6cf8a8c9817319b5d" translate="yes" xml:space="preserve">
          <source>Some users have enjoyed using two-way filters with &lt;code&gt;v-model&lt;/code&gt; to create interesting inputs with very little code. While &lt;em&gt;seemingly&lt;/em&gt; simple however, two-way filters can also hide a great deal of complexity - and even encourage poor UX by delaying state updates. Instead, components wrapping an input are recommended as a more explicit and feature-rich way of creating custom inputs.</source>
          <target state="translated">一部のユーザーは、 &lt;code&gt;v-model&lt;/code&gt; と双方向フィルターを使用して、非常に少ないコードで興味深い入力を作成することを楽しんでいます。 ただし、 &lt;em&gt;一見&lt;/em&gt;単純に&lt;em&gt;見えますが&lt;/em&gt; 、双方向フィルターはかなりの複雑さを隠しており、状態の更新を遅らせることで、UXの低下にも貢献します。 代わりに、入力をラップするコンポーネントは、カスタム入力を作成するための明示的かつ機能豊富な方法として推奨されます。</target>
        </trans-unit>
        <trans-unit id="a20659b05e332a0ae32621debfebacc5d1ababa5" translate="yes" xml:space="preserve">
          <source>Sometimes this works great, like when transitioning items are absolutely positioned on top of each other:</source>
          <target state="translated">これは、移行アイテムが互いの上に絶対的に配置されているかのように、うまく機能します。</target>
        </trans-unit>
        <trans-unit id="f26fd8bf6b50010b5da928fa27ec1a70c263cd9c" translate="yes" xml:space="preserve">
          <source>Sometimes we also need to access the original DOM event in an inline statement handler. You can pass it into a method using the special &lt;code&gt;$event&lt;/code&gt; variable:</source>
          <target state="translated">場合によっては、インラインステートメントハンドラーで元のDOMイベントにアクセスする必要もあります。 特別な &lt;code&gt;$event&lt;/code&gt; 変数を使用してメソッドに渡すことができます：</target>
        </trans-unit>
        <trans-unit id="a58007ff3d542a5e64e8ab0473747490736edba5" translate="yes" xml:space="preserve">
          <source>Sometimes we want to display a filtered or sorted version of an array without actually mutating or resetting the original data. In this case, you can create a computed property that returns the filtered or sorted array.</source>
          <target state="translated">元のデータを実際に変更またはリセットせずに、フィルター処理またはソートされた配列のバージョンを表示したい場合があります。 この場合、フィルターされた配列または並べ替えられた配列を返す計算プロパティを作成できます。</target>
        </trans-unit>
        <trans-unit id="bb4776e0f84b8cab0978edcc2a16ccf37eb32d43" translate="yes" xml:space="preserve">
          <source>Sometimes you may want to assign a number of new properties to an existing object, for example using &lt;code&gt;Object.assign()&lt;/code&gt; or &lt;code&gt;_.extend()&lt;/code&gt;. In such cases, you should create a fresh object with properties from both objects. So instead of:</source>
          <target state="translated">&lt;code&gt;Object.assign()&lt;/code&gt; または &lt;code&gt;_.extend()&lt;/code&gt; を使用して、既存のオブジェクトにいくつかの新しいプロパティを割り当てることができます。 このような場合、両方のオブジェクトのプロパティを使用して新しいオブジェクトを作成する必要があります。 の代わりに：</target>
        </trans-unit>
        <trans-unit id="4216179a7f142347ead5e8b4c8a44ddd1938267a" translate="yes" xml:space="preserve">
          <source>Sometimes you may want to assign a number of properties to an existing object, for example using &lt;code&gt;Object.assign()&lt;/code&gt; or &lt;code&gt;_.extend()&lt;/code&gt;. However, new properties added to the object will not trigger changes. In such cases, create a fresh object with properties from both the original object and the mixin object:</source>
          <target state="translated">&lt;code&gt;Object.assign()&lt;/code&gt; または &lt;code&gt;_.extend()&lt;/code&gt; を使用するなどして、既存のオブジェクトにいくつかのプロパティを割り当てることができます。 ただし、オブジェクトに追加された新しいプロパティは変更をトリガーしません。 そのような場合は、元のオブジェクトとミックスインオブジェクトの両方のプロパティを持つ新しいオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="4a3e5c479936fa0c0c3ae63c92af5bdeccbe0976" translate="yes" xml:space="preserve">
          <source>Sometimes, it&amp;rsquo;s useful for slot content to have access to data only available in the child component. For example, imagine a &lt;code&gt;&amp;lt;current-user&amp;gt;&lt;/code&gt; component with the following template:</source>
          <target state="translated">スロットのコンテンツが、子コンポーネントでのみ使用可能なデータにアクセスすると便利な場合があります。 たとえば、次のテンプレートを持つ &lt;code&gt;&amp;lt;current-user&amp;gt;&lt;/code&gt; コンポーネントを想像してください。</target>
        </trans-unit>
        <trans-unit id="d2dd5e9a7fd5d98bf25e0a4d4fb18f9f4c3db2f1" translate="yes" xml:space="preserve">
          <source>Sometimes, it&amp;rsquo;s useful to dynamically switch between components, like in a tabbed interface:</source>
          <target state="translated">タブ付きインターフェイスなど、コンポーネントを動的に切り替えると便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="878866be830f3d4c0492c7b15ce7d3313f921fc8" translate="yes" xml:space="preserve">
          <source>Soup &lt;em&gt;of the&lt;/em&gt; day</source>
          <target state="translated">本日のスープ</target>
        </trans-unit>
        <trans-unit id="9898b37c34a88e00f23e82b5e3dc9a1701903a0c" translate="yes" xml:space="preserve">
          <source>Special Attributes</source>
          <target state="translated">特別な属性</target>
        </trans-unit>
        <trans-unit id="c1844df643c3c6b29d9ebd395e5456144c913b68" translate="yes" xml:space="preserve">
          <source>Special Attributes - ref</source>
          <target state="translated">特別な属性-ref</target>
        </trans-unit>
        <trans-unit id="7f375124a7e84608fdea56b183bf085ef84dd0dd" translate="yes" xml:space="preserve">
          <source>Specifies a default value for the prop. If the prop is not passed, this value will be used instead. Object or array defaults must be returned from a factory function.</source>
          <target state="translated">プロップのデフォルト値を指定します。 小道具が渡されない場合、この値が代わりに使用されます。 オブジェクトまたは配列のデフォルトは、ファクトリ関数から返される必要があります。</target>
        </trans-unit>
        <trans-unit id="3d419b352796d39146919ef5966306201da0baac" translate="yes" xml:space="preserve">
          <source>Specify the parent instance for the instance to be created. Establishes a parent-child relationship between the two. The parent will be accessible as &lt;code&gt;this.$parent&lt;/code&gt; for the child, and the child will be pushed into the parent&amp;rsquo;s &lt;code&gt;$children&lt;/code&gt; array.</source>
          <target state="translated">作成するインスタンスの親インスタンスを指定します。 2つの間に親子関係を確立します。 &lt;code&gt;this.$parent&lt;/code&gt; は子のthisです。 $ parentとしてアクセスでき、 &lt;code&gt;$children&lt;/code&gt; は親の$ children配列にプッシュされます。</target>
        </trans-unit>
        <trans-unit id="e4de7be6dcaca74a1df3b6f74eed72c7caf49130" translate="yes" xml:space="preserve">
          <source>Staggering List Transitions</source>
          <target state="translated">巨大なリスト遷移</target>
        </trans-unit>
        <trans-unit id="5ba91e4b27bd154b6feecd545db4023c8e7c12d0" translate="yes" xml:space="preserve">
          <source>Start by running the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on a current project. We&amp;rsquo;ve carefully minified and compressed a senior Vue dev into a simple command line interface. Whenever they recognize an obsolete feature, they&amp;rsquo;ll let you know, offer suggestions, and provide links to more info.</source>
          <target state="translated">現在のプロジェクトで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行することから始めます。 上級Vue開発者を慎重に縮小および圧縮して、シンプルなコマンドラインインターフェイスにします。 廃止された機能を認識するたびに、通知、提案、詳細情報へのリンクを提供します。</target>
        </trans-unit>
        <trans-unit id="5fcf8af955dfbcfec984375c6e8f6a528e65233d" translate="yes" xml:space="preserve">
          <source>Starting in 2.3.0+ you can provide an array of multiple (prefixed) values to a style property, for example:</source>
          <target state="translated">2.3.0以降、次のように、スタイルプロパティに複数の（プレフィックス付き）値の配列を提供できます。</target>
        </trans-unit>
        <trans-unit id="9ba53e05f135de31a97be4f79621e7c2bfae116b" translate="yes" xml:space="preserve">
          <source>Starting in 2.4.0+, &lt;code&gt;v-on&lt;/code&gt; also supports binding to an object of event/listener pairs without an argument. Note when using the object syntax, it does not support any modifiers.</source>
          <target state="translated">2.4.0以降、 &lt;code&gt;v-on&lt;/code&gt; は、イベント/リスナーのペアを引数なしのオブジェクトにバインドすることもサポートしています。 オブジェクト構文を使用する場合、修飾子をサポートしないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="9b9230ebf8a27183774b5eb88b79650092ee23d2" translate="yes" xml:space="preserve">
          <source>Starting in version 2.6.0, it is also possible to use a JavaScript expression in a directive argument by wrapping it with square brackets:</source>
          <target state="translated">バージョン2.6.0以降では、角括弧で囲むことにより、ディレクティブ引数でJavaScript式を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="bfa146787ba4b5ec0af7e28c9b9db98dcdf2cd1c" translate="yes" xml:space="preserve">
          <source>State Management</source>
          <target state="translated">状態管理</target>
        </trans-unit>
        <trans-unit id="d5d64221ddf91f88df67cce91813f4262eb7edaf" translate="yes" xml:space="preserve">
          <source>State Transitions</source>
          <target state="translated">状態遷移</target>
        </trans-unit>
        <trans-unit id="a872ca8fe22c7e62b5337472cd220dc9385362c8" translate="yes" xml:space="preserve">
          <source>Stop listening for an event with &lt;code&gt;$off(eventName, eventHandler)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$off(eventName, eventHandler)&lt;/code&gt; イベントのリッスンを停止します</target>
        </trans-unit>
        <trans-unit id="a59e5fba28ea5c4503821b338479233b19afe716" translate="yes" xml:space="preserve">
          <source>Store&amp;rsquo;s Event Emitter &lt;sup&gt;removed&lt;/sup&gt;</source>
          <target state="translated">ストアイベントエミッターを&lt;sup&gt;削除&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="91315c1968e95b4caef2bb0299209f84b45e1fa3" translate="yes" xml:space="preserve">
          <source>String templates (e.g. &lt;code&gt;template: '...'&lt;/code&gt;)</source>
          <target state="translated">文字列テンプレート（例： &lt;code&gt;template: '...'&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="74b4f2ed89813f9a73f7270d61c097ff9c059dd6" translate="yes" xml:space="preserve">
          <source>Style Guide</source>
          <target state="translated">スタイルガイド</target>
        </trans-unit>
        <trans-unit id="93b9066aa73ddae63c26874719afa6da8fe21b7f" translate="yes" xml:space="preserve">
          <source>Style Guide: Priority A: Essential</source>
          <target state="translated">スタイルガイド：優先度A：必須</target>
        </trans-unit>
        <trans-unit id="43212530e7b38b61ce475ee08dd6944866d5239c" translate="yes" xml:space="preserve">
          <source>Style Guide: Priority B: Strongly Recommended</source>
          <target state="translated">スタイルガイド：優先度B：強くお勧めします</target>
        </trans-unit>
        <trans-unit id="dc97fc3044903277305bdcda1967fb4d1dab822e" translate="yes" xml:space="preserve">
          <source>Style Guide: Priority C: Recommended</source>
          <target state="translated">スタイルガイド：優先度C：推奨</target>
        </trans-unit>
        <trans-unit id="b9a479a71d55ce0478bf03634c2c6dce93bce7d7" translate="yes" xml:space="preserve">
          <source>Style Guide: Priority D: Use with Caution</source>
          <target state="translated">スタイルガイド：優先度D：注意して使用する</target>
        </trans-unit>
        <trans-unit id="d999535d9e96f490d6db66310b5ab700b8118ee7" translate="yes" xml:space="preserve">
          <source>Style Guide: Rule Categories</source>
          <target state="translated">スタイルガイド：ルールカテゴリ</target>
        </trans-unit>
        <trans-unit id="fbbf610d0cedad761fd69b3fc9625e259e3102c5" translate="yes" xml:space="preserve">
          <source>Suppress all Vue logs and warnings.</source>
          <target state="translated">すべてのVueログとアラートを抑制します。</target>
        </trans-unit>
        <trans-unit id="3f84ef531f9db996694ad09a8fdddbca1440577e" translate="yes" xml:space="preserve">
          <source>Symbol</source>
          <target state="translated">Symbol</target>
        </trans-unit>
        <trans-unit id="ed4b8354b13fc6485ba3014a73af2e474df2ab5c" translate="yes" xml:space="preserve">
          <source>System Modifier Keys</source>
          <target state="translated">システム修飾子キー</target>
        </trans-unit>
        <trans-unit id="d3c9825399d84e5c262586eb382db07595391d25" translate="yes" xml:space="preserve">
          <source>Template Compilation</source>
          <target state="translated">テンプレートのコンパイル</target>
        </trans-unit>
        <trans-unit id="efb3147068725b40c3436e7283942bba6c112bbf" translate="yes" xml:space="preserve">
          <source>Template Syntax</source>
          <target state="translated">テンプレートの構文</target>
        </trans-unit>
        <trans-unit id="a60e21f3a907038b2e4d24850447a7990f71ed0d" translate="yes" xml:space="preserve">
          <source>Template expressions are sandboxed and only have access to a &lt;a href=&quot;https://github.com/vuejs/vue/blob/v2.6.10/src/core/instance/proxy.js#L9&quot;&gt;whitelist of globals&lt;/a&gt; such as &lt;code&gt;Math&lt;/code&gt; and &lt;code&gt;Date&lt;/code&gt;. You should not attempt to access user defined globals in template expressions.</source>
          <target state="translated">テンプレート式はサンドボックス化されており、 &lt;code&gt;Math&lt;/code&gt; や &lt;code&gt;Date&lt;/code&gt; などの&lt;a href=&quot;https://github.com/vuejs/vue/blob/v2.6.10/src/core/instance/proxy.js#L9&quot;&gt;グローバルホワイトリストに&lt;/a&gt;のみアクセスできます。 テンプレート式でユーザー定義のグローバルにアクセスしようとしないでください。</target>
        </trans-unit>
        <trans-unit id="f25b700ed9f092123a43acb205a6869342cf9dd6" translate="yes" xml:space="preserve">
          <source>Templates</source>
          <target state="translated">Templates</target>
        </trans-unit>
        <trans-unit id="a55a275aa676930d9258569485d5b38eb1196630" translate="yes" xml:space="preserve">
          <source>Terms</source>
          <target state="translated">Terms</target>
        </trans-unit>
        <trans-unit id="c3328c39b0e29f78e9ff45db674248b1d245887d" translate="yes" xml:space="preserve">
          <source>Text</source>
          <target state="translated">Text</target>
        </trans-unit>
        <trans-unit id="03aaa3887a5a2deee792941da96ae7dda7d74089" translate="yes" xml:space="preserve">
          <source>Thanks to Vue&amp;rsquo;s Reactivity system, it always knows when to update (if you use it correctly). There are edge cases, however, when you might want to force an update, despite the fact that no reactive data has changed. Then there are other cases when you might want to prevent unnecessary updates.</source>
          <target state="translated">Vueのリアクティブシステムのおかげで、いつ更新するかが正しくわかります（正しく使用した場合）。 ただし、リアクティブデータが変更されていないにもかかわらず、強制的に更新したい場合があります。 その後、不要な更新を防止することができます。</target>
        </trans-unit>
        <trans-unit id="b5627556ef42d923efe566603e16cd6d339c54b6" translate="yes" xml:space="preserve">
          <source>Thanks to the &lt;code&gt;v-on:enlarge-text=&quot;postFontSize += 0.1&quot;&lt;/code&gt; listener, the parent will receive the event and update &lt;code&gt;postFontSize&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;v-on:enlarge-text=&quot;postFontSize += 0.1&quot;&lt;/code&gt; 親はイベントを受信し、v-onのおかげで &lt;code&gt;postFontSize&lt;/code&gt; 値を更新します。large -text= &quot;postFontSize + = 0.1&quot;リスナー。</target>
        </trans-unit>
        <trans-unit id="36e5dbb5155a7f2f18ff2f7f92eeacd1bc83b650" translate="yes" xml:space="preserve">
          <source>That means the value of &lt;code&gt;v-slot&lt;/code&gt; can actually accept any valid JavaScript expression that can appear in the argument position of a function definition. So in supported environments (&lt;a href=&quot;single-file-components&quot;&gt;single-file components&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Browser_compatibility&quot;&gt;modern browsers&lt;/a&gt;), you can also use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring&quot;&gt;ES2015 destructuring&lt;/a&gt; to pull out specific slot props, like so:</source>
          <target state="translated">つまり、 &lt;code&gt;v-slot&lt;/code&gt; の値は、関数定義の引数の位置に現れる可能性のある有効なJavaScript式を実際に受け入れることができます。 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring&quot;&gt;その&lt;/a&gt;ため、サポートされている環境（ &lt;a href=&quot;single-file-components&quot;&gt;単一ファイルコンポーネント&lt;/a&gt;または&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Browser_compatibility&quot;&gt;最新のブラウザー&lt;/a&gt; ）では、ES2015構造化を使用して、次のように特定のスロットポストを引き出すこともできます。</target>
        </trans-unit>
        <trans-unit id="bcb7688f15ef595e1970dc731883ce107eed33d5" translate="yes" xml:space="preserve">
          <source>That means this element:</source>
          <target state="translated">それはこの要素を意味します：</target>
        </trans-unit>
        <trans-unit id="e26ac9d99d2de3a31a44d33d135f52e40dec965b" translate="yes" xml:space="preserve">
          <source>That said, it would probably make a better comparison between Vue core and Ember&amp;rsquo;s &lt;a href=&quot;https://guides.emberjs.com/v2.10.0/templates/handlebars-basics/&quot;&gt;templating&lt;/a&gt; and &lt;a href=&quot;https://guides.emberjs.com/v2.10.0/object-model/&quot;&gt;object model&lt;/a&gt; layers:</source>
          <target state="translated">そうは言っても、おそらくVue CoreとEmberの&lt;a href=&quot;https://guides.emberjs.com/v2.10.0/templates/handlebars-basics/&quot;&gt;テンプレート&lt;/a&gt;および&lt;a href=&quot;https://guides.emberjs.com/v2.10.0/object-model/&quot;&gt;オブジェクトモデル&lt;/a&gt;レイヤーをよりよく比較するでしょう。</target>
        </trans-unit>
        <trans-unit id="fd91ee6e59ac928406a857815fec4a8fd6adac41" translate="yes" xml:space="preserve">
          <source>That slot has access to the same instance properties (i.e. the same &amp;ldquo;scope&amp;rdquo;) as the rest of the template. The slot does &lt;strong&gt;not&lt;/strong&gt; have access to &lt;code&gt;&amp;lt;navigation-link&amp;gt;&lt;/code&gt;&amp;lsquo;s scope. For example, trying to access &lt;code&gt;url&lt;/code&gt; would not work:</source>
          <target state="translated">そのスロットは、テンプレートの残りの部分と同じインスタンスプロパティ（つまり、同じ「スコープ」）にアクセスできます。 スロットは &lt;code&gt;&amp;lt;navigation-link&amp;gt;&lt;/code&gt; のスコープにアクセスできません。 たとえば、 &lt;code&gt;url&lt;/code&gt; にアクセスしようとしても機能しません。</target>
        </trans-unit>
        <trans-unit id="459dd83f2362d8a07c853704c9fdaa721e9d7d51" translate="yes" xml:space="preserve">
          <source>That template doesn&amp;rsquo;t feel great. It&amp;rsquo;s not only verbose, but we&amp;rsquo;re duplicating &lt;code&gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&lt;/code&gt; for every heading level and will have to do the same when we add the anchor element.</source>
          <target state="translated">そのテンプレートは素晴らしい気分ではありません。 これは冗長なだけでなく、すべての見出しレベルで &lt;code&gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&lt;/code&gt; を複製するため、アンカー要素を追加するときにも同じことを行う必要があります。</target>
        </trans-unit>
        <trans-unit id="f0e76918c986bcb84adf08fee89b468d3a1fda00" translate="yes" xml:space="preserve">
          <source>That won&amp;rsquo;t work, however, because only the &lt;code&gt;&amp;lt;current-user&amp;gt;&lt;/code&gt; component has access to the &lt;code&gt;user&lt;/code&gt; and the content we&amp;rsquo;re providing is rendered in the parent.</source>
          <target state="translated">ただし、 &lt;code&gt;&amp;lt;current-user&amp;gt;&lt;/code&gt; コンポーネントのみがユーザーにアクセスでき、そのコンポーネントが提供するコンテンツは親でレンダリングされるため、これは機能しません。</target>
        </trans-unit>
        <trans-unit id="f7e6eaf815a0b389b506fd9203ee98688ac385cc" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to know about DOM template parsing caveats for now &amp;ndash; and actually, the end of Vue&amp;rsquo;s &lt;em&gt;Essentials&lt;/em&gt;. Congratulations! There&amp;rsquo;s still more to learn, but first, we recommend taking a break to play with Vue yourself and build something fun.</source>
          <target state="translated">現時点でDOMテンプレートの解析に関する考慮事項について知っておく必要があるのはそれだけです。 実際、これはVue &lt;em&gt;Essentials&lt;/em&gt; &lt;em&gt;の&lt;/em&gt;終わりです。 おめでとうございます！ 学ぶべきことはまだたくさんありますが、最初に休憩してVueをプレイし、楽しむことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="e65f913a2b8930db25e11b615901938e35677612" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to know about custom component events for now, but once you&amp;rsquo;ve finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;components-custom-events&quot;&gt;Custom Events&lt;/a&gt;.</source>
          <target state="translated">今のところカスタムコンポーネントイベントについて知っておく必要があるのはこれだけですが、このページを読んで満足している場合は、後で戻って&lt;a href=&quot;components-custom-events&quot;&gt;カスタムイベントの&lt;/a&gt;完全なガイドを読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="814dc84544fcf8f9ba3af47bc369c70717b8fdfa" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to know about dynamic components for now, but once you&amp;rsquo;ve finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;components-dynamic-async&quot;&gt;Dynamic &amp;amp; Async Components&lt;/a&gt;.</source>
          <target state="translated">今のところ動的コンポーネントについて知っておく必要があるのはこれだけですが、このページを読んで満足したら、後で戻ってDynamic＆Async Componentsの完全なガイドを読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="1370785d9557daacd2793450c22d6061fa0adbc6" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to know about props for now, but once you&amp;rsquo;ve finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;components-props&quot;&gt;Props&lt;/a&gt;.</source>
          <target state="translated">今のところ小道具について知る必要があるのはこれだけですが、このページを読んで満足したら、後で戻って&lt;a href=&quot;components-props&quot;&gt;小道具&lt;/a&gt;に関する完全なガイドを読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="1e701db7e6d05f9288626f8d97a85fc554f9593e" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to know about registration for now, but once you&amp;rsquo;ve finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;components-registration&quot;&gt;Component Registration&lt;/a&gt;.</source>
          <target state="translated">今のところ登録について知っておく必要があるのはこれだけですが、このページを読んで内容に満足したら、後で戻って&lt;a href=&quot;components-registration&quot;&gt;コンポーネント登録&lt;/a&gt;に関する完全なガイドを読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="8e7ac0de9bc7b2393fad83ed8e57aa35094e7cc2" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to know about slots for now, but once you&amp;rsquo;ve finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;components-slots&quot;&gt;Slots&lt;/a&gt;.</source>
          <target state="translated">今のところスロットについて知っておく必要があるのはこれだけですが、このページを読んで内容に満足したら、後で戻ってSlotsの完全なガイドを読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6f39b1bdd26be7312e776a774c103e8b83e7cb1a" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s why for any complex logic, you should use a &lt;strong&gt;computed property&lt;/strong&gt;.</source>
          <target state="translated">したがって、複雑なロジックでは、 &lt;strong&gt;計算プロパティを&lt;/strong&gt;使用する必要があり&lt;strong&gt;ます&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="3b16487797e90834fa5c92964e14dabbe10606c8" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s why instead, we recommend emitting events in the pattern of &lt;code&gt;update:myPropName&lt;/code&gt;. For example, in a hypothetical component with a &lt;code&gt;title&lt;/code&gt; prop, we could communicate the intent of assigning a new value with:</source>
          <target state="translated">したがって、代わりに &lt;code&gt;update:myPropName&lt;/code&gt; パターンでイベントを公開することをお勧めします。 たとえば、 &lt;code&gt;title&lt;/code&gt; propを持つ仮想コンポーネントは、次のように新しい値を割り当てる意思を示すことができます。</target>
        </trans-unit>
        <trans-unit id="996c0c7a918cb9833eb237973fce54baee6b3199" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s why there&amp;rsquo;s a &lt;a href=&quot;https://github.com/vuejs/jsx&quot;&gt;Babel plugin&lt;/a&gt; to use JSX with Vue, getting us back to a syntax that&amp;rsquo;s closer to templates:</source>
          <target state="translated">VueでJSXを使用し、テンプレートのような構文に戻す&lt;a href=&quot;https://github.com/vuejs/jsx&quot;&gt;Babelプラグイン&lt;/a&gt;があります。</target>
        </trans-unit>
        <trans-unit id="ad7c55b719b44c49b49edeaa4e2789ec22bd2ca2" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s why we offer a full system for rapid Vue.js development. &lt;a href=&quot;https://github.com/vuejs/vue-cli&quot;&gt;Vue CLI&lt;/a&gt; aims to be the standard tooling baseline for the Vue ecosystem. It ensures the various build tools work smoothly together with sensible defaults so you can focus on writing your app instead of spending hours wrangling with configurations. At the same time, it still offers the flexibility to tweak the configuration of each tool to specific needs.</source>
          <target state="translated">それが、Vue.jsを迅速に開発するための完全なシステムを提供する理由です。 &lt;a href=&quot;https://github.com/vuejs/vue-cli&quot;&gt;Vue CLI&lt;/a&gt;は、Vueエコシステムの標準ツールベースラインを目指しています。 さまざまなビルドツールが適切なデフォルトでシームレスに機能するため、構成に時間を費やすのではなく、アプリのビルドに集中できます。 同時に、各ツールの構成を特定のニーズに合わせて微調整する柔軟性を提供します。</target>
        </trans-unit>
        <trans-unit id="e8054cccceec827f8cba34b7a1b6bd02a65cd67d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;guide/installation&quot;&gt;Installation&lt;/a&gt; page provides more options of installing Vue. Note: We &lt;strong&gt;do not&lt;/strong&gt; recommend that beginners start with &lt;code&gt;vue-cli&lt;/code&gt;, especially if you are not yet familiar with Node.js-based build tools.</source>
          <target state="translated">&lt;a href=&quot;guide/installation&quot;&gt;インストール&lt;/a&gt;ページには、Vueをインストールするためのその他のオプションがあります。 注：特にNode.jsベースのビルドツールを初めて使用する場合は、初心者が &lt;code&gt;vue-cli&lt;/code&gt; で始めることはお勧め&lt;strong&gt;し&lt;/strong&gt;ません。</target>
        </trans-unit>
        <trans-unit id="a5ab4cb7708169e37819b6bac8b1dd32c12097a8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.npmjs.com/package/pluralize&quot;&gt;pluralize&lt;/a&gt; package on NPM serves this purpose nicely, but if you only want to pluralize a specific word or want to have special output for cases like &lt;code&gt;0&lt;/code&gt;, then you can also easily define your own pluralize functions. For example:</source>
          <target state="translated">NPMの&lt;a href=&quot;https://www.npmjs.com/package/pluralize&quot;&gt;複数形&lt;/a&gt;パッケージはこの目的に適していますが、特定の単語のみを複数形にしたい場合、または &lt;code&gt;0&lt;/code&gt; などの場合に特別な出力が必要な場合は、独自の複数形関数も簡単に定義できます。 例えば：</target>
        </trans-unit>
        <trans-unit id="05878157178d05a4e01a1c89173d306a9458b9ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$route&lt;/code&gt; property is now reactive, so you can use a watcher to react to route changes, like this:</source>
          <target state="translated">&lt;code&gt;$route&lt;/code&gt; プロパティがリアクティブになったので、ウォッチャーを使用して、次のようにルートの変更に応答できます。</target>
        </trans-unit>
        <trans-unit id="26e5d2730ae73e0e0de2df953cf2ee3a5fad3d02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; will be the actual link (and will get the correct href), but the active class will be applied to the outer &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; は実際のリンク（正しいhrefを取得）ですが、アクティブなクラスは外側の &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; に適用されます。</target>
        </trans-unit>
        <trans-unit id="a1c768384d9ec752c708894881ada4881202a8fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; will not be visible until the compilation is done.</source>
          <target state="translated">&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; は、コンパイルが完了するまで表示されません。</target>
        </trans-unit>
        <trans-unit id="6726c886cd7d1313872ea34b72b56e9373d396cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;google-map&amp;gt;&lt;/code&gt; component might define a &lt;code&gt;map&lt;/code&gt; property that all subcomponents need access to. In this case &lt;code&gt;&amp;lt;google-map-markers&amp;gt;&lt;/code&gt; might want to access that map with something like &lt;code&gt;this.$parent.getMap&lt;/code&gt;, in order to add a set of markers to it. You can see this pattern &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/ttzutdxh/&quot;&gt;in action here&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;google-map&amp;gt;&lt;/code&gt; コンポーネントは、すべてのサブコンポーネントがアクセスする必要がある &lt;code&gt;map&lt;/code&gt; プロパティを定義できます。 この場合、 &lt;code&gt;&amp;lt;google-map-markers&amp;gt;&lt;/code&gt; は &lt;code&gt;this.$parent.getMap&lt;/code&gt; などを使用してマップにアクセスし、一連のマーカーを追加できます。 このパターンがどのように機能するかは、 &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/ttzutdxh/&quot;&gt;ここで&lt;/a&gt;確認できます 。</target>
        </trans-unit>
        <trans-unit id="780604d1e5198fdcc94939f3a317c58b142346c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; component has another trick up its sleeve. It can not only animate entering and leaving, but also changes in position. The only new concept you need to know to use this feature is the addition of &lt;strong&gt;the &lt;code&gt;v-move&lt;/code&gt; class&lt;/strong&gt;, which is added when items are changing positions. Like the other classes, its prefix will match the value of a provided &lt;code&gt;name&lt;/code&gt; attribute and you can also manually specify a class with the &lt;code&gt;move-class&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; コンポーネントには別のトリックがあります。 入場と退場をアニメーション化できるだけでなく、位置を変更することもできます。 この機能を使用するために知っておく必要がある唯一の新しい概念は、アイテムが位置を変更したときに追加される&lt;strong&gt; &lt;code&gt;v-move&lt;/code&gt; クラスの&lt;/strong&gt;追加です。 他のクラスと同様に、プレフィックスは指定された &lt;code&gt;name&lt;/code&gt; 属性の値と一致します。 move-class属性を使用して、 &lt;code&gt;move-class&lt;/code&gt; を手動で指定することもできます。</target>
        </trans-unit>
        <trans-unit id="606648505385790cf915adeb72e619634753fda2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.camel&lt;/code&gt; modifier allows camelizing a &lt;code&gt;v-bind&lt;/code&gt; attribute name when using in-DOM templates, e.g. the SVG &lt;code&gt;viewBox&lt;/code&gt; attribute:</source>
          <target state="translated">&lt;code&gt;.camel&lt;/code&gt; 修飾子を使用すると、SVG viewBox属性などのDOMでテンプレートを使用するときに、属性名を &lt;code&gt;viewBox&lt;/code&gt; &lt;code&gt;v-bind&lt;/code&gt; できます。</target>
        </trans-unit>
        <trans-unit id="b9f947cb89a1b3d04c28ecc1fa1b5146bc308109" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.exact&lt;/code&gt; modifier allows control of the exact combination of system modifiers needed to trigger an event.</source>
          <target state="translated">&lt;code&gt;.exact&lt;/code&gt; 修飾子を使用すると、イベントをトリガーするために必要なシステム修飾子の正確な組み合わせを制御できます。</target>
        </trans-unit>
        <trans-unit id="71dc161e02d764cb61bccce7f7216e558eea41ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.literal&lt;/code&gt; modifier has been removed, as the same can be easily achieved by providing a string literal as the value.</source>
          <target state="translated">&lt;code&gt;.literal&lt;/code&gt; 修飾子は削除されました。 これは、値として文字列リテラルを提供することで簡単にこれを実現できるためです。</target>
        </trans-unit>
        <trans-unit id="447f18c9c1ff6544a5bf8da7ab660de9c45d00c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.passive&lt;/code&gt; modifier is especially useful for improving performance on mobile devices.</source>
          <target state="translated">&lt;code&gt;.passive&lt;/code&gt; 修飾子は、モバイルデバイスのパフォーマンスを向上させるのに特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="21fd043aec56c5be7446f861bc772ebd8e753810" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.sync&lt;/code&gt; modifier can also be used with &lt;code&gt;v-bind&lt;/code&gt; when using an object to set multiple props at once:</source>
          <target state="translated">&lt;code&gt;.sync&lt;/code&gt; 修飾子は、オブジェクトを使用して複数の小道具を一度に設定するときにv-bindでも使用できます。</target>
        </trans-unit>
        <trans-unit id="c3321d11e9ef44eba8d358a3614e37323b934b17" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;events&lt;/code&gt; option has been removed. Event handlers should now be registered in the &lt;code&gt;created&lt;/code&gt; hook instead. Check out the &lt;a href=&quot;#dispatch-and-broadcast-replaced&quot;&gt;&lt;code&gt;$dispatch&lt;/code&gt; and &lt;code&gt;$broadcast&lt;/code&gt; migration guide&lt;/a&gt; for a detailed example.</source>
          <target state="translated">&lt;code&gt;events&lt;/code&gt; オプションは削除されました。 代わりに、 &lt;code&gt;created&lt;/code&gt; フックにイベントハンドラーを登録する必要があります。 詳細な例については、 &lt;a href=&quot;#dispatch-and-broadcast-replaced&quot;&gt; &lt;code&gt;$dispatch&lt;/code&gt; および &lt;code&gt;$broadcast&lt;/code&gt; 移行ガイド&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="2b7c4b5febaa054c2d70f2972911d81840dc234e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;in-out&lt;/code&gt; mode isn&amp;rsquo;t used as often, but can sometimes be useful for a slightly different transition effect. Let&amp;rsquo;s try combining it with the slide-fade transition we worked on earlier:</source>
          <target state="translated">&lt;code&gt;in-out&lt;/code&gt; モードはあまり使用されませんが、わずかに異なるトランジションエフェクトに役立ちます。 それを以前に取り組んだスライドフェードトランジションと組み合わせてみましょう。</target>
        </trans-unit>
        <trans-unit id="7bb2562df8be00932287fedd76a233d44e708651" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; props allow components to be conditionally cached. Both props can be a comma-delimited string, a RegExp or an Array:</source>
          <target state="translated">&lt;code&gt;include&lt;/code&gt; および &lt;code&gt;exclude&lt;/code&gt; プロパティにより、コンポーネントを条件付きでキャッシュできます。 両方のプロパティは、コンマ区切りの文字列、RegExp、または配列にすることができます。</target>
        </trans-unit>
        <trans-unit id="4cd088c8b9dd70d20f540d863e4827655ef4afc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inject&lt;/code&gt; option should be either:</source>
          <target state="translated">&lt;code&gt;inject&lt;/code&gt; オプションは次のいずれかでなければなりません。</target>
        </trans-unit>
        <trans-unit id="582a8cbd2aa999f85f97f4835ddb07fec729cd60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; special attribute is primarily used as a hint for Vue&amp;rsquo;s virtual DOM algorithm to identify VNodes when diffing the new list of nodes against the old list. Without keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed/destroyed.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 特別な属性は、主にVueの仮想DOMアルゴリズムが新しいリストノードと古いリストを比較するときにVNodeを識別するためのヒントとして使用されます。 キーがない場合、Vueは要素の移動を最小化するアルゴリズムを使用し、可能な限り同じタイプの要素にパッチを当て/再利用しようとします。 キーを使用すると、キーの並べ替えに基づいて要素が並べ替えられ、常に存在しないキーを持つ要素が削除/破棄されます。</target>
        </trans-unit>
        <trans-unit id="dc118214d9d96bdcdab86a3dcf6dbc36ea6680a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lazy&lt;/code&gt; and &lt;code&gt;number&lt;/code&gt; param attributes are now modifiers, to make it more clear what That means instead of:</source>
          <target state="translated">&lt;code&gt;lazy&lt;/code&gt; および &lt;code&gt;number&lt;/code&gt; param属性は修飾子になり、次の代わりに意味がより明確になります。</target>
        </trans-unit>
        <trans-unit id="cb26d534e1e0fd7dab034b343fe732f25ec4cdc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mixins&lt;/code&gt; option accepts an array of mixin objects. These mixin objects can contain instance options like normal instance objects, and they will be merged against the eventual options using the same option merging logic in &lt;code&gt;Vue.extend()&lt;/code&gt;. e.g. If your mixin contains a created hook and the component itself also has one, both functions will be called.</source>
          <target state="translated">&lt;code&gt;mixins&lt;/code&gt; オプションは、mixinオブジェクトの配列を受け入れます。 これらのミックスインオブジェクトには、通常のインスタンスオブジェクトのようなインスタンスオプションを含めることができ、 &lt;code&gt;Vue.extend()&lt;/code&gt; と同じオプションマージロジックを使用して、最終オプションに対してマージされます。 たとえば、ミックスインに作成されたフックが含まれ、コンポーネント自体にフックがある場合、両方の関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a26f8d5002e995f88abd483d65f2b8981c550aeb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provide&lt;/code&gt; option should be an object or a function that returns an object. This object contains the properties that are available for injection into its descendants. You can use ES2015 Symbols as keys in this object, but only in environments that natively support &lt;code&gt;Symbol&lt;/code&gt; and &lt;code&gt;Reflect.ownKeys&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;provide&lt;/code&gt; オプションは、オブジェクトまたはオブジェクトを返す関数でなければなりません。 このオブジェクトには、その子孫を注入するために使用できるプロパティが含まれています。 ES2015シンボルをこのオブジェクトのキーとして使用できますが、 &lt;code&gt;Symbol&lt;/code&gt; および &lt;code&gt;Reflect.ownKeys&lt;/code&gt; をネイティブにサポートする環境でのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="1df98a28e225ea8d4b071027515cc8bf9c095a9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provide&lt;/code&gt; options allows us to specify the data/methods we want to &lt;strong&gt;provide&lt;/strong&gt; to descendent components. In this case, that&amp;rsquo;s the &lt;code&gt;getMap&lt;/code&gt; method inside &lt;code&gt;&amp;lt;google-map&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;provide&lt;/code&gt; オプションを使用すると&lt;strong&gt;、&lt;/strong&gt;子孫コンポーネントに&lt;strong&gt;提供する&lt;/strong&gt;データ/メソッドを指定できます。 この場合、それは &lt;code&gt;&amp;lt;google-map&amp;gt;&lt;/code&gt; の &lt;code&gt;getMap&lt;/code&gt; メソッドです。</target>
        </trans-unit>
        <trans-unit id="e89e752e4e0ad59fc71d8c42dbb8b140ac0a0a39" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;render&lt;/code&gt; function has priority over the render function compiled from &lt;code&gt;template&lt;/code&gt; option or in-DOM HTML template of the mounting element which is specified by the &lt;code&gt;el&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;render&lt;/code&gt; 関数は、 &lt;code&gt;template&lt;/code&gt; または &lt;code&gt;el&lt;/code&gt; オプションで指定されたマウント要素のDOMのHTMLテンプレートからコンパイルされたレンダリング関数よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="2f312c98cab71695e7dd222c575b78b0d13a0c64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;slot-scope&lt;/code&gt; attribute can also be used directly on a non-&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element (including components):</source>
          <target state="translated">&lt;code&gt;slot-scope&lt;/code&gt; 属性は、非 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 要素（コンポーネントを含む）で直接使用することもできます。</target>
        </trans-unit>
        <trans-unit id="955152ea21b24fdf404e6e6a60a1465f0de55be9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;true-value&lt;/code&gt; and &lt;code&gt;false-value&lt;/code&gt; attributes don&amp;rsquo;t affect the input&amp;rsquo;s &lt;code&gt;value&lt;/code&gt; attribute, because browsers don&amp;rsquo;t include unchecked boxes in form submissions. To guarantee that one of two values is submitted in a form (e.g. &amp;ldquo;yes&amp;rdquo; or &amp;ldquo;no&amp;rdquo;), use radio inputs instead.</source>
          <target state="translated">ブラウザーはフォーム送信に未チェックのボックスを含まないため、 &lt;code&gt;true-value&lt;/code&gt; および &lt;code&gt;false-value&lt;/code&gt; 属性は入力 &lt;code&gt;value&lt;/code&gt; 属性に影響しません。 2つの値のいずれかがフォームで送信されるようにするには（「yes」または「no」など）、代わりにラジオ入力を使用します。</target>
        </trans-unit>
        <trans-unit id="e182f837614c4a38080aad510dbbf2060bfc370d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; can be one of the following native constructors:</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; は、次のネイティブコンストラクターのいずれかです。</target>
        </trans-unit>
        <trans-unit id="e190ce9f5befbb3426f06af3ed96f5a8aa0969e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-&lt;/code&gt; prefix serves as a visual cue for identifying Vue-specific attributes in your templates. This is useful when you are using Vue.js to apply dynamic behavior to some existing markup, but can feel verbose for some frequently used directives. At the same time, the need for the &lt;code&gt;v-&lt;/code&gt; prefix becomes less important when you are building a &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-page_application&quot;&gt;SPA&lt;/a&gt;, where Vue manages every template. Therefore, Vue provides special shorthands for two of the most often used directives, &lt;code&gt;v-bind&lt;/code&gt; and &lt;code&gt;v-on&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;v-&lt;/code&gt; プレフィックスは、テンプレート内のVue固有の属性を識別するための視覚的なキューとして機能します。 これは、Vue.jsを使用して既存のマークアップに動的な動作を適用する場合に便利ですが、頻繁に使用されるディレクティブが冗長になる場合があります。 同時に、Vueがすべてのテンプレートを管理する&lt;a href=&quot;https://en.wikipedia.org/wiki/Single-page_application&quot;&gt;SPA&lt;/a&gt;を構築する場合、 &lt;code&gt;v-&lt;/code&gt; プレフィックスの必要性はそれほど重要ではなくなります。 したがって、Vueは、最もよく使用される2つのディレクティブ &lt;code&gt;v-bind&lt;/code&gt; と &lt;code&gt;v-on&lt;/code&gt; に特別な略語を提供します。</target>
        </trans-unit>
        <trans-unit id="cd8461a9f091788550d2bcfcb0e99f3643c233d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-else-if&lt;/code&gt;, as the name suggests, serves as an &amp;ldquo;else if block&amp;rdquo; for &lt;code&gt;v-if&lt;/code&gt;. It can also be chained multiple times:</source>
          <target state="translated">&lt;code&gt;v-else-if&lt;/code&gt; は、その名前が示すとおり、 &lt;code&gt;v-if&lt;/code&gt; の 「else ifブロック」として機能します。 複数回チェーンできます。</target>
        </trans-unit>
        <trans-unit id="0f6244029a3dc18b6cba09b3e6e0a940180e13b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-link-active&lt;/code&gt; directive has also been replaced by the &lt;code&gt;tag&lt;/code&gt; attribute on &lt;a href=&quot;https://router.vuejs.org/en/api/router-link.html&quot;&gt;the &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; component&lt;/a&gt;. So for example, you&amp;rsquo;ll update this:</source>
          <target state="translated">&lt;code&gt;v-link-active&lt;/code&gt; ディレクティブも&lt;a href=&quot;https://router.vuejs.org/en/api/router-link.html&quot;&gt; &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; コンポーネント&lt;/a&gt;の &lt;code&gt;tag&lt;/code&gt; 属性に置き換えられました 。 したがって、たとえば、これを更新します。</target>
        </trans-unit>
        <trans-unit id="83d24c44d5fff24f0114d4c306087248f718b001" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-link&lt;/code&gt; directive has been replaced with a new &lt;a href=&quot;https://router.vuejs.org/en/api/router-link.html&quot;&gt;&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; component&lt;/a&gt;, as this sort of job is now solely the responsibility of components in Vue 2. That means whenever wherever you have a link like this:</source>
          <target state="translated">&lt;code&gt;v-link&lt;/code&gt; ディレクティブは、新しい&lt;a href=&quot;https://router.vuejs.org/en/api/router-link.html&quot;&gt; &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; コンポーネントに&lt;/a&gt;置き換えられました。 これは、これらのジョブがVue 2コンポーネントの唯一の責任であるためです。 つまり、次のようなリンクがある場合はいつでも：</target>
        </trans-unit>
        <trans-unit id="913c16238f6be321d10c7aa5ede9be4e8848de68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-slot&lt;/code&gt; directive was introduced in Vue 2.6.0, offering an improved, alternative API to the still-supported &lt;code&gt;slot&lt;/code&gt; and &lt;code&gt;slot-scope&lt;/code&gt; attributes. The full rationale for introducing &lt;code&gt;v-slot&lt;/code&gt; is described in this &lt;a href=&quot;https://github.com/vuejs/rfcs/blob/master/active-rfcs/0001-new-slot-syntax.md&quot;&gt;RFC&lt;/a&gt;. The &lt;code&gt;slot&lt;/code&gt; and &lt;code&gt;slot-scope&lt;/code&gt; attributes will continue to be supported in all future 2.x releases, but are officially deprecated and will eventually be removed in Vue 3.</source>
          <target state="translated">&lt;code&gt;v-slot&lt;/code&gt; ディレクティブはVue 2.6.0で導入され、現在サポートされている &lt;code&gt;slot&lt;/code&gt; および &lt;code&gt;slot-scope&lt;/code&gt; 属性に対する改善された代替APIを提供します。 &lt;code&gt;v-slot&lt;/code&gt; を実装するための完全な理論的根拠は、この&lt;a href=&quot;https://github.com/vuejs/rfcs/blob/master/active-rfcs/0001-new-slot-syntax.md&quot;&gt;RFCで&lt;/a&gt;説明されています 。 &lt;code&gt;slot&lt;/code&gt; および &lt;code&gt;slot-scope&lt;/code&gt; 属性は、今後のすべての2.xリリースで引き続きサポートされますが、Vue 3では正式に廃止され、最終的に削除されます。</target>
        </trans-unit>
        <trans-unit id="f371f3394ccbbd9c9c7339bc5a079bc98cf103c4" translate="yes" xml:space="preserve">
          <source>The CLI assumes prior knowledge of Node.js and the associated build tools. If you are new to Vue or front-end build tools, we strongly suggest going through &lt;a href=&quot;../index&quot;&gt;the guide&lt;/a&gt; without any build tools before using the CLI.</source>
          <target state="translated">CLIは、Node.jsおよび関連するビルドツールの予備知識を前提としています。 Vueまたはフロントエンドビルドツールを初めて使用する場合は、CLIを使用する前にビルドツールを使用せずに&lt;a href=&quot;../index&quot;&gt;ガイド&lt;/a&gt;を確認することを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="431e39681a2982cceb38425ec480f7e168f10ba0" translate="yes" xml:space="preserve">
          <source>The CLI takes care of most of the tooling configurations for you, but also allows fine-grained customization through its own &lt;a href=&quot;https://cli.vuejs.org/config/&quot;&gt;config options&lt;/a&gt;.</source>
          <target state="translated">CLIはほとんどのツール設定を処理しますが、独自の構成オプションを使用&lt;a href=&quot;https://cli.vuejs.org/config/&quot;&gt;し&lt;/a&gt;てさらにカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="37e9961ffd2140433ee6300b4c25596bb92249ae" translate="yes" xml:space="preserve">
          <source>The Complete SSR Guide</source>
          <target state="translated">完全なSSRガイド</target>
        </trans-unit>
        <trans-unit id="eb35b5bf284498fbba8e557432a08e707e7edef3" translate="yes" xml:space="preserve">
          <source>The Data Object In-Depth</source>
          <target state="translated">データオブジェクトの詳細</target>
        </trans-unit>
        <trans-unit id="3c531607ce360cbb5aec13ac8c3438a41dc5f330" translate="yes" xml:space="preserve">
          <source>The Virtual DOM</source>
          <target state="translated">仮想DOM</target>
        </trans-unit>
        <trans-unit id="babecbcffc795b2e20d9189e575e0bb731f8cd62" translate="yes" xml:space="preserve">
          <source>The Vue Instance</source>
          <target state="translated">Vueインスタンス</target>
        </trans-unit>
        <trans-unit id="be83ced5c720e31f43242c0f5e365ad3f2da0751" translate="yes" xml:space="preserve">
          <source>The Web Components Spec has been finalized, but is not natively implemented in every browser. Safari 10.1+, Chrome 54+ and Firefox 63+ natively support web components. In comparison, Vue components don&amp;rsquo;t require any polyfills and work consistently in all supported browsers (IE9 and above). When needed, Vue components can also be wrapped inside a native custom element.</source>
          <target state="translated">Webコンポーネントの仕様は最終決定されましたが、すべてのブラウザーにネイティブに実装されているわけではありません。 Safari 10.1以降、Chrome 54以降、Firefox 63以降はWebコンポーネントをネイティブにサポートします。 一方、Vueコンポーネントはポリフィルを必要とせず、サポートされているすべてのブラウザー（IE9以降）で一貫して動作します。 必要に応じて、ネイティブのカスタム要素内にVueコンポーネントをラップできます。</target>
        </trans-unit>
        <trans-unit id="0a28d4802ae8f29af4f28a606d7b55fd498ccb1b" translate="yes" xml:space="preserve">
          <source>The above code is imperative and repetitive. Compare it with a computed property version:</source>
          <target state="translated">上記のコードは命令型および反復型です。 計算されたプロパティバージョンと比較します。</target>
        </trans-unit>
        <trans-unit id="bb879e483c23bffcd30b4eb818c6b264dd8b31d3" translate="yes" xml:space="preserve">
          <source>The above declarations allow the following code to be compiled:</source>
          <target state="translated">上記の宣言を使用すると、次のコードをコンパイルできます。</target>
        </trans-unit>
        <trans-unit id="f57aa3ad596a32aa0ee96ea34ada406c21b66366" translate="yes" xml:space="preserve">
          <source>The above example and some future ones use JavaScript&amp;rsquo;s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;template literal&lt;/a&gt; to make multi-line templates more readable. These are not supported by Internet Explorer (IE), so if you must support IE and are not transpiling (e.g. with Babel or TypeScript), use &lt;a href=&quot;https://css-tricks.com/snippets/javascript/multiline-string-variables-in-javascript/&quot;&gt;newline escapes&lt;/a&gt; instead.</source>
          <target state="translated">上記の例と将来の例では、JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;テンプレートリテラル&lt;/a&gt;を使用して、複数行のテンプレートを読みやすくしています。 これらはInternet Explorer（IE）でサポートされていないため、IEをサポートする必要があり、（Babel、TypeScriptなどを使用して）トランスコンパイルしない場合は、代わりに改行エスケープを使用します。</target>
        </trans-unit>
        <trans-unit id="99a5b0f10fab94bdbe6947c371a61fc4c4300760" translate="yes" xml:space="preserve">
          <source>The above is made possible by Vue&amp;rsquo;s &lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt; element with the &lt;code&gt;is&lt;/code&gt; special attribute:</source>
          <target state="translated">上記は、Vue &lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt; 要素という特別な属性によって可能になります。</target>
        </trans-unit>
        <trans-unit id="b7374ad3f755708e5dc13a8b4b98839ff8d234e1" translate="yes" xml:space="preserve">
          <source>The above only renders the todos that are not complete.</source>
          <target state="translated">上記は、完了していないタスクのみをレンダリングします。</target>
        </trans-unit>
        <trans-unit id="4af7e3e4b79fac718e6fd64e5702254c69dcf11f" translate="yes" xml:space="preserve">
          <source>The above syntax means the presence of the &lt;code&gt;active&lt;/code&gt; class will be determined by the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;truthiness&lt;/a&gt; of the data property &lt;code&gt;isActive&lt;/code&gt;.</source>
          <target state="translated">上記の構文は、 &lt;code&gt;active&lt;/code&gt; クラスの存在がデータプロパティ &lt;code&gt;isActive&lt;/code&gt; の &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;真実性&lt;/a&gt;によって決定されることを意味します。</target>
        </trans-unit>
        <trans-unit id="aeec69d6935039bffd444e21fbd1ed7763a7edf9" translate="yes" xml:space="preserve">
          <source>The above will be equivalent to:</source>
          <target state="translated">以下と同等です：</target>
        </trans-unit>
        <trans-unit id="bc22dad858f565e9beeefc992c5465134124606c" translate="yes" xml:space="preserve">
          <source>The anchored heading component we created earlier is relatively simple. It doesn&amp;rsquo;t manage any state, watch any state passed to it, and it has no lifecycle methods. Really, it&amp;rsquo;s only a function with some props.</source>
          <target state="translated">以前に作成されたアンカー付き見出しコンポーネントは比較的単純です。 状態管理、渡された状態の監視、およびライフサイクルメソッドはありません。 本当に、それはいくつかの小道具を備えた単なる機能です。</target>
        </trans-unit>
        <trans-unit id="87b9709d9cefabc9cccc6ad0b23e243c50a3cb35" translate="yes" xml:space="preserve">
          <source>The array syntax allows more predictable route matching, since iterating over an object is not guaranteed to use the same property order across browsers.</source>
          <target state="translated">配列構文を使用すると、より予測可能なルートマッチングが可能になります。 オブジェクトを繰り返し処理しても、ブラウザ間で同じプロパティの順序が使用されることは保証されません。</target>
        </trans-unit>
        <trans-unit id="da3ddd2386065d734a4382298ee4c3e11da253a3" translate="yes" xml:space="preserve">
          <source>The array syntax for &lt;code&gt;v-bind:style&lt;/code&gt; allows you to apply multiple style objects to the same element:</source>
          <target state="translated">&lt;code&gt;v-bind:style&lt;/code&gt; 配列構文を使用して、同じ要素に複数のスタイルオブジェクトを適用できます。</target>
        </trans-unit>
        <trans-unit id="e823b9beb8c48498f2cf709b4d0756d4d1fc6465" translate="yes" xml:space="preserve">
          <source>The async component factory can also return an object of the following format:</source>
          <target state="translated">非同期コンポーネントファクトリは、次の形式のオブジェクトを返すこともできます。</target>
        </trans-unit>
        <trans-unit id="ba11fc067d05679fdd5921eda5ec20ebd31b1c5d" translate="yes" xml:space="preserve">
          <source>The autocompletion in editors make the cost of writing longer names very low, while the clarity they provide is invaluable. Uncommon abbreviations, in particular, should always be avoided.</source>
          <target state="translated">エディターの自動補完は長い名前を書くコストを大幅に削減しますが、エディターによって提供される明快さは非常に貴重です。 特に、異常な略語は常に避けてください。</target>
        </trans-unit>
        <trans-unit id="8c22ef1ce4c22f9fdb3192ace8ea666bf31d6a91" translate="yes" xml:space="preserve">
          <source>The bound object doesn&amp;rsquo;t have to be inline:</source>
          <target state="translated">バインドされたオブジェクトはインラインである必要はありません。</target>
        </trans-unit>
        <trans-unit id="c473e09bb4188e420d79ebd60ee46d8c65246cf3" translate="yes" xml:space="preserve">
          <source>The component system is another important concept in Vue, because it&amp;rsquo;s an abstraction that allows us to build large-scale applications composed of small, self-contained, and often reusable components. If we think about it, almost any type of application interface can be abstracted into a tree of components:</source>
          <target state="translated">コンポーネントシステムは、Vueのもう1つの重要な概念です。 これは、自己完結型であり、多くの場合再利用可能なコンポーネントで構成される大規模なアプリケーションを構築できる抽象化であるためです。 考えてみると、ほぼすべての種類のアプリケーションインターフェイスをコンポーネントのツリーに抽象化できます。</target>
        </trans-unit>
        <trans-unit id="e2a227479dfaa2ebe9e09278b1482fab712cafda" translate="yes" xml:space="preserve">
          <source>The component&amp;rsquo;s DOM will have been updated when this hook is called, so you can perform DOM-dependent operations here. However, in most cases you should avoid changing state inside the hook. To react to state changes, it&amp;rsquo;s usually better to use a &lt;a href=&quot;#computed&quot;&gt;computed property&lt;/a&gt; or &lt;a href=&quot;#watch&quot;&gt;watcher&lt;/a&gt; instead.</source>
          <target state="translated">このフックが呼び出されると、コンポーネントのDOMが更新され、ここでDOM依存の操作を実行できます。 ただし、ほとんどの場合、フックの状態を変更しないでください。 状態の変化に対応するには、通常、代わりに&lt;a href=&quot;#computed&quot;&gt;計算プロパティ&lt;/a&gt;または&lt;a href=&quot;#watch&quot;&gt;ウォッチャー&lt;/a&gt;を使用することをお 勧めします。</target>
        </trans-unit>
        <trans-unit id="33a9c37f2f9908b2ff6754fe4ced3a3b882e927a" translate="yes" xml:space="preserve">
          <source>The component&amp;rsquo;s name is the first argument of &lt;code&gt;Vue.component&lt;/code&gt;.</source>
          <target state="translated">コンポーネントの名前は &lt;code&gt;Vue.component&lt;/code&gt; の最初の引数です。</target>
        </trans-unit>
        <trans-unit id="6c50d6a412a378e537c001610ef774aa9ae31afc" translate="yes" xml:space="preserve">
          <source>The contents of the &lt;code&gt;span&lt;/code&gt; will be replaced with the value of the &lt;code&gt;rawHtml&lt;/code&gt; property, interpreted as plain HTML - data bindings are ignored. Note that you cannot use &lt;code&gt;v-html&lt;/code&gt; to compose template partials, because Vue is not a string-based templating engine. Instead, components are preferred as the fundamental unit for UI reuse and composition.</source>
          <target state="translated">&lt;code&gt;span&lt;/code&gt; のコンテンツは &lt;code&gt;rawHtml&lt;/code&gt; プロパティの値に置き換えられます。これは、プレーンなHTMLデータバインディングが無視されると解釈されます。 Vueは文字列ベースのテンプレートエンジンではないため、 &lt;code&gt;v-html&lt;/code&gt; を使用してテンプレートパーシャルを作成できないことに注意してください。 代わりに、コンポーネントはUIの再利用と構成の基本単位として優先されます。</target>
        </trans-unit>
        <trans-unit id="0aabf5563ee74ceaaa562a702ba84f4906e6efaf" translate="yes" xml:space="preserve">
          <source>The custom component &lt;code&gt;&amp;lt;blog-post-row&amp;gt;&lt;/code&gt; will be hoisted out as invalid content, causing errors in the eventual rendered output. Fortunately, the &lt;code&gt;is&lt;/code&gt; special attribute offers a workaround:</source>
          <target state="translated">カスタムコンポーネント &lt;code&gt;&amp;lt;blog-post-row&amp;gt;&lt;/code&gt; は無効なコンテンツとしてロールアップされ、最終的なレンダリング出力でエラーが発生します。 幸いなことに、特別な属性が回避策を提供します。</target>
        </trans-unit>
        <trans-unit id="773dcdb0e4554ae71591d98763ca297e3e508d9e" translate="yes" xml:space="preserve">
          <source>The data object for the Vue instance. Vue will recursively convert its properties into getter/setters to make it &amp;ldquo;reactive&amp;rdquo;. &lt;strong&gt;The object must be plain&lt;/strong&gt;: native objects such as browser API objects and prototype properties are ignored. A rule of thumb is that data should just be data - it is not recommended to observe objects with their own stateful behavior.</source>
          <target state="translated">Vueインスタンスのデータオブジェクト。 Vueはそのプロパティをgetter / setterに再帰的に変換し、「リアクティブ」にします。 &lt;strong&gt;オブジェクトはプレーンでなければなりません&lt;/strong&gt; 。 ブラウザAPIオブジェクトやプロトタイププロパティなどのネイティブオブジェクトは無視されます。 経験則として、データは単なるデータ監視オブジェクトである必要があり、独自のステートフルな動作は推奨されません。</target>
        </trans-unit>
        <trans-unit id="f249c1e096e4760333b8a1a164e494b46a537f23" translate="yes" xml:space="preserve">
          <source>The data object that the Vue instance is observing. The Vue instance proxies access to the properties on its data object.</source>
          <target state="translated">Vueインスタンスが監視しているデータオブジェクト。 Vueインスタンスは、そのデータオブジェクトのプロパティへのアクセスをプロキシします。</target>
        </trans-unit>
        <trans-unit id="536204b9289a091fc1bfb216ea4a0b6805215f8d" translate="yes" xml:space="preserve">
          <source>The default behavior of &lt;code&gt;v-for&lt;/code&gt; will try to patch the elements in-place without moving them. To force it to reorder elements, you need to provide an ordering hint with the &lt;code&gt;key&lt;/code&gt; special attribute:</source>
          <target state="translated">&lt;code&gt;v-for&lt;/code&gt; のデフォルトの動作では、要素を移動せずにインプレースでパッチを適用しようとします。 要素の順序変更を強制するには、 &lt;code&gt;key&lt;/code&gt; 特別な属性を使用して順序付けのヒントを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="d129c09e272230c72d4816c9cf37d602f78c6b98" translate="yes" xml:space="preserve">
          <source>The detailed usage for &lt;code&gt;v-for&lt;/code&gt; is explained in the guide section linked below.</source>
          <target state="translated">&lt;code&gt;v-for&lt;/code&gt; の詳細な使用法は、以下にリンクされているガイドセクションで説明されています。</target>
        </trans-unit>
        <trans-unit id="fcb2400b62e62455e5be23679bc16dcd684f0e97" translate="yes" xml:space="preserve">
          <source>The difference is that an element with &lt;code&gt;v-show&lt;/code&gt; will always be rendered and remain in the DOM; &lt;code&gt;v-show&lt;/code&gt; only toggles the &lt;code&gt;display&lt;/code&gt; CSS property of the element.</source>
          <target state="translated">違いは、 &lt;code&gt;v-show&lt;/code&gt; の要素は常にレンダリングされ、DOMに残ることです。 &lt;code&gt;v-show&lt;/code&gt; は、要素のCSSプロパティの表示のみを &lt;code&gt;display&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="9beac5c57d068b893c427afee540acec4a448457" translate="yes" xml:space="preserve">
          <source>The direct child components of the current instance. &lt;strong&gt;Note there&amp;rsquo;s no order guarantee for &lt;code&gt;$children&lt;/code&gt;, and it is not reactive.&lt;/strong&gt; If you find yourself trying to use &lt;code&gt;$children&lt;/code&gt; for data binding, consider using an Array and &lt;code&gt;v-for&lt;/code&gt; to generate child components, and use the Array as the source of truth.</source>
          <target state="translated">現在のインスタンスの直接の子コンポーネント。 &lt;strong&gt; &lt;code&gt;$children&lt;/code&gt; は順序が保証されておらず、リアクティブではないことに注意してください。&lt;/strong&gt; データバインディングに &lt;code&gt;$children&lt;/code&gt; を使用しようとしていることに気付いた場合は、配列と &lt;code&gt;v-for&lt;/code&gt; を使用して子コンポーネントを生成し、配列を真実のソースとして使用することを検討してください。</target>
        </trans-unit>
        <trans-unit id="8966ad2384af724eb5afaebd84955178e2bef331" translate="yes" xml:space="preserve">
          <source>The directive &lt;code&gt;v-if&lt;/code&gt; is used to conditionally render a block. The block will only be rendered if the directive&amp;rsquo;s expression returns a truthy value.</source>
          <target state="translated">ディレクティブ &lt;code&gt;v-if&lt;/code&gt; は、ブロックを条件付きでレンダリングするために使用されます。 ブロックは、ディレクティブ式が真の値を返す場合にのみレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="a9e1b62f46f6347c3255105bf2f7f7bb4beb980e" translate="yes" xml:space="preserve">
          <source>The double mustaches interprets the data as plain text, not HTML. In order to output real HTML, you will need to use the &lt;code&gt;v-html&lt;/code&gt; directive:</source>
          <target state="translated">ダブル口ひげは、データをHTMLではなくプレーンテキストとして解釈します。 実際のHTMLを出力するには、 &lt;code&gt;v-html&lt;/code&gt; ディレクティブを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="cdf9489100840a3b7f6fc331943b5d3351ce62f0" translate="yes" xml:space="preserve">
          <source>The easiest way to pre-compile templates is using &lt;a href=&quot;single-file-components&quot;&gt;Single-File Components&lt;/a&gt; - the associated build setups automatically performs pre-compilation for you, so the built code contains the already compiled render functions instead of raw template strings.</source>
          <target state="translated">テンプレートをプリコンパイルする最も簡単な方法は、 &lt;a href=&quot;single-file-components&quot;&gt;単一のファイルコンポーネント&lt;/a&gt;を使用することです 。 関連するビルドセットアップがプリコンパイルを自動的に実行するため、ビルドコードには、未加工のテンプレート文字列ではなく、既にコンパイルされたレンダリング関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="75f9865708d8a06fa846e682702658bdabd9c8e0" translate="yes" xml:space="preserve">
          <source>The easiest way to try out Vue.js is using the &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/50wL7mdz/&quot;&gt;JSFiddle Hello World example&lt;/a&gt;. Feel free to open it in another tab and follow along as we go through some basic examples. Or, you can &lt;a href=&quot;https://gist.githubusercontent.com/chrisvfritz/7f8d7d63000b48493c336e48b3db3e52/raw/ed60c4e5d5c6fec48b0921edaed0cb60be30e87c/index.html&quot;&gt;create an &lt;code&gt;index.html&lt;/code&gt; file&lt;/a&gt; and include Vue with:</source>
          <target state="translated">Vue.jsを試す最も簡単な方法は、 &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/50wL7mdz/&quot;&gt;JSFiddle Hello Worldの例&lt;/a&gt;を使用することです 。 別のタブで開いて、いくつかの基本的な例を見てみましょう。 または、 &lt;a href=&quot;https://gist.githubusercontent.com/chrisvfritz/7f8d7d63000b48493c336e48b3db3e52/raw/ed60c4e5d5c6fec48b0921edaed0cb60be30e87c/index.html&quot;&gt; &lt;code&gt;index.html&lt;/code&gt; ファイル&lt;/a&gt;を作成してVueを含めることができます。</target>
        </trans-unit>
        <trans-unit id="847757f66edc351ea14e3e7f70aa130ed1b67ad7" translate="yes" xml:space="preserve">
          <source>The el option can no longer be used in &lt;code&gt;Vue.extend&lt;/code&gt;. It&amp;rsquo;s only valid as an instance creation option.</source>
          <target state="translated">elオプションは &lt;code&gt;Vue.extend&lt;/code&gt; では使用できなくなりました。 インスタンス作成オプションとしてのみ有効です。</target>
        </trans-unit>
        <trans-unit id="14ff2ebab179926c1bba713b3418f8fa507384ca" translate="yes" xml:space="preserve">
          <source>The filter&amp;rsquo;s function always receives the expression&amp;rsquo;s value (the result of the former chain) as its first argument. In the above example, the &lt;code&gt;capitalize&lt;/code&gt; filter function will receive the value of &lt;code&gt;message&lt;/code&gt; as its argument.</source>
          <target state="translated">フィルター関数は、常に式の値（前のチェーンの結果）を最初の引数として受け取ります。 上記の例では、 &lt;code&gt;capitalize&lt;/code&gt; フィルター関数は引数として &lt;code&gt;message&lt;/code&gt; の値を受け取ります。</target>
        </trans-unit>
        <trans-unit id="25978631002a6e912099e352f219ba34c4dc10cb" translate="yes" xml:space="preserve">
          <source>The filtered list will &lt;em&gt;only&lt;/em&gt; be re-evaluated if there are relevant changes to the &lt;code&gt;users&lt;/code&gt; array, making filtering much more efficient.</source>
          <target state="translated">フィルタリングされたリストは、 &lt;code&gt;users&lt;/code&gt; 配列に関連する変更がある場合に&lt;em&gt;のみ&lt;/em&gt;再評価され、フィルタリングがより効率的になります。</target>
        </trans-unit>
        <trans-unit id="b5951356bec324133fa39def8def2ef7e47b05c1" translate="yes" xml:space="preserve">
          <source>The following template:</source>
          <target state="translated">次のテンプレート：</target>
        </trans-unit>
        <trans-unit id="6e4a514c82bb3b7baff7919684302ede3370a422" translate="yes" xml:space="preserve">
          <source>The getter/setters are invisible to the user, but under the hood they enable Vue to perform dependency-tracking and change-notification when properties are accessed or modified. One caveat is that browser consoles format getter/setters differently when converted data objects are logged, so you may want to install &lt;a href=&quot;https://github.com/vuejs/vue-devtools&quot;&gt;vue-devtools&lt;/a&gt; for a more inspection-friendly interface.</source>
          <target state="translated">ゲッター/セッターはユーザーに対して透過的ですが、内部でVueが依存関係を追跡し、プロパティがアクセスまたは変更されたときに変更を通知することができます。 1つの注意点は、変換されたデータオブジェクトがログに記録されるときに、ブラウザーコンソールがゲッター/セッターを異なる形式でフォーマットすることです。</target>
        </trans-unit>
        <trans-unit id="8cd9d811837e0eecf0a4df368877b6262fe04425" translate="yes" xml:space="preserve">
          <source>The implicitly assigned &lt;code&gt;$index&lt;/code&gt; and &lt;code&gt;$key&lt;/code&gt; variables have been removed in favor of explicitly defining them in &lt;code&gt;v-for&lt;/code&gt;. This makes the code easier to read for developers less experienced with Vue and also results in much clearer behavior when dealing with nested loops.</source>
          <target state="translated">暗黙的に割り当てられた &lt;code&gt;$index&lt;/code&gt; および &lt;code&gt;$key&lt;/code&gt; 変数は、 &lt;code&gt;v-for&lt;/code&gt; の明示的な定義から削除されました 。 これにより、Vueの経験がほとんどない開発者にとってコードが読みやすくなり、ネストされたループを処理するときに何が起こるかがより明確になります。</target>
        </trans-unit>
        <trans-unit id="cd591127230d8deaf3a79ff7072473dcdfb326ef" translate="yes" xml:space="preserve">
          <source>The instantiation options used for the current Vue instance. This is useful when you want to include custom properties in the options:</source>
          <target state="translated">現在のVueインスタンスに使用されるインスタンス化オプション。 これは、オプションにカスタムプロパティを含める場合に便利です。</target>
        </trans-unit>
        <trans-unit id="6507e95ac3123f38dc39170ae522dfbce1786b53" translate="yes" xml:space="preserve">
          <source>The logic for many event handlers will be more complex though, so keeping your JavaScript in the value of the &lt;code&gt;v-on&lt;/code&gt; attribute isn&amp;rsquo;t feasible. That&amp;rsquo;s why &lt;code&gt;v-on&lt;/code&gt; can also accept the name of a method you&amp;rsquo;d like to call.</source>
          <target state="translated">ただし、多くのイベントハンドラのロジックはより複雑であるため、 &lt;code&gt;v-on&lt;/code&gt; 属性の値にJavaScriptを保持することは実用的ではありません。 これが、 &lt;code&gt;v-on&lt;/code&gt; が呼び出したいメソッドの名前を受け入れることができる理由です。</target>
        </trans-unit>
        <trans-unit id="a7dfd0134284048bc632e36141f4ea3e7333c213" translate="yes" xml:space="preserve">
          <source>The match is first checked on the component&amp;rsquo;s own &lt;code&gt;name&lt;/code&gt; option, then its local registration name (the key in the parent&amp;rsquo;s &lt;code&gt;components&lt;/code&gt; option) if the &lt;code&gt;name&lt;/code&gt; option is not available. Anonymous components cannot be matched against.</source>
          <target state="translated">一致は、最初にコンポーネントの独自の &lt;code&gt;name&lt;/code&gt; オプションでチェックされ、 &lt;code&gt;name&lt;/code&gt; オプションが利用できない場合は、ローカル登録名（親 &lt;code&gt;components&lt;/code&gt; オプションのキー）でチェックされます。 匿名コンポーネントは一致できません。</target>
        </trans-unit>
        <trans-unit id="a6157926048113f46fe23ee578e48fe424291d8e" translate="yes" xml:space="preserve">
          <source>The maximum number of component instances to cache. Once this number is reached, the cached component instance that was least recently accessed will be destroyed before creating a new instance.</source>
          <target state="translated">キャッシュするコンポーネントインスタンスの最大数。 この数に達すると、新しいインスタンスを作成する前に、最後にアクセスしたキャッシュコンポーネントインスタンスが破棄されます。</target>
        </trans-unit>
        <trans-unit id="8bf10a52fb597971ee2811a4b6daca68eb87e10e" translate="yes" xml:space="preserve">
          <source>The merge strategy receives the value of that option defined on the parent and child instances as the first and second arguments, respectively. The context Vue instance is passed as the third argument.</source>
          <target state="translated">マージ戦略は、親インスタンスと子インスタンスのそれぞれ最初と2番目の引数として定義されたオプションの値を受け取ります。 コンテキストVueインスタンスは3番目の引数として渡されます。</target>
        </trans-unit>
        <trans-unit id="7f5a003cef802af9e91a6f9747fac2e515359d41" translate="yes" xml:space="preserve">
          <source>The method returns the instance itself so you can chain other instance methods after it.</source>
          <target state="translated">メソッドはインスタンス自体を返します。その後、他のインスタンスメソッドをチェーンできます。</target>
        </trans-unit>
        <trans-unit id="46eb4e33843509639b8c44662beadd21ed8310ed" translate="yes" xml:space="preserve">
          <source>The most basic form of data binding is text interpolation using the &amp;ldquo;Mustache&amp;rdquo; syntax (double curly braces):</source>
          <target state="translated">データバインディングの最も基本的な形式は、「口ひげ」構文（二重括弧）を使用したテキスト補間です。</target>
        </trans-unit>
        <trans-unit id="bd564c73b6d49eec1b2c8919fa49f3bc33098a11" translate="yes" xml:space="preserve">
          <source>The most common use case is combined with &lt;code&gt;v-for&lt;/code&gt;:</source>
          <target state="translated">最も一般的な使用例は &lt;code&gt;v-for&lt;/code&gt; と組み合わされています：</target>
        </trans-unit>
        <trans-unit id="c379b64d918d58c59f406c013a50f15fd94aaa4c" translate="yes" xml:space="preserve">
          <source>The mustache tag will be replaced with the value of the &lt;code&gt;msg&lt;/code&gt; property on the corresponding data object. It will also be updated whenever the data object&amp;rsquo;s &lt;code&gt;msg&lt;/code&gt; property changes.</source>
          <target state="translated">mustacheタグは、対応するデータオブジェクトの &lt;code&gt;msg&lt;/code&gt; プロパティの値に置き換えられます。 データオブジェクトの &lt;code&gt;msg&lt;/code&gt; プロパティが変更されるたびに更新されます。</target>
        </trans-unit>
        <trans-unit id="37afbe4bcd06f0f0be230e6d8e06d5f57d026a3e" translate="yes" xml:space="preserve">
          <source>The name you give a component may depend on where you intend to use it. When using a component directly in the DOM (as opposed to in a string template or &lt;a href=&quot;single-file-components&quot;&gt;single-file component&lt;/a&gt;), we strongly recommend following the &lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name&quot;&gt;W3C rules&lt;/a&gt; for custom tag names (all-lowercase, must contain a hyphen). This helps you avoid conflicts with current and future HTML elements.</source>
          <target state="translated">コンポーネントに付ける名前は、使用する場所によって異なる場合があります。 DOMでコンポーネントを直接使用する場合（文字列テンプレートまたは単一ファイルコンポーネントとは&lt;a href=&quot;single-file-components&quot;&gt;対照的に&lt;/a&gt; ）、カスタムタグ名（すべて小文字、ハイフンを含める必要がある）の&lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name&quot;&gt;W3Cルールに&lt;/a&gt;従うことを強くお勧めします。 これにより、現在および将来のHTML要素との競合が回避されます。</target>
        </trans-unit>
        <trans-unit id="49544b57b4faf031cbd490df14c62342f8913c7c" translate="yes" xml:space="preserve">
          <source>The new, more concise way to configure &lt;code&gt;keyCodes&lt;/code&gt; is through &lt;code&gt;Vue.config.keyCodes&lt;/code&gt;. For example:</source>
          <target state="translated">&lt;code&gt;Vue.config.keyCodes&lt;/code&gt; を使用するようにVue.config.keyCodesを構成する、より簡潔な新しい方法。 例えば：</target>
        </trans-unit>
        <trans-unit id="1ba4a8191026a27a782703cf2cb8992c45a25eab" translate="yes" xml:space="preserve">
          <source>The next 2 examples work with Vue 2.2.1+. Below that version, injected values were resolved after the &lt;code&gt;props&lt;/code&gt; and the &lt;code&gt;data&lt;/code&gt; initialization.</source>
          <target state="translated">次の2つの例は、Vue 2.2.1+で動作します。 そのバージョンの下では、挿入された値は、 &lt;code&gt;props&lt;/code&gt; と &lt;code&gt;data&lt;/code&gt; 初期化後に解決されました。</target>
        </trans-unit>
        <trans-unit id="c4e0ddfdd8217a03837dee9d518c520c1cff551b" translate="yes" xml:space="preserve">
          <source>The next thing you&amp;rsquo;ll have to become familiar with is how to use template features in the &lt;code&gt;createElement&lt;/code&gt; function. Here are the arguments that &lt;code&gt;createElement&lt;/code&gt; accepts:</source>
          <target state="translated">次に理解する必要があるcreateElementは、createElement関数でテンプレート機能を使用する方法です。 &lt;code&gt;createElement&lt;/code&gt; が受け入れるcreateElement引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a93809e131de1acb92c27480b98ade7c8b177368" translate="yes" xml:space="preserve">
          <source>The object syntax for &lt;code&gt;v-bind:style&lt;/code&gt; is pretty straightforward - it looks almost like CSS, except it&amp;rsquo;s a JavaScript object. You can use either camelCase or kebab-case (use quotes with kebab-case) for the CSS property names:</source>
          <target state="translated">&lt;code&gt;v-bind:style&lt;/code&gt; のオブジェクト構文は非常に単純です。JavaScriptオブジェクトであることを除けば、CSSとほぼ同じです。 CSSプロパティ名にはcamelCaseまたはkebab-case（kebab-caseで引用符を使用）を使用できます。</target>
        </trans-unit>
        <trans-unit id="f804d7c199bb60087ee99a4d2ed2841ff111fad8" translate="yes" xml:space="preserve">
          <source>The official guide assumes intermediate level knowledge of HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics then come back! Prior experience with other frameworks helps, but is not required.</source>
          <target state="translated">公式ガイドでは、HTML、CSS、およびJavaScriptの中間レベルの知識を想定しています。 あなたがフロントエンド開発に完全に慣れていない場合、最初のステップとしてフレームワークに飛び込むことは最良のアイデアではないかもしれません-基本を取得して戻ってください！ 他のフレームワークの事前の経験は役立ちますが、必須ではありません。</target>
        </trans-unit>
        <trans-unit id="cdcd3cc5d3cb2f01160d1290fc4a6159e0dddd79" translate="yes" xml:space="preserve">
          <source>The only exception to this being the use of &lt;code&gt;Object.freeze()&lt;/code&gt;, which prevents existing properties from being changed, which also means the reactivity system can&amp;rsquo;t &lt;em&gt;track&lt;/em&gt; changes.</source>
          <target state="translated">これの唯一の例外は &lt;code&gt;Object.freeze()&lt;/code&gt; 使用です。 これにより、既存のプロパティが変更されなくなります。 これは、リアクティブシステムが変更を&lt;em&gt;追跡&lt;/em&gt;できないことも意味します。</target>
        </trans-unit>
        <trans-unit id="8eb7f5feed0a750d304ea8614d2edca774bd3f41" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;scoped&lt;/code&gt; attribute automatically scopes this CSS to your component by adding a unique attribute (such as &lt;code&gt;data-v-21e5b78&lt;/code&gt;) to elements and compiling &lt;code&gt;.list-container:hover&lt;/code&gt; to something like &lt;code&gt;.list-container[data-v-21e5b78]:hover&lt;/code&gt;.</source>
          <target state="translated">オプションの &lt;code&gt;data-v-21e5b78&lt;/code&gt; 属性は、 &lt;code&gt;.list-container:hover&lt;/code&gt; &lt;code&gt;.list-container[data-v-21e5b78]:hover&lt;/code&gt; などの一意の属性（data-v-21e5b78など）を要素に追加しますコンポーネントへのこのCSS。 ホバー。</target>
        </trans-unit>
        <trans-unit id="8f86e91201591c3c1631acf2b2475e6e451afce5" translate="yes" xml:space="preserve">
          <source>The parent instance, if the current instance has one.</source>
          <target state="translated">現在のインスタンスに親インスタンスがある場合、親インスタンス。</target>
        </trans-unit>
        <trans-unit id="a213359cc7f926ecae5256c14d1f382a33b06e44" translate="yes" xml:space="preserve">
          <source>The problem is event flows that depend on a component&amp;rsquo;s tree structure can be hard to reason about and are very brittle when the tree becomes large. They don&amp;rsquo;t scale well and only set you up for pain later. &lt;code&gt;$dispatch&lt;/code&gt; and &lt;code&gt;$broadcast&lt;/code&gt; also do not solve communication between sibling components.</source>
          <target state="translated">問題は、コンポーネントのツリー構造に依存するイベントフローを推測するのが難しく、ツリーが成長するにつれて非常に脆弱になることです。 それらはうまくスケーリングせず、後で痛みのためにあなたをセットアップします。 &lt;code&gt;$dispatch&lt;/code&gt; と &lt;code&gt;$broadcast&lt;/code&gt; は、兄弟コンポーネント間の通信も解決しません。</target>
        </trans-unit>
        <trans-unit id="98399a72800d5002678971cac53da1533e26a6d2" translate="yes" xml:space="preserve">
          <source>The problem is that large numbers of &lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=a%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;element-attribute selectors&lt;/a&gt; (e.g. &lt;code&gt;button[data-v-f3f3eg9]&lt;/code&gt;) will be considerably slower than &lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=.class%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;class-attribute selectors&lt;/a&gt; (e.g. &lt;code&gt;.btn-close[data-v-f3f3eg9]&lt;/code&gt;), so class selectors should be preferred whenever possible.</source>
          <target state="translated">問題は、多くの&lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=a%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;要素属性セレクター&lt;/a&gt; （たとえば &lt;code&gt;button[data-v-f3f3eg9]&lt;/code&gt; ）が&lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=.class%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;クラス属性セレクター&lt;/a&gt; （たとえば &lt;code&gt;.btn-close[data-v-f3f3eg9]&lt;/code&gt; ）よりもかなり遅いため、クラスセレクターを優先する必要があることです。</target>
        </trans-unit>
        <trans-unit id="3bc4b51815e1ca75817d438f9a75b79de4143526" translate="yes" xml:space="preserve">
          <source>The problem is, there are also many &lt;em&gt;simple&lt;/em&gt; cases where these patterns may offer convenience. Beware: do not be seduced into trading simplicity (being able to understand the flow of your state) for short-term convenience (writing less code).</source>
          <target state="translated">問題は、これらのパターンが有用な多くの&lt;em&gt;単純な&lt;/em&gt;ケースがあることです。 注：短期的な利便性（コードの記述が少ない）のために、トランザクションの単純さに誘惑されないでください（状態のフローを理解してください）。</target>
        </trans-unit>
        <trans-unit id="690eaa8b769a27585770a32b044820cae46112dd" translate="yes" xml:space="preserve">
          <source>The problem is, there are cases where it&amp;rsquo;s important not to delete elements that will remain in the DOM. For example, you may want to use &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; to animate list sorting, or maintain focus if the rendered element is an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;. In these cases, adding a unique key for each item (e.g. &lt;code&gt;:key=&quot;todo.id&quot;&lt;/code&gt;) will tell Vue how to behave more predictably.</source>
          <target state="translated">問題は、DOMの残りの要素を削除しないことが重要な場合があることです。 たとえば、 &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; を使用してリストのソートをアニメートしたり、レンダリングされた要素が &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; のときにフォーカスを維持したりできます 。 これらの場合、各アイテムに一意のキーを追加することで（例 &lt;code&gt;:key=&quot;todo.id&quot;&lt;/code&gt; ）、Vueに予測可能な動作を指示します。</target>
        </trans-unit>
        <trans-unit id="35549fb2854bdbc4b65652d62df1f1ddfa7a99ea" translate="yes" xml:space="preserve">
          <source>The problem is, this button doesn&amp;rsquo;t do anything:</source>
          <target state="translated">問題は、このボタンが何もしないことです。</target>
        </trans-unit>
        <trans-unit id="361cd98689630fb5a124f5e83b5f388af1b8a1f3" translate="yes" xml:space="preserve">
          <source>The provided element merely serves as a mounting point. Unlike in Vue 1.x, the mounted element will be replaced with Vue-generated DOM in all cases. It is therefore not recommended to mount the root instance to &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">指定された要素は、単にマウントポイントとして機能します。 Vue 1.xとは異なり、マウントされた要素はすべての場合にVueで生成されたDOMに置き換えられます。 したがって、ルートインスタンスを &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; にマウントすることはお勧めしません。</target>
        </trans-unit>
        <trans-unit id="34592f5fd4a2054ce0011f9d4e26a9c654b6f7b5" translate="yes" xml:space="preserve">
          <source>The reason for not automatically injecting &lt;code&gt;item&lt;/code&gt; into the component is because that makes the component tightly coupled to how &lt;code&gt;v-for&lt;/code&gt; works. Being explicit about where its data comes from makes the component reusable in other situations.</source>
          <target state="translated">コンポーネントは &lt;code&gt;v-for&lt;/code&gt; の動作と密に結合されているため、コンポーネントはコンポーネントに自動的に挿入されません。 データがどこから来たのかを指定すると、他の状況でコンポーネントが再利用可能になります。</target>
        </trans-unit>
        <trans-unit id="c532c908704eacdd705ddb6c7847a0bd40253f67" translate="yes" xml:space="preserve">
          <source>The reason is this is the equivalent JavaScript that the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; would compile to:</source>
          <target state="translated">理由は、これは &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; がコンパイルする同等のJavaScriptだからです。</target>
        </trans-unit>
        <trans-unit id="78702fdec5c6b73fa78a98283262c3e3a610ea89" translate="yes" xml:space="preserve">
          <source>The reference will be HTMLElement when used with functional components because they&amp;rsquo;re stateless and instanceless.</source>
          <target state="translated">機能コンポーネントで使用される場合、参照はステートレスおよびインスタンスレスであるため、HTMLElementです。</target>
        </trans-unit>
        <trans-unit id="c0c42bbffd6116ac9f9aa2c29f718360da13a0c7" translate="yes" xml:space="preserve">
          <source>The rendered HTML will be:</source>
          <target state="translated">レンダリングされたHTMLは次のようになります。</target>
        </trans-unit>
        <trans-unit id="a426ede2112c009fbf616db449e0c6e3bc884e8e" translate="yes" xml:space="preserve">
          <source>The result is that many components may include long lists of base components:</source>
          <target state="translated">その結果、多くのコンポーネントには、基本コンポーネントの長いリストがあります。</target>
        </trans-unit>
        <trans-unit id="0894c1243efd2b6757cc56c901b4af230a9aac04" translate="yes" xml:space="preserve">
          <source>The returned object can be used directly inside &lt;a href=&quot;../guide/render-function&quot;&gt;render functions&lt;/a&gt; and &lt;a href=&quot;../guide/computed&quot;&gt;computed properties&lt;/a&gt;, and will trigger appropriate updates when mutated. It can also be used as a minimal, cross-component state store for simple scenarios:</source>
          <target state="translated">返されたオブジェクトは&lt;a href=&quot;../guide/computed&quot;&gt;、&lt;/a&gt; &lt;a href=&quot;../guide/render-function&quot;&gt;レンダリング関数&lt;/a&gt;と計算されたプロパティで直接使用でき、変更されると適切な更新をトリガーします。 また、単純なシナリオの最小限のクロスコンポーネント状態ストアとして使用することもできます。</target>
        </trans-unit>
        <trans-unit id="f5f2182d5b9e1141097f081f69203ed474e7f51a" translate="yes" xml:space="preserve">
          <source>The root DOM element that the Vue instance is managing.</source>
          <target state="translated">Vueインスタンスによって管理されるルートDOM要素。</target>
        </trans-unit>
        <trans-unit id="1fb1fe84422a22a87a20ac9a9db7f5aca1ce36fc" translate="yes" xml:space="preserve">
          <source>The root Vue instance of the current component tree. If the current instance has no parents this value will be itself.</source>
          <target state="translated">現在のコンポーネントツリーのルートVueインスタンス。 現在のインスタンスに親がない場合、この値はそれ自体です。</target>
        </trans-unit>
        <trans-unit id="7b232ff8c5c18691a5df8efcbaf774a1cbaab836" translate="yes" xml:space="preserve">
          <source>The same is true for class bindings:</source>
          <target state="translated">同じことがクラスバインディングにも当てはまります。</target>
        </trans-unit>
        <trans-unit id="dd2c503caba50c997d7446df74ac0da742e9b8eb" translate="yes" xml:space="preserve">
          <source>The size of your app (small to medium-sized apps will probably be less than a day)</source>
          <target state="translated">アプリのサイズ（中小規模のアプリはおそらく1日未満になります）</target>
        </trans-unit>
        <trans-unit id="71c2733bfb43f78b87500262cd44c42870815508" translate="yes" xml:space="preserve">
          <source>The special case to note here is the &lt;code&gt;data&lt;/code&gt; option - it must be a function when used with &lt;code&gt;Vue.extend()&lt;/code&gt;.</source>
          <target state="translated">ここで注意すべき特別なケースは、 &lt;code&gt;data&lt;/code&gt; オプションです。これは、 &lt;code&gt;Vue.extend()&lt;/code&gt; を使用する場合は関数でなければなりません。</target>
        </trans-unit>
        <trans-unit id="572f57cb3c88ad0c0b5d74b281c1e800b18bf5b8" translate="yes" xml:space="preserve">
          <source>The store instance no longer exposes the event emitter interface (&lt;code&gt;on&lt;/code&gt;, &lt;code&gt;off&lt;/code&gt;, &lt;code&gt;emit&lt;/code&gt;). If you were previously using the store as a global event bus, &lt;a href=&quot;migration#dispatch-and-broadcast-removed&quot;&gt;see this section&lt;/a&gt; for migration instructions.</source>
          <target state="translated">ストアインスタンスは、イベントエミッタインターフェイスを公開しなくなりました（ &lt;code&gt;on&lt;/code&gt; 、 &lt;code&gt;off&lt;/code&gt; 、 &lt;code&gt;emit&lt;/code&gt; ）。 以前にストアをグローバルイベントバスとして使用したことがある場合は、移行手順について&lt;a href=&quot;migration#dispatch-and-broadcast-removed&quot;&gt;このセクション&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="77d67a6f8225d0df00a5fc5a901f8f424ef25e4a" translate="yes" xml:space="preserve">
          <source>The syntax has changed slightly, so &lt;code&gt;/category/*tags&lt;/code&gt; for example, should be updated to &lt;code&gt;/category/:tags+&lt;/code&gt;.</source>
          <target state="translated">構文がわずかに変更されたため、たとえば &lt;code&gt;/category/*tags&lt;/code&gt; を &lt;code&gt;/category/:tags+&lt;/code&gt; で更新する必要があります 。</target>
        </trans-unit>
        <trans-unit id="908884184f3cb4e8612386879bc128af52d0df9c" translate="yes" xml:space="preserve">
          <source>The target object cannot be a Vue instance, or the root data object of a Vue instance.</source>
          <target state="translated">ターゲットオブジェクトをVueインスタンスまたはVueインスタンスのルートデータオブジェクトにすることはできません。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
