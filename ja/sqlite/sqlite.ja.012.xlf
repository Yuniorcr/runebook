<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="sqlite">
    <body>
      <group id="sqlite">
        <trans-unit id="629611e47c24aa11a51e096293a71ca6c3d8e01a" translate="yes" xml:space="preserve">
          <source>SQLITE_READONLY_CANTLOCK (520)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="015c64c57dc05e31c99fb9d6c58b244b426a6bc8" translate="yes" xml:space="preserve">
          <source>SQLITE_READONLY_DBMOVED</source>
          <target state="translated">SQLITE_READONLY_DBMOVED</target>
        </trans-unit>
        <trans-unit id="a24e46d5ce62485d16ceae2af02b880ac774e14e" translate="yes" xml:space="preserve">
          <source>SQLITE_READONLY_DBMOVED (1032)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641274a844aab2d292339a07444b3d4109e35456" translate="yes" xml:space="preserve">
          <source>SQLITE_READONLY_DIRECTORY</source>
          <target state="translated">SQLITE_READONLY_DIRECTORY</target>
        </trans-unit>
        <trans-unit id="05119144ffdd9ade7185323061b93b8b4c108b42" translate="yes" xml:space="preserve">
          <source>SQLITE_READONLY_DIRECTORY (1544)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="040a9f39bccaf16a21dd4d69e09a38218669e9a2" translate="yes" xml:space="preserve">
          <source>SQLITE_READONLY_RECOVERY</source>
          <target state="translated">SQLITE_READONLY_RECOVERY</target>
        </trans-unit>
        <trans-unit id="49c7c9e4002a419c5a4863410f09c5a0df67520a" translate="yes" xml:space="preserve">
          <source>SQLITE_READONLY_RECOVERY (264)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10086695f74a13b3dc1b6b043f9e4303d71bf260" translate="yes" xml:space="preserve">
          <source>SQLITE_READONLY_ROLLBACK</source>
          <target state="translated">SQLITE_READONLY_ROLLBACK</target>
        </trans-unit>
        <trans-unit id="3014dde1ea5ecac9ca32d9fc9337afbdc1a20a91" translate="yes" xml:space="preserve">
          <source>SQLITE_READONLY_ROLLBACK (776)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08e09806f1605e1857360caa0ced2f54b24f8757" translate="yes" xml:space="preserve">
          <source>SQLITE_RECURSIVE</source>
          <target state="translated">SQLITE_RECURSIVE</target>
        </trans-unit>
        <trans-unit id="6e29d3169dcc7cb79c354b3478d4a9e677d9d332" translate="yes" xml:space="preserve">
          <source>SQLITE_REINDEX</source>
          <target state="translated">SQLITE_REINDEX</target>
        </trans-unit>
        <trans-unit id="5600c20fc740d5d527839e7787c06b94f4c7c865" translate="yes" xml:space="preserve">
          <source>SQLITE_REPLACE</source>
          <target state="translated">SQLITE_REPLACE</target>
        </trans-unit>
        <trans-unit id="f2914bd12032451cf2c0b3dbc2b9cc8b8b009a62" translate="yes" xml:space="preserve">
          <source>SQLITE_ROLLBACK</source>
          <target state="translated">SQLITE_ROLLBACK</target>
        </trans-unit>
        <trans-unit id="12b0c07d37f110462906a418d0b8342628cc7971" translate="yes" xml:space="preserve">
          <source>SQLITE_ROW</source>
          <target state="translated">SQLITE_ROW</target>
        </trans-unit>
        <trans-unit id="d40b11b64b19cbffeb1f28b82f1d75e88a4250f1" translate="yes" xml:space="preserve">
          <source>SQLITE_ROW (100)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b7549c5bfcf725e10831dc0b4ffe2f9aa7a4f2" translate="yes" xml:space="preserve">
          <source>SQLITE_SAVEPOINT</source>
          <target state="translated">SQLITE_SAVEPOINT</target>
        </trans-unit>
        <trans-unit id="3849437bd4578e4a47af309cc4d921d9788571c6" translate="yes" xml:space="preserve">
          <source>SQLITE_SCANSTAT_EST</source>
          <target state="translated">SQLITE_SCANSTAT_EST</target>
        </trans-unit>
        <trans-unit id="88ce81ff1b6be400ad0475d90de0db191962eb20" translate="yes" xml:space="preserve">
          <source>SQLITE_SCANSTAT_EXPLAIN</source>
          <target state="translated">SQLITE_SCANSTAT_EXPLAIN</target>
        </trans-unit>
        <trans-unit id="ec8221f2341670d301b13c255c028724a8ea989e" translate="yes" xml:space="preserve">
          <source>SQLITE_SCANSTAT_NAME</source>
          <target state="translated">SQLITE_SCANSTAT_NAME</target>
        </trans-unit>
        <trans-unit id="c9b739b7adf7707f699859d6ab2a62553ea614bf" translate="yes" xml:space="preserve">
          <source>SQLITE_SCANSTAT_NLOOP</source>
          <target state="translated">SQLITE_SCANSTAT_NLOOP</target>
        </trans-unit>
        <trans-unit id="db4b8115192d220082450e9e8065d4ae2b28e244" translate="yes" xml:space="preserve">
          <source>SQLITE_SCANSTAT_NVISIT</source>
          <target state="translated">SQLITE_SCANSTAT_NVISIT</target>
        </trans-unit>
        <trans-unit id="7e55e6a23805980a071c2b25bf839b8d35318112" translate="yes" xml:space="preserve">
          <source>SQLITE_SCANSTAT_SELECT</source>
          <target state="translated">SQLITE_SCANSTAT_SELECT</target>
        </trans-unit>
        <trans-unit id="d4bb22df0d8676966882f53a0e8b4ce94d172d26" translate="yes" xml:space="preserve">
          <source>SQLITE_SCANSTAT_SELECTID</source>
          <target state="translated">SQLITE_SCANSTAT_SELECTID</target>
        </trans-unit>
        <trans-unit id="842a143b2842084846db3289a0ea0f516bd7b67f" translate="yes" xml:space="preserve">
          <source>SQLITE_SCHEMA</source>
          <target state="translated">SQLITE_SCHEMA</target>
        </trans-unit>
        <trans-unit id="1968f1fefdb921df019624f2a9c86d2720310d54" translate="yes" xml:space="preserve">
          <source>SQLITE_SCHEMA (17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b3d0dfa64376a6cb38fc9f0399b1653319d893" translate="yes" xml:space="preserve">
          <source>SQLITE_SECURE_DELETE compile-time option causes deletes to overwrite old data with zeros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0e391070c94394bf2ddee7115ef9e1798d4d7d5" translate="yes" xml:space="preserve">
          <source>SQLITE_SELECT</source>
          <target state="translated">SQLITE_SELECT</target>
        </trans-unit>
        <trans-unit id="65663aa27b1be13cf9ba0aeb135151bc1f4efd5b" translate="yes" xml:space="preserve">
          <source>SQLITE_SERIALIZE_NOCOPY</source>
          <target state="translated">SQLITE_SERIALIZE_NOCOPY</target>
        </trans-unit>
        <trans-unit id="5833f77c489e96f83b5721da4411840c512396c4" translate="yes" xml:space="preserve">
          <source>SQLITE_SERIALIZE_NOCOPY means that &lt;a href=&quot;#sqlite3_serialize&quot;&gt;sqlite3_serialize()&lt;/a&gt; will return a pointer to contiguous in-memory database that it is currently using, without making a copy of the database. If SQLite is not currently using a contiguous in-memory database, then this option causes &lt;a href=&quot;#sqlite3_serialize&quot;&gt;sqlite3_serialize()&lt;/a&gt; to return a NULL pointer. SQLite will only be using a contiguous in-memory database if it has been initialized by a prior call to &lt;a href=&quot;#sqlite3_deserialize&quot;&gt;sqlite3_deserialize()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8622b0f7d815989b7549ad8f6f4064afa19d44a" translate="yes" xml:space="preserve">
          <source>SQLITE_SERIALIZE_NOCOPY means that &lt;a href=&quot;serialize&quot;&gt;sqlite3_serialize()&lt;/a&gt; will return a pointer to contiguous in-memory database that it is currently using, without making a copy of the database. If SQLite is not currently using a contiguous in-memory database, then this option causes &lt;a href=&quot;serialize&quot;&gt;sqlite3_serialize()&lt;/a&gt; to return a NULL pointer. SQLite will only be using a contiguous in-memory database if it has been initialized by a prior call to &lt;a href=&quot;deserialize&quot;&gt;sqlite3_deserialize()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d29b312b3a7e4a9021c9aa66397b5845bb19e40a" translate="yes" xml:space="preserve">
          <source>SQLITE_SESSION_CONFIG_STRMSIZE</source>
          <target state="translated">SQLITE_SESSION_CONFIG_STRMSIZE</target>
        </trans-unit>
        <trans-unit id="378eedc97aab87805ae3e5bfb07b1659478fae83" translate="yes" xml:space="preserve">
          <source>SQLITE_SHM_EXCLUSIVE</source>
          <target state="translated">SQLITE_SHM_EXCLUSIVE</target>
        </trans-unit>
        <trans-unit id="7134a9620666172ba8d211cbd25284eb858959a7" translate="yes" xml:space="preserve">
          <source>SQLITE_SHM_LOCK</source>
          <target state="translated">SQLITE_SHM_LOCK</target>
        </trans-unit>
        <trans-unit id="9f67a3a04ebcddee02aa2454e33a4bc0579eee7b" translate="yes" xml:space="preserve">
          <source>SQLITE_SHM_LOCK | SQLITE_SHM_EXCLUSIVE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24413244e88f83eef08a16b4c6f5b8dae1337ed8" translate="yes" xml:space="preserve">
          <source>SQLITE_SHM_LOCK | SQLITE_SHM_SHARED</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b2464167a93315bbcba1bef7a1ed066b4888c2e" translate="yes" xml:space="preserve">
          <source>SQLITE_SHM_NLOCK</source>
          <target state="translated">SQLITE_SHM_NLOCK</target>
        </trans-unit>
        <trans-unit id="7cf4ff39ed6f131a7b4f76e9e0b4ee594fc0f7fb" translate="yes" xml:space="preserve">
          <source>SQLITE_SHM_SHARED</source>
          <target state="translated">SQLITE_SHM_SHARED</target>
        </trans-unit>
        <trans-unit id="fcb5cf55aa2fb32dd6d06378ce9dfdeac8f3f5bc" translate="yes" xml:space="preserve">
          <source>SQLITE_SHM_UNLOCK</source>
          <target state="translated">SQLITE_SHM_UNLOCK</target>
        </trans-unit>
        <trans-unit id="fd527d64486bd687395b74f5dd2d611beb190ad7" translate="yes" xml:space="preserve">
          <source>SQLITE_SHM_UNLOCK | SQLITE_SHM_EXCLUSIVE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="754d242e808e8be32e21c4faf9d074f8fb0b9099" translate="yes" xml:space="preserve">
          <source>SQLITE_SHM_UNLOCK | SQLITE_SHM_SHARED</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23f8fe0329bb5b4462b5e26f94d1e3b3245dd0f1" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID</source>
          <target state="translated">SQLITE_SOURCE_ID</target>
        </trans-unit>
        <trans-unit id="f336823c3d356ed6830c044424c357c51596d056" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;&quot;2015-10-16 17:31:12 767c1727fec4ce11b83f25b3f1bfcfe68a2c8b02&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0106dfaa94557e2aa8950a3b5216e3c517deb568" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2011-04-12 01:58:40 f9d43fa363d54beab6f45db005abac0a7c0c47a7&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb15549efa8620b7832f374b582e4fa56c61156a" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2011-04-13 14:40:25 a35e83eac7b185f4d363d7fa51677f2fdfa27695&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7afddff19e90321e060da6af45d2f166eea4f96" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2011-04-17 17:25:17 154ddbc17120be2915eb03edc52af1225eb7cb5e&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b023b2cbf6343392b3f76d6e999d12d00b2f8ff9" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2011-06-23 19:49:22 4374b7e83ea0a3fbc3691f9c0c936272862f32f2&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7696d95018aef3124ecdfe0c88d86d1969433544" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2011-06-28 17:39:05 af0d91adf497f5f36ec3813f04235a6e195a605f&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1982fdc77646cb64fcff13bdb877119c97fb2ce4" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2011-09-19 14:49:19 3e0da808d2f5b4d12046e05980ca04578f581177&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d3ce9609c2d70d134d27aaaafad61d28b24814a" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2011-11-01 00:52:41 c7c6050ef060877ebe77b41d959e9df13f8c9b5e&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d75a2b6678aecf56602bf2d0447c51be232ff8c" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2012-01-16 13:28:40 ebd01a8deffb5024a5d7494eef800d2366d97204&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4841f29f9a2cb8209e212ac304c4349a3d4da4e6" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2012-03-20 11:35:50 00bb9c9ce4f465e6ac321ced2a9d0062dc364669&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="958cd8c34715aed8de42d34cbe689a6f9be037f5" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2012-05-14 01:41:23 8654aa9540fe9fd210899d83d17f3f407096c004&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5f1d4a7478cbeadf3ac04635ca119c2291560a5" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2012-05-22 02:45:53 6d326d44fd1d626aae0e8456e5fa2049f1ce0789&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c2ebfe4fd6bb833885160a884ec174eefc5e5b8" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2012-06-11 02:05:22 f5b5a13f7394dc143aa136f1d4faba6839eaa6dc&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36aaf99fc142182ed290c1e2ceaf14bab4fd0da" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2012-09-03 15:42:36 c0d89d4a9752922f9e367362366efde4f1b06f2a&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88f31747d9c647f154654530fde361c47ff1eea6" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2012-10-04 19:37:12 091570e46d04e84b67228e0bdbcd6e1fb60c6bdb&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d762a6330bde8510e23eb3eb5b2b5fc4c5943c0" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2012-12-12 13:36:53 cd0b37c52658bfdf992b1e3dc467bae1835a94ae&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fda470fd59ec6cd366324fddd645e8b82b25440d" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2012-12-19 20:39:10 6b85b767d0ff7975146156a99ad673f2c1a23318&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="008969864f3fac2021f9c95e84801cab0fe5b241" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2013-01-09 11:53:05 c0e09560d26f0a6456be9dd3447f5311eb4f238f&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfe3536c66603b6864719f2c4edf746f73040c81" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2013-03-18 11:39:23 66d5f2b76750f3520eb7a495f6247206758f5b90&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="231fedb3f761996fc56457238e54f37bde86ad6d" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2013-03-29 13:44:34 527231bc67285f01fb18d4451b28f61da3c4e39d&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bc2c2387a95e144946b427f20f66cf79da9f4de" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2013-04-12 11:52:43 cbea02d93865ce0e06789db95fd9168ebac970c7&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0270cd263acfd198c23a13a26a5dcf8751c84ee8" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2013-05-20 00:56:22 118a3b35693b134d56ebd780123b7fd6f1497668&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d7d4b39867aa54c0f7bc2cf8ab4d96dae3e93e3" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2013-08-26 04:50:08 f64cd21e2e23ed7cff48f7dafa5e76adde9321c2&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="295aa11d891bd0029ed097b239d02699d6f89347" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2013-08-29 17:35:01 352362bc01660edfbda08179d60f09e2038a2f49&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36bbe721a604a3e79d56d4976a4de9f07a8c2b66" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2013-09-03 17:11:13 7dd4968f235d6e1ca9547cda9cf3bd570e1609ef&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23ac69463dea482246cfd99d04f917fbf5d70dbb" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2013-10-17 12:57:35 c78be6d786c19073b3a6730dfe3fb1be54f5657a&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="150abdda734a2474a7de714f4ac1dd941c40af26" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2013-12-06 14:53:30 27392118af4c38c5203a04b8013e1afdb1cebd0d&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dbf82c67ef59a74a41046ebcd0826c5abbd5dbe" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2014-02-03 13:52:03 e816dd924619db5f766de6df74ea2194f3e3b538&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f458f3b5e81ace5a0af9b52c75c00051711da08" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2014-02-11 14:52:19 ea3317a4803d71d88183b29f1d3086f46d68a00e&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69530b3a88a5708571e80ca6df11a9e3aa265e3c" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2014-03-10 12:20:37 530a1ee7dc2435f80960ce4710a3c2d2bfaaccc5&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b4dcf06fc0a7be1eea2711789e8e339f5c2829" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2014-03-11 15:27:36 018d317b1257ce68a92908b05c9c7cf1494050d0&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e2251a8c72ca8e3c5b7488891847d4b254e8d16" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2014-03-26 18:51:19 02ea166372bdb2ef9d8dfbb05e78a97609673a8e&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48641cd4f846c49d84c5113f381cf017344fa04f" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2014-04-03 16:53:12 a611fa96c4a848614efe899130359c9f6fb889c3&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3174a6c1a0981cd0787f8f3d73bbd21d586544a" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2014-06-04 14:06:34 b1ed4f2a34ba66c29b130f8d13e9092758019212&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0695e935836aabd228bd14572e810d551f5ac942" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2014-08-15 11:46:33 9491ba7d738528f168657adb43a198238abde19e&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aad7a6b04a8b4ec84e07ed8d648600ae7f9911b" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2014-10-17 11:24:17 e4ab094f8afce0817f4074e823fabe59fc29ebb4&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08b39b70ac29c20a57a3a16cee98ec19e63ebeec" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2014-10-29 13:59:56 3b7b72c4685aa5cf5e675c2c47ebec10d9704221&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24e768903ee69cf5473b5bd63f462dad6930736a" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2014-11-18 20:57:56 2ab564bf9655b7c7b97ab85cafc8a48329b27f93&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bd64bd37df82bfd04150891145015b752db13c2" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2014-12-05 22:29:24 647e77e853e81a5effeb4c33477910400a67ba86&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d98e0270a60545350e46b45ff4788d08bfb9a6e2" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2014-12-09 01:34:36 f66f7a17b78ba617acde90fc810107f34f1a1f2e&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="264bb195c9bc9bd7e05f8481be4ee0c518029383" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2015-01-16 12:08:06 7d68a42face3ab14ed88407d4331872f5b243fdf&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f359caea42abd3a2d02b53da06108b56171b609" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2015-01-20 16:51:25 f73337e3e289915a76ca96e7a05a1a8d4e890d55&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="738a45739c34ec8c2e11148dbd69862c907f1417" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2015-01-30 14:30:45 7757fc721220e136620a89c9d28247f28bbbc098&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8878f4af059c52d06d7fdc82329bc958de97a6b1" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2015-02-25 13:29:11 9d6c1880fb75660bbabd693175579529785f8a6b&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77f1f9fad2c534029a5ac864904f51ed82ff971c" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2015-04-08 12:16:33 8a8ffc862e96f57aa698f93de10dee28e69f6e09&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72959a237174e7a01f3fcb2e0dcf494c18f7eeb6" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2015-05-07 11:53:08 cf975957b9ae671f34bb65f049acf351e650d437&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b3452f8440b1ad45a8fe552096399e81101a6af" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2015-05-09 12:14:55 05b4b1f2a937c06c90db70c09890038f6c98ec40&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4659a8ea981159592c64f3192d036e59a445e2d2" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2015-05-20 18:17:19 2ef4f3a5b1d1d0c4338f8243d40a2452cc1f7fe4&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31a3bc430ff0e7968aac9e48e21a803582d1a1da" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2015-07-27 13:49:41 b8e92227a469de677a66da62e4361f099c0b79d0&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e892f74decc267556540d3295e5ad1f717285af2" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2015-07-29 20:00:57 cf538e2783e468bbc25e7cb2a9ee64d3e0e80b2f&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d762b0c0cded41a0667eed99d1d5e1bc79c4e95a" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2015-10-14 12:29:53 a721fc0d89495518fe5612e2e3bbc60befd2e90d&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd585b8f0b32b7c709610872b07e66d25f938d7f" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2015-11-02 18:31:45 bda77dda9697c463c3d0704014d51627fceee328&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acb7c6df7f4a7eec8b9502fd7e3b44516ad113df" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2016-01-06 11:01:07 fd0a50f0797d154fefff724624f00548b5320566&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="011f64af61cfdd2642b4aa9705f9780a763e3053" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2016-01-13 21:41:56 254419c36766225ca542ae873ed38255e3fb8588&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef46b9fc8c4e9566cc36a9d96075de997e91d4bc" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2016-01-20 15:27:19 17efb4209f97fb4971656086b138599a91a75ff9&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b55951bd122cb7fb91f1215a70b7c808d0d96da2" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2016-02-15 17:29:24 3d862f207e3adc00f78066799ac5a8c282430a5f&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6f99382d56eba761aa40e1efd24c32ddcdbee5b" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2016-03-03 16:17:53 f047920ce16971e573bc6ec9a48b118c9de2b3a7&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c78de64d54703a345a2cd6436432a2ce3e76a4fa" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2016-03-29 10:14:15 e9bb4cf40f4971974a74468ef922bdee481c988b&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="784073f4ba6928d9b0ebf020128126b235831621" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2016-04-08 15:09:49 fe7d3b75fe1bde41511b323925af8ae1b910bc4d&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee7d5fc0ca450b7d9e34f0778c058cbcf151709f" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2016-04-18 17:30:31 92dc59fd5ad66f646666042eb04195e3a61a9e8e&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3016af294da23659998cec01886bb75b9b82ed1" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2016-05-18 10:57:30 fc49f556e48970561d7ab6a2f24fdd7d9eb81ff2&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5151c0f91009ac3161fbf3d0c5b32b2f9934221b" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2016-08-08 13:40:27 d5e98057028abcf7217d0d2b2e29bbbcdf09d6de&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b9145d94ad8ac5e1fc8a674c45fcc5d23526a2" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2016-08-11 18:53:32 a12d8059770df4bca59e321c266410344242bf7b&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71c544d3e8b126dbfe60c5b23a333b6beb0cc2f9" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2016-09-12 18:50:49 29dbef4b8585f753861a36d6dd102ca634197bd6&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e3c9cf516c9b7feba0247cd1cdacbf5fd52e2e3" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2016-10-14 10:20:30 707875582fcba352b4906a595ad89198d84711d8&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a385a6e42216ea7902dd56d2646b5fa15d28908c" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2016-11-04 12:08:49 1136863c76576110e710dd5d69ab6bf347c65e36&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8b0be7feb3df932eaba581861f98eb08a8a7a76" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2016-11-28 19:13:37 bbd85d235f7037c6a033a9690534391ffeacecc8&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="552eb3e77851aee7503954f288a5f4664b054598" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2017-01-02 11:57:58 04ac0b75b1716541b2b97704f4809cb7ef19cccf&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68135b5985ded310c69a9d9eab2392eceabf513f" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2017-01-03 18:27:03 979f04392853b8053817a3eea2fc679947b437fd&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f039c011464f7476ccab811ad8fe292e80171eaa" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2017-01-06 16:32:41 a65a62893ca8319e89e48b8a38cf8a59c69a8209&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3160ebfbbc740077dfe4eadf41c7c24b1da5cd77" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2017-02-13 16:02:40 ada05cfa86ad7f5645450ac7a2a21c9aa6e57d2c&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307c64255a7fb44e94afd98ac7e97846a84c3b5a" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2017-03-28 18:48:43 424a0d380332858ee55bdebc4af3789f74e70a2b3ba1cf29d84b9b4bcf3e2e37&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e94dfa4d5f28f270d013c7d9d3d1f8b10726e9b" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2017-05-22 13:58:13 28a94eb282822cad1d1420f2dad6bf65e4b8b9062eda4a0b9ee8270b2c608e40&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6d06c05b861ce80399c4992d906e513a05a963a" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2017-05-24 13:08:33 f6d7b988f40217821a382bc298180e9e6794f3ed79a83c6ef5cae048989b3f86&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ad5ea65619b75ec3fcb9f2c6c748549cf19bae" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2017-05-25 16:50:27 edb4e819b0c058c7d74d27ebd14cc5ceb2bad6a6144a486a970182b7afe3f8b9&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cfb71b1c6e49a77b1064e6ff9cf84f1ace7f74d" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2017-06-08 14:26:16 0ee482a1e0eae22e08edc8978c9733a96603d4509645f348ebf55b579e89636b&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d4cf7a48740f5d77f13a890cc62fe8ee041fe47" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2017-06-16 13:41:15 77bb46233db03a3338bacf7e56f439be3dfd1926ea0c44d252eeafa7a7b31c06&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e106b7ad94e9800044d54b979d86f20fab70e8fa" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2017-06-17 09:59:36 036ebf729e4b21035d7f4f8e35a6f705e6bf99887889e2dc14ebf2242e7930dd&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a376339f59b27da1267a188f28b79978d65cfd1" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2017-08-01 13:24:15 9501e22dfeebdcefa783575e47c60b514d7c2e0cad73b2a496c0bc4b680900a8&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e6b8f1906a37701a529aef1c59677c50e9acd4f" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2017-08-24 16:21:36 8d3a7ea6c5690d6b7c3767558f4f01b511c55463e3f9e64506801fe9b74dce34&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d44a12a5f2a89b49bef9718d96da21d78ea22668" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2017-10-24 18:55:49 1a584e499906b5c87ec7d43d4abce641fdf017c42125b083109bc77c4de48827&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e80838becc758e16a63ab73b5d5731d31020d390" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2018-01-22 18:45:57 0c55d179733b46d8d0ba4d88e01a25e10677046ee3da1d5b1581e86726f2171d&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa1f3a7e17f07110f7822e64a23025a20aba6cc0" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2018-04-02 11:04:16 736b53f57f70b23172c30880186dce7ad9baa3b74e3838cae5847cffb98f5cd2&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f0f1d050657a07c91f8621eca68d65f68fedba" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2018-04-10 17:39:29 4bb2294022060e61de7da5c227a69ccd846ba330e31626ebcd59a94efd148b3b&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa1d586c3acea8f15e8f6c919d881bbe9661dca2" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2018-06-04 19:24:41 c7ee0833225bfd8c5ec2f9bf62b97c4e04d03bd9566366d5221ac8fb199a87ca&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0db4c667153fba21a992b2579e81065ffcfecc3" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2018-09-15 04:01:47 b63af6c3bd33152742648d5d2e8dc5d5fcbcdd27df409272b6aea00a6f761760&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89652765420b417f9653cec0b857ca6325bc12b8" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2018-09-18 20:20:44 2ac9003de44da7dafa3fbb1915ac5725a9275c86bf2f3b7aa19321bf1460b386&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac8ea56696055d14858dc56d8a55bfa38afe1641" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2018-09-25 19:08:10 fb90e7189ae6d62e77ba3a308ca5d683f90bbe633cf681865365b8e92792d1c7&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e50ed3e89558570436bdc8cf50bd2cad3601541" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2018-11-05 20:37:38 89e099fbe5e13c33e683bef07361231ca525b88f7907be7092058007b75036f2&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a5879210b65939c52c3770620552a9be20b4b65" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2018-12-01 12:34:55 bf8c1b2b7a5960c282e543b9c293686dccff272512d08865f4600fb58238b4f9&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47148ca252c8e9a6d8cbc95d31137f9c58573c35" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: &quot;2019-02-07 17:02:52 97744701c3bd414e6c9d7182639d8c2ce7cf124c4fce625071ae65658ac61713 &quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="931b756e60d26e4400f064d316aad96d6e83a08f" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: 2019-02-08 13:17:39 0eca3dd3d38b31c92b49ca2d311128b74584714d9e7de895b1a6286ef959a1dd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed73fc2a07e1f7890f0830d9bee2815b258d9172" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: 2019-04-16 19:49:53 884b4b7e502b4e991677b53971277adfaf0a04a284f8e483e2553d0f83156b50</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddcff6e991807abf7d17017417fefbb5739ef2c6" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: 2019-07-10 17:32:03 fc82b73eaac8b36950e527f12c4b5dc1e147e6f4ad2217ae43ad82882a88bfa6</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="695cc71a10a190b8bec1c1796f6e417074af33ad" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: 2019-10-04 15:03:17 c20a35336432025445f9f7e289d0cc3e4003fb17f45a4ce74c6269c407c6e09f</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42c8778646faaf6e48fe50320e0463c3dc295db1" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: 2019-10-10 20:19:45 18db032d058f1436ce3dea84081f4ee5a0f2259ad97301d43c426bc7f3df1b0b</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efd94aff51fd5227020910861e7db611d7f5a5ac" translate="yes" xml:space="preserve">
          <source>SQLITE_SOURCE_ID: bd49a8271d650fa89e446b42e513b595a717b9212c91dd384aab871fc1d0f6d7</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de335e14f8b01b6c06e35690594fb48fc9cc8af4" translate="yes" xml:space="preserve">
          <source>SQLITE_STATIC</source>
          <target state="translated">SQLITE_STATIC</target>
        </trans-unit>
        <trans-unit id="c8d17d7e7fecddbe3cf2e853b87637edaee6e60f" translate="yes" xml:space="preserve">
          <source>SQLITE_STATUS_MALLOC_COUNT</source>
          <target state="translated">SQLITE_STATUS_MALLOC_COUNT</target>
        </trans-unit>
        <trans-unit id="364bf0f625676746e68af8be7733708f5ba24a35" translate="yes" xml:space="preserve">
          <source>SQLITE_STATUS_MALLOC_SIZE</source>
          <target state="translated">SQLITE_STATUS_MALLOC_SIZE</target>
        </trans-unit>
        <trans-unit id="1c01316efd4e49c6f8ade92e23029c21ae074fb2" translate="yes" xml:space="preserve">
          <source>SQLITE_STATUS_MEMORY_USED</source>
          <target state="translated">SQLITE_STATUS_MEMORY_USED</target>
        </trans-unit>
        <trans-unit id="710526ba2bde87648e1c37854fb5f089d0abe6d2" translate="yes" xml:space="preserve">
          <source>SQLITE_STATUS_PAGECACHE_OVERFLOW</source>
          <target state="translated">SQLITE_STATUS_PAGECACHE_OVERFLOW</target>
        </trans-unit>
        <trans-unit id="14d57e2dfc3b3560a9cfaa627a1e085bf28d0031" translate="yes" xml:space="preserve">
          <source>SQLITE_STATUS_PAGECACHE_SIZE</source>
          <target state="translated">SQLITE_STATUS_PAGECACHE_SIZE</target>
        </trans-unit>
        <trans-unit id="954fa7a5f4cae06bd93a6da0150f2894ce2dc367" translate="yes" xml:space="preserve">
          <source>SQLITE_STATUS_PAGECACHE_USED</source>
          <target state="translated">SQLITE_STATUS_PAGECACHE_USED</target>
        </trans-unit>
        <trans-unit id="9ae9643a7f1751db9478ae74867743ba9288a111" translate="yes" xml:space="preserve">
          <source>SQLITE_STATUS_PARSER_STACK</source>
          <target state="translated">SQLITE_STATUS_PARSER_STACK</target>
        </trans-unit>
        <trans-unit id="64a63df25cdf4aa4bdfa5fa5dc84c7f2460c92ab" translate="yes" xml:space="preserve">
          <source>SQLITE_STATUS_SCRATCH_OVERFLOW</source>
          <target state="translated">SQLITE_STATUS_SCRATCH_OVERFLOW</target>
        </trans-unit>
        <trans-unit id="c0efc0c6353da52fe013b0c520fa07d779a27df6" translate="yes" xml:space="preserve">
          <source>SQLITE_STATUS_SCRATCH_SIZE</source>
          <target state="translated">SQLITE_STATUS_SCRATCH_SIZE</target>
        </trans-unit>
        <trans-unit id="22165bc3c3e43570598a2479a6d562cec9e418ce" translate="yes" xml:space="preserve">
          <source>SQLITE_STATUS_SCRATCH_USED</source>
          <target state="translated">SQLITE_STATUS_SCRATCH_USED</target>
        </trans-unit>
        <trans-unit id="e9931a8b6667942a16944ab153ae724072f9b0d8" translate="yes" xml:space="preserve">
          <source>SQLITE_STMTSTATUS_AUTOINDEX</source>
          <target state="translated">SQLITE_STMTSTATUS_AUTOINDEX</target>
        </trans-unit>
        <trans-unit id="982654ff630b526cee3aa0f2f7fd1d7aedaa9774" translate="yes" xml:space="preserve">
          <source>SQLITE_STMTSTATUS_FULLSCAN_STEP</source>
          <target state="translated">SQLITE_STMTSTATUS_FULLSCAN_STEP</target>
        </trans-unit>
        <trans-unit id="bd619792de7e066e79ad4bbd82fd6fe26eefe7c0" translate="yes" xml:space="preserve">
          <source>SQLITE_STMTSTATUS_MEMUSED</source>
          <target state="translated">SQLITE_STMTSTATUS_MEMUSED</target>
        </trans-unit>
        <trans-unit id="a4e71e10119f1865730366a4d27bd34a65b60cf6" translate="yes" xml:space="preserve">
          <source>SQLITE_STMTSTATUS_REPREPARE</source>
          <target state="translated">SQLITE_STMTSTATUS_REPREPARE</target>
        </trans-unit>
        <trans-unit id="68b4974de66876f4629465c686dfaa0e9f902f5b" translate="yes" xml:space="preserve">
          <source>SQLITE_STMTSTATUS_RUN</source>
          <target state="translated">SQLITE_STMTSTATUS_RUN</target>
        </trans-unit>
        <trans-unit id="e54ac7a4f1ff38dbc58ffa85967862ec998423a3" translate="yes" xml:space="preserve">
          <source>SQLITE_STMTSTATUS_SORT</source>
          <target state="translated">SQLITE_STMTSTATUS_SORT</target>
        </trans-unit>
        <trans-unit id="6666bbb76ec24bd8b24b758ec271694c9e0e078b" translate="yes" xml:space="preserve">
          <source>SQLITE_STMTSTATUS_VM_STEP</source>
          <target state="translated">SQLITE_STMTSTATUS_VM_STEP</target>
        </trans-unit>
        <trans-unit id="47c26b2574fff7073f5c8a8394d7d637243b4a0e" translate="yes" xml:space="preserve">
          <source>SQLITE_SUBTYPE</source>
          <target state="translated">SQLITE_SUBTYPE</target>
        </trans-unit>
        <trans-unit id="e0df62231de5fa2485930754e8570226a97564e8" translate="yes" xml:space="preserve">
          <source>SQLITE_SYNC_DATAONLY</source>
          <target state="translated">SQLITE_SYNC_DATAONLY</target>
        </trans-unit>
        <trans-unit id="53bb6b1809495abfe236e9befb059f5a81b27dc5" translate="yes" xml:space="preserve">
          <source>SQLITE_SYNC_FULL</source>
          <target state="translated">SQLITE_SYNC_FULL</target>
        </trans-unit>
        <trans-unit id="b6739d53eb6c2ab426aff205608036ce9b0b631d" translate="yes" xml:space="preserve">
          <source>SQLITE_SYNC_NORMAL</source>
          <target state="translated">SQLITE_SYNC_NORMAL</target>
        </trans-unit>
        <trans-unit id="7582258f54518f1abb25efe015df7a8e7e5b3987" translate="yes" xml:space="preserve">
          <source>SQLITE_TEMP_STORE</source>
          <target state="translated">SQLITE_TEMP_STORE</target>
        </trans-unit>
        <trans-unit id="20ac0b94a3a96add92d1736b5446f82f987dd44e" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_ALWAYS</source>
          <target state="translated">SQLITE_TESTCTRL_ALWAYS</target>
        </trans-unit>
        <trans-unit id="c62b5ac183080b9bee104c985481efb92060d859" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_ASSERT</source>
          <target state="translated">SQLITE_TESTCTRL_ASSERT</target>
        </trans-unit>
        <trans-unit id="3c68804e2d7b5b407ca7853e64301a24bbb0f087" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS</source>
          <target state="translated">SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS</target>
        </trans-unit>
        <trans-unit id="e5be0e4ee64a476a1c27d2526a2db60e92636281" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_BITVEC_TEST</source>
          <target state="translated">SQLITE_TESTCTRL_BITVEC_TEST</target>
        </trans-unit>
        <trans-unit id="5d58effa12eb0a3601cf954f1208d848a4729ebd" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_BYTEORDER</source>
          <target state="translated">SQLITE_TESTCTRL_BYTEORDER</target>
        </trans-unit>
        <trans-unit id="64bc3f471351e2b2bd90d91cefbdf62ed5926876" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_EXPLAIN_STMT</source>
          <target state="translated">SQLITE_TESTCTRL_EXPLAIN_STMT</target>
        </trans-unit>
        <trans-unit id="9114799d331846591a3d00a2566763dd185f9404" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS</source>
          <target state="translated">SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS</target>
        </trans-unit>
        <trans-unit id="3919629d3064baef2f8cb81d826a3942595ce723" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_FAULT_INSTALL</source>
          <target state="translated">SQLITE_TESTCTRL_FAULT_INSTALL</target>
        </trans-unit>
        <trans-unit id="88408bc3275512da9393d40455a9bc1834e8550c" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_FIRST</source>
          <target state="translated">SQLITE_TESTCTRL_FIRST</target>
        </trans-unit>
        <trans-unit id="062722bb0bcf0e5199d5d6a3387c4577e3ddc243" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_IMPOSTER</source>
          <target state="translated">SQLITE_TESTCTRL_IMPOSTER</target>
        </trans-unit>
        <trans-unit id="af3c12b1163bfed021625d36430e3de3f8e6cd0c" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_INTERNAL_FUNCTIONS</source>
          <target state="translated">SQLITE_TESTCTRL_INTERNAL_FUNCTIONS</target>
        </trans-unit>
        <trans-unit id="c246c2b218eec14501442ea58121ae6a5c07a15c" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_ISINIT</source>
          <target state="translated">SQLITE_TESTCTRL_ISINIT</target>
        </trans-unit>
        <trans-unit id="8af4a6a2003756f853c1fd3d9e1f07c411798787" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_ISKEYWORD</source>
          <target state="translated">SQLITE_TESTCTRL_ISKEYWORD</target>
        </trans-unit>
        <trans-unit id="d9d45554d2c77df42a197541278fc49d105eead5" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_LAST</source>
          <target state="translated">SQLITE_TESTCTRL_LAST</target>
        </trans-unit>
        <trans-unit id="e42c7f8e5ab00563e3e2ad25ec85c16fc929fbca" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_LOCALTIME_FAULT</source>
          <target state="translated">SQLITE_TESTCTRL_LOCALTIME_FAULT</target>
        </trans-unit>
        <trans-unit id="16fd42975d4aa05f4a6175850ae34996e7442a6a" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_NEVER_CORRUPT</source>
          <target state="translated">SQLITE_TESTCTRL_NEVER_CORRUPT</target>
        </trans-unit>
        <trans-unit id="540315593f5b01abf99f4ffa2612c56841981632" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD</source>
          <target state="translated">SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD</target>
        </trans-unit>
        <trans-unit id="f2868d45bde258105945b744148b2cce18d76f2a" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_OPTIMIZATIONS</source>
          <target state="translated">SQLITE_TESTCTRL_OPTIMIZATIONS</target>
        </trans-unit>
        <trans-unit id="b22b6c179da52232b2aaaa7b1ac88df70237e082" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_PARSER_COVERAGE</source>
          <target state="translated">SQLITE_TESTCTRL_PARSER_COVERAGE</target>
        </trans-unit>
        <trans-unit id="f79893f5abe6f9f2e10cbd1f2964b432cb9f0a32" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_PENDING_BYTE</source>
          <target state="translated">SQLITE_TESTCTRL_PENDING_BYTE</target>
        </trans-unit>
        <trans-unit id="4934a42fa7a39d2f8a18d832bc762946f1f86fed" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_PRNG_RESET</source>
          <target state="translated">SQLITE_TESTCTRL_PRNG_RESET</target>
        </trans-unit>
        <trans-unit id="09c27499b5602e6e064e966d31d81ac7798c2f5a" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_PRNG_RESTORE</source>
          <target state="translated">SQLITE_TESTCTRL_PRNG_RESTORE</target>
        </trans-unit>
        <trans-unit id="1d6852e58862d8e2d9d631d93a4060ec67b4d86e" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_PRNG_SAVE</source>
          <target state="translated">SQLITE_TESTCTRL_PRNG_SAVE</target>
        </trans-unit>
        <trans-unit id="a48bee1fcc506f7113033ba4cc0b3ca47d7ecf25" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_PRNG_SEED</source>
          <target state="translated">SQLITE_TESTCTRL_PRNG_SEED</target>
        </trans-unit>
        <trans-unit id="25126b98dd334e654cfdf3494da0251ca7109d1f" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_RESERVE</source>
          <target state="translated">SQLITE_TESTCTRL_RESERVE</target>
        </trans-unit>
        <trans-unit id="a0f6b8fa73d669805d55830fcfd3fa1aa40dbd48" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_RESULT_INTREAL</source>
          <target state="translated">SQLITE_TESTCTRL_RESULT_INTREAL</target>
        </trans-unit>
        <trans-unit id="df17d2b765b69784a5e9858f1312b16abd6983c5" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_SCRATCHMALLOC</source>
          <target state="translated">SQLITE_TESTCTRL_SCRATCHMALLOC</target>
        </trans-unit>
        <trans-unit id="4278d1e676062b2f03dcb652e83b5c93f15c1ddb" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_SORTER_MMAP</source>
          <target state="translated">SQLITE_TESTCTRL_SORTER_MMAP</target>
        </trans-unit>
        <trans-unit id="c4a62393fc1267e27b98af9b770b950da1678905" translate="yes" xml:space="preserve">
          <source>SQLITE_TESTCTRL_VDBE_COVERAGE</source>
          <target state="translated">SQLITE_TESTCTRL_VDBE_COVERAGE</target>
        </trans-unit>
        <trans-unit id="44906c281ced58f16acda2a7d4e0ca2a5dff04c7" translate="yes" xml:space="preserve">
          <source>SQLITE_TEXT</source>
          <target state="translated">SQLITE_TEXT</target>
        </trans-unit>
        <trans-unit id="6a22641186dca5b30d5275b3b98b6ebd9e7de52d" translate="yes" xml:space="preserve">
          <source>SQLITE_TOOBIG</source>
          <target state="translated">SQLITE_TOOBIG</target>
        </trans-unit>
        <trans-unit id="4ee55ecc256cd7c778bc3d3f69ef43bd63463318" translate="yes" xml:space="preserve">
          <source>SQLITE_TOOBIG (18)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4e5ebdeda76707272bfc9002655c9cd6cbf1b8d" translate="yes" xml:space="preserve">
          <source>SQLITE_TRACE</source>
          <target state="translated">SQLITE_TRACE</target>
        </trans-unit>
        <trans-unit id="0545d3ec5e4feded82d85a97ca847034d1e43d58" translate="yes" xml:space="preserve">
          <source>SQLITE_TRACE_CLOSE</source>
          <target state="translated">SQLITE_TRACE_CLOSE</target>
        </trans-unit>
        <trans-unit id="31f468fdd2f1a15d72f637215e3602741f322b96" translate="yes" xml:space="preserve">
          <source>SQLITE_TRACE_PROFILE</source>
          <target state="translated">SQLITE_TRACE_PROFILE</target>
        </trans-unit>
        <trans-unit id="f80b0666b164076670f2c493966ba2c7468a8555" translate="yes" xml:space="preserve">
          <source>SQLITE_TRACE_ROW</source>
          <target state="translated">SQLITE_TRACE_ROW</target>
        </trans-unit>
        <trans-unit id="02ed43bc2170f787f32e30416eb1ea29a0860528" translate="yes" xml:space="preserve">
          <source>SQLITE_TRACE_STMT</source>
          <target state="translated">SQLITE_TRACE_STMT</target>
        </trans-unit>
        <trans-unit id="97044ec9deaacb524d1b3e919725b0441419f1f6" translate="yes" xml:space="preserve">
          <source>SQLITE_TRANSACTION</source>
          <target state="translated">SQLITE_TRANSACTION</target>
        </trans-unit>
        <trans-unit id="a0cc26feb827851867de36ca930bd4bae45f4454" translate="yes" xml:space="preserve">
          <source>SQLITE_TRANSIENT</source>
          <target state="translated">SQLITE_TRANSIENT</target>
        </trans-unit>
        <trans-unit id="4161a47b10769d4888276e97604984858a360f12" translate="yes" xml:space="preserve">
          <source>SQLITE_UPDATE</source>
          <target state="translated">SQLITE_UPDATE</target>
        </trans-unit>
        <trans-unit id="1f83363d7a83025ec83a03478985affaa414e88d" translate="yes" xml:space="preserve">
          <source>SQLITE_UTF16</source>
          <target state="translated">SQLITE_UTF16</target>
        </trans-unit>
        <trans-unit id="34297258255c11d225f3ecf0912081eb706f1325" translate="yes" xml:space="preserve">
          <source>SQLITE_UTF16BE</source>
          <target state="translated">SQLITE_UTF16BE</target>
        </trans-unit>
        <trans-unit id="e2b7686f165c687800dc366ffbf120e502abe217" translate="yes" xml:space="preserve">
          <source>SQLITE_UTF16LE</source>
          <target state="translated">SQLITE_UTF16LE</target>
        </trans-unit>
        <trans-unit id="3df5bd2418db0ee22dd9eadac23c37c1324d0edb" translate="yes" xml:space="preserve">
          <source>SQLITE_UTF16_ALIGNED</source>
          <target state="translated">SQLITE_UTF16_ALIGNED</target>
        </trans-unit>
        <trans-unit id="acbf9ff93da1fc37f5d9057a52998cdefec44184" translate="yes" xml:space="preserve">
          <source>SQLITE_UTF8</source>
          <target state="translated">SQLITE_UTF8</target>
        </trans-unit>
        <trans-unit id="c4a5835f185b3c4cde563657bd98c843aee4d1cf" translate="yes" xml:space="preserve">
          <source>SQLITE_VERSION</source>
          <target state="translated">SQLITE_VERSION</target>
        </trans-unit>
        <trans-unit id="6899878cc8ad2a6338c60000f23d9651c2e666dd" translate="yes" xml:space="preserve">
          <source>SQLITE_VERSION_NUMBER</source>
          <target state="translated">SQLITE_VERSION_NUMBER</target>
        </trans-unit>
        <trans-unit id="b76c92283b8e7ea36f92813c7d436fbaab0d8a66" translate="yes" xml:space="preserve">
          <source>SQLITE_VTAB_CONSTRAINT_SUPPORT</source>
          <target state="translated">SQLITE_VTAB_CONSTRAINT_SUPPORT</target>
        </trans-unit>
        <trans-unit id="343b5421796c1305f221fbb127508d007445dc2f" translate="yes" xml:space="preserve">
          <source>SQLITE_WARNING</source>
          <target state="translated">SQLITE_WARNING</target>
        </trans-unit>
        <trans-unit id="235f7b5009c008c78aa0deb67a116cd20ec21205" translate="yes" xml:space="preserve">
          <source>SQLITE_WARNING (28)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6564082d7472bf03973dc1b955f6e875e28ad706" translate="yes" xml:space="preserve">
          <source>SQLITE_WARNING messages are logged when database files are renamed or aliased in ways that can lead to database corruption. (See &lt;a href=&quot;howtocorrupt#unlink&quot;&gt;1&lt;/a&gt; and &lt;a href=&quot;howtocorrupt#alias&quot;&gt;2&lt;/a&gt; for additional information.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bbc6a732e3f06d4dd5f9ceda5d00a6bbb6db3e2" translate="yes" xml:space="preserve">
          <source>SQLITE_WARNING_AUTOINDEX</source>
          <target state="translated">SQLITE_WARNING_AUTOINDEX</target>
        </trans-unit>
        <trans-unit id="e939ae7e8e4319d0f301ff603b2aaea0629266f3" translate="yes" xml:space="preserve">
          <source>SQLITE_WARNING_AUTOINDEX (284)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07e9c69bb00233cbae1df0ad9a3fd08ee23e5f4" translate="yes" xml:space="preserve">
          <source>SQLITE_WIN32_DATA_DIRECTORY_TYPE</source>
          <target state="translated">SQLITE_WIN32_DATA_DIRECTORY_TYPE</target>
        </trans-unit>
        <trans-unit id="5736960c5879b6f182131f7b64650a61d283dcd4" translate="yes" xml:space="preserve">
          <source>SQLITE_WIN32_TEMP_DIRECTORY_TYPE</source>
          <target state="translated">SQLITE_WIN32_TEMP_DIRECTORY_TYPE</target>
        </trans-unit>
        <trans-unit id="9f09ccbd1cfb65aced3eb531305e671e40b95dd3" translate="yes" xml:space="preserve">
          <source>SQLite</source>
          <target state="translated">SQLite</target>
        </trans-unit>
        <trans-unit id="0ee6897a63e8bcce0343bccf65961c26cf39fad3" translate="yes" xml:space="preserve">
          <source>SQLite (like all other SQL database engines) can also use indices to satisfy the ORDER BY clauses in a query, in addition to expediting lookup. In other words, indices can be used to speed up sorting as well as searching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454b3170dd9a7850000a7fb41552c72548295c87" translate="yes" xml:space="preserve">
          <source>SQLite 2.7.6 (nosync):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5202c623bc64e331649dc08a46874673d7cd53e" translate="yes" xml:space="preserve">
          <source>SQLite 2.7.6 is often faster (sometimes more than twice as fast) than MySQL 3.23.41 for most common operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42b71672cc5ded40af2d01ec67702d70296a0546" translate="yes" xml:space="preserve">
          <source>SQLite 2.7.6 is significantly faster (sometimes as much as 10 or 20 times faster) than the default PostgreSQL 7.1.3 installation on RedHat 7.2 for most common operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="108ee3d271b7f3fc16aea555b557917012515547" translate="yes" xml:space="preserve">
          <source>SQLite 2.7.6:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ef0b9a67aa20dc71089a3f43941abb5c22100a1" translate="yes" xml:space="preserve">
          <source>SQLite &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connections&lt;/a&gt; make many small and short-lived memory allocations. This occurs most commonly when compiling SQL statements using &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2()&lt;/a&gt; but also to a lesser extent when running &lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statements&lt;/a&gt; using &lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step()&lt;/a&gt;. These small memory allocations are used to hold things such as the names of tables and columns, parse tree nodes, individual query results values, and B-Tree cursor objects. There are consequently many calls to malloc() and free() - so many calls that malloc() and free() end up using a significant fraction of the CPU time assigned to SQLite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731b1d9c34f364b359b82e5e6a5706a201a76b4a" translate="yes" xml:space="preserve">
          <source>SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_0_0.html&quot;&gt;Version 3.0.0&lt;/a&gt; introduced a new locking and journaling mechanism designed to improve concurrency over SQLite version 2 and to reduce the writer starvation problem. The new mechanism also allows atomic commits of transactions involving multiple database files. This document describes the new locking mechanism. The intended audience is programmers who want to understand and/or modify the pager code and reviewers working to verify the design of SQLite version 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d2fb79be7f745edcd94390161e203a795104a6f" translate="yes" xml:space="preserve">
          <source>SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_5_0.html&quot;&gt;version 3.5.0&lt;/a&gt; introduced a &lt;a href=&quot;34to35&quot;&gt;new OS interface layer&lt;/a&gt; that provided an abstraction of the underlying operating system. This was an important innovation and has proven to be helpful in porting and maintaining SQLite. However, the developers have discovered some minor flaws in the original &quot;virtual file system&quot; design introduced in version 3.5.0 and so SQLite 3.6.0 includes some small incompatible changes to address these flaws.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16aa6213ab4ca9dd666c38db2ad62267d742fe3a" translate="yes" xml:space="preserve">
          <source>SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_6_1.html&quot;&gt;version 3.6.1&lt;/a&gt; (2008-08-06) introduced the lookaside memory allocator to help reduce the memory allocation load. In the lookaside allocator, each &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; preallocates a single large chunk of memory (typically in the range of 60 to 120 kilobytes) and divides that chunk up into small fixed-size &quot;slots&quot; of around 100 to 1000 byte each. This becomes the lookaside memory pool. Thereafter, memory allocations associated with the &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; and that are not too large are satisfied using one of the lookaside pool slots rather than by calling the general-purpose memory allocator. Larger allocations continue to use the general-purpose memory allocator, as do allocations that occur when the lookaside pool slots are all checked out. But in many cases, the memory allocations are small enough and there are few enough outstanding that the new memory requests can be satisfied from the lookaside pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08b6cbcabbd6e71be72f53afc70af79412d77457" translate="yes" xml:space="preserve">
          <source>SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_8_2.html&quot;&gt;version 3.8.2&lt;/a&gt; (2013-12-06) or later is necessary in order to use a WITHOUT ROWID table. An attempt to open a database that contains one or more WITHOUT ROWID tables using an earlier version of SQLite will result in a &quot;malformed database schema&quot; error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e86e2833db1abf49e8061aaa2cd583e95133d97" translate="yes" xml:space="preserve">
          <source>SQLite &lt;a href=&quot;lang_select#crossjoin&quot;&gt;treats the CROSS JOIN operator specially&lt;/a&gt;. The CROSS JOIN operator is commutative in theory. But SQLite chooses to never reorder tables in a CROSS JOIN. This provides a mechanism by which the programmer can force SQLite to choose a particular loop nesting order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bbb7536ee31c5a80721eae98fa10519f1ad8533" translate="yes" xml:space="preserve">
          <source>SQLite And 8+3 Filenames</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d4ce9c3b2bbe3c99f8642fe06d326e27f53052" translate="yes" xml:space="preserve">
          <source>SQLite Archive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c2e4c767e501295b07044a0be089e468b1c54e4" translate="yes" xml:space="preserve">
          <source>SQLite Archive Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b4826d6cd13e751ecf395b030c78611c772164" translate="yes" xml:space="preserve">
          <source>SQLite Archive smaller than ZIP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51574f80326ace266a8bf5040636cb259e147450" translate="yes" xml:space="preserve">
          <source>SQLite As An Application File Format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2eb63f481d4cfa9928a76da8d2a3e4d7f83d8bb" translate="yes" xml:space="preserve">
          <source>SQLite As The Application File Format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a3178c3074df690a5eb7e97c76ac53d45c44383" translate="yes" xml:space="preserve">
          <source>SQLite Assumptions About Powersafe Overwrite</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="049b16eaba216715a3e362ab05145ec23c0b6c0b" translate="yes" xml:space="preserve">
          <source>SQLite Autoincrement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08111684d7d4e09683b29110ad3d644fa9e33310" translate="yes" xml:space="preserve">
          <source>SQLite Backup API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0e7df52748eecbc45730ba392651b98c724763" translate="yes" xml:space="preserve">
          <source>SQLite C/C++ Reference Guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c92de27dd7389ec46eb38a11b845ea569a381c7d" translate="yes" xml:space="preserve">
          <source>SQLite Changes From Version 3.4.2 To 3.5.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c3be734136db1baee77887da69941fe29aa884" translate="yes" xml:space="preserve">
          <source>SQLite Changes From Version 3.5.9 To 3.6.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0444fc9f22bced4b2fff02fcfbe554ed7b1e5072" translate="yes" xml:space="preserve">
          <source>SQLite Database Speed Comparison</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8f472af0032f55957a6dc12f85bfe03df14036" translate="yes" xml:space="preserve">
          <source>SQLite Documentation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff713ff03124b24b867fcfe6378512d75f45ff5" translate="yes" xml:space="preserve">
          <source>SQLite FTS3 and FTS4 Extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb8dd4cb69443f463263e0baaae53f90fbc24c8e" translate="yes" xml:space="preserve">
          <source>SQLite FTS5 Extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2224f0faf91f0a51e1ba8f1cbb3ab37f2f712c36" translate="yes" xml:space="preserve">
          <source>SQLite File Database File Format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eac80f01ebeadc3031650b9aefac516bf6e0bbd" translate="yes" xml:space="preserve">
          <source>SQLite File IO Specification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77914a1b06d12241c0755a61b1c00302dcab6be7" translate="yes" xml:space="preserve">
          <source>SQLite Foreign Key Support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f65ccb959ceb3f4521413d9bdfa153476f97acaf" translate="yes" xml:space="preserve">
          <source>SQLite Frequently Asked Questions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e852f86b5d09751d115407b22c097c26c15c6357" translate="yes" xml:space="preserve">
          <source>SQLite In 5 Minutes Or Less</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fbb8bccf7dd8ebcb5b1089562fd0f1493f23b68" translate="yes" xml:space="preserve">
          <source>SQLite Is A Zero-Configuration Database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="166abc8c6f5c5da769b2d025b705df20e04ef92a" translate="yes" xml:space="preserve">
          <source>SQLite Is Serverless</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b3190a178d6342f9ee76ff056763fdb914c2573" translate="yes" xml:space="preserve">
          <source>SQLite Is Transactional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ee672eb31b5447a08bacf0b40a3605a0b7bc619" translate="yes" xml:space="preserve">
          <source>SQLite Keywords</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0504f17f4504d78de525defd78c85fa4ac14446" translate="yes" xml:space="preserve">
          <source>SQLite Library Footprint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b61cfd89697cf1e4c1606af934cf897a3a7e3c3" translate="yes" xml:space="preserve">
          <source>SQLite Runtime Status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2298bad6251daf42a2fd57b3cda73107d61fb64" translate="yes" xml:space="preserve">
          <source>SQLite Session Module C/C++ Interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="299b38a2c54499cac63ea1735d0f8e2caaea9a18" translate="yes" xml:space="preserve">
          <source>SQLite Shared-Cache Mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="677c15838e15871697707715489f6e66e916c277" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: aggregate-function-invocation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4691dc8275b1b7dcdfb4a74a779f10a2ef5bbd95" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: alter-table-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5b6c872a84846a12015354c09cd6f7d86efd461" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: analyze-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="684b2229f95587114a6593fd80991f4423d34aa8" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: attach-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3514b2655ab967d1d4d9c40e5e30807c7435ade" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: begin-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6cf986e37b92e0f71e4f25c33898b1f0f45dbcd" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: column-constraint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba9dd23d84d7e9bc75755c88603e6ac71390578" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: column-def</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae4bf7f9ac99e8a57e0ac8bbb59715b46801a120" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: column-name-list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35991e0b4057b986eeadf0cc45c155dc0f91c65a" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: comment-syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2e0ac0ef89c375d83c5b1384036f5b2516b9307" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: commit-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95d23da3bee6078ef612231be1cfa8f10f805f2e" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: common-table-expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039c1612ed78696f89317565d7e41d051338a692" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: compound-operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="728336d6ce396fb5d1623d810ae16f2b0450b6c0" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: compound-select-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb9e3604a676499a26de3609f97318d6f24b71ed" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: conflict-clause</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0443bffb822656183f2a577ef7880a0d4bd82031" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: create-index-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="708dc5d9fd291c969b1bd2640875f8d92f5e9f11" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: create-table-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="303fde63f397da7c4f8cbb6017ecd31afaf4ddfb" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: create-trigger-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8fb6d35aab37ca2af3cdac57b071efd02d6924c" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: create-view-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4889bbb657490dfcf4c3f5ba65751a10e51e723" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: create-virtual-table-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76067026e43105f05d6bff642ac214381ad9922a" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: cte-table-name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91e0a17a4c4f2bf18fcffb5ebc2e0e3a2cdf8562" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: delete-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d4d0e69a4f08fa8640faffc0b2d4299f162f2b7" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: delete-stmt-limited</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e90497d8998fdb3ccb26a77962c7bbcbf635bde9" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: detach-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91195854864f792e27abec14d3537b15c279bb14" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: drop-index-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85347359e1b4766f91b51c95ced69b0f3029b8b0" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: drop-table-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="621be33c7e22655bf397c677d9a95ce0336e9ff0" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: drop-trigger-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="855719862278805238899aaa962a1d7f018de7d9" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: drop-view-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="067a126b6088641ddc4fdcfa3722e62011bb4f51" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: expr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f140fca538ac6edd7ef2eee0de838e80a2d449e" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: factored-select-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f6b600e670fe7c00dc0b08eb62b4d324c84033" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: filter-clause</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba88876d319af8f2577df00c41efe0395f45bff9" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: foreign-key-clause</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd9de54f1cc00c8e574ac8953ad69298071208e7" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: frame-spec</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87d64c023e5e381103487db80f2868b5978714a7" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: indexed-column</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d4594d2848b2394bbefe5ea8217cc7e3c76f672" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: insert-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8577db36921d583cdcad51a5c03a4f6e97bffb21" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: join-clause</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba100e55d4db0adbf63a3bb9f3710458e0d827e" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: join-constraint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f1a5cc270acbe167090bf3cbafd62173aed97d" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: join-operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0bc2ede668fa14ed80b38fa0115bfb1ec4cad31" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: literal-value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d05cc0fdc4cf9429206e8f1323d48eb520a03d21" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: numeric-literal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bcdc034c5a8d5eea59002db151c0f81acb97578" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: ordering-term</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="664b6cb7705a6e43244b1416c9701b0b2b507bca" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: over-clause</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a238ba2cad4f605801c8b083f2572a2a958876d4" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: pragma-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81fe0e201877124c81cf3c039fede3b4583bfba3" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: pragma-value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="280eeaf5a048efcbfa18fbd4f149831662d48acd" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: qualified-table-name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6ef0134a6bc4d48f79e0039c929d4d37c652dc3" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: raise-function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a40e3d3c18f61cfd21291d4b84660edf656ce99" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: recursive-cte</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1d248b2a2ba6dd3ea14e6a9d4d79ed7f94444cf" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: reindex-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a13d31221e9d4037f421a6d37ea073fc63b695b8" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: release-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f08276238d08e10966ddb10944ae99158c816126" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: result-column</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69fe7851d9b587098d2b17109c11dc725ff51b70" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: rollback-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec796a9d19402e6e453aa86dc4dd4a673b51a97" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: savepoint-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="985f7fbb23c1934fca9c9349003183d72524c2d3" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: select-core</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce29139f5831e2f5e82346f67a1f683a7627f040" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: select-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45300c89b269b19c7948d6c1e6bfc93bae6db7b3" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: signed-number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2dddad4353873534c5a965851be336502d4f375" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: simple-function-invocation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e95eb7cbc0e5efb7cb3ea0b3ab2d164c6af1ea4b" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: simple-select-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c0ec00be423bb27ec90eee0603c0c511827c050" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: sql-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c5ec49d95e64968ffbc676a4ac0c92a033fdbfe" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: sql-stmt-list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9188ff0476af5124a331c5defa406d27d25456e" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: table-constraint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3004d1bb7f3075c9abc745d7922ef925affb2fa1" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: table-or-subquery</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="560c464a694343364d8c50f76894aebe3f735689" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: type-name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e649ec1aef1d598b439cb497e4a46afc39cbe73f" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: update-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06ff24e6ae0f0f3f737fc0fa722249611f0912bc" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: update-stmt-limited</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544b5efeb28fe81cb603bc870933ca21b5f35890" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: upsert-clause</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71070233d1585db4326c0f6451968d1c320c6cb9" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: vacuum-stmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1d004a43cadf321c4e18f1bbca885f5f177b4a4" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: window-defn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a465aee6a993a25486e8c76e81ed49d1553ea4b" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: window-function-invocation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b530b8fa9b84d9671440411981b99fb1eeb4e3f" translate="yes" xml:space="preserve">
          <source>SQLite Syntax: with-clause</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bfbbc2e777cd02dc1cf2d883ae13c1f62982d58" translate="yes" xml:space="preserve">
          <source>SQLite Test Harness #3 (hereafter &quot;TH3&quot;) is one of &lt;a href=&quot;testing#harnesses&quot;&gt;three test harnesses&lt;/a&gt; used for testing SQLite. TH3 meets the following objectives:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4c0058559ad2757e2f42dec76caf9ac8c7164ae" translate="yes" xml:space="preserve">
          <source>SQLite Unlock-Notify API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a028956a99a12bd048e1eeff4723ada12456d471" translate="yes" xml:space="preserve">
          <source>SQLite Version 3 Overview</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd96d83d414ccfb7bc5520b4ea64da03f619d463" translate="yes" xml:space="preserve">
          <source>SQLite Virtual File System</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6622991f94a6e3a971610a97b129a00df4671455" translate="yes" xml:space="preserve">
          <source>SQLite accepts both of the above. But, in an effort to be compatible with MySQL 3.x (which was one of the most widely used RDBMSes when SQLite was first being designed) SQLite will also interpret a double-quotes string as string literal if it does not match any valid identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7969bc0ef72affc99d4e83ba233f43547794f858" translate="yes" xml:space="preserve">
          <source>SQLite accomplishes these goals using the following techniques:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93485e58ca6a1adc30eee7bf094d9254f1bee763" translate="yes" xml:space="preserve">
          <source>SQLite adds new keywords from time to time when it takes on new features. So to prevent your code from being broken by future enhancements, you should normally quote any identifier that is an English language word, even if you do not have to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1be33c93281691f32c1348190378d0671224738" translate="yes" xml:space="preserve">
          <source>SQLite allocates space to hold all host parameters between 1 and the largest host parameter number used. Hence, an SQL statement that contains a host parameter like ?1000000000 would require gigabytes of storage. This could easily overwhelm the resources of the host machine. To prevent excessive memory allocations, the maximum value of a host parameter number is SQLITE_MAX_VARIABLE_NUMBER, which defaults to 999.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="028432208e1a28c564db5004c2abbc25db803bf5" translate="yes" xml:space="preserve">
          <source>SQLite allows &lt;a href=&quot;lang_expr#varparam&quot;&gt;bound parameters&lt;/a&gt; to appear in an SQL statement anywhere that a literal value is allowed. The values for these parameters are set using the &lt;a href=&quot;c3ref/bind_blob&quot;&gt;sqlite3_bind_...()&lt;/a&gt; family of APIs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="278782a5b168582474220ea63200b84c038c9dc8" translate="yes" xml:space="preserve">
          <source>SQLite allows &lt;a href=&quot;nulls&quot;&gt;NULL values&lt;/a&gt; to be stored in PRIMARY KEY columns. However, the session extension ignores all such rows. No changes affecting rows with one or more NULL values in PRIMARY KEY columns are recorded by the sessions module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ebacbcb8bf95caa1ee114063133ab4b95b55473" translate="yes" xml:space="preserve">
          <source>SQLite allows a &lt;a href=&quot;lang_expr#varparam&quot;&gt;parameter&lt;/a&gt; wherever a string literal, numeric constant, or NULL is allowed. (Parameters may not be used for column or table names.) A &lt;a href=&quot;lang_expr#varparam&quot;&gt;parameter&lt;/a&gt; takes one of the following forms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fdab0901a13bb73134edf1f5b43792bfd020d0d" translate="yes" xml:space="preserve">
          <source>SQLite allows a single &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; to talk to two or more database files simultaneously through the use of the &lt;a href=&quot;lang_attach&quot;&gt;ATTACH DATABASE&lt;/a&gt; command. When multiple database files are modified within a single transaction, all files are updated atomically. In other words, either all of the database files are updated or else none of them are. Achieving an atomic commit across multiple database files is more complex that doing so for a single file. This section describes how SQLite works that bit of magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc7a43eb476861ca4de0ab85bc340fdf021129ce" translate="yes" xml:space="preserve">
          <source>SQLite allows database files to have any desired filename extension, so an application can choose a custom filename extension for its own use, if desired. The &lt;a href=&quot;pragma#pragma_application_id&quot;&gt;application_id pragma&lt;/a&gt; can be used to set an &quot;Application ID&quot; integer in the database file so that tools like &lt;a href=&quot;http://www.darwinsys.com/file/&quot;&gt;file(1)&lt;/a&gt; can determine that the file is associated with your application and is not just a generic SQL database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dd980880596b1666ea5094593b639d4cc0c7ac5" translate="yes" xml:space="preserve">
          <source>SQLite allows row values to be expressed in two ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72c273d6d02f4047a096d5a6faa4aee763a76338" translate="yes" xml:space="preserve">
          <source>SQLite allows you to store BLOB data in any column, even columns that are declared to hold some other type. BLOBs can even be used as PRIMARY KEYs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a29650667127162de04d158b912a78c7b191fe0" translate="yes" xml:space="preserve">
          <source>SQLite also allows two or more SELECT statements to be joined as peers using operators UNION, UNION ALL, INTERSECT, and EXCEPT. These compound select statements are implemented using transient tables. The implementation is slightly different for each operator, but the basic ideas are the same. For an example we will use the EXCEPT operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="637b40631e98becd08eb5f7d6c42ce3df54984ba" translate="yes" xml:space="preserve">
          <source>SQLite also maintains a hard upper bound on the mmap_size. Attempts to increase the mmap_size above this hard upper bound (using &lt;a href=&quot;pragma#pragma_mmap_size&quot;&gt;PRAGMA mmap_size&lt;/a&gt;) will automatically cap the mmap_size at the hard upper bound. If the hard upper bound is zero, then memory mapped I/O is impossible. The hard upper bound can be set at compile-time using the &lt;a href=&quot;compile#max_mmap_size&quot;&gt;SQLITE_MAX_MMAP_SIZE&lt;/a&gt; macro. If &lt;a href=&quot;compile#max_mmap_size&quot;&gt;SQLITE_MAX_MMAP_SIZE&lt;/a&gt; is set to zero, then the code used to implement memory mapped I/O is omitted from the build. The hard upper bound is automatically set to zero on certain platforms (ex: OpenBSD) where memory mapped I/O does not work due to the lack of a unified buffer cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1b4fd5ebb0d7780ed8ecffd7a393ffca7213601" translate="yes" xml:space="preserve">
          <source>SQLite also supports continuous update. Instead of collecting changes in memory and then writing them to disk only on a File/Save action, changes can be written back to the disk as they occur. This avoids loss of work on a system crash or power failure. An &lt;a href=&quot;undoredo&quot;&gt;automated undo/redo stack&lt;/a&gt;, managed using triggers, can be kept in the on-disk database, meaning that undo/redo can occur across session boundaries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac820d2c8ac9fabacbf33e56fbf0619b4b852375" translate="yes" xml:space="preserve">
          <source>SQLite always constructs the loops in the same order as the tables appear in the FROM clause of the SELECT statement. The left-most table becomes the outer loop and the right-most table becomes the inner loop. It is possible, in theory, to reorder the loops in some circumstances to speed the evaluation of the join. But SQLite does not attempt this optimization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6d2ae6a0c05e99e10243796d37bf281d92ff6ce" translate="yes" xml:space="preserve">
          <source>SQLite always converts numbers into double-precision (64-bit) floats for comparison purposes. This means that a long sequence of digits that differ only in insignificant digits will compare equal if they are in a numeric column but will compare unequal if they are in a text column. We have:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5149f6fd20b777693e945883aade1a453a85108d" translate="yes" xml:space="preserve">
          <source>SQLite assumes that a file deletion is atomic from the point of view of a user process. By this we mean that if SQLite requests that a file be deleted and the power is lost during the delete operation, once power is restored either the file will exist completely with all if its original content unaltered, or else the file will not be seen in the filesystem at all. If after power is restored the file is only partially deleted, if some of its data has been altered or erased, or the file has been truncated but not completely removed, then database corruption will likely result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47cc3cb9abff9d6022223d946bdf388c686ec2a8" translate="yes" xml:space="preserve">
          <source>SQLite assumes that file deletion is an atomic operation from the point of view of a user process. If power fails in the middle of a file deletion, then after power is restored SQLite expects to see either the entire file with all of its original data intact, or it expects not to find the file at all. Transactions may not be atomic on systems that do not work this way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adec4e330b65c9b3e58a2c5af4b816aeb357f3e0" translate="yes" xml:space="preserve">
          <source>SQLite assumes that the detection and/or correction of bit errors caused by cosmic rays, thermal noise, quantum fluctuations, device driver bugs, or other mechanisms, is the responsibility of the underlying hardware and operating system. SQLite does not add any redundancy to the database file for the purpose of detecting corruption or I/O errors. SQLite assumes that the data it reads is exactly the same data that it previously wrote.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be735f717b7a7e354acc45a2112bfb053a9d4325" translate="yes" xml:space="preserve">
          <source>SQLite assumes that the operating system will buffer writes and that a write request will return before data has actually been stored in the mass storage device. SQLite further assumes that write operations will be reordered by the operating system. For this reason, SQLite does a &quot;flush&quot; or &quot;fsync&quot; operation at key points. SQLite assumes that the flush or fsync will not return until all pending write operations for the file that is being flushed have completed. We are told that the flush and fsync primitives are broken on some versions of Windows and Linux. This is unfortunate. It opens SQLite up to the possibility of database corruption following a power loss in the middle of a commit. However, there is nothing that SQLite can do to test for or remedy the situation. SQLite assumes that the operating system that it is running on works as advertised. If that is not quite the case, well then hopefully you will not lose power too often.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac5840b276383c5ab7ffbc04386838e9a3a1b34" translate="yes" xml:space="preserve">
          <source>SQLite assumes that when a file grows in length that the new file space originally contains garbage and then later is filled in with the data actually written. In other words, SQLite assumes that the file size is updated before the file content. This is a pessimistic assumption and SQLite has to do some extra work to make sure that it does not cause database corruption if power is lost between the time when the file size is increased and when the new content is written. The xDeviceCharacteristics method of the &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt; might indicate that the filesystem will always write the data before updating the file size. (This is the SQLITE_IOCAP_SAFE_APPEND property for those readers who are looking at the code.) When the xDeviceCharacteristics method indicates that files content is written before the file size is increased, SQLite can forego some of its pedantic database protection steps and thereby decrease the amount of disk I/O needed to perform a commit. The current implementation, however, makes no such assumptions for the default VFSes for Windows and Unix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f72e7e6a8e3533bba6109b9b427868c41f828eab" translate="yes" xml:space="preserve">
          <source>SQLite attempts to use an index to satisfy the ORDER BY clause of a query when possible. When faced with the choice of using an index to satisfy WHERE clause constraints or satisfying an ORDER BY clause, SQLite does the same cost analysis described above and chooses the index that it believes will result in the fastest answer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b4924fe5a0590164a78695840bbbd42f195a38" translate="yes" xml:space="preserve">
          <source>SQLite automatically frees the memory allocated by sqlite3_aggregate_context() when the aggregate query concludes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b3055b66526cbbe45b4800a2c0d18f447b730c9" translate="yes" xml:space="preserve">
          <source>SQLite automatically increments the schema-version whenever the schema changes. As each SQL statement runs, the schema version is checked to ensure that the schema has not changed since the SQL statement was &lt;a href=&quot;c3ref/prepare&quot;&gt;prepared&lt;/a&gt;. Subverting this mechanism by using &quot;PRAGMA schema_version&quot; may cause SQL statement to run using an obsolete schema, which can lead to incorrect answers and/or &lt;a href=&quot;howtocorrupt#cfgerr&quot;&gt;database corruption&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3020db6478f19a9532839179a12c2a9ed24e1db4" translate="yes" xml:space="preserve">
          <source>SQLite automatically serializes calls to the xInit method, so the xInit method need not be threadsafe. The xShutdown method is only called from &lt;a href=&quot;#sqlite3_initialize&quot;&gt;sqlite3_shutdown()&lt;/a&gt; so it does not need to be threadsafe either. All other methods must be threadsafe in multithreaded applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf570ddec15cfa93349d4a743e839e20376d5d4" translate="yes" xml:space="preserve">
          <source>SQLite automatically serializes calls to the xInit method, so the xInit method need not be threadsafe. The xShutdown method is only called from &lt;a href=&quot;initialize&quot;&gt;sqlite3_shutdown()&lt;/a&gt; so it does not need to be threadsafe either. All other methods must be threadsafe in multithreaded applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b53d5d709f2b8563b5c899f4b327d7464bad702f" translate="yes" xml:space="preserve">
          <source>SQLite can also do large and complex queries efficiently, just like client/server databases. But SQLite can do many smaller queries efficiently too. Application developers can use whichever technique works best for the task at hand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e87caa697e0258d2993af3a32d9b7e8cb861e14" translate="yes" xml:space="preserve">
          <source>SQLite can be compiled with or without mutexes. When the &lt;a href=&quot;../compile#threadsafe&quot;&gt;SQLITE_THREADSAFE&lt;/a&gt; C preprocessor macro is 1 or 2, mutexes are enabled and SQLite is threadsafe. When the &lt;a href=&quot;../compile#threadsafe&quot;&gt;SQLITE_THREADSAFE&lt;/a&gt; macro is 0, the mutexes are omitted. Without the mutexes, it is not safe to use SQLite concurrently from more than one thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="011026d39fd1e83a00c257ae9fee74aa8abebcc5" translate="yes" xml:space="preserve">
          <source>SQLite can be compiled with or without mutexes. When the &lt;a href=&quot;compile#threadsafe&quot;&gt;SQLITE_THREADSAFE&lt;/a&gt; C preprocessor macro is 1 or 2, mutexes are enabled and SQLite is threadsafe. When the &lt;a href=&quot;compile#threadsafe&quot;&gt;SQLITE_THREADSAFE&lt;/a&gt; macro is 0, the mutexes are omitted. Without the mutexes, it is not safe to use SQLite concurrently from more than one thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36cb69ad46f78c1ed8dd15f2baaaa36c57889f6a" translate="yes" xml:space="preserve">
          <source>SQLite can be configured to commit transactions by overwriting the journal header with zeros instead of deleting the journal file by setting the &quot;PERSIST&quot; journaling mode using the &lt;a href=&quot;pragma#pragma_journal_mode&quot;&gt;journal_mode&lt;/a&gt; PRAGMA. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80ddece7460eee85c8c3c249243bb3dbfbde484c" translate="yes" xml:space="preserve">
          <source>SQLite can be configured to invoke a callback function containing an error code and a terse error message whenever anomalies occur. This mechanism is very helpful in tracking obscure problems that occur rarely and in the field. Application developers are encouraged to take advantage of the error logging facility of SQLite in their products, as it is very low CPU and memory cost but can be a huge aid for debugging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81616a9223e74e96edfa97f31284e6d7c2ededd0" translate="yes" xml:space="preserve">
          <source>SQLite can be configured to make page cache memory allocations from a separate and distinct memory pool of fixed-size slots. This can have two advantages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="872ca116186d75a484f48dbcd06ae645c30cfafb" translate="yes" xml:space="preserve">
          <source>SQLite can pull a similar trick for a descending ORDER BY:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e65b704c4d79c568a9eb5907bffebebd829ede2d" translate="yes" xml:space="preserve">
          <source>SQLite can use row values in two contexts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0233fb6752b9903c64922ece01dc28610983e5af" translate="yes" xml:space="preserve">
          <source>SQLite commands are normally terminated by a semicolon. In the shell you can also use the word &quot;GO&quot; (case-insensitive) or a slash character &quot;/&quot; on a line by itself to end a command. These are used by SQL Server and Oracle, respectively. These won't work in &lt;b&gt;sqlite3_exec()&lt;/b&gt;, because the shell translates these into a semicolon before passing them to that function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c00500c2a2685e49d6f5ca17fcd6441b18a649d0" translate="yes" xml:space="preserve">
          <source>SQLite computes joins using nested loops, one loop for each table in the join. (Additional loops might be inserted for IN and OR operators in the WHERE clause. SQLite considers those too, but for simplicity we will ignore them in this essay.) One or more indexes might be used on each loop to speed the search, or a loop might be a &quot;full table scan&quot; that reads every row in the table. Thus query planning decomposes into two subtasks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7974ee005c7bea20e8549f294a1e5c666d87f59c" translate="yes" xml:space="preserve">
          <source>SQLite computes the entry point for the extension based on the extension filename. To override this choice, simply add the name of the extension as a second argument to the &quot;.load&quot; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e364fda4b28195b331863df02fe5a0c5e92edd6b" translate="yes" xml:space="preserve">
          <source>SQLite connections can open two kinds of transactions, read and write transactions. This is not done explicitly, a transaction is implicitly a read-transaction until it first writes to a database table, at which point it becomes a write-transaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb7f60f82c37c439853dbcce0278c6d68d992ca" translate="yes" xml:space="preserve">
          <source>SQLite considers NULL values to be smaller than any other values for sorting purposes. Hence, NULLs naturally appear at the beginning of an ASC order-by and at the end of a DESC order-by. This can be changed using the &quot;ASC NULLS LAST&quot; or &quot;DESC NULLS FIRST&quot; syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3c65750b414698c230a01a96245ecd4d646ee27" translate="yes" xml:space="preserve">
          <source>SQLite contains a high-quality pseudo-random number generator (PRNG) used to select random &lt;a href=&quot;../lang_createtable#rowid&quot;&gt;ROWIDs&lt;/a&gt; when inserting new records into a table that already uses the largest possible &lt;a href=&quot;../lang_createtable#rowid&quot;&gt;ROWID&lt;/a&gt;. The PRNG is also used for the build-in random() and randomblob() SQL functions. This interface allows applications to access the same PRNG for other purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f509851478b4c800f043c189999c977fd8cd102" translate="yes" xml:space="preserve">
          <source>SQLite contains a high-quality pseudo-random number generator (PRNG) used to select random &lt;a href=&quot;lang_createtable#rowid&quot;&gt;ROWIDs&lt;/a&gt; when inserting new records into a table that already uses the largest possible &lt;a href=&quot;lang_createtable#rowid&quot;&gt;ROWID&lt;/a&gt;. The PRNG is also used for the build-in random() and randomblob() SQL functions. This interface allows applications to access the same PRNG for other purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ee77bcaf1d66acd1a62c0df67a25f317b961f7" translate="yes" xml:space="preserve">
          <source>SQLite contains a pluggable &lt;a href=&quot;malloc&quot;&gt;memory allocation subsystem&lt;/a&gt;. The default implementation uses system malloc() and free(). However, if SQLite is compiled with &lt;a href=&quot;compile#memdebug&quot;&gt;SQLITE_MEMDEBUG&lt;/a&gt;, an alternative memory allocation wrapper (&lt;a href=&quot;malloc#memdebug&quot;&gt;memsys2&lt;/a&gt;) is inserted that looks for memory allocation errors at run-time. The memsys2 wrapper checks for memory leaks, of course, but also looks for buffer overruns, uses of uninitialized memory, and attempts to use memory after it has been freed. These same checks are also done by valgrind (and, indeed, Valgrind does them better) but memsys2 has the advantage of being much faster than Valgrind, which means the checks can be done more often and for longer tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e70b3aaacfaf470c166676be17bd20f5d45f4693" translate="yes" xml:space="preserve">
          <source>SQLite contains a pluggable mutex subsystem. Depending on compile-time options, the default mutex system contains interfaces &lt;a href=&quot;c3ref/mutex_held&quot;&gt;sqlite3_mutex_held()&lt;/a&gt; and &lt;a href=&quot;c3ref/mutex_held&quot;&gt;sqlite3_mutex_notheld()&lt;/a&gt; that detect whether or not a particular mutex is held by the calling thread. These two interfaces are used extensively within assert() statements in SQLite to verify mutexes are held and released at all the right moments, in order to double-check that SQLite does work correctly in multi-threaded applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dabfcc2f753d723e8f1fdffc47c7886d69735236" translate="yes" xml:space="preserve">
          <source>SQLite contains its own implementation of the string formatting routine &quot;printf()&quot;, accessible via the following interfaces:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c93da66184cea55ccf1eb0a76557743722cd0c9e" translate="yes" xml:space="preserve">
          <source>SQLite creates a new rollback journal at the start of the first transaction within an exclusive locking mode session. But at the conclusion of the transaction, it does not delete the rollback journal. The rollback journal might be truncated, or its header might be zeroed (depending on what version of SQLite you are using) but the rollback journal is not deleted. The rollback journal is not deleted until exclusive access mode is exited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff4a994995e43acece5539fc362ef2f8d57c451" translate="yes" xml:space="preserve">
          <source>SQLite current supports multiple simultaneous read transactions coming from separate database connections, possibly in separate threads or processes, but only one simultaneous write transaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52550351bf043c480663244c5089f3b0a1af2f89" translate="yes" xml:space="preserve">
          <source>SQLite currently uses nine distinct types of temporary files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="768d0612a89e99cfab38eb300c519c8884a3292a" translate="yes" xml:space="preserve">
          <source>SQLite database content can be viewed using a wide variety third-party tools.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be0dbc098faec242c7e0eb6b90f7b812b21e7a30" translate="yes" xml:space="preserve">
          <source>SQLite database files are &lt;a href=&quot;locrsf&quot;&gt;recommended by the US Library of Congress&lt;/a&gt; as a storage format for long-term preservation of digital content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94d38bbabdf14ff89a4cf80dbf6c1e905d82147b" translate="yes" xml:space="preserve">
          <source>SQLite database files are ordinary disk files that can be opened and written by ordinary user processes. A rogue process can open an SQLite database and fill it with corrupt data. Corrupt data might also be introduced into an SQLite database by bugs in the operating system or disk controller; especially bugs triggered by a power failure. There is nothing SQLite can do to defend against these kinds of problems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b12d3c769cd65d1fff0004d3dbd9ed7d36630a2" translate="yes" xml:space="preserve">
          <source>SQLite database files are ordinary disk files. That means that any process can open the file and overwrite it with garbage. There is nothing that the SQLite library can do to defend against this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b4a84c75e811d2fb173fe3d58bd4e6cbe30bdcc" translate="yes" xml:space="preserve">
          <source>SQLite defines certain &lt;a href=&quot;limits&quot;&gt;limits&lt;/a&gt; on its operation, such as the maximum number of columns in a table, the maximum length of an SQL statement, or the maximum value of an integer. The TCL and TH3 test suites both contains numerous tests that push SQLite right to the edge of its defined limits and verify that it performs correctly for all allowed values. Additional tests go beyond the defined limits and verify that SQLite correctly returns errors. The source code contains &lt;a href=&quot;testing#testcase&quot;&gt;testcase macros&lt;/a&gt; to verify that both sides of each boundary have been tested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebe49ed011549b4b376ada76a7c80346e42783e" translate="yes" xml:space="preserve">
          <source>SQLite defines five constraint conflict resolution algorithms as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e63f24a3abefb779413eb11019f8b7c1a24ed4a7" translate="yes" xml:space="preserve">
          <source>SQLite depends on the underlying filesystem to do locking as the documentation says it will. But some filesystems contain bugs in their locking logic such that the locks do not always behave as advertised. This is especially true of network filesystems and NFS in particular. If SQLite is used on a filesystem where the locking primitives contain bugs, and if two or more threads or processes try to access the same database at the same time, then database corruption might result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84e20ec3709a6092a2fe5e0b3864b26d52798097" translate="yes" xml:space="preserve">
          <source>SQLite determines whether or not the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08f1115ba9f2179d3b543581df6ff78cc24d770e" translate="yes" xml:space="preserve">
          <source>SQLite developers follow the NASA principle of &quot;fly what you test and test what you fly&quot;. This principle is violated if this option is enabled for delivery but disabled for testing. But if this option is enabled during testing, not all branches are reachable. Therefore, the use of this compile-time option is discouraged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4f80e4b417989d34a30cd7b51ee661ffc0b6477" translate="yes" xml:space="preserve">
          <source>SQLite does &lt;u&gt;not&lt;/u&gt; have a sophisticated theorem prover with which to determine W&amp;rArr;X. Instead, SQLite uses two simple rules to find the common cases where W&amp;rArr;X is true, and it assumes all the other cases are false. The rules used by SQLite are these:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="812f97d0b2305c9c697f76ed10e7be3a58d7abf1" translate="yes" xml:space="preserve">
          <source>SQLite does not assume that a &lt;b&gt;create file&lt;/b&gt; operation has actually modified the file-system records within persistent storage until after the file has been successfully</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03f904caa75ae48b8b97c8d68e12829b77d799cd" translate="yes" xml:space="preserve">
          <source>SQLite does not assume that the xFetch() method will work. If a call to xFetch() returns a NULL pointer (indicating that the requested page is not currently mapped into the applications address space) then SQLite silently falls back to using xRead(). An error is only reported if xRead() also fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8388b88a9237299e6bc5f9efcad34bc3644e42d2" translate="yes" xml:space="preserve">
          <source>SQLite does not compete with client/server databases. SQLite competes with &lt;a href=&quot;http://man.he.net/man3/fopen&quot;&gt;fopen()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a676b7a2490751f91ae5727d82720cbc10b6a9" translate="yes" xml:space="preserve">
          <source>SQLite does not corrupt database files without external help. If your application crashes in the middle of an update, your data is safe. The database is safe even if your OS crashes or takes a power loss. The crash-resistance of SQLite has been extensively studied and tested and is attested by years of real-world experience by billions of users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32682669e98a22ab436457272a952e96b8984c62" translate="yes" xml:space="preserve">
          <source>SQLite does not currently generate this result code. However, &lt;a href=&quot;c3ref/create_function&quot;&gt;application-defined SQL functions&lt;/a&gt; or &lt;a href=&quot;vtab&quot;&gt;virtual tables&lt;/a&gt;, or &lt;a href=&quot;vfs&quot;&gt;VFSes&lt;/a&gt;, or other extensions might cause this result code to be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="849cd253604893ceb116db699857d9c341985c8d" translate="yes" xml:space="preserve">
          <source>SQLite does not enforce the length of a VARCHAR. You can declare a VARCHAR(10) and SQLite will be happy to store a 500-million character string there. And it will keep all 500-million characters intact. Your content is never truncated. SQLite understands the column type of &quot;VARCHAR(</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cedfdcc8a476fe016f6e9e5112a567a29b98822a" translate="yes" xml:space="preserve">
          <source>SQLite does not execute CREATE INDEX or DROP TABLE as fast as the other databases. But this is not seen as a problem because those are infrequent operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43864158c682c4848f5d2752dd74608390472ba4" translate="yes" xml:space="preserve">
          <source>SQLite does not have a separate Boolean storage class. Instead, Boolean values are stored as integers 0 (false) and 1 (true).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b5bf507b529089c7d7e63ee38c65f8ff819e17f" translate="yes" xml:space="preserve">
          <source>SQLite does not have a storage class set aside for storing dates and/or times. Instead, the built-in &lt;a href=&quot;lang_datefunc&quot;&gt;Date And Time Functions&lt;/a&gt; of SQLite are capable of storing dates and times as TEXT, REAL, or INTEGER values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d38a36f56dfc9a58300bf464f4bc506a55de48ac" translate="yes" xml:space="preserve">
          <source>SQLite does not have any file naming requirements and so the application can use any custom file suffix that it wants to help identify the file as &quot;belonging&quot; to the application. SQLite database files contain a 4-byte &lt;a href=&quot;fileformat2#appid&quot;&gt;Application ID&lt;/a&gt; in their headers that can be set to an application-defined value and then used to identify the &quot;type&quot; of the document for utility programs such as &lt;a href=&quot;http://linux.die.net/man/1/file&quot;&gt;file(1)&lt;/a&gt;, further enhancing the document metaphor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e59c710100ff708b1aef0f21340b69db8c1733b8" translate="yes" xml:space="preserve">
          <source>SQLite does not impose any arbitrary limits on the tables in a join. It also allows a table to be joined with itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d19b66e3a5f9904818e920e65d3e2c5788b19b7a" translate="yes" xml:space="preserve">
          <source>SQLite does not impose any naming requirements on database files. SQLite will happily work with a database file that has any filename extension or with no extension at all. When auxiliary files are needed for a &lt;a href=&quot;lockingv3#rollback&quot;&gt;rollback journal&lt;/a&gt; or a &lt;a href=&quot;wal&quot;&gt;write-ahead log&lt;/a&gt; or for one of the other kinds of &lt;a href=&quot;tempfiles&quot;&gt;temporary disk files&lt;/a&gt;, then the name for the auxiliary file is normally constructed by appending a suffix onto the end of the database file name. For example, if the original database is call &quot;&lt;code&gt;app.db&lt;/code&gt;&quot; then the &lt;a href=&quot;lockingv3#rollback&quot;&gt;rollback journal&lt;/a&gt; will be called &quot;&lt;code&gt;app.db-journal&lt;/code&gt;&quot; and the &lt;a href=&quot;wal&quot;&gt;write-ahead log&lt;/a&gt; will be called &quot;&lt;code&gt;app.db-wal&lt;/code&gt;&quot;. This approach to auxiliary file naming works great on systems that support long filenames. But on systems that impose 8+3 filename constraints, the auxiliary files do not fit the 8+3 format even though the original database file does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a73287a8fe8c79033c83c805463ed8e55719bac8" translate="yes" xml:space="preserve">
          <source>SQLite does not impose this restriction. The output columns from an aggregate query can be arbitrary expressions that include columns not found in GROUP BY clause. This feature has two uses:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8555210284d36b3e1b8f8883b624896b86a18ab1" translate="yes" xml:space="preserve">
          <source>SQLite does not know about the upper-case/lower-case distinction for all unicode characters. SQL functions like upper() and lower() only work on ASCII characters. There are two reasons for this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb92b3df474a6ac50c00c18c8f46d84276cd93dd" translate="yes" xml:space="preserve">
          <source>SQLite does not need to be &quot;installed&quot; before it is used. There is no &quot;setup&quot; procedure. There is no server process that needs to be started, stopped, or configured. There is no need for an administrator to create a new database instance or assign access permissions to users. SQLite uses no configuration files. Nothing needs to be done to tell the system that SQLite is running. No actions are required to recover after a system crash or power failure. There is nothing to troubleshoot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="884bfc65b22f2d44e73c6eb276c85fdfbd7fe67c" translate="yes" xml:space="preserve">
          <source>SQLite does not support joins containing more than 64 tables. This limit arises from the fact that the SQLite code generator uses bitmaps with one bit per join-table in the query optimizer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32cceefcad6471cec76877d28300254ecd207a80" translate="yes" xml:space="preserve">
          <source>SQLite does not use reallocarray(). The reason is that reallocarray() is not useful to SQLite. It turns out that SQLite never does memory allocations that are the simple product of two integers. Instead, SQLite does allocations of the form &quot;X+C&quot; or &quot;N*X+C&quot; or &quot;M*N*X+C&quot; or &quot;N*X+M*Y+C&quot;, and so forth. The reallocarray() interface is not helpful in avoiding integer overflow in those cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e572f2c7a3110182d89abded21495f7d514fd7ce" translate="yes" xml:space="preserve">
          <source>SQLite does not use the &lt;a href=&quot;https://git-scm.org&quot;&gt;Git&lt;/a&gt; version control system. SQLite uses &lt;a href=&quot;https://fossil-scm.org/&quot;&gt;Fossil&lt;/a&gt; instead, which is a version control system that was specifically designed and written to support SQLite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ed31deb6ad368a56d7944ce942ebcf9b2c51e9" translate="yes" xml:space="preserve">
          <source>SQLite follows interpretation (1), as does PostgreSQL, MySQL, Oracle, and Firebird. It is true that Informix and Microsoft SQL Server use interpretation (2), however we the SQLite developers hold that interpretation (1) is the most natural reading of the requirement and we also want to maximize compatibility with other SQL database engines, and most other database engines also go with (1), so that is what SQLite does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c073597d6dda07cec7d805350d02b0ccb097124" translate="yes" xml:space="preserve">
          <source>SQLite generates the following VDBE code to handle this query:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4d6b7ddedcd5672d5d5c1d0814e9f17af528341" translate="yes" xml:space="preserve">
          <source>SQLite guarantees that the zFilename parameter to xOpen is either a NULL pointer or string obtained from xFullPathname() with an optional suffix added. If a suffix is added to the zFilename parameter, it will consist of a single &quot;-&quot; character followed by no more than 11 alphanumeric and/or &quot;-&quot; characters. SQLite further guarantees that the string will be valid and unchanged until xClose() is called. Because of the previous sentence, the &lt;a href=&quot;#sqlite3_file&quot; id=&quot;sqlite3vfsxopen&quot;&gt;sqlite3_file&lt;/a&gt; can safely store a pointer to the filename if it needs to remember the filename for some reason. If the zFilename parameter to xOpen is a NULL pointer then xOpen must invent its own temporary name for the file. Whenever the xFilename parameter is NULL it will also be the case that the flags parameter will include &lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_DELETEONCLOSE&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d519343efa0295e444925cd61c058c515076622f" translate="yes" xml:space="preserve">
          <source>SQLite guarantees that the zFilename parameter to xOpen is either a NULL pointer or string obtained from xFullPathname() with an optional suffix added. If a suffix is added to the zFilename parameter, it will consist of a single &quot;-&quot; character followed by no more than 11 alphanumeric and/or &quot;-&quot; characters. SQLite further guarantees that the string will be valid and unchanged until xClose() is called. Because of the previous sentence, the &lt;a href=&quot;file&quot; id=&quot;sqlite3vfsxopen&quot;&gt;sqlite3_file&lt;/a&gt; can safely store a pointer to the filename if it needs to remember the filename for some reason. If the zFilename parameter to xOpen is a NULL pointer then xOpen must invent its own temporary name for the file. Whenever the xFilename parameter is NULL it will also be the case that the flags parameter will include &lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_DELETEONCLOSE&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e30a11544b3b70ee38ad6d69bfc7966ff234f5f0" translate="yes" xml:space="preserve">
          <source>SQLite has a long-range vision. Planning is done with the assumption that SQLite will be used and supported through at least the year 2050. All code is written with the idea that it will one day be read and maintained by people not yet born. The code is carefully commented with an eye toward helping those future developers more easily understand the logic and the rationale behind the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aceade92bdc221158a6b3b9dee552d0622a51de1" translate="yes" xml:space="preserve">
          <source>SQLite has always been threadsafe in the sense that it is safe to use different SQLite database connections in different threads at the same time. The constraint was that the same database connection could not be used in two separate threads at once. SQLite version 3.5.0 relaxes this constraint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="271f775dd6b6f73fbe141210d32e18aec79eee7a" translate="yes" xml:space="preserve">
          <source>SQLite has been used with great success as the on-disk file format for desktop applications such as version control systems, financial analysis tools, media cataloging and editing suites, CAD packages, record keeping programs, and so forth. The traditional File/Open operation calls sqlite3_open() to attach to the database file. Updates happen automatically as application content is revised so the File/Save menu option becomes superfluous. The File/Save_As menu option can be implemented using the &lt;a href=&quot;backup&quot;&gt;backup API&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f55c294c2cf9b8417df5cbe3a3af491dd2f0fa77" translate="yes" xml:space="preserve">
          <source>SQLite has limited &lt;a href=&quot;lang_altertable&quot;&gt;ALTER TABLE&lt;/a&gt; support that you can use to add a column to the end of a table or to change the name of a table. If you want to make more complex changes in the structure of a table, you will have to recreate the table. You can save existing data to a temporary table, drop the old table, create the new table, then copy the data back in from the temporary table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b73be04138313333850933822dba80a15ce2e139" translate="yes" xml:space="preserve">
          <source>SQLite has many built-in protections against database corruption. But many of these protections can be disabled by configuration options. If protections are disabled, database corruption may occur.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb603bba250f35273a32a5611b9cd000e44489f5" translate="yes" xml:space="preserve">
          <source>SQLite has more than 225 APIs. However, most of the APIs are optional and very specialized and can be ignored by beginners. The core API is small, simple, and easy to learn. This article summarizes the core API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4895c12238b138bb6c6286f8230fbb2f5cd9a6" translate="yes" xml:space="preserve">
          <source>SQLite has never made any promises about the names of columns in the result set of &lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt; statement unless the column contains an AS clause. So this change to column name is technically not an incompatibility. SQLite is merely changing from one undefined behavior to another. Nevertheless, many applications depend on the unspecified column naming behavior of SQLite and so this change is discussed under the incompatible changes subheading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7acd3d88ffa5a3ae27ab37d2b4f9fba4b8da4f" translate="yes" xml:space="preserve">
          <source>SQLite has no DATETIME datatype. Instead, dates and times can be stored in any of these ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="434827c14efeeadfcb2418a72c6305a40a35bf77" translate="yes" xml:space="preserve">
          <source>SQLite has parsed foreign key constraints for time out of mind, but added the ability to actually enforce those constraints much later, with &lt;a href=&quot;https://sqlite.org/releaselog/3_6_19.html&quot;&gt;version 3.6.19&lt;/a&gt; (2009-10-14). By the time foreign key constraint enforcement was added, there were already countless millions of databases in circulation that contained foreign key constraints, some of which were not correct. To avoid breaking those legacy databases, foreign key constraint enforcement is turned off by default in SQLite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01e91ba3e2500969e52ba828deace82978255140" translate="yes" xml:space="preserve">
          <source>SQLite has the ability to load extensions (including new &lt;a href=&quot;c3ref/create_function&quot;&gt;application-defined SQL functions&lt;/a&gt;, &lt;a href=&quot;datatype3#collation&quot;&gt;collating sequences&lt;/a&gt;, &lt;a href=&quot;vtab&quot;&gt;virtual tables&lt;/a&gt;, and &lt;a href=&quot;vfs&quot;&gt;VFSes&lt;/a&gt;) at run-time. This feature allows the code for extensions to be developed and tested separately from the application and then loaded on an as-needed basis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e4d010949f30fdc1e3ec9866eaf0049a35366ab" translate="yes" xml:space="preserve">
          <source>SQLite has the ability to set aside a small number of extra bytes at the end of every page for use by extensions. These extra bytes are used, for example, by the SQLite Encryption Extension to store a nonce and/or cryptographic checksum associated with each page. The &quot;reserved space&quot; size in the 1-byte integer at offset 20 is the number of bytes of space at the end of each page to reserve for extensions. This value is usually 0. The value can be odd.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9203406a48bcc380153eb0cdda332e02c86e380f" translate="yes" xml:space="preserve">
          <source>SQLite has the important property that transactions appear to be atomic even if the transaction is interrupted by an operating system crash or power failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be0a51ac8c3c19e2efc6a52feb047f00515d3213" translate="yes" xml:space="preserve">
          <source>SQLite has to do two binary searches to find the price of peaches using the method show above. But for a table with a large number of rows, this is still much faster than doing a full table scan.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="676af2e11cb2905c4dfb00ec08797f3ee68e158c" translate="yes" xml:space="preserve">
          <source>SQLite has traditionally assumed that a sector write is &lt;u&gt;not&lt;/u&gt; atomic. However, SQLite does always assume that a sector write is linear. By &quot;linear&quot; we mean that SQLite assumes that when writing a sector, the hardware begins at one end of the data and writes byte by byte until it gets to the other end. The write might go from beginning to end or from end to beginning. If a power failure occurs in the middle of a sector write it might be that part of the sector was modified and another part was left unchanged. The key assumption by SQLite is that if any part of the sector gets changed, then either the first or the last bytes will be changed. So the hardware will never start writing a sector in the middle and work towards the ends. We do not know if this assumption is always true but it seems reasonable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e2b79f10afe47ad0c40bb4a3ac913a6b768b679" translate="yes" xml:space="preserve">
          <source>SQLite helps applications avoid writer starvation. After any attempt to obtain a write-lock on a table fails (because one or more other connections are holding read-locks), all attempts to open new transactions on the shared-cache fail until one of the following is true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="402f5ca7372d4a9946847b5c208fa5c883a857e1" translate="yes" xml:space="preserve">
          <source>SQLite holds a write transaction open on the destination database file for the duration of the backup operation. The source database is read-locked only while it is being read; it is not locked continuously for the entire backup operation. Thus, the backup may be performed on a live source database without preventing other database connections from reading or writing to the source database while the backup is underway.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="912f035cba3f20daf2c59df8d233e473805d19b3" translate="yes" xml:space="preserve">
          <source>SQLite holds the &lt;a href=&quot;#SQLITE_MUTEX_FAST&quot;&gt;SQLITE_MUTEX_STATIC_MASTER&lt;/a&gt; mutex when it invokes the xInit method, so the xInit method need not be threadsafe. The xShutdown method is only called from &lt;a href=&quot;#sqlite3_initialize&quot;&gt;sqlite3_shutdown()&lt;/a&gt; so it does not need to be threadsafe either. For all other methods, SQLite holds the &lt;a href=&quot;#SQLITE_MUTEX_FAST&quot;&gt;SQLITE_MUTEX_STATIC_MEM&lt;/a&gt; mutex as long as the &lt;a href=&quot;#sqliteconfigmemstatus&quot;&gt;SQLITE_CONFIG_MEMSTATUS&lt;/a&gt; configuration option is turned on (which it is by default) and so the methods are automatically serialized. However, if &lt;a href=&quot;#sqliteconfigmemstatus&quot;&gt;SQLITE_CONFIG_MEMSTATUS&lt;/a&gt; is disabled, then the other methods must be threadsafe or else make their own arrangements for serialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd2489c20f80af95976208fb003fab254c1fa75" translate="yes" xml:space="preserve">
          <source>SQLite holds the &lt;a href=&quot;c_mutex_fast&quot;&gt;SQLITE_MUTEX_STATIC_MASTER&lt;/a&gt; mutex when it invokes the xInit method, so the xInit method need not be threadsafe. The xShutdown method is only called from &lt;a href=&quot;initialize&quot;&gt;sqlite3_shutdown()&lt;/a&gt; so it does not need to be threadsafe either. For all other methods, SQLite holds the &lt;a href=&quot;c_mutex_fast&quot;&gt;SQLITE_MUTEX_STATIC_MEM&lt;/a&gt; mutex as long as the &lt;a href=&quot;c_config_covering_index_scan#sqliteconfigmemstatus&quot;&gt;SQLITE_CONFIG_MEMSTATUS&lt;/a&gt; configuration option is turned on (which it is by default) and so the methods are automatically serialized. However, if &lt;a href=&quot;c_config_covering_index_scan#sqliteconfigmemstatus&quot;&gt;SQLITE_CONFIG_MEMSTATUS&lt;/a&gt; is disabled, then the other methods must be threadsafe or else make their own arrangements for serialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f91f212a3a30086dc5ca1eb656ef7423affc33b3" translate="yes" xml:space="preserve">
          <source>SQLite implements GROUP BY by ordering the output rows in the order suggested by the GROUP BY terms. Each output row is compared to the previous to see if it starts a new &quot;group&quot;. The ordering by GROUP BY terms is done in exactly the same way as the ordering by ORDER BY terms. A preexisting index is used if possible, but if no suitable index is available, a transient index is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ee3a1222ea37592ef106a68bea0de2b898dfe2" translate="yes" xml:space="preserve">
          <source>SQLite implements SQL functions using callbacks to C-language routines. Even the built-in SQL functions are implemented this way. Most of the built-in SQL functions (ex: &lt;a href=&quot;lang_corefunc#abs&quot;&gt;abs()&lt;/a&gt;, &lt;a href=&quot;lang_aggfunc#count&quot;&gt;count()&lt;/a&gt;, &lt;a href=&quot;lang_corefunc#substr&quot;&gt;substr()&lt;/a&gt;, and so forth) can be found in &lt;a href=&quot;https://sqlite.org/src/file/src/func.c&quot;&gt;func.c&lt;/a&gt; source file. Date and time conversion functions are found in &lt;a href=&quot;https://sqlite.org/src/file/src/date.c&quot;&gt;date.c&lt;/a&gt;. Some functions such as &lt;a href=&quot;lang_corefunc#coalesce&quot;&gt;coalesce()&lt;/a&gt; and &lt;a href=&quot;lang_corefunc#typeof&quot;&gt;typeof()&lt;/a&gt; are implemented as bytecode directly by the code generator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44379bdc54f42e9de25ccca623147353d761d9c1" translate="yes" xml:space="preserve">
          <source>SQLite implements isolation and concurrency control (and atomicity) using transient journal files that appear in the same directory in as the database file. There are two major &quot;journal modes&quot;. The older &quot;rollback mode&quot; corresponds to using the &quot;DELETE&quot;, &quot;PERSIST&quot;, or &quot;TRUNCATE&quot; options to the &lt;a href=&quot;pragma#pragma_journal_mode&quot;&gt;journal_mode pragma&lt;/a&gt;. In rollback mode, changes are written directly into the database file, while simultaneously a separate rollback journal file is constructed that is able to restore the database to its original state if the transaction rolls back. Rollback mode (specifically DELETE mode, meaning that the rollback journal is deleted from disk at the conclusion of each transaction) is the current default behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9d44a427593aad3444fe54a299daaaadaee9c2b" translate="yes" xml:space="preserve">
          <source>SQLite implements most of the common features of SQL. Rather than try to list all the features of SQL that SQLite does support, it is much easier to list those that it does not. Unsupported features of SQL are shown below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3786d84dc62565b9805fcc978b2dc22f28e9c31" translate="yes" xml:space="preserve">
          <source>SQLite implements run-time extension loading using the xDlOpen(), xDlError(), xDlSym(), and xDlClose() methods of the &lt;a href=&quot;c3ref/vfs&quot;&gt;sqlite3_vfs&lt;/a&gt; object. These methods are implemented using the dlopen() library on unix (which explains why SQLite commonly need to be linked against the &quot;-ldl&quot; library on unix systems) and using LoadLibrary() API on Windows. In a custom &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt; for unusual systems, these methods can all be omitted, in which case the run-time extension loading mechanism will not work (though you will still be able to statically link the extension code, assuming the entry pointers are uniquely named). SQLite can be compiled with &lt;a href=&quot;compile#omit_load_extension&quot;&gt;SQLITE_OMIT_LOAD_EXTENSION&lt;/a&gt; to omit the extension loading code from the build.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="325b495e36e305c6da36491d23c9a45ddd677117" translate="yes" xml:space="preserve">
          <source>SQLite implements the ORDER BY clause using a special set of instructions to control an object called a sorter. In the inner-most loop of the query, where there would normally be a Callback instruction, instead a record is constructed that contains both callback parameters and a key. This record is added to the sorter (in a linked list). After the query loop finishes, the list of records is sorted and this list is walked. For each record on the list, the callback is invoked. Finally, the sorter is closed and memory is deallocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bbf56d81f309f0a9cbabc4cabc75bf4752d9e1b" translate="yes" xml:space="preserve">
          <source>SQLite implements the command &quot;&lt;b&gt;DELETE FROM table&lt;/b&gt;&quot; (without a WHERE clause) by dropping the table then recreating it. This is much faster than deleting the elements of the table individually. But it also means that the value returned from &lt;b&gt;sqlite_changes&lt;/b&gt; will be zero regardless of the number of elements that were originally in the table. If an accurate count of the number of elements deleted is necessary, use &quot;&lt;b&gt;DELETE FROM table WHERE 1&lt;/b&gt;&quot; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ab0efccb175242c24a04c63d7820adef1b32339" translate="yes" xml:space="preserve">
          <source>SQLite implements this interface by calling the xSleep() method of the default &lt;a href=&quot;#sqlite3_vfs&quot;&gt;sqlite3_vfs&lt;/a&gt; object. If the xSleep() method of the default VFS is not implemented correctly, or not implemented at all, then the behavior of sqlite3_sleep() may deviate from the description in the previous paragraphs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1f2e714978760592edabd2996e80f8001082574" translate="yes" xml:space="preserve">
          <source>SQLite implements this interface by calling the xSleep() method of the default &lt;a href=&quot;vfs&quot;&gt;sqlite3_vfs&lt;/a&gt; object. If the xSleep() method of the default VFS is not implemented correctly, or not implemented at all, then the behavior of sqlite3_sleep() may deviate from the description in the previous paragraphs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a283eba3413ed38200757b2476e06c81659c4de6" translate="yes" xml:space="preserve">
          <source>SQLite includes interfaces that can be used to extend its functionality. Such routines include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4393772680ef025bd2cd5b1596f363dde45e77fe" translate="yes" xml:space="preserve">
          <source>SQLite interfaces can be subdivided into three categories:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="869311cd351a4162301e2c57a02fdd8d674a9eaa" translate="yes" xml:space="preserve">
          <source>SQLite invokes the xCreate() method to construct a new cache instance. SQLite will typically create one cache instance for each open database file, though this is not guaranteed. The first parameter, szPage, is the size in bytes of the pages that must be allocated by the cache. szPage will always a power of two. The second parameter szExtra is a number of bytes of extra storage associated with each page cache entry. The szExtra parameter will a number less than 250. SQLite will use the extra szExtra bytes on each page to store metadata about the underlying database page on disk. The value passed into szExtra depends on the SQLite version, the target platform, and how SQLite was compiled. The third argument to xCreate(), bPurgeable, is true if the cache being created will be used to cache database pages of a file stored on disk, or false if it is used for an in-memory database. The cache implementation does not have to do anything special based with the value of bPurgeable; it is purely advisory. On a cache where bPurgeable is false, SQLite will never invoke xUnpin() except to deliberately delete a page. In other words, calls to xUnpin() on a cache with bPurgeable set to false will always have the &quot;discard&quot; flag set to true. Hence, a cache created with bPurgeable false will never contain any unpinned pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d91a4eacb25ed345770672b419f8de28814833" translate="yes" xml:space="preserve">
          <source>SQLite invokes the xShrink() method when it wants the page cache to free up as much of heap memory as possible. The page cache implementation is not obligated to free any memory, but well-behaved implementations should do their best.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e09baf70c513977bd9de806d34790308cc119db4" translate="yes" xml:space="preserve">
          <source>SQLite is &quot;stand-alone&quot; or &quot;self-contained&quot; in the sense that it has very few dependencies. It runs on any operating system, even stripped-down bare-bones embedded operating systems. SQLite uses no external libraries or interfaces (other than a few standard C-library calls described below). The entire SQLite library is encapsulated in a &lt;a href=&quot;amalgamation&quot;&gt;single source code file&lt;/a&gt; that requires no special facilities or tools to build.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aa8dbd8175f3712e9167826d5f455eab9e98ea7" translate="yes" xml:space="preserve">
          <source>SQLite is &quot;typeless&quot;. This means that you can store any kind of data you want in any column of any table, regardless of the declared datatype of that column. (See the one exception to this rule in section 2.0 below.) This behavior is a feature, not a bug. A database is supposed to store and retrieve data and it should not matter to the database what format that data is in. The strong typing system found in most other SQL engines and codified in the SQL language spec is a misfeature - it is an example of the implementation showing through into the interface. SQLite seeks to overcome this misfeature by allowing you to store any kind of data into any kind of column and by allowing flexibility in the specification of datatypes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6db52ed99b096682e4bd1e419d2a2aa8458af934" translate="yes" xml:space="preserve">
          <source>SQLite is &lt;a href=&quot;https://sqlite.org/copyright.html&quot;&gt;open-source&lt;/a&gt; but it is not open-contribution. All the code in SQLite is written by a small team of experts. The project does not accept &quot;pull requests&quot; or patches from anonymous passers-by on the internet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b27dcc391997a09839d3385391811a8208d72225" translate="yes" xml:space="preserve">
          <source>SQLite is &lt;a href=&quot;testing&quot;&gt;very carefully tested&lt;/a&gt; to help ensure that it is as bug-free as possible. Among the many tests that are carried out for every SQLite version are tests that simulate power failures, I/O errors, and out-of-memory (OOM) errors and verify that no database corrupt occurs during any of these events. SQLite is also field-proven with approximately two billion active deployments with no serious problems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c11334f8a6d4c90017a71fe9095e22bfd142ceb6" translate="yes" xml:space="preserve">
          <source>SQLite is &lt;u&gt;not&lt;/u&gt; client/server, however. The SQLite database runs in the same process address space as the application. Queries do not involve message round-trips, only a function call. The latency of a single SQL query is far less in SQLite. Hence, using a large number of queries with SQLite is not the problem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4bea428b4572c3265babc195d636c85dd16cd7d" translate="yes" xml:space="preserve">
          <source>SQLite is ANSI-C source code. It must be compiled into machine code before it is useful. This article is a guide to the various ways of compiling SQLite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a694ce58bf7379de2122bb1b8b62f901618b77c1" translate="yes" xml:space="preserve">
          <source>SQLite is Transactional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="446762c2ed93e56023348a911dcbc0d76c6f8cf2" translate="yes" xml:space="preserve">
          <source>SQLite is a &lt;a href=&quot;https://www.loc.gov/preservation/resources/rfs/&quot;&gt;Recommended Storage Format&lt;/a&gt; for datasets according to the &lt;a href=&quot;https://www.loc.gov/&quot;&gt;US Library of Congress&lt;/a&gt;. Further information:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d1971ee5b77707ce34ac0536f708076c112ecc8" translate="yes" xml:space="preserve">
          <source>SQLite is a C-library that runs in the same address space as the application that it serves. That means that stray pointers, buffer overruns, heap corruption, or other malfunctions in the application can corrupt internal SQLite data structure and ultimately result in a corrupt database file. Normally these kinds of problems manifest themselves as segfaults prior to any database corruption occurring, but there have been instances where application code errors have caused SQLite to malfunction subtly so as to corrupt the database file rather than panicking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="017a47b5545e38512155b34a1d9f857de667f2bb" translate="yes" xml:space="preserve">
          <source>SQLite is a Self Contained System</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="663e24794b8ab537e46fb80090c661ea79493e74" translate="yes" xml:space="preserve">
          <source>SQLite is a good solution for any situation that requires bundling diverse content into a self-contained and self-describing package for shipment across a network. Content is encoding in a &lt;a href=&quot;fileformat2&quot;&gt;well-defined, cross-platform, and stable file format&lt;/a&gt;. The encoding is efficient, and receivers can extract small subsets of the content without having to read and parse the entire file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="247c4a67391b665da341d6210067738ae06e1a54" translate="yes" xml:space="preserve">
          <source>SQLite is a high-reliability storage solution. It does not give problems. It just works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30822bd9c64d132478b5d1bdc08a62b48e9c0cb3" translate="yes" xml:space="preserve">
          <source>SQLite is able to limit the size of a database file to prevent the database file from growing too large and consuming too much disk space. The SQLITE_MAX_PAGE_COUNT parameter, which is normally set to 1073741823, is the maximum number of pages allowed in a single database file. An attempt to insert new data that would cause the database file to grow larger than this will return SQLITE_FULL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cbf83ed4a424e770c465325d3f9d1b3f515ba13" translate="yes" xml:space="preserve">
          <source>SQLite is able to use multiple VFSes at the same time. Each individual database connection is associated with just one VFS. But if you have multiple database connections, each connection can be associated with a different VFS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c555b3320f8787c7d985cc510e097760a2ba67e1" translate="yes" xml:space="preserve">
          <source>SQLite is an example of a classic serverless database engine. With SQLite, there are no other processes, threads, machines, or other mechanisms (apart from host computer OS and filesystem) to help provide database services or implementation. There really is no server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d318f0e33e483c7b8003ffacee251b811c3c5c9" translate="yes" xml:space="preserve">
          <source>SQLite is built from over one hundred files of C code and script spread across multiple directories. The implementation of SQLite is pure ANSI-C, but many of the C-language source code files are either generated or transformed by auxiliary C programs and AWK, SED, and TCL scripts prior to being incorporated into the finished SQLite library. Building the necessary C programs and transforming and/or creating the C-language source code for SQLite is a complex process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6746f394557b9dabd8af972d9d23d7f801fedd98" translate="yes" xml:space="preserve">
          <source>SQLite is built using a &lt;a href=&quot;https://en.wikipedia.org/wiki/DO-178B&quot;&gt;DO-178B&lt;/a&gt;-inspired process. The &lt;a href=&quot;testing&quot;&gt;testing standards&lt;/a&gt; for SQLite are among the highest for commercial software.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="875a9efc25bbb30b8f5d1660336c59da880170b4" translate="yes" xml:space="preserve">
          <source>SQLite is competitive with, and usually faster than, blobs stored in separate files on disk, for both reading and writing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b3a565f93669221f3865969fe660536421aef7" translate="yes" xml:space="preserve">
          <source>SQLite is designed to meet most developer's needs without any changes or customization. When changes are needed, they can normally be accomplished using start-time &lt;a href=&quot;c3ref/config&quot;&gt;(1)&lt;/a&gt; or runtime &lt;a href=&quot;c3ref/db_config&quot;&gt;(2)&lt;/a&gt;&lt;a href=&quot;c3ref/limit&quot;&gt;(3)&lt;/a&gt;&lt;a href=&quot;c3ref/vfs_find&quot;&gt;(4)&lt;/a&gt; configuration methods or via &lt;a href=&quot;compile&quot;&gt;compile-time options&lt;/a&gt;. It is very rare that an application developer will need to edit the SQLite source code in order to incorporate SQLite into a product.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b810dc63ad4381febba6bfa7d0698c8944220e9" translate="yes" xml:space="preserve">
          <source>SQLite is different in that it stores the schema in the &lt;a href=&quot;fileformat2#sqlite_master&quot;&gt;sqlite_master&lt;/a&gt; table as the original text of the CREATE statements that define the schema. Hence ALTER TABLE needs to revise the text of the CREATE statement. Doing so can be tricky for certain &quot;creative&quot; schema designs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d9fd1ad4a17767c9b0eeee58f6c4cef761ec22" translate="yes" xml:space="preserve">
          <source>SQLite is expected to operate the same, and use exactly the same &lt;a href=&quot;fileformat2&quot;&gt;on-disk format&lt;/a&gt;, on all modern operating systems, on all modern computer architectures, and using all modern C compilers. The developers are constantly testing SQLite on as many diverse platforms as they can get their hands on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ae04c54b68c60010dff08d4f306e294deee8ba8" translate="yes" xml:space="preserve">
          <source>SQLite is in the Public Domain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41978015003a28658fac35ad1aebf308a1d4bdc1" translate="yes" xml:space="preserve">
          <source>SQLite is much faster than direct writes to disk on Windows when anti-virus protection is turned on. Since anti-virus software is and should be on by default in Windows, that means that SQLite is generally much faster than direct disk writes on Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2117a2a67d4eee0f3af565533d9cac9c29e3ebe" translate="yes" xml:space="preserve">
          <source>SQLite is normally very forgiving about mismatches between the type of a value and the declared type of the container in which that value is to be stored. For example, SQLite allows the application to store a large BLOB in a column with a declared type of BOOLEAN. But in a few cases, SQLite is strict about types. The SQLITE_MISMATCH error is returned in those few cases when the types do not match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d38f0f8852e6f3bc8f54ade94a7ff4da3d7a52" translate="yes" xml:space="preserve">
          <source>SQLite is not directly comparable to client/server SQL database engines such as MySQL, Oracle, PostgreSQL, or SQL Server since SQLite is trying to solve a different problem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1435c0d28bf1363ba8e34333297e06f59701df95" translate="yes" xml:space="preserve">
          <source>SQLite is not particular about the text it receives and is more than happy to process text strings that are not normalized or even well-formed UTF-8 or UTF-16. Thus, programmers who want to store IS08859 data can do so using the UTF-8 interfaces. As long as no attempts are made to use a UTF-16 collating sequence or SQL function, the byte sequence of the text will not be modified in any way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1f069bbbe7e83bd0e5742fa278486eb680133a8" translate="yes" xml:space="preserve">
          <source>SQLite is not the perfect application file format for every situation. But in many cases, SQLite is a far better choice than either a custom file format, a pile-of-files, or a wrapped pile-of-files. SQLite is a high-level, stable, reliable, cross-platform, widely-deployed, extensible, performant, accessible, concurrent file format. It deserves your consideration as the standard file format on your next application design.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9638ccd4cc256f849e2db07526c184593398229" translate="yes" xml:space="preserve">
          <source>SQLite is often used as the on-disk file format for desktop applications such as version control systems, financial analysis tools, media cataloging and editing suites, CAD packages, record keeping programs, and so forth. The traditional File/Open operation calls sqlite3_open() to attach to the database file. Updates happen automatically as application content is revised so the File/Save menu option becomes superfluous. The File/Save_As menu option can be implemented using the &lt;a href=&quot;backup&quot;&gt;backup API&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f01574bffbe492a08f6a39612436763f1dce6eab" translate="yes" xml:space="preserve">
          <source>SQLite is one of many open-source projects that OSS Fuzz tests. The &lt;a href=&quot;https://www.sqlite.org/src/file/test/ossfuzz.c&quot;&gt;test/ossfuzz.c&lt;/a&gt; source file in the SQLite repository is SQLite's interface to OSS fuzz.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf60766f31de04598304b77a31a30aab178aeaf9" translate="yes" xml:space="preserve">
          <source>SQLite is one of the &lt;a href=&quot;https://sqlite.org/mostdeployed.html&quot;&gt;most used&lt;/a&gt; software libraries in the world. There are literally tens of billions of SQLite database files in use daily, on smartphones and gadgets and in desktop applications. SQLite is &lt;a href=&quot;testing&quot;&gt;carefully tested&lt;/a&gt; and proven reliable. It is not a component that needs much tuning or debugging, allowing developers to stay focused on application logic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b472863a9267f026cee0ca0b35a15991ef89b036" translate="yes" xml:space="preserve">
          <source>SQLite is open source. This gives many people the idea that it is not well tested as commercial software and is perhaps unreliable. But that impression is false. SQLite has exhibited very high reliability in the field and a very low defect rate, especially considering how rapidly it is evolving. The quality of SQLite is achieved in part by careful code design and implementation. But extensive testing also plays a vital role in maintaining and improving the quality of SQLite. This document has summarized the testing procedures that every release of SQLite undergoes with the hope of inspiring confidence that SQLite is suitable for use in mission-critical applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbc3c1fb569cecbb959acf32375d7a9409c9e7db" translate="yes" xml:space="preserve">
          <source>SQLite is required to &lt;b&gt;implement atomic and durable transactions&lt;/b&gt; (the 'A' and 'D' from the ACID acronym), even if an application, operating system or power failure occurs midway through or shortly after updating a database file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="362f767a2655b7418135c488c8146a1c344658d9" translate="yes" xml:space="preserve">
          <source>SQLite is required to &lt;b&gt;implement isolated transactions&lt;/b&gt; (the 'I' from the ACID acronym).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b642e02aa031422407ba1e2eb9a921d7af9484d1" translate="yes" xml:space="preserve">
          <source>SQLite is resilient in the face of corrupt inputs, including maliciously designed database files and SQL strings. Extensive fuzz-testing ensures that corrupt inputs will not lead to crashes or undefined behavior, but will instead cause sensible errors to be reported back to the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5423cc6a7fa9f9530e2a51fe8a881bbb932c031" translate="yes" xml:space="preserve">
          <source>SQLite is slower at creating new indices. This is not a huge problem (since new indices are not created very often) but it is something that is being worked on. Hopefully, future versions of SQLite will do better here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54a5009f6cdb462eb942bac870b07db8a1670fab" translate="yes" xml:space="preserve">
          <source>SQLite is slower than the other databases when it comes to dropping tables. This probably is because when SQLite drops a table, it has to go through and erase the records in the database file that deal with that table. MySQL and PostgreSQL, on the other hand, use separate files to represent each table so they can drop a table simply by deleting a file, which is much faster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7366e08ffe20946fd76e62d62945bcc30d399f9" translate="yes" xml:space="preserve">
          <source>SQLite is threadsafe because it uses mutexes to serialize access to common data structures. However, the work of acquiring and releasing these mutexes will slow SQLite down slightly. Hence, if you do not need SQLite to be threadsafe, you should disable the mutexes for maximum performance. See the &lt;a href=&quot;threadsafe&quot;&gt;threading mode&lt;/a&gt; documentation for additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd3013ad5660f204f66ad31e2c31dd8240e6bb5" translate="yes" xml:space="preserve">
          <source>SQLite is threadsafe. We make this concession since many users choose to ignore the advice given in the previous paragraph. But in order to be thread-safe, SQLite must be compiled with the SQLITE_THREADSAFE preprocessor macro set to 1. Both the Windows and Linux precompiled binaries in the distribution are compiled this way. If you are unsure if the SQLite library you are linking against is compiled to be threadsafe you can call the &lt;a href=&quot;c3ref/threadsafe&quot;&gt;sqlite3_threadsafe()&lt;/a&gt; interface to find out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39eff500cd7ce6dc1730207961cc564613eaac4f" translate="yes" xml:space="preserve">
          <source>SQLite is transactional, meaning that multiple changes can be grouped together such that either all or none of them occur, and so that the changes can be rolled back if a problem is found prior to commit. This allows an application to make a change incrementally, then run various sanity and consistency checks on the resulting data prior to committing the changes to disk. The &lt;a href=&quot;http://www.fossil-scm.org/&quot;&gt;Fossil&lt;/a&gt; DVCS &lt;a href=&quot;http://www.fossil-scm.org/fossil/doc/tip/www/selfcheck.wiki&quot;&gt;uses this technique&lt;/a&gt; to verify that no repository history has been lost prior to each change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="431631b26b413c56876cd9120450d97fb29610b5" translate="yes" xml:space="preserve">
          <source>SQLite is typeless for the purpose of deciding what data is allowed to be stored in a column. But some notion of type comes into play when sorting and comparing data. For these purposes, a column or an expression can be one of two types: &lt;b&gt;numeric&lt;/b&gt; and &lt;b&gt;text&lt;/b&gt;. The sort or comparison may give different results depending on which type of data is being sorted or compared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a51a3f7b3710595af5efe3e3c4508040aaab8c5" translate="yes" xml:space="preserve">
          <source>SQLite is very flexible with regard to datatypes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09d4e4b5b66b8b33e92f1d4cdf491ca8f18b646b" translate="yes" xml:space="preserve">
          <source>SQLite is very good at doing INSERTs within a transaction, which probably explains why it is so much faster than the other databases at this test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9422ec4c9c62f3dc785dbb76b2bd0e31c1307c2" translate="yes" xml:space="preserve">
          <source>SQLite is written in portable C code. Development work occurs on a mix of Linux, Mac, and Windows workstations. The developers use command-line tools and eschew integrated development environments (IDEs) whenever possible. All developers are expected to be fluent with the unix command-line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e1e2d740adcf0319f2b64ec4840724790f32367" translate="yes" xml:space="preserve">
          <source>SQLite itself does not pay any attention to environment variables in this case, though presumably the GetTempPath() system call does. The search algorithm is different for CYGWIN builds. Check the source code for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04e08b220ef652d98be99d5e0babd01a982e4f55" translate="yes" xml:space="preserve">
          <source>SQLite itself is in the &lt;a href=&quot;https://sqlite.org/copyright.html&quot;&gt;public domain&lt;/a&gt; and can be used for any purpose. But TH3 is proprietary and requires a license.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d3e9abb52e314e484928a8bc96db9c3ff377a7" translate="yes" xml:space="preserve">
          <source>SQLite just works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="721ec90166a13c1e4ac7e7556c93fcbe5d07f6e2" translate="yes" xml:space="preserve">
          <source>SQLite keeps track of the largest ROWID using an &lt;a href=&quot;fileformat2#intschema&quot;&gt;internal table&lt;/a&gt; named &quot;&lt;a href=&quot;fileformat2#seqtab&quot;&gt;sqlite_sequence&lt;/a&gt;&quot;. The sqlite_sequence table is created and initialized automatically whenever a normal table that contains an AUTOINCREMENT column is created. The content of the sqlite_sequence table can be modified using ordinary UPDATE, INSERT, and DELETE statements. But making modifications to this table will likely perturb the AUTOINCREMENT key generation algorithm. Make sure you know what you are doing before you undertake such changes. The sqlite_sequence table does not track ROWID changes associated with UPDATE statement, only INSERT statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fdbbf49537d5896499e4f580d89d3d977843a76" translate="yes" xml:space="preserve">
          <source>SQLite lets me insert a string into a database column of type integer!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e525cc6d45550b4b1a265dd25df50cc71c4474b0" translate="yes" xml:space="preserve">
          <source>SQLite limits the depth of recursion of triggers in order to prevent a statement involving recursive triggers from using an unbounded amount of memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb5977c1cc25afeb2b0e4bd5a50680da96bdd766" translate="yes" xml:space="preserve">
          <source>SQLite makes a copy of the content of the &lt;a href=&quot;c3ref/mem_methods&quot;&gt;sqlite3_mem_methods&lt;/a&gt; object so the object can be modified after the &lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config()&lt;/a&gt; call returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1791cae0a6c7259639f6781e55e553d509ec456" translate="yes" xml:space="preserve">
          <source>SQLite makes no guarantees about the order of results if a SELECT omits the ORDER BY clause. Even so, the order of results does not change from one run to the next, and so many applications mistakenly come to depend on the arbitrary output order whatever that order happens to be. However, sometimes new versions of SQLite will contain optimizer enhancements that will cause the output order of queries without ORDER BY clauses to shift. When that happens, applications that depend on a certain output order might malfunction. By running the application multiple times with this pragma both disabled and enabled, cases where the application makes faulty assumptions about output order can be identified and fixed early, reducing problems that might be caused by linking against a different version of SQLite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0ac4bc4025ad0a187612fd2738f58e087756b50" translate="yes" xml:space="preserve">
          <source>SQLite manipulates the contents of the file-system using a combination of the following four types of operation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd796a8c085bea850ea98c0f816e6ce6c1055032" translate="yes" xml:space="preserve">
          <source>SQLite may attempt to convert values between the storage classes INTEGER, REAL, and/or TEXT before performing a comparison. Whether or not any conversions are attempted before the comparison takes place depends on the type affinity of the operands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86322113b50354d8e93e1a8d65dbbd7e579ef951" translate="yes" xml:space="preserve">
          <source>SQLite may make use of transient indices to implement SQL language features such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="692bd1d4aef60fc758b11851675895cb10aedde7" translate="yes" xml:space="preserve">
          <source>SQLite might also add one of the following flags to the xOpen method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="945af510f90e6578c1019b41a7ec0b83b8498700" translate="yes" xml:space="preserve">
          <source>SQLite might use a skip-scan on an index if it knows that the first one or more columns contain many duplication values. If there are too few duplicates in the left-most columns of the index, then it would be faster to simply step ahead to the next value, and thus do a full table scan, than to do a binary search on an index to locate the next left-column value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae7f6237fc49c4f40b5f79296508bbf096f1c300" translate="yes" xml:space="preserve">
          <source>SQLite must see the journal files in order to recover from a crash or power failure. If the &lt;a href=&quot;fileformat2#hotjrnl&quot;&gt;hot journal files&lt;/a&gt; are moved, deleted, or renamed after a crash or power failure, then automatic recovery will not work and the database may go corrupt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e833260d531c8e2e412472ff105b04979b5cf7c" translate="yes" xml:space="preserve">
          <source>SQLite mutexes can also be disabled at run-time using the &lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config()&lt;/a&gt; interface. To completely disable all mutexing, the application can invoke:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17328ec696bc91982c93295b65652b033f2ec296" translate="yes" xml:space="preserve">
          <source>SQLite needs to know if the native byte order of the target CPU is big-endian or little-ending. The SQLITE_BYTEORDER preprocessor is set to 4321 for big-endian machines and 1234 for little-endian machines, or it can be 0 to mean that the byte order must be determined at run-time. There are #ifdefs in the code that set SQLITE_BYTEORDER automatically for all common platforms and compilers. However, it may be advantageous to set SQLITE_BYTEORDER appropriately when compiling SQLite for obscure targets. If the target byte order cannot be determined at compile-time, then SQLite falls back to doing run-time checks, which always work, though with a small performance penalty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eec4b7f1b229092638c755d579865f53adc26ae9" translate="yes" xml:space="preserve">
          <source>SQLite never assumes atomic page writes &lt;em&gt;in its default configurations&lt;/em&gt;. But a custom &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt; can set one of the &lt;a href=&quot;c3ref/c_iocap_atomic&quot;&gt;SQLITE_IOCAP_ATOMIC&lt;/a&gt; bits in the result of the xDeviceCharacteristic() method and then SQLite will assume that page writes are atomic. The application must supply a custom VFS to accomplish this, however, since none of the standard VFSes will ever set any of the atomic bits in the xDeviceCharacteristics() vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e50c611c2a64f7dc9dc711887d5a6dcc24f10de" translate="yes" xml:space="preserve">
          <source>SQLite never assumes that database page writes are atomic, regardless of the PSOW setting.&lt;sup&gt;(1)&lt;/sup&gt; And hence SQLite is always able to automatically recover from torn pages induced by a crash. Enabling PSOW does not decrease SQLite's ability to recover from a torn page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a73150dbd46d3caaecfb727306a8488e11089c46" translate="yes" xml:space="preserve">
          <source>SQLite normally stores all content in a single disk file. However, while performing a transaction, information necessary to recover the database following a crash or power failure is stored in auxiliary journal files. Such journal files are described as &lt;a href=&quot;fileformat2#hotjrnl&quot;&gt;&quot;hot&quot;&lt;/a&gt;. The journal files have the same name as the original database file with the addition of &lt;code&gt;-journal&lt;/code&gt; or &lt;code&gt;-wal&lt;/code&gt; suffix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c2764b7ab8c8fe2115410e837d5a49ba37682ad" translate="yes" xml:space="preserve">
          <source>SQLite now honors the UNIQUE keyword in CREATE UNIQUE INDEX. Primary keys are required to be unique.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b528bcd272bd4532c5fdb40cce96437b126ffc1d" translate="yes" xml:space="preserve">
          <source>SQLite now implements all of its built-in functions using this interface. For additional information and examples on how to create new SQL functions, review the SQLite source code in the file &lt;b&gt;func.c&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="741c17c0aae3a15bc76f9c3b0feb23ceb419b07b" translate="yes" xml:space="preserve">
          <source>SQLite only supports one writer at a time per database file. But in most cases, a write transaction only takes milliseconds and so multiple writers can simply take turns. SQLite will handle more write concurrency that many people suspect. Nevertheless, client/server database systems, because they have a long-running server process at hand to coordinate access, can usually handle far more write concurrency than SQLite ever will.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cbe82e83c540bf7ce2e1eadb8c5b0e3352775de" translate="yes" xml:space="preserve">
          <source>SQLite parses MATCH clauses (i.e. does not report a syntax error if you specify one), but does not enforce them. All foreign key constraints in SQLite are handled as if MATCH SIMPLE were specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c52abe2b4224c19357e2fb51b9983ebbf48e0915" translate="yes" xml:space="preserve">
          <source>SQLite parses expressions into a tree for processing. During code generation, SQLite walks this tree recursively. The depth of expression trees is therefore limited in order to avoid using too much stack space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52651f8e847f0d13fb28fbf85a29bff92a837a41" translate="yes" xml:space="preserve">
          <source>SQLite processes this by gathering all the output of query and then running that output through a sorter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe52b85233b043a411af65af0db61d939caa292e" translate="yes" xml:space="preserve">
          <source>SQLite provides a number of enhancements to the SQL language not normally found in other database engines. The EXPLAIN keyword and manifest typing have already been mentioned above. SQLite also provides statements such as &lt;a href=&quot;lang_replace&quot;&gt;REPLACE&lt;/a&gt; and the &lt;a href=&quot;lang_conflict&quot;&gt;ON CONFLICT&lt;/a&gt; clause that allow for added control over the resolution of constraint conflicts. SQLite supports &lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt; and &lt;a href=&quot;lang_detach&quot;&gt;DETACH&lt;/a&gt; commands that allow multiple independent databases to be used together in the same query. And SQLite defines APIs that allows the user to add new &lt;a href=&quot;c3ref/create_function&quot;&gt;SQL functions&lt;/a&gt; and &lt;a href=&quot;c3ref/create_collation&quot;&gt;collating sequences&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75b33c10e4ae0dc9caa69a9b718ca24a25cbfeba" translate="yes" xml:space="preserve">
          <source>SQLite provides isolation between operations in separate database connections. However, there is no isolation between operations that occur within the same database connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a19562eb5d14931c391924201db74f2b2170510" translate="yes" xml:space="preserve">
          <source>SQLite provides the ability for advanced programmers to exercise control over the query plan chosen by the optimizer. One method for doing this is to fudge the &lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE&lt;/a&gt; results in the &lt;a href=&quot;fileformat2#stat1tab&quot;&gt;sqlite_stat1&lt;/a&gt;, &lt;a href=&quot;fileformat2#stat3tab&quot;&gt;sqlite_stat3&lt;/a&gt;, and/or &lt;a href=&quot;fileformat2#stat4tab&quot;&gt;sqlite_stat4&lt;/a&gt; tables. That approach is not recommended except for the one scenario described in the next paragraph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="069bcc6cce5ca3be769be9d7d5d38ef69d29560b" translate="yes" xml:space="preserve">
          <source>SQLite provides these two interfaces for reporting on the status of the &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_free()&lt;/a&gt;, and &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_realloc()&lt;/a&gt; routines, which form the built-in memory allocation subsystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be5efeb16b0a34b3e2605cf2967c7a9f9f4502b" translate="yes" xml:space="preserve">
          <source>SQLite provides these two interfaces for reporting on the status of the &lt;a href=&quot;free&quot;&gt;sqlite3_malloc()&lt;/a&gt;, &lt;a href=&quot;free&quot;&gt;sqlite3_free()&lt;/a&gt;, and &lt;a href=&quot;free&quot;&gt;sqlite3_realloc()&lt;/a&gt; routines, which form the built-in memory allocation subsystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="796f29585c117f2d84f8816579b3c6eeec799286" translate="yes" xml:space="preserve">
          <source>SQLite queries an implementation for file-system characteristics using the xDeviceCharacteristics() and xSectorSize() methods of the database file file-handle. These two methods are only ever called on file-handles open on database files. They are not called for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1001eecb9650b8452d3fe909aaa11b4544423e7e" translate="yes" xml:space="preserve">
          <source>SQLite reads and writes small blobs (for example, thumbnail images) &lt;a href=&quot;#approx&quot;&gt;35% faster&amp;sup1;&lt;/a&gt; than the same blobs can be read from or written to individual files on disk using fread() or fwrite().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d70ea0800f08a06761cd47e896b93495f4c9c9" translate="yes" xml:space="preserve">
          <source>SQLite responds gracefully to system errors. Obscure out-of-memory and I/O errors are reported back up to the application. These error reporting paths are all carefully tested to ensure they will always work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c0c283f7e4e05e8236569bff26a222a275bf7f9" translate="yes" xml:space="preserve">
          <source>SQLite shall attempt to obtain an</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc4b26fb3a3dbd3635c28a9c88ca506e8fda6086" translate="yes" xml:space="preserve">
          <source>SQLite shall ensure that a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68cdf5c9c482135a76a154ad68cc4116ae97dcc7" translate="yes" xml:space="preserve">
          <source>SQLite shall write the page data into the database file, using a single call to the xWrite method of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="740a9f7c5b70a08a25f10f9d2fba2d5ac406ba97" translate="yes" xml:space="preserve">
          <source>SQLite should never crash, overflow a buffer, leak memory, or exhibit any other harmful behavior, even when presented with maliciously malformed SQL inputs or database files. SQLite should always detect erroneous inputs and raise an error, not crash or corrupt memory. Any malfunction caused by an SQL input or database file is considered a serious bug and will be promptly addressed when brought to the attention of the SQLite developers. SQLite is extensively fuzz-tested to help ensure that it is resistant to these kinds of errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8394c39a29a6c802cb3baaa5a9c23f7e97f8a73c" translate="yes" xml:space="preserve">
          <source>SQLite solves this problem by using a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a17840ca9490a98d4558d4de1067d407ae4f9392" translate="yes" xml:space="preserve">
          <source>SQLite source code is managed using the &lt;a href=&quot;https://fossil-scm.org&quot;&gt;Fossil&lt;/a&gt; version control system. Fossil was written specifically to support SQLite development. Fossil provides both distributed version control and issue tracking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa87de437d401b498b7d8eb223dcf3f87cf0893d" translate="yes" xml:space="preserve">
          <source>SQLite sources are maintained on three geographically dispersed servers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e02e50c5282bb5b0a3a678ffe1050ddfbc21a817" translate="yes" xml:space="preserve">
          <source>SQLite stores an entire database within a single file, the format of which is described in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a0b29ed9ca13970622475438234a3b6eb2529a8" translate="yes" xml:space="preserve">
          <source>SQLite strives to implement ORDER BY clauses using a preexisting index. If an appropriate index already exists, SQLite will walk the index, rather than the underlying table, to extract the requested information, and thus cause the rows to come out in the desired order. But if SQLite cannot find an appropriate index it will evaluate the query and store each row in a transient index whose data is the row data and whose key is the ORDER BY terms. After the query is evaluated, SQLite goes back and walks the transient index from beginning to end in order to output the rows in the desired order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79801eb3ee90b8531950935fcb700e5d7936b51b" translate="yes" xml:space="preserve">
          <source>SQLite strives to keep error logger traffic low and only send messages to the error logger when there really is something wrong. Applications might further cull the error message traffic by deliberately ignore certain classes of error messages that they do not care about. For example, an application that makes frequent database schema changes might want to ignore all SQLITE_SCHEMA errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76b7bc709cc1bfb344641faff586e57a6d874b11" translate="yes" xml:space="preserve">
          <source>SQLite strives to verify that every branch instruction makes a difference using &lt;a href=&quot;https://en.wikipedia.org/wiki/Mutation_testing&quot;&gt;mutation testing&lt;/a&gt;. &lt;a href=&quot;th3#muttest&quot;&gt;A script&lt;/a&gt; first compiles the SQLite source code into assembly language (using, for example, the -S option to gcc). Then the script steps through the generated assembly language and, one by one, changes each branch instruction into either an unconditional jump or a no-op, compiles the result, and verifies that the test suite catches the mutation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61116c736ec15bc5b4fb2fc6a87d1890ff944be5" translate="yes" xml:space="preserve">
          <source>SQLite supports a limited subset of ALTER TABLE. The ALTER TABLE command in SQLite allows the user to rename a table, to rename a column within a table, or to add a new column to an existing table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fa3301d9a603d43c374c933699b5b685c255796" translate="yes" xml:space="preserve">
          <source>SQLite supports an unlimited number of simultaneous readers, but it will only allow one writer at any instant in time. For many situations, this is not a problem. Writers queue up. Each application does its database work quickly and moves on, and no lock lasts for more than a few dozen milliseconds. But there are some applications that require more concurrency, and those applications may need to seek a different solution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="362a3fd555302c4f1eaf77cb8e7f778518efb28e" translate="yes" xml:space="preserve">
          <source>SQLite supports five date and time functions as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91957f75e3d4e0fd1006ddb7500b87cbbf67b068" translate="yes" xml:space="preserve">
          <source>SQLite supports many &lt;a href=&quot;lang_corefunc&quot;&gt;simple&lt;/a&gt;, &lt;a href=&quot;lang_aggfunc&quot;&gt;aggregate&lt;/a&gt;, and &lt;a href=&quot;windowfunctions&quot;&gt;window&lt;/a&gt; SQL functions. For presentation purposes, simple functions are further subdivided into &lt;a href=&quot;lang_corefunc&quot;&gt;core functions&lt;/a&gt;, &lt;a href=&quot;lang_datefunc&quot;&gt;date-time functions&lt;/a&gt;, and &lt;a href=&quot;json1&quot;&gt;JSON functions&lt;/a&gt;. Applications can add new functions, written in C/C++, using the &lt;a href=&quot;c3ref/create_function&quot;&gt;sqlite3_create_function()&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb2625e03f106cbbdee7f3db77e634d01593acaa" translate="yes" xml:space="preserve">
          <source>SQLite supports the ability of an application to specify an alternative memory allocator at run-time by filling in an instance of the &lt;a href=&quot;c3ref/mem_methods&quot;&gt;sqlite3_mem_methods&lt;/a&gt; object with pointers to the routines of the alternative implementation then registering the new alternative implementation using the &lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config()&lt;/a&gt; interface. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="017fb6b291ff89e609d155a096555bd5bbe2c94f" translate="yes" xml:space="preserve">
          <source>SQLite supports the following 11 built-in window functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a02f0bb2b069910c39ea479587454cc5f38daf81" translate="yes" xml:space="preserve">
          <source>SQLite supports three different threading modes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4014b7a930ff3b73114947a465a719ff6e29de6d" translate="yes" xml:space="preserve">
          <source>SQLite tries to detect misuse and report the misuse using this result code. However, there is no guarantee that the detection of misuse will be successful. Misuse detection is probabilistic. Applications should never depend on an SQLITE_MISUSE return value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84db0173921e2cbe9f6c615710bf66e073f79708" translate="yes" xml:space="preserve">
          <source>SQLite understands a real table to be a shadow table if all of the following are true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89cbe958d74b15f24f6e6b8bc29bafc1643a7f0d" translate="yes" xml:space="preserve">
          <source>SQLite understands most of the standard SQL language. But it does &lt;a href=&quot;omitted&quot;&gt;omit some features&lt;/a&gt; while at the same time adding a few features of its own. This document attempts to describe precisely what parts of the SQL language SQLite does and does not support. A list of &lt;a href=&quot;lang_keywords&quot;&gt;SQL keywords&lt;/a&gt; is also provided. The SQL language syntax is described by &lt;a href=&quot;syntaxdiagrams&quot;&gt;syntax diagrams&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76a4b937d814efc3107985206c3839b75a40d5c0" translate="yes" xml:space="preserve">
          <source>SQLite understands the following binary operators, in order from highest to lowest precedence:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de40d61f7018c5b48e3c644cbaef8bf7d8b66fd1" translate="yes" xml:space="preserve">
          <source>SQLite uses &lt;a href=&quot;datatype3&quot;&gt;dynamic typing&lt;/a&gt;. Content can be stored as INTEGER, REAL, TEXT, BLOB, or as NULL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d9e9446caa946736bd5a01f0671ef69ec6cbe7e" translate="yes" xml:space="preserve">
          <source>SQLite uses &lt;code&gt;testcase()&lt;/code&gt; macros as described in the previous subsection to make sure that every condition in a bit-vector decision takes on every possible outcome. In this way, SQLite also achieves 100% MC/DC in addition to 100% branch coverage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2c828337726f1245db87b3b8499d82386b0261e" translate="yes" xml:space="preserve">
          <source>SQLite uses POSIX advisory locks to implement locking on Unix. On Windows it uses the LockFile(), LockFileEx(), and UnlockFile() system calls. SQLite assumes that these system calls all work as advertised. If that is not the case, then database corruption can result. One should note that POSIX advisory locking is known to be buggy or even unimplemented on many NFS implementations (including recent versions of Mac OS X) and that there are reports of locking problems for network filesystems under Windows. Your best defense is to not use SQLite for files on a network filesystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="419f5d6983bf4618f2a5dc1a95258ff9924a25c1" translate="yes" xml:space="preserve">
          <source>SQLite uses a continuous integration process. The software is under constant enhancement and refinement. The latest trunk check-ins are frequently used internally for mission-critical operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a0520919cdd7c57c0662d504d1dbd0da4f6ed1c" translate="yes" xml:space="preserve">
          <source>SQLite uses a cost-based query planner. When there are two or more ways of solving the same query, SQLite tries to estimate the total amount of time needed to run the query using each plan, and then uses the plan with the lowest estimated cost. A cost is computed mostly from the estimated time, and so this case could go either way depending on the table size and what WHERE clause constraints were available, and so forth. But generally speaking, the indexed sort would probably be chosen, if for no other reason, because it does not need to accumulate the entire result set in temporary storage before sorting and thus uses much less temporary storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db9d581a988a96a28e53beca39811ace9da326e2" translate="yes" xml:space="preserve">
          <source>SQLite uses a more general dynamic type system. In SQLite, the datatype of a value is associated with the value itself, not with its container. The dynamic type system of SQLite is backwards compatible with the more common static type systems of other database engines in the sense that SQL statements that work on statically typed databases should work the same way in SQLite. However, the dynamic typing in SQLite allows it to do things which are not possible in traditional rigidly typed databases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e1b55e0fd7f9c8ac0ebdd30cf39af20d7f2d3b7" translate="yes" xml:space="preserve">
          <source>SQLite uses a page cache of recently read and written database pages. This page cache is used not just for the main database file but also for transient indices and tables stored in temporary files. If SQLite needs to use a temporary index or table and the &lt;a href=&quot;compile#temp_store&quot;&gt;SQLITE_TEMP_STORE&lt;/a&gt; compile-time parameter and the &lt;a href=&quot;pragma#pragma_temp_store&quot;&gt;temp_store pragma&lt;/a&gt; are set to store temporary tables and index on disk, the information is still initially stored in memory in the page cache. The temporary file is not opened and the information is not truly written to disk until the page cache is full.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b12c1b1b8cc61e32991a698cfd1267c2d0f89edd" translate="yes" xml:space="preserve">
          <source>SQLite uses an efficient &lt;a href=&quot;queryplanner-ng&quot;&gt;query planner algorithm&lt;/a&gt; and so even a large join can be &lt;a href=&quot;c3ref/prepare&quot;&gt;prepared&lt;/a&gt; quickly. Hence, there is no mechanism to raise or lower the limit on the number of tables in a join.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c5e93f52d20c084674804c93cc58302ab86f180" translate="yes" xml:space="preserve">
          <source>SQLite uses binary arithmetic and in binary, there is no way to write 9.95 in a finite number of bits. The closest to you can get to 9.95 in a 64-bit IEEE float (which is what SQLite uses) is 9.949999999999999289457264239899814128875732421875. So when you type &quot;9.95&quot;, SQLite really understands the number to be the much longer value shown above. And that value rounds down.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="100c32205d77668106f751ddb49a630f21e7c164" translate="yes" xml:space="preserve">
          <source>SQLite uses dynamic memory allocation to obtain memory for storing various objects (ex: &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connections&lt;/a&gt; and &lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statements&lt;/a&gt;) and to build a memory cache of the database file and to hold the results of queries. Much effort has gone into making the dynamic memory allocation subsystem of SQLite reliable, predictable, robust, secure, and efficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d6ed4ddbc792f962a9c15a9bfff1ed56a12c03" translate="yes" xml:space="preserve">
          <source>SQLite uses dynamic run-time typing. So just because a column is declared to contain a particular type does not mean that the data stored in that column is of the declared type. SQLite is strongly typed, but the typing is dynamic not static. Type is associated with individual values, not with the containers used to hold those values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c675b439e8b045a5761d6f6f634a6e3c87b0d8" translate="yes" xml:space="preserve">
          <source>SQLite uses file locks on the database file, and on the &lt;a href=&quot;wal&quot;&gt;write-ahead log&lt;/a&gt; or &lt;a href=&quot;wal&quot;&gt;WAL&lt;/a&gt; file, to coordinate access between concurrent processes. Without coordination, two threads or processes might try to make incompatible changes to a database file at the same time, resulting in database corruption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfc489b7d0364b55c420255bebe8164eaf3143ec" translate="yes" xml:space="preserve">
          <source>SQLite uses filesystem locks to make sure that only one process and database connection is trying to modify the database at a time. The filesystem locking mechanism is implemented in the VFS layer and is different for every operating system. SQLite depends on this implementation being correct. If something goes wrong and two or more processes are able to write the same database file at the same time, severe damage can result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5d3144ca7b57a8fe6bfa7c95d8cd76ffe8cc05" translate="yes" xml:space="preserve">
          <source>SQLite uses one of these integer values as the second argument to calls it makes to the xLock() and xUnlock() methods of an &lt;a href=&quot;#sqlite3_io_methods&quot;&gt;sqlite3_io_methods&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c37dcfbf68e2c7d0288d36eee6b01629eff86a" translate="yes" xml:space="preserve">
          <source>SQLite uses one of these integer values as the second argument to calls it makes to the xLock() and xUnlock() methods of an &lt;a href=&quot;io_methods&quot;&gt;sqlite3_io_methods&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6149cc0b8adc5f4defc7a195f4b03b55ce3c135" translate="yes" xml:space="preserve">
          <source>SQLite uses pthreads for its mutex implementation on Unix and SQLite requires a recursive mutex. Most modern pthread implementations support recursive mutexes, but not all do. For systems that do not support recursive mutexes, it is recommended that applications operate in single-threaded mode only. If this is not possible, SQLite provides an alternative recursive mutex implementation built on top of the standard &quot;fast&quot; mutexes of pthreads. This alternative implementation should work correctly as long as pthread_equal() is atomic and the processor has a coherent data cache. The alternative recursive mutex implementation is enabled by the following compiler command-line switch:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9e2e6b108a44c0d3f75ca74e3d41c51203f95b5" translate="yes" xml:space="preserve">
          <source>SQLite uses reader/writer locks to control access to the database. (Under Win95/98/ME which lacks support for reader/writer locks, a probabilistic simulation is used instead.) But use caution: this locking mechanism might not work correctly if the database file is kept on an NFS filesystem. This is because fcntl() file locking is broken on many NFS implementations. You should avoid putting SQLite database files on NFS if multiple processes might try to access the file at the same time. On Windows, Microsoft's documentation says that locking may not work under FAT filesystems if you are not running the Share.exe daemon. People who have a lot of experience with Windows tell me that file locking of network files is very buggy and is not dependable. If what they say is true, sharing an SQLite database between two or more Windows machines might cause unexpected problems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88bb033eaf6e37670d2db7d84f333ca9cade029c" translate="yes" xml:space="preserve">
          <source>SQLite uses the &quot;&lt;code&gt;file:&lt;/code&gt;&quot; URI syntax to identify database files. SQLite strives to interpret file: URIs in exactly the same way as popular web-browsers such as &lt;a href=&quot;http://www.mozilla.com/en-US/firefox/new/&quot;&gt;Firefox&lt;/a&gt;, &lt;a href=&quot;http://www.google.com/chrome/&quot;&gt;Chrome&lt;/a&gt;, &lt;a href=&quot;http://www.apple.com/safari/&quot;&gt;Safari&lt;/a&gt;, &lt;a href=&quot;http://windows.microsoft.com/en-US/internet-explorer/products/ie/home&quot;&gt;Internet Explorer&lt;/a&gt;, and &lt;a href=&quot;http://www.opera.com/&quot;&gt;Opera&lt;/a&gt;, and command-line programs such as &lt;a href=&quot;http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/start.mspx&quot;&gt;Windows &quot;start&quot;&lt;/a&gt; and the Mac OS-X &lt;a href=&quot;http://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man1/open.1.html&quot;&gt;&quot;open&quot;&lt;/a&gt; command. A succinct summary of the URI parsing rules follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69d5ac42573f581392e9517041d99daa76b38636" translate="yes" xml:space="preserve">
          <source>SQLite uses the assumptions in this section to try to speed up reading from and writing to the database file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d55089274731f4bfb9ebd084387b8f1d1faf31f7" translate="yes" xml:space="preserve">
          <source>SQLite uses the following terminology:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ee4041bd18f2412c9c45cca33a698969a142e88" translate="yes" xml:space="preserve">
          <source>SQLite uses the fsync() system call on Unix and the FlushFileBuffers() system call on w32 in order to sync the file system buffers onto disk oxide as shown in &lt;a href=&quot;#section_3_7&quot;&gt;step 3.7&lt;/a&gt; and &lt;a href=&quot;#section_3_10&quot;&gt;step 3.10&lt;/a&gt;. Unfortunately, we have received reports that neither of these interfaces works as advertised on many systems. We hear that FlushFileBuffers() can be completely disabled using registry settings on some Windows versions. Some historical versions of Linux contain versions of fsync() which are no-ops on some filesystems, we are told. Even on systems where FlushFileBuffers() and fsync() are said to be working, often the IDE disk control lies and says that data has reached oxide while it is still held only in the volatile control cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6362e589dd1fe9de49e118297201339e71a38ea0" translate="yes" xml:space="preserve">
          <source>SQLite uses the fsync() system call to flush data to the disk under Unix and it uses the FlushFileBuffers() to do the same under Windows. Once again, SQLite assumes that these operating system services function as advertised. But it has been reported that fsync() and FlushFileBuffers() do not always work correctly, especially with inexpensive IDE disks. Apparently some manufactures of IDE disks have controller chips that report that data has reached the disk surface when in fact the data is still in volatile cache memory in the disk drive electronics. There are also reports that Windows sometimes chooses to ignore FlushFileBuffers() for unspecified reasons. The author cannot verify any of these reports. But if they are true, it means that database corruption is a possibility following an unexpected power loss. These are hardware and/or operating system bugs that SQLite is unable to defend against.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32280f4c0ca13b9e9b050e36d2463beacf57a438" translate="yes" xml:space="preserve">
          <source>SQLite uses the path component of the URI as the name of the disk file which contains the database. If the path begins with a '/' character, then it is interpreted as an absolute path. If the path does not begin with a '/' (meaning that the authority section is omitted from the URI) then the path is interpreted as a relative path. On windows, the first component of an absolute path is a drive specification (e.g. &quot;C:&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4d974786d3ead21fc22643249354066187d79d8" translate="yes" xml:space="preserve">
          <source>SQLite uses the sqlite3_value object to represent all values that can be stored in a database table. SQLite uses dynamic typing for the values it stores. Values stored in sqlite3_value objects can be integers, floating point values, strings, BLOBs, or NULL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3216e45fcb6dfe91aace5bfc00370029ab1bdf71" translate="yes" xml:space="preserve">
          <source>SQLite uses the xBestIndex method of a virtual table module to determine the best way to access the virtual table. The xBestIndex method has a prototype like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0489776d40de65aee092fe1c30e018ce2c473df" translate="yes" xml:space="preserve">
          <source>SQLite uses two defenses against this problem. In the first place, SQLite records the number of pages in the rollback journal in the header of the rollback journal. This number is initially zero. So during an attempt to rollback an incomplete (and possibly corrupt) rollback journal, the process doing the rollback will see that the journal contains zero pages and will thus make no changes to the database. Prior to a commit, the rollback journal is flushed to disk to ensure that all content has been synced to disk and there is no &quot;garbage&quot; left in the file, and only then is the page count in the header changed from zero to true number of pages in the rollback journal. The rollback journal header is always kept in a separate sector from any page data so that it can be overwritten and flushed without risking damage to a data page if a power outage occurs. Notice that the rollback journal is flushed to disk twice: once to write the page content and a second time to write the page count in the header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d42ec8c41ede991363e3c5f0bdd1b5f73c156509" translate="yes" xml:space="preserve">
          <source>SQLite version</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c1b4a4dcbf2aebc5bc149eaa5647521eb4221db" translate="yes" xml:space="preserve">
          <source>SQLite version 2.8 allowed multiple simultaneous readers or a single writer but not both. SQLite version 3.0 allows one process to begin writing the database while other processes continue to read. The writer must still obtain an exclusive lock on the database for a brief interval in order to commit its changes, but the exclusive lock is no longer required for the entire write operation. A &lt;a href=&quot;lockingv3&quot;&gt;more detailed report&lt;/a&gt; on the locking behavior of SQLite version 3.0 is available separately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d94b9491c8be74ea2c30ca7aa647aa4aa14bb93b" translate="yes" xml:space="preserve">
          <source>SQLite version 2.8 had the feature that any type of data could be stored in any table column regardless of the declared type of that column. This feature is retained in version 3.0, though in a slightly modified form. Each table column will store any type of data, though columns have an affinity for the format of data defined by their declared datatype. When data is inserted into a column, that column will make an attempt to convert the data format into the column's declared type. All SQL database engines do this. The difference is that SQLite 3.0 will still store the data even if a format conversion is not possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc60006fcf0499f5d27e14e08e37966af30b84e4" translate="yes" xml:space="preserve">
          <source>SQLite version 2.8 will continue to be supported with bug fixes for the foreseeable future. In order to allow SQLite version 2.8 and SQLite version 3.0 to peacefully coexist, the names of key files and APIs in SQLite version 3.0 have been changed to include the character &quot;3&quot;. For example, the include file used by C programs has been changed from &quot;sqlite.h&quot; to &quot;sqlite3.h&quot;. And the name of the shell program used to interact with databases has been changed from &quot;sqlite.exe&quot; to &quot;sqlite3.exe&quot;. With these changes, it is possible to have both SQLite 2.8 and SQLite 3.0 installed on the same system at the same time. And it is possible for the same C program to link against both SQLite 2.8 and SQLite 3.0 at the same time and to use both libraries at the same time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9294985ea2869d413fc8305361b7fbc4273dc106" translate="yes" xml:space="preserve">
          <source>SQLite version 2.8 will deal with data in various formats internally, but when writing to the disk or interacting through its API, SQLite 2.8 always converts data into ASCII text. SQLite 3.0, in contrast, exposes its internal data representations to the user and stores binary representations to disk when appropriate. The exposing of non-ASCII representations was added in order to support BLOBs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aa319379218f233cb1b56ac0f70d481e776d1c7" translate="yes" xml:space="preserve">
          <source>SQLite version 3 has the usual set of SQL comparison operators including &quot;=&quot;, &quot;==&quot;, &quot;&amp;lt;&quot;, &quot;&amp;lt;=&quot;, &quot;&amp;gt;&quot;, &quot;&amp;gt;=&quot;, &quot;!=&quot;, &quot;&quot;, &quot;IN&quot;, &quot;NOT IN&quot;, &quot;BETWEEN&quot;, &quot;IS&quot;, and &quot;IS NOT&quot;, .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a76401a1eda6f0ec422be63e7c58c505ecee397a" translate="yes" xml:space="preserve">
          <source>SQLite version 3 seeks to avoid writer starvation through the use of the PENDING lock. The PENDING lock allows existing readers to continue but prevents new readers from connecting to the database. So when a process wants to write a busy database, it can set a PENDING lock which will prevent new readers from coming in. Assuming existing readers do eventually complete, all SHARED locks will eventually clear and the writer will be given a chance to make its changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eae91dc769edea8eecdb43451d72cf217325ea89" translate="yes" xml:space="preserve">
          <source>SQLite version 3.0 introduces important changes to the library, including:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f72a15b94cfd255cf997707c03d82c9e9918a44" translate="yes" xml:space="preserve">
          <source>SQLite version 3.0 is a new version of SQLite, derived from the SQLite 2.8.13 code base, but with an incompatible file format and API. SQLite version 3.0 was created to answer demand for the following features:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb4f474cdcf4df9f87f4000dec5a3f14ed4609b" translate="yes" xml:space="preserve">
          <source>SQLite version 3.0 is made possible in part by AOL developers supporting and embracing great Open-Source Software.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef6b4fa665bce97a58d8cad0238042778638e4ea" translate="yes" xml:space="preserve">
          <source>SQLite version 3.22.0 (2018-01-22) contains 5290 assert() macros, 839 testcase() macros, 88 ALWAYS() macros, and 63 NEVER() macros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c307004a0921076eb49a52bd8a91c6b52b2a1b6b" translate="yes" xml:space="preserve">
          <source>SQLite version 3.3.14 adds the concept of &quot;Exclusive Access Mode&quot;. In exclusive access mode, SQLite retains the exclusive database lock at the conclusion of each transaction. This prevents other processes from accessing the database, but in many deployments only a single process is using a database so this is not a serious problem. The advantage of exclusive access mode is that disk I/O can be reduced in three ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbb503554e7c282aedc13f070027736e1a10fc7b" translate="yes" xml:space="preserve">
          <source>SQLite version 3.5.0 (2007-09-04) introduces a new OS interface layer that is incompatible with all prior versions of SQLite. In addition, a few existing interfaces have been generalized to work across all database connections within a process rather than just all connections within a thread. The purpose of this article is to describe the changes to 3.5.0 in detail so that users of prior versions of SQLite can judge what, if any, effort will be required to upgrade to newer versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70942f1687fac3fdda946d021fc48ca1143963c7" translate="yes" xml:space="preserve">
          <source>SQLite version 3.6.0 (2008-07-16) contains many changes. As is the custom with the SQLite project, most changes are fully backwards compatible. However, a few of the changes in version 3.6.0 are incompatible and might require modifications to application code and/or makefiles. This document is a briefing on the changes in SQLite 3.6.0 with special attention to the incompatible changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da041872c2ed2b85c83a9be5e4c3422e0d89ff87" translate="yes" xml:space="preserve">
          <source>SQLite version 3.7.0 introduced a number of new enhancements to the SQLite database file format (such as but not limited to &lt;a href=&quot;wal&quot;&gt;WAL&lt;/a&gt;). The 3.7.0 release was a shake-out release for these new features. We expected to find problems and were not disappointed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e4e9d6b69cabc107d20e4736663f7980b134d1" translate="yes" xml:space="preserve">
          <source>SQLite version 3.7.16.2 fixes a subtle race condition in the locking logic on Windows systems. When a database file is in need of recovery because the previous process writing to it crashed in the middle of a transaction and two or more processes try to open the that database at the same time, then the race condition might cause one of those processes to get a false indication that the recovery has already completed, allowing that process to continue using the database file without running recovery first. If that process writes to the file, then the file might go corrupt. This race condition had apparently existed in all prior versions of SQLite for Windows going back to 2004. But the race was very tight. Practically speaking, you need a fast multi-core machine in which you launch two processes to run recovery at the same moment on two separate cores. This defect was on Windows systems only and did not affect the posix OS interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c5d06f2767343fefb84004cfe2451c3fbeba78" translate="yes" xml:space="preserve">
          <source>SQLite was originally coded in such a way that the answer to all questions in the chart below would be &quot;Yes&quot;. But the experiments run on other SQL engines showed that none of them worked this way. So SQLite was modified to work the same as Oracle, PostgreSQL, and DB2. This involved making NULLs indistinct for the purposes of the SELECT DISTINCT statement and for the UNION operator in a SELECT. NULLs are still distinct in a UNIQUE column. This seems somewhat arbitrary, but the desire to be compatible with other engines outweighed that objection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc2cc08c1f222d49bc97f5f39c7b9c91ad3731d6" translate="yes" xml:space="preserve">
          <source>SQLite was originally designed with a policy of avoiding arbitrary limits. Of course, every program that runs on a machine with finite memory and disk space has limits of some kind. But in SQLite, those limits were not well defined. The policy was that if it would fit in memory and you could count it with a 32-bit integer, then it should work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="769cb93a3fb24f4ad929e24b9c4fe55eeec4efe2" translate="yes" xml:space="preserve">
          <source>SQLite was tested in the same configuration that it appears on the website. It was compiled with -O6 optimization and with the -DNDEBUG=1 switch which disables the many &quot;assert()&quot; statements in the SQLite code. The -DNDEBUG=1 compiler option roughly doubles the speed of SQLite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="864e2447d8a13ac7ee35b071674f4476208c7306" translate="yes" xml:space="preserve">
          <source>SQLite will also add one of the following flags to the xOpen() call, depending on the object being opened:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="131d0be5dd7e4aa0858930ddc9451eb1f3423fe0" translate="yes" xml:space="preserve">
          <source>SQLite will also attempt to use indices to help satisfy GROUP BY clauses and the DISTINCT keyword. If the nested loops of the join can be arranged such that rows that are equivalent for the GROUP BY or for the DISTINCT are consecutive, then the GROUP BY or DISTINCT logic can determine if the current row is part of the same group or if the current row is distinct simply by comparing the current row to the previous row. This can be much faster than the alternative of comparing each row to all prior rows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03ac5706e55e0f1ceba6bf4ddd17b581fa34f6ca" translate="yes" xml:space="preserve">
          <source>SQLite will always allocate at least mxPathname+1 bytes for the output buffer xFullPathname. The exact size of the output buffer is also passed as a parameter to both methods. If the output buffer is not large enough, &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_CANTOPEN&lt;/a&gt; should be returned. Since this is handled as a fatal error by SQLite, vfs implementations should endeavor to prevent this by setting mxPathname to a sufficiently large value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a98d8800d0c61913767afcbc8c0b3400cddf5e5e" translate="yes" xml:space="preserve">
          <source>SQLite will always allocate at least mxPathname+1 bytes for the output buffer xFullPathname. The exact size of the output buffer is also passed as a parameter to both methods. If the output buffer is not large enough, &lt;a href=&quot;../rescode#cantopen&quot;&gt;SQLITE_CANTOPEN&lt;/a&gt; should be returned. Since this is handled as a fatal error by SQLite, vfs implementations should endeavor to prevent this by setting mxPathname to a sufficiently large value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e33e35f6dabafac608ead478729b44348c338ef" translate="yes" xml:space="preserve">
          <source>SQLite will invoke the xMutexEnd() method when &lt;a href=&quot;#sqlite3_initialize&quot;&gt;sqlite3_shutdown()&lt;/a&gt; is called, but only if the prior call to xMutexInit returned SQLITE_OK. If xMutexInit fails in any way, it is expected to clean up after itself prior to returning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e7a5d17c455846b0ec61394b33dc86a1c9321c1" translate="yes" xml:space="preserve">
          <source>SQLite will invoke the xMutexEnd() method when &lt;a href=&quot;initialize&quot;&gt;sqlite3_shutdown()&lt;/a&gt; is called, but only if the prior call to xMutexInit returned SQLITE_OK. If xMutexInit fails in any way, it is expected to clean up after itself prior to returning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f8ba8da1a2e441af20b1b20244a8ec294fc1a9c" translate="yes" xml:space="preserve">
          <source>SQLite will make this determination, but only if it has been compiled with &lt;a href=&quot;compile#enable_stat3&quot;&gt;SQLITE_ENABLE_STAT3&lt;/a&gt; or &lt;a href=&quot;compile#enable_stat4&quot;&gt;SQLITE_ENABLE_STAT4&lt;/a&gt;. The &lt;a href=&quot;compile#enable_stat3&quot;&gt;SQLITE_ENABLE_STAT3&lt;/a&gt; and &lt;a href=&quot;compile#enable_stat4&quot;&gt;SQLITE_ENABLE_STAT4&lt;/a&gt; options causes the &lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE&lt;/a&gt; command to collect a histogram of column content in the &lt;a href=&quot;fileformat2#stat3tab&quot;&gt;sqlite_stat3&lt;/a&gt; or &lt;a href=&quot;fileformat2#stat4tab&quot;&gt;sqlite_stat4&lt;/a&gt; tables and to use this histogram to make a better guess at the best query to use for range constraints such as the above. The main difference between STAT3 and STAT4 is that STAT3 records histogram data for only the left-most column of an index whereas STAT4 records histogram data for all columns of an index. For single-column indexes, STAT3 and STAT4 work the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0feeafe3441c848d4df17e7ab2118b3ce654ef9a" translate="yes" xml:space="preserve">
          <source>SQLite will never invoke xInit() more than once without an intervening call to xShutdown().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8141933bded4b0433c5458cd8dc4b6c9aa50dccc" translate="yes" xml:space="preserve">
          <source>SQLite will normally invoke xFetch() with a createFlag of 0 or 1. SQLite will only use a createFlag of 2 after a prior call with a createFlag of 1 failed. In between the to xFetch() calls, SQLite may attempt to unpin one or more cache pages by spilling the content of pinned pages to disk and synching the operating system disk cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26bbe6f761c35b13c9b3c740596c8f4fafbb74f1" translate="yes" xml:space="preserve">
          <source>SQLite will normally work fine as the database backend to a website. But if the website is write-intensive or is so busy that it requires multiple servers, then consider using an enterprise-class client/server database engine instead of SQLite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11d8b5641b8ccc13250b43f6ec693456aaae006d" translate="yes" xml:space="preserve">
          <source>SQLite will still omit the sorting step. But in order for output to appear in the correct order, SQLite will do the table scan starting at the end and working toward the beginning, rather than starting at the beginning and working toward the end as shown in &lt;a href=&quot;#fig17&quot;&gt;figure 17&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db0bee01e01c7f06f53ced4aa077d1b69e3e443d" translate="yes" xml:space="preserve">
          <source>SQLite works best if you group multiple operations together into a single transaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a4570a64a559f2380207d7ac2eae2dd4a188a0c" translate="yes" xml:space="preserve">
          <source>SQLite works by compiling SQL text into &lt;a href=&quot;opcode&quot;&gt;bytecode&lt;/a&gt;, then running that bytecode using a virtual machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c47334be07eef6e2c6868c4937b4803add8d7d3" translate="yes" xml:space="preserve">
          <source>SQLite works by translating SQL statements into bytecode and then running that bytecode in a virtual machine. This document describes how how the bytecode engine works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebaf35d34ab3b907a64e57112416a9de1a568a2" translate="yes" xml:space="preserve">
          <source>SQLite works by translating each SQL statement into bytecode and then running that bytecode. A &lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statement&lt;/a&gt; in SQLite is mostly just the bytecode needed to implement the corresponding SQL. The &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2()&lt;/a&gt; interface is a compiler that translates SQL into bytecode. The &lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step()&lt;/a&gt; interface is the virtual machine that runs the bytecode contained within the &lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statement&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="535be0580b8710df785d98333c6a0024a79e6b52" translate="yes" xml:space="preserve">
          <source>SQLite works great as the database engine for most low to medium traffic websites (which is to say, most websites). The amount of web traffic that SQLite can handle depends on how heavily the website uses its database. Generally speaking, any site that gets fewer than 100K hits/day should work fine with SQLite. The 100K hits/day figure is a conservative estimate, not a hard upper bound. SQLite has been demonstrated to work with 10 times that amount of traffic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="878697a779b4f555e31be3e87a76fb2ec64adcb9" translate="yes" xml:space="preserve">
          <source>SQLite&amp;#x27;s Built-in printf()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d809358342217ac1c9798a4536e992e30b5c1bbd" translate="yes" xml:space="preserve">
          <source>SQLite's Built-in printf()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77bf8cb88e1c9ff7655bff7a5cbb97288c41b450" translate="yes" xml:space="preserve">
          <source>SQLite, in contrast, stores all content in a &lt;a href=&quot;fileformat2&quot;&gt;single file on disk&lt;/a&gt;. That single file is something you can point to and say &quot;this is the database&quot;. It behaves as an object. An SQLite database file can be copied, renamed, sent as an email attachment, passed as the argument a POST HTTP request, or otherwise treated as other data object such as an image, document, or media file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d5e7b501f4c23aeddb2e1d173f4fc5a56622fde" translate="yes" xml:space="preserve">
          <source>SQLite, in contrast, use only the amount of disk space actually needed to store the information in a row. If you store a single character in a VARCHAR(100) column, then only a single byte of disk space is consumed. (Actually two bytes - there is some overhead at the beginning of each column to record its datatype and length.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90a2c30d411105b1866a2fb7534e120d54c087c8" translate="yes" xml:space="preserve">
          <source>SQLite, like all SQL database engines, makes extensive use of malloc() (See the separate report on &lt;a href=&quot;malloc&quot;&gt;dynamic memory allocation in SQLite&lt;/a&gt; for additional detail.) On servers and workstations, malloc() never fails in practice and so correct handling of out-of-memory (OOM) errors is not particularly important. But on embedded devices, OOM errors are frighteningly common and since SQLite is frequently used on embedded devices, it is important that SQLite be able to gracefully handle OOM errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8aba37dd603a24e82fd4f1820189539d3d0a566" translate="yes" xml:space="preserve">
          <source>SQLite: Single File Database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8317c0736d9e6aaddc008372c034f2f63ca423a2" translate="yes" xml:space="preserve">
          <source>Safe languages are often touted for helping to prevent security vulnerabilities. True enough, but SQLite is not a particularly security-sensitive library. If an application is running untrusted and unverified SQL, then it already has much bigger security issues (SQL injection) that no &quot;safe&quot; language will fix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="371ba39228ab4a1c3c189b797c7120e98ace4662" translate="yes" xml:space="preserve">
          <source>Safe languages insert additional machine branches to do things like verify that array accesses are in-bounds. In correct code, those branches are never taken. That means that the machine code cannot be 100% branch tested, which is an important component of SQLite's quality strategy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c6da187258d5af2ebae1cdb3cc862f47c52557f" translate="yes" xml:space="preserve">
          <source>Safe languages usually want to abort if they encounter an out-of-memory (OOM) situation. SQLite is designed to recovery gracefully from an OOM. It is unclear how this could be accomplished in the current crop of safe languages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb8901e65be4e894ae11ab1d95f963f276b64fd4" translate="yes" xml:space="preserve">
          <source>Safe programming languages solve the easy problems: memory leaks, use-after-free errors, array overruns, etc. Safe languages provide no help beyond ordinary C code in solving the rather more difficult problem of computing a correct answer to an SQL statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c0b98b770b73c58eadb8af8b218e45dc7ebebbf" translate="yes" xml:space="preserve">
          <source>Safety-critical applications will usually want to modify the default lookaside memory configuration so that when the initial lookaside memory buffer is allocated during &lt;a href=&quot;c3ref/open&quot;&gt;sqlite3_open()&lt;/a&gt; the resulting memory allocation is not so large as to force the &lt;b&gt;n&lt;/b&gt; parameter to be too large. In order to keep &lt;b&gt;n&lt;/b&gt; under control, it is best to try to keep the largest memory allocation below 2 or 4 kilobytes. Hence, a reasonable default setup for the lookaside memory allocator might any one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb272988295a04bfacb652f9f425c9751c1efcff" translate="yes" xml:space="preserve">
          <source>Salt-1 copied from the WAL header</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f07478edf0a13be2b8353393ce58be98c5cb042" translate="yes" xml:space="preserve">
          <source>Salt-1: random integer incremented with each checkpoint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd8becc82bf3034e486b52e348505de06703eadf" translate="yes" xml:space="preserve">
          <source>Salt-2 copied from the WAL header</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2251457c30eb39ac4f98ca1b3b449998bdfb08bd" translate="yes" xml:space="preserve">
          <source>Salt-2: a different random number for each checkpoint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2802d3bf84d06bd601abc4160930ee13b4ba8886" translate="yes" xml:space="preserve">
          <source>Same as INTEGER-&amp;gt;TEXT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e164ee3e19bc05538690fe1a5205fe5b7956a433" translate="yes" xml:space="preserve">
          <source>Save the pointer passed as the second argument as the extension functions &quot;auxiliary data&quot;. The pointer may then be retrieved by the current or any future invocation of the same fts5 extension function made as part of the same MATCH query using the xGetAuxdata() API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c739de5dc59a519ecc88e91c12cee776ddb9f8ec" translate="yes" xml:space="preserve">
          <source>Savepoint</source>
          <target state="translated">Savepoint</target>
        </trans-unit>
        <trans-unit id="dae2c6197cf9bbcd1ad8c12e21c2553a379969bd" translate="yes" xml:space="preserve">
          <source>Scan all rows of realtab and for each row, find rows in tablevaluedfunc where param1 is equal to realtab.x</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81b10ed131cb8283236308eac51fe1690aaceea4" translate="yes" xml:space="preserve">
          <source>Scan all rows of tablevalued func and for each row find rows in realtab where x is equal to tablevaluedfunc.param1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54a7124a44e1230cb0e0f19e93fb0a0d583d3126" translate="yes" xml:space="preserve">
          <source>Schema S of &lt;a href=&quot;#sqlite3&quot;&gt;database connection&lt;/a&gt; D must be a &lt;a href=&quot;wal&quot;&gt;WAL mode&lt;/a&gt; database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4938e6644f0ad52bc0448849639259b7608261fb" translate="yes" xml:space="preserve">
          <source>Schema S of &lt;a href=&quot;sqlite3&quot;&gt;database connection&lt;/a&gt; D must be a &lt;a href=&quot;../wal&quot;&gt;WAL mode&lt;/a&gt; database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="783379b4d6a04cfdb7223b86944f535ee34f305b" translate="yes" xml:space="preserve">
          <source>Schema format number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3818a04cadbc7e36a69fd1fddf0ec427879c13a3" translate="yes" xml:space="preserve">
          <source>Search application tips</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f58d07a782f28f0be6c5eba33589bc58551ce12" translate="yes" xml:space="preserve">
          <source>Second Improvement: Split content into smaller pieces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec79d2ea1a314df8f0b27d40fa827558108d418f" translate="yes" xml:space="preserve">
          <source>Second copy of the WAL Index Information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c6b564bd8119e16a3e573a6f9e7c6d1ac7820f" translate="yes" xml:space="preserve">
          <source>Section</source>
          <target state="translated">Section</target>
        </trans-unit>
        <trans-unit id="bbd835e731943b498ec1909cabc1e38a99b94296" translate="yes" xml:space="preserve">
          <source>Security and compatibilities enhancements to &lt;a href=&quot;fts3#f3tknzr&quot;&gt;fts3_tokenizer()&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8229f87bed66ece3cde105695968321f8308f48e" translate="yes" xml:space="preserve">
          <source>See &quot;&lt;a href=&quot;queryplanner-ng#fossilcasestudy&quot;&gt;The Fossil NGQP Upgrade Case Study&lt;/a&gt;&quot; for another real-world example of using CROSS JOIN to manually control the nesting order of a join. The &lt;a href=&quot;queryplanner-ng#howtofix&quot;&gt;query planner checklist&lt;/a&gt; found later in the same document provides further guidance on manual control of the query planner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc1406da130a4d62c75c39d9868f5406eb3bf35f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#sqlite3_pcache_methods2&quot;&gt;sqlite3_pcache_methods2&lt;/a&gt; for additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6719884b2a74c479ea6999c99dbf311d703b384" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://sqlite.org/'about.html'&quot;&gt;About SQLite&lt;/a&gt; for an overview of the SQLite software and what it does and how it is different.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a83862c5e73732d34809bc526149b8874a0b009" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;limits&quot;&gt;limits.html&lt;/a&gt; for a full discussion of the limits of SQLite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5702be68fafd67a2aafc342a3e205c709913ea24" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;pcache_methods2&quot;&gt;sqlite3_pcache_methods2&lt;/a&gt; for additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c5fd71325238ec1a4341afb9b6cba9315dbef4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;sharedcache&quot;&gt;SQLite Shared-Cache Mode&lt;/a&gt; for additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a08f389a25b863d0fca5015a2885ff6fd5c8cd" translate="yes" xml:space="preserve">
          <source>See Also:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93901f63e20a4a7a74fbfdbc37b4075a185c71c6" translate="yes" xml:space="preserve">
          <source>See Also: &lt;a href=&quot;../backup&quot;&gt;Using the SQLite Online Backup API&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3af600b61585b909b60b4a99e040268e0c2a856f" translate="yes" xml:space="preserve">
          <source>See Also: &lt;a href=&quot;../sharedcache&quot;&gt;SQLite Shared-Cache Mode&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c1b1d19f5868cf4d3018fb518dcfa6d87cc98cd" translate="yes" xml:space="preserve">
          <source>See Also: &lt;a href=&quot;../unlock_notify&quot;&gt;Using the SQLite Unlock Notification Feature&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7616c5088158f54a825d33709957167b8a16116d" translate="yes" xml:space="preserve">
          <source>See Also: &lt;a href=&quot;backup&quot;&gt;Using the SQLite Online Backup API&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f41977d4fff20685334fca06b182777534d39401" translate="yes" xml:space="preserve">
          <source>See Also: &lt;a href=&quot;sharedcache&quot;&gt;SQLite Shared-Cache Mode&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f9e82ef52e9fb93669665e75ad01f2483ef4742" translate="yes" xml:space="preserve">
          <source>See Also: &lt;a href=&quot;unlock_notify&quot;&gt;Using the SQLite Unlock Notification Feature&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="432cb254f15763b7805bdd86025f5f8cf43aec8f" translate="yes" xml:space="preserve">
          <source>See above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="383b0d124cc39b4f92b719a490622adb9db1929b" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;pragma#pragma_checkpoint_fullfsync&quot;&gt;checkpoint_fullfsync&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="588a701bb21ea6498fe1cee5a08846f3a6f8999b" translate="yes" xml:space="preserve">
          <source>See also lists of &lt;a href=&quot;objlist&quot;&gt;Objects&lt;/a&gt;, &lt;a href=&quot;constlist&quot;&gt;Constants&lt;/a&gt;, and &lt;a href=&quot;funclist&quot;&gt;Functions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c2ab778a085857c109eb7e8e5a5333d9b57f676" translate="yes" xml:space="preserve">
          <source>See also requirements H35180 and H35210 above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a69045200fe6eb4eefb6543d32d1c3986dee3e7a" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;#sqlite3_commit_hook&quot;&gt;sqlite3_commit_hook()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_commit_hook&quot;&gt;sqlite3_rollback_hook()&lt;/a&gt;, and &lt;a href=&quot;#sqlite3_preupdate_count&quot;&gt;sqlite3_preupdate_hook()&lt;/a&gt; interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee912df6c5ce3441a9860f1d9730f7218ccc4b5" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;#sqlite3_update_hook&quot;&gt;sqlite3_update_hook()&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d056bc4928cd96df481ba3bb3da36ee6f31042" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;../lang_corefunc#load_extension&quot;&gt;load_extension() SQL function&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db4a83343835929e5d813cffa0b4f2b9793757ab" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;cintro&quot;&gt;Introduction To The SQLite C/C++ Interface&lt;/a&gt; for an introductory overview and roadmap to the dozens of SQLite interface functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="339862dc13bc1d57d7288f6688c75379763064fe" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;commit_hook&quot;&gt;sqlite3_commit_hook()&lt;/a&gt;, &lt;a href=&quot;commit_hook&quot;&gt;sqlite3_rollback_hook()&lt;/a&gt;, and &lt;a href=&quot;preupdate_count&quot;&gt;sqlite3_preupdate_hook()&lt;/a&gt; interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a86c99c5bddb628e2b84fed31d31db9e2daeedae" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;lang_corefunc#load_extension&quot;&gt;load_extension() SQL function&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9551bbf4b06565a29addd67ff920566d10532258" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;pragma#pragma_application_id&quot;&gt;application_id pragma&lt;/a&gt; and &lt;a href=&quot;pragma#pragma_schema_version&quot;&gt;schema_version pragma&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b61abea4b86316c9bf1e59bfa90fae500f63cc2b" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;pragma#pragma_application_id&quot;&gt;application_id pragma&lt;/a&gt; and &lt;a href=&quot;pragma#pragma_user_version&quot;&gt;user_version pragma&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e8ceb2d0a12e5d383c6c33d1d4332e5b5c058b2" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;pragma#pragma_fullfsync&quot;&gt;fullfsync&lt;/a&gt; and &lt;a href=&quot;pragma#pragma_checkpoint_fullfsync&quot;&gt;checkpoint_fullfsync&lt;/a&gt; pragmas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="303adc506bf547b9de95bc776aebd335c64bd8fc" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;pragma#pragma_quick_check&quot;&gt;PRAGMA quick_check&lt;/a&gt; command which does most of the checking of PRAGMA integrity_check but runs much faster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a25a2daadf8d2856a4719203849a4c0af3fabe6d" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;pragma#pragma_user_version&quot;&gt;user_version pragma&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c007784e950bb7f56540883b26bce1ca576b693" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;quirks&quot;&gt;Quirks, Caveats, and Gotchas&lt;/a&gt; of SQLite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94811ce2c3eb27494bcc158d862a7722c04a876e" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;update_hook&quot;&gt;sqlite3_update_hook()&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22db3f40cf05b62413d309725844e929dbbe0d0d" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#SQLITE_ABORT_ROLLBACK&quot;&gt;extended result code definitions&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5824dbe2a36217f98b17445aa829e98c24d78c0" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#SQLITE_FCNTL_BEGIN_ATOMIC_WRITE&quot;&gt;file control opcodes&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a888d72c2aa71ea4f9e6a712bc7addf37488e84a" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#sqlite3_bind_blob&quot;&gt;sqlite3_bind()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_bind_parameter_count&quot;&gt;sqlite3_bind_parameter_count()&lt;/a&gt;, and &lt;a href=&quot;#sqlite3_bind_parameter_index&quot;&gt;sqlite3_bind_parameter_index()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e55f94f79f49c504145ad61691b8c42ba593cff9" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#sqlite3_bind_blob&quot;&gt;sqlite3_bind()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_bind_parameter_count&quot;&gt;sqlite3_bind_parameter_count()&lt;/a&gt;, and &lt;a href=&quot;#sqlite3_bind_parameter_name&quot;&gt;sqlite3_bind_parameter_name()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6713e8fdaa1ea389a2f09e3a9c9374683ab6d6b0" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#sqlite3_bind_blob&quot;&gt;sqlite3_bind()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_bind_parameter_name&quot;&gt;sqlite3_bind_parameter_name()&lt;/a&gt;, and &lt;a href=&quot;#sqlite3_bind_parameter_index&quot;&gt;sqlite3_bind_parameter_index()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11dc488cf1e9db5102b28629a96e4392dc29104c" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#sqlite3_bind_parameter_count&quot;&gt;sqlite3_bind_parameter_count()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_bind_parameter_name&quot;&gt;sqlite3_bind_parameter_name()&lt;/a&gt;, and &lt;a href=&quot;#sqlite3_bind_parameter_index&quot;&gt;sqlite3_bind_parameter_index()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c6912b2b4045c6f070e0edaa93c0875be5fd821" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#sqlite3_blob_close&quot;&gt;sqlite3_blob_close()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_blob_reopen&quot;&gt;sqlite3_blob_reopen()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_blob_read&quot;&gt;sqlite3_blob_read()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_blob_bytes&quot;&gt;sqlite3_blob_bytes()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_blob_write&quot;&gt;sqlite3_blob_write()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a3f665ed626f2acf9c339d54e23c6812da36531" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#sqlite3_blob_read&quot;&gt;sqlite3_blob_read()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c57adf1e621a68c73c17c8b0ecd787edffeb3799" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#sqlite3_blob_write&quot;&gt;sqlite3_blob_write()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e289aacb066a0de1940f21ad59b6642609ced4a" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#sqlite3_collation_needed&quot;&gt;sqlite3_collation_needed()&lt;/a&gt; and &lt;a href=&quot;#sqlite3_collation_needed&quot;&gt;sqlite3_collation_needed16()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="513ba9fc0134937d2763a01c62173350a81c3bde" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#sqlite3_column_count&quot;&gt;sqlite3_column_count()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf131b5c38b078229e14995e1d46c942918a4628" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#sqlite3_create_module&quot;&gt;sqlite3_create_module()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389c907363aca1a027a67a5b885a2319a4ec35ed" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#sqlite3_data_count&quot;&gt;sqlite3_data_count()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0afc966be42fd6b30d673383499cb0059d1ed149" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#sqlite3_db_release_memory&quot;&gt;sqlite3_db_release_memory()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c3b36cbd377bb3ed1664b49ec3d43a5bc80371" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#sqlite3_db_status&quot;&gt;sqlite3_db_status()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a7701e6ed3e748294878d5accec5c9e67c8652" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#sqlite3_drop_modules&quot;&gt;sqlite3_drop_modules()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c38544cc50a3f638d9d29eb83eea228ba0b685b" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#sqlite3_libversion&quot;&gt;sqlite3_libversion()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_libversion&quot;&gt;sqlite3_libversion_number()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_libversion&quot;&gt;sqlite3_sourceid()&lt;/a&gt;, &lt;a href=&quot;lang_corefunc#sqlite_version&quot;&gt;sqlite_version()&lt;/a&gt; and &lt;a href=&quot;lang_corefunc#sqlite_source_id&quot;&gt;sqlite_source_id()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58d0868f2357d36a8bd2095b2af1bb408179b89d" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#sqlite3_mutex_held&quot;&gt;sqlite3_mutex_held()&lt;/a&gt; and &lt;a href=&quot;#sqlite3_mutex_held&quot;&gt;sqlite3_mutex_notheld()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a95fa8aab0e3bfa1d373ea225784189d0d07162" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#sqlite3_release_memory&quot;&gt;sqlite3_release_memory()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894a2c673c7c3998c0146ab1462bd48997eeefeb" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#sqlite3_reset_auto_extension&quot;&gt;sqlite3_reset_auto_extension()&lt;/a&gt; and &lt;a href=&quot;#sqlite3_cancel_auto_extension&quot;&gt;sqlite3_cancel_auto_extension()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c349eaf02fbc75040833b27273fe78ce351a8517" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#sqlite3_status&quot;&gt;sqlite3_status()&lt;/a&gt; and &lt;a href=&quot;#sqlite3_db_status&quot;&gt;sqlite3_db_status()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4abfc13135b30c5ca35737473e62ae50fbba518" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#sqlite3_status&quot;&gt;sqlite3_status()&lt;/a&gt; and &lt;a href=&quot;#sqlite3_stmt_status&quot;&gt;sqlite3_stmt_status()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b0b0a73811f9aef63fb1988c2a0ccf696926fc" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#sqlite3_stmt_scanstatus_reset&quot;&gt;sqlite3_stmt_scanstatus_reset()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b2c6cde7a64226fbe2ef3634045cd57dde9aaa" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#sqlite3_strglob&quot;&gt;sqlite3_strglob()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e4f725a3076fc6b2bb57f870226dcb7c2cd741" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#sqlite3_strlike&quot;&gt;sqlite3_strlike()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="435b8c7f1343e259185da08da01ab1604658c57c" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#sqlite3_temp_directory&quot;&gt;sqlite3_temp_directory&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de67037e66e6bc2405fafd89b02748ccb563c8f4" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#sqlite3_update_hook&quot;&gt;sqlite3_update_hook()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81cf66782a01b719b906500422d08c6d8d672682" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang&quot;&gt;lang.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c778a0f903e6e7a229a74dcc043ab7ce222f8e91" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang&quot;&gt;lang.html&lt;/a&gt;&lt;a href=&quot;../lang_explain&quot;&gt;lang_explain.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a6be53babfb0698dca91e0931b8046114c3258d" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_aggfunc&quot;&gt;lang_aggfunc.html&lt;/a&gt;&lt;a href=&quot;../lang_expr&quot;&gt;lang_expr.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52bb34faf16293e7bf50504a84a6781db371ee0f" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_altertable&quot;&gt;lang_altertable.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a14f661ac8c092f4fc1d99fc6d9d99e0d8ec786" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_altertable&quot;&gt;lang_altertable.html&lt;/a&gt;&lt;a href=&quot;../lang_conflict&quot;&gt;lang_conflict.html&lt;/a&gt;&lt;a href=&quot;../lang_createtable&quot;&gt;lang_createtable.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07322809e26e45be23a95893f749e03af5c5ed5" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_altertable&quot;&gt;lang_altertable.html&lt;/a&gt;&lt;a href=&quot;../lang_createtable&quot;&gt;lang_createtable.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="938b9621b107714962482883b255c3d80c08b6e7" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_analyze&quot;&gt;lang_analyze.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15598ecd618474aabf3591017c513af8de8a6a3b" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_attach&quot;&gt;lang_attach.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0485f89bf00139a21000442b6a6990659cb64b16" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_comment&quot;&gt;lang_comment.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66948fd5b0afaf1cdc01aa29ecea4c1bfedab9de" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_corefunc#sqlite_version&quot;&gt;sqlite_version()&lt;/a&gt; and &lt;a href=&quot;../lang_corefunc#sqlite_source_id&quot;&gt;sqlite_source_id()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79cd4e2359b15e6acab9aede873d664f2ede5a75" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_createindex&quot;&gt;lang_createindex.html&lt;/a&gt;&lt;a href=&quot;../partialindex&quot;&gt;partialindex.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2dfcbfb2abe59925659cc429708c6aec7eb406e" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_createtable&quot;&gt;lang_createtable.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="658fb74ef352e297b395f96f857ceb7d3c615e2b" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13d94bc3fd2a819178c3e4749e7aa371e596de86" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;&lt;a href=&quot;../lang_delete&quot;&gt;lang_delete.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f527f9debd0e925c5e233506e62bf945cd29ee28" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;&lt;a href=&quot;../lang_delete&quot;&gt;lang_delete.html&lt;/a&gt;&lt;a href=&quot;../lang_indexedby&quot;&gt;lang_indexedby.html&lt;/a&gt;&lt;a href=&quot;../lang_update&quot;&gt;lang_update.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21b664cff26300df1357262d6ec594fb9ee3555c" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;&lt;a href=&quot;../lang_delete&quot;&gt;lang_delete.html&lt;/a&gt;&lt;a href=&quot;../lang_insert&quot;&gt;lang_insert.html&lt;/a&gt;&lt;a href=&quot;../lang_update&quot;&gt;lang_update.html&lt;/a&gt;&lt;a href=&quot;../lang_with&quot;&gt;lang_with.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91b6c24c68f47aa751a5b5b8df600dcca07d313d" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;&lt;a href=&quot;../lang_insert&quot;&gt;lang_insert.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="466d46beb84c6c8963a2f748f70f326309fffab5" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;&lt;a href=&quot;../lang_update&quot;&gt;lang_update.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4aef55367a00e308dff9639c75772858c63ff83" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_createview&quot;&gt;lang_createview.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56e9b6723fb1585f18d7b60fce22ac17b792e417" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_createvtab&quot;&gt;lang_createvtab.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d13d914d08b8f92116b29032480e38cbe265479" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_delete&quot;&gt;lang_delete.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd1d8b761b061d5aeaf839bfb496966e3e11c8e" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_detach&quot;&gt;lang_detach.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="716c85dad4326320b2465878481f19b320bc4abf" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_dropindex&quot;&gt;lang_dropindex.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c9246cf2807990b095780ac9e1b0dd561919984" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_droptable&quot;&gt;lang_droptable.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f43b3a3c761c07b37c7c96d59a19f91da1c40c6" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_droptrigger&quot;&gt;lang_droptrigger.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59cd8724dea12b8ea965ab667c74e2d1d4fb024b" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_dropview&quot;&gt;lang_dropview.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f03712d7de35eafa06ad69d4f67d162931ceee8e" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_expr&quot;&gt;lang_expr.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="344cad8b96fcafcf74d42ebb4e8917a07994e94e" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_reindex&quot;&gt;lang_reindex.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cafbbb26b01fe4aad5518dd3d8329918a47b638c" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_savepoint&quot;&gt;lang_savepoint.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="194bd03307aa26e18f55046fce3dc35e20b6f469" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_savepoint&quot;&gt;lang_savepoint.html&lt;/a&gt;&lt;a href=&quot;../lang_transaction&quot;&gt;lang_transaction.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bbc01924ed08271e9d7d2fafae0daf0758d4c29" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_select&quot;&gt;lang_select.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90a9a8514c72ec12bafb541c92e76fe75343369a" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_transaction&quot;&gt;lang_transaction.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e20ee80f88a596c72e3b5175803d94c62b49d45" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_update&quot;&gt;lang_update.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="487a9f7edcc9acbd36e71269b10f3dabc3570792" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_upsert&quot;&gt;lang_UPSERT.html&lt;/a&gt;&lt;a href=&quot;../lang_aggfunc&quot;&gt;lang_aggfunc.html&lt;/a&gt;&lt;a href=&quot;../lang_altertable&quot;&gt;lang_altertable.html&lt;/a&gt;&lt;a href=&quot;../lang_attach&quot;&gt;lang_attach.html&lt;/a&gt;&lt;a href=&quot;../lang_createindex&quot;&gt;lang_createindex.html&lt;/a&gt;&lt;a href=&quot;../lang_createtable&quot;&gt;lang_createtable.html&lt;/a&gt;&lt;a href=&quot;../lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;&lt;a href=&quot;../lang_createview&quot;&gt;lang_createview.html&lt;/a&gt;&lt;a href=&quot;../lang_delete&quot;&gt;lang_delete.html&lt;/a&gt;&lt;a href=&quot;../lang_expr&quot;&gt;lang_expr.html&lt;/a&gt;&lt;a href=&quot;../lang_insert&quot;&gt;lang_insert.html&lt;/a&gt;&lt;a href=&quot;../lang_select&quot;&gt;lang_select.html&lt;/a&gt;&lt;a href=&quot;../lang_update&quot;&gt;lang_update.html&lt;/a&gt;&lt;a href=&quot;../lang_with&quot;&gt;lang_with.html&lt;/a&gt;&lt;a href=&quot;../partialindex&quot;&gt;partialindex.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb4119b7d69b4e6da177cbf6ff9c4d155ae67444" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_upsert&quot;&gt;lang_UPSERT.html&lt;/a&gt;&lt;a href=&quot;../lang_aggfunc&quot;&gt;lang_aggfunc.html&lt;/a&gt;&lt;a href=&quot;../lang_altertable&quot;&gt;lang_altertable.html&lt;/a&gt;&lt;a href=&quot;../lang_attach&quot;&gt;lang_attach.html&lt;/a&gt;&lt;a href=&quot;../lang_createindex&quot;&gt;lang_createindex.html&lt;/a&gt;&lt;a href=&quot;../lang_createtable&quot;&gt;lang_createtable.html&lt;/a&gt;&lt;a href=&quot;../lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;&lt;a href=&quot;../lang_createview&quot;&gt;lang_createview.html&lt;/a&gt;&lt;a href=&quot;../lang_delete&quot;&gt;lang_delete.html&lt;/a&gt;&lt;a href=&quot;../lang_expr&quot;&gt;lang_expr.html&lt;/a&gt;&lt;a href=&quot;../lang_insert&quot;&gt;lang_insert.html&lt;/a&gt;&lt;a href=&quot;../lang_select&quot;&gt;lang_select.html&lt;/a&gt;&lt;a href=&quot;../lang_update&quot;&gt;lang_update.html&lt;/a&gt;&lt;a href=&quot;../lang_with&quot;&gt;lang_with.html&lt;/a&gt;&lt;a href=&quot;../partialindex&quot;&gt;partialindex.html&lt;/a&gt;&lt;a href=&quot;../pragma&quot;&gt;pragma.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="695ecd24fe66b529919da4afdf535e5125baa96e" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_upsert&quot;&gt;lang_UPSERT.html&lt;/a&gt;&lt;a href=&quot;../lang_createindex&quot;&gt;lang_createindex.html&lt;/a&gt;&lt;a href=&quot;../lang_createtable&quot;&gt;lang_createtable.html&lt;/a&gt;&lt;a href=&quot;../lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;&lt;a href=&quot;../lang_insert&quot;&gt;lang_insert.html&lt;/a&gt;&lt;a href=&quot;../partialindex&quot;&gt;partialindex.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0014eee39d17cd320cfc0ffbaab392f9f613f85" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_upsert&quot;&gt;lang_UPSERT.html&lt;/a&gt;&lt;a href=&quot;../lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;&lt;a href=&quot;../lang_insert&quot;&gt;lang_insert.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29fadfcd5bcddd556613ead0e99dda8fc7fba83b" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_upsert&quot;&gt;lang_UPSERT.html&lt;/a&gt;&lt;a href=&quot;../lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;&lt;a href=&quot;../lang_insert&quot;&gt;lang_insert.html&lt;/a&gt;&lt;a href=&quot;../lang_update&quot;&gt;lang_update.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b532e0d0d9df2c59df298af30c18a7e1da5dfe" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_vacuum&quot;&gt;lang_vacuum.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c013a0edc28859aa3e70e3276bdce16a070ed083" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../lang_with&quot;&gt;lang_with.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a7eea93b457a57fc7fe1137ef59827626192c5a" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../pragma&quot;&gt;pragma.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4c2bc470b47131356a55eedacd462eb96e84418" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../pragma#pragma_busy_timeout&quot;&gt;PRAGMA busy_timeout&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fe4145cb7c50a0d418d258d06542a1f8cb0dd39" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../printf&quot;&gt;built-in printf()&lt;/a&gt;, &lt;a href=&quot;../lang_corefunc#printf&quot;&gt;printf() SQL function&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53567bfae3ebbf8bd0c18510f50128b0fee6e144" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;bind_blob&quot;&gt;sqlite3_bind()&lt;/a&gt;, &lt;a href=&quot;bind_parameter_count&quot;&gt;sqlite3_bind_parameter_count()&lt;/a&gt;, and &lt;a href=&quot;bind_parameter_index&quot;&gt;sqlite3_bind_parameter_index()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="907bef21249483a496207cb807a74d758d2d3c63" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;bind_blob&quot;&gt;sqlite3_bind()&lt;/a&gt;, &lt;a href=&quot;bind_parameter_count&quot;&gt;sqlite3_bind_parameter_count()&lt;/a&gt;, and &lt;a href=&quot;bind_parameter_name&quot;&gt;sqlite3_bind_parameter_name()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c1aadec23594d958a843556680b17a72abac74b" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;bind_blob&quot;&gt;sqlite3_bind()&lt;/a&gt;, &lt;a href=&quot;bind_parameter_name&quot;&gt;sqlite3_bind_parameter_name()&lt;/a&gt;, and &lt;a href=&quot;bind_parameter_index&quot;&gt;sqlite3_bind_parameter_index()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f45be66a2c5bcb3bc142d2c447ea57f0f20e31c" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;bind_parameter_count&quot;&gt;sqlite3_bind_parameter_count()&lt;/a&gt;, &lt;a href=&quot;bind_parameter_name&quot;&gt;sqlite3_bind_parameter_name()&lt;/a&gt;, and &lt;a href=&quot;bind_parameter_index&quot;&gt;sqlite3_bind_parameter_index()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c010f71fba70b74109bbdc2b1ce08d14015c48" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;blob_close&quot;&gt;sqlite3_blob_close()&lt;/a&gt;, &lt;a href=&quot;blob_reopen&quot;&gt;sqlite3_blob_reopen()&lt;/a&gt;, &lt;a href=&quot;blob_read&quot;&gt;sqlite3_blob_read()&lt;/a&gt;, &lt;a href=&quot;blob_bytes&quot;&gt;sqlite3_blob_bytes()&lt;/a&gt;, &lt;a href=&quot;blob_write&quot;&gt;sqlite3_blob_write()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3dbeda6bcc23b238fd884c3cfaafcc8fb5f1870" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;blob_read&quot;&gt;sqlite3_blob_read()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34c05c2c7478ddfc9595328b9ea47d96e84f4152" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;blob_write&quot;&gt;sqlite3_blob_write()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b21a0b7337431e9ee24e69d231fe8302762a853" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;c_abort_rollback&quot;&gt;extended result code definitions&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfe354170b5e869c7270b91ade687416a54c0183" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;c_fcntl_begin_atomic_write&quot;&gt;file control opcodes&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37196415e76fa9d675c871c64b90e815741d0f92" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;collation_needed&quot;&gt;sqlite3_collation_needed()&lt;/a&gt; and &lt;a href=&quot;collation_needed&quot;&gt;sqlite3_collation_needed16()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="879f7e7ea46313e2ea71652b9ca7565db57df9c6" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;column_count&quot;&gt;sqlite3_column_count()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="319399ff5f7d4c689210338dddef1fb99518d24d" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;compile#omit_automatic_index&quot;&gt;SQLITE_OMIT_AUTOMATIC_INDEX&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b23baf151295ad1d1fe5328bd71961f497879ab" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;create_module&quot;&gt;sqlite3_create_module()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8661ec8b737499d91726c5f2f8d9c2e2296d1bc" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;data_count&quot;&gt;sqlite3_data_count()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e1099949ad00bb15eb69a605f4b4b3bbfd1aff7" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;db_release_memory&quot;&gt;sqlite3_db_release_memory()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda4dfc70b5f71949880b44f021fef0f7b01aa87" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;db_status&quot;&gt;sqlite3_db_status()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb201238a04d02eb3cb27c3d4ccc509df3614a14" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;drop_modules&quot;&gt;sqlite3_drop_modules()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="524073d1a4577e6b594022dd278f36bd2dba0d4a" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang&quot;&gt;lang.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bc17dac7d9752b7811c2a93ab58e831060d9b9d" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang&quot;&gt;lang.html&lt;/a&gt;&lt;a href=&quot;lang_explain&quot;&gt;lang_explain.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="199a3a4fc6414fdf6ed7493a3c4733ad2cdbdb41" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_aggfunc&quot;&gt;lang_aggfunc.html&lt;/a&gt;&lt;a href=&quot;lang_expr#booleanexpr&quot;&gt;lang_expr.html#booleanexpr&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caee65c71137c00f3261816c349b1186b87ab07f" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_altertable&quot;&gt;lang_altertable.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d5357ce486345b38e495fdd052bc12b972eb613" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_altertable&quot;&gt;lang_altertable.html&lt;/a&gt;&lt;a href=&quot;lang_altertable#altertabaddcol&quot;&gt;lang_altertable.html#altertabaddcol&lt;/a&gt;&lt;a href=&quot;lang_createtable&quot;&gt;lang_createtable.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df7e64b5e3be337fc1f98f552de8d797b4c2b99a" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_altertable&quot;&gt;lang_altertable.html&lt;/a&gt;&lt;a href=&quot;lang_altertable#altertabaddcol&quot;&gt;lang_altertable.html#altertabaddcol&lt;/a&gt;&lt;a href=&quot;lang_createtable&quot;&gt;lang_createtable.html&lt;/a&gt;&lt;a href=&quot;lang_createtable#tablecoldef&quot;&gt;lang_createtable.html#tablecoldef&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a5b6f8bb5171cdb36ccd5c1ba734c2c233150b" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_altertable&quot;&gt;lang_altertable.html&lt;/a&gt;&lt;a href=&quot;lang_conflict&quot;&gt;lang_conflict.html&lt;/a&gt;&lt;a href=&quot;lang_createtable&quot;&gt;lang_createtable.html&lt;/a&gt;&lt;a href=&quot;lang_createtable#notnullconst&quot;&gt;lang_createtable.html#notnullconst&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6fcd1bfb338ad16eab298ffc4c9d868843b9b21" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_altertable&quot;&gt;lang_altertable.html&lt;/a&gt;&lt;a href=&quot;lang_createtable&quot;&gt;lang_createtable.html&lt;/a&gt;&lt;a href=&quot;lang_createtable#tablecoldef&quot;&gt;lang_createtable.html#tablecoldef&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a36b3fb23e6333db428ab6ad00263be2d938abe" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_analyze&quot;&gt;lang_analyze.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6b9466ba508d0dbec4f6c657f9fbfd7e620fc37" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_attach&quot;&gt;lang_attach.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a54b9974971120efa52636fcabe0715b49415a8" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_comment&quot;&gt;lang_comment.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cb6c7d068dfff53d11c81dd36fe7afde23d11e5" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_corefunc#sqlite_version&quot;&gt;sqlite_version()&lt;/a&gt; and &lt;a href=&quot;lang_corefunc#sqlite_source_id&quot;&gt;sqlite_source_id()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c7d4103ad522f08124a6ecef11b7bef6bb05216" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_createindex&quot;&gt;lang_createindex.html&lt;/a&gt;&lt;a href=&quot;partialindex&quot;&gt;partialindex.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e9835eae374451ebfe2dabdb26ce73fec9a591b" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_createtable&quot;&gt;lang_createtable.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d81d89904dc49fa50fb5551880967e2b9a7226cb" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_createtable&quot;&gt;lang_createtable.html&lt;/a&gt;&lt;a href=&quot;lang_createtable#primkeyconst&quot;&gt;lang_createtable.html#primkeyconst&lt;/a&gt;&lt;a href=&quot;lang_createtable#tablecoldef&quot;&gt;lang_createtable.html#tablecoldef&lt;/a&gt;&lt;a href=&quot;lang_createtable#uniqueconst&quot;&gt;lang_createtable.html#uniqueconst&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aed25ab420fb0098c44d0bf5304a4aa707b088f" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c514627329ad2c33195dc084716f51f489e5370e" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;&lt;a href=&quot;lang_delete&quot;&gt;lang_delete.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e08547629c50834603a3c7451218441b495de5f" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;&lt;a href=&quot;lang_delete&quot;&gt;lang_delete.html&lt;/a&gt;&lt;a href=&quot;lang_indexedby&quot;&gt;lang_indexedby.html&lt;/a&gt;&lt;a href=&quot;lang_update&quot;&gt;lang_update.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cba534e77f5dd456a33da03494144a81d39264cc" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;&lt;a href=&quot;lang_delete&quot;&gt;lang_delete.html&lt;/a&gt;&lt;a href=&quot;lang_insert&quot;&gt;lang_insert.html&lt;/a&gt;&lt;a href=&quot;lang_update&quot;&gt;lang_update.html&lt;/a&gt;&lt;a href=&quot;lang_with&quot;&gt;lang_with.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa4d667a255f0c6828f6b1f4d098bfa8323d6e2" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;&lt;a href=&quot;lang_delete&quot;&gt;lang_delete.html&lt;/a&gt;&lt;a href=&quot;lang_insert&quot;&gt;lang_insert.html&lt;/a&gt;&lt;a href=&quot;lang_update&quot;&gt;lang_update.html&lt;/a&gt;&lt;a href=&quot;lang_with&quot;&gt;lang_with.html&lt;/a&gt;&lt;a href=&quot;lang_with#recursivecte&quot;&gt;lang_with.html#recursivecte&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9614960e8904f53093287bbe50e05a997ac3824b" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;&lt;a href=&quot;lang_insert&quot;&gt;lang_insert.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c39b25e28ca93d32b847b9c1af840e472af33477" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;&lt;a href=&quot;lang_update&quot;&gt;lang_update.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a07a8a7f1e0538e7658544150917395127562b6" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_createview&quot;&gt;lang_createview.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6d60ea259f137afddc03af15fbdb1094689ece4" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_createvtab&quot;&gt;lang_createvtab.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="724cccf74d74960b6796259fcacc12e153ae3f1a" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_delete&quot;&gt;lang_delete.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f80c5c57cfc045f570327a845f8127410c55f865" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_detach&quot;&gt;lang_detach.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76e8ddefbc493145192fc193cef9e039c65a902e" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_dropindex&quot;&gt;lang_dropindex.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863b8e5b897ce238b67c5c8556989e2766293313" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_droptable&quot;&gt;lang_droptable.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf4b794db9d56879de07eb5f16a8bc2477ca90d4" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_droptrigger&quot;&gt;lang_droptrigger.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="702f2b35823dcfd93d045f7d778af2c45120abe7" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_dropview&quot;&gt;lang_dropview.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62511da10fbf7f958f155307ba6d4d102f35f3be" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_expr#booleanexpr&quot;&gt;lang_expr.html#booleanexpr&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="450581ca6e9de72c74dcb192b37f5747276658f1" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_expr#litvalue&quot;&gt;lang_expr.html#litvalue&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae501b11617c0c13b2d3f762254b4ff760b36123" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_reindex&quot;&gt;lang_reindex.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d27e4055359a8aeac2ce66818352ec73c032ea4" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_savepoint&quot;&gt;lang_savepoint.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bb5ce5fe2a8f6a8de65bf4e7bd8b65d204d6093" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_savepoint&quot;&gt;lang_savepoint.html&lt;/a&gt;&lt;a href=&quot;lang_transaction&quot;&gt;lang_transaction.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="076fe51a7e12da80f3c9d8927a2ca4548526aa30" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_select&quot;&gt;lang_select.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f5995b5a48f0fca91e5e282ac6950660e6528d" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_select&quot;&gt;lang_select.html&lt;/a&gt;&lt;a href=&quot;lang_select#compound&quot;&gt;lang_select.html#compound&lt;/a&gt;&lt;a href=&quot;lang_select#simpleselect&quot;&gt;lang_select.html#simpleselect&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d233e7ebdff319d51e7bd5e01dba623d32fa9ca0" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_select#compound&quot;&gt;lang_select.html#compound&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbbded1021d4435d1532c9af272fa7bccfd9c1d0" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_select#simpleselect&quot;&gt;lang_select.html#simpleselect&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e964459d5f1a2e61a2e2cf50351a352d90c8e8f" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_transaction&quot;&gt;lang_transaction.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600ef78a6f3fb8794c7d469e740f494486a2ac18" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_update&quot;&gt;lang_update.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ea152fe6b3f2ae351dd12abd4e8bbd78773fa59" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_upsert&quot;&gt;lang_UPSERT.html&lt;/a&gt;&lt;a href=&quot;lang_aggfunc&quot;&gt;lang_aggfunc.html&lt;/a&gt;&lt;a href=&quot;lang_altertable&quot;&gt;lang_altertable.html&lt;/a&gt;&lt;a href=&quot;lang_attach&quot;&gt;lang_attach.html&lt;/a&gt;&lt;a href=&quot;lang_createindex&quot;&gt;lang_createindex.html&lt;/a&gt;&lt;a href=&quot;lang_createtable&quot;&gt;lang_createtable.html&lt;/a&gt;&lt;a href=&quot;lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;&lt;a href=&quot;lang_createtrigger#raise&quot;&gt;lang_createtrigger.html#raise&lt;/a&gt;&lt;a href=&quot;lang_createview&quot;&gt;lang_createview.html&lt;/a&gt;&lt;a href=&quot;lang_delete&quot;&gt;lang_delete.html&lt;/a&gt;&lt;a href=&quot;lang_expr&quot;&gt;lang_expr.html&lt;/a&gt;&lt;a href=&quot;lang_insert&quot;&gt;lang_insert.html&lt;/a&gt;&lt;a href=&quot;lang_select&quot;&gt;lang_select.html&lt;/a&gt;&lt;a href=&quot;lang_select#compound&quot;&gt;lang_select.html#compound&lt;/a&gt;&lt;a href=&quot;lang_select#simpleselect&quot;&gt;lang_select.html#simpleselect&lt;/a&gt;&lt;a href=&quot;lang_update&quot;&gt;lang_update.html&lt;/a&gt;&lt;a href=&quot;lang_with&quot;&gt;lang_with.html&lt;/a&gt;&lt;a href=&quot;partialindex&quot;&gt;partialindex.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b469ebdf9c6c7fd0d09e8c5ea21cd29a3c4e951" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_upsert&quot;&gt;lang_UPSERT.html&lt;/a&gt;&lt;a href=&quot;lang_aggfunc&quot;&gt;lang_aggfunc.html&lt;/a&gt;&lt;a href=&quot;lang_altertable&quot;&gt;lang_altertable.html&lt;/a&gt;&lt;a href=&quot;lang_attach&quot;&gt;lang_attach.html&lt;/a&gt;&lt;a href=&quot;lang_createindex&quot;&gt;lang_createindex.html&lt;/a&gt;&lt;a href=&quot;lang_createtable&quot;&gt;lang_createtable.html&lt;/a&gt;&lt;a href=&quot;lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;&lt;a href=&quot;lang_createview&quot;&gt;lang_createview.html&lt;/a&gt;&lt;a href=&quot;lang_delete&quot;&gt;lang_delete.html&lt;/a&gt;&lt;a href=&quot;lang_expr&quot;&gt;lang_expr.html&lt;/a&gt;&lt;a href=&quot;lang_insert&quot;&gt;lang_insert.html&lt;/a&gt;&lt;a href=&quot;lang_select&quot;&gt;lang_select.html&lt;/a&gt;&lt;a href=&quot;lang_select#compound&quot;&gt;lang_select.html#compound&lt;/a&gt;&lt;a href=&quot;lang_select#fromclause&quot;&gt;lang_select.html#fromclause&lt;/a&gt;&lt;a href=&quot;lang_select#simpleselect&quot;&gt;lang_select.html#simpleselect&lt;/a&gt;&lt;a href=&quot;lang_update&quot;&gt;lang_update.html&lt;/a&gt;&lt;a href=&quot;lang_with&quot;&gt;lang_with.html&lt;/a&gt;&lt;a href=&quot;partialindex&quot;&gt;partialindex.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb12fe633d07848eb5eb066e9d5b752ffef1d5c2" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_upsert&quot;&gt;lang_UPSERT.html&lt;/a&gt;&lt;a href=&quot;lang_aggfunc&quot;&gt;lang_aggfunc.html&lt;/a&gt;&lt;a href=&quot;lang_altertable&quot;&gt;lang_altertable.html&lt;/a&gt;&lt;a href=&quot;lang_attach&quot;&gt;lang_attach.html&lt;/a&gt;&lt;a href=&quot;lang_createindex&quot;&gt;lang_createindex.html&lt;/a&gt;&lt;a href=&quot;lang_createtable&quot;&gt;lang_createtable.html&lt;/a&gt;&lt;a href=&quot;lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;&lt;a href=&quot;lang_createview&quot;&gt;lang_createview.html&lt;/a&gt;&lt;a href=&quot;lang_delete&quot;&gt;lang_delete.html&lt;/a&gt;&lt;a href=&quot;lang_expr&quot;&gt;lang_expr.html&lt;/a&gt;&lt;a href=&quot;lang_insert&quot;&gt;lang_insert.html&lt;/a&gt;&lt;a href=&quot;lang_select&quot;&gt;lang_select.html&lt;/a&gt;&lt;a href=&quot;lang_select#compound&quot;&gt;lang_select.html#compound&lt;/a&gt;&lt;a href=&quot;lang_select#simpleselect&quot;&gt;lang_select.html#simpleselect&lt;/a&gt;&lt;a href=&quot;lang_update&quot;&gt;lang_update.html&lt;/a&gt;&lt;a href=&quot;lang_with&quot;&gt;lang_with.html&lt;/a&gt;&lt;a href=&quot;lang_with#recursivecte&quot;&gt;lang_with.html#recursivecte&lt;/a&gt;&lt;a href=&quot;partialindex&quot;&gt;partialindex.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bed845bd614c9a71113bf4e2612d286c51c5869c" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_upsert&quot;&gt;lang_UPSERT.html&lt;/a&gt;&lt;a href=&quot;lang_aggfunc&quot;&gt;lang_aggfunc.html&lt;/a&gt;&lt;a href=&quot;lang_altertable&quot;&gt;lang_altertable.html&lt;/a&gt;&lt;a href=&quot;lang_attach&quot;&gt;lang_attach.html&lt;/a&gt;&lt;a href=&quot;lang_createindex&quot;&gt;lang_createindex.html&lt;/a&gt;&lt;a href=&quot;lang_createtable&quot;&gt;lang_createtable.html&lt;/a&gt;&lt;a href=&quot;lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;&lt;a href=&quot;lang_createview&quot;&gt;lang_createview.html&lt;/a&gt;&lt;a href=&quot;lang_delete&quot;&gt;lang_delete.html&lt;/a&gt;&lt;a href=&quot;lang_expr&quot;&gt;lang_expr.html&lt;/a&gt;&lt;a href=&quot;lang_insert&quot;&gt;lang_insert.html&lt;/a&gt;&lt;a href=&quot;lang_select&quot;&gt;lang_select.html&lt;/a&gt;&lt;a href=&quot;lang_select#compound&quot;&gt;lang_select.html#compound&lt;/a&gt;&lt;a href=&quot;lang_select#simpleselect&quot;&gt;lang_select.html#simpleselect&lt;/a&gt;&lt;a href=&quot;lang_update&quot;&gt;lang_update.html&lt;/a&gt;&lt;a href=&quot;lang_with&quot;&gt;lang_with.html&lt;/a&gt;&lt;a href=&quot;partialindex&quot;&gt;partialindex.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e12f9a6f89dbcc84809953e2fd797afd11b684ab" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_upsert&quot;&gt;lang_UPSERT.html&lt;/a&gt;&lt;a href=&quot;lang_aggfunc&quot;&gt;lang_aggfunc.html&lt;/a&gt;&lt;a href=&quot;lang_altertable&quot;&gt;lang_altertable.html&lt;/a&gt;&lt;a href=&quot;lang_attach&quot;&gt;lang_attach.html&lt;/a&gt;&lt;a href=&quot;lang_createindex&quot;&gt;lang_createindex.html&lt;/a&gt;&lt;a href=&quot;lang_createtable&quot;&gt;lang_createtable.html&lt;/a&gt;&lt;a href=&quot;lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;&lt;a href=&quot;lang_createview&quot;&gt;lang_createview.html&lt;/a&gt;&lt;a href=&quot;lang_delete&quot;&gt;lang_delete.html&lt;/a&gt;&lt;a href=&quot;lang_expr&quot;&gt;lang_expr.html&lt;/a&gt;&lt;a href=&quot;lang_insert&quot;&gt;lang_insert.html&lt;/a&gt;&lt;a href=&quot;lang_select&quot;&gt;lang_select.html&lt;/a&gt;&lt;a href=&quot;lang_select#compound&quot;&gt;lang_select.html#compound&lt;/a&gt;&lt;a href=&quot;lang_select#simpleselect&quot;&gt;lang_select.html#simpleselect&lt;/a&gt;&lt;a href=&quot;lang_update&quot;&gt;lang_update.html&lt;/a&gt;&lt;a href=&quot;lang_with&quot;&gt;lang_with.html&lt;/a&gt;&lt;a href=&quot;partialindex&quot;&gt;partialindex.html&lt;/a&gt;&lt;a href=&quot;pragma#syntax&quot;&gt;pragma.html#syntax&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a66f16d59067e2dbd5b05e42ceffc5ed1382738" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_upsert&quot;&gt;lang_UPSERT.html&lt;/a&gt;&lt;a href=&quot;lang_createindex&quot;&gt;lang_createindex.html&lt;/a&gt;&lt;a href=&quot;lang_createtable&quot;&gt;lang_createtable.html&lt;/a&gt;&lt;a href=&quot;lang_createtable#primkeyconst&quot;&gt;lang_createtable.html#primkeyconst&lt;/a&gt;&lt;a href=&quot;lang_createtable#uniqueconst&quot;&gt;lang_createtable.html#uniqueconst&lt;/a&gt;&lt;a href=&quot;lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;&lt;a href=&quot;lang_insert&quot;&gt;lang_insert.html&lt;/a&gt;&lt;a href=&quot;partialindex&quot;&gt;partialindex.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10943101e04a10c530372cbdc34663b3698984dc" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_upsert&quot;&gt;lang_UPSERT.html&lt;/a&gt;&lt;a href=&quot;lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;&lt;a href=&quot;lang_insert&quot;&gt;lang_insert.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9086346182d6b8670bc03f1e0367b327298a39af" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_upsert&quot;&gt;lang_UPSERT.html&lt;/a&gt;&lt;a href=&quot;lang_createtrigger&quot;&gt;lang_createtrigger.html&lt;/a&gt;&lt;a href=&quot;lang_insert&quot;&gt;lang_insert.html&lt;/a&gt;&lt;a href=&quot;lang_update&quot;&gt;lang_update.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73bb61ec2320cac51957bb5504dbbbfced735f05" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_vacuum&quot;&gt;lang_vacuum.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eb5bc217d7c409f9004989bbcff9c4c5cf371c2" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;lang_with#recursivecte&quot;&gt;lang_with.html#recursivecte&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa9202aad9353cf3bd304d5cebf941f8826269aa" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;libversion&quot;&gt;sqlite3_libversion()&lt;/a&gt;, &lt;a href=&quot;libversion&quot;&gt;sqlite3_libversion_number()&lt;/a&gt;, &lt;a href=&quot;libversion&quot;&gt;sqlite3_sourceid()&lt;/a&gt;, &lt;a href=&quot;../lang_corefunc#sqlite_version&quot;&gt;sqlite_version()&lt;/a&gt; and &lt;a href=&quot;../lang_corefunc#sqlite_source_id&quot;&gt;sqlite_source_id()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59473a97c323cc840c551bb609b5c7d0085ba6eb" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;mutex_held&quot;&gt;sqlite3_mutex_held()&lt;/a&gt; and &lt;a href=&quot;mutex_held&quot;&gt;sqlite3_mutex_notheld()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4db38cc313bd0bbfdf49c1b12a83a1dee3351e3" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;opcode#Clear&quot;&gt;Clear&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5545504df0c88112cd5943b39942072e292d1b27" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;opcode#Destroy&quot;&gt;Destroy&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20c38d168152c392bc03b5b47997e5daa1c0d099" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;opcode#EndCoroutine&quot;&gt;EndCoroutine&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08083583312e5bf15079e8c8852f8fa2944302ac" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;opcode#Found&quot;&gt;Found&lt;/a&gt;, &lt;a href=&quot;opcode#NotExists&quot;&gt;NotExists&lt;/a&gt;, &lt;a href=&quot;opcode#NoConflict&quot;&gt;NoConflict&lt;/a&gt;, &lt;a href=&quot;opcode#IfNoHope&quot;&gt;IfNoHope&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="728b62ca2d8ad20f62ae93f93571e44c2d32c79b" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;opcode#Found&quot;&gt;Found&lt;/a&gt;, &lt;a href=&quot;opcode#NotFound&quot;&gt;NotFound&lt;/a&gt;, &lt;a href=&quot;opcode#NoConflict&quot;&gt;NoConflict&lt;/a&gt;, &lt;a href=&quot;opcode#SeekRowid&quot;&gt;SeekRowid&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd951d3cf17be16c77767dc1e177d397520dea6" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;opcode#Found&quot;&gt;Found&lt;/a&gt;, &lt;a href=&quot;opcode#NotFound&quot;&gt;NotFound&lt;/a&gt;, SeekGt, SeekGe, SeekLe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6d2c334da88e15e756581a4f59c5b04ba796944" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;opcode#Found&quot;&gt;Found&lt;/a&gt;, &lt;a href=&quot;opcode#NotFound&quot;&gt;NotFound&lt;/a&gt;, SeekGt, SeekGe, SeekLt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="463d18a76e981873861ffff7fe5e29e0c6efda87" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;opcode#Found&quot;&gt;Found&lt;/a&gt;, &lt;a href=&quot;opcode#NotFound&quot;&gt;NotFound&lt;/a&gt;, SeekLt, SeekGe, SeekLe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e40d5e71843bb61f4bcfed5badcd97abfd6de6d" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;opcode#Found&quot;&gt;Found&lt;/a&gt;, &lt;a href=&quot;opcode#NotFound&quot;&gt;NotFound&lt;/a&gt;, SeekLt, SeekGt, SeekLe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7f677a2db2a47580eeed83b42a807730b2d65e8" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;opcode#Function&quot;&gt;Function&lt;/a&gt;, &lt;a href=&quot;opcode#AggStep&quot;&gt;AggStep&lt;/a&gt;, &lt;a href=&quot;opcode#AggFinal&quot;&gt;AggFinal&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e78d904f537e5ecc229d2e4161074c489fc983" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;opcode#Function0&quot;&gt;Function0&lt;/a&gt;, &lt;a href=&quot;opcode#AggStep&quot;&gt;AggStep&lt;/a&gt;, &lt;a href=&quot;opcode#AggFinal&quot;&gt;AggFinal&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27fe557b8f91eb0f3354ec57fe69933ee8436f35" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;opcode#InitCoroutine&quot;&gt;InitCoroutine&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea6a531330c212ca3ca25d87fa43558d171705c" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;opcode#NotFound&quot;&gt;NotFound&lt;/a&gt;, &lt;a href=&quot;opcode#Found&quot;&gt;Found&lt;/a&gt;, &lt;a href=&quot;opcode#NotExists&quot;&gt;NotExists&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab8929f50dfeea96d663b01dc70be8c6ea741b4c" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;opcode#NotFound&quot;&gt;NotFound&lt;/a&gt;, &lt;a href=&quot;opcode#NoConflict&quot;&gt;NoConflict&lt;/a&gt;, &lt;a href=&quot;opcode#NotExists&quot;&gt;NotExists&lt;/a&gt;. SeekGe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df9b249fadb76a9e89f33c8e160d939f3e2edb65" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;opcode#NotFound&quot;&gt;NotFound&lt;/a&gt;, &lt;a href=&quot;opcode#SeekHit&quot;&gt;SeekHit&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77125e42082bd4063983bc366f2a58ec8989ce3d" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;opcode#OpenRead&quot;&gt;OpenRead&lt;/a&gt;, &lt;a href=&quot;opcode#OpenWrite&quot;&gt;OpenWrite&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42804456c026cdba0e420c9f8f25e7f6180f2cc2" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;opcode#OpenRead&quot;&gt;OpenRead&lt;/a&gt;, &lt;a href=&quot;opcode#ReopenIdx&quot;&gt;ReopenIdx&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="585491e299c7017859c50fd2fe8c2f25dc1e9732" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;opcode#OpenWrite&quot;&gt;OpenWrite&lt;/a&gt;, &lt;a href=&quot;opcode#ReopenIdx&quot;&gt;ReopenIdx&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4168a3bf16312be37846589fb27785a113af6811" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;opcode#Prev&quot;&gt;Prev&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c516f46aa712315eea6584868cd627c02de7056" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;opcode#Rowid&quot;&gt;Rowid&lt;/a&gt;, &lt;a href=&quot;opcode#MakeRecord&quot;&gt;MakeRecord&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f01472d4da0f8e936c195c67175f791d08d0adbf" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;pragma#pragma_busy_timeout&quot;&gt;PRAGMA busy_timeout&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d54723288e675ac0abb24e0dd779375fca23df6b" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;pragma#pragma_table_xinfo&quot;&gt;PRAGMA table_xinfo&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa2363ed594f2b2eede2b270349dfc67d7ebc18" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;pragma#syntax&quot;&gt;pragma.html#syntax&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4951221a904acb6ba86986765efc2037a09378" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;printf&quot;&gt;built-in printf()&lt;/a&gt;, &lt;a href=&quot;lang_corefunc#printf&quot;&gt;printf() SQL function&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99bd38c265a6fb23dc830f7fe8c080eded5d7a07" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;release_memory&quot;&gt;sqlite3_release_memory()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98b434bc0d8b8d185283486c42d9be672854146f" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;rescode#busy_recovery&quot;&gt;SQLITE_BUSY_RECOVERY&lt;/a&gt; and &lt;a href=&quot;rescode#busy_snapshot&quot;&gt;SQLITE_BUSY_SNAPSHOT&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7299f9082103db8b34938e68ec91bd133f202916" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;reset_auto_extension&quot;&gt;sqlite3_reset_auto_extension()&lt;/a&gt; and &lt;a href=&quot;cancel_auto_extension&quot;&gt;sqlite3_cancel_auto_extension()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa3c9ecf5456096c4af70cc1a45db8215c53ecad" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;status&quot;&gt;sqlite3_status()&lt;/a&gt; and &lt;a href=&quot;db_status&quot;&gt;sqlite3_db_status()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c9581d614ee93295a05913a13ce83a1c537800" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;status&quot;&gt;sqlite3_status()&lt;/a&gt; and &lt;a href=&quot;stmt_status&quot;&gt;sqlite3_stmt_status()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51bddd2f47aedb88c82ed00196f1d5f18d63b931" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;stmt_scanstatus_reset&quot;&gt;sqlite3_stmt_scanstatus_reset()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f9c8eaf62fde3d86c43f634a7ab02bd2fa6122" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;strglob&quot;&gt;sqlite3_strglob()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0933bf0a406419507f269f3297ab20733c0130b5" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;strlike&quot;&gt;sqlite3_strlike()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="673270029c9264ee605b8c3d4c2fd772ac5ed2ec" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;temp_directory&quot;&gt;sqlite3_temp_directory&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a6a573f1a49c137144c2c0c0b973878be6af5b" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;update_hook&quot;&gt;sqlite3_update_hook()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b9de33ebd0cee270413e31ceb4bf9982bf25845" translate="yes" xml:space="preserve">
          <source>See also: SQL functions &lt;a href=&quot;../lang_corefunc#sqlite_compileoption_used&quot;&gt;sqlite_compileoption_used()&lt;/a&gt; and &lt;a href=&quot;../lang_corefunc#sqlite_compileoption_get&quot;&gt;sqlite_compileoption_get()&lt;/a&gt; and the &lt;a href=&quot;../pragma#pragma_compile_options&quot;&gt;compile_options pragma&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83dccf87582bc1362c408c238feac4693c82e492" translate="yes" xml:space="preserve">
          <source>See also: SQL functions &lt;a href=&quot;lang_corefunc#sqlite_compileoption_used&quot;&gt;sqlite_compileoption_used()&lt;/a&gt; and &lt;a href=&quot;lang_corefunc#sqlite_compileoption_get&quot;&gt;sqlite_compileoption_get()&lt;/a&gt; and the &lt;a href=&quot;pragma#pragma_compile_options&quot;&gt;compile_options pragma&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61cca4e5d339d369ec47f24cb61df5080a8fe143" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../threadsafe&quot;&gt;threading mode&lt;/a&gt; documentation for additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f095aa19ffa800ceddf0ec91e83f4521ad7e3e5" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../uri&quot;&gt;URI filename&lt;/a&gt; documentation for additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14bd56e01493d3e179ad29ee876d123ae68f7d39" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;assert&quot;&gt;Use Of assert in SQLite&lt;/a&gt; document for additional information about how SQLite uses assert().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c31bb847b7fb9dd4bac9cc5dd5dc1c96846800" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;autoinc&quot;&gt;SQLite AUTOINCREMENT documentation&lt;/a&gt; for detailed instructions on what AUTOINCREMENT does and does not do in SQLite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b783989abda8014ea3d71299fadcaac3ac76a4" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;datatype3&quot;&gt;Datatypes in SQLite Version 3&lt;/a&gt; document for a detailed discussion of the type system in SQLite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b929f22f98901beb9b1139bf55e5ff321f37875f" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;howtocompile&quot;&gt;How To Compile SQLite&lt;/a&gt; document for instructions and hints on how to compile the program shown above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23d8904a4dd8b2f59b61ec1f1d5eb8f80e47737" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;threadsafe&quot;&gt;threading mode&lt;/a&gt; documentation for additional information on aspects of using SQLite in a multithreaded environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87fd9fe2045f5442c46fbc8912602fdbac0e8ba" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;threadsafe&quot;&gt;threading mode&lt;/a&gt; documentation for additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30f1bf85315b67413bef1d018f3d407e1c5b8c20" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;uri&quot;&gt;URI filename&lt;/a&gt; documentation for additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86902a781e00345ab7ead57f5c2f261448269986" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;vtablist&quot;&gt;list of virtual tables&lt;/a&gt; page for a longer list of actual virtual table implementations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd6efac597cb0708970fe4961b56a3edc46475fe" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;whentouse&quot;&gt;Appropriate Uses For SQLite&lt;/a&gt; document for additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07ba693c1bca5dde244a27275e6109ebcc9602e4" translate="yes" xml:space="preserve">
          <source>See the separate &lt;a href=&quot;lang_upsert&quot;&gt;UPSERT&lt;/a&gt; documentation for the additional trailing syntax that can cause an INSERT to behave as an UPDATE if the INSERT would otherwise violate a uniqueness constraint. The &lt;a href=&quot;lang_upsert&quot;&gt;upsert clause&lt;/a&gt; is not allowed on an &quot;INSERT ... DEFAULT VALUES&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="939683e9d52824a9f73508cf71bd83e60abff90a" translate="yes" xml:space="preserve">
          <source>See xPhraseFirst above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a932238dbfaf0b21024ff5809159c0de781840d" translate="yes" xml:space="preserve">
          <source>See xPhraseFirstColumn above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f853fa8d7ff147b89090825d00dc78b2f44a321" translate="yes" xml:space="preserve">
          <source>SeekEnd</source>
          <target state="translated">SeekEnd</target>
        </trans-unit>
        <trans-unit id="9fadfc9b512132149df920b10f206da2333bd9fa" translate="yes" xml:space="preserve">
          <source>SeekGE</source>
          <target state="translated">SeekGE</target>
        </trans-unit>
        <trans-unit id="1087f36e7b18281af36dad7cdbb8cd08b7115d15" translate="yes" xml:space="preserve">
          <source>SeekGT</source>
          <target state="translated">SeekGT</target>
        </trans-unit>
        <trans-unit id="460ea4a32fd1274da2db98168e01568ac9ce63a6" translate="yes" xml:space="preserve">
          <source>SeekHit</source>
          <target state="translated">SeekHit</target>
        </trans-unit>
        <trans-unit id="0b4f0d008f842f314db6efb3fa8c1e4f9ad7e37b" translate="yes" xml:space="preserve">
          <source>SeekLE</source>
          <target state="translated">SeekLE</target>
        </trans-unit>
        <trans-unit id="5c9e6758b219b2706a95d7da88c60ef0eba6fe03" translate="yes" xml:space="preserve">
          <source>SeekLT</source>
          <target state="translated">SeekLT</target>
        </trans-unit>
        <trans-unit id="141e7ed653901b0f647fda720472fc6667150f0c" translate="yes" xml:space="preserve">
          <source>SeekRowid</source>
          <target state="translated">SeekRowid</target>
        </trans-unit>
        <trans-unit id="c6ed6b18512dd3401d381c337b03a01488f90762" translate="yes" xml:space="preserve">
          <source>Segment B-Tree Interior Node Format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc806c94f6fb1d331e8fb663d9d4f7e22793356b" translate="yes" xml:space="preserve">
          <source>Segment B-Tree Leaf Node Format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe4aff672a9c860addca0cf569e240d57055e4c7" translate="yes" xml:space="preserve">
          <source>Segment b-trees are prefix-compressed b+-trees. There is one segment b-tree for each row in the %_segdir table (see above). The root node of the segment b-tree is stored as a blob in the &quot;root&quot; field of the corresponding row of the %_segdir table. All other nodes (if any exist) are stored in the &quot;blob&quot; column of the %_segments table. Nodes within the %_segments table are identified by the integer value in the blockid field of the corresponding row. The following table describes the fields of the %_segdir table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="982d848bdbaf7ffda27f7d8aca752c82359ccf6f" translate="yes" xml:space="preserve">
          <source>Segment btree</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40bf8b12088788ad70716eb1793e4cf249c09782" translate="yes" xml:space="preserve">
          <source>Separate INTEGER and REAL affinity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba899678ef1e0fdd6b5eb799ee7abdd42cf175bf" translate="yes" xml:space="preserve">
          <source>Separating a database from its journal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c8f4e0e1a2281faf562976c2410f76c3d8fbc95" translate="yes" xml:space="preserve">
          <source>Sequence</source>
          <target state="translated">Sequence</target>
        </trans-unit>
        <trans-unit id="841936f1610c7b00e43fa53fbf75fb9b11abf32f" translate="yes" xml:space="preserve">
          <source>SequenceTest</source>
          <target state="translated">SequenceTest</target>
        </trans-unit>
        <trans-unit id="e12fccff7a8e896ad7cfa282736ffc4187cd7eaa" translate="yes" xml:space="preserve">
          <source>Serial Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307ffd15fed4aa8193a8701f2970a48ccbc74bb4" translate="yes" xml:space="preserve">
          <source>Serial Type Codes Of The Record Format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b61faef97a33774dc6199c619a4461fc18672af3" translate="yes" xml:space="preserve">
          <source>Serial type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44bc81d8890afcfb324491bf1c0f95cb6563d3cc" translate="yes" xml:space="preserve">
          <source>Serialize a database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c4f08f792523112df74bc852026385bd4f8127" translate="yes" xml:space="preserve">
          <source>Session Object Handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67e2e54aa75dbe4ba2529dc4e44d334d5c33427e" translate="yes" xml:space="preserve">
          <source>Session objects created using this function should be deleted using the &lt;a href=&quot;#sqlite3session_delete&quot;&gt;sqlite3session_delete()&lt;/a&gt; function before the database handle that they are attached to is itself closed. If the database handle is closed before the session object is deleted, then the results of calling any session module function, including &lt;a href=&quot;#sqlite3session_delete&quot;&gt;sqlite3session_delete()&lt;/a&gt; on the session object are undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36d7089db75a5bb06f2dd690097a4896b0ce0449" translate="yes" xml:space="preserve">
          <source>Session objects created using this function should be deleted using the &lt;a href=&quot;sqlite3session_delete&quot;&gt;sqlite3session_delete()&lt;/a&gt; function before the database handle that they are attached to is itself closed. If the database handle is closed before the session object is deleted, then the results of calling any session module function, including &lt;a href=&quot;sqlite3session_delete&quot;&gt;sqlite3session_delete()&lt;/a&gt; on the session object are undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea1b131b3c13e62fbcb2b7e1d8113240624fdfe2" translate="yes" xml:space="preserve">
          <source>Session objects must be deleted before the database handle to which they are attached is closed. Refer to the documentation for &lt;a href=&quot;#sqlite3session_create&quot;&gt;sqlite3session_create()&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a0df1e5a24e2b0c00b060a82e0a73f3246a4f51" translate="yes" xml:space="preserve">
          <source>Session objects must be deleted before the database handle to which they are attached is closed. Refer to the documentation for &lt;a href=&quot;sqlite3session_create&quot;&gt;sqlite3session_create()&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6adb93a894674d02e091209977b242c152440ac9" translate="yes" xml:space="preserve">
          <source>Set *pnInst to the total number of occurrences of all phrases within the query within the current row. Return SQLITE_OK if successful, or an error code (i.e. SQLITE_NOMEM) if an error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efdec671fc0ce8bcb4bdb00d3f437085821cf12c" translate="yes" xml:space="preserve">
          <source>Set A Busy Timeout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a0dded912756ecf2b97f232c897007421fbf5d" translate="yes" xml:space="preserve">
          <source>Set Or Clear the Indirect Change Flag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a493136e0eeea58ea401cab071add271017a5ae" translate="yes" xml:space="preserve">
          <source>Set a table filter on a Session Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="732b690730c3e6587386dab945ec7951b556c520" translate="yes" xml:space="preserve">
          <source>Set a table filter on a Session Object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ac264a53518ed313b058a0a099912f2a35d826a" translate="yes" xml:space="preserve">
          <source>Set an upper bound on the &lt;a href=&quot;c3ref/limit&quot;&gt;sqlite3_limit&lt;/a&gt;(db,&lt;a href=&quot;c3ref/c_limit_attached#sqlitelimitworkerthreads&quot;&gt;SQLITE_LIMIT_WORKER_THREADS&lt;/a&gt;,N) setting that determines the maximum number of auxiliary threads that a single &lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statement&lt;/a&gt; will use to aid with CPU-intensive computations (mostly sorting). See also the &lt;a href=&quot;compile#default_worker_threads&quot;&gt;SQLITE_DEFAULT_WORKER_THREADS&lt;/a&gt; options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92f46b19209e84ffdca742022b56dfdca2dfb583" translate="yes" xml:space="preserve">
          <source>Set register P1 to have the value NULL as seen by the &lt;a href=&quot;opcode#MakeRecord&quot;&gt;MakeRecord&lt;/a&gt; instruction, but do not free any string or blob memory associated with the register, so that if the value was a string or blob that was previously copied using &lt;a href=&quot;opcode#SCopy&quot;&gt;SCopy&lt;/a&gt;, the copies will continue to be valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd7e5b09719a46bb1ffbc4c18faade6d76d5478d" translate="yes" xml:space="preserve">
          <source>Set the &lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigdefensive&quot;&gt;SQLITE_DBCONFIG_DEFENSIVE&lt;/a&gt; flag. This prevents ordinary SQL statements from deliberately corrupting the database file. SQLite should be proof against attacks that involve both malicious SQL inputs and a maliciously corrupted database file at the same time. Nevertheless, denying a script-only attacker access to corrupt database inputs provides an extra layer of defense.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="241b76cbed3f5655045e8aff832d7f03205ef4fe" translate="yes" xml:space="preserve">
          <source>Set the Last Insert Rowid value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a9eaa4fc5302f500031c0b5a5700811aa0eb0fe" translate="yes" xml:space="preserve">
          <source>Set the Last Insert Rowid value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a5c894fd85a90ba517e62438c5aff9b40ab8cb2" translate="yes" xml:space="preserve">
          <source>Set the SQLITE_DBCONFIG_RESET_DATABASE flag and then run &lt;a href=&quot;../lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; in order to reset a database back to an empty database with no schema and no content. The following process works even for a badly corrupted database file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5453fe3bee790f9b36f9a933f54e5899bdab502e" translate="yes" xml:space="preserve">
          <source>Set the SQLITE_DBCONFIG_RESET_DATABASE flag and then run &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; in order to reset a database back to an empty database with no schema and no content. The following process works even for a badly corrupted database file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61c4c40f9a1bb5c18ccdd11c74e4b4fffa0d66f4" translate="yes" xml:space="preserve">
          <source>Set the database auto-commit flag to P1 (1 or 0). If P2 is true, roll back any currently active btree transactions. If there are any active VMs (apart from this one), then a ROLLBACK fails. A COMMIT fails if there are active writing VMs or active VMs that use shared cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6cb86bbec6abe009ef2b13054a8bf71fb971e51" translate="yes" xml:space="preserve">
          <source>Set the default size limit (in bytes) for in-memory databases created using &lt;a href=&quot;c3ref/deserialize&quot;&gt;sqlite3_deserialize()&lt;/a&gt;. This is just the default. The limit can be changed at start-time using &lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config&lt;/a&gt;(&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigmemdbmaxsize&quot;&gt;SQLITE_CONFIG_MEMDB_MAXSIZE&lt;/a&gt;,N) or at run-time for individual databases using the &lt;a href=&quot;c3ref/c_fcntl_begin_atomic_write#sqlitefcntlsizelimit&quot;&gt;SQLITE_FCNTL_SIZE_LIMIT&lt;/a&gt;&lt;a href=&quot;c3ref/file_control&quot;&gt;file-control&lt;/a&gt;. If no default is specified, 1073741824 is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="866d8eaf3728a827f036375926469bd93bf88bea" translate="yes" xml:space="preserve">
          <source>Set the permutation used by the &lt;a href=&quot;opcode#Compare&quot;&gt;Compare&lt;/a&gt; operator in the next instruction. The permutation is stored in the P4 operand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffc497dd2e0254996f63fed1801e825a18a0d70e" translate="yes" xml:space="preserve">
          <source>Set the seekHit flag on cursor P1 to the value in P2. The seekHit flag is used by the &lt;a href=&quot;opcode#IfNoHope&quot;&gt;IfNoHope&lt;/a&gt; opcode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f917c903736a886e2bae7dda91eb93f9fc5b88f2" translate="yes" xml:space="preserve">
          <source>Set up a process-wide &lt;a href=&quot;errlog&quot;&gt;error log&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f899229bce65615b9a9aafe730afb3055fc1d664" translate="yes" xml:space="preserve">
          <source>Set up register P1 so that it will &lt;a href=&quot;opcode#Yield&quot;&gt;Yield&lt;/a&gt; to the coroutine located at address P3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c422fe10a5573aa6ba7e50d9c77e20ca08878af0" translate="yes" xml:space="preserve">
          <source>SetCookie</source>
          <target state="translated">SetCookie</target>
        </trans-unit>
        <trans-unit id="01b3682b02999bc0d6273ad2e8a1ce7b60079442" translate="yes" xml:space="preserve">
          <source>Sets the &quot;fired&quot; flag to true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f1906e535428a6ef107759522f33ae96d47ce23" translate="yes" xml:space="preserve">
          <source>Sets the default size of the &lt;a href=&quot;malloc#lookaside&quot;&gt;lookaside memory allocator&lt;/a&gt; memory pool to N entries of SZ bytes each. This setting can be modified at start-time using &lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config&lt;/a&gt;(&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfiglookaside&quot;&gt;SQLITE_CONFIG_LOOKASIDE&lt;/a&gt;) and/or as each &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; is opened using &lt;a href=&quot;c3ref/db_config&quot;&gt;sqlite3_db_config&lt;/a&gt;(db, &lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfiglookaside&quot;&gt;SQLITE_DBCONFIG_LOOKASIDE&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f949c67297579c935535017d3f831289e19ac6" translate="yes" xml:space="preserve">
          <source>Setting &lt;a href=&quot;pragma#pragma_synchronous&quot;&gt;PRAGMA synchronous=OFF&lt;/a&gt; can cause the database to go corrupt if there is an operating-system crash or power failure, though this setting is safe from damage due to application crashes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aefdd1b85748c7d4a0d551399e2edc72cd30afa6" translate="yes" xml:space="preserve">
          <source>Setting &lt;a href=&quot;pragma#pragma_writable_schema&quot;&gt;PRAGMA writable_schema=ON&lt;/a&gt; and then changing the database schema using DML statements can render the database completely unreadable, if not done carefully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa000f3c0976d971f291c1208857c79532870ca" translate="yes" xml:space="preserve">
          <source>Setting The Result Of An SQL Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d4603c6597b76da3d906d68cccdecf5180cbe08" translate="yes" xml:space="preserve">
          <source>Setting The Subtype Of An SQL Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16955fa7b436cf8874edb738f171a4d0ef509182" translate="yes" xml:space="preserve">
          <source>Setting fullfsync on a Mac will guarantee that data really does get pushed out to the disk platter on a flush. But the implementation of fullfsync involves resetting the disk controller. And so not only is it profoundly slow, it also slows down other unrelated disk I/O. So its use is not recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eaa36d1b6e824ce1fa2d9dd603bd95da85fa485" translate="yes" xml:space="preserve">
          <source>Setting the automerge parameter to a non-zero value enables automatic incremental merging. This causes SQLite to do a small amount of inverted index merging after every INSERT operation. The amount of merging performed is designed so that the FTS3/4 table never reaches a point where it has 16 segments at the same level and hence has to do a large merge in order to complete an insert. In other words, automatic incremental merging is designed to prevent spiky INSERT performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d964c814943dd4cc633ef0ee8d21d48eb3735ca0" translate="yes" xml:space="preserve">
          <source>Setting this compile-time option prevents SQLite from being fully testable. Branch test coverage drops from 100% down to about 95%.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f0e8d6420ed50a38c6973317964bc318233512" translate="yes" xml:space="preserve">
          <source>Several new C-level objects are used by the virtual table implementation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b7d1cf980e975f4a1d8be50f6af0bb46a6caa32" translate="yes" xml:space="preserve">
          <source>Several obscure, unrelated bugs were found and fixed while implemented the integer primary key change of the previous bullet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="659f95a669a94f909d4f9c9e95d9d907e1cbadfa" translate="yes" xml:space="preserve">
          <source>Shadow tables are read/write by default. Shadow tables only become read-only when the &lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigdefensive&quot;&gt;SQLITE_DBCONFIG_DEFENSIVE&lt;/a&gt; flag is set using &lt;a href=&quot;c3ref/db_config&quot;&gt;sqlite3_db_config()&lt;/a&gt;. Shadow tables need to be read/write by default in order to maintain backwards compatibility. For example, the SQL text generated by the &lt;a href=&quot;cli#dump&quot;&gt;.dump&lt;/a&gt; command of the &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt; writes directly into shadow tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19452421c69c545e0b50fcc00a18251f53c4e9f4" translate="yes" xml:space="preserve">
          <source>Shared cache is disabled by default. But this might change in future releases of SQLite. Applications that care about shared cache setting should set it explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f477f800bdd5ba8c256608dea929d26bc988f65b" translate="yes" xml:space="preserve">
          <source>Shared libraries or DLLs can be used as &lt;a href=&quot;loadext&quot;&gt;loadable extensions&lt;/a&gt; to SQLite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6f715dc89839324b877f33d62ebb39393f6ca50" translate="yes" xml:space="preserve">
          <source>Shared-cache locks are released when a database connection concludes its current transaction, either by committing it or rolling it back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a3aca3d24b83cc38a4313e0315e88bcb9c21c92" translate="yes" xml:space="preserve">
          <source>Shared-cache mode changes the semantics of the locking model in some cases. The details are described by this document. A basic understanding of the normal SQLite locking model (see &lt;a href=&quot;lockingv3&quot;&gt;File Locking And Concurrency In SQLite Version 3&lt;/a&gt; for details) is assumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a3f80e6eca574b532dbb5d0c3d9a7766e7bf84a" translate="yes" xml:space="preserve">
          <source>Shared-cache mode is enabled on a per-process basis. Using the C interface, the following API can be used to globally enable or disable shared-cache mode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42662308d376fb67628511d59d090985566d2ae" translate="yes" xml:space="preserve">
          <source>Shared-memory files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7114e495e770e3a02bbb164bf55e1f96da4aecc" translate="yes" xml:space="preserve">
          <source>Shift the integer value in register P2 to the left by the number of bits specified by the integer in register P1. Store the result in register P3. If either input is NULL, the result is NULL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1886429e3c21f6dfa5e69e0091250e86426fb4f9" translate="yes" xml:space="preserve">
          <source>Shift the integer value in register P2 to the right by the number of bits specified by the integer in register P1. Store the result in register P3. If either input is NULL, the result is NULL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62341f589b9d3a0d923d18a2b4e7f7f2edda894e" translate="yes" xml:space="preserve">
          <source>ShiftLeft</source>
          <target state="translated">ShiftLeft</target>
        </trans-unit>
        <trans-unit id="2310b475647d9a4e74a4f5d5a47bfb27340ee08b" translate="yes" xml:space="preserve">
          <source>ShiftRight</source>
          <target state="translated">ShiftRight</target>
        </trans-unit>
        <trans-unit id="c8723bf8dd0f924a9f0d00bc2ddb22a9562a76b1" translate="yes" xml:space="preserve">
          <source>Shifting a negative number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f0ca083402d5eb462b696e15e581aaadbeb113a" translate="yes" xml:space="preserve">
          <source>Shifting an N-bit integer by more than N bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37dcc04149816924636682bd712a1a49f1dcb38f" translate="yes" xml:space="preserve">
          <source>Shifting by a negative amount.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d224675e61816beeffff3a83b33b759da2cf9109" translate="yes" xml:space="preserve">
          <source>Short answer: A column declared &lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt; will autoincrement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66f7bc664b9d82f0b84142732a02328bc0cdf8d0" translate="yes" xml:space="preserve">
          <source>Show ASCII-art abstract syntax tree diagrams using the &quot;.selecttrace&quot; and &quot;.wheretrace&quot; commands in the &lt;a href=&quot;cli&quot;&gt;command-line shell&lt;/a&gt; when compiled with &lt;a href=&quot;compile#debug&quot;&gt;SQLITE_DEBUG&lt;/a&gt;, SQLITE_ENABLE_SELECTTRACE, and SQLITE_ENABLE_WHERETRACE. Also provide the sqlite3TreeViewExpr() and sqlite3TreeViewSelect() entry points that can be invoked from with the debugger to show the parse tree when stopped at a breakpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29bd1b65a367359ac801580f0f164ea797beea79" translate="yes" xml:space="preserve">
          <source>Show how many rows have changed on each table, but do not show the actual changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c704a81c82ee8bb0729ae9984ab0b0befba88f" translate="yes" xml:space="preserve">
          <source>Show me your flowcharts and conceal your tables, and I shall continue to be mystified. Show me your tables, and I won't usually need your flowcharts; they'll be obvious.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eadcf1db0ff39fb6bc0246ade4beb9b3e9027520" translate="yes" xml:space="preserve">
          <source>Show only differences in the schema not the table content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584527d924d04a23c5c08d9fd085c97f73f6da07" translate="yes" xml:space="preserve">
          <source>Show only the differences in content for TABLE, not for the entire database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2688d3833edc37bfcee14b5515c2bff49005d0c" translate="yes" xml:space="preserve">
          <source>Show the SQL that would be run to carry out the archive operation, but do not actually change anything.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d6599ba5b081fd8b2869046769b3cd08250edc" translate="yes" xml:space="preserve">
          <source>Shun arrogance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df3f4b6cc3b45148ff40b29aba7af47fbd10c1fd" translate="yes" xml:space="preserve">
          <source>Signed integer overflow. (Signed integer overflow does &lt;u&gt;not&lt;/u&gt; necessarily wrap around, as most people expect.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e226f8ddc66c1a463dcf0a7c345c529980f966b" translate="yes" xml:space="preserve">
          <source>Silent &quot;d&quot; in words beginning with &quot;dj&quot;: djinn, Djikarta</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aada0dd0ffeee0e21804c55732d58986c7fd3694" translate="yes" xml:space="preserve">
          <source>Silent &quot;g&quot; in words beginning with &quot;gn&quot;: gnarly, gnome, gnat</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbaa2ec88597d6e84d9f667ee669d561de7dec36" translate="yes" xml:space="preserve">
          <source>Silent &quot;k&quot; in words beginning with &quot;kn&quot;: knight, Knuthson</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8ddc119a87ce25d1a07a2270fa7ab759fe3699" translate="yes" xml:space="preserve">
          <source>Silent &quot;p&quot; in words beginning with &quot;pn&quot;: pneumonia, pneumatic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fea8d13746b11fa947fbc609fcc6f58d06a7902" translate="yes" xml:space="preserve">
          <source>Silent &quot;p&quot; in words beginning with &quot;ps&quot;: psalm, psyche</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f17200036eeba29904ebeaabba7f7630872e60fd" translate="yes" xml:space="preserve">
          <source>Silent &quot;p&quot; in words beginning with &quot;pt&quot;: pterodactyl, ptolemaic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d3bc03d8343d400c82a4a71a8abb03ff87c2249" translate="yes" xml:space="preserve">
          <source>Similarly, SQLite allows you to store a 2000-character string into a column of type VARCHAR(50). Other SQL implementations would either throw an error or truncate the string. SQLite stores the entire 2000-character string with no loss of information and without complaint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b91c3fa499f0d4214317846c7c43d756cfd2b0a" translate="yes" xml:space="preserve">
          <source>Similarly, a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bca9444f10a42e6ae3d406bbcd7ca872ce4cd02" translate="yes" xml:space="preserve">
          <source>Similarly, in &lt;a href=&quot;wal&quot;&gt;WAL mode&lt;/a&gt;, the write-ahead log file is not truncated following a &lt;a href=&quot;wal#ckpt&quot;&gt;checkpoint&lt;/a&gt;. Instead, SQLite reuses the existing file for subsequent WAL entries since overwriting is faster than appending.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bac336a356dc6f108086c2da32cf914ab388438e" translate="yes" xml:space="preserve">
          <source>Similarly, streaming API functions that return changesets (or patchsets) return them in chunks by way of a callback function instead of via a pointer to a single large buffer. In this case, a pair of parameters such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d579b15000cacebe667c23c91900124e0021ffe" translate="yes" xml:space="preserve">
          <source>Similarly, the following expressions have historically evaluated to TRUE when in fact NULL is also the correct answer here:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8de10619f1c2dbf3cc29b124beee52534207f387" translate="yes" xml:space="preserve">
          <source>Simple Queries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c820f89b614c85cd10dd51d0186cb9a23cd537b4" translate="yes" xml:space="preserve">
          <source>Simple SELECT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b5e01ecfaf01cf9d6fed2afce17a1e2ec85faaa" translate="yes" xml:space="preserve">
          <source>Simple Select Processing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25bc3effd8fab2177bf75bccfaba476dd31d7e03" translate="yes" xml:space="preserve">
          <source>Simple fts queries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d21c97069116b510ca5fd5d37452e567c518b5ee" translate="yes" xml:space="preserve">
          <source>Simple, easy to use &lt;a href=&quot;cintro&quot;&gt;API&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a696ed001fc7792dc03669a107ef6867be06cf" translate="yes" xml:space="preserve">
          <source>Simplified Application Development</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75e092657cf7286e756d1dede51480e5230b9edf" translate="yes" xml:space="preserve">
          <source>Simplify the design of the VDBE by restricting the number of sorters and lists to 1. In practice, no more than one sorter and one list was ever used anyhow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89151b192ec38384818e48383b1951487fe9cb56" translate="yes" xml:space="preserve">
          <source>Simply replace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de0928c2b632719ec80087729ff90db61c097100" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;https://sqlite.org/releaselog/3_13_0.html&quot;&gt;version 3.13.0&lt;/a&gt; (2016-05-18), the session extension has been included in the SQLite &lt;a href=&quot;amalgamation&quot;&gt;amalgamation&lt;/a&gt; source distribution. By default, the session extension is disabled. To enable it, build with the following compiler switches:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa37de22579abc7084228906dd483ab965aacfb" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;https://sqlite.org/releaselog/3_5_0.html&quot;&gt;version 3.5.0&lt;/a&gt; (2007-09-04), SQLite has supported an interface called the &lt;a href=&quot;c3ref/vfs&quot;&gt;virtual file system&lt;/a&gt; or &quot;VFS&quot;. This object is somewhat misnamed since it is really an interface to the whole underlying operating system, not just the filesystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c659e6cde59a26a5cc98604eaf1a60217b6d7297" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;https://sqlite.org/releaselog/3_6_18.html&quot;&gt;version 3.6.18&lt;/a&gt; (2009-09-11), SQLite source code has been stored in the &lt;a href=&quot;http://www.fossil-scm.org/&quot;&gt;Fossil configuration management system&lt;/a&gt;. The SQLITE_SOURCE_ID macro evaluates to a string which identifies a particular check-in of SQLite within its configuration management system. The SQLITE_SOURCE_ID string contains the date and time of the check-in (UTC) and a SHA1 or SHA3-256 hash of the entire source tree. If the source code has been edited in any way since it was last checked in, then the last four hexadecimal digits of the hash may be modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef82de3319be0d75e458ab4416694f2f8299790" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;https://sqlite.org/releaselog/3_7_0.html&quot;&gt;version 3.7.0&lt;/a&gt; (2010-07-21), SQLite also supports &quot;&lt;a href=&quot;wal&quot;&gt;WAL mode&lt;/a&gt;&quot;. In WAL mode, changes are not written to the original database file. Instead, changes go into a separate &quot;write-ahead log&quot; or &quot;WAL&quot; file. Later, after the transaction commits, those changes will be moved from the WAL file back into the original database in an operation called &quot;checkpoint&quot;. WAL mode is enabled by running &quot;&lt;a href=&quot;pragma#pragma_journal_mode&quot;&gt;PRAGMA journal_mode=WAL&lt;/a&gt;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="974a12d011bbc97d586f22e505d00eff41958058" translate="yes" xml:space="preserve">
          <source>Since SQLite always interprets any filename that does not begin with &quot;&lt;code&gt;file:&lt;/code&gt;&quot; as an ordinary filename regardless of the URI setting, and because it is very unusual to have an actual file begin with &quot;&lt;code&gt;file:&lt;/code&gt;&quot;, it is safe for most applications to enable URI processing even if URI filenames are not currently being used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6787bde414a9d9d049df11f55e9b93b41be95c03" translate="yes" xml:space="preserve">
          <source>Since SQLite databases are ordinary disk files, any malfunction in the filesystem can corrupt the database. Filesystems in modern operating systems are very reliable, but errors do still occur. For example, on 2013-10-01 the SQLite database that holds the &lt;a href=&quot;http://wiki.tcl-lang.org/&quot;&gt;Wiki for Tcl/Tk&lt;/a&gt; went corrupt a few days after the host computer was moved to a dodgy build of the (linux) kernel that had issues in the filesystem layer. In that event, the filesystem eventually became so badly corrupted that the machine was unusable, but the earliest symptom of trouble was the corrupted SQLite database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c695a2f51c4b24da3c2784ee7cd9c9755809b7df" translate="yes" xml:space="preserve">
          <source>Since SQLite reads and writes an ordinary disk file, the only access permissions that can be applied are the normal file access permissions of the underlying operating system. The GRANT and REVOKE commands commonly found on client/server RDBMSes are not implemented because they would be meaningless for an embedded database engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59abdbce3144e8f85a07a8dfceb62a241d9b0167" translate="yes" xml:space="preserve">
          <source>Since an SQLite database is a more general format (it is designed to do much more than simply store a bunch of files) it is not as compact as either the ZIP Archive or Tarball formats. An SQLite Archive is usually about 1% larger than the equivalent ZIP Archive. Tarballs are compressed as a single unit rather than compressing each file separately as is done by both SQLite and ZIP Archives. For these reason, Tarballs tend to be smaller than either ZIP or SQLite Archives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4194b98c5f98c8eb76bc03b04a9e6fbf66db418a" translate="yes" xml:space="preserve">
          <source>Since database zFilename is a file on disk, then it may be accessed externally by another process. This means that when the call to sqlite3_backup_step() attempts to read from or write data to it, it may fail to obtain the required file lock. If this happens, this implementation will fail, returning SQLITE_BUSY immediately. The solution would be to register a busy-handler callback or timeout with &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; pFile using &lt;a href=&quot;c3ref/busy_handler&quot;&gt;sqlite3_busy_handler()&lt;/a&gt; or &lt;a href=&quot;c3ref/busy_timeout&quot;&gt;sqlite3_busy_timeout()&lt;/a&gt; as soon as it is opened. If it fails to obtain a required lock immediately, &lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;sqlite3_backup_step()&lt;/a&gt; uses any registered busy-handler callback or timeout in the same way as &lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step()&lt;/a&gt; or &lt;a href=&quot;c3ref/exec&quot;&gt;sqlite3_exec()&lt;/a&gt; does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="689371fa0cc7aa87af9ab6ee0314efa8f5ddaa1a" translate="yes" xml:space="preserve">
          <source>Since its inception on 2000-05-29, SQLite has been implemented in generic C. C was and continues to be the best language for implementing a software library like SQLite. There are no plans to recode SQLite in any other programming language at this time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e237e23641bdbe1625752d920a811e88f9bea9fa" translate="yes" xml:space="preserve">
          <source>Since the &quot;t2&quot; imposter table is a form of database corruption, the manual approach to creating imposter tables is not recommended. Actually, any use of imposter tables is discouraged for all but expert developers, but manually created imposter tables are especially discouraged because they are permanent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cc48f0c85bdbc88acc6ded1a2b33b3cefbcc949" translate="yes" xml:space="preserve">
          <source>Since the SQLite database file format was designed (in 2003) the default &lt;a href=&quot;pragma#pragma_page_size&quot;&gt;page size&lt;/a&gt; for new databases has been 1024 bytes. This was a reasonable choice in 2003. But on modern hardware, a 4096 byte page is a faster and better choice. So, beginning with SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_12_0.html&quot;&gt;version 3.12.0&lt;/a&gt; (2016-03-29)) the default page size for new database files has been increased to 4096 bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054ac08de64845448b2fb9281541e1391100a214" translate="yes" xml:space="preserve">
          <source>Since the actions of &lt;a href=&quot;pragma#pragma_optimize&quot;&gt;PRAGMA optimize&lt;/a&gt; are determined to some extent by prior queries that have been evaluated on the same database connection, it is recommended that &lt;a href=&quot;pragma#pragma_optimize&quot;&gt;PRAGMA optimize&lt;/a&gt; be deferred until the database connection is closing and has thus had an opportunity to accumulate as much usage information as possible. It is also reasonable to set a timer to run &lt;a href=&quot;pragma#pragma_optimize&quot;&gt;PRAGMA optimize&lt;/a&gt; every few hours, or every few days, for database connections that stay open for a long time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a35c2dbd798622212a3da41545074117af9096bd" translate="yes" xml:space="preserve">
          <source>Since the index is used to look up values in the table, it is important that the index and table be kept consistent. Now that there is an index on the examp table, we will have to update that index whenever data is inserted, deleted, or changed in the examp table. Remember the first example above where we were able to insert a new row into the &quot;examp&quot; table using 12 VDBE instructions. Now that this table is indexed, 19 instructions are required. The SQL statement is this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="792d86f988c7b4533a9df91cbaad2f47d8254db5" translate="yes" xml:space="preserve">
          <source>Since the information is stored in the table in rowid order, SQLite can find the correct row using a binary search. If the table contains N element, the time required to look up the desired row is proportional to logN rather than being proportional to N as in a full table scan. If the table contains 10 million elements, that means the query will be on the order of N/logN or about 1 million times faster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94ff8f1fdae75cff7dbf44bfb613a96fb3fe71f5" translate="yes" xml:space="preserve">
          <source>Since this document was first written, the canonical SQLite source code has been moved from the venerable CVS system into a Fossil repository at &lt;a href=&quot;http://www.sqlite.org/src&quot;&gt;http://www.sqlite.org/src&lt;/a&gt;. This means that if you are working with canonical SQLite source code (as opposed to the &lt;a href=&quot;amalgamation&quot;&gt;amalgamation&lt;/a&gt; source code files, sqlite3.c and sqlite3.h) then you can create a private repository simply by cloning the official repository:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b7c178a22b32f8642c754bb0ef6c8c8f9f96539" translate="yes" xml:space="preserve">
          <source>Since this document was originally written some of the database engines tested have been updated and users have been kind enough to send in corrections to the chart below. The original data showed a wide variety of behaviors, but over time the range of behaviors has converged toward the PostgreSQL/Oracle model. The only significant difference is that Informix and MS-SQL both treat NULLs as indistinct in a UNIQUE column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a988ba929d7a7d98790e14aa91b1b4ee801c28ea" translate="yes" xml:space="preserve">
          <source>Since this interface is expected to be rarely used, it is only available if SQLite is compiled using the &lt;a href=&quot;../compile#enable_stmt_scanstatus&quot;&gt;SQLITE_ENABLE_STMT_SCANSTATUS&lt;/a&gt; compile-time option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc8856dbc189b149adcf35c14f2c019d6ca39cd2" translate="yes" xml:space="preserve">
          <source>Since this interface is expected to be rarely used, it is only available if SQLite is compiled using the &lt;a href=&quot;compile#enable_stmt_scanstatus&quot;&gt;SQLITE_ENABLE_STMT_SCANSTATUS&lt;/a&gt; compile-time option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69653584b18a40e580d58b62294b4d01dca91c5b" translate="yes" xml:space="preserve">
          <source>Since undefined and implementation-defined behavior is non-portable and can easily lead to incorrect answers, SQLite works very hard to avoid it. For example, when adding two integer column values together as part of an SQL statement, SQLite does not simply add them together using the C-language &quot;+&quot; operator. Instead, it first checks to make sure the addition will not overflow, and if it will, it does the addition using floating point instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a1c7258f48d87f5562218d2ba5ba3886293704d" translate="yes" xml:space="preserve">
          <source>Single-File Documents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd14cfbad52780046ab174d1c92328e62738415" translate="yes" xml:space="preserve">
          <source>Single-file Cross-platform Database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71d9f86ea2562e67aa07344919bbe26526606087" translate="yes" xml:space="preserve">
          <source>Situations Where A Client/Server RDBMS May Work Better</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7606f77965da29221827e7ce60dd2a6316522a70" translate="yes" xml:space="preserve">
          <source>Situations Where SQLite Works Well</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7152342a267362add3c0d7f69f720f7a9c76c9e" translate="yes" xml:space="preserve">
          <source>Size</source>
          <target state="translated">Size</target>
        </trans-unit>
        <trans-unit id="23dd62e305cc04b400ea8b167918d45e391e1599" translate="yes" xml:space="preserve">
          <source>Size Of The SQLite Library</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23aa6e811d60088ebfe23efb308861aa99dcc44c" translate="yes" xml:space="preserve">
          <source>Size in bytes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="866e161f09886804ed95702c5f38517afa748243" translate="yes" xml:space="preserve">
          <source>Size of a disk sector assumed by the process that wrote this journal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d67d90ae080b2ba6443535a1ba1538cce623c7a0" translate="yes" xml:space="preserve">
          <source>Size of associated data in bytes after it has been uncompressed (an integer).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af19d643ee98cb7aaa5189e1e80bb15629e35fe6" translate="yes" xml:space="preserve">
          <source>Size of pages in this journal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="594a08e2bfa114e1b1b2dd2a2473b57fc253e650" translate="yes" xml:space="preserve">
          <source>Size of the database file in pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57e816514d2bd056545721fc5901b1263c953939" translate="yes" xml:space="preserve">
          <source>Size of the database file in pages. The &quot;in-header database size&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80dfcf68ced67397f8e69446b796772d4e573bd1" translate="yes" xml:space="preserve">
          <source>Skip NULL entries on range queries in &lt;a href=&quot;expridx&quot;&gt;indexes on expressions&lt;/a&gt;. Fix for ticket &lt;a href=&quot;https://www.sqlite.org/src/tktview/4baa46491212947&quot;&gt;4baa46491212947&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8597bf03434e274cab90656bf57bce61497b541d" translate="yes" xml:space="preserve">
          <source>Skip over leading spaces in text to numeric conversions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44c1dff190859dd795700849185006cec261ef11" translate="yes" xml:space="preserve">
          <source>Small code &lt;a href=&quot;footprint&quot;&gt;footprint&lt;/a&gt;: less than 600KiB fully configured or much less with optional features omitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d43535873c35c636399ec243f6c8a56398f45fc" translate="yes" xml:space="preserve">
          <source>Small edits only overwrite the parts of the file that change, reducing write time and wear on SSD drives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15cb3011196ef5ecfa387e72a64b6b9858775898" translate="yes" xml:space="preserve">
          <source>Smaller documents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6085ef2b0d377636644056b25b8388fdb9315be1" translate="yes" xml:space="preserve">
          <source>Snapshots of official releases of SQLite source code can often be obtained directly from the &lt;a href=&quot;https://sqlite.org/download.html&quot;&gt;download page&lt;/a&gt; of the SQLite website. Even if the specific version desired is not listed on the download page, the naming conventions are fairly clear and so programmers can often guess the name of an historical release and download it that way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7745ac392b119ee893e25a699e3cdf853f08cced" translate="yes" xml:space="preserve">
          <source>So as not to open security holes in older applications that are unprepared to deal with &lt;a href=&quot;../loadext&quot;&gt;extension loading&lt;/a&gt;, and as a means of disabling &lt;a href=&quot;../loadext&quot;&gt;extension loading&lt;/a&gt; while evaluating user-entered SQL, the following API is provided to turn the &lt;a href=&quot;load_extension&quot;&gt;sqlite3_load_extension()&lt;/a&gt; mechanism on and off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b1dd3b3f9a942c8b562e364d61d2076822b07d" translate="yes" xml:space="preserve">
          <source>So as not to open security holes in older applications that are unprepared to deal with &lt;a href=&quot;loadext&quot;&gt;extension loading&lt;/a&gt;, and as a means of disabling &lt;a href=&quot;loadext&quot;&gt;extension loading&lt;/a&gt; while evaluating user-entered SQL, the following API is provided to turn the &lt;a href=&quot;#sqlite3_load_extension&quot;&gt;sqlite3_load_extension()&lt;/a&gt; mechanism on and off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d0e08c9c27f821bc14542d2dfda5e1d13ecd69" translate="yes" xml:space="preserve">
          <source>So in the vast majority of cases, applications need not worry about the WAL file at all. SQLite will automatically take care of it. But it is possible to get SQLite into a state where the WAL file will grow without bound, causing excess disk space usage and slow queries speeds. The following bullets enumerate some of the ways that this can happen and how to avoid them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e294517ccb0b92866adadbcc46dbbe368da638fb" translate="yes" xml:space="preserve">
          <source>So instead of going by the standards documents, various popular SQL engines were tested to see how they handle NULLs. The idea was to make SQLite work like all the other engines. An SQL test script was developed and run by volunteers on various SQL RDBMSes and the results of those tests were used to deduce how each engine processed NULL values. The original tests were run in May of 2002. A copy of the test script is found at the end of this document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb3fd38b2086ae5409a50744fd4fc4e629f9ceb9" translate="yes" xml:space="preserve">
          <source>So let your take-away be this: read/write latency for SQLite is competitive with read/write latency of individual files on disk. Often SQLite is faster. Sometimes SQLite is almost as fast. Either way, this article disproves the common assumption that a relational database must be slower than direct filesystem I/O.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e14f136c4639ca69349a007ce6b5be7651832a1" translate="yes" xml:space="preserve">
          <source>So that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed811e71ef3d05d3652d347ba0eec5bc9cfd6daf" translate="yes" xml:space="preserve">
          <source>So the implementation of DELETE is really in two loops. The first loop (instructions 5 through 11) locates the records that are to be deleted and saves their keys onto a temporary list, and the second loop (instructions 16 through 19) uses the key list to delete the records one by one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4f70ed30e8ca5ddd05ca39e32d9f73108273525" translate="yes" xml:space="preserve">
          <source>So then, instead of storing all content for all slides in a single oversized XML file (&quot;content.xml&quot;), suppose there was a separate table for storing the content of each slide separately. The table schema might look something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a527776b915968f528d88d96579bf0b2cfc459" translate="yes" xml:space="preserve">
          <source>So which query plan is better? It turns out that the answer depends on what kind of data is found in the node and edge tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15a7d8b50c8c0de15e18cf6f21d9c00564463215" translate="yes" xml:space="preserve">
          <source>So with this simple change, the ODP file now stores not just the most recent edit to the presentation, but a history of all historic edits. The user would normally want to see just the most recent edition of the presentation, but if desired, the user can now go backwards in time to see historical versions of the same presentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b3d75a6fea634203c91a87ee6d0199704a76d2e" translate="yes" xml:space="preserve">
          <source>So you can see that depending on how the data is structured in the table, either query plan 1 or query plan 2 might be better. Which plan does SQLite choose by default? As of version 3.6.18, without running &lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE&lt;/a&gt;, SQLite will choose option 2. But if the &lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE&lt;/a&gt; command is run in order to gather statistics, a different choice might be made if the statistics indicate that the alternative is likely to run faster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae83e266982fd9b4e55366971516ab44ce25fd32" translate="yes" xml:space="preserve">
          <source>So, SQLite is able to do one or two large and complex queries, or it can do many smaller and simpler queries. Both are efficient. An application can use either or both techniques, depending on what works best for the situation at hand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bac7c0c462d374d0c622ef9a876ba7c2814954d0" translate="yes" xml:space="preserve">
          <source>So, for example, Android applications written in Java are able to invoke SQLite (through an adaptor). Maybe it would have been more convenient for Android if SQLite had been coded in Java as that would make the interface simpler. However, on iPhone applications are coded in Objective-C or Swift, neither of which have the ability to call libraries written in Java. Thus, SQLite would be unusable on iPhones had it been written in Java.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="181a0af408b7a72e62f37951390087a73f4bc42a" translate="yes" xml:space="preserve">
          <source>So, for example, suppose a multi-thread process has two or more threads with separate SQLite database connections to the same database file. Then a third thread comes along and wants to read something out of that same database file on its own, without using the SQLite library. The third thread does an &lt;code&gt;open()&lt;/code&gt;, a &lt;code&gt;read()&lt;/code&gt; and then a &lt;code&gt;close()&lt;/code&gt;. One would think this would be harmless. But the &lt;code&gt;close()&lt;/code&gt; system call caused the locks held on the database by all the other threads to be dropped. Those other threads have no way of knowing that their locks have just been trashed (POSIX does not provide any mechanism to determine this) and so they keep on running under the assumption that their locks are still valid. This can lead to two or more threads or processes trying to write to the database at the same time, resulting in database corruption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7734444a7a6faac12d5a5f4324148513ca147ad7" translate="yes" xml:space="preserve">
          <source>So, for example, to move a polygon by some amount DX, DY without changing its shape, use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e378604952476e70a532691c0957173825ab1905" translate="yes" xml:space="preserve">
          <source>So, in most real systems, an index should be created on the child key columns of each foreign key constraint. The child key index does not have to be (and usually will not be) a UNIQUE index. Returning again to the example in section 1, the complete database schema for efficient implementation of the foreign key constraint might be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3db788b7daff3a78000d452682744db386479ec" translate="yes" xml:space="preserve">
          <source>SoftNull</source>
          <target state="translated">SoftNull</target>
        </trans-unit>
        <trans-unit id="36455d32e1724499e8736ccea81ccd08b26881c3" translate="yes" xml:space="preserve">
          <source>Solve Sudoku puzzles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea9361715e601f0c6bb314bde2f85f47f8bc5402" translate="yes" xml:space="preserve">
          <source>Some &quot;safe&quot; languages (ex: Go) dislike the use of assert(). But the use of assert() is a vital part of keeping SQLite maintainable. The lack of assert() in Go is a show-stopper as far as the developers of SQLite are concerned. See the &lt;a href=&quot;assert&quot;&gt;The Use Of assert() In SQLite&lt;/a&gt; article for additional information.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
