<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="sqlite">
    <body>
      <group id="sqlite">
        <trans-unit id="0a8b8eec2dca22f4460d3c1b6d1607de62d83c18" translate="yes" xml:space="preserve">
          <source>For example, to create an archive containing two text files, &quot;a.txt&quot; and &quot;b.txt&quot;, containing the text &quot;abc&quot; and &quot;123&quot; respectively:</source>
          <target state="translated">例えば、&quot;a.txt &quot;と &quot;b.txt &quot;という2つのテキストファイルを含むアーカイブを作成するには、それぞれ &quot;abc &quot;と &quot;123 &quot;というテキストが含まれています。</target>
        </trans-unit>
        <trans-unit id="e1c45bec4422b2834e5d74273014f0905a33b70e" translate="yes" xml:space="preserve">
          <source>For example, to inspect the contents of zip archive &quot;test.zip&quot; from the current directory:</source>
          <target state="translated">例えば、カレントディレクトリからzipアーカイブ「test.zip」の内容を検査するには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="460920e6960fc9166bdf09c3d3e3d2d1b9cb1172" translate="yes" xml:space="preserve">
          <source>For example, to optimize the full-text index for an FTS table named &quot;docs&quot;:</source>
          <target state="translated">例えば、「docs」という名前のFTSテーブルのフルテキストインデックスを最適化するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="8112859719fda223d11dd9ecc671a2d731113a48" translate="yes" xml:space="preserve">
          <source>For example, to see a list of the tables in the database, you can enter &quot;.tables&quot;.</source>
          <target state="translated">例えば、データベース内のテーブルの一覧を表示するには、「.tables」と入力します。</target>
        </trans-unit>
        <trans-unit id="3403f20bef06b9f62c829264d38a448f07fbf25f" translate="yes" xml:space="preserve">
          <source>For example, using the tables created above:</source>
          <target state="translated">例えば、上記で作成した表を使って</target>
        </trans-unit>
        <trans-unit id="8baebd4e0fce8f0dca8a23890fbbeb7b6c6bd6f4" translate="yes" xml:space="preserve">
          <source>For example, when a document containing the text &quot;Right now, they're very frustrated.&quot;, the terms extracted from the document and added to the full-text index are, in order, &quot;right now they re very frustrated&quot;. Such a document would match a full-text query such as &quot;MATCH 'Frustrated'&quot;, as the simple tokenizer transforms the term in the query to lowercase before searching the full-text index.</source>
          <target state="translated">例えば、&quot;Right now,they're very frustrated.&quot;というテキストを含む文書があった場合、その文書から抽出されて全文インデックスに追加される用語は、&quot;right now they're very frustrated &quot;の順になります。このような文書は、全文インデックスを検索する前に、単純なトークナイザーがクエリ内の用語を小文字に変換するので、&quot;MATCH 'Frustrated'&quot;のような全文クエリにマッチします。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="0dc693a709e03c8a242ebc99f829d5a5f0d7f07e" translate="yes" xml:space="preserve">
          <source>For examples of how the SQLite C/C++ interface can be used, refer to the source code for the &lt;b&gt;sqlite&lt;/b&gt; program in the file &lt;a href=&quot;https://sqlite.org/src/file/src/shell.c.in&quot;&gt;src/shell.c&lt;/a&gt; of the source tree. Additional information about sqlite is available at &lt;a href=&quot;cli&quot;&gt;cli.html&lt;/a&gt;. See also the sources to the Tcl interface for SQLite in the source file &lt;a href=&quot;https://sqlite.org/src/file/src/tclsqlite.c&quot;&gt;src/tclsqlite.c&lt;/a&gt;.</source>
          <target state="translated">SQLite C / C ++インターフェースの使用例については、ソースツリーの&lt;a href=&quot;https://sqlite.org/src/file/src/shell.c.in&quot;&gt;src / shell.c&lt;/a&gt;ファイルにある&lt;b&gt;sqlite&lt;/b&gt;プログラムのソースコードを参照してください。sqliteの詳細については、&lt;a href=&quot;cli&quot;&gt;cli.htmlを参照&lt;/a&gt;してください。ソースファイル&lt;a href=&quot;https://sqlite.org/src/file/src/tclsqlite.c&quot;&gt;src / tclsqlite.cの&lt;/a&gt; SQLiteのTclインターフェイスのソースも参照してください。</target>
        </trans-unit>
        <trans-unit id="db416b5f222a1960fcc408837e83b440afa98ccd" translate="yes" xml:space="preserve">
          <source>For floating-point substitutions (%e, %E, %f, %g, %G) the precision specifies the number of digits to display to the right of the decimal point.</source>
          <target state="translated">浮動小数点置換 (%e,%E,%f,%g,%G)の場合、精度は小数点の右側に表示する桁数を指定します。</target>
        </trans-unit>
        <trans-unit id="cf9d217953f034811d5791d9759455b504d70d86" translate="yes" xml:space="preserve">
          <source>For full prefix support, method (3) may be preferred. In this case, because the index contains entries for both &quot;first&quot; and &quot;1st&quot;, prefix queries such as 'fi*' or '1s*' will match correctly. However, because extra entries are added to the FTS index, this method uses more space within the database.</source>
          <target state="translated">プレフィックスを完全にサポートするには、(3)の方法が好ましいかもしれません。この場合、インデックスには &quot;first&quot; と &quot;1st&quot; の両方のエントリが含まれているため、'fi*' や '1s*' のようなプレフィックスクエリが正しくマッチします。ただし、FTS インデックスに余分なエントリが追加されるため、この方法ではデータベース内のスペースをより多く使用します。</target>
        </trans-unit>
        <trans-unit id="af625b5ec940a13ac3f0b796c61917d55c083bf9" translate="yes" xml:space="preserve">
          <source>For functions that accept &quot;</source>
          <target state="translated">を受け入れる関数の場合</target>
        </trans-unit>
        <trans-unit id="8e0c304ceb8d93d914d671ff91751c10ea1ee104" translate="yes" xml:space="preserve">
          <source>For functions that accept JSON as their first argument, that argument can be a JSON object, array, number, string, or null. SQLite numeric values and NULL values are interpreted as JSON numbers and nulls, respectively. SQLite text values can be understood as JSON objects, arrays, or strings. If an SQLite text value that is not a well-formed JSON object, array, or string is passed into json1 function, that function will usually throw an error. (Exceptions to this rule are &lt;a href=&quot;json1#jvalid&quot;&gt;json_valid()&lt;/a&gt; and &lt;a href=&quot;json1#jquote&quot;&gt;json_quote()&lt;/a&gt;.)</source>
          <target state="translated">最初の引数としてJSONを受け入れる関数の場合、その引数はJSONオブジェクト、配列、数値、文字列、またはnullにすることができます。 SQLiteの数値とNULL値は、それぞれJSON番号とnullとして解釈されます。 SQLiteテキスト値は、JSONオブジェクト、配列、または文字列として理解できます。整形式のJSONオブジェクト、配列、または文字列ではないSQLiteテキスト値がjson1関数に渡されると、その関数は通常エラーをスローします。 （このルールの例外は、&lt;a href=&quot;json1#jvalid&quot;&gt;json_valid（）&lt;/a&gt;および&lt;a href=&quot;json1#jquote&quot;&gt;json_quote（）&lt;/a&gt;です。）</target>
        </trans-unit>
        <trans-unit id="f4454df1a142f9ac3cdff944002d68d2bfdcbcbb" translate="yes" xml:space="preserve">
          <source>For functions that accept PATH arguments, that PATH must be well-formed or else the function will throw an error. A well-formed PATH is a text value that begins with exactly one '$' character followed by zero or more instances of &quot;.</source>
          <target state="translated">PATH 引数を受け取る関数の場合、その PATH は整形されていなければなりません。整形された PATH とは、正確に 1 つの '$' 文字で始まるテキスト値の後に &quot;.</target>
        </trans-unit>
        <trans-unit id="8848d7d3d9820023afd4f5c595baf809ffcb7c92" translate="yes" xml:space="preserve">
          <source>For general use in cases where the workload contains few UPDATE or DELETE operations, a good choice for automerge is 8. If the workload contains many UPDATE or DELETE commands, or if query speed is a concern, it may be advantageous to reduce automerge to 2.</source>
          <target state="translated">一般的に、ワークロードにUPDATEやDELETE操作がほとんどない場合には、オートマージを8にするのが良いでしょう。 ワークロードにUPDATEやDELETEコマンドが多く含まれている場合や、クエリの速度が気になる場合には、オートマージを2にした方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="bf5110604d852a2448723644607996c9499bf3c7" translate="yes" xml:space="preserve">
          <source>For historic compatibility, the C-language interfaces return primary result codes by default. The extended result code for the most recent error can be retrieved using the &lt;a href=&quot;c3ref/errcode&quot;&gt;sqlite3_extended_errcode()&lt;/a&gt; interface. The &lt;a href=&quot;c3ref/extended_result_codes&quot;&gt;sqlite3_extended_result_codes()&lt;/a&gt; interface can be used to put a &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; into a mode where it returns the extended result codes instead of the primary result codes.</source>
          <target state="translated">歴史的な互換性のために、C言語インターフェイスはデフォルトでプライマリ結果コードを返します。最新のエラーの拡張結果コードは、&lt;a href=&quot;c3ref/errcode&quot;&gt;sqlite3_extended_errcode（）&lt;/a&gt;インターフェースを使用して取得できます。&lt;a href=&quot;c3ref/extended_result_codes&quot;&gt;sqlite3_extended_result_codes（）&lt;/a&gt;インターフェースを置くために使用することができる&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続&lt;/a&gt;が拡張結果コードの代わりに、一次結果コードを返すモードにします。</target>
        </trans-unit>
        <trans-unit id="17b53a99ea41c50893270b0043884f065027650e" translate="yes" xml:space="preserve">
          <source>For historical reasons, and for efficiency, all sorting is currently done in memory.</source>
          <target state="translated">歴史的な理由と効率化のため、現在はすべてのソートがメモリ内で行われています。</target>
        </trans-unit>
        <trans-unit id="eeed22fa30af9d54901acfbf4c1ce1f017feb462" translate="yes" xml:space="preserve">
          <source>For integer substitutions (%d, %i, %x, %X, %o, and %p) the precision specifies minimum number of digits to display. Leading zeros are added if necessary, to expand the output to the minimum number of digits.</source>
          <target state="translated">整数置換 (%d、%i、%x、%X、%o、および %p)の場合、精度は表示する最小桁数を指定します。必要に応じて先頭のゼロが追加され、出力を最小桁数に拡張します。</target>
        </trans-unit>
        <trans-unit id="6f753dacad85542947673dd8fa7db3bccc0a7592" translate="yes" xml:space="preserve">
          <source>For maximum reliability and for robustness against database corruption, SQLite should always be run with its default synchronous setting of FULL.</source>
          <target state="translated">最大限の信頼性とデータベースの破損に対する堅牢性を確保するために、SQLite は常にデフォルトの同期設定 FULL で実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="489e54409f8b7e0829c336efb96f4282b5ccf13a" translate="yes" xml:space="preserve">
          <source>For more details, refer to the comments in &lt;a href=&quot;http://sqlite.org/src/doc/trunk/ext/rbu/sqlite3rbu.h&quot;&gt;header file sqlite3rbu.h&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;http://sqlite.org/src/doc/trunk/ext/rbu/sqlite3rbu.h&quot;&gt;ヘッダーファイルsqlite3rbu.hの&lt;/a&gt;コメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="4e6f70ecf49e4210656602d693e569fcb03d8193" translate="yes" xml:space="preserve">
          <source>For most applications, the recommended method for building SQLite is to use &lt;a href=&quot;amalgamation&quot;&gt;the amalgamation&lt;/a&gt; code file, &lt;b&gt;sqlite3.c&lt;/b&gt;, and its corresponding header file &lt;b&gt;sqlite3.h&lt;/b&gt;. The sqlite3.c code file should compile and run on any unix, Windows system without any changes or special compiler options. Most applications can simply include the sqlite3.c file together with the other C code files that make up the application, compile them all together, and have working and well configured version of SQLite.</source>
          <target state="translated">ほとんどのアプリケーションで、SQLiteの構築に推奨される方法は&lt;a href=&quot;amalgamation&quot;&gt;、統合&lt;/a&gt;コードファイル&lt;b&gt;sqlite3.c&lt;/b&gt;とそれに対応するヘッダーファイル&lt;b&gt;sqlite3.hを使用すること&lt;/b&gt;です。 sqlite3.cコードファイルは、変更や特別なコンパイラオプションを使用せずに、UNIXのWindowsシステムでコンパイルして実行する必要があります。ほとんどのアプリケーションは、アプリケーションを構成する他のCコードファイルと一緒にsqlite3.cファイルを単純にインクルードし、それらをすべてコンパイルして、SQLiteの適切に構成されたバージョンを機能させることができます。</target>
        </trans-unit>
        <trans-unit id="99e3c9a88b32764d83bb0da10699b12fcd9a531f" translate="yes" xml:space="preserve">
          <source>For most applications, upgrading from the legacy query planner to the NGQP requires little thought or effort. Simply replace the older SQLite version with the newer version of SQLite and recompile and the application will run faster. There are no API changes nor modifications to compilation procedures.</source>
          <target state="translated">ほとんどのアプリケーションでは、従来のクエリプランナーからNGQPへのアップグレードは、ほとんど考えも努力も必要ありません。古いバージョンのSQLiteを新しいバージョンのSQLiteに置き換えて再コンパイルするだけで、アプリケーションはより速く実行されます。APIの変更やコンパイル手順の変更はありません。</target>
        </trans-unit>
        <trans-unit id="0efe87a820fa8cd327d2f74d3e3f1deb32107fb9" translate="yes" xml:space="preserve">
          <source>For most cases, it is true that potential attackers have no way of injecting arbitrary SQL, and so most uses of SQLite are immune to the attack above. But there are some notable exceptions. To wit:</source>
          <target state="translated">ほとんどの場合、潜在的な攻撃者が任意の SQL を注入する方法がないことは事実であり、SQLite のほとんどの用途では上記の攻撃を受けることはありません。しかし、いくつかの顕著な例外があります。それは、以下のような場合です。</target>
        </trans-unit>
        <trans-unit id="c86754da6df36988096aed27dea948d5f58eceba" translate="yes" xml:space="preserve">
          <source>For most non-trivial SQL databases, the key to performance is creating the right SQL indexes. In this context &quot;the right SQL indexes&quot; means those that cause the queries that an application needs to optimize run fast. The &quot;.expert&quot; command can assist with this by proposing indexes that might assist with specific queries, were they present in the database.</source>
          <target state="translated">ほとんどの非自明なSQLデータベースでは、パフォーマンスの鍵となるのは正しいSQLインデックスを作成することです。ここでいう「正しいSQLインデックス」とは、アプリケーションが最適化する必要のあるクエリを高速に実行するためのインデックスを意味します。.expert」コマンドは、特定のクエリを支援する可能性のあるインデックスがデータベースに存在する場合に、それを提案することでこれを支援します。</target>
        </trans-unit>
        <trans-unit id="e0fd582fdc761484a0a0ca3bb5f583aafab7cdf5" translate="yes" xml:space="preserve">
          <source>For most purposes, SQLite can be built just fine using the default compilation options. However, if required, the compile-time options documented below can be used to &lt;a href=&quot;#omitfeatures&quot;&gt;omit SQLite features&lt;/a&gt; (resulting in a &lt;a href=&quot;footprint&quot;&gt;smaller compiled library size&lt;/a&gt;) or to change the &lt;a href=&quot;#defaults&quot;&gt;default values&lt;/a&gt; of some parameters.</source>
          <target state="translated">ほとんどの目的で、SQLiteはデフォルトのコンパイルオプションを使用して問題なく構築できます。ただし、必要に応じて、以下で説明するコンパイル時オプションを使用して、&lt;a href=&quot;#omitfeatures&quot;&gt;SQLite機能&lt;/a&gt;を省略したり（結果として、&lt;a href=&quot;footprint&quot;&gt;コンパイル済みライブラリのサイズを小さくし&lt;/a&gt;たり）、一部のパラメーターの&lt;a href=&quot;#defaults&quot;&gt;デフォルト値&lt;/a&gt;を変更したりできます。</target>
        </trans-unit>
        <trans-unit id="be3d8fa3ad8b3f16b5f81b3d35db241bab90e030" translate="yes" xml:space="preserve">
          <source>For multi-threaded applications that are careful about how they manage threads, SQLite supports an alternative run-time configuration that is half way between not using any mutexes and the default situation of mutexing everything in sight. This in-the-middle mutex alignment can be established as follows:</source>
          <target state="translated">スレッドの管理方法に注意を払っているマルチスレッドアプリケーションのために、SQLiteはミューテックスを一切使用しないことと、目の前にあるすべてのものをミューテックスで処理するというデフォルトの状況との中間的なランタイム設定をサポートしています。この中間的なミューテックスの配置は、以下のように設定することができます。</target>
        </trans-unit>
        <trans-unit id="5bfaf72720042391e9725050a2097ea765a5277e" translate="yes" xml:space="preserve">
          <source>For newer applications, FTS4 is recommended; though if compatibility with older versions of SQLite is important, then FTS3 will usually serve just as well.</source>
          <target state="translated">しかし、古いバージョンの SQLite との互換性が重要な場合は、FTS3 で十分に機能します。</target>
        </trans-unit>
        <trans-unit id="74f1cec569d928f5163be03c8f3a97d88c4bb5d9" translate="yes" xml:space="preserve">
          <source>For non-TEMP triggers, the table to be modified or queried must exist in the same database as the table or view to which the trigger is attached. TEMP triggers are not subject to the same-database rule. A TEMP trigger is allowed to query or modify any table in any &lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt;-ed database.</source>
          <target state="translated">非TEMPトリガーの場合、変更または照会されるテーブルは、トリガーがアタッチされているテーブルまたはビューと同じデータベースに存在する必要があります。TEMPトリガーは、同じデータベースのルールの対象ではありません。TEMPトリガーは、任意の&lt;a href=&quot;lang_attach&quot;&gt;ATTACHされた&lt;/a&gt;データベース内の任意のテーブルを照会または変更することができます。</target>
        </trans-unit>
        <trans-unit id="eaf4afda655b698c5089cf162bb3637b1ddce067" translate="yes" xml:space="preserve">
          <source>For numeric data, this situation is more complex. If both inputs look like well-formed numbers, then they are converted into floating point values using &lt;b&gt;atof()&lt;/b&gt; and compared numerically. If one input is not a well-formed number but the other is, then the number is considered to be less than the non-number. If neither inputs is a well-formed number, then &lt;b&gt;strcmp()&lt;/b&gt; is used to do the comparison.</source>
          <target state="translated">数値データの場合、この状況はより複雑です。両方の入力が整形式の数値のように見える場合、それらは&lt;b&gt;atof（）&lt;/b&gt;を使用して浮動小数点値に変換され、数値的に比較されます。 1つの入力が整形式の数値ではなく、もう1つの入力の場合、数値は非数値よりも小さいと見なされます。どちらの入力も整形式の数値ではない場合、比較には&lt;b&gt;strcmp（）&lt;/b&gt;が使用されます。</target>
        </trans-unit>
        <trans-unit id="11d66790f63457992337a522f75d0ba8c19d49c3" translate="yes" xml:space="preserve">
          <source>For ordinary FTS3/FTS4 queries, the search tree depth is approximately the base-2 logarithm of the number of terms in the right-hand side of the MATCH operator. However, for &lt;a href=&quot;fts3#phrase&quot;&gt;phrase queries&lt;/a&gt; and &lt;a href=&quot;fts3#near&quot;&gt;NEAR queries&lt;/a&gt; the search tree depth is linear in the number of right-hand side terms. So the default depth limit of 12 is sufficient for up to 4095 ordinary terms on a MATCH, it is only sufficient for 11 or 12 phrase or NEAR terms. Even so, the default is more than enough for most application.</source>
          <target state="translated">通常のFTS3 / FTS4クエリの場合、検索ツリーの深さは、MATCH演算子の右側の項数の2を底とする対数です。ただし、&lt;a href=&quot;fts3#phrase&quot;&gt;フレーズクエリ&lt;/a&gt;と&lt;a href=&quot;fts3#near&quot;&gt;NEARクエリの場合&lt;/a&gt;、検索ツリーの深さは右側の用語の数に比例します。したがって、デフォルトの深さ制限12は、MATCHの最大4095の通常の用語には十分であり、11または12のフレーズまたはNEAR用語にのみ十分です。それでも、ほとんどのアプリケーションではデフォルトで十分です。</target>
        </trans-unit>
        <trans-unit id="87e6be4eb608f1997fb25355e4537ee88db28dd4" translate="yes" xml:space="preserve">
          <source>For performance measurement, SQLite is compiled in approximately the same way as it would be for use in production systems. The compile-time configuration is &quot;approximate&quot; in the sense that every production use of SQLite is different. Compile-time options used by one system are not necessarily the same as those used by others. The key point is that options that significantly impact the generated machine code are avoided. For example, the -DSQLITE_DEBUG option is omitted because that option inserts thousands of assert() statements in the middle of performance critical sections of the SQLite library. The -pg option (on GCC) is omitted because it causes the compiler to emit extra probabilistic performance measuring code which interferes with actual performance measurements.</source>
          <target state="translated">パフォーマンス測定のために、SQLite は本番システムで使用する場合とほぼ同じ方法でコンパイルされています。コンパイル時の設定は、SQLiteの本番システムでの使用方法がそれぞれ異なるという意味で「近似的」です。あるシステムで使用されているコンパイル時のオプションは、他のシステムで使用されているものと必ずしも同じではありません。重要なのは、生成されるマシンコードに大きな影響を与えるオプションは避けるということです。例えば、-DSQLITE_DEBUG オプションは、SQLite ライブラリのパフォーマンスが重要なセクションの途中で何千もの assert()文を挿入してしまうため、省略されています。pg オプション (GCC 上)は省略されています。これは、実際のパフォーマンス測定を妨げる確率的なパフォーマンス測定コードを余分に出力する原因となるためです。</target>
        </trans-unit>
        <trans-unit id="f448cd989ab34ec0bc46f3d775e49bf2cb96fd96" translate="yes" xml:space="preserve">
          <source>For performance measurements, the -Os option is used (optimize for size) rather than -O2 because the -O2 option creates so much code movement that it is difficult to associate specific CPU instructions to C source code lines.</source>
          <target state="translated">パフォーマンス測定では、-O2ではなく-Osオプション(サイズの最適化)が使用されます。</target>
        </trans-unit>
        <trans-unit id="5c184bd0f5295912e4ff3123f4057a4db6895161" translate="yes" xml:space="preserve">
          <source>For performance reasons, it is advantageous to &lt;b&gt;minimize the quantity of data read and written&lt;/b&gt; to and from the file-system.</source>
          <target state="translated">パフォーマンス上の理由から、ファイルシステムとの間で&lt;b&gt;読み書きさ&lt;/b&gt;れる&lt;b&gt;データの量&lt;/b&gt;を&lt;b&gt;最小限に抑える&lt;/b&gt;と有利です。</target>
        </trans-unit>
        <trans-unit id="07b863ed3fe569c9ef5b6a594040618449a6d03c" translate="yes" xml:space="preserve">
          <source>For programs that have a lot of data that must be sifted and sorted in diverse ways, it is often easier and quicker to load the data into an in-memory SQLite database and use queries with joins and ORDER BY clauses to extract the data in the form and order needed rather than to try to code the same operations manually. Using an SQL database internally in this way also gives the program greater flexibility since new columns and indices can be added without having to recode every query.</source>
          <target state="translated">多種多様な方法でふるいにかけたり並べ替えたりしなければならない大量のデータを持つプログラムでは、同じ操作を手動でコーディングするよりも、インメモリのSQLiteデータベースにデータをロードし、結合やORDER BY句を使用したクエリを使用して、必要な形式や順序でデータを抽出した方が、より簡単かつ迅速にデータを取得できることがよくあります。また、この方法で内部的にSQLデータベースを使用することで、新しいカラムやインデックスを追加しても、すべてのクエリを再コード化する必要がないため、プログラムの柔軟性が向上します。</target>
        </trans-unit>
        <trans-unit id="9dd6714e0fb0a2d212f83820882b4bc1eae38324" translate="yes" xml:space="preserve">
          <source>For queries that use OR expressions, or those that use LIMIT or return many rows, the 'y' matchinfo option may be faster than 'x'.</source>
          <target state="translated">OR式を使用するクエリ、LIMITを使用するクエリ、または多数の行を返すクエリでは、'y' matchinfoオプションの方が'x'よりも高速な場合があります。</target>
        </trans-unit>
        <trans-unit id="0c9ccc0a52d5200b9388c921b60acbab7d6fb34e" translate="yes" xml:space="preserve">
          <source>For queries, extract results by calling &lt;a href=&quot;c3ref/column_blob&quot;&gt;sqlite3_column()&lt;/a&gt; in between two calls to &lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step()&lt;/a&gt;.</source>
          <target state="translated">クエリの、発呼による抽出結果&lt;a href=&quot;c3ref/column_blob&quot;&gt;sqlite3_column（）&lt;/a&gt;への2回の呼び出しの間に&lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step（） &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="85d9929e5f003ec622c68d9ac564cf73c6c4c155" translate="yes" xml:space="preserve">
          <source>For reading existing zip archives, the Zipfile module provides a &lt;a href=&quot;vtab#tabfunc2&quot;&gt;table-valued function&lt;/a&gt; that accepts a single argument. If the argument is a text value, then it is a path to a zip archive to read from the file-system. Or, if the argument is an SQL blob, then it is the zip archive data itself.</source>
          <target state="translated">既存のzipアーカイブを読み取るために、Zipfileモジュールは、単一の引数を受け入れる&lt;a href=&quot;vtab#tabfunc2&quot;&gt;テーブル値関数&lt;/a&gt;を提供します。引数がテキスト値の場合は、ファイルシステムから読み取るzipアーカイブへのパスです。または、引数がSQL blobの場合、それはzipアーカイブデータ自体です。</target>
        </trans-unit>
        <trans-unit id="9867027f324defd1a582c5a9d9007cb8936fd6ce" translate="yes" xml:space="preserve">
          <source>For reasons of backwards compatibility, the &quot;automerge=1&quot; command sets the automerge parameter to 8, not 1 (a value of 1 would make no sense anyway, as merging data from a single segment is a no-op).</source>
          <target state="translated">後方互換性の理由から、&quot;automerge=1 &quot;コマンドはautomergeパラメータを1ではなく8に設定しています(1という値は、1つのセグメントからデータをマージすることができないため、どちらにしても意味がありません)。</target>
        </trans-unit>
        <trans-unit id="a23d1c74ece13b6a1e6d02aa92a4e6d015b8a626" translate="yes" xml:space="preserve">
          <source>For regular functions, the &lt;b&gt;xFunc&lt;/b&gt; callback is invoked once for each function call. The implementation of xFunc should call one of the &lt;b&gt;sqlite_set_result_...&lt;/b&gt; interfaces to return its result. The &lt;b&gt;sqlite_user_data()&lt;/b&gt; routine can be used to retrieve the &lt;b&gt;pUserData&lt;/b&gt; pointer that was passed in when the function was registered.</source>
          <target state="translated">通常の関数の場合、&lt;b&gt;xFunc&lt;/b&gt;コールバックは関数呼び出しごとに1回呼び出されます。xFuncの実装は、&lt;b&gt;sqlite_set_result _...&lt;/b&gt;インターフェースの1つを呼び出して、その結果を返す&lt;b&gt;必要があります&lt;/b&gt;。&lt;b&gt;sqlite_user_data（）&lt;/b&gt;ルーチンは、取得するために使用することができ&lt;b&gt;pUserDataの&lt;/b&gt;機能が登録されたときに渡されたポインタを。</target>
        </trans-unit>
        <trans-unit id="d0ed67ff8b79adf22c16c2b1f3556a389aea4a01" translate="yes" xml:space="preserve">
          <source>For resilience when confronted with historical SQL statements, SQLite will sometimes bend the quoting rules above:</source>
          <target state="translated">歴史的なSQL文に直面したときの回復力のために、SQLiteは時に上記の引用規則を曲げてしまうことがあります。</target>
        </trans-unit>
        <trans-unit id="e7eae9c3102a4115cf6fa58568800e787b48e7a4" translate="yes" xml:space="preserve">
          <source>For security reasons, extension loaded is turned off by default and must be enabled by a prior call to &lt;a href=&quot;c3ref/enable_load_extension&quot;&gt;sqlite3_enable_load_extension()&lt;/a&gt;.</source>
          <target state="translated">セキュリティ上の理由から、ロードされた拡張機能はデフォルトでオフになっており、事前の&lt;a href=&quot;c3ref/enable_load_extension&quot;&gt;sqlite3_enable_load_extension（）の&lt;/a&gt;呼び出しで有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="c4880044a5796d62d55405bede28ef5f4f52805b" translate="yes" xml:space="preserve">
          <source>For security reasons, extension loading is turned off by default. In order to use either the C-language or SQL extension loading functions, one must first enable extension loading using the &lt;a href=&quot;c3ref/db_config&quot;&gt;sqlite3_db_config&lt;/a&gt;(db,&lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigenableloadextension&quot;&gt;SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION&lt;/a&gt;,1,NULL) C-language API in your application.</source>
          <target state="translated">セキュリティ上の理由から、拡張機能のロードはデフォルトでオフになっています。C言語またはSQL拡張ロード関数を使用するには、&lt;a href=&quot;c3ref/db_config&quot;&gt;最初にアプリケーションでsqlite3_db_config&lt;/a&gt;（db、&lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigenableloadextension&quot;&gt;SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION&lt;/a&gt;、1、NULL）C言語API を使用して拡張ロードを有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="92cbc8f2d6b97260523c5a56f27aa3c653ce65fe" translate="yes" xml:space="preserve">
          <source>For signed numeric substitutions, include a &quot;+&quot; sign before positive numbers. A &quot;-&quot; sign always appears before negative numbers regardless of flag settings.</source>
          <target state="translated">符号付き数値置換の場合は、正の数値の前に &quot;+&quot;記号を入れます。フラグの設定に関わらず、負の数値の前には常に&quot;-&quot;記号が表示されます。</target>
        </trans-unit>
        <trans-unit id="0a389ef1f84e1f5ea12705422f16f304415d7e84" translate="yes" xml:space="preserve">
          <source>For signed numeric substitutions, prepend a single space before positive numbers.</source>
          <target state="translated">符号付き数値置換の場合は、正の数の前にスペースを1つ挿入します。</target>
        </trans-unit>
        <trans-unit id="8361cfb2d567750344a1d16c228e8f02d706a6ad" translate="yes" xml:space="preserve">
          <source>For simple queries against a single table with few indexes, there is usually an obvious choice for the best algorithm. But for larger and more complex queries, such as multi-way joins with many indexes and subqueries, there can be hundreds, thousands, or millions of reasonable algorithms for computing the result. The job of the query planner is to choose the single &quot;best&quot; query plan from this multitude of possibilities.</source>
          <target state="translated">インデックスの少ない単一のテーブルに対する単純なクエリでは、通常、最適なアルゴリズムの選択は明白です。しかし、多数のインデックスや副問い合わせを含む多元結合のような大規模で複雑な問い合わせでは、結果を計算するための合理的なアルゴリズムが何百、何千、何百万も存在することがあります。クエリプランナの仕事は、このような多数の可能性の中から、単一の「最良の」クエリプランを選択することです。</target>
        </trans-unit>
        <trans-unit id="a9d77b186d3d3bf7ae8219371bcb8b76fedae519" translate="yes" xml:space="preserve">
          <source>For small databases and modern CPUs, there is usually no reason not to pass &quot;--sample 100&quot;. However, gathering data distribution statistics can be expensive for large database tables. If the operation is too slow, try passing a smaller value for the --sample option.</source>
          <target state="translated">小規模なデータベースや最新のCPUの場合、通常は&quot;-sample 100 &quot;を渡さない理由はありません。しかし、データの分布統計を収集するのは、大規模なデータベーステーブルではコストがかかる場合があります。操作が遅すぎる場合は、-sampleオプションに小さな値を渡してみてください。</target>
        </trans-unit>
        <trans-unit id="a4a24ddee4d5daf8ddd5ba8dfd7d48787ebb03b7" translate="yes" xml:space="preserve">
          <source>For string substitutions (%s, %z, %q, %Q, or %w) the precision is the number of byte or character used from the argument. The number is bytes by default but is characters if the &quot;!&quot; flag is present. If there is no precision, then the entire string is substituted. Examples: &quot;%.3s&quot; substitutes the first 3 bytes of the argument string. &quot;%!.3s&quot; substitutes the first three characters of the argument string.</source>
          <target state="translated">文字列置換 (%s,%z,%q,%Q,または %w)の場合、精度は引数から使用されるバイト数または文字数です。既定ではバイト数ですが、&quot;!&quot; フラグがある場合は文字数になります。精度がない場合は、文字列全体が置換されます。例)&quot;%.3s &quot;は、文字列全体を置換します。&quot;%.3s&quot; は、引数文字列の最初の3バイトを置換します。&quot;%!3s&quot; は、引数文字列の最初の 3 文字を置換します。</target>
        </trans-unit>
        <trans-unit id="e7573ff9c5daeb6537cacfee96e59061a43495a3" translate="yes" xml:space="preserve">
          <source>For subprograms, there is a bitmask in the VdbeFrame that determines whether or not the jump should be taken. The bitmask is necessary because the self-altering code trick does not work for recursive triggers.</source>
          <target state="translated">サブプログラムの場合、VdbeFrameには、ジャンプを取るべきかどうかを決定するビットマスクがあります。自己変更コードのトリックは再帰的なトリガーでは機能しないので、ビットマスクは必要です。</target>
        </trans-unit>
        <trans-unit id="1ef6b92612835372e131287be2c793df5805bcf9" translate="yes" xml:space="preserve">
          <source>For table columns, the datatype is determined by the type declaration of the CREATE TABLE statement. The datatype is text if and only if the type declaration contains one or more of the following strings:</source>
          <target state="translated">テーブルの列の場合、データ型はCREATE TABLE文の型宣言によって決定されます。データ型は、型宣言が以下の文字列のうち1つ以上を含む場合にのみ、テキストです。</target>
        </trans-unit>
        <trans-unit id="7117d5cbbb5730360ccac5d30c1470b52beef293" translate="yes" xml:space="preserve">
          <source>For testing on embedded systems, the mkth3.tcl script and the compiler steps shown above are performed on an ordinary workstation using a cross-compiler, then the resulting test program is transferred onto the device to be run.</source>
          <target state="translated">組込みシステム上でのテストのために、mkth3.tclスクリプトと上記のコンパイラステップはクロスコンパイラを使って通常のワークステーション上で実行され、結果として得られたテストプログラムは実行されるデバイスに転送されます。</target>
        </trans-unit>
        <trans-unit id="d2eb4ede923268e657583d146fd6fd411d8b52aa" translate="yes" xml:space="preserve">
          <source>For the --insert command, all files listed are inserted into the archive. For the --update command, files are only inserted if they do not previously exist in the archive, or if their &quot;mtime&quot; or &quot;mode&quot; is different from what is currently in the archive.</source>
          <target state="translated">insert コマンドでは、リストされているすべてのファイルがアーカイブに挿入されます。updateコマンドでは、ファイルがアーカイブ内に存在しない場合、または &quot;mtime &quot;または &quot;mode &quot;が現在のアーカイブ内のものと異なる場合にのみ挿入されます。</target>
        </trans-unit>
        <trans-unit id="0d9d2265812b12b9762e700ccc4ceb3931ebf930" translate="yes" xml:space="preserve">
          <source>For the C-language interfaces, the argument is an integer which is interpreted as a character. For the &lt;a href=&quot;lang_corefunc#printf&quot;&gt;printf() SQL function&lt;/a&gt; the argument is a string from which the first character is extracted and displayed.</source>
          <target state="translated">C言語インターフェースの場合、引数は文字として解釈される整数です。以下のため&lt;a href=&quot;lang_corefunc#printf&quot;&gt;のprintf（）SQL関数&lt;/a&gt;の引数は、最初の文字を抽出して表示された文字列です。</target>
        </trans-unit>
        <trans-unit id="c95ceb997c597a8e6a21b33cbd1c20d5ac14d94b" translate="yes" xml:space="preserve">
          <source>For the GLOB operator, the column must be indexed using the built-in BINARY collating sequence.</source>
          <target state="translated">GLOB演算子では、組み込みのBINARY照合シーケンスを使用して列をインデックス化する必要があります。</target>
        </trans-unit>
        <trans-unit id="8b7943406433a1489b27536ff1cedb40c6a83fc4" translate="yes" xml:space="preserve">
          <source>For the LIKE operator, if &lt;a href=&quot;pragma#pragma_case_sensitive_like&quot;&gt;case_sensitive_like&lt;/a&gt; mode is enabled then the column must indexed using BINARY collating sequence, or if &lt;a href=&quot;pragma#pragma_case_sensitive_like&quot;&gt;case_sensitive_like&lt;/a&gt; mode is disabled then the column must indexed using built-in NOCASE collating sequence.</source>
          <target state="translated">LIKE演算子の場合、場合&lt;a href=&quot;pragma#pragma_case_sensitive_like&quot;&gt;case_sensitive_likeの&lt;/a&gt;モードが有効になっている、列の必見は、照合順序BINARYを使用して索引付け、または場合&lt;a href=&quot;pragma#pragma_case_sensitive_like&quot;&gt;case_sensitive_likeの&lt;/a&gt;モードが無効になっている、列の必須内蔵NOCASE照合順序使用して索引付け。</target>
        </trans-unit>
        <trans-unit id="394b73aae0d0953d9f85a4d75a67f00c2d16e226" translate="yes" xml:space="preserve">
          <source>For the SELECT statement above, the optimizer can use the ex2i1 index to lookup rows of ex2 that contain x=5 and then test each row against the y=6 term. Or it can use the ex2i2 index to lookup rows of ex2 that contain y=6 then test each of those rows against the x=5 term.</source>
          <target state="translated">上記のSELECT文では、オプティマイザはex2i1インデックスを使用してx=5を含むex2の行を検索し、各行をy=6項と比較してテストすることができます。または、ex2i2インデックスを使用して、y=6を含むex2の行を検索し、それらの各行をx=5項と比較してテストすることができます。</target>
        </trans-unit>
        <trans-unit id="6880a2956aa62196c20844c37991ebf1c9cc0265" translate="yes" xml:space="preserve">
          <source>For the character substitution (%c) a precision N greater than 1 causes the character to be repeated N times. This is a non-standard extension found only in SQLite.</source>
          <target state="translated">文字置換 (%c)では、精度 N が 1 より大きい場合、文字が N 回繰り返されます。これは、SQLite でのみ見られる非標準の拡張機能です。</target>
        </trans-unit>
        <trans-unit id="cbfa8c438ab75aa5b53746b3a61a2493fdc0fcad" translate="yes" xml:space="preserve">
          <source>For the common case where we want the busy callback to sleep, the SQLite library provides a convenience routine &lt;b&gt;sqlite_busy_timeout&lt;/b&gt;. The first argument to &lt;b&gt;sqlite_busy_timeout&lt;/b&gt; is a pointer to an open SQLite database and the second argument is a number of milliseconds. After &lt;b&gt;sqlite_busy_timeout&lt;/b&gt; has been executed, the SQLite library will wait for the lock to clear for at least the number of milliseconds specified before it returns SQLITE_BUSY. Specifying zero milliseconds for the timeout restores the default behavior.</source>
          <target state="translated">ビジーコールバックをスリープさせる一般的なケースでは、SQLiteライブラリは便利なルーチン&lt;b&gt;sqlite_busy_timeoutを&lt;/b&gt;提供します。&lt;b&gt;sqlite_busy_timeout&lt;/b&gt;の最初の引数は開いているSQLiteデータベースへのポインターで、2番目の引数はミリ秒数です。後&lt;b&gt;sqlite_busy_timeoutが&lt;/b&gt;実行された、SQLiteのライブラリーは、それがSQLITE_BUSYを返す前に、指定されたミリ秒単位の少なくとも数だけクリアするためにロックを待機します。タイムアウトにゼロミリ秒を指定すると、デフォルトの動作に戻ります。</target>
        </trans-unit>
        <trans-unit id="77995af2794868d5e3e1a545ee53f68c9abf9c9a" translate="yes" xml:space="preserve">
          <source>For the index above and WHERE clause like this:</source>
          <target state="translated">上記のようなインデックスとWHERE句の場合。</target>
        </trans-unit>
        <trans-unit id="bb541928f8f21ef53252b3fcd58c0333fdfa446f" translate="yes" xml:space="preserve">
          <source>For the most part, ordinary rowid tables and WITHOUT ROWID tables are interchangeable. But there are some additional restrictions on WITHOUT ROWID tables that do not apply to ordinary rowid tables:</source>
          <target state="translated">ほとんどの場合、通常のROWIDテーブルとWITHOUT ROWIDテーブルは互換性があります。しかし、WITHOUT ROWIDテーブルには、通常のROWIDテーブルには適用されない追加の制限がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="bee902327ddee3eaa34014db30d1eb9d18663957" translate="yes" xml:space="preserve">
          <source>For the purpose of computing window functions, the result set of a query is divided into one or more &quot;partitions&quot;. A partition consists of all rows that have the same value for all terms of the PARTITION BY clause in the window-defn. If there is no PARTITION BY clause, then the entire result set of the query is a single partition. Window-function processing is performed separately for each partition.</source>
          <target state="translated">ウィンドウ関数を計算するために、クエリの結果セットは1つ以上の「パーティション」に分割されます。パーティションは、window-defnのPARTITION BY句のすべての項で同じ値を持つすべての行から構成されます。PARTITION BY句がない場合、クエリの結果セット全体が1つのパーティションとなります。ウィンドウ関数の処理は、パーティションごとに別々に実行されます。</target>
        </trans-unit>
        <trans-unit id="b3fd877f7b6778afbc1e68eb5017d97a2b27eeb2" translate="yes" xml:space="preserve">
          <source>For the purpose of the &lt;b&gt;sqlite_complete&lt;/b&gt; function, an SQL statement is complete if it ends in a semicolon.</source>
          <target state="translated">&lt;b&gt;sqlite_complete&lt;/b&gt;関数の目的のために、SQLステートメントがセミコロンで終わっている場合、SQLステートメントは完全です。</target>
        </trans-unit>
        <trans-unit id="3bdae1911eb2b3c855db66c9e8e796a26c988410" translate="yes" xml:space="preserve">
          <source>For the purposes of determining duplicate rows for the results of compound SELECT operators, NULL values are considered equal to other NULL values and distinct from all non-NULL values. The collation sequence used to compare two text values is determined as if the columns of the left and right-hand SELECT statements were the left and right-hand operands of the equals (=) operator, except that greater precedence is not assigned to a collation sequence specified with the postfix COLLATE operator. No affinity transformations are applied to any values when comparing rows as part of a compound SELECT.</source>
          <target state="translated">複合SELECT演算子の結果の重複行を判定するために、NULL値は他のNULL値と同等であり、すべての非NULL値とは区別されます。2つのテキスト値を比較するために使用される照合順序は、左手と右手のSELECT文の列がequals (=)演算子の左手と右手のオペランドであるかのように決定されますが、後置COLLATE演算子で指定された照合順序には、より大きな優先順位は割り当てられません。複合SELECTの一部として行を比較する際には、どの値にも親和変換は適用されません。</target>
        </trans-unit>
        <trans-unit id="593804fd692754b9bd9050d15e0853bf78663ff7" translate="yes" xml:space="preserve">
          <source>For the purposes of determining validity, leading and trailing whitespace on JSON inputs is ignored. Interior whitespace is also ignored, in accordance with the JSON spec. These routines accept exactly the &lt;a href=&quot;http://www.rfc-editor.org/rfc/rfc7159.txt&quot;&gt;rfc-7159 JSON syntax&lt;/a&gt; &amp;mdash; no more and no less.</source>
          <target state="translated">有効性を判断するために、JSON入力の先頭と末尾の空白は無視されます。JSON仕様に従って、内部の空白も無視されます。これらのルーチンは、&lt;a href=&quot;http://www.rfc-editor.org/rfc/rfc7159.txt&quot;&gt;rfc-7159 JSON構文&lt;/a&gt;を正確に受け入れます &amp;mdash;それ以上でもそれ以下でもありません。</target>
        </trans-unit>
        <trans-unit id="4f71629a5f8d309dcb7934e2a9e496e90193e44f" translate="yes" xml:space="preserve">
          <source>For the purposes of sorting rows, values are compared in the same way as for &lt;a href=&quot;datatype3#comparisons&quot;&gt;comparison expressions&lt;/a&gt;. The collation sequence used to compare two text values is determined as follows:</source>
          <target state="translated">行を並べ替えるために、値は&lt;a href=&quot;datatype3#comparisons&quot;&gt;比較式&lt;/a&gt;と同じ方法で比較されます。2つのテキスト値の比較に使用される照合順序は、次のように決定されます。</target>
        </trans-unit>
        <trans-unit id="15ea441aee0df5dfef81b948679ce855bde68d24" translate="yes" xml:space="preserve">
          <source>For the purposes of the previous four items, two database connections that use the same &lt;a href=&quot;sharedcache&quot;&gt;shared cache&lt;/a&gt; and which enable &lt;a href=&quot;pragma#pragma_read_uncommitted&quot;&gt;PRAGMA read_uncommitted&lt;/a&gt; are considered to be the same database connection, not separate database connections.</source>
          <target state="translated">前の4つの項目では、同じ&lt;a href=&quot;sharedcache&quot;&gt;共有キャッシュ&lt;/a&gt;を使用し、&lt;a href=&quot;pragma#pragma_read_uncommitted&quot;&gt;PRAGMA read_uncommitted&lt;/a&gt;を有効にする2つのデータベース接続は、別々のデータベース接続ではなく、同じデータベース接続と見なされます。</target>
        </trans-unit>
        <trans-unit id="206270d8fd15072121eb3d0a56144d865640f2b5" translate="yes" xml:space="preserve">
          <source>For the purposes of the previous two paragraphs, two database connections that have the same &lt;a href=&quot;sharedcache&quot;&gt;shared cache&lt;/a&gt; and which have enabled &lt;a href=&quot;pragma#pragma_read_uncommitted&quot;&gt;PRAGMA read_uncommitted&lt;/a&gt; are considered to be the same database connection.</source>
          <target state="translated">前の2つの段落では、同じ&lt;a href=&quot;sharedcache&quot;&gt;共有キャッシュ&lt;/a&gt;を持ち、&lt;a href=&quot;pragma#pragma_read_uncommitted&quot;&gt;PRAGMA read_uncommitted&lt;/a&gt;を有効にした2つのデータベース接続は、同じデータベース接続と見なされます。</target>
        </trans-unit>
        <trans-unit id="a17e59e38b9d3bf2b2df3849089638f1437b4d1e" translate="yes" xml:space="preserve">
          <source>For the purposes of this API, a transaction is said to have been rolled back if an explicit &quot;ROLLBACK&quot; statement is executed, or an error or constraint causes an implicit rollback to occur. The rollback callback is not invoked if a transaction is automatically rolled back because the database connection is closed.</source>
          <target state="translated">本APIでは、明示的な &quot;ROLLBACK &quot;ステートメントが実行された場合、またはエラーや制約により暗黙のロールバックが発生した場合、トランザクションはロールバックされたとみなされます。データベース接続が閉じられているためにトランザクションが自動的にロールバックされた場合、ロールバックコールバックは呼び出されません。</target>
        </trans-unit>
        <trans-unit id="57f69f1f3e95239c1d08d8e626c461a431a40ba6" translate="yes" xml:space="preserve">
          <source>For the purposes of this pragma, the &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; command is considered a schema change, since &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; will usual alter the &quot;rootpage&quot; values for entries in the &lt;a href=&quot;fileformat2#sqlite_master&quot;&gt;sqlite_master table&lt;/a&gt;.</source>
          <target state="translated">このプラグマでは、&lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt;コマンドは通常、スキーマの変更と見なされます。これは、&lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt;は通常、&lt;a href=&quot;fileformat2#sqlite_master&quot;&gt;sqlite_masterテーブルの&lt;/a&gt;エントリの「ルートページ」値を変更するためです。</target>
        </trans-unit>
        <trans-unit id="4e03b6c7391fbf0bc56188a8c09cd4a7c0b4cdfb" translate="yes" xml:space="preserve">
          <source>For the purposes of this routine, an &lt;a href=&quot;../lang_insert&quot;&gt;INSERT&lt;/a&gt; is considered to be successful even if it is subsequently rolled back.</source>
          <target state="translated">このルーチンの目的上、&lt;a href=&quot;../lang_insert&quot;&gt;INSERT&lt;/a&gt;は、後でロールバックされた場合でも成功したと見なされます。</target>
        </trans-unit>
        <trans-unit id="4c58e719af76025bd3937a17763f87efc5e13c1f" translate="yes" xml:space="preserve">
          <source>For the purposes of this routine, an &lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt; is considered to be successful even if it is subsequently rolled back.</source>
          <target state="translated">このルーチンの目的上、&lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt;は、後でロールバックされた場合でも成功したと見なされます。</target>
        </trans-unit>
        <trans-unit id="713e891998daa01c37d2616d81cfb2bf2962ac1e" translate="yes" xml:space="preserve">
          <source>For the right-hand table of a LEFT JOIN, compute the values of expressions directly rather than loading precomputed values out of an &lt;a href=&quot;expridx&quot;&gt;expression index&lt;/a&gt; as the expression index might not contain the correct value. Ticket &lt;a href=&quot;https://sqlite.org/src/info/7fa8049685b50b5aeb0c2&quot;&gt;7fa8049685b50b5aeb0c2&lt;/a&gt;</source>
          <target state="translated">LEFT JOINの右側のテーブルでは、&lt;a href=&quot;expridx&quot;&gt;式のインデックス&lt;/a&gt;に正しい値が含まれていない可能性があるため、式のインデックスから事前に計算された値を読み込むのではなく、式の値を直接計算します。チケット&lt;a href=&quot;https://sqlite.org/src/info/7fa8049685b50b5aeb0c2&quot;&gt;7fa8049685b50b5aeb0c2&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5c9ca201b99a3489f4b36f53a1d0536e05b123a3" translate="yes" xml:space="preserve">
          <source>For the second case, when the table already exists, every row of the CSV file, including the first row, is assumed to be actual content. If the CSV file contains an initial row of column labels, that row will be read as data and inserted into the table. To avoid this, make sure that table does not previously exist.</source>
          <target state="translated">2つ目のケースでは、テーブルが既に存在する場合、最初の行を含むCSVファイルの全行が実際の内容であると仮定します。CSV ファイルに列ラベルの最初の行が含まれている場合、その行はデータとして読み込まれてテーブルに挿入されます。これを避けるためには、テーブルが既に存在していないことを確認してください。</target>
        </trans-unit>
        <trans-unit id="814f69ac0546d66f0db75207e5064bf283a12829" translate="yes" xml:space="preserve">
          <source>For these reasons, many complex queries may use less memory and run faster using FTS5.</source>
          <target state="translated">これらの理由から、多くの複雑なクエリでは、FTS5を使用することで、より少ないメモリ使用量で、より高速に実行される可能性があります。</target>
        </trans-unit>
        <trans-unit id="7fe943bac7177b3cc26bc016acdb488812414486" translate="yes" xml:space="preserve">
          <source>For these substitutions, the precision is the number of bytes or characters taken from the argument, not the number of bytes or characters that are written into the output.</source>
          <target state="translated">これらの置換では、精度は引数から取り出されるバイト数や文字数であり、出力に書き込まれるバイト数や文字数ではありません。</target>
        </trans-unit>
        <trans-unit id="ddecb7fc6ac9ebf678a969f318e2c93050dc15ef" translate="yes" xml:space="preserve">
          <source>For this first experiment, nothing else about the file format is changed. The OpenDocument is still a pile-of-files, only now each file is a row in an SQLite database rather than an entry in a ZIP archive. This simple change does not use the power of a relational database. Even so, this simple change shows some improvements.</source>
          <target state="translated">この最初の実験では、ファイル形式については何も変更していません。OpenDocument は相変わらずファイルの山ですが、各ファイルは ZIP アーカイブのエントリではなく、SQLite データベースの行になっています。この単純な変更では、リレーショナルデータベースの力は使われていません。それでも、この単純な変更はいくつかの改善点を示しています。</target>
        </trans-unit>
        <trans-unit id="fbfd34ac3082b66cb73eae2395605bfffd9afee2" translate="yes" xml:space="preserve">
          <source>For this form, the &amp;lt;expr&amp;gt; does not have to be an integer. It can evaluate to a real number as long as it is constant and non-negative.</source>
          <target state="translated">この形式では、&amp;lt;expr&amp;gt;は整数である必要はありません。定数で負でない限り、実数に評価できます。</target>
        </trans-unit>
        <trans-unit id="752d2cd19688f392b69d1efc9ea4707b6423ad4e" translate="yes" xml:space="preserve">
          <source>For this particular UPDATE test, MySQL is consistently five or ten times slower than PostgreSQL and SQLite. I do not know why. MySQL is normally a very fast engine. Perhaps this problem has been addressed in later versions of MySQL.</source>
          <target state="translated">この特定のUPDATEテストでは、MySQLはPostgreSQLやSQLiteに比べて一貫して5倍も10倍も遅くなっています。その理由はわかりません。MySQLは通常、非常に高速なエンジンです。おそらく、この問題はMySQLの後のバージョンで対処されているのでしょう。</target>
        </trans-unit>
        <trans-unit id="9db0e6302461b7556c4838a4a6492fc335414fcc" translate="yes" xml:space="preserve">
          <source>For usage hints and a summary of all options, simply give the &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt; the -A option with no additional arguments:</source>
          <target state="translated">使用のヒントとすべてのオプションの概要については、追加の引数なしで&lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt;に-Aオプションを指定するだけです。</target>
        </trans-unit>
        <trans-unit id="c9239816897eb996f78a6efe04536d4eaf0b8d55" translate="yes" xml:space="preserve">
          <source>Force the value in register P1 to be an integer. If the value in P1 is not an integer and cannot be converted into an integer without data loss, then jump immediately to P2, or if P2==0 raise an SQLITE_MISMATCH exception.</source>
          <target state="translated">レジスタP1の値を強制的に整数にします。P1 の値が整数ではなく、データを失うことなく整数に変換できない場合は、直ちに P2 にジャンプするか、P2==0 の場合は SQLITE_MISMATCH 例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="e1652af1b46a8724b09c6398e58d043cf684e88e" translate="yes" xml:space="preserve">
          <source>Force the value in register P1 to be the type defined by P2.</source>
          <target state="translated">レジスタP1の値をP2で定義された型に強制的にします。</target>
        </trans-unit>
        <trans-unit id="c3788028d350f50070224e2ffa767d1574a8ab2d" translate="yes" xml:space="preserve">
          <source>Foreign Key Constraints</source>
          <target state="translated">海外キー制約</target>
        </trans-unit>
        <trans-unit id="8ea9876246ba7c653355a0ce27076bc76b4c8469" translate="yes" xml:space="preserve">
          <source>Foreign key ON DELETE and ON UPDATE clauses are used to configure actions that take place when deleting rows from the parent table (ON DELETE), or modifying the parent key values of existing rows (ON UPDATE). A single foreign key constraint may have different actions configured for ON DELETE and ON UPDATE. Foreign key actions are similar to triggers in many ways.</source>
          <target state="translated">外部キーON DELETE句とON UPDATE句は、親テーブルから行を削除したり(ON DELETE)、既存の行の親キー値を変更したり(ON UPDATE)するときに実行されるアクションを構成するために使用されます。単一の外部キー制約は、ON DELETEとON UPDATEに対して異なるアクションを構成することができます。外部キーアクションは、多くの点でトリガーに似ています。</target>
        </trans-unit>
        <trans-unit id="474365badbb1f3b57e5eb366037b4f712db8f5d1" translate="yes" xml:space="preserve">
          <source>Foreign key actions</source>
          <target state="translated">海外のキーアクション</target>
        </trans-unit>
        <trans-unit id="d3465e4f63b19b36c358f39673e35fd218b96287" translate="yes" xml:space="preserve">
          <source>Foreign key constraints are disabled by default (for backwards compatibility), so must be enabled separately for each &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt;. (Note, however, that future releases of SQLite might change so that foreign key constraints enabled by default. Careful developers will not make any assumptions about whether or not foreign keys are enabled by default but will instead enable or disable them as necessary.) The application can also use a &lt;a href=&quot;pragma#pragma_foreign_keys&quot;&gt;PRAGMA foreign_keys&lt;/a&gt; statement to determine if foreign keys are currently enabled. The following command-line session demonstrates this:</source>
          <target state="translated">外部キー制約はデフォルトで無効になっているため（下位互換性のため）、&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続&lt;/a&gt;ごとに個別に有効にする必要があります。（ただし、SQLiteの将来のリリースでは、外部キー制約がデフォルトで有効になるように変更される可能性があります。注意深く開発者は、外部キーがデフォルトで有効かどうかについては想定せず、必要に応じて外部キーを有効または無効にします。）アプリケーションは、&lt;a href=&quot;pragma#pragma_foreign_keys&quot;&gt;PRAGMA foreign_keys&lt;/a&gt;ステートメントを使用して、外部キーが現在有効になっているかどうかを判別することもできます。次のコマンドラインセッションは、これを示しています。</target>
        </trans-unit>
        <trans-unit id="fadb49ecb31870fa195b79a63507d69332246c87" translate="yes" xml:space="preserve">
          <source>Foreign key constraints are enabled</source>
          <target state="translated">外部キー制約が有効</target>
        </trans-unit>
        <trans-unit id="ce28942b103c42389428127f519c6795e562c011" translate="yes" xml:space="preserve">
          <source>Format 1 is understood by all versions of SQLite back to &lt;a href=&quot;https://sqlite.org/releaselog/3_0_0.html&quot;&gt;version 3.0.0&lt;/a&gt; (2004-06-18).</source>
          <target state="translated">形式1は、SQLiteのすべてのバージョンで認識され、バージョン&lt;a href=&quot;https://sqlite.org/releaselog/3_0_0.html&quot;&gt;3.0.0&lt;/a&gt;（2004-06-18）に戻ります。</target>
        </trans-unit>
        <trans-unit id="bb846b850c6fa3ff33f8d13f455d688d28aa22d8" translate="yes" xml:space="preserve">
          <source>Format 2 adds the ability of rows within the same table to have a varying number of columns, in order to support the &lt;a href=&quot;lang_altertable&quot;&gt;ALTER TABLE ... ADD COLUMN&lt;/a&gt; functionality. Support for reading and writing format 2 was added in SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_1_3.html&quot;&gt;version 3.1.3&lt;/a&gt; on 2005-02-20.</source>
          <target state="translated">形式2は、&lt;a href=&quot;lang_altertable&quot;&gt;ALTER TABLE ... ADD COLUMN&lt;/a&gt;機能をサポートするために、同じテーブル内の行がさまざまな数の列を持つ機能を追加します。2005-02-20のSQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_1_3.html&quot;&gt;バージョン3.1.3&lt;/a&gt;では、フォーマット2の読み取りと書き込みのサポートが追加されました。</target>
        </trans-unit>
        <trans-unit id="e74a0202e30c00da07d8e3f647ad619d797750ee" translate="yes" xml:space="preserve">
          <source>Format 3 adds the ability of extra columns added by &lt;a href=&quot;lang_altertable&quot;&gt;ALTER TABLE ... ADD COLUMN&lt;/a&gt; to have non-NULL default values. This capability was added in SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_1_4.html&quot;&gt;version 3.1.4&lt;/a&gt; on 2005-03-11.</source>
          <target state="translated">形式3は、&lt;a href=&quot;lang_altertable&quot;&gt;ALTER TABLE ... ADD COLUMN&lt;/a&gt;によって追加された追加の列がNULL以外のデフォルト値を持つ機能を追加します。この機能は、2005-03-11のSQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_1_4.html&quot;&gt;バージョン3.1.4&lt;/a&gt;で追加されました。</target>
        </trans-unit>
        <trans-unit id="6f87214a5c89d4a264dcabc8b3ff76d0ecb7e6ab" translate="yes" xml:space="preserve">
          <source>Format 4 causes SQLite to respect the &lt;a href=&quot;lang_createindex#descidx&quot;&gt;DESC keyword&lt;/a&gt; on index declarations. (The DESC keyword is ignored in indexes for formats 1, 2, and 3.) Format 4 also adds two new boolean record type values (&lt;a href=&quot;fileformat2#serialtype&quot;&gt;serial types&lt;/a&gt; 8 and 9). Support for format 4 was added in SQLite 3.3.0 on 2006-01-10.</source>
          <target state="translated">形式4では、SQLite はインデックス宣言の&lt;a href=&quot;lang_createindex#descidx&quot;&gt;DESCキーワード&lt;/a&gt;を尊重します。（DESCキーワードは、フォーマット1、2、および3のインデックスでは無視されます。）フォーマット4は、2つの新しいブールレコードタイプ値（&lt;a href=&quot;fileformat2#serialtype&quot;&gt;シリアルタイプ&lt;/a&gt; 8および9）も追加します。フォーマット4のサポートは、2006-01-10のSQLite 3.3.0で追加されました。</target>
        </trans-unit>
        <trans-unit id="d2e4ea8f983e7648b4500b3c2517f1581f43edb0" translate="yes" xml:space="preserve">
          <source>Formats 2 through 10 may be optionally followed by a timezone indicator of the form &quot;</source>
          <target state="translated">フォーマット2から10は、オプションで &quot;の形式のタイムゾーンインジケータが続くことがあります。</target>
        </trans-unit>
        <trans-unit id="ff2a0eb4d03de61d70053787eab6804fcec445da" translate="yes" xml:space="preserve">
          <source>Formatted String Printing Functions</source>
          <target state="translated">整形済み文字列印刷機能</target>
        </trans-unit>
        <trans-unit id="73cdbab7825af4beabbe4e8fccce8b346886e89f" translate="yes" xml:space="preserve">
          <source>Fossil gives me peace of mind that I have everything ... synced to the server with a single command.... I never get this peace of mind with git.</source>
          <target state="translated">Fossil を使うと、コマンドひとつですべてがサーバーに同期されているという安心感があります...。gitではこんな安心感は得られません。</target>
        </trans-unit>
        <trans-unit id="968f45bf8ccf7ca67b780b2bdd22df3354350003" translate="yes" xml:space="preserve">
          <source>Fossil is a completely stand-alone program, so install it simply by putting the &quot;fossil&quot; or &quot;fossil.exe&quot; executable someplace on your $PATH or %PATH%. After you have Fossil installed, do this:</source>
          <target state="translated">Fossilは完全にスタンドアロンのプログラムなので、&quot;fossil &quot;または &quot;fossil.exe &quot;実行ファイルを$PATHまたは%PATH%のどこかに置いてインストールしてください。Fossilをインストールしたら、次のようにします。</target>
        </trans-unit>
        <trans-unit id="94257cd970f113fc11ecc5cc6011f7bfff67e319" translate="yes" xml:space="preserve">
          <source>Fossil is easy to install and use. Here are the steps for unix. (Windows is similar.)</source>
          <target state="translated">フォッシルは簡単にインストールして使えます。以下はunixの手順です。(Windowsも同様です。)</target>
        </trans-unit>
        <trans-unit id="233904fc6b6c8ee70d33af66e4cb04bfc0af5c1f" translate="yes" xml:space="preserve">
          <source>Fossil vs. Git</source>
          <target state="translated">フォッシル vs.Git</target>
        </trans-unit>
        <trans-unit id="bbba84135de6b052c2210e74e0cc5b2a9d359ddb" translate="yes" xml:space="preserve">
          <source>Found</source>
          <target state="translated">Found</target>
        </trans-unit>
        <trans-unit id="a9521a3d73988a064707ebf1e7a52b3d8155b49c" translate="yes" xml:space="preserve">
          <source>Frame boundary</source>
          <target state="translated">フレーム境界</target>
        </trans-unit>
        <trans-unit id="77433082b8e51b0f02140d5bb2ad80c6960db0b1" translate="yes" xml:space="preserve">
          <source>Frame type</source>
          <target state="translated">フレームタイプ</target>
        </trans-unit>
        <trans-unit id="6e84d556b35797f261b67f9c140d77ba6a16046e" translate="yes" xml:space="preserve">
          <source>Free Memory Used By A Database Connection</source>
          <target state="translated">データベース接続で使用されるフリーメモリ</target>
        </trans-unit>
        <trans-unit id="c3f00513ee103316a9c102f8d540f97f3d93a05d" translate="yes" xml:space="preserve">
          <source>Freelist leaf pages contain no information. SQLite avoids reading or writing freelist leaf pages in order to reduce disk I/O.</source>
          <target state="translated">フリーリストのリーフページには何の情報も含まれていません。SQLite はディスクの I/O を減らすために、フリーリストのリーフページを読み書きしないようにしています。</target>
        </trans-unit>
        <trans-unit id="71c292b702c9c6ddbea2af4ccdda270456dc5dd4" translate="yes" xml:space="preserve">
          <source>Frequent inserts, updates, and deletes can cause the database file to become fragmented - where data for a single table or index is scattered around the database file. Running VACUUM ensures that each table and index is largely stored contiguously within the database file. In some cases, VACUUM may also reduce the number of partially filled pages in the database, reducing the size of the database file further.</source>
          <target state="translated">頻繁に挿入、更新、削除を行うと、データベースファイルが断片化し、単一のテーブルやインデックスのデータがデータベースファイル内に散らばってしまうことがあります。VACUUMを実行することで、各テーブルとインデックスがデータベースファイル内でほぼ連続して保存されるようになります。場合によっては、VACUUMは、データベース内の部分的に充填されたページの数を減らし、データベースファイルのサイズをさらに縮小することもあります。</target>
        </trans-unit>
        <trans-unit id="d790b402d79ac1a723c790313bcd679999474630" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions</source>
          <target state="translated">よくある質問</target>
        </trans-unit>
        <trans-unit id="4dca8789d725335eabc320e5fd334c48abe46050" translate="yes" xml:space="preserve">
          <source>From the &lt;a href=&quot;cli&quot;&gt;command-line shell&lt;/a&gt;, extensions can be loaded using the &quot;.load&quot; dot-command. For example:</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;コマンドラインシェル&lt;/a&gt;から、「。load」ドットコマンドを使用して拡張機能をロードできます。例えば：</target>
        </trans-unit>
        <trans-unit id="9622d74f0a066cde3991b933210f9d9f6547b468" translate="yes" xml:space="preserve">
          <source>From the point of view of a single process, a database file can be in one of five locking states:</source>
          <target state="translated">単一プロセスの観点から見ると、データベースファイルは5つのロック状態のうちの1つになります。</target>
        </trans-unit>
        <trans-unit id="f2bf6ce9c451768f240ac82fe10e69d266839161" translate="yes" xml:space="preserve">
          <source>From the point of view of the uppers layers of the SQLite stack, each open database file uses exactly one VFS. But in practice, a particular VFS might just be a thin wrapper around another VFS that does the real work. We call a wrapper VFS a &quot;shim&quot;.</source>
          <target state="translated">SQLite スタックの上位レイヤの観点から見ると、各オープンデータベースファイルは正確に一つの VFS を使用しています。しかし実際には、ある特定のVFSは、実際の作業を行う別のVFSの薄いラッパーに過ぎないかもしれません。このようなラッパーVFSを「シム」と呼んでいます。</target>
        </trans-unit>
        <trans-unit id="b51b364d89abfa3baa92bcc31eb6e45de7419ef6" translate="yes" xml:space="preserve">
          <source>From the users point of view, FTS tables are similar to ordinary SQLite tables in many ways. Data may be added to, modified within and removed from FTS tables using the INSERT, UPDATE and DELETE commands just as it may be with ordinary tables. Similarly, the SELECT command may be used to query data. The following list summarizes the differences between FTS and ordinary tables:</source>
          <target state="translated">ビューのユーザーの観点から、FTSテーブルは、多くの点で通常のSQLiteテーブルに似ています。データは、通常のテーブルと同様にINSERT、UPDATE、DELETEコマンドを使用して、FTSテーブルに追加、変更、削除することができます。同様に、SELECTコマンドを使用してデータを問い合わせることができます。以下のリストは、FTSテーブルと通常のテーブルの違いをまとめたものです。</target>
        </trans-unit>
        <trans-unit id="27c4a8e9b8642a933f67723d0e4be1b9a0f44d80" translate="yes" xml:space="preserve">
          <source>From this we get the following output</source>
          <target state="translated">この結果、次のような出力が得られます。</target>
        </trans-unit>
        <trans-unit id="2180268f2a9a9fda782b57bf8e01a18a029a7a96" translate="yes" xml:space="preserve">
          <source>Fulfill God's commandments daily in your deeds.</source>
          <target state="translated">あなたの行いの中で、毎日神の戒めを満たしてください。</target>
        </trans-unit>
        <trans-unit id="b471a096b84cc0494684e033a051e31af5d4baaa" translate="yes" xml:space="preserve">
          <source>Fulfill not the desires of the flesh; hate your own will.</source>
          <target state="translated">肉の欲望を満たすのではなく、自分の意志を憎みなさい。</target>
        </trans-unit>
        <trans-unit id="c55154da9bee9185f44dff21df8abc2c3aabdcae" translate="yes" xml:space="preserve">
          <source>Full unicode case folding is supported in SQLite if it is compiled with the &lt;a href=&quot;compile#enable_icu&quot;&gt;-DSQLITE_ENABLE_ICU&lt;/a&gt; option and linked against the &lt;a href=&quot;http://site.icu-project.org/&quot;&gt;International Components for Unicode&lt;/a&gt; library.</source>
          <target state="translated">&lt;a href=&quot;compile#enable_icu&quot;&gt;-DSQLITE_ENABLE_ICU&lt;/a&gt;オプションを使用してコンパイルされ、&lt;a href=&quot;http://site.icu-project.org/&quot;&gt;International Components for Unicode&lt;/a&gt;ライブラリに対してリンクされている場合、完全なUnicodeの大文字小文字変換がSQLiteでサポートされます。</target>
        </trans-unit>
        <trans-unit id="90b0c8025a15a6f38263adcf72861e6ab67a9305" translate="yes" xml:space="preserve">
          <source>Full-Featured SQL</source>
          <target state="translated">フル機能のSQL</target>
        </trans-unit>
        <trans-unit id="9e0f1c37b71547a59fac0e69533c4df840ff38fe" translate="yes" xml:space="preserve">
          <source>Full-Text Search</source>
          <target state="translated">フルテキスト検索</target>
        </trans-unit>
        <trans-unit id="369603a7ebe96771eca2b1d07435e9996bd963f3" translate="yes" xml:space="preserve">
          <source>Full-text search</source>
          <target state="translated">全文検索</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="9365da4d7427ae049cd7228599ffdbf56ca765df" translate="yes" xml:space="preserve">
          <source>Function &lt;a href=&quot;c3ref/backup_finish#sqlite3backupfinish&quot;&gt;sqlite3_backup_finish()&lt;/a&gt; is called to clean up resources allocated by &lt;a href=&quot;c3ref/backup_finish#sqlite3backupinit&quot;&gt;sqlite3_backup_init()&lt;/a&gt;.</source>
          <target state="translated">関数&lt;a href=&quot;c3ref/backup_finish#sqlite3backupfinish&quot;&gt;sqlite3_backup_finish（）&lt;/a&gt;は、&lt;a href=&quot;c3ref/backup_finish#sqlite3backupinit&quot;&gt;sqlite3_backup_init（）&lt;/a&gt;によって割り当てられたリソースをクリーンアップするために呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6ee739a58d0601e439d67d32ce677eb6f284f6f0" translate="yes" xml:space="preserve">
          <source>Function &lt;a href=&quot;c3ref/backup_finish#sqlite3backupinit&quot;&gt;sqlite3_backup_init()&lt;/a&gt; is called to create an &lt;a href=&quot;c3ref/backup&quot;&gt;sqlite3_backup&lt;/a&gt; object to copy data between the two databases (either from a file and into the in-memory database, or vice-versa).</source>
          <target state="translated">関数&lt;a href=&quot;c3ref/backup_finish#sqlite3backupinit&quot;&gt;sqlite3_backup_init（）&lt;/a&gt;が呼び出されて、2つのデータベース間でデータをコピーする&lt;a href=&quot;c3ref/backup&quot;&gt;sqlite3_backup&lt;/a&gt;オブジェクトを作成します（ファイルからメモリ内データベースへ、またはその逆）。</target>
        </trans-unit>
        <trans-unit id="3518bc62cbd77290edb8df852902f3d26b669db7" translate="yes" xml:space="preserve">
          <source>Function &lt;a href=&quot;c3ref/backup_finish#sqlite3backupinit&quot;&gt;sqlite3_backup_init()&lt;/a&gt; is called to create an &lt;a href=&quot;c3ref/backup&quot;&gt;sqlite3_backup&lt;/a&gt; object to copy data from database pDb to the backup database file identified by zFilename.</source>
          <target state="translated">関数&lt;a href=&quot;c3ref/backup_finish#sqlite3backupinit&quot;&gt;sqlite3_backup_init（）&lt;/a&gt;が呼び出され、&lt;a href=&quot;c3ref/backup&quot;&gt;sqlite3_backup&lt;/a&gt;オブジェクトを作成して、データベースpDbからzFilenameで識別されるバックアップデータベースファイルにデータをコピーします。</target>
        </trans-unit>
        <trans-unit id="391bd2c3bef8e5815ac8dc9e143dc5e9f29edc4b" translate="yes" xml:space="preserve">
          <source>Function &lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;sqlite3_backup_step()&lt;/a&gt; is called with a parameter of 5 to copy 5 pages of database pDb to the backup database (file zFilename).</source>
          <target state="translated">関数&lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;sqlite3_backup_step（）&lt;/a&gt;がパラメーター5で呼び出され、データベースpDbの5ページをバックアップデータベース（ファイルzFilename）にコピーします。</target>
        </trans-unit>
        <trans-unit id="38d0016fe914d4211802e56c1b039ba739bf3a21" translate="yes" xml:space="preserve">
          <source>Function &lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;sqlite3_backup_step()&lt;/a&gt; is called with a parameter of &lt;code&gt;-1&lt;/code&gt; to copy the entire source database to the destination.</source>
          <target state="translated">関数&lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;sqlite3_backup_step（）&lt;/a&gt;が &lt;code&gt;-1&lt;/code&gt; のパラメーターで呼び出され、ソースデータベース全体を宛先にコピーします。</target>
        </trans-unit>
        <trans-unit id="a019467e942226e7593baeafe04451d52208ddbd" translate="yes" xml:space="preserve">
          <source>Function Auxiliary Data</source>
          <target state="translated">機能補助データ</target>
        </trans-unit>
        <trans-unit id="95b0294dd891e754097881615649b65fc6ba31c5" translate="yes" xml:space="preserve">
          <source>Function Flags</source>
          <target state="translated">関数フラグ</target>
        </trans-unit>
        <trans-unit id="17555700d9f22f47c91cbb0e6dcdac3a03a90e07" translate="yes" xml:space="preserve">
          <source>Function implementations use the following APIs to acquire context and to report results:</source>
          <target state="translated">関数の実装では、以下のAPIを使用してコンテキストを取得し、結果を報告します。</target>
        </trans-unit>
        <trans-unit id="7db899803172ac5c12cb30190a927b06044d501c" translate="yes" xml:space="preserve">
          <source>Function sqlite3_backup_step(B,N) will copy up to N pages between the source and destination databases specified by &lt;a href=&quot;#sqlite3_backup&quot;&gt;sqlite3_backup&lt;/a&gt; object B. If N is negative, all remaining source pages are copied. If sqlite3_backup_step(B,N) successfully copies N pages and there are still more pages to be copied, then the function returns &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OK&lt;/a&gt;. If sqlite3_backup_step(B,N) successfully finishes copying all pages from source to destination, then it returns &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_DONE&lt;/a&gt;. If an error occurs while running sqlite3_backup_step(B,N), then an &lt;a href=&quot;rescode&quot;&gt;error code&lt;/a&gt; is returned. As well as &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OK&lt;/a&gt; and &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_DONE&lt;/a&gt;, a call to sqlite3_backup_step() may return &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_READONLY&lt;/a&gt;, &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_NOMEM&lt;/a&gt;, &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_BUSY&lt;/a&gt;, &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_LOCKED&lt;/a&gt;, or an &lt;a href=&quot;#SQLITE_ABORT_ROLLBACK&quot;&gt;SQLITE_IOERR_XXX&lt;/a&gt; extended error code.</source>
          <target state="translated">関数sqlite3_backup_step（B、N）は、&lt;a href=&quot;#sqlite3_backup&quot;&gt;sqlite3_backup&lt;/a&gt;オブジェクトBで指定されたソースデータベースと宛先データベース間で最大Nページをコピーします。Nが負の場合、残りのすべてのソースページがコピーされます。 sqlite3_backup_step（B、N）がNページのコピーに成功しても、コピーするページがまだある場合、関数は&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OKを&lt;/a&gt;返します。 sqlite3_backup_step（B、N）がソースから宛先へのすべてのページのコピーを正常に&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;完了すると、SQLITE_DONEを&lt;/a&gt;返します。 sqlite3_backup_step（B、N）の実行中にエラーが発生した場合、エラー&lt;a href=&quot;rescode&quot;&gt;コード&lt;/a&gt;が返されます。&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OK&lt;/a&gt;と&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_DONE&lt;/a&gt;だけでなく、sqlite3_backup_step（）を呼び出すとSQLITE_READONLYが返され&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;ます&lt;/a&gt;。&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_NOMEM&lt;/a&gt;、&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_BUSY&lt;/a&gt;、&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_LOCKED&lt;/a&gt;、または&lt;a href=&quot;#SQLITE_ABORT_ROLLBACK&quot;&gt;SQLITE_IOERR_XXX&lt;/a&gt;拡張エラーコード。</target>
        </trans-unit>
        <trans-unit id="9255837a8368562d39b56b025c25a117e386acd6" translate="yes" xml:space="preserve">
          <source>Function sqlite3_backup_step(B,N) will copy up to N pages between the source and destination databases specified by &lt;a href=&quot;backup&quot;&gt;sqlite3_backup&lt;/a&gt; object B. If N is negative, all remaining source pages are copied. If sqlite3_backup_step(B,N) successfully copies N pages and there are still more pages to be copied, then the function returns &lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OK&lt;/a&gt;. If sqlite3_backup_step(B,N) successfully finishes copying all pages from source to destination, then it returns &lt;a href=&quot;../rescode#done&quot;&gt;SQLITE_DONE&lt;/a&gt;. If an error occurs while running sqlite3_backup_step(B,N), then an &lt;a href=&quot;../rescode&quot;&gt;error code&lt;/a&gt; is returned. As well as &lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OK&lt;/a&gt; and &lt;a href=&quot;../rescode#done&quot;&gt;SQLITE_DONE&lt;/a&gt;, a call to sqlite3_backup_step() may return &lt;a href=&quot;../rescode#readonly&quot;&gt;SQLITE_READONLY&lt;/a&gt;, &lt;a href=&quot;../rescode#nomem&quot;&gt;SQLITE_NOMEM&lt;/a&gt;, &lt;a href=&quot;../rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt;, &lt;a href=&quot;../rescode#locked&quot;&gt;SQLITE_LOCKED&lt;/a&gt;, or an &lt;a href=&quot;../rescode#ioerr_access&quot;&gt;SQLITE_IOERR_XXX&lt;/a&gt; extended error code.</source>
          <target state="translated">関数sqlite3_backup_step（B、N）は、&lt;a href=&quot;backup&quot;&gt;sqlite3_backup&lt;/a&gt;オブジェクトBで指定されたソースデータベースと宛先データベース間で最大Nページをコピーします。Nが負の場合、残りのすべてのソースページがコピーされます。 sqlite3_backup_step（B、N）がNページのコピーに成功しても、コピーするページがまだある場合、関数は&lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OKを&lt;/a&gt;返します。 sqlite3_backup_step（B、N）がソースから宛先へのすべてのページのコピーを正常に&lt;a href=&quot;../rescode#done&quot;&gt;完了すると、SQLITE_DONEを&lt;/a&gt;返します。 sqlite3_backup_step（B、N）の実行中にエラーが発生した場合、エラー&lt;a href=&quot;../rescode&quot;&gt;コード&lt;/a&gt;が返されます。&lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OK&lt;/a&gt;と&lt;a href=&quot;../rescode#done&quot;&gt;SQLITE_DONE&lt;/a&gt;だけでなく、sqlite3_backup_step（）を呼び出すとSQLITE_READONLYが返され&lt;a href=&quot;../rescode#readonly&quot;&gt;ます&lt;/a&gt;。&lt;a href=&quot;../rescode#nomem&quot;&gt;SQLITE_NOMEM&lt;/a&gt;、&lt;a href=&quot;../rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt;、&lt;a href=&quot;../rescode#locked&quot;&gt;SQLITE_LOCKED&lt;/a&gt;、または&lt;a href=&quot;../rescode#ioerr_access&quot;&gt;SQLITE_IOERR_XXX&lt;/a&gt;拡張エラーコード。</target>
        </trans-unit>
        <trans-unit id="02506e4ca51a17167d74a2f8b901e6d46a621915" translate="yes" xml:space="preserve">
          <source>Function sqlite3rbu_step() is called on the RBU handle until either the RBU vacuum is finished, an error occurs or the application wishes to suspend the RBU vacuum.</source>
          <target state="translated">関数sqlite3rbu_step()は、RBUのバキュームが終了するか、エラーが発生するか、アプリケーションがRBUのバキュームを中断することを望むかのいずれかになるまで、RBUハンドル上で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c29dbde42f9e09b5fa1fe9e874978bd60461ca23" translate="yes" xml:space="preserve">
          <source>Function0</source>
          <target state="translated">Function0</target>
        </trans-unit>
        <trans-unit id="885fce7082ac7fe77b80dbde8d190b12ddbee6ea" translate="yes" xml:space="preserve">
          <source>Functionality Testing</source>
          <target state="translated">機能テスト</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="5a1198fbca49df3b9353761343f6ab00ba7526e3" translate="yes" xml:space="preserve">
          <source>Functions:</source>
          <target state="translated">Functions:</target>
        </trans-unit>
        <trans-unit id="1ddc4309220e5ca80653bda487622cf643ea376d" translate="yes" xml:space="preserve">
          <source>Fundamental Datatypes</source>
          <target state="translated">基本データ型</target>
        </trans-unit>
        <trans-unit id="f728c83ebd508ddfa64fa9b670d3c24c116a1c08" translate="yes" xml:space="preserve">
          <source>Further performance improves can be made by using the &lt;a href=&quot;mmap&quot;&gt;memory-mapped I/O&lt;/a&gt; feature of SQLite. In the next chart, the entire 1GB database file is memory mapped and blobs are read (in random order) using the &lt;a href=&quot;c3ref/blob_read&quot;&gt;sqlite3_blob_read()&lt;/a&gt; interface. With these optimizations, SQLite is twice as fast as Android or MacOS-X and over 10 times faster than Windows.</source>
          <target state="translated">SQLiteの&lt;a href=&quot;mmap&quot;&gt;メモリマップI / O&lt;/a&gt;機能を使用すると、パフォーマンスをさらに向上させることができます。次のグラフでは、1GBのデータベースファイル全体がメモリマップされ、&lt;a href=&quot;c3ref/blob_read&quot;&gt;sqlite3_blob_read（）&lt;/a&gt;インターフェイスを使用してblobが（ランダムな順序で）読み取られます。これらの最適化により、SQLiteはAndroidまたはMacOS-Xの2倍、Windowsの10倍以上高速です。</target>
        </trans-unit>
        <trans-unit id="215d209e37d2a11fed7e914dfee16f71ee55be90" translate="yes" xml:space="preserve">
          <source>Further suppose that column x contains values spread out between 0 and 1,000,000 and column y contains values that span between 0 and 1,000. In that scenario, the range constraint on column x should reduce the search space by a factor of 10,000 whereas the range constraint on column y should reduce the search space by a factor of only 10. So the ex2i1 index should be preferred.</source>
          <target state="translated">さらに、列 x には 0 から 1,000,000,000 の間に広がる値が含まれ、列 y には 0 から 1,000 の間に広がる値が含まれているとします。このシナリオでは、列xの範囲制約は検索空間を10,000分の1に削減し、列yの範囲制約は検索空間を10分の1に削減しなければなりません。したがって、ex2i1インデックスが好まれるべきである。</target>
        </trans-unit>
        <trans-unit id="09aabcfb38f7cb10806136de02a602b19c076fd6" translate="yes" xml:space="preserve">
          <source>Further to keeping &lt;b&gt;n&lt;/b&gt; small, one desires to keep the size of the largest memory allocations under control. Large requests to the general-purpose memory allocator might come from several sources:</source>
          <target state="translated">さらに維持に&lt;b&gt;N&lt;/b&gt;小さい、一つは制御下最大メモリ割り当てのサイズを維持することを望みます。汎用メモリアロケータへの大きなリクエストは、いくつかのソースから送信される可能性があります。</target>
        </trans-unit>
        <trans-unit id="4a74f247651044b2313a36316a7929616b6d570a" translate="yes" xml:space="preserve">
          <source>Furthermore, a single SQLite database holding 10-kilobyte blobs uses about 20% less disk space than storing the blobs in individual files.</source>
          <target state="translated">さらに、10キロバイトのブロブを保持する1つのSQLiteデータベースは、ブロブを個々のファイルに保存するよりも約20%少ないディスク容量を使用します。</target>
        </trans-unit>
        <trans-unit id="8bd50359d3a17558a2d398e2f44b82ca134e4e80" translate="yes" xml:space="preserve">
          <source>Future releases may add new output columns and may change the order of legacy columns. Further detail about the meaning of each column in the SQLITE_STMT virtual table is provided below:</source>
          <target state="translated">今後のリリースでは、新しい出力カラムが追加されたり、従来のカラムの順序が変更される可能性があります。SQLITE_STMT 仮想テーブルの各カラムの意味についての詳細は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="6831b46470717c86c7d25cb9cedff9f9bee20302" translate="yes" xml:space="preserve">
          <source>Future releases of SQLite might enable those interfaces by default and instead offer an SQLITE_OMIT_DESERIALIZE option to leave them out.</source>
          <target state="translated">今後のSQLiteのリリースでは、これらのインターフェイスをデフォルトで有効にし、代わりにSQLITE_OMIT_DESERIALIZEオプションを提供して、これらのインターフェイスを除外することができるようになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="69eed414fd6ede90f6e232a4b640df2129c7213e" translate="yes" xml:space="preserve">
          <source>Future versions of SQLite may extend the list of errors which might cause automatic transaction rollback. Future versions of SQLite might change the error response. In particular, we may choose to simplify the interface in future versions of SQLite by causing the errors above to force an unconditional rollback.</source>
          <target state="translated">将来のバージョンの SQLite では、トランザクションの自動ロールバックを引き起こす可能性のあるエラーのリストが拡張される可能性があります。将来のバージョンのSQLiteでは、エラー応答が変更されるかもしれません。特に、将来のバージョンのSQLiteでは、上記のエラーを発生させて無条件にロールバックを強制することで、インターフェイスを簡素化することを選択するかもしれません。</target>
        </trans-unit>
        <trans-unit id="b0b58ce3a5e420ed148b6052399ca3a065dfe3cb" translate="yes" xml:space="preserve">
          <source>Future versions of SQLite might enable the batch-atomic-write capability by default, at which point this compile-time option will become superfluous.</source>
          <target state="translated">将来のバージョンの SQLite では、デフォルトで batch-atomic-write 機能が有効になるかもしれませんが、その時点ではこのコンパイル時オプションは不要になります。</target>
        </trans-unit>
        <trans-unit id="7aac4860a695a884103c23bef4fe10cea8ac21a0" translate="yes" xml:space="preserve">
          <source>Fuzz tests</source>
          <target state="translated">ファズテスト</target>
        </trans-unit>
        <trans-unit id="cbf13864eb622e042fd70afc25b332a98febed1d" translate="yes" xml:space="preserve">
          <source>GCC-7 generates binaries that are smaller and faster than GCC-5, though the difference is not that great.</source>
          <target state="translated">GCC-7はGCC-5よりも小さくて速いバイナリを生成しますが、その差はそれほど大きくありません。</target>
        </trans-unit>
        <trans-unit id="3c1c8852a41864ea17cea1296e10f38e7d36f590" translate="yes" xml:space="preserve">
          <source>GIT - Git source code repository</source>
          <target state="translated">GIT-Git ソースコードリポジトリ</target>
        </trans-unit>
        <trans-unit id="801660e770a91f34fb13ac91a9b5cbd2d98c6d3a" translate="yes" xml:space="preserve">
          <source>GLOB</source>
          <target state="translated">GLOB</target>
        </trans-unit>
        <trans-unit id="ea5a383494f81c4f464965d03bf916c41d68ced5" translate="yes" xml:space="preserve">
          <source>GROUP</source>
          <target state="translated">GROUP</target>
        </trans-unit>
        <trans-unit id="992f3cd91fffb522eba0b5e27b68c643f2967283" translate="yes" xml:space="preserve">
          <source>GROUP BY now considers NULLs to be equal again, as it should</source>
          <target state="translated">GROUP BY は、NULL を再び等しいとみなすようになりました。</target>
        </trans-unit>
        <trans-unit id="1f8969d436579977f5b13e27e290ffdb25736672" translate="yes" xml:space="preserve">
          <source>GROUPS</source>
          <target state="translated">GROUPS</target>
        </trans-unit>
        <trans-unit id="47abf252888b506642430a87f17ad2e364853ea7" translate="yes" xml:space="preserve">
          <source>GROUPS frames</source>
          <target state="translated">GROUPSフレーム</target>
        </trans-unit>
        <trans-unit id="5023fde21a93efcc45f3ef1278a03020db274d7f" translate="yes" xml:space="preserve">
          <source>Ge</source>
          <target state="translated">Ge</target>
        </trans-unit>
        <trans-unit id="5f5383c13d2f60a6733afafdeaf91505cfcc253b" translate="yes" xml:space="preserve">
          <source>Generalized ALTER TABLE procedure</source>
          <target state="translated">一般化されたALTER TABLE手続き</target>
        </trans-unit>
        <trans-unit id="200f1a824c74356136271be8f5cec761b8361890" translate="yes" xml:space="preserve">
          <source>Generalized the IS and IS NOT operators to take arbitrary expressions on their right-hand side.</source>
          <target state="translated">ISとIS NOT演算子を一般化し、任意の式を右辺で取るようにしました。</target>
        </trans-unit>
        <trans-unit id="b3419155244f27d32ab3d7f4be3add6bd08da9d5" translate="yes" xml:space="preserve">
          <source>Generally speaking, there are three separate subsystems within SQLite that can be modified or overridden at compile-time. The mutex subsystem is used to serialize access to SQLite resources that are shared among threads. The memory allocation subsystem is used to allocate memory required by SQLite objects and for the database cache. Finally, the &lt;a href=&quot;c3ref/vfs&quot;&gt;Virtual File System&lt;/a&gt; subsystem is used to provide a portable interface between SQLite and the underlying operating system and especially the file system. We call these three subsystems the &quot;interface&quot; subsystems of SQLite.</source>
          <target state="translated">一般的に言えば、SQLiteには、コンパイル時に変更またはオーバーライドできる3つの独立したサブシステムがあります。 mutexサブシステムは、スレッド間で共有されるSQLiteリソースへのアクセスをシリアル化するために使用されます。メモリ割り当てサブシステムは、SQLiteオブジェクトとデータベースキャッシュに必要なメモリを割り当てるために使用されます。最後に、&lt;a href=&quot;c3ref/vfs&quot;&gt;仮想ファイルシステム&lt;/a&gt;サブシステムを使用して、SQLiteと基盤となるオペレーティングシステム、特にファイルシステムとの間にポータブルインターフェイスを提供します。これら3つのサブシステムをSQLiteの「インターフェース」サブシステムと呼びます。</target>
        </trans-unit>
        <trans-unit id="03b11aad395b9bb3b854450c1f0acff0112439bd" translate="yes" xml:space="preserve">
          <source>Generate A Changeset From A Session Object</source>
          <target state="translated">セッションオブジェクトからチェンジセットを生成する</target>
        </trans-unit>
        <trans-unit id="771f6c81129288bd0dca35edc653f4896b8a38b9" translate="yes" xml:space="preserve">
          <source>Generate A Patchset From A Session Object</source>
          <target state="translated">セッションオブジェクトからパッチセットを生成する</target>
        </trans-unit>
        <trans-unit id="c543fcc61a656cc087657032229c13b299493cc4" translate="yes" xml:space="preserve">
          <source>Generate all multiples of 5 less than or equal to 100:</source>
          <target state="translated">100以下の5の倍数をすべて生成します。</target>
        </trans-unit>
        <trans-unit id="79e208b13cb09ea92286261229fb60357b5683cd" translate="yes" xml:space="preserve">
          <source>Generate the 20 random integer values:</source>
          <target state="translated">20個のランダムな整数値を生成します。</target>
        </trans-unit>
        <trans-unit id="46614740c9601066a8714b11664b1eb75a5a0bb4" translate="yes" xml:space="preserve">
          <source>Generating the results of a simple SELECT statement is presented as a four step process in the description below:</source>
          <target state="translated">単純なSELECT文の結果を生成することは、以下の説明では4つのステップのプロセスとして示されています。</target>
        </trans-unit>
        <trans-unit id="0060bdc4470d529ca18bce37edc0d7a0701d9b10" translate="yes" xml:space="preserve">
          <source>Geopoly</source>
          <target state="translated">Geopoly</target>
        </trans-unit>
        <trans-unit id="c4340d254981277ce14859ec23653c0dac4e3963" translate="yes" xml:space="preserve">
          <source>Geopoly operates on &quot;simple&quot; polygons - that is, polygons for which the boundary does not intersect itself. Geopoly thus extends the capabilities of the &lt;a href=&quot;rtree&quot;&gt;R-Tree extension&lt;/a&gt; which can only deal with rectangular areas. On the other hand, the &lt;a href=&quot;rtree&quot;&gt;R-Tree extension&lt;/a&gt; is able to handle between 1 and 5 coordinate dimensions, whereas Geopoly is restricted to 2-dimensional shapes only.</source>
          <target state="translated">Geopolyは「単純な」ポリゴン、つまり境界がそれ自体と交差しないポリゴンで動作します。したがって、Geopolyは、&lt;a href=&quot;rtree&quot;&gt;R-Tree拡張機能&lt;/a&gt;を拡張します。これは、長方形の領域のみを処理できます。一方、&lt;a href=&quot;rtree&quot;&gt;R-Tree拡張機能&lt;/a&gt;は1から5の座標次元を処理できますが、Geopolyは2次元の形状のみに制限されています。</target>
        </trans-unit>
        <trans-unit id="6dd9a0429b5e12a110f96aed0989c67466586ea1" translate="yes" xml:space="preserve">
          <source>Geopoly stores all polygons internally using a binary format. A binary polygon consists of a 4-byte header following by an array of coordinate pairs in which each dimension of each coordinate is a 32-bit floating point number.</source>
          <target state="translated">Geopoly は、すべてのポリゴンをバイナリ形式で内部的に保存します。バイナリポリゴンは、4バイトのヘッダと、各座標の各次元が32ビットの浮動小数点数である座標ペアの配列で構成されています。</target>
        </trans-unit>
        <trans-unit id="230fd79e9ac234b116998f305ec36a626773a0c1" translate="yes" xml:space="preserve">
          <source>Get a copy of the prebuilt binaries for your machine, or get a copy of the sources and compile them yourself. Visit the &lt;a href=&quot;https://sqlite.org/download.html&quot;&gt;download&lt;/a&gt; page for more information.</source>
          <target state="translated">マシンのビルド済みバイナリのコピーを入手するか、ソースのコピーを入手して自分でコンパイルします。詳細については、&lt;a href=&quot;https://sqlite.org/download.html&quot;&gt;ダウンロード&lt;/a&gt;ページにアクセスしてください。</target>
        </trans-unit>
        <trans-unit id="f22b4172b2caeb752e5b6845137b0e1c3132162f" translate="yes" xml:space="preserve">
          <source>Get a new integer record number (a.k.a &quot;rowid&quot;) used as the key to a table. The record number is not previously used as a key in the database table that cursor P1 points to. The new record number is written written to register P2.</source>
          <target state="translated">テーブルのキーとして使用される新しい整数のレコード番号(別名「rowid」)を取得します。このレコード番号は、カーソルP1が指し示すデータベーステーブルのキーとして以前に使用されたものではありません。新しいレコード番号はレジスタP2に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="2c8ad3eda2ae8758b9937a69c2cdf3d37bc6a82b" translate="yes" xml:space="preserve">
          <source>Get extension loading working on Cygwin.</source>
          <target state="translated">Cygwinで拡張機能の読み込みが動作するようにします。</target>
        </trans-unit>
        <trans-unit id="70d300a9221d054ecf73f3a432c241cce5538fb1" translate="yes" xml:space="preserve">
          <source>Get the SQLITE_ENABLE_LOCKING_STYLE macro working again on Mac OS X.</source>
          <target state="translated">Mac OS X で SQLITE_ENABLE_LOCKING_STYLE マクロが再び動作するようになりました。</target>
        </trans-unit>
        <trans-unit id="191ab3ffcff8c3d125f02fa19cf1b4772a774563" translate="yes" xml:space="preserve">
          <source>Get the library working correctly when compiled with GCC option &quot;-fstrict-aliasing&quot;.</source>
          <target state="translated">GCCオプション&quot;-fstrict-aliasing &quot;でコンパイルしたときに、ライブラリが正しく動作するようにしました。</target>
        </trans-unit>
        <trans-unit id="e33fe52a421a08f566920837d8eaa9b7577c26cc" translate="yes" xml:space="preserve">
          <source>Git allows you to go backwards in time easily. Given the latest check-in on a branch, Git lets you see all the ancestors of that check-in. But Git makes it difficult to move in the other direction. Given some historical check-in, it is quite challenging in Git to find out what came next. It can be done, but it is sufficiently difficult that people rarely do it. Common interfaces for Git, such as GitHub, do not support the ability.</source>
          <target state="translated">Gitを使えば、簡単に過去に遡ることができます。あるブランチの最新のチェックインが与えられると、Gitはそのチェックインのすべての先祖を見ることができます。しかし、Gitは逆方向への移動を困難にします。ある程度の歴史的なチェックインを考えると、次に何が来たのかを調べるのはGitではかなり困難です。それは可能ですが、十分に困難なので、ほとんどの人がそれをすることはありません。GitHubのようなGitの共通インターフェースは、この機能をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="b6fbc2ab6d8b00135f72a297ae81133b9c538d92" translate="yes" xml:space="preserve">
          <source>Git commands (and/or options on commands) for moving and comparing content between all of these locations.</source>
          <target state="translated">これらすべての場所の間でコンテンツを移動したり比較したりするための Git コマンド (および/またはコマンドのオプション)です。</target>
        </trans-unit>
        <trans-unit id="913e20aa0e82cacccbed30743753b5fea41f9dd9" translate="yes" xml:space="preserve">
          <source>Git is complex software. One needs an installer of some kind to put Git on a developer workstation, or to upgrade to a newer version of Git. Setting up a Git server is non-trivial, and so most users have to use a third-party service such as GitHub or GitLab, and thus introduce additional (unnecessary) dependencies into the project.</source>
          <target state="translated">Git は複雑なソフトウェアです。開発者のワークステーションにGitをインストールしたり、新しいバージョンのGitにアップグレードしたりするには、何らかのインストーラーが必要です。Gitサーバーを設定するのは至難の業なので、ほとんどのユーザーはGitHubやGitLabのようなサードパーティのサービスを使わなければならず、プロジェクトに追加の(不要な)依存関係を導入しなければなりません。</target>
        </trans-unit>
        <trans-unit id="ee613d9b4f6dfc0f80be0bd2cfff2ea77808bbb6" translate="yes" xml:space="preserve">
          <source>Git keeps the complete DAG of the check-in sequence. But branch tags are local information that is not synced and not retained once a branch closes. This makes review of historical branches tedious.</source>
          <target state="translated">Git はチェックインシーケンスの完全な DAG を保持しています。しかし、ブランチタグはローカル情報であり、ブランチが閉じても同期されず、保持されません。そのため、履歴のあるブランチを確認するのが面倒になります。</target>
        </trans-unit>
        <trans-unit id="48b3160f0b763f1616179debce43562e664f02d9" translate="yes" xml:space="preserve">
          <source>GitHub and GitLab offer nothing comparable. The closest I have found is the &lt;a href=&quot;https://github.com/sqlite/sqlite/network&quot;&gt;network&lt;/a&gt;, which is slow to render (unless it is already cached), does not offer nearly as much details, and scarcely works on mobile. The &lt;a href=&quot;https://github.com/sqlite/sqlite/commits/master&quot;&gt;commits&lt;/a&gt; view of GitHub provides more detail, renders quickly, and works on mobile, but only shows a single branch at a time, so I cannot easily know if I've seen all of the recent changes. And even if GitHub/GitLab did offer better interfaces, both are third-party services. They are not a core part of Git. Hence, using them introduces yet another dependency into the project.</source>
          <target state="translated">GitHubとGitLabは比較できるものを何も提供していません。私が見つけた最も近いものは&lt;a href=&quot;https://github.com/sqlite/sqlite/network&quot;&gt;ネットワークです&lt;/a&gt;。（すでにキャッシュされている場合を除いて）レンダリングが遅く、詳細がほとんど提供されておらず、モバイルではほとんど機能しません。GitHub の&lt;a href=&quot;https://github.com/sqlite/sqlite/commits/master&quot;&gt;コミット&lt;/a&gt;ビューは、より詳細で迅速にレンダリングされ、モバイルで機能しますが、一度に1つのブランチしか表示しないため、最近の変更をすべて確認したかどうかは簡単にはわかりません。GitHub / GitLabがより優れたインターフェースを提供したとしても、どちらもサードパーティのサービスです。これらはGitの中核部分ではありません。したがって、それらを使用すると、プロジェクトにさらに別の依存関係が生じます。</target>
        </trans-unit>
        <trans-unit id="ba7606fea498a9e876c11c77be2a94dc96cb33f9" translate="yes" xml:space="preserve">
          <source>Given a page number P and a maximum WAL frame index M, return the largest WAL frame index for page P that does not exceed M, or return NULL if there are no frames for page P that do not exceed M.</source>
          <target state="translated">ページ番号Pと最大WALフレームインデックスMが与えられた場合,ページPの最大WALフレームインデックスでMを超えないものを返します.</target>
        </trans-unit>
        <trans-unit id="d4a9375f517c74831802a20b14cf1be5743c9399" translate="yes" xml:space="preserve">
          <source>Given a single SQL statement, there might be dozens, hundreds, or even thousands of ways to implement that statement, depending on the complexity of the statement itself and of the underlying database schema. The task of the query planner is to select an algorithm from among the many choices that provides the answer with a minimum of disk I/O and CPU overhead.</source>
          <target state="translated">1つのSQL文が与えられた場合、そのSQL文を実装する方法は、その文自体の複雑さや基礎となるデータベーススキーマの複雑さに応じて、何十通り、何百通り、あるいは何千通りもあるかもしれません。クエリプランナのタスクは、多くの選択肢の中から、ディスクI/OとCPUのオーバーヘッドを最小限に抑えて答えを提供するアルゴリズムを選択することです。</target>
        </trans-unit>
        <trans-unit id="f6bcca46f0f74a9ae01ce42d9f7404d2419d51ad" translate="yes" xml:space="preserve">
          <source>Given all of the information above, the job of the xBestIndex method it to figure out the best way to search the virtual table.</source>
          <target state="translated">上記のすべての情報を考えると、xBestIndexメソッドの仕事は、仮想テーブルを検索するための最良の方法を見つけることです。</target>
        </trans-unit>
        <trans-unit id="3214b13dd0b542c059230864a7a5bcd2b12ab804" translate="yes" xml:space="preserve">
          <source>Given an input string X, this routine attempts to determine the dominant script of that input and returns the ISO-15924 numeric code for that script. The current implementation understands the following scripts:</source>
          <target state="translated">入力文字列 X が与えられると、このルーチンは、その入力の支配的なスクリプトを決定しようとし、そのスクリプトの ISO-15924 数値コードを返します。現在の実装では、以下のスクリプトを理解できます。</target>
        </trans-unit>
        <trans-unit id="c57b59e0dd1b427eb5c7b60fabfb8b9d76033a70" translate="yes" xml:space="preserve">
          <source>Given the definition of X1 above, the following expressions have historically evaluated to FALSE in SQLite, though the correct answer is actually NULL:</source>
          <target state="translated">上記の X1 の定義を考えると、以下の式は歴史的に SQLite で FALSE と評価されてきましたが、正しい答えは実際には NULL です。</target>
        </trans-unit>
        <trans-unit id="bd2ada8cc33bdc4785b371a48d725c0e9ca58446" translate="yes" xml:space="preserve">
          <source>Given the new multi-column Idx3 index, it is now possible for SQLite to find the price of California oranges using only 2 binary searches:</source>
          <target state="translated">新しいマルチカラム Idx3 インデックスを使用すると、SQLite では 2 つのバイナリ検索だけでカリフォルニアオレンジの価格を検索できるようになりました。</target>
        </trans-unit>
        <trans-unit id="7427cf697be16a4ec1d916910128a59d920125e7" translate="yes" xml:space="preserve">
          <source>Glossary</source>
          <target state="translated">Glossary</target>
        </trans-unit>
        <trans-unit id="617490ec40d56766edf8aff111990bee9834d1c1" translate="yes" xml:space="preserve">
          <source>Gosub</source>
          <target state="translated">Gosub</target>
        </trans-unit>
        <trans-unit id="0a9ffc4a328e6d21b11f3b8312d08e5b413aec49" translate="yes" xml:space="preserve">
          <source>Goto</source>
          <target state="translated">Goto</target>
        </trans-unit>
        <trans-unit id="1dee13ac09a18c736a85fb7212501ca3f0535655" translate="yes" xml:space="preserve">
          <source>Gt</source>
          <target state="translated">Gt</target>
        </trans-unit>
        <trans-unit id="60f4e65b35154fc853b0c67ac464ba87691c1af9" translate="yes" xml:space="preserve">
          <source>Guard your tongue against evil and depraved speech.</source>
          <target state="translated">悪と堕落した言葉から舌を守りなさい。</target>
        </trans-unit>
        <trans-unit id="3472b7100ee6c34d2c985ec6e738e904962356df" translate="yes" xml:space="preserve">
          <source>HAVING</source>
          <target state="translated">HAVING</target>
        </trans-unit>
        <trans-unit id="a4c7ee9ba5c961273e153da9b6004699add74ac0" translate="yes" xml:space="preserve">
          <source>HH:MM</source>
          <target state="translated">HH:MM</target>
        </trans-unit>
        <trans-unit id="4a05a9c514dbbe7b13aeee7ffbbac9804dba7f74" translate="yes" xml:space="preserve">
          <source>HH:MM:SS</source>
          <target state="translated">HH:MM:SS</target>
        </trans-unit>
        <trans-unit id="4fe76e489c6dd906a0f1a9c53aab6e472da095e8" translate="yes" xml:space="preserve">
          <source>HH:MM:SS.SSS</source>
          <target state="translated">HH:MM:SS.SSS</target>
        </trans-unit>
        <trans-unit id="65f5a5cdef2d1220d932d3711961b5f933bef00b" translate="yes" xml:space="preserve">
          <source>HHHHHHHH</source>
          <target state="translated">HHHHHHHH</target>
        </trans-unit>
        <trans-unit id="cbc6ab8d850f8cff446447123804da23a703c293" translate="yes" xml:space="preserve">
          <source>Halt</source>
          <target state="translated">Halt</target>
        </trans-unit>
        <trans-unit id="c9efb4e35e5411aedaf0542890d4f34de7fdc553" translate="yes" xml:space="preserve">
          <source>HaltIfNull</source>
          <target state="translated">HaltIfNull</target>
        </trans-unit>
        <trans-unit id="eda901a16a2ed9d0d0e178d305fa51f41c885dd9" translate="yes" xml:space="preserve">
          <source>Has the same PRIMARY KEY definition.</source>
          <target state="translated">同じPRIMARY KEYの定義を持っています。</target>
        </trans-unit>
        <trans-unit id="7b3c15bec716c58e30bb9a01cc52d490760b69bf" translate="yes" xml:space="preserve">
          <source>Has the same name,</source>
          <target state="translated">同じ名前を持っています。</target>
        </trans-unit>
        <trans-unit id="96ee9d0e4b354db6f1aac2ad6a31abd4bc3e74ca" translate="yes" xml:space="preserve">
          <source>Has the same set of columns declared in the same order, and</source>
          <target state="translated">同じ順序で宣言された同じカラムのセットを持ち</target>
        </trans-unit>
        <trans-unit id="71024d7461751155928cb62c4bbb4edb8155f4cb" translate="yes" xml:space="preserve">
          <source>Hate no one.</source>
          <target state="translated">誰も憎まない。</target>
        </trans-unit>
        <trans-unit id="f5e9b1bebb569eb2b57a7ab4d85d0681e37d4262" translate="yes" xml:space="preserve">
          <source>Having SQLite take ownership of the type strings would impose a performance cost on all applications, even applications that do not use the pointer-passing interfaces. SQLite passes values around as instances of the &lt;a href=&quot;c3ref/value&quot;&gt;sqlite3_value&lt;/a&gt; object. That object has a destructor, which because of the fact that sqlite3_value objects are used for nearly everything, is invoked frequently. If the destructor needs to check to see if there is a pointer type string that needs to be freed, that is a few extra CPU cycles that need to be burned on each call to the destructor. Those cycles add up. We would be willing to bear the cost of the extra CPU cycles if pointer-passing was a commonly used programming paradigm, but pointer-passing is rare, and so it seems unwise to impose a run-time cost on billions and billions of applications that do not use pointer passing just for convenience of a few applications that do.</source>
          <target state="translated">SQLiteが文字列型の所有権を取得するようにすると、すべてのアプリケーション（ポインタ渡しインターフェイスを使用しないアプリケーションを含む）にパフォーマンスコストがかかります。 SQLiteは&lt;a href=&quot;c3ref/value&quot;&gt;sqlite3_valueの&lt;/a&gt;インスタンスとして値を渡しますオブジェクト。そのオブジェクトにはデストラクタがあり、sqlite3_valueオブジェクトがほぼすべてに使用されるため、頻繁に呼び出されます。デストラクタが解放する必要があるポインタ型の文字列があるかどうかを確認する必要がある場合、それはデストラクタへの各呼び出しで焼き付ける必要があるいくつかの余分なCPUサイクルです。これらのサイクルが加算されます。ポインターの受け渡しが一般的に使用されているプログラミングパラダイムである場合は、追加のCPUサイクルのコストを負担してもかまいませんが、ポインターの受け渡しはまれであるため、数十億および数十億のアプリケーションにランタイムコストを課すのは賢明ではありません。ポインタを渡すいくつかのアプリケーションの便宜のためだけに、ポインタの受け渡しを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="3880fcd08d24da661937a86693cfca26882a3b4e" translate="yes" xml:space="preserve">
          <source>Hazards of upgrading to the NGQP</source>
          <target state="translated">NGQPへのアップグレードの危険性</target>
        </trans-unit>
        <trans-unit id="5050e4d38d7df11eb3b253f0629fcc46c260dc76" translate="yes" xml:space="preserve">
          <source>Header string: 0xd9, 0xd5, 0x05, 0xf9, 0x20, 0xa1, 0x63, 0xd7</source>
          <target state="translated">ヘッダー文字列。0xd9、0xd5、0x05、0xf9、0x20、0xa1、0x63、0xd7</target>
        </trans-unit>
        <trans-unit id="4bc19fb4af9f917cd00992c6391f45202ff0d0ec" translate="yes" xml:space="preserve">
          <source>Hence, a good rule of thumb is that your database schema should never contain two indices where one index is a prefix of the other. Drop the index with fewer columns. SQLite will still be able to do efficient lookups with the longer index.</source>
          <target state="translated">したがって、データベーススキーマには、一方のインデックスがもう一方のインデックスの接頭辞になっているような2つのインデックスを含むべきではないというのが良い経験則です。カラム数の少ないインデックスを削除してください。SQLiteは長いインデックスを使っても効率的な検索を行うことができます。</target>
        </trans-unit>
        <trans-unit id="e3f076946ec3be55b66dffc59ab395c4e63eeb8f" translate="yes" xml:space="preserve">
          <source>Hence, by adding extra &quot;output&quot; columns onto the end of an index, one can avoid having to reference the original table and thereby cut the number of binary searches for a query in half. This is a constant-factor improvement in performance (roughly a doubling of the speed). But on the other hand, it is also just a refinement; A two-fold performance increase is not nearly as dramatic as the one-million-fold increase seen when the table was first indexed. And for most queries, the difference between 1 microsecond and 2 microseconds is unlikely to be noticed.</source>
          <target state="translated">したがって、インデックスの末尾に余分な「出力」カラムを追加することで、元のテーブルを参照する必要がなくなり、それによってクエリのバイナリ検索の数を半分に減らすことができます。これは、パフォーマンスの恒常的な向上です(速度が約2倍になります)。2倍の性能向上は、テーブルが最初にインデックス化されたときに見られた100万倍の性能向上ほど劇的ではありません。そして、ほとんどのクエリでは、1マイクロ秒と2マイクロ秒の差に気づくことはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="b665f7a53251e88b80c18ae95a6e2a7570ff2c9e" translate="yes" xml:space="preserve">
          <source>Hence, in comparison to other approaches, the use of an SQLite database as an application file format has compelling advantages. Here are a few of these advantages, enumerated and expounded:</source>
          <target state="translated">したがって、他のアプローチと比較して、アプリケーションファイル形式としてSQLiteデータベースを使用することには説得力のある利点があります。ここでは、これらの利点のいくつかを列挙して説明します。</target>
        </trans-unit>
        <trans-unit id="39e8db1d33a3457396e45de0c0793052727a641e" translate="yes" xml:space="preserve">
          <source>Hence, the content encoding for a WITHOUT ROWID table is the same as the content encoding for an ordinary rowid table, except that the order of the columns is rearranged so that PRIMARY KEY columns come first, and the content is used as the key in an index b-tree rather than as the data in a table b-tree. The special encoding rules for columns with REAL affinity apply to WITHOUT ROWID tables the same as they do with rowid tables.</source>
          <target state="translated">したがって、WITHOUT ROWIDテーブルのコンテンツエンコーディングは、通常のROWIDテーブルのコンテンツエンコーディングと同じですが、列の順序がPRIMARY KEY列が最初に来るように並べ替えられ、コンテンツはテーブルb-treeのデータとしてではなく、インデックスb-treeのキーとして使用されます。REALアフィニティを持つカラムのための特別なエンコーディング規則は、ROWIDテーブルの場合と同様に、WITHOUT ROWIDテーブルにも適用されます。</target>
        </trans-unit>
        <trans-unit id="999cfa83416c7b736dc3f3dfa6e7f25b9ba6e98f" translate="yes" xml:space="preserve">
          <source>Here again, version 2.7.0 of SQLite used to run at about the same speed as MySQL. But now version 2.7.6 is over two times faster than MySQL and over twenty times faster than PostgreSQL.</source>
          <target state="translated">ここでも、SQLiteのバージョン2.7.0は、以前はMySQLとほぼ同じ速度で動作していました。しかし、現在ではバージョン2.7.6はMySQLの2倍以上、PostgreSQLの20倍以上の速度で動作しています。</target>
        </trans-unit>
        <trans-unit id="c79a9d1055558ef2d9992c6424392d62b259c2a6" translate="yes" xml:space="preserve">
          <source>Here are some existing and postulated uses for virtual tables:</source>
          <target state="translated">ここでは、仮想テーブルの既存の用途と想定される用途をいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="f0580ad7def68334eac7c2c033faae47fa33aa31" translate="yes" xml:space="preserve">
          <source>Here are the syntax details:</source>
          <target state="translated">以下、構文の詳細です。</target>
        </trans-unit>
        <trans-unit id="c84ee5f5403083ecda923ec1470b2d4f31fd0f00" translate="yes" xml:space="preserve">
          <source>Here is a complete template extension that you can copy/paste to get started:</source>
          <target state="translated">ここでは、コピー&amp;ペーストして始めることができる完全なテンプレート拡張機能をご紹介します。</target>
        </trans-unit>
        <trans-unit id="537d394cf0d1eecb92a9cbe8efc7e1a703bdd18e" translate="yes" xml:space="preserve">
          <source>Here is a query that computes the average height over everyone in Alice's organization, including Alice:</source>
          <target state="translated">これは、アリスを含むアリスの組織内の全員の平均身長を計算するクエリです。</target>
        </trans-unit>
        <trans-unit id="dd42feed9698b376dcb10e9aa54e385c734b65a6" translate="yes" xml:space="preserve">
          <source>Here is a query to show the tree structure in a breadth-first pattern:</source>
          <target state="translated">ここでは、木の構造をブレッドファーストパターンで表示するクエリです。</target>
        </trans-unit>
        <trans-unit id="b68ea20ab0a8004dffe949b080033114856a05ba" translate="yes" xml:space="preserve">
          <source>Here is a simple example of omitting a LEFT JOIN:</source>
          <target state="translated">ここでは、left joinを省略した簡単な例を紹介します。</target>
        </trans-unit>
        <trans-unit id="22d888f42ada11de3c14b5860a924536cf19b222" translate="yes" xml:space="preserve">
          <source>Here is a slightly different way to describe the aPgno values: If you think of all aPgno values as a contiguous array, then the database page number stored in the i-th frame of the WAL file is stored in aPgno[i]. Of course, aPgno is not a contiguous array. The first 4062 entries are on the first 32768-byte unit of the shm file and subsequent values are in 4096 entry chunks in later units of the shm file.</source>
          <target state="translated">ここで、aPgno値の記述方法を少し変えてみましょう。すべてのaPgno値を連続配列と考えると、WALファイルのi番目のフレームに格納されているデータベースページ番号は、aPgno[i]に格納されます。もちろん、aPgnoは連続配列ではありません。最初の4062エントリはshmファイルの最初の32768バイト単位にあり、それ以降の値はshmファイルの後の単位にある4096エントリのチャンクにあります。</target>
        </trans-unit>
        <trans-unit id="eeed83aeb26a72a7167e0caa92d0a130551072b7" translate="yes" xml:space="preserve">
          <source>Here is a summary of what the core interfaces do:</source>
          <target state="translated">ここでは、コアインターフェースが何をしているのかをまとめてみました。</target>
        </trans-unit>
        <trans-unit id="8a2373a91d98c2486bbd1ed6e2138a7e77394ed5" translate="yes" xml:space="preserve">
          <source>Here is a variation on the previous example:</source>
          <target state="translated">先ほどの例のバリエーションです。</target>
        </trans-unit>
        <trans-unit id="1319ba3fc57ef36ac27efdbc47123bdd4cb7f431" translate="yes" xml:space="preserve">
          <source>Here is an alternative description of the same computation:</source>
          <target state="translated">ここでは、同じ計算の別の説明をします。</target>
        </trans-unit>
        <trans-unit id="44eacff0724c9f996876f69099ca0b2726a97ade" translate="yes" xml:space="preserve">
          <source>Here is an alternative way of describing the hash look-up algorithm: Start with h = (P * 383)%8192 and look at aHash[h] and subsequent entries, wrapping around to zero when h reaches 8192, until finding an entry with aHash[h]==0. All aPgno entries having a page number of P will have an index that is one of the aHash[h] values thusly computed. But not all the computed aHash[h] values will meet the matching criteria, so you must check them independently. The speed advantage comes about because normally this set of h values is very small.</source>
          <target state="translated">ハッシュ検索アルゴリズムを記述する別の方法を以下に示します。h=(P*383)%8192から始めて、aHash[h]とそれ以降のエントリを調べ、hが8192に達した時点でゼロに折り返し、aHash[h]==0のエントリが見つかるまで探します。 ページ番号がPのすべてのaPgnoエントリは、このようにして計算されたaHash[h]値の1つであるインデックスを持ちます。しかし、計算されたaHash[h]値のすべてが一致するわけではないので、それらを個別にチェックする必要があります。通常,このh値の集合は非常に小さいので,速度の面での利点があります.</target>
        </trans-unit>
        <trans-unit id="1a49c4bb8c6fe24c99e1160edbe5f45003dd833d" translate="yes" xml:space="preserve">
          <source>Here is an example using the built-in row_number() window function:</source>
          <target state="translated">組み込みの row_number()ウィンドウ関数を使用した例を示します。</target>
        </trans-unit>
        <trans-unit id="1ed2d64e0577782df2f1f708b1c461ee5ebea46a" translate="yes" xml:space="preserve">
          <source>Here is what is going to happen: The first SELECT statement will construct rows of the result and save each row as the key of an entry in the transient table. The data for each entry in the transient table is a never used so we fill it in with an empty string. The second SELECT statement also constructs rows, but the rows constructed by the second SELECT are removed from the transient table. That is why we want the rows to be stored in the key of the SQLite file instead of in the data -- so they can be easily located and deleted.</source>
          <target state="translated">ここで何が起こるかを説明します。最初のSELECT文で結果の行を構築し、各行を過渡表のエントリのキーとして保存します。トランジェント・テーブルの各エントリのデータは決して使用されないので、空の文字列で埋めます。2番目のSELECT文も行を構築しますが、2番目のSELECTで構築された行は過渡テーブルから削除されます。そのため、行はデータの中ではなくSQLiteファイルのキーに格納したいのですが、そうすれば簡単に位置を特定して削除することができます。</target>
        </trans-unit>
        <trans-unit id="7a844050eead2e7f9a21cd042c8a0efba1c399bc" translate="yes" xml:space="preserve">
          <source>Here is what the program must do. First it has to locate all of the records in the table &quot;examp&quot; that are to be deleted. This is done using a loop very much like the loop used in the SELECT examples above. Once all records have been located, then we can go back through and delete them one by one. Note that we cannot delete each record as soon as we find it. We have to locate all records first, then go back and delete them. This is because the SQLite database backend might change the scan order after a delete operation. And if the scan order changes in the middle of the scan, some records might be visited more than once and other records might not be visited at all.</source>
          <target state="translated">ここでは、プログラムが何をしなければならないかです。最初に削除されるテーブル &quot;examp &quot;内のすべてのレコードを見つけなければなりません。これは、上記のSELECTの例で使用されているループと非常によく似たループを使用して行われます。すべてのレコードを見つけたら、それを1つずつ削除することができます。レコードを見つけたらすぐに削除することはできないことに注意してください。最初にすべてのレコードを見つけてから、さかのぼって削除しなければなりません。これは、SQLiteデータベースのバックエンドが削除操作の後にスキャン順序を変更する可能性があるためです。また、スキャンの途中でスキャン順序が変わると、いくつかのレコードが複数回訪問されたり、他のレコードが全く訪問されなかったりする可能性があります。</target>
        </trans-unit>
        <trans-unit id="6ed0e64b4172a16a9716e7e75ddd35007c4f6e5a" translate="yes" xml:space="preserve">
          <source>Here is what you do to start experimenting with SQLite without having to do a lot of tedious reading and configuration:</source>
          <target state="translated">面倒な読み込みや設定をたくさんしなくても、SQLiteの実験を始めるにはどうすればいいのかをご紹介します。</target>
        </trans-unit>
        <trans-unit id="c11a956fd1daf361e07b9a2963b5331668a6cb09" translate="yes" xml:space="preserve">
          <source>Here the apostrophe has been escaped and the SQL statement is well-formed. When generating SQL on-the-fly from data that might contain a single-quote character ('), it is always a good idea to use the SQLite printf routines and the %q formatting option instead of &lt;b&gt;sprintf&lt;/b&gt;.</source>
          <target state="translated">ここではアポストロフィがエスケープされており、SQLステートメントは整形式です。単一引用符文字（ '）を含む可能性のあるデータからオンザフライでSQLを生成する場合、&lt;b&gt;sprintfの&lt;/b&gt;代わりにSQLite printfルーチンと％qフォーマットオプションを使用することは常に良い考えです。</target>
        </trans-unit>
        <trans-unit id="53844b42e0f15c4e9c92f326da701e5edff51b64" translate="yes" xml:space="preserve">
          <source>Here the inequalities are on columns x and y which are not the left-most index columns. Hence, the histogram data which is collected no left-most column of indices is useless in helping to choose between the range constraints on columns x and y.</source>
          <target state="translated">ここでは、不等式は、左端のインデックス列ではない列xとyにあります。したがって、インデックスの左端の列が収集されていないヒストグラムデータは、列xとyの範囲制約を選択するのに役に立たない。</target>
        </trans-unit>
        <trans-unit id="54b1a90f72334cf67c79da3608b8cff7cc194a79" translate="yes" xml:space="preserve">
          <source>Hexadecimal</source>
          <target state="translated">Hexadecimal</target>
        </trans-unit>
        <trans-unit id="f3f781093bc605abee81ccbeb636a20f530bbe5d" translate="yes" xml:space="preserve">
          <source>Hexadecimal integer literals</source>
          <target state="translated">16進整数リテラル</target>
        </trans-unit>
        <trans-unit id="35e13960711ca47c62471d92f2b4029ee7852496" translate="yes" xml:space="preserve">
          <source>Hexadecimal integer literals follow the C-language notation of &quot;0x&quot; or &quot;0X&quot; followed by hexadecimal digits. For example, 0x1234 means the same as 4660 and 0x8000000000000000 means the same as -9223372036854775808. Hexadecimal integer literals are interpreted as 64-bit two's-complement integers and are thus limited to sixteen significant digits of precision. Support for hexadecimal integers was added to SQLite version 3.8.6 (2014-08-15). For backwards compatibility, the &quot;0x&quot; hexadecimal integer notation is only understood by the SQL language parser, not by the type conversions routines. String variables that contain text formatted like hexadecimal integers are not interpreted as hexadecimal integers when coercing the string value into an integer due to a &lt;a href=&quot;lang_expr#castexpr&quot;&gt;CAST expression&lt;/a&gt; or for a &lt;a href=&quot;datatype3#affinity&quot;&gt;column affinity&lt;/a&gt; transformation or prior to performing a numeric operation or for any other run-time conversions. When coercing a string value in the format of a hexadecimal integer into an integer value, the conversion process stops when the 'x' character is seen so the resulting integer value is always zero. SQLite only understands the hexadecimal integer notation when it appears in the SQL statement text, not when it appears as part of the content of the database.</source>
          <target state="translated">16進整数リテラルは、C言語表記の「0x」または「0X」の後に16進数字が続きます。たとえば、0x1234は4660と同じ意味であり、0x8000000000000000は-9223372036854775808と同じ意味です。 16進整数リテラルは64ビットの2の補数の整数として解釈されるため、有効桁数は16桁に制限されています。 16進整数のサポートがSQLiteバージョン3.8.6（2014-08-15）に追加されました。下位互換性のために、「0x」16進整数表記は、SQL言語パーサーによってのみ理解され、型変換ルーチンでは理解されません。16進整数のようにフォーマットされたテキストを含む文字列変数は、 &lt;a href=&quot;lang_expr#castexpr&quot;&gt;CAST式&lt;/a&gt;または&lt;a href=&quot;datatype3#affinity&quot;&gt;列アフィニティの&lt;/a&gt;ために文字列値を整数に強制変換するときに16進整数として解釈されません変換、または数値演算を実行する前、またはその他のランタイム変換。16進整数の形式の文字列値を整数値に強制変換する場合、「x」文字が表示されると変換プロセスが停止するため、結果の整数値は常にゼロになります。SQLiteは、データベースのコンテンツの一部として表示される場合ではなく、SQLステートメントのテキストに表示される場合にのみ、16進整数表記を理解します。</target>
        </trans-unit>
        <trans-unit id="4413e5afdd76b08f7a57f3501dcd353af75c6909" translate="yes" xml:space="preserve">
          <source>Hexadecimal integers</source>
          <target state="translated">16進整数</target>
        </trans-unit>
        <trans-unit id="34ad49fd08b5d8ebfe6309e8a94dbdda68560346" translate="yes" xml:space="preserve">
          <source>Hidden column</source>
          <target state="translated">隠しカラム</target>
        </trans-unit>
        <trans-unit id="47adea5ce487ea3890476b37d1c95b4a2f866391" translate="yes" xml:space="preserve">
          <source>Hidden columns are not included in the expansion of a &quot;*&quot; expression in the result set of a &lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt;, and</source>
          <target state="translated">隠し列は結果セットの中の「*」という表現の拡張に含まれていない&lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt;、および</target>
        </trans-unit>
        <trans-unit id="20096dd8d3b8c2cfd4d3a69c38df377eed777771" translate="yes" xml:space="preserve">
          <source>Hidden columns are not included in the implicit column-list used by an &lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt; statement that lacks an explicit column-list.</source>
          <target state="translated">非表示の列は、明示的な列リストのない&lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt;ステートメントで使用される暗黙的な列リストには含まれません。</target>
        </trans-unit>
        <trans-unit id="b7668a93e533ae2c015270865d5e714d07d437f1" translate="yes" xml:space="preserve">
          <source>Hidden columns are not listed in the dataset returned by &quot;&lt;a href=&quot;pragma#pragma_table_info&quot;&gt;PRAGMA table_info&lt;/a&gt;&quot;,</source>
          <target state="translated">非表示の列は、「&lt;a href=&quot;pragma#pragma_table_info&quot;&gt;PRAGMA table_info&lt;/a&gt;」によって返されるデータセットにリストされていません。</target>
        </trans-unit>
        <trans-unit id="c4cf7b97c327f9d39106315e4a050c0b0f137cef" translate="yes" xml:space="preserve">
          <source>Hierarchical Query Examples</source>
          <target state="translated">階層型クエリの例</target>
        </trans-unit>
        <trans-unit id="62ae978c372dd625e1ad5bee3c09efecd27ef87c" translate="yes" xml:space="preserve">
          <source>High Reliability</source>
          <target state="translated">高い信頼性</target>
        </trans-unit>
        <trans-unit id="5b43fa59ed80a4a74e2345ca9a7be4d00498a5de" translate="yes" xml:space="preserve">
          <source>High-Level Query Language</source>
          <target state="translated">ハイレベルクエリ言語</target>
        </trans-unit>
        <trans-unit id="f0be6eee61b3f35036173bb461da267d072410b3" translate="yes" xml:space="preserve">
          <source>High-security Value</source>
          <target state="translated">安全性の高い価値</target>
        </trans-unit>
        <trans-unit id="d4e0f8e3d3d0dc08399c35d69b24eda9dfffeab6" translate="yes" xml:space="preserve">
          <source>Higher level logic within SQLite will normally intercept the error code and create a temporary in-memory shared memory region so that the current process can at least read the content of the database. This result code should not reach the application interface layer.</source>
          <target state="translated">SQLite 内の高レベルのロジックは通常、エラーコードを傍受して一時的なメモリ内共有メモリ領域を作成し、現在のプロセスが少なくともデータベースの内容を読み取れるようにします。この結果コードは、アプリケーションインターフェイス層には到達しないはずです。</target>
        </trans-unit>
        <trans-unit id="8ec8e6f8b27cff894766ae4e4215e6f333126ae8" translate="yes" xml:space="preserve">
          <source>Highest precedence (tightest grouping).</source>
          <target state="translated">最優先順位が高い(グループ分けがきつい)。</target>
        </trans-unit>
        <trans-unit id="9d8bc8b9f1a6b46c231d4505eec0f99894497892" translate="yes" xml:space="preserve">
          <source>Hint: applications can generate globally unique identifiers using this function together with &lt;a href=&quot;lang_corefunc#hex&quot;&gt;hex()&lt;/a&gt; and/or &lt;a href=&quot;lang_corefunc#lower&quot;&gt;lower()&lt;/a&gt; like this:</source>
          <target state="translated">ヒント：アプリケーションは、この関数を次のように&lt;a href=&quot;lang_corefunc#hex&quot;&gt;hex（）&lt;/a&gt;および/または&lt;a href=&quot;lang_corefunc#lower&quot;&gt;lower（）&lt;/a&gt;と組み合わせて使用​​して、グローバルに一意の識別子を生成できます。</target>
        </trans-unit>
        <trans-unit id="13895cc550db90756c2c44f981469cdd85261a1d" translate="yes" xml:space="preserve">
          <source>Hints for Debugging SQLite</source>
          <target state="translated">SQLiteをデバッグするためのヒント</target>
        </trans-unit>
        <trans-unit id="6b205a779ffaeec5fb12feda7165de7c06e54bbe" translate="yes" xml:space="preserve">
          <source>Historical test cases from &lt;a href=&quot;testing#aflfuzz&quot;&gt;AFL&lt;/a&gt;, &lt;a href=&quot;testing#ossfuzz&quot;&gt;OSS Fuzz&lt;/a&gt;, and &lt;a href=&quot;testing#dbsqlfuzz&quot;&gt;dbsqlfuzz&lt;/a&gt; are collected in a set of database files in the main SQLite source tree and then rerun by the &quot;fuzzcheck&quot; utility program whenever one runs &quot;make test&quot;. Fuzzcheck only runs a few thousand &quot;interesting&quot; cases out of the hundreds of millions of cases that the various fuzzers have examined over the years. &quot;Interesting&quot; cases are cases that exhibit previously unseen behavior. Actual bugs found by fuzzers are always included among the interesting test cases, but most of the cases run by fuzzcheck were never actual bugs.</source>
          <target state="translated">&lt;a href=&quot;testing#aflfuzz&quot;&gt;AFL&lt;/a&gt;、&lt;a href=&quot;testing#ossfuzz&quot;&gt;OSS Fuzz&lt;/a&gt;、および&lt;a href=&quot;testing#dbsqlfuzz&quot;&gt;dbsqlfuzzの&lt;/a&gt;履歴テストケースは、メインのSQLiteソースツリーの一連のデータベースファイルに収集され、「make test」を実行するたびに「fuzzcheck」ユーティリティプログラムによって再実行されます。 Fuzzcheckは、さまざまなファザーが長年にわたって調査した数億件のケースのうち、数千の「興味深い」ケースのみを実行します。 「興味深い」ケースとは、以前には目にしなかった動作を示すケースです。 fuzzerによって検出された実際のバグは常に興味深いテストケースに含まれますが、fuzzcheckによって実行されたケースのほとんどは実際のバグではありませんでした。</target>
        </trans-unit>
        <trans-unit id="67fec9a6d19b7573beec194f9c1e57c883f7bff1" translate="yes" xml:space="preserve">
          <source>Historically, backups (copies) of SQLite databases have been created using the following method:</source>
          <target state="translated">歴史的に、SQLiteデータベースのバックアップ(コピー)は以下の方法で作成されてきました。</target>
        </trans-unit>
        <trans-unit id="a7796946d81b3e384b117135d383fc5e5877941f" translate="yes" xml:space="preserve">
          <source>Historically, the bytecode engine in SQLite is called the &quot;Virtual DataBase Engine&quot; or &quot;VDBE&quot;. This website uses the terms &quot;bytecode engine&quot;, &quot;VDBE&quot;, &quot;virtual machine&quot;, and &quot;bytecode virtual machine&quot; interchangeably, as they all mean the same thing.</source>
          <target state="translated">歴史的には、SQLite のバイトコードエンジンは「Virtual DataBase Engine」または「VDBE」と呼ばれています。このウェブサイトでは、&quot;バイトコードエンジン&quot;、&quot;VDBE&quot;、&quot;仮想マシン&quot;、&quot;バイトコード仮想マシン &quot;という用語を互換的に使用しています。</target>
        </trans-unit>
        <trans-unit id="186352c9ed4b1d5538fac7c967930c7dfb52b78f" translate="yes" xml:space="preserve">
          <source>Historically, the return value from xFindFunction() was either zero or one. Zero means that the function is not overloaded and one means that it is overload. The ability to return values of &lt;a href=&quot;c3ref/c_index_constraint_eq&quot;&gt;SQLITE_INDEX_CONSTRAINT_FUNCTION&lt;/a&gt; or greater was added in version 3.25.0 (2018-09-15). If xFindFunction returns &lt;a href=&quot;c3ref/c_index_constraint_eq&quot;&gt;SQLITE_INDEX_CONSTRAINT_FUNCTION&lt;/a&gt; or greater, than means that the function takes two arguments and the function can be used as a boolean in the WHERE clause of a query and that the virtual table is able to exploit that function to speed up the query result. When xFindFunction returns &lt;a href=&quot;c3ref/c_index_constraint_eq&quot;&gt;SQLITE_INDEX_CONSTRAINT_FUNCTION&lt;/a&gt; or larger, the value returned becomes the sqlite3_index_info.aConstraint.op value for one of the constraints passed into &lt;a href=&quot;vtab#xbestindex&quot;&gt;xBestIndex()&lt;/a&gt; and the second argument becomes the value corresponding to that constraint that is passed to &lt;a href=&quot;vtab#xfilter&quot;&gt;xFilter()&lt;/a&gt;. This enables the xBestIndex()/xFilter implementations to use the function to speed its search.</source>
          <target state="translated">歴史的に、xFindFunction（）からの戻り値は0または1でした。ゼロは関数がオーバーロードされていないことを意味し、1は関数がオーバーロードされていることを意味します。&lt;a href=&quot;c3ref/c_index_constraint_eq&quot;&gt;SQLITE_INDEX_CONSTRAINT_FUNCTION&lt;/a&gt;以上の値を返す機能は、バージョン3.25.0（2018-09-15）で追加されました。 xFindFunctionが&lt;a href=&quot;c3ref/c_index_constraint_eq&quot;&gt;SQLITE_INDEX_CONSTRAINT_FUNCTION&lt;/a&gt;以上を返す場合は、関数が2つの引数を取り、その関数をクエリのWHERE句でブール値として使用でき、仮想テーブルがその関数を利用してクエリ結果を高速化できることを意味します。 xFindFunctionが&lt;a href=&quot;c3ref/c_index_constraint_eq&quot;&gt;SQLITE_INDEX_CONSTRAINT_FUNCTION&lt;/a&gt;以上を返す場合、返される値は、&lt;a href=&quot;vtab#xbestindex&quot;&gt;xBestIndex（）に&lt;/a&gt;渡された制約の1つに対するsqlite3_index_info.aConstraint.op値になります。2番目の引数は、&lt;a href=&quot;vtab#xfilter&quot;&gt;xFilter（）に&lt;/a&gt;渡される制約に対応する値になります。これにより、xBestIndex（）/ xFilter実装が関数を使用して検索を高速化できます。</target>
        </trans-unit>
        <trans-unit id="48f87256a37f996b34f071b6b4ef5f1805966dbd" translate="yes" xml:space="preserve">
          <source>Historically, this was not considered a threat. The argument was that if a hostile agent is able to inject arbitrary SQL text into the application, then that agent is already in full control of the application, so letting the hostile agent forge a pointer does not give the agent any new capability.</source>
          <target state="translated">歴史的に、これは脅威とは考えられていませんでした。議論は、もし敵対的なエージェントがアプリケーションに任意のSQLテキストを注入することができるならば、そのエージェントはすでにアプリケーションを完全に制御しているので、敵対的なエージェントにポインタを偽造させることは、エージェントに新しい能力を与えないというものでした。</target>
        </trans-unit>
        <trans-unit id="bfbddd574d4f950742d8e5d7a49607c23d347f95" translate="yes" xml:space="preserve">
          <source>Honor all.</source>
          <target state="translated">敬意を表します。</target>
        </trans-unit>
        <trans-unit id="645a5172c51f2105b78cb24101222af4c2581b31" translate="yes" xml:space="preserve">
          <source>Honor the &lt;a href=&quot;c3ref/c_deserialize_freeonclose&quot;&gt;SQLITE_DESERIALIZE_READONLY&lt;/a&gt; flag, which was previously described in the documentation, but was previously a no-op.</source>
          <target state="translated">以前はドキュメントで説明されていましたが、以前は何もしていなかった&lt;a href=&quot;c3ref/c_deserialize_freeonclose&quot;&gt;SQLITE_DESERIALIZE_READONLY&lt;/a&gt;フラグを尊重してください。</target>
        </trans-unit>
        <trans-unit id="2fff26aa56e0db9e63e42ae6a74896b210340408" translate="yes" xml:space="preserve">
          <source>Honor the ORDER BY and LIMIT clause of a SELECT even if the result set is used for an INSERT.</source>
          <target state="translated">結果セットがINSERTに使用されている場合でも、SELECTのORDER BY句とLIMIT句を尊重します。</target>
        </trans-unit>
        <trans-unit id="972205ef02943c809b85189066f29ea5a922b1d8" translate="yes" xml:space="preserve">
          <source>Host parameter names can begin with '@' for compatibility with SQL Server.</source>
          <target state="translated">ホストのパラメータ名は、SQL Serverとの互換性のために'@'で始めることができます。</target>
        </trans-unit>
        <trans-unit id="2107ab6c47208816e9f85a68b6f666b821dd323b" translate="yes" xml:space="preserve">
          <source>Hot Journal Detection</source>
          <target state="translated">ホットジャーナル検出</target>
        </trans-unit>
        <trans-unit id="387adc1437f284bb8f7d821272256c3791f7c532" translate="yes" xml:space="preserve">
          <source>Hot Journal Rollback</source>
          <target state="translated">ホットジャーナルのロールバック</target>
        </trans-unit>
        <trans-unit id="51a2396551270d6b1b9b0daa06c843f02294bf7a" translate="yes" xml:space="preserve">
          <source>Hot journal files</source>
          <target state="translated">ホットジャーナルファイル</target>
        </trans-unit>
        <trans-unit id="33f85488d44d0b31b265f227edf83b283232673c" translate="yes" xml:space="preserve">
          <source>Hot journal rollback</source>
          <target state="translated">ホットジャーナルのロールバック</target>
        </trans-unit>
        <trans-unit id="72b9d3b59a2cd3c6b5726c2ec8f20f5cbd8fc2c8" translate="yes" xml:space="preserve">
          <source>How &lt;a href=&quot;queryplanner&quot;&gt;indexing&lt;/a&gt; works.</source>
          <target state="translated">どのように&lt;a href=&quot;queryplanner&quot;&gt;インデックス&lt;/a&gt;作品。</target>
        </trans-unit>
        <trans-unit id="de544e283cfebc5d70d3d7b590e023e13a9bf879" translate="yes" xml:space="preserve">
          <source>How Memory-Mapped I/O Works</source>
          <target state="translated">メモリマップドI/Oの仕組み</target>
        </trans-unit>
        <trans-unit id="56b803311ab7e3e616ef538b11ad7fad3dcd0741" translate="yes" xml:space="preserve">
          <source>How SQLite Is Tested</source>
          <target state="translated">SQLite のテスト方法</target>
        </trans-unit>
        <trans-unit id="f0b874a1265664f2f8c8240dcb0a141334e57668" translate="yes" xml:space="preserve">
          <source>How To Compile SQLite</source>
          <target state="translated">SQLiteをコンパイルする方法</target>
        </trans-unit>
        <trans-unit id="bac0366a300ac4acaffdcf4c3d4ee83a4619271d" translate="yes" xml:space="preserve">
          <source>How To Corrupt</source>
          <target state="translated">堕落させる方法</target>
        </trans-unit>
        <trans-unit id="07961a03bdae1448ec20af2c6389f109c109cecd" translate="yes" xml:space="preserve">
          <source>How To Corrupt An SQLite Database File</source>
          <target state="translated">SQLiteデータベースファイルを破損させる方法</target>
        </trans-unit>
        <trans-unit id="ac75035a65466ee12d9ad12dabe0ea72bf4078bd" translate="yes" xml:space="preserve">
          <source>How To Corrupt Your Database Files</source>
          <target state="translated">データベースファイルを破損させる方法</target>
        </trans-unit>
        <trans-unit id="6c4dc04d73e3b62534455f3b1b128df4687ca99e" translate="yes" xml:space="preserve">
          <source>How To Download Canonical SQLite Source Code</source>
          <target state="translated">Canonical SQLiteのソースコードをダウンロードする方法</target>
        </trans-unit>
        <trans-unit id="023a32566bba30a34815129fd5e3cc90c1e899ca" translate="yes" xml:space="preserve">
          <source>How VACUUM works</source>
          <target state="translated">バキュームの仕組み</target>
        </trans-unit>
        <trans-unit id="996ef93cbabdf3a445d79226e8fa6d9c24a881f0" translate="yes" xml:space="preserve">
          <source>How are the syntax diagrams (a.k.a. &quot;railroad&quot; diagrams) for SQLite generated?</source>
          <target state="translated">SQLite の構文図(別名「鉄道」図)はどのように生成されていますか?</target>
        </trans-unit>
        <trans-unit id="fc0899650d804dfcac8dc2104606bf9268efcf1e" translate="yes" xml:space="preserve">
          <source>How collation is determined</source>
          <target state="translated">照合の決め方</target>
        </trans-unit>
        <trans-unit id="9a3218133ebd28240c94b4e7364a4f7e2e221ee5" translate="yes" xml:space="preserve">
          <source>How do I add or delete columns from an existing table in SQLite.</source>
          <target state="translated">SQLiteで既存のテーブルからカラムを追加または削除するにはどうすればよいですか?</target>
        </trans-unit>
        <trans-unit id="30aeec19cd6396142e3416e018900e8041d11cdb" translate="yes" xml:space="preserve">
          <source>How do I create an AUTOINCREMENT field?</source>
          <target state="translated">オートインクリメントフィールドを作成するには?</target>
        </trans-unit>
        <trans-unit id="a6cedc80b4e8057201d930bd24da72e7284f5f18" translate="yes" xml:space="preserve">
          <source>How do I list all tables/indices contained in an SQLite database</source>
          <target state="translated">SQLite データベースに含まれるすべてのテーブル/インデックスをリストアップする方法</target>
        </trans-unit>
        <trans-unit id="94a002c7d3ab3f319a7a958c2ffad735eae889c1" translate="yes" xml:space="preserve">
          <source>How do I use a string literal that contains an embedded single-quote (') character?</source>
          <target state="translated">シングルクォート(')文字が埋め込まれた文字列リテラルを使用するには?</target>
        </trans-unit>
        <trans-unit id="df2742c7cfd9e0aab79b47f5b91d0027a0daa0fc" translate="yes" xml:space="preserve">
          <source>How many executable files are in the archive?</source>
          <target state="translated">アーカイブにはいくつの実行ファイルがありますか?</target>
        </trans-unit>
        <trans-unit id="463cdf2e00bc03ffb0a58ce75a36b28173bad1d1" translate="yes" xml:space="preserve">
          <source>How vacuum works</source>
          <target state="translated">真空の仕組み</target>
        </trans-unit>
        <trans-unit id="c2ebee163b547a5e69c6b8f18b3ce7ade428f296" translate="yes" xml:space="preserve">
          <source>However, client/server database engines (such as PostgreSQL, MySQL, or Oracle) usually support a higher level of concurrency and allow multiple processes to be writing to the same database at the same time. This is possible in a client/server database because there is always a single well-controlled server process available to coordinate access. If your application has a need for a lot of concurrency, then you should consider using a client/server database. But experience suggests that most applications need much less concurrency than their designers imagine.</source>
          <target state="translated">しかし、クライアント/サーバデータベースエンジン(PostgreSQL、MySQL、Oracleなど)は通常、より高いレベルの同時実行性をサポートしており、複数のプロセスが同時に同じデータベースに書き込むことを可能にしています。クライアント/サーバデータベースでは、アクセスを調整するために利用可能な単一のよく制御されたサーバプロセスが常に存在するため、これが可能になります。もしアプリケーションが大量の同時実行を必要とする場合は、クライアント/サーバーデータベースの使用を検討すべきです。しかし、経験上、ほとんどのアプリケーションでは、設計者が想像しているよりもはるかに少ない同時実行性しか必要としないことがわかっています。</target>
        </trans-unit>
        <trans-unit id="a6ddbe53650906819e58dd27910958633c3e2cfa" translate="yes" xml:space="preserve">
          <source>However, for a &quot;contained-within&quot; style query, rounding the bounding boxes outward might cause some entries to be excluded from the result set if the edge of the entry bounding box corresponds to the edge of the query bounding box. To guard against this, applications should expand their contained-within query boxes slightly (by 0.000012%) by rounding down the lower coordinates and rounding up the top coordinates, in each dimension.</source>
          <target state="translated">しかし、&quot;included-within &quot;スタイルのクエリでは、エントリのバウンディングボックスの端がクエリのバウンディングボックスの端と一致する場合、バウンディングボックスを外側に丸めてしまうと、いくつかのエントリが結果集合から除外されてしまう可能性があります。これを防ぐために、アプリケーションは、各次元において、下側の座標を丸め、上側の座標を丸めて、包含された内部クエリボックスをわずかに(0.000012%)拡張しなければなりません。</target>
        </trans-unit>
        <trans-unit id="036059da8b4b48b5c802bde550324a35ba2a35da" translate="yes" xml:space="preserve">
          <source>However, highly tuned and specialized applications may want or need to replace some of SQLite's built-in system interfaces with alternative implementations more suitable for the needs of the application. SQLite is designed to be easily reconfigured at compile-time to meet the specific needs of individual projects. Among the compile-time configuration options for SQLite are these:</source>
          <target state="translated">しかし、高度に調整された特殊なアプリケーションでは、SQLite の組み込みシステムインターフェースの一部を、アプリケーションのニーズに適した代替の実装に置き換える必要があるかもしれません。SQLite は、個々のプロジェクトの特定のニーズを満たすために、コンパイル時に簡単に再設定できるように設計されています。SQLite のコンパイル時の設定オプションには、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="9070a26476fc8018912ec09ceeee6b8f4a55c4f3" translate="yes" xml:space="preserve">
          <source>However, if a</source>
          <target state="translated">しかし、もし</target>
        </trans-unit>
        <trans-unit id="96aad563dbeff373bd60c0d93a4ac2c049bba808" translate="yes" xml:space="preserve">
          <source>However, if a &lt;a href=&quot;vtab&quot;&gt;virtual table&lt;/a&gt; implementation creates real tables (sometimes referred to as &quot;shadow&quot; tables) within the database to store its data in, then sqldiff.exe does calculate the difference between these. This can have surprising effects if the resulting SQL script is then run on a database that is not</source>
          <target state="translated">ただし、&lt;a href=&quot;vtab&quot;&gt;仮想テーブルの&lt;/a&gt;実装がデータベース内に実際のテーブル（「シャドウ」テーブルと呼ばれることもあります）を作成してデータを格納する場合、sqldiff.exeはこれらの差を計算します。結果のSQLスクリプトが次に実行されていないデータベースで実行された場合、これは驚くべき効果をもたらす可能性があります。</target>
        </trans-unit>
        <trans-unit id="90ac212208b638040cc57dde761531e1857cf547" translate="yes" xml:space="preserve">
          <source>However, if a database has many concurrent overlapping readers and there is always at least one active reader, then no checkpoints will be able to complete and hence the WAL file will grow without bound.</source>
          <target state="translated">しかし、データベースが多数の同時重複リーダを持ち、常に少なくとも1つのアクティブなリーダが存在する場合、チェックポイントを完了することができず、その結果、WALファイルは無制限に成長してしまいます。</target>
        </trans-unit>
        <trans-unit id="908b33a654e5b5eaa50e924611f16debc0d52007" translate="yes" xml:space="preserve">
          <source>However, if in-memory database pInMemory has just been opened (and is therefore completely empty) before being passed to function loadOrSaveDb(), then it is still possible to change its page size using an SQLite &quot;PRAGMA page_size&quot; command. Function loadOrSaveDb() could detect this case, and attempt to set the page-size of the in-memory database to the page-size of database zFilename before invoking the online backup API functions.</source>
          <target state="translated">しかし、インメモリ・データベース pInMemory が関数 loadOrSaveDb()に渡される前にオープンされたばかりの(したがって完全に空の)場合、SQLite の &quot;PRAGMA page_size&quot; コマンドを使用してそのページ・サイズを変更することが可能です。関数 loadOrSaveDb()はこのケースを検出し、オンライン・バックアップ API 関数を呼び出す前に、インメモリ・データベースのページ・サイズをデータベース zFilename のページ・サイズに設定しようとすることができます。</target>
        </trans-unit>
        <trans-unit id="9282d84ef089a46651581dc23d9984a0b853a197" translate="yes" xml:space="preserve">
          <source>However, the application must guarantee that the destination &lt;a href=&quot;#sqlite3&quot;&gt;database connection&lt;/a&gt; is not passed to any other API (by any thread) after sqlite3_backup_init() is called and before the corresponding call to sqlite3_backup_finish(). SQLite does not currently check to see if the application incorrectly accesses the destination &lt;a href=&quot;#sqlite3&quot;&gt;database connection&lt;/a&gt; and so no error code is reported, but the operations may malfunction nevertheless. Use of the destination database connection while a backup is in progress might also also cause a mutex deadlock.</source>
          <target state="translated">ただし、アプリケーションは、sqlite3_backup_init（）が呼び出された後、対応するsqlite3_backup_finish（）が呼び出される前に、宛先&lt;a href=&quot;#sqlite3&quot;&gt;データベース接続&lt;/a&gt;が他のAPIに（スレッドによって）渡されないことを保証する必要があります。 SQLiteは現在、アプリケーションが宛先&lt;a href=&quot;#sqlite3&quot;&gt;データベース接続に&lt;/a&gt;誤ってアクセスしているかどうかを確認しないため、エラーコードは報告されませんが、それでも操作が誤動作する可能性があります。バックアップの進行中に宛先データベース接続を使用すると、ミューテックスデッドロックも発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="6bd67d83c5ac9c5a6146085621d60822aa5f256c" translate="yes" xml:space="preserve">
          <source>However, the application must guarantee that the destination &lt;a href=&quot;sqlite3&quot;&gt;database connection&lt;/a&gt; is not passed to any other API (by any thread) after sqlite3_backup_init() is called and before the corresponding call to sqlite3_backup_finish(). SQLite does not currently check to see if the application incorrectly accesses the destination &lt;a href=&quot;sqlite3&quot;&gt;database connection&lt;/a&gt; and so no error code is reported, but the operations may malfunction nevertheless. Use of the destination database connection while a backup is in progress might also also cause a mutex deadlock.</source>
          <target state="translated">ただし、アプリケーションは、sqlite3_backup_init（）が呼び出された後、対応するsqlite3_backup_finish（）が呼び出される前に、宛先&lt;a href=&quot;sqlite3&quot;&gt;データベース接続&lt;/a&gt;が他のAPIに（スレッドによって）渡されないことを保証する必要があります。SQLiteは現在、アプリケーションが宛先&lt;a href=&quot;sqlite3&quot;&gt;データベース接続に&lt;/a&gt;誤ってアクセスしているかどうかを確認しないため、エラーコードは報告されませんが、それでも操作が誤動作する可能性があります。バックアップの進行中に宛先データベース接続を使用すると、ミューテックスデッドロックも発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="2051ec90af96c4dbbb12c8a2bb3921b04fb0a7f2" translate="yes" xml:space="preserve">
          <source>However, the b-tree for a &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; table is in the same format as an index b-tree. Thus, an index b-tree can be accessed as if it were a WITHOUT ROWID table.</source>
          <target state="translated">ただし、&lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt;テーブルのbツリーは、インデックスbツリーと同じ形式です。したがって、WITHOUT ROWIDテーブルであるかのように、インデックスBツリーにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="bdab598cbadf7cd7b2bb8bc0bda2ecbe3c4ceb3a" translate="yes" xml:space="preserve">
          <source>Hundreds of virtual tables that publish various aspects of the host computer, such as the process table, user lists, active network connections, and so forth. OsQuery is a separate project, started by Facebook, hosted on &lt;a href=&quot;https://github.com/facebook/osquery&quot;&gt;GitHub&lt;/a&gt;, and intended for security analysis and intrusion detection OsQuery is not a part of the SQLite project, but is included in this list because it demonstrates how the SQL language and the SQLite virtual table mechanism can be leveraged to provide elegant solutions to important real-world problems.</source>
          <target state="translated">プロセステーブル、ユーザーリスト、アクティブなネットワーク接続など、ホストコンピューターのさまざまな側面を公開する数百の仮想テーブル。 OsQueryは、Facebookによって開始さ&lt;a href=&quot;https://github.com/facebook/osquery&quot;&gt;れ&lt;/a&gt;、GitHubでホストされ、セキュリティ分析と侵入検知を目的とした独立したプロジェクトです。OsQueryはSQLiteプロジェクトの一部ではありませんが、SQL言語とSQLite仮想テーブルの方法を示すため、このリストに含まれていますメカニズムを活用して、現実世界の重要な問題に対するエレガントなソリューションを提供できます。</target>
        </trans-unit>
        <trans-unit id="6d245e7140689124e74b20cb072465076d95b006" translate="yes" xml:space="preserve">
          <source>I accidentally deleted some important information from my SQLite database. How can I recover it?</source>
          <target state="translated">誤ってSQLiteデータベースから重要な情報を削除してしまいました。どのようにそれを回復することができますか?</target>
        </trans-unit>
        <trans-unit id="dc9c3207dff5659b4c310cd90f15260ed36f68c7" translate="yes" xml:space="preserve">
          <source>I am told that Git users commonly install third-party graphical viewers for Git, many of which do a better job of showing recent activity on the project. That is great, but these are still more third-party applications that must be installed and managed separately. Many are platform-specific. (One of the better ones, &lt;a href=&quot;https://gitup.co/&quot;&gt;GitUp&lt;/a&gt;, only works on Mac, for example.) All require that you first sync your local repository then bring up their graphical interface on your desktop. And even with all that, I still cannot see what I typically want to see without multiple clicks. Checking on project status from a phone while away from the office is not an option.</source>
          <target state="translated">Gitユーザーは通常、Gitのサードパーティのグラフィカルビューアをインストールすると言われています。Gitの多くは、プロジェクトの最近のアクティビティをより適切に表示します。それはすばらしいことですが、これらはさらにインストールして個別に管理する必要があるサードパーティのアプリケーションです。多くはプラットフォーム固有です。 （&lt;a href=&quot;https://gitup.co/&quot;&gt;GitUp&lt;/a&gt;などの優れた機能の1つは、たとえばMacでのみ機能します。）まず、ローカルリポジトリを同期してから、デスクトップにグラフィカルインターフェースを表示する必要があります。それでも、何回もクリックしないと、通常見たいものを見ることができません。オフィスから離れているときに電話でプロジェクトのステータスを確認することはできません。</target>
        </trans-unit>
        <trans-unit id="a5d8bfaba744d8865014e1b5776daef69b8ba64a" translate="yes" xml:space="preserve">
          <source>I am told that the default PostgreSQL configuration in RedHat 7.3 is unnecessarily conservative (it is designed to work on a machine with 8MB of RAM) and that PostgreSQL could be made to run a lot faster with some knowledgeable configuration tuning. Matt Sergeant reports that he has tuned his PostgreSQL installation and rerun the tests shown below. His results show that PostgreSQL and MySQL run at about the same speed. For Matt's results, visit</source>
          <target state="translated">私は、RedHat 7.3のデフォルトのPostgreSQLの設定が不必要に保守的であり(8MBのRAMを持つマシンで動作するように設計されています)、PostgreSQLは知識のある設定チューニングを行うことで、より高速に動作させることができると聞いています。Matt Sergeantは、PostgreSQLのインストールをチューニングし、以下に示すテストを再実行したことを報告しています。彼の結果は、PostgreSQLとMySQLがほぼ同じ速度で動作することを示しています。Mattの結果については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="c4b4aed72c495e6b69cc90a12c1002093ba09a73" translate="yes" xml:space="preserve">
          <source>I deleted a lot of data but the database file did not get any smaller. Is this a bug?</source>
          <target state="translated">たくさんのデータを削除しましたが、データベースファイルが小さくなりませんでした。これはバグなのでしょうか?</target>
        </trans-unit>
        <trans-unit id="30c131b4d60b85b44b7c7e76894246c9eeed47f8" translate="yes" xml:space="preserve">
          <source>I get a compiler error if I use the SQLITE_OMIT_... compile-time options when building SQLite.</source>
          <target state="translated">SQLiteを構築する際にSQLITE_OMIT_...コンパイル時オプションを使用すると、コンパイラエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="96380689d1c266e443557fac220e162eb248fe7f" translate="yes" xml:space="preserve">
          <source>I get some compiler warnings when I compile SQLite. Isn't this a problem? Doesn't it indicate poor code quality?</source>
          <target state="translated">SQLiteをコンパイルするとコンパイラの警告が出ます。これは問題ではないのでしょうか?コードの品質が悪いことを示しているのではないでしょうか?</target>
        </trans-unit>
        <trans-unit id="b0631d514fcfd330a2105540a0b813b7c7b65c3f" translate="yes" xml:space="preserve">
          <source>I/O error testing is similar in concept to OOM testing; I/O errors are simulated and checks are made to verify that SQLite responds correctly to the simulated errors. I/O errors are simulated in both the TCL and TH3 test harnesses by inserting a new &lt;a href=&quot;c3ref/vfs&quot;&gt;Virtual File System object&lt;/a&gt; that is specially rigged to simulate an I/O error after a set number of I/O operations. As with OOM error testing, the I/O error simulators can be set to fail just once, or to fail continuously after the first failure. Tests are run in a loop, slowly increasing the point of failure until the test case runs to completion without error. The loop is run twice, once with the I/O error simulator set to simulate only a single failure and a second time with it set to fail all I/O operations after the first failure.</source>
          <target state="translated">I / Oエラーテストの概念はOOMテストと似ています。 I / Oエラーがシミュレートされ、SQLiteがシミュレートされたエラーに正しく応答することを確認するためのチェックが行われます。 I / Oエラーは、TCLとTH3の両方のテストハーネスでシミュレートされ&lt;a href=&quot;c3ref/vfs&quot;&gt;ます。&lt;/a&gt;新しい仮想ファイルシステムオブジェクトを挿入すると、設定された数のI / O操作後にI / Oエラーをシミュレートします。 OOMエラーテストと同様に、I / Oエラーシミュレータは、1回だけ失敗するように設定することも、最初の失敗後に継続的に失敗するように設定することもできます。テストはループで実行され、テストケースがエラーなしで完了まで実行されるまで、障害点が徐々に増加します。ループは2回実行されます。1回目は、単一の障害のみをシミュレートするようにI / Oエラーシミュレータを設定し、2回目は、最初の障害後にすべてのI / O操作を失敗させるように設定します。</target>
        </trans-unit>
        <trans-unit id="7e39c1a666c2fd143f11a87457de9e9888317484" translate="yes" xml:space="preserve">
          <source>I/O error testing seeks to verify that SQLite responds sanely to failed I/O operations. I/O errors might result from a full disk drive, malfunctioning disk hardware, network outages when using a network file system, system configuration or permission changes that occur in the middle of an SQL operation, or other hardware or operating system malfunctions. Whatever the cause, it is important that SQLite be able to respond correctly to these errors and I/O error testing seeks to verify that it does.</source>
          <target state="translated">I/Oエラーのテストでは、失敗したI/O操作に対してSQLiteが正常に応答しているかどうかを確認します。I/Oエラーは、ディスクドライブが一杯になった、ディスクハードウェアの故障、ネットワークファイルシステムを使用しているときのネットワークの停止、SQL操作の途中で発生したシステム構成や権限の変更、その他のハードウェアやオペレーティングシステムの故障などが原因で発生する可能性があります。原因が何であれ、SQLiteがこれらのエラーに正しく応答できることが重要であり、I/Oエラーテストではそれを確認することを目的としています。</target>
        </trans-unit>
        <trans-unit id="8d8651647c9490ad914b1a9a6e6d44929ce46c04" translate="yes" xml:space="preserve">
          <source>I/O error tests</source>
          <target state="translated">入出力エラーテスト</target>
        </trans-unit>
        <trans-unit id="35d92e9f60aece05bafa666d5e6093c27b070d38" translate="yes" xml:space="preserve">
          <source>I/O errors in the OS-interface generate error logging events. The message to these events gives the line number in the source code where the error originated and the filename associated with the event when there is a corresponding file.</source>
          <target state="translated">OS インターフェースの I/O エラーは、エラー・ロギング・イベントを生成します。これらのイベントへのメッセージは、エラーが発生したソースコードの行番号と、対応するファイルがある場合はイベントに関連付けられたファイル名を示します。</target>
        </trans-unit>
        <trans-unit id="d998ed8c49ae368254ded62fce1c76a6c0d44f30" translate="yes" xml:space="preserve">
          <source>I/O performance is measured using the &lt;a href=&quot;https://www.sqlite.org/src/file/test/kvtest.c&quot;&gt;kvtest.c&lt;/a&gt; program from the SQLite source tree. To compile this test program, first gather the kvtest.c source file into a directory with the &lt;a href=&quot;amalgamation&quot;&gt;SQLite amalgamation&lt;/a&gt; source files &quot;sqlite3.c&quot; and &quot;sqlite3.h&quot;. Then on unix, run a command like the following:</source>
          <target state="translated">I / Oパフォーマンスは、SQLiteソースツリーの&lt;a href=&quot;https://www.sqlite.org/src/file/test/kvtest.c&quot;&gt;kvtest.c&lt;/a&gt;プログラムを使用して測定されます。このテストプログラムをコンパイルするには、最初にkvtest.cソースファイルを&lt;a href=&quot;amalgamation&quot;&gt;SQLite融合&lt;/a&gt;ソースファイル「sqlite3.c」と「sqlite3.h」のあるディレクトリに収集します。次に、UNIXで次のようなコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="e779dca751c9ced361a0eadbe7916be59d02dc09" translate="yes" xml:space="preserve">
          <source>I/O performance varies widely depending on operating system and hardware. Make your own measurements before drawing conclusions.</source>
          <target state="translated">I/O性能は、オペレーティングシステムとハードウェアによって大きく異なります。結論を出す前に、独自の測定を行ってください。</target>
        </trans-unit>
        <trans-unit id="267e452e4d048aacef682e30a9d368c22e7501e4" translate="yes" xml:space="preserve">
          <source>IDF(q&lt;sub&gt;i&lt;/sub&gt;)</source>
          <target state="translated">IDF(q&lt;sub&gt;i&lt;/sub&gt;)</target>
        </trans-unit>
        <trans-unit id="7be63e2881f7da8faa393bfe0ce4667f10916b66" translate="yes" xml:space="preserve">
          <source>IF</source>
          <target state="translated">IF</target>
        </trans-unit>
        <trans-unit id="235cae5b9c97fbc3364fb92af44d64b71392dbb2" translate="yes" xml:space="preserve">
          <source>IF EXISTS and IF NOT EXISTS clauses on CREATE/DROP TABLE/INDEX.</source>
          <target state="translated">CREATE/DROP TABLE/INDEXのIF EXISTS句とIF NOT EXISTS句。</target>
        </trans-unit>
        <trans-unit id="c9226f99dd645a71848cf0585c15059d7de868f4" translate="yes" xml:space="preserve">
          <source>IGNORE</source>
          <target state="translated">IGNORE</target>
        </trans-unit>
        <trans-unit id="8ae3e8381a64e36db57a5344790db89d7de90954" translate="yes" xml:space="preserve">
          <source>IMMEDIATE</source>
          <target state="translated">IMMEDIATE</target>
        </trans-unit>
        <trans-unit id="1f94ea3de1605903ae5123660f5457eb8bd32e9f" translate="yes" xml:space="preserve">
          <source>IMMEDIATE cause the database connection to start a new write immediately, without waiting for a writes statement. The BEGIN IMMEDIATE might fail with &lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt; if another write transaction is already active on another database connection.</source>
          <target state="translated">IMMEDIATEを指定すると、データベース接続は、書き込みステートメントを待たずに、新しい書き込みをすぐに開始します。別のデータベース接続で別の書き込みトランザクションがすでにアクティブになっている場合、BEGIN IMMEDIATEは&lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSYで&lt;/a&gt;失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="ac8fb933cd53d38ff3f25855409c3725df641570" translate="yes" xml:space="preserve">
          <source>IMPORTANT: The estimatedRows field was added to the sqlite3_index_info structure for SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_8_2.html&quot;&gt;version 3.8.2&lt;/a&gt; (2013-12-06). If a virtual table extension is used with an SQLite version earlier than 3.8.2, the results of attempting to read or write the estimatedRows field are undefined (but are likely to included crashing the application). The estimatedRows field should therefore only be used if &lt;a href=&quot;#sqlite3_libversion&quot;&gt;sqlite3_libversion_number()&lt;/a&gt; returns a value greater than or equal to 3008002. Similarly, the idxFlags field was added for &lt;a href=&quot;https://sqlite.org/releaselog/3_9_0.html&quot;&gt;version 3.9.0&lt;/a&gt; (2015-10-14). It may therefore only be used if sqlite3_libversion_number() returns a value greater than or equal to 3009000.</source>
          <target state="translated">重要：見積り行フィールドは、SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_8_2.html&quot;&gt;バージョン3.8.2&lt;/a&gt;（2013-12-06）のsqlite3_index_info構造に追加されました。仮想テーブル拡張が3.8.2より前のバージョンのSQLiteで使用されている場合、stimulatedRowsフィールドの読み取りまたは書き込みを試みた結果は未定義です（ただし、アプリケーションのクラッシュが含まれる可能性があります）。したがって、stimulatedRowsフィールドは、&lt;a href=&quot;#sqlite3_libversion&quot;&gt;sqlite3_libversion_number（）&lt;/a&gt;が3008002以上の値を返す場合にのみ使用する必要があります。同様に、idxFlagsフィールドは&lt;a href=&quot;https://sqlite.org/releaselog/3_9_0.html&quot;&gt;バージョン3.9.0&lt;/a&gt;（2015-10-14）で追加されました。したがって、sqlite3_libversion_number（）が3009000以上の値を返す場合にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="f7788b148a07ca2844906ea43293afae622f959f" translate="yes" xml:space="preserve">
          <source>IMPORTANT: The estimatedRows field was added to the sqlite3_index_info structure for SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_8_2.html&quot;&gt;version 3.8.2&lt;/a&gt; (2013-12-06). If a virtual table extension is used with an SQLite version earlier than 3.8.2, the results of attempting to read or write the estimatedRows field are undefined (but are likely to included crashing the application). The estimatedRows field should therefore only be used if &lt;a href=&quot;libversion&quot;&gt;sqlite3_libversion_number()&lt;/a&gt; returns a value greater than or equal to 3008002. Similarly, the idxFlags field was added for &lt;a href=&quot;https://sqlite.org/releaselog/3_9_0.html&quot;&gt;version 3.9.0&lt;/a&gt; (2015-10-14). It may therefore only be used if sqlite3_libversion_number() returns a value greater than or equal to 3009000.</source>
          <target state="translated">重要：見積り行フィールドは、SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_8_2.html&quot;&gt;バージョン3.8.2&lt;/a&gt;（2013-12-06）のsqlite3_index_info構造に追加されました。仮想テーブル拡張が3.8.2より前のバージョンのSQLiteで使用されている場合、stimulatedRowsフィールドの読み取りまたは書き込みを試みた結果は未定義です（ただし、アプリケーションのクラッシュが含まれる可能性があります）。したがって、stimulatedRowsフィールドは、&lt;a href=&quot;libversion&quot;&gt;sqlite3_libversion_number（）&lt;/a&gt;が3008002以上の値を返す場合にのみ使用する必要があります。同様に、idxFlagsフィールドは&lt;a href=&quot;https://sqlite.org/releaselog/3_9_0.html&quot;&gt;バージョン3.9.0&lt;/a&gt;（2015-10-14）で追加されました。したがって、sqlite3_libversion_number（）が3009000以上の値を返す場合にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="6fca55ca3c828a46bfe96a10e69f572b61ce540c" translate="yes" xml:space="preserve">
          <source>IN</source>
          <target state="translated">IN</target>
        </trans-unit>
        <trans-unit id="9e93d8e547641024337c9f88c37aeeb56b09cfd4" translate="yes" xml:space="preserve">
          <source>IN operator</source>
          <target state="translated">インオペレータ</target>
        </trans-unit>
        <trans-unit id="2704c1d8c3fc215c38ee176f6cc30e434a22b7d7" translate="yes" xml:space="preserve">
          <source>INDEX</source>
          <target state="translated">INDEX</target>
        </trans-unit>
        <trans-unit id="d34941b7cef935d2b4b0705a24e87fad9ef16cef" translate="yes" xml:space="preserve">
          <source>INDEXED</source>
          <target state="translated">INDEXED</target>
        </trans-unit>
        <trans-unit id="0a477a77f065212096e980b210eda0227cabf37c" translate="yes" xml:space="preserve">
          <source>INDEXED BY</source>
          <target state="translated">インデックス化された</target>
        </trans-unit>
        <trans-unit id="fd4d2f0d5aa850e30c0830c19e27d0fa4c65c7a7" translate="yes" xml:space="preserve">
          <source>INITIALLY</source>
          <target state="translated">INITIALLY</target>
        </trans-unit>
        <trans-unit id="88d86d54436967d4b4599d22d53c2a3db38390e6" translate="yes" xml:space="preserve">
          <source>INNER</source>
          <target state="translated">INNER</target>
        </trans-unit>
        <trans-unit id="c20ea07e32d25c072a65368c234d6f5a88f4521a" translate="yes" xml:space="preserve">
          <source>INSERT</source>
          <target state="translated">INSERT</target>
        </trans-unit>
        <trans-unit id="06c4e866c3ade62ba74b04b1ef54dce90603c067" translate="yes" xml:space="preserve">
          <source>INSERT Changes</source>
          <target state="translated">INSERT変更</target>
        </trans-unit>
        <trans-unit id="4e7c6a59e9c103dd735d95fe84726b20fe104acf" translate="yes" xml:space="preserve">
          <source>INSERT INTO demo2(command) VALUES(&quot;reset&quot;);</source>
          <target state="translated">INSERT INTO demo2(command)VALUES(&quot;reset&quot;)。</target>
        </trans-unit>
        <trans-unit id="ed9844477a7bb01e976b863376804eb769331989" translate="yes" xml:space="preserve">
          <source>INSERT INTO t1 SELECT b,a,c FROM t2;</source>
          <target state="translated">INSERT INTO t1 SELECT b,a,c FROM t2.</target>
        </trans-unit>
        <trans-unit id="767dcfed1e7a66d267a3220fbe439232373351ee" translate="yes" xml:space="preserve">
          <source>INSERT INTO t1 VALUES(1,10719,'ten thousand seven hundred nineteen');</source>
          <target state="translated">INSERT INTO t1 VALUES(1,10719,'10,000,700,19').</target>
        </trans-unit>
        <trans-unit id="a30ee5b0b970fc276bf5d3453cfa994508fd0177" translate="yes" xml:space="preserve">
          <source>INSERT INTO t1 VALUES(1,13153,'thirteen thousand one hundred fifty three');</source>
          <target state="translated">INSERT INTO t1 VALUES(1,13153,'13,000,1503').</target>
        </trans-unit>
        <trans-unit id="4bc6de27aceadc240c8dd43059a82f9a9561379b" translate="yes" xml:space="preserve">
          <source>INSERT INTO t1 VALUES(1000,94142,'ninety four thousand one hundred forty two');</source>
          <target state="translated">INSERT INTO t1 VALUES(1000,94142,'ninetty four thousand one hundred forty two').</target>
        </trans-unit>
        <trans-unit id="62d9636f68aa675dabacb22b938d9f2be06b55e0" translate="yes" xml:space="preserve">
          <source>INSERT INTO t1 VALUES(11999,72836,'seventy two thousand eight hundred thirty six');</source>
          <target state="translated">INSERT INTO t1 VALUES(11999,72836,'772,000 8,300,316').</target>
        </trans-unit>
        <trans-unit id="f0fbe2df8c33450eafb90fd96d71291641e02aa4" translate="yes" xml:space="preserve">
          <source>INSERT INTO t1 VALUES(12000,64231,'sixty four thousand two hundred thirty one');</source>
          <target state="translated">INSERT INTO t1 VALUES(12000,64231,'s sixty four thousand two hundred thirty one').</target>
        </trans-unit>
        <trans-unit id="31a76630ad88d2e05dde2c415d8576db8ec6caf9" translate="yes" xml:space="preserve">
          <source>INSERT INTO t1 VALUES(2,75560,'seventy five thousand five hundred sixty');</source>
          <target state="translated">INSERT INTO t1 VALUES(2,75560,'70万5,000 5,600').</target>
        </trans-unit>
        <trans-unit id="215d5732ce27fd223582c712aaa4660a83a173d4" translate="yes" xml:space="preserve">
          <source>INSERT INTO t1 VALUES(998,66289,'sixty six thousand two hundred eighty nine');</source>
          <target state="translated">INSERT INTO t1 VALUES(998,66289,'sixty six six thousand two hundred8y nine')。</target>
        </trans-unit>
        <trans-unit id="4b533e1d2a14d2013c249801c64abee1873ad0e7" translate="yes" xml:space="preserve">
          <source>INSERT INTO t1 VALUES(999,24322,'twenty four thousand three hundred twenty two');</source>
          <target state="translated">INSERT INTO t1 VALUES(999,24322,'twenty four thousand three hundred twenty two').</target>
        </trans-unit>
        <trans-unit id="c97d31d96ba9608129ccb018853e9ea9cb6076d1" translate="yes" xml:space="preserve">
          <source>INSERT INTO t2 SELECT * FROM t1;</source>
          <target state="translated">INSERT INTO t2 SELECT*FROM t1.</target>
        </trans-unit>
        <trans-unit id="18573be7d634b7266c9f3fabe6799c0e9de399b2" translate="yes" xml:space="preserve">
          <source>INSERT INTO t2 SELECT b,a,c FROM t1;</source>
          <target state="translated">INSERT INTO t2 SELECT b,a,c FROM t1.</target>
        </trans-unit>
        <trans-unit id="6654bc4310d1eef443b5f0f2c1641262634e1e66" translate="yes" xml:space="preserve">
          <source>INSERT INTO t2 VALUES(1,59672,'fifty nine thousand six hundred seventy two');</source>
          <target state="translated">INSERT INTO t2 VALUES(1,59672,'fifty nine thousand six hundred seventy two').</target>
        </trans-unit>
        <trans-unit id="94d1d27ed943c864c7cfd96715bf162e7beab100" translate="yes" xml:space="preserve">
          <source>INSERT INTO t2 VALUES(24999,89569,'eighty nine thousand five hundred sixty nine');</source>
          <target state="translated">INSERT INTO t2 VALUES(24999,89569,'889,000,500,600')。</target>
        </trans-unit>
        <trans-unit id="253860cdd49bceb80fa941fa6a7a8aa222a2af3e" translate="yes" xml:space="preserve">
          <source>INSERT INTO t2 VALUES(25000,94666,'ninety four thousand six hundred sixty six');</source>
          <target state="translated">INSERT INTO t2 VALUES(25000,94666,'ninety four thousand six hundred sixty six').</target>
        </trans-unit>
        <trans-unit id="0e8f253b1b555988f2df4dcb60865d19307f1b0c" translate="yes" xml:space="preserve">
          <source>INSERT INTO t3 VALUES(24999,88509,'eighty eight thousand five hundred nine');</source>
          <target state="translated">INSERT INTO t3 VALUES(24999,88509,'八千五百九')。</target>
        </trans-unit>
        <trans-unit id="00be643bf7f738dedf700c9b2a35f10694c7941a" translate="yes" xml:space="preserve">
          <source>INSERT INTO t3 VALUES(25000,84791,'eighty four thousand seven hundred ninety one');</source>
          <target state="translated">INSERT INTO t3 VALUES(25000,84791,'884,000 7,900,91').</target>
        </trans-unit>
        <trans-unit id="eb2365c71aa4f9cd4a1bfec486fd83fcbdda7977" translate="yes" xml:space="preserve">
          <source>INSERT INTO tab1 VALUES(?,?,?);</source>
          <target state="translated">INSERT INTO tab1 VALUES(?,?)</target>
        </trans-unit>
        <trans-unit id="0666a7f2affc6b3653a4c2bdf54c9b4bb98361ed" translate="yes" xml:space="preserve">
          <source>INSERT INTO xyz(xyz) VALUES('automerge=N');</source>
          <target state="translated">INSERT INTO xyz(xyz)VALUES('automerge=N').</target>
        </trans-unit>
        <trans-unit id="4e8b9a8e297bede64cc05b119a6cea847e694a59" translate="yes" xml:space="preserve">
          <source>INSERT INTO xyz(xyz) VALUES('integrity-check');</source>
          <target state="translated">INSERT INTO xyz(xyz)VALUES('integrity-check')。</target>
        </trans-unit>
        <trans-unit id="f5e0d229ccc9b20df140de91fa55ac169f3840fe" translate="yes" xml:space="preserve">
          <source>INSERT INTO xyz(xyz) VALUES('merge=X,Y');</source>
          <target state="translated">INSERT INTO xyz(xyz)VALUES('merge=X,Y').</target>
        </trans-unit>
        <trans-unit id="5af88d4a59ba50ff893198ed67ae451d74a117e2" translate="yes" xml:space="preserve">
          <source>INSERT INTO xyz(xyz) VALUES('optimize');</source>
          <target state="translated">INSERT INTO xyz(xyz)VALUES('optimize')。</target>
        </trans-unit>
        <trans-unit id="13f47444da210de43c60aab402a316dfe2becb56" translate="yes" xml:space="preserve">
          <source>INSERT INTO xyz(xyz) VALUES('rebuild');</source>
          <target state="translated">INSERT INTO xyz(xyz)VALUES('rebuild')。</target>
        </trans-unit>
        <trans-unit id="2f103f7920401a2a0647c3f2159a7c89eabff571" translate="yes" xml:space="preserve">
          <source>INSERT is really slow - I can only do few dozen INSERTs per second</source>
          <target state="translated">INSERTは本当に遅い-私は1秒間に数十回のINSERTしかできません。</target>
        </trans-unit>
        <trans-unit id="62d1399645f66158b7511abeddf89f395dea5fde" translate="yes" xml:space="preserve">
          <source>INSERT runs a little faster when the source is a SELECT statement.</source>
          <target state="translated">INSERTは、ソースがSELECT文の場合、少し速く実行されます。</target>
        </trans-unit>
        <trans-unit id="aeb597e62b4ad26deac5b62c60062c710ea90371" translate="yes" xml:space="preserve">
          <source>INSTEAD</source>
          <target state="translated">INSTEAD</target>
        </trans-unit>
        <trans-unit id="2300ac39d09a99728ae682403c03797ee8da658b" translate="yes" xml:space="preserve">
          <source>INSTEAD OF trigger</source>
          <target state="translated">トリガーの代わりに</target>
        </trans-unit>
        <trans-unit id="d8374d53c837e126cb6abc0132fba2a1f9a3a9c8" translate="yes" xml:space="preserve">
          <source>INSTEAD OF triggers</source>
          <target state="translated">トリガーの代わりに</target>
        </trans-unit>
        <trans-unit id="793985cddb68d46ef51b688aecf85864c9e06813" translate="yes" xml:space="preserve">
          <source>INT</source>
          <target state="translated">INT</target>
        </trans-unit>
        <trans-unit id="a3a0ec55e3e26ee54417c786dfad5d709ecb7c40" translate="yes" xml:space="preserve">
          <source>INT2</source>
          <target state="translated">INT2</target>
        </trans-unit>
        <trans-unit id="021a30ffe1ce8750cb57ce941d7fb3d04090b37c" translate="yes" xml:space="preserve">
          <source>INT8</source>
          <target state="translated">INT8</target>
        </trans-unit>
        <trans-unit id="0fe37e40e5dab3ac411c2ddca6d21991e811acfa" translate="yes" xml:space="preserve">
          <source>INTEGER</source>
          <target state="translated">INTEGER</target>
        </trans-unit>
        <trans-unit id="e3752510d6a9d0fb8f3974168ca6bea1a562a9ac" translate="yes" xml:space="preserve">
          <source>INTEGER PRIMARY KEY columns can be used to implement the equivalent of AUTOINCREMENT. If you try to insert a NULL into an INTEGER PRIMARY KEY column, the column will actually be filled with an integer that is one greater than the largest key already in the table. Or if the largest key is 2147483647, then the column will be filled with a random integer. Either way, the INTEGER PRIMARY KEY column will be assigned a unique integer. You can retrieve this integer using the &lt;b&gt;sqlite_last_insert_rowid()&lt;/b&gt; API function or using the &lt;b&gt;last_insert_rowid()&lt;/b&gt; SQL function in a subsequent SELECT statement.</source>
          <target state="translated">INTEGER PRIMARY KEY列を使用して、AUTOINCREMENTと同等の機能を実装できます。INTEGER PRIMARY KEY列にNULLを挿入しようとすると、実際には、列は、テーブルに既に存在する最大のキーよりも1大きい整数で埋められます。または、最大のキーが2147483647の場合、列はランダムな整数で埋められます。どちらの方法でも、INTEGER PRIMARY KEY列には一意の整数が割り当てられます。この整数を取得するには、&lt;b&gt;sqlite_last_insert_rowid（）&lt;/b&gt; API関数を使用するか、後続のSELECTステートメントで&lt;b&gt;last_insert_rowid（）&lt;/b&gt; SQL関数を使用します。</target>
        </trans-unit>
        <trans-unit id="6f436e25f27f33e27c6053472309a17baa61d133" translate="yes" xml:space="preserve">
          <source>INTERFACE</source>
          <target state="translated">INTERFACE</target>
        </trans-unit>
        <trans-unit id="3230de938114213aa9c2d1e95f291cad51ede171" translate="yes" xml:space="preserve">
          <source>INTERSECT</source>
          <target state="translated">INTERSECT</target>
        </trans-unit>
        <trans-unit id="ce45b16212fe00c28d1a00de9cdfe954aa5bdc83" translate="yes" xml:space="preserve">
          <source>INTO</source>
          <target state="translated">INTO</target>
        </trans-unit>
        <trans-unit id="ec4a2a5056d72d8e03345caaebf4607d163e6dd7" translate="yes" xml:space="preserve">
          <source>IS</source>
          <target state="translated">IS</target>
        </trans-unit>
        <trans-unit id="819809f7649d3da66fd65a40dff83509ed2b98d0" translate="yes" xml:space="preserve">
          <source>IS NOT</source>
          <target state="translated">ではない</target>
        </trans-unit>
        <trans-unit id="437390c0773d23a0b0e272480ef7204b356f23ad" translate="yes" xml:space="preserve">
          <source>IS operator</source>
          <target state="translated">アイエスえんざんし</target>
        </trans-unit>
        <trans-unit id="4e93120a53b25e7642cc15924ececcc7c79ac693" translate="yes" xml:space="preserve">
          <source>ISNULL</source>
          <target state="translated">ISNULL</target>
        </trans-unit>
        <trans-unit id="c8c6b6fe3176986c9e57f2648e139dfd273d0908" translate="yes" xml:space="preserve">
          <source>Ideally, all changes for an entire write transaction are buffered in the page cache until the end of the transaction. When the user commits the transaction, all changes are applied to the database file in the most efficient way possible, taking into account the assumptions enumerated in section</source>
          <target state="translated">理想的には、書き込みトランザクション全体に対するすべての変更は、トランザクションが終了するまでページキャッシュにバッファリングされる。ユーザがトランザクションをコミットするとき、すべての変更は、セクション</target>
        </trans-unit>
        <trans-unit id="6acc0ba610f36525f417357719583f041f6f89df" translate="yes" xml:space="preserve">
          <source>Identify all methods for important objects in the interface documentation. (&lt;a href=&quot;c3ref/context&quot;&gt;example&lt;/a&gt;)</source>
          <target state="translated">インターフェイスドキュメントで重要なオブジェクトのすべてのメソッドを特定します。（&lt;a href=&quot;c3ref/context&quot;&gt;例&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="b22904746b6da6e6da1cdf65a007a3a92ddeb189" translate="yes" xml:space="preserve">
          <source>IdxDelete</source>
          <target state="translated">IdxDelete</target>
        </trans-unit>
        <trans-unit id="366f895979adef772b50f0a751ee770dc166bab5" translate="yes" xml:space="preserve">
          <source>IdxGE</source>
          <target state="translated">IdxGE</target>
        </trans-unit>
        <trans-unit id="267d8b7b66c2e63c7420b46c7edd1ef118e13442" translate="yes" xml:space="preserve">
          <source>IdxGT</source>
          <target state="translated">IdxGT</target>
        </trans-unit>
        <trans-unit id="bdc0a8ea07737acbd00822ec9e49840776244c14" translate="yes" xml:space="preserve">
          <source>IdxInsert</source>
          <target state="translated">IdxInsert</target>
        </trans-unit>
        <trans-unit id="ba9bc003fbf28927e55ed674e6312a7b981c1435" translate="yes" xml:space="preserve">
          <source>IdxLE</source>
          <target state="translated">IdxLE</target>
        </trans-unit>
        <trans-unit id="11ede54300baae62726a3150e6c2f825098c4577" translate="yes" xml:space="preserve">
          <source>IdxLT</source>
          <target state="translated">IdxLT</target>
        </trans-unit>
        <trans-unit id="c82f35a450e8e6ba85d6a5ba639866e8424ba8d9" translate="yes" xml:space="preserve">
          <source>IdxRowid</source>
          <target state="translated">IdxRowid</target>
        </trans-unit>
        <trans-unit id="751c68a3471b1c791efaee0a8e7c24ea0c266efd" translate="yes" xml:space="preserve">
          <source>If</source>
          <target state="translated">If</target>
        </trans-unit>
        <trans-unit id="7194c23292e4ec0e7bfbbaa15bc21cc90107f2f5" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#sqlite3_value&quot;&gt;sqlite3_value&lt;/a&gt; object V was initialized using &lt;a href=&quot;#sqlite3_bind_blob&quot;&gt;sqlite3_bind_pointer(S,I,P,X,D)&lt;/a&gt; or &lt;a href=&quot;#sqlite3_result_blob&quot;&gt;sqlite3_result_pointer(C,P,X,D)&lt;/a&gt; and if X and Y are strings that compare equal according to strcmp(X,Y), then sqlite3_value_pointer(V,Y) will return the pointer P. Otherwise, sqlite3_value_pointer(V,Y) returns a NULL. The sqlite3_bind_pointer() routine is part of the &lt;a href=&quot;bindptr&quot;&gt;pointer passing interface&lt;/a&gt; added for SQLite 3.20.0.</source>
          <target state="translated">場合&lt;a href=&quot;#sqlite3_value&quot;&gt;sqlite3_value&lt;/a&gt;オブジェクトVを用いて初期化された&lt;a href=&quot;#sqlite3_bind_blob&quot;&gt;（S、I、P、X、D）sqlite3_bind_pointerを&lt;/a&gt;又は&lt;a href=&quot;#sqlite3_result_blob&quot;&gt;sqlite3_result_pointer（C、P、X、D）&lt;/a&gt;とX及びYは、その後のstrcmpに等しい係る比較文字列（X、Y）を、ある場合sqlite3_value_pointer（V、Y）はポインターPを返します。それ以外の場合、sqlite3_value_pointer（V、Y）はNULLを返します。 sqlite3_bind_pointer（）ルーチンは、SQLite 3.20.0に追加された&lt;a href=&quot;bindptr&quot;&gt;ポインター受け渡しインターフェースの&lt;/a&gt;一部です。</target>
        </trans-unit>
        <trans-unit id="6f26b5b5b34df807b99862702ef8a28042e009ca" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../uri&quot;&gt;URI filename&lt;/a&gt; interpretation is enabled, and the filename argument begins with &quot;file:&quot;, then the filename is interpreted as a URI. URI filename interpretation is enabled if the &lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_URI&lt;/a&gt; flag is set in the third argument to sqlite3_open_v2(), or if it has been enabled globally using the &lt;a href=&quot;c_config_covering_index_scan#sqliteconfiguri&quot;&gt;SQLITE_CONFIG_URI&lt;/a&gt; option with the &lt;a href=&quot;config&quot;&gt;sqlite3_config()&lt;/a&gt; method or by the &lt;a href=&quot;../compile#use_uri&quot;&gt;SQLITE_USE_URI&lt;/a&gt; compile-time option. URI filename interpretation is turned off by default, but future releases of SQLite might enable URI filename interpretation by default. See &quot;&lt;a href=&quot;../uri&quot;&gt;URI filenames&lt;/a&gt;&quot; for additional information.</source>
          <target state="translated">場合&lt;a href=&quot;../uri&quot;&gt;URIファイル名の&lt;/a&gt;解釈が有効になっている、とfilename引数で始まる「ファイル：」、そしてファイル名はURIと解釈されます。&lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_URI&lt;/a&gt;フラグがsqlite3_open_v2（）の3番目の引数で設定されている場合、または&lt;a href=&quot;config&quot;&gt;sqlite3_config（）&lt;/a&gt;メソッドで&lt;a href=&quot;c_config_covering_index_scan#sqliteconfiguri&quot;&gt;SQLITE_CONFIG_URI&lt;/a&gt;オプションを使用するか、&lt;a href=&quot;../compile#use_uri&quot;&gt;SQLITE_USE_URI&lt;/a&gt;コンパイル時オプションによってグローバルに有効にされている場合、URIファイル名の解釈が有効になります。 URIファイル名の解釈はデフォルトでオフになっていますが、SQLiteの将来のリリースでは、URIファイル名の解釈がデフォルトで有効になる可能性があります。詳細については、「&lt;a href=&quot;../uri&quot;&gt;URIファイル名&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="05071756ec11a7890791b184fe1e16795132ff77" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;foreignkeys&quot;&gt;foreign key constraints&lt;/a&gt; are &lt;a href=&quot;pragma#pragma_foreign_keys&quot;&gt;enabled&lt;/a&gt; and a column with a &lt;a href=&quot;syntax/foreign-key-clause&quot;&gt;REFERENCES clause&lt;/a&gt; is added, the column must have a default value of NULL.</source>
          <target state="translated">場合は&lt;a href=&quot;foreignkeys&quot;&gt;、外部キー制約が&lt;/a&gt;されている&lt;a href=&quot;pragma#pragma_foreign_keys&quot;&gt;有効&lt;/a&gt;と持つ列&lt;a href=&quot;syntax/foreign-key-clause&quot;&gt;REFERENCES句が&lt;/a&gt;追加され、列がNULLのデフォルト値を持っている必要があります。</target>
        </trans-unit>
        <trans-unit id="4f1ff78b03ab38bd9d7bc0c0b70bf71a047d9c7f" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;foreignkeys&quot;&gt;foreign key constraints&lt;/a&gt; are enabled, a DROP TABLE command performs an implicit &lt;a href=&quot;lang_delete&quot;&gt;DELETE FROM&lt;/a&gt; command before removing the table from the database schema. Any triggers attached to the table are dropped from the database schema before the implicit DELETE FROM is executed, so this cannot cause any triggers to fire. By contrast, an implicit DELETE FROM does cause any configured &lt;a href=&quot;foreignkeys#fk_actions&quot;&gt;foreign key actions&lt;/a&gt; to take place. If the implicit DELETE FROM executed as part of a DROP TABLE command violates any immediate foreign key constraints, an error is returned and the table is not dropped. If the implicit DELETE FROM causes any deferred foreign key constraints to be violated, and the violations still exist when the transaction is committed, an error is returned at the time of commit.</source>
          <target state="translated">場合は&lt;a href=&quot;foreignkeys&quot;&gt;、外部キー制約が&lt;/a&gt;有効になっている、DROP TABLEコマンドは、暗黙の実行&lt;a href=&quot;lang_delete&quot;&gt;FROM DELETE&lt;/a&gt;データベーススキーマからテーブルを削除する前にコマンドを。テーブルにアタッチされているトリガーは、暗黙的なDELETE FROMが実行される前にデータベーススキーマから削除されるため、トリガーが起動することはありません。対照的に、暗黙的なDELETE FROMは、構成済みの&lt;a href=&quot;foreignkeys#fk_actions&quot;&gt;外部キーアクションを&lt;/a&gt;引き起こします行われます。DROP TABLEコマンドの一部として実行された暗黙のDELETE FROMが即時の外部キー制約に違反している場合、エラーが返され、テーブルは削除されません。暗黙のDELETE FROMによって遅延外部キー制約に違反し、トランザクションがコミットされたときに違反がまだ存在する場合、コミット時にエラーが返されます。</target>
        </trans-unit>
        <trans-unit id="5f1e27999e2bb2ba42de86bd45d31998c0603f29" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;pragma#pragma_journal_mode&quot;&gt;PRAGMA journal_mode&lt;/a&gt; is set to OFF (thus disabling the rollback journal file) then the behavior of the ROLLBACK command is undefined.</source>
          <target state="translated">場合&lt;a href=&quot;pragma#pragma_journal_mode&quot;&gt;プラグマjournal_modeが&lt;/a&gt;（したがって、ロールバック・ジャーナル・ファイルを無効にする）OFFに設定され、その後ROLLBACKコマンドの動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="ff29cd60491f93076673fb75bedc0744960c9309" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;pragma#pragma_locking_mode&quot;&gt;EXCLUSIVE locking mode&lt;/a&gt; is set prior to the first WAL-mode database access, then SQLite never attempts to call any of the shared-memory methods and hence no shared-memory wal-index is ever created. In that case, the database connection remains in EXCLUSIVE mode as long as the journal mode is WAL; attempts to change the locking mode using &quot;&lt;code&gt;PRAGMA locking_mode=NORMAL;&lt;/code&gt;&quot; are no-ops. The only way to change out of EXCLUSIVE locking mode is to first change out of WAL journal mode.</source>
          <target state="translated">場合&lt;a href=&quot;pragma#pragma_locking_mode&quot;&gt;排他的ロックモードが&lt;/a&gt;最初WALモードデータベースアクセスの前に設定され、その後、共有メモリのいずれかの方法、従ってない共有メモリウォルマートインデックスを呼び出すためのSQLite決して試みはこれまでに作成されています。その場合、データベース接続は、ジャーナルモードがWALである限り、EXCLUSIVEモードのままです。 「 &lt;code&gt;PRAGMA locking_mode=NORMAL;&lt;/code&gt; 」を使用してロックモードを変更しようとすると、何も起こりません。 EXCLUSIVEロックモードを変更する唯一の方法は、最初にWALジャーナルモードを変更することです。</target>
        </trans-unit>
        <trans-unit id="53ecc95d367e022d4f668ded862caf4b37a61a3f" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;uri&quot;&gt;URI filename&lt;/a&gt; interpretation is enabled, and the filename argument begins with &quot;file:&quot;, then the filename is interpreted as a URI. URI filename interpretation is enabled if the &lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_URI&lt;/a&gt; flag is set in the third argument to sqlite3_open_v2(), or if it has been enabled globally using the &lt;a href=&quot;#sqliteconfiguri&quot;&gt;SQLITE_CONFIG_URI&lt;/a&gt; option with the &lt;a href=&quot;#sqlite3_config&quot;&gt;sqlite3_config()&lt;/a&gt; method or by the &lt;a href=&quot;compile#use_uri&quot;&gt;SQLITE_USE_URI&lt;/a&gt; compile-time option. URI filename interpretation is turned off by default, but future releases of SQLite might enable URI filename interpretation by default. See &quot;&lt;a href=&quot;uri&quot;&gt;URI filenames&lt;/a&gt;&quot; for additional information.</source>
          <target state="translated">場合&lt;a href=&quot;uri&quot;&gt;URIファイル名の&lt;/a&gt;解釈が有効になっている、とfilename引数で始まる「ファイル：」、そしてファイル名はURIと解釈されます。&lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_URI&lt;/a&gt;フラグがsqlite3_open_v2（）の3番目の引数で設定されている場合、または&lt;a href=&quot;#sqlite3_config&quot;&gt;sqlite3_config（）&lt;/a&gt;メソッドで&lt;a href=&quot;#sqliteconfiguri&quot;&gt;SQLITE_CONFIG_URI&lt;/a&gt;オプションを使用するか、&lt;a href=&quot;compile#use_uri&quot;&gt;SQLITE_USE_URI&lt;/a&gt;コンパイル時オプションによってグローバルに有効にされている場合、URIファイル名の解釈が有効になります。 URIファイル名の解釈はデフォルトでオフになっていますが、SQLiteの将来のリリースでは、URIファイル名の解釈がデフォルトで有効になる可能性があります。詳細については、「&lt;a href=&quot;uri&quot;&gt;URIファイル名&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="0b1cbecea1bfc84769a23d468c11c6578d2f04c8" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;value&quot;&gt;sqlite3_value&lt;/a&gt; object V was initialized using &lt;a href=&quot;bind_blob&quot;&gt;sqlite3_bind_pointer(S,I,P,X,D)&lt;/a&gt; or &lt;a href=&quot;result_blob&quot;&gt;sqlite3_result_pointer(C,P,X,D)&lt;/a&gt; and if X and Y are strings that compare equal according to strcmp(X,Y), then sqlite3_value_pointer(V,Y) will return the pointer P. Otherwise, sqlite3_value_pointer(V,Y) returns a NULL. The sqlite3_bind_pointer() routine is part of the &lt;a href=&quot;../bindptr&quot;&gt;pointer passing interface&lt;/a&gt; added for SQLite 3.20.0.</source>
          <target state="translated">場合&lt;a href=&quot;value&quot;&gt;sqlite3_value&lt;/a&gt;オブジェクトVを用いて初期化された&lt;a href=&quot;bind_blob&quot;&gt;（S、I、P、X、D）sqlite3_bind_pointerを&lt;/a&gt;又は&lt;a href=&quot;result_blob&quot;&gt;sqlite3_result_pointer（C、P、X、D）&lt;/a&gt;とX及びYは、その後のstrcmpに等しい係る比較文字列（X、Y）を、ある場合sqlite3_value_pointer（V、Y）はポインターPを返します。それ以外の場合、sqlite3_value_pointer（V、Y）はNULLを返します。 sqlite3_bind_pointer（）ルーチンは、SQLite 3.20.0に追加された&lt;a href=&quot;../bindptr&quot;&gt;ポインター受け渡しインターフェースの&lt;/a&gt;一部です。</target>
        </trans-unit>
        <trans-unit id="efa51497a7f80ea6cb0e82aee000934c754a4257" translate="yes" xml:space="preserve">
          <source>If A&amp;lt;B THEN B&amp;gt;A.</source>
          <target state="translated">A &amp;lt;B THEN B&amp;gt; Aの場合。</target>
        </trans-unit>
        <trans-unit id="af85ab5198e03592c9a1e93f75055ff7f7b4d432" translate="yes" xml:space="preserve">
          <source>If A&amp;lt;B and B&amp;lt;C then A&amp;lt;C.</source>
          <target state="translated">A &amp;lt;BおよびB &amp;lt;Cの場合、A &amp;lt;Cです。</target>
        </trans-unit>
        <trans-unit id="ee7bb0a19c51474ba2d6ea010cd538d977b0b7a6" translate="yes" xml:space="preserve">
          <source>If A==B and B==C then A==C.</source>
          <target state="translated">A==BでB==Cならば、A==Cとなります。</target>
        </trans-unit>
        <trans-unit id="ad62f244096def890ab26a681e8f0120126f5af5" translate="yes" xml:space="preserve">
          <source>If A==B then B==A.</source>
          <target state="translated">A==Bならば、B==Aとなります。</target>
        </trans-unit>
        <trans-unit id="215c914a1a9a516e367b5ac91682005ac659922c" translate="yes" xml:space="preserve">
          <source>If AUTOVACUUM is enabled then it is possible that another root page might be moved into the newly deleted root page in order to keep all root pages contiguous at the beginning of the database. The former value of the root page that moved - its value before the move occurred - is stored in register P2. If no page movement was required (because the table being dropped was already the last one in the database) then a zero is stored in register P2. If AUTOVACUUM is disabled then a zero is stored in register P2.</source>
          <target state="translated">AUTOVACUUMが有効になっている場合、データベースの開始時にすべてのルートページが連続している状態を維持するために、別のルートページが新しく削除されたルートページに移動される可能性があります。移動したルートページの前の値-移動が発生する前の値-は、レジスタP2に格納されます。ページ移動が必要なかった場合(削除されるテーブルがデータベース内の最後のテーブルだったため)、レジスタP2にゼロが格納されます。AUTOVACUUMが無効になっている場合、ゼロがレジスタP2に格納されます。</target>
        </trans-unit>
        <trans-unit id="ed950ba22e4eb6cfb3232df6ec7b67b59a4df463" translate="yes" xml:space="preserve">
          <source>If CHANGESET_REPLACE is returned by an SQLITE_CHANGESET_CONFLICT conflict handler, then the conflicting row is removed from the database and a second attempt to apply the change is made. If this second attempt fails, the original row is restored to the database before continuing.</source>
          <target state="translated">CHANGESET_REPLACEがSQLITE_CHANGESET_CONFLICTコンフリクトハンドラによって返された場合、コンフリクトしている行はデータベースから削除され、変更を適用するための2回目の試行が行われます。この 2 回目の試みが失敗した場合、元の行はデータベースにリストアされてから続行されます。</target>
        </trans-unit>
        <trans-unit id="30467096b4dd78c0d45cf667e992ae71e7009c64" translate="yes" xml:space="preserve">
          <source>If CHANGESET_REPLACE is returned by an SQLITE_CHANGESET_DATA conflict handler, then the conflicting row is either updated or deleted, depending on the type of change.</source>
          <target state="translated">CHANGESET_REPLACE が SQLITE_CHANGESET_DATA 競合ハンドラによって返された場合、競合する行は変更の種類に応じて更新または削除されます。</target>
        </trans-unit>
        <trans-unit id="1a6c0fd79d5064239e68ae7d0df720319dab8e2b" translate="yes" xml:space="preserve">
          <source>If F is a NULL pointer, then sqlite3_uri_parameter(F,P) returns NULL and sqlite3_uri_boolean(F,P,B) returns B. If F is not a NULL pointer and is not a database file pathname pointer that SQLite passed into the xOpen VFS method, then the behavior of this routine is undefined and probably undesirable.</source>
          <target state="translated">FがNULLポインタの場合、sqlite3_uri_parameter(F,P)はNULLを返し、sqlite3_uri_boolean(F,P,B)はBを返します。 FがNULLポインタではなく、SQLiteがxOpen VFSメソッドに渡したデータベースファイルのパス名ポインタではない場合、このルーチンの動作は未定義であり、おそらく望ましくありません。</target>
        </trans-unit>
        <trans-unit id="9276605b0b0a889bb4c7aa5fcec85c6fc6240625" translate="yes" xml:space="preserve">
          <source>If F is the database filename pointer passed into the xOpen() method of a VFS implementation when the flags parameter to xOpen() has one or more of the &lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_URI&lt;/a&gt; or &lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_MAIN_DB&lt;/a&gt; bits set and P is the name of the query parameter, then sqlite3_uri_parameter(F,P) returns the value of the P parameter if it exists or a NULL pointer if P does not appear as a query parameter on F. If P is a query parameter of F has no explicit value, then sqlite3_uri_parameter(F,P) returns a pointer to an empty string.</source>
          <target state="translated">FがVFS実装のxOpen（）メソッドに渡されるデータベースファイル名ポインターであり、xOpen（）へのフラグパラメーターに1つ以上の&lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_URI&lt;/a&gt;または&lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_MAIN_DB&lt;/a&gt;ビットが設定され、Pがクエリパラメーターの名前である場合、sqlite3_uri_parameter（ F、P）は、Pパラメータが存在する場合はPパラメータの値を返し、PがFのクエリパラメータとして表示されない場合はNULLポインタを返します。PがFのクエリパラメータである場合、Fに明示的な値がない場合、sqlite3_uri_parameter（F、P）空の文字列へのポインタを返します。</target>
        </trans-unit>
        <trans-unit id="8ba138ee3e59443a69735dbcd87f0f8269dd9564" translate="yes" xml:space="preserve">
          <source>If F is the database filename pointer passed into the xOpen() method of a VFS implementation when the flags parameter to xOpen() has one or more of the &lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_URI&lt;/a&gt; or &lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_MAIN_DB&lt;/a&gt; bits set and P is the name of the query parameter, then sqlite3_uri_parameter(F,P) returns the value of the P parameter if it exists or a NULL pointer if P does not appear as a query parameter on F. If P is a query parameter of F has no explicit value, then sqlite3_uri_parameter(F,P) returns a pointer to an empty string.</source>
          <target state="translated">FがVFS実装のxOpen（）メソッドに渡されるデータベースファイル名ポインターであり、xOpen（）へのフラグパラメーターに1つ以上の&lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_URI&lt;/a&gt;または&lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_MAIN_DB&lt;/a&gt;ビットが設定され、Pがクエリパラメーターの名前である場合、sqlite3_uri_parameter（ F、P）は、Pパラメータが存在する場合はPパラメータの値を返し、PがFのクエリパラメータとして表示されない場合はNULLポインタを返します。PがFのクエリパラメータである場合、Fに明示的な値がない場合、sqlite3_uri_parameter（F、P）空の文字列へのポインタを返します。</target>
        </trans-unit>
        <trans-unit id="298246b211caead4a1410b71d74279a5d314bec4" translate="yes" xml:space="preserve">
          <source>If FILE is a ZIP archive rather than an SQLite Archive, the &quot;.archive&quot; command and the &quot;-A&quot; command-line option still work. This is accomplished using of the &lt;a href=&quot;zipfile&quot;&gt;zipfile&lt;/a&gt; extension. Hence, the following commands are roughly equivalent, differing only in output formatting:</source>
          <target state="translated">FILEがSQLiteアーカイブではなくZIPアーカイブの場合、「。archive」コマンドと「-A」コマンドラインオプションは引き続き機能します。これは、&lt;a href=&quot;zipfile&quot;&gt;zipfile&lt;/a&gt;拡張子を使用して行われます。したがって、次のコマンドはほぼ同じで、出力フォーマットのみが異なります。</target>
        </trans-unit>
        <trans-unit id="d860543f88997bfbcee9b4b76e89b05bba6e3e47" translate="yes" xml:space="preserve">
          <source>If M is -1 in the initial journal header, then the number of page records that follow is computed by computing how many page records will fit in the available space of the remainder of the journal file.</source>
          <target state="translated">最初のジャーナル・ヘッダで M が -1 の場合、その後に続くページ・レコードの数は、ジャーナル・ファイルの残りのスペースに収まるページ・レコードの数を計算して計算されます。</target>
        </trans-unit>
        <trans-unit id="9d3a57a4870ed12272e250deed6ea841c224df1b" translate="yes" xml:space="preserve">
          <source>If NORMAL locking mode is in effect for the first WAL-mode database access, then the shared-memory wal-index is created. This means that the underlying VFS must support the &quot;version 2&quot; shared-memory. If the VFS does not support shared-memory methods, then the attempt to open a database that is already in WAL mode, or the attempt convert a database into WAL mode, will fail. As long as exactly one connection is using a shared-memory wal-index, the locking mode can be changed freely between NORMAL and EXCLUSIVE. It is only when the shared-memory wal-index is omitted, when the locking mode is EXCLUSIVE prior to the first WAL-mode database access, that the locking mode is stuck in EXCLUSIVE.</source>
          <target state="translated">最初のWALモードデータベースアクセスに対してNORMALロックモードが有効な場合、共有メモリのWAL-INDEXが作成されます。これは、基礎となるVFSが「バージョン2」の共有メモリをサポートしていなければならないことを意味します。VFSが共有メモリ方式をサポートしていない場合、すでにWALモードになっているデータベースを開こうとしたり、データベースをWALモードに変換しようとすると失敗します。正確に1つの接続が共有メモリのwal-indexを使用している限り、ロックモードはNORMALとEXCLUSIVEの間で自由に変更することができます。共有メモリのwal-indexが省略された場合、最初のWALモードのデータベースアクセスの前にロックモードがEXCLUSIVEになっている場合にのみ、ロックモードがEXCLUSIVEでスタックします。</target>
        </trans-unit>
        <trans-unit id="084a98d24eb789b16e0f410999491d6ca6f68655" translate="yes" xml:space="preserve">
          <source>If NULL is inserted into the mode column, then the mode of the new archive entry is automatically set to either 33188 (-rw-r--r--) or 16877 (drwxr-xr-x), depending on whether or not the values specified for columns &quot;sz&quot;, &quot;data&quot; and &quot;rawdata&quot; indicate that the new entry is a directory.</source>
          <target state="translated">mode 列に NULL が挿入された場合、新しいアーカイブエントリのモードは自動的に 33188 (-rw-r--r--)か 16877 (drwxr-xr-x)のいずれかに設定されます。</target>
        </trans-unit>
        <trans-unit id="4101f8cb88698edd15d7c951de1289b2d8eaa71c" translate="yes" xml:space="preserve">
          <source>If NULL is inserted into the mtime column, then the timestamp of the new entry is set to the current time. Otherwise, the specified value is interpreted as an integer and used as is.</source>
          <target state="translated">mtime列にNULLが挿入された場合、新しいエントリのタイムスタンプは現在の時刻に設定されます。そうでなければ、指定された値は整数として解釈され、そのまま使用されます。</target>
        </trans-unit>
        <trans-unit id="43806989f629698fba47d7f7a7bc8a167120b2e8" translate="yes" xml:space="preserve">
          <source>If P is a polygon, then geopoly_area(P) returns the area enclosed by that polygon. If P is not a polygon, geopoly_area(P) returns NULL.</source>
          <target state="translated">P が多角形である場合、geopoly_area(P)はその多角形で囲まれた領域を返します。Pが多角形でない場合、geopoly_area(P)はNULLを返します。</target>
        </trans-unit>
        <trans-unit id="7923fadf3f55cd9b6d47a16ad18e97575f464043" translate="yes" xml:space="preserve">
          <source>If P is a polygon, then geopoly_bbox(P) returns a new polygon that is the smallest (axis-aligned) rectangle completely enclosing P. If P is not a polygon, geopoly_bbox(P) returns NULL.</source>
          <target state="translated">P が多角形である場合,geopoly_bbox(P)は,P を完全に囲む最小の(軸合わせされた)矩形である新しい多角形を返します.</target>
        </trans-unit>
        <trans-unit id="231cf86fd88561789cf32053e3b5a58ac30a1c90" translate="yes" xml:space="preserve">
          <source>If P is a polygon, then geopoly_blob(P) returns the binary encoding of that polygon as a BLOB. If P is not a polygon, geopoly_blob(P) returns NULL.</source>
          <target state="translated">Pがポリゴンの場合、 geopoly_blob(P)はそのポリゴンのバイナリエンコーディングをBLOBとして返します。P がポリゴンでない場合は、 geopoly_blob(P)は NULL を返します。</target>
        </trans-unit>
        <trans-unit id="85466629c4fd74bf6816a1cb264ff5557384a47f" translate="yes" xml:space="preserve">
          <source>If P is a polygon, then geopoly_contains_point(P,X,Y) returns a non-zero integer if and only if the coordinate X,Y is inside or on the boundary of the polygon P. If P is not a polygon, geopoly_contains_point(P,X,Y) returns NULL.</source>
          <target state="translated">P が多角形であれば、座標 X,Y が多角形 P の内側または境界上にある場合に限り、 geopoly_contains_point(P,X,Y)は 0 以外の整数を返します。</target>
        </trans-unit>
        <trans-unit id="01d01cedd541548c033da5a76ae2b943d566e364" translate="yes" xml:space="preserve">
          <source>If P is a polygon, then geopoly_json(P) returns the GeoJSON representation of that polygon as a TEXT string. If P is not a polygon, geopoly_json(P) returns NULL.</source>
          <target state="translated">P がポリゴンの場合、geopoly_json(P)はそのポリゴンの GeoJSON 表現を TEXT 文字列として返します。Pがポリゴンでない場合、geopoly_json(P)はNULLを返します。</target>
        </trans-unit>
        <trans-unit id="4d96f5fac84b02e3eed71829015c2301166a1102" translate="yes" xml:space="preserve">
          <source>If P is a polygon, then geopoly_svg(P,...) returns a text string which is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Scalable_Vector_Graphics&quot;&gt;Scalable Vector Graphics (SVG)&lt;/a&gt; representation of that polygon. If there is more one argument, then second and subsequent arguments are added as attributes to each SVG glyph. For example:</source>
          <target state="translated">Pがポリゴンの場合、geopoly_svg（P、...）は、そのポリゴンの&lt;a href=&quot;https://en.wikipedia.org/wiki/Scalable_Vector_Graphics&quot;&gt;Scalable Vector Graphics（SVG）&lt;/a&gt;表現であるテキスト文字列を返します。引数が複数ある場合は、2番目以降の引数が属性として各SVGグリフに追加されます。例えば：</target>
        </trans-unit>
        <trans-unit id="8bf89c8791c7886430f52d199af4522be0892c2c" translate="yes" xml:space="preserve">
          <source>If P is not a polygon, geopoly_svg(P,...) returns NULL.</source>
          <target state="translated">P が多角形でない場合,geopoly_svg(P,...)は NULL を返します.</target>
        </trans-unit>
        <trans-unit id="8d6c1d000f406140de377a0a6166c3f4f4ee6ecf" translate="yes" xml:space="preserve">
          <source>If P&amp;gt;X and K&amp;gt;X then the first M bytes of P are stored on the btree page and the remaining P-M bytes are stored on overflow pages.</source>
          <target state="translated">P&amp;gt; XおよびK&amp;gt; Xの場合、Pの最初のMバイトはbtreeページに格納され、残りのPMバイトはオーバーフローページに格納されます。</target>
        </trans-unit>
        <trans-unit id="40c35ab59089c6d8a3b822955c4be859755a9e2b" translate="yes" xml:space="preserve">
          <source>If P&amp;gt;X and K&amp;lt;=X then the first K bytes of P are stored on the btree page and the remaining P-K bytes are stored on overflow pages.</source>
          <target state="translated">P&amp;gt; XおよびK &amp;lt;= Xの場合、Pの最初のKバイトはbtreeページに格納され、残りのPKバイトはオーバーフローページに格納されます。</target>
        </trans-unit>
        <trans-unit id="fa33ffa92f81891eff9dffa21d7e8d38e3faa786" translate="yes" xml:space="preserve">
          <source>If P&amp;lt;=X then all P bytes of payload are stored directly on the btree page without overflow.</source>
          <target state="translated">P &amp;lt;= Xの場合、ペイロードのすべてのPバイトがオーバーフローせずにbtreeページに直接格納されます。</target>
        </trans-unit>
        <trans-unit id="a69350651a4faef3f95c007babd7352f8f77d85e" translate="yes" xml:space="preserve">
          <source>If P1 and P2 are both polygons, then the geopoly_overlap(P1,P2) function returns a non-zero integer if there is any overlap between P1 and P2, or it returns zero if P1 and P2 completely disjoint. If either P1 or P2 is not a polygon, this routine returns NULL.</source>
          <target state="translated">P1 と P2 が共に多角形である場合、geopoly_overlap(P1,P2)関数は、P1 と P2 の間に重なりがある場合には 0 以外の整数を返し、P1 と P2 が完全に不連続である場合には 0 を返します。P1 または P2 のどちらかが多角形でない場合、このルーチンは NULL を返します。</target>
        </trans-unit>
        <trans-unit id="dd9f5db9ef38463d2501fa9dc6b70e3f4750a4f2" translate="yes" xml:space="preserve">
          <source>If P1 and P2 are both polygons, then the geopoly_within(P1,P2) function returns a non-zero integer if P2 is completely contained within P1, or it returns zero if any part of P2 is outside of P1. If P1 and P2 are the same polygon, this routine returns non-zero. If either P1 or P2 is not a polygon, this routine returns NULL.</source>
          <target state="translated">P1とP2が両方とも多角形である場合、geopoly_within(P1,P2)関数は、P2が完全にP1内に含まれている場合は0以外の整数を返し、P2の一部がP1の外にある場合は0を返します。P1 と P2 が同じ多角形であれば、このルーチンは 0 以外の値を返します。P1 または P2 のどちらかが多角形でない場合、このルーチンは NULL を返します。</target>
        </trans-unit>
        <trans-unit id="4157b5ffd90247cfe9008c1ae67666efa84d2bdb" translate="yes" xml:space="preserve">
          <source>If P1 is 0, then all SQL statements become expired. If P1 is non-zero, then only the currently executing statement is expired.</source>
          <target state="translated">P1が0の場合、すべてのSQL文が期限切れになります。P1が0以外の場合、現在実行中のステートメントのみが期限切れとなります。</target>
        </trans-unit>
        <trans-unit id="7196e8103cc1b57f49e64f9cffafd04bf56cea94" translate="yes" xml:space="preserve">
          <source>If P1 is non-zero, then the jump is taken if the database constraint-counter is zero (the one that counts deferred constraint violations). If P1 is zero, the jump is taken if the statement constraint-counter is zero (immediate foreign key constraint violations).</source>
          <target state="translated">P1が0以外の場合、データベース制約カウンタが0の場合にジャンプが実行されます(遅延制約違反をカウントするもの)。P1が0の場合、文の制約カウンタが0の場合にジャンプが行われます(即時外部キー制約違反をカウントするもの)。</target>
        </trans-unit>
        <trans-unit id="e76da0aa98d442426a710c17ffdd5c83f500e5de" translate="yes" xml:space="preserve">
          <source>If P1 is not zero, then it is a register that a subsequent min() or max() aggregate will set to 1 if the current row is not the minimum or maximum. The P1 register is initialized to 0 by this instruction.</source>
          <target state="translated">P1が0でない場合は、現在の行が最小値または最大値でない場合、後続のmin()またはmax()の集約が1に設定するレジスタです。この命令によりP1レジスタは0に初期化されます。</target>
        </trans-unit>
        <trans-unit id="12e05de4c2b1f6e3dffb8fed2e435034a63c1753" translate="yes" xml:space="preserve">
          <source>If P2 is 0, then SQL statements are expired immediately. If P2 is 1, then running SQL statements are allowed to continue to run to completion. The P2==1 case occurs when a CREATE INDEX or similar schema change happens that might help the statement run faster but which does not affect the correctness of operation.</source>
          <target state="translated">P2が0の場合、SQL文は直ちに期限切れとなります。P2が1の場合、実行中のSQL文は完了まで実行を続けることができます。P2==1の場合は、CREATE INDEXや類似のスキーマの変更が発生した場合に発生しますが、それがステートメントの実行速度を向上させるかもしれませんが、操作の正確性には影響しません。</target>
        </trans-unit>
        <trans-unit id="b95c82eece8cdb232cd3c969e9f714560a3483ed" translate="yes" xml:space="preserve">
          <source>If P2 is not zero, jump to instruction P2.</source>
          <target state="translated">P2が0でない場合は、命令P2にジャンプします。</target>
        </trans-unit>
        <trans-unit id="624ae34f34a46b97a6ede8c6928e2854d808cc50" translate="yes" xml:space="preserve">
          <source>If P2 is not zero, then it is a register holding a string which is the file into which the result of vacuum should be written. When P2 is zero, the vacuum overwrites the original database.</source>
          <target state="translated">P2が0でない場合、それは文字列を保持するレジスタであり、バキュームの結果が書き込まれるべきファイルです。P2が0の場合、バキュームは元のデータベースを上書きします。</target>
        </trans-unit>
        <trans-unit id="4101c4124c3fe6e483990efc85814b11a364af14" translate="yes" xml:space="preserve">
          <source>If P2!=0 then the coroutine implementation immediately follows this opcode. So jump over the coroutine implementation to address P2.</source>
          <target state="translated">もしP2!=0であれば、コアーチンの実装はこのオペコードのすぐ後に続きます。そのため、P2をアドレスにするために、コアーチンの実装を飛び越えてください。</target>
        </trans-unit>
        <trans-unit id="95acd6cd81e68312a7b3f200adb71394407e2187" translate="yes" xml:space="preserve">
          <source>If P2==1 then no insert is performed. argv[0] is the rowid of a row to delete.</source>
          <target state="translated">argv[0]は削除する行の行IDです。</target>
        </trans-unit>
        <trans-unit id="4b3305a3179f27393cd2b3c6dff28468fd2e27f2" translate="yes" xml:space="preserve">
          <source>If P3 is not zero and the content of register P3 is equal to P5, then the datatype of the register P2 is converted to BLOB. The content is the same sequence of bytes, it is merely interpreted as a BLOB instead of a string, as if it had been CAST. In other words:</source>
          <target state="translated">P3が0ではなく、レジスタP3の内容がP5と等しい場合、レジスタP2のデータ型はBLOBに変換されます。内容は同じバイト列であり、文字列ではなくBLOBとして解釈されるだけで、あたかもCASTされていたかのように解釈されます。言い換えれば</target>
        </trans-unit>
        <trans-unit id="7b12a88585bcaf8799451da77eaddd8eae80e136" translate="yes" xml:space="preserve">
          <source>If P3 is not zero, then it is an address to jump to if an SQLITE_CORRUPT error is encountered.</source>
          <target state="translated">P3 がゼロでない場合は、SQLITE_CORRUPT エラーが発生した場合にジャンプするアドレスです。</target>
        </trans-unit>
        <trans-unit id="c8b8a297f15c969bf51cec7bd085ee38d68f8af2" translate="yes" xml:space="preserve">
          <source>If P3!=0 then the content of the P2 register is unsuitable for use in OP_Result and any OP_Result will invalidate the P2 register content. The P2 register content is invalidated by opcodes like &lt;a href=&quot;opcode#Function&quot;&gt;Function&lt;/a&gt; or by any use of another cursor pointing to the same table.</source>
          <target state="translated">P3！= 0の場合、P2レジスタの内容はOP_Resultでの使用には不適切であり、OP_ResultはP2レジスタの内容を無効にします。P2レジスタの内容は、&lt;a href=&quot;opcode#Function&quot;&gt;Function&lt;/a&gt;などのオペコードによって、または同じテーブルを指す別のカーソルを使用することによって無効になります。</target>
        </trans-unit>
        <trans-unit id="f0e377e900f9f81e14b13484040277f239153040" translate="yes" xml:space="preserve">
          <source>If P3!=0 then this opcode is allowed to make an ephemeral pointer into the database page. That means that the content of the output register will be invalidated as soon as the cursor moves - including moves caused by other cursors that &quot;save&quot; the current cursors position in order that they can write to the same table. If P3==0 then a copy of the data is made into memory. P3!=0 is faster, but P3==0 is safer.</source>
          <target state="translated">P3!=0の場合、このオペコードはデータベースページへのエフェメラルポインタを作ることが許されています。つまり、カーソルが移動するとすぐに出力レジスタの内容が無効になることを意味します-他のカーソルが同じテーブルに書き込むことができるように現在のカーソルの位置を「保存」する他のカーソルによる移動を含む。P3==0ならば、データのコピーがメモリに作られます。P3!=0の方が速いですが、P3==0の方が安全です。</target>
        </trans-unit>
        <trans-unit id="261dff5d4c60a753fca80ceb7a30b1ccde835d53" translate="yes" xml:space="preserve">
          <source>If P3&amp;gt;0 then P3 is a register in the root frame of this VDBE that holds the largest previously generated record number. No new record numbers are allowed to be less than this value. When this value reaches its maximum, an SQLITE_FULL error is generated. The P3 register is updated with the ' generated record number. This P3 mechanism is used to help implement the AUTOINCREMENT feature.</source>
          <target state="translated">P3&amp;gt; 0の場合、P3は、このVDBEのルートフレーム内のレジスタであり、以前に生成された最大のレコード番号を保持します。新しいレコード番号をこの値より小さくすることはできません。この値が最大値に達すると、SQLITE_FULLエラーが生成されます。P3レジスタは、生成されたレコード番号で更新されます。このP3メカニズムは、AUTOINCREMENT機能の実装を支援するために使用されます。</target>
        </trans-unit>
        <trans-unit id="b537aafa079e151774c7dbac498d69a9800ce496" translate="yes" xml:space="preserve">
          <source>If P3==0 and P4==0 then r[P2] := r[P1] IS TRUE</source>
          <target state="translated">P3==0、P4==0の場合、r[P2]:=r[P1]IS TRUEとなります。</target>
        </trans-unit>
        <trans-unit id="4abb01d048e9054de1718b2c97d7bca8f72ca3fd" translate="yes" xml:space="preserve">
          <source>If P3==0 and P4==1 then r[P2] := r[P1] IS NOT TRUE</source>
          <target state="translated">P3==0,P4==1 の場合、r[P2]:=r[P1]は真ではありません。</target>
        </trans-unit>
        <trans-unit id="e0f5592c3dfac53b5b17bcf906b1b3d9b28a160a" translate="yes" xml:space="preserve">
          <source>If P3==1 and P4==0 then r[P2] := r[P1] IS NOT FALSE</source>
          <target state="translated">P3==1,P4==0 の場合、r[P2]:=r[P1]は偽りではありません。</target>
        </trans-unit>
        <trans-unit id="ec92d66dd345ec321132b256dce88d1a72413c5f" translate="yes" xml:space="preserve">
          <source>If P3==1 and P4==1 then r[P2] := r[P1] IS FALSE</source>
          <target state="translated">P3==1、P4==1の場合、r[P2]:=r[P1]IS FALSEとなります。</target>
        </trans-unit>
        <trans-unit id="ec8063043e0a9cad56cc57c55e1e58a5f2b9e719" translate="yes" xml:space="preserve">
          <source>If P4 is NULL then all index fields have the affinity BLOB.</source>
          <target state="translated">P4がNULLの場合、すべてのインデックスフィールドはアフィニティBLOBを持つ。</target>
        </trans-unit>
        <trans-unit id="0409d4d0ae010acb4eb82b5c67e7d26a4e78a377" translate="yes" xml:space="preserve">
          <source>If P4 is not NULL then it points to a Table object. In this case either the update or pre-update hook, or both, may be invoked. The P1 cursor must have been positioned using &lt;a href=&quot;opcode#NotFound&quot;&gt;NotFound&lt;/a&gt; prior to invoking this opcode in this case. Specifically, if one is configured, the pre-update hook is invoked if P4 is not NULL. The update-hook is invoked if one is configured, P4 is not NULL, and the OPFLAG_NCHANGE flag is set in P2.</source>
          <target state="translated">P4がNULLでない場合、それはTableオブジェクトを指します。この場合、更新フックまたは更新前フックのいずれか、あるいはその両方を呼び出すことができます。この場合、このオペコードを呼び出す前に、P1カーソルが&lt;a href=&quot;opcode#NotFound&quot;&gt;NotFound&lt;/a&gt;を使用して配置されている必要があります。特に、1つが構成されている場合、P4がNULLでない場合、更新前フックが呼び出されます。update-hookは、構成されていて、P4がNULLでなく、OPFLAG_NCHANGEフラグがP2に設定されている場合に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="833039fcfc9ba1341a8bac648d6011bebc9ef640" translate="yes" xml:space="preserve">
          <source>If P4 is not null then it is an error message string.</source>
          <target state="translated">P4 が NULL でない場合は、エラーメッセージの文字列となります。</target>
        </trans-unit>
        <trans-unit id="323b07c0a29678efca20be714e85be9034012831" translate="yes" xml:space="preserve">
          <source>If P4 is not zero, then it is the number of values in the unpacked key of reg(P2). In that case, P3 is the index of the first register for the unpacked key. The availability of the unpacked key can sometimes be an optimization.</source>
          <target state="translated">P4が0でない場合は、reg(P2)のアンパックドキーの値の数である。その場合、P3は、アンパックドキーの最初のレジスタのインデックスである。アンパックされた鍵の利用可能性は、最適化されている場合もある。</target>
        </trans-unit>
        <trans-unit id="7f6b94d7be2c05fd8f0bc6b7de40e344824f8d5b" translate="yes" xml:space="preserve">
          <source>If P4==0 then register P3 holds a blob constructed by &lt;a href=&quot;opcode#MakeRecord&quot;&gt;MakeRecord&lt;/a&gt;. If P4&amp;gt;0 then register P3 is the first of P4 registers that form an unpacked record.</source>
          <target state="translated">P4 == 0の場合、レジスタP3は&lt;a href=&quot;opcode#MakeRecord&quot;&gt;MakeRecord&lt;/a&gt;によって構築されたblobを保持します。P4&amp;gt; 0の場合、レジスタP3は、アンパックされたレコードを形成する最初のP4レジスタです。</target>
        </trans-unit>
        <trans-unit id="ea0d786e8193b3191b8e71dcd7cd40efa9daf92e" translate="yes" xml:space="preserve">
          <source>If P5 has the OPFLAG_APPEND bit set, that is a hint to the b-tree layer that this insert is likely to be an append.</source>
          <target state="translated">P5 に OPFLAG_APPEND ビットが設定されている場合、それは、この挿入が追加である可能性が高いことを b-tree レイヤに示すヒントとなります。</target>
        </trans-unit>
        <trans-unit id="b63e95392a3322ead1cda4df48bfef1df78fcfb5" translate="yes" xml:space="preserve">
          <source>If P5 has the OPFLAG_NCHANGE bit set, then the change counter is incremented by this instruction. If the OPFLAG_NCHANGE bit is clear, then the change counter is unchanged.</source>
          <target state="translated">P5 の OPFLAG_NCHANGE ビットがセットされている場合は、この命令により変更カウンタがインクリメントされます。OPFLAG_NCHANGEビットがクリアされている場合、変更カウンタは変更されません。</target>
        </trans-unit>
        <trans-unit id="1ea732c0486f9121ffc851f241dea7753a429516" translate="yes" xml:space="preserve">
          <source>If P5 has the OPFLAG_PERMUTE bit set, then the order of comparison is determined by the most recent &lt;a href=&quot;opcode#Permutation&quot;&gt;Permutation&lt;/a&gt; operator. If the OPFLAG_PERMUTE bit is clear, then register are compared in sequential order.</source>
          <target state="translated">P5にOPFLAG_PERMUTEビットが設定されている場合、比較の順序は最新の&lt;a href=&quot;opcode#Permutation&quot;&gt;置換&lt;/a&gt;演算子によって決定されます。OPFLAG_PERMUTEビットがクリアされている場合、レジスタは順番に比較されます。</target>
        </trans-unit>
        <trans-unit id="d566e20d0304652ba9b826870e3331951b73f1a1" translate="yes" xml:space="preserve">
          <source>If P5 is non-zero, then recursive program invocation is enabled.</source>
          <target state="translated">P5が0以外の場合、再帰的プログラム呼び出しが有効になります。</target>
        </trans-unit>
        <trans-unit id="8cc4989073012226802ebb0b0b0287d0ebbc4c24" translate="yes" xml:space="preserve">
          <source>If P5 is not zero and P4 is NULL, then everything after the &quot;:&quot; is omitted.</source>
          <target state="translated">P5が0ではなく、P4がNULLの場合は、&quot;:&quot;以降は省略されます。</target>
        </trans-unit>
        <trans-unit id="6140b6bc786ef6328163c583ea74afbbf1b0203f" translate="yes" xml:space="preserve">
          <source>If P5 is not zero, the check is done on the auxiliary database file, not the main database file.</source>
          <target state="translated">P5が0でない場合、チェックはメインデータベースファイルではなく、補助データベースファイルに対して行われます。</target>
        </trans-unit>
        <trans-unit id="6f3d5e8ef0f60d316b59356518575a2f176eb4d7" translate="yes" xml:space="preserve">
          <source>If P5 is positive and the jump is taken, then event counter number P5-1 in the prepared statement is incremented.</source>
          <target state="translated">P5が正でジャンプが行われた場合には、準備された文のイベントカウンタ番号P5-1がインクリメントされる。</target>
        </trans-unit>
        <trans-unit id="6d64a234f707179617701bb23c32b6ab90539344" translate="yes" xml:space="preserve">
          <source>If P5!=0 then this opcode also checks the schema cookie against P3 and the schema generation counter against P4. The cookie changes its value whenever the database schema changes. This operation is used to detect when that the cookie has changed and that the current process needs to reread the schema. If the schema cookie in P3 differs from the schema cookie in the database header or if the schema generation counter in P4 differs from the current generation counter, then an SQLITE_SCHEMA error is raised and execution halts. The sqlite3_step() wrapper function might then reprepare the statement and rerun it from the beginning.</source>
          <target state="translated">P5!=0の場合、このオペコードはスキーマクッキーをP3と照合し、スキーマ生成カウンタをP4と照合します。データベーススキーマが変更されるたびにクッキーはその値を変更します。この操作は、クッキーが変更され、現在のプロセスがスキーマを再読み込みする必要があることを検出するために使用されます。P3のスキーマクッキーがデータベースヘッダのスキーマクッキーと異なる場合、またはP4のスキーマ生成カウンタが現在の生成カウンタと異なる場合、SQLITE_SCHEMAエラーが発生し、実行が停止します。その後、sqlite3_step()ラッパー関数は文を再準備して最初から再実行するかもしれません。</target>
        </trans-unit>
        <trans-unit id="79b8df381ad1ae2bdf21bac462376aead762296f" translate="yes" xml:space="preserve">
          <source>If RBU is used to update a large BLOB value within a target database, it may be more efficient to store a patch or delta that can be used to modify the existing BLOB instead of an entirely new value within the RBU database. RBU allows deltas to be specified in two ways:</source>
          <target state="translated">RBUがターゲットデータベース内の大きなBLOB値を更新するために使用される場合、RBUデータベース内に全く新しい値を格納するのではなく、既存のBLOBを変更するために使用できるパッチまたはデルタを格納する方が効率的である場合があります。RBUでは、デルタを2つの方法で指定することができます。</target>
        </trans-unit>
        <trans-unit id="f32404d913415ab312a2d32bca5267050dc55433" translate="yes" xml:space="preserve">
          <source>If SQLITE_DEFAULT_WAL_SYNCHRONOUS differs from SQLITE_DEFAULT_SYNCHRONOUS, and if the application has not modified the synchronous setting for the database file using the &lt;a href=&quot;pragma#pragma_synchronous&quot;&gt;PRAGMA synchronous&lt;/a&gt; statement, then the synchronous setting is changed to value defined by SQLITE_DEFAULT_WAL_SYNCHRONOUS when the database connection switches into WAL mode for the first time. If the SQLITE_DEFAULT_WAL_SYNCHRONOUS value is not overridden at compile-time, then it will always be the same as &lt;a href=&quot;compile#default_synchronous&quot;&gt;SQLITE_DEFAULT_SYNCHRONOUS&lt;/a&gt; and so no automatic synchronous setting changes will ever occur.</source>
          <target state="translated">SQLITE_DEFAULT_WAL_SYNCHRONOUSがSQLITE_DEFAULT_SYNCHRONOUSと異なり、アプリケーションが&lt;a href=&quot;pragma#pragma_synchronous&quot;&gt;PRAGMA同期&lt;/a&gt;ステートメントを使用してデータベースファイルの同期設定を変更していない場合、データベース接続が初めてWALモードに切り替わると、同期設定はSQLITE_DEFAULT_WAL_SYNCHRONOUSで定義された値に変更されます。 SQLITE_DEFAULT_WAL_SYNCHRONOUS値がコンパイル時にオーバーライドされない場合、常に&lt;a href=&quot;compile#default_synchronous&quot;&gt;SQLITE_DEFAULT_SYNCHRONOUS&lt;/a&gt;と同じになるため、自動同期設定の変更は発生しません。</target>
        </trans-unit>
        <trans-unit id="35daf76480440bed2a0456819e4a2256b8e77c1e" translate="yes" xml:space="preserve">
          <source>If SQLITE_NULLEQ is set in P5 then the result of comparison is always either true or false and is never NULL. If both operands are NULL then the result of comparison is true. If either operand is NULL then the result is false. If neither operand is NULL the result is the same as it would be if the SQLITE_NULLEQ flag were omitted from P5.</source>
          <target state="translated">P5でSQLITE_NULLEQが設定されている場合、比較の結果は常に真か偽のどちらかであり、決してNULLではありません。両方のオペランドがNULLの場合、比較結果は真です。どちらか一方のオペランドがNULLの場合、結果は偽です。どちらのオペランドもNULLでない場合、結果はP5でSQLITE_NULLEQフラグが省略された場合と同じです。</target>
        </trans-unit>
        <trans-unit id="b5e1e68a469214facd1d655d6dbff18739ace55a" translate="yes" xml:space="preserve">
          <source>If SQLite discovers that the sqlite_sequence table has any other format, it returns the SQLITE_CORRUPT_SEQUENCE error.</source>
          <target state="translated">SQLiteがsqlite_sequenceテーブルが他のフォーマットを持っていることを発見した場合、SQLITE_CORRUPT_SEQUENCEエラーを返します。</target>
        </trans-unit>
        <trans-unit id="015569a0e55d69ecf2d3dec3d6ece8f0bde61846" translate="yes" xml:space="preserve">
          <source>If SQLite ever returns SQLITE_MISUSE from any interface, that means that the application is incorrectly coded and needs to be fixed. Do not ship an application that sometimes returns SQLITE_MISUSE from a standard SQLite interface because that application contains potentially serious bugs.</source>
          <target state="translated">SQLite が何らかのインターフェイスから SQLITE_MISUSE を返すことがある場合、それはそのアプリケーションが正しくコードされておらず、修正する必要があることを意味します。標準SQLiteインタフェースからSQLITE_MISUSEを返すことがあるアプリケーションを出荷しないでください。</target>
        </trans-unit>
        <trans-unit id="60b69a270887c8a40e3999f62767f4e29079be3d" translate="yes" xml:space="preserve">
          <source>If SQLite has been compiled with the &lt;a href=&quot;compile#debug&quot;&gt;SQLITE_DEBUG&lt;/a&gt; compile-time option, then the parser_trace pragma can be used to turn on tracing for the SQL parser used internally by SQLite. This feature is used for debugging SQLite itself.</source>
          <target state="translated">SQLiteが&lt;a href=&quot;compile#debug&quot;&gt;SQLITE_DEBUG&lt;/a&gt;コンパイル時オプションでコンパイルされている場合、parser_traceプラグマを使用して、SQLiteが内部で使用するSQLパーサーのトレースをオンにすることができます。この機能は、SQLite自体のデバッグに使用されます。</target>
        </trans-unit>
        <trans-unit id="3e93855bd0fdb13d2772a4cf88fefeb516093bf0" translate="yes" xml:space="preserve">
          <source>If SQLite has been compiled with the &lt;a href=&quot;compile#debug&quot;&gt;SQLITE_DEBUG&lt;/a&gt; compile-time option, then the vdbe_addoptrace pragma can be used to cause a complete VDBE opcodes to be displayed as they are created during code generation. This feature is used for debugging SQLite itself. See the &lt;a href=&quot;vdbe#trace&quot;&gt;VDBE documentation&lt;/a&gt; for more information.</source>
          <target state="translated">SQLiteが&lt;a href=&quot;compile#debug&quot;&gt;SQLITE_DEBUG&lt;/a&gt;コンパイル時オプションでコンパイルされている場合、vdbe_addoptraceプラグマを使用して、コード生成中に作成された完全なVDBE opcodeを表示できます。この機能は、SQLite自体のデバッグに使用されます。詳細については、&lt;a href=&quot;vdbe#trace&quot;&gt;VDBEのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ed1cfc408ef29e4c5084ed94c91a1453ae1e7d68" translate="yes" xml:space="preserve">
          <source>If SQLite has been compiled with the &lt;a href=&quot;compile#debug&quot;&gt;SQLITE_DEBUG&lt;/a&gt; compile-time option, then the vdbe_debug pragma is a shorthand for three other debug-only pragmas: vdbe_addoptrace, vdbe_listing, and vdbe_trace. This feature is used for debugging SQLite itself. See the &lt;a href=&quot;vdbe#trace&quot;&gt;VDBE documentation&lt;/a&gt; for more information.</source>
          <target state="translated">SQLiteが&lt;a href=&quot;compile#debug&quot;&gt;SQLITE_DEBUG&lt;/a&gt;コンパイル時オプションでコンパイルされている場合、vdbe_debugプラグマは、他の3つのデバッグ専用プラグマ（vdbe_addoptrace、vdbe_listing、vdbe_trace）の省略形です。この機能は、SQLite自体のデバッグに使用されます。詳細については、&lt;a href=&quot;vdbe#trace&quot;&gt;VDBEのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1e32eb3dd2a790d29e0b70974d295922571079df" translate="yes" xml:space="preserve">
          <source>If SQLite has been compiled with the &lt;a href=&quot;compile#debug&quot;&gt;SQLITE_DEBUG&lt;/a&gt; compile-time option, then the vdbe_listing pragma can be used to cause a complete listing of the virtual machine opcodes to appear on standard output as each statement is evaluated. With listing is on, the entire content of a program is printed just prior to beginning execution. The statement executes normally after the listing is printed. This feature is used for debugging SQLite itself. See the &lt;a href=&quot;vdbe#trace&quot;&gt;VDBE documentation&lt;/a&gt; for more information.</source>
          <target state="translated">SQLiteが&lt;a href=&quot;compile#debug&quot;&gt;SQLITE_DEBUG&lt;/a&gt;コンパイル時オプションでコンパイルされている場合、vdbe_listingプラグマを使用して、各ステートメントが評価されるときに仮想マシンのオペコードの完全なリストを標準出力に表示できます。リストがオンの場合、プログラムの内容全体が実行を開始する直前に印刷されます。リストが印刷された後、ステートメントは通常どおり実行されます。この機能は、SQLite自体のデバッグに使用されます。詳細については、&lt;a href=&quot;vdbe#trace&quot;&gt;VDBEのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="cefc8fedb890f68ef15ff1358f045bdc3b72901b" translate="yes" xml:space="preserve">
          <source>If SQLite has been compiled with the &lt;a href=&quot;compile#debug&quot;&gt;SQLITE_DEBUG&lt;/a&gt; compile-time option, then the vdbe_trace pragma can be used to cause virtual machine opcodes to be printed on standard output as they are evaluated. This feature is used for debugging SQLite. See the &lt;a href=&quot;vdbe#trace&quot;&gt;VDBE documentation&lt;/a&gt; for more information.</source>
          <target state="translated">SQLiteが&lt;a href=&quot;compile#debug&quot;&gt;SQLITE_DEBUG&lt;/a&gt;コンパイル時オプションでコンパイルされている場合、vdbe_traceプラグマを使用すると、仮想マシンのオペコードが評価されるときに標準出力に出力されます。この機能はSQLiteのデバッグに使用されます。詳細については、&lt;a href=&quot;vdbe#trace&quot;&gt;VDBEのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5153e53873f4aff61d1f8d367f68545fed69c0e7" translate="yes" xml:space="preserve">
          <source>If SQLite has not been initialized using &lt;a href=&quot;#sqlite3_initialize&quot;&gt;sqlite3_initialize()&lt;/a&gt; prior to invoking sqlite3_complete16() then sqlite3_initialize() is invoked automatically by sqlite3_complete16(). If that initialization fails, then the return value from sqlite3_complete16() will be non-zero regardless of whether or not the input SQL is complete.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_initialize&quot;&gt;sqlite3_initialize（）&lt;/a&gt;を使用してsqlite3_complete16（）を呼び出す前にSQLiteが初期化されていない場合、sqlite3_initialize（）はsqlite3_complete16（）によって自動的に呼び出されます。その初期化が失敗した場合、sqlite3_complete16（）からの戻り値は、入力SQLが完了しているかどうかに関係なくゼロ以外になります。</target>
        </trans-unit>
        <trans-unit id="3c965f677e7c54456f9a69dea9325df1caaec3d9" translate="yes" xml:space="preserve">
          <source>If SQLite has not been initialized using &lt;a href=&quot;initialize&quot;&gt;sqlite3_initialize()&lt;/a&gt; prior to invoking sqlite3_complete16() then sqlite3_initialize() is invoked automatically by sqlite3_complete16(). If that initialization fails, then the return value from sqlite3_complete16() will be non-zero regardless of whether or not the input SQL is complete.</source>
          <target state="translated">&lt;a href=&quot;initialize&quot;&gt;sqlite3_initialize（）&lt;/a&gt;を使用してsqlite3_complete16（）を呼び出す前にSQLiteが初期化されていない場合、sqlite3_initialize（）はsqlite3_complete16（）によって自動的に呼び出されます。その初期化が失敗した場合、sqlite3_complete16（）からの戻り値は、入力SQLが完了しているかどうかに関係なくゼロ以外になります。</target>
        </trans-unit>
        <trans-unit id="6d6bbb3059e334920732ba9450708b663008dcc7" translate="yes" xml:space="preserve">
          <source>If SQLite is built with the &lt;a href=&quot;compile#enable_update_delete_limit&quot;&gt;SQLITE_ENABLE_UPDATE_DELETE_LIMIT&lt;/a&gt; compile-time option then the syntax of the UPDATE statement is extended with optional ORDER BY and LIMIT clauses as follows:</source>
          <target state="translated">SQLiteが&lt;a href=&quot;compile#enable_update_delete_limit&quot;&gt;SQLITE_ENABLE_UPDATE_DELETE_LIMIT&lt;/a&gt;コンパイル時オプションを使用して構築されている場合、UPDATEステートメントの構文は、次のようにオプションのORDER BYおよびLIMIT句で拡張されます。</target>
        </trans-unit>
        <trans-unit id="44ff2e47de1d4a52252bdf0898ff4b68826c3d7a" translate="yes" xml:space="preserve">
          <source>If SQLite is compiled for Windows with the &lt;a href=&quot;compile#win32_malloc&quot;&gt;SQLITE_WIN32_MALLOC&lt;/a&gt; compile-time option, then a different, thin wrapper is used around HeapAlloc(), HeapReAlloc(), and HeapFree(). The thin wrapper uses the configured SQLite heap, which will be different from the default process heap if the &lt;a href=&quot;compile#win32_heap_create&quot;&gt;SQLITE_WIN32_HEAP_CREATE&lt;/a&gt; compile-time option is used. In addition, when an allocation is made or freed, HeapValidate() will be called if SQLite is compiled with assert() enabled and the &lt;a href=&quot;compile#win32_malloc_validate&quot;&gt;SQLITE_WIN32_MALLOC_VALIDATE&lt;/a&gt; compile-time option.</source>
          <target state="translated">SQLiteが&lt;a href=&quot;compile#win32_malloc&quot;&gt;SQLITE_WIN32_MALLOC&lt;/a&gt;コンパイル時オプションを使用してWindows用にコンパイルされている場合、HeapAlloc（）、HeapReAlloc（）、およびHeapFree（）の周りに別の薄いラッパーが使用されます。シンラッパーは、構成されたSQLiteヒープを使用します。これは、&lt;a href=&quot;compile#win32_heap_create&quot;&gt;SQLITE_WIN32_HEAP_CREATE&lt;/a&gt;コンパイル時オプションが使用されている場合のデフォルトのプロセスヒープとは異なります。また、assert（）を有効にして&lt;a href=&quot;compile#win32_malloc_validate&quot;&gt;SQLITE_WIN32_MALLOC_VALIDATE&lt;/a&gt;コンパイル時オプションを指定してSQLiteをコンパイルすると、割り当てが作成または解放されたときにHeapValidate（）が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="517e1af932491e30c32e06c4fd9e534300edd652" translate="yes" xml:space="preserve">
          <source>If SQLite is compiled with &lt;a href=&quot;compile#enable_memsys3&quot;&gt;SQLITE_ENABLE_MEMSYS3&lt;/a&gt; then another zero-malloc memory allocator, similar to memsys5, is included in the source tree. The memsys3 allocator, like memsys5, must be activated by a call to &lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config&lt;/a&gt;(&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigheap&quot;&gt;SQLITE_CONFIG_HEAP&lt;/a&gt;,...). Memsys3 uses the memory buffer supplied as its source for all memory allocations. The difference between memsys3 and memsys5 is that memsys3 uses a different memory allocation algorithm that seems to work well in practice, but which does not provide mathematical guarantees against memory fragmentation and breakdown. Memsys3 was a predecessor to memsys5. The SQLite developers now believe that memsys5 is superior to memsys3 and that all applications that need a zero-malloc memory allocator should use memsys5 in preference to memsys3. Memsys3 is considered both experimental and deprecated and will likely be removed from the source tree in a future release of SQLite.</source>
          <target state="translated">SQLiteが&lt;a href=&quot;compile#enable_memsys3&quot;&gt;SQLITE_ENABLE_MEMSYS3を使用して&lt;/a&gt;コンパイルされている場合、memsys5と同様に、別のゼロmallocメモリアロケーターがソースツリーに含まれます。 memsys5のようなmemsys3アロケーターは、&lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config&lt;/a&gt;（&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigheap&quot;&gt;SQLITE_CONFIG_HEAP&lt;/a&gt;への呼び出しによってアクティブ化される必要があります。、...）。 Memsys3は、すべてのメモリ割り当てのソースとして提供されるメモリバッファを使用します。 memsys3とmemsys5の違いは、memsys3は実際にはうまく機能しているように見えるメモリ割り当てアルゴリズムを使用しているが、これはメモリの断片化と破壊に対する数学的保証を提供しないことです。 Memsys3はmemsys5の前身でした。 SQLite開発者は、memsys5がmemsys3より優れていること、およびゼロmallocメモリーアロケーターを必要とするすべてのアプリケーションがmemsys3よりもmemsys5を使用する必要があると信じています。 Memsys3は実験的で非推奨とみなされており、SQLiteの将来のリリースでソースツリーから削除される可能性があります。</target>
        </trans-unit>
        <trans-unit id="a20ff9c15584045a4ca98d16d24d41c5ba218767" translate="yes" xml:space="preserve">
          <source>If SQLite is compiled with the &lt;a href=&quot;compile#enable_update_delete_limit&quot;&gt;SQLITE_ENABLE_UPDATE_DELETE_LIMIT&lt;/a&gt; compile-time option, then the syntax of the DELETE statement is extended by the addition of optional ORDER BY and LIMIT clauses:</source>
          <target state="translated">SQLiteが&lt;a href=&quot;compile#enable_update_delete_limit&quot;&gt;SQLITE_ENABLE_UPDATE_DELETE_LIMIT&lt;/a&gt;コンパイル時オプションでコンパイルされている場合、DELETEステートメントの構文は、オプションのORDER BY句とLIMIT句の追加によって拡張されます。</target>
        </trans-unit>
        <trans-unit id="0e66b56024c7560826b0783e73206c696c2fa3db" translate="yes" xml:space="preserve">
          <source>If SQLite is compiled with the &lt;a href=&quot;compile#memdebug&quot;&gt;SQLITE_MEMDEBUG&lt;/a&gt; compile-time option, then a different, heavy wrapper is used around system malloc(), realloc(), and free(). The heavy wrapper allocates around 100 bytes of extra space with each allocation. The extra space is used to place sentinel values at both ends of the allocation returned to the SQLite core. When an allocation is freed, these sentinels are checked to make sure the SQLite core did not overrun the buffer in either direction. When the system library is GLIBC, the heavy wrapper also makes use of the GNU backtrace() function to examine the stack and record the ancestor functions of the malloc() call. When running the SQLite test suite, the heavy wrapper also records the name of the current test case. These latter two features are useful for tracking down the source of memory leaks detected by the test suite.</source>
          <target state="translated">SQLiteが&lt;a href=&quot;compile#memdebug&quot;&gt;SQLITE_MEMDEBUGで&lt;/a&gt;コンパイルされている場合コンパイル時オプションの場合、システムのmalloc（）、realloc（）、およびfree（）の周りに別の重いラッパーが使用されます。重いラッパーは、割り当てごとに約100バイトの追加スペースを割り当てます。余分なスペースは、SQLiteコアに返される割り当ての両端にセンチネル値を配置するために使用されます。割り当てが解放されると、これらの標識がチェックされ、SQLiteコアがどちらの方向にもバッファーをオーバーランしなかったことを確認します。システムライブラリがGLIBCの場合、重いラッパーは、GNU backtrace（）関数を使用してスタックを調べ、malloc（）呼び出しの祖先関数を記録します。 SQLiteテストスイートを実行すると、ヘビーラッパーは現在のテストケースの名前も記録します。後者の2つの機能は、テストスイートによって検出されたメモリリークの原因を追跡するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="bdb5f255b340a7c8ea5f9ec1a27271eaa4afef49" translate="yes" xml:space="preserve">
          <source>If SQLite is compiled with the &lt;a href=&quot;compile#zero_malloc&quot;&gt;SQLITE_ZERO_MALLOC&lt;/a&gt; option, then the &lt;a href=&quot;malloc#defaultalloc&quot;&gt;default memory allocator&lt;/a&gt; is omitted and replaced by a stub memory allocator that never allocates any memory. Any calls to the stub memory allocator will report back that no memory is available.</source>
          <target state="translated">SQLiteが&lt;a href=&quot;compile#zero_malloc&quot;&gt;SQLITE_ZERO_MALLOC&lt;/a&gt;オプションを指定してコンパイルされている場合、&lt;a href=&quot;malloc#defaultalloc&quot;&gt;デフォルトのメモリアロケータ&lt;/a&gt;は省略され、メモリを割り当てないスタブメモリアロケータに置き換えられます。スタブメモリアロケータを呼び出すと、使用可能なメモリがないことが報告されます。</target>
        </trans-unit>
        <trans-unit id="a81969949fdea82f85b5652d9dfeed54c87f7d37" translate="yes" xml:space="preserve">
          <source>If SQLite is compiled with the SQLITE_MUTEX_APPDEF preprocessor macro defined (with &quot;-DSQLITE_MUTEX_APPDEF=1&quot;), then no mutex implementation is included with the library. In this case the application must supply a custom mutex implementation using the &lt;a href=&quot;#sqliteconfigmutex&quot;&gt;SQLITE_CONFIG_MUTEX&lt;/a&gt; option of the sqlite3_config() function before calling sqlite3_initialize() or any other public sqlite3_ function that calls sqlite3_initialize().</source>
          <target state="translated">SQLiteがSQLITE_MUTEX_APPDEFプリプロセッサマクロを定義してコンパイルされている場合（ &quot;-DSQLITE_MUTEX_APPDEF = 1&quot;を使用）、ライブラリにはミューテックス実装が含まれていません。この場合、アプリケーションは、sqlite3_initialize（）またはsqlite3_initialize（）を呼び出す他のパブリックsqlite3_関数を呼び出す前に、sqlite3_config（）関数の&lt;a href=&quot;#sqliteconfigmutex&quot;&gt;SQLITE_CONFIG_MUTEX&lt;/a&gt;オプションを使用してカスタムmutex実装を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="3612fbeb4e5912d3519c058afb830d2ca96819e8" translate="yes" xml:space="preserve">
          <source>If SQLite is compiled with the SQLITE_MUTEX_APPDEF preprocessor macro defined (with &quot;-DSQLITE_MUTEX_APPDEF=1&quot;), then no mutex implementation is included with the library. In this case the application must supply a custom mutex implementation using the &lt;a href=&quot;c_config_covering_index_scan#sqliteconfigmutex&quot;&gt;SQLITE_CONFIG_MUTEX&lt;/a&gt; option of the sqlite3_config() function before calling sqlite3_initialize() or any other public sqlite3_ function that calls sqlite3_initialize().</source>
          <target state="translated">SQLiteがSQLITE_MUTEX_APPDEFプリプロセッサマクロを定義してコンパイルされている場合（ &quot;-DSQLITE_MUTEX_APPDEF = 1&quot;を使用）、ライブラリにはミューテックス実装が含まれていません。この場合、アプリケーションは、sqlite3_initialize（）またはsqlite3_initialize（）を呼び出す他のパブリックsqlite3_関数を呼び出す前に、sqlite3_config（）関数の&lt;a href=&quot;c_config_covering_index_scan#sqliteconfigmutex&quot;&gt;SQLITE_CONFIG_MUTEX&lt;/a&gt;オプションを使用してカスタムmutex実装を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="3e4d7ea4d24bcad6503f112a75cb8cf3b594762c" translate="yes" xml:space="preserve">
          <source>If SQLite is compiled with the THREADSAFE preprocessor macro set to 1, then it is safe to use SQLite from two or more threads of the same process at the same time. But each thread should have its own &lt;b&gt;sqlite*&lt;/b&gt; pointer returned from &lt;b&gt;sqlite_open&lt;/b&gt;. It is never safe for two or more threads to access the same &lt;b&gt;sqlite*&lt;/b&gt; pointer at the same time.</source>
          <target state="translated">SQLiteがTHREADSAFEプリプロセッサマクロを1に設定してコンパイルされている場合、同じプロセスの2つ以上のスレッドから同時にSQLiteを使用しても安全です。ただし、各スレッドには、&lt;b&gt;sqlite_open&lt;/b&gt;から返される独自の&lt;b&gt;sqlite *&lt;/b&gt;ポインターが&lt;b&gt;必要&lt;/b&gt;です。 2つ以上のスレッドが同じ&lt;b&gt;sqlite *&lt;/b&gt;ポインターに同時にアクセスすることは決して安全ではありません。</target>
        </trans-unit>
        <trans-unit id="710dfc358000c04c6f29b5a8b9d1e58f09170c01" translate="yes" xml:space="preserve">
          <source>If SQLite is working with multiple databases at the same time (using the &lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt; command) then each database has its own rollback journal. But there is also a separate aggregate journal called the &lt;em&gt;master journal&lt;/em&gt;. The master journal does not contain page data used for rolling back changes. Instead the master journal contains the names of the individual database rollback journals for each of the ATTACHed databases. Each of the individual database rollback journals also contain the name of the master journal. If there are no ATTACHed databases (or if none of the ATTACHed database is participating in the current transaction) no master journal is created and the normal rollback journal contains an empty string in the place normally reserved for recording the name of the master journal.</source>
          <target state="translated">SQLiteが複数のデータベースを同時に操作している場合（&lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt;コマンドを使用）、各データベースには独自のロールバックジャーナルがあります。ただし、&lt;em&gt;マスタージャーナル&lt;/em&gt;と呼ばれる別の集約ジャーナルもあります。マスタージャーナルには、変更のロールバックに使用されるページデータは含まれていません。代わりに、マスタージャーナルには、アタッチされた各データベースの個々のデータベースロールバックジャーナルの名前が含まれています。個々のデータベースのロールバックジャーナルにはそれぞれ、マスタージャーナルの名前も含まれています。 ATTACHされたデータベースがない場合（またはATTACHされたデータベースが現在のトランザクションに参加していない場合）は、マスタージャーナルは作成されず、通常のロールバックジャーナルには、マスタージャーナルの名前を記録するために通常予約されている場所に空の文字列が含まれます。</target>
        </trans-unit>
        <trans-unit id="5896c61835dd6f9792c99d8e8f334dcf5e7f29e5" translate="yes" xml:space="preserve">
          <source>If SQLite needs a page-cache entry that is larger than &quot;sz&quot; bytes or if it needs more than N entries, it falls back to using the general-purpose memory allocator.</source>
          <target state="translated">SQLite では、&quot;sz&quot; バイトよりも大きなページキャッシュエントリが必要な場合や、N 個以上のエントリが必要な場合は、汎用メモリアロケータを使用することになります。</target>
        </trans-unit>
        <trans-unit id="4aa68767277ee1001967243f3227f1d8f761e4eb" translate="yes" xml:space="preserve">
          <source>If SQLite recognizes a table as a shadow table, and if the &lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigdefensive&quot;&gt;SQLITE_DBCONFIG_DEFENSIVE&lt;/a&gt; flag is set, then the shadow table is read-only for ordinary SQL statements. The shadow table can still be written, but only by SQL that is invoked from within one of the methods of some virtual table implementation.</source>
          <target state="translated">SQLiteがテーブルをシャドウテーブルとして認識し、&lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigdefensive&quot;&gt;SQLITE_DBCONFIG_DEFENSIVE&lt;/a&gt;フラグが設定されている場合、シャドウテーブルは通常のSQLステートメントでは読み取り専用です。シャドウテーブルは引き続き書き込み可能ですが、一部の仮想テーブル実装のメソッドの1つから呼び出されるSQLによってのみ書き込まれます。</target>
        </trans-unit>
        <trans-unit id="c334cbe953204cf334f3f0300d4576308ac4cfdc" translate="yes" xml:space="preserve">
          <source>If URI filenames are recognized when the database connection is originally opened, then URI filenames will also be recognized on &lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt; statements. Similarly, if URI filenames are not recognized when the database connection is first opened, they will not be recognized by &lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt;.</source>
          <target state="translated">データベース接続が最初に開かれたときにURIファイル名が認識される場合、URIファイル名も&lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt;ステートメントで認識されます。同様に、データベース接続が最初に開かれたときにURIファイル名が認識されない場合、それらは&lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt;によって認識されません。</target>
        </trans-unit>
        <trans-unit id="20f2ccdd4e7b5b66dd50ba0f757be7113d0c9526" translate="yes" xml:space="preserve">
          <source>If W is AND-connected terms and X is OR-connected terms and if any term of W appears as a term of X, then the partial index is usable.</source>
          <target state="translated">WがAND連結項、XがOR連結項であり、Wの項がXの項として現れる場合、部分インデックスは使用可能である。</target>
        </trans-unit>
        <trans-unit id="5ee5624c5ac84e77c145fe142470f12976a4d91a" translate="yes" xml:space="preserve">
          <source>If X is a memory allocation previously obtained from sqlite3_malloc(), sqlite3_malloc64(), sqlite3_realloc(), or sqlite3_realloc64(), then sqlite3_msize(X) returns the size of that memory allocation in bytes. The value returned by sqlite3_msize(X) might be larger than the number of bytes requested when X was allocated. If X is a NULL pointer then sqlite3_msize(X) returns zero. If X points to something that is not the beginning of memory allocation, or if it points to a formerly valid memory allocation that has now been freed, then the behavior of sqlite3_msize(X) is undefined and possibly harmful.</source>
          <target state="translated">Xが以前にsqlite3_malloc(),sqlite3_malloc64(),sqlite3_realloc(),sqlite3_realloc64()で取得したメモリ割り当てであれば、sqlite3_msize(X)はそのメモリ割り当てのサイズをバイト単位で返します。sqlite3_msize(X)が返す値は、Xが割り当てられたときに要求されたバイト数よりも大きいかもしれません。XがNULLポインタの場合、sqlite3_msize(X)は0を返します。Xがメモリ割り当ての最初ではないものを指していたり、以前に有効だったメモリ割り当てが解放されたものを指している場合、sqlite3_msize(X)の動作は未定義であり、有害な可能性があります。</target>
        </trans-unit>
        <trans-unit id="b1b66964d31ddb28c71bf027a0d38468bda02bb0" translate="yes" xml:space="preserve">
          <source>If X is greater than or equal to zero, go back to step 3.</source>
          <target state="translated">Xが0以上の場合は、ステップ3に戻ります。</target>
        </trans-unit>
        <trans-unit id="b3fb68847c867d6e5aec8b5513dabb7e57278079" translate="yes" xml:space="preserve">
          <source>If X is non-zero, then the virtual table implementation guarantees that if &lt;a href=&quot;../vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt; returns &lt;a href=&quot;../rescode#constraint&quot;&gt;SQLITE_CONSTRAINT&lt;/a&gt;, it will do so before any modifications to internal or persistent data structures have been made. If the &lt;a href=&quot;../lang_conflict&quot;&gt;ON CONFLICT&lt;/a&gt; mode is ABORT, FAIL, IGNORE or ROLLBACK, SQLite is able to roll back a statement or database transaction, and abandon or continue processing the current SQL statement as appropriate. If the ON CONFLICT mode is REPLACE and the &lt;a href=&quot;../vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt; method returns &lt;a href=&quot;../rescode#constraint&quot;&gt;SQLITE_CONSTRAINT&lt;/a&gt;, SQLite handles this as if the ON CONFLICT mode had been ABORT.</source>
          <target state="translated">Xがゼロ以外の場合、仮想テーブルの実装は、&lt;a href=&quot;../vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt;が&lt;a href=&quot;../rescode#constraint&quot;&gt;SQLITE_CONSTRAINTを&lt;/a&gt;返す場合、内部または永続データ構造に変更が加えられる前にそれを行うことを保証します。場合は&lt;a href=&quot;../lang_conflict&quot;&gt;ON競合&lt;/a&gt;モードは、ABORT、FAIL、IGNOREまたはROLLBACKで、SQLiteは文またはデータベーストランザクションをロールバックすることができ、かつ放棄または必要に応じて、現在のSQL文の処理を継続します。 ON CONFLICTモードがREPLACEであり、&lt;a href=&quot;../vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt;メソッドが&lt;a href=&quot;../rescode#constraint&quot;&gt;SQLITE_CONSTRAINTを&lt;/a&gt;返す場合、SQLiteはON CONFLICTモードがABORTであるかのように処理します。</target>
        </trans-unit>
        <trans-unit id="c0b29678a870c29e379cb0f8c76e93d5c6f694fd" translate="yes" xml:space="preserve">
          <source>If X is non-zero, then the virtual table implementation guarantees that if &lt;a href=&quot;vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt; returns &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_CONSTRAINT&lt;/a&gt;, it will do so before any modifications to internal or persistent data structures have been made. If the &lt;a href=&quot;lang_conflict&quot;&gt;ON CONFLICT&lt;/a&gt; mode is ABORT, FAIL, IGNORE or ROLLBACK, SQLite is able to roll back a statement or database transaction, and abandon or continue processing the current SQL statement as appropriate. If the ON CONFLICT mode is REPLACE and the &lt;a href=&quot;vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt; method returns &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_CONSTRAINT&lt;/a&gt;, SQLite handles this as if the ON CONFLICT mode had been ABORT.</source>
          <target state="translated">Xがゼロ以外の場合、仮想テーブルの実装は、&lt;a href=&quot;vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt;が&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_CONSTRAINTを&lt;/a&gt;返す場合、内部または永続データ構造に変更が加えられる前にそれを行うことを保証します。場合は&lt;a href=&quot;lang_conflict&quot;&gt;ON競合&lt;/a&gt;モードは、ABORT、FAIL、IGNOREまたはROLLBACKで、SQLiteは文またはデータベーストランザクションをロールバックすることができ、かつ放棄または必要に応じて、現在のSQL文の処理を継続します。 ON CONFLICTモードがREPLACEであり、&lt;a href=&quot;vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt;メソッドが&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_CONSTRAINTを&lt;/a&gt;返す場合、SQLiteはON CONFLICTモードがABORTであるかのように処理します。</target>
        </trans-unit>
        <trans-unit id="90405f680f9fd6c0b9fd6e8fd54aba076154778a" translate="yes" xml:space="preserve">
          <source>If X starts a transaction that will initially only read but X knows it will eventually want to write and does not want to be troubled with possible SQLITE_BUSY_SNAPSHOT errors that arise because another connection jumped ahead of it in line, then X can issue &lt;a href=&quot;lang_transaction#immediate&quot;&gt;BEGIN IMMEDIATE&lt;/a&gt; to start its transaction instead of just an ordinary BEGIN. The &lt;a href=&quot;lang_transaction#immediate&quot;&gt;BEGIN IMMEDIATE&lt;/a&gt; command goes ahead and starts a write transaction, and thus blocks all other writers. If the &lt;a href=&quot;lang_transaction#immediate&quot;&gt;BEGIN IMMEDIATE&lt;/a&gt; operation succeeds, then no subsequent operations in that transaction will ever fail with an &lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt; error.</source>
          <target state="translated">Xが最初は読み取りのみのトランザクションを開始するが、Xが最終的に書き込みを行い、別の接続がその行の前にジャンプしたために発生する可能性のあるSQLITE_BUSY_SNAPSHOTエラーに悩まされないことを知っている場合、Xは&lt;a href=&quot;lang_transaction#immediate&quot;&gt;BEGIN IMMEDIATE&lt;/a&gt;を発行して開始できます。通常のBEGINではなく、そのトランザクション。&lt;a href=&quot;lang_transaction#immediate&quot;&gt;IMMEDIATE BEGIN&lt;/a&gt;コマンドは、すべての他の作家を強行し、ライト・トランザクションを開始し、これによりブロック。&lt;a href=&quot;lang_transaction#immediate&quot;&gt;BEGIN IMMEDIATE&lt;/a&gt;操作が成功した場合、そのトランザクションの後続の操作が&lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt;エラーで失敗することはありません。</target>
        </trans-unit>
        <trans-unit id="0eea241e4d0bdc37c50e93c325fbb23bd791a257" translate="yes" xml:space="preserve">
          <source>If a &quot;*&quot; character follows a string within an FTS expression, then the final token extracted from the string is marked as a &lt;b&gt;prefix token&lt;/b&gt;. As you might expect, a prefix token matches any document token of which it is a prefix. For example, the first two queries in the following block will match any document that contains the token &quot;one&quot; immediately followed by the token &quot;two&quot; and then any token that begins with &quot;thr&quot;.</source>
          <target state="translated">「*」文字がFTS式内の文字列に続く場合、文字列から抽出された最後のトークンは、&lt;b&gt;プレフィックストークン&lt;/b&gt;としてマークされ&lt;b&gt;ます&lt;/b&gt;。ご想像のとおり、接頭辞トークンは、それが接頭辞であるドキュメントトークンと一致します。たとえば、次のブロックの最初の2つのクエリは、トークン「1」の直後にトークン「2」が続き、次に「thr」で始まるトークンを含むすべてのドキュメントに一致します。</target>
        </trans-unit>
        <trans-unit id="3fc71a5654e7dbcda099553445308929a409041e" translate="yes" xml:space="preserve">
          <source>If a &quot;DROP TABLE&quot; or &quot;DROP INDEX&quot; SQL command is executed, and the same database connection currently has one or more actively executing SELECT statements, then SQLITE_LOCKED is returned. If &lt;a href=&quot;c3ref/unlock_notify&quot;&gt;sqlite3_unlock_notify()&lt;/a&gt; is called in this case, then the specified callback will be invoked immediately. Re-attempting the &quot;DROP TABLE&quot; or &quot;DROP INDEX&quot; statement will return another SQLITE_LOCKED error. In the implementation of sqlite3_blocking_step() shown to the left, this could cause an infinite loop.</source>
          <target state="translated">「DROP TABLE」または「DROP INDEX」SQLコマンドが実行され、同じデータベース接続に現在1つ以上のアクティブに実行されているSELECTステートメントがある場合、SQLITE_LOCKEDが返されます。この場合、&lt;a href=&quot;c3ref/unlock_notify&quot;&gt;sqlite3_unlock_notify（）&lt;/a&gt;が呼び出されると、指定されたコールバックがすぐに呼び出されます。 「DROP TABLE」または「DROP INDEX」ステートメントを再試行すると、別のSQLITE_LOCKEDエラーが返されます。左に示すsqlite3_blocking_step（）の実装では、これにより無限ループが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="12bc34a5236123febe1cd1188da174890c26f97b" translate="yes" xml:space="preserve">
          <source>If a &quot;^&quot; character appears immediately before a phrase that is not part of a NEAR query, then that phrase only matches a document only if it starts at the first token in a column. The &quot;^&quot; syntax may be combined with a &lt;a href=&quot;fts5#fts5_column_filters&quot;&gt;column filter&lt;/a&gt;, but may not be inserted into the middle of a phrase.</source>
          <target state="translated">「^」文字がNEARクエリの一部ではないフレーズの直前にある場合、そのフレーズは、列の最初のトークンで始まる場合にのみドキュメントと一致します。 「^」構文は&lt;a href=&quot;fts5#fts5_column_filters&quot;&gt;列フィルター&lt;/a&gt;と組み合わせることができますが、フレーズの途中に挿入することはできません。</target>
        </trans-unit>
        <trans-unit id="73147d85cef7d3f5b1649d52c7fae3bdc6d30054" translate="yes" xml:space="preserve">
          <source>If a &quot;create file&quot; operation is executed by SQLite, and then the created file</source>
          <target state="translated">SQLiteで「ファイルの作成」操作が実行され、作成されたファイルが</target>
        </trans-unit>
        <trans-unit id="84d99b586ac4808874504752037c1f68b1dc681c" translate="yes" xml:space="preserve">
          <source>If a &quot;truncate file&quot; operation is executed by SQLite, and then the truncated file</source>
          <target state="translated">SQLiteで「ファイルを切り捨てる」操作が実行され、切り捨てられたファイルが</target>
        </trans-unit>
        <trans-unit id="a177cd3b97251df1bda061d91a729d6e25be393e" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;../wal#walfile&quot;&gt;WAL file&lt;/a&gt; remains on disk after all database connections close (either through the use of the &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlpersistwal&quot;&gt;SQLITE_FCNTL_PERSIST_WAL&lt;/a&gt;&lt;a href=&quot;file_control&quot;&gt;file control&lt;/a&gt; or because the last process to have the database opened exited without calling &lt;a href=&quot;close&quot;&gt;sqlite3_close()&lt;/a&gt;) and a new connection is subsequently opened on that database and &lt;a href=&quot;../wal#walfile&quot;&gt;WAL file&lt;/a&gt;, the &lt;a href=&quot;snapshot_open&quot;&gt;sqlite3_snapshot_open()&lt;/a&gt; interface will only be able to open the last transaction added to the WAL file even though the WAL file contains other valid transactions.</source>
          <target state="translated">場合&lt;a href=&quot;../wal#walfile&quot;&gt;WALファイル&lt;/a&gt;をすべて閉じデータベース接続後にディスク上に残っている（いずれかを使用して&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlpersistwal&quot;&gt;SQLITE_FCNTL_PERSIST_WALの&lt;/a&gt;&lt;a href=&quot;file_control&quot;&gt;ファイル制御&lt;/a&gt;データベースを持っているか、最後のプロセス理由を呼び出さずに終了した開かれた&lt;a href=&quot;close&quot;&gt;sqlite3_close（）&lt;/a&gt;と新しい接続を）、その後、そのデータベースに開かれ、&lt;a href=&quot;../wal#walfile&quot;&gt;WALファイル&lt;/a&gt;、&lt;a href=&quot;snapshot_open&quot;&gt;sqlite3_snapshot_open（）&lt;/a&gt;インターフェースは、WALファイルに他の有効なトランザクションが含まれている場合でも、WALファイルに追加された最後のトランザクションのみを開くことができます。</target>
        </trans-unit>
        <trans-unit id="ce5e78d94d5947b9e328c1516e3f265b0f48637a" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statement&lt;/a&gt; is generated from &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2()&lt;/a&gt; then the statement is automatically re-prepared if the schema changes, up to &lt;a href=&quot;compile#max_schema_retry&quot;&gt;SQLITE_MAX_SCHEMA_RETRY&lt;/a&gt; times (default: 50). The &lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step()&lt;/a&gt; interface will only return SQLITE_SCHEMA back to the application if the failure persists after these many retries.</source>
          <target state="translated">場合&lt;a href=&quot;c3ref/stmt&quot;&gt;プリペアドステートメントを&lt;/a&gt;から生成される&lt;a href=&quot;c3ref/prepare&quot;&gt;（sqlite3_prepare_v2） &lt;/a&gt;、その後の文は、スキーマの変更、までの場合は再作成し、自動的にある&lt;a href=&quot;compile#max_schema_retry&quot;&gt;SQLITE_MAX_SCHEMA_RETRYの&lt;/a&gt;時間（デフォルト：50）。&lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step（）&lt;/a&gt;障害解決しない場合は、インタフェースのみ、これらの多くの再試行後にアプリケーションにSQLITE_SCHEMAバックを返します。</target>
        </trans-unit>
        <trans-unit id="3249186023e31b2ef81a917670edb42184c4e1e6" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;lang_transaction&quot;&gt;ROLLBACK&lt;/a&gt; operation occurs on the same &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; as a pending read or write, then the pending read or write may fail with an SQLITE_ABORT or &lt;a href=&quot;rescode#abort_rollback&quot;&gt;SQLITE_ABORT_ROLLBACK&lt;/a&gt; error.</source>
          <target state="translated">場合&lt;a href=&quot;lang_transaction&quot;&gt;ROLLBACKの&lt;/a&gt;動作は同じで発生する&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続&lt;/a&gt;保留中の読取りまたは書込みのような、その後ペンディング読み取りまたは書き込みがSQLITE_ABORTまたはで失敗することがあり&lt;a href=&quot;rescode#abort_rollback&quot;&gt;SQLITE_ABORT_ROLLBACKの&lt;/a&gt;エラー。</target>
        </trans-unit>
        <trans-unit id="a092e1c1463db0502720c4f04f6df73156ddbd46" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;wal#walfile&quot;&gt;WAL file&lt;/a&gt; remains on disk after all database connections close (either through the use of the &lt;a href=&quot;#sqlitefcntlpersistwal&quot;&gt;SQLITE_FCNTL_PERSIST_WAL&lt;/a&gt;&lt;a href=&quot;#sqlite3_file_control&quot;&gt;file control&lt;/a&gt; or because the last process to have the database opened exited without calling &lt;a href=&quot;#sqlite3_close&quot;&gt;sqlite3_close()&lt;/a&gt;) and a new connection is subsequently opened on that database and &lt;a href=&quot;wal#walfile&quot;&gt;WAL file&lt;/a&gt;, the &lt;a href=&quot;#sqlite3_snapshot_open&quot;&gt;sqlite3_snapshot_open()&lt;/a&gt; interface will only be able to open the last transaction added to the WAL file even though the WAL file contains other valid transactions.</source>
          <target state="translated">場合&lt;a href=&quot;wal#walfile&quot;&gt;WALファイル&lt;/a&gt;をすべて閉じデータベース接続後にディスク上に残っている（いずれかを使用して&lt;a href=&quot;#sqlitefcntlpersistwal&quot;&gt;SQLITE_FCNTL_PERSIST_WALの&lt;/a&gt;&lt;a href=&quot;#sqlite3_file_control&quot;&gt;ファイル制御&lt;/a&gt;データベースを持っているか、最後のプロセス理由を呼び出さずに終了した開かれた&lt;a href=&quot;#sqlite3_close&quot;&gt;sqlite3_close（）&lt;/a&gt;と新しい接続を）、その後、そのデータベースに開かれ、&lt;a href=&quot;wal#walfile&quot;&gt;WALファイル&lt;/a&gt;、&lt;a href=&quot;#sqlite3_snapshot_open&quot;&gt;sqlite3_snapshot_open（）&lt;/a&gt;インターフェースは、WALファイルに他の有効なトランザクションが含まれている場合でも、WALファイルに追加された最後のトランザクションのみを開くことができます。</target>
        </trans-unit>
        <trans-unit id="fa0658f406309a7c36c783a199e98aa7bfe2c3be" translate="yes" xml:space="preserve">
          <source>If a BEFORE UPDATE or BEFORE DELETE trigger modifies or deletes a row that was to have been updated or deleted, then the result of the subsequent update or delete operation is undefined. Furthermore, if a BEFORE trigger modifies or deletes a row, then it is undefined whether or not AFTER triggers that would have otherwise run on those rows will in fact run.</source>
          <target state="translated">BEFORE UPDATE または BEFORE DELETE トリガが更新または削除されるはずの行を変更または削除した場合、その後の更新または削除操作の結果は未定義です。さらに、BEFORE トリガが行を変更または削除する場合、それらの行で実行されるはずの AFTER トリガが実際に実行されるかどうかは未定義です。</target>
        </trans-unit>
        <trans-unit id="a3ab52a71f2c1fab71f9f4f7d4dd870ab7b02c55" translate="yes" xml:space="preserve">
          <source>If a COMMIT statement (or the RELEASE of a transaction SAVEPOINT) fails because the database is currently in a state that violates a deferred foreign key constraint and there are currently &lt;a href=&quot;lang_savepoint&quot;&gt;nested savepoints&lt;/a&gt;, the nested savepoints remain open.</source>
          <target state="translated">データベースが延期外部キー制約に違反して現在がある状態で、現在あるため、ステートメント（またはトランザクションのSAVEPOINTのRELEASE）が失敗した場合は、COMMIT &lt;a href=&quot;lang_savepoint&quot;&gt;、ネストされたセーブポイントは&lt;/a&gt;、ネストされたセーブポイントは開いたまま。</target>
        </trans-unit>
        <trans-unit id="4862567128635ae0bf91b3eee8827f7e081e0187" translate="yes" xml:space="preserve">
          <source>If a DELETE statement has a LIMIT clause, the maximum number of rows that will be deleted is found by evaluating the accompanying expression and casting it to an integer value. If the result of the evaluating the LIMIT clause cannot be losslessly converted to an integer value, it is an error. A negative LIMIT value is interpreted as &quot;no limit&quot;. If the DELETE statement also has an OFFSET clause, then it is similarly evaluated and cast to an integer value. Again, it is an error if the value cannot be losslessly converted to an integer. If there is no OFFSET clause, or the calculated integer value is negative, the effective OFFSET value is zero.</source>
          <target state="translated">DELETE文にLIMIT句がある場合、削除される行の最大数は、付随する式を評価して整数値にキャストすることで求められます。LIMIT句の評価結果が整数値にロスレスに変換できない場合は、エラーとなります。負のLIMIT値は「制限なし」と解釈されます。DELETE文にOFFSET句がある場合、同様に評価され、整数値にキャストされます。ここでも、値を可逆的に整数に変換できない場合はエラーとなります。OFFSET句がない場合、または計算された整数値が負の場合、有効なOFFSET値はゼロになります。</target>
        </trans-unit>
        <trans-unit id="a8ebe41fb4265f7abee56db5ee7b5c4f78f4ea2f" translate="yes" xml:space="preserve">
          <source>If a FILTER clause is provided, then only rows for which the</source>
          <target state="translated">FILTER句が指定されている場合、その行の中で</target>
        </trans-unit>
        <trans-unit id="94816fac33b04eac89bfe331f82f9493ef356c93" translate="yes" xml:space="preserve">
          <source>If a FROM clause is specified, the data on which a simple SELECT query operates comes from the one or more tables or subqueries (SELECT statements in parentheses) specified following the FROM keyword. A subquery specified in the table-or-subquery following the FROM clause in a simple SELECT statement is handled as if it was a table containing the data returned by executing the subquery statement. Each column of the subquery has the &lt;a href=&quot;datatype3#collation&quot;&gt;collation sequence&lt;/a&gt; and &lt;a href=&quot;datatype3#affinity&quot;&gt;affinity&lt;/a&gt; of the corresponding expression in the subquery statement.</source>
          <target state="translated">FROM句が指定されている場合、単純なSELECTクエリの対象となるデータは、FROMキーワードの後に​​指定された1つ以上のテーブルまたはサブクエリ（括弧内のSELECTステートメント）から取得されます。単純なSELECTステートメントのFROM句に続くtable-or-subqueryで指定されたサブクエリは、サブクエリステートメントを実行して返されたデータを含むテーブルであるかのように処理されます。サブクエリの各列には、サブクエリステートメントの対応する式の&lt;a href=&quot;datatype3#collation&quot;&gt;照合順序&lt;/a&gt;と&lt;a href=&quot;datatype3#affinity&quot;&gt;類似性&lt;/a&gt;があります。</target>
        </trans-unit>
        <trans-unit id="257e2a863a3526135a72b7350cb70ec4620d0ce5" translate="yes" xml:space="preserve">
          <source>If a HAVING clause is specified, it is evaluated once for each group of rows as a &lt;a href=&quot;lang_expr#booleanexpr&quot;&gt;boolean expression&lt;/a&gt;. If the result of evaluating the HAVING clause is false, the group is discarded. If the HAVING clause is an aggregate expression, it is evaluated across all rows in the group. If a HAVING clause is a non-aggregate expression, it is evaluated with respect to an arbitrarily selected row from the group. The HAVING expression may refer to values, even aggregate functions, that are not in the result.</source>
          <target state="translated">HAVING句を指定すると、行のグループごとに&lt;a href=&quot;lang_expr#booleanexpr&quot;&gt;ブール式&lt;/a&gt;として1回評価されます。 HAVING句の評価結果がfalseの場合、グループは破棄されます。 HAVING句が集計式の場合、グループ内のすべての行にわたって評価されます。 HAVING句が非集計式である場合、グループから任意に選択された行に対して評価されます。 HAVING式は、結果に含まれていない値（集約関数でさえ）を参照する場合があります。</target>
        </trans-unit>
        <trans-unit id="30445e74b001ab802719baf4ad36071ade7519f0" translate="yes" xml:space="preserve">
          <source>If a LIMIT clause is present, it might be possible to avoid scanning the entire table.</source>
          <target state="translated">LIMIT句がある場合は、テーブル全体をスキャンしないようにすることができるかもしれません。</target>
        </trans-unit>
        <trans-unit id="948b4ac14d2baa3362d0ca28f059b73564c6f3e7" translate="yes" xml:space="preserve">
          <source>If a Linux &lt;a href=&quot;http://en.wikipedia.org/wiki/Ext3&quot;&gt;ext3&lt;/a&gt; filesystem is mounted without the &quot;barrier=1&quot; option in the &lt;a href=&quot;http://en.wikipedia.org/wiki/fstab&quot;&gt;/etc/fstab&lt;/a&gt; and the disk drive write cache is enabled then filesystem corruption can occur following a power loss or OS crash. Whether or not corruption can occur depends on the details of the disk control hardware; corruption is more likely with inexpensive consumer-grade disks and less of a problem for enterprise-class storage devices with advanced features such as non-volatile write caches. Various ext3 experts &lt;a href=&quot;http://www.redhat.com/archives/ext3-users/2010-July/msg00001.html&quot;&gt; confirm this behavior&lt;/a&gt;. We are told that most Linux distributions do not use barrier=1 and do not disable the write cache so most Linux distributions are vulnerable to this problem. Note that this is an operating system and hardware issue and that there is nothing that SQLite can do to work around it. &lt;a href=&quot;http://ozlabs.org/~rusty/index.cgi/tech/2009-10-20.html&quot;&gt; Other database engines&lt;/a&gt; have also run into this same problem.</source>
          <target state="translated">Linux &lt;a href=&quot;http://en.wikipedia.org/wiki/Ext3&quot;&gt;ext3&lt;/a&gt;ファイルシステムが&lt;a href=&quot;http://en.wikipedia.org/wiki/fstab&quot;&gt;/ etc / fstab&lt;/a&gt;の「barrier = 1」オプションなしでマウントされており、ディスクドライブの書き込みキャッシュが有効になっている場合、停電またはOSのクラッシュ後にファイルシステムの破損が発生する可能性があります。破損が発生するかどうかは、ディスク制御ハードウェアの詳細によって異なります。破損は、安価なコンシューマーグレードのディスクで発生する可能性が高く、不揮発性書き込みキャッシュなどの高度な機能を備えたエンタープライズクラスのストレージデバイスでは問題が少ないです。さまざまなext3エキスパートが&lt;a href=&quot;http://www.redhat.com/archives/ext3-users/2010-July/msg00001.html&quot;&gt;この動作を確認します&lt;/a&gt;。ほとんどのLinuxディストリビューションはバリア= 1を使用せず、書き込みキャッシュを無効にしないため、ほとんどのLinuxディストリビューションはこの問題に対して脆弱です。これはオペレーティングシステムとハードウェアの問題であり、SQLiteがそれを回避するためにできることは何もないことに注意してください。&lt;a href=&quot;http://ozlabs.org/~rusty/index.cgi/tech/2009-10-20.html&quot;&gt;他のデータベースエンジンで&lt;/a&gt;もこの同じ問題が発生しています。</target>
        </trans-unit>
        <trans-unit id="99b0a8e8602a0a06983153315092cfd9796ad41e" translate="yes" xml:space="preserve">
          <source>If a NOT NULL constraint is specified, then the column must have a default value other than NULL.</source>
          <target state="translated">NOT NULL 制約が指定された場合、列は NULL 以外のデフォルト値を持つ必要があります。</target>
        </trans-unit>
        <trans-unit id="55be5a331b8cf28f9f746d3f7eb6341aa17eff02" translate="yes" xml:space="preserve">
          <source>If a SELECT query contains an ORDER BY, GROUP BY or DISTINCT clause, SQLite may need to use a temporary b-tree structure to sort the output rows. Or, it might &lt;a href=&quot;queryplanner#sorting&quot;&gt;use an index&lt;/a&gt;. Using an index is almost always much more efficient than performing a sort. If a temporary b-tree is required, a record is added to the EXPLAIN QUERY PLAN output with the &quot;detail&quot; field set to a string value of the form &quot;USE TEMP B-TREE FOR xxx&quot;, where xxx is one of &quot;ORDER BY&quot;, &quot;GROUP BY&quot; or &quot;DISTINCT&quot;. For example:</source>
          <target state="translated">SELECTクエリにORDER BY、GROUP BY、またはDISTINCT句が含まれている場合、SQLiteは一時的なBツリー構造を使用して出力行をソートする必要がある場合があります。または、&lt;a href=&quot;queryplanner#sorting&quot;&gt;インデックスを使用する場合があります&lt;/a&gt;。ほとんどの場合、インデックスを使用する方が、ソートを実行するよりもはるかに効率的です。一時的なbツリーが必要な場合、「詳細」フィールドを「USE TEMP B-TREE FOR xxx」という形式の文字列値に設定して、EXPLAIN QUERY PLAN出力にレコードを追加します。ここで、xxxは「ORDER BY」、「GROUP BY」、または「DISTINCT」。例えば：</target>
        </trans-unit>
        <trans-unit id="5b44dbe4fb9e1c6ef0606b8af702048ca0e438cc" translate="yes" xml:space="preserve">
          <source>If a SELECT statement that returns more than one row does not have an ORDER BY clause, the order in which the rows are returned is undefined. Or, if a SELECT statement does have an ORDER BY clause, then the list of expressions attached to the ORDER BY determine the order in which rows are returned to the user.</source>
          <target state="translated">複数の行を返すSELECT文にORDER BY句がない場合、返される行の順序は未定義です。あるいは、SELECT文にORDER BY句がある場合、ORDER BYに付随する式のリストが、ユーザに返される行の順序を決定します。</target>
        </trans-unit>
        <trans-unit id="1b3cef981ef6c33ad4faa712cdaf3b903f15861f" translate="yes" xml:space="preserve">
          <source>If a UNION operator connects the initial-select with the recursive-select, then only add rows to the queue if no identical row has been previously added to the queue. Repeated rows are discarded before being added to the queue even if the repeated rows have already been extracted from the queue by the recursion step. If the operator is UNION ALL, then all rows generated by both the initial-select and the recursive-select are always added to the queue even if they are repeats. When determining if a row is repeated, NULL values compare equal to one another and not equal to any other value.</source>
          <target state="translated">UNION演算子が初期選択と再帰選択を接続している場合、以前に同じ行がキューに追加されていない場合にのみ、行をキューに追加します。繰り返しの行は、たとえその繰り返しの行が再帰ステップによって既にキューから抽出されていたとしても、キューに追加される前に破棄されます。演算子が UNION ALL の場合、初期選択と再帰選択の両方によって生成されたすべての行は、たとえそれらが繰り返し行であっても、常にキューに追加されます。行が繰り返されているかどうかを判断する際には、NULL値は互いに等しく比較され、他の値とは等しくありません。</target>
        </trans-unit>
        <trans-unit id="56d92b47e4081e5a6e548ebb6f898e186d052899" translate="yes" xml:space="preserve">
          <source>If a WHEN clause is supplied, the SQL statements specified are only executed if the WHEN clause is true. If no WHEN clause is supplied, the SQL statements are executed every time the trigger fires.</source>
          <target state="translated">WHEN句が指定された場合、指定されたSQL文はWHEN句が真の場合にのみ実行されます。WHEN句が与えられなかった場合、トリガが発生するたびにSQL文が実行されます。</target>
        </trans-unit>
        <trans-unit id="85a070271019d9b24039a7b30649256cb4c49fd9" translate="yes" xml:space="preserve">
          <source>If a WHERE clause is specified, the WHERE expression is evaluated for each row in the input data as a &lt;a href=&quot;lang_expr#booleanexpr&quot;&gt;boolean expression&lt;/a&gt;. Only rows for which the WHERE clause expression evaluates to true are included from the dataset before continuing. Rows are excluded from the result if the WHERE clause evaluates to either false or NULL.</source>
          <target state="translated">WHERE句が指定されている場合、WHERE式は入力データの各行に対して&lt;a href=&quot;lang_expr#booleanexpr&quot;&gt;ブール式&lt;/a&gt;として評価されます。続行する前に、WHERE句の式がtrueと評価される行のみがデータセットから含まれます。 WHERE句の評価がfalseまたはNULLの場合、行は結果から除外されます。</target>
        </trans-unit>
        <trans-unit id="99314068471e46954e8f897765afda682981e6bc" translate="yes" xml:space="preserve">
          <source>If a build of SQLite does not include the FTS modules, then any attempt to prepare an SQL statement to create an FTS3 or FTS4 table or to drop or access an existing FTS table in any way will fail. The error message returned will be similar to &quot;no such module: ftsN&quot; (where N is either 3 or 4).</source>
          <target state="translated">SQLite のビルドに FTS モジュールが含まれていない場合、FTS3 または FTS4 テーブルを作成したり、既存の FTS テーブルを削除したりアクセスしたりする SQL 文を準備しようとしても失敗します。返されるエラーメッセージは、&quot;no such module:ftsN&quot; (ここで、N は 3 または 4 のいずれかです)のようなものになります。</target>
        </trans-unit>
        <trans-unit id="c07dc39ee71e6a6e8537165278b706aabd6e81bd" translate="yes" xml:space="preserve">
          <source>If a call to sqlite3_step() that attempts to write to a database table returns SQLITE_LOCKED, then more than one other connection may be holding a read-lock on the database table in question. In this case SQLite simply selects one of those other connections arbitrarily and issues the unlock-notify callback when that connection's transaction is finished. Whether the call to sqlite3_step() was blocked by one or many connections, when the corresponding unlock-notify callback is issued it is not guaranteed that the required lock is available, only that it may be.</source>
          <target state="translated">データベーステーブルへの書き込みを試みたsqlite3_step()の呼び出しがSQLITE_LOCKEDを返す場合、問題のデータベーステーブルに対して複数の他の接続がリードロックを保持している可能性があります。この場合、SQLiteは単に他の接続のうちの1つを任意に選択し、その接続のトランザクションが終了したときにunlock-notifyコールバックを発行します。sqlite3_step()の呼び出しが1つのコネクションによってブロックされていようが、多数のコネクションによってブロックされていようが、対応する unlock-notifyコールバックが発行されたときに、必要なロックが利用可能であることを保証するものではありません。</target>
        </trans-unit>
        <trans-unit id="12e866adc40a794d5a50cd7647771628a0fe472b" translate="yes" xml:space="preserve">
          <source>If a character specified as part of the argument to &quot;tokenchars=&quot; is considered to be a token character by default, it is ignored. This is true even if it has been marked as a separator by an earlier &quot;separators=&quot; option. Similarly, if a character specified as part of a &quot;separators=&quot; option is treated as a separator character by default, it is ignored. If multiple &quot;tokenchars=&quot; or &quot;separators=&quot; options are specified, all are processed. For example:</source>
          <target state="translated">tokenchars=&quot; の引数の一部として指定された文字が、デフォルトではトークン文字とみなされている場合、それは無視されます。これは、以前の &quot;separators=&quot; オプションで区切り文字としてマークされていた場合でも同様です。同様に、&quot;separators=&quot;オプションの一部として指定された文字がデフォルトでセパレータ文字として扱われている場合、それは無視されます。複数の &quot;tokenchars=&quot; または &quot;separators=&quot; オプションが指定されている場合は、すべて処理されます。例えば、&quot;tokenchars=&quot;または &quot;separators=&quot;オプションを複数指定した場合は、すべて処理されます。</target>
        </trans-unit>
        <trans-unit id="4047a69992390b90bb1e651abb363899dad3ce20" translate="yes" xml:space="preserve">
          <source>If a collating function fails any of the above constraints and that collating function is registered and used, then the behavior of SQLite is undefined.</source>
          <target state="translated">照合関数が上記の制約のいずれかに失敗し、その照合関数が登録されて使用されている場合、SQLiteの動作は未定義となります。</target>
        </trans-unit>
        <trans-unit id="4a25d30fe6f01a94e32b9a3c4b8ab96f2806f18f" translate="yes" xml:space="preserve">
          <source>If a column datatype contains the special keyword &quot;HIDDEN&quot; (in any combination of upper and lower case letters) then that keyword it is omitted from the column datatype name and the column is marked as a hidden column internally. A hidden column differs from a normal column in three respects:</source>
          <target state="translated">列のデータ型に特別なキーワード &quot;HIDDEN&quot; が含まれている場合は、そのキーワードは列のデータ型名から省略され、その列は内部的に hidden 列としてマークされます。隠された列は、3つの点で通常の列とは異なります。</target>
        </trans-unit>
        <trans-unit id="4a3060f5f06633a8fd81221c196cda03a0efe5c5" translate="yes" xml:space="preserve">
          <source>If a column filter specification is preceded by a &quot;-&quot; character, then it is interpreted as a list of column not to match against. For example:</source>
          <target state="translated">カラムフィルタ指定の前に&quot;-&quot;文字が付けられている場合は、マッチしないカラムのリストとして解釈されます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="4784be250e1d29a9c62d93440a67186e8f2d433e" translate="yes" xml:space="preserve">
          <source>If a column has the type INTEGER PRIMARY KEY AUTOINCREMENT then a slightly different ROWID selection algorithm is used. The ROWID chosen for the new row is at least one larger than the largest ROWID that has ever before existed in that same table. If the table has never before contained any data, then a ROWID of 1 is used. If the largest possible ROWID has previously been inserted, then new INSERTs are not allowed and any attempt to insert a new row will fail with an SQLITE_FULL error. Only ROWID values from previous transactions that were committed are considered. ROWID values that were rolled back are ignored and can be reused.</source>
          <target state="translated">列の型が INTEGER PRIMARY KEY AUTOINCREMENT の場合は、少し異なる ROWID 選択アルゴリズムが使用されます。新しい行に選択される ROWID は、同じテーブルに過去に存在した最大の ROWID よりも少なくとも 1 つ大きいものです。テーブルにデータが一度も含まれていない場合は、1のROWIDが使用されます。可能な限り最大の ROWID が以前に挿入されていた場合、新しい INSERT は許可されず、新しい行を挿入しようとすると SQLITE_FULL エラーで失敗します。コミットされた以前のトランザクションの ROWID 値のみが考慮されます。ロールバックされた ROWID 値は無視され、再利用することができます。</target>
        </trans-unit>
        <trans-unit id="85779fa11fd249fc0a9433b1c9e912b143d1abd7" translate="yes" xml:space="preserve">
          <source>If a column-name list follows the view-name, then that list determines the names of the columns for the view. If the column-name list is omitted, then the names of the columns in the view are derived from the names of the result-set columns in the &lt;a href=&quot;syntax/select-stmt&quot;&gt;select-stmt&lt;/a&gt;. The use of column-name list is recommended. Or, if column-name list is omitted, then the result columns in the &lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt; statement that defines the view should have well-defined names using the &quot;&lt;a href=&quot;syntax/result-column&quot;&gt;AS column-alias&lt;/a&gt;&quot; syntax. SQLite allows you to create views that depend on automatically generated column names, but you should avoid using them since the rules used to generate column names are not a defined part of the interface and might change in future releases of SQLite.</source>
          <target state="translated">column-nameリストがview-nameの後に続く場合、そのリストはビューの列の名前を決定します。 column-nameリストが省略されている場合、ビューの列の名前は、&lt;a href=&quot;syntax/select-stmt&quot;&gt;select-stmtの&lt;/a&gt;結果セット列の名前から派生します。 column-nameリストの使用をお勧めします。または、column-nameリストが省略されている場合、ビューを定義する&lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt;ステートメントの結果列には、 &quot; &lt;a href=&quot;syntax/result-column&quot;&gt;AS column-alias&lt;/a&gt; &quot;構文を使用して明確に定義された名前が必要です。 SQLiteでは、自動的に生成された列名に依存するビューを作成できますが、列名の生成に使用されるルールはインターフェースの定義された部分ではなく、SQLiteの将来のリリースで変更される可能性があるため、これらの使用は避けてください。</target>
        </trans-unit>
        <trans-unit id="7f7aaafed42977493a2413f4303512821df4e3b2" translate="yes" xml:space="preserve">
          <source>If a conflict handler returns this value no special action is taken. The change that caused the conflict is not applied. The session module continues to the next change in the changeset.</source>
          <target state="translated">競合ハンドラがこの値を返した場合、特別なアクションは実行されません。コンフリクトの原因となった変更は適用されません。セッションモジュールは、チェンジセットの次の変更に継続します。</target>
        </trans-unit>
        <trans-unit id="a40b2d39f56dad1b134a26af2fe2ae696281adc1" translate="yes" xml:space="preserve">
          <source>If a covering index can be used for a query, then the multiple rowid lookups can be avoided and the cost of the query drops dramatically.</source>
          <target state="translated">カバーリングインデックスをクエリに使用できる場合は、複数の行IDのルックアップを避けることができ、クエリのコストは劇的に低下します。</target>
        </trans-unit>
        <trans-unit id="653b4381ff1ad3607fbc3061d7b4f5d80ed74deb" translate="yes" xml:space="preserve">
          <source>If a crash or power failure occurs and results in a hot journal but that journal is deleted, the next process to open the database will not know that it contains changes that need to be rolled back. The rollback will not occur and the database will be left in an inconsistent state. Rollback journals might be deleted for any number of reasons:</source>
          <target state="translated">クラッシュや停電が発生してホット・ジャーナルが発生したが、そのジャーナルが削除された場合、データベースを開く次のプロセスでは、ロールバックする必要のある変更が含まれていることがわかりません。ロールバックは発生せず、データベースは一貫性のない状態のままになります。ロールバック・ジャーナルは、いくつかの理由で削除される可能性があります。</target>
        </trans-unit>
        <trans-unit id="dbc53ced19579b45a05b723b3063167292a44232" translate="yes" xml:space="preserve">
          <source>If a crash or power loss does occur and a hot journal is left on the disk, it is essential that the original database file and the hot journal remain on disk with their original names until the database file is opened by another SQLite process and rolled back. During recovery at &lt;a href=&quot;#section_4_2&quot;&gt;step 4.2&lt;/a&gt; SQLite locates the hot journal by looking for a file in the same directory as the database being opened and whose name is derived from the name of the file being opened. If either the original database file or the hot journal have been moved or renamed, then the hot journal will not be seen and the database will not be rolled back.</source>
          <target state="translated">クラッシュまたは停電が発生し、ホットジャーナルがディスクに残っている場合、元のデータベースファイルとホットジャーナルは、データベースファイルが別のSQLiteプロセスによって開かれてロールバックされるまで、元の名前でディスクに残ることが重要です。 。&lt;a href=&quot;#section_4_2&quot;&gt;ステップ4.2での&lt;/a&gt;リカバリー中に、SQLiteは、開かれているデータベースと同じディレクトリーで、開かれているファイルの名前から派生した名前のファイルを探すことにより、ホットジャーナルを見つけます。元のデータベースファイルまたはホットジャーナルが移動または名前変更されている場合、ホットジャーナルは表示されず、データベースはロールバックされません。</target>
        </trans-unit>
        <trans-unit id="fb8183919d1fc07417b2707b8092ba7a7a08090d" translate="yes" xml:space="preserve">
          <source>If a crash or power loss occurs in the middle of a transaction, then the rollback journal file is left on disk. The next time another application attempts to open the database file, it notices the presence of the abandoned rollback journal (we call it a &quot;hot journal&quot; in this circumstance) and uses the information in the journal to restore the database to its state prior to the start of the incomplete transaction. This is how SQLite implements atomic commit.</source>
          <target state="translated">トランザクションの途中でクラッシュや停電が発生した場合、ロールバック・ジャーナル・ファイルはディスク上に残されます。次に別のアプリケーションがデータベースファイルを開こうとすると、放棄されたロールバックジャーナル(この状況では「ホットジャーナル」と呼んでいます)の存在に気付き、ジャーナル内の情報を使ってデータベースを不完全なトランザクションの開始前の状態に復元します。これが SQLite がアトミックコミットを実装する方法です。</target>
        </trans-unit>
        <trans-unit id="ac9f0e2592a2df4c51e939a4b5d49b41b7d7ebcb" translate="yes" xml:space="preserve">
          <source>If a database connection is opened with the &quot;-uri 1&quot; option, then &lt;a href=&quot;uri&quot;&gt;URI filenames&lt;/a&gt; are honored by the &quot;backup&quot; and &quot;restore&quot; commands.</source>
          <target state="translated">「-uri 1」オプションを使用してデータベース接続が開かれている場合、&lt;a href=&quot;uri&quot;&gt;URIファイル名&lt;/a&gt;は「backup」および「restore」コマンドによって受け入れられます。</target>
        </trans-unit>
        <trans-unit id="d5923feff2a2aef8fc7abf4f600aff34fc785066" translate="yes" xml:space="preserve">
          <source>If a database connection is operating in &lt;a href=&quot;pragma#pragma_locking_mode&quot;&gt;exclusive locking mode&lt;/a&gt; or in &lt;a href=&quot;pragma#pragma_journal_mode&quot;&gt;persistent journal mode&lt;/a&gt; (PRAGMA journal_mode=persist) then after committing a transaction the &lt;a href=&quot;lockingv3#rollback&quot;&gt;rollback journal&lt;/a&gt; file may remain in the file-system. This increases performance for subsequent transactions since overwriting an existing file is faster than append to a file, but it also consumes file-system space. After a large transaction (e.g. a &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt;), the rollback journal file may consume a very large amount of space.</source>
          <target state="translated">データベース接続が&lt;a href=&quot;pragma#pragma_locking_mode&quot;&gt;排他ロックモード&lt;/a&gt;または&lt;a href=&quot;pragma#pragma_journal_mode&quot;&gt;永続ジャーナルモード&lt;/a&gt;（PRAGMA journal_mode = persist）で動作している場合、トランザクションをコミットした後、&lt;a href=&quot;lockingv3#rollback&quot;&gt;ロールバックジャーナル&lt;/a&gt;ファイルがファイルシステムに残ることがあります。既存のファイルを上書きする方がファイルに追加するより高速なので、これにより後続のトランザクションのパフォーマンスが向上しますが、ファイルシステムのスペースも消費します。大きなトランザクション（&lt;a href=&quot;lang_vacuum&quot;&gt;VACUUMなど&lt;/a&gt;）の後、ロールバックジャーナルファイルは非常に大量のスペースを消費する場合があります。</target>
        </trans-unit>
        <trans-unit id="5f55f04439258c2d344a35f29269aa9db3e5202b" translate="yes" xml:space="preserve">
          <source>If a database file is accessed using 8+3 naming rather than the default long filename, then it must be consistently accessed using 8+3 naming by every database connection every time it is opened, or else there is a risk of database corruption. The auxiliary &lt;a href=&quot;lockingv3#rollback&quot;&gt;rollback journal&lt;/a&gt; and &lt;a href=&quot;wal&quot;&gt;write-ahead log&lt;/a&gt; files are essential to SQLite for being about to recover from a crash. If an application is using 8+3 names and crashes, then the information needed to safely recover from the crash is stored in files with the &quot;&lt;code&gt;.nal&lt;/code&gt;&quot; or &quot;&lt;code&gt;.wal&lt;/code&gt;&quot; extension. If the next application to open the database does not specify the &quot;&lt;code&gt;8_3_names=1&lt;/code&gt;&quot; URI parameter, then SQLite will use the long filenames to try to locate the rollback journal or write-ahead log files. It will not find them, since they were saved using 8+3 names by the application that crashed, and hence the database will not be properly recovered and will likely go corrupt.</source>
          <target state="translated">デフォルトの長いファイル名ではなく8 + 3ネーミングを使用してデータベースファイルにアクセスする場合は、開かれるたびにすべてのデータベース接続で8 + 3ネーミングを使用して一貫してアクセスする必要があります。そうしないと、データベースが破損するおそれがあります。SQLiteがクラッシュから回復しようとするためには、補助&lt;a href=&quot;lockingv3#rollback&quot;&gt;ロールバックジャーナル&lt;/a&gt;と&lt;a href=&quot;wal&quot;&gt;先行書き込みログ&lt;/a&gt;ファイルが不可欠です。アプリケーションが8 + 3の名前とクラッシュを使用している場合、クラッシュから安全に回復するために必要な情報は、 &lt;code&gt;.nal&lt;/code&gt; が「.nal」または「 &lt;code&gt;.wal&lt;/code&gt; 」のファイルに保存されます。データベースを開く次のアプリケーションで &quot; &lt;code&gt;8_3_names=1&lt;/code&gt; &quot;URIパラメータの場合、SQLiteは長いファイル名を使用してロールバックジャーナルまたは先読みログファイルを見つけようとします。クラッシュしたアプリケーションによって8 + 3の名前を使用して保存されたため、これらのファイルは見つからないため、データベース正しく回復されず、破損する可能性があります。</target>
        </trans-unit>
        <trans-unit id="bd70a20b8f5f47bbbe011a3bee3a583fecc50caa" translate="yes" xml:space="preserve">
          <source>If a database is written by SQLite version 3.7.0 or later and then written again by SQLite version 3.6.23 or earlier in such a way as to make the size of the database file decrease, then the next time that SQLite version 3.7.0 access the database file, it might report that the database file is corrupt. The database file is not really corrupt, however. Version 3.7.0 was simply being overly zealous in its corruption detection.</source>
          <target state="translated">SQLite バージョン 3.7.0 以降でデータベースを書き込んだ後、SQLite バージョン 3.6.23 以前でデータベースファイルのサイズを小さくするような方法で再度書き込んだ場合、次に SQLite バージョン 3.7.0 がデータベースファイルにアクセスしたときに、データベースファイルが破損していると報告されることがあります。しかし、データベースファイルは実際には壊れていません。バージョン3.7.0は単に破損検出に熱心になりすぎただけです。</target>
        </trans-unit>
        <trans-unit id="c0e8b12ff7ad15986137c5d5f01f4e0ef949a4a6" translate="yes" xml:space="preserve">
          <source>If a database were originally created using SQLite version 3.7.0, then written by SQLite version 3.6.23.1 such that the size of the database file increased, then written again by SQLite version 3.7.0, the database file could go corrupt.</source>
          <target state="translated">もともとSQLiteバージョン3.7.0でデータベースを作成し、SQLiteバージョン3.6.23.1で書き込んでデータベースファイルのサイズが大きくなった後、再度SQLiteバージョン3.7.0で書き込んだ場合、データベースファイルが破損してしまう可能性があります。</target>
        </trans-unit>
        <trans-unit id="f7f861f58b781638426cc97ad65bbe6addfa6a62" translate="yes" xml:space="preserve">
          <source>If a keyword in double quotes (ex: &lt;b&gt;&quot;key&quot;&lt;/b&gt; or &lt;b&gt;&quot;glob&quot;&lt;/b&gt;) is used in a context where it cannot be resolved to an identifier but where a string literal is allowed, then the token is understood to be a string literal instead of an identifier.</source>
          <target state="translated">二重引用符で囲まれたキーワード（例：&lt;b&gt;&quot;key&quot;&lt;/b&gt;または&lt;b&gt;&quot;glob&quot;&lt;/b&gt;）が、識別子に解決できないが文字列リテラルが許可されているコンテキストで使用されている場合、トークンは文字列リテラルではなく、識別子。</target>
        </trans-unit>
        <trans-unit id="ff734731d1dd61e745b8c19a93e379fd051ea7fb" translate="yes" xml:space="preserve">
          <source>If a keyword in single quotes (ex: &lt;b&gt;'key'&lt;/b&gt; or &lt;b&gt;'glob'&lt;/b&gt;) is used in a context where an identifier is allowed but where a string literal is not allowed, then the token is understood to be an identifier instead of a string literal.</source>
          <target state="translated">単一引用符で囲まれたキーワード（例：&lt;b&gt;'key'&lt;/b&gt;または&lt;b&gt;'glob'&lt;/b&gt;）が、識別子は許可されているが文字列リテラルは許可されていないコンテキストで使用される場合、トークンは文字列リテラルではなく識別子であると理解されます。</target>
        </trans-unit>
        <trans-unit id="fd8582b07f28c43cf6305e6462fb4a6db23b8ea7" translate="yes" xml:space="preserve">
          <source>If a matchable phrase is part of a series of phrases connected by NEAR operators in the FTS query expression, then each phrase match must be sufficiently close to other phrase matches of the relevant types to satisfy the NEAR condition.</source>
          <target state="translated">一致可能なフレーズが、FTS クエリ式の NEAR 演算子によって接続された一連のフレーズの一部である場合、各フレーズの一致は、NEAR 条件を満たすために、関連するタイプの他のフレーズの一致に十分に近接していなければなりません。</target>
        </trans-unit>
        <trans-unit id="16ba62507a795aad87688bd7a66b598560ff99c0" translate="yes" xml:space="preserve">
          <source>If a named virtual table that uses the dbstat module is desired, then the recommended way to create an instance of the dbstat virtual table is as follows:</source>
          <target state="translated">dbstatモジュールを使用する名前付き仮想テーブルが必要な場合は、以下のようにdbstat仮想テーブルのインスタンスを作成することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="f0a2ba4a4cc7d08c018b4dbe8137dc10439214b7" translate="yes" xml:space="preserve">
          <source>If a numeric literal has a decimal point or an exponentiation clause or if its magnitude is less than -9223372036854775808 or greater than 9223372036854775807, then it is a floating point literal. Otherwise is it is an integer literal. The &quot;E&quot; character that begins the exponentiation clause of a floating point literal can be either upper or lower case. The &quot;.&quot; character is always used as the decimal point even if the locale setting specifies &quot;,&quot; for this role - the use of &quot;,&quot; for the decimal point would result in syntactic ambiguity.</source>
          <target state="translated">数値リテラルに小数点または指数節がある場合、またはその大きさが-9223372036854775808より小さいか、9223372036854775807より大きい場合、それは浮動小数点リテラルです。それ以外の場合は整数リテラルです。浮動小数点リテラルの指数化句の先頭にある &quot;E &quot;文字は、大文字または小文字のどちらでも構いません。ロケール設定でこの役割のために&quot;,&quot;が指定されている場合でも、&quot;.&quot;は常に小数点として使用されます-小数点に&quot;,&quot;を使用すると、構文的に曖昧になります。</target>
        </trans-unit>
        <trans-unit id="8cf3813aebca15b6b5e1583aeffa06f6925412e6" translate="yes" xml:space="preserve">
          <source>If a page contains no cells (which is only possible for a root page of a table that contains no rows) then the offset to the cell content area will equal the page size minus the bytes of reserved space. If the database uses a 65536-byte page size and the reserved space is zero (the usual value for reserved space) then the cell content offset of an empty page wants to be 65536. However, that integer is too large to be stored in a 2-byte unsigned integer, so a value of 0 is used in its place.</source>
          <target state="translated">ページにセルが含まれていない場合(これは行を含まないテーブルのルートページでのみ可能です)、セル内容領域へのオフセットはページサイズから予約領域のバイト数を引いたものになります。データベースが65536バイトのページサイズを使用しており、予約領域がゼロ(予約領域の通常の値)である場合、空ページのセルコンテンツオフセットは65536になります。しかし、この整数は2バイトの符号なし整数に格納するには大きすぎるため、0の値が代わりに使用されます。</target>
        </trans-unit>
        <trans-unit id="c99e07bc95c7e7eeb5ce8d8ce056128a45cab0ab" translate="yes" xml:space="preserve">
          <source>If a parameter name begins with a &quot;:&quot;, then it is assumed to be a value to bind to the SQL statement before executing it. The value is always bound as text. It is an error if the specified SQL parameter does not exist. For example:</source>
          <target state="translated">パラメータ名が&quot;:&quot;で始まる場合、それはSQL文を実行する前にバインドする値であると見なされます。値は常にテキストとしてバインドされます。指定されたSQLパラメータが存在しない場合はエラーとなります。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="a3a6677c34d1c31ace005a4fa6f3930c2040066e" translate="yes" xml:space="preserve">
          <source>If a power failure or operating system crash occurs at this point, the transaction will not rollback when the system reboots even though there are rollback journals present. The difference is the master journal pathname in the header of the rollback journal. Upon restart, SQLite only considers a journal to be hot and will only playback the journal if there is no master journal filename in the header (which is the case for a single-file commit) or if the master journal file still exists on disk.</source>
          <target state="translated">この時点で電源障害やオペレーティングシステムのクラッシュが発生した場合、ロールバックジャーナルが存在していてもシステムが再起動したときにトランザクションはロールバックされません。違いは、ロールバック・ジャーナルのヘッダーにあるマスター・ジャーナル・パス名です。再起動時には、SQLite はジャーナルをホットジャーナルとみなし、ヘッダーにマスタージャーナルファイル名がない場合(シングルファイルコミットの場合がこれにあたります)、またはマスタージャーナルファイルがディスク上にまだ存在する場合にのみジャーナルを再生します。</target>
        </trans-unit>
        <trans-unit id="f031e4113363c1780559d56fb503c736f7031cb4" translate="yes" xml:space="preserve">
          <source>If a power failure or operating system failure occurs while copying the database file the backup database may be corrupted following system recovery.</source>
          <target state="translated">データベース ファイルのコピー中に電源障害またはオペレーティング システム障害が発生した場合、システム リカバリ後にバックアップ データベースが破損する可能性があります。</target>
        </trans-unit>
        <trans-unit id="d63fd60747c59caf947d214389cf965d0e528d08" translate="yes" xml:space="preserve">
          <source>If a query contains an ORDER BY clause with multiple terms, it might be that SQLite can use indices to cause rows to come out in the order of some prefix of the terms in the ORDER BY but that later terms in the ORDER BY are not satisfied. In that case, SQLite does block sorting. Suppose the ORDER BY clause has four terms and the natural order of the query results in rows appearing in order of the first two terms. As each row is output by the query engine and enters the sorter, the outputs in the current row corresponding to the first two terms of the ORDER BY are compared against the previous row. If they have changed, the current sort is finished and output and a new sort is started. This results in a slightly faster sort. But the bigger advantages are that many fewer rows need to be held in memory, reducing memory requirements, and outputs can begin to appear before the core query has run to completion.</source>
          <target state="translated">クエリに複数の単語を含む ORDER BY 句が含まれている場合、SQLite がインデックスを使用して ORDER BY の単語のプレフィックスの順に行を出力することができますが、それ以降の ORDER BY の単語が満たされていない場合があります。この場合、SQLite はブロックソートを行います。例えば、ORDER BY 句には 4 つの項があり、クエリの自然な順序では、最初の 2 つの項から順に行が出力されるとします。各行がクエリエンジンによって出力され、ソーターに入ると、ORDER BYの最初の2つの項に対応する現在の行の出力が前の行と比較されます。それらが変更されている場合は、現在のソートが終了して出力され、新しいソートが開始されます。その結果、ソートが若干速くなります。しかし、より大きな利点は、メモリに保持する必要のある行の数が少なくて済むため、メモリの必要量が減り、コアクエリが完了する前に出力を開始することができることです。</target>
        </trans-unit>
        <trans-unit id="bdf63c23188158127b26cd2c4807de45ccf6dea6" translate="yes" xml:space="preserve">
          <source>If a query contains no aggregate functions at all, then a GROUP BY clause can be added as a substitute of DISTINCT ON clause. In other words, output rows are filtered so that only one row is shows for each distinct set of values in the GROUP BY clause. If two or more output rows would have otherwise had the same set of values for the GROUP BY columns, then one of the rows is chosen arbitrarily.</source>
          <target state="translated">クエリに集約関数が全く含まれていない場合は、GROUP BY句をDISTINCT ON句の代わりに追加することができます。言い換えれば、出力行は、GROUP BY句の異なる値のセットに対して1つの行のみが表示されるようにフィルタリングされます。2つ以上の出力行が、そうでなければGROUP BY列の値のセットが同じであった場合、そのうちの1つの行が任意に選択されます。</target>
        </trans-unit>
        <trans-unit id="cab66c0bca9a377eb02b4b0ac5090404c2d874c0" translate="yes" xml:space="preserve">
          <source>If a read/write client invokes &lt;a href=&quot;c3ref/file_control&quot;&gt;sqlite3_file_control&lt;/a&gt;(&lt;a href=&quot;c3ref/c_fcntl_begin_atomic_write#sqlitefcntlpersistwal&quot;&gt;SQLITE_FCNTL_PERSIST_WAL&lt;/a&gt;) prior to shutdown, then at shutdown a checkpoint is still run, but the shm file and wal file are not deleted. This allows subsequent read-only clients to connect to and read the database.</source>
          <target state="translated">読み取り/書き込みクライアントがシャットダウンの前に&lt;a href=&quot;c3ref/file_control&quot;&gt;sqlite3_file_control&lt;/a&gt;（&lt;a href=&quot;c3ref/c_fcntl_begin_atomic_write#sqlitefcntlpersistwal&quot;&gt;SQLITE_FCNTL_PERSIST_WAL&lt;/a&gt;）を呼び出す場合、シャットダウン時にチェックポイントは引き続き実行されますが、shmファイルとwalファイルは削除されません。これにより、後続の読み取り専用クライアントがデータベースに接続して読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="337133b7d09a387cf87665a4c7d79ff39c533386" translate="yes" xml:space="preserve">
          <source>If a row with matching primary key values is found, but one or more of the modified non-primary key fields contains a value different from an original row value stored in the changeset, the conflict-handler function is invoked with &lt;a href=&quot;#SQLITE_CHANGESET_CONFLICT&quot;&gt;SQLITE_CHANGESET_DATA&lt;/a&gt; as the second argument. Since UPDATE changes only contain values for non-primary key fields that are to be modified, only those fields need to match the original values to avoid the SQLITE_CHANGESET_DATA conflict-handler callback.</source>
          <target state="translated">主キー値が一致する行が見つかったが、変更された非主キーフィールドの1つ以上に、チェンジセットに格納されている元の行値とは異なる値が含まれている場合、2番目の引数として&lt;a href=&quot;#SQLITE_CHANGESET_CONFLICT&quot;&gt;SQLITE_CHANGESET_DATA&lt;/a&gt;を使用して競合ハンドラ関数が呼び出されます。 。UPDATEの変更には、変更される非主キーフィールドの値のみが含まれるため、SQLITE_CHANGESET_DATA競合ハンドラーコールバックを回避するには、これらのフィールドのみが元の値と一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="35c7138a2b7260bc49d6f60cf430df710c00202b" translate="yes" xml:space="preserve">
          <source>If a row with matching primary key values is found, but one or more of the modified non-primary key fields contains a value different from an original row value stored in the changeset, the conflict-handler function is invoked with &lt;a href=&quot;c_changeset_conflict&quot;&gt;SQLITE_CHANGESET_DATA&lt;/a&gt; as the second argument. Since UPDATE changes only contain values for non-primary key fields that are to be modified, only those fields need to match the original values to avoid the SQLITE_CHANGESET_DATA conflict-handler callback.</source>
          <target state="translated">主キー値が一致する行が見つかったが、変更された非主キーフィールドの1つ以上に、チェンジセットに格納されている元の行値とは異なる値が含まれている場合、2番目の引数として&lt;a href=&quot;c_changeset_conflict&quot;&gt;SQLITE_CHANGESET_DATA&lt;/a&gt;を使用して競合ハンドラ関数が呼び出されます。 。UPDATEの変更には、変更される非主キーフィールドの値のみが含まれるため、SQLITE_CHANGESET_DATA競合ハンドラーコールバックを回避するには、これらのフィールドのみが元の値と一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="1b234b4b89cfdd9943a23340845cb2723771c58a" translate="yes" xml:space="preserve">
          <source>If a row with matching primary key values is found, but one or more of the non-primary key fields contains a value different from the original row value stored in the changeset, the conflict-handler function is invoked with &lt;a href=&quot;#SQLITE_CHANGESET_CONFLICT&quot;&gt;SQLITE_CHANGESET_DATA&lt;/a&gt; as the second argument. If the database table has more columns than are recorded in the changeset, only the values of those non-primary key fields are compared against the current database contents - any trailing database table columns are ignored.</source>
          <target state="translated">主キー値が一致する行が見つかったが、非主キーフィールドの1つ以上に、変更セットに格納されている元の行値とは異なる値が含まれている場合、&lt;a href=&quot;#SQLITE_CHANGESET_CONFLICT&quot;&gt;SQLのCHANGESET_DATA&lt;/a&gt;を2番目の引数として使用して、競合ハンドラー関数が呼び出されます。変更セットに記録されているよりも多くの列がデータベーステーブルにある場合、それらの非主キーフィールドの値のみが現在のデータベースの内容と比較されます。後続のデータベーステーブルの列は無視されます。</target>
        </trans-unit>
        <trans-unit id="ca3b8d6b7470e9a00b63341bcac487b0076109fe" translate="yes" xml:space="preserve">
          <source>If a row with matching primary key values is found, but one or more of the non-primary key fields contains a value different from the original row value stored in the changeset, the conflict-handler function is invoked with &lt;a href=&quot;c_changeset_conflict&quot;&gt;SQLITE_CHANGESET_DATA&lt;/a&gt; as the second argument. If the database table has more columns than are recorded in the changeset, only the values of those non-primary key fields are compared against the current database contents - any trailing database table columns are ignored.</source>
          <target state="translated">主キー値が一致する行が見つかったが、非主キーフィールドの1つ以上に、変更セットに格納されている元の行値とは異なる値が含まれている場合、&lt;a href=&quot;c_changeset_conflict&quot;&gt;SQLのCHANGESET_DATA&lt;/a&gt;を2番目の引数として使用して、競合ハンドラー関数が呼び出されます。変更セットに記録されているよりも多くの列がデータベーステーブルにある場合、それらの非主キーフィールドの値のみが現在のデータベースの内容と比較されます。後続のデータベーステーブルの列は無視されます。</target>
        </trans-unit>
        <trans-unit id="e400ae567f256dbdcc0abe528516e66e2c791942" translate="yes" xml:space="preserve">
          <source>If a schema name is specified as part of an object reference, it must be either &quot;main&quot;, or &quot;temp&quot; or the schema-name of an attached database. Like other SQL identifiers, schema names are case-insensitive. If a schema name is specified, then only that one schema is searched for the named object.</source>
          <target state="translated">スキーマ名がオブジェクト参照の一部として指定されている場合は、&quot;main&quot;、&quot;temp&quot;、またはアタッチされているデータベースのスキーマ名のいずれかでなければなりません。他の SQL 識別子と同様に、スキーマ名は大文字小文字を区別しません。スキーマ名が指定された場合、指定されたオブジェクトに対してはそのスキーマのみが検索されます。</target>
        </trans-unit>
        <trans-unit id="a287d9b64545db85e7dfa26422162809454f183b" translate="yes" xml:space="preserve">
          <source>If a schema-name is specified, it must be either &quot;main&quot;, &quot;temp&quot;, or the name of an &lt;a href=&quot;lang_attach&quot;&gt;attached database&lt;/a&gt;. In this case the new table is created in the named database. If the &quot;TEMP&quot; or &quot;TEMPORARY&quot; keyword occurs between the &quot;CREATE&quot; and &quot;TABLE&quot; then the new table is created in the temp database. It is an error to specify both a schema-name and the TEMP or TEMPORARY keyword, unless the schema-name is &quot;temp&quot;. If no schema name is specified and the TEMP keyword is not present then the table is created in the main database.</source>
          <target state="translated">schema-nameを指定する場合は、「main」、「temp」、または&lt;a href=&quot;lang_attach&quot;&gt;接続されているデータベースの&lt;/a&gt;名前のいずれかである必要があります。この場合、新しいテーブルは指定されたデータベースに作成されます。 「TEMP」または「TEMPORARY」キーワードが「CREATE」と「TABLE」の間にある場合、新しいテーブルが一時データベースに作成されます。 schema-nameが &quot;temp&quot;でない限り、schema-nameとTEMPまたはTEMPORARYキーワードの両方を指定するとエラーになります。スキーマ名が指定されておらず、TEMPキーワードが存在しない場合、テーブルはメインデータベースに作成されます。</target>
        </trans-unit>
        <trans-unit id="d186fac3c43b0ebe9fb52f2e0bcd9b8dc9321942" translate="yes" xml:space="preserve">
          <source>If a schema-name is specified, then the view is created in the specified database. It is an error to specify both a schema-name and the TEMP keyword on a VIEW, unless the schema-name is &quot;temp&quot;. If no schema name is specified, and the TEMP keyword is not present, the VIEW is created in the main database.</source>
          <target state="translated">スキーマ名を指定すると、指定したデータベースにビューが作成されます。スキーマ名が &quot;temp&quot; でない限り、VIEW でスキーマ名と TEMP キーワードの両方を指定するとエラーになります。スキーマ名が指定されず、TEMP キーワードが存在しない場合、ビューはメイン データベースに作成されます。</target>
        </trans-unit>
        <trans-unit id="5a3b25f9ef77a5c2a55ede994e4212a6c3bae634" translate="yes" xml:space="preserve">
          <source>If a search token (on the right-hand side of the MATCH operator) in &lt;a href=&quot;fts3#fts4&quot;&gt;FTS4&lt;/a&gt; begins with &quot;^&quot; then that token must be the first in its field of the document. &lt;b&gt;** Potentially Incompatible Change **&lt;/b&gt;</source>
          <target state="translated">&lt;a href=&quot;fts3#fts4&quot;&gt;FTS4の&lt;/a&gt;検索トークン（MATCH演算子の右側）が&quot;^&quot;で始まる場合、そのトークンはドキュメントのフィールドの最初でなければなりません。&lt;b&gt;**互換性がない可能性のある変更**&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="e0b0e745b5660b6e63d47617f06b59c6fe2aec60" translate="yes" xml:space="preserve">
          <source>If a separate thread makes changes on the same database connection while &lt;a href=&quot;#sqlite3_changes&quot;&gt;sqlite3_changes()&lt;/a&gt; is running then the value returned is unpredictable and not meaningful.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_changes&quot;&gt;sqlite3_changes（）の&lt;/a&gt;実行中に別のスレッドが同じデータベース接続に変更を加えると、返される値は予測不可能で意味がありません。</target>
        </trans-unit>
        <trans-unit id="e161385bf705ff3ca3325998e8904218252e0a24" translate="yes" xml:space="preserve">
          <source>If a separate thread makes changes on the same database connection while &lt;a href=&quot;#sqlite3_total_changes&quot;&gt;sqlite3_total_changes()&lt;/a&gt; is running then the value returned is unpredictable and not meaningful.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_total_changes&quot;&gt;sqlite3_total_changes（）の&lt;/a&gt;実行中に別のスレッドが同じデータベース接続に変更を加えると、返される値は予測不能で意味がありません。</target>
        </trans-unit>
        <trans-unit id="48949b30f7cc8dfe518df452770028dcf8268e04" translate="yes" xml:space="preserve">
          <source>If a separate thread makes changes on the same database connection while &lt;a href=&quot;changes&quot;&gt;sqlite3_changes()&lt;/a&gt; is running then the value returned is unpredictable and not meaningful.</source>
          <target state="translated">&lt;a href=&quot;changes&quot;&gt;sqlite3_changes（）の&lt;/a&gt;実行中に別のスレッドが同じデータベース接続に変更を加えると、返される値は予測不可能で意味がありません。</target>
        </trans-unit>
        <trans-unit id="e69017ebf8db42f4c918537142f058b4e1e4b99c" translate="yes" xml:space="preserve">
          <source>If a separate thread makes changes on the same database connection while &lt;a href=&quot;total_changes&quot;&gt;sqlite3_total_changes()&lt;/a&gt; is running then the value returned is unpredictable and not meaningful.</source>
          <target state="translated">&lt;a href=&quot;total_changes&quot;&gt;sqlite3_total_changes（）の&lt;/a&gt;実行中に別のスレッドが同じデータベース接続に変更を加えると、返される値は予測不能で意味がありません。</target>
        </trans-unit>
        <trans-unit id="67e0dff317f2ea719a9272889d4afc4730b1b5fc" translate="yes" xml:space="preserve">
          <source>If a separate thread performs a new &lt;a href=&quot;../lang_insert&quot;&gt;INSERT&lt;/a&gt; on the same database connection while the &lt;a href=&quot;last_insert_rowid&quot;&gt;sqlite3_last_insert_rowid()&lt;/a&gt; function is running and thus changes the last insert &lt;a href=&quot;../lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt;, then the value returned by &lt;a href=&quot;last_insert_rowid&quot;&gt;sqlite3_last_insert_rowid()&lt;/a&gt; is unpredictable and might not equal either the old or the new last insert &lt;a href=&quot;../lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;last_insert_rowid&quot;&gt;sqlite3_last_insert_rowid（）&lt;/a&gt;関数の実行中に別のスレッドが同じデータベース接続で新しい&lt;a href=&quot;../lang_insert&quot;&gt;INSERT&lt;/a&gt;を実行し、それによって最後の挿入&lt;a href=&quot;../lang_createtable#rowid&quot;&gt;ROWID&lt;/a&gt;を変更した場合、&lt;a href=&quot;last_insert_rowid&quot;&gt;sqlite3_last_insert_rowid（）から&lt;/a&gt;返される値は予測不能であり、古いものと新しいもののどちらにも等しくない可能性があります&lt;a href=&quot;../lang_createtable#rowid&quot;&gt;ROWIDを&lt;/a&gt;挿入します。</target>
        </trans-unit>
        <trans-unit id="f8a05ae1d1d14adcdf537d4865ddc934cf60a0a4" translate="yes" xml:space="preserve">
          <source>If a separate thread performs a new &lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt; on the same database connection while the &lt;a href=&quot;#sqlite3_last_insert_rowid&quot;&gt;sqlite3_last_insert_rowid()&lt;/a&gt; function is running and thus changes the last insert &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt;, then the value returned by &lt;a href=&quot;#sqlite3_last_insert_rowid&quot;&gt;sqlite3_last_insert_rowid()&lt;/a&gt; is unpredictable and might not equal either the old or the new last insert &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_last_insert_rowid&quot;&gt;sqlite3_last_insert_rowid（）&lt;/a&gt;関数の実行中に別のスレッドが同じデータベース接続で新しい&lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt;を実行し、それによって最後の挿入&lt;a href=&quot;lang_createtable#rowid&quot;&gt;ROWID&lt;/a&gt;を変更した場合、&lt;a href=&quot;#sqlite3_last_insert_rowid&quot;&gt;sqlite3_last_insert_rowid（）から&lt;/a&gt;返される値は予測不能であり、古いものと新しいもののどちらにも等しくない可能性があります&lt;a href=&quot;lang_createtable#rowid&quot;&gt;ROWIDを&lt;/a&gt;挿入します。</target>
        </trans-unit>
        <trans-unit id="9c0a40f4902327b395568a304aa57a5c4039b9e5" translate="yes" xml:space="preserve">
          <source>If a single database file has multiple links (either hard or soft links) then that is just another way of saying that the file has multiple names. If two or more processes open the database using different names, then they will use different rollback journals and WAL files. That means that if one process crashes, the other process will be unable to recover the transaction in progress because it will be looking in the wrong place for the appropriate journal.</source>
          <target state="translated">1つのデータベースファイルに複数のリンク(ハードリンクまたはソフトリンク)がある場合、それはファイルに複数の名前があることを意味します。2つ以上のプロセスが異なる名前を使用してデータベースを開く場合、それらのプロセスは異なるロールバックジャーナルとWALファイルを使用します。つまり、一方のプロセスがクラッシュした場合、他方のプロセスは適切なジャーナルを探す場所を間違えてしまうため、進行中のトランザクションを回復することができないということです。</target>
        </trans-unit>
        <trans-unit id="54992194ecdfbf1a36948d0111a0401fc51b1ec9" translate="yes" xml:space="preserve">
          <source>If a single row is affected by more than one operation within a session, then the change is considered indirect if all operations meet the criteria for an indirect change above, or direct otherwise.</source>
          <target state="translated">1つの行がセッション内で複数の操作によって影響を受ける場合、すべての操作が上記の間接的な変更の基準を満たしていれば、その変更は間接的なものとみなされ、そうでなければ直接なものとみなされます。</target>
        </trans-unit>
        <trans-unit id="8aed35bc8fc658c89e5539bc9b828e9558656314" translate="yes" xml:space="preserve">
          <source>If a statement modifies the contents of the database so that an immediate foreign key constraint is in violation at the conclusion the statement, an exception is thrown and the effects of the statement are reverted. By contrast, if a statement modifies the contents of the database such that a deferred foreign key constraint is violated, the violation is not reported immediately. Deferred foreign key constraints are not checked until the transaction tries to &lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt;. For as long as the user has an open transaction, the database is allowed to exist in a state that violates any number of deferred foreign key constraints. However, &lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt; will fail as long as foreign key constraints remain in violation.</source>
          <target state="translated">ステートメントがデータベースの内容を変更して、ステートメントの終了時に即時外部キー制約に違反する場合、例外がスローされ、ステートメントの効果が元に戻ります。対照的に、ステートメントがデータベースの内容を変更して遅延外部キー制約に違反した場合、違反はすぐには報告されません。遅延外部キー制約は、トランザクションが&lt;a href=&quot;lang_transaction&quot;&gt;COMMITを&lt;/a&gt;試みるまでチェックされません。ユーザーが開いているトランザクションを持っている限り、データベースは、任意の数の遅延外部キー制約に違反する状態で存在することができます。ただし、外部キー制約が違反している限り、&lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt;は失敗します。</target>
        </trans-unit>
        <trans-unit id="4a9fe68ac2f3c48ea32a43f2c5cf9be89d342ee4" translate="yes" xml:space="preserve">
          <source>If a subquery cannot be &lt;a href=&quot;optoverview#flattening&quot;&gt;flattened&lt;/a&gt; into the outer query, it might still be possible to enhance performance by &quot;pushing down&quot; WHERE clause terms from the outer query into the subquery. Consider an example:</source>
          <target state="translated">サブクエリを外部クエリに&lt;a href=&quot;optoverview#flattening&quot;&gt;フラット化&lt;/a&gt;できない場合でも、外部クエリからサブクエリにWHERE句の用語を「プッシュダウン」することにより、パフォーマンスを向上させることができる場合があります。例を考えてみましょう：</target>
        </trans-unit>
        <trans-unit id="cfbdc72faddc3dd92eaf2d66d72d9166e0ce65e3" translate="yes" xml:space="preserve">
          <source>If a system failure occurs at any time after a &quot;delete file&quot; operation (call to the VFS xDelete() method) returns successfully, it is assumed that the file-system will not contain the deleted file following system recovery.</source>
          <target state="translated">ファイルの削除」操作(VFS xDelete()メソッドの呼び出し)が成功した後にシステム障害が発生した場合、システム回復後にファイルシステムに削除されたファイルが含まれないことが想定されます。</target>
        </trans-unit>
        <trans-unit id="c32e1e0b557aefde59c28d931cf3e5d6733099fd" translate="yes" xml:space="preserve">
          <source>If a system failure occurs during a &quot;delete file&quot; operation, it is assumed that following system recovery the file-system will either contain the file being deleted in the state it was in before the operation was attempted, or not contain the file at all. It is assumed that it is not possible for the file to have become corrupted purely as a result of a failure occurring during a &quot;delete file&quot; operation.</source>
          <target state="translated">ファイルの削除」操作中にシステム障害が発生した場合、システム復旧後のファイルシステムには、削除しようとしているファイルが操作前の状態で格納されるか、ファイルが全く格納されないことが想定されています。ファイルの削除」操作中に発生した障害の結果、純粋にファイルが破損することはありえないと想定されます。</target>
        </trans-unit>
        <trans-unit id="91f96ef24748138cdd82c09ceabe7f648ae9cf43" translate="yes" xml:space="preserve">
          <source>If a system failure occurs during or after a &quot;create file&quot; operation, but before the created file has been</source>
          <target state="translated">ファイルの作成」操作中または操作後にシステム障害が発生した場合で、作成したファイルが</target>
        </trans-unit>
        <trans-unit id="1fcfee495c57582bc4c6e63019680717056464ec" translate="yes" xml:space="preserve">
          <source>If a system failure occurs during or after a &quot;truncate file&quot; operation, but before the truncated file has been</source>
          <target state="translated">ファイルの切り捨て」操作中または操作後に、切り捨てられたファイルが切り捨てられる前にシステム障害が発生した場合</target>
        </trans-unit>
        <trans-unit id="e3c60bc044d7ebf2be0e926e292ed7263d6ed54a" translate="yes" xml:space="preserve">
          <source>If a system failure occurs during or after a &quot;write file&quot; operation that causes the file to grow, but before the corresponding file has been</source>
          <target state="translated">ファイルの書き込み」操作中または操作後にシステム障害が発生してファイルが成長したが、対応するファイルが成長する前に</target>
        </trans-unit>
        <trans-unit id="0de8e98595413448f2b535870f8da207b8048237" translate="yes" xml:space="preserve">
          <source>If a system failure occurs during or after a &quot;write file&quot; operation, but before the corresponding file has been</source>
          <target state="translated">ファイルへの書き込み」操作中または操作後に、対応するファイルが作成される前にシステム障害が発生した場合</target>
        </trans-unit>
        <trans-unit id="12d84c274c03171c71b26275c99f75f3392362a6" translate="yes" xml:space="preserve">
          <source>If a system failure occurs on a system that supports the</source>
          <target state="translated">をサポートしているシステムでシステム障害が発生した場合</target>
        </trans-unit>
        <trans-unit id="70f739b455c168080412690c97f5940222b8f766" translate="yes" xml:space="preserve">
          <source>If a system supports</source>
          <target state="translated">システムが</target>
        </trans-unit>
        <trans-unit id="ec9800aa0fd4fbf6e94d5e57566c8304e2f2782b" translate="yes" xml:space="preserve">
          <source>If a system supports the</source>
          <target state="translated">をサポートしているシステムであれば</target>
        </trans-unit>
        <trans-unit id="16f55a3959edd0a92c0395b9cf4c3468da074f4f" translate="yes" xml:space="preserve">
          <source>If a table contains a column of type &lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt;, then that column becomes an alias for the ROWID. You can then access the ROWID using any of four different names, the original three names described above or the name given to the &lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt; column. All these names are aliases for one another and work equally well in any context.</source>
          <target state="translated">テーブルに&lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt;型の列が含まれている場合、その列はROWIDのエイリアスになります。その後、4つの異なる名前、上記の元の3つの名前、または&lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt;列に指定された名前を使用して、ROWIDにアクセスできます。これらの名前はすべて相互のエイリアスであり、どのようなコンテキストでも同様に機能します。</target>
        </trans-unit>
        <trans-unit id="a73b6736040e74c7d625fd213eca9757c75eee19" translate="yes" xml:space="preserve">
          <source>If a table has a single column primary key and the declared type of that column is &quot;INTEGER&quot; and the table is not a &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; table, then the column is known as an &lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt;. See &lt;a href=&quot;lang_createtable#rowid&quot;&gt;below&lt;/a&gt; for a description of the special properties and behaviors associated with an &lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt;.</source>
          <target state="translated">テーブルに単一列の主キーがあり、その列の宣言されたタイプが「INTEGER」であり、テーブルが&lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt;テーブルでない場合、その列は&lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt;と呼ばれます。&lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEYに&lt;/a&gt;関連する特別なプロパティと動作の説明については、&lt;a href=&quot;lang_createtable#rowid&quot;&gt;以下&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5e353db8a7a970978b864076f23349bbe29b3cd1" translate="yes" xml:space="preserve">
          <source>If a term in X is of the form &quot;z IS NOT NULL&quot; and if a term in W is a comparison operator on &quot;z&quot; other than &quot;IS&quot;, then those terms match.</source>
          <target state="translated">X の項が &quot;z IS NOT NULL&quot; の形式であり、W の項が &quot;IS&quot; 以外の &quot;z&quot; の比較演算子である場合、それらの項は一致します。</target>
        </trans-unit>
        <trans-unit id="d7704041f8ff8a11a4c662eef3d671025a3e5ebe" translate="yes" xml:space="preserve">
          <source>If a term of the WHERE clause is of the following form:</source>
          <target state="translated">WHERE句の項が以下の形式の場合。</target>
        </trans-unit>
        <trans-unit id="e5d671a1040d0448cbcd3997833359da102571a4" translate="yes" xml:space="preserve">
          <source>If a transaction involves multiple databases, then a more complex commit sequence is used, as follows:</source>
          <target state="translated">トランザクションが複数のデータベースを含む場合は、以下のように、より複雑なコミットシーケンスが使用されます。</target>
        </trans-unit>
        <trans-unit id="1b08d45fd51c4591fce14d3b424e9dccc579bef5" translate="yes" xml:space="preserve">
          <source>If a transaction is aborted due to an application crash, an operating system crash, or a hardware power failure or crash, then the database may be left in an inconsistent state. The next time SQLite attempts to open the database file, the presence of the rollback journal file will be detected and the journal will be automatically played back to restore the database to its state at the start of the incomplete transaction.</source>
          <target state="translated">アプリケーションのクラッシュ、オペレーティングシステムのクラッシュ、またはハードウェアの電源障害やクラッシュによってトランザクションが中断された場合、データベースは矛盾した状態のままになることがあります。次回SQLiteがデータベースファイルを開こうとすると、ロールバックジャーナルファイルの存在が検出され、ジャーナルが自動的に再生されてデータベースが不完全なトランザクションの開始時の状態に復元されます。</target>
        </trans-unit>
        <trans-unit id="b139c7ece8944c0ce3ad448cfb0c14ea14a36c67" translate="yes" xml:space="preserve">
          <source>If a write-transaction is open on &lt;a href=&quot;#sqlite3&quot;&gt;database connection&lt;/a&gt; D when the &lt;a href=&quot;#sqlite3_db_cacheflush&quot;&gt;sqlite3_db_cacheflush(D)&lt;/a&gt; interface invoked, any dirty pages in the pager-cache that are not currently in use are written out to disk. A dirty page may be in use if a database cursor created by an active SQL statement is reading from it, or if it is page 1 of a database file (page 1 is always &quot;in use&quot;). The &lt;a href=&quot;#sqlite3_db_cacheflush&quot;&gt;sqlite3_db_cacheflush(D)&lt;/a&gt; interface flushes caches for all schemas - &quot;main&quot;, &quot;temp&quot;, and any &lt;a href=&quot;lang_attach&quot;&gt;attached&lt;/a&gt; databases.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_db_cacheflush&quot;&gt;sqlite3_db_cacheflush（D）&lt;/a&gt;インターフェースが呼び出されたときに&lt;a href=&quot;#sqlite3&quot;&gt;データベース接続&lt;/a&gt; Dで書き込みトランザクションが開いている場合、現在使用されていないページャーキャッシュ内のダーティページがディスクに書き込まれます。アクティブなSQLステートメントによって作成されたデータベースカーソルがダーティページを読み取っている場合、またはダーティページがデータベースファイルのページ1である場合（ページ1は常に「使用中」）、ダーティページが使用されている可能性があります。&lt;a href=&quot;#sqlite3_db_cacheflush&quot;&gt;sqlite3_db_cacheflush（D）&lt;/a&gt;インターフェースは、すべてのスキーマのキャッシュをフラッシュ- 「メイン」、「TEMP」、および任意の&lt;a href=&quot;lang_attach&quot;&gt;添付の&lt;/a&gt;データベース。</target>
        </trans-unit>
        <trans-unit id="94598ac271e5cdca4a0d9c950ece2e2fde3c85ae" translate="yes" xml:space="preserve">
          <source>If a write-transaction is open on &lt;a href=&quot;sqlite3&quot;&gt;database connection&lt;/a&gt; D when the &lt;a href=&quot;db_cacheflush&quot;&gt;sqlite3_db_cacheflush(D)&lt;/a&gt; interface invoked, any dirty pages in the pager-cache that are not currently in use are written out to disk. A dirty page may be in use if a database cursor created by an active SQL statement is reading from it, or if it is page 1 of a database file (page 1 is always &quot;in use&quot;). The &lt;a href=&quot;db_cacheflush&quot;&gt;sqlite3_db_cacheflush(D)&lt;/a&gt; interface flushes caches for all schemas - &quot;main&quot;, &quot;temp&quot;, and any &lt;a href=&quot;../lang_attach&quot;&gt;attached&lt;/a&gt; databases.</source>
          <target state="translated">&lt;a href=&quot;db_cacheflush&quot;&gt;sqlite3_db_cacheflush（D）&lt;/a&gt;インターフェースが呼び出されたときに&lt;a href=&quot;sqlite3&quot;&gt;データベース接続&lt;/a&gt; Dで書き込みトランザクションが開いている場合、現在使用されていないページャーキャッシュ内のダーティページがディスクに書き込まれます。アクティブなSQLステートメントによって作成されたデータベースカーソルがダーティページを読み取っている場合、またはダーティページがデータベースファイルのページ1である場合（ページ1は常に「使用中」）、ダーティページが使用されている可能性があります。&lt;a href=&quot;db_cacheflush&quot;&gt;sqlite3_db_cacheflush（D）&lt;/a&gt;インターフェースは、すべてのスキーマのキャッシュをフラッシュ- 「メイン」、「TEMP」、および任意の&lt;a href=&quot;../lang_attach&quot;&gt;添付の&lt;/a&gt;データベース。</target>
        </trans-unit>
        <trans-unit id="9d687ea67d2673f11d5b429c0195a169c2caa77a" translate="yes" xml:space="preserve">
          <source>If a write-transaction is started and the Vdbe.usesStmtJournal flag is true (this flag is set if the Vdbe may modify more than one row and may throw an ABORT exception), a statement transaction may also be opened. More specifically, a statement transaction is opened iff the database connection is currently not in autocommit mode, or if there are other active statements. A statement transaction allows the changes made by this VDBE to be rolled back after an error without having to roll back the entire transaction. If no error is encountered, the statement transaction will automatically commit when the VDBE halts.</source>
          <target state="translated">書き込みトランザクションが開始され、Vdbe.usesStmtJournalフラグがtrueの場合(このフラグは、Vdbeが複数の行を変更し、ABORT例外を投げる可能性がある場合に設定されます)、ステートメントトランザクションもオープンされる可能性があります。より具体的には、データベース接続が現在オートコミットモードではない場合、または他にアクティブなステートメントがある場合、ステートメント・トランザクションが開かれます。ステートメント・トランザクションは、トランザクション全体をロールバックすることなく、エラー後にこのVDBEによって行われた変更をロールバックすることを可能にする。エラーが発生しなかった場合、ステートメント・トランザクションはVDBEが停止したときに自動的にコミットされる。</target>
        </trans-unit>
        <trans-unit id="7e874d6b40d57619d9fa5fb8dd75a92de53ed059" translate="yes" xml:space="preserve">
          <source>If all three of the steps enumerated above are executed successfully, then it is safe to modify the content of the</source>
          <target state="translated">上に列挙した3つのステップのすべてが正常に実行された場合、それは</target>
        </trans-unit>
        <trans-unit id="76124bb023821e31ac6f5cbf1f8b54083a3ec643" translate="yes" xml:space="preserve">
          <source>If an &quot;ALTER TABLE ... RENAME TO&quot; command is used to rename a table that is the parent table of one or more foreign key constraints, the definitions of the foreign key constraints are modified to refer to the parent table by its new name. The text of the child CREATE TABLE statement or statements stored in the sqlite_master table are modified to reflect the new parent table name.</source>
          <target state="translated">ALTER TABLE ...RENAME TO &quot;コマンドが、1つ以上の外部キー制約の親テーブルであるテーブルの名前を変更するために使用された場合、外部キー制約の定義は、新しい名前で親テーブルを参照するように変更されます。sqlite_masterテーブルに格納されている子CREATE TABLE文またはステートメントのテキストは、新しい親テーブル名を反映するように変更されます。</target>
        </trans-unit>
        <trans-unit id="7603e9a69b7a72c62bbc679327133633953ff9aa" translate="yes" xml:space="preserve">
          <source>If an &lt;a href=&quot;#sqlite3&quot;&gt;sqlite3&lt;/a&gt; object is destroyed while a transaction is open, the transaction is automatically rolled back.</source>
          <target state="translated">場合は&lt;a href=&quot;#sqlite3&quot;&gt;sqlite3の&lt;/a&gt;トランザクションが開いている間は、オブジェクトが破壊され、トランザクションが自動的にロールバックされます。</target>
        </trans-unit>
        <trans-unit id="53a3481d0fa9e30b2f0d27a6044ee94e1a62bb9b" translate="yes" xml:space="preserve">
          <source>If an &lt;a href=&quot;../lang_insert&quot;&gt;INSERT&lt;/a&gt; occurs within a trigger then this routine will return the &lt;a href=&quot;../lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt; of the inserted row as long as the trigger is running. Once the trigger program ends, the value returned by this routine reverts to what it was before the trigger was fired.</source>
          <target state="translated">トリガー内で&lt;a href=&quot;../lang_insert&quot;&gt;INSERT&lt;/a&gt;が発生した場合、このルーチンは、トリガーが実行されている限り、挿入された行の&lt;a href=&quot;../lang_createtable#rowid&quot;&gt;ROWID&lt;/a&gt;を返します。トリガープログラムが終了すると、このルーチンによって返される値は、トリガーが起動される前の値に戻ります。</target>
        </trans-unit>
        <trans-unit id="877e1b4a7430ba11b48b32c5598ad0c65dc34442" translate="yes" xml:space="preserve">
          <source>If an &lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt; occurs within a trigger then this routine will return the &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt; of the inserted row as long as the trigger is running. Once the trigger program ends, the value returned by this routine reverts to what it was before the trigger was fired.</source>
          <target state="translated">トリガー内で&lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt;が発生した場合、このルーチンは、トリガーが実行されている限り、挿入された行の&lt;a href=&quot;lang_createtable#rowid&quot;&gt;ROWID&lt;/a&gt;を返します。トリガープログラムが終了すると、このルーチンによって返される値は、トリガーが起動される前の値に戻ります。</target>
        </trans-unit>
        <trans-unit id="b95cb40fc8352b696796b3bff79e2f006b1ce07a" translate="yes" xml:space="preserve">
          <source>If an &lt;a href=&quot;sqlite3&quot;&gt;sqlite3&lt;/a&gt; object is destroyed while a transaction is open, the transaction is automatically rolled back.</source>
          <target state="translated">場合は&lt;a href=&quot;sqlite3&quot;&gt;sqlite3の&lt;/a&gt;トランザクションが開いている間は、オブジェクトが破壊され、トランザクションが自動的にロールバックされます。</target>
        </trans-unit>
        <trans-unit id="9f62d9384e44621989efc3c00f1a3ba721b2e39d" translate="yes" xml:space="preserve">
          <source>If an FTS5 table is configured with columnsize=0 but is not a &lt;a href=&quot;fts5#contentless_tables&quot;&gt;contentless table&lt;/a&gt;, the xColumnSize API function still works, but runs much more slowly. In this case, instead of reading the value to return directly from the database, it reads the text value itself and count the tokens within it on demand.</source>
          <target state="translated">FTS5テーブルがcolumnsize = 0で構成されているが、コンテンツのない&lt;a href=&quot;fts5#contentless_tables&quot;&gt;テーブル&lt;/a&gt;ではない場合、xColumnSize API関数は引き続き機能しますが、実行速度ははるかに遅くなります。この場合、データベースから直接返す値を読み取る代わりに、テキスト値自体を読み取り、要求に応じてその中のトークンをカウントします。</target>
        </trans-unit>
        <trans-unit id="a593df8166351f80d07eb58cb262614d9dbc8634" translate="yes" xml:space="preserve">
          <source>If an INSERT statement attempts to insert a NULL value into a rowid or integer primary key column, the system chooses an integer value to use as the rowid automatically. A detailed description of how this is done is provided &lt;a href=&quot;autoinc&quot;&gt;separately&lt;/a&gt;.</source>
          <target state="translated">INSERTステートメントがNULL値をROWIDまたは整数の主キー列に挿入しようとした場合、システムは、ROWIDとして使用する整数値を自動的に選択します。これがどのように行われるかの詳細な説明は、&lt;a href=&quot;autoinc&quot;&gt;別途&lt;/a&gt;提供されます。</target>
        </trans-unit>
        <trans-unit id="ba4158b1467dce3a1f2ceab9abb8de00b0fe4463" translate="yes" xml:space="preserve">
          <source>If an ORDER BY clause is present, it determines the order in which rows are extracted from the queue in step 2a. If there is no ORDER BY clause, then the order in which rows are extracted is undefined. (In the current implementation, the queue becomes a FIFO if the ORDER BY clause is omitted, but applications should not depend on that fact since it might change.)</source>
          <target state="translated">ORDER BY句が存在する場合、それはステップ2aでキューから行が抽出される順序を決定します。ORDER BY 句が存在しない場合、行が抽出される順序は未定義です。(現在の実装では、ORDER BY句が省略された場合、キューはFIFOになりますが、アプリケーションは変更される可能性があるので、その事実に依存すべきではありません)。</target>
        </trans-unit>
        <trans-unit id="22141c686821647d4155d6b151a8d8fa154cd1a8" translate="yes" xml:space="preserve">
          <source>If an SQL operation is very nearly finished at the time when sqlite3_interrupt() is called, then it might not have an opportunity to be interrupted and might continue to completion.</source>
          <target state="translated">sqlite3_interrupt()が呼ばれた時点でSQL操作がほぼ終了している場合は、中断する機会がなく、完了まで継続する可能性があります。</target>
        </trans-unit>
        <trans-unit id="923eabd2cf996c975383b0dccd3e5fb8dc063dde" translate="yes" xml:space="preserve">
          <source>If an SQL statement is limited to be a million bytes in length, then obviously you will not be able to insert multi-million byte strings by embedding them as literals inside of INSERT statements. But you should not do that anyway. Use host &lt;a href=&quot;lang_expr#varparam&quot;&gt;parameters&lt;/a&gt; for your data. Prepare short SQL statements like this:</source>
          <target state="translated">SQLステートメントの長さが100万バイトに制限されている場合は、INSERTステートメント内にリテラルとして埋め込んでも、数百万バイトの文字列を挿入することはできません。しかし、とにかくそれを行うべきではありません。データにホスト&lt;a href=&quot;lang_expr#varparam&quot;&gt;パラメータ&lt;/a&gt;を使用します。次のような短いSQLステートメントを準備します。</target>
        </trans-unit>
        <trans-unit id="a519000750401db43c985f6fefc862d71c74bede" translate="yes" xml:space="preserve">
          <source>If an SQL table is created using the &quot;WITHOUT ROWID&quot; clause at the end of its CREATE TABLE statement, then that table is a &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; table and uses a different on-disk representation. A WITHOUT ROWID table uses an index b-tree rather than a table b-tree for storage. The key for each entry in the WITHOUT ROWID b-tree is a record composed of the columns of the PRIMARY KEY followed by all remaining columns of the table. The primary key columns appear in the order they they were declared in the PRIMARY KEY clause and the remaining columns appear in the order they occur in the CREATE TABLE statement.</source>
          <target state="translated">SQLテーブルがCREATE TABLEステートメントの最後にある「WITHOUT ROWID」句を使用して作成されている場合、そのテーブルは&lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt;テーブルであり、別のディスク上の表現を使用します。WITHOUT ROWIDテーブルは、テーブルbツリーではなくインデックスbツリーを使用して格納します。WITHOUT ROWID Bツリーの各エントリのキーは、PRIMARY KEYの列とそれに続くテーブルの残りのすべての列で構成されるレコードです。主キー列は、PRIMARY KEY句で宣言された順序で表示され、残りの列は、CREATE TABLEステートメントで発生した順序で表示されます。</target>
        </trans-unit>
        <trans-unit id="7a1f15ef308e23ec2fc80a29e25882265ebf0786" translate="yes" xml:space="preserve">
          <source>If an UPDATE statement attempts to set an integer primary key or rowid column to a NULL or blob value, or to a string or real value that cannot be losslessly converted to an integer, a &quot;datatype mismatch&quot; error occurs and the statement is aborted. If an INSERT statement attempts to insert a blob value, or a string or real value that cannot be losslessly converted to an integer into an integer primary key or rowid column, a &quot;datatype mismatch&quot; error occurs and the statement is aborted.</source>
          <target state="translated">UPDATE 文が、整数の主キーまたは rowid 列を NULL または blob 値、または可逆的に整数に変換できない文字列または実数値に設定しようとすると、&quot;datatype mismatch&quot; エラーが発生し、文が中断されます。INSERT 文が、ブロブ値、または可逆的に整数に変換できない文字列または実数値を整数の主キーまたは rowid 列に挿入しようとすると、&quot;datatype mismatch&quot; エラーが発生し、文が中断されます。</target>
        </trans-unit>
        <trans-unit id="284b34da69fbf9cd89926df318af7634184253b9" translate="yes" xml:space="preserve">
          <source>If an UPDATE statement has a LIMIT clause, the maximum number of rows that will be updated is found by evaluating the accompanying expression and casting it to an integer value. A negative value is interpreted as &quot;no limit&quot;.</source>
          <target state="translated">UPDATE文にLIMIT句がある場合、更新される行の最大数は、付属の式を評価して整数値にキャストすることで求められます。負の値は「制限なし」と解釈されます。</target>
        </trans-unit>
        <trans-unit id="35654cca0e06875d8f71c06cdb825a502007ac27" translate="yes" xml:space="preserve">
          <source>If an application issues a SELECT statement on a single table like &quot;</source>
          <target state="translated">アプリケーションが、&quot; のような単一のテーブルに対して SELECT 文を発行した場合</target>
        </trans-unit>
        <trans-unit id="3c9847a3fc8345f21ef2aae877b6da29936db6dc" translate="yes" xml:space="preserve">
          <source>If an application puts SQLite in &lt;a href=&quot;pragma#pragma_locking_mode&quot;&gt;exclusive locking mode&lt;/a&gt; using the pragma:</source>
          <target state="translated">アプリケーションがプラグマを使用してSQLiteを&lt;a href=&quot;pragma#pragma_locking_mode&quot;&gt;排他ロックモードにする&lt;/a&gt;場合：</target>
        </trans-unit>
        <trans-unit id="16930c87a89e5aa4dacec21b97a534c286412312" translate="yes" xml:space="preserve">
          <source>If an application using asynchronous IO executes transactions in quick succession, other database users may be effectively locked out of the database. This is because when a &lt;a href=&quot;lang_transaction&quot;&gt;BEGIN&lt;/a&gt; is executed, a database lock is established immediately. But when the corresponding COMMIT or ROLLBACK occurs, the lock is not released until the relevant part of the write-queue has been flushed through. As a result, if a COMMIT is followed by a BEGIN before the write-queue is flushed through, the database is never unlocked,preventing other processes from accessing the database.</source>
          <target state="translated">非同期IOを使用するアプリケーションが連続してトランザクションを実行すると、他のデータベースユーザーがデータベースから事実上ロックアウトされる可能性があります。これは、&lt;a href=&quot;lang_transaction&quot;&gt;BEGIN&lt;/a&gt;が実行されると、データベースロックがすぐに確立されるためです。ただし、対応するCOMMITまたはROLLBACKが発生すると、書き込みキューの関連部分がフラッシュされるまで、ロックは解放されません。その結果、書き込みキューがフラッシュされる前にCOMMITの後にBEGINが続く場合、データベースはロック解除されず、他のプロセスがデータベースにアクセスできなくなります。</target>
        </trans-unit>
        <trans-unit id="dec67a679cc10b4fb4ca0df679f1b42a8a809bf0" translate="yes" xml:space="preserve">
          <source>If an attempt to acquire a</source>
          <target state="translated">を取得しようとすると</target>
        </trans-unit>
        <trans-unit id="ae2dad7a2ac6f9639d4f707a82a9b585c9a56bd8" translate="yes" xml:space="preserve">
          <source>If an attempt to upgrade to an</source>
          <target state="translated">にアップグレードしようとすると</target>
        </trans-unit>
        <trans-unit id="0f4ee50fd2b5b886cf93345554e2cb331273f09d" translate="yes" xml:space="preserve">
          <source>If an error (e.g. an OOM condition) occurs within this function, the auxiliary data is set to NULL and an error code returned. If the xDelete parameter was not NULL, it is invoked on the auxiliary data pointer before returning.</source>
          <target state="translated">この関数内でエラー(OOM条件など)が発生した場合、補助データはNULLに設定され、エラーコードが返されます。xDeleteパラメータがNULLでなかった場合は、返す前に補助データポインタで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="8045cc0ef3fd13ca44d5e4369a94674b9f7300cd" translate="yes" xml:space="preserve">
          <source>If an error occurs in any of the three main backup API routines then the &lt;a href=&quot;rescode&quot;&gt;error code&lt;/a&gt; and &lt;a href=&quot;c3ref/errcode&quot;&gt;message&lt;/a&gt; are attached to the destination &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt;. Additionally, if &lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;sqlite3_backup_step()&lt;/a&gt; encounters an error, then the &lt;a href=&quot;rescode&quot;&gt;error code&lt;/a&gt; is returned by both the &lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;sqlite3_backup_step()&lt;/a&gt; call itself, and by the subsequent call to &lt;a href=&quot;c3ref/backup_finish#sqlite3backupfinish&quot;&gt;sqlite3_backup_finish()&lt;/a&gt;. So a call to &lt;a href=&quot;c3ref/backup_finish#sqlite3backupfinish&quot;&gt;sqlite3_backup_finish()&lt;/a&gt; does not overwrite an &lt;a href=&quot;rescode&quot;&gt;error code&lt;/a&gt; stored in the destination &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; by &lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;sqlite3_backup_step()&lt;/a&gt;. This feature is used in the example code to reduce amount of error handling required. The return values of the &lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;sqlite3_backup_step()&lt;/a&gt; and &lt;a href=&quot;c3ref/backup_finish#sqlite3backupfinish&quot;&gt;sqlite3_backup_finish()&lt;/a&gt; calls are ignored and the error code indicating the success or failure of the copy operation collected from the destination &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; afterward.</source>
          <target state="translated">3つのメインバックアップAPIルーチンのいずれかでエラーが発生した場合、エラー&lt;a href=&quot;rescode&quot;&gt;コード&lt;/a&gt;と&lt;a href=&quot;c3ref/errcode&quot;&gt;メッセージ&lt;/a&gt;が宛先&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続に&lt;/a&gt;添付されます。さらに、もし&lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;sqlite3_backup_step（）&lt;/a&gt;次に、エラーが発生した&lt;a href=&quot;rescode&quot;&gt;エラーコードが&lt;/a&gt;両方によって返され&lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;（）sqlite3_backup_step&lt;/a&gt;自体を呼び出し、以降の呼び出しによって&lt;a href=&quot;c3ref/backup_finish#sqlite3backupfinish&quot;&gt;sqlite3_backup_finish（） &lt;/a&gt;。そうへの呼び出し&lt;a href=&quot;c3ref/backup_finish#sqlite3backupfinish&quot;&gt;sqlite3_backup_finish（）が&lt;/a&gt;上書きされない&lt;a href=&quot;rescode&quot;&gt;エラーコード&lt;/a&gt;先に格納された&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続&lt;/a&gt;によって&lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;sqlite3_backup_stepを（）&lt;/a&gt;。この機能はサンプルコードで使用され、必要なエラー処理の量を減らします。&lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;sqlite3_backup_step（）&lt;/a&gt;および&lt;a href=&quot;c3ref/backup_finish#sqlite3backupfinish&quot;&gt;sqlite3_backup_finish（）&lt;/a&gt;呼び出しの戻り値は無視され、コピー先の&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続&lt;/a&gt;から収集されたコピー操作の成功または失敗を示すエラーコードが後で収集されます。</target>
        </trans-unit>
        <trans-unit id="e8416d9f169797cd1d1df3d689a0f3981d1e1914" translate="yes" xml:space="preserve">
          <source>If an error occurs while evaluating the SQL statements passed into sqlite3_exec(), then execution of the current statement stops and subsequent statements are skipped. If the 5th parameter to sqlite3_exec() is not NULL then any error message is written into memory obtained from &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc()&lt;/a&gt; and passed back through the 5th parameter. To avoid memory leaks, the application should invoke &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_free()&lt;/a&gt; on error message strings returned through the 5th parameter of sqlite3_exec() after the error message string is no longer needed. If the 5th parameter to sqlite3_exec() is not NULL and no errors occur, then sqlite3_exec() sets the pointer in its 5th parameter to NULL before returning.</source>
          <target state="translated">sqlite3_exec（）に渡されたSQLステートメントの評価中にエラーが発生した場合、現在のステートメントの実行は停止し、後続のステートメントはスキップされます。 sqlite3_exec（）の5番目のパラメーターがNULLでない場合、エラーメッセージは&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc（）&lt;/a&gt;から取得したメモリに書き込まれ、5番目のパラメーターを介して渡されます。メモリリークを回避するために、アプリケーションは、エラーメッセージ文字列が不要になった後、sqlite3_exec（）の5番目のパラメータを通じて返されるエラーメッセージ文字列で&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_free（）&lt;/a&gt;を呼び出す必要があります。 sqlite3_exec（）の5番目のパラメーターがNULLではなく、エラーが発生しない場合、sqlite3_exec（）は5番目のパラメーターのポインターをNULLに設定してから戻ります。</target>
        </trans-unit>
        <trans-unit id="67c739deca1fc659fe9011cffdf430f71e9a737b" translate="yes" xml:space="preserve">
          <source>If an error occurs while evaluating the SQL statements passed into sqlite3_exec(), then execution of the current statement stops and subsequent statements are skipped. If the 5th parameter to sqlite3_exec() is not NULL then any error message is written into memory obtained from &lt;a href=&quot;free&quot;&gt;sqlite3_malloc()&lt;/a&gt; and passed back through the 5th parameter. To avoid memory leaks, the application should invoke &lt;a href=&quot;free&quot;&gt;sqlite3_free()&lt;/a&gt; on error message strings returned through the 5th parameter of sqlite3_exec() after the error message string is no longer needed. If the 5th parameter to sqlite3_exec() is not NULL and no errors occur, then sqlite3_exec() sets the pointer in its 5th parameter to NULL before returning.</source>
          <target state="translated">sqlite3_exec（）に渡されたSQLステートメントの評価中にエラーが発生した場合、現在のステートメントの実行は停止し、後続のステートメントはスキップされます。 sqlite3_exec（）の5番目のパラメーターがNULLでない場合、エラーメッセージは&lt;a href=&quot;free&quot;&gt;sqlite3_malloc（）&lt;/a&gt;から取得したメモリに書き込まれ、5番目のパラメーターを介して渡されます。メモリリークを回避するために、アプリケーションは、エラーメッセージ文字列が不要になった後、sqlite3_exec（）の5番目のパラメータを通じて返されるエラーメッセージ文字列で&lt;a href=&quot;free&quot;&gt;sqlite3_free（）&lt;/a&gt;を呼び出す必要があります。 sqlite3_exec（）の5番目のパラメーターがNULLではなく、エラーが発生しない場合、sqlite3_exec（）は5番目のパラメーターのポインターをNULLに設定してから戻ります。</target>
        </trans-unit>
        <trans-unit id="194a0b44e46a56e474b265407cd79a961ab1ee3b" translate="yes" xml:space="preserve">
          <source>If an error occurs within sqlite3_backup_init(D,N,S,M), then NULL is returned and an error code and error message are stored in the destination &lt;a href=&quot;#sqlite3&quot;&gt;database connection&lt;/a&gt; D. The error code and message for the failed call to sqlite3_backup_init() can be retrieved using the &lt;a href=&quot;#sqlite3_errcode&quot;&gt;sqlite3_errcode()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_errcode&quot;&gt;sqlite3_errmsg()&lt;/a&gt;, and/or &lt;a href=&quot;#sqlite3_errcode&quot;&gt;sqlite3_errmsg16()&lt;/a&gt; functions. A successful call to sqlite3_backup_init() returns a pointer to an &lt;a href=&quot;#sqlite3_backup&quot;&gt;sqlite3_backup&lt;/a&gt; object. The &lt;a href=&quot;#sqlite3_backup&quot;&gt;sqlite3_backup&lt;/a&gt; object may be used with the sqlite3_backup_step() and sqlite3_backup_finish() functions to perform the specified backup operation.</source>
          <target state="translated">sqlite3_backup_init（D、N、S、M）内でエラーが発生した場合、NULLが返され、エラーコードとエラーメッセージが宛先&lt;a href=&quot;#sqlite3&quot;&gt;データベース接続&lt;/a&gt; Dに格納されます。sqlite3_backup_init（）の呼び出しが失敗した場合のエラーコードとメッセージは&lt;a href=&quot;#sqlite3_errcode&quot;&gt;sqlite3_errcode（）&lt;/a&gt;、&lt;a href=&quot;#sqlite3_errcode&quot;&gt;sqlite3_errmsg（）&lt;/a&gt;、または&lt;a href=&quot;#sqlite3_errcode&quot;&gt;sqlite3_errmsg16（）&lt;/a&gt;関数を使用して取得する。 sqlite3_backup_init（）の呼び出しが成功すると、&lt;a href=&quot;#sqlite3_backup&quot;&gt;sqlite3_backup&lt;/a&gt;オブジェクトへのポインタが返されます。&lt;a href=&quot;#sqlite3_backup&quot;&gt;sqlite3_backupの&lt;/a&gt;オブジェクトが指定されたバックアップ操作を実行するsqlite3_backup_step（）とsqlite3_backup_finish（）関数で使用されてもよいです。</target>
        </trans-unit>
        <trans-unit id="1200818faf5a8fe2f6854c6a6851d33b2f623b3d" translate="yes" xml:space="preserve">
          <source>If an error occurs within sqlite3_backup_init(D,N,S,M), then NULL is returned and an error code and error message are stored in the destination &lt;a href=&quot;sqlite3&quot;&gt;database connection&lt;/a&gt; D. The error code and message for the failed call to sqlite3_backup_init() can be retrieved using the &lt;a href=&quot;errcode&quot;&gt;sqlite3_errcode()&lt;/a&gt;, &lt;a href=&quot;errcode&quot;&gt;sqlite3_errmsg()&lt;/a&gt;, and/or &lt;a href=&quot;errcode&quot;&gt;sqlite3_errmsg16()&lt;/a&gt; functions. A successful call to sqlite3_backup_init() returns a pointer to an &lt;a href=&quot;backup&quot;&gt;sqlite3_backup&lt;/a&gt; object. The &lt;a href=&quot;backup&quot;&gt;sqlite3_backup&lt;/a&gt; object may be used with the sqlite3_backup_step() and sqlite3_backup_finish() functions to perform the specified backup operation.</source>
          <target state="translated">sqlite3_backup_init（D、N、S、M）内でエラーが発生した場合、NULLが返され、エラーコードとエラーメッセージが宛先&lt;a href=&quot;sqlite3&quot;&gt;データベース接続&lt;/a&gt; Dに格納されます。sqlite3_backup_init（）の呼び出しが失敗した場合のエラーコードとメッセージは&lt;a href=&quot;errcode&quot;&gt;sqlite3_errcode（）&lt;/a&gt;、&lt;a href=&quot;errcode&quot;&gt;sqlite3_errmsg（）&lt;/a&gt;、または&lt;a href=&quot;errcode&quot;&gt;sqlite3_errmsg16（）&lt;/a&gt;関数を使用して取得する。 sqlite3_backup_init（）の呼び出しが成功すると、&lt;a href=&quot;backup&quot;&gt;sqlite3_backup&lt;/a&gt;オブジェクトへのポインタが返されます。&lt;a href=&quot;backup&quot;&gt;sqlite3_backupの&lt;/a&gt;オブジェクトが指定されたバックアップ操作を実行するsqlite3_backup_step（）とsqlite3_backup_finish（）関数で使用されてもよいです。</target>
        </trans-unit>
        <trans-unit id="100ded69e0a780b44961df68d1032c0e7c075797" translate="yes" xml:space="preserve">
          <source>If an error occurs, an SQLite error code is returned and the output variables (*pnData) and (*ppData) are set to 0. Otherwise, SQLITE_OK is returned and the output variables are set to the size of and a pointer to the output buffer, respectively. In this case it is the responsibility of the caller to eventually free the buffer using a call to sqlite3_free().</source>
          <target state="translated">エラーが発生した場合、SQLiteエラーコードが返され、出力変数(*pnData)と(*ppData)に0が設定されます。 そうでなければ、SQLITE_OKが返され、出力変数にはそれぞれ出力バッファのサイズとポインタが設定されます。この場合、最終的にsqlite3_free()を呼び出してバッファを解放するのは呼び出し元の責任です。</target>
        </trans-unit>
        <trans-unit id="622e26e115262f02ac7f60da2462323cdc540b9f" translate="yes" xml:space="preserve">
          <source>If an error occurs, an SQLite error code is returned. Possible error codes include SQLITE_CORRUPT (if the changeset buffer is corrupt) or SQLITE_NOMEM.</source>
          <target state="translated">エラーが発生した場合、SQLite エラーコードが返されます。考えられるエラーコードには、SQLITE_CORRUPT (チェンジセットバッファが破損している場合)や SQLITE_NOMEM があります。</target>
        </trans-unit>
        <trans-unit id="e455ebdd54ae8a16893e6de74ee6f1db7c5e35d7" translate="yes" xml:space="preserve">
          <source>If an error was encountered within a call to an sqlite3changeset_xxx() function (for example an &lt;a href=&quot;../rescode#corrupt&quot;&gt;SQLITE_CORRUPT&lt;/a&gt; in &lt;a href=&quot;sqlite3changeset_next&quot;&gt;sqlite3changeset_next()&lt;/a&gt; or an &lt;a href=&quot;../rescode#nomem&quot;&gt;SQLITE_NOMEM&lt;/a&gt; in &lt;a href=&quot;sqlite3changeset_new&quot;&gt;sqlite3changeset_new()&lt;/a&gt;) then an error code corresponding to that error is returned by this function. Otherwise, SQLITE_OK is returned. This is to allow the following pattern (pseudo-code):</source>
          <target state="translated">エラーがsqlite3changeset_xxx（）関数の呼び出し（例えば内で発生した場合&lt;a href=&quot;../rescode#corrupt&quot;&gt;SQLITE_CORRUPT&lt;/a&gt;で&lt;a href=&quot;sqlite3changeset_next&quot;&gt;sqlite3changeset_next（）&lt;/a&gt;または&lt;a href=&quot;../rescode#nomem&quot;&gt;SQLITE_NOMEM&lt;/a&gt;における&lt;a href=&quot;sqlite3changeset_new&quot;&gt;（）sqlite3changeset_new&lt;/a&gt;）、そのエラーに対応するエラーコードは、この関数によって返されます。それ以外の場合、SQLITE_OKが返されます。これは、次のパターン（疑似コード）を許可するためのものです。</target>
        </trans-unit>
        <trans-unit id="1bc5bca387ff960fe9687401573a47507a4fa49f" translate="yes" xml:space="preserve">
          <source>If an error was encountered within a call to an sqlite3changeset_xxx() function (for example an &lt;a href=&quot;rescode#corrupt&quot;&gt;SQLITE_CORRUPT&lt;/a&gt; in &lt;a href=&quot;#sqlite3changeset_next&quot;&gt;sqlite3changeset_next()&lt;/a&gt; or an &lt;a href=&quot;rescode#nomem&quot;&gt;SQLITE_NOMEM&lt;/a&gt; in &lt;a href=&quot;#sqlite3changeset_new&quot;&gt;sqlite3changeset_new()&lt;/a&gt;) then an error code corresponding to that error is returned by this function. Otherwise, SQLITE_OK is returned. This is to allow the following pattern (pseudo-code):</source>
          <target state="translated">エラーがsqlite3changeset_xxx（）関数の呼び出し（例えば内で発生した場合&lt;a href=&quot;rescode#corrupt&quot;&gt;SQLITE_CORRUPT&lt;/a&gt;で&lt;a href=&quot;#sqlite3changeset_next&quot;&gt;sqlite3changeset_next（）&lt;/a&gt;または&lt;a href=&quot;rescode#nomem&quot;&gt;SQLITE_NOMEM&lt;/a&gt;における&lt;a href=&quot;#sqlite3changeset_new&quot;&gt;（）sqlite3changeset_new&lt;/a&gt;）、そのエラーに対応するエラーコードは、この関数によって返されます。それ以外の場合、SQLITE_OKが返されます。これは、次のパターン（疑似コード）を許可するためのものです。</target>
        </trans-unit>
        <trans-unit id="1b680ceb7d64040ce2b6564485c5ca5b1c9689a0" translate="yes" xml:space="preserve">
          <source>If an fts5vocab table is created in the temp database, it may be associated with an FTS5 table in any attached database. In order to attach the fts5vocab table to an FTS5 table located in a database other than &quot;temp&quot;, the name of the database is inserted before the FTS5 table name in the CREATE VIRTUAL TABLE arguments. For example:</source>
          <target state="translated">temp データベースに fts5vocab テーブルが作成された場合、どのようなアタッチされたデータベースの FTS5 テーブルにも関連付けることができます。temp」以外のデータベースにあるFTS5テーブルにfts5vocabテーブルをアタッチするには、CREATE VIRTUAL TABLE引数でFTS5テーブル名の前にデータベース名を挿入します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="3334fd5a8f49d3b3b23387e0ded39340f08eab83" translate="yes" xml:space="preserve">
          <source>If an index is available on the ORDER BY column, that index can be used for sorting. Consider the request for all items sorted by &quot;fruit&quot;:</source>
          <target state="translated">ORDER BYカラムにインデックスがある場合、そのインデックスをソートに使用することができます。fruit」でソートされたすべてのアイテムのリクエストを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="7ff3ecb138d9749f1bf1bb734a03098e601b851c" translate="yes" xml:space="preserve">
          <source>If an index is created using a statement like this:</source>
          <target state="translated">このようなステートメントを使用してインデックスを作成した場合。</target>
        </trans-unit>
        <trans-unit id="19ed5776fff64746115879da20e80724a2114442" translate="yes" xml:space="preserve">
          <source>If an instance-list grows so large that it exceeds the &lt;a href=&quot;limits#max_length&quot;&gt;SQLITE_MAX_LENGTH&lt;/a&gt; limit, FTS3/4 is unable to handle it. FTS5 does not have this problem.</source>
          <target state="translated">インスタンスリストが大きくなり&lt;a href=&quot;limits#max_length&quot;&gt;すぎてSQLITE_MAX_LENGTHの&lt;/a&gt;制限を超えた場合、FTS3 / 4はそれを処理できません。FTS5にはこの問題はありません。</target>
        </trans-unit>
        <trans-unit id="e669868d5fcfe552cb1dbbc9c2998f5505f629e6" translate="yes" xml:space="preserve">
          <source>If an interface fails with SQLITE_MISUSE, that means the interface was invoked incorrectly by the application. In that case, the error code and message may or may not be set.</source>
          <target state="translated">インターフェイスが SQLITE_MISUSE で失敗した場合、それはアプリケーションによってインターフェイスが誤って呼び出されたことを意味します。その場合、エラーコードとメッセージは設定されているか、設定されていないかもしれません。</target>
        </trans-unit>
        <trans-unit id="582fb0780f4838faf9f9c1524bd108b2fc64370c" translate="yes" xml:space="preserve">
          <source>If an out-of-memory error occurs, then the return value from these routines is the same as if the column had contained an SQL NULL value. Valid SQL NULL returns can be distinguished from out-of-memory errors by invoking the &lt;a href=&quot;#sqlite3_errcode&quot;&gt;sqlite3_errcode()&lt;/a&gt; immediately after the suspect return value is obtained and before any other SQLite interface is called on the same &lt;a href=&quot;#sqlite3&quot;&gt;database connection&lt;/a&gt;.</source>
          <target state="translated">メモリ不足エラーが発生した場合、これらのルーチンからの戻り値は、列にSQL NULL値が含まれていた場合と同じです。有効なSQL NULL戻り値は、疑わしい戻り値が取得された直後で、同じ&lt;a href=&quot;#sqlite3&quot;&gt;データベース接続で&lt;/a&gt;他のSQLiteインターフェイスが呼び出される前に&lt;a href=&quot;#sqlite3_errcode&quot;&gt;sqlite3_errcode（）&lt;/a&gt;を呼び出すことにより、メモリ不足エラーと区別できます。</target>
        </trans-unit>
        <trans-unit id="5851016a3fb15ec26147b80722e832005884d3e4" translate="yes" xml:space="preserve">
          <source>If an out-of-memory error occurs, then the return value from these routines is the same as if the column had contained an SQL NULL value. Valid SQL NULL returns can be distinguished from out-of-memory errors by invoking the &lt;a href=&quot;errcode&quot;&gt;sqlite3_errcode()&lt;/a&gt; immediately after the suspect return value is obtained and before any other SQLite interface is called on the same &lt;a href=&quot;sqlite3&quot;&gt;database connection&lt;/a&gt;.</source>
          <target state="translated">メモリ不足エラーが発生した場合、これらのルーチンからの戻り値は、列にSQL NULL値が含まれていた場合と同じです。有効なSQL NULL戻り値は、疑わしい戻り値が取得された直後で、同じ&lt;a href=&quot;sqlite3&quot;&gt;データベース接続で&lt;/a&gt;他のSQLiteインターフェイスが呼び出される前に&lt;a href=&quot;errcode&quot;&gt;sqlite3_errcode（）&lt;/a&gt;を呼び出すことにより、メモリ不足エラーと区別できます。</target>
        </trans-unit>
        <trans-unit id="53a860ff4ceaa780f514879a263f3e2bd7a64b45" translate="yes" xml:space="preserve">
          <source>If an sqlite3_exec() callback returns non-zero, the sqlite3_exec() routine returns SQLITE_ABORT without invoking the callback again and without running any subsequent SQL statements.</source>
          <target state="translated">sqlite3_exec()コールバックが0以外の値を返した場合、sqlite3_exec()ルーチンは、コールバックを再度呼び出さず、それ以降のSQL文を実行せずにSQLITE_ABORTを返します。</target>
        </trans-unit>
        <trans-unit id="86f2a1856f49f287cef6815b989e3bcfc9f7c019" translate="yes" xml:space="preserve">
          <source>If an update is only partially applied to the target database by the time sqlite3rbu_close() is called, state information is saved within the state database if it exists, or otherwise in the RBU database. This allows subsequent processes to automatically resume the RBU update from where it left off. If state information is stored in the RBU database, it can be removed by dropping all tables whose names begin with &quot;rbu_&quot;.</source>
          <target state="translated">sqlite3rbu_close()が呼び出されるまでにターゲット・データベースに更新が部分的にしか適用されない場合、状態情報は状態データベースが存在する場合は状態データベース内に、そうでない場合はRBUデータベース内に保存されます。これにより、後続のプロセスは、RBU更新を中断したところから自動的に再開することができます。状態情報がRBUデータベースに保存されている場合、名前が &quot;rbu_&quot;で始まるすべてのテーブルを削除することで削除することができる。</target>
        </trans-unit>
        <trans-unit id="bd175412c5f187514ee87168844f1bedfa975635" translate="yes" xml:space="preserve">
          <source>If an xToken() callback returns any value other than SQLITE_OK, then the tokenization should be abandoned and the xTokenize() method should immediately return a copy of the xToken() return value. Or, if the input buffer is exhausted, xTokenize() should return SQLITE_OK. Finally, if an error occurs with the xTokenize() implementation itself, it may abandon the tokenization and return any error code other than SQLITE_OK or SQLITE_DONE.</source>
          <target state="translated">xToken()コールバックが SQLITE_OK 以外の値を返す場合は、トークン化を放棄して xTokenize()メソッドは直ちに xToken()の戻り値のコピーを返すべきです。あるいは、入力バッファを使い切った場合は、xTokenize()は SQLITE_OK を返すべきです。最後に、xTokenize()の実装自体にエラーが発生した場合、トークン化を放棄して SQLITE_OK または SQLITE_DONE 以外のエラーコードを返すことがあります。</target>
        </trans-unit>
        <trans-unit id="0be452758cf5838f411f1a08b26770962254070e" translate="yes" xml:space="preserve">
          <source>If and only if the previously described conversion of OR to an IN operator does not work, the second OR-clause optimization is attempted. Suppose the OR clause consists of multiple subterms as follows:</source>
          <target state="translated">前述のORからIN演算子への変換がうまくいかない場合にのみ、2番目のOR句の最適化を試みます。OR句が以下のように複数のサブタームで構成されているとします。</target>
        </trans-unit>
        <trans-unit id="1d92fd7f31be8d1f3061a17050b41ab1479f4bcd" translate="yes" xml:space="preserve">
          <source>If another database connection has the database mode open in &lt;a href=&quot;pragma#pragma_locking_mode&quot;&gt;exclusive locking mode&lt;/a&gt; then all queries against the database will return &lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt;. Both Chrome and Firefox open their database files in exclusive locking mode, so attempts to read Chrome or Firefox databases while the applications are running will run into this problem, for example.</source>
          <target state="translated">別のデータベース接続がデータベースモードを&lt;a href=&quot;pragma#pragma_locking_mode&quot;&gt;排他ロックモードで&lt;/a&gt;開いている場合、データベースに対するすべてのクエリは&lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt;を返します。ChromeとFirefoxはどちらもデータベースファイルを排他ロックモードで開くため、たとえば、アプリケーションの実行中にChromeまたはFirefoxデータベースを読み取ろうとすると、この問題が発生します。</target>
        </trans-unit>
        <trans-unit id="52c07a908a81f106b3dd1bc1b1492081c7a35d47" translate="yes" xml:space="preserve">
          <source>If another thread changes the autocommit status of the database connection while this routine is running, then the return value is undefined.</source>
          <target state="translated">このルーチンの実行中に別のスレッドがデータベース接続のオートコミット状態を変更した場合、戻り値は未定義です。</target>
        </trans-unit>
        <trans-unit id="8503a498072091f7cabc2db6a10e976de9bc12b1" translate="yes" xml:space="preserve">
          <source>If another thread or process writes to the source database while this function is sleeping, then SQLite detects this and usually restarts the backup process when sqlite3_backup_step() is next called. There is one exception to this rule: If the source database is not an in-memory database, and the write is performed from within the same process as the backup operation and uses the same database handle (pDb), then the destination database (the one opened using connection pFile) is automatically updated along with the source. The backup process may then be continued after the sqlite3_sleep() call returns as if nothing had happened.</source>
          <target state="translated">この関数がスリープしている間に別のスレッドやプロセスがソース・データベースに書き込みを行った場合、SQLiteはこれを検出し、sqlite3_backup_step()が次に呼び出されたときに通常はバックアップ・プロセスを再起動します。このルールには1つの例外があります:ソースデータベースがインメモリデータベースではなく、書き込みがバックアップ処理と同じプロセス内で行われ、同じデータベースハンドル(pDb)を使用している場合、宛先データベース(接続pFileを使用してオープンされたデータベース)はソースと共に自動的に更新されます。バックアップ処理はsqlite3_sleep()コールが何も起きなかったかのように戻った後も継続されます。</target>
        </trans-unit>
        <trans-unit id="b9f8be087686590dab771595e5bd54b7d246dba5" translate="yes" xml:space="preserve">
          <source>If any errors are encountered during compilation, an error message is written into memory obtained from &lt;b&gt;malloc&lt;/b&gt; and the 5th parameter is made to point to that memory. If the 5th parameter is NULL, then no error message is generated. If the 5th parameter is not NULL, then the calling function should dispose of the memory containing the error message by calling &lt;b&gt;sqlite_freemem&lt;/b&gt;.</source>
          <target state="translated">コンパイル中にエラーが発生した場合、エラーメッセージが&lt;b&gt;malloc&lt;/b&gt;から取得されたメモリに書き込まれ、5番目のパラメータがそのメモリを指すようになります。 5番目のパラメータがNULLの場合、エラーメッセージは生成されません。 5番目のパラメータがNULLでない場合、呼び出し元の関数は&lt;b&gt;sqlite_freemem&lt;/b&gt;を呼び出して、エラーメッセージを含むメモリを&lt;b&gt;破棄する必要があり&lt;/b&gt;ます。</target>
        </trans-unit>
        <trans-unit id="83125f64332cc16259858298cfafac27aca598bf" translate="yes" xml:space="preserve">
          <source>If any of the special-case entries shows above are omitted, then the value of 100 is used for insertion and deletion and 150 is used for substitution. To disable the default insertion, deletion, and/or substitution set their respective cost to 10000 or more.</source>
          <target state="translated">上記の特殊文字列が省略された場合は、挿入・削除に100、置換に150を使用します。デフォルトの挿入・削除・置換を無効にするには、それぞれのコストを10000以上に設定してください。</target>
        </trans-unit>
        <trans-unit id="8b09289d91105f4036d96455156f97ad8f84efdf" translate="yes" xml:space="preserve">
          <source>If any of the sqlite3_bind_*() routines are called with a NULL pointer for the &lt;a href=&quot;#sqlite3_stmt&quot;&gt;prepared statement&lt;/a&gt; or with a prepared statement for which &lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step()&lt;/a&gt; has been called more recently than &lt;a href=&quot;#sqlite3_reset&quot;&gt;sqlite3_reset()&lt;/a&gt;, then the call will return &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_MISUSE&lt;/a&gt;. If any sqlite3_bind_() routine is passed a &lt;a href=&quot;#sqlite3_stmt&quot;&gt;prepared statement&lt;/a&gt; that has been finalized, the result is undefined and probably harmful.</source>
          <target state="translated">sqlite3_bindのいずれか_ *（）ルーチンがためにNULLポインタで呼び出された場合は&lt;a href=&quot;#sqlite3_stmt&quot;&gt;プリペアドステートメント&lt;/a&gt;またはのために準備されたステートメントで&lt;a href=&quot;#sqlite3_step&quot;&gt;（sqlite3_step）&lt;/a&gt;最近になっ超えると呼ばれてきた&lt;a href=&quot;#sqlite3_reset&quot;&gt;（sqlite3_reset） &lt;/a&gt;、コールは戻ります&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_MISUSEを&lt;/a&gt;。 sqlite3_bind_（）ルーチンに、ファイナライズ済みの&lt;a href=&quot;#sqlite3_stmt&quot;&gt;準備済みステートメント&lt;/a&gt;が渡された場合、結果は定義されておらず、おそらく有害です。</target>
        </trans-unit>
        <trans-unit id="4d6ffdf1dd2e882d0d92b18297a217958bf3b943" translate="yes" xml:space="preserve">
          <source>If any of the sqlite3_bind_*() routines are called with a NULL pointer for the &lt;a href=&quot;stmt&quot;&gt;prepared statement&lt;/a&gt; or with a prepared statement for which &lt;a href=&quot;step&quot;&gt;sqlite3_step()&lt;/a&gt; has been called more recently than &lt;a href=&quot;reset&quot;&gt;sqlite3_reset()&lt;/a&gt;, then the call will return &lt;a href=&quot;../rescode#misuse&quot;&gt;SQLITE_MISUSE&lt;/a&gt;. If any sqlite3_bind_() routine is passed a &lt;a href=&quot;stmt&quot;&gt;prepared statement&lt;/a&gt; that has been finalized, the result is undefined and probably harmful.</source>
          <target state="translated">sqlite3_bindのいずれか_ *（）ルーチンがためにNULLポインタで呼び出された場合は&lt;a href=&quot;stmt&quot;&gt;プリペアドステートメント&lt;/a&gt;またはのために準備されたステートメントで&lt;a href=&quot;step&quot;&gt;（sqlite3_step）&lt;/a&gt;最近になっ超えると呼ばれてきた&lt;a href=&quot;reset&quot;&gt;（sqlite3_reset） &lt;/a&gt;、コールは戻ります&lt;a href=&quot;../rescode#misuse&quot;&gt;SQLITE_MISUSEを&lt;/a&gt;。 sqlite3_bind_（）ルーチンに、ファイナライズ済みの&lt;a href=&quot;stmt&quot;&gt;準備済みステートメント&lt;/a&gt;が渡された場合、結果は定義されておらず、おそらく有害です。</target>
        </trans-unit>
        <trans-unit id="ecc451199e804c2d9bbaab7eeb8ae7260c861c03" translate="yes" xml:space="preserve">
          <source>If any of these options are defined, then the same set of SQLITE_OMIT_* options must also be defined when using the &lt;a href=&quot;lemon&quot;&gt;Lemon parser generator&lt;/a&gt; tool to generate the parse.c file and when compiling the 'mkkeywordhash' tool which generates the keywordhash.h file. Because of this, these options may only be used when the library is built from canonical source, not from the &lt;a href=&quot;amalgamation&quot;&gt;amalgamation&lt;/a&gt;. Some SQLITE_OMIT_* options might work, or appear to work, when used with the &lt;a href=&quot;amalgamation&quot;&gt;amalgamation&lt;/a&gt;. But this is not guaranteed. In general, always compile from canonical sources in order to take advantage of SQLITE_OMIT_* options.</source>
          <target state="translated">これらのオプションのいずれかが定義されている場合、&lt;a href=&quot;lemon&quot;&gt;レモンパーサージェネレーター&lt;/a&gt;ツールを使用してparse.cファイルを生成するとき、およびkeywordhash.hファイルを生成する 'mkkeywordhash'ツールをコンパイルするときに、同じSQLITE_OMIT_ *オプションのセットも定義する必要があります。このため、これらのオプションは、ライブラリが&lt;a href=&quot;amalgamation&quot;&gt;amalgamation&lt;/a&gt;からではなく、正規のソースから構築されている場合にのみ使用できます。一部のSQLITE_OMIT_ *オプションは、&lt;a href=&quot;amalgamation&quot;&gt;amalgamation&lt;/a&gt;と一緒に使用すると機能するか、機能しているように見えます。しかし、これは保証されていません。一般に、SQLITE_OMIT_ *オプションを利用するには、常に正規のソースからコンパイルしてください。</target>
        </trans-unit>
        <trans-unit id="066af8ac5653f5f78e3e77b86a9535152f8106eb" translate="yes" xml:space="preserve">
          <source>If any other constraint violation occurs while applying a change (i.e. a UNIQUE, CHECK or NOT NULL constraint), the conflict handler is invoked with CHANGESET_CONSTRAINT as the second argument.</source>
          <target state="translated">変更の適用中に他の制約違反が発生した場合(すなわち、UNIQUE、CHECK、NOT NULL 制約)、第二引数として CHANGESET_CONSTRAINT を使用してコンフリクトハンドラが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c1ffcbd8edc1e59c920bc1e42ef8ae6a08f1c489" translate="yes" xml:space="preserve">
          <source>If any other error occurs while flushing dirty pages to disk (for example an IO error or out-of-memory condition), then processing is abandoned and an SQLite &lt;a href=&quot;../rescode&quot;&gt;error code&lt;/a&gt; is returned to the caller immediately.</source>
          <target state="translated">ダーティページをディスクにフラッシュしている間に他のエラー（IOエラーやメモリ不足状態など）が発生した場合、処理は中止され、SQLite &lt;a href=&quot;../rescode&quot;&gt;エラーコード&lt;/a&gt;が呼び出し元にすぐに返されます。</target>
        </trans-unit>
        <trans-unit id="547159ba42f3dd194cd2ac6c73df9dfb51226b89" translate="yes" xml:space="preserve">
          <source>If any other error occurs while flushing dirty pages to disk (for example an IO error or out-of-memory condition), then processing is abandoned and an SQLite &lt;a href=&quot;rescode&quot;&gt;error code&lt;/a&gt; is returned to the caller immediately.</source>
          <target state="translated">ダーティページをディスクにフラッシュしている間に他のエラー（IOエラーやメモリ不足状態など）が発生した場合、処理は中止され、SQLite &lt;a href=&quot;rescode&quot;&gt;エラーコード&lt;/a&gt;が呼び出し元にすぐに返されます。</target>
        </trans-unit>
        <trans-unit id="ed9a42f661215804821abb386ff5f31ffa1294e2" translate="yes" xml:space="preserve">
          <source>If any prior errors have occurred while constructing the dynamic string in sqlite3_str X, then the &lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_errcode(X)&lt;/a&gt; method will return an appropriate error code. The &lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_errcode(X)&lt;/a&gt; method returns &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_NOMEM&lt;/a&gt; following any out-of-memory error, or &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_TOOBIG&lt;/a&gt; if the size of the dynamic string exceeds &lt;a href=&quot;limits#max_length&quot;&gt;SQLITE_MAX_LENGTH&lt;/a&gt;, or &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OK&lt;/a&gt; if there have been no errors.</source>
          <target state="translated">sqlite3_str Xで動的文字列を構築しているときに以前のエラーが発生した場合、&lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_errcode（X）&lt;/a&gt;メソッドは適切なエラーコードを返します。&lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_errcode（X）&lt;/a&gt;メソッド戻り、&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_NOMEM&lt;/a&gt;任意のメモリ不足エラー、または以下&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_TOOBIG&lt;/a&gt;動的文字列のサイズを超える場合&lt;a href=&quot;limits#max_length&quot;&gt;SQLITE_MAX_LENGTH&lt;/a&gt;、又は&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OKに&lt;/a&gt;エラーがなかった場合。</target>
        </trans-unit>
        <trans-unit id="2797997123bd9f48d4b03d213989316f5ee2db3a" translate="yes" xml:space="preserve">
          <source>If any prior errors have occurred while constructing the dynamic string in sqlite3_str X, then the &lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_errcode(X)&lt;/a&gt; method will return an appropriate error code. The &lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_errcode(X)&lt;/a&gt; method returns &lt;a href=&quot;../rescode#nomem&quot;&gt;SQLITE_NOMEM&lt;/a&gt; following any out-of-memory error, or &lt;a href=&quot;../rescode#toobig&quot;&gt;SQLITE_TOOBIG&lt;/a&gt; if the size of the dynamic string exceeds &lt;a href=&quot;../limits#max_length&quot;&gt;SQLITE_MAX_LENGTH&lt;/a&gt;, or &lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OK&lt;/a&gt; if there have been no errors.</source>
          <target state="translated">sqlite3_str Xで動的文字列を構築しているときに以前のエラーが発生した場合、&lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_errcode（X）&lt;/a&gt;メソッドは適切なエラーコードを返します。&lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_errcode（X）&lt;/a&gt;メソッド戻り、&lt;a href=&quot;../rescode#nomem&quot;&gt;SQLITE_NOMEM&lt;/a&gt;任意のメモリ不足エラー、または以下&lt;a href=&quot;../rescode#toobig&quot;&gt;SQLITE_TOOBIG&lt;/a&gt;動的文字列のサイズを超える場合&lt;a href=&quot;../limits#max_length&quot;&gt;SQLITE_MAX_LENGTH&lt;/a&gt;、又は&lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OKに&lt;/a&gt;エラーがなかった場合。</target>
        </trans-unit>
        <trans-unit id="8cf62e1e5822970ab1a0772544bba1f6a9886bdb" translate="yes" xml:space="preserve">
          <source>If any views refer to table X in a way that is affected by the schema change, then drop those views using &lt;a href=&quot;lang_dropview&quot;&gt;DROP VIEW&lt;/a&gt; and recreate them with whatever changes are necessary to accommodate the schema change using &lt;a href=&quot;lang_createview&quot;&gt;CREATE VIEW&lt;/a&gt;.</source>
          <target state="translated">スキーマの変更の影響を受けるビューでテーブルXを参照している場合は、&lt;a href=&quot;lang_dropview&quot;&gt;DROP VIEW&lt;/a&gt;を使用してそれらのビューを削除し、&lt;a href=&quot;lang_createview&quot;&gt;CREATE VIEW&lt;/a&gt;を使用してスキーマの変更に対応するために必要な変更を加えて再作成します。</target>
        </trans-unit>
        <trans-unit id="f4bcba20e82a98be0954f7a995f190f8be3b9e76" translate="yes" xml:space="preserve">
          <source>If argument P3 is non-zero, then it indicates that the sorter may assume that a stable sort considering the first P3 fields of each key is sufficient to produce the required results.</source>
          <target state="translated">引数P3が0でない場合、ソーターは各キーの最初のP3フィールドを考慮した安定したソートが必要な結果を生成するのに十分であると仮定してもよいことを示しています。</target>
        </trans-unit>
        <trans-unit id="35693c95846989c47eb6a922b6389598e5e5c2ef" translate="yes" xml:space="preserve">
          <source>If argument pnCol is not NULL, then *pnCol is set to the number of columns in the table.</source>
          <target state="translated">引数pnColがNULLでない場合、*pnColにはテーブルの列数が設定されます。</target>
        </trans-unit>
        <trans-unit id="6eebf7ee5a909998cdac6e1af93d8bf0c4b9e6a9" translate="yes" xml:space="preserve">
          <source>If argument pzTab is not NULL, then *pzTab is set to point to a nul-terminated utf-8 encoded string containing the name of the table affected by the current change. The buffer remains valid until either sqlite3changeset_next() is called on the iterator or until the conflict-handler function returns. If pnCol is not NULL, then *pnCol is set to the number of columns in the table affected by the change. If pbIndirect is not NULL, then *pbIndirect is set to true (1) if the change is an indirect change, or false (0) otherwise. See the documentation for &lt;a href=&quot;#sqlite3session_indirect&quot;&gt;sqlite3session_indirect()&lt;/a&gt; for a description of direct and indirect changes. Finally, if pOp is not NULL, then *pOp is set to one of &lt;a href=&quot;c3ref/c_alter_table&quot;&gt;SQLITE_INSERT&lt;/a&gt;, &lt;a href=&quot;c3ref/c_alter_table&quot;&gt;SQLITE_DELETE&lt;/a&gt; or &lt;a href=&quot;c3ref/c_alter_table&quot;&gt;SQLITE_UPDATE&lt;/a&gt;, depending on the type of change that the iterator currently points to.</source>
          <target state="translated">引数pzTabがNULLでない場合、* pzTabは、現在の変更の影響を受けるテーブルの名前を含む、ヌル文字で終了するutf-8エンコードされた文字列を指すように設定されます。イテレーターでsqlite3changeset_next（）が呼び出されるまで、または競合ハンドラー関数が戻るまで、バッファーは有効なままです。 pnColがNULLでない場合、* pnColは、変更の影響を受けるテーブル内の列数に設定されます。 pbIndirectがNULLでない場合、* pbIndirectは、変更が間接的な変更である場合はtrue（1）に設定され、そうでない場合はfalse（0）に設定されます。直接的および間接的な変更の説明については、&lt;a href=&quot;#sqlite3session_indirect&quot;&gt;sqlite3session_indirect（）の&lt;/a&gt;ドキュメントを参照してください。最後に、pOpがNULLでない場合、* pOpは&lt;a href=&quot;c3ref/c_alter_table&quot;&gt;SQLITE_INSERT&lt;/a&gt;、&lt;a href=&quot;c3ref/c_alter_table&quot;&gt;SQLITE_DELETE、&lt;/a&gt;または&lt;a href=&quot;c3ref/c_alter_table&quot;&gt;SQLITE_UPDATEの&lt;/a&gt;いずれかに設定されます。、イテレータが現在指している変更のタイプによって異なります。</target>
        </trans-unit>
        <trans-unit id="eeb423ada7e3f3af8ece536280a90cde13ccf0f0" translate="yes" xml:space="preserve">
          <source>If argument pzTab is not NULL, then *pzTab is set to point to a nul-terminated utf-8 encoded string containing the name of the table affected by the current change. The buffer remains valid until either sqlite3changeset_next() is called on the iterator or until the conflict-handler function returns. If pnCol is not NULL, then *pnCol is set to the number of columns in the table affected by the change. If pbIndirect is not NULL, then *pbIndirect is set to true (1) if the change is an indirect change, or false (0) otherwise. See the documentation for &lt;a href=&quot;sqlite3session_indirect&quot;&gt;sqlite3session_indirect()&lt;/a&gt; for a description of direct and indirect changes. Finally, if pOp is not NULL, then *pOp is set to one of &lt;a href=&quot;../c3ref/c_alter_table&quot;&gt;SQLITE_INSERT&lt;/a&gt;, &lt;a href=&quot;../c3ref/c_alter_table&quot;&gt;SQLITE_DELETE&lt;/a&gt; or &lt;a href=&quot;../c3ref/c_alter_table&quot;&gt;SQLITE_UPDATE&lt;/a&gt;, depending on the type of change that the iterator currently points to.</source>
          <target state="translated">引数pzTabがNULLでない場合、* pzTabは、現在の変更の影響を受けるテーブルの名前を含む、ヌル文字で終了するutf-8エンコードされた文字列を指すように設定されます。イテレーターでsqlite3changeset_next（）が呼び出されるまで、または競合ハンドラー関数が戻るまで、バッファーは有効なままです。 pnColがNULLでない場合、* pnColは、変更の影響を受けるテーブル内の列数に設定されます。 pbIndirectがNULLでない場合、* pbIndirectは、変更が間接的な変更である場合はtrue（1）に設定され、そうでない場合はfalse（0）に設定されます。直接的および間接的な変更の説明については、&lt;a href=&quot;sqlite3session_indirect&quot;&gt;sqlite3session_indirect（）の&lt;/a&gt;ドキュメントを参照してください。最後に、pOpがNULLでない場合、* pOpは&lt;a href=&quot;../c3ref/c_alter_table&quot;&gt;SQLITE_INSERT&lt;/a&gt;、&lt;a href=&quot;../c3ref/c_alter_table&quot;&gt;SQLITE_DELETE、&lt;/a&gt;または&lt;a href=&quot;../c3ref/c_alter_table&quot;&gt;SQLITE_UPDATEの&lt;/a&gt;いずれかに設定されます。、イテレータが現在指している変更のタイプによって異なります。</target>
        </trans-unit>
        <trans-unit id="012db9d404feeb7b242a5f104e807e9ebcf5e6cc" translate="yes" xml:space="preserve">
          <source>If argument zTab is not NULL, then it is the name of a table to attach to the session object passed as the first argument. All subsequent changes made to the table while the session object is enabled will be recorded. See documentation for &lt;a href=&quot;#sqlite3session_changeset&quot;&gt;sqlite3session_changeset()&lt;/a&gt; for further details.</source>
          <target state="translated">引数zTabがNULLでない場合、それは最初の引数として渡されたセッションオブジェクトにアタッチするテーブルの名前です。セッションオブジェクトが有効になっている間にテーブルに加えられた変更はすべて記録されます。詳細については、&lt;a href=&quot;#sqlite3session_changeset&quot;&gt;sqlite3session_changeset（）の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="1874355cfa55a648a95d55d6cc4ad4d5d5a5435f" translate="yes" xml:space="preserve">
          <source>If argument zTab is not NULL, then it is the name of a table to attach to the session object passed as the first argument. All subsequent changes made to the table while the session object is enabled will be recorded. See documentation for &lt;a href=&quot;sqlite3session_changeset&quot;&gt;sqlite3session_changeset()&lt;/a&gt; for further details.</source>
          <target state="translated">引数zTabがNULLでない場合、それは最初の引数として渡されたセッションオブジェクトにアタッチするテーブルの名前です。セッションオブジェクトが有効になっている間にテーブルに加えられた変更はすべて記録されます。詳細については、&lt;a href=&quot;sqlite3session_changeset&quot;&gt;sqlite3session_changeset（）の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="21fcaf7a804fb18a6bdf460073dabd9a55d816ad" translate="yes" xml:space="preserve">
          <source>If both SQLITE_STOREP2 and SQLITE_KEEPNULL flags are set then the content of r[P2] is only changed if the new value is NULL or 0 (false). In other words, a prior r[P2] value will not be overwritten by 1 (true).</source>
          <target state="translated">SQLITE_STOREP2 と SQLITE_KEEPNULL フラグの両方が設定されている場合、新しい値が NULL または 0 (False)の場合にのみ r[P2]の内容が変更されます。言い換えれば、以前の r[P2]の値は 1 (true)で上書きされません。</target>
        </trans-unit>
        <trans-unit id="f091230c98fc9fb42f84687fff668e2e8782487e" translate="yes" xml:space="preserve">
          <source>If both SQLITE_STOREP2 and SQLITE_KEEPNULL flags are set then the content of r[P2] is only changed if the new value is NULL or 1 (true). In other words, a prior r[P2] value will not be overwritten by 0 (false).</source>
          <target state="translated">SQLITE_STOREP2 と SQLITE_KEEPNULL フラグの両方が設定されている場合、r[P2]の内容は、新しい値が NULL または 1 (真)の場合にのみ変更されます。つまり、以前の r[P2]の値は 0 (False)で上書きされません。</target>
        </trans-unit>
        <trans-unit id="b35b42f8226135f60e30979149548acecdb3cd9a" translate="yes" xml:space="preserve">
          <source>If both pragmas &lt;a href=&quot;pragma#pragma_short_column_names&quot;&gt;short_column_names&lt;/a&gt; and &lt;a href=&quot;pragma#pragma_full_column_names&quot;&gt;full_column_names&lt;/a&gt; are OFF then case (2) applies.</source>
          <target state="translated">プラグマ&lt;a href=&quot;pragma#pragma_short_column_names&quot;&gt;short_column_names&lt;/a&gt;と&lt;a href=&quot;pragma#pragma_full_column_names&quot;&gt;full_column_namesの&lt;/a&gt;両方がOFFの場合、ケース（2）が適用されます。</target>
        </trans-unit>
        <trans-unit id="c1ea5de7bdcea197233ed39232910d2d33159cd2" translate="yes" xml:space="preserve">
          <source>If certain kinds of errors occur on a statement within a multi-statement transaction (errors including &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_FULL&lt;/a&gt;, &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_IOERR&lt;/a&gt;, &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_NOMEM&lt;/a&gt;, &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_BUSY&lt;/a&gt;, and &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_INTERRUPT&lt;/a&gt;) then the transaction might be rolled back automatically. The only way to find out whether SQLite automatically rolled back the transaction after an error is to use this function.</source>
          <target state="translated">マルチステートメントトランザクション内のステートメントで特定の種類のエラー（&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_FULL&lt;/a&gt;、&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_IOERR&lt;/a&gt;、&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_NOMEM&lt;/a&gt;、&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_BUSY&lt;/a&gt;、および&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_INTERRUPT&lt;/a&gt;を含むエラー）が発生した場合、トランザクションは自動的にロールバックされる可能性があります。エラー後にSQLiteがトランザクションを自動的にロールバックしたかどうかを確認する唯一の方法は、この関数を使用することです。</target>
        </trans-unit>
        <trans-unit id="063cf3d6b1f8d89a285c8317271a90d08b9bd66c" translate="yes" xml:space="preserve">
          <source>If certain kinds of errors occur on a statement within a multi-statement transaction (errors including &lt;a href=&quot;../rescode#full&quot;&gt;SQLITE_FULL&lt;/a&gt;, &lt;a href=&quot;../rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt;, &lt;a href=&quot;../rescode#nomem&quot;&gt;SQLITE_NOMEM&lt;/a&gt;, &lt;a href=&quot;../rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt;, and &lt;a href=&quot;../rescode#interrupt&quot;&gt;SQLITE_INTERRUPT&lt;/a&gt;) then the transaction might be rolled back automatically. The only way to find out whether SQLite automatically rolled back the transaction after an error is to use this function.</source>
          <target state="translated">マルチステートメントトランザクション内のステートメントで特定の種類のエラー（&lt;a href=&quot;../rescode#full&quot;&gt;SQLITE_FULL&lt;/a&gt;、&lt;a href=&quot;../rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt;、&lt;a href=&quot;../rescode#nomem&quot;&gt;SQLITE_NOMEM&lt;/a&gt;、&lt;a href=&quot;../rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt;、および&lt;a href=&quot;../rescode#interrupt&quot;&gt;SQLITE_INTERRUPT&lt;/a&gt;を含むエラー）が発生した場合、トランザクションは自動的にロールバックされる可能性があります。エラー後にSQLiteがトランザクションを自動的にロールバックしたかどうかを確認する唯一の方法は、この関数を使用することです。</target>
        </trans-unit>
        <trans-unit id="65b57925e204e3ebe11c23e15127d898a0e33ca6" translate="yes" xml:space="preserve">
          <source>If certain kinds of errors occur within a transaction, the transaction may or may not be rolled back automatically. The errors that can cause an automatic rollback include:</source>
          <target state="translated">ある種のエラーがトランザクション内で発生した場合、トランザクションは自動的にロールバックされる場合とされない場合があります。自動ロールバックの原因となるエラーには、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="debbf4ee0f449f15f2b2fad59057f8a4eccd847a" translate="yes" xml:space="preserve">
          <source>If changes occur on the same database connection after a query starts running but before the query completes, then it is undefined whether or not the query will see those changes.</source>
          <target state="translated">クエリが実行を開始した後、クエリが完了する前に同じデータベース接続で変更が発生した場合、クエリがそれらの変更を見るかどうかは未定義です。</target>
        </trans-unit>
        <trans-unit id="92abf58210ebaa6ec510b645429d6e91e6ca04d8" translate="yes" xml:space="preserve">
          <source>If changes occur on the same database connection after a query starts running but before the query completes, then the query might return a changed row more than once, or it might return a row that was previously deleted.</source>
          <target state="translated">クエリの実行開始後、クエリが完了する前に同じデータベース接続で変更が発生した場合、クエリは変更された行を複数回返したり、以前に削除された行を返したりする可能性があります。</target>
        </trans-unit>
        <trans-unit id="437112dad4bafb7626f6351c41b7b34b2abfaca6" translate="yes" xml:space="preserve">
          <source>If changing into or out of WAL mode the procedure is more complicated.</source>
          <target state="translated">WALモードへの切り替え、またはWALモードからの切り替えの場合は、手順が複雑になります。</target>
        </trans-unit>
        <trans-unit id="f754396c33d700ad2fd9dbdfe823fd9ae27672f4" translate="yes" xml:space="preserve">
          <source>If column names are explicitly provided for the FTS table as part of the CREATE VIRTUAL TABLE statement, then a datatype name may be optionally specified for each column. This is pure syntactic sugar, the supplied typenames are not used by FTS or the SQLite core for any purpose. The same applies to any constraints specified along with an FTS column name - they are parsed but not used or recorded by the system in any way.</source>
          <target state="translated">CREATE VIRTUAL TABLE文の一部としてFTSテーブルに明示的にカラム名が提供されている場合、各カラムにはオプションでデータ型名を指定することができます。これは純粋な構文上の問題であり、提供された型名はFTSやSQLiteコアがどのような目的でも使用することはありません。同じことが、FTSカラム名と共に指定された制約にも適用されます-それらは解析されますが、システムによって使用されたり記録されたりすることはありません。</target>
        </trans-unit>
        <trans-unit id="4ec154d4b803f19da5aae8c26059349f5ffc0b8b" translate="yes" xml:space="preserve">
          <source>If conflict is with a remote UPDATE and the resolution is OMIT, then the old.* values are rebased using the new.* values in the remote change. Or, if the resolution is REPLACE, then the change is copied into the rebased changeset with updates to columns also updated by the conflicting remote UPDATE removed. If this means no columns would be updated, the change is omitted.</source>
          <target state="translated">競合がリモートUPDATEで、解決方法がOMITの場合、old.*値は、リモート変更のnew.*値を使用してリベースされます。または、解決方法がREPLACEの場合、競合するリモートUPDATEによって更新されたカラムの更新が削除された状態で、変更がリベースされたチェンジセットにコピーされます。これにより列が更新されない場合は、変更は省略されます。</target>
        </trans-unit>
        <trans-unit id="eacad9fb0a3ce1ea1edfa735ab3f942dbf9e8cd8" translate="yes" xml:space="preserve">
          <source>If cursor P1 is an index, then the content is the key of the row. If cursor P2 is a table, then the content extracted is the data.</source>
          <target state="translated">カーソルP1がインデックスであれば、抽出された内容はその行のキーである。カーソルP2がテーブルであれば、抽出された内容はデータである。</target>
        </trans-unit>
        <trans-unit id="b0e0c624719d0c72631b398ea85cd293212feef6" translate="yes" xml:space="preserve">
          <source>If cursor P1 refers to an SQL table (B-Tree that uses integer keys), use the value in register P3 as a key. If cursor P1 refers to an SQL index, then P3 is the first in an array of P4 registers that are used as an unpacked index key.</source>
          <target state="translated">カーソルP1がSQLテーブル(整数キーを使用するBツリー)を参照している場合、レジスタP3の値をキーとして使用します。カーソルP1がSQLインデックスを参照している場合、P3は、アンパックされたインデックスキーとして使用されるP4レジスタの配列の最初のものです。</target>
        </trans-unit>
        <trans-unit id="eed3ade81291c8b1e43812aa13b2f866776f9f36" translate="yes" xml:space="preserve">
          <source>If cursor P1 refers to an SQL table (B-Tree that uses integer keys), use the value in register P3 as the key. If cursor P1 refers to an SQL index, then P3 is the first in an array of P4 registers that are used as an unpacked index key.</source>
          <target state="translated">カーソルP1がSQLテーブル(整数キーを使用するB-Tree)を参照している場合、レジスタP3の値をキーとして使用します。カーソルP1がSQLインデックスを参照している場合、P3は、アンパックされたインデックスキーとして使用されるP4レジスタの配列の最初のものです。</target>
        </trans-unit>
        <trans-unit id="b9a382b280888652763d650554446d773be05c07" translate="yes" xml:space="preserve">
          <source>If data is of type &lt;b&gt;text&lt;/b&gt; then the comparison is determined by the standard C data comparison functions &lt;b&gt;memcmp()&lt;/b&gt; or &lt;b&gt;strcmp()&lt;/b&gt;. The comparison looks at bytes from two inputs one by one and returns the first non-zero difference. Strings are '\000' terminated so shorter strings sort before longer strings, as you would expect.</source>
          <target state="translated">データ型である場合&lt;b&gt;、テキスト&lt;/b&gt;、比較関数は、標準のCデータを比較することによって決定される&lt;b&gt;memcmp（）を&lt;/b&gt;または&lt;b&gt;のstrcmp（）を&lt;/b&gt;。比較では、2つの入力からのバイトを1つずつ調べ、最初のゼロ以外の差を返します。文字列は '\ 000'で終了するので、予想どおり、短い文字列は長い文字列の前にソートされます。</target>
        </trans-unit>
        <trans-unit id="0120d2592940874456695d5517c48510978290bc" translate="yes" xml:space="preserve">
          <source>If database zDb is the name of an attached database that is not in WAL mode, SQLITE_OK is returned and both *pnLog and *pnCkpt set to -1. If zDb is not NULL (or a zero length string) and is not the name of any attached database, SQLITE_ERROR is returned to the caller.</source>
          <target state="translated">データベース zDb が WAL モードではない添付データベースの名前である場合、SQLITE_OK が返され、*pnLog と *pnCkpt の両方が -1 に設定されます。zDb が NULL (または長さ 0 の文字列)ではなく、接続されているデータベースの名前ではない場合は、SQLITE_ERROR がコール元に返されます。</target>
        </trans-unit>
        <trans-unit id="ed9f3d01c8cb63f65cf1f8cb1ada863d801c5821" translate="yes" xml:space="preserve">
          <source>If defined, support for sub-selects and the IN() operator are omitted.</source>
          <target state="translated">定義されている場合は、サブセレクトとIN()演算子のサポートは省略されます。</target>
        </trans-unit>
        <trans-unit id="5f4710e921e7c9706b1a7d0affff80c102083b4a" translate="yes" xml:space="preserve">
          <source>If desired, you can verify the new database by running this command:</source>
          <target state="translated">必要に応じて、このコマンドを実行して新しいデータベースを検証することができます。</target>
        </trans-unit>
        <trans-unit id="d0b0b6a44b8709f88072f86b2bad9194c580b896" translate="yes" xml:space="preserve">
          <source>If either P1 or P2 is 0 (false) then the result is 0 even if the other input is NULL. A NULL and true or two NULLs give a NULL output.</source>
          <target state="translated">P1 または P2 のどちらかが 0 (false)の場合、他の入力が NULL であっても結果は 0 になります。NULLと真、または2つのNULLがあればNULL出力となります。</target>
        </trans-unit>
        <trans-unit id="0c5f4e14888f22c44de9608417d3500cbb09c876" translate="yes" xml:space="preserve">
          <source>If either P1 or P2 is nonzero (true) then the result is 1 (true) even if the other input is NULL. A NULL and false or two NULLs give a NULL output.</source>
          <target state="translated">P1 または P2 のどちらかが 0 以外の値(真)の場合、他の入力が NULL であっても結果は 1(真)となります。NULLとFalse、または2つのNULLを指定すると、NULL出力となります。</target>
        </trans-unit>
        <trans-unit id="f718f36fc0872a36f2f90015ef098011701953fd" translate="yes" xml:space="preserve">
          <source>If either P3 or the sorter contains a NULL in one of their significant fields (not counting the P4 fields at the end which are ignored) then the comparison is assumed to be equal.</source>
          <target state="translated">P3またはソーターのいずれかが有効なフィールドの1つにNULLを含む場合(最後のP4フィールドは無視されますがカウントされません)、比較は等しいと仮定されます。</target>
        </trans-unit>
        <trans-unit id="cb70cc2d7081446ae1bd92c809ed77dcb6489c40" translate="yes" xml:space="preserve">
          <source>If either X&lt;sub&gt;&lt;small&gt;i&lt;/small&gt;&lt;/sub&gt; or X&lt;sub&gt;&lt;small&gt;c&lt;/small&gt;&lt;/sub&gt; are non-numeric, then the boundary is the first row for which the expression &quot;X&lt;sub&gt;&lt;small&gt;i&lt;/small&gt;&lt;/sub&gt; IS X&lt;sub&gt;&lt;small&gt;c&lt;/small&gt;&lt;/sub&gt;&quot; is true.</source>
          <target state="translated">X &lt;sub&gt;&lt;small&gt;i&lt;/small&gt;&lt;/sub&gt;またはX &lt;sub&gt;&lt;small&gt;cの&lt;/small&gt;&lt;/sub&gt;いずれかが数値でない場合、境界は式「X &lt;sub&gt;&lt;small&gt;i&lt;/small&gt;&lt;/sub&gt; IS X &lt;sub&gt;&lt;small&gt;c&lt;/small&gt;&lt;/sub&gt;」が真である最初の行です。</target>
        </trans-unit>
        <trans-unit id="40afda50342c1866ef5c9245fe131f4faa8b196a" translate="yes" xml:space="preserve">
          <source>If either operand has an explicit collating function assignment using the postfix &lt;a href=&quot;lang_expr#collateop&quot;&gt;COLLATE operator&lt;/a&gt;, then the explicit collating function is used for comparison, with precedence to the collating function of the left operand.</source>
          <target state="translated">いずれかのオペランドに後&lt;a href=&quot;lang_expr#collateop&quot;&gt;置COLLATE演算子&lt;/a&gt;を使用した明示的な照合関数の割り当てがある場合、明示的な照合関数が比較に使用され、左側のオペランドの照合関数が優先されます。</target>
        </trans-unit>
        <trans-unit id="55672cdef058eed493a94d268600f0dc4cf6e695" translate="yes" xml:space="preserve">
          <source>If either operand is a column, then the collating function of that column is used with precedence to the left operand. For the purposes of the previous sentence, a column name preceded by one or more unary &quot;+&quot; operators and/or CAST operators is still considered a column name.</source>
          <target state="translated">どちらかのオペランドが列である場合、その列の照合関数が左のオペランドに優先して使用されます。前の文の目的のために、1つ以上の単項の &quot;+&quot;演算子および/またはCAST演算子が先行する列名は、依然として列名とみなされます。</target>
        </trans-unit>
        <trans-unit id="c6ebcbeab69b86f653a3410afabe08a544dcaea8" translate="yes" xml:space="preserve">
          <source>If either the current value or the highwater mark is too large to be represented by a 32-bit integer, then the values returned by sqlite3_status() are undefined.</source>
          <target state="translated">現在の値またはハイウォーターマークのいずれかが32ビット整数で表現するには大きすぎる場合、sqlite3_status()によって返される値は未定義です。</target>
        </trans-unit>
        <trans-unit id="10b7374ac7ffa60e3b709049b312d9aea49ec9de" translate="yes" xml:space="preserve">
          <source>If file-locking is enabled (it is enabled by default), then connections from multiple processes may also read and write the database file. However concurrency is reduced as follows:</source>
          <target state="translated">ファイルロックが有効になっている場合(デフォルトでは有効になっています)、複数のプロセスからの接続もデータベースファイルを読み書きすることができます。ただし、同時実行性は以下のように低下します。</target>
        </trans-unit>
        <trans-unit id="d3ef8fd536a105baf87d357ae62955ed380fa9cf" translate="yes" xml:space="preserve">
          <source>If foreign key constraints are enabled when it is prepared, the &lt;a href=&quot;lang_droptable&quot;&gt;DROP TABLE&lt;/a&gt; command performs an implicit &lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt; to remove all rows from the table before dropping it. The implicit DELETE does not cause any SQL triggers to fire, but may invoke foreign key actions or constraint violations. If an immediate foreign key constraint is violated, the DROP TABLE statement fails and the table is not dropped. If a deferred foreign key constraint is violated, then an error is reported when the user attempts to commit the transaction if the foreign key constraint violations still exist at that point. Any &quot;foreign key mismatch&quot; errors encountered as part of an implicit DELETE are ignored.</source>
          <target state="translated">外部キー制約が準備時に有効になっている場合、&lt;a href=&quot;lang_droptable&quot;&gt;DROP TABLE&lt;/a&gt;コマンドは暗黙的な&lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt;を実行して、テーブルからすべての行を削除してから削除します。暗黙的なDELETEによってSQLトリガーが起動することはありませんが、外部キーアクションまたは制約違反を呼び出す可能性があります。即時外部キー制約に違反すると、DROP TABLEステートメントは失敗し、テーブルは削除されません。遅延外部キー制約に違反している場合、外部キー制約違反がその時点でまだ存在しているときにユーザーがトランザクションをコミットしようとすると、エラーが報告されます。暗黙的なDELETEの一部として発生した「外部キーの不一致」エラーは無視されます。</target>
        </trans-unit>
        <trans-unit id="4f44f3a8f93f85a791245b413bb9ad1095b808f6" translate="yes" xml:space="preserve">
          <source>If foreign key constraints are enabled, disable them using &lt;a href=&quot;pragma#pragma_foreign_keys&quot;&gt;PRAGMA foreign_keys=OFF&lt;/a&gt;.</source>
          <target state="translated">外部キー制約が有効になっている場合は、&lt;a href=&quot;pragma#pragma_foreign_keys&quot;&gt;PRAGMA foreign_keys = OFF&lt;/a&gt;を使用して無効にします。</target>
        </trans-unit>
        <trans-unit id="6a1eb421ae6f8eb8b7414f3ba7bf623bab8ed0c1" translate="yes" xml:space="preserve">
          <source>If foreign key constraints were originally enabled then run &lt;a href=&quot;pragma#pragma_foreign_key_check&quot;&gt;PRAGMA foreign_key_check&lt;/a&gt; to verify that the schema change did not break any foreign key constraints.</source>
          <target state="translated">最初に外部キー制約が有効になっていた場合は、&lt;a href=&quot;pragma#pragma_foreign_key_check&quot;&gt;PRAGMA foreign_key_check&lt;/a&gt;を実行して、スキーマの変更によって外部キー制約が壊れていないことを確認します。</target>
        </trans-unit>
        <trans-unit id="c13741cd4626e3d89fe66c4aae10d469f36c6a45" translate="yes" xml:space="preserve">
          <source>If foreign key handling is enabled, and applying a changeset leaves the database in a state containing foreign key violations, the conflict handler is invoked with CHANGESET_FOREIGN_KEY as the second argument exactly once before the changeset is committed. If the conflict handler returns CHANGESET_OMIT, the changes, including those that caused the foreign key constraint violation, are committed. Or, if it returns CHANGESET_ABORT, the changeset is rolled back.</source>
          <target state="translated">外部キー処理が有効で、チェンジセットを適用すると外部キー違反を含む状態でデータベースを離れる場合、チェンジセットがコミットされる前に、CHANGESET_FOREIGN_KEYを第2引数に指定してコンフリクトハンドラが呼び出されます。コンフリクトハンドラが CHANGESET_OMIT を返す場合、外部キー制約違反の原因となった変更を含む変更がコミットされます。あるいは、CHANGESET_ABORT を返した場合、チェンジセットはロールバックされます。</target>
        </trans-unit>
        <trans-unit id="664ed429f3e8a71469131f1cf927d67cea7224ef" translate="yes" xml:space="preserve">
          <source>If foreign keys constraints were originally enabled, reenable them now.</source>
          <target state="translated">外部キー制約が元々有効であった場合は、再度有効にしてください。</target>
        </trans-unit>
        <trans-unit id="ae0d6d454ce848e119fe19c9d3921a6301be3ccd" translate="yes" xml:space="preserve">
          <source>If it is not already attached to the session object passed as the first argument, this function attaches table zTbl in the same manner as the &lt;a href=&quot;#sqlite3session_attach&quot;&gt;sqlite3session_attach()&lt;/a&gt; function. If zTbl does not exist, or if it does not have a primary key, this function is a no-op (but does not return an error).</source>
          <target state="translated">最初の引数として渡されたセッションオブジェクトにまだアタッチされていない場合、この関数は&lt;a href=&quot;#sqlite3session_attach&quot;&gt;sqlite3session_attach（）&lt;/a&gt;関数と同じ方法でテーブルzTblをアタッチします。zTblが存在しない場合、または主キーがない場合、この関数は何もしません（ただし、エラーを返しません）。</target>
        </trans-unit>
        <trans-unit id="b18e9847f65d260e65a6581d1c54f05d17b07506" translate="yes" xml:space="preserve">
          <source>If it is not already attached to the session object passed as the first argument, this function attaches table zTbl in the same manner as the &lt;a href=&quot;sqlite3session_attach&quot;&gt;sqlite3session_attach()&lt;/a&gt; function. If zTbl does not exist, or if it does not have a primary key, this function is a no-op (but does not return an error).</source>
          <target state="translated">最初の引数として渡されたセッションオブジェクトにまだアタッチされていない場合、この関数は&lt;a href=&quot;sqlite3session_attach&quot;&gt;sqlite3session_attach（）&lt;/a&gt;関数と同じ方法でテーブルzTblをアタッチします。zTblが存在しない場合、または主キーがない場合、この関数は何もしません（ただし、エラーを返しません）。</target>
        </trans-unit>
        <trans-unit id="a8c1f9f82d9d1138df42ada4c0e8d4ac1b13017c" translate="yes" xml:space="preserve">
          <source>If many threads and/or processes need to write the database at the same instant (and they cannot queue up and take turns) then it is best to select a database engine that supports that capability, which always means a client/server database engine.</source>
          <target state="translated">多くのスレッドやプロセスが同時にデータベースに書き込む必要がある場合(キューに並んで交代で書き込むことができない場合)、その機能をサポートするデータベースエンジンを選択するのがベストです。</target>
        </trans-unit>
        <trans-unit id="277d800367bb442a2e4d79fba0d9ab386719bb03" translate="yes" xml:space="preserve">
          <source>If mmap_size is set to N then all current implementations map the first N bytes of the database file and use legacy xRead() calls for any content beyond N bytes. If the database file is smaller than N bytes, then the entire file is mapped. In the future, new OS interfaces could, in theory, map regions of the file other than the first N bytes, but no such implementation currently exists.</source>
          <target state="translated">mmap_size が N に設定されている場合、現在のすべての実装では、データベースファイルの最初の N バイトがマップされ、N バイト以上の内容については従来の xRead()コールが使用されます。データベースファイルが N バイトよりも小さい場合は、ファイル全体がマップされます。将来的には、理論的には、新しい OS インターフェイスによって、最初の N バイト以外のファイルの領域がマップされるようになる可能性がありますが、現在のところそのような実装は存在しません。</target>
        </trans-unit>
        <trans-unit id="44cd764c270354ba3be43d380aabce5d77a1bc54" translate="yes" xml:space="preserve">
          <source>If more than one such fragment can be found, then fragments that contain a larger number of &quot;extra&quot; phrase matches are favored. The start of the selected text fragment may be moved a few tokens forward or backward to attempt to concentrate the phrase matches toward the center of the fragment.</source>
          <target state="translated">このようなフラグメントが 1 つ以上見つかった場合は、&quot;余分な&quot; フレーズマッチを多く含むフラグメントが優先されます。選択されたテキスト フラグメントの開始位置を数トークン前方または後方に移動して、フレーズマッチをフラグメントの中心に集中させることができます。</target>
        </trans-unit>
        <trans-unit id="26cb5f0f4343465953038f56daf635f7d45d2d33" translate="yes" xml:space="preserve">
          <source>If multi-threaded processing is enabled via the &lt;a href=&quot;pragma#pragma_threads&quot;&gt;PRAGMA threads&lt;/a&gt; setting, then sort operations will attempt to start helper threads when the amount of content to be sorted exceeds the minimum of the &lt;a href=&quot;pragma#pragma_cache_size&quot;&gt;cache_size&lt;/a&gt; and PMA Size determined by the &lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigpmasz&quot;&gt;SQLITE_CONFIG_PMASZ&lt;/a&gt; start-time option. This compile-time option sets the default value for the &lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigpmasz&quot;&gt;SQLITE_CONFIG_PMASZ&lt;/a&gt; start-time option. The default value is 250.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_threads&quot;&gt;PRAGMAスレッド&lt;/a&gt;設定を介してマルチスレッド処理が有効になっている場合、ソートするコンテンツの量が、&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigpmasz&quot;&gt;SQLITE_CONFIG_PMASZ&lt;/a&gt;開始時間オプションによって決定される&lt;a href=&quot;pragma#pragma_cache_size&quot;&gt;cache_size&lt;/a&gt;およびPMAサイズの最小値を超えると、ソート操作はヘルパースレッドを開始しようとします。このコンパイル時オプションは、&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigpmasz&quot;&gt;SQLITE_CONFIG_PMASZ&lt;/a&gt;開始時オプションのデフォルト値を設定します。デフォルト値は250です。</target>
        </trans-unit>
        <trans-unit id="180acf91f65a788cf692bf4d0ecd25eb3f41224e" translate="yes" xml:space="preserve">
          <source>If multiple commands are being executed against the same SQLite database connection at the same time, the autocommit is deferred until the very last command completes. For example, if a SELECT statement is being executed, the execution of the command will pause as each row of the result is returned. During this pause other INSERT, UPDATE, or DELETE commands can be executed against other tables in the database. But none of these changes will commit until the original SELECT statement finishes.</source>
          <target state="translated">同じ SQLite データベース接続に対して複数のコマンドが同時に実行されている場合、オートコミットは最後のコマンドが完了するまで延期されます。例えば、SELECT文が実行されている場合、結果の各行が返されるとコマンドの実行は一時停止します。この一時停止の間、データベース内の他のテーブルに対して他のINSERT、UPDATE、またはDELETEコマンドを実行することができます。しかし、元のSELECT文が終了するまで、これらの変更はコミットされません。</target>
        </trans-unit>
        <trans-unit id="02760b51331cbab337a4b4abdc9926115fb4b89f" translate="yes" xml:space="preserve">
          <source>If neither of these two query strategies can be used, all queries on FTS tables are implemented using a linear scan of the entire table. If the table contains large amounts of data, this may be an impractical approach (the first example on this page shows that a linear scan of 1.5 GB of data takes around 30 seconds using a modern PC).</source>
          <target state="translated">これら2つのクエリ戦略のどちらも使用できない場合、FTSテーブル上のすべてのクエリは、テーブル全体のリニアスキャンを使用して実装されます。テーブルに大量のデータが含まれている場合、これは非現実的なアプローチかもしれません(このページの最初の例では、最新のPCを使用して1.5GBのデータのリニアスキャンに約30秒かかることが示されています)。</target>
        </trans-unit>
        <trans-unit id="46d15914a8966b2144fb307d96a3896b83eea8f4" translate="yes" xml:space="preserve">
          <source>If no</source>
          <target state="translated">ない場合</target>
        </trans-unit>
        <trans-unit id="d80775017369d9f582b22c2b8463af70c053cb1a" translate="yes" xml:space="preserve">
          <source>If no ROWID is specified on the insert, or if the specified ROWID has a value of NULL, then an appropriate ROWID is created automatically. The usual algorithm is to give the newly created row a ROWID that is one larger than the largest ROWID in the table prior to the insert. If the table is initially empty, then a ROWID of 1 is used. If the largest ROWID is equal to the largest possible integer (9223372036854775807) then the database engine starts picking positive candidate ROWIDs at random until it finds one that is not previously used. If no unused ROWID can be found after a reasonable number of attempts, the insert operation fails with an &lt;a href=&quot;rescode#full&quot;&gt;SQLITE_FULL&lt;/a&gt; error. If no negative ROWID values are inserted explicitly, then automatically generated ROWID values will always be greater than zero.</source>
          <target state="translated">挿入でROWIDが指定されていない場合、または指定されたROWIDの値がNULLの場合、適切なROWIDが自動的に作成されます。通常のアルゴリズムは、新しく作成された行に、挿入前のテーブル内の最大のROWIDよりも1つ大きいROWIDを与えることです。テーブルが最初は空の場合、ROWID 1が使用されます。最大のROWIDが可能な最大の整数（9223372036854775807）と等しい場合、データベースエンジンは、以前に使用されていないROWIDが見つかるまでランダムに正の候補ROWIDの選択を開始します。妥当な回数試行しても未使用のROWIDが見つからない場合、挿入操作は&lt;a href=&quot;rescode#full&quot;&gt;SQLITE_FULL&lt;/a&gt;エラーで失敗します。負のROWID値が明示的に挿入されていない場合、自動生成されたROWID値は常にゼロより大きくなります。</target>
        </trans-unit>
        <trans-unit id="e2deadd7a9c793e3167a0e629e8b9b96ff70f176" translate="yes" xml:space="preserve">
          <source>If no error occurs, SQLITE_OK is returned.</source>
          <target state="translated">エラーが発生しない場合は、SQLITE_OK が返されます。</target>
        </trans-unit>
        <trans-unit id="8e5398b47308ea9ae66110e9bb05403692680696" translate="yes" xml:space="preserve">
          <source>If no error occurs, SQLITE_OK is returned. If an error does occur, an SQLite error code is returned. The values of the output variables may not be trusted in this case.</source>
          <target state="translated">エラーが発生しない場合は、SQLITE_OK が返されます。エラーが発生した場合は、SQLite エラーコードが返されます。この場合、出力変数の値は信頼できないかもしれません。</target>
        </trans-unit>
        <trans-unit id="b8dd386d2569bc5457aac9dba2010126d7a04d7d" translate="yes" xml:space="preserve">
          <source>If no master journal is involved, then a journal is hot if it exists and has a non-zero header and its corresponding database file does not have a RESERVED lock. If a master journal is named in the file journal, then the file journal is hot if its master journal exists and there is no RESERVED lock on the corresponding database file. It is important to understand when a journal is hot so the preceding rules will be repeated in bullets:</source>
          <target state="translated">マスター・ジャーナルが関与していない場合、ジャーナルが存在し、ゼロではないヘッダを持ち、対応するデータベース・ファイルにRESERVEDEDEDロックがない場合、ジャーナルはホットです。ファイル・ジャーナルにマスター・ジャーナルの名前が付けられている場合、そのマスター・ジャーナルが存在し、対応するデータベース・ファイルにRESERVEDEDEDロックがない場合、ファイル・ジャーナルはホットになります。ジャーナルがホットになるタイミングを理解することが重要なので、先行するルールを箇条書きで繰り返します。</target>
        </trans-unit>
        <trans-unit id="e9ec2ab3e066aabbb424ce10a035adf5f5270552" translate="yes" xml:space="preserve">
          <source>If no row with matching primary key values is found in the database, the conflict-handler function is invoked with &lt;a href=&quot;#SQLITE_CHANGESET_CONFLICT&quot;&gt;SQLITE_CHANGESET_NOTFOUND&lt;/a&gt; passed as the second argument.</source>
          <target state="translated">主キーの値が一致する行がデータベースで見つからない場合、競合ハンドラ関数が呼び出され、2番目の引数として&lt;a href=&quot;#SQLITE_CHANGESET_CONFLICT&quot;&gt;SQLITE_CHANGESET_NOTFOUND&lt;/a&gt;が渡されます。</target>
        </trans-unit>
        <trans-unit id="532395f09f545a6e9963ddaa843af136eeb8913b" translate="yes" xml:space="preserve">
          <source>If no row with matching primary key values is found in the database, the conflict-handler function is invoked with &lt;a href=&quot;c_changeset_conflict&quot;&gt;SQLITE_CHANGESET_NOTFOUND&lt;/a&gt; passed as the second argument.</source>
          <target state="translated">主キーの値が一致する行がデータベースで見つからない場合、競合ハンドラ関数が呼び出され、2番目の引数として&lt;a href=&quot;c_changeset_conflict&quot;&gt;SQLITE_CHANGESET_NOTFOUND&lt;/a&gt;が渡されます。</target>
        </trans-unit>
        <trans-unit id="5795a39454965fb21426bc7bb9e2147672f5e177" translate="yes" xml:space="preserve">
          <source>If none of the strings above occur anywhere in the type declaration, then the datatype is numeric. Note in particular that the datatype for columns with an empty type declaration is numeric.</source>
          <target state="translated">上記の文字列のいずれも型宣言のどこにも存在しない場合、データ型は数値です。特に、空の型宣言を持つ列のデータ型は数値であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5b0f610d4827d05770d8c3809730eca324b8d352" translate="yes" xml:space="preserve">
          <source>If offset iOffset is less than N bytes from the end of the BLOB, &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_ERROR&lt;/a&gt; is returned and no data is read. If N or iOffset is less than zero, &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_ERROR&lt;/a&gt; is returned and no data is read. The size of the blob (and hence the maximum value of N+iOffset) can be determined using the &lt;a href=&quot;#sqlite3_blob_bytes&quot;&gt;sqlite3_blob_bytes()&lt;/a&gt; interface.</source>
          <target state="translated">オフセットiOffsetがBLOBの終わりからNバイト未満の場合、&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_ERROR&lt;/a&gt;が返され、データは読み取られません。NまたはiOffsetがゼロ未満の場合、&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_ERROR&lt;/a&gt;が返され、データは読み取られません。blobのサイズ（およびN + iOffsetの最大値）は、&lt;a href=&quot;#sqlite3_blob_bytes&quot;&gt;sqlite3_blob_bytes（）&lt;/a&gt;インターフェースを使用して決定できます。</target>
        </trans-unit>
        <trans-unit id="bcc2dad992498753f10de4ee979d37a3e30daa67" translate="yes" xml:space="preserve">
          <source>If offset iOffset is less than N bytes from the end of the BLOB, &lt;a href=&quot;../rescode#error&quot;&gt;SQLITE_ERROR&lt;/a&gt; is returned and no data is read. If N or iOffset is less than zero, &lt;a href=&quot;../rescode#error&quot;&gt;SQLITE_ERROR&lt;/a&gt; is returned and no data is read. The size of the blob (and hence the maximum value of N+iOffset) can be determined using the &lt;a href=&quot;blob_bytes&quot;&gt;sqlite3_blob_bytes()&lt;/a&gt; interface.</source>
          <target state="translated">オフセットiOffsetがBLOBの終わりからNバイト未満の場合、&lt;a href=&quot;../rescode#error&quot;&gt;SQLITE_ERROR&lt;/a&gt;が返され、データは読み取られません。NまたはiOffsetがゼロ未満の場合、&lt;a href=&quot;../rescode#error&quot;&gt;SQLITE_ERROR&lt;/a&gt;が返され、データは読み取られません。blobのサイズ（およびN + iOffsetの最大値）は、&lt;a href=&quot;blob_bytes&quot;&gt;sqlite3_blob_bytes（）&lt;/a&gt;インターフェースを使用して決定できます。</target>
        </trans-unit>
        <trans-unit id="2e41507fc7f4f5f8ed7f1f9f86f50446d711b557" translate="yes" xml:space="preserve">
          <source>If one operand has INTEGER, REAL or NUMERIC affinity and the other operand has TEXT or BLOB or no affinity then NUMERIC affinity is applied to other operand.</source>
          <target state="translated">一方のオペランドが INTEGER,REAL,NUMERIC のいずれかにアフィニティがあり、もう一方のオペランドが TEXT,BLOB,またはアフィニティがない場合は、もう一方のオペランドに NUMERIC アフィニティが適用されます。</target>
        </trans-unit>
        <trans-unit id="316990fa091894331a5bfab80d20b7d7b8a1b17a" translate="yes" xml:space="preserve">
          <source>If one operand has TEXT affinity and the other has no affinity, then TEXT affinity is applied to the other operand.</source>
          <target state="translated">一方のオペランドがTEXT affinityを持ち、他方のオペランドがアフィニティを持たない場合、もう一方のオペランドにはTEXT affinityが適用されます。</target>
        </trans-unit>
        <trans-unit id="4a746052c71f7cca567e925f8568ed0089126b0e" translate="yes" xml:space="preserve">
          <source>If one or more of the column values in the row inserted by the new change differ from those in the row deleted by the existing change, the existing DELETE is replaced by an UPDATE within the changegroup. Otherwise, if the inserted row is exactly the same as the deleted row, the existing DELETE is simply discarded.</source>
          <target state="translated">新しい変更によって挿入された行の列の値が、既存の変更によって削除された行の列の値と異なる場合、既存のDELETEは changegroup内のUPDATEに置き換えられます。そうでなければ、挿入された行が削除された行と全く同じであれば、既存のDELETEは単に破棄されます。</target>
        </trans-unit>
        <trans-unit id="bbb903a0b2fa794db9f8ce5d76be92c6e8ad13da" translate="yes" xml:space="preserve">
          <source>If ownership of the pointer is passed into SQLite by providing a non-NULL D parameter to &lt;a href=&quot;c3ref/bind_blob&quot;&gt;sqlite3_bind_pointer()&lt;/a&gt; or &lt;a href=&quot;c3ref/result_blob&quot;&gt;sqlite3_result_pointer()&lt;/a&gt; then the ownership remains with SQLite until the object is destroyed. There is no way to transfer ownership out of SQLite and back into the application again.</source>
          <target state="translated">&lt;a href=&quot;c3ref/bind_blob&quot;&gt;sqlite3_bind_pointer（）&lt;/a&gt;または&lt;a href=&quot;c3ref/result_blob&quot;&gt;sqlite3_result_pointer（）に&lt;/a&gt; NULL以外のDパラメータを指定してポインタの所有権をSQLiteに渡すと、オブジェクトが破棄されるまでSQLiteの所有権が維持されます。所有権をSQLiteから転送してアプリケーションに戻す方法はありません。</target>
        </trans-unit>
        <trans-unit id="8503abe821374258f98c6ba5585311ca76bf6ece" translate="yes" xml:space="preserve">
          <source>If page 1 data is read as required by H35230, then the value of the</source>
          <target state="translated">H35230で要求されたように1ページ目のデータが読み込まれた場合には</target>
        </trans-unit>
        <trans-unit id="017b230392006407b67880da521173469a1b31d0" translate="yes" xml:space="preserve">
          <source>If parameter iCol is greater than or equal to the number of columns in the table, SQLITE_RANGE is returned. Or, if an error occurs (e.g. an OOM condition or IO error), an appropriate SQLite error code is returned.</source>
          <target state="translated">パラメータ iCol がテーブルの列数以上の場合、SQLITE_RANGE が返されます。あるいは、エラーが発生した場合 (OOM 条件や IO エラーなど)、適切な SQLite エラーコードが返されます。</target>
        </trans-unit>
        <trans-unit id="c373aca4c319795b45d2c1f0dc2245e638666f60" translate="yes" xml:space="preserve">
          <source>If parameter iCol is less than zero, set output variable *pnToken to the total number of tokens in the FTS5 table. Or, if iCol is non-negative but less than the number of columns in the table, return the total number of tokens in column iCol, considering all rows in the FTS5 table.</source>
          <target state="translated">パラメータ iCol がゼロよりも小さい場合、出力変数 *pnToken に FTS5 テーブル内のトークンの総数を設定します。あるいは、iCol が負ではなく、テーブルの列数よりも少ない場合、FTS5 テーブルのすべての行を考慮して、iCol 列のトークンの総数を返します。</target>
        </trans-unit>
        <trans-unit id="686ce79e8e629eea956f529880e81a4b9a406c30" translate="yes" xml:space="preserve">
          <source>If parameter iCol is less than zero, set output variable *pnToken to the total number of tokens in the current row. Or, if iCol is non-negative but less than the number of columns in the table, set *pnToken to the number of tokens in column iCol of the current row.</source>
          <target state="translated">パラメータ iCol が 0 より小さい場合、出力変数 *pnToken に現在の行のトークンの総数を設定します。あるいは、iCol が負ではなく、テーブルの列数よりも少ない場合、現在の行の iCol 列にあるトークンの数を *pnToken に設定します。</target>
        </trans-unit>
        <trans-unit id="88577f66da407130b6c2fbcee7dc6e283e2a74d7" translate="yes" xml:space="preserve">
          <source>If parameter zDb is NULL or points to a zero length string, then the specified operation is attempted on all WAL databases &lt;a href=&quot;../lang_attach&quot;&gt;attached&lt;/a&gt; to &lt;a href=&quot;sqlite3&quot;&gt;database connection&lt;/a&gt; db. In this case the values written to output parameters *pnLog and *pnCkpt are undefined. If an SQLITE_BUSY error is encountered when processing one or more of the attached WAL databases, the operation is still attempted on any remaining attached databases and SQLITE_BUSY is returned at the end. If any other error occurs while processing an attached database, processing is abandoned and the error code is returned to the caller immediately. If no error (SQLITE_BUSY or otherwise) is encountered while processing the attached databases, SQLITE_OK is returned.</source>
          <target state="translated">ZDBは、長さゼロの文字列にNULLまたはポイントであるパラメータ場合、指定された動作は全てWALデータベースで試行される&lt;a href=&quot;../lang_attach&quot;&gt;添付&lt;/a&gt;に&lt;a href=&quot;sqlite3&quot;&gt;データベース接続&lt;/a&gt; DB。この場合、出力パラメーター* pnLogおよび* pnCkptに書き込まれる値は未定義です。接続されている1つ以上のWALデータベースの処理中にSQLITE_BUSYエラーが発生した場合でも、残りの接続されているデータベースで操作が試行され、最後にSQLITE_BUSYが返されます。接続されたデータベースの処理中に他のエラーが発生した場合、処理は中止され、エラーコードが呼び出し元にすぐに返されます。接続されたデータベースの処理中にエラー（SQLITE_BUSYなど）が発生しなかった場合、SQLITE_OKが返されます。</target>
        </trans-unit>
        <trans-unit id="83e25a419f885754ebe2acacb05d4faa8a67cc7b" translate="yes" xml:space="preserve">
          <source>If parameter zDb is NULL or points to a zero length string, then the specified operation is attempted on all WAL databases &lt;a href=&quot;lang_attach&quot;&gt;attached&lt;/a&gt; to &lt;a href=&quot;#sqlite3&quot;&gt;database connection&lt;/a&gt; db. In this case the values written to output parameters *pnLog and *pnCkpt are undefined. If an SQLITE_BUSY error is encountered when processing one or more of the attached WAL databases, the operation is still attempted on any remaining attached databases and SQLITE_BUSY is returned at the end. If any other error occurs while processing an attached database, processing is abandoned and the error code is returned to the caller immediately. If no error (SQLITE_BUSY or otherwise) is encountered while processing the attached databases, SQLITE_OK is returned.</source>
          <target state="translated">ZDBは、長さゼロの文字列にNULLまたはポイントであるパラメータ場合、指定された動作は全てWALデータベースで試行される&lt;a href=&quot;lang_attach&quot;&gt;添付&lt;/a&gt;に&lt;a href=&quot;#sqlite3&quot;&gt;データベース接続&lt;/a&gt; DB。この場合、出力パラメーター* pnLogおよび* pnCkptに書き込まれる値は未定義です。接続されている1つ以上のWALデータベースの処理中にSQLITE_BUSYエラーが発生した場合でも、残りの接続されているデータベースで操作が試行され、最後にSQLITE_BUSYが返されます。接続されたデータベースの処理中に他のエラーが発生した場合、処理は中止され、エラーコードが呼び出し元にすぐに返されます。接続されたデータベースの処理中にエラー（SQLITE_BUSYなど）が発生しなかった場合、SQLITE_OKが返されます。</target>
        </trans-unit>
        <trans-unit id="d5e79777c8fc72c43d9863555c6ca53f645883e2" translate="yes" xml:space="preserve">
          <source>If pnLog is not NULL, then *pnLog is set to the total number of frames in the log file or to -1 if the checkpoint could not run because of an error or because the database is not in &lt;a href=&quot;../wal&quot;&gt;WAL mode&lt;/a&gt;. If pnCkpt is not NULL,then *pnCkpt is set to the total number of checkpointed frames in the log file (including any that were already checkpointed before the function was called) or to -1 if the checkpoint could not run due to an error or because the database is not in WAL mode. Note that upon successful completion of an SQLITE_CHECKPOINT_TRUNCATE, the log file will have been truncated to zero bytes and so both *pnLog and *pnCkpt will be set to zero.</source>
          <target state="translated">pnLogがNULLでない場合、* pnLogはログファイル内のフレームの総数に設定され&lt;a href=&quot;../wal&quot;&gt;ます&lt;/a&gt;。エラーまたはデータベースがWALモードでないためにチェックポイントを実行できなかった場合は、-1に設定されます。 pnCkptがNULLでない場合、* pnCkptは、ログファイル内のチェックポイントされたフレームの総数（関数が呼び出される前にすでにチェックポイントされたフレームを含む）に設定されます。エラーまたはデータベースがWALモードではないためです。 SQLITE_CHECKPOINT_TRUNCATEが正常に完了すると、ログファイルはゼロバイトに切り捨てられるため、* pnLogと* pnCkptの両方がゼロに設定されます。</target>
        </trans-unit>
        <trans-unit id="d64232e8314def054a53cca48179ce0748631809" translate="yes" xml:space="preserve">
          <source>If pnLog is not NULL, then *pnLog is set to the total number of frames in the log file or to -1 if the checkpoint could not run because of an error or because the database is not in &lt;a href=&quot;wal&quot;&gt;WAL mode&lt;/a&gt;. If pnCkpt is not NULL,then *pnCkpt is set to the total number of checkpointed frames in the log file (including any that were already checkpointed before the function was called) or to -1 if the checkpoint could not run due to an error or because the database is not in WAL mode. Note that upon successful completion of an SQLITE_CHECKPOINT_TRUNCATE, the log file will have been truncated to zero bytes and so both *pnLog and *pnCkpt will be set to zero.</source>
          <target state="translated">pnLogがNULLでない場合、* pnLogはログファイル内のフレームの総数に設定され&lt;a href=&quot;wal&quot;&gt;ます&lt;/a&gt;。エラーまたはデータベースがWALモードでないためにチェックポイントを実行できなかった場合は、-1に設定されます。 pnCkptがNULLでない場合、* pnCkptは、ログファイル内のチェックポイントされたフレームの総数（関数が呼び出される前にすでにチェックポイントされたフレームを含む）に設定されます。エラーまたはデータベースがWALモードではないためです。 SQLITE_CHECKPOINT_TRUNCATEが正常に完了すると、ログファイルはゼロバイトに切り捨てられるため、* pnLogと* pnCkptの両方がゼロに設定されます。</target>
        </trans-unit>
        <trans-unit id="41dd1bdb1c62f1c1fa9eb1f2a9f608c75f290fb8" translate="yes" xml:space="preserve">
          <source>If present, output a more verbose report for each query analyzed.</source>
          <target state="translated">存在する場合は、分析された各クエリについて、より詳細なレポートを出力します。</target>
        </trans-unit>
        <trans-unit id="dfd446567083de1e9ebdea0d18573182ac68033b" translate="yes" xml:space="preserve">
          <source>If pzTail is not NULL then *pzTail is made to point to the first byte past the end of the first SQL statement in zSql. These routines only compile the first statement in zSql, so *pzTail is left pointing to what remains uncompiled.</source>
          <target state="translated">pzTailがNULLでない場合、*pzTailはzSql内の最初のSQL文の最後から1バイト目を指すように作られます。これらのルーチンはzSql内の最初の文をコンパイルするだけなので、*pzTailはコンパイルされていない部分を指したままになります。</target>
        </trans-unit>
        <trans-unit id="daeeadf12f9cfe6f720cf3d4bdd4fb456397cc60" translate="yes" xml:space="preserve">
          <source>If r[P3] is zero or negative, that means there is no OFFSET and r[P2] is set to be the value of the LIMIT, r[P1].</source>
          <target state="translated">r[P3]が0または負の場合は、OFFSETがないことを意味し、r[P2]にはLIMITの値であるr[P1]が設定されています。</target>
        </trans-unit>
        <trans-unit id="6c50ebdc1c9d5314285662a0bf55da3e625fe7b5" translate="yes" xml:space="preserve">
          <source>If register P1 holds an integer convert it to a real value.</source>
          <target state="translated">レジスタP1が整数を保持している場合は、実数に変換します。</target>
        </trans-unit>
        <trans-unit id="24add31372893a82dd86705b4a5c1cbba71ea8ec" translate="yes" xml:space="preserve">
          <source>If required to truncate a database page from the end of the database file, the associated</source>
          <target state="translated">データベースファイルの末尾からデータベースページを切り詰める必要がある場合、関連する</target>
        </trans-unit>
        <trans-unit id="3939be1758da993faac1647e5a0238d1c34fd401" translate="yes" xml:space="preserve">
          <source>If running in &lt;a href=&quot;../sharedcache&quot;&gt;shared cache mode&lt;/a&gt;, the application must guarantee that the shared cache used by the destination database is not accessed while the backup is running. In practice this means that the application must guarantee that the disk file being backed up to is not accessed by any connection within the process, not just the specific connection that was passed to sqlite3_backup_init().</source>
          <target state="translated">&lt;a href=&quot;../sharedcache&quot;&gt;共有キャッシュモード&lt;/a&gt;で実行している場合、アプリケーションは、バックアップの実行中に宛先データベースが使用する共有キャッシュにアクセスしないことを保証する必要があります。実際には、これは、アプリケーションが、sqlite3_backup_init（）に渡された特定の接続だけでなく、プロセス内のどの接続からもアクセスされないことを保証する必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="91671997be6a1d6d67488b4259ddff989b286fc6" translate="yes" xml:space="preserve">
          <source>If running in &lt;a href=&quot;sharedcache&quot;&gt;shared cache mode&lt;/a&gt;, the application must guarantee that the shared cache used by the destination database is not accessed while the backup is running. In practice this means that the application must guarantee that the disk file being backed up to is not accessed by any connection within the process, not just the specific connection that was passed to sqlite3_backup_init().</source>
          <target state="translated">&lt;a href=&quot;sharedcache&quot;&gt;共有キャッシュモード&lt;/a&gt;で実行している場合、アプリケーションは、バックアップの実行中に宛先データベースが使用する共有キャッシュにアクセスしないことを保証する必要があります。実際には、これは、アプリケーションが、sqlite3_backup_init（）に渡された特定の接続だけでなく、プロセス内のどの接続からもアクセスされないことを保証する必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="813ffbbe7a10f587c30164e3c760a93f923869e0" translate="yes" xml:space="preserve">
          <source>If set to 1, then the default &lt;a href=&quot;pragma#pragma_locking_mode&quot;&gt;locking_mode&lt;/a&gt; is set to EXCLUSIVE. If omitted or set to 0 then the default &lt;a href=&quot;pragma#pragma_locking_mode&quot;&gt;locking_mode&lt;/a&gt; is NORMAL.</source>
          <target state="translated">1に設定すると、デフォルトの&lt;a href=&quot;pragma#pragma_locking_mode&quot;&gt;locking_mode&lt;/a&gt;はEXCLUSIVEに設定されます。省略した場合、または0に設定した場合、デフォルトの&lt;a href=&quot;pragma#pragma_locking_mode&quot;&gt;locking_mode&lt;/a&gt;はNORMALです。</target>
        </trans-unit>
        <trans-unit id="8dd726c58400329230cb7ffbb590015b7fc272ad" translate="yes" xml:space="preserve">
          <source>If single-thread mode has not been selected at compile-time or start-time, then individual database connections can be created as either multi-thread or serialized. It is not possible to downgrade an individual database connection to single-thread mode. Nor is it possible to escalate an individual database connection if the compile-time or start-time mode is single-thread.</source>
          <target state="translated">コンパイル時または起動時にシングルスレッドモードが選択されていない場合、個々のデータベース接続はマルチスレッドまたはシリアライズのいずれかで作成することができます。個々のデータベース接続をシングルスレッドモードにダウングレードすることはできません。また、コンパイル時または開始時のモードがシングルスレッドの場合、個々のデータベース接続をエスカレートすることもできません。</target>
        </trans-unit>
        <trans-unit id="297fbafe0f12618a3892916307ed5e193747b9f8" translate="yes" xml:space="preserve">
          <source>If single-thread mode is selected at compile-time, then critical mutexing logic is omitted from the build and it is impossible to enable either multi-thread or serialized modes at start-time or run-time.</source>
          <target state="translated">コンパイル時にシングルスレッドモードが選択されている場合、重要なミューテックスロジックがビルドから省略され、起動時や実行時にマルチスレッドモードやシリアライズモードを有効にすることはできません。</target>
        </trans-unit>
        <trans-unit id="bc15b1addaaecdb30cb643e4374238a5f983835b" translate="yes" xml:space="preserve">
          <source>If some future version of SQLite adds new ALTER TABLE capabilities, those capabilities will very likely use one of the two procedures outlined above.</source>
          <target state="translated">将来のバージョンのSQLiteに新しいALTER TABLE機能が追加された場合、その機能は上で説明した2つのプロシージャのうちの1つを使用することになるでしょう。</target>
        </trans-unit>
        <trans-unit id="a247ea4cd25be5ebc1e3446b36da4e3d6e48aaf1" translate="yes" xml:space="preserve">
          <source>If some other error occurs (e.g. an OOM condition), an SQLite error code is returned and *ppValue is set to NULL.</source>
          <target state="translated">その他のエラーが発生した場合(OOM条件など)、SQLiteエラーコードが返され、*ppValueがNULLに設定されます。</target>
        </trans-unit>
        <trans-unit id="e277177a9a5ad8b0a8ae8ddf4692ab5b1cd48938" translate="yes" xml:space="preserve">
          <source>If specified, interpret all relative paths as relative to DIR, instead of the current working directory.</source>
          <target state="translated">指定された場合、すべての相対パスを、カレントの作業ディレクトリではなく、DIRに対する相対パスとして解釈します。</target>
        </trans-unit>
        <trans-unit id="c10bbb5923a9a453a504ada2ef95db3b448455c2" translate="yes" xml:space="preserve">
          <source>If specified, use file FILE as the archive. Otherwise, assume that the current &quot;main&quot; database is the archive to be operated on.</source>
          <target state="translated">指定された場合、アーカイブとしてFILEファイルを使用します。そうでなければ、現在の &quot;メイン &quot;データベースが操作対象のアーカイブであると仮定します。</target>
        </trans-unit>
        <trans-unit id="781f0c1e44a6d5e4cbc382e01b2a73157527db47" translate="yes" xml:space="preserve">
          <source>If sqlite3_backup_step() cannot obtain a required file-system lock, then the &lt;a href=&quot;#sqlite3_busy_handler&quot;&gt;busy-handler function&lt;/a&gt; is invoked (if one is specified). If the busy-handler returns non-zero before the lock is available, then &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_BUSY&lt;/a&gt; is returned to the caller. In this case the call to sqlite3_backup_step() can be retried later. If the source &lt;a href=&quot;#sqlite3&quot;&gt;database connection&lt;/a&gt; is being used to write to the source database when sqlite3_backup_step() is called, then &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_LOCKED&lt;/a&gt; is returned immediately. Again, in this case the call to sqlite3_backup_step() can be retried later on. If &lt;a href=&quot;#SQLITE_ABORT_ROLLBACK&quot;&gt;SQLITE_IOERR_XXX&lt;/a&gt;, &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_NOMEM&lt;/a&gt;, or &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_READONLY&lt;/a&gt; is returned, then there is no point in retrying the call to sqlite3_backup_step(). These errors are considered fatal. The application must accept that the backup operation has failed and pass the backup operation handle to the sqlite3_backup_finish() to release associated resources.</source>
          <target state="translated">sqlite3_backup_step（）が必要なファイルシステムロックを取得できない場合、&lt;a href=&quot;#sqlite3_busy_handler&quot;&gt;busy-handler関数&lt;/a&gt;が呼び出されます（指定されている場合）。ロックが使用可能になる前にbusy-handlerがゼロ以外の値を返した場合、&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_BUSY&lt;/a&gt;が呼び出し元に返されます。この場合、sqlite3_backup_step（）の呼び出しは後で再試行できます。sqlite3_backup_step（）が呼び出されたときにソースデータベースへの書き込みにソース&lt;a href=&quot;#sqlite3&quot;&gt;データベース接続&lt;/a&gt;が使用されている場合、&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_LOCKED&lt;/a&gt;がすぐに返されます。この場合も、sqlite3_backup_step（）の呼び出しは後で再試行できます。もし&lt;a href=&quot;#SQLITE_ABORT_ROLLBACK&quot;&gt;SQLITE_IOERR_XXX&lt;/a&gt;、&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_NOMEM&lt;/a&gt;、または&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_READONLY&lt;/a&gt;が返された場合、sqlite3_backup_step（）の呼び出しを再試行しても意味がありません。これらのエラーは致命的と見なされます。アプリケーションは、バックアップ操作が失敗したことを受け入れ、バックアップ操作ハンドルをsqlite3_backup_finish（）に渡して、関連するリソースを解放する必要があります。</target>
        </trans-unit>
        <trans-unit id="97664464d7946d7d0d5f82dbee0724dc2319f847" translate="yes" xml:space="preserve">
          <source>If sqlite3_backup_step() cannot obtain a required file-system lock, then the &lt;a href=&quot;busy_handler&quot;&gt;busy-handler function&lt;/a&gt; is invoked (if one is specified). If the busy-handler returns non-zero before the lock is available, then &lt;a href=&quot;../rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt; is returned to the caller. In this case the call to sqlite3_backup_step() can be retried later. If the source &lt;a href=&quot;sqlite3&quot;&gt;database connection&lt;/a&gt; is being used to write to the source database when sqlite3_backup_step() is called, then &lt;a href=&quot;../rescode#locked&quot;&gt;SQLITE_LOCKED&lt;/a&gt; is returned immediately. Again, in this case the call to sqlite3_backup_step() can be retried later on. If &lt;a href=&quot;../rescode#ioerr_access&quot;&gt;SQLITE_IOERR_XXX&lt;/a&gt;, &lt;a href=&quot;../rescode#nomem&quot;&gt;SQLITE_NOMEM&lt;/a&gt;, or &lt;a href=&quot;../rescode#readonly&quot;&gt;SQLITE_READONLY&lt;/a&gt; is returned, then there is no point in retrying the call to sqlite3_backup_step(). These errors are considered fatal. The application must accept that the backup operation has failed and pass the backup operation handle to the sqlite3_backup_finish() to release associated resources.</source>
          <target state="translated">sqlite3_backup_step（）が必要なファイルシステムロックを取得できない場合、&lt;a href=&quot;busy_handler&quot;&gt;busy-handler関数&lt;/a&gt;が呼び出されます（指定されている場合）。ロックが使用可能になる前にbusy-handlerがゼロ以外の値を返した場合、&lt;a href=&quot;../rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt;が呼び出し元に返されます。この場合、sqlite3_backup_step（）の呼び出しは後で再試行できます。sqlite3_backup_step（）が呼び出されたときにソースデータベースへの書き込みにソース&lt;a href=&quot;sqlite3&quot;&gt;データベース接続&lt;/a&gt;が使用されている場合、&lt;a href=&quot;../rescode#locked&quot;&gt;SQLITE_LOCKED&lt;/a&gt;がすぐに返されます。この場合も、sqlite3_backup_step（）の呼び出しは後で再試行できます。もし&lt;a href=&quot;../rescode#ioerr_access&quot;&gt;SQLITE_IOERR_XXX&lt;/a&gt;、&lt;a href=&quot;../rescode#nomem&quot;&gt;SQLITE_NOMEM&lt;/a&gt;、または&lt;a href=&quot;../rescode#readonly&quot;&gt;SQLITE_READONLY&lt;/a&gt;が返された場合、sqlite3_backup_step（）の呼び出しを再試行しても意味がありません。これらのエラーは致命的と見なされます。アプリケーションは、バックアップ操作が失敗したことを受け入れ、バックアップ操作ハンドルをsqlite3_backup_finish（）に渡して、関連するリソースを解放する必要があります。</target>
        </trans-unit>
        <trans-unit id="416d4d371ff0cd3598d43dc30a0639c13aed646a" translate="yes" xml:space="preserve">
          <source>If sqlite3_deserialize(D,S,P,N,M,F) fails for any reason and if the SQLITE_DESERIALIZE_FREEONCLOSE bit is set in argument F, then &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_free()&lt;/a&gt; is invoked on argument P prior to returning.</source>
          <target state="translated">sqlite3_deserialize（D、S、P、N、M、F）が何らかの理由で失敗し、SQLITE_DESERIALIZE_FREEONCLOSEビットが引数Fで設定されている場合、戻る前に引数Pで&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_free（）&lt;/a&gt;が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="cec31d664476098d45397cb4e64acc667d8c0501" translate="yes" xml:space="preserve">
          <source>If sqlite3_deserialize(D,S,P,N,M,F) fails for any reason and if the SQLITE_DESERIALIZE_FREEONCLOSE bit is set in argument F, then &lt;a href=&quot;free&quot;&gt;sqlite3_free()&lt;/a&gt; is invoked on argument P prior to returning.</source>
          <target state="translated">sqlite3_deserialize（D、S、P、N、M、F）が何らかの理由で失敗し、SQLITE_DESERIALIZE_FREEONCLOSEビットが引数Fで設定されている場合、戻る前に引数Pで&lt;a href=&quot;free&quot;&gt;sqlite3_free（）&lt;/a&gt;が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="aeea9650fe067179f154dc4c0a23753bc2cbcaea" translate="yes" xml:space="preserve">
          <source>If sqlite3_malloc() fails during the processing of either routine (for example during a conversion from UTF-8 to UTF-16) then a NULL pointer is returned.</source>
          <target state="translated">どちらかのルーチンの処理中(例えばUTF-8からUTF-16への変換中など)にsqlite3_malloc()が失敗した場合、NULLポインタが返されます。</target>
        </trans-unit>
        <trans-unit id="cac2f36b365eeaba945df88aa0f1da7631750708" translate="yes" xml:space="preserve">
          <source>If sqlite3_unlock_notify() is called in a multi-threaded application, there is a chance that the blocking connection will have already concluded its transaction by the time sqlite3_unlock_notify() is invoked. If this happens, then the specified callback is invoked immediately, from within the call to sqlite3_unlock_notify().</source>
          <target state="translated">マルチスレッド・アプリケーションでsqlite3_unlock_notify()が呼び出された場合、sqlite3_unlock_notify()が呼び出されるまでにブロッキング接続が既にトランザクションを終了している可能性があります。この場合、指定されたコールバックはsqlite3_unlock_notify()の呼び出しの中から直ちに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d3dbf8613ad9cf5c029072fff340e1a64123138d" translate="yes" xml:space="preserve">
          <source>If state database S does not exist when sqlite3rbu_vacuum() is invoked, it is automatically created and populated with the single table used to store the state of an RBU vacuum - &quot;rbu_state&quot;. If an ongoing RBU vacuum is suspended, this table is populated with state data. The next time sqlite3rbu_vacuum() is called with the same S parameter, it detects this data and attempts to resume the suspended vacuum operation. When an RBU vacuum operation is completed or encounters an error, RBU automatically deletes the contents of the rbu_state table. In this case, the next call to sqlite3rbu_vacuum() starts an entirely new vacuum operation from scratch.</source>
          <target state="translated">sqlite3rbu_vacuum()が呼び出された時に状態データベースSが存在しない場合、自動的に作成され、RBUバキュームの状態を格納するために使用される単一のテーブル &quot;rbu_state &quot;で生成されます。進行中のRBUバキュームが中断された場合、このテーブルには状態データが格納されます。次にsqlite3rbu_vacuum()が同じSパラメータで呼び出された時、このデータを検出し、中断していた真空操作を再開しようとします。RBUのバキューム操作が完了したとき、またはエラーに遭遇したとき、RBUは自動的にrbu_stateテーブルの内容を削除します。この場合、次のsqlite3rbu_vacuum()の呼び出しは、全く新しいバキューム操作をゼロから開始します。</target>
        </trans-unit>
        <trans-unit id="9b583cb7d9f730fb38a0d4c0658d985458639786" translate="yes" xml:space="preserve">
          <source>If step 1 was successful, an attempt is made to read the</source>
          <target state="translated">ステップ1が成功した場合は</target>
        </trans-unit>
        <trans-unit id="95b4922965cf280511e54a7e6a975a3cf943cead" translate="yes" xml:space="preserve">
          <source>If successful, a pointer to a buffer containing the inverted changeset is stored in *ppOut, the size of the same buffer is stored in *pnOut, and SQLITE_OK is returned. If an error occurs, both *pnOut and *ppOut are zeroed and an SQLite error code returned.</source>
          <target state="translated">成功した場合、転置されたチェンジセットを含むバッファへのポインタが *ppOut に格納され、同じバッファのサイズが *pnOut に格納され、SQLITE_OK が返されます。エラーが発生した場合、*pnOut と *ppOut の両方がゼロになり、SQLite のエラーコードが返されます。</target>
        </trans-unit>
        <trans-unit id="2d2a26797b61cd3892af9cbfe95715fb203e64ff" translate="yes" xml:space="preserve">
          <source>If successful, this function returns SQLITE_OK and populates (*pp) with a pointer to a new sqlite3_changegroup object before returning. The caller should eventually free the returned object using a call to sqlite3changegroup_delete(). If an error occurs, an SQLite error code (i.e. SQLITE_NOMEM) is returned and *pp is set to NULL.</source>
          <target state="translated">成功した場合、この関数はSQLITE_OKを返し、返す前に新しいsqlite3_changegroupオブジェクトへのポインタを(*pp)に格納します。呼び出し元は最終的にsqlite3changegroup_delete()を呼び出して返されたオブジェクトを解放しなければなりません。エラーが発生した場合、SQLiteエラーコード(すなわちSQLITE_NOMEM)が返され、*ppはNULLに設定されます。</target>
        </trans-unit>
        <trans-unit id="25d0330551ddd2fa16bdd016ab08a130f3f7634f" translate="yes" xml:space="preserve">
          <source>If successful, this function sets *ppValue to point to a protected sqlite3_value object containing the iVal'th value from the &quot;conflicting row&quot; associated with the current conflict-handler callback and returns SQLITE_OK.</source>
          <target state="translated">成功した場合、この関数は、現在のコンフリクトハンドラコールバックに関連付けられた &quot;競合する行 &quot;のiVal'th値を含む、保護されたsqlite3_valueオブジェクトを指すように*ppValueを設定し、SQLITE_OKを返します。</target>
        </trans-unit>
        <trans-unit id="fa261183bb429d753dbe1a765227df127f987423" translate="yes" xml:space="preserve">
          <source>If successful, this function sets *ppValue to point to a protected sqlite3_value object containing the iVal'th value from the vector of new row values stored as part of the UPDATE or INSERT change and returns SQLITE_OK. If the change is an UPDATE and does not include a new value for the requested column, *ppValue is set to NULL and SQLITE_OK returned. The name of the function comes from the fact that this is similar to the &quot;new.*&quot; columns available to update or delete triggers.</source>
          <target state="translated">成功した場合、この関数は*ppValueをUPDATEまたはINSERTの変更の一部として格納された新しい行の値のベクトルからiVal'thの値を含む保護されたsqlite3_valueオブジェクトを指すように設定し、SQLITE_OKを返します。変更がUPDATEで、要求された列の新しい値が含まれていない場合、*ppValueはNULLに設定され、SQLITE_OKが返されます。この関数の名前は、これが更新や削除のトリガーで利用可能な &quot;new.*&quot;カラムに似ていることに由来しています。</target>
        </trans-unit>
        <trans-unit id="8a04e15ae358710d2ad80e6a9a9c13bb73faba6b" translate="yes" xml:space="preserve">
          <source>If successful, this function sets *ppValue to point to a protected sqlite3_value object containing the iVal'th value from the vector of original row values stored as part of the UPDATE or DELETE change and returns SQLITE_OK. The name of the function comes from the fact that this is similar to the &quot;old.*&quot; columns available to update or delete triggers.</source>
          <target state="translated">成功した場合、この関数は*ppValueをUPDATEまたはDELETE変更の一部として格納された元の行の値のベクトルからiVal'thの値を含む保護されたsqlite3_valueオブジェクトを指すように設定し、SQLITE_OKを返します。この関数の名前は、これが更新や削除のトリガーで利用可能な &quot;old.*&quot;カラムに似ていることに由来しています。</target>
        </trans-unit>
        <trans-unit id="5f323dfa9043b9e0668bb0be64be173c0214f5b4" translate="yes" xml:space="preserve">
          <source>If successful, xCreateFunction() returns SQLITE_OK. Otherwise, it returns an SQLite error code. In this case the xDestroy function is &lt;b&gt;not&lt;/b&gt; invoked.</source>
          <target state="translated">正常に実行された場合、xCreateFunction（）はSQLITE_OKを戻します。それ以外の場合は、SQLiteエラーコードを返します。この場合、xDestroy関数は呼び出され&lt;b&gt;ません&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="0c5491699943eedd46aaea7dc769af1705417f26" translate="yes" xml:space="preserve">
          <source>If successful, xCreateTokenizer() returns SQLITE_OK. Otherwise, it returns an SQLite error code. In this case the xDestroy function is &lt;b&gt;not&lt;/b&gt; invoked.</source>
          <target state="translated">正常に実行された場合、xCreateTokenizer（）はSQLITE_OKを戻します。それ以外の場合は、SQLiteエラーコードを返します。この場合、xDestroy関数は呼び出され&lt;b&gt;ません&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="128b9faf8d31130c2470e9c58674eddd1a9c50a3" translate="yes" xml:space="preserve">
          <source>If such a text fragment can be found, it is returned with the following modifications:</source>
          <target state="translated">そのようなテキストフラグメントが見つかった場合は、以下のように修正して返されます。</target>
        </trans-unit>
        <trans-unit id="3d9b7696c9777c3fdef5f5f1690ef14ee23382d9" translate="yes" xml:space="preserve">
          <source>If the</source>
          <target state="translated">の場合は</target>
        </trans-unit>
        <trans-unit id="2b388f659392c2a3dcc9c7c0db559bd88cf8ff51" translate="yes" xml:space="preserve">
          <source>If the &quot;.output&quot; or &quot;.once&quot; commands have a &quot;-x&quot; argument, that causes them to accumulate output as Comma-Separated-Values (CSV) in a temporary file, then invoke the default system utility for viewing CSV files (usually a spreadsheet program) on the result. This is a quick way of sending the result of a query to a spreadsheet for easy viewing:</source>
          <target state="translated">output &quot;または &quot;once &quot;コマンドに&quot;-x &quot;引数がある場合、一時ファイルにカンマ区切り値(CSV)として出力を蓄積し、その結果にCSVファイルを表示するためのデフォルトのシステムユーティリティ(通常はスプレッドシートプログラム)を起動します。これは、クエリの結果をスプレッドシートに送信して簡単に表示するための手っ取り早い方法です。</target>
        </trans-unit>
        <trans-unit id="b4746f29b85def95350d80c6bb29ef47dac1ca98" translate="yes" xml:space="preserve">
          <source>If the &quot;.output&quot; or &quot;.once&quot; commands have an argument of &quot;-e&quot; then output is collected into a temporary file and the system text editor is invoked on that text file. Thus, the command &quot;.once -e&quot; achieves the same result as &quot;.once '|open -f'&quot; but with the benefit of being portable across all systems.</source>
          <target state="translated">もし &quot;.output&quot; または &quot;.once&quot; コマンドの引数が &quot;-e&quot; の場合、出力は一時ファイルに集められ、そのテキストファイル上でシステムのテキストエディタが起動されます。このように、&quot;.once -e&quot; コマンドは &quot;.once '|open -f'&quot; と同じ結果を得ることができますが、すべてのシステムで移植性があるという利点があります。</target>
        </trans-unit>
        <trans-unit id="3daa35758772f94d91f7bd83ab5f9ceb0840b773" translate="yes" xml:space="preserve">
          <source>If the &quot;.recover&quot; command recovers one or more rows that it cannot attribute to any database table, the output script creates a &quot;lost_and_found&quot; table to store the orphaned rows. The schema of the lost_and_found table is as follows:</source>
          <target state="translated">.recover &quot;コマンドが、どのデータベーステーブルにも属性を付与できない1つ以上の行を回復した場合、出力スクリプトは、孤児となった行を格納するための &quot;lost_and_found &quot;テーブルを作成する。lost_and_foundテーブルのスキーマは以下の通りである。</target>
        </trans-unit>
        <trans-unit id="1ddf7f749d8128e48a3bd895bfea3bcecad29d40" translate="yes" xml:space="preserve">
          <source>If the &quot;CREATE VIRTUAL TABLE&quot; statement specifies module FTS4 (not FTS3), then special directives - FTS4 options - similar to the &quot;tokenize=*&quot; option may also appear in place of column names. An FTS4 option consists of the option name, followed by an &quot;=&quot; character, followed by the option value. The option value may optionally be enclosed in single or double quotes, with embedded quote characters escaped in the same way as for SQL literals. There may not be whitespace on either side of the &quot;=&quot; character. For example, to create an FTS4 table with the value of option &quot;matchinfo&quot; set to &quot;fts3&quot;:</source>
          <target state="translated">CREATE VIRTUAL TABLE&quot; ステートメントがモジュール FTS4 (FTS3ではない)を指定している場合、&quot;tokenize=*&quot; オプションに似た特別なディレクティブ-FTS4 オプション-が列名の代わりに現れることがあります。FTS4オプションは、オプション名の後に&quot;=&quot;文字が続き、その後にオプション値が続く。オプション値は、一重引用符または二重引用符で囲むことができ、埋め込まれた引用符は、SQLリテラルの場合と同様にエスケープされる。また、「=」文字の両側には空白を入れてはいけない。例えば、オプション &quot;matchinfo &quot;の値を &quot;fts3 &quot;に設定したFTS4テーブルを作成する場合。</target>
        </trans-unit>
        <trans-unit id="77546b3dd108217dd30ccb1edbd6835383de8523" translate="yes" xml:space="preserve">
          <source>If the &quot;TEMP&quot; or &quot;TEMPORARY&quot; keyword occurs in between &quot;CREATE&quot; and &quot;VIEW&quot; then the view that is created is only visible to the &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; that created it and is automatically deleted when the database connection is closed.</source>
          <target state="translated">「TEMP」または「TEMPORARY」キーワードが「CREATE」と「VIEW」の間にある場合、作成されたビューはそれを作成した&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続&lt;/a&gt;でのみ表示され、データベース接続が閉じられると自動的に削除されます。</target>
        </trans-unit>
        <trans-unit id="e15eb31b4ca840d3439ac476fb29777eeeba453d" translate="yes" xml:space="preserve">
          <source>If the &quot;col&quot; column contains the value '*', then this column contains the number of rows of the FTS table that contain at least one instance of the term (in any column). If col contains an integer value, then this column contains the number of rows of the FTS table that contain at least one instance of the term in the column identified by the col value. As usual, the columns of the FTS table are numbered from left to right, starting with zero.</source>
          <target state="translated">col」列に値「*」が含まれている場合、この列には、(どの列でも)その用語の少なくとも1つのインスタンスを含むFTSテーブルの行数が含まれる。col が整数値を含む場合、この列には、col の値で識別される列に用語の少なくとも一つのインスタンスを含む FTS テーブルの行の数が含まれる。通常通り、FTS テーブルの列は左から右へ、ゼロから始まる番号が付けられます。</target>
        </trans-unit>
        <trans-unit id="be0668162f080a59b68a89416d5dac39edc657f3" translate="yes" xml:space="preserve">
          <source>If the &quot;col&quot; column contains the value '*', then this column contains the total number of instances of the term in all rows of the FTS table (in any column). Otherwise, if col contains an integer value, then this column contains the total number of instances of the term that appear in the FTS table column identified by the col value.</source>
          <target state="translated">col」列が値「*」を含む場合、この列には、FTSテーブルの全行(任意の列)のタームのインスタンスの合計数が含まれる。そうでなければ、colが整数値を含む場合、この列には、colの値によって識別されるFTSテーブルの列に現れるタームのインスタンスの合計数が含まれる。</target>
        </trans-unit>
        <trans-unit id="f99db6ea5060e99b5afec54227ba46139ccc5e7b" translate="yes" xml:space="preserve">
          <source>If the &quot;schema&quot; is omitted, it defaults to the primary database (usually called 'main', unless renamed using &lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigmaindbname&quot;&gt;SQLITE_DBCONFIG_MAINDBNAME&lt;/a&gt;). Hence, the following two queries are normally equivalent:</source>
          <target state="translated">「スキーマ」を省略すると、デフォルトでプライマリデータベースになります（&lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigmaindbname&quot;&gt;SQLITE_DBCONFIG_MAINDBNAME&lt;/a&gt;を使用して名前を変更しない限り、通常は「メイン」と呼ばれます）。したがって、次の2つのクエリは通常同等です。</target>
        </trans-unit>
        <trans-unit id="9f6d4e5f223a311e53834767137885dbc0d539c8" translate="yes" xml:space="preserve">
          <source>If the &quot;unordered&quot; argument is present, then the query planner assumes that the index is unordered and will not use the index for a range query or for sorting.</source>
          <target state="translated">unordered &quot;引数が存在する場合、クエリプランナはインデックスが順序付けられていないと仮定し、範囲問い合わせやソートにはインデックスを使用しません。</target>
        </trans-unit>
        <trans-unit id="8751a71ff20c3c0ca54298560e238a1beb92d451" translate="yes" xml:space="preserve">
          <source>If the $bigstring variable has both a string and a &quot;bytearray&quot; representation, then TCL inserts the value as a string. If it has only a &quot;bytearray&quot; representation, then the value is inserted as a BLOB. To force a value to be inserted as a BLOB even if it also has a text representation, use a &quot;@&quot; character to in place of the &quot;$&quot;. Like this:</source>
          <target state="translated">BIGSTRING 変数が文字列とバイト配列の両方の表現を持つ場合、TCL はその値を文字列として挿入します。バイト配列」表現のみを持つ場合は、値は BLOB として挿入されます。値がテキスト表現でも BLOB として挿入されるようにするには、&quot;$&quot; の代わりに &quot;@&quot; 文字を使用します。このようにします。</target>
        </trans-unit>
        <trans-unit id="0c3adca9fee497a14e9991dafc4be56e1a6347bb" translate="yes" xml:space="preserve">
          <source>If the %Q formatting option is used instead of %q, like this:</source>
          <target state="translated">q の代わりに %Q フォーマットオプションが使用されている場合、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="0d1bfccef6e7ea95fdaf4eab71d72c15d5446d0c" translate="yes" xml:space="preserve">
          <source>If the --vtab option is passed to sqldiff.exe, then it ignores all underlying shadow tables belonging to an FTS3, FTS5 or rtree virtual table and instead includes the virtual table differences directly.</source>
          <target state="translated">sqldiff.exeに--vtabオプションが渡された場合、FTS3、FTS5、またはrtree仮想テーブルに属するすべてのシャドウテーブルを無視し、代わりに仮想テーブルの差分を直接含めます。</target>
        </trans-unit>
        <trans-unit id="07a5d9f4ebefe616bbce2e1699c303419392f340" translate="yes" xml:space="preserve">
          <source>If the 2nd parameter actually contains two or more statements of SQL, only the first statement is compiled. (This is different from the behavior of &lt;b&gt;sqlite_exec&lt;/b&gt; which executes all SQL statements in its input string.) The 3rd parameter to &lt;b&gt;sqlite_compile&lt;/b&gt; is made to point to the first character beyond the end of the first statement of SQL in the input. If the 2nd parameter contains only a single SQL statement, then the 3rd parameter will be made to point to the '\000' terminator at the end of the 2nd parameter.</source>
          <target state="translated">2番目のパラメーターに実際にSQLの2つ以上のステートメントが含まれている場合、最初のステートメントのみがコンパイルされます。（これは、入力文字列内のすべてのSQLステートメントを実行する&lt;b&gt;sqlite_exec&lt;/b&gt;の動作とは異なります。）&lt;b&gt;sqlite_compile&lt;/b&gt;の3番目のパラメーターは、入力内のSQLの最初のステートメントの終わりを超える最初の文字を指すように作成されます。2番目のパラメーターに単一のSQLステートメントのみが含まれている場合、3番目のパラメーターは、2番目のパラメーターの末尾にある '\ 000'ターミネーターを指すように作成されます。</target>
        </trans-unit>
        <trans-unit id="ace6723edaabac46df7516bfbb37cb232ed631b4" translate="yes" xml:space="preserve">
          <source>If the 2nd parameter to sqlite3_exec() is a NULL pointer, a pointer to an empty string, or a pointer that contains only whitespace and/or SQL comments, then no SQL statements are evaluated and the database is not changed.</source>
          <target state="translated">sqlite3_exec()の2番目のパラメータがNULLポインタ、空の文字列へのポインタ、空白文字やSQLコメントのみを含むポインタの場合、SQL文は評価されず、データベースは変更されません。</target>
        </trans-unit>
        <trans-unit id="c83d25737a958db458bb466d715ef1df1385742b" translate="yes" xml:space="preserve">
          <source>If the 3rd parameter to sqlite3_open_v2() is not one of the combinations shown above optionally combined with other &lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_* bits&lt;/a&gt; then the behavior is undefined.</source>
          <target state="translated">sqlite3_open_v2（）の3番目のパラメーターが上記の組み合わせの1つではなく、オプションで他の&lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_ *ビット&lt;/a&gt;と組み合わせられている場合、動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="a1fab614cdb3090bc486b1f93bb2bcc48a6de130" translate="yes" xml:space="preserve">
          <source>If the 3rd parameter to sqlite3_open_v2() is not one of the combinations shown above optionally combined with other &lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_* bits&lt;/a&gt; then the behavior is undefined.</source>
          <target state="translated">sqlite3_open_v2（）の3番目のパラメーターが上記の組み合わせの1つではなく、オプションで他の&lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_ *ビット&lt;/a&gt;と組み合わせられている場合、動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="34c05ef78416159159b83c40de507c749c65acd9" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_NOMUTEX&lt;/a&gt; flag is set, then the database connection opens in the multi-thread &lt;a href=&quot;threadsafe&quot;&gt;threading mode&lt;/a&gt; as long as the single-thread mode has not been set at compile-time or start-time. If the &lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_FULLMUTEX&lt;/a&gt; flag is set then the database connection opens in the serialized &lt;a href=&quot;threadsafe&quot;&gt;threading mode&lt;/a&gt; unless single-thread was previously selected at compile-time or start-time. The &lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_SHAREDCACHE&lt;/a&gt; flag causes the database connection to be eligible to use &lt;a href=&quot;sharedcache&quot;&gt;shared cache mode&lt;/a&gt;, regardless of whether or not shared cache is enabled using &lt;a href=&quot;#sqlite3_enable_shared_cache&quot;&gt;sqlite3_enable_shared_cache()&lt;/a&gt;. The &lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_PRIVATECACHE&lt;/a&gt; flag causes the database connection to not participate in &lt;a href=&quot;sharedcache&quot;&gt;shared cache mode&lt;/a&gt; even if it is enabled.</source>
          <target state="translated">&lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_NOMUTEX&lt;/a&gt;フラグが設定されている場合、シングルスレッドモードがコンパイル時または開始時に設定されていない限り、データベース接続はマルチスレッド&lt;a href=&quot;threadsafe&quot;&gt;スレッドモード&lt;/a&gt;で開きます。&lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_FULLMUTEX&lt;/a&gt;フラグが設定されている場合、コンパイル時または開始時にシングルスレッドが以前に選択されていなければ、データベース接続はシリアル&lt;a href=&quot;threadsafe&quot;&gt;化&lt;/a&gt;されたスレッドモードで開きます。&lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_SHAREDCACHEの&lt;/a&gt;フラグは、データベース接続を使用する資格させる&lt;a href=&quot;sharedcache&quot;&gt;共有キャッシュモード&lt;/a&gt;かどうかにかかわらず、共有キャッシュの使用して有効になっている、&lt;a href=&quot;#sqlite3_enable_shared_cache&quot;&gt;sqlite3_enable_shared_cacheを（） &lt;/a&gt;。&lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_PRIVATECACHE&lt;/a&gt;フラグを設定すると、データベース接続が有効になっていても、&lt;a href=&quot;sharedcache&quot;&gt;共有キャッシュモードに&lt;/a&gt;参加しません。</target>
        </trans-unit>
        <trans-unit id="f124aef410c3a3a5452b1a6fa293c0baf98a2590" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;#sqlite3_blob&quot;&gt;BLOB handle&lt;/a&gt; passed as the first argument was not opened for writing (the flags parameter to &lt;a href=&quot;#sqlite3_blob_open&quot;&gt;sqlite3_blob_open()&lt;/a&gt; was zero), this function returns &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_READONLY&lt;/a&gt;.</source>
          <target state="translated">最初の引数として渡された&lt;a href=&quot;#sqlite3_blob&quot;&gt;BLOBハンドル&lt;/a&gt;が書き込み用に開かれていなかった&lt;a href=&quot;#sqlite3_blob_open&quot;&gt;場合（sqlite3_blob_open（）&lt;/a&gt;へのフラグパラメータがゼロであった場合）、この関数は&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_READONLYを&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="b097a680522bfef6d5db94910e22cbe0a87ca6c4" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;#sqlite3vfsxopen&quot;&gt;sqlite3_vfs.xOpen&lt;/a&gt; method sets the sqlite3_file.pMethods element to a non-NULL pointer, then the sqlite3_io_methods.xClose method may be invoked even if the &lt;a href=&quot;#sqlite3vfsxopen&quot;&gt;sqlite3_vfs.xOpen&lt;/a&gt; reported that it failed. The only way to prevent a call to xClose following a failed &lt;a href=&quot;#sqlite3vfsxopen&quot;&gt;sqlite3_vfs.xOpen&lt;/a&gt; is for the &lt;a href=&quot;#sqlite3vfsxopen&quot;&gt;sqlite3_vfs.xOpen&lt;/a&gt; to set the sqlite3_file.pMethods element to NULL.</source>
          <target state="translated">場合&lt;a href=&quot;#sqlite3vfsxopen&quot;&gt;sqlite3_vfs.xOpenの&lt;/a&gt;方法は、非NULLポインタにsqlite3_file.pMethods要素を設定し、その後sqlite3_io_methods.xClose方法は、場合でも呼び出すことができる&lt;a href=&quot;#sqlite3vfsxopen&quot;&gt;sqlite3_vfs.xOpenは、&lt;/a&gt;それが失敗したことを報告しました。失敗し、次のxCloseへの呼び出しを防ぐ唯一の方法&lt;a href=&quot;#sqlite3vfsxopen&quot;&gt;sqlite3_vfs.xOpenは&lt;/a&gt;です&lt;a href=&quot;#sqlite3vfsxopen&quot;&gt;sqlite3_vfs.xOpenが&lt;/a&gt; NULLにsqlite3_file.pMethods要素を設定します。</target>
        </trans-unit>
        <trans-unit id="c4075392a6aa7bc2b0c022c207b5beef854359fa" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;#sqlitefcntlbeginatomicwrite&quot; id=&quot;sqlitefcntlbeginatomicwrite&quot;&gt;SQLITE_FCNTL_BEGIN_ATOMIC_WRITE&lt;/a&gt; opcode returns SQLITE_OK, then the file descriptor is placed in &quot;batch write mode&quot;, which means all subsequent write operations will be deferred and done atomically at the next &lt;a href=&quot;#sqlitefcntlcommitatomicwrite&quot;&gt;SQLITE_FCNTL_COMMIT_ATOMIC_WRITE&lt;/a&gt;. Systems that do not support batch atomic writes will return SQLITE_NOTFOUND. Following a successful SQLITE_FCNTL_BEGIN_ATOMIC_WRITE and prior to the closing &lt;a href=&quot;#sqlitefcntlcommitatomicwrite&quot;&gt;SQLITE_FCNTL_COMMIT_ATOMIC_WRITE&lt;/a&gt; or &lt;a href=&quot;#sqlitefcntlrollbackatomicwrite&quot;&gt;SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE&lt;/a&gt;, SQLite will make no VFS interface calls on the same &lt;a href=&quot;#sqlite3_file&quot;&gt;sqlite3_file&lt;/a&gt; file descriptor except for calls to the xWrite method and the xFileControl method with &lt;a href=&quot;#sqlitefcntlsizehint&quot;&gt;SQLITE_FCNTL_SIZE_HINT&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntlbeginatomicwrite&quot; id=&quot;sqlitefcntlbeginatomicwrite&quot;&gt;SQLITE_FCNTL_BEGIN_ATOMIC_WRITE&lt;/a&gt;オペコードがSQLITE_OKを返す場合、ファイル記述子は「バッチ書き込みモード」に置かれます。これは、後続のすべての書き込み操作が遅延され、次の&lt;a href=&quot;#sqlitefcntlcommitatomicwrite&quot;&gt;SQLITE_FCNTL_COMMIT_ATOMIC_WRITEで&lt;/a&gt;アトミックに実行されることを意味します。バッチアトミック書き込みをサポートしないシステムは、SQLITE_NOTFOUNDを返します。成功SQLITE_FCNTL_BEGIN_ATOMIC_WRITE前クロージングするには、以下の&lt;a href=&quot;#sqlitefcntlcommitatomicwrite&quot;&gt;SQLITE_FCNTL_COMMIT_ATOMIC_WRITE&lt;/a&gt;または&lt;a href=&quot;#sqlitefcntlrollbackatomicwrite&quot;&gt;SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE&lt;/a&gt;、SQLiteは同じにはVFSインタフェース呼び出しを行いません&lt;a href=&quot;#sqlite3_file&quot;&gt;sqlite3_fileの&lt;/a&gt; xWrite方法としてxFileControlメソッドの呼び出し以外のファイルディスクリプタを&lt;a href=&quot;#sqlitefcntlsizehint&quot;&gt;SQLITE_FCNTL_SIZE_HINT&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="eadccb78851e96452064935ca6338980e2d4c8f7" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../vtab#xcolumn&quot;&gt;xColumn&lt;/a&gt; method calls sqlite3_vtab_nochange() and finds that the column is not changed by the UPDATE statement, then the xColumn method can optionally return without setting a result, without calling any of the &lt;a href=&quot;result_blob&quot;&gt;sqlite3_result_xxxxx() interfaces&lt;/a&gt;. In that case, &lt;a href=&quot;value_blob&quot;&gt;sqlite3_value_nochange(X)&lt;/a&gt; will return true for the same column in the &lt;a href=&quot;../vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt; method.</source>
          <target state="translated">場合&lt;a href=&quot;../vtab#xcolumn&quot;&gt;Xcolumnにする&lt;/a&gt;メソッド呼び出しは、列がUPDATE文によって変更されないことsqlite3_vtab_nochange（）と求め、次いでXcolumnに方法は、任意の任意呼び出すことなく、結果を設定せずに返すことができ&lt;a href=&quot;result_blob&quot;&gt;sqlite3_result_xxxxx（）インターフェースを&lt;/a&gt;。その場合、&lt;a href=&quot;value_blob&quot;&gt;sqlite3_value_nochange（X）&lt;/a&gt;は、&lt;a href=&quot;../vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt;メソッドの同じ列に対してtrueを返します。</target>
        </trans-unit>
        <trans-unit id="a8a1933767ab95a99c4ac8ef45461802121a0a08" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;blob&quot;&gt;BLOB handle&lt;/a&gt; passed as the first argument was not opened for writing (the flags parameter to &lt;a href=&quot;blob_open&quot;&gt;sqlite3_blob_open()&lt;/a&gt; was zero), this function returns &lt;a href=&quot;../rescode#readonly&quot;&gt;SQLITE_READONLY&lt;/a&gt;.</source>
          <target state="translated">最初の引数として渡された&lt;a href=&quot;blob&quot;&gt;BLOBハンドル&lt;/a&gt;が書き込み用に開かれていなかった&lt;a href=&quot;blob_open&quot;&gt;場合（sqlite3_blob_open（）&lt;/a&gt;へのフラグパラメータがゼロであった場合）、この関数は&lt;a href=&quot;../rescode#readonly&quot;&gt;SQLITE_READONLYを&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="b723e9fc3d49332b65d60edda223c8ec9ca4d696" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;c3ref/create_function&quot;&gt;sqlite3_create_function()&lt;/a&gt; interface is used to override the glob(X,Y) function with an alternative implementation then the &lt;a href=&quot;lang_expr#glob&quot;&gt;GLOB&lt;/a&gt; operator will invoke the alternative implementation.</source>
          <target state="translated">場合&lt;a href=&quot;c3ref/create_function&quot;&gt;sqlite3_create_function（）&lt;/a&gt;インターフェースを代替実装でグロブ（X、Y）の機能をオーバーライドするために使用され、次いで&lt;a href=&quot;lang_expr#glob&quot;&gt;GLOBの&lt;/a&gt;オペレータは、別のインプリメンテーションを呼び出します。</target>
        </trans-unit>
        <trans-unit id="3092cc5ebddb90376d018bb6c31fa51fc5b9d178" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlbeginatomicwrite&quot; id=&quot;sqlitefcntlbeginatomicwrite&quot;&gt;SQLITE_FCNTL_BEGIN_ATOMIC_WRITE&lt;/a&gt; opcode returns SQLITE_OK, then the file descriptor is placed in &quot;batch write mode&quot;, which means all subsequent write operations will be deferred and done atomically at the next &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlcommitatomicwrite&quot;&gt;SQLITE_FCNTL_COMMIT_ATOMIC_WRITE&lt;/a&gt;. Systems that do not support batch atomic writes will return SQLITE_NOTFOUND. Following a successful SQLITE_FCNTL_BEGIN_ATOMIC_WRITE and prior to the closing &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlcommitatomicwrite&quot;&gt;SQLITE_FCNTL_COMMIT_ATOMIC_WRITE&lt;/a&gt; or &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlrollbackatomicwrite&quot;&gt;SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE&lt;/a&gt;, SQLite will make no VFS interface calls on the same &lt;a href=&quot;file&quot;&gt;sqlite3_file&lt;/a&gt; file descriptor except for calls to the xWrite method and the xFileControl method with &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlsizehint&quot;&gt;SQLITE_FCNTL_SIZE_HINT&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlbeginatomicwrite&quot; id=&quot;sqlitefcntlbeginatomicwrite&quot;&gt;SQLITE_FCNTL_BEGIN_ATOMIC_WRITE&lt;/a&gt;オペコードがSQLITE_OKを返す場合、ファイル記述子は「バッチ書き込みモード」に置かれます。これは、後続のすべての書き込み操作が遅延され、次の&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlcommitatomicwrite&quot;&gt;SQLITE_FCNTL_COMMIT_ATOMIC_WRITEで&lt;/a&gt;アトミックに実行されることを意味します。バッチアトミック書き込みをサポートしないシステムは、SQLITE_NOTFOUNDを返します。成功SQLITE_FCNTL_BEGIN_ATOMIC_WRITE前クロージングするには、以下の&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlcommitatomicwrite&quot;&gt;SQLITE_FCNTL_COMMIT_ATOMIC_WRITE&lt;/a&gt;または&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlrollbackatomicwrite&quot;&gt;SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE&lt;/a&gt;、SQLiteは同じにはVFSインタフェース呼び出しを行いません&lt;a href=&quot;file&quot;&gt;sqlite3_fileの&lt;/a&gt; xWrite方法としてxFileControlメソッドの呼び出し以外のファイルディスクリプタを&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlsizehint&quot;&gt;SQLITE_FCNTL_SIZE_HINT&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="26aea5eaba4882a7f57e469fe581e38b779b7c63" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_NOMUTEX&lt;/a&gt; flag is set, then the database connection opens in the multi-thread &lt;a href=&quot;../threadsafe&quot;&gt;threading mode&lt;/a&gt; as long as the single-thread mode has not been set at compile-time or start-time. If the &lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_FULLMUTEX&lt;/a&gt; flag is set then the database connection opens in the serialized &lt;a href=&quot;../threadsafe&quot;&gt;threading mode&lt;/a&gt; unless single-thread was previously selected at compile-time or start-time. The &lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_SHAREDCACHE&lt;/a&gt; flag causes the database connection to be eligible to use &lt;a href=&quot;../sharedcache&quot;&gt;shared cache mode&lt;/a&gt;, regardless of whether or not shared cache is enabled using &lt;a href=&quot;enable_shared_cache&quot;&gt;sqlite3_enable_shared_cache()&lt;/a&gt;. The &lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_PRIVATECACHE&lt;/a&gt; flag causes the database connection to not participate in &lt;a href=&quot;../sharedcache&quot;&gt;shared cache mode&lt;/a&gt; even if it is enabled.</source>
          <target state="translated">&lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_NOMUTEX&lt;/a&gt;フラグが設定されている場合、シングルスレッドモードがコンパイル時または開始時に設定されていない限り、データベース接続はマルチスレッド&lt;a href=&quot;../threadsafe&quot;&gt;スレッドモード&lt;/a&gt;で開きます。&lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_FULLMUTEX&lt;/a&gt;フラグが設定されている場合、コンパイル時または開始時にシングルスレッドが以前に選択されていなければ、データベース接続はシリアル&lt;a href=&quot;../threadsafe&quot;&gt;化&lt;/a&gt;されたスレッドモードで開きます。&lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_SHAREDCACHEの&lt;/a&gt;フラグは、データベース接続を使用する資格させる&lt;a href=&quot;../sharedcache&quot;&gt;共有キャッシュモード&lt;/a&gt;かどうかにかかわらず、共有キャッシュの使用して有効になっている、&lt;a href=&quot;enable_shared_cache&quot;&gt;sqlite3_enable_shared_cacheを（） &lt;/a&gt;。&lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_PRIVATECACHE&lt;/a&gt;フラグを設定すると、データベース接続が有効になっていても、&lt;a href=&quot;../sharedcache&quot;&gt;共有キャッシュモードに&lt;/a&gt;参加しません。</target>
        </trans-unit>
        <trans-unit id="3d6b9e280cf3c9ed4800b321c18f34c5a4956d1e" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;compile#enable_8_3_names&quot;&gt;SQLITE_ENABLE_8_3_NAMES=1&lt;/a&gt; option is used, then SQLite is capable of using 8+3 filenames but that capabilities is disabled and must be enabled separately for each database connection by using using &lt;a href=&quot;uri&quot;&gt;URI filenames&lt;/a&gt; when &lt;a href=&quot;c3ref/open&quot;&gt;opening&lt;/a&gt; or &lt;a href=&quot;lang_attach&quot;&gt;ATTACH-ing&lt;/a&gt; the database files and include the &quot;&lt;code&gt;8_3_names=1&lt;/code&gt;&quot; query parameter in the URI. If SQLite is compiled with &lt;a href=&quot;compile#enable_8_3_names&quot;&gt;SQLITE_ENABLE_8_3_NAMES=2&lt;/a&gt; then 8+3 filenames are enabled by default and this step can be skipped.</source>
          <target state="translated">場合&lt;a href=&quot;compile#enable_8_3_names&quot;&gt;SQLITE_ENABLE_8_3_NAMES = 1つの&lt;/a&gt;オプションが使用され、その後、SQLiteは8 + 3ファイル名を使用することが可能となるが、その機能は無効になり、使用して使用して、各データベース接続ごとに個別に有効にする必要があり&lt;a href=&quot;uri&quot;&gt;URIファイル名の&lt;/a&gt;とき&lt;a href=&quot;c3ref/open&quot;&gt;開口部&lt;/a&gt;または&lt;a href=&quot;lang_attach&quot;&gt;-INGのATTACH&lt;/a&gt;データベースファイルをと含まURIの「 &lt;code&gt;8_3_names=1&lt;/code&gt; 」クエリパラメータ。SQLiteが&lt;a href=&quot;compile#enable_8_3_names&quot;&gt;SQLITE_ENABLE_8_3_NAMES = 2で&lt;/a&gt;コンパイルされている場合、デフォルトで8 + 3のファイル名が有効になり、この手順はスキップできます。</target>
        </trans-unit>
        <trans-unit id="f14f4e625a540ecf3e1de270c88730b0b55cfa0f" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;compile#temp_store&quot;&gt;SQLITE_TEMP_STORE&lt;/a&gt; compile-time parameter specifies disk storage for temporary files, then override that decision and use memory storage instead. Otherwise follow the recommendation of the &lt;a href=&quot;compile#temp_store&quot;&gt;SQLITE_TEMP_STORE&lt;/a&gt; compile-time parameter.</source>
          <target state="translated">&lt;a href=&quot;compile#temp_store&quot;&gt;SQLITE_TEMP_STORE&lt;/a&gt;コンパイル時パラメーターが一時ファイル用のディスクストレージを指定している場合は、その決定を上書きして、代わりにメモリストレージを使用します。それ以外の場合は、&lt;a href=&quot;compile#temp_store&quot;&gt;SQLITE_TEMP_STORE&lt;/a&gt;コンパイル時パラメーターの推奨に従います。</target>
        </trans-unit>
        <trans-unit id="cc4e5ad04a8f404976f4ea549e621889ed4a2406" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;compile#temp_store&quot;&gt;SQLITE_TEMP_STORE&lt;/a&gt; compile-time parameter specifies memory storage for temporary files, then override that decision and use disk storage instead. Otherwise follow the recommendation of the &lt;a href=&quot;compile#temp_store&quot;&gt;SQLITE_TEMP_STORE&lt;/a&gt; compile-time parameter.</source>
          <target state="translated">&lt;a href=&quot;compile#temp_store&quot;&gt;SQLITE_TEMP_STORE&lt;/a&gt;コンパイル時パラメーターが一時ファイルのメモリストレージを指定している場合は、その決定を上書きして、代わりにディスクストレージを使用します。それ以外の場合は、&lt;a href=&quot;compile#temp_store&quot;&gt;SQLITE_TEMP_STORE&lt;/a&gt;コンパイル時パラメーターの推奨に従います。</target>
        </trans-unit>
        <trans-unit id="c75f136169c511a3f8a8fd887440953a9ba6fdef" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;datatype3#affinity&quot;&gt;affinity&lt;/a&gt; of a column is REAL and that column contains a value that can be converted to an integer without loss of information (if the value contains no fractional part and is not too large to be represented as an integer) then the column may be stored in the record as an integer. SQLite will convert the value back to floating point when extracting it from the record.</source>
          <target state="translated">場合&lt;a href=&quot;datatype3#affinity&quot;&gt;アフィニティー&lt;/a&gt;カラムのがREALであり、（値は小数部分を含まず、整数として表すことが大きすぎない場合）、その列は、情報の損失なし整数に変換することができる値を含むその列であってもよいですレコードに整数として格納されます。SQLiteは、レコードから抽出するときに値を浮動小数点に変換します。</target>
        </trans-unit>
        <trans-unit id="6bdd9340a9dcd6ebb4b2136a687baf206a35c611" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt; is not aliased by &lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt; then it is not persistent and might change. In particular the &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; command will change rowids for tables that do not declare an INTEGER PRIMARY KEY. Therefore, applications should not normally access the rowid directly, but instead use an INTEGER PRIMARY KEY.</source>
          <target state="translated">&lt;a href=&quot;lang_createtable#rowid&quot;&gt;ROWID&lt;/a&gt;が&lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt;によってエイリアスされていない場合、永続的ではなく、変更される可能性があります。特に、&lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt;コマンドは、INTEGER PRIMARY KEYを宣言していないテーブルのROWIDを変更します。したがって、アプリケーションは通常、ROWIDに直接アクセスするのではなく、INTEGER PRIMARY KEYを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="96317212b202d64aa994eed839385d463798a08e" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;opcode#VColumn&quot;&gt;VColumn&lt;/a&gt; opcode is being used to fetch the value of an unchanging column during an UPDATE operation, then the P5 value is OPFLAG_NOCHNG. This will cause the sqlite3_vtab_nochange() function to return true inside the xColumn method of the virtual table implementation. The P5 column might also contain other bits (OPFLAG_LENGTHARG or OPFLAG_TYPEOFARG) but those bits are unused by &lt;a href=&quot;opcode#VColumn&quot;&gt;VColumn&lt;/a&gt;.</source>
          <target state="translated">場合&lt;a href=&quot;opcode#VColumn&quot;&gt;VCOLUMNの&lt;/a&gt;オペコードは、更新処理中に不変のカラムの値を取得するために使用され、次いで、P5の値がOPFLAG_NOCHNGあります。これにより、sqlite3_vtab_nochange（）関数が仮想テーブル実装のxColumnメソッド内でtrueを返します。P5列には他のビット（OPFLAG_LENGTHARGまたはOPFLAG_TYPEOFARG）も含まれている可能性がありますが、それらのビットは&lt;a href=&quot;opcode#VColumn&quot;&gt;VColumnでは&lt;/a&gt;使用されません。</target>
        </trans-unit>
        <trans-unit id="2b4eaedd5855ff13b903e656d850adc325c12c79" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;optoverview#flattening&quot;&gt;flattening optimization&lt;/a&gt; is used on a subquery in the FROM clause of a SELECT statement, that effectively merges the subquery into the outer query. The output of EXPLAIN QUERY PLAN reflects this, as in the following example:</source>
          <target state="translated">場合は&lt;a href=&quot;optoverview#flattening&quot;&gt;平坦化最適化が&lt;/a&gt;効果的に外側のクエリにサブクエリをマージし、SELECT文のFROM句でのサブクエリに使用されています。EXPLAIN QUERY PLANの出力は、次の例のようにこれを反映しています。</target>
        </trans-unit>
        <trans-unit id="6110f6d9f2445ffa2d331ca1dfcaf53aa3a365b6" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;pragma#pragma_empty_result_callbacks&quot;&gt; EMPTY_RESULT_CALLBACKS&lt;/a&gt; pragma is set to ON and the result of a query is an empty set, then the callback is invoked once with the third parameter (argv) set to 0. In other words</source>
          <target state="translated">場合&lt;a href=&quot;pragma#pragma_empty_result_callbacks&quot;&gt;EMPTY_RESULT_CALLBACKSの&lt;/a&gt;プラグマがONに設定され、クエリの結果が空集合である場合、コールバックは、換言すれば0に三番目のパラメータ（ARGV）が設定された後に呼び出されます</target>
        </trans-unit>
        <trans-unit id="b1c24c8f45d6339d5389a76337c9e88f41b5e36a" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;pragma#pragma_fullfsync&quot;&gt;fullfsync&lt;/a&gt; flag is set, then the F_FULLFSYNC syncing method is used for all sync operations and the checkpoint_fullfsync setting is irrelevant.</source>
          <target state="translated">場合&lt;a href=&quot;pragma#pragma_fullfsync&quot;&gt;fullfsync&lt;/a&gt;フラグがセットされ、次いでF_FULLFSYNC同期方法は、すべての同期動作のために使用され、checkpoint_fullfsync設定は無関係です。</target>
        </trans-unit>
        <trans-unit id="a73873febe6d7de1338d537c333841d126c81b5b" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;pragma#pragma_short_column_names&quot;&gt;short_column_names&lt;/a&gt; pragma is ON, then the name of the result is the name of the source table column without the source table name prefix: COLUMN.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_short_column_names&quot;&gt;short_column_names&lt;/a&gt;プラグマがONの場合、結果の名前はソーステーブル名の接頭辞を除いたソーステーブル列の名前です：COLUMN。</target>
        </trans-unit>
        <trans-unit id="1069754e926abbbcc7551f7b3c103d01ced65dbe" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;vfs#sqlite3vfsxopen&quot;&gt;sqlite3_vfs.xOpen&lt;/a&gt; method sets the sqlite3_file.pMethods element to a non-NULL pointer, then the sqlite3_io_methods.xClose method may be invoked even if the &lt;a href=&quot;vfs#sqlite3vfsxopen&quot;&gt;sqlite3_vfs.xOpen&lt;/a&gt; reported that it failed. The only way to prevent a call to xClose following a failed &lt;a href=&quot;vfs#sqlite3vfsxopen&quot;&gt;sqlite3_vfs.xOpen&lt;/a&gt; is for the &lt;a href=&quot;vfs#sqlite3vfsxopen&quot;&gt;sqlite3_vfs.xOpen&lt;/a&gt; to set the sqlite3_file.pMethods element to NULL.</source>
          <target state="translated">場合&lt;a href=&quot;vfs#sqlite3vfsxopen&quot;&gt;sqlite3_vfs.xOpenの&lt;/a&gt;方法は、非NULLポインタにsqlite3_file.pMethods要素を設定し、その後sqlite3_io_methods.xClose方法は、場合でも呼び出すことができる&lt;a href=&quot;vfs#sqlite3vfsxopen&quot;&gt;sqlite3_vfs.xOpenは、&lt;/a&gt;それが失敗したことを報告しました。失敗し、次のxCloseへの呼び出しを防ぐ唯一の方法&lt;a href=&quot;vfs#sqlite3vfsxopen&quot;&gt;sqlite3_vfs.xOpenは&lt;/a&gt;です&lt;a href=&quot;vfs#sqlite3vfsxopen&quot;&gt;sqlite3_vfs.xOpenが&lt;/a&gt; NULLにsqlite3_file.pMethods要素を設定します。</target>
        </trans-unit>
        <trans-unit id="e03a0f37d058bb5a34bec7fac575235294acd0da" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;vtab#xcolumn&quot;&gt;xColumn&lt;/a&gt; method calls sqlite3_vtab_nochange() and finds that the column is not changed by the UPDATE statement, then the xColumn method can optionally return without setting a result, without calling any of the &lt;a href=&quot;#sqlite3_result_blob&quot;&gt;sqlite3_result_xxxxx() interfaces&lt;/a&gt;. In that case, &lt;a href=&quot;#sqlite3_value_blob&quot;&gt;sqlite3_value_nochange(X)&lt;/a&gt; will return true for the same column in the &lt;a href=&quot;vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt; method.</source>
          <target state="translated">場合&lt;a href=&quot;vtab#xcolumn&quot;&gt;Xcolumnにする&lt;/a&gt;メソッド呼び出しは、列がUPDATE文によって変更されないことsqlite3_vtab_nochange（）と求め、次いでXcolumnに方法は、任意の任意呼び出すことなく、結果を設定せずに返すことができ&lt;a href=&quot;#sqlite3_result_blob&quot;&gt;sqlite3_result_xxxxx（）インターフェースを&lt;/a&gt;。その場合、&lt;a href=&quot;#sqlite3_value_blob&quot;&gt;sqlite3_value_nochange（X）&lt;/a&gt;は、&lt;a href=&quot;vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt;メソッドの同じ列に対してtrueを返します。</target>
        </trans-unit>
        <trans-unit id="6aba978070ccc979bd49ef28d0ef204e751d91d9" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;vtab#xcolumn&quot;&gt;xColumn&lt;/a&gt; method in a &lt;a href=&quot;vtab&quot;&gt;virtual table&lt;/a&gt; implementation returns an error message using &lt;a href=&quot;c3ref/result_blob&quot;&gt;sqlite3_result_error()&lt;/a&gt; then give that error message preference over internally-generated messages.</source>
          <target state="translated">&lt;a href=&quot;vtab&quot;&gt;仮想テーブル&lt;/a&gt;実装の&lt;a href=&quot;vtab#xcolumn&quot;&gt;xColumn&lt;/a&gt;メソッドが&lt;a href=&quot;c3ref/result_blob&quot;&gt;sqlite3_result_error（）&lt;/a&gt;を使用してエラーメッセージを返す場合、内部で生成されたメッセージよりもそのエラーメッセージを優先します。</target>
        </trans-unit>
        <trans-unit id="a18d90fb5154dfedaa1471558060511dc56cfb54" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;vtab#xcreate&quot;&gt;xCreate&lt;/a&gt; method is NULL, then &lt;a href=&quot;lang_createvtab&quot;&gt;CREATE VIRTUAL TABLE&lt;/a&gt; statements are prohibited for that virtual table, and the virtual table is an &quot;eponymous-only virtual table&quot;. Eponymous-only virtual tables are useful as &lt;a href=&quot;vtab#tabfunc2&quot;&gt;table-valued functions&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;vtab#xcreate&quot;&gt;xCreate&lt;/a&gt;メソッドがNULLの場合、その仮想テーブルに対する&lt;a href=&quot;lang_createvtab&quot;&gt;CREATE VIRTUAL TABLE&lt;/a&gt;ステートメントは禁止され、仮想テーブルは「匿名のみの仮想テーブル」になります。代名詞のみの仮想テーブルは、&lt;a href=&quot;vtab#tabfunc2&quot;&gt;テーブル値関数&lt;/a&gt;として役立ちます。</target>
        </trans-unit>
        <trans-unit id="e36f28038a4ddd30d8f77a7f397ce33837d3478d" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;vtab#xfindfunction&quot;&gt;xFindFunction()&lt;/a&gt; method for the virtual table is defined, and if xFindFunction() sometimes returns &lt;a href=&quot;c3ref/c_index_constraint_eq&quot;&gt;SQLITE_INDEX_CONSTRAINT_FUNCTION&lt;/a&gt; or larger, then the constraints might also be of the form:</source>
          <target state="translated">仮想テーブルの&lt;a href=&quot;vtab#xfindfunction&quot;&gt;xFindFunction（）&lt;/a&gt;メソッドが定義されており、xFindFunction（）が&lt;a href=&quot;c3ref/c_index_constraint_eq&quot;&gt;SQLITE_INDEX_CONSTRAINT_FUNCTION&lt;/a&gt;以上を返すことがある場合、制約も次の形式になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="89b6cc463721d8831624d29f70a88929969774cd" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;wal&quot;&gt;write-ahead log&lt;/a&gt; is enabled (via the &lt;a href=&quot;pragma#pragma_journal_mode&quot;&gt;journal_mode pragma&lt;/a&gt;), this pragma causes a &lt;a href=&quot;wal#ckpt&quot;&gt;checkpoint&lt;/a&gt; operation to run on database</source>
          <target state="translated">場合は&lt;a href=&quot;wal&quot;&gt;、先行書き込みログ&lt;/a&gt;（経由で有効になっている&lt;a href=&quot;pragma#pragma_journal_mode&quot;&gt;journal_modeプラグマ&lt;/a&gt;）、このプラグマは、原因となる&lt;a href=&quot;wal#ckpt&quot;&gt;チェックポイントの&lt;/a&gt;データベース上で実行する操作を</target>
        </trans-unit>
        <trans-unit id="fa30bb229e0ba6c16b036d0680166f4c0e969175" translate="yes" xml:space="preserve">
          <source>If the &lt;b&gt;header&lt;/b&gt; argument is true then the first row of the CSV file to be treated as a header rather than as data. The second line of the CSV file becomes the first row of content. If the &lt;b&gt;schema=&lt;/b&gt; options is omitted, then the first line of the CSV file determines the names of the columns.</source>
          <target state="translated">&lt;b&gt;header&lt;/b&gt;引数がtrueの場合、CSVファイルの最初の行はデータではなくヘッダーとして扱われます。CSVファイルの2行目がコンテンツの最初の行になります。&lt;b&gt;schema =&lt;/b&gt;オプションを省略した場合、CSVファイルの最初の行で列の名前が決まります。</target>
        </trans-unit>
        <trans-unit id="c1cfb6451556f25af13b7b368489aadb6eb20ce2" translate="yes" xml:space="preserve">
          <source>If the AUTOINCREMENT keyword appears after INTEGER PRIMARY KEY, that changes the automatic ROWID assignment algorithm to prevent the reuse of ROWIDs over the lifetime of the database. In other words, the purpose of AUTOINCREMENT is to prevent the reuse of ROWIDs from previously deleted rows.</source>
          <target state="translated">INTEGER PRIMARY KEY の後に AUTOINCREMENT キーワードが出現した場合、データベースの有効期間中に ROWID が再利用されるのを防ぐために、自動 ROWID 代入アルゴリズムが変更されます。言い換えれば、AUTOINCREMENTの目的は、以前に削除された行からのROWIDの再利用を防ぐことです。</target>
        </trans-unit>
        <trans-unit id="e7ae8b25bf55713a14aa930c0d079c55585a0c82" translate="yes" xml:space="preserve">
          <source>If the C version of the &lt;a href=&quot;http://site.icu-project.org/&quot;&gt;ICU library&lt;/a&gt; is available, then FTS may also be compiled with the SQLITE_ENABLE_ICU pre-processor macro defined. Compiling with this macro enables an FTS &lt;a href=&quot;fts3#tokenizer&quot;&gt;tokenizer&lt;/a&gt; that uses the ICU library to split a document into terms (words) using the conventions for a specified language and locale.</source>
          <target state="translated">&lt;a href=&quot;http://site.icu-project.org/&quot;&gt;ICUライブラリ&lt;/a&gt;のCバージョンが利用可能な場合、FTSはSQLITE_ENABLE_ICUプリプロセッサマクロを定義してコンパイルすることもできます。このマクロを使用してコンパイルすると、ICUライブラリを使用するFTS &lt;a href=&quot;fts3#tokenizer&quot;&gt;トークナイザー&lt;/a&gt;が、指定された言語とロケールの規則を使用してドキュメントを用語（単語）に分割できるようになります。</target>
        </trans-unit>
        <trans-unit id="aade338ead72cd83806851289f36afe9ffee6390" translate="yes" xml:space="preserve">
          <source>If the DELETE operation is attempted, but SQLite returns SQLITE_CONSTRAINT (which can only happen if a foreign key constraint is violated), the conflict-handler function is invoked with &lt;a href=&quot;#SQLITE_CHANGESET_CONFLICT&quot;&gt;SQLITE_CHANGESET_CONSTRAINT&lt;/a&gt; passed as the second argument. This includes the case where the DELETE operation is attempted because an earlier call to the conflict handler function returned &lt;a href=&quot;#SQLITE_CHANGESET_ABORT&quot;&gt;SQLITE_CHANGESET_REPLACE&lt;/a&gt;.</source>
          <target state="translated">DELETE操作が試行されたが、SQLiteがSQLITE_CONSTRAINTを返す場合（これは、外部キー制約に違反している場合にのみ発生します）、2番目の引数として&lt;a href=&quot;#SQLITE_CHANGESET_CONFLICT&quot;&gt;SQLITE_CHANGESET_CONSTRAINT&lt;/a&gt;が渡されて競合ハンドラー関数が呼び出されます。これには、競合ハンドラー関数への以前の呼び出しが&lt;a href=&quot;#SQLITE_CHANGESET_ABORT&quot;&gt;SQLITE_CHANGESET_REPLACEを&lt;/a&gt;返したためにDELETE操作が試行された場合が含まれます。</target>
        </trans-unit>
        <trans-unit id="c4726b3dbe2c58403328aff3054192714f5fc075" translate="yes" xml:space="preserve">
          <source>If the DELETE operation is attempted, but SQLite returns SQLITE_CONSTRAINT (which can only happen if a foreign key constraint is violated), the conflict-handler function is invoked with &lt;a href=&quot;c_changeset_conflict&quot;&gt;SQLITE_CHANGESET_CONSTRAINT&lt;/a&gt; passed as the second argument. This includes the case where the DELETE operation is attempted because an earlier call to the conflict handler function returned &lt;a href=&quot;c_changeset_abort&quot;&gt;SQLITE_CHANGESET_REPLACE&lt;/a&gt;.</source>
          <target state="translated">DELETE操作が試行されたが、SQLiteがSQLITE_CONSTRAINTを返す場合（これは、外部キー制約に違反している場合にのみ発生します）、2番目の引数として&lt;a href=&quot;c_changeset_conflict&quot;&gt;SQLITE_CHANGESET_CONSTRAINT&lt;/a&gt;が渡されて競合ハンドラー関数が呼び出されます。これには、競合ハンドラー関数への以前の呼び出しが&lt;a href=&quot;c_changeset_abort&quot;&gt;SQLITE_CHANGESET_REPLACEを&lt;/a&gt;返したためにDELETE操作が試行された場合が含まれます。</target>
        </trans-unit>
        <trans-unit id="a02c654b3d70302948f2081631be3edc27671a93" translate="yes" xml:space="preserve">
          <source>If the DELETE statement has an ORDER BY clause, then all rows that would be deleted in the absence of the LIMIT clause are sorted according to the ORDER BY. The first</source>
          <target state="translated">DELETE文にORDER BY句がある場合、LIMIT句がない場合に削除されるすべての行はORDER BYに従ってソートされます。最初の</target>
        </trans-unit>
        <trans-unit id="63547bac31e35c719e75fc46ff0cebecf92fd269" translate="yes" xml:space="preserve">
          <source>If the DELETE statement has no ORDER BY clause, then all rows that would be deleted in the absence of the LIMIT clause are assembled in an arbitrary order before applying the LIMIT and OFFSET clauses to determine the subset that are actually deleted.</source>
          <target state="translated">DELETE文にORDER BY句がない場合、LIMIT句がない場合に削除されるすべての行は、LIMIT句とOFFSET句を適用して実際に削除されるサブセットを決定する前に、任意の順序で組み立てられます。</target>
        </trans-unit>
        <trans-unit id="20e8eb12f584aa2a2c71da9ffe10b6bc6f97692b" translate="yes" xml:space="preserve">
          <source>If the ESCAPE option is used, the ESCAPE character must be ASCII, or a single-byte character in UTF-8.</source>
          <target state="translated">ESCAPE オプションを使用する場合、ESCAPE 文字は ASCII または UTF-8 のシングルバイト文字でなければなりません。</target>
        </trans-unit>
        <trans-unit id="7f76a2496ff32a61cee2f76ed3e0830800bfd787" translate="yes" xml:space="preserve">
          <source>If the FROM clause is omitted from a simple SELECT statement, then the input data is implicitly a single row zero columns wide (i.e.</source>
          <target state="translated">単純なSELECT文からFROM句が省略された場合、入力データは暗黙のうちに0列幅の1行になります。</target>
        </trans-unit>
        <trans-unit id="408ec930c8db59ef8bcaccad18026b5e15f9eaec" translate="yes" xml:space="preserve">
          <source>If the FTS table is an FTS4 table (not FTS3), a token may also be prefixed with a &quot;^&quot; character. In this case, in order to match the token must appear as the very first token in any column of the matching row. Examples:</source>
          <target state="translated">FTSテーブルがFTS4テーブル(FTS3ではない)の場合、トークンの前に&quot;^&quot;文字を付けることもできます。この場合、トークンが一致するためには、一致する行のいずれかの列の最初のトークンとして表示されなければなりません。例。</target>
        </trans-unit>
        <trans-unit id="93fd7e443f86d05e9fc567cfba4cc2ea3b224813" translate="yes" xml:space="preserve">
          <source>If the FTS5 table is created with the 'detail' option set to 'col', then the</source>
          <target state="translated">FTS5 テーブルが 'detail' オプションを 'col' に設定して作成されている場合は</target>
        </trans-unit>
        <trans-unit id="99ee296e09aab46dd06e0a5f1c140a90b72606e3" translate="yes" xml:space="preserve">
          <source>If the HAVE_FDATASYNC compile-time option is true, then the default &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt; for unix systems will attempt to use fdatasync() instead of fsync() where appropriate. If this flag is missing or false, then fsync() is always used.</source>
          <target state="translated">HAVE_FDATASYNCコンパイル時オプションがtrueの場合、UNIXシステムのデフォルトの&lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt;は、必要に応じてfsync （）ではなくfdatasync（）を使用しようとします。このフラグがないかfalseの場合、fsync（）が常に使用されます。</target>
        </trans-unit>
        <trans-unit id="8e31d6de70624cd3258a7c666db7d8624e2234e9" translate="yes" xml:space="preserve">
          <source>If the HAVE_GMTIME_R option is true and if &lt;a href=&quot;compile#omit_datetime_funcs&quot;&gt;SQLITE_OMIT_DATETIME_FUNCS&lt;/a&gt; is true, then the CURRENT_TIME, CURRENT_DATE, and CURRENT_TIMESTAMP keywords will use the threadsafe &quot;gmtime_r()&quot; interface rather than &quot;gmtime()&quot;. In the usual case where &lt;a href=&quot;compile#omit_datetime_funcs&quot;&gt;SQLITE_OMIT_DATETIME_FUNCS&lt;/a&gt; is not defined or is false, then the built-in &lt;a href=&quot;lang_datefunc&quot;&gt;date and time functions&lt;/a&gt; are used to implement the CURRENT_TIME, CURRENT_DATE, and CURRENT_TIMESTAMP keywords and neither gmtime_r() nor gmtime() is ever called.</source>
          <target state="translated">HAVE_GMTIME_Rオプションがtrueで、&lt;a href=&quot;compile#omit_datetime_funcs&quot;&gt;SQLITE_OMIT_DATETIME_FUNCS&lt;/a&gt;がtrueの場合、CURRENT_TIME、CURRENT_DATE、およびCURRENT_TIMESTAMPキーワードは、「gmtime（）」ではなくスレッドセーフな「gmtime_r（）」インターフェースを使用します。&lt;a href=&quot;compile#omit_datetime_funcs&quot;&gt;SQLITE_OMIT_DATETIME_FUNCS&lt;/a&gt;が定義されていないかfalseである通常の場合、組み込みの&lt;a href=&quot;lang_datefunc&quot;&gt;日付と時刻の関数&lt;/a&gt;を使用して、CURRENT_TIME、CURRENT_DATE、およびCURRENT_TIMESTAMPキーワードが実装され、gmtime_r（）もgmtime（）も呼び出されません。</target>
        </trans-unit>
        <trans-unit id="40cdcf3ade2687218b791686ca4436d6b3c5cfba" translate="yes" xml:space="preserve">
          <source>If the HAVE_ISNAN option is true, then SQLite invokes the system library isnan() function to determine if a double-precision floating point value is a NaN. If HAVE_ISNAN is undefined or false, then SQLite substitutes its own home-grown implementation of isnan().</source>
          <target state="translated">HAVE_ISNAN オプションが true の場合、SQLite はシステム・ライブラリの isnan()関数を呼び出し、倍精度浮動小数点値が NaN であるかどうかを判断します。HAVE_ISNAN が未定義または false の場合、SQLite は isnan()の独自の実装を代用します。</target>
        </trans-unit>
        <trans-unit id="153cb2536cd91084b29b41e9d14f8a7ef310cc61" translate="yes" xml:space="preserve">
          <source>If the HAVE_LOCALTIME_R option is true, then SQLite uses the threadsafe localtime_r() library routine instead of localtime() to help implement the &lt;a href=&quot;lang_datefunc#localtime&quot;&gt;localtime modifier&lt;/a&gt; to the built-in &lt;a href=&quot;lang_datefunc&quot;&gt;date and time functions&lt;/a&gt;.</source>
          <target state="translated">HAVE_LOCALTIME_Rオプションがtrueの場合、SQLiteはlocaltime（）ではなくスレッドセーフのlocaltime_r（）ライブラリルーチンを使用して、組み込みの&lt;a href=&quot;lang_datefunc&quot;&gt;日付および時刻関数に&lt;/a&gt;&lt;a href=&quot;lang_datefunc#localtime&quot;&gt;localtime修飾子&lt;/a&gt;を実装します。</target>
        </trans-unit>
        <trans-unit id="0c4b14956847344de7b5a6ccb25e5f358e368735" translate="yes" xml:space="preserve">
          <source>If the HAVE_LOCALTIME_S option is true, then SQLite uses the threadsafe localtime_s() library routine instead of localtime() to help implement the &lt;a href=&quot;lang_datefunc#localtime&quot;&gt;localtime modifier&lt;/a&gt; to the built-in &lt;a href=&quot;lang_datefunc&quot;&gt;date and time functions&lt;/a&gt;.</source>
          <target state="translated">HAVE_LOCALTIME_Sオプションがtrueの場合、SQLiteはlocaltime（）ではなくスレッドセーフのlocaltime_s（）ライブラリルーチンを使用して、組み込みの&lt;a href=&quot;lang_datefunc&quot;&gt;日付および時刻関数に&lt;/a&gt;&lt;a href=&quot;lang_datefunc#localtime&quot;&gt;localtime修飾子&lt;/a&gt;を実装します。</target>
        </trans-unit>
        <trans-unit id="997bea68ec053527286253926a4446e11225f13c" translate="yes" xml:space="preserve">
          <source>If the HAVE_MALLOC_USABLE_SIZE option is omitted or is false, then SQLite uses a wrapper around system malloc() and realloc() that enlarges each allocation by 8 bytes and writes the size of the allocation in the initial 8 bytes, and then SQLite also implements its own home-grown version of malloc_usable_size() that consults that 8-byte prefix to find the allocation size. This approach works but it is suboptimal. Applications are encouraged to use HAVE_MALLOC_USABLE_SIZE whenever possible.</source>
          <target state="translated">HAVE_MALLOC_USABLE_SIZE オプションが省略されているか false の場合、SQLite はシステムの malloc()および realloc()のラッパーを使用して各アロケーションを 8 バイトずつ拡大し、最初の 8 バイトにアロケーションのサイズを書き込みます。このアプローチはうまくいきますが、最適ではありません。アプリケーションは可能な限り HAVE_MALLOC_USABLE_SIZE を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="55308f0ca78c87c49d7100dbf1e1e1adc1d30409" translate="yes" xml:space="preserve">
          <source>If the HAVE_MALLOC_USABLE_SIZE option is true, then SQLite tries uses the malloc_usable_size() interface to find the size of a memory allocation obtained from the standard-library malloc() or realloc() routines. This option is only applicable if the standard-library malloc() is used. On Apple systems, &quot;zone malloc&quot; is used instead, and so this option is not applicable. And, of course, if the application supplies its own malloc implementation using &lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigmalloc&quot;&gt;SQLITE_CONFIG_MALLOC&lt;/a&gt; then this option has no effect.</source>
          <target state="translated">HAVE_MALLOC_USABLE_SIZEオプションがtrueの場合、SQLiteはmalloc_usable_size（）インターフェースを使用して、標準ライブラリのmalloc（）またはrealloc（）ルーチンから取得したメモリ割り当てのサイズを見つけようとします。このオプションは、標準ライブラリのmalloc（）が使用されている場合にのみ適用されます。Appleシステムでは、代わりに「zone malloc」が使用されるため、このオプションは適用されません。そしてもちろん、アプリケーションが&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigmalloc&quot;&gt;SQLITE_CONFIG_MALLOC&lt;/a&gt;を使用して独自のmalloc実装を提供する場合、このオプションは効果がありません。</target>
        </trans-unit>
        <trans-unit id="3344d140659472562fd4dea21990938229ddf3ec" translate="yes" xml:space="preserve">
          <source>If the HAVE_STRCHRNUL option is true, then SQLite uses the strchrnul() library function. If this option is missing or false, then SQLite substitutes its own home-grown implementation of strchrnul().</source>
          <target state="translated">HAVE_STRCHRNUL オプションが true の場合、SQLite は strchrnul()ライブラリ関数を使用します。このオプションがない場合や false の場合は、SQLite は strchrnul()の独自の実装を代用します。</target>
        </trans-unit>
        <trans-unit id="08d8894136dfc0e284f285c182990a928235abdc" translate="yes" xml:space="preserve">
          <source>If the HAVE_USLEEP option is true, then the default unix VFS uses the usleep() system call to implement the xSleep method. If this option is undefined or false, then xSleep on unix is implemented using sleep() which means that &lt;a href=&quot;c3ref/sleep&quot;&gt;sqlite3_sleep()&lt;/a&gt; will have a minimum wait interval of 1000 milliseconds regardless of its argument.</source>
          <target state="translated">HAVE_USLEEPオプションがtrueの場合、デフォルトのUNIX VFSはusleep（）システムコールを使用してxSleepメソッドを実装します。このオプションが未定義またはfalseの場合、UNIXでのxSleepは、sleep（）を使用して実装されます。つまり、&lt;a href=&quot;c3ref/sleep&quot;&gt;sqlite3_sleep（）の&lt;/a&gt;引数に関係なく、1000ミリ秒の最小待機間隔があります。</target>
        </trans-unit>
        <trans-unit id="538ccd48ed8bd61407504bbf28bbe6d0ffe8bf96" translate="yes" xml:space="preserve">
          <source>If the HAVE_UTIME option is true, then the built-in but non-standard &quot;unix-dotfile&quot; VFS will use the utime() system call, instead of utimes(), to set the last access time on the lock file.</source>
          <target state="translated">HAVE_UTIME オプションが真の場合、組み込みではあるが非標準の &quot;unix-dotfile&quot; VFS は utimes()の代わりに utime()システムコールを使用して、ロックファイルの最後のアクセス時間を設定します。</target>
        </trans-unit>
        <trans-unit id="7cab5093752cc9a8b0a63442b0923931057ad2d6" translate="yes" xml:space="preserve">
          <source>If the INTO clause is included, then the original database file is unchanged and a new database is created in the filename given by the argument to the INTO clause. The new database will contain the same logical content as the original database, fully vacuumed.</source>
          <target state="translated">INTO句が含まれている場合、元のデータベースファイルは変更されず、INTO句の引数で指定されたファイル名に新しいデータベースが作成されます。新しいデータベースは、完全にバキュームされた元のデータベースと同じ論理的な内容を含みます。</target>
        </trans-unit>
        <trans-unit id="b0e0bffd82940bcd9134c72373f0af179d9c5474" translate="yes" xml:space="preserve">
          <source>If the LIMIT expression evaluates to non-negative value</source>
          <target state="translated">LIMIT式が非負の値として評価された場合</target>
        </trans-unit>
        <trans-unit id="f61e07bad4e222ccefd74ac63dc52c1ed3c63a8f" translate="yes" xml:space="preserve">
          <source>If the NATURAL keyword is in the join-operator then an implicit USING clause is added to the join-constraints. The implicit USING clause contains each of the column names that appear in both the left and right-hand input datasets. If the left and right-hand input datasets feature no common column names, then the NATURAL keyword has no effect on the results of the join. A USING or ON clause may not be added to a join that specifies the NATURAL keyword.</source>
          <target state="translated">join-operatorにNATURALキーワードがある場合、暗黙のUSING句がjoin-constraintsに追加されます。暗黙のUSING句は、左手と右手の入力データセットに現れる列名をそれぞれ含みます。左手と右手の入力データセットに共通の列名がない場合、NATURALキーワードは結合結果に影響しません。NATURALキーワードを指定した結合には、USING句やON句を追加してはいけません。</target>
        </trans-unit>
        <trans-unit id="a2b9577c2b86e52c07b264eb7017d085b143b677" translate="yes" xml:space="preserve">
          <source>If the Nth column returned by the statement is an expression or subquery and is not a column value, then all of these functions return NULL. These routine might also return NULL if a memory allocation error occurs. Otherwise, they return the name of the attached database, table, or column that query result column was extracted from.</source>
          <target state="translated">ステートメントによって返されたN番目の列が式または副問い合わせであり、列の値ではない場合、これらの関数はすべてNULLを返します。また、これらのルーチンは、メモリ割り当てエラーが発生した場合にもNULLを返す場合があります。それ以外の場合は、クエリ結果カラムが抽出されたアタッチされたデータベース、テーブル、またはカラムの名前を返します。</target>
        </trans-unit>
        <trans-unit id="f987b1e749686c5439c4369e9509e69172835e8f" translate="yes" xml:space="preserve">
          <source>If the OPFLAG_AUXDELETE bit is set on P5, that indicates that this delete one of several associated with deleting a table row and all its associated index entries. Exactly one of those deletes is the &quot;primary&quot; delete. The others are all on OPFLAG_FORDELETE cursors or else are marked with the AUXDELETE flag.</source>
          <target state="translated">P5 で OPFLAG_AUXDELETE ビットが設定されている場合、この削除は、テーブル行とそれに関連付けられたすべてのインデックス項目の削除に関連する複数の削除のうちの 1 つであることを示しています。これらの削除のうちの1つは、まさに &quot;プライマリ &quot;削除です。他の削除はすべて OPFLAG_FORDELETE カーソル上にあるか、AUXDELETE フラグでマークされています。</target>
        </trans-unit>
        <trans-unit id="2e0584b25ae53697595c710240b674cfcd931b66" translate="yes" xml:space="preserve">
          <source>If the OPFLAG_ISUPDATE flag is set in P2, then P3 contains the address of the memory cell that contains the value that the rowid of the row will be set to by the update.</source>
          <target state="translated">P2にOPFLAG_ISUPDATEフラグがセットされている場合、P3には、その行のROWIDが更新によって設定される値を含むメモリセルのアドレスが格納される。</target>
        </trans-unit>
        <trans-unit id="85453347b772792d0ef83ca6247504c978601416" translate="yes" xml:space="preserve">
          <source>If the OPFLAG_ISUPDATE flag is set, then this opcode is part of an UPDATE operation. Otherwise (if the flag is clear) then this opcode is part of an INSERT operation. The difference is only important to the update hook.</source>
          <target state="translated">OPFLAG_ISUPDATEフラグがセットされている場合、このオペコードはUPDATE操作の一部である。そうでない場合(フラグがクリアされている場合)、このオペコードは INSERT 操作の一部となります。この違いは、UPDATEフックにとってのみ重要です。</target>
        </trans-unit>
        <trans-unit id="358930ea0c0cb3bf8ddbac06391138cf9e1e9b1f" translate="yes" xml:space="preserve">
          <source>If the OPFLAG_LENGTHARG and OPFLAG_TYPEOFARG bits are set on P5 then the result is guaranteed to only be used as the argument of a length() or typeof() function, respectively. The loading of large blobs can be skipped for length() and all content loading can be skipped for typeof().</source>
          <target state="translated">P5 で OPFLAG_LENGTHARG および OPFLAG_TYPEOFARG ビッ トが設定されている場合、その結果はそれぞれ length()または typeof()関数の引数としてのみ使用されることが保証されます。length()では大きなブロブの読み込みを省略でき、typeof()ではすべての内容の読み込みを省略できます。</target>
        </trans-unit>
        <trans-unit id="b673a87eca1e30fb0e05ce7b3a0e2e621baf2f1c" translate="yes" xml:space="preserve">
          <source>If the OPFLAG_NCHANGE flag of P2 (NB: P2 not P5) is set, then the row change count is incremented (otherwise not).</source>
          <target state="translated">P2(NB:P5ではなくP2)のOPFLAG_NCHANGEフラグがセットされている場合は、行の変更回数がインクリメントされます(そうでない場合はインクリメントされません)。</target>
        </trans-unit>
        <trans-unit id="8006bf0580f0ceee7abfbb502ff0bc2738a32586" translate="yes" xml:space="preserve">
          <source>If the OPFLAG_NCHANGE flag of P5 is set, then the row change count is incremented (otherwise not). If the OPFLAG_LASTROWID flag of P5 is set, then rowid is stored for subsequent return by the sqlite3_last_insert_rowid() function (otherwise it is unmodified).</source>
          <target state="translated">P5のOPFLAG_NCHANGEフラグがセットされている場合、行の変更回数がインクリメントされます(そうでない場合はインクリメントされません)。P5のOPFLAG_LASTROWIDフラグがセットされている場合、行IDはsqlite3_last_insert_rowid()関数によって返されるために保存されます(それ以外の場合は変更されません)。</target>
        </trans-unit>
        <trans-unit id="0464f564c819708fc95ba0ca873e884f00c0c5ec" translate="yes" xml:space="preserve">
          <source>If the OPFLAG_SAVEPOSITION bit of the P5 parameter is set, then the cursor will be left pointing at either the next or the previous record in the table. If it is left pointing at the next record, then the next &lt;a href=&quot;opcode#Next&quot;&gt;Next&lt;/a&gt; instruction will be a no-op. As a result, in this case it is ok to delete a record from within a &lt;a href=&quot;opcode#Next&quot;&gt;Next&lt;/a&gt; loop. If OPFLAG_SAVEPOSITION bit of P5 is clear, then the cursor will be left in an undefined state.</source>
          <target state="translated">P5パラメータのOPFLAG_SAVEPOSITIONビットが設定されている場合、カーソルはテーブル内の次のレコードまたは前のレコードのいずれかに置かれたままになります。次のレコードをポイントしたままにすると、次の&lt;a href=&quot;opcode#Next&quot;&gt;Next&lt;/a&gt;命令はノーオペレーションになります。その結果、この場合、&lt;a href=&quot;opcode#Next&quot;&gt;Next&lt;/a&gt;ループ内からレコードを削除しても問題ありません。P5のOPFLAG_SAVEPOSITIONビットがクリアされている場合、カーソルは未定義の状態のままになります。</target>
        </trans-unit>
        <trans-unit id="b8443bd622375a798ed2a10b2bb936621afb5e73" translate="yes" xml:space="preserve">
          <source>If the OPFLAG_USESEEKRESULT flag of P5 is set, the implementation might run faster by avoiding an unnecessary seek on cursor P1. However, the OPFLAG_USESEEKRESULT flag must only be set if there have been no prior seeks on the cursor or if the most recent seek used a key equal to P3.</source>
          <target state="translated">P5のOPFLAG_USESEEKRESULTフラグがセットされている場合、カーソルP1への不要なシークを回避することで、実装はより速く実行されるかもしれない。しかし、OPFLAG_USESEEKRESULTフラグは、カーソル上に前のシークがない場合、または最新のシークがP3と等しいキーを使用している場合にのみ設定されなければならない。</target>
        </trans-unit>
        <trans-unit id="24d1994d6156f999d1ee517ed391edb59d48c618" translate="yes" xml:space="preserve">
          <source>If the OPFLAG_USESEEKRESULT flag of P5 is set, the implementation might run faster by avoiding an unnecessary seek on cursor P1. However, the OPFLAG_USESEEKRESULT flag must only be set if there have been no prior seeks on the cursor or if the most recent seek used a key equivalent to P2.</source>
          <target state="translated">P5のOPFLAG_USESEEKRESULTフラグがセットされている場合、カーソルP1への不要なシークを回避することで、実装はより速く実行されるかもしれない。しかし、OPFLAG_USESEEKRESULTフラグは、カーソル上に先行シークがない場合、または直近のシークがP2と同等のキーを使用している場合にのみ設定されなければならない。</target>
        </trans-unit>
        <trans-unit id="1f2be7bea7738f3621eca4267ce81f09d41a2e23" translate="yes" xml:space="preserve">
          <source>If the ORDER BY expression is a constant integer K then the expression is considered an alias for the K-th column of the result set (columns are numbered from left to right starting with 1).</source>
          <target state="translated">ORDER BY式が定数整数Kの場合、式は結果集合のK番目の列のエイリアスとみなされます(列は左から1で始まる番号が付けられます)。</target>
        </trans-unit>
        <trans-unit id="54b7818868eb0e39bd8ddbed56195f5499a4600b" translate="yes" xml:space="preserve">
          <source>If the ORDER BY expression is an identifier that corresponds to the alias of one of the output columns, then the expression is considered an alias for that column.</source>
          <target state="translated">ORDER BY式が出力列の1つのエイリアスに対応する識別子である場合、その式はその列のエイリアスとみなされます。</target>
        </trans-unit>
        <trans-unit id="00fdbe0ee21cda19b4a8ae7897474539b1f0a75c" translate="yes" xml:space="preserve">
          <source>If the ORDER BY expression is assigned a collation sequence using the postfix &lt;a href=&quot;lang_expr#collateop&quot;&gt;COLLATE operator&lt;/a&gt;, then the specified collation sequence is used.</source>
          <target state="translated">ORDER BY式に、後&lt;a href=&quot;lang_expr#collateop&quot;&gt;置COLLATE演算子&lt;/a&gt;を使用して照合シーケンスが割り当てられている場合、指定された照合シーケンスが使用されます。</target>
        </trans-unit>
        <trans-unit id="d77a3e5eca6240aa4cf73a2d563a4460d778268d" translate="yes" xml:space="preserve">
          <source>If the P1 cursor must be pointing to a valid row (not a NULL row) of a real table, not a pseudo-table.</source>
          <target state="translated">P1カーソルが擬似テーブルではなく、実テーブルの有効な行(NULL行ではない)を指していなければなりません。</target>
        </trans-unit>
        <trans-unit id="1f5366d1e68bed932cc9eadcf38bc5c4aed05e24" translate="yes" xml:space="preserve">
          <source>If the P1 index entry is greater than or equal to the key value then jump to P2. Otherwise fall through to the next instruction.</source>
          <target state="translated">P1 インデックスエントリがキー値以上の場合は、P2 にジャンプします。それ以外の場合は、次の命令にフォールスルーします。</target>
        </trans-unit>
        <trans-unit id="eb12e9cd16de01f1875169ba7dbce89a734843ad" translate="yes" xml:space="preserve">
          <source>If the P1 index entry is greater than the key value then jump to P2. Otherwise fall through to the next instruction.</source>
          <target state="translated">P1 インデックスエントリがキー値より大きい場合は、P2 にジャンプします。それ以外の場合は、次の命令にフォールスルーします。</target>
        </trans-unit>
        <trans-unit id="dbe830f25814f54ccec56a9eb14db5b310130922" translate="yes" xml:space="preserve">
          <source>If the P1 index entry is less than or equal to the key value then jump to P2. Otherwise fall through to the next instruction.</source>
          <target state="translated">P1 インデックスエントリがキー値以下の場合は、P2 にジャンプします。それ以外の場合は、次の命令にフォールスルーします。</target>
        </trans-unit>
        <trans-unit id="a25915e27b156d98cb891f738fe575b0c439ae6a" translate="yes" xml:space="preserve">
          <source>If the P1 index entry is less than the key value then jump to P2. Otherwise fall through to the next instruction.</source>
          <target state="translated">P1 インデックスエントリがキー値より小さい場合は、P2 にジャンプします。それ以外の場合は、次の命令にフォールスルーします。</target>
        </trans-unit>
        <trans-unit id="64d6010c68c3d803b2d20f7d66e38f73be2fb061" translate="yes" xml:space="preserve">
          <source>If the P1 value is non-zero, then also set the MEM_Cleared flag so that NULL values will not compare equal even if SQLITE_NULLEQ is set on &lt;a href=&quot;opcode#Ne&quot;&gt;Ne&lt;/a&gt; or &lt;a href=&quot;opcode#Eq&quot;&gt;Eq&lt;/a&gt;.</source>
          <target state="translated">P1値がゼロ以外の場合は、MEM_Clearedフラグも設定して、SQLITE_NULLEQが&lt;a href=&quot;opcode#Ne&quot;&gt;Ne&lt;/a&gt;または&lt;a href=&quot;opcode#Eq&quot;&gt;Eqに&lt;/a&gt;設定されている場合でも、NULL値が等しくならないようにします。</target>
        </trans-unit>
        <trans-unit id="f14a9a47b078e93cd304b6691cdab49407396c8d" translate="yes" xml:space="preserve">
          <source>If the P3 value is non-zero, then the table referred to must be an intkey table (an SQL table, not an index). In this case the row change count is incremented by the number of rows in the table being cleared. If P3 is greater than zero, then the value stored in register P3 is also incremented by the number of rows in the table being cleared.</source>
          <target state="translated">P3 の値が 0 以外の場合、参照するテーブルは intkey テーブル (インデックスではなく SQL テーブル)でなければなりません。この場合、行の変更カウントは、クリアされるテーブルの行数だけインクリメントされます。P3が0より大きい場合、レジスタP3に格納されている値も、クリアされるテーブルの行数だけインクリメントされます。</target>
        </trans-unit>
        <trans-unit id="d8742c4d987b7b8bb8b01f7cdaee658b0bce0f67" translate="yes" xml:space="preserve">
          <source>If the REINDEX keyword is followed by a collation-sequence name, then all indices in all attached databases that use the named collation sequences are recreated.</source>
          <target state="translated">REINDEX キーワードの後に照合順序名を付けると、名前付き照合順序を使用するすべてのアタッチされたデータベースのすべてのインデックスが再作成されます。</target>
        </trans-unit>
        <trans-unit id="89611a3566f7e2d206b997930c668d8b59f61d02" translate="yes" xml:space="preserve">
          <source>If the REINDEX keyword is not followed by a collation-sequence or database object identifier, then all indices in all attached databases are rebuilt.</source>
          <target state="translated">REINDEX キーワードの後に照合順序またはデータベース・オブジェクト識別子が続いていない場合、すべてのアタッチされたデータベースのすべてのインデックスが再構築されます。</target>
        </trans-unit>
        <trans-unit id="95360c5e4a315542249137c79e8a2d6b511f7fdc" translate="yes" xml:space="preserve">
          <source>If the SELECT statement is &lt;b&gt;a non-aggregate query&lt;/b&gt;, then each expression in the result expression list is evaluated for each row in the dataset filtered by the WHERE clause.</source>
          <target state="translated">SELECTステートメントが&lt;b&gt;非集計クエリの&lt;/b&gt;場合、結果式リストの各式は、WHERE句でフィルタリングされたデータセットの各行に対して評価されます。</target>
        </trans-unit>
        <trans-unit id="869026a04188f9191fbf03ed77ea46ac1ecc8cb4" translate="yes" xml:space="preserve">
          <source>If the SELECT statement is &lt;b&gt;an aggregate query with a GROUP BY&lt;/b&gt; clause, then each of the expressions specified as part of the GROUP BY clause is evaluated for each row of the dataset. Each row is then assigned to a &quot;group&quot; based on the results; rows for which the results of evaluating the GROUP BY expressions are the same get assigned to the same group. For the purposes of grouping rows, NULL values are considered equal. The usual rules for &lt;a href=&quot;datatype3#collation&quot;&gt;selecting a collation sequence&lt;/a&gt; with which to compare text values apply when evaluating expressions in a GROUP BY clause. The expressions in the GROUP BY clause do &lt;em&gt;not&lt;/em&gt; have to be expressions that appear in the result. The expressions in a GROUP BY clause may not be aggregate expressions.</source>
          <target state="translated">SELECTステートメントが&lt;b&gt;GROUP BY&lt;/b&gt;句&lt;b&gt;を含む集計クエリの&lt;/b&gt;場合、&lt;b&gt;GROUP BY&lt;/b&gt;句の一部として指定された各式は、データセットの各行に対して評価されます。各行は、結果に基づいて「グループ」に割り当てられます。 GROUP BY式の評価結果が同じである行は、同じグループに割り当てられます。行をグループ化するために、NULL値は等しいと見なされます。テキスト値を比較&lt;a href=&quot;datatype3#collation&quot;&gt;する照合シーケンス&lt;/a&gt;を選択するための通常のルールは、GROUP BY句の式を評価するときに適用されます。 GROUP BY句の式は、結果に表示される式である必要&lt;em&gt;は&lt;/em&gt;ありませ&lt;em&gt;ん&lt;/em&gt;。 GROUP BY句の式は、集約式ではない場合があります。</target>
        </trans-unit>
        <trans-unit id="5f32b910ff370c514af729f0255dcd885c666376" translate="yes" xml:space="preserve">
          <source>If the SELECT statement is &lt;b&gt;an aggregate query without a GROUP BY&lt;/b&gt; clause, then each aggregate expression in the result-set is evaluated once across the entire dataset. Each non-aggregate expression in the result-set is evaluated once for an arbitrarily selected row of the dataset. The same arbitrarily selected row is used for each non-aggregate expression. Or, if the dataset contains zero rows, then each non-aggregate expression is evaluated against a row consisting entirely of NULL values.</source>
          <target state="translated">SELECTステートメントが&lt;b&gt;GROUP BY&lt;/b&gt;句の&lt;b&gt;ない集計クエリ&lt;/b&gt;で&lt;b&gt;ある&lt;/b&gt;場合、結果セットの各集計式は、データセット全体で1回評価されます。結果セット内の各非集計式は、データセットの任意に選択された行に対して1回評価されます。任意に選択された同じ行が、非集計式ごとに使用されます。または、データセットにゼロ行が含まれている場合、各非集計式は、完全にNULL値で構成される行に対して評価されます。</target>
        </trans-unit>
        <trans-unit id="14209330d1f571e7543dcd8d5633bd2d841dd6e1" translate="yes" xml:space="preserve">
          <source>If the SELECT statement specified as part of the CREATE VIRTUAL TABLE command returns five columns, then the final column is used for application context only. Swarmvtab does not use this value at all, except that it is passed after &amp;lt;database-name&amp;gt; to both the openclose and missing functions, if specified. In other words, instead of invoking the functions as described above, if the &quot;context&quot; column is present swarmvtab instead invokes:</source>
          <target state="translated">CREATE VIRTUAL TABLEコマンドの一部として指定されたSELECTステートメントが5つの列を返す場合、最後の列はアプリケーションコンテキストにのみ使用されます。Swarmvtabはこの値をまったく使用しません。ただし、&amp;lt;database-name&amp;gt;の後に、指定されている場合、openclose関数と不足している関数の両方に渡されます。言い換えると、上記の関数を呼び出す代わりに、「context」列が存在する場合、swarmvtabは代わりに以下を呼び出します。</target>
        </trans-unit>
        <trans-unit id="40411dedc1ef7864197c263597ddfac1b246cd97" translate="yes" xml:space="preserve">
          <source>If the SQL COMMIT command turns autocommit on and the autocommit logic then tries to commit change but fails because some other process is holding a SHARED lock, then autocommit is turned back off automatically. This allows the user to retry the COMMIT at a later time after the SHARED lock has had an opportunity to clear.</source>
          <target state="translated">SQL COMMITコマンドでオートコミットをオンにした後、他のプロセスがSHAREDロックを保持しているためにオートコミットロジックが変更をコミットしようとして失敗した場合、オートコミットは自動的にオフに戻されます。これにより、SHAREDロックがクリアされた後、後でCOMMITを再試行することができます。</target>
        </trans-unit>
        <trans-unit id="507b41df5b9644d0a599bc2c2ba64c3ea6d21fd9" translate="yes" xml:space="preserve">
          <source>If the SQL statement being executed returns any data, then &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_ROW&lt;/a&gt; is returned each time a new row of data is ready for processing by the caller. The values may be accessed using the &lt;a href=&quot;#sqlite3_column_blob&quot;&gt;column access functions&lt;/a&gt;. sqlite3_step() is called again to retrieve the next row of data.</source>
          <target state="translated">実行中のSQLステートメントがデータを返す場合、呼び出し元が新しいデータ行を処理する準備ができるたびに、&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_ROW&lt;/a&gt;が返されます。値には、&lt;a href=&quot;#sqlite3_column_blob&quot;&gt;列アクセス関数&lt;/a&gt;を使用してアクセスできます。sqlite3_step（）は、データの次の行を取得するために再度呼び出されます。</target>
        </trans-unit>
        <trans-unit id="ae2787ab5fa2a6425b73b07a4b0ad6b9f341262a" translate="yes" xml:space="preserve">
          <source>If the SQL statement being executed returns any data, then &lt;a href=&quot;../rescode#row&quot;&gt;SQLITE_ROW&lt;/a&gt; is returned each time a new row of data is ready for processing by the caller. The values may be accessed using the &lt;a href=&quot;column_blob&quot;&gt;column access functions&lt;/a&gt;. sqlite3_step() is called again to retrieve the next row of data.</source>
          <target state="translated">実行中のSQLステートメントがデータを返す場合、呼び出し元が新しいデータ行を処理する準備ができるたびに、&lt;a href=&quot;../rescode#row&quot;&gt;SQLITE_ROW&lt;/a&gt;が返されます。値には、&lt;a href=&quot;column_blob&quot;&gt;列アクセス関数&lt;/a&gt;を使用してアクセスできます。sqlite3_step（）は、データの次の行を取得するために再度呼び出されます。</target>
        </trans-unit>
        <trans-unit id="95d391fa1b14c12c13b7ff2232dd79f1ad704028" translate="yes" xml:space="preserve">
          <source>If the SQL statement does not currently point to a valid row, or if the column index is out of range, the result is undefined. These routines may only be called when the most recent call to &lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step()&lt;/a&gt; has returned &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_ROW&lt;/a&gt; and neither &lt;a href=&quot;#sqlite3_reset&quot;&gt;sqlite3_reset()&lt;/a&gt; nor &lt;a href=&quot;#sqlite3_finalize&quot;&gt;sqlite3_finalize()&lt;/a&gt; have been called subsequently. If any of these routines are called after &lt;a href=&quot;#sqlite3_reset&quot;&gt;sqlite3_reset()&lt;/a&gt; or &lt;a href=&quot;#sqlite3_finalize&quot;&gt;sqlite3_finalize()&lt;/a&gt; or after &lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step()&lt;/a&gt; has returned something other than &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_ROW&lt;/a&gt;, the results are undefined. If &lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step()&lt;/a&gt; or &lt;a href=&quot;#sqlite3_reset&quot;&gt;sqlite3_reset()&lt;/a&gt; or &lt;a href=&quot;#sqlite3_finalize&quot;&gt;sqlite3_finalize()&lt;/a&gt; are called from a different thread while any of these routines are pending, then the results are undefined.</source>
          <target state="translated">SQLステートメントが現在有効な行を指していない場合、または列インデックスが範囲外の場合、結果は未定義です。これらのルーチンは、唯一の最新の呼び出し時に呼び出すことができ&lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step（）が&lt;/a&gt;戻ってきた&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_ROWを&lt;/a&gt;し、どちらも&lt;a href=&quot;#sqlite3_reset&quot;&gt;sqlite3_reset（）&lt;/a&gt;も&lt;a href=&quot;#sqlite3_finalize&quot;&gt;sqlite3_finalize（）&lt;/a&gt;後に呼び出されました。&lt;a href=&quot;#sqlite3_reset&quot;&gt;sqlite3_reset（）&lt;/a&gt;または&lt;a href=&quot;#sqlite3_finalize&quot;&gt;sqlite3_finalize（）の&lt;/a&gt;後、または&lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step（）&lt;/a&gt;が&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_ROW&lt;/a&gt;以外のものを返した後に、これらのルーチンのいずれかが呼び出された場合、結果は定義されていません。もし&lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step（）&lt;/a&gt;または&lt;a href=&quot;#sqlite3_reset&quot;&gt;sqlite3_reset（）&lt;/a&gt;または&lt;a href=&quot;#sqlite3_finalize&quot;&gt;sqlite3_finalize（）&lt;/a&gt;これらのルーチンのいずれかが保留中に別のスレッドから呼び出された場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="34c305f0b8de32e5d504a58326a82216502c31ad" translate="yes" xml:space="preserve">
          <source>If the SQL statement does not currently point to a valid row, or if the column index is out of range, the result is undefined. These routines may only be called when the most recent call to &lt;a href=&quot;step&quot;&gt;sqlite3_step()&lt;/a&gt; has returned &lt;a href=&quot;../rescode#row&quot;&gt;SQLITE_ROW&lt;/a&gt; and neither &lt;a href=&quot;reset&quot;&gt;sqlite3_reset()&lt;/a&gt; nor &lt;a href=&quot;finalize&quot;&gt;sqlite3_finalize()&lt;/a&gt; have been called subsequently. If any of these routines are called after &lt;a href=&quot;reset&quot;&gt;sqlite3_reset()&lt;/a&gt; or &lt;a href=&quot;finalize&quot;&gt;sqlite3_finalize()&lt;/a&gt; or after &lt;a href=&quot;step&quot;&gt;sqlite3_step()&lt;/a&gt; has returned something other than &lt;a href=&quot;../rescode#row&quot;&gt;SQLITE_ROW&lt;/a&gt;, the results are undefined. If &lt;a href=&quot;step&quot;&gt;sqlite3_step()&lt;/a&gt; or &lt;a href=&quot;reset&quot;&gt;sqlite3_reset()&lt;/a&gt; or &lt;a href=&quot;finalize&quot;&gt;sqlite3_finalize()&lt;/a&gt; are called from a different thread while any of these routines are pending, then the results are undefined.</source>
          <target state="translated">SQLステートメントが現在有効な行を指していない場合、または列インデックスが範囲外の場合、結果は未定義です。これらのルーチンは、唯一の最新の呼び出し時に呼び出すことができ&lt;a href=&quot;step&quot;&gt;sqlite3_step（）が&lt;/a&gt;戻ってきた&lt;a href=&quot;../rescode#row&quot;&gt;SQLITE_ROWを&lt;/a&gt;し、どちらも&lt;a href=&quot;reset&quot;&gt;sqlite3_reset（）&lt;/a&gt;も&lt;a href=&quot;finalize&quot;&gt;sqlite3_finalize（）&lt;/a&gt;後に呼び出されました。&lt;a href=&quot;reset&quot;&gt;sqlite3_reset（）&lt;/a&gt;または&lt;a href=&quot;finalize&quot;&gt;sqlite3_finalize（）の&lt;/a&gt;後、または&lt;a href=&quot;step&quot;&gt;sqlite3_step（）&lt;/a&gt;が&lt;a href=&quot;../rescode#row&quot;&gt;SQLITE_ROW&lt;/a&gt;以外のものを返した後に、これらのルーチンのいずれかが呼び出された場合、結果は定義されていません。もし&lt;a href=&quot;step&quot;&gt;sqlite3_step（）&lt;/a&gt;または&lt;a href=&quot;reset&quot;&gt;sqlite3_reset（）&lt;/a&gt;または&lt;a href=&quot;finalize&quot;&gt;sqlite3_finalize（）&lt;/a&gt;これらのルーチンのいずれかが保留中に別のスレッドから呼び出された場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="975432fbe3b7571414ef3444c9bae0dbbb675815" translate="yes" xml:space="preserve">
          <source>If the SQLITE_DESERIALIZE_FREEONCLOSE bit is set in F, then SQLite will invoke sqlite3_free() on the serialization buffer when the database connection closes. If the SQLITE_DESERIALIZE_RESIZEABLE bit is set, then SQLite will try to increase the buffer size using sqlite3_realloc64() if writes on the database cause it to grow larger than M bytes.</source>
          <target state="translated">SQLITE_DESERIALIZE_FREEONCLOSEビットがFにセットされている場合、SQLiteはデータベース接続が閉じたときにシリアライズバッファ上でsqlite3_free()を呼び出します。SQLITE_DESERIALIZE_RESIZEABLEビットがセットされている場合、SQLiteはデータベースへの書き込みによりバッファサイズがMバイトよりも大きくなった場合、sqlite3_realloc64()を使用してバッファサイズを増やそうとします。</target>
        </trans-unit>
        <trans-unit id="ea23bbe6e0f5cd400c470a465a873018f1aa3b8b" translate="yes" xml:space="preserve">
          <source>If the SQLITE_JUMPIFNULL bit of P5 is set and either reg(P1) or reg(P3) is NULL then the take the jump. If the SQLITE_JUMPIFNULL bit is clear then fall through if either operand is NULL.</source>
          <target state="translated">P5のSQLITE_JUMPIFNULLビットがセットされていて、reg(P1)またはreg(P3)のいずれかがNULLであれば、ジャンプを行います。SQLITE_JUMPIFNULLビットがクリアされている場合は、オペランドのいずれかがNULLであればフォールスルーします。</target>
        </trans-unit>
        <trans-unit id="d13a5c515dea25bad07a7535880df286b04090a5" translate="yes" xml:space="preserve">
          <source>If the SQLite library is compiled without the NDEBUG preprocessor macro, then the PRAGMA &lt;a href=&quot;pragma#pragma_vdbe_trace&quot;&gt;vdbe_trace &lt;/a&gt; causes the VDBE to trace the execution of programs. Though this feature was originally intended for testing and debugging, it can also be useful in learning about how the VDBE operates. Use &quot;&lt;code&gt;PRAGMA vdbe_trace=ON;&lt;/code&gt;&quot; to turn tracing on and &quot;&lt;code&gt;PRAGMA vdbe_trace=OFF&lt;/code&gt;&quot; to turn tracing back off. Like this:</source>
          <target state="translated">SQLiteライブラリがNDEBUGプリプロセッサマクロなしでコンパイルされている場合、PRAGMA &lt;a href=&quot;pragma#pragma_vdbe_trace&quot;&gt;vdbe_trace&lt;/a&gt;によってVDBEがプログラムの実行をトレースします。この機能は元々テストとデバッグを目的としたものでしたが、VDBEの動作方法を学ぶのにも役立ちます。「 &lt;code&gt;PRAGMA vdbe_trace=ON;&lt;/code&gt; 」を使用してトレースをオンにし、「 &lt;code&gt;PRAGMA vdbe_trace=OFF&lt;/code&gt; 」を使用してトレースをオフに戻します。このような：</target>
        </trans-unit>
        <trans-unit id="2b55abf3573b260c179e3130856801dc205be5f3" translate="yes" xml:space="preserve">
          <source>If the UNIQUE keyword appears between CREATE and INDEX then duplicate index entries are not allowed. Any attempt to insert a duplicate entry will result in an error. For the purposes of unique indices, all NULL values are considered different from all other NULL values and are thus unique. This is one of the two possible interpretations of the SQL-92 standard (the language in the standard is ambiguous) and is the interpretation followed by PostgreSQL, MySQL, Firebird, and Oracle. Informix and Microsoft SQL Server follow the other interpretation of the standard.</source>
          <target state="translated">CREATEとINDEXの間にUNIQUEキーワードが現れた場合、インデックス項目の重複は許可されません。重複した項目を挿入しようとするとエラーになります。一意なインデックスの目的では、すべてのNULL値は他のすべてのNULL値とは異なるものとみなされ、したがって一意です。これはSQL-92標準の2つの解釈のうちの1つであり(標準の言語は曖昧です)、PostgreSQL、MySQL、Firebird、Oracleが採用している解釈です。Informix と Microsoft SQL Server は、もう一方の解釈に従っています。</target>
        </trans-unit>
        <trans-unit id="302753955d8021d9d751890a4a62678a7bd1dc4c" translate="yes" xml:space="preserve">
          <source>If the UPDATE operation is attempted, but SQLite returns SQLITE_CONSTRAINT, the conflict-handler function is invoked with &lt;a href=&quot;#SQLITE_CHANGESET_CONFLICT&quot;&gt;SQLITE_CHANGESET_CONSTRAINT&lt;/a&gt; passed as the second argument. This includes the case where the UPDATE operation is attempted after an earlier call to the conflict handler function returned &lt;a href=&quot;#SQLITE_CHANGESET_ABORT&quot;&gt;SQLITE_CHANGESET_REPLACE&lt;/a&gt;.</source>
          <target state="translated">UPDATE操作を試みてもSQLiteがSQLITE_CONSTRAINTを返す場合、2番目の引数として&lt;a href=&quot;#SQLITE_CHANGESET_CONFLICT&quot;&gt;SQLITE_CHANGESET_CONSTRAINTを&lt;/a&gt;渡して競合ハンドラ関数が呼び出されます。これには、競合ハンドラー関数への以前の呼び出しが&lt;a href=&quot;#SQLITE_CHANGESET_ABORT&quot;&gt;SQLITE_CHANGESET_REPLACEを&lt;/a&gt;返した後にUPDATE操作が試行された場合が含まれます。</target>
        </trans-unit>
        <trans-unit id="40c8985574cc4136a7a40f15001ace597cd448e0" translate="yes" xml:space="preserve">
          <source>If the UPDATE operation is attempted, but SQLite returns SQLITE_CONSTRAINT, the conflict-handler function is invoked with &lt;a href=&quot;c_changeset_conflict&quot;&gt;SQLITE_CHANGESET_CONSTRAINT&lt;/a&gt; passed as the second argument. This includes the case where the UPDATE operation is attempted after an earlier call to the conflict handler function returned &lt;a href=&quot;c_changeset_abort&quot;&gt;SQLITE_CHANGESET_REPLACE&lt;/a&gt;.</source>
          <target state="translated">UPDATE操作を試みてもSQLiteがSQLITE_CONSTRAINTを返す場合、2番目の引数として&lt;a href=&quot;c_changeset_conflict&quot;&gt;SQLITE_CHANGESET_CONSTRAINTを&lt;/a&gt;渡して競合ハンドラ関数が呼び出されます。これには、競合ハンドラー関数への以前の呼び出しが&lt;a href=&quot;c_changeset_abort&quot;&gt;SQLITE_CHANGESET_REPLACEを&lt;/a&gt;返した後にUPDATE操作が試行された場合が含まれます。</target>
        </trans-unit>
        <trans-unit id="751229ce68d5f9fb206ae67bb99718de4be423dd" translate="yes" xml:space="preserve">
          <source>If the UPDATE statement does not have a WHERE clause, all rows in the table are modified by the UPDATE. Otherwise, the UPDATE affects only those rows for which the WHERE clause &lt;a href=&quot;lang_expr#booleanexpr&quot;&gt;boolean expression is true&lt;/a&gt;. It is not an error if the WHERE clause does not evaluate to true for any row in the table - this just means that the UPDATE statement affects zero rows.</source>
          <target state="translated">UPDATEステートメントにWHERE句がない場合、テーブル内のすべての行がUPDATEによって変更されます。それ以外の場合、UPDATEは、WHERE句の&lt;a href=&quot;lang_expr#booleanexpr&quot;&gt;ブール式がtrue&lt;/a&gt;である行にのみ影響します。WHERE句がテーブルのどの行に対してもtrueと評価されない場合でもエラーではありません。これは、UPDATEステートメントが影響を受ける行がないことを意味します。</target>
        </trans-unit>
        <trans-unit id="074562fe8dfabc7ba122942fddf559f05fa48e31" translate="yes" xml:space="preserve">
          <source>If the UPDATE statement has no ORDER BY clause, then all rows that would be updated in the absence of the LIMIT clause are assembled in an arbitrary order before applying the LIMIT and OFFSET clauses to determine which are actually updated.</source>
          <target state="translated">UPDATE文にORDER BY句がない場合、LIMIT句がない場合に更新されるすべての行は、LIMIT句とOFFSET句を適用して実際に更新される行を決定する前に、任意の順序で組み立てられます。</target>
        </trans-unit>
        <trans-unit id="0ee1b94b95429e744f462704efa364a50f2413f6" translate="yes" xml:space="preserve">
          <source>If the WAL-index is implemented as a memory-mapped file and that file is read-only to the first thread to connect, then that thread creates an private heap-memory ersazt WAL-index and runs the recovery routine to populate that private WAL-index. The same data results, but it is held privately rather that being written into the public shared memory area.</source>
          <target state="translated">WAL-index がメモリマップされたファイルとして実装されており、そのファイルが最初に接続するスレッドに対して読み取り専用である場合、そのスレッドはプライベートなヒープメモリの ersazt WAL-index を作成し、そのプライベートな WAL-index を埋めるためにリカバリールーチンを実行します。同じデータの結果が得られるが、それはパブリックな共有メモリ領域に書き込まれるのではなく、プライベートに保持される。</target>
        </trans-unit>
        <trans-unit id="7648c2d70dafce18f6cb4ef634247a503d61eeca" translate="yes" xml:space="preserve">
          <source>If the WHERE clause evaluates to FALSE, then skip the steps that follow and continue to the next record.</source>
          <target state="translated">WHERE 句が FALSE と評価された場合は、次のステップをスキップして次のレコードに進みます。</target>
        </trans-unit>
        <trans-unit id="37f61285fabc2a1caf8acf5c9c00c9ccc80b5f28" translate="yes" xml:space="preserve">
          <source>If the WHERE clause is not present, all records in the table are deleted. If a WHERE clause is supplied, then only those rows for which the WHERE clause &lt;a href=&quot;lang_expr#booleanexpr&quot;&gt;boolean expression&lt;/a&gt; is true are deleted. Rows for which the expression is false or NULL are retained.</source>
          <target state="translated">WHERE句が存在しない場合、テーブル内のすべてのレコードが削除されます。WHERE句が指定されている場合、WHERE句の&lt;a href=&quot;lang_expr#booleanexpr&quot;&gt;ブール式&lt;/a&gt;がtrue である行のみが削除されます。式がfalseまたはNULLの行は保持されます。</target>
        </trans-unit>
        <trans-unit id="7ecdfb78c909bf7386760f4b8a9af44a0acb2a2c" translate="yes" xml:space="preserve">
          <source>If the WHERE clause of a query contains an OR expression, then SQLite might use the &lt;a href=&quot;queryplanner#or_in_where&quot;&gt;&quot;OR by union&quot;&lt;/a&gt; strategy (also known as the &lt;a href=&quot;optoverview#or_opt&quot;&gt;OR optimization&lt;/a&gt;). In this case there will be single top-level record for the search, with two sub-records, one for each index:</source>
          <target state="translated">クエリのWHERE句にOR式が含まれている場合、SQLiteは&lt;a href=&quot;queryplanner#or_in_where&quot;&gt;「OR by union」&lt;/a&gt;戦略（&lt;a href=&quot;optoverview#or_opt&quot;&gt;OR最適化と&lt;/a&gt;も呼ばれます）を使用する場合があります。この場合、検索には単一のトップレベルレコードがあり、各インデックスに1つずつ、2つのサブレコードがあります。</target>
        </trans-unit>
        <trans-unit id="74877c4dea96c98f4b3c0b669711d0dd7770d2b9" translate="yes" xml:space="preserve">
          <source>If the _HAVE_SQLITE_CONFIG_H macro is defined then the SQLite source code will attempt to #include a file named &quot;config.h&quot;. The &quot;config.h&quot; file usually contains other configuration options, especially &quot;HAVE_</source>
          <target state="translated">マクロ _HAVE_SQLITE_CONFIG_H が定義されている場合、SQLite のソースコードは &quot;config.h&quot; という名前のファイルを#インクルードしようとします。config.h&quot; ファイルには通常、他の設定オプション、特に &quot;HAVE_HAVE_CONFIG_H&quot; が含まれています。</target>
        </trans-unit>
        <trans-unit id="558abcd908b311140ea78da82869118d13cb3c75" translate="yes" xml:space="preserve">
          <source>If the action code is &lt;a href=&quot;#SQLITE_ALTER_TABLE&quot;&gt;SQLITE_READ&lt;/a&gt; and the callback returns &lt;a href=&quot;#SQLITE_DENY&quot;&gt;SQLITE_IGNORE&lt;/a&gt; then the &lt;a href=&quot;#sqlite3_stmt&quot;&gt;prepared statement&lt;/a&gt; statement is constructed to substitute a NULL value in place of the table column that would have been read if &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OK&lt;/a&gt; had been returned. The &lt;a href=&quot;#SQLITE_DENY&quot;&gt;SQLITE_IGNORE&lt;/a&gt; return can be used to deny an untrusted user access to individual columns of a table. When a table is referenced by a &lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt; but no column values are extracted from that table (for example in a query like &quot;SELECT count(*) FROM tab&quot;) then the &lt;a href=&quot;#SQLITE_ALTER_TABLE&quot;&gt;SQLITE_READ&lt;/a&gt; authorizer callback is invoked once for that table with a column name that is an empty string. If the action code is &lt;a href=&quot;#SQLITE_ALTER_TABLE&quot;&gt;SQLITE_DELETE&lt;/a&gt; and the callback returns &lt;a href=&quot;#SQLITE_DENY&quot;&gt;SQLITE_IGNORE&lt;/a&gt; then the &lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt; operation proceeds but the &lt;a href=&quot;lang_delete#truncateopt&quot;&gt;truncate optimization&lt;/a&gt; is disabled and all rows are deleted individually.</source>
          <target state="translated">アクションコードが&lt;a href=&quot;#SQLITE_ALTER_TABLE&quot;&gt;SQLITE_READ&lt;/a&gt;で、コールバックが&lt;a href=&quot;#SQLITE_DENY&quot;&gt;SQLITE_IGNORE&lt;/a&gt;を返す場合、&lt;a href=&quot;#sqlite3_stmt&quot;&gt;準備されたステートメント&lt;/a&gt;ステートメントは、&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OK&lt;/a&gt;が返された場合に読み取られたであろうテーブル列の代わりにNULL値を置き換えるように構築されます。&lt;a href=&quot;#SQLITE_DENY&quot;&gt;SQLITE_IGNOREの&lt;/a&gt;リターンは、テーブルの個々の列に信頼されないユーザのアクセスを拒否するために使用することができます。テーブルが&lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt;によって参照されているが、そのテーブルから列値が抽出されない場合（たとえば、「SELECT count（*）FROM tab」のようなクエリで）、&lt;a href=&quot;#SQLITE_ALTER_TABLE&quot;&gt;SQLITE_READオーソライザー&lt;/a&gt;コールバックは、次の列名を持つそのテーブルに対して1回呼び出されます。空の文字列です。アクションコードが&lt;a href=&quot;#SQLITE_ALTER_TABLE&quot;&gt;SQLITE_DELETEの&lt;/a&gt;場合コールバックが&lt;a href=&quot;#SQLITE_DENY&quot;&gt;SQLITE_IGNORE&lt;/a&gt;を返すと、&lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt;操作は続行されますが、&lt;a href=&quot;lang_delete#truncateopt&quot;&gt;トランケートの最適化&lt;/a&gt;は無効になり、すべての行が個別に削除されます。</target>
        </trans-unit>
        <trans-unit id="551e501bb088fee5fee1641a8f77e7fc3633f5dd" translate="yes" xml:space="preserve">
          <source>If the action code is &lt;a href=&quot;c_alter_table&quot;&gt;SQLITE_READ&lt;/a&gt; and the callback returns &lt;a href=&quot;c_deny&quot;&gt;SQLITE_IGNORE&lt;/a&gt; then the &lt;a href=&quot;stmt&quot;&gt;prepared statement&lt;/a&gt; statement is constructed to substitute a NULL value in place of the table column that would have been read if &lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OK&lt;/a&gt; had been returned. The &lt;a href=&quot;c_deny&quot;&gt;SQLITE_IGNORE&lt;/a&gt; return can be used to deny an untrusted user access to individual columns of a table. When a table is referenced by a &lt;a href=&quot;../lang_select&quot;&gt;SELECT&lt;/a&gt; but no column values are extracted from that table (for example in a query like &quot;SELECT count(*) FROM tab&quot;) then the &lt;a href=&quot;c_alter_table&quot;&gt;SQLITE_READ&lt;/a&gt; authorizer callback is invoked once for that table with a column name that is an empty string. If the action code is &lt;a href=&quot;c_alter_table&quot;&gt;SQLITE_DELETE&lt;/a&gt; and the callback returns &lt;a href=&quot;c_deny&quot;&gt;SQLITE_IGNORE&lt;/a&gt; then the &lt;a href=&quot;../lang_delete&quot;&gt;DELETE&lt;/a&gt; operation proceeds but the &lt;a href=&quot;../lang_delete#truncateopt&quot;&gt;truncate optimization&lt;/a&gt; is disabled and all rows are deleted individually.</source>
          <target state="translated">アクションコードが&lt;a href=&quot;c_alter_table&quot;&gt;SQLITE_READ&lt;/a&gt;で、コールバックが&lt;a href=&quot;c_deny&quot;&gt;SQLITE_IGNORE&lt;/a&gt;を返す場合、&lt;a href=&quot;stmt&quot;&gt;準備されたステートメント&lt;/a&gt;ステートメントは、&lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OK&lt;/a&gt;が返された場合に読み取られたであろうテーブル列の代わりにNULL値を置き換えるように構築されます。&lt;a href=&quot;c_deny&quot;&gt;SQLITE_IGNOREの&lt;/a&gt;リターンは、テーブルの個々の列に信頼されないユーザのアクセスを拒否するために使用することができます。テーブルが&lt;a href=&quot;../lang_select&quot;&gt;SELECT&lt;/a&gt;によって参照されているが、そのテーブルから列値が抽出されない場合（たとえば、「SELECT count（*）FROM tab」のようなクエリで）、&lt;a href=&quot;c_alter_table&quot;&gt;SQLITE_READオーソライザー&lt;/a&gt;コールバックは、次の列名を持つそのテーブルに対して1回呼び出されます。空の文字列です。アクションコードが&lt;a href=&quot;c_alter_table&quot;&gt;SQLITE_DELETEの&lt;/a&gt;場合コールバックが&lt;a href=&quot;c_deny&quot;&gt;SQLITE_IGNORE&lt;/a&gt;を返すと、&lt;a href=&quot;../lang_delete&quot;&gt;DELETE&lt;/a&gt;操作は続行されますが、&lt;a href=&quot;../lang_delete#truncateopt&quot;&gt;トランケートの最適化&lt;/a&gt;は無効になり、すべての行が個別に削除されます。</target>
        </trans-unit>
        <trans-unit id="e48946c22fc154fe87cb537c121e425dbb9574d0" translate="yes" xml:space="preserve">
          <source>If the application does not use triggers or views, then disable the unused capabilities using:</source>
          <target state="translated">アプリケーションがトリガーやビューを使用しない場合は、使用していない機能を無効にします。</target>
        </trans-unit>
        <trans-unit id="f5d26d8716b0cdd9f988973fac2e73b815006603" translate="yes" xml:space="preserve">
          <source>If the application does use triggers or views, then use queries to scan the &lt;a href=&quot;fileformat2#sqlite_master&quot;&gt;sqlite_master&lt;/a&gt; table to verify that the triggers and views found there are expected, that there are no surplus triggers or views, existing triggers and views have not been tampered with, and that no existing ordinary tables have been replaced by malicious views.</source>
          <target state="translated">アプリケーションがトリガーまたはビューを使用する場合は、クエリを使用して&lt;a href=&quot;fileformat2#sqlite_master&quot;&gt;sqlite_master&lt;/a&gt;テーブルをスキャンし、トリガーとビューが予期されていること、余計なトリガーとビューがないこと、既存のトリガーとビューが改ざんされていないこと、および既存の通常のテーブルは、悪意のあるビューに置き換えられていません。</target>
        </trans-unit>
        <trans-unit id="2469e0f7ca599347e4594642b1d8b0b3f0287081" translate="yes" xml:space="preserve">
          <source>If the application invokes &lt;a href=&quot;c3ref/file_control&quot;&gt;sqlite3_file_control&lt;/a&gt;(&lt;a href=&quot;c3ref/c_fcntl_begin_atomic_write#sqlitefcntlpersistwal&quot;&gt;SQLITE_FCNTL_PERSIST_WAL&lt;/a&gt;) on the database connection prior to closing, then the final checkpoint is still run but the WAL and WAL-index files are not deleted as they normally would be. This leaves the database in a state that allows other processes without write permission on the database, WAL, or WAL-index files to open the database read-only. If the WAL and WAL-index files are missing, then a process that lacks permission to create and initialize those files will not be able to open the database, unless the database is designated as immutable using the &lt;a href=&quot;uri#uriimmutable&quot;&gt;immutable query parameter&lt;/a&gt;.</source>
          <target state="translated">アプリケーションが閉じる前にデータベース接続で&lt;a href=&quot;c3ref/file_control&quot;&gt;sqlite3_file_control&lt;/a&gt;（&lt;a href=&quot;c3ref/c_fcntl_begin_atomic_write#sqlitefcntlpersistwal&quot;&gt;SQLITE_FCNTL_PERSIST_WAL&lt;/a&gt;）を呼び出す場合、最終チェックポイントは引き続き実行されますが、WALおよびWALインデックスファイルは通常どおり削除されません。これにより、データベースは、データベース、WAL、またはWAL-indexファイルに対する書き込み権限のない他のプロセスがデータベースを読み取り専用で開くことができる状態になります。 WALおよびWAL-indexファイルがない場合、これらのファイルを作成および初期化する権限のないプロセスは、データベースが&lt;a href=&quot;uri#uriimmutable&quot;&gt;不変クエリパラメータ&lt;/a&gt;を使用して不変として指定されていない限り、データベースを開くことができません。</target>
        </trans-unit>
        <trans-unit id="0623d9575995bdb9d6c267b0da83f975d16d83ea" translate="yes" xml:space="preserve">
          <source>If the application is designed to manage data in small pieces, then the database should never contain any large strings or BLOBs and hence element 1 above should not be a factor. If the database does contain large strings or BLOBs, they should be read using &lt;a href=&quot;c3ref/blob&quot;&gt;incremental BLOB I/O&lt;/a&gt; and rows that contain the large strings or BLOBs should never be update by any means other than &lt;a href=&quot;c3ref/blob&quot;&gt;incremental BLOB I/O&lt;/a&gt;. Otherwise, the &lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step()&lt;/a&gt; routine will need to read the entire row into contiguous memory at some point, and that will involve at least one large memory allocation.</source>
          <target state="translated">アプリケーションがデータを小さな単位で管理するように設計されている場合、データベースに大きな文字列やBLOBが含まれることは決してないため、上記の要素1は要素になりません。データベースに大きな文字列またはBLOBが含まれている場合は、&lt;a href=&quot;c3ref/blob&quot;&gt;インクリメンタルBLOB I / O&lt;/a&gt;を使用して読み取り、大きな文字列またはBLOBを含む行は&lt;a href=&quot;c3ref/blob&quot;&gt;インクリメンタルBLOB I / O&lt;/a&gt;以外の方法で更新しないでください。それ以外の場合、&lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step（）&lt;/a&gt;ルーチンは、ある時点で行全体を連続したメモリに読み込む必要があり、これには少なくとも1つの大きなメモリ割り当てが含まれます。</target>
        </trans-unit>
        <trans-unit id="d0ebb1eaae39f6046644fb7a5c8e50db080966a3" translate="yes" xml:space="preserve">
          <source>If the application or host computer crashes before the transaction completes, then the rollback journal or write-ahead log contains information needed to restore the main database file to a consistent state. When a rollback journal or write-ahead log contains information necessary for recovering the state of the database, they are called a &quot;hot journal&quot; or &quot;hot WAL file&quot;. Hot journals and WAL files are only a factor during error recovery scenarios and so are uncommon, but they are part of the state of an SQLite database and so cannot be ignored. This document defines the format of a rollback journal and the write-ahead log file, but the focus is on the main database file.</source>
          <target state="translated">トランザクションが完了する前にアプリケーションまたはホストコンピュータがクラッシュした場合、ロールバックジャーナルまたは書込先ログには、メインデータベースファイルを一貫した状態に復元するために必要な情報が含まれています。ロールバックジャーナルまたは書込み先ログにデータベースの状態を回復するために必要な情報が含まれている場合、それらは「ホットジャーナル」または「ホットWALファイル」と呼ばれます。ホットジャーナルやWALファイルは、エラー回復のシナリオの中でのみ要素となるため、珍しいものではありませんが、SQLiteデータベースの状態の一部であるため、無視することはできません。このドキュメントでは、ロールバック・ジャーナルとライトアップ・リード・ログ・ファイルのフォーマットを定義していますが、メイン・データベース・ファイルに焦点を当てています。</target>
        </trans-unit>
        <trans-unit id="2a5d41f54973dce5874420b1200abe91d1314dc8" translate="yes" xml:space="preserve">
          <source>If the application uses &lt;a href=&quot;c3ref/create_function&quot;&gt;application-defined SQL functions&lt;/a&gt; that have side effects, then it is recommended to set the &lt;a href=&quot;c3ref/c_deterministic&quot;&gt;SQLITE_DIRECTONLY&lt;/a&gt; flag on those SQL functions to prevent them from being used inside triggers and views. To illustrate the importance of this flag, consider an application that implements an SQL function &quot;send_money(...)&quot;. Without the SQLITE_DIRECTONLY flag, an attacker might be able to add a trigger or view that uses that custom function, then trick a high-privilege application to run an otherwise harmless query that invokes that malicious trigger or view. The SQLITE_DIRECTONLY flag prevents the attack by requiring the &quot;send_money()&quot; function to be invoked directly by the application, rather than indirectly through a trigger or view.</source>
          <target state="translated">アプリケーションが副作用のある&lt;a href=&quot;c3ref/create_function&quot;&gt;アプリケーション定義のSQL関数&lt;/a&gt;を使用する場合は、それらのSQL関数に&lt;a href=&quot;c3ref/c_deterministic&quot;&gt;SQLITE_DIRECTONLY&lt;/a&gt;フラグを設定して、トリガーやビュー内で使用されないようにすることをお勧めします。このフラグの重要性を説明するために、SQL関数「send_money（...）」を実装するアプリケーションを考えてみましょう。 SQLITE_DIRECTONLYフラグがないと、攻撃者はそのカスタム関数を使用するトリガーまたはビューを追加し、高特権のアプリケーションをだまして、その悪意のあるトリガーまたはビューを呼び出す無害なクエリを実行できる可能性があります。 SQLITE_DIRECTONLYフラグは、 &quot;send_money（）&quot;関数がトリガーまたはビューを介して間接的にではなく、アプリケーションによって直接呼び出されることを要求することにより、攻撃を防ぎます。</target>
        </trans-unit>
        <trans-unit id="d6f9cd1b9ea5044b899607d0f8509b7399b72066" translate="yes" xml:space="preserve">
          <source>If the application wanted to keep all content in memory, it could continue reading and parsing the other pages using a background thread after drawing the first page. Or, since reading from SQLite is so efficient, the application might instead choose to reduce its memory footprint and only keep a single slide in memory at a time. Or maybe it keeps the current slide and the next slide in memory, to facility rapid transitions to the next slide.</source>
          <target state="translated">アプリケーションがすべてのコンテンツをメモリに保持したい場合は、最初のページを描画した後、バックグラウンドスレッドを使用して他のページの読み込みと解析を続けることができます。あるいは、SQLiteからの読み込みは非常に効率的なので、アプリケーションは代わりにメモリフットプリントを減らして、一度に1つのスライドだけをメモリに保持することを選択するかもしれません。あるいは、メモリ内に現在のスライドと次のスライドを保持し、次のスライドへの迅速な移行を可能にします。</target>
        </trans-unit>
        <trans-unit id="8569a113bc3212a8fdd578bf6c990f890a161761" translate="yes" xml:space="preserve">
          <source>If the argument N is positive then the suggested cache size is set to N. If the argument N is negative, then the number of cache pages is adjusted to be a number of pages that would use approximately abs(N*1024) bytes of memory based on the current page size. SQLite remembers the number of pages in the page cache, not the amount of memory used. So if you set the cache size using a negative number and subsequently change the page size (using the &lt;a href=&quot;pragma#pragma_page_size&quot;&gt;PRAGMA page_size&lt;/a&gt; command) then the maximum amount of cache memory will go up or down in proportion to the change in page size.</source>
          <target state="translated">引数Nが正の場合、推奨されるキャッシュサイズはNに設定されます。引数Nが負の場合、キャッシュページの数は、約abs（N * 1024）バイトのメモリを使用するページの数に調整されます。現在のページサイズに基づきます。SQLiteは、使用されているメモリの量ではなく、ページキャッシュ内のページ数を記憶しています。したがって、負の数を使用してキャッシュサイズを設定し、その後（&lt;a href=&quot;pragma#pragma_page_size&quot;&gt;PRAGMA page_size&lt;/a&gt;コマンドを使用して）ページサイズを変更すると、キャッシュメモリの最大量はページサイズの変更に比例して増減します。</target>
        </trans-unit>
        <trans-unit id="333007bde9d13022c1e70f3f252829b77ea3504a" translate="yes" xml:space="preserve">
          <source>If the argument N is zero then the soft heap limit is disabled.</source>
          <target state="translated">引数Nが0の場合、ソフトヒープの制限は無効になります。</target>
        </trans-unit>
        <trans-unit id="0910062f14fed63da9341471516f0b8c2feb398e" translate="yes" xml:space="preserve">
          <source>If the argument X to json(X) contains JSON objects with duplicate labels, then it is undefined whether or not the duplicates are preserved. The current implementation preserves duplicates. However, future enhancements to this routine may choose to silently remove duplicates.</source>
          <target state="translated">json(X)への引数Xにラベルが重複するJSONオブジェクトが含まれている場合、重複を保存するかどうかは未定義です。現在の実装では、重複は保存されます。しかし、このルーチンへの将来の拡張は、重複を黙って削除することを選択するかもしれません。</target>
        </trans-unit>
        <trans-unit id="6f833aefc23dc66bc8a11fd873780dad93c32799" translate="yes" xml:space="preserve">
          <source>If the argument is an empty string then the authorizer is disabled. If the argument is omitted, then the current authorizer is returned.</source>
          <target state="translated">引数が空の文字列の場合、オーソライズは無効になります。引数が省略された場合は、現在の認証者が返されます。</target>
        </trans-unit>
        <trans-unit id="db2e11d8e987617a2ede3ca5cb77cc0207ab30da" translate="yes" xml:space="preserve">
          <source>If the argument to %Q is a null pointer then the output is an unquoted &quot;NULL&quot;. In other words, a null pointer generates an SQL NULL, and a non-null pointer generates a valid SQL string literal. If the argument to %q is a null pointer then no output is generated. Thus a null-pointer to %q is the same as an empty string.</source>
          <target state="translated">Q の引数が NULL ポインタの場合、出力は引用符で囲まれていない &quot;NULL&quot; です。言い換えれば、NULL ポインタは SQL NULL を生成し、NULL 以外のポインタは有効な SQL 文字列リテラルを生成します。q の引数が NULL ポインタの場合、出力は生成されません。したがって、%q への NULL ポインタは空の文字列と同じです。</target>
        </trans-unit>
        <trans-unit id="34bfefe0d198d1d0315cf64a45912620ff3af0d6" translate="yes" xml:space="preserve">
          <source>If the argument to &lt;a href=&quot;pragma#pragma_cache_size&quot;&gt;PRAGMA cache_size&lt;/a&gt; is negative N, that means to use approximately -1024*N bytes of memory for the page cache regardless of the page size.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_cache_size&quot;&gt;PRAGMA cache_size&lt;/a&gt;の引数が負のNの場合、ページサイズに関係なく、ページキャッシュに約-1024 * Nバイトのメモリを使用することを意味します。</target>
        </trans-unit>
        <trans-unit id="ad1260c6e1a01baa74d5f905fe5850603affd484" translate="yes" xml:space="preserve">
          <source>If the argument to sqlite3_mutex_enter(), sqlite3_mutex_try(), or sqlite3_mutex_leave() is a NULL pointer, then all three routines behave as no-ops.</source>
          <target state="translated">sqlite3_mutex_enter(),sqlite3_mutex_try(),sqlite3_mutex_leave()の引数がNULLポインタの場合、3つのルーチンは全てno-opsとして動作します。</target>
        </trans-unit>
        <trans-unit id="0142caf16fb3155af68268c72b44fbf8e770bbff" translate="yes" xml:space="preserve">
          <source>If the argument to sqlite3_mutex_held() is a NULL pointer then the routine should return 1. This seems counter-intuitive since clearly the mutex cannot be held if it does not exist. But the reason the mutex does not exist is because the build is not using mutexes. And we do not want the assert() containing the call to sqlite3_mutex_held() to fail, so a non-zero return is the appropriate thing to do. The sqlite3_mutex_notheld() interface should also return 1 when given a NULL pointer.</source>
          <target state="translated">sqlite3_mutex_held()の引数がNULLポインタであれば、ルーチンは1を返します。これは直観的ではないように思えますが、ミューテックスが存在しない場合、ミューテックスを保持することはできません。しかし、ミューテックスが存在しないのは、ビルドでミューテックスを使用していないからです。また、sqlite3_mutex_held()の呼び出しを含むassert()が失敗しないようにしたいので、0以外の値を返すのが適切です。sqlite3_mutex_notheld()インタフェースもNULLポインタが与えられた場合は1を返すべきです。</target>
        </trans-unit>
        <trans-unit id="a14ce7fd473c10953375f9ccbf76e06b28005ef4" translate="yes" xml:space="preserve">
          <source>If the array variable name is omitted or is the empty string, then the value of each column is stored in a variable with the same name as the column itself. For example:</source>
          <target state="translated">配列の変数名が省略された場合や空文字列の場合は、各カラムの値がカラムそのものと同じ名前の変数に格納されます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="ac696fda1c1264eced84b7c7d2919bb500892965" translate="yes" xml:space="preserve">
          <source>If the attempt to insert the row fails because of some other constraint violation (e.g. NOT NULL or UNIQUE), the conflict handler function is invoked with the second argument set to &lt;a href=&quot;#SQLITE_CHANGESET_CONFLICT&quot;&gt;SQLITE_CHANGESET_CONSTRAINT&lt;/a&gt;. This includes the case where the INSERT operation is re-attempted because an earlier call to the conflict handler function returned &lt;a href=&quot;#SQLITE_CHANGESET_ABORT&quot;&gt;SQLITE_CHANGESET_REPLACE&lt;/a&gt;.</source>
          <target state="translated">その他の制約違反（NOT NULLやUNIQUEなど）が原因で行の挿入が失敗した場合、2番目の引数を&lt;a href=&quot;#SQLITE_CHANGESET_CONFLICT&quot;&gt;SQLITE_CHANGESET_CONSTRAINTに&lt;/a&gt;設定して競合ハンドラー関数が呼び出されます。これには、競合ハンドラー関数への以前の呼び出しが&lt;a href=&quot;#SQLITE_CHANGESET_ABORT&quot;&gt;SQLITE_CHANGESET_REPLACEを&lt;/a&gt;返したため、INSERT操作が再試行された場合が含まれます。</target>
        </trans-unit>
        <trans-unit id="00b4296a5ab760c82790fc716c15427ea1f6520d" translate="yes" xml:space="preserve">
          <source>If the attempt to insert the row fails because of some other constraint violation (e.g. NOT NULL or UNIQUE), the conflict handler function is invoked with the second argument set to &lt;a href=&quot;c_changeset_conflict&quot;&gt;SQLITE_CHANGESET_CONSTRAINT&lt;/a&gt;. This includes the case where the INSERT operation is re-attempted because an earlier call to the conflict handler function returned &lt;a href=&quot;c_changeset_abort&quot;&gt;SQLITE_CHANGESET_REPLACE&lt;/a&gt;.</source>
          <target state="translated">その他の制約違反（NOT NULLやUNIQUEなど）が原因で行の挿入が失敗した場合、2番目の引数を&lt;a href=&quot;c_changeset_conflict&quot;&gt;SQLITE_CHANGESET_CONSTRAINTに&lt;/a&gt;設定して競合ハンドラー関数が呼び出されます。これには、競合ハンドラー関数への以前の呼び出しが&lt;a href=&quot;c_changeset_abort&quot;&gt;SQLITE_CHANGESET_REPLACEを&lt;/a&gt;返したため、INSERT操作が再試行された場合が含まれます。</target>
        </trans-unit>
        <trans-unit id="1a0b7bf9240c877d42c55de96b224187eca54a50" translate="yes" xml:space="preserve">
          <source>If the attempt to insert the row fails because the database already contains a row with the same primary key values, the conflict handler function is invoked with the second argument set to &lt;a href=&quot;#SQLITE_CHANGESET_CONFLICT&quot;&gt;SQLITE_CHANGESET_CONFLICT&lt;/a&gt;.</source>
          <target state="translated">同じ主キー値を持つ行がデータベースにすでに含まれているために行の挿入が失敗した場合、2番目の引数を&lt;a href=&quot;#SQLITE_CHANGESET_CONFLICT&quot;&gt;SQLITE_CHANGESET_CONFLICTに&lt;/a&gt;設定して競合ハンドラー関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="86e563d45d385632baebf3e72388be8c4af6aec3" translate="yes" xml:space="preserve">
          <source>If the attempt to insert the row fails because the database already contains a row with the same primary key values, the conflict handler function is invoked with the second argument set to &lt;a href=&quot;c_changeset_conflict&quot;&gt;SQLITE_CHANGESET_CONFLICT&lt;/a&gt;.</source>
          <target state="translated">同じ主キー値を持つ行がデータベースにすでに含まれているために行の挿入が失敗した場合、2番目の引数を&lt;a href=&quot;c_changeset_conflict&quot;&gt;SQLITE_CHANGESET_CONFLICTに&lt;/a&gt;設定して競合ハンドラー関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3629ea18c991de1dc5f5b9e0680718c68964bd44" translate="yes" xml:space="preserve">
          <source>If the bClear argument is non-zero, then the auxiliary data is cleared (set to NULL) before this function returns. In this case the xDelete, if any, is not invoked.</source>
          <target state="translated">引数bClearが0以外の場合、この関数が戻る前に補助データがクリアされます(NULLに設定されます)。この場合、xDeleteは呼び出されません。</target>
        </trans-unit>
        <trans-unit id="85be6aa821286c3a809817d29ac82866a6650696" translate="yes" xml:space="preserve">
          <source>If the backup process is restarted frequently enough it may never run to completion and the backupDb() function may never return.</source>
          <target state="translated">バックアッププロセスが頻繁に再起動されると、完了まで実行されず、 backupDb()関数が戻らない可能性があります。</target>
        </trans-unit>
        <trans-unit id="ed3ecd64439c51685da70c45077d54474b903f89" translate="yes" xml:space="preserve">
          <source>If the base expression is NULL then the result of the CASE is always the result of evaluating the ELSE expression if it exists, or NULL if it does not.</source>
          <target state="translated">ベースとなる式がNULLの場合、CASEの結果は常にELSE式が存在する場合はELSE式を評価した結果となり、存在しない場合はNULLとなります。</target>
        </trans-unit>
        <trans-unit id="8a427aa0dc34d2b046c1ad51ad7573c594257eb3" translate="yes" xml:space="preserve">
          <source>If the base window has an ORDER BY clause, it is copied into the new window. In this case the new window must not specify an ORDER BY clause. If the base window has no ORDER BY clause, one may be specified as part of the new window definition.</source>
          <target state="translated">ベース・ウィンドウに ORDER BY 節がある場合、それは新しいウィンドウにコピーされます。この場合、新しいウィンドウは ORDER BY 節を指定してはいけません。ベース・ウィンドウに ORDER BY 句がない場合、新しいウィンドウの定義の一部として ORDER BY 句を指定することができます。</target>
        </trans-unit>
        <trans-unit id="119dee4cbf58f5993be5ffddf2563e1e23c3d8e2" translate="yes" xml:space="preserve">
          <source>If the blob handle being closed was opened for read-write access, and if the database is in auto-commit mode and there are no other open read-write blob handles or active write statements, the current transaction is committed. If an error occurs while committing the transaction, an error code is returned and the transaction rolled back.</source>
          <target state="translated">閉じられているブロブ・ハンドルが読み書きアクセスのために開かれていて、データベースがオートコミット・モードで、他に開いている読み書きブロブ・ハンドルやアクティブな書き込み文がない場合、現在のトランザクションはコミットされます。トランザクションのコミット中にエラーが発生した場合、エラーコードが返され、トランザクションはロールバックされます。</target>
        </trans-unit>
        <trans-unit id="a888511d0d42c7a009b52c11f52254e39a8e8777" translate="yes" xml:space="preserve">
          <source>If the blocked connection is attempting to obtain a write-lock on a shared-cache table, and more than one other connection currently holds a read-lock on the same table, then SQLite arbitrarily selects one of the other connections to use as the blocking connection.</source>
          <target state="translated">ブロックされた接続が共有キャッシュ・テーブルの書き込みロックを取得しようとしており、現在同じテーブルの読み取りロックを保持している他の接続が複数ある場合、SQLite は任意に他の接続のうちの 1 つをブロック接続として使用するように選択します。</target>
        </trans-unit>
        <trans-unit id="b15e015a6e8222ac8277a814fcfbbc84b5b7b2fa" translate="yes" xml:space="preserve">
          <source>If the branch instruction that implements the &quot;c!=0&quot; test on line 58 is changed into a no-op, then the while-loop will loop forever and the test suite will fail with a time-out. But if that branch is changed into an unconditional jump, then the hash function will always return 0. The problem is that 0 is a valid hash. A hash function that always returns 0 still works in the sense that SQLite still always gets the correct answer. The table-name hash table degenerates into a linked-list and so the table-name lookups that occur while parsing SQL statements might be a little slower, but the end result will be the same.</source>
          <target state="translated">58行目の &quot;c!=0 &quot;テストを実装する分岐命令が無条件ジャンプに変更された場合、while-loopは永遠にループし、テストスイートはタイムアウトで失敗します。しかし、そのブランチが無条件ジャンプに変更された場合、ハッシュ関数は常に0を返します。問題は、0が有効なハッシュであることです。常に0を返すハッシュ関数は、SQLiteが常に正しい答えを得るという意味ではまだ機能します。テーブル名ハッシュテーブルはリンクされたリストに退化するので、SQL文の解析中に発生するテーブル名の検索は少し遅くなるかもしれませんが、最終的な結果は同じです。</target>
        </trans-unit>
        <trans-unit id="d10a175cfd1fe16985e295daacc2dcfb3f2982ad" translate="yes" xml:space="preserve">
          <source>If the buffer contains a patchset, then all prior calls to this function on the same changegroup object must also have specified patchsets. Or, if the buffer contains a changeset, so must have the earlier calls to this function. Otherwise, SQLITE_ERROR is returned and no changes are added to the changegroup.</source>
          <target state="translated">バッファにパッチセットが含まれている場合、同じ changegroup オブジェクト上でこの関数を呼び出す前の全ての呼び出しも指定されたパッチセットを持っていなければなりません。あるいは、バッファにチェンジセットが含まれている場合は、以前にこの関数を呼び出したことがあるはずです。そうでない場合は SQLITE_ERROR が返され、変更は changegroup に追加されません。</target>
        </trans-unit>
        <trans-unit id="5cba5e39badf94f78fab97af6a07c73e6243cd28" translate="yes" xml:space="preserve">
          <source>If the busy callback is NULL, then &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_BUSY&lt;/a&gt; is returned immediately upon encountering the lock. If the busy callback is not NULL, then the callback might be invoked with two arguments.</source>
          <target state="translated">ビジーコールバックがNULLの場合、ロックが発生するとすぐに&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_BUSY&lt;/a&gt;が返されます。ビジーコールバックがNULLでない場合、コールバックは2つの引数で呼び出される可能性があります。</target>
        </trans-unit>
        <trans-unit id="5b0bd17ec528127c481fd60daa34e2af13ea7150" translate="yes" xml:space="preserve">
          <source>If the busy callback is NULL, then &lt;a href=&quot;../rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt; is returned immediately upon encountering the lock. If the busy callback is not NULL, then the callback might be invoked with two arguments.</source>
          <target state="translated">ビジーコールバックがNULLの場合、ロックが発生するとすぐに&lt;a href=&quot;../rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt;が返されます。ビジーコールバックがNULLでない場合、コールバックは2つの引数で呼び出される可能性があります。</target>
        </trans-unit>
        <trans-unit id="afcbf1f3e790adb1bb6040c89a071eb5f4f5a2b5" translate="yes" xml:space="preserve">
          <source>If the busy method is invoked without an argument, the name of the callback procedure last set by the busy method is returned. If no callback procedure has been set, an empty string is returned.</source>
          <target state="translated">引数なしでビジー・メソッドが呼び出された場合、ビジー・メソッドで最後に設定されたコールバック・プロシージャの名前が返されます。コールバックプロシージャが設定されていない場合は、空の文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="85f5b0357119cb8e1c6a774de7f6ae30085546fa" translate="yes" xml:space="preserve">
          <source>If the cache validate procedure prescribed by H35040 is required and does not prove that the</source>
          <target state="translated">H35040で規定されたキャッシュバリデート手順が必要であり、その証明ができない場合には</target>
        </trans-unit>
        <trans-unit id="854ac2efa118a1d9433a97bc97dd8176f442561c" translate="yes" xml:space="preserve">
          <source>If the call to xAccess() required by H35140 fails (due to an IO error or similar), then SQLite shall abandon the attempt to open a</source>
          <target state="translated">H35140 で要求された xAccess()の呼び出しが (IO エラーなどにより)失敗した場合、SQLite は</target>
        </trans-unit>
        <trans-unit id="1c9becc9db0bbc14b6323875b3f39aa5c2a244e7" translate="yes" xml:space="preserve">
          <source>If the call to xAccess() required by H35490 fails (due to an IO or other internal VFS error), then SQLite shall abandon the attempt to open a</source>
          <target state="translated">H35490 で要求された xAccess()の呼び出しが (IO またはその他の内部 VFS エラーのために)失敗した場合、SQLite は</target>
        </trans-unit>
        <trans-unit id="7bd0a091025aae3680b1db643d16d28c98cc6e9b" translate="yes" xml:space="preserve">
          <source>If the call to xAccess() required by H35490 reveals that the journal file is no longer present in the file system, then SQLite shall abandon the attempt to open a</source>
          <target state="translated">H35490 で要求された xAccess()の呼び出しにより、ファイルシステム内にジャーナルファイルが存在しなくなったことが判明した場合、SQLite は</target>
        </trans-unit>
        <trans-unit id="3c3c8cf623e8c157f82c9c8bd8de3ce49f6292d0" translate="yes" xml:space="preserve">
          <source>If the call to xCheckReservedLock() required by H35160 fails (due to an IO or other internal VFS error), then SQLite shall abandon the attempt to open a</source>
          <target state="translated">H35160 で要求された xCheckReservedLock()の呼び出しが (IO またはその他の内部 VFS エラーのために)失敗した場合、SQLite は</target>
        </trans-unit>
        <trans-unit id="527cca95e4fd8fdc84a2ca6b5f00a7e854482d28" translate="yes" xml:space="preserve">
          <source>If the call to xCheckReservedLock() required by H35160 indicates that some other</source>
          <target state="translated">H35160で要求されたxCheckReservedLock()の呼び出しが、他のいくつかの</target>
        </trans-unit>
        <trans-unit id="b6b7e886a7c9cbfdadb1dc23e73d315693f496ee" translate="yes" xml:space="preserve">
          <source>If the call to xDelete() required by H35450 fails (due to an IO or other internal VFS error), then SQLite shall abandon the attempt to open a</source>
          <target state="translated">H35450 で要求された xDelete()の呼び出しが (IO またはその他の内部 VFS エラーのために)失敗した場合、SQLite は</target>
        </trans-unit>
        <trans-unit id="5af5d373c56bb9dcd62ea184e1e76437bf4a9601" translate="yes" xml:space="preserve">
          <source>If the call to xFileSize() required by H35450 fails (due to an IO or other internal VFS error), then SQLite shall abandon the attempt to open a</source>
          <target state="translated">H35450 で要求された xFileSize()の呼び出しが (IO またはその他の内部 VFS エラーのために)失敗した場合、SQLite は</target>
        </trans-unit>
        <trans-unit id="2a548d9a4e673897d73f6b03d7eb848a11645c48" translate="yes" xml:space="preserve">
          <source>If the call to xOpen() required by H35440 fails (due to an IO or other internal VFS error), then SQLite shall abandon the attempt to open a</source>
          <target state="translated">H35440 で要求された xOpen()の呼び出しに失敗した場合 (IO またはその他の内部 VFS エラーが原因)、SQLite は</target>
        </trans-unit>
        <trans-unit id="d1ec650a833c11cb6d8b04d5f0bcc10f45ba6aa9" translate="yes" xml:space="preserve">
          <source>If the callback function returns any value other than SQLITE_OK, the query is abandoned and the xQueryPhrase function returns immediately. If the returned value is SQLITE_DONE, xQueryPhrase returns SQLITE_OK. Otherwise, the error code is propagated upwards.</source>
          <target state="translated">コールバック関数が SQLITE_OK 以外の値を返す場合、クエリは放棄され、xQueryPhrase 関数は直ちに戻ります。返された値が SQLITE_DONE の場合、xQueryPhrase は SQLITE_OK を返します。それ以外の場合は、エラー コードが上方に伝搬されます。</target>
        </trans-unit>
        <trans-unit id="e7031b92fb19c04c6b57152812c2809849a4f000" translate="yes" xml:space="preserve">
          <source>If the callback function to &lt;a href=&quot;c3ref/exec&quot;&gt;sqlite3_exec()&lt;/a&gt; returns non-zero, then sqlite3_exec() will return SQLITE_ABORT.</source>
          <target state="translated">&lt;a href=&quot;c3ref/exec&quot;&gt;sqlite3_exec（）&lt;/a&gt;へのコールバック関数がゼロ以外を返す場合、sqlite3_exec（）はSQLITE_ABORTを返します。</target>
        </trans-unit>
        <trans-unit id="a386306ee9feeed2835e0b935d9f3858fdfe7719" translate="yes" xml:space="preserve">
          <source>If the change to table X also affects other tables or indexes or triggers are views within schema, then run &lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt; statements to modify those other tables indexes and views too. For example, if the name of a column changes, all FOREIGN KEY constraints, triggers, indexes, and views that refer to that column must be modified.</source>
          <target state="translated">テーブルXへの変更が他のテーブルまたはインデックスにも影響する場合、またはトリガーがスキーマ内のビューである場合、&lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt;ステートメントを実行して、他のテーブルインデックスとビューも変更します。たとえば、列の名前が変更された場合、その列を参照するすべてのFOREIGN KEY制約、トリガー、インデックス、およびビューを変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="4f32e1ca273326c7edb692e7f8fb897873c86b6d" translate="yes" xml:space="preserve">
          <source>If the columns of your result set are named by AS clauses, then SQLite is guaranteed to use the identifier to the right of the AS keyword as the column name. If the result set does not use an AS clause, then SQLite is free to name the column anything it wants. See the &lt;a href=&quot;c3ref/column_name&quot;&gt;sqlite3_column_name()&lt;/a&gt; documentation for further information.</source>
          <target state="translated">結果セットの列がAS句によって名前が付けられている場合、SQLiteはASキーワードの右側にある識別子を列名として使用することが保証されています。結果セットがAS句を使用しない場合、SQLiteは自由に列に自由に名前を付けることができます。詳細については、&lt;a href=&quot;c3ref/column_name&quot;&gt;sqlite3_column_name（）の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="2f6ac289e0c179705fc9860a15b31aba8aa6dfe9" translate="yes" xml:space="preserve">
          <source>If the compression method for the record is either 0 or 8 (see below), then the uncompressed data associated with the zip file entry. Or, if the compression method is not 0 or 8, this column contains a NULL value.</source>
          <target state="translated">レコードの圧縮方法が 0 または 8 のいずれかである場合 (以下を参照)、ZIP ファイルエントリに関連付けられた非圧縮データ。または、圧縮方法が 0 または 8 でない場合、この列には NULL 値が含まれます。</target>
        </trans-unit>
        <trans-unit id="6d7fff8b9b0e80fbe64f6ffbfb79c99106754efa" translate="yes" xml:space="preserve">
          <source>If the content is compressed, then such an &lt;a href=&quot;sqlar&quot;&gt;SQLite Archive&lt;/a&gt; database is &lt;a href=&quot;affcase1#smaller&quot;&gt;the same size&lt;/a&gt; (&amp;plusmn;1%) as an equivalent ZIP archive, and it has the advantage of being able to update individual &quot;files&quot; without rewriting the entire document.</source>
          <target state="translated">コンテンツが圧縮されている場合、そのような&lt;a href=&quot;sqlar&quot;&gt;SQLiteアーカイブ&lt;/a&gt;データベースは同等のZIPアーカイブ&lt;a href=&quot;affcase1#smaller&quot;&gt;と同じサイズ&lt;/a&gt;（&amp;plusmn;1％）であり、ドキュメント全体を書き換えることなく個々の「ファイル」を更新できるという利点があります。</target>
        </trans-unit>
        <trans-unit id="07d4949504c6ebefef1a44e834288b1c17ef2c29" translate="yes" xml:space="preserve">
          <source>If the content of a subquery might need to be visited more than once, then the use of a co-routine is undesirable, as the co-routine would then have to compute the data more than once. And if the subquery cannot be flattened, that means the subquery must be manifested into a transient table.</source>
          <target state="translated">副問い合わせの内容が複数回訪問する必要がある場合、コ・ルーチンの使用は望ましくありません。そして、副問い合わせを平坦化することができない場合、それは副問い合わせが過渡的なテーブルに顕在化しなければならないことを意味します。</target>
        </trans-unit>
        <trans-unit id="c4de8e7a63ccfd940999297f77703800e91edb69" translate="yes" xml:space="preserve">
          <source>If the content option is used along with the languageid option, then the named languageid column must exist in the content= table (subject to the usual rules - if a query never needs to read the content table then this restriction does not apply).</source>
          <target state="translated">content オプションを languageid オプションとともに使用した場合は、 content=テーブルの中に languageid という名前のカラムが存在しなければなりません (通常のルールに従うことになります。 クエリが content テーブルを読む必要がない場合は、この制限は適用されません)。</target>
        </trans-unit>
        <trans-unit id="69c4116a662051610d482a3763e629de02d91b0e" translate="yes" xml:space="preserve">
          <source>If the coroutine that is launched by this instruction ends with &lt;a href=&quot;opcode#Yield&quot;&gt;Yield&lt;/a&gt; or &lt;a href=&quot;opcode#Return&quot;&gt;Return&lt;/a&gt; then continue to the next instruction. But if the coroutine launched by this instruction ends with &lt;a href=&quot;opcode#EndCoroutine&quot;&gt;EndCoroutine&lt;/a&gt;, then jump to P2 rather than continuing with the next instruction.</source>
          <target state="translated">この命令によって起動されたコルーチンが&lt;a href=&quot;opcode#Yield&quot;&gt;Yield&lt;/a&gt;または&lt;a href=&quot;opcode#Return&quot;&gt;Returnで&lt;/a&gt;終了する場合は、次の命令に進みます。ただし、この命令によって起動されたコルーチンが&lt;a href=&quot;opcode#EndCoroutine&quot;&gt;EndCoroutine&lt;/a&gt;で終わっている場合は、次の命令を続行するのではなく、P2にジャンプします。</target>
        </trans-unit>
        <trans-unit id="d90236a26f30bb94fe93491f2ee7d8229a45dcb7" translate="yes" xml:space="preserve">
          <source>If the covering index is used for the scan, the &quot;fruit&quot; column will appear naturally in the correct order, but when there are two or more rows with the same fruit, the price might be out of order. When this occurs, SQLite does many small sorts, one sort for each distinct value of fruit, rather than one large sort. Figure 22 below illustrates the concept.</source>
          <target state="translated">カバーリングインデックスがスキャンに使用されている場合、「果実」列は自然に正しい順序で表示されますが、同じ果実を持つ行が2つ以上ある場合、価格がずれていることがあります。このような場合、SQLiteは大きなソートを行うのではなく、多くの小さなソートを行います。下の図22はその概念を示しています。</target>
        </trans-unit>
        <trans-unit id="9c6f80849dfd69b57ae6014cb409620e08c9388e" translate="yes" xml:space="preserve">
          <source>If the current statement is not inside an explicit transaction (a &lt;a href=&quot;lang_transaction&quot;&gt;BEGIN&lt;/a&gt;/&lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt;/&lt;a href=&quot;lang_transaction&quot;&gt;ROLLBACK&lt;/a&gt; block), then an implicit transaction is committed as soon as the statement has finished executing. In this case deferred constraints behave the same as immediate constraints.</source>
          <target state="translated">現在のステートメントが明示的なトランザクション（&lt;a href=&quot;lang_transaction&quot;&gt;BEGIN&lt;/a&gt; / &lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt; / &lt;a href=&quot;lang_transaction&quot;&gt;ROLLBACK&lt;/a&gt;ブロック）内にない場合、暗黙的なトランザクションは、ステートメントの実行が終了するとすぐにコミットされます。この場合、遅延制約は即時制約と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="392488489ea8e86894e96e98c9d528e435e44b99" translate="yes" xml:space="preserve">
          <source>If the current version of SQLite is 3.8.2 or greater, the estimatedRows field may be set to an estimate of the number of rows returned by the proposed query plan. If this value is not explicitly set, the default estimate of 25 rows is used.</source>
          <target state="translated">現在のSQLiteのバージョンが3.8.2以上の場合、推定行数フィールドには、提案されたクエリプランから返される行数の推定値を設定することができます。この値が明示的に設定されていない場合は、デフォルトの推定行数25行が使用されます。</target>
        </trans-unit>
        <trans-unit id="d14a622439a8b842f388bc686b9c68da678476ab" translate="yes" xml:space="preserve">
          <source>If the current version of SQLite is 3.9.0 or greater, the idxFlags field may be set to SQLITE_INDEX_SCAN_UNIQUE to indicate that the virtual table will return only zero or one rows given the input constraints. Additional bits of the idxFlags field might be understood in later versions of SQLite.</source>
          <target state="translated">現在のSQLiteのバージョンが3.9.0以上の場合、idxFlagsフィールドをSQLITE_INDEX_SCAN_UNIQUEに設定することで、入力制約が与えられた場合に仮想テーブルが0行または1行のみを返すことを示すことができます。idxFlags フィールドの追加ビットは、SQLite の後のバージョンでは理解されているかもしれません。</target>
        </trans-unit>
        <trans-unit id="7ead26894e06c87e567f28556505a47feb41761a" translate="yes" xml:space="preserve">
          <source>If the cursor P1 is already opened on an ephemeral table, the table is cleared (all content is erased).</source>
          <target state="translated">カーソルP1が既にエフェメラルテーブル上に開いている場合は、テーブルをクリアする(全ての内容を消去する)。</target>
        </trans-unit>
        <trans-unit id="4895543ee94b53e62d72914bc8c347747fb66179" translate="yes" xml:space="preserve">
          <source>If the cursor P1 was opened using the OPFLAG_SEEKEQ flag, then this opcode will always land on a record that equally equals the key, or else jump immediately to P2. When the cursor is OPFLAG_SEEKEQ, this opcode must be followed by an &lt;a href=&quot;opcode#IdxGE&quot;&gt;IdxGE&lt;/a&gt; opcode with the same arguments. The &lt;a href=&quot;opcode#IdxGE&quot;&gt;IdxGE&lt;/a&gt; opcode will be skipped if this opcode succeeds, but the &lt;a href=&quot;opcode#IdxGE&quot;&gt;IdxGE&lt;/a&gt; opcode will be used on subsequent loop iterations.</source>
          <target state="translated">カーソルP1がOPFLAG_SEEKEQフラグを使用して開かれた場合、このオペコードは常にキーに等しいレコードに到達するか、そうでなければすぐにP2にジャンプします。カーソルがOPFLAG_SEEKEQの場合、このオペコードの後に、同じ引数を持つ&lt;a href=&quot;opcode#IdxGE&quot;&gt;IdxGE&lt;/a&gt;オペコードが続く必要があります。&lt;a href=&quot;opcode#IdxGE&quot;&gt;IdxGEの&lt;/a&gt;このオペコードが成功した場合、オペコードはスキップされますが、&lt;a href=&quot;opcode#IdxGE&quot;&gt;IdxGEの&lt;/a&gt;オペコードは、後続のループの繰り返しで使用されます。</target>
        </trans-unit>
        <trans-unit id="77bb6e8019c4e57a173df053565a659dee60ffeb" translate="yes" xml:space="preserve">
          <source>If the cursor P1 was opened using the OPFLAG_SEEKEQ flag, then this opcode will always land on a record that equally equals the key, or else jump immediately to P2. When the cursor is OPFLAG_SEEKEQ, this opcode must be followed by an &lt;a href=&quot;opcode#IdxLE&quot;&gt;IdxLE&lt;/a&gt; opcode with the same arguments. The &lt;a href=&quot;opcode#IdxLE&quot;&gt;IdxLE&lt;/a&gt; opcode will be skipped if this opcode succeeds, but the &lt;a href=&quot;opcode#IdxLE&quot;&gt;IdxLE&lt;/a&gt; opcode will be used on subsequent loop iterations.</source>
          <target state="translated">カーソルP1がOPFLAG_SEEKEQフラグを使用して開かれた場合、このオペコードは常にキーに等しいレコードに到達するか、そうでなければすぐにP2にジャンプします。カーソルがOPFLAG_SEEKEQの場合、このオペコードの後に同じ引数を持つ&lt;a href=&quot;opcode#IdxLE&quot;&gt;IdxLE&lt;/a&gt;オペコードが続く必要があります。&lt;a href=&quot;opcode#IdxLE&quot;&gt;IdxLEの&lt;/a&gt;このオペコードが成功した場合、オペコードはスキップされますが、&lt;a href=&quot;opcode#IdxLE&quot;&gt;IdxLEの&lt;/a&gt;オペコードは、後続のループの繰り返しで使用されます。</target>
        </trans-unit>
        <trans-unit id="9c34174e24836739ad2de38f328a95e6bd8361fd" translate="yes" xml:space="preserve">
          <source>If the database connection is associated with unfinalized prepared statements or unfinished sqlite3_backup objects then sqlite3_close() will leave the database connection open and return &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_BUSY&lt;/a&gt;. If sqlite3_close_v2() is called with unfinalized prepared statements and/or unfinished sqlite3_backups, then the database connection becomes an unusable &quot;zombie&quot; which will automatically be deallocated when the last prepared statement is finalized or the last sqlite3_backup is finished. The sqlite3_close_v2() interface is intended for use with host languages that are garbage collected, and where the order in which destructors are called is arbitrary.</source>
          <target state="translated">データベース接続が未完成の準備済みステートメントまたは未完成のsqlite3_backupオブジェクトに関連付けられている場合、sqlite3_close（）はデータベース接続を開いたままにして&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_BUSY&lt;/a&gt;を返します。 sqlite3_close_v2（）が未確定の準備済みステートメントや未完了のsqlite3_backupsで呼び出された場合、データベース接続は使用できない「ゾンビ」になり、最後の準備済みステートメントが終了するか、最後のsqlite3_backupが終了すると、自動的に割り当てが解除されます。 sqlite3_close_v2（）インターフェースは、ガベージコレクションされ、デストラクタが呼び出される順序が任意であるホスト言語での使用を目的としています。</target>
        </trans-unit>
        <trans-unit id="6a86fbb2e17cc862733085ba2da83a55d59e3eb0" translate="yes" xml:space="preserve">
          <source>If the database connection is associated with unfinalized prepared statements or unfinished sqlite3_backup objects then sqlite3_close() will leave the database connection open and return &lt;a href=&quot;../rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt;. If sqlite3_close_v2() is called with unfinalized prepared statements and/or unfinished sqlite3_backups, then the database connection becomes an unusable &quot;zombie&quot; which will automatically be deallocated when the last prepared statement is finalized or the last sqlite3_backup is finished. The sqlite3_close_v2() interface is intended for use with host languages that are garbage collected, and where the order in which destructors are called is arbitrary.</source>
          <target state="translated">データベース接続が未完成の準備済みステートメントまたは未完成のsqlite3_backupオブジェクトに関連付けられている場合、sqlite3_close（）はデータベース接続を開いたままにして&lt;a href=&quot;../rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt;を返します。 sqlite3_close_v2（）が未確定の準備済みステートメントや未完了のsqlite3_backupsで呼び出された場合、データベース接続は使用できない「ゾンビ」になり、最後の準備済みステートメントが終了するか、最後のsqlite3_backupが終了すると、自動的に割り当てが解除されます。 sqlite3_close_v2（）インターフェースは、ガベージコレクションされ、デストラクタが呼び出される順序が任意であるホスト言語での使用を目的としています。</target>
        </trans-unit>
        <trans-unit id="fb1362fb98673ef522db1a6a32001f7f2b59540f" translate="yes" xml:space="preserve">
          <source>If the database connection is newly opened, make sure it has read the database schema by preparing then discarding some query against the database, or calling sqlite3_table_column_metadata(), ignoring any errors. This step is only necessary if the application desires to keep the database in WAL mode after the reset if it was in WAL mode before the reset.</source>
          <target state="translated">データベース接続が新たにオープンされた場合、データベースに対するクエリを準備してから破棄するか、エラーを無視してsqlite3_table_column_metadata()を呼び出すことで、データベーススキーマを読み込んだことを確認してください。このステップは、リセット前にWALモードであった場合、アプリケーションがリセット後もWALモードでデータベースを維持したい場合にのみ必要です。</target>
        </trans-unit>
        <trans-unit id="1e3e236bab50bdd2cf247016c21c0818a0ad15df" translate="yes" xml:space="preserve">
          <source>If the database file has aliases (hard or soft links) and the file is opened by a different alias than the one used to create the journal, then the journal will not be found. To avoid this problem, you should not create links to SQLite database files.</source>
          <target state="translated">データベースファイルにエイリアス(ハードリンクまたはソフトリンク)があり、ジャーナルの作成に使用したエイリアスとは異なるエイリアスでファイルを開いた場合、ジャーナルは見つかりません。この問題を回避するには、SQLiteデータベースファイルへのリンクを作成してはいけません。</target>
        </trans-unit>
        <trans-unit id="b5462897225632e86adf2dda0274ca8b010e12de" translate="yes" xml:space="preserve">
          <source>If the database schema changes, instead of returning &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_SCHEMA&lt;/a&gt; as it always used to do, &lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step()&lt;/a&gt; will automatically recompile the SQL statement and try to run it again. As many as &lt;a href=&quot;compile#max_schema_retry&quot;&gt;SQLITE_MAX_SCHEMA_RETRY&lt;/a&gt; retries will occur before sqlite3_step() gives up and returns an error.</source>
          <target state="translated">データベーススキーマが変更された場合、いつものように&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_SCHEMA&lt;/a&gt;を返すのではなく、&lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step（）&lt;/a&gt;はSQLステートメントを自動的に再コンパイルして、もう一度実行しようとします。sqlite3_step（）が中止してエラーを返す前に、&lt;a href=&quot;compile#max_schema_retry&quot;&gt;SQLITE_MAX_SCHEMA_RETRY回の&lt;/a&gt;再試行が発生します。</target>
        </trans-unit>
        <trans-unit id="589bc4cd8d0a621a42dc8c997193ae6380bd4790" translate="yes" xml:space="preserve">
          <source>If the database schema changes, instead of returning &lt;a href=&quot;../rescode#schema&quot;&gt;SQLITE_SCHEMA&lt;/a&gt; as it always used to do, &lt;a href=&quot;step&quot;&gt;sqlite3_step()&lt;/a&gt; will automatically recompile the SQL statement and try to run it again. As many as &lt;a href=&quot;../compile#max_schema_retry&quot;&gt;SQLITE_MAX_SCHEMA_RETRY&lt;/a&gt; retries will occur before sqlite3_step() gives up and returns an error.</source>
          <target state="translated">データベーススキーマが変更された場合、いつものように&lt;a href=&quot;../rescode#schema&quot;&gt;SQLITE_SCHEMA&lt;/a&gt;を返すのではなく、&lt;a href=&quot;step&quot;&gt;sqlite3_step（）&lt;/a&gt;はSQLステートメントを自動的に再コンパイルして、もう一度実行しようとします。sqlite3_step（）が中止してエラーを返す前に、&lt;a href=&quot;../compile#max_schema_retry&quot;&gt;SQLITE_MAX_SCHEMA_RETRY回の&lt;/a&gt;再試行が発生します。</target>
        </trans-unit>
        <trans-unit id="66c44f3be0c0d8ad85eed52612c2f2c579f73474" translate="yes" xml:space="preserve">
          <source>If the database schema contains foreign key errors that require looking at more than one table definition to identify, then those errors are not detected when the tables are created. Instead, such errors prevent the application from preparing SQL statements that modify the content of the child or parent tables in ways that use the foreign keys. Errors reported when content is changed are &quot;DML errors&quot; and errors reported when the schema is changed are &quot;DDL errors&quot;. So, in other words, misconfigured foreign key constraints that require looking at both the child and parent are DML errors. The English language error message for foreign key DML errors is usually &quot;foreign key mismatch&quot; but can also be &quot;no such table&quot; if the parent table does not exist. Foreign key DML errors are reported if:</source>
          <target state="translated">データベーススキーマに、識別のために複数のテーブル定義を調べる必要がある外部キーエラーが含まれている場合、テーブルが作成されたときにはそれらのエラーは検出されません。その代わり、そのようなエラーは、アプリケーションが外部キーを使用する方法で子テーブルまたは親テーブルの内容を変更するSQL文を準備することを妨げます。コンテンツが変更されたときに報告されるエラーは「DMLエラー」であり、スキーマが変更されたときに報告されるエラーは「DDLエラー」です。つまり、子テーブルと親テーブルの両方を見なければならないような誤った設定の外部キー制約は「DMLエラー」ということになります。外部キーDMLエラーの英語のエラーメッセージは、通常は「外部キーの不一致」ですが、親テーブルが存在しない場合は「そのようなテーブルがない」ということもあります。外部キーDMLエラーは、以下の場合に報告されます。</target>
        </trans-unit>
        <trans-unit id="8302ec0e25c3b92c0aa14eef9d1503f836a94585" translate="yes" xml:space="preserve">
          <source>If the declared type contains the string &quot;INT&quot; then it is assigned INTEGER affinity.</source>
          <target state="translated">宣言された型に文字列 &quot;INT &quot;が含まれている場合は、INTEGER親和性が割り当てられます。</target>
        </trans-unit>
        <trans-unit id="9bb6b49e698e48cc0bb2b3442b91fd7f7d66dd5e" translate="yes" xml:space="preserve">
          <source>If the declared type for a column contains any of the strings &quot;REAL&quot;, &quot;FLOA&quot;, or &quot;DOUB&quot; then the column has REAL affinity.</source>
          <target state="translated">カラムの宣言された型に文字列 &quot;REAL&quot;、&quot;FLOA&quot;、または &quot;DOUB&quot; のいずれかが含まれている場合、そのカラムはREALと親和性を持っています。</target>
        </trans-unit>
        <trans-unit id="f28b903cf6eed2606240e84c579a7053774d3dee" translate="yes" xml:space="preserve">
          <source>If the declared type for a column contains the string &quot;BLOB&quot; or if no type is specified then the column has affinity BLOB.</source>
          <target state="translated">カラムの宣言された型が文字列 &quot;BLOB&quot; を含む場合、または型が指定されていない場合は、カラムはアフィニティ BLOB を持つことになります。</target>
        </trans-unit>
        <trans-unit id="ee88c791daf6e99faa6560e540692aa5bc2c800f" translate="yes" xml:space="preserve">
          <source>If the declared type of the column contains any of the strings &quot;CHAR&quot;, &quot;CLOB&quot;, or &quot;TEXT&quot; then that column has TEXT affinity. Notice that the type VARCHAR contains the string &quot;CHAR&quot; and is thus assigned TEXT affinity.</source>
          <target state="translated">列の宣言された型に文字列 &quot;CHAR&quot;、&quot;CLOB&quot;、または &quot;TEXT&quot; のいずれかが含まれている場合、その列は文字列との親和性を持っています。VARCHAR型には文字列 &quot;CHAR &quot;が含まれているため、そのカラムにはTEXT親和性が割り当てられていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="de0d2c280ce73b7cd6a79e09cb8d9ab5ce1c8380" translate="yes" xml:space="preserve">
          <source>If the default entry point &quot;sqlite3_extension_init&quot; is not present in the loadable extension, also try an entry point &quot;sqlite3_X_init&quot; where &quot;X&quot; is based on the shared library filename. This allows every extension to have a different entry point, which allows them to be statically linked with no code changes.</source>
          <target state="translated">デフォルトのエントリポイント &quot;sqlite3_extension_init &quot;がロード可能な拡張機能に存在しない場合、&quot;X &quot;が共有ライブラリのファイル名に基づいているエントリポイント &quot;sqlite3_X_init &quot;も試してみてください。これにより、すべての拡張機能が異なるエントリポイントを持つことができ、コードを変更せずに静的にリンクすることができます。</target>
        </trans-unit>
        <trans-unit id="2f1570bf7cd89b0efb998b886e0a28b989f79bba" translate="yes" xml:space="preserve">
          <source>If the default value of a column is CURRENT_TIME, CURRENT_DATE or CURRENT_TIMESTAMP, then the value used in the new row is a text representation of the current UTC date and/or time. For CURRENT_TIME, the format of the value is &quot;HH:MM:SS&quot;. For CURRENT_DATE, &quot;YYYY-MM-DD&quot;. The format for CURRENT_TIMESTAMP is &quot;YYYY-MM-DD HH:MM:SS&quot;.</source>
          <target state="translated">列のデフォルト値が CURRENT_TIME、CURRENT_DATE、または CURRENT_TIMESTAMP の場合、新しい行で使用される値は、現在の UTC 日付および/または時刻をテキストで表したものになります。CURRENT_TIMEの場合、値の形式は「HH:MM:SS」です。CURRENT_DATEの場合は、「YYYY-MM-DD」です。CURRENT_TIMESTAMP の場合、値の形式は「YYYY-MM-DD HH:MM:SS」です。</target>
        </trans-unit>
        <trans-unit id="763669d7f38746d95d771edeb8a196a32d9d9e41" translate="yes" xml:space="preserve">
          <source>If the default value of a column is an expression in parentheses, then the expression is evaluated once for each row inserted and the results used in the new row.</source>
          <target state="translated">列のデフォルト値が括弧内の式である場合、その式は挿入された行と新しい行で使用された結果に対して1回評価されます。</target>
        </trans-unit>
        <trans-unit id="f9fe1ed106b11da1d5f4cf451a970a2b10eba0b4" translate="yes" xml:space="preserve">
          <source>If the default value of the column is a constant NULL, text, blob or signed-number value, then that value is used directly in the new row.</source>
          <target state="translated">列のデフォルト値が定数NULL、テキスト、ブロブ、または符号付き数字の値である場合は、その値が新しい行で直接使用されます。</target>
        </trans-unit>
        <trans-unit id="6072ed5efdb78dd0e13242a8b605916b880d7376" translate="yes" xml:space="preserve">
          <source>If the detail option is set to &lt;b&gt;column&lt;/b&gt;, then for each term the FTS index records the rowid and column number only, omitting the term offset information. This results in the following restrictions:</source>
          <target state="translated">詳細オプションが&lt;b&gt;column&lt;/b&gt;に設定されている場合、用語ごとにFTSインデックスはROWIDと列番号のみを記録し、用語のオフセット情報を省略します。これにより、次の制限が発生します。</target>
        </trans-unit>
        <trans-unit id="e6f14be9765a087a59fad069383360a3c524d64a" translate="yes" xml:space="preserve">
          <source>If the detail option is set to &lt;b&gt;none&lt;/b&gt;, then for each term the FTS index records just the rowid is stored. Both column and offset information are omitted. As well as the restrictions itemized above for detail=column mode, this imposes the following extra limitations:</source>
          <target state="translated">詳細オプションが&lt;b&gt;none&lt;/b&gt;に設定されている場合、FTSインデックスレコードごとに、ROWIDのみが保存されます。列とオフセット情報の両方が省略されています。上記のdetail = columnモードで説明した制限に加えて、これにより次の追加の制限が課されます。</target>
        </trans-unit>
        <trans-unit id="c0b004cd1f197d0bb3d8b70f7d3071c3e7d65b08" translate="yes" xml:space="preserve">
          <source>If the file-size is not zero bytes and the page cache does not contain valid data for the first page of the database, then the data for the first page must be read from the database.</source>
          <target state="translated">ファイルサイズがゼロバイトではなく、ページキャッシュがデータベースの最初のページの有効なデータを含んでいない場合、最初のページのデータをデータベースから読み込まなければなりません。</target>
        </trans-unit>
        <trans-unit id="7d40fd66a8466c922e947b1b7af920a75a0b5408" translate="yes" xml:space="preserve">
          <source>If the filename argument to the shell is a ZIP archive rather than an SQLite database, then the shell automatically opens that ZIP archive using the &lt;a href=&quot;zipfile&quot;&gt;Zipfile virtual table&lt;/a&gt;.</source>
          <target state="translated">シェルのファイル名引数がSQLiteデータベースではなくZIPアーカイブである場合、シェルは&lt;a href=&quot;zipfile&quot;&gt;Zipfile仮想テーブル&lt;/a&gt;を使用してそのZIPアーカイブを自動的に開きます。</target>
        </trans-unit>
        <trans-unit id="ae3dbad88e43cb04cd5afd00c461d318a7360e00" translate="yes" xml:space="preserve">
          <source>If the filename is &quot;:memory:&quot;, then a private, temporary in-memory database is created for the connection. This in-memory database will vanish when the database connection is closed. Future versions of SQLite might make use of additional special filenames that begin with the &quot;:&quot; character. It is recommended that when a database filename actually does begin with a &quot;:&quot; character you should prefix the filename with a pathname such as &quot;./&quot; to avoid ambiguity.</source>
          <target state="translated">ファイル名が&quot;:memory:&quot;の場合、接続のためのプライベートな一時的なインメモリデータベースが作成されます。このインメモリデータベースは、データベース接続が閉じられると消滅します。SQLite の将来のバージョンでは、&quot;:&quot; で始まる特殊なファイル名を使用することができるかもしれません。データベースのファイル名が実際に &quot;:&quot; 文字で始まる場合は、曖昧さを避けるためにファイル名の前に &quot;./&quot; のようなパス名を付けることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="62f7e60cb107b276af1d9e468c997800e50e0c47" translate="yes" xml:space="preserve">
          <source>If the filename is an empty string, then a private, temporary on-disk database will be created. This private database will be automatically deleted as soon as the database connection is closed.</source>
          <target state="translated">ファイル名が空文字列の場合は、プライベートで一時的なディスク上のデータベースが作成されます。このプライベートデータベースは、データベース接続が閉じられるとすぐに自動的に削除されます。</target>
        </trans-unit>
        <trans-unit id="32dd493cb01796f1b19bb91ce938cad16395b6df" translate="yes" xml:space="preserve">
          <source>If the final parameter to sqlite3_create_function_v2() or sqlite3_create_window_function() is not NULL, then it is destructor for the application data pointer. The destructor is invoked when the function is deleted, either by being overloaded or when the database connection closes. The destructor is also invoked if the call to sqlite3_create_function_v2() fails. When the destructor callback is invoked, it is passed a single argument which is a copy of the application data pointer which was the fifth parameter to sqlite3_create_function_v2().</source>
          <target state="translated">sqlite3_create_function_v2()またはsqlite3_create_window_function()の最終パラメータがNULLでない場合、それはアプリケーションデータポインタのデストラクタです。デストラクタは関数が削除されたとき、オーバーロードされたとき、またはデータベース接続が閉じたときに呼び出されます。デストラクタは、sqlite3_create_function_v2()の呼び出しが失敗した場合にも呼び出されます。デストラクタ・コールバックが呼び出されたとき、sqlite3_create_function_v2()の5番目のパラメータであるアプリケーション・データ・ポインタのコピーが1つの引数として渡されます。</target>
        </trans-unit>
        <trans-unit id="a0307f53fcf484b466b65b063fa221cd6f594f91" translate="yes" xml:space="preserve">
          <source>If the first character of the &quot;.output&quot; or &quot;.once&quot; filename is a pipe symbol (&quot;|&quot;) then the remaining characters are treated as a command and the output is sent to that command. This makes it easy to pipe the results of a query into some other process. For example, the &quot;open -f&quot; command on a Mac opens a text editor to display the content that it reads from standard input. So to see the results of a query in a text editor, one could type:</source>
          <target state="translated">.output&quot; または &quot;.once&quot; ファイル名の最初の文字がパイプ記号 (&quot;|&quot;)の場合、残りの文字はコマンドとして扱われ、出力はそのコマンドに送られます。これにより、クエリの結果を他のプロセスにパイプすることが容易になります。例えば、Mac の &quot;open -f&quot; コマンドは、標準入力から読み込んだ内容を表示するためにテキストエディタを開きます。ですから、テキストエディタでクエリの結果を見るには、次のように入力します。</target>
        </trans-unit>
        <trans-unit id="f6248b44ea5d1fc55c81c80463d285a1931abd4d" translate="yes" xml:space="preserve">
          <source>If the flags parameter is non-zero, then the BLOB is opened for read and write access. If the flags parameter is zero, the BLOB is opened for read-only access.</source>
          <target state="translated">flagsパラメータが0以外の場合、BLOBは読み取りおよび書き込みアクセスのためにオープンされます。flagsパラメータが0の場合、BLOBは読み取り専用アクセス用にオープンされます。</target>
        </trans-unit>
        <trans-unit id="42e53a5898ca221d8e5453208404df16340c520e" translate="yes" xml:space="preserve">
          <source>If the frame type is RANGE or GROUPS, then rows with the same values for all ORDER BY expressions are considered &quot;peers&quot;. Or, if there are no ORDER BY terms, all rows are peers. Peers are always within the same frame.</source>
          <target state="translated">フレームタイプがRANGEまたはGROUPSの場合、すべてのORDER BY式で同じ値を持つ行は「ピア」とみなされます。または、ORDER BY式がない場合、すべての行は「ピア」とみなされます。ピアは常に同じフレーム内に存在します。</target>
        </trans-unit>
        <trans-unit id="4aa0a21905f32bbcafa3289b7a629a809ef523ab" translate="yes" xml:space="preserve">
          <source>If the full-text index is consistent with the contents of the table, the INSERT used to invoke the integrity-check command succeeds. Or, if any discrepancy is found, it fails with an &lt;a href=&quot;rescode#corrupt_vtab&quot;&gt;SQLITE_CORRUPT_VTAB&lt;/a&gt; error.</source>
          <target state="translated">フルテキストインデックスがテーブルの内容と一致している場合、整合性チェックコマンドを呼び出すために使用されるINSERTは成功します。または、不一致が見つかった場合、&lt;a href=&quot;rescode#corrupt_vtab&quot;&gt;SQLITE_CORRUPT_VTAB&lt;/a&gt;エラーで失敗します。</target>
        </trans-unit>
        <trans-unit id="f22af0b11cea33d685991d206d7069a56eda1b2e" translate="yes" xml:space="preserve">
          <source>If the function is registered using the sqlite3_collation_needed() API, then it is passed the names of undefined collation sequences as strings encoded in UTF-8. If sqlite3_collation_needed16() is used, the names are passed as UTF-16 in machine native byte order. A call to either function replaces the existing collation-needed callback.</source>
          <target state="translated">sqlite3_collation_needed()APIを使用して関数を登録した場合、未定義の照合順序の名前をUTF-8でエンコードされた文字列として渡します。sqlite3_collation_need16()を使用した場合、名前はマシンネイティブのバイト順でUTF-16として渡されます。いずれかの関数の呼び出しは、既存の照合が必要なコールバックを置き換えます。</target>
        </trans-unit>
        <trans-unit id="6a62bcf0e73dbd9b64d823a84e324e7b03ef33b0" translate="yes" xml:space="preserve">
          <source>If the hard upper bound on mmap_size is non-zero at compilation time, it may still be reduced or zeroed at start-time using the &lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config&lt;/a&gt;(&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigmmapsize&quot;&gt;SQLITE_CONFIG_MMAP_SIZE&lt;/a&gt;,X,Y) interface. The X and Y parameters must both be 64-bit signed integers. The X parameter is the default mmap_size of the process and the Y is the new hard upper bound. The hard upper bound cannot be increased above its compile-time setting using &lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigmmapsize&quot;&gt;SQLITE_CONFIG_MMAP_SIZE&lt;/a&gt; but it can be reduced or zeroed.</source>
          <target state="translated">mmap_sizeのハード上限がコンパイル時にゼロでない場合でも、&lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config&lt;/a&gt;（&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigmmapsize&quot;&gt;SQLITE_CONFIG_MMAP_SIZE&lt;/a&gt;、X、Y）インターフェースを使用して、起動時に削減またはゼロ化される可能性があります。XおよびYパラメーターは、両方とも64ビットの符号付き整数でなければなりません。Xパラメータはプロセスのデフォルトのmmap_sizeであり、Yは新しいハード上限です。ハード上限は、&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigmmapsize&quot;&gt;SQLITE_CONFIG_MMAP_SIZE&lt;/a&gt;を使用してコンパイル時の設定を超えて増やすことはできませんが、減らすかゼロにすることができます。</target>
        </trans-unit>
        <trans-unit id="7e3c788b80a3fc760cf36b37df86e977c5bf4e82" translate="yes" xml:space="preserve">
          <source>If the initial value of register P1 is less than 1, then the value is unchanged and control passes through to the next instruction.</source>
          <target state="translated">レジスタP1の初期値が1未満であれば、その値は変化せず、次の命令に制御が通る。</target>
        </trans-unit>
        <trans-unit id="c6c2836bf573a577c3b9e85be740fd6180f2bc75" translate="yes" xml:space="preserve">
          <source>If the insert operation would cause the uniqueness constraint identified by the conflict-target clause to fail, then the insert is omitted and either the DO NOTHING or DO UPDATE operation is performed instead. In the case of a multi-row insert, this decision is made separately for each row of the insert.</source>
          <target state="translated">挿入操作により、conflict-target節で特定された一意性制約が失敗する場合、挿入は省略され、代わりにDO NOTHINGまたはDO UPDATE操作が実行されます。複数行挿入の場合、この決定は挿入の各行に対して個別に行われます。</target>
        </trans-unit>
        <trans-unit id="5cd79e7c31e9806cd77deff0cb0e96d9ab910562" translate="yes" xml:space="preserve">
          <source>If the iterator points to a valid DELETE or UPDATE entry, the &lt;a href=&quot;session/sqlite3changeset_old&quot;&gt;sqlite3changeset_old()&lt;/a&gt; API may be used to obtain the old.* values within the change payload.</source>
          <target state="translated">イテレーターが有効なDELETEまたはUPDATEエントリーを指す場合、&lt;a href=&quot;session/sqlite3changeset_old&quot;&gt;sqlite3changeset_old（）&lt;/a&gt; APIを使用して、変更ペイロード内のold。*値を取得できます。</target>
        </trans-unit>
        <trans-unit id="b3c7141c41f848703cade5e408485ed848edf925" translate="yes" xml:space="preserve">
          <source>If the iterator points to a valid INSERT or UPDATE entry, the &lt;a href=&quot;session/sqlite3changeset_new&quot;&gt;sqlite3changeset_new()&lt;/a&gt; API may be used to obtain the new.* values within the change payload.</source>
          <target state="translated">イテレータが有効なINSERTまたはUPDATEエントリを指す場合、&lt;a href=&quot;session/sqlite3changeset_new&quot;&gt;sqlite3changeset_new（）&lt;/a&gt; APIを使用して、変更ペイロード内のnew。*値を取得できます。</target>
        </trans-unit>
        <trans-unit id="27b2873f49d5b86c6645b602757d6284a617e429" translate="yes" xml:space="preserve">
          <source>If the iterator points to a valid entry, the &lt;a href=&quot;session/sqlite3changeset_op&quot;&gt;sqlite3changeset_op()&lt;/a&gt; API may be used to determine the type of change (INSERT, UPDATE or DELETE) that the iterator points to. Additionally, the same API can be used to obtain the name of the table the change applies to and its expected number of columns and primary key columns.</source>
          <target state="translated">イテレーターが有効なエントリーを指す場合、&lt;a href=&quot;session/sqlite3changeset_op&quot;&gt;sqlite3changeset_op（）&lt;/a&gt; APIを使用して、イテレーターが指す変更のタイプ（INSERT、UPDATE、またはDELETE）を判別できます。さらに、同じAPIを使用して、変更が適用されるテーブルの名前と、列および主キー列の予想される数を取得できます。</target>
        </trans-unit>
        <trans-unit id="5e43f90e3097e7ba0e1ecf1e86b3e41e586eb695" translate="yes" xml:space="preserve">
          <source>If the join-operator is &quot;CROSS JOIN&quot;, &quot;INNER JOIN&quot;, &quot;JOIN&quot; or a comma (&quot;,&quot;) and there is no ON or USING clause, then the result of the join is simply the cartesian product of the left and right-hand datasets. If join-operator does have ON or USING clauses, those are handled according to the following bullet points:</source>
          <target state="translated">join-operatorが &quot;CROSS JOIN&quot;,&quot;INNER JOIN&quot;,&quot;JOIN&quot;,&quot;JOIN &quot;またはカンマ(&quot;,&quot;)で、ON句やUSING句がない場合、結合の結果は単に左手と右手のデータセットの直交積となります。JOIN演算子にON句やUSING句がある場合、それらは以下の箇条書きに従って処理されます。</target>
        </trans-unit>
        <trans-unit id="e1fb18a5273cd27a264734974f9f02d1710aa767" translate="yes" xml:space="preserve">
          <source>If the join-operator is a &quot;LEFT JOIN&quot; or &quot;LEFT OUTER JOIN&quot;, then after the ON or USING filtering clauses have been applied, an extra row is added to the output for each row in the original left-hand input dataset that corresponds to no rows at all in the composite dataset (if any). The added rows contain NULL values in the columns that would normally contain values copied from the right-hand input dataset.</source>
          <target state="translated">join-operatorが &quot;LEFT JOIN &quot;または &quot;LEFT OUTER JOIN &quot;の場合、ON句またはUSING句のフィルタリングが適用された後、元の左手入力データセットの各行の出力に余分な行が追加され、その行は複合データセットの行が全く存在しないことに対応します(存在する場合)。追加された行には,通常は右手入力データセットからコピーされた値を含むであろう列に NULL 値が含まれる.</target>
        </trans-unit>
        <trans-unit id="76658faf4e1e99248322d20ab1af06451a7269ae" translate="yes" xml:space="preserve">
          <source>If the json_remove(X) function is called with no path arguments, then it returns the input X reformatted, with excess whitespace removed.</source>
          <target state="translated">json_remove(X)関数がパス引数なしで呼ばれた場合は、余分な空白を削除して再フォーマットされた入力 X を返します。</target>
        </trans-unit>
        <trans-unit id="b094bdd6dfc46d4028fcd23aee2c781ab15d0c15" translate="yes" xml:space="preserve">
          <source>If the last client using the database shuts down cleanly by calling &lt;a href=&quot;c3ref/close&quot;&gt;sqlite3_close()&lt;/a&gt;, then a &lt;a href=&quot;wal#ckpt&quot;&gt;checkpoint&lt;/a&gt; is run automatically in order to transfer all information from the wal file over into the main database, and both the shm file and the wal file are unlinked. Thus, when the database is not in use by any client, it is usually the case that only the main database file exists on disk. However, if the last client did not call &lt;a href=&quot;c3ref/close&quot;&gt;sqlite3_close()&lt;/a&gt; before it shut down, or if the last client to disconnect was a read-only client, then the final cleanup operation does not occur and the shm and wal files may still exist on disk even when the database is not in use.</source>
          <target state="translated">最後のクライアントが呼び出すことでダウンきれいデータベース閉まりを使用している場合&lt;a href=&quot;c3ref/close&quot;&gt;sqlite3_closeを（） &lt;/a&gt;、その後、&lt;a href=&quot;wal#ckpt&quot;&gt;チェックポイントは&lt;/a&gt;、メインデータベースにかけWALファイルからすべての情報を転送するために自動的に実行され、SHMファイルとWALファイルの両方がリンク解除されます。したがって、データベースがどのクライアントでも使用されていない場合、通常は、メインデータベースファイルのみがディスクに存在します。ただし、最後のクライアントがシャットダウンする前に&lt;a href=&quot;c3ref/close&quot;&gt;sqlite3_close（）を&lt;/a&gt;呼び出さなかった場合、または切断する最後のクライアントが読み取り専用クライアントであった場合、最後のクリーンアップ操作は行われず、ディスク上にshmおよびwalファイルがまだ存在する可能性があります。データベースが使用されていないときでも。</target>
        </trans-unit>
        <trans-unit id="4f7a9d6c2807cb225b7b7ab46b05552f481cc42e" translate="yes" xml:space="preserve">
          <source>If the last connection to a database crashed, then the first new connection to open the database will start a recovery process. An exclusive lock is held during recovery. So if a third database connection tries to jump in and query while the second connection is running recovery, the third connection will get an &lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt; error.</source>
          <target state="translated">データベースへの最後の接続がクラッシュした場合、データベースを開くための最初の新しい接続が回復プロセスを開始します。リカバリー中、排他ロックが保持されます。そのため、2番目の接続が回復を実行しているときに3番目のデータベース接続がジャンプしてクエリを実行しようとすると、3番目の接続で&lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt;エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="37b7298e57bd67e9cd0305c3baee9cc81b8dbc9d" translate="yes" xml:space="preserve">
          <source>If the lastname and firstname on the bottom row of the previous screen are bound to ?1 and ?2, then the query above computes the next 7 rows. And, assuming there is an appropriate index, it does so very efficiently &amp;mdash; much more efficiently than OFFSET.</source>
          <target state="translated">前の画面の一番下の行の姓と名が？1と？2にバインドされている場合、上記のクエリは次の7行を計算します。そして、適切なインデックスがあると仮定すると、非常に効率的になります&amp;mdash; OFFSETよりもはるかに効率的です。</target>
        </trans-unit>
        <trans-unit id="4e01c1ab95f2a00094ec0341f6411fa5bdba3e3d" translate="yes" xml:space="preserve">
          <source>If the library is not configured for UTF-8 and the Tcl library is one of the newer ones that uses UTF-8 internally, then a conversion from UTF-8 to iso8859 and back again is done inside the TCL interface.</source>
          <target state="translated">ライブラリが UTF-8 用に設定されておらず、Tcl ライブラリが内部的に UTF-8 を使用する新しいものの 1 つである場合、UTF-8 から iso8859 への変換が TCL インターフェイス内で行われ、再び変換されます。</target>
        </trans-unit>
        <trans-unit id="e9f32c50cc50b5c20674f65e05651f4083f0b21f" translate="yes" xml:space="preserve">
          <source>If the locking mode is EXCLUSIVE when first entering &lt;a href=&quot;wal&quot;&gt;WAL journal mode&lt;/a&gt;, then the locking mode cannot be changed to NORMAL until after exiting WAL journal mode. If the locking mode is NORMAL when first entering WAL journal mode, then the locking mode can be changed between NORMAL and EXCLUSIVE and back again at any time and without needing to exit WAL journal mode.</source>
          <target state="translated">最初に&lt;a href=&quot;wal&quot;&gt;WALジャーナルモード&lt;/a&gt;に入るときにロックモードがEXCLUSIVEである場合、WALジャーナルモードを終了するまでロックモードをNORMALに変更できません。最初にWALジャーナルモードに入るときにロックモードがNORMALの場合、WALジャーナルモードを終了せずに、ロックモードをNORMALとEXCLUSIVEの間でいつでも変更できます。</target>
        </trans-unit>
        <trans-unit id="4d5f5f76a7fce4a19ed7250628145b10beef7a78" translate="yes" xml:space="preserve">
          <source>If the matchable phrase in the FTS query is restricted to matching data in a specified FTS table column, then only phrase matches that occur within that column are considered.</source>
          <target state="translated">FTS クエリ内の一致可能なフレーズが、指定された FTS テーブル列内のデータとの一致に制限されている場合、その列内で発生したフレーズの一致のみが考慮されます。</target>
        </trans-unit>
        <trans-unit id="e74ad1dee292520ae801328610398f65c1bd2944" translate="yes" xml:space="preserve">
          <source>If the memory allocation subsystems within SQLite are configured for breakdown-free operation but the actual memory usage exceeds design limits set by the &lt;a href=&quot;malloc#nofrag&quot;&gt;Robson proof&lt;/a&gt;, SQLite will usually continue to operate normally. The &lt;a href=&quot;malloc#pagecache&quot;&gt;pagecache memory allocator&lt;/a&gt; and the &lt;a href=&quot;malloc#lookaside&quot;&gt;lookaside memory allocator&lt;/a&gt; automatically failover to the &lt;a href=&quot;malloc#memsys5&quot;&gt;memsys5&lt;/a&gt; general-purpose memory allocator. And it is usually the case that the &lt;a href=&quot;malloc#memsys5&quot;&gt;memsys5&lt;/a&gt; memory allocator will continue to function without fragmentation even if &lt;b&gt;M&lt;/b&gt; and/or &lt;b&gt;n&lt;/b&gt; exceeds the limits imposed by the &lt;a href=&quot;malloc#nofrag&quot;&gt;Robson proof&lt;/a&gt;. The &lt;a href=&quot;malloc#nofrag&quot;&gt;Robson proof&lt;/a&gt; shows that it is possible for a memory allocation to break down and fail in this circumstance, but such a failure requires an especially despicable sequence of allocations and deallocations - a sequence that SQLite has never been observed to follow. So in practice it is usually the case that the limits imposed by Robson can be exceeded by a considerable margin with no ill effect.</source>
          <target state="translated">SQLite内のメモリ割り当てサブシステムが故障のない操作用に構成されているが、実際のメモリ使用量が&lt;a href=&quot;malloc#nofrag&quot;&gt;Robson証明&lt;/a&gt;によって設定された設計の制限を超えている場合、SQLiteは通常どおり正常に動作し続けます。&lt;a href=&quot;malloc#pagecache&quot;&gt;ページキャッシュメモリアロケータ&lt;/a&gt;と&lt;a href=&quot;malloc#lookaside&quot;&gt;ルックアサイドメモリアロケータ&lt;/a&gt;自動フェイルオーバに&lt;a href=&quot;malloc#memsys5&quot;&gt;memsys5&lt;/a&gt;汎用メモリアロケータ。また、&lt;b&gt;M&lt;/b&gt;や&lt;b&gt;n&lt;/b&gt;が&lt;a href=&quot;malloc#nofrag&quot;&gt;Robsonの証明&lt;/a&gt;によって課された制限を超えた場合でも、通常、&lt;a href=&quot;malloc#memsys5&quot;&gt;memsys5&lt;/a&gt;メモリアロケータは断片化せずに機能し続けます。&lt;a href=&quot;malloc#nofrag&quot;&gt;ロブソンの証拠&lt;/a&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;は、この状況でメモリ割り当てが故障して失敗する可能性があることを示していますが、そのような失敗には、割り当てと割り当て解除の特に目立たないシーケンスが必要です。したがって、実際には、通常、ロブソンによって課された制限は、悪影響を与えることなくかなりのマージンで超えることができます。</target>
        </trans-unit>
        <trans-unit id="ccc13fed0f9a7a53b6beaefda251b5fe55a5b377" translate="yes" xml:space="preserve">
          <source>If the missing function returns an error, then the database is not opened and the error returned to the user. If an openclose function is configured, then a &quot;close&quot; invocation is issued at this point to match the earlier &quot;open&quot;. The following pseudo-code illustrates the procedure used by a swarmvtab instance with both missing and openclose functions configured when a component database is opened.</source>
          <target state="translated">欠落した関数がエラーを返した場合、データベースはオープンされず、そのエラーがユーザに返されます。openclose関数が構成されている場合、この時点で「close」呼び出しが発行され、以前の「open」と一致します。以下の擬似コードは、コンポーネント・データベースがオープンされたときに、欠落関数とopenclose関数の両方が構成されているswarmvtabインスタンスで使用される手順を示しています。</target>
        </trans-unit>
        <trans-unit id="da30913cd33d5b91e0a650b018579fde9dd09c23" translate="yes" xml:space="preserve">
          <source>If the most recent call to &lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step(S)&lt;/a&gt; for the &lt;a href=&quot;#sqlite3_stmt&quot;&gt;prepared statement&lt;/a&gt; S indicated an error, then &lt;a href=&quot;#sqlite3_reset&quot;&gt;sqlite3_reset(S)&lt;/a&gt; returns an appropriate &lt;a href=&quot;rescode&quot;&gt;error code&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_stmt&quot;&gt;準備されたステートメント&lt;/a&gt; S に対する&lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step（S）&lt;/a&gt;への最後の呼び出しがエラーを示した場合、&lt;a href=&quot;#sqlite3_reset&quot;&gt;sqlite3_reset（S）&lt;/a&gt;は適切な&lt;a href=&quot;rescode&quot;&gt;エラーコードを&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="40013c6ef594b13a3f8340842450df9d33bd6702" translate="yes" xml:space="preserve">
          <source>If the most recent call to &lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step(S)&lt;/a&gt; for the &lt;a href=&quot;#sqlite3_stmt&quot;&gt;prepared statement&lt;/a&gt; S returned &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_ROW&lt;/a&gt; or &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_DONE&lt;/a&gt;, or if &lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step(S)&lt;/a&gt; has never before been called on S, then &lt;a href=&quot;#sqlite3_reset&quot;&gt;sqlite3_reset(S)&lt;/a&gt; returns &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OK&lt;/a&gt;.</source>
          <target state="translated">最新の呼び出し場合は&lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step（S）&lt;/a&gt;のために&lt;a href=&quot;#sqlite3_stmt&quot;&gt;準備された文&lt;/a&gt; Sが返さ&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_ROW&lt;/a&gt;または&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_DONE&lt;/a&gt;、または場合&lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step（S）を&lt;/a&gt;前にSで呼び出されたことがない、そして&lt;a href=&quot;#sqlite3_reset&quot;&gt;sqlite3_reset（S）&lt;/a&gt;を返し&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OKを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0cc58a427f7c8746f7e6e3f5425c1b7c73b16876" translate="yes" xml:space="preserve">
          <source>If the most recent call to &lt;a href=&quot;step&quot;&gt;sqlite3_step(S)&lt;/a&gt; for the &lt;a href=&quot;stmt&quot;&gt;prepared statement&lt;/a&gt; S indicated an error, then &lt;a href=&quot;reset&quot;&gt;sqlite3_reset(S)&lt;/a&gt; returns an appropriate &lt;a href=&quot;../rescode&quot;&gt;error code&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stmt&quot;&gt;準備されたステートメント&lt;/a&gt; S に対する&lt;a href=&quot;step&quot;&gt;sqlite3_step（S）&lt;/a&gt;への最後の呼び出しがエラーを示した場合、&lt;a href=&quot;reset&quot;&gt;sqlite3_reset（S）&lt;/a&gt;は適切な&lt;a href=&quot;../rescode&quot;&gt;エラーコードを&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="36afaf441091086a1762a1226de0f8218bd283bf" translate="yes" xml:space="preserve">
          <source>If the most recent call to &lt;a href=&quot;step&quot;&gt;sqlite3_step(S)&lt;/a&gt; for the &lt;a href=&quot;stmt&quot;&gt;prepared statement&lt;/a&gt; S returned &lt;a href=&quot;../rescode#row&quot;&gt;SQLITE_ROW&lt;/a&gt; or &lt;a href=&quot;../rescode#done&quot;&gt;SQLITE_DONE&lt;/a&gt;, or if &lt;a href=&quot;step&quot;&gt;sqlite3_step(S)&lt;/a&gt; has never before been called on S, then &lt;a href=&quot;reset&quot;&gt;sqlite3_reset(S)&lt;/a&gt; returns &lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OK&lt;/a&gt;.</source>
          <target state="translated">最新の呼び出し場合は&lt;a href=&quot;step&quot;&gt;sqlite3_step（S）&lt;/a&gt;のために&lt;a href=&quot;stmt&quot;&gt;準備された文&lt;/a&gt; Sが返さ&lt;a href=&quot;../rescode#row&quot;&gt;SQLITE_ROW&lt;/a&gt;または&lt;a href=&quot;../rescode#done&quot;&gt;SQLITE_DONE&lt;/a&gt;、または場合&lt;a href=&quot;step&quot;&gt;sqlite3_step（S）を&lt;/a&gt;前にSで呼び出されたことがない、そして&lt;a href=&quot;reset&quot;&gt;sqlite3_reset（S）&lt;/a&gt;を返し&lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OKを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bd08063b2d67d7c5aa3fda6b30f29f4f613d2690" translate="yes" xml:space="preserve">
          <source>If the most recent sqlite3_* API call associated with &lt;a href=&quot;#sqlite3&quot;&gt;database connection&lt;/a&gt; D failed, then the sqlite3_errcode(D) interface returns the numeric &lt;a href=&quot;rescode&quot;&gt;result code&lt;/a&gt; or &lt;a href=&quot;rescode#extrc&quot;&gt;extended result code&lt;/a&gt; for that API call. The sqlite3_extended_errcode() interface is the same except that it always returns the &lt;a href=&quot;rescode#extrc&quot;&gt;extended result code&lt;/a&gt; even when extended result codes are disabled.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3&quot;&gt;データベース接続&lt;/a&gt; Dに関連付けられた最新のsqlite3_ * API呼び出しが失敗した場合、sqlite3_errcode（D）インターフェースは、そのAPI呼び出しの数値&lt;a href=&quot;rescode&quot;&gt;結果コード&lt;/a&gt;または&lt;a href=&quot;rescode#extrc&quot;&gt;拡張結果コード&lt;/a&gt;を返します。sqlite3_extended_errcode（）インターフェースは同じですが、拡張結果コードが無効になっている場合でも、常に&lt;a href=&quot;rescode#extrc&quot;&gt;拡張結果コードを&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="02b382e95c5f6b3f587125cf8455da646274a1ae" translate="yes" xml:space="preserve">
          <source>If the most recent sqlite3_* API call associated with &lt;a href=&quot;sqlite3&quot;&gt;database connection&lt;/a&gt; D failed, then the sqlite3_errcode(D) interface returns the numeric &lt;a href=&quot;../rescode&quot;&gt;result code&lt;/a&gt; or &lt;a href=&quot;../rescode#extrc&quot;&gt;extended result code&lt;/a&gt; for that API call. The sqlite3_extended_errcode() interface is the same except that it always returns the &lt;a href=&quot;../rescode#extrc&quot;&gt;extended result code&lt;/a&gt; even when extended result codes are disabled.</source>
          <target state="translated">&lt;a href=&quot;sqlite3&quot;&gt;データベース接続&lt;/a&gt; Dに関連付けられた最新のsqlite3_ * API呼び出しが失敗した場合、sqlite3_errcode（D）インターフェースは、そのAPI呼び出しの数値&lt;a href=&quot;../rescode&quot;&gt;結果コード&lt;/a&gt;または&lt;a href=&quot;../rescode#extrc&quot;&gt;拡張結果コード&lt;/a&gt;を返します。sqlite3_extended_errcode（）インターフェースは同じですが、拡張結果コードが無効になっている場合でも、常に&lt;a href=&quot;../rescode#extrc&quot;&gt;拡張結果コードを&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="5550b629f440ed23b3241e812f943180a93fdc19" translate="yes" xml:space="preserve">
          <source>If the nByte argument is negative, then zSql is read up to the first zero terminator. If nByte is positive, then it is the number of bytes read from zSql. If nByte is zero, then no prepared statement is generated. If the caller knows that the supplied string is nul-terminated, then there is a small performance advantage to passing an nByte parameter that is the number of bytes in the input string</source>
          <target state="translated">nByte 引数が負の場合、zSql は最初のゼロ終端まで読み込まれます。nByteが正の場合、それはzSqlから読み出されたバイト数です。nByte がゼロの場合、準備されたステートメントは生成されません。呼び出し側が供給された文字列がヌル終端であることを知っている場合、入力文字列のバイト数である nByte パラメータを渡すことには小さなパフォーマンス上の利点があります。</target>
        </trans-unit>
        <trans-unit id="e34afe39a4a88dd3fd33f4104d3959b3a21962af" translate="yes" xml:space="preserve">
          <source>If the name of the database is an empty string, open a new database in a temporary file that is automatically deleted when the database is closed.</source>
          <target state="translated">データベースの名前が空の文字列の場合は、データベースが閉じられたときに自動的に削除される一時ファイルに新しいデータベースを開きます。</target>
        </trans-unit>
        <trans-unit id="4c3da3e28f6b46a881fb905c79f9b554244037e3" translate="yes" xml:space="preserve">
          <source>If the new changeset contains changes to a table that is already present in the changegroup, then the number of columns and the position of the primary key columns for the table must be consistent. If this is not the case, this function fails with SQLITE_SCHEMA. If the input changeset appears to be corrupt and the corruption is detected, SQLITE_CORRUPT is returned. Or, if an out-of-memory condition occurs during processing, this function returns SQLITE_NOMEM. In all cases, if an error occurs the final contents of the changegroup is undefined.</source>
          <target state="translated">新しいチェンジセットに、すでにチェンジグループに存在するテーブルへの変更が含まれている場合、そのテーブルのカラム数と主キーカラムの位置が一致していなければなりません。そうでない場合、この関数はSQLITE_SCHEMAで失敗します。入力されたチェンジセットが破損しているように見え、破損が検出された場合、SQLITE_CORRUPTが返されます。または、処理中にメモリ切れ状態が発生した場合、この関数はSQLITE_NOMEMを返します。いずれの場合も、エラーが発生した場合、チェンジグループの最終的な内容は未定義となります。</target>
        </trans-unit>
        <trans-unit id="27ef56041d2d705e25a721ff1b854e81e350859e" translate="yes" xml:space="preserve">
          <source>If the new limit is a negative number, the limit is unchanged. For each limit category SQLITE_LIMIT_</source>
          <target state="translated">新しい制限が負の数の場合、制限は変更されません。各リミットカテゴリについて SQLITE_LIMIT_LIMIT</target>
        </trans-unit>
        <trans-unit id="dbc989a098eb2be336e5500ea022b41d17fc93aa" translate="yes" xml:space="preserve">
          <source>If the number of output rows is K, then the time needed to sort is proportional to KlogK. If K is small, the sorting time is usually not a factor, but in a query such as the above where K==N, the time needed to sort can be much greater than the time needed to do a full table scan. Furthermore, the entire output is accumulated in temporary storage (which might be either in main memory or on disk, depending on various compile-time and run-time settings) which can mean that a lot of temporary storage is required to complete the query.</source>
          <target state="translated">出力行数がKの場合、ソートに要する時間はKlogKに比例します。Kが小さければ、通常はソート時間は関係ありませんが、上記のようなK==Nのクエリでは、ソートに必要な時間は、テーブル全体のスキャンに必要な時間よりもはるかに大きくなる可能性があります。さらに、出力全体が一時的なストレージに蓄積されます(コンパイル時やランタイムの設定によっては、メインメモリやディスク上に蓄積されることもあります)。</target>
        </trans-unit>
        <trans-unit id="c9314fcd77821589cea840c1fc80043331e7d710" translate="yes" xml:space="preserve">
          <source>If the operating system does not support sleep requests with millisecond time resolution, then the time will be rounded up to the nearest second. The number of milliseconds of sleep actually requested from the operating system is returned.</source>
          <target state="translated">オペレーティングシステムがミリ秒単位の時間分解能を持つスリープ要求をサポートしていない場合、時間は最も近い秒に切り上げられます。オペレーティングシステムから実際に要求されたスリープのミリ秒数が返されます。</target>
        </trans-unit>
        <trans-unit id="13ac5ae90471727393e9b13c70a7b1b4bc52ca60" translate="yes" xml:space="preserve">
          <source>If the operating system returns an I/O error while attempting to obtain a certain lock on shared memory in &lt;a href=&quot;wal&quot;&gt;WAL mode&lt;/a&gt; then SQLite might fail to reset its cache, which could lead to database corruption if subsequent writes are attempted.</source>
          <target state="translated">&lt;a href=&quot;wal&quot;&gt;WALモード&lt;/a&gt;で共有メモリの特定のロックを取得しようとしたときにオペレーティングシステムがI / Oエラーを返した場合、SQLiteはキャッシュのリセットに失敗し、その後の書き込みが試行されるとデータベースが破損する可能性があります。</target>
        </trans-unit>
        <trans-unit id="387f85a0f9d5d2d59fdee2093a34c406de18ba33" translate="yes" xml:space="preserve">
          <source>If the operation successful, SQLITE_OK is returned. Otherwise, an SQLite error code. In this case, if argument pzErrMsg is not NULL, *pzErrMsg may be set to point to a buffer containing an English language error message. It is the responsibility of the caller to free this buffer using sqlite3_free().</source>
          <target state="translated">操作が成功した場合、SQLITE_OK が返されます。そうでなければ、SQLite エラーコードが返されます。この場合、引数pzErrMsgがNULLでない場合、*pzErrMsgは英語のエラーメッセージを含むバッファを指すように設定されます。sqlite3_free()を使用してこのバッファを解放するのは呼び出し元の責任です。</target>
        </trans-unit>
        <trans-unit id="64ab9d2da26c1826cadd00ea1395a9af67e21893" translate="yes" xml:space="preserve">
          <source>If the optional ESCAPE clause is present, then the expression following the ESCAPE keyword must evaluate to a string consisting of a single character. This character may be used in the LIKE pattern to include literal percent or underscore characters. The escape character followed by a percent symbol (%), underscore (_), or a second instance of the escape character itself matches a literal percent symbol, underscore, or a single escape character, respectively.</source>
          <target state="translated">オプションの ESCAPE 節がある場合、ESCAPE キーワードに続く式は、1 つの文字からなる文字列として評価する必要があります。この文字は、リテラルのパーセント文字やアンダースコア文字を含むように LIKE パターンで使用することができます。パーセント記号 (%)、アンダースコア (_)、またはエスケープ文字の 2 番目のインスタンスが続くエスケープ文字は、それぞれリテラルのパーセント記号、アンダースコア、または単一のエスケープ文字にマッチします。</target>
        </trans-unit>
        <trans-unit id="3874cddaea0653331a0794c8eb1dd76401bd55b2" translate="yes" xml:space="preserve">
          <source>If the optional IF NOT EXISTS clause is present and another index with the same name already exists, then this command becomes a no-op.</source>
          <target state="translated">オプションのIF NOT EXISTS句が存在し、同名の別のインデックスが既に存在する場合、このコマンドは実行不可能になります。</target>
        </trans-unit>
        <trans-unit id="65cace3a0d2d4d6370079a8ce7f587fee8e20bbc" translate="yes" xml:space="preserve">
          <source>If the outer query is an aggregate, then the subquery may not contain ORDER BY.</source>
          <target state="translated">外部クエリが集約である場合、サブクエリはORDER BYを含んではいけません。</target>
        </trans-unit>
        <trans-unit id="0b950d8e0107ea7fe292918a7624ecc4c5105550" translate="yes" xml:space="preserve">
          <source>If the outer query is part of a compound select, then the subquery may not have a LIMIT clause.</source>
          <target state="translated">外部クエリが複合セレクトの一部である場合、サブクエリはLIMIT句を持たないことがあります。</target>
        </trans-unit>
        <trans-unit id="9ec4e583fb2aac08c6ef7929f12a08ccd0d23acd" translate="yes" xml:space="preserve">
          <source>If the output parameters (ppRebase) and (pnRebase) are non-NULL and the input is a changeset (not a patchset), then sqlite3changeset_apply_v2() may set (*ppRebase) to point to a &quot;rebase&quot; that may be used with the sqlite3_rebaser APIs buffer before returning. In this case (*pnRebase) is set to the size of the buffer in bytes. It is the responsibility of the caller to eventually free any such buffer using sqlite3_free(). The buffer is only allocated and populated if one or more conflicts were encountered while applying the patchset. See comments surrounding the sqlite3_rebaser APIs for further details.</source>
          <target state="translated">出力パラメータ(ppRebase)と(pnRebase)がNULLではなく、入力がチェンジセット(パッチセットではない)の場合、sqlite3changeset_apply_v2()は(*ppRebase)に、返す前にsqlite3_rebaser APIsバッファで使用される &quot;リベース &quot;を指すように設定することができます。この場合、(*pnRebase)はバッファのサイズをバイト単位で設定します。最終的にsqlite3_free()を使ってそのようなバッファを解放するのは呼び出し元の責任です。バッファは、パッチセットの適用中に1つ以上の競合が発生した場合にのみ確保され、生成されます。詳細はsqlite3_rebaser APIを取り巻くコメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="e9ff399a5e615a33dc8fa9681024351734065387" translate="yes" xml:space="preserve">
          <source>If the parameter is a positive value, B-tree structures are only eligible for merging if one of the following is true:</source>
          <target state="translated">パラメータが正の値の場合、B-tree構造は、以下のいずれかが真の場合にのみマージの対象となります。</target>
        </trans-unit>
        <trans-unit id="60b6cd8e8d3dd19980d55457d739967fca11e05a" translate="yes" xml:space="preserve">
          <source>If the parameter is named, then its name appears in P4. The P4 value is used by sqlite3_bind_parameter_name().</source>
          <target state="translated">パラメータに名前が付けられている場合は、その名前がP4に表示されます。P4の値はsqlite3_bind_parameter_name()によって使用されます。</target>
        </trans-unit>
        <trans-unit id="b51f3bd8d197cc75de48b64a5587d9918566615a" translate="yes" xml:space="preserve">
          <source>If the parameter is negative, and there are B-tree structures on more than one level within the FTS index, all B-tree structures are assigned to the same level before the merge operation is commenced. Additionally, if the parameter is negative, the value of the usermerge configuration option is not respected - as few as two b-trees from the same level may be merged together.</source>
          <target state="translated">パラメータが負の値で、FTS インデックス内に複数のレベルに B-tree 構造がある場合、マージ操作を開始する前に、すべての B-tree 構造が同じレベルに割り当てられます。さらに、パラメータが負の値の場合、usermerge設定オプションの値は尊重されません。</target>
        </trans-unit>
        <trans-unit id="ff1e8b8711836cc88e8f7bc11a03808c27d6ff91" translate="yes" xml:space="preserve">
          <source>If the paths are sorted using the BINARY collation sequence, then the overflow pages associated with a cell will appear earlier in the sort-order than its child page:</source>
          <target state="translated">パスが BINARY 照合順序を用いてソートされている場合、セルに関連付けられたオーバーフローページは、その子ページよりもソート順の方が早く表示されます。</target>
        </trans-unit>
        <trans-unit id="e58cd97227118f50b919227b576a1a6d96943367" translate="yes" xml:space="preserve">
          <source>If the process that wants to write is unable to obtain a RESERVED lock, it must mean that another process already has a RESERVED lock. In that case, the write attempt fails and returns SQLITE_BUSY.</source>
          <target state="translated">書き込もうとするプロセスがRESERVEDEDロックを取得できない場合、別のプロセスがすでにRESERVEDロックを持っていることを意味しなければなりません。その場合、書き込みの試みは失敗し、SQLITE_BUSY を返します。</target>
        </trans-unit>
        <trans-unit id="406129ab5d2092b3ea22acba195d09ec62e01cc6" translate="yes" xml:space="preserve">
          <source>If the progress callback returns non-zero, the operation is interrupted. This feature can be used to implement a &quot;Cancel&quot; button on a GUI progress dialog box.</source>
          <target state="translated">プログレスコールバックがゼロ以外の値を返した場合、操作は中断されます。この機能は、GUIのプログレス・ダイアログ・ボックスに &quot;キャンセル &quot;ボタンを実装するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="ab297d564d935b4268428b382c93fe0d78c1a7ca" translate="yes" xml:space="preserve">
          <source>If the query contains an ORDER BY clause or a GROUP BY clause or if the query uses the DISTINCT keyword then it is advantageous to select a path through the graph that causes rows to naturally appear in sorted order, so that no separate sorting step is required. Automatic elimination of ORDER BY clauses can make a large performance difference, so this is another factor that needs to be considered in a complete implementation.</source>
          <target state="translated">クエリにORDER BY句やGROUP BY句が含まれている場合や、クエリがDISTINCTキーワードを使用している場合は、グラフを通過するパスを選択して、行が自然にソートされた順序で表示されるようにして、別のソートステップを必要としないようにするのが有利です。ORDER BY句を自動的に排除することで、パフォーマンスに大きな差が出る可能性があるので、これも完全な実装において考慮する必要がある要素です。</target>
        </trans-unit>
        <trans-unit id="4359b51a903396b955ce1a84240a1385d5c4cd97" translate="yes" xml:space="preserve">
          <source>If the query runs to completion without incident, SQLITE_OK is returned. Or, if some error occurs before the query completes or is aborted by the callback, an SQLite error code is returned.</source>
          <target state="translated">クエリが何事もなく完了するまで実行された場合、SQLITE_OK が返されます。あるいは、クエリが完了する前に何らかのエラーが発生したり、コールバックによって中断されたりした場合は、SQLite のエラーコードが返されます。</target>
        </trans-unit>
        <trans-unit id="78d49d24ce74dae451d0ef728d6bf465dbd467e9" translate="yes" xml:space="preserve">
          <source>If the reason for writing to the database file is because the memory cache was full, then the writer will not commit right away. Instead, the writer might continue to make changes to other pages. Before subsequent changes are written to the database file, the rollback journal must be flushed to disk again. Note also that the EXCLUSIVE lock that the writer obtained in order to write to the database initially must be held until all changes are committed. That means that no other processes are able to access the database from the time the memory cache first spills to disk until the transaction commits.</source>
          <target state="translated">データベースファイルへの書き込みの理由がメモリキャッシュが一杯だったからだとしたら、ライターはすぐにはコミットしません。その代わり、ライターは他のページに変更を加え続けるかもしれません。後続の変更がデータベースファイルに書き込まれる前に、ロールバックジャーナルを再びディスクにフラッシュする必要があります。また、ライターがデータベースに書き込むために最初に取得したEXCLUSIVEロックは、すべての変更がコミットされるまで保持されなければならないことにも注意してください。つまり、メモリキャッシュが最初にディスクに流出してからトランザクションがコミットされるまで、他のプロセスはデータベースにアクセスできないということです。</target>
        </trans-unit>
        <trans-unit id="f4de1a28535def0f53f335b0aa1ec084bfb958b6" translate="yes" xml:space="preserve">
          <source>If the record contains fewer than P2 fields, then extract a NULL. Or, if the P4 argument is a P4_MEM use the value of the P4 argument as the result.</source>
          <target state="translated">レコードに含まれるフィールドがP2よりも少ない場合は、NULLを抽出します。または、P4引数がP4_MEMの場合は、P4引数の値を結果として使用します。</target>
        </trans-unit>
        <trans-unit id="a233c4347f5d21c12355351382fcf901413d7e49" translate="yes" xml:space="preserve">
          <source>If the recovered database schema already contains a table named &quot;lost_and_found&quot;, the &quot;.recover&quot; command uses the name &quot;lost_and_found0&quot;. If the name &quot;lost_and_found0&quot; is also already taken, &quot;lost_and_found1&quot;, and so on. The default name &quot;lost_and_found&quot; may be overridden by invoking &quot;.recover&quot; with the --lost-and-found switch. For example, to have the output script call the table &quot;orphaned_rows&quot;:</source>
          <target state="translated">回復したデータベーススキーマに「lost_and_found」という名前のテーブルが既にある場合、「.recover」コマンドは「lost_and_found0」という名前を使用します。lost_and_found0」という名前も既に取られている場合は、「lost_and_found1」などとなります。デフォルトの名前「lost_and_found」は、--lost-and-foundスイッチで「.recover」を呼び出すことで上書きすることができる。例えば、出力スクリプトがテーブル &quot;orphaned_rows &quot;を呼び出すようにするには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="872cffdf6d4bf05d01de18a6904e492aef161446" translate="yes" xml:space="preserve">
          <source>If the requested page is already in the page cache, then the page cache implementation must return a pointer to the page buffer with its content intact. If the requested page is not already in the cache, then the cache implementation should use the value of the createFlag parameter to help it determined what action to take:</source>
          <target state="translated">要求されたページが既にページキャッシュ内にある場合,ページキャッシュの実装は内容がそのままの状態でページバッファへのポインタを返さなければなりません.要求されたページが既にキャッシュにない場合,キャッシュの実装は createFlag パラメータの値を使用して,どのようなアクションを取るべきかを決定するのに役立ちます.</target>
        </trans-unit>
        <trans-unit id="db0bc69173aefab4964d855c64d49581690da543" translate="yes" xml:space="preserve">
          <source>If the result is a BLOB or UTF-16 string then the sqlite3_column_bytes16() routine returns the number of bytes in that BLOB or string. If the result is a UTF-8 string, then sqlite3_column_bytes16() converts the string to UTF-16 and then returns the number of bytes. If the result is a numeric value then sqlite3_column_bytes16() uses &lt;a href=&quot;#sqlite3_mprintf&quot;&gt;sqlite3_snprintf()&lt;/a&gt; to convert that value to a UTF-16 string and returns the number of bytes in that string. If the result is NULL, then sqlite3_column_bytes16() returns zero.</source>
          <target state="translated">結果がBLOBまたはUTF-16文字列の場合、sqlite3_column_bytes16（）ルーチンはそのBLOBまたは文字列のバイト数を返します。結果がUTF-8文字列の場合、sqlite3_column_bytes16（）は文字列をUTF-16に変換し、バイト数を返します。結果が数値の場合、sqlite3_column_bytes16（）は&lt;a href=&quot;#sqlite3_mprintf&quot;&gt;sqlite3_snprintf（）&lt;/a&gt;を使用してその値をUTF-16文字列に変換し、その文字列のバイト数を返します。結果がNULLの場合、sqlite3_column_bytes16（）はゼロを返します。</target>
        </trans-unit>
        <trans-unit id="3b44d7bd1746ffad7cf756ce26aeea67c4d49e66" translate="yes" xml:space="preserve">
          <source>If the result is a BLOB or UTF-16 string then the sqlite3_column_bytes16() routine returns the number of bytes in that BLOB or string. If the result is a UTF-8 string, then sqlite3_column_bytes16() converts the string to UTF-16 and then returns the number of bytes. If the result is a numeric value then sqlite3_column_bytes16() uses &lt;a href=&quot;mprintf&quot;&gt;sqlite3_snprintf()&lt;/a&gt; to convert that value to a UTF-16 string and returns the number of bytes in that string. If the result is NULL, then sqlite3_column_bytes16() returns zero.</source>
          <target state="translated">結果がBLOBまたはUTF-16文字列の場合、sqlite3_column_bytes16（）ルーチンはそのBLOBまたは文字列のバイト数を返します。結果がUTF-8文字列の場合、sqlite3_column_bytes16（）は文字列をUTF-16に変換し、バイト数を返します。結果が数値の場合、sqlite3_column_bytes16（）は&lt;a href=&quot;mprintf&quot;&gt;sqlite3_snprintf（）&lt;/a&gt;を使用してその値をUTF-16文字列に変換し、その文字列のバイト数を返します。結果がNULLの場合、sqlite3_column_bytes16（）はゼロを返します。</target>
        </trans-unit>
        <trans-unit id="5a04fb4ab27b4007fb1a3789b739c65a862ccba9" translate="yes" xml:space="preserve">
          <source>If the result is a BLOB or UTF-8 string then the sqlite3_column_bytes() routine returns the number of bytes in that BLOB or string. If the result is a UTF-16 string, then sqlite3_column_bytes() converts the string to UTF-8 and then returns the number of bytes. If the result is a numeric value then sqlite3_column_bytes() uses &lt;a href=&quot;#sqlite3_mprintf&quot;&gt;sqlite3_snprintf()&lt;/a&gt; to convert that value to a UTF-8 string and returns the number of bytes in that string. If the result is NULL, then sqlite3_column_bytes() returns zero.</source>
          <target state="translated">結果がBLOBまたはUTF-8文字列の場合、sqlite3_column_bytes（）ルーチンはそのBLOBまたは文字列のバイト数を返します。結果がUTF-16文字列の場合、sqlite3_column_bytes（）は文字列をUTF-8に変換し、バイト数を返します。結果が数値の場合、sqlite3_column_bytes（）は&lt;a href=&quot;#sqlite3_mprintf&quot;&gt;sqlite3_snprintf（）&lt;/a&gt;を使用してその値をUTF-8文字列に変換し、その文字列のバイト数を返します。結果がNULLの場合、sqlite3_column_bytes（）はゼロを返します。</target>
        </trans-unit>
        <trans-unit id="97aa0401915ee07da3fcfb4b2dd9b95ffff68377" translate="yes" xml:space="preserve">
          <source>If the result is a BLOB or UTF-8 string then the sqlite3_column_bytes() routine returns the number of bytes in that BLOB or string. If the result is a UTF-16 string, then sqlite3_column_bytes() converts the string to UTF-8 and then returns the number of bytes. If the result is a numeric value then sqlite3_column_bytes() uses &lt;a href=&quot;mprintf&quot;&gt;sqlite3_snprintf()&lt;/a&gt; to convert that value to a UTF-8 string and returns the number of bytes in that string. If the result is NULL, then sqlite3_column_bytes() returns zero.</source>
          <target state="translated">結果がBLOBまたはUTF-8文字列の場合、sqlite3_column_bytes（）ルーチンはそのBLOBまたは文字列のバイト数を返します。結果がUTF-16文字列の場合、sqlite3_column_bytes（）は文字列をUTF-8に変換し、バイト数を返します。結果が数値の場合、sqlite3_column_bytes（）は&lt;a href=&quot;mprintf&quot;&gt;sqlite3_snprintf（）&lt;/a&gt;を使用してその値をUTF-8文字列に変換し、その文字列のバイト数を返します。結果がNULLの場合、sqlite3_column_bytes（）はゼロを返します。</target>
        </trans-unit>
        <trans-unit id="cce95bf5c0bc98e89e8fc40f80872857badf8433" translate="yes" xml:space="preserve">
          <source>If the result is a BLOB or a TEXT string, then the sqlite3_column_bytes() or sqlite3_column_bytes16() interfaces can be used to determine the size of that BLOB or string.</source>
          <target state="translated">結果がBLOBまたはテキスト文字列の場合、sqlite3_column_bytes()またはsqlite3_column_bytes16()インターフェースを使用して、そのBLOBまたは文字列のサイズを決定することができます。</target>
        </trans-unit>
        <trans-unit id="fd9c1a162239f42f97865bf762c6375eed8fe6fe" translate="yes" xml:space="preserve">
          <source>If the result is a general expression, not a just the name of a source table column, then the name of the result is a copy of the expression text.</source>
          <target state="translated">結果が単なるソーステーブルのカラム名ではなく、一般的な式である場合、結果の名前は式のテキストのコピーになります。</target>
        </trans-unit>
        <trans-unit id="57f0dbb6f6834911f1360c14b63d681228556516" translate="yes" xml:space="preserve">
          <source>If the result set of a query is empty, then by default &lt;b&gt;sqlite_get_table&lt;/b&gt; will set nrow to 0 and leave its result parameter is set to NULL. But if the EMPTY_RESULT_CALLBACKS pragma is ON then the result parameter is initialized to the names of the columns only. For example, consider this query which has an empty result set:</source>
          <target state="translated">クエリの結果セットが空の場合、デフォルトでは&lt;b&gt;sqlite_get_table&lt;/b&gt;はnrowを0に設定し、その結果パラメーターをNULLに設定したままにします。ただし、EMPTY_RESULT_CALLBACKSプラグマがONの場合、結果パラメーターは列の名前のみに初期化されます。たとえば、空の結果セットを持つ次のクエリを考えてみます。</target>
        </trans-unit>
        <trans-unit id="d816ce55af3aa1bc324149c293eb2742dfc0c53d" translate="yes" xml:space="preserve">
          <source>If the right-hand side of an IN operator can be list of values as in the following:</source>
          <target state="translated">IN演算子の右辺が以下のように値のリスト化が可能な場合。</target>
        </trans-unit>
        <trans-unit id="b287ebc787ae1fe1352a6696e98abccff05e37e6" translate="yes" xml:space="preserve">
          <source>If the row comes from a WITHOUT ROWID table, this column contains NULL. Otherwise, it contains the 64-bit integer rowid value for the row.</source>
          <target state="translated">行が WITHOUT ROWID テーブルから来ている場合、この列には NULL が含まれます。そうでない場合は、その行の64ビット整数のROWID値が含まれます。</target>
        </trans-unit>
        <trans-unit id="489be44720b2f1c706095444d825988cba31b9db" translate="yes" xml:space="preserve">
          <source>If the row that a BLOB handle points to is modified by an &lt;a href=&quot;../lang_update&quot;&gt;UPDATE&lt;/a&gt;, &lt;a href=&quot;../lang_delete&quot;&gt;DELETE&lt;/a&gt;, or by &lt;a href=&quot;../lang_conflict&quot;&gt;ON CONFLICT&lt;/a&gt; side-effects then the BLOB handle is marked as &quot;expired&quot;. This is true if any column of the row is changed, even a column other than the one the BLOB handle is open on. Calls to &lt;a href=&quot;blob_read&quot;&gt;sqlite3_blob_read()&lt;/a&gt; and &lt;a href=&quot;blob_write&quot;&gt;sqlite3_blob_write()&lt;/a&gt; for an expired BLOB handle fail with a return code of &lt;a href=&quot;../rescode#abort&quot;&gt;SQLITE_ABORT&lt;/a&gt;. Changes written into a BLOB prior to the BLOB expiring are not rolled back by the expiration of the BLOB. Such changes will eventually commit if the transaction continues to completion.</source>
          <target state="translated">BLOBハンドルが指す行が&lt;a href=&quot;../lang_update&quot;&gt;UPDATE&lt;/a&gt;、&lt;a href=&quot;../lang_delete&quot;&gt;DELETE&lt;/a&gt;、または&lt;a href=&quot;../lang_conflict&quot;&gt;ON CONFLICT&lt;/a&gt;の副作用によって変更された場合、BLOBハンドルは「期限切れ」としてマークされます。これは、行のいずれかの列が変更された場合に当てはまります。BLOBハンドルが開いている列以外の列も変更されます。期限切れのBLOBハンドルに対する&lt;a href=&quot;blob_read&quot;&gt;sqlite3_blob_read（）&lt;/a&gt;および&lt;a href=&quot;blob_write&quot;&gt;sqlite3_blob_write（）の&lt;/a&gt;呼び出しは、&lt;a href=&quot;../rescode#abort&quot;&gt;SQLITE_ABORTの&lt;/a&gt;戻りコードで失敗します。 BLOBが期限切れになる前にBLOBに書き込まれた変更は、BLOBの期限切れによってロールバックされません。そのような変更は、トランザクションが完了し続けると、最終的にコミットされます。</target>
        </trans-unit>
        <trans-unit id="855918a93d6aa4472f75825b61dee9d03ea7eab1" translate="yes" xml:space="preserve">
          <source>If the row that a BLOB handle points to is modified by an &lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt;, &lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt;, or by &lt;a href=&quot;lang_conflict&quot;&gt;ON CONFLICT&lt;/a&gt; side-effects then the BLOB handle is marked as &quot;expired&quot;. This is true if any column of the row is changed, even a column other than the one the BLOB handle is open on. Calls to &lt;a href=&quot;#sqlite3_blob_read&quot;&gt;sqlite3_blob_read()&lt;/a&gt; and &lt;a href=&quot;#sqlite3_blob_write&quot;&gt;sqlite3_blob_write()&lt;/a&gt; for an expired BLOB handle fail with a return code of &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_ABORT&lt;/a&gt;. Changes written into a BLOB prior to the BLOB expiring are not rolled back by the expiration of the BLOB. Such changes will eventually commit if the transaction continues to completion.</source>
          <target state="translated">BLOBハンドルが指す行が&lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt;、&lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt;、または&lt;a href=&quot;lang_conflict&quot;&gt;ON CONFLICT&lt;/a&gt;の副作用によって変更された場合、BLOBハンドルは「期限切れ」としてマークされます。これは、行のいずれかの列が変更された場合に当てはまります。BLOBハンドルが開いている列以外の列も変更されます。期限切れのBLOBハンドルに対する&lt;a href=&quot;#sqlite3_blob_read&quot;&gt;sqlite3_blob_read（）&lt;/a&gt;および&lt;a href=&quot;#sqlite3_blob_write&quot;&gt;sqlite3_blob_write（）の&lt;/a&gt;呼び出しは、&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_ABORTの&lt;/a&gt;戻りコードで失敗します。 BLOBが期限切れになる前にBLOBに書き込まれた変更は、BLOBの期限切れによってロールバックされません。そのような変更は、トランザクションが完了し続けると、最終的にコミットされます。</target>
        </trans-unit>
        <trans-unit id="5ad667b790a078db1e6c6968fc928120e549e94b" translate="yes" xml:space="preserve">
          <source>If the same database is being read and written using two different &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connections&lt;/a&gt; (two different &lt;a href=&quot;c3ref/sqlite3&quot;&gt;sqlite3&lt;/a&gt; objects returned by separate calls to &lt;a href=&quot;c3ref/open&quot;&gt;sqlite3_open()&lt;/a&gt;) and the two database connections do not have a &lt;a href=&quot;sharedcache&quot;&gt;shared cache&lt;/a&gt;, then the reader is only able to see complete committed transactions from the writer. Partial changes by the writer that have not been committed are invisible to the reader. This is true regardless of whether the two database connections are in the same thread, in different threads of the same process, or in different processes. This is the usual and expected behavior for SQL database systems.</source>
          <target state="translated">同じデータベースが2つの異なる&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続&lt;/a&gt;（&lt;a href=&quot;c3ref/open&quot;&gt;sqlite3_open（）&lt;/a&gt;への個別の呼び出しによって返される2つの異なる&lt;a href=&quot;c3ref/sqlite3&quot;&gt;sqlite3&lt;/a&gt;オブジェクト）を使用して読み書きされており、2つのデータベース接続が&lt;a href=&quot;sharedcache&quot;&gt;共有キャッシュ&lt;/a&gt;を持たない場合、リーダーは完全なコミットのみを確認できます作家からのトランザクション。コミットされていないライターによる部分的な変更は、リーダーには見えません。これは、2つのデータベース接続が同じスレッドにあるか、同じプロセスの異なるスレッドにあるか、または異なるプロセスにあるかに関係なく当てはまります。これは、SQLデータベースシステムの通常の予想される動作です。</target>
        </trans-unit>
        <trans-unit id="2e0132de71fd47828befdd8cddea786393211a76" translate="yes" xml:space="preserve">
          <source>If the savepoint-name in a RELEASE command does not match any savepoint currently in the transaction stack, then no savepoints are released, the database is unchanged, and the RELEASE command returns an error.</source>
          <target state="translated">RELEASEコマンドのsaveepoint-nameが、現在トランザクションスタックにあるどのsaveepointとも一致しない場合、saveepointは解放されず、データベースは変更されず、RELEASEコマンドはエラーを返します。</target>
        </trans-unit>
        <trans-unit id="0e8e411b07fe2c001323f612676b1abf9cd50210" translate="yes" xml:space="preserve">
          <source>If the second parameter (zDbName) does not match the name of any open database file, then SQLITE_ERROR is returned. This error code is not remembered and will not be recalled by &lt;a href=&quot;#sqlite3_errcode&quot;&gt;sqlite3_errcode()&lt;/a&gt; or &lt;a href=&quot;#sqlite3_errcode&quot;&gt;sqlite3_errmsg()&lt;/a&gt;. The underlying xFileControl method might also return SQLITE_ERROR. There is no way to distinguish between an incorrect zDbName and an SQLITE_ERROR return from the underlying xFileControl method.</source>
          <target state="translated">2番目のパラメーター（zDbName）が開いているデータベースファイルの名前と一致しない場合、SQLITE_ERRORが返されます。このエラーコードは記憶されておらず、&lt;a href=&quot;#sqlite3_errcode&quot;&gt;sqlite3_errcode（）&lt;/a&gt;または&lt;a href=&quot;#sqlite3_errcode&quot;&gt;sqlite3_errmsg（）&lt;/a&gt;によって呼び出されません。基になるxFileControlメソッドもSQLITE_ERRORを返す場合があります。不正なzDbNameと、基になるxFileControlメソッドからのSQLITE_ERROR戻りを区別する方法はありません。</target>
        </trans-unit>
        <trans-unit id="0a6c4ada949c40cb1aa6d07b25694fd6c11c1796" translate="yes" xml:space="preserve">
          <source>If the second parameter (zDbName) does not match the name of any open database file, then SQLITE_ERROR is returned. This error code is not remembered and will not be recalled by &lt;a href=&quot;errcode&quot;&gt;sqlite3_errcode()&lt;/a&gt; or &lt;a href=&quot;errcode&quot;&gt;sqlite3_errmsg()&lt;/a&gt;. The underlying xFileControl method might also return SQLITE_ERROR. There is no way to distinguish between an incorrect zDbName and an SQLITE_ERROR return from the underlying xFileControl method.</source>
          <target state="translated">2番目のパラメーター（zDbName）が開いているデータベースファイルの名前と一致しない場合、SQLITE_ERRORが返されます。このエラーコードは記憶されておらず、&lt;a href=&quot;errcode&quot;&gt;sqlite3_errcode（）&lt;/a&gt;または&lt;a href=&quot;errcode&quot;&gt;sqlite3_errmsg（）&lt;/a&gt;によって呼び出されません。基になるxFileControlメソッドもSQLITE_ERRORを返す場合があります。不正なzDbNameと、基になるxFileControlメソッドからのSQLITE_ERROR戻りを区別する方法はありません。</target>
        </trans-unit>
        <trans-unit id="b78c0101bf92e2df502819dbd3877a0d27dbb142" translate="yes" xml:space="preserve">
          <source>If the size of a potentially hot journal file is revealed to be greater than zero bytes by a query required by H35450, then SQLite shall attempt to upgrade the</source>
          <target state="translated">H35450で要求されているクエリにより、ホットになる可能性のあるジャーナルファイルのサイズがゼロバイトよりも大きいことが判明した場合、SQLiteは</target>
        </trans-unit>
        <trans-unit id="84a94aa97953d8f31911d07edfb705a8ac22630d" translate="yes" xml:space="preserve">
          <source>If the size of a potentially hot journal file is revealed to be zero bytes by a query required by H35450, then SQLite shall close the file handle opened on the journal file and delete the journal file using a call to the VFS xDelete() method. In this case SQLite shall conclude that there is no</source>
          <target state="translated">H35450 で要求されたクエリにより、ホットになる可能性のあるジャーナル・ファイルのサイズがゼロバイトであることが判明した場合、SQLite は、ジャーナル・ファイルで開かれたファイル・ハンドルを閉じ、VFS の xDelete()メソッドの呼び出しを使用してジャーナル・ファイルを削除するものとする。この場合、SQLite は、ジャーナル・ファイルには</target>
        </trans-unit>
        <trans-unit id="8775f72effd63665f56849704eebc4e3eb03a777" translate="yes" xml:space="preserve">
          <source>If the specific value bound to &lt;a href=&quot;../lang_expr#varparam&quot;&gt;host parameter&lt;/a&gt; in the WHERE clause might influence the choice of query plan for a statement, then the statement will be automatically recompiled, as if there had been a schema change, on the first &lt;a href=&quot;step&quot;&gt;sqlite3_step()&lt;/a&gt; call following any change to the &lt;a href=&quot;bind_blob&quot;&gt;bindings&lt;/a&gt; of that &lt;a href=&quot;../lang_expr#varparam&quot;&gt;parameter&lt;/a&gt;. The specific value of WHERE-clause &lt;a href=&quot;../lang_expr#varparam&quot;&gt;parameter&lt;/a&gt; might influence the choice of query plan if the parameter is the left-hand side of a &lt;a href=&quot;../lang_expr#like&quot;&gt;LIKE&lt;/a&gt; or &lt;a href=&quot;../lang_expr#glob&quot;&gt;GLOB&lt;/a&gt; operator or if the parameter is compared to an indexed column and the &lt;a href=&quot;../compile#enable_stat4&quot;&gt;SQLITE_ENABLE_STAT4&lt;/a&gt; compile-time option is enabled.</source>
          <target state="translated">WHERE句の&lt;a href=&quot;../lang_expr#varparam&quot;&gt;ホストパラメータ&lt;/a&gt;にバインドされた特定の値がステートメントのクエリプランの選択に影響を与える可能性がある場合、スキーマ変更があったかのように、変更後の最初の&lt;a href=&quot;step&quot;&gt;sqlite3_step（）&lt;/a&gt;呼び出しでステートメントが自動的に再コンパイルされます。その&lt;a href=&quot;../lang_expr#varparam&quot;&gt;パラメータ&lt;/a&gt;の&lt;a href=&quot;bind_blob&quot;&gt;バインディング&lt;/a&gt;に。 WHERE節&lt;a href=&quot;../lang_expr#varparam&quot;&gt;パラメーター&lt;/a&gt;の特定の値は、パラメーターが&lt;a href=&quot;../lang_expr#like&quot;&gt;LIKE&lt;/a&gt;または&lt;a href=&quot;../lang_expr#glob&quot;&gt;GLOB&lt;/a&gt;演算子の左側である場合、またはパラメーターがインデックス付き列と比較され、&lt;a href=&quot;../compile#enable_stat4&quot;&gt;SQLITE_ENABLE_STAT4&lt;/a&gt;コンパイル時オプションが有効になっている場合、クエリプランの選択に影響を与える可能性があります。</target>
        </trans-unit>
        <trans-unit id="44b5aede3751869315efb1ad0c6228b799d6377d" translate="yes" xml:space="preserve">
          <source>If the specific value bound to &lt;a href=&quot;lang_expr#varparam&quot;&gt;host parameter&lt;/a&gt; in the WHERE clause might influence the choice of query plan for a statement, then the statement will be automatically recompiled, as if there had been a schema change, on the first &lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step()&lt;/a&gt; call following any change to the &lt;a href=&quot;#sqlite3_bind_blob&quot;&gt;bindings&lt;/a&gt; of that &lt;a href=&quot;lang_expr#varparam&quot;&gt;parameter&lt;/a&gt;. The specific value of WHERE-clause &lt;a href=&quot;lang_expr#varparam&quot;&gt;parameter&lt;/a&gt; might influence the choice of query plan if the parameter is the left-hand side of a &lt;a href=&quot;lang_expr#like&quot;&gt;LIKE&lt;/a&gt; or &lt;a href=&quot;lang_expr#glob&quot;&gt;GLOB&lt;/a&gt; operator or if the parameter is compared to an indexed column and the &lt;a href=&quot;compile#enable_stat4&quot;&gt;SQLITE_ENABLE_STAT4&lt;/a&gt; compile-time option is enabled.</source>
          <target state="translated">WHERE句の&lt;a href=&quot;lang_expr#varparam&quot;&gt;ホストパラメータ&lt;/a&gt;にバインドされた特定の値がステートメントのクエリプランの選択に影響を与える可能性がある場合、スキーマ変更があったかのように、変更後の最初の&lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step（）&lt;/a&gt;呼び出しでステートメントが自動的に再コンパイルされます。その&lt;a href=&quot;lang_expr#varparam&quot;&gt;パラメータ&lt;/a&gt;の&lt;a href=&quot;#sqlite3_bind_blob&quot;&gt;バインディング&lt;/a&gt;に。 WHERE節&lt;a href=&quot;lang_expr#varparam&quot;&gt;パラメーター&lt;/a&gt;の特定の値は、パラメーターが&lt;a href=&quot;lang_expr#like&quot;&gt;LIKE&lt;/a&gt;または&lt;a href=&quot;lang_expr#glob&quot;&gt;GLOB&lt;/a&gt;演算子の左側である場合、またはパラメーターがインデックス付き列と比較され、&lt;a href=&quot;compile#enable_stat4&quot;&gt;SQLITE_ENABLE_STAT4&lt;/a&gt;コンパイル時オプションが有効になっている場合、クエリプランの選択に影響を与える可能性があります。</target>
        </trans-unit>
        <trans-unit id="9e1ce97d9fc0705c3229e21c8809d3855d59efd3" translate="yes" xml:space="preserve">
          <source>If the specified column is &quot;rowid&quot;, &quot;oid&quot; or &quot;_rowid_&quot; and the table is not a &lt;a href=&quot;../withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; table and an &lt;a href=&quot;../lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt; column has been explicitly declared, then the output parameters are set for the explicitly declared column. If there is no &lt;a href=&quot;../lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt; column, then the outputs for the &lt;a href=&quot;../lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt; are set as follows:</source>
          <target state="translated">指定された列が「rowid」、「oid」または「_rowid_」であり、表が&lt;a href=&quot;../withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt;表ではなく、&lt;a href=&quot;../lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt;列が明示的に宣言されている場合、出力パラメーターは明示的に宣言された列に設定されます。&lt;a href=&quot;../lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt;列がない場合、&lt;a href=&quot;../lang_createtable#rowid&quot;&gt;ROWID&lt;/a&gt;の出力は次のように設定されます。</target>
        </trans-unit>
        <trans-unit id="8f350a11b8322175a383ceadb167cdbb00955970" translate="yes" xml:space="preserve">
          <source>If the specified column is &quot;rowid&quot;, &quot;oid&quot; or &quot;_rowid_&quot; and the table is not a &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; table and an &lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt; column has been explicitly declared, then the output parameters are set for the explicitly declared column. If there is no &lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt; column, then the outputs for the &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt; are set as follows:</source>
          <target state="translated">指定された列が「rowid」、「oid」または「_rowid_」であり、表が&lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt;表ではなく、&lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt;列が明示的に宣言されている場合、出力パラメーターは明示的に宣言された列に設定されます。&lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt;列がない場合、&lt;a href=&quot;lang_createtable#rowid&quot;&gt;ROWID&lt;/a&gt;の出力は次のように設定されます。</target>
        </trans-unit>
        <trans-unit id="f3164e0e380d4749ee94c4239d71835f6ebe7294" translate="yes" xml:space="preserve">
          <source>If the specified compress or uncompress functions do not exist, the table may still be created. An error is not returned until the FTS4 table is read (if the uncompress function does not exist) or written (if it is the compress function that does not exist).</source>
          <target state="translated">指定された圧縮関数又は圧縮解除関数が存在しない場合でも,テーブルは作成されることがある。FTS4 テーブルが読み込まれるまで(圧縮解除関数が存在しない場合)、または書き込まれるまで(圧縮解除関数が存在しない場合)、エラーは返されません。</target>
        </trans-unit>
        <trans-unit id="63eb5c5c72bb1ff543038003d7ef2fd45c2837fe" translate="yes" xml:space="preserve">
          <source>If the specified table is actually a view, an &lt;a href=&quot;../rescode&quot;&gt;error code&lt;/a&gt; is returned.</source>
          <target state="translated">指定されたテーブルが実際にビューである場合、&lt;a href=&quot;../rescode&quot;&gt;エラーコード&lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="ce9d8284bfd79645e82900ecac60c2249827b2a4" translate="yes" xml:space="preserve">
          <source>If the specified table is actually a view, an &lt;a href=&quot;rescode&quot;&gt;error code&lt;/a&gt; is returned.</source>
          <target state="translated">指定されたテーブルが実際にビューである場合、&lt;a href=&quot;rescode&quot;&gt;エラーコード&lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="7fece2731796046aa37a6f47896457da35d0048d" translate="yes" xml:space="preserve">
          <source>If the specified value is an integer (or text that looks like an integer), it is inserted verbatim. If the value is not a valid UNIX mode, some programs may behave unexpectedly when extracting files from the archive.</source>
          <target state="translated">指定された値が整数(または整数のように見えるテキスト)の場合は、そのまま挿入されます。この値が有効なUNIXモードでない場合、アーカイブからファイルを抽出する際に、一部のプログラムが予期せぬ動作をすることがあります。</target>
        </trans-unit>
        <trans-unit id="e4f3a6c8e56d6f7f8102c0223dc18717b78218c4" translate="yes" xml:space="preserve">
          <source>If the specified view cannot be found and the IF EXISTS clause is not present, it is an error. If the specified view cannot be found and an IF EXISTS clause is present in the DROP VIEW statement, then the statement is a no-op.</source>
          <target state="translated">指定したビューが見つからず、IF EXISTS句が存在しない場合はエラーとなります。指定されたビューが見つからず、DROP VIEW文の中にIF EXISTS句が存在する場合、その文はno-opとなります。</target>
        </trans-unit>
        <trans-unit id="90a8c9a64f685446aa6aabbcaddc7d44c89fc5a1" translate="yes" xml:space="preserve">
          <source>If the sqlite3_vtab_nochange(X) routine is called within the &lt;a href=&quot;../vtab#xcolumn&quot;&gt;xColumn&lt;/a&gt; method of a &lt;a href=&quot;../vtab&quot;&gt;virtual table&lt;/a&gt;, then it returns true if and only if the column is being fetched as part of an UPDATE operation during which the column value will not change. Applications might use this to substitute a return value that is less expensive to compute and that the corresponding &lt;a href=&quot;../vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt; method understands as a &quot;no-change&quot; value.</source>
          <target state="translated">sqlite3_vtab_nochange（X）ルーチンが&lt;a href=&quot;../vtab&quot;&gt;仮想テーブルの&lt;/a&gt;&lt;a href=&quot;../vtab#xcolumn&quot;&gt;xColumn&lt;/a&gt;メソッド内で呼び出された場合、その列がUPDATE操作の一部としてフェッチされ、その間に列の値が変化しない場合にのみ、trueを返します。アプリケーションはこれを使用して、計算にかかるコストが低く、対応する&lt;a href=&quot;../vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt;メソッドが「変更なし」の値として理解する戻り値を置き換える場合があります。</target>
        </trans-unit>
        <trans-unit id="589f84e6663e321a54522d9b6141cb9b22a8427e" translate="yes" xml:space="preserve">
          <source>If the sqlite3_vtab_nochange(X) routine is called within the &lt;a href=&quot;vtab#xcolumn&quot;&gt;xColumn&lt;/a&gt; method of a &lt;a href=&quot;vtab&quot;&gt;virtual table&lt;/a&gt;, then it returns true if and only if the column is being fetched as part of an UPDATE operation during which the column value will not change. Applications might use this to substitute a return value that is less expensive to compute and that the corresponding &lt;a href=&quot;vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt; method understands as a &quot;no-change&quot; value.</source>
          <target state="translated">sqlite3_vtab_nochange（X）ルーチンが&lt;a href=&quot;vtab&quot;&gt;仮想テーブルの&lt;/a&gt;&lt;a href=&quot;vtab#xcolumn&quot;&gt;xColumn&lt;/a&gt;メソッド内で呼び出された場合、その列がUPDATE操作の一部としてフェッチされ、その間に列の値が変化しない場合にのみ、trueを返します。アプリケーションはこれを使用して、計算にかかるコストが低く、対応する&lt;a href=&quot;vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt;メソッドが「変更なし」の値として理解する戻り値を置き換える場合があります。</target>
        </trans-unit>
        <trans-unit id="aeaddc8619c2a7f7c9c53fa9fbcf5b7907cc4bc7" translate="yes" xml:space="preserve">
          <source>If the sqlite_stat1.idx column is NULL, then the sqlite_stat1.stat column contains a single integer which is the approximate number of rows in the table identified by sqlite_stat1.tbl. If the sqlite_stat1.idx column is the same as the sqlite_stat1.tbl column, then the table is a &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; table and the sqlite_stat1.stat field contains information about the index btree that implements the WITHOUT ROWID table.</source>
          <target state="translated">sqlite_stat1.idx列がNULLの場合、sqlite_stat1.stat列には、sqlite_stat1.tblで識別されるテーブル内のおおよその行数である単一の整数が含まれます。sqlite_stat1.idx列がsqlite_stat1.tbl列と同じ場合、テーブルは&lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt;テーブルであり、sqlite_stat1.statフィールドには、WITHOUT ROWIDテーブルを実装するインデックスbtreeに関する情報が含まれます。</target>
        </trans-unit>
        <trans-unit id="7ef8812fff06e258ef45bbe3080d7b83145fdfcb" translate="yes" xml:space="preserve">
          <source>If the sub-query is a compound SELECT, then</source>
          <target state="translated">サブクエリが複合SELECTの場合は、次のようになります。</target>
        </trans-unit>
        <trans-unit id="95d8d057928b20b8273091a81f8f75e5dc26f5b2" translate="yes" xml:space="preserve">
          <source>If the sub-query is a compound select, then all terms of the ORDER by clause of the parent must be simple references to columns of the sub-query.</source>
          <target state="translated">副問い合わせが複合セレクトの場合、親のORDER by節のすべての項は副問い合わせの列への単純な参照でなければなりません。</target>
        </trans-unit>
        <trans-unit id="cfa26eb2d70555062705f5059521f66db3517508" translate="yes" xml:space="preserve">
          <source>If the sub-query is a compound select, then it must not use an ORDER BY clause.</source>
          <target state="translated">副問い合わせが複合セレクトの場合、ORDER BY句を使用してはいけません。</target>
        </trans-unit>
        <trans-unit id="a41d547f4cfa21fa6c9e383332bb2ccbe73488d1" translate="yes" xml:space="preserve">
          <source>If the subquery is the right operand of a LEFT JOIN then</source>
          <target state="translated">副問い合わせがLEFT JOINの右オペランドである場合、次のようになります。</target>
        </trans-unit>
        <trans-unit id="9251592b196cd1f8e1c4b9db367256eca51eaf76" translate="yes" xml:space="preserve">
          <source>If the subquery uses LIMIT then the outer query may not have a WHERE clause.</source>
          <target state="translated">副問い合わせがLIMITを使用している場合、外側の問い合わせにWHERE句がない場合があります。</target>
        </trans-unit>
        <trans-unit id="3915c5066778c0e52bdae49ad9f9428a2640f7be" translate="yes" xml:space="preserve">
          <source>If the subquery uses LIMIT, then the outer query may not be DISTINCT.</source>
          <target state="translated">副問い合わせがLIMITを使用している場合、外側の問い合わせはDISTINCTではないかもしれません。</target>
        </trans-unit>
        <trans-unit id="3ca99915e9f2329a546bdb9b1fd10bf3cea382c2" translate="yes" xml:space="preserve">
          <source>If the table has 32 or fewer columns, a single unsigned integer is output for each phrase in the query. The least significant bit of the integer is set if the phrase appears at least once in column 0. The second least significant bit is set if the phrase appears once or more in column 1. And so on.</source>
          <target state="translated">テーブルの列数が32以下の場合、クエリ内の各フレーズに対して1つの符号なし整数が出力されます。フレーズが0列目に1回以上出現すると、その整数の最下位ビットがセットされます。フレーズが 1 列目に 1 回以上出現すると、2 番目の最下位ビットが設定されます。といった具合です。</target>
        </trans-unit>
        <trans-unit id="721c91e5cd9182aa981b27d672f91c90481093e6" translate="yes" xml:space="preserve">
          <source>If the table has more than 32 columns, an extra integer is added to the output of each phrase for each extra 32 columns or part thereof. Integers corresponding to the same phrase are clumped together. For example, if a table with 45 columns is queried for two phrases, 4 integers are output. The first corresponds to phrase 0 and columns 0-31 of the table. The second integer contains data for phrase 0 and columns 32-44, and so on.</source>
          <target state="translated">テーブルに32列以上の列がある場合、各フレーズの出力には、余分な32列またはその一部ごとに余分な整数が追加されます。同じフレーズに対応する整数はまとめて出力されます。例えば、45 カラムのテーブルが 2 つのフレーズに対してクエリされた場合、4 つの整数が出力されます。1 番目の整数は、フレーズ 0 とテーブルの 0 ~ 31 カラムに対応します。2 番目の整数には、フレーズ 0 とカラム 32-44 などのデータが含まれています。</target>
        </trans-unit>
        <trans-unit id="dd1a6a322a6da8501607606cd285b56e7643fea3" translate="yes" xml:space="preserve">
          <source>If the table is also a contentless table, the xInstCount, xInst, xPhraseFirst and xPhraseNext APIs behave as if the current row contains no phrase matches at all (i.e. xInstCount() returns 0).</source>
          <target state="translated">テーブルが内容のないテーブルでもある場合、xInstCount、xInst、xPhraseFirst、およびxPhraseNext APIは、現在の行にフレーズの一致が全くない場合のように動作します (すなわち、xInstCount()は 0 を返します)。</target>
        </trans-unit>
        <trans-unit id="6fe44f3588c5a2857dcbb9370708a1c62e0664e1" translate="yes" xml:space="preserve">
          <source>If the table is also a contentless table, the xPhraseFirstColumn and xPhraseNextColumn APIs behave as if the current row contains no phrase matches at all (i.e. xPhraseFirstColumn() sets the iterator to EOF).</source>
          <target state="translated">テーブルが内容のないテーブルでもある場合、xPhraseFirstColumn API および xPhraseNextColumn API は、現在の行にフレーズの一致が全く含まれていない場合のように動作します (すなわち、xPhraseFirstColumn()はイテレータを EOF に設定します)。</target>
        </trans-unit>
        <trans-unit id="8fa583fa8336ae813a54303aa49ca52aa9df3514" translate="yes" xml:space="preserve">
          <source>If the tables are not compatible, SQLITE_SCHEMA is returned. If the tables are compatible but do not have any PRIMARY KEY columns, it is not an error but no changes are added to the session object. As with other session APIs, tables without PRIMARY KEYs are simply ignored.</source>
          <target state="translated">テーブルに互換性がない場合、SQLITE_SCHEMAが返されます。テーブルに互換性があるが PRIMARY KEY カラムがない場合は、エラーではありませんが、セッションオブジェクトに変更は加えられません。他のセッションAPIと同様に、PRIMARY KEYを持たないテーブルは単に無視されます。</target>
        </trans-unit>
        <trans-unit id="39d5998574043194036193b1ccfe1d960d708066" translate="yes" xml:space="preserve">
          <source>If the target database table has an INTEGER PRIMARY KEY, it is not possible to insert a NULL value into the IPK column. Attempting to do so results in an SQLITE_MISMATCH error.</source>
          <target state="translated">対象のデータベース・テーブルに INTEGER PRIMARY KEY がある場合、IPK カラムに NULL 値を挿入することはできません。これを試みると、SQLITE_MISMATCH エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="9c95a9c982f66790e65014b945cf26e39c71b898" translate="yes" xml:space="preserve">
          <source>If the target database table is a virtual table or a table that has no PRIMARY KEY declaration, the data_% table must also contain a column named &quot;rbu_rowid&quot;. The rbu_rowid column is mapped to the tables &lt;a href=&quot;lang_createtable#rowid&quot;&gt;ROWID&lt;/a&gt;. For example, if the target database contains either of the following:</source>
          <target state="translated">ターゲットデータベーステーブルが仮想テーブルまたはPRIMARY KEY宣言のないテーブルである場合、data_％テーブルには &quot;rbu_rowid&quot;という名前の列も含まれている必要があります。rbu_rowid列は、表&lt;a href=&quot;lang_createtable#rowid&quot;&gt;ROWIDに&lt;/a&gt;マップされます。たとえば、ターゲットデータベースに次のいずれかが含まれているとします。</target>
        </trans-unit>
        <trans-unit id="fbd25358ffefdc6dc4f80487cafab05d3b5b26ee" translate="yes" xml:space="preserve">
          <source>If the target database table is a virtual table or a table with no PRIMARY KEY, the rbu_control value should not include a character corresponding to the rbu_rowid value. For example, this:</source>
          <target state="translated">対象のデータベーステーブルが仮想テーブルまたはPRIMARY KEYのないテーブルである場合、rbu_controlの値にはrbu_rowidの値に対応する文字を含めてはいけません。例えば、これは</target>
        </trans-unit>
        <trans-unit id="01af3a5676cb2f1557deacfea75c22d3ec69c112" translate="yes" xml:space="preserve">
          <source>If the text fragment does not begin at the start of a column value, the &quot;ellipses&quot; text is prepended to it.</source>
          <target state="translated">テキストの断片が列の値の先頭で始まらない場合は、&quot;ellipses &quot;テキストが前に付加されます。</target>
        </trans-unit>
        <trans-unit id="c5699be55281fc6c124864de2ed79fa2e78862fa" translate="yes" xml:space="preserve">
          <source>If the text fragment does not finish at the end of a column value, the &quot;ellipses&quot; text is appended to it.</source>
          <target state="translated">テキストの断片が列の値の最後で終了しない場合は、&quot;ellipses &quot;のテキストが追加されます。</target>
        </trans-unit>
        <trans-unit id="9b02a2cc603460380751e873e7881c3872500434" translate="yes" xml:space="preserve">
          <source>If the third parameter (the pointer to the sqlite3_module object) is NULL then no new module is create and any existing modules with the same name are dropped.</source>
          <target state="translated">3番目のパラメータ(sqlite3_moduleオブジェクトへのポインタ)がNULLの場合、新しいモジュールは作成されず、同じ名前の既存のモジュールはすべて削除されます。</target>
        </trans-unit>
        <trans-unit id="1fb42f686bdf0ae2d9460cba55a33f179256de59" translate="yes" xml:space="preserve">
          <source>If the two snapshot handles are not associated with the same database file, the result of the comparison is undefined.</source>
          <target state="translated">2 つのスナップショットハンドルが同じデータベースファイルに関連付けられていない場合、比較の結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="e40d631505df75eada1d7356f623733efe0e7e84" translate="yes" xml:space="preserve">
          <source>If the value N is out of range or if the N-th parameter is nameless, then NULL is returned. The returned string is always in UTF-8 encoding even if the named parameter was originally specified as UTF-16 in &lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare16()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare16_v2()&lt;/a&gt;, or &lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare16_v3()&lt;/a&gt;.</source>
          <target state="translated">値Nが範囲外の場合、またはN番目のパラメーターに名前がない場合、NULLが返されます。名前付きパラメーターが&lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare16（）&lt;/a&gt;、&lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare16_v2（）&lt;/a&gt;、または&lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare16_v3（）&lt;/a&gt;で最初に UTF-16として指定されていたとしても、返される文字列は常にUTF-8エンコーディングです。</target>
        </trans-unit>
        <trans-unit id="345b60970d744b5b63e874a6cd2300d092b35eca" translate="yes" xml:space="preserve">
          <source>If the value N is out of range or if the N-th parameter is nameless, then NULL is returned. The returned string is always in UTF-8 encoding even if the named parameter was originally specified as UTF-16 in &lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare16()&lt;/a&gt;, &lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare16_v2()&lt;/a&gt;, or &lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare16_v3()&lt;/a&gt;.</source>
          <target state="translated">値Nが範囲外の場合、またはN番目のパラメーターに名前がない場合、NULLが返されます。名前付きパラメーターが&lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare16（）&lt;/a&gt;、&lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare16_v2（）&lt;/a&gt;、または&lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare16_v3（）&lt;/a&gt;で最初に UTF-16として指定されていたとしても、返される文字列は常にUTF-8エンコーディングです。</target>
        </trans-unit>
        <trans-unit id="d68928282b4992ea60ac59e231acaeb89700dde0" translate="yes" xml:space="preserve">
          <source>If the value being substituted is larger than the width, then full value is added to the output. In other words, the width is the minimum width of the value as it is rendered in the output.</source>
          <target state="translated">置換される値が幅よりも大きい場合は、完全な値が出力に追加されます。言い換えれば、幅は出力でレンダリングされる値の最小幅です。</target>
        </trans-unit>
        <trans-unit id="c4b0ded1a1deef22b5fab46f3c6efeda2921b5b8" translate="yes" xml:space="preserve">
          <source>If the value of</source>
          <target state="translated">の値が</target>
        </trans-unit>
        <trans-unit id="6f9d3eb4af97233320c8cb8d005d76e733f1eb82" translate="yes" xml:space="preserve">
          <source>If the value of a path/value pair is an SQLite TEXT value, then it is normally inserted as a quoted JSON string, even if the string looks like valid JSON. However, if the value is the result of another json1 function (such as &lt;a href=&quot;json1#jmini&quot;&gt;json()&lt;/a&gt; or &lt;a href=&quot;json1#jarray&quot;&gt;json_array()&lt;/a&gt; or &lt;a href=&quot;json1#jobj&quot;&gt;json_object()&lt;/a&gt;) then it is interpreted as JSON and is inserted as JSON retaining all of its substructure.</source>
          <target state="translated">パスと値のペアの値がSQLite TEXT値の場合、文字列が有効なJSONのように見えても、通常は引用符で囲まれたJSON文字列として挿入されます。ただし、値が別のjson1関数（&lt;a href=&quot;json1#jmini&quot;&gt;json（）&lt;/a&gt;、&lt;a href=&quot;json1#jarray&quot;&gt;json_array（）&lt;/a&gt;、&lt;a href=&quot;json1#jobj&quot;&gt;json_object（）など&lt;/a&gt;）の結果である場合は、JSONとして解釈され、すべての部分構造を保持するJSONとして挿入されます。</target>
        </trans-unit>
        <trans-unit id="b32ac49b143ce73b794453377ce559efe5961df7" translate="yes" xml:space="preserve">
          <source>If the value of the zString variable is NULL, the generated SQL will look like the following:</source>
          <target state="translated">zString 変数の値が NULL の場合、生成される SQL は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="8161ccbb4f6a18f526e60b92f180512b88485f22" translate="yes" xml:space="preserve">
          <source>If the values &quot;inserted&quot; into the text columns as part of a 'delete' command are not the same as those currently stored within the table, the results may be unpredictable.</source>
          <target state="translated">delete」コマンドの一部としてテキスト列に「挿入」された値が、現在テーブル内に保存されている値と異なる場合、結果が予測できない場合があります。</target>
        </trans-unit>
        <trans-unit id="59bbe3f4e62b07925a07b5a183754aca1009b0a0" translate="yes" xml:space="preserve">
          <source>If the variable does not have a bytearray representation, then &quot;@&quot; works just like &quot;$&quot;. Note that &quot;:&quot; works like &quot;$&quot; in all cases so the following is another way to express the same statement:</source>
          <target state="translated">変数がバイト配列で表現されていない場合、&quot;@&quot;は&quot;$&quot;と同じように動作します。ただし、&quot;:&quot; はすべての場合で &quot;$&quot; と同じように動作するので、同じ文を表現する別の方法を以下に示します。</target>
        </trans-unit>
        <trans-unit id="967912701ccde0cf6890cfdea463d69721e44f33" translate="yes" xml:space="preserve">
          <source>If the virtual machine is unable to open the database file because it is locked by another thread or process, &lt;b&gt;sqlite_step&lt;/b&gt; will return SQLITE_BUSY. The calling function should do some other activity, or sleep, for a short amount of time to give the lock a chance to clear, then invoke &lt;b&gt;sqlite_step&lt;/b&gt; again. This can be repeated as many times as desired.</source>
          <target state="translated">別のスレッドまたはプロセスによってロックされているために仮想マシンがデータベースファイルを開くことができない場合、&lt;b&gt;sqlite_step&lt;/b&gt;はSQLITE_BUSYを返します。呼び出し側の関数は、ロックをクリアする機会を与えるために、他のアクティビティをいくつか実行するか、またはスリープしてから、&lt;b&gt;sqlite_stepを&lt;/b&gt;再度呼び出す&lt;b&gt;必要&lt;/b&gt;があります。これは、必要に応じて何度でも繰り返すことができます。</target>
        </trans-unit>
        <trans-unit id="d0cab5be9268823b532780f4620139e0b2493eda" translate="yes" xml:space="preserve">
          <source>If the virtual table contains one or more rows that match the search criteria, then the cursor must be left point at the first row. Subsequent calls to &lt;a href=&quot;vtab#xeof&quot;&gt;xEof&lt;/a&gt; must return false (zero). If there are no rows match, then the cursor must be left in a state that will cause the &lt;a href=&quot;vtab#xeof&quot;&gt;xEof&lt;/a&gt; to return true (non-zero). The SQLite engine will use the &lt;a href=&quot;vtab#xcolumn&quot;&gt;xColumn&lt;/a&gt; and &lt;a href=&quot;vtab#xrowid&quot;&gt;xRowid&lt;/a&gt; methods to access that row content. The &lt;a href=&quot;vtab#xnext&quot;&gt;xNext&lt;/a&gt; method will be used to advance to the next row.</source>
          <target state="translated">仮想テーブルに検索条件に一致する1つ以上の行が含まれている場合、カーソルは最初の行を左に置く必要があります。&lt;a href=&quot;vtab#xeof&quot;&gt;xEof&lt;/a&gt;への後続の呼び出しはfalse（ゼロ）を返す必要があります。一致する行がない場合、カーソルは、&lt;a href=&quot;vtab#xeof&quot;&gt;xEof&lt;/a&gt;がtrue（ゼロ以外）を返すような状態にしておく必要があります。 SQLiteのエンジンが使用する&lt;a href=&quot;vtab#xcolumn&quot;&gt;Xcolumnに&lt;/a&gt;及び&lt;a href=&quot;vtab#xrowid&quot;&gt;xRowid&lt;/a&gt;行コンテンツそのアクセス方法を。&lt;a href=&quot;vtab#xnext&quot;&gt;xNextの&lt;/a&gt;方法は、次の行に進むために使用されます。</target>
        </trans-unit>
        <trans-unit id="ad0d9be234c914ee5ff307719c3b70dd43c84d33" translate="yes" xml:space="preserve">
          <source>If the virtual table will output rows in the order specified by the ORDER BY clause, then the orderByConsumed flag may be set to true. If the output is not automatically in the correct order then orderByConsumed must be left in its default false setting. This will indicate to the SQLite core that it will need to do a separate sorting pass over the data after it comes out of the virtual table.</source>
          <target state="translated">仮想テーブルが ORDER BY 節で指定した順序で行を出力する場合は、 orderByConsumed フラグを true に設定することができます。自動的に正しい順序で出力されない場合は、 orderByConsumed をデフォルトの false のままにしておかなければなりません。これは、SQLiteコアに対して、仮想テーブルからデータが出てきた後に別のソートパスを実行する必要があることを示します。</target>
        </trans-unit>
        <trans-unit id="40852f77f22b22d25b15aa100b0b83a4fb17d34c" translate="yes" xml:space="preserve">
          <source>If the width is a single &quot;*&quot; character instead of a number, then the actual width value is read as an integer from the argument list. If the value read is negative, then the absolute value is used for the width and the value is left-justified as if the &quot;-&quot; flag were present.</source>
          <target state="translated">幅が数値ではなく &quot;*&quot;一文字の場合、実際の幅の値が引数リストから整数として読み込まれる。読み込まれた値が負の場合、絶対値が幅に使用され、値は&quot;-&quot;フラグがあるかのように左寄せされる。</target>
        </trans-unit>
        <trans-unit id="5f665397e9a7b0fe05142c4eb0f952c2d738840c" translate="yes" xml:space="preserve">
          <source>If the xAccess() query required by H35490 reveals that the journal file is still present in the file system, then SQLite shall conclude that the journal file is a</source>
          <target state="translated">H35490 で要求された xAccess()クエリにより、ファイルシステム内にジャーナルファイルがまだ存在することが判明した場合、SQLite は、ジャーナルファイルが</target>
        </trans-unit>
        <trans-unit id="2ece4dc60c85bd0f6370651e04aa59f231e6a232" translate="yes" xml:space="preserve">
          <source>If the xColumn method implementation calls none of the functions above, then the value of the column defaults to an SQL NULL.</source>
          <target state="translated">xColumnメソッドの実装が上記の関数のいずれも呼び出さない場合、カラムの値はSQL NULLがデフォルトとなります。</target>
        </trans-unit>
        <trans-unit id="df9512eb02b352fc76419bfac69b024afe92a594" translate="yes" xml:space="preserve">
          <source>If the xCreate method is omitted (left as a NULL pointer) then the virtual table is an &lt;a href=&quot;vtab#epoonlyvtab&quot;&gt;eponymous-only virtual table&lt;/a&gt;. New instances of the virtual table cannot be created using &lt;a href=&quot;lang_createvtab&quot;&gt;CREATE VIRTUAL TABLE&lt;/a&gt; and the virtual table can only be used via its module name. Note that SQLite versions prior to 3.9.0 (2015-10-14) do not understand eponymous-only virtual tables and will segfault if an attempt is made to &lt;a href=&quot;lang_createvtab&quot;&gt;CREATE VIRTUAL TABLE&lt;/a&gt; on an eponymous-only virtual table because the xCreate method was not checked for null.</source>
          <target state="translated">xCreateメソッドが省略されている場合（NULLポインターとして残されている場合）、仮想テーブルは、&lt;a href=&quot;vtab#epoonlyvtab&quot;&gt;同名のみの仮想テーブル&lt;/a&gt;です。&lt;a href=&quot;lang_createvtab&quot;&gt;CREATE VIRTUAL TABLE&lt;/a&gt;を使用して仮想テーブルの新しいインスタンスを作成することはできず、仮想テーブルはそのモジュール名を介してのみ使用できます。 SQLiteのより前のバージョンの3.9.0（2015年10月14日）が名を冠した専用の仮想テーブルを理解していないとの試みがさせるとセグメンテーションフォールトがあることに注意してください&lt;a href=&quot;lang_createvtab&quot;&gt;VIRTUAL CREATE TABLEを&lt;/a&gt; xCreateメソッドがチェックされていなかったので、名を冠した専用の仮想テーブルの上にnullの場合。</target>
        </trans-unit>
        <trans-unit id="2621a8e3fdadffc723f38e49d09955e1039ab97f" translate="yes" xml:space="preserve">
          <source>If the xCreate method is the exact same pointer as the &lt;a href=&quot;vtab#xconnect&quot;&gt;xConnect&lt;/a&gt; method, that indicates that the virtual table does not need to initialize backing store. Such a virtual table can be used as an &lt;a href=&quot;vtab#epovtab&quot;&gt;eponymous virtual table&lt;/a&gt; or as a named virtual table using &lt;a href=&quot;lang_createvtab&quot;&gt;CREATE VIRTUAL TABLE&lt;/a&gt; or both.</source>
          <target state="translated">xCreate方法はまったく同じポインタである場合&lt;a href=&quot;vtab#xconnect&quot;&gt;xconnectコン&lt;/a&gt;仮想テーブルはバッキングストアを初期化する必要がないことを示している方法は、。このような仮想テーブルは、&lt;a href=&quot;vtab#epovtab&quot;&gt;代名詞の仮想テーブル&lt;/a&gt;として、または&lt;a href=&quot;lang_createvtab&quot;&gt;CREATE VIRTUAL TABLE&lt;/a&gt;またはその両方を使用した名前付き仮想テーブルとして使用できます。</target>
        </trans-unit>
        <trans-unit id="1ea6013e86112c06dab3e4770a560b43808bcc0c" translate="yes" xml:space="preserve">
          <source>If the xEntryPoint routine encounters an error, it should make *pzErrMsg point to an appropriate error message (obtained from &lt;a href=&quot;#sqlite3_mprintf&quot;&gt;sqlite3_mprintf()&lt;/a&gt;) and return an appropriate &lt;a href=&quot;rescode&quot;&gt;error code&lt;/a&gt;. SQLite ensures that *pzErrMsg is NULL before calling the xEntryPoint(). SQLite will invoke &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_free()&lt;/a&gt; on *pzErrMsg after xEntryPoint() returns. If any xEntryPoint() returns an error, the &lt;a href=&quot;#sqlite3_open&quot;&gt;sqlite3_open()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_open&quot;&gt;sqlite3_open16()&lt;/a&gt;, or &lt;a href=&quot;#sqlite3_open&quot;&gt;sqlite3_open_v2()&lt;/a&gt; call that provoked the xEntryPoint() will fail.</source>
          <target state="translated">xEntryPointルーチンでエラーが発生した場合、* pzErrMsgが適切なエラーメッセージ（&lt;a href=&quot;#sqlite3_mprintf&quot;&gt;sqlite3_mprintf（）&lt;/a&gt;から取得）を指すようにし、適切な&lt;a href=&quot;rescode&quot;&gt;エラーコード&lt;/a&gt;を返す必要があります。 SQLiteは、xEntryPoint（）を呼び出す前に* pzErrMsgがNULLであることを確認します。 SQLiteは起動します&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_free（）&lt;/a&gt; xEntryPoint（）が復帰した後* pzErrMsg上を。 xEntryPoint（）がエラーを返す場合、xEntryPoint（）を引き起こした&lt;a href=&quot;#sqlite3_open&quot;&gt;sqlite3_open（）&lt;/a&gt;、&lt;a href=&quot;#sqlite3_open&quot;&gt;sqlite3_open16（）&lt;/a&gt;、または&lt;a href=&quot;#sqlite3_open&quot;&gt;sqlite3_open_v2（）&lt;/a&gt;呼び出しは失敗します。</target>
        </trans-unit>
        <trans-unit id="f84dff46c33beaf54e0ca4079880cc37a3fce130" translate="yes" xml:space="preserve">
          <source>If the xEntryPoint routine encounters an error, it should make *pzErrMsg point to an appropriate error message (obtained from &lt;a href=&quot;mprintf&quot;&gt;sqlite3_mprintf()&lt;/a&gt;) and return an appropriate &lt;a href=&quot;../rescode&quot;&gt;error code&lt;/a&gt;. SQLite ensures that *pzErrMsg is NULL before calling the xEntryPoint(). SQLite will invoke &lt;a href=&quot;free&quot;&gt;sqlite3_free()&lt;/a&gt; on *pzErrMsg after xEntryPoint() returns. If any xEntryPoint() returns an error, the &lt;a href=&quot;open&quot;&gt;sqlite3_open()&lt;/a&gt;, &lt;a href=&quot;open&quot;&gt;sqlite3_open16()&lt;/a&gt;, or &lt;a href=&quot;open&quot;&gt;sqlite3_open_v2()&lt;/a&gt; call that provoked the xEntryPoint() will fail.</source>
          <target state="translated">xEntryPointルーチンでエラーが発生した場合、* pzErrMsgが適切なエラーメッセージ（&lt;a href=&quot;mprintf&quot;&gt;sqlite3_mprintf（）&lt;/a&gt;から取得）を指すようにし、適切な&lt;a href=&quot;../rescode&quot;&gt;エラーコード&lt;/a&gt;を返す必要があります。 SQLiteは、xEntryPoint（）を呼び出す前に* pzErrMsgがNULLであることを確認します。 SQLiteは起動します&lt;a href=&quot;free&quot;&gt;sqlite3_free（）&lt;/a&gt; xEntryPoint（）が復帰した後* pzErrMsg上を。 xEntryPoint（）がエラーを返す場合、xEntryPoint（）を引き起こした&lt;a href=&quot;open&quot;&gt;sqlite3_open（）&lt;/a&gt;、&lt;a href=&quot;open&quot;&gt;sqlite3_open16（）&lt;/a&gt;、または&lt;a href=&quot;open&quot;&gt;sqlite3_open_v2（）&lt;/a&gt;呼び出しは失敗します。</target>
        </trans-unit>
        <trans-unit id="74fa84b64e4977d1c29908e0f6708d6d082c0af7" translate="yes" xml:space="preserve">
          <source>If the xUpdate method is performing an UPDATE, then &lt;a href=&quot;c3ref/value_blob&quot;&gt;sqlite3_value_nochange(X)&lt;/a&gt; can be used to discover which columns of the virtual table were actually modified by the UPDATE statement. The &lt;a href=&quot;c3ref/value_blob&quot;&gt;sqlite3_value_nochange(X)&lt;/a&gt; interface returns true for columns that do not change. On every UPDATE, SQLite will first invoke &lt;a href=&quot;vtab#xcolumn&quot;&gt;xColumn&lt;/a&gt; separately for each unchanging column in the table to obtain the value for that column. The &lt;a href=&quot;vtab#xcolumn&quot;&gt;xColumn&lt;/a&gt; method can check to see if the column is unchanged at the SQL level by invoking &lt;a href=&quot;c3ref/vtab_nochange&quot;&gt;sqlite3_vtab_nochange()&lt;/a&gt;. If &lt;a href=&quot;vtab#xcolumn&quot;&gt;xColumn&lt;/a&gt; sees that the column is not being modified, it should return without setting a result using one of the &lt;a href=&quot;c3ref/result_blob&quot;&gt;sqlite3_result_xxxxx()&lt;/a&gt; interfaces. Only in that case &lt;a href=&quot;c3ref/value_blob&quot;&gt;sqlite3_value_nochange()&lt;/a&gt; will be true within the xUpdate method. If &lt;a href=&quot;vtab#xcolumn&quot;&gt;xColumn&lt;/a&gt; does invoke one or more &lt;a href=&quot;c3ref/result_blob&quot;&gt;sqlite3_result_xxxxx()&lt;/a&gt; interfaces, then SQLite understands that as a change in the value of the column and the &lt;a href=&quot;c3ref/value_blob&quot;&gt;sqlite3_value_nochange()&lt;/a&gt; call for that column within xUpdate will return false.</source>
          <target state="translated">xUpdateメソッドがUPDATEを実行している場合、sqlite3_value_nochange &lt;a href=&quot;c3ref/value_blob&quot;&gt;（X）&lt;/a&gt;を使用して、UPDATEステートメントによって実際に変更された仮想テーブルの列を検出できます。&lt;a href=&quot;c3ref/value_blob&quot;&gt;sqlite3_value_nochange（X）&lt;/a&gt;変更しない列のための真のインターフェイスに戻ります。 SQLiteはすべてのUPDATEで、最初にテーブルの&lt;a href=&quot;vtab#xcolumn&quot;&gt;変更&lt;/a&gt;されていない列ごとにxColumnを個別に呼び出し、その列の値を取得します。&lt;a href=&quot;vtab#xcolumn&quot;&gt;Xcolumnにする&lt;/a&gt;方法は、カラムが起動することにより、SQLレベルで変化していないかどうかを確認することができ&lt;a href=&quot;c3ref/vtab_nochange&quot;&gt;sqlite3_vtab_nochangeを（） &lt;/a&gt;。列が変更されていないことを&lt;a href=&quot;vtab#xcolumn&quot;&gt;xColumn&lt;/a&gt;が確認した場合、&lt;a href=&quot;c3ref/result_blob&quot;&gt;sqlite3_result_xxxxx（）の&lt;/a&gt;いずれかを使用して結果を設定せずに戻る必要がありますインターフェース。その場合にのみ、&lt;a href=&quot;c3ref/value_blob&quot;&gt;sqlite3_value_nochange（）&lt;/a&gt;がxUpdateメソッド内でtrueになります。&lt;a href=&quot;vtab#xcolumn&quot;&gt;xColumn&lt;/a&gt;が1つ以上の&lt;a href=&quot;c3ref/result_blob&quot;&gt;sqlite3_result_xxxxx（）&lt;/a&gt;インターフェースを呼び出す場合、SQLiteは列の値の変更と&lt;a href=&quot;c3ref/value_blob&quot;&gt;xUpdate&lt;/a&gt;内のその列に対するsqlite3_value_nochange（）呼び出しがfalseを返すことを理解します。</target>
        </trans-unit>
        <trans-unit id="7b85064db380f0c3b1175d1e7fe24a5bdf881bd8" translate="yes" xml:space="preserve">
          <source>If the xUpdate method violates some constraint of the virtual table (including, but not limited to, attempting to store a value of the wrong datatype, attempting to store a value that is too large or too small, or attempting to change a read-only value) then the xUpdate must fail with an appropriate &lt;a href=&quot;rescode&quot;&gt;error code&lt;/a&gt;.</source>
          <target state="translated">xUpdateメソッドが仮想テーブルの制約に違反している場合（これに限定されないが、間違ったデータ型の値を格納しようとする、大きすぎるまたは小さすぎる値を格納しようとする、または読み取り専用を変更しようとするなど）値）その後、xUpdateは適切な&lt;a href=&quot;rescode&quot;&gt;エラーコードで&lt;/a&gt;失敗する必要があります。</target>
        </trans-unit>
        <trans-unit id="9a7985513fccd145b507f142e6f37dfce68e7177" translate="yes" xml:space="preserve">
          <source>If the zString variable holds text like &quot;Hello&quot;, then this statement will work just fine. But suppose the user enters a string like &quot;Hi y'all!&quot;. The SQL statement generated reads as follows:</source>
          <target state="translated">zString 変数が &quot;Hello&quot; のようなテキストを保持している場合、この文はうまく動作します。しかし、ユーザが &quot;Hi y'all!&quot; のような文字列を入力したとします。生成されたSQL文は次のように読み取れます。</target>
        </trans-unit>
        <trans-unit id="38c9c0042a5b1d208534216bf07dfb6099f9ebb4" translate="yes" xml:space="preserve">
          <source>If there are many client programs sending SQL to the same database over a network, then use a client/server database engine instead of SQLite. SQLite will work over a network filesystem, but because of the latency associated with most network filesystems, performance will not be great. Also, file locking logic is buggy in many network filesystem implementations (on both Unix and Windows). If file locking does not work correctly, two or more clients might try to modify the same part of the same database at the same time, resulting in corruption. Because this problem results from bugs in the underlying filesystem implementation, there is nothing SQLite can do to prevent it.</source>
          <target state="translated">ネットワーク経由で同じデータベースにSQLを送信するクライアントプログラムが多数ある場合は、SQLiteの代わりにクライアント/サーバーデータベースエンジンを使用してください。SQLiteはネットワークファイルシステム上で動作しますが、ほとんどのネットワークファイルシステムに関連するレイテンシのため、パフォーマンスはあまり良くありません。また、多くのネットワークファイルシステムの実装(UnixとWindowsの両方)では、ファイルロックのロジックにバグがあります。ファイルロックが正しく動作しない場合、複数のクライアントが同時に同じデータベースの同じ部分を変更しようとし、破損を引き起こす可能性があります。この問題は、基礎となるファイルシステムの実装のバグに起因するものなので、SQLite がこれを防ぐためにできることは何もありません。</target>
        </trans-unit>
        <trans-unit id="36f4c3a2fda5cf31617c5fabae95e90bafd39057" translate="yes" xml:space="preserve">
          <source>If there are multiple (hard or symbolic) links to a database file, the journal will be created using the name of the link through which the file was opened. If a crash occurs and the database is opened again using a different link, the hot journal will not be located and no rollback will occur.</source>
          <target state="translated">データベースファイルへの複数の(ハードまたはシンボリック)リンクがある場合、ジャーナルは、ファイルが開かれたリンクの名前を使用して作成されます。クラッシュが発生し、別のリンクを使用してデータベースを再度開いた場合、ホット・ジャーナルは存在せず、ロールバックも発生しません。</target>
        </trans-unit>
        <trans-unit id="11044e3b942016886a776e1bab1892306cb966d9" translate="yes" xml:space="preserve">
          <source>If there are still more pages to copy from database pDb, then the function sleeps for 250 milliseconds (using the &lt;a href=&quot;c3ref/sleep&quot;&gt;sqlite3_sleep()&lt;/a&gt; utility) and then returns to step 2.</source>
          <target state="translated">データベースpDbからコピーするページがまだある場合、関数は（&lt;a href=&quot;c3ref/sleep&quot;&gt;sqlite3_sleep（）&lt;/a&gt;ユーティリティを使用して） 250ミリ秒間スリープしてから、手順2に戻ります。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
