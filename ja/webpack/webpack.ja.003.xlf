<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="webpack">
    <body>
      <group id="webpack">
        <trans-unit id="13ceb08b08d413b8469009fff5b4c7b25c5df462" translate="yes" xml:space="preserve">
          <source>Instead of exporting a single configuration object/function, you may export multiple configurations (multiple functions are supported since webpack 3.1.0). When running webpack, all configurations are built. For instance, this is useful for &lt;a href=&quot;../guides/author-libraries&quot;&gt;bundling a library&lt;/a&gt; for multiple &lt;a href=&quot;output#output-librarytarget&quot;&gt;targets&lt;/a&gt; such as AMD and CommonJS:</source>
          <target state="translated">単一の構成オブジェクト/機能をエクスポートする代わりに、複数の構成をエクスポートできます（webpack 3.1.0以降、複数の機能がサポートされています）。webpackを実行すると、すべての構成が構築されます。たとえば、これは、AMDやCommonJSなどの複数の&lt;a href=&quot;output#output-librarytarget&quot;&gt;ターゲットの&lt;/a&gt;&lt;a href=&quot;../guides/author-libraries&quot;&gt;ライブラリ&lt;/a&gt;をバンドルする場合に便利です。</target>
        </trans-unit>
        <trans-unit id="e0573e283964572704ca396e5f9bb3ed7c1564c3" translate="yes" xml:space="preserve">
          <source>Instead of using the &lt;code&gt;devtool&lt;/code&gt; option you can also use &lt;code&gt;SourceMapDevToolPlugin&lt;/code&gt;/&lt;code&gt;EvalSourceMapDevToolPlugin&lt;/code&gt; directly as it has more options. Never use both the &lt;code&gt;devtool&lt;/code&gt; option and plugin together. The &lt;code&gt;devtool&lt;/code&gt; option adds the plugin internally so you would end up with the plugin applied twice.</source>
          <target state="translated">&lt;code&gt;devtool&lt;/code&gt; オプションを使用する代わりに、 &lt;code&gt;SourceMapDevToolPlugin&lt;/code&gt; / &lt;code&gt;EvalSourceMapDevToolPlugin&lt;/code&gt; を直接使用することもできます。これには、より多くのオプションがあるためです。 &lt;code&gt;devtool&lt;/code&gt; オプションとプラグインを同時に使用しないでください。 &lt;code&gt;devtool&lt;/code&gt; のプラグインが2回適用して、あなたが終わるしまうので、オプションでは、内部的にプラグインを追加します。</target>
        </trans-unit>
        <trans-unit id="397baec23784db4414b3b955a65290479d83c0bf" translate="yes" xml:space="preserve">
          <source>Instead, use &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt; how you normally would and &lt;code&gt;npm install&lt;/code&gt; will happen &lt;strong&gt;automatically to install &amp;amp; save missing dependencies&lt;/strong&gt; while you work!</source>
          <target state="translated">代わりに、通常の方法で &lt;code&gt;require&lt;/code&gt; または &lt;code&gt;import&lt;/code&gt; を使用すると、 &lt;code&gt;npm install&lt;/code&gt; が&lt;strong&gt;自動的に実行され、&lt;/strong&gt;作業中に&lt;strong&gt;欠落している依存関係をインストールして保存&lt;/strong&gt;します！</target>
        </trans-unit>
        <trans-unit id="c5d169014af114b9843602fc038633eff55a22b8" translate="yes" xml:space="preserve">
          <source>Instead, with &lt;code&gt;strictModuleExceptionHandling&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;, all &lt;code&gt;require&lt;/code&gt;s of this module throw an exception:</source>
          <target state="translated">代わりに、 &lt;code&gt;strictModuleExceptionHandling&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定する &lt;code&gt;require&lt;/code&gt; 、このモジュールのすべてのrequireが例外をスローします。</target>
        </trans-unit>
        <trans-unit id="effdf11f25a78c860e4deb03c10959bdbfe8e6a6" translate="yes" xml:space="preserve">
          <source>Instructs the loader to cause the webpack build to fail on all JSHint warnings and errors.</source>
          <target state="translated">すべての JSHint の警告とエラーに対して webpack のビルドが失敗するようにローダに指示します。</target>
        </trans-unit>
        <trans-unit id="c70f9def1c0d9fd9fe32ad04df41435833834184" translate="yes" xml:space="preserve">
          <source>Instructs the loader to emit all JSHint warnings and errors as webpack errors.</source>
          <target state="translated">ローダに、すべての JSHint の警告とエラーを webpack のエラーとして出力するよう指示します。</target>
        </trans-unit>
        <trans-unit id="8b9160c9ad2f43280c351ba53cc04b6e58a7da97" translate="yes" xml:space="preserve">
          <source>Instructs the module to allow a missing config file, and returns an &lt;code&gt;Object&lt;/code&gt; with empty &lt;code&gt;config&lt;/code&gt; and &lt;code&gt;configPath&lt;/code&gt; properties in the event a config file was not found.</source>
          <target state="translated">不足している設定ファイルを許可するためのモジュールは、指示し、返す &lt;code&gt;Object&lt;/code&gt; 空に &lt;code&gt;config&lt;/code&gt; して &lt;code&gt;configPath&lt;/code&gt; 設定ファイルが見つかりませんでしたイベントのプロパティ。</target>
        </trans-unit>
        <trans-unit id="1276a9a004ec270e14baedaf01e1c74c75d8efe3" translate="yes" xml:space="preserve">
          <source>Instructs webpack to target a specific environment.</source>
          <target state="translated">特定の環境をターゲットにするようにwebpackに指示します。</target>
        </trans-unit>
        <trans-unit id="7f343bea4465f2b86a1fad15d186f37a531dff0a" translate="yes" xml:space="preserve">
          <source>Instrument JS files with &lt;a href=&quot;https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-lib-instrument&quot;&gt;istanbul-lib-instrument&lt;/a&gt; for subsequent code coverage reporting</source>
          <target state="translated">後続のコードカバレッジレポート用に&lt;a href=&quot;https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-lib-instrument&quot;&gt;istanbul-lib-instrument&lt;/a&gt;を使用してJSファイルを計測する</target>
        </trans-unit>
        <trans-unit id="ba08f2b36bcf4ff3f6a275bca9855353f4ccf082" translate="yes" xml:space="preserve">
          <source>Integrating with ES2015 Modules</source>
          <target state="translated">ES2015モジュールとの統合</target>
        </trans-unit>
        <trans-unit id="248240b14498eacc32b7b4d5b6e2966a04bffdb9" translate="yes" xml:space="preserve">
          <source>Integrating with TypeScript</source>
          <target state="translated">TypeScriptとの統合</target>
        </trans-unit>
        <trans-unit id="a7881cac6e64abca5eafd172df6eb31fe0b84c88" translate="yes" xml:space="preserve">
          <source>Integrations</source>
          <target state="translated">Integrations</target>
        </trans-unit>
        <trans-unit id="69a0971817cd609ff594b2673e743c6c7d191f12" translate="yes" xml:space="preserve">
          <source>Internal webpack plugins</source>
          <target state="translated">内部のwebpackプラグイン</target>
        </trans-unit>
        <trans-unit id="6a9858c9bf3149456595f98943cf88e41039822e" translate="yes" xml:space="preserve">
          <source>Interpolation</source>
          <target state="translated">Interpolation</target>
        </trans-unit>
        <trans-unit id="e61b5282e8f791a7516b3ec1c349f42c5bb3fe9d" translate="yes" xml:space="preserve">
          <source>Introduced in &lt;code&gt;0.27.1&lt;/code&gt;. Class names will be camelized, the original class name will be removed from the locals</source>
          <target state="translated">&lt;code&gt;0.27.1&lt;/code&gt; で導入されました。クラス名はキャメル化され、元のクラス名はローカルから削除されます</target>
        </trans-unit>
        <trans-unit id="81cc0ef1f3b4ebd6924b3bcdc04867da15585239" translate="yes" xml:space="preserve">
          <source>Introduced in &lt;code&gt;0.27.1&lt;/code&gt;. Dashes in class names will be camelized, the original class name will be removed from the locals</source>
          <target state="translated">&lt;code&gt;0.27.1&lt;/code&gt; で導入されました。クラス名のダッシュはキャメル化され、元のクラス名はローカルから削除されます</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="25ccad8493fba08b5fa20e3f61dc14ab1deb8ad9" translate="yes" xml:space="preserve">
          <source>Invalidate &lt;code&gt;Watching&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Watching&lt;/code&gt; 無効にする</target>
        </trans-unit>
        <trans-unit id="6a9b44369c96eafd66d755034e5ce80488ad8832" translate="yes" xml:space="preserve">
          <source>Invocation</source>
          <target state="translated">Invocation</target>
        </trans-unit>
        <trans-unit id="69ca30ff4d89721397e0f7df656c8fa9b8fc10e2" translate="yes" xml:space="preserve">
          <source>Issue 2783 - ContextReplacementPlugin Description</source>
          <target state="translated">問題2783-ContextReplacementPluginの説明</target>
        </trans-unit>
        <trans-unit id="9bf749a84c752b873b6faf0e0957912bd1830596" translate="yes" xml:space="preserve">
          <source>Issue 6074 - Add support for more complex selectors for sideEffects</source>
          <target state="translated">問題6074-sideEffects用のより複雑なセレクタのサポートを追加する</target>
        </trans-unit>
        <trans-unit id="17beeabe62cb95c17c070cacb4d2531d2f8eed2b" translate="yes" xml:space="preserve">
          <source>Issue 652</source>
          <target state="translated">652号</target>
        </trans-unit>
        <trans-unit id="cb1887d5966d3c7ca9387a24c4e1e24d402abc2f" translate="yes" xml:space="preserve">
          <source>It adds polyfills for &lt;code&gt;process&lt;/code&gt;, &lt;code&gt;console&lt;/code&gt;, &lt;code&gt;Buffer&lt;/code&gt; and &lt;code&gt;global&lt;/code&gt; if used. It also binds the built in Node.js replacement modules.</source>
          <target state="translated">それはのためのpolyfills追加 &lt;code&gt;process&lt;/code&gt; 、 &lt;code&gt;console&lt;/code&gt; 、 &lt;code&gt;Buffer&lt;/code&gt; および &lt;code&gt;global&lt;/code&gt; 使用した場合。また、組み込みのNode.js置換モジュールをバインドします。</target>
        </trans-unit>
        <trans-unit id="616f5800b8dee1dd134fbc4a619fb1031232649d" translate="yes" xml:space="preserve">
          <source>It allows you to pass in a directory to search, a flag indicating whether subdirectories should be searched too, and a regular expression to match files against.</source>
          <target state="translated">これにより、検索するディレクトリ、サブディレクトリも検索すべきかどうかを示すフラグ、ファイルをマッチさせる正規表現を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="dad0ce2906dc315dba34ecbcc803f2a7886b5715" translate="yes" xml:space="preserve">
          <source>It also breaks if the options object cannot be stringified (i.e. circular JSON). Because of this you can have a &lt;code&gt;ident&lt;/code&gt; property in the options object which is used as unique identifier.</source>
          <target state="translated">また、optionsオブジェクトを文字列化できない場合（つまり、循環JSON）は壊れます。このため、オプションオブジェクトに一意の識別子として使用される &lt;code&gt;ident&lt;/code&gt; プロパティを含めることができます。</target>
        </trans-unit>
        <trans-unit id="ed772508e53094d379861571b26bd9edaf7e3cd6" translate="yes" xml:space="preserve">
          <source>It also ensures that &lt;code&gt;module&lt;/code&gt; is filled with some Node.js stuff if you use it.</source>
          <target state="translated">また、 &lt;code&gt;module&lt;/code&gt; を使用する場合は、Node.js でモジュールが満たされるようにします。</target>
        </trans-unit>
        <trans-unit id="b9875763f65e2307243db50cc2f2061578a690bb" translate="yes" xml:space="preserve">
          <source>It basically comes down to this:</source>
          <target state="translated">基本的にはこれに尽きます。</target>
        </trans-unit>
        <trans-unit id="59dce9462293c25777c42b41526c5997bbec52db" translate="yes" xml:space="preserve">
          <source>It builds on top of a new webpack v4 feature (module types) and requires webpack 4 to work.</source>
          <target state="translated">これは新しい webpack v4 機能(モジュールタイプ)の上に構築されており、動作するには webpack 4 を必要とします。</target>
        </trans-unit>
        <trans-unit id="f879720d2904e8d40f82caa669a9fd39de13f749" translate="yes" xml:space="preserve">
          <source>It can be useful to pass an abstract syntax tree (AST), like &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;&lt;code&gt;ESTree&lt;/code&gt;&lt;/a&gt;, as the fourth argument (&lt;code&gt;meta&lt;/code&gt;) to speed up the build time if you want to share common ASTs between loaders.</source>
          <target state="translated">ローダー間で共通のASTを共有する場合は、&lt;a href=&quot;https://github.com/estree/estree&quot;&gt; &lt;code&gt;ESTree&lt;/code&gt; &lt;/a&gt;などの抽象構文ツリー（AST）を4番目の引数（ &lt;code&gt;meta&lt;/code&gt; ）として渡してビルド時間を短縮すると便利です。</target>
        </trans-unit>
        <trans-unit id="0c80fe031ec5dcb9765df0675771cd2a363d232a" translate="yes" xml:space="preserve">
          <source>It can have an &lt;code&gt;options&lt;/code&gt; property being a string or object. This value is passed to the loader, which should interpret it as loader options.</source>
          <target state="translated">文字列またはオブジェクトである &lt;code&gt;options&lt;/code&gt; プロパティを持つことができます。この値はローダーに渡され、ローダーオプションとして解釈されます。</target>
        </trans-unit>
        <trans-unit id="fdd23de19b5eb3042d866f8991836c1028466c9b" translate="yes" xml:space="preserve">
          <source>It defaults to &lt;code&gt;false&lt;/code&gt; for performance reasons.</source>
          <target state="translated">パフォーマンス上の理由から、デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="945cc2239651cf32115bdee8cb704ddc32d0cb05" translate="yes" xml:space="preserve">
          <source>It is also possible to have and use multiple &lt;a href=&quot;https://github.com/micromatch/anymatch&quot;&gt;anymatch&lt;/a&gt; patterns:</source>
          <target state="translated">複数の&lt;a href=&quot;https://github.com/micromatch/anymatch&quot;&gt;anymatch&lt;/a&gt;パターンを保持して使用することもできます。</target>
        </trans-unit>
        <trans-unit id="5dc9c7ffaee78d96165a2216e51352d8b395f38a" translate="yes" xml:space="preserve">
          <source>It is also possible to serve from multiple directories:</source>
          <target state="translated">また、複数のディレクトリからサーブすることも可能です。</target>
        </trans-unit>
        <trans-unit id="37138d0a4f0dd83a1c06a45d1e4ff32678818985" translate="yes" xml:space="preserve">
          <source>It is also possible to use &lt;strong&gt;iframe mode&lt;/strong&gt;, which uses an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; under a notification bar with messages about the build. To switch to &lt;strong&gt;iframe mode&lt;/strong&gt;:</source>
          <target state="translated">使用することも可能である&lt;strong&gt;IFRAMEモード&lt;/strong&gt;使用し、 &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; のビルドに関するメッセージで通知バーの下を。&lt;strong&gt;iframeモードに&lt;/strong&gt;切り替えるには：</target>
        </trans-unit>
        <trans-unit id="61f410da5c43770d9c0794c6bf09aba7de18e7b0" translate="yes" xml:space="preserve">
          <source>It is also possible to use a full URL. This is necessary for Hot Module Replacement.</source>
          <target state="translated">フルURLにすることも可能です。ホットモジュール交換の際に必要です。</target>
        </trans-unit>
        <trans-unit id="75197ef50ff24e1b96488526a298c6ef5d07ad5f" translate="yes" xml:space="preserve">
          <source>It is crucial to minimize your CSS on production, please see &lt;a href=&quot;../plugins/mini-css-extract-plugin#minimizing-for-production&quot;&gt;Minimizing for Production&lt;/a&gt; section.</source>
          <target state="translated">本番&lt;a href=&quot;../plugins/mini-css-extract-plugin#minimizing-for-production&quot;&gt;環境で&lt;/a&gt; CSSを最小限に抑えることが重要です。本番環境向けの最小化セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="8240558ea1fe05205084e8382ec88e201389bbe2" translate="yes" xml:space="preserve">
          <source>It is disabled by default.</source>
          <target state="translated">デフォルトでは無効になっています。</target>
        </trans-unit>
        <trans-unit id="c66465961a258c81d6a1c10201918890fd220b95" translate="yes" xml:space="preserve">
          <source>It is imporant to mention that &lt;code&gt;import { calculateTax } from './tax';&lt;/code&gt; will also get pruned because &lt;code&gt;calculateTax()&lt;/code&gt; call was in the dead branch and got eliminated.</source>
          <target state="translated">&lt;code&gt;import { calculateTax } from './tax';&lt;/code&gt; をインポートすることは重要です。また、 &lt;code&gt;calculateTax()&lt;/code&gt; 呼び出しがデッドブランチにあり、削除されたため、枝刈りされます。</target>
        </trans-unit>
        <trans-unit id="be0b08ae67865e1431381201c7d4a153bc4d7df2" translate="yes" xml:space="preserve">
          <source>It is important to remember that when defining rules in your webpack config, you are defining them under &lt;code&gt;module.rules&lt;/code&gt; and not &lt;code&gt;rules&lt;/code&gt;. For your benefit, webpack will warn you if this is done incorrectly.</source>
          <target state="translated">あなたのWebPACKの設定でルールを定義するとき、あなたは下に定義されていることを覚えておくことが重要である &lt;code&gt;module.rules&lt;/code&gt; ない &lt;code&gt;rules&lt;/code&gt; 。あなたの利益のために、これが正しく行われない場合、webpackは警告を出します。</target>
        </trans-unit>
        <trans-unit id="0d2952cb6f1294217f30ecb360ff0072513cda17" translate="yes" xml:space="preserve">
          <source>It is not immediately apparent that the script depends on an external library.</source>
          <target state="translated">スクリプトが外部ライブラリに依存していることはすぐにはわかりません。</target>
        </trans-unit>
        <trans-unit id="aca5f77e9a1cd16ea41ed8f090bcf6b8c4d42026" translate="yes" xml:space="preserve">
          <source>It is possible to configure advanced options for serving static files from &lt;code&gt;contentBase&lt;/code&gt;. See the &lt;a href=&quot;http://expressjs.com/en/4x/api.html#express.static&quot;&gt;Express documentation&lt;/a&gt; for the possible options. An example:</source>
          <target state="translated">&lt;code&gt;contentBase&lt;/code&gt; から静的ファイルを提供するための詳細オプションを構成することができます。可能なオプションについては、&lt;a href=&quot;http://expressjs.com/en/4x/api.html#express.static&quot;&gt;Expressのドキュメント&lt;/a&gt;を参照してください。例：</target>
        </trans-unit>
        <trans-unit id="8c2f5ad81d4f1e157defc5a74c453435792d4ba8" translate="yes" xml:space="preserve">
          <source>It is recommended that &lt;code&gt;devServer.publicPath&lt;/code&gt; is the same as &lt;code&gt;output.publicPath&lt;/code&gt;.</source>
          <target state="translated">することが推奨され &lt;code&gt;devServer.publicPath&lt;/code&gt; が同じである &lt;code&gt;output.publicPath&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d68d875f3f812e2cb481b5f67a1351746ce411c2" translate="yes" xml:space="preserve">
          <source>It isn't as flexible and can't be used to dynamically split code with the core application logic.</source>
          <target state="translated">コアアプリケーションロジックでコードを動的に分割することはできません。</target>
        </trans-unit>
        <trans-unit id="3015015faa2c4b220f1009b41ef17141d3ae9eb4" translate="yes" xml:space="preserve">
          <source>It might be useful to define your own function to control the behavior of what you want to externalize from webpack. &lt;a href=&quot;https://www.npmjs.com/package/webpack-node-externals&quot;&gt;webpack-node-externals&lt;/a&gt;, for example, excludes all modules from the &lt;code&gt;node_modules&lt;/code&gt; directory and provides some options to, for example, whitelist packages.</source>
          <target state="translated">独自の関数を定義して、webpackから外部化したいものの動作を制御すると便利な場合があります。たとえば、&lt;a href=&quot;https://www.npmjs.com/package/webpack-node-externals&quot;&gt;webpack-node-externals&lt;/a&gt;は、 &lt;code&gt;node_modules&lt;/code&gt; ディレクトリからすべてのモジュールを除外し、ホワイトリストパッケージなどにいくつかのオプションを提供します。</target>
        </trans-unit>
        <trans-unit id="4fb2a21242d1d0a81b89d79e88c46ad124f1bdad" translate="yes" xml:space="preserve">
          <source>It moves all the required &lt;code&gt;*.css&lt;/code&gt; modules in entry chunks into a separate CSS file. So your styles are no longer inlined into the JS bundle, but in a separate CSS file (&lt;code&gt;styles.css&lt;/code&gt;). If your total stylesheet volume is big, it will be faster because the CSS bundle is loaded in parallel to the JS bundle.</source>
          <target state="translated">エントリチャンク内の必要な &lt;code&gt;*.css&lt;/code&gt; モジュールをすべて別のCSSファイルに移動します。そのため、スタイルはJSバンドルにインライン化されず、別個のCSSファイル（ &lt;code&gt;styles.css&lt;/code&gt; ）にインライン化されます。スタイルシートの総量が大きい場合は、CSSバンドルがJSバンドルと並行してロードされるため、処理が速くなります。</target>
        </trans-unit>
        <trans-unit id="3f5a5d20ccf6738c768fb105c543d692e2ac1e59" translate="yes" xml:space="preserve">
          <source>It must have a &lt;code&gt;loader&lt;/code&gt; property being a string. It is resolved relative to the configuration &lt;a href=&quot;entry-context#context&quot;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/a&gt; with the loader resolving options (&lt;a href=&quot;resolve#resolveloader&quot;&gt;resolveLoader&lt;/a&gt;).</source>
          <target state="translated">文字列である &lt;code&gt;loader&lt;/code&gt; プロパティが必要です。これは、ローダー解決オプション（&lt;a href=&quot;resolve#resolveloader&quot;&gt;resolveLoader&lt;/a&gt;）を使用して、構成&lt;a href=&quot;entry-context#context&quot;&gt; &lt;code&gt;context&lt;/code&gt; &lt;/a&gt;して解決されます。</target>
        </trans-unit>
        <trans-unit id="a9d4986150e770e593c55c12460fe30c9199b023" translate="yes" xml:space="preserve">
          <source>It quickly becomes a hassle to manually run &lt;code&gt;npm run build&lt;/code&gt; every time you want to compile your code.</source>
          <target state="translated">コードをコンパイル &lt;code&gt;npm run build&lt;/code&gt; たびに、手動でnpm run buildを実行するのは面倒です。</target>
        </trans-unit>
        <trans-unit id="6ed050a376f8ab04112220eab818b80e08e0584f" translate="yes" xml:space="preserve">
          <source>It still exposes filenames and structure for decompiling, but it doesn't expose the original code.</source>
          <target state="translated">デコンパイルのためのファイル名や構造はまだ公開されていますが、元のコードは公開されていません。</target>
        </trans-unit>
        <trans-unit id="43221fc2c0c75bee1a5d58c386dd89120b0e941b" translate="yes" xml:space="preserve">
          <source>It sucks to</source>
          <target state="translated">それは嫌なことだ</target>
        </trans-unit>
        <trans-unit id="e2673009ce780bedf4f009dec8b37af8495aebb7" translate="yes" xml:space="preserve">
          <source>It will now only compile the bundle when &lt;code&gt;/bundle.js&lt;/code&gt; is requested.</source>
          <target state="translated">&lt;code&gt;/bundle.js&lt;/code&gt; が要求された場合にのみバンドルをコンパイルするようになりました。</target>
        </trans-unit>
        <trans-unit id="770e4336f1001b56c9f2fbd995023e0bfa70d8f8" translate="yes" xml:space="preserve">
          <source>It will then display timeline stats and calls per plugin!</source>
          <target state="translated">そして、プラグインごとにタイムラインの統計とコールを表示します!</target>
        </trans-unit>
        <trans-unit id="136331992793c5382781910c0a30f4daa21cb5ef" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s not allowed to watch or run again before the existing watcher has been closed or invalidated.</source>
          <target state="translated">既存のウォッチャーが閉じられるか無効になるまで、ウォッチまたは実行を再開することはできません。</target>
        </trans-unit>
        <trans-unit id="ff08921b0231db2c37fe597349ee2c2ce9f1514c" translate="yes" xml:space="preserve">
          <source>It's also good practice to extract third-party libraries, such as &lt;code&gt;lodash&lt;/code&gt; or &lt;code&gt;react&lt;/code&gt;, to a separate &lt;code&gt;vendor&lt;/code&gt; chunk as they are less likely to change than our local source code. This step will allow clients to request even less from the server to stay up to date. This can be done by using the &lt;a href=&quot;../plugins/split-chunks-plugin#splitchunks-cachegroups&quot;&gt;&lt;code&gt;cacheGroups&lt;/code&gt;&lt;/a&gt; option of the &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;&lt;code&gt;SplitChunksPlugin&lt;/code&gt;&lt;/a&gt; demonstrated in &lt;a href=&quot;../plugins/split-chunks-plugin#split-chunks-example-2&quot;&gt;Example 2 of SplitChunksPlugin&lt;/a&gt;. Lets add &lt;code&gt;optimization.splitChunks&lt;/code&gt; with &lt;code&gt;cacheGroups&lt;/code&gt; with next params and build:</source>
          <target state="translated">ローカルのソースコードよりも変更される可能性が低いため、 &lt;code&gt;lodash&lt;/code&gt; や &lt;code&gt;react&lt;/code&gt; などのサードパーティライブラリを別の &lt;code&gt;vendor&lt;/code&gt; チャンクに抽出することもお勧めします。この手順により、クライアントはサーバーに最新の状態を維持するための要求をさらに少なくすることができます。これは、&lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt; &lt;code&gt;SplitChunksPlugin&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;../plugins/split-chunks-plugin#split-chunks-example-2&quot;&gt;例2で&lt;/a&gt;示されている&lt;a href=&quot;../plugins/split-chunks-plugin#splitchunks-cachegroups&quot;&gt; &lt;code&gt;cacheGroups&lt;/code&gt; &lt;/a&gt;オプションを使用して実行できます。次の &lt;code&gt;cacheGroups&lt;/code&gt; でcacheGroupsを使用して &lt;code&gt;optimization.splitChunks&lt;/code&gt; を追加し、ビルドします。</target>
        </trans-unit>
        <trans-unit id="7b4360bf3a9e3a00e9323acec6366a5bd7b9adb0" translate="yes" xml:space="preserve">
          <source>It's also possible to add a URL &lt;code&gt;&amp;lt;link href=&quot;path/to/file.css&quot; rel=&quot;stylesheet&quot;&amp;gt;&lt;/code&gt; instead of inlining the CSS &lt;code&gt;{String}&lt;/code&gt; with &lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">CSS &lt;code&gt;{String}&lt;/code&gt; を &lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt; タグでインライン化する代わりに、URL &lt;code&gt;&amp;lt;link href=&quot;path/to/file.css&quot; rel=&quot;stylesheet&quot;&amp;gt;&lt;/code&gt; を追加することもできます。</target>
        </trans-unit>
        <trans-unit id="117a69d417526aee9a6fa34094b81f363a012c0a" translate="yes" xml:space="preserve">
          <source>It's important to only prepend it with &lt;code&gt;~&lt;/code&gt;, because &lt;code&gt;~/&lt;/code&gt; resolves to the home directory. webpack needs to distinguish between &lt;code&gt;bootstrap&lt;/code&gt; and &lt;code&gt;~bootstrap&lt;/code&gt; because CSS and Sass files have no special syntax for importing relative files. Writing &lt;code&gt;@import &quot;file&quot;&lt;/code&gt; is the same as &lt;code&gt;@import &quot;./file&quot;;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;~/&lt;/code&gt; はホームディレクトリに解決されるため、先頭に &lt;code&gt;~&lt;/code&gt; のみを付けることが重要です。WebPACKのは区別する必要があり &lt;code&gt;bootstrap&lt;/code&gt; や &lt;code&gt;~bootstrap&lt;/code&gt; CSSとSassのファイルは、相対ファイルをインポートするための特別な構文を持っていないので。書き込み &lt;code&gt;@import &quot;file&quot;&lt;/code&gt; と同じである &lt;code&gt;@import &quot;./file&quot;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c3f240443ca6a35b3157d5d3750520604dee1dc7" translate="yes" xml:space="preserve">
          <source>It's important to only prepend it with &lt;code&gt;~&lt;/code&gt;, because &lt;code&gt;~/&lt;/code&gt; resolves to the home-directory. webpack needs to distinguish between &lt;code&gt;bootstrap&lt;/code&gt; and &lt;code&gt;~bootstrap&lt;/code&gt;, because CSS and Less files have no special syntax for importing relative files. Writing &lt;code&gt;@import &quot;file&quot;&lt;/code&gt; is the same as &lt;code&gt;@import &quot;./file&quot;;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;~/&lt;/code&gt; はホームディレクトリに解決されるため、先頭に &lt;code&gt;~&lt;/code&gt; のみを付けることが重要です。WebPACKのは区別する必要があり &lt;code&gt;bootstrap&lt;/code&gt; や &lt;code&gt;~bootstrap&lt;/code&gt; CSSと少ないファイルは、相対ファイルをインポートするための特別な構文を持っていないので、。書き込み &lt;code&gt;@import &quot;file&quot;&lt;/code&gt; と同じである &lt;code&gt;@import &quot;./file&quot;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3af902d8e6f67e03f698bf291d2e2d5d5ecac826" translate="yes" xml:space="preserve">
          <source>It's possible to override any loaders in the configuration by prefixing the entire rule with &lt;code&gt;!&lt;/code&gt;.</source>
          <target state="translated">ルール全体の前に &lt;code&gt;!&lt;/code&gt; を付けることで、構成内のローダーをオーバーライドすることができます。。</target>
        </trans-unit>
        <trans-unit id="a7d59a9049b97ef16cb11a8e26f31d4497ce80a1" translate="yes" xml:space="preserve">
          <source>It's possible to specify loaders in an &lt;code&gt;import&lt;/code&gt; statement, or any &lt;a href=&quot;../api/module-methods&quot;&gt;equivalent &quot;importing&quot; method&lt;/a&gt;. Separate loaders from the resource with &lt;code&gt;!&lt;/code&gt;. Each part is resolved relative to the current directory.</source>
          <target state="translated">ローダーを &lt;code&gt;import&lt;/code&gt; ステートメントまたは&lt;a href=&quot;../api/module-methods&quot;&gt;同等の「インポート」メソッドで&lt;/a&gt;指定することが可能です。ローダーとリソースを &lt;code&gt;!&lt;/code&gt; 。各部分は、現在のディレクトリを基準にして解決されます。</target>
        </trans-unit>
        <trans-unit id="ff305bfecde39d42cab1a12ec4740bb342f18fca" translate="yes" xml:space="preserve">
          <source>It's recommended to combine &lt;code&gt;style-loader&lt;/code&gt; with the &lt;a href=&quot;css-loader&quot;&gt;&lt;code&gt;css-loader&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;style-loader&lt;/code&gt; と&lt;a href=&quot;css-loader&quot;&gt; &lt;code&gt;css-loader&lt;/code&gt; &lt;/a&gt;ローダーを組み合わせることをお勧めします</target>
        </trans-unit>
        <trans-unit id="031a4e76f0b39d0df073d934da5fc48da8d737e5" translate="yes" xml:space="preserve">
          <source>JSON</source>
          <target state="translated">JSON</target>
        </trans-unit>
        <trans-unit id="11e17b7ff5f01ffd4052941a6483e91b162c8636" translate="yes" xml:space="preserve">
          <source>JavaScript Module Systems Showdown</source>
          <target state="translated">JavaScriptモジュールシステムショーダウン</target>
        </trans-unit>
        <trans-unit id="1eb4e01cfa28dde84451ecf461596f5422495ed6" translate="yes" xml:space="preserve">
          <source>JsonpTemplatePlugin</source>
          <target state="translated">JsonpTemplatePlugin</target>
        </trans-unit>
        <trans-unit id="7c4991d6dc8748cd02cde6a9bcf3612734e22440" translate="yes" xml:space="preserve">
          <source>Just &lt;code&gt;require('webpack-stream')&lt;/code&gt; instead of &lt;code&gt;webpack&lt;/code&gt; and optionally pass it an configuration:</source>
          <target state="translated">ちょうど &lt;code&gt;require('webpack-stream')&lt;/code&gt; 代わり &lt;code&gt;webpack&lt;/code&gt; および任意にそれに設定を渡します。</target>
        </trans-unit>
        <trans-unit id="32e9b7a49d390dbfb9c27e74c5593acbe8bef69d" translate="yes" xml:space="preserve">
          <source>Just add the following plugin when building for production:</source>
          <target state="translated">本番用にビルドする際には、以下のプラグインを追加するだけでOKです。</target>
        </trans-unit>
        <trans-unit id="6ab0e0bd9561b09a12e44b9c5eaecf3e3f35bea0" translate="yes" xml:space="preserve">
          <source>Just provide the &lt;code&gt;mode&lt;/code&gt; option in the config:</source>
          <target state="translated">設定で &lt;code&gt;mode&lt;/code&gt; オプションを提供するだけです：</target>
        </trans-unit>
        <trans-unit id="835db6cf74c39f78cc6a89ccd0b07490be2e3f7d" translate="yes" xml:space="preserve">
          <source>Karma</source>
          <target state="translated">Karma</target>
        </trans-unit>
        <trans-unit id="d2b4618b6c686fe6f80c10a27208644197461fcf" translate="yes" xml:space="preserve">
          <source>Keep chunk size above the specified limit</source>
          <target state="translated">チャンクサイズを指定された制限値以上に保つ</target>
        </trans-unit>
        <trans-unit id="abaefcddeaf558e60fd417d4d1f9f81856efe680" translate="yes" xml:space="preserve">
          <source>Keep chunk size above the specified limit by merging chunks that are smaller than the &lt;code&gt;minChunkSize&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;minChunkSize&lt;/code&gt; より小さいチャンクをマージすることにより、チャンクサイズを指定された制限を超えないようにします。</target>
        </trans-unit>
        <trans-unit id="cdcacb5f8128ae6f265323b548336596dd384637" translate="yes" xml:space="preserve">
          <source>Keep in mind that this plugin will only be applied to &lt;a href=&quot;../api/module-methods#es6-recommended-&quot;&gt;ES6 modules&lt;/a&gt; processed directly by webpack. When using a transpiler, you'll need to disable module processing (e.g. the &lt;a href=&quot;https://babeljs.io/docs/plugins/preset-es2015/#optionsmodules&quot;&gt;&lt;code&gt;modules&lt;/code&gt;&lt;/a&gt; option in Babel).</source>
          <target state="translated">このプラグインは、webpackによって直接処理される&lt;a href=&quot;../api/module-methods#es6-recommended-&quot;&gt;ES6モジュールに&lt;/a&gt;のみ適用されることに注意してください。トランスパイラーを使用する場合は、モジュール処理を無効にする必要があります（Babelの&lt;a href=&quot;https://babeljs.io/docs/plugins/preset-es2015/#optionsmodules&quot;&gt; &lt;code&gt;modules&lt;/code&gt; &lt;/a&gt;オプションなど）。</target>
        </trans-unit>
        <trans-unit id="91cba252bffcda2cb733471f2bbdd20e8f0e1caa" translate="yes" xml:space="preserve">
          <source>Keep the &lt;code&gt;name&lt;/code&gt; consistent with &lt;a href=&quot;../configuration/output#output-library&quot;&gt;&lt;code&gt;output.library&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">キープ &lt;code&gt;name&lt;/code&gt; と一致&lt;a href=&quot;../configuration/output#output-library&quot;&gt; &lt;code&gt;output.library&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0398ccd0f49298b10a3d76a47800d2ebecd49859" translate="yes" xml:space="preserve">
          <source>LICENSE</source>
          <target state="translated">LICENSE</target>
        </trans-unit>
        <trans-unit id="14f06ba0b5725a831c619733de5b3d4a0c598682" translate="yes" xml:space="preserve">
          <source>Labeled Modules</source>
          <target state="translated">ラベル付きモジュール</target>
        </trans-unit>
        <trans-unit id="6853fbdad8b108d6fe7a268a59f82fa611432f32" translate="yes" xml:space="preserve">
          <source>LabeledModulesPlugin</source>
          <target state="translated">LabeledModulesPlugin</target>
        </trans-unit>
        <trans-unit id="db07be184479f34078cd4fc76d248dc0975720e9" translate="yes" xml:space="preserve">
          <source>Languages</source>
          <target state="translated">Languages</target>
        </trans-unit>
        <trans-unit id="5c3cbf7632d69cf215ab2098f34fa464c4de110a" translate="yes" xml:space="preserve">
          <source>Lastly, there are some modules that support multiple &lt;a href=&quot;../concepts/modules&quot;&gt;module styles&lt;/a&gt;; e.g. a combination of AMD, CommonJS, and legacy. In most of these cases, they first check for &lt;code&gt;define&lt;/code&gt; and then use some quirky code to export properties. In these cases, it could help to force the CommonJS path by setting &lt;code&gt;define=&amp;gt;false&lt;/code&gt; via the &lt;a href=&quot;../loaders/imports-loader&quot;&gt;&lt;code&gt;imports-loader&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">最後に、複数の&lt;a href=&quot;../concepts/modules&quot;&gt;モジュールスタイル&lt;/a&gt;をサポートするモジュールがいくつかあります。たとえば、AMD、CommonJS、およびレガシーの組み合わせ。これらのほとんどの場合、最初に &lt;code&gt;define&lt;/code&gt; をチェックしてから、風変わりなコードを使用してプロパティをエクスポートします。これらの場合、&lt;a href=&quot;../loaders/imports-loader&quot;&gt; &lt;code&gt;imports-loader&lt;/code&gt; を&lt;/a&gt;介して &lt;code&gt;define=&amp;gt;false&lt;/code&gt; を設定することで、CommonJSパスを強制するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="53a754e3d992d869269c4cb92a2837bbd5a07aee" translate="yes" xml:space="preserve">
          <source>Lazy Loading</source>
          <target state="translated">遅延読み込み</target>
        </trans-unit>
        <trans-unit id="a6814c4ce04cfb95ca6cbfcc3cc1eb059355893f" translate="yes" xml:space="preserve">
          <source>Lazy Loading ES2015 Modules in the Browser</source>
          <target state="translated">ブラウザでES2015モジュールの読み込みを怠る</target>
        </trans-unit>
        <trans-unit id="924e9b7ee1750df1b4535a32bfa737603c8f6140" translate="yes" xml:space="preserve">
          <source>Lazy, or &quot;on demand&quot;, loading is a great way to optimize your site or application. This practice essentially involves splitting your code at logical breakpoints, and then loading it once the user has done something that requires, or will require, a new block of code. This speeds up the initial load of the application and lightens its overall weight as some blocks may never even be loaded.</source>
          <target state="translated">遅延読み込み、つまり「オンデマンド」は、サイトやアプリケーションを最適化するための素晴らしい方法です。この方法は、基本的には論理的なブレークポイントでコードを分割し、ユーザーが新しいコードブロックを必要とする、またはこれから必要とする何かを行ったときに、コードをロードします。これにより、アプリケーションの初期ロードを高速化し、一部のブロックは決してロードされないため、全体の重量を軽くすることができます。</target>
        </trans-unit>
        <trans-unit id="4ba79d94f0b82183e33f6b32baf653086df24f6a" translate="yes" xml:space="preserve">
          <source>Learn how &lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt; works.</source>
          <target state="translated">&lt;a href=&quot;../concepts/mode&quot;&gt;モードの&lt;/a&gt;仕組みをご覧ください。</target>
        </trans-unit>
        <trans-unit id="ca68b1ffeac8bb76bbc1d874030bcd8e3208d565" translate="yes" xml:space="preserve">
          <source>Learn more about JavaScript modules and webpack modules &lt;a href=&quot;modules&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">JavaScriptモジュールとWebpackモジュールの詳細については、&lt;a href=&quot;modules&quot;&gt;こちらをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1d9b670b9c5644eb0eb99c62c6822bbac5029afd" translate="yes" xml:space="preserve">
          <source>Learn more about loaders!</source>
          <target state="translated">ローダーについてもっと詳しく!</target>
        </trans-unit>
        <trans-unit id="25e4664e6b481a9acbe6acaf8e0e30c725c89359" translate="yes" xml:space="preserve">
          <source>Learn more about modules!</source>
          <target state="translated">モジュールの詳細はこちら!</target>
        </trans-unit>
        <trans-unit id="981293c63de50a4b82c306939fa56898c25be66f" translate="yes" xml:space="preserve">
          <source>Learn more about plugins!</source>
          <target state="translated">プラグインについてもっと詳しく!</target>
        </trans-unit>
        <trans-unit id="6c2378dd02b67a4699cabc2adc239ce15d1c39d6" translate="yes" xml:space="preserve">
          <source>Learn more about the &lt;a href=&quot;mode&quot;&gt;mode configuration here&lt;/a&gt; and what optimizations take place on each value.</source>
          <target state="translated">&lt;a href=&quot;mode&quot;&gt;ここ&lt;/a&gt;でモード構成の詳細と、各値でどの最適化が行われるかを確認してください。</target>
        </trans-unit>
        <trans-unit id="71802cc29fa08933c8a912cfebb99454b2f8aec2" translate="yes" xml:space="preserve">
          <source>Learn more about the CLI!</source>
          <target state="translated">CLIについてもっと詳しく!</target>
        </trans-unit>
        <trans-unit id="61149dfe1def596200b4820edbb47dbc0266a116" translate="yes" xml:space="preserve">
          <source>Learn more about the Node API!</source>
          <target state="translated">Node API の詳細についてはこちらをご覧ください!</target>
        </trans-unit>
        <trans-unit id="060660781c00c37e702af0748b2353c43ca45835" translate="yes" xml:space="preserve">
          <source>Learn more in the &lt;a href=&quot;entry-points&quot;&gt;entry points&lt;/a&gt; section.</source>
          <target state="translated">詳細については、&lt;a href=&quot;entry-points&quot;&gt;エントリポイントの&lt;/a&gt;セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="526cb7425ab8d8d55c981974917cba26fab9834e" translate="yes" xml:space="preserve">
          <source>Less</source>
          <target state="translated">Less</target>
        </trans-unit>
        <trans-unit id="c396dc3238368f1bf29085d3e3aa680459f65daa" translate="yes" xml:space="preserve">
          <source>Less resolver</source>
          <target state="translated">レゾルバが少ない</target>
        </trans-unit>
        <trans-unit id="b59060f93296c7da767d26fcb68bf783287278fd" translate="yes" xml:space="preserve">
          <source>Let's add a new utility file to our project, &lt;code&gt;src/math.js&lt;/code&gt;, that exports two functions:</source>
          <target state="translated">2つの関数をエクスポートする新しいユーティリティファイル &lt;code&gt;src/math.js&lt;/code&gt; をプロジェクトに追加しましょう。</target>
        </trans-unit>
        <trans-unit id="200c218f1107d3bf9e02a4512147e1192f1039e9" translate="yes" xml:space="preserve">
          <source>Let's add a script to easily run the dev server as well:</source>
          <target state="translated">開発サーバも簡単に実行できるようにスクリプトを追加してみましょう。</target>
        </trans-unit>
        <trans-unit id="c54500b14535b89ad68efa849b9d7c70f6ba0231" translate="yes" xml:space="preserve">
          <source>Let's add an image to our project and see how this works, you can use any image you like:</source>
          <target state="translated">プロジェクトに画像を追加して、どのように動作するか見てみましょう。</target>
        </trans-unit>
        <trans-unit id="864ab2c557696cdcedbb70daf234bbfba7f78a8a" translate="yes" xml:space="preserve">
          <source>Let's add an npm script that will start webpack's Watch Mode:</source>
          <target state="translated">webpackのWatch Modeを起動するnpmスクリプトを追加してみましょう。</target>
        </trans-unit>
        <trans-unit id="9d231761296ef683bf2ba9352fb7cbff2f3e657f" translate="yes" xml:space="preserve">
          <source>Let's add another module, &lt;code&gt;print.js&lt;/code&gt;, to our project:</source>
          <target state="translated">プロジェクトに別のモジュール &lt;code&gt;print.js&lt;/code&gt; を追加してみましょう。</target>
        </trans-unit>
        <trans-unit id="ace53f42c74d245c863b6c55ab81662641f6c56d" translate="yes" xml:space="preserve">
          <source>Let's add some logic to our &lt;code&gt;src/print.js&lt;/code&gt; file:</source>
          <target state="translated">&lt;code&gt;src/print.js&lt;/code&gt; ファイルにロジックを追加してみましょう。</target>
        </trans-unit>
        <trans-unit id="cfba9b600ffa0d5c1b8bf48328f6711afba973bc" translate="yes" xml:space="preserve">
          <source>Let's add the Workbox webpack plugin and adjust the &lt;code&gt;webpack.config.js&lt;/code&gt; file:</source>
          <target state="translated">Workbox webpackプラグインを追加して、 &lt;code&gt;webpack.config.js&lt;/code&gt; ファイルを調整してみましょう。</target>
        </trans-unit>
        <trans-unit id="1a520e9c759609254074e7f9aef08bb59f0e8a30" translate="yes" xml:space="preserve">
          <source>Let's allow our Service Worker to come out and play by registering it. We'll do that by adding the registration code below:</source>
          <target state="translated">登録してサービスワーカーが出てきて遊べるようにしよう そのためには下の登録コードを追加します。</target>
        </trans-unit>
        <trans-unit id="d19df46c6e4ea1fe766d1f81d551d3dd9bb6a8f0" translate="yes" xml:space="preserve">
          <source>Let's also update our &lt;code&gt;dist/index.html&lt;/code&gt; file, in preparation for webpack to split out entries:</source>
          <target state="translated">webpackがエントリを分割する準備として、 &lt;code&gt;dist/index.html&lt;/code&gt; ファイルも更新しましょう：</target>
        </trans-unit>
        <trans-unit id="1066d88aac816a03bf9ea21e38bdb3e6f07556db" translate="yes" xml:space="preserve">
          <source>Let's assume that you are writing a small library ,&lt;code&gt;webpack-numbers&lt;/code&gt;, that allows users to convert the numbers 1 through 5 from their numeric representation to a textual one and vice-versa, e.g. 2 to 'two'.</source>
          <target state="translated">小さなライブラリ &lt;code&gt;webpack-numbers&lt;/code&gt; を作成していて、ユーザーが1から5までの数値を数値表現からテキストの1に、またはその逆に変換できるようにするとします（例：2から '2'）。</target>
        </trans-unit>
        <trans-unit id="25e443793999c258c40a1ecc9d929d9fcb895c4d" translate="yes" xml:space="preserve">
          <source>Let's create a new build and open up the index.html file again:</source>
          <target state="translated">新しいビルドを作成して、再度index.htmlファイルを開いてみましょう。</target>
        </trans-unit>
        <trans-unit id="0dd35e22c0195a54682143b20cd7e5d594f3f00f" translate="yes" xml:space="preserve">
          <source>Let's get our project set up using the example from &lt;a href=&quot;getting-started&quot;&gt;getting started&lt;/a&gt; with the &lt;code&gt;plugins&lt;/code&gt; from &lt;a href=&quot;output-management&quot;&gt;output management&lt;/a&gt;, so we don't have to deal with maintaining our &lt;code&gt;index.html&lt;/code&gt; file manually:</source>
          <target state="translated">私たちのプロジェクトはより例使用して設定しましょう&lt;a href=&quot;getting-started&quot;&gt;始めたばかり&lt;/a&gt;で &lt;code&gt;plugins&lt;/code&gt; からの&lt;a href=&quot;output-management&quot;&gt;出力管理を&lt;/a&gt;私たちは維持に対処する必要はありませんので、 &lt;code&gt;index.html&lt;/code&gt; のファイルを手動で：</target>
        </trans-unit>
        <trans-unit id="c21715b06a69e1e53a376a9bde7c09697189c336" translate="yes" xml:space="preserve">
          <source>Let's go through some different viewpoints to understand exactly how HMR works...</source>
          <target state="translated">HMRがどのように機能するかを正確に理解するために、いくつかの異なる視点から見てみましょう...</target>
        </trans-unit>
        <trans-unit id="4892d9bcf4690995186c028ca774b0bf83fec124" translate="yes" xml:space="preserve">
          <source>Let's imagine a component &lt;code&gt;ChartComponent&lt;/code&gt; which needs huge &lt;code&gt;ChartingLibrary&lt;/code&gt;. It displays a &lt;code&gt;LoadingIndicator&lt;/code&gt; when rendered and instantly does an on demand import of &lt;code&gt;ChartingLibrary&lt;/code&gt;:</source>
          <target state="translated">大きな &lt;code&gt;ChartingLibrary&lt;/code&gt; を必要とするコンポーネント &lt;code&gt;ChartComponent&lt;/code&gt; を想像してみましょう。レンダリング時に &lt;code&gt;LoadingIndicator&lt;/code&gt; を表示し、 &lt;code&gt;ChartingLibrary&lt;/code&gt; のオンデマンドインポートを即座に実行します。</target>
        </trans-unit>
        <trans-unit id="ef98ad0e4e5dc323a57bc97909fb5e5349a2eac3" translate="yes" xml:space="preserve">
          <source>Let's install &lt;code&gt;express&lt;/code&gt; and &lt;code&gt;webpack-dev-middleware&lt;/code&gt; so we can get started:</source>
          <target state="translated">&lt;code&gt;express&lt;/code&gt; と &lt;code&gt;webpack-dev-middleware&lt;/code&gt; をインストールして、始めましょう。</target>
        </trans-unit>
        <trans-unit id="8faada5ce22391dd10d1415dea88312392993bd9" translate="yes" xml:space="preserve">
          <source>Let's investigate the result when running the previous &lt;code&gt;EnvironmentPlugin&lt;/code&gt; configuration on a test file &lt;code&gt;entry.js&lt;/code&gt;:</source>
          <target state="translated">テストファイル &lt;code&gt;entry.js&lt;/code&gt; で以前の &lt;code&gt;EnvironmentPlugin&lt;/code&gt; 構成を実行したときの結果を調べてみましょう。</target>
        </trans-unit>
        <trans-unit id="0ba2bc2cbca42426e914f018d1807fcbce85333e" translate="yes" xml:space="preserve">
          <source>Let's make a minor change to our project before we get started:</source>
          <target state="translated">プロジェクトを始める前に、ちょっとした変更を加えてみましょう。</target>
        </trans-unit>
        <trans-unit id="590a0cf7cc81843fe3251841264d0e9ae677a277" translate="yes" xml:space="preserve">
          <source>Let's move on to &lt;a href=&quot;output-management&quot;&gt;Output Management&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;output-management&quot;&gt;出力管理に&lt;/a&gt;移りましょう</target>
        </trans-unit>
        <trans-unit id="c3125c87401ba053c594b21408d66ca55db7045a" translate="yes" xml:space="preserve">
          <source>Let's move our &lt;code&gt;import&lt;/code&gt; to a new file and add the &lt;a href=&quot;https://github.com/github/fetch&quot;&gt;&lt;code&gt;whatwg-fetch&lt;/code&gt;&lt;/a&gt; polyfill:</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; を新しいファイルに移動して、whatwg &lt;a href=&quot;https://github.com/github/fetch&quot;&gt; &lt;code&gt;whatwg-fetch&lt;/code&gt; &lt;/a&gt; polyfill を追加しましょう。</target>
        </trans-unit>
        <trans-unit id="de9be29e070239fa61fbe9fde651678f8af4fecb" translate="yes" xml:space="preserve">
          <source>Let's run &lt;code&gt;npm run build&lt;/code&gt; and see what this generates:</source>
          <target state="translated">&lt;code&gt;npm run build&lt;/code&gt; を実行して、これが何を生成するかを見てみましょう：</target>
        </trans-unit>
        <trans-unit id="05b4091ebfe585ae03159d738539e58072f2cc91" translate="yes" xml:space="preserve">
          <source>Let's run another build to see our new &lt;code&gt;vendor&lt;/code&gt; bundle:</source>
          <target state="translated">別のビルドを実行して、新しい &lt;code&gt;vendor&lt;/code&gt; バンドルを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="23616ff7b451fb065dfd47b0c7c28b3535ab4f2f" translate="yes" xml:space="preserve">
          <source>Let's run another build to see the extracted &lt;code&gt;runtime&lt;/code&gt; bundle:</source>
          <target state="translated">別のビルドを実行して、抽出された &lt;code&gt;runtime&lt;/code&gt; バンドルを確認しましょう。</target>
        </trans-unit>
        <trans-unit id="4c2c46a7029c196da23bacb642ca9d22f9c691bf" translate="yes" xml:space="preserve">
          <source>Let's say a library creates a global variable that it expects its consumers to use. We can add a small module to our setup to demonstrate this:</source>
          <target state="translated">ライブラリが消費者に使用してもらうグローバル変数を作成したとしましょう。これを実証するために、小さなモジュールを設定に追加することができます。</target>
        </trans-unit>
        <trans-unit id="776d07f8864f55d567475975ff8c87e0521fdf09" translate="yes" xml:space="preserve">
          <source>Let's say you also want to expose it as &lt;code&gt;window.jQuery&lt;/code&gt; in addition to &lt;code&gt;window.$&lt;/code&gt;. For multiple expose you can use &lt;code&gt;!&lt;/code&gt; in loader string:</source>
          <target state="translated">&lt;code&gt;window.$&lt;/code&gt; に加えて &lt;code&gt;window.jQuery&lt;/code&gt; としても公開したいとします。複数の公開には、使用できます &lt;code&gt;!&lt;/code&gt; ローダー文字列内：</target>
        </trans-unit>
        <trans-unit id="10dd09185683439beae7b26603169e5b51b0f80d" translate="yes" xml:space="preserve">
          <source>Let's set up a simple configuration to support JSX and compile TypeScript down to ES5...</source>
          <target state="translated">JSXをサポートするための簡単な設定をして、TypeScriptをES5までコンパイルしてみましょう...。</target>
        </trans-unit>
        <trans-unit id="f59258da6cc89b2e4be16b8392b42cf322f93e52" translate="yes" xml:space="preserve">
          <source>Let's start by clearing up a common misconception. webpack is a module bundler like &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt; or &lt;a href=&quot;http://brunch.io/&quot;&gt;Brunch&lt;/a&gt;. It is &lt;em&gt;not a task runner&lt;/em&gt; like &lt;a href=&quot;https://www.gnu.org/software/make/&quot;&gt;Make&lt;/a&gt;, &lt;a href=&quot;https://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt;, or &lt;a href=&quot;https://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt;. Task runners handle automation of common development tasks such as linting, building, or testing your project. Compared to bundlers, task runners have a higher level focus. You can still benefit from their higher level tooling while leaving the problem of bundling to webpack.</source>
          <target state="translated">一般的な誤解を解消するところから始めましょう。webpackは、&lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt;や&lt;a href=&quot;http://brunch.io/&quot;&gt;Brunchの&lt;/a&gt;ようなモジュールバンドルです。これは、ある&lt;em&gt;タスクのランナーではない&lt;/em&gt;ような&lt;a href=&quot;https://www.gnu.org/software/make/&quot;&gt;メイク&lt;/a&gt;、&lt;a href=&quot;https://gruntjs.com/&quot;&gt;うなり声&lt;/a&gt;、または&lt;a href=&quot;https://gulpjs.com/&quot;&gt;がぶ飲み&lt;/a&gt;。タスクランナーは、プロジェクトのリンティング、ビルド、テストなどの一般的な開発タスクの自動化を処理します。バンドラーと比較して、タスクランナーはより高いレベルの焦点を持っています。バンドルの問題をwebpackに任せながら、それらのより高いレベルのツールから利益を得ることができます。</target>
        </trans-unit>
        <trans-unit id="853f3c6d86100a64c1d5dec13779e87d731f7334" translate="yes" xml:space="preserve">
          <source>Let's start by going over &lt;code&gt;tapable&lt;/code&gt; utility, which provides the backbone of webpack's plugin interface.</source>
          <target state="translated">&lt;code&gt;tapable&lt;/code&gt; 、webpackのプラグインインターフェースのバックボーンを提供するTapable Utilityから見ていきましょう。</target>
        </trans-unit>
        <trans-unit id="14634cbd80692f23d4c30ffb14a82bc46651c8b4" translate="yes" xml:space="preserve">
          <source>Let's start by installing &lt;code&gt;webpack-merge&lt;/code&gt; and splitting out the bits we've already worked on in previous guides:</source>
          <target state="translated">まず、 &lt;code&gt;webpack-merge&lt;/code&gt; をインストールして、以前のガイドですでに取り組んだビットを分割します。</target>
        </trans-unit>
        <trans-unit id="9402911d7f68b5de2aae4313daf24baa2ef78c11" translate="yes" xml:space="preserve">
          <source>Let's start with the first use case of shimming global variables. Before we do anything let's take another look at our project:</source>
          <target state="translated">グローバル変数をシムする最初の使用例から始めましょう。何かをする前に、私たちのプロジェクトをもう一度見てみましょう。</target>
        </trans-unit>
        <trans-unit id="1585320b59b8f2a00c80a5a11f4429712661343d" translate="yes" xml:space="preserve">
          <source>Let's take the example from &lt;a href=&quot;code-splitting#dynamic-imports&quot;&gt;Code Splitting&lt;/a&gt; and tweak it a bit to demonstrate this concept even more. The code there does cause a separate chunk, &lt;code&gt;lodash.bundle.js&lt;/code&gt;, to be generated and technically &quot;lazy-loads&quot; it as soon as the script is run. The trouble is that no user interaction is required to load the bundle -- meaning that every time the page is loaded, the request will fire. This doesn't help us too much and will impact performance negatively.</source>
          <target state="translated">&lt;a href=&quot;code-splitting#dynamic-imports&quot;&gt;コードスプリッティング&lt;/a&gt;の例を取り上げ、少し調整して、この概念をさらに詳しく説明します。そこのコードでは、スクリプトが実行されるとすぐに、別個のチャンク &lt;code&gt;lodash.bundle.js&lt;/code&gt; が生成され、技術的にそれが「遅延ロード」されます。問題は、バンドルを読み込むためにユーザーの操作が必要ないことです。つまり、ページが読み込まれるたびに、リクエストが発生します。これはあまり役に立たず、パフォーマンスに悪影響を及ぼします。</target>
        </trans-unit>
        <trans-unit id="f2575ec6a173ba3f717e212116d79db29ba7ccfe" translate="yes" xml:space="preserve">
          <source>Let's try it out by adding a new &lt;code&gt;style.css&lt;/code&gt; file to our project and import it in our &lt;code&gt;index.js&lt;/code&gt;:</source>
          <target state="translated">プロジェクトに新しい &lt;code&gt;style.css&lt;/code&gt; ファイルを追加して試して、 &lt;code&gt;index.js&lt;/code&gt; にインポートしてみましょう。</target>
        </trans-unit>
        <trans-unit id="6df435dd142351e74c95d5af3dddef706ca77152" translate="yes" xml:space="preserve">
          <source>Let's try something different. We'll add an interaction to log some text to the console when the user clicks a button. However, we'll wait to load that code (&lt;code&gt;print.js&lt;/code&gt;) until the interaction occurs for the first time. To do this we'll go back and rework the &lt;a href=&quot;code-splitting#dynamic-imports&quot;&gt;final &lt;em&gt;Dynamic Imports&lt;/em&gt; example&lt;/a&gt; from &lt;em&gt;Code Splitting&lt;/em&gt; and leave &lt;code&gt;lodash&lt;/code&gt; in the main chunk.</source>
          <target state="translated">別のことを試してみましょう。ユーザーがボタンをクリックしたときにコンソールにテキストを記録するインタラクションを追加します。ただし、最初に対話が行われるまで、そのコード（ &lt;code&gt;print.js&lt;/code&gt; ）のロードを待機します。これを行うには、&lt;em&gt;コードスプリッティングの&lt;/em&gt;&lt;a href=&quot;code-splitting#dynamic-imports&quot;&gt;最後の&lt;em&gt;ダイナミックインポートの&lt;/em&gt;例に&lt;/a&gt; &lt;code&gt;lodash&lt;/code&gt; 、メインチャンクにロダッシュを残します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4cf925ca2a61ded049c2b9c8be2bc04d2c7c78d6" translate="yes" xml:space="preserve">
          <source>Let's use webpack to manage these scripts instead.</source>
          <target state="translated">代わりにwebpackを使ってこれらのスクリプトを管理してみましょう。</target>
        </trans-unit>
        <trans-unit id="bda3cf2b1330f7df4e9c4ba482d22eceea1029f9" translate="yes" xml:space="preserve">
          <source>Library authors usually provide a variable to modify the asset path. &lt;a href=&quot;https://github.com/twbs/bootstrap-sass&quot;&gt;bootstrap-sass&lt;/a&gt; for example has an &lt;code&gt;$icon-font-path&lt;/code&gt;. Check out &lt;a href=&quot;https://github.com/webpack-contrib/sass-loader/tree/master/test/bootstrapSass&quot;&gt;this working bootstrap example&lt;/a&gt;.</source>
          <target state="translated">ライブラリの作成者は通常、アセットパスを変更するための変数を提供します。たとえば、&lt;a href=&quot;https://github.com/twbs/bootstrap-sass&quot;&gt;bootstrap-sass&lt;/a&gt;には &lt;code&gt;$icon-font-path&lt;/code&gt; 。&lt;a href=&quot;https://github.com/webpack-contrib/sass-loader/tree/master/test/bootstrapSass&quot;&gt;この実際のブートストラップの例を&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="75de8b5f4d779f5ae4944b0b52b4a9235709f44e" translate="yes" xml:space="preserve">
          <source>LibraryTemplatePlugin</source>
          <target state="translated">LibraryTemplatePlugin</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">License</target>
        </trans-unit>
        <trans-unit id="e91f6ba4ec02c67a796600daa345b1a2b526d763" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution License 4.0.</source>
          <target state="translated">クリエイティブ・コモンズ表示ライセンス4.0の下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="4a5d4d2895ae726d72e5f60e0d638c0f774d38d3" translate="yes" xml:space="preserve">
          <source>Limit the number of parallel processed modules. Can be used to fine tune performance or to get more reliable profiling results.</source>
          <target state="translated">並列処理されるモジュールの数を制限します。パフォーマンスを微調整したり、より信頼性の高いプロファイリング結果を得るために使用できます。</target>
        </trans-unit>
        <trans-unit id="a2a1222d76b80e7fd40844198be5e6873ecfac18" translate="yes" xml:space="preserve">
          <source>LimitChunkCountPlugin</source>
          <target state="translated">LimitChunkCountPlugin</target>
        </trans-unit>
        <trans-unit id="1f273f732af71f6c5621f77b602d8a6107ab34b1" translate="yes" xml:space="preserve">
          <source>Lint only changed files, skip lint on start.</source>
          <target state="translated">Lintはファイルを変更しただけで、起動時にはlintをスキップします。</target>
        </trans-unit>
        <trans-unit id="042b641dbb2ed8580d6aab21f1462f4a56a9e95e" translate="yes" xml:space="preserve">
          <source>Linting &amp;amp;&amp;amp; Testing</source>
          <target state="translated">Linting &amp;amp;&amp;amp; Testing</target>
        </trans-unit>
        <trans-unit id="dd1a72a677627588b1d87c98301583e3fa88eba4" translate="yes" xml:space="preserve">
          <source>Live Coding a Simple Module Bundler</source>
          <target state="translated">シンプルなモジュールバンドルのライブコーディング</target>
        </trans-unit>
        <trans-unit id="2625ad5d0ca254becb883641b39ae3e49eb232ca" translate="yes" xml:space="preserve">
          <source>Load this &lt;a href=&quot;../configuration/plugins&quot;&gt;plugin&lt;/a&gt;</source>
          <target state="translated">この&lt;a href=&quot;../configuration/plugins&quot;&gt;プラグインを&lt;/a&gt;ロード</target>
        </trans-unit>
        <trans-unit id="ec6f9069daa80029e880d76fc3bf6a0698a7d554" translate="yes" xml:space="preserve">
          <source>Loader</source>
          <target state="translated">Loader</target>
        </trans-unit>
        <trans-unit id="59fb9ad81b2126251218e6a1c17e8241d9602293" translate="yes" xml:space="preserve">
          <source>Loader API</source>
          <target state="translated">ローダAPI</target>
        </trans-unit>
        <trans-unit id="9e2a0de698da089eb7b79cf5a0a40fcafc427211" translate="yes" xml:space="preserve">
          <source>Loader API: this._compilation</source>
          <target state="translated">ローダAPI:this._compilation</target>
        </trans-unit>
        <trans-unit id="5e2dcf6c1a83820afd8fd70db164d7a1e38909a4" translate="yes" xml:space="preserve">
          <source>Loader API: this._compiler</source>
          <target state="translated">ローダAPI:this._compiler</target>
        </trans-unit>
        <trans-unit id="5fb3803d469519b6d21e613d1a1169c63e62dd7c" translate="yes" xml:space="preserve">
          <source>Loader API: this._module</source>
          <target state="translated">ローダAPI:this._module</target>
        </trans-unit>
        <trans-unit id="113c7b9eb07500696d46f9ae51649861c0da2675" translate="yes" xml:space="preserve">
          <source>Loader API: this.addContextDependency</source>
          <target state="translated">ローダAPI:this.addContextDependency</target>
        </trans-unit>
        <trans-unit id="3f1e2a84ac5e1d8f14b9d349efedeb644b5152cc" translate="yes" xml:space="preserve">
          <source>Loader API: this.addDependency</source>
          <target state="translated">ローダAPI:this.addDependency</target>
        </trans-unit>
        <trans-unit id="8e7dc3d534226c57937ea44296ee1c9e5ec56fbc" translate="yes" xml:space="preserve">
          <source>Loader API: this.async</source>
          <target state="translated">ローダAPI:this.async</target>
        </trans-unit>
        <trans-unit id="fcc91e71938e158b9223db640e97018e2374a36c" translate="yes" xml:space="preserve">
          <source>Loader API: this.cacheable</source>
          <target state="translated">ローダAPI:this.cacheable</target>
        </trans-unit>
        <trans-unit id="72f1f415951644307715108bc0d9be6d0ef998f9" translate="yes" xml:space="preserve">
          <source>Loader API: this.callback</source>
          <target state="translated">ローダAPI:this.callback</target>
        </trans-unit>
        <trans-unit id="0e91f66b9006e6f4f27bb836f73f9ce44049a31d" translate="yes" xml:space="preserve">
          <source>Loader API: this.clearDependencies</source>
          <target state="translated">ローダAPI:this.clearDependencies</target>
        </trans-unit>
        <trans-unit id="63d74e02be6e015c4d9ef7e65e9af01a69711eb1" translate="yes" xml:space="preserve">
          <source>Loader API: this.context</source>
          <target state="translated">ローダAPI:this.context</target>
        </trans-unit>
        <trans-unit id="4b44f05dd995d5ea0c52b17be7e2cbb84c43ffb8" translate="yes" xml:space="preserve">
          <source>Loader API: this.data</source>
          <target state="translated">ローダAPI:this.data</target>
        </trans-unit>
        <trans-unit id="d33ff0f4b42beba7ad47650ec9c94e6418684a7f" translate="yes" xml:space="preserve">
          <source>Loader API: this.debug</source>
          <target state="translated">ローダ API:this.debug</target>
        </trans-unit>
        <trans-unit id="51d260cd4b5d9c5c6c75fc839dd502007fab69dc" translate="yes" xml:space="preserve">
          <source>Loader API: this.emitError</source>
          <target state="translated">ローダAPI:this.emitError</target>
        </trans-unit>
        <trans-unit id="5e494538e939a2022e7f5a208d648bf015cd4b79" translate="yes" xml:space="preserve">
          <source>Loader API: this.emitFile</source>
          <target state="translated">ローダAPI:this.emitFile</target>
        </trans-unit>
        <trans-unit id="b5cb7c7a6af52d7a23c91198c55b188be1b4a7ee" translate="yes" xml:space="preserve">
          <source>Loader API: this.emitWarning</source>
          <target state="translated">ローダAPI:this.emitWarning</target>
        </trans-unit>
        <trans-unit id="860c8f3daa795ad6feee54ed91625fce5cdbe719" translate="yes" xml:space="preserve">
          <source>Loader API: this.exec</source>
          <target state="translated">ローダAPI:this.exec</target>
        </trans-unit>
        <trans-unit id="c8322deb3164815c4863bec78ce481557c0803ed" translate="yes" xml:space="preserve">
          <source>Loader API: this.fs</source>
          <target state="translated">ローダAPI:this.fs</target>
        </trans-unit>
        <trans-unit id="2552f2f9f4456818ae2f6223067ca63d3092ee5f" translate="yes" xml:space="preserve">
          <source>Loader API: this.inputValue</source>
          <target state="translated">ローダAPI:this.inputValue</target>
        </trans-unit>
        <trans-unit id="1e5192027d81543759982da99ac9e159d9344b75" translate="yes" xml:space="preserve">
          <source>Loader API: this.loadModule</source>
          <target state="translated">ローダAPI:this.loadModule</target>
        </trans-unit>
        <trans-unit id="72bd55d0b6d300698178acb035877306b51468f8" translate="yes" xml:space="preserve">
          <source>Loader API: this.loaderIndex</source>
          <target state="translated">ローダ API:this.loaderIndex</target>
        </trans-unit>
        <trans-unit id="416c1d88614507c0345ef8198254c4130b148e9a" translate="yes" xml:space="preserve">
          <source>Loader API: this.loaders</source>
          <target state="translated">ローダAPI:this.loaders</target>
        </trans-unit>
        <trans-unit id="d527d43de2f36195cb26f48ca1c4ea9289f254c5" translate="yes" xml:space="preserve">
          <source>Loader API: this.minimize</source>
          <target state="translated">ローダAPI:this.minimize</target>
        </trans-unit>
        <trans-unit id="2d906042fe4b7b912e5db074680bb62d469d3d2d" translate="yes" xml:space="preserve">
          <source>Loader API: this.options</source>
          <target state="translated">ローダAPI:this.options</target>
        </trans-unit>
        <trans-unit id="f404fb748ceb73e72f3bd4e22ae713596ae4b0db" translate="yes" xml:space="preserve">
          <source>Loader API: this.query</source>
          <target state="translated">ローダAPI:this.query</target>
        </trans-unit>
        <trans-unit id="814cbe955ad67ec34eff69a545e136570fe3fe5b" translate="yes" xml:space="preserve">
          <source>Loader API: this.request</source>
          <target state="translated">ローダAPI:this.request</target>
        </trans-unit>
        <trans-unit id="23d5a5e6ea8d847afb18a0758dd8dec816437495" translate="yes" xml:space="preserve">
          <source>Loader API: this.resolve</source>
          <target state="translated">ローダAPI:this.resolve</target>
        </trans-unit>
        <trans-unit id="5d495b55aaf42f0e8e9721d0f71d35a7f70e4394" translate="yes" xml:space="preserve">
          <source>Loader API: this.resolveSync</source>
          <target state="translated">ローダAPI:this.resolveSync</target>
        </trans-unit>
        <trans-unit id="fa7a331766145671012dde09e34bbf9f409dd9af" translate="yes" xml:space="preserve">
          <source>Loader API: this.resource</source>
          <target state="translated">ローダAPI:this.resource</target>
        </trans-unit>
        <trans-unit id="248a9d34f750087194073bb4591f638e28becc8d" translate="yes" xml:space="preserve">
          <source>Loader API: this.resourcePath</source>
          <target state="translated">ローダAPI:this.resourcePath</target>
        </trans-unit>
        <trans-unit id="99f061dc8f80ae78b2aa8f530bd7042cb8675a71" translate="yes" xml:space="preserve">
          <source>Loader API: this.resourceQuery</source>
          <target state="translated">ローダAPI:this.resourceQuery</target>
        </trans-unit>
        <trans-unit id="45b84155f359bf710da1cfb9c23ea0f4a2424be3" translate="yes" xml:space="preserve">
          <source>Loader API: this.rootContext</source>
          <target state="translated">ローダAPI:this.rootContext</target>
        </trans-unit>
        <trans-unit id="f81f422249588113fa2f3592581e12aa3de00b0f" translate="yes" xml:space="preserve">
          <source>Loader API: this.sourceMap</source>
          <target state="translated">ローダAPI:this.sourceMap</target>
        </trans-unit>
        <trans-unit id="1089d0ca8d4710d2da54c93dac1cfbd2a4162e0b" translate="yes" xml:space="preserve">
          <source>Loader API: this.target</source>
          <target state="translated">ローダAPI:this.target</target>
        </trans-unit>
        <trans-unit id="0cfe16073d2288f5c25f52c42bf7092e9c927abd" translate="yes" xml:space="preserve">
          <source>Loader API: this.value</source>
          <target state="translated">ローダAPI:this.value</target>
        </trans-unit>
        <trans-unit id="97857623be671d98299df6e485fc69b5fa569a45" translate="yes" xml:space="preserve">
          <source>Loader API: this.version</source>
          <target state="translated">ローダAPI:this.version</target>
        </trans-unit>
        <trans-unit id="6e8ef33826832f7d3ca753b4f83081faf1a720f6" translate="yes" xml:space="preserve">
          <source>Loader API: this.webpack</source>
          <target state="translated">ローダAPI:this.webpack</target>
        </trans-unit>
        <trans-unit id="7b06b231c21bbc554c52089970417ff2a72db3a4" translate="yes" xml:space="preserve">
          <source>Loader Features</source>
          <target state="translated">ローダ機能</target>
        </trans-unit>
        <trans-unit id="66b67d98b64f11182f0bdc43d2a1f8afe67ea42c" translate="yes" xml:space="preserve">
          <source>Loader accepts a function that will have one argument: an array of eslint messages (object). The function must return the output as a string. You can use official eslint formatters.</source>
          <target state="translated">ローダは、一つの引数を持つ関数を受け付けます:eslint メッセージの配列 (オブジェクト)。この関数は出力を文字列として返さなければなりません。公式の eslint フォーマッタを使うことができます。</target>
        </trans-unit>
        <trans-unit id="436c4d54c32af7fd571edb588d9ec92b480977c7" translate="yes" xml:space="preserve">
          <source>Loader for &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt; to process CSS with &lt;a href=&quot;https://postcss.org/&quot;&gt;PostCSS&lt;/a&gt;</source>
          <target state="translated">ローダ&lt;a href=&quot;https://webpack.js.org/&quot;&gt;のWebPACK&lt;/a&gt;とプロセスのCSSに&lt;a href=&quot;https://postcss.org/&quot;&gt;PostCSS&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="82e923b83d068def294e84ed0af39ef4d9d65f07" translate="yes" xml:space="preserve">
          <source>Loader will always return errors if this option is set to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">このオプションが &lt;code&gt;true&lt;/code&gt; に設定されている場合、ローダーは常にエラーを返します。</target>
        </trans-unit>
        <trans-unit id="97b5d99571d04e3ad13b05b4a25e852af90802b2" translate="yes" xml:space="preserve">
          <source>Loader will always return warnings if option is set to &lt;code&gt;true&lt;/code&gt;. If you're using hot module replacement, you may wish to enable this in development, or else updates will be skipped when there's an eslint error.</source>
          <target state="translated">オプションが &lt;code&gt;true&lt;/code&gt; に設定されている場合、ローダーは常に警告を返します。ホットモジュール置換を使用している場合は、開発時にこれを有効にすることをお勧めします。そうしないと、eslintエラーが発生したときに更新がスキップされます。</target>
        </trans-unit>
        <trans-unit id="fab75d863e028cfcbf3711da868849b30047bb42" translate="yes" xml:space="preserve">
          <source>Loader will cause the module build to fail if there are any eslint errors.</source>
          <target state="translated">ローダはESLINTエラーがあるとモジュールのビルドに失敗します。</target>
        </trans-unit>
        <trans-unit id="2ebbee483dc69b53b99f32cc324cae36920adb68" translate="yes" xml:space="preserve">
          <source>Loader will cause the module build to fail if there are any eslint warnings.</source>
          <target state="translated">ローダはeslintの警告があるとモジュールのビルドに失敗します。</target>
        </trans-unit>
        <trans-unit id="3ee4f2745233b1cb94ac8dfea64274f33a717f4e" translate="yes" xml:space="preserve">
          <source>Loader will process and report errors only and ignore warnings if this option is set to true</source>
          <target state="translated">このオプションがtrueに設定されている場合、ローダーはエラーのみを処理して報告し、警告を無視します。</target>
        </trans-unit>
        <trans-unit id="ce0bbf0a349ce71616c6f3a7a81100b1cf27a8e7" translate="yes" xml:space="preserve">
          <source>Loader(s) that should be used for converting the resource to a CSS exporting module &lt;em&gt;(required)&lt;/em&gt;</source>
          <target state="translated">リソースをCSSエクスポートモジュールに変換するために使用するローダー（&lt;em&gt;必須）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5f4800e7ed94d46f7c8508b1f61aa9b4acd16f4e" translate="yes" xml:space="preserve">
          <source>Loader: Resolves a webpack &lt;a href=&quot;https://webpack.js.org/loaders&quot;&gt;loader&lt;/a&gt;.</source>
          <target state="translated">ローダー：webpack &lt;a href=&quot;https://webpack.js.org/loaders&quot;&gt;ローダーを&lt;/a&gt;解決します。</target>
        </trans-unit>
        <trans-unit id="4cd722a1b5bd5ee06349060aa953bbaed56cee36" translate="yes" xml:space="preserve">
          <source>LoaderOptionsPlugin</source>
          <target state="translated">LoaderOptionsPlugin</target>
        </trans-unit>
        <trans-unit id="4f514b04ed6b877534da140af8e12cab5016f713" translate="yes" xml:space="preserve">
          <source>Loaders</source>
          <target state="translated">Loaders</target>
        </trans-unit>
        <trans-unit id="c591e4a3bcf5ed00d18d81e617c16d9f9fea20ec" translate="yes" xml:space="preserve">
          <source>Loaders allow more power in the JavaScript ecosystem through preprocessing functions (loaders). Users now have more flexibility to include fine-grained logic such as compression, packaging, language translations and &lt;a href=&quot;https://webpack.js.org/loaders&quot;&gt;more&lt;/a&gt;.</source>
          <target state="translated">ローダーは、前処理関数（ローダー）を通じてJavaScriptエコシステムでより多くのパワーを許可します。ユーザーは、このような圧縮、梱包、言語翻訳としてきめの細かいロジックを含めるために、より柔軟性を持っている&lt;a href=&quot;https://webpack.js.org/loaders&quot;&gt;より&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a2826b8c59f1bc048b2d92251e589df2220343e5" translate="yes" xml:space="preserve">
          <source>Loaders are &lt;strong&gt;always&lt;/strong&gt; called from right to left. There are some instances where the loader only cares about the &lt;strong&gt;metadata&lt;/strong&gt; behind a request and can ignore the results of the previous loader. The &lt;code&gt;pitch&lt;/code&gt; method on loaders is called from &lt;strong&gt;left to right&lt;/strong&gt; before the loaders are actually executed (from right to left). For the following &lt;a href=&quot;../configuration/module#rule-use&quot;&gt;&lt;code&gt;use&lt;/code&gt;&lt;/a&gt; configuration:</source>
          <target state="translated">ローダーは&lt;strong&gt;常に&lt;/strong&gt;右から左に呼び出されます。ローダーが要求の背後にある&lt;strong&gt;メタデータ&lt;/strong&gt;のみを処理し、前のローダーの結果を無視できる場合があります。ローダーの &lt;code&gt;pitch&lt;/code&gt; メソッドは、ローダーが実際に実行される前に（右から左に）&lt;strong&gt;左から右&lt;/strong&gt;に呼び出されます。次の&lt;a href=&quot;../configuration/module#rule-use&quot;&gt; &lt;code&gt;use&lt;/code&gt; &lt;/a&gt;構成の場合：</target>
        </trans-unit>
        <trans-unit id="85433a4ab3591548b068d016fbf8d4c3304e1339" translate="yes" xml:space="preserve">
          <source>Loaders are activated by using &lt;code&gt;loadername!&lt;/code&gt; prefixes in &lt;code&gt;require()&lt;/code&gt; statements, or are automatically applied via regex from your webpack configuration &amp;ndash; see &lt;a href=&quot;../concepts/loaders#configuration&quot;&gt;configuration&lt;/a&gt;.</source>
          <target state="translated">ローダーは &lt;code&gt;loadername!&lt;/code&gt; を使用してアクティブ化されます！ &lt;code&gt;require()&lt;/code&gt; のプレフィックスステートメントの、またはWebpack構成から正規表現を介して自動的に適用されます&amp;ndash; &lt;a href=&quot;../concepts/loaders#configuration&quot;&gt;構成を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9d2a9298a789b09dae9bd81b1e23298018b33574" translate="yes" xml:space="preserve">
          <source>Loaders are evaluated/executed from right to left. In the example below execution starts with sass-loader, continues with css-loader and finally ends with style-loader. See &lt;a href=&quot;loaders#loader-features&quot;&gt;&quot;Loader Features&quot;&lt;/a&gt; for more information about loaders order.</source>
          <target state="translated">ローダーは右から左に評価/実行されます。以下の例では、実行はsass-loaderで始まり、css-loaderで続き、最後にstyle-loaderで終わります。見る&lt;a href=&quot;loaders#loader-features&quot;&gt;&lt;/a&gt;ローダーの順序の「ローダーの機能」を。</target>
        </trans-unit>
        <trans-unit id="85b2e5448f629cca6f3e4053499aa492264405ec" translate="yes" xml:space="preserve">
          <source>Loaders are transformations that are applied on the source code of a module. They allow you to pre-process files as you &lt;code&gt;import&lt;/code&gt; or &amp;ldquo;load&amp;rdquo; them. Thus, loaders are kind of like &amp;ldquo;tasks&amp;rdquo; in other build tools and provide a powerful way to handle front-end build steps. Loaders can transform files from a different language (like TypeScript) to JavaScript or inline images as data URLs. Loaders even allow you to do things like &lt;code&gt;import&lt;/code&gt; CSS files directly from your JavaScript modules!</source>
          <target state="translated">ローダーは、モジュールのソースコードに適用される変換です。これらを使用すると、ファイルを &lt;code&gt;import&lt;/code&gt; または「ロード」するときにファイルを前処理できます。したがって、ローダーは他のビルドツールの「タスク」のようなものであり、フロントエンドのビルドステップを処理する強力な方法を提供します。ローダーは、ファイルを別の言語（TypeScriptなど）からJavaScriptまたはインライン画像にデータURLとして変換できます。ローダーを使用すると、JavaScriptモジュールから直接CSSファイルを &lt;code&gt;import&lt;/code&gt; することもできます。</target>
        </trans-unit>
        <trans-unit id="105163e4c40315ef5103b9b810764f9517ba6631" translate="yes" xml:space="preserve">
          <source>Loaders are transformations that are applied to the source code of a module. They are written as functions that accept source code as a parameter and return a new version of that code with transformations applied.</source>
          <target state="translated">ローダとは、モジュールのソースコードに適用される変換のことです。これらは、ソースコードをパラメータとして受け取り、変換を適用した新しいバージョンのコードを返す関数として書かれています。</target>
        </trans-unit>
        <trans-unit id="4492533e2228d71b3b96dc5a018cc4fea5628474" translate="yes" xml:space="preserve">
          <source>Loaders can be chained by passing multiple loaders, which will be applied from right to left (last to first configured).</source>
          <target state="translated">複数のローダーを渡すことでローダーを連鎖させることができ、右から左(最後から最初に設定されたもの)に適用されます。</target>
        </trans-unit>
        <trans-unit id="1847aee657a68a67aa5b0d9bc1513fcf39b92a1e" translate="yes" xml:space="preserve">
          <source>Loaders can be chained. Each loader in the chain applies transformations to the processed resource. A chain is executed in reverse order. The first loader passes its result (resource with applied transformations) to the next one, and so forth. Finally, webpack expects JavaScript to be returned by the last loader in the chain.</source>
          <target state="translated">ローダは連鎖させることができます。チェーン内の各ローダーは、処理されたリソースに変換を適用します。チェーンは逆順に実行されます。最初のローダーはその結果 (変換を適用したリソース)を次のローダーに渡します。最後に、webpack は JavaScript がチェーン内の最後のローダーによって返されることを期待します。</target>
        </trans-unit>
        <trans-unit id="9992fe8ca23caa87dd6c06cc85034e1179a05711" translate="yes" xml:space="preserve">
          <source>Loaders can be configured with an &lt;code&gt;options&lt;/code&gt; object (using &lt;code&gt;query&lt;/code&gt; parameters to set options is still supported but has been deprecated).</source>
          <target state="translated">ローダーは、 &lt;code&gt;options&lt;/code&gt; オブジェクトを使用して構成できます（ &lt;code&gt;query&lt;/code&gt; パラメーターを使用してオプションを設定することは引き続きサポートされますが、廃止されました）。</target>
        </trans-unit>
        <trans-unit id="7cae65951a547f19a78fea06bfee949d1d0c7429" translate="yes" xml:space="preserve">
          <source>Loaders can be synchronous or asynchronous.</source>
          <target state="translated">ローダは同期または非同期のどちらでも構いません。</target>
        </trans-unit>
        <trans-unit id="3a4ffaac9a5d00e6d97999f76c729bfda323f67d" translate="yes" xml:space="preserve">
          <source>Loaders can emit additional arbitrary files.</source>
          <target state="translated">ローダは任意のファイルを追加で出力することができます。</target>
        </trans-unit>
        <trans-unit id="1f7061ffc9f99eccda64c580b1a06d220651d256" translate="yes" xml:space="preserve">
          <source>Loaders cannot access the webpack options.</source>
          <target state="translated">ローダはwebpackのオプションにアクセスできません。</target>
        </trans-unit>
        <trans-unit id="f1fbfd5a9c44d1d16d4fe66fb905eb642dbf48c2" translate="yes" xml:space="preserve">
          <source>Loaders cannot emit files.</source>
          <target state="translated">ローダはファイルをエミットできません。</target>
        </trans-unit>
        <trans-unit id="7eb0c6a6e419b2eb666eba1f3916c0671c3bda22" translate="yes" xml:space="preserve">
          <source>Loaders cannot use custom loader API (i. e. by plugins).</source>
          <target state="translated">ローダーはカスタムローダーAPIを使用することができません(プラグインによる)。</target>
        </trans-unit>
        <trans-unit id="c2f940e33799a662cb1ad30c183523d439fd0dd0" translate="yes" xml:space="preserve">
          <source>Loaders follow the standard &lt;a href=&quot;module-resolution&quot;&gt;module resolution&lt;/a&gt;. In most cases it will be loaders from the &lt;a href=&quot;module-resolution#module-paths&quot;&gt;module path&lt;/a&gt; (think &lt;code&gt;npm install&lt;/code&gt;, &lt;code&gt;node_modules&lt;/code&gt;).</source>
          <target state="translated">ローダーは標準&lt;a href=&quot;module-resolution&quot;&gt;モジュールの解像度に&lt;/a&gt;従います。ほとんどの場合、それは&lt;a href=&quot;module-resolution#module-paths&quot;&gt;モジュールパス&lt;/a&gt;からのローダーになります（ &lt;code&gt;npm install&lt;/code&gt; と考えてください、 &lt;code&gt;node_modules&lt;/code&gt; ください）。</target>
        </trans-unit>
        <trans-unit id="81be1d2631fc99d0ffb905518327d6bdea76da2d" translate="yes" xml:space="preserve">
          <source>Loaders run in Node.js and can do everything that&amp;rsquo;s possible there.</source>
          <target state="translated">ローダーはNode.jsで実行され、そこで可能なすべてのことを実行できます。</target>
        </trans-unit>
        <trans-unit id="af3ff785372e184c720ab72e8d8e6b85f3adc643" translate="yes" xml:space="preserve">
          <source>Loaders running in a worker pool are limited. Examples:</source>
          <target state="translated">ワーカープールで実行されるローダーは制限されています。例を示します。</target>
        </trans-unit>
        <trans-unit id="df05e5496cc277768c81c08b1521d94c41cf93b8" translate="yes" xml:space="preserve">
          <source>Loaders were originally designed to also work as Babel transforms. Therefore if you write a loader that works for both, you can use this property to know if there is access to additional loaderContext and webpack features.</source>
          <target state="translated">ローダはもともとバベル変換としても動作するように設計されています。そのため、両方で動作するローダーを書いた場合は、このプロパティを使用して loaderContext と webpack の追加機能にアクセスできるかどうかを知ることができます。</target>
        </trans-unit>
        <trans-unit id="47a1fe72d58084ada50b31d636dfc360f476ba49" translate="yes" xml:space="preserve">
          <source>Loaders were originally designed to work in synchronous loader pipelines, like Node.js (using &lt;a href=&quot;https://github.com/webpack/enhanced-require&quot;&gt;enhanced-require&lt;/a&gt;), &lt;em&gt;and&lt;/em&gt; asynchronous pipelines, like in webpack. However, since expensive synchronous computations are a bad idea in a single-threaded environment like Node.js, we advise to make your loader asynchronously if possible. Synchronous loaders are ok if the amount of computation is trivial.</source>
          <target state="translated">ローダーはもともと、Node.jsのように（使用して同期ローダパイプラインで動作するように設計された&lt;a href=&quot;https://github.com/webpack/enhanced-require&quot;&gt;、必要の増強&lt;/a&gt;）、&lt;em&gt;および&lt;/em&gt; WebPACKの中のように、非同期パイプライン。ただし、Node.jsのようなシングルスレッド環境では、高価な同期計算はお勧めできないため、可能であればローダーを非同期にすることをお勧めします。計算量が少ない場合は、同期ローダーは問題ありません。</target>
        </trans-unit>
        <trans-unit id="3e683799b6440bfdb45ff32020713072b7ad918e" translate="yes" xml:space="preserve">
          <source>Loading CSS</source>
          <target state="translated">CSSの読み込み</target>
        </trans-unit>
        <trans-unit id="1bbec1f2925e33de29cc103440eaad38ddc86d8c" translate="yes" xml:space="preserve">
          <source>Loading Data</source>
          <target state="translated">データの読み込み</target>
        </trans-unit>
        <trans-unit id="7d51e9a993f0136e10372f7e9d94384de46c4c08" translate="yes" xml:space="preserve">
          <source>Loading Fonts</source>
          <target state="translated">フォントの読み込み</target>
        </trans-unit>
        <trans-unit id="f7a4ff542e1f688b5141f8e55e1a09aeafc365ff" translate="yes" xml:space="preserve">
          <source>Loading Images</source>
          <target state="translated">画像の読み込み</target>
        </trans-unit>
        <trans-unit id="b71d9c5c490fb3ace55aaa4475ed74cd92ebc250" translate="yes" xml:space="preserve">
          <source>Loading Polyfills</source>
          <target state="translated">ポリフィルの読み込み</target>
        </trans-unit>
        <trans-unit id="e3759a5621c7d8e195efc7544602f9a59f770ecf" translate="yes" xml:space="preserve">
          <source>Loads &lt;a href=&quot;https://coffeescript.org/&quot;&gt;CoffeeScript&lt;/a&gt; like JavaScript</source>
          <target state="translated">JavaScriptのように&lt;a href=&quot;https://coffeescript.org/&quot;&gt;CoffeeScriptを&lt;/a&gt;ロードします</target>
        </trans-unit>
        <trans-unit id="95e1bd68466cd0f30bcf915449c36761daa19154" translate="yes" xml:space="preserve">
          <source>Loads a Sass/SCSS file and compiles it to CSS.</source>
          <target state="translated">Sass/SCSSファイルを読み込み、CSSにコンパイルします。</target>
        </trans-unit>
        <trans-unit id="6b2904edad9c782e3b8dc05eb8a40a537ce14354" translate="yes" xml:space="preserve">
          <source>Loads the imported bundle asynchronously</source>
          <target state="translated">インポートされたバンドルを非同期にロードします。</target>
        </trans-unit>
        <trans-unit id="a845830aac9034a343422233c2c770f1f95e729e" translate="yes" xml:space="preserve">
          <source>Local Installation</source>
          <target state="translated">現地での設置</target>
        </trans-unit>
        <trans-unit id="e2f503db9aa3949f0c591890ed93126bd2b337b2" translate="yes" xml:space="preserve">
          <source>Locking Down Your Website Scripts with CSP, Hashes, Nonces and Report URI</source>
          <target state="translated">CSP、ハッシュ、Nonces、およびレポート URI を使用したウェブサイトスクリプトのロックダウン</target>
        </trans-unit>
        <trans-unit id="6499a1321bf7c41ee0316581d5232990396dc1f7" translate="yes" xml:space="preserve">
          <source>Long Term Caching</source>
          <target state="translated">長期キャッシング</target>
        </trans-unit>
        <trans-unit id="00f3ff48131c599bc893a3fab182268b3f63b83d" translate="yes" xml:space="preserve">
          <source>Longer compilation time</source>
          <target state="translated">コンパイル時間が長い</target>
        </trans-unit>
        <trans-unit id="89690ac571dcf4c9c40c842efed3f11171d07b29" translate="yes" xml:space="preserve">
          <source>MIT</source>
          <target state="translated">MIT</target>
        </trans-unit>
        <trans-unit id="f9cfe0891192e57a66acda3a681bb6fc527e509f" translate="yes" xml:space="preserve">
          <source>MIT (&lt;a href=&quot;http://www.opensource.org/licenses/mit-license.php&quot;&gt;http://www.opensource.org/licenses/mit-license.php&lt;/a&gt;)</source>
          <target state="translated">MIT（&lt;a href=&quot;http://www.opensource.org/licenses/mit-license.php&quot;&gt; http://www.opensource.org/licenses/mit-license.php&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="3a814d392b75feac12692e66d6c20d77a8369430" translate="yes" xml:space="preserve">
          <source>Make all exports from the dependency available in the current scope. The &lt;code&gt;require&lt;/code&gt; label can occur before a string. The dependency must export values with the &lt;code&gt;export&lt;/code&gt; label. CommonJS or AMD modules cannot be consumed.</source>
          <target state="translated">依存関係からのすべてのエクスポートを現在のスコープで使用できるようにします。 &lt;code&gt;require&lt;/code&gt; ラベルは、文字列の前に発生する可能性があります。依存性がで値をエクスポートする必要があり &lt;code&gt;export&lt;/code&gt; ラベルを使用。CommonJSまたはAMDモジュールは使用できません。</target>
        </trans-unit>
        <trans-unit id="5b29ac58651e9cdaefcfd5d8e27916e8b2719912" translate="yes" xml:space="preserve">
          <source>Make sure &lt;code&gt;publicPath&lt;/code&gt; always starts and ends with a forward slash.</source>
          <target state="translated">&lt;code&gt;publicPath&lt;/code&gt; を確認してください常にスラッシュで開始および終了する。</target>
        </trans-unit>
        <trans-unit id="8d8a0220d8bd55d5aa0014b7718826f3edb161c8" translate="yes" xml:space="preserve">
          <source>Make sure that the hashing function will have &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;digest&lt;/code&gt; methods available.</source>
          <target state="translated">ハッシュ関数に &lt;code&gt;update&lt;/code&gt; と &lt;code&gt;digest&lt;/code&gt; があることを確認してくださいメソッドを使用できる。</target>
        </trans-unit>
        <trans-unit id="80ca581877d75fc77f1d3afdd7b023e6302f9de5" translate="yes" xml:space="preserve">
          <source>Make sure the entry chunk is cheap to emit by keeping it small. The following code block extracts a chunk containing only the runtime with &lt;em&gt;all other chunks as children&lt;/em&gt;:</source>
          <target state="translated">エントリチャンクを小さく保つことで、安価にエミットできるようにします。次のコードブロックは&lt;em&gt;、他のすべてのチャンクを子として&lt;/em&gt;持つランタイムのみを含むチャンクを抽出します&lt;em&gt;&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="822583219da604edb033971af307b5c77720f385" translate="yes" xml:space="preserve">
          <source>Make sure to have a &lt;code&gt;webpack.config.js&lt;/code&gt; file. If you haven't already, use this as a minimal example to get started:</source>
          <target state="translated">必ず &lt;code&gt;webpack.config.js&lt;/code&gt; を用意してくださいファイル。まだ行っていない場合は、これを最小限の例として使用して開始してください。</target>
        </trans-unit>
        <trans-unit id="946510ee236f1819da59b74df08b6c7513b1e8b6" translate="yes" xml:space="preserve">
          <source>Make sure to read the &lt;a href=&quot;../guides/caching&quot;&gt;Caching guide&lt;/a&gt; for details. There are more steps involved than just setting this option.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../guides/caching&quot;&gt;キャッシングガイド&lt;/a&gt;を必ずお読みください。このオプションを設定するだけでなく、より多くの手順が必要になります。</target>
        </trans-unit>
        <trans-unit id="eb7f65d09dd256be015476f59d3999b13b6a1f01" translate="yes" xml:space="preserve">
          <source>Make sure you are transforming as few files as possible. Because you are probably matching &lt;code&gt;/\.js$/&lt;/code&gt;, you might be transforming the &lt;code&gt;node_modules&lt;/code&gt; folder or other unwanted source.</source>
          <target state="translated">変換するファイルをできるだけ少なくしてください。おそらく &lt;code&gt;/\.js$/&lt;/code&gt; に一致しているため、 &lt;code&gt;node_modules&lt;/code&gt; フォルダーまたはその他の不要なソースを変換している可能性があります。</target>
        </trans-unit>
        <trans-unit id="f6280c01bee59d3b53076e6acddc249d8696da16" translate="yes" xml:space="preserve">
          <source>Make webpack_public_path, webpack_require, webpack_modules and webpack_chunk_load accessible. Ensures that &lt;code&gt;require.valueOf&lt;/code&gt; and &lt;code&gt;require.onError&lt;/code&gt; are not processed by other plugins.</source>
          <target state="translated">webpack_public_path、webpack_require、webpack_modules、webpack_chunk_loadにアクセスできるようにします。確実に &lt;code&gt;require.valueOf&lt;/code&gt; と &lt;code&gt;require.onError&lt;/code&gt; は、他のプラグインによって処理されていません。</target>
        </trans-unit>
        <trans-unit id="5e0acb01ff22fcc4a87589193b7ce051d619e6d0" translate="yes" xml:space="preserve">
          <source>Management API</source>
          <target state="translated">かんりエーピーアイ</target>
        </trans-unit>
        <trans-unit id="e63e4519432a184f2c433088dda29083ad55f057" translate="yes" xml:space="preserve">
          <source>Manifest</source>
          <target state="translated">Manifest</target>
        </trans-unit>
        <trans-unit id="ca8b8b1969d3152a412da63d28e3ba85c007c8b9" translate="yes" xml:space="preserve">
          <source>Manifest file</source>
          <target state="translated">マニフェストファイル</target>
        </trans-unit>
        <trans-unit id="87f354d46c42fbfb1bf5c0671d9c6ee8315ef72f" translate="yes" xml:space="preserve">
          <source>ManifestPlugin source</source>
          <target state="translated">ソースマニフェストプラグイン</target>
        </trans-unit>
        <trans-unit id="6e60b4736a71b102618c37faacacdef5579361f4" translate="yes" xml:space="preserve">
          <source>Manually Bundling an Application</source>
          <target state="translated">アプリケーションを手動でバンドルする</target>
        </trans-unit>
        <trans-unit id="5b2b1ee7a308a1557b02668d7c099c79efcc8803" translate="yes" xml:space="preserve">
          <source>Many frameworks and libraries have their own recommendations on how this should be accomplished within their methodologies. Here are a few examples:</source>
          <target state="translated">多くのフレームワークやライブラリは、その方法論の中でどのようにこれを実現すべきかについて独自の推奨事項を持っています。ここではいくつかの例を紹介します。</target>
        </trans-unit>
        <trans-unit id="f9f96c5a8fb4fc499147bb5f30b9e2af4b9ea3d7" translate="yes" xml:space="preserve">
          <source>Many libraries will key off the &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; variable to determine what should be included in the library. For example, when not in &lt;em&gt;production&lt;/em&gt; some libraries may add additional logging and testing to make debugging easier. However, with &lt;code&gt;process.env.NODE_ENV === 'production'&lt;/code&gt; they might drop or add significant portions of code to optimize how things run for your actual users. Since webpack v4, specifying &lt;a href=&quot;../concepts/mode&quot;&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/a&gt; automatically configures &lt;a href=&quot;../plugins/define-plugin&quot;&gt;&lt;code&gt;DefinePlugin&lt;/code&gt;&lt;/a&gt; for you:</source>
          <target state="translated">多くのライブラリは、ライブラリに何を含める必要があるかを決定するために、 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; 変数をキーオフします。たとえば、&lt;em&gt;本番&lt;/em&gt;環境にない場合、一部のライブラリでは、デバッグを容易にするために追加のロギングとテストが追加される場合があります。ただし、 &lt;code&gt;process.env.NODE_ENV === 'production'&lt;/code&gt; を使用すると、コードのかなりの部分を削除または追加して、実際のユーザーに対する実行方法を最適化できます。 webpack v4以降、&lt;a href=&quot;../concepts/mode&quot;&gt; &lt;code&gt;mode&lt;/code&gt; &lt;/a&gt;指定すると、&lt;a href=&quot;../plugins/define-plugin&quot;&gt; &lt;code&gt;DefinePlugin&lt;/code&gt; &lt;/a&gt;が自動的に構成されます。</target>
        </trans-unit>
        <trans-unit id="6d780701301972713cdbc0ae3c7389b66619eebb" translate="yes" xml:space="preserve">
          <source>Mapped Mode</source>
          <target state="translated">マップされたモード</target>
        </trans-unit>
        <trans-unit id="618608e69b340a9be424c8115af4e3f3a5860027" translate="yes" xml:space="preserve">
          <source>Mark the file as side-effect-free</source>
          <target state="translated">副作用のないファイルにマークを付ける</target>
        </trans-unit>
        <trans-unit id="417a27fd94237019eac2aeb48145618064ce770e" translate="yes" xml:space="preserve">
          <source>Maximum number of parallel requests at an entry point.</source>
          <target state="translated">エントリポイントでの並列リクエストの最大数。</target>
        </trans-unit>
        <trans-unit id="39b4b99fb5a7c36ca7c820930ef486c0de5aa72d" translate="yes" xml:space="preserve">
          <source>Maximum number of parallel requests at initial page load would be lower or equal to 3</source>
          <target state="translated">最初のページロード時の最大並列リクエスト数が3以下であること</target>
        </trans-unit>
        <trans-unit id="4acff09df4af5d153c122c644a57ed6cbb73ab80" translate="yes" xml:space="preserve">
          <source>Maximum number of parallel requests when loading chunks on demand would be lower or equal to 5</source>
          <target state="translated">チャンクをオンデマンドでロードする場合の最大並列リクエスト数が5以下の場合</target>
        </trans-unit>
        <trans-unit id="53e5d801cf66de5587e63c1241deca456bf33b9b" translate="yes" xml:space="preserve">
          <source>Maximum number of parallel requests when on-demand loading.</source>
          <target state="translated">オンデマンドロード時の最大並列リクエスト数。</target>
        </trans-unit>
        <trans-unit id="0aeceb4e4aabcb87b823ae720128ab6afd46bbe4" translate="yes" xml:space="preserve">
          <source>May or may not have a performance benefit since the incremental build times are pretty fast.</source>
          <target state="translated">インクリメンタルなビルド時間はかなり速いので、パフォーマンス上のメリットがあるかもしれないし、ないかもしれません。</target>
        </trans-unit>
        <trans-unit id="1866f4cdcdf728e084eb4ddfe898153c121f9828" translate="yes" xml:space="preserve">
          <source>Merge chunks limit chunk count is lower than &lt;code&gt;options.maxChunks&lt;/code&gt;.</source>
          <target state="translated">マージチャンクの制限チャンク数が &lt;code&gt;options.maxChunks&lt;/code&gt; 未満です。</target>
        </trans-unit>
        <trans-unit id="72c15c26b1be17ec93256af96a27f44809134b52" translate="yes" xml:space="preserve">
          <source>MergeDuplicateChunksPlugin</source>
          <target state="translated">MergeDuplicateChunksPlugin</target>
        </trans-unit>
        <trans-unit id="6b2944822c2268fc33a870d79c11dc89f6d193c3" translate="yes" xml:space="preserve">
          <source>Merges chunks until each chunk has the minimum size of &lt;code&gt;minChunkSize&lt;/code&gt;.</source>
          <target state="translated">各チャンクの最小サイズが &lt;code&gt;minChunkSize&lt;/code&gt; になるまで、チャンクをマージします。</target>
        </trans-unit>
        <trans-unit id="bd8872c1945c6f1032933a096e68ec27f1eff364" translate="yes" xml:space="preserve">
          <source>Mimicking django's &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;, a value beginning with &lt;code&gt;.&lt;/code&gt; can be used as a subdomain wildcard. &lt;code&gt;.host.com&lt;/code&gt; will match &lt;code&gt;host.com&lt;/code&gt;, &lt;code&gt;www.host.com&lt;/code&gt;, and any other subdomain of &lt;code&gt;host.com&lt;/code&gt;.</source>
          <target state="translated">djangoの &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; を模倣してい &lt;code&gt;.&lt;/code&gt; 値はで始まります。サブドメインのワイルドカードとして使用できます。 &lt;code&gt;.host.com&lt;/code&gt; は、 &lt;code&gt;host.com&lt;/code&gt; 、 &lt;code&gt;www.host.com&lt;/code&gt; 、およびhost.comの他のサブドメインと &lt;code&gt;host.com&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="897d2e3b770f8d706d0588208662011475130755" translate="yes" xml:space="preserve">
          <source>MinChunkSizePlugin</source>
          <target state="translated">MinChunkSizePlugin</target>
        </trans-unit>
        <trans-unit id="23b5f7513083e7dfd8776fabc70196ac391d848d" translate="yes" xml:space="preserve">
          <source>MiniCssExtractPlugin</source>
          <target state="translated">MiniCssExtractPlugin</target>
        </trans-unit>
        <trans-unit id="7a3ea5ae4bbcb0b6c68d07df01c97a3626e4c95d" translate="yes" xml:space="preserve">
          <source>Minification</source>
          <target state="translated">Minification</target>
        </trans-unit>
        <trans-unit id="e530b56795c0e4512b9667907810a828b4609938" translate="yes" xml:space="preserve">
          <source>Minification with &lt;a href=&quot;https://github.com/babel/minify&quot;&gt;babel-minify&lt;/a&gt;</source>
          <target state="translated">縮小&lt;a href=&quot;https://github.com/babel/minify&quot;&gt;バベル、縮小化&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="107d6db35d646d528c9a51a63651dabd529d73be" translate="yes" xml:space="preserve">
          <source>Minify the Output</source>
          <target state="translated">出力を最小化する</target>
        </trans-unit>
        <trans-unit id="fcbb0549ad4161e42e588161939dc9c2778e58f5" translate="yes" xml:space="preserve">
          <source>Minimal Entry Chunk</source>
          <target state="translated">最小入力チャンク</target>
        </trans-unit>
        <trans-unit id="4c9b2f2cc924fdc5ae54de76fd616b11e14910ae" translate="yes" xml:space="preserve">
          <source>Minimal example</source>
          <target state="translated">最小限の例</target>
        </trans-unit>
        <trans-unit id="cbffcdb92559ac9186d82d2c23b42f651fca8808" translate="yes" xml:space="preserve">
          <source>Minimize CSS</source>
          <target state="translated">CSSの最小化</target>
        </trans-unit>
        <trans-unit id="20c5acdf828152e49115784fc07b87c2d883e33d" translate="yes" xml:space="preserve">
          <source>Minimize javascript and switches loaders to minimizing</source>
          <target state="translated">javascriptを最小化し、ローダを最小化するようにスイッチを入れる</target>
        </trans-unit>
        <trans-unit id="a6ffa937e9ecc8d7e999b7abdd2959fc92f51275" translate="yes" xml:space="preserve">
          <source>Minimize the number of items in &lt;code&gt;resolve.modules&lt;/code&gt;, &lt;code&gt;resolve.extensions&lt;/code&gt;, &lt;code&gt;resolve.mainFiles&lt;/code&gt;, &lt;code&gt;resolve.descriptionFiles&lt;/code&gt; as they increase the number of filesystem calls.</source>
          <target state="translated">&lt;code&gt;resolve.modules&lt;/code&gt; 、 &lt;code&gt;resolve.extensions&lt;/code&gt; 、 &lt;code&gt;resolve.mainFiles&lt;/code&gt; 、 &lt;code&gt;resolve.descriptionFiles&lt;/code&gt; の項目の数を最小限に抑えます。これらは、ファイルシステムコールの数を増やすためです。</target>
        </trans-unit>
        <trans-unit id="8c97536d4a74005bbc859f9f508fe582df2fc09a" translate="yes" xml:space="preserve">
          <source>Minimize the number of preset/plugins</source>
          <target state="translated">プリセット/プラグインの数を最小にする</target>
        </trans-unit>
        <trans-unit id="06e3dae400a146ac9ee6b047a952a5c0082cebd0" translate="yes" xml:space="preserve">
          <source>Minimizes the chunks with &lt;code&gt;uglify.js&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;uglify.js&lt;/code&gt; でチャンクを最小化します。</target>
        </trans-unit>
        <trans-unit id="4b3525bb3744266dcd052765cb2e967f4f415796" translate="yes" xml:space="preserve">
          <source>Minimizing For Production</source>
          <target state="translated">生産のための最小化</target>
        </trans-unit>
        <trans-unit id="f810335097d91ac6e93fe8a1e2e38603eee5be4f" translate="yes" xml:space="preserve">
          <source>Minimum number of chunks that must share a module before splitting.</source>
          <target state="translated">分割する前にモジュールを共有しなければならないチャンクの最小数。</target>
        </trans-unit>
        <trans-unit id="60cabd1ecf30b7a89543cad33d76871146ea270c" translate="yes" xml:space="preserve">
          <source>Minimum size, in bytes, for a chunk to be generated.</source>
          <target state="translated">生成されるチャンクの最小サイズ (バイト単位)。</target>
        </trans-unit>
        <trans-unit id="814d5c9075ac58da08deb4e3d88f6089a78f380d" translate="yes" xml:space="preserve">
          <source>Mocha</source>
          <target state="translated">Mocha</target>
        </trans-unit>
        <trans-unit id="a7b93d2128e820f861fc8dfccd9f5521e89ad21f" translate="yes" xml:space="preserve">
          <source>Mode</source>
          <target state="translated">Mode</target>
        </trans-unit>
        <trans-unit id="e49038ebac8be34038eea485a820fd93f01def3f" translate="yes" xml:space="preserve">
          <source>Mode to use, either &quot;development&quot; or &quot;production&quot;</source>
          <target state="translated">使用するモードは、「開発」または「生産」のいずれかです。</target>
        </trans-unit>
        <trans-unit id="c26cc3dae872232e9a0604d9099b87507b59d66a" translate="yes" xml:space="preserve">
          <source>Mode: development</source>
          <target state="translated">モード:開発</target>
        </trans-unit>
        <trans-unit id="c8c73771af79c4409a259ba6e572fbb79e19d3f6" translate="yes" xml:space="preserve">
          <source>Mode: none</source>
          <target state="translated">モード:なし</target>
        </trans-unit>
        <trans-unit id="bb28adf7bbf9194f1592a3c19f4f63f75be0fca8" translate="yes" xml:space="preserve">
          <source>Mode: production</source>
          <target state="translated">モード:生産</target>
        </trans-unit>
        <trans-unit id="79f5b225cffab11e22dc40b6f05abef1d33d1561" translate="yes" xml:space="preserve">
          <source>Modes</source>
          <target state="translated">Modes</target>
        </trans-unit>
        <trans-unit id="4822c7226bb2bbcfff3cd9616657a72a7e9a5988" translate="yes" xml:space="preserve">
          <source>Modify &lt;code&gt;tsconfig.json&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tsconfig.json&lt;/code&gt; を変更します。</target>
        </trans-unit>
        <trans-unit id="b07b0fa775d0050d5b01788a8d05c9619a09411b" translate="yes" xml:space="preserve">
          <source>Modify filename</source>
          <target state="translated">ファイル名の変更</target>
        </trans-unit>
        <trans-unit id="b8ff02892916ff59f7fbd4e617fccd01f6bca576" translate="yes" xml:space="preserve">
          <source>Module</source>
          <target state="translated">Module</target>
        </trans-unit>
        <trans-unit id="7ee83fed2e8bf53e577b314dd959ae5c55d31275" translate="yes" xml:space="preserve">
          <source>Module API</source>
          <target state="translated">モジュールAPI</target>
        </trans-unit>
        <trans-unit id="f4adaadd50180c6b35d9ed9d021b97f0ef636e2c" translate="yes" xml:space="preserve">
          <source>Module Contexts</source>
          <target state="translated">モジュールコンテキスト</target>
        </trans-unit>
        <trans-unit id="79664e04507d8c1100019dbeb51f9cb573abd95d" translate="yes" xml:space="preserve">
          <source>Module Definition Systems</source>
          <target state="translated">モジュール定義システム</target>
        </trans-unit>
        <trans-unit id="fd61fca308543f04ec5078e95c6f6477a1b57472" translate="yes" xml:space="preserve">
          <source>Module Grouping Algorithm</source>
          <target state="translated">モジュールのグルーピングアルゴリズム</target>
        </trans-unit>
        <trans-unit id="8a9d06dd836568efeccdb8afcf254285349fb16b" translate="yes" xml:space="preserve">
          <source>Module ID is a number in webpack (in contrast to NodeJS where it is a string -- the filename).</source>
          <target state="translated">モジュールIDはwebpackの中の数字です(NodeJSが文字列であるのとは対照的に、ファイル名です)。</target>
        </trans-unit>
        <trans-unit id="410f8eb19b4a638554cd700e8ba88f0ef130c290" translate="yes" xml:space="preserve">
          <source>Module Identifiers</source>
          <target state="translated">モジュール識別子</target>
        </trans-unit>
        <trans-unit id="b3c0d8ccd032afe728bc7677d8f1b82146252c2e" translate="yes" xml:space="preserve">
          <source>Module Methods</source>
          <target state="translated">モジュールメソッド</target>
        </trans-unit>
        <trans-unit id="ecd286e5b576aa168a3e80ebd6b8b9bef1e63dc4" translate="yes" xml:space="preserve">
          <source>Module Methods: export</source>
          <target state="translated">モジュールメソッド:エクスポート</target>
        </trans-unit>
        <trans-unit id="945e0c3613d86df1ee95a47f2c0475a9e0e17749" translate="yes" xml:space="preserve">
          <source>Module Methods: import</source>
          <target state="translated">モジュールメソッド:import</target>
        </trans-unit>
        <trans-unit id="0d57150cecad5465f78b64ad698220c2e9229222" translate="yes" xml:space="preserve">
          <source>Module Methods: import()</source>
          <target state="translated">モジュールメソッド:import()</target>
        </trans-unit>
        <trans-unit id="9640648ce09230d5d92af45be6406d0ee61c2db2" translate="yes" xml:space="preserve">
          <source>Module Methods: require</source>
          <target state="translated">モジュールメソッド:require</target>
        </trans-unit>
        <trans-unit id="abcaa7bd7f40b253308bbd0709b1d33e3a8d639d" translate="yes" xml:space="preserve">
          <source>Module Methods: require.cache</source>
          <target state="translated">モジュールメソッド:require.cache</target>
        </trans-unit>
        <trans-unit id="50b49ca3cff4218a18f3ff873b9927756ddb4009" translate="yes" xml:space="preserve">
          <source>Module Methods: require.context</source>
          <target state="translated">モジュールメソッド:require.context</target>
        </trans-unit>
        <trans-unit id="3623f20eabc51ba424dcb8e7cf729bdf14a91263" translate="yes" xml:space="preserve">
          <source>Module Methods: require.ensure</source>
          <target state="translated">モジュールメソッド:require.secure</target>
        </trans-unit>
        <trans-unit id="ba82f440989dc3a33ec2656360dff40b1815eed5" translate="yes" xml:space="preserve">
          <source>Module Methods: require.include</source>
          <target state="translated">モジュールメソッド:require.include</target>
        </trans-unit>
        <trans-unit id="1245c5418d703043405edcc532ff2cbceebb869d" translate="yes" xml:space="preserve">
          <source>Module Methods: require.resolve</source>
          <target state="translated">モジュールメソッド:require.resolve</target>
        </trans-unit>
        <trans-unit id="f109203fd3ac3a8580ea8b9542e1cafa496e5d73" translate="yes" xml:space="preserve">
          <source>Module Methods: require.resolveWeak</source>
          <target state="translated">モジュールメソッド:require.resolveWeak</target>
        </trans-unit>
        <trans-unit id="b5e362a11fb712a29a6a7c3e785bb6ff30aa5eae" translate="yes" xml:space="preserve">
          <source>Module Objects</source>
          <target state="translated">モジュールオブジェクト</target>
        </trans-unit>
        <trans-unit id="15d7561ef70bec9f7ca7c6066aca420c78fe0cbf" translate="yes" xml:space="preserve">
          <source>Module Options</source>
          <target state="translated">モジュールオプション</target>
        </trans-unit>
        <trans-unit id="288e4a8c6676ea4eb83392ffcf2395bf08c232ab" translate="yes" xml:space="preserve">
          <source>Module Resolution</source>
          <target state="translated">モジュールの解像度</target>
        </trans-unit>
        <trans-unit id="be778ece53ab9c5d58fb887a3aea4ee7cb771a1b" translate="yes" xml:space="preserve">
          <source>Module Variables</source>
          <target state="translated">モジュール変数</target>
        </trans-unit>
        <trans-unit id="ce0ddf2557a4c8392f5626e1536ebc449604872d" translate="yes" xml:space="preserve">
          <source>Module and Chunk information</source>
          <target state="translated">モジュールとチャンク情報</target>
        </trans-unit>
        <trans-unit id="c7e1fc9a33becfe3c9b761e74ed828d7c64ecc1a" translate="yes" xml:space="preserve">
          <source>Module paths</source>
          <target state="translated">モジュールパス</target>
        </trans-unit>
        <trans-unit id="c4b27dc35a86c4ced295147d986884bc2abd55cf" translate="yes" xml:space="preserve">
          <source>Module proof library.</source>
          <target state="translated">モジュールプルーフライブラリ。</target>
        </trans-unit>
        <trans-unit id="c778ecf88b04fc7e521411638a1b843652b456c7" translate="yes" xml:space="preserve">
          <source>ModuleConcatenationPlugin</source>
          <target state="translated">ModuleConcatenationPlugin</target>
        </trans-unit>
        <trans-unit id="04e9462c0ff02bb9032b92abd45881a3c7e15fb7" translate="yes" xml:space="preserve">
          <source>Modules</source>
          <target state="translated">Modules</target>
        </trans-unit>
        <trans-unit id="cb2bca09fe58c99a48713d7ecdb369a58396da80" translate="yes" xml:space="preserve">
          <source>Modules are searched for inside all directories specified in &lt;a href=&quot;../configuration/resolve#resolve-modules&quot;&gt;&lt;code&gt;resolve.modules&lt;/code&gt;&lt;/a&gt;. You can replace the original module path by an alternate path by creating an alias for it using &lt;a href=&quot;../configuration/resolve#resolve-alias&quot;&gt;&lt;code&gt;resolve.alias&lt;/code&gt;&lt;/a&gt; configuration option.</source>
          <target state="translated">モジュールは、&lt;a href=&quot;../configuration/resolve#resolve-modules&quot;&gt; &lt;code&gt;resolve.modules&lt;/code&gt; で&lt;/a&gt;指定されたすべてのディレクトリ内で検索されます。&lt;a href=&quot;../configuration/resolve#resolve-alias&quot;&gt; &lt;code&gt;resolve.alias&lt;/code&gt; &lt;/a&gt;構成オプションを使用してエイリアスを作成することにより、元のモジュールパスを代替パスに置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="ec16722362e1438cf1ffdf48e33b168fc8353eff" translate="yes" xml:space="preserve">
          <source>Modules that are included in every parent chunk are removed from the chunk.</source>
          <target state="translated">すべての親チャンクに含まれるモジュールはチャンクから削除されます。</target>
        </trans-unit>
        <trans-unit id="65607507695dbb68853f7200e33956e39fd6a15d" translate="yes" xml:space="preserve">
          <source>More Examples</source>
          <target state="translated">その他の例</target>
        </trans-unit>
        <trans-unit id="979e421e3c8ef44e0883aba3714dcb57450f1e48" translate="yes" xml:space="preserve">
          <source>More likely you will be disrupted by this second issue. It is natural to expect relative references to be resolved against the &lt;code&gt;.scss&lt;/code&gt; file in which they are specified (like in regular &lt;code&gt;.css&lt;/code&gt; files). Thankfully there are a two solutions to this problem:</source>
          <target state="translated">この2番目の問題によって混乱する可能性が高くなります。相対参照は、それらが指定されている &lt;code&gt;.scss&lt;/code&gt; ファイル（通常の &lt;code&gt;.css&lt;/code&gt; ファイルなど）に対して解決されることを期待するのが自然です。ありがたいことに、この問題には2つの解決策があります。</target>
        </trans-unit>
        <trans-unit id="b9e79b0fb30bd5b519b2cc3654c5e8b6ad96cbc3" translate="yes" xml:space="preserve">
          <source>Move common modules into the parent chunk</source>
          <target state="translated">共通モジュールを親チャンクに移動する</target>
        </trans-unit>
        <trans-unit id="14d62d3acc8060c89746323fa3392fffb7aa3569" translate="yes" xml:space="preserve">
          <source>Multi Page Application</source>
          <target state="translated">マルチページアプリケーション</target>
        </trans-unit>
        <trans-unit id="51244434835571b55673043584edfd8145243326" translate="yes" xml:space="preserve">
          <source>MultiCompiler</source>
          <target state="translated">MultiCompiler</target>
        </trans-unit>
        <trans-unit id="af261911aa86e4785c88244cbcfad54e0b65d198" translate="yes" xml:space="preserve">
          <source>MultiEntryPlugin</source>
          <target state="translated">MultiEntryPlugin</target>
        </trans-unit>
        <trans-unit id="31bec9db1d695359396d3a884e25be81f75fa5c4" translate="yes" xml:space="preserve">
          <source>Multiple &lt;code&gt;DllPlugins&lt;/code&gt; and multiple &lt;code&gt;DllReferencePlugins&lt;/code&gt;.</source>
          <target state="translated">複数の &lt;code&gt;DllPlugins&lt;/code&gt; および複数の &lt;code&gt;DllReferencePlugins&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b7d0845e7fa07727d2f4c51ad7c374c8efded058" translate="yes" xml:space="preserve">
          <source>Multiple Common Chunks</source>
          <target state="translated">複数の共通チャンク</target>
        </trans-unit>
        <trans-unit id="70919a073b717374fafc07a125e1979358461434" translate="yes" xml:space="preserve">
          <source>Multiple Compilations</source>
          <target state="translated">複数のコンパイル</target>
        </trans-unit>
        <trans-unit id="33e334d48711f0b0422dd14c11adb7d2e27859ad" translate="yes" xml:space="preserve">
          <source>Multiple Entry Points</source>
          <target state="translated">複数のエントリーポイント</target>
        </trans-unit>
        <trans-unit id="d0254d4ee6b52c76a42b92fe63abfae1fba4ee5e" translate="yes" xml:space="preserve">
          <source>Multiple Entry Points with Commons Chunk</source>
          <target state="translated">コモンズチャンクを使った複数のエントリーポイント</target>
        </trans-unit>
        <trans-unit id="9f602c068fcc7878bf5f40d9c133c2474881e45a" translate="yes" xml:space="preserve">
          <source>Multiple Instances</source>
          <target state="translated">複数のインスタンス</target>
        </trans-unit>
        <trans-unit id="52629750e553b3ad6a766ef3b9111c449d4aef13" translate="yes" xml:space="preserve">
          <source>Multiple Targets</source>
          <target state="translated">複数のターゲット</target>
        </trans-unit>
        <trans-unit id="7af4468c4f3ebf1ae604743e81c25292dbff7615" translate="yes" xml:space="preserve">
          <source>Multiple callbacks can be added. They will be executed in the order of addition.</source>
          <target state="translated">複数のコールバックを追加することができます。追加した順に実行されます。</target>
        </trans-unit>
        <trans-unit id="f32a7f7893816cdc2e78105a9f31fd95e5aa5e86" translate="yes" xml:space="preserve">
          <source>Multiple configurations will &lt;strong&gt;not be run in parallel&lt;/strong&gt;. Each configuration is only processed after the previous one has finished processing. To process them in parallel, you can use a third-party solution like &lt;a href=&quot;https://www.npmjs.com/package/parallel-webpack&quot;&gt;parallel-webpack&lt;/a&gt;.</source>
          <target state="translated">複数の構成が&lt;strong&gt;並行して実行されること&lt;/strong&gt;はあり&lt;strong&gt;ません&lt;/strong&gt;。各構成は、前の構成が処理を完了した後にのみ処理されます。それらを並行して処理するには、&lt;a href=&quot;https://www.npmjs.com/package/parallel-webpack&quot;&gt;parallel-webpack&lt;/a&gt;などのサードパーティのソリューションを使用できます。</target>
        </trans-unit>
        <trans-unit id="a940006e1d223c8e4389d42329fa987d078d3a15" translate="yes" xml:space="preserve">
          <source>Multiple requires to the same module result in only one module execution and only one export. Therefore a cache in the runtime exists. Removing values from this cache cause new module execution and a new export.</source>
          <target state="translated">同じモジュールへの複数の要求は、1つのモジュールの実行と1つのエクスポートにしかなりません。そのため、ランタイム内にキャッシュが存在します。このキャッシュから値を削除すると、新しいモジュールの実行と新しいエクスポートが発生します。</target>
        </trans-unit>
        <trans-unit id="a58c3aebae89adf1783eda829ec1aa946f07d85a" translate="yes" xml:space="preserve">
          <source>Multiple values</source>
          <target state="translated">複数の値</target>
        </trans-unit>
        <trans-unit id="e6aabb6231f5fbabca099e4a40902fa7f067fa46" translate="yes" xml:space="preserve">
          <source>Multiple values are separated by comma &lt;code&gt;,&lt;/code&gt;:</source>
          <target state="translated">複数の値はコンマ &lt;code&gt;,&lt;/code&gt; 区切られます：</target>
        </trans-unit>
        <trans-unit id="1b6c0dee98a89366fdcbfe05541aac72db6bd774" translate="yes" xml:space="preserve">
          <source>NPM Scripts</source>
          <target state="translated">NPM スクリプト</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="eab392df02227f5ad3cb6358e14f9a92174d6852" translate="yes" xml:space="preserve">
          <source>Name of global coverage variable</source>
          <target state="translated">グローバルカバレッジ変数の名前</target>
        </trans-unit>
        <trans-unit id="7e1a44922703aaf3623955916847b597113ab53b" translate="yes" xml:space="preserve">
          <source>Name of the config to use</source>
          <target state="translated">使用する設定名</target>
        </trans-unit>
        <trans-unit id="9d44691a48dbbbf5f47f7a24dd531d771b3f214c" translate="yes" xml:space="preserve">
          <source>Name of the result file. May contain &lt;code&gt;[name]&lt;/code&gt;, &lt;code&gt;[id]&lt;/code&gt; and &lt;code&gt;[contenthash]&lt;/code&gt;</source>
          <target state="translated">結果ファイルの名前。含まれていてもよい &lt;code&gt;[name]&lt;/code&gt; 、 &lt;code&gt;[id]&lt;/code&gt; と &lt;code&gt;[contenthash]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8b4617b659a51d0b5756991a46730570511eef04" translate="yes" xml:space="preserve">
          <source>Naming</source>
          <target state="translated">Naming</target>
        </trans-unit>
        <trans-unit id="3f00f6db4253d512042a42d232fed179ec641838" translate="yes" xml:space="preserve">
          <source>Need to find up to date examples of these webpack targets being used in live code or boilerplates.</source>
          <target state="translated">これらの webpack ターゲットがライブコードやボイラープレートで使用されている最新の例を見つける必要があります。</target>
        </trans-unit>
        <trans-unit id="f0b610f173b363c6d397168ae6e235e8c6ca1741" translate="yes" xml:space="preserve">
          <source>Nested rules</source>
          <target state="translated">入れ子になったルール</target>
        </trans-unit>
        <trans-unit id="9bc81968c8a5c717216ba60c9fa6a03c720c9f2d" translate="yes" xml:space="preserve">
          <source>Nested rules can be specified under the properties &lt;a href=&quot;#rule-rules&quot;&gt;&lt;code&gt;rules&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#rule-oneof&quot;&gt;&lt;code&gt;oneOf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ネストされたルールは、プロパティ&lt;a href=&quot;#rule-rules&quot;&gt; &lt;code&gt;rules&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#rule-oneof&quot;&gt; &lt;code&gt;oneOf&lt;/code&gt; &lt;/a&gt;で指定できます。</target>
        </trans-unit>
        <trans-unit id="00907d2f7ec21d6725161c6f37cc92464bd4d1ae" translate="yes" xml:space="preserve">
          <source>New chunk can be shared OR modules are from the &lt;code&gt;node_modules&lt;/code&gt; folder</source>
          <target state="translated">新しいチャンクを共有できるか、モジュールが &lt;code&gt;node_modules&lt;/code&gt; フォルダーにある</target>
        </trans-unit>
        <trans-unit id="86c73a39bd8e318e6fcb6fcbe6773a9ca427f4e5" translate="yes" xml:space="preserve">
          <source>New chunk would be bigger than 30kb (before min+gz)</source>
          <target state="translated">新しいチャンクは30kbよりも大きくなります(min+gz以前)。</target>
        </trans-unit>
        <trans-unit id="571fead9fa6a14ef560201d8a4e1dd845f9c7248" translate="yes" xml:space="preserve">
          <source>New to webpack? Check out our guide to some of webpack's &lt;a href=&quot;https://webpack.js.org/concepts&quot;&gt;core concepts&lt;/a&gt; to get started!</source>
          <target state="translated">Webpackは初めてですか？開始するには、webpackの&lt;a href=&quot;https://webpack.js.org/concepts&quot;&gt;コアコンセプト&lt;/a&gt;のガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="3f170caead65df254d786032a409a6f6d204bca6" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="translated">次のステップ</target>
        </trans-unit>
        <trans-unit id="6a3128d5f090a6c16b2185917486ee462fd298bd" translate="yes" xml:space="preserve">
          <source>Next guide</source>
          <target state="translated">次のガイド</target>
        </trans-unit>
        <trans-unit id="33f0138c6fc828d4afddc3fc8af24ccc31c883b9" translate="yes" xml:space="preserve">
          <source>Next, install webpack and webpack-dev-server in your project;</source>
          <target state="translated">次に、プロジェクトにwebpackとwebpack-dev-serverをインストールします。</target>
        </trans-unit>
        <trans-unit id="804c2c8ab9ef0272963f533f9dfd8b2e19c9dd60" translate="yes" xml:space="preserve">
          <source>No Hot Module Replacement</source>
          <target state="translated">ホットモジュール交換なし</target>
        </trans-unit>
        <trans-unit id="af837962cb7659664d3ba4b0e86a956a19477f2f" translate="yes" xml:space="preserve">
          <source>No duplicate compilation (performance)</source>
          <target state="translated">重複コンパイルなし(パフォーマンス)</target>
        </trans-unit>
        <trans-unit id="f70b38d79e57a2e98ad3b37d8bff4f55372cb23e" translate="yes" xml:space="preserve">
          <source>No hint warnings or errors are shown.</source>
          <target state="translated">ヒントの警告やエラーは表示されません。</target>
        </trans-unit>
        <trans-unit id="8104f56c0ada9376364e684058a3d77044c3bb13" translate="yes" xml:space="preserve">
          <source>No runtime public path modification</source>
          <target state="translated">実行時のパブリックパスの変更はありません。</target>
        </trans-unit>
        <trans-unit id="90f576dec2e189b6269427581c1778c8eee5e26c" translate="yes" xml:space="preserve">
          <source>NoErrorsPlugin</source>
          <target state="translated">NoErrorsPlugin</target>
        </trans-unit>
        <trans-unit id="b906849891db9257c38231dc0326e872f2c1954f" translate="yes" xml:space="preserve">
          <source>NoHotModuleReplacementPlugin</source>
          <target state="translated">NoHotModuleReplacementPlugin</target>
        </trans-unit>
        <trans-unit id="260f7a8cd4f6938b3cc185a619847cb83d670219" translate="yes" xml:space="preserve">
          <source>Node</source>
          <target state="translated">Node</target>
        </trans-unit>
        <trans-unit id="850fae31c96276a74dcd3f2dd75d52f10ee5355f" translate="yes" xml:space="preserve">
          <source>Node API</source>
          <target state="translated">ノードエーピーアイ</target>
        </trans-unit>
        <trans-unit id="d0564fdb4244508c08aeaa8927f1c092e11b3e3d" translate="yes" xml:space="preserve">
          <source>Node Built-Ins</source>
          <target state="translated">ノードの組み込み</target>
        </trans-unit>
        <trans-unit id="a0e630bed791b33794053f86df1a1211214699df" translate="yes" xml:space="preserve">
          <source>Node built-ins, like &lt;code&gt;process&lt;/code&gt;, can be polyfilled right directly from your configuration file without the use of any special loaders or plugins. See the &lt;a href=&quot;../configuration/node&quot;&gt;node configuration page&lt;/a&gt; for more information and examples.</source>
          <target state="translated">&lt;code&gt;process&lt;/code&gt; のようなノードの組み込みは、特別なローダーやプラグインを使用せずに、構成ファイルから直接ポリフィルすることができます。詳細と例については、&lt;a href=&quot;../configuration/node&quot;&gt;ノード構成ページ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="fc6ce541a53b0a46f3bd7b6f35f64b0c4a5a02ed" translate="yes" xml:space="preserve">
          <source>Node-Zopfli plugin for Webpack.</source>
          <target state="translated">Webpack用のNode-Zopfliプラグイン。</target>
        </trans-unit>
        <trans-unit id="8b8214b8e226c143da7ac208d7ccfff6ed28e492" translate="yes" xml:space="preserve">
          <source>Node.js API</source>
          <target state="translated">Node.js API</target>
        </trans-unit>
        <trans-unit id="87071e07a65768f326680b05ba31e7a4f6cc3cf6" translate="yes" xml:space="preserve">
          <source>Node.js API: stats.hasErrors()</source>
          <target state="translated">Node.js API:stats.hasErrors()</target>
        </trans-unit>
        <trans-unit id="a6f76c4d171ff100d2d8598052b88a576d19f91e" translate="yes" xml:space="preserve">
          <source>Node.js API: stats.hasWarnings()</source>
          <target state="translated">Node.js API:stats.hasWarnings()</target>
        </trans-unit>
        <trans-unit id="874db793cb9663801ec056096724681c755baa5d" translate="yes" xml:space="preserve">
          <source>Node.js API: stats.toJson()</source>
          <target state="translated">Node.js API:stats.toJson()</target>
        </trans-unit>
        <trans-unit id="e82fa7cdc3d0c984d0e77dd15e9c0a25db6f0303" translate="yes" xml:space="preserve">
          <source>Node.js API: stats.toString()</source>
          <target state="translated">Node.js API:stats.toString()</target>
        </trans-unit>
        <trans-unit id="33337a2400bf85cb9c9403498611758b81bc19d8" translate="yes" xml:space="preserve">
          <source>Node.js API: webpack()</source>
          <target state="translated">Node.js API:webpack()</target>
        </trans-unit>
        <trans-unit id="0dc2614c3f82904fc30cf2ab7f01d80f39e0a4f3" translate="yes" xml:space="preserve">
          <source>Node.js Version</source>
          <target state="translated">Node.jsのバージョン</target>
        </trans-unit>
        <trans-unit id="8b6e57f0637f7555f24bbcac81965e8f1f7ed333" translate="yes" xml:space="preserve">
          <source>Node.js has supported modular programming almost since its inception. On the web, however, support for &lt;em&gt;modules&lt;/em&gt; has been slow to arrive. Multiple tools exist that support modular JavaScript on the web, with a variety of benefits and limitations. webpack builds on lessons learned from these systems and applies the concept of &lt;em&gt;modules&lt;/em&gt; to any file in your project.</source>
          <target state="translated">Node.jsは、当初からモジュール式プログラミングをサポートしてきました。ただし、Webでは、&lt;em&gt;モジュールの&lt;/em&gt;サポートの実現に時間がかかりました。WebでモジュラーJavaScriptをサポートする複数のツールが存在し、さまざまな利点と制限があります。webpackは、これらのシステムから学んだ教訓に基づいて構築され、&lt;em&gt;モジュール&lt;/em&gt;の概念をプロジェクト内の任意のファイルに適用します。</target>
        </trans-unit>
        <trans-unit id="6ae2e38b7821fa717a5aa645014a1bdf10f0f239" translate="yes" xml:space="preserve">
          <source>NodeEnvironmentPlugin</source>
          <target state="translated">NodeEnvironmentPlugin</target>
        </trans-unit>
        <trans-unit id="92be2ff0932240f7b34b5c49458059cf598eee7c" translate="yes" xml:space="preserve">
          <source>NodeSourcePlugin</source>
          <target state="translated">NodeSourcePlugin</target>
        </trans-unit>
        <trans-unit id="ae8bec24f2ee247b94044a1b6ff74699e6f4b135" translate="yes" xml:space="preserve">
          <source>NodeStuffPlugin</source>
          <target state="translated">NodeStuffPlugin</target>
        </trans-unit>
        <trans-unit id="214d0b567fb66dc03b30346846a5d3c25f4e31d5" translate="yes" xml:space="preserve">
          <source>NodeTargetPlugin</source>
          <target state="translated">NodeTargetPlugin</target>
        </trans-unit>
        <trans-unit id="482965fe4f0c4859d2f2dd3cb272dae043c9b49e" translate="yes" xml:space="preserve">
          <source>NodeTemplatePlugin</source>
          <target state="translated">NodeTemplatePlugin</target>
        </trans-unit>
        <trans-unit id="e3ae200166946e46ecee5a2f3114865f5816a047" translate="yes" xml:space="preserve">
          <source>Non ES6 Module</source>
          <target state="translated">非ES6モジュール</target>
        </trans-unit>
        <trans-unit id="fe020d9d97d984e56393ffb459e021eef78bf161" translate="yes" xml:space="preserve">
          <source>Non-Less imports</source>
          <target state="translated">無しの輸入品</target>
        </trans-unit>
        <trans-unit id="d82cb533541568577c64f151d64e056c75d3d6c2" translate="yes" xml:space="preserve">
          <source>Nonce purpose explained</source>
          <target state="translated">Nonceの目的を説明します。</target>
        </trans-unit>
        <trans-unit id="5278c6a3d91b0458bd2785a13d8f492582e05b86" translate="yes" xml:space="preserve">
          <source>Normal chunks will show up using the &lt;code&gt;filename&lt;/code&gt; rule above, and be named according to their &lt;code&gt;[chunkname]&lt;/code&gt;.</source>
          <target state="translated">通常のチャンクは上記の &lt;code&gt;filename&lt;/code&gt; 規則を使用して表示され、その &lt;code&gt;[chunkname]&lt;/code&gt; に従って名前が付けられます。</target>
        </trans-unit>
        <trans-unit id="c0f303fa1b9d5e7c7d2af3d5f3bff064547caca1" translate="yes" xml:space="preserve">
          <source>Normal modules can export a loader in addition to the normal &lt;code&gt;main&lt;/code&gt; via &lt;code&gt;package.json&lt;/code&gt; with the &lt;code&gt;loader&lt;/code&gt; field.</source>
          <target state="translated">通常のモジュールは、 &lt;code&gt;loader&lt;/code&gt; フィールドを持つ &lt;code&gt;package.json&lt;/code&gt; を介して通常の &lt;code&gt;main&lt;/code&gt; に加えてローダーをエクスポートできます。</target>
        </trans-unit>
        <trans-unit id="529562fc788c0037cdc4dd136b538f9ce9051cf6" translate="yes" xml:space="preserve">
          <source>Normal: Resolves a module via an absolute or relative path.</source>
          <target state="translated">通常。絶対パスまたは相対パスでモジュールを解決します。</target>
        </trans-unit>
        <trans-unit id="30d60585216ded2742f1b02ef32a4dcc96ad433d" translate="yes" xml:space="preserve">
          <source>NormalModuleReplacementPlugin</source>
          <target state="translated">NormalModuleReplacementPlugin</target>
        </trans-unit>
        <trans-unit id="bab4f507bbd881c8083bf7220fcbee50da827017" translate="yes" xml:space="preserve">
          <source>Not Enough Watchers</source>
          <target state="translated">ウォッチャーが足りない</target>
        </trans-unit>
        <trans-unit id="6b3ddc8a018382c58e740f7711bcae204d99c659" translate="yes" xml:space="preserve">
          <source>Not all Polymer Elements have been written to execute as a module and will require changes to work with webpack. The most common issue encountered is because modules do not execute in the global scope. Variables, functions and classes will no longer be global unless they are declared as properties on the global object (window).</source>
          <target state="translated">すべてのPolymer Elementsがモジュールとして実行されるように書かれているわけではなく、webpackで動作させるために変更が必要になります。遭遇する最も一般的な問題は、モジュールがグローバルスコープで実行されないためです。変数、関数、クラスは、グローバルオブジェクト(ウィンドウ)上でプロパティとして宣言されていない限り、グローバルではなくなります。</target>
        </trans-unit>
        <trans-unit id="39be7ae447e29d59682d504af836c0434c9219cc" translate="yes" xml:space="preserve">
          <source>Not every Node global supports all four options. The compiler will throw an error for property-value combinations that aren't supported (e.g. &lt;code&gt;process: 'empty'&lt;/code&gt;). See the sections below for more details.</source>
          <target state="translated">すべてのノードグローバルが4つのオプションすべてをサポートしているわけではありません。コンパイラは、サポートされていないプロパティと値の組み合わせに対してエラーをスローします（例： &lt;code&gt;process: 'empty'&lt;/code&gt; ）。詳細については、以下のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="2542658903eae3c6e87f29e552acca72278034cf" translate="yes" xml:space="preserve">
          <source>Not specifying the environment variable raises an &quot;&lt;code&gt;EnvironmentPlugin&lt;/code&gt; - &lt;code&gt;${key}&lt;/code&gt; environment variable is undefined&quot; error.</source>
          <target state="translated">「環境変数を指定しないと提起 &lt;code&gt;EnvironmentPlugin&lt;/code&gt; - &lt;code&gt;${key}&lt;/code&gt; 環境変数が定義されていない」エラーを。</target>
        </trans-unit>
        <trans-unit id="9b016b01d592034dd8180ce9e0be296e560a090d" translate="yes" xml:space="preserve">
          <source>Note by default an empty string is used. Using some kind of indentation makes bundles look more pretty, but will cause issues with multi-line strings.</source>
          <target state="translated">デフォルトでは空の文字列が使われることに注意してください。何らかのインデントを使用すると、バンドルをよりきれいに見せることができますが、複数行の文字列では問題が発生します。</target>
        </trans-unit>
        <trans-unit id="816ed993175a9247db3da6d37bfd0f132460717a" translate="yes" xml:space="preserve">
          <source>Note it also adds some info about tree shaking to the generated bundle.</source>
          <target state="translated">また、生成されたバンドルにツリーの揺れに関する情報を追加することに注意してください。</target>
        </trans-unit>
        <trans-unit id="266f9b4b866d55f38dde035b7cb3e007584f2195" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;[hash]&lt;/code&gt; in this parameter will be replaced with an hash of the compilation. See the &lt;a href=&quot;../guides/caching&quot;&gt;Caching guide&lt;/a&gt; for details.</source>
          <target state="translated">このパラメーターの &lt;code&gt;[hash]&lt;/code&gt; はコンパイルのハッシュに置き換えられることに注意してください。詳細については、&lt;a href=&quot;../guides/caching&quot;&gt;キャッシングガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="075d3a49ae8cc897a9efe3ca7c3363f471f32789" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;_entry_return_&lt;/code&gt; in the example code below is the value returned by the entry point. In the bundle itself, it is the output of the function that is generated by webpack from the entry point.</source>
          <target state="translated">以下のサンプルコードの &lt;code&gt;_entry_return_&lt;/code&gt; は、エントリポイントによって返される値であることに注意してください。バンドル自体では、エントリーポイントからwebpackによって生成される関数の出力です。</target>
        </trans-unit>
        <trans-unit id="3a4dfa2d5d308b8872b7d3f96a487ce35091157b" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;output.library&lt;/code&gt; is omitted, thus it is not required for this particular &lt;code&gt;output.libraryTarget&lt;/code&gt;.</source>
          <target state="translated">注こと &lt;code&gt;output.library&lt;/code&gt; が省略され、したがって、この特定のために必要とされていません &lt;code&gt;output.libraryTarget&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b2751d556c9a4a5d365a752d826f29d001305698" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;webpack.HotModuleReplacementPlugin&lt;/code&gt; is required to fully enable HMR. If &lt;code&gt;webpack&lt;/code&gt; or &lt;code&gt;webpack-dev-server&lt;/code&gt; are launched with the &lt;code&gt;--hot&lt;/code&gt; option, this plugin will be added automatically, so you may not need to add this to your &lt;code&gt;webpack.config.js&lt;/code&gt;. See the &lt;a href=&quot;../concepts/hot-module-replacement&quot;&gt;HMR concepts page&lt;/a&gt; for more information.</source>
          <target state="translated">HMRを完全に有効にするには、 &lt;code&gt;webpack.HotModuleReplacementPlugin&lt;/code&gt; が必要です。場合 &lt;code&gt;webpack&lt;/code&gt; または &lt;code&gt;webpack-dev-server&lt;/code&gt; 使用して起動され &lt;code&gt;--hot&lt;/code&gt; オプションあなたにこれを追加する必要はないかもしれないので、このプラグインは、自動的に追加されます &lt;code&gt;webpack.config.js&lt;/code&gt; 。詳細については、&lt;a href=&quot;../concepts/hot-module-replacement&quot;&gt;HMRの概念のページ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="915a95fc0fbd9c8b3fb4c3076e9abfaa2b5a683f" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;webpackInclude&lt;/code&gt; and &lt;code&gt;webpackExclude&lt;/code&gt; options do not interfere with the prefix. eg: &lt;code&gt;./locale&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;webpackInclude&lt;/code&gt; および &lt;code&gt;webpackExclude&lt;/code&gt; オプションはプレフィックスに干渉しないことに注意してください。例： &lt;code&gt;./locale&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3d953943d6a687c6fbf1a1eea53cff9f3c84432f" translate="yes" xml:space="preserve">
          <source>Note that Command Line Interface has a higher precedence for the arguments you use it with than your configuration file. For instance, if you pass &lt;a href=&quot;../concepts/mode#usage&quot;&gt;&lt;code&gt;--mode=&quot;production&quot;&lt;/code&gt;&lt;/a&gt; to webpack CLI and your configuration file uses &lt;code&gt;development&lt;/code&gt;, &lt;code&gt;production&lt;/code&gt; will be used.</source>
          <target state="translated">コマンドラインインターフェイスは、設定ファイルよりも、使用する引数の方が優先されることに注意してください。たとえば、-mode &lt;a href=&quot;../concepts/mode#usage&quot;&gt; &lt;code&gt;--mode=&quot;production&quot;&lt;/code&gt; &lt;/a&gt;をwebpack CLIに渡し、構成ファイルが &lt;code&gt;development&lt;/code&gt; を使用している場合、 &lt;code&gt;production&lt;/code&gt; 環境が使用されます。</target>
        </trans-unit>
        <trans-unit id="8aa4ec7484f1ea4b5661c878af3565f393a16583" translate="yes" xml:space="preserve">
          <source>Note that all options can be combined like so &lt;code&gt;/* webpackMode: &quot;lazy-once&quot;, webpackChunkName: &quot;all-i18n-data&quot; */&lt;/code&gt;. This is wrapped in a JavaScript object and executed using &lt;a href=&quot;https://nodejs.org/dist/latest-v8.x/docs/api/vm.html&quot;&gt;node VM&lt;/a&gt;. You do not need to add curly brackets.</source>
          <target state="translated">&lt;code&gt;/* webpackMode: &quot;lazy-once&quot;, webpackChunkName: &quot;all-i18n-data&quot; */&lt;/code&gt; ように、すべてのオプションを組み合わせることができることに注意してください。これは、JavaScriptオブジェクトにラップされ、&lt;a href=&quot;https://nodejs.org/dist/latest-v8.x/docs/api/vm.html&quot;&gt;ノードVM&lt;/a&gt;を使用して実行されます。中括弧を追加する必要はありません。</target>
        </trans-unit>
        <trans-unit id="b0050ffdb59952b6db4588c5188bd976451ec071" translate="yes" xml:space="preserve">
          <source>Note that although this file is generated by the compiler, you may still want to track it in source control to keep a history of how it has changed over time.</source>
          <target state="translated">このファイルはコンパイラによって生成されますが、時間の経過とともにどのように変化したかの履歴を保持するために、ソースコントロールで追跡したい場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="787d6f4b802d53736bc69bf773d6877de85b0cf4" translate="yes" xml:space="preserve">
          <source>Note that any imported file is subject to tree shaking. This means if you use something like &lt;code&gt;css-loader&lt;/code&gt; in your project and import a CSS file, it needs to be added to the side effect list so it will not be unintentionally dropped in production mode:</source>
          <target state="translated">インポートされたファイルはツリーの揺れの影響を受けることに注意してください。つまり、プロジェクトで &lt;code&gt;css-loader&lt;/code&gt; のようなものを使用してCSSファイルをインポートする場合は、プロダクションモードで意図せずにドロップされないように、副作用リストに追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="06e104e93b785ab965e90cd350cfdd1b4f52a187" translate="yes" xml:space="preserve">
          <source>Note that because the plugin does a direct text replacement, the value given to it must include &lt;strong&gt;actual quotes&lt;/strong&gt; inside of the string itself. Typically, this is done either with alternate quotes, such as &lt;code&gt;'&quot;production&quot;'&lt;/code&gt;, or by using &lt;code&gt;JSON.stringify('production')&lt;/code&gt;.</source>
          <target state="translated">プラグインは直接テキスト置換を行うため、プラグインに与える値には、文字列自体の中に&lt;strong&gt;実際の引用符&lt;/strong&gt;を含める必要があることに注意してください。通常、これは &lt;code&gt;'&quot;production&quot;'&lt;/code&gt; などの代替引用符を使用するか、 &lt;code&gt;JSON.stringify('production')&lt;/code&gt; を使用して行われます。</target>
        </trans-unit>
        <trans-unit id="fe54629278d6a0f3443a9d602ec6d824b446247f" translate="yes" xml:space="preserve">
          <source>Note that if an &lt;code&gt;array&lt;/code&gt; is provided as an &lt;code&gt;entry&lt;/code&gt; point, only the last module in the array will be exposed. If an &lt;code&gt;object&lt;/code&gt; is provided, it can exposed using an &lt;code&gt;array&lt;/code&gt; syntax (see &lt;a href=&quot;https://github.com/webpack/webpack/tree/master/examples/multi-part-library&quot;&gt;this example&lt;/a&gt; for details).</source>
          <target state="translated">&lt;code&gt;array&lt;/code&gt; が &lt;code&gt;entry&lt;/code&gt; ポイントとして提供される場合、配列の最後のモジュールのみが公開されることに注意してください。 &lt;code&gt;object&lt;/code&gt; が提供されている場合は、 &lt;code&gt;array&lt;/code&gt; 構文を使用して公開できます（詳細については、&lt;a href=&quot;https://github.com/webpack/webpack/tree/master/examples/multi-part-library&quot;&gt;この例&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="9bc846aff25b011d48d8282943be738f9a4f3c73" translate="yes" xml:space="preserve">
          <source>Note that if you only plan on using your library as a dependency in another webpack bundle, you may specify &lt;code&gt;externals&lt;/code&gt; as an array.</source>
          <target state="translated">ライブラリを別のwebpackバンドルの依存関係としてのみ使用する場合は、配列として &lt;code&gt;externals&lt;/code&gt; を指定できます。</target>
        </trans-unit>
        <trans-unit id="384028427db3cca31497bce1f23e06ed1825ba0b" translate="yes" xml:space="preserve">
          <source>Note that it is recommended to use an absolute path.</source>
          <target state="translated">絶対パスを使用することが推奨されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="acbd7f974dd59e0ac2d3984303cbc4896a08b113" translate="yes" xml:space="preserve">
          <source>Note that not setting a &lt;code&gt;output.library&lt;/code&gt; will cause all properties returned by the entry point to be assigned to the given object; there are no checks against existing property names.</source>
          <target state="translated">&lt;code&gt;output.library&lt;/code&gt; を設定しないと、エントリポイントによって返されるすべてのプロパティが指定されたオブジェクトに割り当てられることに注意してください。既存のプロパティ名に対するチェックはありません。</target>
        </trans-unit>
        <trans-unit id="ddf01da2392ef523caf78b978f951fa469ae26c8" translate="yes" xml:space="preserve">
          <source>Note that omitting &lt;code&gt;library&lt;/code&gt; will result in the assignment of all properties returned by the entry point be assigned directly to the root object, as documented under the &lt;a href=&quot;#expose-via-object-assignment&quot;&gt;object assignment section&lt;/a&gt;. Example:</source>
          <target state="translated">省略することに留意されたい &lt;code&gt;library&lt;/code&gt; 下に記載されているように、エントリポイントによって返されるすべてのプロパティの割り当てをもたらすであろうことは、ルート・オブジェクトに直接割り当てられる&lt;a href=&quot;#expose-via-object-assignment&quot;&gt;オブジェクト割当部&lt;/a&gt;。例：</target>
        </trans-unit>
        <trans-unit id="758cffe442417bb62cf8f39d175f12055742e81e" translate="yes" xml:space="preserve">
          <source>Note that requests to root won't be proxied by default. To enable root proxying, the &lt;code&gt;devServer.index&lt;/code&gt; option should be specified as a falsy value:</source>
          <target state="translated">ルートへのリクエストはデフォルトではプロキシされないことに注意してください。ルートプロキシを有効にするには、 &lt;code&gt;devServer.index&lt;/code&gt; オプションを偽の値として指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="78636c2679b019eade6f5fbc4307de1f1a9ea4fc" translate="yes" xml:space="preserve">
          <source>Note that setting &lt;code&gt;webpackIgnore&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; opts out of code splitting.</source>
          <target state="translated">&lt;code&gt;webpackIgnore&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定すると、コード分割がオプトアウトされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4a15fafa9795ad7cbd7426a60e87bb18e9f648b1" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;--optimize-minimize&lt;/code&gt; flag can be used to enable &lt;code&gt;UglifyJSPlugin&lt;/code&gt; as well.</source>
          <target state="translated">そのノート &lt;code&gt;--optimize-minimize&lt;/code&gt; フラグを有効にするために使用することができる &lt;code&gt;UglifyJSPlugin&lt;/code&gt; 同様。</target>
        </trans-unit>
        <trans-unit id="f978b09c59db24f0fbd2c8a00e53b80cf02654e1" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;library&lt;/code&gt; setup is tied to the &lt;code&gt;entry&lt;/code&gt; configuration. For most libraries, specifying a single entry point is sufficient. While &lt;a href=&quot;https://github.com/webpack/webpack/tree/master/examples/multi-part-library&quot;&gt;multi-part libraries&lt;/a&gt; are possible, it is simpler to expose partial exports through an &lt;a href=&quot;https://stackoverflow.com/questions/34072598/es6-exporting-importing-in-index-file&quot;&gt;index script&lt;/a&gt; that serves as a single entry point. Using an &lt;code&gt;array&lt;/code&gt; as an &lt;code&gt;entry&lt;/code&gt; point for a library is &lt;strong&gt;not recommended&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;library&lt;/code&gt; セットアップは &lt;code&gt;entry&lt;/code&gt; 構成に関連付けられていることに注意してください。ほとんどのライブラリでは、単一のエントリポイントを指定するだけで十分です。しながら、&lt;a href=&quot;https://github.com/webpack/webpack/tree/master/examples/multi-part-library&quot;&gt;マルチパートライブラリが&lt;/a&gt;可能であり、それを介して部分的輸出を露出させるために簡単である&lt;a href=&quot;https://stackoverflow.com/questions/34072598/es6-exporting-importing-in-index-file&quot;&gt;インデックススクリプト&lt;/a&gt;単一のエントリ・ポイントとして機能します。ライブラリの &lt;code&gt;entry&lt;/code&gt; ポイントとして &lt;code&gt;array&lt;/code&gt; を使用すること&lt;strong&gt;はお勧めしません&lt;/strong&gt;。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8509cd543cc9b56264081c691f816da113399cd5" translate="yes" xml:space="preserve">
          <source>Note that the ability to &lt;code&gt;import&lt;/code&gt; any type of module, e.g. &lt;code&gt;.css&lt;/code&gt; files, is a feature specific to webpack and may not be supported by other bundlers or task runners. We feel this extension of the language is warranted as it allows developers to build a more accurate dependency graph.</source>
          <target state="translated">&lt;code&gt;.css&lt;/code&gt; ファイルなど、任意のタイプのモジュールを &lt;code&gt;import&lt;/code&gt; する機能は、webpackに固有の機能であり、他のバンドラーやタスクランナーではサポートされていない場合があることに注意してください。開発者がより正確なディペンデンシーグラフを作成できるようにするため、この言語の拡張は正当化されると私たちは考えています。</target>
        </trans-unit>
        <trans-unit id="7d09f710d5ae467255e57b13aa1d28e2ae25c40c" translate="yes" xml:space="preserve">
          <source>Note that the config option you provide will be passed to the &lt;code&gt;CLIEngine&lt;/code&gt;. This is a different set of options than what you'd specify in &lt;code&gt;package.json&lt;/code&gt; or &lt;code&gt;.eslintrc&lt;/code&gt;. See the &lt;a href=&quot;http://eslint.org/docs/developer-guide/nodejs-api#cliengine&quot;&gt;eslint docs&lt;/a&gt; for more detail.</source>
          <target state="translated">指定した構成オプションが &lt;code&gt;CLIEngine&lt;/code&gt; に渡されることに注意してください。これは、 &lt;code&gt;package.json&lt;/code&gt; または &lt;code&gt;.eslintrc&lt;/code&gt; で指定するオプションとは異なるオプションセットです。詳細については、&lt;a href=&quot;http://eslint.org/docs/developer-guide/nodejs-api#cliengine&quot;&gt;eslintのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="de4fcf0e4d243e20240d785c75d914ebd0b52f6c" translate="yes" xml:space="preserve">
          <source>Note that the stack traces are removed when &lt;code&gt;errorDetails: false&lt;/code&gt; is passed to the &lt;code&gt;toJson&lt;/code&gt; method. The &lt;code&gt;errorDetails&lt;/code&gt; option is set to &lt;code&gt;true&lt;/code&gt; by default.</source>
          <target state="translated">スタックトレースは、 &lt;code&gt;errorDetails: false&lt;/code&gt; が &lt;code&gt;toJson&lt;/code&gt; メソッドに渡されると削除されることに注意してください。 &lt;code&gt;errorDetails&lt;/code&gt; のオプションがに設定されている &lt;code&gt;true&lt;/code&gt; デフォルトで。</target>
        </trans-unit>
        <trans-unit id="f7f24bd96d4a78ed4ce05d1f924ac60175d349ab" translate="yes" xml:space="preserve">
          <source>Note that these filenames need to be generated at runtime to send the requests for chunks. Because of this, placeholders like &lt;code&gt;[name]&lt;/code&gt; and &lt;code&gt;[chunkhash]&lt;/code&gt; need to add a mapping from chunk id to placeholder value to the output bundle with the webpack runtime. This increases the size and may invalidate the bundle when placeholder value for any chunk changes.</source>
          <target state="translated">これらのファイル名は、チャンクのリクエストを送信するために実行時に生成される必要があることに注意してください。このため、 &lt;code&gt;[name]&lt;/code&gt; や &lt;code&gt;[chunkhash]&lt;/code&gt; ]などのプレースホルダーは、チャンクIDからプレースホルダー値へのマッピングを、Webpackランタイムを使用して出力バンドルに追加する必要があります。これによりサイズが増加し、チャンクのプレースホルダー値が変更されるとバンドルが無効になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="7d2309d88dad882bc95da6b400b819c84331ed3a" translate="yes" xml:space="preserve">
          <source>Note that this is &lt;strong&gt;not a recommended practice&lt;/strong&gt;. Installing globally locks you down to a specific version of webpack and could fail in projects that use a different version.</source>
          <target state="translated">これは&lt;strong&gt;推奨される方法で&lt;/strong&gt;は&lt;strong&gt;ない&lt;/strong&gt;ことに注意してください。グローバルにインストールすると、特定のバージョンのwebpackにロックされ、別のバージョンを使用するプロジェクトで失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="066dbb2e1b71f7da4fb144c41f6b93050ac49a40" translate="yes" xml:space="preserve">
          <source>Note that this is what &lt;a href=&quot;https://github.com/webpack/webpack-dev-middleware&quot;&gt;webpack-dev-middleware&lt;/a&gt;, used by &lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt; and many other packages, uses to mysteriously hide your files but continue serving them up to the browser!</source>
          <target state="translated">これは&lt;a href=&quot;https://github.com/webpack/webpack-dev-middleware&quot;&gt;webpack-dev-middleware&lt;/a&gt;が&lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt;や他の多くのパッケージで使用しているもので、不思議なことにファイルを非表示にしてブラウザーに提供し続けることに注意してください！</target>
        </trans-unit>
        <trans-unit id="0b4874e35211a1b1d3deb29114f373ba89f2f4f9" translate="yes" xml:space="preserve">
          <source>Note that we &lt;strong&gt;did not &lt;code&gt;import&lt;/code&gt; the &lt;code&gt;square&lt;/code&gt; method&lt;/strong&gt; from the &lt;code&gt;src/math.js&lt;/code&gt; module. That function is what's known as &quot;dead code&quot;, meaning an unused &lt;code&gt;export&lt;/code&gt; that should be dropped. Now let's run our npm script, &lt;code&gt;npm run build&lt;/code&gt;, and inspect the output bundle:</source>
          <target state="translated">私たちがいることを注意&lt;strong&gt;しませんでした &lt;code&gt;import&lt;/code&gt; &lt;code&gt;square&lt;/code&gt; 方法&lt;/strong&gt;から &lt;code&gt;src/math.js&lt;/code&gt; モジュールを。その機能は「デッドコード」と呼ばれるもので、削除する必要がある未使用の &lt;code&gt;export&lt;/code&gt; を意味します。次に、npmスクリプト &lt;code&gt;npm run build&lt;/code&gt; を実行して、出力バンドルを調べます。</target>
        </trans-unit>
        <trans-unit id="815a010a6890c7fb0bb273198983260098b36578" translate="yes" xml:space="preserve">
          <source>Note that we aren't binding the &lt;code&gt;import&lt;/code&gt; to a variable. This is because polyfills simply run on their own, prior to the rest of the code base, allowing us to then assume certain native functionality exists.</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; を変数にバインドしていないことに注意してください。これは、ポリフィルがコードベースの残りの部分より前に単独で実行されるため、特定のネイティブ機能が存在すると想定できるためです。</target>
        </trans-unit>
        <trans-unit id="08c14f96276e39f6955bc4d3255fd1a5b89cc829" translate="yes" xml:space="preserve">
          <source>Note that we can also configure it to expose the library in the following ways:</source>
          <target state="translated">また、以下の方法でライブラリを公開するように設定することもできます。</target>
        </trans-unit>
        <trans-unit id="c2cf40e81d1e5cda60a908f6f5fa124c8461d158" translate="yes" xml:space="preserve">
          <source>Note that webpack ignores the &lt;code&gt;name&lt;/code&gt; argument.</source>
          <target state="translated">webpackは &lt;code&gt;name&lt;/code&gt; 引数を無視することに注意してください。</target>
        </trans-unit>
        <trans-unit id="ac899dc9773859ad0e8500c80c621206fa2dafd1" translate="yes" xml:space="preserve">
          <source>Note that webpack needs to generate a unique module identifier from the resource and all loaders including options. It tries to do this with a &lt;code&gt;JSON.stringify&lt;/code&gt; of the options object. This is fine in 99.9% of cases, but may be not unique if you apply the same loaders with different options to the resource and the options have some stringified values.</source>
          <target state="translated">webpackはリソースとオプションを含むすべてのローダーから一意のモジュール識別子を生成する必要があることに注意してください。これは、オプションオブジェクトの &lt;code&gt;JSON.stringify&lt;/code&gt; でこれを実行しようとします。これは99.9％の場合は問題ありませんが、同じローダーを異なるオプションでリソースに適用し、オプションにいくつかの文字列化された値がある場合は、一意ではない可能性があります。</target>
        </trans-unit>
        <trans-unit id="379dfff92fa76807854690cb65ec373a68670eb8" translate="yes" xml:space="preserve">
          <source>Note that webpack will not alter any code other than &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; statements. If you are using other &lt;a href=&quot;http://es6-features.org/&quot;&gt;ES2015 features&lt;/a&gt;, make sure to &lt;a href=&quot;https://webpack.js.org/loaders/#transpiling&quot;&gt;use a transpiler&lt;/a&gt; such as &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; or &lt;a href=&quot;https://buble.surge.sh/guide/&quot;&gt;Bubl&amp;eacute;&lt;/a&gt; via webpack's &lt;a href=&quot;../concepts/loaders&quot;&gt;loader system&lt;/a&gt;.</source>
          <target state="translated">webpackは &lt;code&gt;import&lt;/code&gt; と &lt;code&gt;export&lt;/code&gt; ステートメント以外のコードを変更しないことに注意してください。&lt;a href=&quot;http://es6-features.org/&quot;&gt;ES2015の&lt;/a&gt;他の機能を&lt;a href=&quot;https://webpack.js.org/loaders/#transpiling&quot;&gt;使用&lt;/a&gt;している場合は、 webpackの&lt;a href=&quot;../concepts/loaders&quot;&gt;ローダーシステムを&lt;/a&gt;介して、&lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt;や&lt;a href=&quot;https://buble.surge.sh/guide/&quot;&gt;Bubl&amp;eacute;&lt;/a&gt;などのトランスパイラーを必ず使用してください。</target>
        </trans-unit>
        <trans-unit id="0854b71012c3e8bbf3bd935a2a7c85cc8fddb8cf" translate="yes" xml:space="preserve">
          <source>Note that when using &lt;code&gt;import()&lt;/code&gt; on ES6 modules you must reference the &lt;code&gt;.default&lt;/code&gt; property as it's the actual &lt;code&gt;module&lt;/code&gt; object that will be returned when the promise is resolved.</source>
          <target state="translated">ES6モジュールで &lt;code&gt;import()&lt;/code&gt; を使用する場合は、 &lt;code&gt;.default&lt;/code&gt; プロパティを参照する必要があります。これは、promiseが解決されたときに返される実際の &lt;code&gt;module&lt;/code&gt; オブジェクトだからです。</target>
        </trans-unit>
        <trans-unit id="0ec0f798cfee84fd48386363fdae0cc7310d4de1" translate="yes" xml:space="preserve">
          <source>Note that when using Dart Sass, &lt;strong&gt;synchronous compilation is twice as fast as asynchronous compilation&lt;/strong&gt; by default, due to the overhead of asynchronous callbacks. To avoid this overhead, you can use the &lt;a href=&quot;https://www.npmjs.com/package/fibers&quot;&gt;&lt;code&gt;fibers&lt;/code&gt;&lt;/a&gt; package to call asynchronous importers from the synchronous code path. To enable this, pass the &lt;code&gt;Fiber&lt;/code&gt; class to the &lt;code&gt;fiber&lt;/code&gt; option:</source>
          <target state="translated">Dart Sassを使用する場合、非同期コールバックのオーバーヘッドにより、&lt;strong&gt;同期コンパイルは&lt;/strong&gt;デフォルトで&lt;strong&gt;非同期コンパイルの2倍高速になる&lt;/strong&gt;ことに注意してください。このオーバーヘッドを回避するには、&lt;a href=&quot;https://www.npmjs.com/package/fibers&quot;&gt; &lt;code&gt;fibers&lt;/code&gt; &lt;/a&gt;パッケージを使用して、同期コードパスから非同期インポーターを呼び出すことができます。これを有効にするには、 &lt;code&gt;Fiber&lt;/code&gt; クラスを &lt;code&gt;fiber&lt;/code&gt; オプションに渡します。</target>
        </trans-unit>
        <trans-unit id="7e888bdd78e1b01aca9023fb72d8bb1a201c25f1" translate="yes" xml:space="preserve">
          <source>Note that while the &lt;a href=&quot;../plugins/uglifyjs-webpack-plugin&quot;&gt;&lt;code&gt;UglifyJSPlugin&lt;/code&gt;&lt;/a&gt; is a great place to start for minification and being used by default, there are other options out there. Here are a few more popular ones:</source>
          <target state="translated">しながら、という注意&lt;a href=&quot;../plugins/uglifyjs-webpack-plugin&quot;&gt; &lt;code&gt;UglifyJSPlugin&lt;/code&gt; を&lt;/a&gt;縮小するために開始するには絶好の場所であり、デフォルトで使用されて、他のオプションがそこにあります。以下に、さらに人気のあるものをいくつか示します。</target>
        </trans-unit>
        <trans-unit id="8df64e9b197c087418dffb7ce19eb91dc4ca6fef" translate="yes" xml:space="preserve">
          <source>Note that you also need to create an &lt;code&gt;app.js&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;app.js&lt;/code&gt; ファイルも作成する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5958176f7c67ad08a6a4c97eb5a2909303d51d04" translate="yes" xml:space="preserve">
          <source>Note that you can use alias here and other features familiar from resolve. For example &lt;code&gt;{ txt: 'raw-loader' }&lt;/code&gt; would shim &lt;code&gt;txt!templates/demo.txt&lt;/code&gt; to use &lt;code&gt;raw-loader&lt;/code&gt;.</source>
          <target state="translated">ここでエイリアスを使用したり、resolveでおなじみの他の機能を使用したりできることに注意してください。たとえば、 &lt;code&gt;{ txt: 'raw-loader' }&lt;/code&gt; は、 &lt;code&gt;raw-loader&lt;/code&gt; を使用するために &lt;code&gt;txt!templates/demo.txt&lt;/code&gt; をシムします。</target>
        </trans-unit>
        <trans-unit id="dd6c6e3cb2fb6fc112fa914c9dd0f7aeea8587c3" translate="yes" xml:space="preserve">
          <source>Note that you can, and in most cases should, &lt;a href=&quot;../plugins/mini-css-extract-plugin#minimizing-for-production&quot;&gt;minimize css&lt;/a&gt; for better load times in production. On top of that, loaders exist for pretty much any flavor of CSS you can think of -- &lt;a href=&quot;../loaders/postcss-loader&quot;&gt;postcss&lt;/a&gt;, &lt;a href=&quot;../loaders/sass-loader&quot;&gt;sass&lt;/a&gt;, and &lt;a href=&quot;../loaders/less-loader&quot;&gt;less&lt;/a&gt; to name a few.</source>
          <target state="translated">本番&lt;a href=&quot;../plugins/mini-css-extract-plugin#minimizing-for-production&quot;&gt;環境&lt;/a&gt;での読み込み時間を短縮するために、CSSを最小限に抑えることができることに注意してください。その上で、ローダーは、あなたが考えることができるCSSのほとんどすべての味のために存在する- &lt;a href=&quot;../loaders/postcss-loader&quot;&gt;postcss&lt;/a&gt;、&lt;a href=&quot;../loaders/sass-loader&quot;&gt;SASS&lt;/a&gt;、および&lt;a href=&quot;../loaders/less-loader&quot;&gt;より少ない&lt;/a&gt;少数を示すために。</target>
        </trans-unit>
        <trans-unit id="8cbe56a819a9cacdccb119ca76713cb5f7e07f92" translate="yes" xml:space="preserve">
          <source>Note that you'll also need to check your &lt;code&gt;tsconfig.json&lt;/code&gt; file. If the module in &lt;code&gt;compilerOptions&lt;/code&gt; in &lt;code&gt;tsconfig.json&lt;/code&gt; is &lt;code&gt;commonjs&lt;/code&gt;, the setting is complete, else webpack will fail with an error. This occurs because &lt;code&gt;ts-node&lt;/code&gt; does not support any module syntax other than &lt;code&gt;commonjs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tsconfig.json&lt;/code&gt; ファイルも確認する必要があることに注意してください。内のモジュール場合 &lt;code&gt;compilerOptions&lt;/code&gt; で &lt;code&gt;tsconfig.json&lt;/code&gt; がある &lt;code&gt;commonjs&lt;/code&gt; 、設定が完了すると、他のWebPACKはエラーで失敗します。これは、 &lt;code&gt;ts-node&lt;/code&gt; が &lt;code&gt;commonjs&lt;/code&gt; 以外のモジュール構文をサポートしていないために発生します。</target>
        </trans-unit>
        <trans-unit id="6f66b816c2a36ab4b8c44090b95a9ba474da5377" translate="yes" xml:space="preserve">
          <source>Note the &lt;code&gt;unused harmony export square&lt;/code&gt; comment above. If you look at the code below it, you'll notice that &lt;code&gt;square&lt;/code&gt; is not being imported, however, it is still included in the bundle. We'll fix that in the next section.</source>
          <target state="translated">上記の &lt;code&gt;unused harmony export square&lt;/code&gt; コメントに注意してください。その下のコードを見ると、 &lt;code&gt;square&lt;/code&gt; がインポートされていないことがわかりますが、バンドルにはまだ含まれています。次のセクションで修正します。</target>
        </trans-unit>
        <trans-unit id="f48a6e716c077c9d9a1978a8abd790a7b794e196" translate="yes" xml:space="preserve">
          <source>Note the use of &lt;code&gt;chunkFilename&lt;/code&gt;, which determines the name of non-entry chunk files. For more information on &lt;code&gt;chunkFilename&lt;/code&gt;, see &lt;a href=&quot;../configuration/output#output-chunkfilename&quot;&gt;output documentation&lt;/a&gt;. We'll also update our project to remove the now unused files:</source>
          <target state="translated">エントリでないチャンクファイルの名前を決定する &lt;code&gt;chunkFilename&lt;/code&gt; の使用に注意してください。詳細については &lt;code&gt;chunkFilename&lt;/code&gt; 、参照&lt;a href=&quot;../configuration/output#output-chunkfilename&quot;&gt;出力のマニュアルを&lt;/a&gt;。プロジェクトを更新して、未使用のファイルを削除します。</target>
        </trans-unit>
        <trans-unit id="d0bb6c2d31383d9a9ef191d6f4abefdb96c47040" translate="yes" xml:space="preserve">
          <source>Note the use of &lt;code&gt;merge()&lt;/code&gt; in the environment-specific configurations to easily include our common configuration in &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;prod&lt;/code&gt;. The &lt;code&gt;webpack-merge&lt;/code&gt; tool offers a variety of advanced features for merging but for our use case we won't need any of that.</source>
          <target state="translated">環境固有の構成での &lt;code&gt;merge()&lt;/code&gt; の使用に注意して、 &lt;code&gt;dev&lt;/code&gt; および &lt;code&gt;prod&lt;/code&gt; に共通の構成を簡単に含めることができます。 &lt;code&gt;webpack-merge&lt;/code&gt; ツールは、マージするための高度な機能をご用意しておりますが、当社のユースケースのために、私たちはそのいずれかを必要としません。</target>
        </trans-unit>
        <trans-unit id="e1f83b85255c055aa0dd4ca3bf0926d6f9b529f9" translate="yes" xml:space="preserve">
          <source>Note the use of &lt;code&gt;webpackChunkName&lt;/code&gt; in the comment. This will cause our separate bundle to be named &lt;code&gt;lodash.bundle.js&lt;/code&gt; instead of just &lt;code&gt;[id].bundle.js&lt;/code&gt;. For more information on &lt;code&gt;webpackChunkName&lt;/code&gt; and the other available options, see the &lt;a href=&quot;../api/module-methods#import-&quot;&gt;&lt;code&gt;import()&lt;/code&gt; documentation&lt;/a&gt;. Let's run webpack to see &lt;code&gt;lodash&lt;/code&gt; separated out to a separate bundle:</source>
          <target state="translated">コメントでの &lt;code&gt;webpackChunkName&lt;/code&gt; の使用に注意してください。これにより、個別のバンドルは &lt;code&gt;[id].bundle.js&lt;/code&gt; だけではなく &lt;code&gt;lodash.bundle.js&lt;/code&gt; という名前になります。詳細については &lt;code&gt;webpackChunkName&lt;/code&gt; およびその他の利用可能なオプション、参照&lt;a href=&quot;../api/module-methods#import-&quot;&gt; &lt;code&gt;import()&lt;/code&gt; &lt;/a&gt;のドキュメントを。見るためにレッツ・実行のWebPACK &lt;code&gt;lodash&lt;/code&gt; は別のバンドルに分離しました：</target>
        </trans-unit>
        <trans-unit id="9f5400c0110f4aed7f5036b112b3b9ea47989a12" translate="yes" xml:space="preserve">
          <source>Note this option does not affect output files for on-demand-loaded chunks. For these files the &lt;a href=&quot;#output-chunkfilename&quot;&gt;&lt;code&gt;output.chunkFilename&lt;/code&gt;&lt;/a&gt; option is used. Files created by loaders also aren't affected. In this case you would have to try the specific loader's available options.</source>
          <target state="translated">このオプションは、オンデマンドロードされたチャンクの出力ファイルには影響しません。これらのファイルには、&lt;a href=&quot;#output-chunkfilename&quot;&gt; &lt;code&gt;output.chunkFilename&lt;/code&gt; &lt;/a&gt;オプションが使用されます。ローダーによって作成されたファイルも影響を受けません。この場合、特定のローダーの利用可能なオプションを試す必要があります。</target>
        </trans-unit>
        <trans-unit id="b1ecfcf85915f7191f0d04d5647a8f68d75f6d5e" translate="yes" xml:space="preserve">
          <source>Note this option is called filename but you are still allowed to use something like &lt;code&gt;&quot;js/[name]/bundle.js&quot;&lt;/code&gt; to create a folder structure.</source>
          <target state="translated">このオプションはファイル名と呼ばれますが、 &lt;code&gt;&quot;js/[name]/bundle.js&quot;&lt;/code&gt; ようなものを使用してフォルダ構造を作成することは引き続き許可されています。</target>
        </trans-unit>
        <trans-unit id="15eb3bf90deb8ee595f45bf48e24cec08c3ce209" translate="yes" xml:space="preserve">
          <source>Note: This page only discusses using plugins, however if you are interested in writing your own please visit &lt;a href=&quot;https://webpack.js.org/development/how-to-write-a-plugin/&quot;&gt;Writing a Plugin&lt;/a&gt;.</source>
          <target state="translated">注：このページではプラグインの使用についてのみ説明しますが、独自&lt;a href=&quot;https://webpack.js.org/development/how-to-write-a-plugin/&quot;&gt;のプラグイン&lt;/a&gt;を作成することに興味がある場合は、プラグインの作成にアクセスしてください。</target>
        </trans-unit>
        <trans-unit id="fe24033bacbfa2d35049038ddfa9c6e799872e63" translate="yes" xml:space="preserve">
          <source>Note: the &lt;code&gt;ts-loader&lt;/code&gt; documentation suggests the use of &lt;code&gt;cache-loader&lt;/code&gt;, but this actually slows the incremental builds down with disk writes.</source>
          <target state="translated">注： &lt;code&gt;ts-loader&lt;/code&gt; のドキュメントでは &lt;code&gt;cache-loader&lt;/code&gt; の使用が推奨されていますが、これは実際にはディスクへの書き込みに伴う増分ビルドの速度を低下させます。</target>
        </trans-unit>
        <trans-unit id="5e049edb6a232b51d2fcf3e47575f1899cfd4c9c" translate="yes" xml:space="preserve">
          <source>Nothing to see here .... yet</source>
          <target state="translated">ここで見るべきものは何もない......まだ</target>
        </trans-unit>
        <trans-unit id="b0cc522d30303e76a33c00b323d39df208ae966a" translate="yes" xml:space="preserve">
          <source>Notice anything different about &lt;code&gt;dist/bundle.js&lt;/code&gt;? Clearly the whole bundle is now minified and mangled, but, if you look carefully, you won't see the &lt;code&gt;square&lt;/code&gt; function included but will see a mangled version of the &lt;code&gt;cube&lt;/code&gt; function (&lt;code&gt;function r(e){return e*e*e}n.a=r&lt;/code&gt;). With minification and tree shaking our bundle is now a few bytes smaller! While that may not seem like much in this contrived example, tree shaking can yield a significant decrease in bundle size when working on larger applications with complex dependency trees.</source>
          <target state="translated">&lt;code&gt;dist/bundle.js&lt;/code&gt; について何か違うことに気づきましたか？明らかに、バンドル全体が縮小されてマングル化されていますが、注意深く見ると、 &lt;code&gt;square&lt;/code&gt; 関数が含まれていないことがわかりますが、 &lt;code&gt;cube&lt;/code&gt; 関数のマングルバージョンが表示されます（ &lt;code&gt;function r(e){return e*e*e}n.a=r&lt;/code&gt; ）。縮小とツリーの揺れにより、バンドルは数バイト小さくなりました！この不自然な例ではそれほど多くは思われないかもしれませんが、複雑な依存関係ツリーを持つ大規模なアプリケーションで作業する場合、ツリーの揺れによりバンドルサイズが大幅に減少することがあります。</target>
        </trans-unit>
        <trans-unit id="6bfed1ae1a19ae18e28dbbf171ef56bb79109e3c" translate="yes" xml:space="preserve">
          <source>Notice that throughout the configuration we use Node's built-in &lt;a href=&quot;https://nodejs.org/api/path.html&quot;&gt;path module&lt;/a&gt; and prefix it with the &lt;a href=&quot;https://nodejs.org/docs/latest/api/globals.html#globals_dirname&quot;&gt;__dirname&lt;/a&gt; global. This prevents file path issues between operating systems and allows relative paths to work as expected. See &lt;a href=&quot;https://nodejs.org/api/path.html#path_windows_vs_posix&quot;&gt;this section&lt;/a&gt; for more info on POSIX vs. Windows paths.</source>
          <target state="translated">構成全体を通して、Nodeの組み込み&lt;a href=&quot;https://nodejs.org/api/path.html&quot;&gt;パスモジュール&lt;/a&gt;を使用し、その前に&lt;a href=&quot;https://nodejs.org/docs/latest/api/globals.html#globals_dirname&quot;&gt;__dirname&lt;/a&gt;グローバルを付けることに注意してください。これにより、オペレーティングシステム間のファイルパスの問題が回避され、相対パスが期待どおりに機能するようになります。POSIXパスとWindowsパスの詳細については、&lt;a href=&quot;https://nodejs.org/api/path.html#path_windows_vs_posix&quot;&gt;このセクション&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="226a214c4e2eb4b79e49b7c5e1ed81d16a12d8da" translate="yes" xml:space="preserve">
          <source>Now add an npm script to make it a little easier to run the server:</source>
          <target state="translated">今度はnpmスクリプトを追加して、サーバーを少し動かしやすくします。</target>
        </trans-unit>
        <trans-unit id="ba9c969ad9ef2052b981443836f1219eef634594" translate="yes" xml:space="preserve">
          <source>Now adjust the config. We'll be adding our &lt;code&gt;src/print.js&lt;/code&gt; as a new entry point (&lt;code&gt;print&lt;/code&gt;) and we'll change the output as well, so that it will dynamically generate bundle names, based on the entry point names:</source>
          <target state="translated">次に設定を調整します。 &lt;code&gt;src/print.js&lt;/code&gt; を新しいエントリポイント（ &lt;code&gt;print&lt;/code&gt; ）として追加し、出力も変更して、エントリポイント名に基づいてバンドル名を動的に生成するようにします。</target>
        </trans-unit>
        <trans-unit id="ccc79ac956503a03e31c1d81aeba58819266faca" translate="yes" xml:space="preserve">
          <source>Now fire up your browser and go to &lt;code&gt;http://localhost:3000&lt;/code&gt;. You should see your webpack app running and functioning!</source>
          <target state="translated">ブラウザを起動して、 &lt;code&gt;http://localhost:3000&lt;/code&gt; にアクセスします。Webpackアプリが実行され、機能していることを確認してください。</target>
        </trans-unit>
        <trans-unit id="0034d36f4a8922a018612029cd5aa20507ba293d" translate="yes" xml:space="preserve">
          <source>Now from within our entry script (i.e. &lt;code&gt;src/index.js&lt;/code&gt;), we could &lt;code&gt;import { file, parse } from './globals.js';&lt;/code&gt; and all should work smoothly.</source>
          <target state="translated">これで、エントリスクリプト（つまり、 &lt;code&gt;src/index.js&lt;/code&gt; ）内 &lt;code&gt;import { file, parse } from './globals.js';&lt;/code&gt; できました。そして、すべてがスムーズに動作するはずです。</target>
        </trans-unit>
        <trans-unit id="77fd810b85b608ae4a0e8b00b4265d713751a351" translate="yes" xml:space="preserve">
          <source>Now in your terminal run &lt;code&gt;npm run server&lt;/code&gt;, it should give you an output similar to this:</source>
          <target state="translated">ターミナルで &lt;code&gt;npm run server&lt;/code&gt; を実行すると、次のような出力が表示されます。</target>
        </trans-unit>
        <trans-unit id="18401d6763e56a1b0d4bad8ebaaa66901cb3b871" translate="yes" xml:space="preserve">
          <source>Now let's bundle this library in a way that will achieve the following goals:</source>
          <target state="translated">では、次の目的を達成するために、このライブラリをバンドルしてみましょう。</target>
        </trans-unit>
        <trans-unit id="a70cc89b388022d69a6163728328a8c05948be7a" translate="yes" xml:space="preserve">
          <source>Now let's configure webpack to handle TypeScript:</source>
          <target state="translated">それでは、WebpackがTypeScriptを扱うように設定してみましょう。</target>
        </trans-unit>
        <trans-unit id="9df3f71d4a04568b0e39f6f47c094d9602a090cd" translate="yes" xml:space="preserve">
          <source>Now let's make sure we have something to debug, so let's create an error in our &lt;code&gt;print.js&lt;/code&gt; file:</source>
          <target state="translated">次に、デバッグするものがあることを確認して、 &lt;code&gt;print.js&lt;/code&gt; ファイルにエラーを作成します。</target>
        </trans-unit>
        <trans-unit id="3229a4dbd70f76dcc03ac5f7aa8eb2f27ed80939" translate="yes" xml:space="preserve">
          <source>Now let's repoint our &lt;code&gt;scripts&lt;/code&gt; to the new configurations. We'll use the &lt;em&gt;development&lt;/em&gt; one for our &lt;code&gt;webpack-dev-server&lt;/code&gt;, &lt;code&gt;npm start&lt;/code&gt;, script and the &lt;em&gt;production&lt;/em&gt; one for our &lt;code&gt;npm run build&lt;/code&gt; script:</source>
          <target state="translated">次に、 &lt;code&gt;scripts&lt;/code&gt; を新しい構成に再ポイントします。私たちは、使用します&lt;em&gt;開発&lt;/em&gt;私たちのための1つ &lt;code&gt;webpack-dev-server&lt;/code&gt; 、 &lt;code&gt;npm start&lt;/code&gt; 、スクリプトや&lt;em&gt;生産&lt;/em&gt;、私たちのために1を &lt;code&gt;npm run build&lt;/code&gt; スクリプト：</target>
        </trans-unit>
        <trans-unit id="c6c1d1cc7ab59c528e90c3b472368fa33a7ed117" translate="yes" xml:space="preserve">
          <source>Now let's run webpack and check out our new lazy-loading functionality:</source>
          <target state="translated">では、webpackを実行して、新しい遅延ロード機能をチェックしてみましょう。</target>
        </trans-unit>
        <trans-unit id="b357dbc2857140b0c90d8fb740c1c50892deaf49" translate="yes" xml:space="preserve">
          <source>Now let's update the &lt;code&gt;index.js&lt;/code&gt; file so that when a change inside &lt;code&gt;print.js&lt;/code&gt; is detected we tell webpack to accept the updated module.</source>
          <target state="translated">次に、 &lt;code&gt;index.js&lt;/code&gt; ファイルを更新して、 &lt;code&gt;print.js&lt;/code&gt; 内の変更が検出されたときに、更新されたモジュールを受け入れるようにwebpackに指示します。</target>
        </trans-unit>
        <trans-unit id="71b5c89b181903b4550c4426aa8f370a3e20c41e" translate="yes" xml:space="preserve">
          <source>Now let's update the configuration file to make use of the loader.</source>
          <target state="translated">それでは、ローダーを利用するための設定ファイルを更新してみましょう。</target>
        </trans-unit>
        <trans-unit id="6e465855273d6f2a32129306059f1f12d5ae5391" translate="yes" xml:space="preserve">
          <source>Now open the resulting &lt;code&gt;index.html&lt;/code&gt; file in your browser. Click the button and look in your console where the error is displayed. The error should say something like this:</source>
          <target state="translated">結果の &lt;code&gt;index.html&lt;/code&gt; ファイルをブラウザーで開きます。ボタンをクリックして、エラーが表示されているコンソールを確認します。エラーは次のようになります。</target>
        </trans-unit>
        <trans-unit id="4e7301a0388be473c7b02660fc1b9c005fb15f3f" translate="yes" xml:space="preserve">
          <source>Now run &lt;code&gt;npm run watch&lt;/code&gt; from the command line and see how webpack compiles your code. You can see that it doesn't exit the command line because the script is currently watching your files.</source>
          <target state="translated">次に、コマンドラインから &lt;code&gt;npm run watch&lt;/code&gt; を実行し、webpackがコードをコンパイルする方法を確認します。スクリプトが現在ファイルを監視しているため、コマンドラインを終了しないことがわかります。</target>
        </trans-unit>
        <trans-unit id="a8819a3694737e7abc14d60fcbf8c0bb4201c624" translate="yes" xml:space="preserve">
          <source>Now run a new build and let's see if webpack handled our fonts:</source>
          <target state="translated">では、新しいビルドを実行して、webpack がフォントを扱うかどうかを確認してみましょう。</target>
        </trans-unit>
        <trans-unit id="8bc10b3505d1b8a53aea70ead4b91821f2ae548d" translate="yes" xml:space="preserve">
          <source>Now run an &lt;code&gt;npm run build&lt;/code&gt; and inspect the &lt;code&gt;/dist&lt;/code&gt; folder. If everything went well you should now only see the files generated from the build and no more old files!</source>
          <target state="translated">次に、 &lt;code&gt;npm run build&lt;/code&gt; を実行して、 &lt;code&gt;/dist&lt;/code&gt; フォルダーを検査します。すべてがうまくいけば、ビルドから生成されたファイルだけが表示され、古いファイルは表示されなくなります。</target>
        </trans-unit>
        <trans-unit id="c980596675b42b015fa33b5ec44395e051396087" translate="yes" xml:space="preserve">
          <source>Now run the following command and see if your script alias works:</source>
          <target state="translated">次のコマンドを実行して、スクリプトのエイリアスが動作するかどうかを確認してください。</target>
        </trans-unit>
        <trans-unit id="51925bf23211310f8cdb3feec20b576227cc12df" translate="yes" xml:space="preserve">
          <source>Now run your build command:</source>
          <target state="translated">ここでビルドコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="8bc24f3703809a27283cf6928903a1da64a677fa" translate="yes" xml:space="preserve">
          <source>Now save your file and check the terminal window. You should see that webpack automatically recompiles the changed module!</source>
          <target state="translated">ファイルを保存してターミナルウィンドウを確認してください。webpack が自動的に変更されたモジュールを再コンパイルしているのがわかるはずです!</target>
        </trans-unit>
        <trans-unit id="b0a22991df6a10bea7b0cd5b6859050cd2788ab5" translate="yes" xml:space="preserve">
          <source>Now that you have a basic build together you should move on to the next guide &lt;a href=&quot;asset-management&quot;&gt;&lt;code&gt;Asset Management&lt;/code&gt;&lt;/a&gt; to learn how to manage assets like images and fonts with webpack. At this point, your project should look like this:</source>
          <target state="translated">これで基本的なビルドが完了したので、次のガイドの&lt;a href=&quot;asset-management&quot;&gt; &lt;code&gt;Asset Management&lt;/code&gt; &lt;/a&gt;に進んで、画像やフォントなどのアセットをWebpackで管理する方法を学ぶ必要があります。この時点で、プロジェクトは次のようになります。</target>
        </trans-unit>
        <trans-unit id="63f3473f5e6ea29aae9778ab6ce863473f1f035c" translate="yes" xml:space="preserve">
          <source>Now that you've learned about dynamically adding bundles to your HTML, let's dive into the &lt;a href=&quot;development&quot;&gt;development guide&lt;/a&gt;. Or, if you want to dig into more advanced topics, we would recommend heading over to the &lt;a href=&quot;code-splitting&quot;&gt;code splitting guide&lt;/a&gt;.</source>
          <target state="translated">バンドルをHTMLに動的に追加する方法を学習したので、&lt;a href=&quot;development&quot;&gt;開発ガイドに&lt;/a&gt;飛び込んでみましょう。または、より高度なトピックを掘り下げたい場合は、&lt;a href=&quot;code-splitting&quot;&gt;コード分​​割ガイド&lt;/a&gt;をご覧になることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4e6078b764dd6ee14190b4f56b64b8835f7f586a" translate="yes" xml:space="preserve">
          <source>Now that you've learned how to automatically compile your code and run a simple development server, you can check out the next guide, which will cover &lt;a href=&quot;hot-module-replacement&quot;&gt;Hot Module Replacement&lt;/a&gt;.</source>
          <target state="translated">コードを自動的にコンパイルして簡単な開発サーバーを実行する方法を学習したので、次のガイドで&lt;a href=&quot;hot-module-replacement&quot;&gt;ホットモジュールの交換について説明し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="a68fcc5f419a8da05abd5181c9cc69d770f8fd8f" translate="yes" xml:space="preserve">
          <source>Now that your server is working, you might want to give &lt;a href=&quot;hot-module-replacement&quot;&gt;Hot Module Replacement&lt;/a&gt; a try!</source>
          <target state="translated">サーバーが動作しているので、&lt;a href=&quot;hot-module-replacement&quot;&gt;ホットモジュールの交換&lt;/a&gt;を試してみてください。</target>
        </trans-unit>
        <trans-unit id="a2d984465f0c1b21f3d0ec45a0fe32d762bf606b" translate="yes" xml:space="preserve">
          <source>Now the &lt;code&gt;npm run build&lt;/code&gt; command can be used in place of the &lt;code&gt;npx&lt;/code&gt; command we used earlier. Note that within &lt;code&gt;scripts&lt;/code&gt; we can reference locally installed npm packages by name the same way we did with &lt;code&gt;npx&lt;/code&gt;. This convention is the standard in most npm-based projects because it allows all contributors to use the same set of common scripts (each with flags like &lt;code&gt;--config&lt;/code&gt; if necessary).</source>
          <target state="translated">これで、前に使用した &lt;code&gt;npx&lt;/code&gt; コマンドの代わりに &lt;code&gt;npm run build&lt;/code&gt; コマンドを使用できます。 &lt;code&gt;scripts&lt;/code&gt; 内では、ローカルにインストールされたnpmパッケージを、 &lt;code&gt;npx&lt;/code&gt; で行ったのと同じ方法で名前で参照できることに注意してください。この規則は、すべての寄稿者が同じ共通スクリプトのセットを使用できるようにするため、ほとんどのnpmベースのプロジェクトの標準です（必要に応じて、それぞれに &lt;code&gt;--config&lt;/code&gt; のようなフラグを付けます）。</target>
        </trans-unit>
        <trans-unit id="e270bde6ce552781a474737a3e2add61123b1002" translate="yes" xml:space="preserve">
          <source>Now to test it. Stop your server and refresh your page. If your browser supports Service Workers then you should still be looking at your application. However, it has been served up by your Service Worker and &lt;strong&gt;not&lt;/strong&gt; by the server.</source>
          <target state="translated">それをテストします。サーバーを停止してページを更新します。ブラウザーがService Workersをサポートしている場合でも、アプリケーションを確認する必要があります。ただし、サーバーで&lt;strong&gt;はなく&lt;/strong&gt;サービスワーカーによって提供されています。</target>
        </trans-unit>
        <trans-unit id="3429ffa15c0495b0937445ca31923a90c00d6386" translate="yes" xml:space="preserve">
          <source>Now we can &lt;code&gt;fetch&lt;/code&gt; some data within our entry script:</source>
          <target state="translated">これで、エントリスクリプト内でデータを &lt;code&gt;fetch&lt;/code&gt; できます。</target>
        </trans-unit>
        <trans-unit id="f093f6e8b13dfdaefb7b274645cdc1f312a7f06f" translate="yes" xml:space="preserve">
          <source>Now we can run &lt;code&gt;npm start&lt;/code&gt; from the command line and we will see our browser automatically loading up our page. If you now change any of the source files and save them, the web server will automatically reload after the code has been compiled. Give it a try!</source>
          <target state="translated">これで、コマンドラインから &lt;code&gt;npm start&lt;/code&gt; を実行できるようになり、ブラウザーが自動的にページをロードするのがわかります。ソースファイルを変更して保存すると、コードのコンパイル後にWebサーバーが自動的に再読み込みされます。試してみる！</target>
        </trans-unit>
        <trans-unit id="2f28031dc5f208149117e7b6980c34e1b46cf0d9" translate="yes" xml:space="preserve">
          <source>Now we need to make some adjustments to our webpack configuration file in order to make sure the middleware will function correctly:</source>
          <target state="translated">さて、ミドルウェアが正しく機能するようにするために、webpack の設定ファイルを調整する必要があります。</target>
        </trans-unit>
        <trans-unit id="6803b16f69e184ab5c2f00b5adc4e2e50fea89fd" translate="yes" xml:space="preserve">
          <source>Now we need to tell webpack to extract these source maps and into our final bundle:</source>
          <target state="translated">ここで、webpack にこれらのソースマップを抽出して最終的なバンドルに入れるように指示する必要があります。</target>
        </trans-unit>
        <trans-unit id="daa2cc1ebd5f54388aa2a4c401a9c199eb5e43d4" translate="yes" xml:space="preserve">
          <source>Now we'll create the following directory structure, files and their contents:</source>
          <target state="translated">それでは、以下のようなディレクトリ構造、ファイルとその内容を作成します。</target>
        </trans-unit>
        <trans-unit id="6562086000c2c226ec3f442cf46f81b89bd3de6e" translate="yes" xml:space="preserve">
          <source>Now we'll modify the directory structure &amp;amp; the configuration files:</source>
          <target state="translated">次に、ディレクトリ構造と構成ファイルを変更します。</target>
        </trans-unit>
        <trans-unit id="31b35117645d81df56c33faf2b4b4d353a9955cf" translate="yes" xml:space="preserve">
          <source>Now while this is one approach, &lt;strong&gt;including polyfills in the main bundle is not recommended&lt;/strong&gt; because this penalizes modern browsers users by making them download a bigger file with unneeded scripts.</source>
          <target state="translated">現在、これは1つのアプローチ&lt;strong&gt;ですが、メインバンドルにポリフィルを含める&lt;/strong&gt;こと&lt;strong&gt;はお勧めしません&lt;/strong&gt;。これ&lt;strong&gt;は&lt;/strong&gt;、不要なスクリプトを含む大きなファイルをダウンロードさせることにより、最新のブラウザーユーザーに不利益&lt;strong&gt;を与える&lt;/strong&gt;ためです。</target>
        </trans-unit>
        <trans-unit id="c017ac0b58a1e44fd17a64785c17d91b2434e315" translate="yes" xml:space="preserve">
          <source>Now you can &lt;a href=&quot;https://docs.npmjs.com/getting-started/publishing-npm-packages&quot;&gt;publish it as an npm package&lt;/a&gt; and find it at &lt;a href=&quot;https://unpkg.com/#/&quot;&gt;unpkg.com&lt;/a&gt; to distribute it to your users.</source>
          <target state="translated">これで&lt;a href=&quot;https://docs.npmjs.com/getting-started/publishing-npm-packages&quot;&gt;、それをnpmパッケージとして公開し&lt;/a&gt;、&lt;a href=&quot;https://unpkg.com/#/&quot;&gt;unpkg.comで&lt;/a&gt;見つけてユーザーに配布できます。</target>
        </trans-unit>
        <trans-unit id="c56a5281cd3189f4c2a26baaf0f26739acba3635" translate="yes" xml:space="preserve">
          <source>Now you can &lt;code&gt;import&lt;/code&gt; any one of those four types of data (JSON, CSV, TSV, XML) and the &lt;code&gt;Data&lt;/code&gt; variable you import it to will contain parsed JSON for easy consumption:</source>
          <target state="translated">これで、これらの4種類のデータ（JSON、CSV、TSV、XML）のいずれか1つを &lt;code&gt;import&lt;/code&gt; できます。インポートする &lt;code&gt;Data&lt;/code&gt; 変数には、簡単に使用できるように解析されたJSONが含まれます。</target>
        </trans-unit>
        <trans-unit id="265845569f199bb01e68a398054540a25437c594" translate="yes" xml:space="preserve">
          <source>Now, despite any new local dependencies, our &lt;code&gt;vendor&lt;/code&gt; hash should stay consistent between builds:</source>
          <target state="translated">これで、新しいローカル依存関係があるにもかかわらず、 &lt;code&gt;vendor&lt;/code&gt; ハッシュはビルド間で一貫性を保つ必要があります。</target>
        </trans-unit>
        <trans-unit id="f761146f1614b48479a5e6ca2bd6ebf8ba49cee3" translate="yes" xml:space="preserve">
          <source>Now, if you run &lt;code&gt;webpack&lt;/code&gt;, you will find that a largish bundle is created. If you inspect the file, you'll see that lodash has been bundled along with your code. In this case, we'd prefer to treat &lt;code&gt;lodash&lt;/code&gt; as a &lt;code&gt;peerDependency&lt;/code&gt;. Meaning that the consumer should already have &lt;code&gt;lodash&lt;/code&gt; installed. Hence you would want to give up control of this external library to the consumer of your library.</source>
          <target state="translated">これで、 &lt;code&gt;webpack&lt;/code&gt; を実行すると、大量のバンドルが作成されていることがわかります。ファイルを調べると、lodashがコードにバンドルされていることがわかります。この場合、 &lt;code&gt;lodash&lt;/code&gt; をpeerDependencyとして扱うことをお &lt;code&gt;peerDependency&lt;/code&gt; ます。つまり、コンシューマはすでに &lt;code&gt;lodash&lt;/code&gt; をインストールしている必要があります。したがって、この外部ライブラリの制御をライブラリの利用者に譲る必要があります。</target>
        </trans-unit>
        <trans-unit id="a629b8ca075bd87b327deed9d51fd9489a0a6b97" translate="yes" xml:space="preserve">
          <source>Now, instead of statically importing &lt;code&gt;lodash&lt;/code&gt;, we'll use dynamic importing to separate a chunk:</source>
          <target state="translated">ここで、 &lt;code&gt;lodash&lt;/code&gt; を静的にインポートする代わりに、動的インポートを使用してチャンクを分離します。</target>
        </trans-unit>
        <trans-unit id="0cd00ca893b2a0749390d1af07518b98228e0602" translate="yes" xml:space="preserve">
          <source>Now, instead of using relative paths when importing like so:</source>
          <target state="translated">さて、このようにインポート時に相対パスを使用する代わりに</target>
        </trans-unit>
        <trans-unit id="874226ce9b8d4f709d901e4a8f3b465be18e2ead" translate="yes" xml:space="preserve">
          <source>Now, let's run the build again but instead using our new configuration file:</source>
          <target state="translated">では、もう一度ビルドを実行してみましょう。</target>
        </trans-unit>
        <trans-unit id="986bf8dcf09bfee2a81153f0cc4b7d4079a76fdd" translate="yes" xml:space="preserve">
          <source>Now, let's run the server:</source>
          <target state="translated">では、サーバーを実行してみましょう。</target>
        </trans-unit>
        <trans-unit id="1680bb02d344f54fd6614cf2db07f6f8b483e824" translate="yes" xml:space="preserve">
          <source>Now, lets import &lt;code&gt;lodash&lt;/code&gt; in our script:</source>
          <target state="translated">では、スクリプトに &lt;code&gt;lodash&lt;/code&gt; をインポートしましょう。</target>
        </trans-unit>
        <trans-unit id="3329ecf744f220187e0a153c22fffbf77657a9cd" translate="yes" xml:space="preserve">
          <source>Now, since we'll be bundling our scripts, we have to update our &lt;code&gt;index.html&lt;/code&gt; file. Let's remove the lodash &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;, as we now &lt;code&gt;import&lt;/code&gt; it, and modify the other &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag to load the bundle, instead of the raw &lt;code&gt;/src&lt;/code&gt; file:</source>
          <target state="translated">次に、スクリプトをバンドルするので、 &lt;code&gt;index.html&lt;/code&gt; ファイルを更新する必要があります。lodash &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; を削除してみましょう。今度はそれを &lt;code&gt;import&lt;/code&gt; し、他の &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグを変更して、未加工の &lt;code&gt;/src&lt;/code&gt; ファイルの代わりにバンドルをロードします。</target>
        </trans-unit>
        <trans-unit id="b6aed7a8c232d4f22dcc8c9e16fdd539b90239b3" translate="yes" xml:space="preserve">
          <source>Now, when you &lt;code&gt;import MyImage from './my-image.png'&lt;/code&gt;, that image will be processed and added to your &lt;code&gt;output&lt;/code&gt; directory &lt;em&gt;and&lt;/em&gt; the &lt;code&gt;MyImage&lt;/code&gt; variable will contain the final url of that image after processing. When using the &lt;a href=&quot;../loaders/css-loader&quot;&gt;css-loader&lt;/a&gt;, as shown above, a similar process will occur for &lt;code&gt;url('./my-image.png')&lt;/code&gt; within your CSS. The loader will recognize this is a local file, and replace the &lt;code&gt;'./my-image.png'&lt;/code&gt; path with the final path to the image in your &lt;code&gt;output&lt;/code&gt; directory. The &lt;a href=&quot;../loaders/html-loader&quot;&gt;html-loader&lt;/a&gt; handles &lt;code&gt;&amp;lt;img src=&quot;./my-image.png&quot; /&amp;gt;&lt;/code&gt; in the same manner.</source>
          <target state="translated">あなたは今とき、 &lt;code&gt;import MyImage from './my-image.png'&lt;/code&gt; 、その画像を処理し、あなたに追加される &lt;code&gt;output&lt;/code&gt; ディレクトリ&lt;em&gt;と&lt;/em&gt; &lt;code&gt;MyImage&lt;/code&gt; 変数は、処理後にその画像の最終URLが含まれています。上記の&lt;a href=&quot;../loaders/css-loader&quot;&gt;css-loader&lt;/a&gt;を使用する場合、CSS内の &lt;code&gt;url('./my-image.png')&lt;/code&gt; に対して同様のプロセスが発生します。ローダーはこれがローカルファイルであることを認識し、 &lt;code&gt;'./my-image.png'&lt;/code&gt; パスを &lt;code&gt;output&lt;/code&gt; ディレクトリ内の画像への最終パスに置き換えます。&lt;a href=&quot;../loaders/html-loader&quot;&gt;HTMLローダー&lt;/a&gt;ハンドル &lt;code&gt;&amp;lt;img src=&quot;./my-image.png&quot; /&amp;gt;&lt;/code&gt; 同様インチ</target>
        </trans-unit>
        <trans-unit id="6b7da57438c329ba7464308376a362cbddd7baa9" translate="yes" xml:space="preserve">
          <source>Now, while webpack is watching your files, let's remove the error we introduced earlier:</source>
          <target state="translated">さて、webpackがファイルを監視している間に、先ほど紹介したエラーを削除してみましょう。</target>
        </trans-unit>
        <trans-unit id="d81b4a09efa67c7104acb6c4bee17b6c13687d8f" translate="yes" xml:space="preserve">
          <source>Now, while you'd likely never do this in your own source code, you may encounter a dated library you'd like to use that contains similar code to what's shown above. In this case, we can use &lt;a href=&quot;../loaders/exports-loader&quot;&gt;&lt;code&gt;exports-loader&lt;/code&gt;&lt;/a&gt;, to export that global variable as a normal module export. For instance, in order to export &lt;code&gt;file&lt;/code&gt; as &lt;code&gt;file&lt;/code&gt; and &lt;code&gt;helpers.parse&lt;/code&gt; as &lt;code&gt;parse&lt;/code&gt;:</source>
          <target state="translated">これで、独自のソースコードでこれを実行することはほとんどありませんが、上記と同様のコードを含む、使用したい日付の付いたライブラリに遭遇する可能性があります。この場合、&lt;a href=&quot;../loaders/exports-loader&quot;&gt; &lt;code&gt;exports-loader&lt;/code&gt; を&lt;/a&gt;使用して、そのグローバル変数を通常のモジュールエクスポートとしてエクスポートできます。たとえば、 &lt;code&gt;file&lt;/code&gt; として、 &lt;code&gt;helpers.parse&lt;/code&gt; を &lt;code&gt;parse&lt;/code&gt; としてエクスポートするには、次のようにし &lt;code&gt;file&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="399d20d411a9c4dff19abde6554a5d895eb38571" translate="yes" xml:space="preserve">
          <source>NpmInstallWebpackPlugin</source>
          <target state="translated">NpmInstallWebpackPlugin</target>
        </trans-unit>
        <trans-unit id="be3a794df3289dcdea5cded366c1d14e024a75cc" translate="yes" xml:space="preserve">
          <source>Number of concurrent runs.</source>
          <target state="translated">同時実行数。</target>
        </trans-unit>
        <trans-unit id="0dd75d7fe90f97130245d0b8fb2d960bf44b4a9b" translate="yes" xml:space="preserve">
          <source>Number of loaders applied before CSS loader</source>
          <target state="translated">CSSローダーの前に適用されたローダーの数</target>
        </trans-unit>
        <trans-unit id="1b52ac3b1bd1ab12ad0b5dd55afd7d6dde5b1b25" translate="yes" xml:space="preserve">
          <source>Number of milliseconds before chunk request expires, defaults to 120 000. This option is supported since webpack 2.6.0.</source>
          <target state="translated">チャンク要求が終了するまでのミリ秒数、 デフ ォル ト は 120 000 です。このオプションは webpack 2.6.0 以降でサポートされています。</target>
        </trans-unit>
        <trans-unit id="68654e143c9a95a12dddf5b994152ad350c30fec" translate="yes" xml:space="preserve">
          <source>Object Syntax</source>
          <target state="translated">オブジェクト構文</target>
        </trans-unit>
        <trans-unit id="7947d508a33ca1ae0b7138218e54d2bb97876b9c" translate="yes" xml:space="preserve">
          <source>OccurenceOrderPlugin</source>
          <target state="translated">OccurenceOrderPlugin</target>
        </trans-unit>
        <trans-unit id="dc2284b54a904eb3a4b7df2c787412d7142025db" translate="yes" xml:space="preserve">
          <source>Offers a pseudo &lt;code&gt;console&lt;/code&gt; if it is not available.</source>
          <target state="translated">使用できない場合は、疑似 &lt;code&gt;console&lt;/code&gt; 提供します。</target>
        </trans-unit>
        <trans-unit id="c1721ea0ada849ea800504498417a4b2c890ec62" translate="yes" xml:space="preserve">
          <source>Often webpack users use npm &lt;a href=&quot;https://docs.npmjs.com/misc/scripts&quot;&gt;&lt;code&gt;scripts&lt;/code&gt;&lt;/a&gt; as their task runner. This is a good starting point. Cross-platform support can become a problem, but there are several workarounds for that. Many, if not most users, get by with simple npm &lt;code&gt;scripts&lt;/code&gt; and various levels of webpack configuration and tooling.</source>
          <target state="translated">多くの場合、webpackユーザーはタスクランナーとしてnpm &lt;a href=&quot;https://docs.npmjs.com/misc/scripts&quot;&gt; &lt;code&gt;scripts&lt;/code&gt; &lt;/a&gt;を使用します。これは良い出発点です。クロスプラットフォームのサポートが問題になる可能性がありますが、これにはいくつかの回避策があります。ほとんどではないにしても、多くのユーザーは、単純なnpm &lt;code&gt;scripts&lt;/code&gt; とさまざまなレベルのWebpack構成およびツールを使用して問題を解決します。</target>
        </trans-unit>
        <trans-unit id="f4feaa47f1e0f091d117b8cee638f02e96b61670" translate="yes" xml:space="preserve">
          <source>On The Fly</source>
          <target state="translated">オンザフライ</target>
        </trans-unit>
        <trans-unit id="7de9397c7392465a52ccc17659d99604f9bc08a6" translate="yes" xml:space="preserve">
          <source>On macOS, folders can get corrupted in certain scenarios. See &lt;a href=&quot;https://github.com/livereload/livereload-site/blob/master/livereload.com/_articles/troubleshooting/os-x-fsevents-bug-may-prevent-monitoring-of-certain-folders.md&quot;&gt;this article&lt;/a&gt;.</source>
          <target state="translated">macOSでは、特定のシナリオでフォルダーが破損する可能性があります。&lt;a href=&quot;https://github.com/livereload/livereload-site/blob/master/livereload.com/_articles/troubleshooting/os-x-fsevents-bug-may-prevent-monitoring-of-certain-folders.md&quot;&gt;この記事を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="84b858cc3d43880aa44f3a030f7d826f5e1d7470" translate="yes" xml:space="preserve">
          <source>On some machines Vim is preconfigured with the &lt;a href=&quot;http://vimdoc.sourceforge.net/htmldoc/options.html#'backupcopy'&quot;&gt;backupcopy option&lt;/a&gt; set to &lt;code&gt;auto&lt;/code&gt;. This could potentially cause problems with the system's file watching mechanism. Switching this option to &lt;code&gt;yes&lt;/code&gt; will make sure a copy of the file is made and the original one overwritten on save.</source>
          <target state="translated">一部のマシンでは、Vimは&lt;a href=&quot;http://vimdoc.sourceforge.net/htmldoc/options.html#'backupcopy'&quot;&gt;backupcopyオプション&lt;/a&gt;を &lt;code&gt;auto&lt;/code&gt; に設定して事前構成されています。これにより、システムのファイル監視メカニズムで問題が発生する可能性があります。このオプションを &lt;code&gt;yes&lt;/code&gt; に切り替えると、ファイルのコピーが作成され、保存時に元のファイルが上書きされます。</target>
        </trans-unit>
        <trans-unit id="d6798ad6de81322dfee53e4558a7194dfe6d9bb6" translate="yes" xml:space="preserve">
          <source>On the Insecurity of Whitelists and the Future of Content Security Policy</source>
          <target state="translated">ホワイトリストの安全性とコンテンツセキュリティポリシーの将来について</target>
        </trans-unit>
        <trans-unit id="ff78f30ec56f6105598ce29b71aaed70575b3650" translate="yes" xml:space="preserve">
          <source>Once more &lt;code&gt;npm run build&lt;/code&gt; to build a version of the app including the registration code. Then serve it with &lt;code&gt;npm start&lt;/code&gt;. Navigate to &lt;code&gt;http://localhost:8080&lt;/code&gt; and take a look at the console. Somewhere in there you should see:</source>
          <target state="translated">もう一度 &lt;code&gt;npm run build&lt;/code&gt; て、登録コードを含むアプリのバージョンをビルドします。次に、それを &lt;code&gt;npm start&lt;/code&gt; で提供します。移動し &lt;code&gt;http://localhost:8080&lt;/code&gt; とコンソールを見てみましょう。どこかであなたは見るべきです：</target>
        </trans-unit>
        <trans-unit id="02ed0e62fa33898ffdff4abc0a942e61293061af" translate="yes" xml:space="preserve">
          <source>Once the path is resolved based on the above rule, the resolver checks to see if the path points to a file or a directory. If the path points to a file:</source>
          <target state="translated">上記のルールに基づいてパスが解決されると、リゾルバはパスがファイルを指しているかディレクトリを指しているかを確認します。パスがファイルを指している場合</target>
        </trans-unit>
        <trans-unit id="56fd850a2bc86a27439d2644ee02a9390b380522" translate="yes" xml:space="preserve">
          <source>Once you start splitting your code, it can be useful to analyze the output to check where modules have ended up. The &lt;a href=&quot;https://github.com/webpack/analyse&quot;&gt;official analyze tool&lt;/a&gt; is a good place to start. There are some other community-supported options out there as well:</source>
          <target state="translated">コードの分割を開始したら、出力を分析してモジュールがどこに到達したかを確認すると便利です。&lt;a href=&quot;https://github.com/webpack/analyse&quot;&gt;公式ツールは、分析&lt;/a&gt;を開始するには良い場所です。他にもコミュニティがサポートするオプションがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="a1718ef4adbff4d61ad5bd148b2c67b6b67258b9" translate="yes" xml:space="preserve">
          <source>One approach is to have a &quot;bootstrap&quot; step in your application that would first override the default globals before your application:</source>
          <target state="translated">1 つのアプローチは、アプリケーションに &quot;ブートストラップ&quot; ステップを設けて、アプリケーションの前にデフォルトのグローバルをオーバーライドすることです。</target>
        </trans-unit>
        <trans-unit id="f3776ba2e5eb3b8a3f40e34afed5eb5f87063a3f" translate="yes" xml:space="preserve">
          <source>One of the coolest webpack features is that you can also &lt;em&gt;include any other type of file&lt;/em&gt;, besides JavaScript, for which there is a loader. This means that the same benefits listed above for JavaScript (e.g. explicit dependencies) can be applied to everything used in building a website or web app. Let's start with CSS, as you may already be familiar with that setup.</source>
          <target state="translated">最も優れたWebpack機能の1つは、JavaScript以外にローダーがある&lt;em&gt;他のタイプのファイル&lt;/em&gt;も&lt;em&gt;含める&lt;/em&gt;ことができることです。これは、JavaScriptの上記の同じ利点（明示的な依存関係など）が、WebサイトまたはWebアプリの構築に使用されるすべてに適用できることを意味します。CSSから始めましょう。既にその設定に慣れている場合があります。</target>
        </trans-unit>
        <trans-unit id="ed5f9f967dca918d1a0a08adbea84bed21743aa6" translate="yes" xml:space="preserve">
          <source>One option is to export a function from your webpack config instead of exporting an object. The function will be invoked with two arguments:</source>
          <target state="translated">1つのオプションは、オブジェクトをエクスポートするのではなく、webpackの設定から関数をエクスポートすることです。関数は2つの引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="040483fac8d867e7e6b1daab52fb6ad30eec5e47" translate="yes" xml:space="preserve">
          <source>One or more updated chunks (JavaScript)</source>
          <target state="translated">1つ以上の更新されたチャンク(JavaScript)</target>
        </trans-unit>
        <trans-unit id="c6560e0c28982b656a84c6a7c15954ea75bcb147" translate="yes" xml:space="preserve">
          <source>One use for this loader is to silence modules imported by a dependency. Say, for example, your project relies on an ES6 library that imports a polyfill you don't need, so removing it will cause no loss in functionality.</source>
          <target state="translated">このローダーの用途の一つは、依存関係にあるモジュールをインポートしないようにすることです。例えば、あなたのプロジェクトが必要のないポリフィルをインポートする ES6 ライブラリに依存しているので、それを削除しても機能を損なうことはありません。</target>
        </trans-unit>
        <trans-unit id="e1b83cd24068c9b978d886a0bd94b55712e1db34" translate="yes" xml:space="preserve">
          <source>Only assets bigger than this size are processed. In bytes.</source>
          <target state="translated">このサイズより大きいアセットのみが処理されます。バイト単位で表示されます。</target>
        </trans-unit>
        <trans-unit id="2e2e63658df77bf50c344780d23a9604a6170078" translate="yes" xml:space="preserve">
          <source>Only assets that compress better than this ratio are processed</source>
          <target state="translated">この比率よりも圧縮が良い資産のみが処理されます。</target>
        </trans-unit>
        <trans-unit id="97e6798a4f980e571a4a636162ced9361ccc439b" translate="yes" xml:space="preserve">
          <source>Only compile the part of the code you are currently developing on.</source>
          <target state="translated">現在開発中のコードの一部だけをコンパイルしてください。</target>
        </trans-unit>
        <trans-unit id="61c1e7d7392692a95473f806657e1449980d9bfb" translate="yes" xml:space="preserve">
          <source>Only dashes in class names will be camelized</source>
          <target state="translated">クラス名のダッシュのみが camelized されます。</target>
        </trans-unit>
        <trans-unit id="f089d5d3b8770cd7906985a887353c0a9d20281e" translate="yes" xml:space="preserve">
          <source>Only output when errors happen</source>
          <target state="translated">エラーが発生した場合のみ出力</target>
        </trans-unit>
        <trans-unit id="cfcb6326610bc03851fa8954054544e885702fa2" translate="yes" xml:space="preserve">
          <source>Only output when errors or new compilation happen</source>
          <target state="translated">エラーや新しいコンパイルが発生した場合にのみ出力</target>
        </trans-unit>
        <trans-unit id="80824d5ebb068ab46c8bc4b8718f11156726de00" translate="yes" xml:space="preserve">
          <source>Only used when &lt;a href=&quot;target&quot;&gt;&lt;code&gt;target&lt;/code&gt;&lt;/a&gt; is web, which uses JSONP for loading hot updates.</source>
          <target state="translated">&lt;a href=&quot;target&quot;&gt; &lt;code&gt;target&lt;/code&gt; &lt;/a&gt;がWebである場合にのみ使用され、ホットアップデートのロードにJSONPを使用します。</target>
        </trans-unit>
        <trans-unit id="b4c0bb3058fa40f5ee2924cef03211c948d76975" translate="yes" xml:space="preserve">
          <source>Only used when &lt;a href=&quot;target&quot;&gt;&lt;code&gt;target&lt;/code&gt;&lt;/a&gt; is web, which uses JSONP for loading on-demand chunks, by adding script tags.</source>
          <target state="translated">&lt;a href=&quot;target&quot;&gt; &lt;code&gt;target&lt;/code&gt; &lt;/a&gt;がWebであり、スクリプトタグを追加することにより、オンデマンドチャンクのロードにJSONPを使用する場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="89058d6a1647a90cdda9b88c640802187e5b05c2" translate="yes" xml:space="preserve">
          <source>Only used when &lt;a href=&quot;target&quot;&gt;&lt;code&gt;target&lt;/code&gt;&lt;/a&gt; is web, which uses JSONP for loading on-demand chunks.</source>
          <target state="translated">&lt;a href=&quot;target&quot;&gt; &lt;code&gt;target&lt;/code&gt; &lt;/a&gt;がWebである場合にのみ使用され、オンデマンドチャンクのロードにJSONPを使用します。</target>
        </trans-unit>
        <trans-unit id="720ecb138c7bba6e94ce7293dbf933b55062d699" translate="yes" xml:space="preserve">
          <source>Only warnings</source>
          <target state="translated">警告のみ</target>
        </trans-unit>
        <trans-unit id="274d9630257af836b1de0bed223b12743fdae53d" translate="yes" xml:space="preserve">
          <source>Open &lt;code&gt;index.html&lt;/code&gt; in your browser and, if everything went right, you should see the following text: 'Hello webpack'.</source>
          <target state="translated">ブラウザで &lt;code&gt;index.html&lt;/code&gt; を開き、問題がなければ、「He​​llo webpack」というテキストが表示されます。</target>
        </trans-unit>
        <trans-unit id="402378c983e9601aae273e89aafca5f70c4c2f06" translate="yes" xml:space="preserve">
          <source>Open up &lt;code&gt;index.html&lt;/code&gt; again and see if our &lt;code&gt;Hello webpack&lt;/code&gt; text has changed to the new font. If all is well, you should see the changes.</source>
          <target state="translated">&lt;code&gt;index.html&lt;/code&gt; を再度開き、 &lt;code&gt;Hello webpack&lt;/code&gt; テキストが新しいフォントに変更されているかどうかを確認します。すべてが順調であれば、変更が表示されます。</target>
        </trans-unit>
        <trans-unit id="4f0b1f6ef524b7ad893b022bdbb5a64fe9665026" translate="yes" xml:space="preserve">
          <source>Open up &lt;code&gt;index.html&lt;/code&gt; in your browser again and you should see that &lt;code&gt;Hello webpack&lt;/code&gt; is now styled in red. To see what webpack did, inspect the page (don't view the page source, as it won't show you the result) and look at the page's head tags. It should contain our style block that we imported in &lt;code&gt;index.js&lt;/code&gt;.</source>
          <target state="translated">ブラウザーで &lt;code&gt;index.html&lt;/code&gt; を再度開くと、 &lt;code&gt;Hello webpack&lt;/code&gt; が赤でスタイル設定されていることがわかります。Webpackの動作を確認するには、ページを調べ（結果が表示されないため、ページソースを表示しないでください）、ページのヘッドタグを確認します。 &lt;code&gt;index.js&lt;/code&gt; にインポートしたスタイルブロックを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="52c576dc894326d738bd3c38a9fdc8b8854e92fc" translate="yes" xml:space="preserve">
          <source>Optimising your application bundle size with webpack</source>
          <target state="translated">webpack でアプリケーションのバンドルサイズを最適化する</target>
        </trans-unit>
        <trans-unit id="fdf5e093149fa15365c797b12b39a00d5ec3a138" translate="yes" xml:space="preserve">
          <source>Optimization</source>
          <target state="translated">Optimization</target>
        </trans-unit>
        <trans-unit id="2018aa12a93a299b080f1a99fe99de979c8aa449" translate="yes" xml:space="preserve">
          <source>Optimization Bailouts</source>
          <target state="translated">最適化救済措置</target>
        </trans-unit>
        <trans-unit id="ad5d64c18d8c90fca4d0a1bde311c0f5fdd9ddff" translate="yes" xml:space="preserve">
          <source>Optimize Options</source>
          <target state="translated">オプションの最適化</target>
        </trans-unit>
        <trans-unit id="d4d38b717f02cf8261dd2e7ac72a70cd4848f266" translate="yes" xml:space="preserve">
          <source>Optimize all assets stored in &lt;code&gt;compilation.assets&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;compilation.assets&lt;/code&gt; に保存されているすべてのアセットを最適化します。</target>
        </trans-unit>
        <trans-unit id="a86800fc867452deb1318b3a05f1bf6cac2de884" translate="yes" xml:space="preserve">
          <source>Optimize any chunk assets. The assets are stored in &lt;code&gt;compilation.assets&lt;/code&gt;. A &lt;code&gt;Chunk&lt;/code&gt; has a property &lt;code&gt;files&lt;/code&gt; which points to all files created by a chunk. Any additional chunk assets are stored in &lt;code&gt;compilation.additionalChunkAssets&lt;/code&gt;.</source>
          <target state="translated">チャンクアセットを最適化します。アセットは、 &lt;code&gt;compilation.assets&lt;/code&gt; に格納されます。 &lt;code&gt;Chunk&lt;/code&gt; 、プロパティがある &lt;code&gt;files&lt;/code&gt; チャンクによって作成されたすべてのファイルを指します。追加のチャンクアセットは、 &lt;code&gt;compilation.additionalChunkAssets&lt;/code&gt; に格納されます。</target>
        </trans-unit>
        <trans-unit id="02058675b730ae8ac907d0b2e007189193540d7b" translate="yes" xml:space="preserve">
          <source>Optimize the &lt;code&gt;id&lt;/code&gt; of each chunk.</source>
          <target state="translated">各チャンクの &lt;code&gt;id&lt;/code&gt; を最適化します。</target>
        </trans-unit>
        <trans-unit id="5eb06ba6c776b15c11031bbe7138c977ccc0a979" translate="yes" xml:space="preserve">
          <source>Optimize the chunks.</source>
          <target state="translated">チャンクを最適化します。</target>
        </trans-unit>
        <trans-unit id="fd9dbc164928d45873317234ebbf7096161d5c77" translate="yes" xml:space="preserve">
          <source>Optimize the dependency tree asynchronously.</source>
          <target state="translated">依存関係ツリーを非同期に最適化します。</target>
        </trans-unit>
        <trans-unit id="063ab40ae2e6475433c23fe6c9bef7c86b59b89c" translate="yes" xml:space="preserve">
          <source>Optimize your output for production by following the steps in the &lt;a href=&quot;production&quot;&gt;production guide&lt;/a&gt;. Let's also add the path to your generated bundle as the package's &lt;code&gt;main&lt;/code&gt; field in with our &lt;code&gt;package.json&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;production&quot;&gt;制作ガイドの&lt;/a&gt;手順に従って、制作用に出力を最適化します。また、 &lt;code&gt;package.json&lt;/code&gt; を使用して、生成されたバンドルへのパスをパッケージの &lt;code&gt;main&lt;/code&gt; フィールドとして追加します。</target>
        </trans-unit>
        <trans-unit id="e31d972229de381b461860014dd710856361917a" translate="yes" xml:space="preserve">
          <source>Option</source>
          <target state="translated">Option</target>
        </trans-unit>
        <trans-unit id="5f18b0ec67d95838519b6ef7873dab9057e68dcf" translate="yes" xml:space="preserve">
          <source>Option Arguments</source>
          <target state="translated">オプション引数</target>
        </trans-unit>
        <trans-unit id="e237493bf5b50b1bc0dd5ea6715309334ed442ef" translate="yes" xml:space="preserve">
          <source>Optional: The fourth option, ignored by webpack, can be anything (e.g. some meta data).</source>
          <target state="translated">オプションです。4 番目のオプションは webpack によって無視されますが、何でも構いません (例:いくつかのメタデータ)。</target>
        </trans-unit>
        <trans-unit id="57c96856f7855749616363c3434cab642b19c9a6" translate="yes" xml:space="preserve">
          <source>Optional: The third argument must be a source map that is parsable by &lt;a href=&quot;https://github.com/mozilla/source-map&quot;&gt;this module&lt;/a&gt;.</source>
          <target state="translated">オプション：3番目の引数は、&lt;a href=&quot;https://github.com/mozilla/source-map&quot;&gt;このモジュールで&lt;/a&gt;解析可能なソースマップである必要があります。</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="9728f61984c5ad16463d1875a69c3a86230894b1" translate="yes" xml:space="preserve">
          <source>Options are the same as &lt;a href=&quot;node#stats-tojson-options-&quot;&gt;&lt;code&gt;stats.toJson(options)&lt;/code&gt;&lt;/a&gt; with one addition:</source>
          <target state="translated">オプションは&lt;a href=&quot;node#stats-tojson-options-&quot;&gt; &lt;code&gt;stats.toJson(options)&lt;/code&gt; &lt;/a&gt;と同じですが、1つ追加されています。</target>
        </trans-unit>
        <trans-unit id="c3dde2ada91abc98feb765994fec65c53be9633a" translate="yes" xml:space="preserve">
          <source>Options can be passed with a query parameter, e.g. &lt;code&gt;?key=value&amp;amp;foo=bar&lt;/code&gt;, or a JSON object, e.g. &lt;code&gt;?{&quot;key&quot;:&quot;value&quot;,&quot;foo&quot;:&quot;bar&quot;}&lt;/code&gt;.</source>
          <target state="translated">オプションは、 &lt;code&gt;?key=value&amp;amp;foo=bar&lt;/code&gt; などのクエリパラメータ、または &lt;code&gt;?{&quot;key&quot;:&quot;value&quot;,&quot;foo&quot;:&quot;bar&quot;}&lt;/code&gt; などのJSONオブジェクトで渡すことができます。</target>
        </trans-unit>
        <trans-unit id="0d51d23e73cbeb258bb034bea38efe63c1162dce" translate="yes" xml:space="preserve">
          <source>Options that are compatible with &lt;a href=&quot;https://github.com/webpack/webpack-dev-middleware&quot;&gt;webpack-dev-middleware&lt;/a&gt; have 🔑 next to them.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/webpack/webpack-dev-middleware&quot;&gt;webpack-dev-middleware&lt;/a&gt;と互換性のあるオプションの横には🔑があります。</target>
        </trans-unit>
        <trans-unit id="e831b002187c1ca07dd471e05e620b151a2f0c77" translate="yes" xml:space="preserve">
          <source>Options to pass to the html-loader. See &lt;a href=&quot;html-loader&quot;&gt;html-loader&lt;/a&gt;.</source>
          <target state="translated">HTMLローダーに渡すオプション。&lt;a href=&quot;html-loader&quot;&gt;html-loaderを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bdd0b506837a990803d8edf137f2934329835748" translate="yes" xml:space="preserve">
          <source>Options:</source>
          <target state="translated">Options:</target>
        </trans-unit>
        <trans-unit id="c2bc580e657734cab7c68b6414f5f6be06a4b56d" translate="yes" xml:space="preserve">
          <source>Opts out of any default optimization options</source>
          <target state="translated">デフォルトの最適化オプションを無効にします。</target>
        </trans-unit>
        <trans-unit id="579cb1f521aecef786a714d13307176b814063cc" translate="yes" xml:space="preserve">
          <source>Or a substitution string:</source>
          <target state="translated">あるいは置換文字列。</target>
        </trans-unit>
        <trans-unit id="62ee7f941acd3740b5979aa010ab34bed7802486" translate="yes" xml:space="preserve">
          <source>Or add the loader to your &lt;code&gt;webpack&lt;/code&gt; config. For example:</source>
          <target state="translated">または、ローダーを &lt;code&gt;webpack&lt;/code&gt; 設定に追加します。例えば：</target>
        </trans-unit>
        <trans-unit id="88048597ca66db3d3f0e2283073e6ad3280ebf5d" translate="yes" xml:space="preserve">
          <source>Or from the command-line:</source>
          <target state="translated">またはコマンドラインから。</target>
        </trans-unit>
        <trans-unit id="4299e2e925756675f72d5cd238eb192203bb0f93" translate="yes" xml:space="preserve">
          <source>Or if you prefer ES2015:</source>
          <target state="translated">もしくはES2015の方がいいかもしれません。</target>
        </trans-unit>
        <trans-unit id="42b400c4fd0735f1d89abd8c4714b4a52afceca7" translate="yes" xml:space="preserve">
          <source>Or on the command-line:</source>
          <target state="translated">またはコマンドラインで。</target>
        </trans-unit>
        <trans-unit id="e3ff562d21ab08937a5659caeb58bb2ea81f3323" translate="yes" xml:space="preserve">
          <source>Or provide a chunk name within a &lt;code&gt;name&lt;/code&gt; query parameter:</source>
          <target state="translated">または、 &lt;code&gt;name&lt;/code&gt; クエリパラメータ内にチャンク名を指定します。</target>
        </trans-unit>
        <trans-unit id="0f5ba6d7de5a002758743861114c3c6db71f8931" translate="yes" xml:space="preserve">
          <source>Or specify the proxied components in your configuration:</source>
          <target state="translated">または、構成でプロキシされたコンポーネントを指定します。</target>
        </trans-unit>
        <trans-unit id="d51d3af226498a76e24107125e840dcd31bd8233" translate="yes" xml:space="preserve">
          <source>Or using a &lt;code&gt;Function&lt;/code&gt;:</source>
          <target state="translated">または &lt;code&gt;Function&lt;/code&gt; を使用して：</target>
        </trans-unit>
        <trans-unit id="a3e30ba9d574feb7c422f9e4dd767cfcd41fb76c" translate="yes" xml:space="preserve">
          <source>Or you can apply specific plugins you want:</source>
          <target state="translated">または、あなたが望む特定のプラグインを適用することができます。</target>
        </trans-unit>
        <trans-unit id="fb1d5ca32ce0b0094f78920f00238713e52e2c68" translate="yes" xml:space="preserve">
          <source>Or, in case of just a &lt;code&gt;from&lt;/code&gt; with the default destination, you can also use a &lt;code&gt;{String}&lt;/code&gt; as shorthand instead of an &lt;code&gt;{Object}&lt;/code&gt;</source>
          <target state="translated">または、デフォルトの宛先 &lt;code&gt;from&lt;/code&gt; 持つfromだけの場合、 &lt;code&gt;{Object}&lt;/code&gt; の代わりに &lt;code&gt;{String}&lt;/code&gt; を省略形として使用することもできます</target>
        </trans-unit>
        <trans-unit id="7dc586b794d0f2f0123ec40266bce0de0311da18" translate="yes" xml:space="preserve">
          <source>Or, to add as standard module as per &lt;a href=&quot;https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md#typical-usage&quot;&gt;this guide&lt;/a&gt;:</source>
          <target state="translated">または、&lt;a href=&quot;https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md#typical-usage&quot;&gt;このガイド&lt;/a&gt;に従って標準モジュールとして追加するには：</target>
        </trans-unit>
        <trans-unit id="2769995d7aa4f59c417df977dc581a297b53e205" translate="yes" xml:space="preserve">
          <source>Order the modules and chunks by occurrence. This saves space, because often referenced modules and chunks get smaller ids.</source>
          <target state="translated">モジュールとチャンクを出現順に並べます。これは、参照されるモジュールやチャンクの ID が小さくなることが多いので、スペースを節約します。</target>
        </trans-unit>
        <trans-unit id="2967fb6b9dbc531fdccdc62a709f0b9b3f045265" translate="yes" xml:space="preserve">
          <source>Originally, chunks (and modules imported inside them) were connected by a parent-child relationship in the internal webpack graph. The &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; was used to avoid duplicated dependencies across them, but further optimizations were not possible</source>
          <target state="translated">元々、チャンク（およびチャンク内にインポートされたモジュール）は、内部Webpackグラフの親子関係によって接続されていました。 &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; は、それら全体で重複の依存性を回避するために使用されるが、さらなる最適化ができなかったました</target>
        </trans-unit>
        <trans-unit id="bbcf81a9103052a3ce5b11d9884ce8fb6379af91" translate="yes" xml:space="preserve">
          <source>Other Code and Frameworks</source>
          <target state="translated">その他のコードとフレームワーク</target>
        </trans-unit>
        <trans-unit id="9cb6f2fb01dfa81e12bc1e11f0e7b676e54669fd" translate="yes" xml:space="preserve">
          <source>Other Options</source>
          <target state="translated">その他のオプション</target>
        </trans-unit>
        <trans-unit id="9f43af92a10e29a062869a02d2b19f320ff7d737" translate="yes" xml:space="preserve">
          <source>Other Targets</source>
          <target state="translated">その他のターゲット</target>
        </trans-unit>
        <trans-unit id="a6a3346524b28d21d18a28316c1731fc127a349f" translate="yes" xml:space="preserve">
          <source>Other Utilities</source>
          <target state="translated">その他のユーティリティ</target>
        </trans-unit>
        <trans-unit id="164b7710bcd6917de534087ff1e2ed001f404c41" translate="yes" xml:space="preserve">
          <source>Other node core libraries</source>
          <target state="translated">その他のノードコアライブラリ</target>
        </trans-unit>
        <trans-unit id="4653e7976f9770f2699c713bdc5215cd4f6c2d22" translate="yes" xml:space="preserve">
          <source>Otherwise, the file extension is resolved using the &lt;a href=&quot;../configuration/resolve#resolve-extensions&quot;&gt;&lt;code&gt;resolve.extensions&lt;/code&gt;&lt;/a&gt; option, which tells the resolver which extensions (eg - &lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.jsx&lt;/code&gt;) are acceptable for resolution.</source>
          <target state="translated">それ以外の場合は、ファイルの拡張子を使用して解決される&lt;a href=&quot;../configuration/resolve#resolve-extensions&quot;&gt; &lt;code&gt;resolve.extensions&lt;/code&gt; の&lt;/a&gt;（ -例えば拡張子リゾルバ伝えオプション、 &lt;code&gt;.js&lt;/code&gt; ファイル、 &lt;code&gt;.jsx&lt;/code&gt; の）解決のために許容されているが。</target>
        </trans-unit>
        <trans-unit id="72be90f155341141ab65b4cd9267be474f7c66e0" translate="yes" xml:space="preserve">
          <source>Out of the box &lt;code&gt;SplitChunksPlugin&lt;/code&gt; should work great for most users.</source>
          <target state="translated">箱から出して &lt;code&gt;SplitChunksPlugin&lt;/code&gt; は、ほとんどのユーザーのための偉大な動作するはずです。</target>
        </trans-unit>
        <trans-unit id="2dea8748bb619371cecdb1a800acca07d21d1d14" translate="yes" xml:space="preserve">
          <source>Out of the box, webpack only understands JavaScript files. &lt;strong&gt;Loaders&lt;/strong&gt; allow webpack to process other types of files and convert them into valid &lt;a href=&quot;modules&quot;&gt;modules&lt;/a&gt; that can be consumed by your application and added to the dependency graph.</source>
          <target state="translated">デフォルトでは、webpackはJavaScriptファイルのみを認識します。&lt;strong&gt;ローダーを&lt;/strong&gt;使用すると、webpackは他のタイプのファイルを処理し、それらを有効な&lt;a href=&quot;modules&quot;&gt;モジュールに&lt;/a&gt;変換して、アプリケーションで使用し、依存関係グラフに追加することができます。</target>
        </trans-unit>
        <trans-unit id="82b7d4b68bfe648eaf6de08120bde75436bb94ff" translate="yes" xml:space="preserve">
          <source>Out of the box, webpack won't require you to use a configuration file. However, it will assume the entry point of your project is &lt;code&gt;src/index&lt;/code&gt; and will output the result in &lt;code&gt;dist/main.js&lt;/code&gt; minified and optimized for production.</source>
          <target state="translated">すぐに使えるwebpackでは、設定ファイルを使用する必要はありません。ただし、プロジェクトのエントリポイントが &lt;code&gt;src/index&lt;/code&gt; であると想定し、結果を &lt;code&gt;dist/main.js&lt;/code&gt; に出力して、生産用に縮小および最適化します。</target>
        </trans-unit>
        <trans-unit id="d3f0610632bbef35bfaa389ca89023fd50c6dd62" translate="yes" xml:space="preserve">
          <source>Outcome</source>
          <target state="translated">Outcome</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Output</target>
        </trans-unit>
        <trans-unit id="31907ec3a5be78cc563099c264375fdb7886f469" translate="yes" xml:space="preserve">
          <source>Output Filenames</source>
          <target state="translated">出力ファイル名</target>
        </trans-unit>
        <trans-unit id="aa36220cfc69d0a1ee678254e922b40c3459f898" translate="yes" xml:space="preserve">
          <source>Output Management</source>
          <target state="translated">出力管理</target>
        </trans-unit>
        <trans-unit id="fcd12607f17f8ae3c1aae3e2ae27e439345801a6" translate="yes" xml:space="preserve">
          <source>Output Options</source>
          <target state="translated">出力オプション</target>
        </trans-unit>
        <trans-unit id="5cefca5bd5c8ac5f884cdd9e5d63fca191c4cdad" translate="yes" xml:space="preserve">
          <source>Output Without Path Info</source>
          <target state="translated">パス情報なしの出力</target>
        </trans-unit>
        <trans-unit id="78d777aae91ea576ceaee3d45b01ad3435e7cce3" translate="yes" xml:space="preserve">
          <source>Output cli information. It is enabled by default.</source>
          <target state="translated">クリ情報を出力します。デフォルトでは有効になっています。</target>
        </trans-unit>
        <trans-unit id="94e22a6ec6fd2d9123ea673737e219c0d79bdced" translate="yes" xml:space="preserve">
          <source>Output everything</source>
          <target state="translated">すべてを出力</target>
        </trans-unit>
        <trans-unit id="5acfe12ea07fb8ea46b335a837e4d39082cb4b4e" translate="yes" xml:space="preserve">
          <source>Output may differ depending on your current webpack version. Newer versions may not have all the same issues with hashing as some older versions, but we still recommend the following steps to be safe.</source>
          <target state="translated">現在のwebpackのバージョンによって出力が異なる場合があります。新しいバージョンでは、一部の古いバージョンのようにハッシュ化に関するすべての問題を抱えているわけではないかもしれませんが、それでも安全のために以下の手順をお勧めします。</target>
        </trans-unit>
        <trans-unit id="b01cd12e0a3c672d6fd96717a91de6f52cff5761" translate="yes" xml:space="preserve">
          <source>Output nothing</source>
          <target state="translated">何も出力しない</target>
        </trans-unit>
        <trans-unit id="283c87d1343db905c99fd3e4c33c0ff5f92a966e" translate="yes" xml:space="preserve">
          <source>Output root if &lt;code&gt;from&lt;/code&gt; is file or dir, resolved glob path if &lt;code&gt;from&lt;/code&gt; is glob</source>
          <target state="translated">&lt;code&gt;from&lt;/code&gt; がファイルまたはディレクトリの場合はルートを出力し、 &lt;code&gt;from&lt;/code&gt; がグロブの場合は解決されたグロブパス</target>
        </trans-unit>
        <trans-unit id="987b8eef83e7f7a3b02b84875c2c2c3993b6e4b2" translate="yes" xml:space="preserve">
          <source>Output running progress to console.</source>
          <target state="translated">実行中の進捗状況をコンソールに出力します。</target>
        </trans-unit>
        <trans-unit id="e6450af99eaaf4c4b937428ec7e5d80bb469e468" translate="yes" xml:space="preserve">
          <source>Override default minify function - use &lt;code&gt;uglify-js&lt;/code&gt; for minification.</source>
          <target state="translated">デフォルトの縮小機能を上書き- 縮小には &lt;code&gt;uglify-js&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="e41d0c69ce84028ee812f50e08e3c0fe2856797b" translate="yes" xml:space="preserve">
          <source>Override the &lt;code&gt;publicPath&lt;/code&gt; setting for this loader</source>
          <target state="translated">このローダーの &lt;code&gt;publicPath&lt;/code&gt; 設定をオーバーライドします</target>
        </trans-unit>
        <trans-unit id="7a7d47fce48acf58b47aa4b2613746aa85bf70fa" translate="yes" xml:space="preserve">
          <source>Override the inferred context of a &lt;code&gt;require&lt;/code&gt; expression</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; 式の推論されたコンテキストをオーバーライドする</target>
        </trans-unit>
        <trans-unit id="4548704a9cf96f5c80e64da876d62bd8a09f9fd5" translate="yes" xml:space="preserve">
          <source>Overrides the path from which worker scripts are downloaded. If not specified, the same public path used for other webpack assets is used.</source>
          <target state="translated">ワーカースクリプトがダウンロードされるパスをオーバーライドします。指定しない場合は、他の webpack アセットで使用されるのと同じ公開パスが使用されます。</target>
        </trans-unit>
        <trans-unit id="fc7f5dcce2431faa8c81e362f061ec0d6c7ca706" translate="yes" xml:space="preserve">
          <source>Overwrites files already in &lt;code&gt;compilation.assets&lt;/code&gt; (usually added by other plugins/loaders)</source>
          <target state="translated">すでに &lt;code&gt;compilation.assets&lt;/code&gt; にあるファイルを上書きします（通常、他のプラグイン/ローダーによって追加されます）</target>
        </trans-unit>
        <trans-unit id="b62df9105ffbe0ac3ff022061a5b5adbce84148b" translate="yes" xml:space="preserve">
          <source>Paired with &lt;code&gt;--progress&lt;/code&gt;, &lt;code&gt;--profile&lt;/code&gt; gives you an in depth idea of which step in the compilation is taking how long. This can help you optimise your build in a more informed manner.</source>
          <target state="translated">&lt;code&gt;--progress&lt;/code&gt; と組み合わせて、 &lt;code&gt;--profile&lt;/code&gt; を使用すると、コンパイルのどのステップにどれだけ時間がかかっているかを詳しく知ることができます。これは、より情報に基づいた方法でビルドを最適化するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="f699f295e5ae4ac633cfa18437fed38d028b3fdb" translate="yes" xml:space="preserve">
          <source>Parameter</source>
          <target state="translated">Parameter</target>
        </trans-unit>
        <trans-unit id="c991f93c6f2615505243143a75c3501413eb1c2a" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;assets&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;assets&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="90d5ef260713b6cedae194a2cbad71df445f4f77" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;ast&lt;/code&gt;&lt;code&gt;comments&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;ast&lt;/code&gt; &lt;code&gt;comments&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="73e275dcbd3f5bf47f5505559e9504642b8e930b" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;childCompiler&lt;/code&gt;&lt;code&gt;compilerName&lt;/code&gt;&lt;code&gt;compilerIndex&lt;/code&gt;</source>
          <target state="translated">パラメーター： &lt;code&gt;childCompiler&lt;/code&gt; &lt;code&gt;compilerName&lt;/code&gt; &lt;code&gt;compilerIndex&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c79f0b6f9e31573d9ffa15a9fb789159922bd31e" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;chunk&lt;/code&gt;&lt;code&gt;chunkHash&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;chunk&lt;/code&gt; &lt;code&gt;chunkHash&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8c5de9353c41900f7cc9830f0646bc0fa669708d" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;chunk&lt;/code&gt;&lt;code&gt;filename&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;chunk&lt;/code&gt; &lt;code&gt;filename&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="750d84381779421de68c42062c5ddab4698e3486" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;chunks&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;chunks&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0e5636940b4dc3dc9e0f4427f619d2ebaa33db5c" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;chunks&lt;/code&gt;&lt;code&gt;modules&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;chunks&lt;/code&gt; &lt;code&gt;modules&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="43c826f3755620ba502465d8fdd73de0f745b8a6" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;chunks&lt;/code&gt;&lt;code&gt;records&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;chunks&lt;/code&gt; &lt;code&gt;records&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="134cac6025b323774eb8179251b0f6fb2bf96d01" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;compilation&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;compilation&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d2727aeb16aadf78295c5bd4a2c75012e55cab33" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;compilation&lt;/code&gt;&lt;code&gt;records&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;compilation&lt;/code&gt; &lt;code&gt;records&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e2604ad91c4fb4f7140b65b8321f116f6bbdb49a" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;compilationParams&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;compilationParams&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="358aeccf97432c4567cbfb2ba6011fde70b7a9e5" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;compiler&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;compiler&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3881d0d3fb7b473209e5f26fc9b60107b12dd717" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;contextModuleFactory&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;contextModuleFactory&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9e500e62253beff7e7b5cdb1136378a640915ec4" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;declaration&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;declaration&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="93b7b50f6f2c327b7a133c81eeca3d4f25c8238c" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;depRef&lt;/code&gt;&lt;code&gt;dependency&lt;/code&gt;&lt;code&gt;module&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;depRef&lt;/code&gt; &lt;code&gt;dependency&lt;/code&gt; &lt;code&gt;module&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="95c1249b8cda0474a3c8ed88c0cb58c97638ee49" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;error&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;error&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d2965c99dc7348b590c60e8ebb0897c992044d5" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;expression&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;expression&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1ccdb3ed547f580cdabef52c215215c64efa3c4c" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;expression&lt;/code&gt;&lt;code&gt;param&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;expression&lt;/code&gt; &lt;code&gt;param&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2fd8dbb04e1aba5ca2a1c485f742ded6bd2b3ec0" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;fileName&lt;/code&gt;, &lt;code&gt;changeTime&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;fileName&lt;/code&gt; 、 &lt;code&gt;changeTime&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c8040cb4bbacc51d2af2b339355655aaad2fbdc9" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;filename&lt;/code&gt;&lt;code&gt;data&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;filename&lt;/code&gt; &lt;code&gt;data&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f72e57dbf055f2ab852992315ef092fed313809b" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;initExpression&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;initExpression&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="07f6255d8e468a3d3a5efe6c994ef655705935d7" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;loaderContext&lt;/code&gt;&lt;code&gt;module&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;loaderContext&lt;/code&gt; &lt;code&gt;module&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a72008dac1303eb45b36ce62dbc5c678c1fbe85e" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;module&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;module&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="183eeba3bcdd63b435c108f06511e3def4ff6a3e" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;module&lt;/code&gt;&lt;code&gt;error&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;module&lt;/code&gt; &lt;code&gt;error&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c0678017eab5a67be4284d37b217ad58da0a1264" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;module&lt;/code&gt;&lt;code&gt;filename&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;module&lt;/code&gt; &lt;code&gt;filename&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="393e20853c024b1e61234fc6dbc4a239218482dd" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;modules&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;modules&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="45c6ad20b68012384f24f03273152bff0670a28d" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;modules&lt;/code&gt;&lt;code&gt;records&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;modules&lt;/code&gt; &lt;code&gt;records&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fe7d7aacb1a5e33fbf0b36e2c9f6570cebc159d6" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;normalModuleFactory&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;normalModuleFactory&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="33836371ac0c080ece95dd435ca0a7783875bb9e" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;records&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;records&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="50ff59b8d5d6842b64d4779f3ab7252d6a51f359" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;statement&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;statement&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bbaf0fbeec68fba8045c7439ee421648ae5aeb57" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;statement&lt;/code&gt;&lt;code&gt;declaration&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;statement&lt;/code&gt; &lt;code&gt;declaration&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="44b3f428537530948b885defbb5b94e5a0192b4c" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;statement&lt;/code&gt;&lt;code&gt;identifierName&lt;/code&gt;&lt;code&gt;exportName&lt;/code&gt;&lt;code&gt;index&lt;/code&gt;</source>
          <target state="translated">パラメーター： &lt;code&gt;statement&lt;/code&gt; &lt;code&gt;identifierName&lt;/code&gt; &lt;code&gt;exportName&lt;/code&gt; &lt;code&gt;index&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f8a370f0db751365267990ae5e925f09c0bc0b03" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;statement&lt;/code&gt;&lt;code&gt;source&lt;/code&gt;</source>
          <target state="translated">パラメーター： &lt;code&gt;statement&lt;/code&gt; &lt;code&gt;source&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="65bf8ac879e1b4ddebbe4cff09b464b8bd66db9e" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;statement&lt;/code&gt;&lt;code&gt;source&lt;/code&gt;&lt;code&gt;exportName&lt;/code&gt;&lt;code&gt;identifierName&lt;/code&gt;</source>
          <target state="translated">パラメーター： &lt;code&gt;statement&lt;/code&gt; &lt;code&gt;source&lt;/code&gt; &lt;code&gt;exportName&lt;/code&gt; &lt;code&gt;identifierName&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="07a3f15cf76a6ec9ba4f52e3b74ad9df5140a75f" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;statement&lt;/code&gt;&lt;code&gt;source&lt;/code&gt;&lt;code&gt;identifierName&lt;/code&gt;&lt;code&gt;exportName&lt;/code&gt;&lt;code&gt;index&lt;/code&gt;</source>
          <target state="translated">パラメーター： &lt;code&gt;statement&lt;/code&gt; &lt;code&gt;source&lt;/code&gt; &lt;code&gt;identifierName&lt;/code&gt; &lt;code&gt;exportName&lt;/code&gt; &lt;code&gt;index&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a8c0bb41ee59e42c76f4f0b0da6f3fa83f528532" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;stats&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;stats&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1b3cf5033ed01a4fcbff3f2957e66cfe44af45a9" translate="yes" xml:space="preserve">
          <source>Parser</source>
          <target state="translated">Parser</target>
        </trans-unit>
        <trans-unit id="671507423a5ce51b91d522731ab85745d3d74657" translate="yes" xml:space="preserve">
          <source>Parser options: An options object which should be used to create the parser for this module.</source>
          <target state="translated">パーサのオプション。このモジュールのパーサを作成するために使用されるオプションオブジェクト。</target>
        </trans-unit>
        <trans-unit id="43bc94b7434511df8e3fc1fa270f99760c5db1de" translate="yes" xml:space="preserve">
          <source>Parsers may inspect these options and disable or reconfigure themselves accordingly. Most of the default plugins interpret the values as follows:</source>
          <target state="translated">パーサはこれらのオプションを検査し、それに応じて自分自身を無効にしたり再設定したりすることができます。ほとんどのデフォルトのプラグインは、以下のように値を解釈します。</target>
        </trans-unit>
        <trans-unit id="8f37fa03d741e390b4646ce553be76d46bc93b97" translate="yes" xml:space="preserve">
          <source>Pass a boolean to enable or disable this feature for all modules (defaults to &lt;code&gt;false&lt;/code&gt;). An object with &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;include&lt;/code&gt;, &lt;code&gt;exclude&lt;/code&gt; is also allowed. For example, to enable this feature for all javascript files within a certain directory:</source>
          <target state="translated">すべてのモジュールに対してこの機能を有効または無効にするブール値を渡します（デフォルトは &lt;code&gt;false&lt;/code&gt; ）。 &lt;code&gt;test&lt;/code&gt; 、 &lt;code&gt;include&lt;/code&gt; 、 &lt;code&gt;exclude&lt;/code&gt; を持つオブジェクトも許可されます。たとえば、特定のディレクトリ内のすべてのJavaScriptファイルに対してこの機能を有効にするには：</target>
        </trans-unit>
        <trans-unit id="b936ea14312d991018d6db2aecbac5ce71bd65bc" translate="yes" xml:space="preserve">
          <source>Pass values to the next loader. If you know what your result exports if executed as module, set this value here (as a only element array).</source>
          <target state="translated">次のローダーに値を渡します。モジュールとして実行された場合の結果のエクスポートがわかっている場合は、この値をここに設定します (要素のみの配列として)。</target>
        </trans-unit>
        <trans-unit id="44985ac8eb7552b2ccc31a28f6ff40c010ff5141" translate="yes" xml:space="preserve">
          <source>Passed from the last loader. If you would execute the input argument as module, consider reading this variable for a shortcut (for performance).</source>
          <target state="translated">最後のローダーから渡されます。入力引数をモジュールとして実行する場合は、この変数を読むことが近道になることを考慮してください(パフォーマンスのため)。</target>
        </trans-unit>
        <trans-unit id="ccddcde23a3566aa4120d1946a6cfb7c456fe6f4" translate="yes" xml:space="preserve">
          <source>Passing a string (i.e. &lt;code&gt;use: [ &quot;style-loader&quot; ]&lt;/code&gt;) is a shortcut to the loader property (i.e. &lt;code&gt;use: [ { loader: &quot;style-loader &quot;} ]&lt;/code&gt;).</source>
          <target state="translated">文字列を渡す（つまり、 &lt;code&gt;use: [ &quot;style-loader&quot; ]&lt;/code&gt; ）は、ローダープロパティへのショートカットです（つまり、 &lt;code&gt;use: [ { loader: &quot;style-loader &quot;} ]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="0b04e6e4c7567222f24f018866d959fba17be475" translate="yes" xml:space="preserve">
          <source>Passing the &lt;code&gt;minChunks&lt;/code&gt; property a function</source>
          <target state="translated">&lt;code&gt;minChunks&lt;/code&gt; プロパティに関数を渡す</target>
        </trans-unit>
        <trans-unit id="761dfb7e989b01b8713a72591a10c87329ed9a59" translate="yes" xml:space="preserve">
          <source>Path Translations</source>
          <target state="translated">パス変換</target>
        </trans-unit>
        <trans-unit id="eebf4eccd786dfcb9ed1df853f98d2125c371483" translate="yes" xml:space="preserve">
          <source>Path to &lt;code&gt;eslint&lt;/code&gt; instance that will be used for linting.</source>
          <target state="translated">&lt;code&gt;eslint&lt;/code&gt; に使用されるeslintインスタンスへのパス。</target>
        </trans-unit>
        <trans-unit id="12ce615fbd4de707138cf2519532f0642d38a706" translate="yes" xml:space="preserve">
          <source>Path to cache directory.</source>
          <target state="translated">キャッシュディレクトリへのパス。</target>
        </trans-unit>
        <trans-unit id="561fb7d4495d192d7e6dab825d4b99213cf43235" translate="yes" xml:space="preserve">
          <source>Path to the config file</source>
          <target state="translated">設定ファイルへのパス</target>
        </trans-unit>
        <trans-unit id="1a8bfd55f37472276f7b8ae263add7e0f0d412d7" translate="yes" xml:space="preserve">
          <source>Path to the records file</source>
          <target state="translated">レコードファイルへのパス</target>
        </trans-unit>
        <trans-unit id="b388b4324a9ca3ee8c5ec5a3752ef62a520c3006" translate="yes" xml:space="preserve">
          <source>Path to the records file (reading)</source>
          <target state="translated">レコードファイルへのパス(読み込み</target>
        </trans-unit>
        <trans-unit id="e41acbf6a6ed59dd01f7f7eb75acaebd59a6e898" translate="yes" xml:space="preserve">
          <source>Path to the records file (writing)</source>
          <target state="translated">レコードファイルへのパス(書き込み</target>
        </trans-unit>
        <trans-unit id="b95fd68a6e7f6a610c51b680d468fe0bb34b236e" translate="yes" xml:space="preserve">
          <source>Pattern for extracting elements to be used in &lt;code&gt;to&lt;/code&gt; templates</source>
          <target state="translated">で使用される要素を抽出するためのパターン &lt;code&gt;to&lt;/code&gt; テンプレート</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="44f841c0a9265fe3a73e5c54d51edf6763b78ba7" translate="yes" xml:space="preserve">
          <source>Persistent cache</source>
          <target state="translated">永続的なキャッシュ</target>
        </trans-unit>
        <trans-unit id="8d96fe182eadd6337a10c14835f72230352ca486" translate="yes" xml:space="preserve">
          <source>Pitching Loader</source>
          <target state="translated">ピッチングローダー</target>
        </trans-unit>
        <trans-unit id="b62930d0710de4268cfd1b4505b2a2ad7a57660d" translate="yes" xml:space="preserve">
          <source>Placeholders</source>
          <target state="translated">Placeholders</target>
        </trans-unit>
        <trans-unit id="1dcbfad7a98fe256dfb32d31c12ca3bb5ce5f97f" translate="yes" xml:space="preserve">
          <source>Please note that &lt;code&gt;sideEffects&lt;/code&gt; should be in the npm module's &lt;code&gt;package.json&lt;/code&gt; file and doesn't mean that you need to set &lt;code&gt;sideEffects&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; in your own project's &lt;code&gt;package.json&lt;/code&gt; which requires that big module.</source>
          <target state="translated">ことをしてくださいは、ノート &lt;code&gt;sideEffects&lt;/code&gt; NPMモジュールの中にあるべき &lt;code&gt;package.json&lt;/code&gt; のファイルと設定が必要なことを意味するわけではない &lt;code&gt;sideEffects&lt;/code&gt; に &lt;code&gt;false&lt;/code&gt; 独自のプロジェクトの中 &lt;code&gt;package.json&lt;/code&gt; その大きなモジュールが必要です。</target>
        </trans-unit>
        <trans-unit id="afa9b2adb3fe687dd4a8cc44484250444f9b490d" translate="yes" xml:space="preserve">
          <source>Please note that CSPs are not enabled by default. A corresponding header &lt;code&gt;Content-Security-Policy&lt;/code&gt; or meta tag &lt;code&gt;&amp;lt;meta http-equiv=&quot;Content-Security-Policy&quot; ...&amp;gt;&lt;/code&gt; needs to be sent with the document to instruct the browser to enable the CSP. Here's an example of what a CSP header including a CDN white-listed URL might look like:</source>
          <target state="translated">CSPはデフォルトでは有効になっていません。対応するヘッダー &lt;code&gt;Content-Security-Policy&lt;/code&gt; またはメタタグ &lt;code&gt;&amp;lt;meta http-equiv=&quot;Content-Security-Policy&quot; ...&amp;gt;&lt;/code&gt; をドキュメントと共に送信して、ブラウザーにCSPを有効にするように指示する必要があります。以下は、CDNホワイトリストURLを含むCSPヘッダーの例です。</target>
        </trans-unit>
        <trans-unit id="d792a7b7ee2ee5a7c18e906c3b790687a371ade2" translate="yes" xml:space="preserve">
          <source>Please remember that setting &lt;code&gt;NODE_ENV&lt;/code&gt; doesn't automatically set &lt;code&gt;mode&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NODE_ENV&lt;/code&gt; を設定しても、 &lt;code&gt;mode&lt;/code&gt; は自動的に設定されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a24274736159e5bb51eec33d2965184b8a8d058e" translate="yes" xml:space="preserve">
          <source>Please see the &lt;a href=&quot;https://github.com/webpack/tapable&quot;&gt;documentation&lt;/a&gt; to learn more. An understanding of the three &lt;code&gt;tap&lt;/code&gt; methods, as well as the hooks that provide them is crucial. The objects that extend &lt;code&gt;Tapable&lt;/code&gt; (e.g. the compiler), the hooks they provide, and each hook's type (e.g. the &lt;code&gt;SyncHook&lt;/code&gt;) will be noted.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/webpack/tapable&quot;&gt;ドキュメント&lt;/a&gt;をご覧ください。3つの &lt;code&gt;tap&lt;/code&gt; 方法と、それらを提供するフックを理解することが重要です。 &lt;code&gt;Tapable&lt;/code&gt; を拡張するオブジェクト（コンパイラなど）、それらが提供するフック、各フックのタイプ（ &lt;code&gt;SyncHook&lt;/code&gt; など）が示されます。</target>
        </trans-unit>
        <trans-unit id="fffc7ee52fbc0aedea28ea9911628bb68279c2b4" translate="yes" xml:space="preserve">
          <source>Please take a moment to read our contributing guidelines if you haven't yet done so.</source>
          <target state="translated">まだお読みになっていない方は、投稿ガイドラインをお読みください。</target>
        </trans-unit>
        <trans-unit id="a21c1554b28d950bc6b8f1592fbd61855a698e7a" translate="yes" xml:space="preserve">
          <source>Plugin API</source>
          <target state="translated">プラグイン API</target>
        </trans-unit>
        <trans-unit id="be6507fa53943d340c7520bd623ecbdeab4dec46" translate="yes" xml:space="preserve">
          <source>Plugin Types</source>
          <target state="translated">プラグインの種類</target>
        </trans-unit>
        <trans-unit id="8c96a6157436f12625ad7a92518b6d47e74e44d2" translate="yes" xml:space="preserve">
          <source>Plugin Used</source>
          <target state="translated">使用プラグイン</target>
        </trans-unit>
        <trans-unit id="ab2e26dd8b8868a3969cb3321e0c983c0d9d67d4" translate="yes" xml:space="preserve">
          <source>Plugins</source>
          <target state="translated">Plugins</target>
        </trans-unit>
        <trans-unit id="c2cb3e9ddef62f8ce6bd053ccea1880266085973" translate="yes" xml:space="preserve">
          <source>Plugins affecting the compiler</source>
          <target state="translated">コンパイラに影響を与えるプラグイン</target>
        </trans-unit>
        <trans-unit id="dc8500781fb9e8845460f9283bc4673626152f3c" translate="yes" xml:space="preserve">
          <source>Plugins affecting the environment of the compiler.</source>
          <target state="translated">コンパイラの環境に影響を与えるプラグイン</target>
        </trans-unit>
        <trans-unit id="c4404580c2d6e4293219d6520fbb0e555befbc4e" translate="yes" xml:space="preserve">
          <source>Plugins affecting the source code of modules.</source>
          <target state="translated">モジュールのソースコードに影響を与えるプラグイン</target>
        </trans-unit>
        <trans-unit id="1d817c41f95a536f92d934d7bdecc85177145725" translate="yes" xml:space="preserve">
          <source>Plugins are a key piece of the webpack ecosystem and provide the community with a powerful way to tap into webpack's compilation process. A plugin is able to &lt;a href=&quot;compiler-hooks#hooks&quot;&gt;hook&lt;/a&gt; into key events that are fired throughout each compilation. Every step of the way, the plugin will have full access to the &lt;code&gt;compiler&lt;/code&gt; and, when applicable, the current &lt;code&gt;compilation&lt;/code&gt;.</source>
          <target state="translated">プラグインはWebpackエコシステムの重要な部分であり、コミュニティにWebpackのコンパイルプロセスを利用する強力な方法を提供します。プラグインは、コンパイルのたびに発生する主要なイベントに&lt;a href=&quot;compiler-hooks#hooks&quot;&gt;フック&lt;/a&gt;することができます。方法のすべてのステップで、プラグインは &lt;code&gt;compiler&lt;/code&gt; と、該当する場合は現在の &lt;code&gt;compilation&lt;/code&gt; 完全にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="055ffa60e6263553e57e82581ec69a162848c83d" translate="yes" xml:space="preserve">
          <source>Plugins can give loaders more features.</source>
          <target state="translated">プラグインは、ローダーにより多くの機能を与えることができます。</target>
        </trans-unit>
        <trans-unit id="f07d29b36b7cbbcceae194206d11fd573dcaa16c" translate="yes" xml:space="preserve">
          <source>Plugins, which add entry chunks to the compilation.</source>
          <target state="translated">コンパイルにエントリチャンクを追加するプラグイン。</target>
        </trans-unit>
        <trans-unit id="c4581375b4816f15ef5ddb7e1f1d5df233c6d846" translate="yes" xml:space="preserve">
          <source>Polyfills for Node.js core libraries from &lt;a href=&quot;https://github.com/webpack/node-libs-browser&quot;&gt;&lt;code&gt;node-libs-browser&lt;/code&gt;&lt;/a&gt; are used if available, when the &lt;code&gt;NodeSourcePlugin&lt;/code&gt; plugin is enabled. See the list of &lt;a href=&quot;https://github.com/webpack/node-libs-browser#readme&quot;&gt;Node.js core libraries and their polyfills&lt;/a&gt;.</source>
          <target state="translated">Node.jsのコアライブラリのPolyfills &lt;a href=&quot;https://github.com/webpack/node-libs-browser&quot;&gt; &lt;code&gt;node-libs-browser&lt;/code&gt; &lt;/a&gt;利用できる場合と、使用されている &lt;code&gt;NodeSourcePlugin&lt;/code&gt; のプラグインが有効になっています。&lt;a href=&quot;https://github.com/webpack/node-libs-browser#readme&quot;&gt;Node.jsコアライブラリとそのポリフィル&lt;/a&gt;のリストをご覧ください。</target>
        </trans-unit>
        <trans-unit id="52e48d38205497d57aaf4d5a030c4760892250a1" translate="yes" xml:space="preserve">
          <source>Possible values are &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;warning&lt;/code&gt; or &lt;code&gt;info&lt;/code&gt; (default).</source>
          <target state="translated">可能な値は &lt;code&gt;none&lt;/code&gt; 、 &lt;code&gt;error&lt;/code&gt; 、 &lt;code&gt;warning&lt;/code&gt; または &lt;code&gt;info&lt;/code&gt; （デフォルト）です。</target>
        </trans-unit>
        <trans-unit id="361ae0458f5cb658b86063a130349c701509544c" translate="yes" xml:space="preserve">
          <source>Possible values for &lt;code&gt;mode&lt;/code&gt; are: &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;development&lt;/code&gt; or &lt;code&gt;production&lt;/code&gt;(default).</source>
          <target state="translated">以下のための可能な値 &lt;code&gt;mode&lt;/code&gt; 以下のとおりです。 &lt;code&gt;none&lt;/code&gt; 、 &lt;code&gt;development&lt;/code&gt; や &lt;code&gt;production&lt;/code&gt; （デフォルト）。</target>
        </trans-unit>
        <trans-unit id="b2ef221e3193ecc713338eb88d02a0cab9694e2a" translate="yes" xml:space="preserve">
          <source>Possible values:</source>
          <target state="translated">可能な値</target>
        </trans-unit>
        <trans-unit id="01f9ff5d0c9bc041f1daf305969f4fa700c1d939" translate="yes" xml:space="preserve">
          <source>Possible values: &lt;code&gt;&quot;pre&quot; | &quot;post&quot;&lt;/code&gt;</source>
          <target state="translated">可能な値： &lt;code&gt;&quot;pre&quot; | &quot;post&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fcacfeba5279113a917547a96db5eccae811287e" translate="yes" xml:space="preserve">
          <source>Possible values: &lt;code&gt;false | an array of paths&lt;/code&gt;</source>
          <target state="translated">可能な値： &lt;code&gt;false | an array of paths&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a63334f4d8d2bcbbf74cc54685bb9f57072b610b" translate="yes" xml:space="preserve">
          <source>PostCSS Config Context</source>
          <target state="translated">PostCSSコンフィグコンテキスト</target>
        </trans-unit>
        <trans-unit id="8ab8978a6c7d7e66fd1556156f7ed50176905046" translate="yes" xml:space="preserve">
          <source>PostCSS Config Directory</source>
          <target state="translated">PostCSS設定ディレクトリ</target>
        </trans-unit>
        <trans-unit id="2cfc6ae03601619aa86eab49f8cdcba160ca42e1" translate="yes" xml:space="preserve">
          <source>Pre-requisites</source>
          <target state="translated">Pre-requisites</target>
        </trans-unit>
        <trans-unit id="168bca5d8ffe7fcf0777b9490e3f8b20abb180c5" translate="yes" xml:space="preserve">
          <source>Predictable Long Term Caching with Webpack</source>
          <target state="translated">Webpack による予測可能な長期キャッシング</target>
        </trans-unit>
        <trans-unit id="a017516a26209a27675e5f8f9dfe745e80fc9c14" translate="yes" xml:space="preserve">
          <source>Preferred usage is via a &lt;code&gt;module.loaders&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;module.loaders&lt;/code&gt; 使用法はmodule.loadersによるものです。</target>
        </trans-unit>
        <trans-unit id="c466b70d8bb3283413094bfff0c5894318615fbd" translate="yes" xml:space="preserve">
          <source>Prefetch normal module requests, causing them to be resolved and built before the first &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; of that module occurs. Using this plugin can boost performance. Try to profile the build first to determine clever prefetching points.</source>
          <target state="translated">彼らは最初の前に解決して構築させる、通常のモジュールの要求をプリフェッチ &lt;code&gt;import&lt;/code&gt; または &lt;code&gt;require&lt;/code&gt; そのモジュールが原因で発生します。このプラグインを使用すると、パフォーマンスが向上します。最初にビルドのプロファイルを作成して、先読みの賢いポイントを特定してください。</target>
        </trans-unit>
        <trans-unit id="2937d90e96f47b36d8430320e9d4fdca15f49193" translate="yes" xml:space="preserve">
          <source>Prefetch the particular file</source>
          <target state="translated">特定のファイルをプリフェッチする</target>
        </trans-unit>
        <trans-unit id="390d835e9a58404f924bf8560cf971bb0c05dc03" translate="yes" xml:space="preserve">
          <source>PrefetchPlugin</source>
          <target state="translated">PrefetchPlugin</target>
        </trans-unit>
        <trans-unit id="f969b8b04b2e4eac51e6857c173d1cc50a449955" translate="yes" xml:space="preserve">
          <source>Prefetches &lt;code&gt;request&lt;/code&gt; and dependencies to enable a more parallel compilation. It doesn't create any chunk. The module is resolved from &lt;code&gt;request&lt;/code&gt; in &lt;code&gt;context&lt;/code&gt; (absolute path).</source>
          <target state="translated">&lt;code&gt;request&lt;/code&gt; と依存関係をプリフェッチして、より並列なコンパイルを可能にします。チャンクは作成されません。モジュールは &lt;code&gt;context&lt;/code&gt; 内の &lt;code&gt;request&lt;/code&gt; から解決されます（絶対パス）。</target>
        </trans-unit>
        <trans-unit id="d4fc1d5078b2cdd1ec28d3674e875c70ed032f2b" translate="yes" xml:space="preserve">
          <source>Prefetching/Preloading modules</source>
          <target state="translated">モジュールのプリフェッチ/プリロード</target>
        </trans-unit>
        <trans-unit id="b557f72e4bb86d25ee92b61deb79f7d6f99e2a55" translate="yes" xml:space="preserve">
          <source>Preload directive has a bunch of differences compared to prefetch:</source>
          <target state="translated">プリロードディレクティブはプリフェッチと比べて多くの違いがあります。</target>
        </trans-unit>
        <trans-unit id="93eafead7d994fc1c76cb5885f9101f436b01dc5" translate="yes" xml:space="preserve">
          <source>Preload one or more modules before loading the webpack configuration</source>
          <target state="translated">webpack 設定を読み込む前に 1 つ以上のモジュールをプリロードする</target>
        </trans-unit>
        <trans-unit id="19de4fcee88ae1bb0a8818fdccdf802f842045ea" translate="yes" xml:space="preserve">
          <source>Preload, Prefetch And Priorities in Chrome</source>
          <target state="translated">Chrome のプリロード、プリフェッチ、優先度</target>
        </trans-unit>
        <trans-unit id="9179293a16d129b230ef624d17e3d317d40674d0" translate="yes" xml:space="preserve">
          <source>Preloading content with rel=&quot;preload&quot;</source>
          <target state="translated">rel=&quot;preload &quot;でコンテンツをプリロードする</target>
        </trans-unit>
        <trans-unit id="a8bc382020aaaa716a496826f97b0c9d436c31a9" translate="yes" xml:space="preserve">
          <source>Preparation</source>
          <target state="translated">Preparation</target>
        </trans-unit>
        <trans-unit id="6117f4d694ff7c17ec6c519ced028d6cac0c5651" translate="yes" xml:space="preserve">
          <source>Prepare compressed versions of assets to serve them with Content-Encoding</source>
          <target state="translated">圧縮されたバージョンのアセットを用意して、Content-Encoding で提供します。</target>
        </trans-unit>
        <trans-unit id="6eb928f8c004dc86eed502a7a8287d9ea7438109" translate="yes" xml:space="preserve">
          <source>Prepare compressed versions of assets with node-zopfli</source>
          <target state="translated">node-zopfliでアセットの圧縮版を準備する</target>
        </trans-unit>
        <trans-unit id="d75c22389c793a2795b276e8fa347d15c2cc8eb2" translate="yes" xml:space="preserve">
          <source>Preserve Comments</source>
          <target state="translated">コメントを保存する</target>
        </trans-unit>
        <trans-unit id="6745a9b78ef3aa773e5a4469128d054d7aae731a" translate="yes" xml:space="preserve">
          <source>Preserve comments in &lt;code&gt;output&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;output&lt;/code&gt; コメントを保持する</target>
        </trans-unit>
        <trans-unit id="bca788763dd46b6bb079756ca4b68a206414f9a1" translate="yes" xml:space="preserve">
          <source>Preset</source>
          <target state="translated">Preset</target>
        </trans-unit>
        <trans-unit id="4c5b71d76433aa5873dea6b786d7419754f62e09" translate="yes" xml:space="preserve">
          <source>Prevent</source>
          <target state="translated">Prevent</target>
        </trans-unit>
        <trans-unit id="c2794e00cc8740613554b35b277da05b59754f41" translate="yes" xml:space="preserve">
          <source>Prevent Duplication</source>
          <target state="translated">重複防止</target>
        </trans-unit>
        <trans-unit id="4e4fc1d7fdfa37b74648dbf42fcaf4e9b410067a" translate="yes" xml:space="preserve">
          <source>Prevent Duplication: Use the &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;&lt;code&gt;SplitChunks&lt;/code&gt;&lt;/a&gt; to dedupe and split chunks.</source>
          <target state="translated">重複の防止：&lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt; &lt;code&gt;SplitChunks&lt;/code&gt; &lt;/a&gt;を使用して、チャンクの重複排除と分割を行います。</target>
        </trans-unit>
        <trans-unit id="2f6099ca376518163d3dfa8c1f36e6250e904c68" translate="yes" xml:space="preserve">
          <source>Prevent generation of modules for &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; calls matching the following regular expressions:</source>
          <target state="translated">防止のためのモジュールの生成 &lt;code&gt;import&lt;/code&gt; または &lt;code&gt;require&lt;/code&gt; 次の正規表現に一致する呼び出しを：</target>
        </trans-unit>
        <trans-unit id="70d92421da8673a13334c0b7f2dc0443d3edd923" translate="yes" xml:space="preserve">
          <source>Prevent webpack from parsing any files matching the given regular expression(s). Ignored files &lt;strong&gt;should not&lt;/strong&gt; have calls to &lt;code&gt;import&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;define&lt;/code&gt; or any other importing mechanism. This can boost build performance when ignoring large libraries.</source>
          <target state="translated">webpackが指定された正規表現に一致するファイルを解析しないようにします。無視されたファイルに&lt;strong&gt;は&lt;/strong&gt;、 &lt;code&gt;import&lt;/code&gt; 、 &lt;code&gt;require&lt;/code&gt; 、 &lt;code&gt;define&lt;/code&gt; などのインポートメカニズムの呼び出しを含め&lt;strong&gt;ないでください&lt;/strong&gt;。これにより、大きなライブラリを無視する場合のビルドパフォーマンスが向上します。</target>
        </trans-unit>
        <trans-unit id="84fa8a294b54a501062999c9b542b8080d036f21" translate="yes" xml:space="preserve">
          <source>Print compilation progress in percentage</source>
          <target state="translated">コンパイルの進捗状況をパーセンテージで表示</target>
        </trans-unit>
        <trans-unit id="853d057077a85b703ffdc0dbc6602a2799b5ea75" translate="yes" xml:space="preserve">
          <source>Prior to webpack, front-end developers would use tools like grunt and gulp to process these assets and move them from their &lt;code&gt;/src&lt;/code&gt; folder into their &lt;code&gt;/dist&lt;/code&gt; or &lt;code&gt;/build&lt;/code&gt; directory. The same idea was used for JavaScript modules, but tools like webpack will &lt;strong&gt;dynamically bundle&lt;/strong&gt; all dependencies (creating what's known as a &lt;a href=&quot;../concepts/dependency-graph&quot;&gt;dependency graph&lt;/a&gt;). This is great because every module now &lt;em&gt;explicitly states its dependencies&lt;/em&gt; and we'll avoid bundling modules that aren't in use.</source>
          <target state="translated">Webpackの前は、フロントエンドの開発者はgruntやgulpなどのツールを使用してこれらのアセットを処理し、 &lt;code&gt;/src&lt;/code&gt; フォルダーから &lt;code&gt;/dist&lt;/code&gt; または &lt;code&gt;/build&lt;/code&gt; ディレクトリに移動していました。JavaScriptモジュールにも同じアイデアが使用されましたが、webpackなどのツールはすべての依存関係を&lt;strong&gt;動的にバンドルし&lt;/strong&gt;ます（&lt;a href=&quot;../concepts/dependency-graph&quot;&gt;依存関係グラフと&lt;/a&gt;呼ばれるものを作成します）。すべてのモジュール&lt;em&gt;が依存関係&lt;/em&gt;を&lt;em&gt;明示的に示すように&lt;/em&gt;なり、使用されていないモジュールのバンドルを回避できるため、これは素晴らしいことです。</target>
        </trans-unit>
        <trans-unit id="5bc14c6a8a73b39710c3f86c823755dd32a2486d" translate="yes" xml:space="preserve">
          <source>Problems with &lt;code&gt;url(...)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;url(...)&lt;/code&gt; に関する問題</target>
        </trans-unit>
        <trans-unit id="df70fc7991d3f1476ee9b62f9991c5a0f2c589e0" translate="yes" xml:space="preserve">
          <source>Production</source>
          <target state="translated">Production</target>
        </trans-unit>
        <trans-unit id="c26e233131491c824870820a3e2b3a31b5923ca6" translate="yes" xml:space="preserve">
          <source>Profile them to not introduce a performance problem here.</source>
          <target state="translated">ここにパフォーマンスの問題を導入しないために、彼らをプロファイルします。</target>
        </trans-unit>
        <trans-unit id="cea5295b78ec1b99a624dda73a7e6d10f18cdf3f" translate="yes" xml:space="preserve">
          <source>Profiling</source>
          <target state="translated">Profiling</target>
        </trans-unit>
        <trans-unit id="eb4b2578141e01fd0c09daab7c2b1fcc38468689" translate="yes" xml:space="preserve">
          <source>ProfilingPlugin</source>
          <target state="translated">ProfilingPlugin</target>
        </trans-unit>
        <trans-unit id="ee50a58f4658425f2606deb72485539d209a46d0" translate="yes" xml:space="preserve">
          <source>ProgressPlugin</source>
          <target state="translated">ProgressPlugin</target>
        </trans-unit>
        <trans-unit id="9ce7fc34d5a940a43c1c9a5378b9ba9f8ad51b8a" translate="yes" xml:space="preserve">
          <source>Progressive Web Application</source>
          <target state="translated">プログレッシブWebアプリケーション</target>
        </trans-unit>
        <trans-unit id="a1d47544cbf8518c826a49f4542afebff6574602" translate="yes" xml:space="preserve">
          <source>Progressive Web Applications (or PWAs) are web apps that deliver an experience similar to native applications. There are many things that can contribute to that. Of these, the most significant is the ability for an app to be able to function when &lt;strong&gt;offline&lt;/strong&gt;. This is achieved through the use of a web technology called &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/&quot;&gt;Service Workers&lt;/a&gt;.</source>
          <target state="translated">プログレッシブWebアプリケーション（またはPWA）は、ネイティブアプリケーションと同様のエクスペリエンスを提供するWebアプリです。それに貢献することができる多くのものがあります。これらの中で最も重要なのは、&lt;strong&gt;オフライン&lt;/strong&gt;時にアプリが機能できることです。これは、&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/&quot;&gt;Service Workers&lt;/a&gt;と呼ばれるWebテクノロジーを使用して実現されます。</target>
        </trans-unit>
        <trans-unit id="b2e2405ab7402f6ab230b6398229a23b1c3e9380" translate="yes" xml:space="preserve">
          <source>Property in the &lt;code&gt;this&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; オブジェクトのプロパティ。</target>
        </trans-unit>
        <trans-unit id="b71bc359101e7e3543bb1c11cd760c55850d45a2" translate="yes" xml:space="preserve">
          <source>Property in the global object, for node.</source>
          <target state="translated">グローバルオブジェクトのプロパティ。</target>
        </trans-unit>
        <trans-unit id="41e1e744dda7cd8949e21e9c59e08d6fbb8371a1" translate="yes" xml:space="preserve">
          <source>Provide Babel presets and plugins</source>
          <target state="translated">バベルのプリセットとプラグインを提供</target>
        </trans-unit>
        <trans-unit id="f71aba112975c3f77f3e63ba1d059603e20d8ce5" translate="yes" xml:space="preserve">
          <source>Provide a cache directory where cache items should be stored (used for default read/write implementation)</source>
          <target state="translated">キャッシュアイテムが格納されるキャッシュディレクトリを提供する (デフォルトの読み書き実装で使用)</target>
        </trans-unit>
        <trans-unit id="9e73e398ff413d23360495d7730d96a04b3fa96d" translate="yes" xml:space="preserve">
          <source>Provide an invalidation identifier which is used to generate the hashes. You can use it for extra dependencies of loaders (used for default read/write implementation)</source>
          <target state="translated">ハッシュを生成するために使用される無効化識別子を提供します。これはローダーの追加の依存関係に使用することができます (デフォルトの読み書き実装に使用されます)</target>
        </trans-unit>
        <trans-unit id="c95356976c75eef71cd7567f26cf1af85f3b0149" translate="yes" xml:space="preserve">
          <source>Provide labels &lt;code&gt;require:&lt;/code&gt; and &lt;code&gt;exports:&lt;/code&gt; to modules.</source>
          <target state="translated">ラベルに &lt;code&gt;require:&lt;/code&gt; を提供し、モジュールに &lt;code&gt;exports:&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="18f85a610445d7ff2881c62d6d72f3622d17fb80" translate="yes" xml:space="preserve">
          <source>Provide stuff that is normally available in Node.js modules.</source>
          <target state="translated">Node.js モジュールで通常利用できるものを提供する。</target>
        </trans-unit>
        <trans-unit id="28921ddb834c3ca83287ff2ccb648a91d484d86b" translate="yes" xml:space="preserve">
          <source>Provide stuff that is normally available in require.js.</source>
          <target state="translated">通常はrequire.jsで利用できるものを提供します。</target>
        </trans-unit>
        <trans-unit id="a0b16c44f29505f28172dc6d40099bf222dd0c68" translate="yes" xml:space="preserve">
          <source>Provide these modules as globals, see &lt;a href=&quot;../guides/shimming&quot;&gt;shimming&lt;/a&gt;</source>
          <target state="translated">これらのモジュールをグローバルとして提供します。&lt;a href=&quot;../guides/shimming&quot;&gt;シミングを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="7e23b3c84c3ec72742e36387d71dff6a0095f93d" translate="yes" xml:space="preserve">
          <source>ProvidePlugin</source>
          <target state="translated">ProvidePlugin</target>
        </trans-unit>
        <trans-unit id="00b2d96c2e0bb46b5b8efa6185b7476aea3c8dca" translate="yes" xml:space="preserve">
          <source>Provides &lt;code&gt;require.context&lt;/code&gt;. The parameter &lt;code&gt;modulesDirectories&lt;/code&gt; and &lt;code&gt;extensions&lt;/code&gt; are used to find alternative requests for files. It's useful to provide the same arrays as you provide to the resolver.</source>
          <target state="translated">&lt;code&gt;require.context&lt;/code&gt; を提供します。パラメータ &lt;code&gt;modulesDirectories&lt;/code&gt; および &lt;code&gt;extensions&lt;/code&gt; は、ファイルの代替リクエストを見つけるために使用されます。リゾルバーに提供するのと同じ配列を提供すると便利です。</target>
        </trans-unit>
        <trans-unit id="ccac1bffde4b46feae3d37ac89d8a797666697ad" translate="yes" xml:space="preserve">
          <source>Provides &lt;code&gt;require.ensure&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;require.ensure&lt;/code&gt; を提供します。</target>
        </trans-unit>
        <trans-unit id="caea413a4ea18be73d6426da779623f518a353d0" translate="yes" xml:space="preserve">
          <source>Provides &lt;code&gt;require.include&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;require.include&lt;/code&gt; を提供します。</target>
        </trans-unit>
        <trans-unit id="3f35c08902b87030a7f86cd35a275b18c6461b0d" translate="yes" xml:space="preserve">
          <source>Provides AMD-style &lt;code&gt;define&lt;/code&gt; and &lt;code&gt;require&lt;/code&gt; to modules. Also bind &lt;code&gt;require.amd&lt;/code&gt;, &lt;code&gt;define.amd&lt;/code&gt; and webpack_amd_options## to the &lt;code&gt;options&lt;/code&gt; passed as parameter.</source>
          <target state="translated">AMDスタイルの &lt;code&gt;define&lt;/code&gt; を提供し、モジュールに &lt;code&gt;require&lt;/code&gt; します。また、パラメーターとして渡された &lt;code&gt;options&lt;/code&gt; &lt;code&gt;require.amd&lt;/code&gt; 、 &lt;code&gt;define.amd&lt;/code&gt; 、およびwebpack_amd_options ##をバインドします。</target>
        </trans-unit>
        <trans-unit id="3d4acf80bc5ea0f22c1e5e92813f8cc30ff36540" translate="yes" xml:space="preserve">
          <source>Provides CommonJs-style &lt;code&gt;require&lt;/code&gt; to modules.</source>
          <target state="translated">CommonJsスタイルの &lt;code&gt;require&lt;/code&gt; をモジュールに提供します。</target>
        </trans-unit>
        <trans-unit id="14c6c2b56fa620cfe65b896f633e3baef406a8ba" translate="yes" xml:space="preserve">
          <source>Provides the ability to execute custom middleware after all other middleware internally within the server.</source>
          <target state="translated">サーバー内で他のすべてのミドルウェアの後にカスタムミドルウェアを実行する機能を提供します。</target>
        </trans-unit>
        <trans-unit id="651b73c46abd2e0cc12c0978ce9833dcabb3b6c5" translate="yes" xml:space="preserve">
          <source>Provides the ability to execute custom middleware prior to all other middleware internally within the server. This could be used to define custom handlers, for example:</source>
          <target state="translated">サーバー内の他のすべてのミドルウェアよりも先にカスタムミドルウェアを実行する機能を提供します。これは、例えばカスタムハンドラを定義するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="4142b96f54c15dc4e11fe1b44786bc0167f9f4cb" translate="yes" xml:space="preserve">
          <source>Providing the &lt;code&gt;mode&lt;/code&gt; configuration option tells webpack to use its built-in optimizations accordingly.</source>
          <target state="translated">&lt;code&gt;mode&lt;/code&gt; 設定オプションを提供すると、それに応じて組み込みの最適化を使用するようにwebpackに指示します。</target>
        </trans-unit>
        <trans-unit id="cc5d66bd095ccf64cdaf8dab20ee18d4ee9f3910" translate="yes" xml:space="preserve">
          <source>Proxying some URLs can be useful when you have a separate API backend development server and you want to send API requests on the same domain.</source>
          <target state="translated">いくつかの URL をプロキシすることは、API バックエンド開発サーバーを別個に持っていて、同じドメインで API リクエストを送信したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="138809ef784cde88aec7f588f1644dcbf06a9730" translate="yes" xml:space="preserve">
          <source>Public Path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bad627c5524aadbdba72f875f9cde8011754d0e5" translate="yes" xml:space="preserve">
          <source>Put this loader in front of other loaders. The following loaders run in a worker pool.</source>
          <target state="translated">このローダーを他のローダーの前に置きます。以下のローダーはワーカープールで実行されます。</target>
        </trans-unit>
        <trans-unit id="53fb27ed3568a98ac19274e39a58d83510ec0c2f" translate="yes" xml:space="preserve">
          <source>Putting the content of &lt;code&gt;helpers&lt;/code&gt; into each chunk will result into its code being downloaded twice. By using a separate chunk this will only happen once. We pay the cost of an additional request, which could be considered a tradeoff. That's why there is a minimum size of 30kb.</source>
          <target state="translated">&lt;code&gt;helpers&lt;/code&gt; のコンテンツを各チャンクに入れると、コードが2回ダウンロードされます。別のチャンクを使用することにより、これは一度だけ行われます。私たちは追加のリクエストの費用を支払いますが、これはトレードオフと見なすことができます。そのため、最小サイズは30kbです。</target>
        </trans-unit>
        <trans-unit id="8a9b6130aa6732b5b6bc6d3b954216477743ad28" translate="yes" xml:space="preserve">
          <source>Qualities</source>
          <target state="translated">Qualities</target>
        </trans-unit>
        <trans-unit id="14a1c21a1304ad0ee741ad05bda442f60c1f277e" translate="yes" xml:space="preserve">
          <source>Query Options</source>
          <target state="translated">クエリオプション</target>
        </trans-unit>
        <trans-unit id="f9547326220882df69495a2dd01e3a453ece7043" translate="yes" xml:space="preserve">
          <source>Query value</source>
          <target state="translated">クエリ値</target>
        </trans-unit>
        <trans-unit id="138f14b0b01ba7ad70311f3aabaa6e572b2cb47c" translate="yes" xml:space="preserve">
          <source>QueryString Options</source>
          <target state="translated">クエリ文字列オプション</target>
        </trans-unit>
        <trans-unit id="4fcb8c79d68fd4d6d6033a1d4be369eaa8ad224e" translate="yes" xml:space="preserve">
          <source>Rather, because &lt;code&gt;moment&lt;/code&gt; imports with this code:</source>
          <target state="translated">むしろ、 &lt;code&gt;moment&lt;/code&gt; はこのコードでインポートされるため：</target>
        </trans-unit>
        <trans-unit id="c9d9c05e89f890070a589388790c9ebfd8a65725" translate="yes" xml:space="preserve">
          <source>React: &lt;a href=&quot;https://reacttraining.com/react-router/web/guides/code-splitting&quot;&gt;Code Splitting and Lazy Loading&lt;/a&gt;</source>
          <target state="translated">React：&lt;a href=&quot;https://reacttraining.com/react-router/web/guides/code-splitting&quot;&gt;コード分​​割と遅延読み込み&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c39d343ee23cf54872e3b0b82688f0bee8855736" translate="yes" xml:space="preserve">
          <source>Read More about Extending Configuration Files</source>
          <target state="translated">設定ファイルの拡張についての詳細はこちら</target>
        </trans-unit>
        <trans-unit id="a5d02b469c10ccab1651045b7f003a41b5defb2b" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;../guides/author-libraries&quot;&gt;authoring libraries guide&lt;/a&gt; guide for more information on &lt;code&gt;output.library&lt;/code&gt; as well as &lt;code&gt;output.libraryTarget&lt;/code&gt;.</source>
          <target state="translated">読む&lt;a href=&quot;../guides/author-libraries&quot;&gt;オーサリングライブラリガイド&lt;/a&gt;の詳細についてのガイドを &lt;code&gt;output.library&lt;/code&gt; など &lt;code&gt;output.libraryTarget&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="76c9e6b091f8555f8022635989382563379e3c96" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;../guides/installation&quot;&gt;installation guide&lt;/a&gt; if you don't already have webpack and CLI installed.</source>
          <target state="translated">webpackとCLIがまだインストールされていない場合は、&lt;a href=&quot;../guides/installation&quot;&gt;インストールガイド&lt;/a&gt;をお読みください。</target>
        </trans-unit>
        <trans-unit id="8b9831e6175fa654bc52da1f11e26f428496ffea" translate="yes" xml:space="preserve">
          <source>Recently, &lt;code&gt;ts-loader&lt;/code&gt; has started to consume the internal TypeScript watch mode APIs which dramatically decreases the number of modules to be rebuilt on each iteration. This &lt;code&gt;experimentalWatchApi&lt;/code&gt; shares the same logic as the normal TypeScript watch mode itself and is quite stable for development use. Turn on &lt;code&gt;transpileOnly&lt;/code&gt; as well for truly fast incremental builds.</source>
          <target state="translated">最近、 &lt;code&gt;ts-loader&lt;/code&gt; は、内部のTypeScript監視モードAPIを使用し始め、反復ごとに再構築するモジュールの数を劇的に減らしています。この &lt;code&gt;experimentalWatchApi&lt;/code&gt; は、通常のTypeScriptウォッチモード自体と同じロジックを共有し、開発用に非常に安定しています。本当に高速なインクリメンタルビルドでは、 &lt;code&gt;transpileOnly&lt;/code&gt; もオンにします。</target>
        </trans-unit>
        <trans-unit id="bbb37b6d15db38153847eeb919d56d5328c44951" translate="yes" xml:space="preserve">
          <source>RecordIdsPlugin</source>
          <target state="translated">RecordIdsPlugin</target>
        </trans-unit>
        <trans-unit id="500dd454daedf0b0d7fb544e9ac14192f693de18" translate="yes" xml:space="preserve">
          <source>Records are particularly useful if you have a complex setup that leverages &lt;a href=&quot;../guides/code-splitting&quot;&gt;Code Splitting&lt;/a&gt;. The data can be used to ensure the split bundles are achieving the &lt;a href=&quot;../guides/caching&quot;&gt;caching&lt;/a&gt; behavior you need.</source>
          <target state="translated">レコードは、&lt;a href=&quot;../guides/code-splitting&quot;&gt;コード分​​割&lt;/a&gt;を活用する複雑な設定がある場合に特に役立ちます。データを使用して、分割バンドルが必要な&lt;a href=&quot;../guides/caching&quot;&gt;キャッシング&lt;/a&gt;動作を確実に実行できるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="29edf14ed2cf63f8c57f91d622484b33ec5b610d" translate="yes" xml:space="preserve">
          <source>Reference the &lt;a href=&quot;https://github.com/webpack-contrib/polymer-webpack-loader/blob/master/demo/src/index.ejs&quot;&gt;demo html file&lt;/a&gt; for the proper loading sequence.</source>
          <target state="translated">適切なロードシーケンスについては、&lt;a href=&quot;https://github.com/webpack-contrib/polymer-webpack-loader/blob/master/demo/src/index.ejs&quot;&gt;デモHTMLファイル&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5d20d0fee3b91643dd8d272ac33d01ca95179d82" translate="yes" xml:space="preserve">
          <source>References</source>
          <target state="translated">References</target>
        </trans-unit>
        <trans-unit id="806430f89bd9b62c7cfb2eed31236525d29c5c5e" translate="yes" xml:space="preserve">
          <source>References a dll manifest file to map dependency names to module ids, then requires them as needed using the internal &lt;code&gt;__webpack_require__&lt;/code&gt; function.</source>
          <target state="translated">DLLマニフェストファイルを参照して依存関係名をモジュールIDにマップし、必要に応じて内部 &lt;code&gt;__webpack_require__&lt;/code&gt; 関数を使用して依存関係名を要求します。</target>
        </trans-unit>
        <trans-unit id="e84924bdbf290769f17a9fea046a3d8be57d31f9" translate="yes" xml:space="preserve">
          <source>Register a function to listen for changes in &lt;code&gt;status&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; 変化をリッスンする関数を登録します。</target>
        </trans-unit>
        <trans-unit id="dd7bb9e1d6de0940bf8cc7f5d552eac3e907a3df" translate="yes" xml:space="preserve">
          <source>Registering Our Service Worker</source>
          <target state="translated">サービスワーカーの登録</target>
        </trans-unit>
        <trans-unit id="743f247412091cd63d9bf68867401d2b01423153" translate="yes" xml:space="preserve">
          <source>Regular Expression or function (see previous point)</source>
          <target state="translated">正規表現または関数(前の点を参照</target>
        </trans-unit>
        <trans-unit id="95fcb99c97c4f07e4429e3498285f25058bba00f" translate="yes" xml:space="preserve">
          <source>Reject updates for itself.</source>
          <target state="translated">自分自身のために更新を拒否する。</target>
        </trans-unit>
        <trans-unit id="b3ef9adaf388e07f00bd633ecc44a2dc9a571661" translate="yes" xml:space="preserve">
          <source>Reject updates for the given &lt;code&gt;dependencies&lt;/code&gt; forcing the update to fail with a &lt;code&gt;'decline'&lt;/code&gt; code.</source>
          <target state="translated">与えられた &lt;code&gt;dependencies&lt;/code&gt; 更新を拒否し、更新を &lt;code&gt;'decline'&lt;/code&gt; コードで失敗させます。</target>
        </trans-unit>
        <trans-unit id="cf7ddb7603d2a26315f2455b522c75c84a223953" translate="yes" xml:space="preserve">
          <source>Relative paths</source>
          <target state="translated">相対パス</target>
        </trans-unit>
        <trans-unit id="9b0c95bb60fa0d6b00c6679fde1ebeb8ea6f6483" translate="yes" xml:space="preserve">
          <source>Remember that &lt;code&gt;lodash&lt;/code&gt; package we were using? For demonstration purposes, let's say we wanted to instead provide this as a global throughout our application. To do this, we can use the &lt;code&gt;ProvidePlugin&lt;/code&gt;.</source>
          <target state="translated">使用していた &lt;code&gt;lodash&lt;/code&gt; パッケージを覚えていますか？デモンストレーションの目的で、アプリケーション全体でこれをグローバルとして提供したいとします。これを行うには、 &lt;code&gt;ProvidePlugin&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="298f8a952e11c47a146509416894334060fae16f" translate="yes" xml:space="preserve">
          <source>Remember that when using the &lt;a href=&quot;uglifyjs-webpack-plugin&quot;&gt;&lt;code&gt;UglifyJSPlugin&lt;/code&gt;&lt;/a&gt;, you must utilize the &lt;code&gt;sourceMap&lt;/code&gt; option.</source>
          <target state="translated">&lt;a href=&quot;uglifyjs-webpack-plugin&quot;&gt; &lt;code&gt;UglifyJSPlugin&lt;/code&gt; &lt;/a&gt;を使用するときは、 &lt;code&gt;sourceMap&lt;/code&gt; オプションを使用する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="bc75d441bfa1f4e69943b8c637e62baed6d344e6" translate="yes" xml:space="preserve">
          <source>Remove a registered status handler.</source>
          <target state="translated">登録されているステータスハンドラを削除します。</target>
        </trans-unit>
        <trans-unit id="86dc7ac837ee3922e692052e5a72685c918b97be" translate="yes" xml:space="preserve">
          <source>Remove all dependencies of the loader result. Even initial dependencies and these of other loaders. Consider using &lt;code&gt;pitch&lt;/code&gt;.</source>
          <target state="translated">ローダー結果のすべての依存関係を削除します。初期の依存関係と他のローダーの依存関係さえも。 &lt;code&gt;pitch&lt;/code&gt; 使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="db11da02660881778d9f70873ecc4531e5238be0" translate="yes" xml:space="preserve">
          <source>Remove the callback added via &lt;code&gt;dispose&lt;/code&gt; or &lt;code&gt;addDisposeHandler&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dispose&lt;/code&gt; または &lt;code&gt;addDisposeHandler&lt;/code&gt; によって追加されたコールバックを削除します。</target>
        </trans-unit>
        <trans-unit id="0bf7471dcec5264f0fa3ba99680a0ed28646fcad" translate="yes" xml:space="preserve">
          <source>Remove unused code.</source>
          <target state="translated">未使用のコードを削除します。</target>
        </trans-unit>
        <trans-unit id="9873cfd7e2a458e89691e96ea4c58199b748b3b5" translate="yes" xml:space="preserve">
          <source>RemoveEmptyChunksPlugin</source>
          <target state="translated">RemoveEmptyChunksPlugin</target>
        </trans-unit>
        <trans-unit id="3da760a26bf6534d21a9780897c53ec553f4e69d" translate="yes" xml:space="preserve">
          <source>Removes &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes from &lt;code&gt;&amp;lt;svg /&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;svg /&amp;gt;&lt;/code&gt; から &lt;code&gt;width&lt;/code&gt; と &lt;code&gt;height&lt;/code&gt; 属性を削除します。</target>
        </trans-unit>
        <trans-unit id="d4ebcc27454ebc01bfe9f2d91aa1f18208ce3e7b" translate="yes" xml:space="preserve">
          <source>Removes all directory references and only copies file names.⚠️ If files have the same name, the result is non-deterministic</source>
          <target state="translated">全てのディレクトリ参照を削除し、ファイル名のみをコピーします ⚠️ ファイル名が同じ場合、結果は非決定的になります</target>
        </trans-unit>
        <trans-unit id="482cb600588ab8afaba15a68fed4f3c483e3091b" translate="yes" xml:space="preserve">
          <source>Removes attributes from inside the &lt;code&gt;&amp;lt;svg /&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;svg /&amp;gt;&lt;/code&gt; 内から属性を削除します。</target>
        </trans-unit>
        <trans-unit id="e47c65a2b82a9efef40fc0ae3bf527fada456fc3" translate="yes" xml:space="preserve">
          <source>Removes specified tags and its children. You can specify tags by setting &lt;code&gt;removingTags&lt;/code&gt; query array.</source>
          <target state="translated">指定されたタグとその子を削除します。 &lt;code&gt;removingTags&lt;/code&gt; クエリ配列を設定することにより、タグを指定できます。</target>
        </trans-unit>
        <trans-unit id="fc6c4d451ecb6322a8275648f0407eaad844edc0" translate="yes" xml:space="preserve">
          <source>Replace a specific module when building for a &lt;a href=&quot;../guides/production&quot;&gt;development environment&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../guides/production&quot;&gt;開発環境&lt;/a&gt;用にビルドするときに、特定のモジュールを置き換えます。</target>
        </trans-unit>
        <trans-unit id="65bb0f4d7377e6cf9a90c603a8225b5f6fdc198a" translate="yes" xml:space="preserve">
          <source>Replace resource(s) that matches a regexp</source>
          <target state="translated">正規表現にマッチするリソースを置換します。</target>
        </trans-unit>
        <trans-unit id="1697458e975ac729b88e562177f723a8da0c34ce" translate="yes" xml:space="preserve">
          <source>Replaces</source>
          <target state="translated">Replaces</target>
        </trans-unit>
        <trans-unit id="bff5c4dd0585a4f0e68311b683e36c85f477b138" translate="yes" xml:space="preserve">
          <source>Require</source>
          <target state="translated">Require</target>
        </trans-unit>
        <trans-unit id="6010f42941314bd2e16a40b0ac73a734cd7cb6c7" translate="yes" xml:space="preserve">
          <source>Require a fallback for non-worker supporting environments</source>
          <target state="translated">非ワーカーサポート環境のためのフォールバックを必要とする</target>
        </trans-unit>
        <trans-unit id="6c9edaf3770164ff37deb0cb23c37bafead4971a" translate="yes" xml:space="preserve">
          <source>RequireContextPlugin</source>
          <target state="translated">RequireContextPlugin</target>
        </trans-unit>
        <trans-unit id="43238921b568ca4ba900a9a52844c2058db99e54" translate="yes" xml:space="preserve">
          <source>RequireEnsurePlugin</source>
          <target state="translated">RequireEnsurePlugin</target>
        </trans-unit>
        <trans-unit id="a30b8d4cc6e89bbfda1b96a1316ab0c6ac1f872f" translate="yes" xml:space="preserve">
          <source>RequireIncludePlugin</source>
          <target state="translated">RequireIncludePlugin</target>
        </trans-unit>
        <trans-unit id="bd3796ebdfb294f6f69fa91710a470fe5978b2e8" translate="yes" xml:space="preserve">
          <source>RequireJsStuffPlugin</source>
          <target state="translated">RequireJsStuffPlugin</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">Requirements</target>
        </trans-unit>
        <trans-unit id="ac7f958cc028becfb4b2bec9c474bd2d5e8b6095" translate="yes" xml:space="preserve">
          <source>Resolve</source>
          <target state="translated">Resolve</target>
        </trans-unit>
        <trans-unit id="3432aff5199021e62327737e81355e2fee54208f" translate="yes" xml:space="preserve">
          <source>Resolve Options</source>
          <target state="translated">オプションの解決</target>
        </trans-unit>
        <trans-unit id="f4143195790e7b1a6c2f12714b89024432e0904e" translate="yes" xml:space="preserve">
          <source>Resolve a request like a require expression.</source>
          <target state="translated">require式のようなリクエストを解決します。</target>
        </trans-unit>
        <trans-unit id="47ecade1ed39b604db07f2373e6d2388db12b9e7" translate="yes" xml:space="preserve">
          <source>Resolvers</source>
          <target state="translated">Resolvers</target>
        </trans-unit>
        <trans-unit id="0a04022c4e0e7bb30e09b8de97fac5544e03cab9" translate="yes" xml:space="preserve">
          <source>Resolvers are created using the &lt;code&gt;enhanced-resolve&lt;/code&gt; package. The &lt;code&gt;Resolver&lt;/code&gt; class extends the &lt;code&gt;tapable&lt;/code&gt; class and uses &lt;code&gt;tapable&lt;/code&gt; to provide a few hooks. The &lt;code&gt;enhanced-resolve&lt;/code&gt; package can be used directly to create new resolvers, however any &lt;a href=&quot;node#compiler-instance&quot;&gt;&lt;code&gt;compiler&lt;/code&gt; instance&lt;/a&gt; has a few resolver instances that can be tapped into.</source>
          <target state="translated">リゾルバーは、 &lt;code&gt;enhanced-resolve&lt;/code&gt; パッケージを使用して作成されます。 &lt;code&gt;Resolver&lt;/code&gt; クラスは、拡張 &lt;code&gt;tapable&lt;/code&gt; クラスを使用すると &lt;code&gt;tapable&lt;/code&gt; いくつかのフックを提供します。 &lt;code&gt;enhanced-resolve&lt;/code&gt; パッケージには、あらゆるしかし、新しいリゾルバを作成するために直接使用することができる&lt;a href=&quot;node#compiler-instance&quot;&gt; &lt;code&gt;compiler&lt;/code&gt; インスタンスは&lt;/a&gt;にタップすることができ、いくつかのリゾルバインスタンスを持っています。</target>
        </trans-unit>
        <trans-unit id="4827063ce86796eddb67161665ffc39e58f2551c" translate="yes" xml:space="preserve">
          <source>Resolves the given request to a module, applies all configured loaders and calls back with the generated source, the sourceMap and the module instance (usually an instance of &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/NormalModule.js&quot;&gt;&lt;code&gt;NormalModule&lt;/code&gt;&lt;/a&gt;). Use this function if you need to know the source code of another module to generate the result.</source>
          <target state="translated">指定されたリクエストをモジュールに解決し、構成されたすべてのローダーを適用し、生成されたソース、sourceMap、およびモジュールインスタンス（通常は&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/NormalModule.js&quot;&gt; &lt;code&gt;NormalModule&lt;/code&gt; の&lt;/a&gt;インスタンス）を使用してコールバックします。結果を生成するために別のモジュールのソースコードを知る必要がある場合は、この関数を使用します。</target>
        </trans-unit>
        <trans-unit id="0496ee3fee946976397fbaaafbfe520ed9cd2a64" translate="yes" xml:space="preserve">
          <source>Resolving</source>
          <target state="translated">Resolving</target>
        </trans-unit>
        <trans-unit id="e3cfe8adaeb34b5dae64dfd3df0c12c06cc6dde4" translate="yes" xml:space="preserve">
          <source>Resolving Loaders</source>
          <target state="translated">ローダの解決</target>
        </trans-unit>
        <trans-unit id="c2f0ec17c944bb807b10be302d71736723bc4c6f" translate="yes" xml:space="preserve">
          <source>Resolving rules in webpack</source>
          <target state="translated">webpack でルールを解決する</target>
        </trans-unit>
        <trans-unit id="87df60de337fb58864343e396696d74611e0d403" translate="yes" xml:space="preserve">
          <source>Resources</source>
          <target state="translated">Resources</target>
        </trans-unit>
        <trans-unit id="023439148eb14eee98cc632e2b3413bd7104e53f" translate="yes" xml:space="preserve">
          <source>Restore chunk information from records.</source>
          <target state="translated">レコードからチャンク情報を復元します。</target>
        </trans-unit>
        <trans-unit id="1a6c030e3332163797f8d8b087994cef1d3091a1" translate="yes" xml:space="preserve">
          <source>Restore module information from records.</source>
          <target state="translated">レコードからモジュール情報を復元します。</target>
        </trans-unit>
        <trans-unit id="a6e4a9f3687ba5f929d9c85fef2366beb0a84bca" translate="yes" xml:space="preserve">
          <source>Resulting environment</source>
          <target state="translated">結果の環境</target>
        </trans-unit>
        <trans-unit id="6feaf1b4c25f3b349afc2efaa914a5d94e7222b9" translate="yes" xml:space="preserve">
          <source>Retain application state which is lost during a full reload.</source>
          <target state="translated">フルリロード中に失われたアプリケーションの状態を保持します。</target>
        </trans-unit>
        <trans-unit id="2dbf5cf165d9e17cc3cfaabca2751bab59dfc4e0" translate="yes" xml:space="preserve">
          <source>Retrieve the current status of the hot module replacement process.</source>
          <target state="translated">ホットモジュール交換プロセスの現在の状態を取得します。</target>
        </trans-unit>
        <trans-unit id="729789ff7741b8f4ac5d5c9840807831eb2784ac" translate="yes" xml:space="preserve">
          <source>Return Object Properties</source>
          <target state="translated">オブジェクトのプロパティを返します。</target>
        </trans-unit>
        <trans-unit id="6daf6530c152e098b9400577d9405899c652f052" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;Promise&lt;/code&gt;, which resolves with an &lt;code&gt;Object&lt;/code&gt; containing:</source>
          <target state="translated">次を含む &lt;code&gt;Object&lt;/code&gt; で解決する &lt;code&gt;Promise&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="74604c341dd520194f23eabd2da656c294f75fbc" translate="yes" xml:space="preserve">
          <source>Returns a formatted string of the compilation information (similar to &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt; output).</source>
          <target state="translated">コンパイル情報のフォーマットされた文字列を返します（&lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt;出力と同様）。</target>
        </trans-unit>
        <trans-unit id="92e2c5131a5350cd343ea668874739fbeb829662" translate="yes" xml:space="preserve">
          <source>Returns compilation information as a JSON object. &lt;code&gt;options&lt;/code&gt; can be either a string (a preset) or an object for more granular control:</source>
          <target state="translated">コンパイル情報をJSONオブジェクトとして返します。 &lt;code&gt;options&lt;/code&gt; は、文字列（プリセット）またはより詳細な制御のためのオブジェクトのいずれかです。</target>
        </trans-unit>
        <trans-unit id="5ed6c8d9b592e3818013d15eb20c2a8448226eda" translate="yes" xml:space="preserve">
          <source>Reuses a single &lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt; element, instead of adding/removing individual elements for each required module.</source>
          <target state="translated">必要なモジュールごとに個別の要素を追加/削除する代わりに、単一の &lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt; 要素を再利用します。</target>
        </trans-unit>
        <trans-unit id="d210935e26b0bb103a3faa0d965a18c756f8cbfd" translate="yes" xml:space="preserve">
          <source>Reward modern browser users script</source>
          <target state="translated">現代のブラウザユーザーに報酬を与えるスクリプト</target>
        </trans-unit>
        <trans-unit id="e96857c58f716104caead648ee6aa61ab8e41cdc" translate="yes" xml:space="preserve">
          <source>Root</source>
          <target state="translated">Root</target>
        </trans-unit>
        <trans-unit id="78e1790e29a5541b6d02348fc3f45f18445709f4" translate="yes" xml:space="preserve">
          <source>Rule</source>
          <target state="translated">Rule</target>
        </trans-unit>
        <trans-unit id="e2d20b6772074cf8de6f88e6a258855345fac21b" translate="yes" xml:space="preserve">
          <source>Rule Conditions</source>
          <target state="translated">ルール条件</target>
        </trans-unit>
        <trans-unit id="a6328ec24079df0f6c1e7d850b422bd7d296967e" translate="yes" xml:space="preserve">
          <source>Rule results</source>
          <target state="translated">ルール結果</target>
        </trans-unit>
        <trans-unit id="b425d5f98c8e7887f024f258ef9ba80eebb288ec" translate="yes" xml:space="preserve">
          <source>Rule results are used only when the Rule condition matches.</source>
          <target state="translated">ルールの結果は、ルール条件が一致した場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="24ffaa84e3b73d917eb7bd902d377fe6df94ed89" translate="yes" xml:space="preserve">
          <source>Rule.enforce</source>
          <target state="translated">Rule.enforce</target>
        </trans-unit>
        <trans-unit id="73586767a5cffaa218dcaff111d74b6ed4165beb" translate="yes" xml:space="preserve">
          <source>Rule.exclude</source>
          <target state="translated">Rule.exclude</target>
        </trans-unit>
        <trans-unit id="93c486eeb37fd7ff3941f797699b1d4a54750f4f" translate="yes" xml:space="preserve">
          <source>Rule.include</source>
          <target state="translated">Rule.include</target>
        </trans-unit>
        <trans-unit id="4fe4e6b0471c3b4ef44dd94ec56b1026d9ad262c" translate="yes" xml:space="preserve">
          <source>Rule.issuer</source>
          <target state="translated">Rule.issuer</target>
        </trans-unit>
        <trans-unit id="12e311d24954ff2b485dfa03eeeb22bbc1fc448d" translate="yes" xml:space="preserve">
          <source>Rule.loader</source>
          <target state="translated">Rule.loader</target>
        </trans-unit>
        <trans-unit id="93c5ed6b2b726b4301a2c0e8dba75a8f762cc517" translate="yes" xml:space="preserve">
          <source>Rule.loaders</source>
          <target state="translated">Rule.loaders</target>
        </trans-unit>
        <trans-unit id="8d82e3fe7db79a38063be185a78a1787b48434cc" translate="yes" xml:space="preserve">
          <source>Rule.oneOf</source>
          <target state="translated">Rule.oneOf</target>
        </trans-unit>
        <trans-unit id="a2073776e20d522c196308af0d11686e173d3cac" translate="yes" xml:space="preserve">
          <source>Rule.options</source>
          <target state="translated">Rule.options</target>
        </trans-unit>
        <trans-unit id="7712fe61ac58ff25076907afa23c57fe2858ec68" translate="yes" xml:space="preserve">
          <source>Rule.parser</source>
          <target state="translated">Rule.parser</target>
        </trans-unit>
        <trans-unit id="6ad3eb959ec26fbac17179d5a9a5d1485a161a58" translate="yes" xml:space="preserve">
          <source>Rule.resource</source>
          <target state="translated">Rule.resource</target>
        </trans-unit>
        <trans-unit id="6be5a7bec6e23d9ee0a8d042cd9bb03000f5c259" translate="yes" xml:space="preserve">
          <source>Rule.resourceQuery</source>
          <target state="translated">Rule.resourceQuery</target>
        </trans-unit>
        <trans-unit id="f13b889b4166c1ccec685b85f460df06f0401346" translate="yes" xml:space="preserve">
          <source>Rule.rules</source>
          <target state="translated">Rule.rules</target>
        </trans-unit>
        <trans-unit id="1ed77fc86a78da80e27b4a7df0b906420a85b328" translate="yes" xml:space="preserve">
          <source>Rule.sideEffects</source>
          <target state="translated">Rule.sideEffects</target>
        </trans-unit>
        <trans-unit id="f5a8c1e6b4789569d31a590ea24a49a7fdf74e8c" translate="yes" xml:space="preserve">
          <source>Rule.test</source>
          <target state="translated">Rule.test</target>
        </trans-unit>
        <trans-unit id="ebb25b320bb483820b96caf30356b652ae859834" translate="yes" xml:space="preserve">
          <source>Rule.use</source>
          <target state="translated">Rule.use</target>
        </trans-unit>
        <trans-unit id="b1b392607deaf29a7e81453e069b7c07a32a6b18" translate="yes" xml:space="preserve">
          <source>Run</source>
          <target state="translated">Run</target>
        </trans-unit>
        <trans-unit id="a4beada2c3e7bea1ecb31b03bcff67579986be59" translate="yes" xml:space="preserve">
          <source>Run an &lt;code&gt;npm run build&lt;/code&gt;, it should compile to something like this:</source>
          <target state="translated">実行 &lt;code&gt;npm run build&lt;/code&gt; 、それはこのような何かをコンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="0c615aafa765a1ef5bd603e8ab85525c53f3f7e6" translate="yes" xml:space="preserve">
          <source>Run webpack with &lt;code&gt;ProfilingPlugin&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ProfilingPlugin&lt;/code&gt; で webpackを実行します。</target>
        </trans-unit>
        <trans-unit id="4223bf04315af633cdf56c0cb6b2371651e75eca" translate="yes" xml:space="preserve">
          <source>Run when a module build has failed.</source>
          <target state="translated">モジュールのビルドに失敗した場合に実行します。</target>
        </trans-unit>
        <trans-unit id="74b15e59c3f98a89ecdc64d02cfef8e614ad6cf4" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;DEBUG=false webpack&lt;/code&gt; yields:</source>
          <target state="translated">&lt;code&gt;DEBUG=false webpack&lt;/code&gt; を実行すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="54d448bb65599d3c2d4d28c7ff4e481e6cb7233e" translate="yes" xml:space="preserve">
          <source>Running another build, we would expect only our &lt;code&gt;main&lt;/code&gt; bundle's hash to change, however...</source>
          <target state="translated">別のビルドを実行すると、 &lt;code&gt;main&lt;/code&gt; バンドルのハッシュのみが変更されると予想されますが、...</target>
        </trans-unit>
        <trans-unit id="e46f1249c2bce48b0c72e84ec66adb21c8a07be8" translate="yes" xml:space="preserve">
          <source>Running our build script, &lt;code&gt;npm run build&lt;/code&gt;, with this configuration should produce the following output:</source>
          <target state="translated">この構成でビルドスクリプト &lt;code&gt;npm run build&lt;/code&gt; を実行すると、次の出力が生成されます。</target>
        </trans-unit>
        <trans-unit id="48dd916c96025b1e57f8d56813d8611d15c051e4" translate="yes" xml:space="preserve">
          <source>Running the Server</source>
          <target state="translated">サーバーの実行</target>
        </trans-unit>
        <trans-unit id="33ae1afc2e3bb7d11b4e8528dc9983432837bc12" translate="yes" xml:space="preserve">
          <source>Runs a plugin after a &lt;code&gt;ContextModuleFactory&lt;/code&gt; is created.</source>
          <target state="translated">&lt;code&gt;ContextModuleFactory&lt;/code&gt; の作成後にプラグインを実行します。</target>
        </trans-unit>
        <trans-unit id="8ca58b434c15088e58f38aa7f532bc972a311118" translate="yes" xml:space="preserve">
          <source>Runs a plugin after a &lt;code&gt;NormalModuleFactory&lt;/code&gt; is created.</source>
          <target state="translated">&lt;code&gt;NormalModuleFactory&lt;/code&gt; の作成後にプラグインを実行します。</target>
        </trans-unit>
        <trans-unit id="7c500584678e2cd47e693b1d2eed1eedd098b1c2" translate="yes" xml:space="preserve">
          <source>Runs a plugin after a compilation has been created.</source>
          <target state="translated">コンパイルが作成された後にプラグインを実行します。</target>
        </trans-unit>
        <trans-unit id="397728565e08bf27344855050d471e79cad556c2" translate="yes" xml:space="preserve">
          <source>Runs a plugin after setting up initial set of plugins.</source>
          <target state="translated">プラグインの初期設定を行った後、プラグインを実行します。</target>
        </trans-unit>
        <trans-unit id="993a446b7721cdab57479b0e3635714e3dbbb5ba" translate="yes" xml:space="preserve">
          <source>Runs a plugin before the environment is prepared.</source>
          <target state="translated">環境が整う前にプラグインを実行します。</target>
        </trans-unit>
        <trans-unit id="15ce3ca884317bc6dab4f37e69a27a020bb27b78" translate="yes" xml:space="preserve">
          <source>Runs the following loaders in a worker pool.</source>
          <target state="translated">ワーカープールで以下のローダーを実行します。</target>
        </trans-unit>
        <trans-unit id="c4740e4ca28c9c8d6a8447aef5c33425e6de4802" translate="yes" xml:space="preserve">
          <source>Runtime</source>
          <target state="translated">Runtime</target>
        </trans-unit>
        <trans-unit id="b6eeeb3abd2a7bc179a6b6d5c56488b5f8c903a7" translate="yes" xml:space="preserve">
          <source>Sass</source>
          <target state="translated">Sass</target>
        </trans-unit>
        <trans-unit id="c73806b360250b5461e84c22b01e85d08e039783" translate="yes" xml:space="preserve">
          <source>Save valuable development time by only updating what's changed.</source>
          <target state="translated">変更された内容を更新するだけで、貴重な開発時間を節約できます。</target>
        </trans-unit>
        <trans-unit id="32de35db37c33913cc7d051c2b6e5dde7e069a2f" translate="yes" xml:space="preserve">
          <source>Saves and restores module and chunk ids from records.</source>
          <target state="translated">レコードからモジュールとチャンク ID を保存して復元します。</target>
        </trans-unit>
        <trans-unit id="3aacb738658584a773378169bb21a20b60ca2bb3" translate="yes" xml:space="preserve">
          <source>Saving in WebStorm</source>
          <target state="translated">WebStormでの保存</target>
        </trans-unit>
        <trans-unit id="ede302b5bf410f699067da258c658766d6178ded" translate="yes" xml:space="preserve">
          <source>Say you have a config file &lt;code&gt;some/path/config.development.module.js&lt;/code&gt; and a special version for production in &lt;code&gt;some/path/config.production.module.js&lt;/code&gt;</source>
          <target state="translated">設定ファイル &lt;code&gt;some/path/config.development.module.js&lt;/code&gt; と、 &lt;code&gt;some/path/config.production.module.js&lt;/code&gt; に本番用の特別なバージョンがあるとします</target>
        </trans-unit>
        <trans-unit id="fc0c01ac9bc4fb92c646eb47610077862dcf8269" translate="yes" xml:space="preserve">
          <source>Say you want a configuration with specific values for different build targets.</source>
          <target state="translated">異なるビルドターゲットに対して特定の値を設定したいとします。</target>
        </trans-unit>
        <trans-unit id="2dd4a83d012acd714fbd600cfb9847611783fea3" translate="yes" xml:space="preserve">
          <source>Scenarios</source>
          <target state="translated">Scenarios</target>
        </trans-unit>
        <trans-unit id="e91f7eacbf166e117424593ae1ded03e4599622d" translate="yes" xml:space="preserve">
          <source>Scope hoisting fallback trigger (since webpack 3.0.0)</source>
          <target state="translated">スコープ吊り上げフォールバックトリガー(webpack 3.0.0以降</target>
        </trans-unit>
        <trans-unit id="f6d1fd21e54c6955d5974d21955e39f3c73e8ce2" translate="yes" xml:space="preserve">
          <source>Scope hoisting is specifically a feature made possible by ECMAScript Module syntax. Because of this webpack may fallback to normal bundling based on what kind of modules you are using, and &lt;a href=&quot;https://medium.com/webpack/webpack-freelancing-log-book-week-5-7-4764be3266f5&quot;&gt;other conditions&lt;/a&gt;.</source>
          <target state="translated">スコープの巻き上げは、特にECMAScriptモジュールの構文によって可能になった機能です。このため、使用しているモジュールの種類や&lt;a href=&quot;https://medium.com/webpack/webpack-freelancing-log-book-week-5-7-4764be3266f5&quot;&gt;その他の条件に&lt;/a&gt;基づいて、通常のバンドルにフォールバックする場合があります。</target>
        </trans-unit>
        <trans-unit id="0cfad97c43a17797aefc167eac15bd9f1a110206" translate="yes" xml:space="preserve">
          <source>Scoped Mode</source>
          <target state="translated">スコープモード</target>
        </trans-unit>
        <trans-unit id="0296c4f7165ae5d911d93aa8c65a69d0ac26d2ac" translate="yes" xml:space="preserve">
          <source>Second, if a loader delivers a result in the &lt;code&gt;pitch&lt;/code&gt; method the process turns around and skips the remaining loaders. In our example above, if the &lt;code&gt;b-loader&lt;/code&gt;s &lt;code&gt;pitch&lt;/code&gt; method returned something:</source>
          <target state="translated">第二に、ローダーが &lt;code&gt;pitch&lt;/code&gt; メソッドで結果を提供する場合、プロセスは向きを変え、残りのローダーをスキップします。上記の例で、 &lt;code&gt;b-loader&lt;/code&gt; の &lt;code&gt;pitch&lt;/code&gt; メソッドが何かを返した場合：</target>
        </trans-unit>
        <trans-unit id="32ba0fcce3464103683465320a9db31da75af1c9" translate="yes" xml:space="preserve">
          <source>Secondly, you may override the base download URL for your worker script via the &lt;a href=&quot;#publicpath&quot;&gt;&lt;code&gt;publicPath&lt;/code&gt;&lt;/a&gt; option</source>
          <target state="translated">次に、&lt;a href=&quot;#publicpath&quot;&gt; &lt;code&gt;publicPath&lt;/code&gt; &lt;/a&gt;オプションを使用して、ワーカースクリプトのベースダウンロードURLを上書きできます。</target>
        </trans-unit>
        <trans-unit id="75662d18bc6eb58412de0ef04751e322ada76bc7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#output-devtoolmodulefilenametemplate&quot;&gt;&lt;code&gt;output.devtoolModuleFilenameTemplate&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#output-devtoolmodulefilenametemplate&quot;&gt; &lt;code&gt;output.devtoolModuleFilenameTemplate&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6ca59bbc98e49f8c6c32052f6515131e707aaafa" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#useentry&quot;&gt;UseEntry&lt;/a&gt; for details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#useentry&quot;&gt;UseEntry&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1681661e48e8bc821ee39d263a6afcdc1ca2272f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../configuration/resolve&quot;&gt;Resolve API&lt;/a&gt; to learn more on the configuration options mentioned above.</source>
          <target state="translated">上記の構成オプションの詳細については、&lt;a href=&quot;../configuration/resolve&quot;&gt;APIの解決を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e0a3cbbc77ab575dc2209e8a42c3dc1c69e76016" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../guides/output-management#the-manifest&quot;&gt;the manifest section&lt;/a&gt; of our &lt;em&gt;Managing Built Files&lt;/em&gt; guide to learn how to extract the manifest, and read the guides below to learn more about the intricacies of long term caching.</source>
          <target state="translated">&lt;a href=&quot;../guides/output-management#the-manifest&quot;&gt;マニフェスト&lt;/a&gt;を抽出する方法については、&lt;em&gt;ビルドファイルの管理&lt;/em&gt;ガイドのマニフェストセクションを参照してください。また、長期キャッシングの複雑さについては、以下のガイドをお読みください。</target>
        </trans-unit>
        <trans-unit id="738fce0b08b68aaadd356b5e3d262658132d9ecd" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/babel/babel-preset-env&quot;&gt;the repository&lt;/a&gt; for more information.</source>
          <target state="translated">詳細について&lt;a href=&quot;https://github.com/babel/babel-preset-env&quot;&gt;は、リポジトリ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="25eae184a7318828d608e70818c84dbc1ef149d5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/kangax/html-minifier#options-quick-reference&quot;&gt;html-minifier&lt;/a&gt;'s documentation for more information on the available options.</source>
          <target state="translated">使用可能なオプションの詳細については、&lt;a href=&quot;https://github.com/kangax/html-minifier#options-quick-reference&quot;&gt;html-minifier&lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7a67af0e7b928549d8c164387b173b6152b733c3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/sass/node-sass/blob/master/README.md#options&quot;&gt;the Node Sass documentation&lt;/a&gt; for all available Sass options.</source>
          <target state="translated">使用可能なすべてのSassオプションについて&lt;a href=&quot;https://github.com/sass/node-sass/blob/master/README.md#options&quot;&gt;は、Node Sassのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3a8521d09abe46eca5f89a9f249b428a47ad9b54" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/webpack-contrib/config-loader#supported-compilers&quot;&gt;Supported Compilers&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/webpack-contrib/config-loader#supported-compilers&quot;&gt;サポートされるコンパイラ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="8bdce59079a8af254efa333591f385c2e4a1a6b9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/webpack/loader-utils#interpolatename&quot;&gt;loader-utils&lt;/a&gt; for hash options.</source>
          <target state="translated">ハッシュオプションについては、&lt;a href=&quot;https://github.com/webpack/loader-utils#interpolatename&quot;&gt;loader-utils&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="7798a3cbfb25129bb175d4b855aa5de15054151f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/webpack/the-big-test&quot;&gt;the-big-test&lt;/a&gt; for an example.</source>
          <target state="translated">例について&lt;a href=&quot;https://github.com/webpack/the-big-test&quot;&gt;は、the-big-test&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="64ca0e010d0fda90861b087bd29640d09e0e0c01" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/buildin/global.js&quot;&gt;the source&lt;/a&gt; for the exact behavior of this object.</source>
          <target state="translated">このオブジェクトの正確な動作について&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/buildin/global.js&quot;&gt;は、ソース&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3ff7aaaaaa00879584b0b6c995a6489b372a5b90" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/webpack/webpack/issues/2776#issuecomment-233208623&quot;&gt;this discussion&lt;/a&gt; for more information on &lt;code&gt;__webpack_public_path__&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__webpack_public_path__&lt;/code&gt; の詳細については、&lt;a href=&quot;https://github.com/webpack/webpack/issues/2776#issuecomment-233208623&quot;&gt;この説明&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="96e8dd6b60df53db44e35db76f1e3338900f1aac" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://nodejs.org/api/globals.html#globals_global&quot;&gt;node.js global&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://nodejs.org/api/globals.html#globals_global&quot;&gt;node.js globalを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4b9e843ce89ca0779f59f3e04212aa21a01f8da7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://nodejs.org/api/process.html&quot;&gt;node.js process&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://nodejs.org/api/process.html&quot;&gt;node.jsプロセスを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5ff726a8e26537d00afbdf14b17879f9e968dbb2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;configuration&lt;/a&gt; for the options in the configuration file.</source>
          <target state="translated">構成ファイルのオプションについては、&lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;構成&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="01b280437ddaec027ef1957439b631695b9bc79e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html&quot;&gt;TypeScript's documentation&lt;/a&gt; to learn more about &lt;code&gt;tsconfig.json&lt;/code&gt; configuration options.</source>
          <target state="translated">&lt;code&gt;tsconfig.json&lt;/code&gt; 構成オプション&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html&quot;&gt;の&lt;/a&gt;詳細については、TypeScriptのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="83cb4a0f1ad6cd59cfe32a45d7ce09134ab199d4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;lazy-loading&quot;&gt;Lazy Loading&lt;/a&gt; for a more concrete example of how &lt;code&gt;import()&lt;/code&gt; can be used in a real application and &lt;a href=&quot;caching&quot;&gt;Caching&lt;/a&gt; to learn how to split code more effectively.</source>
          <target state="translated">実際のアプリケーションで &lt;code&gt;import()&lt;/code&gt; を使用する方法のより具体的な例については&lt;a href=&quot;lazy-loading&quot;&gt;遅延読み込み&lt;/a&gt;を、コードをより効果的に分割する方法については&lt;a href=&quot;caching&quot;&gt;キャッシュ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="26d664192e5d4fc17436e485de9b6b6b860e2f68" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;output#output-sourcemapfilename&quot;&gt;&lt;code&gt;output.sourceMapFilename&lt;/code&gt;&lt;/a&gt; to customize the filenames of generated Source Maps.</source>
          <target state="translated">生成されたソースマップのファイル名をカスタマイズするには、&lt;a href=&quot;output#output-sourcemapfilename&quot;&gt; &lt;code&gt;output.sourceMapFilename&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6f43b789c0293ed25a6e2e95688990a899db3700" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;watch&quot;&gt;WatchOptions&lt;/a&gt; for more options.</source>
          <target state="translated">その他のオプションについては、&lt;a href=&quot;watch&quot;&gt;WatchOptions&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f4bd6e6fcdb6dc003d1379a946a135f3ebdd8c90" translate="yes" xml:space="preserve">
          <source>See [Rule.exclude] and [Condition] in the webpack documentation. Paths matching this option will be excluded from processing by polymer-webpack-loader. NOTE: Files imported through a &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; will not be excluded by this property. See &lt;code&gt;Options.ignoreLinks&lt;/code&gt;.</source>
          <target state="translated">Webpackドキュメントの[Rule.exclude]および[Condition]を参照してください。このオプションに一致するパスは、polymer-webpack-loaderによる処理から除外されます。注： &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; を介してインポートされたファイルは、このプロパティによって除外されません。 &lt;code&gt;Options.ignoreLinks&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e6e6566df68fce4fa01fb31ea13de78735f4852d" translate="yes" xml:space="preserve">
          <source>See [Rule.include] and [Condition] in the webpack documentation. Paths matching this option will be processed by polymer-webpack-loader. WARNING: If this property exists the loader will only process files matching the given conditions. If your component has a &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; pointing to a component e.g. in another directory, the &lt;code&gt;include&lt;/code&gt; condition(s) MUST also match that directory.</source>
          <target state="translated">Webpackドキュメントの[Rule.include]および[Condition]を参照してください。このオプションに一致するパスは、polymer-webpack-loaderによって処理されます。警告：このプロパティが存在する場合、ローダーは指定された条件に一致するファイルのみを処理します。コンポーネントに、たとえば別のディレクトリ内のコンポーネントを指す &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; がある場合、 &lt;code&gt;include&lt;/code&gt; 条件もそのディレクトリと一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="540660cdb7a8095b32037f0d1b3255264eb36845" translate="yes" xml:space="preserve">
          <source>See an example use of scope</source>
          <target state="translated">スコープの使用例を見る</target>
        </trans-unit>
        <trans-unit id="9701a07560a9b8b7347be25b91e9e0417527fb9e" translate="yes" xml:space="preserve">
          <source>See stylelint's &lt;a href=&quot;http://stylelint.io/user-guide/node-api/#options&quot;&gt;options&lt;/a&gt; for the complete list of options available. These options are passed through to the &lt;code&gt;stylelint&lt;/code&gt; directly.</source>
          <target state="translated">利用可能なオプションの完全なリストについては、stylelintの&lt;a href=&quot;http://stylelint.io/user-guide/node-api/#options&quot;&gt;オプション&lt;/a&gt;を参照してください。これらのオプションは、 &lt;code&gt;stylelint&lt;/code&gt; に直接渡されます。</target>
        </trans-unit>
        <trans-unit id="b645f65aa6abcfc8ebb29cd64088194502e1abba" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../api/hot-module-replacement&quot;&gt;HMR API page&lt;/a&gt; for details on the &lt;code&gt;module.hot&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;module.hot&lt;/code&gt; インターフェースの詳細については、&lt;a href=&quot;../api/hot-module-replacement&quot;&gt;HMR APIページ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4f06e17c42aad5bc5d45bd15cc43aa0215524eea" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../configuration/devtool&quot;&gt;devtool documentation&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../configuration/devtool&quot;&gt;devtoolのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="db124c35113d6d0e410502b0ae2ac04cb58f7f3f" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../guides/environment-variables&quot;&gt;environment variables&lt;/a&gt; guide for more information on its usage.</source>
          <target state="translated">使用方法の詳細については、&lt;a href=&quot;../guides/environment-variables&quot;&gt;環境変数&lt;/a&gt;ガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="dfbbb35c1572ca31560ba547dd6c182eb9ae7d41" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;build-performance&quot;&gt;Build Performance&lt;/a&gt; guide on build tooling.</source>
          <target state="translated">ビルドツールに関する&lt;a href=&quot;build-performance&quot;&gt;ビルドパフォーマンス&lt;/a&gt;ガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="399e32b3d68f8fd68a037b4d71f43fcc1e8b839f" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;compiler-hooks&quot;&gt;compiler hooks&lt;/a&gt; section for a detailed listing of all the available &lt;code&gt;compiler&lt;/code&gt; hooks and the parameters they make available.</source>
          <target state="translated">使用可能なすべての &lt;code&gt;compiler&lt;/code&gt; フックとそれらが使用可能にするパラメータの詳細なリストについては、&lt;a href=&quot;compiler-hooks&quot;&gt;コンパイラフックの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="59dc1d42f764f543a6b26fbcf0fff54f43822211" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://babeljs.io/docs/plugins/transform-runtime/&quot;&gt;docs&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://babeljs.io/docs/plugins/transform-runtime/&quot;&gt;ドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b02a200e295054c6f6198fd1fd87e64f93ab872d" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/isaacs/node-glob#options&quot;&gt;&lt;code&gt;node-glob&lt;/code&gt; options&lt;/a&gt; in addition to the ones below</source>
          <target state="translated">以下の&lt;a href=&quot;https://github.com/isaacs/node-glob#options&quot;&gt;オプション&lt;/a&gt;に加えて、 &lt;code&gt;node-glob&lt;/code&gt; オプションを参照してください</target>
        </trans-unit>
        <trans-unit id="5e75f40a0487852583b0f91c2d37afff1362a3e4" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/webpack-contrib/bundle-loader&quot;&gt;bundle-loader&lt;/a&gt; for a good example of how this process can be used in a more meaningful way.</source>
          <target state="translated">このプロセスをより意味のある方法で使用する方法の良い例については、&lt;a href=&quot;https://github.com/webpack-contrib/bundle-loader&quot;&gt;バンドルローダー&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="16d9c4ceca390558339c46f282c756d25df67250" translate="yes" xml:space="preserve">
          <source>See the &lt;code&gt;babel&lt;/code&gt;&lt;a href=&quot;https://babeljs.io/docs/usage/api/#options&quot;&gt;options&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;babel&lt;/code&gt; &lt;a href=&quot;https://babeljs.io/docs/usage/api/#options&quot;&gt;オプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5b15fe73f9453e16c4c0e90bfaffeaefac53438e" translate="yes" xml:space="preserve">
          <source>See the &lt;code&gt;enhanced-resolve&lt;/code&gt;&lt;a href=&quot;https://github.com/webpack/enhanced-resolve&quot;&gt;documentation&lt;/a&gt; for a full list of hooks and descriptions.</source>
          <target state="translated">フックと説明の完全なリストについては、 &lt;code&gt;enhanced-resolve&lt;/code&gt; の&lt;a href=&quot;https://github.com/webpack/enhanced-resolve&quot;&gt;ドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="51d046b4332307e92bffdc554b7be2b2c13a49cf" translate="yes" xml:space="preserve">
          <source>See the &lt;code&gt;styelint&lt;/code&gt;&lt;a href=&quot;https://stylelint.io/user-guide/node-api/#syntax&quot;&gt;user guide&lt;/a&gt; for more info. e.g. use &lt;code&gt;'scss'&lt;/code&gt; to lint .scss files.</source>
          <target state="translated">詳細については、 &lt;code&gt;styelint&lt;/code&gt; &lt;a href=&quot;https://stylelint.io/user-guide/node-api/#syntax&quot;&gt;ユーザーガイド&lt;/a&gt;を参照してください。たとえば、.scssファイルをlint するには、 &lt;code&gt;'scss'&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="bb048f274dce089db76ee8dbf26c81686597d4d9" translate="yes" xml:space="preserve">
          <source>See the example above. The property name &lt;code&gt;jquery&lt;/code&gt; indicates that the module &lt;code&gt;jquery&lt;/code&gt; in &lt;code&gt;import $ from 'jquery'&lt;/code&gt; should be excluded. In order to replace this module, the value &lt;code&gt;jQuery&lt;/code&gt; will be used to retrieve a global &lt;code&gt;jQuery&lt;/code&gt; variable. In other words, when a string is provided it will be treated as &lt;code&gt;root&lt;/code&gt; (defined above and below).</source>
          <target state="translated">上記の例を参照してください。プロパティ名 &lt;code&gt;jquery&lt;/code&gt; は、 &lt;code&gt;import $ from 'jquery'&lt;/code&gt; モジュール &lt;code&gt;jquery&lt;/code&gt; を除外する必要があることを示しています。このモジュールを置き換えるために、値 &lt;code&gt;jQuery&lt;/code&gt; を使用してグローバル &lt;code&gt;jQuery&lt;/code&gt; 変数を取得します。言い換えると、文字列が提供されると、 &lt;code&gt;root&lt;/code&gt; として扱われます（上と下で定義）。</target>
        </trans-unit>
        <trans-unit id="98ca989d1cebbea761fbf920b84b0ba2fce28481" translate="yes" xml:space="preserve">
          <source>Select &lt;a href=&quot;../configuration/stats&quot;&gt;display preset&lt;/a&gt; (verbose, detailed, normal, minimal, errors-only, none; since webpack 3.0.0)</source>
          <target state="translated">&lt;a href=&quot;../configuration/stats&quot;&gt;表示プリセットを&lt;/a&gt;選択します（詳細、詳細、通常、最小、エラーのみ、なし。webpack3.0.0以降）。</target>
        </trans-unit>
        <trans-unit id="02a4683da7fa051577215d359f49323d1fed0daa" translate="yes" xml:space="preserve">
          <source>Separate App and Vendor Entries</source>
          <target state="translated">アプリとベンダーのエントリーを分ける</target>
        </trans-unit>
        <trans-unit id="7a4cb28099ed5c8050dff47fea1337f4ce7c368b" translate="yes" xml:space="preserve">
          <source>Separating a Manifest</source>
          <target state="translated">マニフェストを分ける</target>
        </trans-unit>
        <trans-unit id="1fdcef2523a6cd581a7dc712082aaf03e4c19355" translate="yes" xml:space="preserve">
          <source>Service URLs</source>
          <target state="translated">サービスURL</target>
        </trans-unit>
        <trans-unit id="57926fa1fd18f54e0b1e889ca065a0bf9d064139" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;postcss.config.js&lt;/code&gt; config path &amp;amp;&amp;amp; &lt;code&gt;ctx&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;postcss.config.js&lt;/code&gt; 設定パスを設定&amp;amp;&amp;amp; &lt;code&gt;ctx&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="977a1dca06237783c7ed884a1cd060dca428d020" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;resolve.cacheWithContext: false&lt;/code&gt; if you use custom resolving plugins, that are not context specific.</source>
          <target state="translated">コンテキスト固有ではないカスタム解決プラグインを使用する場合は、 &lt;code&gt;resolve.cacheWithContext: false&lt;/code&gt; 設定します。</target>
        </trans-unit>
        <trans-unit id="da926ee652c5e2b64bb43ec67d341055922ff2d3" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;resolve.symlinks: false&lt;/code&gt; if you don't use symlinks (e.g. &lt;code&gt;npm link&lt;/code&gt; or &lt;code&gt;yarn link&lt;/code&gt;).</source>
          <target state="translated">シンボリックリンクを使用しない場合は、 &lt;code&gt;resolve.symlinks: false&lt;/code&gt; 設定します（ &lt;code&gt;npm link&lt;/code&gt; や &lt;code&gt;yarn link&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="66427df2669361795db97f8973e9a5586225aa6f" translate="yes" xml:space="preserve">
          <source>Set PostCSS Parser</source>
          <target state="translated">PostCSSパーサーを設定します。</target>
        </trans-unit>
        <trans-unit id="d8e30afabd93d52638b2f5f15db249db2a634e27" translate="yes" xml:space="preserve">
          <source>Set PostCSS Plugins</source>
          <target state="translated">PostCSSプラグインの設定</target>
        </trans-unit>
        <trans-unit id="5c24d7387e93e5be721f9d2dd7f45029a6a59e95" translate="yes" xml:space="preserve">
          <source>Set PostCSS Stringifier</source>
          <target state="translated">PostCSS文字列修飾子を設定します。</target>
        </trans-unit>
        <trans-unit id="7650971a575a6117fb73040adce9f05b233748e4" translate="yes" xml:space="preserve">
          <source>Set PostCSS Syntax</source>
          <target state="translated">構文 PostCSS Set</target>
        </trans-unit>
        <trans-unit id="b4665e2e65095495165596b5446a1974f42fb344" translate="yes" xml:space="preserve">
          <source>Set a URL for source maps. Useful for avoiding cross-origin issues such as:</source>
          <target state="translated">ソース マップの URL を設定します。のようなクロスオリジンの問題を回避するのに便利です。</target>
        </trans-unit>
        <trans-unit id="b9b598d854e43db0d0151008e3fd5f86873a7bdc" translate="yes" xml:space="preserve">
          <source>Set a URL for source maps. Useful for hosting them on a host that requires authorization.</source>
          <target state="translated">ソース マップの URL を設定します。認証を必要とするホストでホストをホストする場合に便利です。</target>
        </trans-unit>
        <trans-unit id="d2d23439aa12147ad1bf33f7b346add960b19f8d" translate="yes" xml:space="preserve">
          <source>Set min/max limits for chunking to better control chunking</source>
          <target state="translated">チャンキングの最小値/最大値を設定して、チャンキングをより良く制御します。</target>
        </trans-unit>
        <trans-unit id="0207023c93088679bd649f17d88fdab51785c76a" translate="yes" xml:space="preserve">
          <source>Set module ID base (DLLPlugin)</source>
          <target state="translated">基本IDモジュールセット(DLLPlugin</target>
        </trans-unit>
        <trans-unit id="561fbe0dc88f915a9b7ac6bdc9b28365b143eada" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;mode&lt;/code&gt; configuration option to &lt;a href=&quot;../concepts/mode#mode-development&quot;&gt;development&lt;/a&gt; to make sure that the bundle is not minified:</source>
          <target state="translated">設定する &lt;code&gt;mode&lt;/code&gt; に設定オプション&lt;a href=&quot;../concepts/mode#mode-development&quot;&gt;の開発を&lt;/a&gt;バンドルが縮小されていないことを確認します：</target>
        </trans-unit>
        <trans-unit id="4af885ecb6c1963071180f884af4e9eefe7b8bbe" translate="yes" xml:space="preserve">
          <source>Set the value of &lt;code&gt;require.amd&lt;/code&gt; or &lt;code&gt;define.amd&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;require.amd&lt;/code&gt; または &lt;code&gt;define.amd&lt;/code&gt; の値を設定します。</target>
        </trans-unit>
        <trans-unit id="a6900da3a5e926ee28a5cf95f4b9a4ea69c97c3f" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;true&lt;/code&gt; to allow return statements outside of functions</source>
          <target state="translated">関数の外でreturnステートメントを許可するには、 &lt;code&gt;true&lt;/code&gt; に設定します</target>
        </trans-unit>
        <trans-unit id="7034ab7e3f15d92c7322de7f7c5d4c03e1200953" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;true&lt;/code&gt; to instrument ES2015 Modules</source>
          <target state="translated">ES2015モジュールを計測するには、 &lt;code&gt;true&lt;/code&gt; に設定します</target>
        </trans-unit>
        <trans-unit id="27232a53dc74afb89b57230060952fc6fe9ded4f" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;true&lt;/code&gt; to produce a source map for the instrumented code</source>
          <target state="translated">インストルメントされたコードのソースマップを生成するには、 &lt;code&gt;true&lt;/code&gt; に設定します</target>
        </trans-unit>
        <trans-unit id="2d480762f2fe245b7aa18c4fc3067dcc709d69a8" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; on &lt;code&gt;DefinePlugin&lt;/code&gt; to value &lt;code&gt;development&lt;/code&gt;. Enables &lt;code&gt;NamedChunksPlugin&lt;/code&gt; and &lt;code&gt;NamedModulesPlugin&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DefinePlugin&lt;/code&gt; の &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; を &lt;code&gt;development&lt;/code&gt; 値に設定します。 &lt;code&gt;NamedChunksPlugin&lt;/code&gt; および &lt;code&gt;NamedModulesPlugin&lt;/code&gt; を有効にします。</target>
        </trans-unit>
        <trans-unit id="acfa30009e3a81fd4a2170737da9348495586e0e" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; on &lt;code&gt;DefinePlugin&lt;/code&gt; to value &lt;code&gt;production&lt;/code&gt;. Enables &lt;code&gt;FlagDependencyUsagePlugin&lt;/code&gt;, &lt;code&gt;FlagIncludedChunksPlugin&lt;/code&gt;, &lt;code&gt;ModuleConcatenationPlugin&lt;/code&gt;, &lt;code&gt;NoEmitOnErrorsPlugin&lt;/code&gt;, &lt;code&gt;OccurrenceOrderPlugin&lt;/code&gt;, &lt;code&gt;SideEffectsFlagPlugin&lt;/code&gt; and &lt;code&gt;UglifyJsPlugin&lt;/code&gt;.</source>
          <target state="translated">設定 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; は上 &lt;code&gt;DefinePlugin&lt;/code&gt; 値に &lt;code&gt;production&lt;/code&gt; 。有効 &lt;code&gt;FlagDependencyUsagePlugin&lt;/code&gt; 、 &lt;code&gt;FlagIncludedChunksPlugin&lt;/code&gt; 、 &lt;code&gt;ModuleConcatenationPlugin&lt;/code&gt; 、 &lt;code&gt;NoEmitOnErrorsPlugin&lt;/code&gt; 、 &lt;code&gt;OccurrenceOrderPlugin&lt;/code&gt; 、 &lt;code&gt;SideEffectsFlagPlugin&lt;/code&gt; と &lt;code&gt;UglifyJsPlugin&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="b44057d8fee68da59cba19ea8a30d01487d12379" translate="yes" xml:space="preserve">
          <source>Sets the MIME type for the file to be transformed. If unspecified the file extensions will be used to lookup the MIME type.</source>
          <target state="translated">変換するファイルの MIME タイプを設定します。指定されていない場合は、ファイルの拡張子が MIME タイプの検索に使用されます。</target>
        </trans-unit>
        <trans-unit id="84f08e40df2d52003b9253d4b374af00516b0e38" translate="yes" xml:space="preserve">
          <source>Sets the maximum number of visible modules in output</source>
          <target state="translated">出力に表示されるモジュールの最大数を設定します。</target>
        </trans-unit>
        <trans-unit id="a47602f69b4e0b1e2c30e2f90d0726e6edf2054c" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;module&lt;/code&gt; and/or &lt;code&gt;columns&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; will yield less accurate source maps but will also improve compilation performance significantly.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; や &lt;code&gt;columns&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定すると、ソースマップの精度が低下しますが、コンパイルのパフォーマンスも大幅に向上します。</target>
        </trans-unit>
        <trans-unit id="9abe39d8332987f77fd24151008ae6f5f333482e" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;optimization.runtimeChunk&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;&quot;multiple&quot;&lt;/code&gt; adds an additional chunk to each entrypoint containing only the runtime. This setting is an alias for:</source>
          <target state="translated">&lt;code&gt;optimization.runtimeChunk&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;&quot;multiple&quot;&lt;/code&gt; 設定すると、ランタイムのみを含む各エントリポイントにチャンクが追加されます。この設定は次のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="35be3cd36e2f343b1e5d629adb4f1a692d4b0cbf" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;recordsPath&lt;/code&gt; will essentially set &lt;code&gt;recordsInputPath&lt;/code&gt; and &lt;code&gt;recordsOutputPath&lt;/code&gt; to the same location. This is usually all that's necessary unless you decide to change the name of the file containing the records. See below for an example.</source>
          <target state="translated">&lt;code&gt;recordsPath&lt;/code&gt; を設定すると、基本的に &lt;code&gt;recordsInputPath&lt;/code&gt; と &lt;code&gt;recordsOutputPath&lt;/code&gt; が同じ場所に設定されます。これは、レコードを含むファイルの名前を変更することを決定しない限り、通常はこれですべてです。例については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="ecc7e910e2161aa171ae2455c116705909b33182" translate="yes" xml:space="preserve">
          <source>Setting sourceURL</source>
          <target state="translated">sourceURLの設定</target>
        </trans-unit>
        <trans-unit id="732e38a76ab7d2824c4816c5a2bea3d58d51d17a" translate="yes" xml:space="preserve">
          <source>Setting the library name as &lt;code&gt;webpack-numbers&lt;/code&gt;.</source>
          <target state="translated">ライブラリ名を &lt;code&gt;webpack-numbers&lt;/code&gt; として設定します。</target>
        </trans-unit>
        <trans-unit id="ad3a69c8a9beb9ffb90bf70ea832910c0071e097" translate="yes" xml:space="preserve">
          <source>Setting the option to &lt;code&gt;false&lt;/code&gt; disables the parser.</source>
          <target state="translated">オプションを &lt;code&gt;false&lt;/code&gt; に設定すると、パーサーが無効になります。</target>
        </trans-unit>
        <trans-unit id="38226df5919c60847b352cb49dbd61d50c50ade7" translate="yes" xml:space="preserve">
          <source>Setting the option to &lt;code&gt;true&lt;/code&gt; or leaving it &lt;code&gt;undefined&lt;/code&gt; enables the parser.</source>
          <target state="translated">オプションを &lt;code&gt;true&lt;/code&gt; に設定するか、 &lt;code&gt;undefined&lt;/code&gt; すると、パーサーが有効になります。</target>
        </trans-unit>
        <trans-unit id="1b98a94c3f9ab2f10447cacefc1ecd547f3eb476" translate="yes" xml:space="preserve">
          <source>Setting up HtmlWebpackPlugin</source>
          <target state="translated">HtmlWebpackPluginの設定</target>
        </trans-unit>
        <trans-unit id="3b1a1740689e27b23eb98ff1b2e6b556d00f3a2f" translate="yes" xml:space="preserve">
          <source>Setting up your &lt;code&gt;env&lt;/code&gt; variable without assignment, &lt;code&gt;--env.production&lt;/code&gt; sets &lt;code&gt;--env.production&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; by default. There are also other syntaxes that you can use. See the &lt;a href=&quot;../api/cli#environment-options&quot;&gt;webpack CLI&lt;/a&gt; documentation for more information.</source>
          <target state="translated">あなたの設定 &lt;code&gt;env&lt;/code&gt; 割り当てずに変数を、 &lt;code&gt;--env.production&lt;/code&gt; セットは &lt;code&gt;--env.production&lt;/code&gt; に &lt;code&gt;true&lt;/code&gt; デフォルトで。使用できる他の構文もあります。詳細については、&lt;a href=&quot;../api/cli#environment-options&quot;&gt;webpack CLIの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="cdd7bb2816b7a8f88bce0e47be39943bc369516b" translate="yes" xml:space="preserve">
          <source>Setup</source>
          <target state="translated">Setup</target>
        </trans-unit>
        <trans-unit id="0add13475db107be44c2f21884cadaf95cb57326" translate="yes" xml:space="preserve">
          <source>Setup a module alias for resolving</source>
          <target state="translated">解決のためのモジュールエイリアスの設定</target>
        </trans-unit>
        <trans-unit id="247c67df3b13b6b80d98b21ae8f6284a9a668318" translate="yes" xml:space="preserve">
          <source>Setup extensions that should be used to resolve modules</source>
          <target state="translated">モジュールの解決に使用する拡張機能を設定する</target>
        </trans-unit>
        <trans-unit id="5f32428e1f0599d3254f040dfbc73145a6af61f4" translate="yes" xml:space="preserve">
          <source>Shimming</source>
          <target state="translated">Shimming</target>
        </trans-unit>
        <trans-unit id="3ddfa9ff00acfac3af6747689d59e9b1f7145615" translate="yes" xml:space="preserve">
          <source>Shimming Globals</source>
          <target state="translated">シミンググローバル</target>
        </trans-unit>
        <trans-unit id="e2012dea310d50697bda7f1580ccc7095c8e5a90" translate="yes" xml:space="preserve">
          <source>Shortcut</source>
          <target state="translated">Shortcut</target>
        </trans-unit>
        <trans-unit id="90c93523ff95f6469ea7fab8ffa47ed0ddc9bc0c" translate="yes" xml:space="preserve">
          <source>Shortcuts</source>
          <target state="translated">Shortcuts</target>
        </trans-unit>
        <trans-unit id="0496dde020b028d805418e01d53e7ca651c2ed52" translate="yes" xml:space="preserve">
          <source>Shorthand for using the &lt;a href=&quot;define-plugin&quot;&gt;&lt;code&gt;DefinePlugin&lt;/code&gt;&lt;/a&gt; on &lt;code&gt;process.env&lt;/code&gt; keys</source>
          <target state="translated">使用するための速記&lt;a href=&quot;define-plugin&quot;&gt; &lt;code&gt;DefinePlugin&lt;/code&gt; を&lt;/a&gt;上 &lt;code&gt;process.env&lt;/code&gt; のキー</target>
        </trans-unit>
        <trans-unit id="18221a52d33769e702d76dbbd39a1214ff4f221c" translate="yes" xml:space="preserve">
          <source>Should a source map be generated. Since generating source maps can be an expensive task, you should check if source maps are actually requested.</source>
          <target state="translated">ソース マップを生成すべきかどうか。ソース マップの生成にはコストがかかるので、ソース マップが実際に要求されているかどうかを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="e758d3d06c2c5929685b246142ce8e59564afca0" translate="yes" xml:space="preserve">
          <source>Should the result be minimized.</source>
          <target state="translated">結果を最小化する必要があります。</target>
        </trans-unit>
        <trans-unit id="6d79faae46113c53e1ab36a416991f347af2a116" translate="yes" xml:space="preserve">
          <source>Show more details</source>
          <target state="translated">詳細を表示</target>
        </trans-unit>
        <trans-unit id="d327f0da075e2fae319bf6069e1a422c8736e4f2" translate="yes" xml:space="preserve">
          <source>Shows a full-screen overlay in the browser when there are compiler errors or warnings. Disabled by default. If you want to show only compiler errors:</source>
          <target state="translated">コンパイラのエラーや警告が発生した場合に、ブラウザにフルスクリーンのオーバーレイを表示します。デフォルトでは無効になっています。コンパイラエラーのみを表示したい場合。</target>
        </trans-unit>
        <trans-unit id="68db8a594997290744bfc0d3f60cbcaa3bfee219" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;require.ensure&lt;/code&gt;, this will split the given &lt;code&gt;dependencies&lt;/code&gt; into a separate bundle that will be loaded asynchronously. The &lt;code&gt;callback&lt;/code&gt; will be called with the exports of each dependency in the &lt;code&gt;dependencies&lt;/code&gt; array.</source>
          <target state="translated">&lt;code&gt;require.ensure&lt;/code&gt; と同様に、これは指定された &lt;code&gt;dependencies&lt;/code&gt; を非同期に読み込まれる個別のバンドルに分割します。 &lt;code&gt;callback&lt;/code&gt; 、各依存関係の輸出で呼び出されます &lt;code&gt;dependencies&lt;/code&gt; 配列。</target>
        </trans-unit>
        <trans-unit id="a6f3a1e1f354c12ccb006ee799c04b144ddcef6f" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;require.resolve&lt;/code&gt;, but this won't pull the &lt;code&gt;module&lt;/code&gt; into the bundle. It's what is considered a &quot;weak&quot; dependency.</source>
          <target state="translated">&lt;code&gt;require.resolve&lt;/code&gt; に似ていますが、これは &lt;code&gt;module&lt;/code&gt; をバンドルに取り込みません。これは「弱い」依存関係と見なされるものです。</target>
        </trans-unit>
        <trans-unit id="a78dd3565d3ca963abe26663b75b346fcd6a29d2" translate="yes" xml:space="preserve">
          <source>Similar to the above one, but instead of moving common modules into the parent (which increases initial load time) a new async-loaded additional commons chunk is used. This is automatically downloaded in parallel when the additional chunk is downloaded.</source>
          <target state="translated">上のものと似ていますが、共通モジュールを親モジュールに移動させる代わりに (初期ロード時間が長くなります)、新しい非同期ロードされた追加のコモンズチャンクが使われます。これは、追加チャンクがダウンロードされると自動的に並行してダウンロードされます。</target>
        </trans-unit>
        <trans-unit id="4e92266701ea10892f677e28bfdc47255c556b12" translate="yes" xml:space="preserve">
          <source>Similar to what &lt;a href=&quot;extract-text-webpack-plugin&quot;&gt;extract-text-webpack-plugin&lt;/a&gt; does, the CSS can be extracted in one CSS file using &lt;code&gt;optimization.splitChunks.cacheGroups&lt;/code&gt;.</source>
          <target state="translated">何と同様に&lt;a href=&quot;extract-text-webpack-plugin&quot;&gt;抽出・テキストのWebPACK -プラグイン&lt;/a&gt;し、CSSを使用して1つのCSSファイルに抽出することができます &lt;code&gt;optimization.splitChunks.cacheGroups&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="0785bdec9485cf289af79fa7f5707a7cbc518227" translate="yes" xml:space="preserve">
          <source>Similarly, to use &lt;a href=&quot;http://coffeescript.org/&quot;&gt;CoffeeScript&lt;/a&gt;, you would first install the necessary dependencies:</source>
          <target state="translated">同様に、&lt;a href=&quot;http://coffeescript.org/&quot;&gt;CoffeeScript&lt;/a&gt;を使用するには、最初に必要な依存関係をインストールします。</target>
        </trans-unit>
        <trans-unit id="6a54cd02186f2196136676e6657a0a8d2e2d69ed" translate="yes" xml:space="preserve">
          <source>Similarly, when implementing the HMR interface in a module, you can describe what should happen when the module is updated. However, in most cases, it's not mandatory to write HMR code in every module. If a module has no HMR handlers, the update bubbles up. This means that a single handler can update a complete module tree. If a single module from the tree is updated, the entire set of dependencies is reloaded.</source>
          <target state="translated">同様に、モジュールにHMRインターフェースを実装する場合、モジュールが更新されたときに何が起こるかを記述することができます。しかし、ほとんどの場合、すべてのモジュールに HMR コードを記述することは必須ではありません。モジュールに HMR ハンドラがない場合、更新はバブルアップします。これは、単一のハンドラが完全なモジュールツリーを更新できることを意味します。ツリーから1つのモジュールが更新されると、依存関係のセット全体がリロードされます。</target>
        </trans-unit>
        <trans-unit id="7efef6f32b9aee814f5e770483cd5c591105998c" translate="yes" xml:space="preserve">
          <source>Simple Configuration</source>
          <target state="translated">簡単な設定</target>
        </trans-unit>
        <trans-unit id="9d259e43250c65f449f9618bcb5b8a51f9bbc632" translate="yes" xml:space="preserve">
          <source>Simple prefetch example can be having a &lt;code&gt;HomePage&lt;/code&gt; component, which renders a &lt;code&gt;LoginButton&lt;/code&gt; component which then on demand loads a &lt;code&gt;LoginModal&lt;/code&gt; component after being clicked.</source>
          <target state="translated">簡単なプリフェッチの例としては、 &lt;code&gt;HomePage&lt;/code&gt; コンポーネントがあります。これは、 &lt;code&gt;LoginButton&lt;/code&gt; コンポーネントをレンダリングし、クリックされた後、 &lt;code&gt;LoginModal&lt;/code&gt; に応じてLoginModalコンポーネントをロードします。</target>
        </trans-unit>
        <trans-unit id="228f8b425edcd5e53740dc2dc5966c87dfe007ce" translate="yes" xml:space="preserve">
          <source>Simple preload example can be having a &lt;code&gt;Component&lt;/code&gt; which always depends on a big library that should be in a separate chunk.</source>
          <target state="translated">単純なプリロードの例は、常に別のチャンクにある大きなライブラリに依存する &lt;code&gt;Component&lt;/code&gt; を持つことです。</target>
        </trans-unit>
        <trans-unit id="65ef5410be05cb89e60cabc1457ef7dabf6053ba" translate="yes" xml:space="preserve">
          <source>Simple rule: The URL of your &lt;a href=&quot;#output-path&quot;&gt;&lt;code&gt;output.path&lt;/code&gt;&lt;/a&gt; from the view of the HTML page.</source>
          <target state="translated">単純なルール：HTMLページのビューからの&lt;a href=&quot;#output-path&quot;&gt; &lt;code&gt;output.path&lt;/code&gt; &lt;/a&gt;のURL 。</target>
        </trans-unit>
        <trans-unit id="032755a968e7ece37d3cc818cc27da692b03e94f" translate="yes" xml:space="preserve">
          <source>Simple rule: one entry point per HTML page. SPA: one entry point, MPA: multiple entry points.</source>
          <target state="translated">シンプルなルール:HTMLページごとに1つのエントリーポイント。SPA:1つのエントリーポイント、MPA:複数のエントリーポイント。</target>
        </trans-unit>
        <trans-unit id="2163d6e3cc7a704a0ac03d8177c00be1cef615d4" translate="yes" xml:space="preserve">
          <source>Simply add configuration object to &lt;code&gt;module.loaders&lt;/code&gt; like this.</source>
          <target state="translated">このように設定オブジェクトを &lt;code&gt;module.loaders&lt;/code&gt; に追加するだけです。</target>
        </trans-unit>
        <trans-unit id="bac32b0b00e4110b7f59981ae16e482f54e07a1f" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-runtime&quot;&gt;babel-plugin-transform-runtime&lt;/a&gt; includes a polyfill that includes a custom &lt;a href=&quot;https://github.com/facebook/regenerator/blob/master/packages/regenerator-runtime/runtime.js&quot;&gt;regenerator runtime&lt;/a&gt; and &lt;a href=&quot;https://github.com/zloirock/core-js&quot;&gt;core.js&lt;/a&gt;, the following usual shimming method using &lt;code&gt;webpack.ProvidePlugin&lt;/code&gt; will not work:</source>
          <target state="translated">以来&lt;a href=&quot;https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-runtime&quot;&gt;バベル・プラグイン・変換・ランタイムは、&lt;/a&gt;カスタム含まポリフィル含ま&lt;a href=&quot;https://github.com/facebook/regenerator/blob/master/packages/regenerator-runtime/runtime.js&quot;&gt;蓄冷ランタイム&lt;/a&gt;と&lt;a href=&quot;https://github.com/zloirock/core-js&quot;&gt;のCore.js&lt;/a&gt;使用して、次の通常のシミング方法を &lt;code&gt;webpack.ProvidePlugin&lt;/code&gt; を動作しませんが。</target>
        </trans-unit>
        <trans-unit id="3a0b4df48665f5e543e93aae4f1b0aef234d64a1" translate="yes" xml:space="preserve">
          <source>Since &lt;strong&gt;plugins&lt;/strong&gt; can take arguments/options, you must pass a &lt;code&gt;new&lt;/code&gt; instance to the &lt;code&gt;plugins&lt;/code&gt; property in your webpack configuration.</source>
          <target state="translated">以来&lt;strong&gt;、プラグインは、&lt;/strong&gt;引数/オプションを取ることができ、あなたは合格しなければならない &lt;code&gt;new&lt;/code&gt; のインスタンス &lt;code&gt;plugins&lt;/code&gt; お使いのWebPACKの設定でプロパティを。</target>
        </trans-unit>
        <trans-unit id="ee55505b5c3ca34633f55534b5500cc482530643" translate="yes" xml:space="preserve">
          <source>Since Sass/&lt;a href=&quot;https://github.com/sass/libsass&quot;&gt;libsass&lt;/a&gt; does not provide &lt;a href=&quot;https://github.com/sass/libsass/issues/532&quot;&gt;url rewriting&lt;/a&gt;, all linked assets must be relative to the output.</source>
          <target state="translated">Sass / &lt;a href=&quot;https://github.com/sass/libsass&quot;&gt;libsass&lt;/a&gt;は&lt;a href=&quot;https://github.com/sass/libsass/issues/532&quot;&gt;url rewriteを&lt;/a&gt;提供しないため、リンクされたすべてのアセットは出力に関連している必要があります。</target>
        </trans-unit>
        <trans-unit id="60e97caba52671f289097a28a68dae3cc71a6345" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;vendor&lt;/code&gt; and &lt;code&gt;manifest&lt;/code&gt; chunk use a different definition for &lt;code&gt;minChunks&lt;/code&gt;, you need to invoke the plugin twice:</source>
          <target state="translated">以来 &lt;code&gt;vendor&lt;/code&gt; と &lt;code&gt;manifest&lt;/code&gt; チャンク用の異なる定義 &lt;code&gt;minChunks&lt;/code&gt; 、あなたは二回、プラグインを起動する必要があります。</target>
        </trans-unit>
        <trans-unit id="68b40dfd90a4960aa92216b835ec43d3ce1464fc" translate="yes" xml:space="preserve">
          <source>Since version 4 webpack runs optimizations for you depending on the chosen &lt;code&gt;mode&lt;/code&gt;, still all optimizations are available for manual configuration and overrides.</source>
          <target state="translated">バージョン4のWebpackは、選択した &lt;code&gt;mode&lt;/code&gt; 応じて最適化を実行するため、すべての最適化を手動で構成してオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="e1c8a9fc91d1ca9652793041de879c53fc83eb09" translate="yes" xml:space="preserve">
          <source>Since version 4.0.0, &lt;strong&gt;webpack does not require a configuration file&lt;/strong&gt; to bundle your project, nevertheless it is &lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;incredibly configurable&lt;/a&gt; to better fit your needs.</source>
          <target state="translated">バージョン4.0.0以降、&lt;strong&gt;webpackは&lt;/strong&gt;プロジェクトをバンドルする&lt;strong&gt;ための構成ファイル&lt;/strong&gt;を&lt;strong&gt;必要としませんが、&lt;/strong&gt;ニーズに合わせて&lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;非常に構成可能&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="f86b2dfe84249c763566d31412fce8ad477d3a22" translate="yes" xml:space="preserve">
          <source>Since we already have the absolute path to the file, no further resolution is required.</source>
          <target state="translated">すでにファイルへの絶対パスがあるので、それ以上の解決は必要ありません。</target>
        </trans-unit>
        <trans-unit id="31fa5f1a5887e32b08b6b1cc470dbe36b39d7423" translate="yes" xml:space="preserve">
          <source>Since webpack 2.5.0, placeholders are evaluated in the &lt;code&gt;banner&lt;/code&gt; string:</source>
          <target state="translated">webpack 2.5.0以降、プレースホルダーは &lt;code&gt;banner&lt;/code&gt; 文字列で評価されます。</target>
        </trans-unit>
        <trans-unit id="56e03fc77f95de6cfa56121e0a49127882f8d418" translate="yes" xml:space="preserve">
          <source>Since webpack 3.0.0, the &lt;code&gt;node&lt;/code&gt; option may be set to &lt;code&gt;false&lt;/code&gt; to completely turn off the &lt;code&gt;NodeStuffPlugin&lt;/code&gt; and &lt;code&gt;NodeSourcePlugin&lt;/code&gt; plugins.</source>
          <target state="translated">webpack 3.0.0以降では、 &lt;code&gt;node&lt;/code&gt; オプションを &lt;code&gt;false&lt;/code&gt; に設定して、 &lt;code&gt;NodeStuffPlugin&lt;/code&gt; および &lt;code&gt;NodeSourcePlugin&lt;/code&gt; プラグインを完全にオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="f15ee1dcf21fba9cafb7c1f19fc6a788cacb6f32" translate="yes" xml:space="preserve">
          <source>Since webpack 3.1.0, you may specify an object for &lt;code&gt;library&lt;/code&gt; for differing names per targets:</source>
          <target state="translated">webpack 3.1.0以降、ターゲットごとに異なる名前の &lt;code&gt;library&lt;/code&gt; オブジェクトを指定できます。</target>
        </trans-unit>
        <trans-unit id="a0b0aa6b4272b3381b66ed9e4051b3488dd8cbcc" translate="yes" xml:space="preserve">
          <source>Since webpack v4, the &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; was removed in favor of &lt;code&gt;optimization.splitChunks&lt;/code&gt;.</source>
          <target state="translated">webpack v4以降、 &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; は、 &lt;code&gt;optimization.splitChunks&lt;/code&gt; を優先して削除されました。</target>
        </trans-unit>
        <trans-unit id="497b435af752c8851a2653fa69911a3902989e2f" translate="yes" xml:space="preserve">
          <source>Single Entry (Shorthand) Syntax</source>
          <target state="translated">シングルエントリ(短縮形)構文</target>
        </trans-unit>
        <trans-unit id="8279243d4ea238c13b2c6c9ed189bf5c690d8d3d" translate="yes" xml:space="preserve">
          <source>SingleEntryPlugin</source>
          <target state="translated">SingleEntryPlugin</target>
        </trans-unit>
        <trans-unit id="97eb6389589df226213ed12bd022910728530b14" translate="yes" xml:space="preserve">
          <source>Skip the emitting phase when there are compilation errors</source>
          <target state="translated">コンパイルエラーがある場合は、エミッティングフェーズをスキップします。</target>
        </trans-unit>
        <trans-unit id="e497bfa0fd175cf475f6b30dd2c52dfb46e6c197" translate="yes" xml:space="preserve">
          <source>Smaller = Faster</source>
          <target state="translated">小さくなる=速くなる</target>
        </trans-unit>
        <trans-unit id="10c5787a9c54232eef85c2d844281db59a4bd375" translate="yes" xml:space="preserve">
          <source>So depending which event you &lt;code&gt;tap&lt;/code&gt; into, the plugin may run differently. For example, when hooking into &lt;code&gt;compile&lt;/code&gt; stage, only the synchronous &lt;code&gt;tap&lt;/code&gt; method can be used:</source>
          <target state="translated">したがって、どのイベントを &lt;code&gt;tap&lt;/code&gt; するかによって、プラグインの動作が異なる場合があります。たとえば、 &lt;code&gt;compile&lt;/code&gt; ステージにフックする場合、使用できるのは同期 &lt;code&gt;tap&lt;/code&gt; メソッドのみです。</target>
        </trans-unit>
        <trans-unit id="58cd91eff5be8cc2a5a1355abc2ac7555d4f4780" translate="yes" xml:space="preserve">
          <source>So far we've manually included all our assets in our &lt;code&gt;index.html&lt;/code&gt; file, but as your application grows and once you start &lt;a href=&quot;caching&quot;&gt;using hashes in filenames&lt;/a&gt; and outputting &lt;a href=&quot;code-splitting&quot;&gt;multiple bundles&lt;/a&gt;, it will be difficult to keep managing your &lt;code&gt;index.html&lt;/code&gt; file manually. However, a few plugins exist that will make this process much easier to manage.</source>
          <target state="translated">これまでのところ、すべてのアセットを手動で &lt;code&gt;index.html&lt;/code&gt; ファイルに含めてきましたが、アプリケーションが大きくなり&lt;a href=&quot;caching&quot;&gt;、ファイル名にハッシュを使用して&lt;/a&gt;&lt;a href=&quot;code-splitting&quot;&gt;複数のバンドル&lt;/a&gt;を出力し始めると、 &lt;code&gt;index.html&lt;/code&gt; ファイルを手動で管理し続けることは困難になります。ただし、このプロセスを管理しやすくするプラグインがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="5d6e19d3e275c6f61a080e96e703a390e5f68085" translate="yes" xml:space="preserve">
          <source>So far, we've been viewing the output by going directly to the local file system. Typically though, a real user accesses a web app over a network; their browser talking to a &lt;strong&gt;server&lt;/strong&gt; which will serve up the required assets (e.g. &lt;code&gt;.html&lt;/code&gt;, &lt;code&gt;.js&lt;/code&gt;, and &lt;code&gt;.css&lt;/code&gt; files).</source>
          <target state="translated">これまでは、ローカルファイルシステムに直接アクセスして出力を表示してきました。ただし、通常、実際のユーザーはネットワークを介してWebアプリにアクセスします。必要なアセット（ &lt;code&gt;.html&lt;/code&gt; 、 &lt;code&gt;.js&lt;/code&gt; 、 &lt;code&gt;.css&lt;/code&gt; ファイルなど）を提供する&lt;strong&gt;サーバー&lt;/strong&gt;と通信するブラウザー。</target>
        </trans-unit>
        <trans-unit id="95019c6a782da25d705699c3eb48b8d5bf24705d" translate="yes" xml:space="preserve">
          <source>So if you want to see ESLint warnings in console during development using &lt;code&gt;WebpackDevServer&lt;/code&gt; remove &lt;code&gt;NoErrorsPlugin&lt;/code&gt; from webpack config.</source>
          <target state="translated">したがって、 &lt;code&gt;WebpackDevServer&lt;/code&gt; を使用して開発中にコンソールでESLint警告を表示したい場合は、 &lt;code&gt;NoErrorsPlugin&lt;/code&gt; からNoErrorsPluginを削除してください。</target>
        </trans-unit>
        <trans-unit id="7b46dcd69a49e970d5b52492d5e957dbf20a0952" translate="yes" xml:space="preserve">
          <source>So let's test what the current experience is like using a simple server. Let's use the &lt;a href=&quot;https://www.npmjs.com/package/http-server&quot;&gt;http-server&lt;/a&gt; package: &lt;code&gt;npm install http-server --save-dev&lt;/code&gt;. We'll also amend the &lt;code&gt;scripts&lt;/code&gt; section of our &lt;code&gt;package.json&lt;/code&gt; to add in a &lt;code&gt;start&lt;/code&gt; script:</source>
          <target state="translated">では、シンプルなサーバーを使用して、現在のエクスペリエンスがどのようなものかをテストしてみましょう。&lt;a href=&quot;https://www.npmjs.com/package/http-server&quot;&gt;http-server&lt;/a&gt;パッケージを使用してみましょう： &lt;code&gt;npm install http-server --save-dev&lt;/code&gt; 。また、 &lt;code&gt;package.json&lt;/code&gt; の &lt;code&gt;scripts&lt;/code&gt; セクションを修正して、 &lt;code&gt;start&lt;/code&gt; スクリプトを追加します。</target>
        </trans-unit>
        <trans-unit id="ba4289ea84f8f4d0175d8d74412c93e181745c7d" translate="yes" xml:space="preserve">
          <source>So now we're pulling in our CSS, but what about our images like backgrounds and icons? Using the &lt;a href=&quot;../loaders/file-loader&quot;&gt;file-loader&lt;/a&gt; we can easily incorporate those in our system as well:</source>
          <target state="translated">では、CSSを取り込みますが、背景やアイコンなどの画像はどうでしょうか。&lt;a href=&quot;../loaders/file-loader&quot;&gt;ファイルローダー&lt;/a&gt;を使用して、システムに簡単に組み込むこともできます。</target>
        </trans-unit>
        <trans-unit id="10baeed4fc445ebdf29a83716129062c75380166" translate="yes" xml:space="preserve">
          <source>So now you have a little bit of insight about how webpack works behind the scenes. &quot;But, how does this affect me?&quot;, you might ask. The simple answer is that most of the time it doesn't. The runtime will do its thing, utilizing the manifest, and everything will appear to just magically work once your application hits the browser. However, if you decide to improve your projects performance by utilizing browser caching, this process will all of a sudden become an important thing to understand.</source>
          <target state="translated">これで、webpackが裏でどのように機能しているか、少しは理解できるようになりました。&quot;でも、これは私にどのような影響を与えるのでしょうか?&quot; とあなたは尋ねるかもしれません。簡単な答えは、ほとんどの場合は影響がないということです。ランタイムはマニフェストを利用してそのことを行い、アプリケーションがブラウザにヒットすると、すべてが魔法のように動作するように見えます。しかし、ブラウザのキャッシュを利用してプロジェクトのパフォーマンスを向上させようと決めた場合、このプロセスは突然、理解すべき重要なものになるでしょう。</target>
        </trans-unit>
        <trans-unit id="8811715af11f4dc22420e4ef2694617f93e100b9" translate="yes" xml:space="preserve">
          <source>So we're now at the happy point of having produced a Service Worker. What's next?</source>
          <target state="translated">ということで、サービスワーカーを輩出できたという嬉しいポイントに到達しました。次は何をするのかな?</target>
        </trans-unit>
        <trans-unit id="19448037ca889443fe3d0c814ea05c08dbaa6850" translate="yes" xml:space="preserve">
          <source>So we're using webpack to bundle our modular application which yields a deployable &lt;code&gt;/dist&lt;/code&gt; directory. Once the contents of &lt;code&gt;/dist&lt;/code&gt; have been deployed to a server, clients (typically browsers) will hit that server to grab the site and its assets. The last step can be time consuming, which is why browsers use a technique called &lt;a href=&quot;https://searchstorage.techtarget.com/definition/cache&quot;&gt;caching&lt;/a&gt;. This allows sites to load faster with less unnecessary network traffic, however it can also cause headaches when you need new code to be picked up.</source>
          <target state="translated">したがって、webpackを使用して、デプロイ可能な &lt;code&gt;/dist&lt;/code&gt; ディレクトリを生成するモジュール式アプリケーションをバンドルしています。 &lt;code&gt;/dist&lt;/code&gt; のコンテンツがサーバーにデプロイされると、クライアント（通常はブラウザー）がそのサーバーにアクセスして、サイトとそのアセットを取得します。最後のステップは時間がかかる可能性があるため、ブラウザーは&lt;a href=&quot;https://searchstorage.techtarget.com/definition/cache&quot;&gt;キャッシング&lt;/a&gt;と呼ばれる手法を使用します。これにより、不要なネットワークトラフィックが少なくなり、サイトの読み込みが速くなりますが、新しいコードを取得する必要があるときに頭痛の種になることもあります。</target>
        </trans-unit>
        <trans-unit id="cc580457d44ca3f0fccb18e8a90fb8ae243eeccb" translate="yes" xml:space="preserve">
          <source>So we've cued up our &quot;dead code&quot; to be dropped by using the &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; syntax, but we still need to drop it from the bundle. To do that, we'll use the &lt;code&gt;-p&lt;/code&gt; (production) webpack compilation flag to enable &lt;code&gt;UglifyJSPlugin&lt;/code&gt;.</source>
          <target state="translated">したがって、 &lt;code&gt;import&lt;/code&gt; と &lt;code&gt;export&lt;/code&gt; 構文を使用して「デッドコード」を削除するように指示しましたが、それでもバンドルから削除する必要があります。これを行うには、 &lt;code&gt;-p&lt;/code&gt; （本番）webpackコンパイルフラグを使用してUglifyJSPluginを有効にし &lt;code&gt;UglifyJSPlugin&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="02d98868e9fba9245aabc21fac3c93011835485d" translate="yes" xml:space="preserve">
          <source>So what about other assets like fonts? The file and url loaders will take any file you load through them and output it to your build directory. This means we can use them for any kind of file, including fonts. Let's update our &lt;code&gt;webpack.config.js&lt;/code&gt; to handle font files:</source>
          <target state="translated">では、フォントなどの他のアセットはどうでしょうか？ファイルおよびURLローダーは、それらを介してロードするすべてのファイルを取得し、ビルドディレクトリに出力します。これは、フォントを含むあらゆる種類のファイルに使用できることを意味します。フォントファイルを処理するように &lt;code&gt;webpack.config.js&lt;/code&gt; を更新しましょう。</target>
        </trans-unit>
        <trans-unit id="e62b04886f5dc15927b1ffe710caeecd62c0379f" translate="yes" xml:space="preserve">
          <source>So while webpack's core focus is bundling, there are a variety of extensions that can enable you to use it for jobs typical of a task runner. Integrating a separate tool adds complexity, so be sure to weigh the pros and cons before going forward.</source>
          <target state="translated">そのため、webpackの中心的な焦点はバンドルですが、タスクランナーの典型的なジョブに使用できるようにするための様々な拡張機能があります。別のツールを統合すると複雑さが増すので、先に進む前に長所と短所を秤にかけるようにしましょう。</target>
        </trans-unit>
        <trans-unit id="d1e5009e238a4bad3ef05684680da843d8779ff6" translate="yes" xml:space="preserve">
          <source>So why might a loader take advantage of the &quot;pitching&quot; phase?</source>
          <target state="translated">では、なぜローダーが「ピッチング」の局面を利用する可能性があるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="fe488648ec5012f734cc9841c5f3ff7d83733d41" translate="yes" xml:space="preserve">
          <source>So, once your application hits the browser in the form of an &lt;code&gt;index.html&lt;/code&gt; file, some bundles, and a variety of other assets, what does it look like? That &lt;code&gt;/src&lt;/code&gt; directory you meticulously laid out is now gone, so how does webpack manage the interaction between all of your modules? This is where the manifest data comes in...</source>
          <target state="translated">それで、アプリケーションが &lt;code&gt;index.html&lt;/code&gt; ファイル、いくつかのバンドル、およびその他のさまざまなアセットの形でブラウザーにヒットすると、どのように見えますか？これ &lt;code&gt;/src&lt;/code&gt; にあなたは細心の注意を払ってレイアウトされたディレクトリが今なくなっているので、どのようにWebPACKのあなたのすべてのモジュール間の相互作用を管理していますか？これがマニフェストデータの出所です...</target>
        </trans-unit>
        <trans-unit id="145b40facbc75f15ef63692477108cef3bda6d8f" translate="yes" xml:space="preserve">
          <source>So, what we've learned is that in order to take advantage of &lt;em&gt;tree shaking&lt;/em&gt;, you must...</source>
          <target state="translated">だから、私たちが学んだことは、&lt;em&gt;ツリーの揺れ&lt;/em&gt;を利用するためには、あなたは...</target>
        </trans-unit>
        <trans-unit id="f4481462b06413ebd81e68e2e4acc8de9e7d99ba" translate="yes" xml:space="preserve">
          <source>So, with the following configuration...</source>
          <target state="translated">そこで、以下のような構成で</target>
        </trans-unit>
        <trans-unit id="2020a1b36d31f40fb51a15e6678fec25e6225a02" translate="yes" xml:space="preserve">
          <source>Some legacy modules rely on &lt;code&gt;this&lt;/code&gt; being the &lt;code&gt;window&lt;/code&gt; object. Let's update our &lt;code&gt;index.js&lt;/code&gt; so this is the case:</source>
          <target state="translated">一部のレガシーモジュールは、 &lt;code&gt;this&lt;/code&gt; が &lt;code&gt;window&lt;/code&gt; オブジェクトであることに依存しています。 &lt;code&gt;index.js&lt;/code&gt; を更新してみましょう。</target>
        </trans-unit>
        <trans-unit id="fdbfcf6e2fd8eed232593b845e306ba7435e17dd" translate="yes" xml:space="preserve">
          <source>Some of these values are suited for development and some for production. For development you typically want fast Source Maps at the cost of bundle size, but for production you want separate Source Maps that are accurate and support minimizing.</source>
          <target state="translated">これらの値の中には、開発用に適したものと本番用に適したものがあります。開発用には、通常、バンドル サイズを犠牲にして高速なソース マップが必要ですが、プロダクション用には、正確で最小化をサポートする個別のソース マップが必要です。</target>
        </trans-unit>
        <trans-unit id="fb26ce8cc86dbfea643748ddc6d2bc17426133a4" translate="yes" xml:space="preserve">
          <source>Some of what has been described above is also achievable via the command line. For example, the &lt;code&gt;--optimize-minimize&lt;/code&gt; flag will include the &lt;code&gt;UglifyJSPlugin&lt;/code&gt; behind the scenes. The &lt;code&gt;--define process.env.NODE_ENV=&quot;'production'&quot;&lt;/code&gt; will do the same for the &lt;code&gt;DefinePlugin&lt;/code&gt; instance described above. And, &lt;code&gt;webpack -p&lt;/code&gt; will automatically invoke both those flags and thus the plugins to be included.</source>
          <target state="translated">上記の内容の一部は、コマンドラインでも実行できます。たとえば、 &lt;code&gt;--optimize-minimize&lt;/code&gt; フラグには、 &lt;code&gt;UglifyJSPlugin&lt;/code&gt; が含まれます。 &lt;code&gt;--define process.env.NODE_ENV=&quot;'production'&quot;&lt;/code&gt; のために同じことをするでしょう &lt;code&gt;DefinePlugin&lt;/code&gt; のインスタンスは、前述しました。そして、 &lt;code&gt;webpack -p&lt;/code&gt; は自動的にこれらのフラグの両方を呼び出し、したがって、含まれるプラグインを呼び出します。</target>
        </trans-unit>
        <trans-unit id="ac4e4baeeb778d89bc9b4402d323e503a39f4162" translate="yes" xml:space="preserve">
          <source>Some text editors have a &quot;safe write&quot; function that might interfere with some of the following tools. Read &lt;a href=&quot;#adjusting-your-text-editor&quot;&gt;Adjusting Your text Editor&lt;/a&gt; for a solution to these issues.</source>
          <target state="translated">一部のテキストエディターには、「安全な書き込み」機能があり、次のツールの一部と干渉する可能性があります。これらの問題の解決策については、&lt;a href=&quot;#adjusting-your-text-editor&quot;&gt;テキストエディターの調整をお&lt;/a&gt;読みください。</target>
        </trans-unit>
        <trans-unit id="0bf67f20d45a3a5370b2a285ca9c2d95700ec9fe" translate="yes" xml:space="preserve">
          <source>Sometimes you don't want to proxy everything. It is possible to bypass the proxy based on the return value of a function.</source>
          <target state="translated">すべてをプロキシにしたくない場合もあるでしょう。関数の戻り値に基づいてプロキシをバイパスすることが可能です。</target>
        </trans-unit>
        <trans-unit id="d3199416626a4109ce446b38ef450734fa400bc9" translate="yes" xml:space="preserve">
          <source>Sort the chunks in from most to least important.</source>
          <target state="translated">チャンクを最も重要なものから最も重要でないものまで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="9aecb68f08700b120a7d90d0debe00264d3a327c" translate="yes" xml:space="preserve">
          <source>Sort the modules in from most to least important.</source>
          <target state="translated">モジュールを最も重要なものから最も重要でないものへと並べ替えます。</target>
        </trans-unit>
        <trans-unit id="b1d254566526dbbd891bc147d36c80c6c32df941" translate="yes" xml:space="preserve">
          <source>Sorts the assets list by property in asset</source>
          <target state="translated">アセットリストをプロパティ別にソートします。</target>
        </trans-unit>
        <trans-unit id="9606d3765b363987df978d5ebfb80f8098bec19b" translate="yes" xml:space="preserve">
          <source>Sorts the chunks list by property in chunk</source>
          <target state="translated">チャンクのプロパティ別にチャンクリストをソートします。</target>
        </trans-unit>
        <trans-unit id="db344fb262e131e1a3c6db3bf098ff78609e7d35" translate="yes" xml:space="preserve">
          <source>Sorts the modules list by property in module</source>
          <target state="translated">モジュールのプロパティでモジュールリストをソートします。</target>
        </trans-unit>
        <trans-unit id="6da13addb000b67d42a6d66391713819e634149f" translate="yes" xml:space="preserve">
          <source>Source</source>
          <target state="translated">Source</target>
        </trans-unit>
        <trans-unit id="25d717b62000ca836854004fccb956e8d68a764b" translate="yes" xml:space="preserve">
          <source>Source Mapping</source>
          <target state="translated">ソースマッピング</target>
        </trans-unit>
        <trans-unit id="5774da7b802f7af9150c4273aaf57f7387c8eb1d" translate="yes" xml:space="preserve">
          <source>Source Maps</source>
          <target state="translated">ソースマップ</target>
        </trans-unit>
        <trans-unit id="30e86ffbe954826823e73c12cfc55bea76005dff" translate="yes" xml:space="preserve">
          <source>Source maps</source>
          <target state="translated">ソースマップ</target>
        </trans-unit>
        <trans-unit id="b2587eef1d6187c444242c987752c5ffb686abef" translate="yes" xml:space="preserve">
          <source>Source maps are always produced.</source>
          <target state="translated">ソースマップは必ず作成されます。</target>
        </trans-unit>
        <trans-unit id="d84d17e0e9668faad9c456ecf99d44d8405a021f" translate="yes" xml:space="preserve">
          <source>Source maps are really expensive. Do you really need them?</source>
          <target state="translated">ソースマップは本当に高価です。本当に必要なの?</target>
        </trans-unit>
        <trans-unit id="ff1f1aa681b89c1378ecf41cee15808c010c6906" translate="yes" xml:space="preserve">
          <source>SourceMapDevToolPlugin</source>
          <target state="translated">SourceMapDevToolPlugin</target>
        </trans-unit>
        <trans-unit id="75f613a38c9a77eef52fd9053dd584ff64dc4df0" translate="yes" xml:space="preserve">
          <source>Special cases</source>
          <target state="translated">特殊なケース</target>
        </trans-unit>
        <trans-unit id="c0d8c0c0a4ec9262cc89dc60627539d515b79764" translate="yes" xml:space="preserve">
          <source>Specific Tooling Issues</source>
          <target state="translated">特定のツーリングの問題</target>
        </trans-unit>
        <trans-unit id="b3aa5454f5b0dfb11123b5819bc91609022f1d6c" translate="yes" xml:space="preserve">
          <source>Specific to CSS</source>
          <target state="translated">CSSに特化した</target>
        </trans-unit>
        <trans-unit id="b7c38b38615d145709664c9bc8f6c6a62a6b10b9" translate="yes" xml:space="preserve">
          <source>Specifies a Regular Expression to one or many parts of the target file path. The capture groups can be reused in the &lt;code&gt;name&lt;/code&gt; property using &lt;code&gt;[N]&lt;/code&gt;&lt;a href=&quot;https://github.com/webpack-contrib/file-loader#placeholders&quot;&gt;placeholder&lt;/a&gt;.</source>
          <target state="translated">ターゲットファイルパスの1つ以上の部分に正規表現を指定します。キャプチャグループは、 &lt;code&gt;[N]&lt;/code&gt; &lt;a href=&quot;https://github.com/webpack-contrib/file-loader#placeholders&quot;&gt;プレースホルダー&lt;/a&gt;を使用して &lt;code&gt;name&lt;/code&gt; プロパティで再利用できます。</target>
        </trans-unit>
        <trans-unit id="879965cc2c1f185af16e722049ebaed20e3790a2" translate="yes" xml:space="preserve">
          <source>Specifies a custom file context.</source>
          <target state="translated">カスタム ファイル コンテキストを指定します。</target>
        </trans-unit>
        <trans-unit id="84ab6058ed40a01e379f0582c1af643799c945a0" translate="yes" xml:space="preserve">
          <source>Specifies a custom filename template for the target file(s) using the query parameter &lt;code&gt;name&lt;/code&gt;. For example, to copy a file from your &lt;code&gt;context&lt;/code&gt; directory into the output directory retaining the full directory structure, you might use:</source>
          <target state="translated">クエリパラメータ &lt;code&gt;name&lt;/code&gt; を使用して、ターゲットファイルのカスタムファイル名テンプレートを指定します。たとえば、 &lt;code&gt;context&lt;/code&gt; ディレクトリから完全なディレクトリ構造を保持する出力ディレクトリにファイルをコピーするには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="7d1a1617f78af92e2776d9c995c243f41a529a4f" translate="yes" xml:space="preserve">
          <source>Specifies a custom public path for the target file(s).</source>
          <target state="translated">対象のファイルのカスタム パブリック パスを指定します。</target>
        </trans-unit>
        <trans-unit id="72ec7449f82690a64ea1fe85c71ca14dd2c8bc13" translate="yes" xml:space="preserve">
          <source>Specifies a different &lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;configuration&lt;/a&gt; file to pick up. Use this if you want to specify something different than &lt;code&gt;webpack.config.js&lt;/code&gt;, which is the default.</source>
          <target state="translated">取得する別の&lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;構成&lt;/a&gt;ファイルを指定します。デフォルトの &lt;code&gt;webpack.config.js&lt;/code&gt; とは異なるものを指定する場合は、これを使用します。</target>
        </trans-unit>
        <trans-unit id="5b04472ec1e127e502c166b357787f38f6d2c875" translate="yes" xml:space="preserve">
          <source>Specifies an absolute path to a valid configuration file on the filesystem.</source>
          <target state="translated">ファイルシステム上の有効な設定ファイルへの絶対パスを指定します。</target>
        </trans-unit>
        <trans-unit id="9d0798e89c25e70403528df1315a7715cfa2c0de" translate="yes" xml:space="preserve">
          <source>Specifies an alternative loader to use when a target file's size exceeds the limit set in the &lt;code&gt;limit&lt;/code&gt; option.</source>
          <target state="translated">ターゲットファイルのサイズが &lt;code&gt;limit&lt;/code&gt; オプションで設定された制限を超えたときに使用する代替ローダーを指定します。</target>
        </trans-unit>
        <trans-unit id="0863024865f449432b82f45424554cf2cdd37989" translate="yes" xml:space="preserve">
          <source>Specifies an filesystem path from which point &lt;code&gt;config-loader&lt;/code&gt; will begin looking for a configuration file.</source>
          <target state="translated">&lt;code&gt;config-loader&lt;/code&gt; が構成ファイルの検索を開始するファイルシステムパスを指定します。</target>
        </trans-unit>
        <trans-unit id="973530054bf4151384693c547dda2192964092e7" translate="yes" xml:space="preserve">
          <source>Specifies compiler(s) to use when loading modules from files containing the configuration. For example:</source>
          <target state="translated">設定を含むファイルからモジュールをロードするときに使用するコンパイラを指定します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="b2aa5e351074790f824f05fd8370fb0799e435f2" translate="yes" xml:space="preserve">
          <source>Specifies the category of the loader. No value means normal loader.</source>
          <target state="translated">ローダのカテゴリを指定します。値がない場合は通常のローダーを意味します。</target>
        </trans-unit>
        <trans-unit id="241834609b4e73c0844125b7003ab35c9b37d2ee" translate="yes" xml:space="preserve">
          <source>Specifies the hash method to use for hashing the file content. See &lt;a href=&quot;https://github.com/webpack-contrib/file-loader#hashes&quot;&gt;Hashes&lt;/a&gt;.</source>
          <target state="translated">ファイルコンテンツのハッシュに使用するハッシュ方式を指定します。&lt;a href=&quot;https://github.com/webpack-contrib/file-loader#hashes&quot;&gt;ハッシュを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7d20c8b08d4e7f04f72cf541a97ca7abcb26683c" translate="yes" xml:space="preserve">
          <source>Specifies whether or not to generate a relative URI for each target file context.</source>
          <target state="translated">各ターゲットファイルコンテキストに対して相対URIを生成するかどうかを指定します。</target>
        </trans-unit>
        <trans-unit id="aadbb1e7be1626e4e57d5c300b33bb34352ea804" translate="yes" xml:space="preserve">
          <source>Specify a custom formatter to format errors printed to the console.</source>
          <target state="translated">コンソールに印刷されるエラーをフォーマットするカスタムフォーマッタを指定します。</target>
        </trans-unit>
        <trans-unit id="cd1c6cd3673817c28ee3bd855e67cc875f4df81e" translate="yes" xml:space="preserve">
          <source>Specify a field, such as &lt;code&gt;browser&lt;/code&gt;, to be parsed according to &lt;a href=&quot;https://github.com/defunctzombie/package-browser-field-spec&quot;&gt;this specification&lt;/a&gt;. Default:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/defunctzombie/package-browser-field-spec&quot;&gt;この仕様&lt;/a&gt;に従って解析される &lt;code&gt;browser&lt;/code&gt; などのフィールドを指定します。デフォルト：</target>
        </trans-unit>
        <trans-unit id="c66b711f602441dbfe41affd2e1c9c62b4084b4b" translate="yes" xml:space="preserve">
          <source>Specify a filesystem path where target the file(s) will be placed.</source>
          <target state="translated">ターゲットのファイルを配置するファイルシステムのパスを指定します。</target>
        </trans-unit>
        <trans-unit id="955d1a09a26d8e964dd4a5fe391a094a4f5a9066" translate="yes" xml:space="preserve">
          <source>Specify a host to use. By default this is &lt;code&gt;localhost&lt;/code&gt;. If you want your server to be accessible externally, specify it like this:</source>
          <target state="translated">使用するホストを指定します。デフォルトでは、これは &lt;code&gt;localhost&lt;/code&gt; です。サーバーに外部からアクセスできるようにするには、次のように指定します。</target>
        </trans-unit>
        <trans-unit id="271a9f6f25b95c50650ef30d0a047e823cfd2194" translate="yes" xml:space="preserve">
          <source>Specify a page to navigate to when opening the browser.</source>
          <target state="translated">ブラウザを開いたときに移動するページを指定します。</target>
        </trans-unit>
        <trans-unit id="527e84c85d0d2c1cdc4ede8f54ad03ad9844d94e" translate="yes" xml:space="preserve">
          <source>Specify a port number to listen for requests on:</source>
          <target state="translated">リクエストをリッスンするポート番号を指定します。</target>
        </trans-unit>
        <trans-unit id="5c2e525c6e4e62824f782a966fe6452c405bfe5d" translate="yes" xml:space="preserve">
          <source>Specify a whole group of dependencies using a path to the &lt;code&gt;directory&lt;/code&gt;, an option to &lt;code&gt;includeSubdirs&lt;/code&gt;, and a &lt;code&gt;filter&lt;/code&gt; for more fine grained control of the modules included. These can then be easily resolved later on:</source>
          <target state="translated">&lt;code&gt;directory&lt;/code&gt; へのパス、 &lt;code&gt;includeSubdirs&lt;/code&gt; へのオプション、および含まれるモジュールのより詳細な制御のための &lt;code&gt;filter&lt;/code&gt; を使用して、依存関係のグループ全体を指定します。これらは後で簡単に解決できます。</target>
        </trans-unit>
        <trans-unit id="c6f4f98b083e85b8dfa64e3ef4caa73817951792" translate="yes" xml:space="preserve">
          <source>Specify the Mode</source>
          <target state="translated">モードの指定</target>
        </trans-unit>
        <trans-unit id="9f8c555874edaf2657d6b410369932d946537f12" translate="yes" xml:space="preserve">
          <source>Specify the config file location to be used by &lt;code&gt;stylelint&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stylelint&lt;/code&gt; が使用する構成ファイルの場所を指定します。</target>
        </trans-unit>
        <trans-unit id="2c2248e21bef3373a587a20483d4a33ba6006988" translate="yes" xml:space="preserve">
          <source>Specify the file from which to read the last set of records. This can be used to rename a records file. See the example below.</source>
          <target state="translated">最後のレコードのセットを読み込むファイルを指定します。これは、レコードファイルの名前を変更するために使用することができます。以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="b2c64f6ba34b6840ed8dc33850b6cbac5edb9c68" translate="yes" xml:space="preserve">
          <source>Specify the glob pattern for finding files. Must be relative to &lt;code&gt;options.context&lt;/code&gt;.</source>
          <target state="translated">ファイルを検索するためのグロブパターンを指定します。 &lt;code&gt;options.context&lt;/code&gt; に対して相対的である必要があります。</target>
        </trans-unit>
        <trans-unit id="baf6be52bba84219b9fda6d0c8bcf12622deac70" translate="yes" xml:space="preserve">
          <source>Specify where the records should be written. The following example shows how you might use this option in combination with &lt;code&gt;recordsInputPath&lt;/code&gt; to rename a records file:</source>
          <target state="translated">レコードを書き込む場所を指定します。次の例は、このオプションを &lt;code&gt;recordsInputPath&lt;/code&gt; と組み合わせて使用して、レコードファイルの名前を変更する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="bc4274265bc2b427a0ab3c9fac43c1ce79052b5a" translate="yes" xml:space="preserve">
          <source>Speed up development by &lt;b&gt;automatically installing &amp;amp; saving dependencies&lt;/b&gt; with Webpack.</source>
          <target state="translated">Webpackを使用して&lt;b&gt;依存関係&lt;/b&gt;を&lt;b&gt;自動的にインストールおよび保存する&lt;/b&gt;ことにより、開発をスピードアップし&lt;b&gt;ます&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="5e0d508b45713ed3d17ba20bb553920ced378bf5" translate="yes" xml:space="preserve">
          <source>Split Chunks: Example 1</source>
          <target state="translated">チャンクを分割します。例1</target>
        </trans-unit>
        <trans-unit id="3221d75c5e6671a885b0095735c2a4e694aa6fb8" translate="yes" xml:space="preserve">
          <source>Split Chunks: Example 2</source>
          <target state="translated">チャンクを分割します。例2</target>
        </trans-unit>
        <trans-unit id="d5ebf585bdd5fc69fcb794642a985b1162dc9b3f" translate="yes" xml:space="preserve">
          <source>Split bundles in order to drastically improve build time</source>
          <target state="translated">ビルド時間を大幅に短縮するためのバンドルの分割</target>
        </trans-unit>
        <trans-unit id="927453c2e794e1ac63fb3f57afdf09e07718d4bf" translate="yes" xml:space="preserve">
          <source>Split out the given &lt;code&gt;dependencies&lt;/code&gt; to a separate bundle that that will be loaded asynchronously. When using CommonJS module syntax, this is the only way to dynamically load dependencies. Meaning, this code can be run within execution, only loading the &lt;code&gt;dependencies&lt;/code&gt; if certain conditions are met.</source>
          <target state="translated">指定された &lt;code&gt;dependencies&lt;/code&gt; を、非同期で読み込まれる別のバンドルに分割します。CommonJSモジュール構文を使用する場合、これが依存関係を動的にロードする唯一の方法です。つまり、このコードは実行中に実行でき、特定の条件が満たされた場合にのみ &lt;code&gt;dependencies&lt;/code&gt; ロードします。</target>
        </trans-unit>
        <trans-unit id="6c9cee0a9ceb9ae2830482807a857b1955aaab84" translate="yes" xml:space="preserve">
          <source>Split your code into vendor and application.</source>
          <target state="translated">コードをベンダーとアプリケーションに分割します。</target>
        </trans-unit>
        <trans-unit id="49c4c7e4435b9c73d00e501300fe2e540e68c446" translate="yes" xml:space="preserve">
          <source>SplitChunksPlugin</source>
          <target state="translated">SplitChunksPlugin</target>
        </trans-unit>
        <trans-unit id="82cebd0cac45c28817fad5367f93a5bced93dca0" translate="yes" xml:space="preserve">
          <source>Sponsors</source>
          <target state="translated">Sponsors</target>
        </trans-unit>
        <trans-unit id="f0c190c767162b85b2737615c113b0c355e166fe" translate="yes" xml:space="preserve">
          <source>Standard output</source>
          <target state="translated">標準出力</target>
        </trans-unit>
        <trans-unit id="0cf2ba46a63f72b57431c5fc427239fef3027329" translate="yes" xml:space="preserve">
          <source>Start changing the &lt;code&gt;console.log&lt;/code&gt; statement in &lt;code&gt;print.js&lt;/code&gt;, and you should see the following output in the browser console.</source>
          <target state="translated">&lt;code&gt;print.js&lt;/code&gt; の &lt;code&gt;console.log&lt;/code&gt; ステートメントの変更を開始すると、ブラウザコンソールに次の出力が表示されます。</target>
        </trans-unit>
        <trans-unit id="58e7d62d7bd658b8a8605105a1796904b717d894" translate="yes" xml:space="preserve">
          <source>Starting with &lt;code&gt;less-loader&lt;/code&gt; 4, you can now choose between Less' builtin resolver and webpack's resolver. By default, webpack's resolver is used.</source>
          <target state="translated">以降では &lt;code&gt;less-loader&lt;/code&gt; 4、あなたは今より少ない組み込みリゾルバとのWebPACKのリゾルバの間で選択することができます。デフォルトでは、webpackのリゾルバーが使用されます。</target>
        </trans-unit>
        <trans-unit id="0bffa02f42fb4f0bca025609a90d7321a00c4243" translate="yes" xml:space="preserve">
          <source>Starting with webpack 4, the formerly &lt;code&gt;this.options.context&lt;/code&gt; is provided as &lt;code&gt;this.rootContext&lt;/code&gt;.</source>
          <target state="translated">Webpack 4以降、以前は &lt;code&gt;this.options.context&lt;/code&gt; がthis.rootContextとして提供され &lt;code&gt;this.rootContext&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7ceb1f582ce2cefa5129f9f6b527d3fe56348d88" translate="yes" xml:space="preserve">
          <source>Statically &lt;code&gt;import&lt;/code&gt; the &lt;code&gt;export&lt;/code&gt;s of another module.</source>
          <target state="translated">別のモジュールの &lt;code&gt;export&lt;/code&gt; 静的に &lt;code&gt;import&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="be763e9aba2af6b8baabada85d5e26c043c93fed" translate="yes" xml:space="preserve">
          <source>Stats</source>
          <target state="translated">Stats</target>
        </trans-unit>
        <trans-unit id="4a308b7413e7f6d7fc81466205aa2f57a128e0a3" translate="yes" xml:space="preserve">
          <source>Stats Data</source>
          <target state="translated">統計データ</target>
        </trans-unit>
        <trans-unit id="f69d3c28b5a6791ada7c1ca0a84062a6d7b8b064" translate="yes" xml:space="preserve">
          <source>Stats Object</source>
          <target state="translated">統計オブジェクト</target>
        </trans-unit>
        <trans-unit id="604f77a78acb0ea9173e4be9e0d1b78afe0f269a" translate="yes" xml:space="preserve">
          <source>Stats Options</source>
          <target state="translated">統計オプション</target>
        </trans-unit>
        <trans-unit id="bae7d5be70820ed56467bd9a63744e23b47bd711" translate="yes" xml:space="preserve">
          <source>Status</source>
          <target state="translated">Status</target>
        </trans-unit>
        <trans-unit id="fb275fd06cf16b7ace28649a477c15f702dcd76f" translate="yes" xml:space="preserve">
          <source>Stay Up to Date</source>
          <target state="translated">最新情報</target>
        </trans-unit>
        <trans-unit id="e9a94c30e84ff4156f74ce9371f4186545b157ad" translate="yes" xml:space="preserve">
          <source>Staying up to date with &lt;strong&gt;Node.js&lt;/strong&gt; can also help with performance. On top of this, keeping your package manager (e.g. &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;) up to date can also help. Newer versions create more efficient module trees and increase resolving speed.</source>
          <target state="translated">&lt;strong&gt;Node.js&lt;/strong&gt;を最新の状態に&lt;strong&gt;保つ&lt;/strong&gt;こともパフォーマンスの向上に役立ちます。これに加えて、パッケージマネージャー（たとえば、 &lt;code&gt;npm&lt;/code&gt; や &lt;code&gt;yarn&lt;/code&gt; ）を最新の状態に保つことも役立ちます。新しいバージョンでは、より効率的なモジュールツリーが作成され、解決速度が向上します。</target>
        </trans-unit>
        <trans-unit id="b42aafe14616527f09805ec11d38279b9b31d741" translate="yes" xml:space="preserve">
          <source>Store chunk info to the records.</source>
          <target state="translated">チャンク情報をレコードに保存します。</target>
        </trans-unit>
        <trans-unit id="1f08f597445621fb711a4071c39688f20dcd5f31" translate="yes" xml:space="preserve">
          <source>Store information about the &lt;code&gt;compilation&lt;/code&gt; to the &lt;code&gt;records&lt;/code&gt;.</source>
          <target state="translated">店舗情報 &lt;code&gt;compilation&lt;/code&gt; に &lt;code&gt;records&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dad7091a0230ac04d8dc6aaea8c173ee760c66da" translate="yes" xml:space="preserve">
          <source>Store module info to the records.</source>
          <target state="translated">モジュール情報をレコードに格納します。</target>
        </trans-unit>
        <trans-unit id="9482c5d5bfbed584fddcc442794dd8d3d9813064" translate="yes" xml:space="preserve">
          <source>Structure</source>
          <target state="translated">Structure</target>
        </trans-unit>
        <trans-unit id="67c58f81c1c8b9a2b8de4af65b762cc8ca9b0dff" translate="yes" xml:space="preserve">
          <source>StylelintWebpackPlugin</source>
          <target state="translated">StylelintWebpackPlugin</target>
        </trans-unit>
        <trans-unit id="c7bb535582186462aee87302ed2c2d97f2a58126" translate="yes" xml:space="preserve">
          <source>Styles are not added on &lt;code&gt;import/require()&lt;/code&gt;, but instead on call to &lt;code&gt;use&lt;/code&gt;/&lt;code&gt;ref&lt;/code&gt;. Styles are removed from page if &lt;code&gt;unuse&lt;/code&gt;/&lt;code&gt;unref&lt;/code&gt; is called exactly as often as &lt;code&gt;use&lt;/code&gt;/&lt;code&gt;ref&lt;/code&gt;.</source>
          <target state="translated">スタイルは &lt;code&gt;import/require()&lt;/code&gt; では追加されませんが、代わりに/ &lt;code&gt;ref&lt;/code&gt; を &lt;code&gt;use&lt;/code&gt; 呼び出しで追加されます。 &lt;code&gt;unuse&lt;/code&gt; / &lt;code&gt;unref&lt;/code&gt; が &lt;code&gt;use&lt;/code&gt; / &lt;code&gt;ref&lt;/code&gt; とまったく同じ頻度で呼び出されると、スタイルはページから削除されます。</target>
        </trans-unit>
        <trans-unit id="55f2816ed3aa70bc8d652134d376b07d16de4aac" translate="yes" xml:space="preserve">
          <source>Styling</source>
          <target state="translated">Styling</target>
        </trans-unit>
        <trans-unit id="957400ac1d92f82a856a3f939ce5438d5096957c" translate="yes" xml:space="preserve">
          <source>Stylus</source>
          <target state="translated">Stylus</target>
        </trans-unit>
        <trans-unit id="a65b7f12a991185f44b505808bc867e90d749e20" translate="yes" xml:space="preserve">
          <source>Supported Compilers</source>
          <target state="translated">サポートされているコンパイラ</target>
        </trans-unit>
        <trans-unit id="42366eb58c525dced3d9089466359736d08d1070" translate="yes" xml:space="preserve">
          <source>Supported ECMAScript Version (&lt;code&gt;5&lt;/code&gt;, &lt;code&gt;6&lt;/code&gt;, &lt;code&gt;7&lt;/code&gt; or &lt;code&gt;8&lt;/code&gt;). Affects &lt;code&gt;parse&lt;/code&gt;, &lt;code&gt;compress&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;output&lt;/code&gt; options</source>
          <target state="translated">ECMAScriptのバージョン（サポートされている &lt;code&gt;5&lt;/code&gt; 、 &lt;code&gt;6&lt;/code&gt; 、 &lt;code&gt;7&lt;/code&gt; 又は &lt;code&gt;8&lt;/code&gt; ）。影響 &lt;code&gt;parse&lt;/code&gt; 、 &lt;code&gt;compress&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;output&lt;/code&gt; オプションを</target>
        </trans-unit>
        <trans-unit id="6824265fc63ded1e35f74fdfb95bc3bc82cba17f" translate="yes" xml:space="preserve">
          <source>Supported Module Types</source>
          <target state="translated">サポートされているモジュールタイプ</target>
        </trans-unit>
        <trans-unit id="aa3dbb86e6217840070c2819c16a0acca237c123" translate="yes" xml:space="preserve">
          <source>Supports synchronous and asynchronous worker functions</source>
          <target state="translated">同期および非同期ワーカー機能をサポート</target>
        </trans-unit>
        <trans-unit id="5c7758242ce33fd5e1bba527f9db9b8ba14a50e6" translate="yes" xml:space="preserve">
          <source>Suppose we have the following &lt;code&gt;json5&lt;/code&gt; file</source>
          <target state="translated">次の &lt;code&gt;json5&lt;/code&gt; ファイルがあるとします</target>
        </trans-unit>
        <trans-unit id="c6cc061254b7980d8dc92932de44c580913ed833" translate="yes" xml:space="preserve">
          <source>Switch loaders to debug mode</source>
          <target state="translated">ローダをデバッグモードに切り替える</target>
        </trans-unit>
        <trans-unit id="787a08df5a570ca10a502ea5b32dd8a467dfc445" translate="yes" xml:space="preserve">
          <source>Synchronous Loaders</source>
          <target state="translated">同期式ローダー</target>
        </trans-unit>
        <trans-unit id="73a2ab444440a9a93c26fed67d5ed607f2d75c7a" translate="yes" xml:space="preserve">
          <source>Synchronously retrieve a module's ID. The compiler will ensure that the dependency is available in the output bundle. See &lt;a href=&quot;module-variables#module-id-commonjs-&quot;&gt;&lt;code&gt;module.id&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">モジュールのIDを同期的に取得します。コンパイラーは、依存関係が出力バンドルで使用可能であることを確認します。詳細については、&lt;a href=&quot;module-variables#module-id-commonjs-&quot;&gt; &lt;code&gt;module.id&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
