<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="webpack">
    <body>
      <group id="webpack">
        <trans-unit id="a0cb60196f3d5ef223c010b6bc1d8a5b79eee62a" translate="yes" xml:space="preserve">
          <source>Synchronously retrieve the exports from another module. The compiler will ensure that the dependency is available in the output bundle.</source>
          <target state="translated">他のモジュールからのエクスポートを同期的に取得します。コンパイラは、依存関係が出力バンドルで利用可能であることを確認します。</target>
        </trans-unit>
        <trans-unit id="2db728216720705fa5f530d0d1a1de00c43e5eb0" translate="yes" xml:space="preserve">
          <source>TODO:</source>
          <target state="translated">TODO:</target>
        </trans-unit>
        <trans-unit id="4d795e4cf5fa1aaecdf870a34e0202ec5f468b04" translate="yes" xml:space="preserve">
          <source>Take caution when installing these bleeding edge releases! They may still contain bugs and therefore should not be used in production.</source>
          <target state="translated">これらのブリーディングエッジリリースをインストールする際には注意してください! これらのリリースにはまだバグが含まれている可能性がありますので、本番では使用しないでください。</target>
        </trans-unit>
        <trans-unit id="f8315068ea71991e2dfa9c8df96ee0db2c0f4771" translate="yes" xml:space="preserve">
          <source>Tapable</source>
          <target state="translated">Tapable</target>
        </trans-unit>
        <trans-unit id="61ad50a9b9189cc3cf1874568e35e7901ff4c982" translate="yes" xml:space="preserve">
          <source>Target</source>
          <target state="translated">Target</target>
        </trans-unit>
        <trans-unit id="2478527eeae38abf9fca0c3ca3badc4eff20092a" translate="yes" xml:space="preserve">
          <source>Target of compilation. Passed from configuration options.</source>
          <target state="translated">コンパイルの対象。設定オプションから渡されます。</target>
        </trans-unit>
        <trans-unit id="2d8a95e4db20a5baed4f682053222211756aa583" translate="yes" xml:space="preserve">
          <source>Targeted modules of this loader must export either a &lt;code&gt;Function&lt;/code&gt; or &lt;code&gt;Promise&lt;/code&gt; that returns an object containing a &lt;code&gt;code&lt;/code&gt; property at a minimum, but can contain any number of additional properties.</source>
          <target state="translated">このローダーのターゲットモジュールは、少なくとも &lt;code&gt;code&lt;/code&gt; プロパティを含むオブジェクトを返す &lt;code&gt;Function&lt;/code&gt; または &lt;code&gt;Promise&lt;/code&gt; いずれかをエクスポートする必要がありますが、追加のプロパティをいくつでも含めることができます。</target>
        </trans-unit>
        <trans-unit id="d35260a00f655f27edcc35a7eb16da44a4f671a6" translate="yes" xml:space="preserve">
          <source>Targets</source>
          <target state="translated">Targets</target>
        </trans-unit>
        <trans-unit id="45471e9213df8d8312d92d340acd4ec7518b19db" translate="yes" xml:space="preserve">
          <source>Technically, &lt;code&gt;NODE_ENV&lt;/code&gt; is a system environment variable that Node.js exposes into running scripts. It is used by convention to determine dev-vs-prod behavior by server tools, build scripts, and client-side libraries. Contrary to expectations, &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; is not set to &lt;code&gt;&quot;production&quot;&lt;/code&gt;&lt;strong&gt;within&lt;/strong&gt; the build script &lt;code&gt;webpack.config.js&lt;/code&gt;, see &lt;a href=&quot;https://github.com/webpack/webpack/issues/2537&quot;&gt;#2537&lt;/a&gt;. Thus, conditionals like &lt;code&gt;process.env.NODE_ENV === 'production' ? '[name].[hash].bundle.js' : '[name].bundle.js'&lt;/code&gt; within webpack configurations do not work as expected.</source>
          <target state="translated">技術的には、 &lt;code&gt;NODE_ENV&lt;/code&gt; は、Node.jsが実行中のスクリプトに公開するシステム環境変数です。慣例により、サーバーツール、ビルドスクリプト、およびクライアント側ライブラリによるdev-vs-prodの動作を決定するために使用されます。予想に反して、ビルドスクリプト &lt;code&gt;webpack.config.js&lt;/code&gt; &lt;strong&gt;内&lt;/strong&gt;で &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; が &lt;code&gt;&quot;production&quot;&lt;/code&gt; に設定されていません。&lt;a href=&quot;https://github.com/webpack/webpack/issues/2537&quot;&gt;＃2537を&lt;/a&gt;参照してください。したがって、 &lt;code&gt;process.env.NODE_ENV === 'production' ? '[name].[hash].bundle.js' : '[name].bundle.js'&lt;/code&gt; ような条件？'[name]。[hash] .bundle.js'： Webpack構成内の'[name] .bundle.js'が期待どおりに機能しません。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e370f5ffe24ac7d3c786805283b6450e6061395b" translate="yes" xml:space="preserve">
          <source>Tell the server to watch the files served by the &lt;code&gt;devServer.contentBase&lt;/code&gt; option. File changes will trigger a full page reload.</source>
          <target state="translated">&lt;code&gt;devServer.contentBase&lt;/code&gt; オプションによって提供されるファイルを監視するようサーバーに指示します。ファイルを変更すると、ページ全体が再読み込みされます。</target>
        </trans-unit>
        <trans-unit id="8eaf46561f2c82818e5487f1fad2c2c1a9b03109" translate="yes" xml:space="preserve">
          <source>Tell the server where to serve content from. This is only necessary if you want to serve static files. &lt;a href=&quot;#devserver-publicpath-&quot;&gt;&lt;code&gt;devServer.publicPath&lt;/code&gt;&lt;/a&gt; will be used to determine where the bundles should be served from, and takes precedence.</source>
          <target state="translated">コンテンツの提供元をサーバーに伝えます。これは、静的ファイルを提供する場合にのみ必要です。&lt;a href=&quot;#devserver-publicpath-&quot;&gt; &lt;code&gt;devServer.publicPath&lt;/code&gt; &lt;/a&gt;は、バンドルの提供元を決定するために使用され、優先されます。</target>
        </trans-unit>
        <trans-unit id="6eed8e8f3698f73914c4b5b2e893f7b06987d73d" translate="yes" xml:space="preserve">
          <source>Tell webpack to minimize the bundle using the &lt;a href=&quot;../plugins/uglifyjs-webpack-plugin&quot;&gt;UglifyjsWebpackPlugin&lt;/a&gt;.</source>
          <target state="translated">UglifyjsWebpackPluginを使用してバンドルを最小化するように&lt;a href=&quot;../plugins/uglifyjs-webpack-plugin&quot;&gt;webpackに指示し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="e4addd77c60356ceaa8d70fc96c0d83183363874" translate="yes" xml:space="preserve">
          <source>Tell webpack to remove a module from the module instance cache (&lt;code&gt;require.cache&lt;/code&gt;) if it throws an exception when it is &lt;code&gt;require&lt;/code&gt;d.</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; なときに例外をスローする場合、モジュールインスタンスキャッシュ（ &lt;code&gt;require.cache&lt;/code&gt; ）からモジュールを削除するようにwebpackに指示します。</target>
        </trans-unit>
        <trans-unit id="ad1cc548590d63ecaaf377363e425ba51831d6f1" translate="yes" xml:space="preserve">
          <source>Tell webpack what directories should be searched when resolving modules.</source>
          <target state="translated">モジュールを解決する際にどのディレクトリを検索すべきかを webpack に指示します。</target>
        </trans-unit>
        <trans-unit id="002f265592e0a31a76086e3fa4ac479ad83d1202" translate="yes" xml:space="preserve">
          <source>Tells the &lt;a href=&quot;https://github.com/webpack/loader-runner&quot;&gt;loader-runner&lt;/a&gt; that the loader intends to call back asynchronously. Returns &lt;code&gt;this.callback&lt;/code&gt;.</source>
          <target state="translated">ローダーが非同期でコールバックするつもりであることをローダー&lt;a href=&quot;https://github.com/webpack/loader-runner&quot;&gt;ランナーに&lt;/a&gt;伝えます。 &lt;code&gt;this.callback&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="678849cdcfae499dc3bf39b28e35e9ed9493aec2" translate="yes" xml:space="preserve">
          <source>Tells webpack to detect and remove chunks which are empty. Setting &lt;code&gt;optimization.removeEmptyChunks&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; will disable this optimization.</source>
          <target state="translated">空のチャンクを検出して削除するようにwebpackに指示します。 &lt;code&gt;optimization.removeEmptyChunks&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定すると、この最適化が無効になります。</target>
        </trans-unit>
        <trans-unit id="5ff451f631199311fa712e6d24be429e485ab51b" translate="yes" xml:space="preserve">
          <source>Tells webpack to detect and remove modules from chunks when these modules are already included in all parents. Setting &lt;code&gt;optimization.removeAvailableModules&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; will disable this optimization.</source>
          <target state="translated">これらのモジュールがすべての親にすでに含まれている場合、チャンクからモジュールを検出して削除するようにwebpackに指示します。 &lt;code&gt;optimization.removeAvailableModules&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定すると、この最適化が無効になります。</target>
        </trans-unit>
        <trans-unit id="4d555ade81cd8447fdc4e7d090f9249ae596d436" translate="yes" xml:space="preserve">
          <source>Tells webpack to determine and flag chunks which are subsets of other chunks in a way that subsets don&amp;rsquo;t have to be loaded when the bigger chunk has been already loaded. By default &lt;code&gt;optimization.flagIncludedChunks&lt;/code&gt; is enabled in &lt;code&gt;production&lt;/code&gt;&lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt; and disabled elsewise.</source>
          <target state="translated">大きいチャンクが既にロードされている場合にサブセットをロードする必要がないように、他のチャンクのサブセットであるチャンクを判別してフラグを付けるようにWebpackに指示します。デフォルトでは、 &lt;code&gt;optimization.flagIncludedChunks&lt;/code&gt; は &lt;code&gt;production&lt;/code&gt; &lt;a href=&quot;../concepts/mode&quot;&gt;モードで&lt;/a&gt;有効になっており、それ以外の場合は無効になっています。</target>
        </trans-unit>
        <trans-unit id="49b0cf198c848627a5a85418a4e575b1c5ef1e2c" translate="yes" xml:space="preserve">
          <source>Tells webpack to determine used exports for each module. This depends on &lt;a href=&quot;#optimization-occurrenceorder&quot;&gt;&lt;code&gt;optimization.providedExports&lt;/code&gt;&lt;/a&gt;. Information collected by &lt;code&gt;optimization.usedExports&lt;/code&gt; is used by other optimizations or code generation i.e. exports are not generated for unused exports, export names are mangled to single char identifiers when all usages are compatible. Dead code elimination in minimizers will benefit from this and can remove unused exports. By default &lt;code&gt;optimization.usedExports&lt;/code&gt; is enabled in &lt;code&gt;production&lt;/code&gt;&lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt; and disabled elsewise.</source>
          <target state="translated">各モジュールの使用済みエクスポートを判別するようにwebpackに指示します。これは、&lt;a href=&quot;#optimization-occurrenceorder&quot;&gt; &lt;code&gt;optimization.providedExports&lt;/code&gt; に&lt;/a&gt;依存します。 &lt;code&gt;optimization.usedExports&lt;/code&gt; によって収集された情報は、他の最適化またはコード生成で使用されます。つまり、未使用のエクスポートではエクスポートは生成されず、すべての使用法に互換性がある場合、エクスポート名は単一の文字識別子に変換されます。ミニマイザーでのデッドコードの除去はこれから利益を得て、未使用のエクスポートを削除できます。デフォルトでは、 &lt;code&gt;optimization.usedExports&lt;/code&gt; は &lt;code&gt;production&lt;/code&gt; &lt;a href=&quot;../concepts/mode&quot;&gt;モードで&lt;/a&gt;有効になっており、それ以外の場合は無効になっています。</target>
        </trans-unit>
        <trans-unit id="53346d778cc236a954ab23a350d012de81c68945" translate="yes" xml:space="preserve">
          <source>Tells webpack to figure out an order of modules which will result in the smallest initial bundle. By default &lt;code&gt;optimization.occurrenceOrder&lt;/code&gt; is enabled in &lt;code&gt;production&lt;/code&gt;&lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt; and disabled elsewise.</source>
          <target state="translated">最小の初期バンドルになるモジュールの順序を把握するようにwebpackに指示します。デフォルトでは、 &lt;code&gt;optimization.occurrenceOrder&lt;/code&gt; は &lt;code&gt;production&lt;/code&gt; &lt;a href=&quot;../concepts/mode&quot;&gt;モードで&lt;/a&gt;有効になっており、それ以外の場合は無効になっています。</target>
        </trans-unit>
        <trans-unit id="767b81cab8dc96a3bac18a6ba2b717cfba1c8930" translate="yes" xml:space="preserve">
          <source>Tells webpack to figure out which exports are provided by modules to generate more efficient code for &lt;code&gt;export * from ...&lt;/code&gt;. By default &lt;code&gt;optimization.providedExports&lt;/code&gt; is enabled.</source>
          <target state="translated">&lt;code&gt;export * from ...&lt;/code&gt; するためのより効率的なコードを生成するために、モジュールによって提供されるエクスポートを把握するようにwebpackに指示します。デフォルトでは、 &lt;code&gt;optimization.providedExports&lt;/code&gt; は有効になっています。</target>
        </trans-unit>
        <trans-unit id="3471cdb0c7bb551a61a5f66be480922f5f06b708" translate="yes" xml:space="preserve">
          <source>Tells webpack to find segments of the module graph which can be safely concatenated into a single module. Depends on &lt;a href=&quot;#optimization-providedexports&quot;&gt;&lt;code&gt;optimization.providedExports&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#optimization-usedexports&quot;&gt;&lt;code&gt;optimization.usedExports&lt;/code&gt;&lt;/a&gt;. By default &lt;code&gt;optimization.concatenateModules&lt;/code&gt; is enabled in &lt;code&gt;production&lt;/code&gt;&lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt; and disabled elsewise.</source>
          <target state="translated">安全に連結して単一のモジュールにできるモジュールグラフのセグメントを見つけるようにwebpackに指示します。&lt;a href=&quot;#optimization-providedexports&quot;&gt; &lt;code&gt;optimization.providedExports&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#optimization-usedexports&quot;&gt; &lt;code&gt;optimization.usedExports&lt;/code&gt; に&lt;/a&gt;依存します。デフォルトでは、 &lt;code&gt;optimization.concatenateModules&lt;/code&gt; は &lt;code&gt;production&lt;/code&gt; &lt;a href=&quot;../concepts/mode&quot;&gt;モードで&lt;/a&gt;有効になっており、それ以外の場合は無効になっています。</target>
        </trans-unit>
        <trans-unit id="35aec2c0f0349e1f86c07ebb33883970eccbfd46" translate="yes" xml:space="preserve">
          <source>Tells webpack to include comments in bundles with information about the contained modules. This option defaults to &lt;code&gt;true&lt;/code&gt; in &lt;code&gt;development&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; in &lt;code&gt;production&lt;/code&gt;&lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt; respectively.</source>
          <target state="translated">含まれているモジュールに関する情報を含むコメントをバンドルに含めるようにwebpackに指示します。このオプションのデフォルトは &lt;code&gt;true&lt;/code&gt; で &lt;code&gt;development&lt;/code&gt; し、 &lt;code&gt;false&lt;/code&gt; で &lt;code&gt;production&lt;/code&gt; &lt;a href=&quot;../concepts/mode&quot;&gt;モード&lt;/a&gt;それぞれ。</target>
        </trans-unit>
        <trans-unit id="e51482cc3f1d2bedf8bced5bba0c82b5d42c230b" translate="yes" xml:space="preserve">
          <source>Tells webpack to merge chunks which contain the same modules. Setting &lt;code&gt;optimization.mergeDuplicateChunks&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; will disable this optimization.</source>
          <target state="translated">同じモジュールを含むチャンクをマージするようにwebpackに指示します。 &lt;code&gt;optimization.mergeDuplicateChunks&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定すると、この最適化が無効になります。</target>
        </trans-unit>
        <trans-unit id="b58296314b274ed9f5e0ac6d182c74666bcd178f" translate="yes" xml:space="preserve">
          <source>Tells webpack to recognise the &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/examples/side-effects/README.md&quot;&gt;&lt;code&gt;sideEffects&lt;/code&gt;&lt;/a&gt; flag in &lt;code&gt;package.json&lt;/code&gt; or rules to skip over modules which are flagged to contain no side effects when exports are not used.</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; の&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/examples/side-effects/README.md&quot;&gt; &lt;code&gt;sideEffects&lt;/code&gt; &lt;/a&gt;フラグを認識するようにwebpackに指示するか、エクスポートが使用されていない場合に副作用を含まないとフラグが設定されているモジュールをスキップするルールを指定します。</target>
        </trans-unit>
        <trans-unit id="29f35228e53a433d0b2ca4e42a82a658b3ba86ed" translate="yes" xml:space="preserve">
          <source>Tells webpack to set &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; to a given string value. &lt;code&gt;optimization.nodeEnv&lt;/code&gt; uses &lt;a href=&quot;../plugins/define-plugin&quot;&gt;DefinePlugin&lt;/a&gt; unless set to &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;optimization.nodeEnv&lt;/code&gt;&lt;strong&gt;defaults&lt;/strong&gt; to &lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt; if set, else falls back to &lt;code&gt;&quot;production&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;process.env.NODE_ENV&lt;/code&gt; を指定された文字列値に設定するようにwebpackに指示します。 &lt;code&gt;optimization.nodeEnv&lt;/code&gt; は、 &lt;code&gt;false&lt;/code&gt; に設定されていない限り、&lt;a href=&quot;../plugins/define-plugin&quot;&gt;DefinePluginを&lt;/a&gt;使用します。&lt;strong&gt;設定さ&lt;/strong&gt;れている場合、 &lt;code&gt;optimization.nodeEnv&lt;/code&gt; は&lt;strong&gt;デフォルト&lt;/strong&gt;で&lt;a href=&quot;../concepts/mode&quot;&gt;モードに&lt;/a&gt;&lt;strong&gt;なり&lt;/strong&gt;、そうでない場合は &lt;code&gt;&quot;production&quot;&lt;/code&gt; にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="5c2c5b8993daed03b59d36b12cfb045e9697ee0b" translate="yes" xml:space="preserve">
          <source>Tells webpack to use readable chunk identifiers for better debugging. This option is enabled by default for &lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt;&lt;code&gt;development&lt;/code&gt; and disabled for &lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt;&lt;code&gt;production&lt;/code&gt; if no option is provided in webpack config.</source>
          <target state="translated">デバッグを改善するために、読み取り可能なチャンク識別子を使用するようにwebpackに指示します。このオプションは、&lt;a href=&quot;../concepts/mode&quot;&gt;モード&lt;/a&gt; &lt;code&gt;development&lt;/code&gt; デフォルトで有効になっており、webpack構成でオプションが指定されていない場合は&lt;a href=&quot;../concepts/mode&quot;&gt;モード&lt;/a&gt; &lt;code&gt;production&lt;/code&gt; 無効になります。</target>
        </trans-unit>
        <trans-unit id="0f2f2c942de55c59c53a2f31de1a4dd6e58cd92e" translate="yes" xml:space="preserve">
          <source>Tells webpack to use readable module identifiers for better debugging. When &lt;code&gt;optimization.namedModules&lt;/code&gt; is not set in webpack config, webpack will enable it by default for &lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt;&lt;code&gt;development&lt;/code&gt; and disable for &lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt;&lt;code&gt;production&lt;/code&gt;.</source>
          <target state="translated">デバッグを改善するために、読み取り可能なモジュール識別子を使用するようにwebpackに指示します。 &lt;code&gt;optimization.namedModules&lt;/code&gt; がwebpack configで設定されていない場合、webpackはデフォルトで&lt;a href=&quot;../concepts/mode&quot;&gt;モード&lt;/a&gt; &lt;code&gt;development&lt;/code&gt; では有効にし、&lt;a href=&quot;../concepts/mode&quot;&gt;モード&lt;/a&gt; &lt;code&gt;production&lt;/code&gt; 無効にします。</target>
        </trans-unit>
        <trans-unit id="3ec1ae061c27325c7ecb543adf91235e22cbc9ed" translate="yes" xml:space="preserve">
          <source>Template</source>
          <target state="translated">Template</target>
        </trans-unit>
        <trans-unit id="200be3445e2bde1ede81d4c95d33bd1076a8277f" translate="yes" xml:space="preserve">
          <source>Templating</source>
          <target state="translated">Templating</target>
        </trans-unit>
        <trans-unit id="f8dcbd31ecdaba6d4d938252d7d557647540e187" translate="yes" xml:space="preserve">
          <source>Terser minify options.</source>
          <target state="translated">Terserのminifyオプション。</target>
        </trans-unit>
        <trans-unit id="cca680f3e51dedd055b5b7479ead7486d3946d3b" translate="yes" xml:space="preserve">
          <source>TerserWebpackPlugin</source>
          <target state="translated">TerserWebpackPlugin</target>
        </trans-unit>
        <trans-unit id="cb1dc79df1cb9310379fcd3a272451d5d79e44e9" translate="yes" xml:space="preserve">
          <source>Test all loaded modules for updates and, if updates exist, &lt;code&gt;apply&lt;/code&gt; them.</source>
          <target state="translated">ロードされたすべてのモジュールの更新をテストし、更新が存在する場合は &lt;code&gt;apply&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="18180da60ee4b39df19792be2645538d6c578338" translate="yes" xml:space="preserve">
          <source>Test to match files against</source>
          <target state="translated">ファイルとファイルを一致させるためのテスト</target>
        </trans-unit>
        <trans-unit id="fae6e75610ee85d5156a1dc129b2d22f8fb6fe80" translate="yes" xml:space="preserve">
          <source>Test to match files against.</source>
          <target state="translated">ファイルを照合するためのテスト。</target>
        </trans-unit>
        <trans-unit id="39fdec1194d94212b871a28b2aa04a73cd40fce1" translate="yes" xml:space="preserve">
          <source>Tests</source>
          <target state="translated">Tests</target>
        </trans-unit>
        <trans-unit id="5f768c28a658c6bc08900e35d9efed4bd2ce04c9" translate="yes" xml:space="preserve">
          <source>Thanks to Javier (&lt;a href=&quot;https://github.com/vieron&quot;&gt;@vieron&lt;/a&gt;) for authoring this plugin.</source>
          <target state="translated">このプラグインを作成してくれたJavier（&lt;a href=&quot;https://github.com/vieron&quot;&gt;@vieron&lt;/a&gt;）に感謝します。</target>
        </trans-unit>
        <trans-unit id="16f1b9980bfe0cab0829dfb2682d18033b865745" translate="yes" xml:space="preserve">
          <source>That's all you need. Since we're already using the &lt;code&gt;DefinePlugin&lt;/code&gt; on our configuration, &lt;code&gt;process.env.ASSET_PATH&lt;/code&gt; will always be defined so we can safely do that.</source>
          <target state="translated">それで十分です。この構成では既に &lt;code&gt;DefinePlugin&lt;/code&gt; を使用しているため、 &lt;code&gt;process.env.ASSET_PATH&lt;/code&gt; は常に定義されるため、安全に実行できます。</target>
        </trans-unit>
        <trans-unit id="5aed75fadc485a43ba5d84a71779dcd723dd4182" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#rule-enforce&quot;&gt;&lt;code&gt;enforce&lt;/code&gt;&lt;/a&gt; property affects the loader category. Whether it's a normal, pre- or post- loader.</source>
          <target state="translated">&lt;a href=&quot;#rule-enforce&quot;&gt; &lt;code&gt;enforce&lt;/code&gt; &lt;/a&gt;プロパティは、ローダーカテゴリに影響を与えます。それが通常のローダーか、プリローダーかポストローダーか。</target>
        </trans-unit>
        <trans-unit id="e63386709206a80b9a4b95abfe8e4511c665fc19" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#rule-parser&quot;&gt;&lt;code&gt;parser&lt;/code&gt;&lt;/a&gt; property affects the parser options.</source>
          <target state="translated">&lt;a href=&quot;#rule-parser&quot;&gt; &lt;code&gt;parser&lt;/code&gt; &lt;/a&gt;プロパティはパーサのオプションに影響を与えます。</target>
        </trans-unit>
        <trans-unit id="984f0c2ce0cdc62b5cb0946806fd79297dc76335" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../configuration/target&quot;&gt;targeted&lt;/a&gt; execution environment</source>
          <target state="translated">&lt;a href=&quot;../configuration/target&quot;&gt;目標と&lt;/a&gt;実行環境</target>
        </trans-unit>
        <trans-unit id="65096c8d5d07c0fb9a0318f78ab4250c620ce1b5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../loaders/script-loader&quot;&gt;&lt;code&gt;script-loader&lt;/code&gt;&lt;/a&gt; evaluates code in the global context, similar to inclusion via a &lt;code&gt;script&lt;/code&gt; tag. In this mode, every normal library should work. &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;module&lt;/code&gt;, etc. are undefined.</source>
          <target state="translated">&lt;a href=&quot;../loaders/script-loader&quot;&gt; &lt;code&gt;script-loader&lt;/code&gt; &lt;/a&gt;介して含めると同様グローバルコンテキストでコードを評価する &lt;code&gt;script&lt;/code&gt; タグ。このモードでは、すべての通常のライブラリが機能します。 &lt;code&gt;require&lt;/code&gt; 、 &lt;code&gt;module&lt;/code&gt; などは未定義です。</target>
        </trans-unit>
        <trans-unit id="73fd6aaf9d6e2fa659d002e4ff65bdd6d7bf958e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../plugins/commons-chunk-plugin&quot;&gt;&lt;code&gt;CommonsChunkPlugin&lt;/code&gt;&lt;/a&gt; is also used to split vendor modules from core application code using &lt;a href=&quot;../plugins/commons-chunk-plugin#explicit-vendor-chunk&quot;&gt;explicit vendor chunks&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../plugins/commons-chunk-plugin&quot;&gt; &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; は&lt;/a&gt;また、使用してコアアプリケーションコードから分割ベンダーモジュールに使用される&lt;a href=&quot;../plugins/commons-chunk-plugin#explicit-vendor-chunk&quot;&gt;明示的なベンダーチャンク&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="03d0dd7e91926471fe0f29a0fdc35aea2f423d79" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../plugins/provide-plugin&quot;&gt;&lt;code&gt;ProvidePlugin&lt;/code&gt;&lt;/a&gt; makes a package available as a variable in every module compiled through webpack. If webpack sees that variable used, it will include the given package in the final bundle. Let's go ahead by removing the &lt;code&gt;import&lt;/code&gt; statement for &lt;code&gt;lodash&lt;/code&gt; and instead providing it via the plugin:</source>
          <target state="translated">&lt;a href=&quot;../plugins/provide-plugin&quot;&gt; &lt;code&gt;ProvidePlugin&lt;/code&gt; は&lt;/a&gt; WebPACKの通過コンパイルすべてのモジュール内の変数として利用可能なパッケージになります。その変数が使用されていることをwebpackが確認した場合、指定されたパッケージが最終的なバンドルに含まれます。 &lt;code&gt;lodash&lt;/code&gt; の &lt;code&gt;import&lt;/code&gt; ステートメントを削除して、代わりにプラグインを介して提供してみましょう。</target>
        </trans-unit>
        <trans-unit id="1e2a49bbe348f32531395726882d0edadf5b7798" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;&lt;code&gt;SplitChunks&lt;/code&gt;&lt;/a&gt; allows us to extract common dependencies into an existing entry chunk or an entirely new chunk. Let's use this to de-duplicate the &lt;code&gt;lodash&lt;/code&gt; dependency from the previous example:</source>
          <target state="translated">&lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt; &lt;code&gt;SplitChunks&lt;/code&gt; は、&lt;/a&gt;私たちは既存のエントリチャンクまたは完全に新しいチャンクに共通の依存関係を抽出することができます。これを使用して、前の例から &lt;code&gt;lodash&lt;/code&gt; 依存関係を重複排除します。</target>
        </trans-unit>
        <trans-unit id="0dea7e34dbdd9c4b5a070e1afdd0a51fda969ff2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli&quot;&gt;webpack CLI&lt;/a&gt; uses this information to display nicely formatted output in your console.</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;WebPACKののCLIは、&lt;/a&gt;コンソールできれいにフォーマットされた出力を表示するには、この情報を使用しています。</target>
        </trans-unit>
        <trans-unit id="172e8069c798268e6ac5af79ba1c2895a1cbf705" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt; statements have been standardized in &lt;a href=&quot;https://babeljs.io/learn-es2015/&quot;&gt;ES2015&lt;/a&gt; and &lt;a href=&quot;https://caniuse.com/#search=modules&quot;&gt;are supported in most browsers&lt;/a&gt;. Some older browsers still lag behind but webpack supports modules out of the box.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export&quot;&gt; &lt;code&gt;export&lt;/code&gt; &lt;/a&gt;文はでは標準化されてい&lt;a href=&quot;https://babeljs.io/learn-es2015/&quot;&gt;ES2015&lt;/a&gt;と&lt;a href=&quot;https://caniuse.com/#search=modules&quot;&gt;、ほとんどのブラウザでサポートされています&lt;/a&gt;。一部の古いブラウザはまだ遅れていますが、webpackはそのままモジュールをサポートします。</target>
        </trans-unit>
        <trans-unit id="5b464e9919940e8342cebed4d751a8883d9f4d56" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/Cryptographic_hash_function&quot;&gt;digest&lt;/a&gt; that the hash function should use. Valid values include: base26, base32, base36, base49, base52, base58, base62, base64, and hex.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Cryptographic_hash_function&quot;&gt;ダイジェスト&lt;/a&gt;ハッシュ関数を使用する必要があります。有効な値は、base26、base32、base36、base49、base52、base58、base62、base64、およびhexです。</target>
        </trans-unit>
        <trans-unit id="2a0d507b74b1361bbb471f7da349d2e25a854d48" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin&quot;&gt;&lt;code&gt;HtmlWebpackPlugin&lt;/code&gt;&lt;/a&gt; simplifies creation of HTML files to serve your webpack bundles. This is especially useful for webpack bundles that include a hash in the filename which changes every compilation. You can either let the plugin generate an HTML file for you, supply your own template using &lt;a href=&quot;https://lodash.com/docs#template&quot;&gt;lodash templates&lt;/a&gt;, or use your own &lt;a href=&quot;https://webpack.js.org/loaders&quot;&gt;loader&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin&quot;&gt; &lt;code&gt;HtmlWebpackPlugin&lt;/code&gt; &lt;/a&gt; HTMLの簡素化作成はあなたのWebPACKのバンドルを提供するファイル。これは、すべてのコンパイルを変更するハッシュをファイル名に含むwebpackバンドルで特に役立ちます。プラグインにHTMLファイルを生成させるか、&lt;a href=&quot;https://lodash.com/docs#template&quot;&gt;lodashテンプレート&lt;/a&gt;を使用して独自のテンプレートを提供するか、独自の&lt;a href=&quot;https://webpack.js.org/loaders&quot;&gt;ローダーを&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="88bb274fd4fe206846ce7f3e91467f530bc06a11" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/webpack-contrib/karma-webpack&quot;&gt;&lt;code&gt;karma-webpack&lt;/code&gt;&lt;/a&gt; package allows you to use webpack to pre-process files in &lt;a href=&quot;http://karma-runner.github.io/1.0/index.html&quot;&gt;Karma&lt;/a&gt;. It also makes use of &lt;a href=&quot;https://github.com/webpack/webpack-dev-middleware&quot;&gt;&lt;code&gt;webpack-dev-middleware&lt;/code&gt;&lt;/a&gt; and allows passing configurations for both. A simple example may look something like this:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/webpack-contrib/karma-webpack&quot;&gt; &lt;code&gt;karma-webpack&lt;/code&gt; &lt;/a&gt;パッケージには、内のファイルのプリプロセスのWebPACKを使用することができます&lt;a href=&quot;http://karma-runner.github.io/1.0/index.html&quot;&gt;カルマ&lt;/a&gt;。また、&lt;a href=&quot;https://github.com/webpack/webpack-dev-middleware&quot;&gt; &lt;code&gt;webpack-dev-middleware&lt;/code&gt; &lt;/a&gt;を利用し、両方の構成を渡すことができます。簡単な例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="1ca847605a463d73a62672d6de824616533f7c10" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/zinserjan/mocha-webpack&quot;&gt;&lt;code&gt;mocha-webpack&lt;/code&gt;&lt;/a&gt; utility can be used for a clean integration with Mocha. The repository offers more details on the pros and cons but essentially &lt;code&gt;mocha-webpack&lt;/code&gt; is a simple wrapper that provides almost the same CLI as Mocha itself and provides various webpack functionality like an improved watch mode and improved path resolution. Here is a small example of how you would install it and use it to run a test suite (found within &lt;code&gt;./test&lt;/code&gt;):</source>
          <target state="translated">&lt;a href=&quot;https://github.com/zinserjan/mocha-webpack&quot;&gt; &lt;code&gt;mocha-webpack&lt;/code&gt; &lt;/a&gt;ユーティリティは、モカできれいに統合するために使用することができます。リポジトリは賛否両論の詳細を提供しますが、本質的に &lt;code&gt;mocha-webpack&lt;/code&gt; は、Mocha自体とほぼ同じCLIを提供し、改善された監視モードや改善されたパス解決などのさまざまなwebpack機能を提供するシンプルなラッパーです。これをインストールし、それを使用してテストスイートを実行する方法の小さな例を次に示します（ &lt;code&gt;./test&lt;/code&gt; 内にあります）：</target>
        </trans-unit>
        <trans-unit id="0c507e93dd92050022154621cc61d736d4327733" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://nodejs.org/api/all.html#modules_require_resolve&quot;&gt;&lt;code&gt;require.resolve&lt;/code&gt;&lt;/a&gt; call is a Node.js function (unrelated to &lt;code&gt;require.resolve&lt;/code&gt; in webpack processing). &lt;code&gt;require.resolve&lt;/code&gt; gives you the absolute path to the module (&lt;code&gt;&quot;/.../app/node_modules/react/react.js&quot;&lt;/code&gt;). So the expose only applies to the react module. And it's only exposed when used in the bundle.</source>
          <target state="translated">&lt;a href=&quot;https://nodejs.org/api/all.html#modules_require_resolve&quot;&gt; &lt;code&gt;require.resolve&lt;/code&gt; の&lt;/a&gt;呼び出しは（とは無関係のNode.js関数である &lt;code&gt;require.resolve&lt;/code&gt; WebPACKの処理で）。 &lt;code&gt;require.resolve&lt;/code&gt; はモジュールへの絶対パスを提供します（ &lt;code&gt;&quot;/.../app/node_modules/react/react.js&quot;&lt;/code&gt; ）。したがって、公開はreactモジュールにのみ適用されます。また、バンドルで使用した場合にのみ公開されます。</target>
        </trans-unit>
        <trans-unit id="f2bbd217d1f4c8709483289baec1094e4af77573" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://whatwg.github.io/loader/&quot;&gt;ES2015 Loader spec&lt;/a&gt; defines &lt;code&gt;import()&lt;/code&gt; as method to load ES2015 modules dynamically on runtime.</source>
          <target state="translated">&lt;a href=&quot;https://whatwg.github.io/loader/&quot;&gt;ES2015ローダ仕様&lt;/a&gt;定義は &lt;code&gt;import()&lt;/code&gt; 実行時に動的にES2015モジュールをロードするための方法として。</target>
        </trans-unit>
        <trans-unit id="1d4ceea676a0dc4f72c17f6c8e79b7333f549174" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'commonjs ' + request&lt;/code&gt; defines the type of module that needs to be externalized.</source>
          <target state="translated">&lt;code&gt;'commonjs ' + request&lt;/code&gt; ニーズが外部化することモジュールのタイプを定義します。</target>
        </trans-unit>
        <trans-unit id="8e28c37fb671c088eac2ae6cc1422587c9c06286" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--env&lt;/code&gt; argument accepts various syntaxes:</source>
          <target state="translated">&lt;code&gt;--env&lt;/code&gt; 引数には、様々な構文を受け付けます。</target>
        </trans-unit>
        <trans-unit id="468a640ae6f8d45f738ff5d3259257ff8609ccf5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--json &amp;gt; compilation-stats.json&lt;/code&gt; flag indicates to webpack that it should emit the &lt;code&gt;compilation-stats.json&lt;/code&gt; containing the dependency graph and various other build information. Typically, the &lt;code&gt;--profile&lt;/code&gt; flag is also added so that a &lt;code&gt;profile&lt;/code&gt; section is added to each &lt;a href=&quot;#module-objects&quot;&gt;&lt;code&gt;modules&lt;/code&gt; object&lt;/a&gt; containing module-specific compilation stats.</source>
          <target state="translated">&lt;code&gt;--json &amp;gt; compilation-stats.json&lt;/code&gt; フラグは、それが放出する必要があることをWebPACKのために示して &lt;code&gt;compilation-stats.json&lt;/code&gt; 依存グラフおよび様々な他のビルド情報を含有します。通常、-- &lt;code&gt;--profile&lt;/code&gt; フラグも追加されるため、モジュール固有のコンパイル統計を含む各&lt;a href=&quot;#module-objects&quot;&gt; &lt;code&gt;modules&lt;/code&gt; &lt;/a&gt;オブジェクトに &lt;code&gt;profile&lt;/code&gt; セクションが追加されます。</target>
        </trans-unit>
        <trans-unit id="6c70e73b803827a95816e2c064e16a024ac534a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--profile&lt;/code&gt; option captures timing information for each step of the compilation and includes this in the output.</source>
          <target state="translated">&lt;code&gt;--profile&lt;/code&gt; オプションキャプチャは、コンパイルの各ステップのタイミング情報を出力して、これを含んでいます。</target>
        </trans-unit>
        <trans-unit id="0c35b3fcaf6ac18ef5f8234261238cae474e94ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AutomaticPrefetchPlugin&lt;/code&gt; discovers &lt;strong&gt;all modules&lt;/strong&gt; from the previous compilation upfront while watching for changes, trying to improve the incremental build times. Compared to &lt;a href=&quot;prefetch-plugin&quot;&gt;&lt;code&gt;PrefetchPlugin&lt;/code&gt;&lt;/a&gt; which discovers a &lt;strong&gt;single module&lt;/strong&gt; upfront.</source>
          <target state="translated">&lt;code&gt;AutomaticPrefetchPlugin&lt;/code&gt; が発見し&lt;strong&gt;、すべてのモジュールを&lt;/strong&gt;変更するために見ながら、インクリメンタルビルド時間を改善しようと、以前のコンパイルの前払いから。&lt;a href=&quot;prefetch-plugin&quot;&gt; &lt;code&gt;PrefetchPlugin&lt;/code&gt; &lt;/a&gt;に&lt;strong&gt;単一のモジュール&lt;/strong&gt;を検出するPrefetchPluginと比較し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="01c891b15ca8f85929028eb5d51f636779e61b69" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; is an opt-in feature that creates a separate file (known as a chunk), consisting of common modules shared between multiple entry points.</source>
          <target state="translated">&lt;code&gt;CommonsChunkPlugin&lt;/code&gt; はオプトイン機能複数のエントリポイントとの間で共有される共通のモジュールからなる、（チャンクとして知られている）別のファイルが作成されています。</target>
        </trans-unit>
        <trans-unit id="c70b8ad61375954fcc9153bfd2c445225bd7e75e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Compilation&lt;/code&gt; class also extends &lt;code&gt;Tapable&lt;/code&gt; and provides the following lifecycle hooks. They can be tapped the same way as compiler hooks:</source>
          <target state="translated">&lt;code&gt;Compilation&lt;/code&gt; クラスも拡張し &lt;code&gt;Tapable&lt;/code&gt; を、以下のライフサイクルフックを提供します。それらはコンパイラフックと同じ方法でタップできます：</target>
        </trans-unit>
        <trans-unit id="73fa0a0250e3aa593b96eb19e97b237fe917e574" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Compilation&lt;/code&gt; module is used by the &lt;code&gt;Compiler&lt;/code&gt; to create new compilations (or builds). A &lt;code&gt;compilation&lt;/code&gt; instance has access to all modules and their dependencies (most of which are circular references). It is the literal compilation of all the modules in the dependency graph of an application. During the compilation phase, modules are loaded, sealed, optimized, chunked, hashed and restored.</source>
          <target state="translated">&lt;code&gt;Compilation&lt;/code&gt; モジュールがで使用される &lt;code&gt;Compiler&lt;/code&gt; 新しいコンピレーションを作成する（またはビルド）。 &lt;code&gt;compilation&lt;/code&gt; インスタンスは、すべてのモジュールとその依存関係（そのほとんどが循環参照している）へのアクセス権を持っています。これは、アプリケーションの依存関係グラフのすべてのモジュールを文字通りコンパイルしたものです。コンパイル段階では、モジュールがロードされ、シールされ、最適化され、チャンク化され、ハッシュされ、復元されます。</target>
        </trans-unit>
        <trans-unit id="9dd316958031d96ce135ceaf6610378edf9a60ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Compiler&lt;/code&gt; module is the main engine that creates a compilation instance with all the options passed through the &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt; or &lt;a href=&quot;node&quot;&gt;Node API&lt;/a&gt;. It extends the &lt;code&gt;Tapable&lt;/code&gt; class in order to register and call plugins. Most user facing plugins are first registered on the &lt;code&gt;Compiler&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Compiler&lt;/code&gt; モジュールは、通過したすべてのオプションでコンパイルインスタンスを作成し、メインエンジンである&lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt;または&lt;a href=&quot;node&quot;&gt;ノードAPI&lt;/a&gt;。プラグインを登録して呼び出すために &lt;code&gt;Tapable&lt;/code&gt; クラスを拡張します。ほとんどのユーザー向けプラグインは、最初に &lt;code&gt;Compiler&lt;/code&gt; 登録されます。</target>
        </trans-unit>
        <trans-unit id="5c434c0055358215a66a00b62876f8493d91a621" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Compiler&lt;/code&gt; supports &lt;a href=&quot;node#watching&quot;&gt;watching&lt;/a&gt; which monitors the file system and recompiles as files change. When in watch mode, the compiler will emit the additional events such as &lt;code&gt;watchRun&lt;/code&gt;, &lt;code&gt;watchClose&lt;/code&gt;, and &lt;code&gt;invalid&lt;/code&gt;. This is typically used in &lt;a href=&quot;../guides/development&quot;&gt;development&lt;/a&gt;, usually under the hood of tools like &lt;code&gt;webpack-dev-server&lt;/code&gt;, so that the developer doesn't need to re-compile manually every time. Watch mode can also be entered via the &lt;a href=&quot;cli#watch-options&quot;&gt;CLI&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Compiler&lt;/code&gt; サポートして&lt;a href=&quot;node#watching&quot;&gt;見てい&lt;/a&gt;たファイルの変更などのファイルシステムと再コンパイルを監視します。監視モードの場合、コンパイラーは &lt;code&gt;watchRun&lt;/code&gt; 、 &lt;code&gt;watchClose&lt;/code&gt; 、および &lt;code&gt;invalid&lt;/code&gt; などの追加のイベントを発行します。これは通常、&lt;a href=&quot;../guides/development&quot;&gt;開発&lt;/a&gt;で使用され、通常は &lt;code&gt;webpack-dev-server&lt;/code&gt; などのツールの内部で使用されるため、開発者は毎回手動で再コンパイルする必要がありません。監視モードには、&lt;a href=&quot;cli#watch-options&quot;&gt;CLI&lt;/a&gt;からも入ることができます。</target>
        </trans-unit>
        <trans-unit id="9de4640dc1cf3d5a03b561edc521bf2fe418e2a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ContextReplacementPlugin&lt;/code&gt; allows you to override the inferred information. There are various ways to configure the plugin:</source>
          <target state="translated">&lt;code&gt;ContextReplacementPlugin&lt;/code&gt; はあなたが推測された情報を上書きすることができます。プラグインを構成するには、さまざまな方法があります。</target>
        </trans-unit>
        <trans-unit id="e2b3dbb477bb74d901776059eefe25b97e65b6b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DefinePlugin&lt;/code&gt; allows you to create global constants which can be configured at &lt;strong&gt;compile&lt;/strong&gt; time. This can be useful for allowing different behavior between development builds and release builds. If you perform logging in your development build but not in the release build you might use a global constant to determine whether logging takes place. That's where &lt;code&gt;DefinePlugin&lt;/code&gt; shines, set it and forget it rules for development and release builds.</source>
          <target state="translated">&lt;code&gt;DefinePlugin&lt;/code&gt; はあなたがで設定することができるグローバル定数を作成することができ&lt;strong&gt;、コンパイル&lt;/strong&gt;時間を。これは、開発ビルドとリリースビルド間で異なる動作を許可する場合に役立ちます。開発ビルドではロギングを実行するがリリースビルドでは実行しない場合は、グローバル定数を使用して、ロギングを実行するかどうかを決定できます。ここで、 &lt;code&gt;DefinePlugin&lt;/code&gt; が輝き、設定し、開発およびリリースビルドのルールを忘れます。</target>
        </trans-unit>
        <trans-unit id="367e8377d371646e4dc3d8685d9a61a01cf7f9d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DllPlugin&lt;/code&gt; and &lt;code&gt;DllReferencePlugin&lt;/code&gt; provide means to split bundles in a way that can drastically improve build time performance.</source>
          <target state="translated">&lt;code&gt;DllPlugin&lt;/code&gt; と &lt;code&gt;DllReferencePlugin&lt;/code&gt; は大幅にビルド時のパフォーマンスを向上させることができる方法でバンドルを分割するための手段を提供します。</target>
        </trans-unit>
        <trans-unit id="557f7aaf93c67ec25d77447cf5baa46aa5b3d28f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EnvironmentPlugin&lt;/code&gt; accepts either an array of keys or an object mapping its keys to their default values.</source>
          <target state="translated">&lt;code&gt;EnvironmentPlugin&lt;/code&gt; は、キーの配列またはそれらのデフォルト値に、そのキーをマッピングするオブジェクトのいずれかを受け付けます。</target>
        </trans-unit>
        <trans-unit id="529504bcf17aec34f1796b4d3aac75440813d169" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EnvironmentPlugin&lt;/code&gt; is shorthand for using the &lt;a href=&quot;define-plugin&quot;&gt;&lt;code&gt;DefinePlugin&lt;/code&gt;&lt;/a&gt; on &lt;a href=&quot;https://nodejs.org/api/process.html#process_process_env&quot;&gt;&lt;code&gt;process.env&lt;/code&gt;&lt;/a&gt; keys.</source>
          <target state="translated">&lt;code&gt;EnvironmentPlugin&lt;/code&gt; は、使用するための省略形です&lt;a href=&quot;define-plugin&quot;&gt; &lt;code&gt;DefinePlugin&lt;/code&gt; を&lt;/a&gt;上&lt;a href=&quot;https://nodejs.org/api/process.html#process_process_env&quot;&gt; &lt;code&gt;process.env&lt;/code&gt; の&lt;/a&gt;キー。</target>
        </trans-unit>
        <trans-unit id="c7dbd12a03472b0bafe433439b4a86e42ba3b280" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LoaderOptionsPlugin&lt;/code&gt; is unlike other plugins in that it is built for migration from webpack 1 to 2. In webpack 2, the schema for a &lt;code&gt;webpack.config.js&lt;/code&gt; became stricter; no longer open for extension by other loaders and plugins. The intention is that you pass &lt;code&gt;options&lt;/code&gt; directly to loaders and plugins (i.e. &lt;code&gt;options&lt;/code&gt; are &lt;strong&gt;not&lt;/strong&gt; global or shared).</source>
          <target state="translated">&lt;code&gt;LoaderOptionsPlugin&lt;/code&gt; は、それがWebPACKの2でWebPACKの1から2への移行のために構築されているという点でのスキーマ、他のプラグインとは異なっている &lt;code&gt;webpack.config.js&lt;/code&gt; が厳しくなりました。他のローダーやプラグインによる拡張のために開かなくなりました。意図は、ローダーとプラグインに &lt;code&gt;options&lt;/code&gt; 直接渡すことです（つまり、 &lt;code&gt;options&lt;/code&gt; はグローバルでも共有でもあり&lt;strong&gt;ません&lt;/strong&gt;）。</target>
        </trans-unit>
        <trans-unit id="758b1aa7bc2934fb9f463d6b2fe62ac3f7f812ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MultiCompiler&lt;/code&gt; module allows webpack to run multiple configurations in separate compilers. If the &lt;code&gt;options&lt;/code&gt; parameter in the webpack's NodeJS api is an array of options, webpack applies separate compilers and calls the &lt;code&gt;callback&lt;/code&gt; method at the end of each compiler execution.</source>
          <target state="translated">&lt;code&gt;MultiCompiler&lt;/code&gt; のモジュールは、別のコンパイラで複数のコンフィギュレーションを実行するためにWebPACKのことができます。場合は &lt;code&gt;options&lt;/code&gt; のWebPACKのNodeJS APIのパラメータは、オプションの配列で、WebPACKのは、別のコンパイラを適用し、呼び出す &lt;code&gt;callback&lt;/code&gt; 各コンパイラの実行の終わりに方法を。</target>
        </trans-unit>
        <trans-unit id="0384e3cf0c84ae1fe040c1a2858cc9d50c384db2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NormalModuleReplacementPlugin&lt;/code&gt; allows you to replace resources that match &lt;code&gt;resourceRegExp&lt;/code&gt; with &lt;code&gt;newResource&lt;/code&gt;. If &lt;code&gt;newResource&lt;/code&gt; is relative, it is resolved relative to the previous resource. If &lt;code&gt;newResource&lt;/code&gt; is a function, it is expected to overwrite the request attribute of the supplied resource.</source>
          <target state="translated">&lt;code&gt;NormalModuleReplacementPlugin&lt;/code&gt; はあなたが一致するリソース置き換えることができます &lt;code&gt;resourceRegExp&lt;/code&gt; をして &lt;code&gt;newResource&lt;/code&gt; を。 &lt;code&gt;newResource&lt;/code&gt; が相対の場合、前のリソースを基準に解決されます。 &lt;code&gt;newResource&lt;/code&gt; が関数の場合、指定されたリソースのリクエスト属性を上書きすることが期待されています。</target>
        </trans-unit>
        <trans-unit id="d095d6c691b6167c5bd5fda19eccfdfd9ef79f68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[name]&lt;/code&gt;, &lt;code&gt;[id]&lt;/code&gt;, &lt;code&gt;[hash]&lt;/code&gt; and &lt;code&gt;[chunkhash]&lt;/code&gt; substitutions from &lt;a href=&quot;#output-filename&quot;&gt;#output-filename&lt;/a&gt; can be used. In addition to those, you can use substitutions listed below. The &lt;code&gt;[file]&lt;/code&gt; placeholder is replaced with the filename of the original file. We recommend &lt;strong&gt;only using the &lt;code&gt;[file]&lt;/code&gt; placeholder&lt;/strong&gt;, as the other placeholders won't work when generating SourceMaps for non-chunk files.</source>
          <target state="translated">&lt;a href=&quot;#output-filename&quot;&gt;＃output-filename&lt;/a&gt;の &lt;code&gt;[name]&lt;/code&gt; 、 &lt;code&gt;[id]&lt;/code&gt; 、 &lt;code&gt;[hash]&lt;/code&gt; 、および &lt;code&gt;[chunkhash]&lt;/code&gt; の置換を使用できます。これらに加えて、以下に示す置換を使用できます。 &lt;code&gt;[file]&lt;/code&gt; プレースホルダは、元のファイルのファイル名に置き換えられます。&lt;strong&gt; &lt;code&gt;[file]&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt;プレースホルダー&lt;/strong&gt;&lt;strong&gt;のみを使用すること&lt;/strong&gt;をお勧めします。これは、チャンク以外のファイルのSourceMapsを生成するときに他のプレースホルダーが機能しないためです。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d5e58eefd13d2e79cd01743b2a2668988072f0e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;apply&lt;/code&gt; method flags all updated modules as invalid. For each invalid module, there needs to be an update handler in the module or in its parent(s). Otherwise, the invalid flag bubbles up and invalidates parent(s) as well. Each bubble continues until the app's entry point or a module with an update handler is reached (whichever comes first). If it bubbles up from an entry point, the process fails.</source>
          <target state="translated">&lt;code&gt;apply&lt;/code&gt; 方法フラグが全て無効とモジュールを更新しました。無効なモジュールごとに、モジュールまたはその親に更新ハンドラが必要です。それ以外の場合、無効フラグはバブルアップし、親も無効化します。各バブルは、アプリのエントリポイントまたは更新ハンドラーを備えたモジュールに到達する（どちらか早い方）まで続きます。エントリポイントからバブルアップすると、プロセスは失敗します。</target>
        </trans-unit>
        <trans-unit id="197ed7042dd4c4fae277edc431967fab263cb1fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;autoApply&lt;/code&gt; parameter can either be a boolean or &lt;code&gt;options&lt;/code&gt; to pass to the &lt;code&gt;apply&lt;/code&gt; method when called.</source>
          <target state="translated">&lt;code&gt;autoApply&lt;/code&gt; のパラメータは、いずれかのブール値または可能 &lt;code&gt;options&lt;/code&gt; に渡す &lt;code&gt;apply&lt;/code&gt; 呼び出されたときの方法。</target>
        </trans-unit>
        <trans-unit id="c2873faf34087491ab56ed7bbc7b9c4e199b8217" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;babel-preset-env&lt;/code&gt; package uses &lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;browserslist&lt;/a&gt; to transpile only what is not supported in your browsers matrix. This preset comes with the &lt;code&gt;useBuiltIns&lt;/code&gt; option, &lt;code&gt;false&lt;/code&gt; by default, which converts your global &lt;code&gt;babel-polyfill&lt;/code&gt; import to a more granular feature by feature &lt;code&gt;import&lt;/code&gt; pattern:</source>
          <target state="translated">&lt;code&gt;babel-preset-env&lt;/code&gt; パッケージには、使用しています&lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;browserslistを&lt;/a&gt;お使いのブラウザのマトリックスではサポートされていないものだけをtranspileします。このプリセットには、デフォルトで &lt;code&gt;false&lt;/code&gt; である &lt;code&gt;useBuiltIns&lt;/code&gt; オプションが付属しています。このオプションは、グローバル &lt;code&gt;babel-polyfill&lt;/code&gt; インポートを、機能 &lt;code&gt;import&lt;/code&gt; パターンによってより細かい機能に変換します。</target>
        </trans-unit>
        <trans-unit id="5df287b045d05393a528ac0d2dc007acad13c3be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cheap-source-map&lt;/code&gt; variants are more performant, if you can live with the slightly worse mapping quality.</source>
          <target state="translated">&lt;code&gt;cheap-source-map&lt;/code&gt; あなたが少し悪化したマッピングの品質と一緒に暮らすことができるかどうかの変異体は、よりパフォーマンスです。</target>
        </trans-unit>
        <trans-unit id="b156180554ea770e4ec3a2a43529512fc6e19c5e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chunks&lt;/code&gt; object will also contain a list of &lt;code&gt;origins&lt;/code&gt; describing how the given chunk originated. Each &lt;code&gt;origins&lt;/code&gt; object follows the following schema:</source>
          <target state="translated">&lt;code&gt;chunks&lt;/code&gt; オブジェクトものリストが含まれます &lt;code&gt;origins&lt;/code&gt; 与えられたチャンクが発祥方法を説明します。各 &lt;code&gt;origins&lt;/code&gt; オブジェクトは次のスキーマに従います。</target>
        </trans-unit>
        <trans-unit id="d04ec951d561035013ce10196eb45f6875a4a4ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;count&lt;/code&gt; argument represents how many chunks the &lt;code&gt;module&lt;/code&gt; is used in.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; 引数は、 &lt;code&gt;module&lt;/code&gt; が使用されるチャンクの数を表します。</target>
        </trans-unit>
        <trans-unit id="ecb4a6fa013e770c5aea51a42d6cc36866052e23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;css-loader&lt;/code&gt; interprets &lt;code&gt;@import&lt;/code&gt; and &lt;code&gt;url()&lt;/code&gt; like &lt;code&gt;import/require()&lt;/code&gt; and will resolve them.</source>
          <target state="translated">&lt;code&gt;css-loader&lt;/code&gt; 解釈は &lt;code&gt;@import&lt;/code&gt; と &lt;code&gt;url()&lt;/code&gt; のような &lt;code&gt;import/require()&lt;/code&gt; し、それらを解決します。</target>
        </trans-unit>
        <trans-unit id="9e59e1aaf4f1e81f5b28039b148fcc1a71b85705" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;err&lt;/code&gt; object &lt;strong&gt;will not&lt;/strong&gt; include compilation errors and those must be handled separately using &lt;code&gt;stats.hasErrors()&lt;/code&gt; which will be covered in detail in &lt;a href=&quot;#error-handling&quot;&gt;Error Handling&lt;/a&gt; section of this guide. The &lt;code&gt;err&lt;/code&gt; object will only contain webpack-related issues, such as misconfiguration, etc.</source>
          <target state="translated">&lt;code&gt;err&lt;/code&gt; オブジェクトは&lt;strong&gt;ありません&lt;/strong&gt;コンパイルエラーを含み、それらが使用して別々に取り扱わなければならない &lt;code&gt;stats.hasErrors()&lt;/code&gt; で詳しく説明される&lt;a href=&quot;#error-handling&quot;&gt;エラー処理&lt;/a&gt;は、このガイドのセクション。 &lt;code&gt;err&lt;/code&gt; オブジェクトは、などの設定ミス、などのWebPACK関連の問題を、含まれています</target>
        </trans-unit>
        <trans-unit id="bb371008522bc9f3a06d993b0234da62c0417680" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;errorHandler&lt;/code&gt; is fired when the evaluation of this module (or dependencies) has thrown an exception.</source>
          <target state="translated">&lt;code&gt;errorHandler&lt;/code&gt; このモジュール（または依存関係）の評価が例外をスローしたときに発生します。</target>
        </trans-unit>
        <trans-unit id="15a6063eedfa1b8f8d44562d7e1aa8a218b4f303" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;errors&lt;/code&gt; and &lt;code&gt;warnings&lt;/code&gt; properties each contain a list of strings. Each string contains a message and stack trace:</source>
          <target state="translated">&lt;code&gt;errors&lt;/code&gt; や &lt;code&gt;warnings&lt;/code&gt; のプロパティはそれぞれ、文字列のリストが含まれています。各文字列には、メッセージとスタックトレースが含まれています。</target>
        </trans-unit>
        <trans-unit id="ebe7a596ff5e54934592c106b89d332d3bba5c9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property also supports naming installed NPM modules which export webpack configurations. Various configuration properties can also be filtered in different ways based on need.</source>
          <target state="translated">&lt;code&gt;extends&lt;/code&gt; プロパティもインストールNPMモジュール輸出WebPACKの構成を命名サポートしています。必要に応じて、さまざまな構成プロパティをさまざまな方法でフィルタリングすることもできます。</target>
        </trans-unit>
        <trans-unit id="8915101d6d0cf049bfb4b9f1127093b8d16acda4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;externals&lt;/code&gt; configuration option provides a way of excluding dependencies from the output bundles. Instead, the created bundle relies on that dependency to be present in the consumer's environment. This feature is typically most useful to &lt;strong&gt;library developers&lt;/strong&gt;, however there are a variety of applications for it.</source>
          <target state="translated">&lt;code&gt;externals&lt;/code&gt; 設定オプションは、出力バンドルからの依存性を排除する方法を提供します。代わりに、作成されたバンドルは、その依存関係がコンシューマーの環境に存在することに依存しています。この機能は通常、&lt;strong&gt;ライブラリ開発者&lt;/strong&gt;にとって最も役立ちますが、さまざまなアプリケーションがあります。</target>
        </trans-unit>
        <trans-unit id="b0f3b799fe5485060fbb228471725b1fc4660161" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fileContext&lt;/code&gt; option is useful when you want to store source maps in an upper level directory to avoid &lt;code&gt;../../&lt;/code&gt; appearing in the absolute &lt;code&gt;[url]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fileContext&lt;/code&gt; のお店のソースにしたいときオプションが便利です避けるために、上位レベルのディレクトリにマップする &lt;code&gt;../../&lt;/code&gt; 絶対に登場 &lt;code&gt;[url]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3ac9d0d856894e31e9e35e5216961c4e21678205" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filePath&lt;/code&gt; is relative to the webpack config: output.path You can pass in a different formatter for the output file, if none is passed in the default/configured formatter will be used</source>
          <target state="translated">&lt;code&gt;filePath&lt;/code&gt; には WebPACKのコンフィグに相対的である：何もデフォルトの構成/フォーマッタに渡されない場合は、出力ファイルに別のフォーマッタに渡すことができoutput.pathが使用されます</target>
        </trans-unit>
        <trans-unit id="8e867fda39d4db878de512a003165a4320ef3ec0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hooks&lt;/code&gt; property on a &lt;code&gt;Compiler&lt;/code&gt; instance is used to register a plugin to any hook event in the &lt;code&gt;Compiler&lt;/code&gt;'s lifecycle. The &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsDefaulter.js&quot;&gt;&lt;code&gt;WebpackOptionsDefaulter&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js&quot;&gt;&lt;code&gt;WebpackOptionsApply&lt;/code&gt;&lt;/a&gt; utilities are used by webpack to configure its &lt;code&gt;Compiler&lt;/code&gt; instance with all the built-in plugins.</source>
          <target state="translated">&lt;code&gt;hooks&lt;/code&gt; のプロパティ &lt;code&gt;Compiler&lt;/code&gt; インスタンスは、のいずれかのフックイベントにプラグインを登録するために使用される &lt;code&gt;Compiler&lt;/code&gt; のライフサイクル。&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsDefaulter.js&quot;&gt; &lt;code&gt;WebpackOptionsDefaulter&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js&quot;&gt; &lt;code&gt;WebpackOptionsApply&lt;/code&gt; &lt;/a&gt;ユーティリティは、その構成するためのWebPACKで使用されている &lt;code&gt;Compiler&lt;/code&gt; すべての組み込みのプラグインでインスタンスを。</target>
        </trans-unit>
        <trans-unit id="c3bb9fd1827769306a6587d4f6b4960bfdea0b4f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;info&lt;/code&gt; parameter will be an object containing some of the following values:</source>
          <target state="translated">&lt;code&gt;info&lt;/code&gt; パラメータには以下の値の一部を含むオブジェクトになります。</target>
        </trans-unit>
        <trans-unit id="ac2bce6f0611a346f5fe5bcff1092028d81fbe9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;less-loader&lt;/code&gt; requires &lt;a href=&quot;https://github.com/less/less.js&quot;&gt;less&lt;/a&gt; as &lt;a href=&quot;https://docs.npmjs.com/files/package.json#peerdependencies&quot;&gt;&lt;code&gt;peerDependency&lt;/code&gt;&lt;/a&gt;. Thus you are able to control the versions accurately.</source>
          <target state="translated">&lt;code&gt;less-loader&lt;/code&gt; 必要です&lt;a href=&quot;https://github.com/less/less.js&quot;&gt;以下&lt;/a&gt;のように&lt;a href=&quot;https://docs.npmjs.com/files/package.json#peerdependencies&quot;&gt; &lt;code&gt;peerDependency&lt;/code&gt; &lt;/a&gt;。したがって、バージョンを正確に制御することができます。</target>
        </trans-unit>
        <trans-unit id="8a7a85e47b4bb57e8a7c7a53a9c528cc33f8ac72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lineToLine&lt;/code&gt; object allows for the same &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;include&lt;/code&gt;, and &lt;code&gt;exclude&lt;/code&gt; options described above.</source>
          <target state="translated">&lt;code&gt;lineToLine&lt;/code&gt; のオブジェクトは、同一のを可能にする &lt;code&gt;test&lt;/code&gt; 、 &lt;code&gt;include&lt;/code&gt; 、および &lt;code&gt;exclude&lt;/code&gt; オプションは上記。</target>
        </trans-unit>
        <trans-unit id="2bba46138c47a0a7cf087fb38225f589eeebb1c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;main&lt;/code&gt; bundle changed because of its new content.</source>
          <target state="translated">&lt;code&gt;main&lt;/code&gt; バンドルは、その新しいコンテンツの変更しました。</target>
        </trans-unit>
        <trans-unit id="95e185eaa4f7fa01feafa7f198567ac6d46bf21d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module&lt;/code&gt; argument represents each module in the chunks you have provided via the &lt;code&gt;name&lt;/code&gt;/&lt;code&gt;names&lt;/code&gt; property. &lt;code&gt;module&lt;/code&gt; has the shape of a &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/NormalModule.js&quot;&gt;NormalModule&lt;/a&gt;, which has two particularly useful properties for this use case:</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; 引数は、を介して提供されているチャンク内の各モジュールを表す &lt;code&gt;name&lt;/code&gt; / &lt;code&gt;names&lt;/code&gt; プロパティを。 &lt;code&gt;module&lt;/code&gt; は&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/NormalModule.js&quot;&gt;NormalModule&lt;/a&gt;の形をしており、このユースケースには2つの特に有用なプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="a3cfb3d5cb7336d9511e7a4c809c722704ca080e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module&lt;/code&gt; property should point to a script that utilizes ES2015 module syntax but no other syntax features that aren't yet supported by browsers or node. This enables webpack to parse the module syntax itself, allowing for lighter bundles via &lt;a href=&quot;tree-shaking&quot;&gt;tree shaking&lt;/a&gt; if users are only consuming certain parts of the library.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; プロパティは、ES2015モジュールの構文が、まだブラウザやノードによってサポートされていないいない他の構文の機能を利用するスクリプトを指している必要があります。これにより、webpackがモジュール構文自体を解析できるようになり、ユーザーがライブラリーの特定の部分のみを消費している場合に、&lt;a href=&quot;tree-shaking&quot;&gt;ツリーの揺れ&lt;/a&gt;を介して軽量のバンドルが可能になります。</target>
        </trans-unit>
        <trans-unit id="f6e16ff706d3ad9a7f34ca2ac321ba5759f3186f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;moment/locale&lt;/code&gt; context is restricted to files matching &lt;code&gt;/de|fr|hu/&lt;/code&gt;. Thus only those locales are included (see &lt;a href=&quot;https://github.com/moment/moment/issues/2373&quot;&gt;this issue&lt;/a&gt; for more information).</source>
          <target state="translated">&lt;code&gt;moment/locale&lt;/code&gt; コンテキストが一致するファイルに限定されている &lt;code&gt;/de|fr|hu/&lt;/code&gt; 。したがって、それらのロケールのみが含まれます（詳細については、&lt;a href=&quot;https://github.com/moment/moment/issues/2373&quot;&gt;この問題&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="69c7a1beab39f0986a8084e3f514abc10bb5b07b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;newContentCallback&lt;/code&gt; function is given a &lt;a href=&quot;../api/plugins/module-factories&quot;&gt;&lt;code&gt;data&lt;/code&gt; object of the &lt;code&gt;ContextModuleFactory&lt;/code&gt;&lt;/a&gt; and is expected to overwrite the &lt;code&gt;request&lt;/code&gt; attribute of the supplied object.</source>
          <target state="translated">&lt;code&gt;newContentCallback&lt;/code&gt; の機能が与えられている&lt;a href=&quot;../api/plugins/module-factories&quot;&gt; &lt;code&gt;data&lt;/code&gt; のオブジェクト &lt;code&gt;ContextModuleFactory&lt;/code&gt; を&lt;/a&gt;し、上書きすることが期待される &lt;code&gt;request&lt;/code&gt; されたオブジェクトの属性。</target>
        </trans-unit>
        <trans-unit id="d93a803cfd822e9f080183ae5a4bf2fc1cc0d823" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;newContentResource&lt;/code&gt; and &lt;code&gt;newContentCreateContextMap&lt;/code&gt; parameters are also available:</source>
          <target state="translated">&lt;code&gt;newContentResource&lt;/code&gt; と &lt;code&gt;newContentCreateContextMap&lt;/code&gt; パラメータも使用できます。</target>
        </trans-unit>
        <trans-unit id="a19a4d88397a085c68dfd0c0f7af1b957ed12287" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; property has been deprecated in webpack 3 and removed in webpack 4.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; プロパティは、WebPACKの3で非推奨とのWebPACK 4で削除されました。</target>
        </trans-unit>
        <trans-unit id="77d82bf40f2e270972ea89ce304490f1b508185b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;output&lt;/code&gt; property has &lt;a href=&quot;../configuration/output&quot;&gt;many more configurable features&lt;/a&gt; and if you like to know more about the concepts behind it, you can &lt;a href=&quot;output&quot;&gt;read more in the output section&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;output&lt;/code&gt; 特性があり&lt;a href=&quot;../configuration/output&quot;&gt;、より多くの設定可能な機能を&lt;/a&gt;、あなたがその背後にある概念についての詳細を知りたい場合は、あなたができる&lt;a href=&quot;output&quot;&gt;より多くの出力部に読んで&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="00a1ab1dde43ec150840bd4f6b6641f52c20f76a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parser&lt;/code&gt; instance, found in the &lt;code&gt;compiler&lt;/code&gt;, is used to parse each module being processed by webpack. The &lt;code&gt;parser&lt;/code&gt; is yet another webpack class that extends &lt;code&gt;tapable&lt;/code&gt; and provides a variety of &lt;code&gt;tapable&lt;/code&gt; hooks that can be used by plugin authors to customize the parsing process.</source>
          <target state="translated">&lt;code&gt;parser&lt;/code&gt; に見出される場合、 &lt;code&gt;compiler&lt;/code&gt; 、WebPACKのによって処理されている各モジュールを解析するために使用されます。 &lt;code&gt;parser&lt;/code&gt; 延びているさらに別のWebPACKクラスです &lt;code&gt;tapable&lt;/code&gt; 及び様々な提供 &lt;code&gt;tapable&lt;/code&gt; 解析プロセスをカスタマイズするために、プラグイン作者によって使用することができるフックを。</target>
        </trans-unit>
        <trans-unit id="7687177981a2fd47de4971bcb71521b7fdd4ee22" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parser&lt;/code&gt; is found within &lt;a href=&quot;compiler-hooks#normalmodulefactory&quot;&gt;module factories&lt;/a&gt; and therefore takes little more work to access:</source>
          <target state="translated">&lt;code&gt;parser&lt;/code&gt; 内部に発見された&lt;a href=&quot;compiler-hooks#normalmodulefactory&quot;&gt;モジュール工場&lt;/a&gt;、したがって、アクセスに少しより多くの仕事を取ります。</target>
        </trans-unit>
        <trans-unit id="7ba56a2710d7efe8d8ee49077d7d9a0b872efb5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;plugins&lt;/code&gt; option is used to customize the webpack build process in a variety of ways. webpack comes with a variety built-in plugins available under &lt;code&gt;webpack.[plugin-name]&lt;/code&gt;. See &lt;a href=&quot;https://webpack.js.org/plugins&quot;&gt;this page&lt;/a&gt; for a list of plugins and documentation but note that there are a lot more out in the community.</source>
          <target state="translated">&lt;code&gt;plugins&lt;/code&gt; オプションは、さまざまな方法でWebPACKのビルドプロセスをカスタマイズするために使用されます。webpackには、 &lt;code&gt;webpack.[plugin-name]&lt;/code&gt; 利用可能なさまざまな組み込みプラグインが付属しています。プラグインとドキュメントのリストについては、&lt;a href=&quot;https://webpack.js.org/plugins&quot;&gt;このページ&lt;/a&gt;を参照してください。ただし、コミュニティにはさらに多くの情報があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="440b7e1d609564f2203fd525c43f9da6f0a213ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;proxy_set_header&lt;/code&gt; lines are important, because they allow the WebSockets to work correctly.</source>
          <target state="translated">&lt;code&gt;proxy_set_header&lt;/code&gt; の彼らはWebSocketをが正常に動作することができますので、ラインは、重要です。</target>
        </trans-unit>
        <trans-unit id="959497ef27be2ffe34adb1545ac77f2b65dccb71" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;publicPath&lt;/code&gt; can be changed so the bundle is put in a directory:</source>
          <target state="translated">&lt;code&gt;publicPath&lt;/code&gt; はバンドルはディレクトリに置かれるように変更することができます：</target>
        </trans-unit>
        <trans-unit id="67beac7259210a810639de807db709b25609a215" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;publicPath&lt;/code&gt; configuration option can be quite useful in a variety of scenarios. It allows you to specify the base path for all the assets within your application.</source>
          <target state="translated">&lt;code&gt;publicPath&lt;/code&gt; の設定オプションは、さまざまなシナリオに威力を発揮することができます。これにより、アプリケーション内のすべてのアセットの基本パスを指定できます。</target>
        </trans-unit>
        <trans-unit id="2cd29ccbf03730a8b2edc90124528dbcf16d9bf8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;publicPath&lt;/code&gt; will be used within our server script as well in order to make sure files are served correctly on &lt;code&gt;http://localhost:3000&lt;/code&gt;. We'll specify the port number later. The next step is setting up our custom &lt;code&gt;express&lt;/code&gt; server:</source>
          <target state="translated">&lt;code&gt;publicPath&lt;/code&gt; はよくわからファイルがで正しく提供されているようにするためのように、当社のサーバースクリプト内で使用されます &lt;code&gt;http://localhost:3000&lt;/code&gt; 。後でポート番号を指定します。次のステップは、カスタム &lt;code&gt;express&lt;/code&gt; サーバーの設定です。</target>
        </trans-unit>
        <trans-unit id="bfa85c6fb79a4dfb066d5382813b76a6d20780bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;requestRegExp&lt;/code&gt; parameter passed to &lt;code&gt;IgnorePlugin&lt;/code&gt; is not tested against the resolved file names or absolute module names being imported or required, but rather against the &lt;em&gt;string&lt;/em&gt; passed to &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt;&lt;em&gt;within the source code where the import is taking place&lt;/em&gt;. For example, if you're trying to exclude &lt;code&gt;node_modules/moment/locale/*.js&lt;/code&gt;, this won't work:</source>
          <target state="translated">&lt;code&gt;requestRegExp&lt;/code&gt; のに渡されたパラメータ &lt;code&gt;IgnorePlugin&lt;/code&gt; が解決されたファイル名または絶対モジュール名に対してテストされていませんが、インポート、または必要ではなく、むしろ反対されている&lt;em&gt;文字列&lt;/em&gt;に渡された &lt;code&gt;require&lt;/code&gt; または &lt;code&gt;import&lt;/code&gt; &lt;em&gt;インポートが行われているソースコード内&lt;/em&gt;。たとえば、 &lt;code&gt;node_modules/moment/locale/*.js&lt;/code&gt; を除外しようとすると、これは機能しません。</target>
        </trans-unit>
        <trans-unit id="aa343c1130af70aabd487d99912dab97138f9348" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;run&lt;/code&gt; method is then used to kickstart all compilation work. Upon completion, the given &lt;code&gt;callback&lt;/code&gt; function is executed. The final logging of stats and errors should be done in this &lt;code&gt;callback&lt;/code&gt; function.</source>
          <target state="translated">次に、 &lt;code&gt;run&lt;/code&gt; メソッドを使用して、すべてのコンパイル作業を開始します。完了すると、指定された &lt;code&gt;callback&lt;/code&gt; 関数が実行されます。統計とエラーの最終的なロギングは、この &lt;code&gt;callback&lt;/code&gt; 関数で行う必要があります。</target>
        </trans-unit>
        <trans-unit id="0fa1ceeebc223dab1f3f6c432ee757cc7bd5987b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stats&lt;/code&gt; object that is passed as a second argument of the &lt;a href=&quot;#webpack-&quot;&gt;&lt;code&gt;webpack()&lt;/code&gt;&lt;/a&gt; callback, is a good source of information about the code compilation process. It includes:</source>
          <target state="translated">&lt;code&gt;stats&lt;/code&gt; の第2引数として渡されたオブジェクト&lt;a href=&quot;#webpack-&quot;&gt; &lt;code&gt;webpack()&lt;/code&gt; &lt;/a&gt;コールバックは、コードのコンパイル・プロセスに関する情報の優れた供給源です。以下が含まれます：</target>
        </trans-unit>
        <trans-unit id="9dff24e3b8a34791e7bc80a01e4ab6eed1e802b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stats&lt;/code&gt; option lets you precisely control what bundle information gets displayed. This can be a nice middle ground if you don't want to use &lt;code&gt;quiet&lt;/code&gt; or &lt;code&gt;noInfo&lt;/code&gt; because you want some bundle information, but not all of it.</source>
          <target state="translated">&lt;code&gt;stats&lt;/code&gt; オプションは、正確にバンドル情報が表示されますどのように制御することができます。バンドル情報のすべてではなく一部が必要 &lt;code&gt;quiet&lt;/code&gt; ため、quietまたは &lt;code&gt;noInfo&lt;/code&gt; を使用したくない場合は、これが良い中間点になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="4c79769622f460ee03342b8e1cd130200177a876" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;style-loader&lt;/code&gt; injects the styles lazily making them useable on-demand via &lt;code&gt;style.use()&lt;/code&gt; / &lt;code&gt;style.unuse()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;style-loader&lt;/code&gt; いい加減にそれらを介して、オンデマンドで使用可能な作りのスタイルを注入 &lt;code&gt;style.use()&lt;/code&gt; / &lt;code&gt;style.unuse()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="77a959b54b097574b4bea60118a29fb435f0f872" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;test&lt;/code&gt; property identifies which file or files should be transformed.</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; または複数のファイルを変換する必要があるプロパティを識別します。</target>
        </trans-unit>
        <trans-unit id="c92c3b6d9a4ff7441cc25b272c0de894b3c2d423" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;this.callback&lt;/code&gt; method is more flexible as it allows multiple arguments to be passed as opposed to just the &lt;code&gt;content&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this.callback&lt;/code&gt; それだけとは対照的に、複数の引数を渡すことを可能にするような方法は、より柔軟性がある &lt;code&gt;content&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f6345b4bc86354b4abc5d07dca6da56646b9e249" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;thread-loader&lt;/code&gt; can be used to offload expensive loaders to a worker pool.</source>
          <target state="translated">&lt;code&gt;thread-loader&lt;/code&gt; 労働者のプールに高価ローダーをオフロードするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="20f8772fda6c35ab683bfd8148d1a50c11515e74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;use&lt;/code&gt; property indicates which loader should be used to do the transforming.</source>
          <target state="translated">&lt;code&gt;use&lt;/code&gt; プロパティは、変換を行うために使用されるべきローダーを示しています。</target>
        </trans-unit>
        <trans-unit id="e6e2e9ef8dbc3d5383c141533d231f09eb89ee0d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vendor&lt;/code&gt; bundle changed because its &lt;code&gt;module.id&lt;/code&gt; was changed.</source>
          <target state="translated">&lt;code&gt;vendor&lt;/code&gt; そのため、バンドルが変更さ &lt;code&gt;module.id&lt;/code&gt; が変更されました。</target>
        </trans-unit>
        <trans-unit id="82960aa0f6caf9f5689cf5935d850c7f66ec1a40" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;watch&lt;/code&gt; method returns a &lt;code&gt;Watching&lt;/code&gt; instance that exposes &lt;code&gt;.close(callback)&lt;/code&gt; method. Calling this method will end watching:</source>
          <target state="translated">&lt;code&gt;watch&lt;/code&gt; 方法を返し &lt;code&gt;Watching&lt;/code&gt; 露出するが、そのインスタンス &lt;code&gt;.close(callback)&lt;/code&gt; 方法。このメソッドを呼び出すと、監視が終了します。</target>
        </trans-unit>
        <trans-unit id="4a0b36b6ece61696347cc27cab3d20af2ce94c6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;webpack-dev-server&lt;/code&gt; comes with many configurable options. Head over to the &lt;a href=&quot;../configuration/dev-server&quot;&gt;documentation&lt;/a&gt; to learn more.</source>
          <target state="translated">&lt;code&gt;webpack-dev-server&lt;/code&gt; 多くの設定可能なオプションが付属しています。詳細については、&lt;a href=&quot;../configuration/dev-server&quot;&gt;ドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="7fc0861e809d209dbbcf6f243915a671c9cd26a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;webpack-dev-server&lt;/code&gt; provides you with a simple web server and the ability to use live reloading. Let's set it up:</source>
          <target state="translated">&lt;code&gt;webpack-dev-server&lt;/code&gt; シンプルなWebサーバとライブリロードを使用する機能を提供します。設定しましょう：</target>
        </trans-unit>
        <trans-unit id="48c48bfe39c90a41f2aa4d0d5851ecb894e963e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;webpack.config.js&lt;/code&gt; file will be intelligently extended with properties from &lt;code&gt;base.config.js&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;webpack.config.js&lt;/code&gt; のファイルは、インテリジェントからのプロパティで拡張されます &lt;code&gt;base.config.js&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4ad3e989709e306fec071f2cefb6ed11206b1cf9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;webpack&lt;/code&gt; compiler can understand modules written as ES2015 modules, CommonJS or AMD. However, some third party libraries may expect global dependencies (e.g. &lt;code&gt;$&lt;/code&gt; for &lt;code&gt;jQuery&lt;/code&gt;). The libraries might also create globals which need to be exported. These &quot;broken modules&quot; are one instance where &lt;em&gt;shimming&lt;/em&gt; comes into play.</source>
          <target state="translated">&lt;code&gt;webpack&lt;/code&gt; コンパイラは、ES2015モジュール、CommonJSまたはAMDとして書かれたモジュールを理解することができます。ただし、一部のサードパーティライブラリはグローバルな依存関係を期待する場合があります（ &lt;code&gt;jQuery&lt;/code&gt; の場合は &lt;code&gt;$&lt;/code&gt; など）。ライブラリは、エクスポートする必要があるグローバルを作成する場合もあります。これらの「壊れたモジュール」は、&lt;em&gt;シミング&lt;/em&gt;が関係する1つの例です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="635124a1b4ade80ec417a236748826993e343c3c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;first option&lt;/strong&gt; is to open your &lt;code&gt;tsconfig.json&lt;/code&gt; file and look for &lt;code&gt;compilerOptions&lt;/code&gt;. Set &lt;code&gt;target&lt;/code&gt; to &lt;code&gt;&quot;ES5&quot;&lt;/code&gt; and &lt;code&gt;module&lt;/code&gt; to &lt;code&gt;&quot;CommonJS&quot;&lt;/code&gt; (or completely remove the &lt;code&gt;module&lt;/code&gt; option).</source>
          <target state="translated">&lt;strong&gt;最初のオプションは、&lt;/strong&gt;あなた開くことです &lt;code&gt;tsconfig.json&lt;/code&gt; のためのファイルと見 &lt;code&gt;compilerOptions&lt;/code&gt; を。設定 &lt;code&gt;target&lt;/code&gt; に &lt;code&gt;&quot;ES5&quot;&lt;/code&gt; と &lt;code&gt;module&lt;/code&gt; への &lt;code&gt;&quot;CommonJS&quot;&lt;/code&gt; （または完全に削除 &lt;code&gt;module&lt;/code&gt; オプション）。</target>
        </trans-unit>
        <trans-unit id="4b753724968fd4a8aa6110a6c955d7aa4b30e944" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;output&lt;/strong&gt; property tells webpack where to emit the &lt;em&gt;bundles&lt;/em&gt; it creates and how to name these files. It defaults to &lt;code&gt;./dist/main.js&lt;/code&gt; for the main output file and to the &lt;code&gt;./dist&lt;/code&gt; folder for any other generated file.</source>
          <target state="translated">&lt;strong&gt;出力&lt;/strong&gt;プロパティはどこ発するようにWebPACKのを伝え&lt;em&gt;バンドル&lt;/em&gt;それが作成し、これらのファイルに名前を付ける方法。デフォルトでは、メイン出力ファイルの場合は &lt;code&gt;./dist/main.js&lt;/code&gt; になり、その他の生成ファイルの場合は &lt;code&gt;./dist&lt;/code&gt; フォルダーになります。</target>
        </trans-unit>
        <trans-unit id="2b7f1d87a6236de23ae9ee9e25e2ea1b90bec2d2" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;second option&lt;/strong&gt; is to install the &lt;code&gt;tsconfig-paths&lt;/code&gt; package:</source>
          <target state="translated">&lt;strong&gt;2番目のオプションは、&lt;/strong&gt;インストールすることです &lt;code&gt;tsconfig-paths&lt;/code&gt; パッケージを：</target>
        </trans-unit>
        <trans-unit id="12fb1858a3514d997f15b5204dc79149205e49c3" translate="yes" xml:space="preserve">
          <source>The API only supports a single concurrent compilation at a time. When using &lt;code&gt;run&lt;/code&gt;, wait for it to finish before calling &lt;code&gt;run&lt;/code&gt; or &lt;code&gt;watch&lt;/code&gt; again. When using &lt;code&gt;watch&lt;/code&gt;, call &lt;code&gt;close&lt;/code&gt; and wait for it to finish before calling &lt;code&gt;run&lt;/code&gt; or &lt;code&gt;watch&lt;/code&gt; again. Concurrent compilations will corrupt the output files.</source>
          <target state="translated">APIは一度に1つの同時コンパイルのみをサポートします。使用する場合は &lt;code&gt;run&lt;/code&gt; 、それが呼び出す前に終了するのを、待って &lt;code&gt;run&lt;/code&gt; か &lt;code&gt;watch&lt;/code&gt; もう一度。 &lt;code&gt;watch&lt;/code&gt; を使用するときは、 &lt;code&gt;close&lt;/code&gt; を呼び出し、それが終了するのを待ってから、 &lt;code&gt;run&lt;/code&gt; または &lt;code&gt;watch&lt;/code&gt; を呼び出します。同時にコンパイルすると、出力ファイルが破損します。</target>
        </trans-unit>
        <trans-unit id="5ce1205cb2c56dae5668475d974ac376cca81c42" translate="yes" xml:space="preserve">
          <source>The Command Line Interface (CLI) to configure and interact with your build. It is especially useful in the case of early prototyping and profiling. For the most part, the CLI is simply used to kick off the process using a configuration file and a few flags (e.g. &lt;code&gt;--env&lt;/code&gt;).</source>
          <target state="translated">ビルドを構成および操作するためのコマンドラインインターフェイス（CLI）。これは、初期のプロトタイピングとプロファイリングの場合に特に役立ちます。ほとんどの場合、CLIは、構成ファイルといくつかのフラグ（例 &lt;code&gt;--env&lt;/code&gt; ）を使用してプロセスを開始するために使用されます。</target>
        </trans-unit>
        <trans-unit id="5234b711ebe571f702de271664fe3fad3a23178e" translate="yes" xml:space="preserve">
          <source>The CommonsChunkPlugin has been removed in webpack v4 legato. To learn how chunks are treated in the latest version, check out the &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;SplitChunksPlugin&lt;/a&gt;.</source>
          <target state="translated">CommonsChunkPluginは、webpack v4 legatoで削除されました。最新バージョンでのチャンクの処理方法については、&lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;SplitChunksPluginをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="229e84c0b0f542eaf2480b8ad349fd816795c9e4" translate="yes" xml:space="preserve">
          <source>The CommonsChunkPlugin has been removed in webpack v4 legato. To learn how chunks are treated in the latest version, check out the &lt;a href=&quot;split-chunks-plugin&quot;&gt;SplitChunksPlugin&lt;/a&gt;.</source>
          <target state="translated">CommonsChunkPluginは、webpack v4 legatoで削除されました。最新バージョンでのチャンクの処理方法については、&lt;a href=&quot;split-chunks-plugin&quot;&gt;SplitChunksPluginをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4507304153be0db0cb962df914f0c5b2ab856e13" translate="yes" xml:space="preserve">
          <source>The Fine Art of the webpack 3 Config</source>
          <target state="translated">webpack 3 コンフィグのファインアート</target>
        </trans-unit>
        <trans-unit id="b1c2b221613da1e5b10aea2457d7a2fd9e875d85" translate="yes" xml:space="preserve">
          <source>The ID of the current module.</source>
          <target state="translated">現在のモジュールのID。</target>
        </trans-unit>
        <trans-unit id="c723a58153b1097bc6e5d48b2d40385bb0879aef" translate="yes" xml:space="preserve">
          <source>The JSON files to use for descriptions. Default:</source>
          <target state="translated">説明に使いたい JSON ファイル。デフォルト。</target>
        </trans-unit>
        <trans-unit id="2bd6ce3e5799557f02fb6ef11c6634c82897b1b8" translate="yes" xml:space="preserve">
          <source>The Loader Context</source>
          <target state="translated">ローダのコンテキスト</target>
        </trans-unit>
        <trans-unit id="8c69b75adc810300f3fa44f52599a074382fbe2c" translate="yes" xml:space="preserve">
          <source>The Manifest</source>
          <target state="translated">マニフェスト</target>
        </trans-unit>
        <trans-unit id="20f70436a9d57cb1461c13fd70b6f74f082ee97c" translate="yes" xml:space="preserve">
          <source>The Node.js API is useful in scenarios in which you need to customize the build or development process since all the reporting and error handling must be done manually and webpack only does the compiling part. For this reason the &lt;a href=&quot;../configuration/stats&quot;&gt;&lt;code&gt;stats&lt;/code&gt;&lt;/a&gt; configuration options will not have any effect in the &lt;code&gt;webpack()&lt;/code&gt; call.</source>
          <target state="translated">すべてのレポートとエラー処理は手動で行う必要があり、webpackはコンパイル部分のみを実行するため、Node.js APIはビルドまたは開発プロセスをカスタマイズする必要があるシナリオで役立ちます。このため、&lt;a href=&quot;../configuration/stats&quot;&gt; &lt;code&gt;stats&lt;/code&gt; &lt;/a&gt;構成オプションは、 &lt;code&gt;webpack()&lt;/code&gt; 呼び出しでは効果がありません。</target>
        </trans-unit>
        <trans-unit id="355c15d3884285cbe9de6e8c0623457a61fdc6ca" translate="yes" xml:space="preserve">
          <source>The Problem</source>
          <target state="translated">問題点</target>
        </trans-unit>
        <trans-unit id="fd5fa9a5b25de9fdd4bc4bc759ae247c0b3e4737" translate="yes" xml:space="preserve">
          <source>The Unix socket to listen to (instead of a host).</source>
          <target state="translated">(ホストの代わりに)リッスンするUnixソケット。</target>
        </trans-unit>
        <trans-unit id="4d5406ba559c1d91f6260313b9fbba08b5f54e12" translate="yes" xml:space="preserve">
          <source>The absolute filename</source>
          <target state="translated">絶対ファイル名</target>
        </trans-unit>
        <trans-unit id="63cd9df0f8725b031bddd6167b7fadab8bda770f" translate="yes" xml:space="preserve">
          <source>The allowances were the ability to restrict registrations to a specific version or to support different sandboxes with different defined modules.</source>
          <target state="translated">この許容範囲は、登録を特定のバージョンに制限したり、異なる定義のモジュールで異なるサンドボックスをサポートしたりする機能でした。</target>
        </trans-unit>
        <trans-unit id="16b86c144a0a521ee168253a8c4f98de7b78f15d" translate="yes" xml:space="preserve">
          <source>The application asks the HMR runtime to check for updates.</source>
          <target state="translated">アプリケーションはHMRランタイムに更新のチェックを依頼します。</target>
        </trans-unit>
        <trans-unit id="1ebbe790435ed6809e144b26b79df8536bc5f553" translate="yes" xml:space="preserve">
          <source>The application then asks the runtime to apply the updates.</source>
          <target state="translated">その後、アプリケーションはランタイムに更新を適用するように要求します。</target>
        </trans-unit>
        <trans-unit id="d824c0a8e805904e477cac16a6a89a050cf96b63" translate="yes" xml:space="preserve">
          <source>The arguments passed to &lt;code&gt;require.context&lt;/code&gt; must be literals!</source>
          <target state="translated">&lt;code&gt;require.context&lt;/code&gt; に渡される引数はリテラルでなければなりません！</target>
        </trans-unit>
        <trans-unit id="3b269a2b9e4dd52dc81aafc9c739893dbdcca239" translate="yes" xml:space="preserve">
          <source>The array accepts relative, absolute, and glob patterns to the relevant files. It uses &lt;a href=&quot;https://github.com/micromatch/micromatch#matching-features&quot;&gt;micromatch&lt;/a&gt; under the hood.</source>
          <target state="translated">配列は、関連ファイルへの相対、絶対、およびglobパターンを受け入れます。フードの下で&lt;a href=&quot;https://github.com/micromatch/micromatch#matching-features&quot;&gt;マイクロマッチ&lt;/a&gt;を使用しています。</target>
        </trans-unit>
        <trans-unit id="7f24e06847c7c8c09a6910743fe0e2b89b2d5d81" translate="yes" xml:space="preserve">
          <source>The assets has been optimized.</source>
          <target state="translated">資産が最適化されました。</target>
        </trans-unit>
        <trans-unit id="2bad31d0c6e7fc07307f1bde0b4eadebf87145fb" translate="yes" xml:space="preserve">
          <source>The banner text that points to the extracted file and will be added on top of the original file. Can be &lt;code&gt;false&lt;/code&gt; (no banner), a &lt;code&gt;String&lt;/code&gt;, or a &lt;code&gt;Function&amp;lt;(string) -&amp;gt; String&amp;gt;&lt;/code&gt; that will be called with the filename where extracted comments have been stored. Will be wrapped into comment.</source>
          <target state="translated">抽出されたファイルをポイントし、元のファイルの上に追加されるバナーテキスト。することができ &lt;code&gt;false&lt;/code&gt; （ノーバナー）、 &lt;code&gt;String&lt;/code&gt; 、または &lt;code&gt;Function&amp;lt;(string) -&amp;gt; String&amp;gt;&lt;/code&gt; 抽出されたコメントが保存されているファイル名で呼ばれます。コメントにラップされます。</target>
        </trans-unit>
        <trans-unit id="1f097a937bb4ef262288a8da73a495320626168c" translate="yes" xml:space="preserve">
          <source>The banner text that points to the extracted file and will be added on top of the original file. Can be &lt;code&gt;false&lt;/code&gt; (no banner), a &lt;code&gt;{String}&lt;/code&gt;, or a &lt;code&gt;{Function&amp;lt;(string) -&amp;gt; {String}&lt;/code&gt; that will be called with the filename where extracted comments have been stored. Will be wrapped into comment</source>
          <target state="translated">抽出されたファイルをポイントし、元のファイルの上に追加されるバナーテキスト。することができ &lt;code&gt;false&lt;/code&gt; （ノーバナー）、 &lt;code&gt;{String}&lt;/code&gt; 、または &lt;code&gt;{Function&amp;lt;(string) -&amp;gt; {String}&lt;/code&gt; 抽出されたコメントが保存されているファイル名で呼ばれます。コメントにラップされます</target>
        </trans-unit>
        <trans-unit id="ea0c3fb19eeb0a5ca2d5f787f8510cd22467c43d" translate="yes" xml:space="preserve">
          <source>The base directory, an &lt;strong&gt;absolute path&lt;/strong&gt;, for resolving entry points and loaders from configuration.</source>
          <target state="translated">設定からエントリポイントとローダーを解決するためのベースディレクトリ、&lt;strong&gt;絶対パス&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="dade99eb4c9c3fd9dd88d5f0ba2df781c3d633a2" translate="yes" xml:space="preserve">
          <source>The basename of the file/resource.</source>
          <target state="translated">ファイル/リソースのベースネーム。</target>
        </trans-unit>
        <trans-unit id="d328278dab4c04b62fd3bf91761c4b0d051ef9fa" translate="yes" xml:space="preserve">
          <source>The basic project structure may look like this:</source>
          <target state="translated">基本的なプロジェクトの構造は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="829bc837727bbafc63b76aeeb9da90175a1667ce" translate="yes" xml:space="preserve">
          <source>The browser provides a &lt;code&gt;console&lt;/code&gt; object with a very similar interface to the Node.js &lt;code&gt;console&lt;/code&gt;, so a polyfill is generally not needed.</source>
          <target state="translated">ブラウザは、Node.js &lt;code&gt;console&lt;/code&gt; と非常によく似たインターフェースを持つ &lt;code&gt;console&lt;/code&gt; オブジェクトを提供するため、通常、ポリフィルは必要ありません。</target>
        </trans-unit>
        <trans-unit id="aa3f5c75700c8ef9230b4071d77253ca4fd0187a" translate="yes" xml:space="preserve">
          <source>The bundle can be included as part of a script tag, and the bundle can be invoked like so:</source>
          <target state="translated">バンドルはスクリプトタグの一部として含めることができ、このようにバンドルを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="ba7f6b7207278a6abb170c11f3d09b65779ebeaa" translate="yes" xml:space="preserve">
          <source>The bundle will also be available as &lt;code&gt;http://localhost:8080/assets/bundle.js&lt;/code&gt;.</source>
          <target state="translated">バンドルは &lt;code&gt;http://localhost:8080/assets/bundle.js&lt;/code&gt; としても利用できます。</target>
        </trans-unit>
        <trans-unit id="217dc2584c0fb5dc2dc7d41450dd433af073e169" translate="yes" xml:space="preserve">
          <source>The bundle will now be available as &lt;code&gt;http://localhost:8080/assets/bundle.js&lt;/code&gt;.</source>
          <target state="translated">バンドルは &lt;code&gt;http://localhost:8080/assets/bundle.js&lt;/code&gt; として利用できるようになります。</target>
        </trans-unit>
        <trans-unit id="117b01d486ab05dc2a1b9418e5da87dc9698edff" translate="yes" xml:space="preserve">
          <source>The bundle with external dependencies can be used in various module contexts, such as &lt;a href=&quot;../concepts/modules&quot;&gt;CommonJS, AMD, global and ES2015 modules&lt;/a&gt;. The external library may be available in any of these forms:</source>
          <target state="translated">外部依存関係のあるバンドルは、&lt;a href=&quot;../concepts/modules&quot;&gt;CommonJS、AMD、グローバル、ES2015モジュール&lt;/a&gt;などのさまざまなモジュールコンテキストで使用できます。外部ライブラリは、次のいずれかの形式で利用できます。</target>
        </trans-unit>
        <trans-unit id="d8ac10f7b894229890ea38ddef1c239a04440579" translate="yes" xml:space="preserve">
          <source>The bundled files will be available in the browser under this path.</source>
          <target state="translated">バンドルされたファイルは、このパスの下にあるブラウザで利用可能になります。</target>
        </trans-unit>
        <trans-unit id="5b301ff5f26e6e3457e880e7aa52e034b6cdffe9" translate="yes" xml:space="preserve">
          <source>The chunk assets have been optimized.</source>
          <target state="translated">チャンク資産が最適化されました。</target>
        </trans-unit>
        <trans-unit id="f12d781d5ccfce31d9164c466ca027e17c249776" translate="yes" xml:space="preserve">
          <source>The chunk is requested, when you require the bundle.</source>
          <target state="translated">バンドルが必要な場合は、チャンクを要求します。</target>
        </trans-unit>
        <trans-unit id="34a6deff48e1d6a0c1e725fa06e2ce2bc0d257ae" translate="yes" xml:space="preserve">
          <source>The command to start webpack-dev-server can then be changed to this:</source>
          <target state="translated">そして、webpack-dev-serverを起動するコマンドをこのように変更することができます。</target>
        </trans-unit>
        <trans-unit id="3789f3b9960fd99acb1e00a2ccf2ffd85b4a7fd4" translate="yes" xml:space="preserve">
          <source>The compiler ensures that module IDs and chunk IDs are consistent between these builds. It typically stores these IDs in memory (e.g. with &lt;a href=&quot;../configuration/dev-server&quot;&gt;webpack-dev-server&lt;/a&gt;), but it's also possible to store them in a JSON file.</source>
          <target state="translated">コンパイラーは、モジュールIDとチャンクIDがこれらのビルド間で一貫していることを確認します。通常、これらのIDはメモリに保存されます（例：&lt;a href=&quot;../configuration/dev-server&quot;&gt;webpack-dev-serverを使用&lt;/a&gt;）。ただし、JSONファイルに保存することもできます。</target>
        </trans-unit>
        <trans-unit id="a788f2ca0f3e40c85c64806e9b2de8d22c971d5e" translate="yes" xml:space="preserve">
          <source>The configuration above has defined a &lt;code&gt;rules&lt;/code&gt; property for a single module with two required properties: &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;use&lt;/code&gt;. This tells webpack's compiler the following:</source>
          <target state="translated">上記の設定では、 &lt;code&gt;test&lt;/code&gt; と &lt;code&gt;use&lt;/code&gt; の 2つの必須プロパティを持つ単一モジュールの &lt;code&gt;rules&lt;/code&gt; プロパティを定義しています。これは、webpackのコンパイラに次のことを伝えます。</target>
        </trans-unit>
        <trans-unit id="a9919e757b665eea3b236fa8b39ebf3977dac665" translate="yes" xml:space="preserve">
          <source>The configuration is the same, switch out &lt;code&gt;sass-loader&lt;/code&gt; for &lt;code&gt;less-loader&lt;/code&gt; when necessary.</source>
          <target state="translated">設定は同じですが、必要に応じて &lt;code&gt;sass-loader&lt;/code&gt; を &lt;code&gt;less-loader&lt;/code&gt; ためにsass-loaderを切り替えます。</target>
        </trans-unit>
        <trans-unit id="7f4253f2f740bbba896793645215e3f4e3bbd342" translate="yes" xml:space="preserve">
          <source>The consumer also can use the library by loading it via a script tag:</source>
          <target state="translated">また、消費者はスクリプトタグを介してライブラリを読み込むことで、ライブラリを利用することができます。</target>
        </trans-unit>
        <trans-unit id="2364eb772d89ad06b53d703338f09b71a5aff0a6" translate="yes" xml:space="preserve">
          <source>The content of the dll is accessible under a module prefix. i.e. with &lt;code&gt;scope = &quot;xyz&quot;&lt;/code&gt; a file &lt;code&gt;abc&lt;/code&gt; in the dll can be access via &lt;code&gt;require(&quot;xyz/abc&quot;)&lt;/code&gt;.</source>
          <target state="translated">dllのコンテンツには、モジュールプレフィックスでアクセスできます。つまり、 &lt;code&gt;scope = &quot;xyz&quot;&lt;/code&gt; すると、dll内のファイル &lt;code&gt;abc&lt;/code&gt; に &lt;code&gt;require(&quot;xyz/abc&quot;)&lt;/code&gt; を介してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="11ae20ea60d038bb99e3a1098b149daca67d4310" translate="yes" xml:space="preserve">
          <source>The content of the dll is mapped to the current directory. If a required file matches a file in the dll (after resolving), then the file from the dll is used instead.</source>
          <target state="translated">dllの内容はカレントディレクトリにマップされる。必要なファイルがDLL内のファイルと一致する場合(解決後)、DLLのファイルが代わりに使用される。</target>
        </trans-unit>
        <trans-unit id="708e4611472f279bbeba23fd301b7b262d8b3c33" translate="yes" xml:space="preserve">
          <source>The context module also contains some runtime logic to access the map.</source>
          <target state="translated">コンテキストモジュールには、マップにアクセスするためのランタイムロジックも含まれています。</target>
        </trans-unit>
        <trans-unit id="3bb6021b3aba746e4cb4d8440fb0a5fe485718c3" translate="yes" xml:space="preserve">
          <source>The coolest part of everything mentioned above, is that loading assets this way allows you to group modules and assets together in a more intuitive way. Instead of relying on a global &lt;code&gt;/assets&lt;/code&gt; directory that contains everything, you can group assets with the code that uses them. For example, a structure like this can be very useful:</source>
          <target state="translated">上記のすべての最もクールな部分は、この方法でアセットをロードすると、モジュールとアセットをより直感的な方法でグループ化できることです。すべてを含むグローバル &lt;code&gt;/assets&lt;/code&gt; ディレクトリに依存する代わりに、アセットを使用するコードでアセットをグループ化できます。たとえば、次のような構造は非常に便利です。</target>
        </trans-unit>
        <trans-unit id="f3e4f99776cfd10bf043a53e3dc62767ec7acb98" translate="yes" xml:space="preserve">
          <source>The default value is an empty string &lt;code&gt;&quot;&quot;&lt;/code&gt;.</source>
          <target state="translated">デフォルト値は空の文字列 &lt;code&gt;&quot;&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a0f3744670086d967a82bcb9b8b24e02fa908f0e" translate="yes" xml:space="preserve">
          <source>The dependencies for your library will be defined by the &lt;a href=&quot;externals&quot;&gt;&lt;code&gt;externals&lt;/code&gt;&lt;/a&gt; config.</source>
          <target state="translated">ライブラリの依存関係は&lt;a href=&quot;externals&quot;&gt; &lt;code&gt;externals&lt;/code&gt; &lt;/a&gt;設定によって定義されます。</target>
        </trans-unit>
        <trans-unit id="e550230c9fc8a5a10bf3c0c43fb181c596afa9bd" translate="yes" xml:space="preserve">
          <source>The dependency module can be from the application code or a third party library. The resolver helps webpack find the module code that needs to be included in the bundle for every such &lt;code&gt;require&lt;/code&gt;/&lt;code&gt;import&lt;/code&gt; statement. webpack uses &lt;a href=&quot;https://github.com/webpack/enhanced-resolve&quot;&gt;enhanced-resolve&lt;/a&gt; to resolve file paths while bundling modules.</source>
          <target state="translated">依存関係モジュールは、アプリケーションコードまたはサードパーティのライブラリからのものです。リゾルバーは、このような &lt;code&gt;require&lt;/code&gt; / &lt;code&gt;import&lt;/code&gt; ステートメントごとに、バンドルに含める必要があるモジュールコードをwebpackが見つけるのに役立ちます。webpackは、&lt;a href=&quot;https://github.com/webpack/enhanced-resolve&quot;&gt;enhanced-resolve&lt;/a&gt;を使用して、モジュールをバンドルする際にファイルパスを解決します。</target>
        </trans-unit>
        <trans-unit id="8d540fc23da7657e0a52f955d13989f2f80069e5" translate="yes" xml:space="preserve">
          <source>The deprecated webpack 1 constructor &lt;code&gt;new webpack.optimize.CommonsChunkPlugin(options, filenameTemplate, selectedChunks, minChunks)&lt;/code&gt; is no longer supported. Use a corresponding options object instead.</source>
          <target state="translated">非推奨のwebpack 1コンストラクター &lt;code&gt;new webpack.optimize.CommonsChunkPlugin(options, filenameTemplate, selectedChunks, minChunks)&lt;/code&gt; はサポートされなくなりました。代わりに、対応するオプションオブジェクトを使用してください。</target>
        </trans-unit>
        <trans-unit id="72453a9bde8a4946f5cce2f9940ffc13f8a61a43" translate="yes" xml:space="preserve">
          <source>The dev-server makes use of the powerful &lt;a href=&quot;https://github.com/chimurai/http-proxy-middleware&quot;&gt;http-proxy-middleware&lt;/a&gt; package. Checkout its &lt;a href=&quot;https://github.com/chimurai/http-proxy-middleware#options&quot;&gt;documentation&lt;/a&gt; for more advanced usages.</source>
          <target state="translated">開発サーバーは、強力な&lt;a href=&quot;https://github.com/chimurai/http-proxy-middleware&quot;&gt;http-proxy-middleware&lt;/a&gt;パッケージを利用します。より高度な使用法については、その&lt;a href=&quot;https://github.com/chimurai/http-proxy-middleware#options&quot;&gt;ドキュメント&lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="6c18a4469d6bbf0544a03a7f1589a9b97bc3e787" translate="yes" xml:space="preserve">
          <source>The enabled rules for minimizing by default are the following ones:</source>
          <target state="translated">デフォルトで有効になっている最小化のルールは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="bd76b56f90cc7ad0a0f72461fe52bce7d07a8517" translate="yes" xml:space="preserve">
          <source>The encoding to use when generating the hash, defaults to &lt;code&gt;'hex'&lt;/code&gt;. All encodings from Node.JS' &lt;a href=&quot;https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding&quot;&gt;&lt;code&gt;hash.digest&lt;/code&gt;&lt;/a&gt; are supported. Using &lt;code&gt;'base64'&lt;/code&gt; for filenames might be problematic since it has the character &lt;code&gt;/&lt;/code&gt; in its alphabet. Likewise &lt;code&gt;'latin1'&lt;/code&gt; could contain any character.</source>
          <target state="translated">ハッシュを生成するときに使用するエンコーディング。デフォルトは &lt;code&gt;'hex'&lt;/code&gt; です。Node.JSの&lt;a href=&quot;https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding&quot;&gt; &lt;code&gt;hash.digest&lt;/code&gt; &lt;/a&gt;からのすべてのエンコーディングがサポートされています。ファイル名に &lt;code&gt;'base64'&lt;/code&gt; を使用すると、アルファベットに &lt;code&gt;/&lt;/code&gt; が含まれるため、問題が発生する可能性があります。同様に、 &lt;code&gt;'latin1'&lt;/code&gt; は任意の文字を含めることができます。</target>
        </trans-unit>
        <trans-unit id="b02a1c64523524bd6887bba721827df362037305" translate="yes" xml:space="preserve">
          <source>The entries chunks are decorated to form a library &lt;code&gt;name&lt;/code&gt; of type &lt;code&gt;type&lt;/code&gt;.</source>
          <target state="translated">エントリのチャンクは、タイプ &lt;code&gt;type&lt;/code&gt; のライブラリ &lt;code&gt;name&lt;/code&gt; を形成するように装飾されています。</target>
        </trans-unit>
        <trans-unit id="f6cf3d762c8a748dfe2b4b1ed7cec7a292cb77cb" translate="yes" xml:space="preserve">
          <source>The entry object is where webpack looks to start building the bundle. The context is an absolute string to the directory that contains the entry files.</source>
          <target state="translated">エントリオブジェクトは、webpack がバンドルの構築を開始する場所です。コンテキストは、エントリファイルを含むディレクトリへの絶対文字列です。</target>
        </trans-unit>
        <trans-unit id="0607d4a03e47e5ea4019d6170f114d90e541894a" translate="yes" xml:space="preserve">
          <source>The example above will create a &lt;code&gt;lib.js&lt;/code&gt; and &lt;code&gt;lib.node.js&lt;/code&gt; file in your &lt;code&gt;dist&lt;/code&gt; folder.</source>
          <target state="translated">上記の例では、 &lt;code&gt;dist&lt;/code&gt; フォルダーに &lt;code&gt;lib.js&lt;/code&gt; および &lt;code&gt;lib.node.js&lt;/code&gt; ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="550fb5db8af67f8ea949e6d036a7d750562bb809" translate="yes" xml:space="preserve">
          <source>The example above will only give you performance hints based on &lt;code&gt;.js&lt;/code&gt; files.</source>
          <target state="translated">上記の例は、 &lt;code&gt;.js&lt;/code&gt; ファイルに基づいたパフォーマンスのヒントのみを提供します。</target>
        </trans-unit>
        <trans-unit id="8cd99ede41e0d24db8a2e291b6738350a5b14058" translate="yes" xml:space="preserve">
          <source>The examples in this guide stem from &lt;a href=&quot;getting-started&quot;&gt;getting started&lt;/a&gt;, &lt;a href=&quot;output-management&quot;&gt;output management&lt;/a&gt; and &lt;a href=&quot;code-splitting&quot;&gt;code splitting&lt;/a&gt;.</source>
          <target state="translated">このガイドの例は、&lt;a href=&quot;getting-started&quot;&gt;開始&lt;/a&gt;、&lt;a href=&quot;output-management&quot;&gt;出力管理&lt;/a&gt;、および&lt;a href=&quot;code-splitting&quot;&gt;コード分​​割に基づいてい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="2e118d1734b9ca216adaa508bfc0d9a7da7241a5" translate="yes" xml:space="preserve">
          <source>The exported function has 3 properties: &lt;code&gt;resolve&lt;/code&gt;, &lt;code&gt;keys&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">エクスポートされた関数には、 &lt;code&gt;resolve&lt;/code&gt; 、 &lt;code&gt;keys&lt;/code&gt; 、 &lt;code&gt;id&lt;/code&gt; の 3つのプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="389b350eb8413c4a925b5a6a40afccde32eca5c0" translate="yes" xml:space="preserve">
          <source>The extensions/suffixes which that are used when resolving loaders. Since version two, we &lt;a href=&quot;../guides/migrating#automatic-loader-module-name-extension-removed&quot;&gt;strongly recommend&lt;/a&gt; using the full name, e.g. &lt;code&gt;example-loader&lt;/code&gt;, as much as possible for clarity. However, if you really wanted to exclude the &lt;code&gt;-loader&lt;/code&gt; bit, i.e. just use &lt;code&gt;example&lt;/code&gt;, you can use this option to do so:</source>
          <target state="translated">ローダーを解決するときに使用される拡張機能/サフィックス。バージョン2以降、わかりやすくするために、可能な限り完全な名前、たとえば &lt;code&gt;example-loader&lt;/code&gt; を使用することを&lt;a href=&quot;../guides/migrating#automatic-loader-module-name-extension-removed&quot;&gt;強くお勧め&lt;/a&gt;します。ただし、本当に &lt;code&gt;-loader&lt;/code&gt; ビットを除外する場合、つまり単に &lt;code&gt;example&lt;/code&gt; を使用する場合は、このオプションを使用してそれを行うことができます。</target>
        </trans-unit>
        <trans-unit id="794aa4e261a7c6a0554650d5905cee89cc73cfa7" translate="yes" xml:space="preserve">
          <source>The extract-loader evaluates the given source code on the fly and returns the result as string. Its main use-case is to resolve urls within HTML and CSS coming from their respective loaders. Use the &lt;a href=&quot;file-loader&quot;&gt;file-loader&lt;/a&gt; to emit the extract-loader's result as separate file.</source>
          <target state="translated">抽出ローダーは、指定されたソースコードをオンザフライで評価し、結果を文字列として返します。その主な使用例は、それぞれのローダーからのHTMLおよびCSS内のURLを解決することです。&lt;a href=&quot;file-loader&quot;&gt;ファイルローダー&lt;/a&gt;を使用して、抽出ローダーの結果を別のファイルとして出力します。</target>
        </trans-unit>
        <trans-unit id="453084e89f5428bcc7e5ed45107b51b910c05098" translate="yes" xml:space="preserve">
          <source>The extract-loader works similar to the &lt;a href=&quot;../plugins/extract-text-webpack-plugin&quot;&gt;extract-text-webpack-plugin&lt;/a&gt; and is meant as a lean alternative to it. When evaluating the source code, it provides a fake context which was especially designed to cope with the code generated by the &lt;a href=&quot;html-loader&quot;&gt;html-&lt;/a&gt; or the &lt;a href=&quot;css-loader&quot;&gt;css-loader&lt;/a&gt;. Thus it might not work in other situations.</source>
          <target state="translated">extract-loaderは&lt;a href=&quot;../plugins/extract-text-webpack-plugin&quot;&gt;extract-text-webpack-plugin&lt;/a&gt;と同様に機能し、それに代わる無駄のない手段として意図されています。ソースコードを評価するとき、それは&lt;a href=&quot;html-loader&quot;&gt;html-&lt;/a&gt;または&lt;a href=&quot;css-loader&quot;&gt;css-loader&lt;/a&gt;によって生成されたコードに対処するために特に設計された偽のコンテキストを提供します。したがって、他の状況では機能しない可能性があります。</target>
        </trans-unit>
        <trans-unit id="16d5d63de6fda830696b84c6adce09e4cc8d99c4" translate="yes" xml:space="preserve">
          <source>The fallback loader will receive the same configuration options as url-loader.</source>
          <target state="translated">フォールバックローダーは、 url-ローダーと同じ設定オプションを受け取ります。</target>
        </trans-unit>
        <trans-unit id="24a12e3645cc54e3f1d24478d16f98c7ce1b82c6" translate="yes" xml:space="preserve">
          <source>The file extension is then resolved in a similar way using the &lt;code&gt;resolve.extensions&lt;/code&gt; option.</source>
          <target state="translated">ファイル拡張子は、 &lt;code&gt;resolve.extensions&lt;/code&gt; オプションを使用して、同様の方法で解決されます。</target>
        </trans-unit>
        <trans-unit id="19c2603ed5d45d2ba7f1dcca02a02345da1c6750" translate="yes" xml:space="preserve">
          <source>The file extension of the target file/resource.</source>
          <target state="translated">対象となるファイル/リソースのファイル拡張子。</target>
        </trans-unit>
        <trans-unit id="8117b59c7f4e6ea23fdb3229936a65a8a033880e" translate="yes" xml:space="preserve">
          <source>The file is requested when you require the &lt;code&gt;bundle-loader&lt;/code&gt;. If you want it to request it lazy, use:</source>
          <target state="translated">&lt;code&gt;bundle-loader&lt;/code&gt; が必要なときにファイルが要求されます。遅延を要求する場合は、次を使用します。</target>
        </trans-unit>
        <trans-unit id="66e51225d686d671805bbc321a2ba8d33de15225" translate="yes" xml:space="preserve">
          <source>The file where the extracted comments will be stored. Can be either a &lt;code&gt;{String}&lt;/code&gt; or a &lt;code&gt;{Function&amp;lt;(string) -&amp;gt; {String}&amp;gt;}&lt;/code&gt;, which will be given the original filename. Default is to append the suffix &lt;code&gt;.LICENSE&lt;/code&gt; to the original filename</source>
          <target state="translated">抽出されたコメントが保存されるファイル。 &lt;code&gt;{String}&lt;/code&gt; または &lt;code&gt;{Function&amp;lt;(string) -&amp;gt; {String}&amp;gt;}&lt;/code&gt; いずれかで、元のファイル名が与えられます。デフォルトでは、サフィックス &lt;code&gt;.LICENSE&lt;/code&gt; を元のファイル名に追加します</target>
        </trans-unit>
        <trans-unit id="5c0ad8e4b7dc560580c3d7f3e7a9b350ee96549f" translate="yes" xml:space="preserve">
          <source>The file where the extracted comments will be stored. Default is to append the suffix &lt;code&gt;.LICENSE&lt;/code&gt; to the original filename.</source>
          <target state="translated">抽出されたコメントが保存されるファイル。デフォルトでは、元のファイル名にサフィックス &lt;code&gt;.LICENSE&lt;/code&gt; が追加されます。</target>
        </trans-unit>
        <trans-unit id="42691448a39272a04c7623d4ac9237529f167323" translate="yes" xml:space="preserve">
          <source>The filename that is considered the index file.</source>
          <target state="translated">インデックスファイルとみなされるファイル名。</target>
        </trans-unit>
        <trans-unit id="9a7fe9404151c99b0fe504095a9cff5fbb57d21c" translate="yes" xml:space="preserve">
          <source>The filename to be used while resolving directories. Default:</source>
          <target state="translated">ディレクトリを解決するときに使われるファイル名。デフォルト。</target>
        </trans-unit>
        <trans-unit id="1adb1b5390fbdfac478c72a15607cdb2748376e0" translate="yes" xml:space="preserve">
          <source>The first and last are expected -- it's the &lt;code&gt;vendor&lt;/code&gt; hash we want to fix. Luckily, there are two plugins we can use to resolve this issue. The first is the &lt;code&gt;NamedModulesPlugin&lt;/code&gt;, which will use the path to the module rather than a numerical identifier. While this plugin is useful during development for more readable output, it does take a bit longer to run. The second option is the &lt;a href=&quot;../plugins/hashed-module-ids-plugin&quot;&gt;&lt;code&gt;HashedModuleIdsPlugin&lt;/code&gt;&lt;/a&gt;, which is recommended for production builds:</source>
          <target state="translated">最初と最後が予想されます- 修正したい &lt;code&gt;vendor&lt;/code&gt; ハッシュです。幸い、この問題を解決するために使用できるプラグインが2つあります。1つは &lt;code&gt;NamedModulesPlugin&lt;/code&gt; で、数値識別子ではなくモジュールへのパスを使用します。このプラグインは、開発中に出力を読みやすくするのに役立ちますが、実行に少し時間がかかります。2番目のオプションは&lt;a href=&quot;../plugins/hashed-module-ids-plugin&quot;&gt; &lt;code&gt;HashedModuleIdsPlugin&lt;/code&gt; で&lt;/a&gt;、本番ビルドで推奨されます。</target>
        </trans-unit>
        <trans-unit id="285df81918288a75eff9819c28e80e90c6e6647c" translate="yes" xml:space="preserve">
          <source>The first argument must be an &lt;code&gt;Error&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;</source>
          <target state="translated">最初の引数は &lt;code&gt;Error&lt;/code&gt; または &lt;code&gt;null&lt;/code&gt; でなければなりません</target>
        </trans-unit>
        <trans-unit id="5d624090a9474a6049647db4976a8af625747830" translate="yes" xml:space="preserve">
          <source>The first loader is passed one argument: the content of the resource file. The compiler expects a result from the last loader. The result should be a &lt;code&gt;String&lt;/code&gt; or a &lt;code&gt;Buffer&lt;/code&gt; (which is converted to a string), representing the JavaScript source code of the module. An optional SourceMap result (as JSON object) may also be passed.</source>
          <target state="translated">最初のローダーには、リソースファイルのコンテンツという1つの引数が渡されます。コンパイラーは、最後のローダーからの結果を予期します。結果がなければならない &lt;code&gt;String&lt;/code&gt; や &lt;code&gt;Buffer&lt;/code&gt; モジュールのJavaScriptソースコードを表す、（文字列に変換されます）。オプションのSourceMap結果（JSONオブジェクトとして）も渡すことができます。</target>
        </trans-unit>
        <trans-unit id="526e4cbb061a7ecff58a71d4a1abe32510b836e6" translate="yes" xml:space="preserve">
          <source>The first of these two points is definitely an issue for our example, as &lt;code&gt;lodash&lt;/code&gt; is also imported within &lt;code&gt;./src/index.js&lt;/code&gt; and will thus be duplicated in both bundles. Let's remove this duplication by using the &lt;code&gt;SplitChunks&lt;/code&gt; plugin.</source>
          <target state="translated">&lt;code&gt;lodash&lt;/code&gt; も &lt;code&gt;./src/index.js&lt;/code&gt; 内にインポートされ、両方のバンドルで複製されるため、これら2つのポイントの最初の点は、この例では間違いなく問題です。 &lt;code&gt;SplitChunks&lt;/code&gt; プラグインを使用して、この重複を削除しましょう。</target>
        </trans-unit>
        <trans-unit id="7d9234d6eea4d64eafd089788ed4bb6c494468bd" translate="yes" xml:space="preserve">
          <source>The first parameter of the tap method of the compiler hook should be a camelized version of the plugin name. It is advisable to use a constant for this so it can be reused in all hooks.</source>
          <target state="translated">コンパイラフックの tap メソッドの最初のパラメータは、プラグイン名の camelized バージョンでなければなりません。すべてのフックで再利用できるように、これには定数を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4ef7ab2fdbe131166ce0f45896431e42dc48f933" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;webpack.config.js&lt;/code&gt; can load CSS files, embed small PNG/JPG/GIF/SVG images as well as fonts as &lt;a href=&quot;https://tools.ietf.org/html/rfc2397&quot;&gt;Data URLs&lt;/a&gt; and copy larger files to the output directory.</source>
          <target state="translated">次の &lt;code&gt;webpack.config.js&lt;/code&gt; は、CSSファイルを読み込み、小さなPNG / JPG / GIF / SVG画像とフォントを&lt;a href=&quot;https://tools.ietf.org/html/rfc2397&quot;&gt;データURL&lt;/a&gt;として埋め込み、大きなファイルを出力ディレクトリにコピーできます。</target>
        </trans-unit>
        <trans-unit id="e09c768c657b45613fcdaaddfbfe084cc9e39dd6" translate="yes" xml:space="preserve">
          <source>The following NPM installation will make &lt;code&gt;webpack&lt;/code&gt; available globally:</source>
          <target state="translated">次のNPMインストールは、 &lt;code&gt;webpack&lt;/code&gt; をグローバルに利用できるようにします。</target>
        </trans-unit>
        <trans-unit id="e57f2c4591b00f570d0a42bac7dba6e81f6332bc" translate="yes" xml:space="preserve">
          <source>The following approach will not work either:</source>
          <target state="translated">以下のような方法では、どちらもうまくいきません。</target>
        </trans-unit>
        <trans-unit id="3a2f57e1f4b8865d88e8bbdcf153e1450567e0da" translate="yes" xml:space="preserve">
          <source>The following article will walk through both of these use cases.</source>
          <target state="translated">次の記事では、この2つのユースケースについて解説します。</target>
        </trans-unit>
        <trans-unit id="678973c41a6b79f5b722e9b40c1f281d633c89b0" translate="yes" xml:space="preserve">
          <source>The following best practices should help whether or not you are in &lt;a href=&quot;development&quot;&gt;development&lt;/a&gt; or building for &lt;a href=&quot;production&quot;&gt;production&lt;/a&gt;.</source>
          <target state="translated">次のベストプラクティスは、&lt;a href=&quot;development&quot;&gt;開発中&lt;/a&gt;または&lt;a href=&quot;production&quot;&gt;本番&lt;/a&gt;用に構築しているかどうかに役立ちます。</target>
        </trans-unit>
        <trans-unit id="bd3d71fbc90b4965eee8e8c2d91c6a81f72260f9" translate="yes" xml:space="preserve">
          <source>The following code would exclude source maps for any modules in the &lt;code&gt;vendor.js&lt;/code&gt; bundle:</source>
          <target state="translated">次のコードは、 &lt;code&gt;vendor.js&lt;/code&gt; バンドルのモジュールのソースマップを除外します。</target>
        </trans-unit>
        <trans-unit id="8709f36c191d4f117275510a4bc1f38092fe4b33" translate="yes" xml:space="preserve">
          <source>The following configuration disables automatic per-file runtime injection in babel, instead requiring &lt;code&gt;babel-plugin-transform-runtime&lt;/code&gt; and making all helper references use it.</source>
          <target state="translated">次の構成では、babelでのファイルごとの自動ランタイムインジェクションが無効になり、代わりに &lt;code&gt;babel-plugin-transform-runtime&lt;/code&gt; が必要になり、すべてのヘルパー参照がそれを使用するようになります。</target>
        </trans-unit>
        <trans-unit id="8fe90b1288f44498fb756129bc5a0a2af786bb67" translate="yes" xml:space="preserve">
          <source>The following configurations are supported:</source>
          <target state="translated">以下の構成に対応しています。</target>
        </trans-unit>
        <trans-unit id="b13725a6ae447ef21a0afad19188e76009a3e8cf" translate="yes" xml:space="preserve">
          <source>The following examples below describe how webpack's configuration object can be both expressive and configurable because &lt;em&gt;it is code&lt;/em&gt;:</source>
          <target state="translated">以下の例では、webpackの構成オブジェクト&lt;em&gt;がコードである&lt;/em&gt;ため、表現力と構成可能性の両方を実現する方法を説明し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="d845fb6e558a229ab97eb2a6aba515891d721d5b" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate a few ways this plugin can be used.</source>
          <target state="translated">以下の例は、このプラグインを使用する方法をいくつか示しています。</target>
        </trans-unit>
        <trans-unit id="26f4af435cad2a96ac6af4b806fbcad458532c0d" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate some common use cases for this plugin.</source>
          <target state="translated">以下の例は、このプラグインの一般的な使用例を示しています。</target>
        </trans-unit>
        <trans-unit id="1849f61df45d0162d9079faaf0c67c7edbd85004" translate="yes" xml:space="preserve">
          <source>The following examples show how one might use &lt;code&gt;file-loader&lt;/code&gt; and what the result would be.</source>
          <target state="translated">次の例は、 &lt;code&gt;file-loader&lt;/code&gt; 使用方法とその結果を示しています。</target>
        </trans-unit>
        <trans-unit id="a052f6a1445904f054ec0a6caedf2123b8ca8e0e" translate="yes" xml:space="preserve">
          <source>The following lifecycle hooks are exposed by the &lt;code&gt;compiler&lt;/code&gt; and can be accessed as such:</source>
          <target state="translated">次のライフサイクルフックは &lt;code&gt;compiler&lt;/code&gt; によって公開され、そのようにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="a0b945c38650ddf7d6afcf4290fc738ecb312a93" translate="yes" xml:space="preserve">
          <source>The following lifecycle hooks are exposed by the &lt;code&gt;parser&lt;/code&gt; and can be accessed as such:</source>
          <target state="translated">次のライフサイクルフックは &lt;code&gt;parser&lt;/code&gt; によって公開され、そのようにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="d72a562a0b2950b13a0175ee7b8eb0439c9a57b5" translate="yes" xml:space="preserve">
          <source>The following methods are supported...</source>
          <target state="translated">以下の方法がサポートされています...</target>
        </trans-unit>
        <trans-unit id="e4d77afab2cb5c0e79177397fed4c21c74e5e9f3" translate="yes" xml:space="preserve">
          <source>The following options are accepted:</source>
          <target state="translated">以下の選択肢があります。</target>
        </trans-unit>
        <trans-unit id="c50a926ca6ac44ce44b0b0c4408cf022677665b6" translate="yes" xml:space="preserve">
          <source>The following options are ideal for development:</source>
          <target state="translated">開発には以下のようなオプションが最適です。</target>
        </trans-unit>
        <trans-unit id="d84d03f469cd5c6bd18b7e42fd7802b60d6ad892" translate="yes" xml:space="preserve">
          <source>The following options are not ideal for development nor production. They are needed for some special cases, i. e. for some 3rd party tools.</source>
          <target state="translated">以下のオプションは、開発や生産には理想的ではありません。これらのオプションは、いくつかの特別なケース、つまりサードパーティ製のツールのために必要です。</target>
        </trans-unit>
        <trans-unit id="3ab6a9f1a0bbaef19cacfbc5c31136467bf2e22d" translate="yes" xml:space="preserve">
          <source>The following options are supported:</source>
          <target state="translated">以下のオプションがサポートされています。</target>
        </trans-unit>
        <trans-unit id="df764edfdfccdeb5073770c5372a6d62f6fea17c" translate="yes" xml:space="preserve">
          <source>The following parameters are supported in the order specified above:</source>
          <target state="translated">上記で指定した順に以下のパラメータがサポートされています。</target>
        </trans-unit>
        <trans-unit id="f0dd5a0b610e80f1bc7f0e825cff0c25a34dce73" translate="yes" xml:space="preserve">
          <source>The following pseudo JavaScript explains the algorithm:</source>
          <target state="translated">以下、疑似的なJavaScriptでアルゴリズムを説明します。</target>
        </trans-unit>
        <trans-unit id="358a3d576958f5f1b3e7c42e523d1d2554052390" translate="yes" xml:space="preserve">
          <source>The following sections provide some basic examples of the different types of loaders. Note that the &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;meta&lt;/code&gt; parameters are optional, see &lt;a href=&quot;loaders#this-callback&quot;&gt;&lt;code&gt;this.callback&lt;/code&gt;&lt;/a&gt; below.</source>
          <target state="translated">以下のセクションでは、さまざまなタイプのローダーの基本的な例をいくつか示します。 &lt;code&gt;map&lt;/code&gt; パラメータと &lt;code&gt;meta&lt;/code&gt; パラメータはオプションであることに注意してください。以下の&lt;a href=&quot;loaders#this-callback&quot;&gt; &lt;code&gt;this.callback&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1c2f6bec656ab12985a3d65fbee3d5f476e86100" translate="yes" xml:space="preserve">
          <source>The following steps allow modules to be swapped in and out of an application:</source>
          <target state="translated">以下の手順で、モジュールをアプリケーションに入れたり出したりすることができます。</target>
        </trans-unit>
        <trans-unit id="eb00badcb3449f08d67086ef9131607ceef57096" translate="yes" xml:space="preserve">
          <source>The following steps are especially useful in &lt;em&gt;development&lt;/em&gt;.</source>
          <target state="translated">次の手順は、&lt;em&gt;開発に&lt;/em&gt;特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="4308c488d5fc825f759c2149b59c6977cd8020af" translate="yes" xml:space="preserve">
          <source>The following steps are especially useful in &lt;em&gt;production&lt;/em&gt;.</source>
          <target state="translated">次の手順は、&lt;em&gt;本番&lt;/em&gt;環境で特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="b7cdaed98fa9728f3dcb7fbd1bd9e9dde0fef43e" translate="yes" xml:space="preserve">
          <source>The following steps can increase the speed of resolving:</source>
          <target state="translated">以下の手順を踏むことで、解決のスピードを上げることができます。</target>
        </trans-unit>
        <trans-unit id="78064ebad412dafd7f97cab0302ad0ffbb211b83" translate="yes" xml:space="preserve">
          <source>The following string values are supported via &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js&quot;&gt;&lt;code&gt;WebpackOptionsApply&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">次の文字列値は&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js&quot;&gt; &lt;code&gt;WebpackOptionsApply&lt;/code&gt; で&lt;/a&gt;サポートされています。</target>
        </trans-unit>
        <trans-unit id="58f9d8bd855a58eaf844f5bdd0eb9e6333c59dbe" translate="yes" xml:space="preserve">
          <source>The following string values are supported:</source>
          <target state="translated">以下の文字列値をサポートしています。</target>
        </trans-unit>
        <trans-unit id="292d4638ace13f846ef8f5e4299bbc764dab8797" translate="yes" xml:space="preserve">
          <source>The following substitutions are available in template strings (via webpack's internal &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/ModuleFilenameHelpers.js&quot;&gt;&lt;code&gt;ModuleFilenameHelpers&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="translated">次の置換は、テンプレート文字列で使用できます（webpackの内部&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/ModuleFilenameHelpers.js&quot;&gt; &lt;code&gt;ModuleFilenameHelpers&lt;/code&gt; を使用&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="d43ba6fd87e03b99bf4c08264e8937a094bc5a6c" translate="yes" xml:space="preserve">
          <source>The following substitutions are available in template strings (via webpack's internal &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/TemplatedPathPlugin.js&quot;&gt;&lt;code&gt;TemplatedPathPlugin&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="translated">次の置換は、テンプレート文字列で使用できます（webpackの内部&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/TemplatedPathPlugin.js&quot;&gt; &lt;code&gt;TemplatedPathPlugin&lt;/code&gt; を使用&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="00c83362a2351fb229e86b82b5cc384b190a6627" translate="yes" xml:space="preserve">
          <source>The following syntaxes are accepted...</source>
          <target state="translated">以下の構文が受け入れられます...</target>
        </trans-unit>
        <trans-unit id="cdcae432bd2b6c399318440c9434100436e71338" translate="yes" xml:space="preserve">
          <source>The following table explains other cases:</source>
          <target state="translated">その他のケースについては、以下の表で説明する。</target>
        </trans-unit>
        <trans-unit id="e8d6fb0b5a199393021b21ed46adcf28660dbc55" translate="yes" xml:space="preserve">
          <source>The following tools have certain problems that can degrade build performance.</source>
          <target state="translated">以下のツールには、ビルドのパフォーマンスを低下させる特定の問題があります。</target>
        </trans-unit>
        <trans-unit id="3b4ce38a560cabaa301d282bfce9aac7becbf9e2" translate="yes" xml:space="preserve">
          <source>The following utilities improve performance by compiling and serving assets in memory rather than writing to disk:</source>
          <target state="translated">以下のユーティリティは、ディスクに書き込むのではなく、メモリにアセットをコンパイルして提供することでパフォーマンスを向上させます。</target>
        </trans-unit>
        <trans-unit id="ca15d1d0d8aa11d93d6ca1a567cc9ff1370ac2c0" translate="yes" xml:space="preserve">
          <source>The function, which can return filename [string]</source>
          <target state="translated">ファイル名[文字列]を返すことができる関数</target>
        </trans-unit>
        <trans-unit id="59c7450e94d45d1d7509992f8d7fb34895023310" translate="yes" xml:space="preserve">
          <source>The generated output will be defined with the name &quot;MyLibrary&quot;, i.e.</source>
          <target state="translated">生成される出力は &quot;MyLibrary &quot;という名前で定義されます。</target>
        </trans-unit>
        <trans-unit id="4ee640bb2b9cec6c071382b82b303d30815f1e04" translate="yes" xml:space="preserve">
          <source>The goal of CommonJS is to specify an ecosystem for JavaScript outside the browser. The following CommonJS methods are supported by webpack:</source>
          <target state="translated">CommonJSの目的は、ブラウザ以外のJavaScriptのエコシステムを指定することです。webpackでは以下のCommonJSメソッドがサポートされています。</target>
        </trans-unit>
        <trans-unit id="89250071811de7ae2e1e9e79e9c0f6750a60c64b" translate="yes" xml:space="preserve">
          <source>The goals of &lt;em&gt;development&lt;/em&gt; and &lt;em&gt;production&lt;/em&gt; builds differ greatly. In &lt;em&gt;development&lt;/em&gt;, we want strong source mapping and a localhost server with live reloading or hot module replacement. In &lt;em&gt;production&lt;/em&gt;, our goals shift to a focus on minified bundles, lighter weight source maps, and optimized assets to improve load time. With this logical separation at hand, we typically recommend writing &lt;strong&gt;separate webpack configurations&lt;/strong&gt; for each environment.</source>
          <target state="translated">&lt;em&gt;開発&lt;/em&gt;ビルドと&lt;em&gt;本番&lt;/em&gt;ビルドの目標は大きく異なります。で&lt;em&gt;開発&lt;/em&gt;、我々は強力なソースマッピングやライブリロードまたはホットモジュールの交換とローカルホストサーバーをしたいです。で&lt;em&gt;生産&lt;/em&gt;、私たちの目標は、ロード時間を改善するために縮小さバンドル、軽量ソースマップ、および最適化された資産に焦点をシフトします。この論理的な分離が&lt;strong&gt;近づいている&lt;/strong&gt;ため、通常、環境ごとに&lt;strong&gt;個別のWebpack構成&lt;/strong&gt;を作成することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="e60ad30497663537eaf49d2e92c1776638d808a4" translate="yes" xml:space="preserve">
          <source>The good news is that, while there is some overlap, task runners and bundlers can play well together if approached in the right way. This guide provides a high-level overview of how webpack can be integrated into some of the more popular task runners.</source>
          <target state="translated">良いニュースは、いくつかの重複はあるものの、タスクランナーとバンドルラーは、適切な方法でアプローチすれば、うまく一緒に遊ぶことができるということです。このガイドでは、webpack がどのようにしてより人気のあるタスクランナーのいくつかに統合できるかについて、高レベルの概要を提供します。</target>
        </trans-unit>
        <trans-unit id="6791ae6e37e5d1649383b3ad158ea70d586c7f09" translate="yes" xml:space="preserve">
          <source>The guides get more and more advanced as you go on. Most serve as a starting point, and once completed you should feel more comfortable diving into the actual &lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;documentation&lt;/a&gt;.</source>
          <target state="translated">ガイドは進むにつれてますます高度なものになります。ほとんどが出発点として機能し、完了すると、実際の&lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;ドキュメントに&lt;/a&gt;飛び込みやすくなります。</target>
        </trans-unit>
        <trans-unit id="4ed4a6a2f4161a7511f3c084677b67ac58fdbd34" translate="yes" xml:space="preserve">
          <source>The hash of the chunk content</source>
          <target state="translated">チャンクコンテンツのハッシュ値</target>
        </trans-unit>
        <trans-unit id="5cbf4bef2adda69cc22f1bbb6067da1d45217eae" translate="yes" xml:space="preserve">
          <source>The hash of the module identifier</source>
          <target state="translated">モジュール識別子のハッシュ</target>
        </trans-unit>
        <trans-unit id="0463d3a8c9f9c6747f6d1cdde4358b6206cbd3fe" translate="yes" xml:space="preserve">
          <source>The hashing algorithm to use, defaults to &lt;code&gt;'md4'&lt;/code&gt;. All functions from Node.JS' &lt;a href=&quot;https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options&quot;&gt;&lt;code&gt;crypto.createHash&lt;/code&gt;&lt;/a&gt; are supported. Since &lt;code&gt;4.0.0-alpha2&lt;/code&gt;, the &lt;code&gt;hashFunction&lt;/code&gt; can now be a constructor to a custom hash function. You can provide a non-crypto hash function for performance reasons.</source>
          <target state="translated">使用するハッシュアルゴリズム。デフォルトは &lt;code&gt;'md4'&lt;/code&gt; です。Node.JSの&lt;a href=&quot;https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options&quot;&gt; &lt;code&gt;crypto.createHash&lt;/code&gt; の&lt;/a&gt;すべての関数がサポートされています。 &lt;code&gt;4.0.0-alpha2&lt;/code&gt; 以降、 &lt;code&gt;hashFunction&lt;/code&gt; はカスタムハッシュ関数のコンストラクターになることができます。パフォーマンス上の理由から、非暗号ハッシュ関数を提供できます。</target>
        </trans-unit>
        <trans-unit id="878c17956b8381cfc39a06c30d11d4d9bbcdeec7" translate="yes" xml:space="preserve">
          <source>The html-loader will parse the URLs, require the images and everything you expect. The extract loader will parse the javascript back into a proper html file, ensuring images are required and point to proper path, and the file loader will write the &lt;em&gt;.html&lt;/em&gt; file for you. Example:</source>
          <target state="translated">html-loaderはURLを解析し、必要な画像とすべてを要求します。抽出ローダーはjavascriptを解析して適切なhtmlファイルに戻し、画像が必要であり、適切なパスをポイントしていることを確認します。ファイルローダーが&lt;em&gt;.html&lt;/em&gt;ファイルを書き込みます。例：</target>
        </trans-unit>
        <trans-unit id="cb4462897b8bd3c12c191602b87d8b211ce96cd9" translate="yes" xml:space="preserve">
          <source>The imported &lt;code&gt;webpack&lt;/code&gt; function is fed a webpack &lt;a href=&quot;https://webpack.js.org/configuration/&quot;&gt;Configuration Object&lt;/a&gt; and runs the webpack compiler if a callback function is provided:</source>
          <target state="translated">インポートされた &lt;code&gt;webpack&lt;/code&gt; 関数には、webpack &lt;a href=&quot;https://webpack.js.org/configuration/&quot;&gt;構成オブジェクト&lt;/a&gt;が渡され、コールバック関数が提供されている場合はwebpackコンパイラーを実行します。</target>
        </trans-unit>
        <trans-unit id="33a4cf0e8036e462ed9b4942a05234b23e76115e" translate="yes" xml:space="preserve">
          <source>The imports loader allows you to use modules that depend on specific global variables.</source>
          <target state="translated">インポートローダーを使うと、特定のグローバル変数に依存するモジュールを使うことができます。</target>
        </trans-unit>
        <trans-unit id="7185d7d5136017864a86f672276402ec9aa6fdb6" translate="yes" xml:space="preserve">
          <source>The index in the loaders array of the current loader.</source>
          <target state="translated">現在のローダーのローダー配列のインデックス。</target>
        </trans-unit>
        <trans-unit id="622eb7846c820895ecfaad87d57f13ab3bfdab01" translate="yes" xml:space="preserve">
          <source>The index of a function contained within &lt;code&gt;options.transforms&lt;/code&gt; which to use to transform the target file(s).</source>
          <target state="translated">ターゲットファイルを変換するために使用する &lt;code&gt;options.transforms&lt;/code&gt; 内に含まれる関数のインデックス。</target>
        </trans-unit>
        <trans-unit id="7f184dd511af3ce37021703d7bf7ff188cfdcd35" translate="yes" xml:space="preserve">
          <source>The inner workings here are heavily inspired by &lt;a href=&quot;worker-loader&quot;&gt;worker-loader&lt;/a&gt;. It's worth a read!</source>
          <target state="translated">ここの内部の仕組みは、&lt;a href=&quot;worker-loader&quot;&gt;worker-loaderに&lt;/a&gt;強く影響を受けています。読む価値があります！</target>
        </trans-unit>
        <trans-unit id="43e822b9d87b538c0f6aa00d47a247647f62e872" translate="yes" xml:space="preserve">
          <source>The internal &lt;code&gt;LabeledModulesPlugin&lt;/code&gt; enables you to use the following methods for exporting and requiring within your modules:</source>
          <target state="translated">内部の &lt;code&gt;LabeledModulesPlugin&lt;/code&gt; を使用すると、次のメソッドを使用して、モジュール内でエクスポートおよび要求することができます。</target>
        </trans-unit>
        <trans-unit id="4301641a17ae1438d40dabf59f4701492ac2fb96" translate="yes" xml:space="preserve">
          <source>The internal chunk loading function. Takes two arguments:</source>
          <target state="translated">内部チャンクロード関数。2つの引数を取ります。</target>
        </trans-unit>
        <trans-unit id="3efc7bf124d5e8cb340af1ccedcabdd90e4fa1d3" translate="yes" xml:space="preserve">
          <source>The issuer: An absolute path to the file of the module which requested the resource. It's the location of the import.</source>
          <target state="translated">発行者:リソースを要求したモジュールのファイルへの絶対パス。これはインポートの場所です。</target>
        </trans-unit>
        <trans-unit id="e0f5006bb4c868b9ea27a3396647799ddfdd1706" translate="yes" xml:space="preserve">
          <source>The key &lt;code&gt;main&lt;/code&gt; refers to the &lt;a href=&quot;https://docs.npmjs.com/files/package.json#main&quot;&gt;standard from &lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;module&lt;/code&gt; to &lt;a href=&quot;https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md&quot;&gt;a&lt;/a&gt;&lt;a href=&quot;https://github.com/rollup/rollup/wiki/pkg.module&quot;&gt;proposal&lt;/a&gt; to allow the JavaScript ecosystem upgrade to use ES2015 modules without breaking backwards compatibility.</source>
          <target state="translated">キー &lt;code&gt;main&lt;/code&gt; を参照&lt;a href=&quot;https://docs.npmjs.com/files/package.json#main&quot;&gt;から標準 &lt;code&gt;package.json&lt;/code&gt; &lt;/a&gt;、および &lt;code&gt;module&lt;/code&gt; に&lt;a href=&quot;https://github.com/rollup/rollup/wiki/pkg.module&quot;&gt;提案&lt;/a&gt; JavaScriptのエコシステムは、後方互換性を壊すことなく、ES2015モジュールを使用するようにアップグレードできるようにします。&lt;a href=&quot;https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md&quot;&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e003c18060496c40fdaa02f7ca1fc43ec879fc1c" translate="yes" xml:space="preserve">
          <source>The keyword here is &lt;strong&gt;statically&lt;/strong&gt;. Normal &lt;code&gt;import&lt;/code&gt; statement cannot be used dynamically within other logic or contain variables. See the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;spec&lt;/a&gt; for more information and &lt;code&gt;import()&lt;/code&gt; below for dynamic usage.</source>
          <target state="translated">ここのキーワードは&lt;strong&gt;静的&lt;/strong&gt;です。通常の &lt;code&gt;import&lt;/code&gt; ステートメントは、他のロジック内で動的に使用したり、変数を含めることはできません。詳細については&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;仕様&lt;/a&gt;を、動的使用については以下の &lt;code&gt;import()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="a9d54d05466f8e81e809ba86dee0999b728a7661" translate="yes" xml:space="preserve">
          <source>The latest webpack release is:</source>
          <target state="translated">最新のwebpackのリリースは</target>
        </trans-unit>
        <trans-unit id="5500211f9001a63bab0626a741e206c512be6985" translate="yes" xml:space="preserve">
          <source>The lengths of &lt;code&gt;[hash]&lt;/code&gt; and &lt;code&gt;[chunkhash]&lt;/code&gt; can be specified using &lt;code&gt;[hash:16]&lt;/code&gt; (defaults to 20). Alternatively, specify &lt;a href=&quot;#output-hashdigestlength&quot;&gt;&lt;code&gt;output.hashDigestLength&lt;/code&gt;&lt;/a&gt; to configure the length globally.</source>
          <target state="translated">&lt;code&gt;[hash]&lt;/code&gt; と &lt;code&gt;[chunkhash]&lt;/code&gt; ハッシュ]の長さは、[ハッシュ &lt;code&gt;[hash:16]&lt;/code&gt; を使用して指定できます（デフォルトは20）。または、&lt;a href=&quot;#output-hashdigestlength&quot;&gt; &lt;code&gt;output.hashDigestLength&lt;/code&gt; &lt;/a&gt;を指定して、長さをグローバルに構成します。</target>
        </trans-unit>
        <trans-unit id="75512c1d03470514d5cf05338997168251cab9bd" translate="yes" xml:space="preserve">
          <source>The limit can be specified via loader options and defaults to no limit.</source>
          <target state="translated">制限はローダーオプションで指定でき、デフォルトは制限なしです。</target>
        </trans-unit>
        <trans-unit id="02717a18cddb27586d8d91e9a2358d691d091400" translate="yes" xml:space="preserve">
          <source>The loader allows you to write mixed HTML, CSS and JavaScript Polymer elements and still use the full webpack ecosystem including module bundling and code splitting.</source>
          <target state="translated">このローダーを使用すると、HTML、CSS、JavaScript Polymer 要素を混在させて書くことができ、モジュールのバンドルやコード分割を含む完全な webpack エコシステムを使用することができます。</target>
        </trans-unit>
        <trans-unit id="ae685df6df8c28074d878a1e547602dd9d6ae5cd" translate="yes" xml:space="preserve">
          <source>The loader context represents the properties that are available inside of a loader assigned to the &lt;code&gt;this&lt;/code&gt; property.</source>
          <target state="translated">ローダーコンテキストは、 &lt;code&gt;this&lt;/code&gt; プロパティに割り当てられたローダー内で使用できるプロパティを表します。</target>
        </trans-unit>
        <trans-unit id="607e721094d3631e0620ceb231f0a7e78b6a13d9" translate="yes" xml:space="preserve">
          <source>The loader replaces local selectors with unique identifiers. The choosen unique identifiers are exported by the module.</source>
          <target state="translated">ローダは、ローカルセレクタを一意の識別子に置き換えます。選択された一意の識別子はモジュールによってエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="299350ec237fdcb85e12d63661c686bb20a1954e" translate="yes" xml:space="preserve">
          <source>The loader supports all options supported by &lt;code&gt;istanbul-lib-instrument&lt;/code&gt;</source>
          <target state="translated">ローダーは &lt;code&gt;istanbul-lib-instrument&lt;/code&gt; でサポートされているすべてのオプションをサポートしています</target>
        </trans-unit>
        <trans-unit id="b31bd1bb8fc2430ef42ba02f03db77c3e1639cff" translate="yes" xml:space="preserve">
          <source>The loader transforms your components:</source>
          <target state="translated">ローダはコンポーネントを変換します。</target>
        </trans-unit>
        <trans-unit id="1aeead07c2f08f9b8fc8d5b0f49d1e895dc026c7" translate="yes" xml:space="preserve">
          <source>The loader will only replace a &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; if the href is a relative path. Any link attempting to access an external link i.e. &lt;code&gt;http&lt;/code&gt;, &lt;code&gt;https&lt;/code&gt; or &lt;code&gt;//&lt;/code&gt; will not be replaced.</source>
          <target state="translated">ローダーは、hrefが相対パスの場合にのみ &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; を置き換えます。外部リンク、つまり &lt;code&gt;http&lt;/code&gt; 、 &lt;code&gt;https&lt;/code&gt; 、または &lt;code&gt;//&lt;/code&gt; にアクセスしようとするリンクは置き換えられません。</target>
        </trans-unit>
        <trans-unit id="50aa09ae1377da238a1a8574aee2960a5a76e525" translate="yes" xml:space="preserve">
          <source>The manifest contains the new compilation hash and a list of all updated chunks. Each of these chunks contains the new code for all updated modules (or a flag indicating that the module was removed).</source>
          <target state="translated">マニフェストには、新しいコンパイルハッシュと更新されたすべてのチャンクのリストが含まれています。これらのチャンクのそれぞれには、更新されたすべてのモジュールの新しいコードが含まれています (または、モジュールが削除されたことを示すフラグ)。</target>
        </trans-unit>
        <trans-unit id="22f4b76b689d538d97a9f56b12c6f429c5ca6101" translate="yes" xml:space="preserve">
          <source>The manifest data can be extracted into a json file for easy consumption using the &lt;a href=&quot;https://github.com/danethurber/webpack-manifest-plugin&quot;&gt;&lt;code&gt;WebpackManifestPlugin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">マニフェストデータは、&lt;a href=&quot;https://github.com/danethurber/webpack-manifest-plugin&quot;&gt; &lt;code&gt;WebpackManifestPlugin&lt;/code&gt; &lt;/a&gt;を使用して簡単に使用できるようにjsonファイルに抽出できます。</target>
        </trans-unit>
        <trans-unit id="ca8c533ca9e0eeb7b0f1a5cf47de1c99d487b8a5" translate="yes" xml:space="preserve">
          <source>The minimum requirements for the &lt;code&gt;output&lt;/code&gt; property in your webpack config is to set its value to an object including the following thing:</source>
          <target state="translated">webpack設定の &lt;code&gt;output&lt;/code&gt; プロパティの最小要件は、次の項目を含むオブジェクトにその値を設定することです。</target>
        </trans-unit>
        <trans-unit id="f51cb967bd5a63ed817746d4a2210c7604937c57" translate="yes" xml:space="preserve">
          <source>The module &lt;a href=&quot;https://nodejs.org/api/path.html#path_path_basename_path_ext&quot;&gt;basename&lt;/a&gt;</source>
          <target state="translated">モジュールの&lt;a href=&quot;https://nodejs.org/api/path.html#path_path_basename_path_ext&quot;&gt;ベース名&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2cf9a0f6cdd1a3915e69f0d5d77882cc041b2b99" translate="yes" xml:space="preserve">
          <source>The module also validates found configurations against webpack's options schema to ensure that the configuration is correct before webpack attempts to use it.</source>
          <target state="translated">また、このモジュールは、webpack が使用しようとする前に設定が正しいことを確認するために、webpack のオプションスキーマに対して見つかった設定を検証します。</target>
        </trans-unit>
        <trans-unit id="449ce0de57d3e2a0be319a99debc55b86880760c" translate="yes" xml:space="preserve">
          <source>The module filename</source>
          <target state="translated">モジュールのファイル名</target>
        </trans-unit>
        <trans-unit id="88e0aa6c2168cb0078e139454481c7292d3e21ab" translate="yes" xml:space="preserve">
          <source>The module identifier</source>
          <target state="translated">モジュール識別子</target>
        </trans-unit>
        <trans-unit id="90462cd9df48197a4f39715938a23e7e8c5fa7a7" translate="yes" xml:space="preserve">
          <source>The module is also tested with the following compilers:</source>
          <target state="translated">このモジュールは以下のコンパイラでもテストされています。</target>
        </trans-unit>
        <trans-unit id="1635800c659f8343bb6f76cf0577b6d8050a774a" translate="yes" xml:space="preserve">
          <source>The module name</source>
          <target state="translated">モジュール名</target>
        </trans-unit>
        <trans-unit id="afd3b0e2f82e2ca4daf7fc9a50ca4e0078eb08f5" translate="yes" xml:space="preserve">
          <source>The module query, i.e., the string following &lt;code&gt;?&lt;/code&gt; in the filename</source>
          <target state="translated">モジュールクエリ、つまり &lt;code&gt;?&lt;/code&gt; に続く文字列 ファイル名</target>
        </trans-unit>
        <trans-unit id="af18f009cb9333df7606f5912ce79a0a55814780" translate="yes" xml:space="preserve">
          <source>The modules namespace. This is usually the library name when building as a library, empty otherwise</source>
          <target state="translated">モジュールの名前空間。これは通常、ライブラリとしてビルドする場合はライブラリ名で、そうでない場合は空です。</target>
        </trans-unit>
        <trans-unit id="479f4a5514e62fd84fc68ed0da97f9dd5e36b267" translate="yes" xml:space="preserve">
          <source>The moral of the story is that there are a variety of ways to &lt;code&gt;hook&lt;/code&gt; into the &lt;code&gt;compiler&lt;/code&gt;, each one allowing your plugin to run as it sees fit.</source>
          <target state="translated">この話の教訓は、にさまざまな方法があるということです &lt;code&gt;hook&lt;/code&gt; への &lt;code&gt;compiler&lt;/code&gt; 、それぞれが、それはフィットを見ているとプラグインの実行を可能にします。</target>
        </trans-unit>
        <trans-unit id="ff7aa3f3b92830a27310d668b1d59b019023d65e" translate="yes" xml:space="preserve">
          <source>The most important part to take away from this document is that there are many different ways to format and style your webpack configuration. The key is to stick with something consistent that you and your team can understand and maintain.</source>
          <target state="translated">この文書から取り上げるべき最も重要な部分は、webpack 設定をフォーマットしてスタイルを整えるためには、多くの異なる方法があるということです。重要なのは、あなたとあなたのチームが理解して維持できる一貫性のあるものにこだわることです。</target>
        </trans-unit>
        <trans-unit id="d25fd948c0de18e0c4fa3e7b34e3ac980bb16168" translate="yes" xml:space="preserve">
          <source>The n-th match obtained from matching the current file name against the regExp</source>
          <target state="translated">現在のファイル名と regExp</target>
        </trans-unit>
        <trans-unit id="b6d69ad1e3c80b8f04fd87e8a4a8826c68af723f" translate="yes" xml:space="preserve">
          <source>The name of the &lt;code&gt;browserify&lt;/code&gt; transform you wish to use.</source>
          <target state="translated">使用する &lt;code&gt;browserify&lt;/code&gt; トランスフォームの名前。</target>
        </trans-unit>
        <trans-unit id="304749ae004320108b2d78b3c7dc01ae50172e2e" translate="yes" xml:space="preserve">
          <source>The name of the JSONP function used for chunk loading</source>
          <target state="translated">チャンクの読み込みに使用するJSONP関数の名前</target>
        </trans-unit>
        <trans-unit id="bd981b17d1b1d68795c45fcc3ef348cad98e993a" translate="yes" xml:space="preserve">
          <source>The name of the split chunk. Providing &lt;code&gt;true&lt;/code&gt; will automatically generate a name based on chunks and cache group key. Providing a string or function will allow you to use a custom name. If the name matches an entry point name, the entry point will be removed.</source>
          <target state="translated">分割されたチャンクの名前。提供する &lt;code&gt;true&lt;/code&gt; 自動的にチャンクとキャッシュ・グループ・キーに基づいて名前を生成します。文字列または関数を提供すると、カスタム名を使用できるようになります。名前がエントリポイント名と一致する場合、エントリポイントは削除されます。</target>
        </trans-unit>
        <trans-unit id="a224dab019a12c6616086a01e53970556f85c794" translate="yes" xml:space="preserve">
          <source>The node API for &lt;code&gt;babel&lt;/code&gt; has been moved to &lt;code&gt;babel-core&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;babel&lt;/code&gt; のノードAPIは &lt;code&gt;babel-core&lt;/code&gt; に移動されました。</target>
        </trans-unit>
        <trans-unit id="8b076d7bad0e04847bd9e1af7347fa7a6f1a813c" translate="yes" xml:space="preserve">
          <source>The normal module loader is the function that actually loads all the modules in the module graph (one-by-one).</source>
          <target state="translated">通常のモジュールローダは、実際にモジュールグラフ内のすべてのモジュールを(1つずつ)ロードする機能です。</target>
        </trans-unit>
        <trans-unit id="4f1d19f9faa2d8d0722a0e1e23f02607e587a9c1" translate="yes" xml:space="preserve">
          <source>The object syntax is more verbose. However, this is the most scalable way of defining entry/entries in your application.</source>
          <target state="translated">オブジェクト構文はより冗長です。しかし、これはアプリケーションでエントリ/エントリを定義する最もスケーラブルな方法です。</target>
        </trans-unit>
        <trans-unit id="5154efdb42e2cf3f6948724e000c0d2ef408a7f6" translate="yes" xml:space="preserve">
          <source>The ones performed by UglifyJS</source>
          <target state="translated">UglifyJSで実行されたもの</target>
        </trans-unit>
        <trans-unit id="09bda428bc2298b8b7539bca171a741433df356b" translate="yes" xml:space="preserve">
          <source>The ones performed by webpack</source>
          <target state="translated">webpackで実行されるもの</target>
        </trans-unit>
        <trans-unit id="4bfd2812dad7481714822f78b90c34b30c6ddfde" translate="yes" xml:space="preserve">
          <source>The only downside is that you have to refresh your browser in order to see the changes. It would be much nicer if that would happen automatically as well, so let's try &lt;code&gt;webpack-dev-server&lt;/code&gt; which will do exactly that.</source>
          <target state="translated">唯一の欠点は、変更を確認するためにブラウザーを更新する必要があることです。それが自動的に行われるのであれば、それははるかに優れているので、正確にそれを行う &lt;code&gt;webpack-dev-server&lt;/code&gt; を試してみましょう。</target>
        </trans-unit>
        <trans-unit id="9970124635086c07500f383cb7b08142f6b26d7d" translate="yes" xml:space="preserve">
          <source>The only placeholders allowed here are &lt;code&gt;[id]&lt;/code&gt; and &lt;code&gt;[hash]&lt;/code&gt;, the default being:</source>
          <target state="translated">ここで許可されるプレースホルダーは &lt;code&gt;[id]&lt;/code&gt; と &lt;code&gt;[hash]&lt;/code&gt; のみで、デフォルトは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="d67957273bfa0ed43d68187e13270aeec8738d11" translate="yes" xml:space="preserve">
          <source>The option can be set to a function:</source>
          <target state="translated">オプションに機能を設定することができます。</target>
        </trans-unit>
        <trans-unit id="ca2f308489f3cb4c9753c5ecdf071432bde39e75" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; object can include the following properties:</source>
          <target state="translated">オプションの &lt;code&gt;options&lt;/code&gt; オブジェクトには、次のプロパティを含めることができます。</target>
        </trans-unit>
        <trans-unit id="31ed028b00e592643594c4ed1b5accbc50db710c" translate="yes" xml:space="preserve">
          <source>The output directory as an &lt;strong&gt;absolute&lt;/strong&gt; path.</source>
          <target state="translated">&lt;strong&gt;絶対&lt;/strong&gt;パスとしての出力ディレクトリ。</target>
        </trans-unit>
        <trans-unit id="3d39fb2dccd697e1450cca6b83dff11da76a49b5" translate="yes" xml:space="preserve">
          <source>The output file system you provide needs to be compatible with Node&amp;rsquo;s own &lt;a href=&quot;https://nodejs.org/api/fs.html&quot;&gt;&lt;code&gt;fs&lt;/code&gt;&lt;/a&gt; interface, which requires the &lt;code&gt;mkdirp&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt; helper methods.</source>
          <target state="translated">指定する出力ファイルシステムは、Node独自の&lt;a href=&quot;https://nodejs.org/api/fs.html&quot;&gt; &lt;code&gt;fs&lt;/code&gt; &lt;/a&gt;インターフェースと互換性がある必要があります。これには、 &lt;code&gt;mkdirp&lt;/code&gt; および &lt;code&gt;join&lt;/code&gt; ヘルパーメソッドが必要です。</target>
        </trans-unit>
        <trans-unit id="97cfcf8af47a75058c06094f0eff166707f2e3f7" translate="yes" xml:space="preserve">
          <source>The output filename for additional chunks</source>
          <target state="translated">追加チャンクの出力ファイル名</target>
        </trans-unit>
        <trans-unit id="267ff8bf01e4b400d5b984269cf06c01ded82d1d" translate="yes" xml:space="preserve">
          <source>The output filename for the SourceMap</source>
          <target state="translated">SourceMap の出力ファイル名</target>
        </trans-unit>
        <trans-unit id="a550b694aeec3339247a8ab6597116fefa3e71ad" translate="yes" xml:space="preserve">
          <source>The output filename of the bundle</source>
          <target state="translated">バンドルの出力ファイル名</target>
        </trans-unit>
        <trans-unit id="3c0e63df9024e8b756c01e045992b68f60f8d2a8" translate="yes" xml:space="preserve">
          <source>The output in webpack CLI will usually be:</source>
          <target state="translated">webpack CLIで出力されるのは、通常はこうなります。</target>
        </trans-unit>
        <trans-unit id="819f3534522471c5ea0e340b7688ce6e2986c41e" translate="yes" xml:space="preserve">
          <source>The output path for compilation assets</source>
          <target state="translated">コンパイルアセットの出力パス</target>
        </trans-unit>
        <trans-unit id="d5cc37f8dd4438bd7f133d72882c40b943ab6a5b" translate="yes" xml:space="preserve">
          <source>The output shown from running webpack in the guides may differ slightly from the output of newer versions. This is to be expected. As long as the bundles look similar and run correctly, then there shouldn't be any issues. If you do come across an example that seems to be broken by a new version, please create an issue and we will do our best to resolve the discrepancy.</source>
          <target state="translated">ガイドにある webpack を実行して表示される出力は、新しいバージョンの出力とは若干異なる場合があります。これは予想されることです。バンドルが似ていて正しく動作する限り、何の問題もないはずです。新しいバージョンで壊れているように見える例に出くわした場合は、問題を作成してください。</target>
        </trans-unit>
        <trans-unit id="d7864ae5ef3f0b7a2f3aacd5831a1402dbade9c3" translate="yes" xml:space="preserve">
          <source>The output will be:</source>
          <target state="translated">出力されます。</target>
        </trans-unit>
        <trans-unit id="ac4f620d683122799ae83cf0db02aafdf66bbefc" translate="yes" xml:space="preserve">
          <source>The overhead for each chunks is provided by &lt;code&gt;options.chunkOverhead&lt;/code&gt; or defaults to 10000. Entry chunks sizes are multiplied by &lt;code&gt;options.entryChunkMultiplicator&lt;/code&gt; (or 10).</source>
          <target state="translated">各チャンクのオーバーヘッドは、 &lt;code&gt;options.chunkOverhead&lt;/code&gt; またはデフォルトで10000 によって提供されます。エントリチャンクのサイズは、 &lt;code&gt;options.entryChunkMultiplicator&lt;/code&gt; （または10）で乗算されます。</target>
        </trans-unit>
        <trans-unit id="48346b22135d618621c9aadccdd01f3e12289eee" translate="yes" xml:space="preserve">
          <source>The passphrase to a SSL PFX file.</source>
          <target state="translated">SSL PFXファイルへのパスフレーズです。</target>
        </trans-unit>
        <trans-unit id="548967eebc482b64ca17750fb858725c0c97647c" translate="yes" xml:space="preserve">
          <source>The path of the resource relative to the webpack/config context.</source>
          <target state="translated">webpack/config コンテキストからの相対的なリソースのパス。</target>
        </trans-unit>
        <trans-unit id="4c78e5d4376b497fb07e64c8073838d051cabd9d" translate="yes" xml:space="preserve">
          <source>The path used to resolve the file and any query params used on the first loader</source>
          <target state="translated">ファイルの解決に使用されたパスと、最初のローダで使用されたクエリパラメータ。</target>
        </trans-unit>
        <trans-unit id="bc1748e296ada53329650dd514e6aaa68127c896" translate="yes" xml:space="preserve">
          <source>The path used to resolve the file without any query params</source>
          <target state="translated">ファイルの解決に使用されるパスで、クエリのパラメータはありません。</target>
        </trans-unit>
        <trans-unit id="b0beb6d3ff727ba937ba38f74f40c0298b2547ed" translate="yes" xml:space="preserve">
          <source>The plugin controls several compiler flags. The following flags should not be used in any mode:</source>
          <target state="translated">このプラグインはいくつかのコンパイラフラグを制御します。以下のフラグはどのモードでも使用してはいけません。</target>
        </trans-unit>
        <trans-unit id="9b11e7a0a95723e0438e10960cc010fdaf0de33c" translate="yes" xml:space="preserve">
          <source>The plugin interface allows users to tap directly into the compilation process. Plugins can register handlers on lifecycle hooks that run at different points throughout a compilation. When each hook is executed, the plugin will have full access to the current state of the compilation.</source>
          <target state="translated">プラグインのインターフェイスにより、ユーザーはコンパイルプロセスに直接触れることができます。プラグインは、コンパイル中の異なるポイントで実行されるライフサイクルフックにハンドラを登録することができます。各フックが実行されると、プラグインはコンパイルの現在の状態に完全にアクセスできるようになります。</target>
        </trans-unit>
        <trans-unit id="a775448e75f0a6a6305222c79f1e629ab2a7f917" translate="yes" xml:space="preserve">
          <source>The plugin supports addons. For a list see the &lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin#third-party-addons&quot;&gt;documentation&lt;/a&gt;.</source>
          <target state="translated">プラグインはアドオンをサポートしています。リストについては、&lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin#third-party-addons&quot;&gt;ドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="72e5541fb2a2286d59ee1b4f3ca68de005f71fb2" translate="yes" xml:space="preserve">
          <source>The plugin will generate an HTML5 file for you that includes all your webpack bundles in the body using &lt;code&gt;script&lt;/code&gt; tags. Just add the plugin to your webpack config as follows:</source>
          <target state="translated">プラグインは、 &lt;code&gt;script&lt;/code&gt; タグを使用して本文にすべてのWebpackバンドルを含むHTML5ファイルを生成します。次のように、プラグインをwebpack設定に追加するだけです。</target>
        </trans-unit>
        <trans-unit id="23dbb446b166d9f36a900050b47f2d3ab1a6afa9" translate="yes" xml:space="preserve">
          <source>The plugins should be used if you run the bundle in a Node.js environment.</source>
          <target state="translated">プラグインはNode.js環境でバンドルを実行する場合に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="6472732673cddb28039954632e457f1b136ce099" translate="yes" xml:space="preserve">
          <source>The point or points to enter the application. At this point the application starts executing. If an array is passed all items will be executed.</source>
          <target state="translated">アプリケーションに入るポイントまたはポイント。この時点でアプリケーションは実行を開始します。配列が渡された場合は、すべての項目が実行されます。</target>
        </trans-unit>
        <trans-unit id="dbc0c621862eb10035838f19d0cd0730d204ee81" translate="yes" xml:space="preserve">
          <source>The polling interval for watching (also enable polling)</source>
          <target state="translated">視聴のポーリング間隔(ポーリングも有効)</target>
        </trans-unit>
        <trans-unit id="c11efdad805348277f06f272a3b9067b34acad77" translate="yes" xml:space="preserve">
          <source>The prefix length of the hash digest to use, defaults to &lt;code&gt;20&lt;/code&gt;.</source>
          <target state="translated">使用するハッシュダイジェストのプレフィックス長。デフォルトは &lt;code&gt;20&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="cfe78750ed83bb76df27ef5f00b72ad4f03945b1" translate="yes" xml:space="preserve">
          <source>The previous &lt;code&gt;Promise&lt;/code&gt; library is referenced and used before it is overridden.</source>
          <target state="translated">以前の &lt;code&gt;Promise&lt;/code&gt; ライブラリは、オーバーライドされる前に参照および使用されます。</target>
        </trans-unit>
        <trans-unit id="392b59f1ddb5800fa5975bed7c141104e2fb531e" translate="yes" xml:space="preserve">
          <source>The process is calling the &lt;code&gt;accept&lt;/code&gt; handlers and re-executing self-accepted modules</source>
          <target state="translated">プロセスが &lt;code&gt;accept&lt;/code&gt; ハンドラを呼び出し、自己受け入れモジュールを再実行しています</target>
        </trans-unit>
        <trans-unit id="6521adb388facad5268660cc975a5e88f24fce11" translate="yes" xml:space="preserve">
          <source>The process is calling the &lt;code&gt;dispose&lt;/code&gt; handlers on the modules that will be replaced</source>
          <target state="translated">プロセスは、置き換えられるモジュールの &lt;code&gt;dispose&lt;/code&gt; ハンドラーを呼び出しています</target>
        </trans-unit>
        <trans-unit id="ad173f9a14c3ddc81844b3f1137e787fca15d523" translate="yes" xml:space="preserve">
          <source>The process is checking for updates</source>
          <target state="translated">プロセスが更新されているかどうかをチェックしています。</target>
        </trans-unit>
        <trans-unit id="4759bc6ae5559dc09c35f8668d736f2ae3508206" translate="yes" xml:space="preserve">
          <source>The process is getting ready for the update (e.g. downloading the updated module)</source>
          <target state="translated">更新の準備をしています(更新されたモジュールをダウンロードするなど)。</target>
        </trans-unit>
        <trans-unit id="39b0a4c5329372428d4ac3023ae6b4a24f3adef6" translate="yes" xml:space="preserve">
          <source>The process is waiting for a call to &lt;code&gt;check&lt;/code&gt; (see below)</source>
          <target state="translated">プロセスは &lt;code&gt;check&lt;/code&gt; 呼び出しを待機しています（以下を参照）</target>
        </trans-unit>
        <trans-unit id="da0d9c2bcbd05524ccb997bcead89cb202e57f85" translate="yes" xml:space="preserve">
          <source>The public path for the assets</source>
          <target state="translated">資産のための公道</target>
        </trans-unit>
        <trans-unit id="6e000088ad11082bbbe5a98b178ad198d4f76470" translate="yes" xml:space="preserve">
          <source>The query of the resource.</source>
          <target state="translated">リソースのクエリです。</target>
        </trans-unit>
        <trans-unit id="9ffb3bc216dc8a7e0d1139c2c7c1d7964b2fcb6e" translate="yes" xml:space="preserve">
          <source>The query parameter &lt;code&gt;importLoaders&lt;/code&gt; allows to configure how many loaders before &lt;code&gt;css-loader&lt;/code&gt; should be applied to &lt;code&gt;@import&lt;/code&gt;ed resources.</source>
          <target state="translated">クエリパラメータ &lt;code&gt;importLoaders&lt;/code&gt; を使用すると、 &lt;code&gt;css-loader&lt;/code&gt; を &lt;code&gt;@import&lt;/code&gt; されたリソースに適用する前にローダーの数を構成できます。</target>
        </trans-unit>
        <trans-unit id="a6676ec8ba190e154043d97da697c1d7c9a7c0d0" translate="yes" xml:space="preserve">
          <source>The query parameter &lt;code&gt;modules&lt;/code&gt; enables the &lt;strong&gt;CSS Modules&lt;/strong&gt; spec.</source>
          <target state="translated">クエリパラメータ &lt;code&gt;modules&lt;/code&gt; は、&lt;strong&gt;CSSモジュール&lt;/strong&gt;仕様を有効にします。</target>
        </trans-unit>
        <trans-unit id="3505e465d18f3771163a660a2e747e533a6a0c35" translate="yes" xml:space="preserve">
          <source>The raw require function. This expression isn't parsed by the Parser for dependencies.</source>
          <target state="translated">生のrequire関数です。この式は依存性のためにパーサーによって解析されません。</target>
        </trans-unit>
        <trans-unit id="092899a9890c9149ab3ac8291fc14610f558cc74" translate="yes" xml:space="preserve">
          <source>The remainder of this guide will stem from &lt;a href=&quot;getting-started&quot;&gt;Getting Started&lt;/a&gt;. If you haven't read through that guide already, please do so now.</source>
          <target state="translated">このガイドの残りの部分は、&lt;a href=&quot;getting-started&quot;&gt;はじめに&lt;/a&gt;から始まります。そのガイドをまだ読んでいない場合は、今すぐ読んでください。</target>
        </trans-unit>
        <trans-unit id="f1829880bae1c785aa269cd8ac49c93162f07fa2" translate="yes" xml:space="preserve">
          <source>The reporter function will be excuted with the loader context as &lt;code&gt;this&lt;/code&gt;. You may emit messages using &lt;code&gt;this.emitWarning(...)&lt;/code&gt; or &lt;code&gt;this.emitError(...)&lt;/code&gt;. See &lt;a href=&quot;../api/loaders#the-loader-context&quot;&gt;webpack docs on loader context&lt;/a&gt;.</source>
          <target state="translated">レポーター関数は、ローダーコンテキスト &lt;code&gt;this&lt;/code&gt; として実行されます。 &lt;code&gt;this.emitWarning(...)&lt;/code&gt; または &lt;code&gt;this.emitError(...)&lt;/code&gt; を使用してメッセージを送信できます。&lt;a href=&quot;../api/loaders#the-loader-context&quot;&gt;ローダーコンテキストに関するwebpackドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="46056f0f9b6a95a54bd9a4410020bf916e27bee7" translate="yes" xml:space="preserve">
          <source>The reporter function will be passed an array of errors/warnings produced by JSHint with the following structure:</source>
          <target state="translated">レポーター関数には、JSHintが生成するエラー/警告の配列が以下の構造で渡されます。</target>
        </trans-unit>
        <trans-unit id="9832e252c089a76e52186789fa74082b68c95b94" translate="yes" xml:space="preserve">
          <source>The resolved request string.</source>
          <target state="translated">解決されたリクエスト文字列。</target>
        </trans-unit>
        <trans-unit id="ce32757da121c3a937bde8602723d7dd668a47da" translate="yes" xml:space="preserve">
          <source>The resolver plugins, e.g. &lt;a href=&quot;https://github.com/shaketbaby/directory-named-webpack-plugin&quot;&gt;&lt;code&gt;DirectoryNamedPlugin&lt;/code&gt;&lt;/a&gt;, can be included directly in &lt;code&gt;resolve.plugins&lt;/code&gt; rather than using standard plugins. Note that the &lt;code&gt;resolve&lt;/code&gt; configuration affects the &lt;code&gt;normal&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt; resolvers while &lt;code&gt;resolveLoader&lt;/code&gt; is used to modify the &lt;code&gt;loader&lt;/code&gt; resolver.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/shaketbaby/directory-named-webpack-plugin&quot;&gt; &lt;code&gt;DirectoryNamedPlugin&lt;/code&gt; &lt;/a&gt;などのリゾルバープラグインは、標準プラグインを使用するのではなく、 &lt;code&gt;resolve.plugins&lt;/code&gt; に直接含めることができます。 &lt;code&gt;resolveLoader&lt;/code&gt; を使用して &lt;code&gt;loader&lt;/code&gt; リゾルバーを変更している間、 &lt;code&gt;resolve&lt;/code&gt; 構成は &lt;code&gt;normal&lt;/code&gt; リゾルバーと &lt;code&gt;context&lt;/code&gt; リゾルバーに影響することに注意してください。</target>
        </trans-unit>
        <trans-unit id="f0f4846e8028f9a80dd0d8c0ef30ddcd09e4241e" translate="yes" xml:space="preserve">
          <source>The resolvers mentioned above can also be customized via a configuration file with the &lt;a href=&quot;../configuration/resolve&quot;&gt;&lt;code&gt;resolve&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../configuration/resolve#resolveloader&quot;&gt;&lt;code&gt;resolveLoader&lt;/code&gt;&lt;/a&gt; options. These options allow users to change the resolving behavior through a variety of options including through resolve &lt;code&gt;plugins&lt;/code&gt;.</source>
          <target state="translated">上記のリゾルバーは、&lt;a href=&quot;../configuration/resolve&quot;&gt; &lt;code&gt;resolve&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../configuration/resolve#resolveloader&quot;&gt; &lt;code&gt;resolveLoader&lt;/code&gt; &lt;/a&gt;オプションを使用して構成ファイルを介してカスタマイズすることもできます。これらのオプションを使用すると、解決 &lt;code&gt;plugins&lt;/code&gt; を含むさまざまなオプションを使用して、解決動作を変更できます。</target>
        </trans-unit>
        <trans-unit id="5d0fd93852dd662bc6b879642ac9e4e4d5b03796" translate="yes" xml:space="preserve">
          <source>The resource file.</source>
          <target state="translated">リソースファイルです。</target>
        </trans-unit>
        <trans-unit id="a4cd8313da62b6881779fdfaa0180a987b0cdd4f" translate="yes" xml:space="preserve">
          <source>The resource part of the request, including query.</source>
          <target state="translated">クエリを含むリクエストのリソース部分。</target>
        </trans-unit>
        <trans-unit id="a4c514f8ccaf5649c6351763537ef961c30fd000" translate="yes" xml:space="preserve">
          <source>The resource query of the current module. If the following &lt;code&gt;require&lt;/code&gt; call were made, then the query string would be available in &lt;code&gt;file.js&lt;/code&gt;.</source>
          <target state="translated">現在のモジュールのリソースクエリ。次の &lt;code&gt;require&lt;/code&gt; 呼び出しが行われた場合、クエリ文字列は &lt;code&gt;file.js&lt;/code&gt; で使用できます。</target>
        </trans-unit>
        <trans-unit id="e4780d56cbc686c5ce3270f7769038e13ae838f0" translate="yes" xml:space="preserve">
          <source>The resource: An absolute path to the file requested. It's already resolved according to the &lt;a href=&quot;resolve&quot;&gt;&lt;code&gt;resolve&lt;/code&gt; rules&lt;/a&gt;.</source>
          <target state="translated">リソース：要求されたファイルへの絶対パス。&lt;a href=&quot;resolve&quot;&gt; &lt;code&gt;resolve&lt;/code&gt; ルール&lt;/a&gt;に従って既に解決されています。</target>
        </trans-unit>
        <trans-unit id="01c6e113f51546fcaa75367b348564232431d01b" translate="yes" xml:space="preserve">
          <source>The resulting configuration object would resemble:</source>
          <target state="translated">結果として得られる設定オブジェクトは次のようになります。</target>
        </trans-unit>
        <trans-unit id="d5fcb09293cddfb6fac196a1f2ae3817a3ca173b" translate="yes" xml:space="preserve">
          <source>The rules can be disabled using the following options in your &lt;code&gt;webpack.conf.js&lt;/code&gt;</source>
          <target state="translated">ルールは、 &lt;code&gt;webpack.conf.js&lt;/code&gt; の以下のオプションを使用して無効にできます</target>
        </trans-unit>
        <trans-unit id="97262fc608fb5c3c1ca59507abc23b2d97ffaa58" translate="yes" xml:space="preserve">
          <source>The runtime asynchronously downloads the updates and notifies the application.</source>
          <target state="translated">ランタイムは非同期的に更新をダウンロードし、アプリケーションに通知します。</target>
        </trans-unit>
        <trans-unit id="6fca03cfbb7a42f44c98900865cadf2c926101c4" translate="yes" xml:space="preserve">
          <source>The runtime code detects already added CSS via &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag. This can be useful when injecting CSS on server-side for Server-Side-Rendering. The &lt;code&gt;href&lt;/code&gt; of the &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag has to match the URL that will be used for loading the CSS chunk. The &lt;code&gt;data-href&lt;/code&gt; attribute can be used for &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; too. When inlining CSS &lt;code&gt;data-href&lt;/code&gt; must be used.</source>
          <target state="translated">ランタイムコードは、 &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; タグを介して既に追加されているCSSを検出します。これは、サーバー側レンダリングのためにサーバー側にCSSを注入するときに役立ちます。 &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; タグの &lt;code&gt;href&lt;/code&gt; は、CSSチャンクのロードに使用されるURLと一致する必要があります。 &lt;code&gt;data-href&lt;/code&gt; 属性がために使用することができる &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; と &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; すぎ。 CSSをインライン化する場合は、 &lt;code&gt;data-href&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="a78efb0808055f65bb7c8c45f825cc95b4914fbe" translate="yes" xml:space="preserve">
          <source>The runtime synchronously applies the updates.</source>
          <target state="translated">ランタイムは同期的に更新を適用します。</target>
        </trans-unit>
        <trans-unit id="2b665da5e519d5e540da3b313a41a99cd0ecf3a1" translate="yes" xml:space="preserve">
          <source>The sass-loader requires &lt;a href=&quot;https://github.com/webpack&quot;&gt;webpack&lt;/a&gt; as a &lt;a href=&quot;https://docs.npmjs.com/files/package.json#peerdependencies&quot;&gt;&lt;code&gt;peerDependency&lt;/code&gt;&lt;/a&gt; and it requires you to install either &lt;a href=&quot;https://github.com/sass/node-sass&quot;&gt;Node Sass&lt;/a&gt; or &lt;a href=&quot;https://github.com/sass/dart-sass&quot;&gt;Dart Sass&lt;/a&gt; on your own. This allows you to control the versions of all your dependencies, and to choose which Sass implementation to use.</source>
          <target state="translated">sass-loaderは、&lt;a href=&quot;https://github.com/webpack&quot;&gt;peerDependency&lt;/a&gt;として&lt;a href=&quot;https://docs.npmjs.com/files/package.json#peerdependencies&quot;&gt; &lt;code&gt;peerDependency&lt;/code&gt; &lt;/a&gt;を必要とし、&lt;a href=&quot;https://github.com/sass/node-sass&quot;&gt;Node Sass&lt;/a&gt;または&lt;a href=&quot;https://github.com/sass/dart-sass&quot;&gt;Dart Sass&lt;/a&gt;を自分でインストールする必要があります。これにより、すべての依存関係のバージョンを制御し、使用するSass実装を選択できます。</target>
        </trans-unit>
        <trans-unit id="34aa382924eb34a97b5ff040bbe8c678d0951eb6" translate="yes" xml:space="preserve">
          <source>The second argument a &lt;code&gt;string&lt;/code&gt; or a &lt;a href=&quot;https://nodejs.org/api/buffer.html&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">2番目の引数は &lt;code&gt;string&lt;/code&gt; または&lt;a href=&quot;https://nodejs.org/api/buffer.html&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="9eb3a2178fb08052e95c8397dfaf7a97e66d1c0a" translate="yes" xml:space="preserve">
          <source>The server should be accessible on &lt;code&gt;http://10.10.10.61:8080&lt;/code&gt; now. If you make a change in &lt;code&gt;app.js&lt;/code&gt;, it should live reload.</source>
          <target state="translated">サーバーは &lt;code&gt;http://10.10.10.61:8080&lt;/code&gt; でアクセスできるはずです。 &lt;code&gt;app.js&lt;/code&gt; に変更を加えると、ライブで再読み込みされます。</target>
        </trans-unit>
        <trans-unit id="36694462fb15a2bc75a3fea2f02d4342fbda1a03" translate="yes" xml:space="preserve">
          <source>The single entry syntax for the &lt;code&gt;entry&lt;/code&gt; property is a shorthand for:</source>
          <target state="translated">&lt;code&gt;entry&lt;/code&gt; プロパティの単一のエントリ構文は、以下の省略形です。</target>
        </trans-unit>
        <trans-unit id="115c455da79a8006628c20e59f638f4b9b64b4d0" translate="yes" xml:space="preserve">
          <source>The source code you, and maybe your team, have written.</source>
          <target state="translated">あなたやおそらくあなたのチームが書いたソースコード。</target>
        </trans-unit>
        <trans-unit id="28cb8cd49852f753c9f2be8f92238b51bbe3f7ae" translate="yes" xml:space="preserve">
          <source>The spec for &lt;code&gt;import&lt;/code&gt; doesn't allow control over the chunk's name or other properties as &quot;chunks&quot; are only a concept within webpack. Luckily webpack allows some special parameters via comments so as to not break the spec:</source>
          <target state="translated">「チャンク」はWebpack内の概念にすぎないため、 &lt;code&gt;import&lt;/code&gt; の仕様では、チャンクの名前やその他のプロパティを制御できません。幸いなことに、webpackは仕様を壊さないようにコメントを介していくつかの特別なパラメーターを許可します：</target>
        </trans-unit>
        <trans-unit id="13755577ac5a47dc78ee4c995fe1dfc9e99d9c04" translate="yes" xml:space="preserve">
          <source>The special &lt;code&gt;implementation&lt;/code&gt; option determines which implementation of Sass to use. It takes either a [Node Sass][] or a [Dart Sass][] module. For example, to use Dart Sass, you'd pass:</source>
          <target state="translated">特別な &lt;code&gt;implementation&lt;/code&gt; オプションは、使用するSassの実装を決定します。[Node Sass] []または[Dart Sass] []モジュールのいずれかを取ります。たとえば、Dart Sassを使用するには、次のように渡します。</target>
        </trans-unit>
        <trans-unit id="5c4b162f681173ae925ce59ee2d62441d980bbc0" translate="yes" xml:space="preserve">
          <source>The steps above would be shortened to:</source>
          <target state="translated">上記のステップを短くすると</target>
        </trans-unit>
        <trans-unit id="c086ef368c2e61193dc23f5a88ecd75a1567c8f6" translate="yes" xml:space="preserve">
          <source>The syntax &lt;code&gt;:local(.className)&lt;/code&gt; can be used to declare &lt;code&gt;className&lt;/code&gt; in the local scope. The local identifiers are exported by the module.</source>
          <target state="translated">構文 &lt;code&gt;:local(.className)&lt;/code&gt; を使用して、ローカルスコープで &lt;code&gt;className&lt;/code&gt; を宣言できます。ローカル識別子はモジュールによってエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="6c080a2f2285ca1d1604a8b397e768aea30b9793" translate="yes" xml:space="preserve">
          <source>The syntax is as follows:</source>
          <target state="translated">構文は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="636a5736cf2581279ebfb2a0261adf16ae389bb9" translate="yes" xml:space="preserve">
          <source>The target asset name. &lt;code&gt;[file]&lt;/code&gt; is replaced with the original asset. &lt;code&gt;[path]&lt;/code&gt; is replaced with the path of the original asset and &lt;code&gt;[query]&lt;/code&gt; with the query</source>
          <target state="translated">ターゲットアセット名。 &lt;code&gt;[file]&lt;/code&gt; は元のアセットに置き換えられます。 &lt;code&gt;[path]&lt;/code&gt; は元のアセットのパスに置き換えられ、 &lt;code&gt;[query]&lt;/code&gt; はクエリに置き換えられます</target>
        </trans-unit>
        <trans-unit id="eba2325dc692f9ab9bafbbb2beda8299b674eba5" translate="yes" xml:space="preserve">
          <source>The third-party &lt;a href=&quot;https://github.com/mrsteele/dotenv-webpack&quot;&gt;&lt;code&gt;DotenvPlugin&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;dotenv-webpack&lt;/code&gt;) allows you to expose (a subset of) &lt;a href=&quot;https://www.npmjs.com/package/dotenv&quot;&gt;dotenv variables&lt;/a&gt;:</source>
          <target state="translated">サードパーティの&lt;a href=&quot;https://github.com/mrsteele/dotenv-webpack&quot;&gt; &lt;code&gt;DotenvPlugin&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;dotenv-webpack&lt;/code&gt; ）を使用すると、&lt;a href=&quot;https://www.npmjs.com/package/dotenv&quot;&gt;dotenv変数&lt;/a&gt;（のサブセット）を公開できます。</target>
        </trans-unit>
        <trans-unit id="ba0623dec4dcfaa3539a27d267af37d4a6c6159b" translate="yes" xml:space="preserve">
          <source>The tools in this guide are &lt;strong&gt;only meant for development&lt;/strong&gt;, please &lt;strong&gt;avoid&lt;/strong&gt; using them in production!</source>
          <target state="translated">このガイドのツールは&lt;strong&gt;開発専用&lt;/strong&gt;です。本番&lt;strong&gt;環境での&lt;/strong&gt;使用は&lt;strong&gt;避け&lt;/strong&gt;てください。</target>
        </trans-unit>
        <trans-unit id="d03833fb081139e2861c0b6bac6df6e16c42c69b" translate="yes" xml:space="preserve">
          <source>The top-level &lt;code&gt;output&lt;/code&gt; key contains set of options instructing webpack on how and where it should output your bundles, assets and anything else you bundle or load with webpack.</source>
          <target state="translated">最上位の &lt;code&gt;output&lt;/code&gt; キーには、バンドル、アセット、およびwebpackにバンドルまたはロードするその他のものを出力する方法と場所をwebpackに指示するオプションのセットが含まれています。</target>
        </trans-unit>
        <trans-unit id="23ddc8426f41fcf0c2f24729e02738cbc0c4ea94" translate="yes" xml:space="preserve">
          <source>The top-level structure of the output JSON file is fairly straightforward but there are a few nested data structures as well. Each nested structure has a dedicated section below to make this document more consumable. Note that you can click links within the top-level structure below to jump to relevant sections and documentation:</source>
          <target state="translated">出力JSONファイルのトップレベルの構造は非常に単純ですが、いくつかの入れ子になったデータ構造もあります。それぞれのネストされた構造は、このドキュメントをより使いやすくするために、以下に専用のセクションを設けています。以下のトップレベル構造内のリンクをクリックすると、関連するセクションやドキュメントにジャンプできることに注意してください。</target>
        </trans-unit>
        <trans-unit id="bcc561d5b45341ac9ae52e7eceff1b71c210b154" translate="yes" xml:space="preserve">
          <source>The type for exposing the exports of the entry point as library</source>
          <target state="translated">エントリポイントのエクスポートをライブラリとして公開するための型</target>
        </trans-unit>
        <trans-unit id="52496825e602d46c2484208661a0dbf58d19c31d" translate="yes" xml:space="preserve">
          <source>The type of hash that the has function should use. Valid values include: md5, sha1, sha256, and sha512.</source>
          <target state="translated">has 関数が使用するハッシュの種類を指定します。有効な値は md5、sha1、sha256、sha512 です。</target>
        </trans-unit>
        <trans-unit id="eb1ba693e91aeced7bfd7d3c4973add619d0c630" translate="yes" xml:space="preserve">
          <source>The update is prepared and available</source>
          <target state="translated">アップデートが準備され、利用できるようになりました</target>
        </trans-unit>
        <trans-unit id="61a9637f0952375cb9aed04469dd726cfd952673" translate="yes" xml:space="preserve">
          <source>The updated &lt;a href=&quot;manifest&quot;&gt;manifest&lt;/a&gt; (JSON)</source>
          <target state="translated">更新された&lt;a href=&quot;manifest&quot;&gt;マニフェスト&lt;/a&gt;（JSON）</target>
        </trans-unit>
        <trans-unit id="b7f04ddab5440093506974af2f71afb5c69d6443" translate="yes" xml:space="preserve">
          <source>The usage of these properties is highly discouraged since we are planning to remove them from the context. They are still listed here for documentation purposes.</source>
          <target state="translated">私たちはこれらのプロパティをコンテキストから削除する予定なので、これらのプロパティの使用は非常にお勧めしません。これらのプロパティは、文書化の目的でここにリストアップされています。</target>
        </trans-unit>
        <trans-unit id="09a01ba6fc5ac28730420b58f620f492ea97a0a5" translate="yes" xml:space="preserve">
          <source>The usage specification for the library use will be as follows:</source>
          <target state="translated">ライブラリ利用時の利用仕様は以下の通りとなります。</target>
        </trans-unit>
        <trans-unit id="ad8f6ee6214c162258ff694b7015ecaf7841b5c9" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;System.import&lt;/code&gt; in webpack &lt;a href=&quot;https://github.com/webpack/webpack/issues/2163&quot;&gt;did not fit the proposed spec&lt;/a&gt;, so it was deprecated in webpack &lt;a href=&quot;https://github.com/webpack/webpack/releases/tag/v2.1.0-beta.28&quot;&gt;2.1.0-beta.28&lt;/a&gt; in favor of &lt;code&gt;import()&lt;/code&gt;.</source>
          <target state="translated">webpack での &lt;code&gt;System.import&lt;/code&gt; の使用は&lt;a href=&quot;https://github.com/webpack/webpack/issues/2163&quot;&gt;提案された仕様&lt;/a&gt;に適合しなかったため、 &lt;code&gt;import()&lt;/code&gt; を優先してwebpack &lt;a href=&quot;https://github.com/webpack/webpack/releases/tag/v2.1.0-beta.28&quot;&gt;2.1.0-beta.28&lt;/a&gt;で廃止されました。</target>
        </trans-unit>
        <trans-unit id="43ce4cf602e81313a6d20c96af3f2f1a73a256a9" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;&quot;single&quot;&lt;/code&gt; instead creates a runtime file to be shared for all generated chunks. This setting is an alias for:</source>
          <target state="translated">値 &lt;code&gt;&quot;single&quot;&lt;/code&gt; は、生成されたすべてのチャンクで共有されるランタイムファイルを作成します。この設定は、次のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="b1229e71274c5a0848ada24997f99c0e90c13985" translate="yes" xml:space="preserve">
          <source>The value of the option is prefixed to every URL created by the runtime or loaders. Because of this &lt;strong&gt;the value of this option ends with &lt;code&gt;/&lt;/code&gt;&lt;/strong&gt; in most cases.</source>
          <target state="translated">オプションの値は、ランタイムまたはローダーによって作成されたすべてのURLの前に付けられます。このため、この&lt;strong&gt;オプションの値は &lt;code&gt;/&lt;/code&gt; &lt;/strong&gt;ほとんどの場合&lt;strong&gt;/&lt;/strong&gt;で&lt;strong&gt;終わります&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="89761bd1af99839698fc977f7b95894b8d804bab" translate="yes" xml:space="preserve">
          <source>The values will be inlined into the code allowing a minification pass to remove the redundant conditional.</source>
          <target state="translated">値はコードの中にインライン化され、冗長な条件を削除するためのミニ化パスが可能になります。</target>
        </trans-unit>
        <trans-unit id="a9aa12557f06576dffeddc570ca96e258d06e4f9" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;MyLibrary&lt;/code&gt; will be bound with the return value of your entry file, if the resulting output is included as a script tag in an HTML page.</source>
          <target state="translated">結果の出力がスクリプトタグとしてHTMLページに含まれている場合、変数 &lt;code&gt;MyLibrary&lt;/code&gt; はエントリファイルの戻り値にバインドされます。</target>
        </trans-unit>
        <trans-unit id="adc4f01ea35788d18caa049991ad53d743ab4a33" translate="yes" xml:space="preserve">
          <source>The way this is accomplished is the &lt;code&gt;&quot;sideEffects&quot;&lt;/code&gt; package.json property.</source>
          <target state="translated">これを実現する方法は、 &lt;code&gt;&quot;sideEffects&quot;&lt;/code&gt; package.jsonプロパティです。</target>
        </trans-unit>
        <trans-unit id="cc0f8180a2809a16c731d6f278b809d648c76948" translate="yes" xml:space="preserve">
          <source>The webcomponent polyfills must be added in a specific order. If you do not delay loading the main bundle with your components, you will see the following exceptions in the browser console:</source>
          <target state="translated">ウェブコンポーネントのポリフィルは、特定の順番で追加する必要があります。コンポーネントでメインバンドルの読み込みを遅らせないと、ブラウザコンソールに以下のような例外が表示されます。</target>
        </trans-unit>
        <trans-unit id="891b65ff2555253127d610f04559b1a2a11cfb73" translate="yes" xml:space="preserve">
          <source>The webpack 2 release came with built-in support for ES2015 modules (alias &lt;em&gt;harmony modules&lt;/em&gt;) as well as unused module export detection. The new webpack 4 release expands on this capability with a way to provide hints to the compiler via the &lt;code&gt;&quot;sideEffects&quot;&lt;/code&gt;&lt;code&gt;package.json&lt;/code&gt; property to denote which files in your project are &quot;pure&quot; and therefore safe to prune if unused.</source>
          <target state="translated">webpack 2リリースには、ES2015モジュール（エイリアス&lt;em&gt;ハーモニーモジュール&lt;/em&gt;）のサポートが組み込まれており、未使用のモジュールエクスポートの検出も含まれています。新しいwebpack 4リリースはこの機能を拡張し、 &lt;code&gt;&quot;sideEffects&quot;&lt;/code&gt; &lt;code&gt;package.json&lt;/code&gt; プロパティを介してコンパイラーにヒントを提供し、プロジェクト内のどのファイルが「純粋」であり、したがって未使用の場合でも安全に削除できるようにヒントを提供します。</target>
        </trans-unit>
        <trans-unit id="478a5519b2320811d6017390c8de571fe8e886eb" translate="yes" xml:space="preserve">
          <source>The webpack &lt;code&gt;target&lt;/code&gt; property is not to be confused with the &lt;code&gt;output.libraryTarget&lt;/code&gt; property. For more information see &lt;a href=&quot;output&quot;&gt;our guide&lt;/a&gt; on the &lt;code&gt;output&lt;/code&gt; property.</source>
          <target state="translated">webpack &lt;code&gt;target&lt;/code&gt; プロパティを &lt;code&gt;output.libraryTarget&lt;/code&gt; プロパティと混同しないでください。詳細については、 &lt;code&gt;output&lt;/code&gt; プロパティに関する&lt;a href=&quot;output&quot;&gt;ガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="67d0c64e1b2084b3dd8a7172e708b0db5df6c2ff" translate="yes" xml:space="preserve">
          <source>The webpack command line &lt;a href=&quot;../api/cli#environment-options&quot;&gt;environment option&lt;/a&gt;&lt;code&gt;--env&lt;/code&gt; allows you to pass in as many environment variables as you like. Environment variables will be made accessible in your &lt;code&gt;webpack.config.js&lt;/code&gt;. For example, &lt;code&gt;--env.production&lt;/code&gt; or &lt;code&gt;--env.NODE_ENV=local&lt;/code&gt; (&lt;code&gt;NODE_ENV&lt;/code&gt; is conventionally used to define the environment type, see &lt;a href=&quot;https://dzone.com/articles/what-you-should-know-about-node-env&quot;&gt;here&lt;/a&gt;.)</source>
          <target state="translated">webpackコマンドライン&lt;a href=&quot;../api/cli#environment-options&quot;&gt;環境オプション&lt;/a&gt; &lt;code&gt;--env&lt;/code&gt; を使用すると、必要な数の環境変数を渡すことができます。環境変数は、 &lt;code&gt;webpack.config.js&lt;/code&gt; でアクセス可能になります。たとえば、-- &lt;code&gt;--env.production&lt;/code&gt; または &lt;code&gt;--env.NODE_ENV=local&lt;/code&gt; （ &lt;code&gt;NODE_ENV&lt;/code&gt; は、従来から環境タイプを定義するために使用されています。&lt;a href=&quot;https://dzone.com/articles/what-you-should-know-about-node-env&quot;&gt;ここを&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="2fd569f3866762654c84dc07b32b03a8679ee57a" translate="yes" xml:space="preserve">
          <source>The webpack repository contains an &lt;a href=&quot;https://github.com/webpack/webpack/tree/master/examples/source-map&quot;&gt;example showing the effect of all &lt;code&gt;devtool&lt;/code&gt; variants&lt;/a&gt;. Those examples will likely help you to understand the differences.</source>
          <target state="translated">webpackリポジトリには、&lt;a href=&quot;https://github.com/webpack/webpack/tree/master/examples/source-map&quot;&gt;すべての &lt;code&gt;devtool&lt;/code&gt; バリアントの影響を示す例&lt;/a&gt;が含まれています。これらの例は、違いを理解するのに役立つでしょう。</target>
        </trans-unit>
        <trans-unit id="2124200555434f2d7def0b1a661c16c179c98b22" translate="yes" xml:space="preserve">
          <source>The webpack-dev-server also takes a hint from &lt;code&gt;publicPath&lt;/code&gt;, using it to determine where to serve the output files from.</source>
          <target state="translated">webpack-dev-serverも &lt;code&gt;publicPath&lt;/code&gt; からヒントを取得し、それを使用して出力ファイルを提供する場所を決定します。</target>
        </trans-unit>
        <trans-unit id="a1a810a24b9f17b1d07f0266bc2e5374f6b81734" translate="yes" xml:space="preserve">
          <source>The worker file can import dependencies just like any other file:</source>
          <target state="translated">ワーカーファイルは、他のファイルと同じように依存関係をインポートすることができます。</target>
        </trans-unit>
        <trans-unit id="f318d1321d0bcb60d6c6c01420fcb068660bff69" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;import&lt;/code&gt; the target file somewhere in your app:</source>
          <target state="translated">次に、ターゲットファイルをアプリのどこかに &lt;code&gt;import&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="35f38ddf8489e854be4dc0f70af5f6fa83090c8f" translate="yes" xml:space="preserve">
          <source>Then add the loader to the desired &lt;code&gt;require&lt;/code&gt; calls. For example:</source>
          <target state="translated">次に、ローダーを必要 &lt;code&gt;require&lt;/code&gt; 呼び出しに追加します。例えば：</target>
        </trans-unit>
        <trans-unit id="ffad5e3e9f9bce8ff26817bbf8bcb40fe6825333" translate="yes" xml:space="preserve">
          <source>Then add the loader to your &lt;code&gt;webpack&lt;/code&gt; config. For example:</source>
          <target state="translated">次に、ローダーを &lt;code&gt;webpack&lt;/code&gt; 設定に追加します。例えば：</target>
        </trans-unit>
        <trans-unit id="5ecc72b143ba414bace5339e99ab892cad6a01ae" translate="yes" xml:space="preserve">
          <source>Then add the plugin to your &lt;code&gt;webpack&lt;/code&gt; config. For example:</source>
          <target state="translated">次に、プラグインを &lt;code&gt;webpack&lt;/code&gt; 設定に追加します。例えば：</target>
        </trans-unit>
        <trans-unit id="aa553c5c8715ed65e20b9514b424640be97e4c70" translate="yes" xml:space="preserve">
          <source>Then import that config using the keyword you're looking for in the regexp:</source>
          <target state="translated">そして、その設定を正規表現で探しているキーワードを使ってインポートします。</target>
        </trans-unit>
        <trans-unit id="cb2125d4922a805933e12a6b7b007a9414ad8b65" translate="yes" xml:space="preserve">
          <source>Then in any of our source code:</source>
          <target state="translated">そして、私たちのソースコードのいずれかで</target>
        </trans-unit>
        <trans-unit id="eba20bf51e1fac8e7c59f5ae2aa0c0f1ac3c67fd" translate="yes" xml:space="preserve">
          <source>Then invoke the loader through a require like so:</source>
          <target state="translated">そして、このようにrequireを使ってローダーを起動します。</target>
        </trans-unit>
        <trans-unit id="d73eb206650f19435ae7b09b1dd4c91b4d7875da" translate="yes" xml:space="preserve">
          <source>Then modify your &lt;code&gt;webpack.config.js&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;webpack.config.js&lt;/code&gt; を変更します。</target>
        </trans-unit>
        <trans-unit id="8ece6c64eaee4ab7ee3f8b124192a78d7721667b" translate="yes" xml:space="preserve">
          <source>Then register a configuration and load the task:</source>
          <target state="translated">そして、設定を登録してタスクをロードします。</target>
        </trans-unit>
        <trans-unit id="1079055dbdfefa1ebd4ed5f99bb4f3a3ab94f6aa" translate="yes" xml:space="preserve">
          <source>Then require the webpack module in your Node.js script:</source>
          <target state="translated">そして、Node.jsスクリプトにwebpackモジュールを要求します。</target>
        </trans-unit>
        <trans-unit id="59ed0740687cc965bad0e350a9024363567dd315" translate="yes" xml:space="preserve">
          <source>Then set the environment variable &lt;code&gt;process.env.TS_NODE_PROJECT&lt;/code&gt; provided by &lt;code&gt;tsconfig-path&lt;/code&gt; like so:</source>
          <target state="translated">次に、 &lt;code&gt;tsconfig-path&lt;/code&gt; によって提供される環境変数 &lt;code&gt;process.env.TS_NODE_PROJECT&lt;/code&gt; を次のように設定します。</target>
        </trans-unit>
        <trans-unit id="667f02d92bdbdede5b7c2dd5cadd7691d23cc47e" translate="yes" xml:space="preserve">
          <source>Then you can easily disable the AMD path by writing</source>
          <target state="translated">と書くことで簡単にAMDパスを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="da73ede351abacaec57b8883eebc3e85b7c8c032" translate="yes" xml:space="preserve">
          <source>There are a couple of different options available in webpack that help you automatically compile your code whenever it changes:</source>
          <target state="translated">webpack には、コードが変更されるたびに自動的にコンパイルするのに役立ついくつかの異なるオプションがあります。</target>
        </trans-unit>
        <trans-unit id="98fc5926f0ed61dca265bd1d5a8cfdd128aec8ab" translate="yes" xml:space="preserve">
          <source>There are a few other tools that can help when dealing with legacy modules.</source>
          <target state="translated">レガシーモジュールを扱う際に役立つツールが他にもいくつかあります。</target>
        </trans-unit>
        <trans-unit id="0a1d4e9ccad0c8085ac2c42a3a84ab4c7625d32e" translate="yes" xml:space="preserve">
          <source>There are a few use cases in real applications where this feature becomes especially neat. Essentially, every file emitted to your &lt;code&gt;output.path&lt;/code&gt; directory will be referenced from the &lt;code&gt;output.publicPath&lt;/code&gt; location. This includes child chunks (created via &lt;a href=&quot;code-splitting&quot;&gt;code splitting&lt;/a&gt;) and any other assets (e.g. images, fonts, etc.) that are a part of your dependency graph.</source>
          <target state="translated">実際のアプリケーションでは、この機能が特に便利になるユースケースがいくつかあります。基本的に、 &lt;code&gt;output.path&lt;/code&gt; ディレクトリに出力されるすべてのファイルは、 &lt;code&gt;output.publicPath&lt;/code&gt; の場所から参照されます。これには、依存関係グラフの一部である子チャンク（&lt;a href=&quot;code-splitting&quot;&gt;コード分​​割で&lt;/a&gt;作成されたもの）とその他のアセット（画像、フォントなど）が含まれます。</target>
        </trans-unit>
        <trans-unit id="f59b5b432af60faa3acb5fbb371c18c640f63351" translate="yes" xml:space="preserve">
          <source>There are a lot of &lt;a href=&quot;../configuration/devtool&quot;&gt;different options&lt;/a&gt; available when it comes to source maps. Be sure to check them out so you can configure them to your needs.</source>
          <target state="translated">ソースマップに関しては、&lt;a href=&quot;../configuration/devtool&quot;&gt;さまざまなオプションを&lt;/a&gt;利用できます。必要に応じて設定できるように、必ずチェックしてください。</target>
        </trans-unit>
        <trans-unit id="8d407574a6dd2574ff77db703ce9dc21ace6991e" translate="yes" xml:space="preserve">
          <source>There are different export formats available:</source>
          <target state="translated">さまざまなエクスポート形式があります。</target>
        </trans-unit>
        <trans-unit id="2ec1856436537a88e242c66fae83ad8d15cb9bb3" translate="yes" xml:space="preserve">
          <source>There are many modules that check for a &lt;code&gt;define&lt;/code&gt; function before using CommonJS. Since webpack is capable of both, they default to AMD in this case, which can be a problem if the implementation is quirky.</source>
          <target state="translated">CommonJSを使用 &lt;code&gt;define&lt;/code&gt; 前に定義関数をチェックする多くのモジュールがあります。webpackは両方に対応しているので、この場合はデフォルトでAMDになり、実装が風変わりな場合に問題になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="231f8d33886d63700143f71de278ecc37e1e9ea7" translate="yes" xml:space="preserve">
          <source>There are many other loaders and examples out in the community to make HMR interact smoothly with a variety of frameworks and libraries...</source>
          <target state="translated">HMRを様々なフレームワークやライブラリとスムーズに相互作用させるために、他にも多くのローダーやサンプルがコミュニティに存在します。</target>
        </trans-unit>
        <trans-unit id="53aa2c97152f93fa32cbf84d5d7317fbd59e3f34" translate="yes" xml:space="preserve">
          <source>There are many plugins that webpack provides out of the box! Check out the &lt;a href=&quot;https://webpack.js.org/plugins&quot;&gt;list of plugins&lt;/a&gt;.</source>
          <target state="translated">すぐに使えるwebpackのプラグインはたくさんあります！&lt;a href=&quot;https://webpack.js.org/plugins&quot;&gt;プラグイン&lt;/a&gt;のリストを確認してください。</target>
        </trans-unit>
        <trans-unit id="71e77a34d84d086ac72c127ae4906c48c99dd408" translate="yes" xml:space="preserve">
          <source>There are multiple optimizations in production mode regarding dead branches:</source>
          <target state="translated">本番モードでは、デッドブランチに関して複数の最適化が行われています。</target>
        </trans-unit>
        <trans-unit id="3bcc2fea8cf939a9d3651476df04dc1a6ee79e59" translate="yes" xml:space="preserve">
          <source>There are problems with managing JavaScript projects this way:</source>
          <target state="translated">このようにJavaScriptのプロジェクトを管理することには問題があります。</target>
        </trans-unit>
        <trans-unit id="4993d4d2cc5cb72c5891a9d1ab5d8f7272cf5966" translate="yes" xml:space="preserve">
          <source>There are some issues with Source Maps in Chrome. &lt;a href=&quot;https://github.com/webpack/webpack/issues/3165&quot;&gt;We need your help!&lt;/a&gt;.</source>
          <target state="translated">Chromeのソースマップにいくつかの問題があります。&lt;a href=&quot;https://github.com/webpack/webpack/issues/3165&quot;&gt;君の力が必要なんだ！&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9295a056060a1cd9d98ae0dd581e17215a4f5384" translate="yes" xml:space="preserve">
          <source>There are some presets available to use as a shortcut. Use them like this:</source>
          <target state="translated">ショートカットとして使用できるプリセットがいくつかあります。こんな感じで使ってみてください。</target>
        </trans-unit>
        <trans-unit id="635b1a30cc14512dd700d2c6b33056a04cc5290a" translate="yes" xml:space="preserve">
          <source>There are three general approaches to code splitting available:</source>
          <target state="translated">利用可能なコード分割には、3つの一般的なアプローチがあります。</target>
        </trans-unit>
        <trans-unit id="267e07e43a45d9a1ca7399cfda987a9aee4304fd" translate="yes" xml:space="preserve">
          <source>There are three types of built-in resolvers available on the &lt;code&gt;compiler&lt;/code&gt; class:</source>
          <target state="translated">&lt;code&gt;compiler&lt;/code&gt; クラスでは、3種類の組み込みリゾルバを使用できます。</target>
        </trans-unit>
        <trans-unit id="4f92300c3888d24aa7e5e015926b4dda7365ed5a" translate="yes" xml:space="preserve">
          <source>There are three ways to use loaders in your application:</source>
          <target state="translated">アプリケーションでローダーを使う方法は3つあります。</target>
        </trans-unit>
        <trans-unit id="cfbf2ca72bd8b5e52cf781d5d1d0ed6763357e5f" translate="yes" xml:space="preserve">
          <source>There are two input values for the conditions:</source>
          <target state="translated">条件の入力値は2つあります。</target>
        </trans-unit>
        <trans-unit id="3c7bd6cb5a385da0b04381463b8a65bb5f007ab0" translate="yes" xml:space="preserve">
          <source>There are two output values of a Rule:</source>
          <target state="translated">ルールの出力値は2つあります。</target>
        </trans-unit>
        <trans-unit id="421884df0658635b32d095b666151cd8fdaeb897" translate="yes" xml:space="preserve">
          <source>There are two phases that all loaders enter one after the other:</source>
          <target state="translated">すべてのローダーが次々に入るフェーズは2つあります。</target>
        </trans-unit>
        <trans-unit id="b6af33372ea92fb3a1592ac062e55d75a6290f0e" translate="yes" xml:space="preserve">
          <source>There are two possibilities to extract a style sheet from the bundle:</source>
          <target state="translated">バンドルからスタイルシートを抽出するには2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="b2d870d1394aaba2ab5f8a4c5504447f9a976509" translate="yes" xml:space="preserve">
          <source>There are two solutions to this issue:</source>
          <target state="translated">この問題の解決策は2つあります。</target>
        </trans-unit>
        <trans-unit id="96f079b98b93fb7f704da117338a35992b2e29f7" translate="yes" xml:space="preserve">
          <source>There has been a &lt;a href=&quot;https://github.com/nodejs/node/issues/19769&quot;&gt;performance regression&lt;/a&gt; in the latest stable versions of Node.js and its ES2015 &lt;code&gt;Map&lt;/code&gt; and &lt;code&gt;Set&lt;/code&gt; implementations. A fix has been merged in master, but a release has yet to be made. In the meantime, to get the most out of incremental build speeds, try to stick with version 8.9.x (problem exists between 8.9.10 - 9.11.1). webpack has moved to using those ES2015 data structures liberally, and it will improve the initial build times as well.</source>
          <target state="translated">あった&lt;a href=&quot;https://github.com/nodejs/node/issues/19769&quot;&gt;パフォーマンスの低下&lt;/a&gt;のNode.jsとそのES2015の最新の安定バージョンで &lt;code&gt;Map&lt;/code&gt; と &lt;code&gt;Set&lt;/code&gt; 実装。修正はマスターにマージされましたが、リリースはまだ行われていません。それまでの間、インクリメンタルビルド速度を最大限に活用するには、バージョン8.9.xを使用してください（8.9.10〜9.11.1の間に問題があります）。 webpackは、これらのES2015データ構造を自由に使用するようになり、初期ビルド時間も改善されます。</target>
        </trans-unit>
        <trans-unit id="d9d05322318799384d1e0b0c5b64e4a53b00f44d" translate="yes" xml:space="preserve">
          <source>There is a &lt;a href=&quot;https://github.com/TypeStrong/ts-loader/tree/master/examples/fast-incremental-builds&quot;&gt;full example&lt;/a&gt; on the ts-loader github repository</source>
          <target state="translated">ts-loader githubリポジトリに&lt;a href=&quot;https://github.com/TypeStrong/ts-loader/tree/master/examples/fast-incremental-builds&quot;&gt;完全な例&lt;/a&gt;があります</target>
        </trans-unit>
        <trans-unit id="028fda8bd113b7126322aeb6aa11e8851c9e9ab8" translate="yes" xml:space="preserve">
          <source>There is a known problem with Less and &lt;a href=&quot;https://github.com/css-modules/css-modules&quot;&gt;CSS modules&lt;/a&gt; regarding relative file paths in &lt;code&gt;url(...)&lt;/code&gt; statements. &lt;a href=&quot;https://github.com/webpack-contrib/less-loader/issues/109#issuecomment-253797335&quot;&gt;See this issue for an explanation&lt;/a&gt;.</source>
          <target state="translated">Lessおよび&lt;a href=&quot;https://github.com/css-modules/css-modules&quot;&gt;CSSモジュールに&lt;/a&gt;は、 &lt;code&gt;url(...)&lt;/code&gt; ステートメントの相対ファイルパスに関する既知の問題があります。&lt;a href=&quot;https://github.com/webpack-contrib/less-loader/issues/109#issuecomment-253797335&quot;&gt;説明については、この問題を参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7f98e90c6aa491e1ad9072a05a6ec97f5153bcc4" translate="yes" xml:space="preserve">
          <source>There is also an &lt;code&gt;extract&lt;/code&gt; function on the instance. You should use this if you have more than one instance of &lt;code&gt;ExtractTextPlugin&lt;/code&gt;.</source>
          <target state="translated">インスタンスには &lt;code&gt;extract&lt;/code&gt; 機能もあります。 &lt;code&gt;ExtractTextPlugin&lt;/code&gt; のインスタンスが複数ある場合は、これを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="aca6f0f8988a8ba1fdf3cdcb454b3a2847afa5c5" translate="yes" xml:space="preserve">
          <source>There is also an additional category &quot;inlined loader&quot; which are loaders applied inline of the import/require.</source>
          <target state="translated">また、インポート/要求のインラインで適用されるローダーである「インラインローダー」というカテゴリーもあります。</target>
        </trans-unit>
        <trans-unit id="63dc4b8122508bfde5c2b3cd6c0dbba7d8b69700" translate="yes" xml:space="preserve">
          <source>There is currently exactly one option: &lt;code&gt;publicPath&lt;/code&gt;. If you are using a relative &lt;code&gt;publicPath&lt;/code&gt; in webpack's &lt;a href=&quot;../configuration/output#output-publicpath&quot;&gt;output options&lt;/a&gt; and extracting to a file with the &lt;code&gt;file-loader&lt;/code&gt;, you might need this to account for the location of your extracted file.</source>
          <target state="translated">現在、1つのオプション、 &lt;code&gt;publicPath&lt;/code&gt; があります。webpackの&lt;a href=&quot;../configuration/output#output-publicpath&quot;&gt;出力オプション&lt;/a&gt;で相対 &lt;code&gt;publicPath&lt;/code&gt; を使用し、 &lt;code&gt;file-loader&lt;/code&gt; を使用してファイルに抽出している場合、抽出されたファイルの場所を考慮するためにこれが必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="9b97843cd1416b0f8c95b15bcea142c8b9e09f01" translate="yes" xml:space="preserve">
          <source>There is no need to change it.</source>
          <target state="translated">変える必要はありません。</target>
        </trans-unit>
        <trans-unit id="46994b7b987e4c2023ce27e138386b6cdc8bd10d" translate="yes" xml:space="preserve">
          <source>There is no option to provide a chunk name.</source>
          <target state="translated">チャンク名を提供するオプションはありません。</target>
        </trans-unit>
        <trans-unit id="b8ed6d814eca2d0cbf9ffca110d21faeddc6d1fe" translate="yes" xml:space="preserve">
          <source>There is one change that you will have to make to your webpack config. Typically, &lt;code&gt;module.exports&lt;/code&gt; points to the configuration object. To use the &lt;code&gt;env&lt;/code&gt; variable, you must convert &lt;code&gt;module.exports&lt;/code&gt; to a function:</source>
          <target state="translated">webpack構成に加えなければならない変更が1つあります。通常、 &lt;code&gt;module.exports&lt;/code&gt; は構成オブジェクトを指します。 &lt;code&gt;env&lt;/code&gt; 変数を使用するには、 &lt;code&gt;module.exports&lt;/code&gt; を関数に変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="52799d35176455f8706d99232f96e666a9d333a5" translate="yes" xml:space="preserve">
          <source>There's a lot of ways to load polyfills. For example, to include the &lt;a href=&quot;https://babeljs.io/docs/usage/polyfill/&quot;&gt;&lt;code&gt;babel-polyfill&lt;/code&gt;&lt;/a&gt; we might simply:</source>
          <target state="translated">ポリフィルをロードする方法はたくさんあります。たとえば、&lt;a href=&quot;https://babeljs.io/docs/usage/polyfill/&quot;&gt; &lt;code&gt;babel-polyfill&lt;/code&gt; &lt;/a&gt;を含めるには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="d94ad9229ad8612f68566c5b1de57d970fdc31a1" translate="yes" xml:space="preserve">
          <source>These allow you to configure the webpack &lt;a href=&quot;../configuration/resolve&quot;&gt;resolver&lt;/a&gt; with aliases and extensions.</source>
          <target state="translated">これらにより、エイリアスと拡張子を使用してwebpack &lt;a href=&quot;../configuration/resolve&quot;&gt;リゾルバー&lt;/a&gt;を構成できます。</target>
        </trans-unit>
        <trans-unit id="2566a954a0d02deae7eb0cd9561460980b0c8c7b" translate="yes" xml:space="preserve">
          <source>These are the defaults:</source>
          <target state="translated">これらがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="5c0bd375a87af39a4fcc4d939a8d4bc34eb2793b" translate="yes" xml:space="preserve">
          <source>These are the remaining configuration options supported by webpack.</source>
          <target state="translated">これらはwebpackがサポートしている残りの設定オプションです。</target>
        </trans-unit>
        <trans-unit id="ccf6d61b4ad3823e787101eb37a3b1386c459707" translate="yes" xml:space="preserve">
          <source>These options allow webpack to display various &lt;a href=&quot;../configuration/stats&quot;&gt;stats&lt;/a&gt; and style them differently in the console output.</source>
          <target state="translated">これらのオプションにより、webpackはさまざまな&lt;a href=&quot;../configuration/stats&quot;&gt;統計&lt;/a&gt;を表示し、コンソール出力でそれらを異なるスタイルにすることができます。</target>
        </trans-unit>
        <trans-unit id="2e0869eb46e5f04ea6e2b1f165c826b5b338ead2" translate="yes" xml:space="preserve">
          <source>These options allow you to bind &lt;a href=&quot;../configuration/module&quot;&gt;modules&lt;/a&gt; as allowed by webpack</source>
          <target state="translated">これらのオプションにより、webpackで許可されているように&lt;a href=&quot;../configuration/module&quot;&gt;モジュール&lt;/a&gt;をバインドできます</target>
        </trans-unit>
        <trans-unit id="d8bf2146c955380560f55188ae1ce7347c666b6e" translate="yes" xml:space="preserve">
          <source>These options allow you to manipulate optimisations for a production build using webpack</source>
          <target state="translated">これらのオプションを使用すると、webpack を使用して本番ビルドの最適化を操作することができます。</target>
        </trans-unit>
        <trans-unit id="1007a4ad40966f93fd98a21ab15571601e8096f3" translate="yes" xml:space="preserve">
          <source>These options allows you to control how webpack notifies you of assets and entry points that exceed a specific file limit. This feature was inspired by the idea of &lt;a href=&quot;https://github.com/webpack/webpack/issues/3216&quot;&gt;webpack Performance Budgets&lt;/a&gt;.</source>
          <target state="translated">これらのオプションを使用すると、特定のファイル制限を超えるアセットとエントリポイントをwebpackが通知する方法を制御できます。この機能は、&lt;a href=&quot;https://github.com/webpack/webpack/issues/3216&quot;&gt;webpack Performance Budgets&lt;/a&gt;のアイデアに触発されました。</target>
        </trans-unit>
        <trans-unit id="79407cc7a6ab20b192d9e99545132870bb628e82" translate="yes" xml:space="preserve">
          <source>These options are experimental and may be deprecated. As mentioned above, they are typically not necessary and including a &lt;code&gt;new webpack.HotModuleReplacementPlugin()&lt;/code&gt; is enough.</source>
          <target state="translated">これらのオプションは実験的なものであり、廃止される可能性があります。上記のように、通常は必要ありません。 &lt;code&gt;new webpack.HotModuleReplacementPlugin()&lt;/code&gt; を含めるだけで十分です。</target>
        </trans-unit>
        <trans-unit id="0103698eace700deceff10513d7687368a419e01" translate="yes" xml:space="preserve">
          <source>These options are typically used in production:</source>
          <target state="translated">これらのオプションは、通常、生産に使用されます。</target>
        </trans-unit>
        <trans-unit id="a79b628e2c2b80d262daaaf5e89a2b05a2721975" translate="yes" xml:space="preserve">
          <source>These options assign the return value of the entry point (e.g. whatever the entry point exported) to a specific object under the name defined by &lt;code&gt;output.library&lt;/code&gt;.</source>
          <target state="translated">これらのオプションは、エントリポイント（たとえば、エクスポートされたエントリポイント）の戻り値を、 &lt;code&gt;output.library&lt;/code&gt; で定義された名前で特定のオブジェクトに割り当てます。</target>
        </trans-unit>
        <trans-unit id="22b90ab37b5ba5275785aeca2a1aaf4ff18b86db" translate="yes" xml:space="preserve">
          <source>These options assign the return value of the entry point (e.g. whatever the entry point exported) to the name provided by &lt;code&gt;output.library&lt;/code&gt; at whatever scope the bundle was included at.</source>
          <target state="translated">これらのオプションは、エントリポイントの戻り値（たとえば、エクスポートされたエントリポイント）を、バンドルが含まれているスコープの &lt;code&gt;output.library&lt;/code&gt; によって提供される名前に割り当てます。</target>
        </trans-unit>
        <trans-unit id="a7d8234fcb48114f73a0a6667f67ab696c51cde7" translate="yes" xml:space="preserve">
          <source>These options change how modules are resolved. webpack provides reasonable defaults, but it is possible to change the resolving in detail. Have a look at &lt;a href=&quot;../concepts/module-resolution&quot;&gt;Module Resolution&lt;/a&gt; for more explanation of how the resolver works.</source>
          <target state="translated">これらのオプションは、モジュールの解決方法を変更します。webpackは適切なデフォルトを提供しますが、解決を詳細に変更することが可能です。リゾルバーの動作の詳細については、&lt;a href=&quot;../concepts/module-resolution&quot;&gt;モジュールの解決&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="502f606f9f22867ba7b4202ff6f348f30f97e661" translate="yes" xml:space="preserve">
          <source>These options configure whether to polyfill or mock certain &lt;a href=&quot;https://nodejs.org/docs/latest/api/globals.html&quot;&gt;Node.js globals&lt;/a&gt; and modules. This allows code originally written for the Node.js environment to run in other environments like the browser.</source>
          <target state="translated">これらのオプションは、特定の&lt;a href=&quot;https://nodejs.org/docs/latest/api/globals.html&quot;&gt;Node.jsグローバル&lt;/a&gt;とモジュールをポリフィルするかモックするかを構成します。これにより、もともとNode.js環境用に作成されたコードを、ブラウザーなどの他の環境で実行できます。</target>
        </trans-unit>
        <trans-unit id="5748337f019e8736c4c08ddb1aaa946717932550" translate="yes" xml:space="preserve">
          <source>These options describe the default settings for the context created when a dynamic dependency is encountered.</source>
          <target state="translated">これらのオプションは、動的依存関係に遭遇したときに作成されるコンテキストのデフォルト設定を記述します。</target>
        </trans-unit>
        <trans-unit id="fe61c54946c1acdaaac5a110beb75c2abe251578" translate="yes" xml:space="preserve">
          <source>These options determine how the &lt;a href=&quot;../concepts/modules&quot;&gt;different types of modules&lt;/a&gt; within a project will be treated.</source>
          <target state="translated">これらのオプションは、プロジェクト内の&lt;a href=&quot;../concepts/modules&quot;&gt;さまざまなタイプのモジュールが&lt;/a&gt;どのように処理されるかを決定します。</target>
        </trans-unit>
        <trans-unit id="4f6511d8b476377c46f5d4c2dc3654f0c2d86dd1" translate="yes" xml:space="preserve">
          <source>These options makes the build &lt;a href=&quot;../configuration/watch&quot;&gt;watch&lt;/a&gt; for changes in files of the dependency graph and perform the build again.</source>
          <target state="translated">これらのオプションにより、ビルドはディペンデンシーグラフのファイルの変更を&lt;a href=&quot;../configuration/watch&quot;&gt;監視&lt;/a&gt;し、ビルドを再実行します。</target>
        </trans-unit>
        <trans-unit id="454c972b24168045e7370d16bc161582d1d9c81e" translate="yes" xml:space="preserve">
          <source>These options will result in a bundle that comes with a more complete header to ensure compatibility with various module systems. The &lt;code&gt;output.library&lt;/code&gt; option will take on a different meaning under the following &lt;code&gt;output.libraryTarget&lt;/code&gt; options.</source>
          <target state="translated">これらのオプションにより、さまざまなモジュールシステムとの互換性を確保するためのより完全なヘッダーが付属するバンドルが作成されます。 &lt;code&gt;output.library&lt;/code&gt; オプションは、次の下に別の意味になります &lt;code&gt;output.libraryTarget&lt;/code&gt; オプション。</target>
        </trans-unit>
        <trans-unit id="08cf024ae104b7e9e8a8a0d48311f520b3337630" translate="yes" xml:space="preserve">
          <source>These properties affect the loaders: &lt;a href=&quot;#rule-loader&quot;&gt;&lt;code&gt;loader&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#rule-options-rule-query&quot;&gt;&lt;code&gt;options&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#rule-use&quot;&gt;&lt;code&gt;use&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらのプロパティはローダーに影響し&lt;a href=&quot;#rule-options-rule-query&quot;&gt; &lt;code&gt;options&lt;/code&gt; &lt;/a&gt;：&lt;a href=&quot;#rule-loader&quot;&gt; &lt;code&gt;loader&lt;/code&gt; &lt;/a&gt;、オプション、&lt;a href=&quot;#rule-use&quot;&gt; &lt;code&gt;use&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f724bae2af621776d8e318cd6c0f8e5bb1bcca74" translate="yes" xml:space="preserve">
          <source>These rules are evaluated when the Rule condition matches.</source>
          <target state="translated">これらのルールは、ルール条件が一致したときに評価されます。</target>
        </trans-unit>
        <trans-unit id="012c1550965907b42ec6d480f2bfaac07754c8c0" translate="yes" xml:space="preserve">
          <source>These steps would occur:</source>
          <target state="translated">これらのステップが発生します。</target>
        </trans-unit>
        <trans-unit id="57d372ece1047febfc2ceef2a98e5fe436082e4a" translate="yes" xml:space="preserve">
          <source>These two parameters can be used together to redirect requests in a more targeted way. The &lt;code&gt;newContentCreateContextMap&lt;/code&gt; allows you to map runtime requests to compile requests in the form of an object:</source>
          <target state="translated">これらの2つのパラメーターを一緒に使用して、より的を絞った方法で要求をリダイレクトできます。 &lt;code&gt;newContentCreateContextMap&lt;/code&gt; は、あなたがオブジェクトの形式で要求をコンパイルするランタイム要求をマッピングすることができます：</target>
        </trans-unit>
        <trans-unit id="f2417bbde2d2cb573d2628acc3066e13e3600335" translate="yes" xml:space="preserve">
          <source>They also serve the purpose of doing &lt;strong&gt;anything else&lt;/strong&gt; that a &lt;a href=&quot;loaders&quot;&gt;loader&lt;/a&gt; cannot do.</source>
          <target state="translated">また、&lt;a href=&quot;loaders&quot;&gt;ローダー&lt;/a&gt;が実行できない&lt;strong&gt;他の&lt;/strong&gt;ことを実行する目的にも役立ちます。</target>
        </trans-unit>
        <trans-unit id="3d4c374abb62de5d26d0baf6648ec4bfbb523c24" translate="yes" xml:space="preserve">
          <source>They are not enabled by default because they expose a runtime overhead and increase in bundle size (JS source maps do not). In addition to that relative paths are buggy and you need to use an absolute public path which include the server URL.</source>
          <target state="translated">これらはデフォルトでは有効になっていません。なぜなら、実行時のオーバーヘッドが発生し、バンドルサイズが増大するからです (JS ソースマップはそうではありません)。加えて、相対パスはバグが多く、サーバの URL を含む絶対パスを使う必要があります。</target>
        </trans-unit>
        <trans-unit id="6967131bc5ac15c7eedbcd99737fb8d7b6bcbf81" translate="yes" xml:space="preserve">
          <source>Third party addons</source>
          <target state="translated">サードパーティアドオン</target>
        </trans-unit>
        <trans-unit id="7049c64126a5ef56b2771dde6ee8579603f61c49" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;stats&lt;/code&gt; object exposes the following methods:</source>
          <target state="translated">この &lt;code&gt;stats&lt;/code&gt; オブジェクトは、次のメソッドを公開します：</target>
        </trans-unit>
        <trans-unit id="c856cbc45e829c1fa37cb33d1001f29567b6f09e" translate="yes" xml:space="preserve">
          <source>This CANNOT be used in an async function.</source>
          <target state="translated">これは非同期関数では使用できません。</target>
        </trans-unit>
        <trans-unit id="5ede9a9f06a97791ce57472a51006e343016b504" translate="yes" xml:space="preserve">
          <source>This CANNOT be used in an asynchronous function.</source>
          <target state="translated">これは非同期関数では使用できません。</target>
        </trans-unit>
        <trans-unit id="d6fcf631173dfe5541552e3cd115c778ac244bb4" translate="yes" xml:space="preserve">
          <source>This Webpack loader inlines SVG as module. If you use Adobe suite or Sketch to export SVGs, you will get auto-generated, unneeded crusts. This loader removes it for you, too.</source>
          <target state="translated">このWebpackローダーはSVGをモジュールとしてインライン化します。Adobe suite や Sketch を使って SVG をエクスポートすると、自動生成された不要なクラストが発生します。このローダーはこれも除去してくれます。</target>
        </trans-unit>
        <trans-unit id="9bbc872ea1fac7265c2fd82e9ad634bb871e11e4" translate="yes" xml:space="preserve">
          <source>This article will focus on the last of these three parts, the runtime and in particular the manifest.</source>
          <target state="translated">この記事では、これら3つの部分のうち最後の部分、ランタイム、特にマニフェストに焦点を当てます。</target>
        </trans-unit>
        <trans-unit id="a21549500935266e3533d6a74c4979f993c4dcf4" translate="yes" xml:space="preserve">
          <source>This becomes a problem when the module is executed in a CommonJS context where &lt;code&gt;this&lt;/code&gt; is equal to &lt;code&gt;module.exports&lt;/code&gt;. In this case you can override &lt;code&gt;this&lt;/code&gt; using the &lt;a href=&quot;../loaders/imports-loader&quot;&gt;&lt;code&gt;imports-loader&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">モジュールはCommonJSコンテキストで実行されたとき、これは問題になり &lt;code&gt;this&lt;/code&gt; に等しい &lt;code&gt;module.exports&lt;/code&gt; は。この場合、&lt;a href=&quot;../loaders/imports-loader&quot;&gt; &lt;code&gt;imports-loader&lt;/code&gt; &lt;/a&gt;を使用して &lt;code&gt;this&lt;/code&gt; をオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="baec1fec2435cd7acf759f93d8b8be9e1c4855c5" translate="yes" xml:space="preserve">
          <source>This boolean is set to true when this is compiled by webpack.</source>
          <target state="translated">このブール値は、これがwebpackでコンパイルされたときにtrueに設定されます。</target>
        </trans-unit>
        <trans-unit id="f899d8d2c6f2c05b71df74eabdec78e2e7328f65" translate="yes" xml:space="preserve">
          <source>This boots the max number of workers in the pool and loads specified modules into the node.js module cache.</source>
          <target state="translated">プール内のワーカーの最大数を起動し、指定したモジュールをnode.jsモジュールキャッシュにロードします。</target>
        </trans-unit>
        <trans-unit id="c0bc6ef24b6b80a9bf49aeb98312bc918d80974b" translate="yes" xml:space="preserve">
          <source>This bundle will not work as expected, or not work at all (in the case of the almond loader) if loaded directly with a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag. It will only work through a RequireJS compatible asynchronous module loader through the actual path to that file, so in this case, the &lt;code&gt;output.path&lt;/code&gt; and &lt;code&gt;output.filename&lt;/code&gt; may become important for this particular setup if these are exposed directly on the server.</source>
          <target state="translated">この &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; は、&amp;lt;script&amp;gt;タグを使用して直接ロードした場合、期待どおりに機能しないか、まったく機能しません（アーモンドローダーの場合）。このファイルへの実際のパスを介してRequireJS互換の非同期モジュールローダーを介してのみ機能するため、この場合、 &lt;code&gt;output.path&lt;/code&gt; と &lt;code&gt;output.filename&lt;/code&gt; がサーバーで直接公開されている場合、この特定の設定で重要になります。</target>
        </trans-unit>
        <trans-unit id="3bbdfa3acc96c26d61ba3ce08b93f184f93f43db" translate="yes" xml:space="preserve">
          <source>This can be done using the &lt;code&gt;externals&lt;/code&gt; configuration:</source>
          <target state="translated">これは、 &lt;code&gt;externals&lt;/code&gt; 設定を使用して行うことができます：</target>
        </trans-unit>
        <trans-unit id="9580dc90d48db5f49636b2d7b71da6ad0884a869" translate="yes" xml:space="preserve">
          <source>This can be especially helpful when implementing some sort of data visualization using a tool like &lt;a href=&quot;https://github.com/d3&quot;&gt;d3&lt;/a&gt;. Instead of making an ajax request and parsing the data at runtime you can load it into your module during the build process so that the parsed data is ready to go as soon as the module hits the browser.</source>
          <target state="translated">これは、&lt;a href=&quot;https://github.com/d3&quot;&gt;d3&lt;/a&gt;などのツールを使用してある種のデータ視覚化を実装する場合に特に役立ちます。ajaxリクエストを作成して実行時にデータを解析する代わりに、ビルドプロセス中にデータをモジュールにロードして、解析されたデータがモジュールがブラウザーに到達するとすぐに実行できるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="7e1bf4407126d15752d86781be25b8cf248f1d37" translate="yes" xml:space="preserve">
          <source>This can be fixed by using Node's &lt;code&gt;--preserve-symlinks&lt;/code&gt; flag which will allow you to develop cross-module, without experiencing inconsistencies when comparing against a normal, non-linked install:</source>
          <target state="translated">これは、ノードの &lt;code&gt;--preserve-symlinks&lt;/code&gt; フラグを使用して修正できます。これにより、通常のリンクされていないインストールと比較するときに矛盾が発生することなく、クロスモジュールを開発できます。</target>
        </trans-unit>
        <trans-unit id="eb1652868b3142e361ae8e70d6e1db4dfbc49f14" translate="yes" xml:space="preserve">
          <source>This can be useful for allowing different behaviour between builds.</source>
          <target state="translated">これは、ビルド間で異なる動作を可能にするのに便利です。</target>
        </trans-unit>
        <trans-unit id="44f088e20304c744db728f5661a86aa4d21f05b1" translate="yes" xml:space="preserve">
          <source>This can be useful if you want to require all files in a directory or matching a pattern, Example:</source>
          <target state="translated">これは、ディレクトリ内のすべてのファイルを要求したい場合や、パターンにマッチするファイルを要求したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="8676024628a920433edffaa7ae6a6bad09d7f6a9" translate="yes" xml:space="preserve">
          <source>This can either be a &lt;code&gt;boolean&lt;/code&gt; value or the cache directory path(ex: &lt;code&gt;'./.eslint-loader-cache'&lt;/code&gt;).</source>
          <target state="translated">これは、 &lt;code&gt;boolean&lt;/code&gt; 値またはキャッシュディレクトリパスのいずれかです（例： &lt;code&gt;'./.eslint-loader-cache'&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="5aa95a44f7b56fa270e7540b0c4516d6afc23ae5" translate="yes" xml:space="preserve">
          <source>This concatenation behavior is called &amp;ldquo;scope hoisting.&amp;rdquo;</source>
          <target state="translated">この連結動作は「スコープの巻き上げ」と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="a1b60edc5c47b09819f1b28410a8fcf699414214" translate="yes" xml:space="preserve">
          <source>This concept may be used to obtain implicit common vendor chunks:</source>
          <target state="translated">この概念は、暗黙の共通ベンダチャンクを取得するために使用されることがあります。</target>
        </trans-unit>
        <trans-unit id="8b14c6199ca975479eddf0911297de4ba6c2b77a" translate="yes" xml:space="preserve">
          <source>This configuration can enlarge your initial bundles, it is recommended to use dynamic imports when a module is not immediately needed.</source>
          <target state="translated">この設定は、初期のバンドルを拡大することができます。</target>
        </trans-unit>
        <trans-unit id="f8178aeab727f5b2ae39ef8a55f0f3db44980db5" translate="yes" xml:space="preserve">
          <source>This configuration object represents the default behavior of the &lt;code&gt;SplitChunksPlugin&lt;/code&gt;.</source>
          <target state="translated">この構成オブジェクトは、 &lt;code&gt;SplitChunksPlugin&lt;/code&gt; のデフォルトの動作を表します。</target>
        </trans-unit>
        <trans-unit id="b426c6694d3980dd6d187a7b69ccfdfdc20ed06a" translate="yes" xml:space="preserve">
          <source>This configuration would output a single &lt;code&gt;bundle.js&lt;/code&gt; file into the &lt;code&gt;dist&lt;/code&gt; directory.</source>
          <target state="translated">この構成では、単一の &lt;code&gt;bundle.js&lt;/code&gt; ファイルが &lt;code&gt;dist&lt;/code&gt; ディレクトリーに出力されます。</target>
        </trans-unit>
        <trans-unit id="fa12d5e0203ded4efe2f2beb27f665fe78f5300e" translate="yes" xml:space="preserve">
          <source>This document is intended to give a &lt;strong&gt;high-level&lt;/strong&gt; overview of these concepts, while providing links to detailed concept specific use cases.</source>
          <target state="translated">このドキュメントは、これらの概念の&lt;strong&gt;高レベルの&lt;/strong&gt;概要を提供する一方で、詳細な概念固有の使用例へのリンクを提供することを目的としています。</target>
        </trans-unit>
        <trans-unit id="3b55640f7b32656e0d1d0d69041cf653588b5957" translate="yes" xml:space="preserve">
          <source>This doesn't result in any change to the CSS itself but exports multiple classnames.</source>
          <target state="translated">これはCSS自体には何の変更も加えず、複数のクラス名をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="599f08e0438def7468d189bca38955cb98998e6b" translate="yes" xml:space="preserve">
          <source>This enables local scoped CSS by default. (You can switch it off with &lt;code&gt;:global(...)&lt;/code&gt; or &lt;code&gt;:global&lt;/code&gt; for selectors and/or rules.).</source>
          <target state="translated">これにより、デフォルトでローカルスコープのCSSが有効になります。（セレクターやルールの &lt;code&gt;:global(...)&lt;/code&gt; または &lt;code&gt;:global&lt;/code&gt; でそれをオフに切り替えることができます。）</target>
        </trans-unit>
        <trans-unit id="3bad9fc6c6d0140a761114db8b4526c2bdc7ed1a" translate="yes" xml:space="preserve">
          <source>This enables you to &lt;code&gt;import './style.css'&lt;/code&gt; into the file that depends on that styling. Now, when that module is run, a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag with the stringified css will be inserted into the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of your html file.</source>
          <target state="translated">これにより、そのスタイルに依存するファイルに &lt;code&gt;import './style.css'&lt;/code&gt; をインポートできます。これで、そのモジュールが実行されると、文字列化されたcssを含む &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; タグがHTMLファイルの &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; に挿入されます。</target>
        </trans-unit>
        <trans-unit id="bd65cf352aa69ab40ac2d0a4ed9c1dfdf6de6cea" translate="yes" xml:space="preserve">
          <source>This exposes your library bundle available as a global variable named &lt;code&gt;webpackNumbers&lt;/code&gt; when imported. To make the library compatible with other environments, add &lt;code&gt;libraryTarget&lt;/code&gt; property to the config. This will add the different options about how the library can be exposed.</source>
          <target state="translated">これにより、インポート時にライブラリバンドルが &lt;code&gt;webpackNumbers&lt;/code&gt; という名前のグローバル変数として公開されます。ライブラリを他の環境と互換性を持たせるには、設定に &lt;code&gt;libraryTarget&lt;/code&gt; プロパティを追加します。これにより、ライブラリの公開方法に関するさまざまなオプションが追加されます。</target>
        </trans-unit>
        <trans-unit id="69ef084d40688e7b5d5d8996554e04e0ca6cfd1c" translate="yes" xml:space="preserve">
          <source>This feature is great for productivity. All we need to do is update our &lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt; configuration, and use webpack's built in HMR plugin. We'll also remove the entry point for &lt;code&gt;print.js&lt;/code&gt; as it will now be consumed by the &lt;code&gt;index.js&lt;/code&gt; module.</source>
          <target state="translated">この機能は生産性に優れています。必要なのは、&lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt;構成を更新し、webpackの組み込みHMRプラグインを使用することだけです。また、 &lt;code&gt;print.js&lt;/code&gt; のエントリポイントも削除します。これは、 &lt;code&gt;index.js&lt;/code&gt; モジュールによって消費されるためです。</target>
        </trans-unit>
        <trans-unit id="79ad76420d55e87371fad64492f2963aea24c4eb" translate="yes" xml:space="preserve">
          <source>This feature is provided by webpack's internal &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/NodeStuffPlugin.js&quot;&gt;&lt;code&gt;NodeStuffPlugin&lt;/code&gt;&lt;/a&gt; plugin. If the target is &quot;web&quot; (default) or &quot;webworker&quot;, the &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/node/NodeSourcePlugin.js&quot;&gt;&lt;code&gt;NodeSourcePlugin&lt;/code&gt;&lt;/a&gt; plugin is also activated.</source>
          <target state="translated">この機能は、webpackの内部&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/NodeStuffPlugin.js&quot;&gt; &lt;code&gt;NodeStuffPlugin&lt;/code&gt; &lt;/a&gt;プラグインによって提供されます。ターゲットが「web」（デフォルト）または「webworker」の場合、&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/node/NodeSourcePlugin.js&quot;&gt; &lt;code&gt;NodeSourcePlugin&lt;/code&gt; &lt;/a&gt;プラグインもアクティブになります。</target>
        </trans-unit>
        <trans-unit id="b704dfb503dd69b6a849b0e22a57a5d32765f8b9" translate="yes" xml:space="preserve">
          <source>This feature relies on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; internally. If you use &lt;code&gt;import()&lt;/code&gt; with older browsers, remember to shim &lt;code&gt;Promise&lt;/code&gt; using a polyfill such as &lt;a href=&quot;https://github.com/stefanpenner/es6-promise&quot;&gt;es6-promise&lt;/a&gt; or &lt;a href=&quot;https://github.com/taylorhakes/promise-polyfill&quot;&gt;promise-polyfill&lt;/a&gt;.</source>
          <target state="translated">この機能は内部的に&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; に&lt;/a&gt;依存しています。古いブラウザで &lt;code&gt;import()&lt;/code&gt; を使用する場合は、&lt;a href=&quot;https://github.com/stefanpenner/es6-promise&quot;&gt;es6-promise&lt;/a&gt;や&lt;a href=&quot;https://github.com/taylorhakes/promise-polyfill&quot;&gt;promise-polyfill&lt;/a&gt;などのポリフィルを使用して &lt;code&gt;Promise&lt;/code&gt; をシムすることを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="a46c09f986aa73dc78c4b47b58c94cabba924769" translate="yes" xml:space="preserve">
          <source>This feature relies on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; internally. If you use &lt;code&gt;require.ensure&lt;/code&gt; with older browsers, remember to shim &lt;code&gt;Promise&lt;/code&gt; using a polyfill such as &lt;a href=&quot;https://github.com/stefanpenner/es6-promise&quot;&gt;es6-promise&lt;/a&gt; or &lt;a href=&quot;https://github.com/taylorhakes/promise-polyfill&quot;&gt;promise-polyfill&lt;/a&gt;.</source>
          <target state="translated">この機能は内部的に&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; に&lt;/a&gt;依存しています。古いブラウザで &lt;code&gt;require.ensure&lt;/code&gt; を使用する場合は、&lt;a href=&quot;https://github.com/stefanpenner/es6-promise&quot;&gt;es6-promise&lt;/a&gt;や&lt;a href=&quot;https://github.com/taylorhakes/promise-polyfill&quot;&gt;promise-polyfill&lt;/a&gt;などのポリフィルを使用して &lt;code&gt;Promise&lt;/code&gt; をシムすることを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="1784fa4ee081d52871ddd8875156431960fca6ae" translate="yes" xml:space="preserve">
          <source>This feature relies on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; internally. If you use AMD with older browsers (e.g. Internet Explorer 11), remember to shim &lt;code&gt;Promise&lt;/code&gt; using a polyfill such as &lt;a href=&quot;https://github.com/stefanpenner/es6-promise&quot;&gt;es6-promise&lt;/a&gt; or &lt;a href=&quot;https://github.com/taylorhakes/promise-polyfill&quot;&gt;promise-polyfill&lt;/a&gt;.</source>
          <target state="translated">この機能は内部的に&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; に&lt;/a&gt;依存しています。AMDを古いブラウザー（Internet Explorer 11など）で使用する場合は、&lt;a href=&quot;https://github.com/stefanpenner/es6-promise&quot;&gt;es6-promise&lt;/a&gt;や&lt;a href=&quot;https://github.com/taylorhakes/promise-polyfill&quot;&gt;promise-polyfill&lt;/a&gt;などのポリフィルを使用して &lt;code&gt;Promise&lt;/code&gt; をシムすることを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="2f10d727220baca2938b1a342e008a2d35949f1c" translate="yes" xml:space="preserve">
          <source>This follows the same rules as those specified for file resolution. But the &lt;a href=&quot;../configuration/resolve#resolveloader&quot;&gt;&lt;code&gt;resolveLoader&lt;/code&gt;&lt;/a&gt; configuration option can be used to have separate resolution rules for loaders.</source>
          <target state="translated">これは、ファイル解決に指定されたものと同じルールに従います。ただし、&lt;a href=&quot;../configuration/resolve#resolveloader&quot;&gt; &lt;code&gt;resolveLoader&lt;/code&gt; &lt;/a&gt;構成オプションを使用して、ローダーに個別の解決ルールを設定できます。</target>
        </trans-unit>
        <trans-unit id="f32268d39ceea09d3d6306eb50cca10ac3efd123" translate="yes" xml:space="preserve">
          <source>This guide contains some useful tips for improving build/compilation performance.</source>
          <target state="translated">このガイドには、ビルド/コンパイルのパフォーマンスを向上させるために役立つヒントがいくつか含まれています。</target>
        </trans-unit>
        <trans-unit id="6e74ee278b6483e63e246262d4b0558794583866" translate="yes" xml:space="preserve">
          <source>This guide extends on code examples found in the &lt;a href=&quot;asset-management&quot;&gt;&lt;code&gt;Asset Management&lt;/code&gt;&lt;/a&gt; guide.</source>
          <target state="translated">このガイドは、&lt;a href=&quot;asset-management&quot;&gt; &lt;code&gt;Asset Management&lt;/code&gt; &lt;/a&gt;ガイドにあるコード例を拡張したものです。</target>
        </trans-unit>
        <trans-unit id="5b251b76cf265164795401de844aec084670ed8b" translate="yes" xml:space="preserve">
          <source>This guide extends on code examples found in the &lt;a href=&quot;development&quot;&gt;Development&lt;/a&gt; guide.</source>
          <target state="translated">このガイドは、&lt;a href=&quot;development&quot;&gt;開発&lt;/a&gt;ガイドにあるコード例を拡張したものです。</target>
        </trans-unit>
        <trans-unit id="e695885af13bd16faad41148a2a86747da0469ea" translate="yes" xml:space="preserve">
          <source>This guide extends on code examples found in the &lt;a href=&quot;output-management&quot;&gt;Output Management&lt;/a&gt; guide.</source>
          <target state="translated">このガイドは、&lt;a href=&quot;output-management&quot;&gt;出力管理&lt;/a&gt;ガイドにあるコード例を拡張したものです。</target>
        </trans-unit>
        <trans-unit id="e586717908f30e2eb3dae17b0c51e6aa57c70149" translate="yes" xml:space="preserve">
          <source>This guide extends the examples provided in &lt;a href=&quot;getting-started&quot;&gt;Getting Started&lt;/a&gt; and &lt;a href=&quot;output-management&quot;&gt;Output Management&lt;/a&gt;. Please make sure you are at least familiar with the examples provided in them.</source>
          <target state="translated">このガイドは、&lt;a href=&quot;getting-started&quot;&gt;「はじめに」&lt;/a&gt;および「&lt;a href=&quot;output-management&quot;&gt;出力管理&lt;/a&gt;」で提供されている例を拡張したものです。提供されている例に少なくとも精通していることを確認してください。</target>
        </trans-unit>
        <trans-unit id="73feb60d4ff54e1bed9cecb930b3d4cb4688b9bd" translate="yes" xml:space="preserve">
          <source>This guide focuses on the configuration needed to ensure files produced by webpack compilation can remain cached unless their contents has changed.</source>
          <target state="translated">このガイドでは、webpackコンパイルによって生成されたファイルが、その内容が変更されない限りキャッシュされたままでいられるようにするために必要な設定に焦点を当てています。</target>
        </trans-unit>
        <trans-unit id="28ff626f461f33c15358e30a2a67dd11c6916c34" translate="yes" xml:space="preserve">
          <source>This guide goes through the various methods used to install webpack.</source>
          <target state="translated">このガイドでは、webpackをインストールするために使用される様々な方法について説明しています。</target>
        </trans-unit>
        <trans-unit id="04ab105d2ba31796ba8058507be23bb87f5478d3" translate="yes" xml:space="preserve">
          <source>This guide is a small follow-up to &lt;a href=&quot;code-splitting&quot;&gt;Code Splitting&lt;/a&gt;. If you have not yet read through that guide, please do so now.</source>
          <target state="translated">このガイドは、&lt;a href=&quot;code-splitting&quot;&gt;コード分​​割の&lt;/a&gt;小さなフォローアップです。そのガイドをまだ読んでいない場合は、今すぐ読んでください。</target>
        </trans-unit>
        <trans-unit id="9515b6e28f5a9f26a4966a59ee8efe94d078667b" translate="yes" xml:space="preserve">
          <source>This guide stems from the &lt;a href=&quot;getting-started&quot;&gt;&lt;em&gt;Getting Started&lt;/em&gt;&lt;/a&gt; guide.</source>
          <target state="translated">このガイドは、&lt;a href=&quot;getting-started&quot;&gt;&lt;em&gt;入門&lt;/em&gt;&lt;/a&gt;ガイドに基づいています。</target>
        </trans-unit>
        <trans-unit id="7db5a0744cb411b222f5ddf37115a92427f093c9" translate="yes" xml:space="preserve">
          <source>This indicates which chunks will be selected for optimization. If a string is provided, possible values are &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;async&lt;/code&gt;, and &lt;code&gt;initial&lt;/code&gt;. Providing &lt;code&gt;all&lt;/code&gt; can be particularly powerful because it means that chunks can be shared even between async and non-async chunks.</source>
          <target state="translated">これは、最適化のために選択されるチャンクを示します。文字列が指定されている場合、可能な値は &lt;code&gt;all&lt;/code&gt; 、 &lt;code&gt;async&lt;/code&gt; 、および &lt;code&gt;initial&lt;/code&gt; です。 &lt;code&gt;all&lt;/code&gt; を提供することは、非同期チャンクと非非同期チャンクの間でもチャンクを共有できることを意味するため、特に強力です。</target>
        </trans-unit>
        <trans-unit id="8df877acd9008859a1bdb1efea3293a6acf64ffc" translate="yes" xml:space="preserve">
          <source>This is &lt;code&gt;false&lt;/code&gt; if the module is currently executing, and &lt;code&gt;true&lt;/code&gt; if the sync execution has finished.</source>
          <target state="translated">これは、モジュールが現在実行中の場合は &lt;code&gt;false&lt;/code&gt; 、同期の実行が終了した場合は &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ecb3ef0422ffd6e3c5b0a329b020146b6b6f51bb" translate="yes" xml:space="preserve">
          <source>This is &lt;code&gt;true&lt;/code&gt; by default in &lt;code&gt;production&lt;/code&gt; mode.</source>
          <target state="translated">これは、 &lt;code&gt;production&lt;/code&gt; モードのデフォルトで &lt;code&gt;true&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="df1f3325933036ef23805a4ec9f47646d400ceed" translate="yes" xml:space="preserve">
          <source>This is a great choice when you are looking to quickly setup a webpack configuration for an application or tool with one entry point (i.e., a library). However, there is not much flexibility in extending or scaling your configuration with this syntax.</source>
          <target state="translated">これは、1つのエントリーポイント(すなわちライブラリ)でアプリケーションやツールのためのwebpack設定を素早く設定したい場合に最適な選択です。しかし、この構文では構成を拡張したり拡大したりする柔軟性はあまりありません。</target>
        </trans-unit>
        <trans-unit id="c87ce6ad59d4ba0a8d22cf3002d88ef702a80d86" translate="yes" xml:space="preserve">
          <source>This is a list of plugins which are used by webpack internally.</source>
          <target state="translated">webpackが内部で使用しているプラグインの一覧です。</target>
        </trans-unit>
        <trans-unit id="8886144b094f0f97dada64e907fc12e5eda8ec9e" translate="yes" xml:space="preserve">
          <source>This is an important option when using on-demand-loading or loading external resources like images, files, etc. If an incorrect value is specified you'll receive 404 errors while loading these resources.</source>
          <target state="translated">これは、オンデマンドロードを使用したり、画像やファイルなどの外部リソースをロードする際に重要なオプションです。不適切な値を指定すると、これらのリソースをロードしている間に404エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="0757868f46be2aa16e1835586e0d7a20832c2a91" translate="yes" xml:space="preserve">
          <source>This is an object where each property is the name of a Node global or module and each value may be one of the following...</source>
          <target state="translated">これは、各プロパティがノードのグローバルまたはモジュールの名前であり、各値が以下のいずれかであるオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="48cde90b57a464eb3fff794ce73eb3c3ac1fa916" translate="yes" xml:space="preserve">
          <source>This is because webpack includes certain boilerplate, specifically the runtime and manifest, in the entry chunk.</source>
          <target state="translated">これは、webpack がエントリチャンクにランタイムとマニフェストという特定のボイラプレートを含んでいるからです。</target>
        </trans-unit>
        <trans-unit id="560b1952bb069ebc7dec6531e687fec09448474f" translate="yes" xml:space="preserve">
          <source>This is by far the easiest, and most intuitive, way to split code. However, it is more manual and has some pitfalls we will go over. Let's take a look at how we might split another module from the main bundle:</source>
          <target state="translated">これは、コードを分割する最も簡単で直感的な方法です。しかし、この方法はよりマニュアル的で、いくつかの落とし穴があります。ここでは、メインバンドルから別のモジュールを分割する方法を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="e22332e1691cc2177c430d4688ce63cb96fe89c0" translate="yes" xml:space="preserve">
          <source>This is equivalent to the following &lt;code&gt;DefinePlugin&lt;/code&gt; application:</source>
          <target state="translated">これは、次の &lt;code&gt;DefinePlugin&lt;/code&gt; アプリケーションと同等です。</target>
        </trans-unit>
        <trans-unit id="a247f4b44e6328f72d37accf666f7af5287fe2f2" translate="yes" xml:space="preserve">
          <source>This is happening because the button's &lt;code&gt;onclick&lt;/code&gt; event handler is still bound to the original &lt;code&gt;printMe&lt;/code&gt; function.</source>
          <target state="translated">これは、ボタンの &lt;code&gt;onclick&lt;/code&gt; イベントハンドラーが元の &lt;code&gt;printMe&lt;/code&gt; 関数にまだバインドされているために発生します。</target>
        </trans-unit>
        <trans-unit id="cfbbab771cd3e0d8e7090c42bd261a535ae96610" translate="yes" xml:space="preserve">
          <source>This is just one example, but there are many others that can easily trip people up. Luckily, there are a lot of loaders out there (some of which are mentioned below) that will make hot module replacement much easier.</source>
          <target state="translated">これはほんの一例ですが、簡単に人々をトリップさせることができる多くの他のものがあります。幸いにも、ホットモジュールの交換をはるかに簡単にする多くのローダーがそこにあります(そのうちのいくつかは以下に記載されています)。</target>
        </trans-unit>
        <trans-unit id="ed595ad5f73af435979138b3d3627bf88533699b" translate="yes" xml:space="preserve">
          <source>This is only needed in rare cases for compatibility!</source>
          <target state="translated">これは互換性のためにまれにしか必要ありません!</target>
        </trans-unit>
        <trans-unit id="0a04aff2cecd73b8ca74cfcee6fa3f22d2d86581" translate="yes" xml:space="preserve">
          <source>This is useful for third-party modules that rely on global variables like &lt;code&gt;$&lt;/code&gt; or &lt;code&gt;this&lt;/code&gt; being the &lt;code&gt;window&lt;/code&gt; object. The imports loader can add the necessary &lt;code&gt;require('whatever')&lt;/code&gt; calls, so those modules work with webpack.</source>
          <target state="translated">これは、 &lt;code&gt;$&lt;/code&gt; などのグローバル変数または &lt;code&gt;window&lt;/code&gt; オブジェクトである &lt;code&gt;this&lt;/code&gt; に依存するサードパーティのモジュールに役立ちます。インポートローダーは必要な &lt;code&gt;require('whatever')&lt;/code&gt; 呼び出しを追加できるため、これらのモジュールはwebpackで動作します。</target>
        </trans-unit>
        <trans-unit id="5c2df09178c8def03e43ef498bdd896740082e04" translate="yes" xml:space="preserve">
          <source>This is what we aim to change. Once we reach the end of this module we should be able to stop the server, hit refresh and still see our application.</source>
          <target state="translated">これが私たちの目的です。このモジュールの最後に到達したら、サーバを停止してリフレッシュを実行しても、アプリケーションを見ることができるようになるはずです。</target>
        </trans-unit>
        <trans-unit id="b45f7eb5f9affbddb392058c7d7f4abfaa7fad00" translate="yes" xml:space="preserve">
          <source>This leaves any dependent modules unchanged, i.e. the code shown below will still work:</source>
          <target state="translated">これにより、依存するモジュールは変更されません。</target>
        </trans-unit>
        <trans-unit id="46a3f41a9605c3c4e04a060a9596421064960a0d" translate="yes" xml:space="preserve">
          <source>This loader [cannot be used] with [CSS Modules] out of the box due to the way &lt;code&gt;css-loader&lt;/code&gt; processes file imports. To make them work properly, either add the css-loader&amp;rsquo;s [&lt;code&gt;importLoaders&lt;/code&gt;] option.</source>
          <target state="translated">&lt;code&gt;css-loader&lt;/code&gt; がファイルのインポートを処理する方法が原因で、このローダーは[CSSモジュール]でそのまま使用できます[CSSモジュール] 。それらを適切に機能させるには、css-loaderの[ &lt;code&gt;importLoaders&lt;/code&gt; ]オプションを追加します。</target>
        </trans-unit>
        <trans-unit id="5d190b8c7f6d0f3902b044fdeec81f5b5fe3f35d" translate="yes" xml:space="preserve">
          <source>This loader allows use of &lt;a href=&quot;https://github.com/substack/node-browserify/wiki/list-of-transforms&quot;&gt;browserify transforms&lt;/a&gt; via a webpack loader.</source>
          <target state="translated">このローダーでは、webpackローダーを介してbrowserify &lt;a href=&quot;https://github.com/substack/node-browserify/wiki/list-of-transforms&quot;&gt;変換&lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="fe9d535f7bc40b833c73bb475459fe6f55acdbac" translate="yes" xml:space="preserve">
          <source>This loader also supports the following loader-specific option:</source>
          <target state="translated">このローダーは、以下のローダー固有のオプションもサポートしています。</target>
        </trans-unit>
        <trans-unit id="7f1d3b58142cc368ab79e7a3d3404472a3fa8c0c" translate="yes" xml:space="preserve">
          <source>This loader is especially useful when using 3rd-party libraries having their own source maps. If not extracted and processed into the source map of the webpack bundle, browsers may misinterpret source map data. &lt;code&gt;source-map-loader&lt;/code&gt; allows webpack to maintain source map data continuity across libraries so ease of debugging is preserved.</source>
          <target state="translated">このローダーは、独自のソースマップを持つサードパーティライブラリを使用する場合に特に便利です。抽出してwebpackバンドルのソースマップに処理しないと、ブラウザーがソースマップデータを誤って解釈する可能性があります。 &lt;code&gt;source-map-loader&lt;/code&gt; を使用すると、webpackはライブラリ全体でソースマップデータの連続性を維持できるため、デバッグが容易になります。</target>
        </trans-unit>
        <trans-unit id="c13ed36167d63c496c0f6f91ea0830c119623ac7" translate="yes" xml:space="preserve">
          <source>This makes the server only accessible on &lt;code&gt;127.0.0.1&lt;/code&gt;, which is fine, because nginx takes care of making it available on your host PC.</source>
          <target state="translated">これにより、nginxがホストPCで利用できるようにするため、サーバーは &lt;code&gt;127.0.0.1&lt;/code&gt; でのみアクセス可能になります。これは問題ありません。</target>
        </trans-unit>
        <trans-unit id="f6d2ee006876cf0259837350ed2e7e14e3c6e566" translate="yes" xml:space="preserve">
          <source>This may change in the future, when the module system (i. e. webpack) supports loader matching by origin.</source>
          <target state="translated">これは将来、モジュールシステム(すなわち webpack)がオリジンによるローダーのマッチングをサポートするようになったときに変更されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="aa062b6d5cead179ec54169c8e5af773c2ed6f12" translate="yes" xml:space="preserve">
          <source>This may degrade build performance.</source>
          <target state="translated">これにより、ビルド性能が低下する可能性があります。</target>
        </trans-unit>
        <trans-unit id="d33959ca5bc487e790d0b48b89538a6812c28404" translate="yes" xml:space="preserve">
          <source>This means dynamic requires are supported but will cause all possible modules to be included in the bundle.</source>
          <target state="translated">これは、動的な要求がサポートされていることを意味しますが、すべての可能なモジュールがバンドルに含まれることになります。</target>
        </trans-unit>
        <trans-unit id="d283638a7cf787c4d96d0cb34244baab95292b27" translate="yes" xml:space="preserve">
          <source>This means that when we &lt;code&gt;import * as D3 from &quot;d3&quot;&lt;/code&gt; this will really resolve to the file in the &lt;code&gt;browser&lt;/code&gt; property. The &lt;code&gt;browser&lt;/code&gt; property takes precedence here because it's the first item in &lt;code&gt;mainFields&lt;/code&gt;. Meanwhile, a Node.js application bundled by webpack will resolve by default to the file in the &lt;code&gt;module&lt;/code&gt; field.</source>
          <target state="translated">これは、 &lt;code&gt;import * as D3 from &quot;d3&quot;&lt;/code&gt; すると、 &lt;code&gt;browser&lt;/code&gt; プロパティのファイルに実際に解決されることを意味します。 &lt;code&gt;browser&lt;/code&gt; それはの最初の項目だからプロパティは、ここで優先されます &lt;code&gt;mainFields&lt;/code&gt; 。一方、webpackにバンドルされているNode.jsアプリケーションは、デフォルトで &lt;code&gt;module&lt;/code&gt; フィールドのファイルに解決されます。</target>
        </trans-unit>
        <trans-unit id="a5409a29ade1ec4c17b7eaa00e7d86e1af4d2f79" translate="yes" xml:space="preserve">
          <source>This means that your library expects a dependency named &lt;code&gt;lodash&lt;/code&gt; to be available in the consumer's environment.</source>
          <target state="translated">これは、ライブラリーが &lt;code&gt;lodash&lt;/code&gt; という名前の依存関係がコンシューマーの環境で使用可能であることを期待していることを意味します。</target>
        </trans-unit>
        <trans-unit id="f777fcccade65135ca746231b68bbfa503391afc" translate="yes" xml:space="preserve">
          <source>This might result in a large chunk containing all external packages. It is recommended to only include your core frameworks and utilities and dynamically load the rest of the dependencies.</source>
          <target state="translated">その結果、すべての外部パッケージを含む大きな塊になってしまうかもしれません。コアフレームワークとユーティリティだけをインクルードし、残りの依存関係を動的にロードすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="d526e1e403decb2661013c42f1e3e331b6d3a771" translate="yes" xml:space="preserve">
          <source>This module adds stuff from Node.js that is not available in non Node.js environments.</source>
          <target state="translated">このモジュールは、Node.js以外の環境では利用できないものをNode.jsから追加します。</target>
        </trans-unit>
        <trans-unit id="6ab0268836547089f2dcf783f9be200724a579dd" translate="yes" xml:space="preserve">
          <source>This module can support non-standard JavaScript file formats when a compatible compiler is registered via the &lt;code&gt;require&lt;/code&gt; option. If the option is defined, &lt;code&gt;config-loader&lt;/code&gt; will attempt to require the specified module(s) before the target config is found and loaded.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;require&lt;/code&gt; オプションを介して互換性のあるコンパイラが登録されている場合、非標準のJavaScriptファイル形式をサポートできます。オプションが定義されている場合、 &lt;code&gt;config-loader&lt;/code&gt; は、ターゲット構成が見つかりロードされる前に、指定されたモジュールを要求しようとします。</target>
        </trans-unit>
        <trans-unit id="f45c003c14dd79dda08fe5ed461cf012badc0fdf" translate="yes" xml:space="preserve">
          <source>This module is exposed as &lt;code&gt;webpack.Compiler&lt;/code&gt; and can be used directly. See &lt;a href=&quot;https://github.com/pksjce/webpack-internal-examples/tree/master/compiler-example&quot;&gt;this example&lt;/a&gt; for more information.</source>
          <target state="translated">このモジュールは &lt;code&gt;webpack.Compiler&lt;/code&gt; として公開されており、直接使用できます。詳細については、&lt;a href=&quot;https://github.com/pksjce/webpack-internal-examples/tree/master/compiler-example&quot;&gt;この例&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6cba27f11c42ca7da5420b0f4d9f2641d3844e73" translate="yes" xml:space="preserve">
          <source>This module requires a minimum of Node v6.9.0 and Webpack v4.0.0.</source>
          <target state="translated">このモジュールは、Node v6.9.0とWebpack v4.0.0以上が必要です。</target>
        </trans-unit>
        <trans-unit id="b3a35d9e538001d0d628d180d914a08e8f5c0837" translate="yes" xml:space="preserve">
          <source>This module requires a minimum of Node v6.9.0 and webpack v4.0.0.</source>
          <target state="translated">このモジュールはNode v6.9.0とwebpack v4.0.0以上が必要です。</target>
        </trans-unit>
        <trans-unit id="f881a340456fac03baeb3dd035c116286f43e93a" translate="yes" xml:space="preserve">
          <source>This module requires a minimum of Node v6.9.0 and works with Webpack v3 and Webpack v4.</source>
          <target state="translated">このモジュールはNode v6.9.0以上が必要で、Webpack v3とWebpack v4で動作します。</target>
        </trans-unit>
        <trans-unit id="c109cc9d524df5e8821464e562a600dcd9557732" translate="yes" xml:space="preserve">
          <source>This module supports extending webpack configuration files with &lt;a href=&quot;https://eslint.org/docs/user-guide/configuring#extending-configuration-files&quot;&gt;ESLint-style&lt;/a&gt;&lt;code&gt;extends&lt;/code&gt; functionality. This feature allows users to create a &quot;base&quot; config and in essence, &quot;inherit&quot; from that base config in a separate config. A bare-bones example:</source>
          <target state="translated">このモジュールは、&lt;a href=&quot;https://eslint.org/docs/user-guide/configuring#extending-configuration-files&quot;&gt;ESLintスタイルの&lt;/a&gt; &lt;code&gt;extends&lt;/code&gt; 機能でWebpack構成ファイルの拡張をサポートします。この機能により、ユーザーは「基本」構成を作成でき、基本的には、その基本構成から別の構成で「継承」できます。基本的な例：</target>
        </trans-unit>
        <trans-unit id="0dba5974c2e26fd236ce4621f1e4d99eac196b30" translate="yes" xml:space="preserve">
          <source>This module utilizes &lt;a href=&quot;https://github.com/davidtheclark/cosmiconfig&quot;&gt;&lt;code&gt;cosmiconfig&lt;/code&gt;&lt;/a&gt; which supports declaring a webpack configuration in a number of different file formats including; &lt;code&gt;.webpackrc&lt;/code&gt;, &lt;code&gt;webpack.config.js&lt;/code&gt;, and a &lt;code&gt;webpack&lt;/code&gt; property in a &lt;code&gt;package.json&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、次のようなさまざまなファイル形式でのWebpack構成の宣言をサポートする&lt;a href=&quot;https://github.com/davidtheclark/cosmiconfig&quot;&gt; &lt;code&gt;cosmiconfig&lt;/code&gt; &lt;/a&gt;を利用します。 &lt;code&gt;.webpackrc&lt;/code&gt; 、 &lt;code&gt;webpack.config.js&lt;/code&gt; 、および &lt;code&gt;package.json&lt;/code&gt; の &lt;code&gt;webpack&lt;/code&gt; プロパティ。</target>
        </trans-unit>
        <trans-unit id="005b9fb11eab47f37d7ae0f0642a6320e8d309df" translate="yes" xml:space="preserve">
          <source>This needs to be changed if multiple webpack runtimes (from different compilation) are used on the same webpage.</source>
          <target state="translated">これは、同じウェブページ上で複数のwebpackランタイム(異なるコンパイルからの)が使用されている場合に変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="fade0e5971b52e5136488a11c9a7a0a582ad3d8b" translate="yes" xml:space="preserve">
          <source>This object is passed straight to Node.js HTTPS module, so see the &lt;a href=&quot;https://nodejs.org/api/https.html&quot;&gt;HTTPS documentation&lt;/a&gt; for more information.</source>
          <target state="translated">このオブジェクトはNode.js HTTPSモジュールに直接渡されるため、詳細については&lt;a href=&quot;https://nodejs.org/api/https.html&quot;&gt;HTTPSのドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="a4aaf96997e7b0c90746fd6c3567a4f7aa2c8ac4" translate="yes" xml:space="preserve">
          <source>This only works when using &lt;code&gt;contentBase&lt;/code&gt; as a &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;contentBase&lt;/code&gt; を &lt;code&gt;string&lt;/code&gt; として使用する場合にのみ機能します。</target>
        </trans-unit>
        <trans-unit id="79925c99f93c2ec0087ae0ffced8f00ba5d1c9ed" translate="yes" xml:space="preserve">
          <source>This option allows you to set the key your module looks for to a truthy value. As it happens, the AMD support in webpack ignores the defined name anyways.</source>
          <target state="translated">このオプションは、モジュールが探しているキーを真実の値に設定することを可能にします。たまたまですが、webpack の AMD サポートはとにかく定義された名前を無視します。</target>
        </trans-unit>
        <trans-unit id="a6afd747886b88535614a5e26c65d541e9551535" translate="yes" xml:space="preserve">
          <source>This option allows you to whitelist services that are allowed to access the dev server.</source>
          <target state="translated">このオプションでは、devサーバーへのアクセスを許可しているサービスをホワイトリストに入れます。</target>
        </trans-unit>
        <trans-unit id="81ebe300973eaab68c9516ed46654327e6a950da" translate="yes" xml:space="preserve">
          <source>This option broadcasts the server via ZeroConf networking on start</source>
          <target state="translated">このオプションは、起動時にZeroConfネットワーク経由でサーバをブロードキャストします。</target>
        </trans-unit>
        <trans-unit id="ea6a426438d914faf36d6b6546285906e19b322a" translate="yes" xml:space="preserve">
          <source>This option can be used to apply loaders to the dependencies of a specific module or set of modules.</source>
          <target state="translated">このオプションを使用すると、特定のモジュールまたはモジュールのセットの依存関係にローダを適用することができます。</target>
        </trans-unit>
        <trans-unit id="6c5b0689cf315f1fa55cc15e5495f2b28e91801e" translate="yes" xml:space="preserve">
          <source>This option closes the server when stdin ends.</source>
          <target state="translated">このオプションは、標準入力が終了したときにサーバを閉じます。</target>
        </trans-unit>
        <trans-unit id="e40c156196854884ee36846872a829a5ea05f019" translate="yes" xml:space="preserve">
          <source>This option controls if and how source maps are generated.</source>
          <target state="translated">このオプションは、ソース マップを生成するかどうかとその方法を制御します。</target>
        </trans-unit>
        <trans-unit id="25a84ffd7582fe4058e843c749db628513a0ab92" translate="yes" xml:space="preserve">
          <source>This option determines the modules namespace used with the &lt;a href=&quot;#output-devtoolmodulefilenametemplate&quot;&gt;&lt;code&gt;output.devtoolModuleFilenameTemplate&lt;/code&gt;&lt;/a&gt;. When not specified, it will default to the value of: &lt;a href=&quot;#output-library&quot;&gt;&lt;code&gt;output.library&lt;/code&gt;&lt;/a&gt;. It's used to prevent source file path collisions in source maps when loading multiple libraries built with webpack.</source>
          <target state="translated">このオプションは、&lt;a href=&quot;#output-devtoolmodulefilenametemplate&quot;&gt; &lt;code&gt;output.devtoolModuleFilenameTemplate&lt;/code&gt; で&lt;/a&gt;使用されるモジュールの名前空間を決定します。指定しない場合、デフォルトで&lt;a href=&quot;#output-library&quot;&gt; &lt;code&gt;output.library&lt;/code&gt; の&lt;/a&gt;値になります。これは、webpackでビルドされた複数のライブラリをロードするときに、ソースマップでのソースファイルパスの衝突を防ぐために使用されます。</target>
        </trans-unit>
        <trans-unit id="0b05266442b54b0e6cddc19a8b33de324b93c206" translate="yes" xml:space="preserve">
          <source>This option determines the name of each output bundle. The bundle is written to the directory specified by the &lt;a href=&quot;#output-path&quot;&gt;&lt;code&gt;output.path&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">このオプションは、各出力バンドルの名前を決定します。バンドルは、&lt;a href=&quot;#output-path&quot;&gt; &lt;code&gt;output.path&lt;/code&gt; &lt;/a&gt;オプションで指定されたディレクトリに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="134a18d88afd40fa1eb2c26f1e4104950925ab2d" translate="yes" xml:space="preserve">
          <source>This option determines the name of non-entry chunk files. See &lt;a href=&quot;#output-filename&quot;&gt;&lt;code&gt;output.filename&lt;/code&gt;&lt;/a&gt; option for details on the possible values.</source>
          <target state="translated">このオプションは、非エントリーチャンクファイルの名前を決定します。参照してください&lt;a href=&quot;#output-filename&quot;&gt; &lt;code&gt;output.filename&lt;/code&gt; &lt;/a&gt;可能な値の詳細については、オプションを選択します。</target>
        </trans-unit>
        <trans-unit id="d4e4e471712f459632f09e0c39bf27d36a6dbdb0" translate="yes" xml:space="preserve">
          <source>This option does not have any effect when using the Node.js API.</source>
          <target state="translated">このオプションは、Node.js APIを使用している場合には効果がありません。</target>
        </trans-unit>
        <trans-unit id="5458bee731a283c4d30a78fb34bb6abbb6b5e834" translate="yes" xml:space="preserve">
          <source>This option has no effect when used with &lt;code&gt;quiet&lt;/code&gt; or &lt;code&gt;noInfo&lt;/code&gt;.</source>
          <target state="translated">このオプションは、 &lt;code&gt;quiet&lt;/code&gt; または &lt;code&gt;noInfo&lt;/code&gt; と併用した場合は効果がありません。</target>
        </trans-unit>
        <trans-unit id="5bfcabd6c992e600f41a1aa251ee7329a7ba5fb6" translate="yes" xml:space="preserve">
          <source>This option is &lt;strong&gt;deprecated&lt;/strong&gt; in favor of &lt;code&gt;Rule.use&lt;/code&gt;.</source>
          <target state="translated">このオプションは &lt;code&gt;Rule.use&lt;/code&gt; を支持して&lt;strong&gt;廃止さ&lt;/strong&gt;れました。</target>
        </trans-unit>
        <trans-unit id="0b2615cafe4c11a02e3c6b641329caeb2b73812b" translate="yes" xml:space="preserve">
          <source>This option is &lt;strong&gt;deprecated&lt;/strong&gt; in favor of &lt;code&gt;before&lt;/code&gt; and will be removed in v3.0.0.</source>
          <target state="translated">このオプションは &lt;code&gt;before&lt;/code&gt; に代わって&lt;strong&gt;廃止&lt;/strong&gt;され、v3.0.0で削除されます。</target>
        </trans-unit>
        <trans-unit id="eeeee94e8478cf5a5c7d08179d6f3b8a21bf53e1" translate="yes" xml:space="preserve">
          <source>This option is only activated (via &lt;code&gt;NodeSourcePlugin&lt;/code&gt;) when the target is unspecified, &quot;web&quot; or &quot;webworker&quot;.</source>
          <target state="translated">このオプションは、ターゲットが「web」または「webworker」で指定されていない場合にのみ（ &lt;code&gt;NodeSourcePlugin&lt;/code&gt; を介して）アクティブになります。</target>
        </trans-unit>
        <trans-unit id="a526b9466ed989feda820cb55f9f69f26039a4f1" translate="yes" xml:space="preserve">
          <source>This option is only used when &lt;a href=&quot;devtool&quot;&gt;&lt;code&gt;devtool&lt;/code&gt;&lt;/a&gt; uses a SourceMap option which writes an output file.</source>
          <target state="translated">場合のみ、このオプションを使用し&lt;a href=&quot;devtool&quot;&gt; &lt;code&gt;devtool&lt;/code&gt; は&lt;/a&gt;、出力ファイルを書き込みSourceMapオプションを使用しています。</target>
        </trans-unit>
        <trans-unit id="9d105f5fd42ba76d220e6270bcb29980c2aad7c5" translate="yes" xml:space="preserve">
          <source>This option is only used when &lt;a href=&quot;devtool&quot;&gt;&lt;code&gt;devtool&lt;/code&gt;&lt;/a&gt; uses an options which requires module names.</source>
          <target state="translated">このオプションは、&lt;a href=&quot;devtool&quot;&gt; &lt;code&gt;devtool&lt;/code&gt; &lt;/a&gt;がモジュール名を必要とするオプションを使用する場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="de31799adc89f7a4cd6058f2c07e2539b194dca6" translate="yes" xml:space="preserve">
          <source>This option is useful when you want to have fine-grained control over how the CommonsChunk algorithm determines where modules should be moved to.</source>
          <target state="translated">このオプションは、CommonsChunkアルゴリズムがモジュールの移動先を決定する方法を細かく制御したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="fc94bd5f6db752fb7c18f0955317532502daaadf" translate="yes" xml:space="preserve">
          <source>This option lets the browser open with your local IP.</source>
          <target state="translated">このオプションを使用すると、ブラウザをローカルIPで開くことができます。</target>
        </trans-unit>
        <trans-unit id="28aab3ea772c4e463a58a18eed36c7b2231756dc" translate="yes" xml:space="preserve">
          <source>This option lets you precisely control what bundle information gets displayed. This can be a nice middle ground if you want some bundle information, but not all of it.</source>
          <target state="translated">このオプションは、表示されるバンドル情報を正確に制御することができます。これは、バンドル情報の一部を表示したいが、すべてを表示したいわけではない場合の中間的な役割を果たすことができます。</target>
        </trans-unit>
        <trans-unit id="7179b6103bce281929f60e10386c1b58232fbfd9" translate="yes" xml:space="preserve">
          <source>This option lets you reduce the compilations in &lt;strong&gt;lazy mode&lt;/strong&gt;. By default in &lt;strong&gt;lazy mode&lt;/strong&gt;, every request results in a new compilation. With &lt;code&gt;filename&lt;/code&gt;, it's possible to only compile when a certain file is requested.</source>
          <target state="translated">このオプションを使用すると、&lt;strong&gt;遅延モードで&lt;/strong&gt;のコンパイルを減らすことができます。&lt;strong&gt;レイジーモードの&lt;/strong&gt;デフォルトでは、すべてのリクエストで新しいコンパイルが行われます。で &lt;code&gt;filename&lt;/code&gt; 、それが特定のファイルが要求されたときにのみコンパイルすることが可能です。</target>
        </trans-unit>
        <trans-unit id="792f455240a68f9b61e21b9e79e2fc861945d378" translate="yes" xml:space="preserve">
          <source>This option specifies the &lt;strong&gt;public URL&lt;/strong&gt; of the output directory when referenced in a browser. A relative URL is resolved relative to the HTML page (or &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag). Server-relative URLs, protocol-relative URLs or absolute URLs are also possible and sometimes required, i. e. when hosting assets on a CDN.</source>
          <target state="translated">このオプションは、ブラウザーで参照されるときの出力ディレクトリーの&lt;strong&gt;パブリックURL&lt;/strong&gt;を指定し&lt;strong&gt;ます&lt;/strong&gt;。相対URLは、HTMLページ（または &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; タグ）を基準に解決されます。サーバー相対URL、プロトコル相対URL、または絶対URLも可能であり、必要な場合もあります（CDNでアセットをホストする場合など）。</target>
        </trans-unit>
        <trans-unit id="60acf0ba0bbca59f35e19be67e124a4e268482f8" translate="yes" xml:space="preserve">
          <source>This option will enable &lt;a href=&quot;http://eslint.org/docs/user-guide/command-line-interface#fix&quot;&gt;ESLint autofix feature&lt;/a&gt;.</source>
          <target state="translated">このオプションは、&lt;a href=&quot;http://eslint.org/docs/user-guide/command-line-interface#fix&quot;&gt;ESLint自動修正機能&lt;/a&gt;を有効にします。</target>
        </trans-unit>
        <trans-unit id="e44d33ad69dc261c348171441ef0d4d67723a9af" translate="yes" xml:space="preserve">
          <source>This option will enable caching of the linting results into a file. This is particularly useful in reducing linting time when doing a full build.</source>
          <target state="translated">このオプションは、リンティング結果をファイルにキャッシュすることを有効にします。これは、フルビルドを行う際にリンティング時間を短縮するのに特に便利です。</target>
        </trans-unit>
        <trans-unit id="b43f40ea06f007473435e0404327c4b4d96e7f5c" translate="yes" xml:space="preserve">
          <source>This package allows transpiling JavaScript files using &lt;a href=&quot;https://github.com/babel/babel&quot;&gt;Babel&lt;/a&gt; and &lt;a href=&quot;https://github.com/webpack/webpack&quot;&gt;webpack&lt;/a&gt;.</source>
          <target state="translated">このパッケージでは、&lt;a href=&quot;https://github.com/babel/babel&quot;&gt;Babel&lt;/a&gt;と&lt;a href=&quot;https://github.com/webpack/webpack&quot;&gt;webpack&lt;/a&gt;を使用してJavaScriptファイルをトランスパイルできます。</target>
        </trans-unit>
        <trans-unit id="e114be6f0d2032ec10de78d94815095479360859" translate="yes" xml:space="preserve">
          <source>This page describes the options that affect the behavior of webpack-dev-server (short: dev-server).</source>
          <target state="translated">このページでは、webpack-dev-server (short:dev-server)の動作に影響を与えるオプションについて説明します。</target>
        </trans-unit>
        <trans-unit id="eee9d72cff11504900ba3d87265458efdd7aab58" translate="yes" xml:space="preserve">
          <source>This plugin and it's options can also be invoked via the CLI:</source>
          <target state="translated">このプラグインとそのオプションは、CLIを介して呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="8d6ec8e843f819d7e74de36d5d13f0736352ecb7" translate="yes" xml:space="preserve">
          <source>This plugin can be used in two different modes, &lt;em&gt;scoped&lt;/em&gt; and &lt;em&gt;mapped&lt;/em&gt;.</source>
          <target state="translated">このプラグインは、&lt;em&gt;スコープ&lt;/em&gt;と&lt;em&gt;マップの&lt;/em&gt; 2つの異なるモードで使用できます。</target>
        </trans-unit>
        <trans-unit id="fda8ea39c72e0e691ebbc3795728b5fc978d18df" translate="yes" xml:space="preserve">
          <source>This plugin creates bundles with translations baked in. So you can serve the translated bundle to your clients.</source>
          <target state="translated">このプラグインは、翻訳が組み込まれたバンドルを作成します.だから、あなたのクライアントに翻訳されたバンドルを提供することができます。</target>
        </trans-unit>
        <trans-unit id="46f3843161330f7496c2a700471ef010db97a960" translate="yes" xml:space="preserve">
          <source>This plugin enables more fine grained control of source map generation. It is also enabled automatically by certain settings of the &lt;a href=&quot;../configuration/devtool&quot;&gt;&lt;code&gt;devtool&lt;/code&gt;&lt;/a&gt; configuration option.</source>
          <target state="translated">このプラグインを使用すると、ソースマップの生成をより細かく制御できます。また、&lt;a href=&quot;../configuration/devtool&quot;&gt; &lt;code&gt;devtool&lt;/code&gt; &lt;/a&gt;構成オプションの特定の設定によって自動的に有効になります。</target>
        </trans-unit>
        <trans-unit id="308436c86675d805a1b54d3185c57d08f2121250" translate="yes" xml:space="preserve">
          <source>This plugin extracts CSS into separate files. It creates a CSS file per JS file which contains CSS. It supports On-Demand-Loading of CSS and SourceMaps.</source>
          <target state="translated">CSSを個別のファイルに抽出するプラグインです。CSSを含むJSファイルごとにCSSファイルを作成します。CSSとSourceMapsのオンデマンドロードに対応しています。</target>
        </trans-unit>
        <trans-unit id="52604672e0fee1f1648352992bdf12b764549a3c" translate="yes" xml:space="preserve">
          <source>This plugin is used in a separate webpack config exclusively to create a dll-only-bundle. It creates a &lt;code&gt;manifest.json&lt;/code&gt; file, which is used by the &lt;a href=&quot;dll-plugin#dllreferenceplugin&quot;&gt;&lt;code&gt;DllReferencePlugin&lt;/code&gt;&lt;/a&gt; to map dependencies.</source>
          <target state="translated">このプラグインは、dllのみのバンドルを作成するために、別のwebpack構成で排他的に使用されます。&lt;a href=&quot;dll-plugin#dllreferenceplugin&quot;&gt; &lt;code&gt;DllReferencePlugin&lt;/code&gt; &lt;/a&gt;が依存関係をマップするために使用する &lt;code&gt;manifest.json&lt;/code&gt; ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="95ab448688001829beed83209692c645fd511719" translate="yes" xml:space="preserve">
          <source>This plugin is used in the primary webpack config, it references the dll-only-bundle(s) to require pre-built dependencies.</source>
          <target state="translated">このプラグインはプライマリの webpack 設定で使用され、構築済みの依存関係を要求するために dll-only-bundle を参照します。</target>
        </trans-unit>
        <trans-unit id="8f11ee21edd3718f762dd02cff0cac34b96334ca" translate="yes" xml:space="preserve">
          <source>This plugin should be used only on &lt;code&gt;production&lt;/code&gt; builds without &lt;code&gt;style-loader&lt;/code&gt; in the loaders chain, especially if you want to have HMR in &lt;code&gt;development&lt;/code&gt;.</source>
          <target state="translated">このプラグインは、特にHMRを &lt;code&gt;development&lt;/code&gt; たい場合は、ローダーチェーンに &lt;code&gt;style-loader&lt;/code&gt; がない &lt;code&gt;production&lt;/code&gt; ビルドでのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="f5cca03718053fc9520367846f9709b01dcb7529" translate="yes" xml:space="preserve">
          <source>This plugin supports the following options:</source>
          <target state="translated">このプラグインは以下のオプションをサポートしています。</target>
        </trans-unit>
        <trans-unit id="feee9da7ca86409cd9c2790742caad4fc594057c" translate="yes" xml:space="preserve">
          <source>This plugin supports the use of Google's Closure Tools with webpack.</source>
          <target state="translated">このプラグインは、webpackでのGoogleのClosure Toolsの利用をサポートしています。</target>
        </trans-unit>
        <trans-unit id="b06506995ff20545e054b285bfd17c9d57869022" translate="yes" xml:space="preserve">
          <source>This plugin uses &lt;a href=&quot;https://github.com/fabiosantoscode/terser&quot;&gt;terser&lt;/a&gt; to minify your JavaScript.</source>
          <target state="translated">このプラグインは、&lt;a href=&quot;https://github.com/fabiosantoscode/terser&quot;&gt;terser&lt;/a&gt;を使用してJavaScriptを縮小します。</target>
        </trans-unit>
        <trans-unit id="2ccca80fad8f11ea1ca02f91ea558e659f64b4f4" translate="yes" xml:space="preserve">
          <source>This plugin uses &lt;a href=&quot;https://github.com/mishoo/UglifyJS2/tree/harmony&quot;&gt;UglifyJS v3 &lt;/a&gt;&lt;a href=&quot;https://npmjs.com/package/uglify-es&quot;&gt;(&lt;code&gt;uglify-es&lt;/code&gt;)&lt;/a&gt; to minify your JavaScript</source>
          <target state="translated">このプラグインは&lt;a href=&quot;https://github.com/mishoo/UglifyJS2/tree/harmony&quot;&gt;UglifyJS v3 &lt;/a&gt;&lt;a href=&quot;https://npmjs.com/package/uglify-es&quot;&gt;（ &lt;code&gt;uglify-es&lt;/code&gt; ）&lt;/a&gt;を使用してJavaScriptを縮小します</target>
        </trans-unit>
        <trans-unit id="a87a75bf8d2601bfb557a819c4f455325b79b898" translate="yes" xml:space="preserve">
          <source>This plugin will be removed in the future as it only exists for migration.</source>
          <target state="translated">このプラグインは移行のためにしか存在しないので、将来的には削除される予定です。</target>
        </trans-unit>
        <trans-unit id="417ca5f69549104dc84916c24cec679ccbbff0a8" translate="yes" xml:space="preserve">
          <source>This plugin will cause hashes to be based on the relative path of the module, generating a four character string as the module id. Suggested for use in production.</source>
          <target state="translated">このプラグインは、モジュールの相対パスに基づいてハッシュを生成し、モジュール ID として 4 文字の文字列を生成します。実運用での使用を推奨します。</target>
        </trans-unit>
        <trans-unit id="69190150b569dd2720829fe25dc4429844f6fdb0" translate="yes" xml:space="preserve">
          <source>This plugin will enable the same concatenation behavior in webpack.</source>
          <target state="translated">このプラグインを使うと、webpackでも同じような連結動作ができるようになります。</target>
        </trans-unit>
        <trans-unit id="e20365f34269feb4c5eead0efe10e444b9130e1c" translate="yes" xml:space="preserve">
          <source>This project was inspired by, and is a heavily modified version of &lt;code&gt;sasslint-webpack-plugin&lt;/code&gt;.</source>
          <target state="translated">このプロジェクトは &lt;code&gt;sasslint-webpack-plugin&lt;/code&gt; に触発され、大幅に変更されたバージョンです。</target>
        </trans-unit>
        <trans-unit id="790283d62998f77b2077ace49fbf145534de7451" translate="yes" xml:space="preserve">
          <source>This property allows webpack to control what files are used to calculate performance hints. The default function is seen below:</source>
          <target state="translated">このプロパティは、webpackがパフォーマンスヒントを計算するために使用するファイルを制御することを可能にします。デフォルトの機能は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="5ce7936b8dd1ab00c6a839051bb3b049b5d0046c" translate="yes" xml:space="preserve">
          <source>This section contains guides for understanding and mastering the wide variety of tools and features that webpack offers. The first is a simple guide that takes you through &lt;a href=&quot;guides/installation&quot;&gt;installation&lt;/a&gt;.</source>
          <target state="translated">このセクションには、webpackが提供するさまざまなツールと機能を理解して習得するためのガイドが含まれています。1つ目は、&lt;a href=&quot;guides/installation&quot;&gt;インストール&lt;/a&gt;について説明する簡単なガイドです。</target>
        </trans-unit>
        <trans-unit id="766149f8898bac17386a9e716229c762e8f543e5" translate="yes" xml:space="preserve">
          <source>This section covers all &lt;strong&gt;variables&lt;/strong&gt; available in code compiled with webpack. Modules will have access to certain data from the compilation process through &lt;code&gt;module&lt;/code&gt; and other variables.</source>
          <target state="translated">このセクションでは、webpackでコンパイルされたコードで利用可能なすべての&lt;strong&gt;変数について&lt;/strong&gt;説明し&lt;strong&gt;ます&lt;/strong&gt;。モジュールは、 &lt;code&gt;module&lt;/code&gt; やその他の変数を通じて、コンパイルプロセスからの特定のデータにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="2a158e22d6effe6b38eb57854423c9c249557bde" translate="yes" xml:space="preserve">
          <source>This section covers all methods available in code compiled with webpack. When using webpack to bundle your application, you can pick from a variety of module syntax styles including &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ES6&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/CommonJS&quot;&gt;CommonJS&lt;/a&gt;, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_module_definition&quot;&gt;AMD&lt;/a&gt;.</source>
          <target state="translated">このセクションでは、webpackでコンパイルされたコードで利用可能なすべてのメソッドについて説明します。webpackを使用してアプリケーションをバンドルする場合、&lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ES6&lt;/a&gt;、&lt;a href=&quot;https://en.wikipedia.org/wiki/CommonJS&quot;&gt;CommonJS&lt;/a&gt;、&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_module_definition&quot;&gt;AMD&lt;/a&gt;などのさまざまなモジュール構文スタイルから選択できます。</target>
        </trans-unit>
        <trans-unit id="86a104a27c2cf4c551b1216d744083e3310b40f0" translate="yes" xml:space="preserve">
          <source>This section will focus on adding an offline experience to our app. We'll achieve this using a Google project called &lt;a href=&quot;https://github.com/GoogleChrome/workbox&quot;&gt;Workbox&lt;/a&gt; which provides tools that help make offline support for web apps easier to setup.</source>
          <target state="translated">このセクションでは、アプリにオフラインエクスペリエンスを追加することに焦点を当てます。これは、Webアプリのオフラインサポートを簡単にセットアップできるようにするツールを提供する&lt;a href=&quot;https://github.com/GoogleChrome/workbox&quot;&gt;Workbox&lt;/a&gt;と呼ばれるGoogleプロジェクトを使用して実現します。</target>
        </trans-unit>
        <trans-unit id="3efc36ab784fb7c924e3fdee5581efb69eaec3d5" translate="yes" xml:space="preserve">
          <source>This set of options allows you to better debug the application containing assets compiled with webpack</source>
          <target state="translated">このオプションのセットは、webpack でコンパイルされたアセットを含むアプリケーションをより良くデバッグすることを可能にします。</target>
        </trans-unit>
        <trans-unit id="98aa68cf05a9c0e5328953ace43257566681626c" translate="yes" xml:space="preserve">
          <source>This set of options allows you to manipulate certain &lt;a href=&quot;../configuration/output&quot;&gt;output&lt;/a&gt; parameters of your build.</source>
          <target state="translated">このオプションのセットを使用すると、ビルドの特定の&lt;a href=&quot;../configuration/output&quot;&gt;出力&lt;/a&gt;パラメーターを操作できます。</target>
        </trans-unit>
        <trans-unit id="1b7899ac54672adc98b8151b2866a403aa9d27ff" translate="yes" xml:space="preserve">
          <source>This set of options is identical to the &lt;code&gt;resolve&lt;/code&gt; property set above, but is used only to resolve webpack's &lt;a href=&quot;../concepts/loaders&quot;&gt;loader&lt;/a&gt; packages. Default:</source>
          <target state="translated">このオプションセットは、上記の &lt;code&gt;resolve&lt;/code&gt; プロパティセットと同じですが、webpackの&lt;a href=&quot;../concepts/loaders&quot;&gt;ローダー&lt;/a&gt;パッケージを解決するためにのみ使用されます。デフォルト：</target>
        </trans-unit>
        <trans-unit id="1f833ed9c75f47b94fbdc43cd56d37d70b51115f" translate="yes" xml:space="preserve">
          <source>This set of options is picked up by &lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt; and can be used to change its behavior in various ways. Here's a simple example that gzips and serves everything from our &lt;code&gt;dist/&lt;/code&gt; directory:</source>
          <target state="translated">このオプションセットは、&lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt;によって取得され、さまざまな方法でその動作を変更するために使用できます。以下は、gzipを実行して &lt;code&gt;dist/&lt;/code&gt; ディレクトリからすべてを提供する簡単な例です。</target>
        </trans-unit>
        <trans-unit id="a8eecff3ab5954bf0b0246b89e983ae677f253d2" translate="yes" xml:space="preserve">
          <source>This setting is primarily used as a workaround for &lt;a href=&quot;https://github.com/webpack-contrib/style-loader/issues/163&quot;&gt;css clashes&lt;/a&gt; when using one or more &lt;a href=&quot;https://robertknight.github.io/posts/webpack-dll-plugins/&quot;&gt;DllPlugin&lt;/a&gt;'s. &lt;code&gt;base&lt;/code&gt; allows you to prevent either the &lt;em&gt;app&lt;/em&gt;'s css (or &lt;em&gt;DllPlugin2&lt;/em&gt;'s css) from overwriting &lt;em&gt;DllPlugin1&lt;/em&gt;'s css by specifying a css module id base which is greater than the range used by &lt;em&gt;DllPlugin1&lt;/em&gt; e.g.:</source>
          <target state="translated">この設定は主に、1つ以上の&lt;a href=&quot;https://robertknight.github.io/posts/webpack-dll-plugins/&quot;&gt;DllPlugin&lt;/a&gt;を使用する場合の&lt;a href=&quot;https://github.com/webpack-contrib/style-loader/issues/163&quot;&gt;cssクラッシュの&lt;/a&gt;回避策として使用されます。 &lt;code&gt;base&lt;/code&gt; どちらか防止することを可能にする&lt;em&gt;アプリ&lt;/em&gt;のCSS（または&lt;em&gt;DllPlugin2&lt;/em&gt;上書きからのCSS）を&lt;em&gt;DllPlugin1&lt;/em&gt;によって使用される範囲よりも大きいCSSモジュールIDベース指定してのCSSを&lt;em&gt;DllPlugin1&lt;/em&gt;例えば：&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f8fccd0349e08bbe9dad684332c1fd923a8ec939" translate="yes" xml:space="preserve">
          <source>This setup makes your code a lot more portable as everything that is closely coupled now lives together. Let's say you want to use &lt;code&gt;/my-component&lt;/code&gt; in another project, simply copy or move it into the &lt;code&gt;/components&lt;/code&gt; directory over there. As long as you've installed any &lt;em&gt;external dependencies&lt;/em&gt; and your &lt;em&gt;configuration has the same loaders&lt;/em&gt; defined, you should be good to go.</source>
          <target state="translated">この設定により、密接に結合されたすべてが一緒に存在するようになるため、コードの移植性が大幅に向上します。別のプロジェクトで &lt;code&gt;/my-component&lt;/code&gt; を使用したい場合、それを &lt;code&gt;/components&lt;/code&gt; ディレクトリにコピーまたは移動するだけです。&lt;em&gt;外部の依存関係&lt;/em&gt;をインストールし、&lt;em&gt;構成に同じローダーが&lt;/em&gt;定義され&lt;em&gt;ている&lt;/em&gt;限り、問題ありません。</target>
        </trans-unit>
        <trans-unit id="5ea123abc7292c6bf233ab48356c85638b29b540" translate="yes" xml:space="preserve">
          <source>This simply prepends &lt;code&gt;var $ = require(&quot;jquery&quot;);&lt;/code&gt; to &lt;code&gt;example.js&lt;/code&gt;.</source>
          <target state="translated">これは単に &lt;code&gt;var $ = require(&quot;jquery&quot;);&lt;/code&gt; 付加するだけです。 &lt;code&gt;example.js&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e10024d095957cbce567008893996f42ae796af8" translate="yes" xml:space="preserve">
          <source>This small library is a core utility in webpack but can also be used elsewhere to provide a similar plugin interface. Many objects in webpack extend the &lt;code&gt;Tapable&lt;/code&gt; class. The class exposes &lt;code&gt;tap&lt;/code&gt;, &lt;code&gt;tapAsync&lt;/code&gt;, and &lt;code&gt;tapPromise&lt;/code&gt; methods which plugins can use to inject custom build steps that will be fired throughout a compilation.</source>
          <target state="translated">この小さなライブラリはwebpackのコアユーティリティですが、同様のプラグインインターフェイスを提供するために他の場所でも使用できます。 webpackの多くのオブジェクトは &lt;code&gt;Tapable&lt;/code&gt; クラスを拡張します。このクラスは、プラグインがコンパイル全体で発生するカスタムビルドステップを挿入するために使用できる &lt;code&gt;tap&lt;/code&gt; 、 &lt;code&gt;tapAsync&lt;/code&gt; 、および &lt;code&gt;tapPromise&lt;/code&gt; メソッドを公開します。</target>
        </trans-unit>
        <trans-unit id="e5ea9cb5352fb456a9a9457c25f28a4bfdc7c1d4" translate="yes" xml:space="preserve">
          <source>This syntax is used to describe all the possible ways that an external library can be available. &lt;code&gt;lodash&lt;/code&gt; here is available as &lt;code&gt;lodash&lt;/code&gt; under AMD and CommonJS module systems but available as &lt;code&gt;_&lt;/code&gt; in a global variable form. &lt;code&gt;subtract&lt;/code&gt; here is available via the property &lt;code&gt;subtract&lt;/code&gt; under the global &lt;code&gt;math&lt;/code&gt; object (e.g. &lt;code&gt;window['math']['subtract']&lt;/code&gt;).</source>
          <target state="translated">この構文は、外部ライブラリを利用できるすべての可能な方法を説明するために使用されます。ここの &lt;code&gt;lodash&lt;/code&gt; は、AMDおよびCommonJSモジュールシステムでは &lt;code&gt;lodash&lt;/code&gt; として使用できますが、グローバル変数形式では &lt;code&gt;_&lt;/code&gt; として使用できます。 &lt;code&gt;subtract&lt;/code&gt; ここでは、プロパティを経由して提供されて &lt;code&gt;subtract&lt;/code&gt; グローバルの下で &lt;code&gt;math&lt;/code&gt; オブジェクト（例えば &lt;code&gt;window['math']['subtract']&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="427ef31c4a006d01b5992ffbd53818e83fa34ef1" translate="yes" xml:space="preserve">
          <source>This tells &lt;code&gt;webpack-dev-server&lt;/code&gt; to serve the files from the &lt;code&gt;dist&lt;/code&gt; directory on &lt;code&gt;localhost:8080&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;webpack-dev-server&lt;/code&gt; に &lt;code&gt;localhost:8080&lt;/code&gt; の &lt;code&gt;dist&lt;/code&gt; ディレクトリからファイルを提供するように指示します。</target>
        </trans-unit>
        <trans-unit id="4cc861c1f2b80d6e02a543239491223597388780" translate="yes" xml:space="preserve">
          <source>This uses the &lt;code&gt;jade-loader&lt;/code&gt; for &lt;code&gt;.jade&lt;/code&gt; files, and the &lt;a href=&quot;../loaders/style-loader&quot;&gt;&lt;code&gt;style-loader&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../loaders/css-loader&quot;&gt;&lt;code&gt;css-loader&lt;/code&gt;&lt;/a&gt; for &lt;code&gt;.css&lt;/code&gt; files.</source>
          <target state="translated">これは、使用しています &lt;code&gt;jade-loader&lt;/code&gt; 用 &lt;code&gt;.jade&lt;/code&gt; ファイル、および&lt;a href=&quot;../loaders/style-loader&quot;&gt; &lt;code&gt;style-loader&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../loaders/css-loader&quot;&gt; &lt;code&gt;css-loader&lt;/code&gt; &lt;/a&gt;用 &lt;code&gt;.css&lt;/code&gt; ファイルを。</target>
        </trans-unit>
        <trans-unit id="7c17361464bcd8285937109314dec7f4ead3d25c" translate="yes" xml:space="preserve">
          <source>This variable is equal to default value of &lt;code&gt;module.exports&lt;/code&gt; (i.e. an object). If &lt;code&gt;module.exports&lt;/code&gt; gets overwritten, &lt;code&gt;exports&lt;/code&gt; will no longer be exported.</source>
          <target state="translated">この変数は、 &lt;code&gt;module.exports&lt;/code&gt; （つまりオブジェクト）のデフォルト値と同じです。場合 &lt;code&gt;module.exports&lt;/code&gt; はが上書きされ、 &lt;code&gt;exports&lt;/code&gt; もはやエクスポートされません。</target>
        </trans-unit>
        <trans-unit id="d39d49f3373eb27aa1cf74db3b29f828968cc1a8" translate="yes" xml:space="preserve">
          <source>This variable is only available with the &lt;code&gt;HotModuleReplacementPlugin&lt;/code&gt; or the &lt;code&gt;ExtendedAPIPlugin&lt;/code&gt;. It provides access to the hash of the compilation.</source>
          <target state="translated">この変数は、 &lt;code&gt;HotModuleReplacementPlugin&lt;/code&gt; または &lt;code&gt;ExtendedAPIPlugin&lt;/code&gt; でのみ使用できます。コンパイルのハッシュへのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="c7b6d958a04307a8e984f741ba381d787423c0c9" translate="yes" xml:space="preserve">
          <source>This walkthrough stems from &lt;a href=&quot;tree-shaking&quot;&gt;Tree Shaking&lt;/a&gt; and &lt;a href=&quot;development&quot;&gt;Development&lt;/a&gt;. Please ensure you are familiar with the concepts/setup introduced in those guides before continuing on.</source>
          <target state="translated">このウォークスルーは、&lt;a href=&quot;tree-shaking&quot;&gt;ツリーの揺れ&lt;/a&gt;と&lt;a href=&quot;development&quot;&gt;発達に&lt;/a&gt;由来します。先に進む前に、これらのガイドで紹介されている概念/設定について十分に理解してください。</target>
        </trans-unit>
        <trans-unit id="a6ba31004997005b6c7977fd4e63f3ec4f27b1b2" translate="yes" xml:space="preserve">
          <source>This will bundle your source code with entry as &lt;code&gt;index.js&lt;/code&gt; and the output bundle file will have a path of &lt;code&gt;dist&lt;/code&gt; and the filename will be &lt;code&gt;bundle.js&lt;/code&gt;</source>
          <target state="translated">これにより、ソースコードが &lt;code&gt;index.js&lt;/code&gt; としてエントリにバンドルされ、出力バンドルファイルには &lt;code&gt;dist&lt;/code&gt; のパスが含まれ、ファイル名は &lt;code&gt;bundle.js&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="974910be502dc0a84469dbdf2c5a0b42eda9befe" translate="yes" xml:space="preserve">
          <source>This will direct webpack to &lt;em&gt;enter&lt;/em&gt; through &lt;code&gt;./index.ts&lt;/code&gt;, &lt;em&gt;load&lt;/em&gt; all &lt;code&gt;.ts&lt;/code&gt; and &lt;code&gt;.tsx&lt;/code&gt; files through the &lt;code&gt;ts-loader&lt;/code&gt;, and &lt;em&gt;output&lt;/em&gt; a &lt;code&gt;bundle.js&lt;/code&gt; file in our current directory.</source>
          <target state="translated">これがためにWebPACKの指示する&lt;em&gt;入力し&lt;/em&gt;て &lt;code&gt;./index.ts&lt;/code&gt; 、&lt;em&gt;ロード&lt;/em&gt;すべて &lt;code&gt;.ts&lt;/code&gt; と &lt;code&gt;.tsx&lt;/code&gt; を介してファイルを &lt;code&gt;ts-loader&lt;/code&gt; 、および&lt;em&gt;出力&lt;/em&gt; &lt;code&gt;bundle.js&lt;/code&gt; 私たちの現在のディレクトリ内のファイルを。</target>
        </trans-unit>
        <trans-unit id="55f886a1ec8370f98de9de4e1874a73184be8854" translate="yes" xml:space="preserve">
          <source>This will force webpack to exit its bundling process.</source>
          <target state="translated">これにより、webpackは強制的にバンドル処理を終了します。</target>
        </trans-unit>
        <trans-unit id="00541a540816f3e9bbd4c867606284cd75c32912" translate="yes" xml:space="preserve">
          <source>This will form the bundle with both the files as separate entry points.</source>
          <target state="translated">これにより、両方のファイルを別々のエントリポイントとしてバンドルを形成します。</target>
        </trans-unit>
        <trans-unit id="7f4446d56893c546a3bc2bc1c768154f63d09482" translate="yes" xml:space="preserve">
          <source>This will generate a file &lt;code&gt;dist/index.html&lt;/code&gt; containing the following:</source>
          <target state="translated">これにより、以下を含む &lt;code&gt;dist/index.html&lt;/code&gt; ファイルが生成されます。</target>
        </trans-unit>
        <trans-unit id="7160226d2ca3d86e071b9fa526002cfef710b369" translate="yes" xml:space="preserve">
          <source>This will result in &lt;code&gt;&amp;lt;link rel=&quot;prefetch&quot; href=&quot;login-modal-chunk.js&quot;&amp;gt;&lt;/code&gt; being appended in the head of the page, which will instruct the browser to prefetch in idle time the &lt;code&gt;login-modal-chunk.js&lt;/code&gt; file.</source>
          <target state="translated">これにより、ページの先頭に &lt;code&gt;&amp;lt;link rel=&quot;prefetch&quot; href=&quot;login-modal-chunk.js&quot;&amp;gt;&lt;/code&gt; が追加され、アイドル時間に &lt;code&gt;login-modal-chunk.js&lt;/code&gt; でプリフェッチするようブラウザに指示しますファイル。</target>
        </trans-unit>
        <trans-unit id="c85e87d9ec602f1d997bca703285880f56410641" translate="yes" xml:space="preserve">
          <source>This will result in following output:</source>
          <target state="translated">これにより、以下のような出力になります。</target>
        </trans-unit>
        <trans-unit id="dd75db9f1ff33f0b55c972ee38e1768f886c967a" translate="yes" xml:space="preserve">
          <source>This will simply export the provided &lt;code&gt;value&lt;/code&gt;. The &lt;code&gt;value&lt;/code&gt; here can be anything except a function.</source>
          <target state="translated">これは単に提供された &lt;code&gt;value&lt;/code&gt; エクスポートします。ここでの &lt;code&gt;value&lt;/code&gt; 、関数以外であれば何でもかまいません。</target>
        </trans-unit>
        <trans-unit id="efed152efc8461a74df43e343c4dd0ad810e7a79" translate="yes" xml:space="preserve">
          <source>This will yield the following build result:</source>
          <target state="translated">これにより、以下のようなビルド結果が得られます。</target>
        </trans-unit>
        <trans-unit id="945fcbc1787185641ce61384de9325b8f50d7afe" translate="yes" xml:space="preserve">
          <source>This would expose your index.html file to the polymer-webpack-loader based on the process used by the html-loader. In this case you would need to exclude your html file from the polymer-webpack-loader or look for other ways to avoid this conflict. See: &lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin/blob/master/docs/template-option.md&quot;&gt;html-webpack-plugin template options&lt;/a&gt;</source>
          <target state="translated">これにより、htmlローダーが使用するプロセスに基づいて、index.htmlファイルがPolymer-webpack-loaderに公開されます。この場合、htmlファイルをPolymer-webpack-loaderから除外するか、この競合を回避する他の方法を探す必要があります。参照：&lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin/blob/master/docs/template-option.md&quot;&gt;html-webpack-pluginテンプレートオプション&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2ea4357ef4b413d69e9589461b2acd2f1ec82b54" translate="yes" xml:space="preserve">
          <source>This would go nicely with &lt;a href=&quot;tree-shaking&quot;&gt;Tree Shaking&lt;/a&gt; as the rest of the &lt;code&gt;lodash&lt;/code&gt; library should get dropped.</source>
          <target state="translated">これは、残りの &lt;code&gt;lodash&lt;/code&gt; ライブラリがドロップされるはずなので、&lt;a href=&quot;tree-shaking&quot;&gt;Tree Shaking&lt;/a&gt;とうまく調和します。</target>
        </trans-unit>
        <trans-unit id="b166a6d72bc0ecd96b32dc3dc3968cf48187e1f5" translate="yes" xml:space="preserve">
          <source>This wraps the &lt;code&gt;require('file.js')&lt;/code&gt; in a &lt;code&gt;require.ensure&lt;/code&gt; block</source>
          <target state="translated">これは &lt;code&gt;require('file.js')&lt;/code&gt; を &lt;code&gt;require.ensure&lt;/code&gt; ブロックでラップします</target>
        </trans-unit>
        <trans-unit id="db0f1255d05986e69c5d921d1eea45817e63296f" translate="yes" xml:space="preserve">
          <source>This: available through the &lt;code&gt;this&lt;/code&gt; object (&lt;code&gt;libraryTarget:'this'&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;libraryTarget:'this'&lt;/code&gt; &lt;code&gt;this&lt;/code&gt; オブジェクト（libraryTarget： 'this'）を通じて利用できます。</target>
        </trans-unit>
        <trans-unit id="3ffef249f4c6fcea2923ee5d65836d74d834ecab" translate="yes" xml:space="preserve">
          <source>Three simple ways to inspect a webpack bundle</source>
          <target state="translated">webpackバンドルを検査する3つの簡単な方法</target>
        </trans-unit>
        <trans-unit id="22975e15fe01eb83dd38a4fdd63bcdb34c745980" translate="yes" xml:space="preserve">
          <source>Throughout the Guides we will use &lt;code&gt;diff&lt;/code&gt; blocks to show you what changes we're making to directories, files, and code.</source>
          <target state="translated">ガイド全体で、 &lt;code&gt;diff&lt;/code&gt; ブロックを使用して、ディレクトリ、ファイル、およびコードに加えた変更を示します。</target>
        </trans-unit>
        <trans-unit id="921008c663ca39740d7eff1fc3116a1d5032c017" translate="yes" xml:space="preserve">
          <source>Thus, &lt;code&gt;window.$&lt;/code&gt; is then available in the browser console.</source>
          <target state="translated">したがって、 &lt;code&gt;window.$&lt;/code&gt; はブラウザコンソールで使用できます。</target>
        </trans-unit>
        <trans-unit id="03dcb8ddd180c79b7cbef1fbef09bd9b811c6229" translate="yes" xml:space="preserve">
          <source>Timeout for gathering changes while watching</source>
          <target state="translated">視聴中の変化を収集するためのタイムアウト</target>
        </trans-unit>
        <trans-unit id="661d4063b8ec8980f63428513015c42d7d7a39d4" translate="yes" xml:space="preserve">
          <source>Timings</source>
          <target state="translated">Timings</target>
        </trans-unit>
        <trans-unit id="54963bcda5c44c101aba88a7600754b4d08bd65b" translate="yes" xml:space="preserve">
          <source>Tips for Use</source>
          <target state="translated">使い方のコツ</target>
        </trans-unit>
        <trans-unit id="b2660960645189e282a8a216a50f1f554af01560" translate="yes" xml:space="preserve">
          <source>To approach this problem you can easily use a good old environment variable. Let's say we have a variable &lt;code&gt;ASSET_PATH&lt;/code&gt;:</source>
          <target state="translated">この問題に取り組むには、古き良き環境変数を簡単に使用できます。変数 &lt;code&gt;ASSET_PATH&lt;/code&gt; があるとしましょう：</target>
        </trans-unit>
        <trans-unit id="dcbc79a6d6d80f687151d525406640646c99705e" translate="yes" xml:space="preserve">
          <source>To automatically load &lt;code&gt;jquery&lt;/code&gt; we can simply point both variables it exposes to the corresponding node module:</source>
          <target state="translated">&lt;code&gt;jquery&lt;/code&gt; を自動的にロードするには、対応するノードモジュールに公開する両方の変数をポイントするだけです。</target>
        </trans-unit>
        <trans-unit id="2cff0b80a6edf97df3a239f888cd3d2406dca34c" translate="yes" xml:space="preserve">
          <source>To be compatible with existing css files (if not in CSS Module mode).</source>
          <target state="translated">既存のCSSファイルと互換性を持たせる(CSSモジュールモードでない場合)。</target>
        </trans-unit>
        <trans-unit id="07015a6889ed2ed55c54e13b2a92e0506c83e9bb" translate="yes" xml:space="preserve">
          <source>To be safe, you can use &lt;code&gt;enforce: &quot;pre&quot;&lt;/code&gt; section to check source files, not modified by other loaders (like &lt;code&gt;babel-loader&lt;/code&gt;)</source>
          <target state="translated">安全のために、 &lt;code&gt;enforce: &quot;pre&quot;&lt;/code&gt; セクションを使用して、他のローダー（ &lt;code&gt;babel-loader&lt;/code&gt; など）によって変更されていないソースファイルをチェックできます。</target>
        </trans-unit>
        <trans-unit id="82bf60baa207e3a2a73e2e85ad00daef03147bec" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;config-loader&lt;/code&gt;:</source>
          <target state="translated">まず、 &lt;code&gt;config-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="fce74b425fc9b393fe6da8939201756b11c8ae82" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;exports-loader&lt;/code&gt;:</source>
          <target state="translated">まず、 &lt;code&gt;exports-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="411e791be25b2b16d7093ec79dbcbde9a51e71f2" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;expose-loader&lt;/code&gt;:</source>
          <target state="translated">まず、 &lt;code&gt;expose-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="0fc7fc961b47a051b19e226656bde393653c4789" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;file-loader&lt;/code&gt;:</source>
          <target state="translated">最初に、 &lt;code&gt;file-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="94d3f896c040c5941000c3f6d1a93ff1345b8612" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;jshint-loader&lt;/code&gt;:</source>
          <target state="translated">最初に、 &lt;code&gt;jshint-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="a41ac440dc6238694d68258e618bb49fc94caf83" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;less-loader&lt;/code&gt;:</source>
          <target state="translated">まず、 &lt;code&gt;less-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="746daaee86d341274baa9bbbb6cb39c7d79f5f35" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;mocha-loader&lt;/code&gt;:</source>
          <target state="translated">まず、 &lt;code&gt;mocha-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="89e5dc0915c471dd5741c80947af93e44d49291a" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;multi-loader&lt;/code&gt;:</source>
          <target state="translated">最初に、 &lt;code&gt;multi-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="00fb7c36e27d5f602e02b051008f9368bbec1510" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;node-loader&lt;/code&gt;:</source>
          <target state="translated">まず、 &lt;code&gt;node-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="ac04354afe29bdc0eb01bb123082874b29e12c09" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;null-loader&lt;/code&gt;:</source>
          <target state="translated">最初に、 &lt;code&gt;null-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="ed9f11b49e3b0ac8754e0ab515a232c4c7bab089" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;raw-loader&lt;/code&gt;:</source>
          <target state="translated">まず、 &lt;code&gt;raw-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="5336d91f3599dbace4c9133e6c80c99d248c2d4f" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;react-proxy-loader&lt;/code&gt;:</source>
          <target state="translated">最初に、 &lt;code&gt;react-proxy-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="c6f54944c9d87a57b6782a0d8c4ab4d25eb93f5f" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;stylelint-webpack-plugin&lt;/code&gt;:</source>
          <target state="translated">最初に、 &lt;code&gt;stylelint-webpack-plugin&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="38782f5d9cd214d47d0d542d22e218c43a6dee53" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;terser-webpack-plugin&lt;/code&gt;:</source>
          <target state="translated">まず、 &lt;code&gt;terser-webpack-plugin&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="ee9d1d253ebff7e4e9d72665d987bd70ba4b9a08" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;transform-loader&lt;/code&gt;:</source>
          <target state="translated">まず、 &lt;code&gt;transform-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="3c3ed3c5eaa5eefb4adabc155747e61cb046b303" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;url-loader&lt;/code&gt;:</source>
          <target state="translated">まず、 &lt;code&gt;url-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="e5d36d38e77ff2fe0084bc1096c8a1da57aa1351" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;val-loader&lt;/code&gt;:</source>
          <target state="translated">まず、 &lt;code&gt;val-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="829c18e6ac496ea95656902cbe84d34833c84385" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;worker-loader&lt;/code&gt;:</source>
          <target state="translated">まず、 &lt;code&gt;worker-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="bfeceae384afd1256e3e284ec202d194d889bbda" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;yaml-frontmatter-loader&lt;/code&gt;:</source>
          <target state="translated">最初に、 &lt;code&gt;yaml-frontmatter-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="06c638119ebe6bdd9660a0f8df0f71a8e0b13de5" translate="yes" xml:space="preserve">
          <source>To bundle the &lt;code&gt;lodash&lt;/code&gt; dependency with &lt;code&gt;index.js&lt;/code&gt;, we'll need to install the library locally:</source>
          <target state="translated">&lt;code&gt;lodash&lt;/code&gt; 依存関係を &lt;code&gt;index.js&lt;/code&gt; にバンドルするには、ライブラリをローカルにインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="dfa7d608afec42e0cdc2c58c9c250dda0d690d1a" translate="yes" xml:space="preserve">
          <source>To completely disable tag-attribute processing (for instance, if you're handling image loading on the client side) you can pass in &lt;code&gt;attrs=false&lt;/code&gt;.</source>
          <target state="translated">タグ属性処理を完全に無効にするには（たとえば、クライアント側でイメージのロードを処理している場合）、 &lt;code&gt;attrs=false&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="f72579134926fff1a800442bd52c8ff45bbcd816" translate="yes" xml:space="preserve">
          <source>To create a code coverage report for all components (even for those for which you have no tests yet) you have to require all the 1) sources and 2) tests. Something like it's described in &lt;a href=&quot;https://github.com/webpack/karma-webpack#alternative-usage&quot;&gt;&quot;alternative usage&quot; of karma-webpack&lt;/a&gt;</source>
          <target state="translated">すべてのコンポーネントのコードカバレッジレポートを作成するには（まだテストを行っていないコンポーネントも含む）、1）すべてのソースと2）テストが必要です。&lt;a href=&quot;https://github.com/webpack/karma-webpack#alternative-usage&quot;&gt;karma-webpackの「別の使い方」で&lt;/a&gt;説明されているようなもの</target>
        </trans-unit>
        <trans-unit id="869e6e2ac6874691b0a280a2def88cb61d298df9" translate="yes" xml:space="preserve">
          <source>To disable &lt;code&gt;@import&lt;/code&gt; resolving by &lt;code&gt;css-loader&lt;/code&gt; set the option to &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;css-loader&lt;/code&gt; による &lt;code&gt;@import&lt;/code&gt; 解決を無効にするには、オプションを &lt;code&gt;false&lt;/code&gt; に設定します</target>
        </trans-unit>
        <trans-unit id="361551aaf1d19b454740101d98c789ddb47cdcd1" translate="yes" xml:space="preserve">
          <source>To disable &lt;code&gt;contentBase&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;contentBase&lt;/code&gt; を無効にするには：</target>
        </trans-unit>
        <trans-unit id="fe870f47c32f3704bff3eff2d3ef13906efa0316" translate="yes" xml:space="preserve">
          <source>To disable &lt;code&gt;url()&lt;/code&gt; resolving by &lt;code&gt;css-loader&lt;/code&gt; set the option to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;css-loader&lt;/code&gt; による &lt;code&gt;url()&lt;/code&gt; 解決を無効にするには、オプションを &lt;code&gt;false&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="e02862c99560640eb94080cfcb8a40ef213be8f5" translate="yes" xml:space="preserve">
          <source>To disable this feature in some common editors, see the list below:</source>
          <target state="translated">一般的なエディタでこの機能を無効にするには、以下のリストを参照してください。</target>
        </trans-unit>
        <trans-unit id="41c8815ef9e8f8a631a2f83b99b5626c9ea326d0" translate="yes" xml:space="preserve">
          <source>To disambiguate in your &lt;code&gt;webpack.config.js&lt;/code&gt; between &lt;a href=&quot;development&quot;&gt;development&lt;/a&gt; and &lt;a href=&quot;production&quot;&gt;production builds&lt;/a&gt; you may use environment variables.</source>
          <target state="translated">&lt;a href=&quot;development&quot;&gt;開発&lt;/a&gt; &lt;code&gt;webpack.config.js&lt;/code&gt; と&lt;a href=&quot;production&quot;&gt;本番ビルドの&lt;/a&gt;間でwebpack.config.jsを明確にするために、環境変数を使用できます。</target>
        </trans-unit>
        <trans-unit id="500ff0470316e19a35544952710d7f6e843d15e4" translate="yes" xml:space="preserve">
          <source>To enable CSS source maps, you'll need to pass the &lt;code&gt;sourceMap&lt;/code&gt; option to the &lt;code&gt;less-loader&lt;/code&gt;&lt;em&gt;and&lt;/em&gt; the &lt;code&gt;css-loader&lt;/code&gt;. Your &lt;code&gt;webpack.config.js&lt;/code&gt; should look like this:</source>
          <target state="translated">CSSソースマップを有効にするには、合格する必要があります &lt;code&gt;sourceMap&lt;/code&gt; のにオプションを &lt;code&gt;less-loader&lt;/code&gt; &lt;em&gt;と&lt;/em&gt; &lt;code&gt;css-loader&lt;/code&gt; 。あなたの &lt;code&gt;webpack.config.js&lt;/code&gt; 次のようになります。</target>
        </trans-unit>
        <trans-unit id="29ddb3ba3e454446fe1a7da01fa6a7ea800f1aca" translate="yes" xml:space="preserve">
          <source>To enable CSS source maps, you'll need to pass the &lt;code&gt;sourceMap&lt;/code&gt; option to the sass-loader &lt;em&gt;and&lt;/em&gt; the css-loader. Your &lt;code&gt;webpack.config.js&lt;/code&gt; should look like this:</source>
          <target state="translated">CSSソースマップを有効にするには、 &lt;code&gt;sourceMap&lt;/code&gt; オプションをsass-loader &lt;em&gt;と&lt;/em&gt; css-loader に渡す必要があります。あなたの &lt;code&gt;webpack.config.js&lt;/code&gt; 次のようになります。</target>
        </trans-unit>
        <trans-unit id="5f7892b1e37621678647b50e59d05e015a186798" translate="yes" xml:space="preserve">
          <source>To enable HMR, you also need to modify your webpack configuration object to include the HMR entry points. The &lt;code&gt;webpack-dev-server&lt;/code&gt; package includes a method called &lt;code&gt;addDevServerEntrypoints&lt;/code&gt; which you can use to do this. Here's a small example of how that might look:</source>
          <target state="translated">HMRを有効にするには、HMRエントリーポイントを含めるようにwebpack設定オブジェクトを変更する必要もあります。 &lt;code&gt;webpack-dev-server&lt;/code&gt; パッケージには、呼び出されるメソッドが含ま &lt;code&gt;addDevServerEntrypoints&lt;/code&gt; あなたがこれを行うために使用することができます。これがどのように見えるかの小さな例です：</target>
        </trans-unit>
        <trans-unit id="b2fc05b2ff61f26beeae4af670843b3d9e871698" translate="yes" xml:space="preserve">
          <source>To enable source maps, we must configure TypeScript to output inline source maps to our compiled JavaScript files. The following line must be added to our TypeScript configuration:</source>
          <target state="translated">ソースマップを有効にするには、コンパイルしたJavaScriptファイルにインラインのソースマップを出力するようにTypeScriptを設定しなければなりません。以下の行をTypeScriptの設定に追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="1a389a84023632649f39402ea3de4ce188a82054" translate="yes" xml:space="preserve">
          <source>To exclude &lt;code&gt;node_modules&lt;/code&gt;, see the &lt;code&gt;exclude&lt;/code&gt; option in the &lt;code&gt;loaders&lt;/code&gt; config as documented above.</source>
          <target state="translated">&lt;code&gt;node_modules&lt;/code&gt; を除外するには、上記のように &lt;code&gt;loaders&lt;/code&gt; &lt;code&gt;exclude&lt;/code&gt; オプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="38a9c27a9e0ab77f048bbdd92dbf6f8e9201f83c" translate="yes" xml:space="preserve">
          <source>To expose stylesheets associated with your library, the &lt;a href=&quot;../plugins/extract-text-webpack-plugin&quot;&gt;&lt;code&gt;ExtractTextPlugin&lt;/code&gt;&lt;/a&gt; should be used. Users can then consume and load these as they would any other stylesheet.</source>
          <target state="translated">ライブラリに関連付けられたスタイルシートを公開するには、&lt;a href=&quot;../plugins/extract-text-webpack-plugin&quot;&gt; &lt;code&gt;ExtractTextPlugin&lt;/code&gt; &lt;/a&gt;を使用する必要があります。ユーザーは、他のスタイルシートと同様に、これらを使用およびロードできます。</target>
        </trans-unit>
        <trans-unit id="b58c10e9810b7cd86447de7048c410bbfbdf9685" translate="yes" xml:space="preserve">
          <source>To extract the webpack bootstrap logic into a separate file, use the &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; on a &lt;code&gt;name&lt;/code&gt; which is not defined as &lt;code&gt;entry&lt;/code&gt;. Commonly the name &lt;code&gt;manifest&lt;/code&gt; is used. See the &lt;a href=&quot;../guides/caching&quot;&gt;caching guide&lt;/a&gt; for details.</source>
          <target state="translated">webpackブートストラップロジックを別のファイルに抽出するには、 &lt;code&gt;entry&lt;/code&gt; として定義されていない &lt;code&gt;name&lt;/code&gt; で &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; を使用します。通常、 &lt;code&gt;manifest&lt;/code&gt; という名前が使用されます。詳細については、&lt;a href=&quot;../guides/caching&quot;&gt;キャッシングガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="38ed89ed4d2d579580e96d0f69f192abda5d4002" translate="yes" xml:space="preserve">
          <source>To fix this you should uninstall the npm package &lt;code&gt;babel&lt;/code&gt; as it is deprecated in babel v6. (instead install &lt;code&gt;babel-cli&lt;/code&gt; or &lt;code&gt;babel-core&lt;/code&gt;) In the case one of your dependencies is installing &lt;code&gt;babel&lt;/code&gt; and you cannot uninstall it yourself, use the complete name of the loader in the webpack config:</source>
          <target state="translated">これを修正するには、babel v6で廃止されているnpmパッケージ &lt;code&gt;babel&lt;/code&gt; をアンインストールする必要があります。（代わりに &lt;code&gt;babel-cli&lt;/code&gt; または &lt;code&gt;babel-core&lt;/code&gt; をインストールします）依存関係の1つが &lt;code&gt;babel&lt;/code&gt; をインストールしていて、自分でアンインストールできない場合は、webpack設定でローダーの完全な名前を使用します。</target>
        </trans-unit>
        <trans-unit id="6021058192262f03686a1a0bd715439d2f2cf191" translate="yes" xml:space="preserve">
          <source>To gain typechecking again, use the &lt;a href=&quot;https://www.npmjs.com/package/fork-ts-checker-webpack-plugin&quot;&gt;&lt;code&gt;ForkTsCheckerWebpackPlugin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">もう一度型&lt;a href=&quot;https://www.npmjs.com/package/fork-ts-checker-webpack-plugin&quot;&gt; &lt;code&gt;ForkTsCheckerWebpackPlugin&lt;/code&gt; &lt;/a&gt;には、ForkTsCheckerWebpackPluginを使用します。</target>
        </trans-unit>
        <trans-unit id="e1a1f2b68224bef3bc79c709c34bf3103ba22925" translate="yes" xml:space="preserve">
          <source>To get started you only need to understand its &lt;strong&gt;Core Concepts&lt;/strong&gt;:</source>
          <target state="translated">開始するには、&lt;strong&gt;コアコンセプト&lt;/strong&gt;を理解するだけで十分です。</target>
        </trans-unit>
        <trans-unit id="348e1ea64c185f95f73506889858e9ce259285e2" translate="yes" xml:space="preserve">
          <source>To import a built-in module, use &lt;a href=&quot;../api/module-variables#__non_webpack_require__-webpack-specific-&quot;&gt;&lt;code&gt;__non_webpack_require__&lt;/code&gt;&lt;/a&gt;, i.e. &lt;code&gt;__non_webpack_require__('modulename')&lt;/code&gt; instead of &lt;code&gt;require('modulename')&lt;/code&gt;.</source>
          <target state="translated">組み込みモジュールをインポートするには、 &lt;code&gt;require('modulename')&lt;/code&gt; ではなく&lt;a href=&quot;../api/module-variables#__non_webpack_require__-webpack-specific-&quot;&gt; &lt;code&gt;__non_webpack_require__&lt;/code&gt; &lt;/a&gt;、つまり &lt;code&gt;__non_webpack_require__('modulename')&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="a5ae4d7aa8a104c8ccb3aa651a7bc57b7fa04613" translate="yes" xml:space="preserve">
          <source>To import a local classname from another module.</source>
          <target state="translated">他のモジュールからローカルのクラス名をインポートするには</target>
        </trans-unit>
        <trans-unit id="e2c64aae8fc990d22b375b4c008a28a50ef2b4f0" translate="yes" xml:space="preserve">
          <source>To import from multiple modules use multiple &lt;code&gt;composes:&lt;/code&gt; rules.</source>
          <target state="translated">複数のモジュールからインポートするには、複数の &lt;code&gt;composes:&lt;/code&gt; ルールを使用します。</target>
        </trans-unit>
        <trans-unit id="47e9aa3b08def6333cf943d0fb6cd429f52aa435" translate="yes" xml:space="preserve">
          <source>To include source maps set the &lt;code&gt;sourceMap&lt;/code&gt; option.</source>
          <target state="translated">ソースマップを含めるには、 &lt;code&gt;sourceMap&lt;/code&gt; オプションを設定します。</target>
        </trans-unit>
        <trans-unit id="a1015f4201a74cca3e3ac70cdc79b7f3b6a6d867" translate="yes" xml:space="preserve">
          <source>To install the latest release or a specific version, run one of the following commands:</source>
          <target state="translated">最新のリリースまたは特定のバージョンをインストールするには、次のいずれかのコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="1884df3f25a3bbb6d7b71df607746c88bfb41cb2" translate="yes" xml:space="preserve">
          <source>To integrate with TypeScript, you will need to define a custom module for the exports of your worker</source>
          <target state="translated">TypeScript と統合するには、ワーカーのエクスポート用にカスタムモジュールを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="6bcc914a800145c90ef98d17eac32a8bc02e16aa" translate="yes" xml:space="preserve">
          <source>To learn more about source maps, see the &lt;a href=&quot;development&quot;&gt;development guide&lt;/a&gt;.</source>
          <target state="translated">ソースマップの詳細については、&lt;a href=&quot;development&quot;&gt;開発ガイドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="3a177cf38e45191d1a14eeceb328a37a99ad1a1a" translate="yes" xml:space="preserve">
          <source>To learn more about webpack configuration, see the &lt;a href=&quot;../concepts/configuration&quot;&gt;configuration concepts&lt;/a&gt;.</source>
          <target state="translated">Webpack構成の詳細については、&lt;a href=&quot;../concepts/configuration&quot;&gt;構成の概念を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="3e748d8b605e30f64d9404df3cdd168090d45ff8" translate="yes" xml:space="preserve">
          <source>To make this work with HMR we need to update that binding to the new &lt;code&gt;printMe&lt;/code&gt; function using &lt;code&gt;module.hot.accept&lt;/code&gt;:</source>
          <target state="translated">これをHMRで機能させるには、 &lt;code&gt;printMe&lt;/code&gt; を使用して、新しいprintMe関数へのバインディングを更新する必要があり &lt;code&gt;module.hot.accept&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="06ca871bf3949e7877aca45fc526601107359dd1" translate="yes" xml:space="preserve">
          <source>To mimic a more production-like environment, it is also possible to proxy the webpack-dev-server with nginx.</source>
          <target state="translated">より本番環境に近い環境を模倣するために、webpack-dev-serverをnginxでプロキシすることも可能です。</target>
        </trans-unit>
        <trans-unit id="19f8115b103436185bc4f73cf8023e4431cc5a22" translate="yes" xml:space="preserve">
          <source>To pass your own certificate via the CLI use the following options</source>
          <target state="translated">CLI経由で独自の証明書を渡すには、以下のオプションを使用します。</target>
        </trans-unit>
        <trans-unit id="6647a87d1cb201b2abb16749321598ec33fa1589" translate="yes" xml:space="preserve">
          <source>To prevent the high delay when booting workers it possible to warmup the worker pool.</source>
          <target state="translated">ワーカーを起動する際の遅延を防ぐために、ワーカープールをウォームアップすることができます。</target>
        </trans-unit>
        <trans-unit id="6472c575009f9527693ccb1eb7975cf2b5bb6a74" translate="yes" xml:space="preserve">
          <source>To run the local installation of webpack you can access its bin version as &lt;code&gt;node_modules/.bin/webpack&lt;/code&gt;.</source>
          <target state="translated">webpackのローカルインストールを実行するには、そのbinバージョンに &lt;code&gt;node_modules/.bin/webpack&lt;/code&gt; としてアクセスできます。</target>
        </trans-unit>
        <trans-unit id="3a6e637bcd7f8c82f7ecb2b72b80d94077bbbc98" translate="yes" xml:space="preserve">
          <source>To set a custom name for the output script, use the &lt;code&gt;name&lt;/code&gt; parameter. The name may contain the string &lt;code&gt;[hash]&lt;/code&gt;, which will be replaced with a content dependent hash for caching purposes. When using &lt;code&gt;name&lt;/code&gt; alone &lt;code&gt;[hash]&lt;/code&gt; is omitted.</source>
          <target state="translated">出力スクリプトのカスタム名を設定するには、 &lt;code&gt;name&lt;/code&gt; パラメーターを使用します。名前には文字列 &lt;code&gt;[hash]&lt;/code&gt; 含めることができます。これは、キャッシュのためにコンテンツ依存のハッシュに置き換えられます。 &lt;code&gt;name&lt;/code&gt; のみを使用する場合、 &lt;code&gt;[hash]&lt;/code&gt; は省略されます。</target>
        </trans-unit>
        <trans-unit id="dac38352ca87e4dd20fd92ae4b4d17c3a6910808" translate="yes" xml:space="preserve">
          <source>To set the &lt;code&gt;target&lt;/code&gt; property, you simply set the target value in your webpack config:</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; プロパティを設定するには、webpack設定でターゲット値を設定するだけです。</target>
        </trans-unit>
        <trans-unit id="d7739566e3958f0e427ab0f8fd3a0e62883980cf" translate="yes" xml:space="preserve">
          <source>To show only errors in your bundle:</source>
          <target state="translated">バンドルのエラーのみを表示する。</target>
        </trans-unit>
        <trans-unit id="144def8245316e56bae55c0aa633ce63f74cdd87" translate="yes" xml:space="preserve">
          <source>To specify an unset default value, use &lt;code&gt;null&lt;/code&gt; instead of &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">未設定のデフォルト値を指定するには、 &lt;code&gt;undefined&lt;/code&gt; ではなく &lt;code&gt;null&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="7929162fe7ecd963c36f31e3a8c0790d5dcf5b99" translate="yes" xml:space="preserve">
          <source>To start using webpack Node.js API, first install webpack if you haven&amp;rsquo;t yet:</source>
          <target state="translated">webpack Node.js APIの使用を開始するには、まだ実行していない場合は、まずwebpackをインストールします。</target>
        </trans-unit>
        <trans-unit id="9c156f8d22007693b411c0a6e5d1ef4987eb8bdf" translate="yes" xml:space="preserve">
          <source>To start, make sure that the &lt;code&gt;Vagrantfile&lt;/code&gt; has a static IP;</source>
          <target state="translated">まず、 &lt;code&gt;Vagrantfile&lt;/code&gt; に静的IPがあることを確認します。</target>
        </trans-unit>
        <trans-unit id="559f3ffdd386200d39a9e0ed2f0bf1bcfb8133ef" translate="yes" xml:space="preserve">
          <source>To use non-code assets with TypeScript, we need to defer the type for these imports. This requires a &lt;code&gt;custom.d.ts&lt;/code&gt; file which signifies custom definitions for TypeScript in our project. Let's set up a declaration for &lt;code&gt;.svg&lt;/code&gt; files:</source>
          <target state="translated">TypeScriptで非コードアセットを使用するには、これらのインポートのタイプを遅延させる必要があります。これには、プロジェクト内のTypeScriptのカスタム定義を示す &lt;code&gt;custom.d.ts&lt;/code&gt; ファイルが必要です。 &lt;code&gt;.svg&lt;/code&gt; ファイルの宣言を設定しましょう：</target>
        </trans-unit>
        <trans-unit id="f47e2685aba87fc596fb60b79c57346015b6eeaf" translate="yes" xml:space="preserve">
          <source>To use this option with the CLI pass the &lt;code&gt;--allowed-hosts&lt;/code&gt; option a comma-delimited string.</source>
          <target state="translated">このオプションをCLIで使用するには、 &lt;code&gt;--allowed-hosts&lt;/code&gt; オプションにカンマ区切りの文字列を渡します。</target>
        </trans-unit>
        <trans-unit id="c7251e927f90574f1c93d0aab322bd244ce7bc38" translate="yes" xml:space="preserve">
          <source>To wait until the chunk is available (and get the exports) you need to async wait for it.</source>
          <target state="translated">チャンクが利用可能になるまで待つ(そしてエクスポートを取得する)ためには、非同期で待機する必要があります。</target>
        </trans-unit>
        <trans-unit id="cb9583a28cf56d89a0848b6749cfcca0381af814" translate="yes" xml:space="preserve">
          <source>To write the webpack configuration in &lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;, you would first install the necessary dependencies:</source>
          <target state="translated">&lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;でwebpack構成を作成するには、まず必要な依存関係をインストールします。</target>
        </trans-unit>
        <trans-unit id="b3ca19b09afec2f63af696e7e940998ab6ae784f" translate="yes" xml:space="preserve">
          <source>Toggle between the dev-server's two different modes. By default the application will be served with &lt;em&gt;inline mode&lt;/em&gt; enabled. This means that a script will be inserted in your bundle to take care of live reloading, and build messages will appear in the browser console.</source>
          <target state="translated">開発サーバーの2つの異なるモードを切り替えます。デフォルトでは、アプリケーションは&lt;em&gt;インラインモードを&lt;/em&gt;有効にして提供されます。つまり、ライブリロードを処理するスクリプトがバンドルに挿入され、ビルドメッセージがブラウザコンソールに表示されます。</target>
        </trans-unit>
        <trans-unit id="1a02f440362f76dd74ced4f9fbfee17146a758be" translate="yes" xml:space="preserve">
          <source>Transform/Conditionally load CSS by passing a transform/condition function</source>
          <target state="translated">トランスフォーム/条件関数を渡してCSSを読み込む</target>
        </trans-unit>
        <trans-unit id="626a681bf03395c3c640839f0d5ec24dccbb5e1f" translate="yes" xml:space="preserve">
          <source>Transpiling</source>
          <target state="translated">Transpiling</target>
        </trans-unit>
        <trans-unit id="0342403a32191cb5b268774041560f46a913b84c" translate="yes" xml:space="preserve">
          <source>Tree Shaking</source>
          <target state="translated">ツリーの揺れ</target>
        </trans-unit>
        <trans-unit id="92ee5435c87b7237526ef2d2b3c89bdeda428523" translate="yes" xml:space="preserve">
          <source>Tries to evaluate expressions in &lt;code&gt;if (...)&lt;/code&gt; statements and ternaries to replace them with &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt; for further possible dead branch elimination using hooks fired by the parser.</source>
          <target state="translated">&lt;code&gt;if (...)&lt;/code&gt; ステートメントと3項で式を評価し、それらを &lt;code&gt;true&lt;/code&gt; / &lt;code&gt;false&lt;/code&gt; に置き換えて、パーサーによって起動されたフックを使用してさらにデッドブランチを排除できるようにします。</target>
        </trans-unit>
        <trans-unit id="f48dbb4a06d50125f4b45400d23b5309c350e2b5" translate="yes" xml:space="preserve">
          <source>Triggered after chunk &lt;code&gt;id&lt;/code&gt; optimization has finished.</source>
          <target state="translated">チャンク &lt;code&gt;id&lt;/code&gt; 最適化が完了した後にトリガーされます。</target>
        </trans-unit>
        <trans-unit id="016425652fe92febb10e1a63fc9cd2be53ec09b2" translate="yes" xml:space="preserve">
          <source>Triggered at the beginning of the optimization phase.</source>
          <target state="translated">最適化フェーズの開始時にトリガーされます。</target>
        </trans-unit>
        <trans-unit id="728b9f27106bfa00dc2e96b9deec761104277599" translate="yes" xml:space="preserve">
          <source>Triggered before a module build has started.</source>
          <target state="translated">モジュールのビルドが開始される前にトリガーされます。</target>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="ffb2ecf6611790daff972e263d7001c037770c42" translate="yes" xml:space="preserve">
          <source>Try to keep the chunk count below a limit</source>
          <target state="translated">チャンク数を制限値以下にするようにしてください。</target>
        </trans-unit>
        <trans-unit id="b525bcfcdd619ae45cbe7b652f2a2e93cc867f70" translate="yes" xml:space="preserve">
          <source>Try to keep the chunk size above a limit</source>
          <target state="translated">チャンクサイズを制限値以上に保つようにしてください。</target>
        </trans-unit>
        <trans-unit id="6b517438de5f4b79f54fb3ec50b752a1392cebdf" translate="yes" xml:space="preserve">
          <source>Turn on &lt;a href=&quot;https://whatis.techtarget.com/definition/polling&quot;&gt;polling&lt;/a&gt; by passing &lt;code&gt;true&lt;/code&gt;, or specifying a poll interval in milliseconds:</source>
          <target state="translated">オンにし&lt;a href=&quot;https://whatis.techtarget.com/definition/polling&quot;&gt;、ポーリング&lt;/a&gt;渡すことによって &lt;code&gt;true&lt;/code&gt; 、またはミリ秒単位でポーリング間隔を指定：</target>
        </trans-unit>
        <trans-unit id="38fca6ee99a8e2eb5692ba03fc79c782860fdf0d" translate="yes" xml:space="preserve">
          <source>Turn on debugging mode</source>
          <target state="translated">デバッグモードをオンにする</target>
        </trans-unit>
        <trans-unit id="0b364042060d283631bdc472627fff2ec14242bf" translate="yes" xml:space="preserve">
          <source>Turn on watch mode. This means that after the initial build, webpack will continue to watch for changes in any of the resolved files. Watch mode is turned off by default:</source>
          <target state="translated">ウォッチモードをオンにします。これは、最初のビルドの後、webpackは解決されたファイルのいずれかの変更をウォッチし続けることを意味します。ウォッチモードはデフォルトではオフになっています。</target>
        </trans-unit>
        <trans-unit id="b9173d10bd7a6471f8b2bcda45935dfcb7aa6ea4" translate="yes" xml:space="preserve">
          <source>Turns hints on/off. In addition, tells webpack to throw either an error or a warning when hints are found. This property is set to &lt;code&gt;&quot;warning&quot;&lt;/code&gt; by default.</source>
          <target state="translated">ヒントをオン/オフにします。さらに、ヒントが見つかったときにエラーまたは警告をスローするようにwebpackに指示します。このプロパティは、デフォルトで &lt;code&gt;&quot;warning&quot;&lt;/code&gt; に設定されています。</target>
        </trans-unit>
        <trans-unit id="5ce6d5323234bd0947f55f8ac9407c285c721c2b" translate="yes" xml:space="preserve">
          <source>Tweak styling faster -- almost comparable to changing styles in the browser's debugger.</source>
          <target state="translated">スタイリングの微調整が速くなりました --ブラウザのデバッガでスタイルを変更するのとほぼ同じです。</target>
        </trans-unit>
        <trans-unit id="8e1a738f77891efb46fed43843ce712380ab54a1" translate="yes" xml:space="preserve">
          <source>Two similar techniques are supported by webpack when it comes to dynamic code splitting. The first and recommended approach is to use the &lt;a href=&quot;../api/module-methods#import-&quot;&gt;&lt;code&gt;import()&lt;/code&gt; syntax&lt;/a&gt; that conforms to the &lt;a href=&quot;https://github.com/tc39/proposal-dynamic-import&quot;&gt;ECMAScript proposal&lt;/a&gt; for dynamic imports. The legacy, webpack-specific approach is to use &lt;a href=&quot;../api/module-methods#require-ensure&quot;&gt;&lt;code&gt;require.ensure&lt;/code&gt;&lt;/a&gt;. Let's try using the first of these two approaches...</source>
          <target state="translated">動的コード分割に関しては、2つの同様の手法がWebpackでサポートされています。最初の推奨されるアプローチは、動的インポートの&lt;a href=&quot;https://github.com/tc39/proposal-dynamic-import&quot;&gt;ECMAScript提案に&lt;/a&gt;準拠する&lt;a href=&quot;../api/module-methods#import-&quot;&gt; &lt;code&gt;import()&lt;/code&gt; 構文&lt;/a&gt;を使用することです。従来のWebpack固有のアプローチは、require.ensureを使用すること&lt;a href=&quot;../api/module-methods#require-ensure&quot;&gt; &lt;code&gt;require.ensure&lt;/code&gt; &lt;/a&gt;。これらの2つのアプローチの最初の方法を使用してみましょう...</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="94a229b08fb0895570dee34d92dd44e883395943" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Array[Function]&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Array[Function]&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f15a23ea737e87dd7451dd5e0e9e29e27f4055b6" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Array[Object]&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Array[Object]&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="99b4afaa36767e15dfc4084c10fbd22041b73af8" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Array[String]&lt;/code&gt; Default: &lt;code&gt;[]&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Array[String]&lt;/code&gt; デフォルト： &lt;code&gt;[]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e1786d5f336b7023a095ff9d273b42e018467359" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="48f390c9de4ea544dff9d1ec37c3523911fa118e" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean&lt;/code&gt; Default: &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean&lt;/code&gt; デフォルト： &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4f822f4d91655775283eeb9acc861e91bb8593e6" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean&lt;/code&gt; Default: &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean&lt;/code&gt; デフォルト： &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="24d4453466129b8bf2e49bdf3cd712902713dd56" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b84b9bc7aaebed88083d6cb3754bfb6954242dfe" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|Number&lt;/code&gt; Default: &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|Number&lt;/code&gt; デフォルト： &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a45789cbb27a158b6b7a1d196c4567be588ed494" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|String&lt;/code&gt; Default: &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|String&lt;/code&gt; デフォルト： &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c102d3840abe1451f84b0caecaf1f118a0f7975e" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|String|Function&amp;lt;(string) -&amp;gt; String&amp;gt;&lt;/code&gt; Default: &lt;code&gt;/*! For license information please see ${commentsFile} */&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|String|Function&amp;lt;(string) -&amp;gt; String&amp;gt;&lt;/code&gt; デフォルト： &lt;code&gt;/*! For license information please see ${commentsFile} */&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8868d15eb3fe0352c846a246f7ea008f1e7c3180" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|String|RegExp|Function&amp;lt;(node, comment) -&amp;gt; Boolean|Object&amp;gt;&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|String|RegExp|Function&amp;lt;(node, comment) -&amp;gt; Boolean|Object&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2765b2640ca4d35ed492a2c7d20819253ddc2db8" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|String|RegExp|Function&amp;lt;(node, comment) -&amp;gt; Boolean|Object&amp;gt;&lt;/code&gt; Default: &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|String|RegExp|Function&amp;lt;(node, comment) -&amp;gt; Boolean|Object&amp;gt;&lt;/code&gt; デフォルト： &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="260402fdd52f9d5162c6febf7c4529ca530706d0" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Function&amp;lt;(defaultCacheKeys, file) -&amp;gt; Object&amp;gt;&lt;/code&gt; Default: &lt;code&gt;defaultCacheKeys =&amp;gt; defaultCacheKeys&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Function&amp;lt;(defaultCacheKeys, file) -&amp;gt; Object&amp;gt;&lt;/code&gt; デフォルト： &lt;code&gt;defaultCacheKeys =&amp;gt; defaultCacheKeys&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e5b22bb98280473acea9cd815eda355202cba26a" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Function&amp;lt;(warning, source) -&amp;gt; Boolean&amp;gt;&lt;/code&gt; Default: &lt;code&gt;() =&amp;gt; true&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Function&amp;lt;(warning, source) -&amp;gt; Boolean&amp;gt;&lt;/code&gt; デフォルト： &lt;code&gt;() =&amp;gt; true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6ed6bae83b76c8a2fcf92f4b5e1cf90a0af91066" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Function&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Function&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="68be30dbb80b283998a4620ae5f2cdfd8a10de7a" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Number&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Number&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1c50fda292f228e964a3c134d2d898e59768354f" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Number&lt;/code&gt; Default: &lt;code&gt;9999&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Number&lt;/code&gt; デフォルト： &lt;code&gt;9999&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0df7a0769e52452e3df73f39fb7b1a59df2977b3" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Number&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Number&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="87a72a4a194580af6f23ca7095e7565efd80de57" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Object&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aa1722ad0036438a3b69cf0e3b5d3e0af63f80d4" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object&lt;/code&gt; Default: &lt;a href=&quot;https://github.com/fabiosantoscode/terser#minify-options&quot;&gt;default&lt;/a&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Object&lt;/code&gt; デフォルト：&lt;a href=&quot;https://github.com/fabiosantoscode/terser#minify-options&quot;&gt;デフォルト&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="690a74e8c6ac1a54d1b06a87192c7609fc70939c" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object&lt;/code&gt; Default: &lt;code&gt;require('stylelint').formatters.string&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Object&lt;/code&gt; デフォルト： &lt;code&gt;require('stylelint').formatters.string&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a00bf287d8473e657b95694eeeebd890a935fbff" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Object&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f1e7391bdda68bf329c48bd6c9153a513715a424" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;RegExp&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;RegExp&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2ad0c59a95b0e6d486f10a3a9d7eba6a82efa298" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Regex|Function&amp;lt;(string) -&amp;gt; {String}&amp;gt;&lt;/code&gt; Default: &lt;code&gt;${file}.LICENSE&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Regex|Function&amp;lt;(string) -&amp;gt; {String}&amp;gt;&lt;/code&gt; デフォルト： &lt;code&gt;${file}.LICENSE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f9497118568642094db37dca1d955af12afd5eca" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Sting|RegExp|Array&amp;lt;RegExp&amp;gt;&lt;/code&gt; Default: &lt;code&gt;/\.js(\?.*)?$/i&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Sting|RegExp|Array&amp;lt;RegExp&amp;gt;&lt;/code&gt; デフォルト： &lt;code&gt;/\.js(\?.*)?$/i&lt;/code&gt; . js(\? . *)?$ / i</target>
        </trans-unit>
        <trans-unit id="0ec6af7a195975bd36af2b460624abae040ba7ce" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Sting|RegExp|Array&amp;lt;RegExp&amp;gt;&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Sting|RegExp|Array&amp;lt;RegExp&amp;gt;&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3c3e574cd51824e490cce46575d42da6d5fbe4e3" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String | Array[String]&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String | Array[String]&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dad081ed1244c0f0182b6af2ed80d0835e74f031" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b67b322475209b0ccffe39f447c84533fd7ff84d" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;a href=&quot;../configuration/entry-context#context&quot;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト：&lt;a href=&quot;../configuration/entry-context#context&quot;&gt; &lt;code&gt;context&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="54223bad6aa67e8e06b399d5a079e2fe042e5381" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;'file-loader'&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト： &lt;code&gt;'file-loader'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3450d9d063d640321d1424d901a3cc0370a43af5" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;'hex'&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト： &lt;code&gt;'hex'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f09c525848a9e04af4422213f7421822bdec9703" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;'md5'&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト： &lt;code&gt;'md5'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d338a21826be5e359d37d9946a8a9cc06244641e" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;(file extension)&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト：（ &lt;code&gt;(file extension)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="458860cc8794fa1dce5c93964ce4854602e52c79" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;[hash].worker.js&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト： &lt;code&gt;[hash].worker.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="64522537628ac15d313112de255758c15749456e" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;compiler.context&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト： &lt;code&gt;compiler.context&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c2eabe9055d6691bbf54d928e4538a230fed05fc" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;file.basename&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト： &lt;code&gt;file.basename&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aa3afefe72790380f9808b4dff5a61622b6267d7" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;file.dirname&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト： &lt;code&gt;file.dirname&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d8b5890ce141620217849910ef33a2967576fd9f" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;file.extname&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト： &lt;code&gt;file.extname&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6b40e8955703b7795ceda160c5ceadbd272eab79" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;null&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト： &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8388c10e54000d4de84160be8aca57b37c6901be" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;process.cwd()&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト： &lt;code&gt;process.cwd()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="856eda01ea92fee417c94b9f976fd41b8817e945" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="db8cb2d531af0482fa5e26cb76d4c1b4bd4ddf6e" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String|Array[String]&lt;/code&gt; Default: &lt;code&gt;'**/*.s?(a|c)ss'&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String|Array[String]&lt;/code&gt; デフォルト： &lt;code&gt;'**/*.s?(a|c)ss'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0cfd43f77b19279843713625949db91e7de44cbc" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String|Buffer&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;&lt;em&gt;Required&lt;/em&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String|Buffer&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt; &lt;em&gt;必須&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="28283229d6030ab5c7fc80576b4f1863027b6f9e" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String|Function&lt;/code&gt; Default: &lt;a href=&quot;../api/module-variables#__webpack_public_path__-webpack-specific-&quot;&gt;&lt;code&gt;__webpack_public_path__&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String|Function&lt;/code&gt; デフォルト：&lt;a href=&quot;../api/module-variables#__webpack_public_path__-webpack-specific-&quot;&gt; &lt;code&gt;__webpack_public_path__&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="360ab5e9d49ff583c21f7d76eb3d326afea79f20" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String|Function&lt;/code&gt; Default: &lt;code&gt;'[hash].[ext]'&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String|Function&lt;/code&gt; デフォルト： &lt;code&gt;'[hash].[ext]'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3091c75d84d793177ba7ea3b610ff90640c8fc55" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String|Function&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String|Function&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8113ae3d265d1a67acc2263bc2ca536d74c3ff2a" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String|RegExp|Array&amp;lt;String,RegExp&amp;gt;&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String|RegExp|Array&amp;lt;String,RegExp&amp;gt;&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d4a86cb946d4af4766f6a695502b64f3ea0cd58b" translate="yes" xml:space="preserve">
          <source>TypeScript</source>
          <target state="translated">TypeScript</target>
        </trans-unit>
        <trans-unit id="c2d9ac914c647cad0dbcbcb87931238e275c6336" translate="yes" xml:space="preserve">
          <source>TypeScript Loader</source>
          <target state="translated">TypeScript ローダ</target>
        </trans-unit>
        <trans-unit id="93b9e289e2842469d001eccf7ad5d79f3c302dc9" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">Types</target>
        </trans-unit>
        <trans-unit id="1f7c2dd82181496d2b141ba86b492b3af4761c11" translate="yes" xml:space="preserve">
          <source>Typical Use Cases</source>
          <target state="translated">代表的な使用例</target>
        </trans-unit>
        <trans-unit id="6b1515c87f6a7ea85127e01e963023637ee473a4" translate="yes" xml:space="preserve">
          <source>Typically, only one master &lt;code&gt;Compiler&lt;/code&gt; instance is created, although child compilers can be created in order to delegate specific tasks. The &lt;code&gt;Compiler&lt;/code&gt; is ultimately just a function which performs bare minimum functionality to keep a lifecycle running. It delegates all the loading, bundling, and writing work to registered plugins.</source>
          <target state="translated">通常、マスター &lt;code&gt;Compiler&lt;/code&gt; インスタンスは1つだけ作成されますが、特定のタスクを委任するために子コンパイラを作成できます。 &lt;code&gt;Compiler&lt;/code&gt; 最終的には、ライフサイクルを実行し維持する最低限の機能を実行するだけの関数です。ロード、バンドル、および書き込みのすべての作業を登録済みプラグインに委任します。</target>
        </trans-unit>
        <trans-unit id="c3f8e78bf56c04e550ab81796136efb41f9da8c9" translate="yes" xml:space="preserve">
          <source>UMD: available after AMD or CommonJS &lt;code&gt;require&lt;/code&gt; (&lt;code&gt;libraryTarget:'umd'&lt;/code&gt;).</source>
          <target state="translated">UMD：AMDまたはCommonJSが &lt;code&gt;require&lt;/code&gt; 後に使用可能（ &lt;code&gt;libraryTarget:'umd'&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="a7306d507f537995a908cdc2c667543de98fc215" translate="yes" xml:space="preserve">
          <source>UglifyJsPlugin</source>
          <target state="translated">UglifyJsPlugin</target>
        </trans-unit>
        <trans-unit id="3d9844683293513f543c7b29de1eca0738819eb5" translate="yes" xml:space="preserve">
          <source>UglifyjsWebpackPlugin</source>
          <target state="translated">UglifyjsWebpackPlugin</target>
        </trans-unit>
        <trans-unit id="a97df0e9ab39030d7a23b49ea204e7804ae6467e" translate="yes" xml:space="preserve">
          <source>Unfortunately, Less doesn't map all options 1-by-1 to camelCase. When in doubt, &lt;a href=&quot;https://github.com/less/less.js/blob/3.x/bin/lessc&quot;&gt;check their executable&lt;/a&gt; and search for the dash-case option.</source>
          <target state="translated">残念ながら、Lessはすべてのオプションを1行1列にキャメルケースにマップしません。疑わしい場合は&lt;a href=&quot;https://github.com/less/less.js/blob/3.x/bin/lessc&quot;&gt;、実行可能ファイル&lt;/a&gt;を確認して、ダッシュケースオプションを検索してください。</target>
        </trans-unit>
        <trans-unit id="02b28fce43a60e9b67980e224a3271b9d05a18d1" translate="yes" xml:space="preserve">
          <source>Unique ident for this plugin instance. (For advanced usage only, by default automatically generated)</source>
          <target state="translated">このプラグインのインスタンスのユニークな ID。(高度な使用法の場合のみ、デフォルトでは自動的に生成されます)</target>
        </trans-unit>
        <trans-unit id="38096a0782d24be3f1ac8a005109a6f9e98a2e3c" translate="yes" xml:space="preserve">
          <source>Unlicense</source>
          <target state="translated">Unlicense</target>
        </trans-unit>
        <trans-unit id="87275ae56cb19d69dde22669d78018993c53c041" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;define-plugin&quot;&gt;&lt;code&gt;DefinePlugin&lt;/code&gt;&lt;/a&gt;, default values are applied to &lt;code&gt;JSON.stringify&lt;/code&gt; by the &lt;code&gt;EnvironmentPlugin&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;define-plugin&quot;&gt; &lt;code&gt;DefinePlugin&lt;/code&gt; &lt;/a&gt;とは異なり、デフォルト値は &lt;code&gt;EnvironmentPlugin&lt;/code&gt; によって &lt;code&gt;JSON.stringify&lt;/code&gt; に適用されます。</target>
        </trans-unit>
        <trans-unit id="97906c9c9c0bfb96fc8e4c7b67d7ad433d30558b" translate="yes" xml:space="preserve">
          <source>Updates style &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;</source>
          <target state="translated">スタイル &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; を更新します</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="3439e83eddd9b986dc9a370152a22cf7dcf9b189" translate="yes" xml:space="preserve">
          <source>Usage example</source>
          <target state="translated">使用例</target>
        </trans-unit>
        <trans-unit id="41cb38aef0f43893edb2a921684f2f6f40f9e95c" translate="yes" xml:space="preserve">
          <source>Usage via the CLI</source>
          <target state="translated">CLI経由での使用</target>
        </trans-unit>
        <trans-unit id="049f5e1baa1376397ff904e81ced9390d85660bb" translate="yes" xml:space="preserve">
          <source>Usage with config file</source>
          <target state="translated">コンフィグファイルでの使用法</target>
        </trans-unit>
        <trans-unit id="420dc5d6f5dd5e472ab220d4ffe705c20bd6dcc7" translate="yes" xml:space="preserve">
          <source>Usage with default values</source>
          <target state="translated">デフォルト値での使用法</target>
        </trans-unit>
        <trans-unit id="f0bda72188507cba1ef2ddbd4e83a886112b7438" translate="yes" xml:space="preserve">
          <source>Usage with require statement loader prefix</source>
          <target state="translated">require ステートメントローダーの接頭辞での使用法</target>
        </trans-unit>
        <trans-unit id="785ae0c3486e73e9f8b768557933a332df04dc7d" translate="yes" xml:space="preserve">
          <source>Usage without config file</source>
          <target state="translated">コンフィグファイルがない場合の使用法</target>
        </trans-unit>
        <trans-unit id="71ee1172757fd42561b9cf137f9ab461f5d586e7" translate="yes" xml:space="preserve">
          <source>Usage: &lt;code&gt;entry: string|Array&amp;lt;string&amp;gt;&lt;/code&gt;</source>
          <target state="translated">使用法： &lt;code&gt;entry: string|Array&amp;lt;string&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e054d435d046f8777136e4b00386b25fc845a634" translate="yes" xml:space="preserve">
          <source>Usage: &lt;code&gt;entry: {[entryChunkName: string]: string|Array&amp;lt;string&amp;gt;}&lt;/code&gt;</source>
          <target state="translated">使用法： &lt;code&gt;entry: {[entryChunkName: string]: string|Array&amp;lt;string&amp;gt;}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="048a95d8e63a18a35214152fa9cdd1ca3affe9c9" translate="yes" xml:space="preserve">
          <source>Usage: Lodash Map</source>
          <target state="translated">使用方法。ロダッシュマップ</target>
        </trans-unit>
        <trans-unit id="bd71a2d8f7fdfbd229f3ddfe2c52c1ebc36f92b1" translate="yes" xml:space="preserve">
          <source>Usage: Vue.js</source>
          <target state="translated">使用法。Vue.js</target>
        </trans-unit>
        <trans-unit id="c71a7f709525e96282aab1489390403a74f7af5e" translate="yes" xml:space="preserve">
          <source>Usage: custom &lt;code&gt;outputPath&lt;/code&gt;</source>
          <target state="translated">使用法：カスタム &lt;code&gt;outputPath&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6074933fbc4d7ed357713b8393150012a221bc81" translate="yes" xml:space="preserve">
          <source>Usage: default</source>
          <target state="translated">使用法:デフォルト</target>
        </trans-unit>
        <trans-unit id="97aa9139b5759d53264af935bc8b66d67296c1c9" translate="yes" xml:space="preserve">
          <source>Usage: jQuery</source>
          <target state="translated">使用方法:jQuery</target>
        </trans-unit>
        <trans-unit id="c9948b5c3a0efb386160d78d9e95149d8988754d" translate="yes" xml:space="preserve">
          <source>Usage: jQuery with Angular 1</source>
          <target state="translated">使用方法:Angular 1を使ったjQuery</target>
        </trans-unit>
        <trans-unit id="90283442f2ef3d264ecbf048521f8735be3ab70f" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; to create bundles of shared application code between each page. Multi-page applications that reuse a lot of code/modules between entry points can greatly benefit from these techniques, as the amount of entry points increase.</source>
          <target state="translated">&lt;code&gt;CommonsChunkPlugin&lt;/code&gt; を使用して、各ページ間に共有アプリケーションコードのバンドルを作成します。エントリポイントの数が増えるにつれて、エントリポイント間で多くのコード/モジュールを再利用するマルチページアプリケーションは、これらのテクニックから大きな恩恵を受けることができます。</target>
        </trans-unit>
        <trans-unit id="6f1fed208551ff106887d8af5e80ff7ef296a976" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;module.rules&lt;/code&gt; whenever possible, as this will reduce boilerplate in your source code and allow you to debug or locate a loader faster if something goes south.</source>
          <target state="translated">可能な場合は常に &lt;code&gt;module.rules&lt;/code&gt; を使用してください。これにより、ソースコードのボイラープレートが減り、何かが南下した場合にローダーをより速くデバッグまたは検索できるようになります。</target>
        </trans-unit>
        <trans-unit id="c5c0671a0be6041e5f1d3866fb7667e4202e512d" translate="yes" xml:space="preserve">
          <source>Use Cases</source>
          <target state="translated">使用事例</target>
        </trans-unit>
        <trans-unit id="e804363a0734db33e7dd8b2cf9fa692e9bd07cc6" translate="yes" xml:space="preserve">
          <source>Use ES2015 module syntax (i.e. &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt;).</source>
          <target state="translated">ES2015モジュールの構文を使用します（つまり、 &lt;code&gt;import&lt;/code&gt; と &lt;code&gt;export&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="8e3799199c2fd1385ca8a6679a7569bf770dc434" translate="yes" xml:space="preserve">
          <source>Use a &lt;code&gt;eval-source-map&lt;/code&gt; variant for incremental builds.</source>
          <target state="translated">インクリメンタルビルドには &lt;code&gt;eval-source-map&lt;/code&gt; バリアントを使用します。</target>
        </trans-unit>
        <trans-unit id="3823015acd2a8397f2d349e0faf7bde67ec1677e" translate="yes" xml:space="preserve">
          <source>Use a different service URL in production/development builds:</source>
          <target state="translated">本番/開発ビルドでは、別のサービス URL を使用してください。</target>
        </trans-unit>
        <trans-unit id="3423fcc4dce73b33f44b7a08148fbae5735d3851" translate="yes" xml:space="preserve">
          <source>Use different config file</source>
          <target state="translated">別の設定ファイルを使用する</target>
        </trans-unit>
        <trans-unit id="5f963deeb0b38ab886479137bc92905c39af1075" translate="yes" xml:space="preserve">
          <source>Use fewer/smaller libraries.</source>
          <target state="translated">少ない/小さいライブラリを使用してください。</target>
        </trans-unit>
        <trans-unit id="6ea91fd51d88210a0f6118413452bbea9e27499b" translate="yes" xml:space="preserve">
          <source>Use modules without having to use import/require</source>
          <target state="translated">import/require を使用しなくてもモジュールを使用することができます。</target>
        </trans-unit>
        <trans-unit id="e2734a5814e4bc497b1db8f46457c27f5b96b2b7" translate="yes" xml:space="preserve">
          <source>Use multi-process parallel running to improve the build speed</source>
          <target state="translated">ビルド速度を向上させるためにマルチプロセス並列実行を使用する</target>
        </trans-unit>
        <trans-unit id="2f56bfa52ab19a884eb17c40d6e8a950a0ccd1d4" translate="yes" xml:space="preserve">
          <source>Use multi-process parallel running to improve the build speed. Default number of concurrent runs: &lt;code&gt;os.cpus().length - 1&lt;/code&gt;.</source>
          <target state="translated">マルチプロセス並列実行を使用して、ビルド速度を向上させます。同時実行のデフォルト数： &lt;code&gt;os.cpus().length - 1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="852a5e5247d5f01d785e00d48cebc874527016c3" translate="yes" xml:space="preserve">
          <source>Use of HtmlWebpackPlugin</source>
          <target state="translated">HtmlWebpackPluginの利用</target>
        </trans-unit>
        <trans-unit id="b8a1bc5d1840853cc471934d460a60e714be6e6f" translate="yes" xml:space="preserve">
          <source>Use source maps to map error message locations to modules (This slows down the compilation) ⚠️ &lt;strong&gt;&lt;code&gt;cheap-source-map&lt;/code&gt; options don't work with this plugin&lt;/strong&gt;</source>
          <target state="translated">ソースマップを使用してエラーメッセージの場所をモジュールにマップします（これによりコンパイルが遅くなります）⚠️cheap &lt;strong&gt; &lt;code&gt;cheap-source-map&lt;/code&gt; オプションはこのプラグインでは機能しません&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3568250533b173a47606070650342da08e05889e" translate="yes" xml:space="preserve">
          <source>Use source maps to map error message locations to modules (this slows down the compilation). If you use your own &lt;code&gt;minify&lt;/code&gt; function please read the &lt;code&gt;minify&lt;/code&gt; section for handling source maps correctly.</source>
          <target state="translated">ソースマップを使用して、エラーメッセージの場所をモジュールにマップします（これにより、コンパイルが遅くなります）。独自の &lt;code&gt;minify&lt;/code&gt; 関数を使用する場合は、ソースマップを正しく処理するための &lt;code&gt;minify&lt;/code&gt; セクションをお読みください。</target>
        </trans-unit>
        <trans-unit id="03afd1f2b8a63af2efbeb43ec2fe23408b535c2c" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;../guides/shimming#exports-loader&quot;&gt;exports-loader&lt;/a&gt; to add a module export to components which expect a symbol to be global.</source>
          <target state="translated">&lt;a href=&quot;../guides/shimming#exports-loader&quot;&gt;exports-loader&lt;/a&gt;を使用して、シンボルがグローバルになることを期待するコンポーネントにモジュールエクスポートを追加します。</target>
        </trans-unit>
        <trans-unit id="7047a6a883604b0b16f8494074ad551fccc60e76" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;../guides/shimming#imports-loader&quot;&gt;imports-loader&lt;/a&gt; when a script expects the &lt;code&gt;this&lt;/code&gt; keyword to reference &lt;code&gt;window&lt;/code&gt;.</source>
          <target state="translated">スクリプトが &lt;code&gt;this&lt;/code&gt; キーワードが &lt;code&gt;window&lt;/code&gt; を参照することを期待している場合は、&lt;a href=&quot;../guides/shimming#imports-loader&quot;&gt;imports-loaderを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="29623b48270f1002c1bd8b54dc602f32f7ba9205" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;../guides/shimming#provideplugin&quot;&gt;ProvidePlugin&lt;/a&gt; to add a module import statement when a script expects a variable to be globally defined (but is now a module export).</source>
          <target state="translated">スクリプトが変数をグローバルに定義することを期待している場合（ただし、現在はモジュールエクスポートです）、&lt;a href=&quot;../guides/shimming#provideplugin&quot;&gt;ProvidePlugin&lt;/a&gt;を使用してモジュールインポートステートメントを追加します。</target>
        </trans-unit>
        <trans-unit id="0f67fa4b9fb64dd98c2eb5ca8cdaa686cedc2d0b" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;../plugins/normal-module-replacement-plugin&quot;&gt;NormalModuleReplacementPlugin&lt;/a&gt; to have webpack swap a module-compliant version for a script.</source>
          <target state="translated">&lt;a href=&quot;../plugins/normal-module-replacement-plugin&quot;&gt;NormalModuleReplacementPlugin&lt;/a&gt;を使用して、webpackがスクリプトのモジュール準拠バージョンをスワップするようにします。</target>
        </trans-unit>
        <trans-unit id="a4c5aca3b91a835fa0116cb085e98809d051f74f" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;../plugins/source-map-dev-tool-plugin&quot;&gt;&lt;code&gt;SourceMapDevToolPlugin&lt;/code&gt;&lt;/a&gt; for a more fine grained configuration. See the &lt;a href=&quot;../loaders/source-map-loader&quot;&gt;&lt;code&gt;source-map-loader&lt;/code&gt;&lt;/a&gt; to deal with existing source maps.</source>
          <target state="translated">&lt;a href=&quot;../plugins/source-map-dev-tool-plugin&quot;&gt; &lt;code&gt;SourceMapDevToolPlugin&lt;/code&gt; &lt;/a&gt;を使用して、より詳細な構成を行います。既存のソースマップを処理するには、&lt;a href=&quot;../loaders/source-map-loader&quot;&gt; &lt;code&gt;source-map-loader&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a3fae1281abf983ea68fc5840def5bfe64a255ab" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;css-loader&quot;&gt;css-loader&lt;/a&gt; or the &lt;a href=&quot;raw-loader&quot;&gt;raw-loader&lt;/a&gt; to turn it into a JS module and the &lt;a href=&quot;../plugins/mini-css-extract-plugin&quot;&gt;MiniCssExtractPlugin&lt;/a&gt; to extract it into a separate file. Looking for the webpack 1 loader? Check out the &lt;a href=&quot;https://github.com/webpack-contrib/sass-loader/tree/archive/webpack-1&quot;&gt;archive/webpack-1 branch&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;css-loader&quot;&gt;css-loader&lt;/a&gt;または&lt;a href=&quot;raw-loader&quot;&gt;raw-loader&lt;/a&gt;を使用してJSモジュールに&lt;a href=&quot;../plugins/mini-css-extract-plugin&quot;&gt;変換&lt;/a&gt;し、MiniCssExtractPluginを使用して別のファイルに抽出します。webpack 1ローダーをお探しですか？&lt;a href=&quot;https://github.com/webpack-contrib/sass-loader/tree/archive/webpack-1&quot;&gt;archive / webpack-1ブランチを&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="e8f5053cc9a5b3edfd022be6aa3ad7bbe8a89ce2" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;https://github.com/webpack/loader-utils#getoptions&quot;&gt;&lt;code&gt;getOptions&lt;/code&gt; method&lt;/a&gt; from &lt;code&gt;loader-utils&lt;/code&gt; to extract given loader options.</source>
          <target state="translated">&lt;code&gt;loader-utils&lt;/code&gt; の&lt;a href=&quot;https://github.com/webpack/loader-utils#getoptions&quot;&gt; &lt;code&gt;getOptions&lt;/code&gt; メソッド&lt;/a&gt;を使用して、指定されたローダーオプションを抽出します。</target>
        </trans-unit>
        <trans-unit id="d3246b4d7c38981b18ae1ec1216216ce55f906be" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;https://www.npmjs.com/package/stats-webpack-plugin&quot;&gt;StatsPlugin&lt;/a&gt; for more control over the generated profile.</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/stats-webpack-plugin&quot;&gt;StatsPlugin&lt;/a&gt;を使用して、生成されたプロファイルをより詳細に制御します。</target>
        </trans-unit>
        <trans-unit id="860721991110aab1ff27b582970ee9eb61d78c8b" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; in &lt;code&gt;async&lt;/code&gt; mode in Multi-Page Applications.</source>
          <target state="translated">マルチページアプリケーションでは、 &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; を &lt;code&gt;async&lt;/code&gt; モードで使用します。</target>
        </trans-unit>
        <trans-unit id="951dd6398ced88957c9859db052edccc7d1f697e" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; in Multi-Page Applications.</source>
          <target state="translated">マルチページアプリケーションで &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="407ed185a0e815fd28205b6737de4f430df23ea0" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;DllPlugin&lt;/code&gt; to move code that is changed less often into a separate compilation. This will improve the application's compilation speed, although it does increase complexity of the build process.</source>
          <target state="translated">&lt;code&gt;DllPlugin&lt;/code&gt; を使用して、あまり変更されないコードを別のコンパイルに移動します。これにより、ビルドプロセスの複雑さが増しますが、アプリケーションのコンパイル速度が向上します。</target>
        </trans-unit>
        <trans-unit id="4d5dba36cefe992d08bc8c0b9e38d294640a1015" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;fork-ts-checker-webpack-plugin&lt;/code&gt; for type checking in a separate process.</source>
          <target state="translated">別のプロセスで型チェックを行うには、 &lt;code&gt;fork-ts-checker-webpack-plugin&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="7c3fc2640668db5a714dcb9a0de5b946c89e2776" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;include&lt;/code&gt; field to only apply the loader modules that actually need to be transformed by it:</source>
          <target state="translated">&lt;code&gt;include&lt;/code&gt; フィールドを使用して、実際に変換する必要があるローダーモジュールのみを適用します。</target>
        </trans-unit>
        <trans-unit id="fbbfaa0dda995af3ea65e98d5191ff5346c703c6" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;optimization.noEmitOnErrors&lt;/code&gt; to skip the emitting phase whenever there are errors while compiling. This ensures that no erroring assets are emitted. The &lt;code&gt;emitted&lt;/code&gt; flag in the stats is &lt;code&gt;false&lt;/code&gt; for all assets.</source>
          <target state="translated">コンパイル中にエラーが発生した場合は常に、 &lt;code&gt;optimization.noEmitOnErrors&lt;/code&gt; を使用して放出フェーズをスキップします。これにより、エラーのあるアセットが出力されなくなります。 &lt;code&gt;emitted&lt;/code&gt; 統計でフラグがある &lt;code&gt;false&lt;/code&gt; すべての資産について。</target>
        </trans-unit>
        <trans-unit id="3913a299d09b9025220f8c50bb09dcf00287f0af" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;ts-loader&lt;/code&gt; in &lt;code&gt;happyPackMode: true&lt;/code&gt; / &lt;code&gt;transpileOnly: true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;happyPackMode: true&lt;/code&gt; / &lt;code&gt;transpileOnly: true&lt;/code&gt; で &lt;code&gt;ts-loader&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="8bdf28e3536c978c9d5da7c7b4624bdcdb610692" translate="yes" xml:space="preserve">
          <source>Use the correct separators. I.e. &lt;code&gt;path.resolve(__dirname, &quot;app/folder&quot;)&lt;/code&gt; or &lt;code&gt;path.join(__dirname, &quot;app&quot;, &quot;folder&quot;)&lt;/code&gt;.</source>
          <target state="translated">正しいセパレータを使用してください。IEの &lt;code&gt;path.resolve(__dirname, &quot;app/folder&quot;)&lt;/code&gt; または &lt;code&gt;path.join(__dirname, &quot;app&quot;, &quot;folder&quot;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7379d2ab48a8375408752658fb495bfcc4fe6e48" translate="yes" xml:space="preserve">
          <source>Use the latest webpack version. We are always making performance improvements. The latest stable version of webpack is:</source>
          <target state="translated">最新のwebpackバージョンを使用してください。私たちは常にパフォーマンスの改善を行っています。webpackの最新の安定版は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="3794e2f2ca3183e0a2f1f8a8ff68c88df08489dd" translate="yes" xml:space="preserve">
          <source>Use these features when appropriate.</source>
          <target state="translated">適切な場合には、これらの機能を使用してください。</target>
        </trans-unit>
        <trans-unit id="44fb7f40b16f86e3c9d1a67800ba6d4f22b2a36d" translate="yes" xml:space="preserve">
          <source>Use this loader only for expensive operations!</source>
          <target state="translated">高額な作業にのみこのローダーを使用してください!</target>
        </trans-unit>
        <trans-unit id="23a2d77df48f7534d7a83a9705ec7e9b4fd634be" translate="yes" xml:space="preserve">
          <source>Use this option to generate a JSON file containing webpack &quot;records&quot; -- pieces of data used to store module identifiers across multiple builds. You can use this file to track how modules change between builds. To generate one, simply specify a location:</source>
          <target state="translated">このオプションを使用して、webpack の &quot;records&quot; を含む JSON ファイルを生成します。このファイルを使用して、ビルド間でモジュールがどのように変化するかを追跡することができます。生成するには、場所を指定するだけです。</target>
        </trans-unit>
        <trans-unit id="9610bd59c5133421c8f3e6dfbbb7d9634045caa3" translate="yes" xml:space="preserve">
          <source>Use webpack's watch mode. Don't use other tools to watch your files and invoke webpack. The built in watch mode will keep track of timestamps and passes this information to the compilation for cache invalidation.</source>
          <target state="translated">webpackのウォッチモードを使う。他のツールを使ってファイルをウォッチしてwebpackを起動しないでください。内蔵のウォッチモードはタイムスタンプを追跡し、この情報をキャッシュ無効化のためにコンパイルに渡します。</target>
        </trans-unit>
        <trans-unit id="0b84f3bf4e0289f82295c4c1d5a1ffdb875f6fdb" translate="yes" xml:space="preserve">
          <source>Use with Babel (or other JS transpilers)</source>
          <target state="translated">バベル(または他のJSトランスパイラー)との併用</target>
        </trans-unit>
        <trans-unit id="35ca8091dbc2b566405680dbf80285e8b18d7b4b" translate="yes" xml:space="preserve">
          <source>UseEntry</source>
          <target state="translated">UseEntry</target>
        </trans-unit>
        <trans-unit id="e38960e325cc0f68417b6b1b71d40ee9740591d0" translate="yes" xml:space="preserve">
          <source>Used for migrating from webpack 1 to 2</source>
          <target state="translated">webpack 1 から 2 への移行に使用します。</target>
        </trans-unit>
        <trans-unit id="5625e334052514a17c6f9f3ca6f42e9e6e306a18" translate="yes" xml:space="preserve">
          <source>Users have a choice between two CLI packages:</source>
          <target state="translated">ユーザーは2つのCLIパッケージから選択することができます。</target>
        </trans-unit>
        <trans-unit id="9c479f2d1ca6fe32e92cc9e767302871801f04b1" translate="yes" xml:space="preserve">
          <source>Users may also specify a length for the computed hash.</source>
          <target state="translated">また、計算されたハッシュの長さを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="33ae43a361f7f98f7a19d9d0f97e82b984f74fce" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;enhanced-resolve&lt;/code&gt;, webpack can resolve three kinds of file paths:</source>
          <target state="translated">&lt;code&gt;enhanced-resolve&lt;/code&gt; を使用すると、webpackは3種類のファイルパスを解決できます。</target>
        </trans-unit>
        <trans-unit id="592ad84b68126878fbfdffb1f8716ad6233721a2" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;eval()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;eval()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="fe814a133302a983806b7c5cad0cad9106094c3b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;maxSize&lt;/code&gt; (either globally &lt;code&gt;optimization.splitChunks.maxSize&lt;/code&gt; per cache group &lt;code&gt;optimization.splitChunks.cacheGroups[x].maxSize&lt;/code&gt; or for the fallback cache group &lt;code&gt;optimization.splitChunks.fallbackCacheGroup.maxSize&lt;/code&gt;) tells webpack to try to split chunks bigger than &lt;code&gt;maxSize&lt;/code&gt; into smaller parts. Parts will be at least &lt;code&gt;minSize&lt;/code&gt; (next to &lt;code&gt;maxSize&lt;/code&gt;) in size. The algorithm is deterministic and changes to the modules will only have local impact. So that it is usable when using long term caching and doesn't require records. &lt;code&gt;maxSize&lt;/code&gt; is only a hint and could be violated when modules are bigger than &lt;code&gt;maxSize&lt;/code&gt; or splitting would violate &lt;code&gt;minSize&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;maxSize&lt;/code&gt; の（どちらかのグローバル &lt;code&gt;optimization.splitChunks.maxSize&lt;/code&gt; キャッシュごとのグループの &lt;code&gt;optimization.splitChunks.cacheGroups[x].maxSize&lt;/code&gt; するか、フォールバックキャッシュ・グループ用 &lt;code&gt;optimization.splitChunks.fallbackCacheGroup.maxSize&lt;/code&gt; ）の分割チャンクにより大きくしようとするのWebPACKを伝え &lt;code&gt;maxSize&lt;/code&gt; の小さな部分に。パーツのサイズは少なくとも &lt;code&gt;minSize&lt;/code&gt; （ &lt;code&gt;maxSize&lt;/code&gt; の隣）になります。アルゴリズムは確定的であり、モジュールへの変更はローカルにのみ影響します。そのため、長期キャッシュを使用するときに使用でき、レコードを必要としません。 &lt;code&gt;maxSize&lt;/code&gt; はヒントにすぎず、モジュールが &lt;code&gt;maxSize&lt;/code&gt; よりも大きい場合に違反する可能性がありますまたは分割すると、 &lt;code&gt;minSize&lt;/code&gt; に違反します。</target>
        </trans-unit>
        <trans-unit id="7eb388b7faf3e23b214a33a0d5906abfaadad16a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;watching.invalidate&lt;/code&gt;, you can manually invalidate the current compiling round, without stopping the watch process:</source>
          <target state="translated">&lt;code&gt;watching.invalidate&lt;/code&gt; を使用すると、監視プロセスを停止せずに、現在のコンパイルラウンドを手動で無効にできます。</target>
        </trans-unit>
        <trans-unit id="4864b84ad761309fe1200c9530d9247e825fecc4" translate="yes" xml:space="preserve">
          <source>Using Loaders</source>
          <target state="translated">ローダの使用</target>
        </trans-unit>
        <trans-unit id="5855328d71e4db4f6dd615c5093f235d0d05f9d0" translate="yes" xml:space="preserve">
          <source>Using Records</source>
          <target state="translated">記録の利用</target>
        </trans-unit>
        <trans-unit id="1dca7cbbab7fbff23530018b99c23edf26c5aec3" translate="yes" xml:space="preserve">
          <source>Using Third Party Libraries</source>
          <target state="translated">サードパーティライブラリの使用</target>
        </trans-unit>
        <trans-unit id="8824c9d16039f13af26e6689d843673db147de08" translate="yes" xml:space="preserve">
          <source>Using Watch Mode</source>
          <target state="translated">ウォッチモードの使用</target>
        </trans-unit>
        <trans-unit id="9017fb4a027adbde133dec30bfbabf7edbf77ed6" translate="yes" xml:space="preserve">
          <source>Using a Configuration</source>
          <target state="translated">設定を使用して</target>
        </trans-unit>
        <trans-unit id="a246793c7f0a39182d1aa8715b1258b8f768f028" translate="yes" xml:space="preserve">
          <source>Using entry name:</source>
          <target state="translated">エントリー名を使用しています。</target>
        </trans-unit>
        <trans-unit id="441250bf314d4863c43a078bd39c6b6a70ad2c6a" translate="yes" xml:space="preserve">
          <source>Using function to return the filename:</source>
          <target state="translated">ファイル名を返す関数を使用しています。</target>
        </trans-unit>
        <trans-unit id="86144617cdddceef8ae1a3144422cf66197f56c7" translate="yes" xml:space="preserve">
          <source>Using function you can insert the styles into a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot&quot;&gt;ShadowRoot&lt;/a&gt;, e.g</source>
          <target state="translated">機能を使用すると、にスタイルを挿入することができ&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot&quot;&gt;ShadowRoot&lt;/a&gt;、例えば</target>
        </trans-unit>
        <trans-unit id="3d0d49e6e3cd8df3d8c1dbd9691bc35d8fa6302a" translate="yes" xml:space="preserve">
          <source>Using hashes based on each chunks' content:</source>
          <target state="translated">各チャンクの内容に基づいてハッシュを使用します。</target>
        </trans-unit>
        <trans-unit id="519add25ba62dcd513c51cda4eb83bad8ae41195" translate="yes" xml:space="preserve">
          <source>Using hashes generated for extracted content:</source>
          <target state="translated">抽出されたコンテンツに生成されたハッシュを使用します。</target>
        </trans-unit>
        <trans-unit id="ec7eaf4ab9e3973e2bee8828b33d1738fc29e3c6" translate="yes" xml:space="preserve">
          <source>Using internal chunk id:</source>
          <target state="translated">内部チャンクIDを使用しています。</target>
        </trans-unit>
        <trans-unit id="700c14ddf1b1e6edd056f1272f178fca24f039ef" translate="yes" xml:space="preserve">
          <source>Using it asynchronously may not have the expected effect.</source>
          <target state="translated">非同期的に使用すると、期待した効果が得られない場合があります。</target>
        </trans-unit>
        <trans-unit id="3200ec535332fa85a3bbf6cae69a6073171e40a3" translate="yes" xml:space="preserve">
          <source>Using it in an async function may not have the expected effect.</source>
          <target state="translated">非同期関数で使用すると、期待した効果が得られない場合があります。</target>
        </trans-unit>
        <trans-unit id="58ceb1cc3d8510d4682fc763f7e2829dbfbad46e" translate="yes" xml:space="preserve">
          <source>Using other Configuration Languages</source>
          <target state="translated">他の設定言語の使用</target>
        </trans-unit>
        <trans-unit id="59c2cac5921f99904e0b4511c5a819676e6bd84b" translate="yes" xml:space="preserve">
          <source>Using plugins in your webpack config is straightforward - however, there are many use cases that are worth further exploration. &lt;a href=&quot;plugins&quot;&gt;Learn more about them here&lt;/a&gt;.</source>
          <target state="translated">webpack設定でプラグインを使用するのは簡単ですが、さらに調査する価値のある多くのユースケースがあります。&lt;a href=&quot;plugins&quot;&gt;それらについて詳しくは、こちらをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a8b8fdfd9b45b02f1be508c46368a7a4c4e384c6" translate="yes" xml:space="preserve">
          <source>Using preloaded or inlined CSS</source>
          <target state="translated">プリロードされた、またはインライン化されたCSSを使用する</target>
        </trans-unit>
        <trans-unit id="6518a5f2dc3744728446f85190c9fd202a9294a6" translate="yes" xml:space="preserve">
          <source>Using source maps</source>
          <target state="translated">ソースマップの使用</target>
        </trans-unit>
        <trans-unit id="467ce8c78e13c791befca2fb2c3b67684c469445" translate="yes" xml:space="preserve">
          <source>Using the unique hash generated for every build:</source>
          <target state="translated">ビルドごとに生成された一意のハッシュを使用します。</target>
        </trans-unit>
        <trans-unit id="6536132a79bf8af96ab8bfdefdbfab7d325013b8" translate="yes" xml:space="preserve">
          <source>Using these inline directives while declaring your imports allows webpack to output &amp;ldquo;Resource Hint&amp;rdquo; which tells the browser that for:</source>
          <target state="translated">インポートの宣言中にこれらのインラインディレクティブを使用すると、webpackがブラウザーに次のことを通知する「リソースヒント」を出力できます。</target>
        </trans-unit>
        <trans-unit id="d07483f679e606d7fb7e14d9533f6ea9b743b89b" translate="yes" xml:space="preserve">
          <source>Using this callback we can dynamically redirect requests to a new location:</source>
          <target state="translated">このコールバックを使用することで、リクエストを新しい場所に動的にリダイレクトすることができます。</target>
        </trans-unit>
        <trans-unit id="1583a8e9f680bc09e6e3a1d5f218c361dd96f3b1" translate="yes" xml:space="preserve">
          <source>Using this will &lt;strong&gt;override the default array&lt;/strong&gt;, meaning that webpack will no longer try to resolve modules using the default extensions. For modules that are imported with their extension, e.g. &lt;code&gt;import SomeFile from &quot;./somefile.ext&quot;&lt;/code&gt;, to be properly resolved, a string containing &quot;*&quot; must be included in the array.</source>
          <target state="translated">これを使用すると&lt;strong&gt;、デフォルトの配列&lt;/strong&gt;が&lt;strong&gt;上書き&lt;/strong&gt;され&lt;strong&gt;ます&lt;/strong&gt;。つまり、webpackはデフォルトの拡張機能を使用してモジュールを解決しようとしなくなります。拡張子付きでインポートされるモジュール、たとえば &lt;code&gt;import SomeFile from &quot;./somefile.ext&quot;&lt;/code&gt; 適切に解決するには、「*」を含む文字列を配列に含める必要があります。</target>
        </trans-unit>
        <trans-unit id="5d3bed423980b935928474859e7c216545e36176" translate="yes" xml:space="preserve">
          <source>Using webpack's resolver, you can import any file type. You just need a loader that exports valid Less code. Often, you will also want to set the &lt;code&gt;issuer&lt;/code&gt; condition to ensure that this rule is only applied on imports originating from Less files:</source>
          <target state="translated">webpackのリゾルバーを使用すると、任意のファイルタイプをインポートできます。有効なLessコードをエクスポートするローダーが必要です。多くの場合、 &lt;code&gt;issuer&lt;/code&gt; 条件を設定して、このルールがLessファイルからのインポートにのみ適用されるようにすることもできます。</target>
        </trans-unit>
        <trans-unit id="c7564130d0af85566bd3d5159841f2a0c0d22b57" translate="yes" xml:space="preserve">
          <source>Using webpack-dev-middleware</source>
          <target state="translated">webpack-dev-middlewareの使用</target>
        </trans-unit>
        <trans-unit id="929b482a17818f7e179581abb73aad4f5bba1a17" translate="yes" xml:space="preserve">
          <source>Using webpack-dev-server</source>
          <target state="translated">webpack-dev-serverを使用する</target>
        </trans-unit>
        <trans-unit id="56404f43d6b2ed55415737b5df747c000d609a1b" translate="yes" xml:space="preserve">
          <source>Using webpackPreload incorrectly can actually hurt performance, so be careful when using it.</source>
          <target state="translated">webpackPreload の使い方を間違えると実際にパフォーマンスが低下することがあるので、使用する際には注意が必要です。</target>
        </trans-unit>
        <trans-unit id="1727983f3b0fbe806fa9f0e578aa1c2905c45395" translate="yes" xml:space="preserve">
          <source>Usually your projects will need to extend this functionality, for this you can create a &lt;code&gt;webpack.config.js&lt;/code&gt; file in the root folder and webpack will automatically use it.</source>
          <target state="translated">通常、プロジェクトではこの機能を拡張する必要があります。これを行うには、ルートフォルダーに &lt;code&gt;webpack.config.js&lt;/code&gt; ファイルを作成し、webpackが自動的に使用します。</target>
        </trans-unit>
        <trans-unit id="130ffa8a755784a8fff6c2f1afcbd6b0f4165b82" translate="yes" xml:space="preserve">
          <source>Usually, it's recommended to extract the style sheets into a dedicated file in production using the &lt;a href=&quot;../plugins/mini-css-extract-plugin&quot;&gt;MiniCssExtractPlugin&lt;/a&gt;. This way your styles are not dependent on JavaScript.</source>
          <target state="translated">通常、スタイルシートを&lt;a href=&quot;../plugins/mini-css-extract-plugin&quot;&gt;MiniCssExtractPlugin&lt;/a&gt;を使用して本番環境の専用ファイルに抽出することをお勧めします。このようにして、スタイルはJavaScriptに依存しません。</target>
        </trans-unit>
        <trans-unit id="230c0f6708f899e4998611800c671e1627e66bfb" translate="yes" xml:space="preserve">
          <source>Usually, it's recommended to extract the style sheets into a dedicated file in production using the &lt;a href=&quot;../plugins/mini-css-extract-plugin&quot;&gt;MiniCssExtractPlugin&lt;/a&gt;. This way your styles are not dependent on JavaScript:</source>
          <target state="translated">通常、スタイルシートを&lt;a href=&quot;../plugins/mini-css-extract-plugin&quot;&gt;MiniCssExtractPlugin&lt;/a&gt;を使用して本番環境の専用ファイルに抽出することをお勧めします。このようにして、スタイルはJavaScriptに依存しません。</target>
        </trans-unit>
        <trans-unit id="1b0e3aa76a2d97a44a5da8cd5260f85eb167e2d5" translate="yes" xml:space="preserve">
          <source>Variable: as a global variable made available by a &lt;code&gt;script&lt;/code&gt; tag (&lt;code&gt;libraryTarget:'var'&lt;/code&gt;).</source>
          <target state="translated">変数： &lt;code&gt;script&lt;/code&gt; タグ（ &lt;code&gt;libraryTarget:'var'&lt;/code&gt; ）によって利用可能になるグローバル変数として。</target>
        </trans-unit>
        <trans-unit id="c1f31ae1f6a8b752e2c38c54066881ab58d1532d" translate="yes" xml:space="preserve">
          <source>Variables coming from &lt;code&gt;process.env&lt;/code&gt; are always strings.</source>
          <target state="translated">&lt;code&gt;process.env&lt;/code&gt; からの変数は常に文字列です。</target>
        </trans-unit>
        <trans-unit id="eab065a9a4d4690f9b81041691e90f286b2d778b" translate="yes" xml:space="preserve">
          <source>Verify that webpack is not being notified of changes by running webpack with the --progress flag. If progress shows on save but no files are outputted, it is likely a configuration issue, not a file watching issue.</source>
          <target state="translated">webpack を --progress フラグをつけて実行して、webpack が変更の通知を受けていないことを確認してください。保存時に進捗状況が表示されてもファイルが出力されない場合は、ファイルウォッチングの問題ではなく設定の問題である可能性が高いです。</target>
        </trans-unit>
        <trans-unit id="2f649eb36cd354b29c703f5db06d75d8bb5d8758" translate="yes" xml:space="preserve">
          <source>Verify that you have enough available watchers in your system. If this value is too low, the file watcher in Webpack won't recognize the changes:</source>
          <target state="translated">システム内に十分な利用可能なウォッチャーがあることを確認してください。この値が低すぎると、Webpack のファイルウォッチャーは変更を認識しません。</target>
        </trans-unit>
        <trans-unit id="a9ad94597042a491f4c55e15e6796d1220ef197e" translate="yes" xml:space="preserve">
          <source>Version 2 of webpack supports ES6 module syntax natively, meaning you can use &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; without a tool like babel to handle this for you. Keep in mind that you will still probably need babel for other ES6+ features. The following methods are supported by webpack:</source>
          <target state="translated">Webpackのバージョン2は、ES6モジュール構文をネイティブでサポートしています。つまり、babelのようなツールなしで &lt;code&gt;import&lt;/code&gt; と &lt;code&gt;export&lt;/code&gt; を使用してこれを処理できます。他のES6 +機能にはまだbabelが必要になる可能性があることに注意してください。以下のメソッドがwebpackでサポートされています。</target>
        </trans-unit>
        <trans-unit id="b716503145807543ea3a2f18e364920799166f3a" translate="yes" xml:space="preserve">
          <source>Very detailed debugging info</source>
          <target state="translated">非常に詳細なデバッグ情報</target>
        </trans-unit>
        <trans-unit id="24756aad73cd051a11a3ab3c84b08e6eccd66d67" translate="yes" xml:space="preserve">
          <source>Via the Node.js API</source>
          <target state="translated">Node.js APIを介して</target>
        </trans-unit>
        <trans-unit id="a78ad277616170813560c5fab7aabae8ac9cfb23" translate="yes" xml:space="preserve">
          <source>Vim</source>
          <target state="translated">Vim</target>
        </trans-unit>
        <trans-unit id="5761ff1a7f5b6160ce8e6d3a6a69b9769b16ee3a" translate="yes" xml:space="preserve">
          <source>Vue: &lt;a href=&quot;https://alexjoverm.github.io/2017/07/16/Lazy-load-in-Vue-using-Webpack-s-code-splitting/&quot;&gt;Lazy Load in Vue using Webpack's code splitting&lt;/a&gt;</source>
          <target state="translated">Vue：&lt;a href=&quot;https://alexjoverm.github.io/2017/07/16/Lazy-load-in-Vue-using-Webpack-s-code-splitting/&quot;&gt;Webpackのコード分割を使用したVueでの遅延ロード&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="db3e8c2c2fbe1c9fcd99b8675926cd59a846aa38" translate="yes" xml:space="preserve">
          <source>Want to rapidly generate webpack configuration file for your project requirements with few clicks away.</source>
          <target state="translated">数回クリックするだけで、プロジェクトの要件に合わせたWebpack設定ファイルを素早く生成したいと思います。</target>
        </trans-unit>
        <trans-unit id="3f5d8257134cdb4ea1e1eef0dd093276a302a5ad" translate="yes" xml:space="preserve">
          <source>Warn for dynamic dependencies: &lt;code&gt;wrappedContextCritical: true&lt;/code&gt;.</source>
          <target state="translated">動的依存関係の警告： &lt;code&gt;wrappedContextCritical: true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="201d07914ddb690a7ce7fc96defe98625d72e806" translate="yes" xml:space="preserve">
          <source>Warns to console about attributes from inside the &lt;code&gt;&amp;lt;svg /&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;svg /&amp;gt;&lt;/code&gt; 内からの属性についてコンソールに警告します。</target>
        </trans-unit>
        <trans-unit id="1e2aae0cdb6f3a79d62e669c768545f8953beef6" translate="yes" xml:space="preserve">
          <source>Watch Options</source>
          <target state="translated">時計のオプション</target>
        </trans-unit>
        <trans-unit id="106bff2cd8202eecc0e264527e1aa359ef59b79d" translate="yes" xml:space="preserve">
          <source>Watch and WatchOptions</source>
          <target state="translated">ウォッチとウォッチオプション</target>
        </trans-unit>
        <trans-unit id="2bc4d4d7a4c4d5f9a1769fc308fa26c2a0867f00" translate="yes" xml:space="preserve">
          <source>Watch compilation has been invalidated.</source>
          <target state="translated">時計の編集が無効になりました。</target>
        </trans-unit>
        <trans-unit id="b437f78f9d520f5fcbaf0f0382cb781be53b36aa" translate="yes" xml:space="preserve">
          <source>Watch mode has stopped.</source>
          <target state="translated">ウォッチモードが停止しました。</target>
        </trans-unit>
        <trans-unit id="1cd42ab7e86a7c69fdc818850cdaebf6ab4df744" translate="yes" xml:space="preserve">
          <source>Watch the filesystem for changes</source>
          <target state="translated">ファイルシステムの変更を監視する</target>
        </trans-unit>
        <trans-unit id="95597606870fb7c27f696ca54f1d8fcb4ed539c0" translate="yes" xml:space="preserve">
          <source>WatchIgnorePlugin</source>
          <target state="translated">WatchIgnorePlugin</target>
        </trans-unit>
        <trans-unit id="96d9e027ee25023055aac45ad3d6c069c69e6c19" translate="yes" xml:space="preserve">
          <source>Watching</source>
          <target state="translated">Watching</target>
        </trans-unit>
        <trans-unit id="6d03d61c1bf166452be4ae04b24c13ac9975c1c5" translate="yes" xml:space="preserve">
          <source>We Don't Work Offline Now</source>
          <target state="translated">今はオフラインでは働かない</target>
        </trans-unit>
        <trans-unit id="f430b691523ff1d9375dbaa59f361157ef2f8356" translate="yes" xml:space="preserve">
          <source>We also need to adjust our &lt;code&gt;package.json&lt;/code&gt; file in order to make sure we mark our package as &lt;code&gt;private&lt;/code&gt;, as well as removing the &lt;code&gt;main&lt;/code&gt; entry. This is to prevent an accidental publish of your code.</source>
          <target state="translated">また、パッケージを &lt;code&gt;private&lt;/code&gt; としてマークし、 &lt;code&gt;main&lt;/code&gt; エントリを削除するために、 &lt;code&gt;package.json&lt;/code&gt; ファイルを調整する必要があります。これは、コードが誤って公開されるのを防ぐためです。</target>
        </trans-unit>
        <trans-unit id="36b83254e75e5a19d5c4cfaa006d12f741f4d823" translate="yes" xml:space="preserve">
          <source>We can also use the &lt;code&gt;ProvidePlugin&lt;/code&gt; to expose a single export of a module by configuring it with an &quot;array path&quot; (e.g. &lt;code&gt;[module, child, ...children?]&lt;/code&gt;). So let's imagine we only wanted to provide the &lt;code&gt;join&lt;/code&gt; method from &lt;code&gt;lodash&lt;/code&gt; wherever it's invoked:</source>
          <target state="translated">また、 &lt;code&gt;ProvidePlugin&lt;/code&gt; を使用して、「配列パス」で構成することにより、モジュールの単一のエクスポートを公開することもできます（例： &lt;code&gt;[module, child, ...children?]&lt;/code&gt; ）。したがって、 &lt;code&gt;lodash&lt;/code&gt; から呼び出された場所にある &lt;code&gt;join&lt;/code&gt; メソッドだけを提供したいとしましょう。</target>
        </trans-unit>
        <trans-unit id="db530b33066f02b7472ab75814989f01e865334c" translate="yes" xml:space="preserve">
          <source>We can now see that our &lt;code&gt;main&lt;/code&gt; bundle does not contain &lt;code&gt;vendor&lt;/code&gt; code from &lt;code&gt;node_modules&lt;/code&gt; directory and is down in size to &lt;code&gt;240 bytes&lt;/code&gt;!</source>
          <target state="translated">これで、 &lt;code&gt;main&lt;/code&gt; バンドルに &lt;code&gt;node_modules&lt;/code&gt; ディレクトリの &lt;code&gt;vendor&lt;/code&gt; コードが含まれておらず、サイズが &lt;code&gt;240 bytes&lt;/code&gt; 減少していることがわかります。</target>
        </trans-unit>
        <trans-unit id="fe8c7c24676ac8c961e015d8356f493d6e9b7176" translate="yes" xml:space="preserve">
          <source>We can see that both builds yielded &lt;code&gt;55e79e5927a639d21a1b&lt;/code&gt; in the &lt;code&gt;vendor&lt;/code&gt; bundle's filename.</source>
          <target state="translated">両方のビルドが &lt;code&gt;vendor&lt;/code&gt; バンドルのファイル名で &lt;code&gt;55e79e5927a639d21a1b&lt;/code&gt; を生成したことがわかります。</target>
        </trans-unit>
        <trans-unit id="751dd31f009f8d6497b7e09f7c2379b83804fcb7" translate="yes" xml:space="preserve">
          <source>We can see that the error also contains a reference to the file (&lt;code&gt;print.js&lt;/code&gt;) and line number (2) where the error occurred. This is great because now we know exactly where to look in order to fix the issue.</source>
          <target state="translated">エラーには、エラーが発生したファイル（ &lt;code&gt;print.js&lt;/code&gt; ）と行番号（2）への参照も含まれていることがわかります。問題を解決するためにどこを調べればよいかが正確にわかったので、これは素晴らしいことです。</target>
        </trans-unit>
        <trans-unit id="ca2f28e217702f1ad5e4a98510fd7c1dab1700ed" translate="yes" xml:space="preserve">
          <source>We can see that webpack generates our &lt;code&gt;print.bundle.js&lt;/code&gt; and &lt;code&gt;app.bundle.js&lt;/code&gt; files, which we also specified in our &lt;code&gt;index.html&lt;/code&gt; file. if you open &lt;code&gt;index.html&lt;/code&gt; in your browser, you can see what happens when you click the button.</source>
          <target state="translated">私たちは、WebPACKのが私たち生成することを見ることができる &lt;code&gt;print.bundle.js&lt;/code&gt; をして &lt;code&gt;app.bundle.js&lt;/code&gt; 我々はまた、私たちに指定されたファイル、 &lt;code&gt;index.html&lt;/code&gt; ファイルを。ブラウザで &lt;code&gt;index.html&lt;/code&gt; を開くと、ボタンをクリックするとどうなるかを確認できます。</target>
        </trans-unit>
        <trans-unit id="1a91536621f215bce27491619c8b48f6ef07ef93" translate="yes" xml:space="preserve">
          <source>We can start with this basic webpack configuration:</source>
          <target state="translated">まずはこの基本的なwebpackの設定から始めましょう。</target>
        </trans-unit>
        <trans-unit id="177ca5503ba9b50d48c9680cb6075d126fe313df" translate="yes" xml:space="preserve">
          <source>We encourage you to have source maps enabled in production, as they are useful for debugging as well as running benchmark tests. That said, you should choose one with a fairly quick build speed that's recommended for production use (see &lt;a href=&quot;../configuration/devtool&quot;&gt;&lt;code&gt;devtool&lt;/code&gt;&lt;/a&gt;). For this guide, we'll use the &lt;code&gt;source-map&lt;/code&gt; option in &lt;em&gt;production&lt;/em&gt; as opposed to the &lt;code&gt;inline-source-map&lt;/code&gt; we used in &lt;em&gt;development&lt;/em&gt;:</source>
          <target state="translated">デバッグやベンチマークテストの実行に役立つソースマップを本番環境で有効にすることをお勧めします。とは言っても、本番環境での使用に推奨されるかなり速いビルド速度のものを選択する必要があります（&lt;a href=&quot;../configuration/devtool&quot;&gt; &lt;code&gt;devtool&lt;/code&gt; を&lt;/a&gt;参照）。このガイドでは、&lt;em&gt;開発で&lt;/em&gt;使用した &lt;code&gt;inline-source-map&lt;/code&gt; ではなく、&lt;em&gt;本番&lt;/em&gt;環境で &lt;code&gt;source-map&lt;/code&gt; オプションを使用し&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="282749558ba5da53eeeb6f04c218363bf29d42ee" translate="yes" xml:space="preserve">
          <source>We made the Vagrant box accessible from a static IP, and then made webpack-dev-server publicly accessible so it is reachable from a browser. We then tackled a common problem that VirtualBox doesn't send out filesystem events, causing the server to not reload on file changes.</source>
          <target state="translated">Vagrantボックスを静的IPからアクセスできるようにし、webpack-dev-serverを公開してブラウザからアクセスできるようにしました。次に、VirtualBoxがファイルシステムのイベントを送信しないため、ファイルの変更があってもサーバがリロードしないというよくある問題に取り組みました。</target>
        </trans-unit>
        <trans-unit id="e0be727f5fc53615fcc78dcf536f6d74c3da629c" translate="yes" xml:space="preserve">
          <source>We use &lt;code&gt;ts-loader&lt;/code&gt; in this guide as it makes enabling additional webpack features, such as importing other web assets, a bit easier.</source>
          <target state="translated">このガイドでは、 &lt;code&gt;ts-loader&lt;/code&gt; を使用しています。これにより、他のWebアセットのインポートなど、追加のWebpack機能を少し簡単に有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="835362acb732e8765a43852621862db6316a6aa4" translate="yes" xml:space="preserve">
          <source>We won't go through a full example of how to use this plugin within your projects, but you can read up on &lt;a href=&quot;../concepts/manifest&quot;&gt;the concept page&lt;/a&gt; and the &lt;a href=&quot;caching&quot;&gt;caching guide&lt;/a&gt; to find out how this ties into long term caching.</source>
          <target state="translated">このプラグインをプロジェクト内で使用する方法の完全な例は説明しませんが&lt;a href=&quot;../concepts/manifest&quot;&gt;、コンセプトページ&lt;/a&gt;と&lt;a href=&quot;caching&quot;&gt;キャッシュガイド&lt;/a&gt;を読んで、これが長期キャッシングにどのように関連付けられているかを確認できます。</target>
        </trans-unit>
        <trans-unit id="1ecd172656b0bb7ce4a53fbe55278abe78cbe5dc" translate="yes" xml:space="preserve">
          <source>WebWorkerTemplatePlugin</source>
          <target state="translated">WebWorkerTemplatePlugin</target>
        </trans-unit>
        <trans-unit id="642803d03826095e048310e6f6fdb2336f081224" translate="yes" xml:space="preserve">
          <source>Webpack</source>
          <target state="translated">Webpack</target>
        </trans-unit>
        <trans-unit id="82b6b2e18d79f25873504926b5f944fcf9abaaba" translate="yes" xml:space="preserve">
          <source>Webpack is capable of adding &lt;code&gt;nonce&lt;/code&gt; to all scripts that it loads. To activate the feature set a &lt;code&gt;__webpack_nonce__&lt;/code&gt; variable needs to be included in your entry script. A unique hash based nonce should be generated and provided for each unique page view this is why &lt;code&gt;__webpack_nonce__&lt;/code&gt; is specified in the entry file and not in the configuration. Please note that &lt;code&gt;nonce&lt;/code&gt; should always be a base64-encoded string.</source>
          <target state="translated">Webpackは、ロードするすべてのスクリプトに &lt;code&gt;nonce&lt;/code&gt; を追加できます。機能セットをアクティブにするには、 &lt;code&gt;__webpack_nonce__&lt;/code&gt; 変数をエントリースクリプトに含める必要があります。一意のハッシュベースのナンスが生成され、一意のページビューごとに提供される必要があるため、構成ではなくエントリファイルで &lt;code&gt;__webpack_nonce__&lt;/code&gt; を指定します。 &lt;code&gt;nonce&lt;/code&gt; は常にbase64でエンコードされた文字列でなければならないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="158e95469747971b9e26b9ccc964ebc1f958f27d" translate="yes" xml:space="preserve">
          <source>Webpack is used to compile JavaScript modules. Once &lt;a href=&quot;installation&quot;&gt;installed&lt;/a&gt;, you can interface with webpack either from its &lt;a href=&quot;../api/cli&quot;&gt;CLI&lt;/a&gt; or &lt;a href=&quot;../api/node&quot;&gt;API&lt;/a&gt;. If you're still new to webpack, please read through the &lt;a href=&quot;https://webpack.js.org/concepts&quot;&gt;core concepts&lt;/a&gt; and &lt;a href=&quot;https://webpack.js.org/comparison&quot;&gt;this comparison&lt;/a&gt; to learn why you might use it over the other tools that are out in the community.</source>
          <target state="translated">Webpackは、JavaScriptモジュールのコンパイルに使用されます。一度&lt;a href=&quot;installation&quot;&gt;インストールし&lt;/a&gt;、あなたはそのいずれかからのWebPACKとインタフェースすることができます&lt;a href=&quot;../api/cli&quot;&gt;CLI&lt;/a&gt;または&lt;a href=&quot;../api/node&quot;&gt;API&lt;/a&gt;。まだwebpackを初めて使用する場合は、&lt;a href=&quot;https://webpack.js.org/concepts&quot;&gt;コアコンセプト&lt;/a&gt;と&lt;a href=&quot;https://webpack.js.org/comparison&quot;&gt;この比較&lt;/a&gt;を読んで、コミュニティにある他のツールと比べてなぜそれを使用するのかを理解してください。</target>
        </trans-unit>
        <trans-unit id="c0c5210e932b790099cb080bd655498066252fad" translate="yes" xml:space="preserve">
          <source>Webpack then tries to load the &lt;code&gt;babel&lt;/code&gt; package instead of the &lt;code&gt;babel-loader&lt;/code&gt;.</source>
          <target state="translated">次に、Webpack は &lt;code&gt;babel-loader&lt;/code&gt; ではなく &lt;code&gt;babel&lt;/code&gt; パッケージをロードしようとします。</target>
        </trans-unit>
        <trans-unit id="f93227f09a36564ddcbcc64edc8672d9a999d0d9" translate="yes" xml:space="preserve">
          <source>Webpack's Devtool Source Map</source>
          <target state="translated">Webpack の Devtool ソースマップ</target>
        </trans-unit>
        <trans-unit id="a57d36dd7547d0d01d63f5a0dca33743ac6b0190" translate="yes" xml:space="preserve">
          <source>What does that mean?</source>
          <target state="translated">それはどういう意味なのか?</target>
        </trans-unit>
        <trans-unit id="e23722e1d334532d959d84961060e3ab54e8b4a7" translate="yes" xml:space="preserve">
          <source>What good would these statistics be without some description of the compiled application's actual modules? Each module in the dependency graph is represented by the following structure:</source>
          <target state="translated">コンパイルされたアプリケーションの実際のモジュールの記述がなければ、これらの統計は何の役にも立ちません。依存関係グラフの各モジュールは以下の構造で表されます。</target>
        </trans-unit>
        <trans-unit id="3c405e511522608969dda969a09ff67810928f7b" translate="yes" xml:space="preserve">
          <source>What is a webpack Module</source>
          <target state="translated">webpackモジュールとは</target>
        </trans-unit>
        <trans-unit id="a15063f1f366503c5eca45c22ee9ce5c854143a3" translate="yes" xml:space="preserve">
          <source>What we've essentially done here is tell webpack...</source>
          <target state="translated">私たちが本質的にここで行ったことは、webpackに...</target>
        </trans-unit>
        <trans-unit id="3f6cf47fe8f7eb3ed631b1c9020062f7333087c0" translate="yes" xml:space="preserve">
          <source>What's the reasoning behind this? &lt;code&gt;react&lt;/code&gt; probably won't change as often as your application code. By moving it into a separate chunk this chunk can be cached separately from your app code (assuming you are using chunkhash, records, Cache-Control or other long term cache approach).</source>
          <target state="translated">これの背後にある理由は何ですか？ &lt;code&gt;react&lt;/code&gt; おそらくあなたのアプリケーションコードほど頻繁には変更されません。別のチャンクに移動することで、このチャンクをアプリのコードとは別にキャッシュできます（チャンクハッシュ、レコード、Cache-Control、またはその他の長期キャッシュアプ​​ローチを使用している場合）。</target>
        </trans-unit>
        <trans-unit id="097e7a8a57c079b0550af45266e062d2a4b75f4b" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;lazy&lt;/code&gt; is enabled, the dev-server will only compile the bundle when it gets requested. This means that webpack will not watch any file changes. We call this &lt;strong&gt;lazy mode&lt;/strong&gt;.</source>
          <target state="translated">とき &lt;code&gt;lazy&lt;/code&gt; 有効になっていることが要求されますと、DEV-サーバは、バンドルをコンパイルします。つまり、webpackはファイルの変更を監視しません。これを&lt;strong&gt;レイジーモード&lt;/strong&gt;と呼び&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="a918636379f114af885a0d73833efa42c23d80cd" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;open&lt;/code&gt; is enabled, the dev server will open the browser.</source>
          <target state="translated">ときに &lt;code&gt;open&lt;/code&gt; 有効になっている、のdevのサーバーは、ブラウザを開きます。</target>
        </trans-unit>
        <trans-unit id="936d0ae63cdd310640f2be4edcef55d8a668d108" translate="yes" xml:space="preserve">
          <source>When a page which uses the &lt;code&gt;ChartComponent&lt;/code&gt; is requested, the charting-library-chunk is also requested via &lt;code&gt;&amp;lt;link rel=&quot;preload&quot;&amp;gt;&lt;/code&gt;. Assuming the page-chunk is smaller and finishes faster, the page will be displayed with a &lt;code&gt;LoadingIndicator&lt;/code&gt;, until the already requested &lt;code&gt;charting-library-chunk&lt;/code&gt; finishes. This will give a little load time boost since it only needs one round-trip instead of two. Especially in high-latency environments.</source>
          <target state="translated">&lt;code&gt;ChartComponent&lt;/code&gt; を使用するページがリクエストされると、 &lt;code&gt;&amp;lt;link rel=&quot;preload&quot;&amp;gt;&lt;/code&gt; を介してcharting-library-chunkもリクエストされます。ページチャンクが小さく、より速く終了すると仮定すると、ページは、既に要求された &lt;code&gt;charting-library-chunk&lt;/code&gt; が終了するまで、 &lt;code&gt;LoadingIndicator&lt;/code&gt; で表示されます。ラウンドトリップが2回ではなく1回で済むため、ロード時間が少し長くなります。特に高レイテンシ環境で。</target>
        </trans-unit>
        <trans-unit id="4254af549da477b1173d6e70e64d52344b144aaf" translate="yes" xml:space="preserve">
          <source>When assigning equal names to different split chunks, all vendor modules are placed into a single shared chunk, though it's not recommend since it can result in more code downloaded.</source>
          <target state="translated">異なる分割チャンクに同じ名前を割り当てる場合、すべてのベンダモジュールは単一の共有チャンクに配置されますが、ダウンロードされるコードが多くなる可能性があるため、お勧めできません。</target>
        </trans-unit>
        <trans-unit id="c2a1936d8933244dd718faf821e675520875717c" translate="yes" xml:space="preserve">
          <source>When combining with the &lt;a href=&quot;output#output-library&quot;&gt;&lt;code&gt;output.library&lt;/code&gt;&lt;/a&gt; option: If an array is passed only the last item is exported.</source>
          <target state="translated">&lt;a href=&quot;output#output-library&quot;&gt; &lt;code&gt;output.library&lt;/code&gt; &lt;/a&gt;オプションと組み合わせる場合：配列が渡される場合、最後のアイテムのみがエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="3546bb0ca2be567641a97a2d03578b6e40ea329f" translate="yes" xml:space="preserve">
          <source>When compiling source code with webpack, users can generate a JSON file containing statistics about modules. These statistics can be used to analyze an application's dependency graph as well as to optimize compilation speed. The file is typically generated with the following CLI command:</source>
          <target state="translated">webpackでソースコードをコンパイルすると、ユーザーはモジュールに関する統計情報を含むJSONファイルを生成することができます。これらの統計情報は、コンパイル速度を最適化するためだけでなく、アプリケーションの依存関係グラフを分析するために使用することができます。このファイルは通常、以下のCLIコマンドで生成されます。</target>
        </trans-unit>
        <trans-unit id="713580f1a6d5ae54743a4b9083ebeacf1983bef9" translate="yes" xml:space="preserve">
          <source>When declaring a local classname you can compose a local class from another local classname.</source>
          <target state="translated">ローカルクラス名を宣言すると、別のローカルクラス名からローカルクラスを作成することができます。</target>
        </trans-unit>
        <trans-unit id="7a64d141b958f5e87111733dd5f7d8d676c38709" translate="yes" xml:space="preserve">
          <source>When defining values for &lt;code&gt;process&lt;/code&gt; prefer &lt;code&gt;'process.env.NODE_ENV': JSON.stringify('production')&lt;/code&gt; over &lt;code&gt;process: { env: { NODE_ENV: JSON.stringify('production') } }&lt;/code&gt;. Using the latter will overwrite the &lt;code&gt;process&lt;/code&gt; object which can break compatibility with some modules that expect other values on the process object to be defined.</source>
          <target state="translated">&lt;code&gt;process&lt;/code&gt; 値を定義する場合、プロセスよりも &lt;code&gt;'process.env.NODE_ENV': JSON.stringify('production')&lt;/code&gt; を &lt;code&gt;process: { env: { NODE_ENV: JSON.stringify('production') } }&lt;/code&gt; します：{env：{NODE_ENV：JSON.stringify（ 'production'）}}。後者を使用すると、 &lt;code&gt;process&lt;/code&gt; オブジェクトが上書きされ、プロセスオブジェクトの他の値が定義されることを期待する一部のモジュールとの互換性が失われる可能性があります。</target>
        </trans-unit>
        <trans-unit id="250af6c15c6b77347d259b8cfa2de3ce234b9bd0" translate="yes" xml:space="preserve">
          <source>When developing a plugin for webpack, you might want to know where each hook is called. To learn this, search for &lt;code&gt;hooks.&amp;lt;hook name&amp;gt;.call&lt;/code&gt; across the webpack source</source>
          <target state="translated">webpackのプラグインを開発するとき、各フックがどこで呼び出されるかを知りたい場合があります。これを学ぶには、webpackソース全体で &lt;code&gt;hooks.&amp;lt;hook name&amp;gt;.call&lt;/code&gt; を検索します</target>
        </trans-unit>
        <trans-unit id="eac506339aaf8ca2ceab108281956c6327d3d307" translate="yes" xml:space="preserve">
          <source>When enabled, symlinked resources are resolved to their &lt;em&gt;real&lt;/em&gt; path, not their symlinked location. Note that this may cause module resolution to fail when using tools that symlink packages (like &lt;code&gt;npm link&lt;/code&gt;).</source>
          <target state="translated">有効にすると、シンボリックリンクされたリソースは、シンボリックリンクされた場所ではなく、&lt;em&gt;実際の&lt;/em&gt;パスに解決されます。これにより、パッケージをシンボリックリンクするツール（ &lt;code&gt;npm link&lt;/code&gt; など）を使用すると、モジュール解決が失敗する可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="de4f213b38880204a9cc2ff95ea9d365e1a4a280" translate="yes" xml:space="preserve">
          <source>When executing &lt;code&gt;NODE_ENV=production webpack&lt;/code&gt; in the terminal to build, &lt;code&gt;entry.js&lt;/code&gt; becomes this:</source>
          <target state="translated">ビルドするターミナルで &lt;code&gt;NODE_ENV=production webpack&lt;/code&gt; を実行すると、 &lt;code&gt;entry.js&lt;/code&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="7a0a8c8cee49129be667bdabcc325bc5a1ea3345" translate="yes" xml:space="preserve">
          <source>When importing from an npm package, e.g. &lt;code&gt;import * as D3 from &quot;d3&quot;&lt;/code&gt;, this option will determine which fields in its &lt;code&gt;package.json&lt;/code&gt; are checked. The default values will vary based upon the &lt;a href=&quot;../concepts/targets&quot;&gt;&lt;code&gt;target&lt;/code&gt;&lt;/a&gt; specified in your webpack configuration.</source>
          <target state="translated">npmパッケージからインポートする場合（例： &lt;code&gt;import * as D3 from &quot;d3&quot;&lt;/code&gt; 、このオプションは、 &lt;code&gt;package.json&lt;/code&gt; のどのフィールドをチェックするかを決定します。デフォルト値は、Webpack構成で指定された&lt;a href=&quot;../concepts/targets&quot;&gt; &lt;code&gt;target&lt;/code&gt; &lt;/a&gt;によって異なります。</target>
        </trans-unit>
        <trans-unit id="aac832abcc21fcde37f9dc201dae0be38b70997a" translate="yes" xml:space="preserve">
          <source>When installing a package that will be bundled into your production bundle, you should use &lt;code&gt;npm install --save&lt;/code&gt;. If you're installing a package for development purposes (e.g. a linter, testing libraries, etc.) then you should use &lt;code&gt;npm install --save-dev&lt;/code&gt;. More information can be found in the &lt;a href=&quot;https://docs.npmjs.com/cli/install&quot;&gt;npm documentation&lt;/a&gt;.</source>
          <target state="translated">本番バンドルにバンドルされるパッケージをインストールする場合は、 &lt;code&gt;npm install --save&lt;/code&gt; を使用する必要があります。開発目的でパッケージをインストールする場合（リンター、ライブラリーのテストなど）、 &lt;code&gt;npm install --save-dev&lt;/code&gt; を使用する必要があります。詳細については、&lt;a href=&quot;https://docs.npmjs.com/cli/install&quot;&gt;npmのドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="ebd7d0c9e10b1536745313e0c7501b34e45c3140" translate="yes" xml:space="preserve">
          <source>When installing third party libraries from npm, it is important to remember to install the typing definition for that library. These definitions can be found at &lt;a href=&quot;http://microsoft.github.io/TypeSearch/&quot;&gt;TypeSearch&lt;/a&gt;.</source>
          <target state="translated">npmからサードパーティのライブラリをインストールするときは、そのライブラリの型定義をインストールすることを忘れないでください。これらの定義は&lt;a href=&quot;http://microsoft.github.io/TypeSearch/&quot;&gt;TypeSearchにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="58456700867017ff4232dd40aae854d5f72d63f9" translate="yes" xml:space="preserve">
          <source>When processing modules with webpack, it is important to understand the different module syntaxes -- specifically the &lt;a href=&quot;module-methods&quot;&gt;methods&lt;/a&gt; and &lt;a href=&quot;module-variables&quot;&gt;variables&lt;/a&gt; -- that are supported.</source>
          <target state="translated">webpackでモジュールを処理する場合、サポートされているさまざまなモジュール構文（特に&lt;a href=&quot;module-methods&quot;&gt;メソッド&lt;/a&gt;と&lt;a href=&quot;module-variables&quot;&gt;変数）&lt;/a&gt;を理解することが重要です。</target>
        </trans-unit>
        <trans-unit id="60f74f8cf364bb2c3b358ef9a5c871a34dd697e0" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;false&lt;/code&gt;, the module is not removed from cache, which results in the exception getting thrown only on the first &lt;code&gt;require&lt;/code&gt; call (making it incompatible with node.js).</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; に設定すると、モジュールはキャッシュから削除されない &lt;code&gt;require&lt;/code&gt; 、最初のrequire呼び出しでのみ例外がスローされます（node.jsと互換性がなくなります）。</target>
        </trans-unit>
        <trans-unit id="f25a86f18aa4d9b660bcbd13b61019472052de54" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;true&lt;/code&gt; tells webpack to reduce the size of WASM by changing imports to shorter strings. It mangles module and export names.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; に設定すると、インポートをより短い文字列に変更することで、WASMのサイズを減らすようにwebpackに指示します。モジュールをマングルし、名前をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="3e7756a0e6c1383ff6ce25f15f9104db9b4b9ff2" translate="yes" xml:space="preserve">
          <source>When set to true this option bypasses host checking. THIS IS NOT RECOMMENDED as apps that do not check the host are vulnerable to DNS rebinding attacks.</source>
          <target state="translated">true に設定すると、このオプションはホストチェックをバイパスします。ホストをチェックしないアプリはDNSリバインディング攻撃に対して脆弱なため、これは推奨されません。</target>
        </trans-unit>
        <trans-unit id="8598222c4a511535ba42795fcaa12ff829a8437c" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;target&lt;/code&gt; property is set to &lt;code&gt;webworker&lt;/code&gt;, &lt;code&gt;web&lt;/code&gt;, or left unspecified:</source>
          <target state="translated">場合は &lt;code&gt;target&lt;/code&gt; プロパティがに設定されている &lt;code&gt;webworker&lt;/code&gt; 、 &lt;code&gt;web&lt;/code&gt; 、または未指定：</target>
        </trans-unit>
        <trans-unit id="06701e817af0679d68717f1453f2f36525b99925" translate="yes" xml:space="preserve">
          <source>When the chunk has a name already, each part will get a new name derived from that name. Depending on the value of &lt;code&gt;optimization.splitChunks.hidePathInfo&lt;/code&gt; it will add a key derived from the first module name or a hash of it.</source>
          <target state="translated">チャンクにすでに名前がある場合、各部分はその名前から派生した新しい名前を取得します。 &lt;code&gt;optimization.splitChunks.hidePathInfo&lt;/code&gt; の値に応じて、最初のモジュール名またはそのハッシュから派生したキーを追加します。</target>
        </trans-unit>
        <trans-unit id="1e3fc46744fdb3b1a110fd3c2978521c4e860cb8" translate="yes" xml:space="preserve">
          <source>When the server is started, there will be a message prior to the list of resolved modules:</source>
          <target state="translated">サーバが起動されると、解決済みモジュールの一覧の前にメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="0eaea81b241689b7665ce3045340a1e191fe43f4" translate="yes" xml:space="preserve">
          <source>When the webpack configuration &lt;a href=&quot;../configuration/configuration-types#exporting-a-function&quot;&gt;exports a function&lt;/a&gt;, an &quot;environment&quot; may be passed to it.</source>
          <target state="translated">webpack設定&lt;a href=&quot;../configuration/configuration-types#exporting-a-function&quot;&gt;が関数をエクスポートする&lt;/a&gt;とき、「環境」がそれに渡されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="104fe67f806e89dc0b4cb6167e899e6aaf78d66a" translate="yes" xml:space="preserve">
          <source>When there is no AMD/CommonJS version of the module and you want to include the &lt;code&gt;dist&lt;/code&gt;, you can flag this module in &lt;a href=&quot;../configuration/module#module-noparse&quot;&gt;&lt;code&gt;noParse&lt;/code&gt;&lt;/a&gt;. This will cause webpack to include the module without parsing it or resolving &lt;code&gt;require()&lt;/code&gt; and &lt;code&gt;import&lt;/code&gt; statements. This practice is also used to improve the build performance.</source>
          <target state="translated">AMD / CommonJSバージョンのモジュールがなく、 &lt;code&gt;dist&lt;/code&gt; を含めたい場合は、このモジュールに&lt;a href=&quot;../configuration/module#module-noparse&quot;&gt; &lt;code&gt;noParse&lt;/code&gt; で&lt;/a&gt;フラグを立てることができます。これにより、Webpackはモジュールを解析したり、 &lt;code&gt;require()&lt;/code&gt; および &lt;code&gt;import&lt;/code&gt; ステートメントを解決したりせずにモジュールをインクルードします。この方法は、ビルドのパフォーマンスを向上させるためにも使用されます。</target>
        </trans-unit>
        <trans-unit id="6c3edac4d7e24677449b34a30a3cf2f744e6b21b" translate="yes" xml:space="preserve">
          <source>When this module or dependencies are updated, this module can be disposed and re-evaluated without informing parents. This makes sense if this module has no exports (or exports are updated in another way).</source>
          <target state="translated">このモジュールや依存関係が更新されると、このモジュールは親に通知することなく破棄して再評価することができます。これは、このモジュールがエクスポートを持っていない (または別の方法でエクスポートが更新されている)場合に意味があります。</target>
        </trans-unit>
        <trans-unit id="6a91d92f665575307fbc5e27ed8a9cc8f85d5a48" translate="yes" xml:space="preserve">
          <source>When trying to fulfill the last two conditions, bigger chunks are preferred.</source>
          <target state="translated">最後の2つの条件を満たそうとすると、大きなチャンクが好ましい。</target>
        </trans-unit>
        <trans-unit id="f13ec3e770ee9a2585f9ba44d513c7d97bbea033" translate="yes" xml:space="preserve">
          <source>When used in tandem with &lt;a href=&quot;#output-library&quot;&gt;&lt;code&gt;output.library&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#output-librarytarget&quot;&gt;&lt;code&gt;output.libraryTarget&lt;/code&gt;&lt;/a&gt;, this option allows users to insert comments within the export wrapper. To insert the same comment for each &lt;code&gt;libraryTarget&lt;/code&gt; type, set &lt;code&gt;auxiliaryComment&lt;/code&gt; to a string:</source>
          <target state="translated">並行して使用する場合&lt;a href=&quot;#output-library&quot;&gt; &lt;code&gt;output.library&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#output-librarytarget&quot;&gt; &lt;code&gt;output.libraryTarget&lt;/code&gt; &lt;/a&gt;、このオプションは、ユーザーが輸出ラッパー内にコメントを挿入することができます。各 &lt;code&gt;libraryTarget&lt;/code&gt; タイプに同じコメントを挿入するには、 &lt;code&gt;auxiliaryComment&lt;/code&gt; を文字列に設定します。</target>
        </trans-unit>
        <trans-unit id="fe3acd69f18cf0fa025e30d33b88f225ea5c83d7" translate="yes" xml:space="preserve">
          <source>When used via the CLI, a path to an SSL .pfx file. If used in options, it should be the bytestream of the .pfx file.</source>
          <target state="translated">CLI経由で使用される場合、SSL .pfxファイルへのパスです。オプションで使用される場合は、.pfxファイルのバイストリームでなければなりません。</target>
        </trans-unit>
        <trans-unit id="1c14be284346b2e05f05ffa004de1e194103d2d4" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;https://github.com/webpack/css-loader#css-scope&quot;&gt;local scoped CSS&lt;/a&gt; the module exports the generated identifiers (locals).</source>
          <target state="translated">&lt;a href=&quot;https://github.com/webpack/css-loader#css-scope&quot;&gt;ローカルスコープのCSS&lt;/a&gt;を使用する場合、モジュールは生成された識別子（ローカル）をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="5e52b25343b4e7444f621c3662c930885bf482d3" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; and there are extracted chunks (from &lt;code&gt;ExtractTextPlugin.extract&lt;/code&gt;) in the commons chunk, &lt;code&gt;allChunks&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be set to &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;CommonsChunkPlugin&lt;/code&gt; を使用し、commonsチャンクに抽出されたチャンク（ &lt;code&gt;ExtractTextPlugin.extract&lt;/code&gt; から）がある場合、 &lt;code&gt;allChunks&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定する&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます</target>
        </trans-unit>
        <trans-unit id="d584c7aa7efcdb09381d3f6b9d1482bbb06767a9" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;extends&lt;/code&gt; to extend a configuration which exists in a different package, care must be taken to ensure you don't hit module resolution issues if you are developing with these packages with symlinks (i.e. with &lt;code&gt;npm link&lt;/code&gt; or &lt;code&gt;yarn link&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;extends&lt;/code&gt; を使用して別のパッケージに存在する構成を拡張する場合、これらのパッケージをシンボリックリンクで（つまり、 &lt;code&gt;npm link&lt;/code&gt; または &lt;code&gt;yarn link&lt;/code&gt; ）開発している場合、モジュール解決の問題が発生しないように注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="42a1f70eb012f0ac279351ce1c8ae39dded51ef8" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;libraryTarget: &quot;umd&quot;&lt;/code&gt;, setting:</source>
          <target state="translated">&lt;code&gt;libraryTarget: &quot;umd&quot;&lt;/code&gt; を使用する場合、設定：</target>
        </trans-unit>
        <trans-unit id="d8509cf228c82b867eb33d3fca67143c84f437b4" translate="yes" xml:space="preserve">
          <source>When using &lt;em&gt;inline mode&lt;/em&gt; and you're proxying dev-server, the inline client script does not always know where to connect to. It will try to guess the URL of the server based on &lt;code&gt;window.location&lt;/code&gt;, but if that fails you'll need to use this.</source>
          <target state="translated">&lt;em&gt;インラインモード&lt;/em&gt;を使用していて、dev-serverをプロキシしている場合、インラインクライアントスクリプトは接続先を常に認識しているとは限りません。これは &lt;code&gt;window.location&lt;/code&gt; に基づいてサーバーのURLを推測しようとしますが、失敗した場合はこれを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="6a8fb2fcc0f83ebd6a8e17c48a53fa8fbfea74f0" translate="yes" xml:space="preserve">
          <source>When using &lt;em&gt;inline mode&lt;/em&gt;, the console in your DevTools will show you messages e.g. before reloading, before an error or when Hot Module Replacement is enabled. This may be too verbose.</source>
          <target state="translated">&lt;em&gt;インラインモード&lt;/em&gt;を使用している場合、DevToolsのコンソールには、リロード前、エラー前、またはホットモジュール交換が有効な場合などにメッセージが表示されます。これは冗長すぎるかもしれません。</target>
        </trans-unit>
        <trans-unit id="e77908eaf537ea00b0400a7f0669c1771a2c2d16" translate="yes" xml:space="preserve">
          <source>When using CommonJS you need to update dependencies manually by using &lt;code&gt;require()&lt;/code&gt; in the &lt;code&gt;callback&lt;/code&gt;. Omitting the &lt;code&gt;callback&lt;/code&gt; doesn't make sense here.</source>
          <target state="translated">CommonJSを使用 &lt;code&gt;require()&lt;/code&gt; は、 &lt;code&gt;callback&lt;/code&gt; でrequire（）を使用して依存関係を手動で更新する必要があります。ここでは、 &lt;code&gt;callback&lt;/code&gt; を省略しても意味がありません。</target>
        </trans-unit>
        <trans-unit id="2d1b2ed5e0a1638010c1de9b40f0ed9b77d94cd9" translate="yes" xml:space="preserve">
          <source>When using ESM &lt;code&gt;import&lt;/code&gt; all imported symbols from &lt;code&gt;dependencies&lt;/code&gt; are automatically updated. Note: The dependency string must match exactly with the &lt;code&gt;from&lt;/code&gt; string in the &lt;code&gt;import&lt;/code&gt;. In some cases &lt;code&gt;callback&lt;/code&gt; can even be omitted. Using &lt;code&gt;require()&lt;/code&gt; in the &lt;code&gt;callback&lt;/code&gt; doesn't make sense here.</source>
          <target state="translated">ESM &lt;code&gt;import&lt;/code&gt; を使用すると、 &lt;code&gt;dependencies&lt;/code&gt; からインポートされたすべてのシンボルが自動的に更新されます。注：依存関係の文字列は、 &lt;code&gt;import&lt;/code&gt; &lt;code&gt;from&lt;/code&gt; 文字列と正確に一致する必要があります。場合によっては、 &lt;code&gt;callback&lt;/code&gt; を省略できます。 &lt;code&gt;callback&lt;/code&gt; で &lt;code&gt;require()&lt;/code&gt; を使用しても、ここでは意味がありません。</target>
        </trans-unit>
        <trans-unit id="1fa046a03cd02035f2257c2025e95544e29659a3" translate="yes" xml:space="preserve">
          <source>When using Webpack Dev Server with the Node.js API, don't put the dev server options on the webpack config object. Instead, pass them as a second parameter upon creation. For example:</source>
          <target state="translated">Node.js API で Webpack Dev Server を使用する場合、dev server のオプションを webpack config オブジェクトに設定しないでください。代わりに、作成時に2番目のパラメータとして渡します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="6a766071a3193d76645f623381de365a55ccca2a" translate="yes" xml:space="preserve">
          <source>When using a configuration file that exports a &lt;code&gt;Function&lt;/code&gt;, users of &lt;code&gt;webpack-cli&lt;/code&gt; have become accustom to the function signature:</source>
          <target state="translated">&lt;code&gt;Function&lt;/code&gt; をエクスポートする設定ファイルを使用する場合、 &lt;code&gt;webpack-cli&lt;/code&gt; のユーザーはfunctionシグネチャに慣れています。</target>
        </trans-unit>
        <trans-unit id="310b24f99340893cb335c1ec87c6e0254c3bbfd0" translate="yes" xml:space="preserve">
          <source>When using a function, the same options are available camel-cased via the &lt;code&gt;info&lt;/code&gt; parameter:</source>
          <target state="translated">関数を使用する場合、 &lt;code&gt;info&lt;/code&gt; パラメータを使用して、キャメルケースで同じオプションを使用できます。</target>
        </trans-unit>
        <trans-unit id="919345ad6e389eced39029048b259a4cce500f9f" translate="yes" xml:space="preserve">
          <source>When using automatic compilation of your code, you could run into issues when saving your files. Some editors have a &quot;safe write&quot; feature that can potentially interfere with recompilation.</source>
          <target state="translated">コードの自動コンパイルを使用している場合、ファイルを保存する際に問題が発生する可能性があります。エディタによっては、再コンパイルを妨げる可能性のある &quot;安全な書き込み &quot;機能があります。</target>
        </trans-unit>
        <trans-unit id="3863f9978c0aa732f4c61cc2792a7f1e3151450e" translate="yes" xml:space="preserve">
          <source>When using dots in your path (common with Angular), you may need to use the &lt;code&gt;disableDotRule&lt;/code&gt;:</source>
          <target state="translated">パスでドットを使用する場合（Angularと共通）、 &lt;code&gt;disableDotRule&lt;/code&gt; を使用する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="8761434d42f3a9b76e21d7ed21d75e64db995149" translate="yes" xml:space="preserve">
          <source>When using multiple compilations the following tools can help:</source>
          <target state="translated">複数のコンパイルを使用する場合は、以下のツールが役立ちます。</target>
        </trans-unit>
        <trans-unit id="5c9f9461d94f164d19f38f901fe893ed8dd5d108" translate="yes" xml:space="preserve">
          <source>When using multiple conditions, all conditions must match.</source>
          <target state="translated">複数の条件を使用する場合は、すべての条件が一致している必要があります。</target>
        </trans-unit>
        <trans-unit id="dd0cc2f8465f531bd6706c4a0561dc824762abfc" translate="yes" xml:space="preserve">
          <source>When using the &lt;a href=&quot;../plugins/extract-text-webpack-plugin&quot;&gt;&lt;code&gt;ExtractTextWebpackPlugin&lt;/code&gt;&lt;/a&gt;, use &lt;code&gt;[contenthash]&lt;/code&gt; to obtain a hash of the extracted file (neither &lt;code&gt;[hash]&lt;/code&gt; nor &lt;code&gt;[chunkhash]&lt;/code&gt; work).</source>
          <target state="translated">&lt;a href=&quot;../plugins/extract-text-webpack-plugin&quot;&gt; &lt;code&gt;ExtractTextWebpackPlugin&lt;/code&gt; &lt;/a&gt;を使用する場合は、 &lt;code&gt;[contenthash]&lt;/code&gt; を使用して、抽出されたファイルのハッシュを取得します（ &lt;code&gt;[hash]&lt;/code&gt; も &lt;code&gt;[chunkhash]&lt;/code&gt; も機能しません）。</target>
        </trans-unit>
        <trans-unit id="87f281f1720ce6c08dcd03d5e9cd497de40e5c97" translate="yes" xml:space="preserve">
          <source>When using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History&quot;&gt;HTML5 History API&lt;/a&gt;, the &lt;code&gt;index.html&lt;/code&gt; page will likely have to be served in place of any &lt;code&gt;404&lt;/code&gt; responses. Enable this by passing:</source>
          <target state="translated">使用する場合は&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History&quot;&gt;HTML5履歴APIを&lt;/a&gt;、 &lt;code&gt;index.html&lt;/code&gt; にページがおそらくいずれかの場所で提供しなければならないであろう &lt;code&gt;404&lt;/code&gt; の応答。これを有効にするには：</target>
        </trans-unit>
        <trans-unit id="276c7019670e4d400db3de358930e2316c327086" translate="yes" xml:space="preserve">
          <source>When using the &lt;a href=&quot;plugins/compiler#multicompiler&quot;&gt;&lt;code&gt;MultiCompiler&lt;/code&gt;&lt;/a&gt;, a &lt;code&gt;MultiStats&lt;/code&gt; instance is returned that fulfills the same interface as &lt;code&gt;stats&lt;/code&gt;, i.e. the methods described below.</source>
          <target state="translated">使用する場合&lt;a href=&quot;plugins/compiler#multicompiler&quot;&gt; &lt;code&gt;MultiCompiler&lt;/code&gt; を&lt;/a&gt;、 &lt;code&gt;MultiStats&lt;/code&gt; のインスタンスを満たすと同じインターフェイスことが返される &lt;code&gt;stats&lt;/code&gt; 、すなわち方法は、以下に記載しました。</target>
        </trans-unit>
        <trans-unit id="1c7fbdbf018a042f288bca0480aac1a0dd935def" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;script-loader&lt;/code&gt;, the module is added as a string to the bundle. It is not minimized by &lt;code&gt;webpack&lt;/code&gt;, so use a minimized version. There is also no &lt;code&gt;devtool&lt;/code&gt; support for libraries added by this loader.</source>
          <target state="translated">&lt;code&gt;script-loader&lt;/code&gt; を使用する場合、モジュールは文字列としてバンドルに追加されます。 &lt;code&gt;webpack&lt;/code&gt; で最小化されていないため、最小化バージョンを使用してください。このローダーによって追加されたライブラリの &lt;code&gt;devtool&lt;/code&gt; サポートもありません。</target>
        </trans-unit>
        <trans-unit id="35bcd6894584cf84c4bbd4553695b7e117ff914a" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;uglifyjs-webpack-plugin&lt;/code&gt; you must provide the &lt;code&gt;sourceMap: true&lt;/code&gt; option to enable SourceMap support.</source>
          <target state="translated">&lt;code&gt;uglifyjs-webpack-plugin&lt;/code&gt; を使用する場合、SourceMapサポートを有効にするには、 &lt;code&gt;sourceMap: true&lt;/code&gt; オプションを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="97233d852aa30f2553ea2f85b6692bafe80493d6" translate="yes" xml:space="preserve">
          <source>When using the JetBrains WebStorm IDE, you may find that saving changed files does not trigger the watcher as you might expect. Try disabling the &lt;code&gt;safe write&lt;/code&gt; option in the settings, which determines whether files are saved to a temporary location first before the originals are overwritten: uncheck &lt;code&gt;File &amp;gt; Settings... &amp;gt; System Settings &amp;gt; Use &quot;safe write&quot; (save changes to a temporary file first)&lt;/code&gt;.</source>
          <target state="translated">JetBrains WebStorm IDEを使用している場合、変更されたファイルを保存しても、期待どおりにウォッチャーがトリガーされないことがあります。設定で &lt;code&gt;safe write&lt;/code&gt; オプションを無効にしてみてください。これにより、元の &lt;code&gt;File &amp;gt; Settings... &amp;gt; System Settings &amp;gt; Use &quot;safe write&quot; (save changes to a temporary file first)&lt;/code&gt; が上書きされる前にファイルが一時的な場所に保存されるかどうかが決まります。ファイル&amp;gt;設定...&amp;gt;システム設定&amp;gt; [安全な書き込み]をオフにします（変更を一時ファイルに保存します）最初に）。</target>
        </trans-unit>
        <trans-unit id="56b52754e7ad80111717977869ce23013cb7a6ec" translate="yes" xml:space="preserve">
          <source>When using the Node API, you can also pass plugins via the &lt;code&gt;plugins&lt;/code&gt; property in the configuration.</source>
          <target state="translated">Node APIを使用する場合、構成の &lt;code&gt;plugins&lt;/code&gt; プロパティを介してプラグインを渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="fdfe4d1930f53e0d9cfa9c220feace784474da21" translate="yes" xml:space="preserve">
          <source>When using the loader via a &lt;code&gt;require&lt;/code&gt; query string you may specify one of two types; a loader name, or a function index.</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; クエリ文字列を介してローダーを使用する場合、2つのタイプのいずれかを指定できます。ローダー名、または関数インデックス。</target>
        </trans-unit>
        <trans-unit id="2ae702c3304830e5429bd20f4a649b33c4fb04db" translate="yes" xml:space="preserve">
          <source>When using the webpack CLI, the &lt;code&gt;--display-optimization-bailout&lt;/code&gt; flag will display bailout reasons. When using the webpack config, just add the following to the &lt;code&gt;stats&lt;/code&gt; object:</source>
          <target state="translated">webpack CLIを使用する場合、-display &lt;code&gt;--display-optimization-bailout&lt;/code&gt; フラグは救済理由を表示します。webpack設定を使用する場合は、以下を &lt;code&gt;stats&lt;/code&gt; オブジェクトに追加するだけです。</target>
        </trans-unit>
        <trans-unit id="004d9ee41f05aa17b7744c631ce51c54f3d420a9" translate="yes" xml:space="preserve">
          <source>When using this option, an empty &lt;code&gt;output.library&lt;/code&gt; will result in a broken output bundle.</source>
          <target state="translated">このオプションを使用する場合、 &lt;code&gt;output.library&lt;/code&gt; が空の場合、出力バンドルが破損します。</target>
        </trans-unit>
        <trans-unit id="e896d01d12e1e189dc9114001aad48b3c763a86e" translate="yes" xml:space="preserve">
          <source>When using this option, an empty &lt;code&gt;output.library&lt;/code&gt; will result in no assignment.</source>
          <target state="translated">このオプションを使用する場合、 &lt;code&gt;output.library&lt;/code&gt; が空の場合、割り当ては行われません。</target>
        </trans-unit>
        <trans-unit id="db9f8cc21f6fd8bc5f78e4c898c05511d76c2ca3" translate="yes" xml:space="preserve">
          <source>When using with transpiling loaders (like &lt;code&gt;babel-loader&lt;/code&gt;), make sure they are in correct order (bottom to top). Otherwise files will be checked after being processed by &lt;code&gt;babel-loader&lt;/code&gt;</source>
          <target state="translated">トランスパイルローダー（ &lt;code&gt;babel-loader&lt;/code&gt; など）を使用する場合は、正しい順序（下から上）になっていることを確認してください。そうでなければ、ファイルは &lt;code&gt;babel-loader&lt;/code&gt; によって処理された後にチェックされます</target>
        </trans-unit>
        <trans-unit id="44264ff8810f39437b3ac96c0de9a14c153fd7ee" translate="yes" xml:space="preserve">
          <source>When webpack bundles your source code, it can become difficult to track down errors and warnings to their original location. For example, if you bundle three source files (&lt;code&gt;a.js&lt;/code&gt;, &lt;code&gt;b.js&lt;/code&gt;, and &lt;code&gt;c.js&lt;/code&gt;) into one bundle (&lt;code&gt;bundle.js&lt;/code&gt;) and one of the source files contains an error, the stack trace will simply point to &lt;code&gt;bundle.js&lt;/code&gt;. This isn't always helpful as you probably want to know exactly which source file the error came from.</source>
          <target state="translated">webpackがソースコードをバンドルすると、エラーと警告を元の場所に追跡することが困難になる可能性があります。たとえば、3つのソースファイル（ &lt;code&gt;a.js&lt;/code&gt; 、 &lt;code&gt;b.js&lt;/code&gt; 、および &lt;code&gt;c.js&lt;/code&gt; ）を1つのバンドル（ &lt;code&gt;bundle.js&lt;/code&gt; ）にバンドルし、ソースファイルの1つにエラーが含まれている場合、スタックトレースは単に &lt;code&gt;bundle.js&lt;/code&gt; 指します。 js。エラーの原因となったソースファイルを正確に知りたいので、これは必ずしも役立つとは限りません。</target>
        </trans-unit>
        <trans-unit id="f46f5ae2930894ac4decd988b473259db99c97b8" translate="yes" xml:space="preserve">
          <source>When webpack processes your application, it starts from a list of modules defined on the command line or in its config file. Starting from these &lt;em&gt;entry points&lt;/em&gt;, webpack recursively builds a &lt;em&gt;dependency graph&lt;/em&gt; that includes every module your application needs, then packages all of those modules into a small number of &lt;em&gt;bundles&lt;/em&gt; - often, just one - to be loaded by the browser.</source>
          <target state="translated">webpackがアプリケーションを処理するとき、コマンドラインまたはその構成ファイルで定義されたモジュールのリストから開始します。これらの&lt;em&gt;エントリポイント&lt;/em&gt;から始めて、webpack は、アプリケーションに必要なすべてのモジュールを含む&lt;em&gt;依存関係グラフ&lt;/em&gt;を再帰的に構築し、それらのすべてのモジュールを少数の&lt;em&gt;バンドル&lt;/em&gt;（多くの場合1つ）にパッケージ化して、ブラウザーでロードします。</target>
        </trans-unit>
        <trans-unit id="aef11ccc66d1ab692a1827836ba47687bb99f74f" translate="yes" xml:space="preserve">
          <source>When you exclude &lt;code&gt;node_modules&lt;/code&gt; from being run through the babel-loader, babel-minify optimizations are not applied to the excluded files as it doesn't pass through the minifier.</source>
          <target state="translated">あなたは除外した場合 &lt;code&gt;node_modules&lt;/code&gt; をバベル・ローダーを介して実行されることから、それはminifierを通過しないよう、バベル-縮小化の最適化は除外されたファイルには適用されません。</target>
        </trans-unit>
        <trans-unit id="a7ddbe37af4e8529934dbc374d5393577cf53904" translate="yes" xml:space="preserve">
          <source>When you open &lt;code&gt;index.html&lt;/code&gt; and look at your console in your developer tools, you should be able to see your imported data being logged to the console!</source>
          <target state="translated">&lt;code&gt;index.html&lt;/code&gt; を開いて開発者ツールでコンソールを見ると、インポートされたデータがコンソールに記録されているのを確認できるはずです。</target>
        </trans-unit>
        <trans-unit id="f46663d990dfa702b8fa81974dab2190809ce73e" translate="yes" xml:space="preserve">
          <source>When you use the babel-loader with webpack, the code generated by webpack for the module system doesn't go through the loader and is not optimized by babel-minify.</source>
          <target state="translated">webpackでbabel-loaderを使用した場合、webpackで生成されたモジュールシステム用のコードはローダーを経由せず、babel-minifyで最適化されません。</target>
        </trans-unit>
        <trans-unit id="080e8f4a6d7029364d0c1220731365b8161ca200" translate="yes" xml:space="preserve">
          <source>Whenever the &lt;code&gt;identifier&lt;/code&gt; is encountered as free variable in a module, the &lt;code&gt;module&lt;/code&gt; is loaded automatically and the &lt;code&gt;identifier&lt;/code&gt; is filled with the exports of the loaded &lt;code&gt;module&lt;/code&gt; (of &lt;code&gt;property&lt;/code&gt; in order to support named exports).</source>
          <target state="translated">たび &lt;code&gt;identifier&lt;/code&gt; モジュールに自由変数として検出され、 &lt;code&gt;module&lt;/code&gt; 自動的にロードされ、 &lt;code&gt;identifier&lt;/code&gt; ロードされたの輸出で満たされている &lt;code&gt;module&lt;/code&gt; （の &lt;code&gt;property&lt;/code&gt; という名前の輸出を支援するために）。</target>
        </trans-unit>
        <trans-unit id="cc25856f57e27ee7b1d7d3124aa6b4a5336189b8" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;[type]&lt;/code&gt; is one of the three resolvers mention above, specified as:</source>
          <target state="translated">どこ &lt;code&gt;[type]&lt;/code&gt; として指定された、上記の言及3つのレゾルバのいずれかです。</target>
        </trans-unit>
        <trans-unit id="79ebb1900c58b27bcf1a37c17fdac56e056052ad" translate="yes" xml:space="preserve">
          <source>Whether comments shall be extracted to a separate file, (see &lt;a href=&quot;https://github.com/webpack/webpack/commit/71933e979e51c533b432658d5e37917f9e71595a&quot;&gt;details&lt;/a&gt; (&lt;code&gt;webpack &amp;gt;= 2.3.0&lt;/code&gt;)</source>
          <target state="translated">コメントを別のファイルに抽出するかどうか（詳細を&lt;a href=&quot;https://github.com/webpack/webpack/commit/71933e979e51c533b432658d5e37917f9e71595a&quot;&gt;参照&lt;/a&gt;（ &lt;code&gt;webpack &amp;gt;= 2.3.0&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="203a35ccffd8ac25f845fb1d624ed57b1f9e0ac8" translate="yes" xml:space="preserve">
          <source>Whether comments shall be extracted to a separate file, (see &lt;a href=&quot;https://github.com/webpack/webpack/commit/71933e979e51c533b432658d5e37917f9e71595a&quot;&gt;details&lt;/a&gt;). By default extract only comments using &lt;code&gt;/^\**!|@preserve|@license|@cc_on/&lt;/code&gt; regexp condition and remove remaining comments. If the original file is named &lt;code&gt;foo.js&lt;/code&gt;, then the comments will be stored to &lt;code&gt;foo.js.LICENSE&lt;/code&gt;. The &lt;code&gt;terserOptions.output.comments&lt;/code&gt; option specifies whether the comment will be preserved, i.e. it is possible to preserve some comments (e.g. annotations) while extracting others or even preserving comments that have been extracted.</source>
          <target state="translated">コメントを別のファイルに抽出するかどうか（詳細を&lt;a href=&quot;https://github.com/webpack/webpack/commit/71933e979e51c533b432658d5e37917f9e71595a&quot;&gt;参照&lt;/a&gt;）。デフォルトでは、 &lt;code&gt;/^\**!|@preserve|@license|@cc_on/&lt;/code&gt; regexp条件を使用してコメントのみを抽出し、残りのコメントを削除します。元のファイルの名前が &lt;code&gt;foo.js&lt;/code&gt; の場合、コメントは &lt;code&gt;foo.js.LICENSE&lt;/code&gt; に保存されます。 &lt;code&gt;terserOptions.output.comments&lt;/code&gt; のコメントはつまりは抽出されたコメントを他の人を抽出したり、保存しながら、いくつかのコメント（例えば注釈）を維持することが可能で、保存するかどうかのオプションを指定します。</target>
        </trans-unit>
        <trans-unit id="e9b17f79f6e341bfd915b100e6b6f6a8cf3abdcb" translate="yes" xml:space="preserve">
          <source>Whether to delete the original assets or not</source>
          <target state="translated">元の資産を削除するかどうか</target>
        </trans-unit>
        <trans-unit id="40e41ac9d28aeb3dfb199e893fd052686b782a72" translate="yes" xml:space="preserve">
          <source>Whether to require to use an extension for modules (e.g. loaders). Default:</source>
          <target state="translated">モジュール (ローダーなど)に拡張機能を使用することを要求するかどうか。デフォルト。</target>
        </trans-unit>
        <trans-unit id="899c5644850b9f680a11930564518fdc917caefd" translate="yes" xml:space="preserve">
          <source>Whether to resolve symlinks to their symlinked location.</source>
          <target state="translated">シンボリックリンクをそのシンボリックリンクされた場所に解決するかどうか。</target>
        </trans-unit>
        <trans-unit id="acb77c7ff920751a5556066d72033f877d131b9c" translate="yes" xml:space="preserve">
          <source>While loaders are used to transform certain types of modules, plugins can be leveraged to perform a wider range of tasks like bundle optimization, asset management and injection of environment variables.</source>
          <target state="translated">ローダは特定のタイプのモジュールを変換するために使用されますが、プラグインはバンドルの最適化、アセット管理、環境変数の注入など、より広範囲のタスクを実行するために活用することができます。</target>
        </trans-unit>
        <trans-unit id="d7463f4dddeb6f0e9da8e1c089bc6656e4667d6e" translate="yes" xml:space="preserve">
          <source>While merging chunks, webpack will try to identify those that have duplicate modules and merge them first. Nothing will be merged into the entry chunk, so as not to impact initial page loading time. Here's a small example:</source>
          <target state="translated">チャンクをマージしている間、webpack は重複したモジュールを持っているものを識別し、それらを最初にマージしようとします。初期ページの読み込み時間に影響を与えないように、何もエントリチャンクにマージされません。ここに小さな例があります。</target>
        </trans-unit>
        <trans-unit id="9f260e047f557f0cc285e7fb1ad3a397bfc9d1d3" translate="yes" xml:space="preserve">
          <source>While most users can get away with just using the CLI along with a configuration file, more fine-grained control of the compilation can be achieved via the Node interface. This includes passing multiple configurations, programmatically running or watching, and collecting stats.</source>
          <target state="translated">ほとんどのユーザは設定ファイルと一緒にCLIを使用するだけでなんとかなりますが、 コンパイルのより細かい制御はNodeインタフェースを介して達成することができます。これには、複数の設定を渡したり、プログラムで実行したり監視したり、統計情報を収集したりすることが含まれます。</target>
        </trans-unit>
        <trans-unit id="618a6129c7273b47da7b88dc7f09c407247264e4" translate="yes" xml:space="preserve">
          <source>While the data this comments can provide is very useful during development when reading the generated code, it &lt;strong&gt;should not&lt;/strong&gt; be used in production.</source>
          <target state="translated">このコメントが提供できるデータは、生成されたコードを読み取る開発時に非常に役立ちますが、本番&lt;strong&gt;環境では&lt;/strong&gt;使用し&lt;strong&gt;ない&lt;/strong&gt;で&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="394aa1bfc8d586082549d37618366c424d0e5ade" translate="yes" xml:space="preserve">
          <source>While these short hand methods are nice, we usually recommend just using the configuration as it's better to understand exactly what is being done for you in both cases. The configuration also gives you more control on fine tuning other options within both plugins.</source>
          <target state="translated">これらの手短な方法も良いですが、通常はコンフィグレーションだけを使うことをお勧めします。設定はまた、両方のプラグイン内の他のオプションを微調整するためのより多くのコントロールを提供します。</target>
        </trans-unit>
        <trans-unit id="220c801a72c608bf89df64387e02e35dd12b5cc0" translate="yes" xml:space="preserve">
          <source>While they are technically feasible, &lt;strong&gt;the following practices should be avoided&lt;/strong&gt;:</source>
          <target state="translated">技術的には実現可能ですが&lt;strong&gt;、次のような行為は避けて&lt;/strong&gt;ください。</target>
        </trans-unit>
        <trans-unit id="3bc43142ff2adf0fed05e4f93e2b864229f2c73b" translate="yes" xml:space="preserve">
          <source>While we will separate the &lt;em&gt;production&lt;/em&gt; and &lt;em&gt;development&lt;/em&gt; specific bits out, note that we'll still maintain a &quot;common&quot; configuration to keep things DRY. In order to merge these configurations together, we'll use a utility called &lt;a href=&quot;https://github.com/survivejs/webpack-merge&quot;&gt;&lt;code&gt;webpack-merge&lt;/code&gt;&lt;/a&gt;. With the &quot;common&quot; configuration in place, we won't have to duplicate code within the environment-specific configurations.</source>
          <target state="translated">&lt;em&gt;プロダクション&lt;/em&gt;と&lt;em&gt;開発の&lt;/em&gt;特定のビットを分離しますが、物事をドライに保つために「共通の」構成を維持することに注意してください。これらの設定をマージするために、&lt;a href=&quot;https://github.com/survivejs/webpack-merge&quot;&gt; &lt;code&gt;webpack-merge&lt;/code&gt; &lt;/a&gt;と呼ばれるユーティリティを使用します。「共通の」構成が整っているので、環境固有の構成内でコードを複製する必要はありません。</target>
        </trans-unit>
        <trans-unit id="33e5ea407a7fb8346158cdb3db478357d3de7403" translate="yes" xml:space="preserve">
          <source>While webpack 5 is likely to come with a CSS minimizer built-in, with webpack 4 you need to bring your own. To minify the output, use a plugin like &lt;a href=&quot;https://github.com/NMFR/optimize-css-assets-webpack-plugin&quot;&gt;optimize-css-assets-webpack-plugin&lt;/a&gt;. Setting &lt;code&gt;optimization.minimizer&lt;/code&gt; overrides the defaults provided by webpack, so make sure to also specify a JS minimizer:</source>
          <target state="translated">Webpack 5にはCSSミニマイザーが組み込まれている可能性が高いですが、webpack 4では独自のものを用意する必要があります。出力を縮小するには、&lt;a href=&quot;https://github.com/NMFR/optimize-css-assets-webpack-plugin&quot;&gt;optimize-css-assets-webpack-pluginなどのプラグインを使用します&lt;/a&gt;。設定 &lt;code&gt;optimization.minimizer&lt;/code&gt; することのWebPACKが提供するデフォルトを上書きしますので、またJSの最小化を指定してください：</target>
        </trans-unit>
        <trans-unit id="d1aa8b232efdd93b632345393245511271349dab" translate="yes" xml:space="preserve">
          <source>While webpack supports multiple module syntaxes, we recommend following a single syntax for consistency and to avoid odd behaviors/bugs. Here's &lt;a href=&quot;https://github.com/webpack/webpack.js.org/issues/552&quot;&gt;one example&lt;/a&gt; of mixing ES6 and CommonJS, however there are surely others.</source>
          <target state="translated">webpackは複数のモジュール構文をサポートしていますが、一貫性を保ち、奇妙な動作やバグを回避するために、単一の構文に従うことをお勧めします。ここだ&lt;a href=&quot;https://github.com/webpack/webpack.js.org/issues/552&quot;&gt;一例&lt;/a&gt; ES6とCommonJSを混合するが、しかし、確かに他の人があります。</target>
        </trans-unit>
        <trans-unit id="2b59ea3340e8a9f13a9b795729f77e661ab41f51" translate="yes" xml:space="preserve">
          <source>While writing your code, you may have already added many code split points to load stuff on demand. After compiling you might notice that some chunks are too small - creating larger HTTP overhead. Luckily, this plugin can post-process your chunks by merging them.</source>
          <target state="translated">コードを書いている間に、要求に応じて何かをロードするために、すでに多くのコード分割ポイントを追加しているかもしれません。コンパイル後、いくつかのチャンクが小さすぎることに気づくかもしれません。幸いにも、このプラグインはチャンクをマージすることで後処理を行うことができます。</target>
        </trans-unit>
        <trans-unit id="21e2caea4476d26af34541ca7c909c7ff2fa4a7f" translate="yes" xml:space="preserve">
          <source>Why</source>
          <target state="translated">Why</target>
        </trans-unit>
        <trans-unit id="01bb3cc1876bfa59c8d1a9e7c71fc42eb2e30d27" translate="yes" xml:space="preserve">
          <source>Why:</source>
          <target state="translated">Why:</target>
        </trans-unit>
        <trans-unit id="0cb5dd4802cbd5e1f4424e1f24a53406f192c8c5" translate="yes" xml:space="preserve">
          <source>Will produce the following URL:</source>
          <target state="translated">以下のURLを生成します。</target>
        </trans-unit>
        <trans-unit id="33d8d326d6e4611e0a87cfaaea2feefed77ccd63" translate="yes" xml:space="preserve">
          <source>Window: available trough the &lt;code&gt;window&lt;/code&gt; object, in the browser (&lt;code&gt;libraryTarget:'window'&lt;/code&gt;).</source>
          <target state="translated">ウィンドウ：ブラウザーで、 &lt;code&gt;window&lt;/code&gt; オブジェクトを &lt;code&gt;libraryTarget:'window'&lt;/code&gt; 使用できます（libraryTarget： 'window'）。</target>
        </trans-unit>
        <trans-unit id="444c4a26fea99b453258d90271520addbdddd9d9" translate="yes" xml:space="preserve">
          <source>Windows Paths</source>
          <target state="translated">窓の通り道</target>
        </trans-unit>
        <trans-unit id="da613a4c8d9ac0d530d7b6f4b1027eff5b02dc20" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;../guides/code-splitting&quot;&gt;Code Splitting&lt;/a&gt;, multiple child chunks of an entry chunk can have common dependencies. To prevent duplication these can be moved into the parent. This reduces overall size, but does have a negative effect on the initial load time. If it is expected that users will need to download many sibling chunks, i.e. children of the entry chunk, then this should improve load time overall.</source>
          <target state="translated">では&lt;a href=&quot;../guides/code-splitting&quot;&gt;コード分割&lt;/a&gt;、エントリーチャンクの複数の子のチャンクは、共通の依存関係を持つことができます。重複を防ぐために、これらを親に移動できます。これにより全体のサイズは小さくなりますが、初期ロード時間に悪影響があります。ユーザーが多くの兄弟チャンク、つまりエントリチャンクの子をダウンロードする必要があることが予想される場合、これにより全体のロード時間が改善されます。</target>
        </trans-unit>
        <trans-unit id="bbd80a59681363399f6dd172be13e509a8f7ad11" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;:local&lt;/code&gt; (without brackets) local mode can be switched on for this selector. &lt;code&gt;:global(.className)&lt;/code&gt; can be used to declare an explicit global selector. With &lt;code&gt;:global&lt;/code&gt; (without brackets) global mode can be switched on for this selector.</source>
          <target state="translated">&lt;code&gt;:local&lt;/code&gt; （括弧なし）ローカルモードは、この選択のために切り替えることができます。 &lt;code&gt;:global(.className)&lt;/code&gt; を使用して、明示的なグローバルセレクターを宣言できます。で &lt;code&gt;:global&lt;/code&gt; （括弧なし）グローバルモードは、このセレクタのために切り替えることができます。</target>
        </trans-unit>
        <trans-unit id="5b225ce3e980419fcedac5c168209f1893afb65e" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;noInfo&lt;/code&gt; enabled, messages like the webpack bundle information that is shown when starting up and after each save, will be hidden. Errors and warnings will still be shown.</source>
          <target state="translated">&lt;code&gt;noInfo&lt;/code&gt; が有効になって、それぞれが保存した後の起動時に表示されWebPACKのバンドル情報のようなメッセージが、非表示になります。エラーと警告は引き続き表示されます。</target>
        </trans-unit>
        <trans-unit id="1c1b3ec9c729a0c66fab9d9e13f38d92d5ea577c" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;quiet&lt;/code&gt; enabled, nothing except the initial startup information will be written to the console. This also means that errors or warnings from webpack are not visible.</source>
          <target state="translated">で &lt;code&gt;quiet&lt;/code&gt; 有効になって、最初の起動情報を除くものは、コンソールに書き込まれません。これは、webpackからのエラーまたは警告が表示されないことも意味します。</target>
        </trans-unit>
        <trans-unit id="2261b00c5dbf984d31b8e8efe89283a28dff1f62" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;strictModuleExceptionHandling&lt;/code&gt; set to &lt;code&gt;false&lt;/code&gt;, only the first &lt;code&gt;require&lt;/code&gt; throws an exception:</source>
          <target state="translated">&lt;code&gt;strictModuleExceptionHandling&lt;/code&gt; に設定を &lt;code&gt;false&lt;/code&gt; 、唯一の最初の &lt;code&gt;require&lt;/code&gt; 例外がスローされます：</target>
        </trans-unit>
        <trans-unit id="64396abb449717c242f124f529cce2f09650c835" translate="yes" xml:space="preserve">
          <source>With a backend on &lt;code&gt;localhost:3000&lt;/code&gt;, you can use this to enable proxying:</source>
          <target state="translated">&lt;code&gt;localhost:3000&lt;/code&gt; のバックエンドでは、これを使用してプロキシを有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="bb6a8ecee5a47fcee3409e523a4abb2ceedc1a1d" translate="yes" xml:space="preserve">
          <source>With an absolute path, it will only search in the given directory.</source>
          <target state="translated">絶対パスを指定すると、指定されたディレクトリのみを検索します。</target>
        </trans-unit>
        <trans-unit id="bdf18bc54e5096bd0a6188e6cf6be620da271522" translate="yes" xml:space="preserve">
          <source>With next config:</source>
          <target state="translated">次の設定で</target>
        </trans-unit>
        <trans-unit id="71ddcdb75862f1ccf43f751b9133266beb9cdfc8" translate="yes" xml:space="preserve">
          <source>With that in place, let's see what happens when we do an &lt;code&gt;npm run build&lt;/code&gt;:</source>
          <target state="translated">それができたら、 &lt;code&gt;npm run build&lt;/code&gt; を実行するとどうなるか見てみましょう。</target>
        </trans-unit>
        <trans-unit id="eb60d89ccdec95062636744692239878a8311c6e" translate="yes" xml:space="preserve">
          <source>With that in place, let's update our entry script to utilize one of these new methods and remove &lt;code&gt;lodash&lt;/code&gt; for simplicity:</source>
          <target state="translated">それが整ったら、エントリスクリプトを更新して、これらの新しいメソッドの1つを利用し、簡単にするために &lt;code&gt;lodash&lt;/code&gt; を削除します。</target>
        </trans-unit>
        <trans-unit id="29a9b2b6d1e673ae67e5cea0f4d0192bed6a7832" translate="yes" xml:space="preserve">
          <source>With that in place, we can add the logic to conditionally load our new &lt;code&gt;polyfills.bundle.js&lt;/code&gt; file. How you make this decision depends on the technologies and browsers you need to support. We'll just do some simple testing to determine whether our polyfills are needed:</source>
          <target state="translated">それができ &lt;code&gt;polyfills.bundle.js&lt;/code&gt; 、新しいpolyfills.bundle.jsファイルを条件付きでロードするロジックを追加できます。この決定を行う方法は、サポートする必要のあるテクノロジーとブラウザーによって異なります。簡単なテストを行って、ポリフィルが必要かどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="8a561e18dac29b32832d2f136d334bfd899388b2" translate="yes" xml:space="preserve">
          <source>With that said, let's run &lt;code&gt;npx webpack&lt;/code&gt;, which will take our script at &lt;code&gt;src/index.js&lt;/code&gt; as the &lt;a href=&quot;../concepts/entry-points&quot;&gt;entry point&lt;/a&gt;, and will generate &lt;code&gt;dist/main.js&lt;/code&gt; as the &lt;a href=&quot;../concepts/output&quot;&gt;output&lt;/a&gt;. The &lt;code&gt;npx&lt;/code&gt; command, which ships with Node 8.2/npm 5.2.0 or higher, runs the webpack binary (&lt;code&gt;./node_modules/.bin/webpack&lt;/code&gt;) of the webpack package we installed in the beginning:</source>
          <target state="translated">そうは言っても、実行してみましょう &lt;code&gt;npx webpack&lt;/code&gt; で私たちのスクリプトを取るであろう、 &lt;code&gt;src/index.js&lt;/code&gt; として&lt;a href=&quot;../concepts/entry-points&quot;&gt;エントリーポイント&lt;/a&gt;、および生成します &lt;code&gt;dist/main.js&lt;/code&gt; として&lt;a href=&quot;../concepts/output&quot;&gt;出力します&lt;/a&gt;。 &lt;code&gt;npx&lt;/code&gt; ノード8.2 / NPM 5.2.0以上に付属して、WebPACKのバイナリ（実行するコマンド、 &lt;code&gt;./node_modules/.bin/webpack&lt;/code&gt; ：我々は最初にインストールさWebPACKのパッケージのを）</target>
        </trans-unit>
        <trans-unit id="da94f4bc9bc2a74e22052ec871ba55495942d472" translate="yes" xml:space="preserve">
          <source>With that squared away, we can run another &lt;code&gt;npm run build&lt;/code&gt; and see if anything has changed.</source>
          <target state="translated">これを &lt;code&gt;npm run build&lt;/code&gt; と、別のnpm run buildを実行して、何か変更されたかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="11b8ad9c6db101c09c9ea40dfa534293e6654ae6" translate="yes" xml:space="preserve">
          <source>With the &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;&lt;code&gt;SplitChunks&lt;/code&gt;&lt;/a&gt; in place, we should now see the duplicate dependency removed from our &lt;code&gt;index.bundle.js&lt;/code&gt; and &lt;code&gt;another.bundle.js&lt;/code&gt;. The plugin should notice that we've separated &lt;code&gt;lodash&lt;/code&gt; out to a separate chunk and remove the dead weight from our main bundle. Let's do an &lt;code&gt;npm run build&lt;/code&gt; to see if it worked:</source>
          <target state="translated">&lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt; &lt;code&gt;SplitChunks&lt;/code&gt; &lt;/a&gt;代わりに、我々は今、重複する依存関係が私たちから取り除かれるはずです &lt;code&gt;index.bundle.js&lt;/code&gt; と &lt;code&gt;another.bundle.js&lt;/code&gt; 。プラグインは、 &lt;code&gt;lodash&lt;/code&gt; を別のチャンクに分離し、メインバンドルから自重を削除したことに注意する必要があります。 &lt;code&gt;npm run build&lt;/code&gt; を実行して、機能するかどうかを確認してみましょう。</target>
        </trans-unit>
        <trans-unit id="8a95996403d0479861a6b4e7a89511aeea3f2ee3" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;libraryExport&lt;/code&gt; configurations specified above, the resulting libraries could be utilized as such:</source>
          <target state="translated">上記で指定された &lt;code&gt;libraryExport&lt;/code&gt; 構成を使用すると、結果のライブラリをそのまま使用できます。</target>
        </trans-unit>
        <trans-unit id="f8cc9918374023b808c6be47d5d665f11ee02edf" translate="yes" xml:space="preserve">
          <source>With the above setting a self-signed certificate is used, but you can provide your own:</source>
          <target state="translated">上記の設定では自己署名証明書が使用されますが、独自の証明書を提供することもできます。</target>
        </trans-unit>
        <trans-unit id="c79c4fbc27f3e16e9bcfa18c8785f3041b90c961" translate="yes" xml:space="preserve">
          <source>With the extract-loader, you are able to reference your &lt;code&gt;main.css&lt;/code&gt; as regular &lt;code&gt;entry&lt;/code&gt;. The following &lt;code&gt;webpack.config.js&lt;/code&gt; shows how to load your styles with the &lt;a href=&quot;style-loader&quot;&gt;style-loader&lt;/a&gt; in development and as separate file in production.</source>
          <target state="translated">抽出ローダーを使用すると、 &lt;code&gt;main.css&lt;/code&gt; を通常の &lt;code&gt;entry&lt;/code&gt; として参照できます。次の &lt;code&gt;webpack.config.js&lt;/code&gt; は、開発中の&lt;a href=&quot;style-loader&quot;&gt;スタイルローダーを使用&lt;/a&gt;して、本番環境で別のファイルとしてスタイルをロードする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="e879ed7ebe97ab514f9ac82d92789a1995b02f8a" translate="yes" xml:space="preserve">
          <source>With the loader configured and fonts in place, you can incorporate them via an &lt;code&gt;@font-face&lt;/code&gt; declaration. The local &lt;code&gt;url(...)&lt;/code&gt; directive will be picked up by webpack just as it was with the image:</source>
          <target state="translated">ローダーを構成し、フォントを配置したら、 &lt;code&gt;@font-face&lt;/code&gt; 宣言を介してそれらを組み込むことができます。ローカル &lt;code&gt;url(...)&lt;/code&gt; ディレクティブは、イメージの場合と同様に、webpackによって取得されます。</target>
        </trans-unit>
        <trans-unit id="9aa3992e4ce723673608e4cd88c8061c3cc47c1f" translate="yes" xml:space="preserve">
          <source>With the same configuration as above:</source>
          <target state="translated">上記と同じ構成で</target>
        </trans-unit>
        <trans-unit id="87cceefb92302190536b2b8442673ced6c7194c6" translate="yes" xml:space="preserve">
          <source>With this configuration:</source>
          <target state="translated">この構成で</target>
        </trans-unit>
        <trans-unit id="23fc7d1082b4dd2dcbf10b62f03eb29c07d54435" translate="yes" xml:space="preserve">
          <source>With webpack 3.5.5, using &lt;code&gt;libraryTarget: { root:'_' }&lt;/code&gt; doesn't work properly (as stated in &lt;a href=&quot;https://github.com/webpack/webpack/issues/4824&quot;&gt;issue 4824&lt;/a&gt;). However, you can set &lt;code&gt;libraryTarget: { var: '_' }&lt;/code&gt; to expect the library as a global variable.</source>
          <target state="translated">webpack 3.5.5では、 &lt;code&gt;libraryTarget: { root:'_' }&lt;/code&gt; しても正しく機能しません（&lt;a href=&quot;https://github.com/webpack/webpack/issues/4824&quot;&gt;問題4824に&lt;/a&gt;記載）。ただし、 &lt;code&gt;libraryTarget: { var: '_' }&lt;/code&gt; を設定して、ライブラリをグローバル変数として期待できます。</target>
        </trans-unit>
        <trans-unit id="8732f0a5e9a8bf5a55b6df25e3d01cfd8c8eef53" translate="yes" xml:space="preserve">
          <source>Within your webpack configuration object, you'll need to add the babel-loader to the list of modules, like so:</source>
          <target state="translated">webpack 設定オブジェクトの中で、次のように babel-loader をモジュールのリストに追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="bddb13c140d09d38ff9bdf2addfdbde63717f1a3" translate="yes" xml:space="preserve">
          <source>Without &lt;code&gt;require.include('a')&lt;/code&gt; it would be duplicated in both anonymous chunks.</source>
          <target state="translated">なければ &lt;code&gt;require.include('a')&lt;/code&gt; は、両方の匿名の塊に複製されるだろう。</target>
        </trans-unit>
        <trans-unit id="0b3f121ad6e6adf10645f307e2b236a6bd4df531" translate="yes" xml:space="preserve">
          <source>Without bundling &lt;code&gt;lodash&lt;/code&gt;, but requiring it to be loaded by the consumer using &lt;code&gt;externals&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lodash&lt;/code&gt; をバンドルせずに、 &lt;code&gt;externals&lt;/code&gt; を使用して消費者がロードする必要がある。</target>
        </trans-unit>
        <trans-unit id="b87ebfe4d9449847cae77868b59700d8b37ff9ec" translate="yes" xml:space="preserve">
          <source>Wondering the difference between CommonJS and CommonJS2 is? While they are similar, there are some subtle differences between them that are not usually relevant in the context of webpack. (For further details, please &lt;a href=&quot;https://github.com/webpack/webpack/issues/1114&quot;&gt;read this issue&lt;/a&gt;.)</source>
          <target state="translated">CommonJSとCommonJS2の違いを知りたいですか？それらは類似していますが、通常はwebpackのコンテキストには関係のない微妙な違いがあります。（詳細については、&lt;a href=&quot;https://github.com/webpack/webpack/issues/1114&quot;&gt;この問題&lt;/a&gt;をお読みください。）</target>
        </trans-unit>
        <trans-unit id="2bd1799686939d6c40b6fc6d1834a5070159c0aa" translate="yes" xml:space="preserve">
          <source>Worker Pool</source>
          <target state="translated">ワーカープール</target>
        </trans-unit>
        <trans-unit id="47da685d4ce43b86671c1b697e05862bb915ae12" translate="yes" xml:space="preserve">
          <source>Works beautifully with async/await</source>
          <target state="translated">async/await で美しく動作します。</target>
        </trans-unit>
        <trans-unit id="1ea79d6e6f4d7547a74b5be4b620fb97f6b83c66" translate="yes" xml:space="preserve">
          <source>Wrapping up</source>
          <target state="translated">ラッピング</target>
        </trans-unit>
        <trans-unit id="2a6fd277f08359dea3f96c16af1ecd77632ea198" translate="yes" xml:space="preserve">
          <source>Wraps a react component in a proxy component to enable Code Splitting, which loads a react component and its dependencies on demand.</source>
          <target state="translated">react コンポーネントをプロキシコンポーネントでラップしてコード分割を有効にし、 react コンポーネントとその依存関係をオンデマンドでロードします。</target>
        </trans-unit>
        <trans-unit id="36713ec5106504c6078cdd85306fc98592f85b98" translate="yes" xml:space="preserve">
          <source>Write long configurations (instead split the configuration into multiple files)</source>
          <target state="translated">長い設定を書き込む (複数のファイルに分割する代わりに)</target>
        </trans-unit>
        <trans-unit id="31860e6ece8d648f15b2880b9f13b39001ab849b" translate="yes" xml:space="preserve">
          <source>Write the output of the errors to a file, for example a checkstyle xml file for use for reporting on Jenkins CI</source>
          <target state="translated">エラーの出力をファイルに書き出します。例えば、Jenkins CIでのレポート用にチェックスタイルのxmlファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="373464ffb250a399e37ccfde5f51d09a03e0cfff" translate="yes" xml:space="preserve">
          <source>YAML frontmatter loader for webpack. Converts YAML in files to JSON.</source>
          <target state="translated">webpack用のYAMLフロントマッターローダー。ファイル内のYAMLをJSONに変換します。</target>
        </trans-unit>
        <trans-unit id="76c7f40c6c36b0415ea83ef88312618e6fa1647e" translate="yes" xml:space="preserve">
          <source>You also have the ability to pass the &lt;code&gt;minChunks&lt;/code&gt; property a function. This function is called by the &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; and calls the function with &lt;code&gt;module&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt; arguments.</source>
          <target state="translated">また、 &lt;code&gt;minChunks&lt;/code&gt; プロパティに関数を渡すこともできます。この関数は &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; によって呼び出され、 &lt;code&gt;module&lt;/code&gt; および &lt;code&gt;count&lt;/code&gt; 引数を指定して関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="8780dbb2bcb64c2cd9413c17145ff1cfe7f58a7e" translate="yes" xml:space="preserve">
          <source>You can also inline the worker as a BLOB with the &lt;code&gt;inline&lt;/code&gt; parameter</source>
          <target state="translated">ワーカーを &lt;code&gt;inline&lt;/code&gt; パラメーターを使用してBLOBとしてインライン化することもできます。</target>
        </trans-unit>
        <trans-unit id="cd4349233181e0720f303ee495c8f6650f404dd3" translate="yes" xml:space="preserve">
          <source>You can also pass function to override default behavior and insert styles in your container, e.g</source>
          <target state="translated">デフォルトの動作をオーバーライドしたり、コンテナにスタイルを挿入するための関数を渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="761a52984c1b7fea199603367baae47da0358327" translate="yes" xml:space="preserve">
          <source>You can also pass options directly to [Node Sass][] or [Dart Sass][]:</source>
          <target state="translated">Node Sass][]や[Dart Sass][]に直接オプションを渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="041eb7668ce604823bb93f74d19e5870f189e246" translate="yes" xml:space="preserve">
          <source>You can also specify the absolute path to your custom &lt;code&gt;getLocalIdent&lt;/code&gt; function to generate classname based on a different schema. This requires &lt;code&gt;webpack &amp;gt;= 2.2.1&lt;/code&gt; (it supports functions in the &lt;code&gt;options&lt;/code&gt; object).</source>
          <target state="translated">カスタム &lt;code&gt;getLocalIdent&lt;/code&gt; 関数への絶対パスを指定して、別のスキーマに基づいてクラス名を生成することもできます。これには、 &lt;code&gt;webpack &amp;gt;= 2.2.1&lt;/code&gt; が必要です（ &lt;code&gt;options&lt;/code&gt; オブジェクトの関数をサポートしています）。</target>
        </trans-unit>
        <trans-unit id="d81bd4c9a456b16d9683dbcca85d3a7f655c8398" translate="yes" xml:space="preserve">
          <source>You can also speed up babel-loader by as much as 2x by using the &lt;code&gt;cacheDirectory&lt;/code&gt; option. This will cache transformations to the filesystem.</source>
          <target state="translated">&lt;code&gt;cacheDirectory&lt;/code&gt; オプションを使用して、babel-loaderを最大2倍高速化することもできます。これにより、変換がファイルシステムにキャッシュされます。</target>
        </trans-unit>
        <trans-unit id="bdf672d3d1b56fe885485c5286e800cac55a210d" translate="yes" xml:space="preserve">
          <source>You can also take a look at &lt;a href=&quot;https://github.com/jaketrent/html-webpack-template&quot;&gt;&lt;code&gt;html-webpack-template&lt;/code&gt;&lt;/a&gt; which provides a couple of extra features in addition to the default template.</source>
          <target state="translated">また、見とることができ&lt;a href=&quot;https://github.com/jaketrent/html-webpack-template&quot;&gt; &lt;code&gt;html-webpack-template&lt;/code&gt; &lt;/a&gt;デフォルトのテンプレートに加えて、余分な機能のカップルを提供します。</target>
        </trans-unit>
        <trans-unit id="f040ea81d8921273ccde3ba74d7118274a9c6a16" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;https://github.com/babel/babel-loader&quot;&gt;babel-loader&lt;/a&gt; for webpack and include &lt;code&gt;minify&lt;/code&gt;&lt;a href=&quot;https://github.com/babel/minify#babel-preset&quot;&gt;as a preset&lt;/a&gt; and should be much faster than using this - as babel-minify will operate on smaller file sizes. But then, why does this plugin exist at all? -</source>
          <target state="translated">また、webpackに&lt;a href=&quot;https://github.com/babel/babel-loader&quot;&gt;babel-loader&lt;/a&gt;を使用して、 &lt;code&gt;minify&lt;/code&gt; &lt;a href=&quot;https://github.com/babel/minify#babel-preset&quot;&gt;をプリセットとして&lt;/a&gt;含めることもできます。これは、babel-minifyが小さいファイルサイズで動作するため、これを使用するよりもはるかに高速です。しかし、なぜこのプラグインが存在するのですか？-</target>
        </trans-unit>
        <trans-unit id="617736dbb06e2cd8438887c3de0a15c79431e2f3" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;chunkFilename&lt;/code&gt; to add hash values to the filename, since putting &lt;code&gt;[hash]&lt;/code&gt; in the bundle options parameter does not work correctly.</source>
          <target state="translated">バンドルオプションパラメータに &lt;code&gt;[hash]&lt;/code&gt; を指定しても正しく機能しないため、 &lt;code&gt;chunkFilename&lt;/code&gt; を使用してファイル名にハッシュ値を追加することもできます。</target>
        </trans-unit>
        <trans-unit id="c09e6d58a25024dfb7321b1ce2655144f6ba3ed3" translate="yes" xml:space="preserve">
          <source>You can also use loaders through the CLI:</source>
          <target state="translated">また、CLIを介してローダーを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="f02c51640dcbff4fab526c848361216560976627" translate="yes" xml:space="preserve">
          <source>You can also use the css-loader results directly as string, such as in Angular's component style.</source>
          <target state="translated">また、Angularのコンポーネントスタイルのように、CSS-loaderの結果を直接文字列として使用することもできます。</target>
        </trans-unit>
        <trans-unit id="c5fa58a1f470fbc9a3c3181fe1708557f60e11d1" translate="yes" xml:space="preserve">
          <source>You can also use the loader via:</source>
          <target state="translated">を経由してローダーを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="1e730148a496946a205ba9f1f83112cf0117cf5b" translate="yes" xml:space="preserve">
          <source>You can check further customization when including loaders in the &lt;a href=&quot;loaders&quot;&gt;loaders section&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;loaders&quot;&gt;ローダーセクションに&lt;/a&gt;ローダーを含めるときに、さらにカスタマイズを確認できます。</target>
        </trans-unit>
        <trans-unit id="81e1b23ffcecf3cccd1495b43a37853210c7fe63" translate="yes" xml:space="preserve">
          <source>You can combine this configuration with the &lt;a href=&quot;html-webpack-plugin&quot;&gt;HtmlWebpackPlugin&lt;/a&gt;. It will inject all the generated vendor chunks for you.</source>
          <target state="translated">この構成を&lt;a href=&quot;html-webpack-plugin&quot;&gt;HtmlWebpackPlugin&lt;/a&gt;と組み合わせることができます。生成されたすべてのベンダーチャンクが注入されます。</target>
        </trans-unit>
        <trans-unit id="c65677943710e48b99e950158171b3819c14ca64" translate="yes" xml:space="preserve">
          <source>You can configure the generated ident with the &lt;code&gt;localIdentName&lt;/code&gt; query parameter. See &lt;a href=&quot;https://github.com/webpack/loader-utils#interpolatename&quot;&gt;loader-utils's documentation&lt;/a&gt; for more information on options.</source>
          <target state="translated">生成されたIDは、 &lt;code&gt;localIdentName&lt;/code&gt; クエリパラメータで構成できます。オプション&lt;a href=&quot;https://github.com/webpack/loader-utils#interpolatename&quot;&gt;の&lt;/a&gt;詳細については、loader-utilsのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ac56600c476e22d0da1a92f028132f8103ba01d0" translate="yes" xml:space="preserve">
          <source>You can configure this part of the process by specifying an &lt;code&gt;output&lt;/code&gt; field in your configuration:</source>
          <target state="translated">構成で &lt;code&gt;output&lt;/code&gt; フィールドを指定することにより、プロセスのこの部分を構成できます。</target>
        </trans-unit>
        <trans-unit id="37a7764535c2c96f4d8dd59ad1b7b7eb36730e2d" translate="yes" xml:space="preserve">
          <source>You can create your own context with the &lt;code&gt;require.context()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;require.context()&lt;/code&gt; 関数で独自のコンテキストを作成できます。</target>
        </trans-unit>
        <trans-unit id="e84d58c60bb79fb0adbd43498e63742408e0e983" translate="yes" xml:space="preserve">
          <source>You can even add your &lt;code&gt;index.html&lt;/code&gt; as &lt;code&gt;entry&lt;/code&gt; and just reference your stylesheets from there. You just need to tell the html-loader to also pick up &lt;code&gt;link:href&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;index.html&lt;/code&gt; を &lt;code&gt;entry&lt;/code&gt; として追加して、そこからスタイルシートを参照することもできます。html-loaderに &lt;code&gt;link:href&lt;/code&gt; も取得するように指示するだけです。</target>
        </trans-unit>
        <trans-unit id="9222f57573caa95f98daa813595d8eeea95b2e0c" translate="yes" xml:space="preserve">
          <source>You can expose the library in the following ways:</source>
          <target state="translated">以下の方法でライブラリを公開することができます。</target>
        </trans-unit>
        <trans-unit id="81d8b9ac87016044b7fcf31fda306fb4f151e86b" translate="yes" xml:space="preserve">
          <source>You can imagine your application as a tree. The source code and libraries you actually use represent the green, living leaves of the tree. Dead code represents the brown, dead leaves of the tree that are consumed by autumn. In order to get rid of the dead leaves, you have to shake the tree, causing them to fall.</source>
          <target state="translated">あなたのアプリケーションを木のように想像してみてください。実際に使用するソースコードやライブラリは、木の緑の生きた葉を表しています。枯れたコードは、秋に消費される茶色の枯れた葉を表しています。枯れた葉を取り除くためには、木を振って葉が落ちてくるようにしなければなりません。</target>
        </trans-unit>
        <trans-unit id="e3dcd2790a0eae44bfbe2be4ea325c06a42bb0e6" translate="yes" xml:space="preserve">
          <source>You can instead require the babel runtime as a separate module to avoid the duplication.</source>
          <target state="translated">代わりに、重複を避けるために、babelランタイムを別のモジュールとして要求することができます。</target>
        </trans-unit>
        <trans-unit id="9c3dc7f422b914ae1bd7eebc909a39372a9344da" translate="yes" xml:space="preserve">
          <source>You can instruct webpack to &quot;watch&quot; all files within your dependency graph for changes. If one of these files is updated, the code will be recompiled so you don't have to run the full build manually.</source>
          <target state="translated">webpack に依存関係グラフ内のすべてのファイルの変更を「監視」するように指示することができます。これらのファイルの一つが更新された場合、コードは再コンパイルされるので、完全なビルドを手動で実行する必要はありません。</target>
        </trans-unit>
        <trans-unit id="b1a26c63c168e909835bb6c8a229e8e0c0ebd9cf" translate="yes" xml:space="preserve">
          <source>You can manually specify the path to search for your config (&lt;code&gt;postcss.config.js&lt;/code&gt;) with the &lt;code&gt;config.path&lt;/code&gt; option. This is needed if you store your config in a separate e.g &lt;code&gt;./config || ./.config&lt;/code&gt; folder.</source>
          <target state="translated">&lt;code&gt;config.path&lt;/code&gt; オプションを使用して、 &lt;code&gt;postcss.config.js&lt;/code&gt; を検索するパス（postcss.config.js）を手動で指定できます。これは、たとえば &lt;code&gt;./config || ./.config&lt;/code&gt; を保存する場合に必要です。./.configフォルダー。</target>
        </trans-unit>
        <trans-unit id="27129a62dfd905198fe6dba3dc207525e02dbcf5" translate="yes" xml:space="preserve">
          <source>You can override this property by passing your own function in:</source>
          <target state="translated">独自の関数を渡すことで、このプロパティをオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="4abdad2c7b1098707f173e274bbc6d2550aa3940" translate="yes" xml:space="preserve">
          <source>You can pass &lt;a href=&quot;http://eslint.org/docs/developer-guide/nodejs-api#cliengine&quot;&gt;eslint options&lt;/a&gt; using standard webpack &lt;a href=&quot;../configuration/module#useentry&quot;&gt;loader options&lt;/a&gt;.</source>
          <target state="translated">標準のwebpack &lt;a href=&quot;../configuration/module#useentry&quot;&gt;ローダーオプション&lt;/a&gt;を使用して&lt;a href=&quot;http://eslint.org/docs/developer-guide/nodejs-api#cliengine&quot;&gt;eslintオプション&lt;/a&gt;を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="0e88b65dc47b88deac8cb49f88b3467dc69ea19e" translate="yes" xml:space="preserve">
          <source>You can pass a &lt;code&gt;cache&lt;/code&gt; object, where the modules are cached. Otherwise one is created per plugin instance.</source>
          <target state="translated">モジュールがキャッシュされる &lt;code&gt;cache&lt;/code&gt; オブジェクトを渡すことができます。それ以外の場合は、プラグインインスタンスごとに作成されます。</target>
        </trans-unit>
        <trans-unit id="aef4ad3023e402beb004c1702b78a0c56e0f6940" translate="yes" xml:space="preserve">
          <source>You can pass any Less specific options to the &lt;code&gt;less-loader&lt;/code&gt; via &lt;a href=&quot;../configuration/module#rule-options-rule-query&quot;&gt;loader options&lt;/a&gt;. See the &lt;a href=&quot;http://lesscss.org/usage/#command-line-usage-options&quot;&gt;Less documentation&lt;/a&gt; for all available options in dash-case. Since we're passing these options to Less programmatically, you need to pass them in camelCase here:</source>
          <target state="translated">あなたはに任意の少ない固有のオプションを渡すことができます &lt;code&gt;less-loader&lt;/code&gt; を経由して&lt;a href=&quot;../configuration/module#rule-options-rule-query&quot;&gt;ローダオプション&lt;/a&gt;。ダッシュケースで利用可能なすべてのオプションについては、&lt;a href=&quot;http://lesscss.org/usage/#command-line-usage-options&quot;&gt;Lessのドキュメント&lt;/a&gt;を参照してください。これらのオプションはプログラムでLessに渡すため、ここでキャメルケースに渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="3b06afa23c1de47c44c56545299129b3b6430146" translate="yes" xml:space="preserve">
          <source>You can pass options to the loader by using the &lt;a href=&quot;../configuration/module#rule-options-rule-query&quot;&gt;options property&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;../configuration/module#rule-options-rule-query&quot;&gt;optionsプロパティ&lt;/a&gt;を使用して、ローダーにオプションを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="8225b533fd04bef42ded925304519aad496b8786" translate="yes" xml:space="preserve">
          <source>You can prevent all these messages from showing, by using this option:</source>
          <target state="translated">このオプションを使用して、これらのメッセージをすべて表示しないようにすることができます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
