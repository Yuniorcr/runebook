<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="rails">
    <body>
      <group id="rails">
        <trans-unit id="b37b81146f80a1a4919ec9c9b0e5d0cd85718f8c" translate="yes" xml:space="preserve">
          <source>Keep in mind that removing these middlewares will remove support for certain features in Action Controller.</source>
          <target state="translated">これらのミドルウェアを削除すると、Action Controllerの特定の機能がサポートされなくなることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f3cd42ebc58551029cf6d64890f34636b5f605b0" translate="yes" xml:space="preserve">
          <source>Keep in mind the order of these preprocessors is important. For example, if you called your JavaScript file &lt;code&gt;app/assets/javascripts/projects.erb.coffee&lt;/code&gt; then it would be processed with the CoffeeScript interpreter first, which wouldn't understand ERB and therefore you would run into problems.</source>
          <target state="translated">これらのプリプロセッサの順序が重要であることを覚えておいてください。たとえば、JavaScriptファイル &lt;code&gt;app/assets/javascripts/projects.erb.coffee&lt;/code&gt; を呼び出した場合、最初にCoffeeScriptインタープリターで処理されるため、ERBを理解できず、問題が発生します。</target>
        </trans-unit>
        <trans-unit id="38b50dd97691ece4d75030debc9d7c69689f4370" translate="yes" xml:space="preserve">
          <source>Keep in mind, of course, that anything generated with these commands inside of an engine that has &lt;code&gt;isolate_namespace&lt;/code&gt; in the &lt;code&gt;Engine&lt;/code&gt; class will be namespaced.</source>
          <target state="translated">もちろん、 &lt;code&gt;Engine&lt;/code&gt; クラス内に &lt;code&gt;isolate_namespace&lt;/code&gt; を持つエンジンの内部でこれらのコマンドを使用して生成されたものはすべて名前空間が付けられることに注意してください。</target>
        </trans-unit>
        <trans-unit id="811c5671e6f72a16320e58794cbdd505a4a8bfdd" translate="yes" xml:space="preserve">
          <source>Keep your master key safe. Do not commit your master key.</source>
          <target state="translated">マスターキーを安全に保管してください。マスターキーをコミットしないようにしてください。</target>
        </trans-unit>
        <trans-unit id="5c3ffafd6d0bd987a08e86445a216acb025e6c9e" translate="yes" xml:space="preserve">
          <source>Keeping the Postman in Check</source>
          <target state="translated">郵便配達員の管理</target>
        </trans-unit>
        <trans-unit id="56d925c36d2e941d2af29d231d5dbe9ae819ce7d" translate="yes" xml:space="preserve">
          <source>Keeps an array of all the emails sent out through the Action Mailer with delivery_method :test. Most useful for unit and functional testing.</source>
          <target state="translated">delivery_method :testを指定してAction Mailerで送信されたすべてのメールの配列を保持します。ユニットテストや機能テストに最も便利です。</target>
        </trans-unit>
        <trans-unit id="37bcbef0779247a6b500aae75580d306dd7aad75" translate="yes" xml:space="preserve">
          <source>Keeps either the entire current flash or a specific flash entry available for the next action:</source>
          <target state="translated">現在のフラッシュ全体または特定のフラッシュ エントリのいずれかを、次のアクションで使用可能な状態に保ちます。</target>
        </trans-unit>
        <trans-unit id="74808d3df030e992e7b9444241625147986487c1" translate="yes" xml:space="preserve">
          <source>Kernel</source>
          <target state="translated">Kernel</target>
        </trans-unit>
        <trans-unit id="c67dd20ee842986086a0a915ddc2a279490130ed" translate="yes" xml:space="preserve">
          <source>Key</source>
          <target state="translated">Key</target>
        </trans-unit>
        <trans-unit id="dccff3da927cfa30d8263467f25f4099d890d528" translate="yes" xml:space="preserve">
          <source>Key aspects of Ruby constants</source>
          <target state="translated">Ruby定数の主要な側面</target>
        </trans-unit>
        <trans-unit id="bd612611d70de311a74efc2fb60fd72bd02e7463" translate="yes" xml:space="preserve">
          <source>Key prefix</source>
          <target state="translated">キープレフィックス</target>
        </trans-unit>
        <trans-unit id="1fd3bb93252c4e7c505b9a33e3f33adbbb95274d" translate="yes" xml:space="preserve">
          <source>Key used in the store</source>
          <target state="translated">店内で使用したキー</target>
        </trans-unit>
        <trans-unit id="74018238351de8a4b5f41ef51f98e3f2c94d5837" translate="yes" xml:space="preserve">
          <source>KeyError</source>
          <target state="translated">KeyError</target>
        </trans-unit>
        <trans-unit id="74b7794756029ab4d216c6b5291e0a3c6b00afdc" translate="yes" xml:space="preserve">
          <source>KeyGenerator</source>
          <target state="translated">KeyGenerator</target>
        </trans-unit>
        <trans-unit id="38565bb17684d112a156b97c9fd4c097d914dfef" translate="yes" xml:space="preserve">
          <source>KeyGenerator#generate_key</source>
          <target state="translated">KeyGenerator#generate_key</target>
        </trans-unit>
        <trans-unit id="5e8529f8277cb52ad5e090f3e1129a3e4596b4ad" translate="yes" xml:space="preserve">
          <source>KeyGenerator::new</source>
          <target state="translated">KeyGenerator::new</target>
        </trans-unit>
        <trans-unit id="759dc506a4c9361dcdcf96ba09aab32ce67fc6aa" translate="yes" xml:space="preserve">
          <source>Keys are Rails &lt;a href=&quot;timezone&quot;&gt;TimeZone&lt;/a&gt; names, values are TZInfo identifiers.</source>
          <target state="translated">キーはRailsの&lt;a href=&quot;timezone&quot;&gt;TimeZone&lt;/a&gt;名、値はTZInfo識別子です。</target>
        </trans-unit>
        <trans-unit id="7c91d792d7d8ea478b77ee4fc93f40db3edb4c80" translate="yes" xml:space="preserve">
          <source>Keys are always translated into Strings and are case sensitive. When an object is specified as a key and has a &lt;code&gt;cache_key&lt;/code&gt; method defined, this method will be called to define the key. Otherwise, the &lt;code&gt;to_param&lt;/code&gt; method will be called. Hashes and Arrays can also be used as keys. The elements will be delimited by slashes, and the elements within a &lt;a href=&quot;../../hash&quot;&gt;Hash&lt;/a&gt; will be sorted by key so they are consistent.</source>
          <target state="translated">キーは常に文字列に変換され、大文字と小文字が区別されます。オブジェクトがキーとして指定され、 &lt;code&gt;cache_key&lt;/code&gt; メソッドが定義されている場合、このメソッドが呼び出されてキーが定義されます。それ以外の場合は、 &lt;code&gt;to_param&lt;/code&gt; メソッドが呼び出されます。ハッシュと配列もキーとして使用できます。要素はスラッシュで区切られ、&lt;a href=&quot;../../hash&quot;&gt;ハッシュ&lt;/a&gt;内の要素はキーでソートされるため、一貫性があります。</target>
        </trans-unit>
        <trans-unit id="ed45856e9e6ecb02a978d31d54e643eb027da025" translate="yes" xml:space="preserve">
          <source>Keys are truncated with their own SHA2 digest if they exceed 1kB</source>
          <target state="translated">キーが1kBを超える場合は、独自のSHA2ダイジェストで切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="6dade8eae87c393093fe35456b0c0546385b2018" translate="yes" xml:space="preserve">
          <source>Keys should normally be unique. If the block returns the same value for different elements no collection is built for that key. The last item will win.</source>
          <target state="translated">キーは通常、一意でなければなりません。ブロックが異なる要素に対して同じ値を返す場合は、そのキーのためのコレクションは構築されません。最後の項目が勝者となります。</target>
        </trans-unit>
        <trans-unit id="3c4171878f85224ae8e8085027502b35e802765f" translate="yes" xml:space="preserve">
          <source>Keys with a '_html' suffix and keys named 'html' are marked as HTML safe. When you use them in views the HTML will not be escaped.</source>
          <target state="translated">接尾辞が '_html' のキーと 'html' という名前のキーは HTML セーフとしてマークされています。これらをビューで使用した場合、HTMLはエスケープされません。</target>
        </trans-unit>
        <trans-unit id="603962661dd677bfb30ebbf245488be607df467b" translate="yes" xml:space="preserve">
          <source>Knowing this, you can combine &lt;code&gt;select_tag&lt;/code&gt; and &lt;code&gt;options_for_select&lt;/code&gt; to achieve the desired, complete markup:</source>
          <target state="translated">これを知っていれば、 &lt;code&gt;select_tag&lt;/code&gt; と &lt;code&gt;options_for_select&lt;/code&gt; を組み合わせて、目的の完全なマークアップを実現できます。</target>
        </trans-unit>
        <trans-unit id="b9c048acd3b4935270bc39bf7303395a77e3c631" translate="yes" xml:space="preserve">
          <source>LAST_MODIFIED</source>
          <target state="translated">LAST_MODIFIED</target>
        </trans-unit>
        <trans-unit id="096c41c788487a970ec074e54230e758c0f4c4b5" translate="yes" xml:space="preserve">
          <source>LOCALHOST</source>
          <target state="translated">LOCALHOST</target>
        </trans-unit>
        <trans-unit id="40c3322b3b3d0d946724fe784d34663629e1932a" translate="yes" xml:space="preserve">
          <source>LOCATION</source>
          <target state="translated">LOCATION</target>
        </trans-unit>
        <trans-unit id="f7b234a238285a1f43faf56fe04f8eca0e8187cd" translate="yes" xml:space="preserve">
          <source>LOCK_NOT_AVAILABLE</source>
          <target state="translated">LOCK_NOT_AVAILABLE</target>
        </trans-unit>
        <trans-unit id="098eeaebc4158474bc2be818c08af354bd7af4d9" translate="yes" xml:space="preserve">
          <source>LOOKUP</source>
          <target state="translated">LOOKUP</target>
        </trans-unit>
        <trans-unit id="eea76aa993177151ffe54751f3710090c41018a2" translate="yes" xml:space="preserve">
          <source>Label references for associations (belongs_to, has_one, has_many)</source>
          <target state="translated">アソシエーションのラベル参照(belongs_to,has_one,has_many)</target>
        </trans-unit>
        <trans-unit id="ef1b43b180145d1655abe2acaac47486dfdc28a0" translate="yes" xml:space="preserve">
          <source>Last configurable block to run. Called after frameworks initialize.</source>
          <target state="translated">最後に実行する設定可能なブロック。フレームワークの初期化後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="091fde44725196b0d7b6b7ede88ee30e526d8fe4" translate="yes" xml:space="preserve">
          <source>Last time we left when the &lt;code&gt;app&lt;/code&gt; method was being defined:</source>
          <target state="translated">&lt;code&gt;app&lt;/code&gt; メソッドが定義されていたときに去ったとき：</target>
        </trans-unit>
        <trans-unit id="510f1240320c0b4245e6973ae63e21990f3c7f94" translate="yes" xml:space="preserve">
          <source>Lastly an &lt;code&gt;after_find&lt;/code&gt; and &lt;code&gt;after_initialize&lt;/code&gt; callback is triggered for each object that is found and instantiated by a finder, with &lt;code&gt;after_initialize&lt;/code&gt; being triggered after new objects are instantiated as well.</source>
          <target state="translated">最後に、 &lt;code&gt;after_find&lt;/code&gt; によって検出およびインスタンス化された各オブジェクトに対してafter_findおよび &lt;code&gt;after_initialize&lt;/code&gt; コールバックがトリガーされ、新しいオブジェクトがインスタンス化された後にも &lt;code&gt;after_initialize&lt;/code&gt; がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="a8edffefe23a3b0069154ba211dceaa5589a707c" translate="yes" xml:space="preserve">
          <source>Lastly, for new primary databases you need to set the &lt;code&gt;migrations_paths&lt;/code&gt; to the directory where you will store migrations for that database. We'll look more at &lt;code&gt;migrations_paths&lt;/code&gt; later on in this guide.</source>
          <target state="translated">最後に、新しいプライマリデータベースの場合、 &lt;code&gt;migrations_paths&lt;/code&gt; を、そのデータベースのマイグレーションを格納するディレクトリに設定する必要があります。このガイドの後半で、 &lt;code&gt;migrations_paths&lt;/code&gt; について詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="e11ef8043bdfd5d2effaa0c4ccffaea4aff10bd1" translate="yes" xml:space="preserve">
          <source>Lastly, simple content can be passed as a parameter:</source>
          <target state="translated">最後に、シンプルな内容をパラメータとして渡すことができます。</target>
        </trans-unit>
        <trans-unit id="b1a487af9f0197f34ab23417574667b914a550ec" translate="yes" xml:space="preserve">
          <source>Lastly, the &lt;code&gt;app/views&lt;/code&gt; directory contains a &lt;code&gt;layouts&lt;/code&gt; folder, which contains a file at &lt;code&gt;blorgh/application.html.erb&lt;/code&gt;. This file allows you to specify a layout for the engine. If this engine is to be used as a stand-alone engine, then you would add any customization to its layout in this file, rather than the application's &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt; file.</source>
          <target state="translated">最後に、 &lt;code&gt;app/views&lt;/code&gt; ディレクトリには、 &lt;code&gt;blorgh/application.html.erb&lt;/code&gt; にあるファイルを含む &lt;code&gt;layouts&lt;/code&gt; フォルダーが含まれています。このファイルでは、エンジンのレイアウトを指定できます。このエンジンをスタンドアロンエンジンとして使用する場合は、アプリケーションの &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt; ファイルではなく、このファイルのレイアウトにカスタマイズを追加します。</target>
        </trans-unit>
        <trans-unit id="cf0e45525464dbd04e79c657faf5c6b2fb11c005" translate="yes" xml:space="preserve">
          <source>Lastly, you can use sprintf-style % escapes in the template. This works slightly differently than the previous methods; you are responsible for ensuring that the values in the template are properly quoted. The values are passed to the connector for quoting, but the caller is responsible for ensuring they are enclosed in quotes in the resulting SQL. After quoting, the values are inserted using the same escapes as the Ruby core method &lt;code&gt;Kernel::sprintf&lt;/code&gt;.</source>
          <target state="translated">最後に、テンプレートでsprintfスタイルの％エスケープを使用できます。これは、以前の方法とは少し異なります。テンプレートの値が適切に引用されていることを確認する責任があります。値は引用のためにコネクターに渡されますが、呼び出し元は、結果のSQLでそれらが引用符で囲まれていることを確認する責任があります。引用した後、Rubyコアメソッド &lt;code&gt;Kernel::sprintf&lt;/code&gt; と同じエスケープを使用して値が挿入されます。</target>
        </trans-unit>
        <trans-unit id="392c8854d0981f89d43dab619acc0d260db6fa94" translate="yes" xml:space="preserve">
          <source>Later, when the body of the module definition is interpreted, a new entry is created in the constant table of the module object stored in the &lt;code&gt;Colors&lt;/code&gt; constant. That entry maps the name &quot;RED&quot; to the string &quot;0xff0000&quot;.</source>
          <target state="translated">その後、モジュール定義の本文が解釈されると、 &lt;code&gt;Colors&lt;/code&gt; 定数に格納されているモジュールオブジェクトの定数テーブルに新しいエントリが作成されます。そのエントリは、名前「RED」を文字列「0xff0000」にマップします。</target>
        </trans-unit>
        <trans-unit id="bec266232611c1ccc105a2b7fb87e8c1a59a2eca" translate="yes" xml:space="preserve">
          <source>Launch the web server again if you stopped it to generate the controller (&lt;code&gt;rails
server&lt;/code&gt;) and navigate to http://localhost:3000 in your browser. You'll see the &quot;Hello, Rails!&quot; message you put into &lt;code&gt;app/views/welcome/index.html.erb&lt;/code&gt;, indicating that this new route is indeed going to &lt;code&gt;WelcomeController&lt;/code&gt;'s &lt;code&gt;index&lt;/code&gt; action and is rendering the view correctly.</source>
          <target state="translated">コントローラー（ &lt;code&gt;rails server&lt;/code&gt; ）を生成するために停止した場合は、Webサーバーを再度起動し、ブラウザーでhttp：// localhost：3000に移動します。「Hello、Rails！」が表示されます。 &lt;code&gt;app/views/welcome/index.html.erb&lt;/code&gt; に入力したメッセージ。この新しいルートが実際に &lt;code&gt;WelcomeController&lt;/code&gt; の &lt;code&gt;index&lt;/code&gt; アクションに移動し、ビューを正しくレンダリングしていることを示しています。</target>
        </trans-unit>
        <trans-unit id="af9e4ca75455ed36ae5cba0ec03de1506f297609" translate="yes" xml:space="preserve">
          <source>Launch!</source>
          <target state="translated">Launch!</target>
        </trans-unit>
        <trans-unit id="3b232ddd1deabfdc739b7f19ed66f965ea3e4797" translate="yes" xml:space="preserve">
          <source>Layers additional behavior on &lt;a href=&quot;time#method-c-at&quot;&gt;::at&lt;/a&gt; so that &lt;a href=&quot;activesupport/timewithzone&quot;&gt;ActiveSupport::TimeWithZone&lt;/a&gt; and &lt;a href=&quot;datetime&quot;&gt;DateTime&lt;/a&gt; instances can be used when called with a single argument</source>
          <target state="translated">単一の引数で呼び出されたときに&lt;a href=&quot;activesupport/timewithzone&quot;&gt;ActiveSupport :: TimeWithZone&lt;/a&gt;および&lt;a href=&quot;datetime&quot;&gt;DateTime&lt;/a&gt;インスタンスを使用できるように、&lt;a href=&quot;time#method-c-at&quot;&gt;:: atで&lt;/a&gt;追加の動作をレイヤー化します。</target>
        </trans-unit>
        <trans-unit id="450c7c23c31cb0b2f54d83184ce79687a2b74fa0" translate="yes" xml:space="preserve">
          <source>Layers additional behavior on &lt;a href=&quot;time#method-i-eql-3F&quot;&gt;#eql?&lt;/a&gt; so that &lt;a href=&quot;activesupport/timewithzone&quot;&gt;ActiveSupport::TimeWithZone&lt;/a&gt; instances can be eql? to an equivalent &lt;a href=&quot;time&quot;&gt;Time&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;time#method-i-eql-3F&quot;&gt;#eqlの&lt;/a&gt;レイヤーの追加動作？そのため&lt;a href=&quot;activesupport/timewithzone&quot;&gt;activesupportの:: TimeWithZoneの&lt;/a&gt;インスタンスはEQLすることができますか？同等の&lt;a href=&quot;time&quot;&gt;時間&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7d321d86ff6cc58af6defb3f60342a2302fa2218" translate="yes" xml:space="preserve">
          <source>Layers additional behavior on DateTime#&amp;lt;=&amp;gt; so that &lt;a href=&quot;time&quot;&gt;Time&lt;/a&gt; and &lt;a href=&quot;activesupport/timewithzone&quot;&gt;ActiveSupport::TimeWithZone&lt;/a&gt; instances can be compared with a &lt;a href=&quot;datetime&quot;&gt;DateTime&lt;/a&gt;.</source>
          <target state="translated">DateTime＃&amp;lt;=&amp;gt;に追加の動作を重ねて、&lt;a href=&quot;time&quot;&gt;Time&lt;/a&gt;および&lt;a href=&quot;activesupport/timewithzone&quot;&gt;ActiveSupport :: TimeWithZone&lt;/a&gt;インスタンスを&lt;a href=&quot;datetime&quot;&gt;DateTime&lt;/a&gt;と比較できるようにします。</target>
        </trans-unit>
        <trans-unit id="29c255a938da046a574f295ca103dddf42d32232" translate="yes" xml:space="preserve">
          <source>Layers additional behavior on Time#&amp;lt;=&amp;gt; so that &lt;a href=&quot;datetime&quot;&gt;DateTime&lt;/a&gt; and &lt;a href=&quot;activesupport/timewithzone&quot;&gt;ActiveSupport::TimeWithZone&lt;/a&gt; instances can be chronologically compared with a &lt;a href=&quot;time&quot;&gt;Time&lt;/a&gt;</source>
          <target state="translated">Time＃&amp;lt;=&amp;gt;で追加の動作をレイヤー化し、&lt;a href=&quot;datetime&quot;&gt;DateTime&lt;/a&gt;および&lt;a href=&quot;activesupport/timewithzone&quot;&gt;ActiveSupport :: TimeWithZone&lt;/a&gt;インスタンスを時系列で&lt;a href=&quot;time&quot;&gt;Time&lt;/a&gt;と比較できるようにします。</target>
        </trans-unit>
        <trans-unit id="8daa234f4e9273cda7590ab2e63f033cc2e446cd" translate="yes" xml:space="preserve">
          <source>Laying down the groundwork</source>
          <target state="translated">基礎を築く</target>
        </trans-unit>
        <trans-unit id="ddc2e0175464c8ae5a4d0b334ec3310ddf23aae7" translate="yes" xml:space="preserve">
          <source>Layout assignment</source>
          <target state="translated">レイアウトの割り当て</target>
        </trans-unit>
        <trans-unit id="01655ad5977ee9d7376ffb682322087942af96db" translate="yes" xml:space="preserve">
          <source>Layout declarations cascade downward in the hierarchy, and more specific layout declarations always override more general ones. For example:</source>
          <target state="translated">レイアウト宣言は階層内で下に向かってカスケードし、より具体的なレイアウト宣言は常により一般的なものを上書きします。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="28e6f54e33a1151bfd4c7cc4affd14df3525f2db" translate="yes" xml:space="preserve">
          <source>Layouts</source>
          <target state="translated">Layouts</target>
        </trans-unit>
        <trans-unit id="9c2227b01890429dea82f0435c986a7de2991348" translate="yes" xml:space="preserve">
          <source>Layouts and Rendering in Rails</source>
          <target state="translated">Railsでのレイアウトとレンダリング</target>
        </trans-unit>
        <trans-unit id="5e792861fadd8548975876f8194dfffbf0cb481c" translate="yes" xml:space="preserve">
          <source>Layouts can be used to render a common view template around the results of Rails controller actions. Typically, a Rails application will have a couple of layouts that pages will be rendered within. For example, a site might have one layout for a logged in user and another for the marketing or sales side of the site. The logged in user layout might include top-level navigation that should be present across many controller actions. The sales layout for a SaaS app might include top-level navigation for things like &quot;Pricing&quot; and &quot;Contact Us&quot; pages. You would expect each layout to have a different look and feel. You can read about layouts in more detail in the &lt;a href=&quot;layouts_and_rendering&quot;&gt;Layouts and Rendering in Rails&lt;/a&gt; guide.</source>
          <target state="translated">レイアウトを使用して、Railsコントローラーアクションの結果の周囲に共通のビューテンプレートをレンダリングできます。通常、Railsアプリケーションには、ページがレンダリングされるレイアウトがいくつかあります。たとえば、サイトには、ログインしたユーザー用のレイアウトと、サイトのマーケティングまたは販売用のレイアウトがある場合があります。ログインしたユーザーのレイアウトには、多くのコントローラーアクションにわたって存在する必要があるトップレベルのナビゲーションが含まれる場合があります。 SaaSアプリの販売レイアウトには、「価格」ページや「お問い合わせ」ページなどのトップレベルのナビゲーションが含まれる場合があります。レイアウトごとに異なるルックアンドフィールを期待します。レイアウトについて詳しくは、「&lt;a href=&quot;layouts_and_rendering&quot;&gt;Rails&lt;/a&gt;でのレイアウトとレンダリング」ガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="48470ed7993d797dbe5e8d27e23dd9a217c53643" translate="yes" xml:space="preserve">
          <source>Layouts specified at the controller level support the &lt;code&gt;:only&lt;/code&gt; and &lt;code&gt;:except&lt;/code&gt; options. These options take either a method name, or an array of method names, corresponding to method names within the controller:</source>
          <target state="translated">コントローラレベルで指定されたレイアウトは、 &lt;code&gt;:only&lt;/code&gt; および &lt;code&gt;:except&lt;/code&gt; オプションをサポートします。これらのオプションは、コントローラ内のメソッド名に対応するメソッド名またはメソッド名の配列のいずれかを取ります。</target>
        </trans-unit>
        <trans-unit id="e27583837c86c78aaebaf82c394f36c53e1ccbcf" translate="yes" xml:space="preserve">
          <source>Layouts#action_has_layout?</source>
          <target state="translated">Layouts#action_has_layout?</target>
        </trans-unit>
        <trans-unit id="f7cade8c906e9d8975259c8d26198e469b8c71e4" translate="yes" xml:space="preserve">
          <source>Layouts::ClassMethods</source>
          <target state="translated">Layouts::ClassMethods</target>
        </trans-unit>
        <trans-unit id="5617eb863672173bd45cabc2c17a35b9e442eed4" translate="yes" xml:space="preserve">
          <source>Layouts::ClassMethods#layout</source>
          <target state="translated">Layouts::ClassMethods#layout</target>
        </trans-unit>
        <trans-unit id="dab591e309e317fa64fcc8cc09c071b74932d444" translate="yes" xml:space="preserve">
          <source>Lazily load TZInfo::Timezone instances only when they're needed.</source>
          <target state="translated">TZInfo::Timezone インスタンスを必要なときにのみ、遅延的にロードします。</target>
        </trans-unit>
        <trans-unit id="4acd3d668558126efd2cfb5861479b741fa7210e" translate="yes" xml:space="preserve">
          <source>LazyLoadHooks</source>
          <target state="translated">LazyLoadHooks</target>
        </trans-unit>
        <trans-unit id="05f23ec34b8f5c1c142321cf9fb3a41254f5ed9b" translate="yes" xml:space="preserve">
          <source>LazyLoadHooks#on_load</source>
          <target state="translated">LazyLoadHooks#on_load</target>
        </trans-unit>
        <trans-unit id="43d15a08d31d62de7b68ddb2009b76398fc6fafd" translate="yes" xml:space="preserve">
          <source>LazyLoadHooks#run_load_hooks</source>
          <target state="translated">LazyLoadHooks#run_load_hooks</target>
        </trans-unit>
        <trans-unit id="f56145331f8573663f749e0585fba9bafdedf906" translate="yes" xml:space="preserve">
          <source>Leading colons would make the first segment absolute rather than relative: &lt;code&gt;::Billing::Invoice&lt;/code&gt;. That would force &lt;code&gt;Billing&lt;/code&gt; to be looked up only as a top-level constant.</source>
          <target state="translated">先頭のコロンは、最初のセグメントを相対ではなく絶対にします &lt;code&gt;::Billing::Invoice&lt;/code&gt; 。これにより、 &lt;code&gt;Billing&lt;/code&gt; はトップレベルの定数としてのみ検索されます。</target>
        </trans-unit>
        <trans-unit id="0205f20e6f02e7e5bf0f090188c3352d3378c901" translate="yes" xml:space="preserve">
          <source>Lean on the protect_from_forgery declaration to mark which actions are due for same-origin request verification. If protect_from_forgery is enabled on an action, this before_action flags its after_action to verify that JavaScript responses are for XHR requests, ensuring they follow the browser's same-origin policy.</source>
          <target state="translated">protect_from_forgery 宣言に依存して、同一リクエストの検証が必要なアクションをマークします。protect_from_forgery がアクションで有効になっている場合、この before_action はその after_action にフラグを立てて JavaScript レスポンスが XHR リクエストに対するものであることを検証し、ブラウザの同一オリジンポリシーに確実に従っていることを確認します。</target>
        </trans-unit>
        <trans-unit id="d80449c77af0b47c205fab1563e049bc44130805" translate="yes" xml:space="preserve">
          <source>Learn more about &lt;a href=&quot;security#custom-credentials&quot;&gt;managing credentials later in this guide&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;security#custom-credentials&quot;&gt;資格情報の管理の&lt;/a&gt;詳細については、このガイドで後ほど説明します</target>
        </trans-unit>
        <trans-unit id="5120024867e2bd45c0226da8ee5ccca4d252aa19" translate="yes" xml:space="preserve">
          <source>Learn more about &lt;code&gt;redirect_to&lt;/code&gt; and what options you have in &lt;a href=&quot;redirecting&quot;&gt;ActionController::Redirecting&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;redirect_to&lt;/code&gt; の詳細と、&lt;a href=&quot;redirecting&quot;&gt;ActionController :: Redirectingにある&lt;/a&gt;オプションを確認してください。</target>
        </trans-unit>
        <trans-unit id="2680ad714bae01fb2a75924986c28aa6fbc21993" translate="yes" xml:space="preserve">
          <source>Learn more about CSRF attacks and securing your application in the &lt;a href=&quot;https://guides.rubyonrails.org/security.html&quot;&gt;Ruby on Rails Security Guide&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://guides.rubyonrails.org/security.html&quot;&gt;Ruby on Rails Security Guide&lt;/a&gt;で、CSRF攻撃とアプリケーションの保護について詳しく学んでください。</target>
        </trans-unit>
        <trans-unit id="d03a367fb887c4a017cd9d70d02779563c3dfabe" translate="yes" xml:space="preserve">
          <source>Learn more about Unobtrusive JavaScript on &lt;a href=&quot;working_with_javascript_in_rails&quot;&gt;Working With JavaScript in Rails&lt;/a&gt; guide.</source>
          <target state="translated">&lt;a href=&quot;working_with_javascript_in_rails&quot;&gt;RailsでのJavaScriptの&lt;/a&gt;使用に関する控えめなJavaScriptの詳細については、ガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="49a7c9654d7d32bf1a7434e36ba31c8a9d52bd04" translate="yes" xml:space="preserve">
          <source>Learn more about credentials with &lt;code&gt;rails credentials:help&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;rails credentials:help&lt;/code&gt; を使用して、資格情報の詳細を学んでください。</target>
        </trans-unit>
        <trans-unit id="6087ad887326b13b7e705f0f5b49332398028b13" translate="yes" xml:space="preserve">
          <source>Learn more about other session storages in &lt;a href=&quot;action_controller_overview#session&quot;&gt;Action Controller Overview Guide&lt;/a&gt;.</source>
          <target state="translated">その他のセッションストレージの詳細については、&lt;a href=&quot;action_controller_overview#session&quot;&gt;Action Controller概要ガイドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="a361189388c27c3316f9ffe0894462c23768bd0d" translate="yes" xml:space="preserve">
          <source>Learning Rack</source>
          <target state="translated">学習ラック</target>
        </trans-unit>
        <trans-unit id="4004c46012ce2e74f00d47a6df53669577458d0c" translate="yes" xml:space="preserve">
          <source>Leaving the hash off gives the wrong link:</source>
          <target state="translated">ハッシュを外したままにしておくと、間違ったリンクになってしまいます。</target>
        </trans-unit>
        <trans-unit id="57cabcc429f05e3d4a452b279c39df253df905c9" translate="yes" xml:space="preserve">
          <source>Legacy syntax</source>
          <target state="translated">レガシー構文</target>
        </trans-unit>
        <trans-unit id="78d8e5ae3e5b6af734ef6545182637310d10213b" translate="yes" xml:space="preserve">
          <source>Let &lt;a href=&quot;proxyobject&quot;&gt;ActiveSupport::ProxyObject&lt;/a&gt; at least raise exceptions.</source>
          <target state="translated">してみましょう&lt;a href=&quot;proxyobject&quot;&gt;activesupportの:: ProxyObjectは&lt;/a&gt;少なくとも昇給の例外で。</target>
        </trans-unit>
        <trans-unit id="a72602d5db80600fb59df54bed6dd5174594a0dd" translate="yes" xml:space="preserve">
          <source>Let us also move that new comment section out to its own partial. Again, you create a file &lt;code&gt;app/views/comments/_form.html.erb&lt;/code&gt; containing:</source>
          <target state="translated">また、新しいコメントセクションを独自の部分に移動します。ここでも、 &lt;code&gt;app/views/comments/_form.html.erb&lt;/code&gt; を含むファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="96a0635a516af1771ae2eb32708ac151fe4aaaf8" translate="yes" xml:space="preserve">
          <source>Let us modify &lt;code&gt;test_should_create_article&lt;/code&gt; test in &lt;code&gt;articles_controller_test.rb&lt;/code&gt; so that all our test pass:</source>
          <target state="translated">すべてのテストがパスするように、 &lt;code&gt;articles_controller_test.rb&lt;/code&gt; の &lt;code&gt;test_should_create_article&lt;/code&gt; テストを変更してみましょう。</target>
        </trans-unit>
        <trans-unit id="dab4c465b3545675931666804e362f8235200f4c" translate="yes" xml:space="preserve">
          <source>Let us run this newly added test (where &lt;code&gt;6&lt;/code&gt; is the number of line where the test is defined).</source>
          <target state="translated">この新しく追加されたテストを実行してみましょう（ &lt;code&gt;6&lt;/code&gt; はテストが定義されている行の数です）。</target>
        </trans-unit>
        <trans-unit id="b9fcf90507f73f5eb8f58f17d19d3ae4f2f9910f" translate="yes" xml:space="preserve">
          <source>Let's add a method called &lt;code&gt;welcome_email&lt;/code&gt;, that will send an email to the user's registered email address:</source>
          <target state="translated">&lt;code&gt;welcome_email&lt;/code&gt; というメソッドを追加して、ユーザーの登録済みメールアドレスにメールを送信します。</target>
        </trans-unit>
        <trans-unit id="79e1f74aa6ec7b5a5077c8b42b57bd04f8515dc5" translate="yes" xml:space="preserve">
          <source>Let's add a replica for the primary, a new writer called animals and a replica for that as well. To do this we need to change our &lt;code&gt;database.yml&lt;/code&gt; from a 2-tier to a 3-tier config.</source>
          <target state="translated">プライマリのレプリカ、animalsという新しいライター、およびそのレプリカも追加しましょう。これを行うには、 &lt;code&gt;database.yml&lt;/code&gt; を2層構成から3層構成に変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="b48e65eb47d949d7844ff9e16bf80abf6b052f5f" translate="yes" xml:space="preserve">
          <source>Let's add an integration test to our blog application. We'll start with a basic workflow of creating a new blog article, to verify that everything is working properly.</source>
          <target state="translated">ブログアプリに統合テストを追加してみましょう。新しいブログ記事を作成する基本的なワークフローから始めて、すべてが正しく動作しているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="6e3f79475457cf9a5f2a016839cf6a8e669854a2" translate="yes" xml:space="preserve">
          <source>Let's add links to the other views as well, starting with adding this &quot;New Article&quot; link to &lt;code&gt;app/views/articles/index.html.erb&lt;/code&gt;, placing it above the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; tag:</source>
          <target state="translated">他のビューへのリンクも追加してみましょう。まず、この「新しい記事」リンクを &lt;code&gt;app/views/articles/index.html.erb&lt;/code&gt; に追加し、 &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; タグの上に配置します。</target>
        </trans-unit>
        <trans-unit id="dc3ecee55d65665c35f62547c455cc419b0dc82d" translate="yes" xml:space="preserve">
          <source>Let's also make a text part for this email. Not all clients prefer HTML emails, and so sending both is best practice. To do this, create a file called &lt;code&gt;welcome_email.text.erb&lt;/code&gt; in &lt;code&gt;app/views/user_mailer/&lt;/code&gt;:</source>
          <target state="translated">このメールのテキスト部分も作成しましょう。すべてのクライアントがHTMLメールを好むわけではないため、両方を送信することがベストプラクティスです。これを行うには、と呼ばれるファイルを作成 &lt;code&gt;welcome_email.text.erb&lt;/code&gt; をに &lt;code&gt;app/views/user_mailer/&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="6dfb10465abe14397694d1ef3fbb975786f3e93d" translate="yes" xml:space="preserve">
          <source>Let's analyze an example to really understand what that means. While common abuses of language like &quot;the &lt;code&gt;String&lt;/code&gt; class&quot; are convenient, the exposition is going to be precise here for didactic purposes.</source>
          <target state="translated">例を分析して、それが何を意味するかを本当に理解しましょう。「 &lt;code&gt;String&lt;/code&gt; クラス」のような一般的な言語の乱用は便利ですが、ここでは説明のために説明を正確に説明します。</target>
        </trans-unit>
        <trans-unit id="f4ce79534391e97d4f4aa9c82cc741ad12c8def6" translate="yes" xml:space="preserve">
          <source>Let's assume we want to deploy our application to &quot;/app1&quot;. Rails needs to know this directory to generate the appropriate routes:</source>
          <target state="translated">アプリケーションを「/app1」にデプロイしたいとしましょう。Railsは適切なルートを生成するためにこのディレクトリを知る必要があります。</target>
        </trans-unit>
        <trans-unit id="71b6809eee4e5ad984a6e18c3317f2e1911b1c3f" translate="yes" xml:space="preserve">
          <source>Let's break out some more monkeys and pirates.</source>
          <target state="translated">猿と海賊をもっと出してみよう。</target>
        </trans-unit>
        <trans-unit id="0175bd3560f981f045ac3204ff11ccf5cd1e0c8f" translate="yes" xml:space="preserve">
          <source>Let's break this test down so we can understand it.</source>
          <target state="translated">このテストを理解できるように分解してみましょう。</target>
        </trans-unit>
        <trans-unit id="d411cec433d62e9e5131196fc3d8ca677b9020c5" translate="yes" xml:space="preserve">
          <source>Let's consider</source>
          <target state="translated">考えてみましょう</target>
        </trans-unit>
        <trans-unit id="6a2b72ee8dfb84cee80a7035dfdbf117386402d2" translate="yes" xml:space="preserve">
          <source>Let's consider a flight simulator. The application has a default flight model</source>
          <target state="translated">フライトシミュレータを考えてみましょう。このアプリケーションにはデフォルトのフライトモデルがあります。</target>
        </trans-unit>
        <trans-unit id="c00ee8b2221f13d18a00305aa785cc9bb52f8574" translate="yes" xml:space="preserve">
          <source>Let's consider the following module definition:</source>
          <target state="translated">以下のモジュール定義を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="c26c7d6fe559c363e03a6bd3159ae8ce188a0ff1" translate="yes" xml:space="preserve">
          <source>Let's create a simple Rails application to step through each of these commands in context.</source>
          <target state="translated">シンプルなRailsアプリケーションを作成して、それぞれのコマンドをコンテキストで順を追って説明してみましょう。</target>
        </trans-unit>
        <trans-unit id="b1fa58a55971fd9e23ddeee23e8c1d0c89153587" translate="yes" xml:space="preserve">
          <source>Let's imagine that users in some application have login information in the &lt;code&gt;User&lt;/code&gt; model but name and other data in a separate &lt;code&gt;Profile&lt;/code&gt; model:</source>
          <target state="translated">一部のアプリケーションのユーザーが、ログイン情報は &lt;code&gt;User&lt;/code&gt; モデルにあり、名前とその他のデータは別の &lt;code&gt;Profile&lt;/code&gt; モデルにあると想像してください。</target>
        </trans-unit>
        <trans-unit id="21a5e444a84811bf545d3f94d479c8b239f38e28" translate="yes" xml:space="preserve">
          <source>Let's implement the flash message now in our controller. Our &lt;code&gt;:create&lt;/code&gt; action should now look like this:</source>
          <target state="translated">コントローラーにflashメッセージを実装しましょう。当社 &lt;code&gt;:create&lt;/code&gt; アクションは次のようになります。</target>
        </trans-unit>
        <trans-unit id="b51c46ffa72a597d58c3017405a3b8080b7928f4" translate="yes" xml:space="preserve">
          <source>Let's introduce now a subclass of &lt;code&gt;Rectangle&lt;/code&gt;:</source>
          <target state="translated">ここで、 &lt;code&gt;Rectangle&lt;/code&gt; のサブクラスを紹介しましょう。</target>
        </trans-unit>
        <trans-unit id="cd40f9d2fe4074d731d624f45d324731e74d0541" translate="yes" xml:space="preserve">
          <source>Let's look at the code below:</source>
          <target state="translated">下のコードを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="7588d79a31b685899386a77630023f4aad3bc947" translate="yes" xml:space="preserve">
          <source>Let's look at the full error message again:</source>
          <target state="translated">もう一度、エラーメッセージの全文を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="db255fe389309039f7483e2c79350e7b43e7b7d4" translate="yes" xml:space="preserve">
          <source>Let's make our own controller with the controller generator. But what command should we use? Let's ask the generator:</source>
          <target state="translated">コントローラジェネレータを使って自作コントローラを作ってみましょう。しかし、どのようなコマンドを使えばいいのでしょうか?ジェネレーターに聞いてみましょう。</target>
        </trans-unit>
        <trans-unit id="f10ea4f39f4b33b53a25bba08b9359f1fcad5b86" translate="yes" xml:space="preserve">
          <source>Let's make the HABTM fixture go away.</source>
          <target state="translated">HABTMのフィクスチャーを消してしまおう。</target>
        </trans-unit>
        <trans-unit id="af3c0983643d82f65dfb7da47772af56e8bae72d" translate="yes" xml:space="preserve">
          <source>Let's say the &lt;code&gt;users&lt;/code&gt; table has &lt;code&gt;id&lt;/code&gt; as the primary_key but it also has a &lt;code&gt;guid&lt;/code&gt; column. The requirement is that the &lt;code&gt;todos&lt;/code&gt; table should hold the &lt;code&gt;guid&lt;/code&gt; column value as the foreign key and not &lt;code&gt;id&lt;/code&gt; value. This can be achieved like this:</source>
          <target state="translated">さんが言ってみましょう &lt;code&gt;users&lt;/code&gt; テーブルが持つ &lt;code&gt;id&lt;/code&gt; PRIMARY_KEYとしてではなく、それはまた持っている &lt;code&gt;guid&lt;/code&gt; 列を。要件は、 &lt;code&gt;todos&lt;/code&gt; テーブルが &lt;code&gt;id&lt;/code&gt; 値ではなく、 &lt;code&gt;guid&lt;/code&gt; 列の値を外部キーとして保持することです。これは次のようにして実現できます。</target>
        </trans-unit>
        <trans-unit id="8aaa8fd90fd44344aa5ea74de6918d0b560e4441" translate="yes" xml:space="preserve">
          <source>Let's say we have an application with a single primary database and we need to add a new database for some new tables we're adding. The name of the new database will be &quot;animals&quot;.</source>
          <target state="translated">1つのプライマリデータベースを持つアプリケーションを持っていて、新しいテーブルを追加するために新しいデータベースを追加する必要があるとしましょう。新しいデータベースの名前は「動物」とします。</target>
        </trans-unit>
        <trans-unit id="e62d2d4961a0889a900d5b7d7deb016aa106cbd4" translate="yes" xml:space="preserve">
          <source>Let's say we're displaying an article on a page which should be wrapped in a &lt;code&gt;div&lt;/code&gt; for display purposes. Firstly, we'll create a new &lt;code&gt;Article&lt;/code&gt;:</source>
          <target state="translated">表示のために &lt;code&gt;div&lt;/code&gt; でラップする必要があるページに記事を表示しているとしましょう。まず、新しい &lt;code&gt;Article&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="8579674d7daf7815627e340f71121460d49e4cb2" translate="yes" xml:space="preserve">
          <source>Let's say we're in the &lt;code&gt;http://www.example.com/products&lt;/code&gt; action with method POST in case of invalid product.</source>
          <target state="translated">製品が無効な場合に、メソッドPOSTを使用して &lt;code&gt;http://www.example.com/products&lt;/code&gt; アクションにいるとします。</target>
        </trans-unit>
        <trans-unit id="8aec0ccffe5b428a6cb21a91e46b9704b1b5f7fb" translate="yes" xml:space="preserve">
          <source>Let's say we're in the &lt;code&gt;http://www.example.com/shop/checkout?order=desc&amp;amp;page=1&lt;/code&gt; action.</source>
          <target state="translated">&lt;code&gt;http://www.example.com/shop/checkout?order=desc&amp;amp;page=1&lt;/code&gt; アクションにいるとします。</target>
        </trans-unit>
        <trans-unit id="f3e0d2a71301db441896e1ffdd4d512f4c884fe7" translate="yes" xml:space="preserve">
          <source>Let's say you have a &lt;em&gt;BooksController&lt;/em&gt; in your application. Your &lt;em&gt;index&lt;/em&gt; action renders content in &lt;code&gt;app/views/books/index.html.erb&lt;/code&gt; template. When you put a &lt;em&gt;localized variant&lt;/em&gt; of this template: &lt;code&gt;index.es.html.erb&lt;/code&gt; in the same directory, Rails will render content in this template, when the locale is set to &lt;code&gt;:es&lt;/code&gt;. When the locale is set to the default locale, the generic &lt;code&gt;index.html.erb&lt;/code&gt; view will be used. (Future Rails versions may well bring this &lt;em&gt;automagic&lt;/em&gt; localization to assets in &lt;code&gt;public&lt;/code&gt;, etc.)</source>
          <target state="translated">あなたが持っていると言う&lt;em&gt;BooksControllerを&lt;/em&gt;アプリケーションに。あなたの&lt;em&gt;インデックス&lt;/em&gt;アクションは、コンテンツレンダリング &lt;code&gt;app/views/books/index.html.erb&lt;/code&gt; テンプレートを。あなたが置くとき&lt;em&gt;ローカライズバリアント&lt;/em&gt;このテンプレートの： &lt;code&gt;index.es.html.erb&lt;/code&gt; を同じディレクトリに、Railsは、ロケールに設定されている場合、このテンプレートでコンテンツをレンダリングする &lt;code&gt;:es&lt;/code&gt; 。ロケールがデフォルトのロケールに設定されている場合、汎用の &lt;code&gt;index.html.erb&lt;/code&gt; ビューが使用されます。（将来のRailsバージョンでは、この&lt;em&gt;automagicの&lt;/em&gt;ローカリゼーションを &lt;code&gt;public&lt;/code&gt; アセットなどにもたらす可能性があります。）</target>
        </trans-unit>
        <trans-unit id="46e0bd3737a3ceb5c11cdc9352d2399ab7de05d4" translate="yes" xml:space="preserve">
          <source>Let's say you have a navigation menu&amp;hellip;</source>
          <target state="translated">ナビゲーションメニューがあるとしましょう&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="177e78ab7407be2c090f5ae68f3c072dc96edece" translate="yes" xml:space="preserve">
          <source>Let's say you like using &lt;code&gt;Object#not_nil?&lt;/code&gt; and &lt;code&gt;Object#not_blank?&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Object#not_nil?&lt;/code&gt; 使用が好きだとしましょう。および &lt;code&gt;Object#not_blank?&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c9cd3934a0abc016ddefcdb09c99e8dd9ccffe99" translate="yes" xml:space="preserve">
          <source>Let's see for example the definition of the &lt;code&gt;caches_action&lt;/code&gt; controller macro:</source>
          <target state="translated">たとえば、 &lt;code&gt;caches_action&lt;/code&gt; コントローラマクロの定義を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="dda5f06059ddbf981e8fa7bfde1dfc2d0115a597" translate="yes" xml:space="preserve">
          <source>Let's see how Rails autoloads the &lt;code&gt;Post&lt;/code&gt; constant in the &lt;code&gt;PostsController&lt;/code&gt; above assuming the application has a &lt;code&gt;Post&lt;/code&gt; model defined in &lt;code&gt;app/models/post.rb&lt;/code&gt;.</source>
          <target state="translated">アプリケーションに &lt;code&gt;app/models/post.rb&lt;/code&gt; で定義された &lt;code&gt;Post&lt;/code&gt; モデルがあると仮定して、上記の &lt;code&gt;PostsController&lt;/code&gt; でRailsが &lt;code&gt;Post&lt;/code&gt; 定数を自動ロードする方法を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="1212c891c1276d0d0922365aee5189e87122dcb9" translate="yes" xml:space="preserve">
          <source>Let's see the interface Rails created for us.</source>
          <target state="translated">Railsが作ってくれたインターフェースを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="7c9f75a14a6a8fa84a573b0eb3a6e227e9516c06" translate="yes" xml:space="preserve">
          <source>Let's see what a &lt;code&gt;--git&lt;/code&gt; option and a &lt;code&gt;--database=postgresql&lt;/code&gt; option will do for us:</source>
          <target state="translated">&lt;code&gt;--git&lt;/code&gt; オプションと &lt;code&gt;--database=postgresql&lt;/code&gt; オプションが何をするのか見てみましょう：</target>
        </trans-unit>
        <trans-unit id="2463f5acabbb86e1902e7e40a13ca91e4485de9b" translate="yes" xml:space="preserve">
          <source>Let's start by adding this assertion to our &lt;code&gt;test_should_create_article&lt;/code&gt; test:</source>
          <target state="translated">まず、このアサーションを &lt;code&gt;test_should_create_article&lt;/code&gt; テストに追加します。</target>
        </trans-unit>
        <trans-unit id="679242afe97967bee95cf933ac25ed6b6adeee4c" translate="yes" xml:space="preserve">
          <source>Let's start to boot and initialize the app. A Rails application is usually started by running &lt;code&gt;rails console&lt;/code&gt; or &lt;code&gt;rails server&lt;/code&gt;.</source>
          <target state="translated">アプリの起動と初期化を始めましょう。Railsアプリケーションは通常、 &lt;code&gt;rails console&lt;/code&gt; または &lt;code&gt;rails server&lt;/code&gt; を実行することによって開始されます。</target>
        </trans-unit>
        <trans-unit id="26bbb36043b4b51caaf53b4eb429bbb3cd71c66a" translate="yes" xml:space="preserve">
          <source>Let's suppose that you were making a Karaoke machine and a user wants to get the lyrics for a particular song. Each &lt;code&gt;Song&lt;/code&gt; has a particular number of lines and each line takes time &lt;code&gt;num_beats&lt;/code&gt; to finish singing.</source>
          <target state="translated">あなたがカラオケマシンを作成していて、ユーザーが特定の曲の歌詞を取得したいとします。各 &lt;code&gt;Song&lt;/code&gt; には特定の行数があり、各行が歌うのを終了するまでに &lt;code&gt;num_beats&lt;/code&gt; 時間かかります。</target>
        </trans-unit>
        <trans-unit id="b39773d51d4340138e114edc90a5ea57419ae99d" translate="yes" xml:space="preserve">
          <source>Let's suppose the following snippet creates a class (rather than reopening it):</source>
          <target state="translated">以下のスニペットがクラスを作成したとしましょう(開き直るのではなく)。</target>
        </trans-unit>
        <trans-unit id="57e26fc7533f565888b3ecfca314d023ce8533a2" translate="yes" xml:space="preserve">
          <source>Let's suppose we have these class definitions:</source>
          <target state="translated">このようなクラス定義があったとしましょう。</target>
        </trans-unit>
        <trans-unit id="a4090c16fa4ca8c22ac98f2731e3303c82f681b4" translate="yes" xml:space="preserve">
          <source>Let's suppose you are creating a generator that needs to invoke the controller generator from test unit. Your first attempt is:</source>
          <target state="translated">テストユニットからコントローラジェネレータを呼び出す必要があるジェネレータを作成しているとしましょう。最初の試みは</target>
        </trans-unit>
        <trans-unit id="b8d8dd280572f4245c2f9798e4cf4307d53e5d5a" translate="yes" xml:space="preserve">
          <source>Let's take a look at one such test, &lt;code&gt;test_should_get_index&lt;/code&gt; from the file &lt;code&gt;articles_controller_test.rb&lt;/code&gt;.</source>
          <target state="translated">のは、1つのそのようなテスト、を見てみましょう &lt;code&gt;test_should_get_index&lt;/code&gt; ファイルから &lt;code&gt;articles_controller_test.rb&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="fb7b003a2624199393e36191ea09f4b342435f64" translate="yes" xml:space="preserve">
          <source>Let's take a look at some of the things that Rails provides out of the box that are still applicable to API applications.</source>
          <target state="translated">Railsが提供しているもののうち、今でもAPIアプリケーションに適用可能なものをいくつか見てみましょう。</target>
        </trans-unit>
        <trans-unit id="563872689b7d13f35f84ce3e7c9d9cb69f5f4742" translate="yes" xml:space="preserve">
          <source>Let's take a look at what Rails does by default when creating a new resource using the scaffold generator:</source>
          <target state="translated">ここでは、scaffoldジェネレータを使って新しいリソースを作成する際に、Railsがデフォルトで何をしているかを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="2b61280695474ba2f4d47ae92ae0ee897d8bc51b" translate="yes" xml:space="preserve">
          <source>Let's take for example this non-persisted object.</source>
          <target state="translated">例えば、この非パーステッドオブジェクトを例に挙げてみましょう。</target>
        </trans-unit>
        <trans-unit id="97b75242b93becb500d73edfceaaad470ab7fc77" translate="yes" xml:space="preserve">
          <source>Let's talk about unit tests. Unit tests are code that tests and makes assertions about code. In unit testing, we take a little part of code, say a method of a model, and test its inputs and outputs. Unit tests are your friend. The sooner you make peace with the fact that your quality of life will drastically increase when you unit test your code, the better. Seriously. Please visit &lt;a href=&quot;https://guides.rubyonrails.org/testing.html&quot;&gt;the testing guide&lt;/a&gt; for an in-depth look at unit testing.</source>
          <target state="translated">単体テストについて話しましょう。単体テストは、コードをテストしてアサーションを行うコードです。ユニットテストでは、コードの一部（モデルのメソッドなど）を使用して、その入力と出力をテストします。ユニットテストはあなたの友達です。コードの単体テストを行うと、生活の質が劇的に向上するという事実を理解して早ければ早いほど、良い結果が得られます。真剣に。ユニットテストの詳細については&lt;a href=&quot;https://guides.rubyonrails.org/testing.html&quot;&gt;、テストガイド&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="fd189d590d8b1b050d1f34adacad7d94c39e61b0" translate="yes" xml:space="preserve">
          <source>Let's use the act of logging out as an example. The controller can send a message which will be displayed to the user on the next request:</source>
          <target state="translated">ログアウトという行為を例にしてみましょう。コントローラは、次のリクエスト時にユーザーに表示されるメッセージを送信することができます。</target>
        </trans-unit>
        <trans-unit id="1a7302ab1c8547352066ed26da2374047cdadc44" translate="yes" xml:space="preserve">
          <source>Let's wire up the &lt;code&gt;create&lt;/code&gt; in &lt;code&gt;app/controllers/comments_controller.rb&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;app/controllers/comments_controller.rb&lt;/code&gt; の &lt;code&gt;create&lt;/code&gt; を接続しましょう：</target>
        </trans-unit>
        <trans-unit id="992a5765c7ceef439caa841de820744520c02dab" translate="yes" xml:space="preserve">
          <source>Let's write a test for the &lt;code&gt;:show&lt;/code&gt; action:</source>
          <target state="translated">&lt;code&gt;:show&lt;/code&gt; アクションのテストを書いてみましょう：</target>
        </trans-unit>
        <trans-unit id="6388e2763a8787438175ea44759b7a341170f551" translate="yes" xml:space="preserve">
          <source>Lets you selectively disable calls to &lt;code&gt;touch&lt;/code&gt; for the duration of a block.</source>
          <target state="translated">ブロックの期間中、 &lt;code&gt;touch&lt;/code&gt; する呼び出しを選択的に無効にできます。</target>
        </trans-unit>
        <trans-unit id="8acbdbc31bdc854cb88cd725315b1b68aca7a0e7" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution-ShareAlike 4.0 International License.</source>
          <target state="translated">クリエイティブ・コモンズ 表示-継承 4.0 国際ライセンスの下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">MITライセンスに基づいてライセンスされています。</target>
        </trans-unit>
        <trans-unit id="90c56b68f39e7603a156bfa82a13c020a53c399d" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;collectionproxy#method-i-create&quot;&gt;create&lt;/a&gt;, except that if the record is invalid, raises an exception.</source>
          <target state="translated">&lt;a href=&quot;collectionproxy#method-i-create&quot;&gt;create&lt;/a&gt;と同様ですが、レコードが無効な場合は例外が発生します。</target>
        </trans-unit>
        <trans-unit id="f82455ed657d40dfabb8a5dd6261584322dd09d7" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;findermethods#method-i-find_by&quot;&gt;find_by&lt;/a&gt;, except that if no record is found, raises an &lt;a href=&quot;recordnotfound&quot;&gt;ActiveRecord::RecordNotFound&lt;/a&gt; error.</source>
          <target state="translated">&lt;a href=&quot;findermethods#method-i-find_by&quot;&gt;find_by&lt;/a&gt;と同様ですが、レコードが見つからない場合は、&lt;a href=&quot;recordnotfound&quot;&gt;ActiveRecord :: RecordNotFound&lt;/a&gt;エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="1a36c87f81f627d65cc615f8ae7a9afdbe70794c" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;relation#method-i-create_or_find_by&quot;&gt;create_or_find_by&lt;/a&gt;, but calls &lt;a href=&quot;persistence/classmethods#method-i-create-21&quot;&gt;create!&lt;/a&gt; so an exception is raised if the created record is invalid.</source>
          <target state="translated">同様&lt;a href=&quot;relation#method-i-create_or_find_by&quot;&gt;create_or_find_by&lt;/a&gt;が、呼び出しが&lt;a href=&quot;persistence/classmethods#method-i-create-21&quot;&gt;作成します！&lt;/a&gt;そのため、作成されたレコードが無効な場合、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="838678c204cb7edc7ae37ac099a5e73f3f667073" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;relation#method-i-find_or_create_by&quot;&gt;find_or_create_by&lt;/a&gt;, but calls &lt;a href=&quot;persistence/classmethods#method-i-create-21&quot;&gt;create!&lt;/a&gt; so an exception is raised if the created record is invalid.</source>
          <target state="translated">同様&lt;a href=&quot;relation#method-i-find_or_create_by&quot;&gt;find_or_create_by&lt;/a&gt;が、呼び出しが&lt;a href=&quot;persistence/classmethods#method-i-create-21&quot;&gt;作成します！&lt;/a&gt;そのため、作成されたレコードが無効な場合、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="f8856f0a8b7199b002c8122ad2fcd4604b1d6719" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;relation#method-i-find_or_create_by&quot;&gt;find_or_create_by&lt;/a&gt;, but calls new instead of &lt;a href=&quot;persistence/classmethods#method-i-create&quot;&gt;create&lt;/a&gt;.</source>
          <target state="translated">同様&lt;a href=&quot;relation#method-i-find_or_create_by&quot;&gt;find_or_create_by&lt;/a&gt;が、新しいの代わりに呼び出す&lt;a href=&quot;persistence/classmethods#method-i-create&quot;&gt;作成します&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="981e81b63a865974c1cebae7d45b847c46d0c320" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;distance_of_time_in_words&lt;/code&gt;, but where &lt;code&gt;to_time&lt;/code&gt; is fixed to &lt;code&gt;Time.now&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;distance_of_time_in_words&lt;/code&gt; に似ていますが、 &lt;code&gt;to_time&lt;/code&gt; はTime.nowに固定されてい &lt;code&gt;Time.now&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dd2abf706df47832d72f8c321855ea5fb7e3691b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;merge&lt;/code&gt; but the other way around: Merges the receiver into the argument and returns a new hash with indifferent access as result:</source>
          <target state="translated">&lt;code&gt;merge&lt;/code&gt; と同様ですが、その逆：レシーバを引数にマージし、結果として無関心なアクセス権を持つ新しいハッシュを返します。</target>
        </trans-unit>
        <trans-unit id="1945f3936ef206114971a0591dc706d5e224d076" translate="yes" xml:space="preserve">
          <source>Like Action Controller, each mailer class has a corresponding view directory in which each method of the class looks for a template with its name.</source>
          <target state="translated">Action Controllerと同様に、各メーラークラスは対応するビューディレクトリを持ち、クラスの各メソッドはその名前のテンプレートを探します。</target>
        </trans-unit>
        <trans-unit id="8ffafe203ca6452b9469b0ee8ef3f5bd66cb64c9" translate="yes" xml:space="preserve">
          <source>Like all of the other components of an engine, the assets should be namespaced. This means that if you have an asset called &lt;code&gt;style.css&lt;/code&gt;, it should be placed at &lt;code&gt;app/assets/stylesheets/[engine name]/style.css&lt;/code&gt;, rather than &lt;code&gt;app/assets/stylesheets/style.css&lt;/code&gt;. If this asset isn't namespaced, there is a possibility that the host application could have an asset named identically, in which case the application's asset would take precedence and the engine's one would be ignored.</source>
          <target state="translated">エンジンの他のすべてのコンポーネントと同様に、アセットには名前空間を付ける必要があります。あなたが呼ばれる資産がある場合、この手段 &lt;code&gt;style.css&lt;/code&gt; 、それはに置かれるべき &lt;code&gt;app/assets/stylesheets/[engine name]/style.css&lt;/code&gt; ではなく、 &lt;code&gt;app/assets/stylesheets/style.css&lt;/code&gt; 。このアセットに名前空間がない場合、ホストアプリケーションに同じ名前のアセットが含まれる可能性があります。その場合、アプリケーションのアセットが優先され、エンジンのアセットは無視されます。</target>
        </trans-unit>
        <trans-unit id="9d575f43f40942a50e4f39a888b719fa5e7f6f38" translate="yes" xml:space="preserve">
          <source>Like all other validations, &lt;code&gt;validates_with&lt;/code&gt; takes the &lt;code&gt;:if&lt;/code&gt;, &lt;code&gt;:unless&lt;/code&gt; and &lt;code&gt;:on&lt;/code&gt; options. If you pass any other options, it will send those options to the validator class as &lt;code&gt;options&lt;/code&gt;:</source>
          <target state="translated">他のすべての検証と同様に、 &lt;code&gt;validates_with&lt;/code&gt; は &lt;code&gt;:if&lt;/code&gt; 、 &lt;code&gt;:unless&lt;/code&gt; 、および &lt;code&gt;:on&lt;/code&gt; オプションを取ります。他のオプションを渡すと、それらのオプションがオプションとしてバリデータークラスに送信され &lt;code&gt;options&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="01fcd4d2ae4700b5f2465b1ff92871077189f820" translate="yes" xml:space="preserve">
          <source>Like an &lt;code&gt;image_tag&lt;/code&gt; you can supply a path, either absolute, or relative to the &lt;code&gt;public/videos&lt;/code&gt; directory. Additionally you can specify the &lt;code&gt;size: &quot;#{width}x#{height}&quot;&lt;/code&gt; option just like an &lt;code&gt;image_tag&lt;/code&gt;. Video tags can also have any of the HTML options specified at the end (&lt;code&gt;id&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt; et al).</source>
          <target state="translated">&lt;code&gt;image_tag&lt;/code&gt; と同様に、絶対パスまたは &lt;code&gt;public/videos&lt;/code&gt; ディレクトリへの相対パスを指定できます。さらに、 &lt;code&gt;image_tag&lt;/code&gt; と同じように、 &lt;code&gt;size: &quot;#{width}x#{height}&quot;&lt;/code&gt; オプションを指定できます。ビデオタグには、最後に指定されたHTMLオプション（ &lt;code&gt;id&lt;/code&gt; 、 &lt;code&gt;class&lt;/code&gt; など）も含めることができます。</target>
        </trans-unit>
        <trans-unit id="2ebbef68061adecb878f7d42134a495f64524522" translate="yes" xml:space="preserve">
          <source>Like everything else in your Rails application, you can test your routes. Route tests reside in &lt;code&gt;test/controllers/&lt;/code&gt; or are part of controller tests.</source>
          <target state="translated">Railsアプリケーションの他のすべてと同様に、ルートをテストできます。ルートテストは &lt;code&gt;test/controllers/&lt;/code&gt; 存在するか、コントローラテストの一部です。</target>
        </trans-unit>
        <trans-unit id="aee8e6aaa6eb1e9d33d334a7bfe242f7cc49970c" translate="yes" xml:space="preserve">
          <source>Like interceptors, you need to register observers with the Action Mailer framework. You can do this in an initializer file &lt;code&gt;config/initializers/email_delivery_observer.rb&lt;/code&gt;</source>
          <target state="translated">インターセプターと同様に、アクションメーラーフレームワークにオブザーバーを登録する必要があります。これは、初期化ファイル &lt;code&gt;config/initializers/email_delivery_observer.rb&lt;/code&gt; で行うことができます</target>
        </trans-unit>
        <trans-unit id="91c20106ed1d5b3e7ee5eb18cac235356a844f06" translate="yes" xml:space="preserve">
          <source>Like other &lt;code&gt;before_*&lt;/code&gt; callbacks if &lt;code&gt;before_validation&lt;/code&gt; throws &lt;code&gt;:abort&lt;/code&gt; then &lt;code&gt;valid?&lt;/code&gt; will not be called.</source>
          <target state="translated">他の同様 &lt;code&gt;before_*&lt;/code&gt; 場合のコールバック &lt;code&gt;before_validation&lt;/code&gt; がスロー &lt;code&gt;:abort&lt;/code&gt; その後、 &lt;code&gt;valid?&lt;/code&gt; 呼び出されません。</target>
        </trans-unit>
        <trans-unit id="5dd204ef14d7b85ee67171cb097475f1e6871271" translate="yes" xml:space="preserve">
          <source>Like the &lt;code&gt;remove_column&lt;/code&gt; and &lt;code&gt;add_column&lt;/code&gt; Rails provides the &lt;code&gt;change_column&lt;/code&gt; migration method.</source>
          <target state="translated">同様 &lt;code&gt;remove_column&lt;/code&gt; と &lt;code&gt;add_column&lt;/code&gt; Railsの提供 &lt;code&gt;change_column&lt;/code&gt; の移行方法を。</target>
        </trans-unit>
        <trans-unit id="36d6a2738d70d70feb17c5c4ce6fb8a243819c54" translate="yes" xml:space="preserve">
          <source>Like the &lt;code&gt;video_tag&lt;/code&gt;, the &lt;code&gt;audio_tag&lt;/code&gt; has special options:</source>
          <target state="translated">同様 &lt;code&gt;video_tag&lt;/code&gt; 、 &lt;code&gt;audio_tag&lt;/code&gt; は特別なオプションがあります。</target>
        </trans-unit>
        <trans-unit id="e66a5dc476fc73af9f8055914d8ed515c1102014" translate="yes" xml:space="preserve">
          <source>Like the Active Record methods, the callback chain is aborted as soon as one of the methods throws &lt;code&gt;:abort&lt;/code&gt;.</source>
          <target state="translated">Active Recordメソッドと同様に、メソッドの1つが &lt;code&gt;:abort&lt;/code&gt; をスローするとすぐに、コールバックチェーンが中止されます。</target>
        </trans-unit>
        <trans-unit id="06becc0802c58a331912f0807cf74457815d184a" translate="yes" xml:space="preserve">
          <source>Like the Executor, the Reloader also wraps application code. If the Executor is not already active on the current thread, the Reloader will invoke it for you, so you only need to call one. This also guarantees that everything the Reloader does, including all its callback invocations, occurs wrapped inside the Executor.</source>
          <target state="translated">Executor と同様に、Reloader もアプリケーションコードをラップします。現在のスレッドで Executor がまだアクティブになっていない場合は、Reloader が代わりに Executor を呼び出してくれるので、必要なのは 1 つだけです。これにより、Reloader が行うすべてのコールバック呼び出しを含めたすべての動作が Executor の中でラップされていることが保証されます。</target>
        </trans-unit>
        <trans-unit id="366f425cd5b9e6652a38ac7f7aa971788b88b9e8" translate="yes" xml:space="preserve">
          <source>Like the other examples, this will behave similarly to a class method.</source>
          <target state="translated">他の例と同様に、これはクラスメソッドと同じように動作します。</target>
        </trans-unit>
        <trans-unit id="ebba6a2344880667e5d34781e11c86287eaa9d87" translate="yes" xml:space="preserve">
          <source>Like with Hash#merge in the standard library, a block can be provided to merge values:</source>
          <target state="translated">標準ライブラリのHash#mergeと同様に、値をマージするためのブロックを提供することができます。</target>
        </trans-unit>
        <trans-unit id="fb4789449468fc495b47f2645508781ca736af5a" translate="yes" xml:space="preserve">
          <source>Like with any blog, our readers will create their comments directly after reading the article, and once they have added their comment, will be sent back to the article show page to see their comment now listed. Due to this, our &lt;code&gt;CommentsController&lt;/code&gt; is there to provide a method to create comments and delete spam comments when they arrive.</source>
          <target state="translated">他のブログと同様に、読者は記事を読んだ直後にコメントを作成し、コメントを追加すると、記事の表示ページに送り返されてコメントが一覧表示されます。このため、 &lt;code&gt;CommentsController&lt;/code&gt; には、コメントを作成したり、スパムコメントが到着したときに削除したりするメソッドが用意されています。</target>
        </trans-unit>
        <trans-unit id="ff5496f02f2e70dd87939f4f922ad6359b435663" translate="yes" xml:space="preserve">
          <source>Likewise, if a message has no purpose it won't be returned when verifying with a specific purpose.</source>
          <target state="translated">同様に、メッセージに目的がない場合は、特定の目的で検証しても返されません。</target>
        </trans-unit>
        <trans-unit id="7f9f56dc5d9dac067cad8e9787f85e70aa8451e2" translate="yes" xml:space="preserve">
          <source>Likewise, in the controller</source>
          <target state="translated">同様に、コントローラでは</target>
        </trans-unit>
        <trans-unit id="9043e4d4d1671a725ba2238469203640ef3b4115" translate="yes" xml:space="preserve">
          <source>Likewise, once retrieved an Active Record object can be destroyed which removes it from the database.</source>
          <target state="translated">同様に、一度取得したアクティブレコードオブジェクトは破棄してデータベースから削除することができます。</target>
        </trans-unit>
        <trans-unit id="1e39e2da3e09996465c4f4ce0479cc61d8bd528e" translate="yes" xml:space="preserve">
          <source>Limit and Offset</source>
          <target state="translated">リミットとオフセット</target>
        </trans-unit>
        <trans-unit id="4f68bad7da836e631fb2248fb1abb438211c676f" translate="yes" xml:space="preserve">
          <source>Limit the set of zones provided by TZInfo to a meaningful subset of 134 zones.</source>
          <target state="translated">TZInfoによって提供されるゾーンのセットを134のゾーンの意味のあるサブセットに制限する。</target>
        </trans-unit>
        <trans-unit id="1605fb4368464e150eb13ea430ef0ff67931d853" translate="yes" xml:space="preserve">
          <source>Limits are honored, and if present there is no requirement for the batch size, it can be less than, equal, or greater than the limit.</source>
          <target state="translated">制限は尊重され、バッチサイズのための要件が存在しない場合、それは制限よりも小さいか、等しいか、または制限よりも大きいことができます。</target>
        </trans-unit>
        <trans-unit id="7d2bb2ad6044f129fa674c47902d971b813e5412" translate="yes" xml:space="preserve">
          <source>Limits are honored, and if present there is no requirement for the batch size: it can be less than, equal to, or greater than the limit.</source>
          <target state="translated">制限は尊重され、存在する場合は、バッチサイズの要件はありません:それは制限よりも小さいか、等しいか、または制限よりも大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="a0453458ad839bba5dbe50a404dd500b022d2db6" translate="yes" xml:space="preserve">
          <source>Limits the byte size of the string to a number of bytes without breaking characters. Usable when the storage for a string is limited for some reason.</source>
          <target state="translated">文字列のバイト数を、文字を壊さずにバイト数に制限します。何らかの理由で文字列のストレージが制限されている場合に使用できます。</target>
        </trans-unit>
        <trans-unit id="8717faa36eea1d1c7661ae98c71e5bedde325942" translate="yes" xml:space="preserve">
          <source>Linking to Files</source>
          <target state="translated">ファイルへのリンク</target>
        </trans-unit>
        <trans-unit id="e2ae7cc433871751f8c4fe89e1a46b8934cd7aac" translate="yes" xml:space="preserve">
          <source>Lint Tests</source>
          <target state="translated">リントテスト</target>
        </trans-unit>
        <trans-unit id="a1464f7beeb518a1b885870631c7f3a94b56fd43" translate="yes" xml:space="preserve">
          <source>List all validators that are being used to validate a specific attribute.</source>
          <target state="translated">特定の属性を検証するために使用されているバリデータをすべてリストアップします。</target>
        </trans-unit>
        <trans-unit id="9756c11c70cc0c3e6447ead1a20c3b8bfd39a733" translate="yes" xml:space="preserve">
          <source>List all validators that are being used to validate the model using &lt;code&gt;validates_with&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;validates_with&lt;/code&gt; メソッドを使用してモデルを検証するために使用されているすべてのバリデーターをリストします。</target>
        </trans-unit>
        <trans-unit id="0f3720ccefa495f1f67d13bfaf93c2c1ac631f1f" translate="yes" xml:space="preserve">
          <source>List of Free Programming Books</source>
          <target state="translated">無料で読めるプログラミングの本一覧</target>
        </trans-unit>
        <trans-unit id="407b7ccb6a8ea464943a7436167fbbcc36291043" translate="yes" xml:space="preserve">
          <source>List of HTTP request methods from the following RFCs: Hypertext Transfer Protocol &amp;ndash; HTTP/1.1 (&lt;a href=&quot;https://www.ietf.org/rfc/rfc2616.txt&quot;&gt;www.ietf.org/rfc/rfc2616.txt&lt;/a&gt;) HTTP Extensions for Distributed Authoring &amp;ndash; WEBDAV (&lt;a href=&quot;https://www.ietf.org/rfc/rfc2518.txt&quot;&gt;www.ietf.org/rfc/rfc2518.txt&lt;/a&gt;) Versioning Extensions to WebDAV (&lt;a href=&quot;https://www.ietf.org/rfc/rfc3253.txt&quot;&gt;www.ietf.org/rfc/rfc3253.txt&lt;/a&gt;) Ordered Collections Protocol (WebDAV) (&lt;a href=&quot;https://www.ietf.org/rfc/rfc3648.txt&quot;&gt;www.ietf.org/rfc/rfc3648.txt&lt;/a&gt;) Web Distributed Authoring and Versioning (WebDAV) Access Control Protocol (&lt;a href=&quot;https://www.ietf.org/rfc/rfc3744.txt&quot;&gt;www.ietf.org/rfc/rfc3744.txt&lt;/a&gt;) Web Distributed Authoring and Versioning (WebDAV) SEARCH (&lt;a href=&quot;https://www.ietf.org/rfc/rfc5323.txt&quot;&gt;www.ietf.org/rfc/rfc5323.txt&lt;/a&gt;) Calendar Extensions to WebDAV (&lt;a href=&quot;https://www.ietf.org/rfc/rfc4791.txt&quot;&gt;www.ietf.org/rfc/rfc4791.txt&lt;/a&gt;) PATCH &lt;a href=&quot;../method&quot;&gt;Method&lt;/a&gt; for HTTP (&lt;a href=&quot;https://www.ietf.org/rfc/rfc5789.txt&quot;&gt;www.ietf.org/rfc/rfc5789.txt&lt;/a&gt;)</source>
          <target state="translated">次のRFCのHTTPリクエストメソッドのリスト：ハイパーテキスト転送プロトコル&amp;ndash; HTTP / 1.1（&lt;a href=&quot;https://www.ietf.org/rfc/rfc2616.txt&quot;&gt;www.ietf.org/rfc/rfc2616.txt&lt;/a&gt;）分散オーサリング用のHTTP拡張&amp;ndash; WEBDAV（&lt;a href=&quot;https://www.ietf.org/rfc/rfc2518.txt&quot;&gt;www.ietf.org/rfc/rfc2518.txt&lt;/a&gt;） WebDAVのバージョン管理拡張機能（&lt;a href=&quot;https://www.ietf.org/rfc/rfc3253.txt&quot;&gt;www.ietf.org/rfc/rfc3253.txt）Ordered&lt;/a&gt; Collections Protocol（WebDAV）（&lt;a href=&quot;https://www.ietf.org/rfc/rfc3648.txt&quot;&gt;www.ietf.org/rfc/rfc3648.txt&lt;/a&gt;）Web Distributed Authoring and Versioning（WebDAV）Access Control Protocol（&lt;a href=&quot;https://www.ietf.org/rfc/rfc3744.txt&quot;&gt;www。 ietf.org/rfc/rfc3744.txt&lt;/a&gt;）のWebオーサリングとバージョン管理（WebDAV）SEARCH（分散&lt;a href=&quot;https://www.ietf.org/rfc/rfc5323.txt&quot;&gt;www.ietf.org/rfc/rfc5323.txt&lt;/a&gt;のWebDAVに）カレンダー拡張機能を（&lt;a href=&quot;https://www.ietf.org/rfc/rfc4791.txt&quot;&gt;www.ietf.org/rfc/rfc4791.txt&lt;/a&gt;）PATCH HTTPの&lt;a href=&quot;../method&quot;&gt;メソッド&lt;/a&gt;（&lt;a href=&quot;https://www.ietf.org/rfc/rfc5789.txt&quot;&gt;www.ietf.org/rfc/rfc5789.txt&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="e99b9b6b4d6ae76f036d8dca5b804e70b84aaf44" translate="yes" xml:space="preserve">
          <source>Listing Existing Routes</source>
          <target state="translated">既存のルートをリストアップ</target>
        </trans-unit>
        <trans-unit id="a3bd4dc53839cb5b27fe373d0c90296d3ac3ae04" translate="yes" xml:space="preserve">
          <source>Listing all articles</source>
          <target state="translated">すべての記事をリストアップ</target>
        </trans-unit>
        <trans-unit id="f0de68777e9549b34e900beb10c9ee85fb7009c4" translate="yes" xml:space="preserve">
          <source>Live Compilation</source>
          <target state="translated">ライブコンピレーション</target>
        </trans-unit>
        <trans-unit id="e87779f8c44830dda0afa1d38923843e3867f226" translate="yes" xml:space="preserve">
          <source>Live Streaming of Arbitrary Data</source>
          <target state="translated">任意データのライブストリーミング</target>
        </trans-unit>
        <trans-unit id="1de45b5aa2fca7905d7dc09902ec0937f54991cc" translate="yes" xml:space="preserve">
          <source>Live#process</source>
          <target state="translated">Live#process</target>
        </trans-unit>
        <trans-unit id="6b673d9f50ed21fc6d9ccf9a74fec9716a0a7c34" translate="yes" xml:space="preserve">
          <source>Live#response_body=</source>
          <target state="translated">Live#response_body=</target>
        </trans-unit>
        <trans-unit id="1f8628696f61ead3bad365dcf9e48ec45e356b1a" translate="yes" xml:space="preserve">
          <source>Live::SSE</source>
          <target state="translated">Live::SSE</target>
        </trans-unit>
        <trans-unit id="e80cbd3ad532e9de26e75dec756d632ae670e179" translate="yes" xml:space="preserve">
          <source>Live::SSE#close</source>
          <target state="translated">Live::SSE#close</target>
        </trans-unit>
        <trans-unit id="6ca07fe7ffa55271abd157aad738f9c911eccd09" translate="yes" xml:space="preserve">
          <source>Live::SSE#write</source>
          <target state="translated">Live::SSE#write</target>
        </trans-unit>
        <trans-unit id="2002f9ba4a5ddf3e6317fd5214f79f817a7c0f7b" translate="yes" xml:space="preserve">
          <source>Live::SSE::new</source>
          <target state="translated">Live::SSE::new</target>
        </trans-unit>
        <trans-unit id="0856eaf6a58aba3e18f24940f49d7a541bb5fbf7" translate="yes" xml:space="preserve">
          <source>Load Balancing Replicas</source>
          <target state="translated">ロードバランシングレプリカ</target>
        </trans-unit>
        <trans-unit id="3f211060ae86ba78f9cf3ddbf2e12e4cdd937256" translate="yes" xml:space="preserve">
          <source>Load Interlock</source>
          <target state="translated">ロードインターロック</target>
        </trans-unit>
        <trans-unit id="3b57c97e1176888fbdd46c4bd908ef2a819c9b3e" translate="yes" xml:space="preserve">
          <source>Load Rails generators and invoke the registered hooks. Check &lt;code&gt;Rails::Railtie.generators&lt;/code&gt; for more info.</source>
          <target state="translated">Railsジェネレーターをロードし、登録されたフックを呼び出します。詳細については、 &lt;code&gt;Rails::Railtie.generators&lt;/code&gt; を確認してください。</target>
        </trans-unit>
        <trans-unit id="90e7e9635304b55840a29eb4e6fe7f20cc9f5fa9" translate="yes" xml:space="preserve">
          <source>Load Rails runner and invoke the registered hooks. Check &lt;code&gt;Rails::Railtie.runner&lt;/code&gt; for more info.</source>
          <target state="translated">Railsランナーをロードし、登録されたフックを呼び出します。詳細については、 &lt;code&gt;Rails::Railtie.runner&lt;/code&gt; を確認してください。</target>
        </trans-unit>
        <trans-unit id="7f519035b4f9c4608d417cc7916003ffcfb5efb6" translate="yes" xml:space="preserve">
          <source>Load Rake, railties tasks and invoke the registered hooks. Check &lt;code&gt;Rails::Railtie.rake_tasks&lt;/code&gt; for more info.</source>
          <target state="translated">Rake、railtiesタスクをロードし、登録されたフックを呼び出します。詳細については、 &lt;code&gt;Rails::Railtie.rake_tasks&lt;/code&gt; を確認してください。</target>
        </trans-unit>
        <trans-unit id="248737ce5d09b3292262076a9f3ec47f2b88e069" translate="yes" xml:space="preserve">
          <source>Load balancing replicas</source>
          <target state="translated">ロードバランシングレプリカ</target>
        </trans-unit>
        <trans-unit id="5b040245677803bf954f78cdd2af2a4400d98afd" translate="yes" xml:space="preserve">
          <source>Load console and invoke the registered hooks. Check &lt;code&gt;Rails::Railtie.console&lt;/code&gt; for more info.</source>
          <target state="translated">コンソールをロードし、登録されたフックを呼び出します。詳細については、 &lt;code&gt;Rails::Railtie.console&lt;/code&gt; を確認してください。</target>
        </trans-unit>
        <trans-unit id="1cc55c2158b1ec32df371ef3e42b70f4ecfbd7e5" translate="yes" xml:space="preserve">
          <source>Load data from db/seeds.rb file. It can be used in to load engines' seeds, e.g.:</source>
          <target state="translated">db/seeds.rbファイルからデータをロードします。これはエンジンのシードをロードする際に使用できます。</target>
        </trans-unit>
        <trans-unit id="c9ec4dd9e6e9589e6eb04e8827dc323ba0606dc6" translate="yes" xml:space="preserve">
          <source>Load the fixture data into the table</source>
          <target state="translated">フィクスチャデータをテーブルにロード</target>
        </trans-unit>
        <trans-unit id="46559e0eb7289033adcb2334be83299e56fb790b" translate="yes" xml:space="preserve">
          <source>LoadError</source>
          <target state="translated">LoadError</target>
        </trans-unit>
        <trans-unit id="c6a9492b638a409f67b0d9e982b3e7d774ce79be" translate="yes" xml:space="preserve">
          <source>LoadError#is_missing?</source>
          <target state="translated">LoadError#is_missing?</target>
        </trans-unit>
        <trans-unit id="680b0dbdca06c127414899a3ee820eac94b1b989" translate="yes" xml:space="preserve">
          <source>Loading Mechanism</source>
          <target state="translated">ローディング機構</target>
        </trans-unit>
        <trans-unit id="2ee3534a3ee9902cefe30be9a319bf71af143f92" translate="yes" xml:space="preserve">
          <source>Loading Rails</source>
          <target state="translated">レールの読み込み</target>
        </trans-unit>
        <trans-unit id="b6d4e36c8ec129c107705cec5ce7a52230bcbdac" translate="yes" xml:space="preserve">
          <source>Loading Rake Tasks and &lt;a href=&quot;generators&quot;&gt;Generators&lt;/a&gt;</source>
          <target state="translated">Rakeタスクと&lt;a href=&quot;generators&quot;&gt;ジェネレーターの&lt;/a&gt;読み込み</target>
        </trans-unit>
        <trans-unit id="dc26c6048f64ac1b38aa517f836e37fbf66e2c1d" translate="yes" xml:space="preserve">
          <source>Loading nested relationships is possible using a Hash:</source>
          <target state="translated">入れ子になった関係の読み込みはHashを使って行うことができます。</target>
        </trans-unit>
        <trans-unit id="6a2179426c96029e473583f4db63f8591c481484" translate="yes" xml:space="preserve">
          <source>Loading priority</source>
          <target state="translated">読み込み優先度</target>
        </trans-unit>
        <trans-unit id="f97bb749d00e9d8d7b4d3cd28987c05e88b7ce8e" translate="yes" xml:space="preserve">
          <source>Loads and returns the entire raw configuration of database from values stored in &lt;code&gt;config/database.yml&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;config/database.yml&lt;/code&gt; に保存されている値からデータベースの生の設定全体をロードして返します。</target>
        </trans-unit>
        <trans-unit id="96e2841f795c120ab7abbb2a3ce3f19e15e77e86" translate="yes" xml:space="preserve">
          <source>Local Precompilation</source>
          <target state="translated">ローカルプリコンパイル</target>
        </trans-unit>
        <trans-unit id="1c19411016a1397c6d7b57cf20afdd1da2dd9035" translate="yes" xml:space="preserve">
          <source>Local cache. Hot in-memory primary cache within block/middleware scope.</source>
          <target state="translated">ローカルキャッシュ。ブロック/ミドルウェアスコープ内のホットインメモリプライマリキャッシュ。</target>
        </trans-unit>
        <trans-unit id="ba7f74c4406ac9a4770f83a94dfa9c053e17cdd8" translate="yes" xml:space="preserve">
          <source>Local compilation allows you to commit the compiled files into source control, and deploy as normal.</source>
          <target state="translated">ローカルでのコンパイルでは、コンパイルしたファイルをソースコントロールにコミットし、通常通りにデプロイすることができます。</target>
        </trans-unit>
        <trans-unit id="f55dab02536ee16f582d5325dacc099456f85791" translate="yes" xml:space="preserve">
          <source>Locales.</source>
          <target state="translated">Locales.</target>
        </trans-unit>
        <trans-unit id="90074f8117f03461acc7b696a5b8d3dccb4b250b" translate="yes" xml:space="preserve">
          <source>Localization can also be based purely on the translation of the attribute-name (if you are using &lt;a href=&quot;../../activerecord&quot;&gt;ActiveRecord&lt;/a&gt;):</source>
          <target state="translated">ローカリゼーションは、純粋に属性名の変換に基づくこともできます（&lt;a href=&quot;../../activerecord&quot;&gt;ActiveRecord&lt;/a&gt;を使用している場合）。</target>
        </trans-unit>
        <trans-unit id="a3a34118a7f1edcd0e1c47f55d3079c60385b677" translate="yes" xml:space="preserve">
          <source>Localized Views</source>
          <target state="translated">ローカライズされたビュー</target>
        </trans-unit>
        <trans-unit id="4c03678b420b8bf20d3d6c624f864ad7ee683883" translate="yes" xml:space="preserve">
          <source>Locate a specific time zone object. If the argument is a string, it is interpreted to mean the name of the timezone to locate. If it is a numeric value it is either the hour offset, or the second offset, of the timezone to find. (The first one with that offset will be returned.) Returns &lt;code&gt;nil&lt;/code&gt; if no such time zone is known to the system.</source>
          <target state="translated">特定のタイムゾーンオブジェクトを見つけます。引数が文字列の場合、検索するタイムゾーンの名前を意味すると解釈されます。数値の場合は、検索するタイムゾーンの時間オフセットまたは2番目のオフセットのいずれかです。（そのオフセットを持つ最初のものが返されます。）そのようなタイムゾーンがシステムに認識されていない場合は、 &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="eb05c96a9e2a4707170d9c3b8a23447c38f4cffd" translate="yes" xml:space="preserve">
          <source>Locations for Initialization Code</source>
          <target state="translated">初期化コードの位置</target>
        </trans-unit>
        <trans-unit id="710ae4ff639eebf3d4df032ac4c7f3a3743c7b07" translate="yes" xml:space="preserve">
          <source>LockWaitTimeout</source>
          <target state="translated">LockWaitTimeout</target>
        </trans-unit>
        <trans-unit id="70835a0129c110391e7f829d841581f090cc206d" translate="yes" xml:space="preserve">
          <source>Locking Records for Update</source>
          <target state="translated">更新のための記録のロック</target>
        </trans-unit>
        <trans-unit id="df60e973a265b7d703153225e3ca5b47b7d40460" translate="yes" xml:space="preserve">
          <source>Locking is helpful for preventing race conditions when updating records in the database and ensuring atomic updates.</source>
          <target state="translated">ロックは、データベース内のレコードを更新する際の競合状態を防止し、アトミックな更新を確実に行うために役立ちます。</target>
        </trans-unit>
        <trans-unit id="8f4169d04da897048c43e4c9684fc2f239bde026" translate="yes" xml:space="preserve">
          <source>Locking::Optimistic</source>
          <target state="translated">Locking::Optimistic</target>
        </trans-unit>
        <trans-unit id="2f864ade87e4b991694ad9e9afa97f92ae24daed" translate="yes" xml:space="preserve">
          <source>Locking::Optimistic::ClassMethods</source>
          <target state="translated">Locking::Optimistic::ClassMethods</target>
        </trans-unit>
        <trans-unit id="efc6084f6c49058a0f0ef20343618f9318154bab" translate="yes" xml:space="preserve">
          <source>Locking::Optimistic::ClassMethods#locking_column</source>
          <target state="translated">Locking::Optimistic::ClassMethods#locking_column</target>
        </trans-unit>
        <trans-unit id="08b053fe703a6fda9c517d44062753cd85d1e48b" translate="yes" xml:space="preserve">
          <source>Locking::Optimistic::ClassMethods#locking_column=</source>
          <target state="translated">Locking::Optimistic::ClassMethods#locking_column=</target>
        </trans-unit>
        <trans-unit id="8b926b531b9aed70e598004702c9afc9ff288d3b" translate="yes" xml:space="preserve">
          <source>Locking::Optimistic::ClassMethods#locking_enabled?</source>
          <target state="translated">Locking::Optimistic::ClassMethods#locking_enabled?</target>
        </trans-unit>
        <trans-unit id="a93398134569361708a52f98f356d046e6d55882" translate="yes" xml:space="preserve">
          <source>Locking::Optimistic::ClassMethods#reset_locking_column</source>
          <target state="translated">Locking::Optimistic::ClassMethods#reset_locking_column</target>
        </trans-unit>
        <trans-unit id="c589b468cf024c9825b7795a069b9d21a6f97377" translate="yes" xml:space="preserve">
          <source>Locking::Optimistic::ClassMethods#update_counters</source>
          <target state="translated">Locking::Optimistic::ClassMethods#update_counters</target>
        </trans-unit>
        <trans-unit id="be460ffa012cbe0430d2f9788757f594528a1561" translate="yes" xml:space="preserve">
          <source>Locking::Pessimistic</source>
          <target state="translated">Locking::Pessimistic</target>
        </trans-unit>
        <trans-unit id="d06e7be0414bb22dece5eb8c8424c6ced1994179" translate="yes" xml:space="preserve">
          <source>Locking::Pessimistic#lock!</source>
          <target state="translated">Locking::Pessimistic#lock!</target>
        </trans-unit>
        <trans-unit id="0feea6ff63eb300cd3671f76b7c22268524140de" translate="yes" xml:space="preserve">
          <source>Locking::Pessimistic#with_lock</source>
          <target state="translated">Locking::Pessimistic#with_lock</target>
        </trans-unit>
        <trans-unit id="1666df53d33ece6d245d229a5b15f3cd95f66b69" translate="yes" xml:space="preserve">
          <source>Log Filtering</source>
          <target state="translated">ログフィルタリング</target>
        </trans-unit>
        <trans-unit id="0797e5297ca5c23288b5154f0d790da08cf46509" translate="yes" xml:space="preserve">
          <source>Log Levels</source>
          <target state="translated">ログレベル</target>
        </trans-unit>
        <trans-unit id="7f1c49dd337173f24af84a17222b9b4d40ebbf67" translate="yes" xml:space="preserve">
          <source>Log all deprecation warnings to +$stderr+.</source>
          <target state="translated">すべての Deprecation 警告を +$stderr+に記録します。</target>
        </trans-unit>
        <trans-unit id="8341546ec1ee881b75ca43bb8090792a0d48ce20" translate="yes" xml:space="preserve">
          <source>Log all deprecation warnings to &lt;code&gt;Rails.logger&lt;/code&gt;.</source>
          <target state="translated">すべての非推奨警告を &lt;code&gt;Rails.logger&lt;/code&gt; に記録します。</target>
        </trans-unit>
        <trans-unit id="c2d2e22437d49b9714bdc19ff30351f11a7a7a74" translate="yes" xml:space="preserve">
          <source>Log subscriber also has some helpers to deal with logging and automatically flushes all logs when the request finishes (via &lt;code&gt;action_dispatch.callback&lt;/code&gt; notification) in a Rails environment.</source>
          <target state="translated">ログサブスクライバーには、ロギングを処理するヘルパーがいくつかあり、Rails環境でリクエストが &lt;code&gt;action_dispatch.callback&lt;/code&gt; （action_dispatch.callback通知を介して）すべてのログが自動的にフラッシュされます。</target>
        </trans-unit>
        <trans-unit id="c5250cfa995360aa285147b0f1c57abc6ca7f730" translate="yes" xml:space="preserve">
          <source>Log tags (&lt;code&gt;taggers&lt;/code&gt;) can be an &lt;a href=&quot;../../array&quot;&gt;Array&lt;/a&gt; containing: methods that the &lt;code&gt;request&lt;/code&gt; object responds to, objects that respond to &lt;code&gt;to_s&lt;/code&gt; or Proc objects that accept an instance of the &lt;code&gt;request&lt;/code&gt; object.</source>
          <target state="translated">ログタグ（ &lt;code&gt;taggers&lt;/code&gt; ）であることができる&lt;a href=&quot;../../array&quot;&gt;配列&lt;/a&gt;を含む：メソッドことを &lt;code&gt;request&lt;/code&gt; するオブジェクト応答にその応答オブジェクト &lt;code&gt;to_s&lt;/code&gt; またはPROCは、それがインスタンス受け入れるオブジェクト &lt;code&gt;request&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="5a90aa65e0a6658543600ca7e1e91262921df2de" translate="yes" xml:space="preserve">
          <source>LogSubscriber</source>
          <target state="translated">LogSubscriber</target>
        </trans-unit>
        <trans-unit id="218d5e774207d1d66e3f9b66f20bd4af3471f172" translate="yes" xml:space="preserve">
          <source>LogSubscriber#deliver</source>
          <target state="translated">LogSubscriber#deliver</target>
        </trans-unit>
        <trans-unit id="55af923ea33dff98ca7c168da85d23e80fa5317c" translate="yes" xml:space="preserve">
          <source>LogSubscriber#logger</source>
          <target state="translated">LogSubscriber#logger</target>
        </trans-unit>
        <trans-unit id="7a2411179d17d59f93aad508af303050b741fa32" translate="yes" xml:space="preserve">
          <source>LogSubscriber#process</source>
          <target state="translated">LogSubscriber#process</target>
        </trans-unit>
        <trans-unit id="6bf53002539406558cd714c6ef5bf62042b5b8a6" translate="yes" xml:space="preserve">
          <source>LogSubscriber#receive</source>
          <target state="translated">LogSubscriber#receive</target>
        </trans-unit>
        <trans-unit id="8432c24573f3f89fad60802fe8eddf1da6315768" translate="yes" xml:space="preserve">
          <source>Logger</source>
          <target state="translated">Logger</target>
        </trans-unit>
        <trans-unit id="676b4fcb697f154bd5a7bc122e393a6385de5014" translate="yes" xml:space="preserve">
          <source>Logger::Formatter</source>
          <target state="translated">Logger::Formatter</target>
        </trans-unit>
        <trans-unit id="3d9e60c602c970a2f5c3509958b4089cbf8c68d1" translate="yes" xml:space="preserve">
          <source>Logger::SimpleFormatter</source>
          <target state="translated">Logger::SimpleFormatter</target>
        </trans-unit>
        <trans-unit id="4d7ad5706deb8532d7eec04b8aa18ef1f42c1a43" translate="yes" xml:space="preserve">
          <source>Logger::SimpleFormatter#call</source>
          <target state="translated">Logger::SimpleFormatter#call</target>
        </trans-unit>
        <trans-unit id="a9707eb17132476d73754f320250ed9502fdf44d" translate="yes" xml:space="preserve">
          <source>Logger::logger_outputs_to?</source>
          <target state="translated">Logger::logger_outputs_to?</target>
        </trans-unit>
        <trans-unit id="d0005f516a11a16bb48bbeb76e0cb73c796b70a7" translate="yes" xml:space="preserve">
          <source>Logger::new</source>
          <target state="translated">Logger::new</target>
        </trans-unit>
        <trans-unit id="f18d79bc26224d883a29b68180c11a40752a2aac" translate="yes" xml:space="preserve">
          <source>LoggerSilence</source>
          <target state="translated">LoggerSilence</target>
        </trans-unit>
        <trans-unit id="8b290acfc10cb27d57e006dd5e54594619754a64" translate="yes" xml:space="preserve">
          <source>LoggerSilence#silence</source>
          <target state="translated">LoggerSilence#silence</target>
        </trans-unit>
        <trans-unit id="57003616863fe634c645e342ee9080681e419c5f" translate="yes" xml:space="preserve">
          <source>Logging</source>
          <target state="translated">Logging</target>
        </trans-unit>
        <trans-unit id="da23089c20adecce3364e2fd63f0e5cb8ece4167" translate="yes" xml:space="preserve">
          <source>Logging will always have a small impact on the performance of your Rails app, particularly when logging to disk. Additionally, there are a few subtleties:</source>
          <target state="translated">特にディスクへのロギングの場合、ロギングは常にRailsアプリのパフォーマンスにわずかな影響を与えます。さらに、いくつかの微妙な点があります。</target>
        </trans-unit>
        <trans-unit id="6d8dba556a702c4b2b02fff1697dced0aa887dad" translate="yes" xml:space="preserve">
          <source>Logging: Rails applications log every request, with a level of verbosity appropriate for the current mode. Rails logs in development include information about the request environment, database queries, and basic performance information.</source>
          <target state="translated">ロギング。Railsアプリケーションは、現在のモードに適した冗長性のレベルで、すべてのリクエストをログに記録します。開発中のRailsのログには、リクエスト環境、データベースクエリ、基本的なパフォーマンス情報などの情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="f431dc40465ac4a9323987ccc7c60a2626bcb38a" translate="yes" xml:space="preserve">
          <source>Long-lived channels (and connections) also mean you're responsible for ensuring that the data is fresh. If you hold a reference to a user record, but the name is changed while that reference is held, you may be sending stale data if you don't take precautions to avoid it.</source>
          <target state="translated">長く続いているチャネル(および接続)は、データが新鮮なものであることを保証する責任があるということでもあります。ユーザーレコードへの参照を保持していても、その参照を保持している間に名前が変更されている場合、それを避けるための対策をしておかないと、古いデータを送信している可能性があります。</target>
        </trans-unit>
        <trans-unit id="3fa5015243d6b37528285498fd3134e805a65d33" translate="yes" xml:space="preserve">
          <source>Looking at this output, it's easy to understand how generators work in Rails 3.0 and above. The scaffold generator doesn't actually generate anything, it just invokes others to do the work. This allows us to add/replace/remove any of those invocations. For instance, the scaffold generator invokes the scaffold_controller generator, which invokes erb, test_unit and helper generators. Since each generator has a single responsibility, they are easy to reuse, avoiding code duplication.</source>
          <target state="translated">この出力を見ると、Rails 3.0以上でジェネレータがどのように動作するかが簡単に理解できます。scaffoldジェネレーターは実際には何も生成せず、他の人を呼び出して作業を行うだけです。これにより、それらの呼び出しを追加/置換/削除することができます。例えば、scaffold ジェネレータは scaffold_controller ジェネレータを起動し、erb,test_unit,ヘルパージェネレータを起動します。それぞれのジェネレータは単一の責任を持っているので、コードの重複を避けて再利用することができます。</target>
        </trans-unit>
        <trans-unit id="b887769549ff1debdc02faa3b40f3f606879358e" translate="yes" xml:space="preserve">
          <source>Looking up Translations</source>
          <target state="translated">翻訳を探す</target>
        </trans-unit>
        <trans-unit id="d34434162cf0ffe0f5e7c53841247432498ca42c" translate="yes" xml:space="preserve">
          <source>Looping through a collection of records from the database (using the &lt;a href=&quot;scoping/named/classmethods#method-i-all&quot;&gt;ActiveRecord::Scoping::Named::ClassMethods#all&lt;/a&gt; method, for example) is very inefficient since it will try to instantiate all the objects at once.</source>
          <target state="translated">データベースからレコードのコレクションをループする（たとえば、&lt;a href=&quot;scoping/named/classmethods#method-i-all&quot;&gt;ActiveRecord :: Scoping :: Named :: ClassMethods＃all&lt;/a&gt;メソッドを使用する）と、すべてのオブジェクトを一度にインスタンス化しようとするため、非常に非効率的です。</target>
        </trans-unit>
        <trans-unit id="89de374ab7a4be82c038987469668c6f701d3cc7" translate="yes" xml:space="preserve">
          <source>Looping through a collection of records from the database (using the &lt;code&gt;all&lt;/code&gt; method, for example) is very inefficient since it will try to instantiate all the objects at once.</source>
          <target state="translated">データベースからレコードのコレクションをループ処理する（たとえば &lt;code&gt;all&lt;/code&gt; メソッドを使用する）と、すべてのオブジェクトを一度にインスタンス化しようとするため、非常に非効率的です。</target>
        </trans-unit>
        <trans-unit id="d216bdf358444e1a0d5e9711e1c686d79571b539" translate="yes" xml:space="preserve">
          <source>Low-Level Caching</source>
          <target state="translated">低レベルキャッシング</target>
        </trans-unit>
        <trans-unit id="81eda5632cd54c811f36d9ec9e372ab5faaf038f" translate="yes" xml:space="preserve">
          <source>MAGENTA</source>
          <target state="translated">MAGENTA</target>
        </trans-unit>
        <trans-unit id="b315cd523ae2ef826dbad53529ba6c9c2ad21ff1" translate="yes" xml:space="preserve">
          <source>MAPPING</source>
          <target state="translated">MAPPING</target>
        </trans-unit>
        <trans-unit id="65124a8cda19a4bdcf3161683856e5c9f03eeb50" translate="yes" xml:space="preserve">
          <source>MAX_COOKIE_SIZE</source>
          <target state="translated">MAX_COOKIE_SIZE</target>
        </trans-unit>
        <trans-unit id="9df6c8ec33fd4d7a7eea5fc38ce44524546bce63" translate="yes" xml:space="preserve">
          <source>MAX_ID</source>
          <target state="translated">MAX_ID</target>
        </trans-unit>
        <trans-unit id="ba4091290416138086fb56a894f148cffa494206" translate="yes" xml:space="preserve">
          <source>MAX_KEY_BYTESIZE</source>
          <target state="translated">MAX_KEY_BYTESIZE</target>
        </trans-unit>
        <trans-unit id="284fa63eb59eba7c9e2cd98118f61b0726b934ae" translate="yes" xml:space="preserve">
          <source>MAX_PASSWORD_LENGTH_ALLOWED</source>
          <target state="translated">MAX_PASSWORD_LENGTH_ALLOWED</target>
        </trans-unit>
        <trans-unit id="a98cf28ee66a521605286ef7bf41c421cac7c060" translate="yes" xml:space="preserve">
          <source>MEGABYTE</source>
          <target state="translated">MEGABYTE</target>
        </trans-unit>
        <trans-unit id="8d4dcd2d8fbee8ff07ff7bc53114f0c434eeec56" translate="yes" xml:space="preserve">
          <source>MESSAGE_OPTIONS</source>
          <target state="translated">MESSAGE_OPTIONS</target>
        </trans-unit>
        <trans-unit id="495e45b5da0f07a933bcae72c50ae91eeb20d3f5" translate="yes" xml:space="preserve">
          <source>MIME_NAME</source>
          <target state="translated">MIME_NAME</target>
        </trans-unit>
        <trans-unit id="4a5aa456e74d55cddbb3f26a2e5b910c10b728c1" translate="yes" xml:space="preserve">
          <source>MIME_PARAMETER</source>
          <target state="translated">MIME_PARAMETER</target>
        </trans-unit>
        <trans-unit id="aa9e2c39cad2ac07dfa73810c9f0172f4c586568" translate="yes" xml:space="preserve">
          <source>MIME_PARAMETER_KEY</source>
          <target state="translated">MIME_PARAMETER_KEY</target>
        </trans-unit>
        <trans-unit id="dcefa2aeec7b7e6e08532fde0a1d873266cb4c02" translate="yes" xml:space="preserve">
          <source>MIME_PARAMETER_VALUE</source>
          <target state="translated">MIME_PARAMETER_VALUE</target>
        </trans-unit>
        <trans-unit id="0c7239873afa3db6794c6cf12a208d9718befee7" translate="yes" xml:space="preserve">
          <source>MIME_REGEXP</source>
          <target state="translated">MIME_REGEXP</target>
        </trans-unit>
        <trans-unit id="468bfc8881876f60b1992fde5e9b6af946206e43" translate="yes" xml:space="preserve">
          <source>MINUTES_IN_QUARTER_YEAR</source>
          <target state="translated">MINUTES_IN_QUARTER_YEAR</target>
        </trans-unit>
        <trans-unit id="1a14e5831f85aa97e54c26370015ca312d486468" translate="yes" xml:space="preserve">
          <source>MINUTES_IN_THREE_QUARTERS_YEAR</source>
          <target state="translated">MINUTES_IN_THREE_QUARTERS_YEAR</target>
        </trans-unit>
        <trans-unit id="ac3a71bb010a31611bf5406bed00ef6e011aa34b" translate="yes" xml:space="preserve">
          <source>MINUTES_IN_YEAR</source>
          <target state="translated">MINUTES_IN_YEAR</target>
        </trans-unit>
        <trans-unit id="479396de59be987e42108d35e44f4b59dc1b4a9e" translate="yes" xml:space="preserve">
          <source>MODULES</source>
          <target state="translated">MODULES</target>
        </trans-unit>
        <trans-unit id="3bc34b9230133df1f9971deec3f33546dc36b624" translate="yes" xml:space="preserve">
          <source>MULTI_VALUE_METHODS</source>
          <target state="translated">MULTI_VALUE_METHODS</target>
        </trans-unit>
        <trans-unit id="d82bb796085b36f19aa29833ac03dc6a50644efe" translate="yes" xml:space="preserve">
          <source>MUST_REVALIDATE</source>
          <target state="translated">MUST_REVALIDATE</target>
        </trans-unit>
        <trans-unit id="a8c694c348d74ec772f1e8f64d687c8999e1e811" translate="yes" xml:space="preserve">
          <source>Mail will automatically Base64 encode an attachment. If you want something different, encode your content and pass in the encoded content and encoding in a &lt;code&gt;Hash&lt;/code&gt; to the &lt;code&gt;attachments&lt;/code&gt; method.</source>
          <target state="translated">メールは自動的に添付ファイルをBase64エンコードします。別のものが必要な場合は、コンテンツをエンコードし、エンコードされたコンテンツと &lt;code&gt;Hash&lt;/code&gt; エンコードして &lt;code&gt;attachments&lt;/code&gt; メソッドに渡します。</target>
        </trans-unit>
        <trans-unit id="c55ad5c93794819374aa38d68902e3c966dcc117" translate="yes" xml:space="preserve">
          <source>MailHelper</source>
          <target state="translated">MailHelper</target>
        </trans-unit>
        <trans-unit id="3d95a627cdb107ff69b030371d1e7e8b4c10935f" translate="yes" xml:space="preserve">
          <source>MailHelper#attachments</source>
          <target state="translated">MailHelper#attachments</target>
        </trans-unit>
        <trans-unit id="b2f5e480ba0bee4286f1cc3a4ca5a963f43cfe63" translate="yes" xml:space="preserve">
          <source>MailHelper#block_format</source>
          <target state="translated">MailHelper#block_format</target>
        </trans-unit>
        <trans-unit id="7ae23fe551aca162ae1c5589d602a1df8e671748" translate="yes" xml:space="preserve">
          <source>MailHelper#format_paragraph</source>
          <target state="translated">MailHelper#format_paragraph</target>
        </trans-unit>
        <trans-unit id="fb236b1746e1802c3a0b73e9683c6ab41ac24d0b" translate="yes" xml:space="preserve">
          <source>MailHelper#mailer</source>
          <target state="translated">MailHelper#mailer</target>
        </trans-unit>
        <trans-unit id="3e8ee2a92d3b7f52814ab5089a1ff9eee1297fd1" translate="yes" xml:space="preserve">
          <source>MailHelper#message</source>
          <target state="translated">MailHelper#message</target>
        </trans-unit>
        <trans-unit id="f70ea59698ce3b86d3b1359815b6b8b662a4785d" translate="yes" xml:space="preserve">
          <source>Mailer Filters abort further processing if body is set to a non-nil value.</source>
          <target state="translated">メーラーフィルタは、ボディが非nil値に設定されている場合、処理を中断します。</target>
        </trans-unit>
        <trans-unit id="13980201fa07cfc07994ed387ca6379609fdff0c" translate="yes" xml:space="preserve">
          <source>Mailer Models</source>
          <target state="translated">メーラーモデル</target>
        </trans-unit>
        <trans-unit id="680a61c5f502dd97082db34df71463ef11e26d1f" translate="yes" xml:space="preserve">
          <source>Mailer Testing</source>
          <target state="translated">メーラーテスト</target>
        </trans-unit>
        <trans-unit id="a21c64ba416f2ab2281167ae92a45b9bf82d97e2" translate="yes" xml:space="preserve">
          <source>Mailer Views</source>
          <target state="translated">メーラービュー</target>
        </trans-unit>
        <trans-unit id="68e337f3658a60fb99f830ff9b6e79e91a43f276" translate="yes" xml:space="preserve">
          <source>Mailer test cases obtain the mailer being tested from the name of the test class using &lt;code&gt;constantize&lt;/code&gt;:</source>
          <target state="translated">メーラーテストケースは、テスト対象のメーラーを、テストクラスの名前から &lt;code&gt;constantize&lt;/code&gt; を使用して取得します。</target>
        </trans-unit>
        <trans-unit id="44df4fb76daaa7b1a6be96a25c78d05f88becb98" translate="yes" xml:space="preserve">
          <source>Mailer views</source>
          <target state="translated">メーラービュー</target>
        </trans-unit>
        <trans-unit id="587b49cee9e902b2a9c917c758289cbced65c031" translate="yes" xml:space="preserve">
          <source>Mailer views are located in the &lt;code&gt;app/views/name_of_mailer_class&lt;/code&gt; directory. The specific mailer view is known to the class because its name is the same as the mailer method. In our example from above, our mailer view for the &lt;code&gt;welcome_email&lt;/code&gt; method will be in &lt;code&gt;app/views/user_mailer/welcome_email.html.erb&lt;/code&gt; for the HTML version and &lt;code&gt;welcome_email.text.erb&lt;/code&gt; for the plain text version.</source>
          <target state="translated">メーラービューは &lt;code&gt;app/views/name_of_mailer_class&lt;/code&gt; ディレクトリにあります。特定のメーラービューは、名前がメーラーメソッドと同じであるため、クラスに認識されます。上記の例では、 &lt;code&gt;welcome_email&lt;/code&gt; メソッドのメーラービューは、HTMLバージョンの場合は &lt;code&gt;app/views/user_mailer/welcome_email.html.erb&lt;/code&gt; に、プレーンテキストバージョンの場合はwelcome_email.text.erbにあり &lt;code&gt;welcome_email.text.erb&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="36be81ab1542c937801f33caaded349a9bc4127c" translate="yes" xml:space="preserve">
          <source>Mailers are really just another way to render a view. Instead of rendering a view and sending it over the HTTP protocol, they are just sending it out through the email protocols instead. Due to this, it makes sense to just have your controller tell the Mailer to send an email when a user is successfully created.</source>
          <target state="translated">メーラーは、ビューをレンダリングするための別の方法にすぎません。ビューをレンダリングして HTTP プロトコルで送信するのではなく、メールプロトコルを使って送信します。このため、ユーザーの作成に成功したときにメーラーにメールを送信するようにコントローラに指示するのが理にかなっています。</target>
        </trans-unit>
        <trans-unit id="64de1eb796e4922fd13819de6eaab4dcdb1d7c9b" translate="yes" xml:space="preserve">
          <source>Mailers have methods called &quot;actions&quot; and they use views to structure their content. Where a controller generates content like HTML to send back to the client, a Mailer creates a message to be delivered via email.</source>
          <target state="translated">メーラーには「アクション」と呼ばれるメソッドがあり、コンテンツを構造化するためにビューを使用します。コントローラが HTML のようなコンテンツを生成してクライアントに送り返すのに対し、メーラーはメールで配信されるメッセージを作成します。</target>
        </trans-unit>
        <trans-unit id="16066075c5a83dca0ba2cea04fba9274abb07b0e" translate="yes" xml:space="preserve">
          <source>Mailgun</source>
          <target state="translated">Mailgun</target>
        </trans-unit>
        <trans-unit id="8b66a1c9fbdcaa52fb90bc5d0058e4dd90be7b68" translate="yes" xml:space="preserve">
          <source>Main Features</source>
          <target state="translated">主な特徴</target>
        </trans-unit>
        <trans-unit id="ae266dfc442b5ec385b4338560900eb345c499d9" translate="yes" xml:space="preserve">
          <source>Main render entry point shared by Action View and Action Controller.</source>
          <target state="translated">アクション ビューとアクション コントローラで共有されるメインのレンダー エントリー ポイント。</target>
        </trans-unit>
        <trans-unit id="089471884fb865229f0f9111a9377f8fb353d285" translate="yes" xml:space="preserve">
          <source>Maintaining the test database schema</source>
          <target state="translated">テストデータベースのスキーマを維持する</target>
        </trans-unit>
        <trans-unit id="f8fa33a721957f371e84c8dd9e6fb8b01c0321b1" translate="yes" xml:space="preserve">
          <source>Maintenance Policy</source>
          <target state="translated">メンテナンスポリシー</target>
        </trans-unit>
        <trans-unit id="58d6b980b33f53ac06a743ee46e99cae645364df" translate="yes" xml:space="preserve">
          <source>Maintenance Policy for Ruby on Rails</source>
          <target state="translated">Ruby on Railsのメンテナンスポリシー</target>
        </trans-unit>
        <trans-unit id="252157b41e8c33085114f9d5bae78ff87bf6ade9" translate="yes" xml:space="preserve">
          <source>Make &lt;code&gt;ApplicationController&lt;/code&gt; inherit from &lt;code&gt;ActionController::API&lt;/code&gt; instead of &lt;code&gt;ActionController::Base&lt;/code&gt;. As with middleware, this will leave out any Action Controller modules that provide functionalities primarily used by browser applications.</source>
          <target state="translated">作る &lt;code&gt;ApplicationController&lt;/code&gt; にするから継承 &lt;code&gt;ActionController::API&lt;/code&gt; の代わりに、 &lt;code&gt;ActionController::Base&lt;/code&gt; 。ミドルウェアと同様に、これにより、主にブラウザーアプリケーションで使用される機能を提供するAction Controllerモジュールが除外されます。</target>
        </trans-unit>
        <trans-unit id="3ad5d449d0548ace3647803d555c0dbbae48a281" translate="yes" xml:space="preserve">
          <source>Make a temporary table.</source>
          <target state="translated">仮のテーブルを作ります。</target>
        </trans-unit>
        <trans-unit id="306b5c693bdfd1595e76e9e9d059f004a98367a8" translate="yes" xml:space="preserve">
          <source>Make an entry in Rails routing file &lt;code&gt;config/routes.rb&lt;/code&gt;</source>
          <target state="translated">Railsルーティングファイル &lt;code&gt;config/routes.rb&lt;/code&gt; にエントリを作成します。</target>
        </trans-unit>
        <trans-unit id="8b69db2b39800a827d6f6168d3c1a20938083839" translate="yes" xml:space="preserve">
          <source>Make periodic timers no-op</source>
          <target state="translated">周期タイマーをノーストップにする</target>
        </trans-unit>
        <trans-unit id="8399eb539601add9de2d3f82842b56234c0d1f9c" translate="yes" xml:space="preserve">
          <source>Make sure that you declare the database column used for the serialized store as a text, so there's plenty of room.</source>
          <target state="translated">連載ストアに使用しているデータベースのカラムをテキストとして宣言するようにして、余裕を持たせましょう。</target>
        </trans-unit>
        <trans-unit id="c4ac7a454c98bda90c921a3bff6938498dfb3fc2" translate="yes" xml:space="preserve">
          <source>Make sure the lock version column gets updated when counters are updated.</source>
          <target state="translated">カウンタが更新されたときにロックバージョンの列が更新されることを確認してください。</target>
        </trans-unit>
        <trans-unit id="57fdc5e6a8181b505e4377c235dcdba10ccefd2b" translate="yes" xml:space="preserve">
          <source>Make sure to check the modules included in &lt;code&gt;ActionController::Base&lt;/code&gt; if you want to use any other functionality that is not provided by &lt;code&gt;ActionController::API&lt;/code&gt; out of the box.</source>
          <target state="translated">そのままの状態で &lt;code&gt;ActionController::API&lt;/code&gt; 提供されていない他の機能を使用する場合は、 &lt;code&gt;ActionController::Base&lt;/code&gt; 含まれているモジュールを確認してください。</target>
        </trans-unit>
        <trans-unit id="1b94a75acb3e2883ef72226f00cf1c8e7c27ad3d" translate="yes" xml:space="preserve">
          <source>Make sure to configure your server to support these options following the instructions in the &lt;code&gt;Rack::Sendfile&lt;/code&gt; documentation.</source>
          <target state="translated">&lt;code&gt;Rack::Sendfile&lt;/code&gt; ドキュメントの指示に従って、これらのオプションをサポートするようにサーバーを構成してください。</target>
        </trans-unit>
        <trans-unit id="5efdeaf7a8b12f96eb5dc7d68b2ffffb447d6f56" translate="yes" xml:space="preserve">
          <source>Make sure to specify the correct server location in each of your environment config files:</source>
          <target state="translated">それぞれの環境設定ファイルで正しいサーバーの場所を指定してください。</target>
        </trans-unit>
        <trans-unit id="8899c331bcf7e348bccc244aac252dc6bbce4cdd" translate="yes" xml:space="preserve">
          <source>Make sure to use &lt;code&gt;and return&lt;/code&gt; instead of &lt;code&gt;&amp;amp;&amp;amp; return&lt;/code&gt; because &lt;code&gt;&amp;amp;&amp;amp; return&lt;/code&gt; will not work due to the operator precedence in the Ruby Language.</source>
          <target state="translated">&lt;code&gt;&amp;amp;&amp;amp; return&lt;/code&gt; &lt;code&gt;and return&lt;/code&gt; 代わりに使用して戻ることを確認してください &lt;code&gt;&amp;amp;&amp;amp; return&lt;/code&gt; 言語では演算子の優先順位のため、&amp;amp;&amp;amp; returnは機能しません。</target>
        </trans-unit>
        <trans-unit id="fc7e11f912ac4bdebcc08be41ef772e521bd6ac6" translate="yes" xml:space="preserve">
          <source>Make sure you are comparing Flash message keys against strings.</source>
          <target state="translated">フラッシュメッセージのキーと文字列を比較していることを確認してください。</target>
        </trans-unit>
        <trans-unit id="16e768995acffc826fe3508921661c1719fc07d8" translate="yes" xml:space="preserve">
          <source>Make sure your queuing backend &quot;listens&quot; on your queue name. For some backends you need to specify the queues to listen to.</source>
          <target state="translated">キューイングバックエンドがキュー名を &quot;listens&quot; していることを確認してください。バックエンドによっては、 listen するキューを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="5682e0cf408b02c5d4877c6049064b81b83869ac" translate="yes" xml:space="preserve">
          <source>Make the following changes to your &lt;code&gt;Gemfile&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Gemfile&lt;/code&gt; に次の変更を加えます。</target>
        </trans-unit>
        <trans-unit id="f964d093f2f5ad4e04fb5d1cac5dfe5b45964069" translate="yes" xml:space="preserve">
          <source>Makes a unique &lt;code&gt;X-Request-Id&lt;/code&gt; header available to the response and enables the &lt;code&gt;ActionDispatch::Request#request_id&lt;/code&gt; method.</source>
          <target state="translated">一意の &lt;code&gt;X-Request-Id&lt;/code&gt; ヘッダーを応答で使用できるようにし、 &lt;code&gt;ActionDispatch::Request#request_id&lt;/code&gt; メソッドを有効にします。</target>
        </trans-unit>
        <trans-unit id="5036c3834983c0c5d0a51b922a33316cf1efabc5" translate="yes" xml:space="preserve">
          <source>Makes a unique request id available to the &lt;code&gt;action_dispatch.request_id&lt;/code&gt; env variable (which is then accessible through &lt;code&gt;ActionDispatch::Request#request_id&lt;/code&gt; or the alias &lt;code&gt;ActionDispatch::Request#uuid&lt;/code&gt;) and sends the same id to the client via the X-Request-Id header.</source>
          <target state="translated">一意のリクエストIDを &lt;code&gt;action_dispatch.request_id&lt;/code&gt; env変数で利用できるようにし（これは &lt;code&gt;ActionDispatch::Request#request_id&lt;/code&gt; またはエイリアス &lt;code&gt;ActionDispatch::Request#uuid&lt;/code&gt; を介してアクセス可能）、X-Request-Idを介して同じIDをクライアントに送信しますヘッダ。</target>
        </trans-unit>
        <trans-unit id="77c87d6f8d7b1bbc1e4b64d6ed3fcf1eeab45281" translate="yes" xml:space="preserve">
          <source>Makes an underscored, lowercase form from the expression in the string.</source>
          <target state="translated">文字列内の式からアンダースコア付きの小文字の形式を作成します。</target>
        </trans-unit>
        <trans-unit id="3cd3cc6959800f15a2205416f9bd7058de795420" translate="yes" xml:space="preserve">
          <source>Makes it dead easy to do HTTP &lt;a href=&quot;httpauthentication/basic&quot;&gt;Basic&lt;/a&gt;, &lt;a href=&quot;httpauthentication/digest&quot;&gt;Digest&lt;/a&gt; and &lt;a href=&quot;httpauthentication/token&quot;&gt;Token&lt;/a&gt; authentication.</source>
          <target state="translated">HTTP &lt;a href=&quot;httpauthentication/basic&quot;&gt;基本&lt;/a&gt;認証、&lt;a href=&quot;httpauthentication/digest&quot;&gt;ダイジェスト&lt;/a&gt;認証、&lt;a href=&quot;httpauthentication/token&quot;&gt;トークン&lt;/a&gt;認証を簡単に行うことができます。</target>
        </trans-unit>
        <trans-unit id="bab5116953faf0be205b9fc2c28dd2778e91ac89" translate="yes" xml:space="preserve">
          <source>Makes it dead easy to do HTTP &lt;a href=&quot;token&quot;&gt;Token&lt;/a&gt; authentication.</source>
          <target state="translated">HTTP &lt;a href=&quot;token&quot;&gt;トークン&lt;/a&gt;認証を簡単に行うことができます。</target>
        </trans-unit>
        <trans-unit id="82d90853a9285a97be64f6ddfab56da7048dd4ea" translate="yes" xml:space="preserve">
          <source>Makes it dead easy to do HTTP Basic authentication.</source>
          <target state="translated">HTTP基本認証を簡単に行うことができるようになります。</target>
        </trans-unit>
        <trans-unit id="248ffebb944238814419305b57452011f6e8a054" translate="yes" xml:space="preserve">
          <source>Makes it dead easy to do HTTP Digest authentication.</source>
          <target state="translated">HTTP ダイジェスト認証を簡単に行うことができます。</target>
        </trans-unit>
        <trans-unit id="9b65162648b93cf813417157560cc2b1670a2db9" translate="yes" xml:space="preserve">
          <source>Makes it possible for the RemoteConnection to disconnect a specific connection.</source>
          <target state="translated">RemoteConnectionが特定の接続を切断できるようにします。</target>
        </trans-unit>
        <trans-unit id="dba69823998a36ac20a883dc8e6f67040b179324" translate="yes" xml:space="preserve">
          <source>Making Select Boxes with Ease</source>
          <target state="translated">セレクトボックスを簡単に作成</target>
        </trans-unit>
        <trans-unit id="cb01187942b0742e6351609b7735a6adcf73fc33" translate="yes" xml:space="preserve">
          <source>Making Your Library or Gem a Pre-Processor</source>
          <target state="translated">ライブラリやジェムをプリプロセッサにする</target>
        </trans-unit>
        <trans-unit id="8205e9d586c3493e6f60cebf5165f64f9b3c019e" translate="yes" xml:space="preserve">
          <source>Making messages expire</source>
          <target state="translated">メッセージを有効期限切れにする</target>
        </trans-unit>
        <trans-unit id="a5ba6a079e12e18c361a6a47933e07e1a7228504" translate="yes" xml:space="preserve">
          <source>Manage &lt;code&gt;Gemfile&lt;/code&gt; indentation for a DSL action block</source>
          <target state="translated">DSLアクションブロックの &lt;code&gt;Gemfile&lt;/code&gt; インデントを管理する</target>
        </trans-unit>
        <trans-unit id="b2aee73bd2e79677bed872d3980e254bec42f2c5" translate="yes" xml:space="preserve">
          <source>Managing dependencies</source>
          <target state="translated">依存関係の管理</target>
        </trans-unit>
        <trans-unit id="4c4e0450a210ba7947ca44f072542be4cd2bbf6e" translate="yes" xml:space="preserve">
          <source>Managing the Locale across Requests</source>
          <target state="translated">リクエスト間でロケールを管理する</target>
        </trans-unit>
        <trans-unit id="5e0b984f07b1075591ab1d0a27cd0c92e4a47a76" translate="yes" xml:space="preserve">
          <source>Mandrill</source>
          <target state="translated">Mandrill</target>
        </trans-unit>
        <trans-unit id="2d88b61ea857089a4c533daa1a9cf98822177551" translate="yes" xml:space="preserve">
          <source>Manifest Files and Directives</source>
          <target state="translated">マニフェストファイルとディレクティブ</target>
        </trans-unit>
        <trans-unit id="38d94fc9b2424981345aad47073ff6221d182b79" translate="yes" xml:space="preserve">
          <source>Manipulating session and cookie variables</source>
          <target state="translated">セッションとクッキー変数の操作</target>
        </trans-unit>
        <trans-unit id="6f5bab837311ddf9a2bc63d03a1cd96d18a19ce8" translate="yes" xml:space="preserve">
          <source>Manual Unsubscription</source>
          <target state="translated">手動購読解除</target>
        </trans-unit>
        <trans-unit id="e7686ebdb95a27789f53732e864b2cf3e21d13ff" translate="yes" xml:space="preserve">
          <source>Manually check out a connection from the pool with &lt;a href=&quot;connectionpool#method-i-checkout&quot;&gt;ActiveRecord::Base.connection_pool.checkout&lt;/a&gt;. You are responsible for returning this connection to the pool when finished by calling &lt;a href=&quot;connectionpool#method-i-checkin&quot;&gt;ActiveRecord::Base.connection_pool.checkin(connection)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;connectionpool#method-i-checkout&quot;&gt;ActiveRecord :: Base.connection_pool.checkout&lt;/a&gt;を使用して、プールから接続を手動でチェックアウトします。&lt;a href=&quot;connectionpool#method-i-checkin&quot;&gt;ActiveRecord :: Base.connection_pool.checkin（connection）を&lt;/a&gt;呼び出して終了したら、この接続をプールに返す必要があります。</target>
        </trans-unit>
        <trans-unit id="047b759d8afa6da4ea87a2a2059a77060daca4cd" translate="yes" xml:space="preserve">
          <source>Many apps grow beyond simple forms editing a single object. For example, when creating a &lt;code&gt;Person&lt;/code&gt; you might want to allow the user to (on the same form) create multiple address records (home, work, etc.). When later editing that person the user should be able to add, remove, or amend addresses as necessary.</source>
          <target state="translated">多くのアプリは、単一のオブジェクトを編集する単純なフォームを超えて成長します。たとえば、 &lt;code&gt;Person&lt;/code&gt; を作成するときに、ユーザーが（同じフォームで）複数の住所レコード（自宅、職場など）を作成できるようにすることができます。その人を後で編集するとき、ユーザーは必要に応じてアドレスを追加、削除、または修正できる必要があります。</target>
        </trans-unit>
        <trans-unit id="c51aa84e06e0d4cb20eb010b07acb0a782ae7e1b" translate="yes" xml:space="preserve">
          <source>Many cross-site scripting (XSS) exploits aim at obtaining the user's cookie. You'll read &lt;a href=&quot;#cross-site-scripting-xss&quot;&gt;more about XSS&lt;/a&gt; later.</source>
          <target state="translated">多くのクロスサイトスクリプティング（XSS）エクスプロイトは、ユーザーのCookieを取得することを目的としています。&lt;a href=&quot;#cross-site-scripting-xss&quot;&gt;XSSについては&lt;/a&gt;後で詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="94760ac5345671c21adf55c326e4bc74930f068c" translate="yes" xml:space="preserve">
          <source>Many modern web servers can be used as a proxy server to balance third-party elements such as caching servers or application servers.</source>
          <target state="translated">最近の多くのウェブサーバーは、キャッシングサーバーやアプリケーションサーバーなどのサードパーティ要素のバランスをとるために、プロキシサーバーとして使用することができます。</target>
        </trans-unit>
        <trans-unit id="68dea1c5c75caa39cba7ba14014f2517fbc6048c" translate="yes" xml:space="preserve">
          <source>Many of Action Dispatcher's internal components are implemented as Rack middlewares. &lt;code&gt;Rails::Application&lt;/code&gt; uses &lt;code&gt;ActionDispatch::MiddlewareStack&lt;/code&gt; to combine various internal and external middlewares to form a complete Rails Rack application.</source>
          <target state="translated">Action Dispatcherの内部コンポーネントの多くは、Rackミドルウェアとして実装されています。 &lt;code&gt;Rails::Application&lt;/code&gt; は &lt;code&gt;ActionDispatch::MiddlewareStack&lt;/code&gt; を使用して、さまざまな内部ミドルウェアと外部ミドルウェアを組み合わせ、完全なRails Rackアプリケーションを形成します。</target>
        </trans-unit>
        <trans-unit id="5023dcf79d2fffe404c655626656b9c927384425" translate="yes" xml:space="preserve">
          <source>Many web applications allow users to upload files. &lt;em&gt;File names, which the user may choose (partly), should always be filtered&lt;/em&gt; as an attacker could use a malicious file name to overwrite any file on the server. If you store file uploads at /var/www/uploads, and the user enters a file name like &quot;../../../etc/passwd&quot;, it may overwrite an important file. Of course, the Ruby interpreter would need the appropriate permissions to do so - one more reason to run web servers, database servers, and other programs as a less privileged Unix user.</source>
          <target state="translated">多くのWebアプリケーションでは、ユーザーがファイルをアップロードできます。攻撃者が悪意のあるファイル名を使用してサーバー上のファイルを上書きする&lt;em&gt;可能性があるため、ユーザーが（部分的に）選択する可能性のあるファイル名は常にフィルタリングする必要があり&lt;/em&gt;ます。ファイルのアップロードを/ var / www / uploadsに保存し、ユーザーが「../../../etc/passwd」のようなファイル名を入力すると、重要なファイルが上書きされる可能性があります。もちろん、Rubyインタープリターにはそのための適切な権限が必要です。Webサーバー、データベースサーバー、およびその他のプログラムを特権の少ないUnixユーザーとして実行するもう1つの理由です。</target>
        </trans-unit>
        <trans-unit id="c23c36ee0702008b369b29fb802016cb8c1b8277" translate="yes" xml:space="preserve">
          <source>Many web applications have an authentication system: a user provides a user name and password, the web application checks them and stores the corresponding user id in the session hash. From now on, the session is valid. On every request the application will load the user, identified by the user id in the session, without the need for new authentication. The session ID in the cookie identifies the session.</source>
          <target state="translated">多くのウェブアプリケーションは認証システムを持っています:ユーザがユーザ名とパスワードを提供すると、ウェブアプリケーションはそれらをチェックし、対応するユーザIDをセッションハッシュに格納します。それ以降、セッションは有効になります。リクエストがあるたびに、アプリケーションはセッション内のユーザーIDによって識別されたユーザーをロードしますが、新しい認証は必要ありません。クッキーのセッションIDはセッションを識別します。</target>
        </trans-unit>
        <trans-unit id="19390742e5806874fd7fb49160ecbeb01caa65a9" translate="yes" xml:space="preserve">
          <source>Many web applications make it easy to hijack user accounts. Why not be different and make it more difficult?.</source>
          <target state="translated">多くのWebアプリケーションでは、ユーザーアカウントを簡単に乗っ取ることができます。なぜ違うものにして、もっと難しくしないのでしょうか?</target>
        </trans-unit>
        <trans-unit id="24891e5f043d78206edf6518d0d3d35f7785b4f3" translate="yes" xml:space="preserve">
          <source>Many-to-many</source>
          <target state="translated">Many-to-many</target>
        </trans-unit>
        <trans-unit id="c9a42937cf22ca82b4cf9b49a17e155274e834d4" translate="yes" xml:space="preserve">
          <source>Maps asset types to public directory.</source>
          <target state="translated">アセットタイプを公開ディレクトリにマップします。</target>
        </trans-unit>
        <trans-unit id="2186a94f3e5893663ec64cffa3a2c9ffa5b5e277" translate="yes" xml:space="preserve">
          <source>MariaDB: &lt;a href=&quot;https://mariadb.com/kb/en/mariadb/explain/&quot;&gt;EXPLAIN&lt;/a&gt;</source>
          <target state="translated">MariaDB：&lt;a href=&quot;https://mariadb.com/kb/en/mariadb/explain/&quot;&gt;EXPLAIN&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ab2e377998906eb21e2af5cfe084f2169f9ad123" translate="yes" xml:space="preserve">
          <source>Mark a key as being a connection identifier index that can then be used to find the specific connection again later. Common identifiers are current_user and current_account, but could be anything, really.</source>
          <target state="translated">キーを接続識別子のインデックスとしてマークしておくと、後から特定の接続を見つけるために使用することができます。一般的な識別子は current_user と current_account ですが、実際には何でも構いません。</target>
        </trans-unit>
        <trans-unit id="77e548ab7cc8720a986d43ffb76f2e1373d171ea" translate="yes" xml:space="preserve">
          <source>Marks a string as trusted safe. It will be inserted into HTML with no additional escaping performed. It is your responsibility to ensure that the string contains no malicious content. This method is equivalent to the &lt;code&gt;raw&lt;/code&gt; helper in views. It is recommended that you use &lt;code&gt;sanitize&lt;/code&gt; instead of this method. It should never be called on user input.</source>
          <target state="translated">文字列を信頼できる安全なものとしてマークします。HTMLに挿入され、追加のエスケープは実行されません。文字列に悪意のあるコンテンツが含まれていないことを確認するのはユーザーの責任です。このメソッドは、ビューの &lt;code&gt;raw&lt;/code&gt; ヘルパーに相当します。この方法の代わりに &lt;code&gt;sanitize&lt;/code&gt; を使用することをお勧めします。ユーザー入力時に呼び出されることはありません。</target>
        </trans-unit>
        <trans-unit id="4cf7916b5b85729b16a8ae8093bdc4715dd95f4d" translate="yes" xml:space="preserve">
          <source>Marks the entire flash or a single flash entry to be discarded by the end of the current action:</source>
          <target state="translated">フラッシュ全体または1つのフラッシュエントリをマークして、現在のアクションの終了時までに破棄します。</target>
        </trans-unit>
        <trans-unit id="762795e51673105df0f06e3d6f3f9189f42b1615" translate="yes" xml:space="preserve">
          <source>Marks the named method as intended to be redefined, if it exists. Suppresses the Ruby method redefinition warning. Prefer &lt;a href=&quot;module#method-i-redefine_method&quot;&gt;redefine_method&lt;/a&gt; where possible.</source>
          <target state="translated">名前付きメソッドが存在する場合、再定義するように意図されたものとしてマークします。Rubyメソッドの再定義の警告を抑制します。可能な場合&lt;a href=&quot;module#method-i-redefine_method&quot;&gt;は&lt;/a&gt;、redefine_methodを使用してください。</target>
        </trans-unit>
        <trans-unit id="0475c3dda41d22daed4981fee4af23c1b9ef4ff1" translate="yes" xml:space="preserve">
          <source>Marks this record as read only.</source>
          <target state="translated">このレコードを読み取り専用としてマークします。</target>
        </trans-unit>
        <trans-unit id="b36e9ee63716f8133557ba3c2a06919d8f961b9c" translate="yes" xml:space="preserve">
          <source>Marks this record to be destroyed as part of the parent's save transaction. This does &lt;em&gt;not&lt;/em&gt; actually destroy the record instantly, rather child record will be destroyed when &lt;code&gt;parent.save&lt;/code&gt; is called.</source>
          <target state="translated">このレコードを親の保存トランザクションの一部として破棄するようにマークします。これがない&lt;em&gt;ではない&lt;/em&gt;、実際にすぐにレコードを破壊する際に、むしろ子レコードが破棄されます &lt;code&gt;parent.save&lt;/code&gt; が呼ばれています。</target>
        </trans-unit>
        <trans-unit id="567a561a163f9443feee81023bbb6e3d3d856e7d" translate="yes" xml:space="preserve">
          <source>Mask value of &lt;code&gt;params&lt;/code&gt; if key matches one of filters.</source>
          <target state="translated">値はマスク &lt;code&gt;params&lt;/code&gt; キーは、フィルタのいずれかと一致する場合。</target>
        </trans-unit>
        <trans-unit id="cb3cb3e44a313e8943d59b0c6c633a46ac1ce5d8" translate="yes" xml:space="preserve">
          <source>Masked Authenticity Tokens</source>
          <target state="translated">マスクドオーセンティシティトークン</target>
        </trans-unit>
        <trans-unit id="5c1e45d56c039093f8a35ab45a70a26ca3d2a641" translate="yes" xml:space="preserve">
          <source>Matches a URL pattern to one or more routes.</source>
          <target state="translated">URL パターンを 1 つ以上のルートにマッチさせます。</target>
        </trans-unit>
        <trans-unit id="dcd37a0f5706371522de514ef180c0fb66ebe5cb" translate="yes" xml:space="preserve">
          <source>Matches a URL pattern to one or more routes. For more information, see &lt;a href=&quot;base#method-i-match&quot;&gt;match&lt;/a&gt;.</source>
          <target state="translated">URLパターンを1つ以上のルートと照合します。詳細については、&lt;a href=&quot;base#method-i-match&quot;&gt;matchを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="cc8477b206cc55c328a42daa3a110d5a902da25e" translate="yes" xml:space="preserve">
          <source>Matches an exception to a handler based on the exception class.</source>
          <target state="translated">例外クラスに基づいて例外をハンドラにマッチさせます。</target>
        </trans-unit>
        <trans-unit id="392aa4613bb333a2cb618b83882099e4b8d3329d" translate="yes" xml:space="preserve">
          <source>Matching URLs will be marked as '[FILTERED]'.</source>
          <target state="translated">一致するURLは'[FILTERED]'と表示されます。</target>
        </trans-unit>
        <trans-unit id="a8df2fec28d8948a0326722029c7492b88ee4fbe" translate="yes" xml:space="preserve">
          <source>Maximum</source>
          <target state="translated">Maximum</target>
        </trans-unit>
        <trans-unit id="ea0fd428175d5a7f6c71193bfd0cb7d518663243" translate="yes" xml:space="preserve">
          <source>Media type of response.</source>
          <target state="translated">メディアの反応の種類。</target>
        </trans-unit>
        <trans-unit id="4d5f48e858447d5b8bf7bc81648942a5d44922e8" translate="yes" xml:space="preserve">
          <source>Memoizes the value returned by &lt;a href=&quot;getip#method-i-calculate_ip&quot;&gt;calculate_ip&lt;/a&gt; and returns it for &lt;a href=&quot;../request&quot;&gt;ActionDispatch::Request&lt;/a&gt; to use.</source>
          <target state="translated">返された値Memoizes &lt;a href=&quot;getip#method-i-calculate_ip&quot;&gt;calculate_ip&lt;/a&gt;とのために戻ってそれを&lt;a href=&quot;../request&quot;&gt;ActionDispatchを::要求&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="5f53a17ddcd691ca1e78252051c126d13cd160ee" translate="yes" xml:space="preserve">
          <source>Merge conflicts can occur in your schema file when two branches modify schema. To resolve these conflicts run &lt;code&gt;rails db:migrate&lt;/code&gt; to regenerate the schema file.</source>
          <target state="translated">2つのブランチがスキーマを変更すると、スキーマファイルでマージの競合が発生する可能性があります。これらの競合を解決するには、 &lt;code&gt;rails db:migrate&lt;/code&gt; を実行してスキーマファイルを再生成します。</target>
        </trans-unit>
        <trans-unit id="226be574fbe2fe077103b611adc4a492e6b6acbc" translate="yes" xml:space="preserve">
          <source>Merges in the conditions from &lt;code&gt;other&lt;/code&gt;, if &lt;code&gt;other&lt;/code&gt; is an &lt;a href=&quot;relation&quot;&gt;ActiveRecord::Relation&lt;/a&gt;. Returns an array representing the intersection of the resulting records with &lt;code&gt;other&lt;/code&gt;, if &lt;code&gt;other&lt;/code&gt; is an array.</source>
          <target state="translated">&lt;code&gt;other&lt;/code&gt; が&lt;a href=&quot;relation&quot;&gt;ActiveRecord :: Relationの&lt;/a&gt;場合、otherから &lt;code&gt;other&lt;/code&gt; 条件をマージします。 &lt;code&gt;other&lt;/code&gt; が配列の場合、結果のレコードと &lt;code&gt;other&lt;/code&gt; の共通部分を表す配列を返します。</target>
        </trans-unit>
        <trans-unit id="9d078dcba4eea635c17ac1cc07c092528c89cf22" translate="yes" xml:space="preserve">
          <source>Merges the caller into &lt;code&gt;other_hash&lt;/code&gt;. For example,</source>
          <target state="translated">呼び出し元を &lt;code&gt;other_hash&lt;/code&gt; にマージします。例えば、</target>
        </trans-unit>
        <trans-unit id="d9d98f104e303f9cf5ba6cad0f2e8b90cc2ed8ec" translate="yes" xml:space="preserve">
          <source>Merges the errors from &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;other&lt;/code&gt; のエラーをマージします。</target>
        </trans-unit>
        <trans-unit id="40de0d4de887a374168bf79e72c7aa0fa4594d6e" translate="yes" xml:space="preserve">
          <source>Merging</source>
          <target state="translated">Merging</target>
        </trans-unit>
        <trans-unit id="30998fc7b14825bfe3e591f38ea1804d33fd195e" translate="yes" xml:space="preserve">
          <source>Merging of scopes</source>
          <target state="translated">スコープのマージ</target>
        </trans-unit>
        <trans-unit id="39479ff33f15bab6f4bff70fe02746b486a928cb" translate="yes" xml:space="preserve">
          <source>MessageDelivery</source>
          <target state="translated">MessageDelivery</target>
        </trans-unit>
        <trans-unit id="2ca3a9f4c5c006a148b7a9932578ec19923bc9f1" translate="yes" xml:space="preserve">
          <source>MessageDelivery#deliver_later</source>
          <target state="translated">MessageDelivery#deliver_later</target>
        </trans-unit>
        <trans-unit id="d58a2072f2c00bcf994136544ed0881f4277955c" translate="yes" xml:space="preserve">
          <source>MessageDelivery#deliver_later!</source>
          <target state="translated">MessageDelivery#deliver_later!</target>
        </trans-unit>
        <trans-unit id="7dc2404b1df899d54d5d918418a7a861a6fd98d7" translate="yes" xml:space="preserve">
          <source>MessageDelivery#deliver_now</source>
          <target state="translated">MessageDelivery#deliver_now</target>
        </trans-unit>
        <trans-unit id="f694e10fbd9555697b01757d6c268f0aba5cf7e5" translate="yes" xml:space="preserve">
          <source>MessageDelivery#deliver_now!</source>
          <target state="translated">MessageDelivery#deliver_now!</target>
        </trans-unit>
        <trans-unit id="d815799b8048b0698d61637622c9b59c5a136e80" translate="yes" xml:space="preserve">
          <source>MessageDelivery#message</source>
          <target state="translated">MessageDelivery#message</target>
        </trans-unit>
        <trans-unit id="ebbce05309872298d3a6ebb2dc89bd5f0a10e93b" translate="yes" xml:space="preserve">
          <source>MessageDelivery#processed?</source>
          <target state="translated">MessageDelivery#processed?</target>
        </trans-unit>
        <trans-unit id="00bd198ba5bc0785f66eced2f7b32668155ba43b" translate="yes" xml:space="preserve">
          <source>MessageEncryptor</source>
          <target state="translated">MessageEncryptor</target>
        </trans-unit>
        <trans-unit id="75851ac20320d046daeb57638d6439c136973683" translate="yes" xml:space="preserve">
          <source>MessageEncryptor#decrypt_and_verify</source>
          <target state="translated">MessageEncryptor#decrypt_and_verify</target>
        </trans-unit>
        <trans-unit id="ec3605655c1dd7df73e97bee16ca0dc06fa4ba72" translate="yes" xml:space="preserve">
          <source>MessageEncryptor#encrypt_and_sign</source>
          <target state="translated">MessageEncryptor#encrypt_and_sign</target>
        </trans-unit>
        <trans-unit id="f92a218377d645f9092dd4c876aaced4944bc4c6" translate="yes" xml:space="preserve">
          <source>MessageEncryptor::key_len</source>
          <target state="translated">MessageEncryptor::key_len</target>
        </trans-unit>
        <trans-unit id="8f1e28e8dce828703d5d80714ec5189d685ade59" translate="yes" xml:space="preserve">
          <source>MessageEncryptor::new</source>
          <target state="translated">MessageEncryptor::new</target>
        </trans-unit>
        <trans-unit id="2fd13a09c7dae2fdbec9311749e402b4ff60c103" translate="yes" xml:space="preserve">
          <source>MessageVerifier</source>
          <target state="translated">MessageVerifier</target>
        </trans-unit>
        <trans-unit id="0a4d6d879f6d4797c6c59a17b65975130fee0209" translate="yes" xml:space="preserve">
          <source>MessageVerifier#generate</source>
          <target state="translated">MessageVerifier#generate</target>
        </trans-unit>
        <trans-unit id="42f90315126a3917fcfb263375bb71bc0a0a0dc4" translate="yes" xml:space="preserve">
          <source>MessageVerifier#valid_message?</source>
          <target state="translated">MessageVerifier#valid_message?</target>
        </trans-unit>
        <trans-unit id="81f77bbedd728547b52ddc40c7f614824f70a36b" translate="yes" xml:space="preserve">
          <source>MessageVerifier#verified</source>
          <target state="translated">MessageVerifier#verified</target>
        </trans-unit>
        <trans-unit id="cb9c675c988d965998ae45b5d73c7f5308bc24f7" translate="yes" xml:space="preserve">
          <source>MessageVerifier#verify</source>
          <target state="translated">MessageVerifier#verify</target>
        </trans-unit>
        <trans-unit id="faade315455c305d9bb171bc107ea83f06e6fa63" translate="yes" xml:space="preserve">
          <source>MessageVerifier::new</source>
          <target state="translated">MessageVerifier::new</target>
        </trans-unit>
        <trans-unit id="90acb406947db8913ac9b53b7532764ff4fcc59e" translate="yes" xml:space="preserve">
          <source>Metal</source>
          <target state="translated">Metal</target>
        </trans-unit>
        <trans-unit id="38196d8520f1d9e342a790c7baee91ba05b7857a" translate="yes" xml:space="preserve">
          <source>Metal#controller_name</source>
          <target state="translated">Metal#controller_name</target>
        </trans-unit>
        <trans-unit id="edb271c6ba74584a5e95fc8a592017e04d034cfe" translate="yes" xml:space="preserve">
          <source>Metal#params</source>
          <target state="translated">Metal#params</target>
        </trans-unit>
        <trans-unit id="e25845eba96b1c6cec462f426fe2054f763d5f7e" translate="yes" xml:space="preserve">
          <source>Metal#params=</source>
          <target state="translated">Metal#params=</target>
        </trans-unit>
        <trans-unit id="ae198879fd9a7f794c7ff37117ecdd787966071f" translate="yes" xml:space="preserve">
          <source>Metal#performed?</source>
          <target state="translated">Metal#performed?</target>
        </trans-unit>
        <trans-unit id="645752c91da4af331d632112e2ff95adf8ceb3d4" translate="yes" xml:space="preserve">
          <source>Metal#reset_session</source>
          <target state="translated">Metal#reset_session</target>
        </trans-unit>
        <trans-unit id="0c1d3d5f890bdd4021fc1683c03282ae40e4b4db" translate="yes" xml:space="preserve">
          <source>Metal#response_body=</source>
          <target state="translated">Metal#response_body=</target>
        </trans-unit>
        <trans-unit id="2592810200ac0ea7cdb516839b5733b45cd7157a" translate="yes" xml:space="preserve">
          <source>Metal#url_for</source>
          <target state="translated">Metal#url_for</target>
        </trans-unit>
        <trans-unit id="5d5a5e7489ce45c5bc7bbfce6515f09fc97fbd9c" translate="yes" xml:space="preserve">
          <source>Metal::action</source>
          <target state="translated">Metal::action</target>
        </trans-unit>
        <trans-unit id="e2a4b21df305be1783c72a1f50c97c1f1d4985a7" translate="yes" xml:space="preserve">
          <source>Metal::controller_name</source>
          <target state="translated">Metal::controller_name</target>
        </trans-unit>
        <trans-unit id="ce79f003cf7ea40ba89e57e2a796360ffd946624" translate="yes" xml:space="preserve">
          <source>Metal::dispatch</source>
          <target state="translated">Metal::dispatch</target>
        </trans-unit>
        <trans-unit id="182ff2b0bc20e306864bb84402eee07193eb45a1" translate="yes" xml:space="preserve">
          <source>Metal::make_response!</source>
          <target state="translated">Metal::make_response!</target>
        </trans-unit>
        <trans-unit id="d382f96858a788760f261e666e4f85ff97426a6b" translate="yes" xml:space="preserve">
          <source>Metal::middleware</source>
          <target state="translated">Metal::middleware</target>
        </trans-unit>
        <trans-unit id="3ed079e8835c2f9c9c9047fad46dd8ccfe5f55f6" translate="yes" xml:space="preserve">
          <source>Metal::new</source>
          <target state="translated">Metal::new</target>
        </trans-unit>
        <trans-unit id="2f72e572e61260367af8b52a4e688488474b8e83" translate="yes" xml:space="preserve">
          <source>Metal::use</source>
          <target state="translated">Metal::use</target>
        </trans-unit>
        <trans-unit id="88306943fea7e76f9cd57cae0ea6d8b32d2e8434" translate="yes" xml:space="preserve">
          <source>Method</source>
          <target state="translated">Method</target>
        </trans-unit>
        <trans-unit id="f2a980d54dbcb57ac4454a805bc48519eb1f3e32" translate="yes" xml:space="preserve">
          <source>Method Delegation</source>
          <target state="translated">メソッドデレゲーション</target>
        </trans-unit>
        <trans-unit id="dcddcbb57206eaf4559c31c460763d2d6db31a20" translate="yes" xml:space="preserve">
          <source>Methods and Actions</source>
          <target state="translated">方法と行動</target>
        </trans-unit>
        <trans-unit id="666268e79826afdec3fff0264016e94ef5b766ab" translate="yes" xml:space="preserve">
          <source>Methods are not duplicable:</source>
          <target state="translated">メソッドは複製できません。</target>
        </trans-unit>
        <trans-unit id="481f07082abcea98f240ee7383772b4988e84273" translate="yes" xml:space="preserve">
          <source>Methods can be delegated to instance variables, class variables, or constants by providing them as a symbols:</source>
          <target state="translated">メソッドは、シンボルとして提供することで、インスタンス変数、クラス変数、または定数に委任することができます。</target>
        </trans-unit>
        <trans-unit id="3419a2570908db81b298d7c6d51f10df0e243219" translate="yes" xml:space="preserve">
          <source>Methods defined in Active Record fixtures</source>
          <target state="translated">アクティブレコードのフィクスチャで定義されたメソッド</target>
        </trans-unit>
        <trans-unit id="8e227abc813f4dbe34a05c0e54629b2a9e2fc5be" translate="yes" xml:space="preserve">
          <source>Methods for sending arbitrary data and for streaming files to the browser, instead of rendering.</source>
          <target state="translated">レンダリングではなく、任意のデータを送信したり、ファイルをブラウザにストリーミングしたりするためのメソッド。</target>
        </trans-unit>
        <trans-unit id="d3ae077b906176fdf43ee4e5fa066f1c0a49b9ee" translate="yes" xml:space="preserve">
          <source>Methods must return a &lt;code&gt;Mail::Message&lt;/code&gt; object which can be generated by calling the mailer method without the additional &lt;code&gt;deliver_now&lt;/code&gt; / &lt;code&gt;deliver_later&lt;/code&gt;. The location of the mailer previews directory can be configured using the &lt;code&gt;preview_path&lt;/code&gt; option which has a default of &lt;code&gt;test/mailers/previews&lt;/code&gt;:</source>
          <target state="translated">メソッドは &lt;code&gt;Mail::Message&lt;/code&gt; オブジェクトを返す必要があります。このオブジェクトは、追加の &lt;code&gt;deliver_now&lt;/code&gt; / &lt;code&gt;deliver_later&lt;/code&gt; なしでメイラーメソッドを呼び出すことによって生成できます。メーラープレビューディレクトリの場所は、デフォルトの &lt;code&gt;test/mailers/previews&lt;/code&gt; &lt;code&gt;preview_path&lt;/code&gt; / previewsを持つpreview_pathオプションを使用して設定できます。</target>
        </trans-unit>
        <trans-unit id="a445a0c958f699e2d42015e88db5478fad019eca" translate="yes" xml:space="preserve">
          <source>Methods provided by Thor are not covered this guide and can be found in &lt;a href=&quot;http://rdoc.info/github/erikhuda/thor/master/Thor/Actions.html&quot;&gt;Thor's documentation&lt;/a&gt;</source>
          <target state="translated">トールが提供するメソッドは、このガイドでは説明されておらず、&lt;a href=&quot;http://rdoc.info/github/erikhuda/thor/master/Thor/Actions.html&quot;&gt;トールのドキュメントに記載&lt;/a&gt;されています。</target>
        </trans-unit>
        <trans-unit id="337d33d863058e0d37f9eac0f10f65d2f777c208" translate="yes" xml:space="preserve">
          <source>Methods that operate on collections are also aware of the hierarchy. For example, &lt;code&gt;Polygon.all&lt;/code&gt; returns all the records of the table, because all rectangles and triangles are polygons. Active Record takes care of returning instances of their corresponding class in the result set.</source>
          <target state="translated">コレクションを操作するメソッドも階層を認識しています。たとえば、すべての長方形と三角形はポリゴンであるため、 &lt;code&gt;Polygon.all&lt;/code&gt; はテーブルのすべてのレコードを返します。Active Recordは、結果セット内の対応するクラスのインスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="67cf221c8b87e3529b8c224fef7556811903e14a" translate="yes" xml:space="preserve">
          <source>Methods to create form controls are called &lt;strong&gt;on&lt;/strong&gt; the form builder object &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">フォームコントロールを作成するメソッド&lt;strong&gt;は&lt;/strong&gt;、フォームビルダーオブジェクト &lt;code&gt;f&lt;/code&gt; で呼び出さ&lt;strong&gt;れ&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="5de9d6fe8584b29709979d39884dc53d6c96e3a5" translate="yes" xml:space="preserve">
          <source>Methods will be added for retrieval and query for a single associated object, for which this object holds an id:</source>
          <target state="translated">このオブジェクトが id を保持している単一の関連付けられたオブジェクトの検索とクエリのためのメソッドが追加されます。</target>
        </trans-unit>
        <trans-unit id="5eb00c057aeacb4083ac81ba9b645b27dc753532" translate="yes" xml:space="preserve">
          <source>Microsoft Azure Storage Service</source>
          <target state="translated">マイクロソフトAzureストレージサービス</target>
        </trans-unit>
        <trans-unit id="b7507320067b372700f147199bfa6970bc4f77db" translate="yes" xml:space="preserve">
          <source>Middleware class can be inserted as a Rack handler to be local cache for the duration of request.</source>
          <target state="translated">ミドルウェアクラスをラックハンドラとして挿入して、リクエストの間はローカルキャッシュにすることができます。</target>
        </trans-unit>
        <trans-unit id="bf3312ce9eeb6125a88289fa4cc849222be8b06d" translate="yes" xml:space="preserve">
          <source>Middleware stack</source>
          <target state="translated">ミドルウェアスタック</target>
        </trans-unit>
        <trans-unit id="9d38520e4d12785ebcf01316593660ab8608f5f2" translate="yes" xml:space="preserve">
          <source>Middleware that determines which database connection to use in a multiple database application.</source>
          <target state="translated">複数のデータベースアプリケーションで使用するデータベース接続を決定するミドルウェア。</target>
        </trans-unit>
        <trans-unit id="563b6e9338739fba0218b72d657c3e48b84a5b78" translate="yes" xml:space="preserve">
          <source>Middleware::DatabaseSelector</source>
          <target state="translated">Middleware::DatabaseSelector</target>
        </trans-unit>
        <trans-unit id="8f269630c3fc0cbd7d46cc52b6ce2aee1bcbefa6" translate="yes" xml:space="preserve">
          <source>Middleware::DatabaseSelector#call</source>
          <target state="translated">Middleware::DatabaseSelector#call</target>
        </trans-unit>
        <trans-unit id="1ba8c8c9800962e37f6e1230fd89f8279c0728a5" translate="yes" xml:space="preserve">
          <source>Middleware::DatabaseSelector#context_klass</source>
          <target state="translated">Middleware::DatabaseSelector#context_klass</target>
        </trans-unit>
        <trans-unit id="01598e7d668159cced3b5d431bd75f29396ede41" translate="yes" xml:space="preserve">
          <source>Middleware::DatabaseSelector#options</source>
          <target state="translated">Middleware::DatabaseSelector#options</target>
        </trans-unit>
        <trans-unit id="155690df2c425380b1967de734857d9dbea0bb2b" translate="yes" xml:space="preserve">
          <source>Middleware::DatabaseSelector#resolver_klass</source>
          <target state="translated">Middleware::DatabaseSelector#resolver_klass</target>
        </trans-unit>
        <trans-unit id="0336e69fa320a456f7b839c7f9ef95e94d2ba03a" translate="yes" xml:space="preserve">
          <source>Middleware::DatabaseSelector::new</source>
          <target state="translated">Middleware::DatabaseSelector::new</target>
        </trans-unit>
        <trans-unit id="33b6b00c01da2bce5880337e4154f952b0cf5e1a" translate="yes" xml:space="preserve">
          <source>MiddlewareStack::InstrumentationProxy</source>
          <target state="translated">MiddlewareStack::InstrumentationProxy</target>
        </trans-unit>
        <trans-unit id="ce6014a5f10c8a7e1157c5ffac9afecce96ff840" translate="yes" xml:space="preserve">
          <source>MiddlewareStack::InstrumentationProxy#call</source>
          <target state="translated">MiddlewareStack::InstrumentationProxy#call</target>
        </trans-unit>
        <trans-unit id="5f8a75a366d8e0cf285b8df25b529ff4733f3dcd" translate="yes" xml:space="preserve">
          <source>MiddlewareStack::InstrumentationProxy::new</source>
          <target state="translated">MiddlewareStack::InstrumentationProxy::new</target>
        </trans-unit>
        <trans-unit id="27e0622c20c96144720c72ae273895e1f0116ee8" translate="yes" xml:space="preserve">
          <source>Middlewares</source>
          <target state="translated">Middlewares</target>
        </trans-unit>
        <trans-unit id="c36c34173f49fa742f965209eed50d88aaff346c" translate="yes" xml:space="preserve">
          <source>Middlewares are loaded once and are not monitored for changes. You will have to restart the server for changes to be reflected in the running application.</source>
          <target state="translated">ミドルウェアは一度読み込まれたもので、変更を監視することはありません。実行中のアプリケーションに変更が反映されるためには、サーバーを再起動する必要があります。</target>
        </trans-unit>
        <trans-unit id="282f075c796a3d6b9e95474b434c7581a2396fb7" translate="yes" xml:space="preserve">
          <source>Middlewares can also be completely swapped out and replaced with others:</source>
          <target state="translated">ミドルウェアも完全にスワップアウトして他のものと交換することができます。</target>
        </trans-unit>
        <trans-unit id="77bcdd2131896dea63742df165ba47d28766a503" translate="yes" xml:space="preserve">
          <source>Middlewares that need to manipulate the body won't work with streaming. You should disable those middlewares whenever streaming in development or production. For instance, &lt;code&gt;Rack::Bug&lt;/code&gt; won't work when streaming as it needs to inject contents in the HTML body.</source>
          <target state="translated">ボディを操作する必要があるミドルウェアは、ストリーミングでは機能しません。開発または本番環境でストリーミングする場合は、これらのミドルウェアを無効にする必要があります。たとえば、HTML本文にコンテンツを挿入する必要があるため、 &lt;code&gt;Rack::Bug&lt;/code&gt; はストリーミング時に機能しません。</target>
        </trans-unit>
        <trans-unit id="d0628fa131fd3749ca6f8ae87cbb36a3fdf7a395" translate="yes" xml:space="preserve">
          <source>Might want a shorter timeout depending on whether the request is a PATCH, PUT, or POST, and if the client is a browser or web service. Can be much shorter if the Stale directive is implemented. This would allow a user to use new nonce without prompting the user again for their username and password.</source>
          <target state="translated">リクエストが PATCH,PUT,POST のいずれかであるか、 クライアントがブラウザやウェブサービスであるかによっては、より短いタイムアウトが必要になるかもしれません。Stale ディレクティブが実装されていれば、もっと短くなるかもしれません。これにより、ユーザはユーザ名とパスワードの再入力を要求されることなく、 新しい nonce を使うことができます。</target>
        </trans-unit>
        <trans-unit id="de063e32dc06a43a0af8ea312ac86d212f940f81" translate="yes" xml:space="preserve">
          <source>Migrate away from MultiJSON by using &lt;code&gt;obj.to_json&lt;/code&gt;, and &lt;code&gt;JSON.parse(str)&lt;/code&gt; instead.</source>
          <target state="translated">使用してMultiJSONから離れ移行 &lt;code&gt;obj.to_json&lt;/code&gt; 、および &lt;code&gt;JSON.parse(str)&lt;/code&gt; の代わりに。</target>
        </trans-unit>
        <trans-unit id="849cf5dbd007a2e8d456dd72aa453236b2c87bd3" translate="yes" xml:space="preserve">
          <source>Migration Overview</source>
          <target state="translated">移行の概要</target>
        </trans-unit>
        <trans-unit id="c10689ae3fc90ca5bd5d3afa879fe03daf018267" translate="yes" xml:space="preserve">
          <source>Migration to create the comments table in your database (your name will include a different timestamp)</source>
          <target state="translated">マイグレーションは、データベースにコメントテーブルを作成するために(あなたの名前は、異なるタイムスタンプが含まれます)。</target>
        </trans-unit>
        <trans-unit id="df5bd8ca322d93957c7101e41c22684019c85ff5" translate="yes" xml:space="preserve">
          <source>MigrationProxy</source>
          <target state="translated">MigrationProxy</target>
        </trans-unit>
        <trans-unit id="dca984afd74a0089c1d5a5816e4de2e8d46a60b5" translate="yes" xml:space="preserve">
          <source>Migrations</source>
          <target state="translated">Migrations</target>
        </trans-unit>
        <trans-unit id="92fa499d9dbdc22d3d47a8967f65d9b91f5e16f5" translate="yes" xml:space="preserve">
          <source>Migrations &amp;amp; seed data</source>
          <target state="translated">移行とシードデータ</target>
        </trans-unit>
        <trans-unit id="add41b9c7d182bf31f14e478e595fffc9cc6dbbf" translate="yes" xml:space="preserve">
          <source>Migrations and Seed Data</source>
          <target state="translated">移行とシードデータ</target>
        </trans-unit>
        <trans-unit id="57a43495bb4f9921561af4c2e6643f541818d776" translate="yes" xml:space="preserve">
          <source>Migrations are a convenient way to &lt;a href=&quot;https://en.wikipedia.org/wiki/Schema_migration&quot;&gt;alter your database schema over time&lt;/a&gt; in a consistent and easy way. They use a Ruby DSL so that you don't have to write SQL by hand, allowing your schema and changes to be database independent.</source>
          <target state="translated">移行は、一貫して簡単な方法で&lt;a href=&quot;https://en.wikipedia.org/wiki/Schema_migration&quot;&gt;データベーススキーマを時間の経過&lt;/a&gt;とともに変更する便利な方法です。彼らはRuby DSLを使用しているため、SQLを手動で作成する必要がなく、スキーマや変更をデータベースに依存しないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="35eb283061f63c9f2d9c8759c68d4c4790d997dd" translate="yes" xml:space="preserve">
          <source>Migrations are a feature of Active Record that allows you to evolve your database schema over time. Rather than write schema modifications in pure SQL, migrations allow you to use an easy Ruby DSL to describe changes to your tables.</source>
          <target state="translated">マイグレーションはActive Recordの機能で、データベースのスキーマを時間の経過とともに進化させることができます。純粋なSQLでスキーマの変更を記述するのではなく、移行により、簡単なRuby DSLを使用してテーブルへの変更を記述することができます。</target>
        </trans-unit>
        <trans-unit id="ae5636cafa88975771a82a06eb973872d54fc377" translate="yes" xml:space="preserve">
          <source>Migrations are currently supported in MySQL, PostgreSQL, SQLite, SQL Server, and Oracle (all supported databases except DB2).</source>
          <target state="translated">移行は現在、MySQL、PostgreSQL、SQLite、SQL Server、Oracle(DB2を除くすべてのサポートされているデータベース)でサポートされています。</target>
        </trans-unit>
        <trans-unit id="dd0a5b8c9fe431987a19d0d866524897437e203c" translate="yes" xml:space="preserve">
          <source>Migrations are stored as files in the &lt;code&gt;db/migrate&lt;/code&gt; directory, one for each migration class. The name of the file is of the form &lt;code&gt;YYYYMMDDHHMMSS_create_products.rb&lt;/code&gt;, that is to say a UTC timestamp identifying the migration followed by an underscore followed by the name of the migration. The name of the migration class (CamelCased version) should match the latter part of the file name. For example &lt;code&gt;20080906120000_create_products.rb&lt;/code&gt; should define class &lt;code&gt;CreateProducts&lt;/code&gt; and &lt;code&gt;20080906120001_add_details_to_products.rb&lt;/code&gt; should define &lt;code&gt;AddDetailsToProducts&lt;/code&gt;. Rails uses this timestamp to determine which migration should be run and in what order, so if you're copying a migration from another application or generate a file yourself, be aware of its position in the order.</source>
          <target state="translated">マイグレーションは、マイグレーションクラスごとに1つずつ、ファイルとして &lt;code&gt;db/migrate&lt;/code&gt; ディレクトリに保存されます。ファイルの名前は &lt;code&gt;YYYYMMDDHHMMSS_create_products.rb&lt;/code&gt; という形式です。つまり、移行を識別するUTCタイムスタンプの後にアンダースコアが続き、その後に移行の名前が続きます。移行クラスの名前（CamelCasedバージョン）は、ファイル名の後半部分と一致する必要があります。例えば &lt;code&gt;20080906120000_create_products.rb&lt;/code&gt; は、クラス定義する必要があり &lt;code&gt;CreateProducts&lt;/code&gt; をして &lt;code&gt;20080906120001_add_details_to_products.rb&lt;/code&gt; は定義する必要があり &lt;code&gt;AddDetailsToProducts&lt;/code&gt; を。Railsはこのタイムスタンプを使用して、どの移行をどの順序で実行するかを決定します。そのため、別のアプリケーションから移行をコピーするか、自分でファイルを生成する場合は、その順序での位置に注意してください。</target>
        </trans-unit>
        <trans-unit id="d26d12943d7d80825abca46a5dc3235ea3ec50a2" translate="yes" xml:space="preserve">
          <source>Migrations can manage the evolution of a schema used by several physical databases. It's a solution to the common problem of adding a field to make a new feature work in your local database, but being unsure of how to push that change to other developers and to the production server. With migrations, you can describe the transformations in self-contained classes that can be checked into version control systems and executed against another database that might be one, two, or five versions behind.</source>
          <target state="translated">移行は、複数の物理データベースで使用されているスキーマの進化を管理することができます。これは、ローカルデータベースで新機能を動作させるためにフィールドを追加したいが、その変更を他の開発者や本番サーバにどのようにプッシュすればよいかわからないというよくある問題を解決するものです。移行では、自己完結型のクラスで変換を記述することができ、バージョン管理システムにチェックを入れて、1つ、2つ、5つのバージョンが遅れているかもしれない別のデータベースに対して実行することができます。</target>
        </trans-unit>
        <trans-unit id="f94ebd9500c999984b8945609bc2df7a540d229d" translate="yes" xml:space="preserve">
          <source>Migrations for multiple databases should live in their own folders prefixed with the name of the database key in the configuration.</source>
          <target state="translated">複数のデータベースへの移行は、設定のデータベースキーの名前を先頭にして、それぞれのフォルダに格納する必要があります。</target>
        </trans-unit>
        <trans-unit id="86a3425e7c377c2db63091c03252f49164c0a2bc" translate="yes" xml:space="preserve">
          <source>Migrations, mighty as they may be, are not the authoritative source for your database schema. Your database remains the authoritative source. By default, Rails generates &lt;code&gt;db/schema.rb&lt;/code&gt; which attempts to capture the current state of your database schema.</source>
          <target state="translated">移行は、場合によっては強力であっても、データベーススキーマの信頼できるソースではありません。データベースは信頼できるソースのままです。デフォルトでは、Railsはデータベーススキーマの現在の状態をキャプチャしようとする &lt;code&gt;db/schema.rb&lt;/code&gt; を生成します。</target>
        </trans-unit>
        <trans-unit id="1e3979049ac0db93535e487d19b907375014fe97" translate="yes" xml:space="preserve">
          <source>Mime</source>
          <target state="translated">Mime</target>
        </trans-unit>
        <trans-unit id="837a9cd6761dcbf9f4cc0d2283bc69ff6d49162f" translate="yes" xml:space="preserve">
          <source>Mime::Type</source>
          <target state="translated">Mime::Type</target>
        </trans-unit>
        <trans-unit id="3d541a2228a89762108026001dee109145d47890" translate="yes" xml:space="preserve">
          <source>Mime::[]</source>
          <target state="translated">Mime::[]</target>
        </trans-unit>
        <trans-unit id="0926e3a2597b119bebc1a1fce3d223f29ed8f149" translate="yes" xml:space="preserve">
          <source>Mime::fetch</source>
          <target state="translated">Mime::fetch</target>
        </trans-unit>
        <trans-unit id="050981c2f1d2b6a48d219c1eccf7c86033e0e849" translate="yes" xml:space="preserve">
          <source>MimeResponds</source>
          <target state="translated">MimeResponds</target>
        </trans-unit>
        <trans-unit id="8b545c051d507c480dba95bf413fce8705988b77" translate="yes" xml:space="preserve">
          <source>MimeResponds#respond_to</source>
          <target state="translated">MimeResponds#respond_to</target>
        </trans-unit>
        <trans-unit id="6f5a075fbf5fd5c483250378da86ae9b313d0b5e" translate="yes" xml:space="preserve">
          <source>MimeResponds::Collector</source>
          <target state="translated">MimeResponds::Collector</target>
        </trans-unit>
        <trans-unit id="dd15e78a286dc1fcb96a6d760a8accbea04d2f46" translate="yes" xml:space="preserve">
          <source>MimeResponds::Collector#all</source>
          <target state="translated">MimeResponds::Collector#all</target>
        </trans-unit>
        <trans-unit id="3186ed947655e8e13c11d197e22b057a3b826b5a" translate="yes" xml:space="preserve">
          <source>MimeResponds::Collector#any</source>
          <target state="translated">MimeResponds::Collector#any</target>
        </trans-unit>
        <trans-unit id="077fae0e3039a4b3ba6f06a7b2493faf6bc94149" translate="yes" xml:space="preserve">
          <source>MimeResponds::Collector#custom</source>
          <target state="translated">MimeResponds::Collector#custom</target>
        </trans-unit>
        <trans-unit id="0a408c565a901345e13710dce8b46ddc83596604" translate="yes" xml:space="preserve">
          <source>MimeResponds::Collector#format</source>
          <target state="translated">MimeResponds::Collector#format</target>
        </trans-unit>
        <trans-unit id="d7d7238b3edbaa05ba30c1b8de1d6eae8196c62e" translate="yes" xml:space="preserve">
          <source>MimeResponds::Collector#negotiate_format</source>
          <target state="translated">MimeResponds::Collector#negotiate_format</target>
        </trans-unit>
        <trans-unit id="a43f44c574ab0f660ef86ec6284e21f6a15123a3" translate="yes" xml:space="preserve">
          <source>MimeResponds::Collector#response</source>
          <target state="translated">MimeResponds::Collector#response</target>
        </trans-unit>
        <trans-unit id="c94b172f9c46140e4befb5a3b40843c333dc1bd0" translate="yes" xml:space="preserve">
          <source>MimeResponds::Collector::new</source>
          <target state="translated">MimeResponds::Collector::new</target>
        </trans-unit>
        <trans-unit id="5d398eef3ecc3ea6a161734581d0bd3d920b64d8" translate="yes" xml:space="preserve">
          <source>Minimum</source>
          <target state="translated">Minimum</target>
        </trans-unit>
        <trans-unit id="16596f8408b40402e03fb1fa1fea448e6247038b" translate="yes" xml:space="preserve">
          <source>Minitest::Test</source>
          <target state="translated">Minitest::Test</target>
        </trans-unit>
        <trans-unit id="74043cd8393b54dc6043472a59ad52bfb062b30d" translate="yes" xml:space="preserve">
          <source>Mirror Service</source>
          <target state="translated">ミラーサービス</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="432aa1daa28e69ab50b92351f6f2af0a95b10677" translate="yes" xml:space="preserve">
          <source>MismatchedForeignKey</source>
          <target state="translated">MismatchedForeignKey</target>
        </trans-unit>
        <trans-unit id="df53296b1d6061c27762beb02feb56a79d980fe5" translate="yes" xml:space="preserve">
          <source>MismatchedForeignKey::new</source>
          <target state="translated">MismatchedForeignKey::new</target>
        </trans-unit>
        <trans-unit id="c9027d21a516adb82b35423ae731d466f68685dd" translate="yes" xml:space="preserve">
          <source>Missing routes keys may be filled in from the current request's parameters (e.g. &lt;code&gt;:controller&lt;/code&gt;, &lt;code&gt;:action&lt;/code&gt;, &lt;code&gt;:id&lt;/code&gt; and any other parameters that are placed in the path). Given that the current action has been reached through &lt;code&gt;GET
/users/1&lt;/code&gt;:</source>
          <target state="translated">欠落しているルートキーは、現在のリクエストのパラメーター（たとえば、 &lt;code&gt;:controller&lt;/code&gt; 、 &lt;code&gt;:action&lt;/code&gt; 、 &lt;code&gt;:id&lt;/code&gt; 、およびパスに配置されているその他のパラメーター）から入力される場合があります。現在のアクションを介して到達されたことを考えると &lt;code&gt;GET /users/1&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="41937a7bc85765db9aca03191382c7b168e9b5f0" translate="yes" xml:space="preserve">
          <source>Mix this module into your controller, and all actions in that controller will be able to stream data to the client as it's written.</source>
          <target state="translated">このモジュールをコントローラに組み込むと、コントローラ内のすべてのアクションが、書かれた通りにデータをクライアントにストリームすることができるようになります。</target>
        </trans-unit>
        <trans-unit id="605c579c268184680eec501755fbbe56698c9acc" translate="yes" xml:space="preserve">
          <source>Mix-in noise exiled to its own file:</source>
          <target state="translated">独自のファイルに追放されたミックスインノイズ。</target>
        </trans-unit>
        <trans-unit id="8d259b78f39d0db65eeb3909e9dfd3052b08bc7c" translate="yes" xml:space="preserve">
          <source>Mixing in this module allows you to define the events in the object's life cycle that will support callbacks (via &lt;code&gt;ClassMethods.define_callbacks&lt;/code&gt;), set the instance methods, procs, or callback objects to be called (via &lt;code&gt;ClassMethods.set_callback&lt;/code&gt;), and run the installed callbacks at the appropriate times (via &lt;code&gt;run_callbacks&lt;/code&gt;).</source>
          <target state="translated">このモジュールを &lt;code&gt;ClassMethods.define_callbacks&lt;/code&gt; 、コールバックをサポートする（ClassMethods.define_callbacksを介して）オブジェクトのライフサイクル内のイベントを定義し、呼び出されるインスタンスメソッド、プロシージャ、またはコールバックオブジェクトを（ &lt;code&gt;ClassMethods.set_callback&lt;/code&gt; を介して）設定し、インストールされている適切なタイミングでのコールバック（ &lt;code&gt;run_callbacks&lt;/code&gt; を使用）。</target>
        </trans-unit>
        <trans-unit id="6bf1644fb9edca063e6ffc86e4f90c94f369309b" translate="yes" xml:space="preserve">
          <source>Mixing with other form helpers</source>
          <target state="translated">他のフォームヘルパーとの混合</target>
        </trans-unit>
        <trans-unit id="3d28be03faf876ad49209848ad7be7b220d78b7e" translate="yes" xml:space="preserve">
          <source>Mobile Safari looks for a different link tag, pointing to an image that will be used if you add the page to the home screen of an iOS device. The following call would generate such a tag:</source>
          <target state="translated">Mobile Safariは、iOSデバイスのホーム画面にページを追加した場合に使用される画像を指す別のリンクタグを探します。以下の呼び出しは、このようなタグを生成します。</target>
        </trans-unit>
        <trans-unit id="68c2cc7f0ceaa3e499ecb4db331feb4debbbcc23" translate="yes" xml:space="preserve">
          <source>Model</source>
          <target state="translated">Model</target>
        </trans-unit>
        <trans-unit id="995901a6d05be888b514f03ce152df52987cf9d7" translate="yes" xml:space="preserve">
          <source>Model / Class</source>
          <target state="translated">モデル/クラス</target>
        </trans-unit>
        <trans-unit id="506e58da3784558b9ced4bdec6bcfcf767fb21fa" translate="yes" xml:space="preserve">
          <source>Model Class - Singular with the first letter of each word capitalized (e.g., &lt;code&gt;BookClub&lt;/code&gt;).</source>
          <target state="translated">モデルクラス-各単語の最初の文字を大文字にした単数形（例： &lt;code&gt;BookClub&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="12bcd30f814db80cb1f7e7a2796b829953df4af8" translate="yes" xml:space="preserve">
          <source>Model Generators</source>
          <target state="translated">モデルジェネレーター</target>
        </trans-unit>
        <trans-unit id="33ac27d1e8badd8f928fc67c97f045d911339e91" translate="yes" xml:space="preserve">
          <source>Model Object Helpers</source>
          <target state="translated">モデルオブジェクトヘルパー</target>
        </trans-unit>
        <trans-unit id="d52c41ee4ca421219a75e5a69582d944082143e0" translate="yes" xml:space="preserve">
          <source>Model Testing</source>
          <target state="translated">モデルテスト</target>
        </trans-unit>
        <trans-unit id="4ec9ebd42f054a98c3da4bc4a0a86ee8eda11c19" translate="yes" xml:space="preserve">
          <source>Model attributes have a reader, a writer, and a predicate. You can alias a model attribute having the corresponding three methods defined for you in one shot. As in other aliasing methods, the new name is the first argument, and the old name is the second (one mnemonic is that they go in the same order as if you did an assignment):</source>
          <target state="translated">モデル属性には、リーダ、ライタ、述語があります。対応する3つのメソッドを定義したモデル属性を一発でエイリアスすることができます。他のエイリアス方法と同様に、新しい名前が第一引数で、古い名前が第二引数となります(一つのニーモニックな方法は、課題を行う場合と同じ順番で実行することです)。</target>
        </trans-unit>
        <trans-unit id="55122a12c64767a82f2b9a00f00e2eb10873a428" translate="yes" xml:space="preserve">
          <source>Model tests are used to test the various models of your application.</source>
          <target state="translated">モデルテストは、アプリケーションの様々なモデルをテストするために使用されます。</target>
        </trans-unit>
        <trans-unit id="2b6825ada8068d617c4713f563e77b48935cfc12" translate="yes" xml:space="preserve">
          <source>Model tests don't have their own superclass like &lt;code&gt;ActionMailer::TestCase&lt;/code&gt; instead they inherit from &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/TestCase.html&quot;&gt;&lt;code&gt;ActiveSupport::TestCase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">モデルテストには、 &lt;code&gt;ActionMailer::TestCase&lt;/code&gt; ような独自のスーパークラスがありません。代わりに、&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/TestCase.html&quot;&gt; &lt;code&gt;ActiveSupport::TestCase&lt;/code&gt; &lt;/a&gt;から継承します。</target>
        </trans-unit>
        <trans-unit id="2f48817ab34d92bde58ab86f2f428072514122ae" translate="yes" xml:space="preserve">
          <source>Model#persisted?</source>
          <target state="translated">Model#persisted?</target>
        </trans-unit>
        <trans-unit id="4e64f33abdbac5e5ff3f2e0c7fa34b64c6f354dd" translate="yes" xml:space="preserve">
          <source>Model::new</source>
          <target state="translated">Model::new</target>
        </trans-unit>
        <trans-unit id="a5db1f719d035d2f86dd53bc73b31dd5d8068fa4" translate="yes" xml:space="preserve">
          <source>ModelSchema</source>
          <target state="translated">ModelSchema</target>
        </trans-unit>
        <trans-unit id="d441ba5c7e24f4a6db2f90c5e92148cb34f38781" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods</source>
          <target state="translated">ModelSchema::ClassMethods</target>
        </trans-unit>
        <trans-unit id="f0c7506bc80fe2b9aa98f1bff85e0301e077fb1c" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#column_defaults</source>
          <target state="translated">ModelSchema::ClassMethods#column_defaults</target>
        </trans-unit>
        <trans-unit id="e4b875e3ee3c2296967f7855c30256163a85c06b" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#column_names</source>
          <target state="translated">ModelSchema::ClassMethods#column_names</target>
        </trans-unit>
        <trans-unit id="00b3898ec2cd08cbe44ab0fc9d248fb3e907a774" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#columns</source>
          <target state="translated">ModelSchema::ClassMethods#columns</target>
        </trans-unit>
        <trans-unit id="8a528d813dbaef3873723d8e3064d1398a98f18b" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#content_columns</source>
          <target state="translated">ModelSchema::ClassMethods#content_columns</target>
        </trans-unit>
        <trans-unit id="30ca4105a6f05ea7297f11d83896095972184c21" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#ignored_columns</source>
          <target state="translated">ModelSchema::ClassMethods#ignored_columns</target>
        </trans-unit>
        <trans-unit id="1226cd6aa58cebf7a5e070fb6137578c208b0802" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#ignored_columns=</source>
          <target state="translated">ModelSchema::ClassMethods#ignored_columns=</target>
        </trans-unit>
        <trans-unit id="ebe513fb11fd20dba0ba645e2edd6ed770f802f4" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#inheritance_column</source>
          <target state="translated">ModelSchema::ClassMethods#inheritance_column</target>
        </trans-unit>
        <trans-unit id="39d4c5f29d57690fb20af6be5053214a278517c1" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#inheritance_column=</source>
          <target state="translated">ModelSchema::ClassMethods#inheritance_column=</target>
        </trans-unit>
        <trans-unit id="638056b926ae5b5e9d04d40a36348eeff37ec51b" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#initialize_load_schema_monitor</source>
          <target state="translated">ModelSchema::ClassMethods#initialize_load_schema_monitor</target>
        </trans-unit>
        <trans-unit id="cfdf8706cebcfc8f7edbfa7e020989f53119191c" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#next_sequence_value</source>
          <target state="translated">ModelSchema::ClassMethods#next_sequence_value</target>
        </trans-unit>
        <trans-unit id="b3de9d78e61cce1bfb45aebe65dee739fec0c3b6" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#prefetch_primary_key?</source>
          <target state="translated">ModelSchema::ClassMethods#prefetch_primary_key?</target>
        </trans-unit>
        <trans-unit id="5c638cca0496e75fa8bdd3ef760687b62143bd87" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#protected_environments</source>
          <target state="translated">ModelSchema::ClassMethods#protected_environments</target>
        </trans-unit>
        <trans-unit id="b49a9d0078e1a6b59d5626d3edb9b0be56f14a2e" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#protected_environments=</source>
          <target state="translated">ModelSchema::ClassMethods#protected_environments=</target>
        </trans-unit>
        <trans-unit id="df0f9208df053b27a067b113784578798515de75" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#quoted_table_name</source>
          <target state="translated">ModelSchema::ClassMethods#quoted_table_name</target>
        </trans-unit>
        <trans-unit id="34aa90a1129948e9f4a0488047f67ef89969c5fc" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#reset_column_information</source>
          <target state="translated">ModelSchema::ClassMethods#reset_column_information</target>
        </trans-unit>
        <trans-unit id="4ec0770a96fdf697248442b1010e45ec5cc2648a" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#sequence_name</source>
          <target state="translated">ModelSchema::ClassMethods#sequence_name</target>
        </trans-unit>
        <trans-unit id="8aac7e2479a471101f94603dc47c6282e17718d1" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#sequence_name=</source>
          <target state="translated">ModelSchema::ClassMethods#sequence_name=</target>
        </trans-unit>
        <trans-unit id="32b16c33fdddfbf58ef1861aeb3e5fa24adc6132" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#table_exists?</source>
          <target state="translated">ModelSchema::ClassMethods#table_exists?</target>
        </trans-unit>
        <trans-unit id="2daf3196846b82ba6ce8254246befb81255884e0" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#table_name</source>
          <target state="translated">ModelSchema::ClassMethods#table_name</target>
        </trans-unit>
        <trans-unit id="17d64cbc84f6a89f2fb5594f6be6487222648148" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#table_name=</source>
          <target state="translated">ModelSchema::ClassMethods#table_name=</target>
        </trans-unit>
        <trans-unit id="b7be56821c21245487af1e9e89268a7fa3a26889" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#type_for_attribute</source>
          <target state="translated">ModelSchema::ClassMethods#type_for_attribute</target>
        </trans-unit>
        <trans-unit id="1bece6f5eaebefa7dd968a26fca03b1c68c0cca3" translate="yes" xml:space="preserve">
          <source>ModelSchema::implicit_order_column</source>
          <target state="translated">ModelSchema::implicit_order_column</target>
        </trans-unit>
        <trans-unit id="fb87d535030cc77f6eea99000bb3cea45e1edc55" translate="yes" xml:space="preserve">
          <source>ModelSchema::implicit_order_column=</source>
          <target state="translated">ModelSchema::implicit_order_column=</target>
        </trans-unit>
        <trans-unit id="431e95ad2f8f90f99412581d3cd5dfe16abee564" translate="yes" xml:space="preserve">
          <source>ModelSchema::internal_metadata_table_name</source>
          <target state="translated">ModelSchema::internal_metadata_table_name</target>
        </trans-unit>
        <trans-unit id="98b6b1f31f822ce45ba0cb29e89ac6123c8d48f4" translate="yes" xml:space="preserve">
          <source>ModelSchema::internal_metadata_table_name=</source>
          <target state="translated">ModelSchema::internal_metadata_table_name=</target>
        </trans-unit>
        <trans-unit id="8590c49fd4bb679ea3badb5e84d0a0953bbbd833" translate="yes" xml:space="preserve">
          <source>ModelSchema::pluralize_table_names</source>
          <target state="translated">ModelSchema::pluralize_table_names</target>
        </trans-unit>
        <trans-unit id="ebcf9310ab2b6b0318d091ceb7b1c703c0ac45b7" translate="yes" xml:space="preserve">
          <source>ModelSchema::pluralize_table_names=</source>
          <target state="translated">ModelSchema::pluralize_table_names=</target>
        </trans-unit>
        <trans-unit id="b43262e7c70a6f23fc2c45ec6b8a726355f76039" translate="yes" xml:space="preserve">
          <source>ModelSchema::primary_key_prefix_type</source>
          <target state="translated">ModelSchema::primary_key_prefix_type</target>
        </trans-unit>
        <trans-unit id="6c1cb907a3190d2cb95d00e64613bae792025c7c" translate="yes" xml:space="preserve">
          <source>ModelSchema::primary_key_prefix_type=</source>
          <target state="translated">ModelSchema::primary_key_prefix_type=</target>
        </trans-unit>
        <trans-unit id="de67ebceb5546c59b706f434213517811df93916" translate="yes" xml:space="preserve">
          <source>ModelSchema::schema_migrations_table_name</source>
          <target state="translated">ModelSchema::schema_migrations_table_name</target>
        </trans-unit>
        <trans-unit id="39ef611dd8b38aff324d220142a154c1bc699e95" translate="yes" xml:space="preserve">
          <source>ModelSchema::schema_migrations_table_name=</source>
          <target state="translated">ModelSchema::schema_migrations_table_name=</target>
        </trans-unit>
        <trans-unit id="a9efeee47a5a06ca364ef4cb85ffe51ec9687c6d" translate="yes" xml:space="preserve">
          <source>ModelSchema::table_name_prefix</source>
          <target state="translated">ModelSchema::table_name_prefix</target>
        </trans-unit>
        <trans-unit id="8f5e531aa919cbc02fa58144c8b391e2dc8af1fa" translate="yes" xml:space="preserve">
          <source>ModelSchema::table_name_prefix=</source>
          <target state="translated">ModelSchema::table_name_prefix=</target>
        </trans-unit>
        <trans-unit id="6c66134e0c6448bba29b0fc5c80c6bc88daf08db" translate="yes" xml:space="preserve">
          <source>ModelSchema::table_name_suffix</source>
          <target state="translated">ModelSchema::table_name_suffix</target>
        </trans-unit>
        <trans-unit id="33b6803388ddcb50e4870abc9e5cad2d62b56c1d" translate="yes" xml:space="preserve">
          <source>ModelSchema::table_name_suffix=</source>
          <target state="translated">ModelSchema::table_name_suffix=</target>
        </trans-unit>
        <trans-unit id="f3798f81c7b6fecad2cbfec741314f8a66c0eca3" translate="yes" xml:space="preserve">
          <source>Models</source>
          <target state="translated">Models</target>
        </trans-unit>
        <trans-unit id="30f7aa9f7fd11d6341a4cf482eb7088bbc806644" translate="yes" xml:space="preserve">
          <source>Models in Rails use a singular name, and their corresponding database tables use a plural name. Rails provides a generator for creating models, which most Rails developers tend to use when creating new models. To create the new model, run this command in your terminal:</source>
          <target state="translated">Railsのモデルは単数形の名前を使用し、対応するデータベーステーブルは複数形の名前を使用します。Railsにはモデルを作成するためのジェネレーターが用意されており、ほとんどのRails開発者は新しいモデルを作成するときにこれを使う傾向があります。新しいモデルを作成するには、ターミナルで次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="212e02f4daf070220d134976d698fbfd6435b031" translate="yes" xml:space="preserve">
          <source>Models uploaded files.</source>
          <target state="translated">モデルがファイルをアップロードしました。</target>
        </trans-unit>
        <trans-unit id="e3ea079ded57effba0d3c11311c33855f14ee35e" translate="yes" xml:space="preserve">
          <source>Modification</source>
          <target state="translated">Modification</target>
        </trans-unit>
        <trans-unit id="2625f3c6940984f6f3e4268c2479f099c0bbd324" translate="yes" xml:space="preserve">
          <source>Modifying code is generally straightforward. If you have a line of code that refers to a Rails framework such as &lt;code&gt;ActiveRecord::Base&lt;/code&gt; you can wrap that code in an &lt;code&gt;on_load&lt;/code&gt; hook.</source>
          <target state="translated">コードの変更は、通常は簡単です。 &lt;code&gt;ActiveRecord::Base&lt;/code&gt; などのRailsフレームワークを参照するコード行がある場合、そのコードを &lt;code&gt;on_load&lt;/code&gt; フックでラップできます。</target>
        </trans-unit>
        <trans-unit id="0b313c3c2650f892a30a82cbbbbfb0962b6ae7b5" translate="yes" xml:space="preserve">
          <source>Modifying code to use &lt;code&gt;on_load&lt;/code&gt; hooks</source>
          <target state="translated">&lt;code&gt;on_load&lt;/code&gt; フックを使用するようにコードを変更する</target>
        </trans-unit>
        <trans-unit id="b8ff02892916ff59f7fbd4e617fccd01f6bca576" translate="yes" xml:space="preserve">
          <source>Module</source>
          <target state="translated">Module</target>
        </trans-unit>
        <trans-unit id="35f34b19ff60e68c68b8e81cf54c250dd275712f" translate="yes" xml:space="preserve">
          <source>Module::Concerning</source>
          <target state="translated">Module::Concerning</target>
        </trans-unit>
        <trans-unit id="9d4eba0f3d95edee88947f6d524fd5959c3a0997" translate="yes" xml:space="preserve">
          <source>Module::DelegationError</source>
          <target state="translated">Module::DelegationError</target>
        </trans-unit>
        <trans-unit id="04e9462c0ff02bb9032b92abd45881a3c7e15fb7" translate="yes" xml:space="preserve">
          <source>Modules</source>
          <target state="translated">Modules</target>
        </trans-unit>
        <trans-unit id="ec0f10698082c93db66cc3bacc7c4262043d5c37" translate="yes" xml:space="preserve">
          <source>Monitor</source>
          <target state="translated">Monitor</target>
        </trans-unit>
        <trans-unit id="541d63743d11a8fb491dae7ec4b904d23e530d3d" translate="yes" xml:space="preserve">
          <source>More Complete Examples</source>
          <target state="translated">より完全な例</target>
        </trans-unit>
        <trans-unit id="ba917a0f4aba99c86e775d91895afeb4b93ff99a" translate="yes" xml:space="preserve">
          <source>More advanced use of the command line is focused around finding useful (even surprising at times) options in the utilities, and fitting those to your needs and specific work flow. Listed here are some tricks up Rails' sleeve.</source>
          <target state="translated">コマンドラインのより高度な使い方は、ユーティリティの中から便利な(時には驚くような)オプションを見つけて、それをあなたのニーズや特定のワークフローに適合させることに重点を置いています。ここでは、Railsのトリックをいくつか挙げています。</target>
        </trans-unit>
        <trans-unit id="383f0e0e882a4dc2683b66372e6aa52e3a75f04b" translate="yes" xml:space="preserve">
          <source>More examples</source>
          <target state="translated">その他の例</target>
        </trans-unit>
        <trans-unit id="80a6b992b86c1ba7e1983d83fe134aaae1109b0e" translate="yes" xml:space="preserve">
          <source>More information about migrations can be found in the &lt;a href=&quot;active_record_migrations&quot;&gt;Migrations&lt;/a&gt; guide.</source>
          <target state="translated">移行の詳細については、&lt;a href=&quot;active_record_migrations&quot;&gt;移行&lt;/a&gt;ガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="b6053fd77164aa71fabc62e1525d3a4af41ecd65" translate="yes" xml:space="preserve">
          <source>More information can be found in &lt;a href=&quot;core/classmethods#method-i-set&quot;&gt;ActiveJob::Core::ClassMethods#set&lt;/a&gt;</source>
          <target state="translated">詳細については、&lt;a href=&quot;core/classmethods#method-i-set&quot;&gt;ActiveJob :: Core :: ClassMethods＃setを参照してください&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1a85b705b6839888932e068d061c266aa144e7aa" translate="yes" xml:space="preserve">
          <source>More precisely, if the web server is running and application files have been modified, Rails unloads all autoloaded constants just before the next request is processed. That way, application classes or modules used during that request are going to be autoloaded, thus picking up their current implementation in the file system.</source>
          <target state="translated">より正確には、Webサーバが動作していてアプリケーションファイルが変更されている場合、Railsは次のリクエストが処理される直前に、オートロードされたすべての定数をアンロードします。このようにして、そのリクエスト中に使用されたアプリケーションクラスやモジュールはオートロードされ、ファイルシステムに現在の実装が反映されるようになります。</target>
        </trans-unit>
        <trans-unit id="3a7a86c3c7bb6f061ed4b7dd4612a07ea2e55494" translate="yes" xml:space="preserve">
          <source>More reading:</source>
          <target state="translated">続きを読む</target>
        </trans-unit>
        <trans-unit id="1bc0107abee30f824ef23a770858703e03f38a74" translate="yes" xml:space="preserve">
          <source>Moreover, &lt;code&gt;Kernel#require&lt;/code&gt; loads files once, but development is much more smooth if code gets refreshed when it changes without restarting the server. It would be nice to be able to use &lt;code&gt;Kernel#load&lt;/code&gt; in development, and &lt;code&gt;Kernel#require&lt;/code&gt; in production.</source>
          <target state="translated">さらに、 &lt;code&gt;Kernel#require&lt;/code&gt; はファイルを一度ロードしますが、サーバーを再起動せずにコードが変更されたときにコードが更新されると、開発はよりスムーズになります。開発では &lt;code&gt;Kernel#load&lt;/code&gt; を、実稼働では &lt;code&gt;Kernel#require&lt;/code&gt; を使用できると便利です。</target>
        </trans-unit>
        <trans-unit id="d327e6ec6a6af69476c66c4050cf30edbe14a000" translate="yes" xml:space="preserve">
          <source>Moreover, it gracefully handles module dependencies. Given a &lt;code&gt;Foo&lt;/code&gt; module and a &lt;code&gt;Bar&lt;/code&gt; module which depends on the former, we would typically write the following:</source>
          <target state="translated">さらに、モジュールの依存関係を適切に処理します。 &lt;code&gt;Foo&lt;/code&gt; モジュールと前者に依存する &lt;code&gt;Bar&lt;/code&gt; モジュールを考えると、通常は次のように記述します。</target>
        </trans-unit>
        <trans-unit id="1336dbab8404ab8354f8b7e595d9f9da94e52e6a" translate="yes" xml:space="preserve">
          <source>Moreover, since the test class extends from &lt;code&gt;ActionView::TestCase&lt;/code&gt;, you have access to Rails' helper methods such as &lt;code&gt;link_to&lt;/code&gt; or &lt;code&gt;pluralize&lt;/code&gt;.</source>
          <target state="translated">さらに、テストクラスは &lt;code&gt;ActionView::TestCase&lt;/code&gt; から拡張されているため、 &lt;code&gt;link_to&lt;/code&gt; や &lt;code&gt;pluralize&lt;/code&gt; などのRailsのヘルパーメソッドにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="88b40b9cf93fa0667fdbc7fa5d068e722af43930" translate="yes" xml:space="preserve">
          <source>Most CDNs will cache contents of an asset based on the complete URL. This means that a request to</source>
          <target state="translated">ほとんどの CDN は、完全な URL に基づいてアセットのコンテンツをキャッシュします。これは</target>
        </trans-unit>
        <trans-unit id="f008a7d63f26d69778b0b37e05dd3fcfe81eed47" translate="yes" xml:space="preserve">
          <source>Most WYSIWYG editors are wrappers around HTML&amp;rsquo;s &lt;code&gt;contenteditable&lt;/code&gt; and &lt;code&gt;execCommand&lt;/code&gt; APIs, designed by Microsoft to support live editing of web pages in Internet Explorer 5.5, and &lt;a href=&quot;https://blog.whatwg.org/the-road-to-html-5-contenteditable#history&quot;&gt;eventually reverse-engineered&lt;/a&gt; and copied by other browsers.</source>
          <target state="translated">ほとんどのWYSIWYGエディターは、HTMLの &lt;code&gt;contenteditable&lt;/code&gt; および &lt;code&gt;execCommand&lt;/code&gt; API のラッパーであり、MicrosoftがInternet Explorer 5.5でのWebページのライブ編集をサポートするように設計し、&lt;a href=&quot;https://blog.whatwg.org/the-road-to-html-5-contenteditable#history&quot;&gt;最終的にリバースエンジニアリング&lt;/a&gt;して他のブラウザーでコピーします。</target>
        </trans-unit>
        <trans-unit id="ab978ad55eb3ed14757f1864bfc815a255aea29c" translate="yes" xml:space="preserve">
          <source>Most applications need to keep track of state for users that interact with the application. This could be the contents of a shopping basket, or the user id of the currently logged in user. This kind of user-specific state can be stored in the session.</source>
          <target state="translated">ほとんどのアプリケーションは、アプリケーションとインタラクトするユーザーの状態を追跡する必要があります。これは、ショッピングバスケットの内容や、現在ログインしているユーザーのユーザーIDなどです。このようなユーザー固有の状態は、セッションに保存することができます。</target>
        </trans-unit>
        <trans-unit id="133d632a5c7bc56c3f2c19e3db9d200e367fc939" translate="yes" xml:space="preserve">
          <source>Most bots are really dumb. They crawl the web and put their spam into every form's field they can find. Negative CAPTCHAs take advantage of that and include a &quot;honeypot&quot; field in the form which will be hidden from the human user by CSS or JavaScript.</source>
          <target state="translated">ほとんどのボットは本当に頭が悪い。彼らはウェブをクロールして、見つけることができるすべてのフォームのフィールドにスパムを入れます。ネガティブなCAPTCHAはそれを利用して、フォームに「ハニーポット」フィールドを含み、CSSやJavaScriptによって人間のユーザーからは隠されます。</target>
        </trans-unit>
        <trans-unit id="bf0776721a91b86a474e68e52f939aa617b046e9" translate="yes" xml:space="preserve">
          <source>Most commonly, the streamed broadcast is sent straight to the subscriber on the client-side. The channel just acts as a connector between the two parties (the broadcaster and the channel subscriber). Here's an example of a channel that allows subscribers to get all new comments on a given page:</source>
          <target state="translated">最も一般的には、ストリーミングされた放送は、クライアント側の加入者に直接送られます。チャンネルは、2 つの当事者 (放送事業者とチャンネル購読者)の間のコネクタとして機能します。ここでは、購読者が指定したページの新しいコメントをすべて取得できるようにするチャンネルの例を示します。</target>
        </trans-unit>
        <trans-unit id="6bc330b7ded91a1d90bd743f5169cca15ece50bb" translate="yes" xml:space="preserve">
          <source>Most databases don't support true nested transactions. At the time of writing, the only database that supports true nested transactions that we're aware of, is MS-SQL.</source>
          <target state="translated">ほとんどのデータベースは、真の入れ子になったトランザクションをサポートしていません。この記事を書いている時点で、真の入れ子になったトランザクションをサポートしているデータベースは MS-SQL だけです。</target>
        </trans-unit>
        <trans-unit id="58ceee0a51c6eda13292b80b4053139906be4f6b" translate="yes" xml:space="preserve">
          <source>Most databases don't support true nested transactions. At the time of writing, the only database that we're aware of that supports true nested transactions, is MS-SQL. Because of this, Active Record emulates nested transactions by using savepoints on MySQL and PostgreSQL. See &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/savepoint.html&quot;&gt;dev.mysql.com/doc/refman/5.7/en/savepoint.html&lt;/a&gt; for more information about savepoints.</source>
          <target state="translated">ほとんどのデータベースは、真にネストされたトランザクションをサポートしていません。これを書いている時点では、真にネストされたトランザクションをサポートしていることがわかっているデータベースはMS-SQLだけです。このため、Active RecordはMySQLとPostgreSQLのセーブポイントを使用して、ネストされたトランザクションをエミュレートします。セーブポイントの詳細については、&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/savepoint.html&quot;&gt;dev.mysql.com / doc / refman / 5.7 / en / savepoint.html&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="523cf2e23b0af5d149ca0c1cf81d6fcdfeb6bb03" translate="yes" xml:space="preserve">
          <source>Most important of these are of course the controller, located at &lt;code&gt;app/controllers/welcome_controller.rb&lt;/code&gt; and the view, located at &lt;code&gt;app/views/welcome/index.html.erb&lt;/code&gt;.</source>
          <target state="translated">これらの中で最も重要なのは、もちろん &lt;code&gt;app/controllers/welcome_controller.rb&lt;/code&gt; にあるコントローラーと &lt;code&gt;app/views/welcome/index.html.erb&lt;/code&gt; にあるビューです。</target>
        </trans-unit>
        <trans-unit id="206cc7806b5824567f552027393f40e4e3d5b31f" translate="yes" xml:space="preserve">
          <source>Most likely your application is going to contain bugs or otherwise throw an exception that needs to be handled. For example, if the user follows a link to a resource that no longer exists in the database, Active Record will throw the &lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt; exception.</source>
          <target state="translated">ほとんどの場合、アプリケーションにはバグが含まれるか、処理する必要のある例外がスローされます。たとえば、ユーザーがデータベースに存在しなくなったリソースへのリンクをたどると、Active Recordは &lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt; 例外をスローします。</target>
        </trans-unit>
        <trans-unit id="1d53cfefc19e9e67195ba8f79217ade0838cd9b3" translate="yes" xml:space="preserve">
          <source>Most methods expect a &lt;code&gt;number&lt;/code&gt; argument, and will return it unchanged if can't be converted into a valid number.</source>
          <target state="translated">ほとんどのメソッドは &lt;code&gt;number&lt;/code&gt; 引数を期待し、有効な数値に変換できない場合は変更せずに返します。</target>
        </trans-unit>
        <trans-unit id="eccfd56b24b3d8bc52ff7d0ed06cbf4578f063b0" translate="yes" xml:space="preserve">
          <source>Most of the adapters support multiple queues. With Active Job you can schedule the job to run on a specific queue:</source>
          <target state="translated">ほとんどのアダプタは複数のキューをサポートしています。アクティブジョブを使用すると、特定のキューで実行するジョブをスケジュールすることができます。</target>
        </trans-unit>
        <trans-unit id="fee7e8c5aedcd813f43d22b5dfb2bc83dced0847" translate="yes" xml:space="preserve">
          <source>Most of the methods in the adapter are useful during migrations. Most notably, the instance methods provided by &lt;a href=&quot;schemastatements&quot;&gt;SchemaStatements&lt;/a&gt; are very useful.</source>
          <target state="translated">アダプターのほとんどのメソッドは、マイグレーション中に役立ちます。特に、&lt;a href=&quot;schemastatements&quot;&gt;SchemaStatements&lt;/a&gt;によって提供されるインスタンスメソッドは非常に便利です。</target>
        </trans-unit>
        <trans-unit id="48b34b3aab7d85bd74d4b838155569578ab804d8" translate="yes" xml:space="preserve">
          <source>Most of the queries here are happening in the controller. In order to benefit from streaming you would want to rewrite it as:</source>
          <target state="translated">ここでのクエリのほとんどはコントローラで行われています。ストリーミングの恩恵を受けるためには、以下のように書き換えたいでしょう。</target>
        </trans-unit>
        <trans-unit id="497bca5cc5e9c844d37444e5315fa4c8d45fc350" translate="yes" xml:space="preserve">
          <source>Most people don't clear out the cookies after working at a public terminal. So if the last user didn't log out of a web application, you would be able to use it as this user. Provide the user with a &lt;em&gt;log-out button&lt;/em&gt; in the web application, and &lt;em&gt;make it prominent&lt;/em&gt;.</source>
          <target state="translated">ほとんどの人は、パブリックターミナルで作業した後、Cookieを消去しません。したがって、最後のユーザーがWebアプリケーションからログアウトしなかった場合、それをこのユーザーとして使用できます。ユーザーにウェブアプリケーションの&lt;em&gt;ログアウトボタン&lt;/em&gt;を提供し、&lt;em&gt;目立つようにし&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="571b335d230721224ba2cc7dd94150881d920e90" translate="yes" xml:space="preserve">
          <source>Most template dependencies can be derived from calls to &lt;code&gt;render&lt;/code&gt; in the template itself. Here are some examples of render calls that &lt;code&gt;ActionView::Digestor&lt;/code&gt; knows how to decode:</source>
          <target state="translated">ほとんどのテンプレート依存関係は、テンプレート自体で &lt;code&gt;render&lt;/code&gt; 呼び出しから派生できます。 &lt;code&gt;ActionView::Digestor&lt;/code&gt; がデコード方法を知っているレンダーコールの例をいくつか示します。</target>
        </trans-unit>
        <trans-unit id="5e4bf900addd8f529d8a91a4897d35ae99eedb25" translate="yes" xml:space="preserve">
          <source>Most template dependencies can be derived from calls to render in the template itself. Here are some examples of render calls that Cache Digests knows how to decode:</source>
          <target state="translated">ほとんどのテンプレート依存関係は、テンプレート自体の render への呼び出しから派生します。ここでは、Cache Digests がデコード方法を知っているレンダー呼び出しの例をいくつか示します。</target>
        </trans-unit>
        <trans-unit id="b723d7488a6748257fd951690affee4ed1b12a30" translate="yes" xml:space="preserve">
          <source>Most text helpers that generate HTML output sanitize the given input by default, but do not escape it. This means HTML tags will appear in the page but all malicious code will be removed. Let's look at some examples using the &lt;code&gt;simple_format&lt;/code&gt; method:</source>
          <target state="translated">HTML出力を生成するほとんどのテキストヘルパーは、デフォルトで指定された入力をサニタイズしますが、エスケープしません。つまり、HTMLタグはページに表示されますが、悪意のあるコードはすべて削除されます。 &lt;code&gt;simple_format&lt;/code&gt; メソッドを使用したいくつかの例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="6c4acaae05139d290e7eb7c3702ecdfb4740715e" translate="yes" xml:space="preserve">
          <source>Most times you only care about the data itself. Here is a shortcut to just get the data.</source>
          <target state="translated">ほとんどの場合、データそのものにしか興味がありません。ここでは、データを手に入れるだけの近道を紹介します。</target>
        </trans-unit>
        <trans-unit id="5be95de95c3a694cdfaa9b01f941d8b4d82957f5" translate="yes" xml:space="preserve">
          <source>Mount a Rack-based application to be used within the application.</source>
          <target state="translated">アプリケーション内で使用するラックベースのアプリケーションをマウントします。</target>
        </trans-unit>
        <trans-unit id="e66103f0e1c609f714c07a70bc4e128e09dc1a34" translate="yes" xml:space="preserve">
          <source>Mount priority</source>
          <target state="translated">マウント優先度</target>
        </trans-unit>
        <trans-unit id="65e4ece6255d32204ed3ced596b87d73f3245e49" translate="yes" xml:space="preserve">
          <source>Mounting the Engine</source>
          <target state="translated">エンジンの取り付け</target>
        </trans-unit>
        <trans-unit id="68e27a2147826a19a93ca554aefc33b75b0f0e77" translate="yes" xml:space="preserve">
          <source>Move to the latest patch version after your current version.</source>
          <target state="translated">現在のバージョンの後、最新のパッチバージョンに移動します。</target>
        </trans-unit>
        <trans-unit id="69755f4dfaa3969fcb5b25c274c95fbd2193790b" translate="yes" xml:space="preserve">
          <source>Move to the latest patch version of the next minor version.</source>
          <target state="translated">次期マイナー版の最新パッチ版に移行します。</target>
        </trans-unit>
        <trans-unit id="4f2a29dbde4926cfbfe6b23506f21556494d10f9" translate="yes" xml:space="preserve">
          <source>Much like &lt;code&gt;form_with&lt;/code&gt; a &lt;a href=&quot;formbuilder&quot;&gt;FormBuilder&lt;/a&gt; instance associated with the scope or model is yielded, so any generated field names are prefixed with either the passed scope or the scope inferred from the &lt;code&gt;:model&lt;/code&gt;.</source>
          <target state="translated">同じよう &lt;code&gt;form_with&lt;/code&gt; &lt;a href=&quot;formbuilder&quot;&gt;FormBuilderの&lt;/a&gt;任意発生フィールド名が合格範囲またはから推測範囲のいずれかで始まりますので、範囲またはモデルに関連付けられたインスタンスは、得られている &lt;code&gt;:model&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4c669cfe6f565d5e96b459b6a859e113771af92a" translate="yes" xml:space="preserve">
          <source>Much of Action Controller's functionality is implemented as Middlewares. The following list explains the purpose of each of them:</source>
          <target state="translated">アクションコントローラの機能の多くは、ミドルウェアとして実装されています。以下のリストでは、それぞれの目的を説明しています。</target>
        </trans-unit>
        <trans-unit id="fdad3ac6d447afe1cd48c10de24f4c825fd91666" translate="yes" xml:space="preserve">
          <source>MultiJSON has reached its &lt;a href=&quot;https://github.com/rails/rails/pull/10576&quot;&gt;end-of-life&lt;/a&gt; and has been removed from Rails.</source>
          <target state="translated">MultiJSONはサポート&lt;a href=&quot;https://github.com/rails/rails/pull/10576&quot;&gt;終了に&lt;/a&gt;なり、Railsから削除されました。</target>
        </trans-unit>
        <trans-unit id="577e584a04dfea954500058f69395d5b90b186e3" translate="yes" xml:space="preserve">
          <source>Multibyte</source>
          <target state="translated">Multibyte</target>
        </trans-unit>
        <trans-unit id="44b3146bc43b4204d4d02b6c17400bdc44be353f" translate="yes" xml:space="preserve">
          <source>Multibyte proxy</source>
          <target state="translated">マルチバイトプロキシ</target>
        </trans-unit>
        <trans-unit id="dbfe775843033ba1d1d04a0b95553ec396faea3b" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars</source>
          <target state="translated">Multibyte::Chars</target>
        </trans-unit>
        <trans-unit id="a77c779095fcad786d63d02ed4f10da364a918f8" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#compose</source>
          <target state="translated">Multibyte::Chars#compose</target>
        </trans-unit>
        <trans-unit id="3a71236f57c99aa27508902711cb5b914367a5af" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#decompose</source>
          <target state="translated">Multibyte::Chars#decompose</target>
        </trans-unit>
        <trans-unit id="c3aed8a0bd7f2e27cc61c4584bdef95c2754574b" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#grapheme_length</source>
          <target state="translated">Multibyte::Chars#grapheme_length</target>
        </trans-unit>
        <trans-unit id="2cb346ad51d1b8e1ab5d6fdd3b0e315e78fe54d3" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#limit</source>
          <target state="translated">Multibyte::Chars#limit</target>
        </trans-unit>
        <trans-unit id="edb500693690502b4ce906e2d6de066647b583de" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#method_missing</source>
          <target state="translated">Multibyte::Chars#method_missing</target>
        </trans-unit>
        <trans-unit id="c9aff960c5a6365bbe220c67d92ca35bf231b25f" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#normalize</source>
          <target state="translated">Multibyte::Chars#normalize</target>
        </trans-unit>
        <trans-unit id="61fd0c3d0704b5be2b2ddc64f01f05d3cdfae11e" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#respond_to_missing?</source>
          <target state="translated">Multibyte::Chars#respond_to_missing?</target>
        </trans-unit>
        <trans-unit id="fcac9f6b46e0d66cd3b2e48b54cb4838d98b1d70" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#reverse</source>
          <target state="translated">Multibyte::Chars#reverse</target>
        </trans-unit>
        <trans-unit id="29c57575d0fe497cfc6df410d77261ee859bff5c" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#slice!</source>
          <target state="translated">Multibyte::Chars#slice!</target>
        </trans-unit>
        <trans-unit id="60924aa309b322723072e8b5d1d25f3bfc84f185" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#split</source>
          <target state="translated">Multibyte::Chars#split</target>
        </trans-unit>
        <trans-unit id="c54415b49d5dd255e971711f05c0921ca91f9567" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#tidy_bytes</source>
          <target state="translated">Multibyte::Chars#tidy_bytes</target>
        </trans-unit>
        <trans-unit id="5696a1b68036edfea1149f28955c5171aaa066dd" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#titlecase</source>
          <target state="translated">Multibyte::Chars#titlecase</target>
        </trans-unit>
        <trans-unit id="29562d818637c005447d41a14c53e35ca819d736" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#titleize</source>
          <target state="translated">Multibyte::Chars#titleize</target>
        </trans-unit>
        <trans-unit id="3c0ba0b40fbfb06c8ff8eb5ac6b1a814a13abe65" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#to_s</source>
          <target state="translated">Multibyte::Chars#to_s</target>
        </trans-unit>
        <trans-unit id="4e507c3e7ade2459ad387acbc199ef65753f44e1" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#to_str</source>
          <target state="translated">Multibyte::Chars#to_str</target>
        </trans-unit>
        <trans-unit id="e0852a435607775956151f2d12a44d374e367131" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#wrapped_string</source>
          <target state="translated">Multibyte::Chars#wrapped_string</target>
        </trans-unit>
        <trans-unit id="f1b49e7f7cacefac11c721baed55601e72598ac0" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars::consumes?</source>
          <target state="translated">Multibyte::Chars::consumes?</target>
        </trans-unit>
        <trans-unit id="25b5a149fcfab95d5e9ac1f6c3bc6b238d1a76b6" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars::new</source>
          <target state="translated">Multibyte::Chars::new</target>
        </trans-unit>
        <trans-unit id="dd207e116a1881d14e8755e2dd8afad68ca66404" translate="yes" xml:space="preserve">
          <source>Multibyte::Unicode</source>
          <target state="translated">Multibyte::Unicode</target>
        </trans-unit>
        <trans-unit id="99e5ba7441254093fd472ba8b48bd5cf04210a9c" translate="yes" xml:space="preserve">
          <source>Multibyte::Unicode#compose</source>
          <target state="translated">Multibyte::Unicode#compose</target>
        </trans-unit>
        <trans-unit id="6a9bf80aa3e8755c3b8785c2e82d94106dafbbea" translate="yes" xml:space="preserve">
          <source>Multibyte::Unicode#decompose</source>
          <target state="translated">Multibyte::Unicode#decompose</target>
        </trans-unit>
        <trans-unit id="3ab6d7fd74955bfcdd88d1183d496821920971c7" translate="yes" xml:space="preserve">
          <source>Multibyte::Unicode#default_normalization_form</source>
          <target state="translated">Multibyte::Unicode#default_normalization_form</target>
        </trans-unit>
        <trans-unit id="2f590db3a14c669921995363de50c9aa7b62f029" translate="yes" xml:space="preserve">
          <source>Multibyte::Unicode#normalize</source>
          <target state="translated">Multibyte::Unicode#normalize</target>
        </trans-unit>
        <trans-unit id="497c9088f01c7ac11114f3ce775aac42f7b50b8c" translate="yes" xml:space="preserve">
          <source>Multibyte::Unicode#pack_graphemes</source>
          <target state="translated">Multibyte::Unicode#pack_graphemes</target>
        </trans-unit>
        <trans-unit id="93ea9b938b0c09536d97df26cee8e9d7797e904e" translate="yes" xml:space="preserve">
          <source>Multibyte::Unicode#tidy_bytes</source>
          <target state="translated">Multibyte::Unicode#tidy_bytes</target>
        </trans-unit>
        <trans-unit id="f24dbeb8438b74efbec9b1765decb2e0a554ecd2" translate="yes" xml:space="preserve">
          <source>Multibyte::Unicode#unpack_graphemes</source>
          <target state="translated">Multibyte::Unicode#unpack_graphemes</target>
        </trans-unit>
        <trans-unit id="8478db7c1329df5939eeb843202273bc3ca6f4fd" translate="yes" xml:space="preserve">
          <source>Multibyte::proxy_class</source>
          <target state="translated">Multibyte::proxy_class</target>
        </trans-unit>
        <trans-unit id="5b6a01d724fec572618c3d6bbaca05853b8359ee" translate="yes" xml:space="preserve">
          <source>Multibyte::proxy_class=</source>
          <target state="translated">Multibyte::proxy_class=</target>
        </trans-unit>
        <trans-unit id="1c0b905d64b0517973b54b47221309dc3ae10f49" translate="yes" xml:space="preserve">
          <source>Multipart Emails</source>
          <target state="translated">マルチパートメール</target>
        </trans-unit>
        <trans-unit id="bb49c6706b5ec72ba15cb3e74cd18b230c613911" translate="yes" xml:space="preserve">
          <source>Multipart messages can also be used implicitly because Action Mailer will automatically detect and use multipart templates, where each template is named after the name of the action, followed by the content type. Each such detected template will be added to the message, as a separate part.</source>
          <target state="translated">Action Mailer は自動的にマルチパートテンプレートを検出して使用するため、マルチパートメッセージを暗黙のうちに使用することもできます。このように検出されたテンプレートは、それぞれ別の部分としてメッセージに追加されます。</target>
        </trans-unit>
        <trans-unit id="5afb1cbb87b4c678f1749be244babe3f86a208c0" translate="yes" xml:space="preserve">
          <source>Multiple Applications</source>
          <target state="translated">複数のアプリケーション</target>
        </trans-unit>
        <trans-unit id="be88eb95f46dc97a706ddd49f5cd1af0da18459d" translate="yes" xml:space="preserve">
          <source>Multiple Conditions for Callbacks</source>
          <target state="translated">コールバックの複数の条件</target>
        </trans-unit>
        <trans-unit id="08c54482647fa51932f62b990e2f89b4da939bdd" translate="yes" xml:space="preserve">
          <source>Multiple Databases with Active Record</source>
          <target state="translated">アクティブレコードを持つ複数のデータベース</target>
        </trans-unit>
        <trans-unit id="2f1749c5f39d08135c935affc6ac69182f5bb4c0" translate="yes" xml:space="preserve">
          <source>Multiple delegates to the same target are allowed:</source>
          <target state="translated">同一ターゲットへの複数のデリゲートが許可されています。</target>
        </trans-unit>
        <trans-unit id="38f3de59be21ca6540293770d2cd9c3d3037f833" translate="yes" xml:space="preserve">
          <source>Multiple joins:</source>
          <target state="translated">複数の添付ファイル。</target>
        </trans-unit>
        <trans-unit id="20aff80eb14d75fd5040fa242c1b2eceb165bbca" translate="yes" xml:space="preserve">
          <source>Multiple primary databases and a replica for each</source>
          <target state="translated">複数のプライマリデータベースと各プライマリデータベースのレプリカ</target>
        </trans-unit>
        <trans-unit id="951e59425d6c39d5b290427731b5200017ee438a" translate="yes" xml:space="preserve">
          <source>Multiplies this &lt;a href=&quot;duration&quot;&gt;Duration&lt;/a&gt; by a &lt;a href=&quot;../numeric&quot;&gt;Numeric&lt;/a&gt; and returns a new &lt;a href=&quot;duration&quot;&gt;Duration&lt;/a&gt;.</source>
          <target state="translated">乗算この&lt;a href=&quot;duration&quot;&gt;期間&lt;/a&gt;によって&lt;a href=&quot;../numeric&quot;&gt;数値&lt;/a&gt;を返す新しい&lt;a href=&quot;duration&quot;&gt;所要時間&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="05ad5edf0857ae96f7e8e591fea83fc0be2cbb1d" translate="yes" xml:space="preserve">
          <source>Mutator methods called on Relation</source>
          <target state="translated">リレーションで呼び出されるミューテータメソッド</target>
        </trans-unit>
        <trans-unit id="04f6be056c62007ce171d677af3018f64ae6643c" translate="yes" xml:space="preserve">
          <source>MySQL doesn't support DDL transactions. If you perform a DDL operation, then any created savepoints will be automatically released. For example, if you've created a savepoint, then you execute a CREATE TABLE statement, then the savepoint that was created will be automatically released.</source>
          <target state="translated">MySQLはDDLトランザクションをサポートしていません。DDL オペレーションを実行すると、作成されたセーブポイントは自動的に解放されます。例えば、セーブポイントを作成した後にCREATE TABLE文を実行すると、作成されたセーブポイントは自動的に解放されます。</target>
        </trans-unit>
        <trans-unit id="27c321d50bbcd9b5772400c058a31390e2decc62" translate="yes" xml:space="preserve">
          <source>MySQL: &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/explain-output.html&quot;&gt;EXPLAIN Output Format&lt;/a&gt;</source>
          <target state="translated">MySQL：&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/explain-output.html&quot;&gt;EXPLAIN出力フォーマット&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="09679f1a4e7693179ccf0966910ba55b4da55040" translate="yes" xml:space="preserve">
          <source>MySQL: &lt;code&gt;:precision&lt;/code&gt; [1..63], &lt;code&gt;:scale&lt;/code&gt; [0..30]. Default is (10,0).</source>
          <target state="translated">MySQL：： &lt;code&gt;:precision&lt;/code&gt; [1..63] 、 &lt;code&gt;:scale&lt;/code&gt; [0..30]。デフォルトは（10,0）です。</target>
        </trans-unit>
        <trans-unit id="9f6ce4a25a9c51664b4dcdfc725f8eefd86a4c19" translate="yes" xml:space="preserve">
          <source>MySpace blocked many tags, but allowed CSS. So the worm's author put JavaScript into CSS like this:</source>
          <target state="translated">MySpaceは多くのタグをブロックしていたが、CSSは許可していた。そこでワームの作者は、このようにCSSにJavaScriptを入れた。</target>
        </trans-unit>
        <trans-unit id="06ec39473e78b6ba391da473c04b8788442c949f" translate="yes" xml:space="preserve">
          <source>N/A: The adapter does not run in a separate process, and therefore doesn't support retries.</source>
          <target state="translated">N/A:アダプタは別のプロセスで実行されないため、再試行はサポートされません。</target>
        </trans-unit>
        <trans-unit id="9089a789f0069c4bce0cc6730a22c574fd4aa9e0" translate="yes" xml:space="preserve">
          <source>N/A: The adapter does not support queuing, and therefore sorting them.</source>
          <target state="translated">N/A:アダプタはキューイングをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="a0fcee9ccee4f7f243b5a494a4b2459fafb9c16a" translate="yes" xml:space="preserve">
          <source>N/A: The adapter does not support queuing.</source>
          <target state="translated">N/A:アダプタはキューイングをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="90355c194c9abb6ca5245c0286a948195ec867f6" translate="yes" xml:space="preserve">
          <source>N/A: This adapter does not run in a separate process, and therefore timeout is unsupported.</source>
          <target state="translated">N/A:このアダプタは別のプロセスで実行されないため、タイムアウトはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="e0aabc7fc6e90c4c16eb42d4f9847ec6f8b51711" translate="yes" xml:space="preserve">
          <source>NAME_COMPILABLE_REGEXP</source>
          <target state="translated">NAME_COMPILABLE_REGEXP</target>
        </trans-unit>
        <trans-unit id="364b0ae6cebce8b9b4faf58d96a008e3e0acd1b0" translate="yes" xml:space="preserve">
          <source>NATIVE_DATABASE_TYPES</source>
          <target state="translated">NATIVE_DATABASE_TYPES</target>
        </trans-unit>
        <trans-unit id="34b8b86577c6bd56c6ad5b564be28cd2f908903d" translate="yes" xml:space="preserve">
          <source>NB: The output may still contain unescaped '&amp;lt;', '&amp;gt;', '&amp;amp;' characters and confuse browsers.</source>
          <target state="translated">注意：出力には、エスケープされていない「&amp;lt;」、「&amp;gt;」、「＆」の文字が含まれている場合があり、ブラウザを混乱させる可能性があります。</target>
        </trans-unit>
        <trans-unit id="66aabd91fc41cc4635aad94dc77d93a0e2eac67b" translate="yes" xml:space="preserve">
          <source>NEW</source>
          <target state="translated">NEW</target>
        </trans-unit>
        <trans-unit id="dadac5bcf4c6b4db403b0dcea4d07dd23acca6ba" translate="yes" xml:space="preserve">
          <source>NORMALIZATION_FORMS</source>
          <target state="translated">NORMALIZATION_FORMS</target>
        </trans-unit>
        <trans-unit id="5050fdd648c2c3c100230e8520feff151e76b22f" translate="yes" xml:space="preserve">
          <source>NOT Conditions</source>
          <target state="translated">NOT条件</target>
        </trans-unit>
        <trans-unit id="6f4c044303492a84dc9ba161a054727b65adabe0" translate="yes" xml:space="preserve">
          <source>NOTE! Unless told otherwise, Rails expects an action to render a template with the same name, contained in a folder named after its controller. If this controller is an API responding with 204 (No Content), which does not require a template, then this error will occur when trying to access it via browser, since we expect an HTML template to be rendered for such requests. If that's the case, carry on.</source>
          <target state="translated">注意!別段の指示がない限り、Railsはアクションがコントローラの名前にちなんだフォルダに含まれる同じ名前のテンプレートをレンダリングすることを期待しています。このコントローラがテンプレートを必要としない204 (No Content)で応答するAPIである場合、このようなリクエストに対してHTMLテンプレートがレンダリングされることを期待しているため、ブラウザ経由でアクセスしようとするとこのエラーが発生します。もしそうであれば、続けてください。</target>
        </trans-unit>
        <trans-unit id="53c9b907d5e9772f96c352467530121723a24dcc" translate="yes" xml:space="preserve">
          <source>NOTE: &lt;a href=&quot;test&quot;&gt;Test&lt;/a&gt; adapter extends the &lt;code&gt;ActionCable::SubscriptionsAdapter::Async&lt;/code&gt; adapter, so it could be used in system tests too.</source>
          <target state="translated">注：&lt;a href=&quot;test&quot;&gt;テスト&lt;/a&gt;アダプターは &lt;code&gt;ActionCable::SubscriptionsAdapter::Async&lt;/code&gt; アダプターを拡張するため、システムテストでも使用できます。</target>
        </trans-unit>
        <trans-unit id="82b300c91ff4f01a70796137110481c8c73e629a" translate="yes" xml:space="preserve">
          <source>NOTE: &lt;code&gt;method_name&lt;/code&gt; passed to &lt;a href=&quot;callbacks#method-i-define_model_callbacks&quot;&gt;#define_model_callbacks&lt;/a&gt; must not end with &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt; or &lt;code&gt;=&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;method_name&lt;/code&gt; 渡される&lt;a href=&quot;callbacks#method-i-define_model_callbacks&quot;&gt;method_name&lt;/a&gt;は &lt;code&gt;!&lt;/code&gt; で終わってはなりません。、 &lt;code&gt;?&lt;/code&gt; または &lt;code&gt;=&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="db0ce667a0ad77170e45745c759f9a92c263c9f7" translate="yes" xml:space="preserve">
          <source>NOTE: By its nature, batch processing is subject to race conditions if other processes are modifying the database.</source>
          <target state="translated">注:バッチ処理は、その性質上、他のプロセスがデータベースを変更している場合、競合条件の対象となります。</target>
        </trans-unit>
        <trans-unit id="77b33c7bf4dc36bae9675fcf16d7f5676777c7ff" translate="yes" xml:space="preserve">
          <source>NOTE: Calling &lt;code&gt;validate&lt;/code&gt; multiple times on the same method will overwrite previous definitions.</source>
          <target state="translated">注：同じメソッドで &lt;code&gt;validate&lt;/code&gt; を複数回呼び出すと、以前の定義が上書きされます。</target>
        </trans-unit>
        <trans-unit id="c1244e2875a89e59d59e46c3fbb7b9c9041b6c73" translate="yes" xml:space="preserve">
          <source>NOTE: Calling the same callback multiple times will overwrite previous callback definitions.</source>
          <target state="translated">注意:同じコールバックを複数回呼び出すと、以前のコールバック定義が上書きされます。</target>
        </trans-unit>
        <trans-unit id="459a5611b4fb3651cbcf5fb40048074d44f62f2e" translate="yes" xml:space="preserve">
          <source>NOTE: Discarded selects will default to 1. So if no month select is available, January will be assumed.</source>
          <target state="translated">注:破棄されたセレクトはデフォルトで1になりますので、月のセレクトがない場合は1月を想定しています。</target>
        </trans-unit>
        <trans-unit id="35bb5d930d5344ab9c4661a4a291c03f392618bf" translate="yes" xml:space="preserve">
          <source>NOTE: Each nesting level will merge inherited defaults in addition to their own.</source>
          <target state="translated">注:各入れ子レベルでは、独自のデフォルトに加えて、継承されたデフォルトもマージされます。</target>
        </trans-unit>
        <trans-unit id="e780dd9cbb0eaceca23a69ca7ca982d3efb3e44a" translate="yes" xml:space="preserve">
          <source>NOTE: If you are going to iterate through each record, you should call each_record on the yielded BatchEnumerator:</source>
          <target state="translated">注意:各レコードを繰り返し処理する場合は、生成された BatchEnumerator で each_record を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="9110f77a80c94aa7c9d01ac9563f7305028fc714" translate="yes" xml:space="preserve">
          <source>NOTE: If you are using structured database data types (eg. PostgreSQL &lt;code&gt;hstore&lt;/code&gt;/&lt;code&gt;json&lt;/code&gt;, or MySQL 5.7+ &lt;code&gt;json&lt;/code&gt;) there is no need for the serialization provided by .store. Simply use .store_accessor instead to generate the accessor methods. Be aware that these columns use a string keyed hash and do not allow access using a symbol.</source>
          <target state="translated">注：構造化データベースデータタイプ（PostgreSQL &lt;code&gt;hstore&lt;/code&gt; / &lt;code&gt;json&lt;/code&gt; 、またはMySQL 5.7+ &lt;code&gt;json&lt;/code&gt; など）を使用している場合、.storeによるシリアル化は必要ありません。代わりに.store_accessorを使用して、アクセサーメソッドを生成します。これらの列は文字列キー付きハッシュを使用し、記号を使用したアクセスを許可しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="d5aa3f2e463dee8d6a93b822667caffdd28ed89f" translate="yes" xml:space="preserve">
          <source>NOTE: It's not possible to set the order. That is automatically set to ascending on the primary key (&amp;ldquo;id ASC&amp;rdquo;) to make the batch ordering consistent. Therefore the primary key must be orderable, e.g. an integer or a string.</source>
          <target state="translated">注：順序を設定することはできません。これは、バッチの順序に一貫性を持たせるために、主キー（「id ASC」）で昇順に自動的に設定されます。したがって、主キーは順序付け可能である必要があります（整数または文字列など）。</target>
        </trans-unit>
        <trans-unit id="dde7531f52bc0c757ff3d34c5fe675032ed0dc59" translate="yes" xml:space="preserve">
          <source>NOTE: It's not possible to set the order. That is automatically set to ascending on the primary key (&amp;ldquo;id ASC&amp;rdquo;) to make the batch ordering work. This also means that this method only works when the primary key is orderable (e.g. an integer or string).</source>
          <target state="translated">注：順序を設定することはできません。これは、バッチ注文を機能させるために、主キー（「id ASC」）で昇順に自動的に設定されます。これは、このメソッドが機能するのは、主キーが順序付け可能な場合（整数または文字列など）だけであることも意味します。</target>
        </trans-unit>
        <trans-unit id="29f14cc49202f0a1b0bb8a6f8ce37815657aef23" translate="yes" xml:space="preserve">
          <source>NOTE: Must be subscribed.</source>
          <target state="translated">注:購読している必要があります。</target>
        </trans-unit>
        <trans-unit id="6dc6141be1468034c8070346d640d8a829f5f57d" translate="yes" xml:space="preserve">
          <source>NOTE: Only the option tags are returned, you have to wrap this call in a regular HTML select tag.</source>
          <target state="translated">注意:オプションタグのみが返されるので、この呼び出しを通常のHTML selectタグでラップする必要があります。</target>
        </trans-unit>
        <trans-unit id="6943a719f65fb990d18007df480f8c42cd9b18c1" translate="yes" xml:space="preserve">
          <source>NOTE: Other URL helpers can be called in the block but be careful not to invoke your custom URL helper again otherwise it will result in a stack overflow error.</source>
          <target state="translated">注意:他の URL ヘルパーはブロック内で呼び出すことができますが、カスタム URL ヘルパーを再度呼び出さないように注意してください。</target>
        </trans-unit>
        <trans-unit id="b156bf73ae0bbaecb78b98c9bfa46bc9edd1b4e2" translate="yes" xml:space="preserve">
          <source>NOTE: Ruby 2.4 and later support native Unicode case mappings:</source>
          <target state="translated">注:Ruby 2.4 以降では、ネイティブの Unicode 大文字小文字のマッピングをサポートしています。</target>
        </trans-unit>
        <trans-unit id="d739e914d4cbb746ba24e8856710882ef4ceb321" translate="yes" xml:space="preserve">
          <source>NOTE: The :local timezone is Ruby's &lt;strong&gt;process&lt;/strong&gt; timezone, i.e. ENV.</source>
          <target state="translated">注：：localタイムゾーンは、Rubyの&lt;strong&gt;プロセス&lt;/strong&gt;タイムゾーン、つまりENVです。</target>
        </trans-unit>
        <trans-unit id="70a7e32800af02b9f8831a9f78781ff3e3c0fa4e" translate="yes" xml:space="preserve">
          <source>NOTE: The &lt;code&gt;direct&lt;/code&gt; method can't be used inside of a scope block such as &lt;code&gt;namespace&lt;/code&gt; or &lt;code&gt;scope&lt;/code&gt; and will raise an error if it detects that it is.</source>
          <target state="translated">注： &lt;code&gt;direct&lt;/code&gt; メソッドは、 &lt;code&gt;namespace&lt;/code&gt; や &lt;code&gt;scope&lt;/code&gt; などのスコープブロック内では使用できません。そうであることが検出されると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="84504c0e05d0a3bcbefa67ca6b2d127e74bce741" translate="yes" xml:space="preserve">
          <source>NOTE: The &lt;code&gt;resolve&lt;/code&gt; method can't be used inside of a scope block such as &lt;code&gt;namespace&lt;/code&gt; or &lt;code&gt;scope&lt;/code&gt; and will raise an error if it detects that it is.</source>
          <target state="translated">注： &lt;code&gt;resolve&lt;/code&gt; メソッドは、 &lt;code&gt;namespace&lt;/code&gt; や &lt;code&gt;scope&lt;/code&gt; などのスコープブロック内では使用できません。そうであることが検出されると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="2e424a8b8f539c8c51767bfb36b1996ecd86b6d7" translate="yes" xml:space="preserve">
          <source>NOTE: The HTML options &lt;code&gt;disabled&lt;/code&gt;, &lt;code&gt;readonly&lt;/code&gt;, and &lt;code&gt;multiple&lt;/code&gt; can all be treated as booleans. So specifying &lt;code&gt;disabled: true&lt;/code&gt; will give &lt;code&gt;disabled=&quot;disabled&quot;&lt;/code&gt;.</source>
          <target state="translated">注：HTMLオプションの &lt;code&gt;disabled&lt;/code&gt; 、 &lt;code&gt;readonly&lt;/code&gt; 、および &lt;code&gt;multiple&lt;/code&gt; はすべてブール値として扱うことができます。したがって、 &lt;code&gt;disabled: true&lt;/code&gt; を指定すると、 &lt;code&gt;disabled=&quot;disabled&quot;&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="4273e9c86cc14cbdf878c0d79b4f8635103aeab2" translate="yes" xml:space="preserve">
          <source>NOTE: The default validations with the exception of &lt;code&gt;uniqueness&lt;/code&gt; will work. For example, if you want to check for &lt;code&gt;uniqueness&lt;/code&gt; with &lt;code&gt;hstore&lt;/code&gt; you will need to use a custom validation to handle it.</source>
          <target state="translated">注： &lt;code&gt;uniqueness&lt;/code&gt; を除くデフォルトの検証が機能します。たとえば、あなたがチェックしたい場合は &lt;code&gt;uniqueness&lt;/code&gt; で &lt;code&gt;hstore&lt;/code&gt; のあなたがそれを処理するためにカスタム検証を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="ec2abfcf21d7eecb069b20fd390f5d0cd5e855b1" translate="yes" xml:space="preserve">
          <source>NOTE: The formatting and content of this middleware's output is intended for human consumption, and should be expected to change between releases.</source>
          <target state="translated">注:このミドルウェアの出力のフォーマットと内容は、人間が消費することを目的としており、リリースの間に変更されることが予想されます。</target>
        </trans-unit>
        <trans-unit id="ba561ebdca75e4e27ed2d7158136f74d0787b8fb" translate="yes" xml:space="preserve">
          <source>NOTE: The returned records are in the same order as the ids you provide. If you want the results to be sorted by database, you can use &lt;a href=&quot;querymethods#method-i-where&quot;&gt;ActiveRecord::QueryMethods#where&lt;/a&gt; method and provide an explicit &lt;a href=&quot;querymethods#method-i-order&quot;&gt;ActiveRecord::QueryMethods#order&lt;/a&gt; option. But &lt;a href=&quot;querymethods#method-i-where&quot;&gt;ActiveRecord::QueryMethods#where&lt;/a&gt; method doesn't raise &lt;a href=&quot;recordnotfound&quot;&gt;ActiveRecord::RecordNotFound&lt;/a&gt;.</source>
          <target state="translated">注：返されるレコードは、指定したIDと同じ順序です。結果をデータベースでソートする場合は、&lt;a href=&quot;querymethods#method-i-where&quot;&gt;ActiveRecord :: QueryMethods＃where&lt;/a&gt;メソッドを使用して、明示的な&lt;a href=&quot;querymethods#method-i-order&quot;&gt;ActiveRecord :: QueryMethods＃order&lt;/a&gt;オプションを指定できます。しかし、&lt;a href=&quot;querymethods#method-i-where&quot;&gt;ActiveRecord :: QueryMethods＃where&lt;/a&gt;メソッドは&lt;a href=&quot;recordnotfound&quot;&gt;ActiveRecord :: RecordNotFoundを発生さ&lt;/a&gt;せません。</target>
        </trans-unit>
        <trans-unit id="d051f3032ec6e426d27e0a95cae128b377cb5dff" translate="yes" xml:space="preserve">
          <source>NOTE: There is no &lt;code&gt;key_will_change!&lt;/code&gt; method for accessors, use &lt;code&gt;store_will_change!&lt;/code&gt; instead.</source>
          <target state="translated">注： &lt;code&gt;key_will_change!&lt;/code&gt; はありません！アクセサーのメソッドは、 &lt;code&gt;store_will_change!&lt;/code&gt; 代わりに。</target>
        </trans-unit>
        <trans-unit id="762c4a804d75ee92e1459fdc1f1254495115d31d" translate="yes" xml:space="preserve">
          <source>NOTE: This approach has been deprecated for end-user code in favor of &lt;a href=&quot;../module#method-i-thread_mattr_accessor&quot;&gt;thread_mattr_accessor&lt;/a&gt; and friends. Please use that approach instead.</source>
          <target state="translated">注：このアプローチは、&lt;a href=&quot;../module#method-i-thread_mattr_accessor&quot;&gt;thread_mattr_accessor&lt;/a&gt;などを優先して、エンドユーザーコードでは推奨されていません。代わりにそのアプローチを使用してください。</target>
        </trans-unit>
        <trans-unit id="d0de1ac13c80a92b6f77a642c82b1dcfb7e1d9e9" translate="yes" xml:space="preserve">
          <source>NOTE: This check is performed only if &lt;code&gt;password_confirmation&lt;/code&gt; is not &lt;code&gt;nil&lt;/code&gt;. To require confirmation, make sure to add a presence check for the confirmation attribute:</source>
          <target state="translated">注：このチェックは、 &lt;code&gt;password_confirmation&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; でない場合にのみ実行されます。確認を要求するには、確認属性の存在確認を必ず追加してください。</target>
        </trans-unit>
        <trans-unit id="84dd77619c472769d8bdcac15ddd778d56672d39" translate="yes" xml:space="preserve">
          <source>NOTE: This custom behavior only applies to simple polymorphic URLs where a single model instance is passed and not more complicated forms, e.g:</source>
          <target state="translated">NOTE:このカスタム動作は、単一のモデルインスタンスが渡される単純なポリモーフィックURLにのみ適用され、より複雑な形式(例えば、以下のような形式)には適用されません。</target>
        </trans-unit>
        <trans-unit id="951ec43c360ce92554228518ef500aed9eae55c6" translate="yes" xml:space="preserve">
          <source>NOTE: This validation will not fail if the association hasn't been assigned. If you want to ensure that the association is both present and guaranteed to be valid, you also need to use &lt;a href=&quot;classmethods#method-i-validates_presence_of&quot;&gt;validates_presence_of&lt;/a&gt;.</source>
          <target state="translated">注：この検証は、関連付けが割り当てられていない場合でも失敗しません。関連付けが存在し、有効であることを保証したい場合は、&lt;a href=&quot;classmethods#method-i-validates_presence_of&quot;&gt;validates_presence_of&lt;/a&gt;も使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e4e81557c5494f5f1a9d85acc000f2a8822047be" translate="yes" xml:space="preserve">
          <source>NOTE: This validation will not fail while using it with an association if the latter was assigned but not valid. If you want to ensure that it is both present and valid, you also need to use &lt;a href=&quot;classmethods#method-i-validates_associated&quot;&gt;validates_associated&lt;/a&gt;.</source>
          <target state="translated">注：アソシエーションが割り当てられているが有効ではない場合、アソシエーションで使用してもこの検証は失敗しません。これが存在していて有効であることを確認したい場合は、&lt;a href=&quot;classmethods#method-i-validates_associated&quot;&gt;validates_associated&lt;/a&gt;も使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="d5f9e20a8fba6546eac5061bae525520123d4e92" translate="yes" xml:space="preserve">
          <source>NOTE: This won't affect any &lt;code&gt;ActiveSupport::TimeWithZone&lt;/code&gt; objects that have already been created, e.g. any model timestamp attributes that have been read before the block will remain in the application's default timezone.</source>
          <target state="translated">注：これは、すでに作成されている &lt;code&gt;ActiveSupport::TimeWithZone&lt;/code&gt; オブジェクトには影響しません。たとえば、ブロックがアプリケーションのデフォルトのタイムゾーンにとどまる前に読み取られたモデルのタイムスタンプ属性は影響を受けません。</target>
        </trans-unit>
        <trans-unit id="01485856ed54cb882a5920d009b94f662f247905" translate="yes" xml:space="preserve">
          <source>NOTE: You cannot call class methods implicitly inside of with_options. You can access these methods using the class name instead:</source>
          <target state="translated">注意:with_options の内部では、クラスのメソッドを暗黙的に呼び出すことはできません。これらのメソッドにアクセスするには、代わりにクラス名を使用します。</target>
        </trans-unit>
        <trans-unit id="001af184a34c3b7f841644c2049b13fde9247dcf" translate="yes" xml:space="preserve">
          <source>NOTE: queue_classic supports job scheduling since version 3.1. For older versions you can use the queue_classic-later gem.</source>
          <target state="translated">NOTE:queue_classic はバージョン 3.1 以降のジョブスケジューリングをサポートしています。それ以前のバージョンでは、 queue_classic-later gem を使うことができます。</target>
        </trans-unit>
        <trans-unit id="fa2e3aa9db1f23e790f7456ee1a1e5d29681ed24" translate="yes" xml:space="preserve">
          <source>NOT_NULL_VIOLATION</source>
          <target state="translated">NOT_NULL_VIOLATION</target>
        </trans-unit>
        <trans-unit id="d2a96aa7908b40b3466fee80b9d1ee30c01975eb" translate="yes" xml:space="preserve">
          <source>NO_CACHE</source>
          <target state="translated">NO_CACHE</target>
        </trans-unit>
        <trans-unit id="00b1f4e9b252474c44034ab40ad8a0aa89bcea94" translate="yes" xml:space="preserve">
          <source>NO_CONTENT_CODES</source>
          <target state="translated">NO_CONTENT_CODES</target>
        </trans-unit>
        <trans-unit id="d21e27fa2aab628c195a197ed9f03845aeb79542" translate="yes" xml:space="preserve">
          <source>NULL_ORIGIN_MESSAGE</source>
          <target state="translated">NULL_ORIGIN_MESSAGE</target>
        </trans-unit>
        <trans-unit id="99a01813d236bc88b0d2843edbc671a623558b8d" translate="yes" xml:space="preserve">
          <source>NUMERIC_VALUE_OUT_OF_RANGE</source>
          <target state="translated">NUMERIC_VALUE_OUT_OF_RANGE</target>
        </trans-unit>
        <trans-unit id="70baa5f2e3ea149d3efba73d8ae1136c8b2465d4" translate="yes" xml:space="preserve">
          <source>Name of gem where method is deprecated</source>
          <target state="translated">メソッドが非推奨とされているgemの名前</target>
        </trans-unit>
        <trans-unit id="32e659ad4b09e8447ec3181bf0a4d92b88b4c1c6" translate="yes" xml:space="preserve">
          <source>Name of the channel class</source>
          <target state="translated">チャンネルクラスの名前</target>
        </trans-unit>
        <trans-unit id="71a2fbae76fe99fa8a275b3c0d7d46236e5b55a9" translate="yes" xml:space="preserve">
          <source>Name of the mailer class</source>
          <target state="translated">メーラークラスの名前</target>
        </trans-unit>
        <trans-unit id="031346423a1b0ce1d227b1b30affcb044013a924" translate="yes" xml:space="preserve">
          <source>Name of the middleware</source>
          <target state="translated">ミドルウェア名</target>
        </trans-unit>
        <trans-unit id="78457f7d39785050562a7dff3d2e99a2e0e79866" translate="yes" xml:space="preserve">
          <source>Name of the operation</source>
          <target state="translated">操作名</target>
        </trans-unit>
        <trans-unit id="03122e3a5b21f57d2d883c6a0a49357e202d911c" translate="yes" xml:space="preserve">
          <source>Name of the service</source>
          <target state="translated">サービス名</target>
        </trans-unit>
        <trans-unit id="1c4922e237a35b808877d9a82e3b4f1d76a9d175" translate="yes" xml:space="preserve">
          <source>Name#!~</source>
          <target state="translated">Name#!~</target>
        </trans-unit>
        <trans-unit id="e792f5520042a09fdd9b5e1e673cfeee3c77200f" translate="yes" xml:space="preserve">
          <source>Name#&amp;lt;=&amp;gt;</source>
          <target state="translated">Name#&amp;lt;=&amp;gt;</target>
        </trans-unit>
        <trans-unit id="1179728f0d5f43d5293a76a78366464d8a60734c" translate="yes" xml:space="preserve">
          <source>Name#==</source>
          <target state="translated">Name#==</target>
        </trans-unit>
        <trans-unit id="72068bf4dc62054d1aa334d91a8f73f1a4df79d4" translate="yes" xml:space="preserve">
          <source>Name#===</source>
          <target state="translated">Name#===</target>
        </trans-unit>
        <trans-unit id="7e2c499ce65cfd2fc2c0d8d2ec1ae1cf9580ba97" translate="yes" xml:space="preserve">
          <source>Name#=~</source>
          <target state="translated">Name#=~</target>
        </trans-unit>
        <trans-unit id="e3a602bd022b88eb5fde04d80ef58513bf53d879" translate="yes" xml:space="preserve">
          <source>Name#cache_key</source>
          <target state="translated">Name#cache_key</target>
        </trans-unit>
        <trans-unit id="4681debcf82ac876bdf9bce21fce76c198d4aa93" translate="yes" xml:space="preserve">
          <source>Name#collection</source>
          <target state="translated">Name#collection</target>
        </trans-unit>
        <trans-unit id="ddf13fdc6f4b9d40165f558c9f93bad094528b73" translate="yes" xml:space="preserve">
          <source>Name#element</source>
          <target state="translated">Name#element</target>
        </trans-unit>
        <trans-unit id="463ae0c60d41feba7ad71200788dc4337d894175" translate="yes" xml:space="preserve">
          <source>Name#eql?</source>
          <target state="translated">Name#eql?</target>
        </trans-unit>
        <trans-unit id="98daf91647588f6bd7efd46dce99631c206bb5c1" translate="yes" xml:space="preserve">
          <source>Name#human</source>
          <target state="translated">Name#human</target>
        </trans-unit>
        <trans-unit id="c97e546358582b5a5ba1ea7bdf50be71b53e922b" translate="yes" xml:space="preserve">
          <source>Name#i18n_key</source>
          <target state="translated">Name#i18n_key</target>
        </trans-unit>
        <trans-unit id="c22528385d14458160cc452921eaab5c5a7bdce5" translate="yes" xml:space="preserve">
          <source>Name#match?</source>
          <target state="translated">Name#match?</target>
        </trans-unit>
        <trans-unit id="eee58f9d0bbf2eb7debc13e44da843d09fd29e93" translate="yes" xml:space="preserve">
          <source>Name#name</source>
          <target state="translated">Name#name</target>
        </trans-unit>
        <trans-unit id="18b2ab85207f22841861f5f4e4e3c8548355b26c" translate="yes" xml:space="preserve">
          <source>Name#param_key</source>
          <target state="translated">Name#param_key</target>
        </trans-unit>
        <trans-unit id="d7cc97c1964b5845cb4a881ef26f71711ce1bde7" translate="yes" xml:space="preserve">
          <source>Name#plural</source>
          <target state="translated">Name#plural</target>
        </trans-unit>
        <trans-unit id="c5f2701a378862cb6c909900693c993cdb5a070a" translate="yes" xml:space="preserve">
          <source>Name#route_key</source>
          <target state="translated">Name#route_key</target>
        </trans-unit>
        <trans-unit id="ea2815d1e3255ea3fe84eecd0b1534fda2f22333" translate="yes" xml:space="preserve">
          <source>Name#singular</source>
          <target state="translated">Name#singular</target>
        </trans-unit>
        <trans-unit id="3f1cb4167052af9701bd98eaab092beb46b304fb" translate="yes" xml:space="preserve">
          <source>Name#singular_route_key</source>
          <target state="translated">Name#singular_route_key</target>
        </trans-unit>
        <trans-unit id="5a69bdd1ef58b83bac730aaf7e46814d70697147" translate="yes" xml:space="preserve">
          <source>Name#to_s</source>
          <target state="translated">Name#to_s</target>
        </trans-unit>
        <trans-unit id="7ce74ccf007c0a9889745b2a5abd494e855bfcfa" translate="yes" xml:space="preserve">
          <source>Name#to_str</source>
          <target state="translated">Name#to_str</target>
        </trans-unit>
        <trans-unit id="055abe0c93806fd5fddede2eb9dd54fec55fd4c4" translate="yes" xml:space="preserve">
          <source>Name::new</source>
          <target state="translated">Name::new</target>
        </trans-unit>
        <trans-unit id="552b247919a3a4142c7193f3218e6c006dc56731" translate="yes" xml:space="preserve">
          <source>NameError</source>
          <target state="translated">NameError</target>
        </trans-unit>
        <trans-unit id="cd2bcf0c29669d641e5e068f2807dc580ed514d4" translate="yes" xml:space="preserve">
          <source>NameError#missing_name</source>
          <target state="translated">NameError#missing_name</target>
        </trans-unit>
        <trans-unit id="6519308d40a377cea33b21720a5e1eee430463f7" translate="yes" xml:space="preserve">
          <source>NameError#missing_name?</source>
          <target state="translated">NameError#missing_name?</target>
        </trans-unit>
        <trans-unit id="83cd88833f32f706e162e5b2c5207612273bba68" translate="yes" xml:space="preserve">
          <source>Named Route Helper</source>
          <target state="translated">ネームドルートヘルパー</target>
        </trans-unit>
        <trans-unit id="6243d7a9ebe509fa90d17fc1dec58ea6b19bcd3f" translate="yes" xml:space="preserve">
          <source>Named routes</source>
          <target state="translated">ネームドルート</target>
        </trans-unit>
        <trans-unit id="fb73760ca2f5e5b7055b35a7dfc2d2a936f9ee3d" translate="yes" xml:space="preserve">
          <source>Named scopes can also have extensions, just as with &lt;a href=&quot;../../associations/classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt; declarations:</source>
          <target state="translated">名前付きスコープは、&lt;a href=&quot;../../associations/classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt;宣言と同様に、拡張機能を持つこともできます。</target>
        </trans-unit>
        <trans-unit id="c53b64fd17c082e6beb4e1aca64ab7d44f35aa7e" translate="yes" xml:space="preserve">
          <source>Namespace isolation to &lt;code&gt;config/routes.rb&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;config/routes.rb&lt;/code&gt; への名前空間の分離：</target>
        </trans-unit>
        <trans-unit id="79e8ca566bc6852923638a4ac14a1f95414dd757" translate="yes" xml:space="preserve">
          <source>Namespace isolation to &lt;code&gt;lib/blorgh/engine.rb&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;lib/blorgh/engine.rb&lt;/code&gt; への名前空間の分離：</target>
        </trans-unit>
        <trans-unit id="8b4617b659a51d0b5756991a46730570511eef04" translate="yes" xml:space="preserve">
          <source>Naming</source>
          <target state="translated">Naming</target>
        </trans-unit>
        <trans-unit id="8af56df8a9cb35f56b67edd6d269d4e86defc0d0" translate="yes" xml:space="preserve">
          <source>Naming Conventions</source>
          <target state="translated">命名規約</target>
        </trans-unit>
        <trans-unit id="3c2aa7c616223e41c395f07cffdda74786d5855d" translate="yes" xml:space="preserve">
          <source>Naming Routes</source>
          <target state="translated">ネーミングルート</target>
        </trans-unit>
        <trans-unit id="727e70bd9d31b16f99e09131ffa84f73d9c0cdab" translate="yes" xml:space="preserve">
          <source>Naming conflicts of this kind are rare in practice, but if one occurs, &lt;code&gt;require_dependency&lt;/code&gt; provides a solution by ensuring that the constant needed to trigger the heuristic is defined in the conflicting place.</source>
          <target state="translated">この種の名前の競合は実際にはまれですが、 &lt;code&gt;require_dependency&lt;/code&gt; した場合、require_dependencyは、ヒューリスティックをトリガーするために必要な定数が競合する場所で定義されるようにすることで解決策を提供します。</target>
        </trans-unit>
        <trans-unit id="003199f690943e090431ea9315afa6128057cf84" translate="yes" xml:space="preserve">
          <source>Naming#model_name</source>
          <target state="translated">Naming#model_name</target>
        </trans-unit>
        <trans-unit id="37b2dfaa964981c5857c8884cc0c8a3ba035ecb2" translate="yes" xml:space="preserve">
          <source>Naming::param_key</source>
          <target state="translated">Naming::param_key</target>
        </trans-unit>
        <trans-unit id="15a5e01708eab09298595ec3df33c78823c5effa" translate="yes" xml:space="preserve">
          <source>Naming::plural</source>
          <target state="translated">Naming::plural</target>
        </trans-unit>
        <trans-unit id="e94910e8a8fee93c260867ec51d1f9417720d305" translate="yes" xml:space="preserve">
          <source>Naming::route_key</source>
          <target state="translated">Naming::route_key</target>
        </trans-unit>
        <trans-unit id="b08cbd482856c7e71807d58479b402a5eb900c01" translate="yes" xml:space="preserve">
          <source>Naming::singular</source>
          <target state="translated">Naming::singular</target>
        </trans-unit>
        <trans-unit id="e81567d4f4bc1b7dbbb3dc05722255fd642072fd" translate="yes" xml:space="preserve">
          <source>Naming::singular_route_key</source>
          <target state="translated">Naming::singular_route_key</target>
        </trans-unit>
        <trans-unit id="607b36733fc1c205aa141382646fa32e1828d2be" translate="yes" xml:space="preserve">
          <source>Naming::uncountable?</source>
          <target state="translated">Naming::uncountable?</target>
        </trans-unit>
        <trans-unit id="c7fccf3309993cfc8b035745c98b4d3c7546b8da" translate="yes" xml:space="preserve">
          <source>Neither of these rails commands do anything you could not do with &lt;code&gt;db:migrate&lt;/code&gt;. They are simply more convenient, since you do not need to explicitly specify the version to migrate to.</source>
          <target state="translated">これらのrailsコマンドはどちらも、 &lt;code&gt;db:migrate&lt;/code&gt; を使用して実行できなかった処理は行いません。移行先のバージョンを明示的に指定する必要がないため、これらの方がより便利です。</target>
        </trans-unit>
        <trans-unit id="e509697d698a7906a469d4a7b75c6a68f919eb56" translate="yes" xml:space="preserve">
          <source>Nested Associations</source>
          <target state="translated">入れ子になった協会</target>
        </trans-unit>
        <trans-unit id="7fba4d7bfc8f67d21d0ab22eb56f0af865916a65" translate="yes" xml:space="preserve">
          <source>Nested Attributes Examples</source>
          <target state="translated">入れ子になった属性の例</target>
        </trans-unit>
        <trans-unit id="4c468c4b63e979418047fd8eb368f74fa116c4f0" translate="yes" xml:space="preserve">
          <source>Nested Forms</source>
          <target state="translated">入れ子になったフォーム</target>
        </trans-unit>
        <trans-unit id="248022a870eb27897fa53e16452caafdbdabcf57" translate="yes" xml:space="preserve">
          <source>Nested Resources</source>
          <target state="translated">ネストされたリソース</target>
        </trans-unit>
        <trans-unit id="a886336ca42a0ed213b8b9ef83363bbd6b3472ac" translate="yes" xml:space="preserve">
          <source>Nested attribute writers are normal setter methods named after an association. The most common way of defining these writers is either with &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt; in a model definition or by defining a method with the proper name. For example: the attribute writer for the association &lt;code&gt;:address&lt;/code&gt; is called &lt;code&gt;address_attributes=&lt;/code&gt;.</source>
          <target state="translated">ネストされた属性ライターは、関連付けにちなんで名付けられた通常のセッターメソッドです。これらのライターを定義する最も一般的な方法は、モデル定義で &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt; を使用するか、適切な名前でメソッドを定義することです。例：関連付け &lt;code&gt;:address&lt;/code&gt; の属性ライターは、 &lt;code&gt;address_attributes=&lt;/code&gt; と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="8dba121940b3381c7ce96a44cb7145f206ea973c" translate="yes" xml:space="preserve">
          <source>Nested attributes allow you to save attributes on associated records through the parent. By default nested attribute updating is turned off and you can enable it using the &lt;a href=&quot;classmethods#method-i-accepts_nested_attributes_for&quot;&gt;#accepts_nested_attributes_for&lt;/a&gt; class method. When you enable nested attributes an attribute writer is defined on the model.</source>
          <target state="translated">ネストされた属性を使用すると、親を介して関連レコードの属性を保存できます。デフォルトでは、ネストされた属性の更新はオフになっており、&lt;a href=&quot;classmethods#method-i-accepts_nested_attributes_for&quot;&gt;＃accepts_nested_attributes_for&lt;/a&gt;クラスメソッドを使用して有効にすることができます。ネストされた属性を有効にすると、属性ライターがモデルで定義されます。</target>
        </trans-unit>
        <trans-unit id="76f1637e9c296faeb50bd64d9b1abd9662cb9a3a" translate="yes" xml:space="preserve">
          <source>Nested attributes for an associated collection can also be passed in the form of a hash of hashes instead of an array of hashes:</source>
          <target state="translated">関連するコレクションのネストされた属性は、ハッシュの配列ではなく、ハッシュのハッシュの形で渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="4a35878c09308aa9049fa9b9a6d7c7e15c3dfe08" translate="yes" xml:space="preserve">
          <source>Nested classes are given table names prefixed by the singular form of the parent's table name. Enclosing modules are not considered.</source>
          <target state="translated">入れ子になったクラスには、親のテーブル名の単数形の前にテーブル名が付けられます。囲まれたモジュールは考慮されません。</target>
        </trans-unit>
        <trans-unit id="63f019e717e0ab6a9f532990a577c18fa3ae04dc" translate="yes" xml:space="preserve">
          <source>Nested joins:</source>
          <target state="translated">入れ子になった結合。</target>
        </trans-unit>
        <trans-unit id="c66f56f1f5c5f4b1c4c4c05d227838c7dc604645" translate="yes" xml:space="preserve">
          <source>Nested resources and/or namespaces are also supported, as illustrated in the example:</source>
          <target state="translated">例に示すように、入れ子になったリソースや名前空間もサポートされています。</target>
        </trans-unit>
        <trans-unit id="ca2f14466890989a0ffb68ac10638261362707cc" translate="yes" xml:space="preserve">
          <source>Nested routes allow you to capture this relationship in your routing. In this case, you could include this route declaration:</source>
          <target state="translated">ネストされたルートを使用すると、この関係をルーティングに取り込むことができます。この場合、次のようなルート宣言を含めることができます。</target>
        </trans-unit>
        <trans-unit id="127f49081f658cece5f3811cf0dc1334ffa1512f" translate="yes" xml:space="preserve">
          <source>Nested transactions</source>
          <target state="translated">入れ子になったトランザクション</target>
        </trans-unit>
        <trans-unit id="c835d6d0c484ded0471029d4ba8a6d1f070134ea" translate="yes" xml:space="preserve">
          <source>Nested transactions support</source>
          <target state="translated">入れ子になったトランザクションのサポート</target>
        </trans-unit>
        <trans-unit id="f06563daf6842a8e082fd4615e320fc869bb69d9" translate="yes" xml:space="preserve">
          <source>Nesting</source>
          <target state="translated">Nesting</target>
        </trans-unit>
        <trans-unit id="091718b4816f1f70d7c2f882eaebf502f50ff1e1" translate="yes" xml:space="preserve">
          <source>Nesting and Qualified Constants</source>
          <target state="translated">ネスティングと修飾定数</target>
        </trans-unit>
        <trans-unit id="4970c28f364d041c28f5d5ff2bc88daf1a13ad01" translate="yes" xml:space="preserve">
          <source>Network Address Types</source>
          <target state="translated">ネットワークアドレスの種類</target>
        </trans-unit>
        <trans-unit id="4e76369081894cf103d91859c60296711dc576f5" translate="yes" xml:space="preserve">
          <source>Network traffic is mostly based on the limited Western alphabet, so new character encodings, such as Unicode, emerged, to transmit characters in other languages. But, this is also a threat to web applications, as malicious code can be hidden in different encodings that the web browser might be able to process, but the web application might not. Here is an attack vector in UTF-8 encoding:</source>
          <target state="translated">ネットワークトラフィックは、ほとんどが限られた西洋のアルファベットに基づいているため、他の言語の文字を送信するために、ユニコードのような新しい文字エンコーディングが登場しました。しかし、これはWebアプリケーションにとっても脅威であり、悪意のあるコードは、Webブラウザが処理できるかもしれないが、Webアプリケーションが処理できないかもしれない異なるエンコーディングに隠されている可能性があるからです。ここでは、UTF-8エンコーディングでの攻撃ベクトルを紹介します。</target>
        </trans-unit>
        <trans-unit id="869ed4b7fdab7fee2a402b5ed8ba08fa65a80dda" translate="yes" xml:space="preserve">
          <source>Nevertheless, integration tests may want to inspect controller responses in more detail, and that's when Response can be useful for application developers. Integration test methods such as &lt;a href=&quot;integration/requesthelpers#method-i-get&quot;&gt;ActionDispatch::Integration::RequestHelpers#get&lt;/a&gt; and &lt;a href=&quot;integration/requesthelpers#method-i-post&quot;&gt;ActionDispatch::Integration::RequestHelpers#post&lt;/a&gt; return objects of type &lt;a href=&quot;testresponse&quot;&gt;TestResponse&lt;/a&gt; (which are of course also of type Response).</source>
          <target state="translated">それでも、統合テストでは、コントローラーの応答をより詳細に検査する必要がある場合があります。その場合、Responseがアプリケーション開発者に役立ちます。以下のような統合試験方法&lt;a href=&quot;integration/requesthelpers#method-i-get&quot;&gt;ActionDispatch ::統合:: RequestHelpers＃GET&lt;/a&gt;と&lt;a href=&quot;integration/requesthelpers#method-i-post&quot;&gt;ActionDispatch ::統合:: RequestHelpers＃ポスト&lt;/a&gt;型の戻りオブジェクト&lt;a href=&quot;testresponse&quot;&gt;TestResponse&lt;/a&gt;（コースもタイプレスポンスのです）。</target>
        </trans-unit>
        <trans-unit id="025519ea3f483eb11a3c8608b8a731eee0947b1b" translate="yes" xml:space="preserve">
          <source>New Features</source>
          <target state="translated">新機能</target>
        </trans-unit>
        <trans-unit id="59f7814b9783bf405ce9a2b8a2eb91a07086d026" translate="yes" xml:space="preserve">
          <source>New Framework Defaults</source>
          <target state="translated">新しいフレームワークのデフォルト</target>
        </trans-unit>
        <trans-unit id="82c45ae6d5b92c7fc2da8f10d18dfa0aa37127c7" translate="yes" xml:space="preserve">
          <source>New Rails applications no longer generate functional style controller tests and they should only be used for backward compatibility. Integration style controller tests perform actual requests, whereas functional style controller tests merely simulate a request. Besides, integration tests are as fast as functional tests and provide lot of helpers such as &lt;code&gt;as&lt;/code&gt;, &lt;code&gt;parsed_body&lt;/code&gt; for effective testing of controller actions including even &lt;a href=&quot;api&quot;&gt;API&lt;/a&gt; endpoints.</source>
          <target state="translated">新しいRailsアプリケーションは機能的なスタイルのコントローラーテストを生成しなくなったため、下位互換性のためにのみ使用する必要があります。統合スタイルコントローラーテストは実際のリクエストを実行しますが、機能スタイルコントローラーテストはリクエストをシミュレートするだけです。また、統合テストは、機能テストと同じ速さであり、そのようにたくさんのヘルパーの提供 &lt;code&gt;as&lt;/code&gt; 、 &lt;code&gt;parsed_body&lt;/code&gt; さえも含めて、コントローラのアクションの効果的なテストのため&lt;a href=&quot;api&quot;&gt;のAPI&lt;/a&gt;エンドポイントを。</target>
        </trans-unit>
        <trans-unit id="7cf53ae5b6704e72f88c820669c6bc32c67a8631" translate="yes" xml:space="preserve">
          <source>New Rails projects are configured to use this implementation in development environment by default.</source>
          <target state="translated">新しいRailsプロジェクトは、デフォルトで開発環境でこの実装を使用するように設定されています。</target>
        </trans-unit>
        <trans-unit id="0c893b28bccafb88f76f9633609b9c93a062f23a" translate="yes" xml:space="preserve">
          <source>New applications will include these lines commented out in the production.rb.</source>
          <target state="translated">新しいアプリケーションでは、production.rbでコメントアウトされたこれらの行が含まれます。</target>
        </trans-unit>
        <trans-unit id="4943683ac5afab318415394f93a1c063933cd2e1" translate="yes" xml:space="preserve">
          <source>New features are only added to the master branch and will not be made available in point releases.</source>
          <target state="translated">新しい機能は master ブランチにのみ追加され、ポイントリリースでは利用できません。</target>
        </trans-unit>
        <trans-unit id="ccaf4b4268072c64d096dcb7ec72db000a572a03" translate="yes" xml:space="preserve">
          <source>New features, may contain API changes (Serve as major versions of Semver). Breaking changes are paired with deprecation notices in the previous minor or major release.</source>
          <target state="translated">新しい機能は、APIの変更を含む可能性があります(Semverのメジャーバージョンとして提供されます)。ブレーキングの変更は、前のマイナーリリースやメジャーリリースでの廃止予定の通知と対になっています。</target>
        </trans-unit>
        <trans-unit id="6c84fb1c0af34488ee6f00a9554a1204b67cf86b" translate="yes" xml:space="preserve">
          <source>New features, will likely contain API changes. The difference between Rails' minor and major releases is the magnitude of breaking changes, and usually reserved for special occasions.</source>
          <target state="translated">新機能では、APIの変更が含まれる可能性が高い Railsのマイナーリリースとメジャーリリースの違いは、変更点の大きさであり、通常は特別な時のために予約されています。</target>
        </trans-unit>
        <trans-unit id="850c22852ead9d4a27eec9acc5dd2785ed98f6a9" translate="yes" xml:space="preserve">
          <source>New objects can be instantiated as either empty (pass no construction parameter) or pre-set with attributes but not yet saved (pass a hash with key names matching the associated table column names). In both instances, valid attribute keys are determined by the column names of the associated table &amp;ndash; hence you can't have attributes that aren't part of the table columns.</source>
          <target state="translated">新しいオブジェクトは、空（構築パラメーターを渡さない）または事前設定された属性でインスタンス化できますが、まだ保存されていません（関連するテーブル列名と一致するキー名のハッシュを渡します）。どちらの場合も、有効な属性キーは関連付けられたテーブルの列名によって決定されるため、テーブルの列の一部ではない属性を持つことはできません。</target>
        </trans-unit>
        <trans-unit id="58e4f9e6427a21080bbdeb14fdcf91252bfb5031" translate="yes" xml:space="preserve">
          <source>New rules are added at the top. So in the example above, the irregular rule for octopus will now be the first of the pluralization and singularization rules that is runs. This guarantees that your rules run before any of the rules that may already have been loaded.</source>
          <target state="translated">新しいルールが一番上に追加されます。上の例では、タコのための不規則なルールが、複数化と単数化のルールの最初に実行されることになります。これにより、すでに読み込まれている可能性のあるルールよりも先に、あなたのルールが実行されることが保証されます。</target>
        </trans-unit>
        <trans-unit id="e5b6589f6e1b2065a2343b20e9cdbdd4af676bc1" translate="yes" xml:space="preserve">
          <source>Next the message contains &lt;code&gt;request.formats&lt;/code&gt; which specifies the format of template to be served in response. It is set to &lt;code&gt;text/html&lt;/code&gt; as we requested this page via browser, so Rails is looking for an HTML template.</source>
          <target state="translated">次に、メッセージには &lt;code&gt;request.formats&lt;/code&gt; が含まれ、応答で提供されるテンプレートの形式を指定します。ブラウザでこのページをリクエストしたため、 &lt;code&gt;text/html&lt;/code&gt; に設定されているため、RailsはHTMLテンプレートを探しています。</target>
        </trans-unit>
        <trans-unit id="6767b8acbd10fc0b00f829278ae1fa51ceecbf6f" translate="yes" xml:space="preserve">
          <source>Next we need to &lt;em&gt;internationalize&lt;/em&gt; our application by abstracting every locale-specific element. Finally, we need to &lt;em&gt;localize&lt;/em&gt; it by providing necessary translations for these abstracts.</source>
          <target state="translated">次に、ロケール固有のすべての要素を抽象化して、アプリケーションを&lt;em&gt;国際&lt;/em&gt;化する必要があります。最後に、これらの抄録に必要な翻訳を提供することにより、&lt;em&gt;ローカライズ&lt;/em&gt;する必要があります。</target>
        </trans-unit>
        <trans-unit id="109a21d6ff6f2d60ba3c1008a17050d0acac596e" translate="yes" xml:space="preserve">
          <source>Next, let's look at our first assertion:</source>
          <target state="translated">次に、最初の主張を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="313433b09f8307e7e5ca150e5483eea4b6548eb6" translate="yes" xml:space="preserve">
          <source>Next, the &lt;code&gt;scaffold_controller&lt;/code&gt; generator is invoked, generating a controller called &lt;code&gt;Blorgh::ArticlesController&lt;/code&gt; (at &lt;code&gt;app/controllers/blorgh/articles_controller.rb&lt;/code&gt;) and its related views at &lt;code&gt;app/views/blorgh/articles&lt;/code&gt;. This generator also generates tests for the controller (&lt;code&gt;test/controllers/blorgh/articles_controller_test.rb&lt;/code&gt; and &lt;code&gt;test/system/blorgh/articles_test.rb&lt;/code&gt;) and a helper (&lt;code&gt;app/helpers/blorgh/articles_helper.rb&lt;/code&gt;).</source>
          <target state="translated">次に &lt;code&gt;scaffold_controller&lt;/code&gt; ジェネレーターが呼び出され、 &lt;code&gt;Blorgh::ArticlesController&lt;/code&gt; （ &lt;code&gt;app/controllers/blorgh/articles_controller.rb&lt;/code&gt; ）と呼ばれるコントローラーと、 &lt;code&gt;app/views/blorgh/articles&lt;/code&gt; にある関連するビューが生成されます。このジェネレーターは、コントローラー（ &lt;code&gt;test/controllers/blorgh/articles_controller_test.rb&lt;/code&gt; および &lt;code&gt;test/system/blorgh/articles_test.rb&lt;/code&gt; ）とヘルパー（ &lt;code&gt;app/helpers/blorgh/articles_helper.rb&lt;/code&gt; ）のテストも生成します。</target>
        </trans-unit>
        <trans-unit id="40bc064bdc43c09c7cef9fb43ea119e01e614001" translate="yes" xml:space="preserve">
          <source>Next, the &lt;code&gt;test_unit&lt;/code&gt; generator is invoked for this model, generating a model test at &lt;code&gt;test/models/blorgh/article_test.rb&lt;/code&gt; (rather than &lt;code&gt;test/models/article_test.rb&lt;/code&gt;) and a fixture at &lt;code&gt;test/fixtures/blorgh/articles.yml&lt;/code&gt; (rather than &lt;code&gt;test/fixtures/articles.yml&lt;/code&gt;).</source>
          <target state="translated">次に、このモデルに対して &lt;code&gt;test_unit&lt;/code&gt; ジェネレーターが呼び出され、 &lt;code&gt;test/models/blorgh/article_test.rb&lt;/code&gt; （ &lt;code&gt;test/models/article_test.rb&lt;/code&gt; ではなく）にモデルテストが生成され、 &lt;code&gt;test/fixtures/blorgh/articles.yml&lt;/code&gt; （ &lt;code&gt;test/fixtures/articles.yml&lt;/code&gt; ではなく）。</target>
        </trans-unit>
        <trans-unit id="652c33338cb22e43de7f0560517c2ebd49ae8f39" translate="yes" xml:space="preserve">
          <source>Next, the partial that this line will render needs to exist. Create a new directory at &lt;code&gt;app/views/blorgh/comments&lt;/code&gt; and in it a new file called &lt;code&gt;_form.html.erb&lt;/code&gt; which has this content to create the required partial:</source>
          <target state="translated">次に、このラインがレンダリングするパーシャルが存在する必要があります。 &lt;code&gt;app/views/blorgh/comments&lt;/code&gt; に新しいディレクトリを作成し、その中に &lt;code&gt;_form.html.erb&lt;/code&gt; と呼ばれる新しいファイルを作成します。このファイルには、必要なパーシャルを作成するためのコンテンツが含まれています。</target>
        </trans-unit>
        <trans-unit id="acf9d80ade823a9926ce223f831b819c233b8f93" translate="yes" xml:space="preserve">
          <source>Next, there needs to be a form so that comments can be created on an article. To add this, put this line underneath the call to &lt;code&gt;render @article.comments&lt;/code&gt; in &lt;code&gt;app/views/blorgh/articles/show.html.erb&lt;/code&gt;:</source>
          <target state="translated">次に、記事にコメントを作成できるようにフォームが必要です。これを追加するには、 &lt;code&gt;app/views/blorgh/articles/show.html.erb&lt;/code&gt; で &lt;code&gt;render @article.comments&lt;/code&gt; article.commentsをレンダリングする呼び出しの下に次の行を追加します。</target>
        </trans-unit>
        <trans-unit id="5ff2d584c2e41a9b0f9b33f4ba937921760355d0" translate="yes" xml:space="preserve">
          <source>Next, we need to create the &lt;code&gt;update&lt;/code&gt; action in &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt;. Add it between the &lt;code&gt;create&lt;/code&gt; action and the &lt;code&gt;private&lt;/code&gt; method:</source>
          <target state="translated">次に、 &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt; に &lt;code&gt;update&lt;/code&gt; アクションを作成する必要があります。 &lt;code&gt;create&lt;/code&gt; アクションと &lt;code&gt;private&lt;/code&gt; メソッドの間に追加します。</target>
        </trans-unit>
        <trans-unit id="f4802c4e596e6d343d4a0852de355df71a877078" translate="yes" xml:space="preserve">
          <source>Next, we need to update our &lt;code&gt;Blorgh::ArticleController#article_params&lt;/code&gt; method to permit the new form parameter:</source>
          <target state="translated">次に、新しいフォームパラメータを許可するように &lt;code&gt;Blorgh::ArticleController#article_params&lt;/code&gt; メソッドを更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="e35efe3520fc6014820c61a3334ada013d78945e" translate="yes" xml:space="preserve">
          <source>Next, we will generate the three models that inherit from Vehicle. For this, we can use the &lt;code&gt;--parent=PARENT&lt;/code&gt; option, which will generate a model that inherits from the specified parent and without equivalent migration (since the table already exists).</source>
          <target state="translated">次に、Vehicleを継承する3つのモデルを生成します。これには、 &lt;code&gt;--parent=PARENT&lt;/code&gt; オプションを使用できます。これにより、指定された親から継承するモデルが生成され、同等の移行は行われません（テーブルが既に存在するため）。</target>
        </trans-unit>
        <trans-unit id="599b45c8b1a4abe02f50f7999c00f774c6c961f6" translate="yes" xml:space="preserve">
          <source>Next, you have to tell Rails where your actual home page is located.</source>
          <target state="translated">次に、実際のホームページがどこにあるかをRailsに伝える必要があります。</target>
        </trans-unit>
        <trans-unit id="4b8add796b363b6597a08923490d74903e475356" translate="yes" xml:space="preserve">
          <source>Nil values can be cached.</source>
          <target state="translated">NIL 値をキャッシュすることができます。</target>
        </trans-unit>
        <trans-unit id="15e1d872b31958c396eaac1d61b9e46aa2f5531f" translate="yes" xml:space="preserve">
          <source>NilClass</source>
          <target state="translated">NilClass</target>
        </trans-unit>
        <trans-unit id="7714fef354b8c1d34f1ea5bdaf4f7461127e5c71" translate="yes" xml:space="preserve">
          <source>NilClass#try</source>
          <target state="translated">NilClass#try</target>
        </trans-unit>
        <trans-unit id="44d04e33768b6d74220565215cdeaf0ed068ca29" translate="yes" xml:space="preserve">
          <source>NilClass#try!</source>
          <target state="translated">NilClass#try!</target>
        </trans-unit>
        <trans-unit id="158227f6a11ceb02d0183bb376e17da5f25f7553" translate="yes" xml:space="preserve">
          <source>No args - Returns &lt;code&gt;false&lt;/code&gt; if the relation is empty, &lt;code&gt;true&lt;/code&gt; otherwise.</source>
          <target state="translated">引数なし- リレーションが空の場合は &lt;code&gt;false&lt;/code&gt; 、それ以外の場合は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="8a3f27db7e37442a5e3cfabfca8ff608e7a3a15c" translate="yes" xml:space="preserve">
          <source>No expiry is set on cache entries by default. Redis is expected to be configured with an eviction policy that automatically deletes least-recently or -frequently used keys when it reaches max memory. See &lt;a href=&quot;https://redis.io/topics/lru-cache&quot;&gt;redis.io/topics/lru-cache&lt;/a&gt; for cache server setup.</source>
          <target state="translated">デフォルトでは、キャッシュエントリに有効期限は設定されていません。Redisは、最大メモリに達したときに、最近使用されたキーまたは使用頻度の高いキーを自動的に削除する排除ポリシーで構成されていることが期待されます。キャッシュサーバーの設定については、&lt;a href=&quot;https://redis.io/topics/lru-cache&quot;&gt;redis.io / topics / lru-&lt;/a&gt; cacheを参照してください。</target>
        </trans-unit>
        <trans-unit id="ecec418cda521616578d32392c1ebbdd160c1be8" translate="yes" xml:space="preserve">
          <source>No further processing</source>
          <target state="translated">それ以上の処理はありません。</target>
        </trans-unit>
        <trans-unit id="db97ed13f2ed7f611f5ba31f10f0d82c2012ecc9" translate="yes" xml:space="preserve">
          <source>No namespace is set by default. Provide one if the Redis cache server is shared with other apps: &lt;code&gt;namespace: 'myapp-cache'&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは名前空間は設定されていません。Redisキャッシュサーバーが他のアプリと共有されている場合は、 &lt;code&gt;namespace: 'myapp-cache'&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="221a5c8be43af1725cb6eacac4221d7dd3fe4e70" translate="yes" xml:space="preserve">
          <source>No: Does not allow the priority of jobs to be configured.</source>
          <target state="translated">いいえ:ジョブの優先度を設定できません。</target>
        </trans-unit>
        <trans-unit id="16763f29fae6d620d661620376b81b8978bfbd1d" translate="yes" xml:space="preserve">
          <source>No: The adapter will run jobs at the next opportunity and cannot use perform_later.</source>
          <target state="translated">いいえ:アダプタは次の機会にジョブを実行するので、 perform_later は使用できません。</target>
        </trans-unit>
        <trans-unit id="255548651b6f315ea8148ee71a1dcca3c1b3706e" translate="yes" xml:space="preserve">
          <source>No: The job is run in the same process.</source>
          <target state="translated">いいえ:ジョブは同じプロセスで実行されます。</target>
        </trans-unit>
        <trans-unit id="444ea91c7df550f94f3d747738c1f1a3466e0cc6" translate="yes" xml:space="preserve">
          <source>NoMethodError</source>
          <target state="translated">NoMethodError</target>
        </trans-unit>
        <trans-unit id="7bdb712b7ee9cb1572c977c6c62388b01305f84f" translate="yes" xml:space="preserve">
          <source>NoTouching</source>
          <target state="translated">NoTouching</target>
        </trans-unit>
        <trans-unit id="4409378f8e0b176c22d8f84d1d9f6e7b19f6bf2f" translate="yes" xml:space="preserve">
          <source>NoTouching#no_touching?</source>
          <target state="translated">NoTouching#no_touching?</target>
        </trans-unit>
        <trans-unit id="c47a7fa1d4ed36caf76d6aae9c8337d194a32586" translate="yes" xml:space="preserve">
          <source>NoTouching::ClassMethods</source>
          <target state="translated">NoTouching::ClassMethods</target>
        </trans-unit>
        <trans-unit id="ba98193055fdb0c7813315b4239b68f38d2b05af" translate="yes" xml:space="preserve">
          <source>NoTouching::ClassMethods#no_touching</source>
          <target state="translated">NoTouching::ClassMethods#no_touching</target>
        </trans-unit>
        <trans-unit id="ef59dd33658fd629a399aabbada1e44d1143840c" translate="yes" xml:space="preserve">
          <source>Noisy syntax.</source>
          <target state="translated">騒がしい構文。</target>
        </trans-unit>
        <trans-unit id="a0542163c0ba3f59fb289f1dc9e8dba5d3af2730" translate="yes" xml:space="preserve">
          <source>Non-Resourceful Routes</source>
          <target state="translated">リソースのないルート</target>
        </trans-unit>
        <trans-unit id="c55db06fa97f077282c5464f82b0f22e2389c4ca" translate="yes" xml:space="preserve">
          <source>Non-resourceful routes</source>
          <target state="translated">資源に頼らないルート</target>
        </trans-unit>
        <trans-unit id="fd0b7793c252e73868462c36c6ba36d9dd714b74" translate="yes" xml:space="preserve">
          <source>Non-significant zeros after the decimal separator are stripped out by default (set &lt;code&gt;:strip_insignificant_zeros&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; to change that):</source>
          <target state="translated">小数点記号の後の重要でないゼロは、デフォルトで取り除かれます（これを変更するには、 &lt;code&gt;:strip_insignificant_zeros&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定します）。</target>
        </trans-unit>
        <trans-unit id="6eef6648406c333a4035cd5e60d0bf2ecf2606d7" translate="yes" xml:space="preserve">
          <source>None</source>
          <target state="translated">None</target>
        </trans-unit>
        <trans-unit id="356a42c934b09cbbe5bf46e0b7b4b0ced1bcb0a1" translate="yes" xml:space="preserve">
          <source>Normal callbacks hook into the life cycle of Active Record objects, allowing you to work with those objects at various points. For example, you can use a &lt;code&gt;:before_save&lt;/code&gt; callback to cause something to happen just before an object is saved.</source>
          <target state="translated">通常のコールバックはActive Recordオブジェクトのライフサイクルにフックし、さまざまなポイントでそれらのオブジェクトを操作できるようにします。たとえば、 &lt;code&gt;:before_save&lt;/code&gt; コールバックを使用して、オブジェクトが保存される直前に何かを発生させることができます。</target>
        </trans-unit>
        <trans-unit id="0a13e9d32efa4b424c6392e61c6acc0eb80b45b5" translate="yes" xml:space="preserve">
          <source>Normal use:</source>
          <target state="translated">通常使用です。</target>
        </trans-unit>
        <trans-unit id="1ab70b8dd2f6d458c3ed264ce52d8181dab57e68" translate="yes" xml:space="preserve">
          <source>Normalize args by converting &lt;code&gt;render &quot;foo&quot;&lt;/code&gt; to &lt;code&gt;render :action =&amp;gt; &quot;foo&quot;&lt;/code&gt; and &lt;code&gt;render
&quot;foo/bar&quot;&lt;/code&gt; to &lt;code&gt;render :file =&amp;gt;
&quot;foo/bar&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;render &quot;foo&quot;&lt;/code&gt; を &lt;code&gt;render :action =&amp;gt; &quot;foo&quot;&lt;/code&gt; 変換し &lt;code&gt;render &quot;foo/bar&quot;&lt;/code&gt; を &lt;code&gt;render :file =&amp;gt; &quot;foo/bar&quot;&lt;/code&gt; 変換して、 argsを正規化します。</target>
        </trans-unit>
        <trans-unit id="76ebf82afd9f2e7f802d7312d3d247b17cb36365" translate="yes" xml:space="preserve">
          <source>Normalize options.</source>
          <target state="translated">オプションを正規化します。</target>
        </trans-unit>
        <trans-unit id="cfe63d1d809fb134b05b3d5638fd48aa6ce84994" translate="yes" xml:space="preserve">
          <source>Normalizes arguments, options and then delegates &lt;a href=&quot;rendering#method-i-render_to_body&quot;&gt;#render_to_body&lt;/a&gt; and sticks the result in &lt;code&gt;self.response_body&lt;/code&gt;.</source>
          <target state="translated">引数、オプションを正規化してから&lt;a href=&quot;rendering#method-i-render_to_body&quot;&gt;#render_to_body&lt;/a&gt;を委任し、結果を &lt;code&gt;self.response_body&lt;/code&gt; に貼り付けます。</target>
        </trans-unit>
        <trans-unit id="6b8d8521ec1f363e13523415591e2d1d5a9b1bbc" translate="yes" xml:space="preserve">
          <source>Normally Rails ignores duplicate parameter names. If the parameter name contains an empty set of square brackets &lt;code&gt;[]&lt;/code&gt; then they will be accumulated in an array. If you wanted users to be able to input multiple phone numbers, you could place this in the form:</source>
          <target state="translated">通常、Railsは重複するパラメーター名を無視します。パラメータ名に角括弧 &lt;code&gt;[]&lt;/code&gt; の空のセットが含まれている場合、それらは配列に蓄積されます。ユーザーが複数の電話番号を入力できるようにしたい場合は、次の形式で配置できます。</target>
        </trans-unit>
        <trans-unit id="f08e0da51423cc8cb2840120eee1ece651d5987b" translate="yes" xml:space="preserve">
          <source>Normally when you create controllers, helpers and models inside an engine, they are treated as if they were created inside the application itself. This means that all helpers and named routes from the application will be available to your engine's controllers as well.</source>
          <target state="translated">通常、エンジン内部でコントローラ、ヘルパー、モデルを作成する場合、それらはアプリケーション内部で作成されたかのように扱われます。これは、アプリケーションからのすべてのヘルパーと名前付きルートが、エンジンのコントローラでも利用できることを意味します。</target>
        </trans-unit>
        <trans-unit id="5ef9f817caabf9bb9efcc4d6d589e7a64ec3f630" translate="yes" xml:space="preserve">
          <source>Normally, &lt;code&gt;ApplicationController&lt;/code&gt; is the only controller that inherits from &lt;code&gt;ActionController::API&lt;/code&gt;. All other controllers in turn inherit from &lt;code&gt;ApplicationController&lt;/code&gt;.</source>
          <target state="translated">通常、 &lt;code&gt;ApplicationController&lt;/code&gt; は、 &lt;code&gt;ActionController::API&lt;/code&gt; から継承する唯一のコントローラーです。他のすべてのコントローラーは &lt;code&gt;ApplicationController&lt;/code&gt; を継承します。</target>
        </trans-unit>
        <trans-unit id="b1813582ee34406c4e4de37d56648ffafa91b226" translate="yes" xml:space="preserve">
          <source>Normally, this mechanism is used on a per-client basis. The cache middleware allows us to share this caching mechanism across clients. We can enable cross-client caching in the call to &lt;code&gt;stale?&lt;/code&gt;:</source>
          <target state="translated">通常、このメカニズムはクライアントごとに使用されます。キャッシュミドルウェアを使用すると、このキャッシュメカニズムをクライアント間で共有できます。 &lt;code&gt;stale?&lt;/code&gt; の呼び出しでクライアント間キャッシュを有効にできますか？：</target>
        </trans-unit>
        <trans-unit id="997531dd7ea0389626b86133c48895591fcda728" translate="yes" xml:space="preserve">
          <source>Normally, you do not have to call this method directly at all. Use the factory class methods of &lt;code&gt;build_after_upload&lt;/code&gt; and &lt;code&gt;create_after_upload!&lt;/code&gt;.</source>
          <target state="translated">通常、このメソッドを直接呼び出す必要はありません。 &lt;code&gt;build_after_upload&lt;/code&gt; および &lt;code&gt;create_after_upload!&lt;/code&gt; のファクトリクラスメソッドを使用してください！。</target>
        </trans-unit>
        <trans-unit id="cf5007b07c89f0ace0d40e4bbc19ce4ffe7536c3" translate="yes" xml:space="preserve">
          <source>Not all migrations change the schema. Some just fix the data:</source>
          <target state="translated">すべての移行がスキーマを変更するわけではありません。データを修正するだけのものもあります。</target>
        </trans-unit>
        <trans-unit id="2fca96ad94b6af17e7dbcc07cff7f6d533f7b221" translate="yes" xml:space="preserve">
          <source>Not all web servers support streaming out-of-the-box. You need to check the instructions for each of them.</source>
          <target state="translated">すべてのウェブサーバーがすぐにストリーミングに対応しているわけではありません。それぞれの説明書を確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="06657b8133ea9b4e185fb080234e3a0364fad6ca" translate="yes" xml:space="preserve">
          <source>Not very DRY, eh? We can fix this by using events instead. We'll add a &lt;code&gt;data-*&lt;/code&gt; attribute to our link, and then bind a handler to the click event of every link that has that attribute:</source>
          <target state="translated">あまりドライではないですよね？代わりにイベントを使用してこれを修正できます。リンクに &lt;code&gt;data-*&lt;/code&gt; 属性を追加し、その属性を持つすべてのリンクのクリックイベントにハンドラーをバインドします。</target>
        </trans-unit>
        <trans-unit id="8a01dd84a7593bdb2c8fb765b3146a0f514f25b7" translate="yes" xml:space="preserve">
          <source>NotNullViolation</source>
          <target state="translated">NotNullViolation</target>
        </trans-unit>
        <trans-unit id="9e126b084c1db58a37584261f9012e35f671ac72" translate="yes" xml:space="preserve">
          <source>Notably, the Rails routing system calls &lt;code&gt;to_param&lt;/code&gt; on models to get a value for the &lt;code&gt;:id&lt;/code&gt; placeholder. &lt;code&gt;ActiveRecord::Base#to_param&lt;/code&gt; returns the &lt;code&gt;id&lt;/code&gt; of a model, but you can redefine that method in your models. For example, given</source>
          <target state="translated">特に、Railsルーティングシステムは、モデルの &lt;code&gt;to_param&lt;/code&gt; を呼び出して、 &lt;code&gt;:id&lt;/code&gt; プレースホルダーの値を取得します。 &lt;code&gt;ActiveRecord::Base#to_param&lt;/code&gt; はモデルの &lt;code&gt;id&lt;/code&gt; を返しますが、モデルでそのメソッドを再定義できます。たとえば、</target>
        </trans-unit>
        <trans-unit id="3ae806db7c0984a3428e2d88329b2a10cf8332e7" translate="yes" xml:space="preserve">
          <source>Note about replacing already defined headers:</source>
          <target state="translated">すでに定義されているヘッダの置き換えについての注意点</target>
        </trans-unit>
        <trans-unit id="c095fd5765c7e05c2ff1778309b8fa41345203ed" translate="yes" xml:space="preserve">
          <source>Note also that destroying a record preserves its ID in the model instance, so deleted models are still comparable.</source>
          <target state="translated">また、レコードを破棄するとモデルインスタンスのIDが保持されるため、削除されたモデルも同等のものになることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7694cc2f1f0145560dfa9380500275db32ac89c8" translate="yes" xml:space="preserve">
          <source>Note an object is not required to implement all APIs in order to work with Action Pack. This module only intends to provide guidance in case you want all features out of the box.</source>
          <target state="translated">Action Pack を使用するために、すべての API を実装する必要はありません。このモジュールは、すべての機能をすぐに使いたい場合のガイダンスを提供することを目的としています。</target>
        </trans-unit>
        <trans-unit id="d151fd14b51016b3cc7c384691610fb0bb532780" translate="yes" xml:space="preserve">
          <source>Note here that the routes are drawn upon the &lt;code&gt;Blorgh::Engine&lt;/code&gt; object rather than the &lt;code&gt;YourApp::Application&lt;/code&gt; class. This is so that the engine routes are confined to the engine itself and can be mounted at a specific point as shown in the &lt;a href=&quot;#test-directory&quot;&gt;test directory&lt;/a&gt; section. It also causes the engine's routes to be isolated from those routes that are within the application. The &lt;a href=&quot;#routes&quot;&gt;Routes&lt;/a&gt; section of this guide describes it in detail.</source>
          <target state="translated">ここで、ルートは &lt;code&gt;YourApp::Application&lt;/code&gt; クラスではなく &lt;code&gt;Blorgh::Engine&lt;/code&gt; オブジェクトに描画されていることに注意してください。これは、エンジンルートがエンジン自体に限定され、&lt;a href=&quot;#test-directory&quot;&gt;テストディレクトリ&lt;/a&gt;セクションに示すように特定のポイントにマウントできるようにするためです。また、エンジンのルートがアプリケーション内のルートから分離されます。このガイドの「&lt;a href=&quot;#routes&quot;&gt;ルート」&lt;/a&gt;セクションでは、これについて詳しく説明しています。</target>
        </trans-unit>
        <trans-unit id="24c5cab7750f2ca8837b173b4a826ddf4d2d4cca" translate="yes" xml:space="preserve">
          <source>Note in particular that truncation takes into account the length of the omission string.</source>
          <target state="translated">特に、切り捨ては省略文字列の長さを考慮することに注意してください。</target>
        </trans-unit>
        <trans-unit id="78b28b6681145d5417ac3c0780f932b9f655ecb1" translate="yes" xml:space="preserve">
          <source>Note in the previous example only one key was symbolized.</source>
          <target state="translated">前の例では、1 つのキーのみが記号化されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="2cf0874701acc0cffe506f4241beac6925cd1806" translate="yes" xml:space="preserve">
          <source>Note in the previous example that increments may be negative.</source>
          <target state="translated">前の例では、インクリメントが負の値になる場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e9212787e26354a3c8b4c889cac5d5888c2c0c12" translate="yes" xml:space="preserve">
          <source>Note that &quot;%0d%0a&quot; is URL-encoded for &quot;\r\n&quot; which is a carriage-return and line-feed (CRLF) in Ruby. So the resulting HTTP header for the second example will be the following because the second Location header field overwrites the first.</source>
          <target state="translated">&quot;%0d%0a&quot; は &quot;\r\r\n&quot; 用に URL エンコードされていることに注意してください。したがって、2番目の例の結果のHTTPヘッダは、2番目のLocationヘッダフィールドが1番目を上書きするので、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="c66d170fe2e3fe3157ac0fda9773660aea982fef" translate="yes" xml:space="preserve">
          <source>Note that &amp;ldquo;TRUNCATE&amp;rdquo; is also a MySQL DDL statement!</source>
          <target state="translated">「TRUNCATE」もMySQL DDLステートメントであることに注意してください！</target>
        </trans-unit>
        <trans-unit id="a44c012e2aa14d3cf71de66005ce218c80932da4" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../nestedattributes/classmethods#method-i-accepts_nested_attributes_for&quot;&gt;ActiveRecord::NestedAttributes::ClassMethods#accepts_nested_attributes_for&lt;/a&gt; sets &lt;code&gt;:autosave&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../nestedattributes/classmethods#method-i-accepts_nested_attributes_for&quot;&gt;ActiveRecord :: NestedAttributes :: ClassMethods＃accepts_nested_attributes_for&lt;/a&gt;は &lt;code&gt;:autosave&lt;/code&gt; autosaveを &lt;code&gt;true&lt;/code&gt; に設定することに注意してください。</target>
        </trans-unit>
        <trans-unit id="38923273a1ac5388fdafcc0d052b80b100edca09" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;formbuilder#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt; will automatically generate a hidden field to store the ID of the record. There are circumstances where this hidden field is not needed and you can pass &lt;code&gt;include_id: false&lt;/code&gt; to prevent &lt;a href=&quot;formbuilder#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt; from rendering it automatically.</source>
          <target state="translated">&lt;a href=&quot;formbuilder#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt;は、非表示フィールドを自動的に生成して、レコードのIDを格納することに注意してください。この非表示フィールドが必要ない状況があり、 &lt;code&gt;include_id: false&lt;/code&gt; を&lt;a href=&quot;formbuilder#method-i-fields_for&quot;&gt;渡して#fields_for&lt;/a&gt;が自動的にレンダリングしないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="58fa56f7cb58d6bceba0d8992232bc1ce70dad69" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;formhelper#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt; will automatically generate a hidden field to store the ID of the record. There are circumstances where this hidden field is not needed and you can pass &lt;code&gt;include_id: false&lt;/code&gt; to prevent &lt;a href=&quot;formhelper#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt; from rendering it automatically.</source>
          <target state="translated">&lt;a href=&quot;formhelper#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt;は、非表示フィールドを自動的に生成して、レコードのIDを格納することに注意してください。この非表示フィールドが必要ない状況があり、 &lt;code&gt;include_id: false&lt;/code&gt; を&lt;a href=&quot;formhelper#method-i-fields_for&quot;&gt;渡して#fields_for&lt;/a&gt;が自動的にレンダリングしないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="8d6baf90f202a6f42a23fe78dcfdfc40689608ba" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;https://github.com/guard/listen#issues--limitations&quot;&gt;some setups are unsupported&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/guard/listen#issues--limitations&quot;&gt;一部のセットアップはサポートされていない&lt;/a&gt;ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="73d319a82de5469887e65f4e1b3e5b326d201bb0" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;querymethods#method-i-includes&quot;&gt;includes&lt;/a&gt; works with association names while &lt;a href=&quot;querymethods#method-i-references&quot;&gt;references&lt;/a&gt; needs the actual table name.</source>
          <target state="translated">には実際のテーブル名が必要な&lt;a href=&quot;querymethods#method-i-references&quot;&gt;リファレンス&lt;/a&gt;名が&lt;a href=&quot;querymethods#method-i-includes&quot;&gt;含まれて&lt;/a&gt;いることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d8e687fc1dc77b6bcff094a5807d77a44d345aed" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;schemastatements#method-i-create_join_table&quot;&gt;create_join_table&lt;/a&gt; does not create any indices by default; you can use its block form to do so yourself:</source>
          <target state="translated">&lt;a href=&quot;schemastatements#method-i-create_join_table&quot;&gt;create_join_table&lt;/a&gt;はデフォルトではインデックスを作成しないことに注意してください。そのブロック形式を使用して自分で行うことができます。</target>
        </trans-unit>
        <trans-unit id="7c811d3f55dffacb3921985a1c74934b15a7fe8d" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;:controller&lt;/code&gt;, &lt;code&gt;:action&lt;/code&gt; and &lt;code&gt;:id&lt;/code&gt; are interpreted as URL query parameters and thus available through &lt;code&gt;params&lt;/code&gt; in an action.</source>
          <target state="translated">&lt;code&gt;:controller&lt;/code&gt; 、 &lt;code&gt;:action&lt;/code&gt; 、および &lt;code&gt;:id&lt;/code&gt; はURLクエリパラメータとして解釈されるため、アクションの &lt;code&gt;params&lt;/code&gt; を通じて使用できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="dc3176ed2b3dd187522e4366e6d013975d35837d" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;:dependent&lt;/code&gt; is implemented using Rails' callback system, which works by processing callbacks in order. Therefore, other callbacks declared either before or after the &lt;code&gt;:dependent&lt;/code&gt; option can affect what it does.</source>
          <target state="translated">&lt;code&gt;:dependent&lt;/code&gt; はRailsのコールバックシステムを使用して実装されていることに注意してください。これはコールバックを順番に処理することで機能します。したがって、 &lt;code&gt;:dependent&lt;/code&gt; オプションの前または後に宣言された他のコールバックは、その動作に影響を与える可能性があります。</target>
        </trans-unit>
        <trans-unit id="27ce03a2af56f6db4c7888f2270689c9d52b7eb4" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;:dependent&lt;/code&gt; option is ignored for &lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;has_one&lt;/a&gt;&lt;code&gt;:through&lt;/code&gt; associations.</source>
          <target state="translated">&lt;code&gt;:dependent&lt;/code&gt; オプションは、&lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;has_one &lt;/a&gt; &lt;code&gt;:through&lt;/code&gt; 関連付けでは無視されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="325dbc5769cb675d6be42dbd169dff67360c0183" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;:dependent&lt;/code&gt; option is ignored when using &lt;code&gt;:through&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;:through&lt;/code&gt; オプションを使用 &lt;code&gt;:dependent&lt;/code&gt; 場合、：dependentオプションは無視されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="dc0da45d44e4ef2c4f7a2df800102b6112ec456b" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;:if&lt;/code&gt; has priority over &lt;code&gt;:except&lt;/code&gt; in case they are used together.</source>
          <target state="translated">&lt;code&gt;:if&lt;/code&gt; は、一緒に使用される場合を &lt;code&gt;:except&lt;/code&gt; 、：exceptよりも優先されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7a64c122b47cf95270a43e85eeebf6bb50d00438" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;:only&lt;/code&gt; has priority over &lt;code&gt;:if&lt;/code&gt; in case they are used together.</source>
          <target state="translated">ことを注意 &lt;code&gt;:only&lt;/code&gt; 優先します &lt;code&gt;:if&lt;/code&gt; 場合には、それらを一緒に使用されています。</target>
        </trans-unit>
        <trans-unit id="565db700fe7dd945135cedb2356482108c2bba25" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;ActiveModel::Validations&lt;/code&gt; automatically adds an &lt;code&gt;errors&lt;/code&gt; method to your instances initialized with a new &lt;code&gt;ActiveModel::Errors&lt;/code&gt; object, so there is no need for you to do this manually.</source>
          <target state="translated">注こと &lt;code&gt;ActiveModel::Validations&lt;/code&gt; 自動的に追加されます &lt;code&gt;errors&lt;/code&gt; あなたのインスタンスにメソッドは、新しい使用して初期化 &lt;code&gt;ActiveModel::Errors&lt;/code&gt; オブジェクトなので、手動でこれを行うために必要はありません。</target>
        </trans-unit>
        <trans-unit id="82ddc1fd214cfcde0937046ec7f0683ab8c3bf5c" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;autosave: false&lt;/code&gt; is not same as not declaring &lt;code&gt;:autosave&lt;/code&gt;. When the &lt;code&gt;:autosave&lt;/code&gt; option is not present then new association records are saved but the updated association records are not saved.</source>
          <target state="translated">&lt;code&gt;autosave: false&lt;/code&gt; は &lt;code&gt;:autosave&lt;/code&gt; を宣言しないことと同じではないことに注意してください。とき &lt;code&gt;:autosave&lt;/code&gt; オプションが存在していない、新しい関連レコードが保存されていますが、更新の関連レコードは保存されません。</target>
        </trans-unit>
        <trans-unit id="c8d80f72f917064aa72f4120b7e0525fbac8be68" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;classify&lt;/code&gt; returns a class name as a string. You can get the actual class object invoking &lt;code&gt;constantize&lt;/code&gt; on it, explained next.</source>
          <target state="translated">&lt;code&gt;classify&lt;/code&gt; はクラス名を文字列として返すことに注意してください。次に説明する、 &lt;code&gt;constantize&lt;/code&gt; を呼び出す実際のクラスオブジェクトを取得できます。</target>
        </trans-unit>
        <trans-unit id="c6c01f02771dd2025c81366f7b4ab305fdcf9eff" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;connected_to&lt;/code&gt; with a role will look up an existing connection and switch using the connection specification name. This means that if you pass an unknown role like &lt;code&gt;connected_to(role: :nonexistent)&lt;/code&gt; you will get an error that says &lt;code&gt;ActiveRecord::ConnectionNotEstablished (No connection pool with 'AnimalsBase' found
for the 'nonexistent' role.)&lt;/code&gt;</source>
          <target state="translated">ことを注意 &lt;code&gt;connected_to&lt;/code&gt; 役割を持つが、接続仕様の名前を使用して既存の接続とスイッチを検索します。これは、 &lt;code&gt;connected_to(role: :nonexistent)&lt;/code&gt; &lt;code&gt;ActiveRecord::ConnectionNotEstablished (No connection pool with 'AnimalsBase' found for the 'nonexistent' role.)&lt;/code&gt; ）のような不明なロールを渡すと、ActiveRecord :: ConnectionNotEstablished（「nonexistent」ロールに「AnimalsBase」の接続プールが見つからない）を示すエラーが発生することを意味します。</target>
        </trans-unit>
        <trans-unit id="d25a94880736f451c356dfd25b8f9700646689b1" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;content_for&lt;/code&gt; concatenates (default) the blocks it is given for a particular identifier in order. For example:</source>
          <target state="translated">&lt;code&gt;content_for&lt;/code&gt; は、特定の識別子に対して指定されたブロックを順番に連結（デフォルト）することに注意してください。例えば：</target>
        </trans-unit>
        <trans-unit id="f709bc03cc9989b690018bd7796015bd85e42d21" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;deliver_later&lt;/code&gt; will execute your method from the background job.</source>
          <target state="translated">&lt;code&gt;deliver_later&lt;/code&gt; はバックグラウンドジョブからメソッドを実行することに注意してください。</target>
        </trans-unit>
        <trans-unit id="ace384731e2681d12d2903467f1e2b7abe234a6d" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;reverse_update&lt;/code&gt; has no bang.</source>
          <target state="translated">&lt;code&gt;reverse_update&lt;/code&gt; には強打がないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="6d41aeffaefbf99cbff2faf9bf36f1aca03dbce1" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;save&lt;/code&gt; also has the ability to skip validations if passed &lt;code&gt;validate:
false&lt;/code&gt; as an argument. This technique should be used with caution.</source>
          <target state="translated">注 &lt;code&gt;save&lt;/code&gt; もが渡された場合の検証をスキップする機能がある &lt;code&gt;validate: false&lt;/code&gt; 引数として。この手法は注意して使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="5f9f6fa6da45470fd512ddf42d74032a3e93aecc" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;touch&lt;/code&gt; must be used on a persisted object, or else an &lt;a href=&quot;activerecorderror&quot;&gt;ActiveRecordError&lt;/a&gt; will be thrown. For example:</source>
          <target state="translated">永続化オブジェクトで &lt;code&gt;touch&lt;/code&gt; を使用する必要があります。そうしないと、&lt;a href=&quot;activerecorderror&quot;&gt;ActiveRecordError&lt;/a&gt;がスローされます。例えば：</target>
        </trans-unit>
        <trans-unit id="b9543a285676c6581ed0cdcd17dc85dccd1e4f6a" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;try&lt;/code&gt; will swallow no-method errors, returning nil instead. If you want to protect against typos, use &lt;code&gt;try!&lt;/code&gt; instead:</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; はメソッドのないエラーを飲み込み、代わりにnilを返すことに注意してください。タイプミスから保護したい場合は、 &lt;code&gt;try!&lt;/code&gt; 使用してください！代わりに：</target>
        </trans-unit>
        <trans-unit id="723edf597c0f2c3bfba4a36a28e7ff66ad9453dc" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;where(...)&lt;/code&gt; returns a relation, not an array like the old finders. If you require an &lt;code&gt;Array&lt;/code&gt;, use &lt;code&gt;where(...).to_a&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;where(...)&lt;/code&gt; がリレーションを返すことに注意してください。古いファインダーのような配列ではありません。 &lt;code&gt;Array&lt;/code&gt; が必要な場合は、 &lt;code&gt;where(...).to_a&lt;/code&gt; 使用してください。</target>
        </trans-unit>
        <trans-unit id="89aeb743b6e9b920399d003494bf2bc2791d70d4" translate="yes" xml:space="preserve">
          <source>Note that &lt;em&gt;cross-site scripting (XSS) vulnerabilities bypass all CSRF protections&lt;/em&gt;. XSS gives the attacker access to all elements on a page, so they can read the CSRF security token from a form or directly submit the form. Read &lt;a href=&quot;#cross-site-scripting-xss&quot;&gt;more about XSS&lt;/a&gt; later.</source>
          <target state="translated">&lt;em&gt;クロスサイトスクリプティング（XSS）の脆弱性はすべてのCSRF保護を回避する&lt;/em&gt;ことに注意してください。XSSにより、攻撃者はページ上のすべての要素にアクセスできるため、フォームからCSRFセキュリティトークンを読み取るか、フォームを直接送信できます。&lt;a href=&quot;#cross-site-scripting-xss&quot;&gt;XSSの詳細については&lt;/a&gt;後でお読みください。</target>
        </trans-unit>
        <trans-unit id="7947c734a16dab7b02f65f3261e5ec81aacc1fd7" translate="yes" xml:space="preserve">
          <source>Note that Active Record models will automatically detect their primary key. This can be avoided by using &lt;a href=&quot;../attributemethods/primarykey/classmethods#method-i-primary_key-3D&quot;&gt;self.primary_key=&lt;/a&gt; on the model to define the key explicitly.</source>
          <target state="translated">Active Recordモデルは自動的に主キーを検出することに注意してください。これは、モデルで&lt;a href=&quot;../attributemethods/primarykey/classmethods#method-i-primary_key-3D&quot;&gt;self.primary_key =&lt;/a&gt;を使用してキーを明示的に定義することで回避できます。</target>
        </trans-unit>
        <trans-unit id="22356cd337b0c6c9dab8adae88cbd559bed7ad97" translate="yes" xml:space="preserve">
          <source>Note that an &quot;around&quot; filter also wraps rendering. In particular, if in the example above, the view itself reads from the database (e.g. via a scope), it will do so within the transaction and thus present the data to preview.</source>
          <target state="translated">around」フィルタはレンダリングもラップすることに注意してください。特に、上の例では、ビュー自身がデータベースから読み込んでいる場合 (スコープを介してなど)、トランザクション内で読み込んでいるため、プレビューにデータを表示することになります。</target>
        </trans-unit>
        <trans-unit id="33c38c998a3ea7a672e44bb1c497e9aae87c43e8" translate="yes" xml:space="preserve">
          <source>Note that an object instantiated with &lt;code&gt;new&lt;/code&gt; will not report errors even if it's technically invalid, because validations are automatically run only when the object is saved, such as with the &lt;code&gt;create&lt;/code&gt; or &lt;code&gt;save&lt;/code&gt; methods.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; でインスタンス化されたオブジェクトは、たとえそれが技術的に無効であってもエラーを報告しないことに注意してください。検証は &lt;code&gt;create&lt;/code&gt; または &lt;code&gt;save&lt;/code&gt; メソッドなどでオブジェクトが保存されたときにのみ自動的に実行されるためです。</target>
        </trans-unit>
        <trans-unit id="6f1c15a9adf9cf7aefea6b6a4f52f3bdd59c79b7" translate="yes" xml:space="preserve">
          <source>Note that anything marked as an identifier will automatically create a delegate by the same name on any channel instances created off the connection.</source>
          <target state="translated">識別子としてマークされているものは、接続から離れて作成されたチャンネルインスタンスに同名のデリゲートが自動的に作成されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5cf442486084fb72e4ad77056cb08bfbaed774fb" translate="yes" xml:space="preserve">
          <source>Note that appending directly to &lt;code&gt;I18n.load_paths&lt;/code&gt; instead of to the application's configured i18n will &lt;em&gt;not&lt;/em&gt; override translations from external gems.</source>
          <target state="translated">アプリケーションの構成済みのi18nではなく &lt;code&gt;I18n.load_paths&lt;/code&gt; に直接追加しても、外部gemからの変換&lt;em&gt;は&lt;/em&gt;オーバーライドされ&lt;em&gt;ない&lt;/em&gt;ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="46a4821ec5868bd38360ccd2974f3d24f5c11f98" translate="yes" xml:space="preserve">
          <source>Note that basic authentication is insecure over unencrypted HTTP. An attacker that intercepts cleartext requests to the Postmark ingress can learn its password. You should only use the Postmark ingress over HTTPS.</source>
          <target state="translated">基本的な認証は暗号化されていないHTTPでは安全ではないことに注意してください。Postmark ingressへのクリアテキスト要求を傍受した攻撃者は、そのパスワードを知ることができます。Postmark ingress は HTTPS 上でのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="5374749430d739cb1e5e2cfb76a02f30988ae462" translate="yes" xml:space="preserve">
          <source>Note that basic authentication is insecure over unencrypted HTTP. An attacker that intercepts cleartext requests to the SendGrid ingress can learn its password. You should only use the SendGrid ingress over HTTPS.</source>
          <target state="translated">基本的な認証は暗号化されていない HTTP 上では安全ではないことに注意してください。SendGrid ingress へのクリアテキスト要求を傍受した攻撃者は、そのパスワードを知ることができます。SendGrid ingress は HTTPS 上でのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="57ec50d8410464d568b5c05fc066b0c1779894de" translate="yes" xml:space="preserve">
          <source>Note that basic authentication is insecure over unencrypted HTTP. An attacker that intercepts cleartext requests to the ingress can learn its password. You should only use this ingress over HTTPS.</source>
          <target state="translated">基本的な認証は、暗号化されていない HTTP 上では安全ではないことに注意してください。ingress へのクリアテキスト要求を傍受した攻撃者は、そのパスワードを知ることができます。このイングレスは HTTPS 上でのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="78dbd1cc164b82b4dcb8b006687d565c7961a7a4" translate="yes" xml:space="preserve">
          <source>Note that being unreachable does not imply being anonymous:</source>
          <target state="translated">連絡が取れないということは、匿名であることを意味しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="e8d3ecb667ba792a097afde3710779d973b5d3cf" translate="yes" xml:space="preserve">
          <source>Note that building your own string from user input may expose your application to injection attacks if not done properly. As an alternative, it is recommended to use one of the following methods.</source>
          <target state="translated">ユーザー入力から独自の文字列を構築することは、適切に行われていない場合、アプリケーションがインジェクション攻撃にさらされる可能性があることに注意してください。代替手段として、以下のいずれかの方法を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="88c3e83adab9320795c50aab4d553ec7f849c321" translate="yes" xml:space="preserve">
          <source>Note that changing your secret_key_base will invalidate all existing session. Additionally, you should take care to make sure you are not relying on the ability to decode signed cookies generated by your app in external applications or JavaScript before changing it.</source>
          <target state="translated">secret_key_baseを変更すると、既存のすべてのセッションが無効になることに注意してください。さらに、変更する前に、外部アプリケーションやJavaScriptでアプリが生成した署名付きCookieをデコードする機能に依存していないことを確認するように注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="6df0738b3ba5e7544dc16135160c562824d55adc" translate="yes" xml:space="preserve">
          <source>Note that checking for uniqueness using something like &lt;code&gt;include?&lt;/code&gt; is subject to race conditions. Do not attempt to use &lt;code&gt;include?&lt;/code&gt; to enforce distinctness in an association. For instance, using the article example from above, the following code would be racy because multiple users could be attempting this at the same time:</source>
          <target state="translated">&lt;code&gt;include?&lt;/code&gt; ようなものを使用して一意性をチェックすることに注意してください？競合状態の影響を受けます。 &lt;code&gt;include?&lt;/code&gt; を使用しないでください。関連付けを明確にするため。たとえば、上記の記事の例を使用すると、複数のユーザーが同時にこれを試みる可能性があるため、次のコードは際どいものになります。</target>
        </trans-unit>
        <trans-unit id="ae15203738a3a52937b4eae19c6cd23f7d2a5d67" translate="yes" xml:space="preserve">
          <source>Note that core extensions define &lt;code&gt;Hash#with_indifferent_access&lt;/code&gt;:</source>
          <target state="translated">コア拡張が &lt;code&gt;Hash#with_indifferent_access&lt;/code&gt; を定義していることに注意してください：</target>
        </trans-unit>
        <trans-unit id="aab3b21d54b61763e1564b0cc5ab99fbc9bfb2e4" translate="yes" xml:space="preserve">
          <source>Note that if a query matches multiple records, &lt;code&gt;find_by&lt;/code&gt; will fetch only the first one and ignore the others (see the &lt;code&gt;LIMIT 1&lt;/code&gt; statement above).</source>
          <target state="translated">クエリが複数のレコードに一致する場合、 &lt;code&gt;find_by&lt;/code&gt; は最初のレコードのみをフェッチし、他のレコードは無視します（上記の &lt;code&gt;LIMIT 1&lt;/code&gt; ステートメントを参照）。</target>
        </trans-unit>
        <trans-unit id="4f44b8fe38600ce94c3eb35df237f1de437ac4de" translate="yes" xml:space="preserve">
          <source>Note that if the target is not &lt;code&gt;nil&lt;/code&gt; then the call is attempted regardless of the &lt;code&gt;:allow_nil&lt;/code&gt; option, and thus an exception is still raised if said object does not respond to the method:</source>
          <target state="translated">ターゲットが &lt;code&gt;nil&lt;/code&gt; でない場合は、 &lt;code&gt;:allow_nil&lt;/code&gt; オプションに関係なく呼び出しが試行されるため、上記のオブジェクトがメソッドに応答しない場合でも例外が発生します。</target>
        </trans-unit>
        <trans-unit id="b72ef2b72c287b15edb8d7e8e3522050aa85ca8a" translate="yes" xml:space="preserve">
          <source>Note that if you do not specify the &lt;code&gt;:inverse_of&lt;/code&gt; option, then Active Record will try to automatically guess the inverse association based on heuristics.</source>
          <target state="translated">&lt;code&gt;:inverse_of&lt;/code&gt; オプションを指定しない場合、アクティブレコードはヒューリスティックに基づいて逆関連付けを自動的に推測しようとします。</target>
        </trans-unit>
        <trans-unit id="5dbde3470700eeb4eeaddf252a725a2d26c26cf8" translate="yes" xml:space="preserve">
          <source>Note that if you return a path without a leading slash then the URL is prefixed with the current SCRIPT_NAME environment variable. This is typically '/' but may be different in a mounted engine or where the application is deployed to a subdirectory of a website.</source>
          <target state="translated">先頭にスラッシュのないパスを返した場合、URLの先頭には現在の環境変数SCRIPT_NAMEが付くことに注意してください。これは通常'/'ですが、マウントされたエンジンやアプリケーションがウェブサイトのサブディレクトリにデプロイされている場合は異なるかもしれません。</target>
        </trans-unit>
        <trans-unit id="c61f8e19cb72840c59ad034d835c6608ba8ae691" translate="yes" xml:space="preserve">
          <source>Note that if you use &lt;code&gt;permit&lt;/code&gt; in a key that points to a hash, it won't allow all the hash. You also need to specify which attributes inside the hash should be permitted.</source>
          <target state="translated">ハッシュを指すキーで &lt;code&gt;permit&lt;/code&gt; を使用すると、すべてのハッシュが許可されないことに注意してください。また、ハッシュ内のどの属性を許可するかを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="1fc227d776d965752397dbfd3f1acdf5bc6a2ed1" translate="yes" xml:space="preserve">
          <source>Note that if you want to immediately require dependencies when the engine is required, you should require them before the engine's initialization. For example:</source>
          <target state="translated">エンジンが必要になったときにすぐに依存関係を要求したい場合は、エンジンの初期化前に依存関係を要求する必要があることに注意してください。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="aa297c0fe95f42b1a1cac85dbe866912a193d048" translate="yes" xml:space="preserve">
          <source>Note that in that case &lt;code&gt;module_parent&lt;/code&gt; returns &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">その場合、 &lt;code&gt;module_parent&lt;/code&gt; は &lt;code&gt;Object&lt;/code&gt; を返すことに注意してください。</target>
        </trans-unit>
        <trans-unit id="01b4e173af86d46b015dbb7131d2e90d6a871b4b" translate="yes" xml:space="preserve">
          <source>Note that in that case &lt;code&gt;module_parent_name&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">その場合、 &lt;code&gt;module_parent_name&lt;/code&gt; は &lt;code&gt;nil&lt;/code&gt; を返すことに注意してください。</target>
        </trans-unit>
        <trans-unit id="29d18aa10fe13a77b68f28afe44d33a98a83b983" translate="yes" xml:space="preserve">
          <source>Note that in the above example, to disallow the creation of a plain &lt;code&gt;Polygon&lt;/code&gt;, you should use &lt;code&gt;validates :type, presence:
true&lt;/code&gt;, instead of setting it as an abstract class. This way, &lt;code&gt;Polygon&lt;/code&gt; will stay in the hierarchy, and Active Record will continue to correctly derive the table name.</source>
          <target state="translated">上記の例では、プレーンな &lt;code&gt;Polygon&lt;/code&gt; の作成を禁止するには、抽象クラスとして設定する代わりに &lt;code&gt;validates :type, presence: true&lt;/code&gt; を使用する必要があります。このようにして、 &lt;code&gt;Polygon&lt;/code&gt; は階層内にとどまり、Active Recordは引き続きテーブル名を正しく導き出します。</target>
        </trans-unit>
        <trans-unit id="37ee3be5d2ed36a645c1e37b3a6a3854e08fb2cc" translate="yes" xml:space="preserve">
          <source>Note that interceptors need to be registered both with &lt;code&gt;register_interceptor&lt;/code&gt; and &lt;code&gt;register_preview_interceptor&lt;/code&gt; if they should operate on both sending and previewing emails.</source>
          <target state="translated">インターセプタは、との両方を登録する必要があることに注意 &lt;code&gt;register_interceptor&lt;/code&gt; と &lt;code&gt;register_preview_interceptor&lt;/code&gt; 彼らは両方の送信とプレビュー電子メールを操作する必要がある場合。</target>
        </trans-unit>
        <trans-unit id="e002c10e961f1c824fc07296b73d779cf5dde89f" translate="yes" xml:space="preserve">
          <source>Note that it also means that associations marked for destruction won't be destroyed directly. They will however still be marked for destruction.</source>
          <target state="translated">これは、破壊のためにマークされた関連付けが直接破壊されないことも意味していることに注意してください。しかし、それらはまだ破壊のためにマークされています。</target>
        </trans-unit>
        <trans-unit id="f3a0409f0e1222b726a5d13c3e9b75b2f1cb2598" translate="yes" xml:space="preserve">
          <source>Note that it handles both ASCII and Unicode whitespace.</source>
          <target state="translated">ASCII と Unicode の両方のホワイトスペースを扱うことに注意してください。</target>
        </trans-unit>
        <trans-unit id="072cbc6561b444de9cb58baa2b73bc9a7f982077" translate="yes" xml:space="preserve">
          <source>Note that it is also possible to assign a flash message as part of the redirection. You can assign &lt;code&gt;:notice&lt;/code&gt;, &lt;code&gt;:alert&lt;/code&gt; or the general purpose &lt;code&gt;:flash&lt;/code&gt;:</source>
          <target state="translated">リダイレクトの一部としてフラッシュメッセージを割り当てることもできます。 &lt;code&gt;:notice&lt;/code&gt; 、 &lt;code&gt;:alert&lt;/code&gt; 、または汎用の &lt;code&gt;:flash&lt;/code&gt; を割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="dcc3e916a86372cb28ffccd804eefdd6ebdbdcff" translate="yes" xml:space="preserve">
          <source>Note that it's still possible to generate a race condition in the database in the same way that &lt;a href=&quot;../validations/classmethods#method-i-validates_uniqueness_of&quot;&gt;validates_uniqueness_of&lt;/a&gt; can. You're encouraged to add a unique index in the database to deal with this even more unlikely scenario.</source>
          <target state="translated">&lt;a href=&quot;../validations/classmethods#method-i-validates_uniqueness_of&quot;&gt;validates_uniqueness_of&lt;/a&gt;ができるのと同じ方法でデータベースに競合状態を生成することがまだ可能であることに注意してください。このようなシナリオに対処するために、データベースに一意のインデックスを追加することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="1cce95eb30e93b5a6838836fe15a98374b38e1be" translate="yes" xml:space="preserve">
          <source>Note that keys are treated differently than &lt;a href=&quot;activesupport/hashwithindifferentaccess&quot;&gt;HashWithIndifferentAccess&lt;/a&gt;, meaning that string and symbol keys will not match.</source>
          <target state="translated">キーは&lt;a href=&quot;activesupport/hashwithindifferentaccess&quot;&gt;HashWithIndifferentAccessと&lt;/a&gt;は異なる方法で処理されることに注意してください。つまり、文字列キーとシンボルキーは一致しません。</target>
        </trans-unit>
        <trans-unit id="ad94e60a7f2b7c1f49651af5196003959035f01b" translate="yes" xml:space="preserve">
          <source>Note that negative CAPTCHAs are only effective against dumb bots and won't suffice to protect critical applications from targeted bots. Still, the negative and positive CAPTCHAs can be combined to increase the performance, e.g., if the &quot;honeypot&quot; field is not empty (bot detected), you won't need to verify the positive CAPTCHA, which would require an HTTPS request to Google ReCaptcha before computing the response.</source>
          <target state="translated">否定的な CAPTCHA は間抜けなボットに対してのみ有効であり、標的とされたボットから重要なアプリケーションを保護するには不十分であることに注意してください。例えば、&quot;honeypot &quot;フィールドが空でない場合(ボットが検出された場合)は、正のCAPTCHAを検証する必要はありませんが、レスポンスを計算する前にGoogle ReCaptchaへのHTTPSリクエストが必要になります。</target>
        </trans-unit>
        <trans-unit id="b604cb6faa93098b0d6c2b2506cc1683cb7ae6ca" translate="yes" xml:space="preserve">
          <source>Note that new records are different from any other record by definition, unless the other record is the receiver itself. Besides, if you fetch existing records with &lt;code&gt;select&lt;/code&gt; and leave the ID out, you're on your own, this predicate will return false.</source>
          <target state="translated">他のレコードがレシーバー自体でない限り、新しいレコードは他のレコードと定義上異なることに注意してください。さらに、 &lt;code&gt;select&lt;/code&gt; を使用して既存のレコードをフェッチし、IDを省略した場合は、自分自身でこの述語はfalseを返します。</target>
        </trans-unit>
        <trans-unit id="22c983e77149090556408a4b167a572de601b14a" translate="yes" xml:space="preserve">
          <source>Note that now there can be more than one router in your application, and it's better to avoid passing requests through many routers. Consider this situation:</source>
          <target state="translated">現在、アプリケーションには複数のルータが存在する可能性があり、多くのルータにリクエストを渡すのは避けた方が良いということに注意してください。このような状況を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="bb19839e635e04134fc7b559e09ccea24da6e26b" translate="yes" xml:space="preserve">
          <source>Note that numbers are not mentioned. In particular, 0 and 0.0 are &lt;strong&gt;not&lt;/strong&gt; blank.</source>
          <target state="translated">数字は記載されていないことに注意してください。特に、0と0.0は空白ではあり&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="a7419129c6af853c63a695a7e5692fb54165cfa7" translate="yes" xml:space="preserve">
          <source>Note that partials are not supported to be rendered with streaming, so in such cases, we just wrap them in an array.</source>
          <target state="translated">部分要素はストリーミングでのレンダリングには対応していないので、そのような場合は配列でラップすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ae24f5949134ca75ea07bd1f7b2e67eacecdb162" translate="yes" xml:space="preserve">
          <source>Note that passing custom disallowed types will override the default types, which are Symbol and YAML.</source>
          <target state="translated">カスタムの許可されない型を渡すと、デフォルトの型であるSymbolとYAMLをオーバーライドすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b84d9529ac53faf44afee2779503602281d1a9c0" translate="yes" xml:space="preserve">
          <source>Note that running the &lt;code&gt;db:migrate&lt;/code&gt; command also invokes the &lt;code&gt;db:schema:dump&lt;/code&gt; command, which will update your &lt;code&gt;db/schema.rb&lt;/code&gt; file to match the structure of your database.</source>
          <target state="translated">&lt;code&gt;db:migrate&lt;/code&gt; コマンドを実行すると、 &lt;code&gt;db:schema:dump&lt;/code&gt; コマンドも呼び出され、 &lt;code&gt;db/schema.rb&lt;/code&gt; ファイルがデータベースの構造と一致するように更新されます。</target>
        </trans-unit>
        <trans-unit id="41ece01fe72a7508a1b0c964b1a65ee164b23bb9" translate="yes" xml:space="preserve">
          <source>Note that setting the UUID primary key default value to &lt;code&gt;nil&lt;/code&gt; will require you to assure that you always provide a UUID value before saving a record (as primary keys cannot be &lt;code&gt;nil&lt;/code&gt;). This might be done via the &lt;code&gt;SecureRandom.uuid&lt;/code&gt; method and a &lt;code&gt;before_save&lt;/code&gt; callback, for instance.</source>
          <target state="translated">UUID主キーのデフォルト値を &lt;code&gt;nil&lt;/code&gt; に設定すると、レコードを保存する前に必ずUUID値を提供する必要があることに注意してください（主キーは &lt;code&gt;nil&lt;/code&gt; にできないため）。これは、 &lt;code&gt;before_save&lt;/code&gt; 、 &lt;code&gt;SecureRandom.uuid&lt;/code&gt; メソッドとbefore_saveコールバックを介して行うことができます。</target>
        </trans-unit>
        <trans-unit id="289fcb6dd0c2e250498b73e7a017f254410a24ff" translate="yes" xml:space="preserve">
          <source>Note that some databases are configured to perform case-insensitive searches anyway.</source>
          <target state="translated">いくつかのデータベースは、いずれにせよ大文字小文字を区別しない検索を実行するように設定されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="350f976200592f01983e5260d34b1c6c064ed87c" translate="yes" xml:space="preserve">
          <source>Note that some of the migrations may be skipped if a migration with the same name already exists in application. In such a situation you must decide whether to leave that migration or rename the migration in the application and rerun copying migrations.</source>
          <target state="translated">同じ名前のマイグレーションがアプリケーションに既に存在する場合、一部のマイグレーションはスキップされる可能性があることに注意してください。このような状況では、そのマイグレーションを残すか、アプリケーション内のマイグレーションの名前を変更して、マイグレーションのコピーを再実行するかを決定する必要があります。</target>
        </trans-unit>
        <trans-unit id="56eed9c041b6163206a5e9b6cdce438725ed6596" translate="yes" xml:space="preserve">
          <source>Note that the +do end+ syntax for the redirect block wouldn't work, as Ruby would pass the block to &lt;code&gt;get&lt;/code&gt; instead of &lt;code&gt;redirect&lt;/code&gt;. Use &lt;code&gt;{ ... }&lt;/code&gt; instead.</source>
          <target state="translated">Rubyが &lt;code&gt;redirect&lt;/code&gt; の代わりに &lt;code&gt;get&lt;/code&gt; するブロックを渡すため、リダイレクトブロックの+ do end +構文は機能しないことに注意してください。代わりに &lt;code&gt;{ ... }&lt;/code&gt; 使用してください。</target>
        </trans-unit>
        <trans-unit id="0b42c6a4a4341fd9958532c716f1eb5ee92beecb" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;:as&lt;/code&gt; option given to mount takes the &lt;code&gt;engine_name&lt;/code&gt; as default, so most of the time you can simply omit it.</source>
          <target state="translated">mountに指定さ &lt;code&gt;:as&lt;/code&gt; た：asオプションは &lt;code&gt;engine_name&lt;/code&gt; をデフォルトとして使用するため、ほとんどの場合、省略できます。</target>
        </trans-unit>
        <trans-unit id="7a468e9d4e4a4f9bded222303b80c21107fd3a82" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;:autosave&lt;/code&gt; option is automatically enabled on every association that &lt;a href=&quot;classmethods#method-i-accepts_nested_attributes_for&quot;&gt;#accepts_nested_attributes_for&lt;/a&gt; is used for.</source>
          <target state="translated">&lt;code&gt;:autosave&lt;/code&gt; &lt;a href=&quot;classmethods#method-i-accepts_nested_attributes_for&quot;&gt;autosave&lt;/a&gt;オプションは、＃accepts_nested_attributes_forが使用されるすべての関連付けで自動的に有効になることに注意してください。</target>
        </trans-unit>
        <trans-unit id="a9f9248fbb6cde034e039397fee13f9a82a3513e" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;projects_attributes=&lt;/code&gt; writer method is in fact required for &lt;a href=&quot;formbuilder#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt; to correctly identify &lt;code&gt;:projects&lt;/code&gt; as a collection, and the correct indices to be set in the form markup.</source>
          <target state="translated">ことを注意 &lt;code&gt;projects_attributes=&lt;/code&gt; ライターの方法は、実際に要求される&lt;a href=&quot;formbuilder#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt;正しく識別するために &lt;code&gt;:projects&lt;/code&gt; のコレクションとして、フォームのマークアップに設定する正しい指標。</target>
        </trans-unit>
        <trans-unit id="bba717142b3857ce76f41cd84a25f35a3e8fb25a" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;projects_attributes=&lt;/code&gt; writer method is in fact required for &lt;a href=&quot;formhelper#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt; to correctly identify &lt;code&gt;:projects&lt;/code&gt; as a collection, and the correct indices to be set in the form markup.</source>
          <target state="translated">ことを注意 &lt;code&gt;projects_attributes=&lt;/code&gt; ライターの方法は、実際に要求される&lt;a href=&quot;formhelper#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt;正しく識別するために &lt;code&gt;:projects&lt;/code&gt; のコレクションとして、フォームのマークアップに設定する正しい指標。</target>
        </trans-unit>
        <trans-unit id="68fe7c790c83e9c2b8372df6432ade06d4a90302" translate="yes" xml:space="preserve">
          <source>Note that the MD5 is taken of the entire template file, not just what's within the cache do/end call. So it's possible that changing something outside of that call will still expire the cache.</source>
          <target state="translated">MD5 はキャッシュの do/end 呼び出しの中だけではなく、テンプレートファイル全体から取得されることに注意してください。そのため、その呼び出しの外で何かを変更してもキャッシュは有効期限切れになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="a9d218f2ca0876e04a64af92cc587d9b53ea48ef" translate="yes" xml:space="preserve">
          <source>Note that the above code is database-agnostic: it will run in MySQL, PostgreSQL, Oracle, and others. You can learn more about migrations in the &lt;a href=&quot;active_record_migrations&quot;&gt;Active Record Migrations guide&lt;/a&gt;.</source>
          <target state="translated">上記のコードはデータベースに依存しないことに注意してください。MySQL、PostgreSQL、Oracleなどで実行されます。移行の詳細については、&lt;a href=&quot;active_record_migrations&quot;&gt;アクティブレコードの移行ガイド&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="71620954de70d1be268160bad4cd86ec4e084773" translate="yes" xml:space="preserve">
          <source>Note that the closing tag cannot be of the style &lt;code&gt;-%&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">終了タグのスタイルを &lt;code&gt;-%&amp;gt;&lt;/code&gt; にすることはできません。</target>
        </trans-unit>
        <trans-unit id="686dd5a3681eb94aa1b29e89f703ca327c41ee3d" translate="yes" xml:space="preserve">
          <source>Note that the default error messages are plural (e.g., &quot;is too short (minimum is %{count} characters)&quot;). For this reason, when &lt;code&gt;:minimum&lt;/code&gt; is 1 you should provide a personalized message or use &lt;code&gt;presence: true&lt;/code&gt; instead. When &lt;code&gt;:in&lt;/code&gt; or &lt;code&gt;:within&lt;/code&gt; have a lower limit of 1, you should either provide a personalized message or call &lt;code&gt;presence&lt;/code&gt; prior to &lt;code&gt;length&lt;/code&gt;.</source>
          <target state="translated">デフォルトのエラーメッセージは複数形であることに注意してください（たとえば、「短すぎる（最小は％{count}文字）」）。このため、 &lt;code&gt;:minimum&lt;/code&gt; が1の場合は、パーソナライズされたメッセージを提供するか、代わりに &lt;code&gt;presence: true&lt;/code&gt; 使用する必要があります。とき &lt;code&gt;:in&lt;/code&gt; か &lt;code&gt;:within&lt;/code&gt; 1の下限を持っている、あなたはどちらかのパーソナライズされたメッセージや通話提供しなければならない &lt;code&gt;presence&lt;/code&gt; に先立って &lt;code&gt;length&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f1f0fde9874f69ccb2896442786f865a18ee23ff" translate="yes" xml:space="preserve">
          <source>Note that the endpoint, default values, and submit button label are tailored for &lt;code&gt;@person&lt;/code&gt;. That works that way because the involved helpers know whether the resource is a new record or not, and generate HTML accordingly.</source>
          <target state="translated">エンドポイント、デフォルト値、送信ボタンのラベルは &lt;code&gt;@person&lt;/code&gt; に合わせて調整されていることに注意してください。関係するヘルパーがリソースが新しいレコードであるかどうかを認識し、それに応じてHTMLを生成するため、これはそのように機能します。</target>
        </trans-unit>
        <trans-unit id="88b5d730eba76cc27fd97c8d6e638a4e37441c7b" translate="yes" xml:space="preserve">
          <source>Note that the filter in this case uses &lt;code&gt;send&lt;/code&gt; because the &lt;code&gt;logged_in?&lt;/code&gt; method is private and the filter does not run in the scope of the controller. This is not the recommended way to implement this particular filter, but in more simple cases it might be useful.</source>
          <target state="translated">この場合の用途でのフィルタがいることを注意 &lt;code&gt;send&lt;/code&gt; ため &lt;code&gt;logged_in?&lt;/code&gt; メソッドはプライベートであり、フィルターはコントローラーのスコープでは実行されません。これは、この特定のフィルターを実装するための推奨される方法ではありませんが、より単純なケースでは役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="ec7678e438c40cc3477299adc32378f068a1ddef" translate="yes" xml:space="preserve">
          <source>Note that the implicit render done by ActionController detects if &lt;code&gt;render&lt;/code&gt; has been called, so the following will work without errors:</source>
          <target state="translated">ActionControllerによって行われる暗黙的なレンダリングは、 &lt;code&gt;render&lt;/code&gt; が呼び出されたかどうかを検出するため、次のコードはエラーなしで機能します。</target>
        </trans-unit>
        <trans-unit id="be5be3e7764ae5644163769bf7cfc5d6fd2d1a1e" translate="yes" xml:space="preserve">
          <source>Note that the model is &lt;em&gt;not&lt;/em&gt; yet removed from the database:</source>
          <target state="translated">モデルはまだデータベースから削除されて&lt;em&gt;いない&lt;/em&gt;ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="954907bb7af2f55cb897a52cdad3e0923f08a201" translate="yes" xml:space="preserve">
          <source>Note that the model will &lt;em&gt;not&lt;/em&gt; be destroyed until the parent is saved.</source>
          <target state="translated">親が保存されるまで、モデルは破棄され&lt;em&gt;ない&lt;/em&gt;ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="02a01b211c29bd75de844342e9c04d4a40fbfccc" translate="yes" xml:space="preserve">
          <source>Note that the partial layout has access to the local &lt;code&gt;article&lt;/code&gt; variable that was passed into the &lt;code&gt;render&lt;/code&gt; call. However, unlike application-wide layouts, partial layouts still have the underscore prefix.</source>
          <target state="translated">部分レイアウトは、 &lt;code&gt;render&lt;/code&gt; コールに渡されたローカル &lt;code&gt;article&lt;/code&gt; 変数にアクセスできることに注意してください。ただし、アプリケーション全体のレイアウトとは異なり、部分レイアウトにはアンダースコアのプレフィックスが付いています。</target>
        </trans-unit>
        <trans-unit id="4c3e84c4e2bb503561ce5906bf724d8b22651774" translate="yes" xml:space="preserve">
          <source>Note that the prefix takes scopes into account as well, so relations between &lt;code&gt;Catalog::Category&lt;/code&gt; and &lt;code&gt;Catalog::Product&lt;/code&gt; or &lt;code&gt;Catalog::Category&lt;/code&gt; and &lt;code&gt;CatalogProduct&lt;/code&gt; need to be updated similarly.</source>
          <target state="translated">プレフィックスではスコープも考慮されるため、 &lt;code&gt;Catalog::Category&lt;/code&gt; と &lt;code&gt;Catalog::Product&lt;/code&gt; または &lt;code&gt;Catalog::Category&lt;/code&gt; と &lt;code&gt;CatalogProduct&lt;/code&gt; の関係も同様に更新する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3f0b56e9abd80e969b8d26b5222d80ad053541d7" translate="yes" xml:space="preserve">
          <source>Note that the proc/lambda is evaluated right at the start of the mail message generation, so if you set something in the default hash using a proc, and then set the same thing inside of your mailer method, it will get overwritten by the mailer method.</source>
          <target state="translated">proc/lambdaはメールメッセージ生成の開始直後に評価されるので、procを使ってデフォルトのハッシュに何かを設定し、メーラーメソッド内で同じものを設定すると、メーラーメソッドで上書きされてしまうことに注意してください。</target>
        </trans-unit>
        <trans-unit id="35d1d39da63c97db09a691dee40a2f72872404f2" translate="yes" xml:space="preserve">
          <source>Note that the request method is not verified.</source>
          <target state="translated">リクエストメソッドは検証されていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="fcc36a612f1887cd847fa353befaf752f6184ff5" translate="yes" xml:space="preserve">
          <source>Note that the request method is not verified. The different methods are available to make the tests more expressive.</source>
          <target state="translated">リクエストメソッドは検証されていないことに注意してください。テストをより表現力のあるものにするために、さまざまなメソッドが用意されています。</target>
        </trans-unit>
        <trans-unit id="a17d9050880b0000053a7919d1eaaab1da7ea52f" translate="yes" xml:space="preserve">
          <source>Note that the return value of validation methods is not relevant. It's not possible to halt the validate callback chain.</source>
          <target state="translated">バリデーションメソッドの戻り値は関係ないことに注意してください。validateコールバックチェーンを停止することはできません。</target>
        </trans-unit>
        <trans-unit id="6264af4b7ec518a4c0d4264b64656418078b121d" translate="yes" xml:space="preserve">
          <source>Note that the usec for the time passed will be set to 0 to prevent rounding errors with external services, like MySQL (which will round instead of floor, leading to off-by-one-second errors).</source>
          <target state="translated">MySQL のような外部サービスでの丸めエラーを防ぐために、渡された時間の usec は 0 に設定されることに注意してください (これは floor の代わりに丸められ、1 秒単位ではないエラーを引き起こします)。</target>
        </trans-unit>
        <trans-unit id="09aeb0d119ddd40cd5438bcd1ca87c38a2dc4212" translate="yes" xml:space="preserve">
          <source>Note that the validator is initialized only once for the whole application life cycle, and not on each validation run.</source>
          <target state="translated">バリデータが初期化されるのはアプリケーションのライフサイクル全体で一度だけであり、毎回の検証実行時ではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="46848172b64a0977b58ec6feefd30b9073bc4ca6" translate="yes" xml:space="preserve">
          <source>Note that the validator will be initialized &lt;em&gt;only once&lt;/em&gt; for the whole application life cycle, and not on each validation run, so be careful about using instance variables inside it.</source>
          <target state="translated">バリデーターは、アプリケーションのライフサイクル全体で&lt;em&gt;1回だけ&lt;/em&gt;初期化され、検証の実行ごとに初期化され&lt;em&gt;ない&lt;/em&gt;ことに注意してください。そのため、内部でインスタンス変数を使用する場合は注意してください。</target>
        </trans-unit>
        <trans-unit id="ae0dd2d063090bea5af276a745916be1df9fd6a9" translate="yes" xml:space="preserve">
          <source>Note that these methods do not strictly require &lt;code&gt;Post&lt;/code&gt; to be a subclass of &lt;a href=&quot;../activerecord/base&quot;&gt;ActiveRecord::Base&lt;/a&gt;. Any &lt;code&gt;Post&lt;/code&gt; class will work as long as its instances respond to &lt;code&gt;to_key&lt;/code&gt; and &lt;code&gt;model_name&lt;/code&gt;, given that &lt;code&gt;model_name&lt;/code&gt; responds to &lt;code&gt;param_key&lt;/code&gt;. For instance:</source>
          <target state="translated">これらのメソッドでは、 &lt;code&gt;Post&lt;/code&gt; が&lt;a href=&quot;../activerecord/base&quot;&gt;ActiveRecord :: Baseの&lt;/a&gt;サブクラスである必要はありません。任意の &lt;code&gt;Post&lt;/code&gt; そのインスタンスが応答するように、クラスは限り動作します &lt;code&gt;to_key&lt;/code&gt; と &lt;code&gt;model_name&lt;/code&gt; ことを考えると、 &lt;code&gt;model_name&lt;/code&gt; に応答 &lt;code&gt;param_key&lt;/code&gt; 。例えば：</target>
        </trans-unit>
        <trans-unit id="bc9001a2a86f3ffa7a896a66019a9acaefea21e1" translate="yes" xml:space="preserve">
          <source>Note that this conversion makes some assumptions about the duration of some periods, e.g. months are always 1/12 of year and years are 365.2425 days:</source>
          <target state="translated">この変換は、いくつかの期間の期間についていくつかの仮定をすることに注意してください、例えば、月は常に1年の1/12であり、年は365.2425日です。</target>
        </trans-unit>
        <trans-unit id="77cc080b11bb02e1e002cb526197387a11eb18f5" translate="yes" xml:space="preserve">
          <source>Note that this is simply 'syntactic sugar' for defining an actual class method:</source>
          <target state="translated">これは、実際のクラスメソッドを定義するための「構文上の糖質」に過ぎないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="b0ebd4a9a6512094d1e187bcc14bccbc19a4f2eb" translate="yes" xml:space="preserve">
          <source>Note that this method actually runs the queries, since the results of some are needed by the next ones when eager loading is going on.</source>
          <target state="translated">このメソッドは実際にクエリを実行することに注意してください。</target>
        </trans-unit>
        <trans-unit id="400d486fc3da7592d3e9fa738dc428190cc7b83a" translate="yes" xml:space="preserve">
          <source>Note that this module is completely decoupled from HTTP - the only requirement is a valid &lt;code&gt;_routes&lt;/code&gt; implementation.</source>
          <target state="translated">このモジュールはHTTPから完全に切り離されていることに注意してください。唯一の要件は、有効な &lt;code&gt;_routes&lt;/code&gt; 実装です。</target>
        </trans-unit>
        <trans-unit id="6a867944d9d1c972ce2678c23acf249fcb7f57d6" translate="yes" xml:space="preserve">
          <source>Note that this only protects you against the most common mistake when using the format validator - you always need to keep in mind that ^ and $ match the &lt;strong&gt;line&lt;/strong&gt; beginning and line end in Ruby, and not the beginning and end of a string.</source>
          <target state="translated">あなたは常に^と$一致していることを心に留めておく必要がある-フォーマットのバリデータを使用している場合、これが唯一の最も一般的な間違いに対してあなたを保護することを注記&lt;strong&gt;行を&lt;/strong&gt;、文字列のRubyで始まり、行の終わりではなく始まりと終わり。</target>
        </trans-unit>
        <trans-unit id="40e976053cd24cf89ca5afb4e56aca4c1a475bf8" translate="yes" xml:space="preserve">
          <source>Note that this option was added as a security measure, to ensure user input cannot be used as locale information unless it is previously known. Therefore, it's recommended not to disable this option unless you have a strong reason for doing so.</source>
          <target state="translated">このオプションはセキュリティ対策として追加されたもので、 事前にロケールがわかっていないとユーザの入力をロケール情報として使用できないことに注意しましょう。したがって、よほどの理由がない限り、このオプションを無効にしないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="dcd7cad2f920a22df3327dba7bec9bcba84d5107" translate="yes" xml:space="preserve">
          <source>Note that this option will not affect Active Support callbacks since they never halted the chain when any value was returned.</source>
          <target state="translated">このオプションはActive Supportコールバックには影響しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="fbd22df73644dceb2d81a8d497944e60fc8cb29d" translate="yes" xml:space="preserve">
          <source>Note that this protects you only from automatic bots, targeted tailor-made bots cannot be stopped by this. So &lt;em&gt;negative CAPTCHAs might not be good to protect login forms&lt;/em&gt;.</source>
          <target state="translated">これは自動ボットからのみ保護することに注意してください。ターゲットを絞ったオーダーメイドボットはこれによって停止できません。したがって、&lt;em&gt;負のCAPTCHAはログインフォームを保護するのに適していない場合があります&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="1c8f134d1a5ae3dfb5037cd0d0c9a0e0c1fbc96d" translate="yes" xml:space="preserve">
          <source>Note that this will also delete records marked as &lt;a href=&quot;core#method-i-readonly-3F&quot;&gt;#readonly?&lt;/a&gt;.</source>
          <target state="translated">これにより、&lt;a href=&quot;core#method-i-readonly-3F&quot;&gt;＃readonly&lt;/a&gt;としてマークされたレコードも削除されます。。</target>
        </trans-unit>
        <trans-unit id="620da313e90e0691449cfa180d7b0fbfd2313d4c" translate="yes" xml:space="preserve">
          <source>Note that this will clear anything that is being used to validate the model for both the &lt;code&gt;validates_with&lt;/code&gt; and &lt;code&gt;validate&lt;/code&gt; methods. It clears the validators that are created with an invocation of &lt;code&gt;validates_with&lt;/code&gt; and the callbacks that are set by an invocation of &lt;code&gt;validate&lt;/code&gt;.</source>
          <target state="translated">これは、両方のモデルを検証するために使用されている何でもクリアすることに注意してください &lt;code&gt;validates_with&lt;/code&gt; と &lt;code&gt;validate&lt;/code&gt; 方法を。 &lt;code&gt;validates_with&lt;/code&gt; の呼び出しで作成されたバリデーターと、 &lt;code&gt;validate&lt;/code&gt; の呼び出しによって設定されたコールバックをクリアします。</target>
        </trans-unit>
        <trans-unit id="59556d783955e645825d2046dcb1ae4013692a97" translate="yes" xml:space="preserve">
          <source>Note that to create a variant it's necessary to download the entire blob file from the service. Because of this process, you also want to be considerate about when the variant is actually processed. You shouldn't be processing variants inline in a template, for example. Delay the processing to an on-demand controller, like the one provided in &lt;a href=&quot;representationscontroller&quot;&gt;ActiveStorage::RepresentationsController&lt;/a&gt;.</source>
          <target state="translated">バリアントを作成するには、サービスからblobファイル全体をダウンロードする必要があることに注意してください。このプロセスのため、バリアントが実際に処理されるタイミングについても考慮する必要があります。たとえば、テンプレート内でインラインでバリアントを処理するべきではありません。&lt;a href=&quot;representationscontroller&quot;&gt;ActiveStorage :: RepresentationsControllerで&lt;/a&gt;提供されるようなオンデマンドコントローラーへの処理を遅らせます。</target>
        </trans-unit>
        <trans-unit id="5bd0b997f03075f0fd5f7d6476535e63dc8ab0e2" translate="yes" xml:space="preserve">
          <source>Note that unless you have a specific reason to do so, you should prefer using &lt;code&gt;before_action&lt;/code&gt; rather than &lt;code&gt;after_action&lt;/code&gt; in your Action Mailer classes so that headers are parsed properly.</source>
          <target state="translated">特別な理由がない限り、ヘッダーが適切に解析されるように、アクションメーラークラスで &lt;code&gt;before_action&lt;/code&gt; ではなく &lt;code&gt;after_action&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="c297a0082106a309bccb2c304dff13f9d16faac5" translate="yes" xml:space="preserve">
          <source>Note that we define the change that we want to happen moving forward in time. Before this migration is run, there will be no table. After, the table will exist. Active Record knows how to reverse this migration as well: if we roll this migration back, it will remove the table.</source>
          <target state="translated">時間的に前倒しで発生させたい変更を定義していることに注意してください。この移行が実行される前は、テーブルは存在しません。移行後はテーブルが存在します。Active Record はこの移行を逆にする方法も知っています:移行をロールバックするとテーブルが削除されます。</target>
        </trans-unit>
        <trans-unit id="2e926ed7e503e22b4111ceb30ccb88dce58134ae" translate="yes" xml:space="preserve">
          <source>Note that we don't have explicit render at the end of the index action in accordance with &quot;convention over configuration&quot; principle. The rule is that if you do not explicitly render something at the end of a controller action, Rails will automatically look for the &lt;code&gt;action_name.html.erb&lt;/code&gt; template in the controller's view path and render it. So in this case, Rails will render the &lt;code&gt;app/views/books/index.html.erb&lt;/code&gt; file.</source>
          <target state="translated">「設定よりも規約」の原則に従って、インデックスアクションの最後に明示的なレンダリングがないことに注意してください。ルールは、コントローラーアクションの最後に何かを明示的にレンダリングしない場合、Railsはコントローラーの &lt;code&gt;action_name.html.erb&lt;/code&gt; テンプレートを自動的に検索してレンダリングするということです。したがって、この場合、Railsは &lt;code&gt;app/views/books/index.html.erb&lt;/code&gt; ファイルをレンダリングします。</target>
        </trans-unit>
        <trans-unit id="fc309473d6129fce9427ca4ffd7a719d23d30f2b" translate="yes" xml:space="preserve">
          <source>Note that we needed to instantiate a new &lt;code&gt;PictureFileCallbacks&lt;/code&gt; object, since we declared our callback as an instance method. This is particularly useful if the callbacks make use of the state of the instantiated object. Often, however, it will make more sense to declare the callbacks as class methods:</source>
          <target state="translated">コールバックをインスタンスメソッドとして宣言したため、新しい &lt;code&gt;PictureFileCallbacks&lt;/code&gt; オブジェクトをインスタンス化する必要があることに注意してください。これは、コールバックがインスタンス化されたオブジェクトの状態を利用する場合に特に役立ちます。ただし、多くの場合、コールバックをクラスメソッドとして宣言する方が理にかなっています。</target>
        </trans-unit>
        <trans-unit id="2f078fa0d6abee21360b3c264683efe5cc570183" translate="yes" xml:space="preserve">
          <source>Note that we used Mime for the csv mime type as it comes with Rails. For a custom renderer, you'll need to register a mime type with &lt;code&gt;Mime::Type.register&lt;/code&gt;.</source>
          <target state="translated">Railsに付属しているcsv mimeタイプにはMimeを使用したことに注意してください。カスタムレンダラの場合、MIMEタイプを &lt;code&gt;Mime::Type.register&lt;/code&gt; に登録する必要があります。</target>
        </trans-unit>
        <trans-unit id="493e11f2139307e1b857ae2583c8a70294f296ed" translate="yes" xml:space="preserve">
          <source>Note that when an array is used, the implicit mapping from the values to database integers is derived from the order the values appear in the array. In the example, &lt;code&gt;:active&lt;/code&gt; is mapped to &lt;code&gt;0&lt;/code&gt; as it's the first element, and &lt;code&gt;:archived&lt;/code&gt; is mapped to &lt;code&gt;1&lt;/code&gt;. In general, the &lt;code&gt;i&lt;/code&gt;-th element is mapped to &lt;code&gt;i-1&lt;/code&gt; in the database.</source>
          <target state="translated">配列が使用される場合、値からデータベース整数への暗黙のマッピングは、値が配列に現れる順序から導出されることに注意してください。この例では、 &lt;code&gt;:active&lt;/code&gt; は最初の要素であるため &lt;code&gt;0&lt;/code&gt; にマップされ、 &lt;code&gt;:archived&lt;/code&gt; は &lt;code&gt;1&lt;/code&gt; にマップされます。一般に、 &lt;code&gt;i&lt;/code&gt; 番目の要素はデータベースの &lt;code&gt;i-1&lt;/code&gt; にマップされます。</target>
        </trans-unit>
        <trans-unit id="c316595d7f1cc476b48b9d06316e2c4531c197bc" translate="yes" xml:space="preserve">
          <source>Note that while for session values you set the key to &lt;code&gt;nil&lt;/code&gt;, to delete a cookie value you should use &lt;code&gt;cookies.delete(:key)&lt;/code&gt;.</source>
          <target state="translated">セッション値の場合はキーを &lt;code&gt;nil&lt;/code&gt; に設定しますが、Cookie値を削除するには &lt;code&gt;cookies.delete(:key)&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="375abaf21583ac20acd9292c3b8eefbb701bc9fb" translate="yes" xml:space="preserve">
          <source>Note that you can define &lt;code&gt;perform&lt;/code&gt; with as many arguments as you want.</source>
          <target state="translated">必要な数の引数を &lt;code&gt;perform&lt;/code&gt; して、performを定義できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="88cfa3abeb2458e86a60f8ec1b460db8fb10e9dc" translate="yes" xml:space="preserve">
          <source>Note that you can define your own XML parameter parser which would allow you to describe multiple entities in a single request (i.e., by wrapping them all in a single root node), but if you just go with the flow and accept Rails' defaults, life will be much easier.</source>
          <target state="translated">独自のXMLパラメータパーサを定義すれば、1つのリクエストで複数のエンティティを記述することができますが(つまり、それらをすべて1つのルートノードでラップすることで)、流れに乗ってRailsのデフォルトを受け入れれば、生活ははるかに楽になります。</target>
        </trans-unit>
        <trans-unit id="94fcc4bd31806b338f29c759262bfc0f506b7150" translate="yes" xml:space="preserve">
          <source>Note that you cannot pass a &lt;code&gt;Numeric&lt;/code&gt; value to &lt;code&gt;time_ago_in_words&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Numeric&lt;/code&gt; を &lt;code&gt;time_ago_in_words&lt;/code&gt; に渡すことはできません。</target>
        </trans-unit>
        <trans-unit id="1f1061c05c09718d57e4b98d385870b473c4dab2" translate="yes" xml:space="preserve">
          <source>Note that you must specify the extension of the image.</source>
          <target state="translated">画像の拡張子を指定する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="fbe12ac2a13ce2a7fd2002400594427d3dac75d7" translate="yes" xml:space="preserve">
          <source>Note that, by default, &lt;code&gt;ActiveModel::Model&lt;/code&gt; implements &lt;code&gt;persisted?&lt;/code&gt; to return &lt;code&gt;false&lt;/code&gt;, which is the most common case. You may want to override it in your class to simulate a different scenario:</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;ActiveModel::Model&lt;/code&gt; は &lt;code&gt;persisted?&lt;/code&gt; 実装されますか？最も一般的なケースである &lt;code&gt;false&lt;/code&gt; を返します。別のシナリオをシミュレートするために、クラスでオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="6c0eb83f0bd048cfc7a18f5b34d2c2a7f0774a58" translate="yes" xml:space="preserve">
          <source>Note the &lt;code&gt;data-remote=&quot;true&quot;&lt;/code&gt;. Now, the form will be submitted by Ajax rather than by the browser's normal submit mechanism.</source>
          <target state="translated">&lt;code&gt;data-remote=&quot;true&quot;&lt;/code&gt; に注意してください。これで、フォームはブラウザーの通常の送信メカニズムではなくAjaxによって送信されます。</target>
        </trans-unit>
        <trans-unit id="0b50c32f894b15a18965fc17ad0b160bd64ca480" translate="yes" xml:space="preserve">
          <source>Note the subtle difference between the two: &lt;code&gt;assert_routing&lt;/code&gt; tests that a URL fits options while &lt;code&gt;assert_recognizes&lt;/code&gt; tests that a URL breaks into parameters properly.</source>
          <target state="translated">2つの間の微妙な違いに注意してください &lt;code&gt;assert_routing&lt;/code&gt; はURLがオプションに適合することをテストし、 &lt;code&gt;assert_recognizes&lt;/code&gt; はURLがパラメータに適切に分割されることをテストします。</target>
        </trans-unit>
        <trans-unit id="64a72b7714830d8e8def9655dd5179990d52e442" translate="yes" xml:space="preserve">
          <source>Note you can't append with &lt;code&gt;atomic_write&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;atomic_write&lt;/code&gt; で追加できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="e012da3c873f5e7f25a227356956d77d8cbb45da" translate="yes" xml:space="preserve">
          <source>Note, all the attributes for all the cases are kept in the same table. Read more: &lt;a href=&quot;https://www.martinfowler.com/eaaCatalog/singleTableInheritance.html&quot;&gt;www.martinfowler.com/eaaCatalog/singleTableInheritance.html&lt;/a&gt;</source>
          <target state="translated">すべてのケースのすべての属性が同じテーブルに保持されていることに注意してください。続きを読む：&lt;a href=&quot;https://www.martinfowler.com/eaaCatalog/singleTableInheritance.html&quot;&gt;www.martinfowler.com/eaaCatalog/singleTableInheritance.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0e23d909c309df5b8483a6d80a959b1e4ab0714c" translate="yes" xml:space="preserve">
          <source>Note, however, the extra bit at the top of that action:</source>
          <target state="translated">しかし、そのアクションの上部にある余分なビットに注意してください。</target>
        </trans-unit>
        <trans-unit id="a11bc31bbee6149856fb4cc76f9292762b870e2b" translate="yes" xml:space="preserve">
          <source>Note, if data was written with the &lt;code&gt;:expires_in&lt;/code&gt; or &lt;code&gt;:version&lt;/code&gt; options, both of these conditions are applied before the data is returned.</source>
          <target state="translated">&lt;code&gt;:expires_in&lt;/code&gt; または &lt;code&gt;:version&lt;/code&gt; オプションを使用してデータが書き込まれた場合、これらの条件は両方ともデータが返される前に適用されます。</target>
        </trans-unit>
        <trans-unit id="173438e96ca17bd100e0efb41be6765ffc5dc263" translate="yes" xml:space="preserve">
          <source>Note, the &lt;code&gt;only: &amp;lt;type&amp;gt;&lt;/code&gt; hash will apply to all callbacks defined on that method call. To get around this you can call the &lt;a href=&quot;callbacks#method-i-define_model_callbacks&quot;&gt;#define_model_callbacks&lt;/a&gt; method as many times as you need.</source>
          <target state="translated">注 &lt;code&gt;only: &amp;lt;type&amp;gt;&lt;/code&gt; ハッシュは、そのメソッド呼び出しで定義されたすべてのコールバックに適用されます。これを回避するには、&lt;a href=&quot;callbacks#method-i-define_model_callbacks&quot;&gt;＃define_model_callbacks&lt;/a&gt;メソッドを必要な回数だけ呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="e730840f4cf0c423b310013d1509281bf488401d" translate="yes" xml:space="preserve">
          <source>Note, this method will return nil if ActiveRecord::Base.cache_versioning is set to &lt;code&gt;false&lt;/code&gt; (which it is by default until Rails 6.0).</source>
          <target state="translated">ActiveRecord :: Base.cache_versioningが &lt;code&gt;false&lt;/code&gt; （デフォルトではRails 6.0まで）に設定されている場合、このメソッドはnilを返すことに注意してください。</target>
        </trans-unit>
        <trans-unit id="c86af99f3964446c447ca9ff5afc05885736a4b0" translate="yes" xml:space="preserve">
          <source>Note, you should use &lt;code&gt;return false&lt;/code&gt; to prevent event for &lt;code&gt;jquery-ujs&lt;/code&gt; and &lt;code&gt;e.preventDefault()&lt;/code&gt; for &lt;code&gt;rails-ujs&lt;/code&gt;</source>
          <target state="translated">注、あなたが使用する必要があり &lt;code&gt;return false&lt;/code&gt; ためのイベントを防ぐために &lt;code&gt;jquery-ujs&lt;/code&gt; と &lt;code&gt;e.preventDefault()&lt;/code&gt; のための &lt;code&gt;rails-ujs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="91573f6985f0c4b16cbd786a58cd14db5f991daf" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;:id&lt;/code&gt; is always present.</source>
          <target state="translated">注：： &lt;code&gt;:id&lt;/code&gt; は常に存在します。</target>
        </trans-unit>
        <trans-unit id="8634df8460327a401d547cd66d1daa13389930f3" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;yield&lt;/code&gt; can still be used to retrieve the stored content, but calling &lt;code&gt;yield&lt;/code&gt; doesn't work in helper modules, while &lt;code&gt;content_for&lt;/code&gt; does.</source>
          <target state="translated">注： &lt;code&gt;yield&lt;/code&gt; は保存されたコンテンツを取得するために引き続き使用できますが、 &lt;code&gt;content_for&lt;/code&gt; が機能する一方で、 &lt;code&gt;yield&lt;/code&gt; を呼び出すことはヘルパーモジュールでは機能しません。</target>
        </trans-unit>
        <trans-unit id="8da99924f8d120d0211cdf5e26cda8c8a164764e" translate="yes" xml:space="preserve">
          <source>Note: Acronyms that are passed to &lt;code&gt;pluralize&lt;/code&gt; will no longer be recognized, since the acronym will not occur as a delimited unit in the pluralized result. To work around this, you must specify the pluralized form as an acronym as well:</source>
          <target state="translated">注：複数形の結果で区切られた単位として頭字語が発生しないため、 &lt;code&gt;pluralize&lt;/code&gt; 渡される頭字語は認識されなくなります。これを回避するには、複数形も頭字語として指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="8a8c7e5a63f17d1875bad1c59c527c97a6dd626d" translate="yes" xml:space="preserve">
          <source>Note: Although it is often much faster than the alternative, &lt;a href=&quot;classmethods#method-i-destroy&quot;&gt;destroy&lt;/a&gt;, skipping callbacks might bypass business logic in your application that ensures referential integrity or performs other essential jobs.</source>
          <target state="translated">注：多くの場合、代替の&lt;a href=&quot;classmethods#method-i-destroy&quot;&gt;destroy&lt;/a&gt;よりはるかに高速ですが、コールバックをスキップすると、参照整合性を保証したり、他の重要なジョブを実行したりするアプリケーションのビジネスロジックがバイパスされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="4e9ece58e771c7dc934cee4b84518319fbbf0ee9" translate="yes" xml:space="preserve">
          <source>Note: As Active Record callbacks are not triggered, this method will not automatically update &lt;code&gt;updated_at&lt;/code&gt;/&lt;code&gt;updated_on&lt;/code&gt; columns.</source>
          <target state="translated">注：Active Recordコールバックはトリガーされないため、このメソッドは &lt;code&gt;updated_at&lt;/code&gt; / &lt;code&gt;updated_on&lt;/code&gt; 列を自動的に更新しません。</target>
        </trans-unit>
        <trans-unit id="b382d38463c4b9772db0f0e4f20597ea1d44539b" translate="yes" xml:space="preserve">
          <source>Note: Fixtures are unordered. If you want ordered fixtures, use the omap YAML type. See &lt;a href=&quot;http://yaml.org/type/omap.html&quot;&gt;yaml.org/type/omap.html&lt;/a&gt; for the specification. You will need ordered fixtures when you have foreign key constraints on keys in the same table. This is commonly needed for tree structures. Example:</source>
          <target state="translated">注：器具は順序付けされていません。注文した器具が必要な場合は、omap YAMLタイプを使用します。仕様については、&lt;a href=&quot;http://yaml.org/type/omap.html&quot;&gt;yaml.org / type / omap.html&lt;/a&gt;をご覧ください。同じテーブルのキーに外部キー制約がある場合は、注文したフィクスチャが必要になります。これは通常、ツリー構造に必要です。例：</target>
        </trans-unit>
        <trans-unit id="e3f911ece33a8889898f780391535eeae25b4645" translate="yes" xml:space="preserve">
          <source>Note: If the day is not included as an option but the month is, the day will be set to the 1st to ensure that all month choices are valid.</source>
          <target state="translated">注意:オプションに日が含まれていないが月が含まれている場合は、すべての月の選択肢が有効になるように日が1日に設定されます。</target>
        </trans-unit>
        <trans-unit id="455ad7b304457d0818b156a5d5a258e87af23432" translate="yes" xml:space="preserve">
          <source>Note: Instantiation, callback execution, and deletion of each record can be time consuming when you're removing many records at once. It generates at least one SQL &lt;code&gt;DELETE&lt;/code&gt; query per record (or possibly more, to enforce your callbacks). If you want to delete many rows quickly, without concern for their associations or callbacks, use &lt;a href=&quot;relation#method-i-delete_all&quot;&gt;delete_all&lt;/a&gt; instead.</source>
          <target state="translated">注：一度に多くのレコードを削除する場合、各レコードのインスタンス化、コールバックの実行、および削除には時間がかかる場合があります。レコードごとに少なくとも1つのSQL &lt;code&gt;DELETE&lt;/code&gt; クエリを生成します（コールバックを強制するために、場合によってはそれ以上）。関連付けやコールバックを&lt;a href=&quot;relation#method-i-delete_all&quot;&gt;考慮&lt;/a&gt;せずに多数の行をすばやく削除する場合は、代わりにdelete_allを使用します。</target>
        </trans-unit>
        <trans-unit id="acacd3efece89a8db79dda6270478358ee24035b" translate="yes" xml:space="preserve">
          <source>Note: Joining, eager loading and preloading of these associations is not possible. These operations happen before instance creation and the scope will be called with a &lt;code&gt;nil&lt;/code&gt; argument.</source>
          <target state="translated">注：これらの関連付けの結合、積極的なロード、およびプリロードはできません。これらの操作はインスタンスの作成前に行われ、スコープは &lt;code&gt;nil&lt;/code&gt; 引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="308e33031d5f89bc20b7a0f4592db047a4d56233" translate="yes" xml:space="preserve">
          <source>Note: MySQL only supports index order from 8.0.1 onwards (earlier versions accepted the syntax but ignored it).</source>
          <target state="translated">注意:MySQLは8.0.1以降のインデックス順のみをサポートしています(以前のバージョンでは構文を受け入れていましたが、無視していました)。</target>
        </trans-unit>
        <trans-unit id="124f350c136512944ed0f6dcf73a12862c334ad1" translate="yes" xml:space="preserve">
          <source>Note: Partial indexes are only supported for PostgreSQL and SQLite 3.8.0+.</source>
          <target state="translated">注意:部分インデックスはPostgreSQLとSQLite 3.8.0+でのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="c0d6873d18327e72cbed60ce10d25503c5b6ff17" translate="yes" xml:space="preserve">
          <source>Note: SQLite doesn't support index length.</source>
          <target state="translated">注:SQLite はインデックスの長さをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="2dfc9a11d5d1fa70f8585fb64a2db0c1f6ce0546" translate="yes" xml:space="preserve">
          <source>Note: SSEs are not currently supported by IE. However, they are supported by Chrome, Firefox, Opera, and Safari.</source>
          <target state="translated">注:SSEは現在、IEではサポートされていません。ただし、Chrome、Firefox、Opera、Safariではサポートされています。</target>
        </trans-unit>
        <trans-unit id="c86cc9acd3cc4679a14049283572db943a13a4c8" translate="yes" xml:space="preserve">
          <source>Note: The &lt;code&gt;attachable_type=&lt;/code&gt; method is being called when assigning an &lt;code&gt;attachable&lt;/code&gt;. The &lt;code&gt;class_name&lt;/code&gt; of the &lt;code&gt;attachable&lt;/code&gt; is passed as a &lt;a href=&quot;../../string&quot;&gt;String&lt;/a&gt;.</source>
          <target state="translated">注： &lt;code&gt;attachable_type=&lt;/code&gt; メソッドは、 &lt;code&gt;attachable&lt;/code&gt; を割り当てるときに呼び出されます。 &lt;code&gt;attachable&lt;/code&gt; の &lt;code&gt;class_name&lt;/code&gt; は&lt;a href=&quot;../../string&quot;&gt;String&lt;/a&gt;として渡されます。</target>
        </trans-unit>
        <trans-unit id="b32677b2c1945dcf62d2c8edf09310b4dc2135f1" translate="yes" xml:space="preserve">
          <source>Note: The adapter provided by this method must provide some additional methods from those expected of a standard &lt;code&gt;ActiveJob::QueueAdapter&lt;/code&gt; in order to be used with the active job test helpers. Refer to &lt;code&gt;ActiveJob::QueueAdapters::TestAdapter&lt;/code&gt;.</source>
          <target state="translated">注：このメソッドによって提供されるアダプターは、アクティブなジョブテストヘルパーで使用するために、標準の &lt;code&gt;ActiveJob::QueueAdapter&lt;/code&gt; で予期されるメソッドからいくつかの追加メソッドを提供する必要があります。 &lt;code&gt;ActiveJob::QueueAdapters::TestAdapter&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="856990d094574273e23f235fcf21d1ef8d7d3679" translate="yes" xml:space="preserve">
          <source>Note: The new instance will share a link to the same attributes as the original class. Therefore the sti column value will still be the same. Any change to the attributes on either instance will affect both instances. If you want to change the sti column as well, use &lt;a href=&quot;persistence#method-i-becomes-21&quot;&gt;becomes!&lt;/a&gt; instead.</source>
          <target state="translated">注：新しいインスタンスは、元のクラスと同じ属性へのリンクを共有します。したがって、stiカラムの値は同じままです。いずれかのインスタンスの属性を変更すると、両方のインスタンスに影響します。stiカラムも変更したい場合は、使い方に&lt;a href=&quot;persistence#method-i-becomes-21&quot;&gt;なります！&lt;/a&gt;代わりに。</target>
        </trans-unit>
        <trans-unit id="e495b3a8620060a6500fb583012fa4372f4b9ce5" translate="yes" xml:space="preserve">
          <source>Note: The old instance's sti column value will be changed too, as both objects share the same set of attributes.</source>
          <target state="translated">注意:両方のオブジェクトが同じ属性を共有しているため、古いインスタンスのtiカラムの値も変更されます。</target>
        </trans-unit>
        <trans-unit id="da5de37a9fe710621b520911dc22e6273fdacef4" translate="yes" xml:space="preserve">
          <source>Note: The precision is the total number of significant digits, and the scale is the number of digits that can be stored following the decimal point. For example, the number 123.45 has a precision of 5 and a scale of 2. A decimal with a precision of 5 and a scale of 2 can range from -999.99 to 999.99.</source>
          <target state="translated">注:精度は有効桁数の合計であり、目盛りは小数点以下に格納できる桁数です。例えば、123.45という数字は、精度が5、目盛が2の10進数で、精度が5、目盛が2の10進数では、-999.99から999.99までの範囲になります。</target>
        </trans-unit>
        <trans-unit id="f9065955578098ed0bb8bd025f933ad59c21c6e6" translate="yes" xml:space="preserve">
          <source>Note: This also works for the methods in &lt;a href=&quot;formoptionshelper&quot;&gt;FormOptionsHelper&lt;/a&gt; and &lt;a href=&quot;datehelper&quot;&gt;DateHelper&lt;/a&gt; that are designed to work with an object as base, like &lt;a href=&quot;formoptionshelper#method-i-collection_select&quot;&gt;ActionView::Helpers::FormOptionsHelper#collection_select&lt;/a&gt; and &lt;a href=&quot;datehelper#method-i-datetime_select&quot;&gt;ActionView::Helpers::DateHelper#datetime_select&lt;/a&gt;.</source>
          <target state="translated">注：これは、&lt;a href=&quot;formoptionshelper#method-i-collection_select&quot;&gt;ActionView :: Helpers :: FormOptionsHelper＃collection_select&lt;/a&gt;や&lt;a href=&quot;datehelper#method-i-datetime_select&quot;&gt;ActionView :: Helpers :: DateHelper＃datetime_select&lt;/a&gt;など、オブジェクトをベースとして機能するように設計された&lt;a href=&quot;formoptionshelper&quot;&gt;FormOptionsHelper&lt;/a&gt;および&lt;a href=&quot;datehelper&quot;&gt;DateHelperの&lt;/a&gt;メソッドでも機能します。</target>
        </trans-unit>
        <trans-unit id="c2352219e415aacb6ef215e56a9cd402e35a6e9a" translate="yes" xml:space="preserve">
          <source>Note: This assertion is simply a shortcut for:</source>
          <target state="translated">注意:このアサーションは、単なるショートカットです。</target>
        </trans-unit>
        <trans-unit id="ef0e993df538909451f4951854e2341a7ebc0570" translate="yes" xml:space="preserve">
          <source>Note: This is an optimization of &lt;code&gt;Enumerable#excluding&lt;/code&gt; that uses &lt;code&gt;Array#-&lt;/code&gt; instead of &lt;code&gt;Array#reject&lt;/code&gt; for performance reasons.</source>
          <target state="translated">注：これは、パフォーマンス上の理由から、 &lt;code&gt;Array#reject&lt;/code&gt; の代わりにArray＃ &lt;code&gt;Array#-&lt;/code&gt; を使用する &lt;code&gt;Enumerable#excluding&lt;/code&gt; 最適化です。</target>
        </trans-unit>
        <trans-unit id="863ca249317e9c0dbb645dce430c3cd0b6faa965" translate="yes" xml:space="preserve">
          <source>Note: This is purely a browser performance optimization and is not meant for server load balancing. See &lt;a href=&quot;https://www.die.net/musings/page_load_time&quot;&gt;www.die.net/musings/page_load_time&lt;/a&gt;/ for background and &lt;a href=&quot;https://www.browserscope.org/?category=network&quot;&gt;www.browserscope.org/?category=network&lt;/a&gt; for connection limit data.</source>
          <target state="translated">注：これは純粋にブラウザのパフォーマンス最適化であり、サーバーの負荷分散を目的としたものではありません。参照してください&lt;a href=&quot;https://www.die.net/musings/page_load_time&quot;&gt;www.die.net/musings/page_load_time&lt;/a&gt; /の背景と&lt;a href=&quot;https://www.browserscope.org/?category=network&quot;&gt;www.browserscope.org/?category=network&lt;/a&gt;接続制限データ用を。</target>
        </trans-unit>
        <trans-unit id="4a3287c1634d93a72d137f0d950e3c604c3df357" translate="yes" xml:space="preserve">
          <source>Note: To turn off all caching provided by Action Controller, set</source>
          <target state="translated">メモ:Action Controllerが提供するすべてのキャッシングをオフにするには、次のように設定します。</target>
        </trans-unit>
        <trans-unit id="5b440437b3604be9608bede173ea6d8501bdfdc8" translate="yes" xml:space="preserve">
          <source>Note: Updating a large number of records will run an UPDATE query for each record, which may cause a performance issue. When running callbacks is not needed for each record update, it is preferred to use &lt;a href=&quot;../relation#method-i-update_all&quot;&gt;update_all&lt;/a&gt; for updating all records in a single query.</source>
          <target state="translated">注：多数のレコードを更新すると、各レコードに対してUPDATEクエリが実行され、パフォーマンスの問題が発生する可能性があります。レコードの更新ごとにコールバックを実行する必要がない場合は、単一のクエリですべてのレコードを更新するために&lt;a href=&quot;../relation#method-i-update_all&quot;&gt;update_all&lt;/a&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="62b50481c99d023afaf5455de8ac79fe5a963dac" translate="yes" xml:space="preserve">
          <source>Note: You can't pass in a condition as a string (like &lt;code&gt;name =
'Jamie'&lt;/code&gt;), since it would be sanitized and then queried against the primary key column, like &lt;code&gt;id = 'name =
\'Jamie\''&lt;/code&gt;.</source>
          <target state="translated">注：条件を文字列として渡すことはできません（ &lt;code&gt;name = 'Jamie'&lt;/code&gt; ）。これはサニタイズされ、次に &lt;code&gt;id = 'name = \'Jamie\''&lt;/code&gt; ように主キー列に対してクエリが実行されるためです。</target>
        </trans-unit>
        <trans-unit id="9e95bdc13adc134c9b83e94f1ac9f03cf6cfc487" translate="yes" xml:space="preserve">
          <source>Note: not all valid &lt;a href=&quot;querymethods#method-i-select&quot;&gt;Relation#select&lt;/a&gt; expressions are valid &lt;a href=&quot;calculations#method-i-count&quot;&gt;count&lt;/a&gt; expressions. The specifics differ between databases. In invalid cases, an error from the database is thrown.</source>
          <target state="translated">注：すべての有効な&lt;a href=&quot;querymethods#method-i-select&quot;&gt;Relation＃select&lt;/a&gt;式が有効な&lt;a href=&quot;calculations#method-i-count&quot;&gt;count&lt;/a&gt;式であるとは限りません。詳細はデータベースによって異なります。無効な場合、データベースからのエラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="cb90894dfb9810668140dd5abc132702407b2049" translate="yes" xml:space="preserve">
          <source>Note: only supported by MySQL.</source>
          <target state="translated">注:MySQLでのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="11012fa2ff042b2ccc5930b6e83ce185707b0ecd" translate="yes" xml:space="preserve">
          <source>Note: only supported by PostgreSQL</source>
          <target state="translated">注:PostgreSQLでのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="b979edd03dc476656559cc41b1e4a6d868f05723" translate="yes" xml:space="preserve">
          <source>Note: only supported by PostgreSQL and MySQL</source>
          <target state="translated">注:PostgreSQL と MySQL でのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="d4570c3579af0b879f140c7b30b54ae99eeeb839" translate="yes" xml:space="preserve">
          <source>Note: only supported by PostgreSQL.</source>
          <target state="translated">注:PostgreSQLでのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="9a83e4f90833243e0c6406c5f754ff630641257d" translate="yes" xml:space="preserve">
          <source>Note: this feature is not available with the threaded parallelization.</source>
          <target state="translated">注意:この機能はスレッド並列化では利用できません。</target>
        </trans-unit>
        <trans-unit id="205d08dcd8d151326e23421d0d1ac6edc18b3313" translate="yes" xml:space="preserve">
          <source>Note: use &lt;code&gt;\A&lt;/code&gt; and &lt;code&gt;\z&lt;/code&gt; to match the start and end of the string, &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; match the start/end of a line.</source>
          <target state="translated">注： &lt;code&gt;\A&lt;/code&gt; および &lt;code&gt;\z&lt;/code&gt; を使用して文字列の開始と終了を一致させ、 &lt;code&gt;^&lt;/code&gt; および &lt;code&gt;$&lt;/code&gt; を行の開始/終了と一致させます。</target>
        </trans-unit>
        <trans-unit id="773ff38978dbfe8d2f1950aaff40b3a6289527ac" translate="yes" xml:space="preserve">
          <source>Note: when using &lt;code&gt;controller&lt;/code&gt;, the route is simply named after the method you call on the block parameter rather than map.</source>
          <target state="translated">注： &lt;code&gt;controller&lt;/code&gt; を使用する場合、ルートは、マップするのではなく、ブロックパラメーターで呼び出すメソッドに基づいて名前が付けられます。</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="39429a684161fc0c5605d56b46f44c1c03d8efe8" translate="yes" xml:space="preserve">
          <source>Notice how the short-style &lt;code&gt;form_with&lt;/code&gt; invocation is conveniently the same, regardless of the record being new or existing. Record identification is smart enough to figure out if the record is new by asking &lt;code&gt;record.new_record?&lt;/code&gt;. It also selects the correct path to submit to, and the name based on the class of the object.</source>
          <target state="translated">新規または既存のレコードに関係なく、shortスタイルの &lt;code&gt;form_with&lt;/code&gt; 呼び出しが便利に同じであることに注意してください。レコードの識別は、 &lt;code&gt;record.new_record?&lt;/code&gt; 。また、送信先の正しいパスと、オブジェクトのクラスに基づいた名前も選択します。</target>
        </trans-unit>
        <trans-unit id="db0f7457358771ccbf92d92a4d763b28aca85961" translate="yes" xml:space="preserve">
          <source>Notice that &amp;ldquo;rails:generators:test_unit&amp;rdquo; could be loaded as well, what Rails looks for is the first and last parts of the namespace. This is what allows any test framework to hook into Rails as long as it provides any of the hooks above.</source>
          <target state="translated">「rails：generators：test_unit」もロードできることに注意してください。Railsが探すのは名前空間の最初と最後の部分です。これにより、上記のフックのいずれかが提供されている限り、任意のテストフレームワークがRailsにフックできます。</target>
        </trans-unit>
        <trans-unit id="c5549615aaa370893e3ea8fcbb7c259a1259ddcf" translate="yes" xml:space="preserve">
          <source>Notice that :stream only works with templates. Rendering :json or :xml with :stream won't work.</source>
          <target state="translated">stream はテンプレートでのみ動作することに注意してください。json や :xml を :stream でレンダリングすると動作しません。</target>
        </trans-unit>
        <trans-unit id="320e974e71e96a6cbd1aead6a719dcffd232a3a4" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;action_methods.include?(&quot;foo&quot;)&lt;/code&gt; may return false and &lt;code&gt;available_action?(&quot;foo&quot;)&lt;/code&gt; returns true because this method considers actions that are also available through other means, for example, implicit render ones.</source>
          <target state="translated">&lt;code&gt;action_methods.include?(&quot;foo&quot;)&lt;/code&gt; はfalseを返し、 &lt;code&gt;available_action?(&quot;foo&quot;)&lt;/code&gt; はtrueを返すことに注意してください。</target>
        </trans-unit>
        <trans-unit id="fe43ee640ff6bcab6590900f5e5cb91b851fec67" translate="yes" xml:space="preserve">
          <source>Notice that in this example we used the &lt;code&gt;cache_key_with_version&lt;/code&gt; method, so the resulting cache key will be something like &lt;code&gt;products/233-20140225082222765838000/competing_price&lt;/code&gt;. &lt;code&gt;cache_key_with_version&lt;/code&gt; generates a string based on the model's class name, &lt;code&gt;id&lt;/code&gt;, and &lt;code&gt;updated_at&lt;/code&gt; attributes. This is a common convention and has the benefit of invalidating the cache whenever the product is updated. In general, when you use low-level caching for instance level information, you need to generate a cache key.</source>
          <target state="translated">この例では &lt;code&gt;cache_key_with_version&lt;/code&gt; メソッドを使用しているため、結果のキャッシュキーは &lt;code&gt;products/233-20140225082222765838000/competing_price&lt;/code&gt; のようになることに注意してください。 &lt;code&gt;cache_key_with_version&lt;/code&gt; は、モデルのクラス名、 &lt;code&gt;id&lt;/code&gt; 、および &lt;code&gt;updated_at&lt;/code&gt; 属性に基づいて文字列を生成します。これは一般的な規則であり、製品が更新されるたびにキャッシュを無効にするという利点があります。一般に、インスタンスレベルの情報に低レベルのキャッシュを使用する場合は、キャッシュキーを生成する必要があります。</target>
        </trans-unit>
        <trans-unit id="335c6423429f476890129005da902f572747e332" translate="yes" xml:space="preserve">
          <source>Notice that inside the &lt;code&gt;create&lt;/code&gt; action we use &lt;code&gt;render&lt;/code&gt; instead of &lt;code&gt;redirect_to&lt;/code&gt; when &lt;code&gt;save&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. The &lt;code&gt;render&lt;/code&gt; method is used so that the &lt;code&gt;@article&lt;/code&gt; object is passed back to the &lt;code&gt;new&lt;/code&gt; template when it is rendered. This rendering is done within the same request as the form submission, whereas the &lt;code&gt;redirect_to&lt;/code&gt; will tell the browser to issue another request.</source>
          <target state="translated">&lt;code&gt;create&lt;/code&gt; アクション内では、 &lt;code&gt;save&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; を返したときに、 &lt;code&gt;redirect_to&lt;/code&gt; ではなく &lt;code&gt;render&lt;/code&gt; を使用していることに注意してください。 &lt;code&gt;render&lt;/code&gt; 方法はように使用されている &lt;code&gt;@article&lt;/code&gt; のオブジェクトはに戻され &lt;code&gt;new&lt;/code&gt; 、それがレンダリングされるときのテンプレート。このレンダリングはフォーム送信と同じリクエスト内で行われますが、 &lt;code&gt;redirect_to&lt;/code&gt; はブラウザに別のリクエストを発行するよう指示します。</target>
        </trans-unit>
        <trans-unit id="200ef77ed6574c244c4ae9bf1d5933c2dfdd03d7" translate="yes" xml:space="preserve">
          <source>Notice that no &lt;code&gt;:id&lt;/code&gt; parameter was provided to the first &lt;code&gt;url_for&lt;/code&gt; call and the helper used the one from the route's path. Any path parameter implicitly used by &lt;code&gt;url_for&lt;/code&gt; can always be overwritten like shown on the last &lt;code&gt;url_for&lt;/code&gt; calls.</source>
          <target state="translated">最初の &lt;code&gt;url_for&lt;/code&gt; 呼び出しに &lt;code&gt;:id&lt;/code&gt; パラメータが指定されておらず、ヘルパーがルートのパスからのものを使用していることに注意してください。 &lt;code&gt;url_for&lt;/code&gt; によって暗黙的に使用されるパスパラメータは、最後の &lt;code&gt;url_for&lt;/code&gt; 呼び出しで表示されるように常に上書きできます。</target>
        </trans-unit>
        <trans-unit id="519aa6a6e5d6afab6a7e2eb41a4439a4f9329106" translate="yes" xml:space="preserve">
          <source>Notice that only &lt;em&gt;one&lt;/em&gt; migration was copied over here. This is because the first two migrations were copied over the first time this command was run.</source>
          <target state="translated">ここには&lt;em&gt;1つの&lt;/em&gt;マイグレーションのみがコピーされていることに注意してください。これは、最初の2つのマイグレーションが、このコマンドが初めて実行されたときにコピーされたためです。</target>
        </trans-unit>
        <trans-unit id="df50d170a97756a976395374fdf8c24cc9971e57" translate="yes" xml:space="preserve">
          <source>Notice that the third parameter, the options array, is the same kind of argument you pass to &lt;code&gt;options_for_select&lt;/code&gt;. One advantage here is that you don't have to worry about pre-selecting the correct city if the user already has one - Rails will do this for you by reading from the &lt;code&gt;@person.city_id&lt;/code&gt; attribute.</source>
          <target state="translated">3番目のパラメータであるoptions配列は、 &lt;code&gt;options_for_select&lt;/code&gt; に渡すのと同じ種類の引数であることに注意してください。ここでの利点の1つは、ユーザーが既に都市を持っている場合でも、正しい都市を事前に選択する必要がないことです &lt;code&gt;@person.city_id&lt;/code&gt; は@ person.city_id属性から読み取ることでこれを行います。</target>
        </trans-unit>
        <trans-unit id="1908ba1c531a2b8259e8a292905b0338f0a4c049" translate="yes" xml:space="preserve">
          <source>Notice that when you add a path using &lt;code&gt;add&lt;/code&gt;, the path object created already contains the path with the same path value given to &lt;code&gt;add&lt;/code&gt;. In some situations, you may not want this behavior, so you can give &lt;code&gt;:with&lt;/code&gt; as option.</source>
          <target state="translated">addを使用してパスを &lt;code&gt;add&lt;/code&gt; と、作成されたパスオブジェクトには、 &lt;code&gt;add&lt;/code&gt; に指定されたのと同じパス値を持つパスがすでに含まれていることに注意してください。状況によっては、この動作を望まない場合があるため、 &lt;code&gt;:with&lt;/code&gt; asオプションを指定できます。</target>
        </trans-unit>
        <trans-unit id="44c8b7d455b3180c88c20d2969451f82d99fc72d" translate="yes" xml:space="preserve">
          <source>Notice the 'E' in the output. It denotes a test with error.</source>
          <target state="translated">出力の「E」に注目してください。これはエラーのあるテストを示しています。</target>
        </trans-unit>
        <trans-unit id="87b70343665b3497b68b2af72f1fe352646fe9bf" translate="yes" xml:space="preserve">
          <source>Notice the &lt;code&gt;category&lt;/code&gt; key of the &lt;code&gt;first&lt;/code&gt; article found in &lt;code&gt;fixtures/articles.yml&lt;/code&gt; has a value of &lt;code&gt;about&lt;/code&gt;. This tells Rails to load the category &lt;code&gt;about&lt;/code&gt; found in &lt;code&gt;fixtures/categories.yml&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fixtures/articles.yml&lt;/code&gt; にある &lt;code&gt;first&lt;/code&gt; 記事の &lt;code&gt;category&lt;/code&gt; キーの値が &lt;code&gt;about&lt;/code&gt; あることに注意してください。これは、カテゴリをロードするためのRailsに指示 &lt;code&gt;about&lt;/code&gt; で見つかった &lt;code&gt;fixtures/categories.yml&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f050ea2079c865a020ea6021b3e47525fb921cf9" translate="yes" xml:space="preserve">
          <source>Notice the &lt;code&gt;format.js&lt;/code&gt; in the &lt;code&gt;respond_to&lt;/code&gt; block: that allows the controller to respond to your Ajax request. You then have a corresponding &lt;code&gt;app/views/users/create.js.erb&lt;/code&gt; view file that generates the actual JavaScript code that will be sent and executed on the client side.</source>
          <target state="translated">&lt;code&gt;respond_to&lt;/code&gt; ブロック内のformat.jsに注意して &lt;code&gt;format.js&lt;/code&gt; 。これにより、コントローラーがAjaxリクエストに応答できるようになります。次に、クライアント側で送信および実行される実際のJavaScriptコードを生成する、対応する &lt;code&gt;app/views/users/create.js.erb&lt;/code&gt; ビューファイルがあります。</target>
        </trans-unit>
        <trans-unit id="679dcd5834f1e3b85618c3828ff5a6c00ccaf1be" translate="yes" xml:space="preserve">
          <source>Notice the &lt;code&gt;only_path: true&lt;/code&gt; part. This is because &lt;a href=&quot;urlfor&quot;&gt;UrlFor&lt;/a&gt; has no information about the website hostname that your Rails app is serving. So if you want to include the hostname as well, then you must also pass the &lt;code&gt;:host&lt;/code&gt; argument:</source>
          <target state="translated">&lt;code&gt;only_path: true&lt;/code&gt; 部分に注目してください。これは、&lt;a href=&quot;urlfor&quot;&gt;UrlFor&lt;/a&gt;がRailsアプリが提供しているWebサイトのホスト名に関する情報を持っていないためです。したがって、ホスト名も含める場合は、 &lt;code&gt;:host&lt;/code&gt; 引数も渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="e55f230dbbf5a74dbcd7017f3fcdd6a43cc06c8b" translate="yes" xml:space="preserve">
          <source>Notice we're starting to see some duplication in these three tests, they both access the same Article fixture data. We can D.R.Y. this up by using the &lt;code&gt;setup&lt;/code&gt; and &lt;code&gt;teardown&lt;/code&gt; methods provided by &lt;code&gt;ActiveSupport::Callbacks&lt;/code&gt;.</source>
          <target state="translated">これら3つのテストで重複が確認され始めていることに注意してください。どちらも同じArticleフィクスチャデータにアクセスします。 &lt;code&gt;ActiveSupport::Callbacks&lt;/code&gt; によって提供される &lt;code&gt;setup&lt;/code&gt; および &lt;code&gt;teardown&lt;/code&gt; メソッドを使用して、これを乾燥させることができます。</target>
        </trans-unit>
        <trans-unit id="753a22b2eb617204efee4644795034b8ace1ee14" translate="yes" xml:space="preserve">
          <source>Notifications</source>
          <target state="translated">Notifications</target>
        </trans-unit>
        <trans-unit id="8c8eaaf882c955457360616271c1ee8f60912482" translate="yes" xml:space="preserve">
          <source>Notifies the logs that the request has begun. After the request is complete, flushes all the logs.</source>
          <target state="translated">リクエストが開始されたことをログに通知します。リクエストが完了した後、すべてのログをフラッシュします。</target>
        </trans-unit>
        <trans-unit id="b083a26e6e8d5c85e90f954d51b377ab9d6cb915" translate="yes" xml:space="preserve">
          <source>Now &lt;code&gt;@articles&lt;/code&gt; is included in the instance variables, because the line defining it was executed.</source>
          <target state="translated">今 &lt;code&gt;@articles&lt;/code&gt; はラインは、それが実行された定義ので、インスタンス変数に含まれています。</target>
        </trans-unit>
        <trans-unit id="1b042097ab2d91df48ebb6afa5f5c762fbec1027" translate="yes" xml:space="preserve">
          <source>Now add a rotation for the old SHA1 digest so existing cookies are seamlessly upgraded to the new SHA256 digest.</source>
          <target state="translated">既存のクッキーが新しいSHA256ダイジェストにシームレスにアップグレードされるように、古いSHA1ダイジェストのローテーションを追加しました。</target>
        </trans-unit>
        <trans-unit id="c41bff3fa5ccfd1232f6ff1584724f94b31f90aa" translate="yes" xml:space="preserve">
          <source>Now all of the following will produce the expected join queries using &lt;code&gt;INNER JOIN&lt;/code&gt;:</source>
          <target state="translated">これで、次のすべてが &lt;code&gt;INNER JOIN&lt;/code&gt; を使用して予期される結合クエリを生成します。</target>
        </trans-unit>
        <trans-unit id="20b7f51321bce2db86858d9563944349508848d5" translate="yes" xml:space="preserve">
          <source>Now all you have to do is change that timestamp when the helper method changes.</source>
          <target state="translated">あとはヘルパーメソッドが変更されたときにタイムスタンプを変更するだけです。</target>
        </trans-unit>
        <trans-unit id="7fa3370358927296e6f19b98512db3f680400c6c" translate="yes" xml:space="preserve">
          <source>Now if we execute &lt;code&gt;@todo = @user.todos.create&lt;/code&gt; then the &lt;code&gt;@todo&lt;/code&gt; record's &lt;code&gt;user_id&lt;/code&gt; value will be the &lt;code&gt;guid&lt;/code&gt; value of &lt;code&gt;@user&lt;/code&gt;.</source>
          <target state="translated">私たちが実行した場合、今 &lt;code&gt;@todo = @user.todos.create&lt;/code&gt; 次に &lt;code&gt;@todo&lt;/code&gt; のレコードの &lt;code&gt;user_id&lt;/code&gt; 値になります &lt;code&gt;guid&lt;/code&gt; の値 &lt;code&gt;@user&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="be04c0ceb80dcbf0f5dc7603a36d5f8eb4fa4974" translate="yes" xml:space="preserve">
          <source>Now if we run our tests, we should see it pass:</source>
          <target state="translated">これでテストを実行すれば、合格するはずです。</target>
        </trans-unit>
        <trans-unit id="786773a8b554b8bb590eedf207af886d2f83e1b8" translate="yes" xml:space="preserve">
          <source>Now if you go to http://localhost:3000/articles you will see a list of all the articles that you have created.</source>
          <target state="translated">さて、http://localhost:3000/articles に行くと、あなたが作成したすべての記事のリストが表示されます。</target>
        </trans-unit>
        <trans-unit id="1ab2226544af01e8b9dc9c006fa565e96f7bfd6d" translate="yes" xml:space="preserve">
          <source>Now if you try to create a new article, you will be greeted with a basic HTTP Authentication challenge:</source>
          <target state="translated">さて、新しい記事を作成しようとすると、基本的なHTTP認証の課題が出てきます。</target>
        </trans-unit>
        <trans-unit id="02e279c3aab36157f4c5efb237f845b1ef1d7aec" translate="yes" xml:space="preserve">
          <source>Now it &lt;em&gt;is&lt;/em&gt; removed from the database:</source>
          <target state="translated">今、それが&lt;em&gt;され&lt;/em&gt;、データベースから削除します：</target>
        </trans-unit>
        <trans-unit id="f7d061bef62245b1ff344a1120ecc9711baf3295" translate="yes" xml:space="preserve">
          <source>Now it is possible to create an instance of &lt;code&gt;Person&lt;/code&gt; and set attributes using &lt;code&gt;from_json&lt;/code&gt;.</source>
          <target state="translated">これで、 &lt;code&gt;Person&lt;/code&gt; のインスタンスを作成し、 &lt;code&gt;from_json&lt;/code&gt; を使用して属性を設定することができます。</target>
        </trans-unit>
        <trans-unit id="fe05d7f983e2d38c65ce6aec823f42b31eef96f0" translate="yes" xml:space="preserve">
          <source>Now it's possible to access attributes from the database through the value objects instead. If you choose to name the composition the same as the attribute's name, it will be the only way to access that attribute. That's the case with our &lt;code&gt;balance&lt;/code&gt; attribute. You interact with the value objects just like you would with any other attribute:</source>
          <target state="translated">これで、代わりに値オブジェクトを介してデータベースから属性にアクセスできるようになりました。コンポジションに属性の名前と同じ名前を付けることを選択した場合、それがその属性にアクセスする唯一の方法になります。これは、 &lt;code&gt;balance&lt;/code&gt; 属性の場合です。他の属性と同じように、値オブジェクトを操作します。</target>
        </trans-unit>
        <trans-unit id="a0e723b1bc4f979da3f44583460af0278ed8ce41" translate="yes" xml:space="preserve">
          <source>Now it's time to explore your application. A good place to start is by asking the debugger for help. Type: &lt;code&gt;help&lt;/code&gt;</source>
          <target state="translated">次に、アプリケーションを探索します。開始する良い場所は、デバッガーに助けを求めることです。タイプ： &lt;code&gt;help&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d346dc9770f3e643ac5bd68ca3943f083eeb299b" translate="yes" xml:space="preserve">
          <source>Now let's open that file and write our first assertion:</source>
          <target state="translated">では、そのファイルを開いて、最初のアサーションを書いてみましょう。</target>
        </trans-unit>
        <trans-unit id="1cae19a080fb992409b81b543049cc89e8ba18c3" translate="yes" xml:space="preserve">
          <source>Now let's set &lt;code&gt;distinct&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;distinct&lt;/code&gt; 設定しましょう：</target>
        </trans-unit>
        <trans-unit id="5b9c7c93bfb7eceac813cc301b7376f2f1f280a2" translate="yes" xml:space="preserve">
          <source>Now let's test the flow for creating a new article in our blog.</source>
          <target state="translated">それでは、当ブログで新規記事を作成するための流れをテストしてみましょう。</target>
        </trans-unit>
        <trans-unit id="33fd0b45cc2d594e81d58237663c5baec9a5d5f1" translate="yes" xml:space="preserve">
          <source>Now our generator can be invoked as follows:</source>
          <target state="translated">これで、次のようにジェネレータを呼び出すことができるようになりました。</target>
        </trans-unit>
        <trans-unit id="ce6dc94f4dbd0d8d43c18c69be65ff332773fa5b" translate="yes" xml:space="preserve">
          <source>Now people will only need to go to the root of the engine to see all the articles, rather than visiting &lt;code&gt;/articles&lt;/code&gt;. This means that instead of &lt;code&gt;http://localhost:3000/blorgh/articles&lt;/code&gt;, you only need to go to &lt;code&gt;http://localhost:3000/blorgh&lt;/code&gt; now.</source>
          <target state="translated">これで、人々は &lt;code&gt;/articles&lt;/code&gt; にアクセスするのではなく、エンジンのルートに移動してすべての記事を表示するだけで済みます。つまり、 &lt;code&gt;http://localhost:3000/blorgh/articles&lt;/code&gt; ではなく、http：// localhost：3000 / blorghにアクセスするだけで &lt;code&gt;http://localhost:3000/blorgh&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="5c83a55a45b2f01ea698594c8b3e1ad5455f11bf" translate="yes" xml:space="preserve">
          <source>Now routes such as &lt;code&gt;/posts/1&lt;/code&gt; will no longer be valid, but &lt;code&gt;/posts/1.1&lt;/code&gt; will be. The &lt;code&gt;id&lt;/code&gt; parameter must match the constraint passed in for this example.</source>
          <target state="translated">&lt;code&gt;/posts/1&lt;/code&gt; などのルートは無効になりますが、/ posts / &lt;code&gt;/posts/1.1&lt;/code&gt; は有効になります。 &lt;code&gt;id&lt;/code&gt; パラメータは、この例のために渡された制約に一致している必要があります。</target>
        </trans-unit>
        <trans-unit id="6a4dcaaa6423147b18b2f6af18138b7623923251" translate="yes" xml:space="preserve">
          <source>Now that the engine can create new articles, it only makes sense to add commenting functionality as well. To do this, you'll need to generate a comment model, a comment controller, and then modify the articles scaffold to display comments and allow people to create new ones.</source>
          <target state="translated">エンジンが新しい記事を作成できるようになったので、コメント機能を追加することは理にかなっています。これを行うには、コメントモデルとコメントコントローラを生成し、コメントを表示して新しいコメントを作成できるように記事の足場を修正する必要があります。</target>
        </trans-unit>
        <trans-unit id="11605a07ad419c26e10776711e573a3cc8abc17e" translate="yes" xml:space="preserve">
          <source>Now that we have a new database, let's set up the model. In order to use the new database we need to create a new abstract class and connect to the animals databases.</source>
          <target state="translated">新しいデータベースができたので、モデルをセットアップしてみましょう。新しいデータベースを使用するためには、新しい抽象クラスを作成し、動物データベースに接続する必要があります。</target>
        </trans-unit>
        <trans-unit id="732e32122270aef4b9252cc8512ef28b55fe61ee" translate="yes" xml:space="preserve">
          <source>Now that we have a user model to play with, we will just edit the &lt;code&gt;app/controllers/users_controller.rb&lt;/code&gt; make it instruct the &lt;code&gt;UserMailer&lt;/code&gt; to deliver an email to the newly created user by editing the create action and inserting a call to &lt;code&gt;UserMailer.with(user: @user).welcome_email&lt;/code&gt; right after the user is successfully saved.</source>
          <target state="translated">これで遊ぶユーザーモデルができたので、 &lt;code&gt;app/controllers/users_controller.rb&lt;/code&gt; を編集して、作成アクションを編集し、 &lt;code&gt;UserMailer.with(user: @user).welcome_email&lt;/code&gt; への呼び出しを挿入することで、新しく作成されたユーザーにメールを配信するように &lt;code&gt;UserMailer&lt;/code&gt; に指示します。 （ユーザー：@user）.welcome_emailユーザーが正常に保存された直後。</target>
        </trans-unit>
        <trans-unit id="08df1c22724db06d31f5eb1a44dd158696e53cf7" translate="yes" xml:space="preserve">
          <source>Now that we have articles and comments working, take a look at the &lt;code&gt;app/views/articles/show.html.erb&lt;/code&gt; template. It is getting long and awkward. We can use partials to clean it up.</source>
          <target state="translated">記事とコメントが機能するようになったので、 &lt;code&gt;app/views/articles/show.html.erb&lt;/code&gt; テンプレートを見てください。長くなり、扱いにくくなっています。パーシャルを使用してクリーンアップできます。</target>
        </trans-unit>
        <trans-unit id="f7a57569c29b3772ca2726e0da0891ffdcc0c35a" translate="yes" xml:space="preserve">
          <source>Now that we have made the controller and view, we need to tell Rails when we want &quot;Hello, Rails!&quot; to show up. In our case, we want it to show up when we navigate to the root URL of our site, http://localhost:3000. At the moment, &quot;Welcome aboard&quot; is occupying that spot.</source>
          <target state="translated">コントローラとビューを作ったので、&quot;Hello,Rails!&quot;を表示させたいときにRailsに伝える必要があります。この例では、サイトのルートURLである http://localhost:3000 に移動したときに表示させるようにしています。現時点では、「Welcome aboard」がその場所を占めています。</target>
        </trans-unit>
        <trans-unit id="c78bf8c3d9d311c23bfefc91cd38fcc387615966" translate="yes" xml:space="preserve">
          <source>Now that we have the &lt;code&gt;database.yml&lt;/code&gt; and the new model set up it's time to create the databases. Rails 6.0 ships with all the rails tasks you need to use multiple databases in Rails.</source>
          <target state="translated">今、私たちが持っている &lt;code&gt;database.yml&lt;/code&gt; をしてデータベースを作成するには、それの時間までの新モデルセットを。Rails 6.0には、Railsで複数のデータベースを使用するために必要なすべてのRailsタスクが付属しています。</target>
        </trans-unit>
        <trans-unit id="3658b4e2bb9053598deec9119146b32737b682f1" translate="yes" xml:space="preserve">
          <source>Now that you have a module that modifies the input data, it's time to register it as a preprocessor for your mime type.</source>
          <target state="translated">入力データを修正するモジュールができたので、それをマイムタイプのプリプロセッサとして登録しましょう。</target>
        </trans-unit>
        <trans-unit id="1e3f00f9dc7d411f9b208e29217940a44d10cc9f" translate="yes" xml:space="preserve">
          <source>Now that you've seen how generators can be used &lt;em&gt;inside&lt;/em&gt; an application, did you know they can also be used to &lt;em&gt;generate&lt;/em&gt; applications too? This kind of generator is referred to as a &quot;template&quot;. This is a brief overview of the Templates API. For detailed documentation see the &lt;a href=&quot;rails_application_templates&quot;&gt;Rails Application Templates guide&lt;/a&gt;.</source>
          <target state="translated">アプリケーション&lt;em&gt;内で&lt;/em&gt;ジェネレータを使用する方法を見てきたので、ジェネレータを使用&lt;em&gt;し&lt;/em&gt;てアプリケーションを&lt;em&gt;生成する&lt;/em&gt;こともできることをご存知ですか？この種類のジェネレータは「テンプレート」と呼ばれます。これは、テンプレートAPIの概要です。詳細なドキュメントについては、&lt;a href=&quot;rails_application_templates&quot;&gt;Railsアプリケーションテンプレートガイドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="9b78e5d03ac7a3268586ac2691c80bb6bf5d06b9" translate="yes" xml:space="preserve">
          <source>Now that you've seen how to create a controller, an action, and a view, let's create something with a bit more substance.</source>
          <target state="translated">コントローラ、アクション、ビューの作成方法を見てきましたが、もう少し実体のあるものを作成してみましょう。</target>
        </trans-unit>
        <trans-unit id="c42baaa9718f13d5c8222d8c8a7cd9c934c39cef" translate="yes" xml:space="preserve">
          <source>Now that you've seen your first Rails application, you should feel free to update it and experiment on your own.</source>
          <target state="translated">初めてのRailsアプリが見えてきたので、気軽にアップデートして自分で実験してみてはいかがでしょうか。</target>
        </trans-unit>
        <trans-unit id="4ebf0a06c02ac9ca1316bd4928cbe3c564c0f180" translate="yes" xml:space="preserve">
          <source>Now the behavior is clear, that we are only using the connection information in &lt;code&gt;ENV['DATABASE_URL']&lt;/code&gt;.</source>
          <target state="translated">これで動作が明確になり、 &lt;code&gt;ENV['DATABASE_URL']&lt;/code&gt; 接続情報のみが使用されます。</target>
        </trans-unit>
        <trans-unit id="b49ba3604f078f72baacf288b548a11038388574" translate="yes" xml:space="preserve">
          <source>Now the header can pick up on the &lt;code&gt;@page_title&lt;/code&gt; variable and use it for outputting a title tag:</source>
          <target state="translated">これで、ヘッダーは &lt;code&gt;@page_title&lt;/code&gt; 変数を取得し、それを使用してタイトルタグを出力できます。</target>
        </trans-unit>
        <trans-unit id="2e18d36f17b1d90839ac5dcdbcb33a0e9b504751" translate="yes" xml:space="preserve">
          <source>Now the test should pass. Let us verify by running the test again:</source>
          <target state="translated">これでテストはパスするはずです。もう一度テストを実行して確認してみましょう。</target>
        </trans-unit>
        <trans-unit id="778539dc21c575db8a2ca83a7cff62a7c06e5c4c" translate="yes" xml:space="preserve">
          <source>Now the user can request to get a PDF version of a client just by adding &quot;.pdf&quot; to the URL:</source>
          <target state="translated">今、ユーザーはURLに「.pdf」を追加するだけで、クライアントのPDF版を取得するように要求することができます。</target>
        </trans-unit>
        <trans-unit id="a84530ec9df04e7cc3d58660fb582a3729c51d42" translate="yes" xml:space="preserve">
          <source>Now to get this test to pass we can add a model level validation for the &lt;em&gt;title&lt;/em&gt; field.</source>
          <target state="translated">このテストに合格するには、&lt;em&gt;タイトル&lt;/em&gt;フィールドにモデルレベルの検証を追加します。</target>
        </trans-unit>
        <trans-unit id="188b483bccd4381f8ec9c5e1a3d636878fd9e47c" translate="yes" xml:space="preserve">
          <source>Now we can see the new description by invoking &lt;code&gt;--help&lt;/code&gt; on the new generator. The second way to add a description is by creating a file named &lt;code&gt;USAGE&lt;/code&gt; in the same directory as our generator. We are going to do that in the next step.</source>
          <target state="translated">これで、新しいジェネレータで &lt;code&gt;--help&lt;/code&gt; を呼び出すことにより、新しい説明を確認できます。説明を追加する2番目の方法は、ジェネレーターと同じディレクトリに &lt;code&gt;USAGE&lt;/code&gt; という名前のファイルを作成することです。次のステップでそれを行います。</target>
        </trans-unit>
        <trans-unit id="dddc1e5eddf99199ed2f4f24b64350725bf5572a" translate="yes" xml:space="preserve">
          <source>Now we're going to add a system test to our blog application. We'll demonstrate writing a system test by visiting the index page and creating a new blog article.</source>
          <target state="translated">それでは、ブログアプリにシステムテストを追加していきます。インデックスページにアクセスして、ブログ記事を新規作成してシステムテストを書くデモを行います。</target>
        </trans-unit>
        <trans-unit id="6b1be2e7a39917788e5f531bf999ce9e2f7f2121" translate="yes" xml:space="preserve">
          <source>Now what if that number could vary, say as an argument from somewhere? The find would then take the form:</source>
          <target state="translated">さて、その数が変化する可能性があるとしたら、例えばどこかからの引数としてどうでしょうか?その場合は次のような形になります。</target>
        </trans-unit>
        <trans-unit id="be9be071256fdc4d57319b64f14682dd8cf34cb5" translate="yes" xml:space="preserve">
          <source>Now when a new request for the index action is processed, the layout will vary depending on whether the person accessing is logged in or not.</source>
          <target state="translated">これでインデックスアクションの新規リクエストが処理されると、アクセスしている人がログインしているかどうかでレイアウトが変わるようになりました。</target>
        </trans-unit>
        <trans-unit id="0c0ba2bf78d8878cf9ee6fce1e060d440d88a4de" translate="yes" xml:space="preserve">
          <source>Now when your application serves an asset in production, the CDN will store the asset for up to a year. Since most CDNs also cache headers of the request, this &lt;code&gt;Cache-Control&lt;/code&gt; will be passed along to all future browsers seeking this asset, the browser then knows that it can store this asset for a very long time before needing to re-request it.</source>
          <target state="translated">アプリケーションが本番環境でアセットを提供する場合、CDNはそのアセットを最大1年間保存します。ほとんどのCDNはリクエストのヘッダーもキャッシュするため、この &lt;code&gt;Cache-Control&lt;/code&gt; は、このアセットを探す将来のすべてのブラウザーに渡されます。ブラウザーは、このアセットを非常に長期間保存してから再リクエストする必要があることを認識します。</target>
        </trans-unit>
        <trans-unit id="7397dca47478e57252a6d04e34f47f3cce91cb32" translate="yes" xml:space="preserve">
          <source>Now with all the pieces in place, an action will take place that will associate an author - represented by a record in the &lt;code&gt;users&lt;/code&gt; table - with an article, represented by the &lt;code&gt;blorgh_articles&lt;/code&gt; table from the engine.</source>
          <target state="translated">これですべての要素が揃ったので、 &lt;code&gt;users&lt;/code&gt; テーブルのレコードで表される作成者を、エンジンの &lt;code&gt;blorgh_articles&lt;/code&gt; テーブルで表される記事に関連付けるアクションが実行されます。</target>
        </trans-unit>
        <trans-unit id="f4861027a7a7732f007bb28f69aa885ad4bd3bb6" translate="yes" xml:space="preserve">
          <source>Now you can access a serialized Hash of your object using the &lt;code&gt;serializable_hash&lt;/code&gt; method.</source>
          <target state="translated">これで、 &lt;code&gt;serializable_hash&lt;/code&gt; メソッドを使用して、オブジェクトのシリアル化されたハッシュにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="bbd491ea2cb97bc75ae16420f9d81e845ecc38d4" translate="yes" xml:space="preserve">
          <source>Now you can add articles and comments to your blog and have them show up in the right places.</source>
          <target state="translated">これでブログに記事やコメントを追加して、適切な場所に表示させることができるようになりました。</target>
        </trans-unit>
        <trans-unit id="a63f6b7032dcb040af6139789b42742fda3dbb90" translate="yes" xml:space="preserve">
          <source>Now you can create the necessary database tables in your testing database by navigating to your dummy app and migrating the database. First, run:</source>
          <target state="translated">これで、ダミーアプリに移動してデータベースを移行することで、テスト用データベースに必要なデータベーステーブルを作成することができます。まず、実行します。</target>
        </trans-unit>
        <trans-unit id="1b509fba0e74de20ecdb10b71addfc8cad75a3af" translate="yes" xml:space="preserve">
          <source>Now you can display an image inside your email.</source>
          <target state="translated">メール内に画像を表示できるようになりました。</target>
        </trans-unit>
        <trans-unit id="1e04b515bb030c9b6a664234a0b6eaa9a8d60e0d" translate="yes" xml:space="preserve">
          <source>Now you can have different transliterations for each locale:</source>
          <target state="translated">これで、ロケールごとに異なる音訳ができるようになりました。</target>
        </trans-unit>
        <trans-unit id="a57d5608f4f021228ff74f81e7c98fcad5341756" translate="yes" xml:space="preserve">
          <source>Now you can listen to this event with:</source>
          <target state="translated">これでこのイベントが聴けるようになりました。</target>
        </trans-unit>
        <trans-unit id="fc952f88284ef46aa74b35dfcd65bb65ac57e4b3" translate="yes" xml:space="preserve">
          <source>Now you can mount your engine in application's routes just like that:</source>
          <target state="translated">これで、アプリケーションのルートにエンジンをマウントすることができるようになりました。</target>
        </trans-unit>
        <trans-unit id="0cca2a620bb0efd6c8b31ea33601ec518093b64d" translate="yes" xml:space="preserve">
          <source>Now you can see even more output in the console from running the tests:</source>
          <target state="translated">これで、テストを実行すると、コンソールにさらに多くの出力が表示されるようになりました。</target>
        </trans-unit>
        <trans-unit id="ef124558e731720d7cd6ee04cfa0fa14595c87e3" translate="yes" xml:space="preserve">
          <source>Now you can simply do:</source>
          <target state="translated">これでシンプルにできるようになりました。</target>
        </trans-unit>
        <trans-unit id="97015d7f10515896d46f145fc9b204e09622e272" translate="yes" xml:space="preserve">
          <source>Now you can try running all the tests and they should pass.</source>
          <target state="translated">これで、すべてのテストを実行してみてください。</target>
        </trans-unit>
        <trans-unit id="a1f2c06b04c1d3ffade749660a4a8d51b3ca9356" translate="yes" xml:space="preserve">
          <source>Now you should know where you are in the running trace and be able to print the available variables. But let's continue and move on with the application execution.</source>
          <target state="translated">これで、実行中のトレースのどこにいるのかがわかり、利用可能な変数を表示できるようになったはずです。しかし、アプリケーションの実行を継続して進めていきましょう。</target>
        </trans-unit>
        <trans-unit id="87bb8627d78df2d32264c8cfee94fb35d59902db" translate="yes" xml:space="preserve">
          <source>Now you'll get a nice error message when saving an article without a title when you attempt to do just that on the new article form http://localhost:3000/articles/new:</source>
          <target state="translated">新しい記事フォーム http://localhost:3000/articles/new でタイトルなしの記事を保存しようとすると、素敵なエラーメッセージが表示されるようになりました。</target>
        </trans-unit>
        <trans-unit id="6c963ec9ca58ea98b17b6c7555bcaae882d53c98" translate="yes" xml:space="preserve">
          <source>Now, &lt;code&gt;Engine&lt;/code&gt; will get only requests that were not handled by &lt;code&gt;Application&lt;/code&gt;.</source>
          <target state="translated">これで、 &lt;code&gt;Engine&lt;/code&gt; は &lt;code&gt;Application&lt;/code&gt; で処理されなかったリクエストのみを取得します。</target>
        </trans-unit>
        <trans-unit id="203cf7090ffd765e9f27dc2ab3d7d30952df1c61" translate="yes" xml:space="preserve">
          <source>Now, a &lt;code&gt;GET&lt;/code&gt; request to &lt;code&gt;/photos&lt;/code&gt; would succeed, but a &lt;code&gt;POST&lt;/code&gt; request to &lt;code&gt;/photos&lt;/code&gt; (which would ordinarily be routed to the &lt;code&gt;create&lt;/code&gt; action) will fail.</source>
          <target state="translated">これで、 &lt;code&gt;/photos&lt;/code&gt; への &lt;code&gt;GET&lt;/code&gt; リクエストは成功しますが、 &lt;code&gt;/photos&lt;/code&gt; （通常は &lt;code&gt;create&lt;/code&gt; アクションにルーティングされます）への &lt;code&gt;POST&lt;/code&gt; リクエストは失敗します。</target>
        </trans-unit>
        <trans-unit id="af62ed7bdece7af2a862042c75463d54724457e7" translate="yes" xml:space="preserve">
          <source>Now, add another link in &lt;code&gt;app/views/articles/new.html.erb&lt;/code&gt;, underneath the form, to go back to the &lt;code&gt;index&lt;/code&gt; action:</source>
          <target state="translated">次に、別のリンクを &lt;code&gt;app/views/articles/new.html.erb&lt;/code&gt; のフォームの下に追加して、 &lt;code&gt;index&lt;/code&gt; アクションに戻ります。</target>
        </trans-unit>
        <trans-unit id="8e12adc83e98da965b0202dae25d3e358044f67f" translate="yes" xml:space="preserve">
          <source>Now, create a new file &lt;code&gt;app/views/articles/show.html.erb&lt;/code&gt; with the following content:</source>
          <target state="translated">次に、次のコンテンツを含む新しいファイル &lt;code&gt;app/views/articles/show.html.erb&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="ab84c9773432db7232bd695fe13dcece6e69f43e" translate="yes" xml:space="preserve">
          <source>Now, if the current user is a special user, they'll get a special layout when viewing a product.</source>
          <target state="translated">これで、現在のユーザーが特別なユーザーであれば、商品を見るときに特別なレイアウトになります。</target>
        </trans-unit>
        <trans-unit id="d155cc0c54a8c1103fe54c9484e37a19028bfcab" translate="yes" xml:space="preserve">
          <source>Now, if you POST to &lt;code&gt;/posts/:id&lt;/code&gt;, it will route to the &lt;code&gt;create_comment&lt;/code&gt; action. A GET on the same URL will route to the &lt;code&gt;show&lt;/code&gt; action.</source>
          <target state="translated">これで、 &lt;code&gt;/posts/:id&lt;/code&gt; にPOST &lt;code&gt;create_comment&lt;/code&gt; 、create_commentアクションにルーティングされます。同じURLのGETは、 &lt;code&gt;show&lt;/code&gt; アクションにルーティングされます。</target>
        </trans-unit>
        <trans-unit id="fd01ddc663c761677d7838ff6ebae0d36785cd0e" translate="yes" xml:space="preserve">
          <source>Now, if you create a Comment scaffold, you will see that the shoulda generators are being invoked, and at the end, they are just falling back to TestUnit generators:</source>
          <target state="translated">さて、Comment の足場を作ってみると、shoulda ジェネレータが起動されているのがわかりますが、最後は TestUnit ジェネレータに戻っているだけです。</target>
        </trans-unit>
        <trans-unit id="48e2d05fe59b341a812b4b192d936fbdab98a334" translate="yes" xml:space="preserve">
          <source>Now, if you noticed, we first wrote a test which fails for a desired functionality, then we wrote some code which adds the functionality and finally we ensured that our test passes. This approach to software development is referred to as &lt;a href=&quot;http://c2.com/cgi/wiki?TestDrivenDevelopment&quot;&gt;&lt;em&gt;Test-Driven Development&lt;/em&gt; (TDD)&lt;/a&gt;.</source>
          <target state="translated">ここで、気づいた場合は、最初に目的の機能で失敗するテストを記述し、次に機能を追加するコードを記述し、最後にテストがパスすることを確認しました。このソフトウェア開発へのアプローチは、&lt;a href=&quot;http://c2.com/cgi/wiki?TestDrivenDevelopment&quot;&gt;&lt;em&gt;テスト駆動開発&lt;/em&gt;（TDD）&lt;/a&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="27b8380c7a32dfa3423cdfea7f660ff2643ddae5" translate="yes" xml:space="preserve">
          <source>Now, let's update the &lt;code&gt;app/views/articles/new.html.erb&lt;/code&gt; view to use this new partial, rewriting it completely:</source>
          <target state="translated">次に、 &lt;code&gt;app/views/articles/new.html.erb&lt;/code&gt; ビューを更新して、この新しいパーシャルを使用し、完全に書き換えます。</target>
        </trans-unit>
        <trans-unit id="217df5a8b404551ff72f541302f83740782a2f6c" translate="yes" xml:space="preserve">
          <source>Now, suppose we wanted to add a new book for an existing author. We'd need to do something like this:</source>
          <target state="translated">さて、既存の著者のために新しい本を追加したいとします。このようなことをする必要があります</target>
        </trans-unit>
        <trans-unit id="11c9105ae03fd512b3df4b1b95b94556311d85ad" translate="yes" xml:space="preserve">
          <source>Now, the &lt;code&gt;LoginsController&lt;/code&gt;'s &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;create&lt;/code&gt; actions will work as before without requiring the user to be logged in. The &lt;code&gt;:only&lt;/code&gt; option is used to skip this filter only for these actions, and there is also an &lt;code&gt;:except&lt;/code&gt; option which works the other way. These options can be used when adding filters too, so you can add a filter which only runs for selected actions in the first place.</source>
          <target state="translated">これで、 &lt;code&gt;LoginsController&lt;/code&gt; の &lt;code&gt;new&lt;/code&gt; アクションと &lt;code&gt;create&lt;/code&gt; アクションは、ユーザーがログインしなくても以前と同じように機能します。 &lt;code&gt;:only&lt;/code&gt; オプションは、これらのアクションに対してのみこのフィルターをスキップするために使用されます。また、他の機能 &lt;code&gt;:except&lt;/code&gt; する：exceptオプションもあります。仕方。これらのオプションは、フィルターを追加するときにも使用できるため、最初は選択したアクションに対してのみ実行されるフィルターを追加できます。</target>
        </trans-unit>
        <trans-unit id="6dbcfc0b858782509a12208646a29cda7e06af98" translate="yes" xml:space="preserve">
          <source>Now, when &lt;code&gt;Topic#destroy&lt;/code&gt; is run only &lt;code&gt;destroy_author&lt;/code&gt; is called. When &lt;code&gt;Reply#destroy&lt;/code&gt; is run, both &lt;code&gt;destroy_author&lt;/code&gt; and &lt;code&gt;destroy_readers&lt;/code&gt; are called.</source>
          <target state="translated">現在、 &lt;code&gt;Topic#destroy&lt;/code&gt; が実行されると &lt;code&gt;destroy_author&lt;/code&gt; のみが呼び出されます。ときに &lt;code&gt;Reply#destroy&lt;/code&gt; 実行され、両方 &lt;code&gt;destroy_author&lt;/code&gt; と &lt;code&gt;destroy_readers&lt;/code&gt; が呼ばれます。</target>
        </trans-unit>
        <trans-unit id="c9f281387742abe67e917f18111764c49c4a38a8" translate="yes" xml:space="preserve">
          <source>Now, when the helper generator is invoked and TestUnit is configured as the test framework, it will try to invoke both &lt;code&gt;Rails::TestUnitGenerator&lt;/code&gt; and &lt;code&gt;TestUnit::MyHelperGenerator&lt;/code&gt;. Since none of those are defined, we can tell our generator to invoke &lt;code&gt;TestUnit::Generators::HelperGenerator&lt;/code&gt; instead, which is defined since it's a Rails generator. To do that, we just need to add:</source>
          <target state="translated">ここで、ヘルパージェネレーターが呼び出され、TestUnitがテストフレームワークとして構成されている場合、 &lt;code&gt;Rails::TestUnitGenerator&lt;/code&gt; と &lt;code&gt;TestUnit::MyHelperGenerator&lt;/code&gt; 両方を呼び出そうとします。これらはどれも定義されていないため、代わりに &lt;code&gt;TestUnit::Generators::HelperGenerator&lt;/code&gt; を呼び出すようジェネレーターに指示できます。これはRailsジェネレーターであるために定義されています。これを行うには、以下を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="738f4ee5f2fdec6e2acb7a14ba46229776b15fe5" translate="yes" xml:space="preserve">
          <source>Now, when this view is rendered, it will show an error message which tells you that the translations for the keys &lt;code&gt;:hello_world&lt;/code&gt; and &lt;code&gt;:hello_flash&lt;/code&gt; are missing.</source>
          <target state="translated">これで、このビューがレンダリングされるときに、キー &lt;code&gt;:hello_world&lt;/code&gt; および &lt;code&gt;:hello_flash&lt;/code&gt; の変換が欠落していることを通知するエラーメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="d961b6eae818de7e713f0e8ff2517e62b85cc0f1" translate="yes" xml:space="preserve">
          <source>Now, when you add the &lt;code&gt;_destroy&lt;/code&gt; key to the attributes hash, with a value that evaluates to &lt;code&gt;true&lt;/code&gt;, you will destroy the associated model:</source>
          <target state="translated">ここで、 &lt;code&gt;_destroy&lt;/code&gt; キーを &lt;code&gt;true&lt;/code&gt; に評価される値で属性ハッシュに追加すると、関連するモデルが破棄されます。</target>
        </trans-unit>
        <trans-unit id="0e48bab7662e8b7cbf063bf165fef96ea50592a7" translate="yes" xml:space="preserve">
          <source>Now, when you call the &lt;code&gt;books_path&lt;/code&gt; method you should get &lt;code&gt;&quot;/en/books&quot;&lt;/code&gt; (for the default locale). A URL like &lt;code&gt;http://localhost:3001/nl/books&lt;/code&gt; should load the Dutch locale, then, and following calls to &lt;code&gt;books_path&lt;/code&gt; should return &lt;code&gt;&quot;/nl/books&quot;&lt;/code&gt; (because the locale changed).</source>
          <target state="translated">これで、 &lt;code&gt;books_path&lt;/code&gt; メソッドを呼び出すと、 &lt;code&gt;&quot;/en/books&quot;&lt;/code&gt; を取得する必要があります（デフォルトのロケールの場合）。 &lt;code&gt;http://localhost:3001/nl/books&lt;/code&gt; のようなURL はオランダ語のロケールをロードし、 &lt;code&gt;books_path&lt;/code&gt; を呼び出すと &lt;code&gt;&quot;/nl/books&quot;&lt;/code&gt; が返されます（ロケールが変更されたため）。</target>
        </trans-unit>
        <trans-unit id="dce4fc5d00e68ba3c104ef525a4771ac4977bf97" translate="yes" xml:space="preserve">
          <source>Now, when you use a form element with the &lt;code&gt;_destroy&lt;/code&gt; parameter, with a value that evaluates to &lt;code&gt;true&lt;/code&gt;, you will destroy the associated model (eg. 1, '1', true, or 'true'):</source>
          <target state="translated">ここで、 &lt;code&gt;_destroy&lt;/code&gt; パラメーターでフォーム要素を使用し、値が &lt;code&gt;true&lt;/code&gt; と評価されると、関連するモデル（例：1、 '1'、true、または 'true'）が破棄されます。</target>
        </trans-unit>
        <trans-unit id="c809e2c5ebb44a808f82d543f4edd794de0e3536" translate="yes" xml:space="preserve">
          <source>Now, you can use the &lt;code&gt;my_engine&lt;/code&gt; helper inside your application:</source>
          <target state="translated">これで、アプリケーション内で &lt;code&gt;my_engine&lt;/code&gt; ヘルパーを使用できます。</target>
        </trans-unit>
        <trans-unit id="4766e0bf16611e8438a6d53eae97d9cadc5e5fec" translate="yes" xml:space="preserve">
          <source>Null Relation</source>
          <target state="translated">ヌル関係</target>
        </trans-unit>
        <trans-unit id="6bfcf0cddffdd3930b31edb810e7c1a87b793877" translate="yes" xml:space="preserve">
          <source>NullContentTypeHeader</source>
          <target state="translated">NullContentTypeHeader</target>
        </trans-unit>
        <trans-unit id="350e7d8f18b3ca80dc7b075c15a357bcc83872b7" translate="yes" xml:space="preserve">
          <source>Number of partials fetched from cache</source>
          <target state="translated">キャッシュから取得した部分集合の数</target>
        </trans-unit>
        <trans-unit id="cba15084808a7129a67b592d7bb6d70a61b0c406" translate="yes" xml:space="preserve">
          <source>Number of records that instantiated</source>
          <target state="translated">インスタンス化したレコードの数</target>
        </trans-unit>
        <trans-unit id="098c6454bdf4bbfd58663e390aac0c78846ac19f" translate="yes" xml:space="preserve">
          <source>Number of times this job has been executed (which increments on every retry, like after an exception).</source>
          <target state="translated">このジョブが実行された回数 (例外が発生した後など、リトライするたびにインクリメントされます)。</target>
        </trans-unit>
        <trans-unit id="5a4142ed71d8bb3054e10546418ff4a5622d023e" translate="yes" xml:space="preserve">
          <source>NumberHelper</source>
          <target state="translated">NumberHelper</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
