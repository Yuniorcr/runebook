<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="rails">
    <body>
      <group id="rails">
        <trans-unit id="7acce9bd0f8ebeb41299d3c5d39790821251f354" translate="yes" xml:space="preserve">
          <source>The params hash has a nested person value, which can therefore be accessed with &lt;code&gt;params[:person]&lt;/code&gt; in the controller.</source>
          <target state="translated">paramsハッシュにはネストされたperson値があるため、コントローラーの &lt;code&gt;params[:person]&lt;/code&gt; でアクセスできます。</target>
        </trans-unit>
        <trans-unit id="b1f382907f48466d6409760d407191f01637a0f9" translate="yes" xml:space="preserve">
          <source>The params object created when this form is submitted would look like:</source>
          <target state="translated">このフォームが送信されたときに作成される params オブジェクトは次のようになります。</target>
        </trans-unit>
        <trans-unit id="a22d4f278f8aeadd352f595fa70b33907e1f9099" translate="yes" xml:space="preserve">
          <source>The parent namespace, &quot;A&quot;, may not reflect nesting at a given spot.</source>
          <target state="translated">親の名前空間「A」は、指定されたスポットでのネスティングを反映していない場合があります。</target>
        </trans-unit>
        <trans-unit id="fa88e48a48c300647e152fdf64f231b79f2e6cac" translate="yes" xml:space="preserve">
          <source>The parent of top-level and anonymous modules is &lt;a href=&quot;object&quot;&gt;Object&lt;/a&gt;.</source>
          <target state="translated">トップレベルの匿名モジュールの親は&lt;a href=&quot;object&quot;&gt;Object&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="e70e4385028599bc0890d172e091f651173988f3" translate="yes" xml:space="preserve">
          <source>The path prefix for the routes.</source>
          <target state="translated">ルートのパスプレフィックス。</target>
        </trans-unit>
        <trans-unit id="8b49906b65248bb2a02d7efa1852cdde693d1597" translate="yes" xml:space="preserve">
          <source>The pattern used to match explicit dependencies is &lt;code&gt;/# Template
Dependency: (\S+)/&lt;/code&gt;, so it's important that you type it out just so. You can only declare one template dependency per line.</source>
          <target state="translated">明示的な依存関係を照合するために使用されるパターンは &lt;code&gt;/# Template Dependency: (\S+)/&lt;/code&gt; なので、正確に入力することが重要です。1行につき1つのテンプレート依存関係のみを宣言できます。</target>
        </trans-unit>
        <trans-unit id="202c79dce79999d668dd4c269eaef15bd452360a" translate="yes" xml:space="preserve">
          <source>The payload (described in previous sections)</source>
          <target state="translated">ペイロード(前のセクションで説明した</target>
        </trans-unit>
        <trans-unit id="19698fc3977432b8ba532562866f2175617a2f1e" translate="yes" xml:space="preserve">
          <source>The permitted scalar types are &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Symbol&lt;/code&gt;, &lt;code&gt;NilClass&lt;/code&gt;, &lt;code&gt;Numeric&lt;/code&gt;, &lt;code&gt;TrueClass&lt;/code&gt;, &lt;code&gt;FalseClass&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;Time&lt;/code&gt;, &lt;code&gt;DateTime&lt;/code&gt;, &lt;code&gt;StringIO&lt;/code&gt;, &lt;code&gt;IO&lt;/code&gt;, &lt;code&gt;ActionDispatch::Http::UploadedFile&lt;/code&gt;, and &lt;code&gt;Rack::Test::UploadedFile&lt;/code&gt;.</source>
          <target state="translated">許可されているスカラータイプは、 &lt;code&gt;String&lt;/code&gt; 、 &lt;code&gt;Symbol&lt;/code&gt; 、 &lt;code&gt;NilClass&lt;/code&gt; 、 &lt;code&gt;Numeric&lt;/code&gt; 、 &lt;code&gt;TrueClass&lt;/code&gt; 、 &lt;code&gt;FalseClass&lt;/code&gt; 、 &lt;code&gt;Date&lt;/code&gt; 、 &lt;code&gt;Time&lt;/code&gt; 、 &lt;code&gt;DateTime&lt;/code&gt; 、 &lt;code&gt;StringIO&lt;/code&gt; 、 &lt;code&gt;IO&lt;/code&gt; 、 &lt;code&gt;ActionDispatch::Http::UploadedFile&lt;/code&gt; 、および &lt;code&gt;Rack::Test::UploadedFile&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0d9fe577f207f6e519a775e2220ac855388fee63" translate="yes" xml:space="preserve">
          <source>The phrase &amp;ldquo;Updating salaries&amp;hellip;&amp;rdquo; would then be printed, along with the benchmark for the block when the block completes.</source>
          <target state="translated">ブロックが完了すると、「給与を更新しています...」というフレーズが、ブロックのベンチマークと共に印刷されます。</target>
        </trans-unit>
        <trans-unit id="211a16b14e6131fc9047c75ee343534532a31b7c" translate="yes" xml:space="preserve">
          <source>The pool first tries to gain ownership of all connections. If unable to do so within a timeout interval (default duration is &lt;code&gt;spec.config[:checkout_timeout] * 2&lt;/code&gt; seconds), then the pool forcefully clears the cache and reloads connections without any regard for other connection owning threads.</source>
          <target state="translated">プールは最初にすべての接続の所有権を取得しようとします。タイムアウト間隔（デフォルトの継続時間は &lt;code&gt;spec.config[:checkout_timeout] * 2&lt;/code&gt; 秒です）内に実行できない場合、プールはキャッシュを強制的にクリアし、他の接続所有スレッドに関係なく接続を再ロードします。</target>
        </trans-unit>
        <trans-unit id="b737fd02684471a726d9203f4d5534cf0b4a32c7" translate="yes" xml:space="preserve">
          <source>The pool first tries to gain ownership of all connections. If unable to do so within a timeout interval (default duration is &lt;code&gt;spec.config[:checkout_timeout] * 2&lt;/code&gt; seconds), then the pool is forcefully disconnected without any regard for other connection owning threads.</source>
          <target state="translated">プールは最初にすべての接続の所有権を取得しようとします。タイムアウト間隔（デフォルトの継続時間は &lt;code&gt;spec.config[:checkout_timeout] * 2&lt;/code&gt; 秒）内にこれを実行できない場合、プールは他の接続所有スレッドに関係なく強制的に切断されます。</target>
        </trans-unit>
        <trans-unit id="0b9aa36314226d9fc2457ceacd68160dd0193c9a" translate="yes" xml:space="preserve">
          <source>The popular Apache web server has an option called DocumentRoot. This is the home directory of the web site, everything in this directory tree will be served by the web server. If there are files with a certain file name extension, the code in it will be executed when requested (might require some options to be set). Examples for this are PHP and CGI files. Now think of a situation where an attacker uploads a file &quot;file.cgi&quot; with code in it, which will be executed when someone downloads the file.</source>
          <target state="translated">人気のあるApacheウェブサーバには、DocumentRootと呼ばれるオプションがあります。これはウェブサイトのホームディレクトリで、このディレクトリツリー内のすべてのものがウェブサーバによって提供されます。特定のファイル名の拡張子を持つファイルがある場合、要求されたときにその中のコードが実行されます (オプションの設定が必要かもしれません)。この例としては、PHPやCGIファイルなどがあります。ここで、攻撃者がコードを含むファイル &quot;file.cgi &quot;をアップロードした場合を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="dbdce44c77c959bd4862bc5a859508ac636ef124" translate="yes" xml:space="preserve">
          <source>The port number (integer) used for the request.</source>
          <target state="translated">リクエストに使用されたポート番号 (整数)。</target>
        </trans-unit>
        <trans-unit id="b079d046ffb4ec9ded1b387f3e0010827c056b99" translate="yes" xml:space="preserve">
          <source>The possible length constraint options are:</source>
          <target state="translated">可能な長さ制約オプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="4fce22dc56bb380decb3337ee172999502454fa4" translate="yes" xml:space="preserve">
          <source>The power of the &lt;code&gt;validates&lt;/code&gt; method comes when using custom validators and default validators in one call for a given attribute.</source>
          <target state="translated">&lt;code&gt;validates&lt;/code&gt; メソッドの威力は、特定の属性の1回の呼び出しでカスタムバリデーターとデフォルトバリデーターを使用するときに得られます。</target>
        </trans-unit>
        <trans-unit id="b6c43b0561e55dd6178731da78ad85e3a4b6c1e1" translate="yes" xml:space="preserve">
          <source>The precedence between model names is calculated using the &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; operator for &lt;code&gt;String&lt;/code&gt;. This means that if the strings are of different lengths, and the strings are equal when compared up to the shortest length, then the longer string is considered of higher lexical precedence than the shorter one. For example, one would expect the tables &quot;paper_boxes&quot; and &quot;papers&quot; to generate a join table name of &quot;papers_paper_boxes&quot; because of the length of the name &quot;paper_boxes&quot;, but it in fact generates a join table name of &quot;paper_boxes_papers&quot; (because the underscore '_' is lexicographically &lt;em&gt;less&lt;/em&gt; than 's' in common encodings).</source>
          <target state="translated">モデル名間の優先順位は、 &lt;code&gt;String&lt;/code&gt; の &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; 演算子を使用して計算されます。つまり、文字列の長さが異なり、最短の長さまで比較すると文字列が等しい場合、長い文字列は短い文字列よりも字句の優先順位が高いと見なされます。たとえば、「paper_boxes」と「papers」というテーブルは、「paper_boxes」という名前の長さのため、「papers_paper_boxes」という結合テーブル名を生成すると予想しますが、実際には「paper_boxes_papers」という結合テーブル名を生成します（アンダースコア '_'は辞書順では一般的なエンコーディングの 's'よりも&lt;em&gt;小さい&lt;/em&gt;ためです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1623bdf3d6d99614a33905e28305018e8da2ea92" translate="yes" xml:space="preserve">
          <source>The predicate &lt;code&gt;exclude?&lt;/code&gt; tests whether a given object does &lt;strong&gt;not&lt;/strong&gt; belong to the collection. It is the negation of the built-in &lt;code&gt;include?&lt;/code&gt;:</source>
          <target state="translated">述語は &lt;code&gt;exclude?&lt;/code&gt; 指定されたオブジェクトがコレクションに属してい&lt;strong&gt;ない&lt;/strong&gt;かどうかをテストします。組み込み &lt;code&gt;include?&lt;/code&gt; の否定ですか？：</target>
        </trans-unit>
        <trans-unit id="d30534585d78db0e871015ad6fc7ba29234362ff" translate="yes" xml:space="preserve">
          <source>The predicate &lt;code&gt;in?&lt;/code&gt; tests if an object is included in another object. An &lt;code&gt;ArgumentError&lt;/code&gt; exception will be raised if the argument passed does not respond to &lt;code&gt;include?&lt;/code&gt;.</source>
          <target state="translated">述語 &lt;code&gt;in?&lt;/code&gt; オブジェクトが別のオブジェクトに含まれているかどうかをテストします。アン &lt;code&gt;ArgumentError&lt;/code&gt; 応答しない渡された引数がする場合は、例外が発生します &lt;code&gt;include?&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="51cc5e243f6ab35d21893ecf5f94e037441bc436" translate="yes" xml:space="preserve">
          <source>The predicate &lt;code&gt;utc?&lt;/code&gt; says whether the receiver has UTC as its time zone:</source>
          <target state="translated">述語 &lt;code&gt;utc?&lt;/code&gt; 受信者がそのタイムゾーンとしてUTCを持っているかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="b750834b37ac4d51943f62e9387ff28a0575c379" translate="yes" xml:space="preserve">
          <source>The predicate for strings uses the Unicode-aware character class &lt;code&gt;[:space:]&lt;/code&gt;, so for example U+2029 (paragraph separator) is considered to be whitespace.</source>
          <target state="translated">文字列の述語はUnicode対応の文字クラス &lt;code&gt;[:space:]&lt;/code&gt; を使用するため、たとえばU + 2029（段落区切り文字）は空白と見なされます。</target>
        </trans-unit>
        <trans-unit id="dc6a93f70839243fa9e1d8408e34e2544f70a727" translate="yes" xml:space="preserve">
          <source>The preferred method of outputting text in your views is to use the &amp;lt;%= &amp;ldquo;text&amp;rdquo; %&amp;gt; eRuby syntax. The regular &lt;em&gt;puts&lt;/em&gt; and &lt;em&gt;print&lt;/em&gt; methods do not operate as expected in an eRuby code block. If you absolutely must output text within a non-output code block (i.e., &amp;lt;% %&amp;gt;), you can use the concat method.</source>
          <target state="translated">ビューにテキストを出力する推奨方法は、&amp;lt;％=&amp;ldquo; text&amp;rdquo;％&amp;gt; eRuby構文を使用することです。通常の&lt;em&gt;puts&lt;/em&gt;メソッドと&lt;em&gt;print&lt;/em&gt;メソッドは、eRubyコードブロックで期待どおりに動作しません。非出力コードブロック（&amp;lt;％％&amp;gt;など）内でテキストを出力する必要がある場合は、concatメソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="746374f648c11779fb7595faf543aa73a11667ec" translate="yes" xml:space="preserve">
          <source>The prefix is a generation timestamp (in UTC).</source>
          <target state="translated">プレフィックスは生成タイムスタンプ(UTC)です。</target>
        </trans-unit>
        <trans-unit id="d2dc8c1fb9d9a6e930ad3ad1f1962e294f759976" translate="yes" xml:space="preserve">
          <source>The prefix string to prepend to every table name.</source>
          <target state="translated">すべてのテーブル名の前に付加する接頭辞文字列。</target>
        </trans-unit>
        <trans-unit id="c8eb84352de12fc2e14e658df97f8e1dd7fc6ae7" translate="yes" xml:space="preserve">
          <source>The prefix type that will be prepended to every primary key column name. The options are &lt;code&gt;:table_name&lt;/code&gt; and &lt;code&gt;:table_name_with_underscore&lt;/code&gt;. If the first is specified, the Product class will look for &amp;ldquo;productid&amp;rdquo; instead of &amp;ldquo;id&amp;rdquo; as the primary column. If the latter is specified, the Product class will look for &amp;ldquo;product_id&amp;rdquo; instead of &amp;ldquo;id&amp;rdquo;. Remember that this is a global setting for all Active Records.</source>
          <target state="translated">すべての主キー列名に付加される接頭辞タイプ。オプションは &lt;code&gt;:table_name&lt;/code&gt; と &lt;code&gt;:table_name_with_underscore&lt;/code&gt; です。最初が指定されている場合、Productクラスはプライマリ列として「id」ではなく「productid」を検索します。後者が指定されている場合、Productクラスは「id」ではなく「product_id」を検索します。これはすべてのアクティブレコードのグローバル設定であることを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="76608f27ed33c279c84f9724f718d27ff86e52f7" translate="yes" xml:space="preserve">
          <source>The previous example generates &lt;code&gt;address_street&lt;/code&gt; rather than &lt;code&gt;street&lt;/code&gt;.</source>
          <target state="translated">前の例では、 &lt;code&gt;street&lt;/code&gt; ではなく &lt;code&gt;address_street&lt;/code&gt; を生成しています。</target>
        </trans-unit>
        <trans-unit id="bf79e4462cb7c0cd7769f456bd8a2b2988b51b2b" translate="yes" xml:space="preserve">
          <source>The previous sections did not use the Rails form helpers at all. While you can craft the input names yourself and pass them directly to helpers such as &lt;code&gt;text_field_tag&lt;/code&gt; Rails also provides higher level support. The two tools at your disposal here are the name parameter to &lt;code&gt;form_with&lt;/code&gt; and &lt;code&gt;fields_for&lt;/code&gt; and the &lt;code&gt;:index&lt;/code&gt; option that helpers take.</source>
          <target state="translated">前のセクションでは、Railsフォームヘルパーをまったく使用しませんでした。入力名を自分で作成し、 &lt;code&gt;text_field_tag&lt;/code&gt; などのヘルパーに直接渡すこともできますが、Railsはより高いレベルのサポートも提供します。ここで自由に使用できる2つのツールは、 &lt;code&gt;form_with&lt;/code&gt; と &lt;code&gt;fields_for&lt;/code&gt; の名前パラメーターと、ヘルパーが使用する &lt;code&gt;:index&lt;/code&gt; オプションです。</target>
        </trans-unit>
        <trans-unit id="e0e9047f925fbf67d1eb6f9a1ed3d116890223cc" translate="yes" xml:space="preserve">
          <source>The primary goal of the function &lt;code&gt;exec_app&lt;/code&gt; is to execute your app's &lt;code&gt;bin/rails&lt;/code&gt;. If the current directory does not have a &lt;code&gt;bin/rails&lt;/code&gt;, it will navigate upwards until it finds a &lt;code&gt;bin/rails&lt;/code&gt; executable. Thus one can invoke a &lt;code&gt;rails&lt;/code&gt; command from anywhere inside a rails application.</source>
          <target state="translated">関数 &lt;code&gt;exec_app&lt;/code&gt; の主な目的は、アプリの &lt;code&gt;bin/rails&lt;/code&gt; を実行することです。現在のディレクトリに &lt;code&gt;bin/rails&lt;/code&gt; がない場合は、 &lt;code&gt;bin/rails&lt;/code&gt; 実行可能ファイルが見つかるまで上に移動します。したがって、railsアプリケーション内のどこからでも &lt;code&gt;rails&lt;/code&gt; コマンドを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="374e971dc3ced2698c6060ed9d03807d33897f25" translate="yes" xml:space="preserve">
          <source>The primary key column name on &lt;code&gt;to_table&lt;/code&gt;. Defaults to &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;to_table&lt;/code&gt; の主キー列名。デフォルトは &lt;code&gt;id&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bac5ab3487ebac7ba2d2d20e1ec39fd6f57a8550" translate="yes" xml:space="preserve">
          <source>The primary key may auto-increment on each create, even if it fails. This can accelerate the problem of running out of integers, if the underlying table is still stuck on a primary key of type int (note: All Rails apps since 5.1+ have defaulted to bigint, which is not liable to this problem).</source>
          <target state="translated">失敗した場合でも、作成のたびに主キーがオートインクリメントされることがあります。これは、基礎となるテーブルがint型の主キーに固執している場合に、整数を使い果たす問題を加速させる可能性があります(注意:5.1+以降のすべてのRailsアプリはデフォルトでbigintになっており、この問題の原因にはなりません)。</target>
        </trans-unit>
        <trans-unit id="0e4104a011a461fd57d9f8ef9c0cc4734f38d19d" translate="yes" xml:space="preserve">
          <source>The primary operation of &lt;code&gt;Model.find(options)&lt;/code&gt; can be summarized as:</source>
          <target state="translated">&lt;code&gt;Model.find(options)&lt;/code&gt; の主な操作は、次のように要約できます。</target>
        </trans-unit>
        <trans-unit id="355491ae17fbdee22c249344fd63c33317a6c2c6" translate="yes" xml:space="preserve">
          <source>The primary options are:</source>
          <target state="translated">主な選択肢は</target>
        </trans-unit>
        <trans-unit id="e4fa3e65aa6bbe33b99dacd08bdbeb417dc2f95b" translate="yes" xml:space="preserve">
          <source>The procedure to autoload constant &lt;code&gt;C&lt;/code&gt; in an arbitrary situation is as follows:</source>
          <target state="translated">任意の状況で定数 &lt;code&gt;C&lt;/code&gt; を自動ロードする手順は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="8040e6c9ad1dcfe9ba2350e5dae6e0ddc3828236" translate="yes" xml:space="preserve">
          <source>The process of &quot;internationalization&quot; usually means to abstract all strings and other locale specific bits (such as date or currency formats) out of your application. The process of &quot;localization&quot; means to provide translations and localized formats for these bits.&lt;sup id=&quot;footnote-1-ref&quot;&gt;&lt;a href=&quot;#footnote-1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;</source>
          <target state="translated">「国際化」のプロセスは通常、アプリケーションからすべての文字列と他のロケール固有のビット（日付や通貨のフォーマットなど）を抽象化することを意味します。「ローカリゼーション」のプロセスは、これらのビットの翻訳とローカライズされたフォーマットを提供することを意味します。&lt;sup id=&quot;footnote-1-ref&quot;&gt;&lt;a href=&quot;#footnote-1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="bab12b63d1f444a4baf98767b36d0c0acab0c884" translate="yes" xml:space="preserve">
          <source>The process should go as follows:</source>
          <target state="translated">プロセスは以下のように行う必要があります。</target>
        </trans-unit>
        <trans-unit id="d247badcf31b8cb60f802528ca9ec9615802ad61" translate="yes" xml:space="preserve">
          <source>The program should report its version.</source>
          <target state="translated">プログラムは、そのバージョンを報告する必要があります。</target>
        </trans-unit>
        <trans-unit id="39be8745f83c23f980e50b68440fb75f28893215" translate="yes" xml:space="preserve">
          <source>The project class now has the following methods (and more) to ease the traversal and manipulation of its relationships:</source>
          <target state="translated">プロジェクトクラスには、以下のメソッドが追加されました (その他にも)。</target>
        </trans-unit>
        <trans-unit id="35e6836db7b86f1636ec6a98ca72c3104147db64" translate="yes" xml:space="preserve">
          <source>The proxy class returned when calling mb_chars. You can use this accessor to configure your own proxy class so you can support other encodings. See the &lt;a href=&quot;multibyte/chars&quot;&gt;ActiveSupport::Multibyte::Chars&lt;/a&gt; implementation for an example how to do this.</source>
          <target state="translated">mb_charsを呼び出したときに返されるプロキシクラス。このアクセサーを使用して独自のプロキシクラスを構成し、他のエンコーディングをサポートできます。これを行う方法の例については、&lt;a href=&quot;multibyte/chars&quot;&gt;ActiveSupport :: Multibyte :: Chars&lt;/a&gt;実装を参照してください。</target>
        </trans-unit>
        <trans-unit id="2db1dccdc41ae63a5d769078a53e229b53f03007" translate="yes" xml:space="preserve">
          <source>The proxy objects that control the access to associations can be extended through anonymous modules. This is especially beneficial for adding new finders, creators, and other factory-type methods that are only used as part of this association.</source>
          <target state="translated">アソシエーションへのアクセスを制御するプロキシオブジェクトは、匿名モジュールを介して拡張することができます。これは、このアソシエーションの一部としてのみ使用される新しいファインダーやクリエイター、その他のファクトリータイプのメソッドを追加する場合に特に有益です。</target>
        </trans-unit>
        <trans-unit id="cb2ef0a3f23683b82b3a7fc76ce94b0e0f988d66" translate="yes" xml:space="preserve">
          <source>The public API of the i18n framework - a Ruby module with public methods that define how the library works</source>
          <target state="translated">i18n フレームワークの公開 API-ライブラリの動作を定義する公開メソッドを持つ Ruby モジュール</target>
        </trans-unit>
        <trans-unit id="e2f3f6bc15534a07027a580fb53a5ce807cb0522" translate="yes" xml:space="preserve">
          <source>The public controller methods &lt;code&gt;respond_to&lt;/code&gt; may be called with a block that is used to define responses to different mime-types, e.g. for &lt;code&gt;respond_to&lt;/code&gt; :</source>
          <target state="translated">パブリック制御方法 &lt;code&gt;respond_to&lt;/code&gt; がために、例えば、異なるMIMEタイプに対する応答を定義するために使用されるブロックと呼ばれることもある &lt;code&gt;respond_to&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e523c677a1876a5d7712fcdf44f31a3393f986ba" translate="yes" xml:space="preserve">
          <source>The public path that Sprockets uses by default is &lt;code&gt;/assets&lt;/code&gt;.</source>
          <target state="translated">Sprocketsがデフォルトで使用するパブリックパスは &lt;code&gt;/assets&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b1c15f7c37361e4d62cc7d2ebb86fe446e3f202b" translate="yes" xml:space="preserve">
          <source>The purpose of debugging.</source>
          <target state="translated">デバッグの目的。</target>
        </trans-unit>
        <trans-unit id="bc7610d0ca7ba5f46a29cc2aff958d13007d672d" translate="yes" xml:space="preserve">
          <source>The purpose of this setup would be that the application uses the class that corresponds to the environment via &lt;code&gt;AUTH_SERVICE&lt;/code&gt;. In development mode &lt;code&gt;MockedAuthService&lt;/code&gt; gets autoloaded when the initializer runs. Let's suppose we do some requests, change its implementation, and hit the application again. To our surprise the changes are not reflected. Why?</source>
          <target state="translated">このセットアップの目的は、アプリケーションが &lt;code&gt;AUTH_SERVICE&lt;/code&gt; を介して環境に対応するクラスを使用することです。開発モードでは、イニシャライザの実行時に &lt;code&gt;MockedAuthService&lt;/code&gt; がオートロードされます。いくつかのリクエストを実行し、その実装を変更して、アプリケーションに再度アクセスしたとします。驚いたことに、変更は反映されていません。どうして？</target>
        </trans-unit>
        <trans-unit id="3b96e7010ad0263400b2ad5355a0f3d1d24d9569" translate="yes" xml:space="preserve">
          <source>The query string part of the URL, i.e., everything after &quot;?&quot;.</source>
          <target state="translated">URL のクエリ文字列の部分、つまり &quot;?</target>
        </trans-unit>
        <trans-unit id="963ede72d0dfa198743a61a0942634ecdbed773d" translate="yes" xml:space="preserve">
          <source>The query string strategy has several disadvantages:</source>
          <target state="translated">クエリ文字列戦略にはいくつかの欠点があります。</target>
        </trans-unit>
        <trans-unit id="9447d2ea713bcd10ab52cda886cd6cbf5d593b22" translate="yes" xml:space="preserve">
          <source>The rails commands that manipulate migrations and your schema.</source>
          <target state="translated">マイグレーションとスキーマを操作する rails コマンド。</target>
        </trans-unit>
        <trans-unit id="4e2911d154a61b6a5ba76018adc402ed58605ab3" translate="yes" xml:space="preserve">
          <source>The reason for this is that during development you'd usually want your views to still render even though a translation is missing.</source>
          <target state="translated">その理由は、開発中は通常、翻訳が欠けていてもビューをレンダリングしたいと思うからです。</target>
        </trans-unit>
        <trans-unit id="78dd8f5116b3d8b957ca4166352d82a58bb88405" translate="yes" xml:space="preserve">
          <source>The reason is that autoloading is triggered for the singleton class, which is anonymous, and as &lt;a href=&quot;#generic-procedure&quot;&gt;we saw before&lt;/a&gt;, Rails only checks the top-level namespace in that edge case.</source>
          <target state="translated">その理由は、匿名であるシングルトンクラスに対してオートローディングがトリガーされるためであり、&lt;a href=&quot;#generic-procedure&quot;&gt;前&lt;/a&gt;に見たように、Railsはそのエッジケースでトップレベルのネームスペースのみをチェックします。</target>
        </trans-unit>
        <trans-unit id="fbbbe01fb4a2a4d9cb2a8c25e4df69ba3ef590b0" translate="yes" xml:space="preserve">
          <source>The reason most people use Rails is that it provides a set of defaults that allows developers to get up and running quickly, without having to make a lot of trivial decisions.</source>
          <target state="translated">ほとんどの人がRailsを使っている理由は、開発者がつまらない決定をたくさんしなくてもすぐに立ち上がることができるように、デフォルトのセットを提供してくれるからです。</target>
        </trans-unit>
        <trans-unit id="25facf3920d52f7ea5f36c7e93e4e595a2175805" translate="yes" xml:space="preserve">
          <source>The reason why we added &lt;code&gt;@article = Article.new&lt;/code&gt; in the &lt;code&gt;ArticlesController&lt;/code&gt; is that otherwise &lt;code&gt;@article&lt;/code&gt; would be &lt;code&gt;nil&lt;/code&gt; in our view, and calling &lt;code&gt;@article.errors.any?&lt;/code&gt; would throw an error.</source>
          <target state="translated">我々は追加の理由 &lt;code&gt;@article = Article.new&lt;/code&gt; して &lt;code&gt;ArticlesController&lt;/code&gt; はそうでないということである &lt;code&gt;@article&lt;/code&gt; はなり &lt;code&gt;nil&lt;/code&gt; の我々の見解であり、呼び出し &lt;code&gt;@article.errors.any?&lt;/code&gt; エラーをスローします。</target>
        </trans-unit>
        <trans-unit id="cec56727dcf557c3b63bdfe82a9a3a16d8e16121" translate="yes" xml:space="preserve">
          <source>The rebroadcast will be received by all connected clients, &lt;em&gt;including&lt;/em&gt; the client that sent the message. Note that params are the same as they were when you subscribed to the channel.</source>
          <target state="translated">再ブロードキャストは、メッセージを送信したクライアントを&lt;em&gt;含む&lt;/em&gt;、接続されているすべてのクライアントによって受信されます。パラメータは、チャンネルに登録したときと同じであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="34a3cd9fd5339aaaefab9615beb498916c347532" translate="yes" xml:space="preserve">
          <source>The redirection happens as a &lt;code&gt;302 Found&lt;/code&gt; header unless otherwise specified using the &lt;code&gt;:status&lt;/code&gt; option:</source>
          <target state="translated">&lt;code&gt;:status&lt;/code&gt; オプションを使用して特に指定されていない限り、リダイレクトは &lt;code&gt;302 Found&lt;/code&gt; ヘッダーとして発生します。</target>
        </trans-unit>
        <trans-unit id="6fc33772c67a94f60777ad03a5f62d48d81352f8" translate="yes" xml:space="preserve">
          <source>The reference column type. Defaults to &lt;code&gt;:bigint&lt;/code&gt;.</source>
          <target state="translated">参照列タイプ。デフォルトは &lt;code&gt;:bigint&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d9352b43be8aa84da2f638620572a5ccea912a66" translate="yes" xml:space="preserve">
          <source>The referrer information is pulled from the HTTP &lt;code&gt;Referer&lt;/code&gt; (sic) header on the request. This is an optional header and its presence on the request is subject to browser security settings and user preferences. If the request is missing this header, the &lt;code&gt;fallback_location&lt;/code&gt; will be used.</source>
          <target state="translated">リファラ情報がHTTPから引き出され &lt;code&gt;Referer&lt;/code&gt; リクエストに（SIC）ヘッダ。これはオプションのヘッダーであり、要求に対するその存在は、ブラウザーのセキュリティ設定とユーザー設定の影響を受けます。リクエストにこのヘッダーがない場合、 &lt;code&gt;fallback_location&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="eb49b45c4a2d1a85d2d9af882862e039d5010fcc" translate="yes" xml:space="preserve">
          <source>The rendered template is &lt;code&gt;people/_labelling_form&lt;/code&gt; and the local variable referencing the form builder is called &lt;code&gt;labelling_form&lt;/code&gt;.</source>
          <target state="translated">レンダリングされたテンプレートは &lt;code&gt;people/_labelling_form&lt;/code&gt; であり、フォームビルダーを参照するローカル変数は &lt;code&gt;labelling_form&lt;/code&gt; と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="63f684b0b47877c550e81776857431c7164bacd0" translate="yes" xml:space="preserve">
          <source>The request body is an IO input stream. If the RAW_POST_DATA environment variable is already set, wrap it in a StringIO.</source>
          <target state="translated">リクエストボディはIO入力ストリームです。環境変数RAW_POST_DATAが既に設定されている場合は、StringIOでラップします。</target>
        </trans-unit>
        <trans-unit id="5618400bb0c662f7a9044a9e92d762488642b3ee" translate="yes" xml:space="preserve">
          <source>The request object contains a lot of useful information about the request coming in from the client. To get a full list of the available methods, refer to the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Request.html&quot;&gt;Rails API documentation&lt;/a&gt; and &lt;a href=&quot;https://www.rubydoc.info/github/rack/rack/Rack/Request&quot;&gt;Rack Documentation&lt;/a&gt;. Among the properties that you can access on this object are:</source>
          <target state="translated">リクエストオブジェクトには、クライアントからのリクエストに関する多くの有用な情報が含まれています。使用可能なメソッドの完全なリストを取得するには、&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Request.html&quot;&gt;Rails APIドキュメント&lt;/a&gt;および&lt;a href=&quot;https://www.rubydoc.info/github/rack/rack/Rack/Request&quot;&gt;Rackドキュメントを&lt;/a&gt;参照してください。このオブジェクトでアクセスできるプロパティには、次のものがあります。</target>
        </trans-unit>
        <trans-unit id="447adfed7e1b075f5907827838b9d68713be5f5a" translate="yes" xml:space="preserve">
          <source>The request that initiated the WebSocket connection is available here. This gives access to the environment, cookies, etc.</source>
          <target state="translated">WebSocket接続を開始したリクエストはこちらで確認できます。これにより、環境やクッキーなどへのアクセスが可能になります。</target>
        </trans-unit>
        <trans-unit id="2ebe4d5fe508222930c3bc355f953f8b7e69a836" translate="yes" xml:space="preserve">
          <source>The request that the response is responding to.</source>
          <target state="translated">レスポンスが返ってくるリクエスト。</target>
        </trans-unit>
        <trans-unit id="8c0d63c0e9b70807564233148a1c2dbdea492502" translate="yes" xml:space="preserve">
          <source>The request to this asset is then served by the Sprockets gem.</source>
          <target state="translated">このアセットへのリクエストは、Sprockets gemによって提供されます。</target>
        </trans-unit>
        <trans-unit id="a13bac9dbc4228aac718c2160238ae2f74224f6d" translate="yes" xml:space="preserve">
          <source>The request variant is a specialization of the request format, like &lt;code&gt;:tablet&lt;/code&gt;, &lt;code&gt;:phone&lt;/code&gt;, or &lt;code&gt;:desktop&lt;/code&gt;.</source>
          <target state="translated">リクエストバリアントは、 &lt;code&gt;:tablet&lt;/code&gt; 、 &lt;code&gt;:phone&lt;/code&gt; 、 &lt;code&gt;:desktop&lt;/code&gt; などのリクエスト形式を特殊化したものです。</target>
        </trans-unit>
        <trans-unit id="1c6f31a993c883608b49486cf93c169ad92d6226" translate="yes" xml:space="preserve">
          <source>The requirements for implementing &lt;a href=&quot;dirty&quot;&gt;ActiveModel::Dirty&lt;/a&gt; are:</source>
          <target state="translated">&lt;a href=&quot;dirty&quot;&gt;ActiveModel :: Dirty&lt;/a&gt;を実装するための要件は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="c89ab6641453bcf8d055aa8bc68cd2cd8cab4f65" translate="yes" xml:space="preserve">
          <source>The requirements to implement &lt;code&gt;ActiveModel::AttributeMethods&lt;/code&gt; are to:</source>
          <target state="translated">&lt;code&gt;ActiveModel::AttributeMethods&lt;/code&gt; を実装するための要件は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="300f2949996e658ac115ccea16fe17506d448ce0" translate="yes" xml:space="preserve">
          <source>The resolver class defines when the application should switch (i.e. read from the primary if a write occurred less than 2 seconds ago) and a resolver context class that sets a value that helps the resolver class decide when to switch.</source>
          <target state="translated">リゾルバクラスは、アプリケーションがいつ切り替えるべきかを定義します(例えば、書き込みが2秒未満前に発生した場合はプライマリから読み込みます)。</target>
        </trans-unit>
        <trans-unit id="15f2c7d083db22a8119db70913a3db4aaad993bc" translate="yes" xml:space="preserve">
          <source>The resource and all segments will now route to /postings instead of /posts.</source>
          <target state="translated">リソースとすべてのセグメントは、/posts の代わりに /postings にルーティングされるようになりました。</target>
        </trans-unit>
        <trans-unit id="beaa87f3d21ecbfe45641f3a86ee4784a14c6812" translate="yes" xml:space="preserve">
          <source>The response code of the request.</source>
          <target state="translated">リクエストのレスポンスコード。</target>
        </trans-unit>
        <trans-unit id="0c493831110ba9d815114c381b8f94946676425e" translate="yes" xml:space="preserve">
          <source>The response object is not usually used directly, but is built up during the execution of the action and rendering of the data that is being sent back to the user, but sometimes - like in an after filter - it can be useful to access the response directly. Some of these accessor methods also have setters, allowing you to change their values. To get a full list of the available methods, refer to the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Response.html&quot;&gt;Rails API documentation&lt;/a&gt; and &lt;a href=&quot;https://www.rubydoc.info/github/rack/rack/Rack/Response&quot;&gt;Rack Documentation&lt;/a&gt;.</source>
          <target state="translated">応答オブジェクトは通常直接使用されませんが、アクションの実行中、およびユーザーに送り返されるデータのレンダリング中に構築されますが、時々-後フィルターのように-応答にアクセスすると役立つ場合があります直接。これらのアクセサメソッドの一部にはセッターもあり、値を変更できます。使用可能なメソッドの完全なリストを取得するには、&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Response.html&quot;&gt;Rails APIドキュメント&lt;/a&gt;および&lt;a href=&quot;https://www.rubydoc.info/github/rack/rack/Rack/Response&quot;&gt;Rackドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="cbf34bbcf94a3cd1f50b6c287697c3d57ed72cb5" translate="yes" xml:space="preserve">
          <source>The rest of &lt;code&gt;config/application.rb&lt;/code&gt; defines the configuration for the &lt;code&gt;Rails::Application&lt;/code&gt; which will be used once the application is fully initialized. When &lt;code&gt;config/application.rb&lt;/code&gt; has finished loading Rails and defined the application namespace, we go back to &lt;code&gt;config/environment.rb&lt;/code&gt;. Here, the application is initialized with &lt;code&gt;Rails.application.initialize!&lt;/code&gt;, which is defined in &lt;code&gt;rails/application.rb&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;config/application.rb&lt;/code&gt; の残りの部分は、アプリケーションが完全に初期化されると使用される &lt;code&gt;Rails::Application&lt;/code&gt; 構成を定義します。とき &lt;code&gt;config/application.rb&lt;/code&gt; 完成負荷Railsと定義されたアプリケーションの名前空間を持って、我々はに戻って行く &lt;code&gt;config/environment.rb&lt;/code&gt; 。ここでは、アプリケーションは &lt;code&gt;Rails.application.initialize!&lt;/code&gt; で初期化されています。、これは &lt;code&gt;rails/application.rb&lt;/code&gt; で定義されています。</target>
        </trans-unit>
        <trans-unit id="effb5614fd27c25befd2c6d1b8f3efd5ba7fd3b2" translate="yes" xml:space="preserve">
          <source>The rest of this guide describes the mechanisms Rails uses to make it &quot;mostly ignorable&quot;, and how extensions and applications with special needs can use them.</source>
          <target state="translated">このガイドの残りの部分では、Railsが「ほとんど無視できる」ようにするために使用するメカニズムと、特別なニーズを持つ拡張機能やアプリケーションがどのように使用できるかについて説明しています。</target>
        </trans-unit>
        <trans-unit id="74aecee2b54888a4b816d341feda0b0331477ef2" translate="yes" xml:space="preserve">
          <source>The result after rendering is:</source>
          <target state="translated">レンダリング後の結果は</target>
        </trans-unit>
        <trans-unit id="dcd568ad6b005de288f75e8fe0668cc29b612d27" translate="yes" xml:space="preserve">
          <source>The result is marked as HTML-safe, but it is escaped by default, unless &lt;code&gt;:escape&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;. Care should be taken if &lt;code&gt;text&lt;/code&gt; contains HTML tags or entities, because truncation may produce invalid HTML (such as unbalanced or incomplete tags).</source>
          <target state="translated">結果はHTMLセーフとしてマークされますが、 &lt;code&gt;:escape&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; でない限り、デフォルトでエスケープされます。 &lt;code&gt;text&lt;/code&gt; にHTMLタグまたはエンティティが含まれている場合は、切り捨てによって無効なHTML（タグの不均衡または不完全など）が生成される可能性があるため、注意が必要です。</target>
        </trans-unit>
        <trans-unit id="a25ad2e87bf95b7cfc6b0056a7f16420a069ff66" translate="yes" xml:space="preserve">
          <source>The result may contain alphanumeric characters except 0, O, I and l.</source>
          <target state="translated">結果には、0、O、I、l以外の英数字が含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="59041e876a7fc33927f1114587cb2013250c8716" translate="yes" xml:space="preserve">
          <source>The result of rendering this page into the supplied layout would be this HTML:</source>
          <target state="translated">このページを指定されたレイアウトにレンダリングした結果は、次のような HTML になります。</target>
        </trans-unit>
        <trans-unit id="ce4233cf4e68b15da2f7f962c3aa058e81e088f1" translate="yes" xml:space="preserve">
          <source>The result should be something like this:</source>
          <target state="translated">結果はこんな感じになるはずです。</target>
        </trans-unit>
        <trans-unit id="346e462e239bdd14b4a628c87f5eadb465a3a2fa" translate="yes" xml:space="preserve">
          <source>The result will contain alphanumeric characters in lowercase.</source>
          <target state="translated">結果には英数字の小文字が含まれます。</target>
        </trans-unit>
        <trans-unit id="0adb8a1307684faa2f86601a21cfe31f030157a8" translate="yes" xml:space="preserve">
          <source>The result won't be a list of projects (because there is no project with an empty name), but a list of user names and their password. So hopefully you encrypted the passwords in the database! The only problem for the attacker is, that the number of columns has to be the same in both queries. That's why the second query includes a list of ones (1), which will be always the value 1, in order to match the number of columns in the first query.</source>
          <target state="translated">結果はプロジェクトのリストではなく(空の名前のプロジェクトはないので)、ユーザ名とそのパスワードのリストになります。うまくいけば、データベース内のパスワードが暗号化されていることを願っています。攻撃者にとっての唯一の問題は、両方のクエリでカラム数を同じにしなければならないことです。そのため、2 番目のクエリでは、1 番目のクエリのカラム数と一致させるために、常に 1 の値を持つ 1 のリストが含まれています。</target>
        </trans-unit>
        <trans-unit id="e70fb1c2729e8458de00d32c3591467e2d7aa855" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;Mail::Message&lt;/code&gt; will have the following in its header:</source>
          <target state="translated">結果の &lt;code&gt;Mail::Message&lt;/code&gt; は、ヘッダーに次のようになります。</target>
        </trans-unit>
        <trans-unit id="99d61cd3773bc4d60f3270a01f2095c107751685" translate="yes" xml:space="preserve">
          <source>The resulting HTML is:</source>
          <target state="translated">結果のHTMLは</target>
        </trans-unit>
        <trans-unit id="291698672d11962c8bb088e3306823ab4309b2d4" translate="yes" xml:space="preserve">
          <source>The retrieved record may vary depending on the database engine.</source>
          <target state="translated">検索されるレコードは、データベースエンジンによって異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="9f55e694c225f295d0bdcccba3be020d10a4d8fa" translate="yes" xml:space="preserve">
          <source>The return of capture is the string generated by the block. For Example:</source>
          <target state="translated">キャプチャの戻り値は、ブロックによって生成された文字列です。例としては、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="4ddd68cea8d0fe03eb2943356aa27557616b7f05" translate="yes" xml:space="preserve">
          <source>The return value from the block passed to &lt;code&gt;direct&lt;/code&gt; must be a valid set of arguments for &lt;code&gt;url_for&lt;/code&gt; which will actually build the URL string. This can be one of the following:</source>
          <target state="translated">&lt;code&gt;direct&lt;/code&gt; に渡されるブロックからの戻り値は、実際にURL文字列を構築する &lt;code&gt;url_for&lt;/code&gt; の有効な引数のセットである必要があります。これは次のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="154e88df68e99f69cd0b483c47a5ada31a856800" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;to_param&lt;/code&gt; should &lt;strong&gt;not&lt;/strong&gt; be escaped:</source>
          <target state="translated">&lt;code&gt;to_param&lt;/code&gt; の戻り値はエスケープし&lt;strong&gt;ない&lt;/strong&gt;でください：</target>
        </trans-unit>
        <trans-unit id="c3147580f8522c424243090e61bbb85df53db8c8" translate="yes" xml:space="preserve">
          <source>The return value of the block must be a valid argument for the &lt;code&gt;url_for&lt;/code&gt; method. So, you can pass a valid string URL, Hash, Array, an Active Model instance, or an Active Model class.</source>
          <target state="translated">ブロックの戻り値は、 &lt;code&gt;url_for&lt;/code&gt; メソッドの有効な引数である必要があります。したがって、有効な文字列URL、ハッシュ、配列、アクティブモデルインスタンス、またはアクティブモデルクラスを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="712cb04b5cda0c9344ce367414c9f233585347f5" translate="yes" xml:space="preserve">
          <source>The return value of this method will be returned from &lt;a href=&quot;../../activerecord/attributemethods/read#method-i-read_attribute&quot;&gt;ActiveRecord::AttributeMethods::Read#read_attribute&lt;/a&gt;. See also: &lt;a href=&quot;value#method-i-cast_value&quot;&gt;#cast_value&lt;/a&gt;.</source>
          <target state="translated">このメソッドの戻り値は、&lt;a href=&quot;../../activerecord/attributemethods/read#method-i-read_attribute&quot;&gt;ActiveRecord :: AttributeMethods :: Read＃read_attribute&lt;/a&gt;から返されます。&lt;a href=&quot;value#method-i-cast_value&quot;&gt;#cast_value&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="02d062788bd9bee681b003f51a10c4ddc35a0f20" translate="yes" xml:space="preserve">
          <source>The return value of this method will implement the interface described by &lt;a href=&quot;../../activemodel/type/value&quot;&gt;ActiveModel::Type::Value&lt;/a&gt; (though the object itself may not subclass it).</source>
          <target state="translated">このメソッドの戻り値は、&lt;a href=&quot;../../activemodel/type/value&quot;&gt;ActiveModel :: Type :: Value&lt;/a&gt;によって記述されたインターフェイスを実装します（オブジェクト自体はサブクラス化しない場合があります）。</target>
        </trans-unit>
        <trans-unit id="8151c4f5afe49e75a934b72f81a8df8a8e3d9b5f" translate="yes" xml:space="preserve">
          <source>The returned relation implements the Null &lt;a href=&quot;../object&quot;&gt;Object&lt;/a&gt; pattern. It is an object with defined null behavior and always returns an empty array of records without querying the database.</source>
          <target state="translated">返される関係は、Null &lt;a href=&quot;../object&quot;&gt;オブジェクト&lt;/a&gt;パターンを実装します。これはnullの動作が定義されたオブジェクトであり、常にデータベースに問い合わせることなく、空のレコード配列を返します。</target>
        </trans-unit>
        <trans-unit id="a8a176bf29706fa37ad63399ebcd21c506e08a48" translate="yes" xml:space="preserve">
          <source>The reverse of &lt;a href=&quot;inflector#method-i-pluralize&quot;&gt;pluralize&lt;/a&gt;, returns the singular form of a word in a string.</source>
          <target state="translated">&lt;a href=&quot;inflector#method-i-pluralize&quot;&gt;pluralize&lt;/a&gt;の逆は、文字列内の単語の単数形を返します。</target>
        </trans-unit>
        <trans-unit id="f0c5f4b12a37e16bfe4b06dcf4213f26c624b861" translate="yes" xml:space="preserve">
          <source>The reverse of &lt;code&gt;camelize&lt;/code&gt;. Makes an underscored, lowercase form from the expression in the string.</source>
          <target state="translated">&lt;code&gt;camelize&lt;/code&gt; の逆。文字列の式から下線付きの小文字形式を作成します。</target>
        </trans-unit>
        <trans-unit id="49c3882be12d0dbab48454dd420e872739fa4014" translate="yes" xml:space="preserve">
          <source>The reverse of &lt;code&gt;pluralize&lt;/code&gt;, returns the singular form of a word in a string.</source>
          <target state="translated">&lt;code&gt;pluralize&lt;/code&gt; の逆は、文字列内の単語の単数形を返します。</target>
        </trans-unit>
        <trans-unit id="5a2f5d042f75acbe0f3e7548eed90e866ea9799c" translate="yes" xml:space="preserve">
          <source>The rightmost argument to &lt;code&gt;form_for&lt;/code&gt; is an optional hash of options -</source>
          <target state="translated">&lt;code&gt;form_for&lt;/code&gt; の右端の引数はオプションのオプションハッシュです-</target>
        </trans-unit>
        <trans-unit id="a9a9612e7634415916c2149adc277d52fac00916" translate="yes" xml:space="preserve">
          <source>The root node reflects the class name of the first element in plural if all elements belong to the same type and that's not Hash:</source>
          <target state="translated">ルートノードは、すべての要素が同じ型に属し、それがHashではない場合、最初の要素のクラス名を複数形で反映します。</target>
        </trans-unit>
        <trans-unit id="924c9739d75001033fe4a310f64ac55258d3feec" translate="yes" xml:space="preserve">
          <source>The route key also considers if the noun is uncountable and, in such cases, automatically appends _index.</source>
          <target state="translated">ルートキーは、名詞がカウント不能であるかどうかも考慮し、その場合は自動的に_indexを追加します。</target>
        </trans-unit>
        <trans-unit id="f42ca910b8cf2641923a9b3307cb94acee7c74ce" translate="yes" xml:space="preserve">
          <source>The route name (if any)</source>
          <target state="translated">ルート名(あれば</target>
        </trans-unit>
        <trans-unit id="d73914cf8b9c98e84c8b82ff0505113e4b8e3e02" translate="yes" xml:space="preserve">
          <source>The route now exists, but the controller that this route goes to does not. To create it, run this command from the application root:</source>
          <target state="translated">ルートは存在しますが、このルートの先のコントローラは存在しません。これを作成するには、アプリケーションのルートから以下のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="9b9c1a0a0514b0f65210493280e8a71f86fdbca5" translate="yes" xml:space="preserve">
          <source>The route's action.</source>
          <target state="translated">ルートの行動。</target>
        </trans-unit>
        <trans-unit id="163a12e69171016995c19135436c2a61402b497f" translate="yes" xml:space="preserve">
          <source>The route's controller.</source>
          <target state="translated">ルートのコントローラ。</target>
        </trans-unit>
        <trans-unit id="9ea35eca50e9266731ea2e3982089ae64656d971" translate="yes" xml:space="preserve">
          <source>The routes for your application or engine live in the file &lt;code&gt;config/routes.rb&lt;/code&gt; and typically looks like this:</source>
          <target state="translated">アプリケーションまたはエンジンのルートは、 &lt;code&gt;config/routes.rb&lt;/code&gt; ファイルにあり、通常は次のようになります。</target>
        </trans-unit>
        <trans-unit id="d98c7c75f450c601067f23fdeb5247891ee46349" translate="yes" xml:space="preserve">
          <source>The routing module provides URL rewriting in native Ruby. It's a way to redirect incoming requests to controllers and actions. This replaces mod_rewrite rules. Best of all, Rails' Routing works with any web server. Routes are defined in &lt;code&gt;config/routes.rb&lt;/code&gt;.</source>
          <target state="translated">ルーティングモジュールは、ネイティブRubyでURL書き換えを提供します。これは、着信要求をコントローラーとアクションにリダイレクトする方法です。これはmod_rewriteルールを置き換えます。何よりも、RailsのルーティングはどのWebサーバーでも機能します。ルートは &lt;code&gt;config/routes.rb&lt;/code&gt; で定義されています。</target>
        </trans-unit>
        <trans-unit id="43b869ffdbb23efddcd2f11588a9dd772e5b663c" translate="yes" xml:space="preserve">
          <source>The routing parameters for the route</source>
          <target state="translated">ルートのルーティングパラメータ</target>
        </trans-unit>
        <trans-unit id="5c1e7a884f603d0cb7012c9790df3b850851f848" translate="yes" xml:space="preserve">
          <source>The row is simply removed with an SQL &lt;code&gt;DELETE&lt;/code&gt; statement on the record's primary key, and no callbacks are executed.</source>
          <target state="translated">行は、レコードの主キーに対するSQL &lt;code&gt;DELETE&lt;/code&gt; ステートメントで単純に削除され、コールバックは実行されません。</target>
        </trans-unit>
        <trans-unit id="57647ca6535b32390105386b22f168aaa4fd171c" translate="yes" xml:space="preserve">
          <source>The safety bit is lost always, no matter whether the transformation actually changed something.</source>
          <target state="translated">変形が実際に何かを変えたかどうかに関わらず、安全ビットは常に失われています。</target>
        </trans-unit>
        <trans-unit id="aefe907ee6913d67f5922b327093209a576a180b" translate="yes" xml:space="preserve">
          <source>The same as &lt;code&gt;content_for&lt;/code&gt; but when used with streaming flushes straight back to the layout. In other words, if you want to concatenate several times to the same buffer when rendering a given template, you should use &lt;code&gt;content_for&lt;/code&gt;, if not, use &lt;code&gt;provide&lt;/code&gt; to tell the layout to stop looking for more contents.</source>
          <target state="translated">&lt;code&gt;content_for&lt;/code&gt; と同じですが、ストリーミングで使用すると、レイアウトに直接フラッシュされます。つまり、特定のテンプレートをレンダリングするときに同じバッファに複数回連結したい場合は、 &lt;code&gt;content_for&lt;/code&gt; を使用する必要があります。そうでない場合は、 &lt;code&gt;provide&lt;/code&gt; を使用して、レイアウトがコンテンツの検索を停止するように指示します。</target>
        </trans-unit>
        <trans-unit id="9953b98c64e5ffc7f405323c6a791708f94ff6a1" translate="yes" xml:space="preserve">
          <source>The same format can be used to set carbon copy (Cc:) and blind carbon copy (Bcc:) recipients, by using the &lt;code&gt;:cc&lt;/code&gt; and &lt;code&gt;:bcc&lt;/code&gt; keys respectively.</source>
          <target state="translated">同じ形式を使用して、それぞれ &lt;code&gt;:cc&lt;/code&gt; および &lt;code&gt;:bcc&lt;/code&gt; キーを使用することにより、カーボンコピー（Cc :)およびブラインドカーボンコピー（Bcc :)の受信者を設定できます。</target>
        </trans-unit>
        <trans-unit id="2e706e64542efdac4f02a3ddcdaaa1983b14beed" translate="yes" xml:space="preserve">
          <source>The same migration could also have been written without using &lt;code&gt;revert&lt;/code&gt; but this would have involved a few more steps: reversing the order of &lt;code&gt;create_table&lt;/code&gt; and &lt;code&gt;reversible&lt;/code&gt;, replacing &lt;code&gt;create_table&lt;/code&gt; by &lt;code&gt;drop_table&lt;/code&gt;, and finally replacing &lt;code&gt;up&lt;/code&gt; by &lt;code&gt;down&lt;/code&gt; and vice-versa. This is all taken care of by &lt;code&gt;revert&lt;/code&gt;.</source>
          <target state="translated">同じ移行も使用せずに書かれている可能性が &lt;code&gt;revert&lt;/code&gt; が、これはさらにいくつかのステップを含んでいたでしょう：の順序逆転 &lt;code&gt;create_table&lt;/code&gt; と &lt;code&gt;reversible&lt;/code&gt; 、交換 &lt;code&gt;create_table&lt;/code&gt; により &lt;code&gt;drop_table&lt;/code&gt; 、そして最終的に置き換える &lt;code&gt;up&lt;/code&gt; により &lt;code&gt;down&lt;/code&gt; し、その逆。これはすべて &lt;code&gt;revert&lt;/code&gt; によって処理されます。</target>
        </trans-unit>
        <trans-unit id="ae2cbbfb58ef1b4d1438f7be95f11bb462578b7d" translate="yes" xml:space="preserve">
          <source>The same remarks about ordering made above apply. In particular, you can specify individual files and they are compiled in the order specified. For example, you might concatenate three CSS files together this way:</source>
          <target state="translated">順番については、上記と同様の注意事項が適用されます。特に、個々のファイルを指定することができ、指定された順番でコンパイルされます。例えば、3つのCSSファイルをこのように連結することができます。</target>
        </trans-unit>
        <trans-unit id="f697c996741525baca91a161ef79961528f0bca1" translate="yes" xml:space="preserve">
          <source>The same works with &lt;code&gt;javascript_include_tag&lt;/code&gt;:</source>
          <target state="translated">同じことが &lt;code&gt;javascript_include_tag&lt;/code&gt; でも機能します。</target>
        </trans-unit>
        <trans-unit id="902eca9fb9857fe6b9624eac04a7cecf345099d8" translate="yes" xml:space="preserve">
          <source>The schema dumper adds two additional configuration options:</source>
          <target state="translated">スキーマダンパは、2つの設定オプションを追加します。</target>
        </trans-unit>
        <trans-unit id="0c53c10237ef4bddb7676d2ae3b7456838e0a982" translate="yes" xml:space="preserve">
          <source>The screenshot will be displayed in your console, if supported.</source>
          <target state="translated">スクリーンショットは、サポートされていればコンソールに表示されます。</target>
        </trans-unit>
        <trans-unit id="abfd5ddb1b891ad695041019063c671d48b40a8e" translate="yes" xml:space="preserve">
          <source>The search, telephone, date, time, color, datetime, datetime-local, month, week, URL, email, number, and range inputs are HTML5 controls. If you require your app to have a consistent experience in older browsers, you will need an HTML5 polyfill (provided by CSS and/or JavaScript). There is definitely &lt;a href=&quot;https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills&quot;&gt;no shortage of solutions for this&lt;/a&gt;, although a popular tool at the moment is &lt;a href=&quot;https://modernizr.com/&quot;&gt;Modernizr&lt;/a&gt;, which provides a simple way to add functionality based on the presence of detected HTML5 features.</source>
          <target state="translated">検索、電話、日付、時刻、色、日時、日時ローカル、月、週、URL、電子メール、数値、および範囲の入力は、HTML5コントロールです。古いブラウザで一貫したエクスペリエンスをアプリに持たせる必要がある場合は、HTML5ポリフィル（CSSやJavaScriptによって提供される）が必要です。現時点で人気のあるツールである&lt;a href=&quot;https://modernizr.com/&quot;&gt;Modernizrは&lt;/a&gt;、検出されたHTML5機能の存在に基づいて機能を追加する簡単な方法を提供しますが、&lt;a href=&quot;https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills&quot;&gt;これに対する解決策&lt;/a&gt;は間違いなくありません。</target>
        </trans-unit>
        <trans-unit id="d921cbf4d775ce5249e42b24eb44f85bf4cbff38" translate="yes" xml:space="preserve">
          <source>The second argument indicates whether the callback is to be run &lt;code&gt;:before&lt;/code&gt;, &lt;code&gt;:after&lt;/code&gt;, or &lt;code&gt;:around&lt;/code&gt; the event. If omitted, &lt;code&gt;:before&lt;/code&gt; is assumed. This means the first example above can also be written as:</source>
          <target state="translated">2番目の引数は、コールバックをイベントの &lt;code&gt;:before&lt;/code&gt; に &lt;code&gt;:after&lt;/code&gt; before、：after、または &lt;code&gt;:around&lt;/code&gt; のどちらで実行するかを示します。省略した場合、 &lt;code&gt;:before&lt;/code&gt; が想定されます。つまり、上記の最初の例は次のように書くこともできます。</target>
        </trans-unit>
        <trans-unit id="9af4d188053d675b615bd09c5b2ebeed2870fe55" translate="yes" xml:space="preserve">
          <source>The second argument, &lt;code&gt;indent_string&lt;/code&gt;, specifies which indent string to use. The default is &lt;code&gt;nil&lt;/code&gt;, which tells the method to make a guess by peeking at the first indented line, and fallback to a space if there is none.</source>
          <target state="translated">2番目の引数 &lt;code&gt;indent_string&lt;/code&gt; は、使用するインデント文字列を指定します。デフォルトは &lt;code&gt;nil&lt;/code&gt; です。これは、最初のインデントされた行をピークから推測して、何もない場合はスペースにフォールバックするようにメソッドに指示します。</target>
        </trans-unit>
        <trans-unit id="4cb8c9f7b08002ccee566978dd1cbdbd3f7197a5" translate="yes" xml:space="preserve">
          <source>The second argument, &lt;code&gt;indent_string&lt;/code&gt;, specifies which indent string to use. The default is &lt;code&gt;nil&lt;/code&gt;, which tells the method to make an educated guess peeking at the first indented line, and fallback to a space if there is none.</source>
          <target state="translated">2番目の引数 &lt;code&gt;indent_string&lt;/code&gt; は、使用するインデント文字列を指定します。デフォルトは &lt;code&gt;nil&lt;/code&gt; です。これは、最初のインデントされた行で教育的な推測をピークにして、何もない場合はスペースにフォールバックするようにメソッドに指示します。</target>
        </trans-unit>
        <trans-unit id="b0c1c629ea994f2987ea56b45bca30e917233746" translate="yes" xml:space="preserve">
          <source>The second feature of the asset pipeline is asset minification or compression. For CSS files, this is done by removing whitespace and comments. For JavaScript, more complex processes can be applied. You can choose from a set of built in options or specify your own.</source>
          <target state="translated">アセットパイプラインの2つ目の機能は、アセットのミニ化または圧縮です。CSS ファイルの場合、これは空白やコメントを削除することで行われます。JavaScript の場合は、より複雑な処理を適用することができます。ビルトインされたオプションのセットから選択するか、独自のオプションを指定することができます。</target>
        </trans-unit>
        <trans-unit id="fe9a2783619d59158ecacd99966e8ff4873dee03" translate="yes" xml:space="preserve">
          <source>The second line can safely access the &quot;type&quot; key, and let the user to pass either &lt;code&gt;:type&lt;/code&gt; or &quot;type&quot;.</source>
          <target state="translated">2行目は「type」キーに安全にアクセスでき、ユーザーに &lt;code&gt;:type&lt;/code&gt; または「type」のいずれかを渡させます。</target>
        </trans-unit>
        <trans-unit id="c5b46933582d278e942545f1f09e4e2181c0c75a" translate="yes" xml:space="preserve">
          <source>The second line can safely access the &lt;code&gt;:params&lt;/code&gt; key, and let the user to pass either &lt;code&gt;:params&lt;/code&gt; or &quot;params&quot;.</source>
          <target state="translated">2行目は &lt;code&gt;:params&lt;/code&gt; キーに安全にアクセスでき、ユーザーは &lt;code&gt;:params&lt;/code&gt; または &quot;params&quot; を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="87370f63b750b398e3d1d2d4d7ac881a34411734" translate="yes" xml:space="preserve">
          <source>The second render just defines the partial template we want to render, &lt;code&gt;comments/form&lt;/code&gt;. Rails is smart enough to spot the forward slash in that string and realize that you want to render the &lt;code&gt;_form.html.erb&lt;/code&gt; file in the &lt;code&gt;app/views/comments&lt;/code&gt; directory.</source>
          <target state="translated">2番目のレンダリングは、レンダリングする部分テンプレートである &lt;code&gt;comments/form&lt;/code&gt; を定義するだけです。Railsは、その文字列内のスラッシュを &lt;code&gt;_form.html.erb&lt;/code&gt; て、 &lt;code&gt;app/views/comments&lt;/code&gt; ディレクトリにある_form.html.erbファイルをレンダリングしたいことに気づくほど賢いです。</target>
        </trans-unit>
        <trans-unit id="95d2464bf033dbb44e211484579e31d9b961dbc8" translate="yes" xml:space="preserve">
          <source>The second time the same query is run against the database, it's not actually going to hit the database. The first time the result is returned from the query it is stored in the query cache (in memory) and the second time it's pulled from memory.</source>
          <target state="translated">2回目に同じクエリをデータベースに対して実行しても、実際にはデータベースにヒットすることはありません。クエリから最初に結果が返されたときには、クエリキャッシュ(メモリ内)に格納され、2回目にはメモリから引き出されます。</target>
        </trans-unit>
        <trans-unit id="3efc4a8e9d7945b1d7f7a23ba4380c75006156f2" translate="yes" xml:space="preserve">
          <source>The second way is to use a class (actually, any object that responds to the right methods will do) to handle the filtering. This is useful in cases that are more complex and cannot be implemented in a readable and reusable way using the two other methods. As an example, you could rewrite the login filter again to use a class:</source>
          <target state="translated">2 つ目の方法は、フィルタリングを処理するためにクラス (実際には、適切なメソッドに応答するオブジェクトであればどんなものでもよい)を使用することです。これはより複雑で、他の2つのメソッドを使っても読みやすく再利用可能な方法で実装できない場合に便利です。例として、ログインフィルタをクラスを使うように再度書き換えることができます。</target>
        </trans-unit>
        <trans-unit id="61a71f83c97ed525d6c4921cbda3d9a74c8be32f" translate="yes" xml:space="preserve">
          <source>The second way is using a block:</source>
          <target state="translated">2つ目の方法は、ブロックを使う方法です。</target>
        </trans-unit>
        <trans-unit id="ee3dafb008288f3fc62bfe8b4c6a215bc537e4d7" translate="yes" xml:space="preserve">
          <source>The second way to declare a many-to-many relationship is to use &lt;code&gt;has_many :through&lt;/code&gt;. This makes the association indirectly, through a join model:</source>
          <target state="translated">多対多の関係を宣言する2番目の方法は、 &lt;code&gt;has_many :through&lt;/code&gt; を使用することです。これにより、結合モデルを通じて間接的に関連付けが行われます。</target>
        </trans-unit>
        <trans-unit id="5be71a74ba22ce6b2dedd769c1778c19f8234b4b" translate="yes" xml:space="preserve">
          <source>The secrets kept in credentials file are accessible via &lt;code&gt;Rails.application.credentials&lt;/code&gt;. For example, with the following decrypted &lt;code&gt;config/credentials.yml.enc&lt;/code&gt;:</source>
          <target state="translated">クレデンシャルファイルに保存されているシークレットには、 &lt;code&gt;Rails.application.credentials&lt;/code&gt; からアクセスできます。たとえば、次の復号化された &lt;code&gt;config/credentials.yml.enc&lt;/code&gt; の場合：</target>
        </trans-unit>
        <trans-unit id="3ab74d6898ce4ece91f996260f25f8432949724d" translate="yes" xml:space="preserve">
          <source>The section about session fixation introduced the problem of maintained sessions. An attacker maintaining a session every five minutes can keep the session alive forever, although you are expiring sessions. A simple solution for this would be to add a &lt;code&gt;created_at&lt;/code&gt; column to the sessions table. Now you can delete sessions that were created a long time ago. Use this line in the sweep method above:</source>
          <target state="translated">セッションの固定に関するセクションでは、セッションの維持に関する問題が紹介されました。5分ごとにセッションを維持している攻撃者は、セッションの有効期限が切れても、セッションを永久に存続させることができます。これに対する簡単な解決策は、セッションテーブルに &lt;code&gt;created_at&lt;/code&gt; 列を追加することです。これで、かなり前に作成されたセッションを削除できます。上記のスイープメソッドでこの行を使用します。</target>
        </trans-unit>
        <trans-unit id="1f6120da2c879830bdb45596b1660515dc2d88c6" translate="yes" xml:space="preserve">
          <source>The security landscape shifts and it is important to keep up to date, because missing a new vulnerability can be catastrophic. You can find additional resources about (Rails) security here:</source>
          <target state="translated">セキュリティの状況は変化しており、新しい脆弱性を見逃すと壊滅的な被害を受ける可能性があるため、最新の情報を入手しておくことが重要です。(Rails)セキュリティに関するその他のリソースはこちらからご覧いただけます。</target>
        </trans-unit>
        <trans-unit id="7126ad7da26114aa98cd24f05b132e044ab649ab" translate="yes" xml:space="preserve">
          <source>The selects are prepared for multi-parameter assignment to an Active Record object.</source>
          <target state="translated">セレクトは、アクティブレコードオブジェクトに複数のパラメータを割り当てるために準備されています。</target>
        </trans-unit>
        <trans-unit id="67fc72ff072f14ae4ea568c8c44418a72eccad87" translate="yes" xml:space="preserve">
          <source>The server can be run on a different port using the &lt;code&gt;-p&lt;/code&gt; option. The default development environment can be changed using &lt;code&gt;-e&lt;/code&gt;.</source>
          <target state="translated">サーバーは、 &lt;code&gt;-p&lt;/code&gt; オプションを使用して別のポートで実行できます。デフォルトの開発環境は、 &lt;code&gt;-e&lt;/code&gt; を使用して変更できます。</target>
        </trans-unit>
        <trans-unit id="6f096bb4e5d5d5c6145e30b812288136686222e7" translate="yes" xml:space="preserve">
          <source>The setup in Rails allows you to easily change how the switching is done and what parameters it's based on. Let's say you want to use a cookie instead of a session to decide when to swap connections. You can write your own class:</source>
          <target state="translated">Railsでの設定では、どのように切り替えを行うのか、どのようなパラメータに基づいているのかを簡単に変更することができます。接続を切り替えるタイミングを決めるためにセッションではなくクッキーを使いたいとしましょう。独自のクラスを書くことができます。</target>
        </trans-unit>
        <trans-unit id="bf940f74e13a7a42bdf13e37d4c4acbb4d699793" translate="yes" xml:space="preserve">
          <source>The show action in the above controller would have all parameter values encoded as ASCII-8BIT. This is useful in the case where an application must handle data but encoding of the data is unknown, like file system data.</source>
          <target state="translated">上記のコントローラのshowアクションは、すべてのパラメータ値をASCII-8BITとしてエンコードします。これは、アプリケーションがデータを処理しなければならないが、ファイルシステムデータのようにデータのエンコーディングが不明な場合に便利です。</target>
        </trans-unit>
        <trans-unit id="9fb10354b4e9f1b98e97daca2e9598a177524248" translate="yes" xml:space="preserve">
          <source>The signed ID is also used to create stable URLs for the blob through the BlobsController.</source>
          <target state="translated">また、署名付きのIDは、BlobsControllerを介してブロブの安定したURLを作成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="ce32a93e4064970c8546be14bb4215b30b4ef348" translate="yes" xml:space="preserve">
          <source>The simplest rule of thumb is that you should set up a &lt;code&gt;has_many :through&lt;/code&gt; relationship if you need to work with the relationship model as an independent entity. If you don't need to do anything with the relationship model, it may be simpler to set up a &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; relationship (though you'll need to remember to create the joining table in the database).</source>
          <target state="translated">最も単純な経験則は、リレーションシップモデルを独立したエンティティとして使用する必要がある場合は、 &lt;code&gt;has_many :through&lt;/code&gt; リレーションシップを設定する必要があるということです。リレーションシップモデルで何もする必要がない場合は、 &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; リレーションシップを設定する方が簡単な場合があります（ただし、データベースに結合テーブルを作成することを覚えておく必要があります）。</target>
        </trans-unit>
        <trans-unit id="20504bd60dd726d82fcb6ff496945b67c5bac04a" translate="yes" xml:space="preserve">
          <source>The simplest template that would work in this case would be one located at &lt;code&gt;app/views/articles/new.html.erb&lt;/code&gt;. The extension of this file name is important: the first extension is the &lt;em&gt;format&lt;/em&gt; of the template, and the second extension is the &lt;em&gt;handler&lt;/em&gt; that will be used to render the template. Rails is attempting to find a template called &lt;code&gt;articles/new&lt;/code&gt; within &lt;code&gt;app/views&lt;/code&gt; for the application. The format for this template can only be &lt;code&gt;html&lt;/code&gt; and the default handler for HTML is &lt;code&gt;erb&lt;/code&gt;. Rails uses other handlers for other formats. &lt;code&gt;builder&lt;/code&gt; handler is used to build XML templates and &lt;code&gt;coffee&lt;/code&gt; handler uses CoffeeScript to build JavaScript templates. Since you want to create a new HTML form, you will be using the &lt;code&gt;ERB&lt;/code&gt; language which is designed to embed Ruby in HTML.</source>
          <target state="translated">この場合に機能する最も単純なテンプレートは、 &lt;code&gt;app/views/articles/new.html.erb&lt;/code&gt; にあるものです。このファイル名の拡張子は重要です。最初の拡張子はテンプレートの&lt;em&gt;形式&lt;/em&gt;で、2番目の拡張子はテンプレートのレンダリングに使用される&lt;em&gt;ハンドラー&lt;/em&gt;です。 Railsは、アプリケーションの &lt;code&gt;app/views&lt;/code&gt; 内で、 &lt;code&gt;articles/new&lt;/code&gt; というテンプレートを見つけようとしています。このテンプレートのフォーマットは &lt;code&gt;html&lt;/code&gt; のみで、HTMLのデフォルトのハンドラーは &lt;code&gt;erb&lt;/code&gt; です。 Railsは他のフォーマット用に他のハンドラーを使用します。 &lt;code&gt;builder&lt;/code&gt; ハンドラーは、XMLテンプレートと &lt;code&gt;coffee&lt;/code&gt; を構築するために使用されますハンドラーはCoffeeScriptを使用してJavaScriptテンプレートを作成します。新しいHTMLフォームを作成するため、HTML にRubyを埋め込むように設計された &lt;code&gt;ERB&lt;/code&gt; 言語を使用します。</target>
        </trans-unit>
        <trans-unit id="29e2b5e147c1b372744d171d51ecfd514b5b40e6" translate="yes" xml:space="preserve">
          <source>The solution to this is best to &lt;em&gt;process media files asynchronously&lt;/em&gt;: Save the media file and schedule a processing request in the database. A second process will handle the processing of the file in the background.</source>
          <target state="translated">これに対する解決策は、&lt;em&gt;メディアファイルを非同期で処理するの&lt;/em&gt;が最善&lt;em&gt;です&lt;/em&gt;。メディアファイルを保存し、データベースに処理要求をスケジュールします。2番目のプロセスは、ファイルの処理をバックグラウンドで処理します。</target>
        </trans-unit>
        <trans-unit id="fcaaa7261c7e1496228fcd0f857e65f05c064de9" translate="yes" xml:space="preserve">
          <source>The speak action simply uses the Chat::Room object that was created when the channel was first subscribed to by the consumer when that subscriber wants to say something in the room.</source>
          <target state="translated">speak アクションは、チャンネルが最初に登録されたときに作成された Chat::Room オブジェクトを使用します。</target>
        </trans-unit>
        <trans-unit id="1bdd39fb0d2e38471f75ef10005c947a24983c76" translate="yes" xml:space="preserve">
          <source>The special syntax &lt;code&gt;:id&lt;/code&gt; tells rails that this route expects an &lt;code&gt;:id&lt;/code&gt; parameter, which in our case will be the id of the article.</source>
          <target state="translated">特別な構文 &lt;code&gt;:id&lt;/code&gt; は、このルートが &lt;code&gt;:id&lt;/code&gt; パラメータを想定していることをrailsに伝えます。</target>
        </trans-unit>
        <trans-unit id="d21a3746c58b2424072639a95cdac84836fee217" translate="yes" xml:space="preserve">
          <source>The specified URL will then be passed a &lt;a href=&quot;../../file&quot;&gt;File&lt;/a&gt; object containing the selected file, or if the field was left blank, a StringIO object.</source>
          <target state="translated">指定したURLには、選択したファイルを含む&lt;a href=&quot;../../file&quot;&gt;File&lt;/a&gt;オブジェクトが渡されます。フィールドが空白のままの場合は、StringIOオブジェクトが渡されます。</target>
        </trans-unit>
        <trans-unit id="2a90b5c619bbc6a71675b667b03350ade98a639f" translate="yes" xml:space="preserve">
          <source>The standard set of helper methods for form building are located in the &lt;code&gt;field_helpers&lt;/code&gt; class attribute.</source>
          <target state="translated">フォーム構築用の標準のヘルパーメソッドのセットは、 &lt;code&gt;field_helpers&lt;/code&gt; クラス属性にあります。</target>
        </trans-unit>
        <trans-unit id="4d57b2839976977694e926113e1db0d9b1557222" translate="yes" xml:space="preserve">
          <source>The status code can either be a standard &lt;a href=&quot;https://www.iana.org/assignments/http-status-codes&quot;&gt;HTTP Status code&lt;/a&gt; as an integer, or a symbol representing the downcased, underscored and symbolized description. Note that the status code must be a 3xx HTTP code, or redirection will not occur.</source>
          <target state="translated">&lt;a href=&quot;https://www.iana.org/assignments/http-status-codes&quot;&gt;ステータスコード&lt;/a&gt;は、整数としての標準のHTTPステータスコード、または小文字、アンダースコア、記号で表された説明を表すシンボルのいずれかです。ステータスコードは3xx HTTPコードである必要があります。そうでない場合、リダイレクトは行われません。</target>
        </trans-unit>
        <trans-unit id="dab910766bcf61ff2b6b105149ac996ae15cafe0" translate="yes" xml:space="preserve">
          <source>The stored attribute names can be retrieved using .stored_attributes.</source>
          <target state="translated">ストアドされた属性名は、.stored_attributesを使用して取得することができます。</target>
        </trans-unit>
        <trans-unit id="06fa98d1baa28477f3254b368c8fb59ce8ee67d7" translate="yes" xml:space="preserve">
          <source>The string pairs &amp;ldquo;key=value&amp;rdquo; that conform the query string are sorted lexicographically in ascending order.</source>
          <target state="translated">クエリ文字列に一致する文字列ペア「key = value」は、辞書順に昇順でソートされます。</target>
        </trans-unit>
        <trans-unit id="64f19a2a1cf8db7cc04037d9a665651ea6cfea93" translate="yes" xml:space="preserve">
          <source>The strong parameter API was designed with the most common use cases in mind. It is not meant as a silver bullet to handle all of your parameter filtering problems. However, you can easily mix the API with your own code to adapt to your situation.</source>
          <target state="translated">強力なパラメータAPIは、最も一般的なユースケースを念頭に置いて設計されています。これは、パラメータフィルタリングの問題をすべて処理するための銀の弾丸ではありません。しかし、あなたの状況に合わせて API を独自のコードと簡単に組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="64aeaa7e8af743f68b89426602efeec47b839e41" translate="yes" xml:space="preserve">
          <source>The suffix string to append to every table name.</source>
          <target state="translated">すべてのテーブル名に追加するサフィックス文字列。</target>
        </trans-unit>
        <trans-unit id="c231da1b10c4104be616e8c614640770820e58c1" translate="yes" xml:space="preserve">
          <source>The sum of an empty collection is zero by default, but this is customizable:</source>
          <target state="translated">空のコレクションの合計はデフォルトでは0ですが、これはカスタマイズ可能です。</target>
        </trans-unit>
        <trans-unit id="e0f6f599baf2275dfb5a4aa872b6058539d06ebe" translate="yes" xml:space="preserve">
          <source>The sum of an empty receiver can be customized in this form as well:</source>
          <target state="translated">空の受信機の合計は、この形式でもカスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="1980a1d02d3b53fd80ac4e2d7c492dc10cf6c43f" translate="yes" xml:space="preserve">
          <source>The system has been designed to having you go through the &lt;a href=&quot;many&quot;&gt;ActiveStorage::Attached::Many&lt;/a&gt; proxy that provides the dynamic proxy to the associations and factory methods, like &lt;code&gt;#attach&lt;/code&gt;.</source>
          <target state="translated">このシステムは、 &lt;code&gt;#attach&lt;/code&gt; などの関連付けやファクトリメソッドに動的プロキシを提供する&lt;a href=&quot;many&quot;&gt;ActiveStorage :: Attached :: Many&lt;/a&gt;プロキシを経由するように設計されています。</target>
        </trans-unit>
        <trans-unit id="c6ebe8a2a1f772cd708e9b2d8a544a7d7601a8a9" translate="yes" xml:space="preserve">
          <source>The system has been designed to having you go through the &lt;a href=&quot;one&quot;&gt;ActiveStorage::Attached::One&lt;/a&gt; proxy that provides the dynamic proxy to the associations and factory methods, like &lt;code&gt;attach&lt;/code&gt;.</source>
          <target state="translated">システムは、&lt;a href=&quot;one&quot;&gt;ActiveStorage :: Attached :: One&lt;/a&gt;プロキシを介して、関連付けや動的メソッドに &lt;code&gt;attach&lt;/code&gt; などのファクトリメソッドを提供するように設計されています。</target>
        </trans-unit>
        <trans-unit id="ffb7d9e85d8c423cb49ef35ffe1f58ff36aea978" translate="yes" xml:space="preserve">
          <source>The system test directory holds system tests, which are used for full browser testing of your application. System tests allow you to test your application the way your users experience it and help you test your JavaScript as well. System tests inherit from Capybara and perform in browser tests for your application.</source>
          <target state="translated">システムテストディレクトリにはシステムテストがあり、アプリケーションのフルブラウザテストに使用されます。システムテストは、ユーザーが体験する方法でアプリケーションをテストし、JavaScriptのテストにも役立ちます。システムテストは Capybara を継承し、アプリケーションのブラウザテストで実行します。</target>
        </trans-unit>
        <trans-unit id="e226fbd01d0f3a577c7b4944a32ddf8e19e4f6ff" translate="yes" xml:space="preserve">
          <source>The tables for these classes could look something like:</source>
          <target state="translated">これらのクラスのテーブルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="b607a63d813d085dd13611c891d91b17902f9714" translate="yes" xml:space="preserve">
          <source>The tag builder respects &lt;a href=&quot;https://www.w3.org/TR/html5/syntax.html#void-elements&quot;&gt;HTML5 void elements&lt;/a&gt; if no content is passed, and omits closing tags for those elements.</source>
          <target state="translated">コンテンツが渡されない場合、タグビルダーは&lt;a href=&quot;https://www.w3.org/TR/html5/syntax.html#void-elements&quot;&gt;HTML5 void要素を&lt;/a&gt;尊重し、それらの要素の終了タグを省略します。</target>
        </trans-unit>
        <trans-unit id="675b6b8a4bce863060710a5c9d10379e1bb08bad" translate="yes" xml:space="preserve">
          <source>The target can be anything callable within the object, e.g. instance variables, methods, constants, etc.</source>
          <target state="translated">ターゲットは、インスタンス変数、メソッド、定数など、オブジェクト内で呼び出し可能なものであれば何でも構いません。</target>
        </trans-unit>
        <trans-unit id="baa685d8cc36701c6d0f85459c13777a362b6065" translate="yes" xml:space="preserve">
          <source>The target can be anything callable within the object, e.g. instance variables, methods, constants, etc. Only the public methods of the target are delegated.</source>
          <target state="translated">ターゲットは、インスタンス変数、メソッド、定数など、オブジェクト内で呼び出し可能なものであれば何でも構いません。ターゲットのパブリックメソッドのみがデリゲートされます。</target>
        </trans-unit>
        <trans-unit id="6ccd69b0632a038b4775e1137e3438272e0689a3" translate="yes" xml:space="preserve">
          <source>The target method must be public, otherwise it will raise &lt;code&gt;NoMethodError&lt;/code&gt;.</source>
          <target state="translated">ターゲットメソッドはパブリックである必要があります。そうでない場合、 &lt;code&gt;NoMethodError&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="97e918c05349a4e966ec6c625bebb25ec81486ac" translate="yes" xml:space="preserve">
          <source>The technique Sprockets uses for fingerprinting is to insert a hash of the content into the name, usually at the end. For example a CSS file &lt;code&gt;global.css&lt;/code&gt;</source>
          <target state="translated">Sprocketsがフィンガープリンティングに使用する手法は、コンテンツのハッシュを名前の通常は最後に挿入することです。たとえば、CSSファイル &lt;code&gt;global.css&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0a5e1b46915f509c3c7c7826ece3ecda8e4ab7d6" translate="yes" xml:space="preserve">
          <source>The tempfile is automatically closed and unlinked after the given block is executed.</source>
          <target state="translated">指定されたブロックが実行されると、 tempfile は自動的に閉じられ、リンクが解除されます。</target>
        </trans-unit>
        <trans-unit id="08851009cfd2022992ccb98a459841a4bbcf4922" translate="yes" xml:space="preserve">
          <source>The tempfile's name is prefixed with &lt;code&gt;ActiveStorage-&lt;/code&gt; and the blob's ID. Its extension matches that of the blob.</source>
          <target state="translated">一時ファイルの名前には、 &lt;code&gt;ActiveStorage-&lt;/code&gt; とblobのID が前に付きます。その拡張子はblobの拡張子と一致します。</target>
        </trans-unit>
        <trans-unit id="fcda92529a81d9af722ac3cb13fb8f8768ff4cb9" translate="yes" xml:space="preserve">
          <source>The template digest that's added to the cache key is computed by taking an MD5 of the contents of the entire template file. This ensures that your caches will automatically expire when you change the template file.</source>
          <target state="translated">キャッシュキーに追加されるテンプレートダイジェストは、テンプレートファイル全体の内容の MD5 を取得して計算されます。これにより、テンプレートファイルを変更したときにキャッシュが自動的に期限切れになることを保証します。</target>
        </trans-unit>
        <trans-unit id="ba538c4449760474d7d60b4c54d76929d5f7fcb3" translate="yes" xml:space="preserve">
          <source>The template will be looked always in &lt;code&gt;app/views/layouts/&lt;/code&gt; folder. But you can point &lt;code&gt;layouts&lt;/code&gt; folder direct also. &lt;code&gt;layout &quot;layouts/demo&quot;&lt;/code&gt; is the same as &lt;code&gt;layout
&quot;demo&quot;&lt;/code&gt;.</source>
          <target state="translated">テンプレートは常に &lt;code&gt;app/views/layouts/&lt;/code&gt; フォルダーで検索されます。ただし、 &lt;code&gt;layouts&lt;/code&gt; フォルダーを直接ポイントすることもできます。 &lt;code&gt;layout &quot;layouts/demo&quot;&lt;/code&gt; は、 &lt;code&gt;layout &quot;demo&quot;&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="5c5c794abecdd21cff9c4b0a0fde1a6849f77b0f" translate="yes" xml:space="preserve">
          <source>The template will be rendered in a Rack environment which is accessible through ActionController::Renderer#env. You can set it up in two ways:</source>
          <target state="translated">テンプレートは、ActionController::Renderer#env からアクセスできる Rack 環境でレンダリングされます。設定方法は2通りあります。</target>
        </trans-unit>
        <trans-unit id="2cf77bf1c65d71615e432d7b152984771af2f9e1" translate="yes" xml:space="preserve">
          <source>The test adapter should be used only in testing. Along with &lt;code&gt;ActionCable::TestHelper&lt;/code&gt; it makes a great tool to test your Rails application.</source>
          <target state="translated">テストアダプターは、テストでのみ使用する必要があります。 &lt;code&gt;ActionCable::TestHelper&lt;/code&gt; とともに、Railsアプリケーションをテストするための優れたツールになります。</target>
        </trans-unit>
        <trans-unit id="e2f52f540be30e96ad7b0037c64acc9126cfb2d3" translate="yes" xml:space="preserve">
          <source>The test adapter should be used only in testing. Along with &lt;code&gt;ActiveJob::TestCase&lt;/code&gt; and &lt;code&gt;ActiveJob::TestHelper&lt;/code&gt; it makes a great tool to test your Rails application.</source>
          <target state="translated">テストアダプターは、テストでのみ使用する必要があります。 &lt;code&gt;ActiveJob::TestCase&lt;/code&gt; と &lt;code&gt;ActiveJob::TestHelper&lt;/code&gt; それはあなたのRailsアプリケーションをテストするための素晴らしいツールになります。</target>
        </trans-unit>
        <trans-unit id="975aa4be50774a60cf43702b38d9d5f31ba89b40" translate="yes" xml:space="preserve">
          <source>The test for the controller</source>
          <target state="translated">コントローラーのテスト</target>
        </trans-unit>
        <trans-unit id="00a7467e10ff3f397084acc632df42c027f23243" translate="yes" xml:space="preserve">
          <source>The test runner also provides a lot of other features like failing fast, deferring test output at the end of test run and so on. Check the documentation of the test runner as follows:</source>
          <target state="translated">テストランナーは他にも、高速に失敗したり、テスト実行の最後にテスト出力を先送りにしたりと、多くの機能を提供しています。以下のようにテストランナーのドキュメントを確認してください。</target>
        </trans-unit>
        <trans-unit id="640507b7858ee7a8ef9198521e54b0f566518fb9" translate="yes" xml:space="preserve">
          <source>The test should see that there is an &lt;code&gt;h1&lt;/code&gt; on the articles index page and pass.</source>
          <target state="translated">テストでは、記事のインデックスページに &lt;code&gt;h1&lt;/code&gt; があり、合格するはずです。</target>
        </trans-unit>
        <trans-unit id="9b2cf1c313b916f77748246680f4fd2104331502" translate="yes" xml:space="preserve">
          <source>The test will have the following name:</source>
          <target state="translated">テストは以下のような名前になります。</target>
        </trans-unit>
        <trans-unit id="72797504f4efb0607c366b3726d9a06008557676" translate="yes" xml:space="preserve">
          <source>The testing environment will automatically load all the fixtures into the database before each test. To ensure consistent data, the environment deletes the fixtures before running the load.</source>
          <target state="translated">テスト環境は、各テストの前に自動的にすべてのフィクスチャをデータベースにロードします。一貫性のあるデータを確保するために、環境はロードを実行する前にフィクスチャを削除します。</target>
        </trans-unit>
        <trans-unit id="29f0e86770cb31aee986bbcb60bab0de0e063a64" translate="yes" xml:space="preserve">
          <source>The third argument, &lt;code&gt;indent_empty_lines&lt;/code&gt;, is a flag that says whether empty lines should be indented. Default is false.</source>
          <target state="translated">3番目の引数 &lt;code&gt;indent_empty_lines&lt;/code&gt; は、空の行をインデントするかどうかを示すフラグです。デフォルトはfalseです。</target>
        </trans-unit>
        <trans-unit id="416d9d9d95fa737fdf9ecf9dd097599dc8c9c7ef" translate="yes" xml:space="preserve">
          <source>The third feature of the asset pipeline is it allows coding assets via a higher-level language, with precompilation down to the actual assets. Supported languages include Sass for CSS, CoffeeScript for JavaScript, and ERB for both by default.</source>
          <target state="translated">アセットパイプラインの3つ目の特徴は、より上位の言語を介してアセットをコーディングし、実際のアセットに至るまでのプリコンパイルを可能にすることです。サポートされている言語は、CSSではSass、JavaScriptではCoffeeScript、デフォルトではどちらもERBとなっています。</target>
        </trans-unit>
        <trans-unit id="f12ece5923a813434343679094fa85482f7f8059" translate="yes" xml:space="preserve">
          <source>The threaded parallelization uses minitest's parallel executor directly. The processes parallelization uses a Ruby DRb server.</source>
          <target state="translated">スレッド並列化はminitestの並列実行プログラムを直接使用します。プロセス並列化はRuby DRbサーバを使用します。</target>
        </trans-unit>
        <trans-unit id="6511e3596ea3977b98718f56e83ca7b2c0af377b" translate="yes" xml:space="preserve">
          <source>The threats against web applications include user account hijacking, bypass of access control, reading or modifying sensitive data, or presenting fraudulent content. Or an attacker might be able to install a Trojan horse program or unsolicited e-mail sending software, aim at financial enrichment, or cause brand name damage by modifying company resources. In order to prevent attacks, minimize their impact and remove points of attack, first of all, you have to fully understand the attack methods in order to find the correct countermeasures. That is what this guide aims at.</source>
          <target state="translated">ウェブアプリケーションに対する脅威には、ユーザーアカウントの乗っ取り、アクセス制御の迂回、機密データの読み取りや改ざん、詐欺的なコンテンツの提示などがあります。また、攻撃者はトロイの木馬プログラムや迷惑メール送信ソフトをインストールし、金銭的な豊かさを狙ったり、企業のリソースを改ざんしてブランド名を毀損したりする可能性があります。攻撃を防ぎ、その影響を最小限に抑え、攻撃のポイントを取り除くためには、まず、攻撃手法を十分に理解し、正しい対策を見つけることが必要です。本書はそのようなことを目的としています。</target>
        </trans-unit>
        <trans-unit id="31848326716b8e439bd35853912f7581c2cf69c2" translate="yes" xml:space="preserve">
          <source>The three of them return &lt;code&gt;nil&lt;/code&gt; for blank receivers.</source>
          <target state="translated">それらの3つは、空白のレシーバーに対して &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a86c8236c7a4aa22941361c064142983f59ef501" translate="yes" xml:space="preserve">
          <source>The time is parsed using Time.parse method. If &lt;code&gt;form&lt;/code&gt; is :local, then the time is in the system timezone. If the date part is missing then the current date is used and if the time part is missing then it is assumed to be 00:00:00.</source>
          <target state="translated">時間はTime.parseメソッドを使用して解析されます。 &lt;code&gt;form&lt;/code&gt; が：localの場合、時刻はシステムのタイムゾーンです。日付部分がない場合は現在の日付が使用され、時間部分がない場合は00:00:00と見なされます。</target>
        </trans-unit>
        <trans-unit id="1da1a16a7b055aacdbe4a5e837bd0b5a8550d320" translate="yes" xml:space="preserve">
          <source>The timeline of Rails' initialization sequence.</source>
          <target state="translated">Railsの初期化シーケンスのタイムライン。</target>
        </trans-unit>
        <trans-unit id="d6194f3b2f582790fad265e80912cb271ac73c7b" translate="yes" xml:space="preserve">
          <source>The token parameter is named &lt;code&gt;authenticity_token&lt;/code&gt; by default. The name and value of this token must be added to every layout that renders forms by including &lt;code&gt;csrf_meta_tags&lt;/code&gt; in the HTML &lt;code&gt;head&lt;/code&gt;.</source>
          <target state="translated">トークンパラメータは、デフォルトで &lt;code&gt;authenticity_token&lt;/code&gt; という名前です。このトークンの名前と値は、HTML &lt;code&gt;head&lt;/code&gt; &lt;code&gt;csrf_meta_tags&lt;/code&gt; を含めることにより、フォームをレンダリングするすべてのレイアウトに追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="05d8eb590d8e83077814240b2a170f555b1863fe" translate="yes" xml:space="preserve">
          <source>The top portion of the index page displays the users. The bottom portion provides a form to create a new user.</source>
          <target state="translated">インデックスページの上部にはユーザーが表示されます。下の部分は、新しいユーザーを作成するためのフォームを提供します。</target>
        </trans-unit>
        <trans-unit id="e7aaa0ff7f838941cf4d13f0243ddae8be9664af" translate="yes" xml:space="preserve">
          <source>The trailing '_id' can be kept and capitalized by setting the optional parameter &lt;code&gt;keep_id_suffix&lt;/code&gt; to true (default is false).</source>
          <target state="translated">末尾の「_id」は、オプションのパラメーター &lt;code&gt;keep_id_suffix&lt;/code&gt; をtrue（デフォルトはfalse）に設定することで保持して大文字にすることができます。</target>
        </trans-unit>
        <trans-unit id="a346915612a785e701fb8aa4fb88d6d804e10964" translate="yes" xml:space="preserve">
          <source>The trailing '_id' can be kept and capitalized by setting the optional parameter &lt;code&gt;keep_id_suffix&lt;/code&gt; to true. By default, this parameter is false.</source>
          <target state="translated">末尾の '_id'は、オプションのパラメーター &lt;code&gt;keep_id_suffix&lt;/code&gt; をtrueに設定することで保持および大文字化できます。デフォルトでは、このパラメーターはfalseです。</target>
        </trans-unit>
        <trans-unit id="aec6fc5c9914c772cee6cc49f306e3312005d4e1" translate="yes" xml:space="preserve">
          <source>The trailing '_id','Id'.. can be kept and capitalized by setting the optional parameter &lt;code&gt;keep_id_suffix&lt;/code&gt; to true. By default, this parameter is false.</source>
          <target state="translated">末尾の '_id'、 'Id' ..は、オプションのパラメーター &lt;code&gt;keep_id_suffix&lt;/code&gt; をtrueに設定することで保持および大文字化できます。デフォルトでは、このパラメーターはfalseです。</target>
        </trans-unit>
        <trans-unit id="c4c9ed39b42fbbb24c8e1e3654de7fd488fd5d48" translate="yes" xml:space="preserve">
          <source>The translated model name, translated attribute name, and value are always available for interpolation as &lt;code&gt;model&lt;/code&gt;, &lt;code&gt;attribute&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; respectively.</source>
          <target state="translated">翻訳されたモデル名、翻訳された属性名、および値は、それぞれ &lt;code&gt;model&lt;/code&gt; 、 &lt;code&gt;attribute&lt;/code&gt; 、および &lt;code&gt;value&lt;/code&gt; として常に補間に使用できます。</target>
        </trans-unit>
        <trans-unit id="0c206e712ab9262a624613a14bf5a4614f215afa" translate="yes" xml:space="preserve">
          <source>The translation denoted as &lt;code&gt;:one&lt;/code&gt; is regarded as singular, and the &lt;code&gt;:other&lt;/code&gt; is used as plural. If the count is zero, and a &lt;code&gt;:zero&lt;/code&gt; entry is present, then it will be used instead of &lt;code&gt;:other&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:one&lt;/code&gt; と表記された翻訳は単数と見なされ、 &lt;code&gt;:other&lt;/code&gt; は複数と使用されます。カウントがゼロで、 &lt;code&gt;:zero&lt;/code&gt; エントリが存在する場合は、 &lt;code&gt;:other&lt;/code&gt; の代わりに使用されます。</target>
        </trans-unit>
        <trans-unit id="1eaffe2233ce31e6bda12ed1e808ce2e1055683f" translate="yes" xml:space="preserve">
          <source>The truncated text ends with the &lt;code&gt;:omission&lt;/code&gt; string, defaulting to &amp;ldquo;&amp;hellip;&amp;rdquo;, for a total length not exceeding &lt;code&gt;bytesize&lt;/code&gt;.</source>
          <target state="translated">切り捨てられたテキストは &lt;code&gt;:omission&lt;/code&gt; &lt;code&gt;bytesize&lt;/code&gt; 文字列で終わり、デフォルトは「&amp;hellip;」で、合計長はbytesizeを超えません。</target>
        </trans-unit>
        <trans-unit id="3ef5f4d61a4d21cbfd235b66e8b63c8804fdf71b" translate="yes" xml:space="preserve">
          <source>The two basic structures are arrays and hashes. Hashes mirror the syntax used for accessing the value in &lt;code&gt;params&lt;/code&gt;. For example, if a form contains:</source>
          <target state="translated">2つの基本的な構造は、配列とハッシュです。ハッシュは、 &lt;code&gt;params&lt;/code&gt; の値にアクセスするために使用される構文を反映しています。たとえば、フォームに次のものが含まれているとします。</target>
        </trans-unit>
        <trans-unit id="4ae6f1958803c95c5af96cee2de8ca60e298f229" translate="yes" xml:space="preserve">
          <source>The two dashes start a comment ignoring everything after it. So the query returns all records from the projects table including those blind to the user. This is because the condition is true for all records.</source>
          <target state="translated">2 つのダッシュは、それ以降のすべてを無視してコメントを開始します。つまり、このクエリは、ユーザーには見えないものも含めて、プロジェクトテーブルのすべてのレコードを返します。これは、条件がすべてのレコードに対して真であるためです。</target>
        </trans-unit>
        <trans-unit id="26baf66a5c5cf8b3ca15d0abd849a6180bb33678" translate="yes" xml:space="preserve">
          <source>The two lines following the request are to handle the redirect we setup when creating a new article.</source>
          <target state="translated">リクエストに続く2行は、新しい記事を作成する際に設定したリダイレクトを処理するためのものです。</target>
        </trans-unit>
        <trans-unit id="6b101fb80aec1c9c2ab48a863fb3cea6d938460e" translate="yes" xml:space="preserve">
          <source>The two main methods for testing your routes:</source>
          <target state="translated">自分のルートをテストする方法は主に2つあります。</target>
        </trans-unit>
        <trans-unit id="4df240969de79c63294f13e9b45064ab12e90f94" translate="yes" xml:space="preserve">
          <source>The two relations must be structurally compatible: they must be scoping the same model, and they must differ only by &lt;a href=&quot;querymethods#method-i-where&quot;&gt;where&lt;/a&gt; (if no &lt;a href=&quot;querymethods#method-i-group&quot;&gt;group&lt;/a&gt; has been defined) or &lt;a href=&quot;querymethods#method-i-having&quot;&gt;having&lt;/a&gt; (if a &lt;a href=&quot;querymethods#method-i-group&quot;&gt;group&lt;/a&gt; is present). Neither relation may have a &lt;a href=&quot;querymethods#method-i-limit&quot;&gt;limit&lt;/a&gt;, &lt;a href=&quot;querymethods#method-i-offset&quot;&gt;offset&lt;/a&gt;, or &lt;a href=&quot;querymethods#method-i-distinct&quot;&gt;distinct&lt;/a&gt; set.</source>
          <target state="translated">2つの関係は、構造的に互換性がある必要があります。それらは同じモデルのスコープである必要があり、&lt;a href=&quot;querymethods#method-i-where&quot;&gt;場所&lt;/a&gt;（&lt;a href=&quot;querymethods#method-i-group&quot;&gt;グループ&lt;/a&gt;が定義されていない場合）または&lt;a href=&quot;querymethods#method-i-having&quot;&gt;所有&lt;/a&gt;（&lt;a href=&quot;querymethods#method-i-group&quot;&gt;グループ&lt;/a&gt;が存在する場合）のみが異なる必要があります。どちらの関係にも、&lt;a href=&quot;querymethods#method-i-limit&quot;&gt;limit&lt;/a&gt;、&lt;a href=&quot;querymethods#method-i-offset&quot;&gt;offset&lt;/a&gt;、または&lt;a href=&quot;querymethods#method-i-distinct&quot;&gt;個別の&lt;/a&gt;セットを含めることはできません。</target>
        </trans-unit>
        <trans-unit id="4429a5c939dc6aca1139441991d565996b91dd6d" translate="yes" xml:space="preserve">
          <source>The type detected by Active Record can be overridden.</source>
          <target state="translated">アクティブレコードで検出された型をオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="1f0b9cf1c4d9c3eca3e4a428a0c7fa3e8066b238" translate="yes" xml:space="preserve">
          <source>The type of an attribute is given the opportunity to change how dirty tracking is performed. The methods &lt;code&gt;changed?&lt;/code&gt; and &lt;code&gt;changed_in_place?&lt;/code&gt; will be called from &lt;a href=&quot;../../activemodel/dirty&quot;&gt;ActiveModel::Dirty&lt;/a&gt;. See the documentation for those methods in &lt;a href=&quot;../../activemodel/type/value&quot;&gt;ActiveModel::Type::Value&lt;/a&gt; for more details.</source>
          <target state="translated">属性のタイプには、ダーティトラッキングの実行方法を変更する機会が与えられます。メソッドが &lt;code&gt;changed?&lt;/code&gt; そして &lt;code&gt;changed_in_place?&lt;/code&gt; &lt;a href=&quot;../../activemodel/dirty&quot;&gt;ActiveModel :: Dirty&lt;/a&gt;から呼び出されます。詳細については、&lt;a href=&quot;../../activemodel/type/value&quot;&gt;ActiveModel :: Type :: Valueにある&lt;/a&gt;これらのメソッドのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="927059acf7f717dfa1ace58934a018ae273d21bc" translate="yes" xml:space="preserve">
          <source>The types &lt;code&gt;inet&lt;/code&gt; and &lt;code&gt;cidr&lt;/code&gt; are mapped to Ruby &lt;a href=&quot;https://ruby-doc.org/stdlib-2.2.2/libdoc/ipaddr/rdoc/IPAddr.html&quot;&gt;&lt;code&gt;IPAddr&lt;/code&gt;&lt;/a&gt; objects. The &lt;code&gt;macaddr&lt;/code&gt; type is mapped to normal text.</source>
          <target state="translated">タイプ &lt;code&gt;inet&lt;/code&gt; および &lt;code&gt;cidr&lt;/code&gt; はRuby &lt;a href=&quot;https://ruby-doc.org/stdlib-2.2.2/libdoc/ipaddr/rdoc/IPAddr.html&quot;&gt; &lt;code&gt;IPAddr&lt;/code&gt; &lt;/a&gt;オブジェクトにマップされます。 &lt;code&gt;macaddr&lt;/code&gt; タイプは、通常のテキストにマップされます。</target>
        </trans-unit>
        <trans-unit id="b0861f73b8db3082acb47c4ea15e2a6f8e772b26" translate="yes" xml:space="preserve">
          <source>The typical route is to just dump everything in a monolithic class, perhaps with a comment, as a least-bad alternative. Using modules in separate files means tedious sifting to get a big-picture view.</source>
          <target state="translated">典型的なルートは、すべてをモノリシックなクラスにダンプすることです。別々のファイルでモジュールを使用すると、全体像を把握するためには面倒なふるい分けが必要になります。</target>
        </trans-unit>
        <trans-unit id="cc0073e1d3239a9024667d104757ce1e2361f109" translate="yes" xml:space="preserve">
          <source>The underlying body, as a streamable object.</source>
          <target state="translated">ストリーム可能なオブジェクトとしての下半身。</target>
        </trans-unit>
        <trans-unit id="504117b27c360308482a63dde448944374808b20" translate="yes" xml:space="preserve">
          <source>The underlying table must have the relevant columns defined with unique constraints.</source>
          <target state="translated">基礎となるテーブルは、一意の制約で関連する列が定義されていなければなりません。</target>
        </trans-unit>
        <trans-unit id="fdf93057400271c1f0b768430268fc455455f04a" translate="yes" xml:space="preserve">
          <source>The unique request id can be used to trace a request end-to-end and would typically end up being part of log files from multiple pieces of the stack.</source>
          <target state="translated">一意のリクエスト ID はリクエストをエンドツーエンドでトレースするために使われ、通常はスタックの複数の部分からのログファイルの一部として終わるでしょう。</target>
        </trans-unit>
        <trans-unit id="44345e0f37696053af8dfe1ad08931d4ee884fed" translate="yes" xml:space="preserve">
          <source>The unique request id is either based on the X-Request-Id header in the request, which would typically be generated by a firewall, load balancer, or the web server, or, if this header is not available, a random uuid. If the header is accepted from the outside world, we sanitize it to a max of 255 chars and alphanumeric and dashes only.</source>
          <target state="translated">一意なリクエストIDは、リクエスト中のX-Request-Idヘッダに基づくか、ファイアウォール、ロードバランサ、ウェブサーバによって通常生成されるか、またはこのヘッダが利用できない場合はランダムなUUIDに基づいています。このヘッダーが外部から受け入れられた場合は、最大255文字、英数字とダッシュのみでサニタイズされます。</target>
        </trans-unit>
        <trans-unit id="c4127c0166c14c885baf6d19dcdb9fce72629288" translate="yes" xml:space="preserve">
          <source>The upside of long-lived channel instances is that you can use instance variables to keep reference to objects that future subscriber requests can interact with. Here's a quick example:</source>
          <target state="translated">長寿命のチャンネルインスタンスの利点は、インスタンス変数を使用して、将来のサブスクライバーのリクエストが対話できるオブジェクトへの参照を保持できることです。簡単な例を示します。</target>
        </trans-unit>
        <trans-unit id="f05b9f48f977cb2b8245e6965144965f6f98f067" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;write_attribute&lt;/code&gt; to write to the field in model is just one example of how a plugin can interact with the model, and will not always be the right method to use. For example, you could also use:</source>
          <target state="translated">モデル内のフィールドに書き込むための &lt;code&gt;write_attribute&lt;/code&gt; の使用は、プラグインがモデルと対話する方法の1つの例にすぎず、常に適切な方法であるとは限りません。たとえば、次のものも使用できます。</target>
        </trans-unit>
        <trans-unit id="8ba3a56d5e7efe66d3fab380043aeea55b8e7b0a" translate="yes" xml:space="preserve">
          <source>The use of extra attributes on the join table in a &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; association is deprecated. If you require this sort of complex behavior on the table that joins two models in a many-to-many relationship, you should use a &lt;code&gt;has_many :through&lt;/code&gt; association instead of &lt;code&gt;has_and_belongs_to_many&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;has_and_belongs_to_many&lt;/code&gt; アソシエーションでの結合テーブルでの追加属性の使用は非推奨です。あなたは多対多の関係で二つのモデルを結合し、テーブル上の複雑な挙動のこの種を必要とする場合は、使用する必要があります &lt;code&gt;has_many :through&lt;/code&gt; 組合の代わりに &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; アソシエーション。</target>
        </trans-unit>
        <trans-unit id="687066842fc8ecd4fa47ae8968fd256f5e45ada4" translate="yes" xml:space="preserve">
          <source>The user buys something.</source>
          <target state="translated">ユーザーは何かを買う。</target>
        </trans-unit>
        <trans-unit id="7c62bd30e184568bef1e6d0ac16046c9a736c174" translate="yes" xml:space="preserve">
          <source>The user can also specify the encoding via a comment on the first line of the template (# encoding: NAME-OF-ENCODING). This will work with any template engine, as we process out the encoding comment before passing the source on to the template engine, leaving a blank line in its stead.</source>
          <target state="translated">ユーザーはテンプレートの最初の行にコメントを書いてエンコーディングを指定することもできます (#encoding:NAME-OF-ENCODING)。これは、テンプレートエンジンにソースを渡す前にエンコーディングコメントを処理し、代わりに空白の行を残すので、どのテンプレートエンジンでも動作します。</target>
        </trans-unit>
        <trans-unit id="826ca47e57f18b11478c16bdc6bb3633f987bcfe" translate="yes" xml:space="preserve">
          <source>The user can override this default by passing a block to the layout:</source>
          <target state="translated">ユーザーは、レイアウトにブロックを渡すことで、このデフォルトをオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="719dce192492bacd8bcefcb5f6b709f528c266da" translate="yes" xml:space="preserve">
          <source>The user has their original credit back.</source>
          <target state="translated">ユーザーは元のクレジットを取り戻しています。</target>
        </trans-unit>
        <trans-unit id="c6fa6bc3d4150b5cc2b951fee14c9d1cabd21a92" translate="yes" xml:space="preserve">
          <source>The user is &lt;em&gt;held accountable for the results&lt;/em&gt; of the interaction.</source>
          <target state="translated">ユーザーは、対話の&lt;em&gt;結果に対して責任を負い&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="3e076b48f1c86983855eb3347dba2080e3709d89" translate="yes" xml:space="preserve">
          <source>The user takes the cookie from the first step (which they previously copied) and replaces the current cookie in the browser.</source>
          <target state="translated">ユーザーは最初のステップからクッキー(以前にコピーしたもの)を取り、ブラウザで現在のクッキーを置き換えます。</target>
        </trans-unit>
        <trans-unit id="0c221d372386ae6055b0803819195b0d89fb89dc" translate="yes" xml:space="preserve">
          <source>The validation happens by performing an SQL query into the model's table, searching for an existing record with the same value in that attribute.</source>
          <target state="translated">検証は、モデルのテーブルにSQLクエリを実行し、その属性で同じ値を持つ既存のレコードを検索することで行われます。</target>
        </trans-unit>
        <trans-unit id="210fb69772009d42d4971aa88ccf3a4132e9cbb3" translate="yes" xml:space="preserve">
          <source>The validation only runs when all the &lt;code&gt;:if&lt;/code&gt; conditions and none of the &lt;code&gt;:unless&lt;/code&gt; conditions are evaluated to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">検証は、 &lt;code&gt;:if&lt;/code&gt; 条件がすべて評価され、 &lt;code&gt;:unless&lt;/code&gt; 条件がどれも &lt;code&gt;true&lt;/code&gt; と評価されない場合にのみ実行されます。</target>
        </trans-unit>
        <trans-unit id="22d922531e256f36a7805e905aa5612d4cc33f30" translate="yes" xml:space="preserve">
          <source>The validation process on save can be skipped by passing &lt;code&gt;validate:
false&lt;/code&gt;. The validation context can be changed by passing &lt;code&gt;context: context&lt;/code&gt;. The regular &lt;a href=&quot;persistence#method-i-save&quot;&gt;ActiveRecord::Base#save&lt;/a&gt; method is replaced with this when the validations module is mixed in, which it is by default.</source>
          <target state="translated">保存時の検証プロセスは、 &lt;code&gt;validate: false&lt;/code&gt; を渡すことでスキップできます。検証コンテキストは、 &lt;code&gt;context: context&lt;/code&gt; を渡すことで変更できます。通常の&lt;a href=&quot;persistence#method-i-save&quot;&gt;ActiveRecord :: Base＃save&lt;/a&gt;メソッドは、検証モジュールが混合されると、これに置き換えられます。これはデフォルトです。</target>
        </trans-unit>
        <trans-unit id="8999b1ed1a41ae9c57579e07e860b4efcd1722c6" translate="yes" xml:space="preserve">
          <source>The validators hash can also handle regular expressions, ranges, arrays and strings in shortcut form.</source>
          <target state="translated">バリデータハッシュは、正規表現、範囲、配列、文字列をショートカット形式で扱うこともできます。</target>
        </trans-unit>
        <trans-unit id="ddc6ecf56ce207f86d9a65f068b01ae48ef8f30f" translate="yes" xml:space="preserve">
          <source>The value for &lt;code&gt;i18n.transliterate.rule&lt;/code&gt; can be a simple &lt;a href=&quot;../hash&quot;&gt;Hash&lt;/a&gt; that maps characters to ASCII approximations as shown above, or, for more complex requirements, a Proc:</source>
          <target state="translated">&lt;code&gt;i18n.transliterate.rule&lt;/code&gt; の値は、上記のように文字をASCII近似にマッピングする単純な&lt;a href=&quot;../hash&quot;&gt;ハッシュ&lt;/a&gt;、またはより複雑な要件の場合はProcにすることができます。</target>
        </trans-unit>
        <trans-unit id="4529e2d3c40915fd4c9132c578e7597ed49f3db5" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;autoload_paths&lt;/code&gt; can be inspected. In a just-generated application it is (edited):</source>
          <target state="translated">&lt;code&gt;autoload_paths&lt;/code&gt; の値を検査できます。生成されたばかりのアプリケーションでは（編集されて）：</target>
        </trans-unit>
        <trans-unit id="cd0a00e0a081899b611799d0f44fe6f9726d2a6e" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;params[:ids]&lt;/code&gt; will now be &lt;code&gt;[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]&lt;/code&gt;. Note that parameter values are always strings; Rails makes no attempt to guess or cast the type.</source>
          <target state="translated">値 &lt;code&gt;params[:ids]&lt;/code&gt; 今であろう &lt;code&gt;[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]&lt;/code&gt; 。パラメータ値は常に文字列であることに注意してください。Railsはタイプの推測やキャストを試みません。</target>
        </trans-unit>
        <trans-unit id="be17b91d3b4e674a03379a9cbc0828c572860985" translate="yes" xml:space="preserve">
          <source>The values are first processed by SHA256, so that we don't leak length info via timing attacks.</source>
          <target state="translated">値は最初にSHA256で処理されるので、タイミング攻撃で長さ情報が漏れることはありません。</target>
        </trans-unit>
        <trans-unit id="f7668455a149f8036f8739030b9a40a0d03c8dfc" translate="yes" xml:space="preserve">
          <source>The values compared should be of fixed length, such as strings that have already been processed by HMAC. Raises in case of length mismatch.</source>
          <target state="translated">比較される値は、すでに HMAC で処理された文字列など、固定長でなければなりません。長さが不一致の場合に発生します。</target>
        </trans-unit>
        <trans-unit id="c3de7898cf5037e5a00562c2e793081732841dfe" translate="yes" xml:space="preserve">
          <source>The values of the hash here being the arguments or options passed to the specific git command. As per the final example shown here, multiple git commands can be specified at a time, but the order of their running is not guaranteed to be the same as the order that they were specified in.</source>
          <target state="translated">ここでのハッシュの値は、特定の git コマンドに渡された引数あるいはオプションです。ここで示した最後の例のように、複数の git コマンドを一度に指定することができますが、それらの実行順序が指定した順序と同じであることは保証されません。</target>
        </trans-unit>
        <trans-unit id="51738102e906fea5a59e8e5aa4f95a26d7b4e6ee" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;f&lt;/code&gt; yielded to the block is a &lt;a href=&quot;formbuilder&quot;&gt;FormBuilder&lt;/a&gt; object that incorporates the knowledge about the model object represented by &lt;code&gt;:person&lt;/code&gt; passed to &lt;code&gt;form_for&lt;/code&gt;. Methods defined on the &lt;a href=&quot;formbuilder&quot;&gt;FormBuilder&lt;/a&gt; are used to generate fields bound to this model. Thus, for example,</source>
          <target state="translated">ブロックに生成される変数 &lt;code&gt;f&lt;/code&gt; は、&lt;a href=&quot;formbuilder&quot;&gt;form_forに&lt;/a&gt;渡された &lt;code&gt;:person&lt;/code&gt; &lt;code&gt;form_for&lt;/code&gt; によって表されるモデルオブジェクトに関する知識を組み込んだFormBuilderオブジェクトです。&lt;a href=&quot;formbuilder&quot;&gt;FormBuilderで&lt;/a&gt;定義されたメソッドは、このモデルにバインドされたフィールドを生成するために使用されます。したがって、たとえば、</target>
        </trans-unit>
        <trans-unit id="c9a81f628645aa415b2032ec2f5f389b9a451d86" translate="yes" xml:space="preserve">
          <source>The variables inside the displayed list will be printed with their values after you move in the stack. To stop displaying a variable use &lt;code&gt;undisplay n&lt;/code&gt; where &lt;em&gt;n&lt;/em&gt; is the variable number (1 in the last example).</source>
          <target state="translated">スタック内を移動すると、表示されたリスト内の変数がその値とともに出力されます。可変用表示を停止し &lt;code&gt;undisplay n&lt;/code&gt; ここで&lt;em&gt;nは&lt;/em&gt;可変数（最後の例では1）です。</target>
        </trans-unit>
        <trans-unit id="30e5bd030892b4a852e2c3cbc8b86634a728d26f" translate="yes" xml:space="preserve">
          <source>The various connection pools are managed by a single instance of &lt;a href=&quot;connectionhandler&quot;&gt;ConnectionHandler&lt;/a&gt; accessible via &lt;a href=&quot;../core#method-c-connection_handler&quot;&gt;ActiveRecord::Core.connection_handler&lt;/a&gt;. All Active Record models use this handler to determine the connection pool that they should use.</source>
          <target state="translated">さまざまな接続プールは、&lt;a href=&quot;../core#method-c-connection_handler&quot;&gt;ActiveRecord :: Core.connection_handlerを&lt;/a&gt;介してアクセス可能な&lt;a href=&quot;connectionhandler&quot;&gt;ConnectionHandlerの&lt;/a&gt;単一のインスタンスによって管理されます。すべてのActive Recordモデルは、このハンドラーを使用して、使用する接続プールを決定します。</target>
        </trans-unit>
        <trans-unit id="3ba65a91e27bd5bcb67a20448455ea6160bacbdd" translate="yes" xml:space="preserve">
          <source>The version column used for optimistic locking. Defaults to &lt;code&gt;lock_version&lt;/code&gt;.</source>
          <target state="translated">楽観的ロックに使用されるバージョン列。デフォルトは &lt;code&gt;lock_version&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d0edb9fdea3de462fd0a58773839cce4a4acbae7" translate="yes" xml:space="preserve">
          <source>The version number in which the deprecated behavior will be removed, by default.</source>
          <target state="translated">デフォルトでは、非推奨の動作が削除されるバージョン番号。</target>
        </trans-unit>
        <trans-unit id="ac0230161de62aae504a0f81a584296cdc0e8222" translate="yes" xml:space="preserve">
          <source>The very first migration related rails command you will use will probably be &lt;code&gt;rails db:migrate&lt;/code&gt;. In its most basic form it just runs the &lt;code&gt;change&lt;/code&gt; or &lt;code&gt;up&lt;/code&gt; method for all the migrations that have not yet been run. If there are no such migrations, it exits. It will run these migrations in order based on the date of the migration.</source>
          <target state="translated">使用する最初の移行関連のrailsコマンドは、おそらく &lt;code&gt;rails db:migrate&lt;/code&gt; になります。最も基本的な形式では、まだ実行されていないすべての移行に対して、 &lt;code&gt;change&lt;/code&gt; または &lt;code&gt;up&lt;/code&gt; メソッドを実行するだけです。そのようなマイグレーションがない場合は、終了します。これらの移行は、移行の日付に基づいて順番に実行されます。</target>
        </trans-unit>
        <trans-unit id="ac2a3b8ac588e6c7d35fe808ffcfdd151ce9cc02" translate="yes" xml:space="preserve">
          <source>The video tag also supports all of the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; HTML options through the HTML options hash, including:</source>
          <target state="translated">videoタグは、以下を含むHTMLオプションハッシュを通じて、すべての &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; HTMLオプションもサポートします。</target>
        </trans-unit>
        <trans-unit id="119b909af465377a2dafbbc8a03ac551f389a7b4" translate="yes" xml:space="preserve">
          <source>The view class must have the following methods:</source>
          <target state="translated">ビュークラスは以下のメソッドを持つ必要があります。</target>
        </trans-unit>
        <trans-unit id="1d2a88b0bc833aa9900595087d57dd20bf6b3e79" translate="yes" xml:space="preserve">
          <source>The view will contain a form similar to the one we used when creating new articles. Create a file called &lt;code&gt;app/views/articles/edit.html.erb&lt;/code&gt; and make it look as follows:</source>
          <target state="translated">ビューには、新しい記事を作成するときに使用したものと同様のフォームが含まれます。 &lt;code&gt;app/views/articles/edit.html.erb&lt;/code&gt; というファイルを作成し、次のようにします。</target>
        </trans-unit>
        <trans-unit id="6c158899320feee2e97c385d2ee14ec4ce40aa6d" translate="yes" xml:space="preserve">
          <source>The way it works is that, when the link is activated, it constructs a hidden form in the document with the &quot;action&quot; attribute corresponding to &quot;href&quot; value of the link, and the method corresponding to &lt;code&gt;data-method&lt;/code&gt; value, and submits that form.</source>
          <target state="translated">それが機能する方法は、リンクがアクティブ化されると、リンクの「href」値に対応する「action」属性と &lt;code&gt;data-method&lt;/code&gt; 値に対応するメソッドを使用してドキュメントに非表示フォームを作成し、それを送信することです形。</target>
        </trans-unit>
        <trans-unit id="1e18e70ccf9ed0f548a5db54192832822b7a0ad9" translate="yes" xml:space="preserve">
          <source>The way this is done is to add a non-guessable token which is only known to your server to each request. This way, if a request comes in without the proper token, it will be denied access.</source>
          <target state="translated">この方法は、各リクエストにサーバのみが知っている推測不可能なトークンを追加することです。これにより、適切なトークンを持たないリクエストが来た場合はアクセスを拒否されます。</target>
        </trans-unit>
        <trans-unit id="b7c78eda0eacbc05a4fde40017411e78c31cd0e1" translate="yes" xml:space="preserve">
          <source>The web application at &lt;code&gt;www.webapp.com&lt;/code&gt; verifies the user information in the corresponding session hash and destroys the project with the ID 1. It then returns a result page which is an unexpected result for the browser, so it will not display the image.</source>
          <target state="translated">&lt;code&gt;www.webapp.com&lt;/code&gt; のWebアプリケーションは、対応するセッションハッシュ内のユーザー情報を確認し、ID 1のプロジェクトを破棄します。次に、ブラウザーに予期しない結果である結果ページを返すため、画像は表示されません。</target>
        </trans-unit>
        <trans-unit id="9f0bf503400b87f8f940d1752feec19d755672a8" translate="yes" xml:space="preserve">
          <source>The whole callback chain is wrapped in a transaction. If any callback raises an exception, the execution chain gets halted and a ROLLBACK is issued. To intentionally stop a chain use:</source>
          <target state="translated">コールバックチェーン全体がトランザクションに包まれています。コールバックが例外を発生させると、実行チェーンは停止して ROLLBACK が発行されます。チェーンを意図的に停止させるには</target>
        </trans-unit>
        <trans-unit id="304e04fad05e0c4f4a61a9fc6958560aa376e82f" translate="yes" xml:space="preserve">
          <source>The word will be pluralized using rules defined for the locale (you must define your own inflection rules for languages other than English). See &lt;a href=&quot;../../activesupport/inflector#method-i-pluralize&quot;&gt;ActiveSupport::Inflector#pluralize&lt;/a&gt;</source>
          <target state="translated">単語は、ロケールに定義された規則を使用して複数形になります（英語以外の言語には独自の活用規則を定義する必要があります）。&lt;a href=&quot;../../activesupport/inflector#method-i-pluralize&quot;&gt;ActiveSupport :: Inflector＃pluralizeを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="8b90a1b189ff4eaf81ed82bbe6e50b03aaabd418" translate="yes" xml:space="preserve">
          <source>The worker pool is used to run connection callbacks and channel actions in isolation from the server's main thread. Action Cable allows the application to configure the number of simultaneously processed threads in the worker pool.</source>
          <target state="translated">ワーカープールは、サーバーのメインスレッドから分離して接続コールバックとチャンネルアクションを実行するために使用されます。アクションケーブルを使用すると、アプリケーションはワーカープールで同時に処理されるスレッドの数を設定することができます。</target>
        </trans-unit>
        <trans-unit id="5a227e6c2220ef5acd6b50d07b084d078961f053" translate="yes" xml:space="preserve">
          <source>The worker pool is where we run connection callbacks and channel actions. We do as little as possible on the server's main thread. The worker pool is an executor service that's backed by a pool of threads working from a task queue. The thread pool size maxes out at 4 worker threads by default. Tune the size yourself with &lt;code&gt;config.action_cable.worker_pool_size&lt;/code&gt;.</source>
          <target state="translated">ワーカープールは、接続コールバックとチャネルアクションを実行する場所です。サーバーのメインスレッドでは、可能な限り処理を行いません。ワーカープールは、タスクキューから機能するスレッドのプールに支えられたエグゼキューターサービスです。スレッドプールのサイズは、デフォルトで最大4つのワーカースレッドになります。 &lt;code&gt;config.action_cable.worker_pool_size&lt;/code&gt; でサイズを自分で調整します。</target>
        </trans-unit>
        <trans-unit id="4071a60de007bb344068973d53b28d0026839c89" translate="yes" xml:space="preserve">
          <source>The worms exploit a hole in Yahoo's HTML/JavaScript filter, which usually filters all targets and onload attributes from tags (because there can be JavaScript). The filter is applied only once, however, so the onload attribute with the worm code stays in place. This is a good example why restricted list filters are never complete and why it is hard to allow HTML/JavaScript in a web application.</source>
          <target state="translated">このワームは、ヤフーのHTML/JavaScriptフィルターの穴を悪用しています。しかし、フィルターは一度だけ適用されるため、ワームのコードを含むオンロード属性はその場に留まります。これは、制限付きリストフィルタが決して完全ではない理由と、ウェブアプリケーションでHTML/JavaScriptを許可することが難しい理由を示す良い例です。</target>
        </trans-unit>
        <trans-unit id="381cfbd9c2dd9fecda0a80c5cba63a031cfacf42" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;User.human_attribute_name(&quot;role.admin&quot;)&lt;/code&gt; will return &quot;Admin&quot;.</source>
          <target state="translated">次に、 &lt;code&gt;User.human_attribute_name(&quot;role.admin&quot;)&lt;/code&gt; は &quot;Admin&quot;を返します。</target>
        </trans-unit>
        <trans-unit id="69726d22ecf072f07dd132a5079e2db0487c5a16" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;User.model_name.human(count: 2)&lt;/code&gt; will return &quot;Customers&quot;. With &lt;code&gt;count: 1&lt;/code&gt; or without params will return &quot;Customer&quot;.</source>
          <target state="translated">次に、 &lt;code&gt;User.model_name.human(count: 2)&lt;/code&gt; は「Customers」を返します。では &lt;code&gt;count: 1&lt;/code&gt; かのparamsなしでは、「顧客」を返します。</target>
        </trans-unit>
        <trans-unit id="ce1ac48f704be117e0c440eeff8da490a84e2fdd" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;User.model_name.human&lt;/code&gt; will return &quot;Customer&quot; and &lt;code&gt;User.human_attribute_name(&quot;login&quot;)&lt;/code&gt; will return &quot;Handle&quot;.</source>
          <target state="translated">次に、 &lt;code&gt;User.model_name.human&lt;/code&gt; は「Customer」を返し、 &lt;code&gt;User.human_attribute_name(&quot;login&quot;)&lt;/code&gt; は「Handle」を返します。</target>
        </trans-unit>
        <trans-unit id="a1dcc9b3170af9168677c16003802ad10b7a65fa" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;parse_options&lt;/code&gt; is defined like this:</source>
          <target state="translated">次に、 &lt;code&gt;parse_options&lt;/code&gt; は次のように定義されます。</target>
        </trans-unit>
        <trans-unit id="23a50ecef846d168f5924b2581ba4253e1d79ec9" translate="yes" xml:space="preserve">
          <source>Then Action View will look first in this directory when resolving views.</source>
          <target state="translated">そうすると、アクションビューはビューを解決するときにこのディレクトリを最初に探します。</target>
        </trans-unit>
        <trans-unit id="459d1a5ee37a5dfc347ac0b9db5a24592e3778ee" translate="yes" xml:space="preserve">
          <source>Then Active Record will look for messages in this order:</source>
          <target state="translated">そうすると、Active Recordはこの順番でメッセージを探します。</target>
        </trans-unit>
        <trans-unit id="3d4d27ddd244a8a4ebabec05bc03c56676658e3a" translate="yes" xml:space="preserve">
          <source>Then any written signed cookies will be digested with SHA256. Old cookies that were written with SHA1 can still be read, and if accessed will be written with the new digest so they're upgraded and won't be invalid when you remove the rotation.</source>
          <target state="translated">その後、書き込まれた署名付きクッキーはすべてSHA256でダイジェストされます。SHA1で書き込まれた古いクッキーはまだ読むことができ、アクセスされた場合は新しいダイジェストで書き込まれるので、アップグレードされ、ローテーションを削除したときに無効になることはありません。</target>
        </trans-unit>
        <trans-unit id="85e3645699a57b500a4fac14d2ba27a49c74a6f7" translate="yes" xml:space="preserve">
          <source>Then define a list of methods that you want callbacks attached to:</source>
          <target state="translated">次に、コールバックをアタッチしたいメソッドのリストを定義します。</target>
        </trans-unit>
        <trans-unit id="4f510685cd652852a1e3efa690ea6956f7bcdfdb" translate="yes" xml:space="preserve">
          <source>Then do the same for the &lt;code&gt;app/views/articles/edit.html.erb&lt;/code&gt; view:</source>
          <target state="translated">次に、 &lt;code&gt;app/views/articles/edit.html.erb&lt;/code&gt; ビューに対して同じことを行います。</target>
        </trans-unit>
        <trans-unit id="35dfdb159823060f46838dd038413c533e538e9c" translate="yes" xml:space="preserve">
          <source>Then ensure that this file is loaded at the top of your &lt;code&gt;config/application.rb&lt;/code&gt; (or in your &lt;code&gt;Gemfile&lt;/code&gt;) and it will automatically load models, controllers and helpers inside &lt;code&gt;app&lt;/code&gt;, load routes at &lt;code&gt;config/routes.rb&lt;/code&gt;, load locales at &lt;code&gt;config/locales/*&lt;/code&gt;, and load tasks at &lt;code&gt;lib/tasks/*&lt;/code&gt;.</source>
          <target state="translated">次に、このファイルが &lt;code&gt;config/application.rb&lt;/code&gt; （または &lt;code&gt;Gemfile&lt;/code&gt; ）の上部に読み込まれていることを確認します。これにより、 &lt;code&gt;app&lt;/code&gt; 内のモデル、コントローラー、ヘルパーが自動的に読み込まれ、 &lt;code&gt;config/routes.rb&lt;/code&gt; にルートが読み込まれ、 &lt;code&gt;config/locales/*&lt;/code&gt; ロケールが読み込まれます。locales / *、および &lt;code&gt;lib/tasks/*&lt;/code&gt; でタスクをロードします。</target>
        </trans-unit>
        <trans-unit id="ce0a816131af5b4f10ba7dd68f10732047901d7d" translate="yes" xml:space="preserve">
          <source>Then gradually rotate the old values out by adding them as fallbacks. Any message generated with the old values will then work until the rotation is removed.</source>
          <target state="translated">次に、古い値をフォールバックとして追加することで、古い値を徐々に回転させていきます。古い値で生成されたメッセージは、回転が取り除かれるまで動作します。</target>
        </trans-unit>
        <trans-unit id="c25ba8a4f5f2e80428305d964bd1bf9df12698c9" translate="yes" xml:space="preserve">
          <source>Then in the view any form using &lt;code&gt;form_for&lt;/code&gt; will be an instance of the specified form builder:</source>
          <target state="translated">次に、ビューでは、 &lt;code&gt;form_for&lt;/code&gt; を使用するすべてのフォームが、指定されたフォームビルダーのインスタンスになります。</target>
        </trans-unit>
        <trans-unit id="e1a2120982b7267dfa978e50b64a59538c9064c3" translate="yes" xml:space="preserve">
          <source>Then in your class, you can use the &lt;code&gt;before_create&lt;/code&gt;, &lt;code&gt;after_create&lt;/code&gt; and &lt;code&gt;around_create&lt;/code&gt; methods, just as you would in an Active Record model.</source>
          <target state="translated">次に、クラスで、Active Recordモデルと同じように、 &lt;code&gt;before_create&lt;/code&gt; 、 &lt;code&gt;after_create&lt;/code&gt; 、および &lt;code&gt;around_create&lt;/code&gt; メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="aebe8891b52bd362b7f19f07d1a47dc194ca8c95" translate="yes" xml:space="preserve">
          <source>Then in your view, you can just reference &lt;code&gt;attachments&lt;/code&gt; as a hash and specify which attachment you want to show, calling &lt;code&gt;url&lt;/code&gt; on it and then passing the result into the &lt;code&gt;image_tag&lt;/code&gt; method:</source>
          <target state="translated">次に、ビューで、 &lt;code&gt;attachments&lt;/code&gt; をハッシュとして参照し、表示する添付ファイルを指定し、その添付ファイルの &lt;code&gt;url&lt;/code&gt; を呼び出して、結果を &lt;code&gt;image_tag&lt;/code&gt; メソッドに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="237fe237773a0ec739fb4cc8e5c87bcf8fa12ec0" translate="yes" xml:space="preserve">
          <source>Then make sure that all your job classes inherit from it.</source>
          <target state="translated">そして、すべてのジョブクラスがそれを継承していることを確認してください。</target>
        </trans-unit>
        <trans-unit id="4d121a9048cc21ad12c6bc9dfcf50d1c0c7ed200" translate="yes" xml:space="preserve">
          <source>Then make sure that all your models inherit from it.</source>
          <target state="translated">そして、すべてのモデルがそれを継承していることを確認してください。</target>
        </trans-unit>
        <trans-unit id="e9c05622c9e2375d881f99cefdba0de66f0a8aab" translate="yes" xml:space="preserve">
          <source>Then new join models are automatically created for the newly associated objects. If some that existed previously are now missing, then their join rows are automatically deleted.</source>
          <target state="translated">そして、新しく関連付けられたオブジェクトに対して新しい結合モデルが自動的に作成されます。以前に存在していたものがなくなった場合、それらの結合行は自動的に削除されます。</target>
        </trans-unit>
        <trans-unit id="8bb78d3088ec4a03fb4ba35f504b631634a22413" translate="yes" xml:space="preserve">
          <source>Then refer to this field in the form for the model:</source>
          <target state="translated">そして、モデル用のフォームのこのフィールドを参照してください。</target>
        </trans-unit>
        <trans-unit id="01700a39e23b7ab78877badc25228c5133bf399d" translate="yes" xml:space="preserve">
          <source>Then run &lt;code&gt;bundle&lt;/code&gt; to install the gem.</source>
          <target state="translated">次に &lt;code&gt;bundle&lt;/code&gt; を実行してgemをインストールします。</target>
        </trans-unit>
        <trans-unit id="3c797d8f24c8628794ae46f0798a2a8a395d237f" translate="yes" xml:space="preserve">
          <source>Then set up a mailbox:</source>
          <target state="translated">そして、メールボックスを設定します。</target>
        </trans-unit>
        <trans-unit id="b23cf8584845218e3a92147b3fe0ba5780c2bf36" translate="yes" xml:space="preserve">
          <source>Then that same purpose must be passed when verifying to get the data back out:</source>
          <target state="translated">そうすると、データを取り出すための検証の際には、同じ目的を渡さなければなりません。</target>
        </trans-unit>
        <trans-unit id="32681196fa4394258a9f0ddbaa6841d13623c56b" translate="yes" xml:space="preserve">
          <source>Then the &lt;code&gt;click_on &quot;New Article&quot;&lt;/code&gt; will find the &quot;New Article&quot; button on the index page. This will redirect the browser to &lt;code&gt;/articles/new&lt;/code&gt;.</source>
          <target state="translated">次に、 &lt;code&gt;click_on &quot;New Article&quot;&lt;/code&gt; ]をクリックすると、インデックスページに[新しい記事]ボタンが表示されます。これにより、ブラウザが &lt;code&gt;/articles/new&lt;/code&gt; にリダイレクトされます。</target>
        </trans-unit>
        <trans-unit id="c3adef20432b6b66fe2ce80984aa12cb32aa026a" translate="yes" xml:space="preserve">
          <source>Then the fun begins!</source>
          <target state="translated">そして、お楽しみが始まります!</target>
        </trans-unit>
        <trans-unit id="62bc07d8aa975b0496a50ba872658d371c63aa06" translate="yes" xml:space="preserve">
          <source>Then the messages can be verified and returned up to the expire time. Thereafter, the &lt;code&gt;verified&lt;/code&gt; method returns &lt;code&gt;nil&lt;/code&gt; while &lt;code&gt;verify&lt;/code&gt; raises &lt;code&gt;ActiveSupport::MessageVerifier::InvalidSignature&lt;/code&gt;.</source>
          <target state="translated">次に、メッセージを検証して、有効期限まで返されます。その後、 &lt;code&gt;verify&lt;/code&gt; は &lt;code&gt;ActiveSupport::MessageVerifier::InvalidSignature&lt;/code&gt; 発生させますが、 &lt;code&gt;verified&lt;/code&gt; メソッドは &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="13f7c19977b2cebec1e9a82e2e3042c127ffb695" translate="yes" xml:space="preserve">
          <source>Then the messages can be verified and returned up to the expire time. Thereafter, verifying returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">次に、メッセージを検証して、有効期限まで返されます。その後、検証すると &lt;code&gt;nil&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="37db38f09873e69b0d0d19b6cd96ccbb3c4b339b" translate="yes" xml:space="preserve">
          <source>Then the preview will be available in http://localhost:3000/rails/mailers/user_mailer/welcome_email.</source>
          <target state="translated">その後、http://localhost:3000/rails/mailers/user_mailer/welcome_email。</target>
        </trans-unit>
        <trans-unit id="369ed4a7ad9c26f1140c7972a5560f133f03519c" translate="yes" xml:space="preserve">
          <source>Then the returned token is &lt;code&gt;&quot;abc&quot;&lt;/code&gt;, and the options are &lt;code&gt;{nonce: &quot;def&quot;}&lt;/code&gt;</source>
          <target state="translated">次に、返されるトークンは &lt;code&gt;&quot;abc&quot;&lt;/code&gt; で、オプションは &lt;code&gt;{nonce: &quot;def&quot;}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="366a0275143580828d7dd35a9ff6892eaaf5f9a4" translate="yes" xml:space="preserve">
          <source>Then the test will fill in the title and body of the article with the specified text. Once the fields are filled in, &quot;Create Article&quot; is clicked on which will send a POST request to create the new article in the database.</source>
          <target state="translated">その後、テストは記事のタイトルと本文を指定したテキストで記入します。フィールドが入力されると、&quot;Create Article &quot;がクリックされ、データベースに新しい記事を作成するためのPOSTリクエストが送信されます。</target>
        </trans-unit>
        <trans-unit id="10a63abca550fb5d05522c45d27747f0e9db193b" translate="yes" xml:space="preserve">
          <source>Then the view, to display our message (in &lt;code&gt;app/views/greetings/hello.html.erb&lt;/code&gt;):</source>
          <target state="translated">次に、メッセージを表示するためのビュー（ &lt;code&gt;app/views/greetings/hello.html.erb&lt;/code&gt; 内）：</target>
        </trans-unit>
        <trans-unit id="ddfd5408dd5dd26d25099c7e83d85cdbe7fac7a2" translate="yes" xml:space="preserve">
          <source>Then we need to update &lt;code&gt;ApplicationRecord&lt;/code&gt; to be aware of our new replica.</source>
          <target state="translated">次に、 &lt;code&gt;ApplicationRecord&lt;/code&gt; を更新して、新しいレプリカを認識させる必要があります。</target>
        </trans-unit>
        <trans-unit id="098660123aac14d41b15d67b877d80ee14982a13" translate="yes" xml:space="preserve">
          <source>Then you can add an automatic nonce value by passing &lt;code&gt;nonce: true&lt;/code&gt; as part of &lt;code&gt;html_options&lt;/code&gt;. Example:</source>
          <target state="translated">次に、 &lt;code&gt;html_options&lt;/code&gt; の一部として &lt;code&gt;nonce: true&lt;/code&gt; を渡すことにより、自動nonce値を追加できます。例：</target>
        </trans-unit>
        <trans-unit id="0d37c70958344a9839a6342d4c9fc86d22db17b4" translate="yes" xml:space="preserve">
          <source>Then you can change &lt;code&gt;app/views/articles/show.html.erb&lt;/code&gt; to look like the following:</source>
          <target state="translated">次に、 &lt;code&gt;app/views/articles/show.html.erb&lt;/code&gt; を次のように変更できます。</target>
        </trans-unit>
        <trans-unit id="1f03061ab10bf02c25498814f574e5e40f393c87" translate="yes" xml:space="preserve">
          <source>Then you could create special views like &lt;code&gt;app/views/articles/show.expert.html.erb&lt;/code&gt; that would only be displayed to expert users.</source>
          <target state="translated">次に、 &lt;code&gt;app/views/articles/show.expert.html.erb&lt;/code&gt; のような、エキスパートユーザーにのみ表示される特別なビューを作成できます。</target>
        </trans-unit>
        <trans-unit id="496beabd3e4e458cf277bd0998b3a81e387ea7cd" translate="yes" xml:space="preserve">
          <source>Then you could do:</source>
          <target state="translated">ならば、あなたにもできるはずです。</target>
        </trans-unit>
        <trans-unit id="9063c5f74d1b74e7ea62cc04b8a5984d7224827c" translate="yes" xml:space="preserve">
          <source>Then you make the &lt;code&gt;app/views/articles/show.html.erb&lt;/code&gt; look like the following:</source>
          <target state="translated">次に、 &lt;code&gt;app/views/articles/show.html.erb&lt;/code&gt; を次のようにします。</target>
        </trans-unit>
        <trans-unit id="0ca1e0676acb4662d0e6ee4f9143d236d7763d5d" translate="yes" xml:space="preserve">
          <source>Then you start the server using a binstub in &lt;code&gt;bin/cable&lt;/code&gt; ala:</source>
          <target state="translated">次に、 &lt;code&gt;bin/cable&lt;/code&gt; alaのbinstubを使用してサーバーを起動します。</target>
        </trans-unit>
        <trans-unit id="87783a1bba48c17b1a2f3223b471f53bb6f44608" translate="yes" xml:space="preserve">
          <source>Then you would create your own channel classes. For example, you could have a &lt;code&gt;ChatChannel&lt;/code&gt; and an &lt;code&gt;AppearanceChannel&lt;/code&gt;:</source>
          <target state="translated">次に、独自のチャネルクラスを作成します。たとえば、 &lt;code&gt;ChatChannel&lt;/code&gt; と &lt;code&gt;AppearanceChannel&lt;/code&gt; を持つことができます：</target>
        </trans-unit>
        <trans-unit id="5b8b29d981a70edce615391b418603f900f0fc23" translate="yes" xml:space="preserve">
          <source>Then your library can be eager loaded by simply calling:</source>
          <target state="translated">そうすれば、単に呼び出すだけでライブラリを熱心に読み込むことができます。</target>
        </trans-unit>
        <trans-unit id="e48472de2f53d5ecda6546f6dd9503f542948c68" translate="yes" xml:space="preserve">
          <source>Then, if you want webrat to be invoked, just supply:</source>
          <target state="translated">そして、webratを起動させたい場合は、単に供給するだけです。</target>
        </trans-unit>
        <trans-unit id="70a620085ffad4cda58d1cc705b7621b4c3d6b03" translate="yes" xml:space="preserve">
          <source>Then, in another template or layout, this code would render both links in order:</source>
          <target state="translated">そして、別のテンプレートやレイアウトでは、このコードは両方のリンクを順番にレンダリングします。</target>
        </trans-unit>
        <trans-unit id="1ee33242fa8dc35c52b38b93dd261d062e831523" translate="yes" xml:space="preserve">
          <source>Then, in another template or layout, this code would render only the last link:</source>
          <target state="translated">そして、別のテンプレートやレイアウトでは、このコードは最後のリンクだけをレンダリングします。</target>
        </trans-unit>
        <trans-unit id="c02759babbfbed3b2ce9248b83250e3d9c6e304d" translate="yes" xml:space="preserve">
          <source>Then, in another view, you could to do something like this:</source>
          <target state="translated">その後、別のビューでは、このようなことをすることができます。</target>
        </trans-unit>
        <trans-unit id="2428dd5467214a1330f0142642a33f223e8adb27" translate="yes" xml:space="preserve">
          <source>Then, in any view rendered by &lt;code&gt;EventsController&lt;/code&gt;, the &lt;code&gt;format_time&lt;/code&gt; method can be called:</source>
          <target state="translated">次に、 &lt;code&gt;EventsController&lt;/code&gt; によってレンダリングされた任意のビューで、 &lt;code&gt;format_time&lt;/code&gt; メソッドを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="6ab1405302d62c1ecddf63d2dc2d85296feb34ca" translate="yes" xml:space="preserve">
          <source>Then, in your application's configuration, you can specify the service to use like this:</source>
          <target state="translated">そして、アプリケーションの設定では、このように使用するサービスを指定することができます。</target>
        </trans-unit>
        <trans-unit id="57185357f15f4a8fb2cd8be83b26417c031c473e" translate="yes" xml:space="preserve">
          <source>Then, one asserts whether the current state is as expected. &amp;ldquo;State&amp;rdquo; can be anything: the controller's HTTP response, the database contents, etc.</source>
          <target state="translated">次に、現在の状態が期待どおりかどうかをアサートします。「状態」は何でもかまいません：コントローラのHTTP応答、データベースの内容など。</target>
        </trans-unit>
        <trans-unit id="482ca65ca763b7b0baddca14580910c2d6413532" translate="yes" xml:space="preserve">
          <source>Then, one asserts whether the current state is as expected. &amp;ldquo;State&amp;rdquo; can be anything: transmitted messages, subscribed streams, etc.</source>
          <target state="translated">次に、現在の状態が期待どおりかどうかをアサートします。「状態」は何でもかまいません：送信されたメッセージ、サブスクライブされたストリームなど。</target>
        </trans-unit>
        <trans-unit id="031870965fb348d4c11e251e9555a1156c075b8c" translate="yes" xml:space="preserve">
          <source>There also may be a case where you have a database that you don't always want to connect to on application boot but may need for a slow query or analytics. After defining that database in the &lt;code&gt;database.yml&lt;/code&gt; you can connect by passing a database argument to &lt;code&gt;connected_to&lt;/code&gt;</source>
          <target state="translated">また、アプリケーションの起動時に常に接続する必要はないが、クエリや分析に時間がかかるデータベースが存在する場合もあります。で、そのデータベースを定義した後 &lt;code&gt;database.yml&lt;/code&gt; をあなたがにデータベース引数を渡すことで接続することができます &lt;code&gt;connected_to&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3bb2b87b49ad713bc9166e86cd1da2325e0969a0" translate="yes" xml:space="preserve">
          <source>There are &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt; and &lt;code&gt;protected&lt;/code&gt; methods in Ruby, but only &lt;code&gt;public&lt;/code&gt; methods can be actions for controllers. For more details check out &lt;a href=&quot;http://www.ruby-doc.org/docs/ProgrammingRuby/&quot;&gt;Programming Ruby&lt;/a&gt;.</source>
          <target state="translated">Rubyには &lt;code&gt;public&lt;/code&gt; 、 &lt;code&gt;private&lt;/code&gt; 、および &lt;code&gt;protected&lt;/code&gt; メソッドがありますが、コントローラーのアクションにできるのは &lt;code&gt;public&lt;/code&gt; メソッドのみです。詳細については、&lt;a href=&quot;http://www.ruby-doc.org/docs/ProgrammingRuby/&quot;&gt;Rubyのプログラミングを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="19b00caa5f3ff7b3b669683c7dea0b0d4f09835e" translate="yes" xml:space="preserve">
          <source>There are Valgrind tools that can automatically detect many memory management and threading bugs, and profile your programs in detail. For example, if a C extension in the interpreter calls &lt;code&gt;malloc()&lt;/code&gt; but doesn't properly call &lt;code&gt;free()&lt;/code&gt;, this memory won't be available until the app terminates.</source>
          <target state="translated">多くのメモリ管理とスレッド化のバグを自動的に検出し、プログラムを詳細にプロファイリングできるValgrindツールがあります。たとえば、インタプリタのC拡張が &lt;code&gt;malloc()&lt;/code&gt; を呼び出しても、 &lt;code&gt;free()&lt;/code&gt; を適切に呼び出さない場合、このメモリはアプリが終了するまで使用できません。</target>
        </trans-unit>
        <trans-unit id="9b00b3df83e32e888bc604425fec394ee693ccd7" translate="yes" xml:space="preserve">
          <source>There are a couple of new configuration settings that you should add to your development environment:</source>
          <target state="translated">開発環境に追加すべき新しい設定がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="164be5c17020dc109dc9be858a8e3b603db5fe38" translate="yes" xml:space="preserve">
          <source>There are a couple of things to notice in the above example. We need to make sure to close the response stream. Forgetting to close the stream will leave the socket open forever. We also have to set the content type to &lt;code&gt;text/event-stream&lt;/code&gt; before we write to the response stream. This is because headers cannot be written after the response has been committed (when &lt;code&gt;response.committed?&lt;/code&gt; returns a truthy value), which occurs when you &lt;code&gt;write&lt;/code&gt; or &lt;code&gt;commit&lt;/code&gt; the response stream.</source>
          <target state="translated">上記の例では、いくつかの注意点があります。必ず応答ストリームを閉じる必要があります。ストリームを閉じるのを忘れると、ソケットは永久に開いたままになります。また、応答ストリームに書き込む前に、コンテンツタイプを &lt;code&gt;text/event-stream&lt;/code&gt; に設定する必要があります。これは、応答がコミットされた後（ &lt;code&gt;response.committed?&lt;/code&gt; が真の値を返したとき）にヘッダーを書き込むことができないためです。これは、応答ストリームを &lt;code&gt;write&lt;/code&gt; だり &lt;code&gt;commit&lt;/code&gt; したりしたときに発生します。</target>
        </trans-unit>
        <trans-unit id="0c768baf5fd448c75d1de2436abdaa5e34da7465" translate="yes" xml:space="preserve">
          <source>There are a few caveats with this module. You &lt;strong&gt;cannot&lt;/strong&gt; write headers after the response has been committed (Response#committed? will return truthy). Calling &lt;code&gt;write&lt;/code&gt; or &lt;code&gt;close&lt;/code&gt; on the response stream will cause the response object to be committed. Make sure all headers are set before calling write or close on your stream.</source>
          <target state="translated">このモジュールにはいくつかの注意点があります。応答がコミットされた後でヘッダーを書き込むこと&lt;strong&gt;はできません&lt;/strong&gt;（Response＃committed？は真実を返します）。応答ストリームで &lt;code&gt;write&lt;/code&gt; または &lt;code&gt;close&lt;/code&gt; を呼び出すと、応答オブジェクトがコミットされます。ストリームでwriteまたはcloseを呼び出す前に、すべてのヘッダーが設定されていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="4bad24b22c7cae4c6a61de5d3108af1db11f82d6" translate="yes" xml:space="preserve">
          <source>There are a few commands that are absolutely critical to your everyday usage of Rails. In the order of how much you'll probably use them are:</source>
          <target state="translated">Railsを日常的に使う上で絶対に欠かせないコマンドがいくつかあります。おそらく使うであろう順に並べると以下のようになります。</target>
        </trans-unit>
        <trans-unit id="e56663a6abdb097299bc4197150b89e3d7d69945" translate="yes" xml:space="preserve">
          <source>There are a few configuration options available in Active Support:</source>
          <target state="translated">アクティブサポートでは、いくつかの設定オプションが用意されています。</target>
        </trans-unit>
        <trans-unit id="e637e4147c84d8dceeb2b213377ec66714ac9891" translate="yes" xml:space="preserve">
          <source>There are a few major changes related to JSON handling in Rails 4.1.</source>
          <target state="translated">Rails 4.1ではJSONの扱いに関連した大きな変更点がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="c564b1ac7e5320df2899d4761623e9c54d1bfc41" translate="yes" xml:space="preserve">
          <source>There are a few special &lt;code&gt;html_options&lt;/code&gt;:</source>
          <target state="translated">いくつかの特別な &lt;code&gt;html_options&lt;/code&gt; があります：</target>
        </trans-unit>
        <trans-unit id="09097833af7a7785ff0289cc3e4cd9f30ec67ede" translate="yes" xml:space="preserve">
          <source>There are a few steps to get up and running with I18n support for a Rails application.</source>
          <target state="translated">RailsアプリケーションのI18nサポートを利用して立ち上げるには、いくつかのステップがあります。</target>
        </trans-unit>
        <trans-unit id="d785783338230f3b87db04ee80e1a01039e7eb28" translate="yes" xml:space="preserve">
          <source>There are a few things to note here:</source>
          <target state="translated">ここで注意すべき点がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="a7ec542f6e00c4c48c1cc756a5abf11aceb10d86" translate="yes" xml:space="preserve">
          <source>There are a number of authentication plug-ins for Rails available. Good ones, such as the popular &lt;a href=&quot;https://github.com/plataformatec/devise&quot;&gt;devise&lt;/a&gt; and &lt;a href=&quot;https://github.com/binarylogic/authlogic&quot;&gt;authlogic&lt;/a&gt;, store only encrypted passwords, not plain-text passwords. In Rails 3.1 you can use the built-in &lt;code&gt;has_secure_password&lt;/code&gt; method which has similar features.</source>
          <target state="translated">Rails用の多数の認証プラグインが利用可能です。などの人気として良いもの、&lt;a href=&quot;https://github.com/plataformatec/devise&quot;&gt;工夫&lt;/a&gt;と&lt;a href=&quot;https://github.com/binarylogic/authlogic&quot;&gt;authlogic&lt;/a&gt;、店舗のみで暗号化されたパスワードではなく、プレーンテキストのパスワード。Rails 3.1 では、同様の機能を持つ &lt;code&gt;has_secure_password&lt;/code&gt; メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="9e915227e133b452b09ab70d569af6da2645774d" translate="yes" xml:space="preserve">
          <source>There are a number of settings available on &lt;code&gt;config.action_mailer&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;config.action_mailer&lt;/code&gt; にはいくつかの設定があります：</target>
        </trans-unit>
        <trans-unit id="dd7c127858d5bd0036433e51e9a1318a30cbc05b" translate="yes" xml:space="preserve">
          <source>There are also attribute readers and writers for the following attributes:</source>
          <target state="translated">また、以下のような属性の読み手や書き手もいます。</target>
        </trans-unit>
        <trans-unit id="6ab98ce79b9f7ae2b050438c168ded2c086027fb" translate="yes" xml:space="preserve">
          <source>There are also some optional column names that will add additional features to Active Record instances:</source>
          <target state="translated">また、Active Recordインスタンスに追加機能を追加するオプションのカラム名もいくつかあります。</target>
        </trans-unit>
        <trans-unit id="9a3b4a5facffc66d580f52bd37aca25d75f46c3f" translate="yes" xml:space="preserve">
          <source>There are also three special methods available: &lt;code&gt;object&lt;/code&gt;, &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;, which are the current item being rendered, its text and value methods, respectively. You can use them like this:</source>
          <target state="translated">また、3つの特別なメソッドを使用できます。 &lt;code&gt;object&lt;/code&gt; 、 &lt;code&gt;text&lt;/code&gt; 、 &lt;code&gt;value&lt;/code&gt; で、現在レンダリングされているアイテム、テキスト、値のメソッドです。次のように使用できます。</target>
        </trans-unit>
        <trans-unit id="e9328ff730efb351cb7c68f93646e3e43677d947" translate="yes" xml:space="preserve">
          <source>There are cases where you need to define a method with &lt;code&gt;define_method&lt;/code&gt;, but don't know whether a method with that name already exists. If it does, a warning is issued if they are enabled. No big deal, but not clean either.</source>
          <target state="translated">&lt;code&gt;define_method&lt;/code&gt; でメソッドを定義する必要がある場合がありますが、その名前のメソッドがすでに存在するかどうかはわかりません。存在する場合、それらが有効になっていると警告が発行されます。大したことではないが、きれいでもない。</target>
        </trans-unit>
        <trans-unit id="029bc6ef9eb6398dbbb511125f106e1c755e2fa6" translate="yes" xml:space="preserve">
          <source>There are certain queries that can't run inside a transaction. If your adapter supports DDL transactions you can use &lt;code&gt;disable_ddl_transaction!&lt;/code&gt; to disable them for a single migration.</source>
          <target state="translated">トランザクション内で実行できない特定のクエリがあります。アダプターがDDLトランザクションをサポートしている場合は、 &lt;code&gt;disable_ddl_transaction!&lt;/code&gt; を使用できます。1回の移行でそれらを無効にします。</target>
        </trans-unit>
        <trans-unit id="be7e376f41a66410dfe8064842fb23c80123304f" translate="yes" xml:space="preserve">
          <source>There are four types of callbacks accepted by the callback macros: &lt;a href=&quot;../method&quot;&gt;Method&lt;/a&gt; references (symbol), callback objects, inline methods (using a proc). &lt;a href=&quot;../method&quot;&gt;Method&lt;/a&gt; references and callback objects are the recommended approaches, inline methods using a proc are sometimes appropriate (such as for creating mix-ins).</source>
          <target state="translated">コールバックマクロが受け入れるコールバックには、&lt;a href=&quot;../method&quot;&gt;メソッド&lt;/a&gt;参照（シンボル）、コールバックオブジェクト、インラインメソッド（プロシージャを使用）の4つのタイプがあります。&lt;a href=&quot;../method&quot;&gt;メソッド&lt;/a&gt;参照とコールバックオブジェクトが推奨されるアプローチであり、プロシージャを使用するインラインメソッドが適切な場合があります（ミックスインの作成など）。</target>
        </trans-unit>
        <trans-unit id="c3c560843f70069524c11e393bc20f191103e246" translate="yes" xml:space="preserve">
          <source>There are just three methods that you need to send pretty much any email message:</source>
          <target state="translated">かなりどんなメールを送るにも必要な方法はたったの3つです。</target>
        </trans-unit>
        <trans-unit id="6c03497c42b565308fa509564379e1b6c94969d2" translate="yes" xml:space="preserve">
          <source>There are many other possibilities, like using a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag to make a cross-site request to a URL with a JSONP or JavaScript response. The response is executable code that the attacker can find a way to run, possibly extracting sensitive data. To protect against this data leakage, we must disallow cross-site &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags. Ajax requests, however, obey the browser's same-origin policy (only your own site is allowed to initiate &lt;code&gt;XmlHttpRequest&lt;/code&gt;) so we can safely allow them to return JavaScript responses.</source>
          <target state="translated">&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグを使用して、JSONPまたはJavaScript応答でURLへのクロスサイト要求を行うなど、他にも多くの可能性があります。応答は実行可能コードであり、攻撃者は実行方法を見つけ、機密データを抽出する可能性があります。このデータ漏洩を防ぐために、クロスサイトの &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグを禁止する必要があります。ただし、Ajaxリクエストはブラウザの同じ生成元のポリシー（自分のサイトだけが &lt;code&gt;XmlHttpRequest&lt;/code&gt; の開始を許可されている）に準拠しているため、JavaScript応答を安全に返すことができます。</target>
        </trans-unit>
        <trans-unit id="6fdedcb9b572bfe35fee43800e0ce6d8a996a6eb" translate="yes" xml:space="preserve">
          <source>There are many ways to change the state of an object in the database. Some methods will trigger validations, but some will not. This means that it's possible to save an object in the database in an invalid state if you aren't careful.</source>
          <target state="translated">データベース内のオブジェクトの状態を変更する方法はたくさんあります。いくつかのメソッドはバリデーションをトリガしますが、そうでないものもあります。つまり、注意しなければデータベース内のオブジェクトを無効な状態で保存することができるということです。</target>
        </trans-unit>
        <trans-unit id="be3d1d3662c8729fe79089273eee95478741ca7c" translate="yes" xml:space="preserve">
          <source>There are more assertions that are primarily used in testing views:</source>
          <target state="translated">主にテストビューで使用されるアサーションが増えました。</target>
        </trans-unit>
        <trans-unit id="1807ce7145d108f1d111bf9da906ad3f26500e7c" translate="yes" xml:space="preserve">
          <source>There are multiple ways to use the &lt;code&gt;joins&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;joins&lt;/code&gt; メソッドを使用する方法は複数あります。</target>
        </trans-unit>
        <trans-unit id="6d2fd0d7d839d4055f6084f32e67d508fe996a9f" translate="yes" xml:space="preserve">
          <source>There are nineteen callbacks in total, which give you immense power to react and prepare for each state in the Active Record life cycle. The sequence for calling &lt;a href=&quot;persistence#method-i-save&quot;&gt;ActiveRecord::Base#save&lt;/a&gt; for an existing record is similar, except that each &lt;code&gt;_create&lt;/code&gt; callback is replaced by the corresponding &lt;code&gt;_update&lt;/code&gt; callback.</source>
          <target state="translated">合計19のコールバックがあり、アクティブレコードのライフサイクルの各状態に対応して準備するための非常に強力な機能を提供します。既存のレコードに対して&lt;a href=&quot;persistence#method-i-save&quot;&gt;ActiveRecord :: Base＃save&lt;/a&gt;を呼び出すシーケンスは似ていますが、各 &lt;code&gt;_create&lt;/code&gt; コールバックが対応する &lt;code&gt;_update&lt;/code&gt; コールバックに置き換えられています。</target>
        </trans-unit>
        <trans-unit id="60676983eb349d9e47dfbfa92f1781e6b9e4aa75" translate="yes" xml:space="preserve">
          <source>There are no columns defined on the model side, Active Storage takes care of the mapping between your records and the attachments.</source>
          <target state="translated">モデル側には列が定義されていないので、Active Storageはレコードと添付ファイルの間のマッピングを管理します。</target>
        </trans-unit>
        <trans-unit id="df256418346b53d1574fb832c21a0cf0b180a492" translate="yes" xml:space="preserve">
          <source>There are now no strict dependencies on what the class is, only what the API for the class must be. The engine simply requires this class to define a &lt;code&gt;find_or_create_by&lt;/code&gt; method which returns an object of that class, to be associated with an article when it's created. This object, of course, should have some sort of identifier by which it can be referenced.</source>
          <target state="translated">現在、クラスとは厳密に依存関係はなく、クラスのAPIが何である必要があるかのみが異なります。エンジンは、このクラスに、そのクラスのオブジェクトを返す &lt;code&gt;find_or_create_by&lt;/code&gt; メソッドを定義することを要求するだけです。このメソッドは、記事の作成時に記事に関連付けられます。もちろん、このオブジェクトには、参照できる何らかの識別子が必要です。</target>
        </trans-unit>
        <trans-unit id="ce0a39ba9b7cf48f4c6055538e9adba40239a005" translate="yes" xml:space="preserve">
          <source>There are several connection-pooling-related options that you can add to your database connection configuration:</source>
          <target state="translated">データベースの接続設定に追加できるコネクションプーリング関連のオプションがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="9d0cadb28de56ba0c481802976db1808b725da35" translate="yes" xml:space="preserve">
          <source>There are several drawbacks to &lt;a href=&quot;relation#method-i-create_or_find_by&quot;&gt;create_or_find_by&lt;/a&gt;, though:</source>
          <target state="translated">ただし、&lt;a href=&quot;relation#method-i-create_or_find_by&quot;&gt;create_or_find_byに&lt;/a&gt;はいくつかの欠点があります。</target>
        </trans-unit>
        <trans-unit id="f5f6274648b333846f41816feb18e009ef513ce0" translate="yes" xml:space="preserve">
          <source>There are several other ways to validate data before it is saved into your database, including native database constraints, client-side validations and controller-level validations. Here's a summary of the pros and cons:</source>
          <target state="translated">データベースに保存する前にデータを検証する方法には、ネイティブデータベース制約、クライアント側の検証、コントローラレベルの検証など、他にもいくつかの方法があります。以下に長所と短所をまとめます。</target>
        </trans-unit>
        <trans-unit id="a69c97218c629d30b6c90b8aa47cb72f59eb27cb" translate="yes" xml:space="preserve">
          <source>There are several reasons why you might want to precompile your assets locally. Among them are:</source>
          <target state="translated">資産をローカルでプリコンパイルしたいと思う理由はいくつかあります。その中には次のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="f6dd344381ca41fca48a944fef01bf54b6f098f4" translate="yes" xml:space="preserve">
          <source>There are several ways of getting similar results with different sub-templating schemes using this technique. Note that there is no limit in nesting levels. One can use the &lt;code&gt;ActionView::render&lt;/code&gt; method via &lt;code&gt;render template: 'layouts/news'&lt;/code&gt; to base a new layout on the News layout. If you are sure you will not subtemplate the &lt;code&gt;News&lt;/code&gt; layout, you can replace the &lt;code&gt;content_for?(:news_content) ? yield(:news_content) : yield&lt;/code&gt; with simply &lt;code&gt;yield&lt;/code&gt;.</source>
          <target state="translated">この手法を使用して異なるサブテンプレートスキームで同様の結果を得る方法はいくつかあります。ネストレベルには制限がないことに注意してください。 &lt;code&gt;render template: 'layouts/news'&lt;/code&gt; を介して &lt;code&gt;ActionView::render&lt;/code&gt; メソッドを使用すると、ニュースレイアウトに基づいて新しいレイアウトを作成できます。 &lt;code&gt;News&lt;/code&gt; レイアウトをサブテンプレート化しないことが確実な場合は、 &lt;code&gt;content_for?(:news_content) ? yield(:news_content) : yield&lt;/code&gt; 置き換えることができます。yield（：news_content）：単に &lt;code&gt;yield&lt;/code&gt; を使用してします。</target>
        </trans-unit>
        <trans-unit id="eaecf0b4d2e44c25af3b3721a0250e08a8cd2eee" translate="yes" xml:space="preserve">
          <source>There are some Rails plugins to help you to find errors and debug your application. Here is a list of useful plugins for debugging:</source>
          <target state="translated">エラーを見つけてアプリケーションをデバッグするのに役立つRailsプラグインがいくつかあります。デバッグに便利なプラグインの一覧です。</target>
        </trans-unit>
        <trans-unit id="3504c265baaaac9aa5bf497840b330969a940f12" translate="yes" xml:space="preserve">
          <source>There are some cases where you may want your application to connect to a primary or a replica and the automatic connection switching isn't adequate. For example, you may know that for a particular request you always want to send the request to a replica, even when you are in a POST request path.</source>
          <target state="translated">アプリケーションをプライマリやレプリカに接続したい場合、自動接続の切り替えが適切でない場合があります。例えば、特定のリクエストに対しては、POST リクエストパスにある場合でも、常にレプリカにリクエストを送りたいと思っているかもしれません。</target>
        </trans-unit>
        <trans-unit id="dcb72f26c9dfff3c7688908dbc5a105968528743" translate="yes" xml:space="preserve">
          <source>There are some common options that can be used by all cache implementations. These can be passed to the constructor or the various methods to interact with entries.</source>
          <target state="translated">すべてのキャッシュ実装で使用できる共通のオプションがいくつかあります。これらはコンストラクタに渡されたり、エントリを操作するための様々なメソッドに渡されたりします。</target>
        </trans-unit>
        <trans-unit id="2325217393bb4e236ec11a3514d7759e8a18cf18" translate="yes" xml:space="preserve">
          <source>There are some examples below. This guide won't cover all the possibilities, just a few as examples. When an Active Record method is called, the query is not immediately generated and sent to the database, this just happens when the data is actually needed. So each example below generates a single query.</source>
          <target state="translated">以下にいくつかの例があります。このガイドではすべての可能性を網羅しているわけではありませんが、いくつかの例を挙げています。アクティブレコードメソッドが呼び出されたとき、クエリはすぐに生成されてデータベースに送信されるわけではありません。したがって、以下の各例は単一のクエリを生成します。</target>
        </trans-unit>
        <trans-unit id="f44c42117c2e27fc38b3118894601990c020d261" translate="yes" xml:space="preserve">
          <source>There are some more advanced features available even if the id is specified:</source>
          <target state="translated">idを指定していても、もっと高度な機能があります。</target>
        </trans-unit>
        <trans-unit id="14faa76835e014a527d5b1b7b1bb9d3a6e93a8d7" translate="yes" xml:space="preserve">
          <source>There are some places where an Engine's name is used:</source>
          <target state="translated">エンジンの名前が使われている場所があります。</target>
        </trans-unit>
        <trans-unit id="27a508a465b22ff0965c167edd7ee17a8164704a" translate="yes" xml:space="preserve">
          <source>There are some situations where your engine's assets are not required by the host application. For example, say that you've created an admin functionality that only exists for your engine. In this case, the host application doesn't need to require &lt;code&gt;admin.css&lt;/code&gt; or &lt;code&gt;admin.js&lt;/code&gt;. Only the gem's admin layout needs these assets. It doesn't make sense for the host app to include &lt;code&gt;&quot;blorgh/admin.css&quot;&lt;/code&gt; in its stylesheets. In this situation, you should explicitly define these assets for precompilation. This tells Sprockets to add your engine assets when &lt;code&gt;rails assets:precompile&lt;/code&gt; is triggered.</source>
          <target state="translated">エンジンのアセットがホストアプリケーションで必要とされない場合があります。たとえば、エンジンにのみ存在する管理機能を作成したとします。この場合、ホストアプリケーションは &lt;code&gt;admin.css&lt;/code&gt; または &lt;code&gt;admin.js&lt;/code&gt; を必要としない。宝石の管理レイアウトのみがこれらのアセットを必要とします。ホストアプリがスタイルシートに &lt;code&gt;&quot;blorgh/admin.css&quot;&lt;/code&gt; を含めることは意味がありません。この状況では、これらのアセットをプリコンパイル用に明示的に定義する必要があります。これは、 &lt;code&gt;rails assets:precompile&lt;/code&gt; がトリガーされたときにエンジンアセットを追加するようにSprocketsに指示します。</target>
        </trans-unit>
        <trans-unit id="eafc5e31bbabf67fe699f3bf8db1b952c9f7fdb7" translate="yes" xml:space="preserve">
          <source>There are three caveats:</source>
          <target state="translated">3つの注意点があります。</target>
        </trans-unit>
        <trans-unit id="e188cdad09cfb6d1d34ff6a8e5ddae318e8c144e" translate="yes" xml:space="preserve">
          <source>There are three tag options available for the &lt;code&gt;auto_discovery_link_tag&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;auto_discovery_link_tag&lt;/code&gt; で使用できるタグオプションは3つあります。</target>
        </trans-unit>
        <trans-unit id="22616ec1cb1b82bc502e98a842309397e39db66a" translate="yes" xml:space="preserve">
          <source>There are times, however, in which you want to make sure a certain constant is known when the execution reaches some code. &lt;code&gt;require_dependency&lt;/code&gt; provides a way to load a file using the current &lt;a href=&quot;#loading-mechanism&quot;&gt;loading mechanism&lt;/a&gt;, and keeping track of constants defined in that file as if they were autoloaded to have them reloaded as needed.</source>
          <target state="translated">ただし、実行がコードに到達したときに、特定の定数が確実に認識されるようにする必要がある場合があります。 &lt;code&gt;require_dependency&lt;/code&gt; は、現在の&lt;a href=&quot;#loading-mechanism&quot;&gt;読み込みメカニズム&lt;/a&gt;を使用してファイルを読み込み、必要に応じて再読み込みするために自動読み込みされたかのようにそのファイルで定義された定数を追跡する方法を提供します。</target>
        </trans-unit>
        <trans-unit id="c3ed8e7e59b27e9304399311f3fe5faab63bd90b" translate="yes" xml:space="preserve">
          <source>There are two additional callbacks that are triggered by the completion of a database transaction: &lt;code&gt;after_commit&lt;/code&gt; and &lt;code&gt;after_rollback&lt;/code&gt;. These callbacks are very similar to the &lt;code&gt;after_save&lt;/code&gt; callback except that they don't execute until after database changes have either been committed or rolled back. They are most useful when your active record models need to interact with external systems which are not part of the database transaction.</source>
          <target state="translated">データベーストランザクションの完了によってトリガーされる2つの追加のコールバックがあります &lt;code&gt;after_commit&lt;/code&gt; と &lt;code&gt;after_rollback&lt;/code&gt; です。これらのコールバックは、データベースの変更がコミットまたはロールバックされるまで実行されないことを除いて、 &lt;code&gt;after_save&lt;/code&gt; コールバックと非常に似ています。これらは、アクティブなレコードモデルがデータベーストランザクションの一部ではない外部システムとやり取りする必要がある場合に最も役立ちます。</target>
        </trans-unit>
        <trans-unit id="ebec656902b77e7e217ac4c0f7cc86f86eb27a9d" translate="yes" xml:space="preserve">
          <source>There are two aspects of testing your mailer, the unit tests and the functional tests. In the unit tests, you run the mailer in isolation with tightly controlled inputs and compare the output to a known value (a fixture.) In the functional tests you don't so much test the minute details produced by the mailer; instead, we test that our controllers and models are using the mailer in the right way. You test to prove that the right email was sent at the right time.</source>
          <target state="translated">メーラーのテストには、ユニットテストと機能テストの2つの側面があります。ユニットテストでは、厳密に制御された入力でメーラーを分離して実行し、出力を既知の値(フィクスチャ)と比較します。機能テストでは、メーラーによって生成された詳細なテストはあまり行いません。適切なメールが適切なタイミングで送信されたかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="21ab6495877059c526b8c930367d1a5ed97661b6" translate="yes" xml:space="preserve">
          <source>There are two basic forms of output:</source>
          <target state="translated">出力には基本的に2つの形式があります。</target>
        </trans-unit>
        <trans-unit id="3908d57e19af4589dfaef7f9b86ed3ee6e3d3338" translate="yes" xml:space="preserve">
          <source>There are two forms of &lt;code&gt;assert_select&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;assert_select&lt;/code&gt; には2つの形式があります。</target>
        </trans-unit>
        <trans-unit id="21763745a45506727a5852b2909e7957b19bc082" translate="yes" xml:space="preserve">
          <source>There are two kinds of Active Record objects: those that correspond to a row inside your database and those that do not. When you create a fresh object, for example using the &lt;code&gt;new&lt;/code&gt; method, that object does not belong to the database yet. Once you call &lt;code&gt;save&lt;/code&gt; upon that object it will be saved into the appropriate database table. Active Record uses the &lt;code&gt;new_record?&lt;/code&gt; instance method to determine whether an object is already in the database or not. Consider the following simple Active Record class:</source>
          <target state="translated">Active Recordオブジェクトには、データベース内の行に対応するものとそうでないものの2種類があります。たとえば &lt;code&gt;new&lt;/code&gt; メソッドを使用して新しいオブジェクトを作成する場合、そのオブジェクトはまだデータベースに属していません。そのオブジェクトに対して &lt;code&gt;save&lt;/code&gt; を呼び出すと、適切なデータベーステーブルに保存されます。Active Recordは &lt;code&gt;new_record?&lt;/code&gt; オブジェクトがすでにデータベースに存在するかどうかを判別するインスタンスメソッド。次の単純なActive Recordクラスを考えてみましょう：</target>
        </trans-unit>
        <trans-unit id="fefc70cada4f4163764455cd1803175c7cf08d52" translate="yes" xml:space="preserve">
          <source>There are two possible formats for the &lt;code&gt;choices&lt;/code&gt; parameter, corresponding to other helpers' output:</source>
          <target state="translated">他のヘルパーの出力に対応して、 &lt;code&gt;choices&lt;/code&gt; パラメーターには2つの可能な形式があります。</target>
        </trans-unit>
        <trans-unit id="0cc91023998bdb1d2e4f422cbca40e4f89e8b1ae" translate="yes" xml:space="preserve">
          <source>There are two possible gotchas here in development mode:</source>
          <target state="translated">開発モードでは、ここには2つの可能性のあるゲッチュがあります。</target>
        </trans-unit>
        <trans-unit id="f5e43c596f90a95651acd56ed24b8ccadf92e3b4" translate="yes" xml:space="preserve">
          <source>There are two strings in our code that are in English and that users will be rendered in our response (&quot;Hello Flash&quot; and &quot;Hello World&quot;). In order to internationalize this code, these strings need to be replaced by calls to Rails' &lt;code&gt;#t&lt;/code&gt; helper with an appropriate key for each string:</source>
          <target state="translated">コードには2つの文字列が英語であり、ユーザーは応答でレンダリングされます（ &quot;Hello Flash&quot;と &quot;Hello World&quot;）。このコードを国際化するには、これらの文字列をRailsの &lt;code&gt;#t&lt;/code&gt; ヘルパーの呼び出しに置き換えて、各文字列に適切なキーを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="0406ff92458bec18fa3c41b42493cedbdf751109" translate="yes" xml:space="preserve">
          <source>There are two types of callbacks associated with committing and rolling back transactions: &lt;a href=&quot;classmethods#method-i-after_commit&quot;&gt;after_commit&lt;/a&gt; and &lt;a href=&quot;classmethods#method-i-after_rollback&quot;&gt;after_rollback&lt;/a&gt;.</source>
          <target state="translated">トランザクションのコミットとロールバックに関連するコールバックには、&lt;a href=&quot;classmethods#method-i-after_commit&quot;&gt;after_commit&lt;/a&gt;と&lt;a href=&quot;classmethods#method-i-after_rollback&quot;&gt;after_rollbackの&lt;/a&gt; 2つのタイプがあります。</target>
        </trans-unit>
        <trans-unit id="2fed839d5811d96a75c77988c842d3f1167e018e" translate="yes" xml:space="preserve">
          <source>There are two types of form helpers: those that specifically work with model attributes and those that don't. This helper deals with those that work with model attributes; to see an example of form helpers that don't work with model attributes, check the &lt;code&gt;ActionView::Helpers::FormTagHelper&lt;/code&gt; documentation.</source>
          <target state="translated">フォームヘルパーには2つのタイプがあります。モデルヘルパーで特に機能するものと機能しないものです。このヘルパーは、モデル属性を扱うものを扱います。モデル属性で機能しないフォームヘルパーの例を確認するには、 &lt;code&gt;ActionView::Helpers::FormTagHelper&lt;/code&gt; ドキュメントを確認してください。</target>
        </trans-unit>
        <trans-unit id="f56085fc03bb10b4267212f4c8adf98797c60bac" translate="yes" xml:space="preserve">
          <source>There are two ways to build a many-to-many relationship.</source>
          <target state="translated">多対多の関係を築くには2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="0a459232a7400ba945311f0a8eea99dc78b24f4f" translate="yes" xml:space="preserve">
          <source>There are two ways to mitigate this problem.</source>
          <target state="translated">この問題を緩和するには2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="695714ece75baa8719cb57f7edb9157a784685da" translate="yes" xml:space="preserve">
          <source>There are two ways to resume execution of an application that is stopped in the debugger:</source>
          <target state="translated">デバッガで停止しているアプリケーションの実行を再開するには、2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="712b8504b1eed7dc8fb0d1ff75b300c48fed5b1e" translate="yes" xml:space="preserve">
          <source>There are two ways to work with &lt;a href=&quot;schemastatements#method-i-create_table&quot;&gt;create_table&lt;/a&gt;. You can use the block form or the regular form, like this:</source>
          <target state="translated">&lt;a href=&quot;schemastatements#method-i-create_table&quot;&gt;create_tableを操作&lt;/a&gt;するには2つの方法があります。次のように、ブロックフォームまたは通常のフォームを使用できます。</target>
        </trans-unit>
        <trans-unit id="7856da849630e83ad1164d4aea2457adeb33092a" translate="yes" xml:space="preserve">
          <source>There exist two options for &lt;code&gt;scope&lt;/code&gt; to customize shallow routes. &lt;code&gt;:shallow_path&lt;/code&gt; prefixes member paths with the specified parameter:</source>
          <target state="translated">浅いルートをカスタマイズする &lt;code&gt;scope&lt;/code&gt; には2つのオプションがあります。 &lt;code&gt;:shallow_path&lt;/code&gt; は、指定されたパラメーターでメンバーのパスの前に付けます。</target>
        </trans-unit>
        <trans-unit id="7fe658cab3ae9b31e60d801bb4eb0338faa6a33e" translate="yes" xml:space="preserve">
          <source>There is a &lt;code&gt;:scope&lt;/code&gt; option that you can use to specify one or more attributes that are used to limit the uniqueness check:</source>
          <target state="translated">ある &lt;code&gt;:scope&lt;/code&gt; あなたが一意性チェックを制限するために使用される1つのまたは複数の属性を指定するために使用できるオプションは：</target>
        </trans-unit>
        <trans-unit id="6b34607bfb43676f4c857579d76a627e23d434d2" translate="yes" xml:space="preserve">
          <source>There is a naming convention for views in Rails. Typically, the views share their name with the associated controller action, as you can see above. For example, the index controller action of the &lt;code&gt;articles_controller.rb&lt;/code&gt; will use the &lt;code&gt;index.html.erb&lt;/code&gt; view file in the &lt;code&gt;app/views/articles&lt;/code&gt; directory. The complete HTML returned to the client is composed of a combination of this ERB file, a layout template that wraps it, and all the partials that the view may reference. Within this guide you will find more detailed documentation about each of these three components.</source>
          <target state="translated">Railsのビューには命名規則があります。通常、ビューは、上記のように、関連付けられたコントローラーアクションと名前を共有します。たとえば、 &lt;code&gt;articles_controller.rb&lt;/code&gt; のインデックスコントローラアクションは、 &lt;code&gt;app/views/articles&lt;/code&gt; ディレクトリにある &lt;code&gt;index.html.erb&lt;/code&gt; ビューファイルを使用します。クライアントに返される完全なHTMLは、このERBファイル、それをラップするレイアウトテンプレート、およびビューが参照する可能性のあるすべてのパーシャルの組み合わせで構成されます。このガイドには、これらの3つのコンポーネントのそれぞれに関するより詳細なドキュメントがあります。</target>
        </trans-unit>
        <trans-unit id="f860d89c3679de331732d4f89fb91db66b50e84b" translate="yes" xml:space="preserve">
          <source>There is a potential pitfall here: &lt;a href=&quot;classmethods#method-i-has_and_belongs_to_many&quot;&gt;has_and_belongs_to_many&lt;/a&gt; and &lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt;&lt;code&gt;:through&lt;/code&gt; associations have records in join tables, as well as the associated records. So when we call one of these deletion methods, what exactly should be deleted?</source>
          <target state="translated">ここに潜在的な落とし穴があります：&lt;a href=&quot;classmethods#method-i-has_and_belongs_to_many&quot;&gt;has_and_belongs_to_many&lt;/a&gt;および&lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;has_many &lt;/a&gt; &lt;code&gt;:through&lt;/code&gt; アソシエーションには、関連付けられたレコードだけでなく、結合テーブルにレコードがあります。では、これらの削除メソッドの1つを呼び出すと、何を削除する必要があるのでしょうか。</target>
        </trans-unit>
        <trans-unit id="0ad48ba9aa950ddaa4d4c357e39bd9c68fa32f1d" translate="yes" xml:space="preserve">
          <source>There is a single hash of options. HTML options (except &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt;) are passed in the &lt;code&gt;:html&lt;/code&gt; hash. Also you can provide a &lt;code&gt;:namespace&lt;/code&gt; option for your form to ensure uniqueness of id attributes on form elements. The scope attribute will be prefixed with underscore on the generated HTML id.</source>
          <target state="translated">オプションのハッシュは1つです。HTMLオプション（ &lt;code&gt;id&lt;/code&gt; と &lt;code&gt;class&lt;/code&gt; を除く）は &lt;code&gt;:html&lt;/code&gt; ハッシュで渡されます。また、フォームに &lt;code&gt;:namespace&lt;/code&gt; オプションを指定して、フォーム要素のid属性が一意であることを確認できます。生成されたHTML IDでは、スコープ属性の前にアンダースコアが付けられます。</target>
        </trans-unit>
        <trans-unit id="b987a89e8d81fab49645c31428afa62da4caa34e" translate="yes" xml:space="preserve">
          <source>There is a special syntactic shortcut to generate migrations that add fields to a table.</source>
          <target state="translated">テーブルにフィールドを追加するマイグレーションを生成するための特殊な構文ショートカットがあります。</target>
        </trans-unit>
        <trans-unit id="944ce00ff07d7562a7c32486d88946c164d99489" translate="yes" xml:space="preserve">
          <source>There is also &lt;code&gt;time_zone_options_for_select&lt;/code&gt; helper for a more manual (therefore more customizable) way of doing this. Read the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-time_zone_options_for_select&quot;&gt;API documentation&lt;/a&gt; to learn about the possible arguments for these two methods.</source>
          <target state="translated">これを行うためのより手動の（したがってよりカスタマイズ可能な）方法のための &lt;code&gt;time_zone_options_for_select&lt;/code&gt; ヘルパーもあります。&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-time_zone_options_for_select&quot;&gt;APIドキュメント&lt;/a&gt;を読んで、これらの2つのメソッドで可能な引数について学んでください。</target>
        </trans-unit>
        <trans-unit id="a92a7948a7a3e7a37f987d13b99d1b0f66b3afae" translate="yes" xml:space="preserve">
          <source>There is also a &lt;code&gt;:case_sensitive&lt;/code&gt; option that you can use to define whether the confirmation constraint will be case sensitive or not. This option defaults to true.</source>
          <target state="translated">あり &lt;code&gt;:case_sensitive&lt;/code&gt; あなたが確認の制約が大文字と小文字を区別されるかどうかを定義するために使用できるというオプションが。このオプションのデフォルトはtrueです。</target>
        </trans-unit>
        <trans-unit id="08f395432cafd500b3c51b02a880645ff49e9691" translate="yes" xml:space="preserve">
          <source>There is also a &lt;code&gt;:case_sensitive&lt;/code&gt; option that you can use to define whether the uniqueness constraint will be case sensitive or not. This option defaults to true.</source>
          <target state="translated">あり &lt;code&gt;:case_sensitive&lt;/code&gt; あなたは一意性制約は大文字と小文字を区別されるかどうかを定義するために使用できるというオプションが。このオプションのデフォルトはtrueです。</target>
        </trans-unit>
        <trans-unit id="26319a846afaaffb853e530a85dca196e17bc21e" translate="yes" xml:space="preserve">
          <source>There is also a &lt;code&gt;clear&lt;/code&gt; method which is the same as &lt;code&gt;delete_all&lt;/code&gt;, except that it returns the association rather than the records which have been deleted.</source>
          <target state="translated">削除されたレコードではなく関連付けを返すことを除いて、 &lt;code&gt;delete_all&lt;/code&gt; と同じ &lt;code&gt;clear&lt;/code&gt; メソッドもあります。</target>
        </trans-unit>
        <trans-unit id="c4438c6b2101cf26639e5c33a5913bcf47daf55b" translate="yes" xml:space="preserve">
          <source>There is also a &lt;code&gt;main_app&lt;/code&gt; helper that gives you access to application's routes inside Engine:</source>
          <target state="translated">Engine内のアプリケーションのルートにアクセスできる &lt;code&gt;main_app&lt;/code&gt; ヘルパーもあります。</target>
        </trans-unit>
        <trans-unit id="cba91c500dccf5183f072dd89abfd1037c67edd4" translate="yes" xml:space="preserve">
          <source>There is also a generator which will produce join tables if &lt;code&gt;JoinTable&lt;/code&gt; is part of the name:</source>
          <target state="translated">&lt;code&gt;JoinTable&lt;/code&gt; が名前の一部である場合に結合テーブルを生成するジェネレータもあります。</target>
        </trans-unit>
        <trans-unit id="b7e914c5609d154d382e9c0fba25c6d3a3dd2085" translate="yes" xml:space="preserve">
          <source>There is also a list of default options supported by every validator: &lt;code&gt;:if&lt;/code&gt;, &lt;code&gt;:unless&lt;/code&gt;, &lt;code&gt;:on&lt;/code&gt; and &lt;code&gt;:strict&lt;/code&gt;. See &lt;code&gt;ActiveModel::Validations#validates&lt;/code&gt; for more information</source>
          <target state="translated">すべてのバリデーターでサポートされているデフォルトのオプションのリストもあります &lt;code&gt;:if&lt;/code&gt; 、 &lt;code&gt;:unless&lt;/code&gt; 、 &lt;code&gt;:on&lt;/code&gt; 、 &lt;code&gt;:strict&lt;/code&gt; 。詳細については、 &lt;code&gt;ActiveModel::Validations#validates&lt;/code&gt; を参照してください</target>
        </trans-unit>
        <trans-unit id="d6bee8d7a48948390ca575bad45aeccd8d98d156" translate="yes" xml:space="preserve">
          <source>There is also a list of default options supported by every validator: &lt;code&gt;:if&lt;/code&gt;, &lt;code&gt;:unless&lt;/code&gt;, &lt;code&gt;:on&lt;/code&gt;, &lt;code&gt;:allow_nil&lt;/code&gt;, &lt;code&gt;:allow_blank&lt;/code&gt;, and &lt;code&gt;:strict&lt;/code&gt; . See &lt;code&gt;ActiveModel::Validations#validates&lt;/code&gt; for more information</source>
          <target state="translated">すべてのバリデーターによってサポートされているデフォルトのオプションのリストもあります &lt;code&gt;:if&lt;/code&gt; 、 &lt;code&gt;:unless&lt;/code&gt; 、 &lt;code&gt;:on&lt;/code&gt; 、 &lt;code&gt;:allow_nil&lt;/code&gt; 、 &lt;code&gt;:allow_blank&lt;/code&gt; 、および &lt;code&gt;:strict&lt;/code&gt; 。詳細については、 &lt;code&gt;ActiveModel::Validations#validates&lt;/code&gt; を参照してください</target>
        </trans-unit>
        <trans-unit id="93847491505e729e6d4ee5a015588bdb8858326f" translate="yes" xml:space="preserve">
          <source>There is also a list of default options supported by every validator: &lt;code&gt;:if&lt;/code&gt;, &lt;code&gt;:unless&lt;/code&gt;, &lt;code&gt;:on&lt;/code&gt;, &lt;code&gt;:allow_nil&lt;/code&gt;, &lt;code&gt;:allow_blank&lt;/code&gt;, and &lt;code&gt;:strict&lt;/code&gt;. See &lt;code&gt;ActiveModel::Validations#validates&lt;/code&gt; for more information</source>
          <target state="translated">すべてのバリデーターによってサポートされているデフォルトのオプションのリストもあります &lt;code&gt;:if&lt;/code&gt; 、 &lt;code&gt;:unless&lt;/code&gt; 、 &lt;code&gt;:on&lt;/code&gt; 、 &lt;code&gt;:allow_nil&lt;/code&gt; 、 &lt;code&gt;:allow_blank&lt;/code&gt; 、および &lt;code&gt;:strict&lt;/code&gt; 。詳細については、 &lt;code&gt;ActiveModel::Validations#validates&lt;/code&gt; を参照してください</target>
        </trans-unit>
        <trans-unit id="748b9c1ab9da9de40e6d3ebf30e2e1413de7f5d8" translate="yes" xml:space="preserve">
          <source>There is also a list of default options supported by every validator: &lt;code&gt;:if&lt;/code&gt;, &lt;code&gt;:unless&lt;/code&gt;, &lt;code&gt;:on&lt;/code&gt;, &lt;code&gt;:allow_nil&lt;/code&gt;, &lt;code&gt;:allow_blank&lt;/code&gt;, and &lt;code&gt;:strict&lt;/code&gt;. See &lt;code&gt;ActiveModel::Validations#validates&lt;/code&gt; for more information.</source>
          <target state="translated">すべてのバリデーターによってサポートされているデフォルトのオプションのリストもあります &lt;code&gt;:if&lt;/code&gt; 、 &lt;code&gt;:unless&lt;/code&gt; 、 &lt;code&gt;:on&lt;/code&gt; 、 &lt;code&gt;:allow_nil&lt;/code&gt; 、 &lt;code&gt;:allow_blank&lt;/code&gt; 、および &lt;code&gt;:strict&lt;/code&gt; 。詳細については、 &lt;code&gt;ActiveModel::Validations#validates&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="f7fe45a08fca5fe58f1e88f7ac7a9210fc69391d" translate="yes" xml:space="preserve">
          <source>There is also a list of options that could be used along with validators:</source>
          <target state="translated">バリデータと一緒に使えるオプションのリストもあります。</target>
        </trans-unit>
        <trans-unit id="79225454c971f81087b4f4c0e463d1f98b8b3dbb" translate="yes" xml:space="preserve">
          <source>There is also a shorthand for this. Assuming &lt;code&gt;@products&lt;/code&gt; is a collection of &lt;code&gt;Product&lt;/code&gt; instances, you can simply write this in the &lt;code&gt;index.html.erb&lt;/code&gt; to produce the same result:</source>
          <target state="translated">これの省略形もあります。 &lt;code&gt;@products&lt;/code&gt; が &lt;code&gt;Product&lt;/code&gt; インスタンスのコレクションであると仮定すると、これを &lt;code&gt;index.html.erb&lt;/code&gt; に書き込むだけで同じ結果を生成できます。</target>
        </trans-unit>
        <trans-unit id="1c448005d30e7a661bfd3a32354d884702b6586b" translate="yes" xml:space="preserve">
          <source>There is also an alias for using the &lt;code&gt;after_commit&lt;/code&gt; callback for both create and update together:</source>
          <target state="translated">作成と更新の両方に &lt;code&gt;after_commit&lt;/code&gt; コールバックを使用するためのエイリアスもあります。</target>
        </trans-unit>
        <trans-unit id="86bcd3acef2da93d850e3310b1f9b06238e93baa" translate="yes" xml:space="preserve">
          <source>There is also the ability to pass a custom exception to the &lt;code&gt;:strict&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;:strict&lt;/code&gt; オプションにカスタム例外を渡す機能もあります。</target>
        </trans-unit>
        <trans-unit id="e59b241c28f8480ba0ce4c51c99155489acd967b" translate="yes" xml:space="preserve">
          <source>There is an exception for the &lt;code&gt;format&lt;/code&gt; constraint: while it's a method on the Request object, it's also an implicit optional parameter on every path. Segment constraints take precedence and the &lt;code&gt;format&lt;/code&gt; constraint is only applied as such when enforced through a hash. For example, &lt;code&gt;get 'foo', constraints: { format: 'json' }&lt;/code&gt; will match &lt;code&gt;GET  /foo&lt;/code&gt; because the format is optional by default. However, you can &lt;a href=&quot;#advanced-constraints&quot;&gt;use a lambda&lt;/a&gt; like in &lt;code&gt;get 'foo', constraints: lambda { |req| req.format == :json }&lt;/code&gt; and the route will only match explicit JSON requests.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 制約には例外があります。これはRequestオブジェクトのメソッドですが、すべてのパスの暗黙的なオプションパラメータでもあります。セグメント制約が優先され、 &lt;code&gt;format&lt;/code&gt; 制約はハッシュを介して適用された場合にのみ適用されます。たとえば、 &lt;code&gt;get 'foo', constraints: { format: 'json' }&lt;/code&gt; は、デフォルトで形式がオプションであるため、 &lt;code&gt;GET /foo&lt;/code&gt; と一致します。ただし、 &lt;code&gt;get 'foo', constraints: lambda { |req| req.format == :json }&lt;/code&gt; ように&lt;a href=&quot;#advanced-constraints&quot;&gt;ラムダ&lt;/a&gt;を使用することができます。制約：lambda {| req | req.format ==：json}であり、ルートは明示的なJSONリクエストにのみ一致します。</target>
        </trans-unit>
        <trans-unit id="b8a91b18877002868c9dc749f792dcc0a1f11220" translate="yes" xml:space="preserve">
          <source>There is even &lt;code&gt;file()&lt;/code&gt;, which accepts a relative path from &lt;code&gt;Rails.root&lt;/code&gt; and creates all the directories/files needed:</source>
          <target state="translated">&lt;code&gt;Rails.root&lt;/code&gt; からの相対パスを受け入れ、必要なすべてのディレクトリ/ファイルを作成する &lt;code&gt;file()&lt;/code&gt; もあります。</target>
        </trans-unit>
        <trans-unit id="526236750959866fd6d21299cd81cfa275a4ebb3" translate="yes" xml:space="preserve">
          <source>There is no &lt;code&gt;REQUEST_METHOD&lt;/code&gt; key in &lt;code&gt;ENV&lt;/code&gt; so we can skip over that line. The next line merges in the options from &lt;code&gt;opt_parser&lt;/code&gt; which is defined plainly in &lt;code&gt;Rack::Server&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;ENV&lt;/code&gt; には &lt;code&gt;REQUEST_METHOD&lt;/code&gt; キーがないため、その行をスキップできます。次の行は、 &lt;code&gt;Rack::Server&lt;/code&gt; で明確に定義されている &lt;code&gt;opt_parser&lt;/code&gt; のオプションをマージします。</target>
        </trans-unit>
        <trans-unit id="8b7d5af49bb173bcd50ffed470c8cdee09278858" translate="yes" xml:space="preserve">
          <source>There is no column defined on the model side, Active Storage takes care of the mapping between your records and the attachment.</source>
          <target state="translated">モデル側にはカラムは定義されていませんが、Active Storageはレコードと添付ファイルの間のマッピングを行います。</target>
        </trans-unit>
        <trans-unit id="cba47c07cb70d2daf3ef3a3b05a98b0a5282be14" translate="yes" xml:space="preserve">
          <source>There is no guarantee that your initializers will run after all the gem initializers, so any initialization code that depends on a given gem having been initialized should go into a &lt;code&gt;config.after_initialize&lt;/code&gt; block.</source>
          <target state="translated">初期化子がすべてのgem初期化子の後に実行される保証はありません。そのため、初期化されている特定のgemに依存する初期化コードは、 &lt;code&gt;config.after_initialize&lt;/code&gt; ブロックに入れる必要があります。</target>
        </trans-unit>
        <trans-unit id="ef0adca7b88832fc28f9c2a670b8181336aa1ddf" translate="yes" xml:space="preserve">
          <source>There is no layout</source>
          <target state="translated">レイアウトがない</target>
        </trans-unit>
        <trans-unit id="49b7d428a530de11bb29fde97ba972b14cdbe051" translate="yes" xml:space="preserve">
          <source>There is seldom any good reason to use this option. Mixing ERB into your controllers defeats the MVC orientation of Rails and will make it harder for other developers to follow the logic of your project. Use a separate erb view instead.</source>
          <target state="translated">このオプションを使う正当な理由はほとんどありません。ERBをコントローラに混ぜると、RailsのMVCの方向性に反し、他の開発者がプロジェクトのロジックを追うのが難しくなります。代わりに別のerbビューを使いましょう。</target>
        </trans-unit>
        <trans-unit id="a323058df0fdb155b4f09f3ff902648b543800ce" translate="yes" xml:space="preserve">
          <source>There isn't much to this file - but note that the &lt;code&gt;Article&lt;/code&gt; class inherits from &lt;code&gt;ApplicationRecord&lt;/code&gt;. &lt;code&gt;ApplicationRecord&lt;/code&gt; inherits from &lt;code&gt;ActiveRecord::Base&lt;/code&gt; which supplies a great deal of functionality to your Rails models for free, including basic database CRUD (Create, Read, Update, Destroy) operations, data validation, as well as sophisticated search support and the ability to relate multiple models to one another.</source>
          <target state="translated">このファイルにはそれほど多くはありませんが、 &lt;code&gt;Article&lt;/code&gt; クラスは &lt;code&gt;ApplicationRecord&lt;/code&gt; を継承していることに注意してください。 &lt;code&gt;ApplicationRecord&lt;/code&gt; は &lt;code&gt;ActiveRecord::Base&lt;/code&gt; を継承しており、基本的なデータベースCRUD（作成、読み取り、更新、破棄）操作、データ検証、高度な検索サポート、関連する機能など、Railsモデルに多くの機能を無料で提供します互いに複数のモデル。</target>
        </trans-unit>
        <trans-unit id="3627b01fb89111a0e68325183b3f10f21815a6a3" translate="yes" xml:space="preserve">
          <source>There may be cases in which you want to skip the template rendering step and supply the email body as a string. You can achieve this using the &lt;code&gt;:body&lt;/code&gt; option. In such cases don't forget to add the &lt;code&gt;:content_type&lt;/code&gt; option. Rails will default to &lt;code&gt;text/plain&lt;/code&gt; otherwise.</source>
          <target state="translated">テンプレートのレンダリング手順をスキップして、メールの本文を文字列として提供する場合があります。 &lt;code&gt;:body&lt;/code&gt; オプションを使用してこれを実現できます。そのような場合は、 &lt;code&gt;:content_type&lt;/code&gt; オプションを追加することを忘れないでください。Railsはデフォルトで &lt;code&gt;text/plain&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="5fd482966b8098cb54a96c3ee1b27d407a241e13" translate="yes" xml:space="preserve">
          <source>There may be times when you wish to customize the query used by &lt;code&gt;belongs_to&lt;/code&gt;. Such customizations can be achieved via a scope block. For example:</source>
          <target state="translated">&lt;code&gt;belongs_to&lt;/code&gt; が使用するクエリをカスタマイズしたい場合があるかもしれません。このようなカスタマイズは、スコープブロックを介して実現できます。例えば：</target>
        </trans-unit>
        <trans-unit id="e894b9ea589be57b0a4706d1e9268dba3d1d0ae3" translate="yes" xml:space="preserve">
          <source>There may be times when you wish to customize the query used by &lt;code&gt;has_and_belongs_to_many&lt;/code&gt;. Such customizations can be achieved via a scope block. For example:</source>
          <target state="translated">&lt;code&gt;has_and_belongs_to_many&lt;/code&gt; で使用されるクエリをカスタマイズしたい場合があります。このようなカスタマイズは、スコープブロックを介して実現できます。例えば：</target>
        </trans-unit>
        <trans-unit id="14c63d13c9a5a248481d25c20cdbed41cee4c423" translate="yes" xml:space="preserve">
          <source>There may be times when you wish to customize the query used by &lt;code&gt;has_many&lt;/code&gt;. Such customizations can be achieved via a scope block. For example:</source>
          <target state="translated">&lt;code&gt;has_many&lt;/code&gt; で使用されるクエリをカスタマイズしたい場合があります。このようなカスタマイズは、スコープブロックを介して実現できます。例えば：</target>
        </trans-unit>
        <trans-unit id="b14296c62128b6cd10dd4219454aa8eb4e5cfcba" translate="yes" xml:space="preserve">
          <source>There may be times when you wish to customize the query used by &lt;code&gt;has_one&lt;/code&gt;. Such customizations can be achieved via a scope block. For example:</source>
          <target state="translated">&lt;code&gt;has_one&lt;/code&gt; で使用されるクエリをカスタマイズしたい場合があります。このようなカスタマイズは、スコープブロックを介して実現できます。例えば：</target>
        </trans-unit>
        <trans-unit id="f73e720d5cc27c8ed51c7e9ffa25fc710d41ff78" translate="yes" xml:space="preserve">
          <source>There's a new choice for sanitizing HTML fragments in your applications. The venerable html-scanner approach is now officially being deprecated in favor of &lt;a href=&quot;https://github.com/rails/rails-html-sanitizer&quot;&gt;&lt;code&gt;Rails HTML Sanitizer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">アプリケーションのHTMLフラグメントをサニタイズするための新しい選択肢があります。由緒あるhtml-scannerアプローチは、&lt;a href=&quot;https://github.com/rails/rails-html-sanitizer&quot;&gt; &lt;code&gt;Rails HTML Sanitizer&lt;/code&gt; を&lt;/a&gt;支持して正式に非推奨になりました。</target>
        </trans-unit>
        <trans-unit id="5767f43f9637442ecb64ed17723019181118e42b" translate="yes" xml:space="preserve">
          <source>There's a restriction, however, while hashes can be nested arbitrarily, only one level of &quot;arrayness&quot; is allowed. Arrays can usually be replaced by hashes; for example, instead of having an array of model objects, one can have a hash of model objects keyed by their id, an array index, or some other parameter.</source>
          <target state="translated">しかし、ハッシュは任意に入れ子にすることができますが、1つのレベルの &quot;配列性 &quot;しか認められていません。通常、配列はハッシュで置き換えることができます。例えば、モデルオブジェクトの配列の代わりに、モデルオブジェクトのid、配列のインデックス、または他のパラメータでキーを設定したモデルオブジェクトのハッシュを持つことができます。</target>
        </trans-unit>
        <trans-unit id="65bd3549183be5ddeee5d0d504340866d990b4ae" translate="yes" xml:space="preserve">
          <source>There's a series of callbacks associated with &lt;a href=&quot;persistence#method-i-destroy&quot;&gt;destroy&lt;/a&gt;. If the &lt;code&gt;before_destroy&lt;/code&gt; callback throws &lt;code&gt;:abort&lt;/code&gt; the action is cancelled and &lt;a href=&quot;persistence#method-i-destroy&quot;&gt;destroy&lt;/a&gt; returns &lt;code&gt;false&lt;/code&gt;. See &lt;a href=&quot;callbacks&quot;&gt;ActiveRecord::Callbacks&lt;/a&gt; for further details.</source>
          <target state="translated">&lt;a href=&quot;persistence#method-i-destroy&quot;&gt;destroyに&lt;/a&gt;関連する一連のコールバックがあります。 &lt;code&gt;before_destroy&lt;/code&gt; コールバックが &lt;code&gt;:abort&lt;/code&gt; をスローした場合、アクションはキャンセルされ、&lt;a href=&quot;persistence#method-i-destroy&quot;&gt;destroy&lt;/a&gt;は &lt;code&gt;false&lt;/code&gt; を返します。詳細については、&lt;a href=&quot;callbacks&quot;&gt;ActiveRecord :: Callbacks&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="50ae13a01265b151942c701c8650a5ef0ed4cd6c" translate="yes" xml:space="preserve">
          <source>There's a series of callbacks associated with &lt;a href=&quot;persistence#method-i-destroy-21&quot;&gt;destroy!&lt;/a&gt;. If the &lt;code&gt;before_destroy&lt;/code&gt; callback throws &lt;code&gt;:abort&lt;/code&gt; the action is cancelled and &lt;a href=&quot;persistence#method-i-destroy-21&quot;&gt;destroy!&lt;/a&gt; raises &lt;a href=&quot;recordnotdestroyed&quot;&gt;ActiveRecord::RecordNotDestroyed&lt;/a&gt;. See &lt;a href=&quot;callbacks&quot;&gt;ActiveRecord::Callbacks&lt;/a&gt; for further details.</source>
          <target state="translated">&lt;a href=&quot;persistence#method-i-destroy-21&quot;&gt;destroyに&lt;/a&gt;関連する一連のコールバックがあります！。 &lt;code&gt;before_destroy&lt;/code&gt; コールバックが &lt;code&gt;:abort&lt;/code&gt; をスローした場合、アクションはキャンセルされて&lt;a href=&quot;persistence#method-i-destroy-21&quot;&gt;破棄されます！&lt;/a&gt;上げる&lt;a href=&quot;recordnotdestroyed&quot;&gt;のActiveRecordは:: RecordNotDestroyed&lt;/a&gt;。詳細については、&lt;a href=&quot;callbacks&quot;&gt;ActiveRecord :: Callbacks&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="baadf5ef0cf8e709a055e8a610480db8bd62c0b4" translate="yes" xml:space="preserve">
          <source>There's a series of callbacks associated with &lt;a href=&quot;persistence#method-i-save&quot;&gt;save&lt;/a&gt;. If any of the &lt;code&gt;before_*&lt;/code&gt; callbacks throws &lt;code&gt;:abort&lt;/code&gt; the action is cancelled and &lt;a href=&quot;persistence#method-i-save&quot;&gt;save&lt;/a&gt; returns &lt;code&gt;false&lt;/code&gt;. See &lt;a href=&quot;callbacks&quot;&gt;ActiveRecord::Callbacks&lt;/a&gt; for further details.</source>
          <target state="translated">&lt;a href=&quot;persistence#method-i-save&quot;&gt;saveに&lt;/a&gt;関連する一連のコールバックがあります。 &lt;code&gt;before_*&lt;/code&gt; コールバックのいずれかが &lt;code&gt;:abort&lt;/code&gt; をスローした場合、アクションはキャンセルされ、&lt;a href=&quot;persistence#method-i-save&quot;&gt;save&lt;/a&gt;は &lt;code&gt;false&lt;/code&gt; を返します。詳細については、&lt;a href=&quot;callbacks&quot;&gt;ActiveRecord :: Callbacks&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5c63fc7d9076faa508e121bb7939dcfea3faf94b" translate="yes" xml:space="preserve">
          <source>There's a series of callbacks associated with &lt;a href=&quot;persistence#method-i-save-21&quot;&gt;save!&lt;/a&gt;. If any of the &lt;code&gt;before_*&lt;/code&gt; callbacks throws &lt;code&gt;:abort&lt;/code&gt; the action is cancelled and &lt;a href=&quot;persistence#method-i-save-21&quot;&gt;save!&lt;/a&gt; raises &lt;a href=&quot;recordnotsaved&quot;&gt;ActiveRecord::RecordNotSaved&lt;/a&gt;. See &lt;a href=&quot;callbacks&quot;&gt;ActiveRecord::Callbacks&lt;/a&gt; for further details.</source>
          <target state="translated">&lt;a href=&quot;persistence#method-i-save-21&quot;&gt;保存に&lt;/a&gt;関連する一連のコールバックがあります！。 &lt;code&gt;before_*&lt;/code&gt; コールバックのいずれかが &lt;code&gt;:abort&lt;/code&gt; をスローした場合、アクションはキャンセルされて&lt;a href=&quot;persistence#method-i-save-21&quot;&gt;保存&lt;/a&gt;されます！上げる&lt;a href=&quot;recordnotsaved&quot;&gt;のActiveRecord :: RecordNotSavedが&lt;/a&gt;。詳細については、&lt;a href=&quot;callbacks&quot;&gt;ActiveRecord :: Callbacks&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f690b74b98e9c8e3bcb30878b11de3914cd94c90" translate="yes" xml:space="preserve">
          <source>There's a short-hand method for each of the type values declared at the top. And then there's &lt;a href=&quot;tabledefinition#method-i-timestamps&quot;&gt;#timestamps&lt;/a&gt; that'll add &lt;code&gt;created_at&lt;/code&gt; and &lt;code&gt;updated_at&lt;/code&gt; as datetimes.</source>
          <target state="translated">上部に宣言されている型の値ごとに簡略化されたメソッドがあります。そしてあります&lt;a href=&quot;tabledefinition#method-i-timestamps&quot;&gt;#timestamps&lt;/a&gt;追加します &lt;code&gt;created_at&lt;/code&gt; と &lt;code&gt;updated_at&lt;/code&gt; のが日付時刻としては。</target>
        </trans-unit>
        <trans-unit id="a2a47f4d301a329df06372bf9a2362a740e3cf4a" translate="yes" xml:space="preserve">
          <source>There's also &lt;code&gt;insert_after&lt;/code&gt; which will insert a middleware after another:</source>
          <target state="translated">ミドルウェアを次々と挿入する &lt;code&gt;insert_after&lt;/code&gt; もあります。</target>
        </trans-unit>
        <trans-unit id="3377ee426223ead51640693037410f1557a63826" translate="yes" xml:space="preserve">
          <source>There's also a convenience method for rendering sub templates within the current controller that depends on a single object (we call this kind of sub templates for partials). It relies on the fact that partials should follow the naming convention of being prefixed with an underscore &amp;ndash; as to separate them from regular templates that could be rendered on their own.</source>
          <target state="translated">単一のオブジェクトに依存する現在のコントローラー内でサブテンプレートをレンダリングするための便利なメソッドもあります（パーシャルの場合、この種のサブテンプレートを呼び出します）。パーシャルは、アンダースコアを前に付けるという命名規則に従う必要があるという事実に依存します-パーシャルは、独自にレンダリングできる通常のテンプレートから分離するためです。</target>
        </trans-unit>
        <trans-unit id="ed91282508faeedc754bde528d1a7850b7199aa8" translate="yes" xml:space="preserve">
          <source>There's also a related idiom that uses the splat operator:</source>
          <target state="translated">スプラット演算子を使う関連熟語もあります。</target>
        </trans-unit>
        <trans-unit id="f956bef09f19451c8e40e6ec46cf01c8bab90c32" translate="yes" xml:space="preserve">
          <source>There's also the bang variant &lt;code&gt;except!&lt;/code&gt; that removes keys in the very receiver.</source>
          <target state="translated">&lt;code&gt;except!&lt;/code&gt; も強打の変形があります！まさにレシーバーのキーを削除します。</target>
        </trans-unit>
        <trans-unit id="9b923af91ebe1d074a60fa80ac21ebe6ee3104e6" translate="yes" xml:space="preserve">
          <source>There's also the bang variant &lt;code&gt;stringify_keys!&lt;/code&gt; that stringifies keys in the very receiver.</source>
          <target state="translated">強打バリアント &lt;code&gt;stringify_keys!&lt;/code&gt; もあります！それはまさにレシーバーのキーを文字列化します。</target>
        </trans-unit>
        <trans-unit id="78a19505c4007a8bcf226c393c50df09e247200d" translate="yes" xml:space="preserve">
          <source>There's also the bang variant &lt;code&gt;symbolize_keys!&lt;/code&gt; that symbolizes keys in the very receiver.</source>
          <target state="translated">強打バリアントのsymbolize_keysもあり &lt;code&gt;symbolize_keys!&lt;/code&gt; それはまさにレシーバーのキーを象徴しています。</target>
        </trans-unit>
        <trans-unit id="96e7550fe8a372858fac794d0441c24d32d3a161" translate="yes" xml:space="preserve">
          <source>There's also the destructive version &lt;code&gt;String#remove!&lt;/code&gt;.</source>
          <target state="translated">破壊的なバージョンの &lt;code&gt;String#remove!&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="80e73f2a82d31657db00c5c72ef73a2eeb3df615" translate="yes" xml:space="preserve">
          <source>There's also the destructive version &lt;code&gt;String#squish!&lt;/code&gt;.</source>
          <target state="translated">破壊的なバージョンの &lt;code&gt;String#squish!&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0a2b00febe434917117c1b1394b701114ec80450" translate="yes" xml:space="preserve">
          <source>There's no need to use &lt;code&gt;includes&lt;/code&gt; for immediate associations - that is, if you have &lt;code&gt;Book belongs_to :author&lt;/code&gt;, then the author is eager-loaded automatically when it's needed.</source>
          <target state="translated">即時の関連付けに &lt;code&gt;includes&lt;/code&gt; を使用する必要はありません。つまり、 &lt;code&gt;Book belongs_to :author&lt;/code&gt; を使用している場合、著者は必要なときに自動的にイーガーロードされます。</target>
        </trans-unit>
        <trans-unit id="5af5f8d372afc8fdbbf3a48b40c337522f940077" translate="yes" xml:space="preserve">
          <source>There's one problem with this form though. If you inspect the HTML that is generated, by viewing the source of the page, you will see that the &lt;code&gt;action&lt;/code&gt; attribute for the form is pointing at &lt;code&gt;/articles/new&lt;/code&gt;. This is a problem because this route goes to the very page that you're on right at the moment, and that route should only be used to display the form for a new article.</source>
          <target state="translated">ただし、このフォームには1つの問題があります。生成されたHTMLを調べると、ページのソースを表示すると、フォームの &lt;code&gt;action&lt;/code&gt; 属性が &lt;code&gt;/articles/new&lt;/code&gt; を指していることがわかります。これは問題です。このルートは現在表示しているページそのものに移動するため、そのルートは新しい記事のフォームを表示するためにのみ使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="f63be22a8bb00d7b7c8ecae170f05392b6a869cc" translate="yes" xml:space="preserve">
          <source>Therefore the file should be called &lt;code&gt;articles/new.html.erb&lt;/code&gt; and needs to be located inside the &lt;code&gt;app/views&lt;/code&gt; directory of the application.</source>
          <target state="translated">したがって、ファイルの名前は &lt;code&gt;articles/new.html.erb&lt;/code&gt; であり、 &lt;code&gt;app/views&lt;/code&gt; ディレクトリ内に配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="54d043af6ac60b7ff4247d868d9da4667b5e26aa" translate="yes" xml:space="preserve">
          <source>Therefore, engines and applications can be thought of as almost the same thing, just with subtle differences, as you'll see throughout this guide. Engines and applications also share a common structure.</source>
          <target state="translated">したがって、エンジンとアプリケーションはほとんど同じものと考えることができますが、このガイドで説明するように、微妙な違いがあります。また、エンジンとアプリケーションには共通の構造があります。</target>
        </trans-unit>
        <trans-unit id="5822ddf0577b14c01efca59a6c127cdb9bf85dbb" translate="yes" xml:space="preserve">
          <source>Therefore, if you store a reloadable class or module object in a place that is not reloaded, that value is going to become stale.</source>
          <target state="translated">そのため、リロード可能なクラスやモジュールオブジェクトをリロードしない場所に保存してしまうと、その値が陳腐化してしまいます。</target>
        </trans-unit>
        <trans-unit id="c5dddde3c19b813eb2e97296982859fc7b193006" translate="yes" xml:space="preserve">
          <source>Therefore, once a value is added to the enum array, its position in the array must be maintained, and new values should only be added to the end of the array. To remove unused values, the explicit hash syntax should be used.</source>
          <target state="translated">したがって、いったん値が列挙配列に追加されると、その配列内での位置は維持されなければならず、新しい値は配列の最後にのみ追加されなければなりません。未使用の値を削除するには、明示的なハッシュ構文を使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="3312419e3b3bf265104b5325bbf7a861dc887f43" translate="yes" xml:space="preserve">
          <source>Therefore, when you are unsure if &lt;code&gt;ActiveSupport.escape_html_entities_in_json&lt;/code&gt; is enabled, or if you are unsure where your JSON string originated from, it is recommended that you always apply this helper (other libraries, such as the JSON gem, do not provide this kind of protection by default; also some gems might override &lt;code&gt;to_json&lt;/code&gt; to bypass Active Support's encoder).</source>
          <target state="translated">したがって、 &lt;code&gt;ActiveSupport.escape_html_entities_in_json&lt;/code&gt; が有効になっているかどうかわからない場合、またはJSON文字列の発生元がわからない場合は、常にこのヘルパーを適用することをお勧めします（JSON gemなどの他のライブラリでは、この種類のデフォルトでは保護。一部の &lt;code&gt;to_json&lt;/code&gt; 、アクティブサポートのエンコーダーをバイパスするためにto_jsonをオーバーライドする場合があります。</target>
        </trans-unit>
        <trans-unit id="f9114f128c27108517bc58f97f6e8ec15e5ba8b6" translate="yes" xml:space="preserve">
          <source>These are &lt;b&gt;Edge Guides&lt;/b&gt;, based on &lt;a href=&quot;https://github.com/rails/rails/tree/&quot;&gt;master@&lt;/a&gt;.</source>
          <target state="translated">これらは&lt;a href=&quot;https://github.com/rails/rails/tree/&quot;&gt;master @&lt;/a&gt;に基づく&lt;b&gt;エッジガイド&lt;/b&gt;です。</target>
        </trans-unit>
        <trans-unit id="8d0a8c4498c7c7a4fddeddb5aafbf861cf8f7c76" translate="yes" xml:space="preserve">
          <source>These are common validation options:</source>
          <target state="translated">これらは一般的な検証オプションです。</target>
        </trans-unit>
        <trans-unit id="54d23c4c7a3abf2356c0e98d63f6de16ee7c5ac8" translate="yes" xml:space="preserve">
          <source>These are the available configuration hooks. They do not hook into any particular framework, but instead they run in context of the entire application.</source>
          <target state="translated">これらは利用可能な設定フックです。これらは特定のフレームワークにフックするのではなく、アプリケーション全体のコンテキストで実行されます。</target>
        </trans-unit>
        <trans-unit id="e699f3e2047c7aa9cab430d169beedbfa3d580c9" translate="yes" xml:space="preserve">
          <source>These are the hooks you can use in your own code.</source>
          <target state="translated">これらは自分のコードで使えるフックです。</target>
        </trans-unit>
        <trans-unit id="2b22f389b62a84b1caafbc3f014bd1e450b4b1e8" translate="yes" xml:space="preserve">
          <source>These are used to generate the dynamic forms that implement non-remote links with &lt;code&gt;:method&lt;/code&gt;.</source>
          <target state="translated">これらは、 &lt;code&gt;:method&lt;/code&gt; を使用して非リモートリンクを実装する動的フォームを生成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="7e7204643d8f17655f6051508b7b0bfbab88e895" translate="yes" xml:space="preserve">
          <source>These callbacks are called only when the associated objects are added or removed through the association collection:</source>
          <target state="translated">これらのコールバックは、関連付けられたオブジェクトがアソシエーション・コレクションを通じて追加または削除された場合にのみ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="7d19b4d81fee5eb3fdb0377e60fd1069b834510c" translate="yes" xml:space="preserve">
          <source>These callbacks are useful for interacting with other systems since you will be guaranteed that the callback is only executed when the database is in a permanent state. For example, &lt;a href=&quot;classmethods#method-i-after_commit&quot;&gt;after_commit&lt;/a&gt; is a good spot to put in a hook to clearing a cache since clearing it from within a transaction could trigger the cache to be regenerated before the database is updated.</source>
          <target state="translated">これらのコールバックは、データベースが永続的な状態にある場合にのみ実行されることが保証されるため、他のシステムとの対話に役立ちます。たとえば、データベースを更新する前に、トランザクション内からキャッシュをクリアすると、キャッシュが再生成される可能性があるため、キャッシュをクリアするためのフックを配置するには、&lt;a href=&quot;classmethods#method-i-after_commit&quot;&gt;after_commit&lt;/a&gt;が適しています。</target>
        </trans-unit>
        <trans-unit id="7bec3791f2ea67b636c1245ac77342e845d4486e" translate="yes" xml:space="preserve">
          <source>These can now be accessed in &lt;code&gt;shared/header&lt;/code&gt; with:</source>
          <target state="translated">これらは &lt;code&gt;shared/header&lt;/code&gt; で次のようにアクセスできます：</target>
        </trans-unit>
        <trans-unit id="65d00b8450f73eefece21c008242b16d0b94eecc" translate="yes" xml:space="preserve">
          <source>These changes will ensure that all articles have a title that is at least five characters long. Rails can validate a variety of conditions in a model, including the presence or uniqueness of columns, their format, and the existence of associated objects. Validations are covered in detail in &lt;a href=&quot;active_record_validations&quot;&gt;Active Record Validations&lt;/a&gt;.</source>
          <target state="translated">これらの変更により、すべての記事のタイトルが5文字以上になるようになります。Railsは、列の存在や一意性、その形式、関連オブジェクトの存在など、モデルのさまざまな条件を検証できます。検証については、「&lt;a href=&quot;active_record_validations&quot;&gt;アクティブレコードの検証」&lt;/a&gt;で詳しく説明しています。</target>
        </trans-unit>
        <trans-unit id="9638b284981feee6487024ad55aba177e0b954c6" translate="yes" xml:space="preserve">
          <source>These chapters will show examples using both the &lt;code&gt;I18n.translate&lt;/code&gt; method as well as the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/TranslationHelper.html#method-i-translate&quot;&gt;&lt;code&gt;translate&lt;/code&gt; view helper method&lt;/a&gt; (noting the additional feature provide by the view helper method).</source>
          <target state="translated">これらの章では、 &lt;code&gt;I18n.translate&lt;/code&gt; メソッドと&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/TranslationHelper.html#method-i-translate&quot;&gt; &lt;code&gt;translate&lt;/code&gt; ビューヘルパーメソッドの&lt;/a&gt;両方を使用した例を示します（ビューヘルパーメソッドによって提供される追加機能に注意してください）。</target>
        </trans-unit>
        <trans-unit id="ac5f2e69f53fc1b4376f36022172c7e5b9a8b05a" translate="yes" xml:space="preserve">
          <source>These collections can be used just like any other hash:</source>
          <target state="translated">これらのコレクションは他のハッシュと同じように使用することができます。</target>
        </trans-unit>
        <trans-unit id="1602e901a67721c3d064a74b0786e59fd0237c54" translate="yes" xml:space="preserve">
          <source>These concerns are used in &lt;a href=&quot;resources&quot;&gt;Resources&lt;/a&gt; routing:</source>
          <target state="translated">これらの懸念事項は、&lt;a href=&quot;resources&quot;&gt;リソースの&lt;/a&gt;ルーティングで使用されます。</target>
        </trans-unit>
        <trans-unit id="fe8d18b1a1af418d46f0c1762852e86222a737d6" translate="yes" xml:space="preserve">
          <source>These concerns can be used in resources to avoid code duplication and share behavior across routes:</source>
          <target state="translated">これらの懸念事項をリソースで使用することで、コードの重複を回避し、ルート間で動作を共有することができます。</target>
        </trans-unit>
        <trans-unit id="fdc87cb375b3fa6f8adc4f36b5d7f6836c61fcfa" translate="yes" xml:space="preserve">
          <source>These configuration methods are to be called on a &lt;code&gt;Rails::Railtie&lt;/code&gt; object, such as a subclass of &lt;code&gt;Rails::Engine&lt;/code&gt; or &lt;code&gt;Rails::Application&lt;/code&gt;.</source>
          <target state="translated">これらの設定メソッドは、 &lt;code&gt;Rails::Engine&lt;/code&gt; や &lt;code&gt;Rails::Application&lt;/code&gt; サブクラスなどの &lt;code&gt;Rails::Railtie&lt;/code&gt; オブジェクトで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="aee4c86ddbc20a70ac6de991da1abde7b7779a1c" translate="yes" xml:space="preserve">
          <source>These configuration points are then available through the configuration object:</source>
          <target state="translated">そして、これらの設定ポイントは、設定オブジェクトを介して利用可能になります。</target>
        </trans-unit>
        <trans-unit id="16b07cb0b4389928fefa2bf726c42774804b3256" translate="yes" xml:space="preserve">
          <source>These equivalent methods may not execute the same SQL as the previous implementation.</source>
          <target state="translated">これらの同等のメソッドは、前の実装と同じSQLを実行しない場合があります。</target>
        </trans-unit>
        <trans-unit id="8d5cbf40b6dbca1d049666b1de9ee4817b21e15f" translate="yes" xml:space="preserve">
          <source>These examples don't do any harm so far, so let's see how an attacker can steal the user's cookie (and thus hijack the user's session). In JavaScript you can use the document.cookie property to read and write the document's cookie. JavaScript enforces the same origin policy, that means a script from one domain cannot access cookies of another domain. The document.cookie property holds the cookie of the originating web server. However, you can read and write this property, if you embed the code directly in the HTML document (as it happens with XSS). Inject this anywhere in your web application to see your own cookie on the result page:</source>
          <target state="translated">これらの例は今のところ何の害もありませんので、攻撃者がどのようにしてユーザのクッキーを盗むことができるかを見てみましょう (そして、ユーザのセッションを乗っ取ることができます)。JavaScriptでは、ドキュメントのクッキーを読み書きするためにdocument.cookieプロパティを使うことができます。JavaScriptは同じオリジンポリシーを適用します。つまり、あるドメインのスクリプトが別のドメインのクッキーにアクセスできないということです。document.cookie プロパティは、送信元のウェブサーバーのクッキーを保持します。しかし、HTML ドキュメントに直接コードを埋め込んだ場合、このプロパティを読み書きすることができます (XSS で起こるように)。これをウェブアプリケーションの任意の場所に注入すると、結果ページに自分のクッキーが表示されるようになります。</target>
        </trans-unit>
        <trans-unit id="a27090b4fedb948475d7cbd62876466ae6c995c2" translate="yes" xml:space="preserve">
          <source>These files allow you to specify what gem dependencies are needed for your Rails application. These files are used by the Bundler gem. For more information about Bundler, see the &lt;a href=&quot;https://bundler.io&quot;&gt;Bundler website&lt;/a&gt;.</source>
          <target state="translated">これらのファイルを使用すると、Railsアプリケーションに必要なgem依存関係を指定できます。これらのファイルは、Bundler gemによって使用されます。Bundlerの詳細については、&lt;a href=&quot;https://bundler.io&quot;&gt;BundlerのWebサイトを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d84535d564b577693b8a8d9ebb6012d6bf9a78cf" translate="yes" xml:space="preserve">
          <source>These have the aliases #t and #l so you can use them like this:</source>
          <target state="translated">これらには#tと#lという別名があるので、このように使うことができます。</target>
        </trans-unit>
        <trans-unit id="9a95f00469907efb1bc0b9e8e4f7a2777fe791ca" translate="yes" xml:space="preserve">
          <source>These helpers can then be explicitly required as needed and included as needed</source>
          <target state="translated">これらのヘルパーは、必要に応じて明示的に必要とされ、必要に応じて含めることができます。</target>
        </trans-unit>
        <trans-unit id="237b4a9b33c4126eb8cc426d957fec5a9a20274a" translate="yes" xml:space="preserve">
          <source>These inbound emails are routed asynchronously using Active Job to one or several dedicated mailboxes, which are capable of interacting directly with the rest of your domain model.</source>
          <target state="translated">これらの受信メールは、Active Jobを使用して非同期的に1つまたは複数の専用メールボックスにルーティングされ、ドメインモデルの残りの部分と直接対話することができます。</target>
        </trans-unit>
        <trans-unit id="845f625b6f124c282e78051e4452d00a4e22c614" translate="yes" xml:space="preserve">
          <source>These kind of ambiguities can often be resolved using qualified constants:</source>
          <target state="translated">このような曖昧さは、しばしば修飾定数を使って解決することができます。</target>
        </trans-unit>
        <trans-unit id="46c73379b03b75caeed644f6833cfb0de9d1f6a5" translate="yes" xml:space="preserve">
          <source>These libraries are not provided by Rails. You must install them yourself to use the built-in previewers. Before you install and use third-party software, make sure you understand the licensing implications of doing so.</source>
          <target state="translated">これらのライブラリはRailsが提供しているものではありません。組み込みのプレビュー機能を使用するには、これらのライブラリを自分でインストールする必要があります。サードパーティ製のソフトウェアをインストールして使用する前に、その際のライセンスの意味を理解しておくようにしてください。</target>
        </trans-unit>
        <trans-unit id="57a06ff80b16f646465f2114175927d8bc937ebd" translate="yes" xml:space="preserve">
          <source>These mechanisms all involve multiple threads, each managing work for a unique instance of some object (controller, job, channel), while sharing the global process space (such as classes and their configurations, and global variables). As long as your code doesn't modify any of those shared things, it can mostly ignore that other threads exist.</source>
          <target state="translated">これらのメカニズムはすべて複数のスレッドが関与しており、各スレッドはグローバルなプロセス空間(クラスとその設定、グローバル変数など)を共有しながら、あるオブジェクト(コントローラ、ジョブ、チャンネル)のユニークなインスタンスのための作業を管理しています。あなたのコードがこれらの共有されたものを変更しない限り、他のスレッドの存在をほとんど無視することができます。</target>
        </trans-unit>
        <trans-unit id="1ce44e86a7aa8bf2f44b6cc0b7087229cc42c8c2" translate="yes" xml:space="preserve">
          <source>These methods are not needed or available when using parallel testing with threads.</source>
          <target state="translated">これらのメソッドは、スレッドを使った並列テストを使用する場合には必要ありませんし、利用することもできません。</target>
        </trans-unit>
        <trans-unit id="481a47f429a9e808ff788948aeceb8f3bf837ea6" translate="yes" xml:space="preserve">
          <source>These methods are useful when you want to generate the correct URL or path to a RESTful resource without having to know the exact type of the record in question.</source>
          <target state="translated">これらのメソッドは、問題のレコードの正確なタイプを知ることなく、正しい URL や RESTful リソースへのパスを生成したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="e0ca2ef6c6a653967492a217dec79a0d38a72888" translate="yes" xml:space="preserve">
          <source>These methods let you ask questions from templates and decide the flow based on the user's answer. Let's say you want to Freeze Rails only if the user wants to:</source>
          <target state="translated">これらのメソッドを使えば、テンプレートから質問をして、ユーザーの回答に基づいてフローを決めることができます。ユーザーが望む場合のみRailsをFreezeしたいとしましょう。</target>
        </trans-unit>
        <trans-unit id="2f964cc59da3c6f2e63593f6a75a22d82804b5c4" translate="yes" xml:space="preserve">
          <source>These methods should be used with caution, however, because important business rules and application logic may be kept in callbacks. Bypassing them without understanding the potential implications may lead to invalid data.</source>
          <target state="translated">しかし、重要なビジネスルールやアプリケーションロジックがコールバックに保持されている可能性があるため、これらのメソッドは注意して使用する必要があります。潜在的な意味合いを理解せずにこれらのメソッドをバイパスすると、無効なデータになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="b237698c54c09388618913c8780d824a930950fa" translate="yes" xml:space="preserve">
          <source>These methods should not be used in ordinary views. Unsafe values are automatically escaped:</source>
          <target state="translated">これらのメソッドは、通常のビューでは使用しないでください。安全でない値は自動的にエスケープされます。</target>
        </trans-unit>
        <trans-unit id="cbc4b0f5255bfee845c9839ebd849486ea95cdda" translate="yes" xml:space="preserve">
          <source>These methods use Time#advance for precise date calculations when using from_now, ago, etc. as well as adding or subtracting their results from a Time object. For example:</source>
          <target state="translated">これらのメソッドは、from_now,agoなどを使用して正確な日付を計算するためにTime#advanceを使用し、Timeオブジェクトから結果を加算または減算します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="0b15cf80ef8c4443538bcf9ba62dadca5ce0849d" translate="yes" xml:space="preserve">
          <source>These methods will be included into any Active Job object, adding callbacks for &lt;code&gt;perform&lt;/code&gt; and &lt;code&gt;enqueue&lt;/code&gt; methods.</source>
          <target state="translated">これらのメソッドは、Active Jobオブジェクトに含まれ、 &lt;code&gt;perform&lt;/code&gt; および &lt;code&gt;enqueue&lt;/code&gt; メソッドのコールバックを追加します。</target>
        </trans-unit>
        <trans-unit id="fac92986ad45b2904b5f7cef4f619d1f996465b9" translate="yes" xml:space="preserve">
          <source>These methods will be included into any Active Job object, adding helpers for de/serialization and creation of job instances.</source>
          <target state="translated">これらのメソッドは任意のActive Jobオブジェクトに含まれ、de/serializationやジョブインスタンスの作成のためのヘルパーを追加します。</target>
        </trans-unit>
        <trans-unit id="1a12ffbb9a20c8082a4a85f578c452b56149f93a" translate="yes" xml:space="preserve">
          <source>These methods will operate with value objects like the ones described below:</source>
          <target state="translated">これらのメソッドは、以下に説明するような値オブジェクトで動作します。</target>
        </trans-unit>
        <trans-unit id="926ca4932f7bdeba121426204a21f401286479a1" translate="yes" xml:space="preserve">
          <source>These named scopes are composable. For instance, &lt;code&gt;Shirt.red.dry_clean_only&lt;/code&gt; will produce all shirts that are both red and dry clean only. Nested finds and calculations also work with these compositions: &lt;code&gt;Shirt.red.dry_clean_only.count&lt;/code&gt; returns the number of garments for which these criteria obtain. Similarly with &lt;code&gt;Shirt.red.dry_clean_only.average(:thread_count)&lt;/code&gt;.</source>
          <target state="translated">これらの名前付きスコープは合成可能です。たとえば、 &lt;code&gt;Shirt.red.dry_clean_only&lt;/code&gt; は、赤とドライクリーンのみのすべてのシャツを生成します。ネストされた検索と計算は、これらのコンポジションでも機能します &lt;code&gt;Shirt.red.dry_clean_only.count&lt;/code&gt; は、これらの基準が取得する衣服の数を返します。同様に &lt;code&gt;Shirt.red.dry_clean_only.average(:thread_count)&lt;/code&gt; でも同様です。</target>
        </trans-unit>
        <trans-unit id="83ddf58ecc721fdb2014a5e1d3240d26e473e31b" translate="yes" xml:space="preserve">
          <source>These need to be backed up by a migration to create the &lt;code&gt;assemblies_parts&lt;/code&gt; table. This table should be created without a primary key:</source>
          <target state="translated">これらは、 &lt;code&gt;assemblies_parts&lt;/code&gt; テーブルを作成するために、マイグレーションによってバックアップする必要があります。このテーブルは主キーなしで作成する必要があります：</target>
        </trans-unit>
        <trans-unit id="5497de896675e671af51ad317bd26ba031713911" translate="yes" xml:space="preserve">
          <source>These options are specified on the class level, like &lt;code&gt;ActionMailer::Base.raise_delivery_errors = true&lt;/code&gt;</source>
          <target state="translated">これらのオプションは、 &lt;code&gt;ActionMailer::Base.raise_delivery_errors = true&lt;/code&gt; ように、クラスレベルで指定されます。</target>
        </trans-unit>
        <trans-unit id="17ae8f2d0c5f3ba8aa2188c1a11eb9756a9d2cab" translate="yes" xml:space="preserve">
          <source>These options mean something to all cache implementations. Individual cache implementations may support additional options.</source>
          <target state="translated">これらのオプションは、すべてのキャッシュ実装にとって意味があります。個々のキャッシュ実装は追加のオプションをサポートしているかもしれません。</target>
        </trans-unit>
        <trans-unit id="31bd624036c840bf986354a0963f7e12268c2133" translate="yes" xml:space="preserve">
          <source>These options will be used as a starting point when generating URLs, so it's possible they'll be overridden by the options passed to &lt;code&gt;url_for&lt;/code&gt; calls.</source>
          <target state="translated">これらのオプションは、URLを生成するときの開始点として使用されるため、 &lt;code&gt;url_for&lt;/code&gt; 呼び出しに渡されるオプションによって上書きされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="2c458987f769e6ae68fb15a55a06b4423b4739cf" translate="yes" xml:space="preserve">
          <source>These releases are created by taking the last released version, applying the security patches, and releasing. Those patches are then applied to the end of the x-y-stable branch. For example, a theoretical 1.2.3 security release would be built from 1.2.2, and then added to the end of 1-2-stable. This means that security releases are easy to upgrade to if you're running the latest version of Rails.</source>
          <target state="translated">これらのリリースは、最後にリリースされたバージョンからセキュリティパッチを適用してリリースすることで作成されます。これらのパッチは x-y-stable ブランチの最後に適用されます。例えば、理論上の 1.2.3 セキュリティリリースは 1.2.2 からビルドされ、1-2-stable ブランチの最後に追加されます。つまり、Railsの最新バージョンを実行していれば、セキュリティリリースは簡単にアップグレードできるということです。</target>
        </trans-unit>
        <trans-unit id="26c06bf53d5f75b145edb6bfded64da635ff8c7b" translate="yes" xml:space="preserve">
          <source>These special cookie jars use a serializer to serialize the assigned values into strings and deserializes them into Ruby objects on read.</source>
          <target state="translated">これらの特別なクッキージャーはシリアライザを使用して、割り当てられた値を文字列にシリアライズし、読み込まれたときにRubyオブジェクトにデシリアライズします。</target>
        </trans-unit>
        <trans-unit id="c69560b003a070a5a3c6cdde28ca2b70e145e8fb" translate="yes" xml:space="preserve">
          <source>These tests do not attempt to determine the semantic correctness of the returned values. For instance, you could implement &lt;code&gt;valid?&lt;/code&gt; to always return &lt;code&gt;true&lt;/code&gt;, and the tests would pass. It is up to you to ensure that the values are semantically meaningful.</source>
          <target state="translated">これらのテストは、戻り値の意味の正確さを判断しようとするものではありません。たとえば、 &lt;code&gt;valid?&lt;/code&gt; 実装できますか？常に &lt;code&gt;true&lt;/code&gt; を返すため、テストに合格します。値が意味的に意味があることを確認するのはあなた次第です。</target>
        </trans-unit>
        <trans-unit id="3b67a82ec0a502c4bdf056f5d91537ea3dd3ed33" translate="yes" xml:space="preserve">
          <source>These two declarations enable a good bit of automatic behavior. For example, if you have an instance variable &lt;code&gt;@article&lt;/code&gt; containing an article, you can retrieve all the comments belonging to that article as an array using &lt;code&gt;@article.comments&lt;/code&gt;.</source>
          <target state="translated">これら2つの宣言により、適切な自動動作が可能になります。たとえば、記事を含むインスタンス変数 &lt;code&gt;@article&lt;/code&gt; がある場合、 &lt;code&gt;@article.comments&lt;/code&gt; を使用して、その記事に属するすべてのコメントを配列として取得できます。</target>
        </trans-unit>
        <trans-unit id="d3f6bc49848016434b208a5921266b6e39810de3" translate="yes" xml:space="preserve">
          <source>These two methods represent the two basic action archetypes used in Action Controllers: Get-and-show and do-and-redirect. Most actions are variations on these themes.</source>
          <target state="translated">これら2つのメソッドは、アクションコントローラで使用される2つの基本的なアクションのアーキタイプを表しています。Get-and-Show と Do-and-Redirect です。ほとんどのアクションはこれらのテーマのバリエーションです。</target>
        </trans-unit>
        <trans-unit id="33e0287c858863f021b51e27e200bfc4f089da64" translate="yes" xml:space="preserve">
          <source>They are analogous. Please refer to their documentation above and take into account the following differences:</source>
          <target state="translated">これらは類似しています。上記の説明書を参照し、以下の違いを考慮に入れてください。</target>
        </trans-unit>
        <trans-unit id="b5bd24a243de54209ede8e600ff44df089372d33" translate="yes" xml:space="preserve">
          <source>They are stored in YAML files, one file per model, which are placed in the directory appointed by &lt;code&gt;ActiveSupport::TestCase.fixture_path=(path)&lt;/code&gt; (this is automatically configured for Rails, so you can just put your files in &lt;code&gt;&amp;lt;your-rails-app&amp;gt;/test/fixtures/&lt;/code&gt;). The fixture file ends with the &lt;code&gt;.yml&lt;/code&gt; file extension, for example: &lt;code&gt;&amp;lt;your-rails-app&amp;gt;/test/fixtures/web_sites.yml&lt;/code&gt;).</source>
          <target state="translated">これらはYAMLファイルに保存され、モデルごとに1つのファイルであり、 &lt;code&gt;ActiveSupport::TestCase.fixture_path=(path)&lt;/code&gt; によって指定されたディレクトリに配置されます（これはRails用に自動的に設定されるため、ファイルを &lt;code&gt;&amp;lt;your-rails-app&amp;gt;/test/fixtures/&lt;/code&gt; ）。フィクスチャファイルは &lt;code&gt;.yml&lt;/code&gt; ファイル拡張子で終わります（例： &lt;code&gt;&amp;lt;your-rails-app&amp;gt;/test/fixtures/web_sites.yml&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="9c5f934785de2e314143e684cb9be170b058e5b5" translate="yes" xml:space="preserve">
          <source>They can also be accessed and overridden at the instance level.</source>
          <target state="translated">また、インスタンスレベルでアクセスしたり、オーバーライドしたりすることもできます。</target>
        </trans-unit>
        <trans-unit id="46d4e908d2c48c059241ac18375d00df6a3318ec" translate="yes" xml:space="preserve">
          <source>They can also be removed from the stack completely:</source>
          <target state="translated">また、スタックから完全に取り出すこともできます。</target>
        </trans-unit>
        <trans-unit id="0107efa51b3ef0fc81c2801ea8b66112e7056323" translate="yes" xml:space="preserve">
          <source>They inherit from &lt;code&gt;ActionMailer::Base&lt;/code&gt; and live in &lt;code&gt;app/mailers&lt;/code&gt;. Mailers also work very similarly to controllers. Some examples of similarities are enumerated below. Mailers have:</source>
          <target state="translated">それらは &lt;code&gt;ActionMailer::Base&lt;/code&gt; から継承し、 &lt;code&gt;app/mailers&lt;/code&gt; にあります。メーラーもコントローラーと非常によく似ています。類似性のいくつかの例を以下に列挙します。メーラーは：</target>
        </trans-unit>
        <trans-unit id="1306c8a02ba468a5dffe07f4002008a307ae8613" translate="yes" xml:space="preserve">
          <source>They maintain the session by accessing the web application periodically in order to keep an expiring session alive.</source>
          <target state="translated">有効期限の切れたセッションを維持するために、定期的にウェブアプリケーションにアクセスしてセッションを維持します。</target>
        </trans-unit>
        <trans-unit id="9f127f7abccb59b14b1bd363498eb471f2243e46" translate="yes" xml:space="preserve">
          <source>They return the corresponding amount of bytes, using a conversion factor of 1024:</source>
          <target state="translated">彼らは1024の変換係数を使用して、対応するバイト数を返します。</target>
        </trans-unit>
        <trans-unit id="acfd88153819fc0ef7992434ccfca9dd06f84e5f" translate="yes" xml:space="preserve">
          <source>They translate to calls to &lt;code&gt;since&lt;/code&gt; or &lt;code&gt;advance&lt;/code&gt;. For example here we get the correct jump in the calendar reform:</source>
          <target state="translated">彼らは &lt;code&gt;since&lt;/code&gt; または &lt;code&gt;advance&lt;/code&gt; するための呼び出しに変換されます。たとえば、ここではカレンダーの改革で正しいジャンプが得られます。</target>
        </trans-unit>
        <trans-unit id="78b0f96d526c61955700c71121d4646083adcf60" translate="yes" xml:space="preserve">
          <source>They work by using the &lt;code&gt;HTTP_IF_NONE_MATCH&lt;/code&gt; and &lt;code&gt;HTTP_IF_MODIFIED_SINCE&lt;/code&gt; headers to pass back and forth both a unique content identifier and the timestamp of when the content was last changed. If the browser makes a request where the content identifier (etag) or last modified since timestamp matches the server's version then the server only needs to send back an empty response with a not modified status.</source>
          <target state="translated">これらは、 &lt;code&gt;HTTP_IF_NONE_MATCH&lt;/code&gt; および &lt;code&gt;HTTP_IF_MODIFIED_SINCE&lt;/code&gt; ヘッダーを使用して機能し、一意のコンテンツ識別子とコンテンツが最後に変更されたときのタイムスタンプの両方をやり取りします。ブラウザがコンテンツ識別子（etag）またはタイムスタンプ以降に最後に変更されたリクエストをサーバーのバージョンと一致させる場合、サーバーは、ステータスが変更されていない空の応答を返すだけで済みます。</target>
        </trans-unit>
        <trans-unit id="7fff975593130a4e01e02e1e1def8304c95b238d" translate="yes" xml:space="preserve">
          <source>Think of &lt;code&gt;destroy&lt;/code&gt; as the opposite of &lt;code&gt;generate&lt;/code&gt;. It'll figure out what generate did, and undo it.</source>
          <target state="translated">&lt;code&gt;destroy&lt;/code&gt; は、 &lt;code&gt;generate&lt;/code&gt; の反対であると考えてください。それはgenerateが何をしたかを理解し、それを元に戻します。</target>
        </trans-unit>
        <trans-unit id="ec50fe9d5ee0df11700556f4de11f2af7968f536" translate="yes" xml:space="preserve">
          <source>Think of a situation where an attacker has stolen a user's session cookie and thus may co-use the application. If it is easy to change the password, the attacker will hijack the account with a few clicks. Or if the change-password form is vulnerable to CSRF, the attacker will be able to change the victim's password by luring them to a web page where there is a crafted IMG-tag which does the CSRF. As a countermeasure, &lt;em&gt;make change-password forms safe against CSRF&lt;/em&gt;, of course. And &lt;em&gt;require the user to enter the old password when changing it&lt;/em&gt;.</source>
          <target state="translated">攻撃者がユーザーのセッションCookieを盗んで、アプリケーションを共同使用する可能性がある状況を考えてみてください。パスワードの変更が簡単な場合、攻撃者は数回クリックするだけでアカウントをハイジャックします。または、パスワード変更フォームがCSRFに対して脆弱である場合、攻撃者は、CSRFを行う細工されたIMGタグがあるWebページに被害者のパスワードを誘導することにより、被害者のパスワードを変更することができます。対策として、もちろん、&lt;em&gt;パスワード変更フォームをCSRFに対して安全にします&lt;/em&gt;。また&lt;em&gt;、パスワードを変更するときに、ユーザーに古いパスワードの入力を要求します&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="090598e3cb6e5557a76d9f498c3f99a8a50509b6" translate="yes" xml:space="preserve">
          <source>Think of creating routes as drawing a map for your requests. The map tells them where to go based on some predefined pattern:</source>
          <target state="translated">ルートを作成することは、リクエストのための地図を描くことと考えてください。マップは、事前に定義されたパターンに基づいてどこに行くかを伝えます。</target>
        </trans-unit>
        <trans-unit id="ac4fc7fa914171aef955ec263c4925c7c3485dd3" translate="yes" xml:space="preserve">
          <source>Think of it as page caching using HTTP semantics.</source>
          <target state="translated">HTTP セマンティクスを使ったページキャッシングと考えてください。</target>
        </trans-unit>
        <trans-unit id="2b2e497eddb3696588ddf377c22c6589397db83e" translate="yes" xml:space="preserve">
          <source>Third configurable block to run. Does not run if &lt;code&gt;config.eager_load&lt;/code&gt; set to false.</source>
          <target state="translated">実行する3番目の構成可能ブロック。 &lt;code&gt;config.eager_load&lt;/code&gt; がfalseに設定されている場合は実行されません。</target>
        </trans-unit>
        <trans-unit id="a9399c03e83a1865fc30c82098c108182758ac25" translate="yes" xml:space="preserve">
          <source>Third, if we DON'T find a template AND the request is a page load in a web browser (technically, a non-XHR GET request for an HTML response) where you reasonably expect to have rendered a template, then we raise &lt;code&gt;ActionView::UnknownFormat&lt;/code&gt; with an explanation.</source>
          <target state="translated">3番目に、テンプレートが見つからず、リクエストがWebブラウザーでのページロード（技術的には、HTML応答に対する非XHR GETリクエスト）である場合、テンプレートをレンダリングしたと合理的に予想される場合は、 &lt;code&gt;ActionView::UnknownFormat&lt;/code&gt; と説明。</target>
        </trans-unit>
        <trans-unit id="4a7362efbdd2c82924a8a0e0cea79ebd45d0e631" translate="yes" xml:space="preserve">
          <source>Third, the translation will be marked as &lt;code&gt;html_safe&lt;/code&gt; if the key has the suffix &amp;ldquo;_html&amp;rdquo; or the last element of the key is &amp;ldquo;html&amp;rdquo;. Calling &lt;code&gt;translate(&quot;footer_html&quot;)&lt;/code&gt; or &lt;code&gt;translate(&quot;footer.html&quot;)&lt;/code&gt; will return an HTML safe string that won't be escaped by other HTML helper methods. This naming convention helps to identify translations that include HTML tags so that you know what kind of output to expect when you call translate in a template and translators know which keys they can provide HTML values for.</source>
          <target state="translated">3番目に、キーのサフィックスが「_html」であるか、キーの最後の要素が「html」である場合、翻訳は &lt;code&gt;html_safe&lt;/code&gt; としてマークされます。呼び出し &lt;code&gt;translate(&quot;footer_html&quot;)&lt;/code&gt; または &lt;code&gt;translate(&quot;footer.html&quot;)&lt;/code&gt; 、他のHTMLヘルパー・メソッドでエスケープされることはありませんHTMLセーフな文字列を返します。この命名規則は、HTMLタグを含む翻訳を識別するのに役立ちます。これにより、テンプレートで変換を呼び出すときにどのような出力が期待されるかを理解し、翻訳者がHTML値を提供できるキーを翻訳者が認識します。</target>
        </trans-unit>
        <trans-unit id="dba11a48cc216373589702626e1fbcb5aef1b0c4" translate="yes" xml:space="preserve">
          <source>This JavaScript code will simply display an alert box. The next examples do exactly the same, only in very uncommon places:</source>
          <target state="translated">この JavaScript コードは単にアラートボックスを表示します。次の例は全く同じことをしていますが、非常に珍しい場所だけです。</target>
        </trans-unit>
        <trans-unit id="fea430f978987786a30da526dae9edb12ef3a537" translate="yes" xml:space="preserve">
          <source>This URL passes the filter because the regular expression matches - the second line, the rest does not matter. Now imagine we had a view that showed the URL like this:</source>
          <target state="translated">このURLは正規表現にマッチするので、フィルタを通過します-2行目、残りの部分は重要ではありません。さて、このような URL を表示するビューがあったとしましょう。</target>
        </trans-unit>
        <trans-unit id="17fc719c23efabfa22dedb5bcf3e95223386150f" translate="yes" xml:space="preserve">
          <source>This action is now displaying the parameters for the article that are coming in from the form. However, this isn't really all that helpful. Yes, you can see the parameters but nothing in particular is being done with them.</source>
          <target state="translated">このアクションは、フォームから入ってくる記事のパラメータを表示するようになりました。しかし、これは本当にすべての役に立つわけではありません。はい、パラメータを見ることはできますが、特に何もしていません。</target>
        </trans-unit>
        <trans-unit id="c8f843fd1bcb3d095f5adbea69e50d48947b7b40" translate="yes" xml:space="preserve">
          <source>This adds a form on the &lt;code&gt;Article&lt;/code&gt; show page that creates a new comment by calling the &lt;code&gt;CommentsController&lt;/code&gt;&lt;code&gt;create&lt;/code&gt; action. The &lt;code&gt;form_with&lt;/code&gt; call here uses an array, which will build a nested route, such as &lt;code&gt;/articles/1/comments&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;Article&lt;/code&gt; 表示ページに、 &lt;code&gt;CommentsController&lt;/code&gt; の &lt;code&gt;create&lt;/code&gt; アクションを呼び出して新しいコメントを作成するフォームが追加されます。ここでの &lt;code&gt;form_with&lt;/code&gt; 呼び出しは、 &lt;code&gt;/articles/1/comments&lt;/code&gt; などのネストされたルートを構築する配列を使用します。</target>
        </trans-unit>
        <trans-unit id="46f00894177e6d8e67ed069223a4ade6fcb2da20" translate="yes" xml:space="preserve">
          <source>This adds a new foreign key to the &lt;code&gt;author_id&lt;/code&gt; column of the &lt;code&gt;articles&lt;/code&gt; table. The key references the &lt;code&gt;id&lt;/code&gt; column of the &lt;code&gt;authors&lt;/code&gt; table. If the column names cannot be derived from the table names, you can use the &lt;code&gt;:column&lt;/code&gt; and &lt;code&gt;:primary_key&lt;/code&gt; options.</source>
          <target state="translated">これにより、 &lt;code&gt;articles&lt;/code&gt; テーブルの &lt;code&gt;author_id&lt;/code&gt; 列に新しい外部キーが追加されます。キーは、 &lt;code&gt;authors&lt;/code&gt; テーブルの &lt;code&gt;id&lt;/code&gt; 列を参照します。列名をテーブル名から導出できない場合は、 &lt;code&gt;:column&lt;/code&gt; オプションと &lt;code&gt;:primary_key&lt;/code&gt; オプションを使用できます。</target>
        </trans-unit>
        <trans-unit id="60a05f3a6cca9f98fb6238843deb477cd9cad796" translate="yes" xml:space="preserve">
          <source>This affects only to constants at the same top-level as in the example above. Inner classes and modules are fine. For example, consider</source>
          <target state="translated">これは上の例と同じトップレベルの定数にのみ影響します。内部のクラスやモジュールは問題ありません。例えば、次のように考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="4e2dcd8c78d123694cdc898d64bdad9a27b9c90e" translate="yes" xml:space="preserve">
          <source>This allows URLs for resources that otherwise would be deeply nested such as a comment on a blog post like &lt;code&gt;/posts/a-long-permalink/comments/1234&lt;/code&gt; to be shortened to just &lt;code&gt;/comments/1234&lt;/code&gt;.</source>
          <target state="translated">これは、そうでない場合は深くのようなブログの記事にコメントのようなネストされたことになるリソースのURLことができます &lt;code&gt;/posts/a-long-permalink/comments/1234&lt;/code&gt; だけに短縮されるように &lt;code&gt;/comments/1234&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1fbbd78d1edbc9056f94a963a99efae21c1fe490" translate="yes" xml:space="preserve">
          <source>This allows any character other than a slash as part of your &lt;code&gt;:id&lt;/code&gt;.</source>
          <target state="translated">これにより、スラッシュ以外の文字を &lt;code&gt;:id&lt;/code&gt; の一部として使用できます。</target>
        </trans-unit>
        <trans-unit id="9ffe7a17bd47c61bf59e095fabdd612a1d05dc51" translate="yes" xml:space="preserve">
          <source>This allows for views to display rather reasonable strings while still giving developers a way to find missing translations.</source>
          <target state="translated">これにより、ビューではかなり合理的な文字列を表示することができますが、不足している翻訳を見つける方法を開発者に提供することができます。</target>
        </trans-unit>
        <trans-unit id="169b5728b55d8f2e89a55edcd6e338ce067c6c35" translate="yes" xml:space="preserve">
          <source>This allows only the given tags and does a good job, even against all kinds of tricks and malformed tags.</source>
          <target state="translated">これは、与えられたタグだけを許可し、あらゆる種類のトリックや不正なタグに対しても良い仕事をします。</target>
        </trans-unit>
        <trans-unit id="0395fb7dca9e85a2a35f66131ae78f9e37ca7284" translate="yes" xml:space="preserve">
          <source>This allows you to modify application's generators from Railties.</source>
          <target state="translated">これにより、Railtiesからアプリケーションのジェネレータを変更することができます。</target>
        </trans-unit>
        <trans-unit id="6d86b60f04d2f4a95e5b1bc4a8837139c80842c7" translate="yes" xml:space="preserve">
          <source>This allows you to modify the application's middlewares from Engines.</source>
          <target state="translated">これにより、Enginesからアプリケーションのミドルウェアを変更することができます。</target>
        </trans-unit>
        <trans-unit id="f8f05bcc23028ab19898b67ea456aea168ee90c4" translate="yes" xml:space="preserve">
          <source>This allows you to treat instances of your models as URLs, and is a key advantage to using the resourceful style.</source>
          <target state="translated">これにより、モデルのインスタンスをURLとして扱うことができ、リソースのあるスタイルを使う上での大きなメリットとなります。</target>
        </trans-unit>
        <trans-unit id="816ce130adac3a79cc4bab4270b57850d3fcf1c7" translate="yes" xml:space="preserve">
          <source>This also ensures that the engine's URL helpers will work as expected in your tests.</source>
          <target state="translated">これにより、エンジンの URL ヘルパーがテストで期待通りに動作するようになります。</target>
        </trans-unit>
        <trans-unit id="1cba66decd634cfa1294c591fbbd74f27e915489" translate="yes" xml:space="preserve">
          <source>This also provides the required class methods for hooking into the Rails internationalization API, including being able to define a class based &lt;code&gt;i18n_scope&lt;/code&gt; and &lt;code&gt;lookup_ancestors&lt;/code&gt; to find translations in parent classes.</source>
          <target state="translated">これは、Rails国際化APIにフックするために必要なクラスメソッドも提供します。これには、クラスベースの &lt;code&gt;i18n_scope&lt;/code&gt; および &lt;code&gt;lookup_ancestors&lt;/code&gt; を定義して、親クラスの翻訳を見つけることができることも含まれます。</target>
        </trans-unit>
        <trans-unit id="8b996e9c22a962811fb1cf6f532b74a9db521c52" translate="yes" xml:space="preserve">
          <source>This also works for links with &lt;code&gt;data-method&lt;/code&gt; attribute.</source>
          <target state="translated">これは、 &lt;code&gt;data-method&lt;/code&gt; 属性を持つリンクにも機能します。</target>
        </trans-unit>
        <trans-unit id="ef6e8eed01678ac90fee45991c411ecd73ddcee2" translate="yes" xml:space="preserve">
          <source>This also works for the methods in &lt;a href=&quot;formoptionshelper&quot;&gt;FormOptionsHelper&lt;/a&gt; and &lt;a href=&quot;datehelper&quot;&gt;DateHelper&lt;/a&gt; that are designed to work with an object as base, like &lt;a href=&quot;formoptionshelper#method-i-collection_select&quot;&gt;ActionView::Helpers::FormOptionsHelper#collection_select&lt;/a&gt; and &lt;a href=&quot;datehelper#method-i-datetime_select&quot;&gt;ActionView::Helpers::DateHelper#datetime_select&lt;/a&gt;.</source>
          <target state="translated">これは、&lt;a href=&quot;formoptionshelper#method-i-collection_select&quot;&gt;ActionView :: Helpers :: FormOptionsHelper＃collection_select&lt;/a&gt;や&lt;a href=&quot;datehelper#method-i-datetime_select&quot;&gt;ActionView :: Helpers :: DateHelper＃datetime_selectの&lt;/a&gt;ように、オブジェクトをベースとして機能するように設計された&lt;a href=&quot;formoptionshelper&quot;&gt;FormOptionsHelper&lt;/a&gt;および&lt;a href=&quot;datehelper&quot;&gt;DateHelperの&lt;/a&gt;メソッドでも機能します。</target>
        </trans-unit>
        <trans-unit id="dad4f457978053eb9daf5acf1e4a9f3fdf265a9b" translate="yes" xml:space="preserve">
          <source>This also works with polymorphic belongs_to relationships:</source>
          <target state="translated">これは、多相の belongs_to 関係でも動作します。</target>
        </trans-unit>
        <trans-unit id="d5f6ba7a4a34e7f2251cff43a9c1e7573db3524b" translate="yes" xml:space="preserve">
          <source>This analyzer relies on the third-party &lt;a href=&quot;https://github.com/minimagick/minimagick&quot;&gt;MiniMagick&lt;/a&gt; gem. MiniMagick requires the &lt;a href=&quot;http://www.imagemagick.org&quot;&gt;ImageMagick&lt;/a&gt; system library.</source>
          <target state="translated">このアナライザーは、サードパーティの&lt;a href=&quot;https://github.com/minimagick/minimagick&quot;&gt;MiniMagick&lt;/a&gt; gemに依存しています。MiniMagickには&lt;a href=&quot;http://www.imagemagick.org&quot;&gt;ImageMagick&lt;/a&gt;システムライブラリが必要です。</target>
        </trans-unit>
        <trans-unit id="52f00403aa88e53e106009e0de6df97f83d752aa" translate="yes" xml:space="preserve">
          <source>This analyzer requires the &lt;a href=&quot;https://www.ffmpeg.org&quot;&gt;FFmpeg&lt;/a&gt; system library, which is not provided by Rails.</source>
          <target state="translated">このアナライザーには、Railsが提供していない&lt;a href=&quot;https://www.ffmpeg.org&quot;&gt;FFmpeg&lt;/a&gt;システムライブラリが必要です。</target>
        </trans-unit>
        <trans-unit id="178263874a3e36da6c37b9c6bab0df507090c51e" translate="yes" xml:space="preserve">
          <source>This application only cares about non-archived &lt;code&gt;Articles&lt;/code&gt;. A view also allows for conditions so we can exclude the archived &lt;code&gt;Articles&lt;/code&gt; directly.</source>
          <target state="translated">このアプリケーションは、アーカイブされていない &lt;code&gt;Articles&lt;/code&gt; のみを対象とします。ビューは条件を考慮に入れるため、アーカイブされた &lt;code&gt;Articles&lt;/code&gt; 直接除外できます。</target>
        </trans-unit>
        <trans-unit id="fbb4195615713af26464d308f931e815c6758a7c" translate="yes" xml:space="preserve">
          <source>This approach has almost the same set of advantages as setting the locale from the domain name: namely that it's RESTful and in accord with the rest of the World Wide Web. It does require a little bit more work to implement, though.</source>
          <target state="translated">このアプローチは、ドメイン名からロケールを設定するのとほぼ同じ利点を持っています:すなわち、RESTfulであり、World Wide Webの残りの部分と一致しています。ただし、実装にはもう少し手間がかかります。</target>
        </trans-unit>
        <trans-unit id="ac518fdc1a794b141c9ee5c764b7d0a65e72abcd" translate="yes" xml:space="preserve">
          <source>This approach is a decent way of keeping common structures isolated from the changing content, but it's verbose and if you ever want to change the structure of these two includes, you'll have to change all the templates.</source>
          <target state="translated">このアプローチは、共通の構造を変化するコンテンツから隔離するまともな方法ですが、冗長なので、この2つのインクルードの構造を変更したい場合は、すべてのテンプレートを変更しなければなりません。</target>
        </trans-unit>
        <trans-unit id="083d804ee4d54d82a0c32a28af65e04359fcff1c" translate="yes" xml:space="preserve">
          <source>This approach was introduced in Rails 3.1 and is still improving. Several Rack middlewares may not work and you need to be careful when streaming. Those points are going to be addressed soon.</source>
          <target state="translated">このアプローチはRails 3.1で導入されたもので、現在も改善されています。いくつかのRackミドルウェアが動作しない場合があり、ストリーミングを行う際には注意が必要です。これらの点については近日中に対処する予定です。</target>
        </trans-unit>
        <trans-unit id="ff40517e4c015abe3750405eacad85528109d988" translate="yes" xml:space="preserve">
          <source>This approach will assume that when a new topic is added, you'll touch the project. The cache key generated from this call will be something like:</source>
          <target state="translated">このアプローチでは、新しいトピックが追加されたときにプロジェクトに触れることを想定しています。この呼び出しから生成されるキャッシュキーは、次のようなものになります。</target>
        </trans-unit>
        <trans-unit id="a5d6787fdf71272bd07c38db318b9189fa542f61" translate="yes" xml:space="preserve">
          <source>This assertion is quite powerful. For more advanced usage, refer to its &lt;a href=&quot;https://github.com/rails/rails-dom-testing/blob/master/lib/rails/dom/testing/assertions/selector_assertions.rb&quot;&gt;documentation&lt;/a&gt;.</source>
          <target state="translated">このアサーションは非常に強力です。より高度な使用法については、その&lt;a href=&quot;https://github.com/rails/rails-dom-testing/blob/master/lib/rails/dom/testing/assertions/selector_assertions.rb&quot;&gt;ドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9cfc7e4fec5acb42ceb71ddc79e859833d3b0876" translate="yes" xml:space="preserve">
          <source>This attack focuses on fixing a user's session ID known to the attacker, and forcing the user's browser into using this ID. It is therefore not necessary for the attacker to steal the session ID afterwards. Here is how this attack works:</source>
          <target state="translated">この攻撃は、攻撃者が知っているユーザーのセッションIDを固定し、ユーザーのブラウザにこのIDを使用させることに主眼を置いています。そのため、攻撃者がその後にセッションIDを盗む必要はありません。以下に、この攻撃の仕組みを説明します。</target>
        </trans-unit>
        <trans-unit id="26eddff046c4367bccf2b4160ad488fd944dacf8" translate="yes" xml:space="preserve">
          <source>This attack method works by including malicious code or a link in a page that accesses a web application that the user is believed to have authenticated. If the session for that web application has not timed out, an attacker may execute unauthorized commands.</source>
          <target state="translated">この攻撃方法は、ユーザーが認証したと思われるWebアプリケーションにアクセスするページに、悪意のあるコードやリンクを含めることで動作します。そのウェブアプリケーションのセッションがタイムアウトしていない場合、攻撃者は不正なコマンドを実行する可能性があります。</target>
        </trans-unit>
        <trans-unit id="7c2ef301b1b88296629007f66b2d09e6d6497919" translate="yes" xml:space="preserve">
          <source>This behaves in almost the same way as outlined previously, with a couple of small exceptions. First, the prefix used to name the input elements within the form (hence the key that denotes them in the &lt;code&gt;params&lt;/code&gt; hash) is actually derived from the object's &lt;em&gt;class&lt;/em&gt;, e.g. &lt;code&gt;params[:post]&lt;/code&gt; if the object's class is &lt;code&gt;Post&lt;/code&gt;. However, this can be overwritten using the &lt;code&gt;:as&lt;/code&gt; option, e.g. -</source>
          <target state="translated">これは、いくつかの小さな例外を除いて、前に概説した方法とほぼ同じように動作します。まず、フォーム内の入力要素に名前を付けるために使用されるプレフィックス（つまり、 &lt;code&gt;params&lt;/code&gt; ハッシュでそれらを示すキー）は、実際にはオブジェクトの&lt;em&gt;クラス&lt;/em&gt;から派生します。たとえば、オブジェクトのクラスが &lt;code&gt;Post&lt;/code&gt; の場合、 &lt;code&gt;params[:post]&lt;/code&gt; です。ただし、これは、 &lt;code&gt;:as&lt;/code&gt; オプションを使用して上書きできます。例：-</target>
        </trans-unit>
        <trans-unit id="67a66d6b894fc0bbba09d5ce93524db577ffd0b9" translate="yes" xml:space="preserve">
          <source>This behavior can also be achieved by setting the &lt;code&gt;:root&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; as in:</source>
          <target state="translated">この動作は、 &lt;code&gt;:root&lt;/code&gt; オプションを &lt;code&gt;true&lt;/code&gt; に設定することでも実現できます。</target>
        </trans-unit>
        <trans-unit id="c08ec7492a186db0a6dc03b4455535acc56cf848" translate="yes" xml:space="preserve">
          <source>This behavior can be turned off by setting &lt;code&gt;ActiveRecord::Base.lock_optimistically = false&lt;/code&gt;.</source>
          <target state="translated">この動作を無効にするには、 &lt;code&gt;ActiveRecord::Base.lock_optimistically = false&lt;/code&gt; 設定します。</target>
        </trans-unit>
        <trans-unit id="3259504ed753df77d38d003df0fcaded9e585a6d" translate="yes" xml:space="preserve">
          <source>This behavior can be turned off by setting &lt;code&gt;ActiveRecord::Base.lock_optimistically = false&lt;/code&gt;. To override the name of the &lt;code&gt;lock_version&lt;/code&gt; column, set the &lt;code&gt;locking_column&lt;/code&gt; class attribute:</source>
          <target state="translated">この動作を無効にするには、 &lt;code&gt;ActiveRecord::Base.lock_optimistically = false&lt;/code&gt; 設定します。 &lt;code&gt;lock_version&lt;/code&gt; 列の名前をオーバーライドするには、 &lt;code&gt;locking_column&lt;/code&gt; クラス属性を設定します。</target>
        </trans-unit>
        <trans-unit id="a52b704c0982fe827b6f05b12131c956b0897af8" translate="yes" xml:space="preserve">
          <source>This behavior was never intentionally supported. Due to a change in the internals of &lt;code&gt;ActiveSupport::Callbacks&lt;/code&gt;, this is no longer allowed in Rails 4.1. Using a &lt;code&gt;return&lt;/code&gt; statement in an inline callback block causes a &lt;code&gt;LocalJumpError&lt;/code&gt; to be raised when the callback is executed.</source>
          <target state="translated">この動作は意図的にサポートされることはありませんでした。 &lt;code&gt;ActiveSupport::Callbacks&lt;/code&gt; 内部の変更により、これはRails 4.1では許可されなくなりました。インラインコールバックブロックで &lt;code&gt;return&lt;/code&gt; ステートメントを使用すると、コールバックの実行時に &lt;code&gt;LocalJumpError&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="4d9554f238af713f51cb9ef0b3e35cb8707f5c32" translate="yes" xml:space="preserve">
          <source>This cache does implement the local cache strategy, so values will actually be cached inside blocks that utilize this strategy. See &lt;a href=&quot;strategy/localcache&quot;&gt;ActiveSupport::Cache::Strategy::LocalCache&lt;/a&gt; for more details.</source>
          <target state="translated">このキャッシュはローカルキャッシュ戦略を実装しているため、値は実際にはこの戦略を利用するブロック内にキャッシュされます。詳細については、&lt;a href=&quot;strategy/localcache&quot;&gt;ActiveSupport :: Cache :: Strategy :: LocalCache&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4af85cab0bdc6c15dddd5640088731511962fad2" translate="yes" xml:space="preserve">
          <source>This cache has a bounded size specified by the :size options to the initializer (default is 32Mb). When the cache exceeds the allotted size, a cleanup will occur which tries to prune the cache down to three quarters of the maximum size by removing the least recently used entries.</source>
          <target state="translated">このキャッシュは、イニシャライザの :size オプションで指定されたサイズに制限されています (デフォルトは 32Mb です)。キャッシュが割り当てられたサイズを超えると、最近使われていないエントリを削除することでキャッシュを最大サイズの 4 分の 3 まで縮小しようとするクリーンアップが行われます。</target>
        </trans-unit>
        <trans-unit id="0373bb4d447d2e34759c0046345dcabe712d09e8" translate="yes" xml:space="preserve">
          <source>This cache key is stable, but it's combined with a cache version derived from the project record. When the project updated_at is touched, the cache_version changes, even if the key stays stable. This means that unlike a traditional key-based cache expiration approach, you won't be generating cache trash, unused keys, simply because the dependent record is updated.</source>
          <target state="translated">このキャッシュキーは安定していますが、プロジェクトレコードから派生したキャッシュバージョンと組み合わされています。プロジェクトの updated_at がタッチされると、キーが安定していても cache_version が変化します。つまり、従来のキーベースのキャッシュ満了アプローチとは異なり、単に従属レコードが更新されたからといって、キャッシュのゴミとなる未使用のキーを生成することはありません。</target>
        </trans-unit>
        <trans-unit id="a3de3e1459212e74dd738cfc7a292806b2904cef" translate="yes" xml:space="preserve">
          <source>This cache store implementation is meant to be used only in development or test environments and it never stores anything. This can be very useful in development when you have code that interacts directly with &lt;code&gt;Rails.cache&lt;/code&gt; but caching may interfere with being able to see the results of code changes. With this cache store, all &lt;code&gt;fetch&lt;/code&gt; and &lt;code&gt;read&lt;/code&gt; operations will result in a miss.</source>
          <target state="translated">このキャッシュストアの実装は、開発環境またはテスト環境でのみ使用することを目的としており、何も格納しません。 &lt;code&gt;Rails.cache&lt;/code&gt; と直接やり取りするコードがある場合、これは開発で非常に役立ちますが、キャッシュにより、コード変更の結果を表示できない場合があります。このキャッシュストアでは、すべての &lt;code&gt;fetch&lt;/code&gt; および &lt;code&gt;read&lt;/code&gt; 操作が失敗します。</target>
        </trans-unit>
        <trans-unit id="7ccf1d587a45dbc8a554ddbd617f0e45952f2f5c" translate="yes" xml:space="preserve">
          <source>This cache store keeps entries in memory in the same Ruby process. The cache store has a bounded size specified by sending the &lt;code&gt;:size&lt;/code&gt; option to the initializer (default is 32Mb). When the cache exceeds the allotted size, a cleanup will occur and the least recently used entries will be removed.</source>
          <target state="translated">このキャッシュストアは、同じRubyプロセスのエントリをメモリに保持します。キャッシュストアには、 &lt;code&gt;:size&lt;/code&gt; オプションを初期化子に送信することで指定された制限サイズがあります（デフォルトは32Mb）。キャッシュが割り当てられたサイズを超えると、クリーンアップが行われ、最も長く使用されていないエントリが削除されます。</target>
        </trans-unit>
        <trans-unit id="388ac868d2b01f20b533b918207279903e2cb5cb" translate="yes" xml:space="preserve">
          <source>This cache store uses Danga's &lt;code&gt;memcached&lt;/code&gt; server to provide a centralized cache for your application. Rails uses the bundled &lt;code&gt;dalli&lt;/code&gt; gem by default. This is currently the most popular cache store for production websites. It can be used to provide a single, shared cache cluster with very high performance and redundancy.</source>
          <target state="translated">このキャッシュストアは、Dangaの &lt;code&gt;memcached&lt;/code&gt; サーバーを使用して、アプリケーションに集中型キャッシュを提供します。Railsはデフォルトでバンドルされている &lt;code&gt;dalli&lt;/code&gt; gemを使用します。これは現在、プロダクションWebサイトで最も人気のあるキャッシュストアです。非常に高いパフォーマンスと冗長性を備えた単一の共有キャッシュクラスターを提供するために使用できます。</target>
        </trans-unit>
        <trans-unit id="0566a25ae6f6a9472adf73ecbb7e5dda0a17bcca" translate="yes" xml:space="preserve">
          <source>This cache store uses the file system to store entries. The path to the directory where the store files will be stored must be specified when initializing the cache.</source>
          <target state="translated">このキャッシュストアは、ファイルシステムを使用してエントリを保存します。キャッシュを初期化する際に、ストアファイルが保存されるディレクトリへのパスを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="89267dbc248cb731eb2d1a1aa2d771f7d17b1cbb" translate="yes" xml:space="preserve">
          <source>This calculates aggregate values in the given column. Methods for &lt;a href=&quot;calculations#method-i-count&quot;&gt;count&lt;/a&gt;, &lt;a href=&quot;calculations#method-i-sum&quot;&gt;sum&lt;/a&gt;, &lt;a href=&quot;calculations#method-i-average&quot;&gt;average&lt;/a&gt;, &lt;a href=&quot;calculations#method-i-minimum&quot;&gt;minimum&lt;/a&gt;, and &lt;a href=&quot;calculations#method-i-maximum&quot;&gt;maximum&lt;/a&gt; have been added as shortcuts.</source>
          <target state="translated">これは、指定された列の集計値を計算します。&lt;a href=&quot;calculations#method-i-count&quot;&gt;count&lt;/a&gt;、&lt;a href=&quot;calculations#method-i-sum&quot;&gt;sum&lt;/a&gt;、&lt;a href=&quot;calculations#method-i-average&quot;&gt;average&lt;/a&gt;、&lt;a href=&quot;calculations#method-i-minimum&quot;&gt;minimum&lt;/a&gt;、&lt;a href=&quot;calculations#method-i-maximum&quot;&gt;maximumの&lt;/a&gt;メソッドがショートカットとして追加されました。</target>
        </trans-unit>
        <trans-unit id="9ffa6b5aa194b5a903a7cec22dee641ecbe72e3d" translate="yes" xml:space="preserve">
          <source>This callback is called after a create, update, or destroy are rolled back.</source>
          <target state="translated">このコールバックは、作成、更新、破棄がロールバックされた後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="37fe6b80052055ab7637e148a60bea110c169889" translate="yes" xml:space="preserve">
          <source>This callback is called after a record has been created, updated, or destroyed.</source>
          <target state="translated">このコールバックは、レコードが作成、更新、破棄された後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="defe3820d51a833c36bb81d4e57ec474ae3d5b6d" translate="yes" xml:space="preserve">
          <source>This can be changed to something else:</source>
          <target state="translated">これは別のものに変更することができます。</target>
        </trans-unit>
        <trans-unit id="d0c1d3e6298a06134e6fae092232abf7b7d3efde" translate="yes" xml:space="preserve">
          <source>This can be done with a symbol pointing to a method:</source>
          <target state="translated">これは、メソッドを指し示すシンボルで行うことができます。</target>
        </trans-unit>
        <trans-unit id="df03ee101966c8c961da22afa45c21da5e0c4429" translate="yes" xml:space="preserve">
          <source>This can be helpful for example, when we want to put views inside a different directory for subdomains.</source>
          <target state="translated">これは例えば、サブドメイン用に別のディレクトリの中にビューを配置したい場合などに便利です。</target>
        </trans-unit>
        <trans-unit id="10cab613965fd1c02ce409a4b182febf3b64e9fd" translate="yes" xml:space="preserve">
          <source>This can be turned off per-association with &lt;code&gt;optional: true&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;optional: true&lt;/code&gt; を使用して関連付けごとにオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="5547f6f44a505672230e52eb4c6b3b85e0a28135" translate="yes" xml:space="preserve">
          <source>This can be used in situations similar to the &lt;code&gt;MessageVerifier&lt;/code&gt;, but where you don't want users to be able to determine the value of the payload.</source>
          <target state="translated">これは &lt;code&gt;MessageVerifier&lt;/code&gt; と同様の状況で使用できますが、ユーザーがペイロードの値を判別できないようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="a7c433cc9b8bb7f780bd77fd5adc7fd9d594fc49" translate="yes" xml:space="preserve">
          <source>This can be used to provide a default set of options in the standard way: before rendering the create form, a new model instance is assigned the default options and bound to @model_name. Usually this model is not saved to the database. Instead, a second model object is created when the create request is received. This allows the user to submit a form page more than once with the expected results of creating multiple records. In addition, this allows a single partial to be used to generate form inputs for both edit and create forms.</source>
          <target state="translated">これは標準的な方法でオプションのデフォルトセットを提供するために使用することができます:作成フォームをレンダリングする前に、新しいモデルインスタンスにデフォルトオプションが割り当てられ、@model_nameにバインドされます。通常、このモデルはデータベースに保存されません。その代わりに、作成リクエストを受け取ったときに2つ目のモデルオブジェクトが作成されます。これにより、複数のレコードを作成するという期待された結果でフォームページを複数回送信することができます。さらに、これにより、編集フォームと作成フォームの両方のフォーム入力を生成するために単一のパーシャルを使用することができます。</target>
        </trans-unit>
        <trans-unit id="20fd39e13a1ad74ab7643003c0fde1438cfd148c" translate="yes" xml:space="preserve">
          <source>This can be useful to trigger an action on check-boxes for instance:</source>
          <target state="translated">これは、例えばチェックボックスのアクションをトリガーするのに便利です。</target>
        </trans-unit>
        <trans-unit id="1b99261fbdf6a8235da55f083e6bb197be6d56f4" translate="yes" xml:space="preserve">
          <source>This can make for more readable code in complex queries.</source>
          <target state="translated">これにより、複雑なクエリのコードをより読みやすくすることができます。</target>
        </trans-unit>
        <trans-unit id="54605430802e84d1831139f18e6c1d40c8ddad87" translate="yes" xml:space="preserve">
          <source>This can now be used in combination with the &lt;code&gt;validates&lt;/code&gt; method (see &lt;code&gt;ActiveModel::Validations::ClassMethods.validates&lt;/code&gt; for more on this).</source>
          <target state="translated">これは、 &lt;code&gt;validates&lt;/code&gt; メソッドと組み合わせて使用​​できるようになりました（詳細については、 &lt;code&gt;ActiveModel::Validations::ClassMethods.validates&lt;/code&gt; を参照してください）。</target>
        </trans-unit>
        <trans-unit id="9ec213fb775a672d89340314d3d84215e9fa21d5" translate="yes" xml:space="preserve">
          <source>This change applies to most places in Rails where callbacks are used, including Active Record and Active Model callbacks, as well as filters in Action Controller (e.g. &lt;code&gt;before_action&lt;/code&gt;).</source>
          <target state="translated">この変更は、Active RecordコールバックやActive Modelコールバックなどのコールバックが使用されるRailsのほとんどの場所と、アクションコントローラーのフィルター（ &lt;code&gt;before_action&lt;/code&gt; など）に適用されます。</target>
        </trans-unit>
        <trans-unit id="bf7f4f522d5fd20445f73ba1f0c9e5a6e4a1be80" translate="yes" xml:space="preserve">
          <source>This change does require that the engine is run from a Rails application that has an &lt;code&gt;ApplicationController&lt;/code&gt;.</source>
          <target state="translated">この変更では、 &lt;code&gt;ApplicationController&lt;/code&gt; を持つRailsアプリケーションからエンジンを実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="6246e1eade5d1936db2b494cfe6f3517dfa5627f" translate="yes" xml:space="preserve">
          <source>This changes the column &lt;code&gt;part_number&lt;/code&gt; on products table to be a &lt;code&gt;:text&lt;/code&gt; field. Note that &lt;code&gt;change_column&lt;/code&gt; command is irreversible.</source>
          <target state="translated">これにより、productsテーブルの列 &lt;code&gt;part_number&lt;/code&gt; が &lt;code&gt;:text&lt;/code&gt; フィールドに変更されます。 &lt;code&gt;change_column&lt;/code&gt; コマンドは元に戻せないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="ea6bff9c8fbed3084ac15b58575f1083d35a6b6a" translate="yes" xml:space="preserve">
          <source>This chapter describes some particular attacks related to sessions, and security measures to protect your session data.</source>
          <target state="translated">この章では、セッションに関連する特定の攻撃と、セッションデータを保護するためのセキュリティ対策について説明します。</target>
        </trans-unit>
        <trans-unit id="3e2c13dd6ef7285c1ea44eb1bf4a57d328e8be33" translate="yes" xml:space="preserve">
          <source>This check is performed only if &lt;code&gt;email_confirmation&lt;/code&gt; is not &lt;code&gt;nil&lt;/code&gt;. To require confirmation, make sure to add a presence check for the confirmation attribute (we'll take a look at &lt;code&gt;presence&lt;/code&gt; later on in this guide):</source>
          <target state="translated">このチェックは、 &lt;code&gt;email_confirmation&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; でない場合にのみ実行されます。確認を要求するには、確認属性の存在確認を必ず追加してください（このガイドの後半で &lt;code&gt;presence&lt;/code&gt; を確認します）。</target>
        </trans-unit>
        <trans-unit id="b7244a9e77f60322a06cb51172c087b32c03c595" translate="yes" xml:space="preserve">
          <source>This check is performed only if &lt;code&gt;terms_of_service&lt;/code&gt; is not &lt;code&gt;nil&lt;/code&gt;. The default error message for this helper is &lt;em&gt;&quot;must be accepted&quot;&lt;/em&gt;. You can also pass custom message via the &lt;code&gt;message&lt;/code&gt; option.</source>
          <target state="translated">このチェックは、 &lt;code&gt;terms_of_service&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; でない場合にのみ実行されます。このヘルパーのデフォルトのエラーメッセージは&lt;em&gt;「受け入れる必要があります」&lt;/em&gt;です。 &lt;code&gt;message&lt;/code&gt; オプションを使用してカスタムメッセージを渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="b15eea6dcda175bfc691935b655fc49e802c80bc" translate="yes" xml:space="preserve">
          <source>This class delegates unknown methods to the &lt;code&gt;association&lt;/code&gt;'s relation class via a delegate cache.</source>
          <target state="translated">このクラスは、デリゲートキャッシュを介して不明なメソッドを &lt;code&gt;association&lt;/code&gt; の関係クラスに委譲します。</target>
        </trans-unit>
        <trans-unit id="8b14936ad9e5501d96b8fca38cc9b05f1a24609c" translate="yes" xml:space="preserve">
          <source>This class encapsulates a result returned from calling &lt;a href=&quot;connectionadapters/databasestatements#method-i-exec_query&quot;&gt;#exec_query&lt;/a&gt; on any database connection adapter. For example:</source>
          <target state="translated">このクラスは、データベース接続アダプターで&lt;a href=&quot;connectionadapters/databasestatements#method-i-exec_query&quot;&gt;#exec_query&lt;/a&gt;を呼び出して返された結果をカプセル化します。例えば：</target>
        </trans-unit>
        <trans-unit id="6a515bde8d597367a933ea4dac5a1b32dd7ac44a" translate="yes" xml:space="preserve">
          <source>This class is then used like this:</source>
          <target state="translated">そして、このクラスはこのように使用されます。</target>
        </trans-unit>
        <trans-unit id="e745f48ae13b0f2f92bb4804d64ffe95c402b630" translate="yes" xml:space="preserve">
          <source>This class is used by Rails to reload the I18n framework whenever they are changed upon a new request.</source>
          <target state="translated">このクラスは、新しいリクエストでI18nフレームワークが変更されたときに、そのフレームワークをリロードするためにRailsが使用します。</target>
        </trans-unit>
        <trans-unit id="89c2abf913a3e97d7ab6873e3aa498a91e8f1595" translate="yes" xml:space="preserve">
          <source>This class is used to instrument the execution of a single middleware. It proxies the `call` method transparently and instruments the method call.</source>
          <target state="translated">このクラスは単一のミドルウェアの実行を計測するために使われます。このクラスは `call` メソッドを透過的にプロキシし、メソッド呼び出しをインストルメントする。</target>
        </trans-unit>
        <trans-unit id="10fbec722834b66a788d6b29443a2bf571ae8e0f" translate="yes" xml:space="preserve">
          <source>This class is used to verify that all migrations have been run before loading a web page if &lt;code&gt;config.active_record.migration_error&lt;/code&gt; is set to :page_load</source>
          <target state="translated">このクラスは、 &lt;code&gt;config.active_record.migration_error&lt;/code&gt; が：page_loadに設定されている場合、Webページをロードする前にすべての移行が実行されたことを確認するために使用されます</target>
        </trans-unit>
        <trans-unit id="3375c7ae74f396d65ca403824619d59f9d3ed1c4" translate="yes" xml:space="preserve">
          <source>This class method is the single entry point for the `rails notes` command.</source>
          <target state="translated">このクラスメソッドは `rails notes` コマンドの単一のエントリポイントです。</target>
        </trans-unit>
        <trans-unit id="06babc6870f5a898792fb0a11d7b4aded32ca5b7" translate="yes" xml:space="preserve">
          <source>This class provides a &lt;a href=&quot;testcase&quot;&gt;TestCase&lt;/a&gt; for testing generators. To setup, you need just to configure the destination and set which generator is being tested:</source>
          <target state="translated">このクラスは、ジェネレーターをテストするための&lt;a href=&quot;testcase&quot;&gt;TestCase&lt;/a&gt;を提供します。セットアップするには、宛先を構成し、テストするジェネレーターを設定するだけです。</target>
        </trans-unit>
        <trans-unit id="1d673ae1de282bc01ba31145580f50177bbfb8b0" translate="yes" xml:space="preserve">
          <source>This class provides the ability to write an &lt;a href=&quot;sse&quot;&gt;SSE&lt;/a&gt; (Server Sent Event) to an IO stream. The class is initialized with a stream and can be used to either write a JSON string or an object which can be converted to JSON.</source>
          <target state="translated">このクラスは、&lt;a href=&quot;sse&quot;&gt;SSE&lt;/a&gt;（サーバー送信イベント）をIOストリームに書き込む機能を提供します。クラスはストリームで初期化され、JSON文字列またはJSONに変換できるオブジェクトの書き込みに使用できます。</target>
        </trans-unit>
        <trans-unit id="d653286bf96aba74228548ea6351cfabd32bec75" translate="yes" xml:space="preserve">
          <source>This class provides the foundation for interacting with the cache in Rails. This is an abstract class and you cannot use it on its own. Rather you must use a concrete implementation of the class tied to a storage engine. Rails ships with several implementations documented below.</source>
          <target state="translated">このクラスはRailsでキャッシュと対話するための基礎を提供します。これは抽象クラスなので、単体では使えません。むしろ、このクラスの具体的な実装をストレージエンジンに結びつけて使用する必要があります。Railsには、以下に文書化されたいくつかの実装が同梱されています。</target>
        </trans-unit>
        <trans-unit id="e2791de68eb0237bebce0392853ff57de3ef9058" translate="yes" xml:space="preserve">
          <source>This code fetches data from &quot;/test&quot;, and then appends the result to the &lt;code&gt;div&lt;/code&gt; with an id of &lt;code&gt;results&lt;/code&gt;.</source>
          <target state="translated">このコードは、「/ test」からデータをフェッチし、結果をidとともに &lt;code&gt;results&lt;/code&gt; に &lt;code&gt;div&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="439c06bad781236bd049a3c068a21f302a3bce89" translate="yes" xml:space="preserve">
          <source>This code is highly preferable:</source>
          <target state="translated">このコードが非常に好ましい。</target>
        </trans-unit>
        <trans-unit id="cf500c3c8a7fb537a497a92b60a34ceaa06c8c29" translate="yes" xml:space="preserve">
          <source>This code looks fine at the first sight. But the problem lies within the total number of queries executed. The above code executes 1 (to find 10 clients) + 10 (one per each client to load the address) = &lt;strong&gt;11&lt;/strong&gt; queries in total.</source>
          <target state="translated">このコードは一見すると問題なく見えます。しかし、問題は実行されたクエリの総数にあります。上記のコードは、1（10クライアントを見つける）+ 10（各クライアントに1つずつアドレスをロードする）= 合計&lt;strong&gt;11&lt;/strong&gt;クエリを実行します。</target>
        </trans-unit>
        <trans-unit id="94727cfd4a995038a6f1da663151e279ae86383c" translate="yes" xml:space="preserve">
          <source>This code will generate SQL like this:</source>
          <target state="translated">このコードは、このようなSQLを生成します。</target>
        </trans-unit>
        <trans-unit id="609b7ef302631f417d6afac2da186c9c6f9548f6" translate="yes" xml:space="preserve">
          <source>This code will use &lt;code&gt;my_engine.user_path(@user)&lt;/code&gt; to generate the proper route.</source>
          <target state="translated">このコードは &lt;code&gt;my_engine.user_path(@user)&lt;/code&gt; を使用して適切なルートを生成します。</target>
        </trans-unit>
        <trans-unit id="03f95dc3ccc6c6e45151da4a754073b4b3149c7e" translate="yes" xml:space="preserve">
          <source>This command can be nested.</source>
          <target state="translated">このコマンドは入れ子にすることができます。</target>
        </trans-unit>
        <trans-unit id="317442b797232f02be324b4b9ed468f79d4b6182" translate="yes" xml:space="preserve">
          <source>This command is very helpful when you are debugging concurrent threads and need to verify that there are no race conditions in your code.</source>
          <target state="translated">このコマンドは、並行スレッドをデバッグしていて、コードに競合状態がないことを確認する必要がある場合に非常に便利です。</target>
        </trans-unit>
        <trans-unit id="80915cd9dc7fff63ca68cba70bb9384809be5f0d" translate="yes" xml:space="preserve">
          <source>This command will generate four files:</source>
          <target state="translated">このコマンドを実行すると、4つのファイルが生成されます。</target>
        </trans-unit>
        <trans-unit id="aaf37d0a8579b15595338a15aa94e5e3da392a0c" translate="yes" xml:space="preserve">
          <source>This command will generate the &lt;code&gt;Thud&lt;/code&gt; application, and then apply the template to the generated output.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;Thud&lt;/code&gt; アプリケーションを生成し、生成された出力にテンプレートを適用します。</target>
        </trans-unit>
        <trans-unit id="f52a782529b26434e43d41b8c11a9a9cfdc35964" translate="yes" xml:space="preserve">
          <source>This command will output this information:</source>
          <target state="translated">このコマンドは、この情報を出力します。</target>
        </trans-unit>
        <trans-unit id="a039ae63928ac7a4161c7e1c8a87a8c773703cc0" translate="yes" xml:space="preserve">
          <source>This command, when run for the first time, will copy over all the migrations from the engine. When run the next time, it will only copy over migrations that haven't been copied over already. The first run for this command will output something such as this:</source>
          <target state="translated">このコマンドを初めて実行すると、エンジンからのすべての移行をコピーします。次回実行時には、まだコピーされていないマイグレーションのみがコピーされます。このコマンドの初回実行時には、以下のような出力が得られます。</target>
        </trans-unit>
        <trans-unit id="29574f91239ed2bd7e7687ebc2466676ea941217" translate="yes" xml:space="preserve">
          <source>This cookie-based session store is the Rails default. It is dramatically faster than the alternatives.</source>
          <target state="translated">このクッキーベースのセッションストアはRailsのデフォルトです。他の選択肢よりも劇的に高速です。</target>
        </trans-unit>
        <trans-unit id="0f29bcb1394a4dcda50076f5e42fc7bab69c9328" translate="yes" xml:space="preserve">
          <source>This could be in a search action and the user may enter a project's name that they want to find. If a malicious user enters ' OR 1 --, the resulting SQL query will be:</source>
          <target state="translated">これは検索アクションの中にある可能性があり、ユーザーは検索したいプロジェクトの名前を入力することができます。悪意のあるユーザーが ' OR 1 --を入力した場合、結果の SQL クエリは次のようになります。</target>
        </trans-unit>
        <trans-unit id="b6f2af4b75cb550178bf327f34ea5f78eeb3ae43" translate="yes" xml:space="preserve">
          <source>This covers various different error types so we need to do additional work to classify the exception definitively as a &lt;a href=&quot;../preparedstatementcacheexpired&quot;&gt;ActiveRecord::PreparedStatementCacheExpired&lt;/a&gt;</source>
          <target state="translated">これはさまざまな異なるエラータイプをカバーするため、例外を確実に&lt;a href=&quot;../preparedstatementcacheexpired&quot;&gt;ActiveRecord :: PreparedStatementCacheExpired&lt;/a&gt;として分類するために追加の作業を行う必要があります</target>
        </trans-unit>
        <trans-unit id="cfbd0fc027f2d942dcd37f52b54d341c33610053" translate="yes" xml:space="preserve">
          <source>This creates &lt;code&gt;comments&lt;/code&gt; as a &lt;em&gt;nested resource&lt;/em&gt; within &lt;code&gt;articles&lt;/code&gt;. This is another part of capturing the hierarchical relationship that exists between articles and comments.</source>
          <target state="translated">これにより、 &lt;code&gt;articles&lt;/code&gt; 内に&lt;em&gt;ネストされたリソース&lt;/em&gt;として &lt;code&gt;comments&lt;/code&gt; が作成&lt;em&gt;され&lt;/em&gt;ます。これは、記事とコメントの間に存在する階層関係をキャプチャするもう1つの部分です。</target>
        </trans-unit>
        <trans-unit id="c7356600fd1f688811cf440fec9ea49752e6e17d" translate="yes" xml:space="preserve">
          <source>This creates a nested route for the comments, which is what the form requires.</source>
          <target state="translated">これはコメントのためのネストされたルートを作成します。</target>
        </trans-unit>
        <trans-unit id="63dfbd8fca59aadbfe204eda34786ba63a06f05d" translate="yes" xml:space="preserve">
          <source>This creates an &lt;code&gt;addresses_attributes=&lt;/code&gt; method on &lt;code&gt;Person&lt;/code&gt; that allows you to create, update, and (optionally) destroy addresses.</source>
          <target state="translated">これにより、 &lt;code&gt;Person&lt;/code&gt; に &lt;code&gt;addresses_attributes=&lt;/code&gt; メソッドが作成され、アドレスの作成、更新、および（オプションで）破棄が可能になります。</target>
        </trans-unit>
        <trans-unit id="276f47aa29131225538db3d8071790e1bff8765e" translate="yes" xml:space="preserve">
          <source>This creates four files and one empty directory:</source>
          <target state="translated">これにより、4つのファイルと1つの空のディレクトリが作成されます。</target>
        </trans-unit>
        <trans-unit id="3da8fb6ede4e8e8b624b7d2eca6665c6b62a8a50" translate="yes" xml:space="preserve">
          <source>This creates six different routes in your application, all mapping to the &lt;code&gt;Profiles&lt;/code&gt; controller (note that the controller is named after the plural):</source>
          <target state="translated">これにより、アプリケーション内に6つの異なるルートが作成され、すべて &lt;code&gt;Profiles&lt;/code&gt; コントローラーにマッピングされます（コントローラーは複数形にちなんで名付けられていることに注意してください）。</target>
        </trans-unit>
        <trans-unit id="436d0c20e5818a9b9c8fa494d96cca999be2cca7" translate="yes" xml:space="preserve">
          <source>This custom store must be defined as &lt;code&gt;ActionDispatch::Session::MyCustomStore&lt;/code&gt;.</source>
          <target state="translated">このカスタムストアは、 &lt;code&gt;ActionDispatch::Session::MyCustomStore&lt;/code&gt; として定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="7b8dcc561d8d7efc98e338e3b3a80ad10d3bd1a5" translate="yes" xml:space="preserve">
          <source>This declaration constrains the &lt;code&gt;:id&lt;/code&gt; parameter to match the supplied regular expression. So, in this case, the router would no longer match &lt;code&gt;/photos/1&lt;/code&gt; to this route. Instead, &lt;code&gt;/photos/RR27&lt;/code&gt; would match.</source>
          <target state="translated">この宣言は、指定された正規表現に一致するように &lt;code&gt;:id&lt;/code&gt; パラメーターを制約します。したがって、この場合、ルーターは &lt;code&gt;/photos/1&lt;/code&gt; をこのルートに一致させなくなります。代わりに、 &lt;code&gt;/photos/RR27&lt;/code&gt; が一致します。</target>
        </trans-unit>
        <trans-unit id="497c1b65b17c79aa75934cb1aea046a96168de6b" translate="yes" xml:space="preserve">
          <source>This declaration needs to be backed up by a corresponding foreign key column in the books table. For a brand new table, the migration might look something like this:</source>
          <target state="translated">この宣言は、booksテーブルの対応する外部キー列によってバックアップされている必要があります。真新しいテーブルの場合、移行は次のようになります。</target>
        </trans-unit>
        <trans-unit id="6243f746968a49d3dc031414f454a2f40e1698a4" translate="yes" xml:space="preserve">
          <source>This declaration permits the &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;emails&lt;/code&gt;, and &lt;code&gt;friends&lt;/code&gt; attributes. It is expected that &lt;code&gt;emails&lt;/code&gt; will be an array of permitted scalar values, and that &lt;code&gt;friends&lt;/code&gt; will be an array of resources with specific attributes: they should have a &lt;code&gt;name&lt;/code&gt; attribute (any permitted scalar values allowed), a &lt;code&gt;hobbies&lt;/code&gt; attribute as an array of permitted scalar values, and a &lt;code&gt;family&lt;/code&gt; attribute which is restricted to having a &lt;code&gt;name&lt;/code&gt; (any permitted scalar values allowed here, too).</source>
          <target state="translated">この宣言では、 &lt;code&gt;name&lt;/code&gt; 、 &lt;code&gt;emails&lt;/code&gt; 、および &lt;code&gt;friends&lt;/code&gt; 属性を許可しています。 &lt;code&gt;emails&lt;/code&gt; は許可されたスカラー値の配列であり、 &lt;code&gt;friends&lt;/code&gt; は特定の属性を持つリソースの配列であることが期待されます。それらは &lt;code&gt;name&lt;/code&gt; 属性（許可された任意のスカラー値）、許可されたスカラーの配列としての &lt;code&gt;hobbies&lt;/code&gt; 属性を持つ必要があります値、および &lt;code&gt;name&lt;/code&gt; を持つことが制限されている &lt;code&gt;family&lt;/code&gt; 属性（ここでも許可されている許可されたスカラー値）。</target>
        </trans-unit>
        <trans-unit id="01125580540f8e7b1e2bed712693ddb5855a93da" translate="yes" xml:space="preserve">
          <source>This default will be automatically configured in new applications. If existing application want to add this feature it will need to be turned on in an initializer.</source>
          <target state="translated">このデフォルト値は、新しいアプリケーションでは自動的に設定されます。既存のアプリケーションでこの機能を追加したい場合は、イニシャライザでオンにする必要があります。</target>
        </trans-unit>
        <trans-unit id="d0f91a62649f0abf238a3d6e647bdb7c716824b9" translate="yes" xml:space="preserve">
          <source>This demonstrates a shorter syntax for the examples in &lt;a href=&quot;#array-conditions&quot;&gt;Array Conditions&lt;/a&gt;</source>
          <target state="translated">これは、&lt;a href=&quot;#array-conditions&quot;&gt;配列条件の&lt;/a&gt;例の短い構文を示しています</target>
        </trans-unit>
        <trans-unit id="9b9d714522810170bed8f9ad10fc3d7a14c5f000" translate="yes" xml:space="preserve">
          <source>This directory contains one file, &lt;code&gt;bin/rails&lt;/code&gt;, which enables you to use the &lt;code&gt;rails&lt;/code&gt; sub-commands and generators just like you would within an application. This means that you will be able to generate new controllers and models for this engine very easily by running commands like this:</source>
          <target state="translated">このディレクトリには1つのファイル &lt;code&gt;bin/rails&lt;/code&gt; が含まれています。これにより、アプリケーション内と同じように &lt;code&gt;rails&lt;/code&gt; サブコマンドとジェネレーターを使用できます。つまり、次のようなコマンドを実行することで、このエンジンの新しいコントローラーとモデルを非常に簡単に生成できます。</target>
        </trans-unit>
        <trans-unit id="7e382df0917cb80d4e37f4a8e547e0d77496ebd2" translate="yes" xml:space="preserve">
          <source>This doesn't apply to just overrides, but anything that you add in an engine that isn't referenced by your main application.</source>
          <target state="translated">これはオーバーライドだけには適用されませんが、メインアプリケーションから参照されないエンジンに追加するものはすべて適用されます。</target>
        </trans-unit>
        <trans-unit id="66ba41d34d758a571b86ec9a5fbbc8545295c867" translate="yes" xml:space="preserve">
          <source>This error indicates that Rails cannot find the &lt;code&gt;new&lt;/code&gt; action inside the &lt;code&gt;ArticlesController&lt;/code&gt; that you just generated. This is because when controllers are generated in Rails they are empty by default, unless you tell it your desired actions during the generation process.</source>
          <target state="translated">このエラーは、Railsが生成した &lt;code&gt;ArticlesController&lt;/code&gt; 内の &lt;code&gt;new&lt;/code&gt; アクションを見つけられないことを示しています。これは、コントローラーがRailsで生成されるとき、生成プロセス中に必要なアクションを指示しない限り、コントローラーはデフォルトで空であるためです。</target>
        </trans-unit>
        <trans-unit id="29aed8b26a416886193c5d4f05f247148454ee1b" translate="yes" xml:space="preserve">
          <source>This error is raised when trying to eager load a polymorphic association using a JOIN. Eager loading polymorphic associations is only possible with &lt;a href=&quot;querymethods#method-i-preload&quot;&gt;ActiveRecord::Relation#preload&lt;/a&gt;.</source>
          <target state="translated">このエラーは、JOINを使用してポリモーフィックアソシエーションを積極的にロードしようとすると発生します。ポリモーフィック関連付けの熱心な読み込みは、&lt;a href=&quot;querymethods#method-i-preload&quot;&gt;ActiveRecord :: Relation＃preloadで&lt;/a&gt;のみ可能です。</target>
        </trans-unit>
        <trans-unit id="c36a009a82305ca82e7786666343739d8cbc09be" translate="yes" xml:space="preserve">
          <source>This error occurs because the route needs to have a controller defined in order to serve the request. The solution to this particular problem is simple: create a controller called &lt;code&gt;ArticlesController&lt;/code&gt;. You can do this by running this command:</source>
          <target state="translated">このエラーは、リクエストを処理するためにルートにコントローラーが定義されている必要があるために発生します。この特定の問題に対する解決策は簡単です：と呼ばれるコントローラを作成 &lt;code&gt;ArticlesController&lt;/code&gt; を。これを行うには、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="a6f4ec00f14631ec68ed64dac8bde9819c949665" translate="yes" xml:space="preserve">
          <source>This essentially finds the object (or multiple objects) with the given id, creates a new object from the attributes, and then calls destroy on it.</source>
          <target state="translated">これは基本的に、与えられた id を持つオブジェクト (または複数のオブジェクト)を見つけ、その属性から新しいオブジェクトを作成し、そのオブジェクトに対して destroy を呼び出します。</target>
        </trans-unit>
        <trans-unit id="aba405a21502b349d888a3e2dc183e1fb9b1f816" translate="yes" xml:space="preserve">
          <source>This event is only used when &lt;code&gt;#fetch&lt;/code&gt; is called with a block.</source>
          <target state="translated">このイベントは、ブロックで &lt;code&gt;#fetch&lt;/code&gt; が呼び出されたときにのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="4f2db974ddac791cd42b1da641f5b73ec9ca9508" translate="yes" xml:space="preserve">
          <source>This example illustrates this using a URL query parameter to set the locale (e.g. &lt;code&gt;http://example.com/books?locale=pt&lt;/code&gt;). With this approach, &lt;code&gt;http://localhost:3000?locale=pt&lt;/code&gt; renders the Portuguese localization, while &lt;code&gt;http://localhost:3000?locale=de&lt;/code&gt; loads a German localization.</source>
          <target state="translated">この例は、URLクエリパラメータを使用してロケールを設定する方法を示しています（例： &lt;code&gt;http://example.com/books?locale=pt&lt;/code&gt; : //example.com/books? locale= pt）。このアプローチでは、 &lt;code&gt;http://localhost:3000?locale=pt&lt;/code&gt; はポルトガル語のローカリゼーションをレンダリングし、 &lt;code&gt;http://localhost:3000?locale=de&lt;/code&gt; はドイツ語のローカリゼーションをロードします。</target>
        </trans-unit>
        <trans-unit id="1510bec1bc7bea53e98c5c1204f7826c949f11c3" translate="yes" xml:space="preserve">
          <source>This example is a Base64 encoded JavaScript which displays a simple message box. In a redirection URL, an attacker could redirect to this URL with the malicious code in it. As a countermeasure, &lt;em&gt;do not allow the user to supply (parts of) the URL to be redirected to&lt;/em&gt;.</source>
          <target state="translated">この例は、単純なメッセージボックスを表示するBase64エンコードJavaScriptです。リダイレクトURLでは、攻撃者は悪意のあるコードを含むこのURLにリダイレクトする可能性があります。対策として、&lt;em&gt;リダイレクト先のURL（の一部）をユーザーが指定できないようにします&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="94f4c2e14d707f20ff9ea8728189ed2aaed147d6" translate="yes" xml:space="preserve">
          <source>This example places a string in the flash. And of course, you can put as many as you like at a time too. If you want to pass non-primitive types, you will have to handle that in your application. Example: To show messages with links, you will have to use sanitize helper.</source>
          <target state="translated">この例では、フラッシュに文字列を配置しています。もちろん、一度に何個でも好きなだけ入れることができます。非プリミティブ型を渡したい場合は、アプリケーションで処理する必要があります。例:リンク付きのメッセージを表示するには、以下のようにします。リンク付きのメッセージを表示するには、サニタイズヘルパーを使う必要があります。</target>
        </trans-unit>
        <trans-unit id="33ee26c948944cd253e0827af1d9031fb96bc2b4" translate="yes" xml:space="preserve">
          <source>This example pops up a message box. It will be recognized by the above sanitize() filter, though. A great tool to obfuscate and encode strings, and thus &quot;get to know your enemy&quot;, is the &lt;a href=&quot;https://hackvertor.co.uk/public&quot;&gt;Hackvertor&lt;/a&gt;. Rails' sanitize() method does a good job to fend off encoding attacks.</source>
          <target state="translated">この例では、メッセージボックスをポップアップします。ただし、上記のsanitize（）フィルターによって認識されます。&lt;a href=&quot;https://hackvertor.co.uk/public&quot;&gt;Hackvertor&lt;/a&gt;は、文字列を難読化およびエンコードして、「敵を知る」ための優れたツールです。Railsのsanitize（）メソッドは、エンコーディング攻撃を防ぐのに適しています。</target>
        </trans-unit>
        <trans-unit id="230f995753ecdf35190841ba13710083ced79868" translate="yes" xml:space="preserve">
          <source>This example relies on the fact that you will already have handled authentication of the user somewhere else in your application, and that a successful authentication sets a signed cookie with the user ID.</source>
          <target state="translated">この例は、アプリケーションのどこか他の場所で既にユーザの認証を処理しているという事実と、認証に成功するとユーザ ID の署名付きクッキーが設定されるという事実に依存しています。</target>
        </trans-unit>
        <trans-unit id="15a5d9d73c5d7ae4ea28e73bcec401952ead48a6" translate="yes" xml:space="preserve">
          <source>This example shows how you can print the instance variables defined within the current context:</source>
          <target state="translated">この例では、現在のコンテキスト内で定義されているインスタンス変数を表示する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="0f196fd922d277fe17877b9ac4b4f97dac3b1139" translate="yes" xml:space="preserve">
          <source>This example will only take money from David and give it to Mary if neither &lt;code&gt;withdrawal&lt;/code&gt; nor &lt;code&gt;deposit&lt;/code&gt; raise an exception. Exceptions will force a ROLLBACK that returns the database to the state before the transaction began. Be aware, though, that the objects will &lt;em&gt;not&lt;/em&gt; have their instance data returned to their pre-transactional state.</source>
          <target state="translated">この例では、 &lt;code&gt;withdrawal&lt;/code&gt; も &lt;code&gt;deposit&lt;/code&gt; も例外が発生しない場合にのみ、Davidからお金を受け取り、Maryにそれを渡します。例外が発生すると、データベースがトランザクションの開始前の状態に戻るROLLBACKが強制されます。ただし、オブジェクトのインスタンスデータはトランザクション前の状態に戻され&lt;em&gt;ない&lt;/em&gt;ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="998fc86682bb8f42f6e558c3ce2f919dee276525" translate="yes" xml:space="preserve">
          <source>This example, again, showed that a restricted list filter is never complete. However, as custom CSS in web applications is a quite rare feature, it may be hard to find a good permitted CSS filter. &lt;em&gt;If you want to allow custom colors or images, you can allow the user to choose them and build the CSS in the web application&lt;/em&gt;. Use Rails' &lt;code&gt;sanitize()&lt;/code&gt; method as a model for a permitted CSS filter, if you really need one.</source>
          <target state="translated">この例でも、制限付きリストフィルターが完全ではないことを示しています。ただし、WebアプリケーションのカスタムCSSは非常にまれな機能であるため、許可された適切なCSSフィルターを見つけるのは難しい場合があります。&lt;em&gt;カスタムの色や画像を許可する場合は、ユーザーがそれらを選択してWebアプリケーションでCSSを作成できるようにすることができます&lt;/em&gt;。本当に必要な場合は、Railsの &lt;code&gt;sanitize()&lt;/code&gt; メソッドを許可されたCSSフィルターのモデルとして使用します。</target>
        </trans-unit>
        <trans-unit id="e60260896b2290a3e4082126c758244aa4b88c71" translate="yes" xml:space="preserve">
          <source>This feature can be turned off completely by setting:</source>
          <target state="translated">この機能は設定により完全にオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="58ffd7a01c3b666b4a389f4b2058f3053cd26c00" translate="yes" xml:space="preserve">
          <source>This feature is accomplished by instantiating the class and storing the instance as a thread local keyed by the class name. In the example above a key &amp;ldquo;ActiveRecord::RuntimeRegistry&amp;rdquo; is stored in &lt;code&gt;Thread.current&lt;/code&gt;. The class methods proxy to said thread local instance.</source>
          <target state="translated">この機能は、クラスをインスタンス化し、クラス名でキー付けされたスレッドローカルとしてインスタンスを格納することで実現されます。上記の例では、「ActiveRecord :: RuntimeRegistry」というキーが &lt;code&gt;Thread.current&lt;/code&gt; に格納されています。クラスメソッドは、上記のスレッドローカルインスタンスにプロキシします。</target>
        </trans-unit>
        <trans-unit id="f8fea081f4b4bbdb9c69b687c807254bad0018f2" translate="yes" xml:space="preserve">
          <source>This feature is implemented by keeping a connection pool in &lt;a href=&quot;base&quot;&gt;ActiveRecord::Base&lt;/a&gt; that is a hash indexed by the class. If a connection is requested, the &lt;a href=&quot;connectionhandling#method-i-retrieve_connection&quot;&gt;ActiveRecord::Base.retrieve_connection&lt;/a&gt; method will go up the class-hierarchy until a connection is found in the connection pool.</source>
          <target state="translated">この機能は、クラスによってインデックスが付けられたハッシュである&lt;a href=&quot;base&quot;&gt;ActiveRecord :: Baseに&lt;/a&gt;接続プールを保持することによって実装されます。接続が要求された場合、&lt;a href=&quot;connectionhandling#method-i-retrieve_connection&quot;&gt;ActiveRecord :: Base.retrieve_connection&lt;/a&gt;メソッドは、接続プールで接続が見つかるまでクラス階層を上っていきます。</target>
        </trans-unit>
        <trans-unit id="31c2888e43c5f2017a9d9c97fd6ad3e2f7251ed1" translate="yes" xml:space="preserve">
          <source>This file allows you to specify what npm dependencies are needed for your Rails application. This file is used by Yarn. For more information about Yarn, see the &lt;a href=&quot;https://yarnpkg.com/lang/en/&quot;&gt;Yarn website&lt;/a&gt;.</source>
          <target state="translated">このファイルを使用すると、Railsアプリケーションに必要なnpm依存関係を指定できます。このファイルはYarnによって使用されます。糸の詳細については、&lt;a href=&quot;https://yarnpkg.com/lang/en/&quot;&gt;糸のWebサイトを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0305989c7986e5a24f3563489e3f90f47e607d92" translate="yes" xml:space="preserve">
          <source>This file begins with requiring &lt;code&gt;config/application.rb&lt;/code&gt;:</source>
          <target state="translated">このファイルは &lt;code&gt;config/application.rb&lt;/code&gt; を要求することから始まります：</target>
        </trans-unit>
        <trans-unit id="3fe1d94720be601d84c164eb7af0efee4c6d683a" translate="yes" xml:space="preserve">
          <source>This file contains the default Ruby version.</source>
          <target state="translated">このファイルにはデフォルトのRubyのバージョンが含まれています。</target>
        </trans-unit>
        <trans-unit id="d9fd5a5fc49aeb9f2dbf45033958e98349f1015c" translate="yes" xml:space="preserve">
          <source>This file is as follows:</source>
          <target state="translated">このファイルは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="aa4586bd736ea7a04fa9074689e9c187780df338" translate="yes" xml:space="preserve">
          <source>This file is responsible for requiring all the individual frameworks of Rails:</source>
          <target state="translated">このファイルは、Railsの個々のフレームワークをすべて要求する役割を担っています。</target>
        </trans-unit>
        <trans-unit id="3f7115a8bfccf5ab029f1e9f589e05ca3cf679cb" translate="yes" xml:space="preserve">
          <source>This file is the common file required by &lt;code&gt;config.ru&lt;/code&gt; (&lt;code&gt;rails server&lt;/code&gt;) and Passenger. This is where these two ways to run the server meet; everything before this point has been Rack and Rails setup.</source>
          <target state="translated">このファイルは、 &lt;code&gt;config.ru&lt;/code&gt; （ &lt;code&gt;rails server&lt;/code&gt; ）とPassengerに必要な共通ファイルです。これは、サーバーを実行するこれらの2つの方法が出会うところです。この時点までのすべてがラックとレールのセットアップでした。</target>
        </trans-unit>
        <trans-unit id="fa57ab990e2caace5607002f73d0317305bc7d1c" translate="yes" xml:space="preserve">
          <source>This file locates and loads tasks that can be run from the command line. The task definitions are defined throughout the components of Rails. Rather than changing &lt;code&gt;Rakefile&lt;/code&gt;, you should add your own tasks by adding files to the &lt;code&gt;lib/tasks&lt;/code&gt; directory of your application.</source>
          <target state="translated">このファイルは、コマンドラインから実行できるタスクを見つけてロードします。タスク定義はRailsのコンポーネント全体で定義されています。 &lt;code&gt;Rakefile&lt;/code&gt; を変更するのではなく、アプリケーションの &lt;code&gt;lib/tasks&lt;/code&gt; ディレクトリにファイルを追加して、独自のタスクを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="d53aae298230120d4306abdc660332538510a9b1" translate="yes" xml:space="preserve">
          <source>This file requires &lt;code&gt;config/boot.rb&lt;/code&gt;:</source>
          <target state="translated">このファイルには &lt;code&gt;config/boot.rb&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="72c2d5495604ca8eac86343fba13ad817af3099a" translate="yes" xml:space="preserve">
          <source>This file tells git which files (or patterns) it should ignore. See &lt;a href=&quot;https://help.github.com/articles/ignoring-files&quot;&gt;GitHub - Ignoring files&lt;/a&gt; for more info about ignoring files.</source>
          <target state="translated">このファイルは、無視するファイル（またはパターン）をgitに指示します。&lt;a href=&quot;https://help.github.com/articles/ignoring-files&quot;&gt;ファイルの無視&lt;/a&gt;について詳しくは、GitHub-ファイルの無視をご覧ください。</target>
        </trans-unit>
        <trans-unit id="65357aa41bfbb81ea66b4c0622d92b983758d0fb" translate="yes" xml:space="preserve">
          <source>This file will change into the Rails root directory (a path two directories up from &lt;code&gt;APP_PATH&lt;/code&gt; which points at &lt;code&gt;config/application.rb&lt;/code&gt;), but only if the &lt;code&gt;config.ru&lt;/code&gt; file isn't found. This then starts up the &lt;code&gt;Rails::Server&lt;/code&gt; class.</source>
          <target state="translated">このファイルは、Railsのルートディレクトリ（パスから二つのディレクトリアップに変更されます &lt;code&gt;APP_PATH&lt;/code&gt; 点では、 &lt;code&gt;config/application.rb&lt;/code&gt; が、唯一の場合） &lt;code&gt;config.ru&lt;/code&gt; のファイルが見つかりません。次に、 &lt;code&gt;Rails::Server&lt;/code&gt; クラスを起動します。</target>
        </trans-unit>
        <trans-unit id="6c6e28e5429614dda6f67b6a110b78e24406fb77" translate="yes" xml:space="preserve">
          <source>This fixture file includes two fixtures. Each YAML fixture (ie. record) is given a name and is followed by an indented list of key/value pairs in the &amp;ldquo;key: value&amp;rdquo; format. Records are separated by a blank line for your viewing pleasure.</source>
          <target state="translated">この器具ファイルには2つの器具が含まれています。各YAMLフィクスチャ（つまり、レコード）には名前が付けられ、その後に「key：value」形式のキー/値ペアのインデントされたリストが続きます。レコードは、見やすいように空白行で区切られています。</target>
        </trans-unit>
        <trans-unit id="beda4d528d768322473cee2e8a786e2bd1fad71e" translate="yes" xml:space="preserve">
          <source>This functionality is enabled in &lt;code&gt;config/initializers/wrap_parameters.rb&lt;/code&gt; and can be customized.</source>
          <target state="translated">この機能は &lt;code&gt;config/initializers/wrap_parameters.rb&lt;/code&gt; で有効になっており、カスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="83588c310e0a08fd376975dc292ffb18e9f833d5" translate="yes" xml:space="preserve">
          <source>This generates a form with:</source>
          <target state="translated">を持つフォームを生成します。</target>
        </trans-unit>
        <trans-unit id="aab15c3a0e4f00f5929d24d9ee064f50f46b76a0" translate="yes" xml:space="preserve">
          <source>This generates helpers such as &lt;code&gt;account_projects_path&lt;/code&gt;, just like &lt;code&gt;resources&lt;/code&gt; does. The difference here being that the routes generated are like /:account_id/projects, rather than /accounts/:account_id/projects.</source>
          <target state="translated">これ &lt;code&gt;account_projects_path&lt;/code&gt; 、 &lt;code&gt;resources&lt;/code&gt; と同様に、account_projects_pathなどのヘルパーが生成されます。ここでの違いは、生成されたルートが/ accounts /：account_id / projectsではなく/：account_id / projectsのようなものであることです。</target>
        </trans-unit>
        <trans-unit id="0db56c455f2669ea2ea56963dfa8f4c0c2837ae9" translate="yes" xml:space="preserve">
          <source>This generates the URL &amp;ldquo;/basket#items&amp;rdquo; because when the last item in an array passed to &lt;code&gt;polymorphic_url&lt;/code&gt; is a hash then it's treated as options to the URL helper that gets called.</source>
          <target state="translated">これにより、「/ basket＃items」というURLが生成されます。これは、 &lt;code&gt;polymorphic_url&lt;/code&gt; に渡された配列の最後のアイテムがハッシュの場合、呼び出されるURLヘルパーのオプションとして扱われるためです。</target>
        </trans-unit>
        <trans-unit id="3cf3bc289cb71e75637c206fd3f7776af8578ba9" translate="yes" xml:space="preserve">
          <source>This generates the following comments routes:</source>
          <target state="translated">これにより、以下のようなコメントルートが生成されます。</target>
        </trans-unit>
        <trans-unit id="5071c02b398382fbb15b3f9ca7e61a2acce29dda" translate="yes" xml:space="preserve">
          <source>This generates the following routes:</source>
          <target state="translated">これにより、以下のようなルートが生成されます。</target>
        </trans-unit>
        <trans-unit id="428127dc11bba63a8e3e622eab698160a7e7c03e" translate="yes" xml:space="preserve">
          <source>This generates the following:</source>
          <target state="translated">これにより、以下のようなものが生成されます。</target>
        </trans-unit>
        <trans-unit id="201ac36a5603e55b0818de07410e97cb099ce89b" translate="yes" xml:space="preserve">
          <source>This generates, among other things, the method &lt;code&gt;users_path&lt;/code&gt;. By default, this method is accessible from your controllers, views and mailers. If you need to access this auto-generated method from other places (such as a model), then you can do that by including &lt;a href=&quot;../../rails#method-c-application&quot;&gt;Rails.application&lt;/a&gt;.routes.url_helpers in your class:</source>
          <target state="translated">これにより、とりわけ、メソッド &lt;code&gt;users_path&lt;/code&gt; が生成されます。デフォルトでは、このメソッドはコントローラー、ビュー、メーラーからアクセスできます。他の場所（モデルなど）からこの自動生成されたメソッドにアクセスする必要がある場合は、クラスに&lt;a href=&quot;../../rails#method-c-application&quot;&gt;Rails.application&lt;/a&gt; .routes.url_helpers を含めることで実行できます。</target>
        </trans-unit>
        <trans-unit id="7634c823f94cb03785b418ddea129d64980f0405" translate="yes" xml:space="preserve">
          <source>This generates:</source>
          <target state="translated">これが生成します。</target>
        </trans-unit>
        <trans-unit id="590bc9b042313052c052ea8d1bb4866ac4be5f65" translate="yes" xml:space="preserve">
          <source>This generator call will generate just the necessary model files it needs, namespacing the files under a &lt;code&gt;blorgh&lt;/code&gt; directory and creating a model class called &lt;code&gt;Blorgh::Comment&lt;/code&gt;. Now run the migration to create our blorgh_comments table:</source>
          <target state="translated">このジェネレーターの呼び出しは、必要なモデルファイルだけを生成し、 &lt;code&gt;blorgh&lt;/code&gt; ディレクトリの下にファイルの名前空間を設定し、 &lt;code&gt;Blorgh::Comment&lt;/code&gt; と呼ばれるモデルクラスを作成します。次にマイグレーションを実行して、blorgh_commentsテーブルを作成します。</target>
        </trans-unit>
        <trans-unit id="80a979f8d2412c92b4eb6a2d1707e966a7196054" translate="yes" xml:space="preserve">
          <source>This generator can do much more than append a timestamp to the file name. Based on naming conventions and additional (optional) arguments it can also start fleshing out the migration.</source>
          <target state="translated">このジェネレータはファイル名にタイムスタンプを追加するだけではありません。命名規則と追加の (オプションの)引数に基づいて、マイグレーションの詳細化を開始することもできます。</target>
        </trans-unit>
        <trans-unit id="7c3f138c5ce1030ac56fdfdd3979b21fb91940dc" translate="yes" xml:space="preserve">
          <source>This gives better control over what you want to exclude and makes it easier to create a bare controller class, instead of listing the modules required manually.</source>
          <target state="translated">これにより、除外したいものをよりよく制御できるようになり、必要なモジュールを手動でリストアップするのではなく、ベアコントローラクラスを簡単に作成できるようになります。</target>
        </trans-unit>
        <trans-unit id="439aa7feae0070429fb40c49a5397b52e268e75b" translate="yes" xml:space="preserve">
          <source>This gives better control over what you want to exclude and makes it easier to create an &lt;a href=&quot;api&quot;&gt;API&lt;/a&gt; controller class, instead of listing the modules required manually.</source>
          <target state="translated">これにより、除外する対象をより適切に制御でき、必要なモジュールを手動でリストする代わりに、&lt;a href=&quot;api&quot;&gt;API&lt;/a&gt;コントローラークラスを簡単に作成できます。</target>
        </trans-unit>
        <trans-unit id="28fad93f5f220028ec0e72cee51726384fb91503" translate="yes" xml:space="preserve">
          <source>This gives you quite powerful means to flexibly adjust your messages to your application's needs.</source>
          <target state="translated">これにより、アプリケーションのニーズに合わせてメッセージを柔軟に調整できる非常に強力な手段を提供します。</target>
        </trans-unit>
        <trans-unit id="f3a64ce1a2780d8966eef340f2e6e1614b37248b" translate="yes" xml:space="preserve">
          <source>This gotcha is only possible in Ruby &amp;lt; 2.5.</source>
          <target state="translated">この問題は、Ruby &amp;lt;2.5でのみ可能です。</target>
        </trans-unit>
        <trans-unit id="5182bb878f49d8cac9619f40a547e3e08d9a5683" translate="yes" xml:space="preserve">
          <source>This guide assumes a working knowledge of Rack protocol and Rack concepts such as middlewares, URL maps, and &lt;code&gt;Rack::Builder&lt;/code&gt;.</source>
          <target state="translated">このガイドは、Rackプロトコルおよびミドルウェア、URLマップ、 &lt;code&gt;Rack::Builder&lt;/code&gt; などのRackの概念に関する実用的な知識があることを前提としています。</target>
        </trans-unit>
        <trans-unit id="a4774f456eed4e34f3a3c0136ab930a2caec9246" translate="yes" xml:space="preserve">
          <source>This guide covers PostgreSQL specific usage of Active Record.</source>
          <target state="translated">このガイドでは、Active RecordのPostgreSQL固有の使用法について説明します。</target>
        </trans-unit>
        <trans-unit id="7cb1b8a276b5f10ea1d52f8f987052c31c339438" translate="yes" xml:space="preserve">
          <source>This guide covers Rails integration with Rack and interfacing with other Rack components.</source>
          <target state="translated">このガイドでは、Rails と Rack の統合と、他の Rack コンポーネントとのインターフェイスについて説明します。</target>
        </trans-unit>
        <trans-unit id="91962cdd757e087b8150c270955e35a154fc343a" translate="yes" xml:space="preserve">
          <source>This guide covers all the associations provided by Active Record.</source>
          <target state="translated">このガイドでは、Active Recordが提供するすべてのアソシエーションをカバーしています。</target>
        </trans-unit>
        <trans-unit id="fe838c8d7977efc195277609f82b5bce5de222d4" translate="yes" xml:space="preserve">
          <source>This guide covers building a Rails application that serves JSON resources to an API client, including client-side frameworks.</source>
          <target state="translated">このガイドでは、クライアント側のフレームワークを含め、APIクライアントにJSONリソースを提供するRailsアプリケーションの構築について説明します。</target>
        </trans-unit>
        <trans-unit id="824a738f887c71f932df129cd76bd5308cc658af" translate="yes" xml:space="preserve">
          <source>This guide covers built-in mechanisms in Rails for testing your application.</source>
          <target state="translated">このガイドでは、アプリケーションをテストするためのRailsの組み込みメカニズムについて説明します。</target>
        </trans-unit>
        <trans-unit id="7a323687ff515a0c9940a39c6b4ca72e7d18dad0" translate="yes" xml:space="preserve">
          <source>This guide covers different ways to retrieve data from the database using Active Record.</source>
          <target state="translated">このガイドでは、アクティブレコードを使用してデータベースからデータを取得するさまざまな方法について説明します。</target>
        </trans-unit>
        <trans-unit id="4dd9a9902093fd5bffaa4576ad6f6ba8762d7d27" translate="yes" xml:space="preserve">
          <source>This guide covers getting up and running with Ruby on Rails.</source>
          <target state="translated">このガイドでは、Ruby on Railsを使用しての立ち上げと実行について説明しています。</target>
        </trans-unit>
        <trans-unit id="9acb517d68ac00c3cb053e7f3ce868a1b8b2b5a1" translate="yes" xml:space="preserve">
          <source>This guide covers how controllers work and how they fit into the request cycle in your application. It includes sessions, filters, and cookies, data streaming, and dealing with exceptions raised by a request, among other topics.</source>
          <target state="translated">このガイドでは、コントローラがどのように動作し、アプリケーションのリクエストサイクルにどのように適合するかについて説明します。セッション、フィルタ、クッキー、データストリーミング、リクエストで発生する例外の処理などが含まれています。</target>
        </trans-unit>
        <trans-unit id="d765881a1657a1853d29fe949c944147b17b5e25" translate="yes" xml:space="preserve">
          <source>This guide covers how to add internationalization to your applications. Your application will be able to translate content to different languages, change pluralization rules, use correct date formats for each country, and so on.</source>
          <target state="translated">このガイドでは、アプリケーションに国際化を追加する方法を説明します。あなたのアプリケーションは、コンテンツを異なる言語に翻訳したり、複数形ルールを変更したり、各国の正しい日付フォーマットを使用したりすることができるようになります。</target>
        </trans-unit>
        <trans-unit id="50e7508bc5ad05cf1f477c571c5124b9eb442775" translate="yes" xml:space="preserve">
          <source>This guide covers how to attach files to your Active Record models.</source>
          <target state="translated">このガイドでは、Active Record モデルにファイルを添付する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="8276426b6fde15dabbfad76c8f84401ecc333d32" translate="yes" xml:space="preserve">
          <source>This guide covers how to build a plugin to extend the functionality of Rails.</source>
          <target state="translated">このガイドでは、Railsの機能を拡張するためのプラグインの構築方法を説明します。</target>
        </trans-unit>
        <trans-unit id="8309285977427ce4a96ad4a08acd7660d70d3df0" translate="yes" xml:space="preserve">
          <source>This guide covers how you can use Active Record callbacks.</source>
          <target state="translated">このガイドでは、Active Record コールバックの使用方法について説明します。</target>
        </trans-unit>
        <trans-unit id="34606416c459a039397543261218c9b6ca671a9a" translate="yes" xml:space="preserve">
          <source>This guide covers how you can use Active Record migrations to alter your database in a structured and organized manner.</source>
          <target state="translated">このガイドでは、アクティブレコードの移行を使用して、構造化された整理された方法でデータベースを変更する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="08ad902b7bab6953b46838e27beb53d36d707105" translate="yes" xml:space="preserve">
          <source>This guide covers how you can use Active Record validations.</source>
          <target state="translated">このガイドでは、アクティブレコードのバリデーションの使用方法について説明します。</target>
        </trans-unit>
        <trans-unit id="7effa7e7e7b66955bbafa8ebadfb443dda7fd34b" translate="yes" xml:space="preserve">
          <source>This guide covers the asset pipeline.</source>
          <target state="translated">このガイドでは、アセットパイプラインについて説明します。</target>
        </trans-unit>
        <trans-unit id="93ac6e01582e082652d567408c18be0117e273c3" translate="yes" xml:space="preserve">
          <source>This guide covers the association features of Active Record.</source>
          <target state="translated">このガイドでは、Active Record のアソシエーション機能について説明します。</target>
        </trans-unit>
        <trans-unit id="100afe41a6459905b61d1d9f5545fb3b50965c51" translate="yes" xml:space="preserve">
          <source>This guide covers the basic configuration settings for a Rails application.</source>
          <target state="translated">このガイドでは、Railsアプリケーションの基本的な設定について説明します。</target>
        </trans-unit>
        <trans-unit id="0e3f8b80f813199a5d6e17e6b233f6a57679466d" translate="yes" xml:space="preserve">
          <source>This guide covers the basic layout features of Action Controller and Action View, including rendering and redirecting, using content_for blocks, and working with partials.</source>
          <target state="translated">このガイドでは、レンダリングとリダイレクト、content_for ブロックの使用、パーシャルの操作など、Action Controller と Action View の基本的なレイアウト機能について説明します。</target>
        </trans-unit>
        <trans-unit id="cdd19bf75d1a9d62155ef4d129ac09db55b141bb" translate="yes" xml:space="preserve">
          <source>This guide covers the basic layout features of Action Controller and Action View.</source>
          <target state="translated">このガイドでは、アクションコントローラとアクションビューの基本的なレイアウト機能について説明します。</target>
        </trans-unit>
        <trans-unit id="034e23ae1c54fc24ae8959b2b885505a54e0e3f5" translate="yes" xml:space="preserve">
          <source>This guide covers the built-in Ajax/JavaScript functionality of Rails (and more); it will enable you to create rich and dynamic Ajax applications with ease!</source>
          <target state="translated">このガイドでは、Railsに組み込まれたAjax/JavaScriptの機能(およびそれ以上の機能)をカバーしていますので、リッチでダイナミックなAjaxアプリケーションを簡単に作成することができます。</target>
        </trans-unit>
        <trans-unit id="10f433a3aa200f3c61a356cbffb7de42f6e48686" translate="yes" xml:space="preserve">
          <source>This guide covers the built-in Ajax/JavaScript functionality of Rails.</source>
          <target state="translated">このガイドでは、Railsの組み込みAjax/JavaScriptの機能について解説しています。</target>
        </trans-unit>
        <trans-unit id="5bd83b0ae5b8eb7278b2b9936769f172afddfbe3" translate="yes" xml:space="preserve">
          <source>This guide covers the command line tools provided by Rails.</source>
          <target state="translated">このガイドでは、Railsが提供するコマンドラインツールについて解説します。</target>
        </trans-unit>
        <trans-unit id="8dfa4d97908dcc8c9f28ee873de460ef4c37b3bd" translate="yes" xml:space="preserve">
          <source>This guide covers the configuration and initialization features available to Rails applications.</source>
          <target state="translated">このガイドでは、Railsアプリケーションで利用できる設定と初期化機能について説明します。</target>
        </trans-unit>
        <trans-unit id="2e8d99dc655d0b682912b886433561aad79e0298" translate="yes" xml:space="preserve">
          <source>This guide covers the database query interface provided by Active Record.</source>
          <target state="translated">このガイドでは、Active Record が提供するデータベース クエリ インターフェイスについて説明します。</target>
        </trans-unit>
        <trans-unit id="18023441403b3312fbbf744a8c068a57fef52ca4" translate="yes" xml:space="preserve">
          <source>This guide covers the process of adding a brand new generator to your extension or providing an alternative to an element of a built-in Rails generator (such as providing alternative test stubs for the scaffold generator).</source>
          <target state="translated">このガイドでは、拡張機能に新しいジェネレーターを追加したり、組み込みのRailsジェネレーターの要素の代替を提供したりするプロセス(足場ジェネレーターの代替テストスタブを提供するなど)について説明しています。</target>
        </trans-unit>
        <trans-unit id="0b1068ffa96eea4fd43a7e31b9345d92877e11b7" translate="yes" xml:space="preserve">
          <source>This guide covers the use of model classes without Active Record.</source>
          <target state="translated">このガイドでは、Active Record を使用しないモデル・クラスの使用について説明します。</target>
        </trans-unit>
        <trans-unit id="3cbf8c9ad246207f491d05cd6add7dde972db7fd" translate="yes" xml:space="preserve">
          <source>This guide covers the user-facing features of Rails routing.</source>
          <target state="translated">このガイドでは、Railsルーティングのユーザー目線の機能について解説します。</target>
        </trans-unit>
        <trans-unit id="4d6b82d3b20e437146d95815dfd07d24185e6550" translate="yes" xml:space="preserve">
          <source>This guide covers the user-facing features of Rails routing. If you want to understand how to use routing in your own Rails applications, start here.</source>
          <target state="translated">このガイドでは、Railsルーティングのユーザー目線の機能を取り上げています。自作のRailsアプリケーションでルーティングを使う方法を理解したい場合は、ここから始めましょう。</target>
        </trans-unit>
        <trans-unit id="185a1c80c4169f19105583d20e2288ddefc3e000" translate="yes" xml:space="preserve">
          <source>This guide covers using multiple databases in your application.</source>
          <target state="translated">このガイドでは、アプリケーションでの複数のデータベースの使用について説明します。</target>
        </trans-unit>
        <trans-unit id="652b5dbb6ddf65ccd53f2a95d31ce66f641849b2" translate="yes" xml:space="preserve">
          <source>This guide covers using multiple databases with your Rails application.</source>
          <target state="translated">このガイドでは、Railsアプリケーションでの複数のデータベースの使用について説明します。</target>
        </trans-unit>
        <trans-unit id="93a53e9647fcbf5054b064a4dc02e32ccbe6e95f" translate="yes" xml:space="preserve">
          <source>This guide describes common security problems in web applications and how to avoid them with Rails.</source>
          <target state="translated">このガイドでは、Webアプリケーションでよくあるセキュリティ上の問題と、Railsを使ってそれらを回避する方法について説明しています。</target>
        </trans-unit>
        <trans-unit id="f4d40862790c214d79aae639b4955b93125c6139" translate="yes" xml:space="preserve">
          <source>This guide describes how to build a test-driven plugin that will:</source>
          <target state="translated">このガイドでは、テスト駆動型のプラグインを構築する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="afcc19d49048024ff81954101df13e16cab4d3c9" translate="yes" xml:space="preserve">
          <source>This guide describes how to debug Rails applications. It covers the different ways of achieving this and how to understand what is happening &quot;behind the scenes&quot; of your code.</source>
          <target state="translated">このガイドでは、Railsアプリケーションのデバッグ方法について説明します。これを実現するさまざまな方法と、コードの「舞台裏」で何が起こっているのかを理解する方法をカバーしています。</target>
        </trans-unit>
        <trans-unit id="0d495f902e31350750cbeb65b97f1d71c420feb9" translate="yes" xml:space="preserve">
          <source>This guide describes how to use Action Mailbox to receive emails.</source>
          <target state="translated">このガイドでは、Action Mailboxを使用してメールを受信する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="e1878fb11e81d87df5af5b823baf6ec0695b1dcc" translate="yes" xml:space="preserve">
          <source>This guide describes how to use Action Mailer to send emails.</source>
          <target state="translated">このガイドでは、アクションメーラーを使用して電子メールを送信する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="83472dca908d6961d439bd9f1167cfa97eb62772" translate="yes" xml:space="preserve">
          <source>This guide describes how to use Action Text to handle rich text content.</source>
          <target state="translated">このガイドでは、アクション テキストを使用してリッチ テキスト コンテンツを処理する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="8e6695892453a4910d634829999fc532c8a05ee6" translate="yes" xml:space="preserve">
          <source>This guide describes the considerations needed and tools available when working directly with concurrency in a Rails application.</source>
          <target state="translated">このガイドでは、Railsアプリケーションで並行処理を直接行う際に必要な考慮事項と利用可能なツールについて説明します。</target>
        </trans-unit>
        <trans-unit id="490892dcb79211443bc7b66a3b9e7994c1ff4270" translate="yes" xml:space="preserve">
          <source>This guide documents autoloading in &lt;code&gt;classic&lt;/code&gt; mode, which is the traditional one. If you'd like to read about &lt;code&gt;zeiwerk&lt;/code&gt; mode instead, the new one in Rails 6, please check &lt;a href=&quot;autoloading_and_reloading_constants&quot;&gt;Autoloading and Reloading Constants (Zeitwerk Mode)&lt;/a&gt;.</source>
          <target state="translated">このガイドでは、従来のモードである &lt;code&gt;classic&lt;/code&gt; モードでの自動読み込みについて説明します。代わりに &lt;code&gt;zeiwerk&lt;/code&gt; モード、つまりRails 6の新しいモードについて読みたい場合は、&lt;a href=&quot;autoloading_and_reloading_constants&quot;&gt;定数の自動読み込みと再読み込み（Zeitwerkモード）&lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="432d9a11ce6b5dbf6f20370efaa72473f0784d2c" translate="yes" xml:space="preserve">
          <source>This guide documents autoloading in &lt;code&gt;zeitwerk&lt;/code&gt; mode, which is new in Rails 6. If you'd like to read about &lt;code&gt;classic&lt;/code&gt; mode instead, please check &lt;a href=&quot;autoloading_and_reloading_constants_classic_mode&quot;&gt;Autoloading and Reloading Constants (Classic Mode)&lt;/a&gt;.</source>
          <target state="translated">このガイドでは、Rails 6の新機能である &lt;code&gt;zeitwerk&lt;/code&gt; モードでの自動読み込みについて説明します。代わりに &lt;code&gt;classic&lt;/code&gt; モードについて読みたい場合は、定数の自動読み込みと再読み込み&lt;a href=&quot;autoloading_and_reloading_constants_classic_mode&quot;&gt;（クラシックモード）&lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="69637cb78a5aa34a1f32b1b6f5cdf63a3d67357c" translate="yes" xml:space="preserve">
          <source>This guide documents how autoloading and reloading constants work (Classic mode).</source>
          <target state="translated">このガイドでは、オートロードとリロードの定数がどのように機能するかを説明しています(クラシックモード)。</target>
        </trans-unit>
        <trans-unit id="43b73f786044a1c7a34642999528e6c22d41fd23" translate="yes" xml:space="preserve">
          <source>This guide documents how autoloading and reloading constants work (Zeitwerk mode).</source>
          <target state="translated">このガイドでは、オートロードとリロードの定数がどのように機能するかを説明しています(Zeitwerk モード)。</target>
        </trans-unit>
        <trans-unit id="46dec6c392ad85b1b1ee86096590464b5289a287" translate="yes" xml:space="preserve">
          <source>This guide documents how autoloading and reloading works in &lt;code&gt;zeitwerk&lt;/code&gt; mode.</source>
          <target state="translated">このガイドでは、自動ロードと再ロードが &lt;code&gt;zeitwerk&lt;/code&gt; モードでどのように機能するかについて説明します。</target>
        </trans-unit>
        <trans-unit id="9ca295e3457ec79aa7f765d9d8124b28f9666bd4" translate="yes" xml:space="preserve">
          <source>This guide documents how constant autoloading and reloading works in &lt;code&gt;classic&lt;/code&gt; mode.</source>
          <target state="translated">このガイドでは、 &lt;code&gt;classic&lt;/code&gt; モードで一定のオートロードとリロードがどのように機能するかについて説明します。</target>
        </trans-unit>
        <trans-unit id="341e4b0ec0fa25b8f2229a034b23831dd4b65189" translate="yes" xml:space="preserve">
          <source>This guide documents how that works.</source>
          <target state="translated">このガイドでは、その仕組みを説明しています。</target>
        </trans-unit>
        <trans-unit id="c76190df026f1658510299183161369ac0bc9dfe" translate="yes" xml:space="preserve">
          <source>This guide documents the Ruby core extensions defined in Active Support.</source>
          <target state="translated">このガイドでは、Active Support で定義されている Ruby コアの拡張機能について説明します。</target>
        </trans-unit>
        <trans-unit id="baebb62e9ec086008a53e25398f1c01aa44d7a0b" translate="yes" xml:space="preserve">
          <source>This guide documents the Ruby on Rails API documentation guidelines.</source>
          <target state="translated">このガイドでは、Ruby on Rails APIのドキュメント化ガイドラインを文書化しています。</target>
        </trans-unit>
        <trans-unit id="b8b7b2ecac3d057d660d162024e1457e18e08b73" translate="yes" xml:space="preserve">
          <source>This guide documents the Ruby on Rails guides guidelines.</source>
          <target state="translated">このガイドでは、Ruby on Railsのガイドラインを文書化しています。</target>
        </trans-unit>
        <trans-unit id="5759e595b5723fe34f3630e51b3fb63c997c7d6e" translate="yes" xml:space="preserve">
          <source>This guide documents the asset pipeline.</source>
          <target state="translated">このガイドでは、資産のパイプラインを文書化しています。</target>
        </trans-unit>
        <trans-unit id="6332ac3de97a8b2a1e350e8ab0a99f985c7de305" translate="yes" xml:space="preserve">
          <source>This guide explains how Action Cable works, and how to use WebSockets to create real-time features.</source>
          <target state="translated">このガイドでは、Action Cable の仕組みと、WebSocket を使用してリアルタイム機能を作成する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="44fa006d215b1e026e404200b070b0e95dd2f507" translate="yes" xml:space="preserve">
          <source>This guide explains how to effectively use Rails to develop a JSON API application.</source>
          <target state="translated">このガイドでは、Railsを効果的に使ってJSON APIアプリケーションを開発する方法を解説します。</target>
        </trans-unit>
        <trans-unit id="aced21d35e857623d9e4c983ed8d1fe3f0c5456b" translate="yes" xml:space="preserve">
          <source>This guide explains how to use the instrumentation API inside of Active Support to measure events inside of Rails and other Ruby code.</source>
          <target state="translated">このガイドでは、Active Support内のインストルメンテーションAPIを使ってRailsや他のRubyコード内のイベントを計測する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="2047593bd3cece5b122f08b03b7b74cf1b5f0635" translate="yes" xml:space="preserve">
          <source>This guide explains how to write a mountable engine.</source>
          <target state="translated">マウント可能なエンジンの書き方を解説します。</target>
        </trans-unit>
        <trans-unit id="2a4ae51c1cb2d15b2f6a443eac592fce0ccea7f3" translate="yes" xml:space="preserve">
          <source>This guide explains the internals of the Rails initialization process.</source>
          <target state="translated">このガイドでは、Railsの初期化処理の内部について説明します。</target>
        </trans-unit>
        <trans-unit id="5464e7d22c76dc1fba25355fc2a7bcfaf0fcc9b3" translate="yes" xml:space="preserve">
          <source>This guide explains the internals of the initialization process in Rails. It is an extremely in-depth guide and recommended for advanced Rails developers.</source>
          <target state="translated">このガイドでは、Railsにおける初期化処理の内部を解説しています。非常に詳細なガイドであり、Railsの上級開発者にお勧めです。</target>
        </trans-unit>
        <trans-unit id="469c0fa8b79d027d1bec52b5728f17bb485f5004" translate="yes" xml:space="preserve">
          <source>This guide focuses on the interaction between Controller and View in the Model-View-Controller triangle. As you know, the Controller is responsible for orchestrating the whole process of handling a request in Rails, though it normally hands off any heavy code to the Model. But then, when it's time to send a response back to the user, the Controller hands things off to the View. It's that handoff that is the subject of this guide.</source>
          <target state="translated">このガイドでは、Model-View-ControllerのトライアングルにおけるControllerとViewの相互作用に焦点を当てています。ご存知のように、Railsでリクエストを処理するプロセス全体の編成を担当するのはControllerですが、通常は重いコードはすべてModelに渡しています。しかし、いざレスポンスをユーザーに送り返すときになると、ControllerはViewにすべてを渡します。このガイドの主題はこのハンドオフです。</target>
        </trans-unit>
        <trans-unit id="9934e6d316077d905027240a55b8ce24c04fc1f8" translate="yes" xml:space="preserve">
          <source>This guide goes through every method call that is required to boot up the Ruby on Rails stack for a default Rails application, explaining each part in detail along the way. For this guide, we will be focusing on what happens when you execute &lt;code&gt;rails server&lt;/code&gt; to boot your app.</source>
          <target state="translated">このガイドでは、デフォルトのRailsアプリケーションのRuby on Railsスタックを起動するために必要なすべてのメソッド呼び出しについて説明し、途中で各部分を詳細に説明します。このガイドでは、 &lt;code&gt;rails server&lt;/code&gt; を実行してアプリを起動したときに何が起こるかに焦点を当てます。</target>
        </trans-unit>
        <trans-unit id="57bdbfb180878f217808961000e2406113a627b2" translate="yes" xml:space="preserve">
          <source>This guide helps in upgrading applications to latest Ruby on Rails versions.</source>
          <target state="translated">このガイドは、アプリケーションをRuby on Railsの最新バージョンにアップグレードする際に役立ちます。</target>
        </trans-unit>
        <trans-unit id="354229e83f9fa8df4471d69c2c88420d8e4d925e" translate="yes" xml:space="preserve">
          <source>This guide introduces techniques for debugging Ruby on Rails applications.</source>
          <target state="translated">このガイドでは、Ruby on Railsアプリケーションをデバッグするためのテクニックを紹介しています。</target>
        </trans-unit>
        <trans-unit id="8491e88b3ee49cd77b5a3a0c2e2aa7eb5f308688" translate="yes" xml:space="preserve">
          <source>This guide is an introduction to Active Record.</source>
          <target state="translated">このガイドでは、アクティブレコードの紹介をしています。</target>
        </trans-unit>
        <trans-unit id="13ce5d317c4f474aa04e717a7020fd28819bc0a0" translate="yes" xml:space="preserve">
          <source>This guide is an introduction to speeding up your Rails application with caching.</source>
          <target state="translated">このガイドでは、キャッシングを使ってRailsアプリケーションを高速化する方法を紹介しています。</target>
        </trans-unit>
        <trans-unit id="067ba47e605b0b184fce32b87808d9aee977c0c9" translate="yes" xml:space="preserve">
          <source>This guide is designed for beginners who want to get started with a Rails application from scratch. It does not assume that you have any prior experience with Rails.</source>
          <target state="translated">このガイドは、Railsアプリをゼロから始めたいという初心者向けに書かれています。Railsの経験があることは前提としていません。</target>
        </trans-unit>
        <trans-unit id="54fabaf69315c31c33c515465e36ba26df9a5991" translate="yes" xml:space="preserve">
          <source>This guide is not intended to be a complete documentation of available form helpers and their arguments. Please visit &lt;a href=&quot;https://edgeapi.rubyonrails.org/&quot;&gt;the Rails API documentation&lt;/a&gt; for a complete reference.</source>
          <target state="translated">このガイドは、利用可能なフォームヘルパーとその引数の完全なドキュメントを意図したものではありません。完全なリファレンスについては&lt;a href=&quot;https://edgeapi.rubyonrails.org/&quot;&gt;、Rails APIのドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="dd8bc150f159e64661f27eac1d8ba8720b1b43c0" translate="yes" xml:space="preserve">
          <source>This guide provides an introduction to Action View and introduces a few of the more common view helpers.</source>
          <target state="translated">このガイドでは、アクションビューの紹介と、より一般的なビューヘルパーをいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="7aedc9d40a992664cabf83423090a4192903139b" translate="yes" xml:space="preserve">
          <source>This guide provides steps to be followed when you upgrade your applications to a newer version of Ruby on Rails. These steps are also available in individual release guides.</source>
          <target state="translated">このガイドでは、アプリケーションをRuby on Railsの新しいバージョンにアップグレードする際の手順を説明しています。これらの手順は、個別のリリースガイドにも記載されています。</target>
        </trans-unit>
        <trans-unit id="92b18a31864bae306411dbd35e90821c8cea2e24" translate="yes" xml:space="preserve">
          <source>This guide provides you with all you need to get started creating, enqueuing, and executing background jobs.</source>
          <target state="translated">このガイドでは、バックグラウンドジョブの作成、エンキュー、実行を開始するために必要なすべての情報を提供します。</target>
        </trans-unit>
        <trans-unit id="eb7ba8e9a54d8ea88e1dcacfd7409c70005acd35" translate="yes" xml:space="preserve">
          <source>This guide provides you with all you need to get started in creating, enqueuing and executing background jobs.</source>
          <target state="translated">このガイドでは、バックグラウンドジョブの作成、エンキュー、実行に必要なすべての情報を提供します。</target>
        </trans-unit>
        <trans-unit id="f9b82bd30aa4020b78b0e236395c82da989cf0d6" translate="yes" xml:space="preserve">
          <source>This guide provides you with all you need to get started in handling rich text content.</source>
          <target state="translated">このガイドでは、リッチテキストコンテンツの取り扱いを開始するために必要なすべての情報を提供します。</target>
        </trans-unit>
        <trans-unit id="63d2970cdf1122b7787c543c509a52a7a9225e94" translate="yes" xml:space="preserve">
          <source>This guide provides you with all you need to get started in receiving emails to your application.</source>
          <target state="translated">このガイドでは、アプリケーションへのメール受信を開始するために必要なすべての情報を提供します。</target>
        </trans-unit>
        <trans-unit id="a1ada7d49865a815c69da87c4c93e610d2b2ef1a" translate="yes" xml:space="preserve">
          <source>This guide provides you with all you need to get started in sending emails from and to your application, and many internals of Action Mailer. It also covers how to test your mailers.</source>
          <target state="translated">このガイドでは、アプリケーションからのメール送信やアプリケーションへのメール送信を開始するために必要なすべての情報と、Action Mailerの多くの内部情報を提供しています。また、メーラーをテストする方法もカバーしています。</target>
        </trans-unit>
        <trans-unit id="02edb0e1d8d93191ac64d29d7cc880c86c056143" translate="yes" xml:space="preserve">
          <source>This guide should provide you with all you need to get started using model classes. Active Model allows for Action Pack helpers to interact with plain Ruby objects. Active Model also helps build custom ORMs for use outside of the Rails framework.</source>
          <target state="translated">このガイドでは、モデルクラスを使い始めるために必要なすべての情報を提供します。Active Modelを使用すると、Action PackヘルパーがプレーンなRubyオブジェクトと対話できるようになります。また、Active ModelはRailsフレームワークの外で使用するためのカスタムORMの構築にも役立ちます。</target>
        </trans-unit>
        <trans-unit id="94d30cf066a8e6edf595e6be8f690a2bdb587d4c" translate="yes" xml:space="preserve">
          <source>This guide teaches you how to hook into the life cycle of your Active Record objects.</source>
          <target state="translated">このガイドでは、Active Record オブジェクトのライフサイクルにフックする方法について説明します。</target>
        </trans-unit>
        <trans-unit id="317d0fb5727ba561db9a587b1d7191b396c98342" translate="yes" xml:space="preserve">
          <source>This guide teaches you how to validate the state of objects before they go into the database using Active Record's validations feature.</source>
          <target state="translated">このガイドでは、Active Record のバリデーション機能を使用して、データベースに入る前にオブジェクトの状態をバリデーションする方法について説明します。</target>
        </trans-unit>
        <trans-unit id="728b7245e28c54a68c3a12c4eb4c1516ec1f7b59" translate="yes" xml:space="preserve">
          <source>This guide uses the word &quot;load&quot; freely to mean a given file is interpreted, but the actual mechanism can be &lt;code&gt;Kernel#load&lt;/code&gt; or &lt;code&gt;Kernel#require&lt;/code&gt; depending on that flag.</source>
          <target state="translated">このガイドでは、「ロード」という言葉を自由に使用して、特定のファイルが解釈されることを示していますが、実際のメカニズムは、そのフラグに応じて &lt;code&gt;Kernel#load&lt;/code&gt; または &lt;code&gt;Kernel#require&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="687e76eee10a2472d0838923e50ff39c9ef78043" translate="yes" xml:space="preserve">
          <source>This guide will get you started with models, persistence to database, and the Active Record pattern and library.</source>
          <target state="translated">このガイドでは、モデル、データベースへの永続性、アクティブレコードのパターンとライブラリについて説明します。</target>
        </trans-unit>
        <trans-unit id="d54e9a9556eeab94622ebc22bc76bca217cb7e3b" translate="yes" xml:space="preserve">
          <source>This guide will walk you through the I18n API and contains a tutorial on how to internationalize a Rails application from the start.</source>
          <target state="translated">このガイドでは、I18n APIについて解説し、Railsアプリケーションを最初から国際化する方法についてのチュートリアルが含まれています。</target>
        </trans-unit>
        <trans-unit id="ebf6a56734197b7e9e648e6fa1367d918afca195" translate="yes" xml:space="preserve">
          <source>This has the downside of increasing the boot-up time, as opposed to manually requiring only the necessary files in your individual tests.</source>
          <target state="translated">これは、個々のテストで必要なファイルだけを手動で必要とするのとは対照的に、起動時間が長くなるという欠点があります。</target>
        </trans-unit>
        <trans-unit id="98984a9e0ba46fe579cf3567990617ba8162ba51" translate="yes" xml:space="preserve">
          <source>This helper exposes a method for caching fragments of a view rather than an entire action or page. This technique is useful caching pieces like menus, lists of new topics, static HTML fragments, and so on. This method takes a block that contains the content you wish to cache.</source>
          <target state="translated">このヘルパーは、アクションやページ全体ではなく、ビューの断片をキャッシュする方法を公開しています。この手法は、メニューや新しいトピックのリスト、静的な HTML フラグメントなどの断片をキャッシュするのに便利です。このメソッドは、キャッシュしたいコンテンツを含むブロックを受け取ります。</target>
        </trans-unit>
        <trans-unit id="545785f00f8db6a6ce540ffe34525f4d65e44158" translate="yes" xml:space="preserve">
          <source>This helper makes building an Atom feed easy. Here's a full usage example:</source>
          <target state="translated">このヘルパーを使うと、Atom フィードの構築が簡単になります。以下に使用例を示します。</target>
        </trans-unit>
        <trans-unit id="379e9cbec4b4d8644f28954a9c8275624dfac1a6" translate="yes" xml:space="preserve">
          <source>This helper may be included in any class that includes the URL helpers of a routes (routes.url_helpers). Some methods provided here will only work in the context of a request (link_to_unless_current, for instance), which must be provided as a method called request on the context.</source>
          <target state="translated">このヘルパーは、ルートのURLヘルパーを含むクラス(routes.url_helpers)に含めることができます。ここで提供されるいくつかのメソッドはリクエストのコンテキストでのみ動作します(例えば、link_to_unless_current)。</target>
        </trans-unit>
        <trans-unit id="774382992584a01cddf74b882eff987c1413f162" translate="yes" xml:space="preserve">
          <source>This helper passes the record to a separate class for validation.</source>
          <target state="translated">このヘルパーは、検証のためにレコードを別のクラスに渡します。</target>
        </trans-unit>
        <trans-unit id="7c9eafd4e02a7675d33e7eefee0949a72f673c3c" translate="yes" xml:space="preserve">
          <source>This helper returns the name of a cache key for a given fragment cache call. By supplying &lt;code&gt;skip_digest: true&lt;/code&gt; to cache, the digestion of cache fragments can be manually bypassed. This is useful when cache fragments cannot be manually expired unless you know the exact key which is the case when using memcached.</source>
          <target state="translated">このヘルパーは、指定されたフラグメントキャッシュ呼び出しのキャッシュキーの名前を返します。供給することにより &lt;code&gt;skip_digest: true&lt;/code&gt; キャッシュに、キャッシュ断片の消化を手動でバイパスすることができます。これは、memcachedを使用する場合に該当する正確なキーを知らない限り、キャッシュフラグメントを手動で期限切れにできない場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="005155dcb4050a59bc267cf64ed58fe3133fcd3c" translate="yes" xml:space="preserve">
          <source>This helper validates attributes against a block. It doesn't have a predefined validation function. You should create one using a block, and every attribute passed to &lt;code&gt;validates_each&lt;/code&gt; will be tested against it. In the following example, we don't want names and surnames to begin with lower case.</source>
          <target state="translated">このヘルパーは、ブロックに対して属性を検証します。事前定義された検証関数はありません。あなたはブロックを使用して作成する必要があり、かつに渡されるすべての属性 &lt;code&gt;validates_each&lt;/code&gt; は、それに対してテストされます。次の例では、名前と姓を小文字で始めないようにしています。</target>
        </trans-unit>
        <trans-unit id="94f1c3f7c0b96fee7072388fbb93376802bab4f9" translate="yes" xml:space="preserve">
          <source>This helper validates that the attribute's value is unique right before the object gets saved. It does not create a uniqueness constraint in the database, so it may happen that two different database connections create two records with the same value for a column that you intend to be unique. To avoid that, you must create a unique index on that column in your database.</source>
          <target state="translated">このヘルパーは、オブジェクトが保存される直前に属性の値が一意であることを検証します。このヘルパーはデータベースに一意性の制約を作成しませんので、2つの異なるデータベース接続が、一意であることを意図したカラムに対して同じ値を持つ2つのレコードを作成することが起こるかもしれません。これを避けるためには、データベース内のその列に一意なインデックスを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="e78cfea25a550fee5c7d05639e326011a4bfb3b2" translate="yes" xml:space="preserve">
          <source>This helper validates that the attributes' values are included in a given set. In fact, this set can be any enumerable object.</source>
          <target state="translated">このヘルパーは、属性の値が与えられた集合に含まれているかどうかを検証します。実際には、この集合は任意の列挙可能なオブジェクトになります。</target>
        </trans-unit>
        <trans-unit id="08d2b0d48c3a3bec15be8ee351558bb1a0069904" translate="yes" xml:space="preserve">
          <source>This helper validates that the attributes' values are not included in a given set. In fact, this set can be any enumerable object.</source>
          <target state="translated">このヘルパーは、属性の値が与えられた集合に含まれていないことを検証します。実際には、この集合は任意の列挙可能なオブジェクトになります。</target>
        </trans-unit>
        <trans-unit id="debd785872bb943820e19d09f895ce0362f82442" translate="yes" xml:space="preserve">
          <source>This helper validates that the specified attributes are absent. It uses the &lt;code&gt;present?&lt;/code&gt; method to check if the value is not either nil or a blank string, that is, a string that is either empty or consists of whitespace.</source>
          <target state="translated">このヘルパーは、指定された属性が存在しないことを検証します。 &lt;code&gt;present?&lt;/code&gt; 使いますか？値がnilでも空の文字列でもないかどうか、つまり空または空白で構成されている文字列かどうかをチェックするメソッド。</target>
        </trans-unit>
        <trans-unit id="4d51465dcf2954d7a13b6f2dbce55dd44e27d183" translate="yes" xml:space="preserve">
          <source>This helper validates that the specified attributes are not empty. It uses the &lt;code&gt;blank?&lt;/code&gt; method to check if the value is either &lt;code&gt;nil&lt;/code&gt; or a blank string, that is, a string that is either empty or consists of whitespace.</source>
          <target state="translated">このヘルパーは、指定された属性が空でないことを検証します。 &lt;code&gt;blank?&lt;/code&gt; 使いますか？値が &lt;code&gt;nil&lt;/code&gt; または空白の文字列、つまり空であるか空白で構成される文字列であるかどうかを確認するメソッド。</target>
        </trans-unit>
        <trans-unit id="8d15d493f2dac4260fafd63c6fa6c3c6cd2b5924" translate="yes" xml:space="preserve">
          <source>This helper validates that your attributes have only numeric values. By default, it will match an optional sign followed by an integral or floating point number. To specify that only integral numbers are allowed set &lt;code&gt;:only_integer&lt;/code&gt; to true.</source>
          <target state="translated">このヘルパーは、属性に数値のみが含まれていることを検証します。デフォルトでは、オプションの符号の後に整数または浮動小数点数が続くものと一致します。整数のみが許可されることを指定するには、 &lt;code&gt;:only_integer&lt;/code&gt; をtrueに設定します。</target>
        </trans-unit>
        <trans-unit id="1837be71c3347ee7d252b4dd76e12139d678e3cf" translate="yes" xml:space="preserve">
          <source>This helper validates the attributes' values by testing whether they match a given regular expression, which is specified using the &lt;code&gt;:with&lt;/code&gt; option.</source>
          <target state="translated">このヘルパーは、 &lt;code&gt;:with&lt;/code&gt; オプションを使用して指定された特定の正規表現に一致するかどうかをテストして、属性の値を検証します。</target>
        </trans-unit>
        <trans-unit id="530c3904d56ec5974f60d563e1d3bdcbda2302bd" translate="yes" xml:space="preserve">
          <source>This helper validates the length of the attributes' values. It provides a variety of options, so you can specify length constraints in different ways:</source>
          <target state="translated">このヘルパーは、属性の値の長さを検証します。さまざまなオプションを提供するので、さまざまな方法で長さの制約を指定することができます。</target>
        </trans-unit>
        <trans-unit id="fabb16d868184cea58cfe7d4003c718c4f166887" translate="yes" xml:space="preserve">
          <source>This helper works just like normal helpers.</source>
          <target state="translated">このヘルパーは通常のヘルパーと同じように動作します。</target>
        </trans-unit>
        <trans-unit id="30fc2d64b7d0d8394a7f903001ad772e2088e0b3" translate="yes" xml:space="preserve">
          <source>This helps prevent conflicts with any other engine or application that may have an article resource as well.</source>
          <target state="translated">これは、記事リソースを持つ他のエンジンやアプリケーションとの競合を防ぐのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="1cf0b8ca8c2df39f6fdac13adf8e604c6933a463" translate="yes" xml:space="preserve">
          <source>This high level overview will help you understand when your code is executed and how, and overall become a better Rails developer. If you still want to know more, the Rails source code itself is probably the best place to go next.</source>
          <target state="translated">この高レベルの概要は、自分のコードがいつどのように実行されるかを理解し、全体的により良いRails開発者になるのに役立ちます。それでももっと詳しく知りたい場合は、Railsのソースコード自体を次に読むのが一番いいかもしれません。</target>
        </trans-unit>
        <trans-unit id="f82d2b1992c212da213b6b597a27186c4f4dba64" translate="yes" xml:space="preserve">
          <source>This idea strikes a balance between descriptive routes and deep nesting. There exists shorthand syntax to achieve just that, via the &lt;code&gt;:shallow&lt;/code&gt; option:</source>
          <target state="translated">このアイデアは、説明的なルートと深い入れ子の間のバランスをとります。 &lt;code&gt;:shallow&lt;/code&gt; オプションを介して、それを実現する省略構文が存在します。</target>
        </trans-unit>
        <trans-unit id="82076effaf2061abd5b6f14d518b3fae8ca28b71" translate="yes" xml:space="preserve">
          <source>This inserts a correctly-formatted data URI into the CSS source.</source>
          <target state="translated">これは、正しくフォーマットされたデータURIをCSSソースに挿入します。</target>
        </trans-unit>
        <trans-unit id="7624c621ac14deafeaaed7902e07ca4994eeabf1" translate="yes" xml:space="preserve">
          <source>This interceptor is enabled by default. To disable it, delete it from the &lt;code&gt;ActionMailer::Base.preview_interceptors&lt;/code&gt; array:</source>
          <target state="translated">このインターセプターはデフォルトで有効になっています。これを無効にするには、 &lt;code&gt;ActionMailer::Base.preview_interceptors&lt;/code&gt; 配列から削除します。</target>
        </trans-unit>
        <trans-unit id="68ac435fc016afd53ebc39d8d2bdbe7fa1818e52" translate="yes" xml:space="preserve">
          <source>This is a brief instruction manual for your application. You should edit this file to tell others what your application does, how to set it up, and so on.</source>
          <target state="translated">これはあなたのアプリケーションの簡単な説明書です。このファイルを編集して、あなたのアプリケーションが何をするのか、どのように設定するのかなどを他の人に伝える必要があります。</target>
        </trans-unit>
        <trans-unit id="236a86724a3b7c924ff74a1550504e6c1a14b8f4" translate="yes" xml:space="preserve">
          <source>This is a class that abstracts away an asserted response. It purposely does not inherit from &lt;a href=&quot;response&quot;&gt;Response&lt;/a&gt; because it doesn't need it. That means it does not have headers or a body.</source>
          <target state="translated">これは、表明された応答を抽象化するクラスです。それはそれを必要としないので故意に&lt;a href=&quot;response&quot;&gt;Response&lt;/a&gt;から継承しません。つまり、ヘッダーや本文はありません。</target>
        </trans-unit>
        <trans-unit id="0227309670d5d656255751e4bef7637565f95272" translate="yes" xml:space="preserve">
          <source>This is a great way to inspect the values of the current context variables. For example, to check that we have no local variables currently defined:</source>
          <target state="translated">これは、現在のコンテキスト変数の値を調べるのに最適な方法です。例えば、現在定義されているローカル変数がないかどうかをチェックするために。</target>
        </trans-unit>
        <trans-unit id="d4587a30fb5b215d87c2747e9969b087ba324099" translate="yes" xml:space="preserve">
          <source>This is a handy option if you are updating an older project that didn't use the asset pipeline and already uses this path or you wish to use this path for a new resource.</source>
          <target state="translated">アセットパイプラインを使用していない古いプロジェクトを更新していて、すでにこのパスを使用している場合や、新しいリソースにこのパスを使用したい場合に便利なオプションです。</target>
        </trans-unit>
        <trans-unit id="91fb6f33bcbb65b651d369ad6213dde3283a864f" translate="yes" xml:space="preserve">
          <source>This is a perfectly valid solution, but Rails provides a less verbose alternative: &lt;code&gt;options_from_collection_for_select&lt;/code&gt;. This helper expects a collection of arbitrary objects and two additional arguments: the names of the methods to read the option &lt;strong&gt;value&lt;/strong&gt; and &lt;strong&gt;text&lt;/strong&gt; from, respectively:</source>
          <target state="translated">これは完全に有効な解決策ですが、Railsは冗長度の低い代替手段、 &lt;code&gt;options_from_collection_for_select&lt;/code&gt; を提供します。このヘルパーは、任意のオブジェクトのコレクションと2つの追加の引数を期待し&lt;strong&gt;ます&lt;/strong&gt;。それぞれ、オプション&lt;strong&gt;値&lt;/strong&gt;と&lt;strong&gt;テキスト&lt;/strong&gt;を読み取るメソッドの名前です。</target>
        </trans-unit>
        <trans-unit id="fe56016c0db98bbf6300fa8d10326808584bcc75" translate="yes" xml:space="preserve">
          <source>This is a poor solution, but fully distributed transactions are beyond the scope of Active Record.</source>
          <target state="translated">これは貧弱な解決策ですが、完全に分散されたトランザクションはActive Recordの範囲を超えています。</target>
        </trans-unit>
        <trans-unit id="7dd8c7b7b69c090c1cbdf105479f8256c1d16690" translate="yes" xml:space="preserve">
          <source>This is a rather comprehensive guide to the various testing facilities in Rails. It covers everything from 'What is a test?' to Integration Testing. Enjoy.</source>
          <target state="translated">これはRailsのさまざまなテスト機能についてのかなり包括的なガイドです。テストとは何か」から「統合テスト」まで網羅しています。お楽しみに。</target>
        </trans-unit>
        <trans-unit id="1b4db319b3fda4fa46827ef71d4d592b37a9892d" translate="yes" xml:space="preserve">
          <source>This is a setting for Rails itself. If you want to pass settings to individual Rails components, you can do so via the same &lt;code&gt;config&lt;/code&gt; object in &lt;code&gt;config/application.rb&lt;/code&gt;:</source>
          <target state="translated">これはRails自体の設定です。個々のRailsコンポーネントに設定を渡す場合は、 &lt;code&gt;config/application.rb&lt;/code&gt; 内の同じ &lt;code&gt;config&lt;/code&gt; オブジェクトを使用して行うことができます。</target>
        </trans-unit>
        <trans-unit id="dbfd983ac46d4b355583cedc1284525f1db08144" translate="yes" xml:space="preserve">
          <source>This is a start, but it doesn't dynamically create the option tags. You can generate option tags with the &lt;code&gt;options_for_select&lt;/code&gt; helper:</source>
          <target state="translated">これは開始ですが、オプションタグを動的に作成しません。 &lt;code&gt;options_for_select&lt;/code&gt; ヘルパーを使用してオプションタグを生成できます。</target>
        </trans-unit>
        <trans-unit id="d17bc718e6125253db3d6010bd018864dc8c7748" translate="yes" xml:space="preserve">
          <source>This is a web notification channel that allows you to trigger client-side web notifications when you broadcast to the right streams:</source>
          <target state="translated">これは、適切なストリームにブロードキャストした際に、クライアント側のWeb通知をトリガーすることができるWeb通知チャンネルです。</target>
        </trans-unit>
        <trans-unit id="add325d6853a3081a693db0988ded439abf165b1" translate="yes" xml:space="preserve">
          <source>This is a white list of permitted scalar types that includes the ones supported in XML and JSON requests.</source>
          <target state="translated">これはXMLやJSONリクエストでサポートされているものを含む、許可されているスカラー型のホワイトリストです。</target>
        </trans-unit>
        <trans-unit id="a1bfe41decfa7156f43af4b11764141340abb1c9" translate="yes" xml:space="preserve">
          <source>This is alright for some web applications, but certainly not if the user is not authorized to view all projects. If the user changes the id to 42, and they are not allowed to see that information, they will have access to it anyway. Instead, &lt;em&gt;query the user's access rights, too&lt;/em&gt;:</source>
          <target state="translated">これは一部のWebアプリケーションでは問題ありませんが、ユーザーがすべてのプロジェクトを表示する権限を持っていない場合は確かにそうではありません。ユーザーがIDを42に変更し、その情報の表示が許可されていない場合でも、ユーザーはそれにアクセスできます。代わりに&lt;em&gt;、ユーザーのアクセス権もクエリします&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="7ea08e85428f7dae28f5ff42bac4f303f6975ffa" translate="yes" xml:space="preserve">
          <source>This is also the case with inheritance and module includes where the parent or module defines a &lt;a href=&quot;classmethods#method-i-default_scope&quot;&gt;default_scope&lt;/a&gt; and the child or including class defines a second one.</source>
          <target state="translated">これは継承にも当てはまります。モジュールインクルードでは、親またはモジュールが&lt;a href=&quot;classmethods#method-i-default_scope&quot;&gt;default_scope&lt;/a&gt;を定義し、子またはインクルードクラスが2番目のクラスを定義します。</target>
        </trans-unit>
        <trans-unit id="865f091128dc7691bac5e173d9e24d51ce2cd12f" translate="yes" xml:space="preserve">
          <source>This is an abstract base class for analyzers, which extract metadata from blobs. See &lt;a href=&quot;analyzer/imageanalyzer&quot;&gt;ActiveStorage::Analyzer::ImageAnalyzer&lt;/a&gt; for an example of a concrete subclass.</source>
          <target state="translated">これは、blobからメタデータを抽出するアナライザーの抽象基本クラスです。具体的なサブクラスの例については、&lt;a href=&quot;analyzer/imageanalyzer&quot;&gt;ActiveStorage :: Analyzer :: ImageAnalyzer&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="314966a61923d31a0bc7b653c7b15e8267b26741" translate="yes" xml:space="preserve">
          <source>This is an abstract base class for previewers, which generate images from blobs. See ActiveStorage::Previewer::MuPDFPreviewer and ActiveStorage::Previewer::VideoPreviewer for examples of concrete subclasses.</source>
          <target state="translated">これは blob から画像を生成するプレビューアの抽象基底クラスです。具体的なサブクラスの例は ActiveStorage::Previewer::MuPDFPreviewer と ActiveStorage::Previewer::VideoPreviewer を参照してください。</target>
        </trans-unit>
        <trans-unit id="5164c9f3a244e51b03aa9d3197a95e96bb00d342" translate="yes" xml:space="preserve">
          <source>This is an all-or-nothing operation, Rails does not attempt to reload only what changed since dependencies between classes makes that really tricky. Instead, everything is wiped.</source>
          <target state="translated">これはオールオア・ナッシングの操作ですが、Railsはクラス間の依存関係が非常に厄介なので、変更されたものだけをリロードしようとはしません。代わりに、すべてが消去されます。</target>
        </trans-unit>
        <trans-unit id="9dfd9dc3caa14755efc8f8a05248988fd13e2764" translate="yes" xml:space="preserve">
          <source>This is an introduction to three types of caching techniques: page, action and fragment caching. By default Rails provides fragment caching. In order to use page and action caching you will need to add &lt;code&gt;actionpack-page_caching&lt;/code&gt; and &lt;code&gt;actionpack-action_caching&lt;/code&gt; to your &lt;code&gt;Gemfile&lt;/code&gt;.</source>
          <target state="translated">これは、ページ、アクション、フラグメントキャッシングという3種類のキャッシングテクニックの紹介です。デフォルトでは、Railsはフラグメントキャッシングを提供します。あなたが追加する必要がありますキャッシュの使用ページと行動するためには &lt;code&gt;actionpack-page_caching&lt;/code&gt; と &lt;code&gt;actionpack-action_caching&lt;/code&gt; をあなたに &lt;code&gt;Gemfile&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5555dee3e7a5ab5584fbaa2cdbf6e111d65572e7" translate="yes" xml:space="preserve">
          <source>This is because the incoming XML document (if a web-service request is in process) can only contain a single root-node. So, we have to rearrange things so that the request looks like this (url-encoded):</source>
          <target state="translated">これは、(ウェブサービスのリクエストが処理中の場合)受信するXMLドキュメントには単一のルートノードしか含めることができないからです。そのため、リクエストが次のようになるように配置を変えなければなりません (url-encoded)。</target>
        </trans-unit>
        <trans-unit id="905051a2d5ae2f2b8c51b848354a8751c3782e96" translate="yes" xml:space="preserve">
          <source>This is currently the most popular cache store for production websites.</source>
          <target state="translated">現在、制作サイトで最も人気のあるキャッシュストアです。</target>
        </trans-unit>
        <trans-unit id="5871bd759ac07fed83a084a33ffb3dbbf698d715" translate="yes" xml:space="preserve">
          <source>This is done by either returning and leasing existing connection, or by creating a new connection and leasing it.</source>
          <target state="translated">これは、既存の接続を返却してリースするか、新しい接続を作成してリースすることで行われます。</target>
        </trans-unit>
        <trans-unit id="edf40f3fb63d5f4a07f45fdb49c69cb8aaecdfe3" translate="yes" xml:space="preserve">
          <source>This is due to the way &lt;a href=&quot;../../object#method-i-blank-3F&quot;&gt;Object#blank?&lt;/a&gt; handles boolean values: &lt;code&gt;false.blank? # =&amp;gt; true&lt;/code&gt;.</source>
          <target state="translated">これは&lt;a href=&quot;../../object#method-i-blank-3F&quot;&gt;Object＃blank？&lt;/a&gt;ブール値を処理します： &lt;code&gt;false.blank? # =&amp;gt; true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0e75165bd6c0c435e57a13f622ac0560e9f8aea5" translate="yes" xml:space="preserve">
          <source>This is equivalent to</source>
          <target state="translated">に相当します。</target>
        </trans-unit>
        <trans-unit id="7df60eca28628c687288336e90344c09052d6e67" translate="yes" xml:space="preserve">
          <source>This is equivalent to writing:</source>
          <target state="translated">これは文章を書くことに相当します。</target>
        </trans-unit>
        <trans-unit id="0c4a19f41f357e975c7ecf272280bda06a0a7837" translate="yes" xml:space="preserve">
          <source>This is equivalent to:</source>
          <target state="translated">に相当します。</target>
        </trans-unit>
        <trans-unit id="bf3963c5a31eeb01e885e1acef74b0386761c8e2" translate="yes" xml:space="preserve">
          <source>This is especially useful in validation situations where the user might supply a string for an integer field and you want to display the original string back in an error message. Accessing the attribute normally would typecast the string to 0, which isn't what you want.</source>
          <target state="translated">これは、ユーザーが整数フィールドに文字列を入力し、エラーメッセージに元の文字列を表示したいという検証状況で特に便利です。この属性にアクセスすると、通常は文字列を 0 にタイプキャストしますが、これはあなたが望むものではありません。</target>
        </trans-unit>
        <trans-unit id="71866269bd470ce2d7b7b1155a0a13386d12cd5a" translate="yes" xml:space="preserve">
          <source>This is generally a much cleaner way to set up the database of a blank application.</source>
          <target state="translated">これは一般的に、空白のアプリケーションのデータベースをセットアップするよりもずっとクリーンな方法です。</target>
        </trans-unit>
        <trans-unit id="4ad8a787581f843360989dbf783471a59de59634" translate="yes" xml:space="preserve">
          <source>This is mainly intended for sharing common conditions between multiple associations.</source>
          <target state="translated">これは主に複数の協会間で共通の条件を共有することを目的としています。</target>
        </trans-unit>
        <trans-unit id="0e601d127faa01a91c1ee11466a5b40f9e1a2ba8" translate="yes" xml:space="preserve">
          <source>This is meant to be implemented by the adapters that support extensions</source>
          <target state="translated">これは、拡張子をサポートするアダプタによって実装されることを意図しています。</target>
        </trans-unit>
        <trans-unit id="5e39777005ed40ac5c55a9e639158a69e12f0534" translate="yes" xml:space="preserve">
          <source>This is more often than not used inside a select_tag like this example:</source>
          <target state="translated">これは、この例のようにselect_tagの中で使用されることが多いのではないでしょうか。</target>
        </trans-unit>
        <trans-unit id="88736da89c7f5fa560ff5b210c718c953972c3d5" translate="yes" xml:space="preserve">
          <source>This is most useful when updating several attributes at once. If, on the other hand, you'd like to update several records in bulk, you may find the &lt;code&gt;update_all&lt;/code&gt; class method useful:</source>
          <target state="translated">これは、複数の属性を一度に更新する場合に最も役立ちます。一方、複数のレコードを一括で更新する場合は、 &lt;code&gt;update_all&lt;/code&gt; クラスメソッドが便利です。</target>
        </trans-unit>
        <trans-unit id="caccd46ce2b3dd250ca9818efcd2df2cf306c5bb" translate="yes" xml:space="preserve">
          <source>This is not compatible with the &lt;a href=&quot;#direct-uploads&quot;&gt;direct uploads&lt;/a&gt; feature.</source>
          <target state="translated">これは&lt;a href=&quot;#direct-uploads&quot;&gt;直接アップロード&lt;/a&gt;機能と互換性がありません。</target>
        </trans-unit>
        <trans-unit id="d652a9e2f95ded9cdd728c3a457299f1da7ff87a" translate="yes" xml:space="preserve">
          <source>This is not the case in Rails applications, where application classes and modules are just available everywhere:</source>
          <target state="translated">アプリケーションクラスやモジュールがどこにでもあるだけのRailsアプリケーションではそうはいきません。</target>
        </trans-unit>
        <trans-unit id="2c4c708a791cd0766f936fe455fd58d8f7f8536a" translate="yes" xml:space="preserve">
          <source>This is not the same as running all the migrations. It will only use the contents of the current &lt;code&gt;db/schema.rb&lt;/code&gt; or &lt;code&gt;db/structure.sql&lt;/code&gt; file. If a migration can't be rolled back, &lt;code&gt;rails db:reset&lt;/code&gt; may not help you. To find out more about dumping the schema see &lt;a href=&quot;#schema-dumping-and-you&quot;&gt;Schema Dumping and You&lt;/a&gt; section.</source>
          <target state="translated">これは、すべての移行を実行することと同じではありません。現在の &lt;code&gt;db/schema.rb&lt;/code&gt; または &lt;code&gt;db/structure.sql&lt;/code&gt; ファイルの内容のみを使用します。移行をロールバックできない場合、 &lt;code&gt;rails db:reset&lt;/code&gt; は役に立たない可能性があります。&lt;a href=&quot;#schema-dumping-and-you&quot;&gt;スキーマのダンプの&lt;/a&gt;詳細については、「スキーマのダンプとユーザー」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="476f3c583a6763b42119d74920eae71a20fdb760" translate="yes" xml:space="preserve">
          <source>This is often factored out into its own method so it can be reused by multiple actions in the same controller, for example &lt;code&gt;create&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt;. Above and beyond mass assignment issues, the method is often made &lt;code&gt;private&lt;/code&gt; to make sure it can't be called outside its intended context. Here is the result:</source>
          <target state="translated">これは多くの場合、独自のメソッドに分解されるため、同じコントローラー内の複数のアクション（たとえば、 &lt;code&gt;create&lt;/code&gt; および &lt;code&gt;update&lt;/code&gt; )で再利用できます。大量割り当ての問題に加えて、メソッドは多くの場合、意図されたコンテキストの外部で呼び出されないように &lt;code&gt;private&lt;/code&gt; にされます。結果は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="0e0a90acd9171f758e766f64e40f11604b22b532" translate="yes" xml:space="preserve">
          <source>This is one of the best ways to find bugs in your code.</source>
          <target state="translated">これは、あなたのコードのバグを見つけるための最良の方法の一つです。</target>
        </trans-unit>
        <trans-unit id="63ca15fdcd8e41433c8d24158cbffeb8de318585" translate="yes" xml:space="preserve">
          <source>This is particularly useful for initializing an options hash with default values.</source>
          <target state="translated">これは、オプションハッシュをデフォルト値で初期化するのに特に便利です。</target>
        </trans-unit>
        <trans-unit id="4bf4b1de560da5ffbb60a75f2ecba74c5e7fe966" translate="yes" xml:space="preserve">
          <source>This is possible because on some servers, this way the parameter id, as in params[:id], would be nil. However, here is the finder from the activation action:</source>
          <target state="translated">これは、いくつかのサーバーでは、params[:id]のように、この方法でパラメータidは、nilになるだろうからです。しかし、ここに活性化アクションからの検索結果があります。</target>
        </trans-unit>
        <trans-unit id="f043ebef04d8d62a14ad83768255d1c49c9d2466" translate="yes" xml:space="preserve">
          <source>This is possible thanks to a hidden field generated by the helper method for every collection of checkboxes. This hidden field is given the same field name as the checkboxes with a blank value.</source>
          <target state="translated">これは、チェックボックスのコレクションごとにヘルパーメソッドによって生成される隠しフィールドのおかげです。この隠しフィールドにはチェックボックスと同じフィールド名と空欄の値が与えられます。</target>
        </trans-unit>
        <trans-unit id="4055e9eb86cbef6fd45cdce30c4e1d8fa7109629" translate="yes" xml:space="preserve">
          <source>This is short-hand for &lt;code&gt;unscope(:select).select(fields)&lt;/code&gt;. Note that we're unscoping the entire select statement.</source>
          <target state="translated">これは &lt;code&gt;unscope(:select).select(fields)&lt;/code&gt; の省略形です。selectステートメント全体のスコープを解除していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="524db4e942fe674edb44820a99cd4b3b0a848093" translate="yes" xml:space="preserve">
          <source>This is short-hand for &lt;code&gt;unscope(where:
conditions.keys).where(conditions)&lt;/code&gt;. Note that unlike reorder, we're only unscoping the named conditions &amp;ndash; not the entire where statement.</source>
          <target state="translated">これは &lt;code&gt;unscope(where: conditions.keys).where(conditions)&lt;/code&gt; です。並べ替えとは異なり、whereステートメント全体ではなく、名前付き条件のスコープを解除するだけであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="03f6e44dab7f751dc8ac3b6362059f6af7087c4e" translate="yes" xml:space="preserve">
          <source>This is short-hand for:</source>
          <target state="translated">これはショートハンドのためのものです。</target>
        </trans-unit>
        <trans-unit id="d060cb3ccf4a3c817c36239623366a500bc1139a" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;a href=&quot;relation#method-i-find_or_create_by&quot;&gt;find_or_create_by&lt;/a&gt;, but avoids the problem of stale reads between the SELECT and the INSERT, as that method needs to first query the table, then attempt to insert a row if none is found.</source>
          <target state="translated">これは&lt;a href=&quot;relation#method-i-find_or_create_by&quot;&gt;find_or_create_by&lt;/a&gt;に似ていますが、SELECTとINSERTの間の古い読み取りの問題を回避します。そのメソッドは最初にテーブルをクエリし、見つからない場合は行の挿入を試みる必要があるためです。</target>
        </trans-unit>
        <trans-unit id="d3039fad58aed73518993e5254cab0746970698c" translate="yes" xml:space="preserve">
          <source>This is the default cache store implementation (at &lt;code&gt;&quot;#{root}/tmp/cache/&quot;&lt;/code&gt;) if no explicit &lt;code&gt;config.cache_store&lt;/code&gt; is supplied.</source>
          <target state="translated">これは、明示的な &lt;code&gt;config.cache_store&lt;/code&gt; が指定されていない場合のデフォルトのキャッシュストア実装（ &lt;code&gt;&quot;#{root}/tmp/cache/&quot;&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="3b294f478ac8128dd19bb0a3363f9167a2ff202c" translate="yes" xml:space="preserve">
          <source>This is the default queue adapter. It's well-suited for dev/test since it doesn't need an external infrastructure, but it's a poor fit for production since it drops pending jobs on restart.</source>
          <target state="translated">これはデフォルトのキューアダプタです。外部のインフラストラクチャを必要としないので、開発/テストには適していますが、 再起動時に保留中のジョブを削除してしまうので、本番環境には不向きです。</target>
        </trans-unit>
        <trans-unit id="19b9cbb208ca023f3d372570188571ddffe2eb88" translate="yes" xml:space="preserve">
          <source>This is the entry point for all assets. When using the asset pipeline (i.e. sprockets and sprockets-rails), the behavior is &amp;ldquo;enhanced&amp;rdquo;. You can bypass the asset pipeline by passing in &lt;code&gt;skip_pipeline: true&lt;/code&gt; to the options.</source>
          <target state="translated">これは、すべてのアセットのエントリポイントです。アセットパイプライン（スプロケットとスプロケットレール）を使用する場合、動作は「強化」されます。オプションに &lt;code&gt;skip_pipeline: true&lt;/code&gt; を渡すことで、アセットパイプラインをバイパスできます。</target>
        </trans-unit>
        <trans-unit id="a879952bc2384b58228e1cc88c6eeba119ebdba2" translate="yes" xml:space="preserve">
          <source>This is the fastest way to update attributes because it goes straight to the database, but take into account that in consequence the regular update procedures are totally bypassed. In particular:</source>
          <target state="translated">これはデータベースに直接アクセスするため、属性を更新する最速の方法ですが、結果的に通常の更新手続きが完全にバイパスされてしまうことを考慮してください。特に</target>
        </trans-unit>
        <trans-unit id="dea8eb66708962551027008a99a9d115a30b5e03" translate="yes" xml:space="preserve">
          <source>This is the final step required to get the new comment form working. Displaying the comments, however, is not quite right yet. If you were to create a comment right now, you would see this error:</source>
          <target state="translated">これが新しいコメントフォームを動作させるために必要な最後のステップです。しかし、コメントの表示はまだ正しくありません。今すぐにコメントを作成すると、このようなエラーが表示されます。</target>
        </trans-unit>
        <trans-unit id="0d733419d80f4628f3b75f9f9b75f8084c9fea98" translate="yes" xml:space="preserve">
          <source>This is the generator just created:</source>
          <target state="translated">これが先ほど作成したジェネレーターです。</target>
        </trans-unit>
        <trans-unit id="213775bf160b9aaddfc0b572608a82bd8c8122c6" translate="yes" xml:space="preserve">
          <source>This is the low level API which sits beneath &lt;code&gt;attribute&lt;/code&gt;. It only accepts type objects, and will do its work immediately instead of waiting for the schema to load. Automatic schema detection and &lt;a href=&quot;classmethods#method-i-attribute&quot;&gt;#attribute&lt;/a&gt; both call this under the hood. While this method is provided so it can be used by plugin authors, application code should probably use &lt;a href=&quot;classmethods#method-i-attribute&quot;&gt;#attribute&lt;/a&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;attribute&lt;/code&gt; 下にある低レベルAPI です。タイプオブジェクトのみを受け入れ、スキーマが読み込まれるのを待つのではなく、すぐに処理を実行します。自動スキーマ検出と&lt;a href=&quot;classmethods#method-i-attribute&quot;&gt;#attributeは&lt;/a&gt;どちらも内部ではこれを呼び出します。このメソッドはプラグインの作成者が使用できるように提供されていますが、アプリケーションコードではおそらく&lt;a href=&quot;classmethods#method-i-attribute&quot;&gt;#attributeを&lt;/a&gt;使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="08a01c626433c4a35f7b2d425460de1d4acf0e73" translate="yes" xml:space="preserve">
          <source>This is the main entry point for rendering. It basically delegates to other objects like TemplateRenderer and &lt;a href=&quot;partialrenderer&quot;&gt;PartialRenderer&lt;/a&gt; which actually renders the template.</source>
          <target state="translated">これは、レンダリングの主要なエントリポイントです。基本的に、テンプレートを実際にレンダリングするTemplateRendererや&lt;a href=&quot;partialrenderer&quot;&gt;PartialRenderer&lt;/a&gt;などの他のオブジェクトに委任します。</target>
        </trans-unit>
        <trans-unit id="0a7362d4fdb9ce2bc04ad1949d06a74ddbb934b1" translate="yes" xml:space="preserve">
          <source>This is the method that defines the application behavior when a request is found to be unverified.</source>
          <target state="translated">これは、リクエストが未検証であることが判明したときのアプリケーションの動作を定義するメソッドです。</target>
        </trans-unit>
        <trans-unit id="04147656e71aa844819d315a436992670672c2c0" translate="yes" xml:space="preserve">
          <source>This is the only method that is not thread safe, but is only ever called during the eager loading phase.</source>
          <target state="translated">これはスレッドセーフではない唯一のメソッドですが、イーガーローディングの段階でのみ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d403e247708e5bb03eef06a0a89b4bf74851fe8b" translate="yes" xml:space="preserve">
          <source>This is the right time to understand a little more about writing tests for your mailers. The line &lt;code&gt;ActionMailer::Base.delivery_method = :test&lt;/code&gt; in &lt;code&gt;config/environments/test.rb&lt;/code&gt; sets the delivery method to test mode so that email will not actually be delivered (useful to avoid spamming your users while testing) but instead it will be appended to an array (&lt;code&gt;ActionMailer::Base.deliveries&lt;/code&gt;).</source>
          <target state="translated">これは、メーラーのテストを書くことについてもう少し理解するのに適切な時期です。行 &lt;code&gt;ActionMailer::Base.delivery_method = :test&lt;/code&gt; in &lt;code&gt;config/environments/test.rb&lt;/code&gt; は、配信方法をテストモードに設定して、電子メールが実際に配信されないようにします（テスト中のユーザーへのスパム送信を防ぐのに役立ちます）代わりに追加されます配列に（ &lt;code&gt;ActionMailer::Base.deliveries&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="a8756e6def08accc737d69f61fb7bb7d51e092f5" translate="yes" xml:space="preserve">
          <source>This is the strategy adopted by the Rails asset pipeline.</source>
          <target state="translated">これはRails資産のパイプラインで採用されている戦略です。</target>
        </trans-unit>
        <trans-unit id="004780d4c45954d665bd54c93112b626b23347bd" translate="yes" xml:space="preserve">
          <source>This is the string of data being sent back to the client. This is most often HTML.</source>
          <target state="translated">これは、クライアントに送り返されるデータの文字列です。これはほとんどの場合 HTML です。</target>
        </trans-unit>
        <trans-unit id="dcf397b2bfca317db3d0b076ec600f2f63f09fea" translate="yes" xml:space="preserve">
          <source>This is then used by Action Cable to determine the URL of your WebSocket server. Your CoffeeScript can then connect to the server without needing to specify the URL directly:</source>
          <target state="translated">これが Action Cable によって使用され、WebSocket サーバーの URL が決定されます。これにより、CoffeeScript は URL を直接指定しなくてもサーバーに接続することができます。</target>
        </trans-unit>
        <trans-unit id="4cf90ade8f212940229e1dd084416f20c163760f" translate="yes" xml:space="preserve">
          <source>This is used by the Rails UJS helper to create dynamically loaded inline &amp;lt;script&amp;gt; elements.</source>
          <target state="translated">これは、動的に読み込まれるインライン&amp;lt;script&amp;gt;要素を作成するためにRails UJSヘルパーによって使用されます。</target>
        </trans-unit>
        <trans-unit id="663d182dd5ff878aea73b684cb3e3623606702a4" translate="yes" xml:space="preserve">
          <source>This is used by the Rails UJS helper to create dynamically loaded inline &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; elements.</source>
          <target state="translated">これは、動的に読み込まれるインライン &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 要素を作成するためにRails UJSヘルパーによって使用されます。</target>
        </trans-unit>
        <trans-unit id="80aef7d14433f3872bdc21b294a585f3b6194dae" translate="yes" xml:space="preserve">
          <source>This is used by the default &lt;a href=&quot;../rails#attribute-c-logger&quot;&gt;Rails.logger&lt;/a&gt; as configured by Railties to make it easy to stamp log lines with subdomains, request ids, and anything else to aid debugging of multi-user production applications.</source>
          <target state="translated">これは、&lt;a href=&quot;../rails#attribute-c-logger&quot;&gt;Rails&lt;/a&gt;によって設定されたデフォルトのRails.loggerによって使用され、サブドメイン、リクエストID、およびその他の何かでログ行に簡単にスタンプして、マルチユーザーの本番アプリケーションのデバッグを支援します。</target>
        </trans-unit>
        <trans-unit id="da463114acbc05d0accf4cb9abf3944514b91e01" translate="yes" xml:space="preserve">
          <source>This is used to create the &lt;code&gt;config&lt;/code&gt; object on Railties, an instance of &lt;a href=&quot;railtie/configuration&quot;&gt;Railtie::Configuration&lt;/a&gt;, that is used by Railties and &lt;a href=&quot;application&quot;&gt;Application&lt;/a&gt; to store related configuration.</source>
          <target state="translated">これは、&lt;a href=&quot;railtie/configuration&quot;&gt;Railtie :: Configurationの&lt;/a&gt;インスタンスであるRailtiesに &lt;code&gt;config&lt;/code&gt; オブジェクトを作成するために使用されます。これは、関連する構成を保管するためにRailtiesおよび&lt;a href=&quot;application&quot;&gt;Application&lt;/a&gt;によって使用されます。</target>
        </trans-unit>
        <trans-unit id="ccd8f91e2131e8cc7a6c70e96f65caea6a40b112" translate="yes" xml:space="preserve">
          <source>This is useful for cases like remember-me tokens and auto-unsubscribe links where the session store isn't suitable or available.</source>
          <target state="translated">これは、Remember-meトークンや自動配信停止リンクのように、セッションストアが適切でない場合や利用できない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="6bcd23b49e5cc8549fc267d976ca5b6c271bae70" translate="yes" xml:space="preserve">
          <source>This is useful for limiting a set of parameters to everything but a few known toggles:</source>
          <target state="translated">これは、パラメータのセットをいくつかの既知のトグル以外のすべてのものに限定するのに便利です。</target>
        </trans-unit>
        <trans-unit id="93cd12486193c6b8cc6da9b85aa975b6e99ee6c1" translate="yes" xml:space="preserve">
          <source>This is useful for setting flash messages for instance:</source>
          <target state="translated">これは、例えばフラッシュメッセージを設定するのに便利です。</target>
        </trans-unit>
        <trans-unit id="20f494f5b35219f6b64992edd064d3f4c188dfc1" translate="yes" xml:space="preserve">
          <source>This is useful for when you need to call a proprietary method such as PostgreSQL's lo_* methods.</source>
          <target state="translated">PostgreSQLのlo_*メソッドのような独自のメソッドを呼び出す必要がある場合に便利です。</target>
        </trans-unit>
        <trans-unit id="91b7d75dcbae399c13b14c743e7166314f1ab845" translate="yes" xml:space="preserve">
          <source>This is useful in cases where you aren't sure if the local variable has been assigned. Alternatively, you could also use &lt;code&gt;defined?
headline&lt;/code&gt; to first check if the variable has been assigned before using it.</source>
          <target state="translated">これは、ローカル変数が割り当てられているかどうかが不明な場合に役立ちます。または、 &lt;code&gt;defined? headline&lt;/code&gt; 使用することもできますか？変数を使用する前に、変数が割り当てられているかどうかを最初に確認するための見出し。</target>
        </trans-unit>
        <trans-unit id="daeda2332a21cd511e52c9790edb7f742ee54918" translate="yes" xml:space="preserve">
          <source>This is useful when you want to log under development or staging without flooding your production log with unnecessary information.</source>
          <target state="translated">開発中のログやステージング中のログを、制作ログに不要な情報を氾濫させずに記録したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="9ed4c7388eef8d2c01e191e1ae5565f0b71812d6" translate="yes" xml:space="preserve">
          <source>This is useful when you're rendering a small snippet of HTML code. However, you might want to consider moving it to a template file if the markup is complex.</source>
          <target state="translated">これは、HTMLコードの小さなスニペットをレンダリングするときに便利です。しかし、マークアップが複雑な場合は、テンプレートファイルに移動することを検討した方がいいかもしれません。</target>
        </trans-unit>
        <trans-unit id="9904c6020adc3dd710bfbbf34a05016a746fbec6" translate="yes" xml:space="preserve">
          <source>This is very similar to the &lt;code&gt;Article&lt;/code&gt; model that you saw earlier. The difference is the line &lt;code&gt;belongs_to :article&lt;/code&gt;, which sets up an Active Record &lt;em&gt;association&lt;/em&gt;. You'll learn a little about associations in the next section of this guide.</source>
          <target state="translated">これは、前に見た &lt;code&gt;Article&lt;/code&gt; モデルとよく似ています。違いは、行の &lt;code&gt;belongs_to :article&lt;/code&gt; 、これはアクティブレコードの&lt;em&gt;関連付け&lt;/em&gt;を設定します。このガイドの次のセクションで、関連付けについて少し学習します。</target>
        </trans-unit>
        <trans-unit id="29028b796bcc932eb094a3292aa812906209c05c" translate="yes" xml:space="preserve">
          <source>This is where all the Rails frameworks are loaded and thus made available to the application. We won't go into detail of what happens inside each of those frameworks, but you're encouraged to try and explore them on your own.</source>
          <target state="translated">ここですべてのRailsフレームワークがロードされ、アプリケーションで利用できるようになります。それぞれのフレームワークの内部で何が起こっているのかについては詳しくは触れませんが、ご自身で試してみることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="37329c739affc0a288f6d223308497354efc9781" translate="yes" xml:space="preserve">
          <source>This is where the first output of the Rails initialization happens. This method creates a trap for &lt;code&gt;INT&lt;/code&gt; signals, so if you &lt;code&gt;CTRL-C&lt;/code&gt; the server, it will exit the process. As we can see from the code here, it will create the &lt;code&gt;tmp/cache&lt;/code&gt;, &lt;code&gt;tmp/pids&lt;/code&gt;, and &lt;code&gt;tmp/sockets&lt;/code&gt; directories. It then enables caching in development if &lt;code&gt;rails server&lt;/code&gt; is called with &lt;code&gt;--dev-caching&lt;/code&gt;. Finally, it calls &lt;code&gt;wrapped_app&lt;/code&gt; which is responsible for creating the Rack app, before creating and assigning an instance of &lt;code&gt;ActiveSupport::Logger&lt;/code&gt;.</source>
          <target state="translated">ここで、Rails初期化の最初の出力が行われます。このメソッドは &lt;code&gt;INT&lt;/code&gt; 信号のトラップを作成するため、 &lt;code&gt;CTRL-C&lt;/code&gt; を押すとプロセスが終了します。ここのコードからわかるように、 &lt;code&gt;tmp/cache&lt;/code&gt; 、 &lt;code&gt;tmp/pids&lt;/code&gt; 、および &lt;code&gt;tmp/sockets&lt;/code&gt; ディレクトリが作成されます。次に、 &lt;code&gt;--dev-caching&lt;/code&gt; を使用して &lt;code&gt;rails server&lt;/code&gt; が呼び出された場合、開発時にキャッシュを有効にします。最後に、 &lt;code&gt;ActiveSupport::Logger&lt;/code&gt; インスタンスを作成して割り当てる前に、Rackアプリの作成を担当する &lt;code&gt;wrapped_app&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="51aa07dbdbd1a837e9dd0eb82a9c9b0310f528b6" translate="yes" xml:space="preserve">
          <source>This is your application's &lt;em&gt;routing file&lt;/em&gt; which holds entries in a special &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;DSL (domain-specific language)&lt;/a&gt; that tells Rails how to connect incoming requests to controllers and actions. Edit this file by adding the line of code &lt;code&gt;root 'welcome#index'&lt;/code&gt;. It should look something like the following:</source>
          <target state="translated">これはアプリケーションの&lt;em&gt;ルーティングファイルで&lt;/em&gt;あり、着信リクエストをコントローラーとアクションに接続する方法をRailsに指示する特別な&lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;DSL（ドメイン固有の言語）&lt;/a&gt;でエントリを保持します。コード &lt;code&gt;root 'welcome#index'&lt;/code&gt; の行を追加して、このファイルを編集します。次のようになります。</target>
        </trans-unit>
        <trans-unit id="381bcafb465435f07a66f05c0e9e2ccccd82a683" translate="yes" xml:space="preserve">
          <source>This jar allows chaining with the signed jar as well, so you can set permanent, signed cookies. Examples:</source>
          <target state="translated">この jar は署名付きの jar とのチェーンも可能なので、署名付きの恒久的なクッキーを設定することができます。例。</target>
        </trans-unit>
        <trans-unit id="5a76e5c72d284c47c6a70bf93313d59ea270d4d1" translate="yes" xml:space="preserve">
          <source>This jar is only meant for writing. You'll read permanent cookies through the regular accessor.</source>
          <target state="translated">このつぼは書くためだけのものです。恒久的なクッキーは通常のアクセプターで読むことになります。</target>
        </trans-unit>
        <trans-unit id="4167658d0f7fa61c58fa5fbeeddc9aa6a579273c" translate="yes" xml:space="preserve">
          <source>This jar requires that you set a suitable secret for the verification on your app's &lt;code&gt;secret_key_base&lt;/code&gt;.</source>
          <target state="translated">このjarでは、アプリの &lt;code&gt;secret_key_base&lt;/code&gt; で検証に適切なシークレットを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="e3915c380b68cd39be6cba69c57aa30807df9192" translate="yes" xml:space="preserve">
          <source>This line mounts the engine at the path &lt;code&gt;/blorgh&lt;/code&gt;, which will make it accessible through the application only at that path.</source>
          <target state="translated">この行は、エンジンをパス &lt;code&gt;/blorgh&lt;/code&gt; にマウントします。これにより、アプリケーションはそのパスでのみアクセスできるようになります。</target>
        </trans-unit>
        <trans-unit id="a92994e4bc3eb46baa1c70d2090e9dac787735bc" translate="yes" xml:space="preserve">
          <source>This line will mount the engine at &lt;code&gt;/blog&lt;/code&gt; in the application. Making it accessible at &lt;code&gt;http://localhost:3000/blog&lt;/code&gt; when the application runs with &lt;code&gt;rails
server&lt;/code&gt;.</source>
          <target state="translated">この行は、アプリケーションの &lt;code&gt;/blog&lt;/code&gt; にエンジンをマウントします。アプリケーションが &lt;code&gt;rails server&lt;/code&gt; 実行されるときに、 &lt;code&gt;http://localhost:3000/blog&lt;/code&gt; でアクセスできるようにします。</target>
        </trans-unit>
        <trans-unit id="4cb62752a647511f462535ccfd7ae3c21187d930" translate="yes" xml:space="preserve">
          <source>This line will require there to be a &lt;code&gt;has_many&lt;/code&gt; association for comments defined on the &lt;code&gt;Blorgh::Article&lt;/code&gt; model, which there isn't right now. To define one, open &lt;code&gt;app/models/blorgh/article.rb&lt;/code&gt; and add this line into the model:</source>
          <target state="translated">この行では、 &lt;code&gt;Blorgh::Article&lt;/code&gt; モデルで定義されたコメントの &lt;code&gt;has_many&lt;/code&gt; 関連付けが必要ですが、現在はありません。これを定義するには、 &lt;code&gt;app/models/blorgh/article.rb&lt;/code&gt; を開き、次の行をモデルに追加します。</target>
        </trans-unit>
        <trans-unit id="8a0d47373f7566fe90459e9b7e76c7dc55eeab3c" translate="yes" xml:space="preserve">
          <source>This link will allow you to bring up the form that lets you create a new article.</source>
          <target state="translated">このリンクをクリックすると、新たな記事を作成できるフォームが表示されるようになります。</target>
        </trans-unit>
        <trans-unit id="4bed1815ee2c5769736f0bbec391caf49e034039" translate="yes" xml:space="preserve">
          <source>This links the folder specified in &lt;code&gt;config.assets.prefix&lt;/code&gt; to &lt;code&gt;shared/assets&lt;/code&gt;. If you already use this shared folder you'll need to write your own deployment command.</source>
          <target state="translated">これにより、 &lt;code&gt;config.assets.prefix&lt;/code&gt; で指定されたフォルダーが &lt;code&gt;shared/assets&lt;/code&gt; にリンクされます。この共有フォルダーを既に使用している場合は、独自の展開コマンドを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="1e5db0cbda6d065beb5a38ffcd5d827702f924ec" translate="yes" xml:space="preserve">
          <source>This list is in particular used to filter ordinary requests, &lt;a href=&quot;../string&quot;&gt;String&lt;/a&gt; goes as first element to quickly short-circuit the common case.</source>
          <target state="translated">このリストは通常​​のリクエストのフィルタリングに特に使用されます&lt;a href=&quot;../string&quot;&gt;。String&lt;/a&gt;は最初の要素として一般的なケースをすばやく短絡します。</target>
        </trans-unit>
        <trans-unit id="03ae548a58e0d2156b84b0334e5e8b7ddc51b2e5" translate="yes" xml:space="preserve">
          <source>This loads all the articles and the associated category and comments for each article.</source>
          <target state="translated">これは、各記事のすべての記事と関連するカテゴリとコメントをロードします。</target>
        </trans-unit>
        <trans-unit id="35b4fe12be07a79f0640d65fa9aa10a39562ad00" translate="yes" xml:space="preserve">
          <source>This loads arbitrary HTML and/or JavaScript from an external source and embeds it as part of the site. This iframe is taken from an actual attack on legitimate Italian sites using the &lt;a href=&quot;http://isc.sans.org/diary.html?storyid=3015&quot;&gt;Mpack attack framework&lt;/a&gt;. Mpack tries to install malicious software through security holes in the web browser - very successfully, 50% of the attacks succeed.</source>
          <target state="translated">これにより、外部ソースから任意のHTMLやJavaScriptが読み込まれ、サイトの一部として埋め込まれます。このiframeは、&lt;a href=&quot;http://isc.sans.org/diary.html?storyid=3015&quot;&gt;Mpack攻撃フレームワーク&lt;/a&gt;を使用した正当なイタリアのサイトに対する実際の攻撃から取得されます。MpackはWebブラウザーのセキュリティホールを介して悪意のあるソフトウェアをインストールしようとします-攻撃の50％は成功しています。</target>
        </trans-unit>
        <trans-unit id="4614d263bb358a560bb30e7d74cf0c9ee4528424" translate="yes" xml:space="preserve">
          <source>This locking mechanism will function inside a single Ruby process. To make it work across all web requests, the recommended approach is to add &lt;code&gt;lock_version&lt;/code&gt; as a hidden field to your form.</source>
          <target state="translated">このロックメカニズムは、単一のRubyプロセス内で機能します。すべてのWebリクエストで機能するようにするには、フォームに非表示フィールドとして &lt;code&gt;lock_version&lt;/code&gt; を追加することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="c3cccb8ea5ac4e4769575827adeaafd779d48d6c" translate="yes" xml:space="preserve">
          <source>This looks up the &lt;code&gt;:record_invalid&lt;/code&gt; message in the Active Record error messages.</source>
          <target state="translated">これは、Active Recordエラーメッセージで &lt;code&gt;:record_invalid&lt;/code&gt; メッセージを検索します。</target>
        </trans-unit>
        <trans-unit id="5641f216bd18ec6a3d662f7d2a71c9f4c87eaa40" translate="yes" xml:space="preserve">
          <source>This maintains the context of the original caller on whether to return a path or full URL, e.g:</source>
          <target state="translated">これは、パスを返すか完全なURLを返すかの元の呼び出し元のコンテキストを保持します。</target>
        </trans-unit>
        <trans-unit id="97595dab8f749316ed2ee9b09cfa05a2cc72c3be" translate="yes" xml:space="preserve">
          <source>This makes &lt;code&gt;app/views/application/&lt;/code&gt; a great place for your shared partials, which can then be rendered in your ERB as such:</source>
          <target state="translated">これにより、 &lt;code&gt;app/views/application/&lt;/code&gt; が共有パーシャルの最適な場所になり、ERBで次のようにレンダリングできます。</target>
        </trans-unit>
        <trans-unit id="895a23f64b056803b5a7798b1ba0ae3b3d462853" translate="yes" xml:space="preserve">
          <source>This makes for clearer readability if you have a large number of variable conditions.</source>
          <target state="translated">これにより、可変条件が多い方が読みやすくなります。</target>
        </trans-unit>
        <trans-unit id="1da73b5103ef8a7a3085798d29399f725987961c" translate="yes" xml:space="preserve">
          <source>This makes sense if you think about it: if you were to call &lt;code&gt;post.tags.delete(Tag.find_by(name: 'food'))&lt;/code&gt; you would want the 'food' tag to be unlinked from the post, rather than for the tag itself to be removed from the database.</source>
          <target state="translated">これは、考えれば意味があります &lt;code&gt;post.tags.delete(Tag.find_by(name: 'food'))&lt;/code&gt; を呼び出す場合、 'food'タグを投稿からではなく、投稿からリンク解除する必要があります。データベースから削除するタグ自体。</target>
        </trans-unit>
        <trans-unit id="e67dcce11dbca0a90d9ca6117b66a33e99f635f9" translate="yes" xml:space="preserve">
          <source>This makes sense in most applications, since you never should require a file in &lt;code&gt;app/models&lt;/code&gt;, for example, and Zeitwerk only uses absolute file names internally.</source>
          <target state="translated">たとえば、 &lt;code&gt;app/models&lt;/code&gt; にファイルを必要とすることは決してないため、これはほとんどのアプリケーションで意味があり、Zeitwerkは内部で絶対ファイル名のみを使用します。</target>
        </trans-unit>
        <trans-unit id="89c6cd8a5ef940d3f1e8ac1a8890a63e3ef1de8b" translate="yes" xml:space="preserve">
          <source>This manifest &lt;code&gt;app/assets/javascripts/application.js&lt;/code&gt;:</source>
          <target state="translated">このマニフェスト &lt;code&gt;app/assets/javascripts/application.js&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="8e807b6eee38015b2030baa284e9a02d6b6f5abf" translate="yes" xml:space="preserve">
          <source>This manual describes common security problems in web applications and how to avoid them with Rails.</source>
          <target state="translated">このマニュアルでは、Webアプリケーションでよくあるセキュリティ上の問題と、Railsで回避する方法を説明しています。</target>
        </trans-unit>
        <trans-unit id="7da615f537586c7fb1d2fa742facf71a9d313d23" translate="yes" xml:space="preserve">
          <source>This marks every template in the directory as a dependency. To find those templates, the wildcard path must be absolutely defined from &lt;code&gt;app/views&lt;/code&gt; or paths otherwise added with &lt;code&gt;prepend_view_path&lt;/code&gt; or &lt;code&gt;append_view_path&lt;/code&gt;. This way the wildcard for &lt;code&gt;app/views/recordings/events&lt;/code&gt; would be &lt;code&gt;recordings/events/*&lt;/code&gt; etc.</source>
          <target state="translated">これにより、ディレクトリ内のすべてのテンプレートが依存関係としてマークされます。これらのテンプレートを見つけるには、ワイルドカードパスを &lt;code&gt;app/views&lt;/code&gt; から完全に定義するか、 &lt;code&gt;prepend_view_path&lt;/code&gt; または &lt;code&gt;append_view_path&lt;/code&gt; を使用して追加したパスを定義する必要があります。このようにワイルドカード &lt;code&gt;app/views/recordings/events&lt;/code&gt; なり &lt;code&gt;recordings/events/*&lt;/code&gt; など</target>
        </trans-unit>
        <trans-unit id="590b29fa10d33f8d8d0328642011a76bdd0db844" translate="yes" xml:space="preserve">
          <source>This marks the &lt;code&gt;:log_entry&lt;/code&gt; parameters hash and any sub-hash of it as permitted and does not check for permitted scalars, anything is accepted. Extreme care should be taken when using &lt;code&gt;permit!&lt;/code&gt;, as it will allow all current and future model attributes to be mass-assigned.</source>
          <target state="translated">これは &lt;code&gt;:log_entry&lt;/code&gt; パラメータのハッシュとそのサブハッシュを許可されているものとしてマークし、許可されているスカラーをチェックせず、何でも受け入れられます。 &lt;code&gt;permit!&lt;/code&gt; を使用するときは、細心の注意を払う必要があります！、現在および将来のすべてのモデル属性を一括で割り当てることができるため。</target>
        </trans-unit>
        <trans-unit id="b3627b7191e06bb1d36c84e175b1119ef41e58cf" translate="yes" xml:space="preserve">
          <source>This matches normal Ruby method inheritance: think of writing an attribute on a subclass as overriding the reader method. However, you need to be aware when using &lt;code&gt;class_attribute&lt;/code&gt; with mutable structures as &lt;code&gt;Array&lt;/code&gt; or &lt;code&gt;Hash&lt;/code&gt;. In such cases, you don't want to do changes in place. Instead use setters:</source>
          <target state="translated">これは、通常のRubyメソッドの継承と一致します。サブクラスに属性を書き込むと、リーダーメソッドをオーバーライドすると考えてください。ただし、可変構造を持つ &lt;code&gt;class_attribute&lt;/code&gt; を &lt;code&gt;Array&lt;/code&gt; または &lt;code&gt;Hash&lt;/code&gt; として使用する場合は注意が必要です。そのような場合は、変更を加えたくないでしょう。代わりにセッターを使用します。</target>
        </trans-unit>
        <trans-unit id="a46526cf145bed88fc68b22717b92b243653a2a4" translate="yes" xml:space="preserve">
          <source>This may appear straightforward:</source>
          <target state="translated">これは簡単なように見えるかもしれません。</target>
        </trans-unit>
        <trans-unit id="56c5e03d9e5fdcadc2292beb97b4f8fe28aba7fe" translate="yes" xml:space="preserve">
          <source>This may be useful if you want to revert engine's migrations before removing it. To revert all migrations from blorgh engine you can run code such as:</source>
          <target state="translated">これは、エンジンを削除する前にエンジンの移行を元に戻したい場合に便利です。blorgh エンジンからのすべての移行を元に戻すには、次のようなコードを実行します。</target>
        </trans-unit>
        <trans-unit id="538ab1c487668c557422fd6fcef02f42a0371322" translate="yes" xml:space="preserve">
          <source>This may improve the asset loading performance of your application. It is also possible the combination of additional connection overhead (DNS, SSL) and the overall browser connection limits may result in this solution being slower. You should be sure to measure your actual performance across targeted browsers both before and after this change.</source>
          <target state="translated">これにより、アプリケーションのアセット読み込みパフォーマンスが向上する可能性があります。また、追加の接続オーバーヘッド(DNS、SSL)とブラウザの全体的な接続制限の組み合わせにより、このソリューションのパフォーマンスが低下する可能性があります。この変更の前後で、対象となるブラウザの実際のパフォーマンスを測定する必要があります。</target>
        </trans-unit>
        <trans-unit id="32d6c438d08b83b4159c8193fff3cd5013e7732c" translate="yes" xml:space="preserve">
          <source>This may work fine in some languages. However, &lt;em&gt;in Ruby ^ and $ match the &lt;strong&gt;line&lt;/strong&gt; beginning and line end&lt;/em&gt;. And thus a URL like this passes the filter without problems:</source>
          <target state="translated">これは一部の言語で正常に動作する可能性があります。しかし、&lt;em&gt;Rubyで^と$一致する&lt;strong&gt;行&lt;/strong&gt;先頭と行末を&lt;/em&gt;。したがって、次のようなURLは問題なくフィルタを通過します。</target>
        </trans-unit>
        <trans-unit id="2b8d7be15b0899eedd7a1e6c90bbd24c8b8b8fb3" translate="yes" xml:space="preserve">
          <source>This means it can be used in association definitions:</source>
          <target state="translated">つまり、アソシエーションの定義で使えるということです。</target>
        </trans-unit>
        <trans-unit id="68b1d1ba6366f943b4492d30914613515d105920" translate="yes" xml:space="preserve">
          <source>This means that all behavior added to Vehicle is available for Car too, as associations, public methods, etc.</source>
          <target state="translated">これは、Vehicleに追加されたすべての動作が、関連付け、公開メソッドなどとしてCarでも利用可能であることを意味しています。</target>
        </trans-unit>
        <trans-unit id="6ef5441a46d6ca86c47c8a760c64e494e2e4803e" translate="yes" xml:space="preserve">
          <source>This means that any field with an error ends up with a 2 pixel red border.</source>
          <target state="translated">これは、エラーのあるフィールドは2ピクセルの赤枠で終わることを意味します。</target>
        </trans-unit>
        <trans-unit id="561c2a96d25e2de371013f24d3520fd51f189c4a" translate="yes" xml:space="preserve">
          <source>This means that if your application used to have its own streaming module, the following code would break in production mode:</source>
          <target state="translated">これは、アプリケーションが独自のストリーミングモジュールを使用していた場合、以下のコードが本番モードでブレークすることを意味します。</target>
        </trans-unit>
        <trans-unit id="5bdd437fb4bc86a7944c33d8eb8128f32dd7274b" translate="yes" xml:space="preserve">
          <source>This means that the cache middleware will store off the &lt;code&gt;Last-Modified&lt;/code&gt; value for a URL in the Rails cache, and add an &lt;code&gt;If-Modified-Since&lt;/code&gt; header to any subsequent inbound requests for the same URL.</source>
          <target state="translated">つまり、キャッシュミドルウェアは、URLの &lt;code&gt;Last-Modified&lt;/code&gt; 値をRailsキャッシュに格納し、同じURLに対する後続の受信リクエストに &lt;code&gt;If-Modified-Since&lt;/code&gt; ヘッダーを追加します。</target>
        </trans-unit>
        <trans-unit id="6dd0a8dc082efe987cb2d25ffe1482a661216e84" translate="yes" xml:space="preserve">
          <source>This means that your functional and integration tests that use</source>
          <target state="translated">を使用する機能テストや統合テストは</target>
        </trans-unit>
        <trans-unit id="0d69c41c544d5ded04374c5ca1ddfe8bb77f877b" translate="yes" xml:space="preserve">
          <source>This means that, if you have &lt;code&gt;yield :title&lt;/code&gt; in your layout and you want to use streaming, you would have to render the whole template (and eventually trigger all queries) before streaming the title and all assets, which kills the purpose of streaming. For this purpose, you can use a helper called &lt;code&gt;provide&lt;/code&gt; that does the same as &lt;code&gt;content_for&lt;/code&gt; but tells the layout to stop searching for other entries and continue rendering.</source>
          <target state="translated">これは、レイアウトに &lt;code&gt;yield :title&lt;/code&gt; があり、ストリーミングを使用したい場合、タイトルとすべてのアセットをストリーミングする前にテンプレート全体をレンダリングする（そして最終的にすべてのクエリをトリガーする）必要があり、ストリーミングの目的が失われることを意味します。この目的のために、 &lt;code&gt;content_for&lt;/code&gt; と同じように機能しますが、他のエントリの検索を停止してレンダリングを続行するようにレイアウトに指示する、 &lt;code&gt;provide&lt;/code&gt; と呼ばれるヘルパーを使用できます。</target>
        </trans-unit>
        <trans-unit id="30566771d7cc580ce3d944941f573990a00f44b5" translate="yes" xml:space="preserve">
          <source>This means that, if your application currently relies on instance variables set in the template to be used in the layout, they won't work once you move to streaming. The proper way to communicate between layout and template, regardless of whether you use streaming or not, is by using &lt;code&gt;content_for&lt;/code&gt;, &lt;code&gt;provide&lt;/code&gt; and &lt;code&gt;yield&lt;/code&gt;.</source>
          <target state="translated">これは、アプリケーションがレイアウトで使用されるテンプレートに設定されたインスタンス変数に現在依存している場合、ストリーミングに移行すると機能しないことを意味します。ストリーミングを使用するかどうかに関係なく、レイアウトとテンプレートの間で通信する適切な方法は、 &lt;code&gt;content_for&lt;/code&gt; 、serve、および &lt;code&gt;yield&lt;/code&gt; を使用 &lt;code&gt;provide&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="64488eace3ccd3e2554936646679ca9ab5fca0f1" translate="yes" xml:space="preserve">
          <source>This means that, on MySQL, you shouldn't execute DDL operations inside a &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;transaction&lt;/a&gt; call that you know might create a savepoint. Otherwise, &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;transaction&lt;/a&gt; will raise exceptions when it tries to release the already-automatically-released savepoints:</source>
          <target state="translated">つまり、MySQLでは、セーブポイントを作成する可能性があることがわかっている&lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;トランザクション&lt;/a&gt;呼び出し内でDDL操作を実行しないでください。そうしないと、&lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;トランザクション&lt;/a&gt;は、すでに自動的に解放されたセーブポイントを解放しようとすると、例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="8b3a3ef7a49d78168be8db72b13fa7dcda38a9ec" translate="yes" xml:space="preserve">
          <source>This means the methods &lt;code&gt;sanitize&lt;/code&gt;, &lt;code&gt;sanitize_css&lt;/code&gt;, &lt;code&gt;strip_tags&lt;/code&gt; and &lt;code&gt;strip_links&lt;/code&gt; are backed by a new implementation.</source>
          <target state="translated">つまり、 &lt;code&gt;sanitize&lt;/code&gt; 、 &lt;code&gt;sanitize_css&lt;/code&gt; 、 &lt;code&gt;strip_tags&lt;/code&gt; 、および &lt;code&gt;strip_links&lt;/code&gt; メソッドは、新しい実装によってサポートされています。</target>
        </trans-unit>
        <trans-unit id="9389cdff0ab192e91d33a4ba04dc29b765723d18" translate="yes" xml:space="preserve">
          <source>This means, that in the &lt;code&gt;:en&lt;/code&gt; locale, the key &lt;em&gt;hello&lt;/em&gt; will map to the &lt;em&gt;Hello world&lt;/em&gt; string. Every string inside Rails is internationalized in this way, see for instance Active Model validation messages in the &lt;a href=&quot;https://github.com/rails/rails/blob/master/activemodel/lib/active_model/locale/en.yml&quot;&gt;&lt;code&gt;activemodel/lib/active_model/locale/en.yml&lt;/code&gt;&lt;/a&gt; file or time and date formats in the &lt;a href=&quot;https://github.com/rails/rails/blob/master/activesupport/lib/active_support/locale/en.yml&quot;&gt;&lt;code&gt;activesupport/lib/active_support/locale/en.yml&lt;/code&gt;&lt;/a&gt; file. You can use YAML or standard Ruby Hashes to store translations in the default (Simple) backend.</source>
          <target state="translated">つまり、 &lt;code&gt;:en&lt;/code&gt; ロケールでは、&lt;em&gt;hello&lt;/em&gt;キーが&lt;em&gt;Hello world&lt;/em&gt;文字列にマッピングされます。Railsの内部のすべての文字列がこのように国際化され、中のインスタンスアクティブなモデルの検証メッセージを参照&lt;a href=&quot;https://github.com/rails/rails/blob/master/activemodel/lib/active_model/locale/en.yml&quot;&gt; &lt;code&gt;activemodel/lib/active_model/locale/en.yml&lt;/code&gt; &lt;/a&gt;内のファイルまたは時刻と日付の形式&lt;a href=&quot;https://github.com/rails/rails/blob/master/activesupport/lib/active_support/locale/en.yml&quot;&gt; &lt;code&gt;activesupport/lib/active_support/locale/en.yml&lt;/code&gt; &lt;/a&gt;ファイル。YAMLまたは標準のRubyハッシュを使用して、デフォルトの（シンプル）バックエンドに翻訳を保存できます。</target>
        </trans-unit>
        <trans-unit id="3a50c2e300e52fe73c69e4357cb7f563efee5bed" translate="yes" xml:space="preserve">
          <source>This method accepts &lt;strong&gt;no&lt;/strong&gt; arguments.</source>
          <target state="translated">このメソッドは引数を受け入れ&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="990a29e49dfbf85694809673700e7e888fa73b40" translate="yes" xml:space="preserve">
          <source>This method accepts a block, which is passed down to &lt;a href=&quot;relation#method-i-create&quot;&gt;create&lt;/a&gt;. The last example above can be alternatively written this way:</source>
          <target state="translated">このメソッドは、&lt;a href=&quot;relation#method-i-create&quot;&gt;createに&lt;/a&gt;渡されるブロックを受け入れます。上記の最後の例は、次のように書くこともできます。</target>
        </trans-unit>
        <trans-unit id="5e3a23d8239c4d27ea6987fe5225081e48e27730" translate="yes" xml:space="preserve">
          <source>This method accepts any of the following day symbols: :monday, :tuesday, :wednesday, :thursday, :friday, :saturday, :sunday</source>
          <target state="translated">このメソッドは、以下の曜日記号のいずれかを受け付けます::monday,:tuesday,:wednesday,:thursday,:friday,:saturday,:sunday。</target>
        </trans-unit>
        <trans-unit id="f0396aeacdc2ea90763adb8e1466a2c5c7182ffa" translate="yes" xml:space="preserve">
          <source>This method accepts any of the following:</source>
          <target state="translated">このメソッドは、以下のいずれかを受け付けます。</target>
        </trans-unit>
        <trans-unit id="6f63e92a7504413095ca51e07b7c2d9a816841aa" translate="yes" xml:space="preserve">
          <source>This method accepts both a single key and an array of keys.</source>
          <target state="translated">このメソッドは、単一のキーとキーの配列の両方を受け付けます。</target>
        </trans-unit>
        <trans-unit id="0a9e49d197244769492bd5dd28fcd7d2154b0757" translate="yes" xml:space="preserve">
          <source>This method accepts three options:</source>
          <target state="translated">このメソッドは3つのオプションを受け付けます。</target>
        </trans-unit>
        <trans-unit id="49398d4997d7146a74d4b5b11f9cd1a91e280bf1" translate="yes" xml:space="preserve">
          <source>This method also accepts a block, which will return the current time back to its original state at the end of the block:</source>
          <target state="translated">このメソッドはブロックも受け付けており、ブロックの最後に現在の時刻を元の状態に戻します。</target>
        </trans-unit>
        <trans-unit id="9113793c4f80a41633eb596a1bf294057e3b6002" translate="yes" xml:space="preserve">
          <source>This method also accepts a block. All queries inside the block will not use the previously set scopes.</source>
          <target state="translated">このメソッドは、ブロックも受け付けます。ブロック内のすべてのクエリは、先に設定したスコープを使用しません。</target>
        </trans-unit>
        <trans-unit id="2a44ede58b45f5b66d134c4ffd92e4f37c5f79ae" translate="yes" xml:space="preserve">
          <source>This method also supports filtering. If the &lt;code&gt;:only&lt;/code&gt; option is specified, then only the listed job(s) will be performed.</source>
          <target state="translated">このメソッドはフィルタリングもサポートします。 &lt;code&gt;:only&lt;/code&gt; オプションが指定されている場合、リストされたジョブのみが実行されます。</target>
        </trans-unit>
        <trans-unit id="957d919bd7775b422cbfd87a80daa9765e349b81" translate="yes" xml:space="preserve">
          <source>This method also takes a block, expected to return a string:</source>
          <target state="translated">このメソッドもブロックを取り、文字列を返すことが期待されます。</target>
        </trans-unit>
        <trans-unit id="c3f998554191e12f3faa53f79526b60263d4b5de" translate="yes" xml:space="preserve">
          <source>This method also takes a block:</source>
          <target state="translated">この方法もブロックを取ります。</target>
        </trans-unit>
        <trans-unit id="9bb6ebbd17dbb44aadc1d74a24b29c946e864bbe" translate="yes" xml:space="preserve">
          <source>This method always returns a record, but if creation was attempted and failed due to validation errors it won't be persisted, you get what &lt;a href=&quot;relation#method-i-create&quot;&gt;create&lt;/a&gt; returns in such situation.</source>
          <target state="translated">このメソッドは常にレコードを返しますが、検証エラーが原因で作成が失敗した場合、永続化されない場合、そのような状況で&lt;a href=&quot;relation#method-i-create&quot;&gt;create&lt;/a&gt;が返す結果を取得します。</target>
        </trans-unit>
        <trans-unit id="9e5b0b8d509f4f4bdf772cef122c5d6c897f037c" translate="yes" xml:space="preserve">
          <source>This method assumes an &lt;code&gt;ApplicationController&lt;/code&gt; exists, and it extends &lt;code&gt;ActionController::Base&lt;/code&gt;</source>
          <target state="translated">このメソッドは、 &lt;code&gt;ApplicationController&lt;/code&gt; が存在し、 &lt;code&gt;ActionController::Base&lt;/code&gt; 拡張することを前提としています。</target>
        </trans-unit>
        <trans-unit id="6ef88032bc400f9e0ada77d7fd319a7975c9a6d7" translate="yes" xml:space="preserve">
          <source>This method can also take a block:</source>
          <target state="translated">この方法は、ブロックを取ることもできます。</target>
        </trans-unit>
        <trans-unit id="89f92c11f8324dc471aa79968e8746f7a5e1cd59" translate="yes" xml:space="preserve">
          <source>This method can be passed attribute names and an optional time argument. If attribute names are passed, they are updated along with updated_at/on attributes. If no time argument is passed, the current time is used as default.</source>
          <target state="translated">このメソッドには、属性名とオプションの時間引数を渡すことができます。属性名が渡された場合、属性はupdated_at/on属性と共に更新されます。time 引数が渡されない場合は、現在の時刻がデフォルトとして使用されます。</target>
        </trans-unit>
        <trans-unit id="793c125ffa75c4e65b2043f2e0d8283612bd8dc8" translate="yes" xml:space="preserve">
          <source>This method enables you to use the flash as a central messaging system in your app. When you need to pass an object to the next action, you use the standard flash assign (&lt;code&gt;[]=&lt;/code&gt;). When you need to pass an object to the current action, you use &lt;code&gt;now&lt;/code&gt;, and your object will vanish when the current action is done.</source>
          <target state="translated">この方法では、フラッシュをアプリの中央メッセージングシステムとして使用できます。オブジェクトを次のアクションに渡す必要がある場合は、標準のフラッシュ割り当て（ &lt;code&gt;[]=&lt;/code&gt; ）を使用します。オブジェクトを現在のアクションに渡す必要がある場合は、 &lt;code&gt;now&lt;/code&gt; を使用します。現在のアクションが完了すると、オブジェクトは消えます。</target>
        </trans-unit>
        <trans-unit id="dcd8de23f881e1252dc585b3ca49217da91ca185" translate="yes" xml:space="preserve">
          <source>This method escapes whatever is needed, both for the key and the value:</source>
          <target state="translated">このメソッドは、キーと値の両方で必要なものをエスケープします。</target>
        </trans-unit>
        <trans-unit id="8a09358115f3d10c59be2557dc4838d6a74ffcdd" translate="yes" xml:space="preserve">
          <source>This method exists to avoid the expensive primary_key check internally, without breaking compatibility with the &lt;a href=&quot;read#method-i-read_attribute&quot;&gt;#read_attribute&lt;/a&gt; API</source>
          <target state="translated">このメソッドは、&lt;a href=&quot;read#method-i-read_attribute&quot;&gt;＃read_attribute&lt;/a&gt; API との互換性を損なうことなく、内部で負荷の高いprimary_keyチェックを回避するために存在します</target>
        </trans-unit>
        <trans-unit id="2ce4a391f95da2c1e472e9aa40a0b8600b91a886" translate="yes" xml:space="preserve">
          <source>This method finds the record by its primary key (which could be assigned manually) and modifies the receiver in-place:</source>
          <target state="translated">このメソッドは、主キー (手動で割り当てられる可能性がある)でレコードを検索し、受信機をその場で修正します。</target>
        </trans-unit>
        <trans-unit id="17fdcafd122d296c493d784129a615dd86e51a21" translate="yes" xml:space="preserve">
          <source>This method first computes the destination date passing &lt;code&gt;:years&lt;/code&gt;, &lt;code&gt;:months&lt;/code&gt;, &lt;code&gt;:weeks&lt;/code&gt;, and &lt;code&gt;:days&lt;/code&gt; to &lt;code&gt;Date#advance&lt;/code&gt; documented above. After that, it adjusts the time calling &lt;code&gt;since&lt;/code&gt; with the number of seconds to advance. This order is relevant, a different ordering would give different datetimes in some edge-cases. The example in &lt;code&gt;Date#advance&lt;/code&gt; applies, and we can extend it to show order relevance related to the time bits.</source>
          <target state="translated">このメソッドは最初に、上記で説明した &lt;code&gt;Date#advance&lt;/code&gt; に &lt;code&gt;:years&lt;/code&gt; 、 &lt;code&gt;:months&lt;/code&gt; 、 &lt;code&gt;:weeks&lt;/code&gt; 、および &lt;code&gt;:days&lt;/code&gt; を渡して宛先日付を計算します。その後、それは時間の呼び出しを調整 &lt;code&gt;since&lt;/code&gt; 、事前に秒数を持ちます。この順序は適切であり、順序が異なると、一部のエッジケースで異なる日時が与えられます。 &lt;code&gt;Date#advance&lt;/code&gt; の例が適用されます。これを拡張して、時間ビットに関連する順序の関連性を表示できます。</target>
        </trans-unit>
        <trans-unit id="b7b9ab33ec418700f15d67ca9b49e97cbf40c15a" translate="yes" xml:space="preserve">
          <source>This method has the same semantics of &lt;code&gt;update&lt;/code&gt;, except it does not modify the receiver but rather returns a new hash with indifferent access with the result of the merge.</source>
          <target state="translated">このメソッドは &lt;code&gt;update&lt;/code&gt; と同じセマンティクスを持っていますが、レシーバーを変更せず、マージの結果とは関係なくアクセスできる新しいハッシュを返します。</target>
        </trans-unit>
        <trans-unit id="ea9df9a3e2a988d68e7ebf054d8a27879d6d1a07" translate="yes" xml:space="preserve">
          <source>This method is I18n aware, so you can set up custom approximations for a locale. This can be useful, for example, to transliterate German's &amp;ldquo;&amp;uuml;&amp;rdquo; and &amp;ldquo;&amp;ouml;&amp;rdquo; to &amp;ldquo;ue&amp;rdquo; and &amp;ldquo;oe&amp;rdquo;, or to add support for transliterating Russian to ASCII.</source>
          <target state="translated">このメソッドはI18n対応であるため、ロケールのカスタム近似を設定できます。これは、たとえば、ドイツ語の「&amp;uuml;」と「&amp;ouml;」を「ue」と「oe」に音訳する場合や、ロシア語をASCIIに音訳するサポートを追加する場合に便利です。</target>
        </trans-unit>
        <trans-unit id="94ef3129cb2c2ade866e1ef7b0770f8723786088" translate="yes" xml:space="preserve">
          <source>This method is a shortcut to all default validators and any custom validator classes ending in 'Validator'. Note that Rails default validators can be overridden inside specific classes by creating custom validator classes in their place such as PresenceValidator.</source>
          <target state="translated">このメソッドはすべてのデフォルトバリデータと「Validator」で終わるカスタムバリデータクラスへのショートカットです。Railsのデフォルトバリデータは、PresenceValidatorのようなカスタムバリデータクラスを作成することで、特定のクラスの内部でオーバーライドできることに注意してください。</target>
        </trans-unit>
        <trans-unit id="358d1b206c0fab50e9c776b6e23c2da20d6293e5" translate="yes" xml:space="preserve">
          <source>This method is aliased as &lt;code&gt;collection.concat&lt;/code&gt; and &lt;code&gt;collection.push&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;collection.concat&lt;/code&gt; および &lt;code&gt;collection.push&lt;/code&gt; としてエイリアスされています。</target>
        </trans-unit>
        <trans-unit id="b69e332abfa784b22407063fd6f9a3b21fe950b7" translate="yes" xml:space="preserve">
          <source>This method is aliased to &lt;code&gt;to_s&lt;/code&gt;.</source>
          <target state="translated">このメソッドは &lt;code&gt;to_s&lt;/code&gt; のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="79238276df741c9642608968ce900140be9fab9a" translate="yes" xml:space="preserve">
          <source>This method is also aliased as &lt;code&gt;getutc&lt;/code&gt;.</source>
          <target state="translated">このメソッドは &lt;code&gt;getutc&lt;/code&gt; とも呼ばれます。</target>
        </trans-unit>
        <trans-unit id="fd68b2b34136cbfd2ac2e50ac3c1ec2c81876180" translate="yes" xml:space="preserve">
          <source>This method is also aliased as &lt;code&gt;to_param&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;to_param&lt;/code&gt; としてもエイリアスされます。</target>
        </trans-unit>
        <trans-unit id="14e442034aa8b8782fea4c4a1a220d5805afb6dc" translate="yes" xml:space="preserve">
          <source>This method is automatically called for a blob when it's attached for the first time. You can call it to analyze a blob again (e.g. if you add a new analyzer or modify an existing one).</source>
          <target state="translated">このメソッドは、ブロブが初めてアタッチされたときに自動的に呼び出されます。このメソッドを呼び出すことで、ブロブを再度分析することができます(新しい分析器を追加したり、既存の分析器を修正したりする場合など)。</target>
        </trans-unit>
        <trans-unit id="5a31c0a8e8d85adc0dd81c1e9ce90b3ead125291" translate="yes" xml:space="preserve">
          <source>This method is called after subscription has been added to the connection and confirms or rejects the subscription.</source>
          <target state="translated">このメソッドは、接続にサブスクリプションが追加され、サブスクリプションを確認または拒否した後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="02c095641d1fcbf07c9da55ce3f958f9ef743e66" translate="yes" xml:space="preserve">
          <source>This method is defined to be able to write</source>
          <target state="translated">このメソッドは</target>
        </trans-unit>
        <trans-unit id="5a43b9eab0b21223ab37dc3e74cfae1ad17ddf25" translate="yes" xml:space="preserve">
          <source>This method is instrumented as &amp;ldquo;!render_template.action_view&amp;rdquo;. Notice that we use a bang in this instrumentation because you don't want to consume this in production. This is only slow if it's being listened to.</source>
          <target state="translated">このメソッドは、「！render_template.action_view」として装備されています。これを本番環境で使用したくないため、このインストゥルメンテーションで強打を使用していることに注意してください。これは聞いている場合にのみ遅くなります。</target>
        </trans-unit>
        <trans-unit id="2aa4291b05902cdaee1873fd2c5e3adfb853f3b9" translate="yes" xml:space="preserve">
          <source>This method is invoked when a log event occurs</source>
          <target state="translated">このメソッドは、ログイベントが発生したときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="cec76b3d0537cb8421990ce1470964e0b635ddbf" translate="yes" xml:space="preserve">
          <source>This method is not tolerant to non-existing dates, if the change is invalid &lt;code&gt;ArgumentError&lt;/code&gt; is raised:</source>
          <target state="translated">変更が無効な場合、このメソッドは存在しない日付を許容しません &lt;code&gt;ArgumentError&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="4893b4cc7c9973033ec43f501db42e9692a06713" translate="yes" xml:space="preserve">
          <source>This method is only useful &lt;em&gt;after&lt;/em&gt; validations have been run, because it only inspects the errors collection and does not trigger validations itself. It's different from the &lt;code&gt;ActiveRecord::Base#invalid?&lt;/code&gt; method explained above because it doesn't verify the validity of the object as a whole. It only checks to see whether there are errors found on an individual attribute of the object.</source>
          <target state="translated">このメソッドは、エラーコレクションのみを検査し、検証自体をトリガーしないため、検証が実行された&lt;em&gt;後に&lt;/em&gt;のみ役立ちます。 &lt;code&gt;ActiveRecord::Base#invalid?&lt;/code&gt; は異なりますか？上記で説明したメソッドは、オブジェクト全体の有効性を検証しないためです。オブジェクトの個々の属性にエラーがあるかどうかを確認するだけです。</target>
        </trans-unit>
        <trans-unit id="e3905cdb6dc11d3e35b1d1d62c9a39b48c35d4cb" translate="yes" xml:space="preserve">
          <source>This method is opposite of register method.</source>
          <target state="translated">このメソッドは、レジスタメソッドとは逆になります。</target>
        </trans-unit>
        <trans-unit id="9758645bd22f929081aa8a8b6742e9cd715050cb" translate="yes" xml:space="preserve">
          <source>This method is rarely used directly. Use &lt;code&gt;#get&lt;/code&gt;, &lt;code&gt;#post&lt;/code&gt;, or other standard HTTP methods in integration tests. &lt;code&gt;#process&lt;/code&gt; is only required when using a request method that doesn't have a method defined in the integration tests.</source>
          <target state="translated">このメソッドが直接使用されることはほとんどありません。使用 &lt;code&gt;#get&lt;/code&gt; 、 &lt;code&gt;#post&lt;/code&gt; 、または統合テストで他の標準のHTTPメソッド。 &lt;code&gt;#process&lt;/code&gt; は、統合テストで定義されたメソッドを持たないリクエストメソッドを使用する場合にのみ必要です。</target>
        </trans-unit>
        <trans-unit id="2925b9d90887a1a5bd94ae6d12e2180383068708" translate="yes" xml:space="preserve">
          <source>This method is responsible for properly setting the encoding of the source. Until this point, we assume that the source is BINARY data. If no additional information is supplied, we assume the encoding is the same as &lt;code&gt;Encoding.default_external&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、ソースのエンコーディングを適切に設定する責任があります。この時点まで、ソースはBINARYデータであると想定しています。追加情報が提供されない場合、エンコーディングは &lt;code&gt;Encoding.default_external&lt;/code&gt; と同じであると見なされます。</target>
        </trans-unit>
        <trans-unit id="7edbbc29ebb04a4ee14cd5702cebcf9de1ca9fe4" translate="yes" xml:space="preserve">
          <source>This method is similar in purpose to &lt;code&gt;Kernel#Array&lt;/code&gt;, but there are some differences:</source>
          <target state="translated">このメソッドの目的は &lt;code&gt;Kernel#Array&lt;/code&gt; と似ていますが、いくつかの違いがあります。</target>
        </trans-unit>
        <trans-unit id="72a06f3d0e49559b9fa88d5e815e94c47a978d18" translate="yes" xml:space="preserve">
          <source>This method is similar to Time#localtime, except that it uses &lt;code&gt;Time.zone&lt;/code&gt; as the local zone instead of the operating system's time zone.</source>
          <target state="translated">このメソッドは、オペレーティングシステムのタイムゾーンの代わりに &lt;code&gt;Time.zone&lt;/code&gt; をローカルゾーンとして使用することを除いて、Time＃localtimeに似ています。</target>
        </trans-unit>
        <trans-unit id="d21667b3d4c3cdf9d82503a64c46404c8cd871f0" translate="yes" xml:space="preserve">
          <source>This method is similar to except, but unlike except, it persists across merges:</source>
          <target state="translated">このメソッドは except と似ていますが、 except とは異なり、マージの間も持続します。</target>
        </trans-unit>
        <trans-unit id="a0a9b26612f00bffa6781a41652fa600f58d81fa" translate="yes" xml:space="preserve">
          <source>This method is the opposite of add method.</source>
          <target state="translated">この方法は、addメソッドとは逆の方法です。</target>
        </trans-unit>
        <trans-unit id="7238d1b830654cc06bf54329d31471832093ced2" translate="yes" xml:space="preserve">
          <source>This method is used primarily for maintaining counter_cache columns that are used to store aggregate values. For example, a &lt;code&gt;DiscussionBoard&lt;/code&gt; may cache posts_count and comments_count to avoid running an SQL query to calculate the number of posts and comments there are, each time it is displayed.</source>
          <target state="translated">このメソッドは主に、集計値を格納するために使用されるcounter_cache列を維持するために使用されます。たとえば、 &lt;code&gt;DiscussionBoard&lt;/code&gt; は、posts_countとcomments_countをキャッシュして、表示されるたびにSQLクエリを実行して投稿とコメントの数を計算しないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="0bbef1c2971e3e9c707a8b197b8e42d7aebd61c4" translate="yes" xml:space="preserve">
          <source>This method is used to define validations that cannot be corrected by end users and are considered exceptional. So each validator defined with bang or &lt;code&gt;:strict&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt; will always raise &lt;code&gt;ActiveModel::StrictValidationFailed&lt;/code&gt; instead of adding error when validation fails. See &lt;code&gt;validates&lt;/code&gt; for more information about the validation itself.</source>
          <target state="translated">このメソッドは、エンドユーザーが修正できず、例外的と見なされる検証を定義するために使用されます。そのため、bangまたは &lt;code&gt;:strict&lt;/code&gt; オプションを &lt;code&gt;true&lt;/code&gt; に設定して定義された各バリデーターは、検証が失敗したときにエラーを追加する代わりに、常に &lt;code&gt;ActiveModel::StrictValidationFailed&lt;/code&gt; を発生させます。検証自体の詳細については、 &lt;code&gt;validates&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="91c8abc879f54a8f19771378cab83ca529c48d9e" translate="yes" xml:space="preserve">
          <source>This method is useful in after callbacks to determine if an attribute was changed during the save that triggered the callbacks to run. It can be invoked as &lt;code&gt;saved_change_to_name?&lt;/code&gt; instead of &lt;code&gt;saved_change_to_attribute?(&quot;name&quot;)&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、コールバックの後で、コールバックの実行をトリガーした保存中に属性が変更されたかどうかを判断するのに役立ちます。 &lt;code&gt;saved_change_to_name?&lt;/code&gt; として呼び出すことができますか？ &lt;code&gt;saved_change_to_attribute?(&quot;name&quot;)&lt;/code&gt; の代わりに。</target>
        </trans-unit>
        <trans-unit id="efd57c805dc453ca877d929ae0e168a6ce0ca705" translate="yes" xml:space="preserve">
          <source>This method is useful in after callbacks to get the original value of an attribute before the save that triggered the callbacks to run. It can be invoked as &lt;code&gt;name_before_last_save&lt;/code&gt; instead of &lt;code&gt;attribute_before_last_save(&quot;name&quot;)&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、コールバックの実行をトリガーする保存の前に属性の元の値を取得するために、コールバックの後に役立ちます。 &lt;code&gt;attribute_before_last_save(&quot;name&quot;)&lt;/code&gt; の代わりに &lt;code&gt;name_before_last_save&lt;/code&gt; として呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="792859b798f7ac4d47b4904f6506da08852d09c0" translate="yes" xml:space="preserve">
          <source>This method is useful in after callbacks, to see the change in an attribute during the save that triggered the callbacks to run. It can be invoked as &lt;code&gt;saved_change_to_name&lt;/code&gt; instead of &lt;code&gt;saved_change_to_attribute(&quot;name&quot;)&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、コールバックの後、コールバックの実行をトリガーした保存中の属性の変更を確認するのに役立ちます。それは次のように呼び出すことができ &lt;code&gt;saved_change_to_name&lt;/code&gt; 代わりの &lt;code&gt;saved_change_to_attribute(&quot;name&quot;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="62be837069cecd976797ac900bad3f7ea532bad6" translate="yes" xml:space="preserve">
          <source>This method is useful in validations and before callbacks to determine if the next call to &lt;code&gt;save&lt;/code&gt; will change a particular attribute. It can be invoked as &lt;code&gt;will_save_change_to_name?&lt;/code&gt; instead of &lt;code&gt;will_save_change_to_attribute(&quot;name&quot;)&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、検証およびコールバック前に、次の &lt;code&gt;save&lt;/code&gt; 呼び出しで特定の属性が変更されるかどうかを判断するのに役立ちます。 &lt;code&gt;will_save_change_to_name?&lt;/code&gt; として呼び出すことができますか？ &lt;code&gt;will_save_change_to_attribute(&quot;name&quot;)&lt;/code&gt; の代わりに。</target>
        </trans-unit>
        <trans-unit id="6e6c4c33319b7ee32eafeffc5d8cc5dfd0c1fed3" translate="yes" xml:space="preserve">
          <source>This method is useful in validations and before callbacks, to see the change to an attribute that will occur when the record is saved. It can be invoked as &lt;code&gt;name_change_to_be_saved&lt;/code&gt; instead of &lt;code&gt;attribute_change_to_be_saved(&quot;name&quot;)&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、検証時およびコールバック前に、レコードの保存時に発生する属性の変更を確認するのに役立ちます。 &lt;code&gt;attribute_change_to_be_saved(&quot;name&quot;)&lt;/code&gt; ではなく、 &lt;code&gt;name_change_to_be_saved&lt;/code&gt; として呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="0acb369e5856d0cd0383b35bb76708d9803df543" translate="yes" xml:space="preserve">
          <source>This method is useful in validations and before callbacks, to see the original value of an attribute prior to any changes about to be saved. It can be invoked as &lt;code&gt;name_in_database&lt;/code&gt; instead of &lt;code&gt;attribute_in_database(&quot;name&quot;)&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、検証およびコールバックの前に役立ち、変更が保存される前の属性の元の値を確認できます。 &lt;code&gt;attribute_in_database(&quot;name&quot;)&lt;/code&gt; の代わりに &lt;code&gt;name_in_database&lt;/code&gt; として呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="5e3d421d82d6185e6b9c626db00d4c6e0d309543" translate="yes" xml:space="preserve">
          <source>This method may be useful for example to easily accept both symbols and strings as options. For instance &lt;code&gt;ActionController::UrlRewriter&lt;/code&gt; defines</source>
          <target state="translated">この方法は、シンボルと文字列の両方をオプションとして簡単に受け入れる場合などに役立ちます。たとえば &lt;code&gt;ActionController::UrlRewriter&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="914277e3adb518f953eeeb1cf1f83a255a2821da" translate="yes" xml:space="preserve">
          <source>This method may be useful for example to easily accept both symbols and strings as options. For instance &lt;code&gt;ActionView::Helpers::FormHelper&lt;/code&gt; defines:</source>
          <target state="translated">この方法は、シンボルと文字列の両方をオプションとして簡単に受け入れる場合などに役立ちます。たとえば、 &lt;code&gt;ActionView::Helpers::FormHelper&lt;/code&gt; は以下を定義します。</target>
        </trans-unit>
        <trans-unit id="0c8ee578ca500f6179c32f3766aecedf81a5095f" translate="yes" xml:space="preserve">
          <source>This method must also receive a block that will be called once a path changes. The array of files and list of directories cannot be changed after &lt;a href=&quot;fileupdatechecker&quot;&gt;FileUpdateChecker&lt;/a&gt; has been initialized.</source>
          <target state="translated">このメソッドは、パスが変更されたときに呼び出されるブロックも受け取る必要があります。&lt;a href=&quot;fileupdatechecker&quot;&gt;FileUpdateChecker&lt;/a&gt;を初期化した後は、ファイルの配列とディレクトリのリストを変更できません。</target>
        </trans-unit>
        <trans-unit id="c6b3478ea308cc5ecea6556ec6aafbeaa137586e" translate="yes" xml:space="preserve">
          <source>This method needs to create a temporary file. By default it will create it in the same directory as the destination file. If you don't like this behavior you can provide a different directory but it must be on the same physical filesystem as the file you're trying to write.</source>
          <target state="translated">このメソッドは一時ファイルを作成する必要があります。デフォルトでは、書き出し先のファイルと同じディレクトリに作成されます。この動作が気に入らない場合は、別のディレクトリを指定することもできますが、書き込もうとしているファイルと同じ物理ファイルシステム上になければなりません。</target>
        </trans-unit>
        <trans-unit id="be96305885f21a6dcaea96d5e6cdbb478641b0dc" translate="yes" xml:space="preserve">
          <source>This method only works for connections that have been obtained through &lt;a href=&quot;connectionpool#method-i-connection&quot;&gt;connection&lt;/a&gt; or &lt;a href=&quot;connectionpool#method-i-with_connection&quot;&gt;with_connection&lt;/a&gt; methods, connections obtained through &lt;a href=&quot;connectionpool#method-i-checkout&quot;&gt;checkout&lt;/a&gt; will not be automatically released.</source>
          <target state="translated">このメソッドは、&lt;a href=&quot;connectionpool#method-i-connection&quot;&gt;connection&lt;/a&gt;または&lt;a href=&quot;connectionpool#method-i-with_connection&quot;&gt;with_connection&lt;/a&gt;メソッドを介して取得された接続に対してのみ機能します。&lt;a href=&quot;connectionpool#method-i-checkout&quot;&gt;チェックアウト&lt;/a&gt;を介して取得された接続は自動的に解放されません。</target>
        </trans-unit>
        <trans-unit id="fecd57ae6ea471b95961d7bbf50092f6f908aecd" translate="yes" xml:space="preserve">
          <source>This method only works for connections that have been obtained through &lt;a href=&quot;connectionpool#method-i-connection&quot;&gt;connection&lt;/a&gt; or &lt;a href=&quot;connectionpool#method-i-with_connection&quot;&gt;with_connection&lt;/a&gt; methods. Connections obtained through &lt;a href=&quot;connectionpool#method-i-checkout&quot;&gt;checkout&lt;/a&gt; will not be detected by &lt;a href=&quot;connectionpool#method-i-active_connection-3F&quot;&gt;active_connection?&lt;/a&gt;</source>
          <target state="translated">このメソッドは、&lt;a href=&quot;connectionpool#method-i-connection&quot;&gt;connection&lt;/a&gt;または&lt;a href=&quot;connectionpool#method-i-with_connection&quot;&gt;with_connection&lt;/a&gt;メソッドを介して取得された接続に対してのみ機能します。経て得られた接続&lt;a href=&quot;connectionpool#method-i-checkout&quot;&gt;のチェックアウトは、&lt;/a&gt;によって検出されることはありません&lt;a href=&quot;connectionpool#method-i-active_connection-3F&quot;&gt;active_connection？&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="50465cfe742f7b1908b49c2d57638b135b0b3f17" translate="yes" xml:space="preserve">
          <source>This method outputs without escaping a string. Since escaping tags is now default, this can be used when you don't want Rails to automatically escape tags. This is not recommended if the data is coming from the user's input.</source>
          <target state="translated">このメソッドは文字列をエスケープせずに出力します。タグのエスケープがデフォルトになったので、Railsにタグを自動的にエスケープさせたくない場合に使えます。ユーザーの入力からデータが来ている場合にはお勧めできません。</target>
        </trans-unit>
        <trans-unit id="d5af0d23d9a237d3c706e177116e7d324b2e140b" translate="yes" xml:space="preserve">
          <source>This method raises &lt;a href=&quot;../unpreviewableerror&quot;&gt;ActiveStorage::UnpreviewableError&lt;/a&gt; if no previewer accepts the receiving blob. To determine whether a blob is accepted by any previewer, call &lt;a href=&quot;representable#method-i-previewable-3F&quot;&gt;#previewable?&lt;/a&gt;.</source>
          <target state="translated">プレビューアが受信BLOBを受け入れない場合、このメソッドは&lt;a href=&quot;../unpreviewableerror&quot;&gt;ActiveStorage :: UnpreviewableErrorを発生&lt;/a&gt;させます。プレビューアがblobを受け入れるかどうかを判断するには、&lt;a href=&quot;representable#method-i-previewable-3F&quot;&gt;＃previewable？&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="638a44b23179629e0cfc048a71803fa8a07a0438" translate="yes" xml:space="preserve">
          <source>This method raises an &lt;a href=&quot;activerecorderror&quot;&gt;ActiveRecord::ActiveRecordError&lt;/a&gt; if the attribute is marked as readonly.</source>
          <target state="translated">属性が読み取り専用としてマークされている場合、このメソッドは&lt;a href=&quot;activerecorderror&quot;&gt;ActiveRecord :: ActiveRecordError&lt;/a&gt;を発生させます。</target>
        </trans-unit>
        <trans-unit id="8705c381acee7571ff04baf5c4b3125b142419cb" translate="yes" xml:space="preserve">
          <source>This method raises an &lt;a href=&quot;activerecorderror&quot;&gt;ActiveRecord::ActiveRecordError&lt;/a&gt; when called on new objects, or when at least one of the attributes is marked as readonly.</source>
          <target state="translated">このメソッドは、新しいオブジェクトで呼び出されたとき、または属性の少なくとも1つが読み取り専用としてマークされたときに&lt;a href=&quot;activerecorderror&quot;&gt;ActiveRecord :: ActiveRecordErrorを&lt;/a&gt;発生させます。</target>
        </trans-unit>
        <trans-unit id="ebc904cc99f753720f7081ebdbc9072e056bb10d" translate="yes" xml:space="preserve">
          <source>This method receives an arbitrary number of action names, and an optional hash of options as last argument. With the call to &lt;code&gt;extract_options!&lt;/code&gt; you obtain the options hash and remove it from &lt;code&gt;actions&lt;/code&gt; in a simple and explicit way.</source>
          <target state="translated">このメソッドは、任意の数のアクション名と、オプションのオプションのハッシュを最後の引数として受け取ります。 &lt;code&gt;extract_options!&lt;/code&gt; 呼び出して！オプションのハッシュを取得し、それを &lt;code&gt;actions&lt;/code&gt; から簡単かつ明示的な方法で削除します。</target>
        </trans-unit>
        <trans-unit id="4f7c9527a5e9a35217b473bfb238234e6c26c30e" translate="yes" xml:space="preserve">
          <source>This method removes all scoping and will do a normal query on the table.</source>
          <target state="translated">このメソッドは、すべてのスコープを削除し、テーブルに対して通常のクエリを実行します。</target>
        </trans-unit>
        <trans-unit id="0279bc230bf5f453a0febf1afd12ffda02315973" translate="yes" xml:space="preserve">
          <source>This method returns &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;self&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="c158386794267bd016b4cbb7aa01d24445ea74c4" translate="yes" xml:space="preserve">
          <source>This method returns an HTML safe string similar to what &lt;code&gt;Array#join&lt;/code&gt; would return. The array is flattened, and all items, including the supplied separator, are HTML escaped unless they are HTML safe, and the returned string is marked as HTML safe.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;Array#join&lt;/code&gt; が返すのと同様のHTMLセーフ文字列を返します。配列はフラット化され、提供されたセパレーターを含むすべてのアイテムはHTMLセーフでない限りHTMLエスケープされ、返される文字列はHTMLセーフとしてマークされます。</target>
        </trans-unit>
        <trans-unit id="e1edac73577cc4c6d542d34d226b8093205975ca" translate="yes" xml:space="preserve">
          <source>This method returns the response status, after performing the request. Furthermore, if this method was called from an &lt;a href=&quot;../integrationtest&quot;&gt;ActionDispatch::IntegrationTest&lt;/a&gt; object, then that object's &lt;code&gt;@response&lt;/code&gt; instance variable will point to a &lt;a href=&quot;../response&quot;&gt;Response&lt;/a&gt; object which one can use to inspect the details of the response.</source>
          <target state="translated">このメソッドは、要求の実行後に応答ステータスを返します。さらに、このメソッドが&lt;a href=&quot;../integrationtest&quot;&gt;ActionDispatch :: IntegrationTest&lt;/a&gt;オブジェクトから呼び出された場合、そのオブジェクトの &lt;code&gt;@response&lt;/code&gt; インスタンス変数は、&lt;a href=&quot;../response&quot;&gt;応答&lt;/a&gt;の詳細を検査するために使用できるResponseオブジェクトを指します。</target>
        </trans-unit>
        <trans-unit id="c0b09fc842518a232ab80cd1e5c59dd846aa511a" translate="yes" xml:space="preserve">
          <source>This method sets a weak ETag validator on the response so browsers and proxies may cache the response, keyed on the ETag. On subsequent requests, the If-None-Match header is set to the cached ETag. If it matches the current ETag, we can return a 304 Not Modified response with no body, letting the browser or proxy know that their cache is current. Big savings in request time and network bandwidth.</source>
          <target state="translated">このメソッドは応答に弱いETagバリデータを設定するので、 ブラウザやプロキシはETagをキーにして応答をキャッシュすることができます。それ以降のリクエストでは、If-None-Match ヘッダがキャッシュされた ETag に設定されます。もしそれが現在の ETag にマッチしていれば、ボディなしの 304 Not Modified レスポンスを返すことができ、 ブラウザやプロキシにキャッシュが現在のものであることを知らせることができます。リクエスト時間とネットワーク帯域幅を大幅に節約できます。</target>
        </trans-unit>
        <trans-unit id="46e1b8cdccfba9c5b0c329ff915d3cb2a9607d53" translate="yes" xml:space="preserve">
          <source>This method should return a hash with assigns. You can overwrite this configuration per controller.</source>
          <target state="translated">このメソッドは、割り当てを含むハッシュを返す必要があります。コントローラごとにこの設定を上書きすることができます。</target>
        </trans-unit>
        <trans-unit id="41885df729b68cec5e492338ab5422001ebc9769" translate="yes" xml:space="preserve">
          <source>This method synchronously processes a variant of the preview image, so do not call it in views. Instead, generate a stable URL that redirects to the short-lived URL returned by this method.</source>
          <target state="translated">このメソッドはプレビュー画像のバリアントを同期的に処理するので、ビューでは呼び出さないでください。代わりに、このメソッドが返す短命の URL にリダイレクトする安定した URL を生成します。</target>
        </trans-unit>
        <trans-unit id="012d0e0efeb4b90d2fb318d1a2210ebebbeac1ad" translate="yes" xml:space="preserve">
          <source>This method takes an authorization body and splits up the key-value pairs by the standardized &lt;code&gt;:&lt;/code&gt;, &lt;code&gt;;&lt;/code&gt;, or &lt;code&gt;\t&lt;/code&gt; delimiters defined in &lt;code&gt;AUTHN_PAIR_DELIMITERS&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、認証本文を受け取り、標準化された &lt;code&gt;:&lt;/code&gt; 、 &lt;code&gt;;&lt;/code&gt; によってキーと値のペアを分割します。、または &lt;code&gt;AUTHN_PAIR_DELIMITERS&lt;/code&gt; で定義された &lt;code&gt;\t&lt;/code&gt; 区切り文字。</target>
        </trans-unit>
        <trans-unit id="bcfbe784cc7e24a23013647372adbb0cfac865fa" translate="yes" xml:space="preserve">
          <source>This method validates that a checkbox on the user interface was checked when a form was submitted. This is typically used when the user needs to agree to your application's terms of service, confirm that some text is read, or any similar concept.</source>
          <target state="translated">このメソッドは、フォームが送信されたときにユーザーインターフェイスのチェックボックスがチェックされたかどうかを検証します。これは通常、ユーザーがアプリケーションの利用規約に同意したり、テキストが読み込まれたかどうかを確認したり、あるいは似たような概念を持っている場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="5dff2d512cf23ec50b72edca0451ece07b06bbd1" translate="yes" xml:space="preserve">
          <source>This method will also generate 3 input hidden tags, for the actual year, month and day unless the option &lt;code&gt;:ignore_date&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;. If you set the &lt;code&gt;:ignore_date&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, you must have a &lt;code&gt;date_select&lt;/code&gt; on the same method within the form otherwise an exception will be raised.</source>
          <target state="translated">このメソッドは、オプション &lt;code&gt;:ignore_date&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; に設定されていない限り、実際の年、月、日の3つの入力非表示タグも生成します。 &lt;code&gt;:ignore_date&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定する場合、フォーム内の同じメソッドに &lt;code&gt;date_select&lt;/code&gt; が必要です。そうでない場合、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="64bae8693b242b241d6c1069e584c82ac89bd00d" translate="yes" xml:space="preserve">
          <source>This method will automatically define a new method for each of the given names, and it will be available in your views.</source>
          <target state="translated">このメソッドは、与えられた名前のそれぞれに対して自動的に新しいメソッドを定義し、ビューで利用できるようにします。</target>
        </trans-unit>
        <trans-unit id="b2796e7f017e5372e44f884a51e71260d25abc07" translate="yes" xml:space="preserve">
          <source>This method will overwrite an existing Cache-Control header. See &lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html&quot;&gt;www.w3.org/Protocols/rfc2616/rfc2616-sec14.html&lt;/a&gt; for more possibilities.</source>
          <target state="translated">このメソッドは、既存のCache-Controlヘッダーを上書きします。その他の可能性については、&lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html&quot;&gt;www.w3.org / Protocols / rfc2616 / rfc2616-sec14.html&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="06943c1d91ca0ed1a7ee27b9069f0fc0c6e21107" translate="yes" xml:space="preserve">
          <source>This method will raise an &lt;code&gt;IrreversibleMigration&lt;/code&gt; exception if it cannot invert the &lt;code&gt;command&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;command&lt;/code&gt; 反転できない場合に &lt;code&gt;IrreversibleMigration&lt;/code&gt; 例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="f38ce92d06f8df11400be36093b7097e5c3c2394" translate="yes" xml:space="preserve">
          <source>This method will return a record if all given attributes are covered by unique constraints (unless the INSERT -&amp;gt; DELETE -&amp;gt; SELECT race condition is triggered), but if creation was attempted and failed due to validation errors it won't be persisted, you get what &lt;a href=&quot;relation#method-i-create&quot;&gt;create&lt;/a&gt; returns in such situation.</source>
          <target state="translated">このメソッドは、指定されたすべての属性が一意の制約でカバーされている場合（INSERT-&amp;gt; DELETE-&amp;gt; SELECTの競合状態がトリガーされない限り）、レコードを返しますが、検証エラーが原因で作成が失敗した場合、永続化されません。そのような状況で&lt;a href=&quot;relation#method-i-create&quot;&gt;create&lt;/a&gt;が返すものを取得します。</target>
        </trans-unit>
        <trans-unit id="c86869e92877b86be09a466a234404de518f17f2" translate="yes" xml:space="preserve">
          <source>This method will set up keys for the &lt;code&gt;options&lt;/code&gt; which Rails will then be able to use to determine how its server should run. After &lt;code&gt;initialize&lt;/code&gt; has finished, we jump back into the server command where &lt;code&gt;APP_PATH&lt;/code&gt; (which was set earlier) is required.</source>
          <target state="translated">このメソッドは、サーバーの実行方法を決定するためにRailsが使用できる &lt;code&gt;options&lt;/code&gt; キーを設定します。後に &lt;code&gt;initialize&lt;/code&gt; 完了した、我々は戻って、サーバのコマンドにジャンプ &lt;code&gt;APP_PATH&lt;/code&gt; （以前に設定された）が必要です。</target>
        </trans-unit>
        <trans-unit id="c5b1c276ff2e5ebf4b7786da73057ea07d2ab622" translate="yes" xml:space="preserve">
          <source>This method works like its siblings, &lt;code&gt;attr_accessor&lt;/code&gt; and &lt;code&gt;cattr_accessor&lt;/code&gt;, but provides a setter and getter method on the module with the specified name. To use it, it must be referenced using &lt;code&gt;Blorgh.author_class&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、兄弟である &lt;code&gt;attr_accessor&lt;/code&gt; および &lt;code&gt;cattr_accessor&lt;/code&gt; のように機能しますが、指定された名前のモジュールにセッターメソッドとゲッターメソッドを提供します。これを使用するには、 &lt;code&gt;Blorgh.author_class&lt;/code&gt; を使用して参照する必要があります。</target>
        </trans-unit>
        <trans-unit id="f7ee50ed51d0d15770d36644e8414ce82f979eaa" translate="yes" xml:space="preserve">
          <source>This middleware calculates the IP address of the remote client that is making the request. It does this by checking various headers that could contain the address, and then picking the last-set address that is not on the list of trusted IPs. This follows the precedent set by e.g. &lt;a href=&quot;https://issues.apache.org/bugzilla/show_bug.cgi?id=50453&quot;&gt;the Tomcat server&lt;/a&gt;, with &lt;a href=&quot;http://blog.gingerlime.com/2012/rails-ip-spoofing-vulnerabilities-and-protection&quot;&gt;reasoning explained at length&lt;/a&gt; by @gingerlime. A more detailed explanation of the algorithm is given at &lt;a href=&quot;remoteip/getip#method-i-calculate_ip&quot;&gt;ActionDispatch::RemoteIp::GetIp#calculate_ip&lt;/a&gt;.</source>
          <target state="translated">このミドルウェアは、要求を行っているリモートクライアントのIPアドレスを計算します。これは、アドレスを含む可能性のあるさまざまなヘッダーをチェックし、信頼できるIPのリストにない最後に設定されたアドレスを選択することによって行われます。これは、&lt;a href=&quot;https://issues.apache.org/bugzilla/show_bug.cgi?id=50453&quot;&gt;Tomcatサーバー&lt;/a&gt;などによって設定された前例に従い、@ gingerlimeによって詳細に&lt;a href=&quot;http://blog.gingerlime.com/2012/rails-ip-spoofing-vulnerabilities-and-protection&quot;&gt;説明さ&lt;/a&gt;れています。アルゴリズムの詳細については、&lt;a href=&quot;remoteip/getip#method-i-calculate_ip&quot;&gt;ActionDispatch :: RemoteIp :: GetIp＃calculate_ipを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3439033169a9bdabd1efa7147b60b1ef9ca0024f" translate="yes" xml:space="preserve">
          <source>This middleware can be used to diagnose deadlocks in the autoload interlock.</source>
          <target state="translated">このミドルウェアを使用して、オートロード・インターロックのデッドロックを診断することができます。</target>
        </trans-unit>
        <trans-unit id="dabb8e079fc21462c7d20d4e7a0de5475b74dbb8" translate="yes" xml:space="preserve">
          <source>This middleware exposes operational details of the server, with no access control. It should only be enabled when in use, and removed thereafter.</source>
          <target state="translated">このミドルウェアは、アクセス制御なしでサーバの運用詳細を公開します。使用時のみ有効にし、その後は削除してください。</target>
        </trans-unit>
        <trans-unit id="208e3d2fb70acd153c67d30409d98ee76a097fae" translate="yes" xml:space="preserve">
          <source>This middleware guards from DNS rebinding attacks by explicitly permitting the hosts a request can be sent to.</source>
          <target state="translated">このミドルウェアは、リクエストを送信できるホストを明示的に許可することで、DNSリバインディング攻撃から守ります。</target>
        </trans-unit>
        <trans-unit id="d39ee5c3b45bcf1eba2d3206f33d68df0bb14fdf" translate="yes" xml:space="preserve">
          <source>This middleware is added to the stack when &lt;code&gt;config.force_ssl =
true&lt;/code&gt;, and is passed the options set in &lt;code&gt;config.ssl_options&lt;/code&gt;. It does three jobs to enforce secure HTTP requests:</source>
          <target state="translated">このミドルウェアは、 &lt;code&gt;config.force_ssl = true&lt;/code&gt; ときにスタックに追加され、 &lt;code&gt;config.ssl_options&lt;/code&gt; で設定されたオプションが渡されます。安全なHTTPリクエストを強制するために3つのジョブを実行します。</target>
        </trans-unit>
        <trans-unit id="6496f0e0f25d6b0f2d6da5a5517298276222317c" translate="yes" xml:space="preserve">
          <source>This middleware returns a file's contents from disk in the body response. When initialized, it can accept optional HTTP headers, which will be set when a response containing a file's contents is delivered.</source>
          <target state="translated">このミドルウェアは、ファイルの内容をディスクからボディレスポンスで返します。初期化されると、オプションの HTTP ヘッダを受け付けることができ、ファイルの内容を含むレスポンスが配信される際に設定されます。</target>
        </trans-unit>
        <trans-unit id="2ac1578c39a45c87b7612f701eedcd08b29c4561" translate="yes" xml:space="preserve">
          <source>This middleware verifies the path to ensure that only files living in the root directory can be rendered. A request cannot produce a directory traversal using this middleware. Only 'GET' and 'HEAD' requests will result in a file being returned.</source>
          <target state="translated">このミドルウェアは、ルートディレクトリにあるファイルだけがレンダリングできるようにパスを検証します。リクエストはこのミドルウェアを使用してディレクトリのトラバーサルを生成することはできません。GET' と 'HEAD' リクエストのみがファイルを返します。</target>
        </trans-unit>
        <trans-unit id="014df54573381128828ecc65d349560208352273" translate="yes" xml:space="preserve">
          <source>This middleware will attempt to return the contents of a file's body from disk in the response. If a file is not found on disk, the request will be delegated to the application stack. This middleware is commonly initialized to serve assets from a server's &lt;code&gt;public/&lt;/code&gt; directory.</source>
          <target state="translated">このミドルウェアは、応答でディスクからファイルの本文のコンテンツを返そうとします。ディスク上にファイルが見つからない場合、リクエストはアプリケーションスタックに委任されます。このミドルウェアは通常、サーバーの &lt;code&gt;public/&lt;/code&gt; ディレクトリからアセットを提供するために初期化されます。</target>
        </trans-unit>
        <trans-unit id="32a1a159366cb6478f2d4f7ebf380a24c15cca7b" translate="yes" xml:space="preserve">
          <source>This middleware will render the file specified in &lt;code&gt;env[&quot;PATH_INFO&quot;]&lt;/code&gt; where the base path is in the &lt;code&gt;root&lt;/code&gt; directory. For example, if the &lt;code&gt;root&lt;/code&gt; is set to &lt;code&gt;public/&lt;/code&gt;, then a request with &lt;code&gt;env[&quot;PATH_INFO&quot;]&lt;/code&gt; of &lt;code&gt;assets/application.js&lt;/code&gt; will return a response with the contents of a file located at &lt;code&gt;public/assets/application.js&lt;/code&gt; if the file exists. If the file does not exist, a 404 &amp;ldquo;File not Found&amp;rdquo; response will be returned.</source>
          <target state="translated">このミドルウェアは、ベースパスが &lt;code&gt;root&lt;/code&gt; ディレクトリにある &lt;code&gt;env[&quot;PATH_INFO&quot;]&lt;/code&gt; で指定されたファイルをレンダリングします。たとえば、 &lt;code&gt;root&lt;/code&gt; が &lt;code&gt;public/&lt;/code&gt; に設定されている場合、 &lt;code&gt;assets/application.js&lt;/code&gt; の &lt;code&gt;env[&quot;PATH_INFO&quot;]&lt;/code&gt; を含むリクエストは、 &lt;code&gt;public/assets/application.js&lt;/code&gt; にあるファイルのコンテンツを含む応答を返します。存在します。ファイルが存在しない場合は、404「ファイルが見つかりません」という応答が返されます。</target>
        </trans-unit>
        <trans-unit id="4dc55f8fc0d61294b21a0782672c4be6778fb0fb" translate="yes" xml:space="preserve">
          <source>This migration adds a table called &lt;code&gt;products&lt;/code&gt; with a string column called &lt;code&gt;name&lt;/code&gt; and a text column called &lt;code&gt;description&lt;/code&gt;. A primary key column called &lt;code&gt;id&lt;/code&gt; will also be added implicitly, as it's the default primary key for all Active Record models. The &lt;code&gt;timestamps&lt;/code&gt; macro adds two columns, &lt;code&gt;created_at&lt;/code&gt; and &lt;code&gt;updated_at&lt;/code&gt;. These special columns are automatically managed by Active Record if they exist.</source>
          <target state="translated">この移行により、 &lt;code&gt;name&lt;/code&gt; と呼ばれる文字列の列と &lt;code&gt;description&lt;/code&gt; と呼ばれるテキストの列を持つ &lt;code&gt;products&lt;/code&gt; と呼ばれるテーブルが追加されます。すべてのアクティブレコードモデルのデフォルトの主キーであるため、 &lt;code&gt;id&lt;/code&gt; と呼ばれる主キー列も暗黙的に追加されます。 &lt;code&gt;timestamps&lt;/code&gt; マクロは、2つの列、追加 &lt;code&gt;created_at&lt;/code&gt; と &lt;code&gt;updated_at&lt;/code&gt; のを。これらの特別な列が存在する場合、それらはActive Recordによって自動的に管理されます。</target>
        </trans-unit>
        <trans-unit id="3900c9971d50896e978d54fa358b22e2c732ed01" translate="yes" xml:space="preserve">
          <source>This migration can be simplified by using the &lt;code&gt;t.references&lt;/code&gt; form:</source>
          <target state="translated">この移行は、 &lt;code&gt;t.references&lt;/code&gt; フォームを使用して簡略化できます。</target>
        </trans-unit>
        <trans-unit id="885b258edaf0ca5835de252b2e87c1bac3d3fcd8" translate="yes" xml:space="preserve">
          <source>This migration first adds the &lt;code&gt;system_settings&lt;/code&gt; table, then creates the very first row in it using the Active Record model that relies on the table. It also uses the more advanced &lt;code&gt;create_table&lt;/code&gt; syntax where you can specify a complete table schema in one block call.</source>
          <target state="translated">この移行では、最初に &lt;code&gt;system_settings&lt;/code&gt; テーブルを追加し、次にテーブルに依存するアクティブレコードモデルを使用して、最初の行を作成します。また、1回のブロック呼び出しで完全なテーブルスキーマを指定できる、より高度な &lt;code&gt;create_table&lt;/code&gt; 構文も使用します。</target>
        </trans-unit>
        <trans-unit id="7e178bf4130d6446d9de99fc2a55553e0b28d78b" translate="yes" xml:space="preserve">
          <source>This migration will add a boolean flag to the accounts table and remove it if you're backing out of the migration. It shows how all migrations have two methods &lt;code&gt;up&lt;/code&gt; and &lt;code&gt;down&lt;/code&gt; that describes the transformations required to implement or remove the migration. These methods can consist of both the migration specific methods like &lt;code&gt;add_column&lt;/code&gt; and &lt;code&gt;remove_column&lt;/code&gt;, but may also contain regular Ruby code for generating data needed for the transformations.</source>
          <target state="translated">この移行では、アカウントテーブルにブールフラグが追加され、移行を取り消す場合は削除されます。これは、すべての移行は2つのメソッドを持っているかを示し &lt;code&gt;up&lt;/code&gt; と &lt;code&gt;down&lt;/code&gt; その変換が実装または移行を除去するために必要な説明します。これらの方法は、のような両方の移行特定の方法で構成することができ &lt;code&gt;add_column&lt;/code&gt; と &lt;code&gt;remove_column&lt;/code&gt; だけでなく、変換に必要なデータを生成するための定期的なRubyコードを含んでいてもよいです。</target>
        </trans-unit>
        <trans-unit id="4985dfe4f4a90c958afb459eaada7c764a487ac1" translate="yes" xml:space="preserve">
          <source>This migration will create a &lt;code&gt;user_id&lt;/code&gt; column and appropriate index. For more &lt;code&gt;add_reference&lt;/code&gt; options, visit the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_reference&quot;&gt;API documentation&lt;/a&gt;.</source>
          <target state="translated">この移行により、 &lt;code&gt;user_id&lt;/code&gt; 列と適切なインデックスが作成されます。 &lt;code&gt;add_reference&lt;/code&gt; オプションの詳細については、&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_reference&quot;&gt;APIドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="5669fde4eec64f10818cf2e3517c3d7e5f42c208" translate="yes" xml:space="preserve">
          <source>This migration will create the horses table for you on the way up, and automatically figure out how to drop the table on the way down.</source>
          <target state="translated">このマイグレーションでは、上昇中に馬の表を作成し、下降中に馬の表を落とす方法を自動的に把握してくれます。</target>
        </trans-unit>
        <trans-unit id="5516ca5f5ddf9bac6a1d49105da9e2042c212e1b" translate="yes" xml:space="preserve">
          <source>This migration will need to be run on the application. To do that, it must first be copied using this command:</source>
          <target state="translated">この移行は、アプリケーション上で実行する必要があります。そのためには、まずこのコマンドを使用してコピーする必要があります。</target>
        </trans-unit>
        <trans-unit id="5b71acd4c739f9ed2673b4139c3b262e87b15c02" translate="yes" xml:space="preserve">
          <source>This mode uses more memory, performs more poorly than the default, and is not recommended.</source>
          <target state="translated">このモードは、より多くのメモリを使用し、デフォルトよりもパフォーマンスが悪く、お勧めできません。</target>
        </trans-unit>
        <trans-unit id="d243535d40aabdfe065813a26d6de6c00f9cbe2c" translate="yes" xml:space="preserve">
          <source>This model can now be used with a nested &lt;a href=&quot;formbuilder#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt;, like so:</source>
          <target state="translated">このモデルは、次のようにネストされた&lt;a href=&quot;formbuilder#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt;で使用できます。</target>
        </trans-unit>
        <trans-unit id="a0e73c2711552abda121ef8c6ac32d00a79614af" translate="yes" xml:space="preserve">
          <source>This model can now be used with a nested &lt;a href=&quot;formhelper#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt;, like so:</source>
          <target state="translated">このモデルは、次のようにネストされた&lt;a href=&quot;formhelper#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt;で使用できます。</target>
        </trans-unit>
        <trans-unit id="dd03efbb6dd8783abb654113eb8919de838f4bbb" translate="yes" xml:space="preserve">
          <source>This model can now be used with a nested fields_for. The block given to the nested &lt;a href=&quot;formbuilder#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt; call will be repeated for each instance in the collection:</source>
          <target state="translated">このモデルは、ネストされたfields_forで使用できるようになりました。ネストされた&lt;a href=&quot;formbuilder#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt;呼び出しに指定されたブロックは、コレクション内のインスタンスごとに繰り返されます。</target>
        </trans-unit>
        <trans-unit id="640d7faaa46ff1cc37c2e2a0656eae5acb40ef70" translate="yes" xml:space="preserve">
          <source>This model can now be used with a nested fields_for. The block given to the nested &lt;a href=&quot;formhelper#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt; call will be repeated for each instance in the collection:</source>
          <target state="translated">このモデルは、ネストされたfields_forで使用できるようになりました。ネストされた&lt;a href=&quot;formhelper#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt;呼び出しに指定されたブロックは、コレクション内のインスタンスごとに繰り返されます。</target>
        </trans-unit>
        <trans-unit id="3e5d73d1bbeedab4be25fb129ea6ee8fcea08d07" translate="yes" xml:space="preserve">
          <source>This module allows you to define autoloads based on Rails conventions (i.e. no need to define the path it is automatically guessed based on the filename) and also define a set of constants that needs to be eager loaded:</source>
          <target state="translated">このモジュールでは、Railsの規約に基づいてオートロードを定義することができます(つまり、ファイル名に基づいて自動的に推測されるパスを定義する必要はありません)また、イーガーロードする必要がある定数のセットを定義することができます。</target>
        </trans-unit>
        <trans-unit id="ebd4a59f08621fde2640ac21c4478ab8a9aab4bb" translate="yes" xml:space="preserve">
          <source>This module exists because &lt;a href=&quot;attributemethods/dirty&quot;&gt;ActiveRecord::AttributeMethods::Dirty&lt;/a&gt; needs to define callbacks, but continue to have its version of &lt;code&gt;save&lt;/code&gt; be the super method of &lt;a href=&quot;callbacks&quot;&gt;ActiveRecord::Callbacks&lt;/a&gt;. This will be removed when the removal of deprecated code removes this need.</source>
          <target state="translated">このモジュールが存在するのは、&lt;a href=&quot;attributemethods/dirty&quot;&gt;ActiveRecord :: AttributeMethods :: Dirty&lt;/a&gt;がコールバックを定義する必要があるためですが、そのバージョンの &lt;code&gt;save&lt;/code&gt; を引き続き&lt;a href=&quot;callbacks&quot;&gt;ActiveRecord :: Callbacksの&lt;/a&gt;スーパーメソッドにする必要があります。非推奨のコードを削除することでこの必要性がなくなると、これは削除されます。</target>
        </trans-unit>
        <trans-unit id="94244227efaa951180a549f929adb04352831939" translate="yes" xml:space="preserve">
          <source>This module handles everything related to mail delivery, from registering new delivery methods to configuring the mail object to be sent.</source>
          <target state="translated">このモジュールは、新しい配信メソッドの登録から、送信するメールオブジェクトの設定まで、メール配信に関するすべてのことを扱います。</target>
        </trans-unit>
        <trans-unit id="3e1941493198dfa728594c19da80819472100156" translate="yes" xml:space="preserve">
          <source>This module helps build the runtime properties that are displayed in Rails::InfoController responses. These include the active Rails version, Ruby version, Rack version, and so on.</source>
          <target state="translated">このモジュールは、Rails::InfoControllerのレスポンスに表示されるランタイムプロパティを構築するのに役立ちます。これらには、アクティブなRailsのバージョン、Rubyのバージョン、Rackのバージョンなどが含まれます。</target>
        </trans-unit>
        <trans-unit id="0cef4708bb706ca8ee98950587d6ae406c9df0bf" translate="yes" xml:space="preserve">
          <source>This module is responsible for providing &lt;code&gt;rescue_from&lt;/code&gt; helpers to controllers and configuring when detailed exceptions must be shown.</source>
          <target state="translated">このモジュールは、コントローラに &lt;code&gt;rescue_from&lt;/code&gt; ヘルパーを提供し、詳細な例外を表示する必要がある場合の構成を担当します。</target>
        </trans-unit>
        <trans-unit id="9e3c20d53a4426f29a4bd7a9838c788021dedf64" translate="yes" xml:space="preserve">
          <source>This module is used to encapsulate access to thread local variables.</source>
          <target state="translated">このモジュールは、スレッドのローカル変数へのアクセスをカプセル化するために使用されます。</target>
        </trans-unit>
        <trans-unit id="22f4c8a4c981a60f3a05c2c0a0c6a8bc72748f9b" translate="yes" xml:space="preserve">
          <source>This module provides an internal implementation to track descendants which is faster than iterating through ObjectSpace.</source>
          <target state="translated">このモジュールは子孫を追跡するための内部実装を提供します。</target>
        </trans-unit>
        <trans-unit id="631368182d8bbf4acf4b786152c548a5c12f3e77" translate="yes" xml:space="preserve">
          <source>This module provides methods for generating HTML that links views to assets such as images, JavaScript files, stylesheets, and feeds.</source>
          <target state="translated">このモジュールは、ビューを画像、JavaScriptファイル、スタイルシート、フィードなどのアセットにリンクするHTMLを生成するためのメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="69d2293cee465d18b3ab1034048805a0d13e1fb6" translate="yes" xml:space="preserve">
          <source>This module provides methods for generating HTML that links views to assets such as images, JavaScripts, stylesheets, and feeds. These methods do not verify the assets exist before linking to them:</source>
          <target state="translated">このモジュールは、画像、JavaScripts、スタイルシート、フィードなどのアセットにビューをリンクするHTMLを生成するためのメソッドを提供します。これらのメソッドは、アセットにリンクする前にアセットの存在を確認することはありません。</target>
        </trans-unit>
        <trans-unit id="86eee6aec75a942dab88d2f2fb2d6be094436f2a" translate="yes" xml:space="preserve">
          <source>This module provides methods for generating asset paths and URLs.</source>
          <target state="translated">このモジュールは、アセットパスとURLを生成するためのメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="d80792f7af72d9115718c99d4842fab3aba31858" translate="yes" xml:space="preserve">
          <source>This needs to happen for every intermediate (non-root and non-leaf) class. The root class does not scope the query by type, and therefore does not necessarily have to know all its descendants.</source>
          <target state="translated">これは、すべての中間クラス(非ルートクラスと非リーフクラス)に対して行われる必要があります。ルートクラスは型によってクエリをスコープしないので、必ずしもすべての子孫を知る必要はありません。</target>
        </trans-unit>
        <trans-unit id="723de11f9b9bb4df51697024a41e43c3beb50f19" translate="yes" xml:space="preserve">
          <source>This new embed information make those cookies incompatible with versions of Rails older than 5.2.</source>
          <target state="translated">この新しい埋め込み情報により、これらのクッキーは5.2より古いバージョンのRailsと互換性がありません。</target>
        </trans-unit>
        <trans-unit id="aabae3f77e3509214e76e768ccad19dde1ed8326" translate="yes" xml:space="preserve">
          <source>This new embed information make those cookies incompatible with versions of Rails older than 6.0.</source>
          <target state="translated">この新しい埋め込み情報により、これらのクッキーは6.0より古いバージョンのRailsと互換性がありません。</target>
        </trans-unit>
        <trans-unit id="06c42da025a5b2d8c11d5b2611a7e26218329dde" translate="yes" xml:space="preserve">
          <source>This new sanitizer uses &lt;a href=&quot;https://github.com/flavorjones/loofah&quot;&gt;Loofah&lt;/a&gt; internally. Loofah in turn uses Nokogiri, which wraps XML parsers written in both C and Java, so sanitization should be faster no matter which Ruby version you run.</source>
          <target state="translated">この新しい消毒剤は内部で&lt;a href=&quot;https://github.com/flavorjones/loofah&quot;&gt;ヘチマを&lt;/a&gt;使用しています。Loofahは、CとJavaの両方で記述されたXMLパーサーをラップするNokogiriを使用するため、実行するRubyのバージョンに関係なく、サニタイズはより高速になるはずです。</target>
        </trans-unit>
        <trans-unit id="ed5864f55824cd0ba8ff1052ea5ca1073b597068" translate="yes" xml:space="preserve">
          <source>This new snippet will only include &lt;code&gt;MyActiveRecordHelper&lt;/code&gt; when &lt;code&gt;ActiveRecord::Base&lt;/code&gt; is loaded.</source>
          <target state="translated">この新しいスニペットには、 &lt;code&gt;ActiveRecord::Base&lt;/code&gt; が読み込まれたときにのみ &lt;code&gt;MyActiveRecordHelper&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="69982115ba3f0a38d99b309b7f0f83d5b21528ab" translate="yes" xml:space="preserve">
          <source>This object is an extended hash that behaves as root of the &lt;code&gt;Rails::Paths&lt;/code&gt; system. It allows you to collect information about how you want to structure your application paths through a Hash-like API. It requires you to give a physical path on initialization.</source>
          <target state="translated">このオブジェクトは、 &lt;code&gt;Rails::Paths&lt;/code&gt; システムのルートとして動作する拡張ハッシュです。ハッシュのようなAPIを介してアプリケーションパスを構造化する方法に関する情報を収集できます。初期化時に物理パスを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="84cad39f8863c845a0d9debbf0bbcb07ddf841ff" translate="yes" xml:space="preserve">
          <source>This option can be used to configure a custom named &lt;code&gt;:counter_cache.&lt;/code&gt; You only need this option, when you customized the name of your &lt;code&gt;:counter_cache&lt;/code&gt; on the &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt; association.</source>
          <target state="translated">このオプションを使用して、 &lt;code&gt;:counter_cache.&lt;/code&gt; という名前のカスタムを構成できます。あなたの名前カスタマイズしたときにのみ、このオプションが必要 &lt;code&gt;:counter_cache&lt;/code&gt; 上&lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_toのの&lt;/a&gt;関連付けを。</target>
        </trans-unit>
        <trans-unit id="9ab2086178b4abdefb934a38fbbb3916be52744c" translate="yes" xml:space="preserve">
          <source>This option can be used to configure a custom named &lt;code&gt;:counter_cache&lt;/code&gt;. You only need this option when you customized the name of your &lt;code&gt;:counter_cache&lt;/code&gt; on the &lt;a href=&quot;#options-for-belongs-to&quot;&gt;belongs_to association&lt;/a&gt;.</source>
          <target state="translated">このオプションを使用して、 &lt;code&gt;:counter_cache&lt;/code&gt; という名前のカスタムを構成できます。このオプションが必要なのは、&lt;a href=&quot;#options-for-belongs-to&quot;&gt;belongs_toアソシエーションで&lt;/a&gt; &lt;code&gt;:counter_cache&lt;/code&gt; の名前をカスタマイズした場合のみです。</target>
        </trans-unit>
        <trans-unit id="f68ae509829e7450b92000008806868d38e89cda" translate="yes" xml:space="preserve">
          <source>This option should be used only if you don't care about the content type of the response. Using &lt;code&gt;:plain&lt;/code&gt; or &lt;code&gt;:html&lt;/code&gt; might be more appropriate most of the time.</source>
          <target state="translated">このオプションは、応答のコンテンツタイプを気にしない場合にのみ使用してください。ほとんどの場合、 &lt;code&gt;:plain&lt;/code&gt; または &lt;code&gt;:html&lt;/code&gt; を使用する方が適切です。</target>
        </trans-unit>
        <trans-unit id="d2af3083a1b3fca93ea3eabedf316f7311b08a1e" translate="yes" xml:space="preserve">
          <source>This partial will be responsible for rendering just the comment text, for now. Create a new file at &lt;code&gt;app/views/blorgh/comments/_comment.html.erb&lt;/code&gt; and put this line inside it:</source>
          <target state="translated">このパーシャルは、今のところ、コメントテキストのみのレンダリングを担当します。 &lt;code&gt;app/views/blorgh/comments/_comment.html.erb&lt;/code&gt; に新しいファイルを作成し、その中に次の行を追加します。</target>
        </trans-unit>
        <trans-unit id="9ca6827cd178a7371e007820d7bc736f71b5a6ca" translate="yes" xml:space="preserve">
          <source>This plugin will add a method named 'squawk' to any Active Record object that calls &lt;code&gt;acts_as_yaffle&lt;/code&gt;. The 'squawk' method will simply set the value of one of the fields in the database.</source>
          <target state="translated">このプラグインは、 &lt;code&gt;acts_as_yaffle&lt;/code&gt; を呼び出すActive Recordオブジェクトに「squawk」という名前のメソッドを追加します。'squawk'メソッドは、データベースのフィールドの1つの値を設定するだけです。</target>
        </trans-unit>
        <trans-unit id="fe3b5fbcf11c1dfc262bf8c84ee1e6e1548bcd2d" translate="yes" xml:space="preserve">
          <source>This plugin will expect that you've added a method to your model named &lt;code&gt;last_squawk&lt;/code&gt;. However, the plugin users might have already defined a method on their model named &lt;code&gt;last_squawk&lt;/code&gt; that they use for something else. This plugin will allow the name to be changed by adding a class method called &lt;code&gt;yaffle_text_field&lt;/code&gt;.</source>
          <target state="translated">このプラグインは、モデルに &lt;code&gt;last_squawk&lt;/code&gt; という名前のメソッドが追加されていることを想定しています。ただし、プラグインのユーザーは、 &lt;code&gt;last_squawk&lt;/code&gt; という名前のモデルに、別の目的で使用するメソッドをすでに定義している場合があります。このプラグインは、 &lt;code&gt;yaffle_text_field&lt;/code&gt; と呼ばれるクラスメソッドを追加することにより、名前を変更できます。</target>
        </trans-unit>
        <trans-unit id="d4080fd0fea66e1a2f188bd170ca3ba9801b72a4" translate="yes" xml:space="preserve">
          <source>This process is repeated, fetching more batches as needed, until all of the records have been processed.</source>
          <target state="translated">この処理は、すべてのレコードが処理されるまで、必要に応じてより多くのバッチを取得しながら繰り返されます。</target>
        </trans-unit>
        <trans-unit id="ff5280ccaade258e94436683ba2403f8e398b4f3" translate="yes" xml:space="preserve">
          <source>This produces:</source>
          <target state="translated">これが産み出します。</target>
        </trans-unit>
        <trans-unit id="ff62fb6b2a142fa597ee4f3dc08a5abdb24c77c2" translate="yes" xml:space="preserve">
          <source>This references the name of the &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt; association that also used the &lt;code&gt;:author&lt;/code&gt; symbol. After loading the posts, &lt;code&gt;find&lt;/code&gt; will collect the &lt;code&gt;author_id&lt;/code&gt; from each one and load all of the referenced authors with one query. Doing so will cut down the number of queries from 201 to 102.</source>
          <target state="translated">これは、 &lt;code&gt;:author&lt;/code&gt; シンボルも使用した&lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt;アソシエーションの名前を参照します。投稿を読み込んだ後、 &lt;code&gt;find&lt;/code&gt; はそれぞれの &lt;code&gt;author_id&lt;/code&gt; からauthor_idを収集し、1つのクエリで参照されているすべての作成者を読み込みます。これにより、クエリの数が201から102に削減されます。</target>
        </trans-unit>
        <trans-unit id="a11435417ff912526d0f73321aa89242acdbc08b" translate="yes" xml:space="preserve">
          <source>This release includes some breaking changes to optional parts of the Action Cable JavaScript API:</source>
          <target state="translated">このリリースには、Action Cable JavaScript API のオプション部分のいくつかの変更が含まれています。</target>
        </trans-unit>
        <trans-unit id="f85fbf1557477fbbaf24978943eb96603597f6ce" translate="yes" xml:space="preserve">
          <source>This removes the &lt;code&gt;&quot;&lt;/code&gt; characters wrapping the value.</source>
          <target state="translated">これにより、値をラップしている &lt;code&gt;&quot;&lt;/code&gt; 文字が削除されます。</target>
        </trans-unit>
        <trans-unit id="3ed4e429a043b344dbd88b0a4f362f59aabf7379" translate="yes" xml:space="preserve">
          <source>This renders the raw file (it doesn't support ERB or other handlers). By default it is rendered within the current layout.</source>
          <target state="translated">これは生のファイルをレンダリングします(ERBや他のハンドラはサポートしていません)。デフォルトでは、現在のレイアウト内でレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="f780ebd959678062386a3bce985fc0cb8f1664bf" translate="yes" xml:space="preserve">
          <source>This resourceful route:</source>
          <target state="translated">この機知に富んだルート。</target>
        </trans-unit>
        <trans-unit id="576d2193c977cb5091ad3f1c37f8cb18711fb115" translate="yes" xml:space="preserve">
          <source>This restriction only applies to explicit namespaces. Classes and modules not defining a namespace can be defined using those idioms.</source>
          <target state="translated">この制限は明示的な名前空間にのみ適用されます。名前空間を定義しないクラスやモジュールは、それらのイディオムを使用して定義することができます。</target>
        </trans-unit>
        <trans-unit id="73744111630d7e542dc9c93cf1cea86e8eebd2fa" translate="yes" xml:space="preserve">
          <source>This returned &quot;some&amp;lt;script&amp;gt;alert('hello')&amp;lt;/script&amp;gt;&quot;, which makes an attack work. That's why a permitted list approach is better, using the updated Rails 2 method sanitize():</source>
          <target state="translated">これにより「some &amp;lt;script&amp;gt; alert（ 'hello'）&amp;lt;/ script&amp;gt;」が返され、攻撃が機能します。だからこそ、許可されたリストによるアプローチの方が優れており、更新されたRails 2のメソッドsanitize（）を使用しています。</target>
        </trans-unit>
        <trans-unit id="420dbe0c61cbd2a97b9989fc9b43d572d2951620" translate="yes" xml:space="preserve">
          <source>This returns the date and total price for each order object, grouped by the day they were ordered and where the price is more than $100.</source>
          <target state="translated">これは、各注文オブジェクトの日付と合計価格を返し、注文された日と価格が100ドル以上の場合にグループ化します。</target>
        </trans-unit>
        <trans-unit id="164c8bc01e03f24cbab05f04a51c89948101ff5c" translate="yes" xml:space="preserve">
          <source>This route would match &lt;code&gt;photos/12&lt;/code&gt; or &lt;code&gt;/photos/long/path/to/12&lt;/code&gt;, setting &lt;code&gt;params[:other]&lt;/code&gt; to &lt;code&gt;&quot;12&quot;&lt;/code&gt; or &lt;code&gt;&quot;long/path/to/12&quot;&lt;/code&gt;. The fragments prefixed with a star are called &quot;wildcard segments&quot;.</source>
          <target state="translated">このルートは、 &lt;code&gt;photos/12&lt;/code&gt; または &lt;code&gt;/photos/long/path/to/12&lt;/code&gt; に一致し、 &lt;code&gt;params[:other]&lt;/code&gt; を &lt;code&gt;&quot;12&quot;&lt;/code&gt; または &lt;code&gt;&quot;long/path/to/12&quot;&lt;/code&gt; に設定します。スターが前に付いたフラグメントは、「ワイルドカードセグメント」と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="6e794fda21608573b4957498e3f119f175ac228c" translate="yes" xml:space="preserve">
          <source>This route would match paths such as &lt;code&gt;/photos/A12345&lt;/code&gt;, but not &lt;code&gt;/photos/893&lt;/code&gt;. You can more succinctly express the same route this way:</source>
          <target state="translated">このルートは &lt;code&gt;/photos/A12345&lt;/code&gt; などのパスに一致しますが、 &lt;code&gt;/photos/893&lt;/code&gt; には一致しません。この方法で同じルートをより簡潔に表現できます：</target>
        </trans-unit>
        <trans-unit id="88307a9a355c9cfda7c63f87346f4b8d457bfac3" translate="yes" xml:space="preserve">
          <source>This route would respond to paths such as &lt;code&gt;/photos/1/with_user/2&lt;/code&gt;. In this case, &lt;code&gt;params&lt;/code&gt; would be &lt;code&gt;{ controller: 'photos', action: 'show', id: '1', user_id: '2' }&lt;/code&gt;.</source>
          <target state="translated">このルートは、 &lt;code&gt;/photos/1/with_user/2&lt;/code&gt; などのパスに応答します。この場合、 &lt;code&gt;params&lt;/code&gt; は &lt;code&gt;{ controller: 'photos', action: 'show', id: '1', user_id: '2' }&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="8fc25f6a8ab0b96bceea194ab647bc637647c8f4" translate="yes" xml:space="preserve">
          <source>This sanitize helper will HTML encode all tags and strip all attributes that aren't specifically allowed.</source>
          <target state="translated">このサニタイズヘルパーは、すべてのタグをHTMLエンコードし、特に許可されていないすべての属性を削除します。</target>
        </trans-unit>
        <trans-unit id="5909b520101c5e8f8ea7f5b936b6a0ba245d8416" translate="yes" xml:space="preserve">
          <source>This section covers how to make the &lt;code&gt;User&lt;/code&gt; class configurable, followed by general configuration tips for the engine.</source>
          <target state="translated">このセクションでは、 &lt;code&gt;User&lt;/code&gt; クラスを構成可能にする方法について説明し、続いてエンジンの一般的な構成のヒントを示します。</target>
        </trans-unit>
        <trans-unit id="ce851e7bd6dfa7a8a7aab4b2ca0f3b0b2ab8cf00" translate="yes" xml:space="preserve">
          <source>This section explains how to add and/or override engine MVC functionality in the main Rails application.</source>
          <target state="translated">ここでは、メインのRailsアプリケーションにエンジンのMVC機能を追加および/またはオーバーライドする方法を説明します。</target>
        </trans-unit>
        <trans-unit id="919a0c9a7ba5508d98414a70e473b42a00002d44" translate="yes" xml:space="preserve">
          <source>This section uses count as an example method in this preamble, but the options described apply to all sub-sections.</source>
          <target state="translated">このセクションでは、この前文ではcountをメソッドの例として使用していますが、記載されているオプションはすべてのサブセクションに適用されます。</target>
        </trans-unit>
        <trans-unit id="366a2e60a1f26887202760405004422dda63c6d2" translate="yes" xml:space="preserve">
          <source>This section will explain how to add a method to String that will be available anywhere in your Rails application.</source>
          <target state="translated">ここでは、Railsアプリケーションのどこでも利用できるようにStringにメソッドを追加する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="170a3d51ce6ad6c8b8d190303b295cb96ceb842c" translate="yes" xml:space="preserve">
          <source>This section will provide a step-by-step guide to creating a job and enqueuing it.</source>
          <target state="translated">ここでは、ジョブを作成してエンキューするまでの手順を順を追って解説していきます。</target>
        </trans-unit>
        <trans-unit id="38da0dbe2a5686429679c4badc45fcbedbf87454" translate="yes" xml:space="preserve">
          <source>This section will provide a step-by-step guide to creating a mailer and its views.</source>
          <target state="translated">ここでは、メーラーの作成方法とそのビューについて、ステップバイステップで解説します。</target>
        </trans-unit>
        <trans-unit id="996b1979fa871d3971a5413e931ca1f8a0454986" translate="yes" xml:space="preserve">
          <source>This sets &lt;code&gt;:name&lt;/code&gt; field on products to a &lt;code&gt;NOT NULL&lt;/code&gt; column and the default value of the &lt;code&gt;:approved&lt;/code&gt; field from true to false.</source>
          <target state="translated">これにより、製品の &lt;code&gt;:name&lt;/code&gt; フィールドが &lt;code&gt;NOT NULL&lt;/code&gt; 列に設定 &lt;code&gt;:approved&lt;/code&gt; 、：approvedフィールドのデフォルト値がtrueからfalseに設定されます。</target>
        </trans-unit>
        <trans-unit id="2c101b3e3300554fce3b4c6e14c72955ac25863e" translate="yes" xml:space="preserve">
          <source>This should be not be called manually but set in database.yml.</source>
          <target state="translated">これは手動で呼び出すのではなく、database.ymlで設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="b9bd825fd18aa062058d3d233dd21f8c957147a4" translate="yes" xml:space="preserve">
          <source>This should not result in any noticeable differences for most applications. However, if you need some non-mailer methods to be executed synchronously, and you were previously relying on the synchronous proxying behavior, you should define them as class methods on the mailer class directly:</source>
          <target state="translated">これにより、ほとんどのアプリケーションでは目立った違いは生じないはずです。しかし、メーラではないいくつかのメソッドを同期的に実行する必要があり、以前は同期プロキシ動作に依存していた場合は、メーラクラスのクラスメソッドとして直接定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="029ad8bff1dbfaba67cfda070c4aea0016bf8c83" translate="yes" xml:space="preserve">
          <source>This simplifies</source>
          <target state="translated">これは単純化します。</target>
        </trans-unit>
        <trans-unit id="4bcd150fa2e648ee216ab53da70e278e981e8e0d" translate="yes" xml:space="preserve">
          <source>This simplifies maintenance and keeps things clean by allowing related code to be grouped before inclusion elsewhere.</source>
          <target state="translated">これにより、メンテナンスが簡素化され、関連するコードをグループ化してから他の場所に含めることができるようになり、物事をきれいに保つことができるようになります。</target>
        </trans-unit>
        <trans-unit id="6c36327b0b450f9facc49b6d6fdaeb4ff9516cd5" translate="yes" xml:space="preserve">
          <source>This small step has some wonderful ripple effects. We can</source>
          <target state="translated">この小さなステップは素晴らしい波動効果を持っています。私たちは</target>
        </trans-unit>
        <trans-unit id="f45ab8191cf4093a46a3a866a54714973d196495" translate="yes" xml:space="preserve">
          <source>This snippet means that when this file is loaded, it will encounter &lt;code&gt;ActiveRecord::Base&lt;/code&gt;. This encounter causes Ruby to look for the definition of that constant and will require it. This causes the entire Active Record framework to be loaded on boot.</source>
          <target state="translated">このスニペットは、このファイルがロードされると、 &lt;code&gt;ActiveRecord::Base&lt;/code&gt; 遭遇することを意味します。この遭遇により、Rubyはその定数の定義を探し、それを必要とします。これにより、起動時にActive Recordフレームワーク全体がロードされます。</target>
        </trans-unit>
        <trans-unit id="aa881d45f0c4366521f545464e5ba3e7812d19ea" translate="yes" xml:space="preserve">
          <source>This solution has aforementioned advantages, however, you may not be able or may not want to provide different localizations (&quot;language versions&quot;) on different domains. The most obvious solution would be to include locale code in the URL params (or request path).</source>
          <target state="translated">この解決策には前述のような利点がありますが、ドメインごとに異なるローカライズ (「言語バージョン」)を提供することができないかもしれませんし、提供したくないかもしれません。最もわかりやすい解決策は、URL のパラメータ (またはリクエストパス)にロケールコードを含めることでしょう。</target>
        </trans-unit>
        <trans-unit id="6cc35be7d9ae462482385e6372e8203e7e3b83dc" translate="yes" xml:space="preserve">
          <source>This surprising constant resolution can be observed with any qualifying class:</source>
          <target state="translated">この驚くべき定数分解能は、どのような予選クラスでも観察できます。</target>
        </trans-unit>
        <trans-unit id="3d6e5bed0ce1b0863d024c50daf0ff2f44eb581d" translate="yes" xml:space="preserve">
          <source>This table does not follow the Rails conventions at all. Because simple PostgreSQL views are updateable by default, we can wrap it as follows:</source>
          <target state="translated">このテーブルはRailsの規約に全く従っていません。単純なPostgreSQLのビューはデフォルトで更新可能なので、以下のようにラップします。</target>
        </trans-unit>
        <trans-unit id="d654789a6b34795bd8eecb0dd8fa3b82b8d4a534" translate="yes" xml:space="preserve">
          <source>This tells Rails to look for template variations of the same format. You can specify a list of variants by passing the &lt;code&gt;:variants&lt;/code&gt; option with a symbol or an array.</source>
          <target state="translated">これは、同じ形式のテンプレートのバリエーションを探すようにRailsに指示します。バリアントのリストを指定するには、シンボルまたは配列とともに &lt;code&gt;:variants&lt;/code&gt; オプションを渡します。</target>
        </trans-unit>
        <trans-unit id="92accf5b96f44c594837e65bd538fd5330ba5c91" translate="yes" xml:space="preserve">
          <source>This tells the application that you still want to perform a &lt;code&gt;GET&lt;/code&gt; request to the &lt;code&gt;index&lt;/code&gt; action of this controller, but you want to use the engine's route to get there, rather than the application's one.</source>
          <target state="translated">これは、このコントローラーの &lt;code&gt;index&lt;/code&gt; アクションに対して &lt;code&gt;GET&lt;/code&gt; リクエストを実行する必要があるが、アプリケーションのルートではなく、エンジンのルートを使用してそこに到達することをアプリケーションに通知します。</target>
        </trans-unit>
        <trans-unit id="cb493140b3c17b27b3930bd0085286984f205efa" translate="yes" xml:space="preserve">
          <source>This tells us that we don't have the necessary models (Hickwall and Wickwall) that we are trying to test. We can easily generate these models in our &quot;dummy&quot; Rails application by running the following commands from the &lt;code&gt;test/dummy&lt;/code&gt; directory:</source>
          <target state="translated">これは、テストしようとしている必要なモデル（HickwallとWickwall）がないことを示しています。 &lt;code&gt;test/dummy&lt;/code&gt; ディレクトリから次のコマンドを実行することにより、「ダミー」Railsアプリケーションでこれらのモデルを簡単に生成できます。</target>
        </trans-unit>
        <trans-unit id="10dd27cd48dfc49d4b02b59dd1189e4f38d50cc2" translate="yes" xml:space="preserve">
          <source>This test is pretty simple and only asserts that the channel subscribes the connection to a particular stream.</source>
          <target state="translated">このテストは非常に単純で、チャンネルが特定のストリームへの接続を購読していることだけを主張しています。</target>
        </trans-unit>
        <trans-unit id="b43c64186934ad15a78ee71a0e7c3eb3082193d8" translate="yes" xml:space="preserve">
          <source>This test is pretty simple and only asserts that the job got the work done as expected.</source>
          <target state="translated">このテストは非常に単純で、仕事が期待通りに終わったと断言しているだけです。</target>
        </trans-unit>
        <trans-unit id="afebf0aa9349219f73e863c9df89b502a00da789" translate="yes" xml:space="preserve">
          <source>This test should now pass.</source>
          <target state="translated">これでこのテストは合格するはずです。</target>
        </trans-unit>
        <trans-unit id="56961ab49613bc56e2996a3331a4d079b93b9639" translate="yes" xml:space="preserve">
          <source>This time we point the form to the &lt;code&gt;update&lt;/code&gt; action, which is not defined yet but will be very soon.</source>
          <target state="translated">今回は、フォームが &lt;code&gt;update&lt;/code&gt; アクションを指すようにします。これはまだ定義されていませんが、すぐに定義されます。</target>
        </trans-unit>
        <trans-unit id="9ca70f5f3dc1dd42668e4a159b6a2429abbf41f6" translate="yes" xml:space="preserve">
          <source>This tutorial assumes you have basic Rails knowledge from reading the &lt;a href=&quot;getting_started&quot;&gt;Getting Started with Rails Guide&lt;/a&gt;.</source>
          <target state="translated">このチュートリアルは、&lt;a href=&quot;getting_started&quot;&gt;「Railsスタートガイド」を&lt;/a&gt;読んでRailsの基本的な知識があることを前提としています。</target>
        </trans-unit>
        <trans-unit id="3d3bd7a5e7de97b9f032a27bc89818fb97a80f0b" translate="yes" xml:space="preserve">
          <source>This type is mapped to Ruby &lt;a href=&quot;https://ruby-doc.org/core-2.2.2/Range.html&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="translated">このタイプは、Ruby &lt;a href=&quot;https://ruby-doc.org/core-2.2.2/Range.html&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt;オブジェクトにマップされます。</target>
        </trans-unit>
        <trans-unit id="d7aa7b6c5ac24dec69a78ce68fc4a7ade298e860" translate="yes" xml:space="preserve">
          <source>This unique ID is useful for tracing a request from end-to-end as part of logging or debugging. This relies on the Rack variable set by the &lt;a href=&quot;requestid&quot;&gt;ActionDispatch::RequestId&lt;/a&gt; middleware.</source>
          <target state="translated">この一意のIDは、ロギングまたはデバッグの一部としてエンドツーエンドからリクエストをトレースするのに役立ちます。これは、&lt;a href=&quot;requestid&quot;&gt;ActionDispatch :: RequestId&lt;/a&gt;ミドルウェアによって設定されたRack変数に依存しています。</target>
        </trans-unit>
        <trans-unit id="5f64fa1df58f66d796291430ff6825e8cfabc422" translate="yes" xml:space="preserve">
          <source>This validation is very specific to web applications and this 'acceptance' does not need to be recorded anywhere in your database. If you don't have a field for it, the helper will just create a virtual attribute. If the field does exist in your database, the &lt;code&gt;accept&lt;/code&gt; option must be set to or include &lt;code&gt;true&lt;/code&gt; or else the validation will not run.</source>
          <target state="translated">この検証はWebアプリケーションに固有のものであり、この「承認」はデータベースのどこにも記録する必要はありません。フィールドがない場合、ヘルパーは仮想属性を作成します。フィールドがデータベースに存在する場合、 &lt;code&gt;accept&lt;/code&gt; オプションを &lt;code&gt;true&lt;/code&gt; に設定するか含める必要があります。そうしないと、検証が実行されません。</target>
        </trans-unit>
        <trans-unit id="b3a0c8db08f46cab5cfdea7374449e3ea7d2643f" translate="yes" xml:space="preserve">
          <source>This validation will work with all of the association types.</source>
          <target state="translated">この検証は、すべてのアソシエーション・タイプで機能します。</target>
        </trans-unit>
        <trans-unit id="a416a8d7b0d7770891a41f445e4cfc9153eeb6f9" translate="yes" xml:space="preserve">
          <source>This validator defers to the Active Model validation for presence, adding the check to see that an associated object is not marked for destruction. This prevents the parent object from validating successfully and saving, which then deletes the associated object, thus putting the parent object into an invalid state.</source>
          <target state="translated">このバリデータはアクティブモデルのバリデーションを優先し、関連するオブジェクトが破棄の対象になっていないかどうかのチェックを追加します。これにより、親オブジェクトのバリデーションが正常に行われて保存されることを防ぎ、関連するオブジェクトが削除されて親オブジェクトが無効な状態になります。</target>
        </trans-unit>
        <trans-unit id="78c93e981f9362b83125078215501e8c63d15d26" translate="yes" xml:space="preserve">
          <source>This value can be later fetched using either &lt;code&gt;:key&lt;/code&gt; or &lt;code&gt;'key'&lt;/code&gt;.</source>
          <target state="translated">この値は、後で &lt;code&gt;:key&lt;/code&gt; または &lt;code&gt;'key'&lt;/code&gt; を使用してフェッチできます。</target>
        </trans-unit>
        <trans-unit id="e0b4044796f51dddd7358d3a25c148eaaaf81ce8" translate="yes" xml:space="preserve">
          <source>This verifier can be used to generate and verify signed messages in the application.</source>
          <target state="translated">このベリファイアを使用して、アプリケーション内で署名済みメッセージを生成して検証することができます。</target>
        </trans-unit>
        <trans-unit id="0dc6e041dee5ce11365d9c669e9362b10f8b2b00" translate="yes" xml:space="preserve">
          <source>This way it is possible to use the partial without the need to declare all local variables.</source>
          <target state="translated">この方法では、すべてのローカル変数を宣言する必要なくパーシャルを使用することができます。</target>
        </trans-unit>
        <trans-unit id="ce96deed83fa3f2a3c48034aaece9fcc4fd976c2" translate="yes" xml:space="preserve">
          <source>This way you can move inside the file and see the code above the line where you added the &lt;code&gt;byebug&lt;/code&gt; call. Finally, to see where you are in the code again you can type &lt;code&gt;list=&lt;/code&gt;</source>
          <target state="translated">これにより、ファイル内を移動して、 &lt;code&gt;byebug&lt;/code&gt; 呼び出しを追加した行の上にあるコードを確認できます。最後に、コードのどこにいるかをもう一度確認するには、 &lt;code&gt;list=&lt;/code&gt; 入力します。</target>
        </trans-unit>
        <trans-unit id="2ef600fc0b9bad91b0106d7dd09941d637df28c1" translate="yes" xml:space="preserve">
          <source>This way you can provide special translations for various error messages at different points in your models inheritance chain and in the attributes, models, or default scopes.</source>
          <target state="translated">このようにして、モデルの継承チェーンや属性、モデル、デフォルトスコープの異なるポイントで、様々なエラーメッセージに対して特別な翻訳を提供することができます。</target>
        </trans-unit>
        <trans-unit id="dcac8da51b29825b04cb1707ac04cd86a8bef4bc" translate="yes" xml:space="preserve">
          <source>This way, if an action sets a notice or an alert message, the layout will display it automatically.</source>
          <target state="translated">こうすることで、アクションが通知やアラートメッセージを設定した場合、レイアウトが自動的に表示します。</target>
        </trans-unit>
        <trans-unit id="552eed590ff40e116e6775d26eab6fd8aa7cc01f" translate="yes" xml:space="preserve">
          <source>This way, the &lt;code&gt;before_destroy&lt;/code&gt; gets executed before the &lt;code&gt;dependent: :destroy&lt;/code&gt; is called, and the data is still available.</source>
          <target state="translated">このように、 &lt;code&gt;before_destroy&lt;/code&gt; は &lt;code&gt;dependent: :destroy&lt;/code&gt; が呼び出される前に実行され、データは引き続き利用可能です。</target>
        </trans-unit>
        <trans-unit id="da5ffdee1702839500a02d13e03206410520dadf" translate="yes" xml:space="preserve">
          <source>This way, the client either sends only the hidden field (representing the check box is unchecked), or both fields. Since the HTML specification says key/value pairs have to be sent in the same order they appear in the form, and parameters extraction gets the last occurrence of any repeated key in the query string, that works for ordinary forms.</source>
          <target state="translated">この方法では、クライアントは隠しフィールドのみを送信するか(チェックボックスがチェックされていないことを表す)、または両方のフィールドを送信します。HTMLの仕様では、キーと値のペアはフォームに表示される順番と同じ順番で送信されなければならず、パラメータ抽出はクエリ文字列の中で繰り返されるキーの最後の出現を取得するので、通常のフォームではこれが機能します。</target>
        </trans-unit>
        <trans-unit id="c357b658da2eb3a5e83cb262d8556b10f5849eeb" translate="yes" xml:space="preserve">
          <source>This way, you can separate model and model attribute names from text inside views, and all of this from the &quot;defaults&quot; (e.g. date and time formats). Other stores for the i18n library could provide different means of such separation.</source>
          <target state="translated">このようにして、モデルやモデル属性名をビュー内のテキストから分離することができ、これらすべてを「デフォルト」(日付や時刻の形式など)から分離することができます。i18n ライブラリの他のストアは、このような分離の異なる手段を提供することができます。</target>
        </trans-unit>
        <trans-unit id="90897c4cace33b6b3b81396934d7f66552fc95da" translate="yes" xml:space="preserve">
          <source>This will add &lt;code&gt;app/views/direct&lt;/code&gt; to the end of the lookup paths.</source>
          <target state="translated">これにより、 &lt;code&gt;app/views/direct&lt;/code&gt; がルックアップパスの最後に追加されます。</target>
        </trans-unit>
        <trans-unit id="e63c54344163d6dadd2274516afdaf16ce6bcf3a" translate="yes" xml:space="preserve">
          <source>This will allow you to specify which models to destroy in the attributes hash by adding a form element for the &lt;code&gt;_destroy&lt;/code&gt; parameter with a value that evaluates to &lt;code&gt;true&lt;/code&gt; (eg. 1, '1', true, or 'true'):</source>
          <target state="translated">これにより、 &lt;code&gt;_destroy&lt;/code&gt; パラメーターのフォーム要素を &lt;code&gt;true&lt;/code&gt; と評価される値（例：1、 '1'、true、または 'true'）で追加することにより、属性ハッシュで破棄するモデルを指定できます。</target>
        </trans-unit>
        <trans-unit id="a67465a53d1c7b44290f957f6736edb684f7e42c" translate="yes" xml:space="preserve">
          <source>This will also create routing helpers such as &lt;code&gt;magazine_ads_url&lt;/code&gt; and &lt;code&gt;edit_magazine_ad_path&lt;/code&gt;. These helpers take an instance of Magazine as the first parameter (&lt;code&gt;magazine_ads_url(@magazine)&lt;/code&gt;).</source>
          <target state="translated">これにより、 &lt;code&gt;magazine_ads_url&lt;/code&gt; や &lt;code&gt;edit_magazine_ad_path&lt;/code&gt; などのルーティングヘルパーも作成されます。これらのヘルパーは、Magazineのインスタンスを最初のパラメーターとして使用します（ &lt;code&gt;magazine_ads_url(@magazine)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="5f05910d168dd2e7b873c8c8b483bcfa7a005ecd" translate="yes" xml:space="preserve">
          <source>This will assign &amp;ldquo;weblog_standard&amp;rdquo; as the WeblogController's layout for all actions except for the &lt;code&gt;rss&lt;/code&gt; action, which will be rendered directly, without wrapping a layout around the rendered view.</source>
          <target state="translated">これにより、 &lt;code&gt;rss&lt;/code&gt; アクションを除くすべてのアクションのWeblogControllerのレイアウトとして「weblog_standard」が割り当てられます。これは、レンダリングされたビューの周りにレイアウトをラップすることなく、直接レンダリングされます。</target>
        </trans-unit>
        <trans-unit id="2cb47c745d6bfc8f2425c96cfe1b1d075a290769" translate="yes" xml:space="preserve">
          <source>This will automatically create the corresponding &lt;a href=&quot;#scopes&quot;&gt;scopes&lt;/a&gt; to query the model. Methods to transition between states and query the current state are also added.</source>
          <target state="translated">これにより、対応する&lt;a href=&quot;#scopes&quot;&gt;スコープ&lt;/a&gt;が自動的に作成され、モデルをクエリします。状態間を遷移し、現在の状態を照会するメソッドも追加されています。</target>
        </trans-unit>
        <trans-unit id="3a266bdb0ffdd739b93eafa98b37d0bd86eb0fc6" translate="yes" xml:space="preserve">
          <source>This will automatically include a security token in all forms and Ajax requests generated by Rails. If the security token doesn't match what was expected, an exception will be thrown.</source>
          <target state="translated">これにより、Railsが生成するすべてのフォームとAjaxリクエストに自動的にセキュリティトークンが含まれるようになります。セキュリティトークンが期待されたものと一致しない場合は例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="c2688665b23b7e8fcef5368b613f3bd1b831b1ba" translate="yes" xml:space="preserve">
          <source>This will build an array of objects from the database for the scope, converting them into an array and iterating through them using &lt;code&gt;Array#select&lt;/code&gt;.</source>
          <target state="translated">これにより、データベースからスコープ用のオブジェクトの配列が作成され、オブジェクトが配列に変換され、 &lt;code&gt;Array#select&lt;/code&gt; を使用して反復されます。</target>
        </trans-unit>
        <trans-unit id="eea2107956649c6c0807f2d8c76f050b93113c0b" translate="yes" xml:space="preserve">
          <source>This will clear all named routes and reload config/routes.rb if the file has been modified from last load. To absolutely force reloading, use &lt;code&gt;reload!&lt;/code&gt;.</source>
          <target state="translated">これにより、すべての名前付きルートがクリアされ、ファイルが最後のロードから変更されている場合はconfig / routes.rbがリロードされます。絶対にリロードを強制するには、 &lt;code&gt;reload!&lt;/code&gt; 使用してください！。</target>
        </trans-unit>
        <trans-unit id="0bc40807db89eb423564e922ca82e75c6fe1ae1d" translate="yes" xml:space="preserve">
          <source>This will connect to a new database for the queries inside the block. By default the `:writing` role will be used since all connections must be assigned a role. If you would like to use a different role you can pass a hash to database:</source>
          <target state="translated">これはブロック内のクエリ用の新しいデータベースに接続します。デフォルトでは `:writing` ロールが使用されます。別のロールを使用したい場合は、データベースにハッシュを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="c57269c9aa5df1a940d6b8b91a691ded351bdf1f" translate="yes" xml:space="preserve">
          <source>This will connect to the database named &lt;code&gt;blog_development&lt;/code&gt; using the &lt;code&gt;postgresql&lt;/code&gt; adapter. This same information can be stored in a URL and provided via an environment variable like this:</source>
          <target state="translated">これは、 &lt;code&gt;postgresql&lt;/code&gt; アダプターを使用して &lt;code&gt;blog_development&lt;/code&gt; という名前のデータベースに接続します。これと同じ情報をURLに保存し、次のような環境変数を介して提供できます。</target>
        </trans-unit>
        <trans-unit id="caf1348f85efdb24907365e0e86d242c0b27732b" translate="yes" xml:space="preserve">
          <source>This will create 1000 very simple fixtures.</source>
          <target state="translated">これにより、非常にシンプルな備品が1000個作成されます。</target>
        </trans-unit>
        <trans-unit id="d6d75b5e504b1b631c89ae85e982ab79f5ed20a4" translate="yes" xml:space="preserve">
          <source>This will create &lt;code&gt;logout_path&lt;/code&gt; and &lt;code&gt;logout_url&lt;/code&gt; as named route helpers in your application. Calling &lt;code&gt;logout_path&lt;/code&gt; will return &lt;code&gt;/exit&lt;/code&gt;</source>
          <target state="translated">これにより、アプリケーションの名前付きルートヘルパーとして &lt;code&gt;logout_path&lt;/code&gt; と &lt;code&gt;logout_url&lt;/code&gt; が作成されます。 &lt;code&gt;logout_path&lt;/code&gt; を呼び出すと &lt;code&gt;/exit&lt;/code&gt; が返されます</target>
        </trans-unit>
        <trans-unit id="17cb90fdc58783a11912cf731d2c9b3634b84a2c" translate="yes" xml:space="preserve">
          <source>This will create a &lt;code&gt;Product&lt;/code&gt; model, mapped to a &lt;code&gt;products&lt;/code&gt; table at the database. By doing this you'll also have the ability to map the columns of each row in that table with the attributes of the instances of your model. Suppose that the &lt;code&gt;products&lt;/code&gt; table was created using an SQL (or one of its extensions) statement like:</source>
          <target state="translated">これにより、データベースの &lt;code&gt;products&lt;/code&gt; テーブルにマップされた &lt;code&gt;Product&lt;/code&gt; モデルが作成されます。これを行うことにより、そのテーブルの各行の列をモデルのインスタンスの属性にマップすることもできます。次のようなSQL（またはその拡張機能の1つ）ステートメントを使用して &lt;code&gt;products&lt;/code&gt; テーブルが作成されたとします。</target>
        </trans-unit>
        <trans-unit id="4d848877cdcbdc72e7235775c465573e4ce9123f" translate="yes" xml:space="preserve">
          <source>This will create a Rails application called Blog in a &lt;code&gt;blog&lt;/code&gt; directory and install the gem dependencies that are already mentioned in &lt;code&gt;Gemfile&lt;/code&gt; using &lt;code&gt;bundle install&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;blog&lt;/code&gt; ディレクトリにBlogというRailsアプリケーションが作成され、 &lt;code&gt;bundle install&lt;/code&gt; を使用して &lt;code&gt;Gemfile&lt;/code&gt; ですでに言及されているgem依存関係がインストールされます。</target>
        </trans-unit>
        <trans-unit id="c8396fb6973acd136e824b9e7505c904be1d80c6" translate="yes" xml:space="preserve">
          <source>This will create a URL for that specific blob with that specific variant, which the &lt;a href=&quot;../representationscontroller&quot;&gt;ActiveStorage::RepresentationsController&lt;/a&gt; can then produce on-demand.</source>
          <target state="translated">これにより、特定のバリアントを持つ特定のblobのURLが作成され、&lt;a href=&quot;../representationscontroller&quot;&gt;ActiveStorage :: RepresentationsController&lt;/a&gt;がオンデマンドで生成できるようになります。</target>
        </trans-unit>
        <trans-unit id="1a7c1825f8c6720c2fe95b8cf2b2f3c53bcf7139" translate="yes" xml:space="preserve">
          <source>This will create a URL for that specific blob with that specific variant, which the &lt;a href=&quot;representationscontroller&quot;&gt;ActiveStorage::RepresentationsController&lt;/a&gt; can then produce on-demand.</source>
          <target state="translated">これにより、特定のバリアントを持つ特定のblobのURLが作成され、&lt;a href=&quot;representationscontroller&quot;&gt;ActiveStorage :: RepresentationsController&lt;/a&gt;がオンデマンドで生成できるようになります。</target>
        </trans-unit>
        <trans-unit id="90d5f6bd0b355a0b48c47782e4fc7945f94b8a1f" translate="yes" xml:space="preserve">
          <source>This will create a connection handler for switching between connections, look up the config hash using the &lt;code&gt;database_key&lt;/code&gt; and finally establishes a connection to that config.</source>
          <target state="translated">これにより、接続を切り替えるための接続ハンドラーが作成され、 &lt;code&gt;database_key&lt;/code&gt; を使用して構成ハッシュを検索し、最後にその構成への接続を確立します。</target>
        </trans-unit>
        <trans-unit id="977360c989f208719ae1fa97256fc5d6c5dfe6d9" translate="yes" xml:space="preserve">
          <source>This will create a number of routes for each of the &lt;code&gt;articles&lt;/code&gt; and &lt;code&gt;comments&lt;/code&gt; controller. For &lt;code&gt;Admin::ArticlesController&lt;/code&gt;, Rails will create:</source>
          <target state="translated">これにより、 &lt;code&gt;articles&lt;/code&gt; と &lt;code&gt;comments&lt;/code&gt; コントローラーごとにいくつかのルートが作成されます。以下のために &lt;code&gt;Admin::ArticlesController&lt;/code&gt; 、Railsは作成します。</target>
        </trans-unit>
        <trans-unit id="4dc53f62c1f3b6923d80ecece1b9b66574873458" translate="yes" xml:space="preserve">
          <source>This will create a number of routes for each of the posts and comments controller. For &lt;code&gt;Admin::PostsController&lt;/code&gt;, Rails will create:</source>
          <target state="translated">これにより、投稿とコメントのコントローラーごとに多数のルートが作成されます。以下のために &lt;code&gt;Admin::PostsController&lt;/code&gt; 、Railsは作成します。</target>
        </trans-unit>
        <trans-unit id="1d835575fda2c997e5940227096b69c38806a716" translate="yes" xml:space="preserve">
          <source>This will create an appropriately named empty migration:</source>
          <target state="translated">これにより、適切な名前の空のマイグレーションが作成されます。</target>
        </trans-unit>
        <trans-unit id="688252d096b068de65da8350686d66b6600477d3" translate="yes" xml:space="preserve">
          <source>This will create and process a variant of the avatar blob that's constrained to a height and width of 100. Then it'll upload said variant to the service according to a derivative key of the blob and the transformations.</source>
          <target state="translated">これは、高さと幅が 100 に制限されたアバターブロブのバリアントを作成して処理します。そして、ブロブの派生キーと変換に応じて、そのバリアントをサービスにアップロードします。</target>
        </trans-unit>
        <trans-unit id="0af97e6d52f7a53ef081d8839974e5e26885487f" translate="yes" xml:space="preserve">
          <source>This will create and process a variant of the avatar blob that's constrained to a height and width of 100px. Then it'll upload said variant to the service according to a derivative key of the blob and the transformations.</source>
          <target state="translated">これは、高さと幅が100pxに制限されたアバターブロブのバリアントを作成して処理します。そして、ブロブの派生キーと変換に応じて、そのバリアントをサービスにアップロードします。</target>
        </trans-unit>
        <trans-unit id="0d52e4fd185c14a75ce4f70036fcf8cfb8d0ed50" translate="yes" xml:space="preserve">
          <source>This will create routing helpers such as &lt;code&gt;magazine_periodical_ads_url&lt;/code&gt; and &lt;code&gt;edit_magazine_periodical_ad_path&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;magazine_periodical_ads_url&lt;/code&gt; や &lt;code&gt;edit_magazine_periodical_ad_path&lt;/code&gt; などのルーティングヘルパーが作成されます。</target>
        </trans-unit>
        <trans-unit id="305c233031351d2e461ee258b0bb207c5f3e99d6" translate="yes" xml:space="preserve">
          <source>This will define a &lt;code&gt;user_path&lt;/code&gt; method that will be available in controllers, helpers, and views that will go to a route such as &lt;code&gt;/bob&lt;/code&gt;. Inside the &lt;code&gt;show&lt;/code&gt; action of &lt;code&gt;UsersController&lt;/code&gt;, &lt;code&gt;params[:username]&lt;/code&gt; will contain the username for the user. Change &lt;code&gt;:username&lt;/code&gt; in the route definition if you do not want your parameter name to be &lt;code&gt;:username&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;/bob&lt;/code&gt; などのルートに移動するコントローラー、ヘルパー、ビューで使用できる &lt;code&gt;user_path&lt;/code&gt; メソッドが定義されます。 &lt;code&gt;UsersController&lt;/code&gt; の &lt;code&gt;show&lt;/code&gt; アクション内では、 &lt;code&gt;params[:username]&lt;/code&gt; にユーザーのユーザー名が含まれます。パラメータ名を &lt;code&gt;:username&lt;/code&gt; にしたくない場合は、ルート定義の &lt;code&gt;:username&lt;/code&gt; を変更します。</target>
        </trans-unit>
        <trans-unit id="8df8b7633c46dc154ef0ad2888d096ba1bae755d" translate="yes" xml:space="preserve">
          <source>This will disconnect all the connections established for &lt;code&gt;User.find(1)&lt;/code&gt;, across all servers running on all machines, because it uses the internal channel that all of these servers are subscribed to.</source>
          <target state="translated">これにより、すべてのマシンで実行されているすべてのサーバーにわたって、 &lt;code&gt;User.find(1)&lt;/code&gt; に対して確立されたすべての接続が切断されます。これは、これらのサーバーすべてがサブスクライブしている内部チャネルを使用するためです。</target>
        </trans-unit>
        <trans-unit id="dafbdfd2b90448c92a3ed045a44bc71dddfdc45f" translate="yes" xml:space="preserve">
          <source>This will do three main things for you:</source>
          <target state="translated">これにより、主に3つのことができるようになります。</target>
        </trans-unit>
        <trans-unit id="ee79d82211be7a526dec218f3776f7a9c60fc128" translate="yes" xml:space="preserve">
          <source>This will enable Rails to recognize paths such as &lt;code&gt;/comments/new/preview&lt;/code&gt; with GET, and route to the &lt;code&gt;preview&lt;/code&gt; action of &lt;code&gt;CommentsController&lt;/code&gt;. It will also create the &lt;code&gt;preview_new_comment_url&lt;/code&gt; and &lt;code&gt;preview_new_comment_path&lt;/code&gt; route helpers.</source>
          <target state="translated">これにより、Railsは &lt;code&gt;/comments/new/preview&lt;/code&gt; などのパスをGETで認識し、 &lt;code&gt;CommentsController&lt;/code&gt; の &lt;code&gt;preview&lt;/code&gt; アクションにルーティングできるようになります。また、 &lt;code&gt;preview_new_comment_url&lt;/code&gt; および &lt;code&gt;preview_new_comment_path&lt;/code&gt; ルートヘルパーも作成します。</target>
        </trans-unit>
        <trans-unit id="5a9b358ad4b9c74e2ca4539517283dc157d82a65" translate="yes" xml:space="preserve">
          <source>This will enable Rails to recognize paths such as &lt;code&gt;/photos/search&lt;/code&gt; with GET, and route to the &lt;code&gt;search&lt;/code&gt; action of &lt;code&gt;PhotosController&lt;/code&gt;. It will also create the &lt;code&gt;search_photos_url&lt;/code&gt; and &lt;code&gt;search_photos_path&lt;/code&gt; route helpers.</source>
          <target state="translated">これにより、Railsは &lt;code&gt;/photos/search&lt;/code&gt; などのパスをGETで認識し、 &lt;code&gt;PhotosController&lt;/code&gt; の &lt;code&gt;search&lt;/code&gt; アクションにルーティングできるようになります。また、 &lt;code&gt;search_photos_url&lt;/code&gt; および &lt;code&gt;search_photos_path&lt;/code&gt; ルートヘルパーも作成します。</target>
        </trans-unit>
        <trans-unit id="4db922acc5c6067700fd0bc3f47ccdd3a7e22251" translate="yes" xml:space="preserve">
          <source>This will enable Rails to recognize paths such as &lt;code&gt;/photos/search&lt;/code&gt; with GET, and route to the search action of &lt;code&gt;PhotosController&lt;/code&gt;. It will also create the &lt;code&gt;search_photos_url&lt;/code&gt; and &lt;code&gt;search_photos_path&lt;/code&gt; route helpers.</source>
          <target state="translated">これにより、Railsは &lt;code&gt;/photos/search&lt;/code&gt; などのパスをGETで認識し、 &lt;code&gt;PhotosController&lt;/code&gt; の検索アクションにルーティングできるようになります。また、 &lt;code&gt;search_photos_url&lt;/code&gt; および &lt;code&gt;search_photos_path&lt;/code&gt; ルートヘルパーも作成します。</target>
        </trans-unit>
        <trans-unit id="d1230522740eff7749a0f2bf9ea29ec09aebf7e0" translate="yes" xml:space="preserve">
          <source>This will execute one query to load the addresses and load the addressables with one query per addressable type. For example, if all the addressables are either of class Person or Company, then a total of 3 queries will be executed. The list of addressable types to load is determined on the back of the addresses loaded. This is not supported if Active Record has to fallback to the previous implementation of eager loading and will raise &lt;a href=&quot;../eagerloadpolymorphicerror&quot;&gt;ActiveRecord::EagerLoadPolymorphicError&lt;/a&gt;. The reason is that the parent model's type is a column value so its corresponding table name cannot be put in the &lt;code&gt;FROM&lt;/code&gt;/&lt;code&gt;JOIN&lt;/code&gt; clauses of that query.</source>
          <target state="translated">これは1つのクエリを実行してアドレスをロードし、アドレス可能なタイプごとに1つのクエリでアドレス可能なアドレスをロードします。たとえば、すべてのアドレス指定可能クラスがPersonまたはCompanyの場合、合計3つのクエリが実行されます。ロードするアドレス可能なタイプのリストは、ロードされたアドレスの裏側で決定されます。Active Recordが以前の積極的な読み込みの実装にフォールバックする必要があり、&lt;a href=&quot;../eagerloadpolymorphicerror&quot;&gt;ActiveRecord :: EagerLoadPolymorphicError&lt;/a&gt;が発生する場合、これはサポートされません。その理由は、親モデルのタイプが列値であるため、対応するテーブル名をそのクエリの &lt;code&gt;FROM&lt;/code&gt; / &lt;code&gt;JOIN&lt;/code&gt; 句に入れることができないためです。</target>
        </trans-unit>
        <trans-unit id="eb6eff373294234fc7d4840384a2c5a1ac45c275" translate="yes" xml:space="preserve">
          <source>This will find all clients created yesterday by using a &lt;code&gt;BETWEEN&lt;/code&gt; SQL statement:</source>
          <target state="translated">これにより、 &lt;code&gt;BETWEEN&lt;/code&gt; SQLステートメントを使用して昨日作成されたすべてのクライアントが見つかります。</target>
        </trans-unit>
        <trans-unit id="b3bd54fd95988d965be979b72eb8b09345044893" translate="yes" xml:space="preserve">
          <source>This will find all clients who have orders that were created yesterday, again using a &lt;code&gt;BETWEEN&lt;/code&gt; SQL expression.</source>
          <target state="translated">これにより、 &lt;code&gt;BETWEEN&lt;/code&gt; SQL式を使用して、昨日作成された注文を持つすべてのクライアントが検索されます。</target>
        </trans-unit>
        <trans-unit id="e6fba8340bf9902a6a1fb631e9a96f361c3cadf2" translate="yes" xml:space="preserve">
          <source>This will find the category with id 1 and eager load all of the associated articles, the associated articles' tags and comments, and every comment's guest association.</source>
          <target state="translated">これは、id 1のカテゴリを見つけ、関連する記事、関連する記事のタグとコメント、およびすべてのコメントのゲストの関連付けのすべてを熱心にロードします。</target>
        </trans-unit>
        <trans-unit id="12050b7e0e8c3a855ebea0332254fe28225b6788" translate="yes" xml:space="preserve">
          <source>This will fire up Puma, a web server distributed with Rails by default. To see your application in action, open a browser window and navigate to http://localhost:3000. You should see the Rails default information page:</source>
          <target state="translated">これにより、デフォルトでRailsで配布されているWebサーバPumaが起動します。アプリケーションの動作を確認するには、ブラウザウィンドウを開き、http://localhost:3000 に移動します。Railsのデフォルト情報ページが表示されるはずです。</target>
        </trans-unit>
        <trans-unit id="e526dce7655ad97b08efd074ac104ec65a63cd7f" translate="yes" xml:space="preserve">
          <source>This will generate SQL like this:</source>
          <target state="translated">このようなSQLが生成されます。</target>
        </trans-unit>
        <trans-unit id="11305323ce54bbde6178971aaae7db5ae181aa89" translate="yes" xml:space="preserve">
          <source>This will generate routes such as &lt;code&gt;admin_photos_path&lt;/code&gt; and &lt;code&gt;admin_accounts_path&lt;/code&gt; which map to &lt;code&gt;/admin/photos&lt;/code&gt; and &lt;code&gt;/admin/accounts&lt;/code&gt; respectively.</source>
          <target state="translated">これにより、 &lt;code&gt;admin_photos_path&lt;/code&gt; や &lt;code&gt;admin_accounts_path&lt;/code&gt; などのルートが生成され、それぞれ &lt;code&gt;/admin/photos&lt;/code&gt; および &lt;code&gt;/admin/accounts&lt;/code&gt; にマップされます。</target>
        </trans-unit>
        <trans-unit id="93c13bd6eebfa01de31672d51d7d40db17d2ce18" translate="yes" xml:space="preserve">
          <source>This will generate the &lt;code&gt;exciting_path&lt;/code&gt; and &lt;code&gt;exciting_url&lt;/code&gt; helpers which can be used to navigate to this mounted app.</source>
          <target state="translated">これは、生成されます &lt;code&gt;exciting_path&lt;/code&gt; と &lt;code&gt;exciting_url&lt;/code&gt; これにナビゲートするために使用することができヘルパーアプリをマウント。</target>
        </trans-unit>
        <trans-unit id="eb8e4ad95786c9c308a2a16beb745394e0df227c" translate="yes" xml:space="preserve">
          <source>This will generate the controller code and tests for an &lt;code&gt;Article&lt;/code&gt; resource. You can take a look at the file &lt;code&gt;articles_controller_test.rb&lt;/code&gt; in the &lt;code&gt;test/controllers&lt;/code&gt; directory.</source>
          <target state="translated">これにより、 &lt;code&gt;Article&lt;/code&gt; リソースのコントローラーコードとテストが生成されます。あなたは、ファイルを見てとることができ &lt;code&gt;articles_controller_test.rb&lt;/code&gt; における &lt;code&gt;test/controllers&lt;/code&gt; ディレクトリ。</target>
        </trans-unit>
        <trans-unit id="48104d9494c74c4133057a5e28bedb4f47214280" translate="yes" xml:space="preserve">
          <source>This will generate the exact same routes as the first example. You can also specify the &lt;code&gt;:shallow&lt;/code&gt; option in the parent resource, in which case all of the nested resources will be shallow:</source>
          <target state="translated">これにより、最初の例とまったく同じルートが生成されます。親リソースで &lt;code&gt;:shallow&lt;/code&gt; オプションを指定することもできます。その場合、ネストされたリソースはすべて浅くなります。</target>
        </trans-unit>
        <trans-unit id="20be9b915ee11ece206017b88e7234d8db8e06fe" translate="yes" xml:space="preserve">
          <source>This will generate the file &lt;code&gt;timestamp_add_fieldname_to_tablename.rb&lt;/code&gt;, which will look like this:</source>
          <target state="translated">これにより、ファイル &lt;code&gt;timestamp_add_fieldname_to_tablename.rb&lt;/code&gt; が生成されます。これは次のようになります。</target>
        </trans-unit>
        <trans-unit id="dd0f2e6c3b72347c22def94e6470c429ddd03bae" translate="yes" xml:space="preserve">
          <source>This will generate the following HTML:</source>
          <target state="translated">すると、以下のようなHTMLが生成されます。</target>
        </trans-unit>
        <trans-unit id="40fe0881d573c0a43296b612394692067593adfa" translate="yes" xml:space="preserve">
          <source>This will generate the following things:</source>
          <target state="translated">これにより、以下のようなものが生成されます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
