<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="meteor">
    <body>
      <group id="meteor">
        <trans-unit id="2d873733389b731ccb6810f037b7574fe7350931" translate="yes" xml:space="preserve">
          <source>AccountsClient#logout()</source>
          <target state="translated">AccountsClient#logout()</target>
        </trans-unit>
        <trans-unit id="c6d36ea75d01bd0feb9a54654a78dfdefdff935a" translate="yes" xml:space="preserve">
          <source>AccountsClient#logoutOtherClients()</source>
          <target state="translated">AccountsClient#logoutOtherClients()</target>
        </trans-unit>
        <trans-unit id="1540993f501a89e34837847a656eb099f4cfe546" translate="yes" xml:space="preserve">
          <source>AccountsClient()</source>
          <target state="translated">AccountsClient()</target>
        </trans-unit>
        <trans-unit id="64d35ce0d75364de62b4e75eb9a48ef04d5827a9" translate="yes" xml:space="preserve">
          <source>AccountsCommon#config()</source>
          <target state="translated">AccountsCommon#config()</target>
        </trans-unit>
        <trans-unit id="d13e8bf51ba293e16f284e56f026336ed6fc5d7c" translate="yes" xml:space="preserve">
          <source>AccountsCommon#onLogin()</source>
          <target state="translated">AccountsCommon#onLogin()</target>
        </trans-unit>
        <trans-unit id="29d1a61992a980f4b4a9f2d5dbdab4cfbb7d8372" translate="yes" xml:space="preserve">
          <source>AccountsCommon#onLoginFailure()</source>
          <target state="translated">AccountsCommon#onLoginFailure()</target>
        </trans-unit>
        <trans-unit id="17fde8fb86c818cbfbce1fafd7353d77e51566c9" translate="yes" xml:space="preserve">
          <source>AccountsCommon#onLogout()</source>
          <target state="translated">AccountsCommon#onLogout()</target>
        </trans-unit>
        <trans-unit id="435e10616965a58d7b686c1eca8ce03c343fc71a" translate="yes" xml:space="preserve">
          <source>AccountsCommon#user()</source>
          <target state="translated">AccountsCommon#user()</target>
        </trans-unit>
        <trans-unit id="b8866b82d476f1d8dece76aa668336930e8479eb" translate="yes" xml:space="preserve">
          <source>AccountsCommon#userId()</source>
          <target state="translated">AccountsCommon#userId()</target>
        </trans-unit>
        <trans-unit id="92b2b7d6ab1935e2258a8aaaeebf4cbff62264e5" translate="yes" xml:space="preserve">
          <source>AccountsCommon()</source>
          <target state="translated">AccountsCommon()</target>
        </trans-unit>
        <trans-unit id="7c0928d46425660f76f3f12c8e5211d6a20a2f90" translate="yes" xml:space="preserve">
          <source>AccountsServer#onCreateUser()</source>
          <target state="translated">AccountsServer#onCreateUser()</target>
        </trans-unit>
        <trans-unit id="02a325378242e0565a24b87d9b3ece573ed4fd81" translate="yes" xml:space="preserve">
          <source>AccountsServer#validateLoginAttempt()</source>
          <target state="translated">AccountsServer#validateLoginAttempt()</target>
        </trans-unit>
        <trans-unit id="71aaba816be4fe80032c8e291cd8ec524467785a" translate="yes" xml:space="preserve">
          <source>AccountsServer#validateNewUser()</source>
          <target state="translated">AccountsServer#validateNewUser()</target>
        </trans-unit>
        <trans-unit id="49a13f3a5de809ead09bba2bca8c799552d93578" translate="yes" xml:space="preserve">
          <source>AccountsServer()</source>
          <target state="translated">AccountsServer()</target>
        </trans-unit>
        <trans-unit id="011c9788d6e0be0ea332791b0acefb3c0e817f6f" translate="yes" xml:space="preserve">
          <source>Across Meteor applications, there are some common patterns of data loading and management on the client side that are worth knowing. We&amp;rsquo;ll go into more detail about some of these in the &lt;a href=&quot;ui-ux&quot;&gt;UI/UX Article&lt;/a&gt;.</source>
          <target state="translated">Meteorアプリケーション全体で、クライアント側でのデータのロードと管理には、知っておく価値のある一般的なパターンがいくつかあります。これらのいくつかについては、&lt;a href=&quot;ui-ux&quot;&gt;UI / UX Article&lt;/a&gt;で詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="aa77549e9e718390ad59a70bcb9f8ce07f6acc29" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;$ANDROID_HOME/tools&lt;/code&gt;, and &lt;code&gt;$ANDROID_HOME/platform-tools&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$ANDROID_HOME/tools&lt;/code&gt; と &lt;code&gt;$ANDROID_HOME/platform-tools&lt;/code&gt; を &lt;code&gt;PATH&lt;/code&gt; に追加します</target>
        </trans-unit>
        <trans-unit id="b30293095796dd25179a0b165702884dacb01284" translate="yes" xml:space="preserve">
          <source>Add a custom datatype to EJSON.</source>
          <target state="translated">EJSONにカスタムデータ型を追加します。</target>
        </trans-unit>
        <trans-unit id="7a9876a95776ae24503e37be6497a8549c2750e6" translate="yes" xml:space="preserve">
          <source>Add a document to the collection. A document is just an object, and its fields can contain any combination of EJSON-compatible datatypes (arrays, objects, numbers, strings, &lt;code&gt;null&lt;/code&gt;, true, and false).</source>
          <target state="translated">ドキュメントをコレクションに追加します。ドキュメントは単なるオブジェクトであり、そのフィールドにはEJSON互換のデータ型（配列、オブジェクト、数値、文字列、 &lt;code&gt;null&lt;/code&gt; 、true、false）の任意の組み合わせを含めることができます。</target>
        </trans-unit>
        <trans-unit id="362f23c3893b39183ed59714e372f15f7fc6317e" translate="yes" xml:space="preserve">
          <source>Add a preference for your build as described in the &lt;a href=&quot;http://cordova.apache.org/docs/en/5.1.1/config_ref_index.md.html#The%20config.xml%20File_global_preferences&quot;&gt;Cordova documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://cordova.apache.org/docs/en/5.1.1/config_ref_index.md.html#The%20config.xml%20File_global_preferences&quot;&gt;Cordovaのドキュメントの&lt;/a&gt;説明に従って、ビルドの設定を追加します。</target>
        </trans-unit>
        <trans-unit id="a23cdf254dbd7a10b8883eec86d6146b48165821" translate="yes" xml:space="preserve">
          <source>Add a rule that matches against a stream of events describing method or subscription attempts. Each event is an object with the following properties:</source>
          <target state="translated">メソッドまたはサブスクリプションの試行を記述するイベントのストリームに対してマッチするルールを追加します。各イベントは、以下のプロパティを持つオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="e2dab10a73fe6cfb3e34ad0bafd8901d568cb909" translate="yes" xml:space="preserve">
          <source>Add an email address for a user. Use this instead of directly updating the database. The operation will fail if there is a different user with an email only differing in case. If the specified user has an existing email only differing in case however, we replace it.</source>
          <target state="translated">ユーザーのメールアドレスを追加します。データベースを直接更新するのではなく、これを使用します。この操作は、大文字と小文字が異なるEメールのみを持つ別のユーザーがいる場合に失敗します。しかし、指定されたユーザーに大文字と小文字が異なるだけの既存の電子メールがある場合は、それを置き換えます。</target>
        </trans-unit>
        <trans-unit id="3d7db431b9155e6d75c4fbbcd640b667f2a8c9ea" translate="yes" xml:space="preserve">
          <source>Add button</source>
          <target state="translated">ボタンの追加</target>
        </trans-unit>
        <trans-unit id="9d6a5d02b3ad734d502fa1851246c8de28e70006" translate="yes" xml:space="preserve">
          <source>Add packages to your Meteor project. By convention, names of community packages include the name of the maintainer. For example: &lt;code&gt;meteor add iron:router&lt;/code&gt;. You can add multiple packages with one command.</source>
          <target state="translated">Meteorプロジェクトにパッケージを追加します。慣例により、コミュニティパッケージの名前にはメンテナの名前が含まれます。例： &lt;code&gt;meteor add iron:router&lt;/code&gt; 。1つのコマンドで複数のパッケージを追加できます。</target>
        </trans-unit>
        <trans-unit id="3920f6d0b00d2751a5ea3733ff82e0270a4a960a" translate="yes" xml:space="preserve">
          <source>Add top-level fields onto the user document</source>
          <target state="translated">ユーザードキュメントにトップレベルのフィールドを追加する</target>
        </trans-unit>
        <trans-unit id="df0650afac1d054969ef58c6351adcf0a428807c" translate="yes" xml:space="preserve">
          <source>Adding CSS</source>
          <target state="translated">CSSの追加</target>
        </trans-unit>
        <trans-unit id="64747959a1e2f4cdcc191c7686aa129e36e36792" translate="yes" xml:space="preserve">
          <source>Adding Cordova platforms</source>
          <target state="translated">コルドバプラットフォームの追加</target>
        </trans-unit>
        <trans-unit id="388f1da366d64049acbe13b239d2d31dbd4d8856" translate="yes" xml:space="preserve">
          <source>Adding JavaScript</source>
          <target state="translated">JavaScriptの追加</target>
        </trans-unit>
        <trans-unit id="5f5e54ebc13cbf10855d194409446e2aef511baf" translate="yes" xml:space="preserve">
          <source>Adding Sass, Less, or Stylus mixins/variables</source>
          <target state="translated">Sass、Less、またはStylusの追加 ミックスイン/変数</target>
        </trans-unit>
        <trans-unit id="114997acdf8a6a0d1ae4b97ece4c85485198b588" translate="yes" xml:space="preserve">
          <source>Adding and using the package is straightforward:</source>
          <target state="translated">パッケージの追加や使用方法は簡単です。</target>
        </trans-unit>
        <trans-unit id="b3a033b09d8548343def60883be8ca053af2d743" translate="yes" xml:space="preserve">
          <source>Adding fields on user registration</source>
          <target state="translated">ユーザー登録にフィールドを追加する</target>
        </trans-unit>
        <trans-unit id="3dcf7dac1471438719bdd8017ba88f48d68076b0" translate="yes" xml:space="preserve">
          <source>Adding files and assets</source>
          <target state="translated">ファイルと資産の追加</target>
        </trans-unit>
        <trans-unit id="0bbbb60ef568f1a1cf6b30da1fd5363aa39c2200" translate="yes" xml:space="preserve">
          <source>Adding other assets</source>
          <target state="translated">その他の資産の追加</target>
        </trans-unit>
        <trans-unit id="3671e86de175ad1079e42e821c4583315f71e916" translate="yes" xml:space="preserve">
          <source>Adding types will make your code more readable and less prone to runtime errors.</source>
          <target state="translated">型を追加することで、コードが読みやすくなり、ランタイムエラーが発生しにくくなります。</target>
        </trans-unit>
        <trans-unit id="a94eb94b9f2637bb630167bcd28d6708ac844625" translate="yes" xml:space="preserve">
          <source>Additional parameters can be passed in the same way as the &lt;code&gt;node&lt;/code&gt; command, and the &lt;a href=&quot;https://nodejs.org/dist/latest-v4.x/docs/api/cli.html&quot;&gt;Node.js documentation&lt;/a&gt; should be consulted for the full list of commands and for a better understanding of their usage.</source>
          <target state="translated">追加のパラメーターは、 &lt;code&gt;node&lt;/code&gt; コマンドと同じ方法で渡すことができます&lt;a href=&quot;https://nodejs.org/dist/latest-v4.x/docs/api/cli.html&quot;&gt;。Node.jsのドキュメント&lt;/a&gt;を参照して、コマンドの完全なリストを確認し、コマンドの使用法をよく理解してください。</target>
        </trans-unit>
        <trans-unit id="c61759d64b2898cfdf46cf87c8b9324871181fa3" translate="yes" xml:space="preserve">
          <source>Additional parameters can be passed in the same way as the &lt;code&gt;npm&lt;/code&gt; command (e.g. &lt;code&gt;meteor npm rebuild&lt;/code&gt;, &lt;code&gt;meteor npm ls&lt;/code&gt;, etc.) and the &lt;a href=&quot;https://docs.npmjs.com/&quot;&gt;npm documentation&lt;/a&gt; should be consulted for the full list of commands and for a better understanding of their usage.</source>
          <target state="translated">追加のパラメーターを &lt;code&gt;npm&lt;/code&gt; コマンドと同じ方法で渡すことができ（例： &lt;code&gt;meteor npm rebuild&lt;/code&gt; 、 &lt;code&gt;meteor npm ls&lt;/code&gt; など）、コマンドの完全なリストとその使用法をよりよく理解するには、&lt;a href=&quot;https://docs.npmjs.com/&quot;&gt;npmのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="19bd855e6f1778a7f8fc5ece5a25da1f035bdf66" translate="yes" xml:space="preserve">
          <source>Additionally we can see an example of a &lt;em&gt;template helper&lt;/em&gt;&amp;mdash;&lt;code&gt;{{checkedClass todo}}&lt;/code&gt; calls out to a &lt;code&gt;checkedClass&lt;/code&gt; helper defined in a separate JavaScript file. The HTML template and JavaScript file together define the &lt;code&gt;Todos_item&lt;/code&gt; component:</source>
          <target state="translated">さらに、&lt;em&gt;テンプレートヘルパーの&lt;/em&gt;例を見ることができます&amp;mdash; &lt;code&gt;{{checkedClass todo}}&lt;/code&gt; は、別のJavaScriptファイルで定義されている &lt;code&gt;checkedClass&lt;/code&gt; ヘルパーを呼び出します。HTMLテンプレートとJavaScriptファイルは共に、 &lt;code&gt;Todos_item&lt;/code&gt; コンポーネントを定義します。</target>
        </trans-unit>
        <trans-unit id="f8ce3ccec6bd3c5fd49a861dea388545b217a16c" translate="yes" xml:space="preserve">
          <source>Additionally, Meteor offers a &amp;ldquo;full application&amp;rdquo; test mode. You can run this with &lt;code&gt;meteor test --full-app&lt;/code&gt;.</source>
          <target state="translated">さらに、Meteorは「フルアプリケーション」テストモードを提供します。これは &lt;code&gt;meteor test --full-app&lt;/code&gt; で実行できます。</target>
        </trans-unit>
        <trans-unit id="420379ef392349852612b66fd47cd79ac31dea37" translate="yes" xml:space="preserve">
          <source>Additionally, a helper will re-run if any &lt;em&gt;reactive data source&lt;/em&gt; accessed from within &lt;em&gt;that specific helper&lt;/em&gt; changes.</source>
          <target state="translated">さらに、&lt;em&gt;特定のヘルパー&lt;/em&gt;内からアクセスされた&lt;em&gt;リアクティブデータソース&lt;/em&gt;が変更されると、ヘルパーは再実行されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8ee22dec3b0b7b44ee60e2022b662bed3831d7a0" translate="yes" xml:space="preserve">
          <source>Additionally, each external service has its own login provider package and login function. For example, to support GitHub login, run the following in your terminal:</source>
          <target state="translated">さらに、各外部サービスはそれぞれ独自のログインプロバイダパッケージとログイン機能を持っています。例えば、GitHubのログインをサポートするには、ターミナルで以下を実行します。</target>
        </trans-unit>
        <trans-unit id="c534e06e39d6d2525f18d3c145b1c0626a75e06d" translate="yes" xml:space="preserve">
          <source>Additionally, for better clarity, always explicitly provide a data context to an inclusion rather than letting it inherit the context of the template where it was rendered:</source>
          <target state="translated">さらに、より分かりやすくするために、レンダリングされたテンプレートのコンテキストを継承させるのではなく、常に明示的にデータコンテキストをインクルードに提供してください。</target>
        </trans-unit>
        <trans-unit id="4c8372b30ff5a06321c7ece8a486493759c3ce1d" translate="yes" xml:space="preserve">
          <source>Additionally, the URL could contain an HTTP &lt;a href=&quot;https://en.wikipedia.org/wiki/Query_string&quot;&gt;&lt;em&gt;query string&lt;/em&gt;&lt;/a&gt; (the part after an optional &lt;code&gt;?&lt;/code&gt;). If so, Flow Router will also split it up into named parameters, which it calls &lt;code&gt;queryParams&lt;/code&gt;.</source>
          <target state="translated">さらに、URLにはHTTP &lt;a href=&quot;https://en.wikipedia.org/wiki/Query_string&quot;&gt;&lt;em&gt;クエリ文字列&lt;/em&gt;&lt;/a&gt;（オプションの &lt;code&gt;?&lt;/code&gt; の後の部分）を含めることができます。その場合、Flow Routerはそれを名前付きパラメーターに分割し、 &lt;code&gt;queryParams&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="bd4c77cdf53eb262ea5f0015e70eeaf743c9287d" translate="yes" xml:space="preserve">
          <source>Additionally, this access to the npm that comes with Meteor avoids the need to download and install npm separately.</source>
          <target state="translated">さらに、Meteor に付属の npm にアクセスすることで、別途 npm をダウンロードしてインストールする必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="27c02d14b165a76b6d1d97af30a8ac67b770a868" translate="yes" xml:space="preserve">
          <source>Adds platforms to your Meteor project. You can add multiple platforms with one command. Once a platform has been added, you can use &amp;lsquo;meteor run</source>
          <target state="translated">Meteorプロジェクトにプラットフォームを追加します。1つのコマンドで複数のプラットフォームを追加できます。プラットフォームが追加されたら、 'meteor runを使用できます</target>
        </trans-unit>
        <trans-unit id="780dad50ba3d311b65d5ebf34f62aa966358bec7" translate="yes" xml:space="preserve">
          <source>Adds support for binary and octal numeric literals. For example, &lt;code&gt;0b111110111 === 503&lt;/code&gt; and &lt;code&gt;0o767 === 503&lt;/code&gt;.</source>
          <target state="translated">2進数および8進数のリテラルのサポートを追加します。たとえば、 &lt;code&gt;0b111110111 === 503&lt;/code&gt; および &lt;code&gt;0o767 === 503&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9c800c5082fa959d407b42b07c7d1b7b481b2b63" translate="yes" xml:space="preserve">
          <source>Advanced Method boilerplate</source>
          <target state="translated">高度なメソッドのボイラープレート</target>
        </trans-unit>
        <trans-unit id="0f498dc21b43c27ac7511b2b18666d5a5f39db07" translate="yes" xml:space="preserve">
          <source>Advanced Methods with mdg:validated-method</source>
          <target state="translated">mdg:validated-method での高度なメソッド</target>
        </trans-unit>
        <trans-unit id="823e688534c2f6bc344b4fa9d106758978e7cc6f" translate="yes" xml:space="preserve">
          <source>Advanced Routing</source>
          <target state="translated">高度なルーティング</target>
        </trans-unit>
        <trans-unit id="c21b7ed2ffa893e99aa0f79d44fc9538365b40a9" translate="yes" xml:space="preserve">
          <source>Advanced build customization</source>
          <target state="translated">高度なビルドカスタマイズ</target>
        </trans-unit>
        <trans-unit id="6dad2bf50708ff78286227db8839b9e68c752c7c" translate="yes" xml:space="preserve">
          <source>Advanced concepts</source>
          <target state="translated">高度な概念</target>
        </trans-unit>
        <trans-unit id="8d357a9bd35794ea1054490c87d0401db6aec907" translate="yes" xml:space="preserve">
          <source>Advanced publications</source>
          <target state="translated">先進的な出版物</target>
        </trans-unit>
        <trans-unit id="0e19bf3c9595e917e97cddeb24c3719336161b84" translate="yes" xml:space="preserve">
          <source>After doing the above, you&amp;rsquo;ll need to ensure you &lt;code&gt;npm install&lt;/code&gt; and restart the &lt;code&gt;meteor&lt;/code&gt; process running your app to make sure the PostCSS system has had a chance to set itself up.</source>
          <target state="translated">上記を行った後、あなたは確認する必要があります &lt;code&gt;npm install&lt;/code&gt; と再起動 &lt;code&gt;meteor&lt;/code&gt; 確認PostCSSシステム自体を設定する機会があった作るためにあなたのアプリケーションを実行中のプロセスを。</target>
        </trans-unit>
        <trans-unit id="de0707d98bb40f8516804642b2cf49d9c7baef75" translate="yes" xml:space="preserve">
          <source>After either method, edit the &lt;code&gt;dependencies&lt;/code&gt; attribute of &lt;code&gt;my-app/package.json&lt;/code&gt;, adding &lt;code&gt;&quot;my-package&quot;: &quot;1.0.0&quot;&lt;/code&gt; (use the same version number you chose during &lt;code&gt;meteor npm init&lt;/code&gt;).</source>
          <target state="translated">どちらの方法の後でも、 &lt;code&gt;my-app/package.json&lt;/code&gt; の &lt;code&gt;dependencies&lt;/code&gt; 属性を編集して、 &lt;code&gt;&quot;my-package&quot;: &quot;1.0.0&quot;&lt;/code&gt; 追加します（ &lt;code&gt;meteor npm init&lt;/code&gt; で選択したのと同じバージョン番号を使用します）。</target>
        </trans-unit>
        <trans-unit id="33a8ab90275b0d97dbfc88bef89d7288eb8dd6f2" translate="yes" xml:space="preserve">
          <source>After it has downloaded, launch the installer, and complete the installation steps</source>
          <target state="translated">ダウンロードが完了したら、インストーラを起動し、インストール手順を完了させます。</target>
        </trans-unit>
        <trans-unit id="70adcc2f24d10940cb49cca0c84adfa1b0d09c55" translate="yes" xml:space="preserve">
          <source>After reading this article, you&amp;rsquo;ll know:</source>
          <target state="translated">この記事を読むと、次のことがわかります。</target>
        </trans-unit>
        <trans-unit id="943f92adb8ca1f9f8d14daab023925fef5f8338c" translate="yes" xml:space="preserve">
          <source>After reading this guide, you&amp;rsquo;ll know:</source>
          <target state="translated">このガイドを読むと、次のことがわかります。</target>
        </trans-unit>
        <trans-unit id="005eb5bd81f15573922dd54d30039203a9a6c898" translate="yes" xml:space="preserve">
          <source>After running &lt;code&gt;meteor build&lt;/code&gt; the generated APK will be copied from the &lt;code&gt;&amp;lt;build-output-directory&amp;gt;/android/project/build/outputs/apk&lt;/code&gt; directory to &lt;code&gt;&amp;lt;build-output-directory&amp;gt;/android/release-unsigned.apk&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;meteor build&lt;/code&gt; 実行した後、生成されたAPKは &lt;code&gt;&amp;lt;build-output-directory&amp;gt;/android/project/build/outputs/apk&lt;/code&gt; ディレクトリから &lt;code&gt;&amp;lt;build-output-directory&amp;gt;/android/release-unsigned.apk&lt;/code&gt; にコピーされます。</target>
        </trans-unit>
        <trans-unit id="74b88dbbf986dcebc1fcc206d648cecb38a2bdfa" translate="yes" xml:space="preserve">
          <source>After running &lt;code&gt;meteor build&lt;/code&gt; you can open the generated Xcode project in Xcode:</source>
          <target state="translated">&lt;code&gt;meteor build&lt;/code&gt; を実行した後、生成されたXcodeプロジェクトをXcodeで開くことができます。</target>
        </trans-unit>
        <trans-unit id="dc0c82926387fe8179d7ef85b7e225af7559f304" translate="yes" xml:space="preserve">
          <source>After the download and installation completes, you will need to accept the license agreement. If you start Xcode for the first time, a dialog will pop up where you can read the license agreement and accept it. You can close Xcode directly afterwards.</source>
          <target state="translated">ダウンロードとインストールが完了したら、使用許諾契約書に同意する必要があります。初めてXcodeを起動すると、使用許諾契約書を読み、同意するためのダイアログが表示されます。その後、直接Xcodeを閉じることができます。</target>
        </trans-unit>
        <trans-unit id="37174beccd1fb462ac9c5d818f04785570a1b698" translate="yes" xml:space="preserve">
          <source>After the relevant data updates have been sent to the correct client, the server sends back the last message in the Method life cycle - the DDP &lt;code&gt;updated&lt;/code&gt; message with the relevant Method ID. The client rolls back any changes to client side data made in the Method simulation in step 1, and replaces them with the actual changes sent from the server in step 5.</source>
          <target state="translated">関連するデータ更新が適切なクライアントに送信された後、サーバーはメソッドライフサイクルの最後のメッセージ（関連するメソッドIDを含むDDP &lt;code&gt;updated&lt;/code&gt; メッセージ）を送り返します。クライアントは、手順1のメソッドシミュレーションで行われたクライアント側データへの変更をロールバックし、手順5でサーバーから送信された実際の変更に置き換えます。</target>
        </trans-unit>
        <trans-unit id="6045767e885a139875b55851d1f12f99f9ecb722" translate="yes" xml:space="preserve">
          <source>After you have called one of the two functions above or the user has cancelled the process, call the &lt;code&gt;done&lt;/code&gt; function you got in the link callback. This will tell Meteor to get out of the special state it enters when you&amp;rsquo;re doing one of the email account flows.</source>
          <target state="translated">上記の2つの関数のいずれかを呼び出した後、またはユーザーがプロセスをキャンセルした後、リンクコールバックで取得した &lt;code&gt;done&lt;/code&gt; 関数を呼び出します。これにより、メールアカウントフローの1つを実行しているときに、Meteorが特別な状態から抜け出すように指示されます。</target>
        </trans-unit>
        <trans-unit id="13f2d652f70945cb85fc5562fc3600a535ffb359" translate="yes" xml:space="preserve">
          <source>After:</source>
          <target state="translated">After:</target>
        </trans-unit>
        <trans-unit id="90a2684dcb2f4fa25ba6119784d55dc08cc30349" translate="yes" xml:space="preserve">
          <source>Again, generally speaking, this applies to applications whose &lt;code&gt;MAIL_URL&lt;/code&gt; already includes &lt;code&gt;:465&lt;/code&gt;. If an application&amp;rsquo;s mail provider supports &lt;code&gt;STARTTLS&lt;/code&gt; (i.e. if the &lt;code&gt;MAIL_URL&lt;/code&gt; uses &lt;code&gt;:587&lt;/code&gt; and &lt;em&gt;sometimes&lt;/em&gt;&lt;code&gt;:25&lt;/code&gt;), the application can continue to use &lt;code&gt;smtp://&lt;/code&gt; (without the &lt;code&gt;s&lt;/code&gt;) and the TLS/SSL upgrade will be made by the mail server, if supported.</source>
          <target state="translated">繰り返しになりますが、一般的に言えば、これは &lt;code&gt;MAIL_URL&lt;/code&gt; に既に &lt;code&gt;:465&lt;/code&gt; が含まれているアプリケーションに適用されます。アプリケーションのメールプロバイダーが &lt;code&gt;STARTTLS&lt;/code&gt; をサポートする場合（つまり、 &lt;code&gt;MAIL_URL&lt;/code&gt; が &lt;code&gt;:587&lt;/code&gt; を使用し、&lt;em&gt;場合によっては&lt;/em&gt; &lt;code&gt;:25&lt;/code&gt; を使用する場合）、アプリケーションは引き続き &lt;code&gt;smtp://&lt;/code&gt; （ &lt;code&gt;s&lt;/code&gt; なし）を使用でき、TLS / SSLアップグレードはメールサーバーによって行われます。サポートされている場合。</target>
        </trans-unit>
        <trans-unit id="871a26ff2335d08b2c118de393b550bd331fa89e" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;template.view.autorun&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;template.view.autorun&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="9d2f89083c0856e21e6a8a489f9f54eb4005e901" translate="yes" xml:space="preserve">
          <source>All EJSON serializations are also valid JSON. For example an object with a date and a binary buffer would be serialized in EJSON as:</source>
          <target state="translated">すべてのEJSONシリアライズは有効なJSONでもあります。例えば、日付とバイナリバッファを持つオブジェクトは、以下のようにEJSONでシリアライズされます。</target>
        </trans-unit>
        <trans-unit id="c9e603ce0abb2007db07db4ccab534d73d3a9df2" translate="yes" xml:space="preserve">
          <source>All JavaScript files outside special directories are loaded on both the client and the server. Meteor provides the variables &lt;a href=&quot;http://docs.meteor.com/#/full/meteor_isserver&quot;&gt;&lt;code&gt;Meteor.isClient&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://docs.meteor.com/#/full/meteor_isserver&quot;&gt;&lt;code&gt;Meteor.isServer&lt;/code&gt;&lt;/a&gt; so that your code can alter its behavior depending on whether it&amp;rsquo;s running on the client or the server.</source>
          <target state="translated">特別なディレクトリの外にあるすべてのJavaScriptファイルは、クライアントとサーバーの両方にロードされます。Meteorは変数&lt;a href=&quot;http://docs.meteor.com/#/full/meteor_isserver&quot;&gt; &lt;code&gt;Meteor.isClient&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;http://docs.meteor.com/#/full/meteor_isserver&quot;&gt; &lt;code&gt;Meteor.isServer&lt;/code&gt; を&lt;/a&gt;提供するため、コードがクライアントまたはサーバーのどちらで実行されているかに応じてコードの動作を変更できます。</target>
        </trans-unit>
        <trans-unit id="9e8b0b6c02b0ad9e7952b034de5ba33e9fce9112" translate="yes" xml:space="preserve">
          <source>All code written in CoffeeScript compiles to JavaScript under the hood, and is completely compatible with any code in other packages that is written in JS or ES2015.</source>
          <target state="translated">CoffeeScriptで書かれたすべてのコードは、フードの下でJavaScriptにコンパイルされ、JSやES2015で書かれた他のパッケージのコードと完全に互換性があります。</target>
        </trans-unit>
        <trans-unit id="a0a020dbb6fef8eb548e295eef6601c35c3e144e" translate="yes" xml:space="preserve">
          <source>All documents tracked by this subscription are removed from the mergebox, which may or may not mean they are also removed from the client.</source>
          <target state="translated">このサブスクリプションによって追跡されたすべてのドキュメントはマージボックスから削除されますが、これはクライアントからも削除されることを意味する場合もあれば、そうでない場合もあります。</target>
        </trans-unit>
        <trans-unit id="c0bb857a7d1900721d806817b5c50f8454ffb7f6" translate="yes" xml:space="preserve">
          <source>All files inside a top-level directory called &lt;code&gt;private/&lt;/code&gt; are only accessible from server code and can be loaded via the &lt;a href=&quot;http://docs.meteor.com/#/full/assets_getText&quot;&gt;&lt;code&gt;Assets&lt;/code&gt;&lt;/a&gt; API. This can be used for private data files and any files that are in your project directory that you don&amp;rsquo;t want to be accessible from the outside.</source>
          <target state="translated">&lt;code&gt;private/&lt;/code&gt; と呼ばれる最上位ディレクトリ内のすべてのファイルは、サーバーコードからのみアクセスでき、&lt;a href=&quot;http://docs.meteor.com/#/full/assets_getText&quot;&gt; &lt;code&gt;Assets&lt;/code&gt; &lt;/a&gt; APIを介してロードできます。これは、プライベートデータファイルや、プロジェクトディレクトリにある、外部からアクセスしたくないファイルに使用できます。</target>
        </trans-unit>
        <trans-unit id="a32c8f4b73b8e5a3f17029d7910cd9aac3badebc" translate="yes" xml:space="preserve">
          <source>All files inside a top-level directory called &lt;code&gt;public/&lt;/code&gt; are served as-is to the client. When referencing these assets, do not include &lt;code&gt;public/&lt;/code&gt; in the URL, write the URL as if they were all in the top level. For example, reference &lt;code&gt;public/bg.png&lt;/code&gt; as &lt;code&gt;&amp;lt;img src='/bg.png' /&amp;gt;&lt;/code&gt;. This is the best place for &lt;code&gt;favicon.ico&lt;/code&gt;, &lt;code&gt;robots.txt&lt;/code&gt;, and similar files.</source>
          <target state="translated">&lt;code&gt;public/&lt;/code&gt; と呼ばれる最上位ディレクトリ内のすべてのファイルは、そのままクライアントに提供されます。これらのアセットを参照するときは、URL に &lt;code&gt;public/&lt;/code&gt; を含めず、すべてトップレベルにあるかのようにURLを記述してください。たとえば、 &lt;code&gt;public/bg.png&lt;/code&gt; を &lt;code&gt;&amp;lt;img src='/bg.png' /&amp;gt;&lt;/code&gt; として参照します。これは、 &lt;code&gt;favicon.ico&lt;/code&gt; 、 &lt;code&gt;robots.txt&lt;/code&gt; などのファイルに最適な場所です。</target>
        </trans-unit>
        <trans-unit id="4465f10cd7c7f36f8e4cd583842cd4c0d102e0ec" translate="yes" xml:space="preserve">
          <source>All of the code samples in this guide and future Meteor tutorials will use all of the new ES2015 features. You can also read more about ES2015 and how to get started with it on the Meteor Blog:</source>
          <target state="translated">このガイドおよび今後のMeteorチュートリアルに掲載されているコードサンプルはすべて、ES2015の新機能を使用しています。ES2015 についての詳細や開始方法については、Meteor ブログでもお読みいただけます。</target>
        </trans-unit>
        <trans-unit id="723990a6f27fcab98f5a415ad83cd5c5ca4de9df" translate="yes" xml:space="preserve">
          <source>All of the points above about Methods apply to publications as well:</source>
          <target state="translated">メソッドについては、上記のすべての点が出版物にも適用されます。</target>
        </trans-unit>
        <trans-unit id="c5dae541cb7c9996014e3bef615a095c1468510b" translate="yes" xml:space="preserve">
          <source>All of the suggestions about reusable components apply to smart components. In addition:</source>
          <target state="translated">再利用可能なコンポーネントに関する提案はすべてスマートコンポーネントに適用されます。加えて</target>
        </trans-unit>
        <trans-unit id="0eacaaa162cea7b01acedefcab5315e3e763b005" translate="yes" xml:space="preserve">
          <source>All of these exports are &lt;em&gt;named&lt;/em&gt;, which means other modules can import them using those names:</source>
          <target state="translated">これらのエクスポートはすべて&lt;em&gt;名前&lt;/em&gt;が&lt;em&gt;付けられて&lt;/em&gt;います。つまり、他のモジュールがそれらの名前を使用してインポートできます。</target>
        </trans-unit>
        <trans-unit id="74e1e2eeba53ef9b9a82116509de699a95ae92b5" translate="yes" xml:space="preserve">
          <source>All of these will be addressed in a future release. For full Minimongo release notes, see packages/minimongo/NOTES in the repository.</source>
          <target state="translated">これらはすべて将来のリリースで対応する予定です。Minimongo の完全なリリースノートについては、リポジトリの packages/minimongo/NOTES を参照してください。</target>
        </trans-unit>
        <trans-unit id="38a6beeafe7d8544bb14228c41a3c2cc2a67647b" translate="yes" xml:space="preserve">
          <source>All registered validate login callbacks are called, even if one of the callbacks aborts the login. The later callbacks will see the &lt;code&gt;allowed&lt;/code&gt; field set to &lt;code&gt;false&lt;/code&gt; since the login will now not be successful. This allows later callbacks to override an error from a previous callback; for example, you could override the &amp;ldquo;Incorrect password&amp;rdquo; error with a different message.</source>
          <target state="translated">コールバックの1つがログインを中止した場合でも、登録されているすべての検証ログインコールバックが呼び出されます。その後のコールバックでは、ログインが成功しないため、 &lt;code&gt;allowed&lt;/code&gt; フィールドが &lt;code&gt;false&lt;/code&gt; に設定されていることがわかります。これにより、後のコールバックで前のコールバックからのエラーをオーバーライドできます。たとえば、「パスワードが正しくありません」エラーを別のメッセージで上書きできます。</target>
        </trans-unit>
        <trans-unit id="c3e0d535e821e4718e83f067f6a962f5cedc4b54" translate="yes" xml:space="preserve">
          <source>All three libraries work fine in a Cordova web view, and you can use mobile CSS libraries like Ionic&amp;rsquo;s CSS with any view library.</source>
          <target state="translated">Cordova Webビューでは3つのライブラリーはすべて正常に動作し、IonicのCSSなどのモバイルCSSライブラリーを任意のビューライブラリーで使用できます。</target>
        </trans-unit>
        <trans-unit id="a1f359a9de9a612bd891d2405ea65242c381cd28" translate="yes" xml:space="preserve">
          <source>All you need to do to use CoffeeScript is add the right Meteor package:</source>
          <target state="translated">CoffeeScriptを使うために必要なのは、適切なMeteorパッケージを追加することだけです。</target>
        </trans-unit>
        <trans-unit id="c899e169988b39e5bfb7a2b5eca11c66629d598d" translate="yes" xml:space="preserve">
          <source>All your CSS style files will processed using Meteor&amp;rsquo;s default file load order rules along with any import statements and concatenated, and in a production build also minified. However, it&amp;rsquo;s no secret that writing plain CSS can often be a hassle as there&amp;rsquo;s no way to share common CSS code between different selectors or have a consistent color scheme between different elements. CSS compilers, or pre-processors, solve these issues by adding extra features on top of the CSS language like variables, mixins, math, and more, and in some cases also significantly change the syntax of CSS to be easier to read and write.</source>
          <target state="translated">すべてのCSSスタイルファイルは、Meteorのデフォルトのファイル読み込み順序ルールとインポートステートメントを使用して処理され、連結されます。また、本番ビルドでは縮小されます。ただし、異なるセレクタ間で共通のCSSコードを共有したり、異なる要素間で一貫したカラースキームを使用したりする方法がないため、プレーンなCSSを書くのが面倒なことはよくあります。CSSコンパイラー、またはプリプロセッサーは、変数、ミックスイン、数学などのCSS言語の上に追加機能を追加することでこれらの問題を解決し、場合によってはCSSの構文を大幅に変更して読み書きしやすくします。</target>
        </trans-unit>
        <trans-unit id="67f60d18dabe03b43d5832e7009a144529c64c2d" translate="yes" xml:space="preserve">
          <source>Allocate a new buffer of binary data that EJSON can serialize.</source>
          <target state="translated">EJSONがシリアライズできるバイナリデータの新しいバッファを割り当てます。</target>
        </trans-unit>
        <trans-unit id="f6805e3fbbbc9311f980952c72e2727b8a8ec241" translate="yes" xml:space="preserve">
          <source>Allow users to write directly to this collection from client code, subject to limitations you define.</source>
          <target state="translated">ユーザーがクライアントコードからこのコレクションに直接書き込むことを許可します。</target>
        </trans-unit>
        <trans-unit id="a4137b3979288f95612df052084b414f8bfab28d" translate="yes" xml:space="preserve">
          <source>Allows an array of arguments to be interpolated into a list of arguments to a function call, &lt;code&gt;new&lt;/code&gt; expression, or array literal, without using &lt;code&gt;Function.prototype.apply&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Function.prototype.apply&lt;/code&gt; を使用せずに、引数の配列を関数呼び出し、 &lt;code&gt;new&lt;/code&gt; 式、または配列リテラルへの引数のリストに補間できるようにします。</target>
        </trans-unit>
        <trans-unit id="b1b7c032026344be8c04fa53e07fb1a8351c7599" translate="yes" xml:space="preserve">
          <source>Allows defining block-scoped variables that are not allowed to be redefined:</source>
          <target state="translated">再定義が許可されていないブロックスコープ変数の定義を許可します。</target>
        </trans-unit>
        <trans-unit id="8a261e223e52fee3df2107de49be409a69ab9633" translate="yes" xml:space="preserve">
          <source>Allows object literal properties with dynamically computed keys:</source>
          <target state="translated">動的に計算されたキーを持つオブジェクトリテラルプロパティを許可します。</target>
        </trans-unit>
        <trans-unit id="1b0be52626d91c97baf41417def44f9ca7adced5" translate="yes" xml:space="preserve">
          <source>Allows omitting the value of an object literal property when the desired value is held by a variable that has the same name as the property key. For example, instead of writing &lt;code&gt;{ x: x, y: y, z: &quot;asdf&quot; }&lt;/code&gt; you can just write &lt;code&gt;{ x, y, z: &quot;asdf&quot; }&lt;/code&gt;. Methods can also be written without the &lt;code&gt;: function&lt;/code&gt; property syntax:</source>
          <target state="translated">プロパティキーと同じ名前を持つ変数が目的の値を保持している場合、オブジェクトリテラルプロパティの値を省略できます。例えば、代わりに書き込み &lt;code&gt;{ x: x, y: y, z: &quot;asdf&quot; }&lt;/code&gt; することができますだけ書き込み &lt;code&gt;{ x, y, z: &quot;asdf&quot; }&lt;/code&gt; 。メソッドは、 &lt;code&gt;: function&lt;/code&gt; プロパティの構文なしでも記述できます。</target>
        </trans-unit>
        <trans-unit id="e468a91e79f1a71cef4325535b91f7bcaa6ae065" translate="yes" xml:space="preserve">
          <source>Allows the final parameter of a function to be followed by a comma, provided that parameter is not a &lt;code&gt;...rest&lt;/code&gt; parameter.</source>
          <target state="translated">関数の最後のパラメーターの後にコンマを続けることができます。ただし、パラメーターが &lt;code&gt;...rest&lt;/code&gt; パラメーターでない場合に限ります。</target>
        </trans-unit>
        <trans-unit id="0e8b92fe2e287a1482da35d25fbf3d6a5ee85e46" translate="yes" xml:space="preserve">
          <source>Also &lt;code&gt;Plugin&lt;/code&gt; provides helper functions &lt;code&gt;convertToStandardPath&lt;/code&gt; and &lt;code&gt;convertToOSPath&lt;/code&gt; to convert to a Unix path or to the path expected by the node libraries regardless of the path origin.</source>
          <target state="translated">また、 &lt;code&gt;Plugin&lt;/code&gt; は、ヘルパー関数 &lt;code&gt;convertToStandardPath&lt;/code&gt; および &lt;code&gt;convertToOSPath&lt;/code&gt; を提供して、パスの起点に関係なく、Unixパスまたはノードライブラリが予期するパスに変換します。</target>
        </trans-unit>
        <trans-unit id="244a66bdd7d0ffd24563df38667d5769e773bfbd" translate="yes" xml:space="preserve">
          <source>Also enables &lt;code&gt;...spread&lt;/code&gt; properties in object literal expressions:</source>
          <target state="translated">また、オブジェクトリテラル式で &lt;code&gt;...spread&lt;/code&gt; プロパティを有効にします。</target>
        </trans-unit>
        <trans-unit id="d6ed0d6829c8ffc0c2fa56e75bd0ac24c0a1b548" translate="yes" xml:space="preserve">
          <source>Also of note is the way we use a second DDP connection to the server in order to send these test &amp;ldquo;control&amp;rdquo; method calls.</source>
          <target state="translated">また、これらのテスト「制御」メソッド呼び出しを送信するためにサーバーへの2番目のDDP接続を使用する方法にも注意してください。</target>
        </trans-unit>
        <trans-unit id="6e56f41a3e64c441efa51df70d6389c3f69aad00" translate="yes" xml:space="preserve">
          <source>Also, when changing between subscriptions, there is a brief period where both subscriptions are loaded (see &lt;a href=&quot;#publication-behavior-with-arguments&quot;&gt;Publication behavior when changing arguments&lt;/a&gt; below), so when doing things like pagination, it&amp;rsquo;s exceedingly likely that this will be the case.</source>
          <target state="translated">また、サブスクリプション間で変更する場合、両方のサブスクリプションがロードされる短い期間があります（以下の&lt;a href=&quot;#publication-behavior-with-arguments&quot;&gt;引数を変更するときのパブリケーションの動作を&lt;/a&gt;参照）。そのため、ページ分割などを行う場合、これが当てはまる可能性が非常に高くなります。</target>
        </trans-unit>
        <trans-unit id="bf86eedab7176ccc3c27cb2878ac49cb5f750ae9" translate="yes" xml:space="preserve">
          <source>Alternatively, a publish function can directly control its published record set by calling the functions &lt;a href=&quot;#publish_added&quot;&gt;&lt;code&gt;added&lt;/code&gt;&lt;/a&gt; (to add a new document to the published record set), &lt;a href=&quot;#publish_changed&quot;&gt;&lt;code&gt;changed&lt;/code&gt;&lt;/a&gt; (to change or clear some fields on a document already in the published record set), and &lt;a href=&quot;#publish_removed&quot;&gt;&lt;code&gt;removed&lt;/code&gt;&lt;/a&gt; (to remove documents from the published record set). These methods are provided by &lt;code&gt;this&lt;/code&gt; in your publish function.</source>
          <target state="translated">または、公開関数は、&lt;a href=&quot;#publish_added&quot;&gt; &lt;code&gt;added&lt;/code&gt; &lt;/a&gt;された関数（公開されたレコードセットに新しいドキュメントを追加するため）、&lt;a href=&quot;#publish_changed&quot;&gt; &lt;code&gt;changed&lt;/code&gt; &lt;/a&gt;された関数（公開されたレコードセットに既にあるドキュメントの一部のフィールドを変更またはクリアするため）を呼び出すことにより、公開されたレコードセットを直接制御できます。&lt;a href=&quot;#publish_removed&quot;&gt; &lt;code&gt;removed&lt;/code&gt; &lt;/a&gt;（公開されたレコードセットからドキュメントを削除するため）。これらのメソッドは、公開関数で &lt;code&gt;this&lt;/code&gt; によって提供されます。</target>
        </trans-unit>
        <trans-unit id="efd2d6a35b41ba75c464f4d1936e08a05391f70c" translate="yes" xml:space="preserve">
          <source>Alternatively, if unreleased changes have been made to a plugin you&amp;rsquo;d like to use, you can also have Cordova download plugin code from a Git repository. Note that this will clone the plugin repository on every rebuild however, so this can be rather slow and should be avoided where possible. In contrast to default Cordova, Meteor requires you to specify the exact SHA hash for a commit, rather than allow you to refer to a branch or tag. This is done to guarantee repeatable builds and also avoids unnecessary reinstallation of all plugins because as long as the SHA is the same we know nothing has changed.</source>
          <target state="translated">または、使用したいプラグインにリリースされていない変更が加えられている場合、GitリポジトリからCordovaにプラグインコードをダウンロードさせることもできます。ただし、これにより、再構築のたびにプラグインリポジトリのクローンが作成されるため、時間がかかる可能性があるため、可能な限り回避する必要があります。デフォルトのCordovaとは異なり、Meteorでは、ブランチまたはタグを参照するのではなく、コミットの正確なSHAハッシュを指定する必要があります。これは、繰り返し可能なビルドを保証するために行われ、SHAが同じである限り、何も変更されていないことがわかっているため、すべてのプラグインの不要な再インストールを回避します。</target>
        </trans-unit>
        <trans-unit id="5e23787dd5e40cdd89907e51dd0f07e2a44d82db" translate="yes" xml:space="preserve">
          <source>Alternatively, with a GitHub URL:</source>
          <target state="translated">あるいは、GitHubのURLで。</target>
        </trans-unit>
        <trans-unit id="f5e5ed452a22b3e4b24f4bcc94906278f87cccaa" translate="yes" xml:space="preserve">
          <source>Alternatively, you can also use tools like &lt;a href=&quot;http://sinonjs.org&quot;&gt;Sinon&lt;/a&gt; to stub things directly, as we&amp;rsquo;ll see for example in our &lt;a href=&quot;#simple-integration-test&quot;&gt;simple integration test&lt;/a&gt;.</source>
          <target state="translated">または、&lt;a href=&quot;http://sinonjs.org&quot;&gt;Sinon&lt;/a&gt;などのツールを使用して、直接スタブを作成することもできます。たとえば、&lt;a href=&quot;#simple-integration-test&quot;&gt;簡単な統合テストを&lt;/a&gt;見てみましょう。</target>
        </trans-unit>
        <trans-unit id="0e4572186fef61684a06ab8b00c674b05c07e12f" translate="yes" xml:space="preserve">
          <source>Although Blaze is a very intuitive rendering system, it does have some quirks and complexities that are worth knowing about when you are trying to do complex things.</source>
          <target state="translated">Blaze は非常に直感的なレンダリングシステムですが、複雑なことをしようとしているときには、いくつかの癖や複雑さがあります。</target>
        </trans-unit>
        <trans-unit id="25cad36d229f3e7c7d7f8a0c74d4fd1a5c1c4a32" translate="yes" xml:space="preserve">
          <source>Although Blaze&amp;rsquo;s simple API doesn&amp;rsquo;t necessarily encourage a componentized approach, you can use the &lt;em&gt;template instance&lt;/em&gt; as a convenient place to store internal functionality and state. The template instance can be accessed via &lt;code&gt;this&lt;/code&gt; inside Blaze&amp;rsquo;s lifecycle callbacks and as &lt;code&gt;Template.instance()&lt;/code&gt; in event handlers and helpers. It&amp;rsquo;s also passed as the second argument to event handlers.</source>
          <target state="translated">BlazeのシンプルなAPIは必ずしもコンポーネント化されたアプローチを奨励するものではありませんが、内部機能と状態を保存するための便利な場所として&lt;em&gt;テンプレートインスタンス&lt;/em&gt;を使用できます。テンプレートインスタンスは、Blazeのライフサイクルコールバックの内部から &lt;code&gt;this&lt;/code&gt; およびイベントハンドラーとヘルパーの &lt;code&gt;Template.instance()&lt;/code&gt; としてアクセスできます。また、イベントハンドラーの2番目の引数として渡されます。</target>
        </trans-unit>
        <trans-unit id="d22e9c63e3c21279e3e42409e520c12c353a593e" translate="yes" xml:space="preserve">
          <source>Although Blaze, which is a simple template-based rendering engine, doesn&amp;rsquo;t enforce a lot of these principles (unlike other frameworks like React and Angular) you can enjoy most of the same benefits by following some conventions when writing your Blaze components. This section will outline some of these &amp;ldquo;best practices&amp;rdquo; for writing reusable Blaze components.</source>
          <target state="translated">シンプルなテンプレートベースのレンダリングエンジンであるBlazeはこれらの原則の多くを強制しませんが（ReactやAngularなどの他のフレームワークとは異なり）、Blazeコンポーネントを作成するときにいくつかの規則に従うことで同じ利点のほとんどを享受できます。このセクションでは、再利用可能なBlazeコンポーネントを作成するためのこれらの「ベストプラクティス」のいくつかを概説します。</target>
        </trans-unit>
        <trans-unit id="635a9fd5a93310f71de411255fe35abe8045eca8" translate="yes" xml:space="preserve">
          <source>Although Flow Router can be used to render React components more or less as we&amp;rsquo;ve described above for Blaze, at the time of this writing Flow Router&amp;rsquo;s support for SSR is &lt;a href=&quot;https://kadira.io/blog/meteor/meteor-ssr-support-using-flow-router-and-react&quot;&gt;still experimental&lt;/a&gt;. However, it&amp;rsquo;s probably the best approach right now if you want to use SSR for Meteor.</source>
          <target state="translated">上記でBlazeについて説明したように、Flow Routerを使用してReactコンポーネントを多かれ少なかれレンダリングできますが、この記事の執筆時点では、Flow RouterによるSSRのサポートは&lt;a href=&quot;https://kadira.io/blog/meteor/meteor-ssr-support-using-flow-router-and-react&quot;&gt;まだ実験&lt;/a&gt;段階です。ただし、MeteorにSSRを使用する場合は、現時点でおそらくこれが最善の方法です。</target>
        </trans-unit>
        <trans-unit id="ee92655a563a27ab39f889772a5a30117b788eb8" translate="yes" xml:space="preserve">
          <source>Although Flow Router doesn&amp;rsquo;t take a done callback, we can use &lt;code&gt;Tracker.afterFlush&lt;/code&gt; to wait for all its reactive consequences to occur.</source>
          <target state="translated">Flow Routerは完了コールバックを受け取りませんが、 &lt;code&gt;Tracker.afterFlush&lt;/code&gt; を使用して、すべての反応的な結果が発生するのを待つことができます。</target>
        </trans-unit>
        <trans-unit id="47aab11c85307f6b36496adfd4cd8d785a28dd2e" translate="yes" xml:space="preserve">
          <source>Although Meteor allows you to &lt;a href=&quot;http://docs.meteor.com/#/full/webapp&quot;&gt;write low-level connect handlers&lt;/a&gt; to create any kind of API you like on the server-side, if all you want to do is create a RESTful version of your Methods and Publications, you can often use the &lt;a href=&quot;http://atmospherejs.com/simple/rest&quot;&gt;&lt;code&gt;simple:rest&lt;/code&gt;&lt;/a&gt; package to do this easily. See the &lt;a href=&quot;data-loading#publications-as-rest&quot;&gt;Data Loading&lt;/a&gt; and &lt;a href=&quot;methods&quot;&gt;Methods&lt;/a&gt; articles for more information.</source>
          <target state="translated">Meteorでは&lt;a href=&quot;http://docs.meteor.com/#/full/webapp&quot;&gt;低レベルの接続ハンドラー&lt;/a&gt;を記述してサーバーサイドで好きな種類のAPIを作成できますが、メソッドとパブリケーションのRESTfulバージョンを作成するだけの場合は、多くの場合&lt;a href=&quot;http://atmospherejs.com/simple/rest&quot;&gt; &lt;code&gt;simple:rest&lt;/code&gt; を&lt;/a&gt;使用できます。これを簡単に行うためのパッケージ。詳細については、&lt;a href=&quot;data-loading#publications-as-rest&quot;&gt;データの読み込み&lt;/a&gt;と&lt;a href=&quot;methods&quot;&gt;メソッドの&lt;/a&gt;記事を参照してください。</target>
        </trans-unit>
        <trans-unit id="75c597556558c3dec1c29366758ff7d0f9b95387" translate="yes" xml:space="preserve">
          <source>Although Meteor includes a standard set of app icons and launch screens, you&amp;rsquo;ll most likely want to configure your own images.</source>
          <target state="translated">Meteorにはアプリのアイコンと起動画面の標準セットが含まれていますが、ほとんどの場合、独自の画像を構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="12456b8a1d08c20fc0ed154b40610ed03d056d01" translate="yes" xml:space="preserve">
          <source>Although MongoDB is a schema-less database, which allows maximum flexibility in data structuring, it is generally good practice to use a schema to constrain the contents of your collection to conform to a known format. If you don&amp;rsquo;t, then you tend to end up needing to write defensive code to check and confirm the structure of your data as it &lt;em&gt;comes out&lt;/em&gt; of the database, instead of when it &lt;em&gt;goes into&lt;/em&gt; the database. As in most things, you tend to &lt;em&gt;read data more often than you write it&lt;/em&gt;, and so it&amp;rsquo;s usually easier, and less buggy to use a schema when writing.</source>
          <target state="translated">MongoDBはスキーマレスデータベースであり、データ構造の柔軟性を最大限に高めますが、一般的には、スキーマを使用してコレクションのコンテンツを既知の形式に準拠させることをお勧めします。そうしないと、データがデータベースに&lt;em&gt;入っ&lt;/em&gt;たときで&lt;em&gt;は&lt;/em&gt;なく、データベースから&lt;em&gt;出たとき&lt;/em&gt;に、データの構造をチェックおよび確認するための防御的なコードを書く必要が&lt;em&gt;生じる&lt;/em&gt;傾向があります。ほとんどの場合と同様に、&lt;em&gt;データを書き込むよりも読み取る頻度が高い&lt;/em&gt;ため、通常、書き込み時にスキーマを使用する方が簡単でバグが少ないです。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a57f88682acb9b68264003f0c2e86fe9a442616b" translate="yes" xml:space="preserve">
          <source>Although a host of tools exist to monitor the performance of HTTP, request-response based applications, the insights they give aren&amp;rsquo;t necessarily useful for a connected client system like a Meteor application. Although it&amp;rsquo;s true that slow HTTP response times would be a problem for your app, and so using a tool like &lt;a href=&quot;https://www.pingdom.com&quot;&gt;Pingdom&lt;/a&gt; can serve a purpose, there are many kinds of issues with your app that won&amp;rsquo;t be surfaced by such tools.</source>
          <target state="translated">HTTP、要求/応答ベースのアプリケーションのパフォーマンスを監視するための多数のツールが存在しますが、それらが提供する洞察は、Meteorアプリケーションのような接続されたクライアントシステムにとって必ずしも有用ではありません。遅いHTTP応答時間がアプリにとって問題になることは事実ですが、&lt;a href=&quot;https://www.pingdom.com&quot;&gt;Pingdomの&lt;/a&gt;ようなツールを使用することは目的を果たすことができますが、そのようなツールによって表面化されないアプリには多くの種類の問題があります。</target>
        </trans-unit>
        <trans-unit id="816e3a71f46dd88bccaf7db749b2b51725f41ce6" translate="yes" xml:space="preserve">
          <source>Although by default a mustache tag will escape HTML tags to avoid &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS&lt;/a&gt;, you can render raw HTML with the triple-mustache: &lt;code&gt;{{{ }}}&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、口ひげタグは&lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS&lt;/a&gt;を回避するためにHTMLタグをエスケープしますが、トリプル口ひげ &lt;code&gt;{{{ }}}&lt;/code&gt; を使用して生のHTMLをレンダリングできます。</target>
        </trans-unit>
        <trans-unit id="11fbdf05d6f81bfb2563790780a590cdd860509e" translate="yes" xml:space="preserve">
          <source>Although client-side state is often best contained as state of an individual template (and passed down the template hierarchy as arguments where necessary), sometimes you have a need for &amp;ldquo;global&amp;rdquo; state that is shared between unrelated sections of the template hierarchy.</source>
          <target state="translated">多くの場合、クライアント側の状態は個々のテンプレートの状態として含まれる（そして必要に応じてテンプレート階層を引数として渡す）のが最善ですが、テンプレート階層の無関係なセクション間で共有される「グローバル」状態が必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="2f848759a83ec177cf6e81aa9f9fba003f196c56" translate="yes" xml:space="preserve">
          <source>Although conceptually different to unit tests, such tests typically do not need to be run any differently to unit tests and can use the same &lt;a href=&quot;#running-unit-tests&quot;&gt;&lt;code&gt;meteor test&lt;/code&gt; mode&lt;/a&gt; and &lt;a href=&quot;#isolation-techniques&quot;&gt;isolation techniques&lt;/a&gt; as we use for unit tests.</source>
          <target state="translated">概念的には単体テストとは異なりますが、そのようなテストは通常​​、単体テストとは別に実行する必要はなく、単体テストで使用するのと同じ&lt;a href=&quot;#running-unit-tests&quot;&gt; &lt;code&gt;meteor test&lt;/code&gt; モード&lt;/a&gt;と&lt;a href=&quot;#isolation-techniques&quot;&gt;分離手法&lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="8b3c8e6eb7114c7f69c371ed26378e67af59e5ad" translate="yes" xml:space="preserve">
          <source>Although having client-side logs in the terminal can be useful, in most cases remote debugging is a much better option. This allows you to use the debugging tools built into Safari (for iOS apps) or Chrome (for Android apps) to investigate an app running on a remote device or a simulator/emulator. Here, you can not only view the logs, but also interact with running JavaScript code and the DOM, monitor network access, etc.</source>
          <target state="translated">クライアント側のログをターミナルに保存しておくと便利ですが、ほとんどの場合、リモートデバッグの方がはるかに良いオプションです。これにより、Safari (iOS アプリ用)や Chrome (Android アプリ用)に組み込まれたデバッグツールを使用して、リモートデバイスやシミュレータ/エミュレータ上で動作しているアプリを調査することができます。ここでは、ログを見るだけでなく、実行中の JavaScript コードや DOM と対話したり、ネットワークアクセスを監視したりすることができます。</target>
        </trans-unit>
        <trans-unit id="72731dbfb51a131b019a3873aaf11db2744a36a1" translate="yes" xml:space="preserve">
          <source>Although it&amp;rsquo;s much easier to deploy a web application than release most other types of software, that doesn&amp;rsquo;t mean you should be cavalier with your deployment. It&amp;rsquo;s important to properly QA and test your releases before you push them live, to ensure that users don&amp;rsquo;t have a bad experience, or even worse, data get corrupted.</source>
          <target state="translated">他のほとんどのタイプのソフトウェアをリリースするよりもWebアプリケーションをデプロイする方がはるかに簡単ですが、それはデプロイメントにキャバリアーが必要であることを意味しません。リリースをライブでプッシュする前に、適切にQAを行い、リリースをテストして、ユーザーに不快な体験をさせたり、さらに悪いことに、データが破損したりしないようにすることが重要です。</target>
        </trans-unit>
        <trans-unit id="5087ad6f3bfaa0067d4829982ae5aa028789a430" translate="yes" xml:space="preserve">
          <source>Although the Tracker system means you often don&amp;rsquo;t &lt;em&gt;need&lt;/em&gt; to think too much about this in building your apps, usually if you want to get the user experience right, you&amp;rsquo;ll need to know when the data is ready.</source>
          <target state="translated">トラッカーシステムを使用すると、アプリを構築する際にこれについてあまり&lt;em&gt;考慮する必要&lt;/em&gt;がないことがよくありますが、通常、ユーザーエクスペリエンスを正しくしたい場合は、データの準備ができていることを知る必要があります。</target>
        </trans-unit>
        <trans-unit id="e04bd7cc9a88f2c65a243e94369e5857aa946cba" translate="yes" xml:space="preserve">
          <source>Although there are a number of different variations of &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; syntax, this section describes the essential forms that everyone should know.</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; と &lt;code&gt;export&lt;/code&gt; 構文にはさまざまなバリエーションがありますが、このセクションでは、誰もが知っておくべき重要な形式について説明します。</target>
        </trans-unit>
        <trans-unit id="eeaaf3d0d3e25db56af7c914bf7e0f44b390e568" translate="yes" xml:space="preserve">
          <source>Although there are a variety of ways that you can run data through a Simple Schema before sending it to your collection (for instance you could check a schema in every method call), the simplest and most reliable is to use the &lt;a href=&quot;https://atmospherejs.com/aldeed/collection2&quot;&gt;&lt;code&gt;aldeed:collection2&lt;/code&gt;&lt;/a&gt; package to run every mutator (&lt;code&gt;insert/update/upsert&lt;/code&gt; call) through the schema.</source>
          <target state="translated">シンプルスキーマを介してデータをコレクションに送信する前にさまざまな方法でデータを実行できますが（たとえば、すべてのメソッド呼び出しでスキーマを確認できます）、&lt;a href=&quot;https://atmospherejs.com/aldeed/collection2&quot;&gt; &lt;code&gt;aldeed:collection2&lt;/code&gt; &lt;/a&gt;パッケージを使用してスキーマを介してすべてのミューテーター（ &lt;code&gt;insert/update/upsert&lt;/code&gt; 呼び出し）を実行します。</target>
        </trans-unit>
        <trans-unit id="f2c5e2c0dabd55a432e2a69dcb16b0f0611342bb" translate="yes" xml:space="preserve">
          <source>Although these examples have all involved React, the &lt;code&gt;onPageLoad&lt;/code&gt; API is designed to be generically useful for any kind of server-side rendering.</source>
          <target state="translated">これらの例にはすべてReactが関係していますが、 &lt;code&gt;onPageLoad&lt;/code&gt; APIは、あらゆる種類のサーバー側レンダリングに一般的に役立つように設計されています。</target>
        </trans-unit>
        <trans-unit id="a98d751c99750a97e0d90228217615e64356e110" translate="yes" xml:space="preserve">
          <source>Although this &lt;code&gt;ListPageContainer&lt;/code&gt; container is intended to be instantiated by the React Router (which passes in the props automatically), if we did ever want to create one manually, we would need to pass in the props to the container component (which then get passed into our data function above):</source>
          <target state="translated">この &lt;code&gt;ListPageContainer&lt;/code&gt; コンテナーは、Reactルーター（小道具を自動的に渡す）によってインスタンス化されることを目的としていますが、手動で作成したい場合は、小道具をコンテナーコンポーネントに渡す必要があります（それが次に渡されます）上記のデータ関数）：</target>
        </trans-unit>
        <trans-unit id="57a2a554819e200e6472a12bbba84116b2255302" translate="yes" xml:space="preserve">
          <source>Although we can run the acceptance test against our &amp;ldquo;pure&amp;rdquo; Meteor app, as we&amp;rsquo;ve done above, it often makes sense to start our meteor server with a special test driver, &lt;code&gt;tmeasday:acceptance-test-driver&lt;/code&gt;. (You&amp;rsquo;ll need to &lt;code&gt;meteor add&lt;/code&gt; it to your app):</source>
          <target state="translated">上記で行ったように、「純粋な」Meteorアプリに対して受け入れテストを実行できますが、特別なテストドライバー &lt;code&gt;tmeasday:acceptance-test-driver&lt;/code&gt; を使用してMeteorサーバーを起動することはしばしば意味があります。（アプリに &lt;code&gt;meteor add&lt;/code&gt; 必要があります）：</target>
        </trans-unit>
        <trans-unit id="cbe3e3881cf9d3a29b02541ba0c56605c0424458" translate="yes" xml:space="preserve">
          <source>Although you can use publications and subscriptions in Meteor via an intuitive understanding, sometimes it&amp;rsquo;s useful to know exactly what happens under the hood when you subscribe to data.</source>
          <target state="translated">Meteorでパブリケーションとサブスクリプションを直感的に理解して使用できますが、データをサブスクライブするときに内部で何が起こるかを正確に知っておくと役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="60243bd30eed074113093259d5db7f0ed4cc362b" translate="yes" xml:space="preserve">
          <source>Always restrict fields</source>
          <target state="translated">常にフィールドを制限する</target>
        </trans-unit>
        <trans-unit id="6e55dd4e72e3ccefcd5b8b8ceaf6dc4d5ff0bf41" translate="yes" xml:space="preserve">
          <source>Always use specific queries to fetch data</source>
          <target state="translated">データを取得するためには、常に特定のクエリを使用します。</target>
        </trans-unit>
        <trans-unit id="40da5ba1b12dabdb8a661305aaaf4d1bf0be14c0" translate="yes" xml:space="preserve">
          <source>An &amp;ldquo;else&amp;rdquo; section may be provided, which is used (with no new data context) if there are zero items in the sequence at any time.</source>
          <target state="translated">「else」セクションが提供される場合があります。これは、シーケンス内のアイテムが常に0の場合に使用されます（新しいデータコンテキストなし）。</target>
        </trans-unit>
        <trans-unit id="7b69ef6dc1aa3027ada407c4c65c6d1d1c505c71" translate="yes" xml:space="preserve">
          <source>An &amp;ldquo;import&amp;rdquo; file is evaluated only if imported from some other file and can be used to share common mixins and variables between different CSS files in your app.</source>
          <target state="translated">「インポート」ファイルは、他のファイルからインポートされた場合にのみ評価され、アプリ内の異なるCSSファイル間で共通のミックスインと変数を共有するために使用できます。</target>
        </trans-unit>
        <trans-unit id="c1f3be26c217a4b2e96528059e6d171577f3fa88" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;#each&lt;/code&gt; template tag takes a sequence argument and inserts its content for each item in the sequence, setting the data context to the value of that item:</source>
          <target state="translated">&lt;code&gt;#each&lt;/code&gt; のテンプレートタグは、配列引数を取り、その項目の値にデータ・コンテキストを設定し、シーケンス内の各項目の内容を挿入します。</target>
        </trans-unit>
        <trans-unit id="57e356d3f63e006f6def6a6a02e45aec1d58cec7" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;#if&lt;/code&gt; template tag renders either its main content or its &amp;ldquo;else&amp;rdquo; content, depending on the value of its data argument. Any falsy JavaScript value (including &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;&quot;&quot;&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt;) is considered false, as well as the empty array, while any other value is considered true.</source>
          <target state="translated">&lt;code&gt;#if&lt;/code&gt; のテンプレートタグは、そのデータ引数の値に応じて、その主な内容やその「他の」コンテンツのいずれかをレンダリングします。偽のJavaScript値（ &lt;code&gt;null&lt;/code&gt; 、 &lt;code&gt;undefined&lt;/code&gt; 、 &lt;code&gt;0&lt;/code&gt; 、 &lt;code&gt;&quot;&quot;&lt;/code&gt; 、 &lt;code&gt;false&lt;/code&gt; を含む）は、空の配列と同様にfalseと見なされ、その他の値はtrueと見なされます。</target>
        </trans-unit>
        <trans-unit id="60807195df5a09eb17a1a3822f5378974da4c514" translate="yes" xml:space="preserve">
          <source>An API for registering new login handlers, which is used by all of the other accounts packages to integrate with the accounts system. There isn&amp;rsquo;t any official documentation for this API, but you can &lt;a href=&quot;https://web.archive.org/web/20160913210817/https://meteorhacks.com/extending-meteor-accounts&quot;&gt;read more about it on the MeteorHacks blog&lt;/a&gt;.</source>
          <target state="translated">アカウントシステムと統合するために他のすべてのアカウントパッケージで使用される、新しいログインハンドラーを登録するためのAPI。このAPIの公式ドキュメントはありませんが&lt;a href=&quot;https://web.archive.org/web/20160913210817/https://meteorhacks.com/extending-meteor-accounts&quot;&gt;、詳細についてはMeteorHacksブログをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9c82caa99effa4eda8502e42bc84f0ecef61c6be" translate="yes" xml:space="preserve">
          <source>An Object where the keys are different devices and screen sizes, and values are image paths relative to the project root directory.</source>
          <target state="translated">キーには異なるデバイスと画面サイズを、値にはプロジェクトのルートディレクトリからの相対的なイメージパスを指定するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="4624ccc518eb1cbf20aee2a5fb3bbc122b1849a6" translate="yes" xml:space="preserve">
          <source>An alternative method is maintaining a separate repository for the package and changing the &lt;code&gt;package.json&lt;/code&gt; version number &lt;a href=&quot;http://debuggable.com/posts/how-to-fork-patch-npm-modules:4e2eb9f3-e584-44be-b1a9-3db7cbdd56cb&quot;&gt;to a git URL or tarball&lt;/a&gt;, but every time you edit the separate repo, you&amp;rsquo;ll need to commit, push, and &lt;code&gt;npm update left-pad&lt;/code&gt;.</source>
          <target state="translated">別の方法は、パッケージの個別のリポジトリを維持し、 &lt;code&gt;package.json&lt;/code&gt; のバージョン番号&lt;a href=&quot;http://debuggable.com/posts/how-to-fork-patch-npm-modules:4e2eb9f3-e584-44be-b1a9-3db7cbdd56cb&quot;&gt;をgit URLまたはtarball&lt;/a&gt;に変更することですが、個別のリポジトリを編集するたびに、 &lt;code&gt;npm update left-pad&lt;/code&gt; をコミット、プッシュ、およびnpm更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="b9ee32b0aa3a5fc5cc578644a58357383c50ea5d" translate="yes" xml:space="preserve">
          <source>An application, especially a web application, is rarely finished, and it&amp;rsquo;s useful to consider potential future changes when designing your data schema. As in most things, it&amp;rsquo;s rarely a good idea to add fields before you actually need them (often what you anticipate doesn&amp;rsquo;t actually end up happening, after all).</source>
          <target state="translated">アプリケーション、特にWebアプリケーションが完成することはめったにありません。データスキーマを設計するときに、将来の潜在的な変更を考慮することは有用です。ほとんどの場合と同様に、実際にフィールドを必要とする前にフィールドを追加することはめったにありません。</target>
        </trans-unit>
        <trans-unit id="c21639d57ab81ac3ed87193a8bc708b7c6454c06" translate="yes" xml:space="preserve">
          <source>An argument to a helper can be any path or identifier, or a string, boolean, or number literal, or null.</source>
          <target state="translated">ヘルパーへの引数には、任意のパスや識別子、文字列、ブール値、数値リテラル、nullを指定することができます。</target>
        </trans-unit>
        <trans-unit id="ef8f757269fdb7b1876d70c1c37c25280c0a432c" translate="yes" xml:space="preserve">
          <source>An array of the arguments passed to the login method.</source>
          <target state="translated">ログインメソッドに渡される引数の配列。</target>
        </trans-unit>
        <trans-unit id="1564c3525dd8092b11e527a382b767e7640263a7" translate="yes" xml:space="preserve">
          <source>An associative key-value data structure where the keys can be any JavaScript value (not just strings). Lookup and insertion take constant time.</source>
          <target state="translated">キーは文字列だけではなく、JavaScriptの任意の値を使用することができます。検索と挿入には一定の時間がかかります。</target>
        </trans-unit>
        <trans-unit id="ee9ac968ca76052ac9c49e478951fa0321be9d8c" translate="yes" xml:space="preserve">
          <source>An attribute value that consists entirely of template tags that return &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, or &lt;code&gt;false&lt;/code&gt; is considered absent; otherwise, the attribute is considered present, even if its value is empty.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 、 &lt;code&gt;undefined&lt;/code&gt; 、または &lt;code&gt;false&lt;/code&gt; を返すテンプレートタグのみで構成される属性値は存在しないと見なされます。それ以外の場合、値が空であっても属性は存在すると見なされます。</target>
        </trans-unit>
        <trans-unit id="c0233f3693abbb07f263af82b43adc249b8da0d4" translate="yes" xml:space="preserve">
          <source>An automatic flush occurs whenever the system is idle which performs exactly the same work as &lt;code&gt;Tracker.flush&lt;/code&gt;. The flushing process consists of rerunning any invalidated computations. If additional invalidations happen while flushing, they are processed as part of the same flush until there is no more work to be done. Callbacks registered with &lt;a href=&quot;#tracker_afterflush&quot;&gt;&lt;code&gt;Tracker.afterFlush&lt;/code&gt;&lt;/a&gt; are called after processing outstanding invalidations.</source>
          <target state="translated">&lt;code&gt;Tracker.flush&lt;/code&gt; とまったく同じ処理を実行するシステムがアイドル状態のときに、自動フラッシュが発生します。フラッシュプロセスは、無効にされた計算を再実行することで構成されます。フラッシュ中に追加の無効化が発生した場合は、実行する作業がなくなるまで、それらは同じフラッシュの一部として処理されます。&lt;a href=&quot;#tracker_afterflush&quot;&gt; &lt;code&gt;Tracker.afterFlush&lt;/code&gt; に&lt;/a&gt;登録されたコールバックは、未処理の無効化の処理後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="efe098602b753737813a8d517be30c228478e692" translate="yes" xml:space="preserve">
          <source>An email address that the external service will use to pre-fill the login prompt. Currently only supported with Meteor developer accounts and Google accounts. If used with Google, the Google User ID can also be passed.</source>
          <target state="translated">外部サービスがログインプロンプトを事前に入力するために使用する電子メール アドレス。現在のところ、Meteorの開発者アカウントとGoogleアカウントでのみサポートされています。Googleで使用する場合は、GoogleユーザーIDも渡すことができます。</target>
        </trans-unit>
        <trans-unit id="53c5641e85e960206e7a66dfc0d3f25931ac36dd" translate="yes" xml:space="preserve">
          <source>An event map is an object where the properties specify a set of events to handle, and the values are the handlers for those events. The property can be in one of several forms:</source>
          <target state="translated">イベントマップは、プロパティが処理するイベントのセットを指定するオブジェクトで、値はそれらのイベントのハンドラです。プロパティは、いくつかの形式のうちの 1 つにすることができます。</target>
        </trans-unit>
        <trans-unit id="f9ab1a2784611cd47401201ce3ebd4475ad0a247" translate="yes" xml:space="preserve">
          <source>An example of refactoring from JavaScript to ES2015</source>
          <target state="translated">JavaScriptからES2015へのリファクタリング例</target>
        </trans-unit>
        <trans-unit id="f798739801d9d9f4af7698ee9285363cbb093b4a" translate="yes" xml:space="preserve">
          <source>An implementation of the global &lt;a href=&quot;http://www.2ality.com/2014/12/es6-symbols.html&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt;s namespace that enables a number of other ES2015 features, such as &lt;code&gt;for&lt;/code&gt;-&lt;code&gt;of&lt;/code&gt; loops and &lt;code&gt;Symbol.iterator&lt;/code&gt; methods: &lt;code&gt;[1,2,3][Symbol.iterator]()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; - &lt;code&gt;of&lt;/code&gt; ループや &lt;code&gt;Symbol.iterator&lt;/code&gt; メソッド &lt;code&gt;[1,2,3][Symbol.iterator]()&lt;/code&gt; など、他の多くのES2015機能を有効にするグローバル&lt;a href=&quot;http://www.2ality.com/2014/12/es6-symbols.html&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;の名前空間の実装。</target>
        </trans-unit>
        <trans-unit id="b4b4407844f4a4dc759581d6064eca76528a967d" translate="yes" xml:space="preserve">
          <source>An important benefit of this is that while downloading may be slow over mobile connections, this is done in the background, and we won&amp;rsquo;t attempt to reload the app until all assets have been downloaded to the device.</source>
          <target state="translated">これの重要な利点は、モバイル接続ではダウンロードが遅くなる可能性がありますが、これはバックグラウンドで行われるため、すべてのアセットがデバイスにダウンロードされるまでアプリをリロードしようとしないことです。</target>
        </trans-unit>
        <trans-unit id="bb146ac321e4c6bcea177d984200acd59b006687" translate="yes" xml:space="preserve">
          <source>An important feature shared by all of the available CSS pre-processors is the ability to import files. This lets you split your CSS into smaller pieces, and provides a lot of the same benefits that you get from JavaScript modules:</source>
          <target state="translated">利用可能なすべての CSS プリプロセッサに共通する重要な機能として、ファイルのインポート機能があります。これにより、CSS をより小さな断片に分割することができ、JavaScript モジュールから得られるのと同じ利点の多くを提供します。</target>
        </trans-unit>
        <trans-unit id="2d7a8447f55c6513fafbefb339d3cfafcaeff8dd" translate="yes" xml:space="preserve">
          <source>An important function of the guide is to &lt;strong&gt;shape future development&lt;/strong&gt; in the Meteor platform. By documenting best practices, the guide shines a spotlight on areas of the platform that could be better, easier, or more performant, and thus will be used to focus a lot of future platform choices.</source>
          <target state="translated">このガイドの重要な機能は、Meteorプラットフォームの&lt;strong&gt;将来の開発&lt;/strong&gt;を&lt;strong&gt;形作ること&lt;/strong&gt;です。このガイドは、ベストプラクティスを文書化することで、プラットフォームの領域にスポットライトを当て、より良い、より簡単、またはよりパフォーマンスが高くなる可能性があるため、将来のプラットフォームの選択の多くに焦点を当てるために使用されます。</target>
        </trans-unit>
        <trans-unit id="a0b7c184ba35ece6bffa56bde2068598168be452" translate="yes" xml:space="preserve">
          <source>An important property of ReactiveVars &amp;mdash; which is sometimes a reason for using one &amp;mdash; is that setting the value to the same value as before has no effect; it does not trigger any invalidations. So if one autorun sets a ReactiveVar, and another autorun gets the ReactiveVar, a re-run of the first autorun won&amp;rsquo;t necessarily trigger the second. By default, only primitive values are compared this way, while calling &lt;code&gt;set&lt;/code&gt; on an argument that is an &lt;em&gt;object&lt;/em&gt; (not a primitive) always counts as a change. You can configure this behavior using the &lt;code&gt;equalsFunc&lt;/code&gt; argument.</source>
          <target state="translated">ReactiveVarsの重要なプロパティ（これを使用する理由になることもあります）は、値を以前と同じ値に設定しても効果がないことです。無効化はトリガーされません。したがって、1つの自動実行がReactiveVarを設定し、別の自動実行がReactiveVarを取得した場合、最初の自動実行の再実行が2番目の自動実行を必ずしもトリガーするわけではありません。デフォルトでは、プリミティブ値のみがこの方法で比較 &lt;code&gt;set&lt;/code&gt; れますが、（プリミティブではなく）&lt;em&gt;オブジェクト&lt;/em&gt;である引数に対してsetを呼び出すと、常に変更としてカウントされます。この動作は、 &lt;code&gt;equalsFunc&lt;/code&gt; 引数を使用して構成できます。</target>
        </trans-unit>
        <trans-unit id="f416fec1003a0bcbc7389e3596de024838c0a629" translate="yes" xml:space="preserve">
          <source>An inclusion tag inserts an instantiation of the given template at the current location. If there is an argument, it becomes the data context, much as if the following code were used:</source>
          <target state="translated">このような場合は、このテンプレートを使用して、そのテンプレートのインスタンスを作成することができます。引数がある場合は、以下のコードが使用された場合と同様に、データコンテキストになります。</target>
        </trans-unit>
        <trans-unit id="2de52e1004e5b1b4b43a03b939b9ec67cf9f960e" translate="yes" xml:space="preserve">
          <source>An inclusion tag takes the form &lt;code&gt;{{&amp;gt; templateName}}&lt;/code&gt; or &lt;code&gt;{{&amp;gt; templateName
dataObj}}&lt;/code&gt;. Other argument forms are syntactic sugar for constructing a data object (see Inclusion and Block Arguments).</source>
          <target state="translated">包含タグの形式は &lt;code&gt;{{&amp;gt; templateName}}&lt;/code&gt; または &lt;code&gt;{{&amp;gt; templateName dataObj}}&lt;/code&gt; です。その他の引数形式は、データオブジェクトを構築するための構文糖です（「包含とブロック引数」を参照）。</target>
        </trans-unit>
        <trans-unit id="2b5c186e705e28f3f9215652fa5ec2217809e19e" translate="yes" xml:space="preserve">
          <source>An integration test is a test that crosses module boundaries. In the simplest case, this simply means something very similar to a unit test, where you perform your isolation around multiple modules, creating a non-singular &amp;ldquo;system under test&amp;rdquo;.</source>
          <target state="translated">統合テストは、モジュールの境界を越えるテストです。最も単純なケースでは、これはユニットテストと非常によく似たものを意味し、複数のモジュールの周囲で分離を実行して、非特異な「テスト対象システム」を作成します。</target>
        </trans-unit>
        <trans-unit id="cc3471c2da65468e3c2464e0ada84cc740a10735" translate="yes" xml:space="preserve">
          <source>An interesting UX challenge in a realtime system like Meteor involves how to bring new information (like changing data in a list) to the user&amp;rsquo;s attention. As &lt;a href=&quot;http://blog.percolatestudio.com/design/design-for-realtime/&quot;&gt;Dominic&lt;/a&gt; points out, it&amp;rsquo;s not always a good idea to simply update the contents of a list as quickly as possible, as it&amp;rsquo;s easy to miss changes or get confused about what&amp;rsquo;s happened.</source>
          <target state="translated">Meteorのようなリアルタイムシステムでの興味深いUXの課題は、新しい情報（リスト内のデータの変更など）をユーザーの注意を引く方法です。以下のよう&lt;a href=&quot;http://blog.percolatestudio.com/design/design-for-realtime/&quot;&gt;ドミニクは&lt;/a&gt;指摘し、それがミス変化するのは簡単ですか起こったのかについて混乱と、それは、単にできるだけ早くとして、リストの内容を更新するために、常に良い考えではありません。</target>
        </trans-unit>
        <trans-unit id="3eaa5e7bb94bc068800ae4a147a75b3351df6c7d" translate="yes" xml:space="preserve">
          <source>An inverted &lt;a href=&quot;#Blaze-If&quot;&gt;&lt;code&gt;Blaze.If&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">反転した&lt;a href=&quot;#Blaze-If&quot;&gt; &lt;code&gt;Blaze.If&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="939b63e7cbbea497e2b1e6a9008066115b2bd7e0" translate="yes" xml:space="preserve">
          <source>An object to use as the data context, or a function returning such an object. If a function is provided, it will be reactively re-run.</source>
          <target state="translated">データコンテキストとして使用するオブジェクト、またはそのようなオブジェクトを返す関数。関数が提供された場合、それは反応的に再実行されます。</target>
        </trans-unit>
        <trans-unit id="434c556f4c70bf2be0ddd49e6466955c1a738a9d" translate="yes" xml:space="preserve">
          <source>An object where the keys are NPM package names, and the values are the version numbers of required NPM packages, just like in &lt;a href=&quot;#Npm-depends&quot;&gt;Npm.depends&lt;/a&gt;.</source>
          <target state="translated">キーがNPMパッケージ名であり、値が&lt;a href=&quot;#Npm-depends&quot;&gt;Npm.depends&lt;/a&gt;と同様に、必要なNPMパッケージのバージョン番号であるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="2ddc8c2f8c8e4417f5a3606059179534670eafff" translate="yes" xml:space="preserve">
          <source>An object where the keys are package names and the values are one of:</source>
          <target state="translated">キーがパッケージ名で、値がいずれかのオブジェクト。</target>
        </trans-unit>
        <trans-unit id="79785ffa5c429166c70188beff22fd316c295172" translate="yes" xml:space="preserve">
          <source>An object where the keys are plugin names and the values are version numbers or GitHub tarball URLs in string form. Example:</source>
          <target state="translated">キーにはプラグイン名、値にはバージョン番号あるいは GitHub の tarball URL を文字列で指定します。例</target>
        </trans-unit>
        <trans-unit id="7b2c7ac909dcb09c335c9bced0b8eccb30aec3b4" translate="yes" xml:space="preserve">
          <source>An object which will be the value of &lt;code&gt;this&lt;/code&gt; inside &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 内部 &lt;code&gt;callback&lt;/code&gt; 値となるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="a0d7bef6545170610b98222ab80587927b525861" translate="yes" xml:space="preserve">
          <source>An object with two fields: '_variable' and '_sequence'. Each iterates over '_sequence', it may be a Cursor, an array, null, or undefined. Inside the Each body you will be able to get the current item from the sequence using the name specified in the '_variable' field.</source>
          <target state="translated">2 つのフィールド '_variable' と '_sequence' を持つオブジェクト。各オブジェクトは '_sequence' を繰り返し処理し、Cursor、配列、null、未定義のいずれかになります。Each の内部では、'_variable' フィールドで指定した名前を使用してシーケンスから現在のアイテムを取得することができます。</target>
        </trans-unit>
        <trans-unit id="8a7b61ebb065b9b10d0b68f0f03a2a450ddd054c" translate="yes" xml:space="preserve">
          <source>An option in this case is to call out that there are changes to the data the user is looking at without actually making UI updates. In a system like Meteor which is reactive by default, it isn&amp;rsquo;t necessarily easy to stop such changes from happening!</source>
          <target state="translated">この場合のオプションは、UIを実際に更新せずに、ユーザーが見ているデータに変更があることを呼び出すことです。デフォルトで反応するMeteorのようなシステムでは、そのような変更の発生を停止するのは必ずしも簡単ではありません。</target>
        </trans-unit>
        <trans-unit id="63a8d8663ae7dd69a7d7fcccf37257cc02056a32" translate="yes" xml:space="preserve">
          <source>An optional computation declared to depend on &lt;code&gt;dependency&lt;/code&gt; instead of the current computation.</source>
          <target state="translated">現在の計算ではなく、 &lt;code&gt;dependency&lt;/code&gt; に依存するように宣言されたオプションの計算。</target>
        </trans-unit>
        <trans-unit id="44ae3ec55c149b5c7809f399272d4c11c9cf49c5" translate="yes" xml:space="preserve">
          <source>An optional transformation function. Documents will be passed through this function before being returned from &lt;code&gt;fetch&lt;/code&gt; or &lt;code&gt;findOne&lt;/code&gt;, and before being passed to callbacks of &lt;code&gt;observe&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;forEach&lt;/code&gt;, &lt;code&gt;allow&lt;/code&gt;, and &lt;code&gt;deny&lt;/code&gt;. Transforms are &lt;em&gt;not&lt;/em&gt; applied for the callbacks of &lt;code&gt;observeChanges&lt;/code&gt; or to cursors returned from publish functions.</source>
          <target state="translated">オプションの変換関数。ドキュメントから返される前に、この関数を通過されます &lt;code&gt;fetch&lt;/code&gt; または &lt;code&gt;findOne&lt;/code&gt; 、とのコールバックに渡される前に &lt;code&gt;observe&lt;/code&gt; 、 &lt;code&gt;map&lt;/code&gt; 、 &lt;code&gt;forEach&lt;/code&gt; の、 &lt;code&gt;allow&lt;/code&gt; 、および &lt;code&gt;deny&lt;/code&gt; 。変換は、 &lt;code&gt;observeChanges&lt;/code&gt; のコールバックやパブリッシュ関数から返されるカーソルに&lt;em&gt;は&lt;/em&gt;適用され&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="b824ce9adc77dd0be4ee1b2f760183225e5caea5" translate="yes" xml:space="preserve">
          <source>An unrendered &lt;a href=&quot;blaze#Blaze-View&quot;&gt;View&lt;/a&gt; object, like the return value of &lt;code&gt;Blaze.With&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Blaze.With&lt;/code&gt; の戻り値のような、レンダリングされていない&lt;a href=&quot;blaze#Blaze-View&quot;&gt;View&lt;/a&gt;オブジェクト</target>
        </trans-unit>
        <trans-unit id="25bc96295797b5371aa0625196d597ef03a952de" translate="yes" xml:space="preserve">
          <source>Analytics</source>
          <target state="translated">Analytics</target>
        </trans-unit>
        <trans-unit id="3374ddce183976efff01a7c5115eba95b4a40fb0" translate="yes" xml:space="preserve">
          <source>And finally you use Ubuntu Make to install Android Studio and all dependencies:</source>
          <target state="translated">そして最後にUbuntu Makeを使ってAndroid Studioとすべての依存関係をインストールします。</target>
        </trans-unit>
        <trans-unit id="d758744d30f93206235fb47dd876aa25751bc550" translate="yes" xml:space="preserve">
          <source>And then for example with Cloudfront, you would:</source>
          <target state="translated">そして、例えばCloudfrontの場合はどうでしょうか。</target>
        </trans-unit>
        <trans-unit id="87b77cf3fa6cc00250d9eafc287576a9b5bf0501" translate="yes" xml:space="preserve">
          <source>And then we use that state to determine what to render in the reusable component (&lt;code&gt;listShow&lt;/code&gt;):</source>
          <target state="translated">次に、その状態を使用して、再利用可能なコンポーネント（ &lt;code&gt;listShow&lt;/code&gt; ）で何をレンダリングするかを決定します。</target>
        </trans-unit>
        <trans-unit id="1928f95c598b9e69462fcb512625cf8e28923044" translate="yes" xml:space="preserve">
          <source>Android</source>
          <target state="translated">Android</target>
        </trans-unit>
        <trans-unit id="721ce6e6721623c2b3679f1a497bdb5e9fc18886" translate="yes" xml:space="preserve">
          <source>Android 5.0 also comes with a web view based on Chromium known as the &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.google.android.webview&amp;amp;hl=en&quot;&gt;Android System Web View&lt;/a&gt;, but a big improvement is that it can be automatically updated through the Play Store. This means updates to the web view happen more regularly and are independent of OS updates.</source>
          <target state="translated">Android 5.0には、&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.google.android.webview&amp;amp;hl=en&quot;&gt;Androidシステムウェブビュー&lt;/a&gt;と呼ばれるChromiumに基づくウェブビューも付属していますが、大きな改善点はPlayストアから自動的に更新できることです。つまり、Webビューの更新はより定期的に行われ、OSの更新とは無関係です。</target>
        </trans-unit>
        <trans-unit id="abad22263875eb6ee0d3e2addf237a243dafe2e0" translate="yes" xml:space="preserve">
          <source>Android Play Store</source>
          <target state="translated">Androidプレイストア</target>
        </trans-unit>
        <trans-unit id="8e09000e5c2a6bef346596ec2e0dec0fbf7495a6" translate="yes" xml:space="preserve">
          <source>Angular</source>
          <target state="translated">Angular</target>
        </trans-unit>
        <trans-unit id="a43723b38f21e024754c187fecadae213b9629c6" translate="yes" xml:space="preserve">
          <source>Angular and React have had more performance optimization work put into them than Blaze and in general will perform better. However, there are some cases when Blaze does better (for instance an &lt;code&gt;{{#each}}&lt;/code&gt; over a changing cursor).</source>
          <target state="translated">AngularとReactには、Blazeよりも多くのパフォーマンス最適化作業が組み込まれており、一般にパフォーマンスが向上します。ただし、Blazeの方が優れている場合があります（たとえば、カーソルの変化に対して &lt;code&gt;{{#each}}&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="0e4a5ab22e741abebab09ca99335854ad9c0bf12" translate="yes" xml:space="preserve">
          <source>Angular has 12k stars on Github and 4k npm libraries.</source>
          <target state="translated">AngularはGithubに12kの星があり、4kのnpmライブラリがあります。</target>
        </trans-unit>
        <trans-unit id="d00a167e9bc949dd872e53179e60625a5c4ddedc" translate="yes" xml:space="preserve">
          <source>Angular is a frontend rendering library that is officially supported by Meteor. The best place to read about how to use both Angular 1 and Angular 2 in Meteor is the &lt;a href=&quot;http://www.angular-meteor.com&quot;&gt;Angular-Meteor&lt;/a&gt; site.</source>
          <target state="translated">Angularは、Meteorによって公式にサポートされているフロントエンドレンダリングライブラリです。Angular 1と​​Angular 2の両方をMeteorで使用する方法について読むのに最適な場所は、&lt;a href=&quot;http://www.angular-meteor.com&quot;&gt;Angular-Meteor&lt;/a&gt;サイトです。</target>
        </trans-unit>
        <trans-unit id="d386e5af782ff9d0f20d504af94511ef38ed1b6e" translate="yes" xml:space="preserve">
          <source>Angular templates</source>
          <target state="translated">アンギュラーテンプレート</target>
        </trans-unit>
        <trans-unit id="f4738ab5bc5ed3304cbb6cdc02b822657b885d14" translate="yes" xml:space="preserve">
          <source>Angular uses HTML with &lt;a href=&quot;https://angular.io/docs/ts/latest/guide/cheatsheet.html&quot;&gt;special attribute syntax&lt;/a&gt; for logic and events. Template helpers are written in the accompanying JavaScript file along with events, which are called by name from inside HTML attributes.</source>
          <target state="translated">Angularはロジックとイベントのために&lt;a href=&quot;https://angular.io/docs/ts/latest/guide/cheatsheet.html&quot;&gt;特別な属性構文&lt;/a&gt;を持つHTMLを使用します。テンプレートヘルパーは、HTML属性の内部から名前で呼び出されるイベントとともに、付属のJavaScriptファイルに記述されます。</target>
        </trans-unit>
        <trans-unit id="87e2b69592048ff9af58feabfc5fa2431afde4d0" translate="yes" xml:space="preserve">
          <source>Animating changes in visiblity</source>
          <target state="translated">視認性の変化をアニメーション化</target>
        </trans-unit>
        <trans-unit id="62b2ca1ca82dfed15272dd7126d0b0dfb6a088d8" translate="yes" xml:space="preserve">
          <source>Animating changes to attributes</source>
          <target state="translated">属性への変更をアニメーション化する</target>
        </trans-unit>
        <trans-unit id="f70394e94c6014a61ca469dcf37e120f2bf7d949" translate="yes" xml:space="preserve">
          <source>Animating page changes</source>
          <target state="translated">ページの変更をアニメーション化する</target>
        </trans-unit>
        <trans-unit id="62afd21e88769f01ba1c9330803baad57564d6e9" translate="yes" xml:space="preserve">
          <source>Animation</source>
          <target state="translated">Animation</target>
        </trans-unit>
        <trans-unit id="960960bd10c2c00046e9f7b8439f5832a60919ed" translate="yes" xml:space="preserve">
          <source>Animation is the process of indicating changes in the UI smoothly &lt;em&gt;over time&lt;/em&gt; rather than &lt;em&gt;instantly&lt;/em&gt;. Although animation is often seen as &amp;ldquo;window dressing&amp;rdquo; or purely aesthetic, in fact it serves a very important purpose, highlighted by the example of the changing list above. In a connected-client world where changes in the UI aren&amp;rsquo;t always initiated by user action (i.e. sometimes they happen as a result of the server pushing changes made by other users), instant changes can result in a user experience where it&amp;rsquo;s difficult to understand what is happening.</source>
          <target state="translated">アニメーションは、UIの変化を&lt;em&gt;瞬時に&lt;/em&gt;ではなく、&lt;em&gt;時間の経過とともに&lt;/em&gt;スムーズに示すプロセスです。アニメーションは「ウィンドウドレッシング」または純粋に美的と見なされることがよくありますが、実際には非常に重要な目的を果たしており、上記の変化するリストの例で強調されています。UIの変更が常にユーザーアクションによって開始されるとは限らない（つまり、サーバーが他のユーザーによって行われた変更をプッシュした結果として発生する）接続クライアントの世界では、即時の変更により、ユーザーエクスペリエンスが困難になる場合があります。何が起こっているのかを理解する。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0a742cf454fa6ee03e580e0e78d51baf9a72035d" translate="yes" xml:space="preserve">
          <source>Another common type of animation is when an attribute of an element changes. For instance, a button may change color when you click on it. These type of animations are most easily achieved with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions&quot;&gt;CSS transitions&lt;/a&gt;. For example, we use a CSS transition for the hover state of links in the Todos example app:</source>
          <target state="translated">もう1つの一般的な種類のアニメーションは、要素の属性が変化したときです。たとえば、ボタンをクリックすると色が変わる場合があります。これらのタイプのアニメーションは、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions&quot;&gt;CSSトランジションで&lt;/a&gt;最も簡単に実現できます。たとえば、Todosサンプルアプリでは、リンクのホバー状態にCSS遷移を使用します。</target>
        </trans-unit>
        <trans-unit id="9a914b00f992589999aaf0beed2576d01e7ac2ba" translate="yes" xml:space="preserve">
          <source>Another complicated topic in Blaze is name lookups. In what order does Blaze look when you write &lt;code&gt;{{something}}&lt;/code&gt;? It runs in the following order:</source>
          <target state="translated">Blazeのもう1つの複雑なトピックは、名前の検索です。 &lt;code&gt;{{something}}&lt;/code&gt; と書いたとき、Blazeはどの順序で見えますか？次の順序で実行されます。</target>
        </trans-unit>
        <trans-unit id="1d2c061dfc319fe50f49b2b9783e5e810351e214" translate="yes" xml:space="preserve">
          <source>Another denormalization that this architecture sometimes requires can be from the parent document onto sub-documents. For instance, in Todos, as we enforce privacy of the todo lists via the &lt;code&gt;list.userId&lt;/code&gt; attribute, but we publish the todos separately, it might make sense to denormalize &lt;code&gt;todo.userId&lt;/code&gt; also. To do this, we&amp;rsquo;d need to be careful to take the &lt;code&gt;userId&lt;/code&gt; from the list when creating the todo, and updating all relevant todos whenever a list&amp;rsquo;s &lt;code&gt;userId&lt;/code&gt; changed.</source>
          <target state="translated">このアーキテクチャで必要になることがある別の非正規化は、親ドキュメントからサブドキュメントへの変換です。たとえば、 &lt;code&gt;list.userId&lt;/code&gt; では、list.userId属性を介してToDoリストのプライバシーを適用しますが、Todoを個別に公開するため、 &lt;code&gt;todo.userId&lt;/code&gt; も非正規化することは理にかなっています。これを行うには、todoを作成するときにリストから &lt;code&gt;userId&lt;/code&gt; を取得し、リストの &lt;code&gt;userId&lt;/code&gt; が変更されるたびにすべての関連するtodoを更新するように注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="d80d645e11c3bb0ca14f386e1a48fff00ea3614a" translate="yes" xml:space="preserve">
          <source>Another example where the subscription depends on the data context:</source>
          <target state="translated">サブスクリプションがデータコンテキストに依存する別の例。</target>
        </trans-unit>
        <trans-unit id="b7190df4442987645cbae048526d2927021378c0" translate="yes" xml:space="preserve">
          <source>Another example where you want to initialize a plugin when the subscription is done:</source>
          <target state="translated">サブスクリプションが完了したときにプラグインを初期化したい場合の別の例です。</target>
        </trans-unit>
        <trans-unit id="73cb9ba627e270e4a63c114afaf5cb58e3b4e641" translate="yes" xml:space="preserve">
          <source>Another good option is &lt;a href=&quot;https://onsen.io/v2/&quot;&gt;Onsen UI&lt;/a&gt;, which includes a &lt;a href=&quot;https://onsen.io/v2/docs/guide/react/&quot;&gt;React version&lt;/a&gt;.</source>
          <target state="translated">別の良いオプションは、&lt;a href=&quot;https://onsen.io/v2/docs/guide/react/&quot;&gt;Reactバージョン&lt;/a&gt;を含む&lt;a href=&quot;https://onsen.io/v2/&quot;&gt;Onsen UI&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="df5062c1204643ad4500de34b513728a30ae7a7e" translate="yes" xml:space="preserve">
          <source>Another important consideration is how you&amp;rsquo;ll share the data between your different applications.</source>
          <target state="translated">もう1つの重要な考慮事項は、さまざまなアプリケーション間でデータを共有する方法です。</target>
        </trans-unit>
        <trans-unit id="c8e3539abbac579f768de65b1c5569e567fbbe6a" translate="yes" xml:space="preserve">
          <source>Another important feature of the Meteor build tool is that it automatically concatenates and minifies all of your files in production mode. This is enabled by the &lt;a href=&quot;https://atmospherejs.com/meteor/standard-minifiers-js&quot;&gt;&lt;code&gt;standard-minifier-js&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://atmospherejs.com/meteor/standard-minifiers-css&quot;&gt;&lt;code&gt;standard-minifier-css&lt;/code&gt;&lt;/a&gt; packages, which are in all Meteor apps by default. If you need different minification behavior, you can replace these packages. Below, we&amp;rsquo;ll talk about how to &lt;a href=&quot;#postcss&quot;&gt;switch out a minifier to add PostCSS to your build process&lt;/a&gt;.</source>
          <target state="translated">Meteorビルドツールのもう1つの重要な機能は、プロダクションモードですべてのファイルを自動的に連結および縮小することです。これは、デフォルトですべてのMeteorアプリに含まれている&lt;a href=&quot;https://atmospherejs.com/meteor/standard-minifiers-js&quot;&gt; &lt;code&gt;standard-minifier-js&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://atmospherejs.com/meteor/standard-minifiers-css&quot;&gt; &lt;code&gt;standard-minifier-css&lt;/code&gt; &lt;/a&gt;パッケージによって有効になります。別の縮小動作が必要な場合は、これらのパッケージを置き換えることができます。以下では&lt;a href=&quot;#postcss&quot;&gt;、ミニファイアを切り替えてPostCSSをビルドプロセスに追加する&lt;/a&gt;方法について説明します。</target>
        </trans-unit>
        <trans-unit id="4727184c2d70bd74761d6b6a25c523cec880c3ac" translate="yes" xml:space="preserve">
          <source>Another object to compare this to.</source>
          <target state="translated">これと比較する別のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="fddbd6753e5fb24ece516dea5de5bbbbb8ae51e3" translate="yes" xml:space="preserve">
          <source>Another option is using the &lt;code&gt;METEOR_CORDOVA_COMPAT_VERSION_EXCLUDE&lt;/code&gt; environment variable. If you were to do this:</source>
          <target state="translated">別のオプションは、 &lt;code&gt;METEOR_CORDOVA_COMPAT_VERSION_EXCLUDE&lt;/code&gt; 環境変数を使用することです。これを行う場合：</target>
        </trans-unit>
        <trans-unit id="05634f216c70da01031ec61bce6c33e9cbc80751" translate="yes" xml:space="preserve">
          <source>Another thing to be aware of, especially with such multi-stage deploys, is that being prepared to rollback is important! For this reason, the migrations package allows you to specify a &lt;code&gt;down()&lt;/code&gt; function and call &lt;code&gt;Migrations.migrateTo(x)&lt;/code&gt; to migrate &lt;em&gt;back&lt;/em&gt; to version &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">特にこのようなマルチステージデプロイで注意すべきもう1つのことは、ロールバックの準備が重要であることです。このため、migrationsパッケージでは、 &lt;code&gt;down()&lt;/code&gt; 関数を指定して &lt;code&gt;Migrations.migrateTo(x)&lt;/code&gt; を呼び出し、バージョン &lt;code&gt;x&lt;/code&gt; に&lt;em&gt;戻す&lt;/em&gt;ことができます。</target>
        </trans-unit>
        <trans-unit id="1759ce61ab461b729e0a2764d639e83ebd6b24c8" translate="yes" xml:space="preserve">
          <source>Another very common use case is splitting a worker process away from your main application so that expensive jobs do not impact the user experience of your visitors by locking up a single web server.</source>
          <target state="translated">もう一つの非常に一般的な使用例は、高価なジョブが単一のウェブサーバーをロックすることで訪問者のユーザーエクスペリエンスに影響を与えないように、ワーカープロセスをメインアプリケーションから離して分割することです。</target>
        </trans-unit>
        <trans-unit id="bd6aa352a2f2253598dfd319587ee66909080a47" translate="yes" xml:space="preserve">
          <source>Another way to share commonly used view code is a global Spacebars helper. You can define these with the &lt;code&gt;Template.registerHelper()&lt;/code&gt; function. Typically you register helpers to do simple things (like rendering dates in a given format) which don&amp;rsquo;t justify a separate sub-component. For instance, you could do:</source>
          <target state="translated">一般的に使用されるビューコードを共有する別の方法は、グローバルスペースバーヘルパーです。これらは、 &lt;code&gt;Template.registerHelper()&lt;/code&gt; 関数で定義できます。通常、ヘルパーを登録して、個別のサブコンポーネントを正当化しない単純なこと（日付を特定の形式でレンダリングするなど）を行います。たとえば、次のことができます。</target>
        </trans-unit>
        <trans-unit id="9713ac8cc2ea7950bc76e6441c6fe2173b97540e" translate="yes" xml:space="preserve">
          <source>Any &lt;code&gt;this.onStop()&lt;/code&gt; callbacks setup by the publish handler run. In this case, it is a single automatic callback setup when returning a cursor from the handler, which stops the query observer and cleans it up if necessary.</source>
          <target state="translated">どれ &lt;code&gt;this.onStop()&lt;/code&gt; 公開ハンドラの実行により、セットアップをコールバック。この場合、ハンドラーからカーソルを返すときの単一の自動コールバックセットアップです。これにより、クエリオブザーバーが停止し、必要に応じてクリーンアップされます。</target>
        </trans-unit>
        <trans-unit id="7de84040ef0ad73ddef7fe2d3fd2f1813c0bd57b" translate="yes" xml:space="preserve">
          <source>Any constructor function (eg, &lt;code&gt;Date&lt;/code&gt;)</source>
          <target state="translated">任意のコンストラクター関数（例： &lt;code&gt;Date&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="7cb7c93b5c17be7935d8a4f0c2236afb2f25290d" translate="yes" xml:space="preserve">
          <source>Any directory named &lt;code&gt;client/&lt;/code&gt; is not loaded on the server. Similar to wrapping your code in &lt;code&gt;if (Meteor.isClient) { ... }&lt;/code&gt;. All files loaded on the client are automatically concatenated and minified when in production mode. In development mode, JavaScript and CSS files are not minified, to make debugging easier. CSS files are still combined into a single file for consistency between production and development, because changing the CSS file&amp;rsquo;s URL affects how URLs in it are processed.</source>
          <target state="translated">&lt;code&gt;client/&lt;/code&gt; という名前のディレクトリはサーバーにロードされません。 &lt;code&gt;if (Meteor.isClient) { ... }&lt;/code&gt; コードをラップするのと同じです。クライアントにロードされたすべてのファイルは、プロダクションモードのときに自動的に連結および縮小されます。開発モードでは、JavaScriptおよびCSSファイルは、デバッグを容易にするために縮小されません。CSSファイルのURLを変更すると、その中のURLがどのように処理されるかに影響するため、CSSファイルは、本番環境と開発環境の間で一貫性を保つために1つのファイルに結合されます。</target>
        </trans-unit>
        <trans-unit id="f170e8ec787b5654380e74c4fba619bf8321e74b" translate="yes" xml:space="preserve">
          <source>Any directory named &lt;code&gt;imports/&lt;/code&gt; is not loaded anywhere and files must be imported using &lt;code&gt;import&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;imports/&lt;/code&gt; という名前のディレクトリはどこにもロードされず、ファイルは &lt;code&gt;import&lt;/code&gt; を使用してインポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="08121405e1baf04344048427e1e9a54f9970d8a4" translate="yes" xml:space="preserve">
          <source>Any directory named &lt;code&gt;node_modules/&lt;/code&gt; is not loaded anywhere. node.js packages installed into &lt;code&gt;node_modules&lt;/code&gt; directories must be imported using &lt;code&gt;import&lt;/code&gt; or by using &lt;code&gt;Npm.depends&lt;/code&gt; in &lt;code&gt;package.js&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;node_modules/&lt;/code&gt; という名前のディレクトリはどこにもロードされません。 &lt;code&gt;node_modules&lt;/code&gt; ディレクトリにインストールされたnode.jsパッケージは、 &lt;code&gt;import&lt;/code&gt; を使用する &lt;code&gt;Npm.depends&lt;/code&gt; 、 &lt;code&gt;package.js&lt;/code&gt; のNpm.dependsを使用してインポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="54f80e0a9c33b160a1bc6d17edf0694c587670e1" translate="yes" xml:space="preserve">
          <source>Any directory named &lt;code&gt;server/&lt;/code&gt; is not loaded on the client. Similar to wrapping your code in &lt;code&gt;if (Meteor.isServer) { ... }&lt;/code&gt;, except the client never even receives the code. Any sensitive code that you don&amp;rsquo;t want served to the client, such as code containing passwords or authentication mechanisms, should be kept in the &lt;code&gt;server/&lt;/code&gt; directory.</source>
          <target state="translated">&lt;code&gt;server/&lt;/code&gt; という名前のディレクトリはクライアントにロードされません。 &lt;code&gt;if (Meteor.isServer) { ... }&lt;/code&gt; でコードをラップするのと似ていますが、クライアントがコードを受信することさえありません。パスワードや認証メカニズムを含むコードなど、クライアントに提供したくない機密コードは、 &lt;code&gt;server/&lt;/code&gt; ディレクトリに保存する必要があります。</target>
        </trans-unit>
        <trans-unit id="1b97d4457bf03c6cd81fc9a0fc55c12c59cb1ebd" translate="yes" xml:space="preserve">
          <source>Any directory named &lt;code&gt;tests/&lt;/code&gt; is not loaded anywhere. Use this for any test code you want to run using a test runner outside of &lt;a href=&quot;testing&quot;&gt;Meteor&amp;rsquo;s built-in test tools&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;tests/&lt;/code&gt; という名前のディレクトリはどこにもロードされません。これは、&lt;a href=&quot;testing&quot;&gt;Meteorの組み込みテストツール&lt;/a&gt;以外のテストランナーを使用して実行するテストコードに使用します。</target>
        </trans-unit>
        <trans-unit id="1eed9d8611cb9874f94e60db799b799fe0d637bb" translate="yes" xml:space="preserve">
          <source>Any other client-side data stores (read more in the &lt;a href=&quot;data-loading#stores&quot;&gt;Data Loading article&lt;/a&gt;)</source>
          <target state="translated">その他のクライアント側のデータストア（詳細については、&lt;a href=&quot;data-loading#stores&quot;&gt;データの読み込みに関する記事を&lt;/a&gt;ご覧ください）</target>
        </trans-unit>
        <trans-unit id="cdf9bbefc76982e17471539cdea1217f5e1e0119" translate="yes" xml:space="preserve">
          <source>Anywhere</source>
          <target state="translated">Anywhere</target>
        </trans-unit>
        <trans-unit id="d718cfc91ca01459abd8b75acc03c2fa3dfe9eeb" translate="yes" xml:space="preserve">
          <source>Anywhere but publish functions</source>
          <target state="translated">どこでもいいけど公開機能</target>
        </trans-unit>
        <trans-unit id="e65e1cad7b403af55429566231a6c49f52e14b6d" translate="yes" xml:space="preserve">
          <source>Apart from simple interpolation, mustache tags can be used for control flow in the template. For instance, in the &lt;code&gt;Lists_show&lt;/code&gt; template, we render a list of todos like this:</source>
          <target state="translated">単純な補間とは別に、口ひげタグをテンプレートの制御フローに使用できます。たとえば、 &lt;code&gt;Lists_show&lt;/code&gt; テンプレートでは、todoのリストを次のようにレンダリングします。</target>
        </trans-unit>
        <trans-unit id="edcd5233f64822c2dd83d29085963d888872f414" translate="yes" xml:space="preserve">
          <source>App icons and launch screens</source>
          <target state="translated">アプリのアイコンと起動画面</target>
        </trans-unit>
        <trans-unit id="b16fe693a06028b9e11a8ad6b5984deabcc6f688" translate="yes" xml:space="preserve">
          <source>App.accessRule()</source>
          <target state="translated">App.accessRule()</target>
        </trans-unit>
        <trans-unit id="0a8ab8cdf975a3b9af79a0333a84a5ee7c842f5d" translate="yes" xml:space="preserve">
          <source>App.appendToConfig()</source>
          <target state="translated">App.appendToConfig()</target>
        </trans-unit>
        <trans-unit id="381f452164ada1d95c1dd9cd159af317bdf4cdac" translate="yes" xml:space="preserve">
          <source>App.configurePlugin()</source>
          <target state="translated">App.configurePlugin()</target>
        </trans-unit>
        <trans-unit id="28e0932e637b7f01d5b8ab4d663b3680cbf1285a" translate="yes" xml:space="preserve">
          <source>App.icons()</source>
          <target state="translated">App.icons()</target>
        </trans-unit>
        <trans-unit id="432165fc533188f8ac176bc3a0ff9b9b719a27a4" translate="yes" xml:space="preserve">
          <source>App.info()</source>
          <target state="translated">App.info()</target>
        </trans-unit>
        <trans-unit id="f1f94af4dfae2958052b8baf00d310dafc581262" translate="yes" xml:space="preserve">
          <source>App.launchScreens()</source>
          <target state="translated">App.launchScreens()</target>
        </trans-unit>
        <trans-unit id="1f65431545c034ffa0f3fa7ed051509cc756b9e4" translate="yes" xml:space="preserve">
          <source>App.setPreference()</source>
          <target state="translated">App.setPreference()</target>
        </trans-unit>
        <trans-unit id="e417325ee605b017aab3bc55e94e47c9a41976dc" translate="yes" xml:space="preserve">
          <source>Append custom tags into config's widget element.</source>
          <target state="translated">config の widget 要素にカスタムタグを追加します。</target>
        </trans-unit>
        <trans-unit id="d71de8152541f4a1b7fda48b87f3fe315656e14c" translate="yes" xml:space="preserve">
          <source>Application Structure</source>
          <target state="translated">アプリケーションの構造</target>
        </trans-unit>
        <trans-unit id="b6c273f7d56767507a649668833a7373a09fc5b4" translate="yes" xml:space="preserve">
          <source>Applications will find &lt;a href=&quot;#tracker_autorun&quot;&gt;&lt;code&gt;Tracker.autorun&lt;/code&gt;&lt;/a&gt; useful, while more advanced facilities such as &lt;code&gt;Tracker.Dependency&lt;/code&gt; and &lt;code&gt;onInvalidate&lt;/code&gt; callbacks are intended primarily for package authors implementing new reactive data sources.</source>
          <target state="translated">アプリケーションでは&lt;a href=&quot;#tracker_autorun&quot;&gt; &lt;code&gt;Tracker.autorun&lt;/code&gt; が&lt;/a&gt;便利ですが、 &lt;code&gt;Tracker.Dependency&lt;/code&gt; や &lt;code&gt;onInvalidate&lt;/code&gt; コールバックなどのより高度な機能は、主に新しいリアクティブデータソースを実装するパッケージ作成者向けです。</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="01213ceef0a147d194e6cf6fddd447dc4ccd443c" translate="yes" xml:space="preserve">
          <source>Array (or space-separated string) of Message-IDs to refer to</source>
          <target state="translated">参照するメッセージ ID の配列 (またはスペースで区切られた文字列)</target>
        </trans-unit>
        <trans-unit id="81ec532957dc01094b9d45d03698fc46c25b0573" translate="yes" xml:space="preserve">
          <source>Array of attachment objects, as described in the &lt;a href=&quot;https://github.com/nodemailer/mailcomposer/blob/v4.0.1/README.md#attachments&quot;&gt;mailcomposer documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/nodemailer/mailcomposer/blob/v4.0.1/README.md#attachments&quot;&gt;mailcomposerのドキュメントで&lt;/a&gt;説明されている、添付オブジェクトの配列。</target>
        </trans-unit>
        <trans-unit id="d55f3361dc0c2f0bda8e847c22a466e4ca9b6659" translate="yes" xml:space="preserve">
          <source>Array or string to choose from</source>
          <target state="translated">配列または文字列から選択</target>
        </trans-unit>
        <trans-unit id="8aec69482f7ae347caa06235b2e3144e97b0f493" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;Factory.create&lt;/code&gt; directly inserts documents into the collection that&amp;rsquo;s passed into the &lt;code&gt;Factory.define&lt;/code&gt; function, it can be a problem to use it on the client. However there&amp;rsquo;s a neat isolation trick that you can do to replace the server-backed &lt;code&gt;Todos&lt;/code&gt;&lt;a href=&quot;collections#client-collections&quot;&gt;client collection&lt;/a&gt; with a mocked out &lt;a href=&quot;#collections.html#local-collections&quot;&gt;local collection&lt;/a&gt;, that&amp;rsquo;s encoded in the &lt;a href=&quot;https://atmospherejs.com/hwillson/stub-collections&quot;&gt;&lt;code&gt;hwillson:stub-collections&lt;/code&gt;&lt;/a&gt; package.</source>
          <target state="translated">以下のよう &lt;code&gt;Factory.create&lt;/code&gt; が直接に渡されたコレクションに文書を挿入 &lt;code&gt;Factory.define&lt;/code&gt; の機能は、クライアント上でそれを使用するには問題になる可能性があります。ただし、サーバーでバックアップされた &lt;code&gt;Todos&lt;/code&gt; &lt;a href=&quot;collections#client-collections&quot;&gt;クライアントコレクション&lt;/a&gt;を、&lt;a href=&quot;https://atmospherejs.com/hwillson/stub-collections&quot;&gt; &lt;code&gt;hwillson:stub-collections&lt;/code&gt; &lt;/a&gt;パッケージでエンコードされたモックアウトされた&lt;a href=&quot;#collections.html#local-collections&quot;&gt;ローカルコレクション&lt;/a&gt;に置き換えるための、きちんとした分離トリックがあります。</target>
        </trans-unit>
        <trans-unit id="c78d428199036618175ed9ae303b1e5e7dbd8494" translate="yes" xml:space="preserve">
          <source>As a concrete example of using the &lt;a href=&quot;#custom-publication&quot;&gt;low-level API&lt;/a&gt;, consider the situation where you have some 3rd party REST endpoint which provides a changing set of data that&amp;rsquo;s valuable to your users. How do you make that data available?</source>
          <target state="translated">&lt;a href=&quot;#custom-publication&quot;&gt;低レベルAPIの&lt;/a&gt;具体的な使用例として、ユーザーにとって価値のあるデータの変化するセットを提供するサードパーティのRESTエンドポイントがある状況を考えてみましょう。どのようにしてそのデータを利用できるようにしますか？</target>
        </trans-unit>
        <trans-unit id="114eee85654e96417eb15e7b89423441d53a9398" translate="yes" xml:space="preserve">
          <source>As a safety measure, if &lt;code&gt;selector&lt;/code&gt; is omitted (or is &lt;code&gt;undefined&lt;/code&gt;), no documents will be removed. Set &lt;code&gt;selector&lt;/code&gt; to &lt;code&gt;{}&lt;/code&gt; if you really want to remove all documents from your collection.</source>
          <target state="translated">安全対策として、 &lt;code&gt;selector&lt;/code&gt; が省略されている（または &lt;code&gt;undefined&lt;/code&gt; である）場合、ドキュメントは削除されません。コレクションからすべてのドキュメントを本当に削除したい場合は、 &lt;code&gt;selector&lt;/code&gt; を &lt;code&gt;{}&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="7ab4f3b3c06af5c43287dc0645a7a96a1d3c2280" translate="yes" xml:space="preserve">
          <source>As a template helper. The identifier &lt;code&gt;foo&lt;/code&gt; refers to a helper function (or constant value) that is accessible from the current template.</source>
          <target state="translated">テンプレートヘルパーとして。識別子 &lt;code&gt;foo&lt;/code&gt; は、現在のテンプレートからアクセス可能なヘルパー関数（または定数値）を参照します。</target>
        </trans-unit>
        <trans-unit id="8fe943a860a61843f10a1f4ff793245c3f64ffce" translate="yes" xml:space="preserve">
          <source>As a web app, Cordova apps are subject to various security mechanisms designed to protect the integrity of your code and to avoid certain types of attacks. Which security mechanisms are in use may depend on the type and version of the web view your app runs in. In addition, Cordova itself, and in some cases the OS, adds different levels of access control that may also affect what content can and cannot be loaded. All this can make it fairly confusing to understand why something is not working, and even harder to understand the security implications of the various ways of configuring these mechanisms.</source>
          <target state="translated">ウェブアプリとして、Cordovaアプリはコードの整合性を保護し、特定の攻撃を回避するために設計された様々なセキュリティメカニズムの対象となります。どのセキュリティメカニズムが使用されているかは、アプリが実行されるウェブビューのタイプやバージョンによって異なります。さらに、Cordova自体やOSによっては、異なるレベルのアクセス制御が追加され、どのコンテンツを読み込めるか、読み込めないかにも影響します。これらのことから、何かが動作しない理由を理解するのはかなり混乱しますし、これらのメカニズムを設定する様々な方法のセキュリティへの影響を理解するのはさらに困難です。</target>
        </trans-unit>
        <trans-unit id="5c654c84aad085e7d355c8e102451761c4e45af4" translate="yes" xml:space="preserve">
          <source>As acceptance tests test the behavior of the application in a full browser context in a generic way, there are a range of tools that you can use to specify and run such tests. In this guide we&amp;rsquo;ll demonstrate using &lt;a href=&quot;https://chimp.readme.io&quot;&gt;Chimp&lt;/a&gt;, an acceptance testing tool with a few neat Meteor-specific features that makes it easy to use.</source>
          <target state="translated">受け入れテストは、フルブラウザコンテキストでのアプリケーションの動作を一般的な方法でテストするため、そのようなテストを指定して実行するために使用できるさまざまなツールがあります。このガイドでは、使いやすいMeteor固有の機能をいくつか備えた受け入れテストツールである&lt;a href=&quot;https://chimp.readme.io&quot;&gt;Chimpの&lt;/a&gt;使用方法を示します。</target>
        </trans-unit>
        <trans-unit id="103ce336a265824f32134a79b7e425646c5bd8df" translate="yes" xml:space="preserve">
          <source>As an alternative to publishing your package on Atmosphere, if you want to keep your package private, you can place it in your Meteor app in the &lt;code&gt;packages/&lt;/code&gt; directory, for instance &lt;code&gt;packages/foo/&lt;/code&gt;, and then add it to your app with &lt;code&gt;meteor add foo&lt;/code&gt;.</source>
          <target state="translated">Atmosphereでパッケージを公開する代わりに、パッケージを非公開にしたい場合は、それを &lt;code&gt;packages/&lt;/code&gt; ディレクトリのMeteorアプリ（たとえば、 &lt;code&gt;packages/foo/&lt;/code&gt; 、 &lt;code&gt;meteor add foo&lt;/code&gt; を使用してアプリに追加できます。 foo。</target>
        </trans-unit>
        <trans-unit id="b52994f3c80b4b7be57d20445a36c68c62648598" translate="yes" xml:space="preserve">
          <source>As an example, consider the &lt;code&gt;Todos_item&lt;/code&gt; template from the Todos example app:</source>
          <target state="translated">例として、Todosサンプルアプリの &lt;code&gt;Todos_item&lt;/code&gt; テンプレートを考えてみます。</target>
        </trans-unit>
        <trans-unit id="bfe4b0bfdc388675965d04e9e1ecae11a95df54d" translate="yes" xml:space="preserve">
          <source>As described in the &lt;a href=&quot;https://guide.meteor.com/ui-ux.html#smart-components&quot;&gt;UI/UX article&lt;/a&gt;, you should fetch data in the same component where you subscribed to that data. In a Blaze smart component, it&amp;rsquo;s usually simplest to fetch the data in a helper, which you can then use to pass data into a reusable child component. For example, in the &lt;code&gt;Lists_show_page&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://guide.meteor.com/ui-ux.html#smart-components&quot;&gt;UI / UXの記事&lt;/a&gt;で説明されているように、データをサブスクライブしたのと同じコンポーネントでデータをフェッチする必要があります。Blazeスマートコンポーネントでは、通常、ヘルパーでデータをフェッチするのが最も簡単です。ヘルパーを使用して、再利用可能な子コンポーネントにデータを渡すことができます。たとえば、 &lt;code&gt;Lists_show_page&lt;/code&gt; では次のようになります。</target>
        </trans-unit>
        <trans-unit id="52e320659b89e20f6729b1fa8ded350e2de1b6bd" translate="yes" xml:space="preserve">
          <source>As illustrated by the above example, there are four major types of template tags:</source>
          <target state="translated">上記の例で説明したように、テンプレートタグには大きく分けて4つの種類があります。</target>
        </trans-unit>
        <trans-unit id="2b84d8a0b5be7c9ca71a32925e9499a131948ea4" translate="yes" xml:space="preserve">
          <source>As mentioned before, mobile apps need to be able to &lt;a href=&quot;#connecting-to-the-server&quot;&gt;connect to a server&lt;/a&gt; to support hot code push. In production, you will need to specify which server to connect to &lt;a href=&quot;#building-for-production&quot;&gt;when building the app&lt;/a&gt; using the &lt;code&gt;--server&lt;/code&gt; option. The specified server address is used to set &lt;code&gt;ROOT_URL&lt;/code&gt; in &lt;code&gt;__meteor_runtime_config__&lt;/code&gt;, which is defined as part of the generated &lt;code&gt;index.html&lt;/code&gt; in the app bundle.</source>
          <target state="translated">前述のように、モバイルアプリはホットコードプッシュをサポート&lt;a href=&quot;#connecting-to-the-server&quot;&gt;するためにサーバー&lt;/a&gt;に接続できる必要があります。本番 &lt;code&gt;--server&lt;/code&gt; は、-serverオプションを使用し&lt;a href=&quot;#building-for-production&quot;&gt;てアプリ&lt;/a&gt;をビルドするときに、接続先のサーバーを指定する必要があります。指定されたサーバーアドレスは、 &lt;code&gt;__meteor_runtime_config__&lt;/code&gt; で &lt;code&gt;ROOT_URL&lt;/code&gt; を設定するために使用されます。これは、App Bundleで生成された &lt;code&gt;index.html&lt;/code&gt; の一部として定義されます。</target>
        </trans-unit>
        <trans-unit id="aad495ab9533614019a4d6f3c2cd9b1b8315401e" translate="yes" xml:space="preserve">
          <source>As mentioned in &lt;a href=&quot;#Blaze-render&quot;&gt;&lt;code&gt;Blaze.render&lt;/code&gt;&lt;/a&gt;, it is important to &amp;ldquo;remove&amp;rdquo; all content rendered via &lt;code&gt;Blaze.render&lt;/code&gt; using &lt;code&gt;Blaze.remove&lt;/code&gt;, unless the parent node of &lt;code&gt;renderedView&lt;/code&gt; is removed by a Meteor reactive update or with jQuery.</source>
          <target state="translated">で述べたよう&lt;a href=&quot;#Blaze-render&quot;&gt; &lt;code&gt;Blaze.render&lt;/code&gt; &lt;/a&gt;、それを介してレンダリングされたすべてのコンテンツ「削除」することが重要である &lt;code&gt;Blaze.render&lt;/code&gt; 使用 &lt;code&gt;Blaze.remove&lt;/code&gt; をの親ノードがない限り、 &lt;code&gt;renderedView&lt;/code&gt; が流星反応更新によって、またはjQueryを使って除去されます。</target>
        </trans-unit>
        <trans-unit id="c1ac7655bc68adb19d6c72bb4621ed39d6200d48" translate="yes" xml:space="preserve">
          <source>As mentioned in the &lt;a href=&quot;https://guide.meteor.com/build-tool.html#blaze&quot;&gt;build system article&lt;/a&gt;, the &lt;a href=&quot;https://atmospherejs.com/meteor/blaze-html-templates&quot;&gt;&lt;code&gt;blaze-html-templates&lt;/code&gt;&lt;/a&gt; package scans your source code for &lt;code&gt;.html&lt;/code&gt; files, picks out &lt;code&gt;&amp;lt;template name=&quot;templateName&quot;&amp;gt;&lt;/code&gt; tags, and compiles them into a JavaScript file that defines a function that implements the component in code, attached to the &lt;code&gt;Template.templateName&lt;/code&gt; symbol.</source>
          <target state="translated">で述べたように&lt;a href=&quot;https://guide.meteor.com/build-tool.html#blaze&quot;&gt;ビルドシステムの記事&lt;/a&gt;、&lt;a href=&quot;https://atmospherejs.com/meteor/blaze-html-templates&quot;&gt; &lt;code&gt;blaze-html-templates&lt;/code&gt; &lt;/a&gt;パッケージはのためのソースコードスキャン &lt;code&gt;.html&lt;/code&gt; 、ファイルを選び &lt;code&gt;&amp;lt;template name=&quot;templateName&quot;&amp;gt;&lt;/code&gt; タグを、および実装する機能を定義するJavaScriptファイルにコンパイルして &lt;code&gt;Template.templateName&lt;/code&gt; シンボルに添付されたコード内のコンポーネント。</target>
        </trans-unit>
        <trans-unit id="efa2d8159f5af0638eb43e0603517d750e43ac65" translate="yes" xml:space="preserve">
          <source>As of &lt;a href=&quot;https://cordova.apache.org/announcements/2016/10/24/ios-release.html&quot;&gt;Cordova iOS 4.3.0&lt;/a&gt; you may also need to &lt;code&gt;sudo gem install cocoapods&lt;/code&gt; to resolve a dependency with &lt;a href=&quot;https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/INSTALLATION.md&quot;&gt;PhoneGap Push Plugin&lt;/a&gt;.</source>
          <target state="translated">以下のよう&lt;a href=&quot;https://cordova.apache.org/announcements/2016/10/24/ios-release.html&quot;&gt;コルドバのiOS 4.3.0&lt;/a&gt;あなたもする必要があるかもしれない &lt;code&gt;sudo gem install cocoapods&lt;/code&gt; との依存関係解決するために、&lt;a href=&quot;https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/INSTALLATION.md&quot;&gt;PhoneGapのプッシュプラグイン&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="34fbe4922687e2d3d8dfa7887952e9bc52d93b6d" translate="yes" xml:space="preserve">
          <source>As of Android Marshmallow, certain system features (e.g. camera, microphone, etc.) require additional permissions in order to access them. These must be listed in the manifest and &lt;strong&gt;also requested at runtime&lt;/strong&gt;.</source>
          <target state="translated">Android Marshmallow以降、特定のシステム機能（カメラ、マイクなど）にアクセスするには、追加の権限が必要です。これらはマニフェストにリストされ、&lt;strong&gt;実行時にも要求&lt;/strong&gt;される必要があり&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="ae4403abb2e45dce33caa068f7690f83eeb19c2c" translate="yes" xml:space="preserve">
          <source>As of CoffeeScript 1.11.0, &lt;a href=&quot;http://coffeescript.org/#modules&quot;&gt;CoffeeScript supports &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; statements natively&lt;/a&gt;. Make sure you are using the latest version of the &lt;a href=&quot;https://atmospherejs.com/meteor/coffeescript&quot;&gt;CoffeeScript package&lt;/a&gt; in your project to get this support. New projects created today will get this version with &lt;code&gt;meteor add coffeescript&lt;/code&gt;. Make sure you don&amp;rsquo;t forget to include the &lt;code&gt;ecmascript&lt;/code&gt; and &lt;code&gt;modules&lt;/code&gt; packages: &lt;code&gt;meteor add ecmascript&lt;/code&gt;. (The &lt;code&gt;modules&lt;/code&gt; package is implied by &lt;code&gt;ecmascript&lt;/code&gt;.)</source>
          <target state="translated">CoffeeScript 1.11.0以降、&lt;a href=&quot;http://coffeescript.org/#modules&quot;&gt;CoffeeScriptはネイティブで &lt;code&gt;import&lt;/code&gt; および &lt;code&gt;export&lt;/code&gt; ステートメントをサポートしています&lt;/a&gt;。このサポートを受けるには、プロジェクトで最新バージョンの&lt;a href=&quot;https://atmospherejs.com/meteor/coffeescript&quot;&gt;CoffeeScriptパッケージ&lt;/a&gt;を使用していることを確認してください。今日作成された新しいプロジェクトは、このバージョンに &lt;code&gt;meteor add coffeescript&lt;/code&gt; を追加します。 &lt;code&gt;ecmascript&lt;/code&gt; と &lt;code&gt;modules&lt;/code&gt; パッケージを含めることを忘れないでください： &lt;code&gt;meteor add ecmascript&lt;/code&gt; 。（ &lt;code&gt;modules&lt;/code&gt; パッケージは &lt;code&gt;ecmascript&lt;/code&gt; によって暗示されます。）</target>
        </trans-unit>
        <trans-unit id="fa8095e4d4b71816465789a6513a5e09fdb84eba" translate="yes" xml:space="preserve">
          <source>As of Meteor 1.4, you must ensure you set the &lt;code&gt;replicaSet&lt;/code&gt; parameter on your &lt;code&gt;METEOR_OPLOG_URL&lt;/code&gt;</source>
          <target state="translated">Meteor 1.4以降では、 &lt;code&gt;replicaSet&lt;/code&gt; パラメーターを設定する必要があります &lt;code&gt;METEOR_OPLOG_URL&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7cb3055259d36f92b5aef9fc40bc5fae0c2d0dec" translate="yes" xml:space="preserve">
          <source>As of version 1.3, Meteor ships with full support for &lt;a href=&quot;https://developer.mozilla.org/en/docs/web/javascript/reference/statements/import&quot;&gt;ES2015 modules&lt;/a&gt;. The ES2015 module standard is the replacement for &lt;a href=&quot;http://requirejs.org/docs/commonjs.html&quot;&gt;CommonJS&lt;/a&gt; and &lt;a href=&quot;https://github.com/amdjs/amdjs-api&quot;&gt;AMD&lt;/a&gt;, which are commonly used JavaScript module format and loading systems.</source>
          <target state="translated">バージョン1.3以降、Meteorは&lt;a href=&quot;https://developer.mozilla.org/en/docs/web/javascript/reference/statements/import&quot;&gt;ES2015モジュール&lt;/a&gt;を完全にサポートして出荷されます。ES2015モジュール標準は、&lt;a href=&quot;http://requirejs.org/docs/commonjs.html&quot;&gt;CommonJS&lt;/a&gt;および&lt;a href=&quot;https://github.com/amdjs/amdjs-api&quot;&gt;AMDに&lt;/a&gt;代わるものです。これらは、一般的に使用されているJavaScriptモジュール形式およびロードシステムです。</target>
        </trans-unit>
        <trans-unit id="d0b8dff057ecedf521d295257ba65fd190b5ad6f" translate="yes" xml:space="preserve">
          <source>As the system under test in our integration test has a larger surface area, we need to stub out a few more points of integration with the rest of the stack. Of particular interest here is our use of the &lt;a href=&quot;#mocking-the-database&quot;&gt;&lt;code&gt;hwillson:stub-collections&lt;/code&gt;&lt;/a&gt; package and of &lt;a href=&quot;http://sinonjs.org&quot;&gt;Sinon&lt;/a&gt; to stub out Flow Router and our Subscription.</source>
          <target state="translated">統合テストのテスト対象のシステムは表面積が大きいため、スタックの残りの部分との統合のポイントをさらにいくつかスタブ化する必要があります。ここで特に興味深いのは、&lt;a href=&quot;#mocking-the-database&quot;&gt; &lt;code&gt;hwillson:stub-collections&lt;/code&gt; &lt;/a&gt;パッケージの使用と、フロールーターとサブスクリプションをスタブ化するための&lt;a href=&quot;http://sinonjs.org&quot;&gt;Sinonの&lt;/a&gt;使用です。</target>
        </trans-unit>
        <trans-unit id="1f7a269aaebbc7f0ce8c7d35b82e234647c16365" translate="yes" xml:space="preserve">
          <source>As we discussed above, trying to predict all future requirements of your data schema ahead of time is impossible. Inevitably, as a project matures, there will come a time when you need to change the schema of the database. You need to be careful about how you make the migration to the new schema to make sure your app works smoothly during and after the migration.</source>
          <target state="translated">上で説明したように、データスキーマの将来的な要件をすべて事前に予測しようとすることは不可能です。プロジェクトが成熟するにつれて、必然的にデータベースのスキーマを変更する必要が出てきます。移行中と移行後にアプリがスムーズに動作するように、新しいスキーマへの移行方法に注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="1b1f7c76e19eca5f25f2b075af9eda38eecebfb7" translate="yes" xml:space="preserve">
          <source>As we discussed earlier, it&amp;rsquo;s very common in Meteor applications to have associations between documents in different collections. Consequently, it&amp;rsquo;s also very common to need to write queries fetching related documents once you have a document you are interested in (for instance all the todos that are in a single list).</source>
          <target state="translated">前に説明したように、Meteorアプリケーションでは、異なるコレクション内のドキュメント間に関連付けがあることは非常に一般的です。したがって、関心のあるドキュメント（たとえば、1つのリストにあるすべてのタスク）を取得したら、関連するドキュメントをフェッチするクエリを作成する必要があることも非常に一般的です。</target>
        </trans-unit>
        <trans-unit id="29dd93acb63f26c4e1a8932e4ae252ba0cf75a13" translate="yes" xml:space="preserve">
          <source>As we discussed in the introduction, the URL is really just a serialization of some part of the client-side state the user is looking at. Although parameters can only be strings, it&amp;rsquo;s possible to convert any type of data to a string by serializing it.</source>
          <target state="translated">はじめに説明したように、URLは実際には、ユーザーが見ているクライアント側の状態の一部をシリアライズしたものにすぎません。パラメータは文字列のみにすることができますが、シリアル化することにより、あらゆるタイプのデータを文字列に変換することが可能です。</target>
        </trans-unit>
        <trans-unit id="5912be28372dade889ca2a9346b7831bdb0f5555" translate="yes" xml:space="preserve">
          <source>As we mentioned above, the &lt;code&gt;onRendered()&lt;/code&gt; callback is typically the right spot to call out to third party libraries that expect a pre-rendered DOM (such as jQuery plugins). The &lt;code&gt;onRendered()&lt;/code&gt; callback is triggered &lt;em&gt;once&lt;/em&gt; after the component has rendered and attached to the DOM for the first time.</source>
          <target state="translated">上で述べたように、 &lt;code&gt;onRendered()&lt;/code&gt; 、onRendered（）コールバックは、事前にレンダリングされたDOM（jQueryプラグインなど）を想定しているサードパーティのライブラリを呼び出すのに最適な場所です。 &lt;code&gt;onRendered()&lt;/code&gt; コールバックがトリガされ&lt;em&gt;たら、&lt;/em&gt;コンポーネントが最初にレンダリングされ、DOMに取り付けられた後。</target>
        </trans-unit>
        <trans-unit id="38dba416ec96765d98f7f5025e2e45f47def2d9b" translate="yes" xml:space="preserve">
          <source>As we&amp;rsquo;ll run this test in the same way that we did our unit test, we need to &lt;code&gt;import&lt;/code&gt; the relevant modules under test in the same way that we &lt;a href=&quot;#simple-integration-test-importing&quot;&gt;did in the unit test&lt;/a&gt;.</source>
          <target state="translated">私たちは私たちのユニットテストをしたのと同じように、このテストを実行しますように、我々はする必要が &lt;code&gt;import&lt;/code&gt; 我々がするのと同じ方法で試験中の関連するモジュールを&lt;a href=&quot;#simple-integration-test-importing&quot;&gt;ユニットテストで行いました&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3753cc8e3fca3fda6c4f0ab3f3fde280a86f5718" translate="yes" xml:space="preserve">
          <source>As we&amp;rsquo;ve defined a test file (&lt;code&gt;imports/todos/todos.tests.js&lt;/code&gt;), what this means is that the file above will be eagerly loaded, adding the &lt;code&gt;'builds correctly from factory'&lt;/code&gt; test to the Mocha registry.</source>
          <target state="translated">テストファイル（ &lt;code&gt;imports/todos/todos.tests.js&lt;/code&gt; ）を定義したので、これは、上記のファイルが熱心に読み込まれ、 &lt;code&gt;'builds correctly from factory'&lt;/code&gt; テストがMochaレジストリに追加されることを意味します。</target>
        </trans-unit>
        <trans-unit id="d407b8c96e5d55bc035c664b3c3baf3e22079b31" translate="yes" xml:space="preserve">
          <source>As we&amp;rsquo;ve discussed, Meteor is a framework for client rendered applications, but this doesn&amp;rsquo;t always remove the requirement for server rendered routes. There are two main use cases for server-side routing.</source>
          <target state="translated">これまでに説明したように、Meteorはクライアントレンダリングアプリケーションのフレームワークですが、これによって必ずしもサーバーレンダリングルートの要件が削除されるわけではありません。サーバー側ルーティングの主な使用例は2つあります。</target>
        </trans-unit>
        <trans-unit id="a1abd6160865d36ebc2c342028e604f5cbce3c0b" translate="yes" xml:space="preserve">
          <source>As we&amp;rsquo;ve placed the code above in a test file, it &lt;em&gt;will not&lt;/em&gt; load in normal development or production mode (which would be an incredibly bad thing!). If you create a Atmosphere package with a similar feature, you should mark it as &lt;code&gt;testOnly&lt;/code&gt; and it will similarly only load in test mode.</source>
          <target state="translated">上記のコードをテストファイルに配置したため、通常の開発モードまたはプロダクションモードで&lt;em&gt;は&lt;/em&gt;ロードされ&lt;em&gt;ません&lt;/em&gt;（これは非常に悪いことです！）。同様の機能を持つAtmosphereパッケージを作成する場合は、 &lt;code&gt;testOnly&lt;/code&gt; としてマークする必要があります。これにより、テストモードでのみロードされます。</target>
        </trans-unit>
        <trans-unit id="14b6a09f95218d20c78df0dee62f9f211210953d" translate="yes" xml:space="preserve">
          <source>As with CommonJS &lt;code&gt;module.exports&lt;/code&gt;, it is possible to define a single &lt;em&gt;default&lt;/em&gt; export:</source>
          <target state="translated">CommonJS &lt;code&gt;module.exports&lt;/code&gt; と同様に、単一の&lt;em&gt;デフォルト&lt;/em&gt;エクスポートを定義でき&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="97ffdfa3b12f57325a3c035199b86637c190c07c" translate="yes" xml:space="preserve">
          <source>As you can see, there is a fair amount of boilerplate to handle errors nicely in a form, but most of it can be easily abstracted by an off-the-shelf form framework or a simple application-specific wrapper of your own design.</source>
          <target state="translated">ご覧のように、フォームでエラーをうまく処理するためにはかなりの量のボイラプレートがありますが、そのほとんどは既製のフォームフレームワークや、独自のデザインのシンプルなアプリケーション固有のラッパーによって簡単に抽象化できます。</target>
        </trans-unit>
        <trans-unit id="276f78d237188d5bcb8c8b1bea29f989f1f9cac9" translate="yes" xml:space="preserve">
          <source>As you can see, this approach to calling Methods results in a better development workflow - you can more easily deal with the different parts of the Method separately and test your code more easily without having to deal with Meteor internals. But this approach requires you to write a lot of boilerplate on the Method definition side.</source>
          <target state="translated">ご覧のように、この方法でメソッドを呼び出すことで、開発ワークフローが改善されます。しかし、このアプローチでは、メソッド定義側で多くの定型文を書く必要があります。</target>
        </trans-unit>
        <trans-unit id="7452434ad18755926a22354b3770b97dd25d1e2e" translate="yes" xml:space="preserve">
          <source>As you can see, we can use the ES2015 template string functionality to generate a multi-line string that includes the password reset URL. We can also set a custom &lt;code&gt;from&lt;/code&gt; address and email subject.</source>
          <target state="translated">ご覧のとおり、ES2015テンプレート文字列機能を使用して、パスワードリセットURLを含む複数行の文字列を生成できます。我々はまた、カスタム設定することができます &lt;code&gt;from&lt;/code&gt; 住所、電子メールの件名を。</target>
        </trans-unit>
        <trans-unit id="2ef56ebc5fe97485bb2f45faeab4552e5f8e9030" translate="yes" xml:space="preserve">
          <source>As you write more code and come up against the recommended style rules, you can take that as an opportunity to learn more about your programming language and how different people prefer to use it.</source>
          <target state="translated">あなたがより多くのコードを書いて、推奨されるスタイルのルールに直面すると、あなたはあなたのプログラミング言語と異なる人々がそれを使用することを好む方法についての詳細を学ぶための機会としてそれを取ることができます。</target>
        </trans-unit>
        <trans-unit id="95af8ee4216607403b1f122ae8b837dd1818b5a3" translate="yes" xml:space="preserve">
          <source>As your app gets more complex, you will invariably need to store some data about individual users, and the most natural place to put that data is in additional fields on the &lt;code&gt;Meteor.users&lt;/code&gt; collection described above. In a more normalized data situation it would be a good idea to keep Meteor&amp;rsquo;s user data and yours in two separate tables, but since MongoDB doesn&amp;rsquo;t deal well with data associations it makes sense to just use one collection.</source>
          <target state="translated">アプリがさらに複雑になると、常に個々のユーザーに関するデータを保存する必要があり、そのデータを配置する最も自然な場所は、上記の &lt;code&gt;Meteor.users&lt;/code&gt; コレクションの追加フィールドにあります。より正規化されたデータの状況では、Meteorのユーザーデータとユーザーデータを2つの別々のテーブルに保持することをお勧めしますが、MongoDBはデータの関連付けを適切に処理しないため、1つのコレクションを使用するのが理にかなっています。</target>
        </trans-unit>
        <trans-unit id="20e338624cee29d0effead85b0dd0e70de783b4c" translate="yes" xml:space="preserve">
          <source>Assets</source>
          <target state="translated">Assets</target>
        </trans-unit>
        <trans-unit id="781d1600ad51aa1df0cf08bfc8fb61e796143a0e" translate="yes" xml:space="preserve">
          <source>Assigning default values based on the &lt;code&gt;defaultValue&lt;/code&gt; in the schema definition</source>
          <target state="translated">スキーマ定義の &lt;code&gt;defaultValue&lt;/code&gt; に基づいてデフォルト値を割り当てる</target>
        </trans-unit>
        <trans-unit id="8980c681d3221afc3da7a612479cd2084b6fc673" translate="yes" xml:space="preserve">
          <source>Association helpers</source>
          <target state="translated">協会ヘルパー</target>
        </trans-unit>
        <trans-unit id="d5862606c3b8b113c42053fb851227f05e6d074d" translate="yes" xml:space="preserve">
          <source>Associations between collections</source>
          <target state="translated">コレクション間の関連付け</target>
        </trans-unit>
        <trans-unit id="da27fe7480745304c55a665924b3df23d9181996" translate="yes" xml:space="preserve">
          <source>Asyncronous Callbacks</source>
          <target state="translated">非同期コールバック</target>
        </trans-unit>
        <trans-unit id="90bb0f85a1a6bd065a34114333256e188a111001" translate="yes" xml:space="preserve">
          <source>At element level (i.e. anywhere an HTML tag could go)</source>
          <target state="translated">要素レベルでは(つまり、HTMLタグが行きそうな場所)。</target>
        </trans-unit>
        <trans-unit id="50ed59c154d8c81b337b669516be66c08b3c9402" translate="yes" xml:space="preserve">
          <source>At its core, a Method is an API endpoint for your server; you can define a Method on the server and its counterpart on the client, then call it with some data, write to the database, and get the return value in a callback. Meteor Methods are also tightly integrated with the pub/sub and data loading systems of Meteor to allow for &lt;a href=&quot;http://info.meteor.com/blog/optimistic-ui-with-meteor-latency-compensation&quot;&gt;Optimistic UI&lt;/a&gt;&amp;mdash;the ability to simulate server-side actions on the client to make your app feel faster than it actually is.</source>
          <target state="translated">基本的に、メソッドはサーバーのAPIエンドポイントです。サーバーでメソッドを定義し、クライアントで対応するメソッドを定義してから、データを使用してメソッドを呼び出し、データベースに書き込み、コールバックで戻り値を取得できます。Meteorメソッドは、Meteorのpub / subおよびデータ読み込みシステムと緊密に統合されており、&lt;a href=&quot;http://info.meteor.com/blog/optimistic-ui-with-meteor-latency-compensation&quot;&gt;楽観的なUI&lt;/a&gt;を可能にします。つまり、クライアント上でサーバー側のアクションをシミュレートして、アプリを実際よりも速く感じることができます。</target>
        </trans-unit>
        <trans-unit id="096d20c5494d3c9eaea902d4a95e722c5380d56b" translate="yes" xml:space="preserve">
          <source>At its core, a web application offers its users a view into, and a way to modify, a persistent set of data. Whether managing a list of todos, or ordering a car to pick you up, you are interacting with a permanent but constantly changing data layer.</source>
          <target state="translated">その中核をなすウェブアプリケーションは、ユーザーに永続的なデータのセットを閲覧し、変更する方法を提供します。TODOS のリストを管理する場合でも、車を注文して迎えに行く場合でも、ユーザーは永続的でありながら常に変化するデータレイヤーと対話していることになります。</target>
        </trans-unit>
        <trans-unit id="42d76533272268f0e403a25f4279c6bf7e7ef47e" translate="yes" xml:space="preserve">
          <source>At most one of &lt;code&gt;options.connection&lt;/code&gt; and &lt;code&gt;options.ddpUrl&lt;/code&gt; should be provided in any instantiation of &lt;code&gt;AccountsClient&lt;/code&gt;. If neither is provided, &lt;code&gt;Meteor.connection&lt;/code&gt; will be used as the &lt;code&gt;.connection&lt;/code&gt; property of the &lt;code&gt;AccountsClient&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;AccountsClient&lt;/code&gt; のインスタンス化では、 &lt;code&gt;options.connection&lt;/code&gt; および &lt;code&gt;options.ddpUrl&lt;/code&gt; の最大1つを指定する必要があります。どちらも指定されていない場合、 &lt;code&gt;Meteor.connection&lt;/code&gt; が &lt;code&gt;AccountsClient&lt;/code&gt; インスタンスの &lt;code&gt;.connection&lt;/code&gt; プロパティとして使用されます。</target>
        </trans-unit>
        <trans-unit id="a0f0dcbdd68beab03ea707f6b14cc2fecbf3f7f4" translate="yes" xml:space="preserve">
          <source>At the end of the flush cycle (i.e. after the computation is done re-running), the old subscription checks to see if it was re-used, and if not, sends a message to the server to tell the server to shut it down.</source>
          <target state="translated">フラッシュ・サイクルの最後(すなわち、計算が再実行された後)に、古いサブスクリプションは、それが再利用されたかどうかをチェックし、再利用されなかった場合は、サーバーにシャットダウンするように指示するメッセージをサーバーに送信します。</target>
        </trans-unit>
        <trans-unit id="fa0ea99350074de42d36efe5a00b6e8073f89f33" translate="yes" xml:space="preserve">
          <source>At the heart of a View is an &lt;a href=&quot;https://docs.meteor.com/api/tracker.html#Tracker-autorun&quot;&gt;autorun&lt;/a&gt; that calls the View&amp;rsquo;s &lt;code&gt;renderFunction&lt;/code&gt;, uses the result to create DOM nodes, and replaces the contents of the View with these new DOM nodes. A View&amp;rsquo;s content may consist of any number of consecutive DOM nodes (though if it is zero, a placeholder node such as a comment or an empty text node is automatically supplied). Any reactive dependency established by &lt;code&gt;renderFunction&lt;/code&gt; causes a full recalculation of the View&amp;rsquo;s contents when the dependency is invalidated. Templates, however, are compiled in such a way that they do not have top-level dependencies and so will only ever render once, while their parts may re-render many times.</source>
          <target state="translated">ビューの中心にある&lt;a href=&quot;https://docs.meteor.com/api/tracker.html#Tracker-autorun&quot;&gt;オートラン&lt;/a&gt;ビューの呼び出しを &lt;code&gt;renderFunction&lt;/code&gt; を、DOMノードを作成するために、結果を使用し、これらの新しいDOMノードとビューの内容を置き換えます。ビューのコンテンツは、任意の数の連続したDOMノードで構成できます（ただし、ゼロの場合は、コメントや空のテキストノードなどのプレースホルダーノードが自動的に提供されます）。 &lt;code&gt;renderFunction&lt;/code&gt; によって確立されたリアクティブな依存関係は、依存関係が無効になったときにビューのコンテンツを完全に再計算します。ただし、テンプレートは、トップレベルの依存関係がないようにコンパイルされているため、一度しかレンダリングされず、パーツが何度も再レンダリングされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="b7d85c774b67e2afde5ed2f8faaa123cf3c4562a" translate="yes" xml:space="preserve">
          <source>Atmosphere dependencies</source>
          <target state="translated">大気依存性</target>
        </trans-unit>
        <trans-unit id="890930cc3418ec9e8beb72cd3c8b0987e5e99220" translate="yes" xml:space="preserve">
          <source>Atmosphere package namespacing</source>
          <target state="translated">大気パッケージの名前空間</target>
        </trans-unit>
        <trans-unit id="ca3efe41d393e7d27f7b43433ba3d5fd5dabd91d" translate="yes" xml:space="preserve">
          <source>Atmosphere packages are packages written specifically for Meteor and have several advantages over npm when used with Meteor. In particular, Atmosphere packages can:</source>
          <target state="translated">Atmosphere パッケージは Meteor 用に特別に書かれたパッケージで、Meteor と一緒に使うと npm よりもいくつかの利点があります。特に、Atmosphere パッケージは</target>
        </trans-unit>
        <trans-unit id="22276f2c629370e2c0cefe00383deefd62e8014a" translate="yes" xml:space="preserve">
          <source>Atmosphere packages can include &lt;a href=&quot;http://cordova.apache.org/plugins/&quot;&gt;Cordova plugins&lt;/a&gt; to ship native code for the Meteor mobile app container. This way, you can interact with the native camera interface, use the gyroscope, save files locally, and more.</source>
          <target state="translated">Atmosphereパッケージには、Meteorモバイルアプリコンテナーのネイティブコードを出荷する&lt;a href=&quot;http://cordova.apache.org/plugins/&quot;&gt;Cordovaプラグイン&lt;/a&gt;を含めることができます。このようにして、ネイティブのカメラインターフェイスと対話したり、ジャイロスコープを使用したり、ファイルをローカルに保存したりできます。</target>
        </trans-unit>
        <trans-unit id="469c347ee22dac48ab36e39577fd891ca12fc435" translate="yes" xml:space="preserve">
          <source>Atmosphere packages can ship with contained &lt;a href=&quot;https://guide.meteor.com/writing-packages.html#npm-dependencies&quot;&gt;npm dependencies&lt;/a&gt;, in which case you don&amp;rsquo;t need to do anything to make them work. However, some Atmosphere packages will expect that you have installed certain &amp;ldquo;peer&amp;rdquo; npm dependencies in your application.</source>
          <target state="translated">Atmosphereパッケージは、含まれている&lt;a href=&quot;https://guide.meteor.com/writing-packages.html#npm-dependencies&quot;&gt;npm依存関係&lt;/a&gt;と共に出荷できます。その場合、それらを機能させるために何もする必要はありません。ただし、一部のAtmosphereパッケージは、アプリケーションに特定の「ピア」npm依存関係がインストールされていることを前提としています。</target>
        </trans-unit>
        <trans-unit id="676295e8feb718dee7e03a8aab36db86db0fa2f0" translate="yes" xml:space="preserve">
          <source>Atmosphere vs. npm</source>
          <target state="translated">雰囲気 vs.npm</target>
        </trans-unit>
        <trans-unit id="41dded417052424bdcf3c39f6c8664147fae6806" translate="yes" xml:space="preserve">
          <source>Atom</source>
          <target state="translated">Atom</target>
        </trans-unit>
        <trans-unit id="6bdf00d93745093129a4b32124e7ba749db63f8a" translate="yes" xml:space="preserve">
          <source>Attach functions to the instance</source>
          <target state="translated">インスタンスに関数を付ける</target>
        </trans-unit>
        <trans-unit id="a3a2bf9c9266df67002e20b8feaf98a735e52c0b" translate="yes" xml:space="preserve">
          <source>Attempts to bring you to the latest version of Meteor, and then to upgrade your packages to their latest versions. By default, update will not break compatibility.</source>
          <target state="translated">Meteor の最新バージョンへの移行を試み、パッケージを最新バージョンにアップグレードします。デフォルトでは、アップデートを行っても互換性は失われません。</target>
        </trans-unit>
        <trans-unit id="28d4a3eea8bfa5c23fba97140601bdacecdac47a" translate="yes" xml:space="preserve">
          <source>Attribute Helpers</source>
          <target state="translated">属性ヘルパー</target>
        </trans-unit>
        <trans-unit id="ffa507f2e416879e4f6b70d1e5d9df3ae74dab15" translate="yes" xml:space="preserve">
          <source>Attribute helpers</source>
          <target state="translated">属性ヘルパー</target>
        </trans-unit>
        <trans-unit id="219c5ddac0f9f308a33459aa0065d03b0745b4d0" translate="yes" xml:space="preserve">
          <source>Attributes from dynamic attribute tags are combined from left to right, after normal attributes, with later attribute values overwriting previous ones. Multiple values for the same attribute are not merged in any way, so if &lt;code&gt;attrs1&lt;/code&gt; specifies a value for the &lt;code&gt;class&lt;/code&gt; attribute, it will overwrite &lt;code&gt;{{myClass}}&lt;/code&gt;. As always, Spacebars takes care of recalculating the element&amp;rsquo;s attributes if any of &lt;code&gt;myClass&lt;/code&gt;, &lt;code&gt;attrs1&lt;/code&gt;, or &lt;code&gt;attrs2&lt;/code&gt; changes reactively.</source>
          <target state="translated">動的属性タグの属性は、通常の属性の後に左から右に結合され、後の属性値が前の属性値を上書きします。同じ属性の複数の値は決してマージされないため、 &lt;code&gt;attrs1&lt;/code&gt; が &lt;code&gt;class&lt;/code&gt; 属性の値を指定すると、 &lt;code&gt;{{myClass}}&lt;/code&gt; が上書きされます。いつものように、スペースバーは、 &lt;code&gt;myClass&lt;/code&gt; 、 &lt;code&gt;attrs1&lt;/code&gt; 、または &lt;code&gt;attrs2&lt;/code&gt; のいずれかが反応的に変更された場合に要素の属性を再計算します。</target>
        </trans-unit>
        <trans-unit id="13d954cdceae57b14d2e483f121bdc910ef82e18" translate="yes" xml:space="preserve">
          <source>Automated testing is critical because it allows you to run a far greater set of tests much more often than you could manually, allowing you to catch regression errors immediately.</source>
          <target state="translated">自動化されたテストは、手動で行うよりもはるかに多くのテストを頻繁に実行することができるため、リグレッションエラーをすぐにキャッチすることができるため、非常に重要です。</target>
        </trans-unit>
        <trans-unit id="273fea8ed91e271c435ba5e66231c17f1682055d" translate="yes" xml:space="preserve">
          <source>Automatic error checking</source>
          <target state="translated">自動エラーチェック</target>
        </trans-unit>
        <trans-unit id="9770213201ed0b51211dffa83da5db9d26147eb2" translate="yes" xml:space="preserve">
          <source>Available functions are:</source>
          <target state="translated">利用可能な機能は</target>
        </trans-unit>
        <trans-unit id="8efa8e08e608693674a8f108ff557784e8515381" translate="yes" xml:space="preserve">
          <source>Avoid allow/deny</source>
          <target state="translated">許可/拒否を避ける</target>
        </trans-unit>
        <trans-unit id="a792fa4821933ee58fa6ced67a2035e27e2bae7e" translate="yes" xml:space="preserve">
          <source>Avoid calling the server-side Method if the client-side validation failed, so we don&amp;rsquo;t waste server resources.</source>
          <target state="translated">クライアント側の検証が失敗した場合はサーバー側のメソッドを呼び出さないでください。サーバーリソースを無駄にしないためです。</target>
        </trans-unit>
        <trans-unit id="e154105509ed638e4be964b02c34afb8c19ffb4f" translate="yes" xml:space="preserve">
          <source>BIND_IP</source>
          <target state="translated">BIND_IP</target>
        </trans-unit>
        <trans-unit id="0b0bdb3ac128781c08d52532a584c524abde585f" translate="yes" xml:space="preserve">
          <source>Babel (for syntax highlighting &amp;ndash; &lt;a href=&quot;https://github.com/babel/babel-sublime#installation&quot;&gt;full instructions&lt;/a&gt;)</source>
          <target state="translated">Babel（構文の強調表示&amp;ndash; &lt;a href=&quot;https://github.com/babel/babel-sublime#installation&quot;&gt;完全な手順&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="d2e6fb31e2e71948571239e1b59de6545826cc54" translate="yes" xml:space="preserve">
          <source>Basic Method</source>
          <target state="translated">基本的な方法</target>
        </trans-unit>
        <trans-unit id="953657b3d60232a538f74887fa8b6a3c3c1d63ab" translate="yes" xml:space="preserve">
          <source>Basic syntax</source>
          <target state="translated">基本構文</target>
        </trans-unit>
        <trans-unit id="df59c37567d452b3df15811a05347add631d792a" translate="yes" xml:space="preserve">
          <source>Be warned however, that although the core plugins are generally well maintained and up to date with the rest of Cordova, the quality of third-party plugins can be a bit of a gamble. You also have to make sure the plugin you want to use is &lt;a href=&quot;#plugin-compatibility&quot;&gt;compatible with the Cordova platform versions Meteor bundles&lt;/a&gt;.</source>
          <target state="translated">ただし、コアプラグインは一般によくメンテナンスされており、他のCordovaの最新の状態になっていますが、サードパーティのプラグインの品質は少しギャンブルになる可能性があることに注意してください。また、使用するプラグインが&lt;a href=&quot;#plugin-compatibility&quot;&gt;CordovaプラットフォームバージョンのMeteorバンドル&lt;/a&gt;と互換性があることを確認する必要もあります。</target>
        </trans-unit>
        <trans-unit id="5e198485ffc7f5bfc7055abf084c85ae24b58c35" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;Blaze.toHTML&lt;/code&gt; returns a string, it is not able to update the DOM in response to reactive data changes. Instead, any reactive data changes will invalidate the current Computation if there is one (for example, an autorun that is the caller of &lt;code&gt;Blaze.toHTML&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Blaze.toHTML&lt;/code&gt; は文字列を返すため、反応的なデータ変更に応じてDOMを更新することはできません。代わりに、反応データが変更されると、現在の計算が存在する場合（たとえば、 &lt;code&gt;Blaze.toHTML&lt;/code&gt; の呼び出し元である自動実行）は無効になります。</target>
        </trans-unit>
        <trans-unit id="a7c6ea44ced8c0c508edbdc8866cbfe8fa6848c0" translate="yes" xml:space="preserve">
          <source>Because Crosswalk bundles native code for Chromium, you will end up with APKs for both ARM and x86. You can find the generated APKs in the &lt;code&gt;&amp;lt;build-output-directory&amp;gt;/android/project/build/outputs/apk&lt;/code&gt; directory.</source>
          <target state="translated">CrosswalkにはChromiumのネイティブコードがバンドルされているため、ARMとx86の両方のAPKが作成されます。生成されたAPKは &lt;code&gt;&amp;lt;build-output-directory&amp;gt;/android/project/build/outputs/apk&lt;/code&gt; ディレクトリにあります。</target>
        </trans-unit>
        <trans-unit id="36597a39894449bf87dbf058f6bb39ff8e7c0002" translate="yes" xml:space="preserve">
          <source>Because a Cordova app is a web app, this means you use standard web elements to create your user interface instead of relying on platform-specific native UI components. Creating a good mobile user experience is an art in itself, but is fortunately helped by the availability of various frameworks and libraries.</source>
          <target state="translated">CordovaアプリはWebアプリなので、プラットフォーム固有のネイティブUIコンポーネントに頼るのではなく、標準のWeb要素を使ってユーザーインターフェースを作成することになります。良いモバイルユーザー体験を作ることはそれ自体が芸術ですが、幸いなことに様々なフレームワークやライブラリが利用できるので助かります。</target>
        </trans-unit>
        <trans-unit id="16cb9372dbe0844bb6bf0a2dde71796b86b427da" translate="yes" xml:space="preserve">
          <source>Because installing plugins into a Cordova project already containing plugins can lead to indeterminate results, Meteor will remove and add back all plugins whenever a change to any of the plugins in your project is made.</source>
          <target state="translated">既にプラグインが含まれているCordovaプロジェクトにプラグインをインストールすると不確定な結果になる可能性があるため、プロジェクト内のプラグインに変更が加えられた場合、Meteorはすべてのプラグインを削除して追加します。</target>
        </trans-unit>
        <trans-unit id="89a8287ce319e143911e1cf92a80ca9c2c261aaa" translate="yes" xml:space="preserve">
          <source>Because it&amp;rsquo;s a &lt;code&gt;Promise&lt;/code&gt;, there are a couple methods developers can use to dictate what will happen upon the availability of the dynamically loaded module:</source>
          <target state="translated">これは &lt;code&gt;Promise&lt;/code&gt; であるため、動的にロードされるモジュールが利用可能になるとどうなるかを開発者が指示するために使用できる方法がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="af16a1c9c98456117d167a6f78040ea697541f04" translate="yes" xml:space="preserve">
          <source>Because the Cordova integration in Meteor does not serve your app from &lt;code&gt;file://&lt;/code&gt; URLs, access to local files through &lt;code&gt;file://&lt;/code&gt; URLs is not allowed either due to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;same-origin policy&lt;/a&gt;.</source>
          <target state="translated">MeteorのCordova統合は &lt;code&gt;file://&lt;/code&gt; URL からアプリを提供しないため、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;同じ生成元のポリシー&lt;/a&gt;により、 &lt;code&gt;file://&lt;/code&gt; URL を介したローカルファイルへのアクセスも許可されません。</target>
        </trans-unit>
        <trans-unit id="82d18fb9dfba6e82874786da637c709e06ccbc1b" translate="yes" xml:space="preserve">
          <source>Because there is a tight coupling between plugin versions and Cordova platform versions, you may encounter build time or runtime errors as a result of incompatible plugins. If this happens, you will have to install a different plugin version, or it may turn out a plugin is not (yet) compatible with the Cordova platform versions we bundle.</source>
          <target state="translated">プラグインのバージョンとCordovaプラットフォームのバージョンの間には密接な関係があるため、互換性のないプラグインを使用した場合、ビルド時にエラーが発生したり、実行時にエラーが発生したりすることがあります。その場合、別のバージョンのプラグインをインストールしなければならないか、プラグインが(まだ)バンドルしているCordovaプラットフォームのバージョンと互換性がないことが判明するかもしれません。</target>
        </trans-unit>
        <trans-unit id="ab223a96e8304110f1a95d3feacd8f61319a39fd" translate="yes" xml:space="preserve">
          <source>Because you can only connect to your app after it has started up, you sometimes miss startup warnings and errors. You can invoke &lt;code&gt;location.reload()&lt;/code&gt; in the DevTools console to reload a running app, this time with the remote debugger connected.</source>
          <target state="translated">アプリは起動後にしか接続できないため、起動時の警告やエラーを見逃すことがあります。DevToolsコンソールで &lt;code&gt;location.reload()&lt;/code&gt; を呼び出して、今度はリモートデバッガーを接続した状態で、実行中のアプリをリロードできます。</target>
        </trans-unit>
        <trans-unit id="19d16d53495cd58544f6153ebdbd306568c1f121" translate="yes" xml:space="preserve">
          <source>Because you can only connect to your app after it has started up, you sometimes miss startup warnings and errors. You can invoke &lt;code&gt;location.reload()&lt;/code&gt; in the Web Inspector console to reload a running app, this time with the remote debugger connected.</source>
          <target state="translated">アプリは起動後にしか接続できないため、起動時の警告やエラーを見逃すことがあります。Webインスペクターコンソールで &lt;code&gt;location.reload()&lt;/code&gt; を呼び出して、今度はリモートデバッガーを接続した状態で、実行中のアプリをリロードできます。</target>
        </trans-unit>
        <trans-unit id="0c6113b07d3d4eef759604eebb84fceb3d30ec31" translate="yes" xml:space="preserve">
          <source>Because your template has been rendered, you can use functions like &lt;a href=&quot;templates#Blaze-TemplateInstance-findAll&quot;&gt;&lt;code&gt;this.findAll&lt;/code&gt;&lt;/a&gt; which look at its DOM nodes.</source>
          <target state="translated">テンプレートがレンダリングされているので、DOMノードを調べる&lt;a href=&quot;templates#Blaze-TemplateInstance-findAll&quot;&gt; &lt;code&gt;this.findAll&lt;/code&gt; の&lt;/a&gt;ような関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="5abec997d982467c6b36892bc76dde8b3a33a8f6" translate="yes" xml:space="preserve">
          <source>Before &lt;code&gt;observe&lt;/code&gt; returns, &lt;code&gt;added&lt;/code&gt; (or &lt;code&gt;addedAt&lt;/code&gt;) will be called zero or more times to deliver the initial results of the query.</source>
          <target state="translated">&lt;code&gt;addedAt&lt;/code&gt; が戻る前に、クエリの初期結果を配信 &lt;code&gt;observe&lt;/code&gt; に、 &lt;code&gt;added&lt;/code&gt; （またはaddedAt）が0回以上呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a8d01123c94f4137460f621537cca27b552394ab" translate="yes" xml:space="preserve">
          <source>Before &lt;code&gt;observeChanges&lt;/code&gt; returns, &lt;code&gt;added&lt;/code&gt; (or &lt;code&gt;addedBefore&lt;/code&gt;) will be called zero or more times to deliver the initial results of the query.</source>
          <target state="translated">&lt;code&gt;observeChanges&lt;/code&gt; が戻る前に、 &lt;code&gt;added&lt;/code&gt; （または &lt;code&gt;addedBefore&lt;/code&gt; ）が0回以上呼び出されて、クエリの初期結果が配信されます。</target>
        </trans-unit>
        <trans-unit id="ea83a0240e17a73c7243dc5297ea57c2a0625086" translate="yes" xml:space="preserve">
          <source>Before Meteor 1.2, all email addresses and usernames in the database were considered to be case-sensitive. This meant that if you registered an account as &lt;code&gt;AdaLovelace@example.com&lt;/code&gt;, and then tried to log in with &lt;code&gt;adalovelace@example.com&lt;/code&gt;, you&amp;rsquo;d see an error indicating that no user with that email exists. Of course, this can be quite confusing, so we decided to improve things in Meteor 1.2. But the situation was not as simple as it seemed; since MongoDB doesn&amp;rsquo;t have a concept of case-insensitive indexes, it was impossible to guarantee unique emails at the database level. For this reason, we have some special APIs for querying and updating users which manage the case-sensitivity problem at the application level.</source>
          <target state="translated">Meteor 1.2以前は、データベース内のすべての電子メールアドレスとユーザー名は大文字と小文字が区別されると見なされていました。これはあなたのようにアカウントを登録した場合ことを意味 &lt;code&gt;AdaLovelace@example.com&lt;/code&gt; 、その後、使ってログインしようとした &lt;code&gt;adalovelace@example.com&lt;/code&gt; 、そのメールのユーザが存在しないことを示すエラーを参照してくださいね。もちろん、これはかなり混乱する可能性があるため、Meteor 1.2で改善することを決定しました。しかし、状況は思ったほど単純ではありませんでした。 MongoDBには大文字と小文字を区別しないインデックスの概念がないため、データベースレベルで一意のメールを保証することは不可能でした。このため、アプリケーションレベルで大文字と小文字の区別の問題を管理する、ユーザーのクエリと更新のためのいくつかの特別なAPIがあります。</target>
        </trans-unit>
        <trans-unit id="4b97e2efdb777988d22042bb6ba0cf3928ee1d81" translate="yes" xml:space="preserve">
          <source>Before Meteor 1.3, the contents of &lt;code&gt;node_modules&lt;/code&gt; directories in Meteor application code were completely ignored. When you enable &lt;code&gt;modules&lt;/code&gt;, those useless &lt;code&gt;node_modules&lt;/code&gt; directories suddenly become infinitely more useful:</source>
          <target state="translated">Meteor 1.3以前は、Meteorアプリケーションコードの &lt;code&gt;node_modules&lt;/code&gt; ディレクトリの内容は完全に無視されていました。 &lt;code&gt;modules&lt;/code&gt; を有効にすると、それらの役に立たない &lt;code&gt;node_modules&lt;/code&gt; ディレクトリが突然無限に便利になります。</target>
        </trans-unit>
        <trans-unit id="6740be49888ca023a2351923b69ddf19230c4e0d" translate="yes" xml:space="preserve">
          <source>Before Meteor 1.3, the order in which application files were evaluated was dictated by a set of rules described in the &lt;a href=&quot;http://guide.meteor.com/structure.html#load-order&quot;&gt;Application Structure - Default file load order&lt;/a&gt; section of the Meteor Guide. These rules could become frustrating when one file depended on a variable defined by another file, particularly when the first file was evaluated after the second file.</source>
          <target state="translated">Meteor 1.3より前のバージョンでは、アプリケーションファイルが評価される&lt;a href=&quot;http://guide.meteor.com/structure.html#load-order&quot;&gt;順序&lt;/a&gt;は、Meteorガイドの「アプリケーションの構造-デフォルトのファイルロード順序」セクションで説明されている一連のルールによって規定されていました。1つのファイルが別のファイルで定義された変数に依存している場合、特に最初のファイルが2番目のファイルの後に評価された場合、これらのルールは苛立たしいものになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="fac9afefab23391468c447eb56ca2d2e2bfd0d21" translate="yes" xml:space="preserve">
          <source>Before running, each test sets up the data it needs using the &lt;code&gt;generateData&lt;/code&gt; helper (see &lt;a href=&quot;#creating-integration-test-data&quot;&gt;the section on creating integration test data&lt;/a&gt; for more detail) then goes to the homepage.</source>
          <target state="translated">実行する前に、各テストは、 &lt;code&gt;generateData&lt;/code&gt; ヘルパーを使用して必要なデータをセットアップし（詳細について&lt;a href=&quot;#creating-integration-test-data&quot;&gt;は、統合テストデータの作成に関するセクションを&lt;/a&gt;参照）、ホームページに移動します。</target>
        </trans-unit>
        <trans-unit id="75bd7ba492a966d7825a4e04a738e986549b97ca" translate="yes" xml:space="preserve">
          <source>Before submitting the APK(s) to the Play Store, you will need to sign the APK and run &lt;a href=&quot;http://developer.android.com/tools/help/zipalign.html&quot;&gt;&lt;code&gt;zipalign&lt;/code&gt;&lt;/a&gt; on it to optimize the archive.</source>
          <target state="translated">APKをPlayストアに送信する前に、APKに署名し、&lt;a href=&quot;http://developer.android.com/tools/help/zipalign.html&quot;&gt; &lt;code&gt;zipalign&lt;/code&gt; &lt;/a&gt;を実行してアーカイブを最適化する必要があります。</target>
        </trans-unit>
        <trans-unit id="58e76639e21d86a7cf0977025b282b4a338136b7" translate="yes" xml:space="preserve">
          <source>Before the release of Meteor 1.3, the only way to share values between files in an application was to assign them to global variables or communicate through shared variables like &lt;code&gt;Session&lt;/code&gt; (variables which, while not technically global, sure do feel syntactically identical to global variables). With the introduction of modules, one module can refer precisely to the exports of any other specific module, so global variables are no longer necessary.</source>
          <target state="translated">Meteor 1.3のリリース前は、アプリケーション内のファイル間で値を共有する唯一の方法は、それらをグローバル変数に割り当てるか、 &lt;code&gt;Session&lt;/code&gt; などの共有変数を介して通信することでした（技術的にグローバルではないが、構文的にグローバル変数と同じように感じる変数）。 。モジュールの導入により、1つのモジュールが他の特定のモジュールのエクスポートを正確に参照できるため、グローバル変数は不要になりました。</target>
        </trans-unit>
        <trans-unit id="9cbad5e621b33b0133b0cff0287c9b2124625e64" translate="yes" xml:space="preserve">
          <source>Before we get into all of the different user-facing accounts functionality you can add with Meteor, let&amp;rsquo;s go over some of the features built into the Meteor DDP protocol and &lt;code&gt;accounts-base&lt;/code&gt; package. These are the parts of Meteor that you&amp;rsquo;ll definitely need to be aware of if you have any user accounts in your app; most of everything else is optional and added/removed via packages.</source>
          <target state="translated">Meteorで追加できるユーザー向けのさまざまなアカウント機能のすべてに入る前に、Meteor DDPプロトコルと &lt;code&gt;accounts-base&lt;/code&gt; パッケージに組み込まれている機能のいくつかを見てみましょう。これらはMeteorの一部であり、アプリにユーザーアカウントがある場合は、必ず知っておく必要があります。他のほとんどすべてはオプションであり、パッケージを介して追加/削除されます。</target>
        </trans-unit>
        <trans-unit id="842beb51ca9c5417a27f472386d0e0d52dcc074f" translate="yes" xml:space="preserve">
          <source>Before:</source>
          <target state="translated">Before:</target>
        </trans-unit>
        <trans-unit id="6ac7498757b80872595b31eee7c338943a0e13e5" translate="yes" xml:space="preserve">
          <source>Behaves like &lt;code&gt;Match.Maybe&lt;/code&gt; except it doesn&amp;rsquo;t accept &lt;code&gt;null&lt;/code&gt;. If used in an object, the behavior is identical to &lt;code&gt;Match.Maybe&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; を受け入れないことを除いて、 &lt;code&gt;Match.Maybe&lt;/code&gt; と同じように動作します。オブジェクトで使用した場合の動作は &lt;code&gt;Match.Maybe&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="50a87cb1bb65133222bac100054495f307293e4d" translate="yes" xml:space="preserve">
          <source>Behavior tab</source>
          <target state="translated">行動タブ</target>
        </trans-unit>
        <trans-unit id="c621d5c41837954f6ad92f1eba8d0a32fee19d86" translate="yes" xml:space="preserve">
          <source>Behind every template or part of a template &amp;mdash; a template tag, say, like &lt;code&gt;{{foo}}&lt;/code&gt; or &lt;code&gt;{{#if}}&lt;/code&gt; &amp;mdash; is a View object, which is a reactively updating region of DOM.</source>
          <target state="translated">すべてのテンプレートまたはテンプレートの一部（たとえば、 &lt;code&gt;{{foo}}&lt;/code&gt; や &lt;code&gt;{{#if}}&lt;/code&gt; などのテンプレートタグ）の背後には、DOMの反応的に更新される領域であるViewオブジェクトがあります。</target>
        </trans-unit>
        <trans-unit id="7e22e62a2eb772a5a2dfa91a54daad5db9e5738d" translate="yes" xml:space="preserve">
          <source>Below, you can find directions for setting up automatic linting at many different stages of development. In general, you want to run the linter as often as possible, because it&amp;rsquo;s the fastest and easiest way to identify typos and small errors.</source>
          <target state="translated">以下に、開発のさまざまな段階で自動リンティングを設定する方法を示します。リンターは、タイプミスや小さなエラーを特定するための最も速くて簡単な方法であるため、一般に、できるだけ頻繁にリンターを実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="bef15881080061463a963904c9625933eea9ae5e" translate="yes" xml:space="preserve">
          <source>Benefits of Methods over REST</source>
          <target state="translated">RESTを超えるメソッドのメリット</target>
        </trans-unit>
        <trans-unit id="3f8b8a37ae1c5b93ff031cc3135ac145e3d98c68" translate="yes" xml:space="preserve">
          <source>Benefits of consistent style</source>
          <target state="translated">一貫したスタイルのメリット</target>
        </trans-unit>
        <trans-unit id="b992d752d113a14ecca7614618e053bfb0a9bba6" translate="yes" xml:space="preserve">
          <source>Besides the common input files&amp;rsquo; methods, these methods are available:</source>
          <target state="translated">一般的な入力ファイルのメソッドに加えて、これらのメソッドが利用可能です：</target>
        </trans-unit>
        <trans-unit id="d86abe20dfc3d1589f94ab5935e4ac22c7d1f0bc" translate="yes" xml:space="preserve">
          <source>Besides the common methods available on the input files&amp;rsquo; class, the following methods are available:</source>
          <target state="translated">入力ファイルのクラスで使用できる一般的なメソッドに加えて、次のメソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="a443309dd65eff130e13fefdbbdb66f69b7ac9ba" translate="yes" xml:space="preserve">
          <source>Best practices for defining and calling Methods.</source>
          <target state="translated">メソッドの定義と呼び出しのベストプラクティス。</target>
        </trans-unit>
        <trans-unit id="60634b609eb279ed2091d0de9c92c92308e838ab" translate="yes" xml:space="preserve">
          <source>Best practices for writing reusable components in Blaze.</source>
          <target state="translated">Blazeで再利用可能なコンポーネントを書くためのベストプラクティス。</target>
        </trans-unit>
        <trans-unit id="b1c0d0de6145c780477570f98babdd639892b221" translate="yes" xml:space="preserve">
          <source>Bind the application server to a specific network interface by IP address, for example: &lt;code&gt;BIND_IP=192.168.0.2&lt;/code&gt;.</source>
          <target state="translated">アプリケーションサーバーをIPアドレスで特定のネットワークインターフェースにバインドします（例： &lt;code&gt;BIND_IP=192.168.0.2&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="4795dfe49b46fcfdaeaaf8f45bb7b00dd86a774d" translate="yes" xml:space="preserve">
          <source>Binding (eg. from &lt;code&gt;{{#let}}&lt;/code&gt; or &lt;code&gt;{{#each in}}&lt;/code&gt;) in current scope</source>
          <target state="translated">現在のスコープでのバインディング（例： &lt;code&gt;{{#let}}&lt;/code&gt; または &lt;code&gt;{{#each in}}&lt;/code&gt; から）</target>
        </trans-unit>
        <trans-unit id="7ff440de8d23dfe665747a8cf3c9d62a3d1cf5ab" translate="yes" xml:space="preserve">
          <source>Blaze</source>
          <target state="translated">Blaze</target>
        </trans-unit>
        <trans-unit id="d45cb94b6e10b7908a86cad81aab3d11d5d94c8d" translate="yes" xml:space="preserve">
          <source>Blaze HTML templates</source>
          <target state="translated">Blaze HTML テンプレート</target>
        </trans-unit>
        <trans-unit id="91fdcf3e85ce36e991ac7da0bcc8282a2aa578ee" translate="yes" xml:space="preserve">
          <source>Blaze Jade templates</source>
          <target state="translated">ブレイズジェイドのテンプレート</target>
        </trans-unit>
        <trans-unit id="1bb5b9cd15840a68e734293e214589091dfde2b7" translate="yes" xml:space="preserve">
          <source>Blaze Templates in React</source>
          <target state="translated">ReactでのBlazeテンプレート</target>
        </trans-unit>
        <trans-unit id="60ff3e4031329adb453c91bc106abe22c9c1ecae" translate="yes" xml:space="preserve">
          <source>Blaze and the build system</source>
          <target state="translated">ブレイズとビルドシステム</target>
        </trans-unit>
        <trans-unit id="ecfdf742a5c6737d05e274475b3257c1dbc7236a" translate="yes" xml:space="preserve">
          <source>Blaze has many full-stack Meteor packages on Atmosphere, such as &lt;a href=&quot;https://atmospherejs.com/useraccounts/core&quot;&gt;&lt;code&gt;useraccounts:core&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://atmospherejs.com/aldeed/autoform&quot;&gt;&lt;code&gt;aldeed:autoform&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Blazeには、&lt;a href=&quot;https://atmospherejs.com/useraccounts/core&quot;&gt; &lt;code&gt;useraccounts:core&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;https://atmospherejs.com/aldeed/autoform&quot;&gt; &lt;code&gt;aldeed:autoform&lt;/code&gt; &lt;/a&gt;など、Atmosphereに多くのフルスタックMeteorパッケージがあります。</target>
        </trans-unit>
        <trans-unit id="5756ad34518cb601adcdad483dbfc0fff1231b19" translate="yes" xml:space="preserve">
          <source>Blaze is Meteor&amp;rsquo;s built-in reactive rendering library. Usually, templates are written in &lt;a href=&quot;spacebars&quot;&gt;Spacebars&lt;/a&gt;, a variant of &lt;a href=&quot;http://handlebarsjs.com&quot;&gt;Handlebars&lt;/a&gt; designed to take advantage of &lt;a href=&quot;https://github.com/meteor/meteor/tree/devel/packages/tracker&quot;&gt;Tracker&lt;/a&gt;, Meteor&amp;rsquo;s reactivity system. These templates are compiled into JavaScript UI components that are rendered by the Blaze library.</source>
          <target state="translated">Blazeは、Meteorに組み込まれているリアクティブレンダリングライブラリです。通常、テンプレートがで書かれている&lt;a href=&quot;spacebars&quot;&gt;宇宙・天体バー&lt;/a&gt;、バリアントの&lt;a href=&quot;http://handlebarsjs.com&quot;&gt;ハンドルバー&lt;/a&gt;を利用するように設計された&lt;a href=&quot;https://github.com/meteor/meteor/tree/devel/packages/tracker&quot;&gt;トラッカー&lt;/a&gt;、流星の反応システム。これらのテンプレートは、BlazeライブラリによってレンダリングされるJavaScript UIコンポーネントにコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="cd77dff1adda67c3fe762d044cae8bad64e91482" translate="yes" xml:space="preserve">
          <source>Blaze is intentionally opaque about re-rendering. Tracker and Blaze are designed as &amp;ldquo;eventual consistency&amp;rdquo; systems that end up fully reflecting any data change eventually, but may take a few re-runs or re-renders in getting there, depending on how they are used. This can be frustrating if you are trying to carefully control when your component is re-rendered.</source>
          <target state="translated">Blazeは、再レンダリングについて意図的に不透明です。TrackerとBlazeは、最終的にはデータの変更を完全に反映する「結果整合性」システムとして設計されていますが、使用方法によっては、再実行または再レンダリングが必要になる場合があります。コンポーネントを再レンダリングするタイミングを注意深く制御しようとすると、これはイライラすることがあります。</target>
        </trans-unit>
        <trans-unit id="bd1fbe544f389fd851009ea10afc846cd309ac2d" translate="yes" xml:space="preserve">
          <source>Blaze is not required to build applications in Meteor&amp;mdash;you can also easily use &lt;a href=&quot;http://react-in-meteor.readthedocs.org/en/latest/&quot;&gt;React&lt;/a&gt; or &lt;a href=&quot;http://www.angular-meteor.com&quot;&gt;Angular&lt;/a&gt; to develop your UI. However, this particular article will take you through best practices in building an application in Blaze, which is used as the UI engine in all of the other articles.</source>
          <target state="translated">Meteorでアプリケーションを構築するためにBlazeは必要ありません&lt;a href=&quot;http://react-in-meteor.readthedocs.org/en/latest/&quot;&gt;。React&lt;/a&gt;や&lt;a href=&quot;http://www.angular-meteor.com&quot;&gt;Angular&lt;/a&gt;を使用して簡単にUIを開発することもできます。ただし、この記事では、他のすべての記事でUIエンジンとして使用されるBlazeでアプリケーションを構築する際のベストプラクティスについて説明します。</target>
        </trans-unit>
        <trans-unit id="425ec09b6bb552a4fb67503d6cdf308dfeb201b7" translate="yes" xml:space="preserve">
          <source>Blaze is the package that makes reactive templates possible. You can use the Blaze API directly in order to render templates programmatically and manipulate &amp;ldquo;Views,&amp;rdquo; the building blocks of reactive templates.</source>
          <target state="translated">Blazeは、リアクティブテンプレートを可能にするパッケージです。Blaze APIを直接使用して、テンプレートをプログラムでレンダリングし、リアクティブテンプレートの構成要素である「ビュー」を操作できます。</target>
        </trans-unit>
        <trans-unit id="97dee0caaeaf40c573bdb780ef00c8c61f9bf754" translate="yes" xml:space="preserve">
          <source>Blaze uses an easy-to-learn &lt;a href=&quot;http://handlebarsjs.com&quot;&gt;Handlebars&lt;/a&gt;-like template syntax, with logic like &lt;code&gt;{{#if}}&lt;/code&gt; and &lt;code&gt;{{#each}}&lt;/code&gt; interspersed in your HTML files. Template functions and CSS-selector events maps are written in JavaScript files.</source>
          <target state="translated">Blazeは、HTMLファイルに &lt;code&gt;{{#if}}&lt;/code&gt; や &lt;code&gt;{{#each}}&lt;/code&gt; などのロジックを散在させた、&lt;a href=&quot;http://handlebarsjs.com&quot;&gt;ハンドルバーの&lt;/a&gt;ような学習しやすいテンプレート構文を使用しています。テンプレート関数とCSSセレクターイベントマップはJavaScriptファイルに記述されます。</target>
        </trans-unit>
        <trans-unit id="838c68fde027c2f83949feb6ee52f859a5357c3b" translate="yes" xml:space="preserve">
          <source>Blaze.If()</source>
          <target state="translated">Blaze.If()</target>
        </trans-unit>
        <trans-unit id="625246c9abb3577aa0320a1da3a26bf812b04659" translate="yes" xml:space="preserve">
          <source>Blaze.TemplateInstance#$()</source>
          <target state="translated">Blaze.TemplateInstance#$()</target>
        </trans-unit>
        <trans-unit id="9364d700207f76c2b155f4f49cc6ee0434a15582" translate="yes" xml:space="preserve">
          <source>Blaze.TemplateInstance#autorun()</source>
          <target state="translated">Blaze.TemplateInstance#autorun()</target>
        </trans-unit>
        <trans-unit id="a53379fdf05039a364c4fa3f0841e67a5e3d386a" translate="yes" xml:space="preserve">
          <source>Blaze.TemplateInstance#data</source>
          <target state="translated">Blaze.TemplateInstance#data</target>
        </trans-unit>
        <trans-unit id="0a3a728401d7f78a35c1cb49428b842e99e735ea" translate="yes" xml:space="preserve">
          <source>Blaze.TemplateInstance#find()</source>
          <target state="translated">Blaze.TemplateInstance#find()</target>
        </trans-unit>
        <trans-unit id="779b5dc42b1a220a370335de2ab7bff411b5e9ea" translate="yes" xml:space="preserve">
          <source>Blaze.TemplateInstance#findAll()</source>
          <target state="translated">Blaze.TemplateInstance#findAll()</target>
        </trans-unit>
        <trans-unit id="a0873b99f95aa7cfa8d38cbf81496c7bde0bdeb5" translate="yes" xml:space="preserve">
          <source>Blaze.TemplateInstance#firstNode</source>
          <target state="translated">Blaze.TemplateInstance#firstNode</target>
        </trans-unit>
        <trans-unit id="e3ddbd680d8deb80510e226f056a08d37d806229" translate="yes" xml:space="preserve">
          <source>Blaze.TemplateInstance#lastNode</source>
          <target state="translated">Blaze.TemplateInstance#lastNode</target>
        </trans-unit>
        <trans-unit id="6b52a4652e81831bff752c94b5ce73846d0512a0" translate="yes" xml:space="preserve">
          <source>Blaze.TemplateInstance#subscribe()</source>
          <target state="translated">Blaze.TemplateInstance#subscribe()</target>
        </trans-unit>
        <trans-unit id="f1cfed4b381d93e9d50af7a276f64d329720c2a8" translate="yes" xml:space="preserve">
          <source>Blaze.TemplateInstance#view</source>
          <target state="translated">Blaze.TemplateInstance#view</target>
        </trans-unit>
        <trans-unit id="b8f3d75f343c38c102bfdb5a199a3f4b2dfc9be8" translate="yes" xml:space="preserve">
          <source>Block Helpers</source>
          <target state="translated">ブロックヘルパー</target>
        </trans-unit>
        <trans-unit id="70af3238de42da66beb5f354425347f373dca837" translate="yes" xml:space="preserve">
          <source>Block Tags</source>
          <target state="translated">ブロックタグ</target>
        </trans-unit>
        <trans-unit id="d64197f2851ce58a8d3d271f23ed7fa0f9466463" translate="yes" xml:space="preserve">
          <source>Block tags can be used inside attribute values:</source>
          <target state="translated">ブロックタグは、属性値の内部で使用することができます。</target>
        </trans-unit>
        <trans-unit id="d2624e889e729d76da8196451c8457674f429ff2" translate="yes" xml:space="preserve">
          <source>Block tags invoke built-in directives or custom block helpers, passing a block of template content that may be instantiated once, more than once, or not at all by the directive or helper.</source>
          <target state="translated">ブロックタグは、組み込みのディレクティブやカスタムブロックヘルパーを呼び出し、ディレクティブやヘルパーによってインスタンス化されるテンプレートコンテンツのブロックを渡します。</target>
        </trans-unit>
        <trans-unit id="0143f6c4f551090c3f8f3db84502f90effd159e0" translate="yes" xml:space="preserve">
          <source>Block tags may also specify &amp;ldquo;else&amp;rdquo; content, separated from the main content by the special template tag &lt;code&gt;{{else}}&lt;/code&gt;.</source>
          <target state="translated">ブロックタグは、特別なテンプレートタグ &lt;code&gt;{{else}}&lt;/code&gt; によってメインコンテンツから分離された「else」コンテンツを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="e780c333333005f7389437be49392c0cdb34a2e3" translate="yes" xml:space="preserve">
          <source>Boolean variable. True if running in a Cordova mobile environment.</source>
          <target state="translated">ブール値。Cordovaのモバイル環境で動作している場合は真。</target>
        </trans-unit>
        <trans-unit id="08524f87797312c593a230239177996812c0c3ae" translate="yes" xml:space="preserve">
          <source>Boolean variable. True if running in client environment.</source>
          <target state="translated">ブール値。クライアント環境で実行している場合は真。</target>
        </trans-unit>
        <trans-unit id="f27c1114c79b3aa9b4c780ac15975f3e7ad25cd3" translate="yes" xml:space="preserve">
          <source>Boolean variable. True if running in development environment.</source>
          <target state="translated">ブール型変数。開発環境で実行している場合は真。</target>
        </trans-unit>
        <trans-unit id="274de0dcff958e1db418ac191608bf7783aa5a38" translate="yes" xml:space="preserve">
          <source>Boolean variable. True if running in production environment.</source>
          <target state="translated">ブール変数。本番環境で実行している場合は真。</target>
        </trans-unit>
        <trans-unit id="1999bda52cc1b0b140d5a576e2ca2531154b7a86" translate="yes" xml:space="preserve">
          <source>Boolean variable. True if running in server environment.</source>
          <target state="translated">ブール変数。サーバー環境で実行している場合は真。</target>
        </trans-unit>
        <trans-unit id="ffcac2828e683c1e9a794d34b30015b27ff273bb" translate="yes" xml:space="preserve">
          <source>Borrowing from the &lt;code&gt;tap:i18n&lt;/code&gt; example &lt;a href=&quot;#tap-i18n-js&quot;&gt;above&lt;/a&gt;, in &lt;code&gt;universe:i18n&lt;/code&gt; our &lt;code&gt;displayError&lt;/code&gt; function now looks like this:</source>
          <target state="translated">以下からの借入 &lt;code&gt;tap:i18n&lt;/code&gt; の例&lt;a href=&quot;#tap-i18n-js&quot;&gt;上記&lt;/a&gt;に &lt;code&gt;universe:i18n&lt;/code&gt; 当社 &lt;code&gt;displayError&lt;/code&gt; の機能は次のようになります。</target>
        </trans-unit>
        <trans-unit id="4d8b7b12b2d7fe17b26b912b94bccb9195122df1" translate="yes" xml:space="preserve">
          <source>Both HTTP and HTTPS protocols are supported. The &lt;code&gt;url&lt;/code&gt; argument must be an absolute URL including protocol and host name on the server, but may be relative to the current host on the client. The &lt;code&gt;query&lt;/code&gt; option replaces the query string of &lt;code&gt;url&lt;/code&gt;. Parameters specified in &lt;code&gt;params&lt;/code&gt; that are put in the URL are appended to any query string. For example, with a &lt;code&gt;url&lt;/code&gt; of &lt;code&gt;'/path?query'&lt;/code&gt; and &lt;code&gt;params&lt;/code&gt; of &lt;code&gt;{ foo: 'bar' }&lt;/code&gt;, the final URL will be &lt;code&gt;'/path?query&amp;amp;foo=bar'&lt;/code&gt;.</source>
          <target state="translated">HTTPプロトコルとHTTPSプロトコルの両方がサポートされています。 &lt;code&gt;url&lt;/code&gt; 引数には、サーバー上のプロトコルとホスト名を含む絶対URLでなければなりませんが、クライアント上の現在のホストに対して相対的であってもよいです。 &lt;code&gt;query&lt;/code&gt; オプションがのクエリ文字列置き換え &lt;code&gt;url&lt;/code&gt; 。URLに配置される &lt;code&gt;params&lt;/code&gt; で指定されたパラメーターは、任意のクエリ文字列に追加されます。たとえば、 &lt;code&gt;url&lt;/code&gt; が &lt;code&gt;'/path?query'&lt;/code&gt; で、 &lt;code&gt;params&lt;/code&gt; が &lt;code&gt;{ foo: 'bar' }&lt;/code&gt; 場合、最終的なURLは &lt;code&gt;'/path?query&amp;amp;foo=bar'&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="d3ef5f6a05ef42c44b65fa5c1b57d16ea6181323" translate="yes" xml:space="preserve">
          <source>Breaking schema changes</source>
          <target state="translated">スキーマの変更を壊す</target>
        </trans-unit>
        <trans-unit id="0d0417953fb6057cba10cb30f8314f4da0225229" translate="yes" xml:space="preserve">
          <source>Breakpoints can be set using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger&quot;&gt;&lt;code&gt;debugger&lt;/code&gt; keyword&lt;/a&gt;, or through the web UI of Node Inspector (&amp;ldquo;Sources&amp;rdquo; tab).</source>
          <target state="translated">ブレークポイントは、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger&quot;&gt; &lt;code&gt;debugger&lt;/code&gt; キーワード&lt;/a&gt;を使用するか、ノードインスペクターのWeb UI（「ソース」タブ）を使用して設定できます。</target>
        </trans-unit>
        <trans-unit id="7c6fc962f4fe9b56d99663612ad913e750bf7f04" translate="yes" xml:space="preserve">
          <source>Browsers limit the amount of data they will put in the application cache, which can vary due to factors such as how much disk space is free. Unfortunately if your application goes over the limit rather than disabling the application cache altogether and running the application online, the browser will instead fail that particular &lt;em&gt;update&lt;/em&gt; of the cache, leaving your users running old code.</source>
          <target state="translated">ブラウザーは、アプリケーションキャッシュに入れるデータの量を制限します。これは、空きディスク容量などの要因により変動する可能性があります。残念ながら、アプリケーションがアプリケーションキャッシュを完全に無効にしてオンラインで実行するのではなく、制限を超えると、ブラウザは代わりにその特定のキャッシュ&lt;em&gt;更新&lt;/em&gt;に失敗し、ユーザーは古いコードを実行したままになります。</target>
        </trans-unit>
        <trans-unit id="4b0a504295dd4c0437c340122fc3cd55baede437" translate="yes" xml:space="preserve">
          <source>Buffers of binary data are represented by &lt;code&gt;Uint8Array&lt;/code&gt; instances on JavaScript platforms that support them. On implementations of JavaScript that do not support &lt;code&gt;Uint8Array&lt;/code&gt;, binary data buffers are represented by standard arrays containing numbers ranging from 0 to 255, and the &lt;code&gt;$Uint8ArrayPolyfill&lt;/code&gt; key set to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">バイナリデータのバッファーは、それらをサポートするJavaScriptプラットフォーム上の &lt;code&gt;Uint8Array&lt;/code&gt; インスタンスによって表されます。 &lt;code&gt;Uint8Array&lt;/code&gt; をサポートしないJavaScriptの実装では、バイナリデータバッファーは、0〜255の範囲の数値を含む標準配列で表され、 &lt;code&gt;$Uint8ArrayPolyfill&lt;/code&gt; キーが &lt;code&gt;true&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="44aba47e1f8464da650aeb1c01be7d61818f7318" translate="yes" xml:space="preserve">
          <source>Build Plugin</source>
          <target state="translated">ビルドプラグイン</target>
        </trans-unit>
        <trans-unit id="a3974624af347a31732593250527936c169a498d" translate="yes" xml:space="preserve">
          <source>Build Plugins API</source>
          <target state="translated">ビルドプラグインAPI</target>
        </trans-unit>
        <trans-unit id="9f1ab2cb9af208e7f4ac2e0bbaeacdef61f17c98" translate="yes" xml:space="preserve">
          <source>Build System</source>
          <target state="translated">ビルドシステム</target>
        </trans-unit>
        <trans-unit id="a3b684eb5589f8c2caadd59b2a2b8f57c78ba143" translate="yes" xml:space="preserve">
          <source>Build plugins</source>
          <target state="translated">ビルドプラグイン</target>
        </trans-unit>
        <trans-unit id="3e9d7391bbcb1097ddb0ded32499e35c5adc1007" translate="yes" xml:space="preserve">
          <source>Build plugins are created with &lt;a href=&quot;#PackageNamespace-registerBuildPlugin&quot;&gt;&lt;code&gt;Package.registerBuildPlugin&lt;/code&gt;&lt;/a&gt;. See the coffeescript package for an example. Build plugins are fully-fledged Meteor programs in their own right and have their own namespace, package dependencies, source files and npm requirements.</source>
          <target state="translated">ビルドプラグインは&lt;a href=&quot;#PackageNamespace-registerBuildPlugin&quot;&gt; &lt;code&gt;Package.registerBuildPlugin&lt;/code&gt; で&lt;/a&gt;作成されます。例については、coffeescriptパッケージを参照してください。ビルドプラグインは、それ自体が本格的なMeteorプログラムであり、独自の名前空間、パッケージの依存関係、ソースファイル、npm要件があります。</target>
        </trans-unit>
        <trans-unit id="9506a16b8fce2b1339fe0958fa2aac00e0777cc2" translate="yes" xml:space="preserve">
          <source>Build plugins fill the phases 2, 3 and 5.</source>
          <target state="translated">プラグインをビルドすると、フェーズ2、3、5が満たされます。</target>
        </trans-unit>
        <trans-unit id="5d2c2c9f4c5c25dcaff9e2050a29eabb1ebe8b57" translate="yes" xml:space="preserve">
          <source>Building an application completely from scratch is a tall order. This is one of the main reasons you might consider using Meteor in the first place - you can focus on writing the code that is specific to your app, instead of reinventing wheels like user login and data synchronization. To streamline your workflow even further, it makes sense to use community packages from &lt;a href=&quot;https://www.npmjs.com&quot;&gt;npm&lt;/a&gt; and &lt;a href=&quot;https://atmospherejs.com&quot;&gt;Atmosphere&lt;/a&gt;. Many of these packages are recommended in the guide, and you can find more in the online directories.</source>
          <target state="translated">アプリケーションを完全にゼロから構築するのは大変な作業です。これは、そもそもMeteorの使用を検討する主な理由の1つです。ユーザーのログインやデータの同期などのホイールを再発明する代わりに、アプリ固有のコードの記述に集中できます。ワークフローをさらに合理化するには、&lt;a href=&quot;https://www.npmjs.com&quot;&gt;npm&lt;/a&gt;と&lt;a href=&quot;https://atmospherejs.com&quot;&gt;Atmosphereの&lt;/a&gt;コミュニティパッケージを使用するのが理にかなっています。これらのパッケージの多くはガイドで推奨されており、オンラインディレクトリでさらに見つけることができます。</target>
        </trans-unit>
        <trans-unit id="7bfd6775ecfe873ad1d226b3eee9234c45eb9da4" translate="yes" xml:space="preserve">
          <source>Building for production</source>
          <target state="translated">生産のための建物</target>
        </trans-unit>
        <trans-unit id="a7aff2b12618ba350dd16857d4d8f4798a31963f" translate="yes" xml:space="preserve">
          <source>Built-in Block Helpers</source>
          <target state="translated">内蔵ブロックヘルパー</target>
        </trans-unit>
        <trans-unit id="cd57ee36fd454b49e6a5d678ccac4189458b8c25" translate="yes" xml:space="preserve">
          <source>Bulk changes</source>
          <target state="translated">一括変更</target>
        </trans-unit>
        <trans-unit id="36b8eb373cc4fa0e422e225c9b9076022a1243ac" translate="yes" xml:space="preserve">
          <source>Business logic an attacker could analyze to find weak points.</source>
          <target state="translated">攻撃者はビジネスロジックを分析して弱点を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="fc0a52b8dd7d0ca53738b962731f18b0226287db" translate="yes" xml:space="preserve">
          <source>But if a modifier doesn&amp;rsquo;t contain any $-operators, then it is instead interpreted as a literal document, and completely replaces whatever was previously in the database. (Literal document modifiers are not currently supported by &lt;a href=&quot;#allow&quot;&gt;validated updates&lt;/a&gt;.)</source>
          <target state="translated">ただし、修飾子に$演算子が含まれていない場合は、代わりにリテラルドキュメントとして解釈され、以前にデータベースにあったものを完全に置き換えます。（リテラルドキュメント修飾子は、現在&lt;a href=&quot;#allow&quot;&gt;検証済みの更新プログラムでは&lt;/a&gt;サポートされていません。）</target>
        </trans-unit>
        <trans-unit id="9c8d728494cf932cb5426cefff8e9db24f416504" translate="yes" xml:space="preserve">
          <source>But if you do this, then you open yourself up to problems if another subscription pushes data into the same collection, since the data returned by &lt;code&gt;Lists.find()&lt;/code&gt; might not be what you expected anymore. In an actively developed application, it&amp;rsquo;s often hard to anticipate what may change in the future and this can be a source of hard to understand bugs.</source>
          <target state="translated">しかし、これを行うと、別のサブスクリプションが同じコレクションにデータをプッシュした場合に問題が発生します。これは、 &lt;code&gt;Lists.find()&lt;/code&gt; によって返されたデータが、期待したものとは異なる可能性があるためです。積極的に開発されたアプリケーションでは、将来何が変更されるかを予測するのは難しいことが多く、これは理解しにくいバグの原因となる可能性があります。</target>
        </trans-unit>
        <trans-unit id="d47844f01b96f72704f852ec37dd4e806a3fafac" translate="yes" xml:space="preserve">
          <source>But they can also contain more complicated tests:</source>
          <target state="translated">しかし、より複雑なテストを含むこともできます。</target>
        </trans-unit>
        <trans-unit id="fb4779ea6afb0215db3cc86f51452b6a202125d0" translate="yes" xml:space="preserve">
          <source>By &lt;code&gt;await&lt;/code&gt;-ing in an asynchronous function</source>
          <target state="translated">ことで &lt;code&gt;await&lt;/code&gt; 非同期関数で-ing</target>
        </trans-unit>
        <trans-unit id="b966e4091c177fb1a16f5e65983d989ea0763d16" translate="yes" xml:space="preserve">
          <source>By default the &lt;code&gt;profile&lt;/code&gt; option is added directly to the new user document. To override this behavior, use &lt;a href=&quot;#accounts_oncreateuser&quot;&gt;&lt;code&gt;Accounts.onCreateUser&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;profile&lt;/code&gt; オプションは新しいユーザードキュメントに直接追加されます。この動作をオーバーライドするには、&lt;a href=&quot;#accounts_oncreateuser&quot;&gt; &lt;code&gt;Accounts.onCreateUser&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="5106bb5601c7f77dcd68b2115e5fccd3081f7c8a" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;DDPRateLimiter&lt;/code&gt; is configured with a single rule. This rule limits login attempts, new user creation, and password resets to 5 attempts every 10 seconds per connection. It can be removed by calling &lt;code&gt;Accounts.removeDefaultRateLimit()&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;DDPRateLimiter&lt;/code&gt; は単一のルールで構成されています。このルールは、ログイン試行、新しいユーザーの作成、パスワードのリセットを、接続ごとに10秒ごとに5回の試行に制限します。 &lt;code&gt;Accounts.removeDefaultRateLimit()&lt;/code&gt; を呼び出すことで削除できます。</target>
        </trans-unit>
        <trans-unit id="87062e92b3fc008f434d03091165f21d4522c4af" translate="yes" xml:space="preserve">
          <source>By default, Cordova apps in Meteor are only allowed access to &lt;code&gt;localhost&lt;/code&gt; (the device itself, to serve the app from) and the server your app connects to for data loading and hot code push (either an automatically detected IP address an explicitly configured mobile server domain). These restrictions also apply to loading files in iframes and to opening files in other apps (including the mobile browser).</source>
          <target state="translated">デフォルトでは、MeteorのCordovaアプリは、 &lt;code&gt;localhost&lt;/code&gt; （デバイス自体、アプリの提供元）へのアクセスのみが許可され、アプリがデータのロードとホットコードプッシュのために接続するサーバー（自動的に検出されたIPアドレス、明示的に構成されたモバイルサーバーのいずれか）ドメイン）。これらの制限は、iframeでのファイルの読み込み、および他のアプリ（モバイルブラウザーを含む）でのファイルのオープンにも適用されます。</target>
        </trans-unit>
        <trans-unit id="5e46c33dc0ea0ecfd499ad9b5c462c9517fda103" translate="yes" xml:space="preserve">
          <source>By default, Meteor automatically publishes every document in your collection to each connected client. To turn this behavior off, remove the &lt;code&gt;autopublish&lt;/code&gt; package, in your terminal:</source>
          <target state="translated">デフォルトでは、Meteorはコレクション内のすべてのドキュメントを接続されている各クライアントに自動的に公開します。この動作をオフにするには、ターミナルで &lt;code&gt;autopublish&lt;/code&gt; パッケージを削除します：</target>
        </trans-unit>
        <trans-unit id="5156d8cbd47bd058acbc1ef9598c271ddc97b533" translate="yes" xml:space="preserve">
          <source>By default, an email address is added with &lt;code&gt;{ verified: false }&lt;/code&gt;. Use &lt;a href=&quot;#Accounts-sendVerificationEmail&quot;&gt;&lt;code&gt;Accounts.sendVerificationEmail&lt;/code&gt;&lt;/a&gt; to send an email with a link the user can use to verify their email address.</source>
          <target state="translated">デフォルトでは、メールアドレスは &lt;code&gt;{ verified: false }&lt;/code&gt; 追加されます。&lt;a href=&quot;#Accounts-sendVerificationEmail&quot;&gt; &lt;code&gt;Accounts.sendVerificationEmail&lt;/code&gt; &lt;/a&gt;を使用して、ユーザーがメールアドレスの確認に使用できるリンクを含むメールを送信します。</target>
        </trans-unit>
        <trans-unit id="b8b727160fcc01ed3d353d41d60d4be0a6623d23" translate="yes" xml:space="preserve">
          <source>By default, any JavaScript files in your Meteor application folder are bundled and loaded on both the client and the server. However, the names of the files and directories inside your project can affect their load order, where they are loaded, and some other characteristics. Here is a list of file and directory names that are treated specially by Meteor:</source>
          <target state="translated">デフォルトでは、Meteorアプリケーションフォルダ内のすべてのJavaScriptファイルは、クライアントとサーバーの両方でバンドルされて読み込まれます。しかし、プロジェクト内のファイルやディレクトリの名前は、読み込み順序や読み込み先、その他の特性に影響を与えます。ここでは、Meteor によって特別に扱われるファイル名とディレクトリ名のリストを示します。</target>
        </trans-unit>
        <trans-unit id="b621f5caf8a282360327ccc1c28ad527353d7225" translate="yes" xml:space="preserve">
          <source>By default, clients open a connection to the server from which they&amp;rsquo;re loaded. When you call &lt;code&gt;Meteor.subscribe&lt;/code&gt;, &lt;code&gt;Meteor.status&lt;/code&gt;, &lt;code&gt;Meteor.call&lt;/code&gt;, and &lt;code&gt;Meteor.apply&lt;/code&gt;, you are using a connection back to that default server.</source>
          <target state="translated">デフォルトでは、クライアントは、ロード元のサーバーへの接続を開きます。 &lt;code&gt;Meteor.subscribe&lt;/code&gt; 、 &lt;code&gt;Meteor.status&lt;/code&gt; 、 &lt;code&gt;Meteor.call&lt;/code&gt; 、および &lt;code&gt;Meteor.apply&lt;/code&gt; を呼び出すとき、そのデフォルトサーバーへの接続を使用しています。</target>
        </trans-unit>
        <trans-unit id="27262ec360298bde33308d96b74738296c7cf136" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;Accounts.createUser&lt;/code&gt; function provided by &lt;code&gt;accounts-password&lt;/code&gt; allows you to create an account with a username, email, or both. Most apps expect a specific combination of the two, so you will certainly want to validate the new user creation:</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;accounts-password&lt;/code&gt; によって提供される &lt;code&gt;Accounts.createUser&lt;/code&gt; 関数を使用すると、ユーザー名、電子メール、またはその両方でアカウントを作成できます。ほとんどのアプリは2つの特定の組み合わせを想定しているため、新しいユーザーの作成を検証する必要があります。</target>
        </trans-unit>
        <trans-unit id="4e8c12de07e1eb69d18782b4cba4294e4011b8af" translate="yes" xml:space="preserve">
          <source>By default, the current user&amp;rsquo;s &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;emails&lt;/code&gt; and &lt;code&gt;profile&lt;/code&gt; are published to the client. You can publish additional fields for the current user with:</source>
          <target state="translated">デフォルトでは、現在のユーザーの &lt;code&gt;username&lt;/code&gt; 、 &lt;code&gt;emails&lt;/code&gt; 、 &lt;code&gt;profile&lt;/code&gt; がクライアントに公開されます。次のようにして、現在のユーザーの追加フィールドを公開できます。</target>
        </trans-unit>
        <trans-unit id="9da1c3fcb172badf20168094172f32903f2dc169" translate="yes" xml:space="preserve">
          <source>By default, the startup timeout is set to 20 seconds. If your app needs more time to startup (or considerably less), you can use &lt;a href=&quot;http://docs.meteor.com/api/mobile-config.html#App-setPreference&quot;&gt;&lt;code&gt;App.setPreference&lt;/code&gt;&lt;/a&gt; to set &lt;code&gt;WebAppStartupTimeout&lt;/code&gt; to another value.</source>
          <target state="translated">デフォルトでは、起動タイムアウトは20秒に設定されています。アプリの起動に時間がかかる（またはかなり少ない）場合は、&lt;a href=&quot;http://docs.meteor.com/api/mobile-config.html#App-setPreference&quot;&gt; &lt;code&gt;App.setPreference&lt;/code&gt; &lt;/a&gt;を使用して &lt;code&gt;WebAppStartupTimeout&lt;/code&gt; を別の値に設定できます。</target>
        </trans-unit>
        <trans-unit id="a881f32d40d22ea6979b31588aaff1ed703a94d7" translate="yes" xml:space="preserve">
          <source>By default, there are rules added to the &lt;a href=&quot;#ddpratelimiter&quot;&gt;&lt;code&gt;DDPRateLimiter&lt;/code&gt;&lt;/a&gt; that rate limit logins, new user registration and password reset calls to a limit of 5 requests per 10 seconds per session. These are a basic solution to dictionary attacks where a malicious user attempts to guess the passwords of legitimate users by attempting all possible passwords.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;#ddpratelimiter&quot;&gt; &lt;code&gt;DDPRateLimiter&lt;/code&gt; に&lt;/a&gt;追加されたルールにより、ログイン、新しいユーザー登録、およびパスワードリセットの呼び出しがセッションあたり10秒あたり5リクエストに制限されます。これらは辞書攻撃の基本的な解決策であり、悪意のあるユーザーがすべての可能なパスワードを試行することにより、正当なユーザーのパスワードを推測しようとします。</target>
        </trans-unit>
        <trans-unit id="22b59bf355dc1bd168a7b33b391cedbd3bb83850" translate="yes" xml:space="preserve">
          <source>By default, your application is bundled for your current architecture. This may cause difficulties if your app contains binary code due to, for example, npm packages. You can try to override that behavior with the &lt;code&gt;--architecture&lt;/code&gt; flag.</source>
          <target state="translated">デフォルトでは、アプリケーションは現在のアーキテクチャにバンドルされています。たとえば、npmパッケージが原因でアプリにバイナリコードが含まれている場合、これにより問題が発生する可能性があります。 &lt;code&gt;--architecture&lt;/code&gt; フラグを使用して、その動作をオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="04c74d034cf76dbfcb12250c3adbde7b95758e51" translate="yes" xml:space="preserve">
          <source>By isolating a module and simply testing its internal functionality, we can write tests that are &lt;em&gt;fast&lt;/em&gt; and &lt;em&gt;accurate&lt;/em&gt;&amp;mdash;they can quickly tell you where a problem in your application lies. Note however that incomplete unit tests can often hide bugs because of the way they stub out dependencies. For that reason it&amp;rsquo;s useful to combine unit tests with slower (and perhaps less commonly run) integration and acceptance tests.</source>
          <target state="translated">モジュールを分離して、その内部機能を単純にテストすることにより、&lt;em&gt;高速&lt;/em&gt;で&lt;em&gt;正確な&lt;/em&gt;テストを作成できます。これにより、アプリケーションのどこに問題があるのか​​をすばやく知ることができます。ただし、依存関係をスタブ化する方法が原因で、不完全な単体テストでは多くの場合、バグを隠すことができます。そのため、単体テストを低速な（そしておそらくあまり実行されない）統合テストと受け入れテストと組み合わせると便利です。</target>
        </trans-unit>
        <trans-unit id="efb1e9885db336e87ea04cd396d89752cf2fe3ec" translate="yes" xml:space="preserve">
          <source>By making the &lt;code&gt;blurringInput&lt;/code&gt; flexible and reusable, we can avoid re-implementing functionality in the &lt;code&gt;autocompleteInput&lt;/code&gt;.</source>
          <target state="translated">することにより &lt;code&gt;blurringInput&lt;/code&gt; が柔軟で再利用可能な、我々は中に再実装した機能を回避することができ &lt;code&gt;autocompleteInput&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="67b6c4b8addee6f0bec9b64fdc066f75fd594e81" translate="yes" xml:space="preserve">
          <source>CDN</source>
          <target state="translated">CDN</target>
        </trans-unit>
        <trans-unit id="08dec90928cb6bd591cb3743478e47ca32878d94" translate="yes" xml:space="preserve">
          <source>CDNs and webfonts</source>
          <target state="translated">CDNとWebフォント</target>
        </trans-unit>
        <trans-unit id="a84966ffb4bf321a67812b58d0d41b826341b6bd" translate="yes" xml:space="preserve">
          <source>CSS and CSS pre-processors</source>
          <target state="translated">CSS と CSS プリプロセッサ</target>
        </trans-unit>
        <trans-unit id="a6015c9189309fa31b429cde6c038394adde1ae0" translate="yes" xml:space="preserve">
          <source>CSS and HTML files outside special directories are loaded on the client only and cannot be used from server code.</source>
          <target state="translated">特別なディレクトリ以外のCSSやHTMLファイルはクライアント上でのみ読み込まれ、サーバーコードからは使用できません。</target>
        </trans-unit>
        <trans-unit id="f7f4b8938c6cd3068d488a0d2281b2f77830982d" translate="yes" xml:space="preserve">
          <source>CSS files in an Atmosphere package are declared with &lt;a href=&quot;http://docs.meteor.com/#/full/pack_addFiles&quot;&gt;&lt;code&gt;api.addFiles&lt;/code&gt;&lt;/a&gt;, and therefore will be eagerly evaluated, and automatically bundled with all the other CSS in your app.</source>
          <target state="translated">AtmosphereパッケージのCSSファイルは&lt;a href=&quot;http://docs.meteor.com/#/full/pack_addFiles&quot;&gt; &lt;code&gt;api.addFiles&lt;/code&gt; &lt;/a&gt;で宣言されているため、熱心に評価され、アプリ内の他のすべてのCSSに自動的にバンドルされます。</target>
        </trans-unit>
        <trans-unit id="17f6734a316a66f8187de488fbfc9203ab910c5f" translate="yes" xml:space="preserve">
          <source>CSS files in an Atmosphere package are declared with &lt;code&gt;api.addFiles&lt;/code&gt;, and therefore will be eagerly evaluated by default, and then bundled with all the other CSS in your app.</source>
          <target state="translated">Atmosphereパッケージ内のCSSファイルは &lt;code&gt;api.addFiles&lt;/code&gt; で宣言されているため、デフォルトで積極的に評価され、アプリ内の他のすべてのCSSにバンドルされます。</target>
        </trans-unit>
        <trans-unit id="93a146322f97a68a65a24dcd8f21183ede60da28" translate="yes" xml:space="preserve">
          <source>CSS framework compatibility should be a primary concern when picking a pre-processor, because a framework written with Less won&amp;rsquo;t be compatible with one written in Sass.</source>
          <target state="translated">Lessで記述されたフレームワークはSassで記述されたフレームワークと互換性がないため、CSSフレームワークの互換性はプリプロセッサーを選択する際の主要な関心事です。</target>
        </trans-unit>
        <trans-unit id="6d81c0235995b1524b5cac530b8248e41da04144" translate="yes" xml:space="preserve">
          <source>Cache format</source>
          <target state="translated">キャッシュ形式</target>
        </trans-unit>
        <trans-unit id="60790f7c84170a8b87051d7e857118ffeb0465ee" translate="yes" xml:space="preserve">
          <source>Caching</source>
          <target state="translated">Caching</target>
        </trans-unit>
        <trans-unit id="d5841e55fa6cbcaedf3ecba8404a4141eb29f483" translate="yes" xml:space="preserve">
          <source>Caching Compiler</source>
          <target state="translated">キャッシングコンパイラ</target>
        </trans-unit>
        <trans-unit id="6ac7c9b172e4fad468f51db89193f2766927b1fe" translate="yes" xml:space="preserve">
          <source>Call &lt;a href=&quot;#meteor_reconnect&quot;&gt;Meteor.reconnect&lt;/a&gt; to reestablish the connection and resume data transfer.</source>
          <target state="translated">&lt;a href=&quot;#meteor_reconnect&quot;&gt;Meteor.reconnect&lt;/a&gt;を呼び出して接続を再確立し、データ転送を再開します。</target>
        </trans-unit>
        <trans-unit id="44b70be3d804410b46c10782fa34d2d69a18a35b" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;callback&lt;/code&gt; once for each matching document, sequentially and synchronously.</source>
          <target state="translated">一致するドキュメントごとにコール &lt;code&gt;callback&lt;/code&gt; 1回ずつ、同期的に呼び出します。</target>
        </trans-unit>
        <trans-unit id="70f2f15eca33d5cb205b9f28af977d10386809ee" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;validateLoginAttempt&lt;/code&gt; with a callback to be called on login attempts. It returns an object with a single method, &lt;code&gt;stop&lt;/code&gt;. Calling &lt;code&gt;stop()&lt;/code&gt; unregisters the callback.</source>
          <target state="translated">ログインの試行時に呼び出されるコールバックを使用して、 &lt;code&gt;validateLoginAttempt&lt;/code&gt; を呼び出します。単一のメソッド &lt;code&gt;stop&lt;/code&gt; でオブジェクトを返します。 &lt;code&gt;stop()&lt;/code&gt; を呼び出すと、コールバックが登録解除されます。</target>
        </trans-unit>
        <trans-unit id="2d356ef2157924e5a40b869f8da5dcc7358601cf" translate="yes" xml:space="preserve">
          <source>Call a function in the future after waiting for a specified delay.</source>
          <target state="translated">指定した遅延時間を待った後、未来の関数を呼び出す。</target>
        </trans-unit>
        <trans-unit id="3618413f78cab70c8a558023725b9af1308160c4" translate="yes" xml:space="preserve">
          <source>Call a function repeatedly, with a time delay between calls.</source>
          <target state="translated">関数を繰り返し呼び出し、呼び出しの間に時間の遅れがある状態で呼び出します。</target>
        </trans-unit>
        <trans-unit id="ea4ea2432aa2799da7e13acb8eeb552e4935386f" translate="yes" xml:space="preserve">
          <source>Call inside a method invocation. Allow subsequent method from this client to begin running in a new fiber.</source>
          <target state="translated">メソッド呼び出しの内部での呼び出し。このクライアントからの後続のメソッドが新しいファイバーで実行を開始することを許可します。</target>
        </trans-unit>
        <trans-unit id="a751a5aece1fabc787773badfe4851e8fd86fa43" translate="yes" xml:space="preserve">
          <source>Call inside the publish function. Informs the subscriber that a document has been added to the record set.</source>
          <target state="translated">パブリッシュ関数内の呼び出し。ドキュメントがレコードセットに追加されたことを加入者に通知する。</target>
        </trans-unit>
        <trans-unit id="8bcbbb115dddefdd02117fc94b644bace6315f13" translate="yes" xml:space="preserve">
          <source>Call inside the publish function. Informs the subscriber that a document has been removed from the record set.</source>
          <target state="translated">パブリッシュ関数内の呼び出し。ドキュメントがレコードセットから削除されたことを加入者に通知する。</target>
        </trans-unit>
        <trans-unit id="25117b3073c4c95d44263d31e4d856a816ffee14" translate="yes" xml:space="preserve">
          <source>Call inside the publish function. Informs the subscriber that a document in the record set has been modified.</source>
          <target state="translated">パブリッシュ関数内の呼び出し。レコードセット内のドキュメントが変更されたことを加入者に通知する。</target>
        </trans-unit>
        <trans-unit id="8fbb8bb97c30e4dd5ae6a6689c01d5fcc6f5ad5a" translate="yes" xml:space="preserve">
          <source>Call inside the publish function. Informs the subscriber that an initial, complete snapshot of the record set has been sent. This will trigger a call on the client to the &lt;code&gt;onReady&lt;/code&gt; callback passed to &lt;a href=&quot;#meteor_subscribe&quot;&gt;&lt;code&gt;Meteor.subscribe&lt;/code&gt;&lt;/a&gt;, if any.</source>
          <target state="translated">publish関数内で呼び出します。レコードセットの初期の完全なスナップショットが送信されたことをサブスクライバーに通知します。これは、クライアント上のコールトリガします &lt;code&gt;onReady&lt;/code&gt; に渡されたコールバック&lt;a href=&quot;#meteor_subscribe&quot;&gt; &lt;code&gt;Meteor.subscribe&lt;/code&gt; を&lt;/a&gt;任意の場合は、。</target>
        </trans-unit>
        <trans-unit id="0f236a1cac04cf0a5650c7f738b423c336faece3" translate="yes" xml:space="preserve">
          <source>Call inside the publish function. Registers a callback function to run when the subscription is stopped.</source>
          <target state="translated">パブリッシュ関数内での呼び出し。サブスクリプションの停止時に実行するコールバック関数を登録します。</target>
        </trans-unit>
        <trans-unit id="dbb7197d57a94b7dbcbe416bc253788ef05ef322" translate="yes" xml:space="preserve">
          <source>Call inside the publish function. Stops this client's subscription and invokes the client's &lt;code&gt;onStop&lt;/code&gt; callback with no error.</source>
          <target state="translated">publish関数内で呼び出します。このクライアントのサブスクリプションを停止し、エラーなしでクライアントの &lt;code&gt;onStop&lt;/code&gt; コールバックを呼び出します。</target>
        </trans-unit>
        <trans-unit id="06de9b9ebc48ead72b16c0923df843875315b3f7" translate="yes" xml:space="preserve">
          <source>Call inside the publish function. Stops this client's subscription, triggering a call on the client to the &lt;code&gt;onStop&lt;/code&gt; callback passed to &lt;a href=&quot;#meteor_subscribe&quot;&gt;&lt;code&gt;Meteor.subscribe&lt;/code&gt;&lt;/a&gt;, if any. If &lt;code&gt;error&lt;/code&gt; is not a &lt;a href=&quot;#meteor_error&quot;&gt;&lt;code&gt;Meteor.Error&lt;/code&gt;&lt;/a&gt;, it will be &lt;a href=&quot;#meteor_error&quot;&gt;sanitized&lt;/a&gt;.</source>
          <target state="translated">publish関数内で呼び出します。クライアントのコールをトリガ、このクライアントのサブスクリプションを停止し &lt;code&gt;onStop&lt;/code&gt; に渡されたコールバック&lt;a href=&quot;#meteor_subscribe&quot;&gt; &lt;code&gt;Meteor.subscribe&lt;/code&gt; &lt;/a&gt;があれば、。 &lt;code&gt;error&lt;/code&gt; が&lt;a href=&quot;#meteor_error&quot;&gt; &lt;code&gt;Meteor.Error&lt;/code&gt; &lt;/a&gt;でない場合、サニタイズさ&lt;a href=&quot;#meteor_error&quot;&gt;れ&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="01b8b2707adbfeaa0ac7d08a129c209852669afe" translate="yes" xml:space="preserve">
          <source>Call this function to change the currently logged-in user on the connection that made this method call. This simply sets the value of &lt;code&gt;userId&lt;/code&gt; for future method calls received on this connection. Pass &lt;code&gt;null&lt;/code&gt; to log out the connection.</source>
          <target state="translated">このメソッドを呼び出した接続で現在ログインしているユーザーを変更するには、この関数を呼び出します。これは、この接続で受信される今後のメソッド呼び出しの &lt;code&gt;userId&lt;/code&gt; の値を設定するだけです。接続をログアウトするには &lt;code&gt;null&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="0f897e3f75f9fb5dff3acae332556e5367cb279e" translate="yes" xml:space="preserve">
          <source>Call this method to disconnect from the server and stop all live data updates. While the client is disconnected it will not receive updates to collections, method calls will be queued until the connection is reestablished, and hot code push will be disabled.</source>
          <target state="translated">このメソッドを呼び出してサーバーから切断し、すべてのライブデータの更新を停止します。クライアントが切断されている間は、コレクションの更新を受け取ることができず、接続が再確立されるまでメソッドコールはキューに入れられ、ホットコードのプッシュは無効になります。</target>
        </trans-unit>
        <trans-unit id="44093a4da42021f66f73beea67ad68ecbee70690" translate="yes" xml:space="preserve">
          <source>Callback that is called when the request is completed. Required on the client.</source>
          <target state="translated">リクエストが完了したときに呼び出されるコールバック。クライアント側で必須。</target>
        </trans-unit>
        <trans-unit id="b00d2aac358446214b673079d45e7c92745c588a" translate="yes" xml:space="preserve">
          <source>Callbacks added with this method are called before your template&amp;rsquo;s logic is evaluated for the first time. Inside a callback, &lt;code&gt;this&lt;/code&gt; is the new &lt;a href=&quot;#Template-instances&quot;&gt;template instance&lt;/a&gt; object. Properties you set on this object will be visible from the callbacks added with &lt;code&gt;onRendered&lt;/code&gt; and &lt;code&gt;onDestroyed&lt;/code&gt; methods and from event handlers.</source>
          <target state="translated">このメソッドで追加されたコールバックは、テンプレートのロジックが初めて評価される前に呼び出されます。コールバック内では、 &lt;code&gt;this&lt;/code&gt; は新しい&lt;a href=&quot;#Template-instances&quot;&gt;テンプレートインスタンス&lt;/a&gt;オブジェクトです。あなたは、このオブジェクトに設定されたプロパティを追加して、コールバックから見えるようになります &lt;code&gt;onRendered&lt;/code&gt; と &lt;code&gt;onDestroyed&lt;/code&gt; メソッドおよびイベントハンドラから。</target>
        </trans-unit>
        <trans-unit id="6413b92f3589db16b7d7e81c831188c52c8a3859" translate="yes" xml:space="preserve">
          <source>Callbacks added with this method are called once when an instance of Template.&lt;em&gt;myTemplate&lt;/em&gt; is rendered into DOM nodes and put into the document for the first time.</source>
          <target state="translated">このメソッドで追加されたコールバックは、テンプレートのインスタンスのときに一度呼び出されます。&lt;em&gt;myTemplate&lt;/em&gt;はDOMノードにレンダリングされ、ドキュメントに初めて配置されます。</target>
        </trans-unit>
        <trans-unit id="b8fda9c0aa14edaa3c99b485f25e2faccfc9fc11" translate="yes" xml:space="preserve">
          <source>Called whenever a login is attempted (either successful or unsuccessful). A login can be aborted by returning a falsy value or throwing an exception.</source>
          <target state="translated">ログインが試みられたときに呼び出されます(成功したか失敗したかのどちらか)。誤った値を返すか、例外を投げることでログインを中止することができます。</target>
        </trans-unit>
        <trans-unit id="759f49acb2d8dc2eb20ca80bc123aff10abc01de" translate="yes" xml:space="preserve">
          <source>Called whenever a new user is created. Return the new user object, or throw an &lt;code&gt;Error&lt;/code&gt; to abort the creation.</source>
          <target state="translated">新しいユーザーが作成されるたびに呼び出されます。新しいユーザーオブジェクトを返すか、 &lt;code&gt;Error&lt;/code&gt; をスローして作成を中止します。</target>
        </trans-unit>
        <trans-unit id="2c599ecf111ed4b6b085548d556e7965a946a2e9" translate="yes" xml:space="preserve">
          <source>Called whenever a new user is created. Takes the new user object, and returns true to allow the creation or false to abort.</source>
          <target state="translated">新しいユーザーが作成されるたびに呼び出されます。新しいユーザーオブジェクトを取得し、作成を許可するにはtrueを返し、中止するにはfalseを返します。</target>
        </trans-unit>
        <trans-unit id="91f63fb778fbf778d23c69d5a31e985a9cacf308" translate="yes" xml:space="preserve">
          <source>Calling</source>
          <target state="translated">Calling</target>
        </trans-unit>
        <trans-unit id="a25dcc07948539fb7b93f4e64e93be7386595773" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;methods&lt;/code&gt; on the client defines &lt;em&gt;stub&lt;/em&gt; functions associated with server methods of the same name. You don&amp;rsquo;t have to define a stub for your method if you don&amp;rsquo;t want to. In that case, method calls are just like remote procedure calls in other systems, and you&amp;rsquo;ll have to wait for the results from the server.</source>
          <target state="translated">クライアントで &lt;code&gt;methods&lt;/code&gt; を呼び出すと、同じ名前のサーバーメソッドに関連付けられた&lt;em&gt;スタブ&lt;/em&gt;関数が定義されます。必要がない場合は、メソッドのスタブを定義する必要はありません。その場合、メソッド呼び出しは他のシステムのリモートプロシージャコールと同じであり、サーバーからの結果を待つ必要があります。</target>
        </trans-unit>
        <trans-unit id="3e895dceee9c3ebf1e7fa5384228335a0cf20583" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;methods&lt;/code&gt; on the server defines functions that can be called remotely by clients. They should return an &lt;a href=&quot;#ejson&quot;&gt;EJSON&lt;/a&gt;-able value or throw an exception. Inside your method invocation, &lt;code&gt;this&lt;/code&gt; is bound to a method invocation object, which provides the following:</source>
          <target state="translated">サーバー上の &lt;code&gt;methods&lt;/code&gt; 呼び出しは、クライアントがリモートで呼び出すことができる関数を定義します。&lt;a href=&quot;#ejson&quot;&gt;EJSON対応の&lt;/a&gt;値を返すか、例外をスローする必要があります。メソッド呼び出し内では、 &lt;code&gt;this&lt;/code&gt; はメソッド呼び出しオブジェクトにバインドされ、以下を提供します。</target>
        </trans-unit>
        <trans-unit id="83c163df00abba064e7630eb42d7c4f10fc0b258" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;this.autorun&lt;/code&gt; sets up a reactive context which will re-initialize the subscription whenever the reactive function &lt;code&gt;this.getListId()&lt;/code&gt; changes.</source>
          <target state="translated">&lt;code&gt;this.autorun&lt;/code&gt; を呼び出すと、リアクティブ関数 &lt;code&gt;this.getListId()&lt;/code&gt; が変更されるたびにサブスクリプションを再初期化するリアクティブコンテキストが設定されます。</target>
        </trans-unit>
        <trans-unit id="3713bac8141dfd0326737b87fd03bf0aabf988b3" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;this.subscribe()&lt;/code&gt; (rather than &lt;code&gt;Meteor.subscribe&lt;/code&gt;), which attaches a special &lt;code&gt;subscriptionsReady()&lt;/code&gt; function to the template instance, which is true when all subscriptions made inside this template are ready.</source>
          <target state="translated">&lt;code&gt;this.subscribe()&lt;/code&gt; （ &lt;code&gt;Meteor.subscribe&lt;/code&gt; ではなく）を呼び出すと、特別な &lt;code&gt;subscriptionsReady()&lt;/code&gt; 関数がテンプレートインスタンスにアタッチされます。これは、このテンプレート内で作成されたすべてのサブスクリプションの準備ができている場合にtrueになります。</target>
        </trans-unit>
        <trans-unit id="4a5d23d1c6d6168cec4f993ccda666e97b753723" translate="yes" xml:space="preserve">
          <source>Calling a Method from a form</source>
          <target state="translated">フォームからメソッドを呼び出す</target>
        </trans-unit>
        <trans-unit id="d186f85b7ced45c2eecfb4eba041f2fe11cef341" translate="yes" xml:space="preserve">
          <source>Calling a Method from another Method</source>
          <target state="translated">別のメソッドからメソッドを呼び出す</target>
        </trans-unit>
        <trans-unit id="52cf538500f3c008630940db197aa2c752d37ef1" translate="yes" xml:space="preserve">
          <source>Calling helpers with arguments</source>
          <target state="translated">引数を持つヘルパーの呼び出し</target>
        </trans-unit>
        <trans-unit id="32ca778a91e8f62b4bf620335a3462423e1fb6de" translate="yes" xml:space="preserve">
          <source>Calling service API for more data</source>
          <target state="translated">より多くのデータのためのサービスAPIの呼び出し</target>
        </trans-unit>
        <trans-unit id="e3b8fa9ab8692f0835d4fc0518df606254fa697a" translate="yes" xml:space="preserve">
          <source>Calling this function is analogous to declaring a model in a traditional ORM (Object-Relation Mapper)-centric framework. It sets up a &lt;em&gt;collection&lt;/em&gt; (a storage space for records, or &amp;ldquo;documents&amp;rdquo;) that can be used to store a particular type of information, like users, posts, scores, todo items, or whatever matters to your application. Each document is a EJSON object. It includes an &lt;code&gt;_id&lt;/code&gt; property whose value is unique in the collection, which Meteor will set when you first create the document.</source>
          <target state="translated">この関数の呼び出しは、従来のORM（Object-Relation Mapper）中心のフレームワークでモデルを宣言することに似ています。これは、ユーザー、投稿、スコア、ToDoアイテム、またはアプリケーションの重要事項など、特定のタイプの情報を格納するために使用できる&lt;em&gt;コレクション&lt;/em&gt;（レコードまたは「ドキュメント」のストレージスペース）を設定します。各ドキュメントはEJSONオブジェクトです。これには、コレクション内で一意の値を持つ &lt;code&gt;_id&lt;/code&gt; プロパティが含まれています。これは、最初にドキュメントを作成するときにMeteorによって設定されます。</target>
        </trans-unit>
        <trans-unit id="e4ce4c47cf8c05a56cf27c5033c8f5f0701dfdce" translate="yes" xml:space="preserve">
          <source>Calls &lt;a href=&quot;#meteor_loggingin&quot;&gt;Meteor.loggingIn()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#meteor_loggingin&quot;&gt;Meteor.loggingIn（）を&lt;/a&gt;呼び出します。</target>
        </trans-unit>
        <trans-unit id="a41053254050022a97f5f8f91de5898fcf3f7b34" translate="yes" xml:space="preserve">
          <source>Calls &lt;a href=&quot;#meteor_user&quot;&gt;Meteor.user()&lt;/a&gt;. Use &lt;code&gt;{{#if currentUser}}&lt;/code&gt; to check whether the user is logged in.</source>
          <target state="translated">&lt;a href=&quot;#meteor_user&quot;&gt;Meteor.user（）を&lt;/a&gt;呼び出します。使用 &lt;code&gt;{{#if currentUser}}&lt;/code&gt; ユーザーがログインしているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="972868233a1c8e1a158b6026d72d6cc974406452" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;func&lt;/code&gt; when the View is rendered and inserted into the DOM, after waiting for the end of &lt;a href=&quot;https://docs.meteor.com/api/tracker.html#Tracker-afterFlush&quot;&gt;flush time&lt;/a&gt;. Does not fire if the View is destroyed at any point before it would fire. May fire multiple times (if the View re-renders). In &lt;code&gt;func&lt;/code&gt;, the View is bound to &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.meteor.com/api/tracker.html#Tracker-afterFlush&quot;&gt;フラッシュ時間の&lt;/a&gt;終了を待った後、ビューがレンダリングされてDOMに挿入されたときに &lt;code&gt;func&lt;/code&gt; を呼び出します。ビューが発火する前のいずれかの時点でビューが破壊された場合は発火しません。複数回発砲する可能性があります（ビューが再レンダリングされる場合）。で &lt;code&gt;func&lt;/code&gt; 、ビューがにバインドされ &lt;code&gt;this&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="355fc1521ea85087af5c15dfac01018a72ed857c" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;func&lt;/code&gt; with &lt;code&gt;Tracker.currentComputation&lt;/code&gt; temporarily set to &lt;code&gt;null&lt;/code&gt; and returns &lt;code&gt;func&lt;/code&gt;&amp;lsquo;s own return value. If &lt;code&gt;func&lt;/code&gt; accesses reactive data sources, these data sources will never cause a rerun of the enclosing computation.</source>
          <target state="translated">コール &lt;code&gt;func&lt;/code&gt; と &lt;code&gt;Tracker.currentComputation&lt;/code&gt; は一時的に設定され &lt;code&gt;null&lt;/code&gt; 戻り &lt;code&gt;func&lt;/code&gt; 自身の戻り値。 &lt;code&gt;func&lt;/code&gt; がリアクティブデータソースにアクセスする場合、これらのデータソースは、囲んでいる計算の再実行を引き起こしません。</target>
        </trans-unit>
        <trans-unit id="d7b33507b3618986e960f9d7f0e06f73996bb712" translate="yes" xml:space="preserve">
          <source>Calls the function &lt;em&gt;condition&lt;/em&gt; with the value as the argument. If &lt;em&gt;condition&lt;/em&gt; returns true, this matches. If &lt;em&gt;condition&lt;/em&gt; throws a &lt;code&gt;Match.Error&lt;/code&gt; or returns false, this fails. If &lt;em&gt;condition&lt;/em&gt; throws any other error, that error is thrown from the call to &lt;code&gt;check&lt;/code&gt; or &lt;code&gt;Match.test&lt;/code&gt;. Examples:</source>
          <target state="translated">値を引数として関数&lt;em&gt;条件&lt;/em&gt;を呼び出します。場合は&lt;em&gt;条件が&lt;/em&gt; trueを返す、この試合。場合は&lt;em&gt;条件が&lt;/em&gt;スロー &lt;code&gt;Match.Error&lt;/code&gt; またはfalseを返すが、これは失敗します。&lt;em&gt;condition&lt;/em&gt;が他のエラーをスローした場合、そのエラーは &lt;code&gt;check&lt;/code&gt; または &lt;code&gt;Match.test&lt;/code&gt; の呼び出しからスローされます。例：</target>
        </trans-unit>
        <trans-unit id="ebd33d67f25a75ad881749de04d2694337a74d14" translate="yes" xml:space="preserve">
          <source>Calls to &lt;a href=&quot;#accounts_createuser&quot;&gt;&lt;code&gt;createUser&lt;/code&gt;&lt;/a&gt; from the client will be rejected. In addition, if you are using &lt;a href=&quot;#accountsui&quot;&gt;accounts-ui&lt;/a&gt;, the &quot;Create account&quot; link will not be available.</source>
          <target state="translated">クライアントからの&lt;a href=&quot;#accounts_createuser&quot;&gt; &lt;code&gt;createUser&lt;/code&gt; の&lt;/a&gt;呼び出しは拒否されます。また、&lt;a href=&quot;#accountsui&quot;&gt;accounts-ui&lt;/a&gt;を使用している場合は、[ アカウントの作成]リンクは使用できません。</target>
        </trans-unit>
        <trans-unit id="72e22acae50ef25ddfe821608c4c176721bb4db5" translate="yes" xml:space="preserve">
          <source>Cancel a function call scheduled by &lt;code&gt;Meteor.setTimeout&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Meteor.setTimeout&lt;/code&gt; によってスケジュールされた関数呼び出しをキャンセルします。</target>
        </trans-unit>
        <trans-unit id="58c69ae93ab866a458cd5ecf58546ec317d4250d" translate="yes" xml:space="preserve">
          <source>Cancel a repeating function call scheduled by &lt;code&gt;Meteor.setInterval&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Meteor.setInterval&lt;/code&gt; によってスケジュールされた繰り返し関数呼び出しをキャンセルします。</target>
        </trans-unit>
        <trans-unit id="139ad8a41b0016097d15b025d9946f802a32532b" translate="yes" xml:space="preserve">
          <source>Cancel the subscription. This will typically result in the server directing the client to remove the subscription&amp;rsquo;s data from the client&amp;rsquo;s cache.</source>
          <target state="translated">サブスクリプションをキャンセルします。これにより、通常、サーバーはクライアントに、サブスクリプションのデータをクライアントのキャッシュから削除するように指示します。</target>
        </trans-unit>
        <trans-unit id="d722e7f88f6d500fe392942026205c1c29fa8a06" translate="yes" xml:space="preserve">
          <source>Carefully Designed Client Side Router for Meteor.</source>
          <target state="translated">丁寧に設計されたMeteor用クライアントサイドルータ。</target>
        </trans-unit>
        <trans-unit id="18e12fa75235bc54c83809e88cc2cdcd32cccd82" translate="yes" xml:space="preserve">
          <source>Carefully extended flow-router with waitOn and template context</source>
          <target state="translated">waitOnとテンプレートコンテキストを備えた慎重に拡張されたフロールータ</target>
        </trans-unit>
        <trans-unit id="a5c2f31f12329b480874d41c2cb0a6bf9acc6f3c" translate="yes" xml:space="preserve">
          <source>Case sensitivity</source>
          <target state="translated">ケース感度</target>
        </trans-unit>
        <trans-unit id="bd09a2aa3120e2567583f8bcfacaafd76be5024f" translate="yes" xml:space="preserve">
          <source>Catch-all for miscellaneous commands that require authorization to use.</source>
          <target state="translated">使用するための権限を必要とする雑多なコマンドのためのキャッチオール。</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="651e78b7f0c78415e57ff7cd15c08d2dd23bd313" translate="yes" xml:space="preserve">
          <source>Chaining of Block Helpers</source>
          <target state="translated">ブロックヘルパーの連鎖</target>
        </trans-unit>
        <trans-unit id="856203aa2f27ce181319a9bba34f0864a2dab53b" translate="yes" xml:space="preserve">
          <source>Challenges of testing in Meteor</source>
          <target state="translated">流星での試験への挑戦</target>
        </trans-unit>
        <trans-unit id="202fece7ff7fb4f9be6423fd01ea00730cafe838" translate="yes" xml:space="preserve">
          <source>Chances are you also want to set &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tags and other &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; content to make your site appear nicer in search results. The best way to do so is to use the &lt;a href=&quot;https://atmospherejs.com/kadira/dochead&quot;&gt;&lt;code&gt;kadira:dochead&lt;/code&gt;&lt;/a&gt; package. The sensible place to call out to &lt;code&gt;DocHead&lt;/code&gt; is from the &lt;code&gt;onCreated&lt;/code&gt; callbacks of your page-level components.</source>
          <target state="translated">チャンスはあなたにも設定したいです &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; タグやその他 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 自分のサイトが検索結果に表示されるよりよいようにする内容。そのための最善の方法は、&lt;a href=&quot;https://atmospherejs.com/kadira/dochead&quot;&gt; &lt;code&gt;kadira:dochead&lt;/code&gt; &lt;/a&gt;パッケージを使用することです。 &lt;code&gt;DocHead&lt;/code&gt; を呼び出す適切な場所は、ページレベルのコンポーネントの &lt;code&gt;onCreated&lt;/code&gt; コールバックからです。</target>
        </trans-unit>
        <trans-unit id="002745cee5b6b89e4e329c7c744b206048147993" translate="yes" xml:space="preserve">
          <source>Chances are your package will want to make use of other packages. To ensure they are available, you can declare dependencies. Atmosphere packages can depend both on other Atmosphere packages, as well as packages from npm.</source>
          <target state="translated">あなたのパッケージは、他のパッケージを利用したいと思っている可能性があります。それらを確実に利用できるようにするために、依存関係を宣言することができます。Atmosphere パッケージは、他の Atmosphere パッケージや npm からのパッケージに依存することができます。</target>
        </trans-unit>
        <trans-unit id="1a0247877d7c93e76babd10d5bd67176c1744989" translate="yes" xml:space="preserve">
          <source>Change a user's username. Use this instead of updating the database directly. The operation will fail if there is an existing user with a username only differing in case.</source>
          <target state="translated">ユーザーのユーザー名を変更します。データベースを直接更新する代わりにこれを使用します。既存のユーザが存在していて、ユーザ名が大文字と小文字が異なるだけの場合、この操作は失敗します。</target>
        </trans-unit>
        <trans-unit id="221120c71aeae043cd7b893fdf0d11a5dc1fe548" translate="yes" xml:space="preserve">
          <source>Change the current user's password. Must be logged in.</source>
          <target state="translated">現在のユーザーのパスワードを変更します。ログインしている必要があります。</target>
        </trans-unit>
        <trans-unit id="f4612cb3512308efd2f355bd5e6efa67fb45ebd6" translate="yes" xml:space="preserve">
          <source>Change tracking for Optimistic UI</source>
          <target state="translated">Optimistic UIの変更追跡</target>
        </trans-unit>
        <trans-unit id="fe388c573f18530e9ce9618d14b573774074746e" translate="yes" xml:space="preserve">
          <source>Changing Routes</source>
          <target state="translated">ルートの変更</target>
        </trans-unit>
        <trans-unit id="b5094078776e636a876b346418b0c7c1e5768565" translate="yes" xml:space="preserve">
          <source>Changing language</source>
          <target state="translated">言語の変更</target>
        </trans-unit>
        <trans-unit id="78500489dc7290053233cfe03b9b4a2b2430ca22" translate="yes" xml:space="preserve">
          <source>Changing page when logged out</source>
          <target state="translated">ログアウト時のページ変更</target>
        </trans-unit>
        <trans-unit id="4b5e84be0e45d1f4cc38276a4ec0e7fdea116bcf" translate="yes" xml:space="preserve">
          <source>Check</source>
          <target state="translated">Check</target>
        </trans-unit>
        <trans-unit id="be2e6073619118a4fb5dcb6c62f346f7872159ad" translate="yes" xml:space="preserve">
          <source>Check that a value matches a &lt;a href=&quot;#matchpatterns&quot;&gt;pattern&lt;/a&gt;. If the value does not match the pattern, throw a &lt;code&gt;Match.Error&lt;/code&gt;.</source>
          <target state="translated">値が&lt;a href=&quot;#matchpatterns&quot;&gt;パターンと&lt;/a&gt;一致することを確認します。値がパターンと一致しない場合は、 &lt;code&gt;Match.Error&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="136b8f4333d780aa7946829ce5d3cfa82c75d660" translate="yes" xml:space="preserve">
          <source>Check the box to accept the license agreement, and select the correct download for your platform</source>
          <target state="translated">使用許諾契約に同意するにはチェックボックスをオンにし、お使いのプラットフォームに適したダウンロードを選択してください。</target>
        </trans-unit>
        <trans-unit id="b65e0c2f78a008bff05193c57feb1f2e4916c78d" translate="yes" xml:space="preserve">
          <source>Check your code with ESLint</source>
          <target state="translated">ESLintでコードをチェック</target>
        </trans-unit>
        <trans-unit id="f487fdd5931e5d4b5b28de0bdefb3877f59894e1" translate="yes" xml:space="preserve">
          <source>Chimp has a variety of options for setting it up, but we can add some npm scripts which will run the currently tests we define in Chimp&amp;rsquo;s two main modes. We can add them to our &lt;code&gt;package.json&lt;/code&gt;:</source>
          <target state="translated">Chimpにはセットアップのためのさまざまなオプションがありますが、Chimpの2つのメインモードで定義する現在のテストを実行するnpmスクリプトを追加できます。それらを &lt;code&gt;package.json&lt;/code&gt; に追加できます：</target>
        </trans-unit>
        <trans-unit id="d4321a28a93f863267d3eed82d6e5c8af0ff1cae" translate="yes" xml:space="preserve">
          <source>Chimp requires node version 4 or 5. You can check your node version by running:</source>
          <target state="translated">Chimp にはノードのバージョン 4 または 5 が必要です。ノードのバージョンは実行することで確認できます。</target>
        </trans-unit>
        <trans-unit id="721cfa87b207181ba93b1b2ddd979fd880ae52e8" translate="yes" xml:space="preserve">
          <source>Chimp will now look in the &lt;code&gt;tests/&lt;/code&gt; directory (otherwise ignored by the Meteor tool) for files in which you define acceptance tests. In the &lt;a href=&quot;https://github.com/meteor/todos&quot;&gt;Todos&lt;/a&gt; example app, we define a simple test that ensures we can click the &amp;ldquo;create list&amp;rdquo; button.</source>
          <target state="translated">Chimpは、 &lt;code&gt;tests/&lt;/code&gt; ディレクトリ（そうでなければMeteorツールでは無視されます）で、受け入れテストを定義したファイルを探します。で&lt;a href=&quot;https://github.com/meteor/todos&quot;&gt;トドスの&lt;/a&gt;例のアプリ、私たちは、「リストの作成」ボタンをクリックすることができることを保証する簡単なテストを定義します。</target>
        </trans-unit>
        <trans-unit id="7f7d551d7d137224943bb1abd04be81cace59b4f" translate="yes" xml:space="preserve">
          <source>Choose a template to include dynamically, by name.</source>
          <target state="translated">動的にインクルードするテンプレートを名前で選択します。</target>
        </trans-unit>
        <trans-unit id="743a2d5609a7296d3d734c6e0b1f6d37a8c23170" translate="yes" xml:space="preserve">
          <source>CircleCI</source>
          <target state="translated">CircleCI</target>
        </trans-unit>
        <trans-unit id="ca168f4290290c81d67e372b10384764ad5f46f4" translate="yes" xml:space="preserve">
          <source>Click the Run button:</source>
          <target state="translated">実行」ボタンをクリックします。</target>
        </trans-unit>
        <trans-unit id="1bdd79b12628d8c4ec4226ff4207341dcb869ab8" translate="yes" xml:space="preserve">
          <source>Client</source>
          <target state="translated">Client</target>
        </trans-unit>
        <trans-unit id="c03f071761a17bdd40e7eaa461f2bbf24b1a0883" translate="yes" xml:space="preserve">
          <source>Client example:</source>
          <target state="translated">クライアントの例。</target>
        </trans-unit>
        <trans-unit id="1e667dfcdaa0595e93cc7db4b91f2495a38212dc" translate="yes" xml:space="preserve">
          <source>Client only, optional callback. Called with no arguments on success, or with a single &lt;code&gt;Error&lt;/code&gt; argument on failure.</source>
          <target state="translated">クライアントのみ、オプションのコールバック。成功した場合は引数なしで、失敗した場合は単一の &lt;code&gt;Error&lt;/code&gt; 引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="dcfa9e8a1bee95fd9dfdd56e3c0da9c0b6c8aafe" translate="yes" xml:space="preserve">
          <source>Client-side Routing</source>
          <target state="translated">クライアント側ルーティング</target>
        </trans-unit>
        <trans-unit id="bd78eaea1b1f7ab435a4f79ca9f14176130ea4c0" translate="yes" xml:space="preserve">
          <source>Client-side collections</source>
          <target state="translated">クライアント側のコレクション</target>
        </trans-unit>
        <trans-unit id="8d9d9e8ccba5d4e1b7794bbdd7bbdfd0fb41bb8f" translate="yes" xml:space="preserve">
          <source>Client-side data with reactive stores</source>
          <target state="translated">リアクティブストアによるクライアントサイドのデータ</target>
        </trans-unit>
        <trans-unit id="94b3cb40881ce0f8ebb90e991297d4c7e5802a7b" translate="yes" xml:space="preserve">
          <source>Close this DDP connection. The client is free to reconnect, but will receive a different connection with a new &lt;code&gt;id&lt;/code&gt; if it does.</source>
          <target state="translated">このDDP接続を閉じます。クライアントは自由に再接続できますが、再接続すると、新しい &lt;code&gt;id&lt;/code&gt; 別の接続を受け取ります。</target>
        </trans-unit>
        <trans-unit id="376da7a254a7a6761e7ef611190aaefe2dd0591a" translate="yes" xml:space="preserve">
          <source>Code Style</source>
          <target state="translated">コードスタイル</target>
        </trans-unit>
        <trans-unit id="33b97cca9aa797594543b570058a30710afec75b" translate="yes" xml:space="preserve">
          <source>Code that runs on the server can be trusted.</source>
          <target state="translated">サーバー上で動作するコードは信頼できます。</target>
        </trans-unit>
        <trans-unit id="720c86d8765e68b79396c81bdec768d713ef9f0b" translate="yes" xml:space="preserve">
          <source>Coercing types - converting strings to numbers</source>
          <target state="translated">型の強制-文字列を数値に変換する</target>
        </trans-unit>
        <trans-unit id="082a42c3704ee38739d3dd41511c5b78ea5ca8f3" translate="yes" xml:space="preserve">
          <source>CoffeeScript</source>
          <target state="translated">CoffeeScript</target>
        </trans-unit>
        <trans-unit id="d4f61f01e90103f4ac46961a3d961b8f3700da22" translate="yes" xml:space="preserve">
          <source>CoffeeScript &lt;code&gt;import&lt;/code&gt; syntax is nearly identical to the ES2015 syntax you see above:</source>
          <target state="translated">CoffeeScript &lt;code&gt;import&lt;/code&gt; 構文は、上記のES2015構文とほぼ同じです。</target>
        </trans-unit>
        <trans-unit id="67faeae921099df3fac1045569dfca67adc63eff" translate="yes" xml:space="preserve">
          <source>CoffeeScript has been a first-class supported language since Meteor&amp;rsquo;s early days. Even though today we recommend ES2015, we still intend to support CoffeeScript fully.</source>
          <target state="translated">CoffeeScriptはMeteorの初期の頃から一流のサポート言語でした。今日はES2015を推奨していますが、CoffeeScriptを完全にサポートする予定です。</target>
        </trans-unit>
        <trans-unit id="72f56bc09e4e34590b54d5534f2d1a90269bff7a" translate="yes" xml:space="preserve">
          <source>CoffeeScript is supported on both the client and the server. Files ending with &lt;code&gt;.coffee&lt;/code&gt;, &lt;code&gt;.litcoffee&lt;/code&gt;, or &lt;code&gt;.coffee.md&lt;/code&gt; are automatically compiled to JavaScript.</source>
          <target state="translated">CoffeeScriptは、クライアントとサーバーの両方でサポートされています。終わるファイル &lt;code&gt;.coffee&lt;/code&gt; 、 &lt;code&gt;.litcoffee&lt;/code&gt; 、または &lt;code&gt;.coffee.md&lt;/code&gt; が自動的にJavaScriptにコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="ceb29c36da17e32b17e7b474786bca251e5f3836" translate="yes" xml:space="preserve">
          <source>Collect route information,</source>
          <target state="translated">ルート情報を収集する。</target>
        </trans-unit>
        <trans-unit id="669a6ad9f45266e612efa73c7935002fa8c4bb1c" translate="yes" xml:space="preserve">
          <source>Collection cursors are not query snapshots. If the database changes between calling &lt;code&gt;Collection.find&lt;/code&gt; and fetching the results of the cursor, or while fetching results from the cursor, those changes may or may not appear in the result set.</source>
          <target state="translated">コレクションカーソルはクエリスナップショットではありません。 &lt;code&gt;Collection.find&lt;/code&gt; の呼び出しとカーソルの結果のフェッチの間でデータベースが変更された場合、またはカーソルから結果をフェッチしているときに、それらの変更が結果セットに表示される場合と表示されない場合があります。</target>
        </trans-unit>
        <trans-unit id="ff250a568e1cbcf039fe7459a475468f3a89a3cd" translate="yes" xml:space="preserve">
          <source>Collection helpers</source>
          <target state="translated">コレクションヘルパー</target>
        </trans-unit>
        <trans-unit id="4bbb632f02fd69807705c0179999c17d35c93b0f" translate="yes" xml:space="preserve">
          <source>Collections</source>
          <target state="translated">Collections</target>
        </trans-unit>
        <trans-unit id="dcfa8c6114f9361a6ecc704fcb6744eda1344b27" translate="yes" xml:space="preserve">
          <source>Collections and Schemas</source>
          <target state="translated">コレクションとスキーマ</target>
        </trans-unit>
        <trans-unit id="e402a86f4dd53fc59cceef27abfe2185068af3bf" translate="yes" xml:space="preserve">
          <source>Collections are a very convenient way of storing data on the client side. If you&amp;rsquo;re fetching data using something other than subscriptions, you can put it in a collection manually. Let&amp;rsquo;s look at an example where we have a complex algorithm for calculating average scores from a series of games for a number of players. We don&amp;rsquo;t want to use a publication to load this data because we want to control exactly when it runs, and don&amp;rsquo;t want the data to be cached automatically.</source>
          <target state="translated">コレクションは、クライアント側でデータを保存するための非常に便利な方法です。サブスクリプション以外のものを使用してデータをフェッチしている場合は、コレクションに手動で配置できます。複数のプレーヤーの一連のゲームから平均スコアを計算するための複雑なアルゴリズムがある例を見てみましょう。パブリケーションを使用してこのデータをロードすることは避けます。パブリケーションを実行するタイミングを正確に制御する必要があり、データが自動的にキャッシュされることを望まないためです。</target>
        </trans-unit>
        <trans-unit id="75e9fd0879d20f5ea28ac9f6339f4edf160041cb" translate="yes" xml:space="preserve">
          <source>Collections should be named as a plural noun, in &lt;a href=&quot;https://en.wikipedia.org/wiki/PascalCase&quot;&gt;PascalCase&lt;/a&gt;. The name of the collection in the database (the first argument to the collection constructor) should be the same as the name of the JavaScript symbol.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/PascalCase&quot;&gt;PascalCase&lt;/a&gt;では、コレクションは複数の名詞として名前を付ける必要があります。データベース内のコレクションの名前（コレクションコンストラクターの最初の引数）は、JavaScriptシンボルの名前と同じにする必要があります。</target>
        </trans-unit>
        <trans-unit id="1a6fb552c34ef6fa0d21739ee49d60806e344400" translate="yes" xml:space="preserve">
          <source>Colon-delimited list of local package directories to look in, outside your normal application structure, for example: &lt;code&gt;METEOR_PACKAGE_DIRS=&quot;/usr/local/my_packages/&quot;&lt;/code&gt;. Note that this used to be &lt;code&gt;PACKAGE_DIRS&lt;/code&gt; but was changed in Meteor 1.4.2.</source>
          <target state="translated">通常のアプリケーション構造の外にある、検索するローカルパッケージディレクトリのコロンで区切られたリスト。例： &lt;code&gt;METEOR_PACKAGE_DIRS=&quot;/usr/local/my_packages/&quot;&lt;/code&gt; 。これは以前は &lt;code&gt;PACKAGE_DIRS&lt;/code&gt; でしたが、Meteor 1.4.2で変更されました。</target>
        </trans-unit>
        <trans-unit id="e351f98a592773ff09e281b3929f0ae3541cf152" translate="yes" xml:space="preserve">
          <source>Combines and minifies code</source>
          <target state="translated">コードの結合と最小化</target>
        </trans-unit>
        <trans-unit id="59b0754344014d9d6347724f39bcacbaf47c2e7d" translate="yes" xml:space="preserve">
          <source>Command Line</source>
          <target state="translated">コマンドライン</target>
        </trans-unit>
        <trans-unit id="f6fe35e209171bf42b301a97ecb399ad5a56cfaf" translate="yes" xml:space="preserve">
          <source>Command line</source>
          <target state="translated">コマンドライン</target>
        </trans-unit>
        <trans-unit id="7a487a50a02c2aa3d82c78f98550fda48f40266d" translate="yes" xml:space="preserve">
          <source>Comment Tags</source>
          <target state="translated">タグの付け方</target>
        </trans-unit>
        <trans-unit id="4200b2af4f0154fc8da839c571749eabc6066cc6" translate="yes" xml:space="preserve">
          <source>Comment tags also come in a &amp;ldquo;block comment&amp;rdquo; form. Block comments may contain &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt;:</source>
          <target state="translated">コメントタグも「ブロックコメント」フォームで提供されます。ブロックコメントには &lt;code&gt;{{&lt;/code&gt; および &lt;code&gt;}}&lt;/code&gt; を含めることができます。</target>
        </trans-unit>
        <trans-unit id="7e37a090cbb51b23da54506f2c1a48ad24a0b9f5" translate="yes" xml:space="preserve">
          <source>Comment tags can be used wherever other template tags are allowed.</source>
          <target state="translated">コメントタグは、他のテンプレートタグが許可されている場所であればどこでも使用できます。</target>
        </trans-unit>
        <trans-unit id="e802a089bf4853d1bd8b5725522ae5540c063949" translate="yes" xml:space="preserve">
          <source>Comment template tags begin with &lt;code&gt;{{!&lt;/code&gt; and can contain any characters except for &lt;code&gt;}}&lt;/code&gt;. Comments are removed upon compilation and never appear in the compiled template code or the generated HTML.</source>
          <target state="translated">コメントテンプレートタグは &lt;code&gt;{{!&lt;/code&gt; &lt;code&gt;}}&lt;/code&gt; 以外の任意の文字を含めることができます。コメントはコンパイル時に削除され、コンパイルされたテンプレートコードや生成されたHTMLには表示されません。</target>
        </trans-unit>
        <trans-unit id="377dd01e05316c6519d98a0022d6976f8e76be87" translate="yes" xml:space="preserve">
          <source>CommonJS</source>
          <target state="translated">CommonJS</target>
        </trans-unit>
        <trans-unit id="bfd58ee3a270f3a931009900e1008d549bbd7453" translate="yes" xml:space="preserve">
          <source>Community</source>
          <target state="translated">Community</target>
        </trans-unit>
        <trans-unit id="b34f90d76d96af2b2b4db7bb6ef129745a0ff3e8" translate="yes" xml:space="preserve">
          <source>Compare in key sensitive order, if supported by the JavaScript implementation. For example, &lt;code&gt;{a: 1, b: 2}&lt;/code&gt; is equal to &lt;code&gt;{b: 2, a: 1}&lt;/code&gt; only when &lt;code&gt;keyOrderSensitive&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">JavaScript実装でサポートされている場合は、重要な順序で比較します。たとえば、 &lt;code&gt;{a: 1, b: 2}&lt;/code&gt; は、 &lt;code&gt;{b: 2, a: 1}&lt;/code&gt; と &lt;code&gt;keyOrderSensitive&lt;/code&gt; は、keyOrderSensitiveが &lt;code&gt;false&lt;/code&gt; の場合のみです。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="080dcc14da806989156d3e164aba8f8435dee785" translate="yes" xml:space="preserve">
          <source>Compile the source files like CoffeeScript, ES2015, Less, or Templates to plain JavaScript and CSS.</source>
          <target state="translated">CoffeeScript、ES2015、Less、テンプレートなどのソースファイルをプレーンなJavaScriptとCSSにコンパイルします。</target>
        </trans-unit>
        <trans-unit id="c19d0256345d495a833e23f84597484c6e661449" translate="yes" xml:space="preserve">
          <source>Compiler plugin - compiles source files (LESS, CoffeeScript) into built output (JS, CSS, asset files, and HTML). Only one compiler plugin can handle a single file extension.</source>
          <target state="translated">コンパイラプラグイン-ソースファイル (LESS、CoffeeScript)をビルド出力 (JS、CSS、アセットファイル、HTML)にコンパイルします。1つの拡張子のファイルを扱うことができるのは、1つのコンパイラプラグインのみです。</target>
        </trans-unit>
        <trans-unit id="e1be83a7756a5bb6c9b11d838efbdc2b010f2edd" translate="yes" xml:space="preserve">
          <source>Compilers</source>
          <target state="translated">Compilers</target>
        </trans-unit>
        <trans-unit id="749bc4320b93e86694979983f2b481543f85524a" translate="yes" xml:space="preserve">
          <source>Compilers are programs that take the source files and output JavaScript or CSS. They also can output parts of HTML that is added to the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag and static assets. Examples for the compiler plugins are: CoffeeScript, Babel.js, JSX compilers, Pug templating compiler and others.</source>
          <target state="translated">コンパイラは、ソースファイルを取得してJavaScriptまたはCSSを出力するプログラムです。また、 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; タグおよび静的アセットに追加されるHTMLの一部を出力することもできます。コンパイラプラグインの例は、CoffeeScript、Babel.js、JSXコンパイラ、Pugテンプレートコンパイラなどです。</target>
        </trans-unit>
        <trans-unit id="2e2bec0051d11e5f8de6705735e078406d61e630" translate="yes" xml:space="preserve">
          <source>Compiles files with build plugins</source>
          <target state="translated">ビルドプラグインでファイルをコンパイル</target>
        </trans-unit>
        <trans-unit id="1145eb181bb02197b728270b846cee0cf26795af" translate="yes" xml:space="preserve">
          <source>Complete reference &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;ここで&lt;/a&gt;完全なリファレンス。</target>
        </trans-unit>
        <trans-unit id="c448f985269e6f3f38c575a546e99e4cf214aa99" translate="yes" xml:space="preserve">
          <source>Complete reference &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;ここで&lt;/a&gt;完全なリファレンス。</target>
        </trans-unit>
        <trans-unit id="024fc4d8e9d46298cd8abcca533cb670fa8b6ea8" translate="yes" xml:space="preserve">
          <source>Complete reference &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;ここで&lt;/a&gt;完全なリファレンス。</target>
        </trans-unit>
        <trans-unit id="2557ea94ebac824a62ade4c0fad08100bdbec090" translate="yes" xml:space="preserve">
          <source>Complex authorization</source>
          <target state="translated">複雑な認可</target>
        </trans-unit>
        <trans-unit id="46bd0f418152fae5aabb6c96c32c47c40cbbf4f4" translate="yes" xml:space="preserve">
          <source>Components as pages</source>
          <target state="translated">ページとしてのコンポーネント</target>
        </trans-unit>
        <trans-unit id="47da6f0838f083d3a01f384d483b468a305c5a2c" translate="yes" xml:space="preserve">
          <source>Compose</source>
          <target state="translated">Compose</target>
        </trans-unit>
        <trans-unit id="ca5e00120498b815c12de59fd45e93f8086a8bfc" translate="yes" xml:space="preserve">
          <source>Composition</source>
          <target state="translated">Composition</target>
        </trans-unit>
        <trans-unit id="32f94bf424b44d11abb2ab4e0c9a7d67282df197" translate="yes" xml:space="preserve">
          <source>Concept: Attack surface</source>
          <target state="translated">コンセプト 攻撃面</target>
        </trans-unit>
        <trans-unit id="4aba27fee30095472b5c8c06e3efeb1a366ab3e7" translate="yes" xml:space="preserve">
          <source>Conceptually, the only two things a Dependency can do are gain a dependent and change.</source>
          <target state="translated">概念的には、依存症ができることは、依存を得ることと変化することの2つだけです。</target>
        </trans-unit>
        <trans-unit id="e00f7bc970cb26d42ebab8cd7c98f35560bf1ea7" translate="yes" xml:space="preserve">
          <source>Conditional imports</source>
          <target state="translated">条件付き輸入</target>
        </trans-unit>
        <trans-unit id="233efd1cd2b8d3909db019b55e7e59a6ea22da70" translate="yes" xml:space="preserve">
          <source>Configure the behavior of &lt;a href=&quot;#accountsui&quot;&gt;&lt;code&gt;{{&amp;gt; loginButtons}}&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#accountsui&quot;&gt; &lt;code&gt;{{&amp;gt; loginButtons}}&lt;/code&gt; &lt;/a&gt;の動作を設定します。</target>
        </trans-unit>
        <trans-unit id="0b6e15c47080ba1ee2dbc7666572d547bfc76ecf" translate="yes" xml:space="preserve">
          <source>Configuring OAuth</source>
          <target state="translated">OAuthの設定</target>
        </trans-unit>
        <trans-unit id="e5b848f4712c6d649b46f9256556ff0c3ccacf2b" translate="yes" xml:space="preserve">
          <source>Configuring Services</source>
          <target state="translated">サービスの設定</target>
        </trans-unit>
        <trans-unit id="79280c12e85c304f34d277a9cc3847683b24e0c1" translate="yes" xml:space="preserve">
          <source>Configuring your app</source>
          <target state="translated">アプリの設定</target>
        </trans-unit>
        <trans-unit id="2b3b46e5c13b40325d3159d260105d6985927ec6" translate="yes" xml:space="preserve">
          <source>Configuring your server</source>
          <target state="translated">サーバーの設定</target>
        </trans-unit>
        <trans-unit id="a1efb4b38691a090e9c3ca81267ee3d839cd1f6b" translate="yes" xml:space="preserve">
          <source>Connect the device to a WiFi network that allows for communication with the server.</source>
          <target state="translated">サーバーと通信できるWiFiネットワークに接続します。</target>
        </trans-unit>
        <trans-unit id="dad8ba68ace075637cb0c56dbafbd192ae4d34a4" translate="yes" xml:space="preserve">
          <source>Connect to the server of a different Meteor application to subscribe to its document sets and invoke its remote methods.</source>
          <target state="translated">別のMeteorアプリケーションのサーバーに接続して、そのドキュメントセットを購読し、そのリモートメソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="9353137e70aea60618fd49f0efe74491a65dfc91" translate="yes" xml:space="preserve">
          <source>Connecting to the server</source>
          <target state="translated">サーバーへの接続</target>
        </trans-unit>
        <trans-unit id="8e1045d54948e1647de4048b971035cf144563d7" translate="yes" xml:space="preserve">
          <source>Connecting to your database</source>
          <target state="translated">データベースへの接続</target>
        </trans-unit>
        <trans-unit id="723aeb02add5abef11633a71ed793b36afe4705c" translate="yes" xml:space="preserve">
          <source>Consider that if you are writing unit tests for your Methods, you would need to test all possible kinds of input to the Method; validating the arguments restricts the space of inputs you need to unit test, reducing the amount of code you need to write overall. It also has the extra bonus of being self-documenting; someone else can come along and read the code to find out what kinds of parameters a Method is looking for.</source>
          <target state="translated">メソッドのユニットテストを書く場合、メソッドへのすべての可能な種類の入力をテストする必要があることを考えてみてください。引数を検証することでユニットテストに必要な入力のスペースが制限され、全体的に書く必要のあるコード量が減ります。また、セルフドキュメント化という余分なボーナスもあります。</target>
        </trans-unit>
        <trans-unit id="5a6edaeb3a6e28578de4bb2a1a23f33afc4ceb58" translate="yes" xml:space="preserve">
          <source>Consider the following URL pattern, used in the code snippet above:</source>
          <target state="translated">上記のコードスニペットで使用されている以下のURLパターンを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="f10b6b5bcc62a46b74592f4344b965f5216274f3" translate="yes" xml:space="preserve">
          <source>Consistent ID generation and optimistic UI</source>
          <target state="translated">一貫したID生成と楽天的なUI</target>
        </trans-unit>
        <trans-unit id="932d8ac803823978fbdcd35e534e47363328931c" translate="yes" xml:space="preserve">
          <source>Constructor for a Collection</source>
          <target state="translated">コレクションのコンストラクタ</target>
        </trans-unit>
        <trans-unit id="52ee66c4e6476dbd5b57d37ac0fef86ed0f87c66" translate="yes" xml:space="preserve">
          <source>Constructor for a ReactiveVar, which represents a single reactive variable.</source>
          <target state="translated">単一の反応性変数を表す ReactiveVar のコンストラクタ。</target>
        </trans-unit>
        <trans-unit id="00d979369c8ac4537b2512a87cbfc8e3e29cd660" translate="yes" xml:space="preserve">
          <source>Constructor for a Template, which is used to construct Views with particular name and content.</source>
          <target state="translated">特定の名前と内容のビューを構築するために使用されるテンプレートのコンストラクタです。</target>
        </trans-unit>
        <trans-unit id="377e18ece59cc9d2321ce8b8616dde036b5e12dd" translate="yes" xml:space="preserve">
          <source>Constructor for a View, which represents a reactive region of DOM.</source>
          <target state="translated">DOM の反応領域を表す View のコンストラクタ。</target>
        </trans-unit>
        <trans-unit id="d0f917910ece6b40ffcc0ffcc847ac3775195c43" translate="yes" xml:space="preserve">
          <source>Constructor for the &lt;code&gt;Accounts&lt;/code&gt; namespace on the server.</source>
          <target state="translated">サーバー上の &lt;code&gt;Accounts&lt;/code&gt; 名前空間のコンストラクター。</target>
        </trans-unit>
        <trans-unit id="a9d4a1525d591e95e8386f7176a28b174bb99765" translate="yes" xml:space="preserve">
          <source>Constructor for the &lt;code&gt;Accounts&lt;/code&gt; object on the client.</source>
          <target state="translated">クライアント上の &lt;code&gt;Accounts&lt;/code&gt; オブジェクトのコンストラクター。</target>
        </trans-unit>
        <trans-unit id="fd796b6d2dc6a6a4c51763548afa8b332d8368a7" translate="yes" xml:space="preserve">
          <source>Constructs a View that renders &lt;code&gt;contentFunc&lt;/code&gt; for each item in a sequence.</source>
          <target state="translated">シーケンス内の各アイテムの &lt;code&gt;contentFunc&lt;/code&gt; をレンダリングするビューを作成します。</target>
        </trans-unit>
        <trans-unit id="3dd64ffaaad3baeef8a955726c62e26c0081faec" translate="yes" xml:space="preserve">
          <source>Constructs a View that renders content conditionally.</source>
          <target state="translated">条件付きでコンテンツをレンダリングするビューを構築します。</target>
        </trans-unit>
        <trans-unit id="ad781402a6327e1c97d08ca7759b4b84a6e8fe6b" translate="yes" xml:space="preserve">
          <source>Constructs a View that renders content with a data context.</source>
          <target state="translated">データコンテキストでコンテンツをレンダリングするビューを構築します。</target>
        </trans-unit>
        <trans-unit id="2a65f8a297c79d7215f14b7b9156a139ce045f53" translate="yes" xml:space="preserve">
          <source>Constructs and returns an unrendered View object. This method is invoked by Meteor whenever the template is used, such as by &lt;code&gt;Blaze.render&lt;/code&gt; or by &lt;code&gt;{{&amp;gt; foo}}&lt;/code&gt; where &lt;code&gt;foo&lt;/code&gt; resolves to a Template object.</source>
          <target state="translated">レンダリングされていないViewオブジェクトを作成して返します。この方法は、テンプレートはそのようなことなどによって、使用されるたびに流星によって呼び出され &lt;code&gt;Blaze.render&lt;/code&gt; 等により &lt;code&gt;{{&amp;gt; foo}}&lt;/code&gt; ここで、 &lt;code&gt;foo&lt;/code&gt; テンプレートオブジェクトに解決されます。</target>
        </trans-unit>
        <trans-unit id="1f0b9e7737dbe888e3c4a34fd9fec25e884beb80" translate="yes" xml:space="preserve">
          <source>Content Security Policy (CSP)</source>
          <target state="translated">コンテンツセキュリティポリシー(CSP)</target>
        </trans-unit>
        <trans-unit id="7698d008d36e29b0f5525fef4134876a16472bfc" translate="yes" xml:space="preserve">
          <source>Contents of the result object:</source>
          <target state="translated">結果オブジェクトの内容。</target>
        </trans-unit>
        <trans-unit id="7a302c3f9cf2b3cec42c41ee9b6ddfb04d9516a9" translate="yes" xml:space="preserve">
          <source>Continuous Integration</source>
          <target state="translated">継続的インテグレーション</target>
        </trans-unit>
        <trans-unit id="3f3ad4e436b78ea19b3bfb0e48de0c98fff0f0f5" translate="yes" xml:space="preserve">
          <source>Continuous backups &amp;amp; Automated snapshots</source>
          <target state="translated">継続的なバックアップと自動スナップショット</target>
        </trans-unit>
        <trans-unit id="9b3761a81e7f50b5a743fdcfcdec481a981d43df" translate="yes" xml:space="preserve">
          <source>Continuous deployment</source>
          <target state="translated">継続的な展開</target>
        </trans-unit>
        <trans-unit id="256036652dc86f036ffa56a2d5ed9e82cf0bbf80" translate="yes" xml:space="preserve">
          <source>Continuous deployment refers to the process of deploying an application via a continuous integration tool, usually when some condition is reached (such as a git push to the &lt;code&gt;master&lt;/code&gt; branch). You can use CD to deploy to Galaxy, as Nate Strauser explains in a &lt;a href=&quot;https://medium.com/@natestrauser/migrating-meteor-apps-from-modulus-to-galaxy-with-continuous-deployment-from-codeship-aed2044cabd9#.lvio4sh4a&quot;&gt;blog post on the subject&lt;/a&gt;.</source>
          <target state="translated">継続的デプロイとは、通常、何らかの条件（ &lt;code&gt;master&lt;/code&gt; ブランチへのgitプッシュなど）に達したときに、継続的インテグレーションツールを介してアプリケーションをデプロイするプロセスを指します。Nate Strauser &lt;a href=&quot;https://medium.com/@natestrauser/migrating-meteor-apps-from-modulus-to-galaxy-with-continuous-deployment-from-codeship-aed2044cabd9#.lvio4sh4a&quot;&gt;がこの件に関するブログ投稿で&lt;/a&gt;説明しているように、CDを使用してGalaxyにデプロイできます。</target>
        </trans-unit>
        <trans-unit id="235203771850590c4a28b67872d3aa9e6e0ce46f" translate="yes" xml:space="preserve">
          <source>Continuous integration testing is the process of running tests on every commit of your project.</source>
          <target state="translated">継続的インテグレーションテストとは、プロジェクトのすべてのコミットに対してテストを実行するプロセスです。</target>
        </trans-unit>
        <trans-unit id="2d82a4b27a4b305690d5ac612046a955778a9fa5" translate="yes" xml:space="preserve">
          <source>Contributing</source>
          <target state="translated">Contributing</target>
        </trans-unit>
        <trans-unit id="cde2421ad27043d8c65b4ec14d2b94886b718d5e" translate="yes" xml:space="preserve">
          <source>Controlling compatibility version</source>
          <target state="translated">互換性のあるバージョンの制御</target>
        </trans-unit>
        <trans-unit id="f4d0105e4bbeab74af84f0611a50613227f104d7" translate="yes" xml:space="preserve">
          <source>Controlling re-rendering</source>
          <target state="translated">再レンダリングの制御</target>
        </trans-unit>
        <trans-unit id="c5c62e142141ae1622b3503cc45566779bedff3c" translate="yes" xml:space="preserve">
          <source>Cookies are deliberately excluded from the headers as they are a security risk for this transport. For details and alternatives, see the &lt;a href=&quot;https://github.com/sockjs/sockjs-node#authorisation&quot;&gt;SockJS documentation&lt;/a&gt;.</source>
          <target state="translated">Cookieはこのトランスポートのセキュリティリスクであるため、意図的にヘッダーから除外されています。詳細と代替方法については、&lt;a href=&quot;https://github.com/sockjs/sockjs-node#authorisation&quot;&gt;SockJSのドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="e1fc898f5208ffd6783bee8eced80f3820e5d38e" translate="yes" xml:space="preserve">
          <source>Cordova also opens up access to certain native device features through a &lt;a href=&quot;#cordova-plugins&quot;&gt;plugin architecture&lt;/a&gt;. Plugins allow you to use features not usually available to web apps, such as accessing the device camera or the local file system, interact with barcode or NFC readers, etc.</source>
          <target state="translated">Cordovaは、&lt;a href=&quot;#cordova-plugins&quot;&gt;プラグインアーキテクチャ&lt;/a&gt;を通じて特定のネイティブデバイス機能へのアクセスも可能にします。プラグインを使用すると、デバイスのカメラやローカルファイルシステムへのアクセス、バーコードやNFCリーダーの操作など、通常はWebアプリでは利用できない機能を使用できます。</target>
        </trans-unit>
        <trans-unit id="95520004e9dd48b2111df66ddc2d6032167626db" translate="yes" xml:space="preserve">
          <source>Cordova apps don&amp;rsquo;t load web content over the network, but rely on locally stored HTML, CSS, JavaScript code and other assets. While Cordova by default uses &lt;code&gt;file://&lt;/code&gt; URLs to load the app, Meteor includes an integrated file serving mechanism on the device to support both bundling the initial assets and incrementally updating your app through &lt;a href=&quot;#hot-code-push&quot;&gt;hot code push&lt;/a&gt;. This means your app will be served from &lt;code&gt;http://localhost:&amp;lt;port&amp;gt;&lt;/code&gt;, which also has the benefit that web views consider it a &lt;a href=&quot;https://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features&quot;&gt;secure origin&lt;/a&gt; and won&amp;rsquo;t block any sensitive features (which they increasingly do for &lt;code&gt;file://&lt;/code&gt; URLs).</source>
          <target state="translated">Cordovaアプリはネットワーク経由でWebコンテンツをロードしませんが、ローカルに保存されたHTML、CSS、JavaScriptコードおよびその他のアセットに依存します。 Cordovaはデフォルトで &lt;code&gt;file://&lt;/code&gt; URLを使用してアプリをロードしますが、Meteorにはデバイスに統合ファイルサービスメカニズムが組み込まれており、初期アセットのバンドルと&lt;a href=&quot;#hot-code-push&quot;&gt;ホットコードプッシュ&lt;/a&gt;によるアプリの増分更新の両方をサポートしています。これは、アプリが &lt;code&gt;http://localhost:&amp;lt;port&amp;gt;&lt;/code&gt; から提供されることを意味します。これには、Webビューが&lt;a href=&quot;https://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features&quot;&gt;安全なオリジン&lt;/a&gt;と見なし、重要な機能（ &lt;code&gt;file://&lt;/code&gt; URL に対してますます機能）をブロックしないという利点もあります）。</target>
        </trans-unit>
        <trans-unit id="8ed2d7952fa99d7583dcfd380cc5892f3b1f2107" translate="yes" xml:space="preserve">
          <source>Cordova apps run in a web view. A web view is basically a browser without the browser UI. Browser engines differ in their underlying implementation and in what web standards they support. As a result, what web view your app runs on can have a huge impact on your app&amp;rsquo;s performance and on the features you get to use. (If you want to know what features are supported on what browsers and versions, &lt;a href=&quot;http://caniuse.com&quot;&gt;caniuse.com&lt;/a&gt; is a great resource.)</source>
          <target state="translated">CordovaアプリはWebビューで実行されます。Webビューは基本的に、ブラウザーUIのない​​ブラウザーです。ブラウザーエンジンは、基盤となる実装と、サポートするWeb標準が異なります。その結果、アプリが実行されるWebビューは、アプリのパフォーマンスと使用する機能に大きな影響を与える可能性があります。（どのブラウザーとバージョンでサポートされている機能を知りたい場合は、&lt;a href=&quot;http://caniuse.com&quot;&gt;caniuse.com&lt;/a&gt;が優れたリソースです。）</target>
        </trans-unit>
        <trans-unit id="5ac4ab8855e413302ae905ef8bd65a7a027cfc45" translate="yes" xml:space="preserve">
          <source>Cordova comes with a plugin architecture that opens up access to features not usually available to web apps. Plugins are installable add-ons that contain both JavaScript and native code, which allows them to translate calls from your web app to platform-specific APIs.</source>
          <target state="translated">Cordovaにはプラグインアーキテクチャが採用されており、通常のWebアプリでは利用できない機能にアクセスすることができます。プラグインは、JavaScriptとネイティブコードの両方を含むインストール可能なアドオンで、Webアプリからの呼び出しをプラットフォーム固有のAPIに変換することができます。</target>
        </trans-unit>
        <trans-unit id="422acefacba2bd041f45e0552baf9b671173637c" translate="yes" xml:space="preserve">
          <source>Cordova controls access to external domains through a whitelisting mechanism, which is implemented as &lt;a href=&quot;https://github.com/apache/cordova-plugin-whitelist&quot;&gt;&lt;code&gt;cordova-plugin-whitelist&lt;/code&gt;&lt;/a&gt; in the version of Cordova we bundle.</source>
          <target state="translated">Cordovaは、ホワイトリストメカニズムを通じて外部ドメインへのアクセスを制御します。これは、バンドルされているバージョンのCordovaで&lt;a href=&quot;https://github.com/apache/cordova-plugin-whitelist&quot;&gt; &lt;code&gt;cordova-plugin-whitelist&lt;/code&gt; &lt;/a&gt;として実装されています。</target>
        </trans-unit>
        <trans-unit id="a7c20d67a4f53238b39d03f8b5fbc53501b981f3" translate="yes" xml:space="preserve">
          <source>Cordova downloads plugins from npm, and caches them (in &lt;code&gt;~/.cordova/lib/npm_cache&lt;/code&gt;) so they don&amp;rsquo;t have to be downloaded repeatedly if you rebuild or use them again in another project.</source>
          <target state="translated">Cordovaはnpmからプラグインをダウンロードし、それらを（ &lt;code&gt;~/.cordova/lib/npm_cache&lt;/code&gt; ）キャッシュするため、別のプロジェクトで再構築または再使用する場合に、繰り返しダウンロードする必要はありません。</target>
        </trans-unit>
        <trans-unit id="e61fd23044183aebdb54006c598abafc9b32b925" translate="yes" xml:space="preserve">
          <source>Cordova plugins</source>
          <target state="translated">コルドバプラグイン</target>
        </trans-unit>
        <trans-unit id="d8a6d036fb15ce328b75158eab2ca3ea694d8683" translate="yes" xml:space="preserve">
          <source>Cordova will detect an Android SDK installed in various standard locations automatically, but in order to use tools like &lt;code&gt;android&lt;/code&gt; or &lt;code&gt;adb&lt;/code&gt; from the terminal, you will have to make some changes to your environment.</source>
          <target state="translated">Cordovaは、さまざまな標準の場所にインストールされたAndroid SDKを自動的に検出しますが、ターミナルから &lt;code&gt;android&lt;/code&gt; や &lt;code&gt;adb&lt;/code&gt; などのツールを使用するには、環境に変更を加える必要があります。</target>
        </trans-unit>
        <trans-unit id="574d21fb216d6ce88c083cde827eb853ea6888c5" translate="yes" xml:space="preserve">
          <source>Cordova.depends()</source>
          <target state="translated">Cordova.depends()</target>
        </trans-unit>
        <trans-unit id="68836c550ee20fae0e06b2994e76a40348d2fc30" translate="yes" xml:space="preserve">
          <source>Core</source>
          <target state="translated">Core</target>
        </trans-unit>
        <trans-unit id="064de31158d289e52c24ffef7f7f7541cb6b5a0b" translate="yes" xml:space="preserve">
          <source>Cost and pricing granularity</source>
          <target state="translated">コストと価格の粒度</target>
        </trans-unit>
        <trans-unit id="3c3a10a35511350e46910c5afa535839f36b5be8" translate="yes" xml:space="preserve">
          <source>Countless hours have been spent by developers throughout the years arguing over single vs. double quotes, where to put brackets, how many spaces to type, and all kinds of other cosmetic code style questions. These are all questions that have at best a tangential relationship to code quality, but are very easy to have opinions about because they are so visual.</source>
          <target state="translated">シングルクォーテーションとダブルクォーテーション、カッコをどこに入れるか、スペースの数、その他のコードスタイルに関する様々な疑問について、開発者は何年にもわたって数え切れないほどの時間を費やしてきました。これらの質問はすべて、せいぜいコードの品質とは無関係なものですが、視覚的なものであるため、非常に簡単に意見を述べることができます。</target>
        </trans-unit>
        <trans-unit id="fb2b40a4fad0e799200e07b261e6b08141df8b46" translate="yes" xml:space="preserve">
          <source>Create a Mongo-style &lt;code&gt;ObjectID&lt;/code&gt;. If you don't specify a &lt;code&gt;hexString&lt;/code&gt;, the &lt;code&gt;ObjectID&lt;/code&gt; will generated randomly (not using MongoDB's ID construction rules).</source>
          <target state="translated">Mongoスタイルの &lt;code&gt;ObjectID&lt;/code&gt; を作成します。 &lt;code&gt;hexString&lt;/code&gt; を指定しない場合、 &lt;code&gt;ObjectID&lt;/code&gt; はランダムに生成されます（MongoDBのID構築規則を使用しません）。</target>
        </trans-unit>
        <trans-unit id="413850b1601d8fde96300f7d85b1df2c32964765" translate="yes" xml:space="preserve">
          <source>Create a new Meteor project. By default, makes a subdirectory named &lt;em&gt;name&lt;/em&gt; and copies in the template app. You can pass an absolute or relative path.</source>
          <target state="translated">新しいMeteorプロジェクトを作成します。デフォルトでは、&lt;em&gt;name&lt;/em&gt;という&lt;em&gt;名前の&lt;/em&gt;サブディレクトリを作成し、テンプレートアプリにコピーします。絶対パスまたは相対パスを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="0a44e6689991edf775b211e7f8aa0eb59d5bbf24" translate="yes" xml:space="preserve">
          <source>Create a new user.</source>
          <target state="translated">新しいユーザーを作成します。</target>
        </trans-unit>
        <trans-unit id="be32b728b587a4f841d77b6ffcb140c394d5e35d" translate="yes" xml:space="preserve">
          <source>Create an HTTPS URL.</source>
          <target state="translated">HTTPSのURLを作成します。</target>
        </trans-unit>
        <trans-unit id="f7ab8c59f46eee0540937e72a280eeacce495f82" translate="yes" xml:space="preserve">
          <source>Creates a basic, empty project.</source>
          <target state="translated">基本的な空のプロジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="426c1dd3586c661c60d0c7a74deb18de14ca45f1" translate="yes" xml:space="preserve">
          <source>Creates a more complete, imports-based project which closely matches the &lt;a href=&quot;https://guide.meteor.com/structure.html#javascript-structure&quot;&gt;file structure&lt;/a&gt; recommended by the &lt;a href=&quot;https://guide.meteor.com/&quot;&gt;Meteor Guide&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://guide.meteor.com/&quot;&gt;Meteor Guideが&lt;/a&gt;推奨する&lt;a href=&quot;https://guide.meteor.com/structure.html#javascript-structure&quot;&gt;ファイル構造に&lt;/a&gt;厳密に一致する、より完全なインポートベースのプロジェクトを作成します</target>
        </trans-unit>
        <trans-unit id="f7e1d6907791554cd7fe1ccb0fafed241e2e59cc" translate="yes" xml:space="preserve">
          <source>Creates a new package. If used in an existing app, this command will create a package in the packages directory.</source>
          <target state="translated">新しいパッケージを作成します。既存のアプリで使用する場合、このコマンドは packages ディレクトリにパッケージを作成します。</target>
        </trans-unit>
        <trans-unit id="9863659c723fd50f285a94d52e69c6bba3941019" translate="yes" xml:space="preserve">
          <source>Creating data</source>
          <target state="translated">データの作成</target>
        </trans-unit>
        <trans-unit id="18fc2f97599c6123f77e230a7df453afa9545e6c" translate="yes" xml:space="preserve">
          <source>Cross-Origin Resource Sharing (CORS)</source>
          <target state="translated">クロスオリジンリソースシェアリング(CORS)</target>
        </trans-unit>
        <trans-unit id="cd15659ed388bc59afe708d85ce4286643a25f54" translate="yes" xml:space="preserve">
          <source>Current route information</source>
          <target state="translated">現在のルート情報</target>
        </trans-unit>
        <trans-unit id="0ddad5326875afa568f2706cd94d772f83824eb5" translate="yes" xml:space="preserve">
          <source>Currently logged in user</source>
          <target state="translated">現在ログインしているユーザー</target>
        </trans-unit>
        <trans-unit id="de1bf6bc03fd7a6e1f3166ff0a91ba5585318ae0" translate="yes" xml:space="preserve">
          <source>Currently when a client reconnects to the server (such as after temporarily losing its Internet connection), it will get a new connection each time. The &lt;code&gt;onConnection&lt;/code&gt; callbacks will be called again, and the new connection will have a new connection &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">現在、クライアントがサーバーに再接続すると（インターネット接続が一時的に失われた後など）、毎回新しい接続を取得します。 &lt;code&gt;onConnection&lt;/code&gt; コールバックが再び呼び出され、新しい接続が新しい接続があります &lt;code&gt;id&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="146d68e37b24bdd082c9dcd651baabac3be8b5ce" translate="yes" xml:space="preserve">
          <source>Currently, Meteor doesn&amp;rsquo;t have a separate build step for post-processing CSS, so the only way to integrate it is to build it into the minifier. Thankfully, there is a community package that has integrated PostCSS with plugin support into a replacement for Meteor&amp;rsquo;s standard minification package.</source>
          <target state="translated">現在、MeteorにはCSSを後処理するための個別のビルドステップがないため、それを統合する唯一の方法は、それをミニファイアにビルドすることです。ありがたいことに、Meteorの標準の縮小パッケージの代わりにプラグインのサポートとPostCSSを統合したコミュニティパッケージがあります。</target>
        </trans-unit>
        <trans-unit id="097240b1aed59d7c6e3e5679866b8cf0765949a3" translate="yes" xml:space="preserve">
          <source>Currently, it is not possible to import &lt;code&gt;Assets&lt;/code&gt; as an ES6 module. Any of the &lt;code&gt;Assets&lt;/code&gt; methods below can simply be called directly in any Meteor server code.</source>
          <target state="translated">現在、 &lt;code&gt;Assets&lt;/code&gt; をES6モジュールとしてインポートすることはできません。以下の &lt;code&gt;Assets&lt;/code&gt; メソッドは、Meteorサーバーコードで直接直接呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="bf10b0a1ff741c4a70ff7a91f0f39a3806d0d622" translate="yes" xml:space="preserve">
          <source>Currently, the supported architectures for Meteor are 32-bit Linux, 64-bit Linux and Mac OS. Galaxy&amp;rsquo;s servers run 64-bit Linux.</source>
          <target state="translated">現在、Meteorでサポートされているアーキテクチャは、32ビットLinux、64ビットLinux、Mac OSです。Galaxyのサーバーは64ビットLinuxを実行します。</target>
        </trans-unit>
        <trans-unit id="b18879aa1570baa217fccf76c26b1a6cea058db3" translate="yes" xml:space="preserve">
          <source>Currently, underscore is included in all projects, as the Meteor core depends on it. _ is available in the global namespace on both the client and the server even if you do not include this package. However if you do use underscore in your application, you should still add the package as we will remove the default underscore in the future.</source>
          <target state="translated">現在のところ、Meteor のコアがアンダースコアに依存しているため、アンダースコアはすべてのプロジェクトに含まれています。このパッケージを含まない場合でも、クライアントとサーバの両方のグローバルネームスペースで_を利用できます。しかし、アプリケーションで underscore を使用している場合は、将来的にデフォルトの underscore を削除する予定なので、このパッケージを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="351f29317ee6ca678183d6b909e465205a303f2a" translate="yes" xml:space="preserve">
          <source>Currently, using Meteor Up with Meteor 1.4 requires &lt;code&gt;kadirahq/mup&lt;/code&gt; (still in development) and a special docker image with the correct Node version.</source>
          <target state="translated">現在、Meteor UpをMeteor 1.4で使用するには、 &lt;code&gt;kadirahq/mup&lt;/code&gt; （まだ開発中）と、正しいノードバージョンの特別なdockerイメージが必要です。</target>
        </trans-unit>
        <trans-unit id="403e58ac648f09170c7590415b63b480ea0460cb" translate="yes" xml:space="preserve">
          <source>Currently, when multiple subscriptions publish the same document &lt;em&gt;only the top level fields&lt;/em&gt; are compared during the merge. This means that if the documents include different sub-fields of the same top level field, not all of them will be available on the client. We hope to lift this restriction in a future release.</source>
          <target state="translated">現在、複数のサブスクリプションが同じドキュメントを公開する場合、マージ中に&lt;em&gt;最上位のフィールドのみ&lt;/em&gt;が比較されます。つまり、ドキュメントに同じトップレベルフィールドの異なるサブフィールドが含まれている場合、それらのすべてがクライアントで使用できるわけではありません。この制限を今後のリリースで解除する予定です。</target>
        </trans-unit>
        <trans-unit id="f4d2f91040c93130ddcca14955ef2593c9e0caed" translate="yes" xml:space="preserve">
          <source>Cursors</source>
          <target state="translated">Cursors</target>
        </trans-unit>
        <trans-unit id="7e1c26c6b50d9031944321dd0a9d33930759744e" translate="yes" xml:space="preserve">
          <source>Cursors are a reactive data source. On the client, the first time you retrieve a cursor&amp;rsquo;s documents with &lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, or &lt;code&gt;forEach&lt;/code&gt; inside a reactive computation (eg, a template or &lt;a href=&quot;#tracker_autorun&quot;&gt;&lt;code&gt;autorun&lt;/code&gt;&lt;/a&gt;), Meteor will register a dependency on the underlying data. Any change to the collection that changes the documents in a cursor will trigger a recomputation. To disable this behavior, pass &lt;code&gt;{reactive: false}&lt;/code&gt; as an option to &lt;code&gt;find&lt;/code&gt;.</source>
          <target state="translated">カーソルはリアクティブなデータソースです。クライアントでは、 &lt;code&gt;fetch&lt;/code&gt; 、 &lt;code&gt;map&lt;/code&gt; 、または &lt;code&gt;forEach&lt;/code&gt; を使用してカーソルのドキュメントを初めてリアクティブ計算（テンプレートや&lt;a href=&quot;#tracker_autorun&quot;&gt; &lt;code&gt;autorun&lt;/code&gt; など&lt;/a&gt;）内で取得すると、Meteorは基礎となるデータへの依存関係を登録します。カーソル内のドキュメントを変更するコレクションへの変更は、再計算をトリガーします。この動作を無効にするには、 &lt;code&gt;find&lt;/code&gt; するオプションとして &lt;code&gt;{reactive: false}&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="bd89b0ccb68aab58b1cc7a82d27a01f4c0aefff7" translate="yes" xml:space="preserve">
          <source>Custom Block Helpers</source>
          <target state="translated">カスタムブロックヘルパー</target>
        </trans-unit>
        <trans-unit id="86c01e0d4a261299067911c1e74281f149aeae99" translate="yes" xml:space="preserve">
          <source>Custom data about users</source>
          <target state="translated">ユーザーに関するカスタムデータ</target>
        </trans-unit>
        <trans-unit id="750e15faeddc60df053265f4c826df2467c0e5d1" translate="yes" xml:space="preserve">
          <source>Custom deployment</source>
          <target state="translated">カスタム展開</target>
        </trans-unit>
        <trans-unit id="78f0fa9ee3d077f63cf46d96a2d4077bc5e4ba51" translate="yes" xml:space="preserve">
          <source>Custom publications with the low level API</source>
          <target state="translated">低レベルAPIを使用したカスタムパブリケーション</target>
        </trans-unit>
        <trans-unit id="bfec51f1d3204ddda9faaf09b58dfbc316772f95" translate="yes" xml:space="preserve">
          <source>Custom rules can be added by calling &lt;code&gt;DDPRateLimiter.addRule&lt;/code&gt;. The rate limiter is called on every method and subscription invocation.</source>
          <target state="translated">カスタムルールは &lt;code&gt;DDPRateLimiter.addRule&lt;/code&gt; を呼び出すことで追加できます。レートリミッターは、すべてのメソッドとサブスクリプションの呼び出しで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="dc0817b6fa19e833be021b11bd08b6f37f2c5341" translate="yes" xml:space="preserve">
          <source>Customizable UI: useraccounts</source>
          <target state="translated">カスタマイズ可能なUI:ユーザーアカウント</target>
        </trans-unit>
        <trans-unit id="9cff9630ae90cefccf3161716f1f70f3dc102ff1" translate="yes" xml:space="preserve">
          <source>Customize new user creation.</source>
          <target state="translated">新規ユーザーの作成をカスタマイズします。</target>
        </trans-unit>
        <trans-unit id="88dadb07022c2ddeaf066afc9c9bb9e16320f6e2" translate="yes" xml:space="preserve">
          <source>Customize rate limiting for methods and subscriptions.</source>
          <target state="translated">メソッドとサブスクリプションの料金制限をカスタマイズします。</target>
        </trans-unit>
        <trans-unit id="794441e451f4b7c8657e4e9b68827fdb86ab53e3" translate="yes" xml:space="preserve">
          <source>Customizing accounts emails</source>
          <target state="translated">アカウントのメールをカスタマイズする</target>
        </trans-unit>
        <trans-unit id="a0f0b55c7bd24cde94bca6e55f2601ae0dea6cb9" translate="yes" xml:space="preserve">
          <source>Customizing routes</source>
          <target state="translated">ルートのカスタマイズ</target>
        </trans-unit>
        <trans-unit id="753b9bccb6917794c867e05e0b86549759598475" translate="yes" xml:space="preserve">
          <source>Customizing templates</source>
          <target state="translated">テンプレートのカスタマイズ</target>
        </trans-unit>
        <trans-unit id="0d2ca62af3bb6abbbef1f0b7a04c04714b93574b" translate="yes" xml:space="preserve">
          <source>DDP is Meteor&amp;rsquo;s built-in pub/sub and RPC protocol. You can read about how to use it in the &lt;a href=&quot;data-loading&quot;&gt;Data Loading&lt;/a&gt; and &lt;a href=&quot;methods&quot;&gt;Methods&lt;/a&gt; articles. In addition to the concepts of data loading and method calls, DDP has one more feature built in - the idea of a &lt;code&gt;userId&lt;/code&gt; field on a connection. This is the place where login state is tracked, regardless of which accounts UI package or login service you are using.</source>
          <target state="translated">DDPはMeteorの組み込みpub / subおよびRPCプロトコルです。使い方については、&lt;a href=&quot;data-loading&quot;&gt;データの読み込み&lt;/a&gt;と&lt;a href=&quot;methods&quot;&gt;メソッドの&lt;/a&gt;記事をご覧ください。データのロードとメソッド呼び出しの概念に加えて、DDPにはもう1つの機能が組み込まれています- 接続の &lt;code&gt;userId&lt;/code&gt; フィールドの概念。これは、使用しているアカウントUIパッケージまたはログインサービスに関係なく、ログイン状態が追跡される場所です。</target>
        </trans-unit>
        <trans-unit id="67fea6a93d69d9b8f23ccf69b16ac6b2d1dedb19" translate="yes" xml:space="preserve">
          <source>DDP uses three main messages to communicate changes in the data for a publication: the &lt;code&gt;added&lt;/code&gt;, &lt;code&gt;changed&lt;/code&gt; and &lt;code&gt;removed&lt;/code&gt; messages. So, we can similarly do the same for a publication:</source>
          <target state="translated">DDPは3つのメインメッセージを使用して、パブリケーションのデータの変更を通知します。 &lt;code&gt;added&lt;/code&gt; 、 &lt;code&gt;changed&lt;/code&gt; 、および &lt;code&gt;removed&lt;/code&gt; メッセージです。したがって、パブリケーションに対しても同様に行うことができます。</target>
        </trans-unit>
        <trans-unit id="e6cc860523e90ae377ba02191ae831ce6e476a02" translate="yes" xml:space="preserve">
          <source>DDP, Meteor&amp;rsquo;s data publication protocol, only knows how to resolve conflicts in top-level fields. This means that you can&amp;rsquo;t have one publication send &lt;code&gt;services.facebook.first_name&lt;/code&gt; and another send &lt;code&gt;services.facebook.locale&lt;/code&gt; - one of them will win, and only one of the fields will actually be available on the client. The best way to fix this is to denormalize the data you want onto custom top-level fields, as described in the section about &lt;a href=&quot;#custom-user-data&quot;&gt;custom user data&lt;/a&gt;.</source>
          <target state="translated">Meteorのデータ公開プロトコルであるDDPは、最上位フィールドの競合を解決する方法しか知りません。あなたは1本の出版送信することはできませんことを、この手段 &lt;code&gt;services.facebook.first_name&lt;/code&gt; 、別の送信 &lt;code&gt;services.facebook.locale&lt;/code&gt; をそれらのいずれかが勝つ、とだけ分野の一つは、実際にクライアント上で利用できるようになります- 。これを修正する最良の方法は、&lt;a href=&quot;#custom-user-data&quot;&gt;カスタムユーザーデータ&lt;/a&gt;に関するセクションで説明されているように、必要なデータをカスタムトップレベルフィールドに非正規化することです。</target>
        </trans-unit>
        <trans-unit id="635c7e23cabe8f1eb413d4bd4f3a608f21c7784f" translate="yes" xml:space="preserve">
          <source>DDP.connect()</source>
          <target state="translated">DDP.connect()</target>
        </trans-unit>
        <trans-unit id="9ad5b2b7037988b6aaa513d5e407ff741ac3ce32" translate="yes" xml:space="preserve">
          <source>DDP.onReconnect()</source>
          <target state="translated">DDP.onReconnect()</target>
        </trans-unit>
        <trans-unit id="8d2b707ca4de4180c159e6162d5fafa2c8ecf46b" translate="yes" xml:space="preserve">
          <source>DDPRateLimiter</source>
          <target state="translated">DDPRateLimiter</target>
        </trans-unit>
        <trans-unit id="e5a875174a8fe0707ceda1e17b505c96cfe84cba" translate="yes" xml:space="preserve">
          <source>DDPRateLimiter.addRule()</source>
          <target state="translated">DDPRateLimiter.addRule()</target>
        </trans-unit>
        <trans-unit id="26ae78c99346a2e0b6b2edefc9368832b89ca0af" translate="yes" xml:space="preserve">
          <source>DDPRateLimiter.removeRule()</source>
          <target state="translated">DDPRateLimiter.removeRule()</target>
        </trans-unit>
        <trans-unit id="49c8b8226ea88d212444cf00d1a41c86c6f054d8" translate="yes" xml:space="preserve">
          <source>DDPRateLimiter.setErrorMessage()</source>
          <target state="translated">DDPRateLimiter.setErrorMessage()</target>
        </trans-unit>
        <trans-unit id="8b7361d01d2829770d9129ddd535662ecf4b11d9" translate="yes" xml:space="preserve">
          <source>DISABLE_WEBSOCKETS</source>
          <target state="translated">DISABLE_WEBSOCKETS</target>
        </trans-unit>
        <trans-unit id="ed74c822dfb7410b7863a3a5063ccce3b81f4268" translate="yes" xml:space="preserve">
          <source>Data contexts and lookup</source>
          <target state="translated">データコンテキストとルックアップ</target>
        </trans-unit>
        <trans-unit id="1302cd909a4e57a99fc3e661f171864aac0addda" translate="yes" xml:space="preserve">
          <source>Dealing with every possible MongoDB operator is difficult to get right, as MongoDB has a rich modifier language. Instead we focus on just dealing with the modifiers we know we&amp;rsquo;ll see in our app. If this gets too tricky, then moving the hooks for the logic into the Methods that actually make the relevant modifications could be sensible (although you need to be diligent to ensure you do it in &lt;em&gt;all&lt;/em&gt; the relevant places, both now and as the app changes in the future).</source>
          <target state="translated">MongoDBには豊富な修飾子言語があるため、考えられるすべてのMongoDBオペレーターを正しく処理することは困難です。代わりに、アプリに表示されることがわかっている修飾子を処理することに焦点を当てます。これがトリッキーになりすぎる場合は、関連する変更を実際に行うメソッドにロジックのフックを移動するのが賢明な場合があります（ただし、現在およびアプリの変更時に、関連する&lt;em&gt;すべて&lt;/em&gt;の場所で確実に実行する必要があります）将来は）。</target>
        </trans-unit>
        <trans-unit id="7d09616ed87ed67609e87fa066491e0ab7795cb1" translate="yes" xml:space="preserve">
          <source>Debugging on Android with Chrome</source>
          <target state="translated">AndroidでChromeを使ってデバッグする</target>
        </trans-unit>
        <trans-unit id="8aa746c3b9fc4592c5dd7d5ce3adda61f7923c59" translate="yes" xml:space="preserve">
          <source>Debugging on iOS with Safari</source>
          <target state="translated">iOSでSafariを使ってデバッグする</target>
        </trans-unit>
        <trans-unit id="3d13469e63908f89f7ba57d74624b2fa61521522" translate="yes" xml:space="preserve">
          <source>Declare event handlers for instances of this template. Multiple calls add new event handlers in addition to the existing ones.</source>
          <target state="translated">このテンプレートのインスタンスのイベントハンドラを宣言します。複数回の呼び出しは既存のイベントハンドラに加えて新しいイベントハンドラを追加します。</target>
        </trans-unit>
        <trans-unit id="f839cdf1f83ccf5189a093a29c5f5713ec903849" translate="yes" xml:space="preserve">
          <source>Declares that the current computation (or &lt;code&gt;fromComputation&lt;/code&gt; if given) depends on &lt;code&gt;dependency&lt;/code&gt;. The computation will be invalidated the next time &lt;code&gt;dependency&lt;/code&gt; changes.</source>
          <target state="translated">現在の計算（または &lt;code&gt;fromComputation&lt;/code&gt; 場合はfromComputation）が依存 &lt;code&gt;dependency&lt;/code&gt; することを宣言します。 &lt;code&gt;dependency&lt;/code&gt; が変更されると、計算は無効になります。</target>
        </trans-unit>
        <trans-unit id="d58720c1f33dca7d82fe3bb498933b6c872b7767" translate="yes" xml:space="preserve">
          <source>Deeper understanding</source>
          <target state="translated">深い理解</target>
        </trans-unit>
        <trans-unit id="808d7dca8a74d84af27a2d6602c3d786de45fe1e" translate="yes" xml:space="preserve">
          <source>Default</source>
          <target state="translated">Default</target>
        </trans-unit>
        <trans-unit id="9ec2dbc02e3afe106f88afa542e227751f325648" translate="yes" xml:space="preserve">
          <source>Default access rules:</source>
          <target state="translated">デフォルトのアクセスルール。</target>
        </trans-unit>
        <trans-unit id="6cefd9290f19790af8092d4b454039dd4ef72591" translate="yes" xml:space="preserve">
          <source>Default expressions for function parameters, evaluated whenever the parameter is &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;...rest&lt;/code&gt; parameters for capturing remaining arguments without using the &lt;code&gt;arguments&lt;/code&gt; object:</source>
          <target state="translated">&lt;code&gt;arguments&lt;/code&gt; オブジェクトが使用されずに残りの引数をキャプチャーするために、パラメーターが &lt;code&gt;undefined&lt;/code&gt; 、 &lt;code&gt;...rest&lt;/code&gt; パラメーターであるときに常に評価される関数パラメーターのデフォルト式：</target>
        </trans-unit>
        <trans-unit id="7c62290ec5c6ac3fa261bb041bde3c7a74ec70cd" translate="yes" xml:space="preserve">
          <source>Default file load order</source>
          <target state="translated">デフォルトのファイルロード順序</target>
        </trans-unit>
        <trans-unit id="8dbd2b478a954ccf6dd32b287f8d7ebfa35af361" translate="yes" xml:space="preserve">
          <source>Defer execution of a function to run asynchronously in the background (similar to &lt;code&gt;Meteor.setTimeout(func, 0)&lt;/code&gt;.</source>
          <target state="translated">バックグラウンドで非同期に実行する関数の実行を延期します（ &lt;code&gt;Meteor.setTimeout(func, 0)&lt;/code&gt; と同様）。</target>
        </trans-unit>
        <trans-unit id="2db566acd17f4b97305fc21a284527b145995921" translate="yes" xml:space="preserve">
          <source>Define a build plugin. A build plugin extends the build process for apps and packages that use this package. For example, the &lt;code&gt;coffeescript&lt;/code&gt; package uses a build plugin to compile CoffeeScript source files into JavaScript.</source>
          <target state="translated">ビルドプラグインを定義します。ビルドプラグインは、このパッケージを使用するアプリとパッケージのビルドプロセスを拡張します。たとえば、 &lt;code&gt;coffeescript&lt;/code&gt; パッケージはビルドプラグインを使用して、CoffeeScriptソースファイルをJavaScriptにコンパイルします。</target>
        </trans-unit>
        <trans-unit id="18200ccbab673ee883d9350bce6b9dce8b1ad9dd" translate="yes" xml:space="preserve">
          <source>Define dependencies and expose package methods for unit tests.</source>
          <target state="translated">依存関係を定義し、ユニットテスト用のパッケージメソッドを公開します。</target>
        </trans-unit>
        <trans-unit id="6905cf18490570aa1bbbd736f7b9a5b353cc8f4e" translate="yes" xml:space="preserve">
          <source>Define dependencies and expose package methods with the &lt;code&gt;Package.onUse&lt;/code&gt; handler. This section lets you define what packages your package depends on, what packages are implied by your package, and what object your package is exported to.</source>
          <target state="translated">依存関係を定義し、 &lt;code&gt;Package.onUse&lt;/code&gt; ハンドラーでパッケージメソッドを公開します。このセクションでは、パッケージが依存するパッケージ、パッケージが暗示するパッケージ、およびパッケージのエクスポート先のオブジェクトを定義できます。</target>
        </trans-unit>
        <trans-unit id="c02ba958731a56c7329f44bca2584e6df388b718" translate="yes" xml:space="preserve">
          <source>Define package dependencies and expose package methods.</source>
          <target state="translated">パッケージの依存関係を定義し、パッケージメソッドを公開します。</target>
        </trans-unit>
        <trans-unit id="896f45c70cbd4046b9ddb902e58f3e7ae5798395" translate="yes" xml:space="preserve">
          <source>Defines a &lt;a href=&quot;#Template-helpers&quot;&gt;helper function&lt;/a&gt; which can be used from all templates.</source>
          <target state="translated">すべてのテンプレートから使用できる&lt;a href=&quot;#Template-helpers&quot;&gt;ヘルパー関数&lt;/a&gt;を定義します。</target>
        </trans-unit>
        <trans-unit id="84181a30ac9667feef69f3cb20d04274d0170088" translate="yes" xml:space="preserve">
          <source>Defines functions that can be invoked over the network by clients.</source>
          <target state="translated">クライアントがネットワーク経由で呼び出すことができる関数を定義します。</target>
        </trans-unit>
        <trans-unit id="72394697c73910e9331b4e63b3b6046bbb3ef139" translate="yes" xml:space="preserve">
          <source>Defining</source>
          <target state="translated">Defining</target>
        </trans-unit>
        <trans-unit id="2c07ae274de1dab3ca83185c5ceebea913bd524e" translate="yes" xml:space="preserve">
          <source>Defining a publication</source>
          <target state="translated">出版物の定義</target>
        </trans-unit>
        <trans-unit id="5a621df3e85c731e4c689bfbeb133f06876b0f58" translate="yes" xml:space="preserve">
          <source>Defining a schema</source>
          <target state="translated">スキーマの定義</target>
        </trans-unit>
        <trans-unit id="1ca5d090ef3f64fa477b0e8e51db80141b258846" translate="yes" xml:space="preserve">
          <source>Defining a simple route</source>
          <target state="translated">シンプルなルートの定義</target>
        </trans-unit>
        <trans-unit id="35c7f3772aa3d121c9c96fe8f48f4f9a711cd1f7" translate="yes" xml:space="preserve">
          <source>Defining and calling Methods</source>
          <target state="translated">メソッドの定義と呼び出し</target>
        </trans-unit>
        <trans-unit id="37fef3f61269d82b74fe8944fb62aa3a33a39bff" translate="yes" xml:space="preserve">
          <source>Denormalization and multiple collections</source>
          <target state="translated">非正規化と複数のコレクション</target>
        </trans-unit>
        <trans-unit id="0551d015bef5a9e8ffc939459c9547834f4dea27" translate="yes" xml:space="preserve">
          <source>Denormalization may need to happen on various mutators of several collections. Therefore, it&amp;rsquo;s sensible to define the denormalization logic in one place, and hook it into each mutator with one line of code. The advantage of this approach is that the denormalization logic is one place rather than spread over many files, but you can still examine the code for each collection and fully understand what happens on each update.</source>
          <target state="translated">非正規化は、いくつかのコレクションのさまざまなミューテーターで発生する必要がある場合があります。したがって、非正規化ロジックを1か所で定義し、それを1行のコードで各ミューテーターにフックするのが賢明です。このアプローチの利点は、非正規化ロジックが多くのファイルに分散するのではなく1か所になることですが、各コレクションのコードを調べて、各更新で何が起こるかを完全に理解できます。</target>
        </trans-unit>
        <trans-unit id="17efdd103398906737648a1d60c431fb5433cc8e" translate="yes" xml:space="preserve">
          <source>Deny writes to the &lt;code&gt;profile&lt;/code&gt; field on user documents.</source>
          <target state="translated">ユーザードキュメントの &lt;code&gt;profile&lt;/code&gt; フィールドへの書き込みを拒否します。</target>
        </trans-unit>
        <trans-unit id="73329a708b96198fa1dde11d635a69e8c1a5ba64" translate="yes" xml:space="preserve">
          <source>Depend on core Meteor packages, such as &lt;code&gt;ddp&lt;/code&gt; and &lt;code&gt;blaze&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ddp&lt;/code&gt; や &lt;code&gt;blaze&lt;/code&gt; などのMeteorコアパッケージに依存</target>
        </trans-unit>
        <trans-unit id="b4f8b36f761ce206c375eea56464bacee17d3dfd" translate="yes" xml:space="preserve">
          <source>Depend on package &lt;code&gt;packagename&lt;/code&gt;.</source>
          <target state="translated">パッケージ &lt;code&gt;packagename&lt;/code&gt; に依存します。</target>
        </trans-unit>
        <trans-unit id="0562f32dc56f5c702810cbe010068ddd38dbd69a" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
          <target state="translated">Dependencies</target>
        </trans-unit>
        <trans-unit id="75bc28dae67a3580f0c5196334d23701daf6cc22" translate="yes" xml:space="preserve">
          <source>Dependencies don&amp;rsquo;t store data, they just track the set of computations to invalidate if something changes. Typically, a data value will be accompanied by a Dependency object that tracks the computations that depend on it, as in this example:</source>
          <target state="translated">依存関係はデータを保存せず、一連の計算を追跡するだけで、何か変更があった場合に無効化します。通常、データ値には、次の例のように、それに依存する計算を追跡するDependencyオブジェクトが付随します。</target>
        </trans-unit>
        <trans-unit id="412a747a785d8dc91d62592bd0fdede87946a3ec" translate="yes" xml:space="preserve">
          <source>Depending on Meteor version</source>
          <target state="translated">流星のバージョンに応じて</target>
        </trans-unit>
        <trans-unit id="8c0f9befc47151d268f3ef20c8ceae4ffb840d1e" translate="yes" xml:space="preserve">
          <source>Depending on the version of Meteor you are using, you should install the proper version of &lt;code&gt;node&lt;/code&gt; using the appropriate installation process for your platform.</source>
          <target state="translated">使用しているMeteorのバージョンに応じて、プラットフォームに適したインストールプロセスを使用して、適切なバージョンの &lt;code&gt;node&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="0cd22a7e0092ed41a5b4eba55f9ea6f645d380be" translate="yes" xml:space="preserve">
          <source>Deploy a version of your application that can handle both the old and the new schema. In our case, it&amp;rsquo;d be code that doesn&amp;rsquo;t expect the &lt;code&gt;todoCount&lt;/code&gt; to be there, but which correctly updates it when new todos are created.</source>
          <target state="translated">古いスキーマと新しいスキーマの両方を処理できるバージョンのアプリケーションをデプロイします。私たちの場合、 &lt;code&gt;todoCount&lt;/code&gt; が存在することを期待しないコードですが、新しいtodoが作成されたときに正しく更新されます。</target>
        </trans-unit>
        <trans-unit id="6c89b4b05993e80eccba9abd31b850f6f47e3b62" translate="yes" xml:space="preserve">
          <source>Deploy the new code that relies on the new schema and no longer knows how to deal with the old schema. Now we are safe to rely on &lt;code&gt;list.todoCount&lt;/code&gt; in our UI.</source>
          <target state="translated">新しいスキーマに依存し、古​​いスキーマの処理方法がわからなくなった新しいコードをデプロイします。これで、UI で &lt;code&gt;list.todoCount&lt;/code&gt; を信頼しても安全です。</target>
        </trans-unit>
        <trans-unit id="39ee7111418081ce1ec55e2fc0ff4976177317be" translate="yes" xml:space="preserve">
          <source>Deploy the new version of the application to your staging server.</source>
          <target state="translated">新しいバージョンのアプリケーションをステージングサーバーにデプロイします。</target>
        </trans-unit>
        <trans-unit id="ef23cda8b1f3b541a15db8ac778285fb1b9e28e5" translate="yes" xml:space="preserve">
          <source>Deploy the project in your current directory to &lt;a href=&quot;https://www.meteor.com/galaxy&quot;&gt;Galaxy&lt;/a&gt;.</source>
          <target state="translated">現在のディレクトリにあるプロジェクトを&lt;a href=&quot;https://www.meteor.com/galaxy&quot;&gt;Galaxyに&lt;/a&gt;デプロイします。</target>
        </trans-unit>
        <trans-unit id="850eed96beca0b0250d7bf8cb68dceb8d321dac1" translate="yes" xml:space="preserve">
          <source>Deploying Meteor Applications</source>
          <target state="translated">流星アプリケーションの展開</target>
        </trans-unit>
        <trans-unit id="941a21aaed844f8c4ddd37c9f6d77a67a8623655" translate="yes" xml:space="preserve">
          <source>Deploying a special &amp;ldquo;migration application&amp;rdquo; to the same hardware as your real application is probably the best way to solve the above issues. It&amp;rsquo;d be amazing if such an application kept track of which migrations ran when, with logs and provided a UI to examine and run them. Perhaps a boilerplate application to do so could be built (if you do so, please let us know and we&amp;rsquo;ll link to it here!).</source>
          <target state="translated">上記の問題を解決するには、実際のアプリケーションと同じハードウェアに特別な「移行アプリケーション」を配備するのがおそらく最善の方法です。そのようなアプリケーションが、ログを使用して、どのマイグレーションがいつ実行されたかを追跡し、それらを調べて実行するためのUIを提供したとしたら、それはすばらしいことです。おそらく、そのためのボイラープレートアプリケーションを構築できます（そうする場合は、お知らせください。ここにリンクします！）。</target>
        </trans-unit>
        <trans-unit id="8a127a207cab7c7e892f216010ce1460e2f7515c" translate="yes" xml:space="preserve">
          <source>Deploying a web application is fundamentally different to releasing most other kinds of software, in that you can deploy as often as you&amp;rsquo;d like to. You don&amp;rsquo;t need to wait for users to do something to get the new version of your software because the server will push it right at them.</source>
          <target state="translated">Webアプリケーションのデプロイは、他のほとんどの種類のソフトウェアをリリースすることとは根本的に異なり、必要なだけ何度でもデプロイできます。サーバーがソフトウェアの新しいバージョンをプッシュするため、ユーザーがソフトウェアの新しいバージョンを取得するために何かをするのを待つ必要はありません。</target>
        </trans-unit>
        <trans-unit id="fc47b0019f17d5d1fb71866651d9cc30a1126984" translate="yes" xml:space="preserve">
          <source>Deploying to production</source>
          <target state="translated">本番環境へのデプロイ</target>
        </trans-unit>
        <trans-unit id="6d1ab959f77e870ad9dc85538a72b0a72d2a88b5" translate="yes" xml:space="preserve">
          <source>Deployment and Monitoring</source>
          <target state="translated">展開と監視</target>
        </trans-unit>
        <trans-unit id="9494ae5cac16bf136f925a990303724fd1f2e66b" translate="yes" xml:space="preserve">
          <source>Deployment environments</source>
          <target state="translated">展開環境</target>
        </trans-unit>
        <trans-unit id="cf4aeafe8cc2773e0b3c19c806bd782d567d67ce" translate="yes" xml:space="preserve">
          <source>Deployment options</source>
          <target state="translated">展開オプション</target>
        </trans-unit>
        <trans-unit id="dc3a04df91d8b86e6c9bd296581aefcc95d6fd3b" translate="yes" xml:space="preserve">
          <source>Deployment process</source>
          <target state="translated">展開プロセス</target>
        </trans-unit>
        <trans-unit id="2526927f71addd4ab97cf0e0bf0c6f1688642583" translate="yes" xml:space="preserve">
          <source>Describes the current reconnection status. The possible values are &lt;code&gt;connected&lt;/code&gt; (the connection is up and running), &lt;code&gt;connecting&lt;/code&gt; (disconnected and trying to open a new connection), &lt;code&gt;failed&lt;/code&gt; (permanently failed to connect; e.g., the client and server support different versions of DDP), &lt;code&gt;waiting&lt;/code&gt; (failed to connect and waiting to try to reconnect) and &lt;code&gt;offline&lt;/code&gt; (user has disconnected the connection).</source>
          <target state="translated">現在の再接続ステータスについて説明します。可能な値は、 &lt;code&gt;connected&lt;/code&gt; （接続が稼働中）、 &lt;code&gt;connecting&lt;/code&gt; （切断され、新しい接続を開こうとしている）、 &lt;code&gt;failed&lt;/code&gt; （永続的に接続できなかった。たとえば、クライアントとサーバーが異なるバージョンのDDPをサポートしている）、 &lt;code&gt;waiting&lt;/code&gt; （失敗した接続し、再接続の試行を待機しています）および &lt;code&gt;offline&lt;/code&gt; （ユーザーが接続を切断しました）。</target>
        </trans-unit>
        <trans-unit id="486b1f571c7731b3d8a92cb14e8477390247ca84" translate="yes" xml:space="preserve">
          <source>Deserialize an EJSON value from its plain JSON representation.</source>
          <target state="translated">EJSON値をそのプレーンなJSON表現からデシリアライズします。</target>
        </trans-unit>
        <trans-unit id="a3df263d953f018ade51278383ecd0d2259639e4" translate="yes" xml:space="preserve">
          <source>Designing for the future</source>
          <target state="translated">将来を見据えたデザイン</target>
        </trans-unit>
        <trans-unit id="a37408ccce5e69b61c6cf62c10cd02b4c3fef878" translate="yes" xml:space="preserve">
          <source>Designing your data schema</source>
          <target state="translated">データスキーマの設計</target>
        </trans-unit>
        <trans-unit id="46c7ee96bf68fe1982330441b091aaea00a6af6e" translate="yes" xml:space="preserve">
          <source>Destructuring is the technique of using an array or object pattern on the left-hand side of an assignment or declaration, in place of the usual variable or parameter, so that certain sub-properties of the value on the right-hand side will be bound to identifiers that appear within the pattern. Perhaps the simplest example is swapping two variables without using a temporary variable:</source>
          <target state="translated">デストラクチャリングとは、通常の変数やパラメータの代わりに、代入や宣言の左側に配列やオブジェクトのパターンを使用して、右側の値の特定のサブプロパティがパターン内に現れる識別子にバインドされるようにするテクニックです。おそらく最も単純な例は、一時変数を使用せずに2つの変数をスワップすることです。</target>
        </trans-unit>
        <trans-unit id="c2a75ba599f1de06def2282390cfed4ffb6d9145" translate="yes" xml:space="preserve">
          <source>Detecting Cordova in your JavaScript code</source>
          <target state="translated">JavaScriptのコードでCordovaを検出する</target>
        </trans-unit>
        <trans-unit id="768f24738bf47f5e3f75de2453eb1d4913e12596" translate="yes" xml:space="preserve">
          <source>Developing on a device</source>
          <target state="translated">デバイス上での開発</target>
        </trans-unit>
        <trans-unit id="8dde5061719882cd34c931d8ebbff299d8e84752" translate="yes" xml:space="preserve">
          <source>Development vs. production</source>
          <target state="translated">開発と生産</target>
        </trans-unit>
        <trans-unit id="c157d3c38b8e40eb86adafca6ae2c439b67e635b" translate="yes" xml:space="preserve">
          <source>Dictionary of custom headers</source>
          <target state="translated">カスタムヘッダーの辞書</target>
        </trans-unit>
        <trans-unit id="72a191c8509675bbcd36ad29c37fddf94526a3fc" translate="yes" xml:space="preserve">
          <source>Dictionary of fields to return or exclude.</source>
          <target state="translated">返す・除外するフィールドの辞書。</target>
        </trans-unit>
        <trans-unit id="8e122afaa2260b77924e5f0bc161852721f91b7f" translate="yes" xml:space="preserve">
          <source>Dictionary of helper functions by name.</source>
          <target state="translated">ヘルパー関数の名前別辞書。</target>
        </trans-unit>
        <trans-unit id="024d013e953f3256c3ecedc703b75685f526b47e" translate="yes" xml:space="preserve">
          <source>Dictionary of request parameters to be encoded and placed in the URL (for GETs) or request body (for POSTs). If &lt;code&gt;content&lt;/code&gt; or &lt;code&gt;data&lt;/code&gt; is specified, &lt;code&gt;params&lt;/code&gt; will always be placed in the URL.</source>
          <target state="translated">エンコードされてURL（GETの場合）またはリクエスト本文（POSTの場合）に配置される要求パラメーターのディクショナリー。 &lt;code&gt;content&lt;/code&gt; または &lt;code&gt;data&lt;/code&gt; が指定されている場合、 &lt;code&gt;params&lt;/code&gt; は常にURLに配置されます。</target>
        </trans-unit>
        <trans-unit id="d0f4dd379ae8373d39829b52cf98859fc5ee5186" translate="yes" xml:space="preserve">
          <source>Dictionary of strings, headers to add to the HTTP request.</source>
          <target state="translated">HTTP リクエストに追加する文字列、ヘッダの辞書。</target>
        </trans-unit>
        <trans-unit id="a89ba32baaa032279329156ef677c25c8b00a129" translate="yes" xml:space="preserve">
          <source>Dictionary whose keys are method names and values are functions.</source>
          <target state="translated">キーがメソッド名、値が関数である辞書。</target>
        </trans-unit>
        <trans-unit id="fdb859eb8d0207451604e95a445699eca4737ac9" translate="yes" xml:space="preserve">
          <source>Different types of logs</source>
          <target state="translated">ログの種類が違う</target>
        </trans-unit>
        <trans-unit id="03bf0a54b86fdf600ed47b76df6625dec956b028" translate="yes" xml:space="preserve">
          <source>Disabling</source>
          <target state="translated">Disabling</target>
        </trans-unit>
        <trans-unit id="26c3d7f89c8152c891c76ec5ff1d8bbd29bc30af" translate="yes" xml:space="preserve">
          <source>Disconnect the client from the server.</source>
          <target state="translated">クライアントをサーバーから切り離します。</target>
        </trans-unit>
        <trans-unit id="c85ae0a48468ace002eeed5c3177ca7eba3ab152" translate="yes" xml:space="preserve">
          <source>Displaying an appropriate UI and completing the process</source>
          <target state="translated">適切なUIを表示して完了</target>
        </trans-unit>
        <trans-unit id="9f1141549f7c054b71516937d3febc77d991d59b" translate="yes" xml:space="preserve">
          <source>Docker</source>
          <target state="translated">Docker</target>
        </trans-unit>
        <trans-unit id="ea38dab1ce3be9087e4e441d07022ae29be297e9" translate="yes" xml:space="preserve">
          <source>Documentation for CompileStep is available &lt;a href=&quot;https://github.com/meteor/meteor/wiki/CompileStep-API-for-Build-Plugin-Source-Handlers&quot;&gt;on the GitHub Wiki&lt;/a&gt;.</source>
          <target state="translated">CompileStepのドキュメントは&lt;a href=&quot;https://github.com/meteor/meteor/wiki/CompileStep-API-for-Build-Plugin-Source-Handlers&quot;&gt;、GitHub Wikiで&lt;/a&gt;入手できます。</target>
        </trans-unit>
        <trans-unit id="acfde81c2e1c66a031bac2f868ce9f598ecbe625" translate="yes" xml:space="preserve">
          <source>Documentation of EJSON, Meteor's JSON extension.</source>
          <target state="translated">MeteorのJSON拡張機能であるEJSONのドキュメント。</target>
        </trans-unit>
        <trans-unit id="834d2b15392b6536da9cdfac63e33d45755927e6" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's Cordova configuration API.</source>
          <target state="translated">MeteorのCordova設定APIのドキュメント。</target>
        </trans-unit>
        <trans-unit id="a60c0931de297040af1ba4e4b5bf8b7d30267f47" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's HTTP API.</source>
          <target state="translated">MeteorのHTTP APIのドキュメント。</target>
        </trans-unit>
        <trans-unit id="e7316a26df54a5af397bb5d1e5d8014b309e7890" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's Method (Remote Procedure Call) API.</source>
          <target state="translated">Meteorのメソッド(リモートプロシージャコール)APIのドキュメント。</target>
        </trans-unit>
        <trans-unit id="db47034b174dc50220a1a8dd49117d3337a09005" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `accounts-ui` package.</source>
          <target state="translated">Meteor の `accounts-ui` パッケージのドキュメントです。</target>
        </trans-unit>
        <trans-unit id="589fffcead074f032206dcc119ba2c8fd6527135" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `apollo` package.</source>
          <target state="translated">Meteor の `apollo` パッケージのドキュメント。</target>
        </trans-unit>
        <trans-unit id="6405306b2e7b60271c2feaf9255ab8fb183935c8" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `appcache` package.</source>
          <target state="translated">Meteor の `appcache` パッケージのドキュメントです。</target>
        </trans-unit>
        <trans-unit id="0644ff85382ecfe92f8caca81723552e379422f9" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `audit-argument-checks` package.</source>
          <target state="translated">Meteor の `audit-argument-checks` パッケージのドキュメント。</target>
        </trans-unit>
        <trans-unit id="ce08bbe3ad809b10a0c6a28ff0736165e1b424fe" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `bundle-visualizer` package.</source>
          <target state="translated">Meteor の `bundle-visualizer` パッケージのドキュメント。</target>
        </trans-unit>
        <trans-unit id="7c29b2970e1199a1dc8cf99c36fd871aa8170ef8" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `coffeescript` package.</source>
          <target state="translated">Meteor の `coffeescript` パッケージのドキュメント。</target>
        </trans-unit>
        <trans-unit id="30146bfaa63584bff0b1ca35ff903e0ea04e20ed" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `dynamic-import` package.</source>
          <target state="translated">Meteor の `dynamic-import` パッケージのドキュメント。</target>
        </trans-unit>
        <trans-unit id="ffa966eff9d1ed18b83b0588602477d607840a9f" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `ecmascript` package.</source>
          <target state="translated">Meteor の `ecmascript` パッケージのドキュメント。</target>
        </trans-unit>
        <trans-unit id="3c188a1260c075b519ed3040cb3364127e3e5edd" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `jquery` package.</source>
          <target state="translated">Meteorの `jquery` パッケージのドキュメント。</target>
        </trans-unit>
        <trans-unit id="b3fde644f8e7a1877fbf194fa56ce0268367a35a" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `less` package.</source>
          <target state="translated">Meteor の `less` パッケージのドキュメント。</target>
        </trans-unit>
        <trans-unit id="3f7a98a81cca58e4c9d7950dbfd7470d5a1fcf28" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `markdown` package.</source>
          <target state="translated">Meteor の `markdown` パッケージのドキュメント。</target>
        </trans-unit>
        <trans-unit id="a685b078cd280447fbb874a167b51dfc3a9295ff" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `modules` package.</source>
          <target state="translated">Meteorの `modules` パッケージのドキュメント。</target>
        </trans-unit>
        <trans-unit id="c4f5aeb625a0fe5bb662c97f4ac42ebc02c8ab33" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `oauth-encryption` package.</source>
          <target state="translated">Meteor の `oauth-encryption` パッケージのドキュメント。</target>
        </trans-unit>
        <trans-unit id="7789eb3783ba5b678dfae5eabff7560e4929fb57" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `random` package.</source>
          <target state="translated">Meteor の `random` パッケージのドキュメント。</target>
        </trans-unit>
        <trans-unit id="961025181b1d558653db03f49b82242d93b79cbb" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `server-render` package.</source>
          <target state="translated">Meteor の `server-render` パッケージのドキュメント。</target>
        </trans-unit>
        <trans-unit id="fa47a7f9ba5ec10a7143fbeb2cc37978df174906" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `spacebars` package.</source>
          <target state="translated">Meteor の `spacebars` パッケージのドキュメント。</target>
        </trans-unit>
        <trans-unit id="843ffaf84788d5ba9400193998c8cc8638aa5a8d" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `underscore` package.</source>
          <target state="translated">Meteor の `underscore` パッケージのドキュメント。</target>
        </trans-unit>
        <trans-unit id="b2de49727af30850ba45052643a90bc0f62cfbb2" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `webapp` package.</source>
          <target state="translated">Meteor の `webapp` パッケージのドキュメント。</target>
        </trans-unit>
        <trans-unit id="aae3069a2e14eee4ba8c64aa7cd7c76360a7dabf" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's client-side session API.</source>
          <target state="translated">Meteor のクライアントサイドセッション API のドキュメント。</target>
        </trans-unit>
        <trans-unit id="ef05c9731ab7a8c05505d0ae09fd1853b759404c" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's email API.</source>
          <target state="translated">MeteorのメールAPIのドキュメント。</target>
        </trans-unit>
        <trans-unit id="597db727bc7bfeda337fbbcc262158b5c69a2e71" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's package API.</source>
          <target state="translated">Meteor のパッケージ API のドキュメント。</target>
        </trans-unit>
        <trans-unit id="a896b2c4ae0899643dafe49a403cf8dbbcbe5660" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's password-based accounts API.</source>
          <target state="translated">Meteor のパスワードベースのアカウント API のドキュメント。</target>
        </trans-unit>
        <trans-unit id="edf3e67c4a3952b1a95dd2b01e1f01ef49707c85" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's publication and subscription API.</source>
          <target state="translated">Meteorの出版および購読APIのドキュメント。</target>
        </trans-unit>
        <trans-unit id="fab9fed53e4b5e4db128b02d6c38a4e81fec4d9a" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's template API.</source>
          <target state="translated">MeteorのテンプレートAPIのドキュメント。</target>
        </trans-unit>
        <trans-unit id="004bae12179b0892dc869bf241973bd449fc2291" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's timeout APIs.</source>
          <target state="translated">Meteor のタイムアウト API のドキュメント。</target>
        </trans-unit>
        <trans-unit id="1d3c71fb18be236b0c3b216c72da22bbf171d060" translate="yes" xml:space="preserve">
          <source>Documentation of ReactiveVar, a simple reactive variable package.</source>
          <target state="translated">シンプルなリアクティブ変数パッケージである ReactiveVar のドキュメント。</target>
        </trans-unit>
        <trans-unit id="0df4b595c92c66d0f770696762f15e74b2c6ab42" translate="yes" xml:space="preserve">
          <source>Documentation of Tracker, Meteor's reactive system.</source>
          <target state="translated">流星の反応系「トラッカー」のドキュメント。</target>
        </trans-unit>
        <trans-unit id="38f5252626829c090c4f8ca6a480c6b6987850d5" translate="yes" xml:space="preserve">
          <source>Documentation of core Meteor functions.</source>
          <target state="translated">Meteor のコア機能のドキュメント。</target>
        </trans-unit>
        <trans-unit id="fb97574ce2ab25649f5c5af7c32102f48207852e" translate="yes" xml:space="preserve">
          <source>Documentation of how to use Blaze, Meteor's reactive rendering engine.</source>
          <target state="translated">Meteor のリアクティブレンダリングエンジンである Blaze の使い方のドキュメントです。</target>
        </trans-unit>
        <trans-unit id="0cef6e1d9fa5136421bc6a17497a48470b566da7" translate="yes" xml:space="preserve">
          <source>Documentation of how to use Meteor's accounts functionality.</source>
          <target state="translated">Meteorのアカウント機能の使い方のドキュメント。</target>
        </trans-unit>
        <trans-unit id="2d5c65c167004b16396603646d8f1bb0b1f95363" translate="yes" xml:space="preserve">
          <source>Documentation of how to use assets in Meteor.</source>
          <target state="translated">Meteorでのアセットの使い方のドキュメント。</target>
        </trans-unit>
        <trans-unit id="1897204012d1dabd9d7fdf53819ac6f9d1431c8e" translate="yes" xml:space="preserve">
          <source>Documentation of how to use the Accounts client to connect to other servers.</source>
          <target state="translated">Accounts クライアントを使用して他のサーバーに接続する方法についてのドキュメントです。</target>
        </trans-unit>
        <trans-unit id="cf6e5a5057bbb42ecf16d9b451dac31e77f78753" translate="yes" xml:space="preserve">
          <source>Documentation of the various command line options of the Meteor tool.</source>
          <target state="translated">Meteor ツールの様々なコマンドラインオプションのドキュメント。</target>
        </trans-unit>
        <trans-unit id="138ec9a198bd238e50c4908a73a9a7a43931bad4" translate="yes" xml:space="preserve">
          <source>Documentation on how to use Meteor's client-server connection.</source>
          <target state="translated">Meteor のクライアント-サーバ接続の使用方法についてのドキュメントです。</target>
        </trans-unit>
        <trans-unit id="7873ddcb27b8d0257b13d55086bda5eef7f23809" translate="yes" xml:space="preserve">
          <source>Documentation on how to use Meteor's database collections.</source>
          <target state="translated">Meteor のデータベースコレクションの使い方についてのドキュメント。</target>
        </trans-unit>
        <trans-unit id="79f88a9bb9f4ec699c8ec64acf057a2ef9a2bf7c" translate="yes" xml:space="preserve">
          <source>Domain name</source>
          <target state="translated">ドメイン名</target>
        </trans-unit>
        <trans-unit id="646276576f2593ff66cf8d39941838c74b0d780f" translate="yes" xml:space="preserve">
          <source>Domain whitelisting</source>
          <target state="translated">ドメインのホワイトリスト化</target>
        </trans-unit>
        <trans-unit id="3f7ad4422df3c6392fffc57c27b60800ac5568a6" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t forget to run &lt;a href=&quot;http://docs.meteor.com/#/full/meteoradd&quot;&gt;&lt;code&gt;meteor add [my-package]&lt;/code&gt;&lt;/a&gt; once you have finished developing your package in order to use it; this applies if the package is a local package for internal use only or if you have published the package to Atmosphere.</source>
          <target state="translated">パッケージを使用するための開発が終了したら&lt;a href=&quot;http://docs.meteor.com/#/full/meteoradd&quot;&gt; &lt;code&gt;meteor add [my-package]&lt;/code&gt; &lt;/a&gt;を実行することを忘れないでください。これは、パッケージが内部使用のみのローカルパッケージである場合、またはパッケージをAtmosphereに公開した場合に適用されます。</target>
        </trans-unit>
        <trans-unit id="add8cb5f58427a4d09b86fa7aa711b53ee4f8654" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t leak any secret information to the client.</source>
          <target state="translated">クライアントに秘密情報を漏らさないでください。</target>
        </trans-unit>
        <trans-unit id="2753c6d864f1a309b95ba1e0139a98ccad207465" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t pass userId from the client</source>
          <target state="translated">クライアントからuserIdを渡さない</target>
        </trans-unit>
        <trans-unit id="487dea8c1e47a8a71d8493c3009ee0431663a4fa" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t take generic arguments; make sure you know exactly what your publication is getting from the client.</source>
          <target state="translated">一般的な引数をとらないでください。あなたの出版物がクライアントから得ているものを正確に知っていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="c0b12a907a18131618d7729f953fe0efd183bd94" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t use &lt;a href=&quot;http://blazejs.org/guide/spacebars.html#Rendering-raw-HTML&quot;&gt;raw HTML inclusion in Blaze&lt;/a&gt; unless you really know what you are doing.</source>
          <target state="translated">何をしているのか本当に理解していない限り&lt;a href=&quot;http://blazejs.org/guide/spacebars.html#Rendering-raw-HTML&quot;&gt;、Blazeで生のHTMLインクルードを&lt;/a&gt;使用しないでください。</target>
        </trans-unit>
        <trans-unit id="eb98ab531156c15fe6a38e2e382a86313252da87" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t use profile</source>
          <target state="translated">プロファイルを使用しない</target>
        </trans-unit>
        <trans-unit id="03970f297b18e936293bd5b43bf940a9cde80bf7" translate="yes" xml:space="preserve">
          <source>Double-braced Tags</source>
          <target state="translated">ダブルブレースのタグ</target>
        </trans-unit>
        <trans-unit id="7ed55e6fff6dc92d172c281fb92089d0de7daf66" translate="yes" xml:space="preserve">
          <source>Double-braced and triple-braced template tags take any number of positional and keyword arguments:</source>
          <target state="translated">ダブルブレースとトリプルブレースのテンプレートタグは、任意の数の位置引数とキーワード引数を取ります。</target>
        </trans-unit>
        <trans-unit id="e653b40b746a45b58c2b5f59e8007c2e5bcf9bc5" translate="yes" xml:space="preserve">
          <source>Double-click.</source>
          <target state="translated">Double-click.</target>
        </trans-unit>
        <trans-unit id="d44f6ace885aab2af027419f3d96b7f0a4b2ed4b" translate="yes" xml:space="preserve">
          <source>Download the version that you need from the above links</source>
          <target state="translated">上記リンクから必要なバージョンをダウンロードしてください。</target>
        </trans-unit>
        <trans-unit id="25db32e4f925e860c7db5abc9252a9671f0f6941" translate="yes" xml:space="preserve">
          <source>Downloading updates is done incrementally, so we only download assets that have actually changed (based on a content hash). In addition, if we haven&amp;rsquo;t been able to download all changed assets in one go, because of a network failure or because the app was closed before we finished, we will reuse the ones that have already completed downloading the next time the app starts up or the network connection is restored.</source>
          <target state="translated">更新のダウンロードは段階的に行われるため、実際に変更された（コンテンツハッシュに基づいて）アセットのみをダウンロードします。さらに、ネットワーク障害が原因で、または完了する前にアプリが閉じられたために、変更されたすべてのアセットを一度にダウンロードできなかった場合は、次回アプリが起動したときに既にダウンロードが完了しているアセットを再利用しますまたはネットワーク接続が復元されます。</target>
        </trans-unit>
        <trans-unit id="5ac3cd9e565d2af660d6c302ac7812e098f47e74" translate="yes" xml:space="preserve">
          <source>Driver packages</source>
          <target state="translated">ドライバーパッケージ</target>
        </trans-unit>
        <trans-unit id="bf76ee5b9a5d42a5a6d8038e304829a3ccd1db8e" translate="yes" xml:space="preserve">
          <source>Drop-in UI without routing</source>
          <target state="translated">ルーティングなしのドロップインUI</target>
        </trans-unit>
        <trans-unit id="8c5ec4ec4f5abbd6dd9295c1fc970cfc52e23ad3" translate="yes" xml:space="preserve">
          <source>Due to an upgrade in the underlying dependency for the &lt;a href=&quot;http://docs.meteor.com/api/email.html&quot;&gt;&lt;code&gt;email&lt;/code&gt; package&lt;/a&gt;, it is necessary to check that your &lt;code&gt;MAIL_URL&lt;/code&gt; is using the correct scheme (e.g. &lt;code&gt;smtps://&lt;/code&gt; or &lt;code&gt;smtp://&lt;/code&gt;).</source>
          <target state="translated">&lt;a href=&quot;http://docs.meteor.com/api/email.html&quot;&gt; &lt;code&gt;email&lt;/code&gt; パッケージの&lt;/a&gt;基礎となる依存関係のアップグレードにより、 &lt;code&gt;MAIL_URL&lt;/code&gt; が正しいスキームを使用していることを確認する必要があります（例： &lt;code&gt;smtps://&lt;/code&gt; または &lt;code&gt;smtp://&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="0b83d2f17807f5a0249d5d723222fa45d535f5b9" translate="yes" xml:space="preserve">
          <source>During development, the Meteor &lt;a href=&quot;build-tool&quot;&gt;build tool&lt;/a&gt; detects any relevant file changes, recompiles the necessary files, and notifies all connected clients a new version is available. Clients can then automatically reload the app, switching over to the new version of the code. This is referred to as &lt;em&gt;hot code push&lt;/em&gt;.</source>
          <target state="translated">開発中、Meteor &lt;a href=&quot;build-tool&quot;&gt;ビルドツール&lt;/a&gt;は関連するファイルの変更を検出し、必要なファイルを再コンパイルして、接続されているすべてのクライアントに新しいバージョンが利用可能であることを通知します。その後、クライアントは自動的にアプリをリロードして、新しいバージョンのコードに切り替えることができます。これは、&lt;em&gt;ホットコードプッシュ&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="96c366ad65caaa5e16bd7412d1c7573b0d692229" translate="yes" xml:space="preserve">
          <source>During development, the Meteor &lt;a href=&quot;build-tool&quot;&gt;build tool&lt;/a&gt; integrates with Cordova to run your app on a physical device or the iOS Simulator/Android emulator. In addition to starting a development server and MongoDB instance as usual, &lt;code&gt;meteor run&lt;/code&gt; accepts arguments to run the app on one or more mobile targets:</source>
          <target state="translated">開発中、Meteor &lt;a href=&quot;build-tool&quot;&gt;ビルドツール&lt;/a&gt;はCordovaと統合して、物理デバイスまたはiOSシミュレーター/ Androidエミュレーターでアプリを実行します。通常どおり開発サーバーとMongoDBインスタンスを起動することに加えて、 &lt;code&gt;meteor run&lt;/code&gt; は引数を受け入れ、1つ以上のモバイルターゲットでアプリを実行します。</target>
        </trans-unit>
        <trans-unit id="f7072ab162fa0bd2d88ce0eb2a5e45c09b0125d0" translate="yes" xml:space="preserve">
          <source>Dynamic Attributes</source>
          <target state="translated">動的属性</target>
        </trans-unit>
        <trans-unit id="64e8d2d9158f3e8c12250f3182864f19f2273c87" translate="yes" xml:space="preserve">
          <source>ECMAScript, the language standard on which every browser&amp;rsquo;s JavaScript implementation is based, has moved to yearly standards releases. The newest complete standard is ES2015, which includes some long-awaited and very significant improvements to the JavaScript language. Meteor&amp;rsquo;s &lt;code&gt;ecmascript&lt;/code&gt; package compiles this standard down to regular JavaScript that all browsers can understand using the &lt;a href=&quot;https://babeljs.io/&quot;&gt;popular Babel compiler&lt;/a&gt;. It&amp;rsquo;s fully backwards compatible to &amp;ldquo;regular&amp;rdquo; JavaScript, so you don&amp;rsquo;t have to use any new features if you don&amp;rsquo;t want to. We&amp;rsquo;ve put a lot of effort into making advanced browser features like source maps work great with this package, so that you can debug your code using your favorite developer tools without having to see any of the compiled output.</source>
          <target state="translated">ECMAScriptは、すべてのブラウザーのJavaScript実装の基礎となっている言語標準であり、毎年の標準リリースに移行しました。最新の完全な標準はES2015です。これには、JavaScript言語に対する待望の大幅な改善が含まれています。 Meteorの &lt;code&gt;ecmascript&lt;/code&gt; パッケージは、この標準を通常のJavaScriptにコンパイルし、すべてのブラウザーが&lt;a href=&quot;https://babeljs.io/&quot;&gt;一般的なBabelコンパイラー&lt;/a&gt;を使用して理解できるようにします。 「通常の」JavaScriptと完全に下位互換性があるため、使用しない場合は新機能を使用する必要はありません。ソースマップなどの高度なブラウザー機能をこのパッケージで適切に機能させるために多くの努力を払っており、コンパイルされた出力を確認することなく、お気に入りの開発者ツールを使用してコードをデバッグできます。</target>
        </trans-unit>
        <trans-unit id="a28c94d14495fde8cec538c695bcea0434b0479f" translate="yes" xml:space="preserve">
          <source>EJSON</source>
          <target state="translated">EJSON</target>
        </trans-unit>
        <trans-unit id="9c8572b82261f4cde650fd2f7a1bdf4750a04f18" translate="yes" xml:space="preserve">
          <source>EJSON is an extension of JSON to support more types. It supports all JSON-safe types, as well as:</source>
          <target state="translated">EJSONはJSONの拡張機能で、より多くの型をサポートします。JSONセーフのすべての型をサポートしています。</target>
        </trans-unit>
        <trans-unit id="cd11323c6081a82a630bd062e7d2a0c115725cec" translate="yes" xml:space="preserve">
          <source>ERROR, string is not an attribute name</source>
          <target state="translated">ERROR,文字列は属性名ではありません</target>
        </trans-unit>
        <trans-unit id="5be8585e8dda5d16a9d3e66f70a40dc596a018af" translate="yes" xml:space="preserve">
          <source>ES2015</source>
          <target state="translated">ES2015</target>
        </trans-unit>
        <trans-unit id="947430ab34f34ae6f2058bd6c3894399afc389b4" translate="yes" xml:space="preserve">
          <source>ES2015 &lt;code&gt;export&lt;/code&gt; statements like these:</source>
          <target state="translated">ES2015は、次のようなステートメントを &lt;code&gt;export&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="e558deafa5488e545da2990dd430704575be606c" translate="yes" xml:space="preserve">
          <source>ES2015 &lt;code&gt;import&lt;/code&gt; lines like these:</source>
          <target state="translated">次のようなES2015 &lt;code&gt;import&lt;/code&gt; 行：</target>
        </trans-unit>
        <trans-unit id="06786b63c50ff431fbc07d64196f57c0f6d82721" translate="yes" xml:space="preserve">
          <source>ES2015 modules</source>
          <target state="translated">ES2015モジュール</target>
        </trans-unit>
        <trans-unit id="9a3ca754d4b3cab9f7f14c519febd9ac7d43dc58" translate="yes" xml:space="preserve">
          <source>ES2015+ (recommended)</source>
          <target state="translated">ES2015+(推奨)</target>
        </trans-unit>
        <trans-unit id="3633746b067241666bc462dcfe7a24ff23a8db68" translate="yes" xml:space="preserve">
          <source>Each</source>
          <target state="translated">Each</target>
        </trans-unit>
        <trans-unit id="b95ba0ae036f0f29e6cad291a35b891ca4b78fa5" translate="yes" xml:space="preserve">
          <source>Each Atmosphere package that you use in your app exists in its own separate namespace, meaning that it sees only its own global variables and any variables provided by the packages that it specifically uses. When a top-level variable is defined in a package, it is either declared with local scope or package scope.</source>
          <target state="translated">アプリで使用する各 Atmosphere パッケージは、それぞれ独立したネームスペースに存在します。つまり、独自のグローバル変数と、特別に使用するパッケージから提供される変数のみを参照します。トップレベル変数がパッケージで定義されている場合、ローカルスコープまたはパッケージスコープで宣言されます。</target>
        </trans-unit>
        <trans-unit id="dfa7034e1d3f569958b955bba2409f3d8c9bb463" translate="yes" xml:space="preserve">
          <source>Each Meteor Method invocation shares a random generator seed with the client that called the Method, so any IDs generated by the client and server Methods are guaranteed to be the same. This means you can safely use the IDs generated on the client to do things while the Method is being sent to the server, and be confident that the IDs will be the same when the Method finishes. One case where this is particularly useful is if you want to create a new document in the database, then immediately redirect to a URL that contains that new document&amp;rsquo;s ID.</source>
          <target state="translated">各Meteorメソッドの呼び出しは、メソッドを呼び出したクライアントとランダムジェネレーターシードを共有するため、クライアントメソッドとサーバーメソッドによって生成されるIDはすべて同じであることが保証されます。これは、メソッドがサーバーに送信されている間にクライアントで生成されたIDを安全に使用して、メソッドが終了したときにIDが同じになることを確信できることを意味します。これが特に役立つケースの1つは、データベースに新しいドキュメントを作成し、その新しいドキュメントのIDを含むURLにすぐにリダイレクトする場合です。</target>
        </trans-unit>
        <trans-unit id="533c3a0190649ec10759c8923533d157059db4cb" translate="yes" xml:space="preserve">
          <source>Each and With</source>
          <target state="translated">それぞれと一緒に</target>
        </trans-unit>
        <trans-unit id="e836e62ecfea337b06c631d3a534614caf5b3e7a" translate="yes" xml:space="preserve">
          <source>Each file in the list is an object that has all the methods provided by all build plugins, described above.</source>
          <target state="translated">リスト内の各ファイルは、上で説明したすべてのビルドプラグインが提供するすべてのメソッドを持つオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="582993d8b7d6d1beae087f53647245de1bb5e141" translate="yes" xml:space="preserve">
          <source>Each file in your app should represent one logical module. Avoid having catch-all utility modules that export a variety of unrelated functions and symbols. Often, this can mean that it&amp;rsquo;s good to have one class, UI component, or collection per file, but there are cases where it is OK to make an exception, for example if you have a UI component with a small sub-component that isn&amp;rsquo;t used outside of that file.</source>
          <target state="translated">アプリ内の各ファイルは、1つの論理モジュールを表す必要があります。関連のないさまざまな関数やシンボルをエクスポートする、すべてを網羅するユーティリティモジュールを使用しないでください。多くの場合、これは、ファイルごとに1つのクラス、UIコンポーネント、またはコレクションを用意するのが良いことを意味しますが、小さいサブコンポーネントを持つUIコンポーネントがある場合など、例外を作成しても問題ない場合があります。そのファイル以外では使用されません。</target>
        </trans-unit>
        <trans-unit id="51f4f09922f6991d8a2cf5f6a7e6b68c5529c2fc" translate="yes" xml:space="preserve">
          <source>Each of the options correspond to a key in the app's core configuration as described in the &lt;a href=&quot;http://cordova.apache.org/docs/en/5.1.1/config_ref_index.md.html#The%20config.xml%20File_core_configuration_elements&quot;&gt;Cordova documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://cordova.apache.org/docs/en/5.1.1/config_ref_index.md.html#The%20config.xml%20File_core_configuration_elements&quot;&gt;Cordovaのドキュメントで&lt;/a&gt;説明されているように、各オプションはアプリのコア構成のキーに対応しています。</target>
        </trans-unit>
        <trans-unit id="b7b3e36e928eae42b236ef880ae1a1410e708e15" translate="yes" xml:space="preserve">
          <source>Each of these points will have their own section below.</source>
          <target state="translated">これらのポイントは、それぞれ以下のようなセクションを持つことになります。</target>
        </trans-unit>
        <trans-unit id="066fa621ea0e0f7cc2fdd52de3fac86a2a813741" translate="yes" xml:space="preserve">
          <source>Each template has a local dictionary of helpers that are made available to it, and this call specifies helpers to add to the template&amp;rsquo;s dictionary.</source>
          <target state="translated">各テンプレートには、利用可能なヘルパーのローカルディクショナリがあり、この呼び出しはテンプレートのディクショナリに追加するヘル​​パーを指定します。</target>
        </trans-unit>
        <trans-unit id="b192ab33cb35cc84f829fe0dc7ffbade8d4e7f25" translate="yes" xml:space="preserve">
          <source>Each template tag&amp;rsquo;s DOM is updated automatically when it evaluates to a new value, while avoiding unnecessary re-rendering as much as possible. For example, a double-braced tag replace its text node when its text value changes. An &lt;code&gt;#if&lt;/code&gt; re-renders its contents only when the condition changes from truthy to falsy or vice versa.</source>
          <target state="translated">各テンプレートタグのDOMは、不要な再レンダリングを可能な限り回避しながら、新しい値に評価されるときに自動的に更新されます。たとえば、テキスト値が変更されると、ダブルブレースタグがテキストノードを置き換えます。 &lt;code&gt;#if&lt;/code&gt; その内容のみときfalsyへtruthyから状態変化又はその逆再レンダリングします。</target>
        </trans-unit>
        <trans-unit id="4461a43e600cdf5efa1eff9d8eea135b9ba936bc" translate="yes" xml:space="preserve">
          <source>Each time a computation runs, it may access various reactive data sources that serve as inputs to the computation, which are called its dependencies. At some future time, one of these dependencies may trigger the computation to be rerun by invalidating it. When this happens, the dependencies are cleared, and the computation is scheduled to be rerun at flush time.</source>
          <target state="translated">計算が実行されるたびに、計算の入力となる様々な反応性データソースにアクセスすることができます。将来、これらの依存関係のうちの1つが、計算を無効にすることで計算を再実行するきっかけになるかもしれません。このような場合、依存関係はクリアされ、フラッシュ時に計算が再実行されるようにスケジュールされます。</target>
        </trans-unit>
        <trans-unit id="62008429c8dd1d3652c7ed3660c0635b6f1bbc12" translate="yes" xml:space="preserve">
          <source>Each-in</source>
          <target state="translated">Each-in</target>
        </trans-unit>
        <trans-unit id="1626bf53584539804234548386732c0103e38a63" translate="yes" xml:space="preserve">
          <source>Easily call the Method with a custom user ID, especially in tests (as recommended by the &lt;a href=&quot;https://www.discovermeteor.com/blog/meteor-pattern-two-tiered-methods/&quot;&gt;Discover Meteor two-tiered methods pattern&lt;/a&gt;).</source>
          <target state="translated">特にテストでは、カスタムユーザーIDでメソッドを簡単に呼び出します（&lt;a href=&quot;https://www.discovermeteor.com/blog/meteor-pattern-two-tiered-methods/&quot;&gt;Discover Meteorの2層メソッドパターンで&lt;/a&gt;推奨）。</target>
        </trans-unit>
        <trans-unit id="7432e47af5fe13154ca38cc8cbed143518940e8c" translate="yes" xml:space="preserve">
          <source>Easily override the Method for testing.</source>
          <target state="translated">テスト用のメソッドを簡単に上書きすることができます。</target>
        </trans-unit>
        <trans-unit id="443dfa68497446993338ef19371adfe7de8fd239" translate="yes" xml:space="preserve">
          <source>Easy to read code</source>
          <target state="translated">読み取りやすいコード</target>
        </trans-unit>
        <trans-unit id="177d47837a0b840025675413838d81f5e804ebfe" translate="yes" xml:space="preserve">
          <source>Edit button</source>
          <target state="translated">編集ボタン</target>
        </trans-unit>
        <trans-unit id="4a0d256ac1f7d5b2fbe2786ad72aceb5a36c1945" translate="yes" xml:space="preserve">
          <source>Either a string interpreted as a username or an email; or an object with a single key: &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt; or &lt;code&gt;id&lt;/code&gt;. Username or email match in a case insensitive manner.</source>
          <target state="translated">ユーザー名またはメールとして解釈される文字列。または、単一のキーを持つオブジェクト： &lt;code&gt;email&lt;/code&gt; 、 &lt;code&gt;username&lt;/code&gt; または &lt;code&gt;id&lt;/code&gt; 。大文字と小文字を区別しない方法でユーザー名または電子メールが一致します。</target>
        </trans-unit>
        <trans-unit id="bd7f01b2756313501a3cac451fc5658f893b3805" translate="yes" xml:space="preserve">
          <source>Either the &lt;code&gt;onLogin&lt;/code&gt; or the &lt;code&gt;onLoginFailure&lt;/code&gt; callbacks will be called for each login attempt. The &lt;code&gt;onLogin&lt;/code&gt; callbacks are called after the user has been successfully logged in. The &lt;code&gt;onLoginFailure&lt;/code&gt; callbacks are called after a login attempt is denied.</source>
          <target state="translated">どちらか &lt;code&gt;onLogin&lt;/code&gt; または &lt;code&gt;onLoginFailure&lt;/code&gt; のコールバックは、各ログインの試行のために呼び出されます。 &lt;code&gt;onLogin&lt;/code&gt; ユーザーが正常にログインされた後にコールバックが呼び出されます。 &lt;code&gt;onLoginFailure&lt;/code&gt; ログイン試行が拒否された後にコールバックが呼ばれます。</target>
        </trans-unit>
        <trans-unit id="84add5b2952787581cb9a8851eef63d1ec75d22b" translate="yes" xml:space="preserve">
          <source>Email</source>
          <target state="translated">Email</target>
        </trans-unit>
        <trans-unit id="d9810544672e482b9c0025bd93656d66a8227379" translate="yes" xml:space="preserve">
          <source>Email flows</source>
          <target state="translated">メールの流れ</target>
        </trans-unit>
        <trans-unit id="51278b6eba2be0b22672652bcc5c10e5de75a003" translate="yes" xml:space="preserve">
          <source>Email works out of the box with accounts UI packages</source>
          <target state="translated">アカウントUIのパッケージを使って、Eメールを箱から出して動作させる</target>
        </trans-unit>
        <trans-unit id="492a42a58c56429f2ceed9469c63b20f75dd78ab" translate="yes" xml:space="preserve">
          <source>Enables &lt;code&gt;class&lt;/code&gt; syntax:</source>
          <target state="translated">&lt;code&gt;class&lt;/code&gt; 構文を有効にします。</target>
        </trans-unit>
        <trans-unit id="1bc70e3d745a9fd593f1cca2126119e8c844da25" translate="yes" xml:space="preserve">
          <source>Enables multi-line strings delimited by backticks instead of quotation marks, with variable interpolation:</source>
          <target state="translated">複数行の文字列を、引用符の代わりにバックスティックで区切って可変補間することを可能にします。</target>
        </trans-unit>
        <trans-unit id="50d0b59c60affb6fcc34731807f626458d423349" translate="yes" xml:space="preserve">
          <source>Enables the &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; keywords as alternatives to &lt;code&gt;var&lt;/code&gt;. The key difference is that variables defined using &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; are visible only within the block where they are declared, rather than being visible anywhere in the enclosing function. For example:</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; の代わりに &lt;code&gt;let&lt;/code&gt; および &lt;code&gt;const&lt;/code&gt; キーワードを有効にします。主な違いは、 &lt;code&gt;let&lt;/code&gt; または &lt;code&gt;const&lt;/code&gt; を使用して定義された変数は、それらが宣言されているブロック内でのみ可視であり、囲んでいる関数のどこからでも可視ではないことです。例えば：</target>
        </trans-unit>
        <trans-unit id="ab6c4d9a6009e703e713b51ae1e148dbd59d9898" translate="yes" xml:space="preserve">
          <source>Enabling</source>
          <target state="translated">Enabling</target>
        </trans-unit>
        <trans-unit id="edcd21d929a7fcb6f80ae83013a137599ac3407b" translate="yes" xml:space="preserve">
          <source>Enabling SEO</source>
          <target state="translated">SEOを可能にする</target>
        </trans-unit>
        <trans-unit id="1e83b0c6a54d0f7fd927f49892653c00be248568" translate="yes" xml:space="preserve">
          <source>Enabling modules</source>
          <target state="translated">モジュールの有効化</target>
        </trans-unit>
        <trans-unit id="0ccf4930da45311cdc3e388583c8742399b9ccc7" translate="yes" xml:space="preserve">
          <source>Encryption of data in-flight and at-rest</source>
          <target state="translated">機内・休憩中のデータの暗号化</target>
        </trans-unit>
        <trans-unit id="ac4bbc3dc7765a7722e80ab3f3494d5b6a305392" translate="yes" xml:space="preserve">
          <source>Encrypts sensitive login secrets stored in the database such as a login service&amp;rsquo;s application secret key and users&amp;rsquo; access tokens.</source>
          <target state="translated">ログインサービスのアプリケーションシークレットキーやユーザーのアクセストークンなど、データベースに格納されている機密ログインシークレットを暗号化します。</target>
        </trans-unit>
        <trans-unit id="9db7b3bb07b4e0990a33d7e2756791eb6b029b3c" translate="yes" xml:space="preserve">
          <source>Enforce exact version dependencies between packages using Meteor&amp;rsquo;s &lt;a href=&quot;writing-atmosphere-packages.md#version-constraints&quot;&gt;constraint resolver&lt;/a&gt;</source>
          <target state="translated">Meteorの&lt;a href=&quot;writing-atmosphere-packages.md#version-constraints&quot;&gt;制約リゾルバー&lt;/a&gt;を使用して、パッケージ間の正確なバージョン依存関係を適用します</target>
        </trans-unit>
        <trans-unit id="44c833bc2f9dbe0b7bc23634f3014760a8bee23f" translate="yes" xml:space="preserve">
          <source>Ensure that your &lt;a href=&quot;#meteor_absoluteurl&quot;&gt;&lt;code&gt;$ROOT_URL&lt;/code&gt;&lt;/a&gt; matches the authorized domain and callback URL that you configure with the external service (for instance, if you are running Meteor behind a proxy server, &lt;code&gt;$ROOT_URL&lt;/code&gt; should be the externally-accessible URL, not the URL inside your proxy).</source>
          <target state="translated">&lt;a href=&quot;#meteor_absoluteurl&quot;&gt; &lt;code&gt;$ROOT_URL&lt;/code&gt; &lt;/a&gt;が、外部サービスで構成する承認済みドメインおよびコールバックURLと一致していることを確認します（たとえば、Meteorをプロキシサーバーの背後で実行している場合、 &lt;code&gt;$ROOT_URL&lt;/code&gt; は、プロキシ内のURLではなく、外部からアクセス可能なURLである必要があります）。 。</target>
        </trans-unit>
        <trans-unit id="3631390663783b1262378940294087c8d90ab021" translate="yes" xml:space="preserve">
          <source>Entire books have been written on the subject of testing, so we will simply touch on some basics of testing here. The important thing to consider when writing a test is what part of the application you are trying to test, and how you are verifying the behavior works.</source>
          <target state="translated">完全な本がテストのテーマで書かれていますので、ここではテストの基本に簡単に触れます。テストを書くときに考慮すべき重要なことは、アプリケーションのどの部分をテストしようとしているのか、そして、どのように動作を検証しているのかということです。</target>
        </trans-unit>
        <trans-unit id="ec072bba7befaa68af710fe3549eb0491d7badd1" translate="yes" xml:space="preserve">
          <source>Environment Variables</source>
          <target state="translated">環境変数</target>
        </trans-unit>
        <trans-unit id="72e75d7e5d445bc15e0b9ea52b7baf3c7167b0ca" translate="yes" xml:space="preserve">
          <source>Environment variables and settings</source>
          <target state="translated">環境変数と設定</target>
        </trans-unit>
        <trans-unit id="65d09ae9f782d6f65a7ec72d18a1732d6c0a7de2" translate="yes" xml:space="preserve">
          <source>Environment variables are used to set process specific things, which could conceivably change for different instances of your application&amp;rsquo;s processes. For instance, you can set a different &lt;code&gt;KADIRA_OPTIONS_HOSTNAME&lt;/code&gt; for each process to ensure that &lt;a href=&quot;#kadira&quot;&gt;kadira&lt;/a&gt; logs timings with useful hostnames.</source>
          <target state="translated">環境変数は、プロセス固有のものを設定するために使用されます。これは、アプリケーションのプロセスのインスタンスごとに変わる可能性があります。たとえば、あなたが異なる設定できる &lt;code&gt;KADIRA_OPTIONS_HOSTNAME&lt;/code&gt; ことを確認するために、各プロセスのを&lt;a href=&quot;#kadira&quot;&gt;kadira&lt;/a&gt;便利なホスト名でログタイミングを。</target>
        </trans-unit>
        <trans-unit id="21d9b1edec202248799973eb0e9d2c3df65a5d20" translate="yes" xml:space="preserve">
          <source>Equivalent HTML</source>
          <target state="translated">HTML相当</target>
        </trans-unit>
        <trans-unit id="05f4a8bb9bf12e58a28eaaeac29c9741467c50e9" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;#find&quot;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(selector, options).&lt;/code&gt;&lt;a href=&quot;#fetch&quot;&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()[0]&lt;/code&gt; with &lt;code&gt;options.limit = 1&lt;/code&gt;.</source>
          <target state="translated">相当&lt;a href=&quot;#find&quot;&gt; &lt;code&gt;find&lt;/code&gt; &lt;/a&gt; &lt;code&gt;(selector, options).&lt;/code&gt; &lt;code&gt;options.limit = 1&lt;/code&gt; して &lt;code&gt;()[0]&lt;/code&gt; を&lt;a href=&quot;#fetch&quot;&gt; &lt;code&gt;fetch&lt;/code&gt; &lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="f1065972287388dec34226ca1d5430712d6a7b62" translate="yes" xml:space="preserve">
          <source>Error case</source>
          <target state="translated">エラーが発生した場合</target>
        </trans-unit>
        <trans-unit id="73631d7f0356fdbdeaa36f8e5dbad89c6aa15dc4" translate="yes" xml:space="preserve">
          <source>Error handling</source>
          <target state="translated">エラー処理</target>
        </trans-unit>
        <trans-unit id="a41f6a98e341464efb67644fa3497c82f78450fb" translate="yes" xml:space="preserve">
          <source>Errors in Method simulation</source>
          <target state="translated">メソッドシミュレーションのエラー</target>
        </trans-unit>
        <trans-unit id="2779ea444cb47200f1b0085d04662b33c09fc23f" translate="yes" xml:space="preserve">
          <source>Escaping</source>
          <target state="translated">Escaping</target>
        </trans-unit>
        <trans-unit id="e8e5567de1ab1f259c25ebfc614570a27330977c" translate="yes" xml:space="preserve">
          <source>Escaping Curly Braces</source>
          <target state="translated">カーリーブレースをエスケープする</target>
        </trans-unit>
        <trans-unit id="af960cbec0a4a069531ee449bcb8978a06f0d33a" translate="yes" xml:space="preserve">
          <source>Essentially it copies a tarball of the contents of each of your npm dependencies into your application source repository. This is essentially a more robust version of the &lt;code&gt;npm-shrinkwrap.json&lt;/code&gt; file that shrinkwrap creates, because it means your application&amp;rsquo;s npm dependencies can be assembled without the need or reliance on the npm servers being available or reliable. This is good for repeatable builds especially when deploying.</source>
          <target state="translated">基本的に、npmの各依存関係の内容のtarballをアプリケーションのソースリポジトリにコピーします。これは本質的に、shrinkwrapが作成する &lt;code&gt;npm-shrinkwrap.json&lt;/code&gt; ファイルのより堅牢なバージョンです。これは、アプリケーションのnpm依存関係を、npmサーバーを利用したり信頼したりする必要なく、依存せずにアセンブルできることを意味します。これは、特にデプロイ時に繰り返し可能なビルドに適しています。</target>
        </trans-unit>
        <trans-unit id="20fbf1356baec1ddc0e72057db7491e002803955" translate="yes" xml:space="preserve">
          <source>Establish a weak dependency on a package. If package A has a weak dependency on package B, it means that including A in an app does not force B to be included too &amp;mdash; but, if B is included or by another package, then B will load before A. You can use this to make packages that optionally integrate with or enhance other packages if those packages are present. When you weakly depend on a package you don't see its exports. You can detect if the possibly-present weakly-depended-on package is there by seeing if &lt;code&gt;Package.foo&lt;/code&gt; exists, and get its exports from the same place.</source>
          <target state="translated">パッケージへの弱い依存関係を確立します。パッケージAのパッケージBへの依存度が低い場合、アプリにAを含めてもBは含まれません。ただし、Bが含まれている場合や別のパッケージによってBが含まれている場合は、Aの前にBがロードされます。これを使用できます。他のパッケージが存在する場合、オプションで他のパッケージと統合または拡張するパッケージを作成する。パッケージへの依存度が低い場合、そのエクスポートは表示されません。 &lt;code&gt;Package.foo&lt;/code&gt; が存在するかどうかを確認することで、存在する可能性のある弱く依存しているパッケージが存在するかどうかを検出し、同じ場所からエクスポートを取得できます。</target>
        </trans-unit>
        <trans-unit id="4c15409fb36b4813807ebc18ea1006cafcd1e3c6" translate="yes" xml:space="preserve">
          <source>Establishes a &lt;em&gt;live query&lt;/em&gt; that invokes callbacks when the result of the query changes. In contrast to &lt;a href=&quot;#observe&quot;&gt;&lt;code&gt;observe&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;observeChanges&lt;/code&gt; provides only the difference between the old and new result set, not the entire contents of the document that changed.</source>
          <target state="translated">&lt;em&gt;クエリ&lt;/em&gt;の結果が変化したときにコールバックを呼び出す&lt;em&gt;ライブクエリ&lt;/em&gt;を確立します。対照的に&lt;a href=&quot;#observe&quot;&gt; &lt;code&gt;observe&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;observeChanges&lt;/code&gt; が変更されたことを古いものと新しい結果セットの唯一の違いではなく、文書の内容全体を提供します。</target>
        </trans-unit>
        <trans-unit id="6067d57253940be2ab171eb9cc19c4fdff18af7f" translate="yes" xml:space="preserve">
          <source>Establishes a &lt;em&gt;live query&lt;/em&gt; that invokes callbacks when the result of the query changes. The callbacks receive the entire contents of the document that was affected, as well as its old contents, if applicable. If you only need to receive the fields that changed, see &lt;a href=&quot;#observe_changes&quot;&gt;&lt;code&gt;observeChanges&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;クエリ&lt;/em&gt;の結果が変化したときにコールバックを呼び出す&lt;em&gt;ライブクエリ&lt;/em&gt;を確立します。コールバックは、影響を受けたドキュメントのコンテンツ全体と、該当する場合はその古いコンテンツを受け取ります。変更されたフィールドのみを受け取る必要がある場合は、&lt;a href=&quot;#observe_changes&quot;&gt; &lt;code&gt;observeChanges&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8d147450a036bcd649afff9f1b3e74089dd56753" translate="yes" xml:space="preserve">
          <source>Establishes a reactive dependency on the result.</source>
          <target state="translated">結果に対する反応的な依存関係を確立します。</target>
        </trans-unit>
        <trans-unit id="9ed0d5b75247f900e487ce6a25e41a118c087a4b" translate="yes" xml:space="preserve">
          <source>Even if you aren&amp;rsquo;t saving data over the wire to the database on every user input, sometimes you still may wish to update in-memory data stores on every user change. If updating that data store triggers a lot of UI changes, you can see poor performance and missed keystrokes when you update it too often. In such cases you can limit re-rendering by throttling in a similar way how we throttled the method call above. You could also use &lt;code&gt;.debounce()&lt;/code&gt; to ensure the changes happen only after the user has stopped typing.</source>
          <target state="translated">すべてのユーザー入力でデータをネットワーク経由でデータベースに保存していない場合でも、ユーザーが変更するたびにインメモリデータストアを更新したい場合があります。そのデータストアを更新すると、UIが大幅に変更される場合、頻繁に更新すると、パフォーマンスが低下したり、キーストロークが失われたりすることがあります。このような場合、上記のメソッド呼び出しを調整したのと同じ方法で調整することにより、再レンダリングを制限できます。 &lt;code&gt;.debounce()&lt;/code&gt; を使用して、ユーザーが入力を停止した後にのみ変更が行われるようにすることもできます。</target>
        </trans-unit>
        <trans-unit id="5204bdf6c201719651bc9bf61b87907bf2fa6722" translate="yes" xml:space="preserve">
          <source>Even ignoring the security implications of &lt;code&gt;profile&lt;/code&gt;, it isn&amp;rsquo;t a good idea to put all of your app&amp;rsquo;s custom data onto one field. As discussed in the &lt;a href=&quot;collections#schema-design&quot;&gt;Collections article&lt;/a&gt;, Meteor&amp;rsquo;s data transfer protocol doesn&amp;rsquo;t do deeply nested diffing of fields, so it&amp;rsquo;s a good idea to flatten out your objects into many top-level fields on the document.</source>
          <target state="translated">&lt;code&gt;profile&lt;/code&gt; のセキュリティへの影響を無視しても、アプリのすべてのカスタムデータを1つのフィールドに配置することはお勧めできません。&lt;a href=&quot;collections#schema-design&quot;&gt;コレクションの記事&lt;/a&gt;で説明したように、Meteorのデータ転送プロトコルはフィールドの深くネストされた比較を行わないため、オブジェクトをドキュメント上の多くの最上位フィールドにフラット化することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="3529e10b4f8dfafd4a034a44c92fc289cad4906a" translate="yes" xml:space="preserve">
          <source>Even though it is recommended that you write your application to use ES2015 modules and the &lt;code&gt;imports/&lt;/code&gt; directory, Meteor 1.3 continues to support eager loading of files, using these default load order rules, to provide backwards compatibility with applications written for Meteor 1.2 and earlier. You may combine both eager loading and lazy loading using &lt;code&gt;import&lt;/code&gt; in a single app. Any import statements are evaluated in the order they are listed in a file when that file is loaded and evaluated using these rules.</source>
          <target state="translated">ES2015モジュールと &lt;code&gt;imports/&lt;/code&gt; ディレクトリを使用するようにアプリケーションを作成することをお勧めしますが、Meteor 1.3は、これらのデフォルトのロード順序ルールを使用して、ファイルの積極的なロードを引き続きサポートし、Meteor 1.2以前用に作成されたアプリケーションとの下位互換性を提供します。単一のアプリで &lt;code&gt;import&lt;/code&gt; を使用して、イーガーロードとレイジーロードの両方を組み合わせることができます。インポートステートメントは、ファイルが読み込まれ、これらのルールを使用して評価されるときに、ファイルにリストされている順序で評価されます。</target>
        </trans-unit>
        <trans-unit id="e80c56065c7b654260bd65218422bb9e7d3d03cd" translate="yes" xml:space="preserve">
          <source>Event Maps</source>
          <target state="translated">イベントマップ</target>
        </trans-unit>
        <trans-unit id="36a67f567bf2ec3510801d617c4d76a61448c053" translate="yes" xml:space="preserve">
          <source>Event handlers to associate with this template.</source>
          <target state="translated">このテンプレートに関連付けるイベントハンドラ。</target>
        </trans-unit>
        <trans-unit id="eabc790d00812b33da77b202701e348d39479228" translate="yes" xml:space="preserve">
          <source>Event handling</source>
          <target state="translated">イベント処理</target>
        </trans-unit>
        <trans-unit id="51bd03a46735470cb8e5a85fbabadc9ef7c0e093" translate="yes" xml:space="preserve">
          <source>Event types and their uses include:</source>
          <target state="translated">イベントの種類とその用途には以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="01f4091aee7775e55b424276eac7ddd89786ebe6" translate="yes" xml:space="preserve">
          <source>Every Meteor app comes with production minification by default with the &lt;code&gt;standard-minifier-js&lt;/code&gt; and &lt;code&gt;standard-minifier-css&lt;/code&gt; packages. These minifiers go to some extra effort to do a good job - for example, Meteor automatically splits up your files if they get too big to maintain support for older versions of Internet Explorer which had a limit on the number of CSS rules per file.</source>
          <target state="translated">すべてのMeteorアプリには、デフォルトで、 &lt;code&gt;standard-minifier-js&lt;/code&gt; および &lt;code&gt;standard-minifier-css&lt;/code&gt; パッケージを使用した本番ミニファイが付属しています。これらの縮小版は、良い仕事をするために追加の努力をします。たとえば、ファイルが大きくなりすぎて、ファイルごとのCSSルールの数に制限があった古いバージョンのInternet Explorerのサポートを維持できない場合、Meteorは自動的にファイルを分割します。</target>
        </trans-unit>
        <trans-unit id="af6f2fe9271813f9c06c5e6475ac49eac4f1b070" translate="yes" xml:space="preserve">
          <source>Every Meteor project targets a set of platforms. Platforms can be added to a Meteor project with &lt;code&gt;meteor add-platform&lt;/code&gt;.</source>
          <target state="translated">すべてのMeteorプロジェクトは、一連のプラットフォームを対象としています。プラットフォームは、 &lt;code&gt;meteor add-platform&lt;/code&gt; を使用してMeteorプロジェクトに追加できます。</target>
        </trans-unit>
        <trans-unit id="fdbc7c354c5c0405925c85fedf2997b60d26233a" translate="yes" xml:space="preserve">
          <source>Every app will have some secret API keys or passwords:</source>
          <target state="translated">すべてのアプリは、いくつかの秘密のAPIキーやパスワードを持っています。</target>
        </trans-unit>
        <trans-unit id="eedc2ea46adfe6da022b6831ee232ed74648c989" translate="yes" xml:space="preserve">
          <source>Every new Meteor app includes Blaze, Meteor&amp;rsquo;s default templating system, by default. If you are not planning on &lt;a href=&quot;#using-with-blaze&quot;&gt;using React and Blaze together&lt;/a&gt;, you can remove Blaze from your project by running:</source>
          <target state="translated">すべての新しいMeteorアプリには、デフォルトでMeteorのデフォルトテンプレートシステムであるBlazeが含まれています。&lt;a href=&quot;#using-with-blaze&quot;&gt;ReactとBlazeを一緒&lt;/a&gt;に使用する予定がない場合は、次のコマンドを実行してプロジェクトからBlazeを削除できます。</target>
        </trans-unit>
        <trans-unit id="2e9c40c26ed50471311c3109d77b8e06f9a98112" translate="yes" xml:space="preserve">
          <source>Every other argument is passed as a prop to the component when it is rendered.</source>
          <target state="translated">他のすべての引数は、それがレンダリングされるときにコンポーネントにプロップとして渡されます。</target>
        </trans-unit>
        <trans-unit id="4d989e2df56c605dfc6c6ea04b0cd8aec51c9c0f" translate="yes" xml:space="preserve">
          <source>Every project is pinned to a specific release of Meteor. You can temporarily try using your package with another release by passing the &lt;code&gt;--release&lt;/code&gt; option to any command; &lt;code&gt;meteor update&lt;/code&gt; changes the pinned release.</source>
          <target state="translated">すべてのプロジェクトは、Meteorの特定のリリースに固定されています。任意のコマンドに &lt;code&gt;--release&lt;/code&gt; オプションを渡すことにより、別のリリースでパッケージを一時的に使用することができます。 &lt;code&gt;meteor update&lt;/code&gt; は固定されたリリースを変更します。</target>
        </trans-unit>
        <trans-unit id="6113a91befef754507a909414b09535262331ba5" translate="yes" xml:space="preserve">
          <source>Every publication takes two types of parameters:</source>
          <target state="translated">すべての出版物は2種類のパラメータを取ります。</target>
        </trans-unit>
        <trans-unit id="3abe736de10b160fdad52b58c3f87bb13197627e" translate="yes" xml:space="preserve">
          <source>Everything else: code that runs on the client, data sent through Method and publication arguments, etc, can&amp;rsquo;t be trusted.</source>
          <target state="translated">その他すべて：クライアントで実行されるコード、メソッドを介して送信されるデータ、パブリケーションの引数などは信頼できません。</target>
        </trans-unit>
        <trans-unit id="48918d21cb8427b9c0a3d99d41d627c47877adb9" translate="yes" xml:space="preserve">
          <source>Example (client):</source>
          <target state="translated">例(クライアント)。</target>
        </trans-unit>
        <trans-unit id="72bb1e626ae8ddf9d0be812f06ca11cfee969530" translate="yes" xml:space="preserve">
          <source>Example (server):</source>
          <target state="translated">例(サーバー)。</target>
        </trans-unit>
        <trans-unit id="8f97bcc0e17b1dbc74957bd0380cdda95449c8dc" translate="yes" xml:space="preserve">
          <source>Example app</source>
          <target state="translated">アプリ例</target>
        </trans-unit>
        <trans-unit id="e8fbc63282146097bdb5d214a2275dc1f625ef0f" translate="yes" xml:space="preserve">
          <source>Example asynchronous HTTP call:</source>
          <target state="translated">非同期 HTTP 呼び出しの例。</target>
        </trans-unit>
        <trans-unit id="f54b424db1f494644832d310ac00845732403bea" translate="yes" xml:space="preserve">
          <source>Example directory layout</source>
          <target state="translated">ディレクトリレイアウトの例</target>
        </trans-unit>
        <trans-unit id="4d05ce1ffbb205c93297cb855637fcd8f224c5b6" translate="yes" xml:space="preserve">
          <source>Example server method:</source>
          <target state="translated">サーバーメソッドの例。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="4375e210d7c1b74f25ad4ca4b750e6c8b34217fb" translate="yes" xml:space="preserve">
          <source>Examples below will reference the &lt;code&gt;Lists_show&lt;/code&gt; component from the Todos example app.</source>
          <target state="translated">以下の例では、Todosサンプルアプリの &lt;code&gt;Lists_show&lt;/code&gt; コンポーネントを参照します。</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="8bc8848fa11928b655560703cb0f89e1bb28fd73" translate="yes" xml:space="preserve">
          <source>Executing &lt;code&gt;meteor node -e &quot;console.log(process.versions)&quot;&lt;/code&gt; would run &lt;code&gt;console.log(process.versions)&lt;/code&gt; in the version of &lt;code&gt;node&lt;/code&gt; bundled with Meteor.</source>
          <target state="translated">実行 &lt;code&gt;meteor node -e &quot;console.log(process.versions)&quot;&lt;/code&gt; 実行します &lt;code&gt;console.log(process.versions)&lt;/code&gt; のバージョンで &lt;code&gt;node&lt;/code&gt; 流星にバンドルされています。</target>
        </trans-unit>
        <trans-unit id="8c56e464ee0ee637718966cb38fae37b4d7d430b" translate="yes" xml:space="preserve">
          <source>Exiting the shell does not terminate the server. If the server restarts because a change was made in server code, or a fatal exception was encountered, the shell will restart along with the server. This behavior can be simulated by typing &lt;code&gt;.reload&lt;/code&gt; in the shell.</source>
          <target state="translated">シェルを終了してもサーバーは終了しません。サーバーコードに変更が加えられたためにサーバーが再起動した場合、または致命的な例外が発生した場合、シェルはサーバーと共に再起動します。この動作は、シェルで &lt;code&gt;.reload&lt;/code&gt; と入力してシミュレートできます。</target>
        </trans-unit>
        <trans-unit id="42a57fa75f4019d60defcf09b4a90412cfff9e84" translate="yes" xml:space="preserve">
          <source>Explicitly include non-javascript files including CSS, Less, Sass, Stylus and static assets</source>
          <target state="translated">CSS、Less、Sass、Stylus、静的アセットなどのjavascript以外のファイルを明示的に含む</target>
        </trans-unit>
        <trans-unit id="6f35141d6315a42b30171c5af76dda7a26aca820" translate="yes" xml:space="preserve">
          <source>Export package-level variables in your package. The specified variables (declared without &lt;code&gt;var&lt;/code&gt; in the source code) will be available to packages that use your package. If your package sets the &lt;code&gt;debugOnly&lt;/code&gt;, &lt;code&gt;prodOnly&lt;/code&gt; or &lt;code&gt;testOnly&lt;/code&gt; options to &lt;code&gt;true&lt;/code&gt; when it calls &lt;code&gt;Package.describe()&lt;/code&gt;, then packages that use your package will need to use &lt;code&gt;Package[&quot;package-name&quot;].ExportedVariableName&lt;/code&gt; to access the value of an exported variable.</source>
          <target state="translated">パッケージ内のパッケージレベルの変数をエクスポートします。指定した変数（ソースコードで &lt;code&gt;var&lt;/code&gt; なしで宣言）は、パッケージを使用するパッケージで使用できます。パッケージが &lt;code&gt;Package.describe()&lt;/code&gt; を呼び出すときに &lt;code&gt;debugOnly&lt;/code&gt; 、 &lt;code&gt;prodOnly&lt;/code&gt; または &lt;code&gt;testOnly&lt;/code&gt; オプションを &lt;code&gt;true&lt;/code&gt; に設定している場合、パッケージを使用するパッケージは &lt;code&gt;Package[&quot;package-name&quot;].ExportedVariableName&lt;/code&gt; を使用してエクスポートされた変数の値にアクセスする必要があります。。</target>
        </trans-unit>
        <trans-unit id="c37343fbc2a734ed5d2673a49ae41a53a7d7f024" translate="yes" xml:space="preserve">
          <source>Exporting</source>
          <target state="translated">Exporting</target>
        </trans-unit>
        <trans-unit id="41fc97a4300a245cdbff58066d70ad724c58fadc" translate="yes" xml:space="preserve">
          <source>External login services typically require registering and configuring your application before use. The easiest way to do this is with the &lt;a href=&quot;#accountsui&quot;&gt;&lt;code&gt;accounts-ui&lt;/code&gt; package&lt;/a&gt; which presents a step-by-step guide to configuring each service. However, the data can be also be entered manually in the &lt;code&gt;ServiceConfiguration.configurations&lt;/code&gt; collection, which is exported by the &lt;code&gt;service-configuration&lt;/code&gt; package.</source>
          <target state="translated">外部ログインサービスでは、通常、使用前にアプリケーションを登録して構成する必要があります。これを行う最も簡単な方法は、各サービスを構成するための段階的なガイドを提供する&lt;a href=&quot;#accountsui&quot;&gt; &lt;code&gt;accounts-ui&lt;/code&gt; パッケージ&lt;/a&gt;を使用することです。ただし、データは、 &lt;code&gt;ServiceConfiguration.configurations&lt;/code&gt; パッケージによってエクスポートされるServiceConfiguration.configurationsコレクションに手動で入力することも &lt;code&gt;service-configuration&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="0b9ce072e27032f45534f5801d0f467d6bd396ee" translate="yes" xml:space="preserve">
          <source>Extracting a specific property from an object:</source>
          <target state="translated">オブジェクトから特定のプロパティを抽出します。</target>
        </trans-unit>
        <trans-unit id="82da67b211249624f24f3c7db5642a5112c9446f" translate="yes" xml:space="preserve">
          <source>Facebook</source>
          <target state="translated">Facebook</target>
        </trans-unit>
        <trans-unit id="305d767720c94f8ec60ac0e8e05d1ec05d6cd057" translate="yes" xml:space="preserve">
          <source>Facebook with &lt;code&gt;accounts-facebook&lt;/code&gt;</source>
          <target state="translated">Facebookの &lt;code&gt;accounts-facebook&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ccd3256378a259f745b106874acb8eb5d3586370" translate="yes" xml:space="preserve">
          <source>Facebook, Google, and more</source>
          <target state="translated">フェイスブック、グーグルなど</target>
        </trans-unit>
        <trans-unit id="4b85b0a9c33d40b2e3908fc120f8cdcf3613d3de" translate="yes" xml:space="preserve">
          <source>Facebook: &lt;a href=&quot;http://developers.facebook.com/docs/authentication/permissions/&quot;&gt;http://developers.facebook.com/docs/authentication/permissions/&lt;/a&gt;</source>
          <target state="translated">Facebook：&lt;a href=&quot;http://developers.facebook.com/docs/authentication/permissions/&quot;&gt;http&lt;/a&gt; : //developers.facebook.com/docs/authentication/permissions/</target>
        </trans-unit>
        <trans-unit id="fb659df6b3ddd6d889d61a58767e837e74291b57" translate="yes" xml:space="preserve">
          <source>Fast prototyping with &lt;code&gt;accounts-ui&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;accounts-ui&lt;/code&gt; した高速プロトタイピング</target>
        </trans-unit>
        <trans-unit id="f3f09da6f23802b8d775f313cbe8c78977793ea8" translate="yes" xml:space="preserve">
          <source>Features in core Meteor</source>
          <target state="translated">コア流星の特徴</target>
        </trans-unit>
        <trans-unit id="b01ee8c8228364d240c04f0b37d721c88909865f" translate="yes" xml:space="preserve">
          <source>Fetch data from those subscriptions</source>
          <target state="translated">これらのサブスクリプションからデータをフェッチする</target>
        </trans-unit>
        <trans-unit id="f72e37fef6235224d97b3a255c42b2336a5bfcaf" translate="yes" xml:space="preserve">
          <source>Fetch global client-side state from stores such as the Router, Accounts, and your own stores</source>
          <target state="translated">ルータ、アカウント、独自のストアなどのストアからグローバルなクライアントサイドの状態を取得する</target>
        </trans-unit>
        <trans-unit id="f1c833fa6c8cd83f72dafb2f2c3a5387a60235c9" translate="yes" xml:space="preserve">
          <source>Fetch in helpers</source>
          <target state="translated">ヘルパーでの取得</target>
        </trans-unit>
        <trans-unit id="8aa30b46fc32377780fbb913a85b1a9de35e8fa0" translate="yes" xml:space="preserve">
          <source>Fetch the data from those subscriptions, and</source>
          <target state="translated">これらのサブスクリプションからデータをフェッチして</target>
        </trans-unit>
        <trans-unit id="7f010ba4cf279b8bbbfc559cedc8cccd600380b0" translate="yes" xml:space="preserve">
          <source>Fetch the data nearby where you subscribed to it</source>
          <target state="translated">購読した場所の近くのデータを取得する</target>
        </trans-unit>
        <trans-unit id="f841e4fe625e158df6b305e59b366460773baead" translate="yes" xml:space="preserve">
          <source>Fetching data</source>
          <target state="translated">データの取得</target>
        </trans-unit>
        <trans-unit id="f98ec139e428ca27cfbb1e77f6f876426f1ca919" translate="yes" xml:space="preserve">
          <source>Field Specifiers</source>
          <target state="translated">フィールド仕様</target>
        </trans-unit>
        <trans-unit id="18a19bb1f12b36ee797501cc072d5a887c9ed9eb" translate="yes" xml:space="preserve">
          <source>Field on the current data context</source>
          <target state="translated">現在のデータコンテキスト上のフィールド</target>
        </trans-unit>
        <trans-unit id="c268ca0e772d0f085a5b3e084c5154431864450a" translate="yes" xml:space="preserve">
          <source>Fields in the database should be camelCased just like your JavaScript variable names.</source>
          <target state="translated">データベース内のフィールドは、JavaScriptの変数名と同じようにキャメルケースにする必要があります。</target>
        </trans-unit>
        <trans-unit id="c75a31a175cab9aaaf9e0b59c42ce51db38fe210" translate="yes" xml:space="preserve">
          <source>File load order</source>
          <target state="translated">ファイルの読み込み順</target>
        </trans-unit>
        <trans-unit id="9aab41c369b66a38c7edcdbad5d791f674f181d9" translate="yes" xml:space="preserve">
          <source>File structure</source>
          <target state="translated">ファイル構造</target>
        </trans-unit>
        <trans-unit id="e22accc8e24dc418cec87bb510c82a4b6a5f90a4" translate="yes" xml:space="preserve">
          <source>Files are then loaded in alphabetical order of the entire path</source>
          <target state="translated">ファイルは、パス全体のアルファベット順にロードされます。</target>
        </trans-unit>
        <trans-unit id="b55b695b8f688fedabc08846e224512342117564" translate="yes" xml:space="preserve">
          <source>Files beginning with &lt;code&gt;main.&lt;/code&gt; are loaded &lt;strong&gt;last&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;main.&lt;/code&gt; 始まるファイル。&lt;strong&gt;最後に&lt;/strong&gt;読み込まれます&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4211a3e5987e1e9171faab6397528898f4bea488" translate="yes" xml:space="preserve">
          <source>Files inside &lt;strong&gt;any&lt;/strong&gt;&lt;code&gt;lib/&lt;/code&gt; directory are loaded next</source>
          <target state="translated">内部のファイル&lt;strong&gt;の任意&lt;/strong&gt; &lt;code&gt;lib/&lt;/code&gt; ディレクトリには、次のロードされます</target>
        </trans-unit>
        <trans-unit id="4930b392fc70ed7e0a9ff38302e0da516e082c3f" translate="yes" xml:space="preserve">
          <source>Files outside special directories</source>
          <target state="translated">特別なディレクトリ以外のファイル</target>
        </trans-unit>
        <trans-unit id="8a38f4447e9af696a57509a046dea0f070ea99d3" translate="yes" xml:space="preserve">
          <source>Files with deeper paths are loaded next</source>
          <target state="translated">より深いパスを持つファイルは次に読み込まれます</target>
        </trans-unit>
        <trans-unit id="9531b74bba56bcd9b0e032ee6d89149f8ce89bd7" translate="yes" xml:space="preserve">
          <source>Files, exports, and packages</source>
          <target state="translated">ファイル、エクスポート、パッケージ</target>
        </trans-unit>
        <trans-unit id="4fc1ab2e66cdced32fb377d38c449802917fde57" translate="yes" xml:space="preserve">
          <source>Files/directories whose names start with a dot, like &lt;code&gt;.meteor&lt;/code&gt; and &lt;code&gt;.git&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.meteor&lt;/code&gt; や &lt;code&gt;.git&lt;/code&gt; など、名前がドットで始まるファイル/ディレクトリ</target>
        </trans-unit>
        <trans-unit id="72300adf4985b12eaddb7bd400893dc7763e02e7" translate="yes" xml:space="preserve">
          <source>Finally, especially if you&amp;rsquo;re developing your own plugin, installing it from the local filesystem can be a convenient way to keep up with changes you make to plugin code. The downside of this is that Meteor will reinstall all plugins on every build however, so this could really slow things down. We do add local plugins with the &lt;code&gt;--link&lt;/code&gt; option however, so Cordova will try to install the plugin&amp;rsquo;s files using symlinks instead of copying them, which means changes to files will be reflected in the generated native project (e.g. an Xcode project) and may not require a rebuild.</source>
          <target state="translated">最後に、特に独自のプラグインを開発している場合、ローカルファイルシステムからプラグインをインストールすると、プラグインコードに加えた変更に対応するのに便利です。これの欠点は、Meteorがすべてのビルドですべてのプラグインを再インストールするため、実際に速度が低下する可能性があることです。ただし、 &lt;code&gt;--link&lt;/code&gt; オプションを使用してローカルプラグインを追加するため、Cordovaはプラグインのファイルをコピーする代わりにシンボリックリンクを使用してインストールしようとします。つまり、ファイルへの変更は生成されたネイティブプロジェクト（Xcodeプロジェクトなど）に反映され、再構築は必要ありません。</target>
        </trans-unit>
        <trans-unit id="00179a9a5b3a1f7b853c1eb78e9b69d7b5dde683" translate="yes" xml:space="preserve">
          <source>Finally, if you are inside a stub on the client and call another method, the other method is not executed (no RPC is generated, nothing &amp;ldquo;real&amp;rdquo; happens). If that other method has a stub, that stub stands in for the method and is executed. The method call&amp;rsquo;s return value is the return value of the stub function. The client has no problem executing a stub synchronously, and that is why it&amp;rsquo;s okay for the client to use the synchronous &lt;code&gt;Meteor.call&lt;/code&gt; form from inside a method body, as described earlier.</source>
          <target state="translated">最後に、クライアントのスタブ内で別のメソッドを呼び出した場合、他のメソッドは実行されません（RPCは生成されず、「実際の」ことは起こりません）。他のメソッドにスタブがある場合、そのスタブはメソッドの代わりに実行されます。メソッド呼び出しの戻り値は、スタブ関数の戻り値です。クライアントはスタブを同期的に実行することに問題はありません。そのため、前述のように、クライアントがメソッド本体の内部から同期 &lt;code&gt;Meteor.call&lt;/code&gt; フォームを使用しても問題ありません。</target>
        </trans-unit>
        <trans-unit id="dde21c894270fc06d06b51b5fa3147002c70f08a" translate="yes" xml:space="preserve">
          <source>Finally, it&amp;rsquo;s common to animate when the user switches between routes of the application. Especially on mobile, this adds a sense of navigation to the app via positioning pages relative to each other. This can be done in a similar way to animating things appearing and disappearing (after all one page is appearing and other is disappearing), but there are some tricks that are worth being aware of.</source>
          <target state="translated">最後に、ユーザーがアプリケーションのルートを切り替えるときにアニメーションを使用するのが一般的です。特にモバイルでは、これにより、ページを互いに相対的に配置することで、アプリにナビゲーションの感覚が追加されます。これは、現れたり消えたりするものをアニメーション化するのと同様の方法で実行できます（1つのページがすべて表示され、他のページが表示されなくなった後）。ただし、注意が必要なトリックがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="cff30e672f43bcc69f81119977805b5aa032acff" translate="yes" xml:space="preserve">
          <source>Finally, since this package is using the new &lt;code&gt;modules&lt;/code&gt; package, and the package &lt;code&gt;Npm.depends&lt;/code&gt; on the &amp;ldquo;moment&amp;rdquo; npm package, modules within the package can &lt;code&gt;import moment from 'moment'&lt;/code&gt; on both the client and the server. This is great news, because previous versions of Meteor allowed npm imports only on the server, via &lt;code&gt;Npm.require&lt;/code&gt;.</source>
          <target state="translated">最後に、このパッケージは新しい &lt;code&gt;modules&lt;/code&gt; パッケージを使用しており、パッケージ &lt;code&gt;Npm.depends&lt;/code&gt; 。は「モーメント」npmパッケージに依存しているため、パッケージ内のモジュールは、クライアントとサーバーの両方で &lt;code&gt;import moment from 'moment'&lt;/code&gt; できます。以前のバージョンのMeteorでは、 &lt;code&gt;Npm.require&lt;/code&gt; を介したサーバーでのnpmインポートのみが許可されていたため、これは素晴らしいニュースです。</target>
        </trans-unit>
        <trans-unit id="b57d061dc84919c05eade237b3b28715b566baa5" translate="yes" xml:space="preserve">
          <source>Find all elements matching &lt;code&gt;selector&lt;/code&gt; in this template instance, and return them as a JQuery object.</source>
          <target state="translated">このテンプレートインスタンスで &lt;code&gt;selector&lt;/code&gt; に一致するすべての要素を検索し、それらをJQueryオブジェクトとして返します。</target>
        </trans-unit>
        <trans-unit id="729ee83ff8d20957280f00fc30c989afe4117f1d" translate="yes" xml:space="preserve">
          <source>Find all elements matching &lt;code&gt;selector&lt;/code&gt; in this template instance.</source>
          <target state="translated">このテンプレートインスタンスで &lt;code&gt;selector&lt;/code&gt; に一致するすべての要素を検索します。</target>
        </trans-unit>
        <trans-unit id="bce4a04e3715f5eb99f2ace98649dab754465ac2" translate="yes" xml:space="preserve">
          <source>Find all of the documents that match &lt;code&gt;selector&lt;/code&gt; and delete them from the collection.</source>
          <target state="translated">&lt;code&gt;selector&lt;/code&gt; 一致するすべてのドキュメントを検索し、コレクションから削除します。</target>
        </trans-unit>
        <trans-unit id="818c7d9a04f185a2012b831a2a7b8532a39a8286" translate="yes" xml:space="preserve">
          <source>Find one element matching &lt;code&gt;selector&lt;/code&gt; in this template instance.</source>
          <target state="translated">このテンプレートインスタンスで、1つの要素に一致する &lt;code&gt;selector&lt;/code&gt; を見つけます。</target>
        </trans-unit>
        <trans-unit id="b1213749216cb52d4a2b88eeaaa015418dc1c0ca" translate="yes" xml:space="preserve">
          <source>Find the documents in a collection that match the selector.</source>
          <target state="translated">セレクタに一致するコレクション内のドキュメントを検索します。</target>
        </trans-unit>
        <trans-unit id="aa76ad935c466ebfdbc18a706039bfb7536913f9" translate="yes" xml:space="preserve">
          <source>Finds the first document that matches the selector, as ordered by sort and skip options. Returns &lt;code&gt;undefined&lt;/code&gt; if no matching document is found.</source>
          <target state="translated">セレクターに一致する最初のドキュメントを検索します。一致するドキュメントが見つから &lt;code&gt;undefined&lt;/code&gt; 場合は、undefinedを返します。</target>
        </trans-unit>
        <trans-unit id="65b9aeba6d9832b7ad62bd1e6f9697461fca5f9f" translate="yes" xml:space="preserve">
          <source>Finds the user with the specified email. First tries to match email case sensitively; if that fails, it tries case insensitively; but if more than one user matches the case insensitive search, it returns null.</source>
          <target state="translated">指定されたメールアドレスを持つユーザを検索します。失敗した場合は、大文字小文字を区別せずに検索しますが、複数のユーザが大文字小文字を区別しない検索にマッチした場合は null を返します。</target>
        </trans-unit>
        <trans-unit id="8d512f2eed7cd9d2283b97b779c29bfaee4591b7" translate="yes" xml:space="preserve">
          <source>Finds the user with the specified username. First tries to match username case sensitively; if that fails, it tries case insensitively; but if more than one user matches the case insensitive search, it returns null.</source>
          <target state="translated">指定したユーザ名でユーザを検索します。失敗した場合は大文字小文字を区別せずに検索しますが、複数のユーザが大文字小文字を区別せずに検索にマッチした場合は null を返します。</target>
        </trans-unit>
        <trans-unit id="e58530e68ffe338c0e469a9a86011febec0c90ca" translate="yes" xml:space="preserve">
          <source>First, add the &lt;code&gt;service-configuration&lt;/code&gt; package:</source>
          <target state="translated">まず、 &lt;code&gt;service-configuration&lt;/code&gt; パッケージを追加します。</target>
        </trans-unit>
        <trans-unit id="25c27844ac3b9eaa4e6f8967d18f4d311537a823" translate="yes" xml:space="preserve">
          <source>First, add the service configuration package:</source>
          <target state="translated">まず、サービス構成パッケージを追加します。</target>
        </trans-unit>
        <trans-unit id="dfa1860bf8f5f99d6eb337acf640f11cf20a86fc" translate="yes" xml:space="preserve">
          <source>First, figure out which template you want to replace by looking at the source code of the package. For example, in the &lt;code&gt;useraccounts:unstyled&lt;/code&gt; package, the templates are listed &lt;a href=&quot;https://github.com/meteor-useraccounts/unstyled/tree/master/lib&quot;&gt;in this directory on GitHub&lt;/a&gt;. By squinting at the file names and looking for some of the HTML strings, we can figure out that we might be interested in replacing the &lt;code&gt;atPwdFormBtn&lt;/code&gt; template. Let&amp;rsquo;s take a look at the original template:</source>
          <target state="translated">まず、パッケージのソースコードを見て、どのテンプレートを置き換えるかを判断します。たとえば、 &lt;code&gt;useraccounts:unstyled&lt;/code&gt; パッケージでは、テンプレートは&lt;a href=&quot;https://github.com/meteor-useraccounts/unstyled/tree/master/lib&quot;&gt;GitHubのこのディレクトリに&lt;/a&gt;リストされています。ファイル名に目を細めてHTML文字列の一部を探すことで、 &lt;code&gt;atPwdFormBtn&lt;/code&gt; テンプレートの置き換えに興味があるかもしれません。元のテンプレートを見てみましょう：</target>
        </trans-unit>
        <trans-unit id="782c6f0c6fc5c09720bad4a4119c4a995a4d47bc" translate="yes" xml:space="preserve">
          <source>First, we need to configure the layout we want to use when rendering the accounts templates:</source>
          <target state="translated">まず、アカウントテンプレートをレンダリングする際に使用するレイアウトを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="e5b61b65b9e4cbf23b57be970df77724c1af53a2" translate="yes" xml:space="preserve">
          <source>First, you can &lt;code&gt;export&lt;/code&gt; any named declaration on the same line where it was declared:</source>
          <target state="translated">まず、宣言された同じ行の名前付き宣言を &lt;code&gt;export&lt;/code&gt; できます。</target>
        </trans-unit>
        <trans-unit id="eef31c8fb3cd90a9aab1d23453021b737b806a81" translate="yes" xml:space="preserve">
          <source>First, you need to create a &lt;em&gt;local collection&lt;/em&gt; - this is a collection that exists only on the client side and is not tied to a database collection on the server. Read more in the &lt;a href=&quot;http://guide.meteor.com/collections.html#local-collections&quot;&gt;Collections article&lt;/a&gt;.</source>
          <target state="translated">まず、&lt;em&gt;ローカルコレクション&lt;/em&gt;を作成する必要があります。これは、クライアント側にのみ存在し、サーバー上のデータベースコレクションに関連付けられていないコレクションです。詳しくは、&lt;a href=&quot;http://guide.meteor.com/collections.html#local-collections&quot;&gt;コレクションの記事&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="b0b89bea06c06c8de821418889983af218d5b7be" translate="yes" xml:space="preserve">
          <source>First, you&amp;rsquo;ll need to request the relevant permissions when logging in the user. See the &lt;a href=&quot;#oauth-configuration&quot;&gt;section above&lt;/a&gt; for how to pass those options.</source>
          <target state="translated">まず、ユーザーにログインするときに関連する権限をリクエストする必要があります。これらのオプションを渡す方法については、&lt;a href=&quot;#oauth-configuration&quot;&gt;上記&lt;/a&gt;のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="b003b5beb77c5a51911b890c1a37d2bca99905e4" translate="yes" xml:space="preserve">
          <source>Fix any bugs found in step 2. and repeat.</source>
          <target state="translated">ステップ2で見つかったバグを修正します。</target>
        </trans-unit>
        <trans-unit id="400ca378a2cc34610e19295643d049d1b97a10a1" translate="yes" xml:space="preserve">
          <source>Flow Router</source>
          <target state="translated">フロールータ</target>
        </trans-unit>
        <trans-unit id="f7d0b0a63adac13483308d142df49c44aea5f3b5" translate="yes" xml:space="preserve">
          <source>Flow Router Extra</source>
          <target state="translated">フロールーターエクストラ</target>
        </trans-unit>
        <trans-unit id="4d809cb7e8e32ca86df6f2ccab008dd8bce5235c" translate="yes" xml:space="preserve">
          <source>Flow Router is a community routing package for Meteor.</source>
          <target state="translated">Flow RouterはMeteor用のコミュニティルーティングパッケージです。</target>
        </trans-unit>
        <trans-unit id="9e962a78f26ba2cf49ccee370d69fa6dc08a25e1" translate="yes" xml:space="preserve">
          <source>Follow a JavaScript style guide</source>
          <target state="translated">JavaScriptのスタイルガイドに従う</target>
        </trans-unit>
        <trans-unit id="2667cd7d059d2631b0f7ae3865916c80b3a515cb" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;https://guide.meteor.com/using-packages.html&quot;&gt;Atmosphere packages&lt;/a&gt;, as the older pre-1.3 &lt;code&gt;api.export&lt;/code&gt; syntax allowed more than one export per package, you&amp;rsquo;ll tend to see non-default exports used for symbols. For instance:</source>
          <target state="translated">以下のために&lt;a href=&quot;https://guide.meteor.com/using-packages.html&quot;&gt;大気パッケージ&lt;/a&gt;の古い事前1.3として、 &lt;code&gt;api.export&lt;/code&gt; の構文は、パッケージごとに複数のエクスポートを許可され、あなたはシンボルのために使用される非デフォルトの輸出を見る傾向があるでしょう。例えば：</target>
        </trans-unit>
        <trans-unit id="b35aa049fcc915835fd6aeeb29b631fb3bed7168" translate="yes" xml:space="preserve">
          <source>For Android, launch screen images should be special &quot;Nine-patch&quot; image files that specify how they should be stretched. See the &lt;a href=&quot;https://developer.android.com/guide/topics/graphics/2d-graphics.html#nine-patch&quot;&gt;Android docs&lt;/a&gt;.</source>
          <target state="translated">Androidの場合、起動画面の画像は、ストレッチ方法を指定する特別な「9パッチ」画像ファイルにする必要があります。&lt;a href=&quot;https://developer.android.com/guide/topics/graphics/2d-graphics.html#nine-patch&quot;&gt;Androidのドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="6e3e13018b30997708a71b1a620d710323a4ae08" translate="yes" xml:space="preserve">
          <source>For Meteor, we recommend using a CDN with &amp;ldquo;origin&amp;rdquo; support (like &lt;a href=&quot;http://joshowens.me/using-a-cdn-with-your-production-meteor-app/&quot;&gt;CloudFront&lt;/a&gt;), which means that instead of uploading your files in advance, the CDN automatically fetches them from your server. You put your files in &lt;code&gt;public/&lt;/code&gt; (in this case &lt;code&gt;public/cats.gif&lt;/code&gt;), and when your Australian user asks the CDN for &lt;code&gt;http://mycdn.com/cats.gif&lt;/code&gt;, the CDN, behind the scenes, fetches &lt;code&gt;http://myapp.com/cats.gif&lt;/code&gt; and then delivers it to the user. While this is slightly slower than getting &lt;code&gt;http://myapp.com/cats.gif&lt;/code&gt; directly, it only happens one time, because the CDN saves the file, and all subsequent Australians who ask for the file get it quickly.</source>
          <target state="translated">Meteorの場合、「&lt;a href=&quot;http://joshowens.me/using-a-cdn-with-your-production-meteor-app/&quot;&gt;CloudFront&lt;/a&gt;」などの「origin」サポートのあるCDNを使用することをお勧めします。つまり、事前にファイルをアップロードする代わりに、CDNがサーバーから自動的にファイルをフェッチします。ファイルを &lt;code&gt;public/&lt;/code&gt; （この場合は &lt;code&gt;public/cats.gif&lt;/code&gt; ）に配置し、オーストラリアのユーザーがCDNに &lt;code&gt;http://mycdn.com/cats.gif&lt;/code&gt; (CDN）を背後で要求すると、 &lt;code&gt;http://myapp.com/cats.gif&lt;/code&gt; フェッチします。 /myapp.com/cats.gifその後、それをユーザーに配信します。これは &lt;code&gt;http://myapp.com/cats.gif&lt;/code&gt; を直接取得するよりもわずかに遅くなりますが、CDNがファイルを保存し、後続のすべてのオーストラリア人がファイルをすばやく取得するため、1回だけ発生します。</target>
        </trans-unit>
        <trans-unit id="6ba9007be8c5e94046dcbd42244c759a90eb82b7" translate="yes" xml:space="preserve">
          <source>For React-based apps, the &lt;a href=&quot;https://atmospherejs.com/universe/i18n&quot;&gt;&lt;code&gt;universe:18n&lt;/code&gt; package&lt;/a&gt; presents an alternative solution to &lt;code&gt;tap:i18n&lt;/code&gt;. &lt;code&gt;universe:i18n&lt;/code&gt; adopts similar conventions to &lt;code&gt;tap:i18n&lt;/code&gt;, but also includes a convenient drop-in React component and omits &lt;code&gt;tap:i18n's&lt;/code&gt; dependencies on Meteor&amp;rsquo;s &lt;code&gt;templating&lt;/code&gt; and &lt;code&gt;jquery&lt;/code&gt; packages. &lt;code&gt;universe:i18n&lt;/code&gt; was intended for Meteor React applications using &lt;code&gt;ES2015&lt;/code&gt; modules, but it can be used without React or modules.</source>
          <target state="translated">Reactベースのアプリの場合、&lt;a href=&quot;https://atmospherejs.com/universe/i18n&quot;&gt; &lt;code&gt;universe:18n&lt;/code&gt; パッケージ&lt;/a&gt;は &lt;code&gt;tap:i18n&lt;/code&gt; の代替ソリューションを提供します。 &lt;code&gt;universe:i18n&lt;/code&gt; は &lt;code&gt;tap:i18n&lt;/code&gt; と同様の規則を採用していますが、便利なドロップインReactコンポーネントも含まれており、Meteorの &lt;code&gt;templating&lt;/code&gt; および &lt;code&gt;jquery&lt;/code&gt; パッケージに対する &lt;code&gt;tap:i18n's&lt;/code&gt; 依存関係を省略しています。 &lt;code&gt;universe:i18n&lt;/code&gt; は、 &lt;code&gt;ES2015&lt;/code&gt; モジュールを使用するMeteor Reactアプリケーションを対象としていますが、Reactまたはモジュールなしでも使用できます。</target>
        </trans-unit>
        <trans-unit id="45b297efb8a20bbe269b6486daea5c1cc0f1f3c0" translate="yes" xml:space="preserve">
          <source>For Views created by invoking templates, returns the &lt;a href=&quot;templates#Template-instances&quot;&gt;template instance&lt;/a&gt; object for this particular View. For example, in a &lt;a href=&quot;templates#Template-onCreated&quot;&gt;&lt;code&gt;created&lt;/code&gt;&lt;/a&gt; callback, &lt;code&gt;this.view.templateInstance() === this&lt;/code&gt;.</source>
          <target state="translated">テンプレートの呼び出しによって作成されたビューの場合、この特定のビューの&lt;a href=&quot;templates#Template-instances&quot;&gt;テンプレートインスタンス&lt;/a&gt;オブジェクトを返します。たとえば、&lt;a href=&quot;templates#Template-onCreated&quot;&gt; &lt;code&gt;created&lt;/code&gt; &lt;/a&gt;コールバックでは、 &lt;code&gt;this.view.templateInstance() === this&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3b9602ab0f2eed549af6ce92bb50a31dfad68229" translate="yes" xml:space="preserve">
          <source>For Views created by invoking templates, the original Template object. For example, &lt;code&gt;Blaze.render(Template.foo).template === Template.foo&lt;/code&gt;.</source>
          <target state="translated">テンプレートの呼び出しによって作成されたビューの場合、元のテンプレートオブジェクト。たとえば、 &lt;code&gt;Blaze.render(Template.foo).template === Template.foo&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5b39025aef99aad05f2736347165bcf5032e3a91" translate="yes" xml:space="preserve">
          <source>For all your files in &lt;code&gt;public/&lt;/code&gt;, change their URLs to point at the CDN. You can use a helper like &lt;code&gt;assetUrl&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;public/&lt;/code&gt; 内のすべてのファイルについて、CDNを指すようにURLを変更します。 &lt;code&gt;assetUrl&lt;/code&gt; などのヘルパーを使用できます。</target>
        </trans-unit>
        <trans-unit id="b8452546992174d3c1bfc7307b3febe9a6cf8999" translate="yes" xml:space="preserve">
          <source>For apps, this is as easy as &lt;code&gt;meteor add modules&lt;/code&gt;, or (even better) &lt;code&gt;meteor add ecmascript&lt;/code&gt;, since the &lt;code&gt;ecmascript&lt;/code&gt; package &lt;em&gt;implies&lt;/em&gt; the &lt;code&gt;modules&lt;/code&gt; package.</source>
          <target state="translated">アプリの場合、これは &lt;code&gt;meteor add modules&lt;/code&gt; または（さらに優れた） &lt;code&gt;meteor add ecmascript&lt;/code&gt; と同じくらい簡単です。これは、 &lt;code&gt;ecmascript&lt;/code&gt; パッケージ&lt;em&gt;が&lt;/em&gt; &lt;code&gt;modules&lt;/code&gt; パッケージを&lt;em&gt;意味する&lt;/em&gt;ためです。</target>
        </trans-unit>
        <trans-unit id="0455a3b3e41b1c093be793af12deae4408af6c90" translate="yes" xml:space="preserve">
          <source>For backwards compatibility Meteor 1.3 still provides Meteor&amp;rsquo;s global namespacing for the Meteor core package as well as for other Meteor packages you include in your application. You can also still directly call functions such as &lt;a href=&quot;http://docs.meteor.com/#/full/meteor_publish&quot;&gt;&lt;code&gt;Meteor.publish&lt;/code&gt;&lt;/a&gt;, as in previous versions of Meteor, without first importing them. However, it is recommended best practice that you first load all the Meteor &amp;ldquo;pseudo-globals&amp;rdquo; using the &lt;code&gt;import { Name } from 'meteor/package'&lt;/code&gt; syntax before using them. For instance:</source>
          <target state="translated">下位互換性のために、Meteor 1.3は引き続き、Meteorコアパッケージおよびアプリケーションに含める他のMeteorパッケージに対してMeteorのグローバルネームスペースを提供します。以前のバージョンのMeteorと同様に、最初にインポートすることなく、&lt;a href=&quot;http://docs.meteor.com/#/full/meteor_publish&quot;&gt; &lt;code&gt;Meteor.publish&lt;/code&gt; &lt;/a&gt;などの関数を直接呼び出すこともできます。ただし、使用する前に、最初にすべてのMeteorの「疑似グローバル」を &lt;code&gt;import { Name } from 'meteor/package'&lt;/code&gt; 構文からimport {Name}を使用してロードすることをお勧めします。例えば：</target>
        </trans-unit>
        <trans-unit id="0c19096759c939c2deb59c4543acfc1ddfaa6521" translate="yes" xml:space="preserve">
          <source>For backwards compatibility with Meteor 1.2 and early releases, Meteor by default makes available directly to your app all symbols referenced in &lt;code&gt;api.export&lt;/code&gt; in any packages you have installed. However, it is recommended that you import these symbols first before using them.</source>
          <target state="translated">Meteor 1.2および初期リリースとの下位互換性のために、Meteorはデフォルトで、インストールしたパッケージの &lt;code&gt;api.export&lt;/code&gt; で参照されるすべてのシンボルをアプリで直接利用できるようにします。ただし、これらのシンボルを使用する前に、最初にインポートすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="b5efa68bab8287fb1652bd06f0ec969985d6c7cc" translate="yes" xml:space="preserve">
          <source>For certain applications, for example pagination, you&amp;rsquo;ll want to pass options into the publication to control things like how many documents should be sent to the client. There are some extra considerations to keep in mind for this particular case.</source>
          <target state="translated">特定のアプリケーション（ページネーションなど）では、クライアントに送信するドキュメントの数などを制御するために、パブリケーションにオプションを渡す必要があります。この特定のケースでは、留意すべき追加の考慮事項がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="fd1f0a999e8851f6dd247302510ac5f7acc2f7b2" translate="yes" xml:space="preserve">
          <source>For code that runs on the client, the global &lt;code&gt;Meteor.userId()&lt;/code&gt; reactive function will give you the ID of the currently logged in user.</source>
          <target state="translated">クライアントで実行されるコードの場合、グローバルな &lt;code&gt;Meteor.userId()&lt;/code&gt; 反応関数により、現在ログインしているユーザーのIDが提供されます。</target>
        </trans-unit>
        <trans-unit id="e8941c82fe7784348b0df1ef942bf02807f9865b" translate="yes" xml:space="preserve">
          <source>For detailed information about all of the features Flow Router Extra has to offer, refer to the &lt;a href=&quot;https://github.com/VeliovGroup/flow-router#flowrouter-extra&quot;&gt;Flow Router Extra Documentation&lt;/a&gt;.</source>
          <target state="translated">Flow Router Extraが提供するすべての機能の詳細については、&lt;a href=&quot;https://github.com/VeliovGroup/flow-router#flowrouter-extra&quot;&gt;Flow Router Extraのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="05da61fff1234ddd48184a281bf97f7dafdfe3fe" translate="yes" xml:space="preserve">
          <source>For detailed information about all of the features Flow Router has to offer, refer to the &lt;a href=&quot;https://kadira.io/academy/meteor-routing-guide&quot;&gt;Kadira Meteor routing guide&lt;/a&gt;.</source>
          <target state="translated">Flow Routerが提供するすべての機能の詳細については、&lt;a href=&quot;https://kadira.io/academy/meteor-routing-guide&quot;&gt;Kadira Meteorルーティングガイドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ca5a0d6ac3719d1483547ba26235567c8f6cf689" translate="yes" xml:space="preserve">
          <source>For detailed information about all of the features Iron Router has to offer, refer to the &lt;a href=&quot;https://iron-meteor.github.io/iron-router/&quot;&gt;Iron Router Guide&lt;/a&gt;</source>
          <target state="translated">Iron Routerが提供するすべての機能の詳細については、&lt;a href=&quot;https://iron-meteor.github.io/iron-router/&quot;&gt;Iron Router Guideを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="48c669636c4bc4c437e7e40d53dc912f4797d4f7" translate="yes" xml:space="preserve">
          <source>For each module defined above, it makes sense to co-locate the various auxiliary files with the base JavaScript file. For instance, a Blaze UI component should have its template HTML, JavaScript logic, and CSS rules in the same directory. A JavaScript module with some business logic should be co-located with the unit tests for that module.</source>
          <target state="translated">上記で定義した各モジュールについては、様々な補助ファイルをベースのJavaScriptファイルと一緒に配置するのが理にかなっています。例えば、Blaze UIコンポーネントは、テンプレートのHTML、JavaScriptロジック、CSSルールを同じディレクトリに配置する必要があります。ビジネスロジックを持つJavaScriptモジュールは、そのモジュールのユニットテストと一緒に配置します。</target>
        </trans-unit>
        <trans-unit id="b0136e3434ebe2b4441e7e72b6fcef31a6a55e8b" translate="yes" xml:space="preserve">
          <source>For example in &lt;code&gt;app-not-found.html&lt;/code&gt;:</source>
          <target state="translated">たとえば &lt;code&gt;app-not-found.html&lt;/code&gt; の場合：</target>
        </trans-unit>
        <trans-unit id="3d799858ea313a6fb12f6f4a730014fa1744fcb4" translate="yes" xml:space="preserve">
          <source>For example this Cordova whitelist syntax:</source>
          <target state="translated">例えば、このCordovaのホワイトリストの構文。</target>
        </trans-unit>
        <trans-unit id="9fd0d45557850239a1954273258a5128e8a2a4b5" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;#accountsui&quot;&gt;the &lt;code&gt;accounts-ui&lt;/code&gt; package&lt;/a&gt; uses this to display an animation while the login request is being processed.</source>
          <target state="translated">たとえば&lt;a href=&quot;#accountsui&quot;&gt;、 &lt;code&gt;accounts-ui&lt;/code&gt; パッケージ&lt;/a&gt;は、これを使用して、ログインリクエストの処理中にアニメーションを表示します。</target>
        </trans-unit>
        <trans-unit id="e87873f2da987898fc0ffeef06ad69f2df128cd5" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;Template.parentData(0)&lt;/code&gt; is equivalent to &lt;code&gt;Template.currentData()&lt;/code&gt;. &lt;code&gt;Template.parentData(2)&lt;/code&gt; is equivalent to &lt;code&gt;{{../..}}&lt;/code&gt; in a template.</source>
          <target state="translated">例えば、 &lt;code&gt;Template.parentData(0)&lt;/code&gt; と等価である &lt;code&gt;Template.currentData()&lt;/code&gt; 。 &lt;code&gt;Template.parentData(2)&lt;/code&gt; は、テンプレートの &lt;code&gt;{{../..}}&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="8640c408975d4966324d1f32b8f59e23a781fc35" translate="yes" xml:space="preserve">
          <source>For example, executing &lt;code&gt;meteor node&lt;/code&gt; will enter the Node.js &lt;a href=&quot;https://nodejs.org/dist/latest-v4.x/docs/api/repl.html&quot;&gt;Read-Eval-Print-Loop (REPL)&lt;/a&gt; interface and allow you to interactively run JavaScript and see the results.</source>
          <target state="translated">たとえば、 &lt;code&gt;meteor node&lt;/code&gt; を実行すると、Node.jsの&lt;a href=&quot;https://nodejs.org/dist/latest-v4.x/docs/api/repl.html&quot;&gt;Read-Eval-Print-Loop（REPL）&lt;/a&gt;インターフェースに入り、インタラクティブにJavaScriptを実行して結果を確認できます。</target>
        </trans-unit>
        <trans-unit id="566dc7e4713926cae90867a37306dc5eacff8228" translate="yes" xml:space="preserve">
          <source>For example, executing &lt;code&gt;meteor npm install lodash --save&lt;/code&gt; would install &lt;code&gt;lodash&lt;/code&gt; from npm to your &lt;code&gt;node_modules&lt;/code&gt; directory and save its usage in your &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt; file.</source>
          <target state="translated">たとえば、 &lt;code&gt;meteor npm install lodash --save&lt;/code&gt; を実行すると、 &lt;code&gt;lodash&lt;/code&gt; がnpmから &lt;code&gt;node_modules&lt;/code&gt; ディレクトリにインストールされ、その使用状況が&lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt; &lt;code&gt;package.json&lt;/code&gt; &lt;/a&gt;ファイルに保存されます。</target>
        </trans-unit>
        <trans-unit id="9fa29970e497049df665d7fa4ef565c0f68a2476" translate="yes" xml:space="preserve">
          <source>For example, here we prepare our Android and iOS hardware permissions for a WebRTC session.</source>
          <target state="translated">例えば、ここでは WebRTC セッション用に Android と iOS のハードウェアパーミッションを準備します。</target>
        </trans-unit>
        <trans-unit id="b86ffe152961696e9821eee492ea8cec835596cf" translate="yes" xml:space="preserve">
          <source>For example, if a component requires a lot of complicated &lt;a href=&quot;http://d3js.org&quot;&gt;D3&lt;/a&gt; code for drawing graphs, it&amp;rsquo;s likely that that code itself could live in a separate module that&amp;rsquo;s called by the component. That makes it easier to abstract the code later and share it between various components that need to all draw graphs.</source>
          <target state="translated">たとえば、コンポーネントがグラフを描画するために多くの複雑な&lt;a href=&quot;http://d3js.org&quot;&gt;D3&lt;/a&gt;コードを必要とする場合、そのコード自体が、コンポーネントによって呼び出される別のモジュールに存在する可能性があります。これにより、後でコードを抽象化して、すべてのグラフを描画する必要があるさまざまなコンポーネント間でコードを共有しやすくなります。</target>
        </trans-unit>
        <trans-unit id="a77adffe34fcc02bce31edfd361bac24fa81f5f5" translate="yes" xml:space="preserve">
          <source>For example, if there is a template named &amp;ldquo;foo&amp;rdquo;, &lt;code&gt;{{&amp;gt; Template.dynamic
template=&quot;foo&quot;}}&lt;/code&gt; is equivalent to &lt;code&gt;{{&amp;gt; foo}}&lt;/code&gt; and &lt;code&gt;{{#Template.dynamic template=&quot;foo&quot;}} ... {{/Template.dynamic}}&lt;/code&gt; is equivalent to &lt;code&gt;{{#foo}} ... {{/foo}}&lt;/code&gt;.</source>
          <target state="translated">たとえば、「foo」という名前のテンプレートがある場合、 &lt;code&gt;{{&amp;gt; Template.dynamic template=&quot;foo&quot;}}&lt;/code&gt; は &lt;code&gt;{{&amp;gt; foo}}&lt;/code&gt; および &lt;code&gt;{{#Template.dynamic template=&quot;foo&quot;}} ... {{/Template.dynamic}}&lt;/code&gt; と同等です。 .. {{/Template.dynamic}}は &lt;code&gt;{{#foo}} ... {{/foo}}&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="86cf62ff62bc1d631a9379c79b98bc20c22267e7" translate="yes" xml:space="preserve">
          <source>For example, in Galaxy, while you wait for your app&amp;rsquo;s log to load, you see a loading state indicating what you might see:</source>
          <target state="translated">たとえば、Galaxyでは、アプリのログが読み込まれるのを待っている間、表示される可能性があることを示す読み込み状態が表示されます。</target>
        </trans-unit>
        <trans-unit id="3cb93cc9fbc0bc78a05e8172f5fd6a76ee0217c6" translate="yes" xml:space="preserve">
          <source>For example, in the Todos example app, we have a &lt;code&gt;ListPage&lt;/code&gt; component, which renders list metadata and the tasks in the list. In order to do so, it needs to &lt;a href=&quot;data-loading#subscriptions&quot;&gt;subscribe&lt;/a&gt; to the &lt;code&gt;todos.inList&lt;/code&gt; publication, check that subscription&amp;rsquo;s readiness, then fetch the list of todos from the &lt;code&gt;Todos&lt;/code&gt; collection.</source>
          <target state="translated">たとえば、Todosサンプルアプリには、リストメタデータとリスト内のタスクをレンダリングする &lt;code&gt;ListPage&lt;/code&gt; コンポーネントがあります。そのためには、 &lt;code&gt;todos.inList&lt;/code&gt; パブリケーションを&lt;a href=&quot;data-loading#subscriptions&quot;&gt;サブスクライブ&lt;/a&gt;し、そのサブスクリプションの準備ができていることを確認してから、 &lt;code&gt;Todos&lt;/code&gt; コレクションからToDoのリストをフェッチする必要があります。</target>
        </trans-unit>
        <trans-unit id="eef59f3ea5c85e68491a742c6d4c70537b40a9de" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s say packages A and B both depend on version 1.1.0 of package X. If a new version of A depends on X@2.0.0, but there is no new version of package B, running &lt;code&gt;meteor update&lt;/code&gt; will not update A, because doing so will break package B.</source>
          <target state="translated">たとえば、パッケージAとBの両方がパッケージXのバージョン1.1.0に依存しているとします。Aの新しいバージョンがX@2.0.0に依存しているが、パッケージBの新しいバージョンがない場合、 &lt;code&gt;meteor update&lt;/code&gt; を実行しても更新されませんA、これを行うとパッケージBが破損します。</target>
        </trans-unit>
        <trans-unit id="5ee1889df2b5586f8f2338c6e8a85c7f8b4855bb" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s say you published name:cool-binary-blob from a Mac. If you want people to be able to use cool-binary-blob from Linux, you should log into a Linux machine and then run &lt;code&gt;meteor publish-for-arch name:cool-binary-blob@version&lt;/code&gt;. It will notice that you are on a linux machine, and that there is no Linux-compatible build for your package and publish one.</source>
          <target state="translated">たとえば、Macからname：cool-binary-blobを公開したとします。Linuxからcool-binary-blobを使用できるようにしたい場合は、Linuxマシンにログインして、 &lt;code&gt;meteor publish-for-arch name:cool-binary-blob@version&lt;/code&gt; 実行する必要があります。Linuxマシンを使用していて、パッケージにLinux互換のビルドがないこと、およびビルドを公開していることがわかります。</target>
        </trans-unit>
        <trans-unit id="62a5b111a9dfaff38a5ba5283dc2e59ec51fad50" translate="yes" xml:space="preserve">
          <source>For example, the &lt;code&gt;toJSONValue&lt;/code&gt; method for &lt;a href=&quot;#mongo_object_id&quot;&gt;&lt;code&gt;Mongo.ObjectID&lt;/code&gt;&lt;/a&gt; could be:</source>
          <target state="translated">たとえば、 &lt;code&gt;toJSONValue&lt;/code&gt; メソッドは&lt;a href=&quot;#mongo_object_id&quot;&gt; &lt;code&gt;Mongo.ObjectID&lt;/code&gt; &lt;/a&gt;ようになります。</target>
        </trans-unit>
        <trans-unit id="c10ae88355a18b76c1551618fb9cf80d78810409" translate="yes" xml:space="preserve">
          <source>For example, the files above are arranged in the correct load order. &lt;code&gt;main.html&lt;/code&gt; is loaded second because HTML templates are always loaded first, even if it begins with &lt;code&gt;main.&lt;/code&gt;, since rule 1 has priority over rule 2. However, it will be loaded after &lt;code&gt;nav.html&lt;/code&gt; because rule 2 has priority over rule 5.</source>
          <target state="translated">たとえば、上記のファイルは正しいロード順序で配置されています。 &lt;code&gt;main.html&lt;/code&gt; で始まっていても、HTMLテンプレートが最初に読み込まれるため、main.htmlが2番目に読み込まれます &lt;code&gt;main.&lt;/code&gt; 、ルール1はルール2よりも優先されます。ただし、ルール2がルール5よりも優先されるため、 &lt;code&gt;nav.html&lt;/code&gt; の後にロードされます。</target>
        </trans-unit>
        <trans-unit id="e4dd27f05c4753c540bb1f7d7ef347987bb67fdb" translate="yes" xml:space="preserve">
          <source>For example, to use the excellent &lt;a href=&quot;http://griddlegriddle.github.io/Griddle/&quot;&gt;Griddle&lt;/a&gt; React package for making tables, you could run</source>
          <target state="translated">たとえば、テーブルを作成するために優れた&lt;a href=&quot;http://griddlegriddle.github.io/Griddle/&quot;&gt;Griddle&lt;/a&gt; Reactパッケージを使用するには、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="6d635e55db8455e0b072cb8bc6954e7477d2016d" translate="yes" xml:space="preserve">
          <source>For example, when called in a user&amp;rsquo;s browser, connections in that browser remain logged in, but any other browsers or DDP clients logged in as that user will be logged out.</source>
          <target state="translated">たとえば、ユーザーのブラウザーで呼び出された場合、そのブラウザーでの接続はログインしたままですが、そのユーザーとしてログインしている他のブラウザーまたはDDPクライアントはログアウトされます。</target>
        </trans-unit>
        <trans-unit id="3805566eeb73c4d01f62aefc9f499b8715f3648e" translate="yes" xml:space="preserve">
          <source>For example, you can monitor a cursor (which is a reactive data source) and aggregate it into a session variable:</source>
          <target state="translated">例えば、カーソル(これは反応性のあるデータソースです)を監視して、それをセッション変数に集約することができます。</target>
        </trans-unit>
        <trans-unit id="080a2498acd408c847cae567c97b97c7238bb2d4" translate="yes" xml:space="preserve">
          <source>For example, you could write a publication, then later add a secret field to the published collection. Now, the publication would be sending that secret to the client. If you filter the fields on every publication when you first write it, then adding another field won&amp;rsquo;t automatically publish it.</source>
          <target state="translated">たとえば、パブリケーションを作成し、後で公開されたコレクションにシークレットフィールドを追加できます。これで、パブリケーションはそのシークレットをクライアントに送信します。最初に書き込むときにすべてのパブリケーションのフィールドをフィルターに掛けると、別のフィールドを追加しても自動的にパブリッシュされません。</target>
        </trans-unit>
        <trans-unit id="85a17a9ab408b80980f23d1cc6e06e21d531d614" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;meteor run --port 4000&lt;/code&gt; will run the development server on &lt;code&gt;http://localhost:4000&lt;/code&gt; and the development MongoDB instance on &lt;code&gt;mongodb://localhost:4001&lt;/code&gt;.</source>
          <target state="translated">例： &lt;code&gt;meteor run --port 4000&lt;/code&gt; は、 &lt;code&gt;http://localhost:4000&lt;/code&gt; で開発サーバーを実行し、 &lt;code&gt;mongodb://localhost:4001&lt;/code&gt; で開発MongoDBインスタンスを実行します。</target>
        </trans-unit>
        <trans-unit id="78e6fd4a067693e270265f9ad03e373bb4f449a1" translate="yes" xml:space="preserve">
          <source>For further assistance, consult the documentation for the option you select.</source>
          <target state="translated">詳細については、選択したオプションのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="48807e2ffbc6e66cb853587acc8401737dab4f55" translate="yes" xml:space="preserve">
          <source>For iOS, you can also refer to the &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html&quot;&gt;Icon and image sizes&lt;/a&gt; in the iOS Human Interface Guidelines for more information about the way these different sizes are used.</source>
          <target state="translated">iOSの場合、これらのさまざまなサイズの使用方法の詳細については、iOSヒューマンインターフェイスガイドラインの&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html&quot;&gt;アイコンと画像のサイズ&lt;/a&gt;を参照することもできます。</target>
        </trans-unit>
        <trans-unit id="1edee26abee8ad003e87c6f335a9c78a08e364b8" translate="yes" xml:space="preserve">
          <source>For instance for errors in the Todos example app, we create an &lt;code&gt;errors&lt;/code&gt; module that allows us to easily alert a translated error for all of the errors that we can potentially throw from methods:</source>
          <target state="translated">たとえば、Todosサンプルアプリの &lt;code&gt;errors&lt;/code&gt; 、エラーモジュールを作成します。これにより、メソッドからスローされる可能性のあるすべてのエラーについて、翻訳されたエラーを簡単に警告できます。</target>
        </trans-unit>
        <trans-unit id="b5fa351a6359e6e17aeb97e6aeed03106869143d" translate="yes" xml:space="preserve">
          <source>For instance, if you are writing a React package, you should not directly depend on &lt;a href=&quot;https://www.npmjs.com/package/react&quot;&gt;&lt;code&gt;react&lt;/code&gt;&lt;/a&gt;, but instead use &lt;code&gt;check-npm-versions&lt;/code&gt; to check the user has installed it:</source>
          <target state="translated">たとえば、Reactパッケージを作成する場合は、&lt;a href=&quot;https://www.npmjs.com/package/react&quot;&gt; &lt;code&gt;react&lt;/code&gt; &lt;/a&gt;に直接依存するのではなく、代わりに &lt;code&gt;check-npm-versions&lt;/code&gt; を使用して、ユーザーがパッケージをインストールしたことを確認します。</target>
        </trans-unit>
        <trans-unit id="0a88a6384a3e1454ae3e62fb6e41d53f1dbb7ba8" translate="yes" xml:space="preserve">
          <source>For instance, in &amp;ldquo;pure&amp;rdquo; MongoDB you might design the schema so that each list document had a field called &lt;code&gt;todos&lt;/code&gt; which was an array of todo items:</source>
          <target state="translated">たとえば、「純粋な」MongoDBでは、各リストドキュメントに &lt;code&gt;todos&lt;/code&gt; というフィールドがあり、todo項目の配列であるようにスキーマを設計できます。</target>
        </trans-unit>
        <trans-unit id="ccd52b90405eb61b7579e3e76116bcfffacbbd7c" translate="yes" xml:space="preserve">
          <source>For instance, in Galaxy, we use a component explorer called Chromatic to render each component one specification at a time or with all specifications at once.</source>
          <target state="translated">例えばGalaxyでは、Chromaticと呼ばれるコンポーネントエクスプローラを使用して、各コンポーネントを1つの仕様で一度にレンダリングしたり、すべての仕様を一度にレンダリングしたりしています。</target>
        </trans-unit>
        <trans-unit id="922c719ef9c60481220e51992dfa7bca5a0ef389" translate="yes" xml:space="preserve">
          <source>For instance, in the Todos example app, when creating a new list, the list creation will basically always succeed, so we write:</source>
          <target state="translated">例えば、Todosの例のアプリでは、新しいリストを作成する際には、基本的にリストの作成は必ず成功するので、こう書きます。</target>
        </trans-unit>
        <trans-unit id="a7255240ff1e7f09fe6219115c2180ff3242ca98" translate="yes" xml:space="preserve">
          <source>For instance, in the case of the &lt;code&gt;Todos_item&lt;/code&gt; sub-component, we need to provide two extra arguments to control the editing state of the item, which would have been a hassle to add if the item was used with a single &lt;code&gt;todo&lt;/code&gt; argument.</source>
          <target state="translated">たとえば、 &lt;code&gt;Todos_item&lt;/code&gt; サブコンポーネントの場合、アイテムの編集状態を制御するために2つの追加の引数を提供する必要があります。これは、アイテムが単一の &lt;code&gt;todo&lt;/code&gt; 引数で使用された場合に追加するのが面倒でした。</target>
        </trans-unit>
        <trans-unit id="b1f2b7b8dfce76c741fe14ec2be61e8666c8af53" translate="yes" xml:space="preserve">
          <source>For instance, only one todo item can be in the editing state at a time, so the &lt;code&gt;Lists_show&lt;/code&gt; component manages the state of which is edited. When you focus on an item, that item needs to tell the list&amp;rsquo;s component to make it the &amp;ldquo;edited&amp;rdquo; one. To do that, we pass a callback into the &lt;code&gt;Todos_item&lt;/code&gt; component, and the child calls it whenever the state needs to be updated in the parent:</source>
          <target state="translated">たとえば、一度に編集状態になることができる &lt;code&gt;Lists_show&lt;/code&gt; アイテムは1つだけなので、Lists_showコンポーネントが編集状態を管理します。アイテムに焦点を合わせるとき、そのアイテムはリストのコンポーネントにそれを「編集された」コンポーネントにするように指示する必要があります。これを行うには、 &lt;code&gt;Todos_item&lt;/code&gt; コンポーネントにコールバックを渡し、子が親で状態を更新する必要があるときはいつでもそれを呼び出します。</target>
        </trans-unit>
        <trans-unit id="f81f18b253fa8cb4f09571d0bd339604f5b81ee3" translate="yes" xml:space="preserve">
          <source>For instance, suppose you have many places in your application where you need an input to blur itself when you click the &amp;ldquo;esc&amp;rdquo; key. If you were building an autocomplete widget that also wanted this functionality, you could compose a &lt;code&gt;blurringInput&lt;/code&gt; inside your &lt;code&gt;autocompleteInput&lt;/code&gt;:</source>
          <target state="translated">たとえば、アプリケーションの「esc」キーをクリックしたときにぼかすための入力が必要な場所がたくさんあるとします。あなたも、この機能を望んでいたオートコンプリートウィジェットを構築していた場合、あなたは作曲ができ &lt;code&gt;blurringInput&lt;/code&gt; あなたの内部 &lt;code&gt;autocompleteInput&lt;/code&gt; を：</target>
        </trans-unit>
        <trans-unit id="111f242bece144a1b83b659bf3ca03b252908cb8" translate="yes" xml:space="preserve">
          <source>For legacy reasons, some built-in Meteor functions such as &lt;code&gt;check&lt;/code&gt; throw errors with a number in this field.</source>
          <target state="translated">レガシーの理由により、 &lt;code&gt;check&lt;/code&gt; などの組み込みのMeteor関数は、このフィールドに番号が付いたエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="d5ebb8a6452aaffb1d5be31776a4af5cf4256f24" translate="yes" xml:space="preserve">
          <source>For local collections you can pass a comparator function which receives two document objects, and returns -1 if the first document comes first in order, 1 if the second document comes first, or 0 if neither document comes before the other. This is a Minimongo extension to MongoDB.</source>
          <target state="translated">ローカルコレクションの場合は、2 つのドキュメントオブジェクトを受け取るコンパレータ関数を渡して、 最初のドキュメントが順に先に来たら -1、2 番目のドキュメントが先に来たら 1、どちらのドキュメントも先に来なければ 0 を返します。これは MongoDB の Minimongo 拡張モジュールです。</target>
        </trans-unit>
        <trans-unit id="2c1968972ad567249cd3a475220952773e19e79d" translate="yes" xml:space="preserve">
          <source>For more details about the data stored in the user database, read the section below about accessing user data.</source>
          <target state="translated">ユーザーデータベースに格納されているデータの詳細については、ユーザーデータへのアクセスについて以下のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="904a5faf5ea7e5f5e6010a90c693a822d1409c4c" translate="yes" xml:space="preserve">
          <source>For more details using &lt;code&gt;imports&lt;/code&gt; with packages see &lt;a href=&quot;https://guide.meteor.com/using-packages.html&quot;&gt;Using Packages&lt;/a&gt; in the Meteor Guide.</source>
          <target state="translated">&lt;a href=&quot;https://guide.meteor.com/using-packages.html&quot;&gt;パッケージ&lt;/a&gt;での &lt;code&gt;imports&lt;/code&gt; 使用の詳細については、Meteorガイドの「パッケージの使用」を参照してください。</target>
        </trans-unit>
        <trans-unit id="0b43c25265faefdf94be8052443941685348d3ec" translate="yes" xml:space="preserve">
          <source>For more details, read the &lt;a href=&quot;http://eslint.org/docs/user-guide/getting-started&quot;&gt;Getting Started&lt;/a&gt; directions from the ESLint website.</source>
          <target state="translated">詳細については、ESLint Webサイトの&lt;a href=&quot;http://eslint.org/docs/user-guide/getting-started&quot;&gt;「はじめに」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ab3731f71191bf3f8b17f15af1c7db6d9645da41" translate="yes" xml:space="preserve">
          <source>For more examples and details on importing styles and using &lt;code&gt;@imports&lt;/code&gt; with packages see the &lt;a href=&quot;https://guide.meteor.com/using-packages.html#npm-styles&quot;&gt;Using Packages&lt;/a&gt; article.</source>
          <target state="translated">スタイルのインポートとパッケージでの &lt;code&gt;@imports&lt;/code&gt; の使用に関するその他の例と詳細については、「パッケージの&lt;a href=&quot;https://guide.meteor.com/using-packages.html#npm-styles&quot;&gt;使用&lt;/a&gt;」の記事を参照してください。</target>
        </trans-unit>
        <trans-unit id="46c4e192939b2e56d0db0d6784e9de1a6631c8bd" translate="yes" xml:space="preserve">
          <source>For more information about &lt;code&gt;npm install&lt;/code&gt;, check out the &lt;a href=&quot;https://docs.npmjs.com/getting-started/installing-npm-packages-locally&quot;&gt;official documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;npm install&lt;/code&gt; の詳細については、&lt;a href=&quot;https://docs.npmjs.com/getting-started/installing-npm-packages-locally&quot;&gt;公式ドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="a8639b763dbebaf146bc810497bc0d4f75d0754e" translate="yes" xml:space="preserve">
          <source>For more information about how Meteor interacts with the application cache, see the &lt;a href=&quot;https://github.com/meteor/meteor/wiki/AppCache&quot;&gt;AppCache page&lt;/a&gt; in the Meteor wiki.</source>
          <target state="translated">Meteorがアプリケーションキャッシュと相互作用する方法の詳細については、Meteor wikiの&lt;a href=&quot;https://github.com/meteor/meteor/wiki/AppCache&quot;&gt;AppCacheページを参照&lt;/a&gt;してください。</target>
        </trans-unit>
        <trans-unit id="63674f40877f723f0dccce03be5204d7c2e5d291" translate="yes" xml:space="preserve">
          <source>For more ways to import styles, see the &lt;a href=&quot;build-tool#css-importing&quot;&gt;Build System&lt;/a&gt; article.</source>
          <target state="translated">スタイルをインポートするその他の方法については、&lt;a href=&quot;build-tool#css-importing&quot;&gt;ビルドシステムの&lt;/a&gt;記事を参照してください。</target>
        </trans-unit>
        <trans-unit id="92fa2e426b695443e27efec8114f18b9996ccf0a" translate="yes" xml:space="preserve">
          <source>For mouse events, the number of the mouse button (1=left, 2=middle, 3=right). For key events, a character or key code.</source>
          <target state="translated">マウスイベントの場合、マウスボタンの番号(1=左、2=中、3=右)。キーイベントの場合は、文字またはキーコード。</target>
        </trans-unit>
        <trans-unit id="1c9ae35f62e5a912e691433e0631b9770410af09" translate="yes" xml:space="preserve">
          <source>For now, you can not run this while a development server is running. Quit all running meteor applications before running this.</source>
          <target state="translated">今のところ、開発サーバーが起動している間は、これを実行することはできません。これを実行する前に、実行中のメテオアプリケーションをすべて終了させてください。</target>
        </trans-unit>
        <trans-unit id="31b62f37743481ae4492eec4b009460411828f37" translate="yes" xml:space="preserve">
          <source>For now, you must already have your application running locally with &lt;code&gt;meteor run&lt;/code&gt;. This will be easier in the future.</source>
          <target state="translated">とりあえず、アプリケーションを &lt;code&gt;meteor run&lt;/code&gt; でローカルに実行している必要があります。これは将来簡単になります。</target>
        </trans-unit>
        <trans-unit id="a3652dfb8488c0d56351ed1adf1a16f71d675c45" translate="yes" xml:space="preserve">
          <source>For numbers or strings, use their value as the identification key.</source>
          <target state="translated">数字や文字列の場合は、その値を識別キーとして使用します。</target>
        </trans-unit>
        <trans-unit id="925725292b1e71c5f7cdc9bb79036284a38dfef5" translate="yes" xml:space="preserve">
          <source>For object and array session values, you cannot use &lt;code&gt;Session.equals&lt;/code&gt;; instead, you need to use the &lt;code&gt;underscore&lt;/code&gt; package and write &lt;code&gt;_.isEqual(Session.get(key), value)&lt;/code&gt;.</source>
          <target state="translated">オブジェクトと配列のセッション値には、 &lt;code&gt;Session.equals&lt;/code&gt; を使用できません。代わりに、 &lt;code&gt;underscore&lt;/code&gt; パッケージを使用して &lt;code&gt;_.isEqual(Session.get(key), value)&lt;/code&gt; を書き込む必要があります。</target>
        </trans-unit>
        <trans-unit id="ef941d7fed6b8e4b8d9464578fd82b4485d6c9c9" translate="yes" xml:space="preserve">
          <source>For objects with an &lt;code&gt;_id&lt;/code&gt; field, use that field as the identification key</source>
          <target state="translated">&lt;code&gt;_id&lt;/code&gt; フィールドを持つオブジェクトの場合、そのフィールドを識別キーとして使用します</target>
        </trans-unit>
        <trans-unit id="0aba4e822cbd347e0b93f9cfed0443c04b8cc033" translate="yes" xml:space="preserve">
          <source>For objects with no &lt;code&gt;_id&lt;/code&gt; field, use the array index as the identification key. In this case, appends are fast but prepends are slower.</source>
          <target state="translated">&lt;code&gt;_id&lt;/code&gt; フィールドのないオブジェクトの場合は、配列のインデックスを識別キーとして使用します。この場合、アペンドは高速ですが、プリペンドは低速です。</target>
        </trans-unit>
        <trans-unit id="01bd8d95de37d1835084d2030406dca2654c3195" translate="yes" xml:space="preserve">
          <source>For packages, you can enable &lt;code&gt;modules&lt;/code&gt; by adding &lt;code&gt;api.use('modules')&lt;/code&gt; to the &lt;code&gt;Package.onUse&lt;/code&gt; or &lt;code&gt;Package.onTest&lt;/code&gt; sections of your &lt;code&gt;package.js&lt;/code&gt; file.</source>
          <target state="translated">パッケージの場合、 &lt;code&gt;api.use('modules')&lt;/code&gt; を &lt;code&gt;package.js&lt;/code&gt; ファイルの &lt;code&gt;Package.onUse&lt;/code&gt; または &lt;code&gt;Package.onTest&lt;/code&gt; セクションに追加することで &lt;code&gt;modules&lt;/code&gt; を有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="7c05b5c6768dc923c7b8f8397d6194df77a22108" translate="yes" xml:space="preserve">
          <source>For reactive data sources that create many internal Dependencies, this function is useful to determine whether a particular Dependency is still tracking any dependency relationships or if it can be cleaned up to save memory.</source>
          <target state="translated">多くの内部依存関係を作成するリアクティブなデータソースの場合、この関数は、特定の依存関係を追跡している依存関係が残っているかどうか、またはメモリを節約するためにクリーンアップできるかどうかを判断するのに便利です。</target>
        </trans-unit>
        <trans-unit id="e4d0179ed7d8797a8095d6663f2f196d9b51bb61" translate="yes" xml:space="preserve">
          <source>For similar reasons to the above, it&amp;rsquo;s better to use &lt;code&gt;{{#each todo in todos}}&lt;/code&gt; rather than the older &lt;code&gt;{{#each todos}}&lt;/code&gt;. The second sets the entire data context of its children to a single &lt;code&gt;todo&lt;/code&gt; object, and makes it difficult to access any context from outside of the block.</source>
          <target state="translated">上記と同様の理由で、以前の &lt;code&gt;{{#each todos}}&lt;/code&gt; ではなく &lt;code&gt;{{#each todo in todos}}&lt;/code&gt; を使用することをお勧めします。2つ目は、子のデータコンテキスト全体を単一の &lt;code&gt;todo&lt;/code&gt; オブジェクトに設定し、ブロックの外部からコンテキストにアクセスすることを困難にします。</target>
        </trans-unit>
        <trans-unit id="692287c894f343be47ecfb90daf9465a6ee9f891" translate="yes" xml:space="preserve">
          <source>For some apps, the off-the-shelf login templates provided by the various &lt;code&gt;useraccounts&lt;/code&gt; UI packages will work as-is, but most apps will want to customize some of the presentation. There&amp;rsquo;s a simple way to do that using the template replacement functionality of the &lt;code&gt;aldeed:template-extension&lt;/code&gt; package.</source>
          <target state="translated">一部のアプリでは、さまざまなユーザー &lt;code&gt;useraccounts&lt;/code&gt; UIパッケージによって提供される既成のログインテンプレートがそのまま機能しますが、ほとんどのアプリはプレゼンテーションの一部をカスタマイズする必要があります。 &lt;code&gt;aldeed:template-extension&lt;/code&gt; パッケージのテンプレート置換機能を使用してこれを行う簡単な方法があります。</target>
        </trans-unit>
        <trans-unit id="7184d81fb0dd16fea395b7b9f656a76d78250e72" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;accounts-facebook&lt;/code&gt; package to pick up these keys, you need to add them to the service configuration collection in the database. Here&amp;rsquo;s how you do that:</source>
          <target state="translated">以下のため &lt;code&gt;accounts-facebook&lt;/code&gt; パッケージには、これらのキーを拾うために、あなたは、データベース内のサービス構成のコレクションに追加する必要があります。その方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="9bba1a1f464744305cd2c6b64e5b016d4506a268" translate="yes" xml:space="preserve">
          <source>For the fast rebuilds between the Isobuild process runs, plugins can implement on-disk caching. If a plugin implements the &lt;code&gt;setDiskCacheDirectory&lt;/code&gt; method, it will be called from time to time with a new path on disk where the plugin can write its offline cache. The folder is correctly reset when the plugin is rebuilt or cache should be invalidated for any reason (for example, picked package versions set has changed).</source>
          <target state="translated">Isobuildプロセス実行間の高速再構築のために、プラグインはディスク上のキャッシュを実装できます。プラグインが &lt;code&gt;setDiskCacheDirectory&lt;/code&gt; メソッドを実装している場合、プラグインがオフラインキャッシュを書き込むことができるディスク上の新しいパスで時々呼び出されます。プラグインが再構築されたとき、またはキャッシュが何らかの理由（たとえば、選択されたパッケージバージョンセットが変更されたなど）で無効にされたときに、フォルダーは正しくリセットされます。</target>
        </trans-unit>
        <trans-unit id="de206915a2c5c624f4cee75931ba411b67345bde" translate="yes" xml:space="preserve">
          <source>For this reason, developers tend to try and get staging as close as possible to production. This means that all the steps we outline below about production deployment, should, if possible, also be followed for your staging server.</source>
          <target state="translated">このような理由から、開発者はできるだけ本番環境に近い状態でステージングを行おうとする傾向があります。つまり、本番環境へのデプロイについて以下で説明するすべてのステップは、可能であればステージングサーバにも適用されるべきです。</target>
        </trans-unit>
        <trans-unit id="0388c6b514f53ff5daf6df4b67cfa29d434d521f" translate="yes" xml:space="preserve">
          <source>Force an immediate reconnection attempt if the client is not connected to the server.</source>
          <target state="translated">クライアントがサーバーに接続されていない場合、直ちに再接続を試みます。</target>
        </trans-unit>
        <trans-unit id="038614e3c37183d93a56aebe7bd19632bd773735" translate="yes" xml:space="preserve">
          <source>Forcibly change the password for a user.</source>
          <target state="translated">ユーザーのパスワードを強制的に変更します。</target>
        </trans-unit>
        <trans-unit id="08c7933553087fc033b0817ef0326a7f136d138b" translate="yes" xml:space="preserve">
          <source>Forcing SSL</source>
          <target state="translated">強制SSL化</target>
        </trans-unit>
        <trans-unit id="c6018a326bef2f0001fc5a6513c61ed5af6e990b" translate="yes" xml:space="preserve">
          <source>From that entrypoint, you can &lt;code&gt;import&lt;/code&gt; other files within your package, &lt;a href=&quot;structure&quot;&gt;just as you would in an application&lt;/a&gt;.</source>
          <target state="translated">そのエントリポイントから&lt;a href=&quot;structure&quot;&gt;、アプリケーションの場合と同様に&lt;/a&gt;、パッケージ内の他のファイルを &lt;code&gt;import&lt;/code&gt; できます。</target>
        </trans-unit>
        <trans-unit id="35d198578ebab50ddb10a6e0607499cd045917ab" translate="yes" xml:space="preserve">
          <source>From the client&amp;rsquo;s perspective, data published like this doesn&amp;rsquo;t look any different&amp;mdash;there&amp;rsquo;s actually no way for the client to know the difference as the DDP messages are the same. So even if you are connecting to, and mirroring, some esoteric data source, on the client it&amp;rsquo;ll appear like any other Mongo collection.</source>
          <target state="translated">クライアントの観点から見ると、このように公開されたデータには違いはありません。DDPメッセージが同じであるため、クライアントが違いを知る方法は実際にはありません。したがって、一部の難解なデータソースに接続してミラーリングしている場合でも、クライアントでは他のMongoコレクションと同じように表示されます。</target>
        </trans-unit>
        <trans-unit id="4664d5f9f0bcd9bde2772988dec0026e8a3f529b" translate="yes" xml:space="preserve">
          <source>From this point on, the process for building the app archive and submitting it to the App Store is the same as it would be for any other iOS app. Please refer to &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/SubmittingYourApp/SubmittingYourApp.html&quot;&gt;Apple&amp;rsquo;s documentation&lt;/a&gt; for further details.</source>
          <target state="translated">これ以降、アプリアーカイブを作成してApp Storeに送信するプロセスは、他のiOSアプリの場合と同じです。詳細については、&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/SubmittingYourApp/SubmittingYourApp.html&quot;&gt;Appleのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="32062cdab1018d3389efff35af89eafa35fd0a11" translate="yes" xml:space="preserve">
          <source>From this point on, the process for submitting the app to the Play Store is the same as it would be for any other Android app. &lt;code&gt;&amp;lt;your-app-name&amp;gt;.apk&lt;/code&gt; is the APK to upload to the store. Learn more by visiting &lt;a href=&quot;https://play.google.com/apps/publish&quot;&gt;https://play.google.com/apps/publish&lt;/a&gt;.</source>
          <target state="translated">これ以降、アプリをPlayストアに送信するプロセスは、他のAndroidアプリの場合と同じです。 &lt;code&gt;&amp;lt;your-app-name&amp;gt;.apk&lt;/code&gt; は、ストアにアップロードするAPKです。詳しくは、&lt;a href=&quot;https://play.google.com/apps/publish&quot;&gt;https：//play.google.com/apps/publishにアクセス&lt;/a&gt;してください。</target>
        </trans-unit>
        <trans-unit id="0fe3752e01186e544e6f977a182c0156112153b2" translate="yes" xml:space="preserve">
          <source>From within your test entry point, you can import other files as you would in the package proper.</source>
          <target state="translated">テストのエントリーポイントから、適切なパッケージの場合と同様に他のファイルをインポートすることができます。</target>
        </trans-unit>
        <trans-unit id="9b7feb2c711fd05c31bc63ffc267c4b2069c8fa8" translate="yes" xml:space="preserve">
          <source>Full-app integration test</source>
          <target state="translated">フルアプリ統合テスト</target>
        </trans-unit>
        <trans-unit id="69c40f62f30db857db5eaab1aa564e3b1174aa70" translate="yes" xml:space="preserve">
          <source>Function Returning a Template</source>
          <target state="translated">テンプレートを返す関数</target>
        </trans-unit>
        <trans-unit id="e991c5df2a66b6d1f35524f20dc6ca51c2ef02d9" translate="yes" xml:space="preserve">
          <source>Function called on the server each time a client subscribes. Inside the function, &lt;code&gt;this&lt;/code&gt; is the publish handler object, described below. If the client passed arguments to &lt;code&gt;subscribe&lt;/code&gt;, the function is called with the same arguments.</source>
          <target state="translated">クライアントがサブスクライブするたびにサーバーで呼び出される関数。関数内では、 &lt;code&gt;this&lt;/code&gt; はパブリッシュハンドラーオブジェクトであり、以下で説明します。クライアントが &lt;code&gt;subscribe&lt;/code&gt; に引数を渡した場合、関数は同じ引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="ab30367062ed38b819b6bd1301fab2dab601fb15" translate="yes" xml:space="preserve">
          <source>Function to be called on invalidation. Receives one argument, the computation that was invalidated.</source>
          <target state="translated">無効になったときに呼び出される関数。無効化された計算を一つの引数として受け取ります。</target>
        </trans-unit>
        <trans-unit id="f75f7b175aeae18fab78229982832b49ec813ef4" translate="yes" xml:space="preserve">
          <source>Function to be called on stop. Receives one argument, the computation that was stopped.</source>
          <target state="translated">停止時に呼び出される関数。1つの引数として、停止した計算を受け取ります。</target>
        </trans-unit>
        <trans-unit id="9eecea60a57a913127e41f958771d29bb8370567" translate="yes" xml:space="preserve">
          <source>Function to call. It will be called with three arguments: the document, a 0-based index, and &lt;em&gt;cursor&lt;/em&gt; itself.</source>
          <target state="translated">呼び出す関数。これは、ドキュメント、0ベースのインデックス、および&lt;em&gt;カーソル&lt;/em&gt;自体の3つの引数で呼び出され&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="1f01a35ef81a85bbaf12fb2bdb81b4424b156a30" translate="yes" xml:space="preserve">
          <source>Functions are passed in an object with a &lt;code&gt;timeToReset&lt;/code&gt; field that specifies the number of milliseconds until the next method or subscription is allowed to run. The function must return a string of the error message.</source>
          <target state="translated">関数は、次のメソッドまたはサブスクリプションの実行が許可されるまでのミリ秒数を指定する &lt;code&gt;timeToReset&lt;/code&gt; フィールドを持つオブジェクトで渡されます。関数はエラーメッセージの文字列を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="7101fa2236726e5ffedbc9bd088c9d67d592afa7" translate="yes" xml:space="preserve">
          <source>Functions scheduled by multiple calls to &lt;code&gt;afterFlush&lt;/code&gt; are guaranteed to run in the order that &lt;code&gt;afterFlush&lt;/code&gt; was called. Functions are guaranteed to be called at a time when there are no invalidated computations that need rerunning. This means that if an &lt;code&gt;afterFlush&lt;/code&gt; function invalidates a computation, that computation will be rerun before any other &lt;code&gt;afterFlush&lt;/code&gt; functions are called.</source>
          <target state="translated">&lt;code&gt;afterFlush&lt;/code&gt; への複数の呼び出しによってスケジュールされた関数は、 &lt;code&gt;afterFlush&lt;/code&gt; が呼び出された順序で実行されることが保証されています。関数は、再実行が必要な無効化された計算がないときに呼び出されることが保証されています。つまり、 &lt;code&gt;afterFlush&lt;/code&gt; 関数が計算を無効にした場合、その計算は他の &lt;code&gt;afterFlush&lt;/code&gt; 関数が呼び出される前に再実行されます。</target>
        </trans-unit>
        <trans-unit id="a3ed1756955e8fb700c8ad1cd3c2099e6c8356f2" translate="yes" xml:space="preserve">
          <source>Functions that look at a proposed modification to the database and return true if it should be allowed.</source>
          <target state="translated">データベースへの変更提案を調べ、それが許可されるべきかどうかを判定して真を返す関数です。</target>
        </trans-unit>
        <trans-unit id="1601343ed0c0908b54f8d593c4fab5d49b5d7ded" translate="yes" xml:space="preserve">
          <source>Functions that look at a proposed modification to the database and return true if it should be denied, even if an &lt;a href=&quot;#allow&quot;&gt;allow&lt;/a&gt; rule says otherwise.</source>
          <target state="translated">データベースへの提案された変更を調べ、それが拒否されるべきである場合、&lt;a href=&quot;#allow&quot;&gt;許可&lt;/a&gt;ルールが別のことを言っていてもtrueを返す関数。</target>
        </trans-unit>
        <trans-unit id="1369aef754a288504cae91fdf0e4546b28a1eab9" translate="yes" xml:space="preserve">
          <source>Functions to call to deliver the result set as it changes</source>
          <target state="translated">結果セットが変更されたときに、結果セットを配信するために呼び出す関数</target>
        </trans-unit>
        <trans-unit id="d1540a59de4e97bee463ad0bcbe7f3426d0647c8" translate="yes" xml:space="preserve">
          <source>Further customization</source>
          <target state="translated">さらなるカスタマイズ</target>
        </trans-unit>
        <trans-unit id="74f668f937db12449aed292d11ada61b07df8e23" translate="yes" xml:space="preserve">
          <source>Galaxy (recommended)</source>
          <target state="translated">ギャラクシー(おすすめ</target>
        </trans-unit>
        <trans-unit id="4aaa1aebdd09f54b7e519ca9699b2fe6b94288f5" translate="yes" xml:space="preserve">
          <source>Galaxy is a distributed system that runs on Amazon AWS. If you understand what it takes to run Meteor apps correctly and just how Galaxy works, you&amp;rsquo;ll come to appreciate Galaxy&amp;rsquo;s value, and that it will save you a lot of time and trouble. Most large Meteor apps run on Galaxy today, and many of them have switched from custom solutions they used prior to Galaxy&amp;rsquo;s launch.</source>
          <target state="translated">Galaxyは、Amazon AWSで実行される分散システムです。Meteorアプリを正しく実行するために何が必要か、そしてGalaxyがどのように機能するかを理解していれば、Galaxyの価値を高く評価でき、時間と手間を大幅に節約できます。現在、ほとんどの大規模なMeteorアプリはGalaxyで実行されており、それらの多くはGalaxyのリリース前に使用していたカスタムソリューションから切り替えました。</target>
        </trans-unit>
        <trans-unit id="68842ecf882f2e0d638cab0ddd492168313e28d8" translate="yes" xml:space="preserve">
          <source>Galaxy&amp;rsquo;s UI provides a detailed logging system, which can be invaluable to determine which action it is causing that extra load, or to generally debug other application issues:</source>
          <target state="translated">GalaxyのUIは詳細なログシステムを提供します。これは、余分な負荷を引き起こしているアクションを特定したり、一般的に他のアプリケーションの問題をデバッグしたりするのに非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="7fa1b2a120eaad1ebe4d23bd85a924f19536ace3" translate="yes" xml:space="preserve">
          <source>Gather source files from the app folder or read &lt;code&gt;package.js&lt;/code&gt; file for a package.</source>
          <target state="translated">appフォルダーからソースファイルを収集するか、パッケージの &lt;code&gt;package.js&lt;/code&gt; ファイルを読み取ります。</target>
        </trans-unit>
        <trans-unit id="6a8732106f0d73883a3181c9b6c803738428b3d6" translate="yes" xml:space="preserve">
          <source>General tips for structuring your UI code, independent of your view rendering technology.</source>
          <target state="translated">ビューのレンダリング技術に関係なく、UI コードを構造化するための一般的なヒント。</target>
        </trans-unit>
        <trans-unit id="5afcb319e4d49bb0e1598f6a7a21ef1756d02202" translate="yes" xml:space="preserve">
          <source>Generally speaking, all production HTTP requests should go over HTTPS, and all WebSocket data should be sent over WSS.</source>
          <target state="translated">一般的には、すべてのプロダクション HTTP リクエストは HTTPS を経由し、すべての WebSocket データは WSS を経由して送信する必要があります。</target>
        </trans-unit>
        <trans-unit id="a2ab98638d4c956db4c074c04577335fcaae24a8" translate="yes" xml:space="preserve">
          <source>Generally, you&amp;rsquo;ll assign &lt;code&gt;Mongo.Collection&lt;/code&gt; objects in your app to global variables. You can only create one &lt;code&gt;Mongo.Collection&lt;/code&gt; object for each underlying Mongo collection.</source>
          <target state="translated">通常、アプリ内の &lt;code&gt;Mongo.Collection&lt;/code&gt; オブジェクトをグローバル変数に割り当てます。基になるMongoコレクションごとに作成できる &lt;code&gt;Mongo.Collection&lt;/code&gt; オブジェクトは1つだけです。</target>
        </trans-unit>
        <trans-unit id="54178574f84730820557ce9ee88682719f9c3cf7" translate="yes" xml:space="preserve">
          <source>Generate an absolute URL pointing to the application. The server reads from the &lt;code&gt;ROOT_URL&lt;/code&gt; environment variable to determine where it is running. This is taken care of automatically for apps deployed to Galaxy, but must be provided when using &lt;code&gt;meteor build&lt;/code&gt;.</source>
          <target state="translated">アプリケーションを指す絶対URLを生成します。サーバーは &lt;code&gt;ROOT_URL&lt;/code&gt; 環境変数から読み取り、実行されている場所を判別します。これはGalaxyにデプロイされたアプリで自動的に処理されますが、 &lt;code&gt;meteor build&lt;/code&gt; を使用する場合は提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="5ece031934a20729660e43bc70730a99ea96243b" translate="yes" xml:space="preserve">
          <source>Generating a Key</source>
          <target state="translated">キーの生成</target>
        </trans-unit>
        <trans-unit id="a86496ffd04d2c8a216966f5a9a7efec2426ff7d" translate="yes" xml:space="preserve">
          <source>Generating test data</source>
          <target state="translated">テストデータの生成</target>
        </trans-unit>
        <trans-unit id="ee817fcbc3f2895afc5a622f6a4df46b1897da34" translate="yes" xml:space="preserve">
          <source>Get direct access to Meteor&amp;rsquo;s &lt;a href=&quot;using-atmosphere-packages.md#package-namespacing&quot;&gt;package namespacing&lt;/a&gt; and package global exports without having to explicitly use ES2015 &lt;code&gt;import&lt;/code&gt;</source>
          <target state="translated">ES2015の &lt;code&gt;import&lt;/code&gt; を明示的に使用せずに、Meteorの&lt;a href=&quot;using-atmosphere-packages.md#package-namespacing&quot;&gt;パッケージの名前空間&lt;/a&gt;とパッケージのグローバルエクスポートに直接アクセスする</target>
        </trans-unit>
        <trans-unit id="4eba3bedb8c432d3a9b4bd31acf49de30834821c" translate="yes" xml:space="preserve">
          <source>Get help on meteor command line usage. Running &lt;code&gt;meteor help&lt;/code&gt; by itself will list the common meteor commands. Running &lt;code&gt;meteor help &lt;i&gt;command&lt;/i&gt;&lt;/code&gt; will print detailed help about the command.</source>
          <target state="translated">流星のコマンドラインの使用に関するヘルプを取得します。 &lt;code&gt;meteor help&lt;/code&gt; を単独で実行すると、一般的な流星コマンドが一覧表示されます。 &lt;code&gt;meteor help &lt;i&gt;command&lt;/i&gt;&lt;/code&gt; を実行すると、コマンドに関する詳細なヘルプが出力されます。</target>
        </trans-unit>
        <trans-unit id="33d591acc7d54734b210564428ddd36923ebde32" translate="yes" xml:space="preserve">
          <source>Get the Method simulation return value to get IDs of inserted documents.</source>
          <target state="translated">挿入された文書のIDを取得するためのメソッドシミュレーションの戻り値を取得します。</target>
        </trans-unit>
        <trans-unit id="a1da5be72547f3ebc151c68e80decde636f96c9c" translate="yes" xml:space="preserve">
          <source>Get the absolute path to the static server asset. Note that assets are read-only.</source>
          <target state="translated">静的サーバーアセットの絶対パスを取得します。アセットは読み取り専用であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c725aaa6a7c0084f3c65575e152395c8912723bb" translate="yes" xml:space="preserve">
          <source>Get the current connection status. A reactive data source.</source>
          <target state="translated">現在の接続状態を取得します。反応性のあるデータソースです。</target>
        </trans-unit>
        <trans-unit id="c056162fb881100ef25c56973f53bb701d61d157" translate="yes" xml:space="preserve">
          <source>Get the current user id, or &lt;code&gt;null&lt;/code&gt; if no user is logged in. A reactive data source.</source>
          <target state="translated">現在のユーザーIDを取得します。ユーザーがログインしていない場合は &lt;code&gt;null&lt;/code&gt; を返します。リアクティブデータソース。</target>
        </trans-unit>
        <trans-unit id="00d9d5bcd0ef575f22e97283ecf8578bcb2e7432" translate="yes" xml:space="preserve">
          <source>Get the current user record, or &lt;code&gt;null&lt;/code&gt; if no user is logged in. A reactive data source.</source>
          <target state="translated">現在のユーザーレコードを取得します。ユーザーがログインしていない場合は &lt;code&gt;null&lt;/code&gt; を返します。リアクティブデータソース。</target>
        </trans-unit>
        <trans-unit id="fe8bcf55cb673b5e7b34d041caeca8b9eef86563" translate="yes" xml:space="preserve">
          <source>Get the value of a session variable. If inside a &lt;a href=&quot;#reactivity&quot;&gt;reactive computation&lt;/a&gt;, invalidate the computation the next time the value of the variable is changed by &lt;a href=&quot;#session_set&quot;&gt;&lt;code&gt;Session.set&lt;/code&gt;&lt;/a&gt;. This returns a clone of the session value, so if it's an object or an array, mutating the returned value has no effect on the value stored in the session.</source>
          <target state="translated">セッション変数の値を取得します。&lt;a href=&quot;#reactivity&quot;&gt;リアクティブ計算&lt;/a&gt;内の場合、変数の値が&lt;a href=&quot;#session_set&quot;&gt; &lt;code&gt;Session.set&lt;/code&gt; &lt;/a&gt;によって次に変更されたときに計算を無効にします。これはセッション値のクローンを返すため、それがオブジェクトまたは配列の場合、戻り値を変更してもセッションに格納されている値には影響しません。</target>
        </trans-unit>
        <trans-unit id="748c2b5d743834fa86c8dfa6205ff4bf992cda40" translate="yes" xml:space="preserve">
          <source>Gets either the current View, or the View enclosing the given DOM element.</source>
          <target state="translated">現在のビュー、あるいは指定した DOM 要素を囲むビューを取得します。</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">はじめに</target>
        </trans-unit>
        <trans-unit id="526e8ca8f2f57c6895a91f4a1ae8e5f7f1bfc4a2" translate="yes" xml:space="preserve">
          <source>Getting started with ES2015 and Meteor</source>
          <target state="translated">ES2015とMeteorを使い始める</target>
        </trans-unit>
        <trans-unit id="2ddc65a794f9ed08b4a5130bee6e870b9da4e8e2" translate="yes" xml:space="preserve">
          <source>Git URL example:</source>
          <target state="translated">GitのURLの例です。</target>
        </trans-unit>
        <trans-unit id="ca731d392068a4788b6152238bea22545dc559d1" translate="yes" xml:space="preserve">
          <source>Git URLs in the format described &lt;a href=&quot;https://docs.npmjs.com/files/package.json#git-urls-as-dependencies&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://docs.npmjs.com/files/package.json#git-urls-as-dependencies&quot;&gt;ここで&lt;/a&gt;説明する形式のGit URL</target>
        </trans-unit>
        <trans-unit id="50c954fa653eb0f34f315db4b9a538a7e16e09cb" translate="yes" xml:space="preserve">
          <source>GitHub with &lt;code&gt;accounts-github&lt;/code&gt;</source>
          <target state="translated">GitHubと &lt;code&gt;accounts-github&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="109c4560b23e63ac5efdc5cf5b7f029b10988531" translate="yes" xml:space="preserve">
          <source>GitHub: &lt;a href=&quot;http://developer.github.com/v3/oauth/#scopes&quot;&gt;http://developer.github.com/v3/oauth/#scopes&lt;/a&gt;</source>
          <target state="translated">GitHub：&lt;a href=&quot;http://developer.github.com/v3/oauth/#scopes&quot;&gt;http&lt;/a&gt; : //developer.github.com/v3/oauth/#scopes</target>
        </trans-unit>
        <trans-unit id="76d5449aa231a1c58ff379c9aa66902d542abe94" translate="yes" xml:space="preserve">
          <source>Github, Google, Meetup, Meteor Developer Accounts, Weibo</source>
          <target state="translated">Github,Google,Meetup,Meteor Developer Accounts,Weibo</target>
        </trans-unit>
        <trans-unit id="0e3b723a4f4f8a8ae76be0aef4e0d6a47aca0196" translate="yes" xml:space="preserve">
          <source>Give users of this package access to another package (by passing in the string &lt;code&gt;packagename&lt;/code&gt;) or a collection of packages (by passing in an array of strings [&lt;code&gt;packagename1&lt;/code&gt;, &lt;code&gt;packagename2&lt;/code&gt;]</source>
          <target state="translated">このパッケージのユーザーに、別のパッケージ（文字列 &lt;code&gt;packagename&lt;/code&gt; を渡すこと）またはパッケージのコレクション（文字列の配列[ &lt;code&gt;packagename1&lt;/code&gt; 、 &lt;code&gt;packagename2&lt;/code&gt; ] を渡すこと）へのアクセスを許可します</target>
        </trans-unit>
        <trans-unit id="694d853e7d8eb1b64075e36d3a2f39bf2a48a33b" translate="yes" xml:space="preserve">
          <source>Given that the user ID of the current user is available through this context, you should never pass the ID of the current user as an argument to a Method. This would allow any client of your app to pass any user ID they want. Let&amp;rsquo;s look at an example:</source>
          <target state="translated">現在のユーザーのユーザーIDがこのコンテキストを介して利用できる場合、現在のユーザーのIDを引数としてメソッドに渡してはなりません。これにより、アプリのすべてのクライアントが必要なユーザーIDを渡すことができます。例を見てみましょう：</target>
        </trans-unit>
        <trans-unit id="12001bc02193503211b9e261e3be87dac5148428" translate="yes" xml:space="preserve">
          <source>Given the points above, we recommend that all Meteor apps should use Methods to accept data input from the client, and restrict the arguments accepted by each Method as tightly as possible.</source>
          <target state="translated">上記の点を考慮すると、すべてのMeteorアプリはクライアントからのデータ入力を受け付けるためにメソッドを使用し、各メソッドで受け付ける引数を可能な限り厳しく制限することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="70b73089949bacaa4a01ae997fe44ebf7f931e70" translate="yes" xml:space="preserve">
          <source>Global Helpers</source>
          <target state="translated">グローバルヘルパー</target>
        </trans-unit>
        <trans-unit id="a29091fcf08acaedc8eb769d5813722e6471a77e" translate="yes" xml:space="preserve">
          <source>Global data stores</source>
          <target state="translated">グローバルデータストア</target>
        </trans-unit>
        <trans-unit id="de222792693a691ff0c5bfab1ec28d45cc9fc400" translate="yes" xml:space="preserve">
          <source>Global helper</source>
          <target state="translated">グローバルヘルパー</target>
        </trans-unit>
        <trans-unit id="9f34cf7bcf6e94a7d0ab119e9dab8affc29d35b3" translate="yes" xml:space="preserve">
          <source>Global subscriptions</source>
          <target state="translated">グローバルサブスクリプション</target>
        </trans-unit>
        <trans-unit id="fe15f4a3b9eb372fea69e780297a686c1ab51ebe" translate="yes" xml:space="preserve">
          <source>Goals of the project</source>
          <target state="translated">プロジェクトの目標</target>
        </trans-unit>
        <trans-unit id="bacc0d69b4322bc6fe1e8add41ac213ce371c6d7" translate="yes" xml:space="preserve">
          <source>Google with &lt;code&gt;accounts-google&lt;/code&gt;</source>
          <target state="translated">Googleと &lt;code&gt;accounts-google&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="14ee815bc4884cc91079e1e64a53da46eecd65a6" translate="yes" xml:space="preserve">
          <source>Google: &lt;a href=&quot;https://developers.google.com/identity/protocols/googlescopes&quot;&gt;https://developers.google.com/identity/protocols/googlescopes&lt;/a&gt;</source>
          <target state="translated">Google：&lt;a href=&quot;https://developers.google.com/identity/protocols/googlescopes&quot;&gt;https&lt;/a&gt; : //developers.google.com/identity/protocols/googlescopes</target>
        </trans-unit>
        <trans-unit id="bf073fae640ded81eeb7a4cee70faff4a623c16c" translate="yes" xml:space="preserve">
          <source>Guide</source>
          <target state="translated">Guide</target>
        </trans-unit>
        <trans-unit id="ea88e95b9f94f091499bf80b93dd2375fa565ff0" translate="yes" xml:space="preserve">
          <source>Guide development</source>
          <target state="translated">ガイド開発</target>
        </trans-unit>
        <trans-unit id="6bfde79d3b52bed3855da6aee794325bdd0103c1" translate="yes" xml:space="preserve">
          <source>Guide: Blaze</source>
          <target state="translated">ガイド。ブレイズ</target>
        </trans-unit>
        <trans-unit id="ff1308bf21ec56b2b427d3871e8296a2c61e5b1f" translate="yes" xml:space="preserve">
          <source>Guide: Build</source>
          <target state="translated">ガイド ビルド</target>
        </trans-unit>
        <trans-unit id="f165a201fd01f78717b61c39cf577967d531ded8" translate="yes" xml:space="preserve">
          <source>Guide: Data</source>
          <target state="translated">ガイド データ</target>
        </trans-unit>
        <trans-unit id="435664d8dd73d42849ca51b0d4c40f7afe7c56e6" translate="yes" xml:space="preserve">
          <source>Guide: Production</source>
          <target state="translated">ご案内 生産</target>
        </trans-unit>
        <trans-unit id="c01c0d896c8717f790b67f155627d28d648b678f" translate="yes" xml:space="preserve">
          <source>Guide: View</source>
          <target state="translated">ガイド ビュー</target>
        </trans-unit>
        <trans-unit id="b37d1e80768ce8bfccd845f2e99adbf5e58796f9" translate="yes" xml:space="preserve">
          <source>HTML Dialect</source>
          <target state="translated">HTML方言</target>
        </trans-unit>
        <trans-unit id="5085f2ba2063e38550d15d143693d941bb545fe0" translate="yes" xml:space="preserve">
          <source>HTML emails</source>
          <target state="translated">HTMLメール</target>
        </trans-unit>
        <trans-unit id="392e8b9619d1399ed592dbda0aa0bdb81ff6856d" translate="yes" xml:space="preserve">
          <source>HTML files in a Meteor application are treated quite a bit differently from a server-side framework. Meteor scans all the HTML files in your directory for three top-level elements: &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;. The head and body sections are separately concatenated into a single head and body, which are transmitted to the client on initial page load.</source>
          <target state="translated">MeteorアプリケーションのHTMLファイルの扱いは、サーバー側のフレームワークとはかなり異なります。Meteorは、ディレクトリ内のすべてのHTMLファイルをスキャンして、3つの最上位要素（ &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 、および &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; )を探します。ヘッドセクションとボディセクションは、1つのヘッドとボディに別々に連結され、最初のページのロード時にクライアントに送信されます。</target>
        </trans-unit>
        <trans-unit id="72a57c5112915d68e540b3e73548298eea2674a6" translate="yes" xml:space="preserve">
          <source>HTML template files are &lt;strong&gt;always&lt;/strong&gt; loaded before everything else</source>
          <target state="translated">HTMLテンプレートファイルは&lt;strong&gt;常に&lt;/strong&gt;他のすべての前に読み込まれます</target>
        </trans-unit>
        <trans-unit id="f40b27d6b8b9a4fc3827264c1da16a04ecf4d094" translate="yes" xml:space="preserve">
          <source>HTTP</source>
          <target state="translated">HTTP</target>
        </trans-unit>
        <trans-unit id="1f0c185e250a94b7afe62438a34e9a8919c319f9" translate="yes" xml:space="preserve">
          <source>HTTP basic authentication string of the form &lt;code&gt;&quot;username:password&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&quot;username:password&quot;&lt;/code&gt; 形式のHTTP基本認証文字列</target>
        </trans-unit>
        <trans-unit id="6d6e54155b83da6ea29e714ec3d6a67ddda031df" translate="yes" xml:space="preserve">
          <source>HTTP_FORWARDED_COUNT</source>
          <target state="translated">HTTP_FORWARDED_COUNT</target>
        </trans-unit>
        <trans-unit id="0ff95a68349ac5719cbe822be8e2a9ba9e81d9c0" translate="yes" xml:space="preserve">
          <source>Handling errors</source>
          <target state="translated">エラーの処理</target>
        </trans-unit>
        <trans-unit id="584cf27b699d9457620179a5387d801f7ba8351f" translate="yes" xml:space="preserve">
          <source>Have a well defined way to ship different code for client and server, enabling different behavior in each context</source>
          <target state="translated">クライアントとサーバで異なるコードを出荷するための十分に定義された方法を持ち、それぞれのコンテキストで異なる動作を可能にします。</target>
        </trans-unit>
        <trans-unit id="f0a263faf09c6928162c621d01daa6ddea956746" translate="yes" xml:space="preserve">
          <source>Having a consistent style means that it&amp;rsquo;s easier to adopt standard tools for error checking. For example, if you adopt a convention that you must always use &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; instead of &lt;code&gt;var&lt;/code&gt;, you can now use a tool to ensure all of your variables are scoped the way you expect. That means you can avoid bugs where variables act in unexpected ways. Also, by enforcing that all variables are declared before use, you can easily catch typos before even running any code!</source>
          <target state="translated">一貫したスタイルがあるということは、エラーチェックに標準ツールを採用するほうが簡単であることを意味します。たとえば、常に &lt;code&gt;var&lt;/code&gt; ではなく &lt;code&gt;let&lt;/code&gt; または &lt;code&gt;const&lt;/code&gt; を使用する必要がある規則を採用している場合は、ツールを使用して、すべての変数が期待どおりにスコープされることを確認できます。つまり、変数が予期しない方法で動作するバグを回避できます。また、すべての変数を使用前に宣言することを強制することで、コードを実行する前にタイプミスを簡単に見つけることができます！</target>
        </trans-unit>
        <trans-unit id="a1a2b3f35ab00ab3fb3a832a80b83cdaf0592d87" translate="yes" xml:space="preserve">
          <source>Heavy CoffeeScript users, please let us know how this arrangement works for you, whether &lt;code&gt;share&lt;/code&gt; is helpful for you, and anything else you&amp;rsquo;d like to see changed.</source>
          <target state="translated">CoffeeScriptのヘビーユーザーは、この配置がどのように機能するか、 &lt;code&gt;share&lt;/code&gt; が役立つかどうか、および変更したい他のことを教えてください。</target>
        </trans-unit>
        <trans-unit id="71bfa60b06c751b549dfa608bed89dce9177c4af" translate="yes" xml:space="preserve">
          <source>Helper Arguments</source>
          <target state="translated">ヘルパー引数</target>
        </trans-unit>
        <trans-unit id="dc1f49c10715971e9d013ce60e7f82d216122794" translate="yes" xml:space="preserve">
          <source>Helper defined on the current component</source>
          <target state="translated">現在のコンポーネントに定義されているヘルパー</target>
        </trans-unit>
        <trans-unit id="66705d703f7a2f4cfa2768aba4c5d97e0a610903" translate="yes" xml:space="preserve">
          <source>Helpers can accept positional and keyword arguments:</source>
          <target state="translated">ヘルパーは位置引数とキーワード引数を受け取ることができます。</target>
        </trans-unit>
        <trans-unit id="f606af98d3fda823ee4e02606188ad04bfc3336f" translate="yes" xml:space="preserve">
          <source>Helpers on &lt;code&gt;Template.body&lt;/code&gt; are only available in the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tags of your app. To register a global helper, use &lt;a href=&quot;templates#Template-registerHelper&quot;&gt;Template.registerHelper&lt;/a&gt;. Event maps on &lt;code&gt;Template.body&lt;/code&gt; don&amp;rsquo;t apply to elements added to the body via &lt;code&gt;Blaze.render&lt;/code&gt;, jQuery, or the DOM API, or to the body element itself. To handle events on the body, window, or document, use jQuery or the DOM API.</source>
          <target state="translated">&lt;code&gt;Template.body&lt;/code&gt; のヘルパーは、アプリの &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; タグでのみ使用できます。グローバルヘルパーを登録するには、&lt;a href=&quot;templates#Template-registerHelper&quot;&gt;Template.registerHelperを&lt;/a&gt;使用します。 &lt;code&gt;Template.body&lt;/code&gt; のイベントマップは、 &lt;code&gt;Blaze.render&lt;/code&gt; 、jQuery、またはDOM API を介して本体に追加された要素、または本体要素自体には適用されません。本文、ウィンドウ、ドキュメントのイベントを処理するには、jQueryまたはDOM APIを使用します。</target>
        </trans-unit>
        <trans-unit id="e5246cd17978b86288a03ea9a792c469ffec54e6" translate="yes" xml:space="preserve">
          <source>Here are a couple of screenshots of &lt;code&gt;accounts-ui&lt;/code&gt; so you know what to expect:</source>
          <target state="translated">次に、 &lt;code&gt;accounts-ui&lt;/code&gt; のスクリーンショットをいくつか示しますので、何を期待できるかがわかります。</target>
        </trans-unit>
        <trans-unit id="f48e2388b980916b8ed5a1115d6f5dab642002be" translate="yes" xml:space="preserve">
          <source>Here are a few of those methods:</source>
          <target state="translated">その方法をいくつかご紹介します。</target>
        </trans-unit>
        <trans-unit id="122f48652eb654604aa8f40dbd193ba3643fafb4" translate="yes" xml:space="preserve">
          <source>Here are some example URLs and the resulting &lt;code&gt;params&lt;/code&gt; and &lt;code&gt;queryParams&lt;/code&gt;:</source>
          <target state="translated">次に、URLの例と、その結果の &lt;code&gt;params&lt;/code&gt; および &lt;code&gt;queryParams&lt;/code&gt; を示します。</target>
        </trans-unit>
        <trans-unit id="8089ef0ac1ba3a3d90910291c8064cadc6cade07" translate="yes" xml:space="preserve">
          <source>Here are some patterns that are useful to keep in mind when building the user interface of your Meteor application.</source>
          <target state="translated">ここでは、Meteorアプリケーションのユーザーインターフェースを構築する際に覚えておくと便利なパターンをいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="2dcebaa7ae6f51f37f9ffdb4f73c5b848d80a690" translate="yes" xml:space="preserve">
          <source>Here at Meteor, we strongly believe that JavaScript is the best language to build web applications, for a variety of reasons. JavaScript is constantly improving, and the standards around ES2015 have really brought together the JavaScript community. Here are our recommendations about how to use ES2015 JavaScript in your app today.</source>
          <target state="translated">ここMeteorでは、さまざまな理由から、JavaScriptがWebアプリケーションを構築するのに最適な言語であると強く信じています。JavaScript は常に改善されており、ES2015 を中心とした標準化により、JavaScript コミュニティは本当に一丸となっています。ここでは、今日のアプリでES2015 JavaScriptを使用する方法についての推奨事項をご紹介します。</target>
        </trans-unit>
        <trans-unit id="f71402dbd1216ae9cf759713e28e73c0e95baeec" translate="yes" xml:space="preserve">
          <source>Here is a basic example of &lt;code&gt;onPageLoad&lt;/code&gt; usage on the server:</source>
          <target state="translated">サーバーでの &lt;code&gt;onPageLoad&lt;/code&gt; の基本的な使用例を次に示します。</target>
        </trans-unit>
        <trans-unit id="65537fb9cd918f037957e1954de8cf28f515877d" translate="yes" xml:space="preserve">
          <source>Here is a list of the Babel transformers that are currently enabled:</source>
          <target state="translated">現在有効になっているバベルの変圧器のリストです。</target>
        </trans-unit>
        <trans-unit id="ce9747381012c031c940584519e19bcf1ce3b6e6" translate="yes" xml:space="preserve">
          <source>Here is a more complicated example of &lt;code&gt;onPageLoad&lt;/code&gt; usage on the server, involving the &lt;a href=&quot;https://www.styled-components.com/docs/advanced#server-side-rendering&quot;&gt;&lt;code&gt;styled-components&lt;/code&gt;&lt;/a&gt; npm package:</source>
          <target state="translated">以下は、&lt;a href=&quot;https://www.styled-components.com/docs/advanced#server-side-rendering&quot;&gt; &lt;code&gt;styled-components&lt;/code&gt; &lt;/a&gt; npmパッケージを含む、サーバーでの &lt;code&gt;onPageLoad&lt;/code&gt; の使用法のより複雑な例です。</target>
        </trans-unit>
        <trans-unit id="509e3b432dc6e032e4fe33905cf2847a7758f7a9" translate="yes" xml:space="preserve">
          <source>Here is a simple block helper that wraps its content in a div:</source>
          <target state="translated">ここでは、内容を div でラップするシンプルなブロックヘルパーを紹介します。</target>
        </trans-unit>
        <trans-unit id="b5cc21ccac7e95544ffe6831f0bb2aa87867a0cd" translate="yes" xml:space="preserve">
          <source>Here is an example of implementing &lt;code&gt;#unless&lt;/code&gt; in terms of &lt;code&gt;#if&lt;/code&gt; (ignoring for the moment that &lt;code&gt;unless&lt;/code&gt; is a built-in directive):</source>
          <target state="translated">&lt;code&gt;#if&lt;/code&gt; の観点から &lt;code&gt;#unless&lt;/code&gt; を実装する例を次に示します（ただし、untilが組み込みディレクティブで &lt;code&gt;unless&lt;/code&gt; 、今のところ無視します）。</target>
        </trans-unit>
        <trans-unit id="99b57bf1c2eb8500e43bf390896c3d292a46ad27" translate="yes" xml:space="preserve">
          <source>Here the &lt;code&gt;todo&lt;/code&gt; is passed as argument to the &lt;code&gt;todoArgs&lt;/code&gt; helper, then the output is passed into the &lt;code&gt;Todos_item&lt;/code&gt; template.</source>
          <target state="translated">ここで、 &lt;code&gt;todo&lt;/code&gt; は引数として &lt;code&gt;todoArgs&lt;/code&gt; ヘルパーに渡され、出力は &lt;code&gt;Todos_item&lt;/code&gt; テンプレートに渡されます。</target>
        </trans-unit>
        <trans-unit id="71564680d4662152ecd029a6af15b1de99dd3a59" translate="yes" xml:space="preserve">
          <source>Here we wrote a little utility (which could be abstracted into a general package) to wait for all the subscriptions which are created by the route change (the &lt;code&gt;todos.inList&lt;/code&gt; subscription in this case) to become ready before checking their data.</source>
          <target state="translated">ここでは、ルート変更によって作成されたすべてのサブスクリプション（この場合は &lt;code&gt;todos.inList&lt;/code&gt; サブスクリプション）の準備が整うのを待ってからデータを確認するための小さなユーティリティ（一般的なパッケージに抽象化できる）を作成しました。</target>
        </trans-unit>
        <trans-unit id="5e28fa6148e604c17f82fb6c77eaea161163e7f0" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a code snippet to add to your server code which disables client-side updates on a collection. This will make sure no other part of your app can use &lt;code&gt;allow&lt;/code&gt;:</source>
          <target state="translated">これは、コレクションのクライアント側の更新を無効にするサーバーコードに追加するコードスニペットです。これにより、アプリの他の部分で &lt;code&gt;allow&lt;/code&gt; を使用できないようになります。</target>
        </trans-unit>
        <trans-unit id="54e66c5d3e6fd46629bc99740b47035d52d22a43" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a complete list of login providers for which Meteor actively maintains core packages:</source>
          <target state="translated">Meteorがコアパッケージをアクティブに維持するログインプロバイダーの完全なリストを次に示します。</target>
        </trans-unit>
        <trans-unit id="ec268f472c952354bc36644807f1d8595b86f53e" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a list of the environment variables you can provide to your application.</source>
          <target state="translated">以下は、アプリケーションに提供できる環境変数のリストです。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
