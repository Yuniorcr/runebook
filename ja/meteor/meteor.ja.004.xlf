<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="meteor">
    <body>
      <group id="meteor">
        <trans-unit id="3ce1177dc30f77e6f0fbc70f020c8ae44e2e9689" translate="yes" xml:space="preserve">
          <source>Optional &lt;code&gt;this&lt;/code&gt; object against which the original function will be invoked</source>
          <target state="translated">元の関数が呼び出されるオプションの &lt;code&gt;this&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="f2b502fca25acb3346f68d51a3ad71866861a590" translate="yes" xml:space="preserve">
          <source>Optional DDP connection to reuse.</source>
          <target state="translated">再利用するためのオプションのDDP接続。</target>
        </trans-unit>
        <trans-unit id="2b1ca519d2c3b87735efeacac429adc8fee78d73" translate="yes" xml:space="preserve">
          <source>Optional Filepath to documentation. Set to 'README.md' by default. Set this to null to submit no documentation.</source>
          <target state="translated">オプションのドキュメントへのファイルパス。デフォルトでは 'README.md' に設定されています。ドキュメントを提出しない場合は、これをnullに設定してください。</target>
        </trans-unit>
        <trans-unit id="2062de28015111b04b8268cd932fc2b20032e827" translate="yes" xml:space="preserve">
          <source>Optional Git URL to the source repository.</source>
          <target state="translated">オプションで、ソースリポジトリへの Git URL を指定します。</target>
        </trans-unit>
        <trans-unit id="94c373a3c0ac95938eb633d1206fa0279edf48a4" translate="yes" xml:space="preserve">
          <source>Optional URL for creating a new DDP connection.</source>
          <target state="translated">新しいDDP接続を作成するためのオプションのURL。</target>
        </trans-unit>
        <trans-unit id="8d5edf0beffc1c25094d5e082f632e8205f48854" translate="yes" xml:space="preserve">
          <source>Optional additional data to be added into the token record.</source>
          <target state="translated">オプションで、トークンレコードに追加する追加データ。</target>
        </trans-unit>
        <trans-unit id="1a356eac4559527a400d214412af5f40ab962e26" translate="yes" xml:space="preserve">
          <source>Optional arguments passed to publisher function on server.</source>
          <target state="translated">サーバー上のパブリッシャー関数に渡されるオプションの引数。</target>
        </trans-unit>
        <trans-unit id="a5da6453042ca4b5635c452fd01e6b699d109668" translate="yes" xml:space="preserve">
          <source>Optional callback, which is called asynchronously with the error or result after the function is complete. If not provided, the function runs synchronously.</source>
          <target state="translated">オプションのコールバック。関数が完了した後、エラーや結果とともに非同期的に呼び出されます。省略した場合、関数は同期的に実行されます。</target>
        </trans-unit>
        <trans-unit id="bb4007f4f60af4f689bc9f284f5276d1931420ba" translate="yes" xml:space="preserve">
          <source>Optional callback, which is called asynchronously with the error or result after the method is complete. If not provided, the method runs synchronously if possible (see below).</source>
          <target state="translated">オプションのコールバックで、メソッドが完了した後にエラーまたは結果とともに非同期的に呼び出されます。省略した場合、可能であればメソッドは同期的に実行されます (以下を参照)。</target>
        </trans-unit>
        <trans-unit id="2e976b73a75d7017485e073a00b9d1e522a65217" translate="yes" xml:space="preserve">
          <source>Optional callback. Called with no arguments on success, or with a single &lt;code&gt;Error&lt;/code&gt; argument on failure.</source>
          <target state="translated">オプションのコールバック。成功した場合は引数なしで、失敗した場合は単一の &lt;code&gt;Error&lt;/code&gt; 引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="866264afd4838ebd59331c1a9808fb598b6a278e" translate="yes" xml:space="preserve">
          <source>Optional callback. Called with no arguments on success, or with a single &lt;code&gt;Error&lt;/code&gt; argument on failure. The callback cannot be called if you are using the &quot;redirect&quot; &lt;code&gt;loginStyle&lt;/code&gt;, because the app will have reloaded in the meantime; try using &lt;a href=&quot;#accounts_onlogin&quot;&gt;client-side login hooks&lt;/a&gt; instead.</source>
          <target state="translated">オプションのコールバック。成功した場合は引数なしで、失敗した場合は単一の &lt;code&gt;Error&lt;/code&gt; 引数で呼び出されます。「リダイレクト」 &lt;code&gt;loginStyle&lt;/code&gt; を使用している場合、コールバックを呼び出すことはできません。その間、アプリがリロードされるためです。代わりに&lt;a href=&quot;#accounts_onlogin&quot;&gt;クライアント側のログインフック&lt;/a&gt;を使用してみてください。</target>
        </trans-unit>
        <trans-unit id="7aaafbc93ce519b4d7800e3dccb2592a79af8b49" translate="yes" xml:space="preserve">
          <source>Optional callback. If passed, the method runs asynchronously, instead of synchronously, and calls asyncCallback. On the client, this callback is required.</source>
          <target state="translated">オプションのコールバック。渡された場合、このメソッドは同期的ではなく非同期的に実行され、asyncCallback を呼び出します。クライアントでは、このコールバックは必須です。</target>
        </trans-unit>
        <trans-unit id="16014bc07737a03deb25e654724ccf83b20f299f" translate="yes" xml:space="preserve">
          <source>Optional callback; same semantics as in &lt;a href=&quot;#meteor_call&quot;&gt;&lt;code&gt;Meteor.call&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">オプションのコールバック。&lt;a href=&quot;#meteor_call&quot;&gt; &lt;code&gt;Meteor.call&lt;/code&gt; &lt;/a&gt;と同じセマンティクス。</target>
        </trans-unit>
        <trans-unit id="b0ea2a35fd3e3fe5a82e1460dcc3c6da40f9714a" translate="yes" xml:space="preserve">
          <source>Optional length of the identifier in characters (defaults to 17)</source>
          <target state="translated">識別子の長さを文字数で指定します (デフォルトは 17)</target>
        </trans-unit>
        <trans-unit id="6aa5d2cb894ed9a13e151cce0449c21df87ddb15" translate="yes" xml:space="preserve">
          <source>Optional length of the secret string (defaults to 43 characters, or 256 bits of entropy)</source>
          <target state="translated">秘密の文字列のオプションの長さ (デフォルトは 43 文字、または 256 ビットのエントロピー)</target>
        </trans-unit>
        <trans-unit id="3ce46e8cfee821a0da260af67de15dd1a98939eb" translate="yes" xml:space="preserve">
          <source>Optional method arguments</source>
          <target state="translated">オプションのメソッド引数</target>
        </trans-unit>
        <trans-unit id="5748f7150e5050a60bbf656d8939815142e707b6" translate="yes" xml:space="preserve">
          <source>Optional name override. By default, the package name comes from the name of its directory.</source>
          <target state="translated">オプションで名前を上書きします。デフォルトでは、パッケージ名はそのディレクトリの名前から来ています。</target>
        </trans-unit>
        <trans-unit id="0089fb8b63f95d6ef7ec9a543e2b97dfe94b3e11" translate="yes" xml:space="preserve">
          <source>Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;remove&lt;/code&gt; functions.</source>
          <target state="translated">オプションのパフォーマンス強化。 &lt;code&gt;update&lt;/code&gt; および &lt;code&gt;remove&lt;/code&gt; 機能による検査のためにデータベースからフェッチされるフィールドを制限します。</target>
        </trans-unit>
        <trans-unit id="abed5a45d77ee470c604514993b668b923e8ccf7" translate="yes" xml:space="preserve">
          <source>Optional. A Function that returns &lt;a href=&quot;#Renderable-Content&quot;&gt;&lt;em&gt;renderable content&lt;/em&gt;&lt;/a&gt;. If no &lt;code&gt;elseFunc&lt;/code&gt; is supplied, no content is shown in the &quot;else&quot; case.</source>
          <target state="translated">オプション。&lt;a href=&quot;#Renderable-Content&quot;&gt;&lt;em&gt;レンダリング可能なコンテンツ&lt;/em&gt;&lt;/a&gt;を返す関数。何場合 &lt;code&gt;elseFunc&lt;/code&gt; が供給されていない、何の内容は、「他」の場合には表示されません。</target>
        </trans-unit>
        <trans-unit id="5e65194d6f58a86bd97335b088d3295ee7b2c5d0" translate="yes" xml:space="preserve">
          <source>Optional. A function of two arguments, called on the old value and the new value whenever the ReactiveVar is set. If it returns true, no set is performed. If omitted, the default &lt;code&gt;equalsFunc&lt;/code&gt; returns true if its arguments are &lt;code&gt;===&lt;/code&gt; and are of type number, boolean, string, undefined, or null.</source>
          <target state="translated">オプション。ReactiveVarが設定されるたびに古い値と新しい値で呼び出される2つの引数の関数。trueを返す場合、設定は実行されません。省略した場合、デフォルトの &lt;code&gt;equalsFunc&lt;/code&gt; は、引数が &lt;code&gt;===&lt;/code&gt; であり、数値型、ブール型、文字列型、未定義型、またはnull型の場合にtrueを返します。</target>
        </trans-unit>
        <trans-unit id="8fa18ab3197cd6b44e01abc99d3e338d8cdab003" translate="yes" xml:space="preserve">
          <source>Optional. A name for Views constructed by this Template. See &lt;a href=&quot;#view_name&quot;&gt;&lt;code&gt;view.name&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">オプション。このテンプレートによって作成されたビューの名前。&lt;a href=&quot;#view_name&quot;&gt; &lt;code&gt;view.name&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6b14192f51827ea632949522f7e65b43830aba77" translate="yes" xml:space="preserve">
          <source>Optional. A name for this type of View. See &lt;a href=&quot;#view_name&quot;&gt;&lt;code&gt;view.name&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">オプション。このタイプのビューの名前。&lt;a href=&quot;#view_name&quot;&gt; &lt;code&gt;view.name&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="78797f45c0309eca53361a2860d6297bcb89d13f" translate="yes" xml:space="preserve">
          <source>Optional. A platform name (either &lt;code&gt;ios&lt;/code&gt; or &lt;code&gt;android&lt;/code&gt;) to add a platform-specific preference.</source>
          <target state="translated">オプション。プラットフォーム固有の設定を追加するためのプラットフォーム名（ &lt;code&gt;ios&lt;/code&gt; または &lt;code&gt;android&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="db38daefcfbd47ee3e35bf4b8e14484d90c60442" translate="yes" xml:space="preserve">
          <source>Optional. A short human-readable summary of the error, like 'Not Found'.</source>
          <target state="translated">任意です。見つかりませんでした」のような、人間が読める短いエラーの要約。</target>
        </trans-unit>
        <trans-unit id="7d0d07563690955a9a423f8fc1188c501de82f77" translate="yes" xml:space="preserve">
          <source>Optional. Additional information about the error, like a textual stack trace.</source>
          <target state="translated">オプション。テキストのスタックトレースのような、エラーに関する追加情報。</target>
        </trans-unit>
        <trans-unit id="7acf3396eb1b8186caf2ebe0eeef32302661403e" translate="yes" xml:space="preserve">
          <source>Optional. An element that was rendered by a Meteor, or a View.</source>
          <target state="translated">オプション。Meteor または View によってレンダリングされた要素。</target>
        </trans-unit>
        <trans-unit id="a83c6bb1fbdcd2e8fa8e4d899334bcbf154dc31d" translate="yes" xml:space="preserve">
          <source>Optional. If present, called with an error object as its argument.</source>
          <target state="translated">オプション。存在する場合は、引数としてエラーオブジェクトを指定して呼び出されます。</target>
        </trans-unit>
        <trans-unit id="7172808148a20fcb88bff0c5e39babf6d4769434" translate="yes" xml:space="preserve">
          <source>Optional. If present, called with an error object as the first argument and, if no error, the _id as the second.</source>
          <target state="translated">オプション。存在する場合は、第一引数にエラーオブジェクトを、エラーがなければ第二引数に _id を指定して呼び出されます。</target>
        </trans-unit>
        <trans-unit id="81bfa19cc56a07bea98ef9029a4496e78315b142" translate="yes" xml:space="preserve">
          <source>Optional. If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.</source>
          <target state="translated">オプション。存在する場合は、第一引数にエラーオブジェクトを、エラーがない場合は影響を受けたドキュメントの数を第二引数に指定して呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9551349951d3883395f5adc34d7af4c4ca072ab8" translate="yes" xml:space="preserve">
          <source>Optional. If provided, it will be set as the rendered View's &lt;a href=&quot;#view_parentview&quot;&gt;&lt;code&gt;parentView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">オプション。提供されている場合、レンダリングされたビューの&lt;a href=&quot;#view_parentview&quot;&gt; &lt;code&gt;parentView&lt;/code&gt; &lt;/a&gt;として設定されます。</target>
        </trans-unit>
        <trans-unit id="9fed3559474c572fc3c65b6053a86dcb9792e630" translate="yes" xml:space="preserve">
          <source>Optional. If provided, must be a child of &lt;em&gt;parentNode&lt;/em&gt;; the template will be inserted before this node. If not provided, the template will be inserted as the last child of parentNode.</source>
          <target state="translated">オプション。指定する場合は、&lt;em&gt;parentNodeの&lt;/em&gt;子である必要があります。テンプレートはこのノードの前に挿入されます。指定しない場合、テンプレートはparentNodeの最後の子として挿入されます。</target>
        </trans-unit>
        <trans-unit id="279b4fdca8d8a5b52a5ec4979dc3c86f0eb24a69" translate="yes" xml:space="preserve">
          <source>Optional. If specified, the View enclosing &lt;code&gt;element&lt;/code&gt; is returned.</source>
          <target state="translated">オプション。指定した場合、ビューを囲む &lt;code&gt;element&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="651bd945d835785fe36f575684104c0a9a9871e7" translate="yes" xml:space="preserve">
          <source>Optional. May include &lt;code&gt;onStop&lt;/code&gt; and &lt;code&gt;onReady&lt;/code&gt; callbacks. If there is an error, it is passed as an argument to &lt;code&gt;onStop&lt;/code&gt;. If a function is passed instead of an object, it is interpreted as an &lt;code&gt;onReady&lt;/code&gt; callback.</source>
          <target state="translated">オプション。 &lt;code&gt;onStop&lt;/code&gt; および &lt;code&gt;onReady&lt;/code&gt; コールバックが含まれる場合があります。エラーが発生した場合は、引数として &lt;code&gt;onStop&lt;/code&gt; に渡されます。オブジェクトの代わりに関数が渡されると、 &lt;code&gt;onReady&lt;/code&gt; コールバックとして解釈されます。</target>
        </trans-unit>
        <trans-unit id="278619d19810441639858f0bd82c7df83403f531" translate="yes" xml:space="preserve">
          <source>Optional. The 24-character hexadecimal contents of the ObjectID to create</source>
          <target state="translated">オプション。作成するObjectIDの24文字の16進数の内容。</target>
        </trans-unit>
        <trans-unit id="40b318f18ba6c3dc352b80788058488f3361d8aa" translate="yes" xml:space="preserve">
          <source>Optional. The data context in which to include the template.</source>
          <target state="translated">省略可能です。テンプレートをインクルードするデータコンテキスト。</target>
        </trans-unit>
        <trans-unit id="eebf8c88808ac3a633db6dd38f739b626cb7d94d" translate="yes" xml:space="preserve">
          <source>Optional. The function to run when an error happens in the Computation. The only argument it receives is the Error thrown. Defaults to the error being logged to the console.</source>
          <target state="translated">オプション。計算でエラーが発生したときに実行される関数。この関数が受け取る引数はError thrownのみです。デフォルトでは,エラーはコンソールに記録されます.</target>
        </trans-unit>
        <trans-unit id="c83372ac3b89f75804252c05606d98ef60ec719c" translate="yes" xml:space="preserve">
          <source>Optional. Which address of the user's to send the email to. This address must be in the user's &lt;code&gt;emails&lt;/code&gt; list. Defaults to the first email in the list.</source>
          <target state="translated">オプション。メールを送信するユーザーのアドレス。このアドレスは、ユーザーの &lt;code&gt;emails&lt;/code&gt; リストに含まれている必要があります。デフォルトでは、リストの最初のメールになります。</target>
        </trans-unit>
        <trans-unit id="33ada2561149e7d23b2d350f77413b812aeee38e" translate="yes" xml:space="preserve">
          <source>Optional. Which address of the user's to send the email to. This address must be in the user's &lt;code&gt;emails&lt;/code&gt; list. Defaults to the first unverified email in the list.</source>
          <target state="translated">オプション。メールを送信するユーザーのアドレス。このアドレスは、ユーザーの &lt;code&gt;emails&lt;/code&gt; リストに含まれている必要があります。デフォルトでは、リスト内の未確認の最初のメールになります。</target>
        </trans-unit>
        <trans-unit id="2f56f5aa4cbe7513bc2d9a6bdd47cc2223ce6aca" translate="yes" xml:space="preserve">
          <source>Optionally, adds version constraints. Running &lt;code&gt;meteor add package@1.1.0&lt;/code&gt; will add the package at version &lt;code&gt;1.1.0&lt;/code&gt; or higher (but not &lt;code&gt;2.0.0&lt;/code&gt; or higher). If you want to use version &lt;code&gt;1.1.0&lt;/code&gt; exactly, use &lt;code&gt;meteor add package@=1.1.0&lt;/code&gt;. You can also &amp;lsquo;or&amp;rsquo; constraints together: for example, &lt;code&gt;meteor add 'package@=1.0.0 || =2.0.1'&lt;/code&gt; means either 1.0.0 (exactly) or 2.0.1 (exactly).</source>
          <target state="translated">オプションで、バージョンの制約を追加します。 &lt;code&gt;meteor add package@1.1.0&lt;/code&gt; を実行すると、パッケージがバージョン &lt;code&gt;1.1.0&lt;/code&gt; 以降（ただし &lt;code&gt;2.0.0&lt;/code&gt; 以降ではない）で追加されます。バージョン &lt;code&gt;1.1.0&lt;/code&gt; を正確に使用したい場合は、 &lt;code&gt;meteor add package@=1.1.0&lt;/code&gt; を使用してください。制約を一緒に「or」することもできます。たとえば、 &lt;code&gt;meteor add 'package@=1.0.0 || =2.0.1'&lt;/code&gt; は、1.0.0（正確に）または2.0.1（正確に）を意味します。</target>
        </trans-unit>
        <trans-unit id="f4e349444562c4e622ed3b666533b3b816ba0ada" translate="yes" xml:space="preserve">
          <source>Optionally, you can specify &lt;code&gt;--keystore&lt;/code&gt; to use a different keystore. Don&amp;rsquo;t forget to specify the same keystore when signing the APK.</source>
          <target state="translated">オプションで、別のキーストアを使用するように &lt;code&gt;--keystore&lt;/code&gt; を指定できます。APKの署名時に同じキーストアを指定することを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="e6706c19aec47d4686c9813cdbd6ac4ed3a000bb" translate="yes" xml:space="preserve">
          <source>Optionally: Create an Android Virtual Device to run apps on an emulator</source>
          <target state="translated">オプションで Android仮想デバイスを作成してエミュレータ上でアプリを実行する</target>
        </trans-unit>
        <trans-unit id="5364fd6be6783cb880d7c0a1a5a2295f6323d8f4" translate="yes" xml:space="preserve">
          <source>Optionally: Creating an Android Virtual Device (AVD) to run apps on an emulator</source>
          <target state="translated">オプションで Android仮想デバイス(AVD)を作成してエミュレータ上でアプリを動作させる</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="3f8bdb1a6725318bd675ab83c4c58b43596fef29" translate="yes" xml:space="preserve">
          <source>Options passed on to &lt;a href=&quot;#http_call&quot;&gt;&lt;code&gt;HTTP.call&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#http_call&quot;&gt; &lt;code&gt;HTTP.call&lt;/code&gt; に&lt;/a&gt;渡されるオプション。</target>
        </trans-unit>
        <trans-unit id="296f90d0078ca72b5d7373a674a7f47df0948861" translate="yes" xml:space="preserve">
          <source>Options to customize emails sent from the Accounts system.</source>
          <target state="translated">アカウントシステムから送信されるメールをカスタマイズするオプション。</target>
        </trans-unit>
        <trans-unit id="198374d30341e432a4012d344f967bf53449e96f" translate="yes" xml:space="preserve">
          <source>Or you can wait for a session variable to have a certain value, and do something the first time it does, calling &lt;code&gt;stop&lt;/code&gt; on the computation to prevent further rerunning:</source>
          <target state="translated">または、セッション変数が特定の値になるのを待って、初めて実行するときに何かを実行し、それ以上の再実行を防ぐために計算を &lt;code&gt;stop&lt;/code&gt; することができます。</target>
        </trans-unit>
        <trans-unit id="2b895a822fda3ad31b9fc8dd367ab3a20f6e47e5" translate="yes" xml:space="preserve">
          <source>Organizing publications</source>
          <target state="translated">出版物の整理</target>
        </trans-unit>
        <trans-unit id="639034643937477923c42c76a4bd0f53194aeaa0" translate="yes" xml:space="preserve">
          <source>Original &lt;a href=&quot;https://github.com/arunoda/meteor-up&quot;&gt;Meteor Up&lt;/a&gt; (not generally recommended any longer)</source>
          <target state="translated">元の&lt;a href=&quot;https://github.com/arunoda/meteor-up&quot;&gt;流星&lt;/a&gt;（通常は推奨されなくなりました）</target>
        </trans-unit>
        <trans-unit id="5df772b1313681645dfd60212b4ec8ee6fb9b4b1" translate="yes" xml:space="preserve">
          <source>Other DOM events are available as well, but for the events above, Meteor has taken some care to ensure that they work uniformly in all browsers.</source>
          <target state="translated">他の DOM イベントも利用できますが、上記のイベントについては、すべてのブラウザで統一して動作するように Meteor はいくつかの注意を払っています。</target>
        </trans-unit>
        <trans-unit id="67ea52f1a7ae74f014909d25b0bddf410e9fbbb3" translate="yes" xml:space="preserve">
          <source>Other considerations</source>
          <target state="translated">その他の考慮事項</target>
        </trans-unit>
        <trans-unit id="a3634dabd3bfa7d228620cba5159e1dbf8a66c93" translate="yes" xml:space="preserve">
          <source>Other deployments &lt;em&gt;may&lt;/em&gt; have control panel options or may need to be manually configured on the the proxy server (e.g. HAProxy, nginx, etc.). The articles linked above provide some assistance on this.</source>
          <target state="translated">他のデプロイメントに&lt;em&gt;は&lt;/em&gt;、コントロールパネルオプションがある場合や、プロキシサーバーで手動で構成する必要がある場合があります（HAProxy、nginxなど）。上記のリンクされた記事は、これについてのいくつかの支援を提供します。</target>
        </trans-unit>
        <trans-unit id="1b37a5b9b8e1acc3fca24b207aed275166d10ade" translate="yes" xml:space="preserve">
          <source>Other developers will also need to run the &lt;code&gt;npm link&lt;/code&gt; command.</source>
          <target state="translated">他の開発者も &lt;code&gt;npm link&lt;/code&gt; コマンドを実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="164e07c655074e1b2ae5980c4f633a5d76cf5e09" translate="yes" xml:space="preserve">
          <source>Other options for React</source>
          <target state="translated">React のための他のオプション</target>
        </trans-unit>
        <trans-unit id="70635cabe306913f063e2fcd7298d84a798bcc05" translate="yes" xml:space="preserve">
          <source>Our main server entry point &lt;code&gt;server/main.js&lt;/code&gt; then imports this startup module. You can see that here we don&amp;rsquo;t actually import any variables from these files - we just import them so that they execute in this order.</source>
          <target state="translated">次に、メインサーバーのエントリポイント &lt;code&gt;server/main.js&lt;/code&gt; がこのスタートアップモジュールをインポートします。ここでは、これらのファイルから変数を実際にインポートしていないことがわかります。この順序で実行されるようにインポートするだけです。</target>
        </trans-unit>
        <trans-unit id="37b702ca6bad6eaff621f2553351bebfbf853710" translate="yes" xml:space="preserve">
          <source>Our reusable components were a natural fit for a unit test; similarly our smart components tend to require an integration test to really be exercised properly, as the job of a smart component is to bring data together and supply it to a reusable component.</source>
          <target state="translated">私たちの再利用可能なコンポーネントは、ユニットテストには自然に適していました。同様に、私たちのスマートコンポーネントは、データをまとめて再利用可能なコンポーネントに供給することがスマートコンポーネントの仕事であるため、実際に適切に実行するために統合テストを必要とする傾向があります。</target>
        </trans-unit>
        <trans-unit id="87ae6abb901f61c0109d4a4133ce7187ec9ab693" translate="yes" xml:space="preserve">
          <source>Override &lt;code&gt;allow&lt;/code&gt; rules.</source>
          <target state="translated">&lt;code&gt;allow&lt;/code&gt; ルールを上書きします。</target>
        </trans-unit>
        <trans-unit id="fce211bc2d7c6f0b086778b048b5ae2383dee5f6" translate="yes" xml:space="preserve">
          <source>Override the default ROOT_URL from the server environment. For example: &quot;&lt;code&gt;http://foo.example.com&lt;/code&gt;&quot;</source>
          <target state="translated">サーバー環境からデフォルトのROOT_URLをオーバーライドします。例： &quot; &lt;code&gt;http://foo.example.com&lt;/code&gt; &quot;</target>
        </trans-unit>
        <trans-unit id="d4d7fd77ff2c8adb1ca651c2a32212de473f3a13" translate="yes" xml:space="preserve">
          <source>Overrides &lt;code&gt;transform&lt;/code&gt; on the &lt;a href=&quot;#collections&quot;&gt;&lt;code&gt;Collection&lt;/code&gt;&lt;/a&gt; for this cursor. Pass &lt;code&gt;null&lt;/code&gt; to disable transformation.</source>
          <target state="translated">このカーソルの&lt;a href=&quot;#collections&quot;&gt; &lt;code&gt;Collection&lt;/code&gt; &lt;/a&gt;オーバーライドを &lt;code&gt;transform&lt;/code&gt; します。変換を無効にするには &lt;code&gt;null&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="a00758d523153346459585439cafa8a44ae7e9c5" translate="yes" xml:space="preserve">
          <source>Overrides &lt;code&gt;transform&lt;/code&gt; on the &lt;a href=&quot;#collections&quot;&gt;&lt;code&gt;Collection&lt;/code&gt;&lt;/a&gt;. Pass &lt;code&gt;null&lt;/code&gt; to disable transformation.</source>
          <target state="translated">オーバーライドは&lt;a href=&quot;#collections&quot;&gt; &lt;code&gt;Collection&lt;/code&gt; &lt;/a&gt; &lt;code&gt;transform&lt;/code&gt; します。変換を無効にするには &lt;code&gt;null&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="de89f3f877451fb0093f6e83b2ed4cf84c19913a" translate="yes" xml:space="preserve">
          <source>Overriding packages with a local version</source>
          <target state="translated">ローカルバージョンのパッケージをオーバーライドする</target>
        </trans-unit>
        <trans-unit id="a52e338d221104d419ade7367598cf8aeedb21c6" translate="yes" xml:space="preserve">
          <source>Overriding published packages with a local version</source>
          <target state="translated">公開されているパッケージをローカルバージョンで上書きする</target>
        </trans-unit>
        <trans-unit id="70fdee66e5d3c3ea7620b52d6faeac128a5a13ed" translate="yes" xml:space="preserve">
          <source>Own server</source>
          <target state="translated">自社サーバー</target>
        </trans-unit>
        <trans-unit id="124a65c4b69218e19c3c3a7964d9775dc6b18e3d" translate="yes" xml:space="preserve">
          <source>PORT</source>
          <target state="translated">PORT</target>
        </trans-unit>
        <trans-unit id="b3f9e003d846ea5821f7feac5cede2f4649277b7" translate="yes" xml:space="preserve">
          <source>Package naming</source>
          <target state="translated">パッケージのネーミング</target>
        </trans-unit>
        <trans-unit id="992d908f46a352a8ea2d55fd17eac4884a01442d" translate="yes" xml:space="preserve">
          <source>Package source code in directories indicated by setting a &lt;code&gt;METEOR_PACKAGE_DIRS&lt;/code&gt; environment variable before running any &lt;code&gt;meteor&lt;/code&gt; command. You can add multiple directories by separating the paths with a &lt;code&gt;:&lt;/code&gt; on OSX or Linux, or a &lt;code&gt;;&lt;/code&gt; on Windows. For example: &lt;code&gt;METEOR_PACKAGE_DIRS=../first/directory:../second/directory&lt;/code&gt;, or on Windows: &lt;code&gt;set PACKAGE_DIRS=..\first\directory;..\second\directory&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;meteor&lt;/code&gt; コマンドを実行する前に、 &lt;code&gt;METEOR_PACKAGE_DIRS&lt;/code&gt; 環境変数を設定して示されたディレクトリにソースコードをパッケージ化します。あなたがパスを分離することにより、複数のディレクトリを追加することができます &lt;code&gt;:&lt;/code&gt; OSXやLinux、または上 &lt;code&gt;;&lt;/code&gt; Windowsの場合。例： &lt;code&gt;METEOR_PACKAGE_DIRS=../first/directory:../second/directory&lt;/code&gt; 、またはWindows： &lt;code&gt;set PACKAGE_DIRS=..\first\directory;..\second\directory&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ff4ded7d2d80dbbe9dba28169810d901d192738a" translate="yes" xml:space="preserve">
          <source>Package source code in the &lt;code&gt;packages/&lt;/code&gt; directory inside your app.</source>
          <target state="translated">アプリ内の &lt;code&gt;packages/&lt;/code&gt; ディレクトリにあるソースコードをパッケージ化します。</target>
        </trans-unit>
        <trans-unit id="38dcedf5b8b3e820deb4726844567d15bda96f48" translate="yes" xml:space="preserve">
          <source>Package this project up for deployment. The output is a directory with several build artifacts:</source>
          <target state="translated">このプロジェクトをデプロイ用にパッケージ化します。出力されるのは、いくつかのビルド成果物を含むディレクトリです。</target>
        </trans-unit>
        <trans-unit id="a0fefd67a387acb4b67fc7ba1d449b65c7ef1ac4" translate="yes" xml:space="preserve">
          <source>Package-scope variables declared in &lt;code&gt;.js&lt;/code&gt; files are visible in any &lt;code&gt;.coffee&lt;/code&gt; files in the same app or project.</source>
          <target state="translated">&lt;code&gt;.js&lt;/code&gt; ファイルで宣言されたパッケージスコープ変数は、同じアプリまたはプロジェクトのすべての &lt;code&gt;.coffee&lt;/code&gt; ファイルに表示されます。</target>
        </trans-unit>
        <trans-unit id="80bde04107a079b0607142294524a55d82fd02b5" translate="yes" xml:space="preserve">
          <source>Package.describe()</source>
          <target state="translated">Package.describe()</target>
        </trans-unit>
        <trans-unit id="40d3196613f4d36bcf4702009d05dca099daef2c" translate="yes" xml:space="preserve">
          <source>Package.js</source>
          <target state="translated">Package.js</target>
        </trans-unit>
        <trans-unit id="46b4924e5f7b4c743a8b72a4bb853eded12359d2" translate="yes" xml:space="preserve">
          <source>Package.onTest()</source>
          <target state="translated">Package.onTest()</target>
        </trans-unit>
        <trans-unit id="81a69db763dd8a26b5ad050f5c8512ef444d4068" translate="yes" xml:space="preserve">
          <source>Package.onUse()</source>
          <target state="translated">Package.onUse()</target>
        </trans-unit>
        <trans-unit id="6478fd5c20ceaba1753c1e0c0afe60eb2307fafc" translate="yes" xml:space="preserve">
          <source>Package.registerBuildPlugin()</source>
          <target state="translated">Package.registerBuildPlugin()</target>
        </trans-unit>
        <trans-unit id="0a999012ffb87b3edac99adbdfc498b12831a1e2" translate="yes" xml:space="preserve">
          <source>Packages</source>
          <target state="translated">Packages</target>
        </trans-unit>
        <trans-unit id="3559066107681241b25756133ad42bd620942809" translate="yes" xml:space="preserve">
          <source>Packages being depended on. Package names may be suffixed with an @version tag.</source>
          <target state="translated">依存しているパッケージ。パッケージ名のサフィックスには @version タグを付けることができます。</target>
        </trans-unit>
        <trans-unit id="9d183b52b19943da11c4170d725cf78bbea93f62" translate="yes" xml:space="preserve">
          <source>Packages can also specify a &lt;em&gt;lazy&lt;/em&gt; main module:</source>
          <target state="translated">パッケージは&lt;em&gt;遅延&lt;/em&gt;メインモジュールを指定することもできます：</target>
        </trans-unit>
        <trans-unit id="b6e8f00c5476d774092fd6a8ccc8664d08515763" translate="yes" xml:space="preserve">
          <source>Paginating subscriptions</source>
          <target state="translated">サブスクリプションのページ分割</target>
        </trans-unit>
        <trans-unit id="100325b8d6de92dc6ff09cd2c078133755bf274f" translate="yes" xml:space="preserve">
          <source>Pagination</source>
          <target state="translated">Pagination</target>
        </trans-unit>
        <trans-unit id="b69c4398784057ef536416738bdcae23d20b3bbd" translate="yes" xml:space="preserve">
          <source>Parse a string into an EJSON value. Throws an error if the string is not valid EJSON.</source>
          <target state="translated">文字列をパースしてEJSON値に変換します。文字列が有効なEJSONでない場合はエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="08867752f8690d85f84a6d22987bd22c41a05fbe" translate="yes" xml:space="preserve">
          <source>Particularly useful to assert that arguments to a function have the right types and structure.</source>
          <target state="translated">関数の引数が正しい型と構造を持っていることを主張するのに特に便利です。</target>
        </trans-unit>
        <trans-unit id="7891c2d0da86a3f1f310af54f03e3780c047c67a" translate="yes" xml:space="preserve">
          <source>Pass callbacks</source>
          <target state="translated">コールバックをパスする</target>
        </trans-unit>
        <trans-unit id="36442a8d8a3c36e2ebf4aab70c62b7f1ddde30b9" translate="yes" xml:space="preserve">
          <source>Pass data into helpers</source>
          <target state="translated">データをヘルパーに渡す</target>
        </trans-unit>
        <trans-unit id="cc69b17cb479e5950ec98c31f0c519a94ea149b8" translate="yes" xml:space="preserve">
          <source>Pass that data into a sub-component.</source>
          <target state="translated">そのデータをサブコンポーネントに渡します。</target>
        </trans-unit>
        <trans-unit id="b8005a5cc62aef397b14d280f28e46b700ec684f" translate="yes" xml:space="preserve">
          <source>Passed to &lt;a href=&quot;https://docs.meteor.com/api/pubsub.html#Meteor-subscribe&quot;&gt;&lt;code&gt;Meteor.subscribe&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.meteor.com/api/pubsub.html#Meteor-subscribe&quot;&gt; &lt;code&gt;Meteor.subscribe&lt;/code&gt; に&lt;/a&gt;渡されます。</target>
        </trans-unit>
        <trans-unit id="d722643138fd0d0458a3ebed2b3bcd0d8f537e78" translate="yes" xml:space="preserve">
          <source>Passing HTML content as a template argument</source>
          <target state="translated">HTMLコンテンツをテンプレートの引数として渡す</target>
        </trans-unit>
        <trans-unit id="157af5b91dc8ffc21bf2ad00775dc3df896e8e9f" translate="yes" xml:space="preserve">
          <source>Passing callbacks to a React component</source>
          <target state="translated">React コンポーネントにコールバックを渡す</target>
        </trans-unit>
        <trans-unit id="4f68ed21fc56c7f5b451bd1d1d2f4f3db03f183a" translate="yes" xml:space="preserve">
          <source>Passing options</source>
          <target state="translated">パスのオプション</target>
        </trans-unit>
        <trans-unit id="3d3f2741fe36bd01f082ca434bfece2676c035e4" translate="yes" xml:space="preserve">
          <source>Password login</source>
          <target state="translated">パスワードログイン</target>
        </trans-unit>
        <trans-unit id="02c8304104610b987415dc656a1a2308b1ca7be0" translate="yes" xml:space="preserve">
          <source>Passwords</source>
          <target state="translated">Passwords</target>
        </trans-unit>
        <trans-unit id="2b55f9458e3b539989f93bf5de2466011102d449" translate="yes" xml:space="preserve">
          <source>Paste &lt;code&gt;ext install vscode-eslint&lt;/code&gt; in the command window and press &lt;code&gt;Enter&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ext install vscode-eslint&lt;/code&gt; をコマンドウィンドウに貼り付け、 &lt;code&gt;Enter&lt;/code&gt; キーを押します</target>
        </trans-unit>
        <trans-unit id="96823d127a0a2757a51b79120bccf6794fd59de8" translate="yes" xml:space="preserve">
          <source>Path Evaluation</source>
          <target state="translated">パス評価</target>
        </trans-unit>
        <trans-unit id="3288936e66f01aaff1d38efc36d523c466c42db3" translate="yes" xml:space="preserve">
          <source>Paths to the asset files.</source>
          <target state="translated">アセットファイルへのパス。</target>
        </trans-unit>
        <trans-unit id="9baec68cbb2e5a72591c94aa0a227d154c229135" translate="yes" xml:space="preserve">
          <source>Paths to the source files.</source>
          <target state="translated">ソースファイルへのパス。</target>
        </trans-unit>
        <trans-unit id="232cf18164f45c3e223a7b945aa9a257060582e2" translate="yes" xml:space="preserve">
          <source>Patterns for building front end components in a performant way in Meteor.</source>
          <target state="translated">Meteorでフロントエンドコンポーネントをパフォーマンスの高い方法で構築するためのパターン。</target>
        </trans-unit>
        <trans-unit id="d804ab55cc86bf1b710df0bbe6aa6c5ac254ad4b" translate="yes" xml:space="preserve">
          <source>Patterns for data loading</source>
          <target state="translated">データローディングのパターン</target>
        </trans-unit>
        <trans-unit id="98de53a371d648152a678ae4f111b5738a9daa69" translate="yes" xml:space="preserve">
          <source>Peer npm dependencies</source>
          <target state="translated">ピアの npm 依存関係</target>
        </trans-unit>
        <trans-unit id="f02d80342fe6db607b38a6b0ddab4a497d829b81" translate="yes" xml:space="preserve">
          <source>Per the usual CoffeeScript convention, CoffeeScript variables are file-scoped by default (visible only in the &lt;code&gt;.coffee&lt;/code&gt; file where they are defined.)</source>
          <target state="translated">通常のCoffeeScript規則 &lt;code&gt;.coffee&lt;/code&gt; 、CoffeeScript変数はデフォルトでファイルスコープになります（定義されている.coffeeファイルでのみ表示されます）。</target>
        </trans-unit>
        <trans-unit id="590b9cacaaf73049eda1be3a16cce0ac36d396f2" translate="yes" xml:space="preserve">
          <source>Per-component loading state</source>
          <target state="translated">コンポーネントごとの負荷状態</target>
        </trans-unit>
        <trans-unit id="e7510d7974e57faa2d28ee023244b247ee02f995" translate="yes" xml:space="preserve">
          <source>Per-document permissions</source>
          <target state="translated">ドキュメントごとのパーミッション</target>
        </trans-unit>
        <trans-unit id="2a88f3290f242252e3664464a4e41627ddef5894" translate="yes" xml:space="preserve">
          <source>Perform an outbound HTTP request.</source>
          <target state="translated">アウトバウンド HTTP リクエストを実行します。</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="5bfe7b2a634812bc1553d4395081586562f43e90" translate="yes" xml:space="preserve">
          <source>Permits the use of &lt;a href=&quot;http://flowtype.org/&quot;&gt;Flow&lt;/a&gt; type annotations. These annotations are simply stripped from the code, so they have no effect on the code&amp;rsquo;s behavior, but you can run the &lt;code&gt;flow&lt;/code&gt; tool over your code to check the types if desired.</source>
          <target state="translated">&lt;a href=&quot;http://flowtype.org/&quot;&gt;フロー&lt;/a&gt;タイプアノテーションの使用を許可します。これらの注釈はコードから単純に取り除かれているため、コードの動作には影響しませんが、必要に応じてコードに対して &lt;code&gt;flow&lt;/code&gt; ツールを実行して型を確認できます。</target>
        </trans-unit>
        <trans-unit id="9a0f934580e35c80e3730498184ab70cc4e4b77d" translate="yes" xml:space="preserve">
          <source>Places to translate</source>
          <target state="translated">翻訳する場所</target>
        </trans-unit>
        <trans-unit id="a9e7f1e55e3a73081cc8e3b64ff6abda3bd53bfe" translate="yes" xml:space="preserve">
          <source>Please refer to &lt;a href=&quot;http://developer.android.com/sdk/installing/index.html?pkg=studio&quot;&gt;the Android Studio installation instructions&lt;/a&gt; for more details on the exact steps to follow.</source>
          <target state="translated">実行する正確な手順の詳細については&lt;a href=&quot;http://developer.android.com/sdk/installing/index.html?pkg=studio&quot;&gt;、Android Studioのインストール手順&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6620c8bfa2ab84e1a169c0014399408aff658292" translate="yes" xml:space="preserve">
          <source>Plugin.registerSourceHandler()</source>
          <target state="translated">Plugin.registerSourceHandler()</target>
        </trans-unit>
        <trans-unit id="335abfa9c587852e79cfcc36d36e3e67d55e4219" translate="yes" xml:space="preserve">
          <source>Plugins are identified by a name, which is generally the same as their npm package name. The current convention is for plugin names to start with &lt;code&gt;cordova-plugin-&lt;/code&gt;, but not all third-party plugins adhere to this.</source>
          <target state="translated">プラグインは名前で識別されます。これは通常、npmパッケージ名と同じです。現在の規則では、プラグイン名は &lt;code&gt;cordova-plugin-&lt;/code&gt; で始まるようになっていますが、すべてのサードパーティプラグインがこれに準拠しているわけではありません。</target>
        </trans-unit>
        <trans-unit id="86fbb32f1e8ef65605e5487472c87df7855842f5" translate="yes" xml:space="preserve">
          <source>Plugins are installed from &lt;a href=&quot;http://plugins.cordova.io/&quot;&gt;plugins.cordova.io&lt;/a&gt;, so the plugins and versions specified must exist there. Alternatively, the version can be replaced with a GitHub tarball URL as described in the &lt;a href=&quot;https://guide.meteor.com/mobile.html#cordova-plugins&quot;&gt;Cordova&lt;/a&gt; page of the Meteor wiki on GitHub.</source>
          <target state="translated">プラグインは&lt;a href=&quot;http://plugins.cordova.io/&quot;&gt;plugins.cordova.io&lt;/a&gt;からインストールされるため、指定されたプラグインとバージョンがそこに存在する必要があります。または、GitHub のMeteor wikiの&lt;a href=&quot;https://guide.meteor.com/mobile.html#cordova-plugins&quot;&gt;Cordova&lt;/a&gt;ページで説明されているように、バージョンをGitHub tarball URLに置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="228a070d3b65ddcff5b58359e120b5be974221c3" translate="yes" xml:space="preserve">
          <source>Point 3. can usually be resolved by placing the hook in the &lt;em&gt;Method&lt;/em&gt; that calls the mutator, rather than the hook itself. Although this is an imperfect compromise (as we need to be careful if we ever add another Method that calls that mutator in the future), it is better than writing a bunch of code that is never actually called (which is guaranteed to not work!), or giving the impression that your hook is more general that it actually is.</source>
          <target state="translated">ポイント3.は通常、フック自体ではなく、ミューテーターを呼び出す&lt;em&gt;メソッドに&lt;/em&gt;フックを配置することで解決できます。これは不完全な妥協ですが（将来、そのミューテーターを呼び出す別のメソッドを追加する場合は注意する必要があるため）、実際には呼び出されないコードの束を書くよりも優れています（動作しないことが保証されています！ ）、またはフックが実際よりも一般的であるという印象を与えます。</target>
        </trans-unit>
        <trans-unit id="c65de7239130b2221dc156af1c9b5fa8125b9bf3" translate="yes" xml:space="preserve">
          <source>Polyfills</source>
          <target state="translated">Polyfills</target>
        </trans-unit>
        <trans-unit id="34bc8e7aa201f66589b1ba0065873cfcd166e05f" translate="yes" xml:space="preserve">
          <source>Polyfills for the following &lt;a href=&quot;https://github.com/zloirock/core-js#ecmascript-6-array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;-related methods:</source>
          <target state="translated">次の&lt;a href=&quot;https://github.com/zloirock/core-js#ecmascript-6-array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;関連メソッドのポリフィル：</target>
        </trans-unit>
        <trans-unit id="07755feac4fba33effd2d9d90f40e3faa73ea252" translate="yes" xml:space="preserve">
          <source>Polyfills for the following &lt;a href=&quot;https://github.com/zloirock/core-js#ecmascript-6-function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt;-related properties:</source>
          <target state="translated">次の&lt;a href=&quot;https://github.com/zloirock/core-js#ecmascript-6-function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt;関連プロパティのポリフィル：</target>
        </trans-unit>
        <trans-unit id="58c7d8dbbfcc23cf7005b3d896385973b16c9c22" translate="yes" xml:space="preserve">
          <source>Polyfills for the following &lt;a href=&quot;https://github.com/zloirock/core-js#ecmascript-6-object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;-related methods:</source>
          <target state="translated">次の&lt;a href=&quot;https://github.com/zloirock/core-js#ecmascript-6-object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;関連メソッドのポリフィル：</target>
        </trans-unit>
        <trans-unit id="de56c0b4c6e6e868bb32a426e3de2b6687260ddc" translate="yes" xml:space="preserve">
          <source>Polyfills for the following &lt;a href=&quot;https://github.com/zloirock/core-js#ecmascript-6-string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;-related methods:</source>
          <target state="translated">次の&lt;a href=&quot;https://github.com/zloirock/core-js#ecmascript-6-string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;関連メソッドのポリフィル：</target>
        </trans-unit>
        <trans-unit id="9e7ba4d9e9da383d37b24f34e030a3b9d520ba8c" translate="yes" xml:space="preserve">
          <source>Popup versus redirect flow</source>
          <target state="translated">ポップアップ対リダイレクトの流れ</target>
        </trans-unit>
        <trans-unit id="b2ef221e3193ecc713338eb88d02a0cab9694e2a" translate="yes" xml:space="preserve">
          <source>Possible values:</source>
          <target state="translated">可能な値</target>
        </trans-unit>
        <trans-unit id="f6ffee1f7d5964009b84b8169b1742ea48e1ff76" translate="yes" xml:space="preserve">
          <source>PostCSS and Autoprefixer</source>
          <target state="translated">PostCSSとAutoprefixer</target>
        </trans-unit>
        <trans-unit id="8f5aa2ea35759e808ce8b0f3efaca68a7e8a756c" translate="yes" xml:space="preserve">
          <source>Pre-built package from Atmosphere. The package is cached in &lt;code&gt;~/.meteor/packages&lt;/code&gt; on Mac/Linux or &lt;code&gt;%LOCALAPPDATA%\.meteor\packages&lt;/code&gt; on Windows, and only loaded into your app as it is built.</source>
          <target state="translated">Atmosphereのビルド済みパッケージ。パッケージは、Mac / Linuxでは &lt;code&gt;~/.meteor/packages&lt;/code&gt; に、Windowsでは &lt;code&gt;%LOCALAPPDATA%\.meteor\packages&lt;/code&gt; にキャッシュされ、ビルド時にアプリにのみロードされます。</target>
        </trans-unit>
        <trans-unit id="8ef61c9b31cf9ea723f28d7ca56b472545610744" translate="yes" xml:space="preserve">
          <source>Pre-built templates for &lt;a href=&quot;https://github.com/meteor-useraccounts/core/blob/master/Guide.md#available-versions&quot;&gt;Bootstrap, Semantic UI, Materialize, and more&lt;/a&gt;. These templates don&amp;rsquo;t come with the actual CSS framework, so you can pick your favorite Bootstrap package, for example.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/meteor-useraccounts/core/blob/master/Guide.md#available-versions&quot;&gt;ブートストラップ、セマンティックUI、マテリアライズなどの&lt;/a&gt;事前構築されたテンプレート。これらのテンプレートには実際のCSSフレームワークが付属していないため、たとえば、お気に入りのBootstrapパッケージを選択できます。</target>
        </trans-unit>
        <trans-unit id="c433f05ddcb133d3d51b09313cede630ce86da8e" translate="yes" xml:space="preserve">
          <source>Prefer &lt;code&gt;{{#each .. in}}&lt;/code&gt;</source>
          <target state="translated">好む &lt;code&gt;{{#each .. in}}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9dfd349ebee555eb8d652be20dad971cae439eca" translate="yes" xml:space="preserve">
          <source>Preferences</source>
          <target state="translated">Preferences</target>
        </trans-unit>
        <trans-unit id="0e98bb6276bc127f65da256ec5b9c547611366a7" translate="yes" xml:space="preserve">
          <source>Prevent all additional event handlers from being run on this event, including other handlers in this event map, handlers reached by bubbling, and handlers in other event maps.</source>
          <target state="translated">このイベントマップ内の他のハンドラ、バブリングによって到達したハンドラ、および他のイベントマップ内のハンドラを含む、このイベントで追加のイベントハンドラがすべて実行されるのを防止します。</target>
        </trans-unit>
        <trans-unit id="faf8b6ecf533db929aead9c23c1f9f63c398027f" translate="yes" xml:space="preserve">
          <source>Prevent the event from propagating (bubbling) up to other elements. Other event handlers matching the same element are still fired, in this and other event maps.</source>
          <target state="translated">イベントが他の要素に伝播(バブリング)しないようにします。同じ要素にマッチする他のイベントハンドラは、このイベントマップと他のイベントマップでは、まだ発射されます。</target>
        </trans-unit>
        <trans-unit id="83f18522da7a41cf571abe704c5847d66c561af4" translate="yes" xml:space="preserve">
          <source>Preventing re-renders</source>
          <target state="translated">再レンダリングの防止</target>
        </trans-unit>
        <trans-unit id="c93ae87b516695a9e5a6eb0423c6d99e44056720" translate="yes" xml:space="preserve">
          <source>Prevents the action the browser would normally take in response to this event, such as following a link or submitting a form. Further handlers are still called, but cannot reverse the effect.</source>
          <target state="translated">リンクをたどったり、フォームを送信したりするなど、ブラウザがこのイベントに反応して通常取るであろうアクションを防ぎます。さらなるハンドラは呼び出されますが、効果を逆にすることはできません。</target>
        </trans-unit>
        <trans-unit id="f54ff853ebbb4676d89beaa9d06a21eb19aff79d" translate="yes" xml:space="preserve">
          <source>Prevents this computation from rerunning.</source>
          <target state="translated">この計算が再実行されるのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="883267ed51228e6612dfdea9fdcd4c4f6b23711e" translate="yes" xml:space="preserve">
          <source>Previously, Meteor would automatically assume that any &lt;code&gt;MAIL_URL&lt;/code&gt; using port 465 was to be encrypted and automatically changed &lt;code&gt;smtp://&lt;/code&gt; to &lt;code&gt;smtps://&lt;/code&gt;. However, this is not always desired, and not always a safe assumption for Meteor.</source>
          <target state="translated">以前は、Meteorは、ポート465を使用する &lt;code&gt;MAIL_URL&lt;/code&gt; が暗号化され、自動的に &lt;code&gt;smtp://&lt;/code&gt; が &lt;code&gt;smtps://&lt;/code&gt; に変更されると自動的に想定していました。ただし、これは常に望ましいとは限らず、Meteorが常に安全であるとは限りません。</target>
        </trans-unit>
        <trans-unit id="9d885f783900e6c78128ccb66893a263d295ba0f" translate="yes" xml:space="preserve">
          <source>Probably the most fundamental type of UI change that requires animation is when items appear or disappear. In Blaze, we can use the &lt;a href=&quot;https://atmospherejs.com/percolate/momentum&quot;&gt;&lt;code&gt;percolate:momentum&lt;/code&gt; package&lt;/a&gt; to plug a standard set of animations from the &lt;a href=&quot;http://julian.com/research/velocity/&quot;&gt;&lt;code&gt;velocity animation library&lt;/code&gt;&lt;/a&gt; into such state changes.</source>
          <target state="translated">おそらく、アニメーションを必要とする最も基本的なタイプのUI変更は、アイテムが表示または非表示になるときです。Blazeでは、&lt;a href=&quot;https://atmospherejs.com/percolate/momentum&quot;&gt; &lt;code&gt;percolate:momentum&lt;/code&gt; パッケージ&lt;/a&gt;を使用して、&lt;a href=&quot;http://julian.com/research/velocity/&quot;&gt; &lt;code&gt;velocity animation library&lt;/code&gt; &lt;/a&gt;からのアニメーションの標準セットをそのような状態変化にプラグインできます。</target>
        </trans-unit>
        <trans-unit id="23559a789f2928b712b9afdd123e384e78bd7406" translate="yes" xml:space="preserve">
          <source>Process all reactive updates immediately and ensure that all invalidated computations are rerun.</source>
          <target state="translated">すべてのリアクティブ更新を直ちに処理し、無効になった計算がすべて再実行されるようにします。</target>
        </trans-unit>
        <trans-unit id="b1d472e424c03ff52490d1edc8a0e23f95babb92" translate="yes" xml:space="preserve">
          <source>Promises</source>
          <target state="translated">Promises</target>
        </trans-unit>
        <trans-unit id="2de846e277b8bd927a270771b3af25c725c98b4a" translate="yes" xml:space="preserve">
          <source>Property Name</source>
          <target state="translated">物件名</target>
        </trans-unit>
        <trans-unit id="1e685dbb842b631f007fd297b7933ec922f28e1c" translate="yes" xml:space="preserve">
          <source>Provide additional parameters to the authentication URI. Currently only supported with Google. See &lt;a href=&quot;https://developers.google.com/identity/protocols/OpenIDConnect#authenticationuriparameters&quot;&gt;Google Identity Platform documentation&lt;/a&gt;.</source>
          <target state="translated">認証URIに追加のパラメーターを提供します。現在Googleでのみサポートされています。&lt;a href=&quot;https://developers.google.com/identity/protocols/OpenIDConnect#authenticationuriparameters&quot;&gt;Google Identity Platformのドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="86f6211035ce87a4dd69dcd91d66589fe045fe00" translate="yes" xml:space="preserve">
          <source>Provide basic package information with &lt;code&gt;Package.describe(options)&lt;/code&gt;. To publish a package, you must define &lt;code&gt;summary&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Package.describe(options)&lt;/code&gt; で基本的なパッケージ情報を提供します。パッケージを公開するには、 &lt;code&gt;summary&lt;/code&gt; と &lt;code&gt;version&lt;/code&gt; 定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="f5719954a5742f2f63e294accbcce7945375bf98" translate="yes" xml:space="preserve">
          <source>Provide basic package information.</source>
          <target state="translated">基本的なパッケージ情報を提供する。</target>
        </trans-unit>
        <trans-unit id="b71bcd75aa59c4d7b3709bf728682072e335ae50" translate="yes" xml:space="preserve">
          <source>Provides a shorthand for function expressions. For example, &lt;code&gt;[1, 2, 3].map(x =&amp;gt; x + 1)&lt;/code&gt; evaluates to &lt;code&gt;[2, 3, 4]&lt;/code&gt;. If &lt;code&gt;this&lt;/code&gt; is used in the body of the arrow function, it will be automatically bound to the value of &lt;code&gt;this&lt;/code&gt; in the enclosing scope.</source>
          <target state="translated">関数式の省略表現を提供します。たとえば、 &lt;code&gt;[1, 2, 3].map(x =&amp;gt; x + 1)&lt;/code&gt; は &lt;code&gt;[2, 3, 4]&lt;/code&gt; 評価されます。場合は &lt;code&gt;this&lt;/code&gt; 矢印関数の本体で使用され、それが自動的にの値にバインドされます &lt;code&gt;this&lt;/code&gt; 囲みスコープで。</target>
        </trans-unit>
        <trans-unit id="9e50c06617663f961c6d0d4fb3cea248fbbbdf53" translate="yes" xml:space="preserve">
          <source>Provides an easy way to iterate over the elements of a collection:</source>
          <target state="translated">コレクションの要素を反復処理する簡単な方法を提供します。</target>
        </trans-unit>
        <trans-unit id="d69cc6df12ee1e81bdf2f06b4195121fe9873d3b" translate="yes" xml:space="preserve">
          <source>Publication behavior when arguments change</source>
          <target state="translated">引数が変更された場合の公開動作</target>
        </trans-unit>
        <trans-unit id="0855684c1444ece44c79b3612a7f4cfac9ae6e2a" translate="yes" xml:space="preserve">
          <source>Publications</source>
          <target state="translated">Publications</target>
        </trans-unit>
        <trans-unit id="1f1c22386ac3b78a59d85c050f8295515b9ddb38" translate="yes" xml:space="preserve">
          <source>Publications and Data Loading</source>
          <target state="translated">出版物とデータの読み込み</target>
        </trans-unit>
        <trans-unit id="7e546e644f955582ccca26ae2ed17b1ee720db7b" translate="yes" xml:space="preserve">
          <source>Publications and subscriptions</source>
          <target state="translated">出版物と購読</target>
        </trans-unit>
        <trans-unit id="616838de7576d6bafe8c82d1dfffa07bf76660ed" translate="yes" xml:space="preserve">
          <source>Publications and subscriptions are the primary way of dealing with data in Meteor&amp;rsquo;s DDP protocol, but lots of data sources use the popular REST protocol for their API. It&amp;rsquo;s useful to be able to convert between the two.</source>
          <target state="translated">パブリケーションとサブスクリプションは、MeteorのDDPプロトコルでデータを処理する主要な方法ですが、多くのデータソースは、APIに一般的なRESTプロトコルを使用しています。2つの間で変換できると便利です。</target>
        </trans-unit>
        <trans-unit id="44953c8c16399990df12c0e6808a11d0ef886924" translate="yes" xml:space="preserve">
          <source>Publications and userId</source>
          <target state="translated">出版物とuserId</target>
        </trans-unit>
        <trans-unit id="87c0348b446f1563f9b6f94095d33c09573cdbf7" translate="yes" xml:space="preserve">
          <source>Publications are not reactive, and they only re-run when the currently logged in &lt;code&gt;userId&lt;/code&gt; changes, which can be accessed through &lt;code&gt;this.userId&lt;/code&gt;. Because of this, it&amp;rsquo;s easy to accidentally write a publication that is secure when it first runs, but doesn&amp;rsquo;t respond to changes in the app environment. Let&amp;rsquo;s look at an example:</source>
          <target state="translated">パブリケーションはリアクティブではなく、現在ログインしている &lt;code&gt;userId&lt;/code&gt; が変更されたときにのみ再実行され、 &lt;code&gt;this.userId&lt;/code&gt; からアクセスできます。このため、最初の実行時に安全であるが、アプリ環境の変更に対応しないパブリケーションを誤って作成することは簡単です。例を見てみましょう：</target>
        </trans-unit>
        <trans-unit id="1da23a61b8eb53858580daf8d166a724341d993a" translate="yes" xml:space="preserve">
          <source>Publications are not the only place the client gets data from the server. The set of source code files and static assets that are served by your application server could also potentially contain sensitive data:</source>
          <target state="translated">クライアントがサーバからデータを取得するのは、出版物だけではありません。アプリケーションサーバが提供するソースコードファイルや静的アセットのセットにも、機密データが含まれている可能性があります。</target>
        </trans-unit>
        <trans-unit id="1158921c3af55d6ea4b5c57c99d9d4837b8606d6" translate="yes" xml:space="preserve">
          <source>Publications are the primary way a Meteor server can make data available to a client. While with Methods the primary concern was making sure users can&amp;rsquo;t modify the database in unexpected ways, with publications the main issue is filtering the data being returned so that a malicious user can&amp;rsquo;t get access to data they aren&amp;rsquo;t supposed to see.</source>
          <target state="translated">パブリケーションは、Meteorサーバーがクライアントがデータを利用できるようにする主要な方法です。メソッドでは、ユーザーがデータベースを予期しない方法で変更できないようにすることが主な関心事でしたが、パブリケーションでは、悪意のあるユーザーが予期しないデータにアクセスできないように、返されるデータをフィルタリングすることが主な問題です。 。</target>
        </trans-unit>
        <trans-unit id="fe963bdf7fb16fbc6ecc5e0bdcdcb4f31fc3bc0a" translate="yes" xml:space="preserve">
          <source>Publish a record set.</source>
          <target state="translated">レコードセットを発行します。</target>
        </trans-unit>
        <trans-unit id="0ecab94e8396634ea220582c8c290d482a5057ef" translate="yes" xml:space="preserve">
          <source>Publish and subscribe</source>
          <target state="translated">発行と購読</target>
        </trans-unit>
        <trans-unit id="8a7727674e3f1ce41f843f4991b95a53deb41f11" translate="yes" xml:space="preserve">
          <source>Publish functions can return a &lt;a href=&quot;#mongo_cursor&quot;&gt;&lt;code&gt;Collection.Cursor&lt;/code&gt;&lt;/a&gt;, in which case Meteor will publish that cursor&amp;rsquo;s documents to each subscribed client. You can also return an array of &lt;code&gt;Collection.Cursor&lt;/code&gt;s, in which case Meteor will publish all of the cursors.</source>
          <target state="translated">パブリッシュ関数は&lt;a href=&quot;#mongo_cursor&quot;&gt; &lt;code&gt;Collection.Cursor&lt;/code&gt; &lt;/a&gt;を返すことができます。その場合、Meteorはそのカーソルのドキュメントをサブスクライブしている各クライアントにパブリッシュします。 &lt;code&gt;Collection.Cursor&lt;/code&gt; の配列を返すこともできます。その場合、Meteorはすべてのカーソルを公開します。</target>
        </trans-unit>
        <trans-unit id="d7d6e9da660fdddc77ee12d9b9b9e4c85445d654" translate="yes" xml:space="preserve">
          <source>Publishes a build of an existing package version from a different architecture.</source>
          <target state="translated">異なるアーキテクチャの既存のパッケージバージョンのビルドを公開します。</target>
        </trans-unit>
        <trans-unit id="2c21a1f6e7f7e1fb7e8ac96e291eb5de4f5f147f" translate="yes" xml:space="preserve">
          <source>Publishes a release of Meteor. Takes in a JSON configuration file.</source>
          <target state="translated">Meteorのリリースを公開します。JSON設定ファイルを取り込みます。</target>
        </trans-unit>
        <trans-unit id="aad9c0a458a08cfd4f5e8f1d16e0ad848af395b7" translate="yes" xml:space="preserve">
          <source>Publishes your package. To publish, you must &lt;code&gt;cd&lt;/code&gt; into the package directory, log in with your Meteor Developer Account and run &lt;code&gt;meteor publish&lt;/code&gt;. By convention, published package names must begin with the maintainer&amp;rsquo;s Meteor Developer Account username and a colon, like so: &lt;code&gt;iron:router&lt;/code&gt;.</source>
          <target state="translated">パッケージを公開します。公開するには、パッケージディレクトリに &lt;code&gt;cd&lt;/code&gt; し、Meteor開発者アカウントでログインして、 &lt;code&gt;meteor publish&lt;/code&gt; を実行する必要があります。慣例により、公開されたパッケージ名は、メンテナのMeteor開発者アカウントのユーザー名とコロンで始まる必要があります（例： &lt;code&gt;iron:router&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="d1ae649c77fbe74454ae984c4567ee92eaf7e62a" translate="yes" xml:space="preserve">
          <source>Publishing custom data</source>
          <target state="translated">カスタムデータの公開</target>
        </trans-unit>
        <trans-unit id="cf072ddc78088bd17cc6fbb56f69b9c147eed725" translate="yes" xml:space="preserve">
          <source>Publishing relational data</source>
          <target state="translated">リレーショナルデータの公開</target>
        </trans-unit>
        <trans-unit id="ec5a5c4535a32a0f51364b08a7b62982d5da8cd1" translate="yes" xml:space="preserve">
          <source>Publishing your package</source>
          <target state="translated">パッケージの公開</target>
        </trans-unit>
        <trans-unit id="8cf28850d801a770993108c5c98eaf31759d0270" translate="yes" xml:space="preserve">
          <source>QA the application on the staging server.</source>
          <target state="translated">ステージングサーバ上のアプリケーションをQAします。</target>
        </trans-unit>
        <trans-unit id="70fce46ec46c599814c13e8d42f1d5b7a21134b6" translate="yes" xml:space="preserve">
          <source>Queries can specify a particular set of fields to include or exclude from the result object.</source>
          <target state="translated">クエリは、結果オブジェクトに含める、または除外するフィールドの特定のセットを指定することができます。</target>
        </trans-unit>
        <trans-unit id="0fb02e04d4ffb26f0e1039c0ef20570656f8f128" translate="yes" xml:space="preserve">
          <source>Query string to go in the URL. Overwrites any query string in &lt;code&gt;url&lt;/code&gt;.</source>
          <target state="translated">URLに移動するクエリ文字列。 &lt;code&gt;url&lt;/code&gt; 内のクエリ文字列を上書きします。</target>
        </trans-unit>
        <trans-unit id="b342f020314b26a7fba16949f44e287503b5ee8f" translate="yes" xml:space="preserve">
          <source>Quick start</source>
          <target state="translated">クイックスタート</target>
        </trans-unit>
        <trans-unit id="970323b6af000949a28f21a657b8fb9c7c025e01" translate="yes" xml:space="preserve">
          <source>ROOT_URL</source>
          <target state="translated">ROOT_URL</target>
        </trans-unit>
        <trans-unit id="c5a205ec66ee47186f2a312c8c46890626de2077" translate="yes" xml:space="preserve">
          <source>Random.choice</source>
          <target state="translated">Random.choice</target>
        </trans-unit>
        <trans-unit id="65c230ed7fe6f7a31a8f0f91fd95d6a948ad893b" translate="yes" xml:space="preserve">
          <source>Random.fraction</source>
          <target state="translated">Random.fraction</target>
        </trans-unit>
        <trans-unit id="27fc9bd71a4531953e5ed0a544bd5ac559a9ebdf" translate="yes" xml:space="preserve">
          <source>Random.hexString</source>
          <target state="translated">Random.hexString</target>
        </trans-unit>
        <trans-unit id="3fc8d6ef3c559f953730d5982bf468051bebc6cd" translate="yes" xml:space="preserve">
          <source>Random.id</source>
          <target state="translated">Random.id</target>
        </trans-unit>
        <trans-unit id="82444551ce40ed8d6ca4dccf672ab6cf6a199dac" translate="yes" xml:space="preserve">
          <source>Random.secret</source>
          <target state="translated">Random.secret</target>
        </trans-unit>
        <trans-unit id="e9f05aa2c47c6bff64cd5f9cf0a523af4429924d" translate="yes" xml:space="preserve">
          <source>Rate Limiting</source>
          <target state="translated">レート制限</target>
        </trans-unit>
        <trans-unit id="e663f74edb9d15a14c0184e9940248e5e0ce4a56" translate="yes" xml:space="preserve">
          <source>Rate limiting</source>
          <target state="translated">レート制限</target>
        </trans-unit>
        <trans-unit id="b7589558b832752969324a2eca6730f29c3b81cd" translate="yes" xml:space="preserve">
          <source>Rather than accessing data in helpers via &lt;code&gt;this&lt;/code&gt;, it&amp;rsquo;s better to pass the arguments in directly from the template. So our &lt;code&gt;checkedClass&lt;/code&gt; helper takes the &lt;code&gt;todo&lt;/code&gt; as an argument and inspects it directly, rather than implicitly using &lt;code&gt;this.todo&lt;/code&gt;. We do this for similar reasons to why we always pass arguments to template inclusions, and because &amp;ldquo;template variables&amp;rdquo; (such as the iteratee of the &lt;code&gt;{{#each .. in}}&lt;/code&gt; helper) are not available on &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; を介してヘルパーのデータにアクセスするよりも、テンプレートから直接引数を渡す方が適切です。そのため、 &lt;code&gt;checkedClass&lt;/code&gt; ヘルパーは、 &lt;code&gt;todo&lt;/code&gt; を引数として取り、暗黙的に &lt;code&gt;this.todo&lt;/code&gt; を使用するのではなく、それを直接検査します。我々は常に、テンプレートの介在物に引数を渡す理由と同様の理由のためにこれを行うと、（などのiterateeとして「テンプレート変数」ので、 &lt;code&gt;{{#each .. in}}&lt;/code&gt; ヘルパー）で利用できません &lt;code&gt;this&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="573337c1079c60c541c96b8dc447bb8f314bb4d9" translate="yes" xml:space="preserve">
          <source>Rather than dealing with the specifics of this field, it can be helpful to just ignore its existence entirely. You can safely do that as long as you deny all writes from the client:</source>
          <target state="translated">この分野の仕様を扱うよりも、その存在を完全に無視した方が便利です。クライアントからのすべての書き込みを拒否している限り、これは安全に行うことができます。</target>
        </trans-unit>
        <trans-unit id="3375581da7c02fdd84432ad6135794c4116cb6da" translate="yes" xml:space="preserve">
          <source>Re-rendering</source>
          <target state="translated">Re-rendering</target>
        </trans-unit>
        <trans-unit id="4d1f996aa17807ebebdb5143b01f86f170d5bea6" translate="yes" xml:space="preserve">
          <source>React</source>
          <target state="translated">React</target>
        </trans-unit>
        <trans-unit id="49c1cb79114912416ad2b3bd24b66eabadd2acd4" translate="yes" xml:space="preserve">
          <source>React Components in Blaze</source>
          <target state="translated">Blaze の React コンポーネント</target>
        </trans-unit>
        <trans-unit id="55a38b3edc3904e22c3fddf2b60febe07b47d508" translate="yes" xml:space="preserve">
          <source>React Router</source>
          <target state="translated">リアクトルータ</target>
        </trans-unit>
        <trans-unit id="6e5b7376e594b7899814b8447d6979037e782702" translate="yes" xml:space="preserve">
          <source>React Router embraces React-specific functionality like the use of &lt;a href=&quot;https://facebook.github.io/react/docs/context.html&quot;&gt;context&lt;/a&gt;, although you can also explicitly pass your FlowRouter instance around in context if you&amp;rsquo;d like (in fact this is probably the best thing to do).</source>
          <target state="translated">React Routerは、&lt;a href=&quot;https://facebook.github.io/react/docs/context.html&quot;&gt;context&lt;/a&gt;の使用などのReact固有の機能を採用していますが、必要に応じてFlowRouterインスタンスをコンテキスト内で明示的に渡すこともできます（実際、これがおそらく最善の方法です）。</target>
        </trans-unit>
        <trans-unit id="7d607092da7544267a7a387340cf2521827e93ca" translate="yes" xml:space="preserve">
          <source>React Router encourages you to couple your URL design and layout hierarchy in the route definition. Flow Router is more flexible, although it can involve much more boilerplate as a result.</source>
          <target state="translated">React Router は、ルート定義で URL デザインとレイアウト階層を組み合わせることを推奨しています。Flow Router の方が柔軟性が高いですが、その結果、より多くのボイラプレートが必要になることがあります。</target>
        </trans-unit>
        <trans-unit id="6f8e9031349410a44129beb2570274771652ace2" translate="yes" xml:space="preserve">
          <source>React and Angular enforce a better component structure, which makes developing larger apps easier. (Although you can add component structure to Blaze by &lt;a href=&quot;http://blazejs.org/guide/reusable-components.html&quot;&gt;following conventions&lt;/a&gt; or using the &lt;a href=&quot;http://components.meteorapp.com/&quot;&gt;Blaze Components&lt;/a&gt; or &lt;a href=&quot;https://viewmodel.org/&quot;&gt;ViewModel&lt;/a&gt; packages.)</source>
          <target state="translated">ReactとAngularは、より優れたコンポーネント構造を適用し、より大きなアプリの開発を容易にします。（ただし、&lt;a href=&quot;http://blazejs.org/guide/reusable-components.html&quot;&gt;規則に従う&lt;/a&gt;か、&lt;a href=&quot;http://components.meteorapp.com/&quot;&gt;Blazeコンポーネント&lt;/a&gt;または&lt;a href=&quot;https://viewmodel.org/&quot;&gt;ViewModel&lt;/a&gt;パッケージを使用して、コンポーネント構造をBlazeに追加できます。）</target>
        </trans-unit>
        <trans-unit id="00be0cc0e386d74ecb800b0b7256bb644a8571da" translate="yes" xml:space="preserve">
          <source>React components must be the only thing in the wrapper element. Due to a limitation of React (see facebook/react &lt;a href=&quot;https://github.com/facebook/react/issues/1970&quot;&gt;#1970&lt;/a&gt;, &lt;a href=&quot;https://github.com/facebook/react/issues/2484&quot;&gt;#2484&lt;/a&gt;), a React component must be rendered as the only child of its parent node, meaning it cannot have any siblings.</source>
          <target state="translated">Reactコンポーネントは、wrapper要素で唯一のものでなければなりません。Reactの制限により（facebook / react &lt;a href=&quot;https://github.com/facebook/react/issues/1970&quot;&gt;＃1970&lt;/a&gt;、&lt;a href=&quot;https://github.com/facebook/react/issues/2484&quot;&gt;＃2484を参照&lt;/a&gt;）、Reactコンポーネントはその親ノードの唯一の子としてレンダリングする必要があります。つまり、兄弟を持つことはできません。</target>
        </trans-unit>
        <trans-unit id="e560460603038656fa1d4787e66b57875466247f" translate="yes" xml:space="preserve">
          <source>React has 42k stars on Github and 13k npm libraries.</source>
          <target state="translated">React は Github に 42k の星があり、13k の npm ライブラリがあります。</target>
        </trans-unit>
        <trans-unit id="842ea8549385fb281357570ba515c722367cd388" translate="yes" xml:space="preserve">
          <source>React has a vibrant and growing ecosystem and is used widely in production in a variety of combinations with different frameworks.</source>
          <target state="translated">Reactは活気に満ちたエコシステムであり、さまざまなフレームワークとの組み合わせで制作現場で広く使われています。</target>
        </trans-unit>
        <trans-unit id="ace93fb63cc0d2401fa8c866126498bfc5822265" translate="yes" xml:space="preserve">
          <source>React is a front-end rendering library and as such doesn&amp;rsquo;t concern itself with how data gets into and out of components. On the other hand, Meteor has strong opinions about data! Meteor operates in terms of &lt;a href=&quot;data-loading&quot;&gt;publications&lt;/a&gt; and &lt;a href=&quot;methods&quot;&gt;methods&lt;/a&gt;, used to subscribe to and modify the data in your application.</source>
          <target state="translated">Reactはフロントエンドのレンダリングライブラリであり、データがコンポーネントに出入りする方法には関係ありません。一方、流星はデータについて強い意見を持っています！Meteorは、アプリケーションのデータをサブスクライブして変更するために使用される&lt;a href=&quot;data-loading&quot;&gt;パブリケーション&lt;/a&gt;と&lt;a href=&quot;methods&quot;&gt;メソッドの&lt;/a&gt;観点から動作します。</target>
        </trans-unit>
        <trans-unit id="2dd03e5a8480bd16de936ec04566d0a92275af08" translate="yes" xml:space="preserve">
          <source>React uses &lt;a href=&quot;https://facebook.github.io/react/docs/jsx-in-depth.html&quot;&gt;JSX&lt;/a&gt;, with which you write your HTML in JavaScript. While it doesn&amp;rsquo;t have the logic-view separation most libraries have, it also has the most flexibility. Template functions and event handlers are defined in the same file as the HTML part of the component, which usually makes it easier to understand how they are tied together.</source>
          <target state="translated">Reactは&lt;a href=&quot;https://facebook.github.io/react/docs/jsx-in-depth.html&quot;&gt;JSXを&lt;/a&gt;使用します。これを使用してJavaScriptでHTMLを記述します。ほとんどのライブラリにあるロジックとビューの分離はありませんが、柔軟性も最も高くなっています。テンプレート関数とイベントハンドラーは、コンポーネントのHTML部分と同じファイルで定義されます。これにより、通常、それらがどのように結び付けられているかを理解しやすくなります。</target>
        </trans-unit>
        <trans-unit id="2081c8b6e011d41b489cdba5c5210d3aee8fa611" translate="yes" xml:space="preserve">
          <source>ReactiveVar</source>
          <target state="translated">ReactiveVar</target>
        </trans-unit>
        <trans-unit id="8697a43862309b716782d78796f2102dbcf2397e" translate="yes" xml:space="preserve">
          <source>ReactiveVar()</source>
          <target state="translated">ReactiveVar()</target>
        </trans-unit>
        <trans-unit id="c1db1d64f2798b54cabab0f08a21fe75f49cd445" translate="yes" xml:space="preserve">
          <source>ReactiveVars are not automatically migrated across hot code pushes, whereas Session state is.</source>
          <target state="translated">ReactiveVars はホットコードのプッシュをまたいで自動的に移行されませんが、Session の状態は移行されます。</target>
        </trans-unit>
        <trans-unit id="df8032fe5a56ae94cce3f53b0d3f9bf2e5085c03" translate="yes" xml:space="preserve">
          <source>ReactiveVars can hold any value, while Session variables are limited to JSON or EJSON.</source>
          <target state="translated">ReactiveVars は任意の値を保持することができますが、Session 変数は JSON または EJSON に限定されています。</target>
        </trans-unit>
        <trans-unit id="63b549c6f13b260a95aeae59802286b6eb3dac69" translate="yes" xml:space="preserve">
          <source>ReactiveVars don&amp;rsquo;t have global names, like the &amp;ldquo;foo&amp;rdquo; in &lt;code&gt;Session.get('foo')&lt;/code&gt;. Instead, they may be created and used locally, for example attached to a template instance, as in: &lt;code&gt;this.foo.get()&lt;/code&gt;.</source>
          <target state="translated">ReactiveVarには、 &lt;code&gt;Session.get('foo')&lt;/code&gt; の「foo」のようなグローバル名はありません。代わりに、たとえば &lt;code&gt;this.foo.get()&lt;/code&gt; のように、テンプレートインスタンスにアタッチして、ローカルで作成して使用することができます。</target>
        </trans-unit>
        <trans-unit id="09edc430ee465cd900e16ef710a79298da6a4c99" translate="yes" xml:space="preserve">
          <source>Reactively changing subscription arguments</source>
          <target state="translated">サブスクリプションの引数を反応的に変更する</target>
        </trans-unit>
        <trans-unit id="0c2e9a29a2b3becda37d55df31e770964ce58e84" translate="yes" xml:space="preserve">
          <source>Reactivity Model</source>
          <target state="translated">反応性モデル</target>
        </trans-unit>
        <trans-unit id="25d4d8b557171bf685d27eb70aa2a678497d5577" translate="yes" xml:space="preserve">
          <source>Reactivity Model for Each</source>
          <target state="translated">それぞれの反応性モデル</target>
        </trans-unit>
        <trans-unit id="402182cbd1637abec9fe8435165c8a049bba7abb" translate="yes" xml:space="preserve">
          <source>Read about how to use Blaze and Spacebars in the Blaze article.</source>
          <target state="translated">ブレイズとスペースバーの使い方については、ブレイズの記事をご覧ください。</target>
        </trans-unit>
        <trans-unit id="71149d867186a5f2f5f8e067b366c8485ffeb50c" translate="yes" xml:space="preserve">
          <source>Read more about Blaze subscriptions in the &lt;a href=&quot;http://blazejs.org/api/templates.html#Blaze-TemplateInstance-subscribe&quot;&gt;Blaze article&lt;/a&gt;, and about tracking loading state inside UI components in the &lt;a href=&quot;ui-ux#subscription-readiness&quot;&gt;UI article&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://blazejs.org/api/templates.html#Blaze-TemplateInstance-subscribe&quot;&gt;Blaze記事&lt;/a&gt;でBlazeサブスクリプションについて、および&lt;a href=&quot;ui-ux#subscription-readiness&quot;&gt;UI記事&lt;/a&gt;でUIコンポーネント内のロード状態の追跡について詳しくお読みください。</target>
        </trans-unit>
        <trans-unit id="4b0019568f61881e296b5b633e27dad46cd5e8be" translate="yes" xml:space="preserve">
          <source>Read more about collections and how to use them in the &lt;a href=&quot;http://guide.meteor.com/collections.html&quot;&gt;Collections&lt;/a&gt; article in the Meteor Guide.</source>
          <target state="translated">コレクションとその使用方法の詳細については、Meteorガイドの&lt;a href=&quot;http://guide.meteor.com/collections.html&quot;&gt;コレクション&lt;/a&gt;に関する記事をご覧ください。</target>
        </trans-unit>
        <trans-unit id="28041b3fd7b74372933d95f95d7bbf35797b461e" translate="yes" xml:space="preserve">
          <source>Read more about customizing user accounts in the &lt;a href=&quot;http://guide.meteor.com/accounts.html&quot;&gt;Accounts&lt;/a&gt; article in the Meteor Guide.</source>
          <target state="translated">Meteorガイドの&lt;a href=&quot;http://guide.meteor.com/accounts.html&quot;&gt;アカウント&lt;/a&gt;に関する記事で、ユーザーアカウントのカスタマイズの詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="88823fa3dc67965acb81c27d919ad7838ba60aac" translate="yes" xml:space="preserve">
          <source>Read more about domain patterns in &lt;a href=&quot;http://cordova.apache.org/docs/en/6.0.0/guide_appdev_whitelist_index.md.html&quot;&gt;Cordova docs&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://cordova.apache.org/docs/en/6.0.0/guide_appdev_whitelist_index.md.html&quot;&gt;Cordova docsで&lt;/a&gt;ドメインパターンの詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="1a603d46e6808c855984c8bc19955f92373fdb87" translate="yes" xml:space="preserve">
          <source>Read more about managing keys and settings in the Deployment article.</source>
          <target state="translated">鍵と設定の管理については、デプロイの記事をご覧ください。</target>
        </trans-unit>
        <trans-unit id="3292e698700557811666ba69379855299a42fbb1" translate="yes" xml:space="preserve">
          <source>Read more about methods and how to use them in the &lt;a href=&quot;http://guide.meteor.com/methods.html&quot;&gt;Methods&lt;/a&gt; article in the Meteor Guide.</source>
          <target state="translated">メソッドの詳細とその使用&lt;a href=&quot;http://guide.meteor.com/methods.html&quot;&gt;方法&lt;/a&gt;については、Meteorガイドのメソッドの記事をご覧ください。</target>
        </trans-unit>
        <trans-unit id="c902f2f8fe71262c6666db8c4219fd4365b8930b" translate="yes" xml:space="preserve">
          <source>Read more about publications and how to use them in the &lt;a href=&quot;http://guide.meteor.com/data-loading.html&quot;&gt;Data Loading&lt;/a&gt; article in the Meteor Guide.</source>
          <target state="translated">パブリケーションとその使用方法の詳細については、Meteorガイドの&lt;a href=&quot;http://guide.meteor.com/data-loading.html&quot;&gt;データ読み込み&lt;/a&gt;に関する記事をご覧ください。</target>
        </trans-unit>
        <trans-unit id="7827930c24e781b89efc57a127790c78417bd52b" translate="yes" xml:space="preserve">
          <source>Read more about templates and how to use them in the &lt;a href=&quot;spacebars&quot;&gt;Spacebars&lt;/a&gt; and &lt;a href=&quot;../guide/introduction&quot;&gt;Blaze&lt;/a&gt; article in the Guide.</source>
          <target state="translated">テンプレートの詳細とテンプレートの使用方法については、ガイドの&lt;a href=&quot;spacebars&quot;&gt;スペースバー&lt;/a&gt;と&lt;a href=&quot;../guide/introduction&quot;&gt;ブレイズの&lt;/a&gt;記事をご覧ください。</target>
        </trans-unit>
        <trans-unit id="2fbf991af4665cfc10aa8b85ee0ea5b2388e0e34" translate="yes" xml:space="preserve">
          <source>Read more about the error format in the &lt;a href=&quot;https://atmospherejs.com/mdg/validation-error&quot;&gt;&lt;code&gt;mdg:validation-error&lt;/code&gt; docs&lt;/a&gt;.</source>
          <target state="translated">エラー形式の詳細については、&lt;a href=&quot;https://atmospherejs.com/mdg/validation-error&quot;&gt; &lt;code&gt;mdg:validation-error&lt;/code&gt; docsをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2ede26eeb61932173032ed2aaa87e5c3e8a58ef4" translate="yes" xml:space="preserve">
          <source>Read more about using Cordova in the &lt;a href=&quot;mobile&quot;&gt;mobile guide&lt;/a&gt;.</source>
          <target state="translated">Cordovaの使用について詳しくは、&lt;a href=&quot;mobile&quot;&gt;モバイルガイド&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="fdc5d0a73ed6e5754beb78140673dc58ba17d0dc" translate="yes" xml:space="preserve">
          <source>Read more in the &lt;a href=&quot;https://atmospherejs.com/alanning/roles&quot;&gt;&lt;code&gt;alanning:roles&lt;/code&gt; package documentation&lt;/a&gt;.</source>
          <target state="translated">詳しくは&lt;a href=&quot;https://atmospherejs.com/alanning/roles&quot;&gt; &lt;code&gt;alanning:roles&lt;/code&gt; パッケージのドキュメントをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="08498c5c362d894ecbf197db25bd23776045d783" translate="yes" xml:space="preserve">
          <source>Read the documentation about build plugins.</source>
          <target state="translated">ビルドプラグインについてのドキュメントを読む。</target>
        </trans-unit>
        <trans-unit id="7695db2d5ac227a2dfd986509c3fcc74ca165470" translate="yes" xml:space="preserve">
          <source>Read the documentation for each package listed below to see how to indicate which files are source files vs. imports.</source>
          <target state="translated">以下の各パッケージのドキュメントを読んで、どのファイルがソースファイルなのか、インポートファイルなのかをどのように表示するのかを確認してください。</target>
        </trans-unit>
        <trans-unit id="3c219f4cfcba1bccfa614469cdb62b68c0a1beb3" translate="yes" xml:space="preserve">
          <source>Recently, a lot of npm packages have been moving to Promises instead of callbacks for their API. This means you actually get a return value from the asynchronous function, but it&amp;rsquo;s just an empty shell where the real value is filled in later.</source>
          <target state="translated">最近、多くのnpmパッケージがAPIのコールバックではなくPromiseに移行しています。これは、実際には非同期関数から戻り値を取得することを意味しますが、これは実際の値が後で入力される空のシェルにすぎません。</target>
        </trans-unit>
        <trans-unit id="54022bc6f2f9b999e1a4ce0c9f340f99d42a72f1" translate="yes" xml:space="preserve">
          <source>Recommended: Mocha</source>
          <target state="translated">オススメです。モカ</target>
        </trans-unit>
        <trans-unit id="17a8cce91d565b284d3d1168a8f686bda872db99" translate="yes" xml:space="preserve">
          <source>Recovering from faulty versions</source>
          <target state="translated">不具合のあるバージョンからの復旧</target>
        </trans-unit>
        <trans-unit id="60e22121bdd0bc71cdb2bae2a3aa577006b2eae9" translate="yes" xml:space="preserve">
          <source>Redirecting</source>
          <target state="translated">Redirecting</target>
        </trans-unit>
        <trans-unit id="8b7fc268a6ac78cab9d0a46d12ca44738f41a78c" translate="yes" xml:space="preserve">
          <source>Redirecting after a user&amp;rsquo;s action</source>
          <target state="translated">ユーザーのアクション後のリダイレクト</target>
        </trans-unit>
        <trans-unit id="40a4d23a8dafd58a95661084ed2f34c6b35573cc" translate="yes" xml:space="preserve">
          <source>Redirecting dynamically</source>
          <target state="translated">動的にリダイレクトする</target>
        </trans-unit>
        <trans-unit id="65d26c11f1b25c89fcdf6ae8498fa376d710ec34" translate="yes" xml:space="preserve">
          <source>Refactoring to reuse security rules</source>
          <target state="translated">セキュリティルールを再利用するためのリファクタリング</target>
        </trans-unit>
        <trans-unit id="3a4c8dcbb74393067916a368021f02effedc575d" translate="yes" xml:space="preserve">
          <source>Refer to the &lt;a href=&quot;https://cordova.apache.org/docs/en/dev/config_ref/index.html#preference&quot;&gt;preferences section&lt;/a&gt; of the Cordova documentation for more information about supported options.</source>
          <target state="translated">サポートされているオプションの詳細については、Cordovaドキュメントの&lt;a href=&quot;https://cordova.apache.org/docs/en/dev/config_ref/index.html#preference&quot;&gt;設定セクション&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c25cd66a82531c77ed01fb1c26ba430584018b76" translate="yes" xml:space="preserve">
          <source>Refer to the Method via JS module rather than a magic string.</source>
          <target state="translated">魔法の文字列ではなく、JSモジュール経由のメソッドを参照してください。</target>
        </trans-unit>
        <trans-unit id="b01d33f6c7b508ee0fe9eca5942ab2d8b9bcbb77" translate="yes" xml:space="preserve">
          <source>Regardless of how you add the package to your app, its actual version will be tracked in the file at &lt;code&gt;.meteor/versions&lt;/code&gt;. This means that anybody collaborating with you on the same app is guaranteed to have the same package versions as you. If you want to update to a newer version of a package after installing it, use &lt;code&gt;meteor update&lt;/code&gt;. You can run &lt;code&gt;meteor update&lt;/code&gt; without any arguments to update all packages and Meteor itself to their latest versions, or pass a specific package to update just that one, for example &lt;code&gt;meteor update kadira:flow-router&lt;/code&gt;.</source>
          <target state="translated">アプリにパッケージを追加する方法に関係なく、実際のバージョンは &lt;code&gt;.meteor/versions&lt;/code&gt; にあるファイルで追跡されます。つまり、同じアプリであなたと共同作業している人は、あなたと同じパッケージバージョンを持つことが保証されます。インストール後にパッケージの新しいバージョンに更新する場合は、 &lt;code&gt;meteor update&lt;/code&gt; を使用してください。引数なしで &lt;code&gt;meteor update&lt;/code&gt; を実行してすべてのパッケージとMeteor自体を最新バージョンに更新するか、特定のパッケージを渡してそのパッケージのみを更新できます（例 &lt;code&gt;meteor update kadira:flow-router&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="df0b0ae6dab5a8da38f1c82f15d73aca42eb5c9f" translate="yes" xml:space="preserve">
          <source>Regardless of the view layer that you are using, there are some patterns in how you build your User Interface (UI) that will help make your app&amp;rsquo;s code easier to understand, test, and maintain. These patterns, much like general patterns of modularity, revolve around making the interfaces to your UI elements very clear and avoiding using techniques that bypass these known interfaces.</source>
          <target state="translated">使用しているビューレイヤーに関係なく、ユーザーインターフェイス（UI）の構築方法には、アプリのコードの理解、テスト、維持を容易にするいくつかのパターンがあります。これらのパターンは、モジュール性の一般的なパターンと同様に、UI要素へのインターフェースを非常に明確にし、これらの既知のインターフェースをバイパスする手法の使用を回避することを中心に展開されます。</target>
        </trans-unit>
        <trans-unit id="8a41fadc048efbfbcd4464f67267f15bbc047043" translate="yes" xml:space="preserve">
          <source>Register a callback to be called after a login attempt fails.</source>
          <target state="translated">ログイン試行が失敗した後に呼び出されるコールバックを登録します。</target>
        </trans-unit>
        <trans-unit id="3bbb5b6615ebbc2a8d067ada3d8a180da644c5c0" translate="yes" xml:space="preserve">
          <source>Register a callback to be called after a login attempt succeeds.</source>
          <target state="translated">ログイン試行が成功した後に呼び出されるコールバックを登録します。</target>
        </trans-unit>
        <trans-unit id="1a7372e8d4e1031596740ef57c21d3017751113c" translate="yes" xml:space="preserve">
          <source>Register a callback to be called after a logout attempt succeeds.</source>
          <target state="translated">ログアウトの試みが成功した後に呼び出されるコールバックを登録します。</target>
        </trans-unit>
        <trans-unit id="822b3f5ff4b7fef4902d2c7846ff9e00c5e09db2" translate="yes" xml:space="preserve">
          <source>Register a callback to be called when a new DDP connection is made to the server.</source>
          <target state="translated">サーバに新しいDDP接続が行われたときに呼び出されるコールバックを登録します。</target>
        </trans-unit>
        <trans-unit id="f619d019b63a99f44e3850ba418fd92a0277cc81" translate="yes" xml:space="preserve">
          <source>Register a callback to be called when the connection is closed. If the connection is already closed, the callback will be called immediately.</source>
          <target state="translated">接続が閉じられたときに呼び出されるコールバックを登録します。すでに接続が閉じられている場合は、コールバックはすぐに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f5ebdbe5e38fd8c714e314eb749b76766f7d74a2" translate="yes" xml:space="preserve">
          <source>Register a function to be called when an instance of this template is created.</source>
          <target state="translated">このテンプレートのインスタンスが作成されたときに呼び出される関数を登録します。</target>
        </trans-unit>
        <trans-unit id="9efe8ac33a0511d6d129b62d882344a2bb35eb17" translate="yes" xml:space="preserve">
          <source>Register a function to be called when an instance of this template is inserted into the DOM.</source>
          <target state="translated">このテンプレートのインスタンスが DOM に挿入されたときに呼び出される関数を登録します。</target>
        </trans-unit>
        <trans-unit id="ce80fdc783593d32a60cbe706fb72a6253eac64a" translate="yes" xml:space="preserve">
          <source>Register a function to be called when an instance of this template is removed from the DOM and destroyed.</source>
          <target state="translated">このテンプレートのインスタンスが DOM から削除されて破棄されたときに呼び出される関数を登録します。</target>
        </trans-unit>
        <trans-unit id="b8da5312c0c7036207f2751af104356905dd47d3" translate="yes" xml:space="preserve">
          <source>Register a function to call as the first step of reconnecting. This function can call methods which will be executed before any other outstanding methods. For example, this can be used to re-establish the appropriate authentication context on the connection.</source>
          <target state="translated">再接続の最初のステップとして呼び出す関数を登録します。この関数は、他の未処理のメソッドよりも先に実行されるメソッドを呼び出すことができます。たとえば、これを使用して、接続上の適切な認証コンテキストを再確立することができます。</target>
        </trans-unit>
        <trans-unit id="4a64cbdba5142f513eb30038d00b0e8cb4775d21" translate="yes" xml:space="preserve">
          <source>Register a function to call when a reset password link is clicked in an email sent by &lt;a href=&quot;#accounts_sendresetpasswordemail&quot;&gt;&lt;code&gt;Accounts.sendResetPasswordEmail&lt;/code&gt;&lt;/a&gt;. This function should be called in top-level code, not inside &lt;code&gt;Meteor.startup()&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#accounts_sendresetpasswordemail&quot;&gt; &lt;code&gt;Accounts.sendResetPasswordEmail&lt;/code&gt; から&lt;/a&gt;送信された電子メールでパスワードのリセットリンクがクリックされたときに呼び出す関数を登録します。この関数は、 &lt;code&gt;Meteor.startup()&lt;/code&gt; 内ではなく、トップレベルのコードで呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="f8373983b247f7d43bc88705df46f72cf5ceb386" translate="yes" xml:space="preserve">
          <source>Register a function to call when an account enrollment link is clicked in an email sent by &lt;a href=&quot;#accounts_sendenrollmentemail&quot;&gt;&lt;code&gt;Accounts.sendEnrollmentEmail&lt;/code&gt;&lt;/a&gt;. This function should be called in top-level code, not inside &lt;code&gt;Meteor.startup()&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#accounts_sendenrollmentemail&quot;&gt; &lt;code&gt;Accounts.sendEnrollmentEmail&lt;/code&gt; から&lt;/a&gt;送信された電子メールでアカウント登録リンクがクリックされたときに呼び出す関数を登録します。この関数は、 &lt;code&gt;Meteor.startup()&lt;/code&gt; 内ではなく、トップレベルのコードで呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="54a21feb97deddc34afaf44b4d5e96b246c20326" translate="yes" xml:space="preserve">
          <source>Register a function to call when an email verification link is clicked in an email sent by &lt;a href=&quot;#accounts_sendverificationemail&quot;&gt;&lt;code&gt;Accounts.sendVerificationEmail&lt;/code&gt;&lt;/a&gt;. This function should be called in top-level code, not inside &lt;code&gt;Meteor.startup()&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#accounts_sendverificationemail&quot;&gt; &lt;code&gt;Accounts.sendVerificationEmail&lt;/code&gt; から&lt;/a&gt;送信された電子メールで電子メール検証リンクがクリックされたときに呼び出す関数を登録します。この関数は、 &lt;code&gt;Meteor.startup()&lt;/code&gt; 内ではなく、トップレベルのコードで呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="e8c49fac1d08550fd31ce1d4297976aa28b7f1f6" translate="yes" xml:space="preserve">
          <source>Registers &lt;code&gt;callback&lt;/code&gt; to run when this computation is next invalidated, or runs it immediately if the computation is already invalidated. The callback is run exactly once and not upon future invalidations unless &lt;code&gt;onInvalidate&lt;/code&gt; is called again after the computation becomes valid again.</source>
          <target state="translated">この計算が次に無効になったときに実行する &lt;code&gt;callback&lt;/code&gt; を登録します。または、計算がすでに無効になっている場合はすぐに実行します。コールバックは1回だけ実行され、計算が再び有効になった後に &lt;code&gt;onInvalidate&lt;/code&gt; が再度呼び出されない限り、将来の無効化では実行されません。</target>
        </trans-unit>
        <trans-unit id="f544d3333c38572f5001db3033b4d656d02e45d0" translate="yes" xml:space="preserve">
          <source>Registers &lt;code&gt;callback&lt;/code&gt; to run when this computation is stopped, or runs it immediately if the computation is already stopped. The callback is run after any &lt;code&gt;onInvalidate&lt;/code&gt; callbacks.</source>
          <target state="translated">この計算が停止したときに実行する &lt;code&gt;callback&lt;/code&gt; を登録します。計算がすでに停止している場合はすぐに実行します。コールバックは、 &lt;code&gt;onInvalidate&lt;/code&gt; コールバックの後に実行されます。</target>
        </trans-unit>
        <trans-unit id="a729e924b9f0527e5edc8a765fd827d48e828e71" translate="yes" xml:space="preserve">
          <source>Registers a new &lt;a href=&quot;#computation_oninvalidate&quot;&gt;&lt;code&gt;onInvalidate&lt;/code&gt;&lt;/a&gt; callback on the current computation (which must exist), to be called immediately when the current computation is invalidated or stopped.</source>
          <target state="translated">現在の計算（存在する必要があります）に新しい&lt;a href=&quot;#computation_oninvalidate&quot;&gt; &lt;code&gt;onInvalidate&lt;/code&gt; &lt;/a&gt;コールバックを登録します。現在の計算が無効化または停止されたときにすぐに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="e6cb94729d19fa00aad07bfad30cd327bba18eba" translate="yes" xml:space="preserve">
          <source>Regular &lt;code&gt;Error&lt;/code&gt; for internal server errors</source>
          <target state="translated">内部サーバーエラーの通常の &lt;code&gt;Error&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7324bbce403ec626639c4d45e6ed9a157091e4e1" translate="yes" xml:space="preserve">
          <source>Reloads app on file change</source>
          <target state="translated">ファイル変更時にアプリを再ロード</target>
        </trans-unit>
        <trans-unit id="c4e88f19388c890b10a1d60bb0e45227065ee77c" translate="yes" xml:space="preserve">
          <source>Remove an email address for a user. Use this instead of updating the database directly.</source>
          <target state="translated">ユーザーのメールアドレスを削除します。データベースを直接更新する代わりにこれを使用します。</target>
        </trans-unit>
        <trans-unit id="57a85bff63e30d2cc749be81fcb72d9abea4b29b" translate="yes" xml:space="preserve">
          <source>Remove documents from the collection</source>
          <target state="translated">コレクションから書類を削除する</target>
        </trans-unit>
        <trans-unit id="201b0de1f3280854197b5a3292b805835203a0ba" translate="yes" xml:space="preserve">
          <source>Removes a package previously added to your Meteor project. For a list of the packages that your application is currently using, run &lt;code&gt;meteor list&lt;/code&gt;.</source>
          <target state="translated">以前にMeteorプロジェクトに追加したパッケージを削除します。アプリケーションが現在使用しているパッケージのリストについては、 &lt;code&gt;meteor list&lt;/code&gt; を実行してください。</target>
        </trans-unit>
        <trans-unit id="66beb793c61909cbbdffd9fd1645cbf7ef1a3047" translate="yes" xml:space="preserve">
          <source>Removes a platform previously added to your Meteor project. For a list of the platforms that your application is currently using, see &lt;code&gt;meteor list-platforms&lt;/code&gt;.</source>
          <target state="translated">以前にMeteorプロジェクトに追加したプラットフォームを削除します。アプリケーションが現在使用しているプラ​​ットフォームのリストについては、 &lt;code&gt;meteor list-platforms&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="34103f69fe0d4d71b74d991911320628162be9a6" translate="yes" xml:space="preserve">
          <source>Removes a rendered View from the DOM, stopping all reactive updates and event listeners on it. Also destroys the Blaze.Template instance associated with the view.</source>
          <target state="translated">レンダリングされたビューを DOM から削除し、そのビュー上のすべてのリアクティブな更新とイベントリスナーを停止します。また、ビューに関連付けられたBlaze.Templateインスタンスも破棄します。</target>
        </trans-unit>
        <trans-unit id="ef5418ac2674abc862503242059562ef3208bf5a" translate="yes" xml:space="preserve">
          <source>Removes the specified rule from the rate limiter. If rule had hit a rate limit, that limit is removed as well.</source>
          <target state="translated">指定したルールをレートリミッターから削除します。ルールがレート制限にヒットしていた場合、その制限も削除されます。</target>
        </trans-unit>
        <trans-unit id="806f62597efaa40fe7c07758bf9078e343e283f1" translate="yes" xml:space="preserve">
          <source>Removing attributes not in the schema</source>
          <target state="translated">スキーマにない属性を削除する</target>
        </trans-unit>
        <trans-unit id="937938f90c18610fb2311b51587797149b2dd30f" translate="yes" xml:space="preserve">
          <source>Removing directly installed plugins</source>
          <target state="translated">直接インストールされたプラグインを削除する</target>
        </trans-unit>
        <trans-unit id="071197509cb7c8cff19d8bac27e7440048edd880" translate="yes" xml:space="preserve">
          <source>Render performance varies a lot depending on the situation. All three libraries are very quick at rendering simple apps, but can take a noticeable amount of time with more complex apps.</source>
          <target state="translated">レンダリングパフォーマンスは状況によって大きく異なります。3つのライブラリはいずれもシンプルなアプリのレンダリングには非常に速いですが、より複雑なアプリでは顕著な時間がかかることがあります。</target>
        </trans-unit>
        <trans-unit id="941faaeb7a5f68be1162d99baa90cc9160f50e1e" translate="yes" xml:space="preserve">
          <source>Render the helpers in the same way the previous template did. In this case we are using &lt;code&gt;buttonText&lt;/code&gt;.</source>
          <target state="translated">以前のテンプレートと同じ方法でヘルパーをレンダリングします。この場合、 &lt;code&gt;buttonText&lt;/code&gt; を使用しています。</target>
        </trans-unit>
        <trans-unit id="29350daccbab00f57e738178ebefb89531e492bb" translate="yes" xml:space="preserve">
          <source>Renderable Content</source>
          <target state="translated">レンダリング可能なコンテンツ</target>
        </trans-unit>
        <trans-unit id="bb334a622f026b92bb650f9085e2b28dac310a35" translate="yes" xml:space="preserve">
          <source>Rendering a template to HTML loses all fine-grained reactivity. The normal way to render a template is to either include it from another template (&lt;code&gt;{{&amp;gt; myTemplate}}&lt;/code&gt;) or render and insert it programmatically using &lt;code&gt;Blaze.render&lt;/code&gt;. Only occasionally is generating HTML useful.</source>
          <target state="translated">テンプレートをHTMLにレンダリングすると、すべての細かい反応が失われます。テンプレートをレンダリングする通常の方法は、別のテンプレート（ &lt;code&gt;{{&amp;gt; myTemplate}}&lt;/code&gt; ）から含めるか、Blaze.renderを使用してプログラムでレンダリングして挿入すること &lt;code&gt;Blaze.render&lt;/code&gt; 。たまにしかHTMLを生成できないと便利です。</target>
        </trans-unit>
        <trans-unit id="02208207bc68e791a4d1db92b0ae89e131daef08" translate="yes" xml:space="preserve">
          <source>Rendering an updated UI when a user reaches a new route is not that useful without giving the user some way to reach a new route! The simplest way is with the trusty &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag and a URL. You can generate the URLs yourself using &lt;code&gt;FlowRouter.pathFor&lt;/code&gt;, but it is more convenient to use the &lt;a href=&quot;https://github.com/arillo/meteor-flow-router-helpers/&quot;&gt;&lt;code&gt;arillo:flow-router-helpers&lt;/code&gt;&lt;/a&gt; package that defines some helpers for you:</source>
          <target state="translated">ユーザーが新しいルートに到達したときに更新されたUIをレンダリングすることは、ユーザーに新しいルートに到達するための何らかの方法を提供しない限り、それほど役に立ちません。最も簡単な方法は、信頼できる &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; タグとURLを使用することです。 &lt;code&gt;FlowRouter.pathFor&lt;/code&gt; を使用して自分でURLを生成できますが、いくつかのヘルパーを定義する&lt;a href=&quot;https://github.com/arillo/meteor-flow-router-helpers/&quot;&gt; &lt;code&gt;arillo:flow-router-helpers&lt;/code&gt; &lt;/a&gt;パッケージを使用する方が便利です。</target>
        </trans-unit>
        <trans-unit id="1ba514b1cc3ecab339360b3b5959fbf5ae8b45ac" translate="yes" xml:space="preserve">
          <source>Rendering based on the route</source>
          <target state="translated">ルートに基づいたレンダリング</target>
        </trans-unit>
        <trans-unit id="6f2b248a41f9e64e230a755be8da77faeb619ed3" translate="yes" xml:space="preserve">
          <source>Rendering raw HTML</source>
          <target state="translated">生のHTMLをレンダリングする</target>
        </trans-unit>
        <trans-unit id="cea9fce3d9e0a0226d1009eabc5f8aae1e69a3bf" translate="yes" xml:space="preserve">
          <source>Renders a template or View to DOM nodes and inserts it into the DOM, returning a rendered &lt;a href=&quot;#Blaze-View&quot;&gt;View&lt;/a&gt; which can be passed to &lt;a href=&quot;#Blaze-remove&quot;&gt;&lt;code&gt;Blaze.remove&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">テンプレートまたはビューをDOMノードにレンダリングし、それをDOMに挿入して、&lt;a href=&quot;#Blaze-remove&quot;&gt; &lt;code&gt;Blaze.remove&lt;/code&gt; &lt;/a&gt;に渡すことができるレンダリングされた&lt;a href=&quot;#Blaze-View&quot;&gt;ビュー&lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="3719e8da641de28a1a7578fba81d635d71cfeed9" translate="yes" xml:space="preserve">
          <source>Renders a template or View to DOM nodes with a data context. Otherwise identical to &lt;code&gt;Blaze.render&lt;/code&gt;.</source>
          <target state="translated">データコンテキストを使用して、テンプレートまたはビューをDOMノードにレンダリングします。それ以外は &lt;code&gt;Blaze.render&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="d66f25799c3dce91c45de1fd4bd0f7f5e10013e6" translate="yes" xml:space="preserve">
          <source>Renders a template or View to HTML with a data context. Otherwise identical to &lt;code&gt;Blaze.toHTML&lt;/code&gt;.</source>
          <target state="translated">テンプレートまたはビューをデータコンテキストを使用してHTMLにレンダリングします。それ以外は &lt;code&gt;Blaze.toHTML&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="2adbf6d8c3b324405f9c4279b460777eb7bedd3e" translate="yes" xml:space="preserve">
          <source>Renders a template or View to a string of HTML.</source>
          <target state="translated">テンプレートやビューをHTMLの文字列にレンダリングします。</target>
        </trans-unit>
        <trans-unit id="6f1cb9bcb8fdf346bdb04d0d0f22e728ed79b8d3" translate="yes" xml:space="preserve">
          <source>Replace localhost with 127.0.0.1. Useful for services that don't recognize localhost as a domain name.</source>
          <target state="translated">localhostを127.0.0.0.1に置き換えます。localhost をドメイン名として認識しないサービスに便利です。</target>
        </trans-unit>
        <trans-unit id="00c672c70f58ab89a00f7fdd4c7a2662714c6740" translate="yes" xml:space="preserve">
          <source>Replace the &lt;code&gt;tools/&lt;/code&gt; folder in &lt;code&gt;~/Library/Android/sdk/&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;~/Library/Android/sdk/&lt;/code&gt; の &lt;code&gt;tools/&lt;/code&gt; フォルダーを置き換えます</target>
        </trans-unit>
        <trans-unit id="a242ade3ef6daa3baaaebe0ef02919fd067b76d2" translate="yes" xml:space="preserve">
          <source>Request a forgot password email.</source>
          <target state="translated">パスワードを忘れたメールを要求する。</target>
        </trans-unit>
        <trans-unit id="f38a27d2d3cd986f4dc6c899aa795773f3ed09c4" translate="yes" xml:space="preserve">
          <source>Requesting Permissions</source>
          <target state="translated">パーミッションを要求する</target>
        </trans-unit>
        <trans-unit id="35d17a1d71b863c03c95ab7196d118a86b489da7" translate="yes" xml:space="preserve">
          <source>Require a package that was specified using &lt;code&gt;Npm.depends()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Npm.depends()&lt;/code&gt; を使用して指定されたパッケージが必要です。</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">Requirements</target>
        </trans-unit>
        <trans-unit id="8f4a692fc113a9fbf96e7b6db5f6b023297a1613" translate="yes" xml:space="preserve">
          <source>Requiring username or email</source>
          <target state="translated">ユーザー名またはメールアドレスが必要です。</target>
        </trans-unit>
        <trans-unit id="9d79ba10cf1beedefcd5cb2cd8d4276c9f901a5f" translate="yes" xml:space="preserve">
          <source>Reset the current project to a fresh state. Removes the local mongo database.</source>
          <target state="translated">現在のプロジェクトを新しい状態にリセットします。ローカルのmongoデータベースを削除します。</target>
        </trans-unit>
        <trans-unit id="10f6872970910165d253bbd2066c87f811053ba5" translate="yes" xml:space="preserve">
          <source>Reset the password for a user using a token received in email. Logs the user in afterwards.</source>
          <target state="translated">電子メールで受信したトークンを使用して、ユーザーのパスワードをリセットします。その後、ユーザーをログインさせます。</target>
        </trans-unit>
        <trans-unit id="3e946a4115352d8257a590891238fa19e328931a" translate="yes" xml:space="preserve">
          <source>Restart VS Code</source>
          <target state="translated">米国コードの再起動</target>
        </trans-unit>
        <trans-unit id="419415c9ab764255e58576751f5ab56204362267" translate="yes" xml:space="preserve">
          <source>Retrieve the contents of the static server asset as a UTF8-encoded string.</source>
          <target state="translated">静的サーバーアセットの内容を UTF8 エンコードされた文字列として取得します。</target>
        </trans-unit>
        <trans-unit id="ed9a0b9e0dc4c5e3e7821777e532e6413b3a5e33" translate="yes" xml:space="preserve">
          <source>Retrieve the contents of the static server asset as an &lt;a href=&quot;#ejson_new_binary&quot;&gt;EJSON Binary&lt;/a&gt;.</source>
          <target state="translated">静的サーバーアセットのコンテンツを&lt;a href=&quot;#ejson_new_binary&quot;&gt;EJSONバイナリ&lt;/a&gt;として取得します。</target>
        </trans-unit>
        <trans-unit id="eb8a04210e616dde8062a58c4d4b0a16d33b2099" translate="yes" xml:space="preserve">
          <source>Retrieves the user record for the current user from the &lt;a href=&quot;#meteor_users&quot;&gt;&lt;code&gt;Meteor.users&lt;/code&gt;&lt;/a&gt; collection.</source>
          <target state="translated">現在のユーザーのユーザーレコードを&lt;a href=&quot;#meteor_users&quot;&gt; &lt;code&gt;Meteor.users&lt;/code&gt; &lt;/a&gt;コレクションから取得します。</target>
        </trans-unit>
        <trans-unit id="dd9192270a9006bdbb0d60dda0d9dfbfe3e13042" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;other&lt;/code&gt; has a value equal to &lt;code&gt;this&lt;/code&gt;; &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;other&lt;/code&gt; の値が &lt;code&gt;this&lt;/code&gt; と等しい場合は &lt;code&gt;true&lt;/code&gt; を返します。それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4ed1a51e3c7c6cf43a3633b3e58f69e74b9dd263" translate="yes" xml:space="preserve">
          <source>Return Value</source>
          <target state="translated">戻り値</target>
        </trans-unit>
        <trans-unit id="1d84f91f90db6d7078683bbbadd4142507dfbaab" translate="yes" xml:space="preserve">
          <source>Return a deep copy of &lt;code&gt;val&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;val&lt;/code&gt; のディープコピーを返します。</target>
        </trans-unit>
        <trans-unit id="405b952918d3cc6f9e583417d6e2d50947a568b1" translate="yes" xml:space="preserve">
          <source>Return a number between 0 and 1, like &lt;code&gt;Math.random&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Math.random&lt;/code&gt; のように、0から1までの数値を返します。</target>
        </trans-unit>
        <trans-unit id="fc816941f1f652a68c6a352399448afc74d82649" translate="yes" xml:space="preserve">
          <source>Return a random element of the given array or string.</source>
          <target state="translated">与えられた配列または文字列のランダムな要素を返します。</target>
        </trans-unit>
        <trans-unit id="656adc591e1a65872f8010699af86800ba3d68a2" translate="yes" xml:space="preserve">
          <source>Return a random string of &lt;code&gt;n&lt;/code&gt; hexadecimal digits.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 個の 16進数のランダムな文字列を返します。</target>
        </trans-unit>
        <trans-unit id="49c85b45e1a520a5f92de401f0e1539d9c8458c8" translate="yes" xml:space="preserve">
          <source>Return a random string of printable characters with 6 bits of entropy per character. Use &lt;code&gt;Random.secret&lt;/code&gt; for security-critical secrets that are intended for machine, rather than human, consumption.</source>
          <target state="translated">文字ごとに6ビットのエントロピーを持つ、印刷可能な文字のランダムな文字列を返します。使用 &lt;code&gt;Random.secret&lt;/code&gt; 機械ではなく人間、消費のために意図されているセキュリティ上重要な秘密のために。</target>
        </trans-unit>
        <trans-unit id="604eeddfc7d81023a5928056882b40bec6c7ec91" translate="yes" xml:space="preserve">
          <source>Return a unique identifier, such as &lt;code&gt;&quot;Jjwjg6gouWLXhMGKW&quot;&lt;/code&gt;, that is likely to be unique in the whole world.</source>
          <target state="translated">&lt;code&gt;&quot;Jjwjg6gouWLXhMGKW&quot;&lt;/code&gt; など、全世界で一意である可能性のある一意の識別子を返します。</target>
        </trans-unit>
        <trans-unit id="189ad33766f6c44a17d20b0b33c90284241520dd" translate="yes" xml:space="preserve">
          <source>Return a value &lt;code&gt;r&lt;/code&gt; such that &lt;code&gt;this.equals(r)&lt;/code&gt; is true, and modifications to &lt;code&gt;r&lt;/code&gt; do not affect &lt;code&gt;this&lt;/code&gt; and vice versa.</source>
          <target state="translated">値を返す &lt;code&gt;r&lt;/code&gt; よう &lt;code&gt;this.equals(r)&lt;/code&gt; が真であり、かつへの変更 &lt;code&gt;r&lt;/code&gt; 影響を与えない &lt;code&gt;this&lt;/code&gt; 逆もまた同様と副を。</target>
        </trans-unit>
        <trans-unit id="b511b08db5b0274d0477a6bd83c0aa6ab2aa164a" translate="yes" xml:space="preserve">
          <source>Return all matching documents as an Array.</source>
          <target state="translated">一致するすべての文書を配列として返します。</target>
        </trans-unit>
        <trans-unit id="5c2f97184bfe0759afaa52e3dea61a8fbdcd5299" translate="yes" xml:space="preserve">
          <source>Return ambiguous error messages from login failures to prevent user enumeration. Defaults to false.</source>
          <target state="translated">ユーザーの列挙を防ぐために、ログイン失敗時の曖昧なエラーメッセージを返します。デフォルトは false です。</target>
        </trans-unit>
        <trans-unit id="8bfabaed6a4d2b54f0d351ade5e9d5493fe15fad" translate="yes" xml:space="preserve">
          <source>Return the tag used to identify this type. This must match the tag used to register this type with &lt;a href=&quot;#ejson_add_type&quot;&gt;&lt;code&gt;EJSON.addType&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このタイプを識別するために使用されるタグを返します。これは、このタイプを&lt;a href=&quot;#ejson_add_type&quot;&gt; &lt;code&gt;EJSON.addType&lt;/code&gt; &lt;/a&gt;に登録するために使用されるタグと一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="2e2e744ca0060a036477398b68411bd8ae9d1116" translate="yes" xml:space="preserve">
          <source>Return true if &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are equal to each other. Return false otherwise. Uses the &lt;code&gt;equals&lt;/code&gt; method on &lt;code&gt;a&lt;/code&gt; if present, otherwise performs a deep comparison.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; が互いに等しい場合にtrueを返します。それ以外の場合はfalseを返します。存在 &lt;code&gt;a&lt;/code&gt; 場合は、 &lt;code&gt;equals&lt;/code&gt; メソッドを使用します。それ以外の場合は、深い比較を実行します。</target>
        </trans-unit>
        <trans-unit id="4cc9f197562b8a00d58d67cf96d00f3ab99d1809" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;false&lt;/code&gt; from a handler is the same as calling both &lt;code&gt;stopImmediatePropagation&lt;/code&gt; and &lt;code&gt;preventDefault&lt;/code&gt; on the event.</source>
          <target state="translated">ハンドラーから &lt;code&gt;false&lt;/code&gt; を返すことは、イベントで &lt;code&gt;stopImmediatePropagation&lt;/code&gt; と &lt;code&gt;preventDefault&lt;/code&gt; の両方を呼び出すことと同じです。</target>
        </trans-unit>
        <trans-unit id="ac586d0086a4b73af4ea1bee5996773b14a33252" translate="yes" xml:space="preserve">
          <source>Returns a handle that can be used by &lt;code&gt;Meteor.clearInterval&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Meteor.clearInterval&lt;/code&gt; で使用できるハンドルを返します。</target>
        </trans-unit>
        <trans-unit id="155c5721ad3c0a1fbb025b1b78038151d3169fa2" translate="yes" xml:space="preserve">
          <source>Returns a handle that can be used by &lt;code&gt;Meteor.clearTimeout&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Meteor.clearTimeout&lt;/code&gt; で使用できるハンドルを返します。</target>
        </trans-unit>
        <trans-unit id="8efd7f051658876e46e7afadb7a76b5146c894ce" translate="yes" xml:space="preserve">
          <source>Returns an unrendered View object you can pass to &lt;code&gt;Blaze.render&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Blaze.render&lt;/code&gt; に渡すことができるレンダリングされていないViewオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="467c1bfcc17eb57521a52be12cc51c067a7a8479" translate="yes" xml:space="preserve">
          <source>Returns one DOM element matching &lt;code&gt;selector&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if there are no such elements.</source>
          <target state="translated">リターン1つのDOMエレメントマッチング &lt;code&gt;selector&lt;/code&gt; 、又は &lt;code&gt;null&lt;/code&gt; そのような要素が存在しない場合。</target>
        </trans-unit>
        <trans-unit id="3658376ed7bd64aa1ba58fe02497c57690938574" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html&quot;&gt;&lt;code&gt;Collection&lt;/code&gt;&lt;/a&gt; object corresponding to this collection from the &lt;a href=&quot;https://www.npmjs.com/package/mongodb&quot;&gt;npm &lt;code&gt;mongodb&lt;/code&gt; driver module&lt;/a&gt; which is wrapped by &lt;code&gt;Mongo.Collection&lt;/code&gt;.</source>
          <target state="translated">戻り値&lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html&quot;&gt; &lt;code&gt;Collection&lt;/code&gt; &lt;/a&gt;から、このコレクションに対応するオブジェクト&lt;a href=&quot;https://www.npmjs.com/package/mongodb&quot;&gt;のNPM &lt;code&gt;mongodb&lt;/code&gt; ドライバモジュール&lt;/a&gt;によって包まれ &lt;code&gt;Mongo.Collection&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aefa5150f7bb6cb18f1e527c2d933cadbd58a69c" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/2.2/api/Db.html&quot;&gt;&lt;code&gt;Db&lt;/code&gt;&lt;/a&gt; object corresponding to this collection's database connection from the &lt;a href=&quot;https://www.npmjs.com/package/mongodb&quot;&gt;npm &lt;code&gt;mongodb&lt;/code&gt; driver module&lt;/a&gt; which is wrapped by &lt;code&gt;Mongo.Collection&lt;/code&gt;.</source>
          <target state="translated">返し&lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/2.2/api/Db.html&quot;&gt; &lt;code&gt;Db&lt;/code&gt; &lt;/a&gt;から、このコレクションのデータベース接続に対応するオブジェクト&lt;a href=&quot;https://www.npmjs.com/package/mongodb&quot;&gt;NPM &lt;code&gt;mongodb&lt;/code&gt; ドライバモジュール&lt;/a&gt;によって包まれる &lt;code&gt;Mongo.Collection&lt;/code&gt; が。</target>
        </trans-unit>
        <trans-unit id="29dd3c9a52b119bdedec2c6de623abcdac5540b9" translate="yes" xml:space="preserve">
          <source>Returns the current data context, or the data context that was used when rendering a particular DOM element or View from a Meteor template.</source>
          <target state="translated">現在のデータコンテキスト、あるいは特定の DOM 要素や View を Meteor テンプレートからレンダリングする際に使用したデータコンテキストを返します。</target>
        </trans-unit>
        <trans-unit id="1d4bfb60ebedff68f5fd65f0ad9563137cd80a7f" translate="yes" xml:space="preserve">
          <source>Returns the current value of the ReactiveVar, establishing a reactive dependency.</source>
          <target state="translated">ReactiveVar の現在の値を返し、リアクティブな依存関係を確立します。</target>
        </trans-unit>
        <trans-unit id="dfa1f3ec85911f5a0d5bacc052fdac9c074b652f" translate="yes" xml:space="preserve">
          <source>Returns the number of documents that match a query.</source>
          <target state="translated">クエリにマッチするドキュメントの数を返します。</target>
        </trans-unit>
        <trans-unit id="2200acbce72c1d4789bad815509ce1f619efbd90" translate="yes" xml:space="preserve">
          <source>Returns true if &lt;code&gt;value&lt;/code&gt; is a template object like &lt;code&gt;Template.myTemplate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; が &lt;code&gt;Template.myTemplate&lt;/code&gt; のようなテンプレートオブジェクトの場合、trueを返します。</target>
        </trans-unit>
        <trans-unit id="4b8568caba404619a3400ef9f8cc92de6614b59f" translate="yes" xml:space="preserve">
          <source>Returns true if &lt;code&gt;x&lt;/code&gt; is a buffer of binary data, as returned from &lt;a href=&quot;#ejson_new_binary&quot;&gt;&lt;code&gt;EJSON.newBinary&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; が&lt;a href=&quot;#ejson_new_binary&quot;&gt; &lt;code&gt;EJSON.newBinary&lt;/code&gt; &lt;/a&gt;から返されたバイナリデータのバッファである場合、trueを返します。</target>
        </trans-unit>
        <trans-unit id="99f2d994469715424e279fadff7f71bac8d585d6" translate="yes" xml:space="preserve">
          <source>Returns true if the computation is a new dependent of &lt;code&gt;dependency&lt;/code&gt; rather than an existing one.</source>
          <target state="translated">計算が既存の &lt;code&gt;dependency&lt;/code&gt; ではなく、依存関係の新しい依存関係である場合、trueを返します。</target>
        </trans-unit>
        <trans-unit id="5caf1d79a7ade37b7c0b9481f3c08ce86c735415" translate="yes" xml:space="preserve">
          <source>Returns true if the value matches the pattern.</source>
          <target state="translated">値がパターンに一致した場合に真を返します。</target>
        </trans-unit>
        <trans-unit id="113c300fa95ddf1f0ecb1d78a180e2136a125575" translate="yes" xml:space="preserve">
          <source>Returns unique &lt;code&gt;ruleId&lt;/code&gt; that can be passed to &lt;code&gt;removeRule&lt;/code&gt;.</source>
          <target state="translated">戻り値のユニークな &lt;code&gt;ruleId&lt;/code&gt; に渡すことができ &lt;code&gt;removeRule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="14c00cc40cb9a802986228a425de9dca8530c3a8" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;preventDefault()&lt;/code&gt; has been called for this event.</source>
          <target state="translated">このイベント &lt;code&gt;preventDefault()&lt;/code&gt; が呼び出されたかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="711ff3cae769ddd78110829049c42edcd37953bb" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;stopImmediatePropagation()&lt;/code&gt; has been called for this event.</source>
          <target state="translated">このイベントに対して &lt;code&gt;stopImmediatePropagation()&lt;/code&gt; が呼び出されたかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="a63df53ef5e942ba64b3bd9f4eaba3b6329ab3bd" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;stopPropagation()&lt;/code&gt; has been called for this event.</source>
          <target state="translated">このイベントに対して &lt;code&gt;stopPropagation()&lt;/code&gt; が呼び出されたかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="cd5579e438b8d514ebfa3afdac6844eacf576a7c" translate="yes" xml:space="preserve">
          <source>Reusable components</source>
          <target state="translated">再利用可能なコンポーネント</target>
        </trans-unit>
        <trans-unit id="15d90af326f16531c4e8b8a49e7be3def862ae59" translate="yes" xml:space="preserve">
          <source>Reusable components have many advantages:</source>
          <target state="translated">再利用可能な部品には多くの利点があります。</target>
        </trans-unit>
        <trans-unit id="a284c65c1493f84a3127263ac51fc681656485e0" translate="yes" xml:space="preserve">
          <source>Reusable components in Blaze</source>
          <target state="translated">Blazeの再利用可能なコンポーネント</target>
        </trans-unit>
        <trans-unit id="b158e06f1216200c9f60198c61501480351d7aa9" translate="yes" xml:space="preserve">
          <source>Reusing code in Blaze</source>
          <target state="translated">Blazeでコードを再利用する</target>
        </trans-unit>
        <trans-unit id="ad6771cea1733cf8422062ac744cc6f183bf894e" translate="yes" xml:space="preserve">
          <source>Right now, Meteor Core ships with the &lt;code&gt;standard-minifiers&lt;/code&gt; package that can be replaced with a custom one. The &lt;a href=&quot;https://github.com/meteor/meteor/tree/devel/packages/standard-minifiers&quot;&gt;source&lt;/a&gt; of the package is a good example how to build your own minification plugin.</source>
          <target state="translated">現在、Meteor Coreには &lt;code&gt;standard-minifiers&lt;/code&gt; パッケージが付属しており、カスタムパッケージに置き換えることができます。パッケージの&lt;a href=&quot;https://github.com/meteor/meteor/tree/devel/packages/standard-minifiers&quot;&gt;ソース&lt;/a&gt;は、独自の縮小プラグインを構築する方法の良い例です。</target>
        </trans-unit>
        <trans-unit id="34e619ef5ba1e8b27ec55296e3c36612a379d293" translate="yes" xml:space="preserve">
          <source>Role-based permissions</source>
          <target state="translated">役割ベースのパーミッション</target>
        </trans-unit>
        <trans-unit id="5fa35a440181e8d55bd7cfc037441858edbc805a" translate="yes" xml:space="preserve">
          <source>Roles and permissions</source>
          <target state="translated">役割と権限</target>
        </trans-unit>
        <trans-unit id="7184d0f9f8e70d4b632c63288609269b59279541" translate="yes" xml:space="preserve">
          <source>Rolling deployments and data versions</source>
          <target state="translated">ローリング展開とデータバージョン</target>
        </trans-unit>
        <trans-unit id="7d15dd1bec2e055c5b177c9f869305ae6c54c9bb" translate="yes" xml:space="preserve">
          <source>Routing</source>
          <target state="translated">Routing</target>
        </trans-unit>
        <trans-unit id="8128c69c4470f8e138f6e62cde8d3b6df781896c" translate="yes" xml:space="preserve">
          <source>Routing programmatically</source>
          <target state="translated">プログラムによるルーティング</target>
        </trans-unit>
        <trans-unit id="2208d34eec2992b6566c52dcfd489d0151e7bcf7" translate="yes" xml:space="preserve">
          <source>Rules about Methods still apply</source>
          <target state="translated">メソッドに関するルールがまだ適用されています。</target>
        </trans-unit>
        <trans-unit id="28855377de3988a49c39152cac5435a613258928" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;meteor help run&lt;/code&gt; to see the full list of options.</source>
          <target state="translated">実行 &lt;code&gt;meteor help run&lt;/code&gt; オプションの完全なリストを参照してください。</target>
        </trans-unit>
        <trans-unit id="cf37a9ace3b319dd43e644e0069110adc29efad2" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;meteor run android-device&lt;/code&gt; to build the app, install it on the device, and launch it.</source>
          <target state="translated">実行 &lt;code&gt;meteor run android-device&lt;/code&gt; て、アプリケーションを構築するデバイスにインストールし、起動します。</target>
        </trans-unit>
        <trans-unit id="8ce1a6c4101c765e9d163cdc55c8efaa87b15c12" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;meteor run ios-device&lt;/code&gt; to open your project in Xcode.</source>
          <target state="translated">ファイル名を指定して実行 &lt;code&gt;meteor run ios-device&lt;/code&gt; Xcodeでプロジェクトを開きます。</target>
        </trans-unit>
        <trans-unit id="5a5e874e32b2a8152f44d7a06bb3f4ef57a55973" translate="yes" xml:space="preserve">
          <source>Run a function now and rerun it later whenever its dependencies change. Returns a Computation object that can be used to stop or observe the rerunning.</source>
          <target state="translated">関数を今すぐ実行し、依存関係が変更された場合はいつでも後で再実行します。再実行を停止または監視するために使用できる計算オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="c83e98edf2a0c6f2a6d8b5aaee71e43c0a4d8bb7" translate="yes" xml:space="preserve">
          <source>Run a function without tracking dependencies.</source>
          <target state="translated">依存関係をトラッキングせずに関数を実行する</target>
        </trans-unit>
        <trans-unit id="65b067f65c51a168a109d43f726c4b2063b59f95" translate="yes" xml:space="preserve">
          <source>Run a meteor development server in the current project. Searches upward from the current directory for the root directory of a Meteor project. Whenever you change any of the application&amp;rsquo;s source files, the changes are automatically detected and applied to the running application.</source>
          <target state="translated">現在のプロジェクトで流星開発サーバーを実行します。現在のディレクトリから上方向にMeteorプロジェクトのルートディレクトリを検索します。アプリケーションのソースファイルを変更すると、その変更は自動的に検出され、実行中のアプリケーションに適用されます。</target>
        </trans-unit>
        <trans-unit id="d16665f3fa7fc9d2d48dcd43ef512ef439b97a2e" translate="yes" xml:space="preserve">
          <source>Run code when a client or a server starts.</source>
          <target state="translated">クライアントやサーバーの起動時にコードを実行します。</target>
        </trans-unit>
        <trans-unit id="73b32ee93c68dbdff0bd27afe11ed32743ed737d" translate="yes" xml:space="preserve">
          <source>Run final QA on production.</source>
          <target state="translated">生産物の最終的なQAを実行します。</target>
        </trans-unit>
        <trans-unit id="99fc272b99a46928ca8a062919bdec3479b91a79" translate="yes" xml:space="preserve">
          <source>Run it locally:</source>
          <target state="translated">ローカルで実行してください。</target>
        </trans-unit>
        <trans-unit id="8ef120974061babfe981ce6b8225d9b4158ce035" translate="yes" xml:space="preserve">
          <source>Run the migration. At this point you should be confident that all lists have a &lt;code&gt;todoCount&lt;/code&gt;.</source>
          <target state="translated">移行を実行します。この時点で、すべてのリストに &lt;code&gt;todoCount&lt;/code&gt; があることを確信しているはずです。</target>
        </trans-unit>
        <trans-unit id="2ec862c1409feb5710432e9181beaa3c5a1b459b" translate="yes" xml:space="preserve">
          <source>Run the project, but suspend the server process for debugging.</source>
          <target state="translated">プロジェクトを実行しますが、デバッグのためにサーバープロセスを中断します。</target>
        </trans-unit>
        <trans-unit id="ac8382ae9e657d66704f1e57b71d2d1a66df25a6" translate="yes" xml:space="preserve">
          <source>Run through the whole build process for the app and run all linters the app uses. Outputs all build errors or linting warnings to the standard output.</source>
          <target state="translated">アプリのビルドプロセス全体を実行し、アプリが使用するすべてのリンターを実行します。すべてのビルドエラーまたはリンター警告を標準出力に出力します。</target>
        </trans-unit>
        <trans-unit id="e54fe58d90d3960424f2350d297d1a7a4c2eb497" translate="yes" xml:space="preserve">
          <source>Run validation code by itself without running the Method body.</source>
          <target state="translated">メソッド本体を実行せずに、それ自身で検証コードを実行します。</target>
        </trans-unit>
        <trans-unit id="62db9434a4168267a8eb92aa401e37cf9d8b60e6" translate="yes" xml:space="preserve">
          <source>Running acceptance tests</source>
          <target state="translated">受け入れテストの実行</target>
        </trans-unit>
        <trans-unit id="b5f2135517ec110eedee484c49324fd5f9892be7" translate="yes" xml:space="preserve">
          <source>Running an app in development is all about fast iteration time. All kinds of different parts of your app are handled differently and instrumented to enable better reloads and debugging. In production, the app is reduced to just the necessary code, and functions like a regular Node.js app. Therefore, you shouldn&amp;rsquo;t run your app in production by running the &lt;code&gt;meteor&lt;/code&gt; command. Instead, follow the directions in the &lt;a href=&quot;deployment#custom-deployment&quot;&gt;production deployment article&lt;/a&gt;.</source>
          <target state="translated">開発中のアプリの実行はすべて、高速な反復時間です。アプリのあらゆる種類の異なる部分は異なる方法で処理され、より適切なリロードとデバッグを可能にするように装備されています。本番環境では、アプリは必要なコードだけに削減され、通常のNode.jsアプリのように機能します。したがって、 &lt;code&gt;meteor&lt;/code&gt; コマンドを実行してアプリを本番環境で実行しないでください。代わりに、&lt;a href=&quot;deployment#custom-deployment&quot;&gt;本番環境での導入に関する記事の&lt;/a&gt;指示に従ってください。</target>
        </trans-unit>
        <trans-unit id="4be095ccdd94d2b1e7c85b3c5e697631860d90fc" translate="yes" xml:space="preserve">
          <source>Running full-app tests</source>
          <target state="translated">フルアプリテストの実行</target>
        </trans-unit>
        <trans-unit id="1120d67d5254aa21f97d7819ef49052320a610d2" translate="yes" xml:space="preserve">
          <source>Running migrations</source>
          <target state="translated">移行の実行</target>
        </trans-unit>
        <trans-unit id="2b388b314c3fd06ed5eeb23647f7534ab8c4ec2e" translate="yes" xml:space="preserve">
          <source>Running on iOS will not show client-side logs in the terminal, but Xcode will show native logs as usual in the &lt;a href=&quot;https://developer.apple.com/library/tvos/documentation/DeveloperTools/Conceptual/debugging_with_xcode/chapters/debugging_tools.html&quot;&gt;debug console&lt;/a&gt;. You can add &lt;a href=&quot;https://github.com/apache/cordova-plugin-console&quot;&gt;cordova-plugin-console&lt;/a&gt; to your project to output &lt;code&gt;console&lt;/code&gt; logging calls to the native logs (which Android does by default), but this isn&amp;rsquo;t recommended because it has a substantial performance impact, and remote debugging gives you much nicer and more complete console output.</source>
          <target state="translated">iOSで実行すると、ターミナルにクライアント側のログは表示されませんが、Xcodeは通常どおり&lt;a href=&quot;https://developer.apple.com/library/tvos/documentation/DeveloperTools/Conceptual/debugging_with_xcode/chapters/debugging_tools.html&quot;&gt;デバッグコンソールに&lt;/a&gt;ネイティブログを表示します。プロジェクトに&lt;a href=&quot;https://github.com/apache/cordova-plugin-console&quot;&gt;cordova-plugin-console&lt;/a&gt;を追加して、ネイティブログ（デフォルトではAndroidが行う）への &lt;code&gt;console&lt;/code&gt; ロギング呼び出しを出力できますが、これはパフォーマンスに大きな影響を与えるためお勧めできません。リモートデバッグを使用すると、より完全なコンソール出力。</target>
        </trans-unit>
        <trans-unit id="27522f8a49676d7ac99a9375ec6596bf175fb25f" translate="yes" xml:space="preserve">
          <source>Running the migration on your local machine will probably make it take a lot longer as your machine isn&amp;rsquo;t as close to the production database as it could be.</source>
          <target state="translated">ローカルマシンで移行を実行すると、マシンが本番データベースにできるだけ近づかないため、おそらくかなり時間がかかります。</target>
        </trans-unit>
        <trans-unit id="10d439482778e2a2049898cc331c501cc436a6e6" translate="yes" xml:space="preserve">
          <source>Running unit tests</source>
          <target state="translated">ユニットテストの実行</target>
        </trans-unit>
        <trans-unit id="78bb8826fcc2504583e625386c238563e6207595" translate="yes" xml:space="preserve">
          <source>SSL</source>
          <target state="translated">SSL</target>
        </trans-unit>
        <trans-unit id="e195c53109047004a9cc210c6b5a3caf52332575" translate="yes" xml:space="preserve">
          <source>SSL Certificate</source>
          <target state="translated">SSL証明書</target>
        </trans-unit>
        <trans-unit id="5d8e270a3b478909d95ca7c40279e9043d659c52" translate="yes" xml:space="preserve">
          <source>SafeString</source>
          <target state="translated">SafeString</target>
        </trans-unit>
        <trans-unit id="f71dc05e071d088a9c780f2b1a6d694a3fb6befe" translate="yes" xml:space="preserve">
          <source>Same as the constructor argument.</source>
          <target state="translated">コンストラクタの引数と同じです。</target>
        </trans-unit>
        <trans-unit id="b6eeeb3abd2a7bc179a6b6d5c56488b5f8c903a7" translate="yes" xml:space="preserve">
          <source>Sass</source>
          <target state="translated">Sass</target>
        </trans-unit>
        <trans-unit id="9f70cfec1604b298dcfbaec9575e55ba48ba5dbc" translate="yes" xml:space="preserve">
          <source>Sass, Less, or Stylus?</source>
          <target state="translated">サスかレスかスタイラスか?</target>
        </trans-unit>
        <trans-unit id="32e6e0b94d6167fe9b7fe89e42d7f5044ab699ac" translate="yes" xml:space="preserve">
          <source>Schedules a function to be called during the next flush, or later in the current flush if one is in progress, after all invalidated computations have been rerun. The function will be run once and not on subsequent flushes unless &lt;code&gt;afterFlush&lt;/code&gt; is called again.</source>
          <target state="translated">無効にされたすべての計算が再実行された後、次のフラッシュ中に、または現在のフラッシュが進行中の場合は後で、呼び出される関数をスケジュールします。この関数は一度実行され、 &lt;code&gt;afterFlush&lt;/code&gt; が再度呼び出されない限り、後続のフラッシュでは実行されません。</target>
        </trans-unit>
        <trans-unit id="d309def7c9266580fb73e9d47d1961225a2a23b7" translate="yes" xml:space="preserve">
          <source>Scope DOM lookups to the template instance</source>
          <target state="translated">DOM のルックアップをテンプレートインスタンスにスコープする</target>
        </trans-unit>
        <trans-unit id="883d1c30464c5133deb4650b36e619a4392cff51" translate="yes" xml:space="preserve">
          <source>Search on the &lt;a href=&quot;https://atmospherejs.com/&quot;&gt;Atmosphere website&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://atmospherejs.com/&quot;&gt;Atmosphere Webサイトで&lt;/a&gt;検索します。</target>
        </trans-unit>
        <trans-unit id="e3475e2db0d019565d1ca87758eec7edd62085a1" translate="yes" xml:space="preserve">
          <source>Searches for Meteor packages and releases, whose names contain the specified regular expression.</source>
          <target state="translated">指定された正規表現を含む名前のMeteorパッケージとリリースを検索します。</target>
        </trans-unit>
        <trans-unit id="8ad30bba4b18ac4df7ce3a4a23bbaa04acebf666" translate="yes" xml:space="preserve">
          <source>Searching for packages</source>
          <target state="translated">パッケージを探す</target>
        </trans-unit>
        <trans-unit id="3987f0061ea29708554b30785525952aebaf74a8" translate="yes" xml:space="preserve">
          <source>Secret API keys should never be stored in your source code at all, the next section will talk about how to handle them.</source>
          <target state="translated">秘密のAPIキーは、決してソースコードに保存してはいけないものではありません。</target>
        </trans-unit>
        <trans-unit id="be0139dda44d098daa31eb14ef4dc6b673dec78e" translate="yes" xml:space="preserve">
          <source>Secret API keys.</source>
          <target state="translated">秘密のAPIキー。</target>
        </trans-unit>
        <trans-unit id="04c0eefaa17d751a2cf4b34f4c893ee8801f7ed7" translate="yes" xml:space="preserve">
          <source>Secret algorithms that a competitor could steal.</source>
          <target state="translated">競合他社が盗む可能性のある秘密のアルゴリズム。</target>
        </trans-unit>
        <trans-unit id="d6cd8be97888a56174d431bff061bea19025c1b4" translate="yes" xml:space="preserve">
          <source>Secret business logic in your app should be located in code that is only loaded on the server. This means it is in a &lt;code&gt;server/&lt;/code&gt; directory of your app, in a package that is only included on the server, or in a file inside a package that was loaded only on the server.</source>
          <target state="translated">アプリの秘密のビジネスロジックは、サーバーにのみ読み込まれるコードに配置する必要があります。つまり、アプリの &lt;code&gt;server/&lt;/code&gt; ディレクトリ、サーバーにのみ含まれているパッケージ、またはサーバーにのみ読み込まれたパッケージ内のファイルにあります。</target>
        </trans-unit>
        <trans-unit id="b3fc3b91ad7369046ee5d271ab3be72365042098" translate="yes" xml:space="preserve">
          <source>Secret server code</source>
          <target state="translated">秘密のサーバーコード</target>
        </trans-unit>
        <trans-unit id="038f44881a0c82e1dacea7ffa6fa04b95a2574f3" translate="yes" xml:space="preserve">
          <source>Secure the data, not the UI - redirecting away from a client-side route does nothing for security, it&amp;rsquo;s just a nice UX feature.</source>
          <target state="translated">UIではなくデータを保護します。クライアント側のルートからリダイレクトすると、セキュリティには何の効果もありません。これは、優れたUX機能です。</target>
        </trans-unit>
        <trans-unit id="7fc5094a6a529a06cf4de0f2c90b013709424e66" translate="yes" xml:space="preserve">
          <source>Securing API keys</source>
          <target state="translated">API キーの保護</target>
        </trans-unit>
        <trans-unit id="2d9658effc7c6ea9a9f1ccbf39d37f944b00b628" translate="yes" xml:space="preserve">
          <source>Securing a web application is all about understanding security domains and understanding the attack surface between these domains. In a Meteor app, things are pretty simple:</source>
          <target state="translated">ウェブアプリケーションのセキュリティを確保するには、セキュリティドメインを理解し、これらのドメイン間の攻撃面を理解することがすべてです。Meteor アプリでは、物事は非常に単純です。</target>
        </trans-unit>
        <trans-unit id="f25ce1b8a399bd8621a57427a20039b4b13935db" translate="yes" xml:space="preserve">
          <source>Security</source>
          <target state="translated">Security</target>
        </trans-unit>
        <trans-unit id="6c40431cdd5d0303effab46224badb7d49a79307" translate="yes" xml:space="preserve">
          <source>Security checklist</source>
          <target state="translated">セキュリティチェックリスト</target>
        </trans-unit>
        <trans-unit id="d8b13bc4a3d44d1b0ed58cddefc6791d5719e4f0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Event-Maps&quot;&gt;Event Maps&lt;/a&gt; for a detailed description of the event map format and how event handling works in Meteor.</source>
          <target state="translated">イベントマップの形式の詳細と、Meteorでのイベント処理の仕組みについては、&lt;a href=&quot;#Event-Maps&quot;&gt;イベントマップ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="fca69e387dff42155aded59f486ef2124f4d801b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#computation_oninvalidate&quot;&gt;&lt;em&gt;&lt;code&gt;computation&lt;/code&gt;&lt;/em&gt;&lt;code&gt;.onInvalidate&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#computation_oninvalidate&quot;&gt;&lt;em&gt; &lt;code&gt;computation&lt;/code&gt; &lt;/em&gt; &lt;code&gt;.onInvalidate&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="8237c3552d75dbb4739021a6a85deba2109fba55" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#view_firstnode&quot;&gt;&lt;code&gt;firstNode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#view_firstnode&quot;&gt; &lt;code&gt;firstNode()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="37e7115ecc5bfc84b5f89c8fb51a441fa07bea44" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://docs.mongodb.org/manual/tutorial/project-fields-from-query-results/#projection&quot;&gt; the MongoDB docs&lt;/a&gt; for details of the nested field rules and array behavior.</source>
          <target state="translated">参照&lt;a href=&quot;http://docs.mongodb.org/manual/tutorial/project-fields-from-query-results/#projection&quot;&gt;MongoDBのドキュメント&lt;/a&gt;ネストされたフィールドのルールと、アレイの動作の詳細については、を。</target>
        </trans-unit>
        <trans-unit id="cbc90c39de6c7d8a216aa50ed76e78f5280cef8d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/debug/remote-debugging/remote-debugging#remote-debugging-on-android-with-chrome-devtools&quot;&gt;this article&lt;/a&gt; for instructions on how to remote debug your Android app with the Chrome DevTools.</source>
          <target state="translated">Chrome DevToolsを使用してAndroidアプリをリモートデバッグする方法については、&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/debug/remote-debugging/remote-debugging#remote-debugging-on-android-with-chrome-devtools&quot;&gt;この記事&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3126d8f08b9016ef673b8b2f6298400df86ef819" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;modules#CoffeeScript&quot;&gt;Modules &amp;raquo; Syntax &amp;raquo; CoffeeScript&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;modules#CoffeeScript&quot;&gt;モジュール&amp;raquo;構文&amp;raquo;CoffeeScriptを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4b2ed8790ccbf6708fcfd498fc66ed11a6130c32" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#BIND-IP&quot;&gt;&lt;code&gt;BIND_IP&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">参照：&lt;a href=&quot;#BIND-IP&quot;&gt; &lt;code&gt;BIND_IP&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9e0bf2b379fb150ea19626531e11018fc722f6b5" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#PORT&quot;&gt;&lt;code&gt;PORT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#PORT&quot;&gt; &lt;code&gt;PORT&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="4e770d141e06088557ee2818eb57a13235efb46d" translate="yes" xml:space="preserve">
          <source>See an example of a linting plugin implemented in Core: &lt;a href=&quot;https://github.com/meteor/meteor/tree/devel/packages/jshint&quot;&gt;jshint&lt;/a&gt;.</source>
          <target state="translated">Core：&lt;a href=&quot;https://github.com/meteor/meteor/tree/devel/packages/jshint&quot;&gt;jshintに&lt;/a&gt;実装されているリンティングプラグインの例をご覧ください。</target>
        </trans-unit>
        <trans-unit id="28919346ab02e0a8e42e01b3f12218f2a79d986b" translate="yes" xml:space="preserve">
          <source>See description of &lt;a href=&quot;#accounts_onloginfailure&quot;&gt;AccountsCommon#onLoginFailure&lt;/a&gt; for details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#accounts_onloginfailure&quot;&gt;AccountsCommon＃onLoginFailureの&lt;/a&gt;説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="8f3b5f3d2e6eefc9bf0b79711aa4f32bb7060bb4" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;http://docs.mongodb.org/manual/reference/operator/&quot;&gt;complete documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://docs.mongodb.org/manual/reference/operator/&quot;&gt;完全なドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ca39bd511ac60dac08f0cb572980df4db83fb9bd" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;http://docs.mongodb.org/manual/reference/operator/update/&quot;&gt;full list of modifiers&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://docs.mongodb.org/manual/reference/operator/update/&quot;&gt;修飾子&lt;/a&gt;の完全なリストを参照してください。</target>
        </trans-unit>
        <trans-unit id="9faed082e8248ab5f20c14fb4ed9379f5f85806d" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/meteor/docs/blob/master/long-form/tracker-manual.md#creating-a-reactive-value-using-trackerdependency&quot;&gt;Tracker manual&lt;/a&gt; to learn how to create a reactive data source using &lt;code&gt;Tracker.Dependency&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Tracker.Dependency&lt;/code&gt; を使用してリアクティブデータソースを作成する方法については、&lt;a href=&quot;https://github.com/meteor/docs/blob/master/long-form/tracker-manual.md#creating-a-reactive-value-using-trackerdependency&quot;&gt;トラッカーマニュアル&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="35731614430df115b1c5334503360571cdaa7378" translate="yes" xml:space="preserve">
          <source>See the Docs: &lt;a href=&quot;https://docs.meteor.com/packages/modules.html#CoffeeScript&quot;&gt;Modules &amp;raquo; Syntax &amp;raquo; CoffeeScript&lt;/a&gt;</source>
          <target state="translated">ドキュメントを参照してください：&lt;a href=&quot;https://docs.meteor.com/packages/modules.html#CoffeeScript&quot;&gt;モジュール&amp;raquo;構文&amp;raquo;CoffeeScript&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4faf6de68d5021fd48da0a9f0aaf239dabb4e520" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;https://atmospherejs.com/universe/i18n&quot;&gt;&lt;code&gt;universe:i18n&lt;/code&gt;&lt;/a&gt; for additional options and configuration.</source>
          <target state="translated">追加のオプションと設定については、&lt;a href=&quot;https://atmospherejs.com/universe/i18n&quot;&gt; &lt;code&gt;universe:i18n&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="0c20b774264ddb1550c65438747330633d99bbf5" translate="yes" xml:space="preserve">
          <source>Select your app origin</source>
          <target state="translated">アプリのオリジンを選択します。</target>
        </trans-unit>
        <trans-unit id="cfb0ea17037b0734a233d08579e75e88ef495131" translate="yes" xml:space="preserve">
          <source>Select your distribution</source>
          <target state="translated">ディストリビューションを選択してください</target>
        </trans-unit>
        <trans-unit id="16919af682dae2171fb05bf9148f48ba20650209" translate="yes" xml:space="preserve">
          <source>Semantic versioning and version constraints</source>
          <target state="translated">セマンティックバージョニングとバージョン制約</target>
        </trans-unit>
        <trans-unit id="08414b570a795cc81b6907f83b267ef3f81cf7ec" translate="yes" xml:space="preserve">
          <source>Send an HTTP &lt;code&gt;DELETE&lt;/code&gt; request. Equivalent to calling &lt;a href=&quot;#http_call&quot;&gt;&lt;code&gt;HTTP.call&lt;/code&gt;&lt;/a&gt; with &quot;DELETE&quot; as the first argument. (Named &lt;code&gt;del&lt;/code&gt; to avoid conflict with the Javascript keyword &lt;code&gt;delete&lt;/code&gt;)</source>
          <target state="translated">HTTP &lt;code&gt;DELETE&lt;/code&gt; リクエストを送信します。最初の引数として &quot;DELETE&quot; を&lt;a href=&quot;#http_call&quot;&gt; &lt;code&gt;HTTP.call&lt;/code&gt; &lt;/a&gt;してHTTP.callを呼び出すのと同じです。（Javascriptキーワード &lt;code&gt;delete&lt;/code&gt; との競合を避けるために &lt;code&gt;del&lt;/code&gt; と名付けました）</target>
        </trans-unit>
        <trans-unit id="20153162231adf87b39564be97298b927720da54" translate="yes" xml:space="preserve">
          <source>Send an HTTP &lt;code&gt;GET&lt;/code&gt; request. Equivalent to calling &lt;a href=&quot;#http_call&quot;&gt;&lt;code&gt;HTTP.call&lt;/code&gt;&lt;/a&gt; with &quot;GET&quot; as the first argument.</source>
          <target state="translated">HTTP &lt;code&gt;GET&lt;/code&gt; リクエストを送信します。最初の引数として「GET」を&lt;a href=&quot;#http_call&quot;&gt; &lt;code&gt;HTTP.call&lt;/code&gt; &lt;/a&gt;してHTTP.callを呼び出すのと同じです。</target>
        </trans-unit>
        <trans-unit id="17d83a070e4a780970e424a16209aa6d3faf03e9" translate="yes" xml:space="preserve">
          <source>Send an HTTP &lt;code&gt;POST&lt;/code&gt; request. Equivalent to calling &lt;a href=&quot;#http_call&quot;&gt;&lt;code&gt;HTTP.call&lt;/code&gt;&lt;/a&gt; with &quot;POST&quot; as the first argument.</source>
          <target state="translated">HTTP &lt;code&gt;POST&lt;/code&gt; リクエストを送信します。最初の引数として「POST」を&lt;a href=&quot;#http_call&quot;&gt; &lt;code&gt;HTTP.call&lt;/code&gt; &lt;/a&gt;してHTTP.callを呼び出すのと同じです。</target>
        </trans-unit>
        <trans-unit id="31a0c499286858733a515b188759317d59e133a8" translate="yes" xml:space="preserve">
          <source>Send an HTTP &lt;code&gt;PUT&lt;/code&gt; request. Equivalent to calling &lt;a href=&quot;#http_call&quot;&gt;&lt;code&gt;HTTP.call&lt;/code&gt;&lt;/a&gt; with &quot;PUT&quot; as the first argument.</source>
          <target state="translated">HTTP &lt;code&gt;PUT&lt;/code&gt; リクエストを送信します。最初の引数として「PUT」を&lt;a href=&quot;#http_call&quot;&gt; &lt;code&gt;HTTP.call&lt;/code&gt; &lt;/a&gt;してHTTP.callを呼び出すのと同じです。</target>
        </trans-unit>
        <trans-unit id="dc516ab03aa311272837ca65647302297044506e" translate="yes" xml:space="preserve">
          <source>Send an email with a link the user can use to reset their password.</source>
          <target state="translated">ユーザーがパスワードをリセットするために使用できるリンクを添付したメールを送信します。</target>
        </trans-unit>
        <trans-unit id="6bcd556d8c1771306a449dbaf461c27e109b3f81" translate="yes" xml:space="preserve">
          <source>Send an email with a link the user can use to set their initial password.</source>
          <target state="translated">ユーザーが初期パスワードを設定するために使用できるリンクを添付したメールを送信します。</target>
        </trans-unit>
        <trans-unit id="f7312b1839069ebf1c7630d998a4c33491b9ee51" translate="yes" xml:space="preserve">
          <source>Send an email with a link the user can use verify their email address.</source>
          <target state="translated">ユーザーが自分のメールアドレスを確認するために使用できるリンクを添付したメールを送信します。</target>
        </trans-unit>
        <trans-unit id="6a6d723fe408c120cda7b79a89b0b18e53bb7c16" translate="yes" xml:space="preserve">
          <source>Send an email. Throws an &lt;code&gt;Error&lt;/code&gt; on failure to contact mail server or if mail server returns an error. All fields should match &lt;a href=&quot;http://tools.ietf.org/html/rfc5322&quot;&gt;RFC5322&lt;/a&gt; specification.</source>
          <target state="translated">メールを送る。例外 &lt;code&gt;Error&lt;/code&gt; 接点メールサーバやメールサーバがエラーを返した場合、失敗した場合には。すべてのフィールドは&lt;a href=&quot;http://tools.ietf.org/html/rfc5322&quot;&gt;RFC5322&lt;/a&gt;仕様に一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="a8a524f10d294b2eb2df21525271e4188dac7d8a" translate="yes" xml:space="preserve">
          <source>Sending the email</source>
          <target state="translated">メールの送信</target>
        </trans-unit>
        <trans-unit id="52c38c5fd40d268aa487131b6f119ffd702edd4a" translate="yes" xml:space="preserve">
          <source>Serialize a value to a string. For EJSON values, the serialization fully represents the value. For non-EJSON values, serializes the same way as &lt;code&gt;JSON.stringify&lt;/code&gt;.</source>
          <target state="translated">値を文字列にシリアル化します。EJSON値の場合、シリアライゼーションは値を完全に表します。非EJSON値の場合、 &lt;code&gt;JSON.stringify&lt;/code&gt; と同じ方法でシリアル化します。</target>
        </trans-unit>
        <trans-unit id="1bb054eb9fa646925ae3ecd1baba7a3b511c9efa" translate="yes" xml:space="preserve">
          <source>Serialize an EJSON-compatible value into its plain JSON representation.</source>
          <target state="translated">EJSON互換の値をプレーンなJSON表現にシリアライズします。</target>
        </trans-unit>
        <trans-unit id="c429afcde389802f396daaa661ab40e4cdc0ee78" translate="yes" xml:space="preserve">
          <source>Serialize this instance into a JSON-compatible value.</source>
          <target state="translated">このインスタンスを JSON 互換の値にシリアライズします。</target>
        </trans-unit>
        <trans-unit id="7dcf6c8feacbe81988ca71309fcb7379ae28c4fa" translate="yes" xml:space="preserve">
          <source>Served files</source>
          <target state="translated">サーブされたファイル</target>
        </trans-unit>
        <trans-unit id="cb0cb170d106f8e8d5af1e05bbdbd3a96a7de197" translate="yes" xml:space="preserve">
          <source>Server</source>
          <target state="translated">Server</target>
        </trans-unit>
        <trans-unit id="cb46f37fe9212a9315e731389dcec2de84112a2e" translate="yes" xml:space="preserve">
          <source>Server Connections</source>
          <target state="translated">サーバー接続</target>
        </trans-unit>
        <trans-unit id="4ff6540c25bde7085cf0d2d1e9575cb74d3e0915" translate="yes" xml:space="preserve">
          <source>Server Rendering</source>
          <target state="translated">サーバーレンダリング</target>
        </trans-unit>
        <trans-unit id="63eebe3062d457aa6c6d748fdc54a598dd71bd88" translate="yes" xml:space="preserve">
          <source>Server Routing for API access</source>
          <target state="translated">APIアクセスのためのサーバールーティング</target>
        </trans-unit>
        <trans-unit id="6844d311dc2e8f093fdbeca96aeed32c5fc7bfa8" translate="yes" xml:space="preserve">
          <source>Server Side Routing</source>
          <target state="translated">サーバー側ルーティング</target>
        </trans-unit>
        <trans-unit id="d95d51e76282fecac3f98c5d1b83a1688ac7db86" translate="yes" xml:space="preserve">
          <source>Server [Not in build plugins]</source>
          <target state="translated">サーバー [ビルドプラグインにはない]</target>
        </trans-unit>
        <trans-unit id="f79ff6c35a336ad293fb67e335b11e74f356ca6e" translate="yes" xml:space="preserve">
          <source>Server example:</source>
          <target state="translated">サーバーの例。</target>
        </trans-unit>
        <trans-unit id="5c6b62c1e86c6ed24f03c3db81c390e5eae031f2" translate="yes" xml:space="preserve">
          <source>Server-side collections</source>
          <target state="translated">サーバー側のコレクション</target>
        </trans-unit>
        <trans-unit id="5cbd584046863bc7b753e57e8681a98a87f36f0f" translate="yes" xml:space="preserve">
          <source>Services</source>
          <target state="translated">Services</target>
        </trans-unit>
        <trans-unit id="f7f1997c6cd1aa051279675742272a956e7db628" translate="yes" xml:space="preserve">
          <source>Session</source>
          <target state="translated">Session</target>
        </trans-unit>
        <trans-unit id="a9fb80e899597e03753ba9424e22c41fd1dd96d9" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;ANDROID_HOME&lt;/code&gt; and add the tools directories to your &lt;code&gt;PATH&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ANDROID_HOME&lt;/code&gt; を設定し、 &lt;code&gt;PATH&lt;/code&gt; に toolsディレクトリを追加します</target>
        </trans-unit>
        <trans-unit id="a466d1f1e10272a5fcd913e3964147f01a33bccc" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;HTTP_FORWARDED_COUNT&lt;/code&gt; to an integer representing the number of proxies in front of your server. For example, you&amp;rsquo;d set it to &lt;code&gt;1&lt;/code&gt; when your server was behind one proxy.</source>
          <target state="translated">&lt;code&gt;HTTP_FORWARDED_COUNT&lt;/code&gt; を、サーバーの前にあるプロキシの数を表す整数に設定します。たとえば、サーバーが1つのプロキシの背後にある場合は、 &lt;code&gt;1&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="a94ff804efb8542bacaad0421a8624ae76e6115f" translate="yes" xml:space="preserve">
          <source>Set a new access rule based on origin domain for your app. By default your application has a limited list of servers it can contact. Use this method to extend this list.</source>
          <target state="translated">アプリのオリジン ドメインに基づく新しいアクセス ルールを設定します。既定では、アプリケーションには連絡可能なサーバーのリストが限られています。このリストを拡張するには、このメソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="474a8790c6be462a53b787ddbebe6482f08ceb9c" translate="yes" xml:space="preserve">
          <source>Set a variable in the session if it hasn't been set before. Otherwise works exactly the same as &lt;a href=&quot;#session_set&quot;&gt;&lt;code&gt;Session.set&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">変数がまだ設定されていない場合は、セッションで変数を設定します。それ以外は、&lt;a href=&quot;#session_set&quot;&gt; &lt;code&gt;Session.set&lt;/code&gt; &lt;/a&gt;とまったく同じように機能します。</target>
        </trans-unit>
        <trans-unit id="dd6a0ab02ea3becfa235cb520e3d0093728b5d68" translate="yes" xml:space="preserve">
          <source>Set a variable in the session. Notify any listeners that the value has changed (eg: redraw templates, and rerun any &lt;a href=&quot;#tracker_autorun&quot;&gt;&lt;code&gt;Tracker.autorun&lt;/code&gt;&lt;/a&gt; computations, that called &lt;a href=&quot;#session_get&quot;&gt;&lt;code&gt;Session.get&lt;/code&gt;&lt;/a&gt; on this &lt;code&gt;key&lt;/code&gt;.)</source>
          <target state="translated">セッションで変数を設定します。値が変更されたことをリスナーに通知します（例：テンプレートを再描画し、この &lt;code&gt;key&lt;/code&gt; &lt;a href=&quot;#session_get&quot;&gt; &lt;code&gt;Session.get&lt;/code&gt; &lt;/a&gt;を呼び出した&lt;a href=&quot;#tracker_autorun&quot;&gt; &lt;code&gt;Tracker.autorun&lt;/code&gt; &lt;/a&gt;計算を再実行します）。</target>
        </trans-unit>
        <trans-unit id="0868a117b5fa798b2b6a975c7fb0b0668e990d9f" translate="yes" xml:space="preserve">
          <source>Set error message text when method or subscription rate limit exceeded.</source>
          <target state="translated">メソッドまたは加入率の上限を超えた場合のエラーメッセージのテキストを設定します。</target>
        </trans-unit>
        <trans-unit id="2100d34444fb4ce91c64431d0bbe6e89bc8d4f9d" translate="yes" xml:space="preserve">
          <source>Set global accounts options.</source>
          <target state="translated">グローバルアカウントのオプションを設定します。</target>
        </trans-unit>
        <trans-unit id="f8a11d8df4e203ebab3704f29dceced5634e310c" translate="yes" xml:space="preserve">
          <source>Set restrictions on new user creation.</source>
          <target state="translated">新規ユーザー作成の制限を設定します。</target>
        </trans-unit>
        <trans-unit id="c097141f5e58fd69e73071834b48a00b9076cff2" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;ANDROID_HOME&lt;/code&gt; environment variable to the location of the Android SDK. If you&amp;rsquo;ve used the Android Studio setup wizard, it should be installed in &lt;code&gt;~/Library/Android/sdk&lt;/code&gt; by default.</source>
          <target state="translated">&lt;code&gt;ANDROID_HOME&lt;/code&gt; 環境変数をAndroid SDKの場所に設定します。Android Studioセットアップウィザードを使用した場合、デフォルトで &lt;code&gt;~/Library/Android/sdk&lt;/code&gt; インストールされます。</target>
        </trans-unit>
        <trans-unit id="ab0539029a8206c3046c0b94b0c2e688628bf02d" translate="yes" xml:space="preserve">
          <source>Set the build-time configuration for a Cordova plugin.</source>
          <target state="translated">Cordovaプラグインのビルド時間の設定を行います。</target>
        </trans-unit>
        <trans-unit id="8efa0fb25a7b782d6829b81e27ae9b298fdd4e27" translate="yes" xml:space="preserve">
          <source>Set the fields of the object by assigning to them:</source>
          <target state="translated">オブジェクトのフィールドに代入して設定します。</target>
        </trans-unit>
        <trans-unit id="a880a6457ca5972ffde0f57dd7c9655711778c7a" translate="yes" xml:space="preserve">
          <source>Set the icons for your mobile app.</source>
          <target state="translated">モバイルアプリのアイコンを設定します。</target>
        </trans-unit>
        <trans-unit id="84e76ad2c58d1d3ab8eb13bf39c7f285bbd71643" translate="yes" xml:space="preserve">
          <source>Set the launch screen images for your mobile app.</source>
          <target state="translated">モバイルアプリの起動画面の画像を設定します。</target>
        </trans-unit>
        <trans-unit id="aeec94c0f0217937f531870de6304f3bb88a90c4" translate="yes" xml:space="preserve">
          <source>Set the logged in user.</source>
          <target state="translated">ログインしているユーザーを設定します。</target>
        </trans-unit>
        <trans-unit id="7d9aa1392649cd956c7be97715dd43ddd9af3c48" translate="yes" xml:space="preserve">
          <source>Set this to however many number of proxies you have running before your Meteor application. For example, if have an NGINX server acting as a proxy before your Meteor application, you would set &lt;code&gt;HTTP_FORWARDED_COUNT=1&lt;/code&gt;. If you have a load balancer in front of that NGINX server, the count is 2.</source>
          <target state="translated">これを、Meteorアプリケーションの前に実行しているプロキシの数に設定します。たとえば、Meteorアプリケーションの前にプロキシとして機能するNGINXサーバーがある場合は、 &lt;code&gt;HTTP_FORWARDED_COUNT=1&lt;/code&gt; を設定します。そのNGINXサーバーの前にロードバランサーがある場合、カウントは2です。</target>
        </trans-unit>
        <trans-unit id="8f1151de0b066675a643bc513935ade939a649f1" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;false&lt;/code&gt; to skip setting up the mutation methods that enable insert/update/remove from client code. Default &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">クライアントコードからの挿入/更新/削除を有効にするミューテーションメソッドの設定をスキップするには、 &lt;code&gt;false&lt;/code&gt; に設定します。デフォルトは &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="84277186a7e44add9f6ed1de93310c155b55fad6" translate="yes" xml:space="preserve">
          <source>Set up &lt;a href=&quot;https://atmospherejs.com/meteor/browser-policy&quot;&gt;browser policy&lt;/a&gt;, but know that not all browsers support it so it just provides an extra layer of security to users with modern browsers.</source>
          <target state="translated">&lt;a href=&quot;https://atmospherejs.com/meteor/browser-policy&quot;&gt;ブラウザポリシーを&lt;/a&gt;設定しますが、すべてのブラウザがそれをサポートしているわけではないため、最新のブラウザを使用しているユーザーにセキュリティの追加レイヤーを提供するだけです。</target>
        </trans-unit>
        <trans-unit id="26059f78b231dd38e5f8a1611adee67997509f14" translate="yes" xml:space="preserve">
          <source>Set up Sublime Text for ES2015</source>
          <target state="translated">ES2015のサブライムテキストを設定する</target>
        </trans-unit>
        <trans-unit id="052877a075af7b6c59cc675a1ae15a112a6a8b82" translate="yes" xml:space="preserve">
          <source>Set up your tests with the &lt;code&gt;Package.onTest&lt;/code&gt; handler, which has an interface that&amp;rsquo;s parallel to that of the &lt;code&gt;onUse&lt;/code&gt; handler. The tests will need to depend on the package that you have just created. For example, if your package is the &lt;code&gt;email&lt;/code&gt; package, you have to call &lt;code&gt;api.use('email')&lt;/code&gt; in order to test the package.</source>
          <target state="translated">&lt;code&gt;onUse&lt;/code&gt; ハンドラーのインターフェースと同等のインターフェースを持つ &lt;code&gt;Package.onTest&lt;/code&gt; ハンドラーでテストを設定します。テストは、作成したパッケージに依存する必要があります。たとえば、パッケージが &lt;code&gt;email&lt;/code&gt; パッケージの場合、パッケージをテストするには、 &lt;code&gt;api.use('email')&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="ec2afb77e48cf64faaeca8638039bd986cf1c758" translate="yes" xml:space="preserve">
          <source>Set your mobile app's core configuration information.</source>
          <target state="translated">モバイルアプリのコア設定情報を設定します。</target>
        </trans-unit>
        <trans-unit id="9dcf84601ce28ccf34d61e589b76264b91256c79" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;Meteor.isAppTest&lt;/code&gt; flag to be true (instead of the &lt;code&gt;Meteor.isTest&lt;/code&gt; flag).</source>
          <target state="translated">&lt;code&gt;Meteor.isAppTest&lt;/code&gt; フラグを（ &lt;code&gt;Meteor.isTest&lt;/code&gt; フラグの代わりに）trueに設定します。</target>
        </trans-unit>
        <trans-unit id="f8080b657ede4e6b55bfd342fc170a0915f7f41c" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;Meteor.isTest&lt;/code&gt; flag to be true.</source>
          <target state="translated">&lt;code&gt;Meteor.isTest&lt;/code&gt; フラグをtrueに設定します。</target>
        </trans-unit>
        <trans-unit id="904bbba587b1c8ad2dad8846ac67f52887a20931" translate="yes" xml:space="preserve">
          <source>Sets the current value of the ReactiveVar, invalidating the Computations that called &lt;code&gt;get&lt;/code&gt; if &lt;code&gt;newValue&lt;/code&gt; is different from the old value.</source>
          <target state="translated">ReactiveVarの現在の値を設定し、 &lt;code&gt;newValue&lt;/code&gt; が古い値と異なる場合に &lt;code&gt;get&lt;/code&gt; を呼び出した計算を無効にします。</target>
        </trans-unit>
        <trans-unit id="54a7c68e20d4d835028e20600b87f45d77872794" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;ANDROID_HOME&lt;/code&gt; and adding the tools directories to your &lt;code&gt;PATH&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ANDROID_HOME&lt;/code&gt; を設定し、ツールディレクトリを &lt;code&gt;PATH&lt;/code&gt; に追加する</target>
        </trans-unit>
        <trans-unit id="eed34e908902076e9264e4ad7813b5025e3853c8" translate="yes" xml:space="preserve">
          <source>Setting plugin parameters</source>
          <target state="translated">プラグインのパラメータを設定する</target>
        </trans-unit>
        <trans-unit id="1ad1f5bffa09f930716cc3b1a1176a7dc0396b01" translate="yes" xml:space="preserve">
          <source>Setting tag attributes via helpers (e.g. &lt;code&gt;&amp;lt;div {{attributes}}&amp;gt;&lt;/code&gt;) is a neat tool and has some precedence rules that make it more useful. Specifically, when you use it more than once on a given element, the attributes are composed (rather than the second set of attributes simply replacing the first). So you can use one helper to set one set of attributes and a second to set another. For instance:</source>
          <target state="translated">ヘルパーによるタグ属性の設定（例： &lt;code&gt;&amp;lt;div {{attributes}}&amp;gt;&lt;/code&gt; ）はきちんとしたツールであり、それをより便利にするいくつかの優先規則があります。具体的には、特定の要素で複数回使用すると、属性が構成されます（最初の属性セットを2番目の属性セットで置き換えるのではなく）。したがって、1つのヘルパーを使用して1つの属性セットを設定し、もう1つを使用して別の属性セットを設定できます。例えば：</target>
        </trans-unit>
        <trans-unit id="37223c70fe20a90e7164defe75b8d260faeb9932" translate="yes" xml:space="preserve">
          <source>Setting up SSL</source>
          <target state="translated">SSLの設定</target>
        </trans-unit>
        <trans-unit id="6d18d6bf5a6d7f360ff22f5759b370e85005149d" translate="yes" xml:space="preserve">
          <source>Settings are persistent. When you redeploy your app, the old value will be preserved unless you explicitly pass new settings using the &lt;code&gt;--settings&lt;/code&gt; option. To unset &lt;code&gt;Meteor.settings&lt;/code&gt;, pass an empty settings file.</source>
          <target state="translated">設定は永続的です。アプリを再デプロイすると、 &lt;code&gt;--settings&lt;/code&gt; オプションを使用して新しい設定を明示的に渡さない限り、古い値が保持されます。 &lt;code&gt;Meteor.settings&lt;/code&gt; の設定を解除するには、空の設定ファイルを渡します。</target>
        </trans-unit>
        <trans-unit id="695213abc06fa197ed4a73c115863be4ecf6d1de" translate="yes" xml:space="preserve">
          <source>Settings on the client</source>
          <target state="translated">クライアントの設定</target>
        </trans-unit>
        <trans-unit id="09a30596256b09bb9b3c7a1dc78e226ec4815ab1" translate="yes" xml:space="preserve">
          <source>Settings should be used to set environment (i.e. staging vs production) specific things, like the access token and secret used to connect to Google. These settings will not change between any given process running your application in the given environment.</source>
          <target state="translated">設定は、Google への接続に使用するアクセストークンやシークレットのように、環境 (ステージング vs 本番環境)に特有のものを設定するために使用します。これらの設定は、指定された環境でアプリケーションを実行している任意のプロセス間で変更されることはありません。</target>
        </trans-unit>
        <trans-unit id="8f4c87116412e85e367eab789b17b3511b068718" translate="yes" xml:space="preserve">
          <source>Sharing accounts</source>
          <target state="translated">アカウントの共有</target>
        </trans-unit>
        <trans-unit id="9f91705fe5b54d824df8460bb342771f79b84b37" translate="yes" xml:space="preserve">
          <source>Sharing code</source>
          <target state="translated">コードの共有</target>
        </trans-unit>
        <trans-unit id="a3d520b6d95896465f450679cdf0a1cc5a9d6830" translate="yes" xml:space="preserve">
          <source>Sharing data</source>
          <target state="translated">データの共有</target>
        </trans-unit>
        <trans-unit id="82bae8b29285c471dbf7aad0461857bd5f5609fe" translate="yes" xml:space="preserve">
          <source>Showing &lt;em&gt;all&lt;/em&gt; the items - no more available.</source>
          <target state="translated">表示しない&lt;em&gt;すべて&lt;/em&gt;のアイテムを-これ以上利用できます。</target>
        </trans-unit>
        <trans-unit id="5b07095fbfec182b98868bfa467c9c53e773d170" translate="yes" xml:space="preserve">
          <source>Showing &lt;em&gt;no&lt;/em&gt; items because none exist.</source>
          <target state="translated">表示しない&lt;em&gt;全く&lt;/em&gt;なし存在するためのアイテムを。</target>
        </trans-unit>
        <trans-unit id="8f5912d5929b0363365aadb1d03bdaa4bebbc472" translate="yes" xml:space="preserve">
          <source>Showing a subset of the items with more available.</source>
          <target state="translated">より多くの利用可能な項目のサブセットを表示します。</target>
        </trans-unit>
        <trans-unit id="ee89e4636392433cb94e5d06ba98ed9577491d32" translate="yes" xml:space="preserve">
          <source>Showing a subset of the items with more loading.</source>
          <target state="translated">負荷の高い項目のサブセットを表示します。</target>
        </trans-unit>
        <trans-unit id="22a285b02a4fdc67c5be75eace7e654455038f4a" translate="yes" xml:space="preserve">
          <source>Showing placeholders</source>
          <target state="translated">プレースホルダの表示</target>
        </trans-unit>
        <trans-unit id="fd0a4616d2b74eb5364b45519c2bae5d3a547e97" translate="yes" xml:space="preserve">
          <source>Shows more information about a specific package or release: name, summary, the usernames of its maintainers, and, if specified, its homepage and git URL.</source>
          <target state="translated">特定のパッケージやリリースに関する情報を表示します。 名前、概要、メンテナのユーザ名、そして指定した場合はホームページや git の URL。</target>
        </trans-unit>
        <trans-unit id="95480b4946cf0f4acacff6221f3354c159cae878" translate="yes" xml:space="preserve">
          <source>Shrinkpack</source>
          <target state="translated">Shrinkpack</target>
        </trans-unit>
        <trans-unit id="a1ca0f23b735dfbb9ffbf04aed8e726e817b949d" translate="yes" xml:space="preserve">
          <source>Similar to the way we cleared the database using a method in the &lt;code&gt;beforeEach&lt;/code&gt; in the &lt;a href=&quot;#test-data&quot;&gt;test data&lt;/a&gt; section above, we can call a method to do that before running our tests. In the case of our routing tests, we&amp;rsquo;ve used a file called &lt;a href=&quot;https://github.com/meteor/todos/blob/master/imports/api/generate-data.app-tests.js&quot;&gt;&lt;code&gt;imports/api/generate-data.app-tests.js&lt;/code&gt;&lt;/a&gt; which defines this method (and will only be loaded in full app test mode, so is not available in general!):</source>
          <target state="translated">上記の&lt;a href=&quot;#test-data&quot;&gt;テストデータ&lt;/a&gt;セクションの &lt;code&gt;beforeEach&lt;/code&gt; のメソッドを使用してデータベースをクリアする方法と同様に、テストを実行する前にメソッドを呼び出すことができます。ルーティングテストの場合、このメソッドを定義&lt;a href=&quot;https://github.com/meteor/todos/blob/master/imports/api/generate-data.app-tests.js&quot;&gt; &lt;code&gt;imports/api/generate-data.app-tests.js&lt;/code&gt; &lt;/a&gt;というファイルを使用しました（完全なアプリテストモードでのみ読み込まれるため、一般的には利用できません） ！）：</target>
        </trans-unit>
        <trans-unit id="ff77663843c2e4f0390094118d8381f2acb6aecb" translate="yes" xml:space="preserve">
          <source>Similarly, gaps in the platform highlighted by the guide can often be plugged by &lt;strong&gt;community packages&lt;/strong&gt;; we hope that if you see an opportunity to improve the Meteor workflow by writing a package, that you take it! If you&amp;rsquo;re not sure how best to design or architect your package, reach out on the forums and start a discussion.</source>
          <target state="translated">同様に、ガイドで強調されているプラ​​ットフォームのギャップは、&lt;strong&gt;コミュニティパッケージ&lt;/strong&gt;によって塞がれることがよくあり&lt;strong&gt;ます&lt;/strong&gt;。パッケージを作成してMeteorワークフローを改善する機会があったら、それを理解していただければ幸いです。パッケージを設計または設計する方法がわからない場合は、フォーラムにアクセスしてディスカッションを開始してください。</target>
        </trans-unit>
        <trans-unit id="abf9deaee8187b606eb185f33cf375f31c4e5d42" translate="yes" xml:space="preserve">
          <source>Simple integration test</source>
          <target state="translated">簡単な統合テスト</target>
        </trans-unit>
        <trans-unit id="8ee5ce85efcdb07beb3331674001255221f6b6d8" translate="yes" xml:space="preserve">
          <source>Since Meteor apps are often written in a style that puts client and server code together, it&amp;rsquo;s extra important to be aware what is running on the client, what is running on the server, and what the boundaries are. Here&amp;rsquo;s a complete list of places security checks need to be done in a Meteor app:</source>
          <target state="translated">多くの場合、Meteorアプリはクライアントとサーバーのコードを組み合わせたスタイルで記述されているため、クライアントで実行されているもの、サーバーで実行されているもの、および境界が何であるかを認識することがさらに重要です。以下は、Meteorアプリでセキュリティチェックを行う必要がある場所の完全なリストです。</target>
        </trans-unit>
        <trans-unit id="8f539db13811192386c80432d7a15e0bd1abffdc" translate="yes" xml:space="preserve">
          <source>Since Meteor uses client-side rendering for your app&amp;rsquo;s UI, all of your HTML code, UI components, and templates need to be compiled to JavaScript. There are a few options at your disposal to write your UI code.</source>
          <target state="translated">MeteorはアプリのUIにクライアント側レンダリングを使用するため、すべてのHTMLコード、UIコンポーネント、およびテンプレートをJavaScriptにコンパイルする必要があります。UIコードを作成するためのオプションがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="e66afc4878e945e4c4e6fda186ef65128d9a743e" translate="yes" xml:space="preserve">
          <source>Since Methods can work as general purpose RPCs, they can also be used to fetch data instead of publications. There are some advantages and some disadvantages to this approach compared with loading data through publications, and at the end of the day we recommend always using publications to load data.</source>
          <target state="translated">メソッドは汎用RPCとして動作することができるので、パブリケーションの代わりにデータをフェッチするために使用することもできます。このアプローチには、パブリケーションを介してデータをロードする場合と比較して、いくつかの利点といくつかの欠点があり、最終的には常にパブリケーションを使用してデータをロードすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="f6baeb3784a3d4fed12ee64f5f10e864703c707c" translate="yes" xml:space="preserve">
          <source>Since Spacebars templates are always global, can&amp;rsquo;t be imported and exported as modules, and need to have names that are completely unique across the whole app, we recommend naming your Blaze templates with the full path to the namespace, separated by underscores. Underscores are a great choice in this case because then you can easily type the name of the template as one symbol in JavaScript.</source>
          <target state="translated">スペースバーテンプレートは常にグローバルであり、モジュールとしてインポートおよびエクスポートできず、アプリ全体で完全に一意の名前を付ける必要があるため、Blazeテンプレートには、アンダースコアで区切られた名前空間へのフルパスで名前を付けることをお勧めします。この場合、JavaScriptでテンプレートの名前を1つの記号として簡単に入力できるため、アンダースコアはこの場合に最適です。</target>
        </trans-unit>
        <trans-unit id="bfe3aa227f534fa3a585127756ec38d283cd1583" translate="yes" xml:space="preserve">
          <source>Since bundle analysis is only truly accurate on a minified bundle and minification does not take place during development (as it is a complex and CPU-intensive process which would substantially slow down normal development) this package must be used in conjunction with the &lt;code&gt;--production&lt;/code&gt; flag to the &lt;code&gt;meteor&lt;/code&gt; tool to simulate production bundling and enable minification.</source>
          <target state="translated">バンドル分析は縮小バンドルで本当に正確であり、開発中に縮小は行われないため（通常の開発を大幅に遅くする複雑でCPU集中型のプロセスであるため）、このパッケージは &lt;code&gt;--production&lt;/code&gt; と組み合わせて使用​​する必要があります &lt;code&gt;meteor&lt;/code&gt; ツールにフラグを立てて、本番バンドルをシミュレートし、縮小を有効にします。</target>
        </trans-unit>
        <trans-unit id="8a6d6cf77b1b1598e37271bd0e760bb53273f4c3" translate="yes" xml:space="preserve">
          <source>Since the API allows build plugins to process multiple files at once, we encourage package authors to implement at least some in-memory caching for their plugins. Using the &lt;code&gt;getSourceHash&lt;/code&gt; function for linters and compilers will allow quick incremental recompilations if the file is not reprocessed even when the contents didn&amp;rsquo;t change.</source>
          <target state="translated">APIを使用すると、ビルドプラグインで複数のファイルを一度に処理できるため、パッケージ作成者はプラグイン用に少なくともいくつかのメモリ内キャッシュを実装することをお勧めします。リンターとコンパイラーに &lt;code&gt;getSourceHash&lt;/code&gt; 関数を使用すると、内容が変更されていなくてもファイルが再処理されない場合、迅速な増分再コンパイルが可能になります。</target>
        </trans-unit>
        <trans-unit id="f7b527a0552c1cb5ce2704935c37a29309653c8c" translate="yes" xml:space="preserve">
          <source>Since the build plugins run as part of the Meteor tool, they follow the same file-system access convention - all file system paths always look like a Unix path: using forward slashes and having a root at &amp;lsquo;/&amp;lsquo;, even on Windows. For example: paths &lt;code&gt;/usr/bin/program&lt;/code&gt; and &lt;code&gt;/C/Program Files/Program/program.exe&lt;/code&gt; are valid paths, and &lt;code&gt;C:\Program Files\Program\program.exe&lt;/code&gt; is not.</source>
          <target state="translated">ビルドプラグインはMeteorツールの一部として実行されるため、同じファイルシステムアクセス規則に従います。すべてのファイルシステムパスは常にUnixパスのように見えます。スラッシュを使用し、Windowsでもルートを '/'に持っています。たとえば、パス &lt;code&gt;/usr/bin/program&lt;/code&gt; および &lt;code&gt;/C/Program Files/Program/program.exe&lt;/code&gt; は有効なパスですが、 &lt;code&gt;C:\Program Files\Program\program.exe&lt;/code&gt; は無効です。</target>
        </trans-unit>
        <trans-unit id="a7092d3e5fdb4d89bd9a552d42476f77488b8063" translate="yes" xml:space="preserve">
          <source>Since this is a new feature introduced in Meteor 1.3, you will find a lot of code online that uses the older, more centralized conventions built around packages and apps declaring global symbols. This old system still works, so to opt-in to the new module system, code must be placed inside the &lt;code&gt;imports/&lt;/code&gt; directory in your application. We expect a future release of Meteor will turn on modules by default for all code, because this is more aligned with how developers in the wider JavaScript community write their code.</source>
          <target state="translated">これはMeteor 1.3で導入された新機能であるため、グローバルシンボルを宣言するパッケージとアプリを中心に構築された、より集中化された古い規則を使用する多くのコードがオンラインで見つかります。この古いシステムは引き続き機能するため、新しいモジュールシステムにオプトインするには、アプリケーションの &lt;code&gt;imports/&lt;/code&gt; ディレクトリ内にコードを配置する必要があります。 Meteorの今後のリリースでは、すべてのコードでデフォルトでモジュールが有効になると予想されます。これは、より広いJavaScriptコミュニティの開発者がコードを記述する方法とより一致するためです。</target>
        </trans-unit>
        <trans-unit id="dbb4f7251d1ad0c7469904a610a47e90fb808811" translate="yes" xml:space="preserve">
          <source>Smart components</source>
          <target state="translated">スマートコンポーネント</target>
        </trans-unit>
        <trans-unit id="39c9dbb5b98a8e8fd343b869bae6f0ed09e4ad60" translate="yes" xml:space="preserve">
          <source>So a subscription can be thought of as a set of data that changes over time. Typically, the result of this is that a subscription &amp;ldquo;bridges&amp;rdquo; a &lt;a href=&quot;collections#server-collections&quot;&gt;server-side MongoDB collection&lt;/a&gt;, and the &lt;a href=&quot;collections#client-collections&quot;&gt;client side Minimongo cache&lt;/a&gt; of that collection. You can think of a subscription as a pipe that connects a subset of the &amp;ldquo;real&amp;rdquo; collection with the client&amp;rsquo;s version, and constantly keeps it up to date with the latest information on the server.</source>
          <target state="translated">したがって、サブスクリプションは、時間とともに変化するデータのセットと考えることができます。通常、この結果、サブスクリプションは&lt;a href=&quot;collections#server-collections&quot;&gt;サーバー側のMongoDBコレクション&lt;/a&gt;と、そのコレクションの&lt;a href=&quot;collections#client-collections&quot;&gt;クライアント側のMinimongoキャッシュ&lt;/a&gt;を「ブリッジ」します。サブスクリプションは、「実際の」コレクションのサブセットをクライアントのバージョンに接続し、サーバー上の最新情報で常に最新の状態に保つパイプと考えることができます。</target>
        </trans-unit>
        <trans-unit id="478f1f92ef92b6d2c9b1cd21b4fd6204094c90a7" translate="yes" xml:space="preserve">
          <source>So if we wanted to reverse our migration above, we&amp;rsquo;d run</source>
          <target state="translated">したがって、上記の移行を元に戻したい場合は、</target>
        </trans-unit>
        <trans-unit id="98aa39ecd1b7e86893f4675d679ab3aef45170f3" translate="yes" xml:space="preserve">
          <source>So in the case above, if a user subscribes to a list that is later made private by another user, although the &lt;code&gt;list.userId&lt;/code&gt; will change to a value that no longer passes the condition, the body of the publication will not re-run, and so the query to the &lt;code&gt;Todos&lt;/code&gt; collection (&lt;code&gt;{listId}&lt;/code&gt;) will not change. So the first user will continue to see items they shouldn&amp;rsquo;t.</source>
          <target state="translated">したがって、上記のケースで、ユーザーが後で別のユーザーによって非公開にされたリストにサブスクライブした場合、 &lt;code&gt;list.userId&lt;/code&gt; は条件を満たさなくなった値に変更されますが、パブリケーションの本文は再実行されません。したがって、 &lt;code&gt;Todos&lt;/code&gt; コレクション（ &lt;code&gt;{listId}&lt;/code&gt; ）へのクエリは変更されません。そのため、最初のユーザーは引き続き表示してはならないアイテムを表示します。</target>
        </trans-unit>
        <trans-unit id="9c62a259503606443fa8426b9c59cd0a4e4c47ca" translate="yes" xml:space="preserve">
          <source>So when should you wait for the server and when not? It basically comes down to how optimistic you are; how likely it is that something will go wrong. In the case of a password, you really can&amp;rsquo;t tell on the client, so you need to be conservative. In other cases, you can be pretty confident that the Method call will succeed, and so you can move on.</source>
          <target state="translated">それでは、いつサーバーを待つ必要がありますか？それは基本的にあなたがどれほど楽観的であるかにかかっています。何かがうまくいかない可能性はどのくらいありますか。パスワードの場合、クライアントで実際に言うことはできないので、慎重にする必要があります。他の場合では、メソッドの呼び出しが成功することを確信して、次に進むことができます。</target>
        </trans-unit>
        <trans-unit id="e187e39e8a003f11f5518446bd48cc4885f8af1e" translate="yes" xml:space="preserve">
          <source>So whenever you get a path in your build plugin implementation, via &lt;code&gt;getPathInPackage&lt;/code&gt; or in an argument of the &lt;code&gt;setDiskCacheDirectory&lt;/code&gt; method, the path will be a Unix path.</source>
          <target state="translated">したがって、 &lt;code&gt;getPathInPackage&lt;/code&gt; または &lt;code&gt;setDiskCacheDirectory&lt;/code&gt; メソッドの引数を介して、ビルドプラグイン実装でパスを取得するときは常に、パスはUnixパスになります。</target>
        </trans-unit>
        <trans-unit id="95c804dda762ed369a9896eefc2804517d971bd9" translate="yes" xml:space="preserve">
          <source>So which are the global data stores that you should be avoiding in reusable components? There are a few. Meteor is built to optimize speed of development, which means you can access a lot of things globally. Although this is convenient when building &amp;ldquo;smart&amp;rdquo; components (see below), you&amp;rsquo;ll need to avoid these data sources in reusable components:</source>
          <target state="translated">では、再利用可能なコンポーネントで避けるべきグローバルデータストアはどれですか。いくつかあります。Meteorは、開発の速度を最適化するように構築されています。つまり、世界中の多くのものにアクセスできます。これは「スマート」コンポーネント（下記参照）を構築する場合に便利ですが、再利用可能なコンポーネントではこれらのデータソースを回避する必要があります。</target>
        </trans-unit>
        <trans-unit id="9627182a4fe072bfbec05f6a749d3b6a0cdcb29e" translate="yes" xml:space="preserve">
          <source>Some Cordova plugins require certain parameters to be set as part of the build process. For example, &lt;code&gt;com-phonegap-plugins-facebookconnect&lt;/code&gt; requires you to specify an &lt;code&gt;APP_ID&lt;/code&gt; and &lt;code&gt;APP_NAME&lt;/code&gt;. You can set these using &lt;code&gt;App.configurePlugin&lt;/code&gt; in your &lt;a href=&quot;http://docs.meteor.com/api/mobile-config.html&quot;&gt;mobile-config.js&lt;/a&gt;.</source>
          <target state="translated">一部のCordovaプラグインでは、ビルドプロセスの一部として特定のパラメーターを設定する必要があります。たとえば、 &lt;code&gt;com-phonegap-plugins-facebookconnect&lt;/code&gt; では、 &lt;code&gt;APP_ID&lt;/code&gt; と &lt;code&gt;APP_NAME&lt;/code&gt; を指定する必要があります。これらは、&lt;a href=&quot;http://docs.meteor.com/api/mobile-config.html&quot;&gt;mobile-config.jsの&lt;/a&gt; &lt;code&gt;App.configurePlugin&lt;/code&gt; を使用して設定できます。</target>
        </trans-unit>
        <trans-unit id="288805ed360b5c9b94ce45ecff66330cd5e15bc4" translate="yes" xml:space="preserve">
          <source>Some Meteor apps contain local Meteor packages (packages defined in the &lt;code&gt;packages/&lt;/code&gt; directory of your app tree); this was an older recommendation from before Meteor had full ECMAScript support. If your app is laid out this way, you can also &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt; npm packages installed in your app from within your local Meteor packages.</source>
          <target state="translated">一部のMeteorアプリには、ローカルMeteorパッケージ（アプリツリーの &lt;code&gt;packages/&lt;/code&gt; ディレクトリで定義されたパッケージ）が含まれています。これは、MeteorがECMAScriptを完全にサポートする前の古い推奨事項でした。アプリがこのようにレイアウトされている場合は、ローカルのMeteorパッケージ内からアプリにインストールされているnpmパッケージを &lt;code&gt;require&lt;/code&gt; または &lt;code&gt;import&lt;/code&gt; することもできます。</target>
        </trans-unit>
        <trans-unit id="5583d20bd00ddad1e3ebd55dd768207a1576d120" translate="yes" xml:space="preserve">
          <source>Some aspects of the migration strategy outlined above are possibly not the most ideal way to do things (although perhaps appropriate in many situations). Here are some other things to be aware of:</source>
          <target state="translated">上記で説明した移行戦略のいくつかの側面は、おそらく最も理想的な方法ではないでしょう(多くの状況では適切なのかもしれませんが)。ここでは、他にもいくつか注意すべき点があります。</target>
        </trans-unit>
        <trans-unit id="072e10b4145d1db5429e8b26ba3ce40d482fe400" translate="yes" xml:space="preserve">
          <source>Some example uses of &lt;code&gt;meteor admin&lt;/code&gt; include adding and removing package maintainers and setting a homepage for a package. It also includes various helpful functions for managing a Meteor release. Run &lt;code&gt;meteor help admin&lt;/code&gt; for more information.</source>
          <target state="translated">&lt;code&gt;meteor admin&lt;/code&gt; の使用例には、パッケージのメンテナの追加と削除、およびパッケージのホームページの設定が含まれます。また、Meteorリリースの管理に役立つさまざまな機能も含まれています。詳細については、 &lt;code&gt;meteor help admin&lt;/code&gt; を実行してください。</target>
        </trans-unit>
        <trans-unit id="fd89b46d604ef486a28a5ca580a3855bb5c0ce96" translate="yes" xml:space="preserve">
          <source>Some of your code isn&amp;rsquo;t going to be a unit of business logic or UI, it&amp;rsquo;s just some setup or configuration code that needs to run in the context of the app when it starts up. In the Todos example app, the &lt;code&gt;imports/startup/client/useraccounts-configuration.js&lt;/code&gt; file configures the &lt;code&gt;useraccounts&lt;/code&gt; login templates (see the &lt;a href=&quot;accounts&quot;&gt;Accounts&lt;/a&gt; article for more information about &lt;code&gt;useraccounts&lt;/code&gt;). The &lt;code&gt;imports/startup/client/routes.js&lt;/code&gt; configures all of the routes and then imports &lt;em&gt;all&lt;/em&gt; other code that is required on the client:</source>
          <target state="translated">一部のコードは、ビジネスロジックやUIの単位にはなりません。起動時にアプリのコンテキストで実行する必要があるのは、いくつかのセットアップコードまたは構成コードです。トドス例のアプリでは、 &lt;code&gt;imports/startup/client/useraccounts-configuration.js&lt;/code&gt; ファイルが設定し &lt;code&gt;useraccounts&lt;/code&gt; （参照テンプレートにログインし&lt;a href=&quot;accounts&quot;&gt;アカウント&lt;/a&gt;の詳細については、記事 &lt;code&gt;useraccounts&lt;/code&gt; を）。 &lt;code&gt;imports/startup/client/routes.js&lt;/code&gt; すべてのルートを設定してからインポートし&lt;em&gt;、すべての&lt;/em&gt;クライアント上で必要とされる他のコードを：</target>
        </trans-unit>
        <trans-unit id="cfcfd4524c6a19a0376d9dec412accbb0994f32b" translate="yes" xml:space="preserve">
          <source>Some of your components will need to access state outside of their data context&amp;mdash;for instance, data from the server via subscriptions or the contents of client-side store. As discussed in the &lt;a href=&quot;https://guide.meteor.com/data-loading.html#patterns&quot;&gt;data loading&lt;/a&gt; and &lt;a href=&quot;https://guide.meteor.com/ui-ux.html#smart-components&quot;&gt;UI&lt;/a&gt; articles, you should be careful and considered in how you use such smart components.</source>
          <target state="translated">一部のコンポーネントは、データコンテキスト外の状態にアクセスする必要があります。たとえば、サブスクリプションを介したサーバーからのデータやクライアント側ストアのコンテンツなどです。&lt;a href=&quot;https://guide.meteor.com/data-loading.html#patterns&quot;&gt;データの読み込み&lt;/a&gt;と&lt;a href=&quot;https://guide.meteor.com/ui-ux.html#smart-components&quot;&gt;UIの&lt;/a&gt;記事で説明したように、このようなスマートコンポーネントの使用方法については注意深く検討する必要があります。</target>
        </trans-unit>
        <trans-unit id="a2bafd3349aa60e6d14644ba436b4cff4cb20b9b" translate="yes" xml:space="preserve">
          <source>Some packages contain code specific to an architecture. Running &lt;code&gt;publish&lt;/code&gt; by itself, will upload the build to the architecture that you were using to publish. You need to run &lt;code&gt;publish-for-arch&lt;/code&gt; from a different architecture to upload a different build.</source>
          <target state="translated">一部のパッケージには、アーキテクチャ固有のコードが含まれています。 &lt;code&gt;publish&lt;/code&gt; を単独で実行すると、公開に使用していたアーキテクチャにビルドがアップロードされます。別のビルドをアップロードするには、別のアーキテクチャから &lt;code&gt;publish-for-arch&lt;/code&gt; を実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="e128406895c90cb74e42012b3024d0405c7c877b" translate="yes" xml:space="preserve">
          <source>Something else to keep in mind is that your server-side code should be prepared to handle requests from older client versions, which may not yet have been updated. As you make changes to your data schema or publication functions for example, you may want to reflect on how this will impact backwards compatibility.</source>
          <target state="translated">他にも覚えておくべきことは、サーバサイドのコードは、まだ更新されていないかもしれない古いバージョンのクライアントからのリクエストを処理できるように準備しておく必要があるということです。例えば、データスキーマや公開関数を変更する際には、それが下位互換性にどのような影響を与えるかを考えておくとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="b7e30b57358aece3044dff3a76d13060e868ae4d" translate="yes" xml:space="preserve">
          <source>Sometimes a module doesn&amp;rsquo;t actually need to import anything from another module, but you still want to be sure the other module gets evaluated first. In such situations, you can use an even simpler &lt;code&gt;import&lt;/code&gt; syntax:</source>
          <target state="translated">モジュールが実際に別のモジュールから何かをインポートする必要がない場合でも、他のモジュールが最初に評価されることを確認したい場合があります。このような状況では、さらに単純な &lt;code&gt;import&lt;/code&gt; 構文を使用できます。</target>
        </trans-unit>
        <trans-unit id="2775ccc0da8ca41da6274f811302c8fd1fecccdc" translate="yes" xml:space="preserve">
          <source>Sometimes a package will have no exports and simply have side effects when included in your app. In such cases you don&amp;rsquo;t need to import the package at all after installing.</source>
          <target state="translated">アプリに含まれている場合、パッケージにエクスポートがなく、単に副作用がある場合があります。そのような場合、インストール後にパッケージをインポートする必要はありません。</target>
        </trans-unit>
        <trans-unit id="b7fb941f27793448af5e3a89674fc1adfce343aa" translate="yes" xml:space="preserve">
          <source>Sometimes a single piece of functionality can be spread over multiple mutators.</source>
          <target state="translated">1つの機能が複数の変異体に分散することもあります。</target>
        </trans-unit>
        <trans-unit id="37177908e7d657fd13b1bf5bc5412ed34a490301" translate="yes" xml:space="preserve">
          <source>Sometimes an argument to a helper call is best expressed as a return value of some other expression. For this and other cases, one can use parentheses to express the evaluation order of nested expressions.</source>
          <target state="translated">ヘルパーコールの引数は、他の式の戻り値として表現するのが最適な場合があります。このような場合やその他のケースでは、入れ子になった式の評価順序を表現するために括弧を使用することができます。</target>
        </trans-unit>
        <trans-unit id="967fcd8347c649fe963cca11b07dfe2fa067d406" translate="yes" xml:space="preserve">
          <source>Sometimes changes in your data can trigger re-computations which you know won&amp;rsquo;t affect your UI. Although React is in general quite efficient in the face of unnecessary re-renders, if you need to control re-rendering, the above pattern allows you to easily use React&amp;rsquo;s &lt;a href=&quot;https://facebook.github.io/react/docs/component-specs.html#updating-shouldcomponentupdate&quot;&gt;&lt;code&gt;shouldComponentUpdate&lt;/code&gt;&lt;/a&gt; on the presentational component to avoid re-renders.</source>
          <target state="translated">データの変更により、UIに影響しないことがわかっている再計算がトリガーされることがあります。一般に、Reactは不要な再レンダリングに直面しても非常に効率的ですが、再レンダリングを制御する必要がある場合、上記のパターンを使用すると、プレゼンテーションコンポーネントでReactの&lt;a href=&quot;https://facebook.github.io/react/docs/component-specs.html#updating-shouldcomponentupdate&quot;&gt; &lt;code&gt;shouldComponentUpdate&lt;/code&gt; &lt;/a&gt;を簡単に使用して、再レンダリングを回避できます。</target>
        </trans-unit>
        <trans-unit id="30eed3363beda5dc6cb6645d4304aa8921b0f07a" translate="yes" xml:space="preserve">
          <source>Sometimes packages may contain binary code specific to an architecture (for example, they may use an npm package). In that case, running publish will only upload the build to the architecture that you were using to publish it. You can use &lt;code&gt;publish-for-arch&lt;/code&gt; to upload a build to a different architecture from a different machine.</source>
          <target state="translated">パッケージには、アーキテクチャに固有のバイナリコードが含まれている場合があります（たとえば、npmパッケージを使用している場合があります）。その場合、公開を実行すると、公開に使用していたアーキテクチャにのみビルドがアップロードされます。あなたは使用することができ &lt;code&gt;publish-for-arch&lt;/code&gt; 別のマシンから別のアーキテクチャにビルドをアップロードします。</target>
        </trans-unit>
        <trans-unit id="e2b83c8b42b23568b24e56afda2dd3f27e1497e1" translate="yes" xml:space="preserve">
          <source>Sometimes the user may be interested in knowing when the update has hit the server. For instance, in a chat application, it&amp;rsquo;s a typical pattern to optimistically display the message in the chat log, but indicate that it is &amp;ldquo;pending&amp;rdquo; until the server has acknowledged the write. We can do this easily in Meteor by simply modifying the Method to act differently on the client:</source>
          <target state="translated">ときどきユーザーは、更新がサーバーに到達したことを知りたいと思うかもしれません。たとえば、チャットアプリケーションでは、メッセージをチャットログに楽観的に表示するのが一般的なパターンですが、サーバーが書き込みを確認するまで「保留中」であることを示します。これをMeteorで簡単に行うには、メソッドをクライアントに異なるように変更するだけです。</target>
        </trans-unit>
        <trans-unit id="8e78f363b35581ec725cb46401ef8bbcf2b9978b" translate="yes" xml:space="preserve">
          <source>Sometimes when we change the schema of an application, we do so in a breaking way &amp;ndash; so that the old schema doesn&amp;rsquo;t work properly with the new code base. For instance, if we had some UI code that heavily relied on all lists having a &lt;code&gt;todoCount&lt;/code&gt; set, there would be a period, before the migration runs, in which the UI of our app would be broken after we deployed.</source>
          <target state="translated">時々、アプリケーションのスキーマを変更すると、破壊的な方法で変更されます。古いスキーマが新しいコードベースで正しく機能しないようにするためです。たとえば、 &lt;code&gt;todoCount&lt;/code&gt; が設定されたすべてのリストに大きく依存するUIコードがある場合、移行の実行前に、デプロイ後にアプリのUIが壊れる期間が発生します。</target>
        </trans-unit>
        <trans-unit id="c9541b8d1475268ea7ff1a13eaa81f4a1fc3d282" translate="yes" xml:space="preserve">
          <source>Sometimes, Meteor will ask you to run &lt;code&gt;meteor update --patch&lt;/code&gt;. Patch releases are special releases that contain only very minor changes (usually crucial bug fixes) from previous releases. We highly recommend that you always run &lt;code&gt;update
--patch&lt;/code&gt; when prompted.</source>
          <target state="translated">Meteorが &lt;code&gt;meteor update --patch&lt;/code&gt; を実行するように要求する場合があります。パッチリリースは、以前のリリースからの非常に小さな変更（通常は重大なバグ修正）のみを含む特別なリリースです。プロンプトが表示されたら、常に &lt;code&gt;update --patch&lt;/code&gt; 実行することを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="5f9b65b97d3759923631106558124cc0679d385d" translate="yes" xml:space="preserve">
          <source>Sometimes, it doesn&amp;rsquo;t make sense to abstract permissions into &amp;ldquo;groups&amp;rdquo; - you just want documents to have owners and that&amp;rsquo;s it. In this case, you can use a simpler strategy using collection helpers.</source>
          <target state="translated">場合によっては、アクセス許可を「グループ」に抽象化しても意味がありません。ドキュメントに所有者を持たせたいだけなのです。この場合、コレクションヘルパーを使用してより簡単な方法を使用できます。</target>
        </trans-unit>
        <trans-unit id="587ed289fb5162efc495a4470606aae244c5a266" translate="yes" xml:space="preserve">
          <source>Sometimes, the simple mechanism of returning a query from a publication function won&amp;rsquo;t cover your needs. In those situations, there are some more powerful publication patterns that you can use.</source>
          <target state="translated">場合によっては、パブリケーション関数からクエリを返す単純なメカニズムではニーズをカバーできないことがあります。これらの状況では、使用できるより強力なパブリケーションパターンがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="8ea56ed3ad462396bdd97fc31754c69092c333ef" translate="yes" xml:space="preserve">
          <source>Sometimes, you&amp;rsquo;ll want to call a Method from another Method. Perhaps you already have some functionality implemented and you want to add a wrapper that fills in some of the arguments automatically. This is a totally fine pattern, and Meteor does some nice things for you:</source>
          <target state="translated">場合によっては、別のメソッドからメソッドを呼び出す必要があります。おそらく、すでにいくつかの機能が実装されており、いくつかの引数を自動的に埋めるラッパーを追加したいでしょう。これは完全に微細なパターンであり、Meteorはあなたのためにいくつかの素晴らしいことをします：</target>
        </trans-unit>
        <trans-unit id="42494b26bf1ad21b3ef7f5e960a7620440551809" translate="yes" xml:space="preserve">
          <source>Sometimes, your users will end up on a page that isn&amp;rsquo;t a good place for them to be. Maybe the data they were looking for has moved, maybe they were on an admin panel page and logged out, or maybe they just created a new object and you want them to end up on the page for the thing they just created.</source>
          <target state="translated">場合によっては、ユーザーは、自分がいるのに適さないページを表示することがあります。探していたデータが移動したか、管理パネルのページにいてログアウトしたか、新しいオブジェクトを作成したばかりで、作成したオブジェクトのページに移動したい場合があります。</target>
        </trans-unit>
        <trans-unit id="1770eb1256a559743e31eac20e1799f90efee3ab" translate="yes" xml:space="preserve">
          <source>Sort Specifiers</source>
          <target state="translated">ソート指定子</target>
        </trans-unit>
        <trans-unit id="bc64afe5eb57c9154a448e2c6f8cd508b88f154e" translate="yes" xml:space="preserve">
          <source>Sort order (default: natural order)</source>
          <target state="translated">ソート順(デフォルト:自然順</target>
        </trans-unit>
        <trans-unit id="afa7db30001b249bae428d0da7857c46b13ab1e8" translate="yes" xml:space="preserve">
          <source>Sorts may be specified using your choice of several syntaxes:</source>
          <target state="translated">ソートは、いくつかの構文から選択して指定することができます。</target>
        </trans-unit>
        <trans-unit id="843558854e90b07b4e553cf25b2db7e4fbf89149" translate="yes" xml:space="preserve">
          <source>Source vs. import files</source>
          <target state="translated">ソースとインポートファイル</target>
        </trans-unit>
        <trans-unit id="ecc504d5bcdaffc6ef5d66689b319535cea8c706" translate="yes" xml:space="preserve">
          <source>Spacebars</source>
          <target state="translated">Spacebars</target>
        </trans-unit>
        <trans-unit id="ac129336f9c18f31db88e4217a928ed28f2cf3f0" translate="yes" xml:space="preserve">
          <source>Spacebars has a very strict HTML parser. For instance, you can&amp;rsquo;t self-close a &lt;code&gt;div&lt;/code&gt; (&lt;code&gt;&amp;lt;div/&amp;gt;&lt;/code&gt;) in Spacebars, and you need to close some tags that a browser might not require you to (such as a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag). Thankfully, the parser will warn you when it can&amp;rsquo;t understand your code with an exact line number for the error.</source>
          <target state="translated">スペースバーには非常に厳密なHTMLパーサーがあります。たとえば、スペースバーで &lt;code&gt;div&lt;/code&gt; （ &lt;code&gt;&amp;lt;div/&amp;gt;&lt;/code&gt; ）を自動的に閉じることはできません。また、ブラウザが必要としないいくつかのタグ（ &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; タグなど）を閉じる必要があります。ありがたいことに、パーサーは、エラーの正確な行番号でコードを理解できない場合に警告を表示します。</target>
        </trans-unit>
        <trans-unit id="dd5c7cca91ad8702873343ecf92904d4da9e6381" translate="yes" xml:space="preserve">
          <source>Spacebars is a Meteor template language inspired by &lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;Handlebars&lt;/a&gt;. It shares some of the spirit and syntax of Handlebars, but it has been tailored to produce reactive Meteor templates when compiled.</source>
          <target state="translated">Spacebarsは、&lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;ハンドルバーに&lt;/a&gt;触発されたMeteorテンプレート言語です。ハンドルバーの精神と構文の一部を共有していますが、コンパイル時に反応するMeteorテンプレートを生成するように調整されています。</target>
        </trans-unit>
        <trans-unit id="db589873b07c45de7de4a5f6847d245903bd7460" translate="yes" xml:space="preserve">
          <source>Spacebars is a handlebars-like templating language, built on the concept of rendering a reactively changing &lt;em&gt;data context&lt;/em&gt;. Spacebars templates look like simple HTML with special &amp;ldquo;mustache&amp;rdquo; tags delimited by curly braces: &lt;code&gt;{{ }}&lt;/code&gt;.</source>
          <target state="translated">スペースバーは、ハンドルバーのようなテンプレート言語であり、反応的に変化する&lt;em&gt;データコンテキスト&lt;/em&gt;をレンダリングするという概念に基づいて構築されてい&lt;em&gt;ます&lt;/em&gt;。スペースバーテンプレートは、中かっこ（ &lt;code&gt;{{ }}&lt;/code&gt; 区切られた特別な「口ひげ」タグを持つ単純なHTMLのように見えます。</target>
        </trans-unit>
        <trans-unit id="186a93d0f0a006ebfdb539f8e5276f79d80c2a44" translate="yes" xml:space="preserve">
          <source>Spacebars is not lenient about malformed markup the way a web browser is. While the latest HTML spec standardizes how browsers should recover from parse errors, these cases are still not valid HTML. For example, a browser may recover from a bare &lt;code&gt;&amp;lt;&lt;/code&gt; that does not begin a well-formed HTML tag, while Spacebars will not. However, gone are the restrictions of the XHTML days; attribute values do not have to quoted, and tags are not case-sensitive, for example.</source>
          <target state="translated">スペースバーは、ウェブブラウザのように不正なマークアップについて寛大ではありません。最新のHTML仕様は、ブラウザが解析エラーから回復する方法を標準化していますが、これらのケースはまだ有効なHTMLではありません。たとえば、ブラウザは整形式のHTMLタグを開始しない裸の &lt;code&gt;&amp;lt;&lt;/code&gt; から回復する可能性がありますが、スペースバーは回復しません。ただし、XHTML時代の制限はなくなりました。属性値は引用符で囲む必要はありません。たとえば、タグでは大文字と小文字が区別されません。</target>
        </trans-unit>
        <trans-unit id="659d70786d24c24a73453589dbc84ee62f997914" translate="yes" xml:space="preserve">
          <source>Spacebars templates</source>
          <target state="translated">スペースバーのテンプレート</target>
        </trans-unit>
        <trans-unit id="6ebb68ffd6433e4817d1350a43c68460aa95a9fc" translate="yes" xml:space="preserve">
          <source>Spacebars templates are written in &lt;a href=&quot;http://developers.whatwg.org/syntax.html&quot;&gt;standard HTML&lt;/a&gt; extended with additional syntax (i.e. template tags).</source>
          <target state="translated">スペースバーテンプレートは、追加の構文（テンプレートタグ）で拡張された&lt;a href=&quot;http://developers.whatwg.org/syntax.html&quot;&gt;標準HTMLで&lt;/a&gt;記述されています。</target>
        </trans-unit>
        <trans-unit id="51c87867f5dccf179d8c4ef9d9cbdc625c600629" translate="yes" xml:space="preserve">
          <source>Spacebars templates update reactively at a fine-grained level in response to changing data.</source>
          <target state="translated">スペースバーのテンプレートは、データの変化に応じてきめ細かいレベルで反応的に更新されます。</target>
        </trans-unit>
        <trans-unit id="7f2cbe4d1a91009df73ec6f7396b39440b15a070" translate="yes" xml:space="preserve">
          <source>Spacebars validates your HTML as it goes and will throw a compile-time error if you violate basic HTML syntax in a way that prevents it from determining the structure of your code.</source>
          <target state="translated">Spacebars は、HTML をそのまま検証し、基本的な HTML 構文に違反してコードの構造を決定できないようにした場合にコンパイル時のエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="f7218259ff5cece22f9f49760d5ec4b6c7ba7b3a" translate="yes" xml:space="preserve">
          <source>Special directories</source>
          <target state="translated">特別なディレクトリ</target>
        </trans-unit>
        <trans-unit id="1e908a5ad4bfd8c4d66dcf036244665b5746aa4c" translate="yes" xml:space="preserve">
          <source>Specifically, when you pass a &lt;code&gt;name&lt;/code&gt;, here&amp;rsquo;s what happens:</source>
          <target state="translated">具体的には、 &lt;code&gt;name&lt;/code&gt; を渡すと、次のようになります。</target>
        </trans-unit>
        <trans-unit id="92a47ebb69242937b16a0aad20f259c584179d12" translate="yes" xml:space="preserve">
          <source>Specification of a release: track@version. Just 'version' (e.g. &lt;code&gt;&quot;0.9.0&quot;&lt;/code&gt;) is sufficient if using the default release track &lt;code&gt;METEOR&lt;/code&gt;. Can be an array of specifications.</source>
          <target state="translated">リリースの仕様：track @ version。デフォルトのリリーストラック &lt;code&gt;METEOR&lt;/code&gt; を使用している場合は、 &lt;code&gt;&quot;0.9.0&quot;&lt;/code&gt; バージョン」（たとえば、「0.9.0」）で十分です。仕様の配列にすることができます。</target>
        </trans-unit>
        <trans-unit id="6eacbeb05feca92e3ce66260defc9b4f765e6dab" translate="yes" xml:space="preserve">
          <source>Specifies how to modify the documents</source>
          <target state="translated">ドキュメントの修正方法を指定します。</target>
        </trans-unit>
        <trans-unit id="d6e01d68e936bf6f610d7cd227db050e0ddef24b" translate="yes" xml:space="preserve">
          <source>Specifies which documents to modify</source>
          <target state="translated">どのドキュメントを修正するかを指定します。</target>
        </trans-unit>
        <trans-unit id="9d0b7c3c37091ca0a32493119a8818e748a0cff5" translate="yes" xml:space="preserve">
          <source>Specifies which documents to remove</source>
          <target state="translated">削除するドキュメントを指定します。</target>
        </trans-unit>
        <trans-unit id="e6f7a19aa0bff6b0065b239546903ba4890712b6" translate="yes" xml:space="preserve">
          <source>Specify asset files for your package. They can be accessed via the &lt;a href=&quot;#assets&quot;&gt;Assets API&lt;/a&gt; from the server, or at the URL &lt;code&gt;/packages/username_package-name/file-name&lt;/code&gt; from the client, depending on the architecture passed.</source>
          <target state="translated">パッケージのアセットファイルを指定します。渡されたアーキテクチャに応じて、サーバーから&lt;a href=&quot;#assets&quot;&gt;Assets API&lt;/a&gt;を介して、またはクライアントからURL &lt;code&gt;/packages/username_package-name/file-name&lt;/code&gt; でアクセスできます。</target>
        </trans-unit>
        <trans-unit id="b5a2d0605b608d23cd66764f3cdf1e853afb9118" translate="yes" xml:space="preserve">
          <source>Specify event handlers for this template.</source>
          <target state="translated">このテンプレートのイベントハンドラを指定します。</target>
        </trans-unit>
        <trans-unit id="4c80894f7fe63793c42766af04601259f84c4102" translate="yes" xml:space="preserve">
          <source>Specify source code files for your package.</source>
          <target state="translated">パッケージのソースコードファイルを指定します。</target>
        </trans-unit>
        <trans-unit id="dcf0eb8c6102fc69f1c9fd19043bed6b784a902a" translate="yes" xml:space="preserve">
          <source>Specify template helpers available to this template.</source>
          <target state="translated">このテンプレートで利用できるテンプレートヘルパーを指定します。</target>
        </trans-unit>
        <trans-unit id="301f34b1d2335841250ebe63ac55db926657a828" translate="yes" xml:space="preserve">
          <source>Specify where this asset should be available (e.g., 'server', 'client', 'web.browser', 'web.cordova'). You can specify multiple architectures by passing in an array, for example &lt;code&gt;['web.cordova', 'os.linux']&lt;/code&gt;.</source>
          <target state="translated">このアセットを利用できる場所を指定します（例：「サーバー」、「クライアント」、「web.browser」、「web.cordova」）。 &lt;code&gt;['web.cordova', 'os.linux']&lt;/code&gt; ように、配列を渡すことで複数のアーキテクチャを指定できます。</target>
        </trans-unit>
        <trans-unit id="0979000f814be6a0b456fe96612343c6e571858a" translate="yes" xml:space="preserve">
          <source>Specify which &lt;a href=&quot;http://cordova.apache.org/&quot;&gt;Cordova / PhoneGap&lt;/a&gt; plugins your Meteor package depends on.</source>
          <target state="translated">Meteorパッケージが依存する&lt;a href=&quot;http://cordova.apache.org/&quot;&gt;Cordova / PhoneGap&lt;/a&gt;プラグインを指定します。</target>
        </trans-unit>
        <trans-unit id="396a0d4158b8d9f6c74552eaa6d645e6fe9a3875" translate="yes" xml:space="preserve">
          <source>Specify which &lt;a href=&quot;https://www.npmjs.org/&quot;&gt;NPM&lt;/a&gt; packages your Meteor package depends on.</source>
          <target state="translated">Meteorパッケージが依存する&lt;a href=&quot;https://www.npmjs.org/&quot;&gt;NPM&lt;/a&gt;パッケージを指定します。</target>
        </trans-unit>
        <trans-unit id="da21c85d61d2f38d5c1da617547cfc07e9ba39b5" translate="yes" xml:space="preserve">
          <source>Splitting into multiple apps</source>
          <target state="translated">複数のアプリに分割する</target>
        </trans-unit>
        <trans-unit id="baa01701f1fa1790c7ef5ce421dcd21608fe6fcf" translate="yes" xml:space="preserve">
          <source>Starting with Meteor 1.0.4 access rule for all domains and protocols (&lt;code&gt;&amp;lt;access origin=&quot;*&quot;/&amp;gt;&lt;/code&gt;) is no longer set by default due to &lt;a href=&quot;http://cordova.apache.org/announcements/2014/08/04/android-351.html&quot;&gt;certain kind of possible attacks&lt;/a&gt;.</source>
          <target state="translated">すべてのドメインおよびプロトコル（ &lt;code&gt;&amp;lt;access origin=&quot;*&quot;/&amp;gt;&lt;/code&gt; ）に対するMeteor 1.0.4以降のアクセスルールは、&lt;a href=&quot;http://cordova.apache.org/announcements/2014/08/04/android-351.html&quot;&gt;特定の種類の攻撃の可能性がある&lt;/a&gt;ため、デフォルトでは設定されなくなりました。</target>
        </trans-unit>
        <trans-unit id="cae08a2af0a6cfee2acf7b5acbd2499fe1841275" translate="yes" xml:space="preserve">
          <source>Starting with Meteor 1.2, packages can declare that they need a version of the Meteor tool whose Isobuild build system supports a certain feature. For example, packages must write &lt;code&gt;api.use('isobuild:compiler-plugin@1.0.0')&lt;/code&gt; in order to call &lt;code&gt;Plugin.registerCompiler&lt;/code&gt;. This means that a package can transition from the old &lt;code&gt;registerSourceHandler&lt;/code&gt; API to &lt;code&gt;registerCompiler&lt;/code&gt; and Version Solver will properly prevent the &lt;code&gt;registerCompiler&lt;/code&gt; version from being chosen by older tools that don&amp;rsquo;t know how to handle it.</source>
          <target state="translated">Meteor 1.2以降、パッケージは、Isobuildビルドシステムが特定の機能をサポートするMeteorツールのバージョンが必要であることを宣言できます。例えば、パッケージは書く必要があります &lt;code&gt;api.use('isobuild:compiler-plugin@1.0.0')&lt;/code&gt; 呼び出すために &lt;code&gt;Plugin.registerCompiler&lt;/code&gt; を。つまり、パッケージは古い &lt;code&gt;registerSourceHandler&lt;/code&gt; APIから &lt;code&gt;registerCompiler&lt;/code&gt; に移行でき、Version Solverは、それを処理する方法を知らない古いツールが &lt;code&gt;registerCompiler&lt;/code&gt; のバージョンを選択することを適切に防ぎます。</target>
        </trans-unit>
        <trans-unit id="ee8c8ebe2a3a93d4ad4b379dcedd3e3826bc907e" translate="yes" xml:space="preserve">
          <source>Starting with Meteor 1.2, the API used to plug into the build process is called &amp;ldquo;Build Plugins&amp;rdquo;. There are 3 phases when a package&amp;rsquo;s plugin can run: linting, compilation and minification. Here is an overview of operations Isobuild performs on the application and packages source:</source>
          <target state="translated">Meteor 1.2以降、ビルドプロセスにプラグインするために使用されるAPIは「ビルドプラグイン」と呼ばれます。パッケージのプラグインを実行できるフェーズには、リンティング、コンパイル、および縮小の3つがあります。以下は、Isobuildがアプリケーションとパッケージのソースに対して実行する操作の概要です。</target>
        </trans-unit>
        <trans-unit id="2c53b0cdb260d1d53a18026e667ce6fb85645c7f" translate="yes" xml:space="preserve">
          <source>Starts up the test driver package (&lt;a href=&quot;#driver-packages&quot;&gt;see below&lt;/a&gt;).</source>
          <target state="translated">テストドライバパッケージを起動します（&lt;a href=&quot;#driver-packages&quot;&gt;以下を参照&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="4dc274cbfb723d7fa7d47c8a8ebbb3affafbe000" translate="yes" xml:space="preserve">
          <source>Startup files</source>
          <target state="translated">起動ファイル</target>
        </trans-unit>
        <trans-unit id="488a095631c8c195522d289cd71abe333949c403" translate="yes" xml:space="preserve">
          <source>Static server assets are included by placing them in the application&amp;rsquo;s &lt;code&gt;private&lt;/code&gt; subdirectory. For example, if an application&amp;rsquo;s &lt;code&gt;private&lt;/code&gt; subdirectory includes a directory called &lt;code&gt;nested&lt;/code&gt; with a file called &lt;code&gt;data.txt&lt;/code&gt; inside it, then server code can read &lt;code&gt;data.txt&lt;/code&gt; by running:</source>
          <target state="translated">静的サーバーアセットは、アプリケーションの &lt;code&gt;private&lt;/code&gt; サブディレクトリに配置することで含まれます。たとえば、アプリケーションの &lt;code&gt;private&lt;/code&gt; サブディレクトリに &lt;code&gt;data.txt&lt;/code&gt; というファイルが &lt;code&gt;nested&lt;/code&gt; れたディレクトリが含まれている場合、サーバーコードは次の &lt;code&gt;data.txt&lt;/code&gt; を実行してdata.txtを読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="22ede57d426a7020d719e3e2e0dfd9587f9dbb1b" translate="yes" xml:space="preserve">
          <source>Step 4 above is an important detail&amp;mdash;that the system cleverly knows not to re-subscribe if the autorun re-runs and subscribes with the exact same arguments. This holds true even if the new subscription is set up somewhere else in the template hierarchy. For example, if a user navigates between two pages that both subscribe to the exact same subscription, the same mechanism will kick in and no unnecessary subscribing will happen.</source>
          <target state="translated">上記のステップ4は重要な詳細です。自動実行がまったく同じ引数で再実行およびサブスクライブした場合、システムは巧妙に再サブスクライブしないことを知っています。これは、新しいサブスクリプションがテンプレート階層の他の場所にセットアップされている場合でも当てはまります。たとえば、ユーザーが両方ともまったく同じサブスクリプションにサブスクライブしている2つのページ間を移動した場合、同じメカニズムが作動し、不要なサブスクライブは発生しません。</target>
        </trans-unit>
        <trans-unit id="c43b7a588c840bc119129d373529cd1eb91feb1f" translate="yes" xml:space="preserve">
          <source>Steps 2. and 5. can be quite time-consuming, especially if you are aiming to maintain a high level of quality in your application. That&amp;rsquo;s why it&amp;rsquo;s a great idea to develop a suite of acceptance tests (see our &lt;a href=&quot;testing&quot;&gt;Testing Article&lt;/a&gt; for more on this). To take things even further, you could run a load/stress test against your staging server on every release.</source>
          <target state="translated">手順2.と5.は、特にアプリケーションで高レベルの品質を維持することを目的としている場合は、かなり時間がかかる可能性があります。そのため、一連の受け入れテストを開発することをお勧めします（詳細については、&lt;a href=&quot;testing&quot;&gt;テストに関する記事&lt;/a&gt;を参照してください）。さらに進んで、リリースごとにステージングサーバーに対して負荷/ストレステストを実行できます。</target>
        </trans-unit>
        <trans-unit id="a86f651249f4e19c9cd5df8e90e6bd2420b53217" translate="yes" xml:space="preserve">
          <source>Stopping Subscriptions</source>
          <target state="translated">購読の停止</target>
        </trans-unit>
        <trans-unit id="7fd14e8fcb39146c3c2b3f490ed48f627d66e4f6" translate="yes" xml:space="preserve">
          <source>Stopping a computation causes its &lt;code&gt;onInvalidate&lt;/code&gt; callbacks to run immediately if it is not currently invalidated, as well as its &lt;code&gt;stop&lt;/code&gt; callbacks.</source>
          <target state="translated">計算を停止すると、その原因 &lt;code&gt;onInvalidate&lt;/code&gt; それが現在無効化されていない場合、コールバックはすぐに実行するだけでなく、その &lt;code&gt;stop&lt;/code&gt; のコールバック。</target>
        </trans-unit>
        <trans-unit id="38238c8459154491b33e937ae104aad658d3268d" translate="yes" xml:space="preserve">
          <source>Stopping a computation invalidates it (if it is valid) for the purpose of calling callbacks, but ensures that it will never be rerun.</source>
          <target state="translated">計算を停止すると、コールバックを呼び出す目的で計算を無効にします(有効であれば)が、再実行されることはありません。</target>
        </trans-unit>
        <trans-unit id="0d0f00fed7f257417a56fde30da357fb9e97cce9" translate="yes" xml:space="preserve">
          <source>Stopping a computation is irreversible and guarantees that it will never be rerun. You can stop a computation at any time, including from the computation&amp;rsquo;s own run function. Stopping a computation that is already stopped has no effect.</source>
          <target state="translated">計算を停止すると元に戻すことはできず、計算が再実行されることはありません。計算自体の実行関数を含め、いつでも計算を停止できます。すでに停止している計算を停止しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="84cd0876723c908e36df076d6b7be48a4fdbf71d" translate="yes" xml:space="preserve">
          <source>Storage Engine Support (MMAPv1 or WiredTiger) &amp;ndash; Since Meteor 1.4 WiredTiger is the default storage engine</source>
          <target state="translated">ストレージエンジンのサポート（MMAPv1またはWiredTiger）&amp;ndash; Meteor 1.4以降、WiredTigerがデフォルトのストレージエンジンです。</target>
        </trans-unit>
        <trans-unit id="cfd5cb5c2a301919f6af30860bff0837ba03e2e8" translate="yes" xml:space="preserve">
          <source>Storing data in the URL</source>
          <target state="translated">URLにデータを保存する</target>
        </trans-unit>
        <trans-unit id="ea178a9a9bd02024d63a2e33e3d1c06a8b763aa9" translate="yes" xml:space="preserve">
          <source>Strictness</source>
          <target state="translated">Strictness</target>
        </trans-unit>
        <trans-unit id="cf849e3b6bb69e78ff1f65f9b1a600f0969b064d" translate="yes" xml:space="preserve">
          <source>String to use as the HTTP request body.</source>
          <target state="translated">HTTP リクエストのボディとして使用する文字列。</target>
        </trans-unit>
        <trans-unit id="c83169d252f6be6e356582bc842a48fd5186ffc4" translate="yes" xml:space="preserve">
          <source>Structuring imports</source>
          <target state="translated">輸入品の構造化</target>
        </trans-unit>
        <trans-unit id="532626609e018b03feb0f8b6873e8b52009d95ad" translate="yes" xml:space="preserve">
          <source>Stubbing</source>
          <target state="translated">Stubbing</target>
        </trans-unit>
        <trans-unit id="a0d160aba89c286bf5f12775644159a426602778" translate="yes" xml:space="preserve">
          <source>Style suggestions for Meteor-specific patterns, such as Methods, publications, and more</source>
          <target state="translated">メソッド、出版物など、流星に特化したパターンのスタイル提案</target>
        </trans-unit>
        <trans-unit id="957400ac1d92f82a856a3f939ce5438d5096957c" translate="yes" xml:space="preserve">
          <source>Stylus</source>
          <target state="translated">Stylus</target>
        </trans-unit>
        <trans-unit id="edcc462ffa5e5dab415de6afbc1d092aa1a02087" translate="yes" xml:space="preserve">
          <source>Stylus is maintained as a &lt;a href=&quot;https://atmospherejs.com/meteor/stylus&quot;&gt;Meteor core package called &lt;code&gt;stylus&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">スタイラスは、&lt;a href=&quot;https://atmospherejs.com/meteor/stylus&quot;&gt; &lt;code&gt;stylus&lt;/code&gt; &lt;/a&gt;と呼ばれるMeteorコアパッケージとして維持されます。</target>
        </trans-unit>
        <trans-unit id="f53221ba50d4176a02810b2f92fffc05193e7ea6" translate="yes" xml:space="preserve">
          <source>Sub-expressions can be used to calculate key-word arguments, too:</source>
          <target state="translated">副式は、キーワード引数の計算にも使用できます。</target>
        </trans-unit>
        <trans-unit id="9ce6ba148fe8d9ab4a1efa44f043d11727e7f6ee" translate="yes" xml:space="preserve">
          <source>Sublime Text</source>
          <target state="translated">崇高なテキスト</target>
        </trans-unit>
        <trans-unit id="a3c1d0c35e3de98dca3e0b0bf5b1b0497fcf9e6a" translate="yes" xml:space="preserve">
          <source>SublimeLinter (&lt;a href=&quot;http://sublimelinter.readthedocs.org/en/latest/installation.html&quot;&gt;full instructions&lt;/a&gt;)</source>
          <target state="translated">SublimeLinter（&lt;a href=&quot;http://sublimelinter.readthedocs.org/en/latest/installation.html&quot;&gt;完全な手順&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="1e45d7eb374f7f57043eaa5fbea25fc5e84adc47" translate="yes" xml:space="preserve">
          <source>SublimeLinter-contrib-eslint (&lt;a href=&quot;https://github.com/roadhump/SublimeLinter-eslint#plugin-installation&quot;&gt;full instructions&lt;/a&gt;)</source>
          <target state="translated">SublimeLinter-contrib-eslint（&lt;a href=&quot;https://github.com/roadhump/SublimeLinter-eslint#plugin-installation&quot;&gt;完全な手順&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="087e97c4e3b69f78bd885dea1594496aaa4ea3ff" translate="yes" xml:space="preserve">
          <source>Submitting an app using Crosswalk to to Play Store</source>
          <target state="translated">クロスウォークを使ったアプリをPlayストアに投稿する</target>
        </trans-unit>
        <trans-unit id="c0f95cd7594695fc860e5e6020241d55c06b1dba" translate="yes" xml:space="preserve">
          <source>Subscribe from &lt;code&gt;onCreated&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;onCreated&lt;/code&gt; から購読</target>
        </trans-unit>
        <trans-unit id="1af8e1144fceed9ec58f1b52645250164f66f7c3" translate="yes" xml:space="preserve">
          <source>Subscribe in UI components</source>
          <target state="translated">UIコンポーネントでの購読</target>
        </trans-unit>
        <trans-unit id="019d920e4312cdd5d847ca57afbc59c99b40bad0" translate="yes" xml:space="preserve">
          <source>Subscribe to a record set. Returns a handle that provides &lt;code&gt;stop()&lt;/code&gt; and &lt;code&gt;ready()&lt;/code&gt; methods.</source>
          <target state="translated">レコードセットを購読します。 &lt;code&gt;stop()&lt;/code&gt; および &lt;code&gt;ready()&lt;/code&gt; メソッドを提供するハンドルを返します。</target>
        </trans-unit>
        <trans-unit id="eb0493455a7518a21bcd6a8fcfa3e2c2b4562802" translate="yes" xml:space="preserve">
          <source>Subscribe to data</source>
          <target state="translated">データを購読する</target>
        </trans-unit>
        <trans-unit id="ba401ec98dec72f17b10dca519bc070ad9595e82" translate="yes" xml:space="preserve">
          <source>Subscribe to relevant subscriptions,</source>
          <target state="translated">関連する購読を購読します。</target>
        </trans-unit>
        <trans-unit id="c9ceca33bbb824f322c70060ce390e0b0ed09aa7" translate="yes" xml:space="preserve">
          <source>Subscribing to data</source>
          <target state="translated">データに加入する</target>
        </trans-unit>
        <trans-unit id="037af573831ad1ba19f11905a227ae0a1a33d609" translate="yes" xml:space="preserve">
          <source>Subscribing to data puts it in your client-side collection. To use the data in your user interface, you need to query your client-side collection. There are a couple of important rules to follow when doing this.</source>
          <target state="translated">データをサブスクライブすると、クライアント側のコレクションにデータが格納されます。ユーザーインターフェイスでデータを使用するには、クライアント側のコレクションに問い合わせをする必要があります。この際には、いくつかの重要なルールがあります。</target>
        </trans-unit>
        <trans-unit id="61a8c988386beefb5a99ca1920f24f0083d2ed89" translate="yes" xml:space="preserve">
          <source>Subscription lifecycle</source>
          <target state="translated">サブスクリプションのライフサイクル</target>
        </trans-unit>
        <trans-unit id="84b90a00a876707d164f85089ad4f2273e36aec1" translate="yes" xml:space="preserve">
          <source>Subscription readiness</source>
          <target state="translated">購読の準備</target>
        </trans-unit>
        <trans-unit id="40b8e3a739c94ae31c2d2611ccebf4ce458f9807" translate="yes" xml:space="preserve">
          <source>Suggested style guidelines for your code.</source>
          <target state="translated">あなたのコードのための提案されたスタイルのガイドライン。</target>
        </trans-unit>
        <trans-unit id="481bc2ff1e299fbca3651cb1d9053d8888501cf3" translate="yes" xml:space="preserve">
          <source>Super-constructor for AccountsClient and AccountsServer.</source>
          <target state="translated">AccountsClient および AccountsServer のスーパーコンストラクタです。</target>
        </trans-unit>
        <trans-unit id="f0bab6d94ac2aea3829cd9120fff59574f733d0d" translate="yes" xml:space="preserve">
          <source>Support for Replica Sets &amp;amp; Oplog tailing</source>
          <target state="translated">レプリカセットとOplogテーリングのサポート</target>
        </trans-unit>
        <trans-unit id="ae06bea331f28eb01f40396f0e9966f2a64c7de1" translate="yes" xml:space="preserve">
          <source>Supported ES2015 Features</source>
          <target state="translated">サポートされているES2015の機能</target>
        </trans-unit>
        <trans-unit id="a60b6274ab94fd571786c35b02d0730b279a2fe4" translate="yes" xml:space="preserve">
          <source>Supports catch-all &lt;code&gt;...rest&lt;/code&gt; properties in object literal declarations and assignments:</source>
          <target state="translated">オブジェクトリテラルの宣言と割り当てで、すべてをキャッチ &lt;code&gt;...rest&lt;/code&gt; プロパティをサポートします。</target>
        </trans-unit>
        <trans-unit id="22feaffa039be8678f90f340543de7a34015bcf5" translate="yes" xml:space="preserve">
          <source>Supports the MongoDB version you wish to run</source>
          <target state="translated">実行したい MongoDB のバージョンをサポート</target>
        </trans-unit>
        <trans-unit id="bfa160301d799b28c48a451782aa085c37930e88" translate="yes" xml:space="preserve">
          <source>Suppose you have a simple publication of the following form:</source>
          <target state="translated">以下のような形式の簡単な出版物があるとします。</target>
        </trans-unit>
        <trans-unit id="cd0531ce8fef7fd864d536517837a08ea81ab48d" translate="yes" xml:space="preserve">
          <source>Suppose, as an example, that we wanted to add a &lt;code&gt;list.todoCount&lt;/code&gt; field, and ensure that it was set for all existing lists. Then we might write the following in server-only code (e.g. &lt;code&gt;/server/migrations.js&lt;/code&gt;):</source>
          <target state="translated">例として、 &lt;code&gt;list.todoCount&lt;/code&gt; フィールドを追加し、それがすべての既存のリストに設定されていることを確認したいとします。次に、サーバーのみのコード（ &lt;code&gt;/server/migrations.js&lt;/code&gt; など）で次のように記述します。</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="567b2656bb53fc60c79cd830a3253b6b487b0699" translate="yes" xml:space="preserve">
          <source>System Permissions</source>
          <target state="translated">システム権限</target>
        </trans-unit>
        <trans-unit id="f32de3e71f149d81905d2c0f8c9944150c3e4e29" translate="yes" xml:space="preserve">
          <source>Take advantage of Meteor&amp;rsquo;s &lt;a href=&quot;build-tool&quot;&gt;build system&lt;/a&gt; to be automatically transpiled from languages like CoffeeScript</source>
          <target state="translated">Meteorの&lt;a href=&quot;build-tool&quot;&gt;ビルドシステム&lt;/a&gt;を利用して、CoffeeScriptなどの言語から自動的に変換されます。</target>
        </trans-unit>
        <trans-unit id="7dc30076646c7eb425a83b84c83e4c9fb7d03bf9" translate="yes" xml:space="preserve">
          <source>Target audience</source>
          <target state="translated">対象者</target>
        </trans-unit>
        <trans-unit id="17e2637b16a5eba0cef89d8c454e94401594e14f" translate="yes" xml:space="preserve">
          <source>Technically speaking, the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element is not part of the Spacebars language. A &lt;code&gt;foo.html&lt;/code&gt; template file in Meteor consists of one or more of the following elements:</source>
          <target state="translated">技術的に言えば、 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 要素はスペースバー言語の一部ではありません。 &lt;code&gt;foo.html&lt;/code&gt; というの流星内のテンプレートファイルには、次の要素の一つ以上で構成されています。</target>
        </trans-unit>
        <trans-unit id="903e0de531f14fb0495c42169017eaca7c92edf3" translate="yes" xml:space="preserve">
          <source>Technically, what happens when one of these reactive sources changes is the following:</source>
          <target state="translated">技術的には、これらの反応性のあるソースのいずれかが変化したときに何が起こるかというと、次のようになります。</target>
        </trans-unit>
        <trans-unit id="0fe6042703610dfdfd08cfa5771de503b563a878" translate="yes" xml:space="preserve">
          <source>Template Declarations</source>
          <target state="translated">テンプレート宣言</target>
        </trans-unit>
        <trans-unit id="bdd364054e55324d98012f718e9b3d48a89df69d" translate="yes" xml:space="preserve">
          <source>Template Tag Placement Limitations</source>
          <target state="translated">テンプレートタグ配置の制限</target>
        </trans-unit>
        <trans-unit id="29f6f10ddc19829caadc10be7999e311791dd631" translate="yes" xml:space="preserve">
          <source>Template data contexts (which you can access reactively with &lt;code&gt;Template.currentData()&lt;/code&gt;).</source>
          <target state="translated">テンプレートデータコンテキスト（ &lt;code&gt;Template.currentData()&lt;/code&gt; で事後的にアクセスできます）。</target>
        </trans-unit>
        <trans-unit id="dd84b79aa495bebccabc7f154f254f161ffd3c0c" translate="yes" xml:space="preserve">
          <source>Template helpers take priority over properties of the data context.</source>
          <target state="translated">テンプレートヘルパーは、データコンテキストのプロパティよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="55b7201637ff0afa51b88637d8ad020d809e0a83" translate="yes" xml:space="preserve">
          <source>Template inclusion</source>
          <target state="translated">テンプレートの組み込み</target>
        </trans-unit>
        <trans-unit id="035d8506a3bee285b7a1a3417b22da1baebec672" translate="yes" xml:space="preserve">
          <source>Template instance objects are &lt;code&gt;instanceof Blaze.TemplateInstance&lt;/code&gt;.</source>
          <target state="translated">テンプレートインスタンスオブジェクトは、 &lt;code&gt;instanceof Blaze.TemplateInstance&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e84bc56fbad42cb89bb821c78b86f8d554517f7f" translate="yes" xml:space="preserve">
          <source>Template instance objects are found as the value of &lt;code&gt;this&lt;/code&gt; in the &lt;code&gt;onCreated&lt;/code&gt;, &lt;code&gt;onRendered&lt;/code&gt;, and &lt;code&gt;onDestroyed&lt;/code&gt; template callbacks, and as an argument to event handlers. You can access the current template instance from helpers using &lt;a href=&quot;templates#Template-instance&quot;&gt;&lt;code&gt;Template.instance()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">テンプレートインスタンスオブジェクトは、 &lt;code&gt;onCreated&lt;/code&gt; 、 &lt;code&gt;onRendered&lt;/code&gt; 、および &lt;code&gt;onDestroyed&lt;/code&gt; テンプレートコールバックの &lt;code&gt;this&lt;/code&gt; の値として、およびイベントハンドラーへの引数として見つかります。&lt;a href=&quot;templates#Template-instance&quot;&gt; &lt;code&gt;Template.instance()&lt;/code&gt; &lt;/a&gt;を使用して、ヘルパーから現在のテンプレートインスタンスにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="8644d7693f62b77833e7c88bd58cdcce8f9918be" translate="yes" xml:space="preserve">
          <source>Template instance objects have fields like &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;firstNode&lt;/code&gt;, and &lt;code&gt;lastNode&lt;/code&gt; which are not reactive and which are also not automatically kept up to date. Calling &lt;code&gt;templateInstance()&lt;/code&gt; causes these fields to be updated.</source>
          <target state="translated">テンプレートインスタンスオブジェクトには、 &lt;code&gt;data&lt;/code&gt; 、 &lt;code&gt;firstNode&lt;/code&gt; 、 &lt;code&gt;lastNode&lt;/code&gt; などのフィールドがあり、これらは反応せず、自動的に最新の状態に維持されません。 &lt;code&gt;templateInstance()&lt;/code&gt; を呼び出すと、これらのフィールドが更新されます。</target>
        </trans-unit>
        <trans-unit id="de6fa8e33e81f97df83046b1c5ecafc0cc146810" translate="yes" xml:space="preserve">
          <source>Template instances</source>
          <target state="translated">テンプレートインスタンス</target>
        </trans-unit>
        <trans-unit id="954ab955f2a4e981e2a42027ac3b702c33779a3e" translate="yes" xml:space="preserve">
          <source>Template name</source>
          <target state="translated">テンプレート名</target>
        </trans-unit>
        <trans-unit id="bcb645303efc3c8f462d217bc353c2b8b48088e0" translate="yes" xml:space="preserve">
          <source>Template#events()</source>
          <target state="translated">Template#events()</target>
        </trans-unit>
        <trans-unit id="d9fe9712b1b136c60046d954d784963ff129062c" translate="yes" xml:space="preserve">
          <source>Template#helpers()</source>
          <target state="translated">Template#helpers()</target>
        </trans-unit>
        <trans-unit id="94d18a58f4d1c36790911a050f2b383247c749c9" translate="yes" xml:space="preserve">
          <source>Template#onCreated</source>
          <target state="translated">Template#onCreated</target>
        </trans-unit>
        <trans-unit id="5fc234b06b339f13553e21c57fe129c6b3870c7d" translate="yes" xml:space="preserve">
          <source>Template#onDestroyed</source>
          <target state="translated">Template#onDestroyed</target>
        </trans-unit>
        <trans-unit id="f70cfeefd66c6d59a23695f76f055c20c08a8ab5" translate="yes" xml:space="preserve">
          <source>Template#onRendered</source>
          <target state="translated">Template#onRendered</target>
        </trans-unit>
        <trans-unit id="ee4905bfe20e62ceb883b0dd1c895d6c08b79498" translate="yes" xml:space="preserve">
          <source>Template.body</source>
          <target state="translated">Template.body</target>
        </trans-unit>
        <trans-unit id="cf6122bfebfbe04ad334163b6cdbae804dc4629c" translate="yes" xml:space="preserve">
          <source>Template.currentData()</source>
          <target state="translated">Template.currentData()</target>
        </trans-unit>
        <trans-unit id="30ef925fcbd26103b22179b021ac812bcf7b2a82" translate="yes" xml:space="preserve">
          <source>Template.instance()</source>
          <target state="translated">Template.instance()</target>
        </trans-unit>
        <trans-unit id="0a5041bb7a0ef0a391ef9a428d41bde65e2b974e" translate="yes" xml:space="preserve">
          <source>Template.parentData()</source>
          <target state="translated">Template.parentData()</target>
        </trans-unit>
        <trans-unit id="b856e3cccd43f16d4b078a0b3968edfeb4ebf4ca" translate="yes" xml:space="preserve">
          <source>Template.registerHelper()</source>
          <target state="translated">Template.registerHelper()</target>
        </trans-unit>
        <trans-unit id="f25b700ed9f092123a43acb205a6869342cf9dd6" translate="yes" xml:space="preserve">
          <source>Templates</source>
          <target state="translated">Templates</target>
        </trans-unit>
        <trans-unit id="241156fe7b111b0119698d0ac0de8840677acb6f" translate="yes" xml:space="preserve">
          <source>Templates and HTML</source>
          <target state="translated">テンプレートとHTML</target>
        </trans-unit>
        <trans-unit id="5a679dbcb04acbd729bc2083a60a2f2f653eb626" translate="yes" xml:space="preserve">
          <source>Templates and components</source>
          <target state="translated">テンプレートとコンポーネント</target>
        </trans-unit>
        <trans-unit id="29e93519e88967304d1daa33b2822c504b9680b1" translate="yes" xml:space="preserve">
          <source>Templates defined by the template compiler, such as &lt;code&gt;Template.myTemplate&lt;/code&gt;, are objects of type &lt;code&gt;Blaze.Template&lt;/code&gt; (aliased as &lt;code&gt;Template&lt;/code&gt;).</source>
          <target state="translated">などのテンプレートコンパイラによって定義されたテンプレート、 &lt;code&gt;Template.myTemplate&lt;/code&gt; は、タイプのオブジェクトである &lt;code&gt;Blaze.Template&lt;/code&gt; （ASエイリアス &lt;code&gt;Template&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c025d2ae33754d4bfe4d335c9cb82163f641d492" translate="yes" xml:space="preserve">
          <source>Test Files</source>
          <target state="translated">テストファイル</target>
        </trans-unit>
        <trans-unit id="87a1d1d44fb17167a54fb7c79b121ad07f74c815" translate="yes" xml:space="preserve">
          <source>Test Meteor packages, either by name, or by directory. Not specifying an argument will run tests for all local packages. The results are displayed in an app that runs at &lt;code&gt;localhost:3000&lt;/code&gt; by default. If you need to, you can pass the &lt;code&gt;--settings&lt;/code&gt; and &lt;code&gt;--port&lt;/code&gt; arguments.</source>
          <target state="translated">名前またはディレクトリのいずれかでMeteorパッケージをテストします。引数を指定しないと、すべてのローカルパッケージのテストが実行されます。結果は、デフォルトで &lt;code&gt;localhost:3000&lt;/code&gt; で実行されるアプリに表示されます。必要に応じて、 &lt;code&gt;--settings&lt;/code&gt; および &lt;code&gt;--port&lt;/code&gt; 引数を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="87514101785630549e54861e7e3b772a0e86078e" translate="yes" xml:space="preserve">
          <source>Test data</source>
          <target state="translated">テストデータ</target>
        </trans-unit>
        <trans-unit id="4a06fef6a0fa977984162a2767d7bc80aae40286" translate="yes" xml:space="preserve">
          <source>Test files themselves (for example a file named &lt;code&gt;todos-item.test.js&lt;/code&gt; or &lt;code&gt;routing.app-specs.coffee&lt;/code&gt;) can register themselves to be run by the test driver in the usual way for that testing library. For Mocha, that&amp;rsquo;s by using &lt;code&gt;describe&lt;/code&gt; and &lt;code&gt;it&lt;/code&gt;:</source>
          <target state="translated">テストファイル自体（たとえば、 &lt;code&gt;todos-item.test.js&lt;/code&gt; または &lt;code&gt;routing.app-specs.coffee&lt;/code&gt; という名前のファイル）は、そのテストライブラリの通常の方法で、テストドライバーによって実行されるように登録できます。Mochaの場合は、 &lt;code&gt;describe&lt;/code&gt; と &lt;code&gt;it&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="0fa762720da1f7c5efd2ed8b5502936147a15cdc" translate="yes" xml:space="preserve">
          <source>Test if a session variable is equal to a value. If inside a &lt;a href=&quot;#reactivity&quot;&gt;reactive computation&lt;/a&gt;, invalidate the computation the next time the variable changes to or from the value.</source>
          <target state="translated">セッション変数が値と等しいかどうかをテストします。&lt;a href=&quot;#reactivity&quot;&gt;リアクティブ計算の&lt;/a&gt;内部にある場合は、変数が値にまたは値から次に変更されたときに計算を無効にします。</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="a8d9f1a6657856f2287a9e4d4457163b88c30e0c" translate="yes" xml:space="preserve">
          <source>Testing allows you to ensure your application works the way you think it does, especially as your codebase changes over time. If you have good tests, you can refactor and rewrite code with confidence. Tests are also the most concrete form of documentation of expected behavior, since other developers can figure out how to use your code by reading the tests.</source>
          <target state="translated">テストを行うことで、特にコードベースが時間の経過とともに変化していく中で、アプリケーションが自分の考えた通りに動作することを確認することができます。良いテストがあれば、自信を持ってコードをリファクタリングしたり書き換えたりすることができます。他の開発者はテストを読むことで、あなたのコードをどのように使うかを理解することができるので、テストは期待される動作を文書化する最も具体的な形でもあります。</target>
        </trans-unit>
        <trans-unit id="dddc3f861194f3b4a52169865358ab5cf7cb5272" translate="yes" xml:space="preserve">
          <source>Testing packages</source>
          <target state="translated">パッケージのテスト</target>
        </trans-unit>
        <trans-unit id="2687e96cfa9d1d8d9233168af944ddc7ab3ff1f7" translate="yes" xml:space="preserve">
          <source>Testing publications</source>
          <target state="translated">出版物のテスト</target>
        </trans-unit>
        <trans-unit id="b629a403b8cdc9e9bfb8978fd80ebef4c680151f" translate="yes" xml:space="preserve">
          <source>Thanks to Meteor&amp;rsquo;s automatic handling of optimistic UI, if a method unexpectedly fails the optimistic changes will roll back and the Minimongo database will end up in a consistent state. If you are rendering directly from Minimongo, the user will see something that is consistent, even if it&amp;rsquo;s not what they anticipated of course. In some cases when you have state you are keeping outside of Minimongo, you may need to make changes to it manually to reflect this. You can see this in the example above where we had to update the router manually after an operation failed.</source>
          <target state="translated">MeteorによるオプティミスティックUIの自動処理のおかげで、メソッドが予期せず失敗すると、オプティミスティックな変更がロールバックされ、Minimongoデータベースは一貫した状態になります。 Minimongoから直接レンダリングしている場合、ユーザーが当然予期していないものであっても、ユーザーには一貫性のあるものが表示されます。場合によっては、Minimongoの外部に保持している状態で、これを反映するために手動で変更する必要があります。これは、操作が失敗した後にルーターを手動で更新する必要がある上記の例で確認できます。</target>
        </trans-unit>
        <trans-unit id="74debe8633cb830359b907ee833bcb0786e3cdda" translate="yes" xml:space="preserve">
          <source>Thanks to modules, any load-order dependency you might imagine can be resolved by adding an &lt;code&gt;import&lt;/code&gt; statement. So if &lt;code&gt;a.js&lt;/code&gt; loads before &lt;code&gt;b.js&lt;/code&gt; because of their file names, but &lt;code&gt;a.js&lt;/code&gt; needs something defined by &lt;code&gt;b.js&lt;/code&gt;, then &lt;code&gt;a.js&lt;/code&gt; can simply &lt;code&gt;import&lt;/code&gt; that value from &lt;code&gt;b.js&lt;/code&gt;:</source>
          <target state="translated">モジュールのおかげで、考えられるロード順序の依存関係は、 &lt;code&gt;import&lt;/code&gt; ステートメントを追加することで解決できます。あれば &lt;code&gt;a.js&lt;/code&gt; 前負荷 &lt;code&gt;b.js&lt;/code&gt; ため、そのファイル名が、の &lt;code&gt;a.js&lt;/code&gt; がで定義された何か必要 &lt;code&gt;b.js&lt;/code&gt; を、そして &lt;code&gt;a.js&lt;/code&gt; は、単純にすることができます &lt;code&gt;import&lt;/code&gt; からその値を &lt;code&gt;b.js&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="34a8b6200074d30b9b2b9a0aee58401c6db6f443" translate="yes" xml:space="preserve">
          <source>Thanks to the guarantees provided by DDP and Meteor&amp;rsquo;s accounts system, the above publication can be confident that it will only ever publish private lists to the user that they belong to. Note that the publication will re-run if the user logs out (or back in again), which means that the published set of private lists will change as the active user changes.</source>
          <target state="translated">DDPとMeteorのアカウントシステムによって提供される保証のおかげで、上記の公開では、所属するユーザーにのみプライベートリストを公開することになります。ユーザーがログアウト（または再度ログイン）すると、パブリケーションが再実行されることに注意してください。これは、アクティブユーザーが変更されると、公開されたプライベートリストのセットが変更されることを意味します。</target>
        </trans-unit>
        <trans-unit id="37bc1757280417ab2e024852d14ee4b639696c3d" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;current View&amp;rdquo; is kept in &lt;a href=&quot;#Blaze-currentView&quot;&gt;&lt;code&gt;Blaze.currentView&lt;/code&gt;&lt;/a&gt; and is set during View rendering, callbacks, autoruns, and template event handlers. It affects calls such as &lt;a href=&quot;templates#Template-currentData&quot;&gt;&lt;code&gt;Template.currentData()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">「現在のビュー」は&lt;a href=&quot;#Blaze-currentView&quot;&gt; &lt;code&gt;Blaze.currentView&lt;/code&gt; に&lt;/a&gt;保持され、ビューのレンダリング、コールバック、自動実行、およびテンプレートイベントハンドラー中に設定されます。これは、&lt;a href=&quot;templates#Template-currentData&quot;&gt; &lt;code&gt;Template.currentData()&lt;/code&gt; &lt;/a&gt;などの呼び出しに影響します。</target>
        </trans-unit>
        <trans-unit id="edc291428b27f7f9fba068db1d70b436d6781473" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;current view&amp;rdquo; is used by &lt;a href=&quot;templates#Template-currentData&quot;&gt;&lt;code&gt;Template.currentData()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;templates#Template-instance&quot;&gt;&lt;code&gt;Template.instance()&lt;/code&gt;&lt;/a&gt; to determine the contextually relevant data context and template instance.</source>
          <target state="translated">「現在のビュー」は、&lt;a href=&quot;templates#Template-currentData&quot;&gt; &lt;code&gt;Template.currentData()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;templates#Template-instance&quot;&gt; &lt;code&gt;Template.instance()&lt;/code&gt; &lt;/a&gt;によって、コンテキストに関連するデータコンテキストとテンプレートインスタンスを決定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="498a8e5e30464099d72aae3e631f20d81add1e57" translate="yes" xml:space="preserve">
          <source>The &amp;lsquo;meteor test&amp;rsquo; command</source>
          <target state="translated">「流星テスト」コマンド</target>
        </trans-unit>
        <trans-unit id="1f077f0cd8f98b1c7830ad41c879a0bebb4706a8" translate="yes" xml:space="preserve">
          <source>The (extended) &lt;a href=&quot;http://www.semver.org&quot;&gt;semver&lt;/a&gt; version for your package. Additionally, Meteor allows a wrap number: a positive integer that follows the version number. If you are porting another package that uses semver versioning, you may want to use the original version, postfixed with &lt;code&gt;_wrapnumber&lt;/code&gt;. For example, &lt;code&gt;1.2.3_1&lt;/code&gt; or &lt;code&gt;2.4.5-rc1_4&lt;/code&gt;. Wrap numbers sort after the original numbers: &lt;code&gt;1.2.3&lt;/code&gt; &amp;lt; &lt;code&gt;1.2.3_1&lt;/code&gt; &amp;lt; &lt;code&gt;1.2.3_2&lt;/code&gt; &amp;lt; &lt;code&gt;1.2.4-rc.0&lt;/code&gt;. If no version is specified, this field defaults to &lt;code&gt;0.0.0&lt;/code&gt;. If you want to publish your package to the package server, you must specify a version.</source>
          <target state="translated">パッケージの（拡張）&lt;a href=&quot;http://www.semver.org&quot;&gt;semver&lt;/a&gt;バージョン。さらに、Meteorでは、ラップ番号（バージョン番号に続く正の整数）を使用できます。 semverバージョン管理を使用する別のパッケージを移植する場合は、元のバージョンを使用し、 &lt;code&gt;_wrapnumber&lt;/code&gt; で後置することができます。たとえば、 &lt;code&gt;1.2.3_1&lt;/code&gt; または &lt;code&gt;2.4.5-rc1_4&lt;/code&gt; です。ラップ番号は、元の番号の後にソートされます： &lt;code&gt;1.2.3&lt;/code&gt; &amp;lt; &lt;code&gt;1.2.3_1&lt;/code&gt; &amp;lt; &lt;code&gt;1.2.3_2&lt;/code&gt; &amp;lt; &lt;code&gt;1.2.4-rc.0&lt;/code&gt; 。バージョンが指定されていない場合、このフィールドのデフォルトは &lt;code&gt;0.0.0&lt;/code&gt; です。パッケージをパッケージサーバーに公開する場合は、バージョンを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="720f7a15f8ef4cd75bf1890491a0834595f0f4cc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#Template-Declarations&quot;&gt;template object&lt;/a&gt; representing your &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">&lt;a href=&quot;#Template-Declarations&quot;&gt;テンプレートオブジェクト&lt;/a&gt;自分の表現 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; タグを。</target>
        </trans-unit>
        <trans-unit id="37f50de62554904500225788d9479d70a34287db" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#Template-instances&quot;&gt;template instance&lt;/a&gt; corresponding to the current template helper, event handler, callback, or autorun. If there isn't one, &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#Template-instances&quot;&gt;テンプレートのインスタンス&lt;/a&gt;現在のテンプレートヘルパー、イベントハンドラ、コールバック、または自動実行に対応します。ない場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6b9502dc40a988bfb0e7a3108ed20e41444d9ba8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;blaze#Blaze-View&quot;&gt;View&lt;/a&gt; object for this invocation of the template.</source>
          <target state="translated">テンプレートのこの呼び出しの&lt;a href=&quot;blaze#Blaze-View&quot;&gt;View&lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="e1f87f80f657b3c027fa8cbb0c85ddd64f63a257" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;build-tool#what-it-does&quot;&gt;Meteor build tool&lt;/a&gt; and the &lt;code&gt;meteor test&lt;/code&gt; command ignore any files located in any &lt;code&gt;tests/&lt;/code&gt; directory. This allows you to put tests in this directory that you can run using a test runner outside of Meteor&amp;rsquo;s built-in test tools and still not have those files loaded in your application. See Meteor&amp;rsquo;s &lt;a href=&quot;structure#load-order&quot;&gt;default file load order&lt;/a&gt; rules.</source>
          <target state="translated">&lt;a href=&quot;build-tool#what-it-does&quot;&gt;流星のビルドツール&lt;/a&gt;と &lt;code&gt;meteor test&lt;/code&gt; コマンドは、任意の位置に任意のファイルを無視する &lt;code&gt;tests/&lt;/code&gt; ディレクトリを。これにより、Meteorの組み込みテストツールの外部にあるテストランナーを使用して実行できるテストをこのディレクトリに配置できますが、アプリケーションにこれらのファイルをロードすることはできません。Meteorの&lt;a href=&quot;structure#load-order&quot;&gt;デフォルトのファイル読み込み順序&lt;/a&gt;ルールを参照してください。</target>
        </trans-unit>
        <trans-unit id="1a450a62817802ec8fe740cfbc4a152496bfb81c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_method&quot;&gt;HTTP method&lt;/a&gt; to use, such as &quot;&lt;code&gt;GET&lt;/code&gt;&quot;, &quot;&lt;code&gt;POST&lt;/code&gt;&quot;, or &quot;&lt;code&gt;HEAD&lt;/code&gt;&quot;.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_method&quot;&gt;HTTPメソッド&lt;/a&gt;など&quot;として使用するために、 &lt;code&gt;GET&lt;/code&gt; &quot;、 &quot; &lt;code&gt;POST&lt;/code&gt; &quot;、または&quot; &lt;code&gt;HEAD&lt;/code&gt; &quot;。</target>
        </trans-unit>
        <trans-unit id="0a53aebbf6d34463a81d54cae71dfb3f69c070c0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://atmospherejs.com/hwillson/stub-collections&quot;&gt;&lt;code&gt;hwillson:stub-collections&lt;/code&gt;&lt;/a&gt; package we mentioned &lt;a href=&quot;#mocking-the-database&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://atmospherejs.com/hwillson/stub-collections&quot;&gt; &lt;code&gt;hwillson:stub-collections&lt;/code&gt; &lt;/a&gt;我々が言及したパッケージ&lt;a href=&quot;#mocking-the-database&quot;&gt;上で&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="534b26dee33fb34fe43c5f25213cbfa079600bb3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://atmospherejs.com/meteor/apollo&quot;&gt;&lt;code&gt;apollo&lt;/code&gt; Atmosphere package&lt;/a&gt; for Meteor provides integration with &lt;a href=&quot;http://www.apollodata.com/&quot;&gt;Apollo&lt;/a&gt; (and thus GraphQL).</source>
          <target state="translated">Meteor の&lt;a href=&quot;https://atmospherejs.com/meteor/apollo&quot;&gt; &lt;code&gt;apollo&lt;/code&gt; Atmosphereパッケージ&lt;/a&gt;は、&lt;a href=&quot;http://www.apollodata.com/&quot;&gt;Apollo&lt;/a&gt;（およびGraphQL）との統合を提供します。</target>
        </trans-unit>
        <trans-unit id="5d407bf8eea58896a623c449771f8cdd09fa8ad2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://atmospherejs.com/meteor/reactive-dict&quot;&gt;&lt;code&gt;reactive-dict&lt;/code&gt;&lt;/a&gt; package lets you define a simple reactive key-value dictionary. It&amp;rsquo;s a convenient way to attach internal state to a component. We create the &lt;code&gt;state&lt;/code&gt; dictionary in the &lt;code&gt;onCreated&lt;/code&gt; callback, and attach it to the template instance:</source>
          <target state="translated">&lt;a href=&quot;https://atmospherejs.com/meteor/reactive-dict&quot;&gt; &lt;code&gt;reactive-dict&lt;/code&gt; &lt;/a&gt;パッケージには、簡単な反応性のキーと値の辞書を定義することができます。これは、内部状態をコンポーネントに添付する便利な方法です。 &lt;code&gt;onCreated&lt;/code&gt; コールバックで &lt;code&gt;state&lt;/code&gt; ディクショナリを作成し、テンプレートインスタンスにアタッチします。</target>
        </trans-unit>
        <trans-unit id="a2991e0bd23b6c144c6722ea0d60f802e82e6550" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://atmospherejs.com/velocity/meteor-stubs&quot;&gt;&lt;code&gt;velocity:meteor-stubs&lt;/code&gt;&lt;/a&gt; package, which creates simple stubs for most Meteor core objects.</source>
          <target state="translated">&lt;a href=&quot;https://atmospherejs.com/velocity/meteor-stubs&quot;&gt; &lt;code&gt;velocity:meteor-stubs&lt;/code&gt; &lt;/a&gt;最も流星のコアオブジェクトのためのシンプルなスタブを作成するパッケージ。</target>
        </trans-unit>
        <trans-unit id="2daed1b94fd1329afc419eba63cb003c11445519" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.meteor.com&quot;&gt;Meteor docs&lt;/a&gt; is the best place to find the core API documentation of the platform.</source>
          <target state="translated">&lt;a href=&quot;https://docs.meteor.com&quot;&gt;流星のドキュメントは、&lt;/a&gt;プラットフォームのコアAPIドキュメントを見つける最適な場所です。</target>
        </trans-unit>
        <trans-unit id="58f719fe6d54eb82f96f7e043931f576ef99fe49" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/arunoda/meteor-up/tree/mupx&quot;&gt;&lt;code&gt;mupx&lt;/code&gt;&lt;/a&gt; branch (best for pre-Meteor 1.4)</source>
          <target state="translated">&lt;a href=&quot;https://github.com/arunoda/meteor-up/tree/mupx&quot;&gt; &lt;code&gt;mupx&lt;/code&gt; &lt;/a&gt;ブランチ（Meteor 1.4より前のバージョンに最適）</target>
        </trans-unit>
        <trans-unit id="119e0391fd90d30f59076159266e695da881da09" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/kadirahq/meteor-up&quot;&gt;&lt;code&gt;kadirahq/mup&lt;/code&gt;&lt;/a&gt; fork &lt;em&gt;(best for Meteor 1.4 or higher)&lt;/em&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/kadirahq/meteor-up&quot;&gt; &lt;code&gt;kadirahq/mup&lt;/code&gt; &lt;/a&gt;フォーク&lt;em&gt;（最高流星1.4以上用）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c54f06d8d72feecced755a2d90987a690cc30863" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/meteor/docs/blob/master/long-form/tracker-manual.md#the-flush-cycle&quot;&gt;Tracker manual&lt;/a&gt; describes the motivation for the flush cycle and the guarantees made by &lt;code&gt;Tracker.flush&lt;/code&gt; and &lt;code&gt;Tracker.afterFlush&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/meteor/docs/blob/master/long-form/tracker-manual.md#the-flush-cycle&quot;&gt;トラッカーマニュアルは、&lt;/a&gt;フラッシュサイクルの動機とによって作られた保証について説明し &lt;code&gt;Tracker.flush&lt;/code&gt; と &lt;code&gt;Tracker.afterFlush&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="9544209b8e2b457db7d1752161262706c02f8312" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#let&lt;/code&gt; tag creates a new alias variable for a given expression. While it doesn&amp;rsquo;t change the data context, it allows to refer to an expression (helper, data context, another variable) with a short-hand within the template:</source>
          <target state="translated">&lt;code&gt;#let&lt;/code&gt; タグは、与えられた式のための新しいエイリアス変数を作成します。データコンテキストは変更されませんが、テンプレート内の短縮形で式（ヘルパー、データコンテキスト、別の変数）を参照できます。</target>
        </trans-unit>
        <trans-unit id="1199bf2ca9bb11d0c1723650cd941df651e77b90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;Blaze template=&quot;itemsList&quot; items={items} /&amp;gt;&lt;/code&gt; line is the same as if you had written &lt;code&gt;{{&amp;gt; itemsList items=items}}&lt;/code&gt; inside of a Blaze template. For other options and further information, see the package&amp;rsquo;s &lt;a href=&quot;https://github.com/gadicc/meteor-blaze-react-component&quot;&gt;project page&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;Blaze template=&quot;itemsList&quot; items={items} /&amp;gt;&lt;/code&gt; 行は、あなたが書かれた場合と同じである &lt;code&gt;{{&amp;gt; itemsList items=items}}&lt;/code&gt; ブレイズテンプレートの内部を。その他のオプションと詳細については、パッケージの&lt;a href=&quot;https://github.com/gadicc/meteor-blaze-react-component&quot;&gt;プロジェクトページを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9f1f18f57a33f5eef39686bbd60f04a3b2695e7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;host&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;port&amp;gt;&lt;/code&gt; should be the address of the server you want your app to connect to.</source>
          <target state="translated">&lt;code&gt;&amp;lt;host&amp;gt;&lt;/code&gt; および &lt;code&gt;&amp;lt;port&amp;gt;&lt;/code&gt; アプリは、接続するサーバのアドレスでなければなりません。</target>
        </trans-unit>
        <trans-unit id="a358091c0c7f33df251b91e5f3e17c14b17d6fdc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.then()&lt;/code&gt; method of the &lt;code&gt;Promise&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; の &lt;code&gt;.then()&lt;/code&gt; メソッド</target>
        </trans-unit>
        <trans-unit id="168a5c0ab7b1c62cceb14ec134b59285f9a47039" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AccountsClient&lt;/code&gt; and &lt;code&gt;AccountsServer&lt;/code&gt; classes share a common superclass, &lt;code&gt;AccountsCommon&lt;/code&gt;. Methods defined on &lt;code&gt;AccountsCommon.prototype&lt;/code&gt; will be available on both the client and the server, via the predefined &lt;code&gt;Accounts&lt;/code&gt; object (most common) or any custom &lt;code&gt;accountsClientOrServer&lt;/code&gt; object created using the &lt;code&gt;AccountsClient&lt;/code&gt; or &lt;code&gt;AccountsServer&lt;/code&gt; constructors (less common).</source>
          <target state="translated">&lt;code&gt;AccountsClient&lt;/code&gt; と &lt;code&gt;AccountsServer&lt;/code&gt; クラスが共通のスーパー、共有 &lt;code&gt;AccountsCommon&lt;/code&gt; を。 &lt;code&gt;AccountsCommon.prototype&lt;/code&gt; で定義されたメソッドは、事前定義された &lt;code&gt;Accounts&lt;/code&gt; オブジェクト（最も一般的）または &lt;code&gt;AccountsClient&lt;/code&gt; または &lt;code&gt;AccountsServer&lt;/code&gt; コンストラクター（あまり一般的ではない）を使用して作成されたカスタム &lt;code&gt;accountsClientOrServer&lt;/code&gt; オブジェクトを介して、クライアントとサーバーの両方で使用できます。</target>
        </trans-unit>
        <trans-unit id="53d896014c69bd5f40201df6b83c6bce629451f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;App_rootRedirector&lt;/code&gt; component is rendered inside the &lt;code&gt;App_body&lt;/code&gt; layout, which takes care of subscribing to the set of lists the user knows about &lt;em&gt;before&lt;/em&gt; rendering its sub-component, and we are guaranteed there is at least one such list. This means that if the &lt;code&gt;App_rootRedirector&lt;/code&gt; ends up being created, there&amp;rsquo;ll be a list loaded, so we can simply do:</source>
          <target state="translated">&lt;code&gt;App_rootRedirector&lt;/code&gt; のコンポーネントが内部でレンダリングされ &lt;code&gt;App_body&lt;/code&gt; ユーザーが知っているリストの集合に加入しての世話をするレイアウト、&lt;em&gt;前に&lt;/em&gt;そのサブコンポーネントをレンダリングし、我々は、少なくとも1つのこのようなリストがある保証されています。つまり、 &lt;code&gt;App_rootRedirector&lt;/code&gt; が作成されると、リストが読み込まれるので、次のように簡単に実行できます。</target>
        </trans-unit>
        <trans-unit id="10a4d76dba5aaaeec68ecfe67b4f107ae4fd4de9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Lists_show_page&lt;/code&gt; template renders &lt;em&gt;without&lt;/em&gt; arguments&amp;mdash;it is this template&amp;rsquo;s responsibility to collect information from the current route, and then pass this information down into its child templates. Correspondingly the &lt;code&gt;Lists_show_page&lt;/code&gt; template is very tied to the route that rendered it, and so it needs to be a smart component. See the article on &lt;a href=&quot;ui-ux&quot;&gt;UI/UX&lt;/a&gt; for more about smart and reusable components.</source>
          <target state="translated">&lt;code&gt;Lists_show_page&lt;/code&gt; のテンプレートをレンダリング&lt;em&gt;することなく、&lt;/em&gt;引数、それが現在のルートからの収集情報へこのテンプレートの責任で、その後、その子テンプレートには、この情報を伝承します。 &lt;code&gt;Lists_show_page&lt;/code&gt; 、Lists_show_pageテンプレートは、それをレンダリングしたルートに非常に関連しているため、スマートコンポーネントである必要があります。スマートで再利用可能なコンポーネントの詳細については、&lt;a href=&quot;ui-ux&quot;&gt;UI / UX&lt;/a&gt;に関する記事を参照してください。</target>
        </trans-unit>
        <trans-unit id="4747eae57c26b0d41ece7eda66ca67d658307501" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;METEOR_CORDOVA_COMPAT_VERSION_*&lt;/code&gt; env vars must be present &lt;strong&gt;while building&lt;/strong&gt; your app through &lt;code&gt;run&lt;/code&gt;, &lt;code&gt;build&lt;/code&gt; or &lt;code&gt;deploy&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;METEOR_CORDOVA_COMPAT_VERSION_*&lt;/code&gt; envが存在している必要がありますvarsの&lt;strong&gt;構築している間&lt;/strong&gt;を通して、あなたのアプリを &lt;code&gt;run&lt;/code&gt; 、 &lt;code&gt;build&lt;/code&gt; または &lt;code&gt;deploy&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0dc9bf0e45b3728817f53fc34f51837a4a4698da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MyLinter&lt;/code&gt; class should now implement the &lt;code&gt;processFilesForPackage&lt;/code&gt; method. The method should accept two arguments: a list of files and an options object.</source>
          <target state="translated">&lt;code&gt;MyLinter&lt;/code&gt; のクラスは実装する必要があり &lt;code&gt;processFilesForPackage&lt;/code&gt; の方法を。このメソッドは、ファイルのリストとオプションオブジェクトの2つの引数を受け入れる必要があります。</target>
        </trans-unit>
        <trans-unit id="52a56cc43a7528c5c6111b04f0f4d05397745f7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ValidationError&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ValidationError&lt;/code&gt; を</target>
        </trans-unit>
        <trans-unit id="28f41a1cb4d3fde6c4ca3b32167b118bb5ec716d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;accounts-base&lt;/code&gt; package exports two constructors, called &lt;code&gt;AccountsClient&lt;/code&gt; and &lt;code&gt;AccountsServer&lt;/code&gt;, which are used to create the &lt;code&gt;Accounts&lt;/code&gt; object that is available on the client and the server, respectively.</source>
          <target state="translated">&lt;code&gt;accounts-base&lt;/code&gt; のパッケージの輸出と呼ばれる2つのコンストラクタ、 &lt;code&gt;AccountsClient&lt;/code&gt; と &lt;code&gt;AccountsServer&lt;/code&gt; 作成するために使用され、 &lt;code&gt;Accounts&lt;/code&gt; はそれぞれ、クライアントとサーバー上で利用可能であるオブジェクトを。</target>
        </trans-unit>
        <trans-unit id="5338034bb1c6ea18b1d533a77f342fbc45cde4c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;accounts-password&lt;/code&gt; package contains a full system for password-based authentication. In addition to the basic username and password-based sign-in process, it also supports email-based sign-in including address verification and password recovery emails.</source>
          <target state="translated">&lt;code&gt;accounts-password&lt;/code&gt; パッケージには、パスワードベースの認証のための完全なシステムが含まれています。基本的なユーザー名とパスワードベースのサインインプロセスに加えて、アドレス検証やパスワード回復メールなどのメールベースのサインインもサポートしています。</target>
        </trans-unit>
        <trans-unit id="873e5e9c45468e38dffc64d1d31b2927218a4c2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;appcache&lt;/code&gt; package stores the static parts of a Meteor application (the client side Javascript, HTML, CSS, and images) in the browser&amp;rsquo;s &lt;a href=&quot;https://en.wikipedia.org/wiki/AppCache&quot;&gt;application cache&lt;/a&gt;. To enable caching simply add the &lt;code&gt;appcache&lt;/code&gt; package to your project.</source>
          <target state="translated">&lt;code&gt;appcache&lt;/code&gt; パッケージストアブラウザの流星アプリケーション（クライアントサイドJavaScript、HTML、CSS、画像など）の静的パーツ&lt;a href=&quot;https://en.wikipedia.org/wiki/AppCache&quot;&gt;アプリケーションのキャッシュ&lt;/a&gt;。キャッシングを有効にするには、プロジェクトに &lt;code&gt;appcache&lt;/code&gt; パッケージを追加するだけです。</target>
        </trans-unit>
        <trans-unit id="620306c025cce35a68c4384e5e838f125d384040" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bundle-visualizer&lt;/code&gt; package is an analysis tool which provides a visual representation within the web browser showing what is included in the initial client bundle. The initial client bundle is the primary package of code downloaded and executed by the browser to run a Meteor application and includes packages which have been added via &lt;code&gt;meteor add &amp;lt;package&amp;gt;&lt;/code&gt; or Node modules included in the &lt;code&gt;node_modules&lt;/code&gt; directory and used in an application.</source>
          <target state="translated">&lt;code&gt;bundle-visualizer&lt;/code&gt; パッケージには、最初のクライアント・バンドルに含まれているものを示すWebブラウザ内の視覚的な表現を提供し、分析ツールです。最初のクライアントバンドルは、Meteorアプリケーションを実行するためにブラウザーによってダウンロードおよび実行されるコードの主要なパッケージであり、 &lt;code&gt;node_modules&lt;/code&gt; ディレクトリに含まれる &lt;code&gt;meteor add &amp;lt;package&amp;gt;&lt;/code&gt; またはNodeモジュールを介して追加され、アプリケーションで使用されるパッケージを含みます。</target>
        </trans-unit>
        <trans-unit id="649991da5abd40f8b85d1656bc4a777e7eff8a60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;check&lt;/code&gt; package includes pattern checking functions useful for checking the types and structure of variables and an &lt;a href=&quot;#matchpatterns&quot;&gt;extensible library of patterns&lt;/a&gt; to specify which types you are expecting.</source>
          <target state="translated">&lt;code&gt;check&lt;/code&gt; パッケージには、変数との種類と構造確認に便利パターンのチェック機能が含まれてい&lt;a href=&quot;#matchpatterns&quot;&gt;たパターンの拡張可能なライブラリを&lt;/a&gt;使用すると、期待されているタイプを指定します。</target>
        </trans-unit>
        <trans-unit id="c20025be87cd004083251793aaf578fbf14abd94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chimp-test&lt;/code&gt; command will run all of the tests &lt;em&gt;once only&lt;/em&gt; and is good for testing that our suite passes, either as a manual step, or as part of a &lt;a href=&quot;#ci&quot;&gt;continuous integration&lt;/a&gt; process.</source>
          <target state="translated">&lt;code&gt;chimp-test&lt;/code&gt; コマンドは、全てのテストを実行します&lt;em&gt;一度だけ&lt;/em&gt;、私たちのスイートは、手動のステップとして、またはの一部として、渡すことをテストするための良い&lt;a href=&quot;#ci&quot;&gt;継続的インテグレーション&lt;/a&gt;プロセス。</target>
        </trans-unit>
        <trans-unit id="0c414fba55f12b2f37dd8193c89aaf75bd858a72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chimp-watch&lt;/code&gt; command will then run the test in a browser, and continue to re-run it as we change the test or the application. (Note that the test assumes we are running the app on port &lt;code&gt;3000&lt;/code&gt;).</source>
          <target state="translated">その後、 &lt;code&gt;chimp-watch&lt;/code&gt; コマンドはブラウザーでテストを実行し、テストまたはアプリケーションを変更するときに、テストを再実行し続けます。（テストでは、ポート &lt;code&gt;3000&lt;/code&gt; でアプリを実行していることを前提としています）。</target>
        </trans-unit>
        <trans-unit id="3d9c3a6c6c53efb4fbaf6614bb10cec10d9acea8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;component&lt;/code&gt; argument is the React component to include, which should be passed in with a helper.</source>
          <target state="translated">&lt;code&gt;component&lt;/code&gt; 引数はヘルパーで渡されるべきか、含むようにコンポーネント反応させています。</target>
        </trans-unit>
        <trans-unit id="b423c736a072ef8990b145a544ae078062f0d84f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;connection&lt;/code&gt; object the request came in on. See &lt;a href=&quot;#meteor_onconnection&quot;&gt;&lt;code&gt;Meteor.onConnection&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;connection&lt;/code&gt; オブジェクトは、要求が上に来ました。詳細については、&lt;a href=&quot;#meteor_onconnection&quot;&gt; &lt;code&gt;Meteor.onConnection&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ec9e7db73c437f025e26d37ecb522f73570bee85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cordovaCompatibilityVersions.*&lt;/code&gt; attributes can be read from the manifest file with &lt;code&gt;cordova-plugin-file&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cordovaCompatibilityVersions.*&lt;/code&gt; 属性が持つマニフェストファイルから読み込むことができ &lt;code&gt;cordova-plugin-file&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="47e3f54f4885264c768a38124d100596fda29c7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dynamic-import&lt;/code&gt; package provides an implementation of &lt;code&gt;Module.prototype.dynamicImport&lt;/code&gt;, an extension of the module runtime which powers the &lt;a href=&quot;https://github.com/tc39/proposal-dynamic-import&quot;&gt;dynamic &lt;code&gt;import(...)&lt;/code&gt;&lt;/a&gt; statement, an up-and-coming (currently stage 3 out of 4) addition to the ECMAScript standard.</source>
          <target state="translated">&lt;code&gt;dynamic-import&lt;/code&gt; パッケージは、実装提供 &lt;code&gt;Module.prototype.dynamicImport&lt;/code&gt; 、パワーモジュールのランタイムの拡張&lt;a href=&quot;https://github.com/tc39/proposal-dynamic-import&quot;&gt;ダイナミック &lt;code&gt;import(...)&lt;/code&gt; &lt;/a&gt;ステートメント、新進（4の現在のステージ3 OUT）に添加しECMAScript標準。</target>
        </trans-unit>
        <trans-unit id="7dff7e7da16368cdf28699bd824354b0c058dc04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecmascript&lt;/code&gt; package (which is installed into all new apps and packages by default, but can be removed), allows support for many ES2015 features. We recommend using it. You can read more about it in the &lt;a href=&quot;code-style#ecmascript&quot;&gt;Code Style&lt;/a&gt; article.</source>
          <target state="translated">&lt;code&gt;ecmascript&lt;/code&gt; （デフォルトでは、すべての新しいアプリケーションやパッケージにインストールされていますが、削除することができます）パッケージには、多くのES2015の機能をサポートすることができます。使用をお勧めします。詳細については、&lt;a href=&quot;code-style#ecmascript&quot;&gt;コードスタイルの&lt;/a&gt;記事を参照してください。</target>
        </trans-unit>
        <trans-unit id="dd3dd0ace8907b5e0479ac6313b096f0e060ae8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecmascript&lt;/code&gt; package is included in all new apps and packages by default, and compiles all files with the &lt;code&gt;.js&lt;/code&gt; file extension automatically. See the &lt;a href=&quot;https://docs.meteor.com/packages/ecmascript.html#Supported-ES2015-Features&quot;&gt;list of all ES2015 features supported by the ecmascript package&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ecmascript&lt;/code&gt; パッケージは、デフォルトでは、すべての新しいアプリケーションやパッケージに含まれており、持つすべてのファイルをコンパイルしている &lt;code&gt;.js&lt;/code&gt; 自動的にファイルの拡張子。&lt;a href=&quot;https://docs.meteor.com/packages/ecmascript.html#Supported-ES2015-Features&quot;&gt;ecmascriptパッケージでサポートされているすべてのES2015機能のリストを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="17cf20872264d949bdcef3d3c2033fc5760145bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecmascript&lt;/code&gt; package registers a compiler plugin that transpiles ECMAScript 2015+ to ECMAScript 5 (standard JS) in all &lt;code&gt;.js&lt;/code&gt; files. By default, this package is pre-installed for all new apps and packages.</source>
          <target state="translated">&lt;code&gt;ecmascript&lt;/code&gt; パッケージには、すべてではECMAScript 5（標準JS）にそのtranspilesのECMAScript 2015+コンパイラプラグインを登録する &lt;code&gt;.js&lt;/code&gt; ファイル。デフォルトでは、このパッケージはすべての新しいアプリとパッケージにプリインストールされています。</target>
        </trans-unit>
        <trans-unit id="3a8b3c8262fc2252136036f013c160d56dd5d188" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecmascript&lt;/code&gt; package uses &lt;a href=&quot;http://babeljs.io/&quot;&gt;Babel&lt;/a&gt; to compile ES2015 syntax to ES5 syntax. Many but not all ES2015 features can be simulated by Babel, and &lt;code&gt;ecmascript&lt;/code&gt; enables most of the features supported by Babel.</source>
          <target state="translated">&lt;code&gt;ecmascript&lt;/code&gt; パッケージには、使用しています&lt;a href=&quot;http://babeljs.io/&quot;&gt;バベルを&lt;/a&gt; ES5構文にES2015構文をコンパイルします。多くのすべてではありませんES2015の機能がバベルによってシミュレートすることができ、 &lt;code&gt;ecmascript&lt;/code&gt; バベルでサポートされる機能のほとんどを可能にします。</target>
        </trans-unit>
        <trans-unit id="5709c3ce0d4f5eef2bb3e6d0197894dd845160e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;email&lt;/code&gt; package allows sending email from a Meteor app. To use it, add the package to your project by running in your terminal:</source>
          <target state="translated">&lt;code&gt;email&lt;/code&gt; パッケージには、流星アプリから電子メールを送信することができます。これを使用するには、ターミナルで実行してパッケージをプロジェクトに追加します。</target>
        </trans-unit>
        <trans-unit id="75bc434fedd5db364cee84da82e3b7ea6a7fd722" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;equals&lt;/code&gt; method should define an &lt;a href=&quot;http://en.wikipedia.org/wiki/Equivalence_relation&quot;&gt;equivalence relation&lt;/a&gt;. It should have the following properties:</source>
          <target state="translated">&lt;code&gt;equals&lt;/code&gt; メソッドを定義する必要があり&lt;a href=&quot;http://en.wikipedia.org/wiki/Equivalence_relation&quot;&gt;同値関係を&lt;/a&gt;。次のプロパティが必要です。</target>
        </trans-unit>
        <trans-unit id="c74205a7f7f7a0987b134f5ba577095d5ea14713" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.error&lt;/code&gt; field is the first argument to the &lt;code&gt;Meteor.Error&lt;/code&gt; constructor, and we use it to uniquely name and namespace all the errors we use in the application. We then define the English text of those errors in &lt;code&gt;i18n/en.i18n.json&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;error.error&lt;/code&gt; のフィールドは、最初の引数である &lt;code&gt;Meteor.Error&lt;/code&gt; のコンストラクタ、我々は独自に、我々は、アプリケーションで使用するすべてのエラーを名前と名前空間にそれを使用しています。次に、これらのエラーの英語のテキストを &lt;code&gt;i18n/en.i18n.json&lt;/code&gt; に定義します。</target>
        </trans-unit>
        <trans-unit id="ca086329fccf9cd22eb4788c377fe3c33f7a9dbe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;id&lt;/code&gt; of the subscription this handle is for. When you run &lt;code&gt;Meteor.subscribe&lt;/code&gt; inside of &lt;code&gt;Tracker.autorun&lt;/code&gt;, the handles you get will always have the same &lt;code&gt;subscriptionId&lt;/code&gt; field. You can use this to deduplicate subscription handles if you are storing them in some data structure.</source>
          <target state="translated">このハンドルが対象とするサブスクリプションの &lt;code&gt;id&lt;/code&gt; 。 &lt;code&gt;Meteor.subscribe&lt;/code&gt; 内で &lt;code&gt;Tracker.autorun&lt;/code&gt; を実行すると、取得するハンドルは常に同じ &lt;code&gt;subscriptionId&lt;/code&gt; フィールドを持ちます。サブスクリプションハンドルをデータ構造に格納している場合、これを使用してサブスクリプションハンドルを重複排除できます。</target>
        </trans-unit>
        <trans-unit id="5533700215f55e478dcf036532d058d9ba5928f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;import(...)&lt;/code&gt; statement returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; which is resolved with the &lt;code&gt;exports&lt;/code&gt; of the module when it has been successfully fetched from the server and is ready to be used.</source>
          <target state="translated">&lt;code&gt;import(...)&lt;/code&gt; ステートメントが返す&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt;で解決された &lt;code&gt;exports&lt;/code&gt; が正常にサーバーからフェッチして使用する準備ができてきたとき、モジュールのを。</target>
        </trans-unit>
        <trans-unit id="f69950a9d9335d0328166b365b89658c24724adb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;import(...)&lt;/code&gt;&lt;code&gt;Promise&lt;/code&gt; is resolved with the &lt;code&gt;exports&lt;/code&gt; of the module. If it&amp;rsquo;s necessary to use the &amp;ldquo;default&amp;rdquo; export from a module, it will be available on the &lt;code&gt;default&lt;/code&gt; property of the resulting object. In the above examples, this means it will be available as &lt;code&gt;tool.default&lt;/code&gt;. It can be helpful to use parameter de-structuring to provide additional clarity:</source>
          <target state="translated">&lt;code&gt;import(...)&lt;/code&gt; &lt;code&gt;Promise&lt;/code&gt; して解決され &lt;code&gt;exports&lt;/code&gt; のモジュールの。モジュールから「デフォルト」のエクスポートを使用する必要がある場合は、結果のオブジェクトの &lt;code&gt;default&lt;/code&gt; プロパティで使用できます。上記の例では、これは &lt;code&gt;tool.default&lt;/code&gt; として利用できることを意味します。追加の明快さを提供するためにパラメータ分解を使用することは役に立ちます：</target>
        </trans-unit>
        <trans-unit id="49b9d90d524e7531884ed5070717dcfe9ed8dedb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jquery&lt;/code&gt; package adds the jQuery library to the client JavaScript bundle. It has no effect on the server.</source>
          <target state="translated">&lt;code&gt;jquery&lt;/code&gt; のパッケージには、クライアントのJavaScriptバンドルにjQueryライブラリを追加します。サーバーには影響しません。</target>
        </trans-unit>
        <trans-unit id="56ef08d8ffe8d750b112d8e3cda83e2c49782b88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;listArgs&lt;/code&gt; helper fetches the data that we&amp;rsquo;ve subscribed to above:</source>
          <target state="translated">&lt;code&gt;listArgs&lt;/code&gt; 我々はこれに加入したことをデータをフェッチヘルパー：</target>
        </trans-unit>
        <trans-unit id="d30242fb7d69b0d01aec1c035c65e0c64fb15cfe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;meteor node&lt;/code&gt; command calls the &lt;a href=&quot;https://nodejs.org&quot;&gt;&lt;code&gt;node&lt;/code&gt;&lt;/a&gt; version bundled with Meteor itself.</source>
          <target state="translated">&lt;code&gt;meteor node&lt;/code&gt; コマンドを呼び出し&lt;a href=&quot;https://nodejs.org&quot;&gt; &lt;code&gt;node&lt;/code&gt; &lt;/a&gt;流星自体にバンドルされたバージョンを。</target>
        </trans-unit>
        <trans-unit id="67aa668aa1e8b11cdf1da77e1cd0c84391e04842" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;meteor npm&lt;/code&gt; command calls the &lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;&lt;code&gt;npm&lt;/code&gt;&lt;/a&gt; version bundled with Meteor itself.</source>
          <target state="translated">&lt;code&gt;meteor npm&lt;/code&gt; コマンドを呼び出し&lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt; &lt;code&gt;npm&lt;/code&gt; &lt;/a&gt;流星自体にバンドルされたバージョンを。</target>
        </trans-unit>
        <trans-unit id="aff6c0d72c1aacb5b168bcc54dc23b3c04efe5df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;nosub&lt;/code&gt; message is sent to the client to indicate that the subscription has stopped.</source>
          <target state="translated">&lt;code&gt;nosub&lt;/code&gt; のメッセージは、サブスクリプションが停止したことを示すために、クライアントに送信されます。</target>
        </trans-unit>
        <trans-unit id="685b0c395254c54b684f6dba1e1b538a25426f19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;onReady&lt;/code&gt; callback is called with no arguments when the server &lt;a href=&quot;#publish_ready&quot;&gt;marks the subscription as ready&lt;/a&gt;. The &lt;code&gt;onStop&lt;/code&gt; callback is called with a &lt;a href=&quot;#meteor_error&quot;&gt;&lt;code&gt;Meteor.Error&lt;/code&gt;&lt;/a&gt; if the subscription fails or is terminated by the server. If the subscription is stopped by calling &lt;code&gt;stop&lt;/code&gt; on the subscription handle or inside the publication, &lt;code&gt;onStop&lt;/code&gt; is called with no arguments.</source>
          <target state="translated">&lt;code&gt;onReady&lt;/code&gt; コールバックは、サーバー引数なしで呼び出された&lt;a href=&quot;#publish_ready&quot;&gt;マークのサブスクリプション準備として&lt;/a&gt;。 &lt;code&gt;onStop&lt;/code&gt; コールバックを使用して呼び出され&lt;a href=&quot;#meteor_error&quot;&gt; &lt;code&gt;Meteor.Error&lt;/code&gt; &lt;/a&gt;サブスクリプションが失敗した場合や、サーバによって終了した場合。サブスクリプションハンドルまたはパブリケーション内で &lt;code&gt;stop&lt;/code&gt; を呼び出してサブスクリプションを停止すると、引数なしで &lt;code&gt;onStop&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="06063c608a0d91190bd33e44295416981f321ca6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;package.js&lt;/code&gt; file below is an example of how to use the packaging API. The rest of this section will explain the specific API commands in greater detail.</source>
          <target state="translated">以下の &lt;code&gt;package.js&lt;/code&gt; ファイルは、パッケージングAPIの使用例です。このセクションの残りの部分では、特定のAPIコマンドについて詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="23ddc8e0699779292ae53e0921717129af567080" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;package.js&lt;/code&gt; file is the main file in every Meteor package. This is a JavaScript file that defines the metadata, files loaded, architectures, npm packages, and Cordova packages for your Meteor package.</source>
          <target state="translated">&lt;code&gt;package.js&lt;/code&gt; ファイルには、すべての流星パッケージのメインファイルです。これは、Meteorパッケージのメタデータ、ロードされたファイル、アーキテクチャー、npmパッケージ、およびCordovaパッケージを定義するJavaScriptファイルです。</target>
        </trans-unit>
        <trans-unit id="248b78f21981a15968dce8d0503b944a0b658881" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;params&lt;/code&gt; are put in the URL or the request body, depending on the type of request. In the case of request with no bodies, like GET and HEAD, the parameters will always go in the URL. For a POST or other type of request, the parameters will be encoded into the body with a standard &lt;code&gt;x-www-form-urlencoded&lt;/code&gt; content type, unless the &lt;code&gt;content&lt;/code&gt; or &lt;code&gt;data&lt;/code&gt; option is used to specify a body, in which case the parameters will be appended to the URL instead.</source>
          <target state="translated">&lt;code&gt;params&lt;/code&gt; が、要求のタイプに応じて、URLまたはリクエストボディに入れています。GETやHEADのようにボディのないリクエストの場合、パラメーターは常にURLに含まれます。POSTまたはその他のタイプのリクエストの場合、 &lt;code&gt;content&lt;/code&gt; または &lt;code&gt;data&lt;/code&gt; オプションを使用して本文を指定しない限り、パラメーターは標準の &lt;code&gt;x-www-form-urlencoded&lt;/code&gt; コンテンツタイプで本文にエンコードされます。代わりにURLに追加されます。</target>
        </trans-unit>
        <trans-unit id="d3ce8bf2a2383be6737acd880628c392cd595ded" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;random&lt;/code&gt; package provides several functions for generating random numbers. It uses a cryptographically strong pseudorandom number generator when possible, but falls back to a weaker random number generator when cryptographically strong randomness is not available (on older browsers or on servers that don&amp;rsquo;t have enough entropy to seed the cryptographically strong generator).</source>
          <target state="translated">&lt;code&gt;random&lt;/code&gt; パッケージは、乱数を生成するためのいくつかの関数を提供します。可能な場合は暗号学的に強力な疑似乱数ジェネレータを使用しますが、暗号学的に強力なランダム性が利用できない場合は、より弱い乱数ジェネレータにフォールバックします（古いブラウザまたは暗号的に強力なジェネレータをシードするのに十分なエントロピーがないサーバー上）。</target>
        </trans-unit>
        <trans-unit id="fb3f59f9cd1616175104ad5ee272702a6b7aa74d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sink&lt;/code&gt; object may also expose additional properties depending on the environment. For example, on the server, &lt;code&gt;sink.request&lt;/code&gt; provides access to the current &lt;code&gt;request&lt;/code&gt; object, and &lt;code&gt;sink.arch&lt;/code&gt; identifies the target architecture of the pending HTTP response (e.g. &amp;ldquo;web.browser&amp;rdquo;).</source>
          <target state="translated">&lt;code&gt;sink&lt;/code&gt; オブジェクトは、環境に応じて、追加のプロパティを公開することがあります。たとえば、サーバー上で、 &lt;code&gt;sink.request&lt;/code&gt; は、現在のアクセス提供 &lt;code&gt;request&lt;/code&gt; オブジェクト、及び &lt;code&gt;sink.arch&lt;/code&gt; ペンディングHTTP応答（例えば、「web.browser」）のターゲット・アーキテクチャを特定します。</target>
        </trans-unit>
        <trans-unit id="6aca730cc311d99b56dad16da66c4fa82bcd1973" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;smtp://&lt;/code&gt; form is for mail servers which support encryption via &lt;code&gt;STARTTLS&lt;/code&gt; or those that do not use encryption at all and is most common for servers on port 587 and &lt;em&gt;sometimes&lt;/em&gt; port 25. On the other hand, the &lt;code&gt;smtps://&lt;/code&gt; form (the &lt;code&gt;s&lt;/code&gt; stands for &amp;ldquo;secure&amp;rdquo;) should be used if the server only supports TLS/SSL (and does not support connection upgrade with &lt;code&gt;STARTTLS&lt;/code&gt;) and is most common for servers on port 465.</source>
          <target state="translated">&lt;code&gt;smtp://&lt;/code&gt; フォームを介して支持暗号化メールサーバ用で &lt;code&gt;STARTTLS&lt;/code&gt; ポート587および上のサーバまたはすべての暗号化を使用しないものとされ、最も一般的な&lt;em&gt;、時には&lt;/em&gt;一方ポート25、 &lt;code&gt;smtps://&lt;/code&gt; フォーム（ &lt;code&gt;s&lt;/code&gt; が「安全」の略）サーバーのみTLS / SSLを（サポートし、接続はしてアップグレードをサポートしていない場合に使用すべきである &lt;code&gt;STARTTLS&lt;/code&gt; ）とポート465上のサーバのための最も一般的です。</target>
        </trans-unit>
        <trans-unit id="5f7c6c42397a628deabc6eaab3b3fd6c56bb09c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;startup&lt;/code&gt; callbacks are called in the same order as the calls to &lt;code&gt;Meteor.startup&lt;/code&gt; were made.</source>
          <target state="translated">&lt;code&gt;startup&lt;/code&gt; への呼び出しとコールバックは同じ順序で呼び出され &lt;code&gt;Meteor.startup&lt;/code&gt; が行われました。</target>
        </trans-unit>
        <trans-unit id="629e4c135033f354044ddb958337d95ca14c5b02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;this&lt;/code&gt; context inside every Meteor Method has some useful information about the current connection, and the most useful is &lt;a href=&quot;http://docs.meteor.com/#/full/method_userId&quot;&gt;&lt;code&gt;this.userId&lt;/code&gt;&lt;/a&gt;. This property is managed by the DDP login system, and is guaranteed by the framework itself to be secure following widely-used best practices.</source>
          <target state="translated">すべてのMeteorメソッド内の &lt;code&gt;this&lt;/code&gt; コンテキストには、現在の接続に関するいくつかの有用な情報があり、最も有用なのは&lt;a href=&quot;http://docs.meteor.com/#/full/method_userId&quot;&gt; &lt;code&gt;this.userId&lt;/code&gt; &lt;/a&gt;です。このプロパティはDDPログインシステムによって管理され、フレームワーク自体によって、広く使用されているベストプラクティスに従って安全であることが保証されています。</target>
        </trans-unit>
        <trans-unit id="5010655ccc962a72b2bb890e25818d687ab3c8b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;this&lt;/code&gt; context, which has information about the current DDP connection. For example, you can access the current user&amp;rsquo;s &lt;code&gt;_id&lt;/code&gt; with &lt;code&gt;this.userId&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 現在のDDP接続に関する情報を持っている状況、。たとえば、 &lt;code&gt;this.userId&lt;/code&gt; を使用して現在のユーザーの &lt;code&gt;_id&lt;/code&gt; にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="348b72e75d1bfbcc4619c7e7089246acca7f7bca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;underscore&lt;/code&gt; package defines the &lt;code&gt;_&lt;/code&gt; namespace on both the client and the server.</source>
          <target state="translated">&lt;code&gt;underscore&lt;/code&gt; パッケージには、定義 &lt;code&gt;_&lt;/code&gt; クライアントとサーバーの両方に名前空間を。</target>
        </trans-unit>
        <trans-unit id="108fa09909ea0db4cd0b31057151dfc73205dccb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;version&lt;/code&gt; attribute of &lt;code&gt;manifest.json&lt;/code&gt;, which reflects the version of only your JS bundle, is accessible from JS at &lt;code&gt;__meteor_runtime_config__.autoupdateVersionCordova&lt;/code&gt;.</source>
          <target state="translated">JSバンドルのバージョンのみを反映する &lt;code&gt;manifest.json&lt;/code&gt; の &lt;code&gt;version&lt;/code&gt; 属性には、JSから &lt;code&gt;__meteor_runtime_config__.autoupdateVersionCordova&lt;/code&gt; でアクセスできます。</target>
        </trans-unit>
        <trans-unit id="fd597517d0aef89433282b961f7f7b2f564b73c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;webapp&lt;/code&gt; package is what lets your Meteor app serve content to a web browser. It is included in the &lt;code&gt;meteor-base&lt;/code&gt; set of packages that is automatically added when you run &lt;code&gt;meteor create&lt;/code&gt;. You can easily build a Meteor app without it - for example if you wanted to make a command-line tool that still used the Meteor package system and DDP.</source>
          <target state="translated">&lt;code&gt;webapp&lt;/code&gt; パッケージには、あなたの流星のアプリがWebブラウザにコンテンツを提供することができますものです。これは、 &lt;code&gt;meteor create&lt;/code&gt; を実行すると自動的に追加される &lt;code&gt;meteor-base&lt;/code&gt; パッケージセットに含まれています。たとえば、MeteorパッケージシステムとDDPを引き続き使用するコマンドラインツールを作成する場合など、それなしでMeteorアプリを簡単に構築できます。</target>
        </trans-unit>
        <trans-unit id="aff1bfcf06bc990a1acd192431fddc86a77d7b31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;withTracker&lt;/code&gt; function now replaces the previous function &lt;code&gt;createContainer&lt;/code&gt;, however it remains as part of the package for backwards compatibility.</source>
          <target state="translated">&lt;code&gt;withTracker&lt;/code&gt; の機能は現在、前の関数の置き換え &lt;code&gt;createContainer&lt;/code&gt; をしかし、それは後方互換性のためのパッケージの一部として残っています。</target>
        </trans-unit>
        <trans-unit id="5d18fd722b156605aee23e2d51ab48e8026fb854" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{#each .. in}}&lt;/code&gt; block helper which repeats a block of HTML for each element in an array or cursor, or renders the contents of the &lt;code&gt;{{else}}&lt;/code&gt; block if no items exist.</source>
          <target state="translated">&lt;code&gt;{{#each .. in}}&lt;/code&gt; アレイまたはカーソルの各要素のためのHTMLのブロックを繰り返す、またはコンテンツレンダリングブロックヘルパー &lt;code&gt;{{else}}&lt;/code&gt; 商品が存在しない場合、ブロックを。</target>
        </trans-unit>
        <trans-unit id="40e6f9fd001ca29ba2c0959765d298fc1feba3fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{#each .. in}}&lt;/code&gt; helper is a convenient way to step over a list while retaining the outer data context.</source>
          <target state="translated">&lt;code&gt;{{#each .. in}}&lt;/code&gt; 外側のデータ・コンテキストを維持しながらヘルパーはリスト上のステップに便利な方法です。</target>
        </trans-unit>
        <trans-unit id="951988f2796603e0ca615d94cf5a8ae40d36b133" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{#if}}&lt;/code&gt; and &lt;code&gt;{{#unless}}&lt;/code&gt; helpers are fairly straightforward but invaluable for controlling the control flow of a template. Both operate by evaluating and checking their single argument for truthiness. In JS &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;''&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; are considered &amp;ldquo;falsy&amp;rdquo;, and all other values are &amp;ldquo;truthy&amp;rdquo;.</source>
          <target state="translated">&lt;code&gt;{{#if}}&lt;/code&gt; と &lt;code&gt;{{#unless}}&lt;/code&gt; ヘルパーは、テンプレートの制御フローを制御するための非常に簡単しかし貴重です。どちらも、真正性について単一の引数を評価およびチェックすることによって機能します。JS では、 &lt;code&gt;null&lt;/code&gt; 、 &lt;code&gt;undefined&lt;/code&gt; 、 &lt;code&gt;0&lt;/code&gt; 、 &lt;code&gt;''&lt;/code&gt; 、 &lt;code&gt;NaN&lt;/code&gt; 、および &lt;code&gt;false&lt;/code&gt; は「偽」と見なされ、他のすべての値は「真実」です。</target>
        </trans-unit>
        <trans-unit id="432be6064abd05ef0974fb6122780115d4027147" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{#let}}&lt;/code&gt; helper is useful to capture the output of a helper or document subproperty within a template. Think of it just like defining a variable using JavaScript &lt;code&gt;let&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{{#let}}&lt;/code&gt; ヘルパーは、テンプレート内ヘルパーまたは文書サブプロパティの出力をキャプチャするために有用です。JavaScript &lt;code&gt;let&lt;/code&gt; を使用して変数を定義するのと同じように考えてください。</target>
        </trans-unit>
        <trans-unit id="57e19d9fa3d174ce03bb09a59e268660ed187208" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;current computation&lt;/em&gt; (&lt;a href=&quot;#tracker_currentcomputation&quot;&gt;&lt;code&gt;Tracker.currentComputation&lt;/code&gt;&lt;/a&gt;) is the computation that is currently being run or rerun (computed), and the one that gains a dependency when a reactive data source is accessed. Data sources are responsible for tracking these dependencies using &lt;a href=&quot;#tracker_dependency&quot;&gt;&lt;code&gt;Tracker.Dependency&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="translated">&lt;em&gt;現在の計算&lt;/em&gt;（&lt;a href=&quot;#tracker_currentcomputation&quot;&gt; &lt;code&gt;Tracker.currentComputation&lt;/code&gt; は&lt;/a&gt;）現在実行されている計算または再実行（計算）、及びゲイン依存する反応データ・ソースにアクセスすることです。データソースは、&lt;a href=&quot;#tracker_dependency&quot;&gt; &lt;code&gt;Tracker.Dependency&lt;/code&gt; &lt;/a&gt;オブジェクトを使用してこれらの依存関係を追跡します。</target>
        </trans-unit>
        <trans-unit id="36e9cba0731478ef9a24a5659c52fb87f430f688" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;only&lt;/em&gt; times you should be passing any user ID as an argument are the following:</source>
          <target state="translated">&lt;em&gt;唯一&lt;/em&gt;あなたが引数として任意のユーザーIDを渡すべきである時間は以下のとおりであります：</target>
        </trans-unit>
        <trans-unit id="ee47cb84572091905bf3cf695a48504f47d43686" translate="yes" xml:space="preserve">
          <source>The APIs of the Meteor platform are available at the &lt;a href=&quot;https://docs.meteor.com&quot;&gt;docs site&lt;/a&gt;, and you can browse community packages on &lt;a href=&quot;https://atmospherejs.com&quot;&gt;atmosphere&lt;/a&gt;.</source>
          <target state="translated">MeteorプラットフォームのAPIは&lt;a href=&quot;https://docs.meteor.com&quot;&gt;docsサイト&lt;/a&gt;で入手でき、&lt;a href=&quot;https://atmospherejs.com&quot;&gt;atmosphereで&lt;/a&gt;コミュニティパッケージを閲覧できます。</target>
        </trans-unit>
        <trans-unit id="8a1e2ec9dc86b52fd744a37fd93a245876a08e0f" translate="yes" xml:space="preserve">
          <source>The Apache Cordova project maintains a set of &lt;a href=&quot;https://cordova.apache.org/docs/en/dev/guide/support/index.html#core-plugin-apis&quot;&gt;core plugins&lt;/a&gt; that provide access to various native device features such as the camera, contacts, or access to the file system. But anyone can write a Cordova plugin to do basically anything that can be done from native code, and many third-party plugins are available. You can &lt;a href=&quot;https://cordova.apache.org/plugins/&quot;&gt;search for plugins on the Cordova website&lt;/a&gt; or directly on &lt;a href=&quot;https://www.npmjs.com/search?q=ecosystem%3Acordova&quot;&gt;npm&lt;/a&gt;.</source>
          <target state="translated">Apache Cordovaプロジェクトは、カメラ、連絡先、ファイルシステムへのアクセスなど、さまざまなネイティブデバイス機能へのアクセスを提供する一連の&lt;a href=&quot;https://cordova.apache.org/docs/en/dev/guide/support/index.html#core-plugin-apis&quot;&gt;コアプラグイン&lt;/a&gt;を維持しています。しかし、誰でもCordovaプラグインを作成して、基本的にはネイティブコードから実行できるすべてのことを実行でき、多くのサードパーティプラグインを利用できます。&lt;a href=&quot;https://cordova.apache.org/plugins/&quot;&gt;プラグインは、Cordova Webサイト&lt;/a&gt;または&lt;a href=&quot;https://www.npmjs.com/search?q=ecosystem%3Acordova&quot;&gt;npmで&lt;/a&gt;直接検索できます。</target>
        </trans-unit>
        <trans-unit id="a0d870593e89d028d2a1392c4feacb18ac93722a" translate="yes" xml:space="preserve">
          <source>The Blaze UI library does not have support for server-side rendering, so it&amp;rsquo;s not possible to render your pages on the server if you use Blaze. However, the React UI library does. This means it is possible to render HTML on the server if you use React as your rendering framework.</source>
          <target state="translated">Blaze UIライブラリはサーバー側のレンダリングをサポートしていないため、Blazeを使用している場合、サーバーでページをレンダリングすることはできません。ただし、React UIライブラリにはあります。つまり、レンダリングフレームワークとしてReactを使用すると、サーバーでHTMLをレンダリングすることができます。</target>
        </trans-unit>
        <trans-unit id="4b7125cdc8a6c1fbdb7389e8cb4b1420970f893c" translate="yes" xml:space="preserve">
          <source>The CSS file will be automatically loaded into any app that uses your package.</source>
          <target state="translated">このCSSファイルは、あなたのパッケージを使用するすべてのアプリに自動的に読み込まれます。</target>
        </trans-unit>
        <trans-unit id="60d2375b52348d88de9d73704db5b25e9a5de633" translate="yes" xml:space="preserve">
          <source>The CSS selector to match, scoped to the template contents.</source>
          <target state="translated">テンプレートの内容にスコープされた、マッチするCSSセレクタ。</target>
        </trans-unit>
        <trans-unit id="a2caadf5248ad21df8b29c644ef4ca41a7cca080" translate="yes" xml:space="preserve">
          <source>The ECMAScript 2015 standard library has grown to include new APIs and data structures, some of which can be implemented (&amp;ldquo;polyfilled&amp;rdquo;) using JavaScript that runs in all engines and browsers today. Here are three new constructors that are guaranteed to be available when the &lt;code&gt;ecmascript&lt;/code&gt; package is installed:</source>
          <target state="translated">ECMAScript 2015標準ライブラリは、新しいAPIとデータ構造を含むように成長しました。その一部は、現在すべてのエンジンとブラウザーで実行されるJavaScriptを使用して実装（「ポリフィル」）できます。 &lt;code&gt;ecmascript&lt;/code&gt; パッケージのインストール時に使用できることが保証されている3つの新しいコンストラクターを次に示します。</target>
        </trans-unit>
        <trans-unit id="5176dbd6067707ebf2e564a7a6e32ea28b3ac27a" translate="yes" xml:space="preserve">
          <source>The HTML spec allows omitting some additional end tags, such as P and LI, but Spacebars doesn&amp;rsquo;t currently support this.</source>
          <target state="translated">HTMLの仕様は、PやLIなど、いくつかの追加の終了タグを省略することができますが、宇宙・天体バーには、現在この機能をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="dd982a7651c8a24ab8959f9743bdb11cf637028a" translate="yes" xml:space="preserve">
          <source>The ID of the document that has been removed.</source>
          <target state="translated">削除された文書のIDです。</target>
        </trans-unit>
        <trans-unit id="71da2be50954fcfb4db9e1f5c191df2c926698c5" translate="yes" xml:space="preserve">
          <source>The ID of the user to update.</source>
          <target state="translated">更新するユーザーのIDです。</target>
        </trans-unit>
        <trans-unit id="7be813706e2c284379f84a2e5f76a39023c8f3ac" translate="yes" xml:space="preserve">
          <source>The IP address of the client in dotted form (such as &lt;code&gt;127.0.0.1&lt;/code&gt;).</source>
          <target state="translated">ドット形式のクライアントのIPアドレス（ &lt;code&gt;127.0.0.1&lt;/code&gt; など）。</target>
        </trans-unit>
        <trans-unit id="a2869296ae0d1dd0e2b8e6637e01d12e05512d8f" translate="yes" xml:space="preserve">
          <source>The JSON configuration file must contain the name of the release track (&lt;code&gt;track&lt;/code&gt;), the release version (&lt;code&gt;version&lt;/code&gt;), various metadata, the packages specified by the release as mapped to versions (&lt;code&gt;packages&lt;/code&gt;), and the package &amp;amp; version of the Meteor command-line tool (&lt;code&gt;tool&lt;/code&gt;). Note that this means that forks of the meteor tool can be published as packages and people can use them by switching to a corresponding release. For more information, run &lt;code&gt;meteor help publish-release&lt;/code&gt;.</source>
          <target state="translated">JSON構成ファイルには、リリーストラックの名前（ &lt;code&gt;track&lt;/code&gt; ）、リリースバージョン（ &lt;code&gt;version&lt;/code&gt; ）、さまざまなメタデータ、バージョンにマッピングされたリリースによって指定された &lt;code&gt;packages&lt;/code&gt; （packages）、およびMeteorコマンドのパッケージとバージョンが含まれている必要があります。ラインツール（ &lt;code&gt;tool&lt;/code&gt; ）。これは、meteorツールのフォークをパッケージとして公開することができ、対応するリリースに切り替えることでそれらを使用できることを意味します。詳細については、 &lt;code&gt;meteor help publish-release&lt;/code&gt; を実行してください。</target>
        </trans-unit>
        <trans-unit id="16fae4e58587b4f662e36443fea8a7705d76af81" translate="yes" xml:space="preserve">
          <source>The JavaScript of this component is responsible for subscribing and fetching the data that&amp;rsquo;s used by the &lt;code&gt;Lists_show&lt;/code&gt; template itself:</source>
          <target state="translated">このコンポーネントのJavaScriptは、 &lt;code&gt;Lists_show&lt;/code&gt; テンプレート自体が使用するデータのサブスクライブとフェッチを担当します。</target>
        </trans-unit>
        <trans-unit id="896c78fd661960f4bb6e666fa9925e5acfde5022" translate="yes" xml:space="preserve">
          <source>The Meteor Accounts system builds on top of the &lt;code&gt;userId&lt;/code&gt; support in &lt;a href=&quot;#publish_userId&quot;&gt;&lt;code&gt;publish&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#method_userId&quot;&gt;&lt;code&gt;methods&lt;/code&gt;&lt;/a&gt;. The core packages add the concept of user documents stored in the database, and additional packages add &lt;a href=&quot;#accounts_passwords&quot;&gt;secure password authentication&lt;/a&gt;, &lt;a href=&quot;#meteor_loginwithexternalservice&quot;&gt;integration with third party login services&lt;/a&gt;, and a &lt;a href=&quot;../packages/accounts-ui&quot;&gt;pre-built user interface&lt;/a&gt;.</source>
          <target state="translated">Meteor Accountsシステムは、&lt;a href=&quot;#publish_userId&quot;&gt; &lt;code&gt;publish&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#method_userId&quot;&gt; &lt;code&gt;methods&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;userId&lt;/code&gt; サポートに基づいて構築されています。コアパッケージは、データベースに格納されているユーザードキュメントの概念を追加し、追加のパッケージは、&lt;a href=&quot;#accounts_passwords&quot;&gt;安全なパスワード認証&lt;/a&gt;、&lt;a href=&quot;#meteor_loginwithexternalservice&quot;&gt;サードパーティのログインサービスとの統合&lt;/a&gt;、および&lt;a href=&quot;../packages/accounts-ui&quot;&gt;事前に作成されたユーザーインターフェイスを&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="bd0182c35a86a0426613c6baf254b37b7d849428" translate="yes" xml:space="preserve">
          <source>The Meteor build system is the actual command line tool that you get when you install Meteor. You run it by typing the &lt;code&gt;meteor&lt;/code&gt; command in your terminal, possibly followed by a set of arguments. Read the &lt;a href=&quot;http://docs.meteor.com/#/full/commandline&quot;&gt;docs about the command line tool&lt;/a&gt; or type &lt;code&gt;meteor help&lt;/code&gt; in your terminal to learn about all of the commands.</source>
          <target state="translated">Meteorビルドシステムは、Meteorのインストール時に取得する実際のコマンドラインツールです。端末で &lt;code&gt;meteor&lt;/code&gt; コマンドを入力して実行し、その後に引数のセットが続く場合があります。&lt;a href=&quot;http://docs.meteor.com/#/full/commandline&quot;&gt;コマンドラインツールに関するドキュメント&lt;/a&gt;を読むか、ターミナルで &lt;code&gt;meteor help&lt;/code&gt; して、すべてのコマンドについて学習します。</target>
        </trans-unit>
        <trans-unit id="9ed6998a9b60024706c64d6971252a8a138a0b20" translate="yes" xml:space="preserve">
          <source>The Meteor build tool is what compiles, runs, deploys, and publishes all of your Meteor apps and packages. It&amp;rsquo;s Meteor&amp;rsquo;s built-in solution to the problems also solved by tools like Grunt, Gulp, Webpack, Browserify, Nodemon, and many others, and uses many popular Node.js tools like Babel and UglifyJS internally to enable a seamless experience.</source>
          <target state="translated">Meteorビルドツールは、Meteorのすべてのアプリとパッケージをコンパイル、実行、デプロイ、公開するツールです。これは、Grunt、Gulp、Webpack、Browserify、Nodemonなどのツールによって解決される問題に対するMeteorの組み込みソリューションであり、BabelやUglifyJSなどの多くの一般的なNode.jsツールを使用してシームレスなエクスペリエンスを実現します。</target>
        </trans-unit>
        <trans-unit id="0c3942dc6449d48ea19d6d829b64b40c1f044cde" translate="yes" xml:space="preserve">
          <source>The Meteor client constructs a DDP message to send to the server. This includes the Method name, arguments, and an automatically generated Method ID that represents this particular Method invocation.</source>
          <target state="translated">Meteor クライアントは、サーバに送信するための DDP メッセージを構築します。これには、メソッド名、引数、およびこの特定のメソッド呼び出しを表す自動生成されたメソッド ID が含まれます。</target>
        </trans-unit>
        <trans-unit id="772414e93dcd743e1995ad040a68593ac8c97547" translate="yes" xml:space="preserve">
          <source>The Meteor core API includes an alternative to Methods for manipulating data from the client. Instead of explicitly defining Methods with specific arguments, you can instead call &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, and &lt;code&gt;remove&lt;/code&gt; directly from the client and specify security rules with &lt;a href=&quot;http://docs.meteor.com/#/full/allow&quot;&gt;&lt;code&gt;allow&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://docs.meteor.com/#/full/deny&quot;&gt;&lt;code&gt;deny&lt;/code&gt;&lt;/a&gt;. In the Meteor Guide, we are taking a strong position that this feature should be avoided and Methods used instead. Read more about the problems with allow/deny in the &lt;a href=&quot;security#allow-deny&quot;&gt;Security article&lt;/a&gt;.</source>
          <target state="translated">MeteorコアAPIには、クライアントからデータを操作するためのメソッドの代替手段が含まれています。特定の引数でメソッドを明示的に定義する代わりに、 &lt;code&gt;insert&lt;/code&gt; 、 &lt;code&gt;update&lt;/code&gt; 、および &lt;code&gt;remove&lt;/code&gt; をクライアントから直接呼び出し、&lt;a href=&quot;http://docs.meteor.com/#/full/allow&quot;&gt; &lt;code&gt;allow&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;http://docs.meteor.com/#/full/deny&quot;&gt; &lt;code&gt;deny&lt;/code&gt; で&lt;/a&gt;セキュリティルールを指定できます。Meteor Guideでは、この機能を回避し、代わりにメソッドを使用するべきだという強い立場を取っています。許可/拒否の問題の詳細については、&lt;a href=&quot;security#allow-deny&quot;&gt;セキュリティの記事&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="9f2a7f5fade585b5ec9cf23d72e35fb42ed6eebf" translate="yes" xml:space="preserve">
          <source>The Meteor server stores passwords using the &lt;a href=&quot;http://en.wikipedia.org/wiki/Bcrypt&quot;&gt;bcrypt&lt;/a&gt; algorithm. This helps protect against embarrassing password leaks if the server&amp;rsquo;s database is compromised.</source>
          <target state="translated">Meteorサーバーは、&lt;a href=&quot;http://en.wikipedia.org/wiki/Bcrypt&quot;&gt;bcrypt&lt;/a&gt;アルゴリズムを使用してパスワードを保存します。これは、サーバーのデータベースが危険にさらされた場合に、厄介なパスワードリークから保護するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="28cfb47bd98dc99b089b399b09ea9dbbb669e91f" translate="yes" xml:space="preserve">
          <source>The Meteor user object of the user which just logged out.</source>
          <target state="translated">ちょうどログアウトしたユーザのMeteorユーザオブジェクト。</target>
        </trans-unit>
        <trans-unit id="fbc3037dc5cc9631ba635a73341cae811bc345e3" translate="yes" xml:space="preserve">
          <source>The Meteor.users collection</source>
          <target state="translated">Meteor.usersコレクション</target>
        </trans-unit>
        <trans-unit id="8476c53edf67af47f0940d90ac62a022739b4a45" translate="yes" xml:space="preserve">
          <source>The OAuth login service packages populate &lt;code&gt;profile.name&lt;/code&gt;. We don&amp;rsquo;t recommend using this but, if you plan to, make sure to deny client-side writes to &lt;code&gt;profile&lt;/code&gt;. See the section about the &lt;a href=&quot;#dont-use-profile&quot;&gt;&lt;code&gt;profile&lt;/code&gt; field on users&lt;/a&gt;.</source>
          <target state="translated">OAuthログインサービスパッケージは、 &lt;code&gt;profile.name&lt;/code&gt; に入力します。これを使用することはお勧めしませんが、予定している場合は、クライアント側の &lt;code&gt;profile&lt;/code&gt; への書き込みを必ず拒否してください。&lt;a href=&quot;#dont-use-profile&quot;&gt;ユーザー&lt;/a&gt;の &lt;code&gt;profile&lt;/code&gt; フィールドに関するセクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="27a9526d01d31d63df8dc685846e968574c8a7dd" translate="yes" xml:space="preserve">
          <source>The URL of another Meteor application.</source>
          <target state="translated">別のMeteorアプリケーションのURLです。</target>
        </trans-unit>
        <trans-unit id="6f2102292919866718ad50a3acbcee97c59c4026" translate="yes" xml:space="preserve">
          <source>The URL to retrieve.</source>
          <target state="translated">取得するURLです。</target>
        </trans-unit>
        <trans-unit id="a64bf122abe1d10cd0e701c4cd4d818e2d9c1879" translate="yes" xml:space="preserve">
          <source>The URL to which the request should be sent.</source>
          <target state="translated">リクエストを送信するURL。</target>
        </trans-unit>
        <trans-unit id="56d822254ab772c06ebd2fd3c858ebf94a0e9989" translate="yes" xml:space="preserve">
          <source>The View corresponding to the current template helper, event handler, callback, or autorun. If there isn't one, &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">現在のテンプレートヘルパー、イベントハンドラー、コールバック、または自動実行に対応するビュー。ない場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="26c9c1b1b044e6756fecbd38c1acab1d71c26389" translate="yes" xml:space="preserve">
          <source>The Windows installer supports Windows 7, Windows 8.1, Windows Server</source>
          <target state="translated">Windowsインストーラは、Windows 7、Windows 8.1、Windows Serverをサポートしています。</target>
        </trans-unit>
        <trans-unit id="c64291755dfda03d5c11847e2b97871a861bda67" translate="yes" xml:space="preserve">
          <source>The XML you want to include</source>
          <target state="translated">インクルードしたいXML</target>
        </trans-unit>
        <trans-unit id="79575e6b77ee45e1605aec94bfac3aef87c607d8" translate="yes" xml:space="preserve">
          <source>The above Method is great because you can have the flexibility of having some optional fields and only passing the ones you want to change. In particular, what makes it possible for this Method is that the security considerations of setting one&amp;rsquo;s full name and date of birth are the same - we don&amp;rsquo;t have to do different security checks for different fields being set. Note that it&amp;rsquo;s very important that the &lt;code&gt;$set&lt;/code&gt; query on MongoDB is generated on the server - we should never take MongoDB operators as-is from the client, since they are hard to validate and could result in unexpected side effects.</source>
          <target state="translated">上記の方法は、オプションのフィールドをいくつか用意し、変更したいフィールドのみを渡すという柔軟性を備えているため、優れています。特に、このメソッドを可能にするのは、氏名と生年月日を設定する際のセキュリティに関する考慮事項が同じであることです。設定されているフィールドごとに異なるセキュリティチェックを行う必要はありません。MongoDBの &lt;code&gt;$set&lt;/code&gt; クエリがサーバー上で生成されることが非常に重要であることに注意してください。MongoDBオペレーターは、検証が困難で予期しない副作用が発生する可能性があるため、そのままクライアントから取得することはできません。</target>
        </trans-unit>
        <trans-unit id="cb437ccdc6b45a78a5085edffe767a9c98bac6da" translate="yes" xml:space="preserve">
          <source>The above approach will only work for static redirects. However, sometimes you need to load some data to figure out where to redirect to. In this case you&amp;rsquo;ll need to render part of the component hierarchy to subscribe to the data you need. For example, in the Todos example app, we want to make the root (&lt;code&gt;/&lt;/code&gt;) route redirect to the first known list. To achieve this, we need to render a special &lt;code&gt;App_rootRedirector&lt;/code&gt; route:</source>
          <target state="translated">上記のアプローチは、静的リダイレクトに対してのみ機能します。ただし、リダイレクト先を特定するためにデータをロードする必要がある場合があります。この場合、必要なデータをサブスクライブするには、コンポーネント階層の一部をレンダリングする必要があります。たとえば、Todosサンプルアプリでは、ルート（ &lt;code&gt;/&lt;/code&gt; ）ルートを最初の既知のリストにリダイレクトする必要があります。これを実現するには、特別な &lt;code&gt;App_rootRedirector&lt;/code&gt; ルートをレンダリングする必要があります。</target>
        </trans-unit>
        <trans-unit id="bfad329861bd98d88106bb84cc8f2f7f65837040" translate="yes" xml:space="preserve">
          <source>The above code snippet is equivalent to the code below, which specifies all of the version numbers individually:</source>
          <target state="translated">上記のコードスニペットは、すべてのバージョン番号を個別に指定する以下のコードに相当します。</target>
        </trans-unit>
        <trans-unit id="466d4f6004ff5de137195f0531fa0eda84ec3ecf" translate="yes" xml:space="preserve">
          <source>The above pattern will match certain URLs. You may notice that one segment of the URL is prefixed by &lt;code&gt;:&lt;/code&gt; - this means that it is a &lt;em&gt;url parameter&lt;/em&gt;, and will match any string that is present in that segment of the path. Flow Router will make that part of the URL available on the &lt;code&gt;params&lt;/code&gt; property of the current route.</source>
          <target state="translated">上記のパターンは特定のURLに一致します。URLの1つのセグメントの前に &lt;code&gt;:&lt;/code&gt; が付いていることに気付くかもしれません。これは、それが&lt;em&gt;urlパラメータ&lt;/em&gt;であり、パスのそのセグメントに存在するすべての文字列と一致することを意味します。Flow Routerは、URLのその部分を現在のルートの &lt;code&gt;params&lt;/code&gt; プロパティで利用できるようにします。</target>
        </trans-unit>
        <trans-unit id="6dc89bafb35f98d9c1b284e5384f0fe9a6c6947e" translate="yes" xml:space="preserve">
          <source>The actual files for a given version of an Atmosphere package are stored in your local &lt;code&gt;~/.meteor/packages&lt;/code&gt; directory.</source>
          <target state="translated">Atmosphereパッケージの特定のバージョンの実際のファイルは、ローカルの &lt;code&gt;~/.meteor/packages&lt;/code&gt; ディレクトリに保存されます。</target>
        </trans-unit>
        <trans-unit id="99efcfc477dfd202bf0863401bee84cc1b5a57ca" translate="yes" xml:space="preserve">
          <source>The advantage of a &lt;code&gt;ReactiveDict&lt;/code&gt; is you can access each property individually (&lt;code&gt;WindowSize.get('width')&lt;/code&gt;), and the dict will diff the field and track changes on it individually (so your template will re-render less often for instance).</source>
          <target state="translated">&lt;code&gt;ReactiveDict&lt;/code&gt; の利点は、各プロパティに個別にアクセスできること（ &lt;code&gt;WindowSize.get('width')&lt;/code&gt; ）、およびdictがフィールドを比較し、その変更を個別に追跡することです（たとえば、テンプレートが再レンダリングされる頻度が低くなります）。</target>
        </trans-unit>
        <trans-unit id="735022e06f9cbcc8bc7022957bf5278567f9761f" translate="yes" xml:space="preserve">
          <source>The advantage of a bulk operation is that it only requires a single round trip to MongoDB for the write, which usually means it is a &lt;em&gt;lot&lt;/em&gt; faster. The downside is that if your migration is complex (which it usually is if you can&amp;rsquo;t just do an &lt;code&gt;.update(.., .., {multi: true})&lt;/code&gt;), it can take a significant amount of time to prepare the bulk update.</source>
          <target state="translated">一括操作の利点は、書き込みのためにMongoDBへの1回のラウンドトリップのみを必要とすることです。これは通常、&lt;em&gt;はるかに&lt;/em&gt;高速であることを意味します。欠点は、移行が複雑な場合（通常、 &lt;code&gt;.update(.., .., {multi: true})&lt;/code&gt; 実行できない場合）、準備にかなりの時間がかかる可能性があることです一括更新。</target>
        </trans-unit>
        <trans-unit id="b41fa29cf2394497f8ecf0c8f8d7b3d55f132222" translate="yes" xml:space="preserve">
          <source>The advantage of running our acceptance test suite pointed at an app that runs in full app test mode is that all of the &lt;a href=&quot;#creating-integration-test-data&quot;&gt;data generating methods&lt;/a&gt; that we&amp;rsquo;ve created remain available. Otherwise the &lt;code&gt;acceptance-test-driver&lt;/code&gt; does nothing.</source>
          <target state="translated">フルアプリテストモードで実行されるアプリをポイントした受け入れテストスイートを実行する利点は、&lt;a href=&quot;#creating-integration-test-data&quot;&gt;作成&lt;/a&gt;したすべてのデータ生成メソッドが引き続き利用できることです。それ以外の場合、 &lt;code&gt;acceptance-test-driver&lt;/code&gt; は何もしません。</target>
        </trans-unit>
        <trans-unit id="f75ceab42894aed4b40dab12aeb1654d82b99873" translate="yes" xml:space="preserve">
          <source>The amount of foresight you bake into your schema design will depend on your app&amp;rsquo;s individual constraints, and will need to be a judgement call on your part.</source>
          <target state="translated">スキーマ設計に焼き入れる先見の明の量は、アプリの個々の制約に依存するため、ユーザー側で判断する必要があります。</target>
        </trans-unit>
        <trans-unit id="917a6e6c95af21315a342385f340790e5dbe696b" translate="yes" xml:space="preserve">
          <source>The analytics package hooks into Flow Router (see the &lt;a href=&quot;routing&quot;&gt;routing article&lt;/a&gt; for more) and records all of the page events for you.</source>
          <target state="translated">分析パッケージはFlow Routerにフックし（詳細については&lt;a href=&quot;routing&quot;&gt;ルーティングの記事&lt;/a&gt;を参照）、すべてのページイベントを記録します。</target>
        </trans-unit>
        <trans-unit id="9ead835d6621c4694bc551de3b9a3fe58e8906c8" translate="yes" xml:space="preserve">
          <source>The application cache allows the application to be loaded even when the browser doesn&amp;rsquo;t have an Internet connection, and so enables using the app offline.</source>
          <target state="translated">アプリケーションキャッシュを使用すると、ブラウザーがインターネットに接続していない場合でもアプリケーションを読み込むことができるため、アプリをオフラインで使用できます。</target>
        </trans-unit>
        <trans-unit id="04a1a1290d8eae6c9de3ee266f9ff663701f1338" translate="yes" xml:space="preserve">
          <source>The aptly named &lt;code&gt;blaze-html-templates&lt;/code&gt; package that comes with every new Meteor app by default compiles your &lt;code&gt;.html&lt;/code&gt; files written using &lt;a href=&quot;http://blazejs.org/api/spacebars.html&quot;&gt;Spacebars&lt;/a&gt; into Blaze-compatible JavaScript code. You can also add &lt;code&gt;blaze-html-templates&lt;/code&gt; to any of your packages to compile template files located in the package.</source>
          <target state="translated">すべての新しいMeteorアプリにデフォルトで付属している適切に名前 &lt;code&gt;blaze-html-templates&lt;/code&gt; 付けられたblaze-html-templatesパッケージは、&lt;a href=&quot;http://blazejs.org/api/spacebars.html&quot;&gt;スペースバー&lt;/a&gt;を使用して記述された &lt;code&gt;.html&lt;/code&gt; ファイルをBlaze互換のJavaScriptコードにコンパイルします。また、 &lt;code&gt;blaze-html-templates&lt;/code&gt; を任意のパッケージに追加して、パッケージにあるテンプレートファイルをコンパイルすることもできます。</target>
        </trans-unit>
        <trans-unit id="378952f0189a81fedc0741d76c3e99d79a1e9e13" translate="yes" xml:space="preserve">
          <source>The argument is typically a Meteor cursor (the result of &lt;code&gt;collection.find()&lt;/code&gt;, for example), but it may also be a plain JavaScript array, &lt;code&gt;null&lt;/code&gt;, or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">引数は通常、Meteorカーソル（たとえば、 &lt;code&gt;collection.find()&lt;/code&gt; の結果）ですが、プレーンなJavaScript配列、 &lt;code&gt;null&lt;/code&gt; 、または &lt;code&gt;undefined&lt;/code&gt; の場合もあります。</target>
        </trans-unit>
        <trans-unit id="d77aee2e87699b6eaa98b53d0d180a23f17a1dd1" translate="yes" xml:space="preserve">
          <source>The arguments to the publication, which can be passed in when calling &lt;code&gt;Meteor.subscribe&lt;/code&gt;.</source>
          <target state="translated">パブリケーションへの引数 &lt;code&gt;Meteor.subscribe&lt;/code&gt; 呼び出すときに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="9e23e8e89c294bdac4801e34e624b2364ad13030" translate="yes" xml:space="preserve">
          <source>The available callbacks are:</source>
          <target state="translated">利用可能なコールバックは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="e0333a3e94b3b1df990028a4ef4fe4675fc5be85" translate="yes" xml:space="preserve">
          <source>The basic Accounts system is in the &lt;code&gt;accounts-base&lt;/code&gt; package, but applications typically include this automatically by adding one of the login provider packages: &lt;code&gt;accounts-password&lt;/code&gt;, &lt;code&gt;accounts-facebook&lt;/code&gt;, &lt;code&gt;accounts-github&lt;/code&gt;, &lt;code&gt;accounts-google&lt;/code&gt;, &lt;code&gt;accounts-meetup&lt;/code&gt;, &lt;code&gt;accounts-twitter&lt;/code&gt;, or &lt;code&gt;accounts-weibo&lt;/code&gt;.</source>
          <target state="translated">基本的なアカウントのシステムがである &lt;code&gt;accounts-base&lt;/code&gt; パッケージが、アプリケーションは、通常のログインプロバイダパッケージの一つ追加することによって、これを自動的に含まれます： &lt;code&gt;accounts-password&lt;/code&gt; 、 &lt;code&gt;accounts-facebook&lt;/code&gt; 、 &lt;code&gt;accounts-github&lt;/code&gt; 、 &lt;code&gt;accounts-google&lt;/code&gt; 、 &lt;code&gt;accounts-meetup&lt;/code&gt; 、 &lt;code&gt;accounts-twitter&lt;/code&gt; 、または &lt;code&gt;accounts-weibo&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="db89f434d35c86142d8a42b1b42997d85c19a412" translate="yes" xml:space="preserve">
          <source>The basic purpose of a router is to match certain URLs and perform actions as a result. This all happens on the client side, in the app user&amp;rsquo;s browser or mobile app container. Let&amp;rsquo;s take an example from the Todos example app:</source>
          <target state="translated">ルーターの基本的な目的は、特定のURLを照合し、結果としてアクションを実行することです。これはすべて、アプリユーザーのブラウザーまたはモバイルアプリコンテナー内のクライアント側で行われます。Todosサンプルアプリから例を見てみましょう：</target>
        </trans-unit>
        <trans-unit id="1d73760033c1a6738267e7589ae09097a86ac374" translate="yes" xml:space="preserve">
          <source>The basic way to use a CDN is to upload your files to the CDN and change your URLs to point at the CDN (for instance if your Meteor app is at &lt;code&gt;http://myapp.com&lt;/code&gt;, changing your image URL from &lt;code&gt;&amp;lt;img src=&quot;http://myapp.com/cats.gif&quot;&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;img src=&quot;http://mycdn.com/cats.gif&quot;&amp;gt;&lt;/code&gt;). However, this would be hard to do with Meteor, since the largest file &amp;ndash; your Javascript bundle &amp;ndash; changes every time you edit your app.</source>
          <target state="translated">CDNを使用する基本的な方法は、ファイルをCDNにアップロードし、URLをCDNを指すように変更することです（たとえば、Meteorアプリが &lt;code&gt;http://myapp.com&lt;/code&gt; にある場合、画像のURLを &lt;code&gt;&amp;lt;img src=&quot;http://myapp.com/cats.gif&quot;&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;img src=&quot;http://mycdn.com/cats.gif&quot;&amp;gt;&lt;/code&gt; ）ただし、アプリを編集するたびに最大のファイル（Javascriptバンドル）が変更されるため、これをMeteorで行うのは困難です。</target>
        </trans-unit>
        <trans-unit id="29f995b6b0f1a832c48648ecfe840224eda5a62e" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;remove&lt;/code&gt; differs depending on whether it is called by trusted or untrusted code. Trusted code includes server code and method code. Untrusted code includes client-side code such as event handlers and a browser&amp;rsquo;s JavaScript console.</source>
          <target state="translated">&lt;code&gt;remove&lt;/code&gt; の動作は、信頼されたコードと信頼されていないコードのどちらで呼び出されるかによって異なります。信頼できるコードには、サーバーコードとメソッドコードが含まれます。信頼できないコードには、イベントハンドラーやブラウザーのJavaScriptコンソールなどのクライアント側コードが含まれます。</target>
        </trans-unit>
        <trans-unit id="b540c601572a90a3ef7beb0c14f57bd732901e8e" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;update&lt;/code&gt; differs depending on whether it is called by trusted or untrusted code. Trusted code includes server code and method code. Untrusted code includes client-side code such as event handlers and a browser&amp;rsquo;s JavaScript console.</source>
          <target state="translated">&lt;code&gt;update&lt;/code&gt; の動作は、信頼されたコードと信頼されていないコードのどちらで呼び出されたかによって異なります。信頼できるコードには、サーバーコードとメソッドコードが含まれます。信頼できないコードには、イベントハンドラーやブラウザーのJavaScriptコンソールなどのクライアント側コードが含まれます。</target>
        </trans-unit>
        <trans-unit id="6cf6d1d0942b648d69e4f2334c33febbb5409993" translate="yes" xml:space="preserve">
          <source>The behavior of a template tag is affected by where it is located in the HTML, and not all tags are allowed at all locations.</source>
          <target state="translated">テンプレートタグの動作はHTMLのどこにあるかによって影響を受け、すべてのタグがすべての場所で許可されているわけではありません。</target>
        </trans-unit>
        <trans-unit id="fe2a22351167c169483478713aad4321355fb500" translate="yes" xml:space="preserve">
          <source>The best Sass build plugin for Meteor is &lt;a href=&quot;https://atmospherejs.com/fourseven/scss&quot;&gt;&lt;code&gt;fourseven:scss&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Meteorに最適なSassビルドプラグインは&lt;a href=&quot;https://atmospherejs.com/fourseven/scss&quot;&gt; &lt;code&gt;fourseven:scss&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="d21b94fc2f7728c9c4647013748274a56eeb6353" translate="yes" xml:space="preserve">
          <source>The best way to make your app secure is to understand all of the possible inputs that could come from an untrusted source, and make sure that they are all handled correctly. The easiest way to understand what inputs can come from the client is to restrict them to as small of a space as possible. This means your Methods should all be specific actions, and shouldn&amp;rsquo;t take a multitude of options that change the behavior in significant ways. The end goal is that you can easily look at each Method in your app and validate or test that it is secure. Here&amp;rsquo;s a secure example Method from the Todos example app:</source>
          <target state="translated">アプリを安全にする最良の方法は、信頼できないソースからの可能性のあるすべての入力を理解し、それらがすべて正しく処理されることを確認することです。クライアントからの入力を理解する最も簡単な方法は、入力をできるだけ小さなスペースに制限することです。つまり、メソッドはすべて特定のアクションである必要があり、動作を大幅に変更する多数のオプションを使用しないでください。最終的な目標は、アプリの各メソッドを簡単に確認し、安全であることを検証またはテストできることです。 Todosサンプルアプリの安全なサンプルメソッドは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="315bee23c0ee544bbb296894b6d09e4a6f9b08ad" translate="yes" xml:space="preserve">
          <source>The best way to make your build plugin fast is to use caching anywhere you can - the best way to save time is to do less work! Check out the &lt;a href=&quot;https://docs.meteor.com/api/packagejs.html#build-plugin-caching&quot;&gt;documentation about CachingCompiler&lt;/a&gt; to learn more. It&amp;rsquo;s used in all of the above examples, so you can see how to use it by looking at them.</source>
          <target state="translated">ビルドプラグインを高速化する最善の方法は、可能な限りキャッシュを使用することです。時間を節約する最善の方法は、作業量を減らすことです。詳細&lt;a href=&quot;https://docs.meteor.com/api/packagejs.html#build-plugin-caching&quot;&gt;については、CachingCompilerに関するドキュメントをご覧&lt;/a&gt;ください。上記のすべての例で使用されているため、使用方法を確認することができます。</target>
        </trans-unit>
        <trans-unit id="8cb953f8026acbebd8fe0df9cc112316bc284e8a" translate="yes" xml:space="preserve">
          <source>The best way to store your custom data onto the &lt;code&gt;Meteor.users&lt;/code&gt; collection is to add a new uniquely-named top-level field on the user document. For example, if you wanted to add a mailing address to a user, you could do it like this:</source>
          <target state="translated">カスタムデータを &lt;code&gt;Meteor.users&lt;/code&gt; コレクションに保存する最良の方法は、一意に名前が付けられた新しい最上位フィールドをユーザードキュメントに追加することです。たとえば、ユーザーに郵送先住所を追加する場合は、次のようにします。</target>
        </trans-unit>
        <trans-unit id="4bb7afad9811d34a0799f9eec42c9d511a448357" translate="yes" xml:space="preserve">
          <source>The body of the HTTP response as a string.</source>
          <target state="translated">HTTP レスポンスの本文を文字列で指定します。</target>
        </trans-unit>
        <trans-unit id="520d93bbeeff05e26e6e839c0804d7f12bb8dd44" translate="yes" xml:space="preserve">
          <source>The browser on iOS is Safari, which is based on the open source WebKit project, but tends to be somewhat slow in enabling new features. Because they use the same underlying framework, the features available to a web view match the features supported by Safari on the iOS release you&amp;rsquo;re running on.</source>
          <target state="translated">iOSのブラウザーはSafariです。これはオープンソースのWebKitプロジェクトに基づいていますが、新しい機能を有効にするのに多少時間がかかる傾向があります。同じ基本フレームワークを使用しているため、Webビューで使用できる機能は、実行中のiOSリリースのSafariでサポートされている機能と一致します。</target>
        </trans-unit>
        <trans-unit id="d8708bfa23fa52e22c67b7fb716a9c92a7fff5da" translate="yes" xml:space="preserve">
          <source>The callback function</source>
          <target state="translated">コールバック関数</target>
        </trans-unit>
        <trans-unit id="c2dcaabbaa2752b243256533c88d4a7087ea2035" translate="yes" xml:space="preserve">
          <source>The callback is called with a single argument, the server-side &lt;code&gt;connection&lt;/code&gt; representing the connection from the client. This object contains the following fields:</source>
          <target state="translated">コールバックは単一の引数で呼び出され、サーバー側の &lt;code&gt;connection&lt;/code&gt; はクライアントからの接続を表します。このオブジェクトには次のフィールドが含まれています。</target>
        </trans-unit>
        <trans-unit id="c8b1c1450b6dfa3f5d9ee8ad7aade6a7f06f3c2f" translate="yes" xml:space="preserve">
          <source>The callback receives a &lt;code&gt;sink&lt;/code&gt; object, which is an instance of either &lt;code&gt;ClientSink&lt;/code&gt; or &lt;code&gt;ServerSink&lt;/code&gt; depending on the environment. Both types of &lt;code&gt;sink&lt;/code&gt; have the same methods, though the server version accepts only HTML strings as content, whereas the client version also accepts DOM nodes.</source>
          <target state="translated">コールバックは、環境に応じて &lt;code&gt;ClientSink&lt;/code&gt; または &lt;code&gt;ServerSink&lt;/code&gt; のインスタンスである &lt;code&gt;sink&lt;/code&gt; オブジェクトを受け取ります。サーバーバージョンはコンテンツとしてHTML文字列のみを受け入れますが、クライアントバージョンもDOMノードを受け入れますが、両方のタイプの &lt;code&gt;sink&lt;/code&gt; は同じメソッドを持っています。</target>
        </trans-unit>
        <trans-unit id="8b9f6f162907e02a0ea9ed02c3076f4dfd5e9784" translate="yes" xml:space="preserve">
          <source>The callback to be called after the login has failed.</source>
          <target state="translated">ログインに失敗した後に呼び出されるコールバック。</target>
        </trans-unit>
        <trans-unit id="4e1136b97efaeea6628f872cffb0094c5fa313ee" translate="yes" xml:space="preserve">
          <source>The callback to be called when login is successful.</source>
          <target state="translated">ログインが成功したときに呼び出されるコールバック。</target>
        </trans-unit>
        <trans-unit id="e8601dc28796ec40c6dd1873bf26178e037f01a8" translate="yes" xml:space="preserve">
          <source>The callback to be called when logout is successful.</source>
          <target state="translated">ログアウトが成功したときに呼び出されるコールバック。</target>
        </trans-unit>
        <trans-unit id="2d537507e9f0e48a9d318103c9b844df71ab1a7f" translate="yes" xml:space="preserve">
          <source>The changed document's ID.</source>
          <target state="translated">変更されたドキュメントのID。</target>
        </trans-unit>
        <trans-unit id="cdda8d0b2e57b8d445498c884280ef4906776319" translate="yes" xml:space="preserve">
          <source>The client enters a special mode where it tracks all changes made to client-side collections, so that they can be rolled back later. When this step is complete, the user of your app sees their UI update instantly with the new content of the client-side database, but the server hasn&amp;rsquo;t received any data yet.</source>
          <target state="translated">クライアントは特別なモードに入り、クライアント側のコレクションに加えられたすべての変更を追跡して、後でロールバックできるようにします。この手順が完了すると、アプリのユーザーには、クライアント側データベースの新しいコンテンツを含むUIの更新がすぐに表示されますが、サーバーはまだデータを受信して​​いません。</target>
        </trans-unit>
        <trans-unit id="f82adb248be9dcec9419a93f949feec9a3ecef57" translate="yes" xml:space="preserve">
          <source>The client sends a &lt;code&gt;sub&lt;/code&gt; message with the name of the subscription over DDP.</source>
          <target state="translated">クライアントは、DDP経由でサブスクリプションの名前を含む &lt;code&gt;sub&lt;/code&gt; メッセージを送信します。</target>
        </trans-unit>
        <trans-unit id="4d7269b8f4de7c21284ee91d7b146c64cca37422" translate="yes" xml:space="preserve">
          <source>The client sends the &lt;code&gt;unsub&lt;/code&gt; DDP message.</source>
          <target state="translated">クライアントは &lt;code&gt;unsub&lt;/code&gt; DDPメッセージを送信します。</target>
        </trans-unit>
        <trans-unit id="f4eee4395cb424192df043a4634d70610e3360df" translate="yes" xml:space="preserve">
          <source>The client will see a document if the document is currently in the published record set of any of its subscriptions. If multiple publications publish a document with the same &lt;code&gt;_id&lt;/code&gt; for the same collection the documents are merged for the client. If the values of any of the top level fields conflict, the resulting value will be one of the published values, chosen arbitrarily.</source>
          <target state="translated">ドキュメントがそのサブスクリプションのいずれかの発行済みレコードセットに現在ある場合、クライアントにはドキュメントが表示されます。複数のパブリケーションが同じコレクションに対して同じ &lt;code&gt;_id&lt;/code&gt; を持つドキュメントを公開する場合、クライアント用にドキュメントがマージされます。最上位フィールドのいずれかの値が競合する場合、結果の値は、任意に選択された公開値の1つになります。</target>
        </trans-unit>
        <trans-unit id="a3edc6b86aaba4a10db03ed3bf65c1feeea7e3ce" translate="yes" xml:space="preserve">
          <source>The code above is just code that you could run on the server inside a Meteor Method to set someone&amp;rsquo;s mailing address. Sometimes, you want to set a field when the user first creates their account, for example to initialize a default value or compute something from their social data. You can do this using &lt;a href=&quot;http://docs.meteor.com/#/full/accounts_oncreateuser&quot;&gt;&lt;code&gt;Accounts.onCreateUser&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">上記のコードは、誰かのメールアドレスを設定するためにMeteorメソッド内のサーバーで実行できるコードです。ユーザーが最初にアカウントを作成するときにフィールドを設定したい場合があります。たとえば、デフォルト値を初期化したり、ソーシャルデータから何かを計算したりします。これを行うには、&lt;a href=&quot;http://docs.meteor.com/#/full/accounts_oncreateuser&quot;&gt; &lt;code&gt;Accounts.onCreateUser&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="c2089f8d3a5cab974d960c79146921cccd7ae5c3" translate="yes" xml:space="preserve">
          <source>The code snippet below is an example &lt;code&gt;mobile-config.js&lt;/code&gt; file. The rest of this section will explain the specific API commands in greater detail.</source>
          <target state="translated">以下のコードスニペットは、 &lt;code&gt;mobile-config.js&lt;/code&gt; ファイルの例です。このセクションの残りの部分では、特定のAPIコマンドについて詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="1eb7ae9f8a9bc2920efe4766f0b593b1505daa82" translate="yes" xml:space="preserve">
          <source>The compatibility version can be found in the &lt;code&gt;cordovaCompatibilityVersions&lt;/code&gt; attribute of the JSON file served at &lt;code&gt;ROOT_URL/__cordova/manifest.json&lt;/code&gt; during &lt;code&gt;meteor run [ios/android]&lt;/code&gt;.</source>
          <target state="translated">互換バージョンは、 &lt;code&gt;meteor run [ios/android]&lt;/code&gt; 中に[ios / android]に &lt;code&gt;ROOT_URL/__cordova/manifest.json&lt;/code&gt; で提供されるJSONファイルの &lt;code&gt;cordovaCompatibilityVersions&lt;/code&gt; 属性にあります。</target>
        </trans-unit>
        <trans-unit id="a46b7120798be4c7bb1b75ec9bb4782f83b13e93" translate="yes" xml:space="preserve">
          <source>The compiler class must implement the &lt;code&gt;processFilesForTarget&lt;/code&gt; method that is given the source files for a target (server or client part of the package/app).</source>
          <target state="translated">コンパイラー・クラスは、ターゲット（パッケージ/アプリのサーバーまたはクライアント部分）のソース・ファイルが指定されている &lt;code&gt;processFilesForTarget&lt;/code&gt; メソッドを実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="1c330f9e1e6edcaea05a56dd5ac7fc6db6980110" translate="yes" xml:space="preserve">
          <source>The computation re-runs, with &lt;code&gt;.subscribe()&lt;/code&gt; being re-called either with the same or different arguments.</source>
          <target state="translated">&lt;code&gt;.subscribe()&lt;/code&gt; が同じ引数または異なる引数で再度呼び出されて、計算が再実行されます。</target>
        </trans-unit>
        <trans-unit id="99af7eab5138d62d319c8d32d956df1c850801eb" translate="yes" xml:space="preserve">
          <source>The connection on which to make the subscription.</source>
          <target state="translated">サブスクリプションを行うための接続。</target>
        </trans-unit>
        <trans-unit id="740a87853b05ceafa44f1bc4728a3d9ee2d2be80" translate="yes" xml:space="preserve">
          <source>The constraint solver is necessary because Meteor&amp;rsquo;s package system is &lt;strong&gt;single-loading&lt;/strong&gt; - that is, you can never have two different versions of the same package loaded side-by-side in the same app. This is particularly useful for packages that include a lot of client-side code, or packages that expect to be singletons.</source>
          <target state="translated">Meteorのパッケージシステムは&lt;strong&gt;シングルロードで&lt;/strong&gt;あるため、制約ソルバーが必要です。つまり、同じパッケージの2つの異なるバージョンを同じアプリに並べてロードすることはできません。これは、クライアント側のコードを多く含むパッケージ、またはシングルトンであることが期待されるパッケージに特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="cc108241281fb051b81b727df9560c00f149908c" translate="yes" xml:space="preserve">
          <source>The container component created by &lt;code&gt;withTracker&lt;/code&gt; will reactively re-render the wrapped component in response to any changes to &lt;a href=&quot;https://atmospherejs.com/meteor/tracker&quot;&gt;reactive data sources&lt;/a&gt; accessed from inside the function provided to it.</source>
          <target state="translated">&lt;code&gt;withTracker&lt;/code&gt; によって作成されたコンテナコンポーネントは、提供された関数内からアクセスされる&lt;a href=&quot;https://atmospherejs.com/meteor/tracker&quot;&gt;リアクティブデータソース&lt;/a&gt;への変更に応じて、ラップされたコンポーネントをリアクティブに再レンダリングします。</target>
        </trans-unit>
        <trans-unit id="6e0e7cbaa70b9d07d863354905feeffad0bc332f" translate="yes" xml:space="preserve">
          <source>The contents of a document were previously &lt;code&gt;oldDocument&lt;/code&gt; and are now &lt;code&gt;newDocument&lt;/code&gt;. The position of the changed document is &lt;code&gt;atIndex&lt;/code&gt;.</source>
          <target state="translated">ドキュメントの内容は以前は &lt;code&gt;oldDocument&lt;/code&gt; でしたが、現在は &lt;code&gt;newDocument&lt;/code&gt; です。変更されたドキュメントの位置は &lt;code&gt;atIndex&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2625b821f53748eb1164c8ce720f3d6dd2c500b0" translate="yes" xml:space="preserve">
          <source>The contents of other application specific client data stores.</source>
          <target state="translated">他のアプリケーション固有のクライアントデータストアの内容。</target>
        </trans-unit>
        <trans-unit id="ee514a1a330652bd01870bca4f0ea104e8b15fb4" translate="yes" xml:space="preserve">
          <source>The correct place to find details about using Angular with Meteor</source>
          <target state="translated">MeteorでのAngularの使用方法の詳細を知るための正しい場所</target>
        </trans-unit>
        <trans-unit id="f718d72ed150836467e7680a94abb5d448ed0e72" translate="yes" xml:space="preserve">
          <source>The correct property name to use for the API identifier (i.e. &lt;code&gt;clientId&lt;/code&gt; in the above example) depends on the the login service being used, so be sure to use the correct one:</source>
          <target state="translated">API識別子（上記の例では &lt;code&gt;clientId&lt;/code&gt; ）に使用する正しいプロパティ名は、使用しているログインサービスによって異なるため、必ず正しいものを使用してください。</target>
        </trans-unit>
        <trans-unit id="038413d4a88fc127061a29ec58fdae244cf1f95b" translate="yes" xml:space="preserve">
          <source>The current Android emulator tends to be rather slow and can be unstable, so our recommendation is to run your app on a physical device instead.</source>
          <target state="translated">現在のAndroidエミュレータは、かなり遅く、不安定になる傾向があるので、私たちのお勧めは、代わりに物理デバイス上でアプリを実行することです。</target>
        </trans-unit>
        <trans-unit id="3e07947643b580155cf6f80848ebd8e192d5a105" translate="yes" xml:space="preserve">
          <source>The current Android emulator tends to be rather slow and can be unstable. Our recommendation is to run on a physical device or to use an alternative emulator like &lt;a href=&quot;https://www.genymotion.com&quot;&gt;Genymotion&lt;/a&gt;.</source>
          <target state="translated">現在のAndroidエミュレーターはかなり遅くなる傾向があり、不安定になる可能性があります。物理デバイスで実行するか、&lt;a href=&quot;https://www.genymotion.com&quot;&gt;Genymotion&lt;/a&gt;などの代替エミュレータを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="2131933246f6214698b657819a789a6448ec567b" translate="yes" xml:space="preserve">
          <source>The current best practice for deploying web production applications is to concatenate and minify all of your app assets. This lets you add all of the comments and whitespace you want to your source code, and split it into as many files as is necessary without worrying about app performance.</source>
          <target state="translated">Web 制作アプリケーションをデプロイするための現在のベストプラクティスは、すべてのアプリ資産を連結して最小化することです。これにより、ソースコードに必要なコメントや空白をすべて追加し、アプリのパフォーマンスを気にすることなく必要なだけのファイルに分割することができます。</target>
        </trans-unit>
        <trans-unit id="21cc63df53564e2881a4fcb1f79cabb884731cbc" translate="yes" xml:space="preserve">
          <source>The current computation, or &lt;code&gt;null&lt;/code&gt; if there isn't one. The current computation is the &lt;a href=&quot;#tracker_computation&quot;&gt;&lt;code&gt;Tracker.Computation&lt;/code&gt;&lt;/a&gt; object created by the innermost active call to &lt;code&gt;Tracker.autorun&lt;/code&gt;, and it's the computation that gains dependencies when reactive data sources are accessed.</source>
          <target state="translated">現在の計算。存在しない場合は &lt;code&gt;null&lt;/code&gt; 。現在の計算がある&lt;a href=&quot;#tracker_computation&quot;&gt; &lt;code&gt;Tracker.Computation&lt;/code&gt; の&lt;/a&gt;に最も内側のアクティブコールによって作成されたオブジェクト &lt;code&gt;Tracker.autorun&lt;/code&gt; 、それが利益の依存関係は、反応性のデータソースにアクセスしていることを計算です。</target>
        </trans-unit>
        <trans-unit id="7993fea7c04218147a82f11b44d87d091661eb83" translate="yes" xml:space="preserve">
          <source>The current interface of &lt;code&gt;{Client,Server}Sink&lt;/code&gt; objects is as follows:</source>
          <target state="translated">&lt;code&gt;{Client,Server}Sink&lt;/code&gt; オブジェクトの現在のインターフェースは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="159bf321dd10d2506790f13dc152068cf32723e4" translate="yes" xml:space="preserve">
          <source>The current route</source>
          <target state="translated">現在のルート</target>
        </trans-unit>
        <trans-unit id="b8daad2b57bb95ce4e96d0430123ddaf6601bace" translate="yes" xml:space="preserve">
          <source>The current user status (&lt;code&gt;Meteor.user()&lt;/code&gt; and &lt;code&gt;Meteor.loggingIn()&lt;/code&gt;).</source>
          <target state="translated">現在のユーザーステータス（ &lt;code&gt;Meteor.user()&lt;/code&gt; および &lt;code&gt;Meteor.loggingIn()&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="35e8eb02090a8e4baa59367c7ab5ef3d91ad8b02" translate="yes" xml:space="preserve">
          <source>The data context of this instance's latest invocation.</source>
          <target state="translated">このインスタンスの最新の呼び出しのデータコンテキスト。</target>
        </trans-unit>
        <trans-unit id="9c9be1129e2a2dca40064429c01c92c34a444d2b" translate="yes" xml:space="preserve">
          <source>The data context to use, or a function returning a data context.</source>
          <target state="translated">使用するデータコンテキスト、またはデータコンテキストを返す関数。</target>
        </trans-unit>
        <trans-unit id="edc2b40c85ef4f8f1ca8337a54cb2a5ffbca0e8a" translate="yes" xml:space="preserve">
          <source>The data context to use, or a function returning a data context. If a function is provided, it will be reactively re-run.</source>
          <target state="translated">使用するデータコンテキスト、またはデータコンテキストを返す関数。関数が提供された場合、それは反応的に再実行されます。</target>
        </trans-unit>
        <trans-unit id="c791d4cf7c01b8051fca1ec022bd56ffb37e3e85" translate="yes" xml:space="preserve">
          <source>The data returned from publications will often be dependent on the currently logged in user, and perhaps some properties about that user - whether they are an admin, whether they own a certain document, etc.</source>
          <target state="translated">出版物から返されるデータは、多くの場合、現在ログインしているユーザーに依存し、おそらくそのユーザーに関するプロパティ(管理者であるかどうか、特定のドキュメントを所有しているかどうかなど)に依存します。</target>
        </trans-unit>
        <trans-unit id="0a0c03db688e73505c62ded0a799de175fe32c90" translate="yes" xml:space="preserve">
          <source>The decisions made and practices outlined in the guide must necessarily be &lt;strong&gt;opinionated&lt;/strong&gt;. Certain best practices will be highlighted and other valid approaches ignored. We aim to reach community consensus around major decisions but there will always be other ways to solve problems when developing your application. We believe it&amp;rsquo;s important to know what the &amp;ldquo;standard&amp;rdquo; way to solve a problem is before branching out to other options. If an alternate approach proves itself superior, then it should make its way into a future version of the guide.</source>
          <target state="translated">このガイドで説明されている決定と実践は、必然的に&lt;strong&gt;意見を述べる&lt;/strong&gt;必要があります。特定のベストプラクティスが強調表示され、他の有効なアプローチは無視されます。私たちは主要な決定についてコミュニティの合意に達することを目指していますが、アプリケーションの開発時に問題を解決する方法は常に他にもあります。他のオプションに分岐する前に、問題を解決するための「標準的な」方法が何であるかを知ることが重要であると考えています。代替アプローチがそれ自体優れていることが判明した場合、ガイドの将来のバージョンに進むはずです。</target>
        </trans-unit>
        <trans-unit id="7d4f7d958407c1a06736784ae1695c00701ac37c" translate="yes" xml:space="preserve">
          <source>The default create user function simply copies &lt;code&gt;options.profile&lt;/code&gt; into the new user document. Calling &lt;code&gt;onCreateUser&lt;/code&gt; overrides the default hook. This can only be called once.</source>
          <target state="translated">デフォルトのユーザー作成関数は、単に &lt;code&gt;options.profile&lt;/code&gt; を新しいユーザードキュメントにコピーします。 &lt;code&gt;onCreateUser&lt;/code&gt; を呼び出すと、デフォルトのフックがオーバーライドされます。これは一度しか呼び出せません。</target>
        </trans-unit>
        <trans-unit id="e2c5cfa48990a96b48af53f2fc3024bbc22eed8a" translate="yes" xml:space="preserve">
          <source>The default id generation technique is &lt;code&gt;'STRING'&lt;/code&gt;.</source>
          <target state="translated">デフォルトのID生成手法は &lt;code&gt;'STRING'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f8008a9a87d839dbf55ce84f54c0459067f8855a" translate="yes" xml:space="preserve">
          <source>The different types of MongoDB collections in Meteor, and how to use them.</source>
          <target state="translated">MeteorでのMongoDBコレクションの種類とその使い方。</target>
        </trans-unit>
        <trans-unit id="247b0b2ab6a208b9a4bb279c595c176c2523532c" translate="yes" xml:space="preserve">
          <source>The document &lt;code&gt;oldDocument&lt;/code&gt; is no longer in the result set. It used to be at position &lt;code&gt;atIndex&lt;/code&gt;.</source>
          <target state="translated">ドキュメント &lt;code&gt;oldDocument&lt;/code&gt; は結果セットに含まれなくなりました。以前は &lt;code&gt;atIndex&lt;/code&gt; の位置にありました。</target>
        </trans-unit>
        <trans-unit id="3f0e90b6931b50def96a79f404db488a08193c82" translate="yes" xml:space="preserve">
          <source>The document identified by &lt;code&gt;id&lt;/code&gt; changed its position in the ordered result set, and now appears before the document identified by &lt;code&gt;before&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;id&lt;/code&gt; で識別されるドキュメントは、順序付けられた結果セット内での位置を変更し、 &lt;code&gt;before&lt;/code&gt; で識別されるドキュメントの前に表示されます。</target>
        </trans-unit>
        <trans-unit id="0dd89a7a2b537dfcdd001e0d4bd5f90e6ea11ef4" translate="yes" xml:space="preserve">
          <source>The document identified by &lt;code&gt;id&lt;/code&gt; has changed. &lt;code&gt;fields&lt;/code&gt; contains the changed fields with their new values. If a field was removed from the document then it will be present in &lt;code&gt;fields&lt;/code&gt; with a value of &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;id&lt;/code&gt; で識別されるドキュメントが変更されました。 &lt;code&gt;fields&lt;/code&gt; には、変更されたフィールドと新しい値が含まれています。ドキュメントからフィールドが削除された場合、フィールドは &lt;code&gt;undefined&lt;/code&gt; の値を持つ &lt;code&gt;fields&lt;/code&gt; に存在します。</target>
        </trans-unit>
        <trans-unit id="a624fb59fe57070dc297d97890126e9ee977185d" translate="yes" xml:space="preserve">
          <source>The document identified by &lt;code&gt;id&lt;/code&gt; was removed from the result set.</source>
          <target state="translated">&lt;code&gt;id&lt;/code&gt; で識別されたドキュメントが結果セットから削除されました。</target>
        </trans-unit>
        <trans-unit id="45589e64c975888c317277bc78ee35890c7019c5" translate="yes" xml:space="preserve">
          <source>The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.</source>
          <target state="translated">挿入するドキュメント。まだ _id 属性を持っていないかもしれませんが、その場合は Meteor が生成してくれます。</target>
        </trans-unit>
        <trans-unit id="517b6c99561135b8cbfdab91517658497ea8d515" translate="yes" xml:space="preserve">
          <source>The documentation, usage instructions, and a starter application can be found in the &lt;a href=&quot;http://dev.apollodata.com/core/meteor.html&quot;&gt;&lt;code&gt;apollo&lt;/code&gt; section&lt;/a&gt; of the &lt;a href=&quot;http://dev.apollodata.com/&quot;&gt;Apollo Developer docs&lt;/a&gt;.</source>
          <target state="translated">ドキュメント、使用方法、およびスターターアプリケーションは、&lt;a href=&quot;http://dev.apollodata.com/&quot;&gt;Apollo Developer docsの&lt;/a&gt;&lt;a href=&quot;http://dev.apollodata.com/core/meteor.html&quot;&gt; &lt;code&gt;apollo&lt;/code&gt; セクション&lt;/a&gt;にあります。</target>
        </trans-unit>
        <trans-unit id="aecd209e0c60f336e8759e3bfcf604328d1467f9" translate="yes" xml:space="preserve">
          <source>The domain or address of the Meteor server to connect to for DDP and hot code push of new versions.</source>
          <target state="translated">DDPや新バージョンのホットコードプッシュのために接続するMeteorサーバーのドメインまたはアドレス。</target>
        </trans-unit>
        <trans-unit id="9a28cb88919fcb07c997e5e68538f81d1f539252" translate="yes" xml:space="preserve">
          <source>The dynamic &lt;code&gt;import(...)&lt;/code&gt; statement is a complimentary method to the static &lt;code&gt;import&lt;/code&gt; technique of requiring a module. While a statically</source>
          <target state="translated">動的 &lt;code&gt;import(...)&lt;/code&gt; ステートメントは、モジュールを必要とする静的 &lt;code&gt;import&lt;/code&gt; 手法を補完する方法です。静的に</target>
        </trans-unit>
        <trans-unit id="6658088a6e39e457724f921b9b53571618b0a1a3" translate="yes" xml:space="preserve">
          <source>The easiest way to get a working Android development environment is by installing &lt;a href=&quot;http://developer.android.com/sdk/index.html&quot;&gt;Android Studio&lt;/a&gt;, which offers a setup wizard on first launch that installs the Android SDK for you, and downloads a default set of tools, platforms, and other components that you will need to start developing.</source>
          <target state="translated">動作するAndroid開発環境を取得する最も簡単な方法は、&lt;a href=&quot;http://developer.android.com/sdk/index.html&quot;&gt;Android Studioを&lt;/a&gt;インストールすることです。これにより、初回起動時にセットアップウィザードが提供され、Android SDKがインストールされ、必要なツール、プラットフォーム、その他のコンポーネントのデフォルトセットがダウンロードされます。開発を開始します。</target>
        </trans-unit>
        <trans-unit id="5e46780139e2e7cbdd276acdef814c73f6776661" translate="yes" xml:space="preserve">
          <source>The easiest way to operate your app with confidence is to use Galaxy, the service built by Meteor Development Group specifically to run Meteor apps.</source>
          <target state="translated">アプリを安心して運用するための最も簡単な方法は、Meteor Development GroupがMeteorアプリの運用に特化して構築したサービス「Galaxy」を利用することです。</target>
        </trans-unit>
        <trans-unit id="654fba81e3a9c2aa1c5bf9b6a56018ac01de8f0c" translate="yes" xml:space="preserve">
          <source>The element currently handling the event. This is the element that matched the selector in the event map. For events that bubble, it may be &lt;code&gt;target&lt;/code&gt; or an ancestor of &lt;code&gt;target&lt;/code&gt;, and its value changes as the event bubbles.</source>
          <target state="translated">現在イベントを処理している要素。これは、イベントマップのセレクターと一致した要素です。バブルそのイベントのために、それがあってもよい &lt;code&gt;target&lt;/code&gt; または先祖 &lt;code&gt;target&lt;/code&gt; 、その値は、イベントの泡として変化します。</target>
        </trans-unit>
        <trans-unit id="07d9edbe44b8b93d5155bab0d32f17818f6f99b4" translate="yes" xml:space="preserve">
          <source>The element that originated the event.</source>
          <target state="translated">イベントの元となった要素。</target>
        </trans-unit>
        <trans-unit id="6be9d3326749416c1be6ea1db2002aad21872641" translate="yes" xml:space="preserve">
          <source>The email address to look for</source>
          <target state="translated">探すメールアドレス</target>
        </trans-unit>
        <trans-unit id="3743afb81fcad8ac1416b9103eed387633f80c05" translate="yes" xml:space="preserve">
          <source>The email address to remove.</source>
          <target state="translated">削除するメールアドレスです。</target>
        </trans-unit>
        <trans-unit id="9eda1a7cbc691a218c11f872db26c1738104cfe2" translate="yes" xml:space="preserve">
          <source>The email address to send a password reset link.</source>
          <target state="translated">パスワードリセットリンクを送信するためのメールアドレスです。</target>
        </trans-unit>
        <trans-unit id="7ac844ecc62bf24b7a12b30517f37c5a73fd2756" translate="yes" xml:space="preserve">
          <source>The email is generated using the email templates from &lt;a href=&quot;http://docs.meteor.com/#/full/accounts_emailtemplates&quot;&gt;Accounts.emailTemplates&lt;/a&gt;, and include links generated with &lt;code&gt;Accounts.urls&lt;/code&gt;. We&amp;rsquo;ll go into more detail about customizing the email content and URL later.</source>
          <target state="translated">電子メールは、&lt;a href=&quot;http://docs.meteor.com/#/full/accounts_emailtemplates&quot;&gt;Accounts.emailTemplates&lt;/a&gt;の電子メールテンプレートを使用して生成され、 &lt;code&gt;Accounts.urls&lt;/code&gt; で生成されたリンクが含まれます。メールのコンテンツとURLのカスタマイズについては、後で詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="567d93adeeb375b1b5fad532439a099741568237" translate="yes" xml:space="preserve">
          <source>The enclosing View that caused this View to be rendered, if any.</source>
          <target state="translated">このビューをレンダリングする原因となったビューがあれば、それを囲むビュー。</target>
        </trans-unit>
        <trans-unit id="a39bb6a8c9c2bfc0c4251979c3ae716828e4f6d0" translate="yes" xml:space="preserve">
          <source>The encryption key is 16 bytes, encoded in Base64.</source>
          <target state="translated">暗号化キーは16バイトで、Base64でエンコードされています。</target>
        </trans-unit>
        <trans-unit id="7a139e0d0e150d967403ab83e938806c4dce6822" translate="yes" xml:space="preserve">
          <source>The error to pass to the client.</source>
          <target state="translated">クライアントに渡すエラー。</target>
        </trans-unit>
        <trans-unit id="12cd803332783618763b1137bc79bb163ecafb8d" translate="yes" xml:space="preserve">
          <source>The estimated time of the next reconnection attempt. To turn this into an interval until the next reconnection, use &lt;code&gt;retryTime - (new Date()).getTime()&lt;/code&gt;. This key will be set only when &lt;code&gt;status&lt;/code&gt; is &lt;code&gt;waiting&lt;/code&gt;.</source>
          <target state="translated">次の再接続試行の推定時間。これを次の再接続までの間隔に変えるには、 &lt;code&gt;retryTime - (new Date()).getTime()&lt;/code&gt; ます。このキーは、 &lt;code&gt;status&lt;/code&gt; が &lt;code&gt;waiting&lt;/code&gt; 場合にのみ設定されます。</target>
        </trans-unit>
        <trans-unit id="6eb6952418b5ed3ce89f3c1265f9e982a83f1479" translate="yes" xml:space="preserve">
          <source>The event&amp;rsquo;s type, such as &amp;ldquo;click&amp;rdquo;, &amp;ldquo;blur&amp;rdquo; or &amp;ldquo;keypress&amp;rdquo;.</source>
          <target state="translated">「クリック」、「ぼかし」、「キープレス」などのイベントのタイプ。</target>
        </trans-unit>
        <trans-unit id="dacbc84d4f22d4a66057c29a4639052e47783b20" translate="yes" xml:space="preserve">
          <source>The factory function passed to the &lt;code&gt;EJSON.addType&lt;/code&gt; method should create an instance of our custom type and initialize it with values from an object passed as the first argument of the factory function. Here is an example:</source>
          <target state="translated">&lt;code&gt;EJSON.addType&lt;/code&gt; メソッドに渡されたファクトリ関数は、カスタムタイプのインスタンスを作成し、ファクトリ関数の最初の引数として渡されたオブジェクトからの値で初期化する必要があります。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="92ba2c3871355e6bdd10259faea23c325aea857a" translate="yes" xml:space="preserve">
          <source>The fields in the document that have changed, together with their new values. If a field is not present in &lt;code&gt;fields&lt;/code&gt; it was left unchanged; if it is present in &lt;code&gt;fields&lt;/code&gt; and has a value of &lt;code&gt;undefined&lt;/code&gt; it was removed from the document. If &lt;code&gt;_id&lt;/code&gt; is present it is ignored.</source>
          <target state="translated">変更されたドキュメント内のフィールドとその新しい値。フィールドが &lt;code&gt;fields&lt;/code&gt; に存在しない場合、フィールドは変更されませんでした。 &lt;code&gt;fields&lt;/code&gt; 存在し、値が &lt;code&gt;undefined&lt;/code&gt; の場合、ドキュメントから削除されました。場合 &lt;code&gt;_id&lt;/code&gt; が存在している、それは無視されます。</target>
        </trans-unit>
        <trans-unit id="1439fc236a1522eefd719270b3de11c81f763fdc" translate="yes" xml:space="preserve">
          <source>The fields in the new document. If &lt;code&gt;_id&lt;/code&gt; is present it is ignored.</source>
          <target state="translated">新しいドキュメントのフィールド。場合 &lt;code&gt;_id&lt;/code&gt; が存在している、それは無視されます。</target>
        </trans-unit>
        <trans-unit id="daf7b75d0ac7c5652e53090e2da5ea8c9d128776" translate="yes" xml:space="preserve">
          <source>The file extension that this plugin should handle, without the first dot. Examples: &lt;code&gt;&quot;coffee&quot;&lt;/code&gt;, &lt;code&gt;&quot;coffee.md&quot;&lt;/code&gt;.</source>
          <target state="translated">最初のドットなしで、このプラグインが処理するファイル拡張子。例： &lt;code&gt;&quot;coffee&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;coffee.md&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e9d994f1d29813d3ea3225942ca3ca1433446e74" translate="yes" xml:space="preserve">
          <source>The file serving mechanism used in Meteor allows for local file access through URLs of the form &lt;code&gt;http://localhost:&amp;lt;port&amp;gt;/local-filesystem/&amp;lt;path&amp;gt;&lt;/code&gt;) however. You can construct these file system URLs manually, or use &lt;code&gt;WebAppLocalServer.localFileSystemUrl()&lt;/code&gt; to convert &lt;code&gt;file://&lt;/code&gt; URLs. You can use this to convert URLs received from plugins like &lt;code&gt;cordova-plugin-file&lt;/code&gt; and &lt;code&gt;cordova-plugin-camera&lt;/code&gt; for example.</source>
          <target state="translated">Meteorで使用されるファイルサービングメカニズムでは、 &lt;code&gt;http://localhost:&amp;lt;port&amp;gt;/local-filesystem/&amp;lt;path&amp;gt;&lt;/code&gt; の形式のURLを介したローカルファイルアクセスが可能です。これらのファイルシステムURLを手動で作成するか、 &lt;code&gt;WebAppLocalServer.localFileSystemUrl()&lt;/code&gt; を使用して &lt;code&gt;file://&lt;/code&gt; URL を変換できます。これを使用して、 &lt;code&gt;cordova-plugin-file&lt;/code&gt; や &lt;code&gt;cordova-plugin-camera&lt;/code&gt; などのプラグインから受信したURLを変換できます。</target>
        </trans-unit>
        <trans-unit id="4fc2a53e18d567493a7dab3e0e1c62a5ab75f9af" translate="yes" xml:space="preserve">
          <source>The first identifier in a path is resolved in one of two ways:</source>
          <target state="translated">パスの最初の識別子は、2つの方法のうちの1つで解決されます。</target>
        </trans-unit>
        <trans-unit id="fc45df8317aed71cc42c885955e9514593eba5f6" translate="yes" xml:space="preserve">
          <source>The first node of the View&amp;rsquo;s rendered content. Note that this may be a text node. Requires that the View be rendered. If the View rendered to zero DOM nodes, it may be a placeholder node (comment or text node). The DOM extent of a View consists of the nodes between &lt;code&gt;view.firstNode()&lt;/code&gt; and &lt;code&gt;view.lastNode()&lt;/code&gt;, inclusive.</source>
          <target state="translated">ビューのレンダリングされたコンテンツの最初のノード。これはテキストノードである場合があります。ビューをレンダリングする必要があります。ビューがゼロのDOMノードにレンダリングされる場合、それはプレースホルダーノード（コメントまたはテキストノード）である可能性があります。ビューのDOMエクステントは、 &lt;code&gt;view.firstNode()&lt;/code&gt; と &lt;code&gt;view.lastNode()&lt;/code&gt; の間のノードで構成されます。</target>
        </trans-unit>
        <trans-unit id="9593cc38f7d0efced546ec7c49927969fdd40020" translate="yes" xml:space="preserve">
          <source>The first thing to consider here is if you actually need to care about your component re-rendering. Blaze is optimized so that it typically doesn&amp;rsquo;t matter if a component is re-rendered even if it strictly shouldn&amp;rsquo;t. If you make sure that your helpers are cheap to run and consequently rendering is not expensive, then you probably don&amp;rsquo;t need to worry about this.</source>
          <target state="translated">ここで最初に検討すべきことは、コンポーネントの再レンダリングを実際に気にする必要があるかどうかです。Blazeは最適化されているため、コンポーネントを厳密に再レンダリングする必要がない場合でも、コンポーネントが再レンダリングされるかどうかは通常問題になりません。ヘルパーの実行が安価であり、その結果レンダリングが高価ではないことを確認した場合、おそらくこれについて心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="584ecaca2c8bcc54e95a7d1cdec2c8b572958b24" translate="yes" xml:space="preserve">
          <source>The first thing to understand about &lt;code&gt;useraccounts&lt;/code&gt; is that the core accounts management logic is independent of the HTML templates and routing packages. This means you can use &lt;a href=&quot;https://atmospherejs.com/useraccounts/core&quot;&gt;&lt;code&gt;useraccounts:core&lt;/code&gt;&lt;/a&gt; to build your own set of login templates. Generally, you&amp;rsquo;ll want to pick one login template package and one login routing package. The options for templates include:</source>
          <target state="translated">&lt;code&gt;useraccounts&lt;/code&gt; アカウントについて最初に理解する必要があるのは、コアアカウント管理ロジックがHTMLテンプレートやルーティングパッケージから独立していることです。つまり、&lt;a href=&quot;https://atmospherejs.com/useraccounts/core&quot;&gt; &lt;code&gt;useraccounts:core&lt;/code&gt; &lt;/a&gt;を使用して、独自の一連のログインテンプレートを作成できます。通常、1つのログインテンプレートパッケージと1つのログインルーティングパッケージを選択します。テンプレートのオプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a7faa87860bf4abfc4c966f5fc83a212ecb9abb9" translate="yes" xml:space="preserve">
          <source>The first top-level DOM node in this template instance.</source>
          <target state="translated">このテンプレートインスタンスの最初のトップレベル DOM ノード。</target>
        </trans-unit>
        <trans-unit id="f1ed35800128020fe247eb673ce130f63b49ace7" translate="yes" xml:space="preserve">
          <source>The following are some of the more commonly used commands in the &lt;code&gt;meteor&lt;/code&gt; command-line tool. This is just an overview and does not mention every command or every option to every command; for more details, use the &lt;code&gt;meteor help&lt;/code&gt; command.</source>
          <target state="translated">以下は、 &lt;code&gt;meteor&lt;/code&gt; コマンドラインツールでよく使用されるコマンドの一部です。これは単なる概要であり、すべてのコマンドやすべてのコマンドのすべてのオプションについては言及していません。詳細については、 &lt;code&gt;meteor help&lt;/code&gt; コマンドを使用してください。</target>
        </trans-unit>
        <trans-unit id="b8f068eb49d38bd41b15412d2114fd69d1623795" translate="yes" xml:space="preserve">
          <source>The following directories are also not loaded as part of your app code:</source>
          <target state="translated">次のディレクトリもアプリ コードの一部として読み込まれません。</target>
        </trans-unit>
        <trans-unit id="f458bb9e4e3f205db3d2788a44adc0955a225cb2" translate="yes" xml:space="preserve">
          <source>The following patterns can be used as pattern arguments to &lt;a href=&quot;#check&quot;&gt;&lt;code&gt;check&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;Match.test&lt;/code&gt;:</source>
          <target state="translated">次のパターンは、&lt;a href=&quot;#check&quot;&gt; &lt;code&gt;check&lt;/code&gt; &lt;/a&gt;および &lt;code&gt;Match.test&lt;/code&gt; のパターン引数として使用できます。</target>
        </trans-unit>
        <trans-unit id="01b079166094902f236986e058597d9c5b4c6829" translate="yes" xml:space="preserve">
          <source>The following properties and methods are available on Blaze.View:</source>
          <target state="translated">Blaze.Viewでは、以下のプロパティとメソッドが利用できます。</target>
        </trans-unit>
        <trans-unit id="bc25416eed36dd3efad8f9cdadf6ef42aab4bbd1" translate="yes" xml:space="preserve">
          <source>The following properties and methods are available on the event object passed to handlers:</source>
          <target state="translated">ハンドラに渡されるイベントオブジェクトには、以下のプロパティとメソッドが用意されています。</target>
        </trans-unit>
        <trans-unit id="b02444ac0e947a21897753e15438db3b2b3a71f9" translate="yes" xml:space="preserve">
          <source>The function is invoked immediately, at which point it may alert and stop right away if &lt;code&gt;shouldAlert&lt;/code&gt; is already true. If not, the function is run again when &lt;code&gt;shouldAlert&lt;/code&gt; becomes true.</source>
          <target state="translated">関数はすぐに呼び出されます &lt;code&gt;shouldAlert&lt;/code&gt; がすでにtrueの場合、その時点でアラートが発生し、すぐに停止します。そうでない場合、 &lt;code&gt;shouldAlert&lt;/code&gt; がtrueになると、関数が再度実行されます。</target>
        </trans-unit>
        <trans-unit id="c5fc97ab72920fe5fa5a9a758c687e1ae9ce53c0" translate="yes" xml:space="preserve">
          <source>The function returns an object with methods to &lt;a href=&quot;#insert&quot;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt; documents in the collection, &lt;a href=&quot;#update&quot;&gt;&lt;code&gt;update&lt;/code&gt;&lt;/a&gt; their properties, and &lt;a href=&quot;#remove&quot;&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/a&gt; them, and to &lt;a href=&quot;#find&quot;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt; the documents in the collection that match arbitrary criteria. The way these methods work is compatible with the popular Mongo database API. The same database API works on both the client and the server (see below).</source>
          <target state="translated">この関数は、コレクションにドキュメントを&lt;a href=&quot;#insert&quot;&gt; &lt;code&gt;insert&lt;/code&gt; &lt;/a&gt;し、それらのプロパティを&lt;a href=&quot;#update&quot;&gt; &lt;code&gt;update&lt;/code&gt; &lt;/a&gt;、それらを&lt;a href=&quot;#remove&quot;&gt; &lt;code&gt;remove&lt;/code&gt; &lt;/a&gt;し、任意の基準に一致するコレクション内のドキュメントを&lt;a href=&quot;#find&quot;&gt; &lt;code&gt;find&lt;/code&gt; &lt;/a&gt;するメソッドを持つオブジェクトを返します。これらのメソッドの動作方法は、一般的なMongoデータベースAPIと互換性があります。同じデータベースAPIがクライアントとサーバーの両方で機能します（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="00960f5c749ac85fa276f4981b76cea9b5cf20e7" translate="yes" xml:space="preserve">
          <source>The function should return the user document (either the one passed in or a newly-created object) with whatever modifications are desired. The returned document is inserted directly into the &lt;a href=&quot;#meteor_users&quot;&gt;&lt;code&gt;Meteor.users&lt;/code&gt;&lt;/a&gt; collection.</source>
          <target state="translated">この関数は、必要な変更を加えて、ユーザードキュメント（渡されたドキュメントまたは新しく作成されたオブジェクト）を返す必要があります。返されたドキュメントは、&lt;a href=&quot;#meteor_users&quot;&gt; &lt;code&gt;Meteor.users&lt;/code&gt; &lt;/a&gt;コレクションに直接挿入されます。</target>
        </trans-unit>
        <trans-unit id="25f8f1273d5558936c16f7f636b59e3500409771" translate="yes" xml:space="preserve">
          <source>The function to call when a new DDP connection is established.</source>
          <target state="translated">新しいDDP接続が確立されたときに呼び出す関数。</target>
        </trans-unit>
        <trans-unit id="a381d8d1cd22b68668676a7e01122fcafe1c6552" translate="yes" xml:space="preserve">
          <source>The function to call. It is given two arguments:</source>
          <target state="translated">呼び出す関数です。2つの引数が与えられます。</target>
        </trans-unit>
        <trans-unit id="4137a187bc9d506f095cd90f857f7ad1d0d546d3" translate="yes" xml:space="preserve">
          <source>The function to call. It will be called with a single argument, the &lt;a href=&quot;#ddp_connect&quot;&gt;connection object&lt;/a&gt; that is reconnecting.</source>
          <target state="translated">呼び出す関数。再接続している&lt;a href=&quot;#ddp_connect&quot;&gt;接続オブジェクト&lt;/a&gt;という単一の引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4536fc32a9148981dd5404f4b2e238b1332cdacf" translate="yes" xml:space="preserve">
          <source>The function to run</source>
          <target state="translated">実行する関数</target>
        </trans-unit>
        <trans-unit id="6a6c8ac9b40bb186fd447ca19470ac35f142a0c8" translate="yes" xml:space="preserve">
          <source>The function to run. It receives one argument: a Tracker.Computation object.</source>
          <target state="translated">実行する関数。これは1つの引数を受け取る:Tracker.Computationオブジェクト。</target>
        </trans-unit>
        <trans-unit id="ea0d21bc45812b570af7457f46863740e4deaeee" translate="yes" xml:space="preserve">
          <source>The function to run. It receives one argument: the Computation object that will be returned.</source>
          <target state="translated">実行される関数.これは1つの引数を受け取ります:返される計算オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="faffbe39cd94e8cfe5c69f1c6e0a9a8ffb6d19db" translate="yes" xml:space="preserve">
          <source>The function you pass will be called with two arguments: &lt;code&gt;options&lt;/code&gt; and &lt;code&gt;user&lt;/code&gt;. The &lt;code&gt;options&lt;/code&gt; argument comes from &lt;a href=&quot;#accounts_createuser&quot;&gt;&lt;code&gt;Accounts.createUser&lt;/code&gt;&lt;/a&gt; for password-based users or from an external service login flow. &lt;code&gt;options&lt;/code&gt; may come from an untrusted client so make sure to validate any values you read from it. The &lt;code&gt;user&lt;/code&gt; argument is created on the server and contains a proposed user object with all the automatically generated fields required for the user to log in, including the &lt;code&gt;_id&lt;/code&gt;.</source>
          <target state="translated">渡す関数は、 &lt;code&gt;options&lt;/code&gt; と &lt;code&gt;user&lt;/code&gt; の 2つの引数で呼び出されます。 &lt;code&gt;options&lt;/code&gt; 引数は、から来ている&lt;a href=&quot;#accounts_createuser&quot;&gt; &lt;code&gt;Accounts.createUser&lt;/code&gt; &lt;/a&gt;パスワードベースのユーザーまたは外部サービスのログインフローから。 &lt;code&gt;options&lt;/code&gt; は信頼できないクライアントからのものである可能性があるため、そこから読み取った値を検証してください。 &lt;code&gt;user&lt;/code&gt; 引数には、サーバー上に作成され、含めてログインするためのユーザーのために必要なすべて自動的に生成されたフィールド、と提案したユーザーオブジェクトが含まれる &lt;code&gt;_id&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="fd446fbeb8bacd739ba69b7eae72ca032e711e1b" translate="yes" xml:space="preserve">
          <source>The global Meteor server context and every method and publication initialize a new fiber so that they can run concurrently. Many Meteor APIs, for example collections, rely on running inside a fiber. They also rely on an internal Meteor mechanism that tracks server &amp;ldquo;environment&amp;rdquo; state, like the currently executing method. This means you need to initialize your own fiber and environment to use asynchronous Node code inside a Meteor app. Let&amp;rsquo;s look at an example of some code that won&amp;rsquo;t work, using the code example from the &lt;a href=&quot;https://github.com/mikedeboer/node-github&quot;&gt;node-github repository&lt;/a&gt;:</source>
          <target state="translated">グローバルMeteorサーバーコンテキストとすべてのメソッドおよびパブリケーションは、新しいファイバーを初期化して、同時に実行できるようにします。コレクションなどの多くのMeteor APIは、ファイバー内での実行に依存しています。また、現在実行中のメソッドと同様に、サーバーの「環境」状態を追跡する内部Meteorメカニズムにも依存しています。つまり、Meteorアプリ内で非同期Nodeコードを使用するには、独自のファイバーと環境を初期化する必要があります。&lt;a href=&quot;https://github.com/mikedeboer/node-github&quot;&gt;node-githubリポジトリの&lt;/a&gt;コード例を使用して、機能しないコードの例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="b53a8d04298b3864946e232b02e320f299d1060f" translate="yes" xml:space="preserve">
          <source>The globals are passed in the options object so that the linters can omit the warnings about the package imports that look like global variables.</source>
          <target state="translated">グローバル変数をオプションオブジェクトに渡すことで、リンタがグローバル変数のように見えるパッケージのインポートに関する警告を省略できるようにしています。</target>
        </trans-unit>
        <trans-unit id="06a7132664b40248286c2cf32b5fb7c2748ae238" translate="yes" xml:space="preserve">
          <source>The good news is that Promises can be used with the new ES2015 &lt;code&gt;async/await&lt;/code&gt; syntax (available in the &lt;code&gt;ecmascript&lt;/code&gt; package since Meteor 1.3) in a natural and synchronous-looking style on both the client and the server.</source>
          <target state="translated">良い知らせは、Promiseが新しいES2015 &lt;code&gt;async/await&lt;/code&gt; 構文（Meteor 1.3以降の &lt;code&gt;ecmascript&lt;/code&gt; パッケージで利用可能）で、クライアントとサーバーの両方で自然で同期的に見えるスタイルで使用できることです。</target>
        </trans-unit>
        <trans-unit id="dca7a84b25430a74537ddd3adccb73d27ffe3d55" translate="yes" xml:space="preserve">
          <source>The guide also includes sample applications created with Angular, React, Vue, and Blaze&amp;mdash;all written in TypeScript. See the code &lt;a href=&quot;https://github.com/birkskyum/meteor-typescript-samples&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">このガイドには、Angular、React、Vue、およびBlazeで作成されたサンプルアプリケーションも含まれています。これらはすべてTypeScriptで記述されています。こちらのコードを&lt;a href=&quot;https://github.com/birkskyum/meteor-typescript-samples&quot;&gt;ご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="637199bf494276120c5fbbfac4671918711cf1b1" translate="yes" xml:space="preserve">
          <source>The guide is targeted towards intermediate developers that have some familiarity with JavaScript, the Meteor platform, and web development in general. If you are just getting started with Meteor, we recommend starting with the &lt;a href=&quot;https://www.meteor.com/tutorials/blaze/creating-an-app&quot;&gt;official tutorial&lt;/a&gt;.</source>
          <target state="translated">このガイドは、JavaScript、Meteorプラットフォーム、およびWeb開発全般にある程度精通している中間開発者を対象としています。Meteorを使い始めたばかりの場合は、&lt;a href=&quot;https://www.meteor.com/tutorials/blaze/creating-an-app&quot;&gt;公式チュートリアル&lt;/a&gt;から始めることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="02872d00bba492451f9d7a01ba71c7f54ca30435" translate="yes" xml:space="preserve">
          <source>The handle returned by &lt;code&gt;Meteor.setInterval&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Meteor.setInterval&lt;/code&gt; によって返されるハンドル</target>
        </trans-unit>
        <trans-unit id="b73edf919779af977d5b21d29da5337b539a99f7" translate="yes" xml:space="preserve">
          <source>The handle returned by &lt;code&gt;Meteor.setTimeout&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Meteor.setTimeout&lt;/code&gt; によって返されるハンドル</target>
        </trans-unit>
        <trans-unit id="32dd1bcb0d7fab3d53fcd4d7bf060d5dd00ba3e5" translate="yes" xml:space="preserve">
          <source>The handler function receives two arguments: &lt;code&gt;event&lt;/code&gt;, an object with information about the event, and &lt;code&gt;template&lt;/code&gt;, a &lt;a href=&quot;#Template-instances&quot;&gt;template instance&lt;/a&gt; for the template where the handler is defined. The handler also receives some additional context data in &lt;code&gt;this&lt;/code&gt;, depending on the context of the current element handling the event. In a template, an element&amp;rsquo;s context is the data context where that element occurs, which is set by block helpers such as &lt;code&gt;#with&lt;/code&gt; and &lt;code&gt;#each&lt;/code&gt;.</source>
          <target state="translated">：ハンドラ関数は2つの引数受信 &lt;code&gt;event&lt;/code&gt; 、イベントに関する情報を持つオブジェクト、および &lt;code&gt;template&lt;/code&gt; 、&lt;a href=&quot;#Template-instances&quot;&gt;テンプレートインスタンス&lt;/a&gt;ハンドラが定義されているテンプレートのために。ハンドラーは、イベントを処理する現在の要素のコンテキストに応じて、 &lt;code&gt;this&lt;/code&gt; で追加のコンテキストデータも受け取ります。テンプレートでは、要素のコンテキストは、その要素が発生するデータコンテキストであり、 &lt;code&gt;#with&lt;/code&gt; や &lt;code&gt;#each&lt;/code&gt; などのブロックヘルパーによって設定されます。</target>
        </trans-unit>
        <trans-unit id="f6e0376def06813eb38f25196ebac8ff4d53d7e8" translate="yes" xml:space="preserve">
          <source>The helper function itself.</source>
          <target state="translated">ヘルパー機能そのもの。</target>
        </trans-unit>
        <trans-unit id="893f4536b2fef4324989d08558e5e7b6b4f3a8f6" translate="yes" xml:space="preserve">
          <source>The helper&amp;rsquo;s implementation can access the current data context as &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">ヘルパーの実装は、 &lt;code&gt;this&lt;/code&gt; として現在のデータコンテキストにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="7beb40c5f9b25a82388e468937e0480879ed1acc" translate="yes" xml:space="preserve">
          <source>The id of the user that made this method call, or &lt;code&gt;null&lt;/code&gt; if no user was logged in.</source>
          <target state="translated">このメソッドを呼び出したユーザーのID 。ログインしているユーザーがいない場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3c3d6519aed2e24a46dcc82ff3d5453e2efa97ed" translate="yes" xml:space="preserve">
          <source>The id of the user to send email to.</source>
          <target state="translated">メールを送信するユーザーのIDです。</target>
        </trans-unit>
        <trans-unit id="c984f1a5985da0663c84dd201c8b9bd65398c096" translate="yes" xml:space="preserve">
          <source>The id of the user to update.</source>
          <target state="translated">更新するユーザーのID。</target>
        </trans-unit>
        <trans-unit id="22bb0cd5e6ef4498df5368ed05bad68ba985f028" translate="yes" xml:space="preserve">
          <source>The idea of the staging environment is to provide a non-user-visible test environment that is as close as possible to production in terms of infrastructure. It&amp;rsquo;s common for issues to appear with new code on the production infrastructure that just don&amp;rsquo;t happen in a development environment. A very simple example is issues that involve latency between the client and server&amp;mdash;connecting to a local development server with tiny latencies, you just may never see such an issue.</source>
          <target state="translated">ステージング環境のアイデアは、インフラストラクチャの点で本番環境に可能な限り近い、ユーザーに表示されないテスト環境を提供することです。開発環境では発生しない問題が本番環境インフラストラクチャの新しいコードで発生することはよくあります。非常に単純な例は、クライアントとサーバーの間のレイテンシに関連する問題です。小さなレイテンシでローカル開発サーバーに接続すると、そのような問題が発生することはありません。</target>
        </trans-unit>
        <trans-unit id="001061d23a95f7611790e74787aacc1f359fe589" translate="yes" xml:space="preserve">
          <source>The identifier of the plugin you want to configure.</source>
          <target state="translated">設定したいプラグインの識別子。</target>
        </trans-unit>
        <trans-unit id="df92b794d4b888ef989636e3e383472a156d5358" translate="yes" xml:space="preserve">
          <source>The implication of the above is that we need to create more collections to contain sub-documents. In the case of the Todos application, we need both a &lt;code&gt;Lists&lt;/code&gt; collection and a &lt;code&gt;Todos&lt;/code&gt; collection to contain each list&amp;rsquo;s todo items. Consequently we need to do some things that you&amp;rsquo;d typically associate with a SQL database, like using foreign keys (&lt;code&gt;todo.listId&lt;/code&gt;) to associate one document with another.</source>
          <target state="translated">上記の意味するところは、サブドキュメントを含めるためにより多くのコレクションを作成する必要があるということです。Todosアプリケーションの場合、 &lt;code&gt;Lists&lt;/code&gt; コレクションと &lt;code&gt;Todos&lt;/code&gt; コレクションの両方に、各リストのToDoアイテムを含める必要があります。したがって、外部キー（ &lt;code&gt;todo.listId&lt;/code&gt; ）を使用して1つのドキュメントを別のドキュメントに関連付けるなど、SQLデータベースに通常関連付けるいくつかのことを行う必要があります。</target>
        </trans-unit>
        <trans-unit id="39615301fcd77be1815bf649443edd765568538f" translate="yes" xml:space="preserve">
          <source>The initial value to set. &lt;code&gt;equalsFunc&lt;/code&gt; is ignored when setting the initial value.</source>
          <target state="translated">設定する初期値。初期値を設定するとき、 &lt;code&gt;equalsFunc&lt;/code&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="631bf9914cea7c7ce5a67604f6dd1f72c8e049d4" translate="yes" xml:space="preserve">
          <source>The inserted HTML must consist of balanced HTML tags. You can&amp;rsquo;t, for example, insert &lt;code&gt;&quot;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&quot;&lt;/code&gt; to close an existing div and open a new one.</source>
          <target state="translated">挿入されるHTMLは、バランスのとれたHTMLタグで構成されている必要があります。たとえば、 &lt;code&gt;&quot;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&quot;&lt;/code&gt; を挿入して既存のdivを閉じ、新しいdivを開くことはできません。</target>
        </trans-unit>
        <trans-unit id="cf59184c506e87f22cd7c9a7c19cf83ce4599ecd" translate="yes" xml:space="preserve">
          <source>The issue with this schema is that due to the DDP behavior just mentioned, each change to &lt;em&gt;any&lt;/em&gt; todo item in a list will require sending the &lt;em&gt;entire&lt;/em&gt; set of todos for that list over the network. This is because DDP has no concept of &amp;ldquo;change the &lt;code&gt;text&lt;/code&gt; field of the 3rd item in the field called &lt;code&gt;todos&lt;/code&gt;&amp;ldquo;, simply &amp;ldquo;change the field called &lt;code&gt;todos&lt;/code&gt; to a totally new array&amp;rdquo;.</source>
          <target state="translated">このスキーマでの問題は、今述べたDDPの動作に、各変更点である&lt;em&gt;任意の&lt;/em&gt;リストでTODO項目が送信が必要になります&lt;em&gt;全体の&lt;/em&gt;ネットワーク上でそのリストについては、ドスのセットを。これは、DDPに「 &lt;code&gt;todos&lt;/code&gt; と呼ばれるフィールドの3番目の項目の &lt;code&gt;text&lt;/code&gt; フィールドを変更する」という概念がなく、単に「 &lt;code&gt;todos&lt;/code&gt; と呼ばれるフィールドを完全に新しい配列に変更する」ためです。</target>
        </trans-unit>
        <trans-unit id="cc3dcc2b6eba9612cc0ca947cb6f916d99764552" translate="yes" xml:space="preserve">
          <source>The key to set, eg, &lt;code&gt;selectedItem&lt;/code&gt;</source>
          <target state="translated">設定するキー。たとえば、 &lt;code&gt;selectedItem&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bf355afc6c3e8f73ec33c2201c210bc589768e4f" translate="yes" xml:space="preserve">
          <source>The last command creates a &lt;code&gt;package.json&lt;/code&gt; file and prompts you for the package information. You may skip everything but &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;version&lt;/code&gt;, and &lt;code&gt;entry point&lt;/code&gt;. You can use the default &lt;code&gt;index.js&lt;/code&gt; for &lt;code&gt;entry point&lt;/code&gt;. This file is where you set your package&amp;rsquo;s exports:</source>
          <target state="translated">最後のコマンドは、 &lt;code&gt;package.json&lt;/code&gt; ファイルを作成し、パッケージ情報の入力を求めます。 &lt;code&gt;name&lt;/code&gt; 、 &lt;code&gt;version&lt;/code&gt; 、 &lt;code&gt;entry point&lt;/code&gt; すべてスキップできます。 &lt;code&gt;entry point&lt;/code&gt; はデフォルトの &lt;code&gt;index.js&lt;/code&gt; を使用できます。このファイルは、パッケージのエクスポートを設定する場所です。</target>
        </trans-unit>
        <trans-unit id="58ecbf3dede503a58bde3e045a3df89887a049a3" translate="yes" xml:space="preserve">
          <source>The last form will only work if your JavaScript implementation preserves the order of keys in objects. Most do, most of the time, but it&amp;rsquo;s up to you to be sure.</source>
          <target state="translated">最後のフォームは、JavaScript実装がオブジェクト内のキーの順序を保持している場合にのみ機能します。ほとんどの場合、大抵の場合は行いますが、確認するかどうかはあなた次第です。</target>
        </trans-unit>
        <trans-unit id="62face76ea24a25e14ec88678cac33ee4e338c66" translate="yes" xml:space="preserve">
          <source>The last node of the View&amp;rsquo;s rendered content.</source>
          <target state="translated">ビューのレンダリングされたコンテンツの最後のノード。</target>
        </trans-unit>
        <trans-unit id="27a18372e353012f1d14dab0863f5525adbb9bb5" translate="yes" xml:space="preserve">
          <source>The last top-level DOM node in this template instance.</source>
          <target state="translated">このテンプレートインスタンスの最後のトップレベル DOM ノード。</target>
        </trans-unit>
        <trans-unit id="02279ad83eb1b692260d7d9cde7b2b5d2ae56e80" translate="yes" xml:space="preserve">
          <source>The main Atmosphere website provides additional curation features like trending packages, package stars, and flags, but some of the other options can be faster if you&amp;rsquo;re trying to find a specific package. For example, you can use &lt;code&gt;meteor show kadira:flow-router&lt;/code&gt; from the command line to see the description of that package and different available versions.</source>
          <target state="translated">AtmosphereのメインWebサイトは、トレンドパッケージ、パッケージスター、フラグなどの追加のキュレーション機能を提供しますが、他のオプションのいくつかは、特定のパッケージを検索しようとすると高速になる場合があります。たとえば、コマンドラインから &lt;code&gt;meteor show kadira:flow-router&lt;/code&gt; を使用して、そのパッケージの説明と使用可能なさまざまなバージョンを確認できます。</target>
        </trans-unit>
        <trans-unit id="bad940316714a3ab0e6572294a28c9b8ae5f1015" translate="yes" xml:space="preserve">
          <source>The main advantage of this approach is that it is immediately clear when viewing the &lt;code&gt;Lists_show_page&lt;/code&gt; what behavior will occur when a user visits the page.</source>
          <target state="translated">このアプローチの主な利点は、 &lt;code&gt;Lists_show_page&lt;/code&gt; を表示すると、ユーザーがページにアクセスしたときにどのような動作が発生するかがすぐにわかることです。</target>
        </trans-unit>
        <trans-unit id="087cec891935cf1e492b59ed52df2b8bf65da3fe" translate="yes" xml:space="preserve">
          <source>The main function of an Atmosphere package is to contain source code (JS, CSS, and any transpiled languages) and assets (images, fonts, and more) that will be shared across different applications.</source>
          <target state="translated">Atmosphere パッケージの主な機能は、異なるアプリケーション間で共有されるソースコード (JS、CSS、および任意のトランスタイル言語)とアセット (画像、フォントなど)を格納することです。</target>
        </trans-unit>
        <trans-unit id="ac594fc5f09adad9be18a02fcebc34665789af54" translate="yes" xml:space="preserve">
          <source>The main function of the Meteor build tool is to run &amp;ldquo;build plugins&amp;rdquo;. These plugins define different parts of your app build process. Meteor puts heavy emphasis on reducing or removing build configuration files, so you won&amp;rsquo;t see any large build process config files like you would in Gulp or Webpack. The Meteor build process, and &lt;a href=&quot;structure#load-order&quot;&gt;file load order&lt;/a&gt;, is configured almost entirely through adding and removing packages to your app and putting files in specially named directories. For example, to get all of the newest stable ES2015 JavaScript features in your app, you just add the &lt;a href=&quot;http://docs.meteor.com/#/full/ecmascript&quot;&gt;&lt;code&gt;ecmascript&lt;/code&gt; package&lt;/a&gt;. This package provides support for ES2015 modules, which gives you even more fine grained control over file load order using ES2015 &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt;. As new Meteor releases add new features to this package you just get them for free.</source>
          <target state="translated">Meteorビルドツールの主な機能は、「ビルドプラグイン」を実行することです。これらのプラグインは、アプリのビルドプロセスのさまざまな部分を定義します。 Meteorはビルド構成ファイルの削減または削除に重点を置いているため、GulpやWebpackのような大きなビルドプロセス構成ファイルは表示されません。 Meteorのビルドプロセスと&lt;a href=&quot;structure#load-order&quot;&gt;ファイルの読み込み順序&lt;/a&gt;は、アプリへのパッケージの追加と削除、特別な名前のディレクトリへのファイルの配置によってほぼ完全に構成されます。たとえば、アプリで最新の安定したES2015 JavaScript機能をすべて取得するには、&lt;a href=&quot;http://docs.meteor.com/#/full/ecmascript&quot;&gt; &lt;code&gt;ecmascript&lt;/code&gt; パッケージを&lt;/a&gt;追加するだけです。このパッケージは、ES2015モジュールのサポートを提供します。これにより、ES2015 &lt;code&gt;import&lt;/code&gt; と &lt;code&gt;export&lt;/code&gt; 。Meteorの新しいリリースがこのパッケージに新しい機能を追加すると、無料で入手できます。</target>
        </trans-unit>
        <trans-unit id="9030d33310ed67928fe084c9847e6d27b43c18fe" translate="yes" xml:space="preserve">
          <source>The main thing enabled by the &lt;code&gt;ValidationError&lt;/code&gt; convention is simple integration between Methods and the forms that call them. In general, your app is likely to have a one-to-one mapping of forms in the UI to Methods. First, let&amp;rsquo;s define a Method for our business logic:</source>
          <target state="translated">&lt;code&gt;ValidationError&lt;/code&gt; 規則によって可能になる主なことは、メソッドとそれらを呼び出すフォームとの間の単純な統合です。一般に、アプリでは、UIのフォームとメソッドの1対1のマッピングが考えられます。まず、ビジネスロジックのメソッドを定義しましょう。</target>
        </trans-unit>
        <trans-unit id="c67aa737041c3f3797cf0aa256ed25cba5132582" translate="yes" xml:space="preserve">
          <source>The main thing to understand about how Blaze re-renders is that re-rendering happens at the level of helpers and template inclusions. Whenever the &lt;em&gt;data context&lt;/em&gt; of a component changes, it necessarily must re-run &lt;em&gt;all&lt;/em&gt; helpers and data accessors (as &lt;code&gt;this&lt;/code&gt; within the helper is the data context and thus will have changed).</source>
          <target state="translated">Blazeがどのように再レンダリングされるかを理解する上で最も重要なことは、再レンダリングがヘルパーとテンプレートインクルージョンのレベルで行われるということです。たび&lt;em&gt;データコンテキスト&lt;/em&gt;コンポーネントの変更は、それが必ずしも再実行する必要があり&lt;em&gt;、すべて&lt;/em&gt;のヘルパーとのデータアクセサを（として &lt;code&gt;this&lt;/code&gt; ヘルパー内のデータコンテキストであるため、変更されています）。</target>
        </trans-unit>
        <trans-unit id="05dafcc9b089b13ad60b26fd4f9f8201fac9c7c9" translate="yes" xml:space="preserve">
          <source>The mental model here is:</source>
          <target state="translated">ここでいうメンタルモデルとは</target>
        </trans-unit>
        <trans-unit id="9fe40d9ebf86fd4ddce617c1b48fd4df787dd561" translate="yes" xml:space="preserve">
          <source>The method of generating the &lt;code&gt;_id&lt;/code&gt; fields of new documents in this collection. Possible values:</source>
          <target state="translated">このコレクション内の新しいドキュメントの &lt;code&gt;_id&lt;/code&gt; フィールドを生成する方法。可能な値：</target>
        </trans-unit>
        <trans-unit id="4fd01fd0a1b0b9f41b2613c6143a80de785d255a" translate="yes" xml:space="preserve">
          <source>The minifier class must implement the method &lt;code&gt;processFilesForBundle&lt;/code&gt;. The first argument is a list of processed files and the options object specifies if the minifier is ran in production mode or development mode.</source>
          <target state="translated">minifierクラスは、メソッド &lt;code&gt;processFilesForBundle&lt;/code&gt; を実装する必要があります。最初の引数は処理されたファイルのリストであり、オプションオブジェクトはミニファイアがプロダクションモードと開発モードのどちらで実行されるかを指定します。</target>
        </trans-unit>
        <trans-unit id="6a944b35af3e4fbd8d5302f9527e421b0768f5c0" translate="yes" xml:space="preserve">
          <source>The most advanced mobile web framework is &lt;a href=&quot;http://ionicframework.com/docs/v2/&quot;&gt;Ionic 2&lt;/a&gt;, which uses Angular 2.</source>
          <target state="translated">最も高度なモバイルWebフレームワークは、Angular 2を使用する&lt;a href=&quot;http://ionicframework.com/docs/v2/&quot;&gt;Ionic&lt;/a&gt; 2です。</target>
        </trans-unit>
        <trans-unit id="0c2d88cbe5690b733be86f60121bc107d1acb1dd" translate="yes" xml:space="preserve">
          <source>The most important consideration is related to the way DDP, Meteor&amp;rsquo;s data loading protocol, communicates documents over the wire. The key thing to realize is that DDP sends changes to documents at the level of top-level document &lt;em&gt;fields&lt;/em&gt;. What this means is that if you have large and complex subfields on document that change often, DDP can send unnecessary changes over the wire.</source>
          <target state="translated">最も重要な考慮事項は、Meteorのデータ読み込みプロトコルであるDDPがネットワーク経由でドキュメントを通信する方法に関連しています。理解しておくべき重要なことは、DDPがトップレベルのドキュメント&lt;em&gt;フィールドの&lt;/em&gt;レベルでドキュメントに変更を送信することです。これが意味することは、頻繁に変更される文書に大きくて複雑なサブフィールドがある場合、DDPはネットワーク経由で不要な変更を送信できるということです。</target>
        </trans-unit>
        <trans-unit id="041bbfac67b8faad4b90349044927ca9c48e25c4" translate="yes" xml:space="preserve">
          <source>The most important thing to keep in mind is that user documents are certain to contain private data about your users. In particular, the user document includes hashed password data and access keys for external APIs. This means it&amp;rsquo;s critically important to &lt;a href=&quot;http://guide.meteor.com/security.html#fields&quot;&gt;filter the fields&lt;/a&gt; of the user document that you send to any client.</source>
          <target state="translated">覚えておくべき最も重要なことは、ユーザードキュメントにはユーザーに関するプライベートデータが確実に含まれているということです。特に、ユーザードキュメントには、ハッシュされたパスワードデータと外部APIのアクセスキーが含まれています。つまり、クライアントに送信するユーザードキュメントの&lt;a href=&quot;http://guide.meteor.com/security.html#fields&quot;&gt;フィールド&lt;/a&gt;をフィルタリングすることが非常に重要です。</target>
        </trans-unit>
        <trans-unit id="29635c76fe31daf9bef9734f9375360e554deb6e" translate="yes" xml:space="preserve">
          <source>The most popular CSS post-processor right now is &lt;a href=&quot;https://github.com/postcss/postcss&quot;&gt;PostCSS&lt;/a&gt;, which supports a variety of plugins. &lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;Autoprefixer&lt;/a&gt; is perhaps the most useful plugin, since it enables you to stop worrying about browser prefixes and compatibility and write standards-compliant CSS. No more copying 5 different statements every time you want a CSS gradient - you can just write a standard gradient without any prefixes and Autoprefixer handles it for you.</source>
          <target state="translated">現在最も人気のあるCSSポストプロセッサは&lt;a href=&quot;https://github.com/postcss/postcss&quot;&gt;PostCSS&lt;/a&gt;で、さまざまなプラグインをサポートしています。&lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;Autoprefixer&lt;/a&gt;は、ブラウザーのプレフィックスと互換性について心配する必要がなくなり、標準に準拠したCSSを作成できるため、おそらく最も便利なプラグインです。CSSグラデーションが必要になるたびに5つの異なるステートメントをコピーする必要はもうありません。プレフィックスを付けずに標準のグラデーションを作成するだけで、Autoprefixerが処理します。</target>
        </trans-unit>
        <trans-unit id="41100d8581602da5152d964141f9e1cb7c4ee177" translate="yes" xml:space="preserve">
          <source>The most popular package for role-based permissions in Meteor is &lt;a href=&quot;https://atmospherejs.com/alanning/roles&quot;&gt;&lt;code&gt;alanning:roles&lt;/code&gt;&lt;/a&gt;. For example, here is how you would make a user into an administrator, or a moderator:</source>
          <target state="translated">Meteorでのロールベースのパーミッションの最も人気のあるパッケージは&lt;a href=&quot;https://atmospherejs.com/alanning/roles&quot;&gt; &lt;code&gt;alanning:roles&lt;/code&gt; &lt;/a&gt;です。たとえば、ユーザーを管理者またはモデレーターにする方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="33f95663bdb44f0e22fe580aa85febeeebebb1f8" translate="yes" xml:space="preserve">
          <source>The most powerful feature of Meteor&amp;rsquo;s build system is the ability to define custom build plugins. If you find yourself writing scripts that mangle one type of file into another, merge multiple files, or something else, it&amp;rsquo;s likely that these scripts would be better implemented as a build plugin. The &lt;code&gt;ecmascript&lt;/code&gt;, &lt;code&gt;templating&lt;/code&gt;, and &lt;code&gt;coffeescript&lt;/code&gt; packages are all implemented as build plugins, so you can replace them with your own versions if you want to!</source>
          <target state="translated">Meteorのビルドシステムの最も強力な機能は、カスタムビルドプラグインを定義する機能です。ある種類のファイルを別の種類のファイルに変換したり、複数のファイルをマージしたりするスクリプトを作成している場合は、これらのスクリプトがビルドプラグインとして実装されている可能性があります。 &lt;code&gt;ecmascript&lt;/code&gt; 、 &lt;code&gt;templating&lt;/code&gt; 、および &lt;code&gt;coffeescript&lt;/code&gt; あなたがしたい場合は、独自のバージョンに置き換えることができるようにパッケージはすべて、ビルドのプラグインとして実装されています！</target>
        </trans-unit>
        <trans-unit id="1ee41d922eff780ecaff3ef99605a3b9119cf5c7" translate="yes" xml:space="preserve">
          <source>The mouse button is newly down or up.</source>
          <target state="translated">マウスのボタンが新しく下になったり、上になったりします。</target>
        </trans-unit>
        <trans-unit id="8fbb5613850e679b2f68299f9baa31ac98b9b2ef" translate="yes" xml:space="preserve">
          <source>The name of the Meteor method being used to login.</source>
          <target state="translated">ログインに使用しているMeteorメソッドの名前です。</target>
        </trans-unit>
        <trans-unit id="2b8becb5b6c6f747f4f4fcec5d5ba0b95c3d5d6c" translate="yes" xml:space="preserve">
          <source>The name of the collection that contains the changed document.</source>
          <target state="translated">変更されたドキュメントを含むコレクションの名前。</target>
        </trans-unit>
        <trans-unit id="a110db700050ed25131d869b59bbbee4b90483fa" translate="yes" xml:space="preserve">
          <source>The name of the collection that contains the new document.</source>
          <target state="translated">新しいドキュメントを含むコレクションの名前。</target>
        </trans-unit>
        <trans-unit id="12890a4496f8bd405aef15e465058d6e53f8670c" translate="yes" xml:space="preserve">
          <source>The name of the collection that the document has been removed from.</source>
          <target state="translated">ドキュメントが削除されたコレクションの名前。</target>
        </trans-unit>
        <trans-unit id="aededf02ab8585133ad16566be90bc597b461caa" translate="yes" xml:space="preserve">
          <source>The name of the collection. If null, creates an unmanaged (unsynchronized) local collection.</source>
          <target state="translated">コレクションの名前。nullの場合、管理されていない(非同期の)ローカルコレクションを作成します。</target>
        </trans-unit>
        <trans-unit id="cee22e1cf3b1b10904d1573dfc4e5f31b03e98e4" translate="yes" xml:space="preserve">
          <source>The name of the helper function you are defining.</source>
          <target state="translated">定義しているヘルパー関数の名前。</target>
        </trans-unit>
        <trans-unit id="3cefe07ca40ac0098c2ecef7ab586bdb550e6c49" translate="yes" xml:space="preserve">
          <source>The name of the package to require.</source>
          <target state="translated">必要とするパッケージの名前。</target>
        </trans-unit>
        <trans-unit id="920ff863539ce75133ab803119feacd0042e2282" translate="yes" xml:space="preserve">
          <source>The name of the session variable to return</source>
          <target state="translated">返すセッション変数の名前</target>
        </trans-unit>
        <trans-unit id="5172527e74ca00b58bba7ad9c1f71a91e09af72f" translate="yes" xml:space="preserve">
          <source>The name of the session variable to test</source>
          <target state="translated">テストするセッション変数の名前</target>
        </trans-unit>
        <trans-unit id="a06673519c2a8a449084e67603a463a768ba9138" translate="yes" xml:space="preserve">
          <source>The name of the template to include.</source>
          <target state="translated">インクルードするテンプレートの名前。</target>
        </trans-unit>
        <trans-unit id="176d65e18cc7bf7c5ed547ad17c8014fd2faa317" translate="yes" xml:space="preserve">
          <source>The name of this type of View. View names may be used to identify particular kinds of Views in code, but more often they simply aid in debugging and comprehensibility of the View tree. Views generated by Meteor have names like &amp;ldquo;Template.foo&amp;rdquo; and &amp;ldquo;if&amp;rdquo;.</source>
          <target state="translated">このタイプのビューの名前。ビュー名は、コード内で特定の種類のビューを識別するために使用できますが、多くの場合、ビューツリーのデバッグと理解を容易にするのに役立ちます。Meteorによって生成されたビューには、「Template.foo」や「if」などの名前があります。</target>
        </trans-unit>
        <trans-unit id="5ead238c6d0a0b1e2991bbc9d03dff84ecb261c1" translate="yes" xml:space="preserve">
          <source>The new document's ID.</source>
          <target state="translated">新しいドキュメントのID。</target>
        </trans-unit>
        <trans-unit id="f640c1c0168d245bf62dac0b58ef4a4ea14d0f23" translate="yes" xml:space="preserve">
          <source>The new value for &lt;code&gt;key&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; の新しい値</target>
        </trans-unit>
        <trans-unit id="5683e458ca2c49f3ed860b926a3f0940a626811a" translate="yes" xml:space="preserve">
          <source>The newer variant of &lt;code&gt;#each&lt;/code&gt; doesn&amp;rsquo;t change the data context but introduces a new variable that can be used in the body to refer to the current item:</source>
          <target state="translated">&lt;code&gt;#each&lt;/code&gt; の新しいバリアントはデータコンテキストを変更しませんが、本文で現在のアイテムを参照するために使用できる新しい変数を導入します。</target>
        </trans-unit>
        <trans-unit id="0f6934cd801fccda166cd1d81a676851c4932e22" translate="yes" xml:space="preserve">
          <source>The node that will be the parent of the rendered template. It must be an Element node.</source>
          <target state="translated">レンダリングされたテンプレートの親となるノード。Elementノードでなければなりません。</target>
        </trans-unit>
        <trans-unit id="6720aec8906bdb559b3f17f4d0beb9f284062970" translate="yes" xml:space="preserve">
          <source>The number of bytes of binary data to allocate.</source>
          <target state="translated">割り当てるバイナリデータのバイト数。</target>
        </trans-unit>
        <trans-unit id="dba728d279234fa11e3c96752fea811c330fc820" translate="yes" xml:space="preserve">
          <source>The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.</source>
          <target state="translated">パスワードをリセットするためのリンクが送信されてから、トークンの有効期限が切れ、ユーザーがリンクでパスワードをリセットできなくなるまでの日数を指定します。デフォルトは3です。</target>
        </trans-unit>
        <trans-unit id="fbf37e56e9df9c710871811ee1641a93403770db" translate="yes" xml:space="preserve">
          <source>The number of days from when a link to set inital password is sent until token expires and user can't set password with the link anymore. Defaults to 30.</source>
          <target state="translated">初期パスワードを設定するためのリンクが送信されてから、トークンの有効期限が切れて、ユーザーがリンクでパスワードを設定できなくなるまでの日数を指定します。デフォルトは30です。</target>
        </trans-unit>
        <trans-unit id="8dfaa8ca88d40642840c1c14b552a064b807998e" translate="yes" xml:space="preserve">
          <source>The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to &lt;code&gt;null&lt;/code&gt; to disable login expiration.</source>
          <target state="translated">ユーザーがログインしてからトークンの有効期限が切れてログアウトされるまでの日数。デフォルトは90 です。ログインの有効期限を無効にするには、 &lt;code&gt;null&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="ea882e6e592495d4f1fdf5bb546bcff8a2a280da" translate="yes" xml:space="preserve">
          <source>The number of levels beyond the current data context to look. Defaults to 1.</source>
          <target state="translated">現在のデータ・コンテキストを超えて参照するレベルの数を指定します。既定値は 1 です。</target>
        </trans-unit>
        <trans-unit id="ae4898ef734061446e0764ca241fb8bb5c700814" translate="yes" xml:space="preserve">
          <source>The number of times the View has been rendered, including the current time if the View is in the process of being rendered or re-rendered.</source>
          <target state="translated">ビューがレンダリングされた回数、レンダリング中または再レンダリング中の場合は現在の時刻も含めて表示されます。</target>
        </trans-unit>
        <trans-unit id="abcbf76bd08ffde7566c6e27b725b9d0896f531e" translate="yes" xml:space="preserve">
          <source>The number of times the client has tried to reconnect since the connection was lost. 0 when connected.</source>
          <target state="translated">接続が切れてからクライアントが再接続を試みた回数。接続されている場合は0。</target>
        </trans-unit>
        <trans-unit id="fa479a8e3972469522ab5d930e7d1250954d3cb0" translate="yes" xml:space="preserve">
          <source>The observer fetches the current set of documents matching the cursor, and passes them back to the subscription (via the &lt;code&gt;this.added()&lt;/code&gt; callback).</source>
          <target state="translated">オブザーバーは、カーソルに一致するドキュメントの現在のセットをフェッチし、（ &lt;code&gt;this.added()&lt;/code&gt; コールバックを介して）サブスクリプションに返します。</target>
        </trans-unit>
        <trans-unit id="53c688a2194b2f27c34a7591e8d0eaa760d0d64a" translate="yes" xml:space="preserve">
          <source>The observer observes the query. Typically, it &lt;a href=&quot;https://github.com/meteor/meteor/wiki/Oplog-Observe-Driver&quot;&gt;uses MongoDB&amp;rsquo;s Oplog&lt;/a&gt; to notice changes that affect the query. If it sees a relevant change, like a new matching document or a change in a field on a matching document, it calls into the subscription (via &lt;code&gt;.added()&lt;/code&gt;, &lt;code&gt;.changed()&lt;/code&gt; or &lt;code&gt;.removed()&lt;/code&gt;), which again sends the changes to the mergebox, and then to the client via DDP.</source>
          <target state="translated">オブザーバーはクエリを監視します。通常、&lt;a href=&quot;https://github.com/meteor/meteor/wiki/Oplog-Observe-Driver&quot;&gt;MongoDBのOplog&lt;/a&gt;を使用して、クエリに影響を与える変更を通知します。それは新しいマッチング文書または照合文書上の磁界の変化などの関連する変更を、見ている場合（経て、それがサブスクリプションを呼び出します &lt;code&gt;.added()&lt;/code&gt; 、 &lt;code&gt;.changed()&lt;/code&gt; または &lt;code&gt;.removed()&lt;/code&gt; ）、再び送信しますマージボックスに変更され、次にDDP経由でクライアントに変更されます。</target>
        </trans-unit>
        <trans-unit id="a30a5dd8e1c97f27469429c022c3fb3c77e8af44" translate="yes" xml:space="preserve">
          <source>The only reason not to use &lt;code&gt;{{#each .. in}}&lt;/code&gt; would be because it makes it difficult to access the &lt;code&gt;todo&lt;/code&gt; symbol inside event handlers. Typically the solution to this is to use a sub-component to render the inside of the loop:</source>
          <target state="translated">&lt;code&gt;{{#each .. in}}&lt;/code&gt; を使用しない唯一の理由は、イベントハンドラ内で &lt;code&gt;todo&lt;/code&gt; シンボルにアクセスすることが困難になるためです。通常、これに対する解決策は、サブコンポーネントを使用してループの内側をレンダリングすることです。</target>
        </trans-unit>
        <trans-unit id="9db3a42ebc5acbaa53c1172351d4309de2d80567" translate="yes" xml:space="preserve">
          <source>The opposite scenario occurs when you want to publish data to be consumed by a 3rd party, typically over REST. If the data we want to publish is the same as what we already publish via a publication, then we can use the &lt;a href=&quot;https://atmospherejs.com/simple/rest&quot;&gt;simple:rest&lt;/a&gt; package to do this really easily.</source>
          <target state="translated">反対のシナリオは、サードパーティが消費するデータを公開する場合に発生します。通常はRESTを介して行われます。パブリッシュするデータがパブリケーションを介してすでにパブリッシュするデータと同じである場合、&lt;a href=&quot;https://atmospherejs.com/simple/rest&quot;&gt;simple：rest&lt;/a&gt;パッケージを使用してこれを非常に簡単に行うことができます。</target>
        </trans-unit>
        <trans-unit id="bcde54f116d99f5d06808179c05f7ba6f1e4e9bf" translate="yes" xml:space="preserve">
          <source>The page is reloaded and the web view re-requests the assets from the local web server</source>
          <target state="translated">ページがリロードされ、ウェブビューはローカルのウェブサーバーからアセットを再要求します。</target>
        </trans-unit>
        <trans-unit id="80cd78cf234184e72a37dc201f7f4bfe9d15c435" translate="yes" xml:space="preserve">
          <source>The path of the asset, relative to the application's &lt;code&gt;private&lt;/code&gt; subdirectory.</source>
          <target state="translated">アプリケーションの &lt;code&gt;private&lt;/code&gt; サブディレクトリに対するアセットのパス。</target>
        </trans-unit>
        <trans-unit id="521a81640f8ab9eac4784c022ded2d4326c35d63" translate="yes" xml:space="preserve">
          <source>The pattern defining affected domains or URLs.</source>
          <target state="translated">影響を受けるドメインまたはURLを定義するパターン。</target>
        </trans-unit>
        <trans-unit id="1bb24703e108f8284fd72e3479806a47df145761" translate="yes" xml:space="preserve">
          <source>The pattern to match &lt;code&gt;value&lt;/code&gt; against</source>
          <target state="translated">パターンが一致する &lt;code&gt;value&lt;/code&gt; に対しての</target>
        </trans-unit>
        <trans-unit id="a49d39bb128771a179d0edca97783db6bfdd1f6c" translate="yes" xml:space="preserve">
          <source>The place to get started with Meteor is the &lt;a href=&quot;https://www.meteor.com/tutorials/blaze/creating-an-app&quot;&gt;official tutorial&lt;/a&gt;.</source>
          <target state="translated">Meteorを使い始める場所は&lt;a href=&quot;https://www.meteor.com/tutorials/blaze/creating-an-app&quot;&gt;公式チュートリアル&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="556bd230d169ee45ecc4f1fc92dc61ae62f450a8" translate="yes" xml:space="preserve">
          <source>The pointer enters or leaves the bounds of an element. These events do not bubble.</source>
          <target state="translated">ポインタが要素の境界に入ったり離れたりします。これらのイベントはバブルしません。</target>
        </trans-unit>
        <trans-unit id="12b9ea0078874b778b28fde7c6f18922178d5a9e" translate="yes" xml:space="preserve">
          <source>The primary challenge is properly sharing code between the different applications you are building. The simplest approach to deal with this issue is to simply deploy the &lt;em&gt;same&lt;/em&gt; application on different web servers, controlling the behavior via different &lt;a href=&quot;deployment#environment&quot;&gt;settings&lt;/a&gt;. This approach allows you to easily deploy different versions with different scaling behavior but doesn&amp;rsquo;t enjoy most of the other advantages stated above.</source>
          <target state="translated">主な課題は、構築しているさまざまなアプリケーション間でコードを適切に共有することです。この問題に対処する最も簡単な方法は、&lt;em&gt;同じ&lt;/em&gt;アプリケーションを異なるWebサーバーにデプロイし、異なる&lt;a href=&quot;deployment#environment&quot;&gt;設定で&lt;/a&gt;動作を制御することです。このアプローチでは、さまざまなスケーリング動作でさまざまなバージョンを簡単にデプロイできますが、上記の他の利点のほとんどを享受できません。</target>
        </trans-unit>
        <trans-unit id="51b06a1c4c72e4d0ba519e2db4fda58b6aa5f310" translate="yes" xml:space="preserve">
          <source>The primary way to test your application in Meteor is the &lt;code&gt;meteor test&lt;/code&gt; command.</source>
          <target state="translated">Meteorでアプリケーションをテストする主な方法は、 &lt;code&gt;meteor test&lt;/code&gt; コマンドです。</target>
        </trans-unit>
        <trans-unit id="2f82a21783db5564684bce916eecdb8fff7a0fe6" translate="yes" xml:space="preserve">
          <source>The problem with this mechanism is that it overrides complete files, so it is not a good solution for customizing &lt;code&gt;config.xml&lt;/code&gt;. Replacing the generated version with your own file means you lose all configuration information set by the build process and by installed plugins, which will likely break your app.</source>
          <target state="translated">このメカニズムの問題は、完全なファイルを上書きするため、 &lt;code&gt;config.xml&lt;/code&gt; をカスタマイズするための適切なソリューションではありません。生成されたバージョンを独自のファイルで置き換えると、ビルドプロセスとインストールされたプラグインによって設定されたすべての構成情報が失われ、アプリが破損する可能性があります。</target>
        </trans-unit>
        <trans-unit id="cbc08b261ed5c2929402efaa830642474a0ba56e" translate="yes" xml:space="preserve">
          <source>The publication calls the &lt;code&gt;.ready()&lt;/code&gt; callback, which sends the DDP &lt;code&gt;ready&lt;/code&gt; message to the client. The subscription handle on the client is marked as ready.</source>
          <target state="translated">パブリケーションは &lt;code&gt;.ready()&lt;/code&gt; コールバックを呼び出し、コールバックはDDP &lt;code&gt;ready&lt;/code&gt; メッセージをクライアントに送信します。クライアントのサブスクリプションハンドルが準備完了としてマークされています。</target>
        </trans-unit>
        <trans-unit id="57a8d0ec773fc1b82243adbf0c7b6d3bba0abed5" translate="yes" xml:space="preserve">
          <source>The publication handler identifies that the return value is a cursor. This enables a convenient mode for publishing cursors.</source>
          <target state="translated">パブリッシュハンドラは、戻り値がカーソルであることを識別します。これにより、カーソルを発行するための便利なモードが可能になります。</target>
        </trans-unit>
        <trans-unit id="c51dcc1727b3af5900a6cc6c56c706886097ed5b" translate="yes" xml:space="preserve">
          <source>The reactive data source &lt;em&gt;invalidates&lt;/em&gt; the autorun computation (marks it so that it re-runs in the next Tracker flush cycle).</source>
          <target state="translated">リアクティブデータソースは自動実行計算を&lt;em&gt;無効に&lt;/em&gt;します（次のトラッカーフラッシュサイクルで再実行されるようにマークを付けます）。</target>
        </trans-unit>
        <trans-unit id="309d6f42b267e108ba41490cedacb95ce33b8a65" translate="yes" xml:space="preserve">
          <source>The reason Dependencies do not store data themselves is that it can be useful to associate multiple Dependencies with the same piece of data. For example, one Dependency might represent the result of a database query, while another might represent just the number of documents in the result. A Dependency could represent whether the weather is sunny or not, or whether the temperature is above freezing. &lt;a href=&quot;#session_equals&quot;&gt;&lt;code&gt;Session.equals&lt;/code&gt;&lt;/a&gt; is implemented this way for efficiency. When you call &lt;code&gt;Session.equals('weather', 'sunny')&lt;/code&gt;, the current computation is made to depend on an internal Dependency that does not change if the weather goes from, say, &lt;code&gt;rainy&lt;/code&gt; to &lt;code&gt;cloudy&lt;/code&gt;.</source>
          <target state="translated">依存関係がデータ自体を格納しない理由は、複数の依存関係を同じデータに関連付けると便利な場合があるためです。たとえば、1つの依存関係がデータベースクエリの結果を表し、別の依存関係が結果のドキュメント数のみを表す場合があります。依存関係は、天気が晴れているかどうか、または気温が氷点を超えているかどうかを表すことができます。&lt;a href=&quot;#session_equals&quot;&gt; &lt;code&gt;Session.equals&lt;/code&gt; &lt;/a&gt;は、効率を高めるためにこの方法で実装されています。 &lt;code&gt;Session.equals('weather', 'sunny')&lt;/code&gt; を呼び出すと、現在の計算は、天候がたとえば &lt;code&gt;rainy&lt;/code&gt; から &lt;code&gt;cloudy&lt;/code&gt; ても変化しない内部の依存関係に依存するようになります。</target>
        </trans-unit>
        <trans-unit id="c001cca251f1269a800c30cf115f1757697ea195" translate="yes" xml:space="preserve">
          <source>The reason this is needed is because updates delivered through hot code push replace the initially bundled &lt;code&gt;index.html&lt;/code&gt; with a freshly generated one. If the &lt;code&gt;ROOT_URL&lt;/code&gt; on your server hasn&amp;rsquo;t been set, it defaults to &lt;code&gt;localhost:3000&lt;/code&gt;, and this would leave the app unable to connect to the server, both for data loading and for receiving further hot code pushes. In Meteor 1.3, we protect against this by blocking updates that would change the &lt;code&gt;ROOT_URL&lt;/code&gt; to &lt;code&gt;localhost&lt;/code&gt;, but the consequence of this is that hot code push is disabled until you configure &lt;code&gt;ROOT_URL&lt;/code&gt; correctly.</source>
          <target state="translated">これが必要な理由は、ホットコードプッシュによって配信される更新が、最初にバンドルされた &lt;code&gt;index.html&lt;/code&gt; を新しく生成されたものに置き換えるためです。サーバーの &lt;code&gt;ROOT_URL&lt;/code&gt; が設定されていない場合は、デフォルトで &lt;code&gt;localhost:3000&lt;/code&gt; に設定されます。これにより、データのロードとホットコードプッシュの受信の両方のために、アプリがサーバーに接続できなくなります。 Meteor 1.3では、 &lt;code&gt;ROOT_URL&lt;/code&gt; を &lt;code&gt;localhost&lt;/code&gt; に変更する更新をブロックすることでこれを防ぎますが、 &lt;code&gt;ROOT_URL&lt;/code&gt; を正しく設定するまで、ホットコードプッシュは無効になります。</target>
        </trans-unit>
        <trans-unit id="ea4ad2f495ec6f870bb27648ac9cfca44b40af11" translate="yes" xml:space="preserve">
          <source>The rendered template will update reactively in response to data changes until the View is removed using &lt;a href=&quot;#Blaze-remove&quot;&gt;&lt;code&gt;Blaze.remove&lt;/code&gt;&lt;/a&gt; or the View&amp;rsquo;s parent element is removed by Meteor or jQuery.</source>
          <target state="translated">レンダリングされたテンプレートは、&lt;a href=&quot;#Blaze-remove&quot;&gt; &lt;code&gt;Blaze.remove&lt;/code&gt; &lt;/a&gt;を使用してビューが削除されるか、MeteorまたはjQueryによってビューの親要素が削除されるまで、データの変更に応じて反応的に更新されます。</target>
        </trans-unit>
        <trans-unit id="346fb3496c3ed7d82e3d8d06285355dda446588d" translate="yes" xml:space="preserve">
          <source>The return value from &lt;code&gt;Blaze.render&lt;/code&gt; or &lt;code&gt;Blaze.renderWithData&lt;/code&gt;, or the &lt;code&gt;view&lt;/code&gt; property of a Blaze.Template instance. Calling &lt;code&gt;Blaze.remove(Template.instance().view)&lt;/code&gt; from within a template event handler will destroy the view as well as that template and trigger the template's &lt;code&gt;onDestroyed&lt;/code&gt; handlers.</source>
          <target state="translated">&lt;code&gt;Blaze.render&lt;/code&gt; または &lt;code&gt;Blaze.renderWithData&lt;/code&gt; からの戻り値、またはBlaze.Templateインスタンスの &lt;code&gt;view&lt;/code&gt; プロパティ。テンプレートイベントハンドラー内から &lt;code&gt;Blaze.remove(Template.instance().view)&lt;/code&gt; を呼び出すと、ビューとそのテンプレートが破棄され、テンプレートの &lt;code&gt;onDestroyed&lt;/code&gt; ハンドラーがトリガーされます。</target>
        </trans-unit>
        <trans-unit id="0ab08929e21ebfd079d0562223de60b4a09e6f70" translate="yes" xml:space="preserve">
          <source>The return value of the Method simulation is discarded, unless the &lt;code&gt;returnStubValue&lt;/code&gt; option is passed when calling the Method, in which case it is returned to the Method caller. ValidatedMethod passes this option by default.</source>
          <target state="translated">メソッドの呼び出し時に &lt;code&gt;returnStubValue&lt;/code&gt; オプションが渡されない限り、メソッドシミュレーションの戻り値は破棄されます。この場合、メソッドの呼び出し元に返されます。ValidatedMethodは、デフォルトでこのオプションを渡します。</target>
        </trans-unit>
        <trans-unit id="1bd226c832ab492024761da3688ff4ca08a6a08b" translate="yes" xml:space="preserve">
          <source>The reusable sub-component can then use the &lt;code&gt;hasChanges&lt;/code&gt; argument to determine if it should show some kind of callout to the user to indicate changes are available, and then use the &lt;code&gt;onShowChanges&lt;/code&gt; callback to trigger them to be shown.</source>
          <target state="translated">次に、再利用可能なサブコンポーネントは、 &lt;code&gt;hasChanges&lt;/code&gt; 引数を使用して、変更が利用可能であることを示すためにユーザーに何らかのコールアウトを表示する必要があるかどうかを判断し、 &lt;code&gt;onShowChanges&lt;/code&gt; コールバックを使用して変更を表示します。</target>
        </trans-unit>
        <trans-unit id="d7398f7e34b816d147c67530ad472fee00ff0e8b" translate="yes" xml:space="preserve">
          <source>The role URLs play in a client-rendered app, and how it&amp;rsquo;s different from a traditional server-rendered app.</source>
          <target state="translated">URLがクライアントレンダリングアプリで果たす役割と、従来のサーバーレンダリングアプリとの違い。</target>
        </trans-unit>
        <trans-unit id="12ec5d01ec42e9704e010290897925f6ffe6f076" translate="yes" xml:space="preserve">
          <source>The runtime environment</source>
          <target state="translated">ランタイム環境</target>
        </trans-unit>
        <trans-unit id="9afa6d691c99313dd9b95ca03d32651044f3ba8a" translate="yes" xml:space="preserve">
          <source>The same debugging functionality can be achieved by adding the &lt;code&gt;--debug-port &amp;lt;port&amp;gt;&lt;/code&gt; option to other &lt;code&gt;meteor&lt;/code&gt; tool commands, such as &lt;code&gt;meteor run&lt;/code&gt; and &lt;code&gt;meteor test-packages&lt;/code&gt;.</source>
          <target state="translated">同じデバッグ機能は、-- &lt;code&gt;--debug-port &amp;lt;port&amp;gt;&lt;/code&gt; オプションを &lt;code&gt;meteor run&lt;/code&gt; や &lt;code&gt;meteor test-packages&lt;/code&gt; などの他の &lt;code&gt;meteor&lt;/code&gt; ツールコマンドに追加することで実現できます。</target>
        </trans-unit>
        <trans-unit id="702dec1a6bf9b4464cba0750cef4f3711229ca75" translate="yes" xml:space="preserve">
          <source>The same syntax can be used for &lt;code&gt;api.use&lt;/code&gt;, &lt;code&gt;api.imply&lt;/code&gt;, and &lt;code&gt;api.export&lt;/code&gt;.</source>
          <target state="translated">同じ構文を &lt;code&gt;api.use&lt;/code&gt; 、 &lt;code&gt;api.imply&lt;/code&gt; 、および &lt;code&gt;api.export&lt;/code&gt; に使用できます。</target>
        </trans-unit>
        <trans-unit id="d9c0308c51f25dae18970cb3a07fdc1cd767a80a" translate="yes" xml:space="preserve">
          <source>The same template may occur many times on a page, and these occurrences are called template instances. Template instances have a life cycle of being created, put into the document, and later taken out of the document and destroyed. Meteor manages these stages for you, including determining when a template instance has been removed or replaced and should be cleaned up. You can associate data with a template instance, and you can access its DOM nodes when it is in the document.</source>
          <target state="translated">同じテンプレートがページ上に何度も出現することがあり、これらの出現をテンプレートインスタンスと呼びます。テンプレートインスタンスには、作成され、ドキュメントに挿入され、後にドキュメントから取り出されて破棄されるというライフサイクルがあります。Meteorは、テンプレートインスタンスが削除されたり置き換えられたりしたときに、クリーンアップすべきかどうかを判断することも含めて、これらの段階を管理します。テンプレートインスタンスにデータを関連付けることができ、それがドキュメント内にあるときにそのDOMノードにアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="64032b8927e78661e3f868ef314eb3f245c7dc6d" translate="yes" xml:space="preserve">
          <source>The same way that you don&amp;rsquo;t read English sentences one word at a time, you don&amp;rsquo;t read code one token at a time. Mostly you just look at the shape of a certain expression, or the way it highlights in your editor, and assume what it does. If the style of every bit of code is consistent, that ensures that bits of code that look the same actually &lt;em&gt;are&lt;/em&gt; the same - there isn&amp;rsquo;t any hidden punctuation or gotchas that you don&amp;rsquo;t expect, so you can focus on understanding the logic instead of the symbols. One example of this is indentation - while in JavaScript, indentation is not meaningful, it&amp;rsquo;s helpful to have all of your code consistently indented so that you don&amp;rsquo;t need to read all of the brackets in detail to see what is going on.</source>
          <target state="translated">一度に1つの単語の英語の文章を読み取らないのと同じように、一度に1つのトークンのコードを読み取ることはありません。ほとんどの場合、特定の式の形状、またはエディターでの強調表示の方法を見て、それが何をするかを想定します。コードのすべてのビットのスタイルは同じように見えるコードのビットが実際に確実にすることを、一貫している場合&lt;em&gt;している&lt;/em&gt;あなたは、ロジックを理解することに集中できるように、あなたが期待していないことをあらゆる隠されていない句読点や落とし穴がある-同じシンボルの代わりに。これの1つの例はインデントです。JavaScriptではインデントは意味がありませんが、すべてのコードを一貫してインデントすることは、何が起こっているのかを確認するためにすべての大括弧を詳細に読む必要がないために役立ちます。</target>
        </trans-unit>
        <trans-unit id="3bd72f15648c21b68e1c62222d240964640ae880" translate="yes" xml:space="preserve">
          <source>The second is when the URL is valid, but doesn&amp;rsquo;t actually match any data. In this case, the URL matches a route, but once the route has successfully subscribed, it discovers there is no data. It usually makes sense in this case for the page component (which subscribes and fetches the data) to render a not-found template instead of the usual template for the page:</source>
          <target state="translated">2つ目は、URLは有効ですが、実際にはどのデータとも一致しない場合です。この場合、URLはルートと一致しますが、ルートが正常にサブスクライブすると、データがないことがわかります。この場合、通常、ページコンポーネント（データをサブスクライブしてフェッチする）が、ページの通常のテンプレートではなく、見つからないテンプレートをレンダリングすることは理にかなっています。</target>
        </trans-unit>
        <trans-unit id="4390553f93c001bde55a8e234067b449495d68dd" translate="yes" xml:space="preserve">
          <source>The section above talked about JavaScript code in general - you can easily apply it in any JavaScript application, not just with Meteor apps. However, there are some style questions that are Meteor-specific, in particular how to name and structure all of the different components of your app.</source>
          <target state="translated">上記のセクションでは、一般的なJavaScriptコードについて説明しました。Meteorアプリだけでなく、どんなJavaScriptアプリケーションにも簡単に適用することができます。しかし、Meteor特有のスタイルの質問がいくつかあり、特にアプリのすべての異なるコンポーネントの名前の付け方や構造についてです。</target>
        </trans-unit>
        <trans-unit id="4ca89d1440c014241d0e14e42159bf3494b1c84e" translate="yes" xml:space="preserve">
          <source>The security surface area of a Meteor app.</source>
          <target state="translated">流星アプリのセキュリティ表面積。</target>
        </trans-unit>
        <trans-unit id="72bbc6dfb75bf94765ca8935d2157cc923c27d4e" translate="yes" xml:space="preserve">
          <source>The server &lt;em&gt;explicitly&lt;/em&gt; waits until all the data is sent down (the new subscription is ready) for the new subscription before removing the data from the old subscription. The idea here is to avoid flicker&amp;mdash;you can, if desired, continue to show the old subscription&amp;rsquo;s data until the new data is ready, then instantly switch over to the new subscription&amp;rsquo;s complete data set.</source>
          <target state="translated">サーバーは、古いサブスクリプションからデータを削除する前に、新しいサブスクリプションのすべてのデータが送信される（新しいサブスクリプションの準備ができている）まで&lt;em&gt;明示的に&lt;/em&gt;待機します。ここでの考え方はちらつきを避けることです。必要に応じて、新しいデータの準備ができるまで古いサブスクリプションのデータを表示し続け、すぐに新しいサブスクリプションの完全なデータセットに切り替えることができます。</target>
        </trans-unit>
        <trans-unit id="746fab1fce56a89f377ea80e4afe7658f62e7c56" translate="yes" xml:space="preserve">
          <source>The server connection that will manage this collection. Uses the default connection if not specified. Pass the return value of calling &lt;a href=&quot;#ddp_connect&quot;&gt;&lt;code&gt;DDP.connect&lt;/code&gt;&lt;/a&gt; to specify a different server. Pass &lt;code&gt;null&lt;/code&gt; to specify no connection. Unmanaged (&lt;code&gt;name&lt;/code&gt; is null) collections cannot specify a connection.</source>
          <target state="translated">このコレクションを管理するサーバー接続。指定しない場合は、デフォルトの接続を使用します。&lt;a href=&quot;#ddp_connect&quot;&gt; &lt;code&gt;DDP.connect&lt;/code&gt; &lt;/a&gt;の呼び出しの戻り値を渡して、別のサーバーを指定します。接続を指定しない場合は &lt;code&gt;null&lt;/code&gt; を渡します。アンマネージ（ &lt;code&gt;name&lt;/code&gt; がnull）コレクションは接続を指定できません。</target>
        </trans-unit>
        <trans-unit id="9cb77650aef11e195d36d66bcd612105e751c461" translate="yes" xml:space="preserve">
          <source>The server process debugger will listen for incoming connections from debugging clients, such as node-inspector, on port 5858 by default. To specify a different port use the &lt;code&gt;--debug-port &amp;lt;port&amp;gt;&lt;/code&gt; option.</source>
          <target state="translated">サーバープロセスデバッガーは、デフォルトで、ノード5インスペクターなどのデバッグクライアントからの着信接続をポート5858でリッスンします。別のポートを指定するには、 &lt;code&gt;--debug-port &amp;lt;port&amp;gt;&lt;/code&gt; オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="057dbd182acf9a6c2ccbc6671595895194b7d7f9" translate="yes" xml:space="preserve">
          <source>The server process will be suspended just before the first statement of server code that would normally execute. In order to continue execution of server code, use either the web-based Node Inspector or the command-line debugger (further instructions will be printed in the console).</source>
          <target state="translated">サーバープロセスは、通常実行されるはずのサーバーコードの最初のステートメントの直前に中断されます。サーバコードの実行を継続するには、ウェブベースのノードインスペクタかコマンドラインデバッガを使用してください (詳細な指示はコンソールに表示されます)。</target>
        </trans-unit>
        <trans-unit id="fe8af390358ce5dba4612c0e33e5297f0d01891d" translate="yes" xml:space="preserve">
          <source>The server reads from the &lt;code&gt;MAIL_URL&lt;/code&gt; environment variable to determine how to send mail. The &lt;code&gt;MAIL_URL&lt;/code&gt; should reference an &lt;a href=&quot;https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol&quot;&gt;SMTP&lt;/a&gt; server and use the form &lt;code&gt;smtp://USERNAME:PASSWORD@HOST:PORT&lt;/code&gt; or &lt;code&gt;smtps://USERNAME:PASSWORD@HOST:PORT&lt;/code&gt;. The &lt;code&gt;smtps://&lt;/code&gt; form (the &lt;code&gt;s&lt;/code&gt; is for &amp;ldquo;secure&amp;rdquo;) should be used if the mail server requires TLS/SSL (and does not use &lt;code&gt;STARTTLS&lt;/code&gt;) and is most common on port 465. Connections which start unencrypted prior to being upgraded to TLS/SSL (using &lt;code&gt;STARTTLS&lt;/code&gt;) typically use port 587 (and &lt;em&gt;sometimes&lt;/em&gt; 25) and should use &lt;code&gt;smtp://&lt;/code&gt;. For more information see the &lt;a href=&quot;https://nodemailer.com/smtp/&quot;&gt;Nodemailer docs&lt;/a&gt;</source>
          <target state="translated">サーバーは &lt;code&gt;MAIL_URL&lt;/code&gt; 環境変数から読み取り、メールの送信方法を決定します。 &lt;code&gt;MAIL_URL&lt;/code&gt; は、参照する必要&lt;a href=&quot;https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol&quot;&gt;のSMTP&lt;/a&gt;サーバーを、フォームの使用 &lt;code&gt;smtp://USERNAME:PASSWORD@HOST:PORT&lt;/code&gt; または &lt;code&gt;smtps://USERNAME:PASSWORD@HOST:PORT&lt;/code&gt; 。 &lt;code&gt;smtps://&lt;/code&gt; フォーム（ &lt;code&gt;s&lt;/code&gt; がメールサーバがTLS / SSLを必要とする（と使用しない場合は「安全」のためである）を使用する必要があります &lt;code&gt;STARTTLS&lt;/code&gt; を）前にアップグレードされるのに暗号化されていない開始ポート465接続上で最も一般的ですTLS / SSL（ &lt;code&gt;STARTTLS&lt;/code&gt; を使用）は通常、ポート587（&lt;em&gt;場合によっては&lt;/em&gt; 25）を使用し、 &lt;code&gt;smtp://&lt;/code&gt; を使用する必要があります。詳細については、&lt;a href=&quot;https://nodemailer.com/smtp/&quot;&gt;Nodemailerのドキュメント&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="069a91677cd1cf24c181a4723eafdb77ebd45a94" translate="yes" xml:space="preserve">
          <source>The server sets up a query observer on that cursor, unless such an observer already exists on the server (for any user), in which case that observer is re-used.</source>
          <target state="translated">サーバはカーソルにクエリオブザーバをセットアップしますが、そのようなオブザーバがサーバ上に既に存在していない限り(どのユーザに対しても)、そのオブザーバは再利用されます。</target>
        </trans-unit>
        <trans-unit id="097e5c67d62065e88e6065da77e5ec00a14928d6" translate="yes" xml:space="preserve">
          <source>The server starts up the subscription by running the publication handler function.</source>
          <target state="translated">サーバは、パブリケーションハンドラ機能を実行することで、サブスクリプションを起動します。</target>
        </trans-unit>
        <trans-unit id="c5a40c32ec4d5c6a93d6ea4f6e1e60dc0d236f27" translate="yes" xml:space="preserve">
          <source>The server stops its internal subscription object, triggering the following effects:</source>
          <target state="translated">サーバーは内部サブスクリプションオブジェクトを停止し、以下の効果をトリガーします。</target>
        </trans-unit>
        <trans-unit id="5fdfc53475d513083d8a034d3c39368f38afe631" translate="yes" xml:space="preserve">
          <source>The service name, such as &amp;ldquo;password&amp;rdquo; or &amp;ldquo;twitter&amp;rdquo;.</source>
          <target state="translated">「パスワード」や「twitter」などのサービス名。</target>
        </trans-unit>
        <trans-unit id="41acf53ac46904bb6e77bd2a44b34aa17cee14bb" translate="yes" xml:space="preserve">
          <source>The shell maintains a persistent history across sessions. Previously-run commands can be accessed by pressing the up arrow.</source>
          <target state="translated">シェルはセッション間の履歴を永続的に保持します。以前に実行したコマンドは、上矢印を押すことでアクセスできます。</target>
        </trans-unit>
        <trans-unit id="562d3e8f78be8f0d4590814f3055a13d654387ee" translate="yes" xml:space="preserve">
          <source>The shell supports tab completion for global variables like &lt;code&gt;Meteor&lt;/code&gt;, &lt;code&gt;Mongo&lt;/code&gt;, and &lt;code&gt;Package&lt;/code&gt;. Try typing &lt;code&gt;Meteor.is&lt;/code&gt; and then pressing tab.</source>
          <target state="translated">シェルは、 &lt;code&gt;Meteor&lt;/code&gt; 、 &lt;code&gt;Mongo&lt;/code&gt; 、 &lt;code&gt;Package&lt;/code&gt; などのグローバル変数のタブ補完をサポートしています。 &lt;code&gt;Meteor.is&lt;/code&gt; と入力してから、Tabキーを押してみてください。</target>
        </trans-unit>
        <trans-unit id="6aa874cbb26c1a6cd4be959c8f1ba01ee5ff71a9" translate="yes" xml:space="preserve">
          <source>The simple way to work around the problem is to take the application down for the period in between deployment and completing the migration. This is far from ideal, especially considering some migrations can take hours to run (although using &lt;a href=&quot;#bulk-data-changes&quot;&gt;Bulk Updates&lt;/a&gt; probably helps a lot here).</source>
          <target state="translated">この問題を回避する簡単な方法は、展開から移行が完了するまでの間、アプリケーションを停止することです。これは理想的とはほど遠く、特に一部の移行の実行には数時間かかる可能性があることを考慮してください（ただし、&lt;a href=&quot;#bulk-data-changes&quot;&gt;一括更新&lt;/a&gt;を使用すると、多くの場合役立ちます）。</target>
        </trans-unit>
        <trans-unit id="dca64431a60adfcc58a7cda7ad819b143861c80b" translate="yes" xml:space="preserve">
          <source>The simplest approach is to point both applications at the same &lt;code&gt;MONGO_URL&lt;/code&gt; and allow both applications to read and write from the database directly. This works well thanks to Meteor&amp;rsquo;s support for reactivity through the database. When one app changes some data in MongoDB, users of any other app connected to the database will see the changes immediately thanks to Meteor&amp;rsquo;s livequery.</source>
          <target state="translated">最も単純なアプローチは、両方のアプリケーションを同じ &lt;code&gt;MONGO_URL&lt;/code&gt; にポイントし、両方のアプリケーションがデータベースから直接読み取りおよび書き込みできるようにすることです。これはMeteorがデータベースを介して反応性をサポートしているおかげでうまく機能します。1つのアプリがMongoDBのデータを変更すると、Meteorのlivequeryのおかげで、データベースに接続されている他のアプリのユーザーはすぐに変更を確認できます。</target>
        </trans-unit>
        <trans-unit id="415b97d9fafddf82aacde9699b97ade4bea5f0e1" translate="yes" xml:space="preserve">
          <source>The simplest selectors are just a string or &lt;a href=&quot;#mongo_object_id&quot;&gt;&lt;code&gt;Mongo.ObjectID&lt;/code&gt;&lt;/a&gt;. These selectors match the document with that value in its &lt;code&gt;_id&lt;/code&gt; field.</source>
          <target state="translated">最も単純なセレクタは、文字列または&lt;a href=&quot;#mongo_object_id&quot;&gt; &lt;code&gt;Mongo.ObjectID&lt;/code&gt; &lt;/a&gt;だけです。これらのセレクターは、 &lt;code&gt;_id&lt;/code&gt; フィールドの値とドキュメントを照合します。</target>
        </trans-unit>
        <trans-unit id="276138ce12ffe75d29b12930d8c09959208e2833" translate="yes" xml:space="preserve">
          <source>The simplest way to provide a server-server API is to use Meteor&amp;rsquo;s built-in DDP protocol directly. This is the same way your Meteor client gets data from your server, but you can also use it to communicate between different applications. You can use &lt;a href=&quot;http://docs.meteor.com/#/full/ddp_connect&quot;&gt;&lt;code&gt;DDP.connect()&lt;/code&gt;&lt;/a&gt; to connect from a &amp;ldquo;client&amp;rdquo; server to the master server, and then use the connection object returned to make method calls and read from publications.</source>
          <target state="translated">サーバー/サーバーAPIを提供する最も簡単な方法は、Meteorの組み込みDDPプロトコルを直接使用することです。これは、Meteorクライアントがサーバーからデータを取得する方法と同じですが、異なるアプリケーション間の通信にも使用できます。あなたは使用することができます&lt;a href=&quot;http://docs.meteor.com/#/full/ddp_connect&quot;&gt; &lt;code&gt;DDP.connect()&lt;/code&gt; &lt;/a&gt;マスターサーバーに「クライアント」サーバーから接続し、接続オブジェクトがメソッドの呼び出しを行うと、出版物からの読み取りに戻っ使用します。</target>
        </trans-unit>
        <trans-unit id="0cb76e9ab7889fb86c50e261ae5f43478e4cac2b" translate="yes" xml:space="preserve">
          <source>The source files that make up the build plugin, independent from &lt;a href=&quot;#pack_addFiles&quot;&gt;api.addFiles&lt;/a&gt;.</source>
          <target state="translated">ビルドプラグインを構成するソースファイル&lt;a href=&quot;#pack_addFiles&quot;&gt;。api.addFiles&lt;/a&gt;から独立しています。</target>
        </trans-unit>
        <trans-unit id="71f0b54587199ae5ce51413291798c894c72f957" translate="yes" xml:space="preserve">
          <source>The subscription detects this, and given that anything is possible in next computation run, marks itself for destruction.</source>
          <target state="translated">サブスクリプションはこれを検出し、次の計算実行では何でも可能であることを考えると、破壊のために自分自身をマークします。</target>
        </trans-unit>
        <trans-unit id="c6f295b3b87dd070837aff2f0d0a6a3c94dfe452" translate="yes" xml:space="preserve">
          <source>The subscription handle also has another important property, the &lt;code&gt;.stop()&lt;/code&gt; method. When you are subscribing, it is very important to ensure that you always call &lt;code&gt;.stop()&lt;/code&gt; on the subscription when you are done with it. This ensures that the documents sent by the subscription are cleared from your local Minimongo cache and the server stops doing the work required to service your subscription. If you forget to call stop, you&amp;rsquo;ll consume unnecessary resources both on the client and the server.</source>
          <target state="translated">サブスクリプションハンドルには、 &lt;code&gt;.stop()&lt;/code&gt; メソッドという別の重要なプロパティもあります。サブスクライブするときは、サブスクリプションが終了したら、サブスクリプションで常に &lt;code&gt;.stop()&lt;/code&gt; を呼び出すようにすることが非常に重要です。これにより、サブスクリプションによって送信されたドキュメントがローカルのMinimongoキャッシュからクリアされ、サーバーはサブスクリプションのサービスに必要な作業を停止します。 stopの呼び出しを忘れると、クライアントとサーバーの両方で不要なリソースが消費されます。</target>
        </trans-unit>
        <trans-unit id="91927b29e575261e6c8d02feb858ac50e635a114" translate="yes" xml:space="preserve">
          <source>The subscription passes the added documents to the subscribing client&amp;rsquo;s connection &lt;em&gt;mergebox&lt;/em&gt;, which is an on-server cache of the documents that have been published to this particular client. Each document is merged with any existing version of the document that the client knows about, and an &lt;code&gt;added&lt;/code&gt; (if the document is new to the client) or &lt;code&gt;changed&lt;/code&gt; (if it is known but this subscription is adding or changing fields) DDP message is sent.</source>
          <target state="translated">サブスクリプションは、追加されたドキュメントをサブスクライブするクライアントの接続である&lt;em&gt;mergeboxに渡し&lt;/em&gt;ます。これは、この特定のクライアントにパブリッシュされたドキュメントのサーバー上のキャッシュです。各ドキュメントは、クライアントが認識している既存のバージョンのドキュメントとマージ &lt;code&gt;added&lt;/code&gt; 、追加（ドキュメントがクライアントに新しい場合）または &lt;code&gt;changed&lt;/code&gt; （既知であるが、このサブスクリプションがフィールドを追加または変更している場合）されたDDPメッセージが送信されます。</target>
        </trans-unit>
        <trans-unit id="27cd2a4faa764d089ebe647c80d95c496bd197a5" translate="yes" xml:space="preserve">
          <source>The supported browsers that can be enabled or disabled include, but are not limited to, &lt;code&gt;android&lt;/code&gt;, &lt;code&gt;chrome&lt;/code&gt;, &lt;code&gt;chromium&lt;/code&gt;, &lt;code&gt;chromeMobileIOS&lt;/code&gt;, &lt;code&gt;firefox&lt;/code&gt;, &lt;code&gt;ie&lt;/code&gt;, &lt;code&gt;mobileSafari&lt;/code&gt; and &lt;code&gt;safari&lt;/code&gt;.</source>
          <target state="translated">有効または無効、これらに限定されないが、可能なサポートされているブラウザ &lt;code&gt;android&lt;/code&gt; 、 &lt;code&gt;chrome&lt;/code&gt; 、 &lt;code&gt;chromium&lt;/code&gt; 、 &lt;code&gt;chromeMobileIOS&lt;/code&gt; 、 &lt;code&gt;firefox&lt;/code&gt; 、 &lt;code&gt;ie&lt;/code&gt; 、 &lt;code&gt;mobileSafari&lt;/code&gt; と &lt;code&gt;safari&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="44c6e24f74b0df3afa42e317d3c73162804f043e" translate="yes" xml:space="preserve">
          <source>The syntax to add a plugin from Git is kind of awkward. The name (the part before the &lt;code&gt;@&lt;/code&gt;) is the plugin ID and will have to match what is specified in the plugin&amp;rsquo;s &lt;code&gt;plugin.xml&lt;/code&gt;. Instead of a version, you specify a URL to a Git repository with the SHA hash as an anchor (the part after the &lt;code&gt;#&lt;/code&gt;):</source>
          <target state="translated">Gitからプラグインを追加する構文は、ちょっと厄介です。名前（ &lt;code&gt;@&lt;/code&gt; の前の部分）はプラグインIDであり、プラグインの &lt;code&gt;plugin.xml&lt;/code&gt; で指定されているものと一致する必要があります。バージョンの代わりに、SHAハッシュをアンカーとして使用してGitリポジトリへのURLを指定します（ &lt;code&gt;#&lt;/code&gt; の後の部分）：</target>
        </trans-unit>
        <trans-unit id="6bbb2d039d4932c20a858d127e21c3eb7d1c653b" translate="yes" xml:space="preserve">
          <source>The tag must evaluate to an object that serves as a dictionary of attribute name and value strings. For convenience, the value may also be a string or null. An empty string or null expands to &lt;code&gt;{}&lt;/code&gt;. A non-empty string must be an attribute name, and expands to an attribute with an empty value; for example, &lt;code&gt;&quot;checked&quot;&lt;/code&gt; expands to &lt;code&gt;{checked: &quot;&quot;}&lt;/code&gt; (which, as far as HTML is concerned, means the checkbox is checked).</source>
          <target state="translated">タグは、属性名と値の文字列の辞書として機能するオブジェクトに評価される必要があります。便宜上、値は文字列またはnullにすることもできます。空の文字列またはnullは &lt;code&gt;{}&lt;/code&gt; に展開されます。空でない文字列は属性名である必要があり、空の値を持つ属性に展開されます。たとえば、 &lt;code&gt;&quot;checked&quot;&lt;/code&gt; は &lt;code&gt;{checked: &quot;&quot;}&lt;/code&gt; 展開されます（HTMLに関しては、チェックボックスがオンになっていることを意味します）。</target>
        </trans-unit>
        <trans-unit id="b8125d20cd4452677a9491582fd02d620c207adf" translate="yes" xml:space="preserve">
          <source>The technique above can also be used to provide a location to &amp;ldquo;hook&amp;rdquo; extra functionality into the collection. For instance, when removing a list, we &lt;em&gt;always&lt;/em&gt; want to remove all of its todos at the same time.</source>
          <target state="translated">上記の手法は、追加機能をコレクションに「フック」する場所を提供するためにも使用できます。たとえば、リストを削除するときは、&lt;em&gt;常に&lt;/em&gt;すべてのタスクを同時に削除する必要があります。</target>
        </trans-unit>
        <trans-unit id="034e7f74fb6db86e567a63ea331823c40a21e813" translate="yes" xml:space="preserve">
          <source>The template (e.g. &lt;code&gt;Template.myTemplate&lt;/code&gt;) or View object from which to generate HTML.</source>
          <target state="translated">HTMLを生成するテンプレート（例： &lt;code&gt;Template.myTemplate&lt;/code&gt; ）またはViewオブジェクト。</target>
        </trans-unit>
        <trans-unit id="d8e63bce841f73d768307448657db139ec098866" translate="yes" xml:space="preserve">
          <source>The template (e.g. &lt;code&gt;Template.myTemplate&lt;/code&gt;) or View object to render.</source>
          <target state="translated">レンダリングするテンプレート（例： &lt;code&gt;Template.myTemplate&lt;/code&gt; ）またはViewオブジェクト。</target>
        </trans-unit>
        <trans-unit id="41249779096e24a297a4e65929b43298def99b87" translate="yes" xml:space="preserve">
          <source>The template (e.g. &lt;code&gt;Template.myTemplate&lt;/code&gt;) or View object to render. If a template, a View object is &lt;a href=&quot;#template_constructview&quot;&gt;constructed&lt;/a&gt;. If a View, it must be an unrendered View, which becomes a rendered View and is returned.</source>
          <target state="translated">レンダリングするテンプレート（例： &lt;code&gt;Template.myTemplate&lt;/code&gt; ）またはViewオブジェクト。テンプレートの場合、Viewオブジェクトが&lt;a href=&quot;#template_constructview&quot;&gt;作成され&lt;/a&gt;ます。ビューの場合、それはレンダリングされていないビューである必要があり、レンダリングされたビューになって返されます。</target>
        </trans-unit>
        <trans-unit id="7d84dd762c7d0220ca76f4a43e1c2813420edf4a" translate="yes" xml:space="preserve">
          <source>The template inclusion tag, &lt;code&gt;{{&amp;gt; Todos_item (todoArgs todo)}}&lt;/code&gt; which renders the &lt;code&gt;Todos_item&lt;/code&gt; component with the data context returned from the &lt;code&gt;todosArg&lt;/code&gt; helper.</source>
          <target state="translated">テンプレートインクルードタグ &lt;code&gt;{{&amp;gt; Todos_item (todoArgs todo)}}&lt;/code&gt; は、 &lt;code&gt;todosArg&lt;/code&gt; ヘルパーから返されたデータコンテキストで &lt;code&gt;Todos_item&lt;/code&gt; コンポーネントをレンダリングします。</target>
        </trans-unit>
        <trans-unit id="573b5fbd0391064796b87f40c1db56b1c4bc4d6a" translate="yes" xml:space="preserve">
          <source>The template instance serves as the document root for the selector. Only elements inside the template and its sub-templates can match parts of the selector.</source>
          <target state="translated">テンプレートインスタンスは、セレクタのドキュメントルートとして機能します。テンプレートとそのサブテンプレート内の要素のみがセレクタの一部にマッチします。</target>
        </trans-unit>
        <trans-unit id="008d54f6db6e00ce95a452f003837c432202d425" translate="yes" xml:space="preserve">
          <source>The test is slightly simpler than the Blaze version above because the React sample app is not internationalized. Otherwise, it&amp;rsquo;s conceptually identical. We use Enzyme&amp;rsquo;s &lt;code&gt;shallow&lt;/code&gt; function to render the &lt;code&gt;TodoItem&lt;/code&gt; component, and the resulting object to query the document, and also to simulate user interactions. And here&amp;rsquo;s an example of simulating a user checking the todo item:</source>
          <target state="translated">Reactサンプルアプリは国際化されていないため、テストは上記のBlazeバージョンよりも少し単純です。それ以外は、概念的には同じです。Enzymeの &lt;code&gt;shallow&lt;/code&gt; 関数を使用して、 &lt;code&gt;TodoItem&lt;/code&gt; コンポーネントをレンダリングし、結果のオブジェクトを使用してドキュメントをクエリし、ユーザーインタラクションをシミュレートします。そして、これはユーザーがToDoアイテムをチェックするシミュレーションの例です：</target>
        </trans-unit>
        <trans-unit id="f343dc469f126c1ea38aefc825230c5c7a86d365" translate="yes" xml:space="preserve">
          <source>The token retrieved from the reset password URL.</source>
          <target state="translated">リセットパスワードURLから取得したトークン。</target>
        </trans-unit>
        <trans-unit id="2c6e0b8ef722da8420c87bbca69163609f13e897" translate="yes" xml:space="preserve">
          <source>The token retrieved from the verification URL.</source>
          <target state="translated">検証URLから取得したトークン。</target>
        </trans-unit>
        <trans-unit id="8bda0c1c785971202641067eef854eeb2b5c0955" translate="yes" xml:space="preserve">
          <source>The two alteratives to Angular are &lt;a href=&quot;blaze&quot;&gt;Blaze&lt;/a&gt; and &lt;a href=&quot;react&quot;&gt;React&lt;/a&gt;. &lt;a href=&quot;ui-ux#view-layers&quot;&gt;Here&amp;rsquo;s a comparison&lt;/a&gt; of all three.</source>
          <target state="translated">Angularの2つの代替案は、&lt;a href=&quot;blaze&quot;&gt;Blaze&lt;/a&gt;と&lt;a href=&quot;react&quot;&gt;React&lt;/a&gt;です。3つすべての&lt;a href=&quot;ui-ux#view-layers&quot;&gt;比較&lt;/a&gt;を以下に示します。</target>
        </trans-unit>
        <trans-unit id="251bf726eb97960278b61f839fdf72b93fb2ca39" translate="yes" xml:space="preserve">
          <source>The two nodes &lt;code&gt;firstNode&lt;/code&gt; and &lt;code&gt;lastNode&lt;/code&gt; indicate the extent of the rendered template in the DOM. The rendered template includes these nodes, their intervening siblings, and their descendents. These two nodes are siblings (they have the same parent), and &lt;code&gt;lastNode&lt;/code&gt; comes after &lt;code&gt;firstNode&lt;/code&gt;, or else they are the same node.</source>
          <target state="translated">2つのノード &lt;code&gt;firstNode&lt;/code&gt; および &lt;code&gt;lastNode&lt;/code&gt; は、DOMでレンダリングされたテンプレートの範囲を示します。レンダリングされたテンプレートには、これらのノード、それらの間にある兄弟、およびそれらの子孫が含まれます。これらの2つのノードは兄弟であり（同じ親を持っています）、 &lt;code&gt;lastNode&lt;/code&gt; は &lt;code&gt;firstNode&lt;/code&gt; の後に来るか、そうでなければ同じノードです。</target>
        </trans-unit>
        <trans-unit id="1d7ffd8a888b1262ac59e6639f670a995882f6fe" translate="yes" xml:space="preserve">
          <source>The unsigned &lt;code&gt;apk&lt;/code&gt; bundle and the outputted Xcode project can be used to deploy your mobile apps to Android Play Store and Apple App Store.</source>
          <target state="translated">未署名の &lt;code&gt;apk&lt;/code&gt; バンドルと出力されたXcodeプロジェクトを使用して、モバイルアプリをAndroid PlayストアとApple App Storeにデプロイできます。</target>
        </trans-unit>
        <trans-unit id="cfcdd510434f17af6c092af6290adc687923cf50" translate="yes" xml:space="preserve">
          <source>The user &lt;code&gt;userId&lt;/code&gt; wants to insert the document &lt;code&gt;doc&lt;/code&gt; into the collection. Return &lt;code&gt;true&lt;/code&gt; if this should be allowed.</source>
          <target state="translated">ユーザー &lt;code&gt;userId&lt;/code&gt; がドキュメント &lt;code&gt;doc&lt;/code&gt; をコレクションに挿入しようとしています。これを許可する必要が &lt;code&gt;true&lt;/code&gt; 場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="fe801444a7c8711efa09c71940bb8ba8ae6f6b09" translate="yes" xml:space="preserve">
          <source>The user &lt;code&gt;userId&lt;/code&gt; wants to remove &lt;code&gt;doc&lt;/code&gt; from the database. Return &lt;code&gt;true&lt;/code&gt; to permit this.</source>
          <target state="translated">ユーザー &lt;code&gt;userId&lt;/code&gt; がデータベースから &lt;code&gt;doc&lt;/code&gt; を削除しようとしています。これを許可するには &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="08bef4fc2671c2024349524e02270b0ba38a2819" translate="yes" xml:space="preserve">
          <source>The user &lt;code&gt;userId&lt;/code&gt; wants to update a document &lt;code&gt;doc&lt;/code&gt;. (&lt;code&gt;doc&lt;/code&gt; is the current version of the document from the database, without the proposed update.) Return &lt;code&gt;true&lt;/code&gt; to permit the change.</source>
          <target state="translated">ユーザー &lt;code&gt;userId&lt;/code&gt; がドキュメント &lt;code&gt;doc&lt;/code&gt; を更新しようとしています。（ &lt;code&gt;doc&lt;/code&gt; は、データベースからのドキュメントの現在のバージョンであり、提案された更新はありません。）変更を許可するには、 &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9b98eab3af4d739796a1a360b91b07b1db47c9f0" translate="yes" xml:space="preserve">
          <source>The user id is an arbitrary string &amp;mdash; typically the id of the user record in the database. You can set it with the &lt;code&gt;setUserId&lt;/code&gt; function. If you&amp;rsquo;re using the &lt;a href=&quot;#accounts_api&quot;&gt;Meteor accounts system&lt;/a&gt; then this is handled for you.</source>
          <target state="translated">ユーザーIDは任意の文字列です。通常、データベース内のユーザーレコードのIDです。 &lt;code&gt;setUserId&lt;/code&gt; 関数で設定できます。&lt;a href=&quot;#accounts_api&quot;&gt;Meteorアカウントシステム&lt;/a&gt;を使用している場合、これは自動的に処理されます。</target>
        </trans-unit>
        <trans-unit id="bf032e7944e1e3983413c57fa3ae8548dca23173" translate="yes" xml:space="preserve">
          <source>The user presses a keyboard key. &lt;code&gt;keypress&lt;/code&gt; is most useful for catching typing in text fields, while &lt;code&gt;keydown&lt;/code&gt; and &lt;code&gt;keyup&lt;/code&gt; can be used for arrow keys or modifier keys.</source>
          <target state="translated">ユーザーがキーボードのキーを押します。 &lt;code&gt;keypress&lt;/code&gt; はテキストフィールドの入力をキャッチするのに最も役立ちますが、 &lt;code&gt;keydown&lt;/code&gt; および &lt;code&gt;keyup&lt;/code&gt; は矢印キーまたは修飾キーに使用できます。</target>
        </trans-unit>
        <trans-unit id="0e8f396aec2f98b55e4d3dffa0512958e211f380" translate="yes" xml:space="preserve">
          <source>The user's current password. This is &lt;strong&gt;not&lt;/strong&gt; sent in plain text over the wire.</source>
          <target state="translated">ユーザーの現在のパスワード。これは、ネットワーク経由でプレーンテキストで&lt;strong&gt;は&lt;/strong&gt;送信され&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="807c55624f8479c8eb47f6be16ce5d1b43ab7288" translate="yes" xml:space="preserve">
          <source>The user's email address.</source>
          <target state="translated">ユーザーのメールアドレスです。</target>
        </trans-unit>
        <trans-unit id="10eab012c461bfc94dae75aa1fcd8595ad75aaa3" translate="yes" xml:space="preserve">
          <source>The user's password.</source>
          <target state="translated">ユーザーのパスワードです。</target>
        </trans-unit>
        <trans-unit id="59a0e240b9207fb55d72a9754f4e95a7557b4d0f" translate="yes" xml:space="preserve">
          <source>The user's password. This is &lt;strong&gt;not&lt;/strong&gt; sent in plain text over the wire.</source>
          <target state="translated">ユーザーのパスワード。これは、ネットワーク経由でプレーンテキストで&lt;strong&gt;は&lt;/strong&gt;送信され&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="08cc72d10c9fa5edf945d26a3ed1b5582f01e95e" translate="yes" xml:space="preserve">
          <source>The user's profile, typically including the &lt;code&gt;name&lt;/code&gt; field.</source>
          <target state="translated">ユーザーのプロファイル。通常、 &lt;code&gt;name&lt;/code&gt; フィールドを含みます。</target>
        </trans-unit>
        <trans-unit id="58253cd708fc4aae51ae3f5cce7ee272c7c95324" translate="yes" xml:space="preserve">
          <source>The username to look for</source>
          <target state="translated">探すユーザー名</target>
        </trans-unit>
        <trans-unit id="e71b6aa32f716490ff5aaa8aa6ada5169a88d769" translate="yes" xml:space="preserve">
          <source>The value for that preference.</source>
          <target state="translated">そのプリファレンスの値。</target>
        </trans-unit>
        <trans-unit id="f0c9eb5c99d36714cd633ae73fcbbea6530e2cdd" translate="yes" xml:space="preserve">
          <source>The value that should be returned by &lt;code&gt;userId&lt;/code&gt; on this connection.</source>
          <target state="translated">この接続で &lt;code&gt;userId&lt;/code&gt; によって返される値。</target>
        </trans-unit>
        <trans-unit id="224a586b5c96fa838ab0d25ab2f1c9ecb9042587" translate="yes" xml:space="preserve">
          <source>The value to check</source>
          <target state="translated">チェックする値</target>
        </trans-unit>
        <trans-unit id="3fdb08efce1dd734be1b5cea101b0b4e5b482201" translate="yes" xml:space="preserve">
          <source>The value to test against</source>
          <target state="translated">テスト対象となる値</target>
        </trans-unit>
        <trans-unit id="572affcd555e45a118ca8c255703b01188667dc6" translate="yes" xml:space="preserve">
          <source>The value to test.</source>
          <target state="translated">テストする値。</target>
        </trans-unit>
        <trans-unit id="f6aec9757e763674c114ae79bf7a90019a5f4b5e" translate="yes" xml:space="preserve">
          <source>The variable to check.</source>
          <target state="translated">チェックする変数です。</target>
        </trans-unit>
        <trans-unit id="71addf175afde40d4d6f69932118df3855185e6e" translate="yes" xml:space="preserve">
          <source>The way that you move data from the server (and MongoDB-backed) collection into the client (in-memory) collection is the subject of the &lt;a href=&quot;data-loading&quot;&gt;data loading article&lt;/a&gt;. Generally speaking, you &lt;em&gt;subscribe&lt;/em&gt; to a &lt;em&gt;publication&lt;/em&gt;, which pushes data from the server to the client. Usually, you can assume that the client contains an up-to-date copy of some subset of the full MongoDB collection.</source>
          <target state="translated">データをサーバー（およびMongoDB-backed）コレクションからクライアント（インメモリー）コレクションに移動する方法は、&lt;a href=&quot;data-loading&quot;&gt;データ読み込みに関する記事の&lt;/a&gt;主題です。一般的に言えば、サーバーからクライアントにデータをプッシュする&lt;em&gt;パブリケーション&lt;/em&gt;に&lt;em&gt;サブスクライブ&lt;/em&gt;します。通常、クライアントには完全なMongoDBコレクションの一部のサブセットの最新のコピーが含まれていると想定できます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="30f5a256e98f9ccafa77d05bb3ec50f629893163" translate="yes" xml:space="preserve">
          <source>The way this package works is to first establish a cursor on one collection, and then explicitly set up a second level of cursors on a second collection with the results of the first cursor. The package uses a query observer behind the scenes to trigger the subscription to change and queries to re-run whenever the source data changes.</source>
          <target state="translated">このパッケージの動作方法は、最初に1つのコレクションにカーソルを設定し、最初のカーソルの結果を使って2つ目のコレクションに2つ目のレベルのカーソルを明示的に設定するというものです。このパッケージは、裏でクエリオブザーバを使用して、サブスクリプションを変更し、ソースデータが変更されるたびにクエリを再実行するようにトリガーします。</target>
        </trans-unit>
        <trans-unit id="3911b92d29cad53d31a6e86b7339b0a08113614e" translate="yes" xml:space="preserve">
          <source>The web view situation on Android is a little more complicated. On older Android versions, the included web view is known to be rather slow and buggy. That improved somewhat with Android 4.4, which includes a web view based on Chromium, the open source project behind the Chrome browser.</source>
          <target state="translated">Androidでのウェブビューの状況はもう少し複雑です。古いバージョンのAndroidでは、同梱されているWebビューはかなり遅く、バグが多いことで知られています。それがAndroid 4.4では多少改善され、Chromeブラウザの背後にあるオープンソースプロジェクトであるChromiumをベースにしたウェブビューが含まれています。</target>
        </trans-unit>
        <trans-unit id="f8d0127e05868bdd01cc2bef27a7b76f589b6e20" translate="yes" xml:space="preserve">
          <source>The whole directory or path should indicate that these templates are related to the &lt;code&gt;Lists&lt;/code&gt; module, so it&amp;rsquo;s not necessary to reproduce that information in the file name. Read more about directory structure &lt;a href=&quot;structure#javascript-structure&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">ディレクトリ全体またはパスは、これらのテンプレートが &lt;code&gt;Lists&lt;/code&gt; モジュールに関連していることを示す必要があるため、ファイル名にその情報を再現する必要はありません。&lt;a href=&quot;structure#javascript-structure&quot;&gt;以下の&lt;/a&gt;ディレクトリ構造の詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="17ceb8a53f7ac1ca2da2c14a2be51c5643c2f2f1" translate="yes" xml:space="preserve">
          <source>Then &lt;strong&gt;restart&lt;/strong&gt; (or &lt;strong&gt;reload&lt;/strong&gt; by pressing Ctrl+Alt+R / Cmd+Opt+R) Atom to activate linting.</source>
          <target state="translated">次に、Atomを&lt;strong&gt;再起動&lt;/strong&gt;（またはCtrl + Alt + R / Cmd + Opt + Rを押して&lt;strong&gt;リロード&lt;/strong&gt;）して、リンティングをアクティブにします。</target>
        </trans-unit>
        <trans-unit id="1d3382dd82b1cd83e103bbc2c27f6d355cfcfd5b" translate="yes" xml:space="preserve">
          <source>Then just include it anywhere in a Blaze template:</source>
          <target state="translated">あとは、Blazeテンプレートのどこにでも入れればいいのです。</target>
        </trans-unit>
        <trans-unit id="9f8939db65b9680811ecc2555a938732b394618f" translate="yes" xml:space="preserve">
          <source>Then on the client side, we&amp;rsquo;d set some kind of reactive state variable to control how many items to request:</source>
          <target state="translated">次に、クライアント側で、要求するアイテムの数を制御するために、何らかの反応状態変数を設定します。</target>
        </trans-unit>
        <trans-unit id="f4d9739e6092184526ef79541a30ac9c3401861e" translate="yes" xml:space="preserve">
          <source>Then on the client, after subscribing to that publication, we can access the count with</source>
          <target state="translated">クライアント上では、その出版物を購読した後、カウントにアクセスするには</target>
        </trans-unit>
        <trans-unit id="7072456d1ba04eaf3f572a3a3033977e037d8365" translate="yes" xml:space="preserve">
          <source>Then simply add the &lt;code&gt;{{&amp;gt; loginButtons}}&lt;/code&gt; helper to an HTML file. This will place a login widget on the page. If there is only one provider configured and it is an external service, this will add a login/logout button. If you use &lt;code&gt;accounts-password&lt;/code&gt; or use multiple external login services, this will add a &amp;ldquo;Sign in&amp;rdquo; link which opens a dropdown menu with login options. If you plan to position the login dropdown in the right edge of the screen, use &lt;code&gt;{{&amp;gt; loginButtons align=&quot;right&quot;}}&lt;/code&gt; in order to get the dropdown to lay itself out without expanding off the edge of the screen.</source>
          <target state="translated">次に、 &lt;code&gt;{{&amp;gt; loginButtons}}&lt;/code&gt; ヘルパーをHTMLファイルに追加するだけです。これにより、ページにログインウィジェットが配置されます。設定されているプロバイダーが1つだけで、それが外部サービスである場合、これによりログイン/ログアウトボタンが追加されます。 &lt;code&gt;accounts-password&lt;/code&gt; を使用する場合、または複数の外部ログインサービスを使用する場合は、ログインオプションのあるドロップダウンメニューを開く「サインイン」リンクが追加されます。ログインドロップダウンを画面の右端に配置する場合は、 &lt;code&gt;{{&amp;gt; loginButtons align=&quot;right&quot;}}&lt;/code&gt; を使用して、画面の端を広げずにドロップダウンをレイアウトできるようにします。</target>
        </trans-unit>
        <trans-unit id="aa68d811db3705a398d7f023589ffb5ac8d66234" translate="yes" xml:space="preserve">
          <source>Then somewhere in your UI you can &lt;code&gt;CurrentLanguage.set('es')&lt;/code&gt; when a user chooses a new language.</source>
          <target state="translated">次に、UIのどこかで、ユーザーが新しい言語を選択したときに &lt;code&gt;CurrentLanguage.set('es')&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="ffac89bfc6e35fb7f8b28410fec691dee710b039" translate="yes" xml:space="preserve">
          <source>Then the &lt;code&gt;validate()&lt;/code&gt; call will throw a &lt;code&gt;ValidationError&lt;/code&gt; which contains details about what is wrong with the &lt;code&gt;list&lt;/code&gt; document.</source>
          <target state="translated">次に、 &lt;code&gt;validate()&lt;/code&gt; 呼び出しは、 &lt;code&gt;list&lt;/code&gt; ドキュメントの問題の詳細を含む &lt;code&gt;ValidationError&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="260b32eee2d9a5b59e01c5ec1dbac06b4b12a7b8" translate="yes" xml:space="preserve">
          <source>Then use it directly after you shrinkwrap</source>
          <target state="translated">シュリンクラップした後に直接使用します。</target>
        </trans-unit>
        <trans-unit id="74c6024d2e572e7374bad7c40761f6fbca1e759b" translate="yes" xml:space="preserve">
          <source>Then we can install any npm CSS processing packages that we&amp;rsquo;d like to use and reference them from a &lt;code&gt;postcss&lt;/code&gt; section of our &lt;code&gt;package.json&lt;/code&gt;. In the Todos example app, we use &lt;code&gt;autoprefixer&lt;/code&gt; package to increase browser support:</source>
          <target state="translated">次に、使用したいnpm CSS処理パッケージをインストールし、 &lt;code&gt;package.json&lt;/code&gt; の &lt;code&gt;postcss&lt;/code&gt; セクションからそれらを参照します。Todosサンプルアプリでは、 &lt;code&gt;autoprefixer&lt;/code&gt; パッケージを使用してブラウザーのサポートを増やしています。</target>
        </trans-unit>
        <trans-unit id="573abc801b2e89cb55d831c86476e22620e88570" translate="yes" xml:space="preserve">
          <source>Then we create a &lt;code&gt;ListPageContainer&lt;/code&gt; container component which wraps it and provides a data source:</source>
          <target state="translated">次に、それをラップしてデータソースを提供する &lt;code&gt;ListPageContainer&lt;/code&gt; コンテナコンポーネントを作成します。</target>
        </trans-unit>
        <trans-unit id="41c39c5ed035281dfd4080e777ed40dd343de321" translate="yes" xml:space="preserve">
          <source>Then when a client calls &lt;code&gt;Meteor.subscribe('Posts.all')&lt;/code&gt; the following things happen inside Meteor:</source>
          <target state="translated">次に、クライアントが &lt;code&gt;Meteor.subscribe('Posts.all')&lt;/code&gt; を呼び出すと、Meteor内で次のことが起こります。</target>
        </trans-unit>
        <trans-unit id="d8c3d9a94679f38475c8ba863bf42d61eed4fad5" translate="yes" xml:space="preserve">
          <source>Then you can call that function from within an event handler:</source>
          <target state="translated">そして、イベントハンドラ内からその関数を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="9a9eb38d2a2f935321307f2ba1548c6e36667347" translate="yes" xml:space="preserve">
          <source>Then you can call this helper from template like this:</source>
          <target state="translated">そして、このようなテンプレートからこのヘルパーを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="28c7cbf60740227e4b5fe04cc6418e3ab825fa0b" translate="yes" xml:space="preserve">
          <source>Then you can open two browser windows to see the app in action while also ensuring that you don&amp;rsquo;t break any tests as you make changes.</source>
          <target state="translated">次に、2つのブラウザーウィンドウを開いてアプリの動作を確認し、変更を加えてもテストが中断されないようにします。</target>
        </trans-unit>
        <trans-unit id="8031e6eeba4412cee7511fc6dc77cce0b1a22293" translate="yes" xml:space="preserve">
          <source>Then, in your app (this example is for the Weebo service):</source>
          <target state="translated">そして、アプリ内で(この例はWeeboのサービスの場合です)。</target>
        </trans-unit>
        <trans-unit id="8cd450ec03ae5a265091ed22d858bbec593ebb0a" translate="yes" xml:space="preserve">
          <source>Then, like with any other &lt;a href=&quot;https://guide.meteor.com/using-packages.html#npm&quot;&gt;npm package&lt;/a&gt;, you can import the component in your application:</source>
          <target state="translated">次に、他の&lt;a href=&quot;https://guide.meteor.com/using-packages.html#npm&quot;&gt;npmパッケージ&lt;/a&gt;と同様に、コンポーネントをアプリケーションにインポートできます。</target>
        </trans-unit>
        <trans-unit id="4bde930c0db8e155e3e481dedb64107f8c4b1ffc" translate="yes" xml:space="preserve">
          <source>Then, make sure to pick a login provider; they will automatically integrate with &lt;code&gt;accounts-ui&lt;/code&gt;:</source>
          <target state="translated">次に、必ずログインプロバイダーを選択してください。それらは自動的に &lt;code&gt;accounts-ui&lt;/code&gt; と統合されます：</target>
        </trans-unit>
        <trans-unit id="9f6aea17917affab1cf7bf3c7dbfb69dae113f60" translate="yes" xml:space="preserve">
          <source>Then, upsert into the &lt;code&gt;ServiceConfiguration&lt;/code&gt; collection:</source>
          <target state="translated">次に、 &lt;code&gt;ServiceConfiguration&lt;/code&gt; コレクションにアップサートします。</target>
        </trans-unit>
        <trans-unit id="b744cde79a1b4ac3b6afad6287dca315638c63e9" translate="yes" xml:space="preserve">
          <source>Then, use the &lt;code&gt;replaces&lt;/code&gt; function on the template to override the existing template from &lt;code&gt;useraccounts&lt;/code&gt;:</source>
          <target state="translated">次に、テンプレートで &lt;code&gt;replaces&lt;/code&gt; 関数を使用して、 &lt;code&gt;useraccounts&lt;/code&gt; の既存のテンプレートを上書きします。</target>
        </trans-unit>
        <trans-unit id="913f2bbc905424a2214ec1676fe36fe6118b4fb2" translate="yes" xml:space="preserve">
          <source>Then, you can install Ubuntu Make itself:</source>
          <target state="translated">その後、Ubuntu Make自体をインストールします。</target>
        </trans-unit>
        <trans-unit id="ccbe4b42586263d044fa5838e3a8b202e1122a13" translate="yes" xml:space="preserve">
          <source>Then, you need to get the user&amp;rsquo;s access token. You can find this token in the &lt;code&gt;Meteor.users&lt;/code&gt; collection under the &lt;code&gt;services&lt;/code&gt; field. For example, if you wanted to get a particular user&amp;rsquo;s Facebook access token:</source>
          <target state="translated">次に、ユーザーのアクセストークンを取得する必要があります。このトークンは、 &lt;code&gt;services&lt;/code&gt; フィールドの下の &lt;code&gt;Meteor.users&lt;/code&gt; コレクションにあります。たとえば、特定のユーザーのFacebookアクセストークンを取得する場合：</target>
        </trans-unit>
        <trans-unit id="0616b2298bc7bf0120583700f8e42e63bb5d9fac" translate="yes" xml:space="preserve">
          <source>There are a few UX techniques for dealing with this waiting period. The simplest is simply to switch out the page you are rendering with a generic &amp;ldquo;loading&amp;rdquo; page while you wait for all the data (typically a page may open several subscriptions) to load. As an example, in the Todos example app, we wait until all the public lists and the user&amp;rsquo;s private lists have loaded before we try to render the actual page:</source>
          <target state="translated">この待機期間を処理するためのいくつかのUXテクニックがあります。最も単純なのは、すべてのデータ（通常、ページが複数のサブスクリプションを開くことがある）が読み込まれるのを待つ間に、レンダリングするページを汎用の「読み込み」ページに切り替えるだけです。例として、Todosサンプルアプリでは、実際のページをレンダリングする前に、すべてのパブリックリストとユーザーのプライベートリストが読み込まれるまで待機します。</target>
        </trans-unit>
        <trans-unit id="da275f2e26e4c28337f85a135b94b346fbf76f30" translate="yes" xml:space="preserve">
          <source>There are a few built-in block helpers that are worth knowing about:</source>
          <target state="translated">ビルトインブロックヘルパーは、知っておく価値のあるものがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="3b3b1fa605865c0bbd62ab255e0141b17088222d" translate="yes" xml:space="preserve">
          <source>There are a few points to know about configuring OAuth login:</source>
          <target state="translated">OAuthログインの設定については、いくつかのポイントがあります。</target>
        </trans-unit>
        <trans-unit id="1a4d3b881a64de5bae1c3445eddbfc0bad8a0b33" translate="yes" xml:space="preserve">
          <source>There are a few things to understand about this code block. First, we&amp;rsquo;ve named the publication with the unique string &lt;code&gt;lists.public&lt;/code&gt;, and that will be how we access it from the client. Second, we are simply returning a Mongo &lt;em&gt;cursor&lt;/em&gt; from the publication function. Note that the cursor is filtered to only return certain fields from the collection, as detailed in the &lt;a href=&quot;security#fields&quot;&gt;Security article&lt;/a&gt;.</source>
          <target state="translated">このコードブロックについて理解することがいくつかあります。最初に、一意の文字列 &lt;code&gt;lists.public&lt;/code&gt; を使用してパブリケーションに名前を付けました。これがクライアントからのアクセス方法になります。次に、パブリケーション関数からモンゴ&lt;em&gt;カーソル&lt;/em&gt;を返すだけです。&lt;a href=&quot;security#fields&quot;&gt;セキュリティの記事で&lt;/a&gt;詳しく説明されているように、カーソルはフィルター処理され、コレクションから特定のフィールドのみを返すことに注意してください。</target>
        </trans-unit>
        <trans-unit id="f279f980da322c753b3d3b123835e562e12b4bc3" translate="yes" xml:space="preserve">
          <source>There are a few ways to search for Meteor packages published to Atmosphere:</source>
          <target state="translated">Atmosphere に公開されている Meteor パッケージを検索する方法はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="0eae0f347d8525842b158b584cb38dde66950cf7" translate="yes" xml:space="preserve">
          <source>There are a variety of services out there, and we recommend that you select one of the below services depending on your requirements:</source>
          <target state="translated">世の中には様々なサービスがありますが、その中から自分の希望に合わせて選ぶことをおすすめします。</target>
        </trans-unit>
        <trans-unit id="a77ca7c834708bc27abce528eb4fe0c5dca2d9d7" translate="yes" xml:space="preserve">
          <source>There are a variety of states that such a list can be in:</source>
          <target state="translated">このようなリストができる州は様々です。</target>
        </trans-unit>
        <trans-unit id="0a8fd0cbe5c5ba2ada837c704e9b11a68c8df87e" translate="yes" xml:space="preserve">
          <source>There are also two Spacebars built-in helpers, &lt;code&gt;{{#each}}&lt;/code&gt;, and &lt;code&gt;{{#with}}&lt;/code&gt;, which we do not recommend using (see prefer using each-in). These block helpers change the data context within a template, which can be difficult to reason about.</source>
          <target state="translated">また、 &lt;code&gt;{{#each}}&lt;/code&gt; と &lt;code&gt;{{#with}}&lt;/code&gt; の 2つのSpacebars組み込みヘルパーもあります（これらの使用はお勧めしません（推奨はeach-inの使用を参照））。これらのブロックヘルパーは、テンプレート内のデータコンテキストを変更します。</target>
        </trans-unit>
        <trans-unit id="de9db9f125309420b9eaf551aa5225901471c409" translate="yes" xml:space="preserve">
          <source>There are several load order rules. They are &lt;em&gt;applied sequentially&lt;/em&gt; to all applicable files in the application, in the priority given below:</source>
          <target state="translated">いくつかのロード順序ルールがあります。これらは、以下の優先順位で、アプリケーション内のすべての適用可能なファイルに&lt;em&gt;順次適用さ&lt;/em&gt;れます。</target>
        </trans-unit>
        <trans-unit id="643b5d33eec2cb6ebea1e10e6cb8fe7af80e31a3" translate="yes" xml:space="preserve">
          <source>There are several options. Choose the ones that makes sense for your app. You may depend on more than one and set up different test commands for different situations.</source>
          <target state="translated">いくつかのオプションがあります。あなたのアプリにとって意味のあるものを選んでください。複数に依存しても構いませんし、状況に応じて異なるテストコマンドを設定しても構いません。</target>
        </trans-unit>
        <trans-unit id="47cd41854f1f21c6492e42cc51ca1b7e984fef53" translate="yes" xml:space="preserve">
          <source>There are some advantages of splitting your application in this way:</source>
          <target state="translated">このようにアプリケーションを分割することで、いくつかのメリットがあります。</target>
        </trans-unit>
        <trans-unit id="ec780adbc9edba54f7c0e2a6046d003ce4834206" translate="yes" xml:space="preserve">
          <source>There are some other considerations that you should make before you deploy your application to a production host. Remember that you should if possible do these steps for both your production &lt;em&gt;and&lt;/em&gt; staging environments.</source>
          <target state="translated">アプリケーションを本番ホストにデプロイする前に、考慮すべきいくつかの考慮事項があります。可能であれば、本番環境&lt;em&gt;と&lt;/em&gt;ステージング環境の両方でこれらの手順を実行する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="16ce97471d90d7ab84abc40ca0cbd444d1605cef" translate="yes" xml:space="preserve">
          <source>There are three CSS pre-processors that are particularly popular right now:</source>
          <target state="translated">今特に人気のあるCSSプリプロセッサは3つあります。</target>
        </trans-unit>
        <trans-unit id="b92e0c816137fbce8e368720b2f3e96dc5c961b2" translate="yes" xml:space="preserve">
          <source>There are three main locations in the HTML where template tags are allowed:</source>
          <target state="translated">HTMLの中でテンプレートタグが許可されている場所は主に3つあります。</target>
        </trans-unit>
        <trans-unit id="f97831b97e3142dfd1638a82832efb146598bd0a" translate="yes" xml:space="preserve">
          <source>There are three types of build plugins supported by Meteor today:</source>
          <target state="translated">現在Meteorがサポートしているビルドプラグインは3種類あります。</target>
        </trans-unit>
        <trans-unit id="b55369396dc38842070e110e69cfabbaea6e8805" translate="yes" xml:space="preserve">
          <source>There are two main kinds of test driver packages:</source>
          <target state="translated">テストドライバーのパッケージは大きく分けて2種類あります。</target>
        </trans-unit>
        <trans-unit id="dfa4cc6275a1be273aa99621fffa8ed93477a3e1" translate="yes" xml:space="preserve">
          <source>There are two main options for routing with Meteor and React. Either way, we recommend consulting our &lt;a href=&quot;routing&quot;&gt;Routing article&lt;/a&gt; for some general principles of routing in Meteor before writing your app.</source>
          <target state="translated">MeteorとReactを使用したルーティングには、主に2つのオプションがあります。いずれにしても、アプリを作成する前に、Meteorでのルーティングの一般的な原則について、&lt;a href=&quot;routing&quot;&gt;ルーティングの記事&lt;/a&gt;を参照することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="0219a31195ba33c6e3e859d4f4599fb46f8cf025" translate="yes" xml:space="preserve">
          <source>There are two main ways to configure your application outside of the code of the app itself:</source>
          <target state="translated">アプリ自体のコード以外でアプリを設定するには、主に2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="cdb30cded6eb49815f7639ec528590f00713c5bb" translate="yes" xml:space="preserve">
          <source>There are two principal ways to do it: on the developer&amp;rsquo;s machine before allowing them to push code to the central repository, and on a dedicated CI server after each push. Both techniques are useful, and both require running tests in a commandline-only fashion.</source>
          <target state="translated">これを行うには、主に2つの方法があります。開発者のマシンでコードを中央リポジトリにプッシュする前と、プッシュするたびに専用のCIサーバーでです。どちらの手法も有用であり、コマンドラインのみでテストを実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="43c4918fa555b203c351dfdd223a82fcdeb657a3" translate="yes" xml:space="preserve">
          <source>There are two styles of pagination that are commonly used, a &amp;ldquo;page-by-page&amp;rdquo; style&amp;mdash;where you show only one page of results at a time, starting at some offset (which the user can control), and &amp;ldquo;infinite-scroll&amp;rdquo; style, where you show an increasing number of pages of items, as the user moves through the list (this is the typical &amp;ldquo;feed&amp;rdquo; style user interface).</source>
          <target state="translated">一般的に使用されるページ付けには、「ページごと」スタイルの2つのスタイルがあります。一度に1ページだけの結果を表示します（ユーザーが制御できるオフセット）から開始し、「無限スクロール」 」スタイル。ユーザーがリストを移動するにつれて、アイテムのページ数を増やして表示します（これは一般的な「フィード」スタイルのユーザーインターフェイスです）。</target>
        </trans-unit>
        <trans-unit id="c6e479eb712d65001efc0c3274b79c7089c641d5" translate="yes" xml:space="preserve">
          <source>There are two types of minifiers one can add: a minifier processing JavaScript (registered extensions: &lt;code&gt;['js']&lt;/code&gt;) and a minifier processing CSS (extensions: &lt;code&gt;['css']&lt;/code&gt;).</source>
          <target state="translated">追加できる縮小版には2つのタイプがあります：縮小版処理JavaScript（登録済み拡張機能： &lt;code&gt;['js']&lt;/code&gt; ）と縮小版処理CSS（拡張機能： &lt;code&gt;['css']&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="cf02af84cef61722b1c0fd9d70c286fa884e8629" translate="yes" xml:space="preserve">
          <source>There are types of rendering logic that appear related to the route but which also seem related to user interface rendering. A classic example is authorization; for instance, you may want to render a login form for some subset of your pages if the user is not yet logged in.</source>
          <target state="translated">ルートに関連しているように見えるレンダリング ロジックにも、ユーザー インターフェイス レンダリングに関連しているように見えるタイプがあります。例えば、ユーザーがまだログインしていない場合に、ページのいくつかのサブセットに対してログインフォームをレンダリングしたい場合があります。</target>
        </trans-unit>
        <trans-unit id="feab03640f5b214fd02eb8bb24522c7d32ba70f6" translate="yes" xml:space="preserve">
          <source>There have been several articles about the potential pitfalls of accepting MongoDB update operators from the client, in particular the &lt;a href=&quot;https://www.discovermeteor.com/blog/allow-deny-security-challenge/&quot;&gt;Allow &amp;amp; Deny Security Challenge&lt;/a&gt; and its &lt;a href=&quot;https://www.discovermeteor.com/blog/allow-deny-challenge-results/&quot;&gt;results&lt;/a&gt;, both on the Discover Meteor blog.</source>
          <target state="translated">Discover Meteorブログには、クライアントからMongoDB更新オペレーターを受け入れる際の潜在的な落とし穴、特に&lt;a href=&quot;https://www.discovermeteor.com/blog/allow-deny-security-challenge/&quot;&gt;Allow＆Deny Security Challenge&lt;/a&gt;とその&lt;a href=&quot;https://www.discovermeteor.com/blog/allow-deny-challenge-results/&quot;&gt;結果&lt;/a&gt;に関する記事がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="f6637cc8dcff95fec1db52157e25b45ccd9b5eb4" translate="yes" xml:space="preserve">
          <source>There is a case where you might &lt;em&gt;need&lt;/em&gt; to use CommonJS, even if your project has the &lt;code&gt;ecmascript&lt;/code&gt; package: if you want to conditionally include a module. &lt;code&gt;import&lt;/code&gt; statements must be at top-level scope, so they cannot be within an &lt;code&gt;if&lt;/code&gt; block. If you&amp;rsquo;re writing a common file, loaded on both client and server, you might want to import a module in only one or the other environment:</source>
          <target state="translated">プロジェクトに &lt;code&gt;ecmascript&lt;/code&gt; パッケージがある場合でも、CommonJSを使用する&lt;em&gt;必要&lt;/em&gt;がある場合があります。条件付きでモジュールを含めたい場合です。 &lt;code&gt;import&lt;/code&gt; ステートメントはトップレベルのスコープにある必要があるため、 &lt;code&gt;if&lt;/code&gt; ブロック内に置くことはできません。クライアントとサーバーの両方にロードされた共通ファイルを書き込んでいる場合は、どちらか一方の環境のみにモジュールをインポートすることができます。</target>
        </trans-unit>
        <trans-unit id="9b6e1bfc4ca9347027386872848599f05e98d3f9" translate="yes" xml:space="preserve">
          <source>There is a complementary function &lt;code&gt;Template.instance().subscriptionsReady()&lt;/code&gt; which returns true when all of the subscriptions called with &lt;code&gt;this.subscribe&lt;/code&gt; are ready.</source>
          <target state="translated">&lt;code&gt;this.subscribe&lt;/code&gt; で呼び出されたすべてのサブスクリプションの準備ができたときにtrueを返す補完的な関数 &lt;code&gt;Template.instance().subscriptionsReady()&lt;/code&gt; あります。</target>
        </trans-unit>
        <trans-unit id="97410b7e4ad6f74d2c57319fad31065551487f09" translate="yes" xml:space="preserve">
          <source>There is a core package called &lt;code&gt;caching-compiler&lt;/code&gt; that implements most of the common logic of keeping both in-memory and on-disk caches. The easiest way to implement caching correctly is to subclass the &lt;code&gt;CachingCompiler&lt;/code&gt; or &lt;code&gt;MultiFileCachingCompiler&lt;/code&gt; class from this package in your build plugin. &lt;code&gt;CachingCompiler&lt;/code&gt; is for compilers that consider each file completely independently; &lt;code&gt;MultiFileCachingCompiler&lt;/code&gt; is for compilers that allow files to reference each other. To get this class in your plugin namespace, add a dependency to the plugin definition:</source>
          <target state="translated">インメモリキャッシュとオンディスクキャッシュの両方を維持する一般的なロジックのほとんどを実装する、 &lt;code&gt;caching-compiler&lt;/code&gt; と呼ばれるコアパッケージがあります。キャッシングを正しく実装する最も簡単な方法は、ビルドプラグインでこのパッケージの &lt;code&gt;CachingCompiler&lt;/code&gt; または &lt;code&gt;MultiFileCachingCompiler&lt;/code&gt; クラスをサブクラス化することです。 &lt;code&gt;CachingCompiler&lt;/code&gt; は、各ファイルを完全に独立して考慮するコンパイラー用です。 &lt;code&gt;MultiFileCachingCompiler&lt;/code&gt; は、ファイルが相互に参照できるようにするコンパイラ用です。プラグイン名前空間でこのクラスを取得するには、プラグイン定義に依存関係を追加します。</target>
        </trans-unit>
        <trans-unit id="6d7ba477b67bd7644f00634976ebf7c00089618a" translate="yes" xml:space="preserve">
          <source>There is a package for logging in with Weibo, but it is no longer being actively maintained.</source>
          <target state="translated">Weiboでログインするためのパッケージがありますが、現在は積極的なメンテナンスは行われていません。</target>
        </trans-unit>
        <trans-unit id="0675137be3d2503602c9c45a075ffbecacf390da" translate="yes" xml:space="preserve">
          <source>There is a special top-level directory named &lt;code&gt;cordova-build-override/&lt;/code&gt; that allows you to override, in an ad-hoc way, parts of your Cordova project that Meteor generates for you in the &lt;code&gt;.meteor/local/cordova-build&lt;/code&gt; directory. The entire file tree of this directory will be &lt;code&gt;cp -R&lt;/code&gt; (copied overwriting existing files) to the Cordova project right before the build and compilation step.</source>
          <target state="translated">&lt;code&gt;cordova-build-override/&lt;/code&gt; という名前の特別なトップレベルディレクトリがあり、Meteorが &lt;code&gt;.meteor/local/cordova-build&lt;/code&gt; ディレクトリに生成するCordovaプロジェクトの一部をアドホックな方法でオーバーライドできます。このディレクトリのファイルツリー全体は、ビルドとコンパイルのステップの直前にCordovaプロジェクトに &lt;code&gt;cp -R&lt;/code&gt; （既存のファイルを上書きしてコピー）になります。</target>
        </trans-unit>
        <trans-unit id="251b75c3cf94838235667d95e75c2d48cb410ab8" translate="yes" xml:space="preserve">
          <source>There is a third way to use a collection in Meteor. On the client or server, if you create a collection in one of these two ways:</source>
          <target state="translated">Meteorでコレクションを使用する3つ目の方法があります。クライアントまたはサーバー上で、この2つの方法のいずれかでコレクションを作成すると</target>
        </trans-unit>
        <trans-unit id="184bcfb237dc3a9a373f09cead584292fd3ae177" translate="yes" xml:space="preserve">
          <source>There is no need to use Android Studio if you prefer a stand-alone install. Just make sure you install the most recent versions of the &lt;a href=&quot;http://developer.android.com/sdk/index.html#Other&quot;&gt;Android SDK Tools&lt;/a&gt; and download the required &lt;a href=&quot;http://developer.android.com/sdk/installing/adding-packages.html&quot;&gt;additional packages&lt;/a&gt; yourself using the &lt;a href=&quot;http://developer.android.com/tools/help/sdk-manager.html&quot;&gt;Android SDK Manager&lt;/a&gt;.</source>
          <target state="translated">スタンドアロンインストールを希望する場合は、Android Studioを使用する必要はありません。ちょうどあなたが最新バージョンのmake installを&lt;a href=&quot;http://developer.android.com/sdk/index.html#Other&quot;&gt;AndroidのSDKツールを&lt;/a&gt;、必要なダウンロード&lt;a href=&quot;http://developer.android.com/sdk/installing/adding-packages.html&quot;&gt;追加パッケージを&lt;/a&gt;使用して自分で&lt;a href=&quot;http://developer.android.com/tools/help/sdk-manager.html&quot;&gt;AndroidのSDK Managerを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6fe6efa47a0fe8274a5583e2a7b872695d5c6d1d" translate="yes" xml:space="preserve">
          <source>There is no way to make a package-scope variable from a &lt;code&gt;.coffee&lt;/code&gt; file other than exporting it. We couldn&amp;rsquo;t figure out a way to make this fit naturally inside the CoffeeScript language. If you want to use package-scope variables with CoffeeScript, one way is to make a short &lt;code&gt;.js&lt;/code&gt; file that declares all of your package-scope variables. They can then be used and assigned to from &lt;code&gt;.coffee&lt;/code&gt; files.</source>
          <target state="translated">エクスポートする以外に、 &lt;code&gt;.coffee&lt;/code&gt; ファイルからパッケージスコープ変数を作成する方法はありません。これをCoffeeScript言語の中で自然に適合させる方法を見つけることができませんでした。CoffeeScriptでパッケージスコープ変数を使用する場合の1つの方法は、すべてのパッケージスコープ変数を宣言する短い &lt;code&gt;.js&lt;/code&gt; ファイルを作成することです。その後、それらを使用して &lt;code&gt;.coffee&lt;/code&gt; ファイルから割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="d1f89804adfbd1890343bdde871e3f79d9613a1d" translate="yes" xml:space="preserve">
          <source>There is ongoing work in the Cordova project that will improve this situation and make it easier for plugins to specify their platform dependencies, so Cordova can determine compatible versions.</source>
          <target state="translated">Cordovaプロジェクトでは、この状況を改善し、プラグインがプラットフォーム依存関係を簡単に指定できるようにし、Cordovaが互換性のあるバージョンを判断できるようにするための作業が進行中です。</target>
        </trans-unit>
        <trans-unit id="1bfb2dcddd69bdf56e8fea78278201a4bbf2ca9f" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a lot of scope for better isolation and testing utilities.</source>
          <target state="translated">分離とテストのユーティリティを改善する余地はたくさんあります。</target>
        </trans-unit>
        <trans-unit id="904c13513264628b49aa329ab4057be303f110f9" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a tempting existing field called &lt;code&gt;profile&lt;/code&gt; that is added by default when a new user registers. This field was historically intended to be used as a scratch pad for user-specific data - maybe their image avatar, name, intro text, etc. Because of this, &lt;strong&gt;the &lt;code&gt;profile&lt;/code&gt; field on every user is automatically writeable by that user from the client&lt;/strong&gt;. It&amp;rsquo;s also automatically published to the client for that particular user.</source>
          <target state="translated">新規ユーザーの登録時にデフォルトで追加される &lt;code&gt;profile&lt;/code&gt; と呼ばれる魅力的な既存のフィールドがあります。このフィールドは、歴史的にユーザー固有のデータのためのスクラッチパッドとして使用されることを意図していた-そのための多分その画像アバター、名前、イントロテキストなどを、&lt;strong&gt; &lt;code&gt;profile&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt;すべてのユーザーのフィールドは、クライアントからそのユーザーによって自動的に書き込み可能です&lt;/strong&gt;。また、特定のユーザーのクライアントに自動的に公開されます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a078125e6fb6f9cf6e07d3afe9afdbe13358796a" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s also an even more restricted type of reusable component, a &amp;ldquo;pure&amp;rdquo; component, which does not have any internal state. For instance in the Todos app, the &lt;code&gt;Todos_item&lt;/code&gt; template decides what to render solely based on its arguments. Pure components are even easier to reason about and test than reusable ones and so should be preferred wherever possible.</source>
          <target state="translated">また、内部状態を持たない、さらに制限されたタイプの再利用可能なコンポーネント「純粋な」コンポーネントもあります。たとえば、Todosアプリでは、 &lt;code&gt;Todos_item&lt;/code&gt; テンプレートは、その引数に基づいて何をレンダリングするかを決定します。純粋なコンポーネントは、再利用可能なコンポーネントよりも推論とテストがさらに容易であるため、可能な限り推奨されます。</target>
        </trans-unit>
        <trans-unit id="1d10271641a82dc525695dafaf181e6eed96146c" translate="yes" xml:space="preserve">
          <source>Therefore, when you include &lt;code&gt;{{&amp;gt; Template.contentBlock}}&lt;/code&gt;, Spacebars hides the data context of the calling template, and any data contexts established in the template by &lt;code&gt;#each&lt;/code&gt; and &lt;code&gt;#with&lt;/code&gt;. They are not visible to the content block, even via &lt;code&gt;..&lt;/code&gt;. Put another way, it&amp;rsquo;s as if the &lt;code&gt;{{&amp;gt; Template.contentBlock}}&lt;/code&gt; inclusion occurred at the location where &lt;code&gt;{{#unless}}&lt;/code&gt; was invoked, as far as the data context stack is concerned.</source>
          <target state="translated">したがって、 &lt;code&gt;{{&amp;gt; Template.contentBlock}}&lt;/code&gt; を含めると、スペースバーは、呼び出し元のテンプレートのデータコンテキストと、 &lt;code&gt;#with&lt;/code&gt; &lt;code&gt;#each&lt;/code&gt; および#withによってテンプレートで確立されたデータコンテキストを非表示にします。 &lt;code&gt;..&lt;/code&gt; 。を介しても、コンテンツブロックには表示されません。言い換えると、データコンテキストスタックに関する限り、 &lt;code&gt;{{&amp;gt; Template.contentBlock}}&lt;/code&gt; インクルードが &lt;code&gt;{{#unless}}&lt;/code&gt; が呼び出された場所で発生したかのようです。</target>
        </trans-unit>
        <trans-unit id="0fb4dc7b086310844026b5109a868ecfb50eaa5c" translate="yes" xml:space="preserve">
          <source>These &lt;code&gt;main.js&lt;/code&gt; files won&amp;rsquo;t do anything themselves, but they should import some &lt;em&gt;startup&lt;/em&gt; modules which will run immediately, on client and server respectively, when the app loads. These modules should do any configuration necessary for the packages you are using in your app, and import the rest of your app&amp;rsquo;s code.</source>
          <target state="translated">これらの &lt;code&gt;main.js&lt;/code&gt; ファイル自体は何もしませんが、アプリが読み込まれたときにクライアントとサーバーでそれぞれすぐに実行されるいくつかの&lt;em&gt;スタートアップ&lt;/em&gt;モジュールをインポートする必要があります。これらのモジュールは、アプリで使用しているパッケージに必要な構成を行い、アプリの残りのコードをインポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="ae8c668bbb50dc31bc7ad377168e8cd34efdfa7e" translate="yes" xml:space="preserve">
          <source>These callbacks are called when an occurrence of a template is taken off the page for any reason and not replaced with a re-rendering. Inside a callback, &lt;code&gt;this&lt;/code&gt; is the &lt;a href=&quot;templates#Template-instances&quot;&gt;template instance&lt;/a&gt; object being destroyed.</source>
          <target state="translated">これらのコールバックは、テンプレートの発生が何らかの理由でページから削除され、再レンダリングで置き換えられない場合に呼び出されます。コールバック内では、 &lt;code&gt;this&lt;/code&gt; は破棄される&lt;a href=&quot;templates#Template-instances&quot;&gt;テンプレートインスタンス&lt;/a&gt;オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="ad6368edeb141c9a5233fbf9cf37e2d787311f9b" translate="yes" xml:space="preserve">
          <source>These callbacks fire once and are the first group of callbacks to fire. Handling the &lt;code&gt;created&lt;/code&gt; event is a useful way to set up values on template instance that are read from template helpers using &lt;code&gt;Template.instance()&lt;/code&gt;.</source>
          <target state="translated">これらのコールバックは1回起動され、起動するコールバックの最初のグループです。 &lt;code&gt;created&lt;/code&gt; イベントの処理は、 &lt;code&gt;Template.instance()&lt;/code&gt; を使用してテンプレートヘルパーから読み取られるテンプレートインスタンスに値を設定するための便利な方法です。</target>
        </trans-unit>
        <trans-unit id="9ac06c44043110df5a9f32a56f7326ea9c7b464e" translate="yes" xml:space="preserve">
          <source>These checks are run only when a client tries to write to the database directly, for example by calling &lt;code&gt;update&lt;/code&gt; from inside an event handler. Server code is trusted and isn&amp;rsquo;t subject to &lt;code&gt;allow&lt;/code&gt; and &lt;code&gt;deny&lt;/code&gt; restrictions. That includes methods that are called with &lt;code&gt;Meteor.call&lt;/code&gt; &amp;mdash; they are expected to do their own access checking rather than relying on &lt;code&gt;allow&lt;/code&gt; and &lt;code&gt;deny&lt;/code&gt;.</source>
          <target state="translated">これらのチェックは、たとえばイベントハンドラー内から &lt;code&gt;update&lt;/code&gt; を呼び出すなどして、クライアントがデータベースに直接書き込もうとしたときにのみ実行されます。サーバーコードは信頼され、 &lt;code&gt;allow&lt;/code&gt; および &lt;code&gt;deny&lt;/code&gt; 制限の対象ではありません。これには、 &lt;code&gt;Meteor.call&lt;/code&gt; で呼び出されるメソッドが含まれます。それらは、 &lt;code&gt;allow&lt;/code&gt; および &lt;code&gt;deny&lt;/code&gt; に依存するのではなく、独自のアクセスチェックを行うことが期待されています。</target>
        </trans-unit>
        <trans-unit id="0472ebc553ae1a2a8b1a21ce12a92864782fec0d" translate="yes" xml:space="preserve">
          <source>These days, the landscape of JavaScript tools and frameworks is constantly shifting, and the language itself is evolving just as rapidly. It&amp;rsquo;s no longer reasonable to wait for web browsers to implement the language features you want to use. Most JavaScript development workflows rely on compiling code to work on the lowest common denominator of environments, while letting you use the newest features in development. Meteor has support for some of the most popular tools out of the box.</source>
          <target state="translated">最近、JavaScriptツールとフレームワークの状況は常に変化しており、言語自体も同様に急速に進化しています。Webブラウザーが使用したい言語機能を実装するのを待つのはもはや合理的ではありません。ほとんどのJavaScript開発ワークフローは、コードをコンパイルして環境の共通点を最小限に抑えながら、開発で最新の機能を使用できるようにします。Meteorは、すぐに使える最も人気のあるツールのいくつかをサポートしています。</target>
        </trans-unit>
        <trans-unit id="0462e62c402247a57e8f7002d0a85b243ae39cbc" translate="yes" xml:space="preserve">
          <source>These declarations make the variables &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt; (and so on) available not only within the scope of the &lt;code&gt;exporter.js&lt;/code&gt; module, but also to other modules that &lt;code&gt;import&lt;/code&gt; from &lt;code&gt;exporter.js&lt;/code&gt;.</source>
          <target state="translated">これらの宣言は、変数作る、 &lt;code&gt;b&lt;/code&gt; 、 &lt;code&gt;c&lt;/code&gt; の範囲内だけでなく、利用可能な（など） &lt;code&gt;exporter.js&lt;/code&gt; のモジュールだけでなく、他のモジュールへの &lt;code&gt;import&lt;/code&gt; から &lt;code&gt;exporter.js&lt;/code&gt; を。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aa30eaf1ec7e1a6cff7a8ca0df382678b559449a" translate="yes" xml:space="preserve">
          <source>These examples should get you started with &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; syntax. For further reading, here is a very detailed &lt;a href=&quot;http://www.2ality.com/2014/09/es6-modules-final.html&quot;&gt;explanation&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/rauschma&quot;&gt;Axel Rauschmayer&lt;/a&gt; of every variation of &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; syntax.</source>
          <target state="translated">これらの例は、 &lt;code&gt;import&lt;/code&gt; と &lt;code&gt;export&lt;/code&gt; 構文を使い始めるのに役立ちます。詳細については、 &lt;code&gt;import&lt;/code&gt; と &lt;code&gt;export&lt;/code&gt; 構文のすべてのバリエーション&lt;a href=&quot;http://www.2ality.com/2014/09/es6-modules-final.html&quot;&gt;について&lt;/a&gt;、&lt;a href=&quot;https://twitter.com/rauschma&quot;&gt;Axel Rauschmayer&lt;/a&gt;が詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="86ffc0e598a4abbfe59e37179c7768598dbd5db6" translate="yes" xml:space="preserve">
          <source>These functions control how Meteor servers publish sets of records and how clients can subscribe to those sets.</source>
          <target state="translated">これらの関数は、Meteorサーバがレコードのセットを公開する方法と、クライアントがそれらのセットをサブスクライブする方法を制御します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
