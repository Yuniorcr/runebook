<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="ansible">
    <body>
      <group id="ansible">
        <trans-unit id="0fd92308f15c7b0abf6973b7defdbd676ab073f7" translate="yes" xml:space="preserve">
          <source>IntoIter::product</source>
          <target state="translated">IntoIter::product</target>
        </trans-unit>
        <trans-unit id="87be344797cbbbf8b5139732e88f449d1b5cc284" translate="yes" xml:space="preserve">
          <source>IntoIter::rev</source>
          <target state="translated">IntoIter::rev</target>
        </trans-unit>
        <trans-unit id="cb35ac9eaac8868683280e1dd8b84b76dcd5253c" translate="yes" xml:space="preserve">
          <source>IntoIter::rfind</source>
          <target state="translated">IntoIter::rfind</target>
        </trans-unit>
        <trans-unit id="7231cdd22fc5f767b74f59229681b2cb27b3a8a9" translate="yes" xml:space="preserve">
          <source>IntoIter::rfold</source>
          <target state="translated">IntoIter::rfold</target>
        </trans-unit>
        <trans-unit id="fc4f91f7bc50fd166afe9eee868201d382ba4b60" translate="yes" xml:space="preserve">
          <source>IntoIter::rposition</source>
          <target state="translated">IntoIter::rposition</target>
        </trans-unit>
        <trans-unit id="5298f16d195003a5ea725c4a2f787c36fc2ecf95" translate="yes" xml:space="preserve">
          <source>IntoIter::scan</source>
          <target state="translated">IntoIter::scan</target>
        </trans-unit>
        <trans-unit id="e2c872b5440e3714483ceb31004f10b634f3b596" translate="yes" xml:space="preserve">
          <source>IntoIter::size_hint</source>
          <target state="translated">IntoIter::size_hint</target>
        </trans-unit>
        <trans-unit id="8da43de95b9fb617735c0b5f05ce1971df79ae91" translate="yes" xml:space="preserve">
          <source>IntoIter::skip</source>
          <target state="translated">IntoIter::skip</target>
        </trans-unit>
        <trans-unit id="7cdd555373586d1cc526b91787520022c1b5802f" translate="yes" xml:space="preserve">
          <source>IntoIter::skip_while</source>
          <target state="translated">IntoIter::skip_while</target>
        </trans-unit>
        <trans-unit id="661cf4b069d769b36d7e4adf5b8fb0aa4c3dd29f" translate="yes" xml:space="preserve">
          <source>IntoIter::step_by</source>
          <target state="translated">IntoIter::step_by</target>
        </trans-unit>
        <trans-unit id="98bf1ddbdcb82a855ba5cfa0a55bb46fec337f4b" translate="yes" xml:space="preserve">
          <source>IntoIter::sum</source>
          <target state="translated">IntoIter::sum</target>
        </trans-unit>
        <trans-unit id="d4618f74f9d5d75a0acca06e8a09c073539a2aef" translate="yes" xml:space="preserve">
          <source>IntoIter::take</source>
          <target state="translated">IntoIter::take</target>
        </trans-unit>
        <trans-unit id="9fe22ceb1381a9edace4e35f2d28c23142f99a56" translate="yes" xml:space="preserve">
          <source>IntoIter::take_while</source>
          <target state="translated">IntoIter::take_while</target>
        </trans-unit>
        <trans-unit id="2b34db4df91a1ac8be037bcd7eb58942819d00ad" translate="yes" xml:space="preserve">
          <source>IntoIter::to_owned</source>
          <target state="translated">IntoIter::to_owned</target>
        </trans-unit>
        <trans-unit id="772750fa37f6b74b4e6358710cdb957bddeb44ce" translate="yes" xml:space="preserve">
          <source>IntoIter::try_fold</source>
          <target state="translated">IntoIter::try_fold</target>
        </trans-unit>
        <trans-unit id="edf3daf75af0e05f2d21875b7c094720775d11c5" translate="yes" xml:space="preserve">
          <source>IntoIter::try_for_each</source>
          <target state="translated">IntoIter::try_for_each</target>
        </trans-unit>
        <trans-unit id="d6b9806fe0a7d9fecc2d3de823bae6fd8502edb8" translate="yes" xml:space="preserve">
          <source>IntoIter::try_from</source>
          <target state="translated">IntoIter::try_from</target>
        </trans-unit>
        <trans-unit id="c651b804d75adc612d6c4b9e3a2f3139ff83b4ef" translate="yes" xml:space="preserve">
          <source>IntoIter::try_into</source>
          <target state="translated">IntoIter::try_into</target>
        </trans-unit>
        <trans-unit id="0dba2be6b9f4b004d4e321a351df358b821e2637" translate="yes" xml:space="preserve">
          <source>IntoIter::try_rfold</source>
          <target state="translated">IntoIter::try_rfold</target>
        </trans-unit>
        <trans-unit id="b656b4334602090068cb0e3af82bcfe6e99000c6" translate="yes" xml:space="preserve">
          <source>IntoIter::type_id</source>
          <target state="translated">IntoIter::type_id</target>
        </trans-unit>
        <trans-unit id="93d7a5a1be00e631699c6d0e8f2b9a469d7682df" translate="yes" xml:space="preserve">
          <source>IntoIter::unzip</source>
          <target state="translated">IntoIter::unzip</target>
        </trans-unit>
        <trans-unit id="2ead629bd91db49e5e289d4a9d83aa966e2aef76" translate="yes" xml:space="preserve">
          <source>IntoIter::zip</source>
          <target state="translated">IntoIter::zip</target>
        </trans-unit>
        <trans-unit id="7ec61d625cdf338b6e7eefc1b7f35fb136a21981" translate="yes" xml:space="preserve">
          <source>IntoIterator</source>
          <target state="translated">IntoIterator</target>
        </trans-unit>
        <trans-unit id="6c78f7b3978fea56c0f5ff4073e20eca741514bf" translate="yes" xml:space="preserve">
          <source>IntoIterator::into_iter</source>
          <target state="translated">IntoIterator::into_iter</target>
        </trans-unit>
        <trans-unit id="16b2c49e47a9cdd1e65117e3f6dfb4bcbee6f387" translate="yes" xml:space="preserve">
          <source>IntoRawFd</source>
          <target state="translated">IntoRawFd</target>
        </trans-unit>
        <trans-unit id="a365631ab12e53b287fe74345a1899c6e331c741" translate="yes" xml:space="preserve">
          <source>IntoRawHandle</source>
          <target state="translated">IntoRawHandle</target>
        </trans-unit>
        <trans-unit id="9d9a97edc4ce8e9862f860071c09a9c14a518af1" translate="yes" xml:space="preserve">
          <source>IntoRawSocket</source>
          <target state="translated">IntoRawSocket</target>
        </trans-unit>
        <trans-unit id="7f11e8cc7632bcc87c94b5a2c9b1b74de01004d8" translate="yes" xml:space="preserve">
          <source>IntoStringError</source>
          <target state="translated">IntoStringError</target>
        </trans-unit>
        <trans-unit id="50d9b93fcfc23141a5ffff21c34c9750d4a3c933" translate="yes" xml:space="preserve">
          <source>IntoStringError::borrow</source>
          <target state="translated">IntoStringError::borrow</target>
        </trans-unit>
        <trans-unit id="1966c3cf239a5f29a297fcc1a9db02fe5893217d" translate="yes" xml:space="preserve">
          <source>IntoStringError::borrow_mut</source>
          <target state="translated">IntoStringError::borrow_mut</target>
        </trans-unit>
        <trans-unit id="4452bc0fb43159ff656d4a93c8618a42c0393734" translate="yes" xml:space="preserve">
          <source>IntoStringError::cause</source>
          <target state="translated">IntoStringError::cause</target>
        </trans-unit>
        <trans-unit id="311fc7dd5db9e933c2a85125d79440050ba91ace" translate="yes" xml:space="preserve">
          <source>IntoStringError::clone</source>
          <target state="translated">IntoStringError::clone</target>
        </trans-unit>
        <trans-unit id="170ddc74179150ba05b86b24f4fbc1d6aa2d52e0" translate="yes" xml:space="preserve">
          <source>IntoStringError::clone_from</source>
          <target state="translated">IntoStringError::clone_from</target>
        </trans-unit>
        <trans-unit id="e4500a75c8a08379e11e639eff9a48d27a0ae646" translate="yes" xml:space="preserve">
          <source>IntoStringError::clone_into</source>
          <target state="translated">IntoStringError::clone_into</target>
        </trans-unit>
        <trans-unit id="e6d3177264e5419002ca6b90870d84f6de5318ae" translate="yes" xml:space="preserve">
          <source>IntoStringError::description</source>
          <target state="translated">IntoStringError::description</target>
        </trans-unit>
        <trans-unit id="5bb48ecdc95fe61110fc679d446ff8bfb8efd2a3" translate="yes" xml:space="preserve">
          <source>IntoStringError::eq</source>
          <target state="translated">IntoStringError::eq</target>
        </trans-unit>
        <trans-unit id="2de62132572699348da4c1486645acbfe65816f7" translate="yes" xml:space="preserve">
          <source>IntoStringError::fmt</source>
          <target state="translated">IntoStringError::fmt</target>
        </trans-unit>
        <trans-unit id="371ee3a8925c033093eb47daab1eaf52038293a7" translate="yes" xml:space="preserve">
          <source>IntoStringError::from</source>
          <target state="translated">IntoStringError::from</target>
        </trans-unit>
        <trans-unit id="7701464be4ef893fc2c5c3f4c5145f545fd69bc7" translate="yes" xml:space="preserve">
          <source>IntoStringError::into</source>
          <target state="translated">IntoStringError::into</target>
        </trans-unit>
        <trans-unit id="582c82615bdad453dc78b3b7161f1c2e89500049" translate="yes" xml:space="preserve">
          <source>IntoStringError::into_cstring</source>
          <target state="translated">IntoStringError::into_cstring</target>
        </trans-unit>
        <trans-unit id="72c3a4bc2137cb67b0ad93a2e5391da1fc022c51" translate="yes" xml:space="preserve">
          <source>IntoStringError::ne</source>
          <target state="translated">IntoStringError::ne</target>
        </trans-unit>
        <trans-unit id="44a66cffe02ce75fc4e71dc95ab13d91cdba6c61" translate="yes" xml:space="preserve">
          <source>IntoStringError::source</source>
          <target state="translated">IntoStringError::source</target>
        </trans-unit>
        <trans-unit id="ad03af038caae21639f90297a46d2ffcd2596ee4" translate="yes" xml:space="preserve">
          <source>IntoStringError::to_owned</source>
          <target state="translated">IntoStringError::to_owned</target>
        </trans-unit>
        <trans-unit id="c09f10ab1dd9b0342f7fb1dad4fc7e2096345bb9" translate="yes" xml:space="preserve">
          <source>IntoStringError::to_string</source>
          <target state="translated">IntoStringError::to_string</target>
        </trans-unit>
        <trans-unit id="5c3026fa186ad1f8d938dd92384c9db9e3dc865e" translate="yes" xml:space="preserve">
          <source>IntoStringError::try_from</source>
          <target state="translated">IntoStringError::try_from</target>
        </trans-unit>
        <trans-unit id="9fba74ad721f87d025ad8e718482da5c76958744" translate="yes" xml:space="preserve">
          <source>IntoStringError::try_into</source>
          <target state="translated">IntoStringError::try_into</target>
        </trans-unit>
        <trans-unit id="99cffcb47b8ca60f8f0bb7b29b56b473ac510576" translate="yes" xml:space="preserve">
          <source>IntoStringError::type_id</source>
          <target state="translated">IntoStringError::type_id</target>
        </trans-unit>
        <trans-unit id="0bd993d0b67ac388c683b5e901ee7503442bb940" translate="yes" xml:space="preserve">
          <source>IntoStringError::utf8_error</source>
          <target state="translated">IntoStringError::utf8_error</target>
        </trans-unit>
        <trans-unit id="54ac30147bd72e0bc1ea9316f36c7e85df3ce9ba" translate="yes" xml:space="preserve">
          <source>Introducing mutability 'inside' of something immutable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="91f8a82c86c42154fb0095cbe44eb1389b3549a5" translate="yes" xml:space="preserve">
          <source>Invalid Array Element Access</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48ebb476b87cd60f48ebf50a0407b351c5107cec" translate="yes" xml:space="preserve">
          <source>Invalid monomorphization of an intrinsic function was used. Erroneous code example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2724bdaef4601c56db3d05244277ab05b35a54b3" translate="yes" xml:space="preserve">
          <source>Invalid values in primitive types, even in private fields and locals:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="556ef6bf1ce64fe45a2cdf7c095ee4ab45ecf2bc" translate="yes" xml:space="preserve">
          <source>Inverse hyperbolic cosine function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ed8d04de38ff90d141bd8e28a751473d8b5e58a" translate="yes" xml:space="preserve">
          <source>Inverse hyperbolic sine function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d434c1339f113d603c470280ae15d6ba4069dd" translate="yes" xml:space="preserve">
          <source>Inverse hyperbolic tangent function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88febe0c5bd47bdcaa24fa407c931736c9254d02" translate="yes" xml:space="preserve">
          <source>Invokes &lt;a href=&quot;../ffi/struct.osstring#method.capacity&quot;&gt;&lt;code&gt;capacity&lt;/code&gt;&lt;/a&gt; on the underlying instance of &lt;a href=&quot;../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf466fb0852d7cebcba10b12dd881c0dd0bb5daa" translate="yes" xml:space="preserve">
          <source>Invokes &lt;a href=&quot;../ffi/struct.osstring#method.clear&quot;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt; on the underlying instance of &lt;a href=&quot;../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84ecde704d4d279fa7d2d406323e14c8fdc0fdc9" translate="yes" xml:space="preserve">
          <source>Invokes &lt;a href=&quot;../ffi/struct.osstring#method.reserve&quot;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt; on the underlying instance of &lt;a href=&quot;../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19bb4e6602e1786c18a6b52f8a0bcf8a73adf2a7" translate="yes" xml:space="preserve">
          <source>Invokes &lt;a href=&quot;../ffi/struct.osstring#method.reserve_exact&quot;&gt;&lt;code&gt;reserve_exact&lt;/code&gt;&lt;/a&gt; on the underlying instance of &lt;a href=&quot;../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17f17310b62ca98a66dacbef4b44348c04ea8919" translate="yes" xml:space="preserve">
          <source>Invokes &lt;a href=&quot;../ffi/struct.osstring#method.shrink_to&quot;&gt;&lt;code&gt;shrink_to&lt;/code&gt;&lt;/a&gt; on the underlying instance of &lt;a href=&quot;../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1a66892291a57859c285b1511e4adb63b718ef" translate="yes" xml:space="preserve">
          <source>Invokes &lt;a href=&quot;../ffi/struct.osstring#method.shrink_to_fit&quot;&gt;&lt;code&gt;shrink_to_fit&lt;/code&gt;&lt;/a&gt; on the underlying instance of &lt;a href=&quot;../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33939d473461270530bee40f4613f194eeb624e1" translate="yes" xml:space="preserve">
          <source>Invokes a closure, capturing the cause of an unwinding panic if one occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dc0bc0c16d89f8a26d9f8e8e27b63f4e79127b2" translate="yes" xml:space="preserve">
          <source>Invokes memset on the specified pointer, setting &lt;code&gt;count * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; bytes of memory starting at &lt;code&gt;self&lt;/code&gt; to &lt;code&gt;val&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7edb4f958e67ccc2ebdef5e59be5a3705d1b5984" translate="yes" xml:space="preserve">
          <source>Invoking the macro on an expression moves and takes ownership of it before returning the evaluated expression unchanged. If the type of the expression does not implement &lt;code&gt;Copy&lt;/code&gt; and you don't want to give up ownership, you can instead borrow with &lt;code&gt;dbg!(&amp;amp;expr)&lt;/code&gt; for some expression &lt;code&gt;expr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a85319a9242521d1b81154c86dbb76178cda35d2" translate="yes" xml:space="preserve">
          <source>Invoking undefined behavior via compiler intrinsics:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea7ba835c096df0008ad44cff1240d3b0866ef1" translate="yes" xml:space="preserve">
          <source>IoSlice</source>
          <target state="translated">IoSlice</target>
        </trans-unit>
        <trans-unit id="bf69b8681dc713cd673b4744a6a18884b73addc1" translate="yes" xml:space="preserve">
          <source>IoSlice::align_to</source>
          <target state="translated">IoSlice::align_to</target>
        </trans-unit>
        <trans-unit id="b6ecef449d7c716925f5b7b0b49d082a4bdbc2b8" translate="yes" xml:space="preserve">
          <source>IoSlice::as_ptr</source>
          <target state="translated">IoSlice::as_ptr</target>
        </trans-unit>
        <trans-unit id="77a5c4c2b1cbe6822957872bc631e9dc81a97b7a" translate="yes" xml:space="preserve">
          <source>IoSlice::binary_search</source>
          <target state="translated">IoSlice::binary_search</target>
        </trans-unit>
        <trans-unit id="b99305714a884d4e67d7225ef67c1aaace3a0d2a" translate="yes" xml:space="preserve">
          <source>IoSlice::binary_search_by</source>
          <target state="translated">IoSlice::binary_search_by</target>
        </trans-unit>
        <trans-unit id="b2b7e6c0a986e61ca591420616fe6966a129fdad" translate="yes" xml:space="preserve">
          <source>IoSlice::binary_search_by_key</source>
          <target state="translated">IoSlice::binary_search_by_key</target>
        </trans-unit>
        <trans-unit id="69d111c0972ec5963c7284b91c7aebfcec55891b" translate="yes" xml:space="preserve">
          <source>IoSlice::borrow</source>
          <target state="translated">IoSlice::borrow</target>
        </trans-unit>
        <trans-unit id="e0220b06a9a728a2ee453fdb0bf48c89e6024a6b" translate="yes" xml:space="preserve">
          <source>IoSlice::borrow_mut</source>
          <target state="translated">IoSlice::borrow_mut</target>
        </trans-unit>
        <trans-unit id="67dc23a0402757984c60ce5b402f95252eb22d87" translate="yes" xml:space="preserve">
          <source>IoSlice::chunks</source>
          <target state="translated">IoSlice::chunks</target>
        </trans-unit>
        <trans-unit id="a3056337e95e295361e36fae2d3ac55a93aa581c" translate="yes" xml:space="preserve">
          <source>IoSlice::chunks_exact</source>
          <target state="translated">IoSlice::chunks_exact</target>
        </trans-unit>
        <trans-unit id="911fd13cfc35bda5552744aea0451f85b09933ce" translate="yes" xml:space="preserve">
          <source>IoSlice::contains</source>
          <target state="translated">IoSlice::contains</target>
        </trans-unit>
        <trans-unit id="1bff3dd00133bd3cfb286f3bea310ac0cf1421c3" translate="yes" xml:space="preserve">
          <source>IoSlice::deref</source>
          <target state="translated">IoSlice::deref</target>
        </trans-unit>
        <trans-unit id="48072cbda243e3b9e179d39ee1a7cc128d1a937f" translate="yes" xml:space="preserve">
          <source>IoSlice::ends_with</source>
          <target state="translated">IoSlice::ends_with</target>
        </trans-unit>
        <trans-unit id="12d21cc5f8a9a9ed66a9f121aa2ba7dcd992afa2" translate="yes" xml:space="preserve">
          <source>IoSlice::eq_ignore_ascii_case</source>
          <target state="translated">IoSlice::eq_ignore_ascii_case</target>
        </trans-unit>
        <trans-unit id="cd8d733f91433d04a8ce7781e52e70e7dfffd99f" translate="yes" xml:space="preserve">
          <source>IoSlice::first</source>
          <target state="translated">IoSlice::first</target>
        </trans-unit>
        <trans-unit id="df6126ce38880e35ce060ff0c854c8309a24ac0e" translate="yes" xml:space="preserve">
          <source>IoSlice::fmt</source>
          <target state="translated">IoSlice::fmt</target>
        </trans-unit>
        <trans-unit id="ff7211a4daabf521e93261511880baae217efac4" translate="yes" xml:space="preserve">
          <source>IoSlice::from</source>
          <target state="translated">IoSlice::from</target>
        </trans-unit>
        <trans-unit id="3f81ad3ba2d6f6e75b1565f7d95b6aaa063cf60a" translate="yes" xml:space="preserve">
          <source>IoSlice::get</source>
          <target state="translated">IoSlice::get</target>
        </trans-unit>
        <trans-unit id="ddd8c6f234cd7ab0c552da1f27123df012711db7" translate="yes" xml:space="preserve">
          <source>IoSlice::get_unchecked</source>
          <target state="translated">IoSlice::get_unchecked</target>
        </trans-unit>
        <trans-unit id="fea55d08cc2b49f13f05547189186a4dc8d60ff9" translate="yes" xml:space="preserve">
          <source>IoSlice::into</source>
          <target state="translated">IoSlice::into</target>
        </trans-unit>
        <trans-unit id="fa82db2f2b2c313a4de2311d7bc8d4baf4a421fa" translate="yes" xml:space="preserve">
          <source>IoSlice::is_ascii</source>
          <target state="translated">IoSlice::is_ascii</target>
        </trans-unit>
        <trans-unit id="ff882761d48529351ae9d206494e3bec2c600ee5" translate="yes" xml:space="preserve">
          <source>IoSlice::is_empty</source>
          <target state="translated">IoSlice::is_empty</target>
        </trans-unit>
        <trans-unit id="3545e77f51efa1c6b8286f04bc4e0b2470be417b" translate="yes" xml:space="preserve">
          <source>IoSlice::is_sorted</source>
          <target state="translated">IoSlice::is_sorted</target>
        </trans-unit>
        <trans-unit id="4701fb2e410ad6e71f1f087266f993194c134f7b" translate="yes" xml:space="preserve">
          <source>IoSlice::is_sorted_by</source>
          <target state="translated">IoSlice::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="9472b8d8f8511079fc16e702ed084b2b7f7e6016" translate="yes" xml:space="preserve">
          <source>IoSlice::is_sorted_by_key</source>
          <target state="translated">IoSlice::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="2f0762847dd7e3fd1491b336362b18393b1a6965" translate="yes" xml:space="preserve">
          <source>IoSlice::iter</source>
          <target state="translated">IoSlice::iter</target>
        </trans-unit>
        <trans-unit id="f1c33c515a4f6f2a77787f9f8b1800fc0cb7392a" translate="yes" xml:space="preserve">
          <source>IoSlice::last</source>
          <target state="translated">IoSlice::last</target>
        </trans-unit>
        <trans-unit id="71b526ef1019bf4f73ee807254105381336e4d1c" translate="yes" xml:space="preserve">
          <source>IoSlice::len</source>
          <target state="translated">IoSlice::len</target>
        </trans-unit>
        <trans-unit id="967dd07a6e0c5576e4280dec2d30d45df16ac291" translate="yes" xml:space="preserve">
          <source>IoSlice::new</source>
          <target state="translated">IoSlice::new</target>
        </trans-unit>
        <trans-unit id="e9562dd3a5978f42d06066035675f397acce1c2b" translate="yes" xml:space="preserve">
          <source>IoSlice::rchunks</source>
          <target state="translated">IoSlice::rchunks</target>
        </trans-unit>
        <trans-unit id="af30963d5b4c2c7628a5afb93f5a9d3130eaa545" translate="yes" xml:space="preserve">
          <source>IoSlice::rchunks_exact</source>
          <target state="translated">IoSlice::rchunks_exact</target>
        </trans-unit>
        <trans-unit id="5006a78909ddbf7c8e9227d27186ddd35dae6459" translate="yes" xml:space="preserve">
          <source>IoSlice::repeat</source>
          <target state="translated">IoSlice::repeat</target>
        </trans-unit>
        <trans-unit id="055c2496baa6ae3bd9b33d660b588e6f2ebf5d4c" translate="yes" xml:space="preserve">
          <source>IoSlice::rsplit</source>
          <target state="translated">IoSlice::rsplit</target>
        </trans-unit>
        <trans-unit id="d3df5856ba5180f3260fca40514105630ea1ae9a" translate="yes" xml:space="preserve">
          <source>IoSlice::rsplitn</source>
          <target state="translated">IoSlice::rsplitn</target>
        </trans-unit>
        <trans-unit id="4e9115a3db6b0c099ecf94ffba746840b9b61e39" translate="yes" xml:space="preserve">
          <source>IoSlice::split</source>
          <target state="translated">IoSlice::split</target>
        </trans-unit>
        <trans-unit id="69853953f39b08c8104a39f89f6c888f20cccdf6" translate="yes" xml:space="preserve">
          <source>IoSlice::split_at</source>
          <target state="translated">IoSlice::split_at</target>
        </trans-unit>
        <trans-unit id="49a1324d962da721e4be986803d84827537c7170" translate="yes" xml:space="preserve">
          <source>IoSlice::split_first</source>
          <target state="translated">IoSlice::split_first</target>
        </trans-unit>
        <trans-unit id="05538b404adac2961d7e5bc92bef01b019825cd6" translate="yes" xml:space="preserve">
          <source>IoSlice::split_last</source>
          <target state="translated">IoSlice::split_last</target>
        </trans-unit>
        <trans-unit id="019564e811a7ef239d682e135b0fc68c251b133b" translate="yes" xml:space="preserve">
          <source>IoSlice::splitn</source>
          <target state="translated">IoSlice::splitn</target>
        </trans-unit>
        <trans-unit id="f61e9cda20345736621059e982beaf04c366b19b" translate="yes" xml:space="preserve">
          <source>IoSlice::starts_with</source>
          <target state="translated">IoSlice::starts_with</target>
        </trans-unit>
        <trans-unit id="843f9a3f4aeba9de52f81c21b641623650a4f908" translate="yes" xml:space="preserve">
          <source>IoSlice::to_ascii_lowercase</source>
          <target state="translated">IoSlice::to_ascii_lowercase</target>
        </trans-unit>
        <trans-unit id="1000adb40178bc3812fa5c878bdbe59eab225ef9" translate="yes" xml:space="preserve">
          <source>IoSlice::to_ascii_uppercase</source>
          <target state="translated">IoSlice::to_ascii_uppercase</target>
        </trans-unit>
        <trans-unit id="8a40698597eb46430e06c8ca37e19cc35bf7670e" translate="yes" xml:space="preserve">
          <source>IoSlice::to_vec</source>
          <target state="translated">IoSlice::to_vec</target>
        </trans-unit>
        <trans-unit id="790cec74306c7f07e3a27b8f7dfb0bbb3794bb65" translate="yes" xml:space="preserve">
          <source>IoSlice::try_from</source>
          <target state="translated">IoSlice::try_from</target>
        </trans-unit>
        <trans-unit id="43f5e13ccc6bae71b7f6204f1727c50f3248e591" translate="yes" xml:space="preserve">
          <source>IoSlice::try_into</source>
          <target state="translated">IoSlice::try_into</target>
        </trans-unit>
        <trans-unit id="ba54fa43762f26b417d2b3603b107780cf506264" translate="yes" xml:space="preserve">
          <source>IoSlice::type_id</source>
          <target state="translated">IoSlice::type_id</target>
        </trans-unit>
        <trans-unit id="4e3b2ad4c2f16ac0767ead9ab2125e9d33ceee8e" translate="yes" xml:space="preserve">
          <source>IoSlice::windows</source>
          <target state="translated">IoSlice::windows</target>
        </trans-unit>
        <trans-unit id="3095e84a9c9bc332f4091ce90417e2f7cc01182f" translate="yes" xml:space="preserve">
          <source>IoSliceMut</source>
          <target state="translated">IoSliceMut</target>
        </trans-unit>
        <trans-unit id="edc61764332d50536dc632bf3e42031b6220229f" translate="yes" xml:space="preserve">
          <source>IoSliceMut::align_to</source>
          <target state="translated">IoSliceMut::align_to</target>
        </trans-unit>
        <trans-unit id="6165ce93f6a343b1b6974bf63a9dc441cfa9b855" translate="yes" xml:space="preserve">
          <source>IoSliceMut::align_to_mut</source>
          <target state="translated">IoSliceMut::align_to_mut</target>
        </trans-unit>
        <trans-unit id="756ce08f67d32fb2870a7d27c2cf0b5d1fdceeda" translate="yes" xml:space="preserve">
          <source>IoSliceMut::as_mut_ptr</source>
          <target state="translated">IoSliceMut::as_mut_ptr</target>
        </trans-unit>
        <trans-unit id="53eec41d853d1cd27e3aa8594d9ca519a6e70256" translate="yes" xml:space="preserve">
          <source>IoSliceMut::as_ptr</source>
          <target state="translated">IoSliceMut::as_ptr</target>
        </trans-unit>
        <trans-unit id="feee017bcb491b872bb0c7e0e011449a0d2fba5b" translate="yes" xml:space="preserve">
          <source>IoSliceMut::binary_search</source>
          <target state="translated">IoSliceMut::binary_search</target>
        </trans-unit>
        <trans-unit id="91d068e145a8703aa2b53040a33e0633d07ae322" translate="yes" xml:space="preserve">
          <source>IoSliceMut::binary_search_by</source>
          <target state="translated">IoSliceMut::binary_search_by</target>
        </trans-unit>
        <trans-unit id="cf8c8086f089d2efa99d956c60331c0cffaba94a" translate="yes" xml:space="preserve">
          <source>IoSliceMut::binary_search_by_key</source>
          <target state="translated">IoSliceMut::binary_search_by_key</target>
        </trans-unit>
        <trans-unit id="814009b2627b9eb1414d1db129d496de87b90dee" translate="yes" xml:space="preserve">
          <source>IoSliceMut::borrow</source>
          <target state="translated">IoSliceMut::borrow</target>
        </trans-unit>
        <trans-unit id="caeb2fb6619a9691d7ba27f727be8e220bf3a927" translate="yes" xml:space="preserve">
          <source>IoSliceMut::borrow_mut</source>
          <target state="translated">IoSliceMut::borrow_mut</target>
        </trans-unit>
        <trans-unit id="b1cb059b24c754db0743f290cc8e416acdc4078d" translate="yes" xml:space="preserve">
          <source>IoSliceMut::chunks</source>
          <target state="translated">IoSliceMut::chunks</target>
        </trans-unit>
        <trans-unit id="4ea089981896b2968abb410d369893430efed500" translate="yes" xml:space="preserve">
          <source>IoSliceMut::chunks_exact</source>
          <target state="translated">IoSliceMut::chunks_exact</target>
        </trans-unit>
        <trans-unit id="f1be8473de9a8d39d4f075d887ea01ff1f9161e0" translate="yes" xml:space="preserve">
          <source>IoSliceMut::chunks_exact_mut</source>
          <target state="translated">IoSliceMut::chunks_exact_mut</target>
        </trans-unit>
        <trans-unit id="767b916694743c2e64a1c234e5dd646ac41ca1fc" translate="yes" xml:space="preserve">
          <source>IoSliceMut::chunks_mut</source>
          <target state="translated">IoSliceMut::chunks_mut</target>
        </trans-unit>
        <trans-unit id="f404069508d8888d6af514f87922bc8d40f10f6c" translate="yes" xml:space="preserve">
          <source>IoSliceMut::clone_from_slice</source>
          <target state="translated">IoSliceMut::clone_from_slice</target>
        </trans-unit>
        <trans-unit id="c7c55fc22e698b053cd4550732c2746b176f44ba" translate="yes" xml:space="preserve">
          <source>IoSliceMut::contains</source>
          <target state="translated">IoSliceMut::contains</target>
        </trans-unit>
        <trans-unit id="dbb130c545841944c9cc0b6c9e692b48dc327a1e" translate="yes" xml:space="preserve">
          <source>IoSliceMut::copy_from_slice</source>
          <target state="translated">IoSliceMut::copy_from_slice</target>
        </trans-unit>
        <trans-unit id="71a3fdfdbafc2bc43ba47f9382fcc293b92c46e3" translate="yes" xml:space="preserve">
          <source>IoSliceMut::copy_within</source>
          <target state="translated">IoSliceMut::copy_within</target>
        </trans-unit>
        <trans-unit id="890c0786efc8a468ffebc08fb5498cda52cf33fb" translate="yes" xml:space="preserve">
          <source>IoSliceMut::deref</source>
          <target state="translated">IoSliceMut::deref</target>
        </trans-unit>
        <trans-unit id="4a7f6590300a48130f1f500865046f4da8307d95" translate="yes" xml:space="preserve">
          <source>IoSliceMut::deref_mut</source>
          <target state="translated">IoSliceMut::deref_mut</target>
        </trans-unit>
        <trans-unit id="4c937a77491635e4e51ece3d6794e05ccebd811b" translate="yes" xml:space="preserve">
          <source>IoSliceMut::ends_with</source>
          <target state="translated">IoSliceMut::ends_with</target>
        </trans-unit>
        <trans-unit id="80baa7923010134c30d45ede26ebcb72f4ec4c94" translate="yes" xml:space="preserve">
          <source>IoSliceMut::eq_ignore_ascii_case</source>
          <target state="translated">IoSliceMut::eq_ignore_ascii_case</target>
        </trans-unit>
        <trans-unit id="00978c0ce0b22335f6482ceca143e772ce778265" translate="yes" xml:space="preserve">
          <source>IoSliceMut::first</source>
          <target state="translated">IoSliceMut::first</target>
        </trans-unit>
        <trans-unit id="efca655b88011a830e591bfe2b1493cadaf05e46" translate="yes" xml:space="preserve">
          <source>IoSliceMut::first_mut</source>
          <target state="translated">IoSliceMut::first_mut</target>
        </trans-unit>
        <trans-unit id="087659858c5fbd32d8ce660c5d447d432b4a58f9" translate="yes" xml:space="preserve">
          <source>IoSliceMut::fmt</source>
          <target state="translated">IoSliceMut::fmt</target>
        </trans-unit>
        <trans-unit id="cb369e3527c8a515f146f114fa20da06fa0105bd" translate="yes" xml:space="preserve">
          <source>IoSliceMut::from</source>
          <target state="translated">IoSliceMut::from</target>
        </trans-unit>
        <trans-unit id="1a4874b1746a7812e40b2ffd5ecaf8ee17040c73" translate="yes" xml:space="preserve">
          <source>IoSliceMut::get</source>
          <target state="translated">IoSliceMut::get</target>
        </trans-unit>
        <trans-unit id="87cf1ba0087efc43ee27e77bd516e6bc62235196" translate="yes" xml:space="preserve">
          <source>IoSliceMut::get_mut</source>
          <target state="translated">IoSliceMut::get_mut</target>
        </trans-unit>
        <trans-unit id="9224459dc771cd1e571acc3f60ac5030d6506ad4" translate="yes" xml:space="preserve">
          <source>IoSliceMut::get_unchecked</source>
          <target state="translated">IoSliceMut::get_unchecked</target>
        </trans-unit>
        <trans-unit id="6c84cb3392dfcb3ebc95e49bec2c9a2caf890b70" translate="yes" xml:space="preserve">
          <source>IoSliceMut::get_unchecked_mut</source>
          <target state="translated">IoSliceMut::get_unchecked_mut</target>
        </trans-unit>
        <trans-unit id="87175e203ab3ff1feb03a30f6abb72b0c78f325f" translate="yes" xml:space="preserve">
          <source>IoSliceMut::into</source>
          <target state="translated">IoSliceMut::into</target>
        </trans-unit>
        <trans-unit id="4501fdbbbb28747f7aaad7c1a5b8a44782077179" translate="yes" xml:space="preserve">
          <source>IoSliceMut::is_ascii</source>
          <target state="translated">IoSliceMut::is_ascii</target>
        </trans-unit>
        <trans-unit id="9838cb25545f83e047044f3c84c1e510152c5e9a" translate="yes" xml:space="preserve">
          <source>IoSliceMut::is_empty</source>
          <target state="translated">IoSliceMut::is_empty</target>
        </trans-unit>
        <trans-unit id="f055a512eb3e13e97c7f4986f75a28be49709162" translate="yes" xml:space="preserve">
          <source>IoSliceMut::is_sorted</source>
          <target state="translated">IoSliceMut::is_sorted</target>
        </trans-unit>
        <trans-unit id="3e5f350240631bbb82c3ccc7b63b75f7ef3cff06" translate="yes" xml:space="preserve">
          <source>IoSliceMut::is_sorted_by</source>
          <target state="translated">IoSliceMut::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="f2e9454f22d864a0c455e41dc7fb5b7ca6dd2c05" translate="yes" xml:space="preserve">
          <source>IoSliceMut::is_sorted_by_key</source>
          <target state="translated">IoSliceMut::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="fb1e214569f94fc95d9751c93230dfe38c28f64d" translate="yes" xml:space="preserve">
          <source>IoSliceMut::iter</source>
          <target state="translated">IoSliceMut::iter</target>
        </trans-unit>
        <trans-unit id="d77e5889908e5866350ffeb826e0ee4b302306d1" translate="yes" xml:space="preserve">
          <source>IoSliceMut::iter_mut</source>
          <target state="translated">IoSliceMut::iter_mut</target>
        </trans-unit>
        <trans-unit id="8934e61161bd86f368fc145fd636e2c155d1529f" translate="yes" xml:space="preserve">
          <source>IoSliceMut::last</source>
          <target state="translated">IoSliceMut::last</target>
        </trans-unit>
        <trans-unit id="e110df4ba897b60ee2d225cbfc465e2c2376e128" translate="yes" xml:space="preserve">
          <source>IoSliceMut::last_mut</source>
          <target state="translated">IoSliceMut::last_mut</target>
        </trans-unit>
        <trans-unit id="2ae8d8c5611aee438f8d894e9883dff2fd658f4e" translate="yes" xml:space="preserve">
          <source>IoSliceMut::len</source>
          <target state="translated">IoSliceMut::len</target>
        </trans-unit>
        <trans-unit id="47113547b6123b6a9b0c2bd9c5c02e4ace6bda06" translate="yes" xml:space="preserve">
          <source>IoSliceMut::make_ascii_lowercase</source>
          <target state="translated">IoSliceMut::make_ascii_lowercase</target>
        </trans-unit>
        <trans-unit id="1368789df63815a8365adaaa916b097c47ee6bf0" translate="yes" xml:space="preserve">
          <source>IoSliceMut::make_ascii_uppercase</source>
          <target state="translated">IoSliceMut::make_ascii_uppercase</target>
        </trans-unit>
        <trans-unit id="2bfeef33af972135cd4201fd40a799693a598545" translate="yes" xml:space="preserve">
          <source>IoSliceMut::new</source>
          <target state="translated">IoSliceMut::new</target>
        </trans-unit>
        <trans-unit id="d0fc0d6411d4a1c6e3b5edaf08263c19c66688b7" translate="yes" xml:space="preserve">
          <source>IoSliceMut::partition_at_index</source>
          <target state="translated">IoSliceMut::partition_at_index</target>
        </trans-unit>
        <trans-unit id="7e77416a3b99e33c3ca80e12413b2d6db2066eb0" translate="yes" xml:space="preserve">
          <source>IoSliceMut::partition_at_index_by</source>
          <target state="translated">IoSliceMut::partition_at_index_by</target>
        </trans-unit>
        <trans-unit id="9259876e720033ee87d32732200d6400132c625e" translate="yes" xml:space="preserve">
          <source>IoSliceMut::partition_at_index_by_key</source>
          <target state="translated">IoSliceMut::partition_at_index_by_key</target>
        </trans-unit>
        <trans-unit id="d3b05480abbc9116759faebf47e681f0d773c97b" translate="yes" xml:space="preserve">
          <source>IoSliceMut::partition_dedup</source>
          <target state="translated">IoSliceMut::partition_dedup</target>
        </trans-unit>
        <trans-unit id="aa55cd0eb794711175af2dd5d3f07714f2510500" translate="yes" xml:space="preserve">
          <source>IoSliceMut::partition_dedup_by</source>
          <target state="translated">IoSliceMut::partition_dedup_by</target>
        </trans-unit>
        <trans-unit id="c9023248e90bdb829d7846b404b7dd00c8e2f1d8" translate="yes" xml:space="preserve">
          <source>IoSliceMut::partition_dedup_by_key</source>
          <target state="translated">IoSliceMut::partition_dedup_by_key</target>
        </trans-unit>
        <trans-unit id="112858cc757d2ee696d5fd19edd29a07e86a60dd" translate="yes" xml:space="preserve">
          <source>IoSliceMut::rchunks</source>
          <target state="translated">IoSliceMut::rchunks</target>
        </trans-unit>
        <trans-unit id="27c3a585495b862cd5953b14b62627eb2b786e7e" translate="yes" xml:space="preserve">
          <source>IoSliceMut::rchunks_exact</source>
          <target state="translated">IoSliceMut::rchunks_exact</target>
        </trans-unit>
        <trans-unit id="0bbc4b799ee0750c9670f7268648fc24ec698bf5" translate="yes" xml:space="preserve">
          <source>IoSliceMut::rchunks_exact_mut</source>
          <target state="translated">IoSliceMut::rchunks_exact_mut</target>
        </trans-unit>
        <trans-unit id="e0079c5e5007cbcfdd4a4ec3cdc15f0f595b4eb9" translate="yes" xml:space="preserve">
          <source>IoSliceMut::rchunks_mut</source>
          <target state="translated">IoSliceMut::rchunks_mut</target>
        </trans-unit>
        <trans-unit id="5a1db3383ef35f1e9a609af596c49764b468ecc0" translate="yes" xml:space="preserve">
          <source>IoSliceMut::repeat</source>
          <target state="translated">IoSliceMut::repeat</target>
        </trans-unit>
        <trans-unit id="4b00bcb936857777cddfc030b90dd94af33aab6f" translate="yes" xml:space="preserve">
          <source>IoSliceMut::reverse</source>
          <target state="translated">IoSliceMut::reverse</target>
        </trans-unit>
        <trans-unit id="b8383f8b3071a37ca80d4fd630b68ae5d6407f25" translate="yes" xml:space="preserve">
          <source>IoSliceMut::rotate_left</source>
          <target state="translated">IoSliceMut::rotate_left</target>
        </trans-unit>
        <trans-unit id="b81b7fa90aa18a998eac27394adb8adaba8589f1" translate="yes" xml:space="preserve">
          <source>IoSliceMut::rotate_right</source>
          <target state="translated">IoSliceMut::rotate_right</target>
        </trans-unit>
        <trans-unit id="8b5984b3aa27e1db968a75d1458662d4356f394f" translate="yes" xml:space="preserve">
          <source>IoSliceMut::rsplit</source>
          <target state="translated">IoSliceMut::rsplit</target>
        </trans-unit>
        <trans-unit id="7b014f737bfafc775e4b112ac7ec11323e2824e1" translate="yes" xml:space="preserve">
          <source>IoSliceMut::rsplit_mut</source>
          <target state="translated">IoSliceMut::rsplit_mut</target>
        </trans-unit>
        <trans-unit id="79948d326e7daffd00109bebcfe6ec92b09222ad" translate="yes" xml:space="preserve">
          <source>IoSliceMut::rsplitn</source>
          <target state="translated">IoSliceMut::rsplitn</target>
        </trans-unit>
        <trans-unit id="8a0545746595f7e4171cebd930e38c4c6d0fd3e8" translate="yes" xml:space="preserve">
          <source>IoSliceMut::rsplitn_mut</source>
          <target state="translated">IoSliceMut::rsplitn_mut</target>
        </trans-unit>
        <trans-unit id="ddb129b041939c14d352bbf67329eeecf7260e65" translate="yes" xml:space="preserve">
          <source>IoSliceMut::sort</source>
          <target state="translated">IoSliceMut::sort</target>
        </trans-unit>
        <trans-unit id="35ba78eb5cd736c963cfc215217c45c8dda10d3b" translate="yes" xml:space="preserve">
          <source>IoSliceMut::sort_by</source>
          <target state="translated">IoSliceMut::sort_by</target>
        </trans-unit>
        <trans-unit id="aee0fff21b9514e212d22c64b39409165b2cab64" translate="yes" xml:space="preserve">
          <source>IoSliceMut::sort_by_cached_key</source>
          <target state="translated">IoSliceMut::sort_by_cached_key</target>
        </trans-unit>
        <trans-unit id="994f7e09e5d80ef5dd812336bcb0a176a31ef6c1" translate="yes" xml:space="preserve">
          <source>IoSliceMut::sort_by_key</source>
          <target state="translated">IoSliceMut::sort_by_key</target>
        </trans-unit>
        <trans-unit id="69a01417bee9fe016be3925f4d1c6f53bb4316b9" translate="yes" xml:space="preserve">
          <source>IoSliceMut::sort_unstable</source>
          <target state="translated">IoSliceMut::sort_unstable</target>
        </trans-unit>
        <trans-unit id="26d86d6c065cff24f16e866215162e8197db89a2" translate="yes" xml:space="preserve">
          <source>IoSliceMut::sort_unstable_by</source>
          <target state="translated">IoSliceMut::sort_unstable_by</target>
        </trans-unit>
        <trans-unit id="1591d811a42faf0c27290c61c13962a9d52e6883" translate="yes" xml:space="preserve">
          <source>IoSliceMut::sort_unstable_by_key</source>
          <target state="translated">IoSliceMut::sort_unstable_by_key</target>
        </trans-unit>
        <trans-unit id="ca126408cfc67455e487ee1930ca11c397f8f21f" translate="yes" xml:space="preserve">
          <source>IoSliceMut::split</source>
          <target state="translated">IoSliceMut::split</target>
        </trans-unit>
        <trans-unit id="9ce7dd2f993172516d076ad5208aaaaaed4be576" translate="yes" xml:space="preserve">
          <source>IoSliceMut::split_at</source>
          <target state="translated">IoSliceMut::split_at</target>
        </trans-unit>
        <trans-unit id="a9f4775f9c968b1b54abb603239e2832c3960bcd" translate="yes" xml:space="preserve">
          <source>IoSliceMut::split_at_mut</source>
          <target state="translated">IoSliceMut::split_at_mut</target>
        </trans-unit>
        <trans-unit id="04f41bcdd653cbc93653f91796e5a60801b9293d" translate="yes" xml:space="preserve">
          <source>IoSliceMut::split_first</source>
          <target state="translated">IoSliceMut::split_first</target>
        </trans-unit>
        <trans-unit id="d88487ea6f16bda2b38a613374cc839f837e50ee" translate="yes" xml:space="preserve">
          <source>IoSliceMut::split_first_mut</source>
          <target state="translated">IoSliceMut::split_first_mut</target>
        </trans-unit>
        <trans-unit id="e077fdea55bf605bea57cd6afeaf715ca83c0ad3" translate="yes" xml:space="preserve">
          <source>IoSliceMut::split_last</source>
          <target state="translated">IoSliceMut::split_last</target>
        </trans-unit>
        <trans-unit id="c8e20234f7bea859d7664b1b7bb3eed2bc4a51d5" translate="yes" xml:space="preserve">
          <source>IoSliceMut::split_last_mut</source>
          <target state="translated">IoSliceMut::split_last_mut</target>
        </trans-unit>
        <trans-unit id="f6235363d8f27f1e8c28bf4df2329fcbc4ace1a1" translate="yes" xml:space="preserve">
          <source>IoSliceMut::split_mut</source>
          <target state="translated">IoSliceMut::split_mut</target>
        </trans-unit>
        <trans-unit id="9dbada99c8a947eba3daeff4a3521f91bb81bd90" translate="yes" xml:space="preserve">
          <source>IoSliceMut::splitn</source>
          <target state="translated">IoSliceMut::splitn</target>
        </trans-unit>
        <trans-unit id="3cf2674726ff6b7045de0b3e635d0a1f7df50615" translate="yes" xml:space="preserve">
          <source>IoSliceMut::splitn_mut</source>
          <target state="translated">IoSliceMut::splitn_mut</target>
        </trans-unit>
        <trans-unit id="aa18548ad4490c3366a3bab22827f88c2eb93f27" translate="yes" xml:space="preserve">
          <source>IoSliceMut::starts_with</source>
          <target state="translated">IoSliceMut::starts_with</target>
        </trans-unit>
        <trans-unit id="53e5e19d65bb8030c09ed2572e8e551a619bb85a" translate="yes" xml:space="preserve">
          <source>IoSliceMut::swap</source>
          <target state="translated">IoSliceMut::swap</target>
        </trans-unit>
        <trans-unit id="a645fa50fbb5c37388df17709c852c50b89ea8d6" translate="yes" xml:space="preserve">
          <source>IoSliceMut::swap_with_slice</source>
          <target state="translated">IoSliceMut::swap_with_slice</target>
        </trans-unit>
        <trans-unit id="ae3bf6a739be497a693a36ed80d558bbb3918541" translate="yes" xml:space="preserve">
          <source>IoSliceMut::to_ascii_lowercase</source>
          <target state="translated">IoSliceMut::to_ascii_lowercase</target>
        </trans-unit>
        <trans-unit id="e376283217440eef63b94cd987da83cb40aede71" translate="yes" xml:space="preserve">
          <source>IoSliceMut::to_ascii_uppercase</source>
          <target state="translated">IoSliceMut::to_ascii_uppercase</target>
        </trans-unit>
        <trans-unit id="391fa7871165db3ac0f05870f2a5050056f7916a" translate="yes" xml:space="preserve">
          <source>IoSliceMut::to_vec</source>
          <target state="translated">IoSliceMut::to_vec</target>
        </trans-unit>
        <trans-unit id="8376010efc59358ba141cb428936bf23451c7d6e" translate="yes" xml:space="preserve">
          <source>IoSliceMut::try_from</source>
          <target state="translated">IoSliceMut::try_from</target>
        </trans-unit>
        <trans-unit id="ce50ba5cdfbc273da4c72a3e73ca855ed6cf6df0" translate="yes" xml:space="preserve">
          <source>IoSliceMut::try_into</source>
          <target state="translated">IoSliceMut::try_into</target>
        </trans-unit>
        <trans-unit id="b83dd87d2ec2e898db655ae58a7cd873ea0d8d2e" translate="yes" xml:space="preserve">
          <source>IoSliceMut::type_id</source>
          <target state="translated">IoSliceMut::type_id</target>
        </trans-unit>
        <trans-unit id="0677fc2bcad3ffd6e1f3e2e468b03f8e0639f7c7" translate="yes" xml:space="preserve">
          <source>IoSliceMut::windows</source>
          <target state="translated">IoSliceMut::windows</target>
        </trans-unit>
        <trans-unit id="80c7dd22517caabb4b80ff90fceda4a6879202d3" translate="yes" xml:space="preserve">
          <source>IpAddr</source>
          <target state="translated">IpAddr</target>
        </trans-unit>
        <trans-unit id="18dcf7a25bc74232fd1ef06e66f66a9b58a15594" translate="yes" xml:space="preserve">
          <source>IpAddr::borrow</source>
          <target state="translated">IpAddr::borrow</target>
        </trans-unit>
        <trans-unit id="8ccc863c2cc929b895a9a7a5f36b4ffd6dacfefb" translate="yes" xml:space="preserve">
          <source>IpAddr::borrow_mut</source>
          <target state="translated">IpAddr::borrow_mut</target>
        </trans-unit>
        <trans-unit id="1d22b0fa46381b2fee190440340df7db25bbaab4" translate="yes" xml:space="preserve">
          <source>IpAddr::clamp</source>
          <target state="translated">IpAddr::clamp</target>
        </trans-unit>
        <trans-unit id="c5b49df3db406820aae7446426b53c486eb09ed2" translate="yes" xml:space="preserve">
          <source>IpAddr::clone</source>
          <target state="translated">IpAddr::clone</target>
        </trans-unit>
        <trans-unit id="df8040dfc89ba7aed1f5bb9fb38c981ae8013245" translate="yes" xml:space="preserve">
          <source>IpAddr::clone_from</source>
          <target state="translated">IpAddr::clone_from</target>
        </trans-unit>
        <trans-unit id="2e231a5b1670e66fd9b295e66c9b487760ec0cd5" translate="yes" xml:space="preserve">
          <source>IpAddr::clone_into</source>
          <target state="translated">IpAddr::clone_into</target>
        </trans-unit>
        <trans-unit id="ccf0a20beed4bfb31ab7de41f2fe72887b3afef1" translate="yes" xml:space="preserve">
          <source>IpAddr::cmp</source>
          <target state="translated">IpAddr::cmp</target>
        </trans-unit>
        <trans-unit id="1e451c2048ce103ce5a1fdc80f143226ee3ac738" translate="yes" xml:space="preserve">
          <source>IpAddr::eq</source>
          <target state="translated">IpAddr::eq</target>
        </trans-unit>
        <trans-unit id="de15dc7014bcddec35489eab12ccb7de4e61f814" translate="yes" xml:space="preserve">
          <source>IpAddr::fmt</source>
          <target state="translated">IpAddr::fmt</target>
        </trans-unit>
        <trans-unit id="cd82d20eb5adef0621b03b67c04075c8e8d22c13" translate="yes" xml:space="preserve">
          <source>IpAddr::from</source>
          <target state="translated">IpAddr::from</target>
        </trans-unit>
        <trans-unit id="1b18f811dcd6bd2be2da6af78c6da2512cea431f" translate="yes" xml:space="preserve">
          <source>IpAddr::from_str</source>
          <target state="translated">IpAddr::from_str</target>
        </trans-unit>
        <trans-unit id="fe7270d2fc646cf2e120c74e60b44f6fe3226fb1" translate="yes" xml:space="preserve">
          <source>IpAddr::ge</source>
          <target state="translated">IpAddr::ge</target>
        </trans-unit>
        <trans-unit id="596bc315329df27bdada6bfc4c172ea14c6cc583" translate="yes" xml:space="preserve">
          <source>IpAddr::gt</source>
          <target state="translated">IpAddr::gt</target>
        </trans-unit>
        <trans-unit id="7b43ebda452f32a749f28cf341479b33fad4fd8f" translate="yes" xml:space="preserve">
          <source>IpAddr::hash</source>
          <target state="translated">IpAddr::hash</target>
        </trans-unit>
        <trans-unit id="a6c626e9d203c303fe8bdf8bd02befa7941a60f6" translate="yes" xml:space="preserve">
          <source>IpAddr::hash_slice</source>
          <target state="translated">IpAddr::hash_slice</target>
        </trans-unit>
        <trans-unit id="bc0a2a089760008263e0c7d196dcda76407f2e2f" translate="yes" xml:space="preserve">
          <source>IpAddr::into</source>
          <target state="translated">IpAddr::into</target>
        </trans-unit>
        <trans-unit id="6aea05c2bb7a6ec19799f8ccd09371123895bffd" translate="yes" xml:space="preserve">
          <source>IpAddr::is_documentation</source>
          <target state="translated">IpAddr::is_documentation</target>
        </trans-unit>
        <trans-unit id="35e750aa8facebec148e21174f1b11f8f102ac1e" translate="yes" xml:space="preserve">
          <source>IpAddr::is_global</source>
          <target state="translated">IpAddr::is_global</target>
        </trans-unit>
        <trans-unit id="6d3064eb468b3aa541c1ebcbb93937383d1b5ce2" translate="yes" xml:space="preserve">
          <source>IpAddr::is_ipv4</source>
          <target state="translated">IpAddr::is_ipv4</target>
        </trans-unit>
        <trans-unit id="7cdffbf0a370fd55a0c2a72fa5c73de1a7e9c8ae" translate="yes" xml:space="preserve">
          <source>IpAddr::is_ipv6</source>
          <target state="translated">IpAddr::is_ipv6</target>
        </trans-unit>
        <trans-unit id="f1b5ba9a40c1d77558e70ec390b97ec0113d8759" translate="yes" xml:space="preserve">
          <source>IpAddr::is_loopback</source>
          <target state="translated">IpAddr::is_loopback</target>
        </trans-unit>
        <trans-unit id="e91ac24fb68aad99d2dea251365431ba20a3867b" translate="yes" xml:space="preserve">
          <source>IpAddr::is_multicast</source>
          <target state="translated">IpAddr::is_multicast</target>
        </trans-unit>
        <trans-unit id="a457140fd4bc4739b6888b5fa4fd5a528a1e87d7" translate="yes" xml:space="preserve">
          <source>IpAddr::is_unspecified</source>
          <target state="translated">IpAddr::is_unspecified</target>
        </trans-unit>
        <trans-unit id="075a86319470dde568dd6a068923e786ff41b626" translate="yes" xml:space="preserve">
          <source>IpAddr::le</source>
          <target state="translated">IpAddr::le</target>
        </trans-unit>
        <trans-unit id="2ee565a162a01a379da7271dca98ac34c1b3d062" translate="yes" xml:space="preserve">
          <source>IpAddr::lt</source>
          <target state="translated">IpAddr::lt</target>
        </trans-unit>
        <trans-unit id="21475b86807c525401acbad46b0d285b86f77c6c" translate="yes" xml:space="preserve">
          <source>IpAddr::max</source>
          <target state="translated">IpAddr::max</target>
        </trans-unit>
        <trans-unit id="6c19c9fa1118c738451a2a0ccab1e063e8453279" translate="yes" xml:space="preserve">
          <source>IpAddr::min</source>
          <target state="translated">IpAddr::min</target>
        </trans-unit>
        <trans-unit id="80516dd8787ef4ff1f53fd45e6539ecc0557944c" translate="yes" xml:space="preserve">
          <source>IpAddr::ne</source>
          <target state="translated">IpAddr::ne</target>
        </trans-unit>
        <trans-unit id="5ac433ae6b88b3faf0bab89b49547e507f3c5dbe" translate="yes" xml:space="preserve">
          <source>IpAddr::partial_cmp</source>
          <target state="translated">IpAddr::partial_cmp</target>
        </trans-unit>
        <trans-unit id="a66331ad09004ffc11c6bc336cec3dd2c1058851" translate="yes" xml:space="preserve">
          <source>IpAddr::to_owned</source>
          <target state="translated">IpAddr::to_owned</target>
        </trans-unit>
        <trans-unit id="c266c72106f541c9d079787ece667b3b71aa633c" translate="yes" xml:space="preserve">
          <source>IpAddr::to_string</source>
          <target state="translated">IpAddr::to_string</target>
        </trans-unit>
        <trans-unit id="310b4b19006f132dcc381f1e6408fe062644a5dc" translate="yes" xml:space="preserve">
          <source>IpAddr::try_from</source>
          <target state="translated">IpAddr::try_from</target>
        </trans-unit>
        <trans-unit id="6de54fb276669395f791daae14b60bdb8bb9ecab" translate="yes" xml:space="preserve">
          <source>IpAddr::try_into</source>
          <target state="translated">IpAddr::try_into</target>
        </trans-unit>
        <trans-unit id="76655a5dcdc7c4b7a1f489495625902f75957be4" translate="yes" xml:space="preserve">
          <source>IpAddr::type_id</source>
          <target state="translated">IpAddr::type_id</target>
        </trans-unit>
        <trans-unit id="9576adee9505e0e642c8cf6d8f843a2b00527190" translate="yes" xml:space="preserve">
          <source>Ipv4Addr</source>
          <target state="translated">Ipv4Addr</target>
        </trans-unit>
        <trans-unit id="c0670c429f8a4f4f07ef0b7f2b4e03d5be7cdc5b" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::borrow</source>
          <target state="translated">Ipv4Addr::borrow</target>
        </trans-unit>
        <trans-unit id="66fc34d63836dd285320b9e7805a0993e253d053" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::borrow_mut</source>
          <target state="translated">Ipv4Addr::borrow_mut</target>
        </trans-unit>
        <trans-unit id="87a2ad02487f9ecff09754664875f3fbf92e1aab" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::clamp</source>
          <target state="translated">Ipv4Addr::clamp</target>
        </trans-unit>
        <trans-unit id="86447e7e8694086d5dc29cbcf6bbc43172b77513" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::clone</source>
          <target state="translated">Ipv4Addr::clone</target>
        </trans-unit>
        <trans-unit id="f49b0fda7799a12b9106e653f8817c29e74a2242" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::clone_from</source>
          <target state="translated">Ipv4Addr::clone_from</target>
        </trans-unit>
        <trans-unit id="70d0f414add20ac85a1ac45856f7ef5006e570d8" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::clone_into</source>
          <target state="translated">Ipv4Addr::clone_into</target>
        </trans-unit>
        <trans-unit id="dc9773a4bf1673daf97b49a6b852c1d09da0533a" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::cmp</source>
          <target state="translated">Ipv4Addr::cmp</target>
        </trans-unit>
        <trans-unit id="9e8900c91f9869e1bd25bdeb1f480c627ddad7c1" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::eq</source>
          <target state="translated">Ipv4Addr::eq</target>
        </trans-unit>
        <trans-unit id="4cd7a35503bdc79c8a6d2eb2e96d19bb1d13b386" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::fmt</source>
          <target state="translated">Ipv4Addr::fmt</target>
        </trans-unit>
        <trans-unit id="96f1af7ae9368105392d9cc46e3fcdf5512b5c86" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::from</source>
          <target state="translated">Ipv4Addr::from</target>
        </trans-unit>
        <trans-unit id="c9814a89a183d677ccaba791ca610f1dbd9966e0" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::from_str</source>
          <target state="translated">Ipv4Addr::from_str</target>
        </trans-unit>
        <trans-unit id="a99258bd17a7b9473a9733d0d8cefdf5f6718002" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::ge</source>
          <target state="translated">Ipv4Addr::ge</target>
        </trans-unit>
        <trans-unit id="17edfcb10f49b77c9d0c9872e17c35b5128a4660" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::gt</source>
          <target state="translated">Ipv4Addr::gt</target>
        </trans-unit>
        <trans-unit id="8d9673e9e9140d616d250a1c2fd05b32e727f0bd" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::hash</source>
          <target state="translated">Ipv4Addr::hash</target>
        </trans-unit>
        <trans-unit id="33d72bb730a0f4415706682897a4dbeca937097e" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::hash_slice</source>
          <target state="translated">Ipv4Addr::hash_slice</target>
        </trans-unit>
        <trans-unit id="a0a5624897c7561cf8904fb1069326cac7d4849a" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::into</source>
          <target state="translated">Ipv4Addr::into</target>
        </trans-unit>
        <trans-unit id="a28162edd246e58c591efd6d2f7e0f95677a17b4" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::is_benchmarking</source>
          <target state="translated">Ipv4Addr::is_benchmarking</target>
        </trans-unit>
        <trans-unit id="e6c68f36a0501dd1c101e1de3fe289267ab116d7" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::is_broadcast</source>
          <target state="translated">Ipv4Addr::is_broadcast</target>
        </trans-unit>
        <trans-unit id="d1c44235068a67cbe1de6fa7f1ecd5c62159b7eb" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::is_documentation</source>
          <target state="translated">Ipv4Addr::is_documentation</target>
        </trans-unit>
        <trans-unit id="490980e7baecbdb16df4c536ff701a4b9c6f3a87" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::is_global</source>
          <target state="translated">Ipv4Addr::is_global</target>
        </trans-unit>
        <trans-unit id="7dc9db6b00fed2f3a364f1abbeb6b19c6a865b8c" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::is_ietf_protocol_assignment</source>
          <target state="translated">Ipv4Addr::is_ietf_protocol_assignment</target>
        </trans-unit>
        <trans-unit id="bcc94df664112964d43eabb2d514303df1ec2159" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::is_link_local</source>
          <target state="translated">Ipv4Addr::is_link_local</target>
        </trans-unit>
        <trans-unit id="cfe2080acebd57083f5209b2051ccd19002609f2" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::is_loopback</source>
          <target state="translated">Ipv4Addr::is_loopback</target>
        </trans-unit>
        <trans-unit id="28b9c1629dd15420ecafb39f3dfbae73a4ea518c" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::is_multicast</source>
          <target state="translated">Ipv4Addr::is_multicast</target>
        </trans-unit>
        <trans-unit id="3763f7c2e4d81cf18a61fa9d1039122b09d3f6af" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::is_private</source>
          <target state="translated">Ipv4Addr::is_private</target>
        </trans-unit>
        <trans-unit id="ded22ef0151f56687869efa355fc02ddba31b8da" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::is_reserved</source>
          <target state="translated">Ipv4Addr::is_reserved</target>
        </trans-unit>
        <trans-unit id="af8e482daade31f5216d01b0acb05b1f1a06363a" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::is_shared</source>
          <target state="translated">Ipv4Addr::is_shared</target>
        </trans-unit>
        <trans-unit id="94fd19fb5c77bb66f1dd4e3ea2bd66c0cd328221" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::is_unspecified</source>
          <target state="translated">Ipv4Addr::is_unspecified</target>
        </trans-unit>
        <trans-unit id="6f06522a0d23f3ce3fb7a7bbcf5b64422c03cab1" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::le</source>
          <target state="translated">Ipv4Addr::le</target>
        </trans-unit>
        <trans-unit id="7ddb9be2edc96e85ada95865505918fe2c31c08c" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::lt</source>
          <target state="translated">Ipv4Addr::lt</target>
        </trans-unit>
        <trans-unit id="588e3a62e403b2acaff68c35f34372111ff7475b" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::max</source>
          <target state="translated">Ipv4Addr::max</target>
        </trans-unit>
        <trans-unit id="f0f6703268f715e35b633ffa8e701e62eda903f0" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::min</source>
          <target state="translated">Ipv4Addr::min</target>
        </trans-unit>
        <trans-unit id="8752da42e18e3890559177c1610168a779a113cf" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::ne</source>
          <target state="translated">Ipv4Addr::ne</target>
        </trans-unit>
        <trans-unit id="dda7ca845b881cbb8bdf3787be6ee9ac1fc45b41" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::new</source>
          <target state="translated">Ipv4Addr::new</target>
        </trans-unit>
        <trans-unit id="507f23cd2f1d898fa8d18a4f56faa306c969539d" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::octets</source>
          <target state="translated">Ipv4Addr::octets</target>
        </trans-unit>
        <trans-unit id="ae2ee18a4ab1872b9c91e8a1e83866fd664e6feb" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::partial_cmp</source>
          <target state="translated">Ipv4Addr::partial_cmp</target>
        </trans-unit>
        <trans-unit id="05bbaef82cf48bd89cdb234db3e68e898269d87a" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::to_ipv6_compatible</source>
          <target state="translated">Ipv4Addr::to_ipv6_compatible</target>
        </trans-unit>
        <trans-unit id="2136b09c14369a3b7d334fb003b5f0a2b70ab6f8" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::to_ipv6_mapped</source>
          <target state="translated">Ipv4Addr::to_ipv6_mapped</target>
        </trans-unit>
        <trans-unit id="fdcf5dff54d1f120adbacb5e658048c222d56c54" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::to_owned</source>
          <target state="translated">Ipv4Addr::to_owned</target>
        </trans-unit>
        <trans-unit id="269c08b4181e19fd8b66cea4812bd4bd7ea2af16" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::to_string</source>
          <target state="translated">Ipv4Addr::to_string</target>
        </trans-unit>
        <trans-unit id="412e053ce749bb8025b592e2499a7d73749e6fbe" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::try_from</source>
          <target state="translated">Ipv4Addr::try_from</target>
        </trans-unit>
        <trans-unit id="3e4b53822154707283b1d82871537a4148878b64" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::try_into</source>
          <target state="translated">Ipv4Addr::try_into</target>
        </trans-unit>
        <trans-unit id="29c219582f8e2fb59bc91723bc9968e9e558d78a" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::type_id</source>
          <target state="translated">Ipv4Addr::type_id</target>
        </trans-unit>
        <trans-unit id="0d8606594389e9bf1434e5e041fc45b49d2d89fb" translate="yes" xml:space="preserve">
          <source>Ipv6Addr</source>
          <target state="translated">Ipv6Addr</target>
        </trans-unit>
        <trans-unit id="d70b655b95a966bf32c7e29d4eb302d94d537409" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::borrow</source>
          <target state="translated">Ipv6Addr::borrow</target>
        </trans-unit>
        <trans-unit id="5bcfe843497d7c0d0e1435cd2a4e6d7c081bbbc0" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::borrow_mut</source>
          <target state="translated">Ipv6Addr::borrow_mut</target>
        </trans-unit>
        <trans-unit id="f7dd13e8c27649fb7974784c22309d13f14d3cb8" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::clamp</source>
          <target state="translated">Ipv6Addr::clamp</target>
        </trans-unit>
        <trans-unit id="75d479dee6aa25b111b95de4fe2ff9431fd40236" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::clone</source>
          <target state="translated">Ipv6Addr::clone</target>
        </trans-unit>
        <trans-unit id="23bca06a900c89dfaa4d74bf597a4b4d7db14dd8" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::clone_from</source>
          <target state="translated">Ipv6Addr::clone_from</target>
        </trans-unit>
        <trans-unit id="a1b88b248e8ee4b5b484c234c2ecfbe7dbfdd996" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::clone_into</source>
          <target state="translated">Ipv6Addr::clone_into</target>
        </trans-unit>
        <trans-unit id="dc97ee1fb759cbf2f49863623e2495bd92e0cc2d" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::cmp</source>
          <target state="translated">Ipv6Addr::cmp</target>
        </trans-unit>
        <trans-unit id="92b52ce5c0ec7c8283a07b53ad7860ec0014b4c9" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::eq</source>
          <target state="translated">Ipv6Addr::eq</target>
        </trans-unit>
        <trans-unit id="3b311d466c72a6b513175602e48a797929f3d67d" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::fmt</source>
          <target state="translated">Ipv6Addr::fmt</target>
        </trans-unit>
        <trans-unit id="8026446e621a4f6612c20cfc5e55af6998493a0a" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::from</source>
          <target state="translated">Ipv6Addr::from</target>
        </trans-unit>
        <trans-unit id="3b0a22d0bf352f30e40cf12cf400d0bcc3d4fbeb" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::from_str</source>
          <target state="translated">Ipv6Addr::from_str</target>
        </trans-unit>
        <trans-unit id="1b12986f3c342df0da012478446d35bc1e25adff" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::ge</source>
          <target state="translated">Ipv6Addr::ge</target>
        </trans-unit>
        <trans-unit id="cfefe2f3000d50064ee292bedfc9212d2af9fa6d" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::gt</source>
          <target state="translated">Ipv6Addr::gt</target>
        </trans-unit>
        <trans-unit id="76f36f887e858b436e8356c4db0f8649f4a0fa39" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::hash</source>
          <target state="translated">Ipv6Addr::hash</target>
        </trans-unit>
        <trans-unit id="2266f98ea937ce9e92f9c74b16810ce281c5f688" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::hash_slice</source>
          <target state="translated">Ipv6Addr::hash_slice</target>
        </trans-unit>
        <trans-unit id="45ed8315dcbcb3116b3eb8b57c7b03b534df4ade" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::into</source>
          <target state="translated">Ipv6Addr::into</target>
        </trans-unit>
        <trans-unit id="100022f73659e9325e7ac2e452d9737325bc6205" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::is_documentation</source>
          <target state="translated">Ipv6Addr::is_documentation</target>
        </trans-unit>
        <trans-unit id="779fa2a92533a376818cec5898176281cf38b662" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::is_global</source>
          <target state="translated">Ipv6Addr::is_global</target>
        </trans-unit>
        <trans-unit id="9ea19eb6e650cc597cabc4d80c14f0f132c8c23d" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::is_loopback</source>
          <target state="translated">Ipv6Addr::is_loopback</target>
        </trans-unit>
        <trans-unit id="674f4cff3c09e352444adb1edda7bff67e73c3d6" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::is_multicast</source>
          <target state="translated">Ipv6Addr::is_multicast</target>
        </trans-unit>
        <trans-unit id="53343e7e3d105f1a44ebe32d0eefc791089badc8" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::is_unicast_global</source>
          <target state="translated">Ipv6Addr::is_unicast_global</target>
        </trans-unit>
        <trans-unit id="ef3d5cf9b22cff3832f46ef32799dfbc2d0e5d23" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::is_unicast_link_local</source>
          <target state="translated">Ipv6Addr::is_unicast_link_local</target>
        </trans-unit>
        <trans-unit id="a210d1d3c529f4648ccb8a6d5d259a6a6d471504" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::is_unicast_link_local_strict</source>
          <target state="translated">Ipv6Addr::is_unicast_link_local_strict</target>
        </trans-unit>
        <trans-unit id="fa85561c123be7bf6016020f1992fd1b205fb3ab" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::is_unicast_site_local</source>
          <target state="translated">Ipv6Addr::is_unicast_site_local</target>
        </trans-unit>
        <trans-unit id="f214d60d9ab8bf7117df211486c37f22952d790b" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::is_unique_local</source>
          <target state="translated">Ipv6Addr::is_unique_local</target>
        </trans-unit>
        <trans-unit id="a8d6c989ec571a72320733615b69d2c07fcb0ba9" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::is_unspecified</source>
          <target state="translated">Ipv6Addr::is_unspecified</target>
        </trans-unit>
        <trans-unit id="02c8fce30d5a32465175cbe3879c69259c312ded" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::le</source>
          <target state="translated">Ipv6Addr::le</target>
        </trans-unit>
        <trans-unit id="297e749932b92e4808241fddcb9b960c1bbefb12" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::lt</source>
          <target state="translated">Ipv6Addr::lt</target>
        </trans-unit>
        <trans-unit id="1f93180931140e8587a275013dfcfce7f8b6490e" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::max</source>
          <target state="translated">Ipv6Addr::max</target>
        </trans-unit>
        <trans-unit id="50eb114b333cecae538ca6ad284c88fab52f336e" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::min</source>
          <target state="translated">Ipv6Addr::min</target>
        </trans-unit>
        <trans-unit id="183f35750e05512d0c059a06dbccd93abd3349c7" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::multicast_scope</source>
          <target state="translated">Ipv6Addr::multicast_scope</target>
        </trans-unit>
        <trans-unit id="e51b9303d310ea2cd79b483b6689ac80fe75fbd6" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::ne</source>
          <target state="translated">Ipv6Addr::ne</target>
        </trans-unit>
        <trans-unit id="f1d4f467002e9522e65e198bfa78a0a6829f670e" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::new</source>
          <target state="translated">Ipv6Addr::new</target>
        </trans-unit>
        <trans-unit id="d61c56e79ee209a5c274b6372f7bfb67e409ab7e" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::octets</source>
          <target state="translated">Ipv6Addr::octets</target>
        </trans-unit>
        <trans-unit id="17e1469eab47bf29477cd18cccbbb0cde2f23783" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::partial_cmp</source>
          <target state="translated">Ipv6Addr::partial_cmp</target>
        </trans-unit>
        <trans-unit id="b7b98dc05081d889b0f5f7de6c80a3ae378cf699" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::segments</source>
          <target state="translated">Ipv6Addr::segments</target>
        </trans-unit>
        <trans-unit id="c35cdbb386870b8f97c03a67a421ae849b3268f9" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::to_ipv4</source>
          <target state="translated">Ipv6Addr::to_ipv4</target>
        </trans-unit>
        <trans-unit id="33aea393ab3dab6c3a68e6f00c689810fe9bd799" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::to_owned</source>
          <target state="translated">Ipv6Addr::to_owned</target>
        </trans-unit>
        <trans-unit id="744da9f6f868ba8486c07d001e1497f4af409a6c" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::to_string</source>
          <target state="translated">Ipv6Addr::to_string</target>
        </trans-unit>
        <trans-unit id="e7906ea8de471e39df4e64193a59ad6753c407ea" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::try_from</source>
          <target state="translated">Ipv6Addr::try_from</target>
        </trans-unit>
        <trans-unit id="57e4d786e8cd27bd0e1a73e9af4d39fca767500d" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::try_into</source>
          <target state="translated">Ipv6Addr::try_into</target>
        </trans-unit>
        <trans-unit id="fb2fe802e9fb2190aa9429082c672e39e9fa6875" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::type_id</source>
          <target state="translated">Ipv6Addr::type_id</target>
        </trans-unit>
        <trans-unit id="88a82ca1333481fb3a1f5fa852a0e945500824b1" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope</source>
          <target state="translated">Ipv6MulticastScope</target>
        </trans-unit>
        <trans-unit id="e84c27e16f953494b556166d8f312c91254c12d0" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::borrow</source>
          <target state="translated">Ipv6MulticastScope::borrow</target>
        </trans-unit>
        <trans-unit id="677ee6c513806ce0784ec7fe2a00a0d6bca85485" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::borrow_mut</source>
          <target state="translated">Ipv6MulticastScope::borrow_mut</target>
        </trans-unit>
        <trans-unit id="dcf68f3ffbb91cc5040a7613640f04ad758b23a4" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::clone</source>
          <target state="translated">Ipv6MulticastScope::clone</target>
        </trans-unit>
        <trans-unit id="61fd8492371c7f4b111966fae5d5fe08c4b97229" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::clone_from</source>
          <target state="translated">Ipv6MulticastScope::clone_from</target>
        </trans-unit>
        <trans-unit id="134ebe2c42587c3ca82d7925389e251db2163a7b" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::clone_into</source>
          <target state="translated">Ipv6MulticastScope::clone_into</target>
        </trans-unit>
        <trans-unit id="390d22aa747105ced3c5976e7e0b509871c131ca" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::eq</source>
          <target state="translated">Ipv6MulticastScope::eq</target>
        </trans-unit>
        <trans-unit id="608099f9c2565ad9310942c2ab375a0a27d03555" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::fmt</source>
          <target state="translated">Ipv6MulticastScope::fmt</target>
        </trans-unit>
        <trans-unit id="3ba69289a058c4abe74375992c848e97e5c3e1f0" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::from</source>
          <target state="translated">Ipv6MulticastScope::from</target>
        </trans-unit>
        <trans-unit id="50dbeef4e426d6a1662be73f3b710581f45f5726" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::hash</source>
          <target state="translated">Ipv6MulticastScope::hash</target>
        </trans-unit>
        <trans-unit id="d937291039e717d6b72ac61199880b756bb71cc6" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::hash_slice</source>
          <target state="translated">Ipv6MulticastScope::hash_slice</target>
        </trans-unit>
        <trans-unit id="72c69d6697741a6839af11bc528c0219d8f51a86" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::into</source>
          <target state="translated">Ipv6MulticastScope::into</target>
        </trans-unit>
        <trans-unit id="f19d929ae7f3905c1d7f61ba332bba83b3ee1713" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::ne</source>
          <target state="translated">Ipv6MulticastScope::ne</target>
        </trans-unit>
        <trans-unit id="1ae2897866e78e1fede7326722ae13d5ef68df29" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::to_owned</source>
          <target state="translated">Ipv6MulticastScope::to_owned</target>
        </trans-unit>
        <trans-unit id="0446e23a43371fe0f94b03f56d1bb98116018284" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::try_from</source>
          <target state="translated">Ipv6MulticastScope::try_from</target>
        </trans-unit>
        <trans-unit id="f9b3de0a7b333e261fdc7c4ad1a32806dd360521" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::try_into</source>
          <target state="translated">Ipv6MulticastScope::try_into</target>
        </trans-unit>
        <trans-unit id="54bb08375bed2835d5a0ef191ec626eeb541ad77" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::type_id</source>
          <target state="translated">Ipv6MulticastScope::type_id</target>
        </trans-unit>
        <trans-unit id="1ded365c250b74bea186557cb8382c1ec7f7a2ef" translate="yes" xml:space="preserve">
          <source>Is called to get the representation of the value as status code. This status code is returned to the operating system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59458c2be32dcdeda9fe0621a635d170f4b150d0" translate="yes" xml:space="preserve">
          <source>Is called to get the representation of the value as status code. This status code is returned to the operating system. &lt;a href=&quot;../process/trait.termination#tymethod.report&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5992205e7f17c7190fe09ef40bc9950c869d373e" translate="yes" xml:space="preserve">
          <source>Is called to get the representation of the value as status code. This status code is returned to the operating system. &lt;a href=&quot;process/trait.termination#tymethod.report&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="680b4746f2d256076239ed1e9dc02c5c4926c34a" translate="yes" xml:space="preserve">
          <source>Is called to get the representation of the value as status code. This status code is returned to the operating system. &lt;a href=&quot;trait.termination#tymethod.report&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51ca310768b85e8610e7fa8789046380b05cedd2" translate="yes" xml:space="preserve">
          <source>Isolated CRs (&lt;code&gt;\r&lt;/code&gt;), i.e. not followed by LF (&lt;code&gt;\n&lt;/code&gt;), are not allowed in doc comments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21d9ab30a1c1e374b953d4ada2aa7c7ea2c3447d" translate="yes" xml:space="preserve">
          <source>It appears as if some variables stored in memory are changed, an addition is performed, result is stored in &lt;code&gt;A&lt;/code&gt; and the variable &lt;code&gt;C&lt;/code&gt; is modified twice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bec31df4330e5539ca332e9180d08b7d0285868d" translate="yes" xml:space="preserve">
          <source>It avoids the need to allocate mutexes and condvars when building new synchronization primitives; the threads already provide basic blocking/signaling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a8b452f4173e1504b134fc7f377b9484d0800b0" translate="yes" xml:space="preserve">
          <source>It can also be used directly to allocate memory independently of whatever global allocator has been selected for a Rust program. For example if a Rust program opts in to using jemalloc as the global allocator, &lt;code&gt;System&lt;/code&gt; will still allocate memory using &lt;code&gt;malloc&lt;/code&gt; and &lt;code&gt;HeapAlloc&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="310caca6a04a9d8a72a66083548cffe2c3deb96f" translate="yes" xml:space="preserve">
          <source>It can also initialize each element of a &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; with a given value. This may be more efficient than performing allocation and initialization in separate steps, especially when initializing a vector of zeros:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="190277fdc267c49497782df2cc44dfe65d610086" translate="yes" xml:space="preserve">
          <source>It can be confusing whether or not you should use a constant item or a static item. Constants should, in general, be preferred over statics unless one of the following are true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bd32cfa263bd1bf213225174ecd4ec323617bbd" translate="yes" xml:space="preserve">
          <source>It can be excessively inefficient to work directly with a &lt;a href=&quot;trait.read&quot;&gt;&lt;code&gt;Read&lt;/code&gt;&lt;/a&gt; instance. For example, every call to &lt;a href=&quot;../net/struct.tcpstream#method.read&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; on &lt;a href=&quot;../net/struct.tcpstream&quot;&gt;&lt;code&gt;TcpStream&lt;/code&gt;&lt;/a&gt; results in a system call. A &lt;code&gt;BufReader&lt;/code&gt; performs large, infrequent reads on the underlying &lt;a href=&quot;trait.read&quot;&gt;&lt;code&gt;Read&lt;/code&gt;&lt;/a&gt; and maintains an in-memory buffer of the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9b4e83780a18771dd321f0082a8c599b84b0325" translate="yes" xml:space="preserve">
          <source>It can be excessively inefficient to work directly with something that implements &lt;a href=&quot;trait.write&quot;&gt;&lt;code&gt;Write&lt;/code&gt;&lt;/a&gt;. For example, every call to &lt;a href=&quot;../net/struct.tcpstream#method.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; on &lt;a href=&quot;../net/struct.tcpstream&quot;&gt;&lt;code&gt;TcpStream&lt;/code&gt;&lt;/a&gt; results in a system call. A &lt;code&gt;BufWriter&lt;/code&gt; keeps an in-memory buffer of data and writes it to an underlying writer in large, infrequent batches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9005a41b0a5154d7a83abaf469c6cbf2455196bc" translate="yes" xml:space="preserve">
          <source>It can be fixed by adjusting the trait bound like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe6abd0552b2b40662057338eb474072bfd467ab" translate="yes" xml:space="preserve">
          <source>It can be implemented very efficiently on many platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1742a20f108d58ed46034272510180c651908ea6" translate="yes" xml:space="preserve">
          <source>It can be more efficient to read the contents of a file with a buffered &lt;a href=&quot;../io/trait.read&quot;&gt;&lt;code&gt;Read&lt;/code&gt;&lt;/a&gt;er. This can be accomplished with &lt;a href=&quot;../io/struct.bufreader&quot;&gt;&lt;code&gt;BufReader&amp;lt;R&amp;gt;&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a115494bb139f55de5b0b3f70529477957a7f61" translate="yes" xml:space="preserve">
          <source>It can occur, for example, when giving ill-formed UTF-8 bytes to &lt;a href=&quot;../string/struct.string#method.from_utf8_lossy&quot;&gt;&lt;code&gt;String::from_utf8_lossy&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00fe0776828801d6e4d2d0000fdfe545e88338bd" translate="yes" xml:space="preserve">
          <source>It consists of a data pointer and a &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_method_table&quot;&gt;virtual function pointer table (vtable)&lt;/a&gt; that customizes the behavior of the &lt;code&gt;RawWaker&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="304308a190fdf4f0822058e40b620979e500ac31" translate="yes" xml:space="preserve">
          <source>It could also be that the browser is trying to connect to the server multiple times because the server isn&amp;rsquo;t responding with any data. When &lt;code&gt;stream&lt;/code&gt; goes out of scope and is dropped at the end of the loop, the connection is closed as part of the &lt;code&gt;drop&lt;/code&gt; implementation. Browsers sometimes deal with closed connections by retrying, because the problem might be temporary. The important factor is that we&amp;rsquo;ve successfully gotten a handle to a TCP connection!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ade427f6a9f3a1335d386816dffbf2fdc2034717" translate="yes" xml:space="preserve">
          <source>It does &lt;em&gt;not&lt;/em&gt; give you:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffb73bdc252e7f6e26b2827c67cb797c04a45c79" translate="yes" xml:space="preserve">
          <source>It does not have an &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt; implementation, so you can't use it in a &lt;code&gt;for&lt;/code&gt; loop directly. This won't compile:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74bec73f805593fee91ebe017ac47c318ef63b70" translate="yes" xml:space="preserve">
          <source>It does pass! Let&amp;rsquo;s add another test, this time asserting that a smaller rectangle cannot hold a larger rectangle:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2bf564d4c76feec85879b21bc874b8175ee437c" translate="yes" xml:space="preserve">
          <source>It doesn&amp;rsquo;t matter if we mix up width and height for the area calculation, but if we want to draw the rectangle on the screen, it would matter! We would have to keep in mind that &lt;code&gt;width&lt;/code&gt; is the tuple index &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; is the tuple index &lt;code&gt;1&lt;/code&gt;. If someone else worked on this code, they would have to figure this out and keep it in mind as well. It would be easy to forget or mix up these values and cause errors, because we haven&amp;rsquo;t conveyed the meaning of our data in our code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52b4ba1c15e44e888e3928ea17d62d2f1924cb8" translate="yes" xml:space="preserve">
          <source>It exposes more ways to deal with platform-specific strings (&lt;code&gt;OsStr&lt;/code&gt;, &lt;code&gt;OsString&lt;/code&gt;), allows to set permissions more granularly, extract low-level file descriptors from files and sockets, and has platform-specific helpers for spawning processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11abb8c04f2668a58f566442bd95936d3058b5af" translate="yes" xml:space="preserve">
          <source>It is &lt;a href=&quot;../behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt; to call a function that is compiled with a feature that is not supported on the current platform the code is running on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14b8fe5823c3e0b4ead46dab65d150ba97815143" translate="yes" xml:space="preserve">
          <source>It is &lt;code&gt;unsafe&lt;/code&gt; to access a static item declared in an extern block, whether or not it's mutable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="789a56605a4c0fc94024c04229e1954360379606" translate="yes" xml:space="preserve">
          <source>It is &lt;em&gt;required&lt;/em&gt; to use &lt;code&gt;drop_in_place&lt;/code&gt; to drop unsized types like trait objects, because they can't be read out onto the stack and dropped normally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="122d47e267f58dbf245d83bbd151c9d835be4c42" translate="yes" xml:space="preserve">
          <source>It is &lt;strong&gt;not&lt;/strong&gt; considered an error if the entire buffer could not be written to this writer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8bf34a5d274735d5f3f6b75aeb9079259905f3" translate="yes" xml:space="preserve">
          <source>It is &lt;strong&gt;not&lt;/strong&gt; recommended to use this function for a general try/catch mechanism. The &lt;a href=&quot;../result/enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt; type is more appropriate to use for functions that can fail on a regular basis. Additionally, this function is not guaranteed to catch all panics, see the &quot;Notes&quot; section below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f44c0918ab46b70725b0bcd2ecf83b8a768d4eb5" translate="yes" xml:space="preserve">
          <source>It is a logic error for a key to be modified in such a way that the key's hash, as determined by the &lt;a href=&quot;../../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; trait, or its equality, as determined by the &lt;a href=&quot;../../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; trait, changes while it is in the map. This is normally only possible through &lt;a href=&quot;../../cell/struct.cell&quot;&gt;&lt;code&gt;Cell&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt;, global state, I/O, or unsafe code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5c36c17020650b28936fe4d1b2ab87233144be8" translate="yes" xml:space="preserve">
          <source>It is a logic error for a key to be modified in such a way that the key's hash, as determined by the &lt;a href=&quot;../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; trait, or its equality, as determined by the &lt;a href=&quot;../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; trait, changes while it is in the map. This is normally only possible through &lt;a href=&quot;../cell/struct.cell&quot;&gt;&lt;code&gt;Cell&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt;, global state, I/O, or unsafe code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46331dafb0153e4395d3531f25654f92dc26340b" translate="yes" xml:space="preserve">
          <source>It is a logic error for a key to be modified in such a way that the key's ordering relative to any other key, as determined by the &lt;a href=&quot;../../cmp/trait.ord&quot;&gt;&lt;code&gt;Ord&lt;/code&gt;&lt;/a&gt; trait, changes while it is in the map. This is normally only possible through &lt;a href=&quot;../../cell/struct.cell&quot;&gt;&lt;code&gt;Cell&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt;, global state, I/O, or unsafe code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85493dfb2b8e297a25b008cf35e5fe74ede0c214" translate="yes" xml:space="preserve">
          <source>It is a logic error for a key to be modified in such a way that the key's ordering relative to any other key, as determined by the &lt;a href=&quot;../cmp/trait.ord&quot;&gt;&lt;code&gt;Ord&lt;/code&gt;&lt;/a&gt; trait, changes while it is in the map. This is normally only possible through &lt;a href=&quot;../cell/struct.cell&quot;&gt;&lt;code&gt;Cell&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt;, global state, I/O, or unsafe code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a06bdad2097a07f5094016d13cc933d3f72af47" translate="yes" xml:space="preserve">
          <source>It is a logic error for an item to be modified in such a way that the item's hash, as determined by the &lt;a href=&quot;../../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; trait, or its equality, as determined by the &lt;a href=&quot;../../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; trait, changes while it is in the set. This is normally only possible through &lt;a href=&quot;../../cell/struct.cell&quot;&gt;&lt;code&gt;Cell&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt;, global state, I/O, or unsafe code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d42ef3a74bef90b249465c06d2f032ccefb653f1" translate="yes" xml:space="preserve">
          <source>It is a logic error for an item to be modified in such a way that the item's hash, as determined by the &lt;a href=&quot;../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; trait, or its equality, as determined by the &lt;a href=&quot;../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; trait, changes while it is in the set. This is normally only possible through &lt;a href=&quot;../cell/struct.cell&quot;&gt;&lt;code&gt;Cell&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt;, global state, I/O, or unsafe code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab5c67b79a448ca7bc9aba52ab29aac6f49d326" translate="yes" xml:space="preserve">
          <source>It is a logic error for an item to be modified in such a way that the item's ordering relative to any other item, as determined by the &lt;a href=&quot;../../cmp/trait.ord&quot;&gt;&lt;code&gt;Ord&lt;/code&gt;&lt;/a&gt; trait, changes while it is in the set. This is normally only possible through &lt;a href=&quot;../../cell/struct.cell&quot;&gt;&lt;code&gt;Cell&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt;, global state, I/O, or unsafe code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81558e504ca17a10e655e3f35b43a6c2e19151af" translate="yes" xml:space="preserve">
          <source>It is a logic error for an item to be modified in such a way that the item's ordering relative to any other item, as determined by the &lt;a href=&quot;../cmp/trait.ord&quot;&gt;&lt;code&gt;Ord&lt;/code&gt;&lt;/a&gt; trait, changes while it is in the set. This is normally only possible through &lt;a href=&quot;../cell/struct.cell&quot;&gt;&lt;code&gt;Cell&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt;, global state, I/O, or unsafe code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e476b6f2887551b48a3be2ee9ea6d582ce86836" translate="yes" xml:space="preserve">
          <source>It is a logic error for an item to be modified in such a way that the item's ordering relative to any other item, as determined by the &lt;code&gt;Ord&lt;/code&gt; trait, changes while it is in the heap. This is normally only possible through &lt;code&gt;Cell&lt;/code&gt;, &lt;code&gt;RefCell&lt;/code&gt;, global state, I/O, or unsafe code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1fecc95182812f5ebb362d1bac59ac94dc2f98d" translate="yes" xml:space="preserve">
          <source>It is a multiple of the alignment, including zero. The size can change depending on compiler version (as new optimizations are made) and target platform (similar to how &lt;code&gt;usize&lt;/code&gt; varies per-platform).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f9d3e3312ad57e5a6d3bcdd50a937a22f832b6" translate="yes" xml:space="preserve">
          <source>It is also an error to have an unspecified discriminant where the previous discriminant is the maximum value for the size of the discriminant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aaa72db942d7c7ea290053204f195dee9198e63" translate="yes" xml:space="preserve">
          <source>It is also possible that immediately after &lt;code&gt;is_completed&lt;/code&gt; returns false, some other thread finishes executing &lt;code&gt;call_once&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19ceccce9e9543f68e6cf0b82b34ef37c7f04824" translate="yes" xml:space="preserve">
          <source>It is also possible to manually transmute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9152c587c216123563f72b60e624fb7b37150c7" translate="yes" xml:space="preserve">
          <source>It is also possible to overload most operators for your own type by implementing the &lt;code&gt;[OP]Assign&lt;/code&gt; traits from &lt;code&gt;std::ops&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c720012a3e805c9d62f2435d313e2b4c97a82fa" translate="yes" xml:space="preserve">
          <source>It is also possible to overload most operators for your own type by implementing traits from &lt;code&gt;std::ops&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12a0c387e81a8235a99c7d165954f2002b18f388" translate="yes" xml:space="preserve">
          <source>It is an error for &lt;a href=&quot;items/enumerations#zero-variant-enums&quot;&gt;zero-variant enumerations&lt;/a&gt; to have a primitive representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b8784e54718e2a6d91bae7b9a9deae29e0d7cb7" translate="yes" xml:space="preserve">
          <source>It is an error for &lt;a href=&quot;items/enumerations#zero-variant-enums&quot;&gt;zero-variant enumerations&lt;/a&gt; to have the &lt;code&gt;C&lt;/code&gt; representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5e73da35c291d17423e4b430565c57bff241da2" translate="yes" xml:space="preserve">
          <source>It is an error to define two associated items (like methods, associated types, associated functions, etc.) with the same identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ecd71d2b66919da6bca2d4ca4f7a151af58acc5" translate="yes" xml:space="preserve">
          <source>It is an error to pass a zero &lt;code&gt;Duration&lt;/code&gt; to this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c705f9525d896b896f63b638e17d43664425dcf5" translate="yes" xml:space="preserve">
          <source>It is an error when two variants share the same discriminant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e066ad57d2ce7768c716de2f11bbba9cfbc5ef3" translate="yes" xml:space="preserve">
          <source>It is common to forget the trailing &lt;code&gt;!&lt;/code&gt; on macro invocations, which would also yield this error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab682946a2c7b0a4e860227b119766dc69c7e1ad" translate="yes" xml:space="preserve">
          <source>It is common to use &lt;code&gt;IntoIterator&lt;/code&gt; as a trait bound. This allows the input collection type to change, so long as it is still an iterator. Additional bounds can be specified by restricting on &lt;code&gt;Item&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24d52c7dd0ec99d9a6af7862341acee02c183bdc" translate="yes" xml:space="preserve">
          <source>It is common to use the &lt;a href=&quot;trait.iterator#method.take&quot;&gt;&lt;code&gt;take&lt;/code&gt;&lt;/a&gt; iterator adapter to turn an infinite iterator into a finite one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c95bb9f004735a87f727f19d983aa3691d7d3210" translate="yes" xml:space="preserve">
          <source>It is considered an error if not all bytes could be written due to I/O errors or EOF being reached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd73943cb17deb4f2b3ccabad843f693f98447d" translate="yes" xml:space="preserve">
          <source>It is considered an error if the directory already exists unless recursive mode is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5c36c5e7602baf3c3616b07cef1f3665caf1d22" translate="yes" xml:space="preserve">
          <source>It is currently undefined behavior to unwind from Rust code into foreign code, so this function is particularly useful when Rust is called from another language (normally C). This can run arbitrary Rust code, capturing a panic and allowing a graceful handling of the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae5ff64ed07894b48692747efd0c02dda81558f" translate="yes" xml:space="preserve">
          <source>It is fine only if you put something back. &lt;code&gt;mem::replace&lt;/code&gt; can be used for that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c557fd6825bdb89ba5f031ec165be0dd6a26ff58" translate="yes" xml:space="preserve">
          <source>It is friendlier to the optimizer to do this over &lt;a href=&quot;../ptr/fn.read&quot;&gt;&lt;code&gt;ptr::read&lt;/code&gt;&lt;/a&gt; when dropping manually allocated memory (e.g., when writing Box/Rc/Vec), as the compiler doesn't need to prove that it's sound to elide the copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98cf066d0eeb6931da37108448f70da379f6d2ff" translate="yes" xml:space="preserve">
          <source>It is friendlier to the optimizer to do this over &lt;a href=&quot;fn.read&quot;&gt;&lt;code&gt;ptr::read&lt;/code&gt;&lt;/a&gt; when dropping manually allocated memory (e.g., when writing Box/Rc/Vec), as the compiler doesn't need to prove that it's sound to elide the copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a482eb06332931aa49748cd7170635733f6d060d" translate="yes" xml:space="preserve">
          <source>It is important to note that although the returned vector has the &lt;em&gt;capacity&lt;/em&gt; specified, the vector will have a zero &lt;em&gt;length&lt;/em&gt;. For an explanation of the difference between length and capacity, see &lt;em&gt;&lt;a href=&quot;#capacity-and-reallocation&quot;&gt;Capacity and reallocation&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3de289a473969bb492d7f49323becca72758c15" translate="yes" xml:space="preserve">
          <source>It is important to note that both back and forth work on the same range, and do not cross: iteration is over when they meet in the middle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="688443f49dee6c57698fbe38d0a4fd0c6b98badb" translate="yes" xml:space="preserve">
          <source>It is important to understand that &lt;a href=&quot;trait.into&quot;&gt;&lt;code&gt;Into&lt;/code&gt;&lt;/a&gt; does not provide a &lt;a href=&quot;trait.from&quot;&gt;&lt;code&gt;From&lt;/code&gt;&lt;/a&gt; implementation (as &lt;a href=&quot;trait.from&quot;&gt;&lt;code&gt;From&lt;/code&gt;&lt;/a&gt; does with &lt;a href=&quot;trait.into&quot;&gt;&lt;code&gt;Into&lt;/code&gt;&lt;/a&gt;). Therefore, you should always try to implement &lt;a href=&quot;trait.from&quot;&gt;&lt;code&gt;From&lt;/code&gt;&lt;/a&gt; and then fall back to &lt;a href=&quot;trait.into&quot;&gt;&lt;code&gt;Into&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;trait.from&quot;&gt;&lt;code&gt;From&lt;/code&gt;&lt;/a&gt; can't be implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b60eba4804f29ceedf6d48ba368778e00e21367" translate="yes" xml:space="preserve">
          <source>It is impossible to define an integer type to be used to represent zero-variant enum values because there are no zero-variant enum values. There is no way to construct an instance of the following type using only safe code. So you have two solutions. Either you add variants in your enum:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5291d52684a5eab8a4aab9333d7cc4b2cb958b" translate="yes" xml:space="preserve">
          <source>It is inadvisable to directly read from the underlying reader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c4bfe06953b97ae05b73dab70d1d3859db96ce" translate="yes" xml:space="preserve">
          <source>It is inadvisable to directly write to the underlying writer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3dbb1246b199ac521c8acb1693aa5061246652a" translate="yes" xml:space="preserve">
          <source>It is not a compile-time error if &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; have different sizes, but it is highly encouraged to only invoke this function where &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; have the same size. This function triggers &lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt; if &lt;code&gt;U&lt;/code&gt; is larger than &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="804904553c24d5c3119a2a373f46ee3afe1e1bcf" translate="yes" xml:space="preserve">
          <source>It is not allowed to cast to a bool. If you are trying to cast a numeric type to a bool, you can compare it with zero instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16c9437daa5a5b2d54fcaf5cf82931c13dd48503" translate="yes" xml:space="preserve">
          <source>It is not allowed to manually call destructors in Rust. It is also not necessary to do this since &lt;code&gt;drop&lt;/code&gt; is called automatically whenever a value goes out of scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7767b89b540932cb942c6e1844049703b82b847b" translate="yes" xml:space="preserve">
          <source>It is not allowed to use or capture an uninitialized variable. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec565a6be063138e105edece3d9609dbd23ba59" translate="yes" xml:space="preserve">
          <source>It is not always equivalent to a closure like &lt;code&gt;|x| x&lt;/code&gt; since the closure may coerce &lt;code&gt;x&lt;/code&gt; into a different type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d7dcfb4170b72e2facf78d57d95eed97b2a6250" translate="yes" xml:space="preserve">
          <source>It is not an error to define a macro multiple times; the most recent declaration will shadow the previous one unless it has gone out of scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe10caafa0ee23dcebc8469f9e22713be6e1455c" translate="yes" xml:space="preserve">
          <source>It is not enforced that an iterator implementation yields the declared number of elements. A buggy iterator may yield less than the lower bound or more than the upper bound of elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8f822d10fd7f248875122ae295429f7075d08d7" translate="yes" xml:space="preserve">
          <source>It is not guaranteed that the memory pointed by &lt;code&gt;ptr&lt;/code&gt; won't change before the &lt;code&gt;CStr&lt;/code&gt; has been destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63ef7dab9cc8c89ff48dae3884d5439039407f4c" translate="yes" xml:space="preserve">
          <source>It is not intended that most types or functions need to worry about this trait. It is only used as a bound on the &lt;code&gt;catch_unwind&lt;/code&gt; function and as mentioned above, the lack of &lt;code&gt;unsafe&lt;/code&gt; means it is mostly an advisory. The &lt;a href=&quot;struct.assertunwindsafe&quot;&gt;&lt;code&gt;AssertUnwindSafe&lt;/code&gt;&lt;/a&gt; wrapper struct can be used to force this trait to be implemented for any closed over variables passed to &lt;code&gt;catch_unwind&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34f3040279fd242d13257751040f971829001939" translate="yes" xml:space="preserve">
          <source>It is not necessary to annotate the full type. Once the ambiguity is resolved, the compiler can infer the rest:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79ac203d9d8f6d2d15f792ef9b54266d902c1bf2" translate="yes" xml:space="preserve">
          <source>It is not possible to declare type parameters on a function that has the &lt;code&gt;start&lt;/code&gt; attribute. Such a function must have the following type signature (for more information, view &lt;a href=&quot;https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib&quot;&gt;the unstable book&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5f5303b9508d3572ecb0aabe587d9c97215e2a" translate="yes" xml:space="preserve">
          <source>It is not possible to define &lt;code&gt;main&lt;/code&gt; with a where clause. Erroneous code example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0b1c5c12eac01beb248497b03a0ab70e561e5a5" translate="yes" xml:space="preserve">
          <source>It is not possible to define &lt;code&gt;main&lt;/code&gt; with generic parameters. When &lt;code&gt;main&lt;/code&gt; is present, it must take no arguments and return &lt;code&gt;()&lt;/code&gt;. Erroneous code example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac867cdafaa004a57591e1391a5068dc6cc6e4a" translate="yes" xml:space="preserve">
          <source>It is not possible to define &lt;code&gt;start&lt;/code&gt; with a where clause. Erroneous code example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42e4484b8793e84f3d96cf9d91150a25ddc1b027" translate="yes" xml:space="preserve">
          <source>It is not possible to use stability attributes outside of the standard library. Also, for now, it is not possible to write deprecation messages either.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="babf4563d827f22cdca258081ab4debae3695f91" translate="yes" xml:space="preserve">
          <source>It is not valid to put positional parameters (those without names) after arguments which have names. Like with positional parameters, it is not valid to provide named parameters that are unused by the format string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3ba3f42fb0bf8686407f3cf8b99f8a8d970d5d7" translate="yes" xml:space="preserve">
          <source>It is often seen in its borrowed forms, either mutable or shared. The shared slice type is &lt;code&gt;&amp;amp;[T]&lt;/code&gt;, while the mutable slice type is &lt;code&gt;&amp;amp;mut [T]&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; represents the element type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fab516d94cc4b051eccfa289cd47f35b51a6906" translate="yes" xml:space="preserve">
          <source>It is possible for &lt;code&gt;addr&lt;/code&gt; to yield multiple addresses, but &lt;code&gt;send_to&lt;/code&gt; will only send data to the first address yielded by &lt;code&gt;addr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6369907ebe6b468b9a2ca85d26bcb0993424305d" translate="yes" xml:space="preserve">
          <source>It is possible to seek beyond the end of an object, but it's an error to seek before byte 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cecc5cbf610b50fb9b85dc5d9562253999d191e2" translate="yes" xml:space="preserve">
          <source>It is possible, however, for &lt;strong&gt;logical&lt;/strong&gt; invariants to be broken in Rust, which can end up causing behavioral bugs. Another key aspect of unwind safety in Rust is that, in the absence of &lt;code&gt;unsafe&lt;/code&gt; code, a panic cannot lead to memory unsafety.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da80bba13418a2462cda990927908d8ad7892c41" translate="yes" xml:space="preserve">
          <source>It is recommended that you look for a &lt;code&gt;new&lt;/code&gt; function or equivalent in the crate's documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="158d82d49dddadcae62bf58b7e9d48850c1ba3f3" translate="yes" xml:space="preserve">
          <source>It is required that the keys implement the &lt;a href=&quot;../../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; traits, although this can frequently be achieved by using &lt;code&gt;#[derive(PartialEq, Eq, Hash)]&lt;/code&gt;. If you implement these yourself, it is important that the following property holds:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c5f8488f4eecd7c3ca6dd6e0c4ceb285589eb45" translate="yes" xml:space="preserve">
          <source>It is required that the keys implement the &lt;a href=&quot;../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; traits, although this can frequently be achieved by using &lt;code&gt;#[derive(PartialEq, Eq, Hash)]&lt;/code&gt;. If you implement these yourself, it is important that the following property holds:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e65409691544dfbd0d6482536ef748a0086ee53" translate="yes" xml:space="preserve">
          <source>It is returned by the &lt;a href=&quot;struct.condvar#method.wait_timeout&quot;&gt;&lt;code&gt;wait_timeout&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e22d2249ea3cf1183d26c8fb6b0c9e7619f06c9" translate="yes" xml:space="preserve">
          <source>It is semantically a wrapper around an &lt;code&gt;&amp;amp;[u8]&lt;/code&gt;, but is guaranteed to be ABI compatible with the &lt;code&gt;iovec&lt;/code&gt; type on Unix platforms and &lt;code&gt;WSABUF&lt;/code&gt; on Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="310066900f319893888448530eda337cc1113b35" translate="yes" xml:space="preserve">
          <source>It is semantically a wrapper around an &lt;code&gt;&amp;amp;mut [u8]&lt;/code&gt;, but is guaranteed to be ABI compatible with the &lt;code&gt;iovec&lt;/code&gt; type on Unix platforms and &lt;code&gt;WSABUF&lt;/code&gt; on Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82e8beb4413ce9188f6c9ea8439432ef5b9611d2" translate="yes" xml:space="preserve">
          <source>It is sometimes useful to have objects that are guaranteed not to move, in the sense that their placement in memory does not change, and can thus be relied upon. A prime example of such a scenario would be building self-referential structs, as moving an object with pointers to itself will invalidate them, which could cause undefined behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d37c9a79672120af34904e218ec499be2dd86aef" translate="yes" xml:space="preserve">
          <source>It is the declarations that make up the contract of traits and what it available on generic types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b7557ddb14fd9cccc6582df092ab6f10becd5d9" translate="yes" xml:space="preserve">
          <source>It is the maximum index such that &lt;code&gt;from_utf8(&amp;amp;input[..index])&lt;/code&gt; would return &lt;code&gt;Ok(_)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ade12a490d1fb2caaede62e82d953ed5a36f49" translate="yes" xml:space="preserve">
          <source>It is typically faster than stable sorting, except in a few special cases, e.g., when the slice consists of several concatenated sorted sequences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44e547b1d483f3958a2447866fe3c4d46a3e009d" translate="yes" xml:space="preserve">
          <source>It is unspecified how many elements are removed from the vector if the &lt;code&gt;Splice&lt;/code&gt; value is leaked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6cad4b99027fa4acf9843034ac2fdd309a68ec9" translate="yes" xml:space="preserve">
          <source>It is up to the caller to ensure that the object is still alive when accessing it through the pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa61fcbe3608674ea2f0e3a8facadbaeb00b9db0" translate="yes" xml:space="preserve">
          <source>It is up to the caller to guarantee that the &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; really is in an initialized state. Calling this when the content is not yet fully initialized causes immediate undefined behavior. The &lt;a href=&quot;#initialization-invariant&quot;&gt;type-level documentation&lt;/a&gt; contains more information about this initialization invariant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e90618210aeb35b7fbf1d0dce959c7d288e195c5" translate="yes" xml:space="preserve">
          <source>It is up to the caller to guarantee that the &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; really is in an initialized state. Calling this when the content is not yet fully initialized causes undefined behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc21693b6059e6e8119cffad058e61a70eeecf5" translate="yes" xml:space="preserve">
          <source>It is up to the caller to guarantee that the &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; really is in an initialized state. Calling this when the content is not yet fully initialized causes undefined behavior. The &lt;a href=&quot;#initialization-invariant&quot;&gt;type-level documentation&lt;/a&gt; contains more information about this initialization invariant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea0a0e4346d92e82b2088690613099c2bf07dc7c" translate="yes" xml:space="preserve">
          <source>It is used by the &lt;a href=&quot;trait.seek&quot;&gt;&lt;code&gt;Seek&lt;/code&gt;&lt;/a&gt; trait.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76aa244bb958db0a4b9e995026430044d057625c" translate="yes" xml:space="preserve">
          <source>It is used with the &lt;a href=&quot;struct.error&quot;&gt;&lt;code&gt;io::Error&lt;/code&gt;&lt;/a&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f1ece6b57f7a1f8dc31198244f231a713dd3042" translate="yes" xml:space="preserve">
          <source>It is valid to add the &lt;code&gt;link&lt;/code&gt; attribute on an empty extern block. You can use this to satisfy the linking requirements of extern blocks elsewhere in your code (including upstream crates) instead of adding the attribute to each extern block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6738e5c58c6dd95792620faa63b8d5cc231a8b6d" translate="yes" xml:space="preserve">
          <source>It is worth reiterating that &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt;&lt;/a&gt; does &lt;em&gt;not&lt;/em&gt; change the fact that a Rust compiler considers all types movable. &lt;a href=&quot;../mem/fn.swap&quot;&gt;&lt;code&gt;mem::swap&lt;/code&gt;&lt;/a&gt; remains callable for any &lt;code&gt;T&lt;/code&gt;. Instead, &lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt; prevents certain &lt;em&gt;values&lt;/em&gt; (pointed to by pointers wrapped in &lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt;) from being moved by making it impossible to call methods that require &lt;code&gt;&amp;amp;mut T&lt;/code&gt; on them (like &lt;a href=&quot;../mem/fn.swap&quot;&gt;&lt;code&gt;mem::swap&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0497668f013a73ed21db051aa84713bf2b2c56fa" translate="yes" xml:space="preserve">
          <source>It is written as &lt;code&gt;cfg&lt;/code&gt;, &lt;code&gt;(&lt;/code&gt;, a configuration predicate, and finally &lt;code&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3c5f08953486f2ebadb5983fbdd75f91d8e664" translate="yes" xml:space="preserve">
          <source>It is your responsibility to make sure that the string slice only gets modified in a way that it remains valid UTF-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c82e577605ff32cb90a4cd85e5d6c96aa90577" translate="yes" xml:space="preserve">
          <source>It is your responsibility to make sure that the underlying memory is not freed too early. For example, the following code will cause undefined behavior when &lt;code&gt;ptr&lt;/code&gt; is used inside the &lt;code&gt;unsafe&lt;/code&gt; block:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e3a6e91bbdb9a45516082a07a40a29592b3f0cb" translate="yes" xml:space="preserve">
          <source>It makes sense to name the function parameters with the same name as the struct fields, but having to repeat the &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;username&lt;/code&gt; field names and variables is a bit tedious. If the struct had more fields, repeating each name would get even more annoying. Luckily, there&amp;rsquo;s a convenient shorthand!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6943ba68e7fe9f38375bc9f4ece082b476fd104" translate="yes" xml:space="preserve">
          <source>It matches! There&amp;rsquo;s no value to add to, so the program stops and returns the &lt;code&gt;None&lt;/code&gt; value on the right side of &lt;code&gt;=&amp;gt;&lt;/code&gt;. Because the first arm matched, no other arms are compared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="843b41eaa3d5b0c22ed8a08ff3f89c4230955bbd" translate="yes" xml:space="preserve">
          <source>It may be possible to define the closure later:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7626a2cf86a0ef32fb36f30c95b230833af23f10" translate="yes" xml:space="preserve">
          <source>It may seem counter-intuitive that the field of a pinned struct might not be pinned, but that is actually the easiest choice: if a &lt;code&gt;Pin&amp;lt;&amp;amp;mut Field&amp;gt;&lt;/code&gt; is never created, nothing can go wrong! So, if you decide that some field does not have structural pinning, all you have to ensure is that you never create a pinned reference to that field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bb0d24f6b4149955502e6e8ad32374412376163" translate="yes" xml:space="preserve">
          <source>It might seem like the paths we&amp;rsquo;ve written to call functions so far are inconveniently long and repetitive. For example, in Listing 7-7, whether we chose the absolute or relative path to the &lt;code&gt;add_to_waitlist&lt;/code&gt; function, every time we wanted to call &lt;code&gt;add_to_waitlist&lt;/code&gt; we had to specify &lt;code&gt;front_of_house&lt;/code&gt; and &lt;code&gt;hosting&lt;/code&gt; too. Fortunately, there&amp;rsquo;s a way to simplify this process. We can bring a path into a scope once and then call the items in that path as if they&amp;rsquo;re local items with the &lt;code&gt;use&lt;/code&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="805aa02c515eaa318de6b78a094bce98b8c53d4d" translate="yes" xml:space="preserve">
          <source>It moves the input &lt;code&gt;x&lt;/code&gt; passed to the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3e5a16652e3acc5312ad5ba06a9e285d4162164" translate="yes" xml:space="preserve">
          <source>It must not have any associated constants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ed9fe4f614f6746c16c9c39cbffbf6f903c7ae2" translate="yes" xml:space="preserve">
          <source>It must not require &lt;code&gt;Self: Sized&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f3447254df95470f3130af039bc15cf58155424" translate="yes" xml:space="preserve">
          <source>It operates on raw pointers instead of references. When references are available, &lt;a href=&quot;../mem/fn.swap&quot;&gt;&lt;code&gt;mem::swap&lt;/code&gt;&lt;/a&gt; should be preferred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15a360bcd6063536513f56852862c8efa63c2070" translate="yes" xml:space="preserve">
          <source>It remains valid until it goes &lt;em&gt;out of scope&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28129f615360627e84e6c1c9dbfcb777498ce57b" translate="yes" xml:space="preserve">
          <source>It replaces this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a96e5b042b30c122375f53b68b92a35b6c66cd8b" translate="yes" xml:space="preserve">
          <source>It represents a separator that designates that a path starts from root.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="110275e5135057ece97674a5c23f292001714824" translate="yes" xml:space="preserve">
          <source>It sometimes happens that you have unused type parameters which indicate what type of data a struct is &quot;tied&quot; to, even though that data is not actually found in the struct itself. Here is an example where this arises with &lt;a href=&quot;../../book/ch19-01-unsafe-rust#using-extern-functions-to-call-external-code&quot;&gt;FFI&lt;/a&gt;. The foreign interface uses handles of type &lt;code&gt;*mut ()&lt;/code&gt; to refer to Rust values of different types. We track the Rust type using a phantom type parameter on the struct &lt;code&gt;ExternalResource&lt;/code&gt; which wraps a handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8a5407ac4250c5a13730093f7af0747e49f3547" translate="yes" xml:space="preserve">
          <source>It takes ownership of one weak count. In case a &lt;a href=&quot;../ptr/fn.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; is passed, a dangling &lt;a href=&quot;struct.weak&quot;&gt;&lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e869ff63d6d4b946c2cdd219b436de253a41746" translate="yes" xml:space="preserve">
          <source>It turns out that it is actually up to the author of the data structure to decide whether the pinned projection for a particular field turns &lt;code&gt;Pin&amp;lt;&amp;amp;mut Struct&amp;gt;&lt;/code&gt; into &lt;code&gt;Pin&amp;lt;&amp;amp;mut Field&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;amp;mut Field&lt;/code&gt;. There are some constraints though, and the most important constraint is &lt;em&gt;consistency&lt;/em&gt;: every field can be &lt;em&gt;either&lt;/em&gt; projected to a pinned reference, &lt;em&gt;or&lt;/em&gt; have pinning removed as part of the projection. If both are done for the same field, that will likely be unsound!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43f35f0c065fabfd41f89d1318ce0f42a18d0c80" translate="yes" xml:space="preserve">
          <source>It wasn&amp;rsquo;t always so clear, but the Rust programming language is fundamentally about &lt;em&gt;empowerment&lt;/em&gt;: no matter what kind of code you are writing now, Rust empowers you to reach farther, to program with confidence in a wider variety of domains than you did before.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c52d18214990d951c10878c00ac04808b86559" translate="yes" xml:space="preserve">
          <source>It will also return an error if it encounters while reading an error of a kind other than &lt;a href=&quot;../io/enum.errorkind#variant.Interrupted&quot;&gt;&lt;code&gt;ErrorKind::Interrupted&lt;/code&gt;&lt;/a&gt;, or if the contents of the file are not valid UTF-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88d7df68d5037684c00152095cea66d62196594d" translate="yes" xml:space="preserve">
          <source>It will also return an error if it encounters while reading an error of a kind other than &lt;a href=&quot;../io/enum.errorkind#variant.Interrupted&quot;&gt;&lt;code&gt;ErrorKind::Interrupted&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea8e67a12d7988664bc05e18e9798989cd3eb135" translate="yes" xml:space="preserve">
          <source>It will be implemented by associated &lt;code&gt;Searcher&lt;/code&gt; types of the &lt;code&gt;Pattern&lt;/code&gt; trait if the pattern supports searching for it from the back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f81a8ca5067c3c3b4399b6129a830805c0cc0ff" translate="yes" xml:space="preserve">
          <source>It will be implemented by associated &lt;code&gt;Searcher&lt;/code&gt; types of the &lt;code&gt;Pattern&lt;/code&gt; trait.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ec53dce211a7944d162428d571097183435ce6f" translate="yes" xml:space="preserve">
          <source>It will drop down as close as possible to the length but the allocator may still inform the &lt;code&gt;VecDeque&lt;/code&gt; that there is space for a few more elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d0e16f9adb2110bbd3e927ea4577168391e9b74" translate="yes" xml:space="preserve">
          <source>It will drop down as close as possible to the length but the allocator may still inform the vector that there is space for a few more elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="583613916c43b1fe106e05c39ca4ce6da47ce68b" translate="yes" xml:space="preserve">
          <source>It will never return &lt;a href=&quot;../../../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d1d8fbd49b71b116c5d704cf7c49ee955c939a" translate="yes" xml:space="preserve">
          <source>It would also be appropriate to call &lt;code&gt;unwrap&lt;/code&gt; when you have some other logic that ensures the &lt;code&gt;Result&lt;/code&gt; will have an &lt;code&gt;Ok&lt;/code&gt; value, but the logic isn&amp;rsquo;t something the compiler understands. You&amp;rsquo;ll still have a &lt;code&gt;Result&lt;/code&gt; value that you need to handle: whatever operation you&amp;rsquo;re calling still has the possibility of failing in general, even though it&amp;rsquo;s logically impossible in your particular situation. If you can ensure by manually inspecting the code that you&amp;rsquo;ll never have an &lt;code&gt;Err&lt;/code&gt; variant, it&amp;rsquo;s perfectly acceptable to call &lt;code&gt;unwrap&lt;/code&gt;. Here&amp;rsquo;s an example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="281e22ba57501fc7d3d70b8f1f8f4bfbc5dcf1a5" translate="yes" xml:space="preserve">
          <source>It would make it more difficult for unsafe code to correctly manipulate a &lt;code&gt;Vec&lt;/code&gt;. The contents of a &lt;code&gt;Vec&lt;/code&gt; wouldn't have a stable address if it were only moved, and it would be more difficult to determine if a &lt;code&gt;Vec&lt;/code&gt; had actually allocated memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8927c51bfbab721165d17b97848a237b8ec4da60" translate="yes" xml:space="preserve">
          <source>It would penalize the general case, incurring an additional branch on every access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6be8378a582020df10360545b9470cc00244ca7" translate="yes" xml:space="preserve">
          <source>It wouldn't work. This is because the size of a &lt;code&gt;List&lt;/code&gt; depends on how many elements are in the list, and so we don't know how much memory to allocate for a &lt;code&gt;Cons&lt;/code&gt;. By introducing a &lt;code&gt;Box&lt;/code&gt;, which has a defined size, we know how big &lt;code&gt;Cons&lt;/code&gt; needs to be.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4998da21c6a9914c8ce4ea9184bccf6c0873e7d" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;d be nice to be able to print an instance of &lt;code&gt;Rectangle&lt;/code&gt; while we&amp;rsquo;re debugging our program and see the values for all its fields. Listing 5-11 tries using the &lt;code&gt;println!&lt;/code&gt; macro as we have used in previous chapters. This won&amp;rsquo;t work, however.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fd4ff89cd3ed9767f9bb50021655606612821c0" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a panoply of Rust features with something for everyone! Let&amp;rsquo;s dive in!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f4a91582fca2b4ddf611bb05db0236c35e6a95d" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s advisable to have your code panic when it&amp;rsquo;s possible that your code could end up in a bad state. In this context, a &lt;em&gt;bad state&lt;/em&gt; is when some assumption, guarantee, contract, or invariant has been broken, such as when invalid values, contradictory values, or missing values are passed to your code&amp;mdash;plus one or more of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d4af836f0cd460a3ac351996453b851549fe52a" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s also worth noting that the condition in this code &lt;em&gt;must&lt;/em&gt; be a &lt;code&gt;bool&lt;/code&gt;. If the condition isn&amp;rsquo;t a &lt;code&gt;bool&lt;/code&gt;, we&amp;rsquo;ll get an error. For example, try running the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52fc1028632f974c83efdc9f4200e35b249610e" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s been a long journey, but we&amp;rsquo;ve reached the end of the book. In this chapter, we&amp;rsquo;ll build one more project together to demonstrate some of the concepts we covered in the final chapters, as well as recap some earlier lessons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1024ef58107465d0b2d166ab80e88f189d22f3a3" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s common to check whether a particular key has a value and, if it doesn&amp;rsquo;t, insert a value for it. Hash maps have a special API for this called &lt;code&gt;entry&lt;/code&gt; that takes the key you want to check as a parameter. The return value of the &lt;code&gt;entry&lt;/code&gt; method is an enum called &lt;code&gt;Entry&lt;/code&gt; that represents a value that might or might not exist. Let&amp;rsquo;s say we want to check whether the key for the Yellow team has a value associated with it. If it doesn&amp;rsquo;t, we want to insert the value 50, and the same for the Blue team. Using the &lt;code&gt;entry&lt;/code&gt; API, the code looks like Listing 8-25.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b254f401bbc453696a95036f25cc6c8b9f205677" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s important that we get compile-time errors when we attempt to change a value that we previously designated as immutable because this very situation can lead to bugs. If one part of our code operates on the assumption that a value will never change and another part of our code changes that value, it&amp;rsquo;s possible that the first part of the code won&amp;rsquo;t do what it was designed to do. The cause of this kind of bug can be difficult to track down after the fact, especially when the second piece of code changes the value only &lt;em&gt;sometimes&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cdb0b8313d7ae007e7e125bdfd991a30a8e291c" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s important to understand that &lt;code&gt;unsafe&lt;/code&gt; doesn&amp;rsquo;t turn off the borrow checker or disable any other of Rust&amp;rsquo;s safety checks: if you use a reference in unsafe code, it will still be checked. The &lt;code&gt;unsafe&lt;/code&gt; keyword only gives you access to these four features that are then not checked by the compiler for memory safety. You&amp;rsquo;ll still get some degree of safety inside of an unsafe block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8deea23b26cb7cf37f9d9061e806bcfc7feaa092" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s impossible for Rust to determine how many values in the tuple to ignore before matching a value with &lt;code&gt;second&lt;/code&gt; and then how many further values to ignore thereafter. This code could mean that we want to ignore &lt;code&gt;2&lt;/code&gt;, bind &lt;code&gt;second&lt;/code&gt; to &lt;code&gt;4&lt;/code&gt;, and then ignore &lt;code&gt;8&lt;/code&gt;, &lt;code&gt;16&lt;/code&gt;, and &lt;code&gt;32&lt;/code&gt;; or that we want to ignore &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;4&lt;/code&gt;, bind &lt;code&gt;second&lt;/code&gt; to &lt;code&gt;8&lt;/code&gt;, and then ignore &lt;code&gt;16&lt;/code&gt; and &lt;code&gt;32&lt;/code&gt;; and so forth. The variable name &lt;code&gt;second&lt;/code&gt; doesn&amp;rsquo;t mean anything special to Rust, so we get a compiler error because using &lt;code&gt;..&lt;/code&gt; in two places like this is ambiguous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b30b0ad80edd47c563a2e1776ed2c849ecd649e3" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s often useful for a program to evaluate a condition within a loop. While the condition is true, the loop runs. When the condition ceases to be true, the program calls &lt;code&gt;break&lt;/code&gt;, stopping the loop. This loop type could be implemented using a combination of &lt;code&gt;loop&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, and &lt;code&gt;break&lt;/code&gt;; you could try that now in a program, if you&amp;rsquo;d like.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a4b6828f8495332d03de5c3d6e1db7c761b6380" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s often useful to create a new instance of a struct that uses most of an old instance&amp;rsquo;s values but changes some. You&amp;rsquo;ll do this using &lt;em&gt;struct update syntax&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="723b901f30cea9edf0e74e2f7413d0b6d6d9f846" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s often useful to execute a block of code more than once. For this task, Rust provides several &lt;em&gt;loops&lt;/em&gt;. A loop runs through the code inside the loop body to the end and then starts immediately back at the beginning. To experiment with loops, let&amp;rsquo;s make a new project called &lt;em&gt;loops&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="753665469cbfa717250694f7de09ac1968d71cfc" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible for structs to store references to data owned by something else, but to do so requires the use of &lt;em&gt;lifetimes&lt;/em&gt;, a Rust feature that we&amp;rsquo;ll discuss in Chapter 10. Lifetimes ensure that the data referenced by a struct is valid for as long as the struct is. Let&amp;rsquo;s say you try to store a reference in a struct without specifying lifetimes, like this, which won&amp;rsquo;t work:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1330d73ba4baef219cde7c8056164e7a0d0b3b12" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to return multiple values using a tuple, as shown in Listing 4-5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd54062a6d4a18f88f50f4130b2d691d87e7c906" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s useful to discuss strings in the context of collections because strings are implemented as a collection of bytes, plus some methods to provide useful functionality when those bytes are interpreted as text. In this section, we&amp;rsquo;ll talk about the operations on &lt;code&gt;String&lt;/code&gt; that every collection type has, such as creating, updating, and reading. We&amp;rsquo;ll also discuss the ways in which &lt;code&gt;String&lt;/code&gt; is different from the other collections, namely how indexing into a &lt;code&gt;String&lt;/code&gt; is complicated by the differences between how people and computers interpret &lt;code&gt;String&lt;/code&gt; data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a5c61453f5e990492626e9bb6d14bf2f43a9aa" translate="yes" xml:space="preserve">
          <source>It's also important to note that the Rust compiler can generally determine the lifetime by itself. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33ba7241cc90a10e5fee095fa049c987fe61e308" translate="yes" xml:space="preserve">
          <source>It's common for people who haven't used iterators a lot to use a &lt;code&gt;for&lt;/code&gt; loop with a list of things to build up a result. Those can be turned into &lt;code&gt;fold()&lt;/code&gt;s:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba017d93d6349943ce3ed0d06f842a0f9c987ffa" translate="yes" xml:space="preserve">
          <source>It's common to instead use destructuring on the argument to strip away one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="686ffc7f644232912f8eff3ec52197d230c78db4" translate="yes" xml:space="preserve">
          <source>It's important to note that in these two examples, the only difference is whether you are allowed to access &lt;code&gt;x&lt;/code&gt; after the assignment. Under the hood, both a copy and a move can result in bits being copied in memory, although this is sometimes optimized away.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf0d2bc6515048c1222c1faf89f4b7dfbf926400" translate="yes" xml:space="preserve">
          <source>It's important to remember that &lt;a href=&quot;../char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt; represents a Unicode Scalar Value, and may not match your idea of what a 'character' is. Iteration over grapheme clusters may be what you actually want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4da28ef521125e0c1be74a0e5b5fccf5a9444a6" translate="yes" xml:space="preserve">
          <source>It's important to remember that &lt;a href=&quot;char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt; represents a Unicode Scalar Value, and may not match your idea of what a 'character' is. Iteration over grapheme clusters may be what you actually want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34560c82a9fb0dc71d1acee3f7d70c175383bc7b" translate="yes" xml:space="preserve">
          <source>It's invalid to directly import methods belonging to a trait or concrete type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4ea1a04986d9525398a48411915463d79b08630" translate="yes" xml:space="preserve">
          <source>It's more common for &lt;code&gt;inspect()&lt;/code&gt; to be used as a debugging tool than to exist in your final code, but applications may find it useful in certain situations when errors need to be logged before being discarded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f6fd4d024f3a27229b0326aaec954fc7e7267f9" translate="yes" xml:space="preserve">
          <source>It's only possible to directly instantiate a struct using struct literal syntax when all of its fields are visible to you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc2a391a320094b486e218290333929f21b82924" translate="yes" xml:space="preserve">
          <source>It's undefined behavior if global allocators unwind. This restriction may be lifted in the future, but currently a panic from any of these functions may lead to memory unsafety.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d66c69bdab0c4f62a7abada1a3e2fdee354d75" translate="yes" xml:space="preserve">
          <source>It's very common then to put a &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; inside shared pointer types to reintroduce mutability:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21df73947a06d77d2ad5fe166c8ddfcdc53a6fdb" translate="yes" xml:space="preserve">
          <source>Italiano</source>
          <target state="translated">Italiano</target>
        </trans-unit>
        <trans-unit id="1927b99b7203a5d61bb78b1a858edbf1a4446227" translate="yes" xml:space="preserve">
          <source>Item declarations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d25b5d1b6d98c7d090ca3609aca11ae2815fa0" translate="yes" xml:space="preserve">
          <source>Items</source>
          <target state="translated">Items</target>
        </trans-unit>
        <trans-unit id="e94f4a33f00d601e0668e3316c1f5baec10b371b" translate="yes" xml:space="preserve">
          <source>Items are entirely determined at compile-time, generally remain fixed during execution, and may reside in read-only memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddf93f2b738152017441b72f8223700a6c86d570" translate="yes" xml:space="preserve">
          <source>Items are missing in a trait implementation. Erroneous code example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8b3f0ebaa39e2f70c17e1cb57e9f0ef34b2a7cd" translate="yes" xml:space="preserve">
          <source>Items associated with a trait do not need to be defined in the trait, but they may be. If the trait provides a definition, then this definition acts as a default for any implementation which does not override it. If it does not, then any implementation must provide a definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d525f8eb402a25c60f5c5ba9759986177ee5a851" translate="yes" xml:space="preserve">
          <source>Items can be imported without binding to a name by using an underscore with the form &lt;code&gt;use path as _&lt;/code&gt;. This is particularly useful to import a trait so that its methods may be used without importing the trait's symbol, for example if the trait's symbol may conflict with another symbol. Another example is to link an external crate without importing its name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d80427c3d2c84e1095c0f47d752a2b536590da04" translate="yes" xml:space="preserve">
          <source>Items defined in a module or implementation have a &lt;em&gt;canonical path&lt;/em&gt; that corresponds to where within its crate it is defined. All other paths to these items are aliases. The canonical path is defined as a &lt;em&gt;path prefix&lt;/em&gt; appended by the path segment the item itself defines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dff50658b0fc9891bf43ec3aa222a12df699a4f5" translate="yes" xml:space="preserve">
          <source>Items inside functions are basically just like top-level items, except that they can only be used from the function they are in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="091b8d78ec3176b66348479ab0a7eba113756aa7" translate="yes" xml:space="preserve">
          <source>Iter</source>
          <target state="translated">Iter</target>
        </trans-unit>
        <trans-unit id="562356f4191fd96292159c9a51f1502a656a766d" translate="yes" xml:space="preserve">
          <source>Iter::all</source>
          <target state="translated">Iter::all</target>
        </trans-unit>
        <trans-unit id="598e9d1442d2d90b30d41f52dc9f35d312a9ea85" translate="yes" xml:space="preserve">
          <source>Iter::any</source>
          <target state="translated">Iter::any</target>
        </trans-unit>
        <trans-unit id="11c24b7b71f44b4c32bd475993cf94651f69ef7b" translate="yes" xml:space="preserve">
          <source>Iter::as_path</source>
          <target state="translated">Iter::as_path</target>
        </trans-unit>
        <trans-unit id="b00470be46e8b1319d806bf1fedc19612d599118" translate="yes" xml:space="preserve">
          <source>Iter::as_ref</source>
          <target state="translated">Iter::as_ref</target>
        </trans-unit>
        <trans-unit id="1c4a85c9060fc0533851d2ebb18b0944dec20504" translate="yes" xml:space="preserve">
          <source>Iter::as_slice</source>
          <target state="translated">Iter::as_slice</target>
        </trans-unit>
        <trans-unit id="cd753ac2ff5d2f5e373d6da3f28eb6cc4f4a12da" translate="yes" xml:space="preserve">
          <source>Iter::borrow</source>
          <target state="translated">Iter::borrow</target>
        </trans-unit>
        <trans-unit id="ccae721db6c0b80ead456e39e15a574d91f05503" translate="yes" xml:space="preserve">
          <source>Iter::borrow_mut</source>
          <target state="translated">Iter::borrow_mut</target>
        </trans-unit>
        <trans-unit id="9e9e1cc006a1a0c230f182d60dc3ae25867fa96b" translate="yes" xml:space="preserve">
          <source>Iter::by_ref</source>
          <target state="translated">Iter::by_ref</target>
        </trans-unit>
        <trans-unit id="40958308a6a00b30f0186ac470a90b4263782276" translate="yes" xml:space="preserve">
          <source>Iter::chain</source>
          <target state="translated">Iter::chain</target>
        </trans-unit>
        <trans-unit id="a16e2afb6a204e2c61484cc43715d2838e449cea" translate="yes" xml:space="preserve">
          <source>Iter::clone</source>
          <target state="translated">Iter::clone</target>
        </trans-unit>
        <trans-unit id="d33632634125b5bfb914d7696031de5e4050211f" translate="yes" xml:space="preserve">
          <source>Iter::clone_from</source>
          <target state="translated">Iter::clone_from</target>
        </trans-unit>
        <trans-unit id="c521a7d4341dba591b54fa4bc0805ada3d50f399" translate="yes" xml:space="preserve">
          <source>Iter::clone_into</source>
          <target state="translated">Iter::clone_into</target>
        </trans-unit>
        <trans-unit id="566bebbe7d115865fba84687df984d4d09e626cd" translate="yes" xml:space="preserve">
          <source>Iter::cloned</source>
          <target state="translated">Iter::cloned</target>
        </trans-unit>
        <trans-unit id="49fa3b568d34193bae851426004f13121d5dfbf5" translate="yes" xml:space="preserve">
          <source>Iter::cmp</source>
          <target state="translated">Iter::cmp</target>
        </trans-unit>
        <trans-unit id="8a894f2ab589ed2151abc86111334156ce8c99e0" translate="yes" xml:space="preserve">
          <source>Iter::collect</source>
          <target state="translated">Iter::collect</target>
        </trans-unit>
        <trans-unit id="d84a1dc76269ab42456219572352b77058751d5b" translate="yes" xml:space="preserve">
          <source>Iter::copied</source>
          <target state="translated">Iter::copied</target>
        </trans-unit>
        <trans-unit id="e3337214a7610ab020e239ae370944a464cce517" translate="yes" xml:space="preserve">
          <source>Iter::count</source>
          <target state="translated">Iter::count</target>
        </trans-unit>
        <trans-unit id="e2ed51e9cb2227202dee5fc9ebaab5c5c44fe8c9" translate="yes" xml:space="preserve">
          <source>Iter::cycle</source>
          <target state="translated">Iter::cycle</target>
        </trans-unit>
        <trans-unit id="b1eb95f6c453fe7f1cf4909e898eaf13d79e9e40" translate="yes" xml:space="preserve">
          <source>Iter::enumerate</source>
          <target state="translated">Iter::enumerate</target>
        </trans-unit>
        <trans-unit id="f2edb3630485a9830839e0b2bd5394c408a64499" translate="yes" xml:space="preserve">
          <source>Iter::eq</source>
          <target state="translated">Iter::eq</target>
        </trans-unit>
        <trans-unit id="f27a886f8dd8072bf872054aa4fa798de4583d5b" translate="yes" xml:space="preserve">
          <source>Iter::filter</source>
          <target state="translated">Iter::filter</target>
        </trans-unit>
        <trans-unit id="9f085b504d73e51e20340f0c14d7d3ec20d8c09e" translate="yes" xml:space="preserve">
          <source>Iter::filter_map</source>
          <target state="translated">Iter::filter_map</target>
        </trans-unit>
        <trans-unit id="482d391704ccfc6551b38406a5c7e4a07c0b7dc9" translate="yes" xml:space="preserve">
          <source>Iter::find</source>
          <target state="translated">Iter::find</target>
        </trans-unit>
        <trans-unit id="cf9a0662f2645651e697db323db99571753cf8fe" translate="yes" xml:space="preserve">
          <source>Iter::find_map</source>
          <target state="translated">Iter::find_map</target>
        </trans-unit>
        <trans-unit id="1afb3fc5d230f5ed3a998d62e9235b71e0c70e53" translate="yes" xml:space="preserve">
          <source>Iter::flat_map</source>
          <target state="translated">Iter::flat_map</target>
        </trans-unit>
        <trans-unit id="233b4826a12d699f0512cb0d95df19aaab9dd4ca" translate="yes" xml:space="preserve">
          <source>Iter::flatten</source>
          <target state="translated">Iter::flatten</target>
        </trans-unit>
        <trans-unit id="7f47a4f5f722efa8de94b21b465ada55ddfa53c5" translate="yes" xml:space="preserve">
          <source>Iter::fmt</source>
          <target state="translated">Iter::fmt</target>
        </trans-unit>
        <trans-unit id="2d150a20937e50aeb5fc3c33739f77c30ca57b98" translate="yes" xml:space="preserve">
          <source>Iter::fold</source>
          <target state="translated">Iter::fold</target>
        </trans-unit>
        <trans-unit id="9ee0b5e31b874c88b499b0f63ac35f2da29dcbb1" translate="yes" xml:space="preserve">
          <source>Iter::for_each</source>
          <target state="translated">Iter::for_each</target>
        </trans-unit>
        <trans-unit id="fb5570128f1baf2cde42d918eac6ebeb0e442ac8" translate="yes" xml:space="preserve">
          <source>Iter::from</source>
          <target state="translated">Iter::from</target>
        </trans-unit>
        <trans-unit id="840450e607dae83abf8fa2b370c6fb1be77c898b" translate="yes" xml:space="preserve">
          <source>Iter::fuse</source>
          <target state="translated">Iter::fuse</target>
        </trans-unit>
        <trans-unit id="23bdea91405b4acdaeed6b4d07b8c58d93cbd9ee" translate="yes" xml:space="preserve">
          <source>Iter::ge</source>
          <target state="translated">Iter::ge</target>
        </trans-unit>
        <trans-unit id="47e26389513b5fb9c312c18d98dfcb98e224fec9" translate="yes" xml:space="preserve">
          <source>Iter::gt</source>
          <target state="translated">Iter::gt</target>
        </trans-unit>
        <trans-unit id="ce4e0788e86ba75e4d44e53b0367cc1f2f04da63" translate="yes" xml:space="preserve">
          <source>Iter::inspect</source>
          <target state="translated">Iter::inspect</target>
        </trans-unit>
        <trans-unit id="84b381fb810d521e23ba1af41b818ce7d2699ac5" translate="yes" xml:space="preserve">
          <source>Iter::into</source>
          <target state="translated">Iter::into</target>
        </trans-unit>
        <trans-unit id="0ec8b2c7e9866e4932264828ae5ae53473579659" translate="yes" xml:space="preserve">
          <source>Iter::into_iter</source>
          <target state="translated">Iter::into_iter</target>
        </trans-unit>
        <trans-unit id="fef12e1b5037aa29137e1d32a9384c2c3b1a9d46" translate="yes" xml:space="preserve">
          <source>Iter::is_empty</source>
          <target state="translated">Iter::is_empty</target>
        </trans-unit>
        <trans-unit id="c845a405850165bfe2d3ee71bdc1256c40185ebf" translate="yes" xml:space="preserve">
          <source>Iter::is_sorted</source>
          <target state="translated">Iter::is_sorted</target>
        </trans-unit>
        <trans-unit id="12877f076c9cd1f4b18bb0043ef86e4ecaae9828" translate="yes" xml:space="preserve">
          <source>Iter::is_sorted_by</source>
          <target state="translated">Iter::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="20997a51f1e8798fb3f3c383fb60434b3e8cb926" translate="yes" xml:space="preserve">
          <source>Iter::is_sorted_by_key</source>
          <target state="translated">Iter::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="b86d7151989059491e48352d38e9c3a298578cd1" translate="yes" xml:space="preserve">
          <source>Iter::last</source>
          <target state="translated">Iter::last</target>
        </trans-unit>
        <trans-unit id="be8b408760eecdbf28c58c97d461c17d4700ffae" translate="yes" xml:space="preserve">
          <source>Iter::le</source>
          <target state="translated">Iter::le</target>
        </trans-unit>
        <trans-unit id="0c6655f000bb8d852e4c2ebc7d52bd9826150f55" translate="yes" xml:space="preserve">
          <source>Iter::len</source>
          <target state="translated">Iter::len</target>
        </trans-unit>
        <trans-unit id="f5f969c8865a706d946ba8d9640ca2c5a0bcf40e" translate="yes" xml:space="preserve">
          <source>Iter::lt</source>
          <target state="translated">Iter::lt</target>
        </trans-unit>
        <trans-unit id="bc0be7886235deb5cb7d836720591efa37538450" translate="yes" xml:space="preserve">
          <source>Iter::map</source>
          <target state="translated">Iter::map</target>
        </trans-unit>
        <trans-unit id="d7746cc600a78a4b80fd8b858ffaf0fe418f31a5" translate="yes" xml:space="preserve">
          <source>Iter::max</source>
          <target state="translated">Iter::max</target>
        </trans-unit>
        <trans-unit id="bdd59dfbd93f93e5159fb6bb4b959f6208971864" translate="yes" xml:space="preserve">
          <source>Iter::max_by</source>
          <target state="translated">Iter::max_by</target>
        </trans-unit>
        <trans-unit id="f2c43a9070f91fd7b274911cb1767f64abad6d73" translate="yes" xml:space="preserve">
          <source>Iter::max_by_key</source>
          <target state="translated">Iter::max_by_key</target>
        </trans-unit>
        <trans-unit id="4953889b3e4b5985acf4e330c37581c731343efb" translate="yes" xml:space="preserve">
          <source>Iter::min</source>
          <target state="translated">Iter::min</target>
        </trans-unit>
        <trans-unit id="a4a384bc464b64ebda76930693b161019c57569b" translate="yes" xml:space="preserve">
          <source>Iter::min_by</source>
          <target state="translated">Iter::min_by</target>
        </trans-unit>
        <trans-unit id="c1b4af4d4490229831ed89e5d2564fd1a077b311" translate="yes" xml:space="preserve">
          <source>Iter::min_by_key</source>
          <target state="translated">Iter::min_by_key</target>
        </trans-unit>
        <trans-unit id="16cc992c33d00ce5220249a5220c02b65f8e4e1b" translate="yes" xml:space="preserve">
          <source>Iter::ne</source>
          <target state="translated">Iter::ne</target>
        </trans-unit>
        <trans-unit id="5726d1319a6927ed8641e6153ccd76700e05b49d" translate="yes" xml:space="preserve">
          <source>Iter::next</source>
          <target state="translated">Iter::next</target>
        </trans-unit>
        <trans-unit id="73c0a4abe0cf04469092e41f4f2fe0440e2dba4e" translate="yes" xml:space="preserve">
          <source>Iter::next_back</source>
          <target state="translated">Iter::next_back</target>
        </trans-unit>
        <trans-unit id="71ecfc9eea70a0501cbf73f369a815090a015495" translate="yes" xml:space="preserve">
          <source>Iter::nth</source>
          <target state="translated">Iter::nth</target>
        </trans-unit>
        <trans-unit id="c585764b69dade897771dda3b24e4c7fa05c8894" translate="yes" xml:space="preserve">
          <source>Iter::nth_back</source>
          <target state="translated">Iter::nth_back</target>
        </trans-unit>
        <trans-unit id="f0d7a323f948a119f8ad33ad48acc983a8d68fd3" translate="yes" xml:space="preserve">
          <source>Iter::partial_cmp</source>
          <target state="translated">Iter::partial_cmp</target>
        </trans-unit>
        <trans-unit id="d508da27672fef4e1401a3134f511ffdb76349df" translate="yes" xml:space="preserve">
          <source>Iter::partition</source>
          <target state="translated">Iter::partition</target>
        </trans-unit>
        <trans-unit id="b7e23f6eab45233e924f47870e7155a7d93ac461" translate="yes" xml:space="preserve">
          <source>Iter::peekable</source>
          <target state="translated">Iter::peekable</target>
        </trans-unit>
        <trans-unit id="c6069463aa7c4524fc50e7f8524606571f2479a2" translate="yes" xml:space="preserve">
          <source>Iter::position</source>
          <target state="translated">Iter::position</target>
        </trans-unit>
        <trans-unit id="49a5d1c1b47f8042ecc9f92065cab6ee7c7e1cc2" translate="yes" xml:space="preserve">
          <source>Iter::product</source>
          <target state="translated">Iter::product</target>
        </trans-unit>
        <trans-unit id="226d371b07f791bdc3b75f6182aa99ed768f3c2f" translate="yes" xml:space="preserve">
          <source>Iter::rev</source>
          <target state="translated">Iter::rev</target>
        </trans-unit>
        <trans-unit id="0e61327392e92ba0988cedb744e914baec8d327a" translate="yes" xml:space="preserve">
          <source>Iter::rfind</source>
          <target state="translated">Iter::rfind</target>
        </trans-unit>
        <trans-unit id="436b05314063cdc717e75ffae43d2197b71db43d" translate="yes" xml:space="preserve">
          <source>Iter::rfold</source>
          <target state="translated">Iter::rfold</target>
        </trans-unit>
        <trans-unit id="ff90d1def598911fc5bfcb191f5cc4a07e4d1561" translate="yes" xml:space="preserve">
          <source>Iter::rposition</source>
          <target state="translated">Iter::rposition</target>
        </trans-unit>
        <trans-unit id="e85d8810cc5f5069c23f9a8039d15b9337b41c52" translate="yes" xml:space="preserve">
          <source>Iter::scan</source>
          <target state="translated">Iter::scan</target>
        </trans-unit>
        <trans-unit id="02418ffbb8d48f42372da15dae730f8a6afc35b5" translate="yes" xml:space="preserve">
          <source>Iter::size_hint</source>
          <target state="translated">Iter::size_hint</target>
        </trans-unit>
        <trans-unit id="4369939a1ce2e9f84ffb9bdab8e42a905e51bdaa" translate="yes" xml:space="preserve">
          <source>Iter::skip</source>
          <target state="translated">Iter::skip</target>
        </trans-unit>
        <trans-unit id="366d06ce202700d06e1162480b372fb9fe5f9f48" translate="yes" xml:space="preserve">
          <source>Iter::skip_while</source>
          <target state="translated">Iter::skip_while</target>
        </trans-unit>
        <trans-unit id="32cde76eb29f240c9e4df839757b9c8dee038962" translate="yes" xml:space="preserve">
          <source>Iter::step_by</source>
          <target state="translated">Iter::step_by</target>
        </trans-unit>
        <trans-unit id="17f9c830155902444763f7911cd38ce5759e0af8" translate="yes" xml:space="preserve">
          <source>Iter::sum</source>
          <target state="translated">Iter::sum</target>
        </trans-unit>
        <trans-unit id="dcb50b3349dc76f0b288cc8da46262ff9851d3ff" translate="yes" xml:space="preserve">
          <source>Iter::take</source>
          <target state="translated">Iter::take</target>
        </trans-unit>
        <trans-unit id="cde2481711540ccdcb763463f9a8e48ead5b8c11" translate="yes" xml:space="preserve">
          <source>Iter::take_while</source>
          <target state="translated">Iter::take_while</target>
        </trans-unit>
        <trans-unit id="7be8f868236c0bacde7fa60a245f689dbd73f4b1" translate="yes" xml:space="preserve">
          <source>Iter::to_owned</source>
          <target state="translated">Iter::to_owned</target>
        </trans-unit>
        <trans-unit id="a61b9bdc8bf2d65e849104ea9f9ddb34b2e438f1" translate="yes" xml:space="preserve">
          <source>Iter::try_fold</source>
          <target state="translated">Iter::try_fold</target>
        </trans-unit>
        <trans-unit id="a376d6605801d1f94fdc5bc8378bfb7d3bf0f291" translate="yes" xml:space="preserve">
          <source>Iter::try_for_each</source>
          <target state="translated">Iter::try_for_each</target>
        </trans-unit>
        <trans-unit id="4742b7e7ce2dc63b3cde1feac9ff7841b386d97b" translate="yes" xml:space="preserve">
          <source>Iter::try_from</source>
          <target state="translated">Iter::try_from</target>
        </trans-unit>
        <trans-unit id="305f66fe9d6f3bd4da9108c4fb964e6d3d7ae558" translate="yes" xml:space="preserve">
          <source>Iter::try_into</source>
          <target state="translated">Iter::try_into</target>
        </trans-unit>
        <trans-unit id="28e819d5eb5da6c1ca2f6898d2a9682f6bd3113c" translate="yes" xml:space="preserve">
          <source>Iter::try_rfold</source>
          <target state="translated">Iter::try_rfold</target>
        </trans-unit>
        <trans-unit id="5431b8f7a2f8d57a1b9712ca70970d17da1898b4" translate="yes" xml:space="preserve">
          <source>Iter::type_id</source>
          <target state="translated">Iter::type_id</target>
        </trans-unit>
        <trans-unit id="ba93aa487eb63805115eee9259cd946bbcc81dc7" translate="yes" xml:space="preserve">
          <source>Iter::unzip</source>
          <target state="translated">Iter::unzip</target>
        </trans-unit>
        <trans-unit id="2eb63393ea4d4a003b71033749175816e8e34fdf" translate="yes" xml:space="preserve">
          <source>Iter::zip</source>
          <target state="translated">Iter::zip</target>
        </trans-unit>
        <trans-unit id="685f18edffd1064c20f2b29242001a402ffdb3fc" translate="yes" xml:space="preserve">
          <source>IterMut</source>
          <target state="translated">IterMut</target>
        </trans-unit>
        <trans-unit id="d15ac12246998b60e4436683e1d97cc9ae701e03" translate="yes" xml:space="preserve">
          <source>IterMut::all</source>
          <target state="translated">IterMut::all</target>
        </trans-unit>
        <trans-unit id="c1e555b3dfd69f8056e360cb14a2a01feb0013e6" translate="yes" xml:space="preserve">
          <source>IterMut::any</source>
          <target state="translated">IterMut::any</target>
        </trans-unit>
        <trans-unit id="fbe3dac2bb3b890d1d56cbc2f3fa0126fa2d43e8" translate="yes" xml:space="preserve">
          <source>IterMut::as_slice</source>
          <target state="translated">IterMut::as_slice</target>
        </trans-unit>
        <trans-unit id="0a947d1a8be02e41fa37714da075d627e9a6d6da" translate="yes" xml:space="preserve">
          <source>IterMut::borrow</source>
          <target state="translated">IterMut::borrow</target>
        </trans-unit>
        <trans-unit id="f88bb4554293b88f8dc1c8bb69415e923325b965" translate="yes" xml:space="preserve">
          <source>IterMut::borrow_mut</source>
          <target state="translated">IterMut::borrow_mut</target>
        </trans-unit>
        <trans-unit id="48fa60a837a6bc036bd0c7d9497e19c4f719ec84" translate="yes" xml:space="preserve">
          <source>IterMut::by_ref</source>
          <target state="translated">IterMut::by_ref</target>
        </trans-unit>
        <trans-unit id="f5d9bc35cc15ce8be47292ce1998b21d7b90f454" translate="yes" xml:space="preserve">
          <source>IterMut::chain</source>
          <target state="translated">IterMut::chain</target>
        </trans-unit>
        <trans-unit id="4859f67bc45d1cfa5be5d41026dcf3b89772eceb" translate="yes" xml:space="preserve">
          <source>IterMut::cloned</source>
          <target state="translated">IterMut::cloned</target>
        </trans-unit>
        <trans-unit id="0680e13c44f187b2e2903bd2e1023ab5334923ea" translate="yes" xml:space="preserve">
          <source>IterMut::cmp</source>
          <target state="translated">IterMut::cmp</target>
        </trans-unit>
        <trans-unit id="a0e64fc534b3756ecdc15f5f8acaf539397a5145" translate="yes" xml:space="preserve">
          <source>IterMut::collect</source>
          <target state="translated">IterMut::collect</target>
        </trans-unit>
        <trans-unit id="95a4dd4c3dfd61737eaad683762b0bc7a7f9e7fc" translate="yes" xml:space="preserve">
          <source>IterMut::copied</source>
          <target state="translated">IterMut::copied</target>
        </trans-unit>
        <trans-unit id="5766f26143f5bcf6f3046a585e17bcfe339aad1e" translate="yes" xml:space="preserve">
          <source>IterMut::count</source>
          <target state="translated">IterMut::count</target>
        </trans-unit>
        <trans-unit id="b687092d76c8cc05745b7269130d0abfdaca355d" translate="yes" xml:space="preserve">
          <source>IterMut::cycle</source>
          <target state="translated">IterMut::cycle</target>
        </trans-unit>
        <trans-unit id="6d2db6ed0889c67bb6b498f2b3f67091fe29b968" translate="yes" xml:space="preserve">
          <source>IterMut::enumerate</source>
          <target state="translated">IterMut::enumerate</target>
        </trans-unit>
        <trans-unit id="fb228b5c55ad8378b706b298cb18e19a8d1b92e0" translate="yes" xml:space="preserve">
          <source>IterMut::eq</source>
          <target state="translated">IterMut::eq</target>
        </trans-unit>
        <trans-unit id="10b9735610da183bc0904cfcdc41b325717c5fa4" translate="yes" xml:space="preserve">
          <source>IterMut::filter</source>
          <target state="translated">IterMut::filter</target>
        </trans-unit>
        <trans-unit id="50b5344a605daa6db154682749d39063c82b3aa3" translate="yes" xml:space="preserve">
          <source>IterMut::filter_map</source>
          <target state="translated">IterMut::filter_map</target>
        </trans-unit>
        <trans-unit id="bc7ee8167e059bacfd966b6012e519970cd73008" translate="yes" xml:space="preserve">
          <source>IterMut::find</source>
          <target state="translated">IterMut::find</target>
        </trans-unit>
        <trans-unit id="410d4ebdc94090e744fedb731647c7ec0d8578cc" translate="yes" xml:space="preserve">
          <source>IterMut::find_map</source>
          <target state="translated">IterMut::find_map</target>
        </trans-unit>
        <trans-unit id="65e5eda673bd31f19324431c366d3dfedb17fb01" translate="yes" xml:space="preserve">
          <source>IterMut::flat_map</source>
          <target state="translated">IterMut::flat_map</target>
        </trans-unit>
        <trans-unit id="b284560776dd5bb1ff4273557604dbb2553c7c07" translate="yes" xml:space="preserve">
          <source>IterMut::flatten</source>
          <target state="translated">IterMut::flatten</target>
        </trans-unit>
        <trans-unit id="ab0f6e0b99bf1433157d69dc73b614b9ae6780fe" translate="yes" xml:space="preserve">
          <source>IterMut::fmt</source>
          <target state="translated">IterMut::fmt</target>
        </trans-unit>
        <trans-unit id="4b759c2db23677552fe4a6582ff9535f267cf416" translate="yes" xml:space="preserve">
          <source>IterMut::fold</source>
          <target state="translated">IterMut::fold</target>
        </trans-unit>
        <trans-unit id="ff2b68bb585bc2eef74e222255298430657bd568" translate="yes" xml:space="preserve">
          <source>IterMut::for_each</source>
          <target state="translated">IterMut::for_each</target>
        </trans-unit>
        <trans-unit id="a33e41fe818af66e485ef7d3667b7d969b562154" translate="yes" xml:space="preserve">
          <source>IterMut::from</source>
          <target state="translated">IterMut::from</target>
        </trans-unit>
        <trans-unit id="b0e6a8de88a1b4c1f800636e965b45722312ad0f" translate="yes" xml:space="preserve">
          <source>IterMut::fuse</source>
          <target state="translated">IterMut::fuse</target>
        </trans-unit>
        <trans-unit id="664fd7bab24c7daac348bb72a1609830e80d691b" translate="yes" xml:space="preserve">
          <source>IterMut::ge</source>
          <target state="translated">IterMut::ge</target>
        </trans-unit>
        <trans-unit id="6bfb9c74b746559572b1cb3b3a42167374cd95d6" translate="yes" xml:space="preserve">
          <source>IterMut::gt</source>
          <target state="translated">IterMut::gt</target>
        </trans-unit>
        <trans-unit id="661eb528c55fa69d49ca565e9e26cfd5ddfff9bb" translate="yes" xml:space="preserve">
          <source>IterMut::inspect</source>
          <target state="translated">IterMut::inspect</target>
        </trans-unit>
        <trans-unit id="0085a0c4d6891c0fa655511a1f17f0c6798fffe3" translate="yes" xml:space="preserve">
          <source>IterMut::into</source>
          <target state="translated">IterMut::into</target>
        </trans-unit>
        <trans-unit id="f9d872a7753c37096516c695a54e36bf555e681e" translate="yes" xml:space="preserve">
          <source>IterMut::into_iter</source>
          <target state="translated">IterMut::into_iter</target>
        </trans-unit>
        <trans-unit id="56c9e9ebed846a8f50f7cd23275cf61e51741490" translate="yes" xml:space="preserve">
          <source>IterMut::into_slice</source>
          <target state="translated">IterMut::into_slice</target>
        </trans-unit>
        <trans-unit id="85db2b71d3d95945de22fd6957284758e551f164" translate="yes" xml:space="preserve">
          <source>IterMut::is_empty</source>
          <target state="translated">IterMut::is_empty</target>
        </trans-unit>
        <trans-unit id="057c3534bd6c2db79908fbeb1a2667df6a91093f" translate="yes" xml:space="preserve">
          <source>IterMut::is_sorted</source>
          <target state="translated">IterMut::is_sorted</target>
        </trans-unit>
        <trans-unit id="f6db0e52cbdd1cc2839465c01104f6e07b7e10a1" translate="yes" xml:space="preserve">
          <source>IterMut::is_sorted_by</source>
          <target state="translated">IterMut::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="946b50eea7f94363f84f06fd925cc2268637ae6d" translate="yes" xml:space="preserve">
          <source>IterMut::is_sorted_by_key</source>
          <target state="translated">IterMut::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="65af3e32ba1cf5aa400435aa3fc4596f2e5a4e39" translate="yes" xml:space="preserve">
          <source>IterMut::last</source>
          <target state="translated">IterMut::last</target>
        </trans-unit>
        <trans-unit id="7443e3959cb51f380b4aef241caca0a305e10720" translate="yes" xml:space="preserve">
          <source>IterMut::le</source>
          <target state="translated">IterMut::le</target>
        </trans-unit>
        <trans-unit id="1762aa132da5d0386a5ab5fa889856d0873e884a" translate="yes" xml:space="preserve">
          <source>IterMut::len</source>
          <target state="translated">IterMut::len</target>
        </trans-unit>
        <trans-unit id="e9d8a70597f6275813f3185cc0aa3025f469551a" translate="yes" xml:space="preserve">
          <source>IterMut::lt</source>
          <target state="translated">IterMut::lt</target>
        </trans-unit>
        <trans-unit id="a21d9b76e7d9ffcd6558423c0bce4cbb10973697" translate="yes" xml:space="preserve">
          <source>IterMut::map</source>
          <target state="translated">IterMut::map</target>
        </trans-unit>
        <trans-unit id="c3e262249b1040974db8d46e55cbdb196ff35924" translate="yes" xml:space="preserve">
          <source>IterMut::max</source>
          <target state="translated">IterMut::max</target>
        </trans-unit>
        <trans-unit id="45f2597a4580057864afc9b38782024b25dbed8f" translate="yes" xml:space="preserve">
          <source>IterMut::max_by</source>
          <target state="translated">IterMut::max_by</target>
        </trans-unit>
        <trans-unit id="4cfc9346f59180a900cadc955b42333b50460424" translate="yes" xml:space="preserve">
          <source>IterMut::max_by_key</source>
          <target state="translated">IterMut::max_by_key</target>
        </trans-unit>
        <trans-unit id="ae960d89241a17cf377151468fe032b6642a741c" translate="yes" xml:space="preserve">
          <source>IterMut::min</source>
          <target state="translated">IterMut::min</target>
        </trans-unit>
        <trans-unit id="6afc2639b644683e7d150f8f0a89926a274e7f5d" translate="yes" xml:space="preserve">
          <source>IterMut::min_by</source>
          <target state="translated">IterMut::min_by</target>
        </trans-unit>
        <trans-unit id="ba1f0877c3ded4eb9fc2eca35f95a34f57a1aa87" translate="yes" xml:space="preserve">
          <source>IterMut::min_by_key</source>
          <target state="translated">IterMut::min_by_key</target>
        </trans-unit>
        <trans-unit id="5c517328108a7b9b0752cdfee41b31e1a02675ed" translate="yes" xml:space="preserve">
          <source>IterMut::ne</source>
          <target state="translated">IterMut::ne</target>
        </trans-unit>
        <trans-unit id="4a2e580d79a7438865d40d31a56726e9127888c8" translate="yes" xml:space="preserve">
          <source>IterMut::next</source>
          <target state="translated">IterMut::next</target>
        </trans-unit>
        <trans-unit id="139a3236402870ecd266bb0a9bc31561280b31bb" translate="yes" xml:space="preserve">
          <source>IterMut::next_back</source>
          <target state="translated">IterMut::next_back</target>
        </trans-unit>
        <trans-unit id="7bbe293cbd53f286fef36815b6c7398d20db404f" translate="yes" xml:space="preserve">
          <source>IterMut::nth</source>
          <target state="translated">IterMut::nth</target>
        </trans-unit>
        <trans-unit id="5772506353380947ff699b52a37feaee46051df3" translate="yes" xml:space="preserve">
          <source>IterMut::nth_back</source>
          <target state="translated">IterMut::nth_back</target>
        </trans-unit>
        <trans-unit id="5668de5a92d85d1071ad1f82e9ef7513d2b7bc31" translate="yes" xml:space="preserve">
          <source>IterMut::partial_cmp</source>
          <target state="translated">IterMut::partial_cmp</target>
        </trans-unit>
        <trans-unit id="a3382b312019633bbea8d455e903695ff7a81f6d" translate="yes" xml:space="preserve">
          <source>IterMut::partition</source>
          <target state="translated">IterMut::partition</target>
        </trans-unit>
        <trans-unit id="def8ddaad6d23f184f1d8f90e47c52e6771c8726" translate="yes" xml:space="preserve">
          <source>IterMut::peekable</source>
          <target state="translated">IterMut::peekable</target>
        </trans-unit>
        <trans-unit id="e4e4bcd4ad39225fe6f1d31a86b7460e74649082" translate="yes" xml:space="preserve">
          <source>IterMut::position</source>
          <target state="translated">IterMut::position</target>
        </trans-unit>
        <trans-unit id="f8e28dca24a6d5cb911b812d63ca4210ad500397" translate="yes" xml:space="preserve">
          <source>IterMut::product</source>
          <target state="translated">IterMut::product</target>
        </trans-unit>
        <trans-unit id="e40a83a0559fe372b3fe052ff00a96a4950cded6" translate="yes" xml:space="preserve">
          <source>IterMut::rev</source>
          <target state="translated">IterMut::rev</target>
        </trans-unit>
        <trans-unit id="1e68d13e84703c21f465d900fde2ea2255c05c3d" translate="yes" xml:space="preserve">
          <source>IterMut::rfind</source>
          <target state="translated">IterMut::rfind</target>
        </trans-unit>
        <trans-unit id="1071e32d4bd9d85b7bb9988ca035b92c220cbc89" translate="yes" xml:space="preserve">
          <source>IterMut::rfold</source>
          <target state="translated">IterMut::rfold</target>
        </trans-unit>
        <trans-unit id="d9ad978343710ca3ac668584e5ec56ee87a41af1" translate="yes" xml:space="preserve">
          <source>IterMut::rposition</source>
          <target state="translated">IterMut::rposition</target>
        </trans-unit>
        <trans-unit id="3d57b99fe3a36a90ffb9f9e83e9da20276fd9a22" translate="yes" xml:space="preserve">
          <source>IterMut::scan</source>
          <target state="translated">IterMut::scan</target>
        </trans-unit>
        <trans-unit id="fae924a614763f37e082883ddaabc2b87b19bf2c" translate="yes" xml:space="preserve">
          <source>IterMut::size_hint</source>
          <target state="translated">IterMut::size_hint</target>
        </trans-unit>
        <trans-unit id="709c8510ff15526b1a9b732e5db04549151388c6" translate="yes" xml:space="preserve">
          <source>IterMut::skip</source>
          <target state="translated">IterMut::skip</target>
        </trans-unit>
        <trans-unit id="c54d538f96fcc47416c4e42ffc8829538ae491ab" translate="yes" xml:space="preserve">
          <source>IterMut::skip_while</source>
          <target state="translated">IterMut::skip_while</target>
        </trans-unit>
        <trans-unit id="38fb28ea29c6bc530e47f9dad6ca847a8308a455" translate="yes" xml:space="preserve">
          <source>IterMut::step_by</source>
          <target state="translated">IterMut::step_by</target>
        </trans-unit>
        <trans-unit id="07bbba43ad63c86d9539b561228e2c22eba74a81" translate="yes" xml:space="preserve">
          <source>IterMut::sum</source>
          <target state="translated">IterMut::sum</target>
        </trans-unit>
        <trans-unit id="e4e5a5c0090d5cac8762c3c6b597e5689d25a27c" translate="yes" xml:space="preserve">
          <source>IterMut::take</source>
          <target state="translated">IterMut::take</target>
        </trans-unit>
        <trans-unit id="33dd2e99d843e213c0ddd91584e7448ac2d4b106" translate="yes" xml:space="preserve">
          <source>IterMut::take_while</source>
          <target state="translated">IterMut::take_while</target>
        </trans-unit>
        <trans-unit id="89c3c4340f9719a145ec3899304b1842903b1e8e" translate="yes" xml:space="preserve">
          <source>IterMut::try_fold</source>
          <target state="translated">IterMut::try_fold</target>
        </trans-unit>
        <trans-unit id="3ecd354292c647432d92da5022d802acbefdaf09" translate="yes" xml:space="preserve">
          <source>IterMut::try_for_each</source>
          <target state="translated">IterMut::try_for_each</target>
        </trans-unit>
        <trans-unit id="07824f2f826e7e718e59741916504b108d880d62" translate="yes" xml:space="preserve">
          <source>IterMut::try_from</source>
          <target state="translated">IterMut::try_from</target>
        </trans-unit>
        <trans-unit id="9a96ea4150cfa217a4f1dd08ae093708354d29eb" translate="yes" xml:space="preserve">
          <source>IterMut::try_into</source>
          <target state="translated">IterMut::try_into</target>
        </trans-unit>
        <trans-unit id="29aff2c0b7bfd47c5d4837ac67638482b835e70d" translate="yes" xml:space="preserve">
          <source>IterMut::try_rfold</source>
          <target state="translated">IterMut::try_rfold</target>
        </trans-unit>
        <trans-unit id="bf0e0921f0da7331cb27e7d17d9e221b70171a7a" translate="yes" xml:space="preserve">
          <source>IterMut::type_id</source>
          <target state="translated">IterMut::type_id</target>
        </trans-unit>
        <trans-unit id="7f6f9babd020f3f6641909fd4a54810ef8d5c98a" translate="yes" xml:space="preserve">
          <source>IterMut::unzip</source>
          <target state="translated">IterMut::unzip</target>
        </trans-unit>
        <trans-unit id="bbedf0cc88bd2517be640465c65b23b15a5a71ba" translate="yes" xml:space="preserve">
          <source>IterMut::zip</source>
          <target state="translated">IterMut::zip</target>
        </trans-unit>
        <trans-unit id="5de97051f4a5bf9656a21f5c9446ab6c961f1d50" translate="yes" xml:space="preserve">
          <source>Iterate over a series of values with &lt;a href=&quot;keyword.for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2499260c1be5541b8c3abea5b95c5cff7ca9f173" translate="yes" xml:space="preserve">
          <source>Iterate through each line of the contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc1d37b3a6ff7065f6616ad5090d037179310e5" translate="yes" xml:space="preserve">
          <source>Iterates over the entire iterator, multiplying all the elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12f90576d62ee51bcd72346f4eea97d035ff3fbf" translate="yes" xml:space="preserve">
          <source>Iterates over the entire iterator, multiplying all the elements &lt;a href=&quot;../../../iter/trait.iterator#method.product&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e32fff0b6901e0665a7a8c46f77166fe30575d0c" translate="yes" xml:space="preserve">
          <source>Iterates over the entire iterator, multiplying all the elements &lt;a href=&quot;../../iter/trait.iterator#method.product&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba661f58c25c048da380a890db7f86c82d555ed" translate="yes" xml:space="preserve">
          <source>Iterates over the entire iterator, multiplying all the elements &lt;a href=&quot;../iter/trait.iterator#method.product&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e40697331454225ecb2ac731fb00044a53174cc1" translate="yes" xml:space="preserve">
          <source>Iterates over the entire iterator, multiplying all the elements &lt;a href=&quot;iter/trait.iterator#method.product&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba2858c97778cf6ff78dc3d4e578f6ce94c7f587" translate="yes" xml:space="preserve">
          <source>Iterates over the entire iterator, multiplying all the elements &lt;a href=&quot;trait.iterator#method.product&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dff502cf70a8cb10dd882dfdf098dc4aa48cf1e" translate="yes" xml:space="preserve">
          <source>Iterates over the slice &lt;code&gt;other&lt;/code&gt;, clones each element, and then appends it to this &lt;code&gt;Vec&lt;/code&gt;. The &lt;code&gt;other&lt;/code&gt; vector is traversed in-order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d265d453acaa19c0ae15ceee2e6a72145e4e232" translate="yes" xml:space="preserve">
          <source>Iterating Through Lines with the &lt;code id=&quot;iterating-through-lines-with-the-lines-method&quot;&gt;lines&lt;/code&gt; Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9232973e4659ad95034977407f818f02bad0423b" translate="yes" xml:space="preserve">
          <source>Iterating over the Values in a Vector</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18905aab409cadb5b72681a650ec99001cb221e0" translate="yes" xml:space="preserve">
          <source>Iteration</source>
          <target state="translated">Iteration</target>
        </trans-unit>
        <trans-unit id="4bbe26c7d68240e48a823975e3e785a737635548" translate="yes" xml:space="preserve">
          <source>Iteration with &lt;a href=&quot;keyword.in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt;, trait implementation with &lt;a href=&quot;keyword.impl&quot;&gt;&lt;code&gt;impl&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../reference/trait-bounds#higher-ranked-trait-bounds&quot;&gt;higher-ranked trait bounds&lt;/a&gt; (&lt;code&gt;for&amp;lt;'a&amp;gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae8809b2429231a50c28ba87cecc038aac88855" translate="yes" xml:space="preserve">
          <source>Iterator</source>
          <target state="translated">Iterator</target>
        </trans-unit>
        <trans-unit id="9423090682be31506d3158301d684f4abe89d00e" translate="yes" xml:space="preserve">
          <source>Iterator behavior</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7528b69192612888be1c4ce8f89b0e0e581862" translate="yes" xml:space="preserve">
          <source>Iterator loops</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d19530e5d03b36f27c9d84864c3b65bb57584a79" translate="yes" xml:space="preserve">
          <source>Iterator over the entries in a directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba33042f2a1b69e3f8c089958f5c5514f1643aee" translate="yes" xml:space="preserve">
          <source>Iterator types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4273ec271075233286703458c7e9ebc00e2e82df" translate="yes" xml:space="preserve">
          <source>Iterator::all</source>
          <target state="translated">Iterator::all</target>
        </trans-unit>
        <trans-unit id="f86c54ca12225c13236cdc3a624968944761ea05" translate="yes" xml:space="preserve">
          <source>Iterator::any</source>
          <target state="translated">Iterator::any</target>
        </trans-unit>
        <trans-unit id="d57ec500fe9ec2bba36378c03fe82c9f66576f38" translate="yes" xml:space="preserve">
          <source>Iterator::by_ref</source>
          <target state="translated">Iterator::by_ref</target>
        </trans-unit>
        <trans-unit id="eee7519010a092f18111fa15dd804b221949785a" translate="yes" xml:space="preserve">
          <source>Iterator::chain</source>
          <target state="translated">Iterator::chain</target>
        </trans-unit>
        <trans-unit id="2737cab8dbd36c284c2d2a04345b6f802d76520e" translate="yes" xml:space="preserve">
          <source>Iterator::cloned</source>
          <target state="translated">Iterator::cloned</target>
        </trans-unit>
        <trans-unit id="4d53642d0597c543ebd99c70d62ee5234be120ee" translate="yes" xml:space="preserve">
          <source>Iterator::cmp</source>
          <target state="translated">Iterator::cmp</target>
        </trans-unit>
        <trans-unit id="6840be4400b24989a5f3ee01f218588655855ede" translate="yes" xml:space="preserve">
          <source>Iterator::collect</source>
          <target state="translated">Iterator::collect</target>
        </trans-unit>
        <trans-unit id="afd3fcee84d868df85114f2c2de87906ba8b73fd" translate="yes" xml:space="preserve">
          <source>Iterator::copied</source>
          <target state="translated">Iterator::copied</target>
        </trans-unit>
        <trans-unit id="65c267a3908408f21f20c7542c580b394c3ac479" translate="yes" xml:space="preserve">
          <source>Iterator::count</source>
          <target state="translated">Iterator::count</target>
        </trans-unit>
        <trans-unit id="a62029a441e5502574f74110e73622b6c124b195" translate="yes" xml:space="preserve">
          <source>Iterator::cycle</source>
          <target state="translated">Iterator::cycle</target>
        </trans-unit>
        <trans-unit id="4cf31dbb9795763807136c75aa5ab726e70ab4da" translate="yes" xml:space="preserve">
          <source>Iterator::enumerate</source>
          <target state="translated">Iterator::enumerate</target>
        </trans-unit>
        <trans-unit id="e54da00842cf3d69c5bb79f7e6ff037be7b7d1eb" translate="yes" xml:space="preserve">
          <source>Iterator::eq</source>
          <target state="translated">Iterator::eq</target>
        </trans-unit>
        <trans-unit id="7cf8c3afdf60282496111d5e9294d886ba58ff32" translate="yes" xml:space="preserve">
          <source>Iterator::filter</source>
          <target state="translated">Iterator::filter</target>
        </trans-unit>
        <trans-unit id="d6f882e7564be02de62cc36c2cb255e404103b69" translate="yes" xml:space="preserve">
          <source>Iterator::filter_map</source>
          <target state="translated">Iterator::filter_map</target>
        </trans-unit>
        <trans-unit id="8bad19b292d0ba35dd2b96e68725fc1ecca7ab20" translate="yes" xml:space="preserve">
          <source>Iterator::find</source>
          <target state="translated">Iterator::find</target>
        </trans-unit>
        <trans-unit id="3ea058ee3e827f8722e557a5ed69196b9d69ffef" translate="yes" xml:space="preserve">
          <source>Iterator::find_map</source>
          <target state="translated">Iterator::find_map</target>
        </trans-unit>
        <trans-unit id="fb5d2f94b065377a6651ac4b6316f941b8a73d83" translate="yes" xml:space="preserve">
          <source>Iterator::flat_map</source>
          <target state="translated">Iterator::flat_map</target>
        </trans-unit>
        <trans-unit id="111068d32ae21f272191794cb73558e1cac98f8c" translate="yes" xml:space="preserve">
          <source>Iterator::flatten</source>
          <target state="translated">Iterator::flatten</target>
        </trans-unit>
        <trans-unit id="43a4b81bd3319dd7c1f643ea1239981100f2bfe0" translate="yes" xml:space="preserve">
          <source>Iterator::fold</source>
          <target state="translated">Iterator::fold</target>
        </trans-unit>
        <trans-unit id="4b6d8e0bb7e0875f730af26e464f2d7f56787c00" translate="yes" xml:space="preserve">
          <source>Iterator::for_each</source>
          <target state="translated">Iterator::for_each</target>
        </trans-unit>
        <trans-unit id="d331641f18373a947667fdd994090cbdbe5e56e3" translate="yes" xml:space="preserve">
          <source>Iterator::fuse</source>
          <target state="translated">Iterator::fuse</target>
        </trans-unit>
        <trans-unit id="a1d0aae8a33bedb12212f917dec98beb3c31719d" translate="yes" xml:space="preserve">
          <source>Iterator::ge</source>
          <target state="translated">Iterator::ge</target>
        </trans-unit>
        <trans-unit id="d02804beda6f63be283b340587c424846986c214" translate="yes" xml:space="preserve">
          <source>Iterator::gt</source>
          <target state="translated">Iterator::gt</target>
        </trans-unit>
        <trans-unit id="f6f98700823020b1af15767f0fd9cf51cc5b3580" translate="yes" xml:space="preserve">
          <source>Iterator::inspect</source>
          <target state="translated">Iterator::inspect</target>
        </trans-unit>
        <trans-unit id="2b970d2781d8419238596de0ecda94a2ec01de0f" translate="yes" xml:space="preserve">
          <source>Iterator::is_sorted</source>
          <target state="translated">Iterator::is_sorted</target>
        </trans-unit>
        <trans-unit id="856d4b939b6e2b1172c61d2fab65a6f2f22d06a3" translate="yes" xml:space="preserve">
          <source>Iterator::is_sorted_by</source>
          <target state="translated">Iterator::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="8d2695a4fa6c8f77acecd3c782968648c5c7e47f" translate="yes" xml:space="preserve">
          <source>Iterator::is_sorted_by_key</source>
          <target state="translated">Iterator::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="fc7204aa1fca5db78599c8ff71f528a152d2799f" translate="yes" xml:space="preserve">
          <source>Iterator::last</source>
          <target state="translated">Iterator::last</target>
        </trans-unit>
        <trans-unit id="89a83249a4c0370a4e7fe4b445980fe3d4bdb85b" translate="yes" xml:space="preserve">
          <source>Iterator::le</source>
          <target state="translated">Iterator::le</target>
        </trans-unit>
        <trans-unit id="3de38ebedca0b7133046aaeeabbf64a22e912ef4" translate="yes" xml:space="preserve">
          <source>Iterator::lt</source>
          <target state="translated">Iterator::lt</target>
        </trans-unit>
        <trans-unit id="791a1e23f54e2b3d01c25daf21bceda253396401" translate="yes" xml:space="preserve">
          <source>Iterator::map</source>
          <target state="translated">Iterator::map</target>
        </trans-unit>
        <trans-unit id="14ca2127fd3ab1a13326b57f93a743807d4a385a" translate="yes" xml:space="preserve">
          <source>Iterator::max</source>
          <target state="translated">Iterator::max</target>
        </trans-unit>
        <trans-unit id="73c5938125fe2dda5817351036d306957ab62fdf" translate="yes" xml:space="preserve">
          <source>Iterator::max_by</source>
          <target state="translated">Iterator::max_by</target>
        </trans-unit>
        <trans-unit id="0d48dc0112caa2401ba3e6305374cbe9d9f62de6" translate="yes" xml:space="preserve">
          <source>Iterator::max_by_key</source>
          <target state="translated">Iterator::max_by_key</target>
        </trans-unit>
        <trans-unit id="1e915bf62293697842ab0cc1c78d7c4d9247f8a2" translate="yes" xml:space="preserve">
          <source>Iterator::min</source>
          <target state="translated">Iterator::min</target>
        </trans-unit>
        <trans-unit id="350a01c462ad653692ad3d7c81cc7f998b33cc7a" translate="yes" xml:space="preserve">
          <source>Iterator::min_by</source>
          <target state="translated">Iterator::min_by</target>
        </trans-unit>
        <trans-unit id="3fa40a72cbf669f1ff2dd6db52b49bf6e29072d6" translate="yes" xml:space="preserve">
          <source>Iterator::min_by_key</source>
          <target state="translated">Iterator::min_by_key</target>
        </trans-unit>
        <trans-unit id="898579db7c8bd3e1760f9dc45aebef8f31d79de6" translate="yes" xml:space="preserve">
          <source>Iterator::ne</source>
          <target state="translated">Iterator::ne</target>
        </trans-unit>
        <trans-unit id="2d360ad0443fc86aaf713ff8a07e3d0e24910e14" translate="yes" xml:space="preserve">
          <source>Iterator::next</source>
          <target state="translated">Iterator::next</target>
        </trans-unit>
        <trans-unit id="4ef73a468549da918e9ddd255430293b4d475cf4" translate="yes" xml:space="preserve">
          <source>Iterator::nth</source>
          <target state="translated">Iterator::nth</target>
        </trans-unit>
        <trans-unit id="6430563009c292bd461b9dbdbc8efbc87ed667e5" translate="yes" xml:space="preserve">
          <source>Iterator::partial_cmp</source>
          <target state="translated">Iterator::partial_cmp</target>
        </trans-unit>
        <trans-unit id="38feb7e4eded7516cbc44a5b7ae390dbea8a1c5f" translate="yes" xml:space="preserve">
          <source>Iterator::partition</source>
          <target state="translated">Iterator::partition</target>
        </trans-unit>
        <trans-unit id="b1d4b5a349a9bfe583ffe37ec59e50ccad659479" translate="yes" xml:space="preserve">
          <source>Iterator::peekable</source>
          <target state="translated">Iterator::peekable</target>
        </trans-unit>
        <trans-unit id="6ffb8dda5bc3637bf0fea7d50ee2879f36477dbd" translate="yes" xml:space="preserve">
          <source>Iterator::position</source>
          <target state="translated">Iterator::position</target>
        </trans-unit>
        <trans-unit id="ec1b6d5e61cc3a26f25348b0a2e1ad79bbac1c52" translate="yes" xml:space="preserve">
          <source>Iterator::product</source>
          <target state="translated">Iterator::product</target>
        </trans-unit>
        <trans-unit id="48046e9ab82515a6dd4fd7b646f1ce53e8faac3b" translate="yes" xml:space="preserve">
          <source>Iterator::rev</source>
          <target state="translated">Iterator::rev</target>
        </trans-unit>
        <trans-unit id="67f9a990bd064873346b5c9e2d17fe35c839d67c" translate="yes" xml:space="preserve">
          <source>Iterator::rposition</source>
          <target state="translated">Iterator::rposition</target>
        </trans-unit>
        <trans-unit id="ff5bd4337968d7f15fa02188bc9ec8899d066887" translate="yes" xml:space="preserve">
          <source>Iterator::scan</source>
          <target state="translated">Iterator::scan</target>
        </trans-unit>
        <trans-unit id="ecc32183d685c53eedf20225f612a8f2cd0d1e50" translate="yes" xml:space="preserve">
          <source>Iterator::size_hint</source>
          <target state="translated">Iterator::size_hint</target>
        </trans-unit>
        <trans-unit id="5407d981fcc2957741d940d765b5c8aeeb89a7d3" translate="yes" xml:space="preserve">
          <source>Iterator::skip</source>
          <target state="translated">Iterator::skip</target>
        </trans-unit>
        <trans-unit id="b37ac34fd4f971b4431eb07cfed110e756486a69" translate="yes" xml:space="preserve">
          <source>Iterator::skip_while</source>
          <target state="translated">Iterator::skip_while</target>
        </trans-unit>
        <trans-unit id="18e1ae8414f33fb71bfb82df82aa89205f40cf2a" translate="yes" xml:space="preserve">
          <source>Iterator::step_by</source>
          <target state="translated">Iterator::step_by</target>
        </trans-unit>
        <trans-unit id="17eae761d55f0527972d28d8efb13700ff9cd9a8" translate="yes" xml:space="preserve">
          <source>Iterator::sum</source>
          <target state="translated">Iterator::sum</target>
        </trans-unit>
        <trans-unit id="7818fb82bcb2e27b1eaf83bc4a006e1deaa87c61" translate="yes" xml:space="preserve">
          <source>Iterator::take</source>
          <target state="translated">Iterator::take</target>
        </trans-unit>
        <trans-unit id="8585d3ded5bed1eba060e171ff1f8d071aa3c3c0" translate="yes" xml:space="preserve">
          <source>Iterator::take_while</source>
          <target state="translated">Iterator::take_while</target>
        </trans-unit>
        <trans-unit id="f3a0250ddc27ec143683c1a6492e90be2e63cdfb" translate="yes" xml:space="preserve">
          <source>Iterator::try_fold</source>
          <target state="translated">Iterator::try_fold</target>
        </trans-unit>
        <trans-unit id="97ee2ddc3ae8f6722d8aa8a8f03acf882d6fb21c" translate="yes" xml:space="preserve">
          <source>Iterator::try_for_each</source>
          <target state="translated">Iterator::try_for_each</target>
        </trans-unit>
        <trans-unit id="d42112e418ab0fd56186356df14c7791d504e7e2" translate="yes" xml:space="preserve">
          <source>Iterator::unzip</source>
          <target state="translated">Iterator::unzip</target>
        </trans-unit>
        <trans-unit id="2191de9c88e99f9f5438674c00e37989322ce302" translate="yes" xml:space="preserve">
          <source>Iterator::zip</source>
          <target state="translated">Iterator::zip</target>
        </trans-unit>
        <trans-unit id="909a5f0dfd8c3a4ef79cd1458e2b5fb136ad7fae" translate="yes" xml:space="preserve">
          <source>Iterators</source>
          <target state="translated">Iterators</target>
        </trans-unit>
        <trans-unit id="2f934a245522e136eca293cd75a09317df2f2cd7" translate="yes" xml:space="preserve">
          <source>Iterators (and iterator &lt;a href=&quot;#adapters&quot;&gt;adapters&lt;/a&gt;) are &lt;em&gt;lazy&lt;/em&gt;. This means that just creating an iterator doesn't &lt;em&gt;do&lt;/em&gt; a whole lot. Nothing really happens until you call &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt;. This is sometimes a source of confusion when creating an iterator solely for its side effects. For example, the &lt;a href=&quot;trait.iterator#method.map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; method calls a closure on each element it iterates over:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc571c24ac50d6cee6e1818f6a078d2a419abc9e" translate="yes" xml:space="preserve">
          <source>Iterators also provide a series of &lt;em&gt;adapter&lt;/em&gt; methods for performing common threads to sequences. Among the adapters are functional favorites like &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;fold&lt;/code&gt;, &lt;code&gt;skip&lt;/code&gt; and &lt;code&gt;take&lt;/code&gt;. Of particular interest to collections is the &lt;code&gt;rev&lt;/code&gt; adapter, that reverses any iterator that supports this operation. Most collections provide reversible iterators as the way to iterate over them in reverse order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1604a556288e09f94874ae1b1e2b1eb8eabf0eb7" translate="yes" xml:space="preserve">
          <source>Iterators are a powerful and robust mechanism used throughout Rust's standard libraries. Iterators provide a sequence of values in a generic, safe, efficient and convenient way. The contents of an iterator are usually &lt;em&gt;lazily&lt;/em&gt; evaluated, so that only the values that are actually needed are ever actually produced, and no allocation need be done to temporarily store them. Iterators are primarily consumed using a &lt;code&gt;for&lt;/code&gt; loop, although many functions also take iterators where a collection or sequence of values is desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="578d7fdeb01ae2ce26df2699ac5468054a311e64" translate="yes" xml:space="preserve">
          <source>Iterators are also composable, and it's common to chain them together to do more complex forms of processing. See the &lt;a href=&quot;#adapters&quot;&gt;Adapters&lt;/a&gt; section below for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73a40f4f406e6b8d805bf4ec3dd55761493e5309" translate="yes" xml:space="preserve">
          <source>Iterators do not have to be finite. As an example, an open-ended range is an infinite iterator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd7908f9004d53eb6241ef825d90a63188a57756" translate="yes" xml:space="preserve">
          <source>Iterators handle all that logic for you, cutting down on repetitive code you could potentially mess up. Iterators give you more flexibility to use the same logic with many different kinds of sequences, not just data structures you can index into, like vectors. Let&amp;rsquo;s examine how iterators do that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2c70e7513b6f7cfa60a8740edd8f829825ff6ce" translate="yes" xml:space="preserve">
          <source>Iterators produce a series of values, and collections can also be thought of as a series of values. The &lt;code&gt;Extend&lt;/code&gt; trait bridges this gap, allowing you to extend a collection by including the contents of that iterator. When extending a collection with an already existing key, that entry is updated or, in the case of collections that permit multiple entries with equal keys, that entry is inserted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36fe73edebcef37071d90c761137d6e576a12835" translate="yes" xml:space="preserve">
          <source>Iterators that dynamically terminate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4a0156a59a95761c105c3a3e41e56a330667ccb" translate="yes" xml:space="preserve">
          <source>Iterators:</source>
          <target state="translated">Iterators:</target>
        </trans-unit>
        <trans-unit id="f0236db9f43733339562b17d0dc2c960dc9c9a8f" translate="yes" xml:space="preserve">
          <source>Its type is &lt;code&gt;'static&lt;/code&gt; duration borrowed string slice, &lt;code&gt;&amp;amp;'static str&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c46090b4698309dc6d00e2e6c188ead587a40e9" translate="yes" xml:space="preserve">
          <source>JoinHandle</source>
          <target state="translated">JoinHandle</target>
        </trans-unit>
        <trans-unit id="dbe795c59f1c72343d5a4f517f9ad3b4275e45c2" translate="yes" xml:space="preserve">
          <source>JoinHandle::as_pthread_t</source>
          <target state="translated">JoinHandle::as_pthread_t</target>
        </trans-unit>
        <trans-unit id="412c59894065992ad9701ec7e4a5555a722a3202" translate="yes" xml:space="preserve">
          <source>JoinHandle::as_raw_handle</source>
          <target state="translated">JoinHandle::as_raw_handle</target>
        </trans-unit>
        <trans-unit id="3cec4888e9d7b5ae79106f6aa6dc453c6917c4e8" translate="yes" xml:space="preserve">
          <source>JoinHandle::borrow</source>
          <target state="translated">JoinHandle::borrow</target>
        </trans-unit>
        <trans-unit id="fd2845c5bf15e89eb7f9f69c8adaebecb219c672" translate="yes" xml:space="preserve">
          <source>JoinHandle::borrow_mut</source>
          <target state="translated">JoinHandle::borrow_mut</target>
        </trans-unit>
        <trans-unit id="4c3ce23926add99bcb7d4f4c43a106d00bccac89" translate="yes" xml:space="preserve">
          <source>JoinHandle::fmt</source>
          <target state="translated">JoinHandle::fmt</target>
        </trans-unit>
        <trans-unit id="f7242c7bfb17274370663c2f02ebe9f7d7c96f0f" translate="yes" xml:space="preserve">
          <source>JoinHandle::from</source>
          <target state="translated">JoinHandle::from</target>
        </trans-unit>
        <trans-unit id="d5627903ac6c6fca86247def251096015fffbc5a" translate="yes" xml:space="preserve">
          <source>JoinHandle::into</source>
          <target state="translated">JoinHandle::into</target>
        </trans-unit>
        <trans-unit id="7e1eec403cc018629f136e34f3666787322dd901" translate="yes" xml:space="preserve">
          <source>JoinHandle::into_pthread_t</source>
          <target state="translated">JoinHandle::into_pthread_t</target>
        </trans-unit>
        <trans-unit id="c6314894dabf847146013c8140ba901c5f3fc886" translate="yes" xml:space="preserve">
          <source>JoinHandle::into_raw_handle</source>
          <target state="translated">JoinHandle::into_raw_handle</target>
        </trans-unit>
        <trans-unit id="45b01c0739817e609f8d08e9f75c05ce81644422" translate="yes" xml:space="preserve">
          <source>JoinHandle::join</source>
          <target state="translated">JoinHandle::join</target>
        </trans-unit>
        <trans-unit id="c16676e74c56443eeda553ebfbb33efee8fee2c2" translate="yes" xml:space="preserve">
          <source>JoinHandle::thread</source>
          <target state="translated">JoinHandle::thread</target>
        </trans-unit>
        <trans-unit id="8607545c9c64edf874a5905869af45ed541936fc" translate="yes" xml:space="preserve">
          <source>JoinHandle::try_from</source>
          <target state="translated">JoinHandle::try_from</target>
        </trans-unit>
        <trans-unit id="5b4f897ba8176b628f13a3930ac9376591daff65" translate="yes" xml:space="preserve">
          <source>JoinHandle::try_into</source>
          <target state="translated">JoinHandle::try_into</target>
        </trans-unit>
        <trans-unit id="81095dc64ba5b13ce027669fbb3134aaf6614b5d" translate="yes" xml:space="preserve">
          <source>JoinHandle::type_id</source>
          <target state="translated">JoinHandle::type_id</target>
        </trans-unit>
        <trans-unit id="abb0b2d530b1bed37c520e95e0964bc4442ee134" translate="yes" xml:space="preserve">
          <source>JoinHandleExt</source>
          <target state="translated">JoinHandleExt</target>
        </trans-unit>
        <trans-unit id="c5dafe3d3c39e51618733fd88e0def9741b4e835" translate="yes" xml:space="preserve">
          <source>JoinPathsError</source>
          <target state="translated">JoinPathsError</target>
        </trans-unit>
        <trans-unit id="dec0bd024ba9e43e73fa5ecd613a46a6513fd917" translate="yes" xml:space="preserve">
          <source>JoinPathsError::borrow</source>
          <target state="translated">JoinPathsError::borrow</target>
        </trans-unit>
        <trans-unit id="1f287d847c80825aeaa42f5ff5c4d17823d49d12" translate="yes" xml:space="preserve">
          <source>JoinPathsError::borrow_mut</source>
          <target state="translated">JoinPathsError::borrow_mut</target>
        </trans-unit>
        <trans-unit id="823a4e0b65b65d02ed9c70bea6734955e28b7a64" translate="yes" xml:space="preserve">
          <source>JoinPathsError::cause</source>
          <target state="translated">JoinPathsError::cause</target>
        </trans-unit>
        <trans-unit id="edc1e4fdc91ad7cadf96a809927c8b059c8a1cbe" translate="yes" xml:space="preserve">
          <source>JoinPathsError::description</source>
          <target state="translated">JoinPathsError::description</target>
        </trans-unit>
        <trans-unit id="c6c91db5b7bc4a5beebd630f559897ab6b3cea42" translate="yes" xml:space="preserve">
          <source>JoinPathsError::fmt</source>
          <target state="translated">JoinPathsError::fmt</target>
        </trans-unit>
        <trans-unit id="127ef4e1b3f565f1a2bca65f9de0550244e7bc38" translate="yes" xml:space="preserve">
          <source>JoinPathsError::from</source>
          <target state="translated">JoinPathsError::from</target>
        </trans-unit>
        <trans-unit id="8a0a4301d2f110a8e8ef605ea4bf646ad3a9581c" translate="yes" xml:space="preserve">
          <source>JoinPathsError::into</source>
          <target state="translated">JoinPathsError::into</target>
        </trans-unit>
        <trans-unit id="0693ee59f808878ad8873da2ff694215418c0ee4" translate="yes" xml:space="preserve">
          <source>JoinPathsError::source</source>
          <target state="translated">JoinPathsError::source</target>
        </trans-unit>
        <trans-unit id="b148a85037443dfc7b589e93179ee679cee0e0a2" translate="yes" xml:space="preserve">
          <source>JoinPathsError::to_string</source>
          <target state="translated">JoinPathsError::to_string</target>
        </trans-unit>
        <trans-unit id="e3d928e5001d65eef527b0e798f2ed958d4242d9" translate="yes" xml:space="preserve">
          <source>JoinPathsError::try_from</source>
          <target state="translated">JoinPathsError::try_from</target>
        </trans-unit>
        <trans-unit id="e96758935a84b6c6b7f43135aee06bfbdb4c12b7" translate="yes" xml:space="preserve">
          <source>JoinPathsError::try_into</source>
          <target state="translated">JoinPathsError::try_into</target>
        </trans-unit>
        <trans-unit id="b4849b93731305d8c42c5c2a1a4688106ef4de73" translate="yes" xml:space="preserve">
          <source>JoinPathsError::type_id</source>
          <target state="translated">JoinPathsError::type_id</target>
        </trans-unit>
        <trans-unit id="97c4f7769f9c5e2f4f5b9d5caac54744e0a9f90a" translate="yes" xml:space="preserve">
          <source>Joining a path containing a colon on a Unix-like platform results in an error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4466f438f59f9e3e6b0c11543857ad0cb8e936d" translate="yes" xml:space="preserve">
          <source>Joining paths on a Unix-like platform:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3a56bf6b2881876f787cf53e3b3c50398570960" translate="yes" xml:space="preserve">
          <source>Joins a collection of &lt;a href=&quot;../path/struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;s appropriately for the &lt;code&gt;PATH&lt;/code&gt; environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9058cfb3941c57451d031360b87440956e3d0576" translate="yes" xml:space="preserve">
          <source>Just as &lt;code&gt;cargo run&lt;/code&gt; compiles your code and then runs the resulting binary, &lt;code&gt;cargo test&lt;/code&gt; compiles your code in test mode and runs the resulting test binary. You can specify command line options to change the default behavior of &lt;code&gt;cargo test&lt;/code&gt;. For example, the default behavior of the binary produced by &lt;code&gt;cargo test&lt;/code&gt; is to run all the tests in parallel and capture output generated during test runs, preventing the output from being displayed and making it easier to read the output related to the test results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="001e99c6d562d4610082356bd914b66e7791c6d7" translate="yes" xml:space="preserve">
          <source>Just as variables are immutable by default, so are references. We&amp;rsquo;re not allowed to modify something we have a reference to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d60a8e1c1966b92263798202c5f621ad3271182f" translate="yes" xml:space="preserve">
          <source>Just as we might want to refer to a part of a string, we might want to refer to part of an array. We&amp;rsquo;d do so like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3cd0c38914e4f9de946957888fda12a2aef698c" translate="yes" xml:space="preserve">
          <source>Just because a function contains unsafe code doesn&amp;rsquo;t mean we need to mark the entire function as unsafe. In fact, wrapping unsafe code in a safe function is a common abstraction. As an example, let&amp;rsquo;s study a function from the standard library, &lt;code&gt;split_at_mut&lt;/code&gt;, that requires some unsafe code and explore how we might implement it. This safe method is defined on mutable slices: it takes one slice and makes it two by splitting the slice at the index given as an argument. Listing 19-4 shows how to use &lt;code&gt;split_at_mut&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="687163feff04cea4e68067b5a858f533ad06e05e" translate="yes" xml:space="preserve">
          <source>Just compiling with &lt;code&gt;rustc&lt;/code&gt; is fine for simple programs, but as your project grows, you&amp;rsquo;ll want to manage all the options and make it easy to share your code. Next, we&amp;rsquo;ll introduce you to the Cargo tool, which will help you write real-world Rust programs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf4d5cc727a6c57ca685432668f892eb6c7cbd1" translate="yes" xml:space="preserve">
          <source>Just like in C, whether an operation is volatile has no bearing whatsoever on questions involving concurrent access from multiple threads. Volatile accesses behave exactly like non-atomic accesses in that regard. In particular, a race between a &lt;code&gt;read_volatile&lt;/code&gt; and any write operation to the same location is undefined behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="317bc7ae9f1ea2d73138794a7e1fffbd3badd2f1" translate="yes" xml:space="preserve">
          <source>Just like in C, whether an operation is volatile has no bearing whatsoever on questions involving concurrent access from multiple threads. Volatile accesses behave exactly like non-atomic accesses in that regard. In particular, a race between a &lt;code&gt;write_volatile&lt;/code&gt; and any other operation (reading or writing) on the same location is undefined behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e495fa1d1e849a4610409f46ad4ee2226bcc303" translate="yes" xml:space="preserve">
          <source>Just like static functions, associated constants aren't stored on the method table. If the trait or any subtrait contain an associated constant, they cannot be made into an object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8bf7b98f101ed3ceab4b0a28bb6ad41d9542aea" translate="yes" xml:space="preserve">
          <source>Just like vectors, hash maps store their data on the heap. This &lt;code&gt;HashMap&lt;/code&gt; has keys of type &lt;code&gt;String&lt;/code&gt; and values of type &lt;code&gt;i32&lt;/code&gt;. Like vectors, hash maps are homogeneous: all of the keys must have the same type, and all of the values must have the same type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad38c597b8238e8c5ffff5cb9392234534096181" translate="yes" xml:space="preserve">
          <source>KW_ABSTRACT : &lt;code&gt;abstract&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be90ce625c319a7fdfb58a43e5bc5c5d9b71f25a" translate="yes" xml:space="preserve">
          <source>KW_AS : &lt;code&gt;as&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0173c787da7a615493ad8d7a2cb0a37333dc413" translate="yes" xml:space="preserve">
          <source>KW_ASYNC : &lt;code&gt;async&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48849139f33d9b0b0e09242876428fca2f3b32a0" translate="yes" xml:space="preserve">
          <source>KW_AWAIT : &lt;code&gt;await&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faeff081e9c7bb1476ef0597e5745e683e9089ac" translate="yes" xml:space="preserve">
          <source>KW_BECOME : &lt;code&gt;become&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb5b5f47578617a58162739554c68db1988e5f19" translate="yes" xml:space="preserve">
          <source>KW_BOX : &lt;code&gt;box&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="789f5a93cd563740436ffcc55aa832d91d39e504" translate="yes" xml:space="preserve">
          <source>KW_BREAK : &lt;code&gt;break&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="646ebf0a8faa491f908a99b63b433e9b938d1d0d" translate="yes" xml:space="preserve">
          <source>KW_CONST : &lt;code&gt;const&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3b44085f94ca57ca2f334704a2a2c477986387b" translate="yes" xml:space="preserve">
          <source>KW_CONTINUE : &lt;code&gt;continue&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e94a62fd0360430796d17226621f22aabfdbae9" translate="yes" xml:space="preserve">
          <source>KW_CRATE : &lt;code&gt;crate&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e516b0f9399c34f538fa08c26037ff452464083" translate="yes" xml:space="preserve">
          <source>KW_DO : &lt;code&gt;do&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a55ecfee6ea0809448ea6f5c0847e66b961b8869" translate="yes" xml:space="preserve">
          <source>KW_DYN : &lt;code&gt;dyn&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43bd7725cfebb3448607c8a4f8fa78700ac6e981" translate="yes" xml:space="preserve">
          <source>KW_ELSE : &lt;code&gt;else&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5b15ab165b8a37f5ca1b5c6cb8b552b4b74656" translate="yes" xml:space="preserve">
          <source>KW_ENUM : &lt;code&gt;enum&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0ab52e66c553f670a2e4b9deb4214bb9187af23" translate="yes" xml:space="preserve">
          <source>KW_EXTERN : &lt;code&gt;extern&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a82d8ca4b2bfb3195b34b23742e5f65175a92d0" translate="yes" xml:space="preserve">
          <source>KW_FALSE : &lt;code&gt;false&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c805a2e97aa19bcae5903d9a457908adfeea3d5" translate="yes" xml:space="preserve">
          <source>KW_FINAL : &lt;code&gt;final&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a1dbe403904f42293db37c4c0873bfb1846c985" translate="yes" xml:space="preserve">
          <source>KW_FN : &lt;code&gt;fn&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51804441d72df4f1c2711281dfd36ba09d409775" translate="yes" xml:space="preserve">
          <source>KW_FOR : &lt;code&gt;for&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae9f72e482e9a846d12338bb40fabc6e91c7824" translate="yes" xml:space="preserve">
          <source>KW_IF : &lt;code&gt;if&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a367c162e2fe29dc4e94c96cbfc7218815660b1" translate="yes" xml:space="preserve">
          <source>KW_IF, INTEGER_LITERAL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73fa9c35080f85eae254306fc02ef20b3a0228db" translate="yes" xml:space="preserve">
          <source>KW_IMPL : &lt;code&gt;impl&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59c563aec15dd074ead40cd8d2c65822bdb4fef2" translate="yes" xml:space="preserve">
          <source>KW_IN : &lt;code&gt;in&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b10df35e646555ba6a73e442c5fb68654f251460" translate="yes" xml:space="preserve">
          <source>KW_LET : &lt;code&gt;let&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2cc99c61ef358b05bbd7856a61981d75499ebec" translate="yes" xml:space="preserve">
          <source>KW_LOOP : &lt;code&gt;loop&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf074b1962cc7aeed758b10c5e770f59576a496d" translate="yes" xml:space="preserve">
          <source>KW_MACRO : &lt;code&gt;macro&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21616e3fdd9348e77ec41feb87c87238b3f4e26c" translate="yes" xml:space="preserve">
          <source>KW_MATCH : &lt;code&gt;match&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cacbc1424997c4e31784ec865a9cf0e227d1f331" translate="yes" xml:space="preserve">
          <source>KW_MOD : &lt;code&gt;mod&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76c49906f1ece7b2086399766a4ebb775592dce9" translate="yes" xml:space="preserve">
          <source>KW_MOVE : &lt;code&gt;move&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e93813d5f885df35d1d34208741cb14417dd32b9" translate="yes" xml:space="preserve">
          <source>KW_MUT : &lt;code&gt;mut&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="986112403ae83ef4c659145d144f9037283438f0" translate="yes" xml:space="preserve">
          <source>KW_OVERRIDE : &lt;code&gt;override&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="096b897ed7d5ae1c63992283c83f6e0f9013d7f0" translate="yes" xml:space="preserve">
          <source>KW_PRIV : &lt;code&gt;priv&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f48e0064a9cb22ae594e388e4915e7d88ce3349c" translate="yes" xml:space="preserve">
          <source>KW_PUB : &lt;code&gt;pub&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ebf55b9ade912097bcab3d0fc356bd22943c572" translate="yes" xml:space="preserve">
          <source>KW_REF : &lt;code&gt;ref&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4aa1bbded52171e54febc09f265f40e1c0be60b" translate="yes" xml:space="preserve">
          <source>KW_RETURN : &lt;code&gt;return&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb8c1f081587b4145c8d20e256de8a57807802c8" translate="yes" xml:space="preserve">
          <source>KW_SELFTYPE : &lt;code&gt;Self&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="589c3916c9b199922a8c5503d2f10a38cd602f6d" translate="yes" xml:space="preserve">
          <source>KW_SELFVALUE : &lt;code&gt;self&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e97f068c91e52b8ee0bf7536b78346905ff65084" translate="yes" xml:space="preserve">
          <source>KW_STATIC : &lt;code&gt;static&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3f4b78faf33e54502b143b3311dfbbea495dd79" translate="yes" xml:space="preserve">
          <source>KW_STATICLIFETIME : &lt;code&gt;'static&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96f670f49f58217687c9c79e68cbb2ce6b233631" translate="yes" xml:space="preserve">
          <source>KW_STRUCT : &lt;code&gt;struct&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb41d3d257888d3ae68c1492a043887998f5646e" translate="yes" xml:space="preserve">
          <source>KW_SUPER : &lt;code&gt;super&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17d62ea6cea231ded0372e49c12635b034d685a2" translate="yes" xml:space="preserve">
          <source>KW_TRAIT : &lt;code&gt;trait&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2436e51574011f63df503ea8e052114e32b38421" translate="yes" xml:space="preserve">
          <source>KW_TRUE : &lt;code&gt;true&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33857bab7317b38e930f6e043274e294dfdb0837" translate="yes" xml:space="preserve">
          <source>KW_TRY : &lt;code&gt;try&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b98be3594c838969fbf8e804a3b83125cd8f9164" translate="yes" xml:space="preserve">
          <source>KW_TYPE : &lt;code&gt;type&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f90893de8264f12555e264daf55d8d3573f648a" translate="yes" xml:space="preserve">
          <source>KW_TYPEOF : &lt;code&gt;typeof&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="810b6331cc472782bf330b62c25e7caade19a83a" translate="yes" xml:space="preserve">
          <source>KW_UNION : &lt;code&gt;union&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c046c3fefb22d66beea883f5fe4ae12ff703c3" translate="yes" xml:space="preserve">
          <source>KW_UNSAFE : &lt;code&gt;unsafe&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1a504e9e9c867afd9ae5cd6865e04fd6708c18c" translate="yes" xml:space="preserve">
          <source>KW_UNSIZED : &lt;code&gt;unsized&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a42f6264915b56a563a35b937d40ee2b1092d828" translate="yes" xml:space="preserve">
          <source>KW_USE : &lt;code&gt;use&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0164d2f9ee89b4ff7027682d51a2a239aa74f90" translate="yes" xml:space="preserve">
          <source>KW_VIRTUAL : &lt;code&gt;virtual&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddbe1f7c29b3f7210557405db5ed34966c662d08" translate="yes" xml:space="preserve">
          <source>KW_WHERE : &lt;code&gt;where&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c9dfcdf6820da0b224753fce346422cdc8d7ae5" translate="yes" xml:space="preserve">
          <source>KW_WHILE : &lt;code&gt;while&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98333a752caf854e21271745fd6749b9c1d1a7d1" translate="yes" xml:space="preserve">
          <source>KW_YIELD : &lt;code&gt;yield&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0691b0c7d3cefeeeae3a2289278f41bd8c7c1e6f" translate="yes" xml:space="preserve">
          <source>Keep a global count of live threads:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d8fe2c08e017878e56af189be768b49b58a3e4" translate="yes" xml:space="preserve">
          <source>Keep in mind that Rust is a &lt;em&gt;statically typed&lt;/em&gt; language, which means that it must know the types of all variables at compile time. The compiler can usually infer what type we want to use based on the value and how we use it. In cases when many types are possible, such as when we converted a &lt;code&gt;String&lt;/code&gt; to a numeric type using &lt;code&gt;parse&lt;/code&gt; in the &lt;a href=&quot;ch02-00-guessing-game-tutorial#comparing-the-guess-to-the-secret-number&quot;&gt;&amp;ldquo;Comparing the Guess to the Secret Number&amp;rdquo;&lt;/a&gt; section in Chapter 2, we must add a type annotation, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52e9fac3044bab3714b6ee55ecb852540b800b38" translate="yes" xml:space="preserve">
          <source>Keeping Track of Borrows at Runtime with &lt;code id=&quot;keeping-track-of-borrows-at-runtime-with-refcellt&quot;&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3ebbc3717ea52d0fdffcb979b6a75601bc35c26" translate="yes" xml:space="preserve">
          <source>Keeping a crate&amp;rsquo;s functionality in its own scope clarifies whether particular functionality is defined in our crate or the &lt;code&gt;rand&lt;/code&gt; crate and prevents potential conflicts. For example, the &lt;code&gt;rand&lt;/code&gt; crate provides a trait named &lt;code&gt;Rng&lt;/code&gt;. We can also define a &lt;code&gt;struct&lt;/code&gt; named &lt;code&gt;Rng&lt;/code&gt; in our own crate. Because a crate&amp;rsquo;s functionality is namespaced in its own scope, when we add &lt;code&gt;rand&lt;/code&gt; as a dependency, the compiler isn&amp;rsquo;t confused about what the name &lt;code&gt;Rng&lt;/code&gt; refers to. In our crate, it refers to the &lt;code&gt;struct Rng&lt;/code&gt; that we defined. We would access the &lt;code&gt;Rng&lt;/code&gt; trait from the &lt;code&gt;rand&lt;/code&gt; crate as &lt;code&gt;rand::Rng&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9f12e803a098c99995539cb42f36c9f9739f97e" translate="yes" xml:space="preserve">
          <source>Keeping track of what parts of code are using what data on the heap, minimizing the amount of duplicate data on the heap, and cleaning up unused data on the heap so you don&amp;rsquo;t run out of space are all problems that ownership addresses. Once you understand ownership, you won&amp;rsquo;t need to think about the stack and the heap very often, but knowing that managing heap data is why ownership exists can help explain why it works the way it does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd35d612a134cd358cb5ad1ce1e9e74301067e1d" translate="yes" xml:space="preserve">
          <source>Key-value option set at most once with the target's operating system value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce96f30fb0633a0de5217c6ddf2318f94830e44b" translate="yes" xml:space="preserve">
          <source>Key-value option set for each platform feature available for the current compilation target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce9ea81e67f13ab1e763fa87e4c0b2168fc63774" translate="yes" xml:space="preserve">
          <source>Key-value option set once with either a value of &quot;little&quot; or &quot;big&quot; depending on the endianness of the target's CPU.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63e95325de8c37181511cb94e0cd4096c6b7d2ef" translate="yes" xml:space="preserve">
          <source>Key-value option set once with the target's CPU architecture. The value is similar to the first element of the platform's target triple, but not identical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f535aa6f58b910aacefadf78335cfd96c455f70" translate="yes" xml:space="preserve">
          <source>Key-value option set once with the target's operating system. This value is similar to the second and third element of the platform's target triple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18ebc4327b545eab4c13648ab9805f30fdc72faa" translate="yes" xml:space="preserve">
          <source>Key-value option set once with the target's pointer width in bits. For example, for targets with 32-bit pointers, this is set to &lt;code&gt;&quot;32&quot;&lt;/code&gt;. Likewise, it is set to &lt;code&gt;&quot;64&quot;&lt;/code&gt; for targets with 64-bit pointers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="919823df75a839f68908ab4a52f685cce0bc3afd" translate="yes" xml:space="preserve">
          <source>Key-value option set once with the vendor of the target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11da1ff3fc87f22cc67c02cf8eb624f317fde1c5" translate="yes" xml:space="preserve">
          <source>Key-value option set with further disambiguating information about the target platform with information about the ABI or &lt;code&gt;libc&lt;/code&gt; used. For historical reasons, this value is only defined as not the empty-string when actually needed for disambiguation. Thus, for example, on many GNU platforms, this value will be empty. This value is similar to the fourth element of the platform's target triple. One difference is that embedded ABIs such as &lt;code&gt;gnueabihf&lt;/code&gt; will simply define &lt;code&gt;target_env&lt;/code&gt; as &lt;code&gt;&quot;gnu&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5651c683f14c95aa972cfdbc300d9fecfe02019" translate="yes" xml:space="preserve">
          <source>Keys</source>
          <target state="translated">Keys</target>
        </trans-unit>
        <trans-unit id="8f31576d96d60f0abebc904da3b4f2881c89ac5a" translate="yes" xml:space="preserve">
          <source>Keys are not unique in the set of key-value configuration options. For example, both &lt;code&gt;feature = &quot;std&quot;&lt;/code&gt; and &lt;code&gt;feature = &quot;serde&quot;&lt;/code&gt; can be set at the same time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe4683b112b96ba7631fcdc86fabb26bd695c7d" translate="yes" xml:space="preserve">
          <source>Keyword Self</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a05409abe457818d06a7b2a827d071925e3123d" translate="yes" xml:space="preserve">
          <source>Keyword as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="111297ecda21e09bfe2a8317450e29b120adfb90" translate="yes" xml:space="preserve">
          <source>Keyword async</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b96f62624a68fd871d5766ca2fa2145d4644a70" translate="yes" xml:space="preserve">
          <source>Keyword await</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6c6e1b25bec0a5a14bc88afab261e9a04ec9707" translate="yes" xml:space="preserve">
          <source>Keyword break</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="436846eb0b7f7b9748553b55f55233f3a2e1b42b" translate="yes" xml:space="preserve">
          <source>Keyword const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a3920d65d1221a1de8f19c31f0add5d8fc541dd" translate="yes" xml:space="preserve">
          <source>Keyword continue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eb24d787290917c89c3e8b0eb98d952c8cdf70d" translate="yes" xml:space="preserve">
          <source>Keyword crate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9274e1d61951bc25e37abafb1a71c5c41800be68" translate="yes" xml:space="preserve">
          <source>Keyword dyn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="377e304b2d1e85347b20ff335b6d99538e6c187b" translate="yes" xml:space="preserve">
          <source>Keyword else</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aba16f0afd468040716e09c2ae6718f272a6458" translate="yes" xml:space="preserve">
          <source>Keyword enum</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="497cef40287ff8c1a00ccb47de8f855e132be344" translate="yes" xml:space="preserve">
          <source>Keyword extern</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a6e421aa23f1681fcb97ab460fe75051a3e013b" translate="yes" xml:space="preserve">
          <source>Keyword false</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad325f8a9f86ad3293235a282313ef21d8bfd594" translate="yes" xml:space="preserve">
          <source>Keyword fn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a25477170e21ac7e2572a740282b4353f075bcfe" translate="yes" xml:space="preserve">
          <source>Keyword for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa09921301016318d19919d413f46e0991eaa034" translate="yes" xml:space="preserve">
          <source>Keyword if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70d230cf570b8b6b9e41e2c04e4b1eecd566cc1c" translate="yes" xml:space="preserve">
          <source>Keyword impl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d1b8618ebc37a044f2789a54f15fcc89bca4b48" translate="yes" xml:space="preserve">
          <source>Keyword in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e45321f53ba7f20aaa2734b8d92fce994255c877" translate="yes" xml:space="preserve">
          <source>Keyword let</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b17d0119a3acf3683a3f63c42ae8a1a62b0f2bec" translate="yes" xml:space="preserve">
          <source>Keyword loop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08770e678060c19974b3fc3b3f50ffe441004b2d" translate="yes" xml:space="preserve">
          <source>Keyword match</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb89d3478115288bccdf47fcaee875e6e9dec53b" translate="yes" xml:space="preserve">
          <source>Keyword mod</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fcfe7efe61a879544f9458d60ef298a6eae68ef" translate="yes" xml:space="preserve">
          <source>Keyword move</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f403359a67fdeb4f9a69ff28eebe446a15425c" translate="yes" xml:space="preserve">
          <source>Keyword mut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aad2726454c0cfe99c64b86b5506fbc780aba60" translate="yes" xml:space="preserve">
          <source>Keyword pub</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd01e715bc85516f46378428fd84c2baadd44546" translate="yes" xml:space="preserve">
          <source>Keyword ref</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d24ace1f65b53c2f9e03ed8271b08e7fc77ee6d" translate="yes" xml:space="preserve">
          <source>Keyword return</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17548e2276001357bd22942d19f5cb00544567f5" translate="yes" xml:space="preserve">
          <source>Keyword static</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05f8b04e053f5e1b453e9b0b93670f8ffca49cf9" translate="yes" xml:space="preserve">
          <source>Keyword struct</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c230764a5d99ee580877e7cde563c5c1768ec51f" translate="yes" xml:space="preserve">
          <source>Keyword super</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48effa325ed166316a6e508bc8da17af9983e809" translate="yes" xml:space="preserve">
          <source>Keyword trait</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3092260b25ab0be886a76ed515be7af36594b34e" translate="yes" xml:space="preserve">
          <source>Keyword true</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48b8acd5cc92e931fbcf08f4564de6254a3688f3" translate="yes" xml:space="preserve">
          <source>Keyword type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df96c1b537e86440f56db5003c98baa08726505b" translate="yes" xml:space="preserve">
          <source>Keyword union</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16040d77331d2a3b59872c42f67d3f8a96b1c3dd" translate="yes" xml:space="preserve">
          <source>Keyword unsafe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f29c9f829c3c510995b3f7cdf3202a3d7c402a35" translate="yes" xml:space="preserve">
          <source>Keyword use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe4e85de0c4f74847bd8e598f60609044af0ee40" translate="yes" xml:space="preserve">
          <source>Keyword where</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d7b00f33afab4f85be61beaf96d76b0462792b9" translate="yes" xml:space="preserve">
          <source>Keyword while</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f530db58b3e5088dc7412c6d2298ba3f8456bdeb" translate="yes" xml:space="preserve">
          <source>Keywords</source>
          <target state="translated">Keywords</target>
        </trans-unit>
        <trans-unit id="e3640301ed0023ff94e08911cc76aa75eb8d7a5e" translate="yes" xml:space="preserve">
          <source>Keywords Currently in Use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a1e43b45921c00d897b3f014078137489061012" translate="yes" xml:space="preserve">
          <source>Keywords Reserved for Future Use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8894c6a0dbced6c16c0d9df706a39a96c0879833" translate="yes" xml:space="preserve">
          <source>Knowing that you can take slices of literals and &lt;code&gt;String&lt;/code&gt; values leads us to one more improvement on &lt;code&gt;first_word&lt;/code&gt;, and that&amp;rsquo;s its signature:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5025143a89e9b224781aa62468c0e2c91c66496" translate="yes" xml:space="preserve">
          <source>Known Issues</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3ae07e851fde32543939729ee80148fb0ebdf41" translate="yes" xml:space="preserve">
          <source>Known bugs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e70d2e585c390da7abcf2a3249245e0e36e0092" translate="yes" xml:space="preserve">
          <source>LAST</source>
          <target state="translated">LAST</target>
        </trans-unit>
        <trans-unit id="7c94d83254a2ffa0762a5bfff0ef000108b0fbf6" translate="yes" xml:space="preserve">
          <source>LAST(&lt;code&gt;$( $d:ident $e:expr );* $(h)* $( f ;)+ g&lt;/code&gt;) = { &lt;code&gt;g&lt;/code&gt; }</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e400fae22d0553b70188e398d3482c7e98a473b0" translate="yes" xml:space="preserve">
          <source>LAST(&lt;code&gt;$( $d:ident $e:expr );* $(h)* $( f ;)+&lt;/code&gt;) = { &lt;code&gt;;&lt;/code&gt; }</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4251e0f413cd3f41f3df9bb22d15a8115a98157" translate="yes" xml:space="preserve">
          <source>LAST(&lt;code&gt;$( $d:ident $e:expr );* $(h)*&lt;/code&gt;) = { &lt;code&gt;$e:expr&lt;/code&gt;, &amp;epsilon;, &lt;code&gt;h&lt;/code&gt; }</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ff61fa787f2c62adc8ee173405366e66cca6711" translate="yes" xml:space="preserve">
          <source>LAST(&lt;code&gt;$( $d:ident $e:expr );*&lt;/code&gt;) = { &lt;code&gt;$e:expr&lt;/code&gt;, &amp;epsilon; }</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37aef063f183280d4f7dc041920c02a28b503744" translate="yes" xml:space="preserve">
          <source>LAST(&lt;code&gt;$d:ident $e:expr&lt;/code&gt;) = { &lt;code&gt;$e:expr&lt;/code&gt; }</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fab544af8af2c23b62871343f4c928563121b43" translate="yes" xml:space="preserve">
          <source>LAST(M), defined by case analysis on M itself (a sequence of token-trees):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f85099a357b111ba1d477f0dbd426a597f6e3435" translate="yes" xml:space="preserve">
          <source>LAST(M): collects the tokens potentially used last when matching a fragment to M.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8ea6b99f854e01dbe363d86b29cecae5304f225" translate="yes" xml:space="preserve">
          <source>LIFETIME_OR_LABEL</source>
          <target state="translated">LIFETIME_OR_LABEL</target>
        </trans-unit>
        <trans-unit id="40a1fdbb26c080098fc98bb4705851d4859ab4d3" translate="yes" xml:space="preserve">
          <source>LIFETIME_OR_LABEL :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46318a9c5b3843dedcc74d3eda791e4202987f7e" translate="yes" xml:space="preserve">
          <source>LIFETIME_TOKEN :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed2747925f72878526dce1d4b02fb7c509e9b22b" translate="yes" xml:space="preserve">
          <source>LINE_COMMENT :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f87b1be490e7f2bd1d43aa401d9acb86c892b5d9" translate="yes" xml:space="preserve">
          <source>LLVM checks the validity of the constraints and the assembly string passed to it. This error implies that LLVM seems something wrong with the inline assembly call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c275bc5d1a4e6d0414829b996cfcec4698e44c4" translate="yes" xml:space="preserve">
          <source>LN_10</source>
          <target state="translated">LN_10</target>
        </trans-unit>
        <trans-unit id="6a259766cb7d3ece474214d8a5b06e89f14ab44c" translate="yes" xml:space="preserve">
          <source>LN_2</source>
          <target state="translated">LN_2</target>
        </trans-unit>
        <trans-unit id="98673bb5e17015cbf16ed84d89d8f970845d818b" translate="yes" xml:space="preserve">
          <source>LOG10_2</source>
          <target state="translated">LOG10_2</target>
        </trans-unit>
        <trans-unit id="66e6842f3da223e16de827da3acf936ddc9d0df5" translate="yes" xml:space="preserve">
          <source>LOG10_E</source>
          <target state="translated">LOG10_E</target>
        </trans-unit>
        <trans-unit id="615a1422d501618265e393e3550ecb5f40f525ea" translate="yes" xml:space="preserve">
          <source>LOG2_10</source>
          <target state="translated">LOG2_10</target>
        </trans-unit>
        <trans-unit id="1e3656097aebf0f10597eae43f1c807651a96817" translate="yes" xml:space="preserve">
          <source>LOG2_E</source>
          <target state="translated">LOG2_E</target>
        </trans-unit>
        <trans-unit id="64b87b109e5db684a74aa921ff29dc63050bf704" translate="yes" xml:space="preserve">
          <source>Lang items are already implemented in the standard library. Unless you are writing a free-standing application (e.g., a kernel), you do not need to provide them yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec882b1a036e4071e5191bd244e46720429e3479" translate="yes" xml:space="preserve">
          <source>Languages without case are not changed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f3396549fa1fe2041e1f31d203c0b16d63a7207" translate="yes" xml:space="preserve">
          <source>Large amounts of data are being stored</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3612663cc19e49c3a2d261d922690a9fc7582ed" translate="yes" xml:space="preserve">
          <source>Largest finite &lt;code&gt;f32&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f275a12dc16bf46e1c9b02d6b9bdd0fdd3cd4f44" translate="yes" xml:space="preserve">
          <source>Largest finite &lt;code&gt;f64&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a58d72036ad47fa0a1439cec22ee87f753fd7e3f" translate="yes" xml:space="preserve">
          <source>Last, but certainly not least, is &lt;a href=&quot;type.result&quot;&gt;&lt;code&gt;io::Result&lt;/code&gt;&lt;/a&gt;. This type is used as the return type of many &lt;code&gt;std::io&lt;/code&gt; functions that can cause an error, and can be returned from your own functions as well. Many of the examples in this module use the &lt;a href=&quot;../../book/appendix-02-operators&quot;&gt;&lt;code&gt;?&lt;/code&gt; operator&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972ad8d8a50397ba8c02433ed8f048eeb4074b85" translate="yes" xml:space="preserve">
          <source>Layout</source>
          <target state="translated">Layout</target>
        </trans-unit>
        <trans-unit id="ae8568d10c64dba6b746ac76005e66dab74cb9ab" translate="yes" xml:space="preserve">
          <source>Layout of a block of memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d4179a87c3ab99e827a9f6e1aa71781644d0b85" translate="yes" xml:space="preserve">
          <source>Layout::align</source>
          <target state="translated">Layout::align</target>
        </trans-unit>
        <trans-unit id="2b7cae98e285326dfa8874cd827b7060dafbb97f" translate="yes" xml:space="preserve">
          <source>Layout::align_to</source>
          <target state="translated">Layout::align_to</target>
        </trans-unit>
        <trans-unit id="6ffbac24ba5cb9cdd880e70819658687db1a163d" translate="yes" xml:space="preserve">
          <source>Layout::array</source>
          <target state="translated">Layout::array</target>
        </trans-unit>
        <trans-unit id="faf545bb524583c428a14d8796fd332e8b1f4538" translate="yes" xml:space="preserve">
          <source>Layout::borrow</source>
          <target state="translated">Layout::borrow</target>
        </trans-unit>
        <trans-unit id="6e7c904826d6356b87a5fd10b67922e27e248f36" translate="yes" xml:space="preserve">
          <source>Layout::borrow_mut</source>
          <target state="translated">Layout::borrow_mut</target>
        </trans-unit>
        <trans-unit id="e98c55355125dbd6a52d2480ae5f678bafc47354" translate="yes" xml:space="preserve">
          <source>Layout::clone</source>
          <target state="translated">Layout::clone</target>
        </trans-unit>
        <trans-unit id="2687d55f8151ff4e3d3dfd56105fc50d005dbef6" translate="yes" xml:space="preserve">
          <source>Layout::clone_from</source>
          <target state="translated">Layout::clone_from</target>
        </trans-unit>
        <trans-unit id="d247f8af0b3641c1febfca5a66104f7e6cd7ae07" translate="yes" xml:space="preserve">
          <source>Layout::clone_into</source>
          <target state="translated">Layout::clone_into</target>
        </trans-unit>
        <trans-unit id="28c4c39a207293b5ac856dadaca01591e69acdf2" translate="yes" xml:space="preserve">
          <source>Layout::eq</source>
          <target state="translated">Layout::eq</target>
        </trans-unit>
        <trans-unit id="807fbd84446164c635ef92d05b4f032e4e469c63" translate="yes" xml:space="preserve">
          <source>Layout::extend</source>
          <target state="translated">Layout::extend</target>
        </trans-unit>
        <trans-unit id="8a66e95e85ef65243dad3fec906d59a444e63307" translate="yes" xml:space="preserve">
          <source>Layout::extend_packed</source>
          <target state="translated">Layout::extend_packed</target>
        </trans-unit>
        <trans-unit id="ebdf1907153114cac58ba5ec846d319f09e3c275" translate="yes" xml:space="preserve">
          <source>Layout::fmt</source>
          <target state="translated">Layout::fmt</target>
        </trans-unit>
        <trans-unit id="aab6fc5da3370994e8eb6ae5619aeb20b2942b01" translate="yes" xml:space="preserve">
          <source>Layout::for_value</source>
          <target state="translated">Layout::for_value</target>
        </trans-unit>
        <trans-unit id="804e6daf71de8cbddc2847d4efac40f08b730f12" translate="yes" xml:space="preserve">
          <source>Layout::from</source>
          <target state="translated">Layout::from</target>
        </trans-unit>
        <trans-unit id="9c52da202dbc1e86eb154e999a408fd8e5fbffba" translate="yes" xml:space="preserve">
          <source>Layout::from_size_align</source>
          <target state="translated">Layout::from_size_align</target>
        </trans-unit>
        <trans-unit id="97f7ac20412edfee9be62fc236598951052b803a" translate="yes" xml:space="preserve">
          <source>Layout::from_size_align_unchecked</source>
          <target state="translated">Layout::from_size_align_unchecked</target>
        </trans-unit>
        <trans-unit id="9cb8530d3128b6bd4c274c8e7e0e34f2f70b863a" translate="yes" xml:space="preserve">
          <source>Layout::into</source>
          <target state="translated">Layout::into</target>
        </trans-unit>
        <trans-unit id="e888b6d02ea4794c5fef327a295c976cc60f99e3" translate="yes" xml:space="preserve">
          <source>Layout::ne</source>
          <target state="translated">Layout::ne</target>
        </trans-unit>
        <trans-unit id="f8038f15aebe6dce4d4de95b3c13e472d2b02064" translate="yes" xml:space="preserve">
          <source>Layout::new</source>
          <target state="translated">Layout::new</target>
        </trans-unit>
        <trans-unit id="c67933e7b53ec19707602158f0983ec3386107e4" translate="yes" xml:space="preserve">
          <source>Layout::pad_to_align</source>
          <target state="translated">Layout::pad_to_align</target>
        </trans-unit>
        <trans-unit id="fb534b2d9180d9c41c85be4f3cc7a5e10900d871" translate="yes" xml:space="preserve">
          <source>Layout::padding_needed_for</source>
          <target state="translated">Layout::padding_needed_for</target>
        </trans-unit>
        <trans-unit id="a53e256b922777e3d8b52ed41502d58861453b8a" translate="yes" xml:space="preserve">
          <source>Layout::repeat</source>
          <target state="translated">Layout::repeat</target>
        </trans-unit>
        <trans-unit id="ac76fcd730f9145d3ef5771a73793f24557f189a" translate="yes" xml:space="preserve">
          <source>Layout::repeat_packed</source>
          <target state="translated">Layout::repeat_packed</target>
        </trans-unit>
        <trans-unit id="39b88a7f119bc78ddb9f4adea7781765100ba7de" translate="yes" xml:space="preserve">
          <source>Layout::size</source>
          <target state="translated">Layout::size</target>
        </trans-unit>
        <trans-unit id="4fc54c6aa1d00c912811a3198ba6c26a31cb141d" translate="yes" xml:space="preserve">
          <source>Layout::to_owned</source>
          <target state="translated">Layout::to_owned</target>
        </trans-unit>
        <trans-unit id="ec3e4dd97b8bdfbb69e8e8a4fe407933742763da" translate="yes" xml:space="preserve">
          <source>Layout::try_from</source>
          <target state="translated">Layout::try_from</target>
        </trans-unit>
        <trans-unit id="e7254c8b2c904f17a579a6512de1c3f53903e338" translate="yes" xml:space="preserve">
          <source>Layout::try_into</source>
          <target state="translated">Layout::try_into</target>
        </trans-unit>
        <trans-unit id="69613b626753f65b515ca28b5fe4fd7436a0a88d" translate="yes" xml:space="preserve">
          <source>Layout::type_id</source>
          <target state="translated">Layout::type_id</target>
        </trans-unit>
        <trans-unit id="6b15514a909ca7b027740ad8a4c4fe6fbfdeead1" translate="yes" xml:space="preserve">
          <source>LayoutErr</source>
          <target state="translated">LayoutErr</target>
        </trans-unit>
        <trans-unit id="18ae5986925972906df162748403c4571a3bd382" translate="yes" xml:space="preserve">
          <source>LayoutErr::borrow</source>
          <target state="translated">LayoutErr::borrow</target>
        </trans-unit>
        <trans-unit id="92579002fabcdb4525eb6353397c1fc960583290" translate="yes" xml:space="preserve">
          <source>LayoutErr::borrow_mut</source>
          <target state="translated">LayoutErr::borrow_mut</target>
        </trans-unit>
        <trans-unit id="1c9995b499c2000f5ea89f003f69988ad4d9295a" translate="yes" xml:space="preserve">
          <source>LayoutErr::cause</source>
          <target state="translated">LayoutErr::cause</target>
        </trans-unit>
        <trans-unit id="8694453e9f4b16d83cc25ab2975ab170ff1ad8c9" translate="yes" xml:space="preserve">
          <source>LayoutErr::clone</source>
          <target state="translated">LayoutErr::clone</target>
        </trans-unit>
        <trans-unit id="b630e1b5713feb7087721a06315e5b984a418a6f" translate="yes" xml:space="preserve">
          <source>LayoutErr::clone_from</source>
          <target state="translated">LayoutErr::clone_from</target>
        </trans-unit>
        <trans-unit id="c42cb73e4c87ec15d8bccdf73bd650c9df417b9b" translate="yes" xml:space="preserve">
          <source>LayoutErr::clone_into</source>
          <target state="translated">LayoutErr::clone_into</target>
        </trans-unit>
        <trans-unit id="3d5c517ec7fe54611274ae766b7e9a7911dc4865" translate="yes" xml:space="preserve">
          <source>LayoutErr::description</source>
          <target state="translated">LayoutErr::description</target>
        </trans-unit>
        <trans-unit id="497868f6f797da1325f8a9e9334379ca52fe4d37" translate="yes" xml:space="preserve">
          <source>LayoutErr::eq</source>
          <target state="translated">LayoutErr::eq</target>
        </trans-unit>
        <trans-unit id="3e42ce22d91446434898d46efd3223372301d536" translate="yes" xml:space="preserve">
          <source>LayoutErr::fmt</source>
          <target state="translated">LayoutErr::fmt</target>
        </trans-unit>
        <trans-unit id="73c4ad8234e8ca96453bac67aff91d0248f854d8" translate="yes" xml:space="preserve">
          <source>LayoutErr::from</source>
          <target state="translated">LayoutErr::from</target>
        </trans-unit>
        <trans-unit id="c3349dca57dd20451bc1fb01674dae961d63e9ce" translate="yes" xml:space="preserve">
          <source>LayoutErr::into</source>
          <target state="translated">LayoutErr::into</target>
        </trans-unit>
        <trans-unit id="f0f74e1ec8093e352aa9e8a3fd380fef9597b057" translate="yes" xml:space="preserve">
          <source>LayoutErr::ne</source>
          <target state="translated">LayoutErr::ne</target>
        </trans-unit>
        <trans-unit id="13438de55c63f100651925816f56012c5f1b1197" translate="yes" xml:space="preserve">
          <source>LayoutErr::source</source>
          <target state="translated">LayoutErr::source</target>
        </trans-unit>
        <trans-unit id="3bbdcbefa6e28507c6b0c6c634c7c7dc826a8bf4" translate="yes" xml:space="preserve">
          <source>LayoutErr::to_owned</source>
          <target state="translated">LayoutErr::to_owned</target>
        </trans-unit>
        <trans-unit id="2ec834ea6aa3644afac64a7ad23be1e1d6c10755" translate="yes" xml:space="preserve">
          <source>LayoutErr::to_string</source>
          <target state="translated">LayoutErr::to_string</target>
        </trans-unit>
        <trans-unit id="569d09cda7ad780d06bfd86cc93c53c21d1d507f" translate="yes" xml:space="preserve">
          <source>LayoutErr::try_from</source>
          <target state="translated">LayoutErr::try_from</target>
        </trans-unit>
        <trans-unit id="da95ddd29b8a42941df811e96eda4d3f3b529f15" translate="yes" xml:space="preserve">
          <source>LayoutErr::try_into</source>
          <target state="translated">LayoutErr::try_into</target>
        </trans-unit>
        <trans-unit id="b157e123211e4f6e633b31e52c5a1dcb6f18cc93" translate="yes" xml:space="preserve">
          <source>LayoutErr::type_id</source>
          <target state="translated">LayoutErr::type_id</target>
        </trans-unit>
        <trans-unit id="882d7824546e260d7aecb582ca23a9e9525d35d8" translate="yes" xml:space="preserve">
          <source>Laziness</source>
          <target state="translated">Laziness</target>
        </trans-unit>
        <trans-unit id="1a855a2a58b53f62fc3df50bb4fbd170d6d9104f" translate="yes" xml:space="preserve">
          <source>Lazy boolean operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e07edacb2555a09c495279c3384f36a675435d8d" translate="yes" xml:space="preserve">
          <source>Le</source>
          <target state="translated">Le</target>
        </trans-unit>
        <trans-unit id="5c517a3f3609c8f91e1addb0b08b45eb552a8056" translate="yes" xml:space="preserve">
          <source>Leading and trailing whitespace represent an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171d90f8bc7e44b38d039153f89d2f57be6e9170" translate="yes" xml:space="preserve">
          <source>Leak an I/O object, never closing the file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c87712acc6d428c2446529002e5d51f0d06f2b8" translate="yes" xml:space="preserve">
          <source>Leaks of memory and other resources</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a0f6a000e4abc155c2355349886b493447a871e" translate="yes" xml:space="preserve">
          <source>Learn a bit about TCP and HTTP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2c694f6b8cb7b00330c4d48a5ced6de4ae07bc6" translate="yes" xml:space="preserve">
          <source>Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via &lt;code&gt;Deref&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbc8d1a601145e0b8a0f4e2783062a13702a5915" translate="yes" xml:space="preserve">
          <source>Leaves the original Result in-place, creating a new one with a reference to the original one, additionally coercing both the &lt;code&gt;Ok&lt;/code&gt; and &lt;code&gt;Err&lt;/code&gt; arms of the Result via &lt;code&gt;Deref&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35c9a587594a401fda69e05b935e4d8b2ac65ada" translate="yes" xml:space="preserve">
          <source>Leaves the original Result in-place, creating a new one with a reference to the original one, additionally coercing the &lt;code&gt;Err&lt;/code&gt; arm of the Result via &lt;code&gt;Deref&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50d3f8b919eb6aee8c76227d9ffbe9d9e4ef3631" translate="yes" xml:space="preserve">
          <source>Leaves the original Result in-place, creating a new one with a reference to the original one, additionally coercing the &lt;code&gt;Ok&lt;/code&gt; arm of the Result via &lt;code&gt;Deref&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494064e70529e54389ad678d759801779c5c72df" translate="yes" xml:space="preserve">
          <source>Left Shift</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="357a167cfbb492462507b9b8569ac04e39500116" translate="yes" xml:space="preserve">
          <source>Left operand in &lt;a href=&quot;expressions/array-expr#array-and-slice-indexing-expressions&quot;&gt;array indexing&lt;/a&gt; expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="802deb5f6a24f0153e1b52a743d60aef22ab93a7" translate="yes" xml:space="preserve">
          <source>Left operand in &lt;a href=&quot;expressions/call-expr&quot;&gt;call expressions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3463667b7fa2b91f4f33b26ea8c6945778008832" translate="yes" xml:space="preserve">
          <source>Left operand in &lt;a href=&quot;expressions/field-expr&quot;&gt;field&lt;/a&gt; expressions.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
