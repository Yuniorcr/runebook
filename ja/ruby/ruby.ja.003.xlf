<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="">
    <body>
      <group id="">
        <trans-unit id="0f3fa5880320837ed021be9395f93bc7c4ed3cbb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; of schemes. If given, resulting regexp matches to URIs whose scheme is one of the match_schemes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6f97966a29801b71f873f117478e1d3a88b0267" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;array#method-i-drop&quot;&gt;&lt;code&gt;drop&lt;/code&gt;&lt;/a&gt; does the opposite of &lt;a href=&quot;array#method-i-take&quot;&gt;&lt;code&gt;take&lt;/code&gt;&lt;/a&gt;, by returning the elements after &lt;code&gt;n&lt;/code&gt; elements have been dropped:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6a1e938d712706176b85389a669fbb3f9960207" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;array#method-i-filter&quot;&gt;&lt;code&gt;Array#filter&lt;/code&gt;&lt;/a&gt; is an alias for &lt;a href=&quot;array#method-i-select&quot;&gt;&lt;code&gt;Array#select&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3a80a0451458360a7a5008a9c870786a9d08a36" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;array#method-i-filter-21&quot;&gt;&lt;code&gt;Array#filter!&lt;/code&gt;&lt;/a&gt; is an alias for &lt;a href=&quot;array#method-i-select-21&quot;&gt;&lt;code&gt;Array#select!&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44ca97b3cc657fff3d0c7b7cf6032241cd580a02" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;array#method-i-select-21&quot;&gt;&lt;code&gt;select!&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;array#method-i-reject-21&quot;&gt;&lt;code&gt;reject!&lt;/code&gt;&lt;/a&gt; are the corresponding destructive methods to &lt;a href=&quot;array#method-i-select&quot;&gt;&lt;code&gt;select&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;array#method-i-reject&quot;&gt;&lt;code&gt;reject&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afde4ef9020016bee5928184e78d858bc74b8d06" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;array#method-i-shelljoin&quot;&gt;&lt;code&gt;Array#shelljoin&lt;/code&gt;&lt;/a&gt; is a shortcut for this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa4d62314b01879178958ebc6d3e55ee8dd96947" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;array#method-i-sum&quot;&gt;&lt;code&gt;Array#sum&lt;/code&gt;&lt;/a&gt; method may not respect method redefinition of &amp;ldquo;+&amp;rdquo; methods such as &lt;a href=&quot;integer#method-i-2B&quot;&gt;&lt;code&gt;Integer#+&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83742196c75817787ee9d20527e5d7d170b14ff7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;array#method-i-unshift&quot;&gt;&lt;code&gt;unshift&lt;/code&gt;&lt;/a&gt; will add a new item to the beginning of an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7038ff0ed9676eee41dd43e3762c9f9b1fdfc33" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;asn1#UNIVERSAL_TAG_NAME&quot;&gt;&lt;code&gt;UNIVERSAL_TAG_NAME&lt;/code&gt;&lt;/a&gt; constant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0723427447ee3b89cec25d2e4ee7a2ebddc2e28" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;asn1/constructive&quot;&gt;&lt;code&gt;Constructive&lt;/code&gt;&lt;/a&gt; is, as its name implies, the base class for all constructed encodings, i.e. those that consist of several values, opposed to &amp;ldquo;primitive&amp;rdquo; encodings with just one single value. The value of an &lt;a href=&quot;asn1/constructive&quot;&gt;&lt;code&gt;Constructive&lt;/code&gt;&lt;/a&gt; is always an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94f27867843da6dcae6f8b0722c68ee9476ac73d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;base&quot;&gt;&lt;code&gt;Digest::Base&lt;/code&gt;&lt;/a&gt; provides a common interface to message digest classes written in C. These classes must provide a struct of type rb_digest_metadata_t:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53251cd4a9559c8e8964da978cb8816dc3252fd9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;basicobject&quot;&gt;&lt;code&gt;BasicObject&lt;/code&gt;&lt;/a&gt; can be used for creating object hierarchies independent of Ruby's object hierarchy, proxy objects like the &lt;a href=&quot;delegator&quot;&gt;&lt;code&gt;Delegator&lt;/code&gt;&lt;/a&gt; class, or other uses where namespace pollution from Ruby's methods and classes must be avoided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07de0e2ca99ec04b06535539389a45928e614a3e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;basicobject&quot;&gt;&lt;code&gt;BasicObject&lt;/code&gt;&lt;/a&gt; does not include &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt; (for methods like &lt;code&gt;puts&lt;/code&gt;) and &lt;a href=&quot;basicobject&quot;&gt;&lt;code&gt;BasicObject&lt;/code&gt;&lt;/a&gt; is outside of the namespace of the standard library so common classes will not be found without using a full class path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feccdb78eed150c50ae3e353720739028f32f821" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;basicobject&quot;&gt;&lt;code&gt;BasicObject&lt;/code&gt;&lt;/a&gt; is the parent class of all classes in Ruby. It's an explicit blank class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e311b677f119e55ac77d4bcc47c28b8b296ddb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;basicsocket&quot;&gt;&lt;code&gt;BasicSocket&lt;/code&gt;&lt;/a&gt; is the super class for all the &lt;a href=&quot;socket&quot;&gt;&lt;code&gt;Socket&lt;/code&gt;&lt;/a&gt; classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3da5b901f19310e1856934aab174d7b62bc0d0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;basicsocket#method-i-recv_nonblock&quot;&gt;&lt;code&gt;BasicSocket#recv_nonblock&lt;/code&gt;&lt;/a&gt; may raise any error corresponding to recvfrom(2) failure, including Errno::EWOULDBLOCK.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ea3a011301f0c527f0a68e5b9aebc4d590383d5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;basicsocket#method-i-sendmsg_nonblock&quot;&gt;&lt;code&gt;sendmsg_nonblock&lt;/code&gt;&lt;/a&gt; sends a message using sendmsg(2) system call in non-blocking manner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e3914bd1eb4fca889af918e11e619a42f9d9f5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;benchmark#method-i-bmbm&quot;&gt;&lt;code&gt;bmbm&lt;/code&gt;&lt;/a&gt; yields a Benchmark::Job object and returns an array of &lt;a href=&quot;benchmark/tms&quot;&gt;&lt;code&gt;Benchmark::Tms&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2190c5b9d7e7156867b7c61cf6ee309433e738d3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;bigdecimal&quot;&gt;&lt;code&gt;BigDecimal&lt;/code&gt;&lt;/a&gt; is released under the Ruby and 2-clause BSD licenses. See LICENSE.txt for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a152225383512153c901654314fe69daea46d00e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;bigdecimal&quot;&gt;&lt;code&gt;BigDecimal&lt;/code&gt;&lt;/a&gt; provides arbitrary-precision floating point decimal arithmetic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d78270fe9ee3e0a7bfae4527910f216472ec94bc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;bigdecimal&quot;&gt;&lt;code&gt;BigDecimal&lt;/code&gt;&lt;/a&gt; provides similar support for very large or very accurate floating point numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2231b18e08c4eb1b8cc7481b7559da0048b97b60" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;bigdecimal&quot;&gt;&lt;code&gt;BigDecimal&lt;/code&gt;&lt;/a&gt; sometimes needs to return infinity, for example if you divide a value by zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="112ab2ff97c7e9defeb5688a1595d7a38a6f53a8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;bigdecimal#EXCEPTION_NaN&quot;&gt;&lt;code&gt;BigDecimal::EXCEPTION_NaN&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;bigdecimal#EXCEPTION_INFINITY&quot;&gt;&lt;code&gt;BigDecimal::EXCEPTION_INFINITY&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;bigdecimal#EXCEPTION_UNDERFLOW&quot;&gt;&lt;code&gt;BigDecimal::EXCEPTION_UNDERFLOW&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;bigdecimal#EXCEPTION_OVERFLOW&quot;&gt;&lt;code&gt;BigDecimal::EXCEPTION_OVERFLOW&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;bigdecimal#EXCEPTION_ZERODIVIDE&quot;&gt;&lt;code&gt;BigDecimal::EXCEPTION_ZERODIVIDE&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;bigdecimal#EXCEPTION_ALL&quot;&gt;&lt;code&gt;BigDecimal::EXCEPTION_ALL&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;bigdecimal#EXCEPTION_NaN&quot;&gt;&lt;code&gt;BigDecimal::EXCEPTION_NaN&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;bigdecimal#EXCEPTION_INFINITY&quot;&gt;&lt;code&gt;BigDecimal::EXCEPTION_INFINITY&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;bigdecimal#EXCEPTION_UNDERFLOW&quot;&gt;&lt;code&gt;BigDecimal::EXCEPTION_UNDERFLOW&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;bigdecimal#EXCEPTION_OVERFLOW&quot;&gt;&lt;code&gt;BigDecimal::EXCEPTION_OVERFLOW&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;bigdecimal#EXCEPTION_ZERODIVIDE&quot;&gt;&lt;code&gt;BigDecimal::EXCEPTION_ZERODIVIDE&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;bigdecimal#EXCEPTION_ALL&quot;&gt;&lt;code&gt;BigDecimal::EXCEPTION_ALL&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b22e27b7afa9d51692ed03a8689b8e6531828d57" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;bigdecimal#ROUND_CEILING&quot;&gt;&lt;code&gt;ROUND_CEILING&lt;/code&gt;&lt;/a&gt;, :ceiling, :ceil</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb9b82da47ad2b31dbcf35f5a025976c347b4f0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;bigdecimal#ROUND_DOWN&quot;&gt;&lt;code&gt;ROUND_DOWN&lt;/code&gt;&lt;/a&gt;, :down, :truncate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="675a0a9412f3b03cda169d7e6a9f90aed57092bb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;bigdecimal#ROUND_FLOOR&quot;&gt;&lt;code&gt;ROUND_FLOOR&lt;/code&gt;&lt;/a&gt;, :floor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b188bffefd35f3247409137b7530690af239e2b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;bigdecimal#ROUND_HALF_DOWN&quot;&gt;&lt;code&gt;ROUND_HALF_DOWN&lt;/code&gt;&lt;/a&gt;, :half_down</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de13b925c48f75bc526bca58911b37d76dd0da45" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;bigdecimal#ROUND_HALF_EVEN&quot;&gt;&lt;code&gt;ROUND_HALF_EVEN&lt;/code&gt;&lt;/a&gt;, :half_even, :banker</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b971a5f3f4b04ed32cd2942073b79f1605613533" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;bigdecimal#ROUND_HALF_UP&quot;&gt;&lt;code&gt;ROUND_HALF_UP&lt;/code&gt;&lt;/a&gt;, :half_up, :default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c6ea5fdd4a44eb55c9ea0c84b75e2adae6d8dc7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;bigdecimal#ROUND_UP&quot;&gt;&lt;code&gt;ROUND_UP&lt;/code&gt;&lt;/a&gt;, :up</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4bc5c0728d151bf1d66bfd2d8a18fd607f508ba" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;binding&quot;&gt;&lt;code&gt;Binding&lt;/code&gt;&lt;/a&gt; objects have no class-specific methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a0ca0c9b8a91d7269030ab8b55bb4b7d8a2426" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;bodytypeattachment&quot;&gt;&lt;code&gt;Net::IMAP::BodyTypeAttachment&lt;/code&gt;&lt;/a&gt; represents attachment body structures of messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b35841c996b8e8f7df33e0f4f0d41845f47c9fef" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;bodytypebasic&quot;&gt;&lt;code&gt;Net::IMAP::BodyTypeBasic&lt;/code&gt;&lt;/a&gt; represents basic body structures of messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="739ae3c88367bbfdc394369152e9d6ffc2cd8223" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;bodytypemessage&quot;&gt;&lt;code&gt;Net::IMAP::BodyTypeMessage&lt;/code&gt;&lt;/a&gt; represents MESSAGE/RFC822 body structures of messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="451b9a367eaadd9b6cde691526505d09894f742e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;bodytypemultipart&quot;&gt;&lt;code&gt;Net::IMAP::BodyTypeMultipart&lt;/code&gt;&lt;/a&gt; represents multipart body structures of messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eecc5c4d20d37cc74988cca2fc279a3cdbaddb51" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;bodytypetext&quot;&gt;&lt;code&gt;Net::IMAP::BodyTypeText&lt;/code&gt;&lt;/a&gt; represents TEXT body structures of messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="370523fa9d613ac21680743471856ca998a60601" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;buffering#method-i-read_nonblock&quot;&gt;&lt;code&gt;OpenSSL::Buffering#read_nonblock&lt;/code&gt;&lt;/a&gt; needs two rescue clause as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecc44988bb11ef0f8691289e235affa85520b283" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;buffering#method-i-write_nonblock&quot;&gt;&lt;code&gt;write_nonblock&lt;/code&gt;&lt;/a&gt; returns number of bytes written to the &lt;a href=&quot;ssl&quot;&gt;&lt;code&gt;SSL&lt;/code&gt;&lt;/a&gt; connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afcb55491adabe140cefbafe390c62352162a6e9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;certificate&quot;&gt;&lt;code&gt;Certificate&lt;/code&gt;&lt;/a&gt; is capable of handling DER-encoded certificates and certificates encoded in OpenSSL's PEM format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8538c583d41cf35cffb04aa263518376190b9c97" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;cgi&quot;&gt;&lt;code&gt;CGI&lt;/code&gt;&lt;/a&gt; is a large class, providing several categories of methods, many of which are mixed in from other modules. Some of the documentation is in this class, some in the modules &lt;a href=&quot;cgi/queryextension&quot;&gt;&lt;code&gt;CGI::QueryExtension&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;cgi/htmlextension&quot;&gt;&lt;code&gt;CGI::HtmlExtension&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;cgi/cookie&quot;&gt;&lt;code&gt;CGI::Cookie&lt;/code&gt;&lt;/a&gt; for specific information on handling cookies, and cgi/session.rb (CGI::Session) for information on sessions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c0b57229848dadf41ce18b3ffaf67e1a1806a6a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;chain&quot;&gt;&lt;code&gt;Enumerator::Chain&lt;/code&gt;&lt;/a&gt; is a subclass of &lt;a href=&quot;../enumerator&quot;&gt;&lt;code&gt;Enumerator&lt;/code&gt;&lt;/a&gt;, which represents a chain of enumerables that works as a single enumerator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4da0f46b9bbbcadf01ff8a9083d296988c49f0e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;cipher#method-i-key-3D&quot;&gt;&lt;code&gt;key=&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;cipher#method-i-iv-3D&quot;&gt;&lt;code&gt;iv=&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;cipher#method-i-random_key&quot;&gt;&lt;code&gt;random_key&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;cipher#method-i-random_iv&quot;&gt;&lt;code&gt;random_iv&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;cipher#method-i-pkcs5_keyivgen&quot;&gt;&lt;code&gt;pkcs5_keyivgen&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa3fcde9f835ab7fae32eee9324bdfd873d7ac0c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;class&quot;&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;module&quot;&gt;&lt;code&gt;Module&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ba5dc952d9922f77db0538f5d4938eade14d391" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;class&quot;&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/a&gt; tree</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f397eceeda829fca324e57b8a0f628987087701c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;class&quot;&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/a&gt;&lt;code&gt;Socket&lt;/code&gt; provides access to the underlying operating system socket implementations. It can be used to provide more operating system specific functionality than the protocol-specific socket classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="837611ad65a9781bc15bb039e96c6f3e34f220ce" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;closedqueueerror&quot;&gt;&lt;code&gt;ClosedQueueError&lt;/code&gt;&lt;/a&gt; is inherited from &lt;a href=&quot;stopiteration&quot;&gt;&lt;code&gt;StopIteration&lt;/code&gt;&lt;/a&gt;, so that you can break loop block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49abb6c0753e1acc6fcb88fd059c9a925d1dd2a8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;cmath&quot;&gt;&lt;code&gt;CMath&lt;/code&gt;&lt;/a&gt; is a library that provides trigonometric and transcendental functions for complex numbers. The functions in this module accept integers, floating-point numbers or complex numbers as arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae7383055d16dda07c492f72b20c42dccc06329a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;completion&quot;&gt;&lt;code&gt;Completion&lt;/code&gt;&lt;/a&gt; for hash key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2a2650dd99c97d77154b7ed3e917a1712b32ab4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;complex&quot;&gt;&lt;code&gt;Complex&lt;/code&gt;&lt;/a&gt; object can be created as literal, and also by using Kernel#Complex, &lt;a href=&quot;complex#method-c-rect&quot;&gt;&lt;code&gt;Complex::rect&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;complex#method-c-polar&quot;&gt;&lt;code&gt;Complex::polar&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;complex#method-i-to_c&quot;&gt;&lt;code&gt;to_c&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c004ead73b01eeb6051b8e7485cd8cb151ed6b5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;conditionvariable&quot;&gt;&lt;code&gt;ConditionVariable&lt;/code&gt;&lt;/a&gt; objects augment class &lt;a href=&quot;mutex&quot;&gt;&lt;code&gt;Mutex&lt;/code&gt;&lt;/a&gt;. Using condition variables, it is possible to suspend while in the middle of a critical section until a resource becomes available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="399d58f987fc3114d4f173bcc15629d3618115b7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;constants&quot;&gt;&lt;code&gt;File::Constants&lt;/code&gt;&lt;/a&gt; provides file-related constants. All possible file constants are listed in the documentation but they may not all be present on your platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a60bf00e9a45c5cd5bca676d12b76330675a6d6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;constants&quot;&gt;&lt;code&gt;Socket::Constants&lt;/code&gt;&lt;/a&gt; provides socket-related constants. All possible socket constants are listed in the documentation but they may not all be present on your platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d75eec08bdb6092ca676b0165ad3b293f93b0df" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;continuation&quot;&gt;&lt;code&gt;Continuation&lt;/code&gt;&lt;/a&gt; objects are generated by &lt;a href=&quot;kernel#method-i-callcc&quot;&gt;&lt;code&gt;Kernel#callcc&lt;/code&gt;&lt;/a&gt;, after having +require+d &lt;em&gt;continuation&lt;/em&gt;. They hold a return address and execution context, allowing a nonlocal return to the end of the &lt;code&gt;callcc&lt;/code&gt; block from anywhere within a program. Continuations are somewhat analogous to a structured version of C's &lt;code&gt;setjmp/longjmp&lt;/code&gt; (although they contain more state, so you might consider them closer to threads).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8540d35564c2e2579f024ffd4c444631b0018adc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;converter#method-c-new&quot;&gt;&lt;code&gt;Encoding::Converter.new&lt;/code&gt;&lt;/a&gt; creates an instance of &lt;a href=&quot;converter&quot;&gt;&lt;code&gt;Encoding::Converter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1ba08dbdf592f4c486ca0a7f032d32d97b6b39f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;converter#method-c-new&quot;&gt;&lt;code&gt;Encoding::Converter.new&lt;/code&gt;&lt;/a&gt; optionally takes an option. The option should be a hash or an integer. The option hash can contain :invalid =&amp;gt; nil, etc. The option integer should be logical-or of constants such as &lt;a href=&quot;converter#INVALID_REPLACE&quot;&gt;&lt;code&gt;Encoding::Converter::INVALID_REPLACE&lt;/code&gt;&lt;/a&gt;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2e99bf567a49d725a5d02b8cb46bbb38ec4a909" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;converter#method-i-primitive_convert&quot;&gt;&lt;code&gt;primitive_convert&lt;/code&gt;&lt;/a&gt; converts source_buffer into destination_buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da0d9d6ea94f2f98b0a25e272f05981f55eca88f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;converter#method-i-primitive_convert&quot;&gt;&lt;code&gt;primitive_convert&lt;/code&gt;&lt;/a&gt; converts the content of source_buffer from beginning and store the result into destination_buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad19bb700879bd5933b3657075fedd4a0bfb4bc8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;converter#method-i-primitive_convert&quot;&gt;&lt;code&gt;primitive_convert&lt;/code&gt;&lt;/a&gt; drops the converted part of source_buffer. the dropped part is converted in destination_buffer or buffered in &lt;a href=&quot;converter&quot;&gt;&lt;code&gt;Encoding::Converter&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05a51ca23ab15ff864254b158c15545900105645" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;converter#method-i-primitive_convert&quot;&gt;&lt;code&gt;primitive_convert&lt;/code&gt;&lt;/a&gt; stops conversion when one of following condition met.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981d0c7aeca16d00941e5a5432a9776e3fdd0ace" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;converter#method-i-primitive_errinfo&quot;&gt;&lt;code&gt;primitive_errinfo&lt;/code&gt;&lt;/a&gt; returns important information regarding the last error as a 5-element array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c49644c8d40fd0a26d0df83bc14e30a281905b0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;coverage&quot;&gt;&lt;code&gt;Coverage&lt;/code&gt;&lt;/a&gt; provides coverage measurement feature for Ruby. This feature is experimental, so these APIs may be changed in future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb5a817cbc3189786061cc523d66d81fec5c938b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;coverage#method-c-result&quot;&gt;&lt;code&gt;Coverage.result&lt;/code&gt;&lt;/a&gt; will return a hash that contains filename as key and coverage array as value. A coverage array gives, for each line, the number of line execution by the interpreter. A &lt;code&gt;nil&lt;/code&gt; value means coverage is disabled for this line (lines like &lt;code&gt;else&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="315e024dd05aa0a273a79703d201d76eea3f6964" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;csv&quot;&gt;&lt;code&gt;CSV&lt;/code&gt;&lt;/a&gt; allows to provide a set of data &lt;em&gt;converters&lt;/em&gt; e.g. transformations to try on input data. Converter could be a symbol from &lt;a href=&quot;csv#Converters&quot;&gt;&lt;code&gt;CSV::Converters&lt;/code&gt;&lt;/a&gt; constant's keys, or lambda.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d52d2f1a61aa0cbd01e398ef6248e56a48f15dd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;csv&quot;&gt;&lt;code&gt;CSV&lt;/code&gt;&lt;/a&gt; allows to specify column names of &lt;a href=&quot;csv&quot;&gt;&lt;code&gt;CSV&lt;/code&gt;&lt;/a&gt; file, whether they are in data, or provided separately. If headers specified, reading methods return an instance of &lt;a href=&quot;csv/table&quot;&gt;&lt;code&gt;CSV::Table&lt;/code&gt;&lt;/a&gt;, consisting of &lt;a href=&quot;csv/row&quot;&gt;&lt;code&gt;CSV::Row&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb33990100b62a61a184a48f40fecefb221aaa05" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;csv&quot;&gt;&lt;code&gt;CSV&lt;/code&gt;&lt;/a&gt; and Character Encodings (M17n or Multilingualization)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39737766bd6f2187fd7cbe6e47999c8e97a8d8ff" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;csv&quot;&gt;&lt;code&gt;CSV&lt;/code&gt;&lt;/a&gt; with headers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5149a921d6ac7ca1479287170cb4a7f2a426f253" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;csv#method-i-to_i&quot;&gt;&lt;code&gt;to_i&lt;/code&gt;&lt;/a&gt;()</source>
          <target state="translated">&lt;a href=&quot;csv#method-i-to_i&quot;&gt;&lt;code&gt;to_i&lt;/code&gt;&lt;/a&gt;()</target>
        </trans-unit>
        <trans-unit id="fe8f1603cd8da25f0007705cc825315bb4c8fd6f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;csv#method-i-to_io&quot;&gt;&lt;code&gt;to_io&lt;/code&gt;&lt;/a&gt;()</source>
          <target state="translated">&lt;a href=&quot;csv#method-i-to_io&quot;&gt;&lt;code&gt;to_io&lt;/code&gt;&lt;/a&gt;()</target>
        </trans-unit>
        <trans-unit id="68252e8d6948dac60ac8fa452c06a51577a9e700" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; &amp;ndash; Anything accepted by &lt;code&gt;Date.parse&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd52cc4339a4d01385deb0296b08658e96e19ca5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; (%m/%d/%y)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5429a3d0a3a3a1e3201bde470a4666196e21b498" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; and time format. Default value is '%Y-%m-%d %H:%M:%S'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76b6460bb0d9ca07cceb3a00fe31b32224b812a4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;datetime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; &amp;ndash; Anything accepted by &lt;code&gt;DateTime.parse&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df322c69b7f6acbe9506a2af5f69d52c773683f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;datetime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; does not consider any leap seconds, does not track any summer time rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81758592d529751595d886166a4f81f49ae6ddf5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;dbm&quot;&gt;&lt;code&gt;YAML::DBM&lt;/code&gt;&lt;/a&gt; provides the same interface as &lt;a href=&quot;../dbm&quot;&gt;&lt;code&gt;::DBM&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="803a7fb00c1b06d4c4bfdd65a18f43c11da99e5d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;deflate&quot;&gt;&lt;code&gt;Zlib::Deflate&lt;/code&gt;&lt;/a&gt; is the class for compressing data. See &lt;a href=&quot;zstream&quot;&gt;&lt;code&gt;Zlib::ZStream&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d63acaf1d4bd41359c07192b7bfe8577e35195" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;digest&quot;&gt;&lt;code&gt;Digest&lt;/code&gt;&lt;/a&gt; algorithms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a1ca70c8b642f06843222b270954442abd53c9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;digest&quot;&gt;&lt;code&gt;OpenSSL::Digest&lt;/code&gt;&lt;/a&gt; allows you to compute message digests (sometimes interchangeably called &amp;ldquo;hashes&amp;rdquo;) of arbitrary data that are cryptographically secure, i.e. a &lt;a href=&quot;digest&quot;&gt;&lt;code&gt;Digest&lt;/code&gt;&lt;/a&gt; implements a secure one-way function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98811c17c3dc2bed10caf40975cdc3449ce50746" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;dir#method-c-chdir&quot;&gt;&lt;code&gt;Dir.chdir&lt;/code&gt;&lt;/a&gt; (without block arg)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d19eea10a1bddedc5185e7fb48b579b00d66ba96" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;dir#method-c-chdir&quot;&gt;&lt;code&gt;Dir.chdir&lt;/code&gt;&lt;/a&gt; with block</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bf14dc98b9d60f48ba870cac69760450536f897" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;dir#method-c-mktmpdir&quot;&gt;&lt;code&gt;Dir.mktmpdir&lt;/code&gt;&lt;/a&gt; creates a temporary directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40b3c3bb2a33e45002d9c03d9211053d8757c688" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;dns&quot;&gt;&lt;code&gt;Resolv::DNS&lt;/code&gt;&lt;/a&gt; is a &lt;a href=&quot;dns&quot;&gt;&lt;code&gt;DNS&lt;/code&gt;&lt;/a&gt; stub resolver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7dfc507555b63a98b4718bb39b6d2627aa49223" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;drbundumped&quot;&gt;DRb::DRbUndumped&lt;/a&gt;, &lt;a href=&quot;../monitormixin&quot;&gt;MonitorMixin&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e196839fe9cf75345f57fc6293ccd50560e3a4f4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;dsa&quot;&gt;&lt;code&gt;DSA&lt;/code&gt;&lt;/a&gt;, the Digital Signature Algorithm, is specified in NIST's FIPS 186-3. It is an asymmetric public key algorithm that may be used similar to e.g. &lt;a href=&quot;rsa&quot;&gt;&lt;code&gt;RSA&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c155b22d2d37cabfa671340ab839d1ef7cffc1b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ec&quot;&gt;&lt;code&gt;OpenSSL::PKey::EC&lt;/code&gt;&lt;/a&gt; provides access to Elliptic Curve Digital Signature Algorithm (ECDSA) and Elliptic Curve Diffie-Hellman (ECDH).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b6f25b87bdb1ba9bb82851677ddbf61be8bd37d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;encoding&quot;&gt;&lt;code&gt;Encoding&lt;/code&gt;&lt;/a&gt; conversion is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="449604d53cdf20e382c8fa4b791604490e810f85" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;encoding#method-c-default_internal&quot;&gt;&lt;code&gt;Encoding::default_internal&lt;/code&gt;&lt;/a&gt; is initialized by the source file's internal_encoding or -E option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9be3aab5ea21f6a43bd9c958881e60009a43d480" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;encodingerror&quot;&gt;&lt;code&gt;EncodingError&lt;/code&gt;&lt;/a&gt; is the base class for encoding errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a038b3d6dff2270c31b0aa75389ade89bf58ac26" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;enumerable&quot;&gt;Enumerable&lt;/a&gt;, &lt;a href=&quot;io/generic_readable&quot;&gt;IO::generic_readable&lt;/a&gt;, &lt;a href=&quot;io/generic_writable&quot;&gt;IO::generic_writable&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1ad0a8a15aa93812c0edff2daeb327328339693" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;enumerable&quot;&gt;Enumerable&lt;/a&gt;, &lt;a href=&quot;singleton&quot;&gt;Singleton&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894b7662b7dfe1fccdeb12a77087ad75212a109b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;enumerable#method-i-chunk_while&quot;&gt;&lt;code&gt;Enumerable#chunk_while&lt;/code&gt;&lt;/a&gt; does the same, except splitting when the block returns &lt;code&gt;false&lt;/code&gt; instead of &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71773591b5a7be6b196260179b0698e774a8eb50" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;enumerable#method-i-cycle&quot;&gt;&lt;code&gt;Enumerable#cycle&lt;/code&gt;&lt;/a&gt; saves elements in an internal array so changes to &lt;em&gt;enum&lt;/em&gt; after the first pass have no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7a9d0d8ecb76fac86b15dee3a33c730250cd075" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;enumerable#method-i-slice_when&quot;&gt;&lt;code&gt;Enumerable#slice_when&lt;/code&gt;&lt;/a&gt; does the same, except splitting when the block returns &lt;code&gt;true&lt;/code&gt; instead of &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d47e09b906210cc781b5588ed207a61db47fd0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;enumerable#method-i-sum&quot;&gt;&lt;code&gt;Enumerable#sum&lt;/code&gt;&lt;/a&gt; method may not respect method redefinition of &amp;ldquo;+&amp;rdquo; methods such as &lt;a href=&quot;integer#method-i-2B&quot;&gt;&lt;code&gt;Integer#+&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b732b2b3804bc1c5d833e7cb10bb40c86b1c93" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;env&quot;&gt;&lt;code&gt;ENV&lt;/code&gt;&lt;/a&gt; is a Hash-like accessor for environment variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fca657e8904424a8b120df0e7d6b03dc0795b0a4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;env&quot;&gt;&lt;code&gt;ENV&lt;/code&gt;&lt;/a&gt; is a hash-like accessor for environment variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3c9e841c5e83b843d9b27dc8042b633e14eecc9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;env#method-c-filter&quot;&gt;&lt;code&gt;ENV.filter&lt;/code&gt;&lt;/a&gt; is an alias for &lt;a href=&quot;env#method-c-select&quot;&gt;&lt;code&gt;ENV.select&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6cbadf12ebe39ebb90b7d513242b48bda405ee6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;env#method-c-filter-21&quot;&gt;&lt;code&gt;ENV.filter!&lt;/code&gt;&lt;/a&gt; is an alias for &lt;a href=&quot;env#method-c-select-21&quot;&gt;&lt;code&gt;ENV.select!&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f1e5c47d080ecfa52344a41218e4a45059fc4a6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;erb&quot;&gt;&lt;code&gt;ERB&lt;/code&gt;&lt;/a&gt; &amp;ndash; Ruby Templating</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88486c5f31251b450f031bf7e024e74df4420b42" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;erb&quot;&gt;&lt;code&gt;ERB&lt;/code&gt;&lt;/a&gt; (or Ruby code generated by &lt;a href=&quot;erb&quot;&gt;&lt;code&gt;ERB&lt;/code&gt;&lt;/a&gt;) returns a string in the same character encoding as the input string. When the input string has a magic comment, however, it returns a string in the encoding specified by the magic comment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50a5bbbbd6b288c6d98959952fbfaa32f3b3219e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;erb&quot;&gt;&lt;code&gt;ERB&lt;/code&gt;&lt;/a&gt; is often used in &lt;code&gt;.rhtml&lt;/code&gt; files (HTML with embedded Ruby). Notice the need in this example to provide a special binding when the template is run, so that the instance variables in the Product object can be resolved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5ea7f92b4ec40194ae220a9ec3f64c018915465" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;erb&quot;&gt;&lt;code&gt;ERB&lt;/code&gt;&lt;/a&gt; is useful for any generic templating situation. Note that in this example, we use the convenient &amp;ldquo;% at start of line&amp;rdquo; tag, and we quote the template literally with &lt;code&gt;%q{...}&lt;/code&gt; to avoid trouble with the backslash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef4115a92bdf965bc27dfd0551b2a152f8326065" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;erb&quot;&gt;&lt;code&gt;ERB&lt;/code&gt;&lt;/a&gt; provides an easy to use but powerful templating system for Ruby. Using &lt;a href=&quot;erb&quot;&gt;&lt;code&gt;ERB&lt;/code&gt;&lt;/a&gt;, actual Ruby code can be added to any plain text document for the purposes of generating document information details and/or flow control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f54503305bdd41206eb741b5003ff44ffbe9fdc2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;erb&quot;&gt;&lt;code&gt;ERB&lt;/code&gt;&lt;/a&gt; recognizes certain tags in the provided template and converts them based on the rules below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4179e670f5c83bd01f22740dd905d7a7aa2f705" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;errno/econnreset&quot;&gt;&lt;code&gt;Errno::ECONNRESET&lt;/code&gt;&lt;/a&gt; - a connection was forcibly closed by a peer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80d370bf8f6823c4694141106b3fa37b42efd2bd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;errno/econnreset&quot;&gt;&lt;code&gt;Errno::ECONNRESET&lt;/code&gt;&lt;/a&gt; - the remote host reset the connection request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a899f7206bb6611b2f1662c5a5b42d58fde2ea45" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;errno/econnreset&quot;&gt;&lt;code&gt;Errno::ECONNRESET&lt;/code&gt;&lt;/a&gt; - the virtual circuit was reset by the remote side executing a hard or abortive close. The application should close the socket; it is no longer usable. On a UDP-datagram socket this error indicates a previous send operation resulted in an ICMP Port Unreachable message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="675acd8d2cd9029edb64adf2abda055864af55d6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;error&quot;&gt;&lt;code&gt;Bundler::Thor::Error&lt;/code&gt;&lt;/a&gt; is raised when it's caused by wrong usage of thor classes. Those errors have their backtrace suppressed and are nicely shown to the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b13902ebb9d3b01655179cc2e2efcd05f464fb5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; class for errors raised by &lt;a href=&quot;../persistent&quot;&gt;&lt;code&gt;Bundler::Persistent::Net::HTTP::Persistent&lt;/code&gt;&lt;/a&gt;. Various SystemCallErrors are re-raised with a human-readable message under this class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa40f32e4607fab5d54116aae70a98a49b63dd8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; raised upon a &amp;ldquo;BAD&amp;rdquo; response from the server, indicating that the client command violated the &lt;a href=&quot;../imap&quot;&gt;&lt;code&gt;IMAP&lt;/code&gt;&lt;/a&gt; protocol, or an internal server failure has occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b2b1b491dd1a8534b4d3beb224baba980cff174" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; raised upon a &amp;ldquo;BYE&amp;rdquo; response from the server, indicating that the client is not being allowed to login, or has been timed out due to inactivity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3446296ccdecba98bdc89f9921a557f416350302" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; raised upon a &amp;ldquo;NO&amp;rdquo; response from the server, indicating that the client command could not be completed successfully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a00c2b5ac6d51aa3b34eec075e7e3b145172e966" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; raised when a response from the server is non-parseable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdcf47994dab9b4ed2d95625271f0dbba3895a5f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; raised when data is in the incorrect format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68142acaa71797fab3ce4ee7f6eff1d050a0aeac" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; raised when too many flags are interned to symbols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af9844a01d83f3c89dbfdf3cafa9f8ca705e3e8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7132f9235d2e770112800c8dd07446ebcaa1a65" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;etc#Group&quot;&gt;&lt;code&gt;Group&lt;/code&gt;&lt;/a&gt; is a &lt;a href=&quot;struct&quot;&gt;&lt;code&gt;Struct&lt;/code&gt;&lt;/a&gt; that is only available when compiled with &lt;code&gt;HAVE_GETGRENT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45a926dfe0d20b144a7580795410e096d42720c9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;etc#Passwd&quot;&gt;&lt;code&gt;Passwd&lt;/code&gt;&lt;/a&gt; is a &lt;a href=&quot;struct&quot;&gt;&lt;code&gt;Struct&lt;/code&gt;&lt;/a&gt; that contains the following members:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf35cb8c19bac0ccf1a130d863b5e744888b6ac1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;etc#method-c-sysconfdir&quot;&gt;&lt;code&gt;Etc.sysconfdir&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;etc#method-c-systmpdir&quot;&gt;&lt;code&gt;Etc.systmpdir&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f06faf63e535a8beab08b7df355e4f24910423" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;exception&quot;&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;/a&gt; Handling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1716b6f76b3d12f2670b819506c451a8eba401bf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;exception&quot;&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;/a&gt; class used to return errors from the dbm library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3498638a0c67425d7e1408cea1732021deae733c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;exception&quot;&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;/a&gt; class used to return errors from the sdbm library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e80964433f3469ba097080b68e6e2566044818fe" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;exception&quot;&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;/a&gt; handling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c30622d7cee98b3549ab11f89fe66d7e9301273b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;exception&quot;&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;/a&gt; message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e70e5db6e544ebf0a97db76dc4f94055dd8b4170" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;exception&quot;&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;class&quot;&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/a&gt; to raise if the block fails to terminate in &lt;code&gt;sec&lt;/code&gt; seconds. Omitting will use the default, &lt;a href=&quot;timeout/error&quot;&gt;&lt;code&gt;Timeout::Error&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ce3e84263e9c8714c57c091e4334911428c7fa" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;falseclass&quot;&gt;&lt;code&gt;FalseClass&lt;/code&gt;&lt;/a&gt; &amp;ndash; Same as &lt;code&gt;TrueClass&lt;/code&gt;, but defaults to &lt;code&gt;false&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f59c65e5684b33f55cbd0c82967775b8d058caee" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;fiddle&quot;&gt;&lt;code&gt;Fiddle&lt;/code&gt;&lt;/a&gt; is an extension to translate a foreign function interface (FFI) with ruby.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a744e13ea86144657afdce7125ba9653bb42fb1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; data read from disk</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfd0b3da010d7f2eabd2618220fe60243573afa0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; data written to disk will be transcoded to the default external encoding when written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe3b1d58ddbfdffad8bf54d0bfa87212cb477711" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; names from &lt;a href=&quot;dir&quot;&gt;&lt;code&gt;Dir&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a50e3cdbd88e0bb9f230d75b5a4f63502a4d6f3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; property and manipulation methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dcf33e06906529107a651efde1160924705a711" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; status predicate methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50cd1cd32af5831ca3601a7aea83ca18aba49191" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; tests on a single file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80c8c607cd9ab67a6ac8d50c34d3d8f2f7b18848" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;file#method-i-flock&quot;&gt;&lt;code&gt;File#flock&lt;/code&gt;&lt;/a&gt;, as the underlying flock(2) call is not specified by POSIX</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72b2dd839b3fef0d89a53b356eb63f1b34119d03" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;file/file/constants&quot;&gt;File::File::Constants&lt;/a&gt;, &lt;a href=&quot;enumerable&quot;&gt;Enumerable&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95310dbe0d891ab8b836f9db7bacc81053a7f3c0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;float&quot;&gt;&lt;code&gt;Float&lt;/code&gt;&lt;/a&gt; &amp;ndash; Any float. (e.g. 10, 3.14, -100E+13)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b231f69051ff50da72b8d32c82586cf05e4941bd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;float&quot;&gt;&lt;code&gt;Float&lt;/code&gt;&lt;/a&gt; objects represent inexact real numbers using the native architecture's double-precision floating point representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64aa9f88b2ded672ebbdc201014bd1a2d5dfd4d1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;float#method-i-magnitude&quot;&gt;&lt;code&gt;Float#magnitude&lt;/code&gt;&lt;/a&gt; is an alias for &lt;a href=&quot;float#method-i-abs&quot;&gt;&lt;code&gt;Float#abs&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb3dd80277fb32e857fc9beca41a68c3a10821cb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;float#method-i-to_int&quot;&gt;&lt;code&gt;to_int&lt;/code&gt;&lt;/a&gt; is an alias for &lt;a href=&quot;float#method-i-to_i&quot;&gt;&lt;code&gt;to_i&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8139f915e6dba2408634892b5477af63252a1af7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ftp&quot;&gt;&lt;code&gt;FTP&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../uri&quot;&gt;&lt;code&gt;URI&lt;/code&gt;&lt;/a&gt; syntax is defined by RFC1738 section 3.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17a462463b2fc2f23514a1c1981f687089869977" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;gc&quot;&gt;&lt;code&gt;GC&lt;/code&gt;&lt;/a&gt; build options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0642a4642aa15f9a7fb03d065cb62e57c7dafe00" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;getoptlong&quot;&gt;&lt;code&gt;GetoptLong&lt;/code&gt;&lt;/a&gt; allows for POSIX-style options like &lt;code&gt;--file&lt;/code&gt; as well as single letter options like &lt;code&gt;-f&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3353e00b5c411199eddacc168c82eceab25782c5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;gzipfile&quot;&gt;&lt;code&gt;Zlib::GzipFile&lt;/code&gt;&lt;/a&gt; is an abstract class for handling a gzip formatted compressed file. The operations are defined in the subclasses, &lt;a href=&quot;gzipreader&quot;&gt;&lt;code&gt;Zlib::GzipReader&lt;/code&gt;&lt;/a&gt; for reading, and &lt;a href=&quot;gzipwriter&quot;&gt;&lt;code&gt;Zlib::GzipWriter&lt;/code&gt;&lt;/a&gt; for writing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15b9da54000abda0493bd079620ada27f275770d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;gzipfile#method-i-orig_name&quot;&gt;&lt;code&gt;orig_name&lt;/code&gt;&lt;/a&gt; (Zlib::GzipWriter#orig_name=)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="284a6d0d4cc42ef5aa68ca495cbcf14699f91482" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;gzipreader&quot;&gt;&lt;code&gt;GzipReader&lt;/code&gt;&lt;/a&gt; should be used by associating an &lt;a href=&quot;../io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt;, or IO-like, object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a39ba80c961f5a2d1e5d2495900723839089997b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;gzipreader&quot;&gt;&lt;code&gt;Zlib::GzipReader&lt;/code&gt;&lt;/a&gt; is the class for reading a gzipped file. &lt;a href=&quot;gzipreader&quot;&gt;&lt;code&gt;GzipReader&lt;/code&gt;&lt;/a&gt; should be used as an &lt;a href=&quot;../io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt;, or -IO-like, object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1883fa6ac3d6daa045d7ec52cdf8a96ad93b7934" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;gzipwriter&quot;&gt;&lt;code&gt;Zlib::GzipWriter&lt;/code&gt;&lt;/a&gt; is a class for writing gzipped files. &lt;a href=&quot;gzipwriter&quot;&gt;&lt;code&gt;GzipWriter&lt;/code&gt;&lt;/a&gt; should be used with an instance of &lt;a href=&quot;../io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt;, or IO-like, object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fc0b198ae318f3223ec4bfcd26553da5be843b3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; Keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5198110e27f57ad0f3a9a0c12cf15f7b9d7d5727" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; with Default Value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a00ce8de56024da008233a5a9f8fbd7adaadb1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; equality&amp;mdash;&lt;code&gt;other&lt;/code&gt; and &lt;code&gt;struct&lt;/code&gt; refer to the same hash key if they have the same struct subclass and have equal member values (according to &lt;a href=&quot;object#method-i-eql-3F&quot;&gt;&lt;code&gt;Object#eql?&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="913aa1f96194e89725e401c4fb503a6374ac202e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; keys with spaces or characters that could normally not be used for method calls (e.g. &lt;code&gt;()[]*&lt;/code&gt;) will not be immediately available on the &lt;a href=&quot;openstruct&quot;&gt;&lt;code&gt;OpenStruct&lt;/code&gt;&lt;/a&gt; object as a method for retrieval or assignment, but can still be reached through the &lt;a href=&quot;object#method-i-send&quot;&gt;&lt;code&gt;Object#send&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="342f06aa19241aaf51f371aa280028ca052f0f8a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6305d9aa00a910283653de25e4c58c10e0b57e12" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;hash#method-i-5B-5D&quot;&gt;&lt;code&gt;Hash#[]&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;hash#method-i-5B-5D-3D&quot;&gt;&lt;code&gt;Hash#[]=&lt;/code&gt;&lt;/a&gt; (unless &lt;a href=&quot;hash#method-c-new&quot;&gt;&lt;code&gt;Hash.new&lt;/code&gt;&lt;/a&gt; was given an unsafe block)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4cfd5fea0cff0eb32d88afb6dc759d262eb2501" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;hash#method-i-filter&quot;&gt;&lt;code&gt;Hash#filter&lt;/code&gt;&lt;/a&gt; is an alias for &lt;a href=&quot;hash#method-i-select&quot;&gt;&lt;code&gt;Hash#select&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb6080d1518c8a90914970e8c87191d16a451182" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;hash#method-i-filter-21&quot;&gt;&lt;code&gt;Hash#filter!&lt;/code&gt;&lt;/a&gt; is an alias for &lt;a href=&quot;hash#method-i-select-21&quot;&gt;&lt;code&gt;Hash#select!&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f772aa753c386c3a0df6d4489c7e6e0d8b27fd3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;hash#method-i-length&quot;&gt;&lt;code&gt;Hash#length&lt;/code&gt;&lt;/a&gt; is an alias for &lt;a href=&quot;hash#method-i-size&quot;&gt;&lt;code&gt;Hash#size&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e987fc96a93647955a9ee17cf47a5f9911f3c1b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;hash#method-i-update&quot;&gt;&lt;code&gt;Hash#update&lt;/code&gt;&lt;/a&gt; is an alias for &lt;a href=&quot;hash#method-i-merge-21&quot;&gt;&lt;code&gt;Hash#merge!&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="add263a2ece7a95fec07585afa01fbc61946980f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;hmac&quot;&gt;&lt;code&gt;OpenSSL::HMAC&lt;/code&gt;&lt;/a&gt; allows computing Hash-based Message Authentication Code (HMAC). It is a type of message authentication code (MAC) involving a hash function in combination with a key. &lt;a href=&quot;hmac&quot;&gt;&lt;code&gt;HMAC&lt;/code&gt;&lt;/a&gt; can be used to verify the integrity of a message as well as the authenticity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0302b2c5346bff92511befe072b6b05b4d498901" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;hmac&quot;&gt;&lt;code&gt;OpenSSL::HMAC&lt;/code&gt;&lt;/a&gt; has a similar interface to &lt;a href=&quot;digest&quot;&gt;&lt;code&gt;OpenSSL::Digest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3eef52f8727a40950d2ca5788060017a4bb2d55" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;hosts&quot;&gt;&lt;code&gt;Resolv::Hosts&lt;/code&gt;&lt;/a&gt; is a hostname resolver that uses the system hosts file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="716f360ca44578b3821a8ca63b1d874343818ccb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http&quot;&gt;&lt;code&gt;HTTP&lt;/code&gt;&lt;/a&gt; Request Classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e7b23bc8d5187b5ae1e9b0be608d2ef9abc199" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http&quot;&gt;&lt;code&gt;HTTP&lt;/code&gt;&lt;/a&gt; Response Classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f45a69c42ffcf659385c7ce43f4b66735c06d1ea" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http&quot;&gt;&lt;code&gt;Net::HTTP&lt;/code&gt;&lt;/a&gt; automatically adds Accept-Encoding for compression of response bodies and automatically decompresses gzip and deflate responses unless a &lt;a href=&quot;../range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; header was sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0815105fcaf495c32576ad95c5313cca1aec332f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http&quot;&gt;&lt;code&gt;Net::HTTP&lt;/code&gt;&lt;/a&gt; exception class. You cannot use &lt;a href=&quot;httpexceptions&quot;&gt;&lt;code&gt;Net::HTTPExceptions&lt;/code&gt;&lt;/a&gt; directly; instead, you must use its subclasses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="737aa0897bb93ff8b9edbd7cae07d8779df5ac60" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http&quot;&gt;&lt;code&gt;Net::HTTP&lt;/code&gt;&lt;/a&gt; is designed to work closely with &lt;a href=&quot;../uri&quot;&gt;&lt;code&gt;URI&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../uri/generic#attribute-i-host&quot;&gt;&lt;code&gt;URI::HTTP#host&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../uri/generic#attribute-i-port&quot;&gt;&lt;code&gt;URI::HTTP#port&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../uri/http#method-i-request_uri&quot;&gt;&lt;code&gt;URI::HTTP#request_uri&lt;/code&gt;&lt;/a&gt; are designed to work with &lt;a href=&quot;http&quot;&gt;&lt;code&gt;Net::HTTP&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ee31510072c89df12484341a0d6981cf9a44a5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http&quot;&gt;&lt;code&gt;Net::HTTP&lt;/code&gt;&lt;/a&gt; provides a rich library which can be used to build &lt;a href=&quot;http&quot;&gt;&lt;code&gt;HTTP&lt;/code&gt;&lt;/a&gt; user-agents. For more details about &lt;a href=&quot;http&quot;&gt;&lt;code&gt;HTTP&lt;/code&gt;&lt;/a&gt; see [RFC2616](&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;www.ietf.org/rfc/rfc2616.txt&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e92d9ef48e7a3ef47c319d23f28c8f23440a1ee" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http&quot;&gt;&lt;code&gt;Net::HTTP&lt;/code&gt;&lt;/a&gt; will automatically create a proxy from the &lt;code&gt;http_proxy&lt;/code&gt; environment variable if it is present. To disable use of &lt;code&gt;http_proxy&lt;/code&gt;, pass &lt;code&gt;nil&lt;/code&gt; for the proxy address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="662e49b99b84b4f0a993b8fb8b60501acf049552" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http#method-c-start&quot;&gt;&lt;code&gt;Net::HTTP::start&lt;/code&gt;&lt;/a&gt; immediately creates a connection to an &lt;a href=&quot;http&quot;&gt;&lt;code&gt;HTTP&lt;/code&gt;&lt;/a&gt; server which is kept open for the duration of the block. The connection will remain open for multiple requests in the block if the server indicates it supports persistent connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c7f394e03a719e09f6b42872add3e8bcbf0e0e4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/Berkeley_DB&quot;&gt;Berkeley DB&lt;/a&gt; versions 1 thru 6, also known as BDB and Sleepycat DB, now owned by Oracle Corporation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72243b1a35dcb4ef9d21171f731aadd756f19a62" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://fallabs.com/qdbm/index.html&quot;&gt;qdbm&lt;/a&gt;, another open source reimplementation of dbm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3feb397f839c1c05935e778789e9088bda4fbb1d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.gnu.org/software/gdbm&quot;&gt;www.gnu.org/software/gdbm&lt;/a&gt;/</source>
          <target state="translated">&lt;a href=&quot;http://www.gnu.org/software/gdbm&quot;&gt;www.gnu.org/software/gdbm&lt;/a&gt;/</target>
        </trans-unit>
        <trans-unit id="b68c4b7a8c9dade764ce0a064fa1f9dcd19e58e5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.gnu.org/software/gdbm/&quot;&gt;gdbm&lt;/a&gt;, the GNU implementation of dbm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95412eec725e208380a50c6aefa39ebc7ecddbb5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.thrysoee.dk/editline&quot;&gt;www.thrysoee.dk/editline&lt;/a&gt;/</source>
          <target state="translated">&lt;a href=&quot;http://www.thrysoee.dk/editline&quot;&gt;www.thrysoee.dk/editline&lt;/a&gt;/</target>
        </trans-unit>
        <trans-unit id="24a26b7acff3b88fa1e9aa7130f86f9a7a89ec71" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;httpgenericrequest&quot;&gt;&lt;code&gt;HTTPGenericRequest&lt;/code&gt;&lt;/a&gt; is the parent of the HTTPRequest class. Do not use this directly; use a subclass of HTTPRequest.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e78816c569c27b7b4eb95d4c0b1175d3074d97d0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;httpredirect&quot;&gt;&lt;code&gt;OpenURI::HTTPRedirect&lt;/code&gt;&lt;/a&gt; exception raised on redirection. Using &lt;code&gt;true&lt;/code&gt; also means that redirections between http and ftp are permitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e501ae3516d0a514a7a682bafe9c4fd83fa26b6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ifaddr&quot;&gt;&lt;code&gt;Socket::Ifaddr&lt;/code&gt;&lt;/a&gt; represents a result of getifaddrs() function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="675a3d21ab14007242ac51758a337a242b80918c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;imap&quot;&gt;&lt;code&gt;IMAP&lt;/code&gt;&lt;/a&gt; Overview</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ccccc41ead6c712094c6f126669493b515cf8a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;imap&quot;&gt;&lt;code&gt;Net::IMAP&lt;/code&gt;&lt;/a&gt; does &lt;em&gt;not&lt;/em&gt; automatically encode and decode mailbox names to and from UTF-7.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afab5ecd4b56667ef85e237eb4d8541c8a4ab1c1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;imap&quot;&gt;&lt;code&gt;Net::IMAP&lt;/code&gt;&lt;/a&gt; implements Internet Message Access Protocol (IMAP) client functionality. The protocol is described in [IMAP].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aa19b5a0e89f7f3d18a84bd19fc2baecef6ca28" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;imap&quot;&gt;&lt;code&gt;Net::IMAP&lt;/code&gt;&lt;/a&gt; supports concurrent threads. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1abfd7884559873a61a7746ffcd00e37baa7baf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;imap#Address&quot;&gt;&lt;code&gt;Net::IMAP::Address&lt;/code&gt;&lt;/a&gt; represents electronic mail addresses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c5efa58e1f15fcc65ddf539a8b26cb971296c8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;imap#ContentDisposition&quot;&gt;&lt;code&gt;Net::IMAP::ContentDisposition&lt;/code&gt;&lt;/a&gt; represents Content-Disposition fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="717fe9b386ecc02f224c3c8d62b4e02b12df4d1e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;imap#ContinuationRequest&quot;&gt;&lt;code&gt;Net::IMAP::ContinuationRequest&lt;/code&gt;&lt;/a&gt; represents command continuation requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f0cc5e47be0c74b0d2eed890e97ded66be0bd7d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;imap#Envelope&quot;&gt;&lt;code&gt;Net::IMAP::Envelope&lt;/code&gt;&lt;/a&gt; represents envelope structures of messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8b2b4c77499380b892856ff90e867c0ae3a9c59" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;imap#FetchData&quot;&gt;&lt;code&gt;Net::IMAP::FetchData&lt;/code&gt;&lt;/a&gt; represents the contents of the FETCH response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="001b3bf1f65a21881a99bb9436879a09f61cc2d0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;imap#MailboxACLItem&quot;&gt;&lt;code&gt;Net::IMAP::MailboxACLItem&lt;/code&gt;&lt;/a&gt; represents the response from GETACL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f088c5f5b1a8f039a68fd5ee9a9302c2be6f82c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;imap#MailboxList&quot;&gt;&lt;code&gt;Net::IMAP::MailboxList&lt;/code&gt;&lt;/a&gt; represents contents of the LIST response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d790fe4a21abfc78cb8c976dacdd93a958bf9279" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;imap#MailboxQuota&quot;&gt;&lt;code&gt;Net::IMAP::MailboxQuota&lt;/code&gt;&lt;/a&gt; represents contents of GETQUOTA response. This object can also be a response to GETQUOTAROOT. In the syntax specification below, the delimiter used with the &amp;ldquo;#&amp;rdquo; construct is a single space (SPACE).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc9e4044c2b9ac0021b600c3e308e5ec31a11eae" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;imap#MailboxQuotaRoot&quot;&gt;&lt;code&gt;Net::IMAP::MailboxQuotaRoot&lt;/code&gt;&lt;/a&gt; represents part of the GETQUOTAROOT response. (GETQUOTAROOT can also return &lt;a href=&quot;imap#MailboxQuota&quot;&gt;&lt;code&gt;Net::IMAP::MailboxQuota&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="664457af7ac74fc03985d92a3b376a08e403d300" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;imap#ResponseCode&quot;&gt;&lt;code&gt;Net::IMAP::ResponseCode&lt;/code&gt;&lt;/a&gt; represents response codes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e84af85fb724592f3d0d8b2b73e75628efcc5b2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;imap#ResponseText&quot;&gt;&lt;code&gt;Net::IMAP::ResponseText&lt;/code&gt;&lt;/a&gt; represents texts of responses. The text may be prefixed by the response code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb10d47a150d6f9451ed8fda32add910a7883ad9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;imap#StatusData&quot;&gt;&lt;code&gt;Net::IMAP::StatusData&lt;/code&gt;&lt;/a&gt; represents the contents of the STATUS response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36dcb97fdd06bf347893a2d5ddc64b41d5802eb3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;imap#TaggedResponse&quot;&gt;&lt;code&gt;Net::IMAP::TaggedResponse&lt;/code&gt;&lt;/a&gt; represents tagged responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28dba935ddb5b2fe021344be526acd457e64dc5c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;imap#ThreadMember&quot;&gt;&lt;code&gt;Net::IMAP::ThreadMember&lt;/code&gt;&lt;/a&gt; represents a thread-node returned by &lt;a href=&quot;imap#method-i-thread&quot;&gt;&lt;code&gt;Net::IMAP#thread&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7553aee5ec5be688434166e71a15ac4490189fd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;imap#UntaggedResponse&quot;&gt;&lt;code&gt;Net::IMAP::UntaggedResponse&lt;/code&gt;&lt;/a&gt; represents untagged responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5e73d01e90125cbb4e9edc009c165c60275c164" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;importer#method-i-struct&quot;&gt;&lt;code&gt;Fiddle::Importer#struct&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;importer#method-i-union&quot;&gt;&lt;code&gt;Fiddle::Importer#union&lt;/code&gt;&lt;/a&gt; wrap this functionality in an easy-to-use manner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a2d81634e2ae50e72b911fe305df5c63b42b40" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;integer&quot;&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/a&gt; &amp;ndash; Any integer. Will convert octal. (e.g. 124, -3, 040)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab5ebc68ed0cb5b716876b36407b0b9d9f5ef9d1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;integer#method-i-magnitude&quot;&gt;&lt;code&gt;Integer#magnitude&lt;/code&gt;&lt;/a&gt; is an alias for &lt;a href=&quot;integer#method-i-abs&quot;&gt;&lt;code&gt;Integer#abs&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="466a3a631298851ba0fdd1ec3dbc329f0b414682" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;integer#method-i-to_int&quot;&gt;&lt;code&gt;to_int&lt;/code&gt;&lt;/a&gt; is an alias for &lt;a href=&quot;integer#method-i-to_i&quot;&gt;&lt;code&gt;to_i&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44bc0d59e5cfe5112f39453bb263ec02c1c69f30" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; Open Mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ad5bd240fb1628d11d2810c031608fbcd56ea0b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; encoding example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="014f4aebd8a099407ede5eea997e7e3940fbaad0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;encoding&quot;&gt;&lt;code&gt;Encoding&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;encoding&quot;&gt;&lt;code&gt;Encoding&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b0b92561fba273baac1e159c55e54c78092e5647" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;io#method-c-copy_stream&quot;&gt;&lt;code&gt;IO.copy_stream&lt;/code&gt;&lt;/a&gt; copies &lt;em&gt;src&lt;/em&gt; to &lt;em&gt;dst&lt;/em&gt;. &lt;em&gt;src&lt;/em&gt; and &lt;em&gt;dst&lt;/em&gt; is either a filename or an IO-like object. IO-like object for &lt;em&gt;src&lt;/em&gt; should have &lt;code&gt;readpartial&lt;/code&gt; or &lt;code&gt;read&lt;/code&gt; method. IO-like object for &lt;em&gt;dst&lt;/em&gt; should have &lt;code&gt;write&lt;/code&gt; method. (Specialized mechanisms, such as sendfile system call, may be used on appropriate situation.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9201c3ffbcaebe94e6d31c3c2acaaed25d563cb2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;io#method-c-new&quot;&gt;&lt;code&gt;IO.new&lt;/code&gt;&lt;/a&gt; is called by various &lt;a href=&quot;file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; opening methods such as &lt;a href=&quot;io#method-c-open&quot;&gt;&lt;code&gt;IO::open&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#method-i-open&quot;&gt;&lt;code&gt;Kernel#open&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;file#method-c-open&quot;&gt;&lt;code&gt;File::open&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc09cb374c03afa6d56beb4149675896cd35342d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;io#method-c-popen&quot;&gt;&lt;code&gt;IO.popen&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;open3&quot;&gt;&lt;code&gt;Open3&lt;/code&gt;&lt;/a&gt; library, or Process#spawn may also be used to communicate with subprocesses through an &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251a2afeeaee1469ea7785e58211f0e6f658ecee" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;io#method-i-raw-21&quot;&gt;&lt;code&gt;IO#raw!&lt;/code&gt;&lt;/a&gt; is usable to disable newline conversions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="229acd6fb89e1d933d716a6540b1a25ecd119b23" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;io#method-i-read_nonblock&quot;&gt;&lt;code&gt;read_nonblock&lt;/code&gt;&lt;/a&gt; causes &lt;a href=&quot;eoferror&quot;&gt;&lt;code&gt;EOFError&lt;/code&gt;&lt;/a&gt; on EOF.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f4831ade66d8a72fdd947fb9475569fb2f2a52a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;io#method-i-read_nonblock&quot;&gt;&lt;code&gt;read_nonblock&lt;/code&gt;&lt;/a&gt; just calls the read(2) system call. It causes all errors the read(2) system call causes: Errno::EWOULDBLOCK, Errno::EINTR, etc. The caller should care such errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae8a44f6a929c9ccd9edc85affbb73cd4eb36bf4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;io#method-i-write_nonblock&quot;&gt;&lt;code&gt;write_nonblock&lt;/code&gt;&lt;/a&gt; just calls the write(2) system call. It causes all errors the write(2) system call causes: Errno::EWOULDBLOCK, Errno::EINTR, etc. The result may also be smaller than string.length (partial write). The caller should care such errors and partial write.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c1964063aa428dd2a95de795ccfea6c53f82b7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ipaddr&quot;&gt;&lt;code&gt;IPAddr&lt;/code&gt;&lt;/a&gt; provides a set of methods to manipulate an IP address. Both IPv4 and IPv6 are supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f96c47257a008e1325bd190c6ad5180cf1bae9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ipsocket&quot;&gt;&lt;code&gt;IPSocket&lt;/code&gt;&lt;/a&gt; is the super class of &lt;a href=&quot;tcpsocket&quot;&gt;&lt;code&gt;TCPSocket&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;udpsocket&quot;&gt;&lt;code&gt;UDPSocket&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93b23089395b494791cd83da3994de918cced066" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ipv4&quot;&gt;&lt;code&gt;IPv4&lt;/code&gt;&lt;/a&gt; mapped &lt;a href=&quot;ipv6&quot;&gt;&lt;code&gt;IPv6&lt;/code&gt;&lt;/a&gt; address format a:b:c:d:e:f:w.x.y.z</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34f9a7d1dde5bbf5d88045011cb1d75651f4928e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ipv6&quot;&gt;&lt;code&gt;IPv6&lt;/code&gt;&lt;/a&gt; address format a:b:c:d:e:f:g:h</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bfc459e2d7fbaafc8883885e65917e53e4e70be" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;json&quot;&gt;&lt;code&gt;JSON&lt;/code&gt;&lt;/a&gt; is a lightweight data-interchange format. It is easy for us humans to read and write. Plus, equally simple for machines to generate or parse. &lt;a href=&quot;json&quot;&gt;&lt;code&gt;JSON&lt;/code&gt;&lt;/a&gt; is completely language agnostic, making it the ideal interchange format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2039045aaa66c614abf27e01652af2271d5e2cc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;json&quot;&gt;&lt;code&gt;JSON&lt;/code&gt;&lt;/a&gt; version</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3559067dc0e3d98066cde2b4dd68864d681e6a7f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;kdf&quot;&gt;&lt;code&gt;KDF&lt;/code&gt;&lt;/a&gt; is typically used for securely deriving arbitrary length symmetric keys to be used with an &lt;a href=&quot;cipher&quot;&gt;&lt;code&gt;OpenSSL::Cipher&lt;/code&gt;&lt;/a&gt; from passwords. Another use case is for storing passwords: Due to the ability to tweak the effort of computation by increasing the iteration count, computation can be slowed down artificially in order to render possible attacks infeasible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06cad97a804b76898d77babe0ef5ef56d30cce20" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;kernel#method-i-gem&quot;&gt;&lt;code&gt;Kernel#gem&lt;/code&gt;&lt;/a&gt; only loads prerelease versions when prerelease &lt;code&gt;requirements&lt;/code&gt; are given:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec0a2d50261fad12c9bbbfb8243ad4de568dfa70" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;kernel#method-i-gem&quot;&gt;&lt;code&gt;Kernel#gem&lt;/code&gt;&lt;/a&gt; returns true if the gem was activated, otherwise false. If the gem could not be found, didn't match the version requirements, or a different version was already activated, an exception will be raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3248093f599c6bc768face23b19278c32c9d91a3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;kernel#method-i-gem&quot;&gt;&lt;code&gt;Kernel#gem&lt;/code&gt;&lt;/a&gt; should be called &lt;strong&gt;before&lt;/strong&gt; any require statements (otherwise RubyGems may load a conflicting library version).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="717e7c18d060f95ff55505af38c8387d254e2dda" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;kernel#method-i-srand&quot;&gt;&lt;code&gt;Kernel.srand&lt;/code&gt;&lt;/a&gt; may be used to ensure that sequences of random numbers are reproducible between different runs of a program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a18103db554cef9fc01216ee9b383d9486d248d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ldap&quot;&gt;&lt;code&gt;LDAP&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../uri&quot;&gt;&lt;code&gt;URI&lt;/code&gt;&lt;/a&gt; SCHEMA (described in RFC2255).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb088667390448b2dce2da3121633a21803fd8cf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;list&quot;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt; of all switches and summary string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66707475c55cf90c15cfdb18bfe6d0cc09e8eba3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;list&quot;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt; of long style options with &amp;ldquo;no-&amp;rdquo; prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863b8c51bd6ba28db10c55b7a6a3a04986f09d95" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;list&quot;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt; of long style options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78db47610c422f10dd12476828cde4b362586064" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;list&quot;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt; of short style options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="408821099bde696674c6ecbcebd268fbc53e741d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;logger&quot;&gt;&lt;code&gt;Syslog::Logger&lt;/code&gt;&lt;/a&gt; is a &lt;a href=&quot;logger&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt; work-alike that logs via syslog instead of to a file. You can use &lt;a href=&quot;logger&quot;&gt;&lt;code&gt;Syslog::Logger&lt;/code&gt;&lt;/a&gt; to aggregate logs between multiple machines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1592c875104b43a26e6571c1b1c930bcebfd4d6d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;logger/severity&quot;&gt;&lt;code&gt;Severity&lt;/code&gt;&lt;/a&gt; label for logging (max 5 chars).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2a866d2abbf074a60839bab4610cda032369f8e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;logger/severity&quot;&gt;&lt;code&gt;Severity&lt;/code&gt;&lt;/a&gt;. Constants are defined in &lt;a href=&quot;logger&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt; namespace: &lt;code&gt;DEBUG&lt;/code&gt;, &lt;code&gt;INFO&lt;/code&gt;, &lt;code&gt;WARN&lt;/code&gt;, &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;FATAL&lt;/code&gt;, or &lt;code&gt;UNKNOWN&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc801231bfc245deaf4e9383b48d4a996efb1f0a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;lusolve&quot;&gt;LUSolve&lt;/a&gt;, &lt;a href=&quot;jacobian&quot;&gt;Jacobian&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9523d9c3b4304eeb6501ad8b86628a0aee0220c0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;marshal&quot;&gt;&lt;code&gt;Marshal&lt;/code&gt;&lt;/a&gt; Format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b32e32bd34daa250eb6a469063f7b8e68de6d4c0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;marshal&quot;&gt;&lt;code&gt;Marshal&lt;/code&gt;&lt;/a&gt; can't dump following objects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7669d3b7cf5ff63b686aba85bd089c8cf16b53a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;marshal&quot;&gt;&lt;code&gt;Marshal&lt;/code&gt;&lt;/a&gt; the object to &lt;a href=&quot;json&quot;&gt;&lt;code&gt;JSON&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="484b95e3e76c392a2819d684f71cbb13f47ee0ce" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;matchplatform&quot;&gt;Bundler::MatchPlatform&lt;/a&gt;, &lt;a href=&quot;../comparable&quot;&gt;Comparable&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="566372e6722777cb7aad562ea8e8c1575ecaecb4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;math#method-c-lgamma&quot;&gt;&lt;code&gt;Math.lgamma(x)&lt;/code&gt;&lt;/a&gt; is same as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2df5efd63a2d61878d69efcaa47318c66b3f5b98" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;matrix&quot;&gt;&lt;code&gt;Matrix&lt;/code&gt;&lt;/a&gt; addition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02d49bd2639ac80b669528ac1a5a5a0039655e80" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;matrix&quot;&gt;&lt;code&gt;Matrix&lt;/code&gt;&lt;/a&gt; division (multiplication by the inverse).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6fb023077441b945be98707a82c64771225d683" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;matrix&quot;&gt;&lt;code&gt;Matrix&lt;/code&gt;&lt;/a&gt; exponentiation. Equivalent to multiplying the matrix by itself N times. Non integer exponents will be handled by diagonalizing the matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7006edd5bec9c07ce577a810c0287428fb400f1d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;matrix&quot;&gt;&lt;code&gt;Matrix&lt;/code&gt;&lt;/a&gt; multiplication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da8d0b62a51a93141f6925ceab62df7b80fa7ab6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;matrix&quot;&gt;&lt;code&gt;Matrix&lt;/code&gt;&lt;/a&gt; subtraction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfe113521597001e0728934eac55b8582768822a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;matrix#method-c-new&quot;&gt;&lt;code&gt;Matrix.new&lt;/code&gt;&lt;/a&gt; is private; use &lt;a href=&quot;matrix#method-c-rows&quot;&gt;&lt;code&gt;Matrix.rows&lt;/code&gt;&lt;/a&gt;, columns, [], etc&amp;hellip; to create.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b89af038b95dcb771144411829b14b900dcfe19e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;md5&quot;&gt;&lt;code&gt;MD5&lt;/code&gt;&lt;/a&gt; calculates a digest of 128 bits (16 bytes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4658e8449958a22348309a6890ff51070d5cf380" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;mdns&quot;&gt;&lt;code&gt;Resolv::MDNS&lt;/code&gt;&lt;/a&gt; is a one-shot Multicast &lt;a href=&quot;dns&quot;&gt;&lt;code&gt;DNS&lt;/code&gt;&lt;/a&gt; (mDNS) resolver. It blindly makes queries to the mDNS addresses without understanding anything about multicast ports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ae22e7ef676ccf302a93ecb44a39d5dcaf4017" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;method&quot;&gt;&lt;code&gt;Method&lt;/code&gt;&lt;/a&gt; Catalogue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3347c094c79b32d5391159d5e1462b3218015a41" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;method&quot;&gt;&lt;code&gt;Method&lt;/code&gt;&lt;/a&gt; Categories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa82d4cdcf6faa9ef7e4c2df42d78928ca7e6872" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;method&quot;&gt;&lt;code&gt;Method&lt;/code&gt;&lt;/a&gt; calls made over dRuby behave largely the same as normal Ruby method calls made within a process. &lt;a href=&quot;method&quot;&gt;&lt;code&gt;Method&lt;/code&gt;&lt;/a&gt; calls with blocks are supported, as are raising exceptions. In addition to a method's standard errors, a dRuby call may also raise one of the dRuby-specific errors, all of which are subclasses of &lt;a href=&quot;drb/drberror&quot;&gt;&lt;code&gt;DRb::DRbError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ac99aa213a27b1ac630f286e31bde0c14383253" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;method&quot;&gt;&lt;code&gt;Method&lt;/code&gt;&lt;/a&gt; documentation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec020e01482c074dfe3d0d93374cd5d1ca90eb7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;method&quot;&gt;&lt;code&gt;Method&lt;/code&gt;&lt;/a&gt; objects are created by &lt;code&gt;Object#method&lt;/code&gt;, and are associated with a particular object (not just with a class). They may be used to invoke the method within the object, and as a block associated with an iterator. They may also be unbound from one object (creating an &lt;code&gt;UnboundMethod&lt;/code&gt;) and bound to another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0117712d37d25c85e6e93fa5dac0259724e3b52f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;method&quot;&gt;&lt;code&gt;Method&lt;/code&gt;&lt;/a&gt; used to provide marshalling support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="806d9e021b0690ecc9ad4db62c61beb37d649a90" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;mlsxentry&quot;&gt;&lt;code&gt;MLSxEntry&lt;/code&gt;&lt;/a&gt; represents an entry in responses of MLST/MLSD. Each entry has the facts (e.g., size, last modification time, etc.) and the pathname.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a19266bb94178302efe10cb877db379ee3e83822" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;module&quot;&gt;&lt;code&gt;Module&lt;/code&gt;&lt;/a&gt; Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04b488e4e79b12acf211af5530fb898e1c4cbdc1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;module&quot;&gt;&lt;code&gt;Module&lt;/code&gt;&lt;/a&gt; and Old &lt;a href=&quot;module&quot;&gt;&lt;code&gt;Module&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1c3b8dbe07b9261314e7c9afa8d99b14aecd383" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;module&quot;&gt;&lt;code&gt;Module&lt;/code&gt;&lt;/a&gt; to handle processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d97229232391d1887fbd919f245db2abfd32dee" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;molinillo&quot;&gt;&lt;code&gt;Bundler::Molinillo&lt;/code&gt;&lt;/a&gt; is a generic dependency resolution algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3b3cc39ab98f12ceb3234c461c6d26bc74da2ae" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;molinillo/ui&quot;&gt;Bundler::Molinillo::UI&lt;/a&gt;, &lt;a href=&quot;molinillo/specificationprovider&quot;&gt;Bundler::Molinillo::SpecificationProvider&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40f05d022dd494f10d9f0c65626079b2198da6a8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;mutex&quot;&gt;&lt;code&gt;Mutex&lt;/code&gt;&lt;/a&gt; implements a simple semaphore that can be used to coordinate access to shared data from multiple concurrent threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f22809fce682a1716aa5a3712f2d6dc5ebf9ada" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;mutex#method-i-lock&quot;&gt;&lt;code&gt;Mutex#lock&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mutex#method-i-synchronize&quot;&gt;&lt;code&gt;Mutex#synchronize&lt;/code&gt;&lt;/a&gt; and any code using them are explicitly unsafe. This includes &lt;a href=&quot;monitor&quot;&gt;&lt;code&gt;Monitor&lt;/code&gt;&lt;/a&gt; in the standard library which uses &lt;a href=&quot;mutex&quot;&gt;&lt;code&gt;Mutex&lt;/code&gt;&lt;/a&gt; to provide reentrancy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f684c98eb83ec36737c6265778ecc01ea6aaf429" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;netscape&quot;&gt;&lt;code&gt;OpenSSL::Netscape&lt;/code&gt;&lt;/a&gt; is a namespace for &lt;a href=&quot;netscape/spki&quot;&gt;&lt;code&gt;SPKI&lt;/code&gt;&lt;/a&gt; (Simple Public Key Infrastructure) which implements Signed Public Key and Challenge. See &lt;a href=&quot;http://tools.ietf.org/html/rfc2692&quot;&gt;RFC 2692&lt;/a&gt; and &lt;a href=&quot;http://tools.ietf.org/html/rfc2692&quot;&gt;RFC 2693&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56f8e3b950ec68ca7827535fc2a154c15ff53d4e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;node&quot;&gt;&lt;code&gt;RubyVM::AbstractSyntaxTree::Node&lt;/code&gt;&lt;/a&gt; instances are created by parse methods in &lt;a href=&quot;../abstractsyntaxtree&quot;&gt;&lt;code&gt;RubyVM::AbstractSyntaxTree&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="febe37e2b6427a0dc3d84d6eeecba91c3a0bcd73" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;numeric&quot;&gt;&lt;code&gt;Numeric&lt;/code&gt;&lt;/a&gt; &amp;ndash; Any integer, float, or rational (1, 3.4, 1/3)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9f3b8773122e23a9564a2e3791d4915fea05c88" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;numeric&quot;&gt;&lt;code&gt;Numeric&lt;/code&gt;&lt;/a&gt; allows instantiation of heap-allocated objects. Other core numeric classes such as &lt;a href=&quot;integer&quot;&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/a&gt; are implemented as immediates, which means that each &lt;a href=&quot;integer&quot;&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/a&gt; is a single immutable object which is always passed by value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e16a3eb2a05aab8b4e834c8efe2767e7a1eff5c5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;numeric&quot;&gt;&lt;code&gt;Numeric&lt;/code&gt;&lt;/a&gt; implements this by converting its value to a &lt;a href=&quot;float&quot;&gt;&lt;code&gt;Float&lt;/code&gt;&lt;/a&gt; and invoking &lt;a href=&quot;float#method-i-ceil&quot;&gt;&lt;code&gt;Float#ceil&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="779f2c3added11bd0c574ed389ac2ca324620ba3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;numeric&quot;&gt;&lt;code&gt;Numeric&lt;/code&gt;&lt;/a&gt; implements this by converting its value to a &lt;a href=&quot;float&quot;&gt;&lt;code&gt;Float&lt;/code&gt;&lt;/a&gt; and invoking &lt;a href=&quot;float#method-i-floor&quot;&gt;&lt;code&gt;Float#floor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31669d825b04088a6fee0345db08dc03521b8424" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;numeric&quot;&gt;&lt;code&gt;Numeric&lt;/code&gt;&lt;/a&gt; implements this by converting its value to a &lt;a href=&quot;float&quot;&gt;&lt;code&gt;Float&lt;/code&gt;&lt;/a&gt; and invoking &lt;a href=&quot;float#method-i-round&quot;&gt;&lt;code&gt;Float#round&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c139a0145bb2a551eee0e68aef03192c2333cae4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;numeric&quot;&gt;&lt;code&gt;Numeric&lt;/code&gt;&lt;/a&gt; implements this by converting its value to a &lt;a href=&quot;float&quot;&gt;&lt;code&gt;Float&lt;/code&gt;&lt;/a&gt; and invoking &lt;a href=&quot;float#method-i-truncate&quot;&gt;&lt;code&gt;Float#truncate&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de87585e0e4a2cf6c7736e7c3aac26aba2f27213" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;numeric&quot;&gt;&lt;code&gt;Numeric&lt;/code&gt;&lt;/a&gt; is the class from which all higher-level numeric classes should inherit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="926a2efad2092ff72293e1bb3392f73cf1fb5b51" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;numeric&quot;&gt;&lt;code&gt;Numeric&lt;/code&gt;&lt;/a&gt; time zones that include minutes, such as &lt;code&gt;-10:00&lt;/code&gt; or &lt;code&gt;+1330&lt;/code&gt; will work, as will simpler hour-only time zones like &lt;code&gt;-10&lt;/code&gt; or &lt;code&gt;+13&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e184f9a8c0ea74d3964662d3ed1c0278641d74e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;numeric#method-i-magnitude&quot;&gt;&lt;code&gt;Numeric#magnitude&lt;/code&gt;&lt;/a&gt; is an alias for &lt;a href=&quot;numeric#method-i-abs&quot;&gt;&lt;code&gt;Numeric#abs&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07393266a3b6c7e5ca70f9891cd8796b681d3869" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; References</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="137a328d1705f6b2605cffe650286f0bde1ae6a8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; is the default root of all Ruby objects. &lt;a href=&quot;object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; inherits from &lt;a href=&quot;basicobject&quot;&gt;&lt;code&gt;BasicObject&lt;/code&gt;&lt;/a&gt; which allows creating alternate object hierarchies. Methods on &lt;a href=&quot;object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; are available to all classes unless explicitly overridden.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="421e6d558a93122c40ca0fd2b2d0bc25fed3429a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; mixes in the &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt; module, making the built-in kernel functions globally accessible. Although the instance methods of &lt;a href=&quot;object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; are defined by the &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt; module, we have chosen to document them here for clarity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35a4480eaf70f552bb8f4e8eca4440f787f28aa3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;object#ARGV&quot;&gt;&lt;code&gt;ARGV&lt;/code&gt;&lt;/a&gt; contains the command line arguments used to run ruby.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ed5b822c21806ff697e12ead39a4999ada1c86" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;object#DATA&quot;&gt;&lt;code&gt;DATA&lt;/code&gt;&lt;/a&gt; is a &lt;a href=&quot;file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; that contains the data section of the executed file. To create a data section use &lt;code&gt;__END__&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30db85b3195a3959be23fd0466b43c0661e2a074" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;objectspace&quot;&gt;&lt;code&gt;ObjectSpace&lt;/code&gt;&lt;/a&gt; also provides support for object finalizers, procs that will be called when a specific object is about to be destroyed by garbage collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de1f0676d3bdd8e060abf70e87f8cccae202702" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ocsp&quot;&gt;&lt;code&gt;OpenSSL::OCSP&lt;/code&gt;&lt;/a&gt; implements Online Certificate Status Protocol requests and responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ba9f97a720b437ad0f1329f7bd97500e72434c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ocsp/response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; has valid confirmations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c2c3904cd46c6dff33f61a36a4c31678e8d917e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;open3&quot;&gt;&lt;code&gt;Open3&lt;/code&gt;&lt;/a&gt; grants you access to stdin, stdout, stderr and a thread to wait for the child process when running another program. You can specify various attributes, redirections, current directory, etc., of the program in the same way as for &lt;a href=&quot;process#method-c-spawn&quot;&gt;&lt;code&gt;Process.spawn&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d71773211f987ae86875af105d05a3fcc21fdb4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;open3#method-c-capture2&quot;&gt;&lt;code&gt;Open3.capture2&lt;/code&gt;&lt;/a&gt; : give a string for stdin; get a string for stdout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e15aef13f41a2bfeef55956b8266698b1bba140" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;open3#method-c-capture2&quot;&gt;&lt;code&gt;Open3.capture2&lt;/code&gt;&lt;/a&gt; captures the standard output of a command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db96bb44e9498bffe5b63b6c97797d0df3e42d0e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;open3#method-c-capture2e&quot;&gt;&lt;code&gt;Open3.capture2e&lt;/code&gt;&lt;/a&gt; : give a string for stdin; get a string for merged stdout and stderr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c08802f362880e72e808cace0482060b58519db" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;open3#method-c-capture2e&quot;&gt;&lt;code&gt;Open3.capture2e&lt;/code&gt;&lt;/a&gt; captures the standard output and the standard error of a command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cccb7e49843aa2da06a90e961ea2f6894207b8e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;open3#method-c-capture3&quot;&gt;&lt;code&gt;Open3.capture3&lt;/code&gt;&lt;/a&gt; : give a string for stdin; get strings for stdout, stderr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32fa8c9a5ea85f1ae1d4755cc82f3abf9e9004db" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;open3#method-c-capture3&quot;&gt;&lt;code&gt;Open3.capture3&lt;/code&gt;&lt;/a&gt; captures the standard output and the standard error of a command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5a9a2dd6334164bc7d5d8a3e8aa2dfa11cc0630" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;open3#method-c-pipeline&quot;&gt;&lt;code&gt;Open3.pipeline&lt;/code&gt;&lt;/a&gt; : run a pipeline and wait for its completion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bf37579fde506e2d9146bb3931f69661fc5d138" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;open3#method-c-pipeline&quot;&gt;&lt;code&gt;Open3.pipeline&lt;/code&gt;&lt;/a&gt; starts a list of commands as a pipeline. It waits for the completion of the commands. No pipes are created for stdin of the first command and stdout of the last command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="802b66fc8e96061c76828ed5b885ee1659de1c2f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;open3#method-c-pipeline_r&quot;&gt;&lt;code&gt;Open3.pipeline_r&lt;/code&gt;&lt;/a&gt; : pipe for last stdout of a pipeline</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db05ad991fca5478dee1efbccf0fc01201b8d5bd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;open3#method-c-pipeline_r&quot;&gt;&lt;code&gt;Open3.pipeline_r&lt;/code&gt;&lt;/a&gt; starts a list of commands as a pipeline with a pipe which connects to stdout of the last command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1656951349306f80eb22c71c249182be08eafa4d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;open3#method-c-pipeline_rw&quot;&gt;&lt;code&gt;Open3.pipeline_rw&lt;/code&gt;&lt;/a&gt; : pipes for first stdin and last stdout of a pipeline</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f2bc312ac17f2130e7f9ec9e8162e19247a793c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;open3#method-c-pipeline_rw&quot;&gt;&lt;code&gt;Open3.pipeline_rw&lt;/code&gt;&lt;/a&gt; starts a list of commands as a pipeline with pipes which connect to stdin of the first command and stdout of the last command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb6a3ebc0cad65a14c0a063516a75194f09700f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;open3#method-c-pipeline_start&quot;&gt;&lt;code&gt;Open3.pipeline_start&lt;/code&gt;&lt;/a&gt; : run a pipeline without waiting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7efa17fa6296226c9962486df7fd12ef1088b69" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;open3#method-c-pipeline_start&quot;&gt;&lt;code&gt;Open3.pipeline_start&lt;/code&gt;&lt;/a&gt; starts a list of commands as a pipeline. No pipes are created for stdin of the first command and stdout of the last command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95405f77c4144b811442fef4df6526bf87a021d0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;open3#method-c-pipeline_w&quot;&gt;&lt;code&gt;Open3.pipeline_w&lt;/code&gt;&lt;/a&gt; : pipe for first stdin of a pipeline</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8031958aaebecdfdd37c33f7ef220f284eebc1dd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;open3#method-c-pipeline_w&quot;&gt;&lt;code&gt;Open3.pipeline_w&lt;/code&gt;&lt;/a&gt; starts a list of commands as a pipeline with a pipe which connects to stdin of the first command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8599df61a876e505d51943d63fd8d0a7f5a45b9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;open3#method-c-popen2&quot;&gt;&lt;code&gt;Open3.popen2&lt;/code&gt;&lt;/a&gt; : pipes for stdin, stdout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8392e3fc86c14d4dc01eef3e1a1bdf39a71a2af5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;open3#method-c-popen2&quot;&gt;&lt;code&gt;Open3.popen2&lt;/code&gt;&lt;/a&gt; is similar to &lt;a href=&quot;open3#method-c-popen3&quot;&gt;&lt;code&gt;Open3.popen3&lt;/code&gt;&lt;/a&gt; except that it doesn't create a pipe for the standard error stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb5ec8ec70df2d9255044eaebb4de1fa4177fc43" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;open3#method-c-popen2e&quot;&gt;&lt;code&gt;Open3.popen2e&lt;/code&gt;&lt;/a&gt; : pipes for stdin, merged stdout and stderr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a1f4560c10be0c9328d83f90286d2fb2e8a1f52" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;open3#method-c-popen2e&quot;&gt;&lt;code&gt;Open3.popen2e&lt;/code&gt;&lt;/a&gt; is similar to &lt;a href=&quot;open3#method-c-popen3&quot;&gt;&lt;code&gt;Open3.popen3&lt;/code&gt;&lt;/a&gt; except that it merges the standard output stream and the standard error stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc4d37bee56d7a2ac8527a8279b4b4645b722615" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;open3#method-c-popen3&quot;&gt;&lt;code&gt;Open3.popen3&lt;/code&gt;&lt;/a&gt; : pipes for stdin, stdout, stderr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd7c5a4b48a1a18b92e799b979dcda426221f99" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;openread#method-i-open&quot;&gt;&lt;code&gt;OpenURI::OpenRead#open&lt;/code&gt;&lt;/a&gt; provides `open' for &lt;a href=&quot;../uri/http&quot;&gt;&lt;code&gt;URI::HTTP&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../uri/ftp&quot;&gt;&lt;code&gt;URI::FTP&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="001a193f7ef5b1ff96f9fb13942706f24cf9fafe" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;openread#method-i-open&quot;&gt;&lt;code&gt;OpenURI::OpenRead#open&lt;/code&gt;&lt;/a&gt; returns an IO-like object if block is not given. Otherwise it yields the &lt;a href=&quot;../io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; object and return the value of the block. The &lt;a href=&quot;../io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; object is extended with &lt;a href=&quot;meta&quot;&gt;&lt;code&gt;OpenURI::Meta&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="340470a0e137b6888cf03c128e610e20493ba04a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;openread#method-i-open&quot;&gt;&lt;code&gt;OpenURI::OpenRead#open&lt;/code&gt;&lt;/a&gt; takes optional 3 arguments as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="405c9a94e6cfab5f5979fdf636f0b034d4836767" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;openread#method-i-read&quot;&gt;&lt;code&gt;OpenURI::OpenRead#read(&lt;/code&gt;&lt;/a&gt;) reads a content referenced by self and returns the content as string. The string is extended with &lt;a href=&quot;meta&quot;&gt;&lt;code&gt;OpenURI::Meta&lt;/code&gt;&lt;/a&gt;. The argument &lt;code&gt;options&lt;/code&gt; is same as &lt;a href=&quot;openread#method-i-open&quot;&gt;&lt;code&gt;OpenURI::OpenRead#open&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9811c371b1bee656f360fe70cda156ededa44eb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;openssl&quot;&gt;&lt;code&gt;OpenSSL&lt;/code&gt;&lt;/a&gt; provides &lt;a href=&quot;openssl/ssl&quot;&gt;&lt;code&gt;SSL&lt;/code&gt;&lt;/a&gt;, TLS and general purpose cryptography. It wraps the &lt;a href=&quot;https://www.openssl.org/&quot;&gt;OpenSSL&lt;/a&gt; library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92585f7242ce786510b8098cb31c6b0079e1e951" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;openssl&quot;&gt;&lt;code&gt;OpenSSL&lt;/code&gt;&lt;/a&gt; ruby extension version</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2b954f344a6fe1119d31d31bf4841add4d1a26e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;openssl&quot;&gt;&lt;code&gt;OpenSSL&lt;/code&gt;&lt;/a&gt; will prompt you for your pass phrase when loading an encrypted key. If you will not be able to type in the pass phrase you may provide it when loading the key:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12b5710c860e782e5e5cd9f602d44be4b9ad406a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;openssl/cipher#method-c-ciphers&quot;&gt;&lt;code&gt;OpenSSL::Cipher.ciphers&lt;/code&gt;&lt;/a&gt; returns a list of available ciphers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4925b0c3370358b789dd4d091454236293530ba" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;openssl/pkcs5&quot;&gt;&lt;code&gt;PKCS5&lt;/code&gt;&lt;/a&gt; supports PBKDF2 as it was specified in PKCS#5 &lt;a href=&quot;http://www.rsa.com/rsalabs/node.asp?id=2127&quot;&gt;v2.0&lt;/a&gt;. It still uses a password, a salt, and additionally a number of iterations that will slow the key derivation process down. The slower this is, the more work it requires being able to brute-force the resulting key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd84ca5e72ffdda11a8768e61565b885036c6455" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;openssl/ssl&quot;&gt;&lt;code&gt;SSL&lt;/code&gt;&lt;/a&gt; Server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27168fb5fbb6083ca2388fc14e18a967eb215c2e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;openssl/ssl&quot;&gt;&lt;code&gt;SSL&lt;/code&gt;&lt;/a&gt; and TLS Connections</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8532bb3eac1fab088aaac4d44c103463f71b1e24" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;openssl/ssl&quot;&gt;&lt;code&gt;SSL&lt;/code&gt;&lt;/a&gt; client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e7927986be4f84ae1c9c5a684bdb1db410f6287" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;opentimeout&quot;&gt;&lt;code&gt;OpenTimeout&lt;/code&gt;&lt;/a&gt;, a subclass of &lt;a href=&quot;../timeout/error&quot;&gt;&lt;code&gt;Timeout::Error&lt;/code&gt;&lt;/a&gt;, is raised if a connection cannot be created within the open_timeout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3419daf1481221fe7a28387c84345d23479e2cd5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;openuri&quot;&gt;&lt;code&gt;OpenURI&lt;/code&gt;&lt;/a&gt; is an easy-to-use wrapper for &lt;a href=&quot;net/http&quot;&gt;&lt;code&gt;Net::HTTP&lt;/code&gt;&lt;/a&gt;, Net::HTTPS and &lt;a href=&quot;net/ftp&quot;&gt;&lt;code&gt;Net::FTP&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c45c23e37a0627c51d5ecc99dd5bf225b8dc1602" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;option&quot;&gt;&lt;code&gt;Socket::Option&lt;/code&gt;&lt;/a&gt; represents a socket option used by &lt;a href=&quot;../basicsocket#method-i-getsockopt&quot;&gt;&lt;code&gt;BasicSocket#getsockopt&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../basicsocket#method-i-setsockopt&quot;&gt;&lt;code&gt;BasicSocket#setsockopt&lt;/code&gt;&lt;/a&gt;. A socket option contains the socket &lt;a href=&quot;option#method-i-family&quot;&gt;&lt;code&gt;family&lt;/code&gt;&lt;/a&gt;, protocol &lt;a href=&quot;option#method-i-level&quot;&gt;&lt;code&gt;level&lt;/code&gt;&lt;/a&gt;, option name &lt;a href=&quot;option#method-i-optname&quot;&gt;&lt;code&gt;optname&lt;/code&gt;&lt;/a&gt; and option value &lt;a href=&quot;option#method-i-data&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417e58b2958c5a80aae49f536b2cf1ea0b71b6c4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;optionparser&quot;&gt;&lt;code&gt;OptionParser&lt;/code&gt;&lt;/a&gt; can be used to automatically generate help for the commands you write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e835ef56abd5a6cf0999a0132ab94873dd357254" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;optionparser&quot;&gt;&lt;code&gt;OptionParser&lt;/code&gt;&lt;/a&gt; comes with a few ready-to-use kinds of type coercion. They are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27487632fa51b66ced4f71437d54f48bcae20943" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;optionparser&quot;&gt;&lt;code&gt;OptionParser&lt;/code&gt;&lt;/a&gt; is a class for command-line option analysis. It is much more advanced, yet also easier to use, than &lt;a href=&quot;getoptlong&quot;&gt;&lt;code&gt;GetoptLong&lt;/code&gt;&lt;/a&gt;, and is a more Ruby-oriented solution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7afc04667efe704c6b0def7ee66917ea01ee6844" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;optionparser&quot;&gt;&lt;code&gt;OptionParser&lt;/code&gt;&lt;/a&gt; supports the ability to coerce command line arguments into objects for us.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="916477b2043d7d8c607dbfe0ea621b271ca1fdbf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;optionparser#DecimalInteger&quot;&gt;&lt;code&gt;DecimalInteger&lt;/code&gt;&lt;/a&gt; &amp;ndash; Like &lt;code&gt;Integer&lt;/code&gt;, but no octal format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4931cee20e85d804524f9a9936b8c7edfa6c960" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;optionparser#DecimalNumeric&quot;&gt;&lt;code&gt;DecimalNumeric&lt;/code&gt;&lt;/a&gt; &amp;ndash; Decimal integer or float.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ed2d2ec6c12fba2ef41b0f461b69734ad6abb92" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;optionparser#OctalInteger&quot;&gt;&lt;code&gt;OctalInteger&lt;/code&gt;&lt;/a&gt; &amp;ndash; Like &lt;code&gt;Integer&lt;/code&gt;, but no decimal format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ed26475d0dbf6d2f046e2998bc1c7a6da0581a0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;parseerror#Reason&quot;&gt;&lt;code&gt;Reason&lt;/code&gt;&lt;/a&gt; which caused the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c7f34243c79b9cadf35908aecdccc03e85f965f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pathname&quot;&gt;&lt;code&gt;Pathname&lt;/code&gt;&lt;/a&gt; is immutable. It has no method for destructive update.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4320b0b6d0791807eda178e88a21a1a5b9e53510" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pathname&quot;&gt;&lt;code&gt;Pathname&lt;/code&gt;&lt;/a&gt; represents the name of a file or directory on the filesystem, but not the file itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fa1952c4e9079c195d79ec2ec0d06f7c31976a9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pathname#method-c-getwd&quot;&gt;&lt;code&gt;Pathname.getwd&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;pathname#method-c-pwd&quot;&gt;&lt;code&gt;Pathname.pwd&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b0c1cb9ce27defd538ab58254fbf096369558fa" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pathname#method-i-chown&quot;&gt;&lt;code&gt;chown&lt;/code&gt;&lt;/a&gt;(owner, group)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93e9458fba9e315c7d42e4536bc85fc893e1d8c3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pathname#method-i-each_entry&quot;&gt;&lt;code&gt;each_entry&lt;/code&gt;&lt;/a&gt;(&amp;amp;block)</source>
          <target state="translated">&lt;a href=&quot;pathname#method-i-each_entry&quot;&gt;&lt;code&gt;each_entry&lt;/code&gt;&lt;/a&gt;(&amp;amp;block)</target>
        </trans-unit>
        <trans-unit id="1d83b7dc25c5eea2bb8fd781e3bfc56c2a48103c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pathname#method-i-each_line&quot;&gt;&lt;code&gt;each_line&lt;/code&gt;&lt;/a&gt;(*args, &amp;amp;block)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a48658f2e72aa34c00c17200ca8232b57c54e7f5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pathname#method-i-find&quot;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;(&amp;amp;block)</source>
          <target state="translated">&lt;a href=&quot;pathname#method-i-find&quot;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;(&amp;amp;block)</target>
        </trans-unit>
        <trans-unit id="f9856b6c96e593fb14034ec884369a95ebaf0dba" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pathname#method-i-fnmatch&quot;&gt;&lt;code&gt;fnmatch&lt;/code&gt;&lt;/a&gt;(pattern, *args)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="749ecdf6db246415dd165cd1e269c1e8521e3b88" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pathname#method-i-fnmatch-3F&quot;&gt;&lt;code&gt;fnmatch?&lt;/code&gt;&lt;/a&gt;(pattern, *args)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="792ecafc820c5ceccfd2c245e0771406da23df26" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pathname#method-i-lchown&quot;&gt;&lt;code&gt;lchown&lt;/code&gt;&lt;/a&gt;(owner, group)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="755b4d40bcecbbd9a249384571c20ea0b9fa20df" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pathname#method-i-open&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt;(*args, &amp;amp;block)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4199280f439ab4dd788f2c74f85084196f8ad7d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pathname#method-i-to_path&quot;&gt;&lt;code&gt;to_path&lt;/code&gt;&lt;/a&gt; is implemented so &lt;a href=&quot;pathname&quot;&gt;&lt;code&gt;Pathname&lt;/code&gt;&lt;/a&gt; objects are usable with &lt;a href=&quot;file#method-c-open&quot;&gt;&lt;code&gt;File.open&lt;/code&gt;&lt;/a&gt;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cf9eade705514c0e5e2f0f9e78e7b96deeea76e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pathname#method-i-unlink&quot;&gt;&lt;code&gt;unlink&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;pathname#method-i-delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95f65c4dd8a7e820f51604d5fc175772dab7e108" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pathname#method-i-utime&quot;&gt;&lt;code&gt;utime&lt;/code&gt;&lt;/a&gt;(atime, mtime)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78d41911ba2e62da585e40922e531c929cf6da93" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;period&quot;&gt;Logger::Period&lt;/a&gt;, &lt;a href=&quot;../monitormixin&quot;&gt;MonitorMixin&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3a8d443b1c9402d1ba83d0d465c856485947122" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;persistent&quot;&gt;&lt;code&gt;Bundler::Persistent::Net::HTTP::Persistent&lt;/code&gt;&lt;/a&gt; maintains persistent connections across all the servers you wish to talk to. For each host:port you communicate with a single persistent connection is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e578ab026e76c8a26a5e2a3031c282f0eb51e062" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;persistent&quot;&gt;&lt;code&gt;Persistent&lt;/code&gt;&lt;/a&gt; connections for &lt;a href=&quot;../../../../net/http&quot;&gt;&lt;code&gt;Net::HTTP&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c5e15f5e2f848f567f04d4ab8410d742dc6a67e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pkcs5#method-i-pbkdf2_hmac&quot;&gt;&lt;code&gt;OpenSSL::PKCS5.pbkdf2_hmac&lt;/code&gt;&lt;/a&gt; has been renamed to &lt;a href=&quot;kdf#method-c-pbkdf2_hmac&quot;&gt;&lt;code&gt;OpenSSL::KDF.pbkdf2_hmac&lt;/code&gt;&lt;/a&gt;. This method is provided for backwards compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdc8fd8a6ed077f83aeb46f4232d4c72a5174fc9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pkey/dsa&quot;&gt;&lt;code&gt;DSA&lt;/code&gt;&lt;/a&gt; (OpenSSL::PKey::DSA)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79da6ceef0fffa899669d33c9bd2c2826c7a8cb7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pkey/rsa&quot;&gt;&lt;code&gt;RSA&lt;/code&gt;&lt;/a&gt; (OpenSSL::PKey::RSA)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="058fccf89f78b4805a87678ca00141c2d850e2ff" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;plugin/sourcelist&quot;&gt;&lt;code&gt;SourceList&lt;/code&gt;&lt;/a&gt; object to be used while parsing the Gemfile, setting the approptiate options to be used with &lt;a href=&quot;source&quot;&gt;&lt;code&gt;Source&lt;/code&gt;&lt;/a&gt; classes for plugin installation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="309573ee85c4c34ad665c7b75aaf9213527ae907" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pointer&quot;&gt;&lt;code&gt;Fiddle::Pointer&lt;/code&gt;&lt;/a&gt; is a class to handle C pointers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b89c9ac8e245383c1ad204989cc75267b49f8be" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pop3&quot;&gt;&lt;code&gt;POP3&lt;/code&gt;&lt;/a&gt; authentication error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff5bbd0910f5ca2f1f15769b7944c09e6a15b929" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pop3#method-i-delete_all&quot;&gt;&lt;code&gt;POP3#delete_all&lt;/code&gt;&lt;/a&gt; is an alternative for &lt;a href=&quot;pop3#method-i-each_mail&quot;&gt;&lt;code&gt;each_mail&lt;/code&gt;&lt;/a&gt; and delete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a9bce26880807edef4dc8f817e75d88cd196cc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pp#method-c-pp&quot;&gt;&lt;code&gt;PP.pp&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;out&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b6a70340faa1aa81b6546329c1835fabde83f3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pp#method-c-singleline_pp&quot;&gt;&lt;code&gt;PP.singleline_pp&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;out&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa0bcc76cb43432d003b4f0abdf957498bee8226" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ppmethods#method-i-seplist&quot;&gt;&lt;code&gt;seplist&lt;/code&gt;&lt;/a&gt; iterates the &lt;code&gt;list&lt;/code&gt; using &lt;code&gt;iter_method&lt;/code&gt;. It yields each object to the block given for &lt;a href=&quot;ppmethods#method-i-seplist&quot;&gt;&lt;code&gt;seplist&lt;/code&gt;&lt;/a&gt;. The procedure &lt;code&gt;separator_proc&lt;/code&gt; is called between each yields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f65b6ebfa57497ab5dcea97341e7b2c4dd37ec06" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;prime&quot;&gt;&lt;code&gt;Prime&lt;/code&gt;&lt;/a&gt; is Enumerable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a32481231d32df76eb95c28d38d38c91be127e8c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;prime#method-i-prime_division&quot;&gt;&lt;code&gt;prime_division&lt;/code&gt;&lt;/a&gt;(n) returns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c53eb0d3b6a0be8619c573375af6b3abb8ee8aea" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;primitive&quot;&gt;&lt;code&gt;Primitive&lt;/code&gt;&lt;/a&gt; sub-classes and their mapping to Ruby classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="451fad4f5cd0135f7c95c9824d19d912b3c02b10" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;proc&quot;&gt;&lt;code&gt;Proc&lt;/code&gt;&lt;/a&gt; objects are &lt;em&gt;closures&lt;/em&gt;, meaning they remember and can use the entire context in which they were created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5f6c3eaf9ce513f9dea05f856bf909439473f93" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;proc#method-c-new&quot;&gt;&lt;code&gt;Proc.new&lt;/code&gt;&lt;/a&gt; is the same as &lt;code&gt;proc&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7648fa2f63144ec791e915785e23cb39d6dca0ff" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;proc#method-i-lambda-3F&quot;&gt;&lt;code&gt;Proc#lambda?&lt;/code&gt;&lt;/a&gt; is a predicate for the tricks. It returns &lt;code&gt;true&lt;/code&gt; if no tricks apply.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dc9c795be5300d7dd89d0effe25667a320240f7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;process&quot;&gt;&lt;code&gt;Process&lt;/code&gt;&lt;/a&gt; credentials</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a836c7ae7e5ff28ba1f1938265041ae5a0bb2975" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;process&quot;&gt;&lt;code&gt;Process&lt;/code&gt;&lt;/a&gt; out-of-band data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18342e05cd8fea42ddfa259462a1c77ba3f9c342" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pstore&quot;&gt;&lt;code&gt;PStore&lt;/code&gt;&lt;/a&gt; implements a file based persistence mechanism based on a &lt;a href=&quot;hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt;. User code can store hierarchies of Ruby objects (values) into the data store file by name (keys). An object hierarchy may be just a single object. User code may later read values back from the data store or even update data, as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51fd70b5026ff3bd5b3af6d796abab9f68922d59" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pstore&quot;&gt;&lt;code&gt;PStore&lt;/code&gt;&lt;/a&gt; objects are always reentrant. But if &lt;em&gt;thread_safe&lt;/em&gt; is set to true, then it will become thread-safe at the cost of a minor performance hit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3495342eca8e777fe170125706017651f3ca1550" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;psych&quot;&gt;&lt;code&gt;Psych&lt;/code&gt;&lt;/a&gt; is a YAML parser and emitter. &lt;a href=&quot;psych&quot;&gt;&lt;code&gt;Psych&lt;/code&gt;&lt;/a&gt; leverages libyaml [Home page: &lt;a href=&quot;https://pyyaml.org/wiki/LibYAML&quot;&gt;pyyaml.org/wiki/LibYAML&lt;/a&gt;] or [HG repo: &lt;a href=&quot;https://bitbucket.org/xi/libyaml&quot;&gt;bitbucket.org/xi/libyaml&lt;/a&gt;] for its YAML parsing and emitting capabilities. In addition to wrapping libyaml, &lt;a href=&quot;psych&quot;&gt;&lt;code&gt;Psych&lt;/code&gt;&lt;/a&gt; also knows how to serialize and de-serialize most Ruby objects to and from the YAML format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04055fa912031067f1c07b25f83b0a28c41e92c5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;psych&quot;&gt;&lt;code&gt;Psych&lt;/code&gt;&lt;/a&gt; provides a range of interfaces for parsing a YAML document ranging from low level to high level, depending on your parsing needs. At the lowest level, is an event based parser. Mid level is access to the raw YAML AST, and at the highest level is the ability to unmarshal YAML to Ruby objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="825ef40732530ca274afb1f7ebb4787f3f08ee53" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;psych&quot;&gt;&lt;code&gt;Psych&lt;/code&gt;&lt;/a&gt; provides a range of interfaces ranging from low to high level for producing YAML documents. Very similar to the YAML parsing interfaces, &lt;a href=&quot;psych&quot;&gt;&lt;code&gt;Psych&lt;/code&gt;&lt;/a&gt; provides at the lowest level, an event based system, mid-level is building a YAML AST, and the highest level is converting a Ruby object straight to a YAML document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9e2ea826860275bf0fb3a9c810e22b54710fc58" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;psych&quot;&gt;&lt;code&gt;Psych&lt;/code&gt;&lt;/a&gt; provides access to an AST produced from parsing a YAML document. This tree is built using the &lt;code&gt;Psych::Parser&lt;/code&gt; and &lt;code&gt;Psych::TreeBuilder&lt;/code&gt;. The AST can be examined and manipulated freely. Please see &lt;a href=&quot;psych#method-c-parse_stream&quot;&gt;&lt;code&gt;Psych::parse_stream&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;Psych::Nodes&lt;/code&gt;, and &lt;code&gt;Psych::Nodes::Node&lt;/code&gt; for more information on dealing with YAML syntax trees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d760b6731e5117b3a222cdceebbc2e107c66b4d2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pty&quot;&gt;&lt;code&gt;PTY&lt;/code&gt;&lt;/a&gt; allows you to allocate new terminals using &lt;a href=&quot;pty#method-c-open&quot;&gt;&lt;code&gt;::open&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;pty#method-c-spawn&quot;&gt;&lt;code&gt;::spawn&lt;/code&gt;&lt;/a&gt; a new terminal with a specific command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2042aed63086dfcb9f7641b16813f4e296ecc13" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;queue&quot;&gt;&lt;code&gt;Queue&lt;/code&gt;&lt;/a&gt; for repair mode (Linux 3.5, glibc 2.18)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b6d534a0c3f163369beb8e414052b6a81071a37" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;random&quot;&gt;&lt;code&gt;Random&lt;/code&gt;&lt;/a&gt; provides an interface to Ruby's pseudo-random number generator, or PRNG. The PRNG produces a deterministic sequence of bits which approximate true randomness. The sequence may be represented by integers, floats, or binary strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f09fa477734c14480d97328a005790810de8006" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;random#method-c-new&quot;&gt;&lt;code&gt;Random.new&lt;/code&gt;&lt;/a&gt; will create a new PRNG with a state independent of &lt;a href=&quot;random#DEFAULT&quot;&gt;&lt;code&gt;Random::DEFAULT&lt;/code&gt;&lt;/a&gt;, allowing multiple generators with different seed values or sequence positions to exist simultaneously. &lt;a href=&quot;random&quot;&gt;&lt;code&gt;Random&lt;/code&gt;&lt;/a&gt; objects can be marshaled, allowing sequences to be saved and resumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23110f71a4d65e22b5c376667ac3a95c20c23c8b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;random#method-c-seed&quot;&gt;&lt;code&gt;::seed&lt;/code&gt;&lt;/a&gt; is equivalent to ::add where &lt;em&gt;entropy&lt;/em&gt; is length of &lt;em&gt;str&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31223fed899e30b76d22a9551286cfe650758510" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;rational#method-i-magnitude&quot;&gt;&lt;code&gt;Rational#magnitude&lt;/code&gt;&lt;/a&gt; is an alias for &lt;a href=&quot;rational#method-i-abs&quot;&gt;&lt;code&gt;Rational#abs&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57dec63597ab86b812398890637f6f0fe26d2ebe" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;readline&quot;&gt;&lt;code&gt;Readline&lt;/code&gt;&lt;/a&gt; will only call this proc with characters specified in &lt;code&gt;completer_quote_characters&lt;/code&gt;, to discover if they indicate the end of a quoted argument, or characters specified in &lt;code&gt;completer_word_break_characters&lt;/code&gt;, to discover if they indicate a break between arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="083e4caee0e480150646b387968e289ffdb63c2b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;readtimeout&quot;&gt;&lt;code&gt;ReadTimeout&lt;/code&gt;&lt;/a&gt;, a subclass of &lt;a href=&quot;../timeout/error&quot;&gt;&lt;code&gt;Timeout::Error&lt;/code&gt;&lt;/a&gt;, is raised if a chunk of the response cannot be read within the read_timeout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f14d849c315a3c30df25b21c7a3bd067b43df5ab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;referror&quot;&gt;&lt;code&gt;RefError&lt;/code&gt;&lt;/a&gt; is raised when a referenced object has been recycled by the garbage collector</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95aa9903797169c45cff2ba1ca0a4a41035d0e1e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;regexp&quot;&gt;&lt;code&gt;Regexp&lt;/code&gt;&lt;/a&gt; &amp;ndash; Regular expressions. Also includes options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="108ad4843f25f2fa6f7fb104957a9d57df5d44ee" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;regexp&quot;&gt;&lt;code&gt;Regexp&lt;/code&gt;&lt;/a&gt;&lt;em&gt;internally&lt;/em&gt; used for parsing IPv4 address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43fc0731ae2b387cc4a3d64175d82b1f4ad17be7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;regexp&quot;&gt;&lt;code&gt;Regexp&lt;/code&gt;&lt;/a&gt;&lt;em&gt;internally&lt;/em&gt; used for parsing IPv6 address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b0251e6a1eaaa5e03f25988e53b840c8cfbed45" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;regexp#method-i-match&quot;&gt;&lt;code&gt;Regexp#match&lt;/code&gt;&lt;/a&gt; method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a183c4d02f79b029f5cdccafc3c43638a803cb25" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;regexp#method-i-match&quot;&gt;&lt;code&gt;Regexp#match&lt;/code&gt;&lt;/a&gt; returns a &lt;a href=&quot;matchdata&quot;&gt;&lt;code&gt;MatchData&lt;/code&gt;&lt;/a&gt; object which makes the captured text available with its [] method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a803e555a9216fe8870d85cad907bc61f4fed1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;resolv&quot;&gt;&lt;code&gt;Resolv&lt;/code&gt;&lt;/a&gt; can look up various &lt;a href=&quot;resolv/dns&quot;&gt;&lt;code&gt;DNS&lt;/code&gt;&lt;/a&gt; resources using the &lt;a href=&quot;resolv/dns&quot;&gt;&lt;code&gt;DNS&lt;/code&gt;&lt;/a&gt; module directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cb44c47d49c2f37b4c87a50a0d0ba016ecaf753" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;resolv&quot;&gt;&lt;code&gt;Resolv&lt;/code&gt;&lt;/a&gt; is a thread-aware &lt;a href=&quot;resolv/dns&quot;&gt;&lt;code&gt;DNS&lt;/code&gt;&lt;/a&gt; resolver library written in Ruby. &lt;a href=&quot;resolv&quot;&gt;&lt;code&gt;Resolv&lt;/code&gt;&lt;/a&gt; can handle multiple &lt;a href=&quot;resolv/dns&quot;&gt;&lt;code&gt;DNS&lt;/code&gt;&lt;/a&gt; requests concurrently without blocking the entire Ruby interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80f54df6c79fb94b2f411c406f0e9cd6f92c27db" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;rfc2396_parser&quot;&gt;&lt;code&gt;Parser&lt;/code&gt;&lt;/a&gt; for internal use [URI::DEFAULT_PARSER by default].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06ddeb097dc51a221bcfb312e0473c3e5ea30282" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;rinda&quot;&gt;&lt;code&gt;Rinda&lt;/code&gt;&lt;/a&gt; is part of &lt;a href=&quot;drb&quot;&gt;&lt;code&gt;DRb&lt;/code&gt;&lt;/a&gt; (dRuby).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac1bf4bcfad6cc641bb67a3d00a973b78d4a063d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ringfinger&quot;&gt;&lt;code&gt;Rinda::RingFinger&lt;/code&gt;&lt;/a&gt; also understands multicast addresses and sets them up properly. This allows you to run multiple RingServers on the same host:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb45b2aa27fee96ffbd66151f55a44aa8420e1b6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ringfinger&quot;&gt;&lt;code&gt;RingFinger&lt;/code&gt;&lt;/a&gt; is used by &lt;a href=&quot;ringserver&quot;&gt;&lt;code&gt;RingServer&lt;/code&gt;&lt;/a&gt; clients to discover the RingServer's &lt;a href=&quot;tuplespace&quot;&gt;&lt;code&gt;TupleSpace&lt;/code&gt;&lt;/a&gt;. Typically, all a client needs to do is call &lt;a href=&quot;ringfinger#method-c-primary&quot;&gt;&lt;code&gt;RingFinger.primary&lt;/code&gt;&lt;/a&gt; to retrieve the remote &lt;a href=&quot;tuplespace&quot;&gt;&lt;code&gt;TupleSpace&lt;/code&gt;&lt;/a&gt;, which it can then begin using.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="489837e3cb92e2b7fa956e91baea7c85f23b8f0e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ringprovider&quot;&gt;&lt;code&gt;RingProvider&lt;/code&gt;&lt;/a&gt; uses a &lt;a href=&quot;ringserver&quot;&gt;&lt;code&gt;RingServer&lt;/code&gt;&lt;/a&gt; advertised &lt;a href=&quot;tuplespace&quot;&gt;&lt;code&gt;TupleSpace&lt;/code&gt;&lt;/a&gt; as a name service. &lt;a href=&quot;tuplespace&quot;&gt;&lt;code&gt;TupleSpace&lt;/code&gt;&lt;/a&gt; clients can register themselves with the remote &lt;a href=&quot;tuplespace&quot;&gt;&lt;code&gt;TupleSpace&lt;/code&gt;&lt;/a&gt; and look up other provided services via the remote &lt;a href=&quot;tuplespace&quot;&gt;&lt;code&gt;TupleSpace&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="788dafa4a10821f2c11462cdf4e0e0f0c43c0c94" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ringserver&quot;&gt;&lt;code&gt;RingServer&lt;/code&gt;&lt;/a&gt; can also listen on multicast addresses for announcements. This allows multiple RingServers to run on the same host. To use network broadcast and multicast:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a78db4518ade20d75931f05471918425d72d4592" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ripper&quot;&gt;&lt;code&gt;Ripper&lt;/code&gt;&lt;/a&gt; is a Ruby script parser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcca1da7be3f305e4ea501722f66066d578a7111" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ripper&quot;&gt;&lt;code&gt;Ripper&lt;/code&gt;&lt;/a&gt; provides an easy interface for parsing your program into a symbolic expression tree (or S-expression).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcd9e066190c938eb2bcaab1445d680e2ff75113" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;rmd160&quot;&gt;&lt;code&gt;RMD160&lt;/code&gt;&lt;/a&gt; calculates a digest of 160 bits (20 bytes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cc31f7e7c1e29886d607298a89b8ec0ec7e0de4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;rsa&quot;&gt;&lt;code&gt;RSA&lt;/code&gt;&lt;/a&gt; is an asymmetric public key algorithm that has been formalized in RFC 3447. It is in widespread use in public key infrastructures (PKI) where certificates (cf. &lt;a href=&quot;../x509/certificate&quot;&gt;&lt;code&gt;OpenSSL::X509::Certificate&lt;/code&gt;&lt;/a&gt;) often are issued on the basis of a public/private &lt;a href=&quot;rsa&quot;&gt;&lt;code&gt;RSA&lt;/code&gt;&lt;/a&gt; key pair. &lt;a href=&quot;rsa&quot;&gt;&lt;code&gt;RSA&lt;/code&gt;&lt;/a&gt; is used in a wide field of applications such as secure (symmetric) key exchange, e.g. when establishing a secure TLS/SSL connection. It is also used in various digital signature schemes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea52736b88607041d73cf66564f4da5826391d3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;rsaerror&quot;&gt;&lt;code&gt;RSAError&lt;/code&gt;&lt;/a&gt; will be raised if an error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fef6613390b9a73c8f5a9c3294641695574d0eb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;rubyvm#DEFAULT_PARAMS&quot;&gt;&lt;code&gt;DEFAULT_PARAMS&lt;/code&gt;&lt;/a&gt; This constant variable shows VM's default parameters. Note that changing these values does not affect VM execution. Specification is not stable and you should not depend on this value. Of course, this constant is MRI specific.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e5f64e114c57d498c92c6dd191583e709485f31" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;rubyvm#OPTS&quot;&gt;&lt;code&gt;OPTS&lt;/code&gt;&lt;/a&gt;, which shows vm build options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04c9466a007a56f823a69cc2b0c712ad1e739fbf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;runtimeerror&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; &amp;ndash; default for &lt;code&gt;raise&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b649aea2ba0bfad15b6b613ce1a0a48b30e8985f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;scanf&quot;&gt;&lt;code&gt;Scanf&lt;/code&gt;&lt;/a&gt; scans an input string or stream according to a &lt;strong&gt;format&lt;/strong&gt;, as described below in Conversions, and returns an array of matches between the format and the input. The format is defined in a string, and is similar (though not identical) to the formats used in &lt;a href=&quot;kernel#method-i-printf&quot;&gt;&lt;code&gt;Kernel#printf&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;kernel#method-i-sprintf&quot;&gt;&lt;code&gt;Kernel#sprintf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5565cc74dee38566243379851ea01ac0183bfb4d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;scripterror&quot;&gt;&lt;code&gt;ScriptError&lt;/code&gt;&lt;/a&gt; is the superclass for errors raised when a script can not be executed because of a &lt;code&gt;LoadError&lt;/code&gt;, &lt;code&gt;NotImplementedError&lt;/code&gt; or a &lt;code&gt;SyntaxError&lt;/code&gt;. Note these type of &lt;code&gt;ScriptErrors&lt;/code&gt; are not &lt;code&gt;StandardError&lt;/code&gt; and will not be rescued unless it is specified explicitly (or its ancestor &lt;code&gt;Exception&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71255ca5a4c25ea9aa77897fcf2fedb812f63ad7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;sdbm&quot;&gt;&lt;code&gt;SDBM&lt;/code&gt;&lt;/a&gt; provides a simple file-based key-value store, which can only store &lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; keys and values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f519e126600bb88364243872aba1dea0090bf04f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;session&quot;&gt;&lt;code&gt;Session&lt;/code&gt;&lt;/a&gt; verification mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab9d513fa1724dd36919e19e7da363bfaae24141" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;session#method-i-delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt; deletes a session from session storage. It does not however remove the session id from the client. If the client makes another request with the same id, the effect will be to start a new session with the old session's id.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b80dc79b991a931436d7cf5c6d2ea0e5c43a58a0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; +@addr+, the internal stored ip address, to given &lt;code&gt;addr&lt;/code&gt;. The parameter &lt;code&gt;addr&lt;/code&gt; is validated using the first &lt;code&gt;family&lt;/code&gt; member, which is &lt;code&gt;Socket::AF_INET&lt;/code&gt; or &lt;code&gt;Socket::AF_INET6&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16b093ca2ecf4b6b16f32f61adb9ab82e0e39651" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; I/O position from the beginning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a66352cce8d393e1fee41ddb70b08c13f76b33" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; I/O position from the current position</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b150cfd2b85ae9b57887b164ec0baa7bfd776d7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; I/O position from the end</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c4b5156d952db23a74fbec7737ff7c53b11216" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; I/O position to the next hole</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14494f0927b241e3275a1610669dc7d63635ad3d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; I/O position to the next location containing data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c331dce7544a35dc339146ff5fb7d9c16332324" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; Intersection &amp;mdash; Returns a new array containing unique elements common to the two arrays. The order is preserved from the original array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b137515dcd6330bded73a94b2d1904f55751772d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; Union &amp;mdash; Returns a new array by joining &lt;code&gt;ary&lt;/code&gt; with &lt;code&gt;other_ary&lt;/code&gt;, excluding any duplicates and preserving the order from the given arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c2bbbf6e34bd60727da9172df13d650c52d356b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; Union &amp;mdash; Returns a new array by joining &lt;code&gt;other_ary&lt;/code&gt;s with &lt;code&gt;self&lt;/code&gt;, excluding any duplicates and preserving the order from the given arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5713ff824488807becf521bfc57e3ad57b247f8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; an error (a protected method).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54e86d507ee8400410a75673308c35a552f69f0a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; assumes that the identity of each element does not change while it is stored. Modifying an element of a set will render the set to an unreliable state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d8ee45ee077fc0ffe0ac3503bdf2b675050104c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; current netmask to given mask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f27148a090c96de5630f9138f123e0ab70282db2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; date-time format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c70fc7798f104ed7f30245e37c62bdce4bcc8028" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; element or elements of matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d624949e05e65ab40b083f16c165df70be140a9b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; element or elements of vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f5e1774896832d497748c7ccf8bc07b4ef4c2a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; implements a collection of unordered values with no duplicates. This is a hybrid of Array's intuitive inter-operation facilities and Hash's fast lookup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f36ce1e8a808fd106401bf1b2dfcd4d1d322fe38" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; is easy to use with &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; objects (implementing &lt;code&gt;each&lt;/code&gt;). Most of the initializer methods and binary operators accept generic &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; objects besides sets and arrays. An &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; object can be converted to &lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; using the &lt;code&gt;to_set&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db8fd11f337ee09bf39e5fa24ccdf5972ede7777" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; local variable named &lt;code&gt;symbol&lt;/code&gt; as &lt;code&gt;obj&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd083f423e5eb75351717760d295b019a82ad92a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; logging severity threshold.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f7d73f675f81d36d2fa2f1c98f8ed9ba88d883d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; maximum segment size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="573f6914998d5f892e4b640b56743b9a77f5358b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; netns of a socket (Linux 3.4)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4778c53a54e684e43a84bd1f11f39cf61d60b5eb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; options. Takes the same argument as &lt;a href=&quot;getoptlong#method-c-new&quot;&gt;&lt;code&gt;GetoptLong.new&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3181c6b1174fb7eb5c60b34b7b90b2ca6a5fe89" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; terminal size to &lt;code&gt;rows&lt;/code&gt; and &lt;code&gt;columns&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc33d8649ffd19cbc9f130b05ed43e67879d2bdd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; the accept character set for all new &lt;a href=&quot;cgi&quot;&gt;&lt;code&gt;CGI&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e00df85509a31780b99d909162e7c2ec15aa5cb5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; the byte position of the scan pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8667548eac048b068087c268a3854fd03fa23dc2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; the changed state of this object. Notifications will be sent only if the changed &lt;code&gt;state&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41d21784297ca735072df7ab5d86507a9afc48f5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; the default &lt;a href=&quot;acl&quot;&gt;&lt;code&gt;ACL&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;acl&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e808ae891e6a8e840ec2b8aa39a3a44ba8d99c4b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; the default id conversion object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f33f371858b0294b5daa255d247496f4147d87c1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; the handling of the ordering of options and arguments. A &lt;a href=&quot;runtimeerror&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; is raised if option processing has already started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb255687b4c7dbbd4a700f141115864ccb1963e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; the index of the current cursor position in &lt;code&gt;Readline.line_buffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9bcfa5ab6e7f583d6331ca18095a54647f927d0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; the mark for mark-based routing (Linux 2.6.25)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d18f0140875b3d56826705a2788733203bfdc9e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; the peek offset (Linux 3.4)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d35992998506c2ba2cb938a1302e35d0289761ea" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; the port range for sockets with unspecified port numbers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fa552c12c0fc06eaeed4f0492b84265ab9ee1a8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; the scan pointer to the end of the string and clear matching data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bcc55d8e4f37cbd98dbe97f79ac51711a2ef0c7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; the scan pointer to the previous position. Only one previous position is remembered, and it changes with each scanning operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a9856e5ba6cf595f6c542f82b7e304f69f57918" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; the supplemental group access list to the given &lt;code&gt;Array&lt;/code&gt; of group IDs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab9df2ce24733f9cb17bc6d82f0e34ec77fe58d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; the threshold in microseconds for low latency polling (Linux 3.11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0085e6c616faf5cd58ec10ac16ba601d3c550035" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; up option processing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b52516beb7f5dfe2a71f798c6898a4b23f39252b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; uses &lt;a href=&quot;hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; as storage, so you must note the following points:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7cf8cd575b55814c498a7dcacda8e358c8af8b5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; yydebug.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41bec2b80b332d68c881fe3c41ecc5614d7bc91f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;shell&quot;&gt;&lt;code&gt;Shell&lt;/code&gt;&lt;/a&gt; implements an idiomatic Ruby interface for common UNIX shell commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eef99478f2441b5ef32a34e128b041904b7bab6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;shell&quot;&gt;&lt;code&gt;Shell&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;optionparser/completion&quot;&gt;&lt;code&gt;Completion&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;shell&quot;&gt;&lt;code&gt;Shell&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;optionparser/completion&quot;&gt;&lt;code&gt;Completion&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7ba61a6fdf650df12f7ca9cd0d8ef631a13b80fd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;shellwords&quot;&gt;&lt;code&gt;Shellwords&lt;/code&gt;&lt;/a&gt; &amp;ndash; Anything accepted by &lt;code&gt;Shellwords.shellwords&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33db63f8012f3838d9bc4967d84f27737f381a93" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;shellwords&quot;&gt;&lt;code&gt;Shellwords&lt;/code&gt;&lt;/a&gt; also comes with a core extension for &lt;a href=&quot;array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;array#method-i-shelljoin&quot;&gt;&lt;code&gt;Array#shelljoin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87d117a48b34dc906d884363833a81eda51c1c05" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;signal#method-c-trap&quot;&gt;&lt;code&gt;Signal.trap&lt;/code&gt;&lt;/a&gt; is safe to use inside blocks passed to &lt;a href=&quot;signal#method-c-trap&quot;&gt;&lt;code&gt;Signal.trap&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d46f171f9604511816fff1058992e2bd4c79ac8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;singleforwardable&quot;&gt;&lt;code&gt;SingleForwardable&lt;/code&gt;&lt;/a&gt; can be used to setup delegation at the object level as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4acff3a2503224d0a71f1d2e87256d076b7b69e6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;singleline&quot;&gt;&lt;code&gt;PrettyPrint::SingleLine&lt;/code&gt;&lt;/a&gt; is used by &lt;a href=&quot;../prettyprint#method-c-singleline_format&quot;&gt;&lt;code&gt;PrettyPrint.singleline_format&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad2188055cdc9782e0b60b747e69926efb854adf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;singleton&quot;&gt;&lt;code&gt;Singleton&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;marshal&quot;&gt;&lt;code&gt;Marshal&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd0bb565b7889075ce2e06e105ef64b2f3904d0a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;smtp&quot;&gt;&lt;code&gt;SMTP&lt;/code&gt;&lt;/a&gt; Authentication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0ab24cce117abf6382372c531e96eb078f66b5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;socket&quot;&gt;&lt;code&gt;Socket&lt;/code&gt;&lt;/a&gt; has had listen() called on it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2bd6e76d43d1cb4d2177bd04e49d8fa01f1932b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;socket&quot;&gt;&lt;code&gt;Socket&lt;/code&gt;&lt;/a&gt; type not supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70fd7491026a11bc1a1aee91df13910221fef1aa" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;socket#SOCK_DGRAM&quot;&gt;&lt;code&gt;Socket::SOCK_DGRAM&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;socket#SOCK_DGRAM&quot;&gt;&lt;code&gt;Socket::SOCK_DGRAM&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="dc9411722ebcfc01a0ee27cd8aa8403c075981a7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;socket#method-c-sockaddr_in&quot;&gt;&lt;code&gt;Socket.sockaddr_in&lt;/code&gt;&lt;/a&gt;(&amp;ldquo;smtp&amp;rdquo;, &amp;ldquo;2001:DB8::1&amp;rdquo;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7ba8c68dbbbc58ef0e9dc88a70a8f6600347a2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;socket#method-c-sockaddr_in&quot;&gt;&lt;code&gt;Socket.sockaddr_in&lt;/code&gt;&lt;/a&gt;(80, &amp;ldquo;172.18.22.42&amp;rdquo;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a404e1650f91d1bf589f6db516631881af9fc08" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;socket#method-c-sockaddr_in&quot;&gt;&lt;code&gt;Socket.sockaddr_in&lt;/code&gt;&lt;/a&gt;(80, &amp;ldquo;www.ruby-lang.org&amp;rdquo;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62cfe236b938da29739327838c69507a9b14495b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;socket#method-c-sockaddr_un&quot;&gt;&lt;code&gt;Socket.sockaddr_un&lt;/code&gt;&lt;/a&gt;(&amp;ldquo;/tmp/sock&amp;rdquo;)</source>
          <target state="translated">&lt;a href=&quot;socket#method-c-sockaddr_un&quot;&gt;&lt;code&gt;Socket.sockaddr_un&lt;/code&gt;&lt;/a&gt;(&amp;ldquo;/tmp/sock&amp;rdquo;)</target>
        </trans-unit>
        <trans-unit id="7c26b43177f8f7af638759ea919c88884eaff1e1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;socket#method-c-tcp&quot;&gt;&lt;code&gt;Socket.tcp&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;io#method-c-open&quot;&gt;&lt;code&gt;TCPSocket.open&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ef1fea279ea56d397724910214d67de869818f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;socket#method-c-tcp_server_loop&quot;&gt;&lt;code&gt;Socket.tcp_server_loop&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;io#method-c-open&quot;&gt;&lt;code&gt;TCPServer.open&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00856da8c59ac6c63789e274d55c640e007954fc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;socket#method-c-udp_server_loop&quot;&gt;&lt;code&gt;Socket.udp_server_loop&lt;/code&gt;&lt;/a&gt; can be implemented using this method as follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8568cf37508d45fab7313189795d0fe207d35c11" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;socket#method-c-unix&quot;&gt;&lt;code&gt;Socket.unix&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;io#method-c-open&quot;&gt;&lt;code&gt;UNIXSocket.open&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="161fc50fc5cd64620425359216fa0c13b0ec8f47" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;socket#method-c-unix_server_loop&quot;&gt;&lt;code&gt;Socket.unix_server_loop&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;io#method-c-open&quot;&gt;&lt;code&gt;UNIXServer.open&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41f53acb4221d014c3843fa100879083aa9149a2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;socket#method-i-accept_nonblock&quot;&gt;&lt;code&gt;Socket#accept_nonblock&lt;/code&gt;&lt;/a&gt; may raise any error corresponding to accept(2) failure, including Errno::EWOULDBLOCK.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="892f4c5e11beab98cad71a7175e411d58f11c0d4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;socket#method-i-connect_nonblock&quot;&gt;&lt;code&gt;Socket#connect_nonblock&lt;/code&gt;&lt;/a&gt; may raise any error corresponding to connect(2) failure, including Errno::EINPROGRESS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e45b405283d1482402b97f9522270edbfe274b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;socket#method-i-recvfrom_nonblock&quot;&gt;&lt;code&gt;Socket#recvfrom_nonblock&lt;/code&gt;&lt;/a&gt; may raise any error corresponding to recvfrom(2) failure, including Errno::EWOULDBLOCK.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="042cddebc35d712fe955d82f430e5158f7c9348f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;socketerror&quot;&gt;&lt;code&gt;SocketError&lt;/code&gt;&lt;/a&gt; is the error class for socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4e150c6b5cfd0ad7b80ce8a4eeab163a85956fb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;sortedset&quot;&gt;&lt;code&gt;SortedSet&lt;/code&gt;&lt;/a&gt; implements a &lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; that guarantees that its elements are yielded in sorted order (according to the return values of their #&amp;lt;=&amp;gt; methods) when iterating over them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a252707d19f00ed419a1553f8a46c9d59f9a3d29" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;srv&quot;&gt;&lt;code&gt;SRV&lt;/code&gt;&lt;/a&gt; resource record defined in RFC 2782</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ce772fbfa159d9558401c90aea79efde39782c0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ssl&quot;&gt;&lt;code&gt;SSL&lt;/code&gt;&lt;/a&gt; 2.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9570ba2a1473c5231ffb071a8e94f1eb40083c29" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ssl&quot;&gt;&lt;code&gt;SSL&lt;/code&gt;&lt;/a&gt; 3.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95998aa5ea31c578ca7d61293eb135944f18c85a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;sslconfig&quot;&gt;&lt;code&gt;SSLConfig&lt;/code&gt;&lt;/a&gt; handles the needed SSL information for establishing a &lt;a href=&quot;../drbsslsocket&quot;&gt;&lt;code&gt;DRbSSLSocket&lt;/code&gt;&lt;/a&gt; connection, including generating the X509 / RSA pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91977d6cba85ee17cc10316dee101d8b8f1888b2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;sslcontext#attribute-i-cert&quot;&gt;&lt;code&gt;cert=&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;sslcontext#attribute-i-key&quot;&gt;&lt;code&gt;key=&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;sslcontext#attribute-i-extra_chain_cert&quot;&gt;&lt;code&gt;extra_chain_cert=&lt;/code&gt;&lt;/a&gt; are old accessor methods for setting certificate and internally call this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c8d6830a983112ce2868dc93367395ee9cac116" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;sslserver&quot;&gt;&lt;code&gt;SSLServer&lt;/code&gt;&lt;/a&gt; represents a TCP/IP server socket with Secure Sockets Layer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee216242ad8b48fbb476761bf3aec5e243510f99" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;standarderror&quot;&gt;&lt;code&gt;StandardError&lt;/code&gt;&lt;/a&gt; &amp;ndash; default for &lt;code&gt;rescue&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eff29be081f5dd3b5826d23209c5a81aba37f5e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;stopiteration&quot;&gt;&lt;code&gt;StopIteration&lt;/code&gt;&lt;/a&gt; raised in the block breaks the loop. In this case, loop returns the &amp;ldquo;result&amp;rdquo; value stored in the exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3158a35a99ecaa09292c29188d7869ad5f393046" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;store&quot;&gt;&lt;code&gt;YAML::Store&lt;/code&gt;&lt;/a&gt; objects are always reentrant. But if &lt;em&gt;thread_safe&lt;/em&gt; is set to true, then it will become thread-safe at the cost of a minor performance hit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7764ca55251855f6e48dc280eab960e07859fff" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;store&quot;&gt;&lt;code&gt;YAML::Store&lt;/code&gt;&lt;/a&gt; provides the same functionality as &lt;a href=&quot;../pstore&quot;&gt;&lt;code&gt;PStore&lt;/code&gt;&lt;/a&gt;, except it uses YAML to dump objects instead of &lt;a href=&quot;../marshal&quot;&gt;&lt;code&gt;Marshal&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9515619e91a7f5c550ab4d5dbdf8e1edfaf7961" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; &amp;ndash; Any non-empty string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34e3f2206dd73fd6e09daa380f240ffae3140fab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; Output&amp;mdash;Writes &lt;em&gt;obj&lt;/em&gt; to &lt;em&gt;ios&lt;/em&gt;. &lt;em&gt;obj&lt;/em&gt; will be converted to a string using &lt;code&gt;to_s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c0b34fb6f017113c7166489c8f06e89dcf1f8a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; arguments are converted to symbols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ba91706b47a0d3dbb49b031f0e2f066a2412962" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; for carriage return</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bafb9d07f7a1885e56c76854dbb0e20023b4f40a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; for linefeed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4d70ae082c8e8c931756f24f66be04ef03714de" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; representations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981bf3c51b7bd7e0c838b96cca3b5aa394842a0c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; that specifies which version of the HTML generation methods to use. If not specified, no HTML generation methods will be loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b9bb807f200bd5041cf4847cfb7e720aa03561" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; to extract URIs from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e046a61106a673ed739e925e2ac92f92eadf2d10" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;uri&quot;&gt;&lt;code&gt;URI&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64bba078ee11b2eac1a1d3ec063101e6df35746b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;string#method-i-inspect&quot;&gt;&lt;code&gt;String#inspect&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;regexp#method-i-inspect&quot;&gt;&lt;code&gt;Regexp#inspect&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8210e2fa2b3b8b22cb07a254828d732064b0218d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;string#method-i-shellescape&quot;&gt;&lt;code&gt;String#shellescape&lt;/code&gt;&lt;/a&gt; is a shorthand for this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0016d25fcf14d04d459b8180d7ea2ee7126c5cb4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;string#method-i-shellsplit&quot;&gt;&lt;code&gt;String#shellsplit&lt;/code&gt;&lt;/a&gt; is a shortcut for this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cd12f4440a7afad5799fe581618c52c0a9c6c53" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;stringscanner&quot;&gt;&lt;code&gt;StringScanner&lt;/code&gt;&lt;/a&gt; provides for lexical scanning operations on a &lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;. Here is an example of its usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f0b5868f8b88219483b1330efdc7eba52b13795" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;stringscanner#method-i-beginning_of_line-3F&quot;&gt;&lt;code&gt;beginning_of_line?&lt;/code&gt;&lt;/a&gt; (#bol?)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df3d7c95cac32619b5a5f1edb917091e4c657e48" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;struct#Group&quot;&gt;&lt;code&gt;Group&lt;/code&gt;&lt;/a&gt; is a &lt;a href=&quot;struct&quot;&gt;&lt;code&gt;Struct&lt;/code&gt;&lt;/a&gt; that is only available when compiled with &lt;code&gt;HAVE_GETGRENT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de24170e998f981c7b3d9e48e89b8ade5322af7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;struct#Passwd&quot;&gt;&lt;code&gt;Passwd&lt;/code&gt;&lt;/a&gt; is a &lt;a href=&quot;struct&quot;&gt;&lt;code&gt;Struct&lt;/code&gt;&lt;/a&gt; that contains the following members:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="175cc66af2edc312fa62db3e68f61910d1a7bcf7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;struct#Tms&quot;&gt;&lt;code&gt;Tms&lt;/code&gt;&lt;/a&gt; for backward compatibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7610cff053c75a2858b394261fdeec489efd8c36" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;struct#method-i-filter&quot;&gt;&lt;code&gt;Struct#filter&lt;/code&gt;&lt;/a&gt; is an alias for &lt;a href=&quot;struct#method-i-select&quot;&gt;&lt;code&gt;Struct#select&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e52af67b56cfccce671c235fede757791bbd020" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;switch&quot;&gt;&lt;code&gt;OptionParser::Switch&lt;/code&gt;&lt;/a&gt; instance to be added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ee7b9cad6c0ca18d402ed80ce2fd03b3f08ff95" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;switch&quot;&gt;&lt;code&gt;OptionParser::Switch&lt;/code&gt;&lt;/a&gt; instance to be inserted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97db99647b31e171d63cb24b176dc2c99a23189a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; naming the method that will be called when this &lt;a href=&quot;observable&quot;&gt;&lt;code&gt;Observable&lt;/code&gt;&lt;/a&gt; has changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e24d538918a309c65ab990d459311e9f829abaf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; (case insensitive)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5e32397137968d98a169d84d8971115496737f8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; table used for displaying incoming events:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67054ca2c391c6c657cf1bae7393ecca265c8135" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; table used for displaying trace information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb68120273cf61116b2359e65e6dffa1111de609" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;syslog&quot;&gt;&lt;code&gt;Syslog&lt;/code&gt;&lt;/a&gt; messages are typically passed to a central logging daemon. The daemon may filter them; route them into different files (usually found under /var/log); place them in SQL databases; forward them to centralized logging servers via TCP or UDP; or even alert the system administrator via email, pager or text message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe3f3a80c20f14e9e867610be320562dfb84eb87" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;systemcallerror&quot;&gt;&lt;code&gt;SystemCallError&lt;/code&gt;&lt;/a&gt; is the base class for all low-level platform-dependent errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf2fd78a5caf6790e3a9e674fdc84a4ac93240a3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tcpserver&quot;&gt;&lt;code&gt;TCPServer&lt;/code&gt;&lt;/a&gt; represents a TCP/IP server socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="999076a5287ddf8f7c69f59260b201d4b0570333" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tcpserver#method-i-accept_nonblock&quot;&gt;&lt;code&gt;TCPServer#accept_nonblock&lt;/code&gt;&lt;/a&gt; may raise any error corresponding to accept(2) failure, including Errno::EWOULDBLOCK.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de61e39c1a7a7ee1f7b71ba67fc78ab7a11d0edd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tcpsocket&quot;&gt;&lt;code&gt;TCPSocket&lt;/code&gt;&lt;/a&gt; represents a TCP/IP client socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b159b7f9fe5925c25210a577061d0eb4b3bff456" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tempfile&quot;&gt;&lt;code&gt;Tempfile&lt;/code&gt;&lt;/a&gt; itself however may not be entirely thread-safe. If you access the same &lt;a href=&quot;tempfile&quot;&gt;&lt;code&gt;Tempfile&lt;/code&gt;&lt;/a&gt; object from multiple threads then you should protect it with a mutex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e46274a0f249f381f0794fc5820aa87c174fb7e4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;thread&quot;&gt;&lt;code&gt;Thread&lt;/code&gt;&lt;/a&gt; initialization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59763dec08ddfb234d914e9f16daac80212de47b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;thread&quot;&gt;&lt;code&gt;Thread&lt;/code&gt;&lt;/a&gt; local values are carried along with threads, and do not respect fibers. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4f9d1c61eba042511fd7d3bf1322594a662616" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;thread&quot;&gt;&lt;code&gt;Thread&lt;/code&gt;&lt;/a&gt; status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d80a67391de6e3f602bc093615da967ae1ae878b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;thread&quot;&gt;&lt;code&gt;Thread&lt;/code&gt;&lt;/a&gt; termination</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35923c6b64866c59b486f57a06adee21db230ec1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;thread&quot;&gt;&lt;code&gt;Thread&lt;/code&gt;&lt;/a&gt; variables and scope</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="606a59b3a58033b330f35d46aa3ecfd514e3120c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;thread#method-i-5B-5D&quot;&gt;&lt;code&gt;Thread#[]&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;thread#method-i-5B-5D-3D&quot;&gt;&lt;code&gt;Thread#[]=&lt;/code&gt;&lt;/a&gt; are not thread-local but fiber-local. This confusion did not exist in Ruby 1.8 because fibers are only available since Ruby 1.9. Ruby 1.9 chooses that the methods behaves fiber-local to save following idiom for dynamic scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cb4ba7de15bebe35910548db7dab9356b988801" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;threadgroup&quot;&gt;&lt;code&gt;ThreadGroup&lt;/code&gt;&lt;/a&gt; provides a means of keeping track of a number of threads as a group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f700b582beef12da4daddab5f3a85b686c650770" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; &amp;ndash; Anything accepted by &lt;code&gt;Time.httpdate&lt;/code&gt; or &lt;code&gt;Time.parse&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7ee51577046a12e3e71eb980abfe0678da2334f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; between keepalive probes (Linux 2.4, glibc 2.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a4c5d894a49dcb373523bdf96fea2b49fc269a8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; is an abstraction of dates and times. &lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; is stored internally as the number of seconds with fraction since the &lt;em&gt;Epoch&lt;/em&gt;, January 1, 1970 00:00 UTC. Also see the library module &lt;a href=&quot;date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; class treats GMT (Greenwich Mean &lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt;) and UTC (Coordinated Universal &lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt;) as equivalent. GMT is the older way of referring to these baseline times but persists in the names of calls on POSIX systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f16b023ee63f34be78b068c43f11cd43554f74" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; stamping of incoming and outgoing packets (Linux 2.6.30)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da7204974704061c371e1ac359c5731bfd513cee" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; zone as hour offset from UTC (e.g. +0900)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93dcb608906b8009096ce377a0457fe7239aeca2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; zone name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7973385f0ba6ddc1eee50424b7aa8647d3105cbe" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;timeout&quot;&gt;&lt;code&gt;Timeout&lt;/code&gt;&lt;/a&gt; long-running blocks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a687111b9e470d582889f1d1edc49b6369e7c5e1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;timeout&quot;&gt;&lt;code&gt;Timeout&lt;/code&gt;&lt;/a&gt; provides a way to auto-terminate a potentially long-running operation if it hasn't finished in a fixed amount of time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff70e00d4721680a62988ca21c4a794f69072847" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;timeout/error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; message to raise with &lt;a href=&quot;exception&quot;&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;class&quot;&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/a&gt;. Omitting will use the default, &amp;ldquo;execution expired&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bae6389af1eb30f9fa77232a08cd54a3edfc1d9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;trueclass&quot;&gt;&lt;code&gt;TrueClass&lt;/code&gt;&lt;/a&gt; &amp;ndash; Accepts '+, yes, true, -, no, false' and defaults as &lt;code&gt;true&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bed0cbe0818637882dbdbe6f14e28e85cdbe10e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tsort&quot;&gt;&lt;code&gt;TSort&lt;/code&gt;&lt;/a&gt; implements topological sorting using Tarjan's algorithm for strongly connected components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b3da054fc7d2b9e51e817bb0f2896986a412c87" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tsort&quot;&gt;&lt;code&gt;TSort&lt;/code&gt;&lt;/a&gt; is designed to be able to be used with any object which can be interpreted as a directed graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b7e8df4c167f562c9e32f98d4de9d1516e9907c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tsort&quot;&gt;&lt;code&gt;TSort&lt;/code&gt;&lt;/a&gt; requires two methods to interpret an object as a graph, &lt;a href=&quot;tsort#method-i-tsort_each_node&quot;&gt;&lt;code&gt;tsort_each_node&lt;/code&gt;&lt;/a&gt; and tsort_each_child.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1fd7b9822896b0c31095ea62347d72041e48b41" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tsort#method-i-each_strongly_connected_component&quot;&gt;&lt;code&gt;each_strongly_connected_component&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cda4ca998a1427885ed9a79a2eed490a0f473513" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tsort#method-i-each_strongly_connected_component_from&quot;&gt;&lt;code&gt;each_strongly_connected_component_from&lt;/code&gt;&lt;/a&gt; doesn't call &lt;a href=&quot;tsort#method-i-tsort_each_node&quot;&gt;&lt;code&gt;tsort_each_node&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6f1f98002b66d00f5ee52df2eec0615837772d8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tsort#method-i-tsort_each&quot;&gt;&lt;code&gt;tsort_each&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;nil&lt;/code&gt;. If there is a cycle, &lt;code&gt;TSort::Cyclic&lt;/code&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b63f5de6c1b3875178988436584444a00d7a19f0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tsort#method-i-tsort_each_child&quot;&gt;&lt;code&gt;tsort_each_child&lt;/code&gt;&lt;/a&gt; is used to iterate for child nodes of &lt;em&gt;node&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c9e745dca2de003b72a470872b9590e9a6de5b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tsort#method-i-tsort_each_child&quot;&gt;&lt;code&gt;tsort_each_child&lt;/code&gt;&lt;/a&gt; is used to iterate for child nodes of a given node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7944139d34dbe1a6e5ad9532f6799b254989236" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tsort#method-i-tsort_each_node&quot;&gt;&lt;code&gt;tsort_each_node&lt;/code&gt;&lt;/a&gt; is used to iterate for all nodes over a graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb0e34a9c5a902c1bda0fe238f32a7110219ff0f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tuplebag&quot;&gt;&lt;code&gt;TupleBag&lt;/code&gt;&lt;/a&gt; is an unordered collection of tuples. It is the basis of Tuplespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b07ca1ff4ff7349fdf69c7d35aa9d62e24e5b79" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tuplespaceproxy&quot;&gt;&lt;code&gt;TupleSpaceProxy&lt;/code&gt;&lt;/a&gt; allows a remote Tuplespace to appear as local.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b6b24f62aba6482c58f4ff7513b8c9619133170" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;udpsocket&quot;&gt;&lt;code&gt;UDPSocket&lt;/code&gt;&lt;/a&gt; represents a UDP/IP socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52ff848a856616ee601d8766f2984ac4a0157346" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;udpsocket#method-i-recvfrom_nonblock&quot;&gt;&lt;code&gt;UDPSocket#recvfrom_nonblock&lt;/code&gt;&lt;/a&gt; may raise any error corresponding to recvfrom(2) failure, including Errno::EWOULDBLOCK.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88bf1a31d41ff2afd0c267ff98a62eb2a58ff56f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;unixserver&quot;&gt;&lt;code&gt;UNIXServer&lt;/code&gt;&lt;/a&gt; represents a UNIX domain stream server socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584b9b9772d8791fe8c0348ec5238d36ed653de3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;unixserver#method-i-accept_nonblock&quot;&gt;&lt;code&gt;UNIXServer#accept_nonblock&lt;/code&gt;&lt;/a&gt; may raise any error corresponding to accept(2) failure, including Errno::EWOULDBLOCK.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c6fdea2988d8432cd9487c343c8730be28b9896" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;unixsocket&quot;&gt;&lt;code&gt;UNIXSocket&lt;/code&gt;&lt;/a&gt; represents a UNIX domain stream client socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="297f4e44f88d7fae2c20d25dcf8a9b19853412b1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;unixsocket#method-c-pair&quot;&gt;&lt;code&gt;UNIXSocket.pair&lt;/code&gt;&lt;/a&gt; {|s1, s2|</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7adfbd24fe67a04bb97bb1bbb07c1a0fea0932ab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;uri&quot;&gt;&lt;code&gt;URI&lt;/code&gt;&lt;/a&gt; &amp;ndash; Anything accepted by &lt;code&gt;URI.parse&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff0eb466a1df1a326388fc261e535fc839467c02" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;uri&quot;&gt;&lt;code&gt;URI&lt;/code&gt;&lt;/a&gt; is a module providing classes to handle Uniform Resource Identifiers (&lt;a href=&quot;http://tools.ietf.org/html/rfc2396&quot;&gt;RFC2396&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba411529edf05f15d09b29363f0981f3c397330" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;uri&quot;&gt;&lt;code&gt;URI&lt;/code&gt;&lt;/a&gt; objects can be opened in a similar way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e1d71a76b9cd8d81c89fb86f3371bed84bba4d6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;uri&quot;&gt;&lt;code&gt;URI&lt;/code&gt;&lt;/a&gt; objects can be read directly. The returned string is also extended by &lt;a href=&quot;openuri/meta&quot;&gt;&lt;code&gt;OpenURI::Meta&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efc0e4069a01a6927ca8b8fd1f4248d3ac0a54c7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;uri/badurierror&quot;&gt;&lt;code&gt;URI::BadURIError&lt;/code&gt;&lt;/a&gt; - (in uri/common.rb)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af65d8c56e8bf717a71d3c3c871c6d247edbd66" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;uri/error&quot;&gt;&lt;code&gt;URI::Error&lt;/code&gt;&lt;/a&gt; - (in uri/common.rb)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e81f356f1b010b94f14e8a5bf9c1a9e70d03b2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;uri/escape&quot;&gt;&lt;code&gt;URI::Escape&lt;/code&gt;&lt;/a&gt; - (in uri/common.rb)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9807fea59f1ac07bf7d64a04ce28caf962223d99" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;uri/file&quot;&gt;&lt;code&gt;URI::File&lt;/code&gt;&lt;/a&gt; - (in uri/file.rb)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55e49716d9f0f3a97549378b51dc8598c8a375ed" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;uri/ftp&quot;&gt;&lt;code&gt;URI::FTP&lt;/code&gt;&lt;/a&gt; - (in uri/ftp.rb)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c72de535a44936e07e9de8eb75ace06d8059c4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;uri/generic&quot;&gt;&lt;code&gt;URI::Generic&lt;/code&gt;&lt;/a&gt; (in uri/generic.rb)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29831f6da1948446f0a44802fb47586b61ff0841" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;uri/http&quot;&gt;&lt;code&gt;URI::HTTP&lt;/code&gt;&lt;/a&gt; - (in uri/http.rb)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2b98fbebf821845120b86c77a7fbadae0565696" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;uri/https&quot;&gt;&lt;code&gt;URI::HTTPS&lt;/code&gt;&lt;/a&gt; - (in uri/https.rb)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50f9566f82b359d34d4a1b0881d71550e2c48061" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;uri/invalidcomponenterror&quot;&gt;&lt;code&gt;URI::InvalidComponentError&lt;/code&gt;&lt;/a&gt; - (in uri/common.rb)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c078f03e428737f996605eda43413e96bb6f7bc1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;uri/invalidurierror&quot;&gt;&lt;code&gt;URI::InvalidURIError&lt;/code&gt;&lt;/a&gt; - (in uri/common.rb)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d1705fb3fd3d6701e73acad12e4f505a0af58a2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;uri/ldap&quot;&gt;&lt;code&gt;URI::LDAP&lt;/code&gt;&lt;/a&gt; - (in uri/ldap.rb)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="879bb14f853eb869743a704aca25a1df45ef046a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;uri/ldaps&quot;&gt;&lt;code&gt;URI::LDAPS&lt;/code&gt;&lt;/a&gt; - (in uri/ldaps.rb)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e6890c41704ce8fd3f716cb16696d1a3771b75f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;uri/mailto&quot;&gt;&lt;code&gt;URI::MailTo&lt;/code&gt;&lt;/a&gt; - (in uri/mailto.rb)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fcfaaffd697f1245d45a8b870b9ead4a47222a2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;uri/rfc2396_parser&quot;&gt;&lt;code&gt;URI::Parser&lt;/code&gt;&lt;/a&gt; - (in uri/common.rb)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30954a54e2e21f6526e1db766010a8d68813dbeb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;uri/rfc2396_regexp&quot;&gt;&lt;code&gt;URI::REGEXP&lt;/code&gt;&lt;/a&gt; - (in uri/common.rb)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf2b880553961745dbac59c647bbfe39a156f585" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;vector&quot;&gt;&lt;code&gt;Vector&lt;/code&gt;&lt;/a&gt; addition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daeeda7ae2bb9f8e01c38bd44a7b69c200bb5cf3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;vector&quot;&gt;&lt;code&gt;Vector&lt;/code&gt;&lt;/a&gt; arithmetic:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21c5fd3ee31182a21c0f2f145ac767f7faaf9e19" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;vector&quot;&gt;&lt;code&gt;Vector&lt;/code&gt;&lt;/a&gt; division.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a6d884d209ab6cad6b7bd45c505fa98427e3a36" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;vector&quot;&gt;&lt;code&gt;Vector&lt;/code&gt;&lt;/a&gt; functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d1840131f87c530b41de1e03c8c3551cb9f9ec" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;vector&quot;&gt;&lt;code&gt;Vector&lt;/code&gt;&lt;/a&gt; subtraction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0168a430a7379f6b00d35e61c70789c071647788" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;vector#method-c-basis&quot;&gt;&lt;code&gt;Vector.basis&lt;/code&gt;&lt;/a&gt;(size: n, index: k)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4728cd620aa00051f5e5662e5751030cd7da5cb7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;vector#method-c-elements&quot;&gt;&lt;code&gt;Vector.elements&lt;/code&gt;&lt;/a&gt;(array, copy = true)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec944895e4753f0da1ae430603afb6843b7e1cfe" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;vector#method-c-new&quot;&gt;&lt;code&gt;Vector.new&lt;/code&gt;&lt;/a&gt; is private; use Vector[] or &lt;a href=&quot;vector#method-c-elements&quot;&gt;&lt;code&gt;Vector.elements&lt;/code&gt;&lt;/a&gt; to create.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb066b472b06bfd9f10a8f7da897c1e164aebaf4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;vector#method-i-2A&quot;&gt;&lt;code&gt;*(x)&lt;/code&gt;&lt;/a&gt; &amp;ldquo;is matrix or number&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="021b2ff44062e612291eda2c90bba40e46be5d68" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;vector#method-i-2B&quot;&gt;&lt;code&gt;+&lt;/code&gt;&lt;/a&gt;@</source>
          <target state="translated">&lt;a href=&quot;vector#method-i-2B&quot;&gt;&lt;code&gt;+&lt;/code&gt;&lt;/a&gt;@</target>
        </trans-unit>
        <trans-unit id="3bd4b3f7329d9bd6429949ab84deeb92ad7de8de" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;vector#method-i-2D&quot;&gt;&lt;code&gt;-&lt;/code&gt;&lt;/a&gt;@</source>
          <target state="translated">&lt;a href=&quot;vector#method-i-2D&quot;&gt;&lt;code&gt;-&lt;/code&gt;&lt;/a&gt;@</target>
        </trans-unit>
        <trans-unit id="369af398ddfb62127eae9daae29a18b4fb0d2564" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;vector#method-i-5B-5D-3D&quot;&gt;&lt;code&gt;[]=&lt;/code&gt;&lt;/a&gt;(i, v)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec17a084a0708ef34f7105817d36fc71fc77192" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;vector#method-i-cross_product&quot;&gt;&lt;code&gt;cross_product(v)&lt;/code&gt;&lt;/a&gt;, cross(v)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f365dba578d30149fcfc9b62610e64f8f3e5baa" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;vector#method-i-inner_product&quot;&gt;&lt;code&gt;inner_product(v)&lt;/code&gt;&lt;/a&gt;, dot(v)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c53ec347dcd2834e93e1b79126972ab42af33fd0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;warning&quot;&gt;&lt;code&gt;Warning&lt;/code&gt;&lt;/a&gt; of a possible problem</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f123c2a9cfa0b215965cf1752dc9571d581c04c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;writetimeout&quot;&gt;&lt;code&gt;WriteTimeout&lt;/code&gt;&lt;/a&gt;, a subclass of &lt;a href=&quot;../timeout/error&quot;&gt;&lt;code&gt;Timeout::Error&lt;/code&gt;&lt;/a&gt;, is raised if a chunk of the response cannot be written within the write_timeout. Not raised on Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d637d34e53892d449249f94369b2d54b662b1347" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;zlib#NO_FLUSH&quot;&gt;&lt;code&gt;NO_FLUSH&lt;/code&gt;&lt;/a&gt; is the default flush method and allows deflate to decide how much data to accumulate before producing output in order to maximize compression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b58713683b56f416ed0121de34670a48f689804" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;zlib/deflate&quot;&gt;&lt;code&gt;Deflate&lt;/code&gt;&lt;/a&gt; compression strategy designed to be almost as fast as &lt;a href=&quot;zlib#HUFFMAN_ONLY&quot;&gt;&lt;code&gt;HUFFMAN_ONLY&lt;/code&gt;&lt;/a&gt;, but give better compression for PNG image data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9726b4acff1126871d52d1bfcecb451215636351" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;zlib/deflate&quot;&gt;&lt;code&gt;Deflate&lt;/code&gt;&lt;/a&gt; strategy for data produced by a filter (or predictor). The effect of &lt;a href=&quot;zlib#FILTERED&quot;&gt;&lt;code&gt;FILTERED&lt;/code&gt;&lt;/a&gt; is to force more Huffman codes and less string matching; it is somewhat intermediate between &lt;a href=&quot;zlib#DEFAULT_STRATEGY&quot;&gt;&lt;code&gt;DEFAULT_STRATEGY&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;zlib#HUFFMAN_ONLY&quot;&gt;&lt;code&gt;HUFFMAN_ONLY&lt;/code&gt;&lt;/a&gt;. Filtered data consists mostly of small values with a somewhat random distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97678a0651c1e9c21b62f50cfc3684cf16313086" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;zlib/deflate&quot;&gt;&lt;code&gt;Deflate&lt;/code&gt;&lt;/a&gt; strategy which prevents the use of dynamic Huffman codes, allowing for a simpler decoder for specialized applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d450f6067bdd79d3b141181a3d9069d82db7998f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;zlib/deflate&quot;&gt;&lt;code&gt;Deflate&lt;/code&gt;&lt;/a&gt; strategy which uses Huffman codes only (no string matching).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db19e6a9a2f07b766df98ae5812901167b01182e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;zstream&quot;&gt;&lt;code&gt;Zlib::ZStream&lt;/code&gt;&lt;/a&gt; is the abstract class for the stream which handles the compressed data. The operations are defined in the subclasses: &lt;a href=&quot;deflate&quot;&gt;&lt;code&gt;Zlib::Deflate&lt;/code&gt;&lt;/a&gt; for compression, and &lt;a href=&quot;inflate&quot;&gt;&lt;code&gt;Zlib::Inflate&lt;/code&gt;&lt;/a&gt; for decompression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c24e034b82aa8fa9ef30cb57cc6e36fdf85fa895" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#pretty_print&lt;/code&gt; takes the &lt;code&gt;pp&lt;/code&gt; argument, which is an instance of the &lt;a href=&quot;pp&quot;&gt;&lt;code&gt;PP&lt;/code&gt;&lt;/a&gt; class. The method uses &lt;a href=&quot;prettyprint#method-i-text&quot;&gt;&lt;code&gt;text&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;prettyprint#method-i-breakable&quot;&gt;&lt;code&gt;breakable&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;prettyprint#method-i-nest&quot;&gt;&lt;code&gt;nest&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;prettyprint#method-i-group&quot;&gt;&lt;code&gt;group&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;pp/ppmethods#method-i-pp&quot;&gt;&lt;code&gt;pp&lt;/code&gt;&lt;/a&gt; to print the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5974f68494dc2f68fd9da61cd7b027f217c33897" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$&amp;amp;&lt;/code&gt; contains the complete matched text;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="942e2af7fa77910fc6c73615aeafa7b220e9985f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$&amp;amp;&lt;/code&gt; is &lt;code&gt;Regexp.last_match[0]&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6904a4faf3c67c2f72423d0207fd1df30f073b01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$'&lt;/code&gt; contains string after match;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e89a4bcc207b7c908b78ab4a3e932b7c19c2243" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$'&lt;/code&gt; is &lt;code&gt;Regexp.last_match.post_match&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f69ec867fadf0c17dc0f3564b046961abab09d10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$+&lt;/code&gt; contains last capture group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4d38eaa6742178e235290934a8ed5f262e4791c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$+&lt;/code&gt; is &lt;code&gt;Regexp.last_match[-1]&lt;/code&gt; (the last capture).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a054d7a56b0f14e8c6f0f6f06b62a461fd1b7d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt; and so on contain text matching first, second, etc capture group;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e876b58d6737f2126aaf39a224db1c26ba75463e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, and so on are &lt;code&gt;Regexp.last_match[i]&lt;/code&gt; (captures by number);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a011b423397e9d771676baae900f42592e4bd16a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$&lt;/code&gt; - Matches end of line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="464052956d95e06f679d680665171260edd5e8f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$`&lt;/code&gt; contains string before match;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69c4e273255f707c2f0520d808580337b62f74d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$`&lt;/code&gt; is &lt;code&gt;Regexp.last_match.pre_match&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b4e39d47c7cb254a1913763992a8ee4c87c086" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$~&lt;/code&gt; is &lt;code&gt;Regexp.last_match&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="205b4ebba8e6cc18f0908c288c0331a4b87c65ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$~&lt;/code&gt; is equivalent to &lt;a href=&quot;regexp#method-c-last_match&quot;&gt;&lt;code&gt;Regexp.last_match&lt;/code&gt;&lt;/a&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd95bd60e1c9591718433bc1a68ce69b5467fd4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;.&lt;/code&gt;, called &amp;ldquo;safe navigation operator&amp;rdquo;, allows to skip method call when receiver is &lt;code&gt;nil&lt;/code&gt;. It returns &lt;code&gt;nil&lt;/code&gt; and doesn't evaluate method's arguments if the call is skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c79024a097f5745b422de3e711787a5fb1ee7e46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; is the basis for the methods &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, and &lt;code&gt;between?&lt;/code&gt;, included from module &lt;a href=&quot;comparable&quot;&gt;&lt;code&gt;Comparable&lt;/code&gt;&lt;/a&gt;. The method String#== does not use Comparable#==.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20344e280c432ed27aacd719badf74692dec0bed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;compiled&amp;gt;&lt;/code&gt; if the iseq was evaluated from a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9f48a8dbf9f2dd7f3d49d22954e8b27a23d84ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; if it's at the top level, &lt;code&gt;&amp;lt;compiled&amp;gt;&lt;/code&gt; if it was evaluated from a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1af2515e464f2e1ab5ba86148d5346c8c7f0933c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(1..)&lt;/code&gt; and &lt;code&gt;(1...)&lt;/code&gt; are not equal, although technically representing the same sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a99441e000ed45d745acdd2bc29d907e33ccdacb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(?!&lt;/code&gt;&lt;em&gt;pat&lt;/em&gt;&lt;code&gt;)&lt;/code&gt; - &lt;em&gt;Negative lookahead&lt;/em&gt; assertion: ensures that the following characters do not match &lt;em&gt;pat&lt;/em&gt;, but doesn't include those characters in the matched text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c4796330b292051bf9d416467f6f173d59a21ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(?&amp;lt;!&lt;/code&gt;&lt;em&gt;pat&lt;/em&gt;&lt;code&gt;)&lt;/code&gt; - &lt;em&gt;Negative lookbehind&lt;/em&gt; assertion: ensures that the preceding characters do not match &lt;em&gt;pat&lt;/em&gt;, but doesn't include those characters in the matched text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2cc3c94f20ea69daf895ae2414d58c3c3233c31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(?&amp;lt;=&lt;/code&gt;&lt;em&gt;pat&lt;/em&gt;&lt;code&gt;)&lt;/code&gt; - &lt;em&gt;Positive lookbehind&lt;/em&gt; assertion: ensures that the preceding characters match &lt;em&gt;pat&lt;/em&gt;, but doesn't include those characters in the matched text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeba0bc9329b0af6ea88f0bf2d81910bdb482192" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(?=&lt;/code&gt;&lt;em&gt;pat&lt;/em&gt;&lt;code&gt;)&lt;/code&gt; - &lt;em&gt;Positive lookahead&lt;/em&gt; assertion: ensures that the following characters match &lt;em&gt;pat&lt;/em&gt;, but doesn't include those characters in the matched text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cf0bcc95b3316adf49d4fa0bff8c80691297cab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*&lt;/code&gt; - Zero or more times</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1eab486fedb6935c2e522461912c9a934212a12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;+&lt;/code&gt; - One or more times</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca34b3496e0db364971a15c9b04ba882f9951711" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/./&lt;/code&gt; - Any character except a newline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a611aa52ba62c017fe02c40c6ef53abbebf50771" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/./m&lt;/code&gt; - Any character (the &lt;code&gt;m&lt;/code&gt; modifier enables multiline mode)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e7cef79855eebad78392207c91ac281bc18f15a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/&lt;/code&gt;&lt;em&gt;pat&lt;/em&gt;&lt;code&gt;/e&lt;/code&gt; - EUC-JP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1e4762fcdf6eb3d8360c4f8943aab898684c892" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/&lt;/code&gt;&lt;em&gt;pat&lt;/em&gt;&lt;code&gt;/n&lt;/code&gt; - ASCII-8BIT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="516bd20cdab2d1e5da12ce90924dd03bc9d56982" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/&lt;/code&gt;&lt;em&gt;pat&lt;/em&gt;&lt;code&gt;/s&lt;/code&gt; - Windows-31J</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f3ce63f2959cef342523954230651660e12e8da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/&lt;/code&gt;&lt;em&gt;pat&lt;/em&gt;&lt;code&gt;/u&lt;/code&gt; - UTF-8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1130df34e65f8ec09b5715499b929cbbc9d4e902" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/[[:alnum:]]/&lt;/code&gt; - Alphabetic and numeric character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea907ee9bc04c452ea66c21354b175ffbed4aff5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/[[:alpha:]]/&lt;/code&gt; - Alphabetic character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b25cce324719854f8e4af89a9085d12177ad928" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/[[:ascii:]]/&lt;/code&gt; - A character in the ASCII character set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8868a3e699dc1e6f3e1e1a7f672eb124679010c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/[[:blank:]]/&lt;/code&gt; - Space or tab</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="681ce9160a5c8c51bf4513074b5888d47b76c54c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/[[:cntrl:]]/&lt;/code&gt; - Control character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f13766ecd2a621d191697c2f87279c8d447fc8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/[[:digit:]]/&lt;/code&gt; - Digit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77bdea64cb55568092f1b8d097f813acf530946d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/[[:graph:]]/&lt;/code&gt; - Non-blank character (excludes spaces, control characters, and similar)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39ff3ed7e6fe8b31a9f5b0a89b86e465d87622f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/[[:lower:]]/&lt;/code&gt; - Lowercase alphabetical character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6c54654d1650ce39dc9be158c034a5ac1c12b82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/[[:print:]]/&lt;/code&gt; - Like [:graph:], but includes the space character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac9e66654922e9588a7976aaf9cd8077ea871d20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/[[:punct:]]/&lt;/code&gt; - Punctuation character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="268a0116a4570ee108e9c5512a98e66d004c82a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/[[:space:]]/&lt;/code&gt; - Whitespace character (&lt;code&gt;[:blank:]&lt;/code&gt;, newline, carriage return, etc.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb588be562cb89296fda0088798659e4b6c8707" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/[[:upper:]]/&lt;/code&gt; - Uppercase alphabetical</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9a02053c238d522622544cf0dd0f12c509749e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/[[:word:]]/&lt;/code&gt; - A character in one of the following Unicode general categories &lt;em&gt;Letter&lt;/em&gt;, &lt;em&gt;Mark&lt;/em&gt;, &lt;em&gt;Number&lt;/em&gt;, &lt;em&gt;Connector_Punctuation&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f77485016ea86c33b6a1ead173223c18036ce49f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/[[:xdigit:]]/&lt;/code&gt; - Digit allowed in a hexadecimal number (i.e., 0-9a-fA-F)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="402bac4a6ab97de9dfa3f124e1e2a8eaea2e2ad6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\D/&lt;/code&gt; - A non-digit character (&lt;code&gt;[^0-9]&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f5c3c40b6ab18e3b7b098ea8df32c8f4c9c69d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\H/&lt;/code&gt; - A non-hexdigit character (&lt;code&gt;[^0-9a-fA-F]&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1da7fa0bb7c4d378b1ab7b880f10137ffc03d8cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\S/&lt;/code&gt; - A non-whitespace character: &lt;code&gt;/[^ \t\r\n\f\v]/&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8411ef7a84016bd9a53f3dfa1377cc1f8ef0f5b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\W/&lt;/code&gt; - A non-word character (&lt;code&gt;[^a-zA-Z0-9_]&lt;/code&gt;). Please take a look at &lt;a href=&quot;https://bugs.ruby-lang.org/issues/4044&quot;&gt;Bug #4044&lt;/a&gt; if using &lt;code&gt;/\W/&lt;/code&gt; with the &lt;code&gt;/i&lt;/code&gt; modifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22b1b3141f83de2178497a2498c7c5495a37518e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\d/&lt;/code&gt; - A digit character (&lt;code&gt;[0-9]&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604cfe0183da6f288e375688a7a54a42d3f0f8e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\h/&lt;/code&gt; - A hexdigit character (&lt;code&gt;[0-9a-fA-F]&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7613ab629ddf837487df48608d59583c406d45e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{ASCII}/&lt;/code&gt; - A character in the ASCII character set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c1eeeaa04dde90f28e09ba0f1628fab60fee9f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Alnum}/&lt;/code&gt; - Alphabetic and numeric character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54460e05b51f7363d373621813bfb45502d93e59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Alpha}/&lt;/code&gt; - Alphabetic character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="837a5eb88ba6d44d2aa90c8930d2baf280de0283" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Any}/&lt;/code&gt; - Any Unicode character (including unassigned characters)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39c9afe8e08c6f7cfd8b3be6221c75c812f3842" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Assigned}/&lt;/code&gt; - An assigned character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57b1491cfec9326f30fdbd5bb1f309bcd1ea306f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Blank}/&lt;/code&gt; - Space or tab</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dfab3df13567b898ff208533dc27b72c1555230" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Cc}/&lt;/code&gt; - 'Other: Control'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c140dcbf9d6be70d4dcaba1cf8af2594c984cad4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Cf}/&lt;/code&gt; - 'Other: Format'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41450db89e2258dbbf006ab6cbfc5be875f0b963" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Cntrl}/&lt;/code&gt; - Control character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8291f5ec3a4ae2bd92a3ef9839aa8a82719c2ca3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Cn}/&lt;/code&gt; - 'Other: Not Assigned'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8662b75e392f589c9ff46d07159936b0b11be42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Co}/&lt;/code&gt; - 'Other: Private Use'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07e79c269d9ff79934bbb3e950b8f1e7d3014d58" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Cs}/&lt;/code&gt; - 'Other: Surrogate'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b242ae1a77e97d30f791658fe1fc2b544b687750" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{C}/&lt;/code&gt; - 'Other'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b9e9cb5f501585288b3993cbc4f70d159d8dd48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Digit}/&lt;/code&gt; - Digit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7b48b6d99b7e062a5b657d219ca01c07f8b705" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Graph}/&lt;/code&gt; - Non-blank character (excludes spaces, control characters, and similar)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6d118dbbfdcdce7d8079f18a174fbb817dedc9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Ll}/&lt;/code&gt; - 'Letter: Lowercase'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eec20a1d1b25a6d4f35230f9636e95c890e95cd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Lm}/&lt;/code&gt; - 'Letter: Mark'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6c6672a9a61371a21009e308c030cfbd6e5207" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Lower}/&lt;/code&gt; - Lowercase alphabetical character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af2edd78ec336f4c1580aa932cf251c720216acc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Lo}/&lt;/code&gt; - 'Letter: Other'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc3fbc32298b0d3de120fd97f76acf37fdaca6a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Lt}/&lt;/code&gt; - 'Letter: Titlecase'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f211747cfa083f93e5d158582c140d0fc9f70d0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Lu}/&lt;/code&gt; - 'Letter: Uppercase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dafbcca465fd30bcd01b94d2715dfe6068eb7344" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{L}/&lt;/code&gt; - 'Letter'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27c67444eabb7734118526f5954aea24f44ee6be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Mc}/&lt;/code&gt; - 'Mark: Spacing Combining'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdfc599414d5629f64a6dc804689635cf700f79d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Me}/&lt;/code&gt; - 'Mark: Enclosing'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f39a96b480c3a434c77feec7430fecf77f39ccc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Mn}/&lt;/code&gt; - 'Mark: Nonspacing'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="508f5f06221794c8a69fe32b1f8bfb6a202781d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{M}/&lt;/code&gt; - 'Mark'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59b3dea00dbc5010fad4c86dddcdc0e3e4d6e82b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Nd}/&lt;/code&gt; - 'Number: Decimal Digit'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aab13b8c84879ca4123f538632ea886c2e15a0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Nl}/&lt;/code&gt; - 'Number: Letter'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="675a7885b30fce1c46e9f415f7f4bda3192adebd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{No}/&lt;/code&gt; - 'Number: Other'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa5db6bbefd4fa6b84439915696073ba148f1694" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{N}/&lt;/code&gt; - 'Number'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b6010218429953d3c9c0c21ab7945e577fafa4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Pc}/&lt;/code&gt; - 'Punctuation: Connector'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afe2ce545efb60acd69085adbc136676b0eff9da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Pd}/&lt;/code&gt; - 'Punctuation: Dash'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa4edadf3164c723a210076d80eb8b22ede905bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Pe}/&lt;/code&gt; - 'Punctuation: Close'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bedf1c89e5dc2b5ecd447c721b5031046ad20f38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Pf}/&lt;/code&gt; - 'Punctuation: Final Quote'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ea16858d71ea96cf79303ced6c54fe5c503924c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Pi}/&lt;/code&gt; - 'Punctuation: Initial Quote'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8837354acaba90f6597470a56d756e147b12105" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Po}/&lt;/code&gt; - 'Punctuation: Other'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c056f5113f18d667633f1d74b77a0bbf6a14fae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Print}/&lt;/code&gt; - Like &lt;code&gt;\p{Graph}&lt;/code&gt;, but includes the space character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824782bcdd043f95387d370415ff0191083e59e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Ps}/&lt;/code&gt; - 'Punctuation: Open'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94eee3f8092f28c1c1f09aaab73991a3c81f84a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Punct}/&lt;/code&gt; - Punctuation character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab54229136eb11d66695cc4e58699b0fe43582cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{P}/&lt;/code&gt; - 'Punctuation'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d1cba362c30a4b7c540e2034bef1218bc5897a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Sc}/&lt;/code&gt; - 'Symbol: Currency'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89c064eca8ad50a16649f02f3831e93c729b6cdf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Sk}/&lt;/code&gt; - 'Symbol: Modifier'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="421a5eac3cc75bd2e480cb1c1f2f51066885340b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Sm}/&lt;/code&gt; - 'Symbol: Math'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56db5965e9f518c6af5c73e40f6a281c6dfad8be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{So}/&lt;/code&gt; - 'Symbol: Other'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca310374998cf6dd1d5db7b51c31c70433a46128" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Space}/&lt;/code&gt; - Whitespace character (&lt;code&gt;[:blank:]&lt;/code&gt;, newline, carriage return, etc.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4441e17db492ffdaaa0935a71a0076135cf73756" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{S}/&lt;/code&gt; - 'Symbol'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54c22ebaac3b2186a95f643c0195d8d0660327ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Upper}/&lt;/code&gt; - Uppercase alphabetical</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e02012679323ddb5bb45fc1aea63778207b02c7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Word}/&lt;/code&gt; - A member of one of the following Unicode general category &lt;em&gt;Letter&lt;/em&gt;, &lt;em&gt;Mark&lt;/em&gt;, &lt;em&gt;Number&lt;/em&gt;, &lt;em&gt;Connector_Punctuation&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c41341482edce072a2f73402badeef1b3657f2d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{XDigit}/&lt;/code&gt; - Digit allowed in a hexadecimal number (i.e., 0-9a-fA-F)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38626c32daae040d2f02f0b54b8c5c8554004fc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Zl}/&lt;/code&gt; - 'Separator: Line'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4321b2791dc701910be89b753129bc81e12efc6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Zp}/&lt;/code&gt; - 'Separator: Paragraph'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d74eba86a6da50ab007e76edb4b0d2647a222a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Zs}/&lt;/code&gt; - 'Separator: Space'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7d22ad62cafa24d70d572e114c3897049e48a88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\p{Z}/&lt;/code&gt; - 'Separator'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f5fa58a03a458777d89ca412f357d64e4dd1de7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\s/&lt;/code&gt; - A whitespace character: &lt;code&gt;/[ \t\r\n\f\v]/&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b40247db1821c6c2663bf827b79faf0a08f956a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/\w/&lt;/code&gt; - A word character (&lt;code&gt;[a-zA-Z0-9_]&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c0f06757f99e12c6671dd85240ba5655a6ba471" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/pat/i&lt;/code&gt; - Ignore case</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60ea9f10d5094ca89e017bc611bae828baa15005" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/pat/m&lt;/code&gt; - Treat a newline as a character matched by &lt;code&gt;.&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41139b6bfd010399ee986485ff55ac4ba42538b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/pat/o&lt;/code&gt; - Perform &lt;code&gt;#{}&lt;/code&gt; interpolation only once</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06017285fdf83cf8d83e912887007792107675c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/pat/x&lt;/code&gt; - Ignore whitespace and comments in the pattern</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2daa7690c8d217f2c091f3fd8e162f0d35435812" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:CONTEXT_SPECIFIC&lt;/code&gt; (the default for tagged values)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5765edbd24c09e348a51570982bc6984140f4a0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:UNIVERSAL&lt;/code&gt; (the default for untagged values)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c0e3545f0af2c9641439aac16c287f86c407ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:_alone&lt;/code&gt; can be used to force items into their own chunk. For example, you can put lines that contain a URL by themselves, and chunk the rest of the lines together, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e7c5f62bd38d9469ffec156222e22d625d89de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:_alone&lt;/code&gt; specifies that the element should be chunked by itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca05a310f2b0aafb39dd77cb255f823f280f3d0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:down&lt;/code&gt;: round half toward zero</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4cd33c8b5559683d49ee7e453d581cd243ac0bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:even&lt;/code&gt;: round half toward the nearest even number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cae284410b4063f6143be19bf695f1086c31096" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:ftp_active_mode =&amp;gt; true&lt;/code&gt; is used to make ftp active mode. Ruby 1.9 uses passive mode by default. Note that the active mode is default in Ruby 1.8 or prior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26a16dd9407be66a6f8b6ea87a6fa9cb3944ffae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:hertz&lt;/code&gt; can be used to obtain the exact value of the clock ticks per second for times() function and CLOCKS_PER_SEC for clock() function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77266a600fe408cf893367eb15fb83daee75630e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:redirect&lt;/code&gt; is true by default. &lt;code&gt;:redirect =&amp;gt; false&lt;/code&gt; is used to disable all HTTP redirects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b69a2fbe06a4e67fbccb706bcefa4b0e1e6f41b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:up&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;: round half away from zero (default)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a66cf25815434e09a5700c29aa382d4053e53a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;=~&lt;/code&gt; and &lt;a href=&quot;regexp#method-i-match&quot;&gt;&lt;code&gt;Regexp#match&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1822f9e634764e7d5272e50bafa713425ee19bea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;=~&lt;/code&gt; is Ruby's basic pattern-matching operator. When one operand is a regular expression and the other is a string then the regular expression is used as a pattern to match against the string. (This operator is equivalently defined by &lt;a href=&quot;regexp&quot;&gt;&lt;code&gt;Regexp&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; so the order of &lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;regexp&quot;&gt;&lt;code&gt;Regexp&lt;/code&gt;&lt;/a&gt; do not matter. Other classes may have different implementations of &lt;code&gt;=~&lt;/code&gt;.) If a match is found, the operator returns index of first match in string, otherwise it returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c59b10041731c4a557fdf85b265791bac446da74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;=~&lt;/code&gt; operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3281e20db5345144e4422ee0ac831b01bd844dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;?&lt;/code&gt; - Zero or one times (optional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2e2b28a831ae731a86a12a7f4b34430dc00b3d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ARGF&lt;/code&gt; is a stream designed for use in scripts that process files given as command-line arguments or passed in via STDIN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75776d746a8be9632cbbd1662175579d88b10bb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ARGF&lt;/code&gt; sets the line number automatically as you read data, so normally you will not need to set it explicitly. To access the current line number use &lt;code&gt;ARGF.lineno&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3498ab32fd3ac9d83a8d2858e78c8a41a8c4a1f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ARGF&lt;/code&gt; treats the files named on the command line as a single file created by concatenating their contents. After returning the last character of the first file, it returns the first character of the second file, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be11b73875ae931522e2991e3aa71562a84e3674" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BEGIN&lt;/code&gt; and &lt;code&gt;END&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="719b9430291f9b301a87ef9211033c613a98297d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BEGIN&lt;/code&gt; defines a block that is run before any other code in the current file. It is typically used in one-liners with &lt;code&gt;ruby -e&lt;/code&gt;. Similarly &lt;code&gt;END&lt;/code&gt; defines a block that is run after any other code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6843393b095f0a19d5cec27d5a1516e16ca38fd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BEGIN&lt;/code&gt; must appear at top-level and &lt;code&gt;END&lt;/code&gt; will issue a warning when you use it inside a method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4a6c1de03fd418831b04411f8509174f5658ed7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CommandProcessor#transact&lt;/code&gt; executes the given block against self, in this case &lt;code&gt;sh&lt;/code&gt;; our &lt;a href=&quot;shell&quot;&gt;&lt;code&gt;Shell&lt;/code&gt;&lt;/a&gt; object. Within the block we can substitute &lt;code&gt;sh.cd&lt;/code&gt; to &lt;code&gt;cd&lt;/code&gt;, because the scope within the block uses &lt;code&gt;sh&lt;/code&gt; already.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1126cbd36d6b9fd7d1ab774ddfedc739a1cc1810" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Content-Length&lt;/code&gt; is automatically calculated from the size of the &lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; returned by the content block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95bb26e5eb3f25bb48446545c194dc7704136598" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Data&lt;/code&gt; completes connection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3442659649df149679b0424934ca16176fb7a488" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Data&lt;/code&gt; completes record</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d27f1ad03c1fb63ab6a93b6f50cbf1c192949507" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Data&lt;/code&gt; discarded before delivery</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e580a186f35d7d90d3c427f990925b3d83ee68b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Data&lt;/code&gt; for this generic resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f44fddda4b0e93815fe4fb2eb8afb8b2fed9021e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Data&lt;/code&gt; input into an instance of &lt;a href=&quot;zstream&quot;&gt;&lt;code&gt;Zlib::ZStream&lt;/code&gt;&lt;/a&gt; are temporally stored into the end of input buffer, and then data in input buffer are processed from the beginning of the buffer until no more output from the stream is produced (i.e. until &lt;a href=&quot;zstream#method-i-avail_out&quot;&gt;&lt;code&gt;avail_out&lt;/code&gt;&lt;/a&gt; &amp;gt; 0 after processing). During processing, output buffer is allocated and expanded automatically to hold all output data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f890ffbb37c12d445883c464ac7dee38721ed70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Data&lt;/code&gt; ready to be read</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29d79ece4807d4c42879b63f6004057f98f2f560" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Data&lt;/code&gt; remains in the current packet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b544fb3b58c6a620f93381ab87cea4e47014fc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Data&lt;/code&gt; size limits vary between implementations. Original Berkeley DB was limited to 2GB of data. Dbm libraries also sometimes limit the total size of a key/value pair, and the total size of all the keys that hash to the same value. These limits can be as little as 512 bytes. That said, gdbm and recent versions of Berkeley DB do away with these limits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e53a2e56276afaf9fcfaf2065594c6974e04c0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Data&lt;/code&gt; to add to the file. Can be given as a block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b383c8439ca616b6103728c38198e1e4356a67f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Data&lt;/code&gt; transmitted by the server to the client and status responses that do not indicate command completion are prefixed with the token &amp;ldquo;*&amp;rdquo;, and are called untagged responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8b8001a2e7fd28c498a573e0497b46187f84744" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EOFError&lt;/code&gt; is a subclass of &lt;code&gt;IOError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0be1ed4d32206741e13368eaf9667240e9df4b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Encoding::ASCII_8BIT&lt;/code&gt; is a special encoding that is usually used for a byte string, not a character string. But as the name insists, its characters in the range of ASCII are considered as ASCII characters. This is useful when you use ASCII-8BIT characters with other ASCII compatible characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6b5ab383d51c8b212ee9eef20b3ef7e62ca723f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FileTest&lt;/code&gt; implements file test operations similar to those used in &lt;code&gt;File::Stat&lt;/code&gt;. It exists as a standalone module, and its methods are also insinuated into the &lt;code&gt;File&lt;/code&gt; class. (Note that this is not done by inclusion: the interpreter cheats).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fffda5e19a9cd2ce55a970da0dc1c146c6bc7497" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO.select&lt;/code&gt; peeks the buffer of &lt;code&gt;IO&lt;/code&gt; objects for testing readability. If the &lt;code&gt;IO&lt;/code&gt; buffer is not empty, &lt;code&gt;IO.select&lt;/code&gt; immediately notifies readability. This &amp;ldquo;peek&amp;rdquo; only happens for &lt;code&gt;IO&lt;/code&gt; objects. It does not happen for IO-like objects such as &lt;a href=&quot;openssl/ssl/sslsocket&quot;&gt;&lt;code&gt;OpenSSL::SSL::SSLSocket&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dcb36b682b9b26f9cb167463f9717bcd2e02b5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;JSON.generate&lt;/code&gt; only allows objects or arrays to be converted to &lt;a href=&quot;json&quot;&gt;&lt;code&gt;JSON&lt;/code&gt;&lt;/a&gt; syntax. &lt;code&gt;to_json&lt;/code&gt;, however, accepts many Ruby classes even though it acts only as a method for serialization:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="589abc135e98fd01127b581c2c037ce754fcfa2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MatchData&lt;/code&gt; encapsulates the result of matching a &lt;a href=&quot;regexp&quot;&gt;&lt;code&gt;Regexp&lt;/code&gt;&lt;/a&gt; against string. It is returned by &lt;a href=&quot;regexp#method-i-match&quot;&gt;&lt;code&gt;Regexp#match&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;string#method-i-match&quot;&gt;&lt;code&gt;String#match&lt;/code&gt;&lt;/a&gt;, and also stored in a global variable returned by &lt;a href=&quot;regexp#method-c-last_match&quot;&gt;&lt;code&gt;Regexp.last_match&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a394471588d83dd42b311e09165a6ac83f4047d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Net::IMAP::BodyTypeBasic&lt;/code&gt;, &lt;a href=&quot;imap/bodytypetext&quot;&gt;&lt;code&gt;Net::IMAP::BodyTypeText&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;imap/bodytypemessage&quot;&gt;&lt;code&gt;Net::IMAP::BodyTypeMessage&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;imap/bodytypemultipart&quot;&gt;&lt;code&gt;Net::IMAP::BodyTypeMultipart&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3d242866e0f7ee6e29191961136a18994647e0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NotImplementedError&lt;/code&gt; is raised if the underlying operating system does not support &lt;em&gt;fsync(2)&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a7475fd8506e2c55e3f0b59f0c18f58a4531d33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Prime&lt;/code&gt;::&lt;code&gt;EratosthenesGenerator&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Prime&lt;/code&gt;::&lt;code&gt;EratosthenesGenerator&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d4ced9f9fb6d21470ed53f6f7632487ea0e4bd91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Prime&lt;/code&gt;::&lt;code&gt;Generator23&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Prime&lt;/code&gt;::&lt;code&gt;Generator23&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fbc12a101bdf131b9e2c1615f1057569e11f2c2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Prime&lt;/code&gt;::&lt;code&gt;PseudoPrimeGenerator&lt;/code&gt; is the base class for generators. There are few implementations of generator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7da49efba16c3196ba35d6ebe29f2b5b4ddcbf45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Prime&lt;/code&gt;::&lt;code&gt;TrialDivisionGenerator&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Prime&lt;/code&gt;::&lt;code&gt;TrialDivisionGenerator&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="af2927d061233e54694b3720235a0a16fd6d1ebe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Process.clock_getres&lt;/code&gt; also accepts &lt;code&gt;:hertz&lt;/code&gt; as &lt;code&gt;unit&lt;/code&gt;. &lt;code&gt;:hertz&lt;/code&gt; means a the reciprocal of &lt;code&gt;:float_second&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d110d5a3508e40c996f2470f8b2ee474796dc24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Process::Status&lt;/code&gt; encapsulates the information on the status of a running or terminated system process. The built-in variable &lt;code&gt;$?&lt;/code&gt; is either &lt;code&gt;nil&lt;/code&gt; or a &lt;code&gt;Process::Status&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f06df63b78947c7f7adf7e69ff5cf3b400c215" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PseudoPrimeGenerator&lt;/code&gt;#succ raises &lt;code&gt;NotImplementedError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a213fd4f2bbb69d6c445746c261d40489c6205c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RDoc&lt;/code&gt;, distributed with Ruby, uses its own template engine, which can be reused elsewhere;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abaf0606b911dbfd43aa134ce3ebcb427b39cf20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Symbol&lt;/code&gt; objects represent names and some strings inside the Ruby interpreter. They are generated using the &lt;code&gt;:name&lt;/code&gt; and &lt;code&gt;:&quot;string&quot;&lt;/code&gt; literals syntax, and by the various &lt;code&gt;to_sym&lt;/code&gt; methods. The same &lt;code&gt;Symbol&lt;/code&gt; object will be created for a given name or string for the duration of a program's execution, regardless of the context or meaning of that name. Thus if &lt;code&gt;Fred&lt;/code&gt; is a constant in one context, a method in another, and a class in a third, the &lt;code&gt;Symbol&lt;/code&gt;&lt;code&gt;:Fred&lt;/code&gt; will be the same object in all three contexts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="792046d6f2275fd894727c3114a3c1563e1c9923" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SynchronizedArray&lt;/code&gt; implements an &lt;a href=&quot;array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; with synchronized access to items. This &lt;a href=&quot;class&quot;&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/a&gt; is implemented as subclass of &lt;a href=&quot;array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; which includes the &lt;a href=&quot;monitormixin&quot;&gt;&lt;code&gt;MonitorMixin&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b1f508c7c7689a8b08e261efd145fc9f7cc940" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\A&lt;/code&gt; - Matches beginning of string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b779dc89ce6abc943517efb2bf82d67415a95e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\B&lt;/code&gt; - Matches non-word boundaries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b61db0ddd41cfe6c07a02c7b0759171cb4ed7c22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\G&lt;/code&gt; - Matches first matching position:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e39013ec1351afe1921976e9132f4e5f419b3408" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\Z&lt;/code&gt; - Matches end of string. If string ends with a newline, it matches just before newline</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac90d157e6ea008027588aea36ccce6e39d426ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\b&lt;/code&gt; - Matches word boundaries when outside brackets; backspace (0x08) when inside brackets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f91554cfb79f79a24b31f31ba94e535a51cdba65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\z&lt;/code&gt; - Matches end of string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d1db721cf072b479814688141bce9c1be080047" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;^&lt;/code&gt; - Matches beginning of line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="990d1410a36599e0266b5f03d0bde6124d1e29e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;abi&lt;/code&gt; is the ABI of the function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ab67ab76806774654516e60bb32e682aecf8c3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;abi&lt;/code&gt; is the abi of the closure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37b9ea1f4e471cc399a3f5bfbb9264ee02bf91ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;action&lt;/code&gt; is the action to perform. &lt;code&gt;enctype&lt;/code&gt; is the encoding type, which defaults to &amp;ldquo;multipart/form-data&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dd96921c462137331d90bb49f6fb1e4a3f18883" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;address&lt;/code&gt; is the hostname or ip address of your &lt;a href=&quot;pop3&quot;&gt;&lt;code&gt;POP3&lt;/code&gt;&lt;/a&gt; server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="802c9a1cdc21f321d9be180dc702710d63af4763" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;address&lt;/code&gt; is the hostname or ip address of your &lt;a href=&quot;smtp&quot;&gt;&lt;code&gt;SMTP&lt;/code&gt;&lt;/a&gt; server. &lt;code&gt;port&lt;/code&gt; is the port to connect to; it defaults to port 25.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e378643de5b9576d38b3f0c52458818b3a56f15b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;address&lt;/code&gt; is the hostname or ip address of your smtp server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f81bab57f61ee24945e365a9c9c688a45d3d4ea6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;address&lt;/code&gt; must be a &lt;a href=&quot;ipv4&quot;&gt;&lt;code&gt;Resolv::IPv4&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;ipv6&quot;&gt;&lt;code&gt;Resolv::IPv6&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;. Retrieved name will be a &lt;a href=&quot;dns/name&quot;&gt;&lt;code&gt;Resolv::DNS::Name&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bafaab5527c041b46343f09edd1fa9700dc4adbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;address&lt;/code&gt; must be a &lt;a href=&quot;ipv4&quot;&gt;&lt;code&gt;Resolv::IPv4&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;ipv6&quot;&gt;&lt;code&gt;Resolv::IPv6&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;. Retrieved names will be &lt;a href=&quot;dns/name&quot;&gt;&lt;code&gt;Resolv::DNS::Name&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60165ded592917d39c87e69735fdc233fc67711b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;addresses&lt;/code&gt; can contain multiple addresses. If a multicast address is given in &lt;code&gt;addresses&lt;/code&gt; then the &lt;a href=&quot;ringserver&quot;&gt;&lt;code&gt;RingServer&lt;/code&gt;&lt;/a&gt; will listen for multicast queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e1915b48105b2409b64ca172cea6dc0e6a3334c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alias&lt;/code&gt; and &lt;code&gt;undef&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78d5cce69b3448fd9b64e049f3cb8f0778c2c40e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;align&lt;/code&gt; can be a string, giving the alignment of the caption (one of top, bottom, left, or right). It can be a hash of all the attributes of the element. Or it can be omitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5223f51a54cdc4de95c913634fc6a075f41c2a28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arg&lt;/code&gt; must match one of the IPv6::Regex* constants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159261df4bf97f60fa69385b8f08c8de9a5138c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arg&lt;/code&gt; must match the LOC::Alt::Regex constant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef509e62853bf5a8d2a5a25ce2d3f81d7b9724b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arg&lt;/code&gt; must match the LOC::Coord::Regex constant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab3f7d376ae92ce88d6d0fd3642c78d804f6c5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arg&lt;/code&gt; must match the LOC::Size::Regex constant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15ff360398f79a4126fe227693394b807421efb3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;args&lt;/code&gt; are passed the callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f166ff5a47acf578744e8aa38f4409a687720c78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;args&lt;/code&gt; is an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; of arguments, passed to the &lt;code&gt;ptr&lt;/code&gt; function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70af04309836e8bfa0343b97b0362a4a0e2e8de2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;args&lt;/code&gt; is an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; of arguments, passed to the callback function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="142686f9848faeb71a09fc9c5bcd33d1e05074e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;argtype&lt;/code&gt; is an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; of arguments, passed to the &lt;code&gt;name&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5a277f933ccb28639df261037fcaec3b4b9ed27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;argtype&lt;/code&gt; is an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; of arguments, passed to the callback function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e7d71054d1af3526b6fb83c09e6712a4b3b2699" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;attr&lt;/code&gt; is a list of attributes to fetch; see the documentation for &lt;a href=&quot;imap#FetchData&quot;&gt;&lt;code&gt;Net::IMAP::FetchData&lt;/code&gt;&lt;/a&gt; for a list of valid attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c2523e305f68394e6df2dc216a0edbaa22e202b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;backlog&lt;/code&gt; - the maximum length of the queue for pending connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a401f8a8ef77662fd8f1bf50f31fc81f5e8795" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;base&lt;/code&gt; must be greater than or equal to 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d9b5b29f28b7a9050ec581a0fa3ce86fea0e35b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;block&lt;/code&gt; is passed to the callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c957575431e27cbff774aa2feac8a7c1a3de876" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;break&lt;/code&gt; Statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72a9601395ced9b6a99380e120ec134848c53b3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;break&lt;/code&gt; accepts a value that supplies the result of the expression it is &amp;ldquo;breaking&amp;rdquo; out of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15961e6d774b308fa6cafaaa8f1b3bf9cff90c30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;buf&lt;/code&gt; - destination &lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; buffer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bfac2d7ad0172d865409d0e164579ac2b70c242" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;buf&lt;/code&gt; is a string containing a marshalled object that could not be unmarshalled. &lt;code&gt;err&lt;/code&gt; is the error message that was raised when the unmarshalling failed. It is used to determine the name of the unmarshalled object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c11567d16fd34bb1db716926a4537b419b94f325" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;call_type&lt;/code&gt; is the ABI of the function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0474f67d4395f078502b414ed8f6fdf696d67541" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;call_type&lt;/code&gt; is the abi of the closure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bac3152ae2e5a2f99f89aabbbed55b140f75d8c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;case&lt;/code&gt; Expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cfc0028ac04e2f462b0addb9c3878e2ce8727b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;catch&lt;/code&gt; executes its block. If &lt;code&gt;throw&lt;/code&gt; is not called, the block executes normally, and &lt;code&gt;catch&lt;/code&gt; returns the value of the last expression evaluated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e5be433344613a3024a062a014af77e681da81c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cite&lt;/code&gt; can either be a string, give the &lt;a href=&quot;../uri&quot;&gt;&lt;code&gt;URI&lt;/code&gt;&lt;/a&gt; for the source of the quoted text, or a hash, giving all attributes of the element, or it can be omitted, in which case the element has no attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c634f5adab795c8f5de45e3a029ed731a7d6d0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;clock_id&lt;/code&gt; can be a symbol as &lt;code&gt;Process.clock_gettime&lt;/code&gt;. However the result may not be accurate. For example, +Process.clock_getres(:GETTIMEOFDAY_BASED_CLOCK_REALTIME)+ returns 1.0e-06 which means 1 microsecond, but actual resolution can be more coarse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73b3dfc154b77f716a8611414682a9b3e82898bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;clock_id&lt;/code&gt; specifies a kind of clock. It is specified as a constant which begins with &lt;code&gt;Process::CLOCK_&lt;/code&gt; such as &lt;a href=&quot;process#CLOCK_REALTIME&quot;&gt;&lt;code&gt;Process::CLOCK_REALTIME&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;process#CLOCK_MONOTONIC&quot;&gt;&lt;code&gt;Process::CLOCK_MONOTONIC&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c464060d42b850dd24d3b82c1b9a4fd30687b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;clock_id&lt;/code&gt; specifies a kind of clock. See the document of &lt;code&gt;Process.clock_gettime&lt;/code&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dc006d7877c8851b54b600535bade8668a39976" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;close&lt;/code&gt; will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa8fc54152fa34247b407cbdfab963431de920a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;close_obj&lt;/code&gt; - text appended after the &amp;amp;blok. Default is ''</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89763f390bd5e3b70c246e8506a327920c2c82c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;close_width&lt;/code&gt; - noop argument. Present for compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="779c9286a4f55c9164e09a0108eaf739310ff5c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;closed?&lt;/code&gt; will return true</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60495b76ab3f76048f805909785bf6b491e7056a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;command&lt;/code&gt; and &lt;code&gt;command_line&lt;/code&gt; are the full commands to run, given a &lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;. Any additional &lt;code&gt;arguments&lt;/code&gt; will be passed to the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d40f44143db3426088ff3a28ce5d3092810314b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;concat&lt;/code&gt; can take multiple arguments, and all the arguments are concatenated in order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eee0026b51920ea032bf3b2362cfb8fb40a228d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;config&lt;/code&gt; is the configuration for the new server. This may be nil.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5822340615ded74b62c41262fb8e5527c81085b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;config_info&lt;/code&gt; can be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9581a9100b64b0f58472604b74f8127e3a92832" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ctype&lt;/code&gt; is the C type to be returned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c25855e542862c2c96f5aaaa564d13761b9c6f56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ctype&lt;/code&gt; is the return type of the function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f44d96355aa1b0cbc8764cb204b13aa61dd625c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;define_method&lt;/code&gt; always defines a method without the tricks, even if a non-lambda &lt;a href=&quot;proc&quot;&gt;&lt;code&gt;Proc&lt;/code&gt;&lt;/a&gt; object is given. This is the only exception for which the tricks are not preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6574cc31804f54b1f99fdebb013d3f2db00ea8da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;define_method&lt;/code&gt; is treated the same as method definition. The defined method has no tricks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fbc07f9ffc4a3fe09d933eaed8ab1c87e9e22ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;defined?&lt;/code&gt; is a keyword that returns a string describing its argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8cb5e338c34b194f02541ef2d633b731927c1ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dest&lt;/code&gt; argument is obsolete. It still works but you must not use it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10509d3cb596e4f186a91e4d2cc2e3454ba46ec9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;do end&lt;/code&gt; has lower precedence than &lt;code&gt;{ }&lt;/code&gt; so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e16683abd506a4793671d5087bf136c616a6e88f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;each&lt;/code&gt; of endless range enumerates infinite sequence (may be useful in combination with &lt;a href=&quot;enumerable#method-i-take_while&quot;&gt;&lt;code&gt;Enumerable#take_while&lt;/code&gt;&lt;/a&gt; or similar methods);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206e1a70cf4116ce2dcdc490541ada836cf52f45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end&lt;/code&gt; of endless range is &lt;code&gt;nil&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb9dc5acdc78df51417ad25ed5d3a1ab84c409c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;env&lt;/code&gt; defaults to the basename of the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="000671d81cb7da88cb760c7ad31837e40191364b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;event&lt;/code&gt; can be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b0dd96787cd59839a39b25a31fe481a6fb88c42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;facility&lt;/code&gt; describes the type of program opening the syslog, and is the logical OR of any of the following which are defined for the host OS:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9335613bbf1b7267d6b8b33353c111ee03f954f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;file&lt;/code&gt; can be an &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd55199c0becdf89a17e8960595845b1e9e2b712" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filename&lt;/code&gt; defaults to basename of the program without suffix in a directory ~/.options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e4ad1bbbcfb92a9155a61a18a67ee387bad1eb0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filename&lt;/code&gt; will be used in the exception message if any exception is raised while parsing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e17fb328422d4706d9e3eaea4a649c2cd76b53f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; - zero or more of the &lt;code&gt;MSG_&lt;/code&gt; options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3ba81e0852b1049efc336a68374199f06a635dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; is a bitwise OR of the &lt;code&gt;FNM_XXX&lt;/code&gt; constants. The same glob pattern and flags are used by &lt;a href=&quot;dir#method-c-glob&quot;&gt;&lt;code&gt;Dir::glob&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f69bc52354acddc10b52bb883098bf80939d32e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fmode&lt;/code&gt; is an &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; open mode string, &lt;code&gt;ext_enc&lt;/code&gt; is the external encoding for the &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;int_enc&lt;/code&gt; is the internal encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="495b4b0cd95db55ba8c3be2f196213152c5e6736" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for&lt;/code&gt; Loop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fecd2eec2b3c9527d421dafc100fd641f74c1947" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forwardable.rb&lt;/code&gt; provides single-method delegation via the &lt;a href=&quot;forwardable#method-i-def_delegator&quot;&gt;&lt;code&gt;def_delegator&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;forwardable#method-i-def_delegators&quot;&gt;&lt;code&gt;def_delegators&lt;/code&gt;&lt;/a&gt; methods. For full-class delegation via DelegateClass, see &lt;code&gt;delegate.rb&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33550352b9805973f4bbee9521e6a5ad8950947f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fractional_digits&lt;/code&gt; specifies a number of digits to use for fractional seconds. Its default value is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf40e06c4fe47cb50fae3954ffeee6a1491f5346" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;freefunc&lt;/code&gt; must be an address pointing to a function or an instance of &lt;a href=&quot;function&quot;&gt;&lt;code&gt;Fiddle::Function&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="810ba61ced8e0edb0fc96e13f06132a7df494438" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;freefunc&lt;/code&gt; will be called when the instance is garbage collected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c9ec7a9bcdfa7933e9039232922c3400cbaf3a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;from_addr&lt;/code&gt; is a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; representing the source mail address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="792acba78500f352f5f55ec618695defafd13b6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;front&lt;/code&gt; is the front object for the server, that is, the object to which remote method calls on the server will be passed. If nil, then the server will not accept remote method calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2157626835727e61da2c3c5dc0e6de2484903e07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;front&lt;/code&gt; is the server's front object. This may be nil.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91f1d73d9b7709ca6c3e107e062d2b9373595b15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;helo&lt;/code&gt; is the &lt;em&gt;HELO&lt;/em&gt;&lt;em&gt;domain&lt;/em&gt; provided by the client to the server (see overview comments); it defaults to 'localhost'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ade688e9981f7c3ffd2ed63ee4656f6e408560" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;helo&lt;/code&gt; is the &lt;em&gt;HELO&lt;/em&gt;&lt;em&gt;domain&lt;/em&gt; that you'll dispatch mails from; see the discussion in the overview notes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae0d95de09e809eeb0fb78744a3a2fe9e0fe3e01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;href&lt;/code&gt; can either be a string, giving the URL for the HREF attribute, or it can be a hash of the element's attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c754e706ee2c97681a09269a4bd9316562915f49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;href&lt;/code&gt; can either by a string, giving the base URL for the HREF attribute, or it can be a has of the element's attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfd2497a6e202e6db16850df37677091befc4670" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt; must be placed after &lt;code&gt;r&lt;/code&gt;, the opposite is not allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dcef95828e3528cf264defe61d4591ee5ebac30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt;, &lt;code&gt;m&lt;/code&gt;, and &lt;code&gt;x&lt;/code&gt; can also be applied on the subexpression level with the &lt;code&gt;(?&lt;/code&gt;&lt;em&gt;on&lt;/em&gt;&lt;code&gt;-&lt;/code&gt;&lt;em&gt;off&lt;/em&gt;&lt;code&gt;)&lt;/code&gt; construct, which enables options &lt;em&gt;on&lt;/em&gt;, and disables options &lt;em&gt;off&lt;/em&gt; for the expression enclosed by the parentheses:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="700e680afbc0a522bc9ac25e7d5e967ab834271c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ident&lt;/code&gt; is a &lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; which identifies the calling program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35a89c30a389db7bc3bef6d169fda7298d137e9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt; Expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4cbe718b8cc681164f9a8c67a376eec34923e14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt; and &lt;code&gt;unless&lt;/code&gt; can also be used to modify an expression. When used as a modifier the left-hand side is the &amp;ldquo;then&amp;rdquo; expression and the right-hand side is the &amp;ldquo;test&amp;rdquo; expression:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6531b00313f478e0d57b881eaa3adef4aa725178" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;indent&lt;/code&gt; - noop argument. Present for compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fb1f1094375f282bba957a15dbaaf2aac2c76f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index&lt;/code&gt; is a 0-based index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d754b90705671d5e8cd5aac07bd4707d78c76ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;initheader&lt;/code&gt; are the default headers to use. &lt;a href=&quot;http&quot;&gt;&lt;code&gt;Net::HTTP&lt;/code&gt;&lt;/a&gt; adds Accept-Encoding to enable compression of the response body unless Accept-Encoding or &lt;a href=&quot;../range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; are supplied in &lt;code&gt;initheader&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d65e6ea07682f1f5d4a4b44eb6873b1ef458e70b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;initheader&lt;/code&gt; must be a &lt;a href=&quot;../hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; like { 'Accept' =&amp;gt; '&lt;strong&gt;/&lt;/strong&gt;', &amp;hellip; }, and it defaults to an empty hash. If &lt;code&gt;initheader&lt;/code&gt; doesn't have the key 'accept-encoding', then a value of &amp;ldquo;gzip;q=1.0,deflate;q=0.6,identity;q=0.3&amp;rdquo; is used, so that gzip compression is used in preference to deflate compression, which is used in preference to no compression. Ruby doesn't have libraries to support the compress (Lempel-Ziv) compression, so that is not supported. The intent of this is to reduce bandwidth by default. If this routine sets up compression, then it does the decompression also, removing the header as well to prevent confusion. Otherwise it leaves the body as it found it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce1f5b692c41a4d74565d823c87c1945a1902435" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; should not have its value changed while it is in use as a key (an &lt;code&gt;unfrozen String&lt;/code&gt; passed as a key will be duplicated and frozen).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76fe3acff67ac6bffad0a915ecd0b018f89d6718" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lambda&lt;/code&gt;, &lt;code&gt;proc&lt;/code&gt; and &lt;a href=&quot;proc#method-c-new&quot;&gt;&lt;code&gt;Proc.new&lt;/code&gt;&lt;/a&gt; preserve the tricks of a &lt;a href=&quot;proc&quot;&gt;&lt;code&gt;Proc&lt;/code&gt;&lt;/a&gt; object given by &lt;code&gt;&amp;amp;&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f3a915d37607972e0aef2a3925850163cb7eb1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;level&lt;/code&gt; is an integer, usually one of the SOL_ constants such as Socket::SOL_SOCKET, or a protocol level. A string or symbol of the name, possibly without prefix, is also accepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f89e417ec1ebaafcfce6a77c43ba22d656e1b89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;local_address&lt;/code&gt; is an &lt;a href=&quot;../addrinfo&quot;&gt;&lt;code&gt;Addrinfo&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69b2e7a2e5389738093fc778f43d6598e4412b19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;local_sockaddr&lt;/code&gt; - the &lt;code&gt;struct&lt;/code&gt; sockaddr contained in a string or an &lt;a href=&quot;addrinfo&quot;&gt;&lt;code&gt;Addrinfo&lt;/code&gt;&lt;/a&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d2dc269bb3fd796b5c6c6ae87d2e69620b2ad55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxlen&lt;/code&gt; - the maximum number of bytes to receive from the socket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d514e2bee9cf9c2eb806062a730918b5f0d324" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxlen&lt;/code&gt; - the number of bytes to receive from the socket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5ec79ec9d0b7bac69f1c90aa1753d9def17003d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxwidth&lt;/code&gt; - Argument position expected to be here for compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35c2c7a3babdbe9fee54f49a8602fe6a4c7f5478" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxwidth&lt;/code&gt; specifies maximum line length. If it is not specified, 79 is assumed. However actual outputs may overflow &lt;code&gt;maxwidth&lt;/code&gt; if long non-breakable texts are provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4b88616b4cae4a3d14e34368fd77cdd6d3cc9cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxwidth&lt;/code&gt;, &lt;code&gt;newline&lt;/code&gt; and &lt;code&gt;genspace&lt;/code&gt; are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b059cb99d5a05d64302dfab5ca494d99f1e8cc07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;method&lt;/code&gt; should be either &amp;ldquo;get&amp;rdquo; or &amp;ldquo;post&amp;rdquo;, and defaults to the latter. &lt;code&gt;action&lt;/code&gt; defaults to the current &lt;a href=&quot;../cgi&quot;&gt;&lt;code&gt;CGI&lt;/code&gt;&lt;/a&gt; script name. &lt;code&gt;enctype&lt;/code&gt; defaults to &amp;ldquo;application/x-www-form-urlencoded&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="170b918dfd9cd7a8a2a383a3c254fddd10363999" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mode&lt;/code&gt; and &lt;code&gt;perm&lt;/code&gt; are the same as &lt;a href=&quot;../kernel#method-i-open&quot;&gt;&lt;code&gt;Kernel#open&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a13d8d96b5bd655e440c7d9eb2658b4971c7c8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mode&lt;/code&gt; is the symbolic and absolute mode can be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f65e86538ad83effeb0c92a019d759ebf01434ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; can be a &lt;a href=&quot;dns/name&quot;&gt;&lt;code&gt;Resolv::DNS::Name&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;. Retrieved address will be a &lt;a href=&quot;ipv4&quot;&gt;&lt;code&gt;Resolv::IPv4&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;ipv6&quot;&gt;&lt;code&gt;Resolv::IPv6&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b56be2875755d885f21d552a5f8e60318452ba1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; can be a &lt;a href=&quot;dns/name&quot;&gt;&lt;code&gt;Resolv::DNS::Name&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;. Retrieved addresses will be a &lt;a href=&quot;ipv4&quot;&gt;&lt;code&gt;Resolv::IPv4&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;ipv6&quot;&gt;&lt;code&gt;Resolv::IPv6&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5065fc28fbb214d8fa9b8d7b14843176c982e8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; is the name of the element. The &lt;code&gt;values&lt;/code&gt; are the options that can be selected from the Select menu. Each value can be a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or a one, two, or three-element &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;. If a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or a one-element &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, this is both the value of that option and the text displayed for it. If a three-element &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, the elements are the option value, displayed text, and a boolean value specifying whether this option starts as selected. The two-element version omits either the option value (defaults to the same as the display text) or the boolean selected specifier (defaults to false).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d97c233e6f50e24f9dec40a9bd92360eebfb055" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; is the name of the input field. &lt;code&gt;value&lt;/code&gt; is its default value. &lt;code&gt;size&lt;/code&gt; is the size of the input field display. &lt;code&gt;maxlength&lt;/code&gt; is the maximum length of the inputted password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cde21c200e16559703d4dabd7c545c7c6809f2e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; is the name of the input field. &lt;code&gt;value&lt;/code&gt; is its initial value. &lt;code&gt;size&lt;/code&gt; is the size of the input area. &lt;code&gt;maxlength&lt;/code&gt; is the maximum length of input accepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e2d3ac463be5dbcdf915a8fd958d957491be56c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; is the name of the input field. &lt;code&gt;value&lt;/code&gt; is the value of the field if checked. &lt;code&gt;checked&lt;/code&gt; specifies whether the field starts off checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fa62d415cf08e0b6caf80ec561d30b7b4d491fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; is the name of the textarea. &lt;code&gt;cols&lt;/code&gt; is the number of columns and &lt;code&gt;rows&lt;/code&gt; is the number of rows in the display.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5281fbefc92aba56800c89a3c6121fbae723754" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; must be a &lt;a href=&quot;dns/name&quot;&gt;&lt;code&gt;Resolv::DNS::Name&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d326211c3cd545814dd568d2f051861ff994b87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;newline&lt;/code&gt; - Argument position expected to be here for compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ae4a407a0a723063c6c672f8314f609629e8dc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;newline&lt;/code&gt; is used for line breaks. &amp;ldquo;n&amp;rdquo; is used if it is not specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58ac18571847247f84de2f310a174d26e21d3a59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;next&lt;/code&gt; Statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da82b2f7e15e54193e9249bf7a6afeca03d69eb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;next&lt;/code&gt; accepts an argument that can be used as the result of the current block iteration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dc15c9bd1cb778b71980139880b5a5ea6fe78fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nil&lt;/code&gt; and &lt;code&gt;:_separator&lt;/code&gt; can be used to ignore some elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a680709a38193656020db58497bd347ad1a1f6d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nil&lt;/code&gt; and &lt;code&gt;:_separator&lt;/code&gt; specifies that the elements should be dropped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b264a8c465ccea2c6df0b99022e1ad9e895bd59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nil&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; are both false values. &lt;code&gt;nil&lt;/code&gt; is sometimes used to indicate &amp;ldquo;no value&amp;rdquo; or &amp;ldquo;unknown&amp;rdquo; but evaluates to &lt;code&gt;false&lt;/code&gt; in conditional expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e20cbc742c4e9917c1bc1cd0e5b4e9455f10c4a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nil&lt;/code&gt; if the iseq was evaluated from a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e20dd912e1469d92a6b60a065ce54e3feb5e4735" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nil&lt;/code&gt; is returned if &lt;code&gt;other_stat&lt;/code&gt; is not a &lt;a href=&quot;stat&quot;&gt;&lt;code&gt;File::Stat&lt;/code&gt;&lt;/a&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="708ada2dd8c4184d473380e256e1640e26452611" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nil&lt;/code&gt; is returned if the &lt;code&gt;other_ary&lt;/code&gt; is not an array or if the comparison of two elements returned &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d685e5456e20df10e5d4828d3b709a6d4d6701a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nil&lt;/code&gt; is returned if the two strings have incompatible encodings, or if &lt;code&gt;other_str&lt;/code&gt; is not a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb683a23444760948067a2e649dcc126194197a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nil&lt;/code&gt; is returned if the two symbols have incompatible encodings, or if &lt;code&gt;other_symbol&lt;/code&gt; is not a symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="973fc7bf33233acd5cb27a2a919bf6db567f78a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nil&lt;/code&gt; is returned if the two values are incomparable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68bd7a42b816de9abb9dbd3315f9d24927cc124c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;obj&lt;/code&gt; is the (local) object we want to create a stub for. Normally this is &lt;code&gt;nil&lt;/code&gt;. &lt;code&gt;uri&lt;/code&gt; is the &lt;a href=&quot;../uri&quot;&gt;&lt;code&gt;URI&lt;/code&gt;&lt;/a&gt; of the remote object that this will be a stub for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c9659e60dd25b6c5dc58cb8df0ab8536bccb3c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;obj&lt;/code&gt; is the object we want to invoke the method on. &lt;code&gt;msg_id&lt;/code&gt; is the method name, as a &lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41fc8b621e92fa1f17bccdc47c1266deaed09186" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;op&lt;/code&gt; can be a mathematical operation such as &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f9870c956369074d4a2d1e11ac1a263bc19e01f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open_obj&lt;/code&gt; - text appended before the &amp;amp;blok. Default is ''</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6966761e1263624ff4d14fc87e5b421d82baa034" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open_width&lt;/code&gt; - noop argument. Present for compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b643f0fcbdeee608c4129682365a1267c7fc4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;opt&lt;/code&gt; can be used instead of &lt;code&gt;mode&lt;/code&gt; for improved readability. The following keys are supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29706c09e8b2de04f5de7718a7147aa33d259581" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;option&lt;/code&gt; is a hash of options for the initializer. The following options are recognised:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70c98cf954420a162ac69354e1ae9f5b2e602226" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;option&lt;/code&gt; is also passed on to the session storage class initializer; see the documentation for each session storage class for the options they support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ae079e5fdf406133ff8901e7d7a84bcd954790" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt; - keyword hash, supporting `exception: false`</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d33dbef352fcbb56b3a15a7ed05938f006a442" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt; can be used for specifying the particular &lt;a href=&quot;csv&quot;&gt;&lt;code&gt;CSV&lt;/code&gt;&lt;/a&gt; flavor (column separators, row separators, value quoting and so on), and for data conversion, see &lt;code&gt;Data&lt;/code&gt; Conversion section for the description of the latter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ba8e647eabaf50fc2dc8a0e3b1e6d259de45d55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt; is an option hash, each key of which is a symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a39af003c9124d26a52b66b9b71942c6acb1f0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt; is the logical OR of any of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cff38455d318717dd97adabb3984be8541c63d11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt; must be a hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec2c2835cfe32fdc5a4cb8c85ed1fba822136a24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt;, which can be &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; or a &lt;code&gt;Hash&lt;/code&gt;, is used to modify the default behavior of the Ruby iseq compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c34a79e82dec55cb9db604564118fd851c61e8bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;optname&lt;/code&gt; is an integer, usually one of the SO_ constants, such as Socket::SO_REUSEADDR. A string or symbol of the name, possibly without prefix, is also accepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffeec05f7279726e626c68f88e0bd63ff361d14d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;opts&lt;/code&gt; - keyword hash, supporting `exception: false`</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebb3cdf2615ce1c4ca9d07d8a2750f4b82c9aebf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;opts&lt;/code&gt; can include the following elements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af9233d72d1bacb44c96c068e48719ae7a30f02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;optval&lt;/code&gt; is the value of the option, it is passed to the underlying setsockopt() as a pointer to a certain number of bytes. How this is done depends on the type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cee4aca56e090733a2b4a17b27f6db48b66e1eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;outbuf&lt;/code&gt; - destination &lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; buffer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aef68b3f0b4e5aff1d1d92b484c40f53c1e779ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;output&lt;/code&gt; - &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; (or similar) to store rendered text. Needs to respond to '&amp;lt;&amp;lt;'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9550d80d47376ab6efaadc964d7d55a547268ed1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;output&lt;/code&gt; is an output target. If it is not specified, '' is assumed. It should have a &amp;lt;&amp;lt; method which accepts the first argument &lt;code&gt;obj&lt;/code&gt; of &lt;a href=&quot;prettyprint#method-i-text&quot;&gt;&lt;code&gt;PrettyPrint#text&lt;/code&gt;&lt;/a&gt;, the first argument &lt;code&gt;sep&lt;/code&gt; of &lt;a href=&quot;prettyprint#method-i-breakable&quot;&gt;&lt;code&gt;PrettyPrint#breakable&lt;/code&gt;&lt;/a&gt;, the first argument &lt;code&gt;newline&lt;/code&gt; of &lt;a href=&quot;prettyprint#method-c-new&quot;&gt;&lt;code&gt;PrettyPrint.new&lt;/code&gt;&lt;/a&gt;, and the result of a given block for &lt;a href=&quot;prettyprint#method-c-new&quot;&gt;&lt;code&gt;PrettyPrint.new&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e3885eb3a973e6a04afeb7d16b2d4f6388409f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path&lt;/code&gt; should be an array of directory name strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="534b8a898f47ed887408110730c41d96e16face8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;port&lt;/code&gt; is the port to connect to; it defaults to port 25.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bdc46a8fc0c61a061fb2cebbf6a434305bec0ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;proxy&lt;/code&gt; may be set to a &lt;a href=&quot;../../../../uri/http&quot;&gt;&lt;code&gt;URI::HTTP&lt;/code&gt;&lt;/a&gt; or :ENV to pick up proxy options from the environment. See &lt;a href=&quot;persistent#method-i-proxy_from_env&quot;&gt;&lt;code&gt;proxy_from_env&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fd3c7e1bfbaf76d81ddbc9527a353c8293ca492" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ptr&lt;/code&gt; is a referenced function, of a &lt;a href=&quot;handle&quot;&gt;&lt;code&gt;Fiddle::Handle&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69517105ad29b5740365ba16c4a3ee805f2f4a34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;redo&lt;/code&gt; Statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c809cb2adcdbd1af8413c06575bb270c5ad4f517" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remote_address&lt;/code&gt; is an &lt;a href=&quot;../addrinfo&quot;&gt;&lt;code&gt;Addrinfo&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4086a0860221ee1a86673c45407b4e968c692bcf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remote_sockaddr&lt;/code&gt; - the &lt;code&gt;struct&lt;/code&gt; sockaddr contained in a string or &lt;a href=&quot;addrinfo&quot;&gt;&lt;code&gt;Addrinfo&lt;/code&gt;&lt;/a&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="815b81d91b431759e852d9a33ae1bf0c9dcbef4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reply_proc&lt;/code&gt; is a &lt;a href=&quot;../proc&quot;&gt;&lt;code&gt;Proc&lt;/code&gt;&lt;/a&gt; used to send reply back to the source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003a9f7e51e1ca9db9804e095408a034b2f1af9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;req&lt;/code&gt; must be a &lt;a href=&quot;../../../../net/httprequest&quot;&gt;&lt;code&gt;Net::HTTPRequest&lt;/code&gt;&lt;/a&gt; subclass (see &lt;a href=&quot;../../../../net/http&quot;&gt;&lt;code&gt;Net::HTTP&lt;/code&gt;&lt;/a&gt; for a list).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7ec5eea93da27ba7d50a248fe6bed76ce7724c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;request&lt;/code&gt; is an instance of the &lt;code&gt;CGI&lt;/code&gt; class (see cgi.rb). &lt;code&gt;option&lt;/code&gt; is a hash of options for initialising this &lt;a href=&quot;session&quot;&gt;&lt;code&gt;CGI::Session&lt;/code&gt;&lt;/a&gt; instance. The following options are recognised:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="218070838b5120c0d380cfcdfe3b108d10c6c061" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;requirements&lt;/code&gt; is a list of version requirements that the specified gem must match, most commonly &amp;ldquo;= example.version.number&amp;rdquo;. See &lt;code&gt;Gem::Requirement&lt;/code&gt; for how to specify a version requirement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cce111f7a8b6205067fe11ac21576f946cd8064" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ret&lt;/code&gt; is the C type to be returned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51d782a5a46737361afd83440daac200326a2176" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ret_type&lt;/code&gt; is the return type of the function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b449fc037218cbe6079a0584e0664f86977d837" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ruby -K&lt;/code&gt; will change the default locale encoding, but this is not recommended. Ruby source files should declare its script encoding by a magic comment even when they only depend on US-ASCII strings or regular expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d05713b7b07c9749a58c14cf5d6dae996b96e13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s.rest_size&lt;/code&gt; is equivalent to &lt;code&gt;s.rest.size&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13114d3329452c941cf6fd94787e0eab82998e57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s.restsize&lt;/code&gt; is equivalent to &lt;code&gt;s.rest_size&lt;/code&gt;. This method is obsolete; use &lt;a href=&quot;stringscanner#method-i-rest_size&quot;&gt;&lt;code&gt;rest_size&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d2a67615de2474e61e7942b2906efe276d67e06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sec&lt;/code&gt; may have fraction if it is a rational.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b672ab2f334d3313049efe201c843160bc8ae099" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sec&lt;/code&gt; seconds into the future</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ee65f024892ea49f26abc6f0c8a2b5a8fbd26c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sec_with_frac&lt;/code&gt; and &lt;code&gt;usec_with_frac&lt;/code&gt; can have a fractional part.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="399788158de844a06e053073f57db63549e2565a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self&lt;/code&gt; is a keyword referring to the current object under consideration by the compiler, which might make the use of &lt;code&gt;self&lt;/code&gt; in defining a class method above a little clearer. Indeed, the example of adding a &lt;code&gt;hello&lt;/code&gt; method to the class &lt;code&gt;String&lt;/code&gt; can be rewritten thus:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c71f000b1f9c4cba1a7b5a824443d432b3fd0a1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self&lt;/code&gt; is the default receiver. If you don't specify any receiver &lt;code&gt;self&lt;/code&gt; will be used. To specify a receiver use &lt;code&gt;.&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b37c6091a189c2ed85ee5003e7ea2b3cf655551e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self&lt;/code&gt; is traversed in order, and the first occurrence is kept.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ce656687e3b408ab6a018be3b22dc7381d6fbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self&lt;/code&gt; refers to the object that defines the current scope. &lt;code&gt;self&lt;/code&gt; will change when entering a different method or when defining a new module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d45b2e485f4cbc5d62cd20e70fdf64545cbb1c13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;session&lt;/code&gt; is the session for which this instance is being created. The session id must only contain alphanumeric characters; automatically generated session ids observe this requirement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d343a5f7d21537f6ea910d0dc8feaaeb753c244" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;session&lt;/code&gt; is the session this instance is associated with. &lt;code&gt;option&lt;/code&gt; is a list of initialisation options. None are currently recognised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff11a1f5dafaaba8b51042123b4cb3e9c4c8e7bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;session&lt;/code&gt; is the session this instance is associated with. &lt;code&gt;option&lt;/code&gt; is a list of initialisation options. None are currently recognized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e19f226a8d1f2d1d4ad56208fc004e7878479b56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;socketoption&lt;/code&gt; is an instance of &lt;a href=&quot;socket/option&quot;&gt;&lt;code&gt;Socket::Option&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4864aa2ac985b0654875d76668de042967c947e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;src&lt;/code&gt; can be a list of files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3824e19308d78f6d1a42776085cd745a7ea6372" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;src&lt;/code&gt; is the URL of the image to use for the button. &lt;code&gt;name&lt;/code&gt; is the input name. &lt;code&gt;alt&lt;/code&gt; is the alternative text for the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ccdbcb5470b2a768e70cfae0934c76dd3867e61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;src&lt;/code&gt; is the URL of the image. &lt;code&gt;alt&lt;/code&gt; is the alternative text for the image. &lt;code&gt;width&lt;/code&gt; is the width of the image, and &lt;code&gt;height&lt;/code&gt; is its height.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cfee3d3cfa04902ad525da74453e02e90b8e9c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;str&lt;/code&gt; may be &amp;ldquo;*&amp;rdquo; or &amp;ldquo;all&amp;rdquo; to match any address, an IP address string to match a specific address, an IP address mask per &lt;a href=&quot;../ipaddr&quot;&gt;&lt;code&gt;IPAddr&lt;/code&gt;&lt;/a&gt;, or one containing &amp;ldquo;*&amp;rdquo; to match part of an IPv4 address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ed4b8ba1c4fd1421e083cea843e06847223fb52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt; is the HTML string to indent. &lt;code&gt;shift&lt;/code&gt; is the indentation unit to use; it defaults to two spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e769394453ae8a09a8cccbd587b09b1d3ac089b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;super&lt;/code&gt; may be called as many times as you like in the subclass method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a5c65bb5fbf2c3ee1827fe9f5fe06efa123e6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;to_addr&lt;/code&gt; is a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or Strings or &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; of Strings, representing the destination mail address or addresses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c6f499d02a7d6d5af8f8498152527f51e76d9bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the &lt;a href=&quot;pop3&quot;&gt;&lt;code&gt;POP3&lt;/code&gt;&lt;/a&gt; session has started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acdb731ba4e1331b62eef074412b78a889728347" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the &lt;a href=&quot;smtp&quot;&gt;&lt;code&gt;SMTP&lt;/code&gt;&lt;/a&gt; session has been started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3d38ed81917b8bd2bfe527d3f74a7dd1db5eb4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the &lt;a href=&quot;tuplebag&quot;&gt;&lt;code&gt;TupleBag&lt;/code&gt;&lt;/a&gt; to see if it has any expired entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dce705e1a8ffc1a1fcb5fae6351d51807c5ee333" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; is a true value. All objects except &lt;code&gt;nil&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; evaluate to a true value in conditional expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fea78e637bf5a5afd552c6a2e53cc37bd055fe1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ty&lt;/code&gt; can also accept an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; of C type Strings, and will be returned in a corresponding &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b11f5e27b5c0a79e8d24dbc333c6a7b75034872" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typeclass&lt;/code&gt; should be one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30314f2f8d7108b322c387d157589c7a48633154" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;types&lt;/code&gt; (Fiddle::TYPE_INT, Fiddle::TYPE_SIZE_T, etc., see the C types constants)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8704eb298e0375a478a8bd2b3b88dbad84f19384" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tz&lt;/code&gt; specifies the timezone. It can be an offset from UTC, given either as a string such as &amp;ldquo;+09:00&amp;rdquo; or as a number of seconds such as 32400. Or it can be a timezone object, see &lt;a href=&quot;#class-Time-label-Timezone+argument&quot;&gt;Timezone argument&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="597e7abde73bcc3f77a4410a65d2e75e70155448" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unit&lt;/code&gt; specifies a type of the return value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49e329f4ab9c5ca9dd5f63244ada857b2ad66796" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unit&lt;/code&gt; specifies a type of the return value. &lt;code&gt;Process.clock_getres&lt;/code&gt; accepts &lt;code&gt;unit&lt;/code&gt; as &lt;code&gt;Process.clock_gettime&lt;/code&gt;. The default value, &lt;code&gt;:float_second&lt;/code&gt;, is also same as &lt;code&gt;Process.clock_gettime&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eb7967fc763ce769ad6cf2a57fcf492f42b618f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unless&lt;/code&gt; Expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1bd36025c95540d75e55689f3798ef35553b36c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;until&lt;/code&gt; Loop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f478399247a5fc6597145f84044939496d1db061" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;until&lt;/code&gt; used as a modifier:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe19575003dbc0761478a4e7394aa7729ecd0e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uri&lt;/code&gt; is the &lt;a href=&quot;../uri&quot;&gt;&lt;code&gt;URI&lt;/code&gt;&lt;/a&gt; to bind to. This is normally of the form 'druby://&amp;lt;hostname&amp;gt;:&amp;lt;port&amp;gt;' where &amp;lt;hostname&amp;gt; is a hostname of the local machine. If nil, then the system's default hostname will be bound to, on a port selected by the system; these value can be retrieved from the &lt;code&gt;uri&lt;/code&gt; attribute. 'druby:' specifies the default dRuby transport protocol: another protocol, such as 'drbunix:', can be specified instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52fc6084edd94bd3ce68bbdf5db3ede27de2bba5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uri&lt;/code&gt; is the &lt;a href=&quot;../uri&quot;&gt;&lt;code&gt;URI&lt;/code&gt;&lt;/a&gt; we are connected to, &lt;code&gt;'drbssl://localhost:0'&lt;/code&gt; above, &lt;code&gt;config&lt;/code&gt; is our configuration. Either a &lt;a href=&quot;../hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;drbsslsocket/sslconfig&quot;&gt;&lt;code&gt;DRb::DRbSSLSocket::SSLConfig&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef2b0fd9654cc7267f5035c4336a835ec5464281" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uri&lt;/code&gt; is the &lt;a href=&quot;../uri&quot;&gt;&lt;code&gt;URI&lt;/code&gt;&lt;/a&gt; we are connected to. &lt;code&gt;soc&lt;/code&gt; is the tcp socket we are bound to. &lt;code&gt;config&lt;/code&gt; is our configuration. Either a &lt;a href=&quot;../hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;drbsslsocket/sslconfig&quot;&gt;&lt;code&gt;SSLConfig&lt;/code&gt;&lt;/a&gt;&lt;code&gt;is_established&lt;/code&gt; is a boolean of whether &lt;code&gt;soc&lt;/code&gt; is currently established</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc55553a0d27d601edb1f97f0fff680a67dc91e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uri&lt;/code&gt; is the &lt;a href=&quot;uri&quot;&gt;&lt;code&gt;URI&lt;/code&gt;&lt;/a&gt; for the server to bind to. If nil, the server will bind to random port on the default local host name and use the default dRuby protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd95baa29ff3bbd5e9602061c5caee2f61ccb6a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;val&lt;/code&gt; must be a boolean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7b457b126d09e3c14a219622185a74d4736a846" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; is the text to display on the button. &lt;code&gt;name&lt;/code&gt; is the name of the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35bb2a9572adb7cb5fa12a4cbfd0d7d9c323e021" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; will be converted to YAML before storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="656d180638f8492887c3c79a581c3a0168634d97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;while&lt;/code&gt; Loop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="696c69dd4153328b2b3a3d257d989f1d15fcab08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt; argument is here for compatibility. It is a noop argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="205a9e9fd05a34399b4ced98da0152ddc3f1e4ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x.modulo(y)&lt;/code&gt; means &lt;code&gt;x-y*(x/y).floor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13a02a77de7fcbdeda6b4e9fa472457f6e1b93e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x.remainder(y)&lt;/code&gt; means &lt;code&gt;x-y*(x/y).truncate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a3088cfc6c4c2d4a1c9f17d11a44455f2db6af4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ ... }&lt;/code&gt; blocks have priority below all listed operations, but &lt;code&gt;do ... end&lt;/code&gt; blocks have lower priority.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="357599eab877df96dd03e6b6683dfe377cefc3c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{,&lt;/code&gt;&lt;em&gt;m&lt;/em&gt;&lt;code&gt;}&lt;/code&gt; - &lt;em&gt;m&lt;/em&gt; or less times</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78d0b12e900440b505f0acdb0c25960904987cd5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{&lt;/code&gt;&lt;em&gt;n&lt;/em&gt;&lt;code&gt;,&lt;/code&gt;&lt;em&gt;m&lt;/em&gt;&lt;code&gt;}&lt;/code&gt; - At least &lt;em&gt;n&lt;/em&gt; and at most &lt;em&gt;m&lt;/em&gt; times</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e52697383e26c489a6337cb2650ebd7fb0f825a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{&lt;/code&gt;&lt;em&gt;n&lt;/em&gt;&lt;code&gt;,}&lt;/code&gt; - &lt;em&gt;n&lt;/em&gt; or more times</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7560c64d80ebee96508e04cdaa4fd70ee9d0f025" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{&lt;/code&gt;&lt;em&gt;n&lt;/em&gt;&lt;code&gt;}&lt;/code&gt; - Exactly &lt;em&gt;n&lt;/em&gt; times</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c56f553ecf12508ecbf3682d87caf64e0298977d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(produces no output)&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8da1c138cca9195df6bdf647262e14b94809431" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;BlockingOperation&lt;/em&gt; means that the operation will block the calling thread, such as read and write. On CRuby implementation, &lt;em&gt;BlockingOperation&lt;/em&gt; is any operation executed without GVL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="665444983a048d370e7211f1aff6f500bd753001" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Documentation?&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Documentation?&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5c6f840280abdd3c7478a1d77172d25df7175bbf" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Generates (some blank lines removed):&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f18dd1609ba55ed0a01d56ba812ea49e193594d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Generates:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Generates:&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b675391456a8ab21fca2f7c6465b5f67167333fc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Generates&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Generates&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cdf179b5720e20f8a70121bdb65b36ab68f65934" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Immortal&lt;/em&gt; symbols on the other hand will never be garbage collected. They are created when modifying code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f742280574fcc318cceda7d1d5587b903b976c2f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: Other methods provide a simpler interface to this one, and are suitable for nearly all benchmarking requirements. See the examples in &lt;a href=&quot;benchmark&quot;&gt;&lt;code&gt;Benchmark&lt;/code&gt;&lt;/a&gt;, and the &lt;a href=&quot;benchmark#method-i-bm&quot;&gt;&lt;code&gt;bm&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;benchmark#method-i-bmbm&quot;&gt;&lt;code&gt;bmbm&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed17641db237270626b96abc82b61b9cb7ed8c8d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Prints:&lt;/em&gt; The value of x is: 42</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b25721705af603ac1e24b7a2fb7e6d126d2ac58" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Prints:&lt;/em&gt; _&lt;em&gt;ENCODING&lt;/em&gt;_ is Big5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6990e44377b9d24595792d7a30d74300d02d12dc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Programming Ruby&lt;/em&gt; from The Pragmatic Bookshelf.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acd1742ad1c57022cfe5ee6f582723b37e0e90ed" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;SIAM Journal on Computing&lt;/em&gt;, Vol. 1, No. 2, pp. 146-160, June 1972.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="747711779526d5b7aa116aeb7e4a34eda0dcd866" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;add&lt;/em&gt; - &lt;a href=&quot;bn&quot;&gt;&lt;code&gt;BN&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d1b478a6848e5899b968ca795816c191d2feb0a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;address&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;address&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8ba00825d9b2af2ebd04366b262e847873e9b540" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;address_family&lt;/em&gt; should be an integer, a string or a symbol: Socket::AF_INET, &amp;ldquo;AF_INET&amp;rdquo;, :INET, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd4b9a4a888c6d795e35e55fc5c9445a7c0457f2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;advice&lt;/em&gt; is one of the following symbols:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c68106c62212fd2f3b010a538bfee8453b94d8e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;ancillarydata&lt;/em&gt; should be one of following type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4046d4da1890de12fc95abeae0b9f4dd56f704ee" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;b&lt;/em&gt; accepts a &lt;a href=&quot;binding&quot;&gt;&lt;code&gt;Binding&lt;/code&gt;&lt;/a&gt; object which is used to set the context of code evaluation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2263d686c17be76c6a25ca9ce645b9085620e795" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;base&lt;/em&gt; - &lt;a href=&quot;../integer&quot;&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/a&gt; Valid values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="780ed89813bd6ceab8455d5bd0fa61156424a92b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;bits&lt;/em&gt; - integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="767d03ed7e6e7bbee9bb833941b184f0e765efc1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;ca&lt;/em&gt; - An optional array of X509::Certificate's.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f63ea8fa869e433c94811eb4618767133ebda04" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cert&lt;/em&gt; - A &lt;a href=&quot;x509/certificate&quot;&gt;&lt;code&gt;X509::Certificate&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3d983c6f1129768c2aba974de70091ae9274a53" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cert_pbe&lt;/em&gt; - string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0504e0822978cb55b0116a308c296fb3f308ae5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;certificate&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;certificate&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8f834d5383e8c6231fc6bbb1ea948fb367cded06" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;chain&lt;/em&gt; can be an array of &lt;a href=&quot;certificate&quot;&gt;&lt;code&gt;OpenSSL::X509::Certificate&lt;/code&gt;&lt;/a&gt; that is used to construct the certificate chain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcd1b5859f64d0c671e405da1cdb8d654215b6ec" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;checks&lt;/em&gt; - integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92c973d2ad35a78f04dc123d88b419876bb3b5e1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cipher&lt;/em&gt; is an &lt;a href=&quot;../cipher&quot;&gt;&lt;code&gt;OpenSSL::Cipher&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dfcbdb1f29f891b4b28bc7185be9fc32f82ebbc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmd&lt;/em&gt; is a string or an array as follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12dcfaa288df92a2c9cd71a18e653091bf0989f5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmsg_data&lt;/em&gt; should be a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f08226727a4a3e47461e19329e671ed6c9bd0c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmsg_level&lt;/em&gt; should be an integer, a string or a symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f998b14bf6347a7560ef5f89a61062c3d87208c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmsg_type&lt;/em&gt; should be an integer, a string or a symbol. If a string/symbol is specified, it is interpreted depend on &lt;em&gt;cmsg_level&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ecdf34ba918c6be1560263a6979c1e89a5bf3a3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;controls&lt;/em&gt; is a list of ancillary data. The element of &lt;em&gt;controls&lt;/em&gt; should be &lt;a href=&quot;socket/ancillarydata&quot;&gt;&lt;code&gt;Socket::AncillaryData&lt;/code&gt;&lt;/a&gt; or 3-elements array. The 3-element array should contains cmsg_level, cmsg_type and data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6558bfca62cf6411a540576178a57ce2269ddeb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;controls&lt;/em&gt; is ancillary data which is an array of &lt;a href=&quot;socket/ancillarydata&quot;&gt;&lt;code&gt;Socket::AncillaryData&lt;/code&gt;&lt;/a&gt; objects such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f63390d57448cb07469bbbd341765d322f9e98d4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;conversion_form&lt;/em&gt; specifies how the point is converted. Possible values are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461606e4b7eee8ee41cd414706a39e835736d4bb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;ctx&lt;/em&gt; is an instance of &lt;a href=&quot;sslcontext&quot;&gt;&lt;code&gt;OpenSSL::SSL::SSLContext&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64fa8098209979c09957bbeac447787daa9bfe06" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cur_limit&lt;/em&gt; and &lt;em&gt;max_limit&lt;/em&gt; may be &lt;code&gt;:INFINITY&lt;/code&gt;, &lt;code&gt;&quot;INFINITY&quot;&lt;/code&gt; or &lt;code&gt;Process::RLIM_INFINITY&lt;/code&gt;, which means that the resource is not limited. They may be &lt;code&gt;Process::RLIM_SAVED_MAX&lt;/code&gt;, &lt;code&gt;Process::RLIM_SAVED_CUR&lt;/code&gt; and corresponding symbols and strings too. See system setrlimit(2) manual for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9aa3ee56b15125f0af3d6155f63b3cc1503eddd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cur_limit&lt;/em&gt; and &lt;em&gt;max_limit&lt;/em&gt; may be &lt;code&gt;Process::RLIM_INFINITY&lt;/code&gt;, &lt;code&gt;Process::RLIM_SAVED_MAX&lt;/code&gt; or &lt;code&gt;Process::RLIM_SAVED_CUR&lt;/code&gt;. See &lt;a href=&quot;process#method-c-setrlimit&quot;&gt;&lt;code&gt;Process.setrlimit&lt;/code&gt;&lt;/a&gt; and the system getrlimit(2) manual for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a8e393053c92d1da949efe5f16d3642d7dd968d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;data&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;data&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5750d047aafd122fc90b1e873f389d447e7a4f2a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;dest_sockaddr&lt;/em&gt; is a destination socket address for connection-less socket. It should be a sockaddr such as a result of &lt;a href=&quot;socket#method-c-sockaddr_in&quot;&gt;&lt;code&gt;Socket.sockaddr_in&lt;/code&gt;&lt;/a&gt;. An &lt;a href=&quot;addrinfo&quot;&gt;&lt;code&gt;Addrinfo&lt;/code&gt;&lt;/a&gt; object can be used too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af102acbd3e106c36054bc2319193dcd0d1e33c5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;dest_sockaddr&lt;/em&gt; should be a packed sockaddr string or an addrinfo.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94d8e6fd90822e41e3bdf54b5f29e9a7b257c384" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;digest&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;digest&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="66a5c7b9a9932238cd421a5321f94bfe5f8a9126" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;digest&lt;/em&gt; - the digest to be used for signing this instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0e98a48750ec089b41bf65c704eaed3e7f63240" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;digest&lt;/em&gt; is a &lt;a href=&quot;digest&quot;&gt;&lt;code&gt;Digest&lt;/code&gt;&lt;/a&gt; object that defaults to 'MD5'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="842c27699200d9d3361a6ba68229039145ba92f2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;digest&lt;/em&gt; is a message digest of the original input data to be signed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a7842ff5df1d098ab18989919af3a724176523" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;domain&lt;/em&gt; should be a communications domain such as: :INET, :INET6, :UNIX, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94acd52378f82b50846d4fe4f4e974cd47826294" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;ec_method&lt;/em&gt; is a symbol that represents an EC_METHOD. Currently the following are supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f2588a55a1a2e444a6a15ffe4b7e71c449924e5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;encoded_point&lt;/em&gt; is the octet string representation of the point. This must be either a &lt;a href=&quot;../../../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or an &lt;a href=&quot;../../bn&quot;&gt;&lt;code&gt;OpenSSL::BN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a52fdb99ac93b8b451b524b3ad6cf02a2b4f0e5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;eol&lt;/em&gt; may be a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;Regexp&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e83342aca255c28175420e314cd4ee9dfb49a8c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;eoutvar&lt;/em&gt; can be used to set the name of the variable &lt;a href=&quot;erb&quot;&gt;&lt;code&gt;ERB&lt;/code&gt;&lt;/a&gt; will build up its output in. This is useful when you need to run multiple &lt;a href=&quot;erb&quot;&gt;&lt;code&gt;ERB&lt;/code&gt;&lt;/a&gt; templates through the same binding and/or when you want to control where output ends up. Pass the name of the variable to be used inside a &lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="169185b3573f1d0a072d96972317f2a0da29d795" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;extensions&lt;/em&gt; is an &lt;a href=&quot;../../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; of &lt;a href=&quot;../x509/extension&quot;&gt;&lt;code&gt;OpenSSL::X509::Extension&lt;/code&gt;&lt;/a&gt; to be included in the &lt;a href=&quot;singleresponse&quot;&gt;&lt;code&gt;SingleResponse&lt;/code&gt;&lt;/a&gt;. This is also optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="620da8f0776f195fd91aa3cd0fdb4dd1f2fe7947" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;extra_certs&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;extra_certs&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c1be41ad6ec740b05f853c5ed845aa81c01ec177" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;family&lt;/em&gt; should be an address family such as: :INET, :INET6, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3af1079409fbed429cb3e95c304ad0880dd3beea" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;family&lt;/em&gt; should be an integer, a string or a symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72e2afaf2bf837ed722a8e945126f5f2d0fc54a4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;file_1&lt;/em&gt; and &lt;em&gt;file_2&lt;/em&gt; can be an &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b9d78c0979cb2999ffc7e855e4680867d713236" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;file_name&lt;/em&gt; can be an &lt;a href=&quot;../io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ecb4c60c5ae5764ca8e27860e5aeab2bd176ad5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;file_name&lt;/em&gt; can be an &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
