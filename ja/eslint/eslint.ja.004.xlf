<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="eslint">
    <body>
      <group id="eslint">
        <trans-unit id="242eeccd5d52147ec1754c157acf9d8bc93f2a94" translate="yes" xml:space="preserve">
          <source>FunctionExpression</source>
          <target state="translated">FunctionExpression</target>
        </trans-unit>
        <trans-unit id="7b9979eefc37fbcb68120aa159c368948bb1d7b5" translate="yes" xml:space="preserve">
          <source>Functions Explained</source>
          <target state="translated">関数の説明</target>
        </trans-unit>
        <trans-unit id="9d73f5d6d7a1f0213edd697639ee44d40a45e487" translate="yes" xml:space="preserve">
          <source>Functions declared inside of other functions should be declared immediately after the &lt;code&gt;var&lt;/code&gt; statement.</source>
          <target state="translated">他の関数の内部で宣言された関数は、 &lt;code&gt;var&lt;/code&gt; ステートメントの直後に宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="c4bcc58afe5ae87087e01c52a23f4ed7d3ef4f59" translate="yes" xml:space="preserve">
          <source>Functions should be declared before they are used. When a function is not a method (not attached to an object) it should be defined using function declaration format (not function expression format nor using the &lt;code&gt;Function&lt;/code&gt; constructor). There should be no space between the function name and the opening parentheses. There should be one space between the closing parentheses and the right brace. The right brace should be on the same line as the &lt;code&gt;function&lt;/code&gt; keyword. There should be no space after the opening parentheses or before the closing parentheses. Named arguments should have a space after the comma but not before it. The function body should be indented one level.</source>
          <target state="translated">関数は、使用する前に宣言する必要があります。関数がメソッドではない（オブジェクトにアタッチされていない）場合は、関数宣言形式（関数式形式でも &lt;code&gt;Function&lt;/code&gt; コンストラクターでもない）を使用して定義する必要があります。関数名と開き括弧の間にはスペースを入れないでください。右括弧と右中括弧の間にスペースが1つ必要です。右中括弧は、 &lt;code&gt;function&lt;/code&gt; キーワードと同じ行になければなりません。左括弧の後または右括弧の前にスペースがあってはなりません。名前付き引数は、コンマの後にスペースを入れるべきですが、コンマの前には入れません。関数本体は1レベルインデントする必要があります。</target>
        </trans-unit>
        <trans-unit id="bde886e46a60602d71e6fb5101b6d6dffe1e77d5" translate="yes" xml:space="preserve">
          <source>Functions that take numerous parameters can be difficult to read and write because it requires the memorization of what each parameter is, its type, and the order they should appear in. As a result, many coders adhere to a convention that caps the number of parameters a function can take.</source>
          <target state="translated">多数のパラメータを取る関数は、各パラメータが何であるか、その型、およびそれらが現れるべき順序を記憶する必要があるため、読み書きするのが困難になることがあります。その結果、多くのコーダーは、関数が取ることができるパラメータの数を制限する慣習を守っています。</target>
        </trans-unit>
        <trans-unit id="bafd4b54282745a2bed1442852b73f4b3189a77a" translate="yes" xml:space="preserve">
          <source>Further Reading</source>
          <target state="translated">続きを読む</target>
        </trans-unit>
        <trans-unit id="e25c1e95ea5591c995c9c1f25b2d912e486761e8" translate="yes" xml:space="preserve">
          <source>Further Reading: https://estools.github.io/escope/</source>
          <target state="translated">続きを読む:https://estools.github.io/escope/</target>
        </trans-unit>
        <trans-unit id="0e44c8b638baa470dbb5f127964c092cc77ea465" translate="yes" xml:space="preserve">
          <source>Further reading</source>
          <target state="translated">続きを読む</target>
        </trans-unit>
        <trans-unit id="ba2bb5be981e93482d382868040766613c7b17db" translate="yes" xml:space="preserve">
          <source>Further, ES6 modules mandate that &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; statements can only occur in the top level of the module's body.</source>
          <target state="translated">さらに、ES6モジュールでは、 &lt;code&gt;import&lt;/code&gt; および &lt;code&gt;export&lt;/code&gt; ステートメントはモジュール本体の最上位でのみ発生することが義務付けられています。</target>
        </trans-unit>
        <trans-unit id="7815e5645af9df96e892739a3b0f31714ebc82b7" translate="yes" xml:space="preserve">
          <source>Further, in &lt;code&gt;&quot;always&quot;&lt;/code&gt; mode, a second object option is available that contains a single boolean &lt;code&gt;allowNewlines&lt;/code&gt; property.</source>
          <target state="translated">さらに、 &lt;code&gt;&quot;always&quot;&lt;/code&gt; モードでは、単一のブール値の &lt;code&gt;allowNewlines&lt;/code&gt; プロパティを含む2番目のオブジェクトオプションを使用できます。</target>
        </trans-unit>
        <trans-unit id="81de065a8861790d26820fc5d06589b48f235e3e" translate="yes" xml:space="preserve">
          <source>Generally, semicolons are at the end of lines. However, in semicolon-less style, semicolons are at the beginning of lines. This rule enforces that semicolons are at the configured location.</source>
          <target state="translated">一般的にセミコロンは行末にあります。しかし、セミコロンレススタイルでは、セミコロンは行頭にあります。このルールは、セミコロンが設定された位置にあることを強制します。</target>
        </trans-unit>
        <trans-unit id="3e79ba65138b641bbe407622f3e91f8a8f78035c" translate="yes" xml:space="preserve">
          <source>Generates &lt;code&gt;build/eslint.js&lt;/code&gt; for use in a browser</source>
          <target state="translated">ブラウザーで使用 &lt;code&gt;build/eslint.js&lt;/code&gt; を生成します</target>
        </trans-unit>
        <trans-unit id="fcc5b2914a7a2ea251adb77c39978894c31abd89" translate="yes" xml:space="preserve">
          <source>Generates &lt;code&gt;build/eslint.js&lt;/code&gt;, a version of ESLint for use in the browser</source>
          <target state="translated">ブラウザで使用するESLintのバージョンである &lt;code&gt;build/eslint.js&lt;/code&gt; を生成します</target>
        </trans-unit>
        <trans-unit id="5945bd3c8bc550a8cf2401193804d1c9e6d113b1" translate="yes" xml:space="preserve">
          <source>Generates JSDoc documentation and places it into &lt;code&gt;/jsdoc&lt;/code&gt;.</source>
          <target state="translated">JSDocドキュメントを生成し、それを &lt;code&gt;/jsdoc&lt;/code&gt; に配置します。</target>
        </trans-unit>
        <trans-unit id="310727bd5d081f34063cbab1b776498ff1099367" translate="yes" xml:space="preserve">
          <source>Generators are a new type of function in ECMAScript 6 that can return multiple values over time. These special functions are indicated by placing an &lt;code&gt;*&lt;/code&gt; after the &lt;code&gt;function&lt;/code&gt; keyword.</source>
          <target state="translated">ジェネレーターは、時間の経過とともに複数の値を返すことができるECMAScript 6の新しいタイプの関数です。これらの特殊関数は、 &lt;code&gt;function&lt;/code&gt; キーワードの後に &lt;code&gt;*&lt;/code&gt; を付けることで示されます。</target>
        </trans-unit>
        <trans-unit id="93c139a6ce34105689c947640356617403f86eb6" translate="yes" xml:space="preserve">
          <source>Get familiar with the &lt;a href=&quot;user-guide/command-line-interface&quot;&gt;command line options&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;user-guide/command-line-interface&quot;&gt;コマンドラインオプションについて&lt;/a&gt;理解します。</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">はじめに</target>
        </trans-unit>
        <trans-unit id="58b550930ff9fffb167adfd8ee39a843e9586962" translate="yes" xml:space="preserve">
          <source>Getting Started with ESLint</source>
          <target state="translated">ESLintを始めるには</target>
        </trans-unit>
        <trans-unit id="7ca8756b353c0b76dc6de040bd89171962896459" translate="yes" xml:space="preserve">
          <source>Getting the Source</source>
          <target state="translated">ソースの取得</target>
        </trans-unit>
        <trans-unit id="128c6bb7b6bf78e6850bf53726f5a89cab72531b" translate="yes" xml:space="preserve">
          <source>Git Precommit Hook</source>
          <target state="translated">Git Precommit フック</target>
        </trans-unit>
        <trans-unit id="21ff9395b1860dfd1b610dd7f96c9e872d886945" translate="yes" xml:space="preserve">
          <source>Git pre-commit hook that only lints staged changes</source>
          <target state="translated">リントの段階的な変更のみを行う Git プリコミットフック</target>
        </trans-unit>
        <trans-unit id="e617e36bd8412176fc0cb1c38dd248de4b431c36" translate="yes" xml:space="preserve">
          <source>Glob pattern overrides have higher precedence than the regular configuration in the same config file. Multiple overrides within the same config are applied in order. That is, the last override block in a config file always has the highest precedence.</source>
          <target state="translated">Glob パターンのオーバーライドは、同じ config ファイル内の通常の設定よりも優先されます。同じコンフィグ内の複数のオーバーライドは順番に適用されます。つまり、コンフィグ・ファイル内の最後のオーバーライド・ブロックが常に最も高い優先順位を持ちます。</target>
        </trans-unit>
        <trans-unit id="0823f01a9e70f704b93047e4e7ec9b65dc5acd57" translate="yes" xml:space="preserve">
          <source>Global variable leaks</source>
          <target state="translated">グローバル変数のリーク</target>
        </trans-unit>
        <trans-unit id="1e8bf2817d0e3606a6573ec6b33c08545db542a1" translate="yes" xml:space="preserve">
          <source>Global variable leaks.</source>
          <target state="translated">グローバル変数の漏れ。</target>
        </trans-unit>
        <trans-unit id="bdf50a7101b173e7ff27359f55926a9df8d5a3fd" translate="yes" xml:space="preserve">
          <source>Global variables created from a script can produce name collisions with global variables created from another script, which will usually lead to runtime errors or unexpected behavior.</source>
          <target state="translated">スクリプトから作成されたグローバル変数は、他のスクリプトから作成されたグローバル変数と名前が衝突する可能性があり、通常はランタイムエラーや予期せぬ動作につながります。</target>
        </trans-unit>
        <trans-unit id="b1d22fa6d5fe08a0428bd868deefa69f7b4dad4c" translate="yes" xml:space="preserve">
          <source>Globals can be disabled with the string &lt;code&gt;&quot;off&quot;&lt;/code&gt;. For example, in an environment where most ES2015 globals are available but &lt;code&gt;Promise&lt;/code&gt; is unavailable, you might use this config:</source>
          <target state="translated">文字列 &lt;code&gt;&quot;off&quot;&lt;/code&gt; でグローバルを無効にできます。たとえば、ほとんどのES2015グローバルは使用できるが、 &lt;code&gt;Promise&lt;/code&gt; は使用できない環境では、次の構成を使用できます。</target>
        </trans-unit>
        <trans-unit id="2a6694355730f716bd8bc02fad0f77e6032920b3" translate="yes" xml:space="preserve">
          <source>Globs are matched using &lt;a href=&quot;https://github.com/kaelzhang/node-ignore&quot;&gt;node-ignore&lt;/a&gt;, so a number of features are available:</source>
          <target state="translated">Globは&lt;a href=&quot;https://github.com/kaelzhang/node-ignore&quot;&gt;node-ignore&lt;/a&gt;を使用して照合されるため、いくつかの機能を使用できます。</target>
        </trans-unit>
        <trans-unit id="411dfa3491e742f169a9eabf19310458112cfe76" translate="yes" xml:space="preserve">
          <source>Go to &lt;a href=&quot;https://github.com/eslint/eslint&quot;&gt;https://github.com/eslint/eslint&lt;/a&gt; and click the &quot;Fork&quot; button. Follow the &lt;a href=&quot;https://help.github.com/articles/fork-a-repo&quot;&gt;GitHub documentation&lt;/a&gt; for forking and cloning.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/eslint/eslint&quot;&gt;https://github.com/eslint/eslintに&lt;/a&gt;移動し、[フォーク]ボタンをクリックします。フォークとクローニングについては、&lt;a href=&quot;https://help.github.com/articles/fork-a-repo&quot;&gt;GitHubのドキュメントに&lt;/a&gt;従ってください。</target>
        </trans-unit>
        <trans-unit id="a6617e667de9f88741fd1a7ebaf6f0e23cfbaa38" translate="yes" xml:space="preserve">
          <source>Go to &lt;a href=&quot;https://nodejs.org/&quot;&gt;https://nodejs.org/&lt;/a&gt; to download and install the latest stable version for your operating system.</source>
          <target state="translated">行く&lt;a href=&quot;https://nodejs.org/&quot;&gt;https://nodejs.org/&lt;/a&gt;ダウンロードして、ご使用のオペレーティング・システム用の最新の安定版をインストールします。</target>
        </trans-unit>
        <trans-unit id="6ea7f828f26d9fceea4f4d6bd87992131e20906f" translate="yes" xml:space="preserve">
          <source>Grunt: &lt;a href=&quot;https://www.npmjs.com/package/grunt-eslint&quot;&gt;grunt-eslint&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/grunt-eslint&quot;&gt;グラント&lt;/a&gt;：grunt-eslint</target>
        </trans-unit>
        <trans-unit id="bf073fae640ded81eeb7a4cee70faff4a623c16c" translate="yes" xml:space="preserve">
          <source>Guide</source>
          <target state="translated">ガイド</target>
        </trans-unit>
        <trans-unit id="54000f7505185b081957bfac1390caa5502c47df" translate="yes" xml:space="preserve">
          <source>Gulp: &lt;a href=&quot;https://www.npmjs.com/package/gulp-eslint&quot;&gt;gulp-eslint&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/gulp-eslint&quot;&gt;Gulp&lt;/a&gt;：gulp-eslint</target>
        </trans-unit>
        <trans-unit id="4a3cb3ca162fa44c4df1b6111753f586c63126fb" translate="yes" xml:space="preserve">
          <source>Handling warnings</source>
          <target state="translated">警告の取り扱い</target>
        </trans-unit>
        <trans-unit id="400e3ff42bde508534f29f8b35fbfc07bca3a323" translate="yes" xml:space="preserve">
          <source>Have an ESLint team member champion inclusion of the rule</source>
          <target state="translated">ESLintチームのメンバーがルールの導入を支持するようにしてください。</target>
        </trans-unit>
        <trans-unit id="a198a8011dce88c0fa8a772a88db629e2b707836" translate="yes" xml:space="preserve">
          <source>Have an ESLint team member champion the change</source>
          <target state="translated">ESLintチームのメンバーが変更をサポートします。</target>
        </trans-unit>
        <trans-unit id="2331ba67e2d2702911301630fcf52e4c0d23abea" translate="yes" xml:space="preserve">
          <source>Have some extra time and want to contribute? This section talks about the process of working on issues.</source>
          <target state="translated">時間に余裕があり、貢献したいと思っていませんか?このセクションでは、課題に取り組むプロセスについて説明します。</target>
        </trans-unit>
        <trans-unit id="0a4d55a8d778e5022fab701977c5d840bbc486d0" translate="yes" xml:space="preserve">
          <source>Hello World</source>
          <target state="translated">ハローワールド</target>
        </trans-unit>
        <trans-unit id="4698476cc278899c186f08ba38fc540c030e5af5" translate="yes" xml:space="preserve">
          <source>Here are a few common examples using the ES5 syntax:</source>
          <target state="translated">ここでは、ES5 構文を使用した一般的な例をいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="50fcab2478cdd473bf8ef09108774e65b13bfec6" translate="yes" xml:space="preserve">
          <source>Here are methods for the &lt;a href=&quot;../rules/array-callback-return&quot;&gt;array-callback-return&lt;/a&gt; rule:</source>
          <target state="translated">&lt;a href=&quot;../rules/array-callback-return&quot;&gt;array-callback-return&lt;/a&gt;ルールのメソッドは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="0931022beea83b3afc095873234631b7243eeca4" translate="yes" xml:space="preserve">
          <source>Here are some examples:</source>
          <target state="translated">ここでは、いくつかの例をご紹介します。</target>
        </trans-unit>
        <trans-unit id="8107635e978f92c38dfc42f4127b75fb737c33b8" translate="yes" xml:space="preserve">
          <source>Here are some good commit message summary examples:</source>
          <target state="translated">ここでは、良いコミットメッセージの要約例をいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="93db38995286d4c911c64ebca2e9ba323edd87ae" translate="yes" xml:space="preserve">
          <source>Here are the supported object options:</source>
          <target state="translated">サポートされているオブジェクトのオプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="6bd072abb5800aca18a1177a3f0b3a9572a87781" translate="yes" xml:space="preserve">
          <source>Here is an example configuration:</source>
          <target state="translated">以下に設定例を示します。</target>
        </trans-unit>
        <trans-unit id="e674c22be7c4bf1ffea002950ce480358ab828e8" translate="yes" xml:space="preserve">
          <source>Here is an example of a generator function:</source>
          <target state="translated">ジェネレータ関数の例を示します。</target>
        </trans-unit>
        <trans-unit id="e49700a85e99598dc36d99df820a3fccd24ff705" translate="yes" xml:space="preserve">
          <source>Here is the basic format of the source file for a rule:</source>
          <target state="translated">ルールのソースファイルの基本フォーマットは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="dd8677592fa5ec27c36b1f8455fb17aa39ea36fe" translate="yes" xml:space="preserve">
          <source>Here's a configuration file with the closest equivalent of the old defaults:</source>
          <target state="translated">ここに古いデフォルトに近い設定ファイルがあります。</target>
        </trans-unit>
        <trans-unit id="8f2b2a6785fe7221113d612b4694f75cc5b860c2" translate="yes" xml:space="preserve">
          <source>Here's an example &lt;code&gt;.eslintrc.json&lt;/code&gt; file:</source>
          <target state="translated">次に &lt;code&gt;.eslintrc.json&lt;/code&gt; ファイルの例を示します。</target>
        </trans-unit>
        <trans-unit id="3caaee4438077ccfc367e54ba130583f7f5793e1" translate="yes" xml:space="preserve">
          <source>Here's an example where the usage of &lt;code&gt;=&amp;gt;&lt;/code&gt; could be confusing:</source>
          <target state="translated">&lt;code&gt;=&amp;gt;&lt;/code&gt; の使い方がわかりにくい例を次に示します。</target>
        </trans-unit>
        <trans-unit id="69579a1902b896558c6c5e0da078f9c102327c17" translate="yes" xml:space="preserve">
          <source>Here's an example where the usage of &lt;code&gt;=&amp;gt;&lt;/code&gt; is most likely a typo:</source>
          <target state="translated">&lt;code&gt;=&amp;gt;&lt;/code&gt; の使用がタイプミスである可能性が最も高い例を次に示します。</target>
        </trans-unit>
        <trans-unit id="91cf4ec4989adf874c24a01d0a7887526b72a403" translate="yes" xml:space="preserve">
          <source>Here's what the &lt;code&gt;data&lt;/code&gt; object would look like if one rule, &lt;code&gt;no-extra-semi&lt;/code&gt;, had been run:</source>
          <target state="translated">以下は、1つのルール &lt;code&gt;no-extra-semi&lt;/code&gt; が実行された場合の &lt;code&gt;data&lt;/code&gt; オブジェクトの外観です。</target>
        </trans-unit>
        <trans-unit id="c8381d2b32745ce22d2b437f812f233f5b2f2c31" translate="yes" xml:space="preserve">
          <source>Here's what the schema from above looks like when properly converted:</source>
          <target state="translated">上のスキーマを適切に変換するとこんな感じになります。</target>
        </trans-unit>
        <trans-unit id="75ae80968a1517575f98728b476cb5292150f02e" translate="yes" xml:space="preserve">
          <source>Here, the &lt;code&gt;fix()&lt;/code&gt; function is used to insert a semicolon after the node. Note that a fix is not immediately applied, and may not be applied at all if there are conflicts with other fixes. After applying fixes, ESLint will run all of the enabled rules again on the fixed code, potentially applying more fixes. This process will repeat up to 10 times, or until no more fixable problems are found. Afterwards, any remaining problems will be reported as usual.</source>
          <target state="translated">ここでは、 &lt;code&gt;fix()&lt;/code&gt; 関数を使用して、ノードの後に​​セミコロンを挿入しています。修正はすぐには適用されず、他の修正との競合がある場合はまったく適用されない場合があることに注意してください。修正を適用した後、ESLintは有効なルールをすべて修正されたコードで再度実行し、さらに修正を適用する可能性があります。このプロセスは、最大10回、または修正可能な問題が検出されなくなるまで繰り返されます。その後、残りの問題は通常どおり報告されます。</target>
        </trans-unit>
        <trans-unit id="8fbec61ce977dd79baacea5273b4c4549f2f0f9a" translate="yes" xml:space="preserve">
          <source>Here, the &lt;code&gt;fix()&lt;/code&gt; function is used to insert a semicolon after the node. Note that the fix is not immediately applied and may not be applied at all if there are conflicts with other fixes. If the fix cannot be applied, then the problem message is reported as usual; if the fix can be applied, then the problem message is not reported.</source>
          <target state="translated">ここでは、 &lt;code&gt;fix()&lt;/code&gt; 関数を使用して、ノードの後に​​セミコロンを挿入しています。修正はすぐには適用されず、他の修正との競合がある場合はまったく適用されない場合があります。修正を適用できない場合、問題のメッセージは通常どおり報告されます。修正を適用できる場合、問題のメッセージは報告されません。</target>
        </trans-unit>
        <trans-unit id="ff8b740232342a63ba2626bdfd5772e2040ddc24" translate="yes" xml:space="preserve">
          <source>How ESLint Finds Personal Configuration File</source>
          <target state="translated">ESLintが個人設定ファイルを見つける方法</target>
        </trans-unit>
        <trans-unit id="5f9f0fbf29f7b501c030758c0c08e3456ab16379" translate="yes" xml:space="preserve">
          <source>How Personal Configuration File Behaves</source>
          <target state="translated">個人設定ファイルの動作</target>
        </trans-unit>
        <trans-unit id="baf60d8659418f3ae6c463f7ba4d66b67aa7ea0a" translate="yes" xml:space="preserve">
          <source>How evil is eval</source>
          <target state="translated">evalの悪さ</target>
        </trans-unit>
        <trans-unit id="1dd6a17cb4033f4f74df1bb6912b8a28a8074084" translate="yes" xml:space="preserve">
          <source>How it works</source>
          <target state="translated">どのように動作するか</target>
        </trans-unit>
        <trans-unit id="1327d170552189b8d51b2d02b266287ad708c180" translate="yes" xml:space="preserve">
          <source>How to store Node.js deployment settings/configuration files? - Stack Overflow</source>
          <target state="translated">Node.jsのデプロイメントの設定/設定ファイルを保存するには?-スタックオーバーフロー</target>
        </trans-unit>
        <trans-unit id="61690269fd440a22ff0ab6115f326e176ab7f24d" translate="yes" xml:space="preserve">
          <source>However, if you want to enforce the style of spacing between the &lt;code&gt;function&lt;/code&gt; keyword and the following opening parenthesis, please refer to &lt;a href=&quot;space-before-function-paren&quot;&gt;space-before-function-paren&lt;/a&gt;.</source>
          <target state="translated">ただし、 &lt;code&gt;function&lt;/code&gt; キーワードとそれに続く&lt;a href=&quot;space-before-function-paren&quot;&gt;左&lt;/a&gt;括弧の間隔のスタイルを強制したい場合は、space-before-function-parenを参照してください。</target>
        </trans-unit>
        <trans-unit id="1d1d23a4e252168ddaf82392ba6af06eb923611d" translate="yes" xml:space="preserve">
          <source>However, if you're using Node.js, you may want to turn strict mode on globally. Files are typically not concatenated together in Node.js projects and therefore the risk of applying strict mode accidentally is minimal. Further, since every file in Node.js has its own scope, global strict mode only effects the single file in which it is placed.</source>
          <target state="translated">しかし、Node.jsを使用している場合は、グローバルに厳格モードをオンにした方が良いでしょう。通常、Node.jsプロジェクトではファイルは連結されていないので、誤って厳格モードを適用してしまうリスクは最小限に抑えられます。さらに、Node.js内のすべてのファイルは独自のスコープを持っているので、グローバルなストリクトモードは、それが配置されている単一のファイルにのみ影響を与えます。</target>
        </trans-unit>
        <trans-unit id="128ecc4491bd188d93624c174fbe6b646868393b" translate="yes" xml:space="preserve">
          <source>However, the ASI mechanism can sometimes be tricky to people who are using semicolons. For example, consider this code:</source>
          <target state="translated">しかし、ASIの仕組みは、セミコロンを使用している人にとっては厄介な場合があります。例えば、次のコードを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="c379491a9b3c4a1a9218e57f12d3d5a77f41c184" translate="yes" xml:space="preserve">
          <source>However, there are a few problems with this. First, you can't be sure what type of system the script is running on. Node.js can be run on any computer, including Windows, which uses a different path separator. It's very easy, therefore, to create an invalid path using string concatenation and assuming Unix-style separators. There's also the possibility of having double separators, or otherwise ending up with an invalid path.</source>
          <target state="translated">しかし、これにはいくつかの問題があります。まず、スクリプトがどのようなシステム上で実行されているかを確認することができません。Node.jsは、異なるパス区切り文字を使用しているWindowsを含め、どのコンピュータでも実行することができます。そのため、文字列の連結やUnixスタイルのセパレータを想定して無効なパスを作成することは非常に簡単です。また、セパレータを二重にしたり、無効なパスで終わる可能性もあります。</target>
        </trans-unit>
        <trans-unit id="eeb456769869329e0928feb28b4a92121639f6d0" translate="yes" xml:space="preserve">
          <source>However, this is no different from using the more concise object literal syntax:</source>
          <target state="translated">しかし、これはより簡潔なオブジェクトリテラル構文を使用していることに変わりはありません。</target>
        </trans-unit>
        <trans-unit id="0691cb4a13c783b84fc4fabc7b11778ad1cb0a36" translate="yes" xml:space="preserve">
          <source>However, to simplify schema creation, rules may also export an array of schemas for each optional positional argument, and ESLint will automatically validate the required error level first. For example, the &lt;code&gt;yoda&lt;/code&gt; rule accepts a primary mode argument, as well as an extra options object with named properties.</source>
          <target state="translated">ただし、スキーマの作成を簡略化するために、ルールはオプションの位置引数ごとにスキーマの配列をエクスポートする場合もあり、ESLintは必要なエラーレベルを最初に自動的に検証します。たとえば、 &lt;code&gt;yoda&lt;/code&gt; ルールは、プライマリモードの引数と、名前付きプロパティを持つ追加のoptionsオブジェクトを受け入れます。</target>
        </trans-unit>
        <trans-unit id="c30ae13ab8f250b713026f3fce02de7c62dc87d4" translate="yes" xml:space="preserve">
          <source>However, when declared in the top-level of a browser script these variables are not 'script-scoped'. They are actually created in the global scope and could produce name collisions with &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; variables and &lt;code&gt;function&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt; declarations from other scripts. This does not apply to ES and CommonJS modules.</source>
          <target state="translated">ただし、ブラウザスクリプトのトップレベルで宣言されている場合、これらの変数は「スクリプトスコープ」ではありません。それらは実際にはグローバルスコープで作成され、 &lt;code&gt;var&lt;/code&gt; 、 &lt;code&gt;const&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; 変数、および他のスクリプトからの &lt;code&gt;function&lt;/code&gt; と &lt;code&gt;class&lt;/code&gt; 宣言と名前の衝突を引き起こす可能性があります。これはESおよびCommonJSモジュールには適用されません。</target>
        </trans-unit>
        <trans-unit id="c427752105bd33ab8292fe22f39c248a208b872f" translate="yes" xml:space="preserve">
          <source>However, with appropriate new lines, it becomes easy to read and understand. Look at the same code written below with line breaks after each call.</source>
          <target state="translated">しかし、適切な改行をすることで、読みやすく、理解しやすくなります。以下の同じコードを、それぞれの呼び出しの後に改行して書いたものを見てください。</target>
        </trans-unit>
        <trans-unit id="ddc6b64c7c2b6bc0e7723c5590c9bcaba38b512d" translate="yes" xml:space="preserve">
          <source>However, you might not want to manually add &lt;code&gt;eslint-disable-next-line&lt;/code&gt; or &lt;code&gt;eslint-disable-line&lt;/code&gt;. You can achieve the effect of only receiving errors for console calls with the &lt;code&gt;no-restricted-syntax&lt;/code&gt; rule:</source>
          <target state="translated">ただし、 &lt;code&gt;eslint-disable-next-line&lt;/code&gt; または &lt;code&gt;eslint-disable-line&lt;/code&gt; を手動で追加したくない場合があります。 &lt;code&gt;no-restricted-syntax&lt;/code&gt; ルールを使用すると、コンソール呼び出しのエラーのみを受け取るという効果を得ることができます。</target>
        </trans-unit>
        <trans-unit id="84bf4d2e563fecd62c000173949d1bd469a0d041" translate="yes" xml:space="preserve">
          <source>I hope to deprecate &lt;code&gt;functionExpressionScope&lt;/code&gt; field as replacing by &lt;code&gt;scope.type === &quot;function-expression-name&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;functionExpressionScope&lt;/code&gt; フィールドを &lt;code&gt;scope.type === &quot;function-expression-name&quot;&lt;/code&gt; 置き換えて非推奨にしたいと思います。</target>
        </trans-unit>
        <trans-unit id="3a588183ac256de41f63b2fdfbfde1275ea31a40" translate="yes" xml:space="preserve">
          <source>I hope to deprecate &lt;code&gt;identifiers&lt;/code&gt; field as replacing by &lt;code&gt;defs[].name&lt;/code&gt; field.</source>
          <target state="translated">&lt;code&gt;identifiers&lt;/code&gt; フィールドを &lt;code&gt;defs[].name&lt;/code&gt; フィールドに置き換えることで廃止したいと思います。</target>
        </trans-unit>
        <trans-unit id="1c0d841662dae605665760989b60b4cb4244744f" translate="yes" xml:space="preserve">
          <source>I hope to rename &lt;code&gt;set&lt;/code&gt; field or replace by a method.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; フィールドの名前を変更するか、メソッドで置き換えたいと思います。</target>
        </trans-unit>
        <trans-unit id="7b889fd29b2848edc4e5927706ca2407a685ae99" translate="yes" xml:space="preserve">
          <source>IIFEs</source>
          <target state="translated">IIFEs</target>
        </trans-unit>
        <trans-unit id="1425a804470d990c0638321f27625d9932279335" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&quot;always&quot;&lt;/code&gt; then the &lt;code&gt;//&lt;/code&gt; or &lt;code&gt;/*&lt;/code&gt; must be followed by at least one whitespace.</source>
          <target state="translated">場合は &lt;code&gt;&quot;always&quot;&lt;/code&gt; そして、 &lt;code&gt;//&lt;/code&gt; または &lt;code&gt;/*&lt;/code&gt; 少なくとも一つの空白が続かなければなりません。</target>
        </trans-unit>
        <trans-unit id="94911ace78ebe05995938d04eaeb09f0e2b08447" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&quot;balanced&quot;: false&lt;/code&gt; then balanced whitespace is not enforced.</source>
          <target state="translated">&lt;code&gt;&quot;balanced&quot;: false&lt;/code&gt; 場合：falseの場合、バランスのとれた空白は強制されません。</target>
        </trans-unit>
        <trans-unit id="df6236bfac26b8bc9b50004728602cf54088348b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&quot;balanced&quot;: true&lt;/code&gt; and &lt;code&gt;&quot;always&quot;&lt;/code&gt; then the &lt;code&gt;/*&lt;/code&gt; must be followed by at least one whitespace, and the &lt;code&gt;*/&lt;/code&gt; must be preceded by at least one whitespace.</source>
          <target state="translated">もし &lt;code&gt;&quot;balanced&quot;: true&lt;/code&gt; と &lt;code&gt;&quot;always&quot;&lt;/code&gt; その後、 &lt;code&gt;/*&lt;/code&gt; 少なくとも一つの空白が続かなければなりませんし、 &lt;code&gt;*/&lt;/code&gt; 少なくとも一つの空白が先行しなければなりません。</target>
        </trans-unit>
        <trans-unit id="65b29e4c4508e7a3b1dcca425ea25f5d0a6019fe" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&quot;balanced&quot;: true&lt;/code&gt; and &lt;code&gt;&quot;never&quot;&lt;/code&gt; then there should be no whitespace following &lt;code&gt;/*&lt;/code&gt; or preceding &lt;code&gt;*/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;balanced&quot;: true&lt;/code&gt; 場合：trueで &lt;code&gt;&quot;never&quot;&lt;/code&gt; 場合、 &lt;code&gt;/*&lt;/code&gt; または &lt;code&gt;*/&lt;/code&gt; の前に空白はありません。</target>
        </trans-unit>
        <trans-unit id="a1bd5cf86f2f0cd115eb5d6412df3814063f3fe2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&quot;never&quot;&lt;/code&gt; then there should be no whitespace following.</source>
          <target state="translated">&lt;code&gt;&quot;never&quot;&lt;/code&gt; 場合、その後に続く空白はありません。</target>
        </trans-unit>
        <trans-unit id="af559ebac1d09db39ca603a5249c7f829d0aab9d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;.eslintrc.*&lt;/code&gt; and/or &lt;code&gt;package.json&lt;/code&gt; files are also used for configuration (i.e., &lt;code&gt;--no-eslintrc&lt;/code&gt; was not specified), the configurations will be merged. Options from this configuration file have precedence over the options from &lt;code&gt;.eslintrc.*&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt; files.</source>
          <target state="translated">場合 &lt;code&gt;.eslintrc.*&lt;/code&gt; および/または &lt;code&gt;package.json&lt;/code&gt; のファイルは設定にも使用されている（すなわち、 &lt;code&gt;--no-eslintrc&lt;/code&gt; が指定されていない）、構成がマージされます。この構成ファイルのオプションは、 &lt;code&gt;.eslintrc.*&lt;/code&gt; および &lt;code&gt;package.json&lt;/code&gt; ファイルのオプションよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="7a9f1ee9e49e65873a251fff85f77d43eab66dac" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;RuleTester.describe&lt;/code&gt; and &lt;code&gt;RuleTester.it&lt;/code&gt; have been set to function values, &lt;code&gt;RuleTester&lt;/code&gt; will use &lt;code&gt;RuleTester.describe&lt;/code&gt; and &lt;code&gt;RuleTester.it&lt;/code&gt; to run tests. You can use this to customize the behavior of &lt;code&gt;RuleTester&lt;/code&gt; to match a test framework that you're using.</source>
          <target state="translated">場合 &lt;code&gt;RuleTester.describe&lt;/code&gt; と &lt;code&gt;RuleTester.it&lt;/code&gt; は、関数の値に設定されている、 &lt;code&gt;RuleTester&lt;/code&gt; が使用されます &lt;code&gt;RuleTester.describe&lt;/code&gt; と &lt;code&gt;RuleTester.it&lt;/code&gt; のテストを実行します。これを使用して &lt;code&gt;RuleTester&lt;/code&gt; の動作をカスタマイズし、使用しているテストフレームワークに一致させることができます。</target>
        </trans-unit>
        <trans-unit id="ec01bb29e273ee321f9993370bc52ce9eab5a01b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;align&lt;/code&gt; is defined as an object, but not all of the parameters are provided, undefined parameters will default to the following:</source>
          <target state="translated">場合は &lt;code&gt;align&lt;/code&gt; オブジェクトとして定義されていますが、すべてのパラメータのが提供されていない、未定義のパラメータは、以下にデフォルト設定されます。</target>
        </trans-unit>
        <trans-unit id="7468df61e4cc7cbe78e75b5258128550f1d95105" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;eslint&lt;/code&gt; could find configuration files in the project, &lt;code&gt;eslint&lt;/code&gt; ignores &lt;code&gt;~/.eslintrc.*&lt;/code&gt; file even if it's in an ancestor directory of the project directory.</source>
          <target state="translated">&lt;code&gt;eslint&lt;/code&gt; がプロジェクトで構成ファイルを見つけることができた場合、プロジェクトディレクトリの祖先ディレクトリにある場合でも、 &lt;code&gt;eslint&lt;/code&gt; は &lt;code&gt;~/.eslintrc.*&lt;/code&gt; ファイルを無視します。</target>
        </trans-unit>
        <trans-unit id="c910d7177c7be80d23035d833053528e65fae9b5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;eslint&lt;/code&gt; could not find any configuration file in the project, &lt;code&gt;eslint&lt;/code&gt; loads &lt;code&gt;~/.eslintrc.*&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;eslint&lt;/code&gt; がプロジェクトで構成ファイルを見つけられなかった場合、 &lt;code&gt;eslint&lt;/code&gt; は &lt;code&gt;~/.eslintrc.*&lt;/code&gt; ファイルをロードします。</target>
        </trans-unit>
        <trans-unit id="f571fae99406f632111fb82aa898e2ca4b333877" translate="yes" xml:space="preserve">
          <source>If ESLint can't find a configuration, then it will throw an error and ask you to provide one.</source>
          <target state="translated">もしESLintが設定を見つけられない場合は、エラーが出て、設定を提供するように要求されます。</target>
        </trans-unit>
        <trans-unit id="6f1aa46516ae8fbeb1465af094f22ef03395bdcb" translate="yes" xml:space="preserve">
          <source>If ESLint parses code in strict mode, the parser (instead of this rule) reports the error.</source>
          <target state="translated">ESLint が strict モードでコードを解析した場合、(このルールの代わりに)パーサがエラーを報告します。</target>
        </trans-unit>
        <trans-unit id="36700c2c10655c29379465dfe1fd6e89caba46f9" translate="yes" xml:space="preserve">
          <source>If Statements</source>
          <target state="translated">ステートメントの場合</target>
        </trans-unit>
        <trans-unit id="28c62b22bf0008ec1a25ee68e5e4cab444e0ca67" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;catch&lt;/code&gt; clause in a &lt;code&gt;try&lt;/code&gt; statement accidentally (or purposely) assigns another value to the exception parameter, it impossible to refer to the error from that point on. Since there is no &lt;code&gt;arguments&lt;/code&gt; object to offer alternative access to this data, assignment of the parameter is absolutely destructive.</source>
          <target state="translated">場合は &lt;code&gt;catch&lt;/code&gt; で句 &lt;code&gt;try&lt;/code&gt; 文が誤って（または故意に）例外パラメータに別の値を代入し、それは不可能その時点からエラーを参照します。このデータへの代替アクセスを提供する &lt;code&gt;arguments&lt;/code&gt; オブジェクトがないため、パラメーターの割り当ては完全に破壊的です。</target>
        </trans-unit>
        <trans-unit id="ec2084855440431416b29d5a35071c33fe850853" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;switch&lt;/code&gt; doesn't have a &lt;code&gt;default&lt;/code&gt; case, then it should be indicated with a comment.</source>
          <target state="translated">場合は &lt;code&gt;switch&lt;/code&gt; ありません &lt;code&gt;default&lt;/code&gt; ケースを、それがコメントで示されなければなりません。</target>
        </trans-unit>
        <trans-unit id="68b79dad32e10651fe6aed17316501637283b2e3" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;switch&lt;/code&gt; statement has duplicate test expressions in &lt;code&gt;case&lt;/code&gt; clauses, it is likely that a programmer copied a &lt;code&gt;case&lt;/code&gt; clause but forgot to change the test expression.</source>
          <target state="translated">場合は &lt;code&gt;switch&lt;/code&gt; 文がで重複テスト式がある &lt;code&gt;case&lt;/code&gt; 句を、プログラマがコピーされている可能性がある &lt;code&gt;case&lt;/code&gt; 句をが、テスト式を変更するのを忘れていました。</target>
        </trans-unit>
        <trans-unit id="da3285cd66acdef654458171d8d844b63892f8e4" translate="yes" xml:space="preserve">
          <source>If a Promise executor function is using &lt;code&gt;await&lt;/code&gt;, this is usually a sign that it is not actually necessary to use the &lt;code&gt;new Promise&lt;/code&gt; constructor, or the scope of the &lt;code&gt;new Promise&lt;/code&gt; constructor can be reduced.</source>
          <target state="translated">プロミスexecutor機能を使用している場合 &lt;code&gt;await&lt;/code&gt; 、これは通常、実際に使用する必要がないこと徴候である &lt;code&gt;new Promise&lt;/code&gt; コンストラクタを、またはの範囲 &lt;code&gt;new Promise&lt;/code&gt; コンストラクタを低減することができます。</target>
        </trans-unit>
        <trans-unit id="2a8d6853f7a44d1ae90dbb34ebf7a13d629e57a6" translate="yes" xml:space="preserve">
          <source>If a class method does not use &lt;code&gt;this&lt;/code&gt;, it can &lt;em&gt;sometimes&lt;/em&gt; be made into a static function. If you do convert the method into a static function, instances of the class that call that particular method have to be converted to a static call as well (&lt;code&gt;MyClass.callStaticMethod()&lt;/code&gt;)</source>
          <target state="translated">クラスメソッドを使用していない場合は &lt;code&gt;this&lt;/code&gt; 、それができる&lt;em&gt;、時には&lt;/em&gt;静的関数にすること。メソッドを静的関数に変換する場合、その特定のメソッドを呼び出すクラスのインスタンスも静的呼び出しに変換する必要があります（ &lt;code&gt;MyClass.callStaticMethod()&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="f9adcd77d4fef720476018d5517c24d272a09b5e" translate="yes" xml:space="preserve">
          <source>If a custom message is specified with the &lt;code&gt;message&lt;/code&gt; property, ESLint will use that message when reporting occurrences of the syntax specified in the &lt;code&gt;selector&lt;/code&gt; property.</source>
          <target state="translated">カスタムメッセージが &lt;code&gt;message&lt;/code&gt; プロパティで指定されている場合、ESLintは、 &lt;code&gt;selector&lt;/code&gt; プロパティで指定された構文の発生を報告するときにそのメッセージを使用します。</target>
        </trans-unit>
        <trans-unit id="d79ab9e420559d08edcc7d09e6db99ddf957f261" translate="yes" xml:space="preserve">
          <source>If a directory is specified, a cache file will be created inside the specified folder. The name of the file will be based on the hash of the current working directory (CWD). e.g.: &lt;code&gt;.cache_hashOfCWD&lt;/code&gt;</source>
          <target state="translated">ディレクトリを指定すると、指定したフォルダ内にキャッシュファイルが作成されます。ファイルの名前は、現在の作業ディレクトリ（CWD）のハッシュに基づいています。例： &lt;code&gt;.cache_hashOfCWD&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="013f35aac0d5daf915b473bc276e6dac035af41c" translate="yes" xml:space="preserve">
          <source>If a filename in the optional second parameter matches a file that is configured to be ignored, then this function returns no errors or warnings. The method includes an additional optional boolean third parameter. When &lt;code&gt;true&lt;/code&gt;, a resolved file name that is ignored will return a warning.</source>
          <target state="translated">オプションの2番目のパラメーターのファイル名が無視されるように構成されているファイルと一致する場合、この関数はエラーや警告を返しません。このメソッドには、追加のオプションのブール3番目のパラメーターが含まれています。とき &lt;code&gt;true&lt;/code&gt; 、無視された解決のファイル名は警告を返します。</target>
        </trans-unit>
        <trans-unit id="d76f9a27f5a237607b9a23b2fbc50e0d167e5729" translate="yes" xml:space="preserve">
          <source>If a loop contains no nested loops or switches, labeling the loop is unnecessary.</source>
          <target state="translated">ループに入れ子になったループやスイッチが含まれていない場合、ループのラベル付けは不要です。</target>
        </trans-unit>
        <trans-unit id="ffa52261da0cd7a502d7bf4801fc10335e0f7e30" translate="yes" xml:space="preserve">
          <source>If a processor name starts with &lt;code&gt;.&lt;/code&gt;, ESLint handles the processor as a &lt;strong&gt;file extension-named processor&lt;/strong&gt; especially and applies the processor to the kind of files automatically. People don't need to specify the file extension-named processors in their config files.</source>
          <target state="translated">プロセッサ名がで始まる場合 &lt;code&gt;.&lt;/code&gt; 、ESLintは、特に&lt;strong&gt;ファイル拡張子の名前が付けられ&lt;/strong&gt;たプロセッサとしてプロセッサを処理し、プロセッサをファイルの種類に自動的に適用します。人々は彼らの設定ファイルでファイル拡張子名プロセッサを指定する必要はありません。</target>
        </trans-unit>
        <trans-unit id="e5fad7687981070af33a1b73460dae7788d4aabc" translate="yes" xml:space="preserve">
          <source>If a reference is inside of a binary expression or a ternary expression, this rule checks the result of the expression instead. If a reference is inside of a dynamic expression (e.g. &lt;code&gt;CallExpression&lt;/code&gt;, &lt;code&gt;YieldExpression&lt;/code&gt;, ...), this rule ignores it.</source>
          <target state="translated">参照がバイナリ式または3値式の内部にある場合、このルールは代わりに式の結果をチェックします。参照が動的式の内部にある場合（例： &lt;code&gt;CallExpression&lt;/code&gt; 、 &lt;code&gt;YieldExpression&lt;/code&gt; 、...）、このルールはそれを無視します。</target>
        </trans-unit>
        <trans-unit id="1e1270048dc46eb08c8bcfe13b7604338d3a96bc" translate="yes" xml:space="preserve">
          <source>If a rule has additional options, you can specify them using array literal syntax, such as:</source>
          <target state="translated">ルールに追加のオプションがある場合は、次のような配列リテラル構文を使用して指定できます。</target>
        </trans-unit>
        <trans-unit id="ed092715e7af9dc686e6a209cce5db829a9d7eae" translate="yes" xml:space="preserve">
          <source>If a string is provided as an error instead of an object, the string is used to assert the &lt;code&gt;message&lt;/code&gt; of the error.</source>
          <target state="translated">オブジェクトではなくエラーとして文字列が提供される場合、その文字列はエラーの &lt;code&gt;message&lt;/code&gt; をアサートするために使用されます。</target>
        </trans-unit>
        <trans-unit id="f9d78cfc776b15554fbf39fc84e184e687deb527" translate="yes" xml:space="preserve">
          <source>If a valid test case only uses the &lt;code&gt;code&lt;/code&gt; property, it can optionally be provided as a string containing the code, rather than an object with a &lt;code&gt;code&lt;/code&gt; key.</source>
          <target state="translated">有効なテストケースが &lt;code&gt;code&lt;/code&gt; プロパティのみを使用する場合、オプションで、 &lt;code&gt;code&lt;/code&gt; キーを持つオブジェクトではなく、コードを含む文字列として提供できます。</target>
        </trans-unit>
        <trans-unit id="ce06671cc1c5422162e0dbee1e02e62dbe4151bb" translate="yes" xml:space="preserve">
          <source>If a variable is initialized or assigned the value &lt;code&gt;this&lt;/code&gt;, the name of the variable &lt;em&gt;must&lt;/em&gt; be a designated alias.</source>
          <target state="translated">変数が初期化されるか、値 &lt;code&gt;this&lt;/code&gt; が割り当てられる場合、変数の名前は指定されたエイリアスで&lt;em&gt;なければなりません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="83ba7ea230d056612009b4845562832e2c193c78" translate="yes" xml:space="preserve">
          <source>If a variable is never reassigned, using the &lt;code&gt;const&lt;/code&gt; declaration is better.</source>
          <target state="translated">変数が再割り当てされない場合は、 &lt;code&gt;const&lt;/code&gt; 宣言を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="05279982445e35103bd42dc84f0c8fa4bc99dcf3" translate="yes" xml:space="preserve">
          <source>If a variable with a designated name is declared, it &lt;em&gt;must&lt;/em&gt; be either initialized (in the declaration) or assigned (in the same scope as the declaration) the value &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">指定された名前の変数が宣言されている場合、変数は初期化（宣言で）または値 &lt;code&gt;this&lt;/code&gt; に(宣言と同じスコープで）割り当てる&lt;em&gt;必要&lt;/em&gt;が&lt;em&gt;あり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4c391588a627bffc4f9b2fa0a7ad1a3f187fc0a5" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;.eslintignore&lt;/code&gt; file is not found and an alternate file is not specified, ESLint will look in package.json for an &lt;code&gt;eslintIgnore&lt;/code&gt; key to check for files to ignore.</source>
          <target state="translated">&lt;code&gt;.eslintignore&lt;/code&gt; ファイルが見つからず、代替ファイルが指定されていない場合、ESLintはpackage.jsonで &lt;code&gt;eslintIgnore&lt;/code&gt; キーを探し、無視するファイルを確認します。</target>
        </trans-unit>
        <trans-unit id="31e630605fbaa69cd7c9106660d700ae7cc8e034" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;if&lt;/code&gt; block contains a &lt;code&gt;return&lt;/code&gt; statement, the &lt;code&gt;else&lt;/code&gt; block becomes unnecessary. Its contents can be placed outside of the block.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; ブロックに &lt;code&gt;return&lt;/code&gt; ステートメントが含まれている場合、 &lt;code&gt;else&lt;/code&gt; ブロックは不要になります。その内容はブロックの外側に置くことができます。</target>
        </trans-unit>
        <trans-unit id="060bb33758f5003d2495b8e6017c8aabee9fd6f6" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;if&lt;/code&gt; statement is the only statement in the &lt;code&gt;else&lt;/code&gt; block, it is often clearer to use an &lt;code&gt;else if&lt;/code&gt; form.</source>
          <target state="translated">場合 &lt;code&gt;if&lt;/code&gt; 文が唯一の文です &lt;code&gt;else&lt;/code&gt; ブロックは、使用することがしばしば明確である &lt;code&gt;else if&lt;/code&gt; フォーム。</target>
        </trans-unit>
        <trans-unit id="108772879dc734697fb9e3f2633d5a6195dc2277" translate="yes" xml:space="preserve">
          <source>If an async executor function throws an error, the error will be lost and won't cause the newly-constructed &lt;code&gt;Promise&lt;/code&gt; to reject. This could make it difficult to debug and handle some errors.</source>
          <target state="translated">非同期実行関数がエラーをスローした場合、エラーは失われ、新しく構築された &lt;code&gt;Promise&lt;/code&gt; が拒否されません。これにより、一部のエラーのデバッグと処理が困難になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="731f187649e609b76cb19e1a10d708cfa4f42b24" translate="yes" xml:space="preserve">
          <source>If an integration has dependencies on ESLint and a set of plugins, and the tool invokes ESLint on behalf of the user with a preset configuration, the tool should set &lt;code&gt;--resolve-plugins-relative-to&lt;/code&gt; to the top-level directory of the tool.</source>
          <target state="translated">統合にESLintと一連のプラグインへの依存関係があり、ツールが事前設定された構成でユーザーに代わってESLintを呼び出す場合、ツールは &lt;code&gt;--resolve-plugins-relative-to&lt;/code&gt; をツールの最上位ディレクトリに設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="430cfbaad19dd61f95f6a025f052c0903d62611a" translate="yes" xml:space="preserve">
          <source>If an issue has already been claimed by someone, please be respectful of that person's desire to complete the work and don't work on it unless you verify that they are no longer interested.</source>
          <target state="translated">すでに誰かが主張している課題の場合は、その人がその作品を完成させたいという気持ちを尊重し、その人がもう興味を持っていないことを確認しない限り、その課題には取り組まないようにしてください。</target>
        </trans-unit>
        <trans-unit id="ff0ee57a0b710f6259eb08de6ae0349bb2ee8fc7" translate="yes" xml:space="preserve">
          <source>If another developer attempts to add &lt;code&gt;baz();&lt;/code&gt; to the &lt;code&gt;if&lt;/code&gt; statement, they might mistakenly change the code to</source>
          <target state="translated">別の開発者が &lt;code&gt;baz();&lt;/code&gt; を追加しようとした場合。 &lt;code&gt;if&lt;/code&gt; 声明、彼らは誤ってにコードを変更する場合があります</target>
        </trans-unit>
        <trans-unit id="d490c46886da3eef22da5146c1cd9f085497227a" translate="yes" xml:space="preserve">
          <source>If any code paths in a function return a value explicitly but some code path do not return a value explicitly, it might be a typing mistake, especially in a large function. In the following example:</source>
          <target state="translated">関数内のコードパスが明示的に値を返し、一部のコードパスが明示的に値を返さない場合、特に大規模な関数ではタイプミスになる可能性があります。以下の例では</target>
        </trans-unit>
        <trans-unit id="c724ecc343a6b714b13c8432f177e2988958c487" translate="yes" xml:space="preserve">
          <source>If comments are inconsistent because they are not updated when function definitions are modified, then readers might become confused.</source>
          <target state="translated">関数の定義が変更されたときにコメントが更新されないために矛盾していると、読者が混乱してしまう可能性があります。</target>
        </trans-unit>
        <trans-unit id="98fcb5379ef45039a8d0d4e959eef97582a2d85a" translate="yes" xml:space="preserve">
          <source>If comments are invalid because of typing mistakes, then documentation will be incomplete.</source>
          <target state="translated">タイプミスでコメントが無効になってしまうと、ドキュメントが不完全なものになってしまいます。</target>
        </trans-unit>
        <trans-unit id="cbb41ffface398ef2232aa13a97c60ff349b62b2" translate="yes" xml:space="preserve">
          <source>If don't want to enforce consistent linebreaks inside function parentheses, do not turn on this rule.</source>
          <target state="translated">関数括弧内の一貫した改行を強制したくない場合は、このルールを有効にしないでください。</target>
        </trans-unit>
        <trans-unit id="e46b2ee896050d579bb14e7a488a09fdee949b37" translate="yes" xml:space="preserve">
          <source>If explicit declaration of global variables is not to your taste.</source>
          <target state="translated">グローバル変数の明示的な宣言がお好みでない場合。</target>
        </trans-unit>
        <trans-unit id="8f73860fe183fb4ea93cd5ae590599a3b93a4551" translate="yes" xml:space="preserve">
          <source>If it is &lt;code&gt;&quot;always&quot;&lt;/code&gt;, then the literal value must always come first.</source>
          <target state="translated">それがある場合は &lt;code&gt;&quot;always&quot;&lt;/code&gt; 、そしてリテラル値は、常に最初に来なければなりません。</target>
        </trans-unit>
        <trans-unit id="9a5cddf7639a3dd0ad1b5edfefda8e16074b2b70" translate="yes" xml:space="preserve">
          <source>If it is &lt;code&gt;&quot;object&quot;&lt;/code&gt; (default), the dot in a member expression should be on the same line as the object portion.</source>
          <target state="translated">もしそうであれば &lt;code&gt;&quot;object&quot;&lt;/code&gt; （デフォルト）、メンバー発現のドットは、対象部分と同じ行にあるべきです。</target>
        </trans-unit>
        <trans-unit id="03af9596ea8057aa7372bb310711b2afc56fd99c" translate="yes" xml:space="preserve">
          <source>If it is &lt;code&gt;&quot;property&quot;&lt;/code&gt;, the dot in a member expression should be on the same line as the property portion.</source>
          <target state="translated">&lt;code&gt;&quot;property&quot;&lt;/code&gt; 場合、メンバー式のドットはプロパティ部分と同じ行にある必要があります。</target>
        </trans-unit>
        <trans-unit id="bbd5ac5250ad5ecc9dc78acbb61a5f71c2252cd3" translate="yes" xml:space="preserve">
          <source>If it is the default &lt;code&gt;&quot;never&quot;&lt;/code&gt;, then comparisons must never be Yoda conditions.</source>
          <target state="translated">デフォルトの &lt;code&gt;&quot;never&quot;&lt;/code&gt; の場合、比較はヨーダ条件であってはなりません。</target>
        </trans-unit>
        <trans-unit id="bc9f5a48306289fb13de2cacc02542cd88ed1536" translate="yes" xml:space="preserve">
          <source>If more than one parameter has the same name in a function definition, the last occurrence &quot;shadows&quot; the preceding occurrences. A duplicated name might be a typing error.</source>
          <target state="translated">関数定義で複数のパラメータが同じ名前を持つ場合、最後に出現したパラメータがそれ以前のパラメータに &quot;影を落とす &quot;ようになります。名前が重複している場合は、入力ミスの可能性があります。</target>
        </trans-unit>
        <trans-unit id="26b2099ade2be35a89641a96b838792d35446840" translate="yes" xml:space="preserve">
          <source>If multiple selectors have equal specificity, their listeners will be called in alphabetical order for that node.</source>
          <target state="translated">複数のセレクタが同等の特異性を持つ場合、そのセレクタのリスナーは、そのノードのアルファベット順に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="cb4224d9d3359902074aad85bbe517c47fc6fe85" translate="yes" xml:space="preserve">
          <source>If one of those occurs in an innocent-looking statement such as &lt;code&gt;a == b&lt;/code&gt; the actual problem is very difficult to spot.</source>
          <target state="translated">それらの1つが &lt;code&gt;a == b&lt;/code&gt; などの無害に見えるステートメントで発生する場合、実際の問題を見つけるのは非常に困難です。</target>
        </trans-unit>
        <trans-unit id="71c77efc2dce3b6c849c7d1edf87a9fd15fcf2ac" translate="yes" xml:space="preserve">
          <source>If re-exporting from an imported module, you should add the imports to the &lt;code&gt;import&lt;/code&gt;-statement, and export that directly, not use &lt;code&gt;export ... from&lt;/code&gt;.</source>
          <target state="translated">インポートされたモジュールから再エクスポートする場合は、 &lt;code&gt;import&lt;/code&gt; -statementに追加し、それを直接エクスポートする必要があります。export &lt;code&gt;export ... from&lt;/code&gt; 使用しないでください。</target>
        </trans-unit>
        <trans-unit id="0eb3e53516bf8f022c5a2446e35a316afcbffebd" translate="yes" xml:space="preserve">
          <source>If that sounds like you, then continue reading to get started.</source>
          <target state="translated">もしそれがあなたのように聞こえるのであれば、開始するために読み続けてください。</target>
        </trans-unit>
        <trans-unit id="2d461afe2572662db02026a93f2f9778445ac9b5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&quot;always&quot;&lt;/code&gt; option is used, this rule requires that files always begin with the Unicode BOM character U+FEFF. If &lt;code&gt;&quot;never&quot;&lt;/code&gt; is used, files must never begin with U+FEFF.</source>
          <target state="translated">場合は &lt;code&gt;&quot;always&quot;&lt;/code&gt; オプションが使用されている、この規則は、ファイルは常にUnicode BOM文字U + FEFFで始まることが必要です。 &lt;code&gt;&quot;never&quot;&lt;/code&gt; を使用する場合、ファイルはU + FEFFで始めてはなりません。</target>
        </trans-unit>
        <trans-unit id="a004223cf87eacec3bf8edcbe4617e861ea2175b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&quot;exceptRange&quot;&lt;/code&gt; property is &lt;code&gt;true&lt;/code&gt;, the rule &lt;em&gt;allows&lt;/em&gt; yoda conditions in range comparisons which are wrapped directly in parentheses, including the parentheses of an &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt; condition. The default value is &lt;code&gt;false&lt;/code&gt;. A &lt;em&gt;range&lt;/em&gt; comparison tests whether a variable is inside or outside the range between two literal values.</source>
          <target state="translated">場合 &lt;code&gt;&quot;exceptRange&quot;&lt;/code&gt; プロパティが &lt;code&gt;true&lt;/code&gt; 、ルールは、&lt;em&gt;可能&lt;/em&gt;の括弧を含む括弧内に直接包まれる範囲の比較でヨーダ条件 &lt;code&gt;if&lt;/code&gt; 、または &lt;code&gt;while&lt;/code&gt; の条件を。デフォルト値は &lt;code&gt;false&lt;/code&gt; です。&lt;em&gt;範囲&lt;/em&gt;比較試験変数は、内部又は二リテラル値の範囲外であるかどうか。</target>
        </trans-unit>
        <trans-unit id="80ccea46ead798cf9822ef53909d165d6457d6b8" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&quot;onlyEquality&quot;&lt;/code&gt; property is &lt;code&gt;true&lt;/code&gt;, the rule reports yoda conditions &lt;em&gt;only&lt;/em&gt; for the equality operators &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;===&lt;/code&gt;. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;&quot;onlyEquality&quot;&lt;/code&gt; プロパティがある &lt;code&gt;true&lt;/code&gt; 、ルールレポートヨーダ条件&lt;em&gt;のみ&lt;/em&gt;等価演算子のために &lt;code&gt;==&lt;/code&gt; と &lt;code&gt;===&lt;/code&gt; 。デフォルト値は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="861981c1e841a3a76ef0b71345e0aaaf9b6bfd8b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ignoreConsecutiveComments&lt;/code&gt; option is set to &lt;code&gt;true&lt;/code&gt;, then comments which otherwise violate the rule will not be reported as long as they immediately follow another comment. This can be applied more than once.</source>
          <target state="translated">場合 &lt;code&gt;ignoreConsecutiveComments&lt;/code&gt; のオプションがに設定されている &lt;code&gt;true&lt;/code&gt; 、そしてそれ以外のルールに違反するコメントがあれば、すぐに別のコメントをたどるようとして報告されることはありません。これは複数回適用できます。</target>
        </trans-unit>
        <trans-unit id="bffdbe44f305944bc7109716f9cf52ec0cf80daa" translate="yes" xml:space="preserve">
          <source>If the arrow function is intentional, it should be wrapped in parens to remove ambiguity.</source>
          <target state="translated">矢印関数が意図的なものである場合は、曖昧さを取り除くためにパーレンで包む必要があります。</target>
        </trans-unit>
        <trans-unit id="55317abcd7e2aa335fbbbc7490e278d824a2e6b4" translate="yes" xml:space="preserve">
          <source>If the class/attribute/pseudo-class count is tied, the selector that contains more node type selectors has higher specificity.</source>
          <target state="translated">クラス/属性/疑似クラス数が紐付けられている場合、より多くのノード型セレクタを含むセレクタの方がより高い特異性を持ちます。</target>
        </trans-unit>
        <trans-unit id="286888e55b37d67f478b26da19d04cf8b3fa7cba" translate="yes" xml:space="preserve">
          <source>If the configured name of the error variable begins with a &lt;code&gt;^&lt;/code&gt; it is considered to be a regexp pattern.</source>
          <target state="translated">エラー変数の設定された名前が &lt;code&gt;^&lt;/code&gt; で始まる場合、それは正規表現パターンと見なされます。</target>
        </trans-unit>
        <trans-unit id="c8424c3fa05ae2557114fbb7afae75511fc54e4f" translate="yes" xml:space="preserve">
          <source>If the example plugin above were called &lt;code&gt;eslint-plugin-myPlugin&lt;/code&gt;, the &lt;code&gt;myConfig&lt;/code&gt; and &lt;code&gt;myOtherConfig&lt;/code&gt; configurations would then be usable by extending off of &lt;code&gt;&quot;plugin:myPlugin/myConfig&quot;&lt;/code&gt; and &lt;code&gt;&quot;plugin:myPlugin/myOtherConfig&quot;&lt;/code&gt;, respectively.</source>
          <target state="translated">上記のプラグインの例では、呼び出された場合 &lt;code&gt;eslint-plugin-myPlugin&lt;/code&gt; 、 &lt;code&gt;myConfig&lt;/code&gt; と &lt;code&gt;myOtherConfig&lt;/code&gt; 構成はその後のはみ出しによって使用可能であろう &lt;code&gt;&quot;plugin:myPlugin/myConfig&quot;&lt;/code&gt; 及び &lt;code&gt;&quot;plugin:myPlugin/myOtherConfig&quot;&lt;/code&gt; をそれぞれ、。</target>
        </trans-unit>
        <trans-unit id="6755e05b62b74cc3c5aaf2f93b2be523dafe3b38" translate="yes" xml:space="preserve">
          <source>If the expression sequence is explicitly wrapped in parentheses.</source>
          <target state="translated">式のシーケンスが明示的に括弧で括られている場合。</target>
        </trans-unit>
        <trans-unit id="4979b6e8f108fec6d6947fcf358fcb9a4ebe8f29" translate="yes" xml:space="preserve">
          <source>If the node is a &lt;code&gt;CatchClause&lt;/code&gt;, the variable for the exception is returned.</source>
          <target state="translated">ノードが &lt;code&gt;CatchClause&lt;/code&gt; の場合、例外の変数が返されます。</target>
        </trans-unit>
        <trans-unit id="0bedf0818cdf99f778f0aba476971b9012249054" translate="yes" xml:space="preserve">
          <source>If the node is a &lt;code&gt;ClassDeclaration&lt;/code&gt; or a &lt;code&gt;ClassExpression&lt;/code&gt;, the variable for the class name is returned.</source>
          <target state="translated">ノードがある場合 &lt;code&gt;ClassDeclaration&lt;/code&gt; または &lt;code&gt;ClassExpression&lt;/code&gt; 、クラス名の変数が返されます。</target>
        </trans-unit>
        <trans-unit id="bb5dcd249f6b5101ffc512ce04d850df7301f340" translate="yes" xml:space="preserve">
          <source>If the node is a &lt;code&gt;FunctionDeclaration&lt;/code&gt; or &lt;code&gt;FunctionExpression&lt;/code&gt;, the variable for the function name is returned, in addition to variables for the function parameters.</source>
          <target state="translated">ノードが &lt;code&gt;FunctionDeclaration&lt;/code&gt; または &lt;code&gt;FunctionExpression&lt;/code&gt; の場合、関数パラメーターの変数に加えて、関数名の変数が返されます。</target>
        </trans-unit>
        <trans-unit id="0239c6eab481baf7e5cd73e1d8be32515edd4e81" translate="yes" xml:space="preserve">
          <source>If the node is a &lt;code&gt;VariableDeclaration&lt;/code&gt;, all variables declared in the declaration are returned.</source>
          <target state="translated">ノードが &lt;code&gt;VariableDeclaration&lt;/code&gt; の場合、宣言で宣言されたすべての変数が返されます。</target>
        </trans-unit>
        <trans-unit id="61a88a7314032c642bfc5f80310b4c5fc44211ab" translate="yes" xml:space="preserve">
          <source>If the node is a &lt;code&gt;VariableDeclarator&lt;/code&gt;, all variables declared in the declarator are returned.</source>
          <target state="translated">ノードが &lt;code&gt;VariableDeclarator&lt;/code&gt; の場合、宣言子で宣言されたすべての変数が返されます。</target>
        </trans-unit>
        <trans-unit id="a53e1a5bf877ea2bcfd787625d054a10533b30c2" translate="yes" xml:space="preserve">
          <source>If the node is an &lt;code&gt;ArrowFunctionExpression&lt;/code&gt;, variables for the parameters are returned.</source>
          <target state="translated">ノードが &lt;code&gt;ArrowFunctionExpression&lt;/code&gt; の場合、パラメーターの変数が返されます。</target>
        </trans-unit>
        <trans-unit id="9f838ab4ac526271081c23b394b697a09e426e0d" translate="yes" xml:space="preserve">
          <source>If the node is an &lt;code&gt;ImportDeclaration&lt;/code&gt;, variables for all of its specifiers are returned.</source>
          <target state="translated">ノードが &lt;code&gt;ImportDeclaration&lt;/code&gt; の場合、そのすべての指定子の変数が返されます。</target>
        </trans-unit>
        <trans-unit id="e6c21b10c9edae6498937fd2f3d4185500c8f7f7" translate="yes" xml:space="preserve">
          <source>If the node is an &lt;code&gt;ImportSpecifier&lt;/code&gt;, &lt;code&gt;ImportDefaultSpecifier&lt;/code&gt;, or &lt;code&gt;ImportNamespaceSpecifier&lt;/code&gt;, the declared variable is returned.</source>
          <target state="translated">ノードが &lt;code&gt;ImportSpecifier&lt;/code&gt; 、 &lt;code&gt;ImportDefaultSpecifier&lt;/code&gt; 、または &lt;code&gt;ImportNamespaceSpecifier&lt;/code&gt; の場合、宣言された変数が返されます。</target>
        </trans-unit>
        <trans-unit id="77e6d0663a5dc9ddfb5ba721ad2cac984752b5a7" translate="yes" xml:space="preserve">
          <source>If the object name is omitted, the property is disallowed for all objects:</source>
          <target state="translated">オブジェクト名を省略した場合は、すべてのオブジェクトに対してこのプロパティは無効となります。</target>
        </trans-unit>
        <trans-unit id="3d87c6b6c0dd2f2805118449f8bde287740cd978" translate="yes" xml:space="preserve">
          <source>If the operation ends with a parsing error, you will get a single message for this file, with &lt;code&gt;fatal: true&lt;/code&gt; added as an extra property.</source>
          <target state="translated">操作が解析エラーで終了した場合、このファイルに対して単一のメッセージが表示され、 &lt;code&gt;fatal: true&lt;/code&gt; 追加のプロパティとして追加されます。</target>
        </trans-unit>
        <trans-unit id="7fe396c3c6bb93306ee96c0f7cebd18cb04f122d" translate="yes" xml:space="preserve">
          <source>If the option is &lt;code&gt;&quot;^(err|error|anySpecificError)$&quot;&lt;/code&gt;, the rule reports unhandled errors where the parameter name can be &lt;code&gt;err&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt; or &lt;code&gt;anySpecificError&lt;/code&gt;.</source>
          <target state="translated">オプションが &lt;code&gt;&quot;^(err|error|anySpecificError)$&quot;&lt;/code&gt; 場合、ルールは未処理のエラーを報告し、パラメーター名は &lt;code&gt;err&lt;/code&gt; 、 &lt;code&gt;error&lt;/code&gt; または &lt;code&gt;anySpecificError&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="eb07ab30e4a55a6eddf8ef9a05a2f85cf2a6aee9" translate="yes" xml:space="preserve">
          <source>If the option is &lt;code&gt;&quot;^.*(e|E)rr&quot;&lt;/code&gt;, the rule reports unhandled errors where the parameter name matches any string that contains &lt;code&gt;err&lt;/code&gt; or &lt;code&gt;Err&lt;/code&gt; (for example, &lt;code&gt;err&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;anyError&lt;/code&gt;, &lt;code&gt;some_err&lt;/code&gt; will match).</source>
          <target state="translated">オプションが &lt;code&gt;&quot;^.*(e|E)rr&quot;&lt;/code&gt; 場合、ルールは、パラメーター名が &lt;code&gt;err&lt;/code&gt; または &lt;code&gt;Err&lt;/code&gt; を含む任意の文字列と一致する未処理エラーを報告します（たとえば、 &lt;code&gt;err&lt;/code&gt; 、 &lt;code&gt;error&lt;/code&gt; 、 &lt;code&gt;anyError&lt;/code&gt; 、 &lt;code&gt;some_err&lt;/code&gt; が一致します）。</target>
        </trans-unit>
        <trans-unit id="93cc7488fa78f99eb5cf4d9c302285ca9b4f9441" translate="yes" xml:space="preserve">
          <source>If the option is &lt;code&gt;&quot;^.+Error$&quot;&lt;/code&gt;, the rule reports unhandled errors where the parameter name ends with &lt;code&gt;Error&lt;/code&gt; (for example, &lt;code&gt;connectionError&lt;/code&gt; or &lt;code&gt;validationError&lt;/code&gt; will match).</source>
          <target state="translated">オプションが &lt;code&gt;&quot;^.+Error$&quot;&lt;/code&gt; 場合、ルールは、パラメーター名が &lt;code&gt;Error&lt;/code&gt; で終わる未処理のエラーを報告します（たとえば、 &lt;code&gt;connectionError&lt;/code&gt; または &lt;code&gt;validationError&lt;/code&gt; が一致します）。</target>
        </trans-unit>
        <trans-unit id="0e771886c3456f585fd28d2511e4e816e918a626" translate="yes" xml:space="preserve">
          <source>If the property name is omitted, accessing any property of the given object is disallowed:</source>
          <target state="translated">プロパティ名を省略した場合、与えられたオブジェクトのプロパティへのアクセスは禁止されます。</target>
        </trans-unit>
        <trans-unit id="936496d696830abf713f57ff4dffcd113c791136" translate="yes" xml:space="preserve">
          <source>If the rule is defined within a plugin, you have to prefix the rule ID with the plugin name and a &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="translated">ルールがプラグイン内で定義されている場合は、ルールIDの前にプラグイン名と &lt;code&gt;/&lt;/code&gt; を付ける必要があります。</target>
        </trans-unit>
        <trans-unit id="0d16d54aa0743d9f97198f4deb3a1dda76f546b0" translate="yes" xml:space="preserve">
          <source>If the third argument is a string, it is interpreted as the &lt;code&gt;filename&lt;/code&gt;.</source>
          <target state="translated">3番目の引数が文字列の場合、 &lt;code&gt;filename&lt;/code&gt; として解釈されます。</target>
        </trans-unit>
        <trans-unit id="0a70cbab282fd2c607dbd174889be8db4131e9e9" translate="yes" xml:space="preserve">
          <source>If the value is a function, it should wrap under the property name and should have a blank line both before and after the function.</source>
          <target state="translated">値が関数の場合は、プロパティ名の下に折り返し、関数の前後に空白行を入れます。</target>
        </trans-unit>
        <trans-unit id="b9e58d27ec1d6a8f2b83ea052b21d0675aebbb38" translate="yes" xml:space="preserve">
          <source>If the variable is intended to be local to the script, wrap the code with a block or with an immediately-invoked function expression (IIFE).</source>
          <target state="translated">変数がスクリプトのローカルなものであることを意図している場合は、コードをブロックまたは即時に呼び出された関数式(IIFE)でラップします。</target>
        </trans-unit>
        <trans-unit id="73767ddbd81d9dbe02ce6fed5e6251914cb03d71" translate="yes" xml:space="preserve">
          <source>If there are any failing tests, update your code until all tests pass.</source>
          <target state="translated">テストに失敗した場合は、すべてのテストに合格するまでコードを更新してください。</target>
        </trans-unit>
        <trans-unit id="4e39a9fb9ba324c2286fd879d0e7ba5569d5dacc" translate="yes" xml:space="preserve">
          <source>If there are declarations of the same name in class members, the last declaration overwrites other declarations silently. It can cause unexpected behaviors.</source>
          <target state="translated">クラスメンバ内に同名の宣言がある場合、最後の宣言が他の宣言を無言で上書きしてしまいます。これは予期せぬ動作を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="0c7f9187cd1de032df79c7af025cf136787d74ca" translate="yes" xml:space="preserve">
          <source>If there are multiple configuration files in the same directory, ESLint will only use one. The priority order is:</source>
          <target state="translated">同じディレクトリに複数の設定ファイルがある場合、ESLintは1つの設定ファイルのみを使用します。優先順位は</target>
        </trans-unit>
        <trans-unit id="8647b942abc0b85c8f1bf2d86a64b8b3d027f285" translate="yes" xml:space="preserve">
          <source>If there is an &lt;code&gt;.eslintrc&lt;/code&gt; and a &lt;code&gt;package.json&lt;/code&gt; file found in the same directory, &lt;code&gt;.eslintrc&lt;/code&gt; will take a priority and &lt;code&gt;package.json&lt;/code&gt; file will not be used.</source>
          <target state="translated">ある場合は &lt;code&gt;.eslintrc&lt;/code&gt; と &lt;code&gt;package.json&lt;/code&gt; の同じディレクトリにあるファイルは、 &lt;code&gt;.eslintrc&lt;/code&gt; が優先されますし、 &lt;code&gt;package.json&lt;/code&gt; のファイルは使用されません。</target>
        </trans-unit>
        <trans-unit id="df824358feaeb45f56e93593d0d239d836cdfe4c" translate="yes" xml:space="preserve">
          <source>If there is not &lt;code&gt;catch&lt;/code&gt; block, &lt;code&gt;finally&lt;/code&gt; block has two current segments. At this time, &lt;code&gt;CodePath.currentSegments.length&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;. One is the normal path, and another is the leaving path (&lt;code&gt;throw&lt;/code&gt; or &lt;code&gt;return&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; ブロックがない場合、 &lt;code&gt;finally&lt;/code&gt; ブロックには2つの現在のセグメントがあります。現時点では、 &lt;code&gt;CodePath.currentSegments.length&lt;/code&gt; は &lt;code&gt;2&lt;/code&gt; です。1つは通常のパスで、もう1つは退出するパス（ &lt;code&gt;throw&lt;/code&gt; または &lt;code&gt;return&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="1757e08f8b71310c2a4c59f6dc50ed8f567f5460" translate="yes" xml:space="preserve">
          <source>If this rule is invoked with the command-line &lt;code&gt;--fix&lt;/code&gt; option, object literals that violate the rule are generally modified to comply with it. The modification in each case is to move a property specification to the next line whenever there is part or all of a previous property specification on the same line. For example,</source>
          <target state="translated">このルールがコマンドラインの &lt;code&gt;--fix&lt;/code&gt; オプションで呼び出された場合、ルールに違反するオブジェクトリテラルは通常、ルールに準拠するように変更されます。それぞれの場合の変更は、同じ行に前のプロパティ仕様の一部またはすべてがある場合は常に、プロパティ仕様を次の行に移動することです。例えば、</target>
        </trans-unit>
        <trans-unit id="850d3ffd2fa1ce88bcaebffd3ad35b0697ab6bcb" translate="yes" xml:space="preserve">
          <source>If two or more selectors match the same node, their listeners will be called in order of increasing specificity. The specificity of an AST selector is similar to the specificity of a CSS selector:</source>
          <target state="translated">2つ以上のセレクタが同じノードにマッチした場合、そのセレクタのリスナーは特異度の高い順に呼び出されます。ASTセレクタの特異性はCSSセレクタの特異性に似ています。</target>
        </trans-unit>
        <trans-unit id="99630c41d6f205e5e12d2bda184454445047c226" translate="yes" xml:space="preserve">
          <source>If we ask you to make code changes, there's no need to close the pull request and create a new one. Just go back to the branch on your fork and make your changes. Then, when you're ready, you can add your changes into the branch:</source>
          <target state="translated">コードの変更をお願いする場合、プルリクエストを閉じて新しいものを作る必要はありません。あなたのフォークのブランチに戻って変更を加えてください。準備ができたら、変更内容をブランチに追加してください。</target>
        </trans-unit>
        <trans-unit id="de0e0d7c63f3124bf206c35deec0d0869a1131e5" translate="yes" xml:space="preserve">
          <source>If you already have some text to lint, then you can use the &lt;code&gt;executeOnText()&lt;/code&gt; method to lint that text. The linter will assume that the text is a file in the current working directory, and so will still obey any &lt;code&gt;.eslintrc&lt;/code&gt; and &lt;code&gt;.eslintignore&lt;/code&gt; files that may be present. Here's an example:</source>
          <target state="translated">lintするテキストがすでにある場合は、 &lt;code&gt;executeOnText()&lt;/code&gt; メソッドを使用してそのテキストをlintできます。リンターは、テキストが現在の作業ディレクトリ内のファイルであると想定し、存在する &lt;code&gt;.eslintrc&lt;/code&gt; および &lt;code&gt;.eslintignore&lt;/code&gt; ファイルに引き続き従います。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="1fbb74a49f2eaba94e280fd44611bcca515833b5" translate="yes" xml:space="preserve">
          <source>If you are not concerned about unnecessary calls to &lt;code&gt;bind()&lt;/code&gt;, you can safely disable this rule.</source>
          <target state="translated">&lt;code&gt;bind()&lt;/code&gt; への不要な呼び出しを心配しない場合は、このルールを安全に無効にできます。</target>
        </trans-unit>
        <trans-unit id="e8ddab54be7073b7379d9641b3883acaaac2a010" translate="yes" xml:space="preserve">
          <source>If you are targeting ECMAScript 2017 and/or older environments, you can disable this rule, because this ECMAScript feature is only supported in ECMAScript 2018 and/or newer environments.</source>
          <target state="translated">ECMAScript 2017および/またはそれ以前の環境をターゲットにしている場合、このECMAScript機能はECMAScript 2018および/またはそれより新しい環境でのみサポートされているため、このルールを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="5e889a6e2c510adf6f330ae77fbde14de46dd853" translate="yes" xml:space="preserve">
          <source>If you are throwing an error inside of an asynchronous function for this purpose, then you may want to disable this rule.</source>
          <target state="translated">この目的のために非同期関数の内部でエラーを投げている場合は、このルールを無効にした方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="0727bfa2099c5dff84bb32defc46aff16b4cd440" translate="yes" xml:space="preserve">
          <source>If you are trying to override one of the native objects.</source>
          <target state="translated">ネイティブオブジェクトのいずれかをオーバーライドしようとしている場合。</target>
        </trans-unit>
        <trans-unit id="b2612b9f29d0ec472086dc1da9d121df79cb8ca9" translate="yes" xml:space="preserve">
          <source>If you are unable to push because some references are old, do a forced push instead:</source>
          <target state="translated">いくつかのリファレンスが古いためにプッシュできない場合は、代わりに強制的にプッシュしてください。</target>
        </trans-unit>
        <trans-unit id="0b370077857ae1599795ffaa3d65cdbadb983377" translate="yes" xml:space="preserve">
          <source>If you are using &lt;code&gt;process.exit()&lt;/code&gt; only for specifying the exit code, you can set &lt;a href=&quot;https://nodejs.org/api/process.html#process_process_exitcode&quot;&gt;&lt;code&gt;process.exitCode&lt;/code&gt;&lt;/a&gt; (introduced in Node.js 0.11.8) instead.</source>
          <target state="translated">終了コードの指定のみに &lt;code&gt;process.exit()&lt;/code&gt; を使用している場合は、代わりに&lt;a href=&quot;https://nodejs.org/api/process.html#process_process_exitcode&quot;&gt; &lt;code&gt;process.exitCode&lt;/code&gt; &lt;/a&gt;（Node.js 0.11.8で導入）を設定できます。</target>
        </trans-unit>
        <trans-unit id="794c9e1eab3bee427778ec5f6492eee54355c471" translate="yes" xml:space="preserve">
          <source>If you are using a custom implementation of &lt;code&gt;require&lt;/code&gt; and your code will never be used in projects where a standard &lt;code&gt;require&lt;/code&gt; (CommonJS, Node.js, AMD) is expected, you can safely turn this rule off.</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; のカスタム実装を使用していて、標準の &lt;code&gt;require&lt;/code&gt; （CommonJS、Node.js、AMD）が予想されるプロジェクトでコードが使用されない場合は、このルールを安全にオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="a095c50390bcd7a4a098485b2044aec9520f886d" translate="yes" xml:space="preserve">
          <source>If you are using an ECMAScript 3 JavaScript engine (such as IE8) and you want to use a keyword (such as &lt;code&gt;if&lt;/code&gt;) as a property name. This restriction was removed in ECMAScript 5.</source>
          <target state="translated">ECMAScript 3 JavaScriptエンジン（IE8など）を使用していて、キーワード（ &lt;code&gt;if&lt;/code&gt; など）をプロパティ名として使用する場合。この制限はECMAScript 5で削除されました。</target>
        </trans-unit>
        <trans-unit id="e79b6d39ed61231d71b33b4d264895e5f11a3a24" translate="yes" xml:space="preserve">
          <source>If you are using one configuration file and want ESLint to ignore any &lt;code&gt;.eslintrc.*&lt;/code&gt; files, make sure to use &lt;code&gt;--no-eslintrc&lt;/code&gt; along with the &lt;code&gt;-c&lt;/code&gt; flag.</source>
          <target state="translated">1つの構成ファイルを使用していて、 &lt;code&gt;.eslintrc.*&lt;/code&gt; ファイルを無視するようにする場合は、必ず &lt;code&gt;--no-eslintrc&lt;/code&gt; を &lt;code&gt;-c&lt;/code&gt; フラグと共に使用してください。</target>
        </trans-unit>
        <trans-unit id="dc0228170d5897f66f6c2892c04523f20899b905" translate="yes" xml:space="preserve">
          <source>If you are working with ES6 modules:</source>
          <target state="translated">ES6モジュールで作業している場合。</target>
        </trans-unit>
        <trans-unit id="7fd01c75198649e058b17377a36d78a054ffe274" translate="yes" xml:space="preserve">
          <source>If you aren't concerned about having different line comment styles, then you can turn off this rule.</source>
          <target state="translated">行コメントのスタイルが異なることを気にしないのであれば、このルールをオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="b93d0dcfda167424e32f450a26f03cf14dedb911" translate="yes" xml:space="preserve">
          <source>If you aren't concerned about having different line endings within your code, then you can safely turn this rule off.</source>
          <target state="translated">コード内で異なる行末があることを気にしないのであれば、このルールをオフにしても問題ありません。</target>
        </trans-unit>
        <trans-unit id="ca485d61ff911bfd152fcdab49dac4ba14922646" translate="yes" xml:space="preserve">
          <source>If you aren't concerned about misinterpreting floating decimal point values, then you can safely turn this rule off.</source>
          <target state="translated">浮動小数点の値の解釈を誤ることを気にしないのであれば、このルールをオフにしても問題ありません。</target>
        </trans-unit>
        <trans-unit id="90285ec365861710d4fa6c81c812503ce64d8cd4" translate="yes" xml:space="preserve">
          <source>If you aren't going to use the default parser of ESLint, this section explains about using custom parsers.</source>
          <target state="translated">ESLintのデフォルトパーサを使わない場合は、カスタムパーサの使用について説明します。</target>
        </trans-unit>
        <trans-unit id="f36c167b80c0da8a28ee63a69b56b94547879c0c" translate="yes" xml:space="preserve">
          <source>If you aren't using JSDoc, then you can safely turn this rule off.</source>
          <target state="translated">JSDoc を使用していない場合は、このルールをオフにしても問題ありません。</target>
        </trans-unit>
        <trans-unit id="6f3b62d423b673891d6d79bb7f1574b983499ef7" translate="yes" xml:space="preserve">
          <source>If you can't determine an appropriate complexity limit for your code, then it's best to disable this rule.</source>
          <target state="translated">コードに適切な複雑さの制限を決められない場合は、このルールを無効にした方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="48d343ff8f2275b0ea325fc0a64c31bd1fb7cd98" translate="yes" xml:space="preserve">
          <source>If you configure ESLint to automatically enable new rules when you upgrade, ESLint can report new problems when there are no changes to source code, therefore any newer minor version of ESLint can behave as if it has breaking changes.</source>
          <target state="translated">アップグレード時に自動的に新しいルールを有効にするようにESLintを設定すると、ESLintはソースコードに変更がないときに新しい問題を報告することができるので、新しいマイナーバージョンのESLintでも、あたかも変更があったかのように振る舞うことができます。</target>
        </trans-unit>
        <trans-unit id="404fcfa2ef5c1f362f2be3f12cef0103e708a9b8" translate="yes" xml:space="preserve">
          <source>If you decide that you wish to use whitespace other than tabs and spaces outside of strings in your application.</source>
          <target state="translated">アプリケーションで文字列以外のタブやスペース以外のホワイトスペースを使用したいと判断した場合。</target>
        </trans-unit>
        <trans-unit id="e2f36f9a48b18ab417c90448e3760f46ecb246c5" translate="yes" xml:space="preserve">
          <source>If you depend on fall through behavior and want access to bindings introduced in the case block.</source>
          <target state="translated">フォールスルー動作に依存していて、ケースブロックで導入されたバインディングにアクセスしたい場合。</target>
        </trans-unit>
        <trans-unit id="7a38e6f565ac0f063fab2adb4a1dcf52e65781dc" translate="yes" xml:space="preserve">
          <source>If you do not care about extra blank lines, turn this off.</source>
          <target state="translated">余分な空白行を気にしない場合は、これをオフにしてください。</target>
        </trans-unit>
        <trans-unit id="7bfcf2e27f8485a989b5dfd1cc941c1c7279f4bf" translate="yes" xml:space="preserve">
          <source>If you do not need consistency in your string styles, you can safely disable this rule.</source>
          <target state="translated">文字列スタイルの一貫性を必要としない場合は、このルールを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="392f8a1f4fba093842c4607835e8cfd25a31c650" translate="yes" xml:space="preserve">
          <source>If you do not need to support IE 8 and earlier, you should turn this rule off.</source>
          <target state="translated">IE 8以前に対応する必要がない場合は、このルールをオフにしておきましょう。</target>
        </trans-unit>
        <trans-unit id="9d547b86ad688b98a0c6659d848158e9b5dabb04" translate="yes" xml:space="preserve">
          <source>If you do not require JSDoc for your functions, then you can leave this rule off.</source>
          <target state="translated">関数にJSDocを必要としない場合は、このルールを外しても構いません。</target>
        </trans-unit>
        <trans-unit id="c9d550da8d530ae5bf38a38f34d4a343d1cbae42" translate="yes" xml:space="preserve">
          <source>If you do not want ignored file warnings output to the console, you can omit the third argument or pass &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">無視されたファイル警告をコンソールに出力したくない場合は、3番目の引数を省略するか、 &lt;code&gt;false&lt;/code&gt; を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="2628614f8cc596f13fac5b621f18df2aeb5bc2ff" translate="yes" xml:space="preserve">
          <source>If you do not want to enforce semicolon usage (or omission) in any particular way, then you can turn this rule off.</source>
          <target state="translated">セミコロンの使用(または省略)を特定の方法で強制したくない場合は、このルールをオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="1e0473345a5bb57f1c01e60cdf29fe464c00a72c" translate="yes" xml:space="preserve">
          <source>If you do not wish to enforce consistency on keyword spacing.</source>
          <target state="translated">キーワードの間隔に一貫性を持たせたくない場合。</target>
        </trans-unit>
        <trans-unit id="ec438abebebab23efa3997bca0496ca41fc86dd6" translate="yes" xml:space="preserve">
          <source>If you don't care about disallowing redundant return statements, you can turn off this rule.</source>
          <target state="translated">冗長な戻り文の不許可を気にしないのであれば、このルールをオフにしても良いでしょう。</target>
        </trans-unit>
        <trans-unit id="377445f5eeba500665b9afe31fabf0a6ca7e60ea" translate="yes" xml:space="preserve">
          <source>If you don't care if property names are consistently wrapped in quotes or not, and you don't target legacy ES3 environments, turn this rule off.</source>
          <target state="translated">プロパティ名が一貫して引用符で囲まれているかどうかを気にせず、レガシーなES3環境をターゲットにしない場合は、このルールをオフにしてください。</target>
        </trans-unit>
        <trans-unit id="fbb1b5f010231afcab8c832ef9f8d843a9047947" translate="yes" xml:space="preserve">
          <source>If you don't have any object/property combinations to restrict, you should not use this rule.</source>
          <target state="translated">制限するオブジェクト/プロパティの組み合わせがない場合は、このルールを使用すべきではありません。</target>
        </trans-unit>
        <trans-unit id="c5f3d9d25eecc50921d17e2d250b565540102e1d" translate="yes" xml:space="preserve">
          <source>If you don't use Node.js, or you still need to support versions of Node.js that lack methods like &lt;code&gt;Buffer.from&lt;/code&gt;, then you should not enable this rule.</source>
          <target state="translated">Node.jsを使用しない場合、または &lt;code&gt;Buffer.from&lt;/code&gt; などのメソッドがないNode.jsのバージョンをサポートする必要がある場合は、このルールを有効にしないでください。</target>
        </trans-unit>
        <trans-unit id="28fe184ed022eb7ed86a6fdb953113737c1230b4" translate="yes" xml:space="preserve">
          <source>If you don't use async or generator functions, you don't need to enable this rule.</source>
          <target state="translated">非同期関数やジェネレーター関数を使用しない場合は、このルールを有効にする必要はありません。</target>
        </trans-unit>
        <trans-unit id="8e8976ae986f3df4acec0327270b71cfedc18f22" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about empty functions, then it's safe to disable this rule.</source>
          <target state="translated">空の関数の通知を受けたくないのであれば、このルールを無効にしておくのが無難です。</target>
        </trans-unit>
        <trans-unit id="035b02b7f62b6cf56e490c776d78cfc18884a2f6" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about invalid/missing &lt;code&gt;super()&lt;/code&gt; callings in constructors, you can safely disable this rule.</source>
          <target state="translated">コンストラクターでの &lt;code&gt;super()&lt;/code&gt; 呼び出しの無効/欠落について通知を受けたくない場合は、このルールを安全に無効にできます。</target>
        </trans-unit>
        <trans-unit id="3cdcf809d4b2ba636118edcb3c72c778c76b8ef9" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about mixed operators, then it's safe to disable this rule.</source>
          <target state="translated">混合演算子の通知を受けたくないのであれば、このルールを無効にしておくのが無難です。</target>
        </trans-unit>
        <trans-unit id="b34060b6575a25206fbe68c5a7727598b25882e3" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about modifying imported bindings, you can disable this rule.</source>
          <target state="translated">インポートされたバインディングの変更について通知を受けたくない場合は、このルールを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="05cd0829efd0f529155675a47415f71b807b23e6" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about modifying variables of class declarations, you can safely disable this rule.</source>
          <target state="translated">クラス宣言の変数の変更を通知されたくない場合は、このルールを安全に無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="b676a87bc4231e95cfd51afd88cbeab37557db5d" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about modifying variables that are declared using &lt;code&gt;const&lt;/code&gt; keyword, you can safely disable this rule.</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; キーワードを使用して宣言された変数の変更について通知を受けたくない場合は、このルールを安全に無効にできます。</target>
        </trans-unit>
        <trans-unit id="57556711aa41b9d323be8427c2ecdd4bff4b57ef" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about shorter notations for the type conversion, you can safely disable this rule.</source>
          <target state="translated">型変換の短い表記を通知されたくない場合は、このルールを安全に無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="4d0dc600bd88206c2efee7216202f42acce935e8" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about spacing style inside of blocks, you can safely disable this rule.</source>
          <target state="translated">ブロック内のスペーシングスタイルを通知されたくない場合は、このルールを安全に無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="08b5bb845c2f283fd9522751ebbc0160e430a28d" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about unnecessary &lt;code&gt;.call()&lt;/code&gt; and &lt;code&gt;.apply()&lt;/code&gt;, you can safely disable this rule.</source>
          <target state="translated">不要な &lt;code&gt;.call()&lt;/code&gt; および &lt;code&gt;.apply()&lt;/code&gt; について通知を受けたくない場合は、このルールを安全に無効にできます。</target>
        </trans-unit>
        <trans-unit id="ac9f79445e9a598b886c416fdf23687b7ac40682" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about unnecessary catch clauses, you can safely disable this rule.</source>
          <target state="translated">不要なキャッチフレーズの通知を受けたくない場合は、このルールを安全に無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="d1af85e373e8151e1abe933aa39f83e1d3e16b9c" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about unnecessary computed property keys, you can safely disable this rule.</source>
          <target state="translated">不要な計算されたプロパティキーの通知を受けたくない場合は、このルールを安全に無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="e855a5d5cb2ae2ff25109bb9e22035ab28a628e6" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about unnecessary constructors, you can safely disable this rule.</source>
          <target state="translated">不要なコンストラクタの通知を受けたくない場合は、このルールを安全に無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="938ce66a3470c3b9f0b562fcf30a08bd7f6898be" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about unnecessary escapes, you can safely disable this rule.</source>
          <target state="translated">不要なエスケープの通知を受けたくない場合は、このルールを安全に無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="1b06ab9aed5b29d9c1a958df26fdcb70958c47f8" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about unnecessary string concatenation, you can safely disable this rule.</source>
          <target state="translated">不要な文字列の連結について通知を受けたくない場合は、このルールを安全に無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="6d677c6d2346e3a005d4cdd590600c4532148540" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about unused labels, then it's safe to disable this rule.</source>
          <target state="translated">未使用のラベルの通知を受けたくない場合は、このルールを無効にするのが無難です。</target>
        </trans-unit>
        <trans-unit id="05e4276980e348df485708112eedf0b691b13051" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about unused variables or function arguments, you can safely turn this rule off.</source>
          <target state="translated">未使用の変数や関数の引数について通知を受けたくない場合は、このルールをオフにしておくと安全です。</target>
        </trans-unit>
        <trans-unit id="58889c4cfc98cc39318dd6b4c202708b2134c213" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about usage of &lt;code&gt;this&lt;/code&gt; keyword outside of classes or class-like objects, you can safely disable this rule.</source>
          <target state="translated">クラスまたはクラスのようなオブジェクトの外部での &lt;code&gt;this&lt;/code&gt; キーワードの使用について通知を受けたくない場合は、このルールを安全に無効にできます。</target>
        </trans-unit>
        <trans-unit id="34f8ec01867de0ac8cf9a52dab4bc974350b262a" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about usage of labels, then it's safe to disable this rule.</source>
          <target state="translated">ラベルの使用法を通知されたくない場合は、このルールを無効にするのが無難です。</target>
        </trans-unit>
        <trans-unit id="c3c8da72d7ad33b084fed89dc9957cbb66fc2e56" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about usage of spacing between tag functions and their template literals, then it's safe to disable this rule.</source>
          <target state="translated">タグ関数とそのテンプレートリテラル間のスペーシングの使用法を通知されたくない場合は、このルールを無効にするのが無難です。</target>
        </trans-unit>
        <trans-unit id="69856ad30b7df75041b8701dce21332166566dbf" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about usage of spacing inside of template strings, then it's safe to disable this rule.</source>
          <target state="translated">テンプレート文字列の中でのスペーシングの使用法を通知されたくない場合は、このルールを無効にするのが無難です。</target>
        </trans-unit>
        <trans-unit id="3a49a93c91c935fd9301abeba634853b470cfac9" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about using &lt;code&gt;this&lt;/code&gt;/&lt;code&gt;super&lt;/code&gt; before &lt;code&gt;super()&lt;/code&gt; in constructors, you can safely disable this rule.</source>
          <target state="translated">コンストラクタで &lt;code&gt;super()&lt;/code&gt; の前に &lt;code&gt;this&lt;/code&gt; / &lt;code&gt;super&lt;/code&gt; を使用することについて通知を受けたくない場合は、このルールを安全に無効にできます。</target>
        </trans-unit>
        <trans-unit id="90eb0f399adda799268d0bf35448574d276ef357" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about variables that are never reassigned after initial assignment, you can safely disable this rule.</source>
          <target state="translated">初期代入後に一度も再代入されない変数について通知を受けたくない場合は、このルールを安全に無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="93ee117c17516d2c719e0db6ab55eccac5d6aa9c" translate="yes" xml:space="preserve">
          <source>If you don't want to check and disallow multiple spaces, then you should turn this rule off.</source>
          <target state="translated">複数のスペースをチェックして許可したくない場合は、このルールをオフにしてください。</target>
        </trans-unit>
        <trans-unit id="0d0224d3ec9408d92b6667d3c8ffeab802c5eee2" translate="yes" xml:space="preserve">
          <source>If you don't want to convert your JSCS configuration directly into an ESLint configuration, then you can use ESLint's built-in wizard to get you started. Just run:</source>
          <target state="translated">JSCSの設定を直接ESLintの設定に変換したくない場合は、ESLintのビルトインウィザードを使ってください。実行してください。</target>
        </trans-unit>
        <trans-unit id="dd03ca6e3947a66ea53baf8ac86171507a2394fc" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce a &lt;code&gt;default&lt;/code&gt; case for &lt;code&gt;switch&lt;/code&gt; statements, you can safely disable this rule.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; ステートメントの &lt;code&gt;default&lt;/code&gt; ケースを強制したくない場合は、このルールを安全に無効にできます。</target>
        </trans-unit>
        <trans-unit id="aababb9275bb8cf111ca9e21208a1cb5e64bd8e0" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce a particular brace style, don't enable this rule.</source>
          <target state="translated">特定のブレーススタイルを強制したくない場合は、このルールを有効にしないでください。</target>
        </trans-unit>
        <trans-unit id="4f9124dfb72433852245c700fe867a59eddb7e22" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce a particular style for multiline comments, you can disable the rule.</source>
          <target state="translated">複数行コメントに対して特定のスタイルを強制したくない場合は、ルールを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="eb3d2c7d722dea39207f449727021bfd08dd6671" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce a style for using equality operators, then it's safe to disable this rule.</source>
          <target state="translated">等値演算子を使用するスタイルを強制したくない場合は、このルールを無効にするのが無難です。</target>
        </trans-unit>
        <trans-unit id="881783518287437ee5c4be83087dc074c16404b7" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce any particular naming convention for all identifiers, or your naming convention is too complex to be enforced by configuring this rule, then you should not enable this rule.</source>
          <target state="translated">すべての識別子に特定の命名規則を適用したくない場合や、命名規則が複雑すぎてこのルールを設定しても適用できない場合は、このルールを有効にすべきではありません。</target>
        </trans-unit>
        <trans-unit id="03c547bbe71dd30e4b389d995a733cefd95fe62d" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce consistency on keyword spacing, then it's safe to disable this rule.</source>
          <target state="translated">キーワードの間隔に一貫性を持たせたくない場合は、このルールを無効にするのが無難です。</target>
        </trans-unit>
        <trans-unit id="ba05107ad0aa4784160535c5a83cf1838bb66020" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce consistent line breaks inside braces, then it's safe to disable this rule.</source>
          <target state="translated">中括弧内での一貫した改行を強制したくない場合は、このルールを無効にするのが無難です。</target>
        </trans-unit>
        <trans-unit id="fab6d15b9e92cdd55e80d0de68464eedc16c6a43" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce either presence or omission of the &lt;code&gt;10&lt;/code&gt; radix value you can turn this rule off.</source>
          <target state="translated">&lt;code&gt;10&lt;/code&gt; 基数の値の有無を強制したくない場合は、このルールをオフにできます。</target>
        </trans-unit>
        <trans-unit id="e804e65f30ad2295d3ca3750dd67b83793cbfc1a" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce empty lines between class members, you can disable this rule.</source>
          <target state="translated">クラスメンバー間の空行を強制したくない場合は、このルールを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="89d6cebc65b3f88d81c83eeb9c12b94536bc421c" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce line breaks after opening and before closing array brackets, don't enable this rule.</source>
          <target state="translated">配列の大括弧を開いた後と閉じる前に改行を強制したくない場合は、このルールを有効にしないでください。</target>
        </trans-unit>
        <trans-unit id="28fb13c709b5f77912ad0d548d670040e0b12839" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce line breaks between arguments, don't enable this rule.</source>
          <target state="translated">引数間の改行を強制したくない場合は、このルールを有効にしないでください。</target>
        </trans-unit>
        <trans-unit id="4533fe95406ecc1ea725791c70efca418fe966b8" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce linebreaks between array elements, don't enable this rule.</source>
          <target state="translated">配列要素間のラインブレークを強制したくない場合は、このルールを有効にしないでください。</target>
        </trans-unit>
        <trans-unit id="bd6ed68cf488b02540f00ff06a41e1354a2bf35b" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce that each &lt;code&gt;case&lt;/code&gt; statement should end with a &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;, or comment, then you can safely turn this rule off.</source>
          <target state="translated">各 &lt;code&gt;case&lt;/code&gt; ステートメントが &lt;code&gt;throw&lt;/code&gt; 、 &lt;code&gt;return&lt;/code&gt; 、 &lt;code&gt;break&lt;/code&gt; 、またはcommentで終了することを強制したくない場合は、このルールを安全にオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="4c4ada68371f02ae755b6c46bc3ff8872f96d881" translate="yes" xml:space="preserve">
          <source>If you don't want to notified about references inside of loop conditions, then it's safe to disable this rule.</source>
          <target state="translated">ループ条件の中の参照について通知を受けたくない場合は、このルールを無効にするのが無難です。</target>
        </trans-unit>
        <trans-unit id="55804cfbbeb711790995c168e8efbacb6de0c91a" translate="yes" xml:space="preserve">
          <source>If you don't want to notify about properties' order, then it's safe to disable this rule.</source>
          <target state="translated">プロパティの順番を通知したくない場合は、このルールを無効にするのが無難です。</target>
        </trans-unit>
        <trans-unit id="0c9a9ac4de306fc8ecda601da045432c3691af97" translate="yes" xml:space="preserve">
          <source>If you don't want to notify about self assignments, then it's safe to disable this rule.</source>
          <target state="translated">自己割当について通知したくないのであれば、このルールを無効にしておくのが無難です。</target>
        </trans-unit>
        <trans-unit id="44d06f76b9a9450bdb8b56c5dfe1046944fc23a9" translate="yes" xml:space="preserve">
          <source>If you don't want to notify generator functions that have no &lt;code&gt;yield&lt;/code&gt; expression, then it's safe to disable this rule.</source>
          <target state="translated">&lt;code&gt;yield&lt;/code&gt; 式がないジェネレーター関数に通知したくない場合は、このルールを無効にしても安全です。</target>
        </trans-unit>
        <trans-unit id="7cbf12fa597c277297c8058f6568bf93b2611aa3" translate="yes" xml:space="preserve">
          <source>If you don't want to notify regular expressions with no &lt;code&gt;u&lt;/code&gt; flag, then it's safe to disable this rule.</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; フラグのない正規表現に通知したくない場合は、このルールを無効にしても安全です。</target>
        </trans-unit>
        <trans-unit id="debec24cd2ab68499573ae20752142917a1aaa28" translate="yes" xml:space="preserve">
          <source>If you don't want to notify spacing around colons of switch statements, then it's safe to disable this rule.</source>
          <target state="translated">switch文のコロン周りの間隔を通知したくないのであれば、このルールを無効にするのが無難です。</target>
        </trans-unit>
        <trans-unit id="48c5ed2023dc8f69088270df9de52f3c95dffc50" translate="yes" xml:space="preserve">
          <source>If you don't want to notify the location of semicolons, then it's safe to disable this rule.</source>
          <target state="translated">セミコロンの位置を通知したくないのであれば、このルールを無効にするのが無難です。</target>
        </trans-unit>
        <trans-unit id="b1086b581d410ccfff2d69ce1d4a0f1ce3883ef4" translate="yes" xml:space="preserve">
          <source>If you don't want to notify unsafe logical negations, then it's safe to disable this rule.</source>
          <target state="translated">安全でない論理否定を通知したくないのであれば、このルールを無効にするのが無難です。</target>
        </trans-unit>
        <trans-unit id="092de94e02976f91598695c0b62fe884df6462d5" translate="yes" xml:space="preserve">
          <source>If you don't want to notify warnings about linebreaks, then it's safe to disable this rule.</source>
          <target state="translated">ラインブレイクに関する警告を通知したくないのであれば、このルールを無効にするのが無難です。</target>
        </trans-unit>
        <trans-unit id="f7d7ceec15dd410c793e8ea6857bb2384373256d" translate="yes" xml:space="preserve">
          <source>If you don't want to restrict your code from using any JavaScript features or syntax, you should not use this rule.</source>
          <target state="translated">JavaScript の機能や構文の使用を制限したくない場合は、このルールを使用すべきではありません。</target>
        </trans-unit>
        <trans-unit id="727de670c07aa6ddaad290b7f9c4933857178381" translate="yes" xml:space="preserve">
          <source>If you don't want to warn about usage of &lt;code&gt;return&lt;/code&gt; statement in callbacks of array's methods, then it's safe to disable this rule.</source>
          <target state="translated">配列のメソッドのコールバックでの &lt;code&gt;return&lt;/code&gt; ステートメントの使用について警告したくない場合は、このルールを無効にしても安全です。</target>
        </trans-unit>
        <trans-unit id="cd5b557f539ab445a2f764b39d2f629358eb8508" translate="yes" xml:space="preserve">
          <source>If you find the custom formatter pattern doesn't provide enough options for the way you'd like to format ESLint results, the best option is to use ESLint's built-in &lt;a href=&quot;../user-guide/formatters/index&quot;&gt;JSON formatter&lt;/a&gt; and pipe the output to a second program. For example:</source>
          <target state="translated">ESLintの結果をフォーマットする方法に十分なオプションがカスタムフォーマッターパターンにない場合は、ESLintの組み込み&lt;a href=&quot;../user-guide/formatters/index&quot;&gt;JSONフォーマッター&lt;/a&gt;を使用して、出力を2番目のプログラムにパイプするのが最適なオプションです。例えば：</target>
        </trans-unit>
        <trans-unit id="118095cb4d7d2586daf3a9c4aeedb6269df5ca60" translate="yes" xml:space="preserve">
          <source>If you find you can't finish the work, then simply add a comment letting people know, for example:</source>
          <target state="translated">仕事が終わらないと思ったら、コメントを追加するなどして、人々に知らせましょう。</target>
        </trans-unit>
        <trans-unit id="e102d884d27cd6a22fd9e584af0049437ee110e4" translate="yes" xml:space="preserve">
          <source>If you have a custom rule, you should make sure it handles empty files appropriately. (In most cases, no changes should be necessary.)</source>
          <target state="translated">カスタムルールがある場合は、それが空のファイルを適切に処理することを確認する必要があります。(ほとんどの場合、変更は必要ありません)。</target>
        </trans-unit>
        <trans-unit id="b921db934ffd761c043389137ead53e58a1b0bf5" translate="yes" xml:space="preserve">
          <source>If you have a large code base that was not developed with a policy to not use such warning terms, you might get hundreds of warnings / errors which might be counter-productive if you can't fix all of them (e.g. if you don't get the time to do it) as you might overlook other warnings / errors or get used to many of them and don't pay attention on it anymore.</source>
          <target state="translated">このような警告用語を使用しないようなポリシーで開発されていない大規模なコードベースを持っている場合、他の警告/エラーを見落としたり、多くの警告/エラーに慣れてしまって注意を払わなくなったりするので、それらをすべて修正できない場合(時間がない場合など)は逆効果になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="73368d2dd1104f63622c3ee28dbef44e3e0176d9" translate="yes" xml:space="preserve">
          <source>If you have a module that must be initialized with information that comes from the file-system or if a module is only used in very rare situations and will cause significant overhead to load it may make sense to disable the rule. If you need to &lt;code&gt;require()&lt;/code&gt; an optional dependency inside of a &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt;, you can disable this rule for just that dependency using the &lt;code&gt;// eslint-disable-line global-require&lt;/code&gt; comment.</source>
          <target state="translated">ファイルシステムからの情報で初期化する必要があるモジュールがある場合、またはモジュールが非常にまれな状況でのみ使用され、ロードに大きなオーバーヘッドが発生する場合は、ルールを無効にすることは理にかなっています。 &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt; 内でオプションの依存関係を &lt;code&gt;require()&lt;/code&gt; する必要がある場合は、 &lt;code&gt;// eslint-disable-line global-require&lt;/code&gt; コメントを使用して、その依存関係のみに対してこのルールを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="78b63fe9c75180f7eae12563749a18484f524c7f" translate="yes" xml:space="preserve">
          <source>If you have a plugin with rules and you are using RuleTester, then you also need to update the options you pass for rules that use &lt;code&gt;ecmaFeatures&lt;/code&gt;. For example:</source>
          <target state="translated">あなたがルールにプラグインを持っていて、RuleTesterを使用している場合、あなたはまた、あなたが使用しているルールに渡すオプションで更新する必要があり &lt;code&gt;ecmaFeatures&lt;/code&gt; を。例えば：</target>
        </trans-unit>
        <trans-unit id="1adc550e08a101ef27b397d37ebb50513d8babdd" translate="yes" xml:space="preserve">
          <source>If you have another convention for property spacing that might not be consistent with the available options, or if you want to permit multiple styles concurrently you can safely disable this rule.</source>
          <target state="translated">プ ロ パテ ィ の間隔について、 利用可能なオプシ ョ ン と 整合しない別の規則があ る 場合や、 複数のス タ イルを同時に許可 し たい場合は、 こ の規則を安全に無効にす る こ と がで き ます。</target>
        </trans-unit>
        <trans-unit id="a15b4bf698befd94c9c28f3b561bee7f0f9d2d1a" translate="yes" xml:space="preserve">
          <source>If you have conflicting rules or when you are fine with chained calls on one line, you can safely turn this rule off.</source>
          <target state="translated">ルールが矛盾している場合や、1回線でチェーンコールしても大丈夫な場合は、このルールをオフにしておくと安全です。</target>
        </trans-unit>
        <trans-unit id="9bf354fdcd95932555803b6fe121c6b5650ca543" translate="yes" xml:space="preserve">
          <source>If you have conventions that don't require an uppercase letter for constructors, or don't require capitalized functions be only used as constructors, turn this rule off.</source>
          <target state="translated">コンストラクタに大文字を必要としない規約がある場合や、大文字の関数をコンストラクタとしてのみ使用することを要求しない場合は、このルールをオフにしてください。</target>
        </trans-unit>
        <trans-unit id="439a3304ad5df05ab1c795bee9cad7c9396aac67" translate="yes" xml:space="preserve">
          <source>If you have established a standard where having tabs is fine, then you can disable this rule.</source>
          <target state="translated">タブがあっても良いという基準が確立されている場合は、このルールを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="188988ea697a9b957d25b534719239d8a1857409" translate="yes" xml:space="preserve">
          <source>If you have established coding standards using a different naming convention (separating words with underscores), turn this rule off.</source>
          <target state="translated">別の命名規則(アンダースコアで単語を区切る)を使用してコーディング標準を確立している場合は、この規則をオフにします。</target>
        </trans-unit>
        <trans-unit id="526f59648be01853bcfaff830a60f08fcb2ba9a0" translate="yes" xml:space="preserve">
          <source>If you have multiple &lt;code&gt;.jscsrc.json&lt;/code&gt; files, you can pass them all and Polyjuice will combine them into one &lt;code&gt;.eslintrc.json&lt;/code&gt; file:</source>
          <target state="translated">複数の &lt;code&gt;.jscsrc.json&lt;/code&gt; ファイルがある場合、それらすべてを渡すことができ、Polyjuiceはそれらを1つの &lt;code&gt;.eslintrc.json&lt;/code&gt; ファイルに結合します。</target>
        </trans-unit>
        <trans-unit id="ac994ca847831c1c302f8b42ca3c3efee45e3720" translate="yes" xml:space="preserve">
          <source>If you have no strict conventions about when to use block statements and when not to, you can safely disable this rule.</source>
          <target state="translated">ブロック文を使うタイミングと使わないタイミングについて厳密な決まりがない場合は、このルールを安全に無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="70f93035ea1b2e22270015dfd6ae4ecd60d85f61" translate="yes" xml:space="preserve">
          <source>If you intend to create a global &lt;code&gt;const&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt; variable or a global &lt;code&gt;class&lt;/code&gt; declaration, to be used from other scripts, be aware that there are certain differences when compared to the traditional methods, which are &lt;code&gt;var&lt;/code&gt; declarations and assigning to a property of the global &lt;code&gt;window&lt;/code&gt; object:</source>
          <target state="translated">他のスクリプトから使用されるグローバル &lt;code&gt;const&lt;/code&gt; または &lt;code&gt;let&lt;/code&gt; 変数またはグローバル &lt;code&gt;class&lt;/code&gt; 宣言を作成する場合、 &lt;code&gt;var&lt;/code&gt; 宣言とグローバルのプロパティへの割り当てである従来のメソッドと比較すると、いくつかの違いがあることに注意してください。 &lt;code&gt;window&lt;/code&gt; オブジェクト：</target>
        </trans-unit>
        <trans-unit id="cc1252817e8c5df5df09e177c1f59eb843a08370" translate="yes" xml:space="preserve">
          <source>If you intentionally use &lt;code&gt;with&lt;/code&gt; statements then you can disable this rule.</source>
          <target state="translated">意図的に &lt;code&gt;with&lt;/code&gt; ステートメントを使用する場合は、このルールを無効にできます。</target>
        </trans-unit>
        <trans-unit id="a5a54e590a75faa65b0ed8e0ad0659925f1afaec" translate="yes" xml:space="preserve">
          <source>If you intentionally use empty block statements then you can disable this rule.</source>
          <target state="translated">意図的に空のブロック文を使用している場合は、このルールを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="d3b9a44ddb5f057d0633a491bcff3b454a13ca25" translate="yes" xml:space="preserve">
          <source>If you intentionally use extra semicolons then you can disable this rule.</source>
          <target state="translated">意図的に余分なセミコロンを使用している場合は、このルールを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="ed58b7a43c9e311ce8e3580896560e95ee0a6c3d" translate="yes" xml:space="preserve">
          <source>If you intentionally use the &lt;code&gt;void&lt;/code&gt; operator then you can disable this rule.</source>
          <target state="translated">意図的に &lt;code&gt;void&lt;/code&gt; 演算子を使用する場合は、このルールを無効にできます。</target>
        </trans-unit>
        <trans-unit id="29ecbabab88c404ca5af384d017cf9ea2b3f4919" translate="yes" xml:space="preserve">
          <source>If you maintain a plugin and provide installation instructions, you should ensure that the installation instructions are up to date with the &lt;a href=&quot;#package-loading-simplification&quot;&gt;user-facing changes to how plugins are loaded&lt;/a&gt;. In particular, if your plugin was generated with the &lt;a href=&quot;https://github.com/eslint/generator-eslint&quot;&gt;&lt;code&gt;generator-eslint&lt;/code&gt;&lt;/a&gt; package, it likely contains outdated instructions for how to use the plugin with global ESLint installations.</source>
          <target state="translated">プラグインを保守し、インストール手順を提供する場合は、プラグインの&lt;a href=&quot;#package-loading-simplification&quot;&gt;ロード方法&lt;/a&gt;に対するユーザー向けの変更により、インストール手順が最新であることを確認する必要があります。特に、プラグインが&lt;a href=&quot;https://github.com/eslint/generator-eslint&quot;&gt; &lt;code&gt;generator-eslint&lt;/code&gt; &lt;/a&gt;パッケージで生成された場合、グローバルなESLintインストールでプラグインを使用する方法の古い指示が含まれている可能性があります。</target>
        </trans-unit>
        <trans-unit id="382050530e90f989fc4392b588fcc385aace40bb" translate="yes" xml:space="preserve">
          <source>If you make a &lt;code&gt;fix()&lt;/code&gt; function which returns multiple &lt;code&gt;fixing&lt;/code&gt; objects, those &lt;code&gt;fixing&lt;/code&gt; objects must not be overlapped.</source>
          <target state="translated">複数の &lt;code&gt;fixing&lt;/code&gt; オブジェクトを返す &lt;code&gt;fix()&lt;/code&gt; 関数を作成する場合、それらの &lt;code&gt;fixing&lt;/code&gt; オブジェクトが重複してはなりません。</target>
        </trans-unit>
        <trans-unit id="30d314fb125cae0253768be98db5440a6591c835" translate="yes" xml:space="preserve">
          <source>If you need to access comments for a specific node you can use &lt;code&gt;sourceCode.getComments(node)&lt;/code&gt;:</source>
          <target state="translated">特定のノードのコメントにアクセスする必要がある場合は、 &lt;code&gt;sourceCode.getComments(node)&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="5bded78921bf41e6e0100847f8e36439af0a827a" translate="yes" xml:space="preserve">
          <source>If you need to capture nested context, &lt;code&gt;consistent-this&lt;/code&gt; is going to be problematic. Code of that nature is usually difficult to read and maintain and you should consider refactoring it.</source>
          <target state="translated">ネストされたコンテキストをキャプチャする必要がある場合、 &lt;code&gt;consistent-this&lt;/code&gt; があります。これは問題になります。その性質のコードは、通常、読み取りや保守が難しいため、コードのリファクタリングを検討する必要があります。</target>
        </trans-unit>
        <trans-unit id="382e78ca57fb3d4eb43f4468524bc11d77683bdd" translate="yes" xml:space="preserve">
          <source>If you need to make multiple configs that can extend from each other and live in different directories, you can create a single shareable config that handles this scenario.</source>
          <target state="translated">互いに拡張して別のディレクトリに存在する複数の設定を作成する必要がある場合は、このシナリオを処理する共有可能な設定を一つ作成することができます。</target>
        </trans-unit>
        <trans-unit id="5812603008a46c3486b5e671b8f0edc57df6edd6" translate="yes" xml:space="preserve">
          <source>If you need to use control character pattern matching, then you should turn this rule off.</source>
          <target state="translated">制御文字パターンマッチングを使用する必要がある場合は、このルールをオフにしてください。</target>
        </trans-unit>
        <trans-unit id="02d1a6666bd32062a9544a0211172b4e0690165a" translate="yes" xml:space="preserve">
          <source>If you need to use labeled statements everywhere, then you can safely disable this rule.</source>
          <target state="translated">どこでもラベル付きの文を使用する必要がある場合は、このルールを安全に無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="660081d33ba72f5ae35d8f8429fbf0433e7b68be" translate="yes" xml:space="preserve">
          <source>If you prefer to use &lt;code&gt;process.env&lt;/code&gt; throughout your project to retrieve values from environment variables, then you can safely disable this rule.</source>
          <target state="translated">プロジェクト全体で &lt;code&gt;process.env&lt;/code&gt; を使用して環境変数から値を取得する場合は、このルールを安全に無効にできます。</target>
        </trans-unit>
        <trans-unit id="0d0340890e7d3e636e8f793bfb600313cb993e9d" translate="yes" xml:space="preserve">
          <source>If you simply want to create a local copy of the source to play with, you can clone the main repository using this command:</source>
          <target state="translated">単にソースのローカルコピーを作成して遊びたいだけなら、このコマンドを使ってメインリポジトリをクローンすることができます。</target>
        </trans-unit>
        <trans-unit id="b54b0379c44ec2d18f671613df2ac7b3fa322827" translate="yes" xml:space="preserve">
          <source>If you think you've found a bug in ESLint, please &lt;a href=&quot;https://github.com/eslint/eslint/issues/new&quot;&gt;create a new issue&lt;/a&gt; or a &lt;a href=&quot;pull-requests&quot;&gt;pull request&lt;/a&gt; on GitHub.</source>
          <target state="translated">ESLintにバグを見つけたと思われる場合は、GitHubで&lt;a href=&quot;https://github.com/eslint/eslint/issues/new&quot;&gt;新しい問題&lt;/a&gt;または&lt;a href=&quot;pull-requests&quot;&gt;プルリクエスト&lt;/a&gt;を作成してください。</target>
        </trans-unit>
        <trans-unit id="38f228e5fd212b5545994a73a849c889d4d81493" translate="yes" xml:space="preserve">
          <source>If you use a boilerplate generator that relies on this behavior (e.g. to generate a script that runs &lt;code&gt;eslint tests/&lt;/code&gt; in a new project before any test files are actually present), you can work around this issue by adding a dummy file that matches the given pattern (e.g. an empty &lt;code&gt;tests/index.js&lt;/code&gt; file).</source>
          <target state="translated">この動作に依存するボイラープレートジェネレーターを使用する場合（たとえば、テストファイルが実際に存在する前に新しいプロジェクトで &lt;code&gt;eslint tests/&lt;/code&gt; を実行するスクリプトを生成するため）、指定されたものと一致するダミーファイルを追加することで、この問題を回避できます。パターン（空の &lt;code&gt;tests/index.js&lt;/code&gt; ファイルなど）。</target>
        </trans-unit>
        <trans-unit id="7d3465c7ac30a9cf24afa4cba7d6d7a58b08270c" translate="yes" xml:space="preserve">
          <source>If you use a config file located outside of a local project (with the &lt;code&gt;--config&lt;/code&gt; flag), consider installing the plugins as dependencies of that config file, and setting the &lt;a href=&quot;command-line-interface#--resolve-plugins-relative-to&quot;&gt;&lt;code&gt;--resolve-plugins-relative-to&lt;/code&gt;&lt;/a&gt; flag to the location of the config file.</source>
          <target state="translated">ローカルプロジェクトの外部にある設定ファイル（ &lt;code&gt;--config&lt;/code&gt; フラグを使用）を使用する場合は、その設定ファイルの依存関係としてプラグインをインストールし、&lt;a href=&quot;command-line-interface#--resolve-plugins-relative-to&quot;&gt; &lt;code&gt;--resolve-plugins-relative-to&lt;/code&gt; &lt;/a&gt;フラグを設定ファイル。</target>
        </trans-unit>
        <trans-unit id="ef38f0f26aedebc08c900f2170004ffdde1f5fb9" translate="yes" xml:space="preserve">
          <source>If you use a pattern such as &lt;a href=&quot;https://github.com/umdjs/umd&quot;&gt;UMD&lt;/a&gt; where the &lt;code&gt;require&lt;/code&gt;d modules are not loaded in variable declarations, this rule will obviously do nothing for you.</source>
          <target state="translated">あなたのようなパターンを使用している場合は&lt;a href=&quot;https://github.com/umdjs/umd&quot;&gt;UMD&lt;/a&gt;どこ &lt;code&gt;require&lt;/code&gt; Dモジュールは、変数の宣言にロードされていない、このルールは明らかにあなたのために何もしません。</target>
        </trans-unit>
        <trans-unit id="0e5b9656ad64e63d8b3fd891ddf70408bf2754ad" translate="yes" xml:space="preserve">
          <source>If you use some UTF-16 or UTF-32 files and you want to allow a file to optionally begin with a Unicode BOM, you should turn this rule off.</source>
          <target state="translated">UTF-16 ま たは UTF-32 フ ァ イ ルを使用 し てお り 、 フ ァ イ ルが Unicode BOM で始ま る こ と を任意に許可 し たい場合は、 こ の規則をオフにす る 必要があ り ます。</target>
        </trans-unit>
        <trans-unit id="0326d8c204460011dd4d50e18688b63f04393c0a" translate="yes" xml:space="preserve">
          <source>If you want to allow &lt;code&gt;setTimeout()&lt;/code&gt; and &lt;code&gt;setInterval()&lt;/code&gt; with string arguments, then you can safely disable this rule.</source>
          <target state="translated">文字列引数で &lt;code&gt;setTimeout()&lt;/code&gt; および &lt;code&gt;setInterval()&lt;/code&gt; を許可する場合は、このルールを安全に無効にできます。</target>
        </trans-unit>
        <trans-unit id="cdc7c63ca6c90a4fc825f096a878d02d0077a0af" translate="yes" xml:space="preserve">
          <source>If you want to allow additional constructor flags for any reason, you can specify them using an &lt;code&gt;allowConstructorFlags&lt;/code&gt; option in &lt;code&gt;.eslintrc&lt;/code&gt;. These flags will then be ignored by the rule regardless of the &lt;code&gt;ecmaVersion&lt;/code&gt; setting.</source>
          <target state="translated">あなたが何らかの理由で追加のコンストラクタフラグを許可したい場合は、使用して指定することができます &lt;code&gt;allowConstructorFlags&lt;/code&gt; の中にオプション &lt;code&gt;.eslintrc&lt;/code&gt; を。これらのフラグは、 &lt;code&gt;ecmaVersion&lt;/code&gt; 設定に関係なく、ルールによって無視されます。</target>
        </trans-unit>
        <trans-unit id="025c660770aa315e6d8b4dbc5d92f3800b8c5d91" translate="yes" xml:space="preserve">
          <source>If you want to allow assignment to function parameters, then you can safely disable this rule.</source>
          <target state="translated">関数パラメータへの代入を許可したい場合は、このルールを安全に無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="01c2aaebaf24fdde52a8a21733c045787756506c" translate="yes" xml:space="preserve">
          <source>If you want to allow control flow operations in &lt;code&gt;finally&lt;/code&gt; blocks, you can turn this rule off.</source>
          <target state="translated">&lt;code&gt;finally&lt;/code&gt; ブロックで制御フロー操作を許可する場合は、このルールをオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="6ce4198863586a404bf23ac360d7a26607f63a6c" translate="yes" xml:space="preserve">
          <source>If you want to allow dangling underscores in identifiers, then you can safely turn this rule off.</source>
          <target state="translated">識別子にぶら下がったアンダースコアを許可したい場合は、このルールをオフにしても問題ありません。</target>
        </trans-unit>
        <trans-unit id="77ec3c669980b1ce6e74d2cc3cca9be9749234bd" translate="yes" xml:space="preserve">
          <source>If you want to allow developers to each decide how they want to write functions on their own, then you can disable this rule.</source>
          <target state="translated">開発者が自分で関数の書き方を決められるようにしたいのであれば、このルールを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="a99420336119594b2985f957e70afd067dc5c412" translate="yes" xml:space="preserve">
          <source>If you want to allow functions to have different &lt;code&gt;return&lt;/code&gt; behavior depending on code branching, then it is safe to disable this rule.</source>
          <target state="translated">コードの分岐に応じて関数に異なる &lt;code&gt;return&lt;/code&gt; 動作を持たせる場合は、このルールを無効にしても安全です。</target>
        </trans-unit>
        <trans-unit id="06d8a61f2b762c90cf475f1c301e8c19a2803657" translate="yes" xml:space="preserve">
          <source>If you want to allow multiple spaces in a regular expression, then you can safely turn this rule off.</source>
          <target state="translated">正規表現で複数のスペースを許可したい場合は、このルールをオフにしても問題ありません。</target>
        </trans-unit>
        <trans-unit id="168b692048b6b1f7a247321b869174d92d311217" translate="yes" xml:space="preserve">
          <source>If you want to allow string concatenation of path names.</source>
          <target state="translated">パス名の文字列連結を許可する場合。</target>
        </trans-unit>
        <trans-unit id="c2b47982ee8ecdbe90dcd79199ede4d5a1a2501a" translate="yes" xml:space="preserve">
          <source>If you want to allow synchronous operations in your script, do not enable this rule.</source>
          <target state="translated">スクリプトで同期操作を許可したい場合は、このルールを有効にしないでください。</target>
        </trans-unit>
        <trans-unit id="157d97e1222d6e6c5c3036eddedf2544c220e1e7" translate="yes" xml:space="preserve">
          <source>If you want to allow the use of &lt;code&gt;undefined&lt;/code&gt; in your code, then you can safely turn this rule off.</source>
          <target state="translated">コードで &lt;code&gt;undefined&lt;/code&gt; の使用を許可する場合は、このルールを安全にオフにできます。</target>
        </trans-unit>
        <trans-unit id="5593620bae839c590950598c5628a7cf2b50ce4f" translate="yes" xml:space="preserve">
          <source>If you want to allow the use of assignment operators in a &lt;code&gt;return&lt;/code&gt; statement, then you can safely disable this rule.</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; ステートメントで代入演算子の使用を許可する場合は、このルールを安全に無効にできます。</target>
        </trans-unit>
        <trans-unit id="b91748df59dc1d210ee220fffd1795446709f9c9" translate="yes" xml:space="preserve">
          <source>If you want to allow the use of primitive wrapper objects, then you can safely disable this rule.</source>
          <target state="translated">プリミティブなラッパーオブジェクトの使用を許可したい場合は、このルールを無効にしても問題ありません。</target>
        </trans-unit>
        <trans-unit id="117c72dd490ac86d6418992cd2bdcb271c9762cc" translate="yes" xml:space="preserve">
          <source>If you want to allow use of &lt;code&gt;parseInt()&lt;/code&gt; or &lt;code&gt;Number.parseInt()&lt;/code&gt; for binary, octal, or hexadecimal integers, or if you are not using ES6 (because binary and octal literals are not supported in ES5 and below), you may wish to disable this rule.</source>
          <target state="translated">2進、8進、または16進整数に &lt;code&gt;parseInt()&lt;/code&gt; または &lt;code&gt;Number.parseInt()&lt;/code&gt; の使用を許可したい場合、またはES6を使用していない場合（2進および8進リテラルはES5以下ではサポートされていないため）、このルールを無効にします。</target>
        </trans-unit>
        <trans-unit id="a7a2d8bc617fb6a973e4a757758c6ff305221634" translate="yes" xml:space="preserve">
          <source>If you want to be able to access array indices or object properties directly, you can either configure the rule to your tastes or disable the rule entirely.</source>
          <target state="translated">配列のインデックスやオブジェクトのプロパティに直接アクセスできるようにしたい場合は、ルールを自分の好みに合わせて設定するか、ルールを完全に無効にします。</target>
        </trans-unit>
        <trans-unit id="e945829b731e7b76322bd039aebed22d8e0288ab" translate="yes" xml:space="preserve">
          <source>If you want to contribute to an ESLint repo, please use a GitHub pull request. This is the fastest way for us to evaluate your code and to merge it into the code base. Please don't file an issue with snippets of code. Doing so means that we need to manually merge the changes in and update any appropriate tests. That decreases the likelihood that your code is going to get included in a timely manner. Please use pull requests.</source>
          <target state="translated">ESLint のレポに貢献したい場合は、GitHub のプルリクエストを使ってください。これがあなたのコードを評価し、コードベースにマージするための最も早い方法です。コードのスニペットで課題を提出しないでください。そうすると、変更をマージして適切なテストを更新しなければならなくなります。そうすると、あなたのコードがタイムリーに含まれる可能性が低くなります。プルリクエストを使用してください。</target>
        </trans-unit>
        <trans-unit id="b1bc3e203f722d1ec9693455df83c11f36ba7aae" translate="yes" xml:space="preserve">
          <source>If you want to fix code from &lt;code&gt;stdin&lt;/code&gt; or otherwise want to get the fixes without actually writing them to the file, use the &lt;a href=&quot;#--fix-dry-run&quot;&gt;&lt;code&gt;--fix-dry-run&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; からコードを修正する場合、または実際にファイルに書き込まずに修正を取得する場合は、&lt;a href=&quot;#--fix-dry-run&quot;&gt; &lt;code&gt;--fix-dry-run&lt;/code&gt; &lt;/a&gt;オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="d433926704a4ac51dbe6e1a80f5afe0f9cbc20ed" translate="yes" xml:space="preserve">
          <source>If you want to implement a breaking change or a change to the core, ensure there's an issue that describes what you're doing and the issue has been accepted. You can create a new issue or just indicate you're &lt;a href=&quot;working-on-issues&quot;&gt;working on an existing issue&lt;/a&gt;. Bug fixes, documentation changes, and other pull requests do not require an issue.</source>
          <target state="translated">重大な変更またはコアへの変更を実装する場合は、実行していることを説明する問題があり、その問題が受け入れられていることを確認してください。新しい課題を作成するか&lt;a href=&quot;working-on-issues&quot;&gt;、既存の課題に取り組んでいる&lt;/a&gt;ことを示すことができます。バグ修正、ドキュメントの変更、その他のプルリクエストには問題は必要ありません。</target>
        </trans-unit>
        <trans-unit id="dbaf3fa15fdca101b1059dd87a531855c8a22f9b" translate="yes" xml:space="preserve">
          <source>If you want to learn more about destructuring, check out the links below:</source>
          <target state="translated">デストラクチャーについてもっと詳しく知りたい方は、以下のリンクをチェックしてみてください。</target>
        </trans-unit>
        <trans-unit id="01bdb16b7d4784e8c75c4b849aaf2b1888300119" translate="yes" xml:space="preserve">
          <source>If you want to learn more about tagged template literals, check out the links below:</source>
          <target state="translated">タグ付きテンプレートリテラルについてもっと知りたい場合は、以下のリンクをチェックしてください。</target>
        </trans-unit>
        <trans-unit id="1bfb10754401295a1a5e4ea43c2fe0a3b67db675" translate="yes" xml:space="preserve">
          <source>If you want to lint one or more files, use the &lt;code&gt;executeOnFiles()&lt;/code&gt; method. This method accepts a single argument, which is an array of files and/or directories to traverse for files. You can pass the same values as you would using the ESLint command line interface, such as &lt;code&gt;&quot;.&quot;&lt;/code&gt; to search all JavaScript files in the current directory. Here's an example:</source>
          <target state="translated">1つまたは複数のファイルをリントする場合は、 &lt;code&gt;executeOnFiles()&lt;/code&gt; メソッドを使用します。このメソッドは単一の引数を受け入れます。これは、ファイルをトラバースするファイルやディレクトリの配列です。 &lt;code&gt;&quot;.&quot;&lt;/code&gt; など、ESLintコマンドラインインターフェースを使用する場合と同じ値を渡すことができます。現在のディレクトリにあるすべてのJavaScriptファイルを検索します。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="8ae0efa7cc8d38a3e330a4407faa82ae491a0ad3" translate="yes" xml:space="preserve">
          <source>If you want to propose a new rule, please see how to &lt;a href=&quot;pull-requests&quot;&gt;create a pull request&lt;/a&gt; or submit an issue by filling out a &lt;a href=&quot;https://github.com/eslint/eslint/issues/new?template=NEW_RULE.md&quot;&gt;new rule template&lt;/a&gt;.</source>
          <target state="translated">新しいルールを提案する場合は&lt;a href=&quot;pull-requests&quot;&gt;、プルリクエスト&lt;/a&gt;を作成する方法を確認するか、&lt;a href=&quot;https://github.com/eslint/eslint/issues/new?template=NEW_RULE.md&quot;&gt;新しいルールテンプレートに&lt;/a&gt;入力して問題を送信してください。</target>
        </trans-unit>
        <trans-unit id="fc20c08d174f1ad50d824f0e45cd254992c6ae16" translate="yes" xml:space="preserve">
          <source>If you want to quickly run just one test, you can do so by running Mocha directly and passing in the filename. For example:</source>
          <target state="translated">一つのテストを素早く実行したい場合は、Mocha を直接実行してファイル名を渡すことで実行することができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="16da35b5af438aa046c923e0c90a12cc343ac898" translate="yes" xml:space="preserve">
          <source>If you want to retrieve a configuration object for a given file, use the &lt;code&gt;getConfigForFile()&lt;/code&gt; method. This method accepts one argument, a file path, and returns an object represented the calculated configuration of the file. Here's an example:</source>
          <target state="translated">特定のファイルの構成オブジェクトを取得する場合は、 &lt;code&gt;getConfigForFile()&lt;/code&gt; メソッドを使用します。このメソッドは、1つの引数、ファイルパスを受け入れ、ファイルの計算された構成を表すオブジェクトを返します。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="7bbedf7b05174e3221ac6559667171bdc4900f74" translate="yes" xml:space="preserve">
          <source>If you want to use &lt;code&gt;await&lt;/code&gt; to denote a value that is a thenable, even when it is not necessary; or if you do not want the performance benefit of avoiding &lt;code&gt;return await&lt;/code&gt;, you can turn off this rule.</source>
          <target state="translated">&lt;code&gt;await&lt;/code&gt; を使用して、必要がない場合でも、theableである値を示す場合。または、 &lt;code&gt;return await&lt;/code&gt; を回避することによるパフォーマンス上の利点を望まない場合は、このルールをオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="7ebf4e944a61bef47f4a2f25c9dfb29556f044f3" translate="yes" xml:space="preserve">
          <source>If you want to use Reflect methods, but keep using the &lt;code&gt;delete&lt;/code&gt; keyword, then your config would look like &lt;code&gt;prefer-reflect: [2, { &quot;exceptions&quot;: [&quot;delete&quot;] }]&lt;/code&gt;.</source>
          <target state="translated">Reflectメソッドを使用したいが、 &lt;code&gt;delete&lt;/code&gt; キーワードを引き続き使用する場合、構成は &lt;code&gt;prefer-reflect: [2, { &quot;exceptions&quot;: [&quot;delete&quot;] }]&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="5dcbce8e16ab14d37edc537499d4673be2756e1d" translate="yes" xml:space="preserve">
          <source>If you want to use an environment from a plugin, be sure to specify the plugin name in the &lt;code&gt;plugins&lt;/code&gt; array and then use the unprefixed plugin name, followed by a slash, followed by the environment name. For example:</source>
          <target state="translated">プラグインの環境を使用する場合は、必ず &lt;code&gt;plugins&lt;/code&gt; 配列でプラグイン名を指定してから、接頭辞のないプラグイン名、スラッシュ、環境名の順に使用してください。例えば：</target>
        </trans-unit>
        <trans-unit id="eb8a205efd9c67c4073b9416e356ad4478147a46" translate="yes" xml:space="preserve">
          <source>If you want to use sparse arrays, then it is safe to disable this rule.</source>
          <target state="translated">疎な配列を使いたい場合は、このルールを無効にするのが無難です。</target>
        </trans-unit>
        <trans-unit id="32718e9e480985cfed80435e0fad5f99885ad95f" translate="yes" xml:space="preserve">
          <source>If you want to use your own parser and provide additional capabilities for your rules, you can specify your own custom parser. If a &lt;code&gt;parseForESLint&lt;/code&gt; method is exposed on the parser, this method will be used to parse the code. Otherwise, the &lt;code&gt;parse&lt;/code&gt; method will be used. Both methods should take in the source code as the first argument, and an optional configuration object as the second argument (provided as &lt;code&gt;parserOptions&lt;/code&gt; in a config file). The &lt;code&gt;parse&lt;/code&gt; method should simply return the AST. The &lt;code&gt;parseForESLint&lt;/code&gt; method should return an object that contains the required property &lt;code&gt;ast&lt;/code&gt; and optional properties &lt;code&gt;services&lt;/code&gt;, &lt;code&gt;scopeManager&lt;/code&gt;, and &lt;code&gt;visitorKeys&lt;/code&gt;.</source>
          <target state="translated">独自のパーサーを使用し、ルールに追加機能を提供する場合は、独自のカスタムパーサーを指定できます。 &lt;code&gt;parseForESLint&lt;/code&gt; メソッドがパーサーで公開されている場合、このメソッドはコードの解析に使用されます。それ以外の場合は、 &lt;code&gt;parse&lt;/code&gt; メソッドが使用されます。どちらのメソッドも、ソースコードを最初の引数として &lt;code&gt;parserOptions&lt;/code&gt; 、オプションの構成オブジェクトを2番目の引数として受け取ります（構成ファイルでparserOptionsとして提供されます）。 &lt;code&gt;parse&lt;/code&gt; 方法は、単純にASTを返す必要があります。 &lt;code&gt;parseForESLint&lt;/code&gt; の方法は、必要なプロパティを含むオブジェクトを返す必要があり &lt;code&gt;ast&lt;/code&gt; およびオプションのプロパティ &lt;code&gt;services&lt;/code&gt; 、 &lt;code&gt;scopeManager&lt;/code&gt; を、そして &lt;code&gt;visitorKeys&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3230232a97c3d21775cfc1d1507fc08955ed3b0e" translate="yes" xml:space="preserve">
          <source>If you were to remove the initialization, then the behavior of the loop changes:</source>
          <target state="translated">初期化を外していたら、ループの挙動が変わります。</target>
        </trans-unit>
        <trans-unit id="d93b953074e456b439293bef97d4d869490dadb5" translate="yes" xml:space="preserve">
          <source>If you were using &lt;code&gt;ecmaFeatures.modules&lt;/code&gt; to enable ES6 module support like this:</source>
          <target state="translated">次のように &lt;code&gt;ecmaFeatures.modules&lt;/code&gt; を使用してES6モジュールのサポートを有効にした場合：</target>
        </trans-unit>
        <trans-unit id="36c05b83cad0c60a876dbe4551ddc2004b01bce0" translate="yes" xml:space="preserve">
          <source>If you were using a prior version of ESLint, you can get help with the transition by reading:</source>
          <target state="translated">ESLintの前のバージョンを使っていた場合は、本を読むことで移行の助けを得ることができます。</target>
        </trans-unit>
        <trans-unit id="62e887c8ffaf679225cbfb62fab07d5987855b22" translate="yes" xml:space="preserve">
          <source>If you wish to allow the use of the &lt;code&gt;Object&lt;/code&gt; constructor, you can safely turn this rule off.</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; コンストラクタの使用を許可したい場合は、このルールを安全にオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="4845e6a9b32a2c3cb12af3f332e0e771dafb2f16" translate="yes" xml:space="preserve">
          <source>If you wish to have a different configuration for line comments and block comments, you can do so by using two different object configurations (note that the capitalization option will be enforced consistently for line and block comments):</source>
          <target state="translated">行コメントとブロックコメントで異なる設定をしたい場合は、2つの異なるオブジェクト設定を使用することで行うことができます(行コメントとブロックコメントでは大文字表記のオプションが一貫して適用されることに注意してください)。</target>
        </trans-unit>
        <trans-unit id="3b305d34beab965b8e6902b4057eb1ea1186cc8f" translate="yes" xml:space="preserve">
          <source>If you'd like ESLint to attempt to fix the problem you're reporting, you can do so by specifying the &lt;code&gt;fix&lt;/code&gt; function when using &lt;code&gt;context.report()&lt;/code&gt;. The &lt;code&gt;fix&lt;/code&gt; function receives a single argument, a &lt;code&gt;fixer&lt;/code&gt; object, that you can use to apply a fix. For example:</source>
          <target state="translated">ESLintが報告している問題の修正を試みたい場合は、 &lt;code&gt;context.report()&lt;/code&gt; を使用するときに &lt;code&gt;fix&lt;/code&gt; 関数を指定することで修正できます。 &lt;code&gt;fix&lt;/code&gt; 機能は、単一の引数、受信 &lt;code&gt;fixer&lt;/code&gt; 修正プログラムを適用するために使用できるオブジェクトを、。例えば：</target>
        </trans-unit>
        <trans-unit id="e2de9e1d21deb952d591059d9bfac04bff3045b4" translate="yes" xml:space="preserve">
          <source>If you'd like to request a change other than a bug fix or new rule, this section explains that process.</source>
          <target state="translated">バグ修正や新しいルール以外の変更を依頼したい場合は、このセクションでその手順を説明します。</target>
        </trans-unit>
        <trans-unit id="9dbf97a89558daba71eceae42ebb78166efcb253" translate="yes" xml:space="preserve">
          <source>If you'd like to request a change to ESLint, please &lt;a href=&quot;https://github.com/eslint/eslint/issues/new?template=CHANGE.md&quot;&gt;create a new issue&lt;/a&gt; on GitHub. Be sure to include the following information:</source>
          <target state="translated">ESLintの変更をリクエストする場合は、GitHubで&lt;a href=&quot;https://github.com/eslint/eslint/issues/new?template=CHANGE.md&quot;&gt;新しい問題&lt;/a&gt;を作成してください。必ず次の情報を含めてください。</target>
        </trans-unit>
        <trans-unit id="a2ff681ef1e1294a4a8430977faeb8b6585b95bd" translate="yes" xml:space="preserve">
          <source>If you'd like to work on a pull request and you've never submitted code before, follow these steps:</source>
          <target state="translated">プルリクエストに取り組みたい方で、これまでにコードを投稿したことがない場合は、以下の手順に従ってください。</target>
        </trans-unit>
        <trans-unit id="1fc6d5511f027154cd7d3325f533abfe108333a7" translate="yes" xml:space="preserve">
          <source>If you'd prefer to use a different file than the &lt;code&gt;.eslintignore&lt;/code&gt; in the current working directory, you can specify it on the command line using the &lt;code&gt;--ignore-path&lt;/code&gt; option. For example, you can use &lt;code&gt;.jshintignore&lt;/code&gt; file because it has the same format:</source>
          <target state="translated">現在の作業ディレクトリにある &lt;code&gt;.eslintignore&lt;/code&gt; とは異なるファイルを使用する場合は、コマンドラインで &lt;code&gt;--ignore-path&lt;/code&gt; オプションを使用して指定できます。たとえば、 &lt;code&gt;.jshintignore&lt;/code&gt; ファイルは同じ形式なので使用できます。</target>
        </trans-unit>
        <trans-unit id="d8bb46085e72a67007bd541cac129fad559af636" translate="yes" xml:space="preserve">
          <source>If you're going to work on an issue, please add a comment to that issue saying so and indicating when you think you will complete it. It will help us to avoid duplication of effort. Some examples of good comments are:</source>
          <target state="translated">ある課題に取り組む場合は、その課題にコメントをつけて、完成する予定の時期を明記してください。そうすることで、作業の重複を避けることができます。良いコメントの例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="529fb9f8074c731a55ea46317378ab6ce2fa6379" translate="yes" xml:space="preserve">
          <source>If you're interested in writing a tool that uses ESLint, then you can use the Node.js API to get programmatic access to functionality.</source>
          <target state="translated">もしあなたがESLintを使ったツールを書きたいと思っているのであれば、Node.js APIを使ってプログラム的に機能にアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="492482d9566e53632c85e7788842a3f9c1aceabf" translate="yes" xml:space="preserve">
          <source>If you're not concerned about consistent locations of implicitly returned arrow function expressions, you should not turn on this rule.</source>
          <target state="translated">暗黙的に返される矢印関数式の一貫した位置を気にしない場合は、このルールをオンにするべきではありません。</target>
        </trans-unit>
        <trans-unit id="403e57af13573e69ccf33af74594bbecf97b2c8e" translate="yes" xml:space="preserve">
          <source>If you're not concerned about consistent locations of single-line statements, you should not turn on this rule. You can also disable this rule if you're using the &lt;code&gt;&quot;all&quot;&lt;/code&gt; option for the &lt;a href=&quot;curly&quot;&gt;&lt;code&gt;curly&lt;/code&gt;&lt;/a&gt; rule, because this will disallow single-line statements entirely.</source>
          <target state="translated">単一行ステートメントの一貫した場所を気にしない場合は、このルールをオンにしないでください。&lt;a href=&quot;curly&quot;&gt; &lt;code&gt;curly&lt;/code&gt; &lt;/a&gt;ルールに &lt;code&gt;&quot;all&quot;&lt;/code&gt; オプションを使用している場合は、このルールを無効にすることもできます。これにより、単一行のステートメントが完全に禁止されます。</target>
        </trans-unit>
        <trans-unit id="1d9f59855a50da748bf20de2e170697ffbe4d25d" translate="yes" xml:space="preserve">
          <source>If you're not sure which config file needs to be updated, it may be useful to run ESLint v5 and look at what config file is mentioned in the deprecation warning.</source>
          <target state="translated">どのコンフィグファイルを更新する必要があるのかわからない場合は、ESLint v5を実行して、どのコンフィグファイルが非推奨の警告に記載されているのかを確認するのが便利です。</target>
        </trans-unit>
        <trans-unit id="e7c33db323d7ae05a4a777eaa7e0692355dceeee" translate="yes" xml:space="preserve">
          <source>If you're not using &lt;code&gt;ecmaFeatures&lt;/code&gt; in your configuration or your custom/plugin rules and tests, then no change is needed.</source>
          <target state="translated">設定またはカスタム/プラグインのルールとテストで &lt;code&gt;ecmaFeatures&lt;/code&gt; を使用していない場合、変更は必要ありません。</target>
        </trans-unit>
        <trans-unit id="0e5d630cd8e1ad7d04f0f3ebb887b02dbcbde5a8" translate="yes" xml:space="preserve">
          <source>If you're planning on contributing to ESLint, then it's a good idea to fork the repository. You can find instructions for forking a repository at &lt;a href=&quot;https://help.github.com/articles/fork-a-repo/&quot;&gt;https://help.github.com/articles/fork-a-repo/&lt;/a&gt;. After forking the ESLint repository, you'll want to create a local copy of your fork.</source>
          <target state="translated">ESLintへの貢献を計画している場合は、リポジトリをフォークすることをお勧めします。リポジトリをフォークする手順については、&lt;a href=&quot;https://help.github.com/articles/fork-a-repo/&quot;&gt;https：&lt;/a&gt; //help.github.com/articles/fork-a-repo/を参照してください。ESLintリポジトリをフォークした後、フォークのローカルコピーを作成します。</target>
        </trans-unit>
        <trans-unit id="04c7fb910e2d3f13bf107bc9b013fc5fc7904efc" translate="yes" xml:space="preserve">
          <source>If you're requesting a change to a rule, it's helpful to include this information as well:</source>
          <target state="translated">ルールの変更を依頼する場合は、このような情報も入れておくと便利です。</target>
        </trans-unit>
        <trans-unit id="44e50b47a18d3a7403129f958f989d1c21f74408" translate="yes" xml:space="preserve">
          <source>If you're using &lt;code&gt;context.ecmaFeatures.modules&lt;/code&gt;, rewrite to check that the &lt;code&gt;sourceType&lt;/code&gt; property of the Program node is &lt;code&gt;&quot;module&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;context.ecmaFeatures.modules&lt;/code&gt; を使用している場合は、書き換えて、プログラムノードの &lt;code&gt;sourceType&lt;/code&gt; プロパティが &lt;code&gt;&quot;module&quot;&lt;/code&gt; であることを確認します。</target>
        </trans-unit>
        <trans-unit id="1fc559da69650e0770bde8a012bac60b284aed63" translate="yes" xml:space="preserve">
          <source>If you're using Node.js, however, &lt;code&gt;console&lt;/code&gt; is used to output information to the user and so is not strictly used for debugging purposes. If you are developing for Node.js then you most likely do not want this rule enabled.</source>
          <target state="translated">ただし、Node.jsを使用している場合、 &lt;code&gt;console&lt;/code&gt; はユーザーへの情報の出力に使用されるため、デバッグ目的で厳密に使用されるわけではありません。Node.js用に開発している場合は、このルールを有効にしたくない場合がほとんどです。</target>
        </trans-unit>
        <trans-unit id="6679e6e261401ed39ebd01362b8293e4ddca112e" translate="yes" xml:space="preserve">
          <source>If you're using a non-ES6 feature flag such as &lt;code&gt;context.ecmaFeatures.jsx&lt;/code&gt;, rewrite to check for &lt;code&gt;context.parserOptions.ecmaFeatures.jsx&lt;/code&gt;.</source>
          <target state="translated">ES6以外の機能フラグ（ &lt;code&gt;context.ecmaFeatures.jsx&lt;/code&gt; など）を使用している場合は、書き換えて &lt;code&gt;context.parserOptions.ecmaFeatures.jsx&lt;/code&gt; を確認します。</target>
        </trans-unit>
        <trans-unit id="a85d177b329bc6c730f23ff598ce3a4fb75b095d" translate="yes" xml:space="preserve">
          <source>If you're using an ES6 feature flag such as &lt;code&gt;context.ecmaFeatures.blockBindings&lt;/code&gt;, rewrite to check for &lt;code&gt;context.parserOptions.ecmaVersion &amp;gt; 5&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;context.ecmaFeatures.blockBindings&lt;/code&gt; などのES6機能フラグを使用している場合は、書き換えて &lt;code&gt;context.parserOptions.ecmaVersion &amp;gt; 5&lt;/code&gt; を確認します。</target>
        </trans-unit>
        <trans-unit id="0ff71978601ec2bbe9e3d1868a2d18412ce28bed" translate="yes" xml:space="preserve">
          <source>If you're using any non-ES6 flags in &lt;code&gt;ecmaFeatures&lt;/code&gt;, you need to move those inside of &lt;code&gt;parserOptions&lt;/code&gt;. For instance:</source>
          <target state="translated">&lt;code&gt;ecmaFeatures&lt;/code&gt; でES6以外のフラグを使用している場合は、それらを &lt;code&gt;parserOptions&lt;/code&gt; 内に移動する必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="5d5c9fc44eb094ac8f2b18978cbf3f0acccc994b" translate="yes" xml:space="preserve">
          <source>If you're using any of these flags, such as:</source>
          <target state="translated">などのフラグを使用しているのであれば</target>
        </trans-unit>
        <trans-unit id="6495d2f4fd019907eeb203fca9c3e68a5e7680ab" translate="yes" xml:space="preserve">
          <source>If you're using custom non-error values as Promise rejection reasons, you can turn off this rule.</source>
          <target state="translated">エラー以外のカスタム値をプロミスの拒否理由として使用している場合は、このルールをオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="b3dda6a82a85489dc460700036c64d7e04f74905" translate="yes" xml:space="preserve">
          <source>If you're using such an initialization inside of a loop, then you should disable this rule.</source>
          <target state="translated">ループ内でこのような初期化を使用している場合は、このルールを無効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="de18cfd7f994a6a4746d6a5b6b988915f27f6978" translate="yes" xml:space="preserve">
          <source>If you're writing custom ESLint rules, you might be interested in using selectors to examine specific parts of the AST. If you're configuring ESLint for your codebase, you might be interested in restricting particular syntax patterns with selectors.</source>
          <target state="translated">カスタムのESLintルールを書いている場合、セレクタを使ってASTの特定の部分を調べることに興味があるかもしれません。コードベースにESLintを設定している場合、セレクタを使って特定の構文パターンを制限することに興味があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="c96442ea1831fcb8ddebf6e89b51db125d24c596" translate="yes" xml:space="preserve">
          <source>If your code is only going to be executed in an ECMAScript 5 or higher environment, then you can safely leave this rule off.</source>
          <target state="translated">あなたのコードが ECMAScript 5 以上の環境でのみ実行される場合は、このルールをオフにしておいても問題ありません。</target>
        </trans-unit>
        <trans-unit id="7c1a1996cd5371119325ca66866f4edcd3530231" translate="yes" xml:space="preserve">
          <source>If your code is out-of-date, we might ask you to rebase. That means we want you to apply your changes on top of the latest upstream code. Make sure you have set up a &lt;a href=&quot;../development-environment&quot;&gt;development environment&lt;/a&gt; and then you can rebase using these commands:</source>
          <target state="translated">コードが古くなっている場合は、リベースをお願いすることがあります。つまり、最新のアップストリームコードの上に変更を適用する必要があります。&lt;a href=&quot;../development-environment&quot;&gt;開発環境&lt;/a&gt;がセットアップされていることを確認し、次のコマンドを使用してリベースできるようにします。</target>
        </trans-unit>
        <trans-unit id="51a50954cfa8c4532d799e153f3402761f00daa2" translate="yes" xml:space="preserve">
          <source>If your code is still very much in development and don't want to worry about stripping &lt;code&gt;debugger&lt;/code&gt; statements, then turn this rule off. You'll generally want to turn it back on when testing code prior to deployment.</source>
          <target state="translated">コードがまだ非常に開発中であり、 &lt;code&gt;debugger&lt;/code&gt; ステートメントの削除を心配したくない場合は、このルールをオフにします。デプロイ前にコードをテストするときは、通常、これをオンに戻します。</target>
        </trans-unit>
        <trans-unit id="83a5396f7b29a4f6527d5a1931cc0bcb3428da62" translate="yes" xml:space="preserve">
          <source>If your code will not be run in IE8 or below (a Node.js application, for example) and you'd prefer to allow trailing commas, turn this rule off.</source>
          <target state="translated">コードがIE8以下では実行されず(例えばNode.jsアプリケーションなど)、末尾のカンマを許可したい場合は、このルールをオフにしてください。</target>
        </trans-unit>
        <trans-unit id="f8f29c811490e5458b9805b99b4ea539001d53d1" translate="yes" xml:space="preserve">
          <source>If your codebase doesn't support async function syntax, there's no need to enable this rule.</source>
          <target state="translated">コードベースが非同期関数の構文をサポートしていない場合、このルールを有効にする必要はありません。</target>
        </trans-unit>
        <trans-unit id="a162368aefa62116f17df2fd8bc935578feec8ea" translate="yes" xml:space="preserve">
          <source>If your commit message is in the incorrect format, you'll be asked to update it. You can do so via:</source>
          <target state="translated">コミットメッセージの形式が間違っている場合は、更新するように求められます。これは以下の方法で行うことができます。</target>
        </trans-unit>
        <trans-unit id="ab5ccc8af6f48197d32df8b7d3e12fe2a0141524" translate="yes" xml:space="preserve">
          <source>If your configuration extends all core rules: after you upgrade to a newer major or minor version of ESLint, review the reported problems before you use the &lt;code&gt;--fix&lt;/code&gt; option on the &lt;a href=&quot;command-line-interface#fix&quot;&gt;command line&lt;/a&gt;, so you know if a new fixable rule will make changes to the code.</source>
          <target state="translated">構成がすべてのコアルールを拡張する場合：ESLintを新しいメジャーバージョンまたはマイナーバージョンにアップグレードした後、&lt;a href=&quot;command-line-interface#fix&quot;&gt;コマンドライン&lt;/a&gt;で &lt;code&gt;--fix&lt;/code&gt; オプションを使用する前に、報告された問題を確認して、新しい修正可能なルールが変更を加えるかどうかを確認しますコード。</target>
        </trans-unit>
        <trans-unit id="2559a41e901cadba989bfeffd57f3935b353bcb1" translate="yes" xml:space="preserve">
          <source>If your configuration extends the recommended rules: after you upgrade to a newer major version of ESLint, review the reported problems before you use the &lt;code&gt;--fix&lt;/code&gt; option on the &lt;a href=&quot;command-line-interface#fix&quot;&gt;command line&lt;/a&gt;, so you know if a new fixable recommended rule will make changes to the code.</source>
          <target state="translated">構成が推奨ルールを拡張する場合：ESLintの新しいメジャーバージョンにアップグレードした後、&lt;a href=&quot;command-line-interface#fix&quot;&gt;コマンドライン&lt;/a&gt;で &lt;code&gt;--fix&lt;/code&gt; オプションを使用する前に報告された問題を確認して、新しい修正可能な推奨ルールがコード。</target>
        </trans-unit>
        <trans-unit id="39f85b8e11f0a7287198c3637add2aa74d65ec3a" translate="yes" xml:space="preserve">
          <source>If your project will not be following a consistent comma-spacing pattern, turn this rule off.</source>
          <target state="translated">プロジェクトのコンマ間隔が一貫していない場合は、このルールをオフにします。</target>
        </trans-unit>
        <trans-unit id="b2741db66d6831acaf061c23673437b93b79e590" translate="yes" xml:space="preserve">
          <source>If your project will not be using ES5 property getters you do not need this rule.</source>
          <target state="translated">プロジェクトでES5プロパティゲッターを使用しない場合は、このルールは必要ありません。</target>
        </trans-unit>
        <trans-unit id="bab195dfe6cfd05f543eca0ef2bf531274ab3593" translate="yes" xml:space="preserve">
          <source>If your project will not be using a common operator line break style, turn this rule off.</source>
          <target state="translated">プロジェクトで共通のオペレータ改行スタイルを使用しない場合は、このルールをオフにします。</target>
        </trans-unit>
        <trans-unit id="2945d370984bd3d31485c9bde06fc75b8ba6634f" translate="yes" xml:space="preserve">
          <source>If your project will not be using generators or you are not concerned with spacing consistency, you do not need this rule.</source>
          <target state="translated">プロジェクトでジェネレータを使用しない場合や、間隔の一貫性を気にしない場合は、このルールは必要ありません。</target>
        </trans-unit>
        <trans-unit id="b5ba84c31d79b821b596dda291e464837704ee5d" translate="yes" xml:space="preserve">
          <source>If your project will not be using generators you do not need this rule.</source>
          <target state="translated">プロジェクトでジェネレーターを使用しない場合は、このルールは必要ありません。</target>
        </trans-unit>
        <trans-unit id="3b403b66e02ddb4237f2f89a2eff187617c1cbaf" translate="yes" xml:space="preserve">
          <source>If your rule is disallowing something, prefix it with &lt;code&gt;no-&lt;/code&gt; such as &lt;code&gt;no-eval&lt;/code&gt; for disallowing &lt;code&gt;eval()&lt;/code&gt; and &lt;code&gt;no-debugger&lt;/code&gt; for disallowing &lt;code&gt;debugger&lt;/code&gt;.</source>
          <target state="translated">あなたのルールは何かを禁止されている場合は、を前に付け &lt;code&gt;no-&lt;/code&gt; のような &lt;code&gt;no-eval&lt;/code&gt; 許可しないため &lt;code&gt;eval()&lt;/code&gt; と &lt;code&gt;no-debugger&lt;/code&gt; 許可しないために &lt;code&gt;debugger&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2824b845991c6bbe7e78b00c6a0fb1a3e916869b" translate="yes" xml:space="preserve">
          <source>If your rule is enforcing the inclusion of something, use a short name without a special prefix.</source>
          <target state="translated">ルールに何かを含めることを強制する場合は、特別な接頭辞を付けずに短い名前を使用してください。</target>
        </trans-unit>
        <trans-unit id="2011f28355e4125316a3bdd688cb7db66dd75549" translate="yes" xml:space="preserve">
          <source>If your rule needs to get the actual JavaScript source to work with, then use the &lt;code&gt;sourceCode.getText()&lt;/code&gt; method. This method works as follows:</source>
          <target state="translated">ルールで実際のJavaScriptソースを処理する必要がある場合は、 &lt;code&gt;sourceCode.getText()&lt;/code&gt; メソッドを使用します。この方法は次のように機能します。</target>
        </trans-unit>
        <trans-unit id="e1ebf009df56e29e74f07a68f239e17913f4a1d3" translate="yes" xml:space="preserve">
          <source>If your shareable config depends on a plugin, you should also specify it as a &lt;code&gt;peerDependency&lt;/code&gt; (plugins will be loaded relative to the end user's project, so the end user is required to install the plugins they need). However, if your shareable config depends on a third-party parser or another shareable config, you can specify these packages as &lt;code&gt;dependencies&lt;/code&gt;.</source>
          <target state="translated">共有可能な構成がプラグインに依存している場合は、それを &lt;code&gt;peerDependency&lt;/code&gt; として指定する必要もあります（プラグインはエンドユーザーのプロジェクトに対して相対的に読み込まれるため、エンドユーザーは必要なプラグインをインストールする必要があります）。ただし、共有可能な構成がサードパーティのパーサーまたは別の共有可能な構成に依存している場合は、これらのパッケージを &lt;code&gt;dependencies&lt;/code&gt; として指定できます。</target>
        </trans-unit>
        <trans-unit id="1856f3abeff9591a2a7d76238103bbed25f63cd8" translate="yes" xml:space="preserve">
          <source>If/else statements</source>
          <target state="translated">If/else文</target>
        </trans-unit>
        <trans-unit id="88efdf7b0a638bc58f75e1b4e8e0f081ca07ff33" translate="yes" xml:space="preserve">
          <source>Ignore patterns behave according to the &lt;code&gt;.gitignore&lt;/code&gt;&lt;a href=&quot;https://git-scm.com/docs/gitignore&quot;&gt;specification&lt;/a&gt;.</source>
          <target state="translated">無視パターンは &lt;code&gt;.gitignore&lt;/code&gt; &lt;a href=&quot;https://git-scm.com/docs/gitignore&quot;&gt;仕様&lt;/a&gt;に従って動作します。</target>
        </trans-unit>
        <trans-unit id="e0c0968ebdf38ddfdbaec683b916b61dcb603c54" translate="yes" xml:space="preserve">
          <source>Ignored File Warnings</source>
          <target state="translated">無視されたファイルの警告</target>
        </trans-unit>
        <trans-unit id="d261e62109255eb2c88ce241ececcda865af665d" translate="yes" xml:space="preserve">
          <source>Ignores the member sorting within a &lt;code&gt;multiple&lt;/code&gt; member import declaration.</source>
          <target state="translated">&lt;code&gt;multiple&lt;/code&gt; メンバーのインポート宣言内のメンバーのソートを無視します。</target>
        </trans-unit>
        <trans-unit id="97f2ea65d88865525c32c1dc0fdaabf6454b7ce5" translate="yes" xml:space="preserve">
          <source>Ignores the sorting of import declaration statements.</source>
          <target state="translated">インポート宣言文のソートを無視します。</target>
        </trans-unit>
        <trans-unit id="fc6c2032aae29f2bf4cdf1ecb565f44e6c98df5a" translate="yes" xml:space="preserve">
          <source>Ignoring Files and Directories</source>
          <target state="translated">ファイルとディレクトリを無視する</target>
        </trans-unit>
        <trans-unit id="87a5b84b90eaf9c6a4ea4cf7776f8cdbe987e92e" translate="yes" xml:space="preserve">
          <source>Ignoring files</source>
          <target state="translated">ファイルを無視する</target>
        </trans-unit>
        <trans-unit id="c58183c9a7f3073a5d043430bb488897214cfb72" translate="yes" xml:space="preserve">
          <source>Ignoring files from linting</source>
          <target state="translated">リンティングからのファイルを無視する</target>
        </trans-unit>
        <trans-unit id="1c756c5607fbc3a3e749301ea2e32381c2238f06" translate="yes" xml:space="preserve">
          <source>Immediately-Invoked Function Expression (IIFE)</source>
          <target state="translated">即時誘発機能発現 (IIFE)</target>
        </trans-unit>
        <trans-unit id="8670c08fed9affa1bdffc5de7ab5b3464ea35b75" translate="yes" xml:space="preserve">
          <source>Immediately-invoked functions should surround the entire function call with parentheses.</source>
          <target state="translated">即時に呼び出された関数は、関数呼び出し全体を括弧で囲む必要があります。</target>
        </trans-unit>
        <trans-unit id="04ab9b79c8691d1b53dc55cdbba436a62027f12a" translate="yes" xml:space="preserve">
          <source>Implementation is Your Responsibility</source>
          <target state="translated">実装はあなたの責任</target>
        </trans-unit>
        <trans-unit id="1de41e87576d1cd7f3d74b3b5efff943cda9a84d" translate="yes" xml:space="preserve">
          <source>Import Sorting (sort-imports)</source>
          <target state="translated">インポートソート (ソートインポート)</target>
        </trans-unit>
        <trans-unit id="e0559377cfba6b8aed12863122b1b2dcc118cb64" translate="yes" xml:space="preserve">
          <source>ImportDeclaration</source>
          <target state="translated">ImportDeclaration</target>
        </trans-unit>
        <trans-unit id="e23adeb5c008391316e0c7840edb5f056d234e51" translate="yes" xml:space="preserve">
          <source>ImportDeclaration and ExportDeclaration</source>
          <target state="translated">ImportDeclarationとExportDeclaration</target>
        </trans-unit>
        <trans-unit id="512f7b91ec0d8627411f038f8a785a9f4f839ad5" translate="yes" xml:space="preserve">
          <source>Imports are an ES6/ES2015 standard for making the functionality of other modules available in your current module. In CommonJS this is implemented through the &lt;code&gt;require()&lt;/code&gt; call which makes this ESLint rule roughly equivalent to its CommonJS counterpart &lt;code&gt;no-restricted-modules&lt;/code&gt;.</source>
          <target state="translated">インポートは、現在のモジュールで他のモジュールの機能を使用できるようにするためのES6 / ES2015標準です。CommonJSでは、これは &lt;code&gt;require()&lt;/code&gt; 呼び出しを介して実装され、このESLintルールは、CommonJSの対応する &lt;code&gt;no-restricted-modules&lt;/code&gt; とほぼ同等になります。</target>
        </trans-unit>
        <trans-unit id="18df2daa90a7f6f769b0f156d9d53dd73803f193" translate="yes" xml:space="preserve">
          <source>In 0.x, the &lt;code&gt;cli&lt;/code&gt; object was exported for use by external tools. It was later deprecated in favor of &lt;code&gt;CLIEngine&lt;/code&gt;. In v1.0.0, we are no longer exporting &lt;code&gt;cli&lt;/code&gt; as it should not be used by external tools. This will break existing tools that make use of it.</source>
          <target state="translated">0.xでは、 &lt;code&gt;cli&lt;/code&gt; オブジェクトは外部ツールで使用するためにエクスポートされました。後に &lt;code&gt;CLIEngine&lt;/code&gt; を支持して廃止されました。v1.0.0では、外部ツールで使用されるべきではないため、 &lt;code&gt;cli&lt;/code&gt; をエクスポートしなくなりました。これは、それを利用する既存のツールを壊します。</target>
        </trans-unit>
        <trans-unit id="5898b7f28a0e71c9b161ddb4ca225bd973b5e97c" translate="yes" xml:space="preserve">
          <source>In 2.0.0, &lt;code&gt;window&lt;/code&gt; is no longer located in &lt;code&gt;Scope#through&lt;/code&gt; because we have added back the correct declaration. That means you can reference the &lt;code&gt;window&lt;/code&gt; object (or any other global object) directly. So the previous example would change to this:</source>
          <target state="translated">2.0.0では、正しい宣言が追加されたため、 &lt;code&gt;window&lt;/code&gt; は &lt;code&gt;Scope#through&lt;/code&gt; に配置されなくなりました。つまり、 &lt;code&gt;window&lt;/code&gt; オブジェクト（またはその他のグローバルオブジェクト）を直接参照できます。したがって、前の例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="05d96a1c4cc6fce528d734e47e75612567aa64df" translate="yes" xml:space="preserve">
          <source>In 2.0.0, the following 11 rules were added to &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt;.</source>
          <target state="translated">2.0.0では、次の11のルールが &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt; に追加されました。</target>
        </trans-unit>
        <trans-unit id="c17a66e49943e18d906b5c12b9a5610dc4ab2300" translate="yes" xml:space="preserve">
          <source>In 3.0.0, the following rules were added to &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt;:</source>
          <target state="translated">3.0.0では、 &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt; 次のルールが追加されました。</target>
        </trans-unit>
        <trans-unit id="d9538a421f15d2f2ded0595be1de71484d2215ae" translate="yes" xml:space="preserve">
          <source>In 3.x, there was a bug where references to scoped NPM packages as plugins in config files could omit the scope. For example, in 3.x the following config was legal:</source>
          <target state="translated">3.xでは、設定ファイル内のプラグインとしてスコープされたNPMパッケージを参照すると、スコープが省略されてしまうバグがありました。例えば、3.xでは以下のような設定は合法でした。</target>
        </trans-unit>
        <trans-unit id="4a1986599cc9b6d638b666c0d5c5c84604abcd28" translate="yes" xml:space="preserve">
          <source>In 4.0, shebang comments are treated as comment tokens of type &lt;code&gt;Shebang&lt;/code&gt; and will be returned by any &lt;code&gt;SourceCode&lt;/code&gt; method that returns comments. The goal of this change is to make working with shebang comments more consistent with how other tokens are handled.</source>
          <target state="translated">4.0では、シェバングコメントはタイプのコメントトークンとして扱われ &lt;code&gt;Shebang&lt;/code&gt; といずれかによって返される &lt;code&gt;SourceCode&lt;/code&gt; 戻りのコメントという方法。この変更の目的は、シバンコメントの操作を他のトークンの処理方法とより一致させることです。</target>
        </trans-unit>
        <trans-unit id="16bc04c506c5ab833d227d4d6e4907ae0bdb1f50" translate="yes" xml:space="preserve">
          <source>In 4.0, we have moved away from the concept of comment attachment and have moved all comment handling logic into ESLint itself. This should make it easier to develop custom parsers, but it also means that AST nodes will no longer have &lt;code&gt;leadingComments&lt;/code&gt; and &lt;code&gt;trailingComments&lt;/code&gt; properties. Conceptually, rule authors can now think of comments in the context of tokens rather than AST nodes.</source>
          <target state="translated">4.0では、コメント添付の概念から離れて、すべてのコメント処理ロジックをESLint自体に移動しました。これにより、カスタムパーサーの開発が容易になりますが、ASTノードに &lt;code&gt;leadingComments&lt;/code&gt; プロパティと &lt;code&gt;trailingComments&lt;/code&gt; プロパティがなくなることも意味します。概念的には、ルール作成者は、ASTノードではなくトークンのコンテキストでコメントを考えることができます。</target>
        </trans-unit>
        <trans-unit id="00f714d17f0050b761984997f366964ef0c19b70" translate="yes" xml:space="preserve">
          <source>In 4.0.0, the &lt;code&gt;indent&lt;/code&gt; rule has been rewritten. The new version of the rule will report some indentation errors that the old version of the rule did not catch. Additionally, the indentation of &lt;code&gt;MemberExpression&lt;/code&gt; nodes, function parameters, and function arguments will now be checked by default (it was previously ignored by default for backwards compatibility).</source>
          <target state="translated">4.0.0では、 &lt;code&gt;indent&lt;/code&gt; ルールが書き直されました。新しいバージョンのルールは、古いバージョンのルールがキャッチしなかったインデントエラーを報告します。さらに、 &lt;code&gt;MemberExpression&lt;/code&gt; ノード、関数パラメーター、および関数引数のインデントがデフォルトでチェックされるようになりました（以前は、下位互換性のためにデフォルトで無視されていました）。</target>
        </trans-unit>
        <trans-unit id="520e73186dae0d7b16f745db5f763187ed794910" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;ECMAScript&lt;/strong&gt; modules, which always have strict mode semantics, the directives are unnecessary.</source>
          <target state="translated">&lt;strong&gt;ECMAScript&lt;/strong&gt;常にstrictモードのセマンティクスを持つモジュール、ディレクティブは不要です。</target>
        </trans-unit>
        <trans-unit id="65d11792aba2f3af0b5566f3cb910f10a5d5d222" translate="yes" xml:space="preserve">
          <source>In April 2016, we &lt;a href=&quot;https://eslint.org/blog/2016/04/welcoming-jscs-to-eslint&quot;&gt;announced&lt;/a&gt; that the JSCS project was shutting down and the JSCS team would be joining the ESLint team. This guide is intended to help those who are using JSCS to migrate their settings and projects to use ESLint. We've tried to automate as much of the conversion as possible, but there are some manual changes that are needed.</source>
          <target state="translated">2016年4月、JSCSプロジェクトが終了し、JSCSチームがESLintチームに加わることを&lt;a href=&quot;https://eslint.org/blog/2016/04/welcoming-jscs-to-eslint&quot;&gt;発表&lt;/a&gt;しました。このガイドは、JSCを使用して設定とプロジェクトを移行し、ESLintを使用するユーザーを支援することを目的としています。可能な限り多くの変換を自動化しようとしましたが、必要な手動の変更がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="b23708a1c68d550b884d817586351e04c0ec1e6b" translate="yes" xml:space="preserve">
          <source>In ECMAScript 5.1, &lt;code&gt;Object.create&lt;/code&gt; was added, which enables the creation of objects with a specified &lt;code&gt;[[Prototype]]&lt;/code&gt;. &lt;code&gt;Object.create(null)&lt;/code&gt; is a common pattern used to create objects that will be used as a Map. This can lead to errors when it is assumed that objects will have properties from &lt;code&gt;Object.prototype&lt;/code&gt;. This rule prevents calling some &lt;code&gt;Object.prototype&lt;/code&gt; methods directly from an object.</source>
          <target state="translated">ECMAScript 5.1では、 &lt;code&gt;Object.create&lt;/code&gt; が追加されました。これにより、指定された &lt;code&gt;[[Prototype]]&lt;/code&gt; でオブジェクトを作成できます。 &lt;code&gt;Object.create(null)&lt;/code&gt; は、マップとして使用されるオブジェクトの作成に使用される一般的なパターンです。オブジェクトが &lt;code&gt;Object.prototype&lt;/code&gt; のプロパティを持つと想定されている場合、これによりエラーが発生する可能性があります。このルールにより、一部の &lt;code&gt;Object.prototype&lt;/code&gt; メソッドをオブジェクトから直接呼び出せなくなります。</target>
        </trans-unit>
        <trans-unit id="425012cd9483a50d08725272bb44280b01fa5c2b" translate="yes" xml:space="preserve">
          <source>In ES2015 (ES6) or later, if you don't want to be notified about &lt;code&gt;Function.prototype.apply()&lt;/code&gt; callings, you can safely disable this rule.</source>
          <target state="translated">ES2015（ES6）以降では、 &lt;code&gt;Function.prototype.apply()&lt;/code&gt; の呼び出しについて通知を受けたくない場合は、このルールを安全に無効にできます。</target>
        </trans-unit>
        <trans-unit id="7288feb7f3cbe9e2c5aa84dc1b8995f09043f354" translate="yes" xml:space="preserve">
          <source>In ES2015 (ES6) or later, if you don't want to be notified about &lt;code&gt;arguments&lt;/code&gt; variables, then it's safe to disable this rule.</source>
          <target state="translated">ES2015（ES6）以降では、 &lt;code&gt;arguments&lt;/code&gt; 変数について通知を受けたくない場合は、このルールを無効にしても安全です。</target>
        </trans-unit>
        <trans-unit id="c6e27cc5398617c234e14f6fdd9c136c292789aa" translate="yes" xml:space="preserve">
          <source>In ES2015 (ES6) or later, if you don't want to be notified about duplicate names in class members, you can safely disable this rule.</source>
          <target state="translated">ES2015(ES6)以降では、クラスメンバーの名前が重複していることを通知されたくない場合は、このルールを安全に無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="1b0ab634b81ee05b23f8702255df744fed8eb12f" translate="yes" xml:space="preserve">
          <source>In ES2015 (ES6) or later, if you don't want to be notified about places where Reflect could be used, you can safely disable this rule.</source>
          <target state="translated">ES2015(ES6)以降では、Reflectが使用される可能性のある場所を通知されたくない場合は、このルールを安全に無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="d2eb7a2147b19e9a68b53dd99798118a281e8775" translate="yes" xml:space="preserve">
          <source>In ES2015 (ES6) or later, if you don't want to be notified about string concatenation, you can safely disable this rule.</source>
          <target state="translated">ES2015(ES6)以降では、文字列の連結について通知を受けたくない場合は、このルールを安全に無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="79284304dcf5a3c4453db8bcc5a3d21330ba7616" translate="yes" xml:space="preserve">
          <source>In ES2015 (ES6), we can use template literals instead of string concatenation.</source>
          <target state="translated">ES2015(ES6)では、文字列連結の代わりにテンプレートリテラルを使用できるようになりました。</target>
        </trans-unit>
        <trans-unit id="c45a211d3e50a5f07def68689fe81ce6f3396159" translate="yes" xml:space="preserve">
          <source>In ES2015, one can use spread syntax to call variadic functions.</source>
          <target state="translated">ES2015では、スプレッド構文を使用してバリアード関数を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="76009c166d3d239347600943770e4ce17bd2a6bd" translate="yes" xml:space="preserve">
          <source>In ES6+ environments that allow the use of function expressions when describing callbacks or function arguments.</source>
          <target state="translated">ES6+環境で、コールバックや関数の引数を記述する際に関数式を使用できるようになりました。</target>
        </trans-unit>
        <trans-unit id="d6e9567bb6bc4821161b78d2c46b2c8ee02a2b83" translate="yes" xml:space="preserve">
          <source>In ES6, block-level bindings (&lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;) introduce a &quot;temporal dead zone&quot; where a &lt;code&gt;ReferenceError&lt;/code&gt; will be thrown with any attempt to access the variable before its declaration.</source>
          <target state="translated">ES6では、ブロックレベルのバインディング（ &lt;code&gt;let&lt;/code&gt; および &lt;code&gt;const&lt;/code&gt; ）が「一時的なデッドゾーン」を導入し、宣言の前に変数にアクセスしようとすると &lt;code&gt;ReferenceError&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="3c283b77541c32dd8ff6097bc78fb8ab4c5daff4" translate="yes" xml:space="preserve">
          <source>In ES6, code blocks may create a new scope if a block-level binding (&lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;), a class declaration or a function declaration (in strict mode) are present. A block is not considered redundant in these cases.</source>
          <target state="translated">ES6では、ブロックレベルのバインディング（ &lt;code&gt;let&lt;/code&gt; および &lt;code&gt;const&lt;/code&gt; ）、クラス宣言、または関数宣言（strictモード）が存在する場合、コードブロックが新しいスコープを作成する場合があります。これらの場合、ブロックは冗長とは見なされません。</target>
        </trans-unit>
        <trans-unit id="e5f75e3e4423421f164920649e64e4ef38d574fa" translate="yes" xml:space="preserve">
          <source>In ESLint v5, an unsuccessful linting run due to a fatal error will result in an exit code of 2, rather than 1.</source>
          <target state="translated">ESLint v5では、致命的なエラーによるリントの実行に失敗した場合、終了コードは1ではなく2になります。</target>
        </trans-unit>
        <trans-unit id="eea08ca030095038bf25a737549a277fbe3aba08" translate="yes" xml:space="preserve">
          <source>In ESLint v5, reporting a problem without providing a message always results in an error.</source>
          <target state="translated">ESLint v5では、メッセージを提供せずに問題を報告すると必ずエラーになります。</target>
        </trans-unit>
        <trans-unit id="14faa4b6b34ee8eda4c12e45811ba40e9496a537" translate="yes" xml:space="preserve">
          <source>In ESLint v5, the &lt;code&gt;context.getScope()&lt;/code&gt; method has the same behavior regardless of &lt;code&gt;parserOptions.ecmaVersion&lt;/code&gt; and returns the proper scope. See &lt;a href=&quot;../developer-guide/working-with-rules#contextgetscope&quot;&gt;the documentation&lt;/a&gt; for more details on which scopes are returned.</source>
          <target state="translated">ESLint v5では、 &lt;code&gt;context.getScope()&lt;/code&gt; メソッドは &lt;code&gt;parserOptions.ecmaVersion&lt;/code&gt; に関係なく同じ動作をし、適切なスコープを返します。返されるスコープの詳細について&lt;a href=&quot;../developer-guide/working-with-rules#contextgetscope&quot;&gt;は、ドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="bb1ef5c27afbdde2e7a8e173d72c21f7e3ae1a66" translate="yes" xml:space="preserve">
          <source>In ESLint v5, the &lt;code&gt;parent&lt;/code&gt; property is set on all AST nodes before any rules have access to the AST. This makes it easier to write some rules, because the &lt;code&gt;parent&lt;/code&gt; property is always available rather than being mutated behind the scenes. However, as a side-effect of having &lt;code&gt;parent&lt;/code&gt; properties, the AST object has a circular structure the first time a rule sees it (previously, it only had a circular structure after the first rule listeners were called). As a result, a custom rule that enumerates all properties of a node in order to traverse the AST might now loop forever or run out of memory if it does not check for cycles properly.</source>
          <target state="translated">ESLint v5では、ルールがASTにアクセスする前に、すべてのASTノードに &lt;code&gt;parent&lt;/code&gt; プロパティが設定されています。これにより、 &lt;code&gt;parent&lt;/code&gt; プロパティはバックグラウンドで変更されるのではなく常に利用できるため、いくつかのルールを簡単に記述できます。ただし、 &lt;code&gt;parent&lt;/code&gt; プロパティがあることの副作用として、ASTオブジェクトは、ルールが最初に参照したときに循環構造を持っています（以前は、最初のルールリスナーが呼び出された後にのみ、循環構造を持ちました）。その結果、ASTをトラバースするためにノードのすべてのプロパティを列挙するカスタムルールは、サイクルを適切にチェックしない場合、永久にループするか、メモリ不足になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="02e6562154408a0cd95ff399370b02dae59011b9" translate="yes" xml:space="preserve">
          <source>In ESLint v5, the default parser will now always give the &lt;code&gt;...data&lt;/code&gt; AST node the &lt;code&gt;RestElement&lt;/code&gt; type, even if the (now deprecated) &lt;a href=&quot;#experimental-object-rest-spread&quot;&gt;&lt;code&gt;experimentalObjectRestSpread&lt;/code&gt;&lt;/a&gt; option is enabled. This makes the AST compliant with the current ESTree spec.</source>
          <target state="translated">ESLint v5では、（現在非推奨の）&lt;a href=&quot;#experimental-object-rest-spread&quot;&gt; &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; &lt;/a&gt;オプションが有効になっている場合でも、デフォルトのパーサーは常に &lt;code&gt;...data&lt;/code&gt; ASTノードに &lt;code&gt;RestElement&lt;/code&gt; タイプを提供します。これにより、ASTが現在のESTree仕様に準拠します。</target>
        </trans-unit>
        <trans-unit id="31a881cb748835a072bf8830b1288b7196f3ecf5" translate="yes" xml:space="preserve">
          <source>In ESLint v5, the default parser will now always give the &lt;code&gt;...data&lt;/code&gt; AST node the &lt;code&gt;SpreadElement&lt;/code&gt; type, even if the (now deprecated) &lt;a href=&quot;#experimental-object-rest-spread&quot;&gt;&lt;code&gt;experimentalObjectRestSpread&lt;/code&gt;&lt;/a&gt; option is enabled. This makes the AST compliant with the current ESTree spec.</source>
          <target state="translated">ESLint v5では、（現在非推奨の）&lt;a href=&quot;#experimental-object-rest-spread&quot;&gt; &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; &lt;/a&gt;オプションが有効になっている場合でも、デフォルトのパーサーは常に &lt;code&gt;...data&lt;/code&gt; ASTノードに &lt;code&gt;SpreadElement&lt;/code&gt; タイプを提供します。これにより、ASTが現在のESTree仕様に準拠します。</target>
        </trans-unit>
        <trans-unit id="d4431524bfd5c4f07af8235581cb94fca4ff8732" translate="yes" xml:space="preserve">
          <source>In ESLint v6, &lt;code&gt;Linter&lt;/code&gt; will no longer perform any filesystem operations, including loading parsers.</source>
          <target state="translated">ESLint v6では、 &lt;code&gt;Linter&lt;/code&gt; はパーサーのロードを含むファイルシステム操作を実行しなくなりました。</target>
        </trans-unit>
        <trans-unit id="bf67a660608cd3e1668cf8ebedf7ff745592d095" translate="yes" xml:space="preserve">
          <source>In ESLint v6.0.0, a parent config always has precedence over extended configs, even with &lt;code&gt;overrides&lt;/code&gt; blocks.</source>
          <target state="translated">ESLint v6.0.0では、 &lt;code&gt;overrides&lt;/code&gt; ブロックがある場合でも、親構成は常に拡張構成よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="c8abbd9afcc5de245675ea3f2aa4947437c8ef25" translate="yes" xml:space="preserve">
          <source>In ESLint, there's a similar option when you use &lt;code&gt;--init&lt;/code&gt;. Just select &quot;Inspect your JavaScript file(s)&quot;:</source>
          <target state="translated">ESLintには、-- &lt;code&gt;--init&lt;/code&gt; を使用するときに同様のオプションがあります。「JavaScriptファイルを検査する」を選択するだけです。</target>
        </trans-unit>
        <trans-unit id="5b59c31296d60785bf4dae3841ef03bc4bd1dfda" translate="yes" xml:space="preserve">
          <source>In ESLint, you can also pipe in code, but you need to use the &lt;code&gt;--stdin&lt;/code&gt; flag:</source>
          <target state="translated">ESLintでは、コードでパイプすることもできますが、 &lt;code&gt;--stdin&lt;/code&gt; フラグを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="acd5139582c073618b8ef6f0a7ca63779857d618" translate="yes" xml:space="preserve">
          <source>In IE 8 and earlier, the catch clause parameter can overwrite the value of a variable in the outer scope, if that variable has the same name as the catch clause parameter.</source>
          <target state="translated">IE 8 およびそれ以前のバージョンでは、外部スコープ内の変数が catch 節パラメータと同じ名前を持つ場合、 catch 節パラメータが変数の値を上書きすることができます。</target>
        </trans-unit>
        <trans-unit id="2adf1aee416a521238a7c811bd9bd2ecf5e14167" translate="yes" xml:space="preserve">
          <source>In JSCS, you can pipe code in like this:</source>
          <target state="translated">JSCSでは、このようにコードをパイプインすることができます。</target>
        </trans-unit>
        <trans-unit id="3703d4c15bc56ac828c52126bdc5c7540593b23a" translate="yes" xml:space="preserve">
          <source>In JSON:</source>
          <target state="translated">JSONでは。</target>
        </trans-unit>
        <trans-unit id="a82e67122ca4aaac99057c3557502dcfc9509e84" translate="yes" xml:space="preserve">
          <source>In JavaScript that is designed to be executed in the browser, it's considered a best practice to avoid using methods on &lt;code&gt;console&lt;/code&gt;. Such messages are considered to be for debugging purposes and therefore not suitable to ship to the client. In general, calls using &lt;code&gt;console&lt;/code&gt; should be stripped before being pushed to production.</source>
          <target state="translated">ブラウザで実行するように設計されたJavaScriptでは、 &lt;code&gt;console&lt;/code&gt; メソッドを使用しないことをお勧めします。このようなメッセージはデバッグ目的であると見なされるため、クライアントへの配布には適していません。一般に、 &lt;code&gt;console&lt;/code&gt; を使用した呼び出しは、本番環境にプッシュする前に取り除く必要があります。</target>
        </trans-unit>
        <trans-unit id="e26a4ff80b5f3f66c04e4918b45e8756a1c26153" translate="yes" xml:space="preserve">
          <source>In JavaScript, &lt;code&gt;NaN&lt;/code&gt; is a special value of the &lt;code&gt;Number&lt;/code&gt; type. It's used to represent any of the &quot;not-a-number&quot; values represented by the double-precision 64-bit format as specified by the IEEE Standard for Binary Floating-Point Arithmetic.</source>
          <target state="translated">JavaScriptでは、 &lt;code&gt;NaN&lt;/code&gt; は &lt;code&gt;Number&lt;/code&gt; 型の特別な値です。これは、IEEEの2進浮動小数点演算の規格で指定されている倍精度64ビット形式で表される「非数」の値を表すために使用されます。</target>
        </trans-unit>
        <trans-unit id="9bd2fc151901451626280161ac11b4b93b4b50fd" translate="yes" xml:space="preserve">
          <source>In JavaScript, a variable that is declared and not initialized to any value automatically gets the value of &lt;code&gt;undefined&lt;/code&gt;. For example:</source>
          <target state="translated">JavaScriptでは、宣言され、どの値にも初期化されていない変数は、 &lt;code&gt;undefined&lt;/code&gt; の値を自動的に取得します。例えば：</target>
        </trans-unit>
        <trans-unit id="b60aba9b6eda269c9c92c576d2d7b17436dc1a04" translate="yes" xml:space="preserve">
          <source>In JavaScript, it's possible to redeclare the same variable name using &lt;code&gt;var&lt;/code&gt;. This can lead to confusion as to where the variable is actually declared and initialized.</source>
          <target state="translated">JavaScriptでは、 &lt;code&gt;var&lt;/code&gt; を使用して同じ変数名を再宣言することができます。これにより、変数が実際に宣言および初期化される場所に関して混乱が生じる可能性があります。</target>
        </trans-unit>
        <trans-unit id="ae3ae9da35b031e6fe272d750d08d43b247a9241" translate="yes" xml:space="preserve">
          <source>In JavaScript, one can access properties using the dot notation (&lt;code&gt;foo.bar&lt;/code&gt;) or square-bracket notation (&lt;code&gt;foo[&quot;bar&quot;]&lt;/code&gt;). However, the dot notation is often preferred because it is easier to read, less verbose, and works better with aggressive JavaScript minimizers.</source>
          <target state="translated">JavaScriptでは、ドット表記（ &lt;code&gt;foo.bar&lt;/code&gt; ）または角括弧表記（ &lt;code&gt;foo[&quot;bar&quot;]&lt;/code&gt; ）を使用してプロパティにアクセスできます。ただし、ドット表記は、読みやすく、冗長ではなく、積極的なJavaScript最小化ツールでより適切に機能するため、よく使用されます。</target>
        </trans-unit>
        <trans-unit id="79c19c72e76be7de1e81564fdd907fa54ae18eb9" translate="yes" xml:space="preserve">
          <source>In JavaScript, prior to ES6, a function declaration is only allowed in the first level of a program or the body of another function, though parsers sometimes &lt;a href=&quot;https://code.google.com/p/esprima/issues/detail?id=422&quot;&gt;erroneously accept them elsewhere&lt;/a&gt;. This only applies to function declarations; named or anonymous function expressions can occur anywhere an expression is permitted.</source>
          <target state="translated">JavaScriptでは、ES6より前では、関数宣言はプログラムの最初のレベルまたは別の関数の本体でのみ許可されていますが、パーサーは&lt;a href=&quot;https://code.google.com/p/esprima/issues/detail?id=422&quot;&gt;他の場所で誤って受け入れる場合があります&lt;/a&gt;。これは関数宣言にのみ適用されます。名前付き関数または無名関数の式は、式が許可されている場所であればどこでも使用できます。</target>
        </trans-unit>
        <trans-unit id="803af5f5d14791d201ae8d61d435f1c64184268e" translate="yes" xml:space="preserve">
          <source>In JavaScript, prior to ES6, standalone code blocks delimited by curly braces do not create a new scope and have no use. For example, these curly braces do nothing to &lt;code&gt;foo&lt;/code&gt;:</source>
          <target state="translated">JavaScriptでは、ES6より前のバージョンでは、中括弧で区切られたスタンドアロンコードブロックは新しいスコープを作成せず、使用できません。たとえば、これらの中括弧は &lt;code&gt;foo&lt;/code&gt; には何もしません。</target>
        </trans-unit>
        <trans-unit id="c8e0cb0f20079a63c0ebee7c35d2763450e0da3b" translate="yes" xml:space="preserve">
          <source>In JavaScript, prior to ES6, variable and function declarations are hoisted to the top of a scope, so it's possible to use identifiers before their formal declarations in code. This can be confusing and some believe it is best to always declare variables and functions before using them.</source>
          <target state="translated">JavaScript では、ES6 より前のバージョンでは、変数や関数の宣言はスコープの先頭に置かれていたため、コード内で正式に宣言する前に識別子を使用することができました。これは混乱を招く可能性があり、変数や関数を使用する前に常に宣言しておくのがベストだと考える人もいます。</target>
        </trans-unit>
        <trans-unit id="1823798885782ba7322754df0cb99b7b3ed765ea" translate="yes" xml:space="preserve">
          <source>In JavaScript, returning a value in the constructor of a class may be a mistake. Forbidding this pattern prevents mistakes resulting from unfamiliarity with the language or a copy-paste error.</source>
          <target state="translated">JavaScriptでは、クラスのコンストラクタで値を返すのは間違いかもしれません。このパターンを禁止することで、言語に慣れていないことやコピーペーストエラーによるミスを防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="d5dbdb528c78d6964e655c920b5562c6ac7357b6" translate="yes" xml:space="preserve">
          <source>In JavaScript, there are a lot of different ways to convert value types. Some of them might be hard to read and understand.</source>
          <target state="translated">JavaScriptでは、値の型を変換するためのさまざまな方法があります。その中には、読みにくくて理解しにくいものもあるかもしれません。</target>
        </trans-unit>
        <trans-unit id="5f85fcb870ec98a4b8e042f1f4f7d1ee7d391150" translate="yes" xml:space="preserve">
          <source>In JavaScript, variables can be assigned during declaration, or at any point afterwards using an assignment statement. For example, in the following code, &lt;code&gt;foo&lt;/code&gt; is initialized during declaration, while &lt;code&gt;bar&lt;/code&gt; is initialized later.</source>
          <target state="translated">JavaScriptでは、変数は宣言中、または割り当てステートメントを使用して後でいつでも割り当てることができます。たとえば、次のコードでは、 &lt;code&gt;foo&lt;/code&gt; は宣言時に初期化され、 &lt;code&gt;bar&lt;/code&gt; は後で初期化されます。</target>
        </trans-unit>
        <trans-unit id="f2431e0c54f3ccddb9b8b55c40ef110d03001a01" translate="yes" xml:space="preserve">
          <source>In JavaScript, you can extend any object, including builtin or &quot;native&quot; objects. Sometimes people change the behavior of these native objects in ways that break the assumptions made about them in other parts of the code.</source>
          <target state="translated">JavaScript では、組み込みオブジェクトや「ネイティブ」オブジェクトを含め、あらゆるオブジェクトを拡張することができます。時には、これらのネイティブオブジェクトの動作を、コードの他の部分で行われている前提を崩すような方法で変更してしまう人もいます。</target>
        </trans-unit>
        <trans-unit id="5e343893daa54be7d2e9b003885e6efda1094561" translate="yes" xml:space="preserve">
          <source>In Node.js, a common pattern for dealing with asynchronous behavior is called the callback pattern. This pattern expects an &lt;code&gt;Error&lt;/code&gt; object or &lt;code&gt;null&lt;/code&gt; as the first argument of the callback. Forgetting to handle these errors can lead to some really strange behavior in your application.</source>
          <target state="translated">Node.jsでは、非同期動作を処理するための一般的なパターンをコールバックパターンと呼びます。このパターンでは、コールバックの最初の引数として &lt;code&gt;Error&lt;/code&gt; オブジェクトまたは &lt;code&gt;null&lt;/code&gt; が想定されています。これらのエラーの処理を忘れると、アプリケーションで非常に奇妙な動作が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="54e83e14b97a21dfc3164689e39c9953204a0216" translate="yes" xml:space="preserve">
          <source>In Node.js, module dependencies are included using the &lt;code&gt;require()&lt;/code&gt; function, such as:</source>
          <target state="translated">Node.jsでは、次のように &lt;code&gt;require()&lt;/code&gt; 関数を使用してモジュールの依存関係を含めます。</target>
        </trans-unit>
        <trans-unit id="eec858697f015c807640f5be285c6675cc7d8cf3" translate="yes" xml:space="preserve">
          <source>In Node.js, most I/O is done through asynchronous methods. However, there are often synchronous versions of the asynchronous methods. For example, &lt;code&gt;fs.exists()&lt;/code&gt; and &lt;code&gt;fs.existsSync()&lt;/code&gt;. In some contexts, using synchronous operations is okay (if, as with ESLint, you are writing a command line utility). However, in other contexts the use of synchronous operations is considered a bad practice that should be avoided. For example, if you are running a high-travel web server on Node.js, you should consider carefully if you want to allow any synchronous operations that could lock up the server.</source>
          <target state="translated">Node.jsでは、ほとんどのI / Oは非同期メソッドを介して行われます。ただし、非同期メソッドの同期バージョンがしばしば存在します。たとえば、 &lt;code&gt;fs.exists()&lt;/code&gt; および &lt;code&gt;fs.existsSync()&lt;/code&gt; です。一部のコンテキストでは、同期操作を使用しても問題ありません（ESLintの場合と同様に、コマンドラインユーティリティを作成している場合）。ただし、他のコンテキストでは、同期操作の使用は回避すべき悪い習慣と見なされます。たとえば、Node.jsで旅行の多いWebサーバーを実行している場合、サーバーをロックする可能性のある同期操作を許可するかどうかを慎重に検討する必要があります。</target>
        </trans-unit>
        <trans-unit id="8fb05857d9c01ca30417b8554d82f2317ca35e6b" translate="yes" xml:space="preserve">
          <source>In Node.js, the &lt;code&gt;__dirname&lt;/code&gt; and &lt;code&gt;__filename&lt;/code&gt; global variables contain the directory path and the file path of the currently executing script file, respectively. Sometimes, developers try to use these variables to create paths to other files, such as:</source>
          <target state="translated">Node.jsでは、 &lt;code&gt;__dirname&lt;/code&gt; および &lt;code&gt;__filename&lt;/code&gt; グローバル変数に、現在実行中のスクリプトファイルのディレクトリパスとファイルパスがそれぞれ含まれています。時々、開発者はこれらの変数を使用して次のような他のファイルへのパスを作成しようとします：</target>
        </trans-unit>
        <trans-unit id="986462bdb57daa520d17d6d171bfef6c12a9e4c1" translate="yes" xml:space="preserve">
          <source>In Node.js, the behavior of the &lt;code&gt;Buffer&lt;/code&gt; constructor is different depending on the type of its argument. Passing an argument from user input to &lt;code&gt;Buffer()&lt;/code&gt; without validating its type can lead to security vulnerabilities such as remote memory disclosure and denial of service. As a result, the &lt;code&gt;Buffer&lt;/code&gt; constructor has been deprecated and should not be used. Use the producer methods &lt;code&gt;Buffer.from&lt;/code&gt;, &lt;code&gt;Buffer.alloc&lt;/code&gt;, and &lt;code&gt;Buffer.allocUnsafe&lt;/code&gt; instead.</source>
          <target state="translated">Node.jsでは、 &lt;code&gt;Buffer&lt;/code&gt; コンストラクターの動作は、その引数のタイプによって異なります。型を検証せずにユーザー入力から &lt;code&gt;Buffer()&lt;/code&gt; に引数を渡すと、リモートメモリの公開やサービス拒否などのセキュリティの脆弱性につながる可能性があります。その結果、 &lt;code&gt;Buffer&lt;/code&gt; コンストラクターは非推奨になり、使用すべきではありません。代わりに、プロデューサーメソッドの &lt;code&gt;Buffer.from&lt;/code&gt; 、 &lt;code&gt;Buffer.alloc&lt;/code&gt; 、および &lt;code&gt;Buffer.allocUnsafe&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="01b5e11bafdf37ab445e4c84a4053b58bfebcbed" translate="yes" xml:space="preserve">
          <source>In a codebase that has both strict and non-strict code, either turn this rule off, or &lt;a href=&quot;../user-guide/configuring&quot;&gt;selectively disable it&lt;/a&gt; where necessary. For example, functions referencing &lt;code&gt;arguments.callee&lt;/code&gt; are invalid in strict mode. A &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode#Differences_from_non-strict_to_strict&quot;&gt;full list of strict mode differences&lt;/a&gt; is available on MDN.</source>
          <target state="translated">厳格なコードと厳格でないコードの両方を含むコードベースでは、このルールをオフに&lt;a href=&quot;../user-guide/configuring&quot;&gt;するか&lt;/a&gt;、必要に応じて選択的に無効にします。たとえば、 &lt;code&gt;arguments.callee&lt;/code&gt; を参照する関数は、strictモードでは無効です。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode#Differences_from_non-strict_to_strict&quot;&gt;strictモードの違いの完全なリストは、&lt;/a&gt; MDNで利用可能です。</target>
        </trans-unit>
        <trans-unit id="10ce8149f3ae92cb0fb6941142cf5493644f910b" translate="yes" xml:space="preserve">
          <source>In a custom rule or plugin, you can omit &lt;code&gt;docs&lt;/code&gt; or include any properties that you need in it.</source>
          <target state="translated">カスタムルールまたはプラグインでは、 &lt;code&gt;docs&lt;/code&gt; を省略したり、必要なプロパティを含めることができます。</target>
        </trans-unit>
        <trans-unit id="72c9201ea52e4b148492fb5b692b369da55a6f80" translate="yes" xml:space="preserve">
          <source>In addition to any patterns in a &lt;code&gt;.eslintignore&lt;/code&gt; file, ESLint always ignores files in &lt;code&gt;/node_modules/*&lt;/code&gt; and &lt;code&gt;/bower_components/*&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.eslintignore&lt;/code&gt; ファイルのパターンに加えて、ESLintは常に &lt;code&gt;/node_modules/*&lt;/code&gt; および &lt;code&gt;/bower_components/*&lt;/code&gt; のファイルを無視します。</target>
        </trans-unit>
        <trans-unit id="fc12ca84af3f6382d0762d431b9d50690920ac41" translate="yes" xml:space="preserve">
          <source>In addition to non-ES6 environments, existing JavaScript projects that are beginning to introduce ES6 into their codebase may not want to apply this rule if the cost of migrating from &lt;code&gt;var&lt;/code&gt; to &lt;code&gt;let&lt;/code&gt; is too costly.</source>
          <target state="translated">非ES6環境に加えて、コードベースにES6を導入し始めている既存のJavaScriptプロジェクトは、 &lt;code&gt;var&lt;/code&gt; から &lt;code&gt;let&lt;/code&gt; への移行コストが高すぎる場合、このルールを適用しない場合があります。</target>
        </trans-unit>
        <trans-unit id="c1150e19bd11cdc7072eeae11448462abf32644f" translate="yes" xml:space="preserve">
          <source>In addition to the above, there is currently a proposal to add object rest and spread properties to the spec. They can be used as follows:</source>
          <target state="translated">現在、上記に加えて、オブジェクトレストとスプレッドのプロパティを仕様に追加する提案があります。これらは以下のように使用することができます。</target>
        </trans-unit>
        <trans-unit id="252f70da347da561455e66862058935add889d81" translate="yes" xml:space="preserve">
          <source>In addition to the properties above, invalid test cases can also have the following properties:</source>
          <target state="translated">上記のプロパティに加えて、無効なテストケースは以下のプロパティを持つこともできます。</target>
        </trans-unit>
        <trans-unit id="1712f8c3199dccd12aeedb6949eed21b105861f8" translate="yes" xml:space="preserve">
          <source>In case of &lt;code&gt;&quot;always&quot;&lt;/code&gt; option, set an exception to &lt;code&gt;false&lt;/code&gt; to enable it:</source>
          <target state="translated">&lt;code&gt;&quot;always&quot;&lt;/code&gt; オプションの場合は、例外を &lt;code&gt;false&lt;/code&gt; に設定して有効にします。</target>
        </trans-unit>
        <trans-unit id="7e2e3e9f152c06b2ea5727f6f3c6e80f43018dd6" translate="yes" xml:space="preserve">
          <source>In case of &lt;code&gt;&quot;never&quot;&lt;/code&gt; option, set an exception to &lt;code&gt;true&lt;/code&gt; to enable it:</source>
          <target state="translated">&lt;code&gt;&quot;never&quot;&lt;/code&gt; オプションの場合は、例外を &lt;code&gt;true&lt;/code&gt; に設定して有効にします。</target>
        </trans-unit>
        <trans-unit id="92c16a623230638ab21900e3843f89d1124021ce" translate="yes" xml:space="preserve">
          <source>In conditional statements, it is very easy to mistype a comparison operator (such as &lt;code&gt;==&lt;/code&gt;) as an assignment operator (such as &lt;code&gt;=&lt;/code&gt;). For example:</source>
          <target state="translated">条件付きステートメントでは、比較演算子（ &lt;code&gt;==&lt;/code&gt; など）を代入演算子（ &lt;code&gt;=&lt;/code&gt; など）と間違えるのは非常に簡単です。例えば：</target>
        </trans-unit>
        <trans-unit id="1fb410a3ea7892596a7988ae7c901cf7e2882ac6" translate="yes" xml:space="preserve">
          <source>In contexts such as an &lt;code&gt;if&lt;/code&gt; statement's test where the result of the expression will already be coerced to a Boolean, casting to a Boolean via double negation (&lt;code&gt;!!&lt;/code&gt;) or a &lt;code&gt;Boolean&lt;/code&gt; call is unnecessary. For example, these &lt;code&gt;if&lt;/code&gt; statements are equivalent:</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; ステートメントのテストなどのコンテキストでは、式の結果が既にブールに強制変換されているため、二重否定（ &lt;code&gt;!!&lt;/code&gt; ）または &lt;code&gt;Boolean&lt;/code&gt; 呼び出しを介してブールにキャストする必要はありません。たとえば、次の &lt;code&gt;if&lt;/code&gt; ステートメントは同等です。</target>
        </trans-unit>
        <trans-unit id="c8599f68059b0b2f8fbd7472705607eace6b16b0" translate="yes" xml:space="preserve">
          <source>In each case, the settings in the configuration file override default settings.</source>
          <target state="translated">いずれの場合も、設定ファイルの設定はデフォルトの設定よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="649357e05b50e25c812fc667d0a51838efee7ebc" translate="yes" xml:space="preserve">
          <source>In each of the following examples, the &lt;code&gt;&quot;always&quot;&lt;/code&gt; option is assumed.</source>
          <target state="translated">次の各例では、 &lt;code&gt;&quot;always&quot;&lt;/code&gt; オプションが想定されています。</target>
        </trans-unit>
        <trans-unit id="a9ab58973a1b0451e64158fd130c4275226ff167" translate="yes" xml:space="preserve">
          <source>In environments outside of CommonJS or ECMAScript modules, you may use &lt;code&gt;var&lt;/code&gt; to create a global variable that may be used by other scripts. You can use the &lt;code&gt;/* exported variableName */&lt;/code&gt; comment block to indicate that this variable is being exported and therefore should not be considered unused.</source>
          <target state="translated">CommonJSまたはECMAScriptモジュール以外の環境では、 &lt;code&gt;var&lt;/code&gt; を使用して、他のスクリプトで使用できるグローバル変数を作成できます。あなたは使用することができます &lt;code&gt;/* exported variableName */&lt;/code&gt; この変数がエクスポートされているので、未使用とみなされるべきではないことを示すためにコメントブロックを。</target>
        </trans-unit>
        <trans-unit id="f39532fe56426ff07a71783a151b540911e49b3c" translate="yes" xml:space="preserve">
          <source>In environments that have not yet adopted ES6 language features (ES3/5).</source>
          <target state="translated">ES6の言語機能をまだ採用していない環境では(ES3/5)</target>
        </trans-unit>
        <trans-unit id="1a2489feba41fd4a92ae4a53d0b6dbcbf4bb794f" translate="yes" xml:space="preserve">
          <source>In general, ESLint core rules must be:</source>
          <target state="translated">一般的に、ESLintのコアルールは必須です。</target>
        </trans-unit>
        <trans-unit id="730c374622cf98488a7fb84f8403c25862d877fe" translate="yes" xml:space="preserve">
          <source>In general, no comment style is any more or less valid than any others, but many developers would agree that a consistent style can improve a project's maintainability.</source>
          <target state="translated">一般的に、どのコメントスタイルも他のスタイルと比べて有効なものはありませんが、多くの開発者は一貫したスタイルがプロジェクトの保守性を向上させることに同意するでしょう。</target>
        </trans-unit>
        <trans-unit id="f2dd07b1a4b0ae05f069e2c86041c05b70c13a77" translate="yes" xml:space="preserve">
          <source>In many cases the iterations of a loop are not actually independent of each-other. For example, the output of one iteration might be used as the input to another. Or, loops may be used to retry asynchronous operations that were unsuccessful. Or, loops may be used to prevent your code from sending an excessive amount of requests in parallel. In such cases it makes sense to use &lt;code&gt;await&lt;/code&gt; within a loop and it is recommended to disable the rule via a standard ESLint disable comment.</source>
          <target state="translated">多くの場合、ループの反復は実際には互いに独立していません。たとえば、ある反復の出力を別の反復の入力として使用できます。または、ループを使用して、失敗した非同期操作を再試行することもできます。または、ループを使用して、コードが過剰な量のリクエストを並行して送信しないようにすることもできます。このような場合は、ループ内で &lt;code&gt;await&lt;/code&gt; を使用するのが理にかなっており、標準のESLint無効コメントを介してルールを無効にすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="3e48107c6c8896cdcfc7e1315abb4322178c42a2" translate="yes" xml:space="preserve">
          <source>In many cases, it doesn't matter if you choose to use an identifier instead of a string or vice-versa. Even so, you might decide to enforce a consistent style in your code.</source>
          <target state="translated">多くの場合、文字列の代わりに識別子を使用するか、またはその逆を選択しても問題ありません。それでも、コードに一貫性のあるスタイルを適用したいと思うかもしれません。</target>
        </trans-unit>
        <trans-unit id="a474ea154ff40cc0c6e94f8cbfb8cf71fd96857f" translate="yes" xml:space="preserve">
          <source>In many cases, the empty object pattern is a mistake where the author intended to use a default value instead, such as:</source>
          <target state="translated">多くの場合、空のオブジェクトパターンは、作者がデフォルト値を使用することを意図していた場合のミスです。</target>
        </trans-unit>
        <trans-unit id="f25b07254468f73077ad50b101b6ec3bb43ecd81" translate="yes" xml:space="preserve">
          <source>In more advanced cases where you really need to use the &lt;code&gt;Function&lt;/code&gt; constructor.</source>
          <target state="translated">&lt;code&gt;Function&lt;/code&gt; コンストラクタを本当に使用する必要がある、より高度な場合。</target>
        </trans-unit>
        <trans-unit id="0f1a46503feb2a904ba1391691b0681df116ea85" translate="yes" xml:space="preserve">
          <source>In object literal shorthand methods, spacing before the &lt;code&gt;*&lt;/code&gt; is not checked, as they lack a &lt;code&gt;function&lt;/code&gt; keyword.</source>
          <target state="translated">オブジェクトリテラルの短縮メソッドでは、 &lt;code&gt;*&lt;/code&gt; の前のスペースはチェックされません。これは、 &lt;code&gt;function&lt;/code&gt; キーワードがないためです。</target>
        </trans-unit>
        <trans-unit id="a8a619c7a6f45b45f93088c9ff495f0ed8669f1a" translate="yes" xml:space="preserve">
          <source>In order for a rule change to be accepted into ESLint, it must:</source>
          <target state="translated">ルールの変更をESLintで受け入れるためには、変更しなければなりません。</target>
        </trans-unit>
        <trans-unit id="528b4219cc85dfb751a7dfd6e0385ac32c86b7cb" translate="yes" xml:space="preserve">
          <source>In order for a rule to be accepted in the ESLint core, it must:</source>
          <target state="translated">ルールがESLintコアで受け入れられるようにするには、ルールがなければなりません。</target>
        </trans-unit>
        <trans-unit id="1076911d7bc31ae6a22b80533fa7746bb73a1110" translate="yes" xml:space="preserve">
          <source>In order to avoid any confusion as to how to create the correct path, Node.js provides the &lt;code&gt;path&lt;/code&gt; module. This module uses system-specific information to always return the correct value. So you can rewrite the previous example as:</source>
          <target state="translated">正しいパスの作成方法に関する混乱を避けるために、Node.jsは &lt;code&gt;path&lt;/code&gt; モジュールを提供します。このモジュールは、システム固有の情報を使用して、常に正しい値を返します。したがって、前の例を次のように書き換えることができます。</target>
        </trans-unit>
        <trans-unit id="30dfaba2b526c5b26fe5ba2b4d9ad078d60be29f" translate="yes" xml:space="preserve">
          <source>In order to get the same functionality in ESLint, you would first need to install the &lt;code&gt;eslint-config-airbnb&lt;/code&gt; shareable config package:</source>
          <target state="translated">ESLintで同じ機能を取得するには、最初に &lt;code&gt;eslint-config-airbnb&lt;/code&gt; 共有可能構成パッケージをインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="da327dc7b8895d9c2a799fa276a2c344a1fa9ef6" translate="yes" xml:space="preserve">
          <source>In order to make your plugin available to the community you have to publish it on npm.</source>
          <target state="translated">プラグインをコミュニティで利用できるようにするには、npm で公開する必要があります。</target>
        </trans-unit>
        <trans-unit id="f53a0ee7361f805bc70b82dd2bf7fd681d44bfa2" translate="yes" xml:space="preserve">
          <source>In order to provide suggestions, use the &lt;code&gt;suggest&lt;/code&gt; key in the report argument with an array of suggestion objects. The suggestion objects represent individual suggestions that could be applied and require either a &lt;code&gt;desc&lt;/code&gt; key string that describes what applying the suggestion would do or a &lt;code&gt;messageId&lt;/code&gt; key (see &lt;a href=&quot;#suggestion-messageids&quot;&gt;below&lt;/a&gt;), and a &lt;code&gt;fix&lt;/code&gt; key that is a function defining the suggestion result. This &lt;code&gt;fix&lt;/code&gt; function follows the same API as regular fixes (described above in &lt;a href=&quot;#applying-fixes&quot;&gt;applying fixes&lt;/a&gt;).</source>
          <target state="translated">提案を提供するには、提案オブジェクトの配列とともにレポート引数で &lt;code&gt;suggest&lt;/code&gt; キーを使用します。提案オブジェクトは、適用可能な個々の提案を表し、提案を適用するとどうなるかを説明する &lt;code&gt;desc&lt;/code&gt; キー文字列または &lt;code&gt;messageId&lt;/code&gt; キー（&lt;a href=&quot;#suggestion-messageids&quot;&gt;以下を参照&lt;/a&gt;）と、提案結果を定義する関数である &lt;code&gt;fix&lt;/code&gt; キーのいずれかを必要とします。この &lt;code&gt;fix&lt;/code&gt; 機能は、通常の修正（上記の&lt;a href=&quot;#applying-fixes&quot;&gt;修正の適用で&lt;/a&gt;説明）と同じAPIに従います。</target>
        </trans-unit>
        <trans-unit id="c914896e68d128ecab267923570754040656a4ad" translate="yes" xml:space="preserve">
          <source>In order to submit code or documentation to an ESLint project, you will need to electronically sign our &lt;a href=&quot;https://cla.js.foundation/eslint/eslint&quot;&gt;Contributor License Agreement&lt;/a&gt;. The CLA is you giving us permission to use your contribution.</source>
          <target state="translated">ESLintプロジェクトにコードまたはドキュメントを提出するには、&lt;a href=&quot;https://cla.js.foundation/eslint/eslint&quot;&gt;Contributor License Agreement&lt;/a&gt;に電子的に署名する必要があります。CLAは、寄付を使用する許可を私たちに与えることです。</target>
        </trans-unit>
        <trans-unit id="ab1eb2b457b3afd52e3fa40c61b2b91f8e61a0a6" translate="yes" xml:space="preserve">
          <source>In order to use a local file as a custom formatter, you must begin the filename with a dot (such as &lt;code&gt;./my-awesome-formatter.js&lt;/code&gt; or &lt;code&gt;../formatters/my-awesome-formatter.js&lt;/code&gt;).</source>
          <target state="translated">ローカルファイルをカスタムフォーマッターとして使用するには、ファイル名をドットで始める必要があります（ &lt;code&gt;./my-awesome-formatter.js&lt;/code&gt; や &lt;code&gt;../formatters/my-awesome-formatter.js&lt;/code&gt; など）。</target>
        </trans-unit>
        <trans-unit id="fe1c5d3210fe6c242e0968d6574611b5ef639ec0" translate="yes" xml:space="preserve">
          <source>In order to work with ESLint as a developer, it's recommended that:</source>
          <target state="translated">開発者としてESLintを使うためには、以下のようにすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="da54d53c92208bf53d5c67c558cd27c2431dde1d" translate="yes" xml:space="preserve">
          <source>In other words, if a property has a getter and a setter, the setter should be defined right after the getter, or vice versa.</source>
          <target state="translated">言い換えれば、プロパティにゲッターとセッターがある場合、セッターはゲッターの直後に定義されるべきであり、その逆もまた然りです。</target>
        </trans-unit>
        <trans-unit id="7bfb1d001512e3bd279cdd5b491a8cafde9ef9eb" translate="yes" xml:space="preserve">
          <source>In other words, it was possible to reference a rule from a scoped plugin (such as &lt;code&gt;foo/some-rule&lt;/code&gt;) without explicitly stating the &lt;code&gt;@my-organization&lt;/code&gt; scope. This was a bug because it could lead to ambiguous rule references if there was also an unscoped plugin called &lt;code&gt;eslint-plugin-foo&lt;/code&gt; loaded at the same time.</source>
          <target state="translated">つまり、 &lt;code&gt;@my-organization&lt;/code&gt; スコープを明示的に指定しなくて &lt;code&gt;foo/some-rule&lt;/code&gt; 、スコープ付きプラグイン（foo / some-ruleなど）からルールを参照することが可能でした。 &lt;code&gt;eslint-plugin-foo&lt;/code&gt; と呼ばれるスコープ外のプラグインも同時にロードされている場合、ルール参照があいまいになる可能性があるため、これはバグでした。</target>
        </trans-unit>
        <trans-unit id="2469f7b6a21432ad41d271440c98cea16a70b72b" translate="yes" xml:space="preserve">
          <source>In rare cases (if you were relying on the previous behavior where &lt;code&gt;eslint:recommended&lt;/code&gt; disables core rules), you might need to disable additional rules to restore the previous behavior.</source>
          <target state="translated">まれなケース（ &lt;code&gt;eslint:recommended&lt;/code&gt; がコアルールを無効にする以前の動作に依存していた場合）では、以前の動作を復元するために追加のルールを無効にする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="62940093175d70030e07910796a72fc9b37a5914" translate="yes" xml:space="preserve">
          <source>In rare cases where you really need identical test conditions in the same chain, which necessarily means that the expressions in the chain are causing and relying on side effects, you will have to turn this rule off.</source>
          <target state="translated">まれに、同じチェーン内で同一のテスト条件が本当に必要な場合、そのチェーン内の式が副作用を引き起こしたり依存したりすることを必然的に意味するので、このルールをオフにしなければなりません。</target>
        </trans-unit>
        <trans-unit id="79ead7da48164fbb99604c5811336f071bb53e52" translate="yes" xml:space="preserve">
          <source>In some cases fixes aren't appropriate to be automatically applied, for example, if a fix potentially changes functionality or if there are multiple valid ways to fix a rule depending on the implementation intent (see the best practices for &lt;a href=&quot;#applying-fixes&quot;&gt;applying fixes&lt;/a&gt; listed above). In these cases, there is an alternative &lt;code&gt;suggest&lt;/code&gt; option on &lt;code&gt;context.report()&lt;/code&gt; that allows other tools, such as editors, to expose helpers for users to manually apply a suggestion.</source>
          <target state="translated">たとえば、修正によって機能が変更される可能性がある場合や、実装の目的に応じてルールを修正するための有効な方法が複数ある場合など、修正が自動的に適用されない場合があります（上記の&lt;a href=&quot;#applying-fixes&quot;&gt;修正&lt;/a&gt;を適用するためのベストプラクティスを参照してください）。このような場合、 &lt;code&gt;context.report()&lt;/code&gt; に別の &lt;code&gt;suggest&lt;/code&gt; オプションがあり、エディターなどの他のツールを使用して、ユーザーが提案を手動で適用できるようにヘルパーを公開できます。</target>
        </trans-unit>
        <trans-unit id="22ed0b0513e44ddddd0487035021c4a4d3ab12ff" translate="yes" xml:space="preserve">
          <source>In some cases, rule schemas can use the &lt;code&gt;default&lt;/code&gt; keyword to automatically specify default values for rule options. However, the &lt;code&gt;default&lt;/code&gt; keyword is only effective in certain schema locations, and is ignored elsewhere, which creates a risk of bugs if a rule incorrectly expects a default value to be provided as a rule option. In ESLint v6.0.0, &lt;code&gt;RuleTester&lt;/code&gt; will raise an error if a rule has an invalid &lt;code&gt;default&lt;/code&gt; keyword in its schema.</source>
          <target state="translated">場合によっては、ルールスキーマは &lt;code&gt;default&lt;/code&gt; キーワードを使用して、ルールオプションのデフォルト値を自動的に指定できます。ただし、 &lt;code&gt;default&lt;/code&gt; キーワードは特定のスキーマの場所でのみ有効であり、他の場所では無視されます。これにより、ルールがルールオプションとして提供されるデフォルト値を誤って予期した場合にバグのリスクが発生します。ESLint v6.0.0では、ルールのスキーマに無効な &lt;code&gt;default&lt;/code&gt; キーワードがある場合、 &lt;code&gt;RuleTester&lt;/code&gt; はエラーを発生させます。</target>
        </trans-unit>
        <trans-unit id="586438146f6109615a34b9a900fa8fbf8761e69b" translate="yes" xml:space="preserve">
          <source>In that case the expected syntax would have been:</source>
          <target state="translated">その場合、期待される構文は次のようになります。</target>
        </trans-unit>
        <trans-unit id="34e220746b67d0d1a6860ca7f5580ed5292abe0f" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;CommonJS&lt;/strong&gt; module system, a hidden function wraps each module and limits the scope of a &quot;global&quot; strict mode directive.</source>
          <target state="translated">で&lt;strong&gt;CommonJSの&lt;/strong&gt;モジュールシステム、隠された機能は、各モジュールをラップし、「グローバル」厳密モード指示の範囲を制限します。</target>
        </trans-unit>
        <trans-unit id="2af7474f5034d2a87e6bb76f217e0214d6566d39" translate="yes" xml:space="preserve">
          <source>In the Node.js community it is often customary to separate initializations with calls to &lt;code&gt;require&lt;/code&gt; modules from other variable declarations, sometimes also grouping them by the type of module. This rule helps you enforce this convention.</source>
          <target state="translated">Node.jsコミュニティでは &lt;code&gt;require&lt;/code&gt; モジュールを要求する呼び出しを使用して初期化を他の変数宣言から分離することが慣例となっていることが多く、モジュールのタイプによってそれらをグループ化することもあります。このルールは、この規則を適用するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="f25f337dc8aa34dae55d66f05c1bb5c8ed5144c6" translate="yes" xml:space="preserve">
          <source>In the above example, &lt;code&gt;baz()&lt;/code&gt; can never execute. Obviously, &lt;code&gt;baz()&lt;/code&gt; could be executed only when &lt;code&gt;b&lt;/code&gt; evaluates to &lt;code&gt;true&lt;/code&gt;, but in that case &lt;code&gt;bar()&lt;/code&gt; would be executed instead, since it's earlier in the chain.</source>
          <target state="translated">上記の例では、 &lt;code&gt;baz()&lt;/code&gt; は実行できません。明らかに、 &lt;code&gt;baz()&lt;/code&gt; は、 &lt;code&gt;b&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; と評価された場合にのみ実行できますが、その場合、チェーンの初期にあるため、代わりに &lt;code&gt;bar()&lt;/code&gt; が実行されます。</target>
        </trans-unit>
        <trans-unit id="4dc0e08c3b19b46bd79d160c044fb63b2212f50f" translate="yes" xml:space="preserve">
          <source>In the above example, the regular expression literal is easier to read and reason about. Also, it's a common mistake to omit the extra &lt;code&gt;\&lt;/code&gt; in the string literal, which would produce a completely different regular expression:</source>
          <target state="translated">上記の例では、正規表現リテラルの方が読みやすく、推論も簡単です。また、文字列リテラルで余分な &lt;code&gt;\&lt;/code&gt; を省略するのはよくある間違いです。これにより、完全に異なる正規表現が生成されます。</target>
        </trans-unit>
        <trans-unit id="805fa113fe73a36f3075118dbb4cbf1f7f0e4911" translate="yes" xml:space="preserve">
          <source>In the case of a CommonJS module, if your code is in strict mode or you don't want this rule to warn you about undeclared variables, and you also don't want this rule to warn you about the read-only globals, you can disable this rule.</source>
          <target state="translated">CommonJSモジュールの場合、コードが厳密なモードになっていたり、宣言されていない変数についてこのルールを警告したくない場合や、読み取り専用のグローバルについても警告したくない場合は、このルールを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="2333879fe578127fd545ac29675c84de972fc829" translate="yes" xml:space="preserve">
          <source>In the case of a browser script, if you want to be able to explicitly declare variables and functions in the global scope, and your code is in strict mode or you don't want this rule to warn you about undeclared variables, and you also don't want this rule to warn you about read-only globals, you can disable this rule.</source>
          <target state="translated">ブラウザスクリプトの場合、グローバルスコープで変数や関数を明示的に宣言できるようにしたい場合で、コードが厳密モードの場合や、宣言されていない変数についてこのルールで警告したくない場合、また読み取り専用のグローバルについてもこのルールで警告したくない場合は、このルールを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="73ff69869ee358fb751b07d6f10bc627b10fdf31" translate="yes" xml:space="preserve">
          <source>In the case of an ES module, if you don't want this rule to warn you about the read-only globals you can disable this rule.</source>
          <target state="translated">ES モジュールの場合、このルールで読み取り専用グローバルについて警告したくない場合は、このルールを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="bf0cf62f8e2a7187fa75b64fd67d8b2165c79bd0" translate="yes" xml:space="preserve">
          <source>In the constructor of derived classes, if &lt;code&gt;this&lt;/code&gt;/&lt;code&gt;super&lt;/code&gt; are used before &lt;code&gt;super()&lt;/code&gt; calls, it raises a reference error.</source>
          <target state="translated">派生クラスのコンストラクターで、 &lt;code&gt;this&lt;/code&gt; / &lt;code&gt;super&lt;/code&gt; が &lt;code&gt;super()&lt;/code&gt; 呼び出しの前に使用されると、参照エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="3ff70ad8a5f97d1019f5ec2166872e8af868b385" translate="yes" xml:space="preserve">
          <source>In the debate over ASI, there are generally two schools of thought. The first is that we should treat ASI as if it didn't exist and always include semicolons manually. The rationale is that it's easier to always include semicolons than to try to remember when they are or are not required, and thus decreases the possibility of introducing an error.</source>
          <target state="translated">ASIをめぐる議論では、一般的に2つの考えがあります。1つ目は、ASIを存在しないかのように扱い、常に手動でセミコロンを含めるべきだというものです。その理論的根拠は、セミコロンの有無を覚えようとするよりも、常にセミコロンを含める方が簡単で、エラーが発生する可能性を減らすことができるというものです。</target>
        </trans-unit>
        <trans-unit id="484a62f26f2c619574ceb1e6c457d31625392327" translate="yes" xml:space="preserve">
          <source>In the example above, the &lt;code&gt;sayHi&lt;/code&gt; method doesn't use &lt;code&gt;this&lt;/code&gt;, so we can make it a static method:</source>
          <target state="translated">上記の例では、 &lt;code&gt;sayHi&lt;/code&gt; の方法は使用されません。 &lt;code&gt;this&lt;/code&gt; 、我々はそれの静的メソッドにすることができますので、：</target>
        </trans-unit>
        <trans-unit id="c2cd47d59330aa36977aa9998d327bbf8acb99ff" translate="yes" xml:space="preserve">
          <source>In the example configuration above, the top level &quot;before&quot; and &quot;after&quot; options define the default behavior of the rule, while the &quot;anonymous&quot; and &quot;method&quot; options override the default behavior. Overrides can be either an object with &quot;before&quot; and &quot;after&quot;, or a shorthand string as above.</source>
          <target state="translated">上の設定例では、トップレベルの &quot;before&quot; および &quot;after&quot; オプションがルールのデフォルトの動作を定義し、&quot;anonymous&quot; および &quot;method&quot; オプションがデフォルトの動作をオーバーライドしています。オーバーライドは、「before」と「after」を持つオブジェクトか、上記のような短縮文字列のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="97328f04f5b1cf5749587791362446a7fb8f3c20" translate="yes" xml:space="preserve">
          <source>In the exceptions where a newline does &lt;strong&gt;not&lt;/strong&gt; end a statement, a typing mistake to omit a semicolon causes two unrelated consecutive lines to be interpreted as one expression. Especially for a coding style without semicolons, readers might overlook the mistake. Although syntactically correct, the code might throw exceptions when it is executed.</source>
          <target state="translated">改行でステートメントが終了し&lt;strong&gt;ない&lt;/strong&gt;例外では、セミコロンを省略してタイプミスをすると、関係のない2つの連続した行が1つの式として解釈されます。特にセミコロンのないコーディングスタイルの場合、読者は間違いを見落とす可能性があります。構文的には正しいが、コードは実行時に例外をスローする場合があります。</target>
        </trans-unit>
        <trans-unit id="6aff87de13f5ffd8d68a4105042048c5b3c19ed4" translate="yes" xml:space="preserve">
          <source>In the following example the &lt;code&gt;module&lt;/code&gt; import on line 1 is repeated on line 3. These can be combined to make the list of imports more succinct.</source>
          <target state="translated">次の例では、1行目の &lt;code&gt;module&lt;/code&gt; importが3行目で繰り返されています。これらを組み合わせて、インポートのリストをより簡潔にすることができます。</target>
        </trans-unit>
        <trans-unit id="e223ddd8853ea414a7d8a8c3771424ff2c613622" translate="yes" xml:space="preserve">
          <source>In the initial list of problems, the &lt;code&gt;fix&lt;/code&gt; property will refer to a fix in the processed JavaScript. The &lt;code&gt;postprocess&lt;/code&gt; method should transform the object to refer to a fix in the original, unprocessed file.</source>
          <target state="translated">問題の最初のリストでは、 &lt;code&gt;fix&lt;/code&gt; プロパティは処理されたJavaScriptの修正を指します。 &lt;code&gt;postprocess&lt;/code&gt; 方法は、元の、未処理のファイルに修正を参照するためにオブジェクトを変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="cdeeb4e7b1833bacebcb592d32546b7b7787fbed" translate="yes" xml:space="preserve">
          <source>In the initialization or update portions of a &lt;code&gt;for&lt;/code&gt; statement.</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; ステートメントの初期化部分または更新部分。</target>
        </trans-unit>
        <trans-unit id="3a3d2790bd2dc958072534cbc721ebee4aafd235" translate="yes" xml:space="preserve">
          <source>In the last example the &lt;code&gt;await&lt;/code&gt; is necessary to be able to catch errors thrown from &lt;code&gt;bar()&lt;/code&gt;.</source>
          <target state="translated">最後の例では、 &lt;code&gt;bar()&lt;/code&gt; からスローされたエラーをキャッチする &lt;code&gt;await&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="c8992ad5fc6c79ca648b7546f8d54a92a932529c" translate="yes" xml:space="preserve">
          <source>In the last file, you'll once again see that to properly resolve your config, you'll need include the full package path.</source>
          <target state="translated">最後のファイルでは、設定を適切に解決するためには、フルパッケージのパスを含める必要があることがわかります。</target>
        </trans-unit>
        <trans-unit id="06a65141438f1465b9453edef91ccf38f50b2a41" translate="yes" xml:space="preserve">
          <source>In the preceding example, the error level is assumed to be the first argument. It is followed by the first optional argument, a string which may be either &lt;code&gt;&quot;always&quot;&lt;/code&gt; or &lt;code&gt;&quot;never&quot;&lt;/code&gt;. The final optional argument is an object, which may have a Boolean property named &lt;code&gt;exceptRange&lt;/code&gt;.</source>
          <target state="translated">前の例では、エラーレベルが最初の引数であると想定されています。その後に、最初のオプションの引数、 &lt;code&gt;&quot;always&quot;&lt;/code&gt; または &lt;code&gt;&quot;never&quot;&lt;/code&gt; 常に」の文字列が続きます。最後のオプションの引数はオブジェクトで、これには &lt;code&gt;exceptRange&lt;/code&gt; という名前のBooleanプロパティが含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="9ae7da0834ca34159e742b20fb358094baed4a0e" translate="yes" xml:space="preserve">
          <source>In the same way, if there is a &lt;code&gt;package.json&lt;/code&gt; file in the root directory with an &lt;code&gt;eslintConfig&lt;/code&gt; field, the configuration it describes will apply to all subdirectories beneath it, but the configuration described by the &lt;code&gt;.eslintrc&lt;/code&gt; file in the tests directory will override it where there are conflicting specifications.</source>
          <target state="translated">同様に、 &lt;code&gt;eslintConfig&lt;/code&gt; フィールドを持つルートディレクトリに &lt;code&gt;package.json&lt;/code&gt; ファイルがある場合、そのファイルに記述されている構成はその下のすべてのサブディレクトリに適用されますが、testsディレクトリにある &lt;code&gt;.eslintrc&lt;/code&gt; ファイルに記述されている構成はそれを上書きします仕様に矛盾がある場合。</target>
        </trans-unit>
        <trans-unit id="d895f26e01a339a58df0b6097b997dc2676f5f9b" translate="yes" xml:space="preserve">
          <source>In these configuration files, the rule &lt;code&gt;plugin1/rule1&lt;/code&gt; comes from the plugin named &lt;code&gt;plugin1&lt;/code&gt;. You can also use this format with configuration comments, such as:</source>
          <target state="translated">これらの構成ファイルでは、ルール &lt;code&gt;plugin1/rule1&lt;/code&gt; は &lt;code&gt;plugin1&lt;/code&gt; という名前のプラグインからのものです。この形式は、次のような構成コメントでも使用できます。</target>
        </trans-unit>
        <trans-unit id="36d6699bd7eef806ecf2d6c599b776a76340f808" translate="yes" xml:space="preserve">
          <source>In this case, &lt;code&gt;doSomething()&lt;/code&gt; is undefined at the time of invocation and so causes a runtime error.</source>
          <target state="translated">この場合、呼び出し時に &lt;code&gt;doSomething()&lt;/code&gt; が定義されていないため、実行時エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="5a85d7db6d4b6df41b744c0747f7ca33c597e8b6" translate="yes" xml:space="preserve">
          <source>In this case, each function created within the loop returns a different number as expected.</source>
          <target state="translated">この場合、ループ内で作成された各関数は、予想通り異なる数値を返します。</target>
        </trans-unit>
        <trans-unit id="356abc620d37a1abfd58a799df08e6a2a04736c0" translate="yes" xml:space="preserve">
          <source>In this case, probably removing &lt;code&gt;OUTER_LOOP:&lt;/code&gt; had been forgotten. Such labels take up space in the code and can lead to confusion by readers.</source>
          <target state="translated">この場合、おそらく &lt;code&gt;OUTER_LOOP:&lt;/code&gt; の削除は忘れられていました。このようなラベルはコード内のスペースを占有し、読者が混乱する可能性があります。</target>
        </trans-unit>
        <trans-unit id="c39bb2ffd2c62e6c7064f4d5e0435501709e632d" translate="yes" xml:space="preserve">
          <source>In this case, spacing will be disallowed after a &lt;code&gt;new&lt;/code&gt; operator and required before/after a &lt;code&gt;++&lt;/code&gt; operator.</source>
          <target state="translated">この場合、スペースは &lt;code&gt;new&lt;/code&gt; 演算子の後には許可されず、 &lt;code&gt;++&lt;/code&gt; 演算子の前後に必要になります。</target>
        </trans-unit>
        <trans-unit id="7d4495221d480b471dcc1896dd624d6c593b570c" translate="yes" xml:space="preserve">
          <source>In this case, the &lt;code&gt;fail()&lt;/code&gt; function throws an error that is intended to be caught by the &lt;code&gt;catch()&lt;/code&gt; handler assigned later. Converting the &lt;code&gt;fail()&lt;/code&gt; function into a synchronous function would require the call to &lt;code&gt;fail()&lt;/code&gt; to be refactored to use a &lt;code&gt;try-catch&lt;/code&gt; statement instead of a promise.</source>
          <target state="translated">この場合、 &lt;code&gt;fail()&lt;/code&gt; 関数は、後で割り当てられる &lt;code&gt;catch()&lt;/code&gt; ハンドラーによってキャッチされることを意図したエラーをスローします。 &lt;code&gt;fail()&lt;/code&gt; 関数を同期関数に変換するには、promiseの代わりに &lt;code&gt;try-catch&lt;/code&gt; ステートメントを使用するために、 &lt;code&gt;fail()&lt;/code&gt; の呼び出しをリファクタリングする必要があります。</target>
        </trans-unit>
        <trans-unit id="c0334129e557cb71f1101529b6b21d138390105a" translate="yes" xml:space="preserve">
          <source>In this case, the &lt;code&gt;var x&lt;/code&gt; is hoisted out of the loop, effectively creating:</source>
          <target state="translated">この場合、 &lt;code&gt;var x&lt;/code&gt; はループの外に引き上げられ、効果的に次のように作成されます。</target>
        </trans-unit>
        <trans-unit id="81b4bbb5892a95679c7e65b779450b662ceded28" translate="yes" xml:space="preserve">
          <source>In this case, the created object is thrown away because its reference isn't stored anywhere, and in many cases, this means that the constructor should be replaced with a function that doesn't require &lt;code&gt;new&lt;/code&gt; to be used.</source>
          <target state="translated">この場合、作成されたオブジェクトは参照がどこにも保存されていないため、破棄されます。多くの場合、これは、コンストラクタを &lt;code&gt;new&lt;/code&gt; の使用を必要としない関数に置き換える必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="0131376096f23dfc4bd77b3459401e2d691c79dd" translate="yes" xml:space="preserve">
          <source>In this case, the message is specific to the variable being used and the AST node type is &lt;code&gt;Identifier&lt;/code&gt;.</source>
          <target state="translated">この場合、メッセージは使用されている変数に固有であり、ASTノードタイプは &lt;code&gt;Identifier&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="aad77b7ee8cfa194f8d3ef8768c4c03df4c2b476" translate="yes" xml:space="preserve">
          <source>In this case, the variable &lt;code&gt;a&lt;/code&gt; inside of &lt;code&gt;b()&lt;/code&gt; is shadowing the variable &lt;code&gt;a&lt;/code&gt; in the global scope. This can cause confusion while reading the code and it's impossible to access the global variable.</source>
          <target state="translated">この場合、変数の内部 &lt;code&gt;b()&lt;/code&gt; 、変数シャドーイングされる &lt;code&gt;a&lt;/code&gt; グローバルスコープです。これにより、コードの読み取り中に混乱が生じ、グローバル変数にアクセスできなくなります。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="399b857b733880f93edced40099e5c214d78fa49" translate="yes" xml:space="preserve">
          <source>In this case, you would expect each function created within the loop to return a different number. In reality, each function returns 10, because that was the last value of &lt;code&gt;i&lt;/code&gt; in the scope.</source>
          <target state="translated">この場合、ループ内で作成された各関数が異なる数を返すことを期待します。実際には、各関数は10を返します。これはスコープ内の &lt;code&gt;i&lt;/code&gt; の最後の値だからです。</target>
        </trans-unit>
        <trans-unit id="89db72e5b125a2136f5700b9df46d59dfd325de2" translate="yes" xml:space="preserve">
          <source>In this code, &lt;code&gt;enum&lt;/code&gt; is used as an object key and will throw an error in an ECMAScript 3 environment (such as Internet Explorer 8).</source>
          <target state="translated">このコードでは、 &lt;code&gt;enum&lt;/code&gt; がオブジェクトキーとして使用され、ECMAScript 3環境（Internet Explorer 8など）でエラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="7b3f3ffb93c91f659a612089534865f9263e81d0" translate="yes" xml:space="preserve">
          <source>In this code, no new variables are created because &lt;code&gt;a&lt;/code&gt; is just a location helper while the &lt;code&gt;{}&lt;/code&gt; is expected to contain the variables to create, such as:</source>
          <target state="translated">このコードでは、 &lt;code&gt;a&lt;/code&gt; は単なるロケーションヘルパーであるため、新しい変数は作成されませんが、 &lt;code&gt;{}&lt;/code&gt; には作成する変数が含まれることが期待されています。</target>
        </trans-unit>
        <trans-unit id="99609a5bff02d4c73d9df2f874ef482759db0b7c" translate="yes" xml:space="preserve">
          <source>In this code, the reference to &lt;code&gt;this&lt;/code&gt; has been removed but &lt;code&gt;bind()&lt;/code&gt; is still used. In this case, the &lt;code&gt;bind()&lt;/code&gt; is unnecessary overhead (and a performance hit) and can be safely removed.</source>
          <target state="translated">このコードでは、 &lt;code&gt;this&lt;/code&gt; への参照は削除されていますが、 &lt;code&gt;bind()&lt;/code&gt; はまだ使用されています。この場合、 &lt;code&gt;bind()&lt;/code&gt; は不要なオーバーヘッド（およびパフォーマンスヒット）であり、安全に削除できます。</target>
        </trans-unit>
        <trans-unit id="df86629a847fb7ed6459c203d8878e66d97590a4" translate="yes" xml:space="preserve">
          <source>In this document, the first four types are summed up under the term &lt;em&gt;require declaration&lt;/em&gt;.</source>
          <target state="translated">このドキュメントでは、最初の4つのタイプを「&lt;em&gt;宣言が必要」&lt;/em&gt;という用語でまとめています。</target>
        </trans-unit>
        <trans-unit id="c640e601c90d57c39ee9be82c0f12dec43d6aa1a" translate="yes" xml:space="preserve">
          <source>In this example, &lt;a href=&quot;../rules/eqeqeq&quot;&gt;&lt;code&gt;eqeqeq&lt;/code&gt;&lt;/a&gt; is turned off and &lt;a href=&quot;../rules/curly&quot;&gt;&lt;code&gt;curly&lt;/code&gt;&lt;/a&gt; is turned on as an error. You can also use the numeric equivalent for the rule severity:</source>
          <target state="translated">この例では、&lt;a href=&quot;../rules/eqeqeq&quot;&gt; &lt;code&gt;eqeqeq&lt;/code&gt; &lt;/a&gt;がオフになり、&lt;a href=&quot;../rules/curly&quot;&gt; &lt;code&gt;curly&lt;/code&gt; &lt;/a&gt;がエラーとしてオンになります。ルールの重要度に相当する数値を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="c58957ba7e167fed9c432e37bda0f2aa517e44f7" translate="yes" xml:space="preserve">
          <source>In this example, a new &lt;code&gt;CLIEngine&lt;/code&gt; instance is created that extends a configuration called &lt;code&gt;&quot;eslint-config-shared&quot;&lt;/code&gt;, a setting named &lt;code&gt;&quot;sharedData&quot;&lt;/code&gt; and two environments (&lt;code&gt;&quot;browser&quot;&lt;/code&gt; and &lt;code&gt;&quot;mocha&quot;&lt;/code&gt;) are defined, loading of &lt;code&gt;.eslintrc&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt; files are disabled, and the &lt;code&gt;semi&lt;/code&gt; rule enabled as an error. You can then call methods on &lt;code&gt;cli&lt;/code&gt; and these options will be used to perform the correct action.</source>
          <target state="translated">この例では、 &lt;code&gt;&quot;eslint-config-shared&quot;&lt;/code&gt; という構成を拡張する新しい &lt;code&gt;CLIEngine&lt;/code&gt; インスタンスが作成され、 &lt;code&gt;&quot;sharedData&quot;&lt;/code&gt; という名前の設定と2つの環境（ &lt;code&gt;&quot;browser&quot;&lt;/code&gt; と &lt;code&gt;&quot;mocha&quot;&lt;/code&gt; ）が定義され、 &lt;code&gt;.eslintrc&lt;/code&gt; と &lt;code&gt;package.json&lt;/code&gt; ロードされます。 .jsonファイルは無効になり、 &lt;code&gt;semi&lt;/code&gt; ルールはエラーとして有効になります。その後、 &lt;code&gt;cli&lt;/code&gt; でメソッドを呼び出すことができます。これらのオプションは、正しいアクションを実行するために使用されます。</target>
        </trans-unit>
        <trans-unit id="e04d10297a79bb36c8285674c21e09aa283053e2" translate="yes" xml:space="preserve">
          <source>In this example, a semicolon will not be inserted after the first line, causing a run-time error (because an empty object is called as if it's a function). The &lt;a href=&quot;no-unexpected-multiline&quot;&gt;no-unexpected-multiline&lt;/a&gt; rule can protect your code from such cases.</source>
          <target state="translated">この例では、最初の行の後にセミコロンが挿入されないため、実行時エラーが発生します（空のオブジェクトが関数であるかのように呼び出されるため）。&lt;a href=&quot;no-unexpected-multiline&quot;&gt;無予期しない-複数行の&lt;/a&gt;ルールは、このような例から、あなたのコードを保護することができます。</target>
        </trans-unit>
        <trans-unit id="cfd38ba50d65586ae33ba8981419872a1566d701" translate="yes" xml:space="preserve">
          <source>In this example, if &lt;code&gt;foo&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;, then execution will flow through both cases, as the first falls through to the second. You can prevent this by using &lt;code&gt;break&lt;/code&gt;, as in this example:</source>
          <target state="translated">この例では、 &lt;code&gt;foo&lt;/code&gt; が &lt;code&gt;1&lt;/code&gt; の場合、最初のものが2番目に落ちるので、実行は両方のケースを流れます。これを防ぐには、次の例のように、 &lt;code&gt;break&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="7d644af3174c7141490f9748832a9b77f491be79" translate="yes" xml:space="preserve">
          <source>In this example, rules run on &lt;code&gt;linter1&lt;/code&gt; will get &lt;code&gt;path/to/project&lt;/code&gt; when calling &lt;code&gt;context.getCwd()&lt;/code&gt;. Those run on &lt;code&gt;linter2&lt;/code&gt; will get &lt;code&gt;process.cwd()&lt;/code&gt; if the global &lt;code&gt;process&lt;/code&gt; object is defined or &lt;code&gt;undefined&lt;/code&gt; otherwise (e.g. on the browser https://eslint.org/demo).</source>
          <target state="translated">この例では、 &lt;code&gt;linter1&lt;/code&gt; で実行されるルールは、 &lt;code&gt;context.getCwd()&lt;/code&gt; を呼び出すときに &lt;code&gt;path/to/project&lt;/code&gt; を取得します。 &lt;code&gt;linter2&lt;/code&gt; で実行さ &lt;code&gt;process&lt;/code&gt; ものは、グローバルプロセスオブジェクトが定義されている場合、または &lt;code&gt;undefined&lt;/code&gt; されていない場合（たとえば、ブラウザhttps://eslint.org/demo）、 &lt;code&gt;process.cwd()&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="779b188cd469ad108c26dd64160ac911811d7073" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;colors&lt;/code&gt; array has a &lt;code&gt;length&lt;/code&gt; of 3. But did the developer intend for there to be an empty spot in the middle of the array? Or is it a typo?</source>
          <target state="translated">この例では、 &lt;code&gt;colors&lt;/code&gt; 配列の &lt;code&gt;length&lt;/code&gt; は3ですが、開発者は配列の中央に空のスポットが存在することを意図していましたか？それともタイプミスですか？</target>
        </trans-unit>
        <trans-unit id="5386dba46b991972060bd7c9e14da379324e4d9b" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;your-program-that-reads-json&lt;/code&gt; program can accept the raw JSON of ESLint results and process it before outputting its own format of the results. You can pass as many command line arguments to that program as are necessary to customize the output.</source>
          <target state="translated">この例では、 &lt;code&gt;your-program-that-reads-json&lt;/code&gt; プログラムは、ESLint結果の未加工のJSONを受け入れ、それを処理してから、独自の形式の結果を出力できます。出力をカスタマイズするために必要なだけのコマンドライン引数をそのプログラムに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="1fe1ba8b07ed67f5a9ede5eb35c07a25b1b5f527" translate="yes" xml:space="preserve">
          <source>In this example, there is no confusion as to the expected behavior. It is clear that the first case is meant to fall through to the second case.</source>
          <target state="translated">この例では、予想される動作についての混乱はありません。第一のケースが第二のケースに落ちることを意味していることは明らかである。</target>
        </trans-unit>
        <trans-unit id="7e7ef8fabcff41fe8f6f4df0b1edfce0bf6562b5" translate="yes" xml:space="preserve">
          <source>In this regular expression, it's very hard to tell how many spaces are intended to be matched. It's better to use only one space and then specify how many spaces are expected, such as:</source>
          <target state="translated">この正規表現では、どれだけのスペースが一致することを意図しているのかが非常にわかりづらいです。スペースを1つだけ使って、次に何個のスペースが想定されているかを指定する方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="4a189fd8ceca6899851eb5f5658a2bf4f6b54ef4" translate="yes" xml:space="preserve">
          <source>In this way, you can look for patterns in the JavaScript text itself when the AST isn't providing the appropriate data (such as location of commas, semicolons, parentheses, etc.).</source>
          <target state="translated">このようにして、ASTが適切なデータを提供していない場合(カンマやセミコロン、括弧の位置など)に、JavaScriptのテキスト自体からパターンを探すことができます。</target>
        </trans-unit>
        <trans-unit id="d5c0141841620af4d1a195b336ad8e436213bec6" translate="yes" xml:space="preserve">
          <source>In this way, you can retrieve the text and AST used for the last run of &lt;code&gt;linter.verify()&lt;/code&gt;.</source>
          <target state="translated">このようにして、最後の &lt;code&gt;linter.verify()&lt;/code&gt; の実行に使用されたテキストとASTを取得できます。</target>
        </trans-unit>
        <trans-unit id="9f93ca71277a0502e3ed4131457bb0945a787ed0" translate="yes" xml:space="preserve">
          <source>In your &lt;code&gt;.eslintrc.json&lt;/code&gt;:</source>
          <target state="translated">あなたに &lt;code&gt;.eslintrc.json&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="009b0850360ef7549f9650d1923055c3693ba1c5" translate="yes" xml:space="preserve">
          <source>In your &lt;code&gt;index.js&lt;/code&gt; you can do something like this:</source>
          <target state="translated">&lt;code&gt;index.js&lt;/code&gt; では、次のようなことができます。</target>
        </trans-unit>
        <trans-unit id="032a16fac15a2c35de7010f198a6616b53ea5447" translate="yes" xml:space="preserve">
          <source>Include a Plugin</source>
          <target state="translated">プラグインを含める</target>
        </trans-unit>
        <trans-unit id="11727c01a1f0f864099d5b7d0794777c1a808dbc" translate="yes" xml:space="preserve">
          <source>Inconsistent array literals</source>
          <target state="translated">一貫性のない配列リテラル</target>
        </trans-unit>
        <trans-unit id="ca0226a65c54af3be6e8d1317608eb74c1af4347" translate="yes" xml:space="preserve">
          <source>Indent of 2 spaces with &lt;code&gt;MemberExpression&lt;/code&gt; set to &lt;code&gt;0&lt;/code&gt; will indent the multi-line property chains with 0 spaces.</source>
          <target state="translated">&lt;code&gt;MemberExpression&lt;/code&gt; を &lt;code&gt;0&lt;/code&gt; に設定して2つのスペースをインデントすると、複数行のプロパティチェーンが0のスペースでインデントされます。</target>
        </trans-unit>
        <trans-unit id="7291c3e61a93ea88556a7189c20daea3b648aec5" translate="yes" xml:space="preserve">
          <source>Indent of 2 spaces with &lt;code&gt;MemberExpression&lt;/code&gt; set to &lt;code&gt;1&lt;/code&gt; will indent the multi-line property chains with 2 spaces.</source>
          <target state="translated">&lt;code&gt;MemberExpression&lt;/code&gt; を &lt;code&gt;1&lt;/code&gt; に設定して2つのスペースをインデントすると、複数行のプロパティチェーンが2つのスペースでインデントされます。</target>
        </trans-unit>
        <trans-unit id="6bc91230783ec5f7e7d075a1b0c3b0e709d44eaa" translate="yes" xml:space="preserve">
          <source>Indent of 2 spaces with &lt;code&gt;MemberExpression&lt;/code&gt; set to &lt;code&gt;2&lt;/code&gt; will indent the multi-line property chains with 4 spaces.</source>
          <target state="translated">&lt;code&gt;MemberExpression&lt;/code&gt; を &lt;code&gt;2&lt;/code&gt; に設定して2つのスペースをインデントすると、複数行のプロパティチェーンが4つのスペースでインデントされます。</target>
        </trans-unit>
        <trans-unit id="4aa45cb0a17e641de36c01adbba849efeb37b109" translate="yes" xml:space="preserve">
          <source>Indent of 2 spaces with &lt;code&gt;SwitchCase&lt;/code&gt; set to &lt;code&gt;0&lt;/code&gt; will not indent &lt;code&gt;case&lt;/code&gt; clauses with respect to &lt;code&gt;switch&lt;/code&gt; statements.</source>
          <target state="translated">&lt;code&gt;SwitchCase&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; に設定された2つのスペースのインデントは、 &lt;code&gt;switch&lt;/code&gt; ステートメントに関して &lt;code&gt;case&lt;/code&gt; 句をインデントしません。</target>
        </trans-unit>
        <trans-unit id="f4f2a16a4131df3f89017d70bbb1ece160f90c7c" translate="yes" xml:space="preserve">
          <source>Indent of 2 spaces with &lt;code&gt;SwitchCase&lt;/code&gt; set to &lt;code&gt;1&lt;/code&gt; will indent &lt;code&gt;case&lt;/code&gt; clauses with 2 spaces with respect to &lt;code&gt;switch&lt;/code&gt; statements.</source>
          <target state="translated">2つのスペースのインデント &lt;code&gt;SwitchCase&lt;/code&gt; のにセット &lt;code&gt;1&lt;/code&gt; 意志インデント &lt;code&gt;case&lt;/code&gt; に対して2つのスペースを節 &lt;code&gt;switch&lt;/code&gt; 文。</target>
        </trans-unit>
        <trans-unit id="fa3ef7698444ec15ef47c06f1146395abe21723b" translate="yes" xml:space="preserve">
          <source>Indent of 2 spaces with &lt;code&gt;SwitchCase&lt;/code&gt; set to &lt;code&gt;2&lt;/code&gt; will indent &lt;code&gt;case&lt;/code&gt; clauses with 4 spaces with respect to &lt;code&gt;switch&lt;/code&gt; statements.</source>
          <target state="translated">2つのスペースのインデント &lt;code&gt;SwitchCase&lt;/code&gt; のにセット &lt;code&gt;2&lt;/code&gt; 意志インデント &lt;code&gt;case&lt;/code&gt; に対して4つのスペースを節 &lt;code&gt;switch&lt;/code&gt; 文。</target>
        </trans-unit>
        <trans-unit id="04b9c9c421c16f0b5f05a25e69465b0bc0f1be79" translate="yes" xml:space="preserve">
          <source>Indent of 2 spaces with &lt;code&gt;VariableDeclarator&lt;/code&gt; set to &lt;code&gt;2&lt;/code&gt; will indent the multi-line variable declarations with 4 spaces.</source>
          <target state="translated">&lt;code&gt;VariableDeclarator&lt;/code&gt; を &lt;code&gt;2&lt;/code&gt; に設定して2つのスペースをインデントすると、複数行の変数宣言が4つのスペースでインデントされます。</target>
        </trans-unit>
        <trans-unit id="0c8ebca7ea1eadf77aa1539aee5992376aa42b9a" translate="yes" xml:space="preserve">
          <source>Indent of 2 spaces with &lt;code&gt;VariableDeclarator&lt;/code&gt; set to &lt;code&gt;{&quot;var&quot;: 2, &quot;let&quot;: 2, &quot;const&quot;: 3}&lt;/code&gt; will indent the multi-line variable declarations with 4 spaces for &lt;code&gt;var&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt;, 6 spaces for &lt;code&gt;const&lt;/code&gt; statements.</source>
          <target state="translated">&lt;code&gt;VariableDeclarator&lt;/code&gt; が &lt;code&gt;{&quot;var&quot;: 2, &quot;let&quot;: 2, &quot;const&quot;: 3}&lt;/code&gt; 設定された2つのスペースのインデントは、 &lt;code&gt;var&lt;/code&gt; および &lt;code&gt;let&lt;/code&gt; に 4 つのスペース、 &lt;code&gt;const&lt;/code&gt; ステートメントに6つのスペースで複数行の変数宣言をインデントします。</target>
        </trans-unit>
        <trans-unit id="37da0f8ed8adb3a9ae9717323caef07582ce3615" translate="yes" xml:space="preserve">
          <source>Indent of 4 spaces with &lt;code&gt;MemberExpression&lt;/code&gt; set to &lt;code&gt;0&lt;/code&gt; will indent the multi-line property chains with 0 spaces.</source>
          <target state="translated">&lt;code&gt;MemberExpression&lt;/code&gt; を &lt;code&gt;0&lt;/code&gt; に設定して4つのスペースをインデントすると、複数行のプロパティチェーンが0のスペースでインデントされます。</target>
        </trans-unit>
        <trans-unit id="81800a33fcf8d34618c84a566cae8af76effa434" translate="yes" xml:space="preserve">
          <source>Indent of 4 spaces with &lt;code&gt;MemberExpression&lt;/code&gt; set to &lt;code&gt;1&lt;/code&gt; will indent the multi-line property chains with 4 spaces.</source>
          <target state="translated">&lt;code&gt;MemberExpression&lt;/code&gt; を &lt;code&gt;1&lt;/code&gt; に設定して4つのスペースをインデントすると、複数行のプロパティチェーンが4つのスペースでインデントされます。</target>
        </trans-unit>
        <trans-unit id="0adfe437bd53df09a8a1d1b8b57ebaa2b74de516" translate="yes" xml:space="preserve">
          <source>Indent of 4 spaces with &lt;code&gt;MemberExpression&lt;/code&gt; set to &lt;code&gt;2&lt;/code&gt; will indent the multi-line property chains with 8 spaces.</source>
          <target state="translated">&lt;code&gt;MemberExpression&lt;/code&gt; を &lt;code&gt;2&lt;/code&gt; に設定して4つのスペースをインデントすると、複数行のプロパティチェーンが8つのスペースでインデントされます。</target>
        </trans-unit>
        <trans-unit id="c377f9f2c9baba9b61174102349a3cff039f772b" translate="yes" xml:space="preserve">
          <source>Indent of 4 spaces with &lt;code&gt;VariableDeclarator&lt;/code&gt; set to &lt;code&gt;2&lt;/code&gt; will indent the multi-line variable declarations with 8 spaces.</source>
          <target state="translated">&lt;code&gt;VariableDeclarator&lt;/code&gt; を &lt;code&gt;2&lt;/code&gt; に設定して4つのスペースをインデントすると、複数行の変数宣言が8つのスペースでインデントされます。</target>
        </trans-unit>
        <trans-unit id="249477091acfdfe0764a4626099be04431debedd" translate="yes" xml:space="preserve">
          <source>Indent of tab with &lt;code&gt;SwitchCase&lt;/code&gt; set to &lt;code&gt;2&lt;/code&gt; will indent &lt;code&gt;case&lt;/code&gt; clauses with 2 tabs with respect to &lt;code&gt;switch&lt;/code&gt; statements.</source>
          <target state="translated">&lt;code&gt;SwitchCase&lt;/code&gt; が &lt;code&gt;2&lt;/code&gt; に設定されたタブのインデントは、 &lt;code&gt;switch&lt;/code&gt; ステートメントに関して2つのタブを持つ &lt;code&gt;case&lt;/code&gt; 句をインデントします。</target>
        </trans-unit>
        <trans-unit id="f517b0d431fab414c01fa41d1cb1ba6e2c691bfe" translate="yes" xml:space="preserve">
          <source>Indent of tab with &lt;code&gt;VariableDeclarator&lt;/code&gt; set to &lt;code&gt;2&lt;/code&gt; will indent the multi-line variable declarations with 2 tabs.</source>
          <target state="translated">&lt;code&gt;VariableDeclarator&lt;/code&gt; が &lt;code&gt;2&lt;/code&gt; に設定されているタブのインデントは、2つのタブを持つ複数行の変数宣言をインデントします。</target>
        </trans-unit>
        <trans-unit id="be85770cb5a76a0818b1bf2921835273683eab9e" translate="yes" xml:space="preserve">
          <source>Indent style</source>
          <target state="translated">インデントスタイル</target>
        </trans-unit>
        <trans-unit id="c9ec7fcf0ce1c005cbdd2ae9ab39e1773e6bf368" translate="yes" xml:space="preserve">
          <source>Indentation</source>
          <target state="translated">Indentation</target>
        </trans-unit>
        <trans-unit id="e6261109da4902b33b9cd6b6a6e13950c7b2f265" translate="yes" xml:space="preserve">
          <source>Individual rules are the most specialized part of the ESLint architecture. Rules can do very little, they are simply a set of instructions executed against an AST that is provided. They do get some context information passed in, but the primary responsibility of a rule is to inspect the AST and report warnings.</source>
          <target state="translated">個々のルールはESLintアーキテクチャの中で最も特殊な部分です。ルールは、提供されたASTに対して実行される命令のセットに過ぎません。ルールにはいくつかのコンテキスト情報が渡されますが、ルールの主な役割はASTを検査して警告を報告することです。</target>
        </trans-unit>
        <trans-unit id="a85c159fc06136af3a0e6f3ef7f7b357155918ae" translate="yes" xml:space="preserve">
          <source>Infix notation is considered to be more readable and thus more preferable than the function notation.</source>
          <target state="translated">インフィックス記法は、関数記法よりも可読性が高いため、より好ましいと考えられています。</target>
        </trans-unit>
        <trans-unit id="171e49fd6eadd04f3820993c4be21fe5a1b35166" translate="yes" xml:space="preserve">
          <source>Inline configuration</source>
          <target state="translated">インライン構成</target>
        </trans-unit>
        <trans-unit id="d2fd04fd84101709fd89ec790e1371ff8b9ef63c" translate="yes" xml:space="preserve">
          <source>Inline configuration comments</source>
          <target state="translated">インライン構成のコメント</target>
        </trans-unit>
        <trans-unit id="9585f00332de4d4f8c32369ef56719ceb72cd815" translate="yes" xml:space="preserve">
          <source>Inside an &lt;code&gt;async function&lt;/code&gt;, &lt;code&gt;return await&lt;/code&gt; is seldom useful. Since the return value of an &lt;code&gt;async function&lt;/code&gt; is always wrapped in &lt;code&gt;Promise.resolve&lt;/code&gt;, &lt;code&gt;return await&lt;/code&gt; doesn&amp;rsquo;t actually do anything except add extra time before the overarching Promise resolves or rejects. The only valid exception is if &lt;code&gt;return await&lt;/code&gt; is used in a try/catch statement to catch errors from another Promise-based function.</source>
          <target state="translated">&lt;code&gt;async function&lt;/code&gt; 内では、 &lt;code&gt;return await&lt;/code&gt; はほとんど役に立ちません。 &lt;code&gt;async function&lt;/code&gt; の戻り値は常に &lt;code&gt;Promise.resolve&lt;/code&gt; でラップされるため、包括的なPromiseが解決または拒否する前に余分な時間を追加する以外、 &lt;code&gt;return await&lt;/code&gt; は実際には何も行いません。唯一有効な例外は、try / catchステートメントで &lt;code&gt;return await&lt;/code&gt; を使用して、別のPromiseベースの関数からのエラーをキャッチする場合です。</target>
        </trans-unit>
        <trans-unit id="eb0de3cbdd2ccc580ba1ed8ca26a4b30319c1d03" translate="yes" xml:space="preserve">
          <source>Inside your &lt;code&gt;/lib/ci.js&lt;/code&gt; you have</source>
          <target state="translated">あなたの内部 &lt;code&gt;/lib/ci.js&lt;/code&gt; あなたが持っています</target>
        </trans-unit>
        <trans-unit id="97641fdd5c503b70c8becbd4ce8f7e9e8d44e3c6" translate="yes" xml:space="preserve">
          <source>Inside your &lt;code&gt;/lib/ci/common.js&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;/lib/ci/common.js&lt;/code&gt; 内</target>
        </trans-unit>
        <trans-unit id="79793a6b410e0433146645ca2357b284caa999c3" translate="yes" xml:space="preserve">
          <source>Inspect the AST for specific patterns</source>
          <target state="translated">特定のパターンがないかASTを検査する</target>
        </trans-unit>
        <trans-unit id="aa191a92122db1dd534e01a6f8db776a244a258a" translate="yes" xml:space="preserve">
          <source>Inspecting JavaScript code strings</source>
          <target state="translated">JavaScriptのコード文字列の検査</target>
        </trans-unit>
        <trans-unit id="c606fdbf6de357bfc1116bac2ce0d38a13ee0476" translate="yes" xml:space="preserve">
          <source>Installation and Usage</source>
          <target state="translated">設置と使用方法</target>
        </trans-unit>
        <trans-unit id="e15807031e6ce06bd523ee795f410f6739658f43" translate="yes" xml:space="preserve">
          <source>Instances where an arrow function would not produce identical results will be ignored.</source>
          <target state="translated">矢印関数で同じ結果が得られない場合は無視されます。</target>
        </trans-unit>
        <trans-unit id="cd015dcfc5986643aac68a740707e55386dfe2e8" translate="yes" xml:space="preserve">
          <source>Instead of those, you can comply with the rule by writing</source>
          <target state="translated">それらの代わりに、以下のように書くことでルールを遵守することができます。</target>
        </trans-unit>
        <trans-unit id="6029437e076bc4c6afdd7d074c7461678e957ef0" translate="yes" xml:space="preserve">
          <source>Instead of typing out messages in both the &lt;code&gt;context.report()&lt;/code&gt; call and your tests, you can use &lt;code&gt;messageId&lt;/code&gt;s instead.</source>
          <target state="translated">&lt;code&gt;context.report()&lt;/code&gt; 呼び出しとテストの両方でメッセージを入力する代わりに、代わりに &lt;code&gt;messageId&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="ad4af54fe31ce812575acd3bb59ea228cff9bbd9" translate="yes" xml:space="preserve">
          <source>Instead of using a &lt;code&gt;desc&lt;/code&gt; key for suggestions a &lt;code&gt;messageId&lt;/code&gt; can be used instead. This works the same way as &lt;code&gt;messageId&lt;/code&gt;s for the overall error (see &lt;a href=&quot;#messageIds&quot;&gt;messageIds&lt;/a&gt;). Here is an example of how to use it in a rule:</source>
          <target state="translated">提案に &lt;code&gt;desc&lt;/code&gt; キーを使用する代わりに、 &lt;code&gt;messageId&lt;/code&gt; を使用できます。これは、エラー全体の &lt;code&gt;messageId&lt;/code&gt; と同じように機能します（&lt;a href=&quot;#messageIds&quot;&gt;messageIdsを&lt;/a&gt;参照）。これをルールで使用する方法の例を次に示します。</target>
        </trans-unit>
        <trans-unit id="a7881cac6e64abca5eafd172df6eb31fe0b84c88" translate="yes" xml:space="preserve">
          <source>Integrations</source>
          <target state="translated">Integrations</target>
        </trans-unit>
        <trans-unit id="7ce82ae5f06c2403a942ea5944563684a05c2677" translate="yes" xml:space="preserve">
          <source>IntelliJ IDEA, RubyMine, WebStorm, PhpStorm, PyCharm, AppCode, Android Studio, 0xDBE: &lt;a href=&quot;https://plugins.jetbrains.com/plugin/7494-eslint&quot;&gt;ESLint Plugin&lt;/a&gt;</source>
          <target state="translated">IntelliJ IDEA、RubyMine、WebStorm、PhpStorm、PyCharm、AppCode、Android Studio、0xDBE：&lt;a href=&quot;https://plugins.jetbrains.com/plugin/7494-eslint&quot;&gt;ESLintプラグイン&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0dcaca927eb571b52afe4df5a018ef73e1f47fd6" translate="yes" xml:space="preserve">
          <source>Inter-property Delimiters</source>
          <target state="translated">プロパティ間デリミタ</target>
        </trans-unit>
        <trans-unit id="d2e6be9cff98375cf9b71efc8412555587e67bf3" translate="yes" xml:space="preserve">
          <source>Internally, the list of core modules is retrieved via &lt;code&gt;require(&quot;repl&quot;)._builtinLibs&lt;/code&gt;. If you use different versions of Node.js for ESLint and your application, the list of core modules for each version may be different. The above mentioned &lt;code&gt;_builtinLibs&lt;/code&gt; property became available in 0.8, for earlier versions a hardcoded list of module names is used as a fallback. If your version of Node.js is older than 0.6 that list may be inaccurate.</source>
          <target state="translated">内部的には、コアモジュールのリストは &lt;code&gt;require(&quot;repl&quot;)._builtinLibs&lt;/code&gt; を介して取得されます。ESLintとアプリケーションに異なるバージョンのNode.jsを使用する場合、各バージョンのコアモジュールのリストは異なる場合があります。上記の &lt;code&gt;_builtinLibs&lt;/code&gt; プロパティは0.8で利用可能になりました。以前のバージョンでは、ハードコーディングされたモジュール名のリストがフォールバックとして使用されていました。Node.jsのバージョンが0.6より古い場合、そのリストは不正確になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="a353823bf4679ac9a97ecdcdda169f480ccc4e6b" translate="yes" xml:space="preserve">
          <source>Interpreting command line arguments</source>
          <target state="translated">コマンドライン引数の解釈</target>
        </trans-unit>
        <trans-unit id="44cd6f5293258a62e092650968ebc166ee72f7e8" translate="yes" xml:space="preserve">
          <source>Introduced in ES2016, the infix exponentiation operator &lt;code&gt;**&lt;/code&gt; is an alternative for the standard &lt;code&gt;Math.pow&lt;/code&gt; function.</source>
          <target state="translated">ES2016で導入された、中置指数演算子 &lt;code&gt;**&lt;/code&gt; は、標準の &lt;code&gt;Math.pow&lt;/code&gt; 関数の代替です。</target>
        </trans-unit>
        <trans-unit id="306481a508a9005a041e40b4b6b65eb7b3a5810a" translate="yes" xml:space="preserve">
          <source>Introduced in ES2018, object spread is a declarative alternative which may perform better than the more dynamic, imperative &lt;code&gt;Object.assign&lt;/code&gt;.</source>
          <target state="translated">ES2018で導入されたオブジェクトスプレッドは宣言的な代替手段であり、より動的で命令的な &lt;code&gt;Object.assign&lt;/code&gt; よりもパフォーマンスが向上する場合があります。</target>
        </trans-unit>
        <trans-unit id="98ba7cd71bb7b6ecec8a3a9d63e39097f51862b5" translate="yes" xml:space="preserve">
          <source>Invalid Code</source>
          <target state="translated">無効なコード</target>
        </trans-unit>
        <trans-unit id="815945ae0fe3963181a2bfa1fb673d90efae01ff" translate="yes" xml:space="preserve">
          <source>Invalid or irregular whitespace causes issues with ECMAScript 5 parsers and also makes code harder to debug in a similar nature to mixed tabs and spaces.</source>
          <target state="translated">無効な空白や不規則な空白は ECMAScript 5 パーサーで問題を引き起こし、タブや空白が混在しているのと同様の性質でコードのデバッグを困難にします。</target>
        </trans-unit>
        <trans-unit id="d5b11134917a485155a6f88cb85472d4bfbf86f8" translate="yes" xml:space="preserve">
          <source>Is NOT a valid character within JSON which would cause parse errors</source>
          <target state="translated">パースエラーの原因となる JSON 内の有効な文字ではありません。</target>
        </trans-unit>
        <trans-unit id="60cf4231de6804a719f7211d9a553afb7accfba5" translate="yes" xml:space="preserve">
          <source>Is NOT considered a separator for tokens and is often parsed as an &lt;code&gt;Unexpected token ILLEGAL&lt;/code&gt;</source>
          <target state="translated">トークンの区切り文字とは見なされ &lt;code&gt;Unexpected token ILLEGAL&lt;/code&gt; 、しばしば予期しないトークンILLEGALとして解析されます</target>
        </trans-unit>
        <trans-unit id="957302f33f2dc5759ecc018bc572081e80d88860" translate="yes" xml:space="preserve">
          <source>Is NOT shown in modern browsers making code repository software expected to resolve the visualization</source>
          <target state="translated">モダンなブラウザでは表示されませんが、コードリポジトリソフトウェアは、可視化を解決することが期待されていることを作る</target>
        </trans-unit>
        <trans-unit id="dc9cf4d64ebc62cf137d309a08c91bfd3d80092e" translate="yes" xml:space="preserve">
          <source>Is this issue available for me to work on? If you have little or no experience contributing to ESLint, the &lt;a href=&quot;https://github.com/eslint/eslint/labels/good%20first%20issue&quot;&gt;&lt;code&gt;good first issue&lt;/code&gt;&lt;/a&gt; label marks appropriate issues. Otherwise, the &lt;a href=&quot;https://github.com/eslint/eslint/labels/help%20wanted&quot;&gt;&lt;code&gt;help wanted&lt;/code&gt;&lt;/a&gt; label is an invitation to work on the issue. If you have more experience, you can try working on other issues labeled &lt;a href=&quot;https://github.com/eslint/eslint/labels/accepted&quot;&gt;&lt;code&gt;accepted&lt;/code&gt;&lt;/a&gt;. Conversely, issues not yet ready to work on are labeled &lt;code&gt;triage&lt;/code&gt;, &lt;code&gt;evaluating&lt;/code&gt;, and/or &lt;code&gt;needs bikeshedding&lt;/code&gt;, and issues that cannot currently be worked on because of something else, such as a bug in a dependency, are labeled &lt;code&gt;blocked&lt;/code&gt;.</source>
          <target state="translated">この問題は私が取り組むために利用できますか？ESLintに貢献した経験がほとんどないか、まったくない場合、適切な&lt;a href=&quot;https://github.com/eslint/eslint/labels/good%20first%20issue&quot;&gt; &lt;code&gt;good first issue&lt;/code&gt; &lt;/a&gt;ラベルは適切な問題を示します。それ以外の場合、&lt;a href=&quot;https://github.com/eslint/eslint/labels/help%20wanted&quot;&gt; &lt;code&gt;help wanted&lt;/code&gt; &lt;/a&gt;ラベルは、問題に取り組むための招待状です。さらに経験がある場合は、「&lt;a href=&quot;https://github.com/eslint/eslint/labels/accepted&quot;&gt; &lt;code&gt;accepted&lt;/code&gt; &lt;/a&gt;というラベルが付いた他の問題に取り組むことができます。逆に、まだ対処する準備ができていない問題には、 &lt;code&gt;triage&lt;/code&gt; 、 &lt;code&gt;evaluating&lt;/code&gt; 、または &lt;code&gt;needs bikeshedding&lt;/code&gt; であるというラベルが付けられています。また、依存関係のバグなど、他の理由で現在対処できない問題には、 &lt;code&gt;blocked&lt;/code&gt; というラベルが付けられています。</target>
        </trans-unit>
        <trans-unit id="8d7a2b9ab5c52c5baa98c0142e1ecf88e976d9a7" translate="yes" xml:space="preserve">
          <source>Issue 5848: Exponentiation operator ** has different results for numbers and variables from 50 upwards</source>
          <target state="translated">問題5848。指数演算子 **は 50 以上の数値と変数で結果が異なる</target>
        </trans-unit>
        <trans-unit id="37728d8bc7a4f09a840422afa258e772e00bb890" translate="yes" xml:space="preserve">
          <source>Issue Labels</source>
          <target state="translated">課題ラベル</target>
        </trans-unit>
        <trans-unit id="be652d16de194c250a891ad0f6808f168955fcd0" translate="yes" xml:space="preserve">
          <source>It can also take an object with lists of &lt;code&gt;paths&lt;/code&gt; and gitignore-style &lt;code&gt;patterns&lt;/code&gt; strings.</source>
          <target state="translated">また、 &lt;code&gt;paths&lt;/code&gt; とgitignoreスタイルの &lt;code&gt;patterns&lt;/code&gt; 文字列のリストを持つオブジェクトを取ることもできます。</target>
        </trans-unit>
        <trans-unit id="2924f65b6a87a4bd47f6db0bc1044df77741aec9" translate="yes" xml:space="preserve">
          <source>It creates the paths from &lt;code&gt;try&lt;/code&gt; block to &lt;code&gt;catch&lt;/code&gt; block at:</source>
          <target state="translated">これは、 &lt;code&gt;try&lt;/code&gt; ブロックから &lt;code&gt;catch&lt;/code&gt; ブロックへのパスを作成します。</target>
        </trans-unit>
        <trans-unit id="fdb515fbd413583a1777a93401fe6bf040d961f9" translate="yes" xml:space="preserve">
          <source>It creates two code paths.</source>
          <target state="translated">2つのコードパスを作成します。</target>
        </trans-unit>
        <trans-unit id="e0d45deb43503113017a4d4ddd12a12a01bba178" translate="yes" xml:space="preserve">
          <source>It either requires or disallows spaces between the brackets and the values inside of them. This rule does not apply to brackets that are separated from the adjacent value by a newline.</source>
          <target state="translated">括弧とその中の値との間にスペースを必要とするか、または含まないようにします。この規則は、隣接する値と改行で区切られた大括弧には適用されません。</target>
        </trans-unit>
        <trans-unit id="1437185c6ef9d0863b444bd8bb4f3398c15e78df" translate="yes" xml:space="preserve">
          <source>It has two settings:</source>
          <target state="translated">2つの設定があります。</target>
        </trans-unit>
        <trans-unit id="8eac4161f004a7becbe3061ce8c3b4bd97a4b319" translate="yes" xml:space="preserve">
          <source>It is a &lt;code&gt;for()&lt;/code&gt;, &lt;code&gt;while()&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;if()&lt;/code&gt;, or &lt;code&gt;else&lt;/code&gt;, and there is no &lt;code&gt;{&lt;/code&gt;</source>
          <target state="translated">これは &lt;code&gt;for()&lt;/code&gt; 、 &lt;code&gt;while()&lt;/code&gt; 、 &lt;code&gt;do&lt;/code&gt; 、 &lt;code&gt;if()&lt;/code&gt; 、または &lt;code&gt;else&lt;/code&gt; であり、 &lt;code&gt;{&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f04b31fe116a81aee3104f1518870b3f9f257e4d" translate="yes" xml:space="preserve">
          <source>It is also possible to install ESLint globally rather than locally (using &lt;code&gt;npm install eslint --global&lt;/code&gt;). However, this is not recommended, and any plugins or shareable configs that you use must be installed locally in either case.</source>
          <target state="translated">ESLintをローカルではなくグローバルにインストールすることもできます（ &lt;code&gt;npm install eslint --global&lt;/code&gt; を使用）。ただし、これはお勧めできません。使用するプラグインまたは共有可能な構成は、いずれの場合もローカルにインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="60d8bb2666fcd22fb48ff106ea15d22786cda53c" translate="yes" xml:space="preserve">
          <source>It is called (&lt;code&gt;foo()&lt;/code&gt;) or constructed (&lt;code&gt;new foo()&lt;/code&gt;)</source>
          <target state="translated">呼び出される（ &lt;code&gt;foo()&lt;/code&gt; ）または構築される（ &lt;code&gt;new foo()&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="d50a64c3ddd7bf38274c6a5f24e1b180a437f3ae" translate="yes" xml:space="preserve">
          <source>It is considered good practice to only &lt;code&gt;throw&lt;/code&gt; the &lt;code&gt;Error&lt;/code&gt; object itself or an object using the &lt;code&gt;Error&lt;/code&gt; object as base objects for user-defined exceptions. The fundamental benefit of &lt;code&gt;Error&lt;/code&gt; objects is that they automatically keep track of where they were built and originated.</source>
          <target state="translated">ユーザー定義の例外の基本オブジェクトとして &lt;code&gt;Error&lt;/code&gt; オブジェクト自体または &lt;code&gt;Error&lt;/code&gt; オブジェクトを使用するオブジェクトのみを &lt;code&gt;throw&lt;/code&gt; することをお勧めします。 &lt;code&gt;Error&lt;/code&gt; オブジェクトの基本的な利点は、それらが自動的に作成および生成された場所を追跡することです。</target>
        </trans-unit>
        <trans-unit id="be5f31a9c2ec8133c8f35672e41c04c2511eb6b8" translate="yes" xml:space="preserve">
          <source>It is considered good practice to only pass instances of the built-in &lt;code&gt;Error&lt;/code&gt; object to the &lt;code&gt;reject()&lt;/code&gt; function for user-defined errors in Promises. &lt;code&gt;Error&lt;/code&gt; objects automatically store a stack trace, which can be used to debug an error by determining where it came from. If a Promise is rejected with a non-&lt;code&gt;Error&lt;/code&gt; value, it can be difficult to determine where the rejection occurred.</source>
          <target state="translated">Promiseのユーザー定義エラーの場合、組み込みの &lt;code&gt;Error&lt;/code&gt; オブジェクトのインスタンスのみを &lt;code&gt;reject()&lt;/code&gt; 関数に渡すことをお勧めします。 &lt;code&gt;Error&lt;/code&gt; オブジェクトは自動的にスタックトレースを格納します。スタックトレースを使用して、エラーの原因を特定することでエラーをデバッグできます。 &lt;code&gt;Error&lt;/code&gt; 値でPromiseが拒否された場合、拒否が発生した場所を特定するのが難しい場合があります。</target>
        </trans-unit>
        <trans-unit id="a4efad34ec75493b8be888ef3c0c9c3a3be295e6" translate="yes" xml:space="preserve">
          <source>It is considered good practice to use the type-safe equality operators &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt; instead of their regular counterparts &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;.</source>
          <target state="translated">通常の対応する &lt;code&gt;==&lt;/code&gt; および &lt;code&gt;!=&lt;/code&gt; の代わりに、タイプセーフな等価演算子 &lt;code&gt;===&lt;/code&gt; および &lt;code&gt;!==&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="2db77118d25a6696528bec7e8025641d13ef6524" translate="yes" xml:space="preserve">
          <source>It is difficult to tell the intent of the &lt;code&gt;return&lt;/code&gt; statement here. It's possible that the function is meant to return the result of &lt;code&gt;bar + 2&lt;/code&gt;, but then why is it assigning to &lt;code&gt;foo&lt;/code&gt;? It's also possible that the intent was to use a comparison operator such as &lt;code&gt;==&lt;/code&gt; and that this code is an error.</source>
          <target state="translated">ここで &lt;code&gt;return&lt;/code&gt; ステートメントの意図を伝えることは困難です。関数が &lt;code&gt;bar + 2&lt;/code&gt; 結果を返すことを意図している可能性がありますが、それではなぜ &lt;code&gt;foo&lt;/code&gt; に割り当てるのですか？ &lt;code&gt;==&lt;/code&gt; などの比較演算子を使用することが意図されていた可能性があり、このコードはエラーである可能性もあります。</target>
        </trans-unit>
        <trans-unit id="2bfab86bd0d58f0b204ea60ad86d6c48fe5638be" translate="yes" xml:space="preserve">
          <source>It is never permissible to omit the braces in any part of an &lt;code&gt;if&lt;/code&gt; statement.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; ステートメントのどの部分でも中括弧を省略することは決して許されません。</target>
        </trans-unit>
        <trans-unit id="0d610283fcff3de92ca8a3e960496ebdd493acd5" translate="yes" xml:space="preserve">
          <source>It is often necessary to capture the current execution context in order to make it available subsequently. A prominent example of this are jQuery callbacks:</source>
          <target state="translated">後で利用できるようにするために、現在の実行コンテキストをキャプチャする必要があることがよくあります。その代表的な例が jQuery コールバックです。</target>
        </trans-unit>
        <trans-unit id="dfc9afbf00569a0e87286216aa95f76c773a479c" translate="yes" xml:space="preserve">
          <source>It is passed into a function as an argument (&lt;code&gt;doSomething(foo)&lt;/code&gt;)</source>
          <target state="translated">引数として関数に渡されます（ &lt;code&gt;doSomething(foo)&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="dfa2013456253628c34682b02d1086b4f4ef7bcc" translate="yes" xml:space="preserve">
          <source>It is read (&lt;code&gt;var bar = foo&lt;/code&gt;)</source>
          <target state="translated">読み込まれます（ &lt;code&gt;var bar = foo&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="0a1cbdcc89556b2945c916ade57ddabf664e1243" translate="yes" xml:space="preserve">
          <source>It is read inside of a function that is passed to another function (&lt;code&gt;doSomething(function() { foo(); })&lt;/code&gt;)</source>
          <target state="translated">別の関数に渡される関数の内部で読み取られる（ &lt;code&gt;doSomething(function() { foo(); })&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="cbbe54b3892924943f5cfe9bf7ffc5f5c0209850" translate="yes" xml:space="preserve">
          <source>It is the best practice to avoid 'polluting' the global scope with variables that are intended to be local to the script.</source>
          <target state="translated">スクリプトのローカルであることを意図した変数でグローバルスコープを「汚染」しないようにするのが最良の方法です。</target>
        </trans-unit>
        <trans-unit id="d55327c58055d26684cdaa59dbf53b5743e7d61a" translate="yes" xml:space="preserve">
          <source>It may facilitate identifying symbols when one is observed during debugging.</source>
          <target state="translated">デバッグ中にシンボルが観測された場合に、シンボルの識別を容易にすることができるかもしれません。</target>
        </trans-unit>
        <trans-unit id="114d866dd6678baad5a769edfd94f8aa8e3b81d5" translate="yes" xml:space="preserve">
          <source>It must be a Node module loadable from the config file where it appears. Usually, this means you should install the parser package separately using npm.</source>
          <target state="translated">それは、それが表示されるconfigファイルからロード可能なNodeモジュールでなければなりません。通常、これは npm を使用してパーサパッケージを別途インストールする必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="41cebf36bc0a3258b56f36013f221f214f448509" translate="yes" xml:space="preserve">
          <source>It must conform to the &lt;a href=&quot;../developer-guide/working-with-plugins#working-with-custom-parsers&quot;&gt;parser interface&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../developer-guide/working-with-plugins#working-with-custom-parsers&quot;&gt;パーサーインターフェイスに&lt;/a&gt;準拠する必要があります。</target>
        </trans-unit>
        <trans-unit id="cf3f5af0d35e26dd178828257b423e55cf86a169" translate="yes" xml:space="preserve">
          <source>It will not catch blacklisted identifiers that are:</source>
          <target state="translated">ブラックリストに登録されている識別子をキャッチしません。</target>
        </trans-unit>
        <trans-unit id="f5d0d8c3a73df7cb32016f4fcb17e2f5afe0755f" translate="yes" xml:space="preserve">
          <source>It's a common mistake in JavaScript to create an object with just a setter for a property but never have a corresponding getter defined for it. Without a getter, you cannot read the property, so it ends up not being used.</source>
          <target state="translated">JavaScriptでよくある間違いは、プロパティのセッターだけでオブジェクトを作成して、それに対応するゲッターが定義されていないことです。ゲッターがないとプロパティを読み込むことができないので、結局使われません。</target>
        </trans-unit>
        <trans-unit id="9bc2aa041aeca24b1e83bce8e14db39165127131" translate="yes" xml:space="preserve">
          <source>It's a common mistake in JavaScript to use a conditional expression to select between two Boolean values instead of using ! to convert the test to a Boolean. Here are some examples:</source>
          <target state="translated">JavaScriptでよくある間違いは、条件式を使って2つのブール値の間で選択することです。以下にいくつかの例を示します。</target>
        </trans-unit>
        <trans-unit id="1540ef4737be0d6ff417a0782976005f83977b1f" translate="yes" xml:space="preserve">
          <source>It's also possible to manually create a new wrapper instance:</source>
          <target state="translated">新しいラッパーインスタンスを手動で作成することも可能です。</target>
        </trans-unit>
        <trans-unit id="db4f5e50534780f1446698505a2d5bbe87d770d4" translate="yes" xml:space="preserve">
          <source>It's considered a best practice to avoid initializing variables to &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">変数を &lt;code&gt;undefined&lt;/code&gt; に初期化しないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="3b947e8368ebaac8be7eb45d05db7c278b4d8d20" translate="yes" xml:space="preserve">
          <source>It's considered a good practice to avoid using &lt;code&gt;eval()&lt;/code&gt; in JavaScript. There are security and performance implications involved with doing so, which is why many linters (including ESLint) recommend disallowing &lt;code&gt;eval()&lt;/code&gt;. However, there are some other ways to pass a string and have it interpreted as JavaScript code that have similar concerns.</source>
          <target state="translated">JavaScriptで &lt;code&gt;eval()&lt;/code&gt; を使用しないことをお勧めします。これを行うと、セキュリティとパフォーマンスに影響が出ます。そのため、多くのリンター（ESLintを含む）は &lt;code&gt;eval()&lt;/code&gt; を許可しないことを推奨しています。ただし、文字列を渡してJavaScriptコードとして解釈させる方法は他にもあり、同様の懸念があります。</target>
        </trans-unit>
        <trans-unit id="918a92ed2fd168a3c3cdb4b8edf6fc35db93de45" translate="yes" xml:space="preserve">
          <source>It's hard to tell, but there are two spaces between &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;===&lt;/code&gt;. Multiple spaces such as this are generally frowned upon in favor of single spaces:</source>
          <target state="translated">わかりにくいですが、 &lt;code&gt;foo&lt;/code&gt; と &lt;code&gt;===&lt;/code&gt; の間には2つのスペースがあります。このような複数のスペースは、一般的に単一のスペースを支持して嫌われています：</target>
        </trans-unit>
        <trans-unit id="b430d90d24691524aa348af6d5cc4d1cefef18fc" translate="yes" xml:space="preserve">
          <source>It's less common to use &lt;code&gt;new&lt;/code&gt; and not store the result, such as:</source>
          <target state="translated">次のように、結果を保存せずに &lt;code&gt;new&lt;/code&gt; を使用することはあまり一般的ではありません。</target>
        </trans-unit>
        <trans-unit id="d714e9087d5b54ecca2b51569eb95d74ddf8334f" translate="yes" xml:space="preserve">
          <source>It's possible to create functions in JavaScript using the &lt;code&gt;Function&lt;/code&gt; constructor, such as:</source>
          <target state="translated">次のような &lt;code&gt;Function&lt;/code&gt; コンストラクターを使用して、JavaScriptで関数を作成できます。</target>
        </trans-unit>
        <trans-unit id="ee85d43b1ef036dbda6ac1ecca68ca0ebe5218b1" translate="yes" xml:space="preserve">
          <source>It's possible to create multiline strings in JavaScript by using a slash before a newline, such as:</source>
          <target state="translated">JavaScriptでは、改行の前にスラッシュを使用することで、複数行の文字列を作成することができます。</target>
        </trans-unit>
        <trans-unit id="eef00365692deaf723e678d24f89a72996bca75d" translate="yes" xml:space="preserve">
          <source>It's possible to have a class method which doesn't use &lt;code&gt;this&lt;/code&gt;, such as:</source>
          <target state="translated">これは、使用しないクラスメソッド持つことが可能だ &lt;code&gt;this&lt;/code&gt; 、のような：</target>
        </trans-unit>
        <trans-unit id="338c73acf937231c9f586f241d1a166618a1a2de" translate="yes" xml:space="preserve">
          <source>It's possible to share multiple configs in the same npm package. You can specify a default config for the package by following the directions in the first section. You can specify additional configs by simply adding a new file to your npm package and then referencing it from your ESLint config.</source>
          <target state="translated">同じ npm パッケージ内で複数の設定を共有することが可能です。最初のセクションの指示に従って、パッケージのデフォルトの設定を指定できます。npm パッケージに新しいファイルを追加して、ESLint の設定から参照することで、追加の設定を指定することができます。</target>
        </trans-unit>
        <trans-unit id="232ff89a49d744909e74bfbe6f3a0152ca2f07e5" translate="yes" xml:space="preserve">
          <source>It's therefore unnecessary to initialize a variable to &lt;code&gt;undefined&lt;/code&gt;, such as:</source>
          <target state="translated">したがって、次のように変数を &lt;code&gt;undefined&lt;/code&gt; に初期化する必要はありません。</target>
        </trans-unit>
        <trans-unit id="6700e2ff03beeb48145f7ff39dce207f42ed620a" translate="yes" xml:space="preserve">
          <source>It's unnecessary to concatenate two strings together, such as:</source>
          <target state="translated">のように2つの文字列を連結するのは不要です。</target>
        </trans-unit>
        <trans-unit id="bcf1e0519c1e3f74f5179a17cad7d7e59f2d0a7d" translate="yes" xml:space="preserve">
          <source>It's unnecessary to use computed properties with literals such as:</source>
          <target state="translated">のようなリテラルで計算されたプロパティを使用する必要はありません。</target>
        </trans-unit>
        <trans-unit id="56d6447c476a3f8a52dcf546edf453aff97884dd" translate="yes" xml:space="preserve">
          <source>It's up to the plugin to decide if it needs to return just one part, or multiple pieces. For example in the case of processing &lt;code&gt;.html&lt;/code&gt; files, you might want to return just one item in the array by combining all scripts, but for &lt;code&gt;.md&lt;/code&gt; file where each JavaScript block might be independent, you can return multiple items.</source>
          <target state="translated">部品を1つだけ返すか、複数の部品を返す必要があるかを決定するのはプラグイン次第です。たとえば、 &lt;code&gt;.html&lt;/code&gt; ファイルを処理する場合、すべてのスクリプトを組み合わせて配列内の1つのアイテムのみを返すことができますが、各JavaScriptブロックが独立している &lt;code&gt;.md&lt;/code&gt; ファイルの場合、複数のアイテムを返すことができます。</target>
        </trans-unit>
        <trans-unit id="6560f835b7a7d5870e94eb9b41e3fcd77d90d7e8" translate="yes" xml:space="preserve">
          <source>JSCS allows you to specify a configuration file to use on the command line using either &lt;code&gt;--config&lt;/code&gt; or &lt;code&gt;-c&lt;/code&gt;, such as:</source>
          <target state="translated">JSCSでは、-- &lt;code&gt;--config&lt;/code&gt; または &lt;code&gt;-c&lt;/code&gt; のいずれかを使用して、コマンドラインで使用する構成ファイルを指定できます。</target>
        </trans-unit>
        <trans-unit id="ad2824b434b68a13856ffaff984918c67213b72f" translate="yes" xml:space="preserve">
          <source>JSCS uses the &lt;code&gt;--fix&lt;/code&gt; option to apply automatic fixes to code:</source>
          <target state="translated">JSCSは &lt;code&gt;--fix&lt;/code&gt; オプションを使用して、コードに自動修正を適用します。</target>
        </trans-unit>
        <trans-unit id="7e6a7de74786bb8a06e6cd1f198e6bb251b32a02" translate="yes" xml:space="preserve">
          <source>JSCS: &lt;a href=&quot;https://jscs-dev.github.io/rule/requireNewlineBeforeSingleStatementsInIf&quot;&gt;requireNewlineBeforeSingleStatementsInIf&lt;/a&gt;</source>
          <target state="translated">JSCS：&lt;a href=&quot;https://jscs-dev.github.io/rule/requireNewlineBeforeSingleStatementsInIf&quot;&gt;requireNewlineBeforeSingleStatementsInIf&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="eb066eaad6fec2a6a994996f176b5cede7d0c117" translate="yes" xml:space="preserve">
          <source>JSDoc</source>
          <target state="translated">JSDoc</target>
        </trans-unit>
        <trans-unit id="03371684afaf55d8f3d68e5dc095125a09ff3cd3" translate="yes" xml:space="preserve">
          <source>JSON whitespace issues</source>
          <target state="translated">JSON のホワイトスペースの問題</target>
        </trans-unit>
        <trans-unit id="ae37798c9273d9a9a11bbfcf191ad17fc943238e" translate="yes" xml:space="preserve">
          <source>JSX attribute values can contain string literals, which are delimited with single or double quotes.</source>
          <target state="translated">JSX属性値は文字列リテラルを含むことができ、シングルクォーテーションまたはダブルクォーテーションで区切られます。</target>
        </trans-unit>
        <trans-unit id="8cb39ed38ed1f1854a0f052be116e2d4d4ed3892" translate="yes" xml:space="preserve">
          <source>JSX exception</source>
          <target state="translated">JSX例外</target>
        </trans-unit>
        <trans-unit id="3755f3f206953314cab133719791d70c7c568127" translate="yes" xml:space="preserve">
          <source>Jasmine</source>
          <target state="translated">Jasmine</target>
        </trans-unit>
        <trans-unit id="aeb477733ef3bd24e40cc3ef2f023ec0e75bb981" translate="yes" xml:space="preserve">
          <source>JavaScript Scoping and Hoisting</source>
          <target state="translated">JavaScriptのスコープとホイスト</target>
        </trans-unit>
        <trans-unit id="35fd2acb7480cdbfc20e463c2d778164a28c3af8" translate="yes" xml:space="preserve">
          <source>JavaScript Semicolon Insertion</source>
          <target state="translated">JavaScriptセミコロン挿入</target>
        </trans-unit>
        <trans-unit id="a1533b7dece4ef1e890cbfd9e9b05d2df5893150" translate="yes" xml:space="preserve">
          <source>JavaScript allows for placing unnecessary spaces between an expression and the closing semicolon.</source>
          <target state="translated">JavaScriptでは、式と終了セミコロンの間に不要なスペースを入れることができます。</target>
        </trans-unit>
        <trans-unit id="fb3776e4f2a012989a09983f23fbfa42da091730" translate="yes" xml:space="preserve">
          <source>JavaScript allows operands of ternary expressions to be separated by newlines, which can improve the readability of your program.</source>
          <target state="translated">JavaScriptでは、三項式のオペランドを改行で区切ることができ、プログラムの可読性を向上させることができます。</target>
        </trans-unit>
        <trans-unit id="70238e7446b2c14f3c63ee52342d01ab306e0ac0" translate="yes" xml:space="preserve">
          <source>JavaScript allows the omission of curly braces when a block contains only one statement. However, it is considered by many to be best practice to &lt;em&gt;never&lt;/em&gt; omit curly braces around blocks, even when they are optional, because it can lead to bugs and reduces code clarity. So the following:</source>
          <target state="translated">JavaScriptでは、ブロックにステートメントが1つしか含まれていない場合、中括弧を省略できます。ただし、バグの原因となり、コードの明瞭さが低下する可能性があるため、オプションの場合でも、ブロックの周りの中括弧を省略し&lt;em&gt;ないこと&lt;/em&gt;がベストプラクティスであると多くの人が考えています。したがって、次のようになります。</target>
        </trans-unit>
        <trans-unit id="874615b72be77374791ea953ea46256b48a8b2d9" translate="yes" xml:space="preserve">
          <source>JavaScript allows the omission of parentheses when invoking a function via the &lt;code&gt;new&lt;/code&gt; keyword and the constructor has no arguments. However, some coders believe that omitting the parentheses is inconsistent with the rest of the language and thus makes code less clear.</source>
          <target state="translated">JavaScriptでは、 &lt;code&gt;new&lt;/code&gt; キーワードを介して関数を呼び出すときに括弧を省略でき、コンストラクターには引数がありません。ただし、一部のコーダーは、括弧を省略すると他の言語と矛盾し、コードが不明確になると考えています。</target>
        </trans-unit>
        <trans-unit id="1b3cd75cba9ae18b5f809b6e802a6ac27d7d0cb6" translate="yes" xml:space="preserve">
          <source>JavaScript allows whitespace between objects and their properties. However, inconsistent spacing can make code harder to read and can lead to errors.</source>
          <target state="translated">JavaScript では、オブジェクトとそのプロパティの間に空白を入れることができます。しかし、不整合な間隔はコードを読みにくくし、エラーを引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="3dc87ecb051dcb25ce39847b91018535b39fdc05" translate="yes" xml:space="preserve">
          <source>JavaScript allows you to define strings in one of three ways: double quotes, single quotes, and backticks (as of ECMAScript 6). For example:</source>
          <target state="translated">JavaScript では、二重引用符、単一引用符、バックティックの 3 つの方法のいずれかで文字列を定義することができます(ECMAScript 6 以降)。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="d5c94ad5d9baaf1eef18b221f414ea08803b2b2b" translate="yes" xml:space="preserve">
          <source>JavaScript allows you to place newlines before or after a dot in a member expression.</source>
          <target state="translated">JavaScript では、メンバ式のドットの前後に改行を入れることができます。</target>
        </trans-unit>
        <trans-unit id="ff9324f42b811ab6297f7a807c024f230020aaf3" translate="yes" xml:space="preserve">
          <source>JavaScript allows you to place unnecessary spaces before or after a semicolon.</source>
          <target state="translated">JavaScriptでは、セミコロンの前後に不要なスペースを入れることができます。</target>
        </trans-unit>
        <trans-unit id="2cecfbaf09bf74a3e6308e2394b0e0e42e4f3694" translate="yes" xml:space="preserve">
          <source>JavaScript environments contain a number of built-in global variables, such as &lt;code&gt;window&lt;/code&gt; in browsers and &lt;code&gt;process&lt;/code&gt; in Node.js. In almost all cases, you don't want to assign a value to these global variables as doing so could result in losing access to important functionality. For example, you probably don't want to do this in browser code:</source>
          <target state="translated">JavaScript環境には、ブラウザーの &lt;code&gt;window&lt;/code&gt; やNode.jsの &lt;code&gt;process&lt;/code&gt; など、多数の組み込みグローバル変数が含まれています。ほとんどの場合、これらのグローバル変数に値を割り当てないでください。値を割り当てると、重要な機能にアクセスできなくなる可能性があります。たとえば、ブラウザコードでこれを実行したくない場合があります。</target>
        </trans-unit>
        <trans-unit id="2bf5eedeafd607eaa45b9a97d92f8d8ae4ea268f" translate="yes" xml:space="preserve">
          <source>JavaScript functions can be written as a FunctionDeclaration &lt;code&gt;function foo() { ... }&lt;/code&gt; or as a FunctionExpression &lt;code&gt;var foo = function() { ... };&lt;/code&gt;. While a JavaScript interpreter might tolerate it, overwriting/reassigning a function written as a FunctionDeclaration is often indicative of a mistake or issue.</source>
          <target state="translated">JavaScript関数は、FunctionDeclaration &lt;code&gt;function foo() { ... }&lt;/code&gt; またはFunctionExpression &lt;code&gt;var foo = function() { ... };&lt;/code&gt; として記述できます。。JavaScriptインタープリターはそれを許容するかもしれませんが、FunctionDeclarationとして作成された関数を上書き/再割り当てすることは、多くの場合、誤りまたは問題を示しています。</target>
        </trans-unit>
        <trans-unit id="46aa43f956749763c4c77aef295237374a62c29e" translate="yes" xml:space="preserve">
          <source>JavaScript has a lot of language features, and not everyone likes all of them. As a result, some projects choose to disallow the use of certain language features altogether. For instance, you might decide to disallow the use of &lt;code&gt;try-catch&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt;, or you might decide to disallow the use of the &lt;code&gt;in&lt;/code&gt; operator.</source>
          <target state="translated">JavaScriptには多くの言語機能があり、誰もがそれらすべてを気に入っているわけではありません。その結果、一部のプロジェクトでは、特定の言語機能の使用をすべて禁止することを選択しています。たとえば、 &lt;code&gt;try-catch&lt;/code&gt; や &lt;code&gt;class&lt;/code&gt; の使用を禁止したり、 &lt;code&gt;in&lt;/code&gt; 演算子の使用を禁止したりできます。</target>
        </trans-unit>
        <trans-unit id="4b4a005b83e68cac28ad34d043efe8c63977c815" translate="yes" xml:space="preserve">
          <source>JavaScript is unique amongst the C-like languages in that it doesn't require semicolons at the end of each statement. In many cases, the JavaScript engine can determine that a semicolon should be in a certain spot and will automatically add it. This feature is known as &lt;strong&gt;automatic semicolon insertion (ASI)&lt;/strong&gt; and is considered one of the more controversial features of JavaScript. For example, the following lines are both valid:</source>
          <target state="translated">JavaScriptは、各ステートメントの最後にセミコロンを必要としないという点で、Cのような言語の中でユニークです。多くの場合、JavaScriptエンジンはセミコロンを特定の場所に配置する必要があると判断し、自動的に追加します。この機能は、&lt;strong&gt;自動セミコロン挿入（ASI）&lt;/strong&gt;として知られており、JavaScriptで議論の余地のある機能の1つと見なされています。たとえば、次の行はどちらも有効です。</target>
        </trans-unit>
        <trans-unit id="ec241f3f76e7823d627bd4584bd71234938ed3c6" translate="yes" xml:space="preserve">
          <source>JavaScript provides shorthand operators that combine variable assignment and some simple mathematical operations. For example, &lt;code&gt;x = x + 4&lt;/code&gt; can be shortened to &lt;code&gt;x += 4&lt;/code&gt;. The supported shorthand forms are as follows:</source>
          <target state="translated">JavaScriptは、変数の割り当てといくつかの単純な数学演算を組み合わせる簡略演算子を提供します。たとえば、 &lt;code&gt;x = x + 4&lt;/code&gt; は &lt;code&gt;x += 4&lt;/code&gt; 短縮できます。サポートされている短縮形は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="47c3f29689bdd2ef62ccda2e081bc789ad36a502" translate="yes" xml:space="preserve">
          <source>JavaScript suspends the control flow statements of &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; blocks until the execution of &lt;code&gt;finally&lt;/code&gt; block finishes. So, when &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;, or &lt;code&gt;continue&lt;/code&gt; is used in &lt;code&gt;finally&lt;/code&gt;, control flow statements inside &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; are overwritten, which is considered as unexpected behavior. Such as:</source>
          <target state="translated">JavaScriptは、 &lt;code&gt;finally&lt;/code&gt; ブロックの実行が &lt;code&gt;catch&lt;/code&gt; するまで、 &lt;code&gt;try&lt;/code&gt; およびcatchブロックの制御フローステートメントを一時停止します。そのため、 &lt;code&gt;finally&lt;/code&gt; で &lt;code&gt;return&lt;/code&gt; 、 &lt;code&gt;throw&lt;/code&gt; 、 &lt;code&gt;break&lt;/code&gt; 、または &lt;code&gt;continue&lt;/code&gt; を使用する &lt;code&gt;try&lt;/code&gt; 、tryおよび &lt;code&gt;catch&lt;/code&gt; 内の制御フローステートメントが上書きされ、予期しない動作と見なされます。といった：</target>
        </trans-unit>
        <trans-unit id="0bed567369bc5dad154764ff85e0f62d5a508f04" translate="yes" xml:space="preserve">
          <source>JavaScript's &lt;code&gt;alert&lt;/code&gt;, &lt;code&gt;confirm&lt;/code&gt;, and &lt;code&gt;prompt&lt;/code&gt; functions are widely considered to be obtrusive as UI elements and should be replaced by a more appropriate custom UI implementation. Furthermore, &lt;code&gt;alert&lt;/code&gt; is often used while debugging code, which should be removed before deployment to production.</source>
          <target state="translated">JavaScriptの &lt;code&gt;alert&lt;/code&gt; 、 &lt;code&gt;confirm&lt;/code&gt; 、および &lt;code&gt;prompt&lt;/code&gt; 関数は、UI要素として邪魔になると広く考えられており、より適切なカスタムUI実装に置き換える必要があります。さらに、 &lt;code&gt;alert&lt;/code&gt; はコードのデバッグ中によく使用されます。本番環境にデプロイする前に削除する必要があります。</target>
        </trans-unit>
        <trans-unit id="bb36d203e1e163e1a6bae5dfbd3a4757283a3d47" translate="yes" xml:space="preserve">
          <source>JavaScript's &lt;code&gt;eval()&lt;/code&gt; function is potentially dangerous and is often misused. Using &lt;code&gt;eval()&lt;/code&gt; on untrusted code can open a program up to several different injection attacks. The use of &lt;code&gt;eval()&lt;/code&gt; in most contexts can be substituted for a better, alternative approach to a problem.</source>
          <target state="translated">JavaScriptの &lt;code&gt;eval()&lt;/code&gt; 関数は潜在的に危険であり、しばしば誤用されます。信頼できないコードで &lt;code&gt;eval()&lt;/code&gt; を使用すると、プログラムをいくつかの異なるインジェクション攻撃まで開くことができます。ほとんどのコンテキストでの &lt;code&gt;eval()&lt;/code&gt; の使用は、問題に対するより優れた代替アプローチの代わりに使用できます。</target>
        </trans-unit>
        <trans-unit id="ff0382e972b4c38f7e98ab4c1c45d9893b525347" translate="yes" xml:space="preserve">
          <source>JavaScript: Don&amp;rsquo;t Reassign Your Function Arguments</source>
          <target state="translated">JavaScript：関数の引数を再割り当てしないでください</target>
        </trans-unit>
        <trans-unit id="1ca76be7b84d714e17e61b65c84bec4810f63dd5" translate="yes" xml:space="preserve">
          <source>Javascript</source>
          <target state="translated">Javascript</target>
        </trans-unit>
        <trans-unit id="de938f1548a4251b63d23119145ba2c835fe9fb6" translate="yes" xml:space="preserve">
          <source>Just as developers might type &lt;code&gt;-a + b&lt;/code&gt; when they mean &lt;code&gt;-(a + b)&lt;/code&gt; for the negative of a sum, they might type &lt;code&gt;!key in object&lt;/code&gt; by mistake when they almost certainly mean &lt;code&gt;!(key in object)&lt;/code&gt; to test that a key is not in an object.</source>
          <target state="translated">開発者が入力する可能性があるのと同じように &lt;code&gt;-a + b&lt;/code&gt; 、彼らが意味するとき &lt;code&gt;-(a + b)&lt;/code&gt; 和の負のために、彼らはタイプかもしれません &lt;code&gt;!key in object&lt;/code&gt; するとき、彼らはほぼ確実に平均誤って &lt;code&gt;!(key in object)&lt;/code&gt; キーというテストにオブジェクト内にありません。</target>
        </trans-unit>
        <trans-unit id="000a2d9b669cfca9b9c610b40fd644d3f5bb04e7" translate="yes" xml:space="preserve">
          <source>Just as developers might type &lt;code&gt;-a + b&lt;/code&gt; when they mean &lt;code&gt;-(a + b)&lt;/code&gt; for the negative of a sum, they might type &lt;code&gt;!key in object&lt;/code&gt; by mistake when they almost certainly mean &lt;code&gt;!(key in object)&lt;/code&gt; to test that a key is not in an object. &lt;code&gt;!obj instanceof Ctor&lt;/code&gt; is similar.</source>
          <target state="translated">開発者が入力する可能性があるのと同じように &lt;code&gt;-a + b&lt;/code&gt; 、彼らが意味するとき &lt;code&gt;-(a + b)&lt;/code&gt; 和の負のために、彼らはタイプかもしれません &lt;code&gt;!key in object&lt;/code&gt; するとき、彼らはほぼ確実に平均誤って &lt;code&gt;!(key in object)&lt;/code&gt; キーというテストにオブジェクト内にありません。 &lt;code&gt;!obj instanceof Ctor&lt;/code&gt; も同様です。</target>
        </trans-unit>
        <trans-unit id="e7c5d4963c2bb1e89fc55db41dc9f08d57c55c03" translate="yes" xml:space="preserve">
          <source>Keep in mind that comments are technically not a part of the AST and are only attached to it on demand, i.e. when you call &lt;code&gt;getComments()&lt;/code&gt;.</source>
          <target state="translated">コメントは技術的にはASTの一部ではなく、オンデマンドで、つまり &lt;code&gt;getComments()&lt;/code&gt; を呼び出したときにのみ添付されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c0cf9d5c180dc8564a0d7f4b2a8b48a106463c1f" translate="yes" xml:space="preserve">
          <source>Keep in mind that the results of this method are calculated on demand.</source>
          <target state="translated">この方法の結果は、需要に応じて計算されることを覚えておきましょう。</target>
        </trans-unit>
        <trans-unit id="9bd26d701e8f6ce99367d708dc895d0600bdb131" translate="yes" xml:space="preserve">
          <source>Keep in mind that we have over 200 rules, and that is daunting both for end users and the ESLint team (who has to maintain them). As such, any new rules must be deemed of high importance to be considered for inclusion in ESLint.</source>
          <target state="translated">200以上のルールがあり、エンドユーザーにとってもESLintチームにとっても大変なことです。そのため、新しいルールはESLintに入れるためには重要なものでなければなりません。</target>
        </trans-unit>
        <trans-unit id="fa5d51b19a07be0d8f7c43f2a968f97c27a9cb40" translate="yes" xml:space="preserve">
          <source>Keep your rule names as short as possible, use abbreviations where appropriate, and no more than four words.</source>
          <target state="translated">ルール名はできるだけ短くし、必要に応じて略語を使用し、4語以内にしましょう。</target>
        </trans-unit>
        <trans-unit id="0f1567b40d5b2ede1e1ea5371f1e60b1c78c78b4" translate="yes" xml:space="preserve">
          <source>Keeping to one of these styles across a project's codebase can help with maintaining code consistency.</source>
          <target state="translated">プロジェクトのコードベース全体でこれらのスタイルのいずれかを維持することは、コードの一貫性を維持するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="ede3a17a01c5c55ed695487d421a99c9eb323e43" translate="yes" xml:space="preserve">
          <source>Keywords are syntax elements of JavaScript, such as &lt;code&gt;function&lt;/code&gt; and &lt;code&gt;if&lt;/code&gt;. These identifiers have special meaning to the language and so often appear in a different color in code editors. As an important part of the language, style guides often refer to the spacing that should be used around keywords. For example, you might have a style guide that says keywords should be always be preceded by spaces, which would mean &lt;code&gt;if-else&lt;/code&gt; statements must look like this:</source>
          <target state="translated">キーワードは、 &lt;code&gt;function&lt;/code&gt; や &lt;code&gt;if&lt;/code&gt; などのJavaScriptの構文要素です。これらの識別子は言語にとって特別な意味を持つため、多くの場合、コードエディターでは異なる色で表示されます。言語の重要な部分として、スタイルガイドはしばしばキーワードの周りに使用されるべきスペースを参照します。たとえば、キーワードの前には常にスペースを付ける必要があるというスタイルガイドがある &lt;code&gt;if-else&lt;/code&gt; ステートメントは次のようになります。</target>
        </trans-unit>
        <trans-unit id="04fdc186fe5b056bf0b371917035f93e70f4315f" translate="yes" xml:space="preserve">
          <source>Keywords are syntax elements of JavaScript, such as &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;if&lt;/code&gt;. These keywords have special meaning to the language and so often appear in a different color in code editors. As an important part of the language, style guides often refer to the spacing that should be used around keywords. For example, you might have a style guide that says keywords should be always surrounded by spaces, which would mean &lt;code&gt;if-else&lt;/code&gt; statements must look like this:</source>
          <target state="translated">キーワードは、 &lt;code&gt;try&lt;/code&gt; や &lt;code&gt;if&lt;/code&gt; などのJavaScriptの構文要素です。これらのキーワードは言語にとって特別な意味を持つため、多くの場合、コードエディタでは異なる色で表示されます。言語の重要な部分として、スタイルガイドはしばしばキーワードの周りに使用されるべきスペースを参照します。たとえば、キーワードは常にスペースで囲む必要があると言うスタイルガイドがある &lt;code&gt;if-else&lt;/code&gt; ステートメントは次のようになるはずです。</target>
        </trans-unit>
        <trans-unit id="616ae0e516f073c066a59a8a38d5b52110f5407c" translate="yes" xml:space="preserve">
          <source>Known Limitations</source>
          <target state="translated">既知の制限</target>
        </trans-unit>
        <trans-unit id="aefb9f3a1db6e7c07463bd61307df961e5c58166" translate="yes" xml:space="preserve">
          <source>Known issues these spaces cause:</source>
          <target state="translated">これらのスペースが引き起こす既知の問題。</target>
        </trans-unit>
        <trans-unit id="a5a5fafee83492d8b176cbbdd5bb0860a6fdbf28" translate="yes" xml:space="preserve">
          <source>Known limitations:</source>
          <target state="translated">既知の制限事項。</target>
        </trans-unit>
        <trans-unit id="2e1b2523d4a68ad42a3b6d5503d6d80ddf3b1ade" translate="yes" xml:space="preserve">
          <source>Labeled statements are only used in conjunction with labeled break and continue statements. ECMAScript has no goto statement.</source>
          <target state="translated">ラベル付きのステートメントは、ラベル付きの break ステートメントと continue ステートメントと一緒にのみ使用されます。ECMAScript には goto 文がありません。</target>
        </trans-unit>
        <trans-unit id="f4101de43a6ddffb71075f1f736064d12f1f6f81" translate="yes" xml:space="preserve">
          <source>Labeled statements in JavaScript are used in conjunction with &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; to control flow around multiple loops. For example:</source>
          <target state="translated">JavaScriptのラベル付きステートメントは、 &lt;code&gt;break&lt;/code&gt; と組み合わせて使用​​され、複数のループの周りのフローを制御し &lt;code&gt;continue&lt;/code&gt; ます。例えば：</target>
        </trans-unit>
        <trans-unit id="578dee19c6502f01a038eb78b3e49185c558cf41" translate="yes" xml:space="preserve">
          <source>Labels that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring.</source>
          <target state="translated">宣言されていてコードのどこにも使用されていないラベルは、不完全なリファクタリングによるエラーである可能性が高いです。</target>
        </trans-unit>
        <trans-unit id="b541cfe1ccb84d2c69d0625a99389540b77207ad" translate="yes" xml:space="preserve">
          <source>Language Options</source>
          <target state="translated">言語オプション</target>
        </trans-unit>
        <trans-unit id="c83f2b161b8660b0f54cc1c267ca1f4032a63ad5" translate="yes" xml:space="preserve">
          <source>Large - Runs ESLint on JSHint</source>
          <target state="translated">Large-JSHint上でESLintを実行します.</target>
        </trans-unit>
        <trans-unit id="6237b22967da3f057cb71015bdcdfde4226ee27a" translate="yes" xml:space="preserve">
          <source>Last, it advances to the end.</source>
          <target state="translated">最後に、最後まで進みます。</target>
        </trans-unit>
        <trans-unit id="9791177c6b357c99f38a6978d495bcc8f01ed2dd" translate="yes" xml:space="preserve">
          <source>Learn about &lt;a href=&quot;user-guide/configuring&quot;&gt;advanced configuration&lt;/a&gt; of ESLint.</source>
          <target state="translated">学ぶ&lt;a href=&quot;user-guide/configuring&quot;&gt;高度な設定&lt;/a&gt; ESLintの。</target>
        </trans-unit>
        <trans-unit id="cbbe2fab2ebf18de7304c94a0bc02843f5d36771" translate="yes" xml:space="preserve">
          <source>Less clear:</source>
          <target state="translated">クリアーが少ない。</target>
        </trans-unit>
        <trans-unit id="976713d5799583acf6a0e5a8fbc1bb4180537050" translate="yes" xml:space="preserve">
          <source>Let's fix Node.js Buffer API</source>
          <target state="translated">Node.jsのBuffer APIを修正しよう</target>
        </trans-unit>
        <trans-unit id="b837d744af533d631032679a5d43e88b68690a08" translate="yes" xml:space="preserve">
          <source>Let's look at the following perfectly valid (but single line) code.</source>
          <target state="translated">以下の完全に有効な (ただし 1 行の)コードを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="230759061d18d6dc57a7ec18ba52827940445025" translate="yes" xml:space="preserve">
          <source>Level of indentation denotes the multiple of the indent specified. Example:</source>
          <target state="translated">インデントのレベルは、指定されたインデントの倍数を表します。例)インデントのレベルは、指定されたインデントの倍数を表します。</target>
        </trans-unit>
        <trans-unit id="abe24f73a4adf73f80d772b8c813e00b0527dce6" translate="yes" xml:space="preserve">
          <source>Lexical declarations &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt;, as well as &lt;code&gt;class&lt;/code&gt; declarations, create variables that are block-scoped.</source>
          <target state="translated">字句宣言 &lt;code&gt;const&lt;/code&gt; と &lt;code&gt;let&lt;/code&gt; 、および &lt;code&gt;class&lt;/code&gt; 宣言は、ブロックスコープの変数を作成します。</target>
        </trans-unit>
        <trans-unit id="283e35c5290c66cc5d747cb923851a3eaf110a70" translate="yes" xml:space="preserve">
          <source>Lexically declared variables are shadowing properties of the global object, which might produce errors if a consuming script is using both the variable and the property.</source>
          <target state="translated">レキシ的に宣言された変数は、グローバルオブジェクトのプロパティをシャドウイングしているため、スクリプトが変数とプロパティの両方を使用している場合にエラーが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="2804cac1a3610e9d560401096d1b0ec1d1c27ea1" translate="yes" xml:space="preserve">
          <source>Lexically declared variables can produce a permanent Temporal Dead Zone (TDZ) if the initialization throws an exception. Even the &lt;code&gt;typeof&lt;/code&gt; check is not safe from TDZ reference exceptions.</source>
          <target state="translated">初期化によって例外がスローされた場合、字句的に宣言された変数は永続的な一時的デッドゾーン（TDZ）を生成する可能性があります。 &lt;code&gt;typeof&lt;/code&gt; チェックでさえ、TDZ参照例外から安全ではありません。</target>
        </trans-unit>
        <trans-unit id="f225bdc0c179471d37c539bc0687e6c4f1ede246" translate="yes" xml:space="preserve">
          <source>Lexically declared variables cannot be conditionally created. A script cannot check for the existence of a variable and then create a new one. &lt;code&gt;var&lt;/code&gt; variables are also always created, but redeclarations do not cause runtime exceptions.</source>
          <target state="translated">字句的に宣言された変数は、条件付きで作成できません。スクリプトは、変数の存在を確認してから新しい変数を作成することはできません。 &lt;code&gt;var&lt;/code&gt; 変数も常に作成されますが、再宣言によって実行時例外が発生することはありません。</target>
        </trans-unit>
        <trans-unit id="e80a36f53dbe317f96ffd3bade7375caa2f65f51" translate="yes" xml:space="preserve">
          <source>Lexically declared variables do not create properties on the global object, which is what a consuming script might expect.</source>
          <target state="translated">レキシ的に宣言された変数は、グローバルオブジェクトにプロパティを作成しません。</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">MITライセンスに基づいてライセンスされています。</target>
        </trans-unit>
        <trans-unit id="576a19e712655d862677383bbd691c58cb28af93" translate="yes" xml:space="preserve">
          <source>Limit Cyclomatic Complexity (complexity)</source>
          <target state="translated">リミットサイクロマチックコンプレックス(複雑さ)</target>
        </trans-unit>
        <trans-unit id="8063848dd725bd56f98d4d78213b9bcdc4a7dc13" translate="yes" xml:space="preserve">
          <source>Line Separator</source>
          <target state="translated">ラインセパレータ</target>
        </trans-unit>
        <trans-unit id="f92175557e0de68fd93e204cef5f084870a15ddc" translate="yes" xml:space="preserve">
          <source>Line comments can be positioned above or beside code. This rule helps teams maintain a consistent style.</source>
          <target state="translated">行コメントはコードの上や横に配置することができます。このルールは、チームが一貫したスタイルを維持するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="a034b76db3a8cd859ca69ba997a2e5b89502c859" translate="yes" xml:space="preserve">
          <source>Lines beginning with &lt;code&gt;#&lt;/code&gt; are treated as comments and do not affect ignore patterns.</source>
          <target state="translated">&lt;code&gt;#&lt;/code&gt; で始まる行はコメントとして扱われ、無視パターンには影響しません。</target>
        </trans-unit>
        <trans-unit id="1e1103eb32ea263486103b072ab0cb94ee3e35e9" translate="yes" xml:space="preserve">
          <source>Lines preceded by &lt;code&gt;!&lt;/code&gt; are negated patterns that re-include a pattern that was ignored by an earlier pattern.</source>
          <target state="translated">&lt;code&gt;!&lt;/code&gt; が前に付いている行 以前のパターンで無視されていたパターンを再び含む否定パターンです。</target>
        </trans-unit>
        <trans-unit id="b4e10ddd90309b99f26fe4ef3e11b979bcef032a" translate="yes" xml:space="preserve">
          <source>Linter</source>
          <target state="translated">Linter</target>
        </trans-unit>
        <trans-unit id="bd52ff0399c852f8ad0d3b77ab2cbeba60a0d700" translate="yes" xml:space="preserve">
          <source>Linter#defineParser</source>
          <target state="translated">Linter#defineParser</target>
        </trans-unit>
        <trans-unit id="b3ec5ecd25a2470772a54fc04ae781a897dc4ac5" translate="yes" xml:space="preserve">
          <source>Linter#defineRule</source>
          <target state="translated">Linter#defineRule</target>
        </trans-unit>
        <trans-unit id="ab2d970ff5589fa92fce8827e35e3cb27afbb239" translate="yes" xml:space="preserve">
          <source>Linter#defineRules</source>
          <target state="translated">Linter#defineRules</target>
        </trans-unit>
        <trans-unit id="c4067e92f7ce3c6ae4a3d5aee194da0f0c54b6d7" translate="yes" xml:space="preserve">
          <source>Linter#getRules</source>
          <target state="translated">Linter#getRules</target>
        </trans-unit>
        <trans-unit id="aaff2261febbb9366e58763b28e5e7c542a2f676" translate="yes" xml:space="preserve">
          <source>Linter#verify</source>
          <target state="translated">Linter#verify</target>
        </trans-unit>
        <trans-unit id="2e5cf5d2293ba06968be45b3f4addc313adecbc1" translate="yes" xml:space="preserve">
          <source>Linter#verifyAndFix()</source>
          <target state="translated">Linter#verifyAndFix()</target>
        </trans-unit>
        <trans-unit id="cec5cfe559583c5da1e9000641be0f2df5c73dd3" translate="yes" xml:space="preserve">
          <source>Linter#version/Linter.version</source>
          <target state="translated">Linter#version/Linter.version</target>
        </trans-unit>
        <trans-unit id="6f0e0a2d089a5b32424b770572c725a6c435e42f" translate="yes" xml:space="preserve">
          <source>Linting completed successfully, but there are some linting errors</source>
          <target state="translated">リンティングは正常に完了しましたが、リンティングエラーが発生しています。</target>
        </trans-unit>
        <trans-unit id="97c9a7f39e6010cad2bf31168096d66c5530b646" translate="yes" xml:space="preserve">
          <source>Linting message objects have a deprecated &lt;code&gt;source&lt;/code&gt; property. This property &lt;strong&gt;will be removed&lt;/strong&gt; from linting messages in an upcoming breaking release. If you depend on this property, you should now use the &lt;code&gt;SourceCode&lt;/code&gt; instance provided by the linter.</source>
          <target state="translated">Lintingメッセージオブジェクトには非推奨の &lt;code&gt;source&lt;/code&gt; プロパティがあります。このプロパティ&lt;strong&gt;は&lt;/strong&gt;、今後の互換性の&lt;strong&gt;ない&lt;/strong&gt;リリースでリンティングメッセージから&lt;strong&gt;削除さ&lt;/strong&gt;れます。このプロパティに依存している場合は、リンターによって提供される &lt;code&gt;SourceCode&lt;/code&gt; インスタンスを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="c1213d86c311a55a32e3f6456710a05c9c2fe6f4" translate="yes" xml:space="preserve">
          <source>Linting nonexistent files from the command line is now a fatal error</source>
          <target state="translated">コマンドラインから存在しないファイルをリントすると致命的なエラーが発生するようになりました。</target>
        </trans-unit>
        <trans-unit id="a144df07dbce74479e8b92fdbe30e5e2b955fdd1" translate="yes" xml:space="preserve">
          <source>Linting was unsuccessful due to a fatal error (e.g. an invalid config file)</source>
          <target state="translated">致命的なエラー (無効な設定ファイルなど)が発生したため、リンティングが失敗しました。</target>
        </trans-unit>
        <trans-unit id="7c38fe4b5e5c8c9cd3ce408dd2302ed5b7c90528" translate="yes" xml:space="preserve">
          <source>Lints all JavaScript (including tests) and JSON</source>
          <target state="translated">すべての JavaScript (テストを含む)と JSON をリントします。</target>
        </trans-unit>
        <trans-unit id="9859b39a8931642fd476002b377a57cd6f6500db" translate="yes" xml:space="preserve">
          <source>Listening for selectors in rules</source>
          <target state="translated">ルール内のセレクタのリスニング</target>
        </trans-unit>
        <trans-unit id="32758c6a32e39c1401c20a7c7526852af5d1a0a6" translate="yes" xml:space="preserve">
          <source>Loads a plugin from configuration object with specified name. Name can include plugin prefix (&quot;eslint-plugin-&quot;)</source>
          <target state="translated">指定した名前で設定オブジェクトからプラグインを読み込みます。名前にはプラグインのプレフィックス (&quot;eslint-plugin-&quot;)を含めることができます。</target>
        </trans-unit>
        <trans-unit id="a89b90142250f6a97e005e05eeb2bc4cbcdeb3e4" translate="yes" xml:space="preserve">
          <source>Local Config File Resolution</source>
          <target state="translated">ローカル設定ファイルの解決</target>
        </trans-unit>
        <trans-unit id="bf880468615d510777cab4ad8eddc24def271ed4" translate="yes" xml:space="preserve">
          <source>Logical Operators: &lt;code&gt;&quot;&amp;amp;&amp;amp;&quot;&lt;/code&gt;, &lt;code&gt;&quot;||&quot;&lt;/code&gt;</source>
          <target state="translated">論理演算子： &lt;code&gt;&quot;&amp;amp;&amp;amp;&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;||&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c3afad3c0cae14119bc8f48a27e6623f7df048b3" translate="yes" xml:space="preserve">
          <source>Looping over objects with a &lt;code&gt;for in&lt;/code&gt; loop will include properties that are inherited through the prototype chain. This behavior can lead to unexpected items in your for loop.</source>
          <target state="translated">&lt;code&gt;for in&lt;/code&gt; ループでオブジェクトをループすると、プロトタイプチェーンを通じて継承されるプロパティが含まれます。この動作により、forループで予期しない項目が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="c7cc822b9501098075842137a86406605e675538" translate="yes" xml:space="preserve">
          <source>MDN - Iterators and Generators</source>
          <target state="translated">MDN-イテレータとジェネレータ</target>
        </trans-unit>
        <trans-unit id="85f054c946360a1bdde533b30957e8ab936b4d2f" translate="yes" xml:space="preserve">
          <source>MDN Arithmetic Operators - Exponentiation</source>
          <target state="translated">MDN 算術演算子-指数</target>
        </trans-unit>
        <trans-unit id="3e90f0d78176e3c84b42ca0c6d98e231385391cf" translate="yes" xml:space="preserve">
          <source>MDN setter</source>
          <target state="translated">MDNセッター</target>
        </trans-unit>
        <trans-unit id="a2193d22aa101ed468111273da4fc9a8ff26cb08" translate="yes" xml:space="preserve">
          <source>MDN: &lt;code&gt;typeof&lt;/code&gt; documentation</source>
          <target state="translated">MDN： &lt;code&gt;typeof&lt;/code&gt; ドキュメント</target>
        </trans-unit>
        <trans-unit id="94dc241af5d9eb0a680088ee20211bc0c0311d3c" translate="yes" xml:space="preserve">
          <source>MDN: Functions getter</source>
          <target state="translated">MDN:関数ゲッター</target>
        </trans-unit>
        <trans-unit id="afae02907d2f28836e8ebcf79b528469165b5953" translate="yes" xml:space="preserve">
          <source>MDN: Operator Precedence</source>
          <target state="translated">MDN:オペレータ優先</target>
        </trans-unit>
        <trans-unit id="40980a42cc4812dad76a30f975d0ecb98f42a1d9" translate="yes" xml:space="preserve">
          <source>MDN: RegExp Constructor</source>
          <target state="translated">MDN:RegExp コンストラクタ</target>
        </trans-unit>
        <trans-unit id="b2777e08fa18d849dfd73d3f3047a7b8ba8d3042" translate="yes" xml:space="preserve">
          <source>MDN: Regular Expressions</source>
          <target state="translated">MDN:正規表現</target>
        </trans-unit>
        <trans-unit id="09d82cc59ea6b15487145efc5860cbacae4c5187" translate="yes" xml:space="preserve">
          <source>Make ESLint even better by &lt;a href=&quot;developer-guide/contributing/index&quot;&gt;contributing&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;developer-guide/contributing/index&quot;&gt;貢献することで&lt;/a&gt; ESLintをさらに良くします。</target>
        </trans-unit>
        <trans-unit id="08102ad0462aa310615f1de442b43a80696f3f09" translate="yes" xml:space="preserve">
          <source>Make fixes as small as possible. Fixes that are unnecessarily large could conflict with other fixes, and prevent them from being applied.</source>
          <target state="translated">修正はできるだけ小さくしてください。不必要に大きい修正は、他の修正と衝突して適用できなくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="49ba3a90310eda05b6222d40e80f85b80ab264cc" translate="yes" xml:space="preserve">
          <source>Make fixes that are as small as possible. Anything more than a single character is risky and could prevent other, simpler fixes from being made.</source>
          <target state="translated">できるだけ小さな修正をしてください。単一のキャラクター以上のものはリスクが高く、他のよりシンプルな修正ができなくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="003acc6ee30f8dfe6d64cbf566782eadf992c2a5" translate="yes" xml:space="preserve">
          <source>Make frequent use of comments to aid others in understanding your code. Use comments when:</source>
          <target state="translated">他の人が自分のコードを理解するのに役立つように、コメントを頻繁に使用しましょう。コメントを使用する際には、コメントを使用してください。</target>
        </trans-unit>
        <trans-unit id="48605054d2a26e6ebeb6461152bd41032c424c7e" translate="yes" xml:space="preserve">
          <source>Make separate pull requests for unrelated changes. Large pull requests with multiple unrelated changes may be closed without merging.</source>
          <target state="translated">関係のない変更に対しては、別々のプルリクエストを作成します。複数の無関係な変更を含む大規模なプルリクエストは、マージせずに閉じられることがあります。</target>
        </trans-unit>
        <trans-unit id="66052a8bb781ea4c3486f29d92fd4d76dd3b173b" translate="yes" xml:space="preserve">
          <source>Make sure your commit is formatted correctly.</source>
          <target state="translated">コミットが正しくフォーマットされていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="2294106611bb7be36ee5d5d272a03c7e228c69ec" translate="yes" xml:space="preserve">
          <source>Make the changes to the code and tests, following the &lt;a href=&quot;../code-conventions&quot;&gt;code conventions&lt;/a&gt; as you go. Once you have finished, commit the changes to your branch:</source>
          <target state="translated">&lt;a href=&quot;../code-conventions&quot;&gt;コードの規則&lt;/a&gt;に従って、コードとテストに変更を加えます。完了したら、変更をブランチにコミットします。</target>
        </trans-unit>
        <trans-unit id="4b6914f73852714eeda13d3e462e3d5fdef8f379" translate="yes" xml:space="preserve">
          <source>Make your changes</source>
          <target state="translated">変更を加える</target>
        </trans-unit>
        <trans-unit id="bae6e15f8b41918cf92f172d566b4d738bc07054" translate="yes" xml:space="preserve">
          <source>Managing the execution environment for &lt;code&gt;Linter&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Linter&lt;/code&gt; の実行環境の管理</target>
        </trans-unit>
        <trans-unit id="d0373508bebe8dbaeab01855b2503dec101737d8" translate="yes" xml:space="preserve">
          <source>Many JavaScript libraries use the callback pattern to manage asynchronous operations. A program of any complexity will most likely need to manage several asynchronous operations at various levels of concurrency. A common pitfall that is easy to fall into is nesting callbacks, which makes code more difficult to read the deeper the callbacks are nested.</source>
          <target state="translated">多くのJavaScriptライブラリでは、非同期操作を管理するためにコールバックパターンを使用しています。どんなに複雑なプログラムでも、様々なレベルの同時実行でいくつかの非同期操作を管理する必要があるでしょう。よくある落とし穴としては、コールバックを入れ子にしてしまうことが挙げられます。</target>
        </trans-unit>
        <trans-unit id="f31b27c63c34d0475df6058a328447b442261068" translate="yes" xml:space="preserve">
          <source>Many codebases require strings to be defined in a consistent manner.</source>
          <target state="translated">多くのコードベースでは、文字列を一貫した方法で定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="3f3335e45cb0fe011f2c670521d47c996929538a" translate="yes" xml:space="preserve">
          <source>Many developers consider code difficult to read if blocks are nested beyond a certain depth.</source>
          <target state="translated">多くの開発者は、ブロックが一定の深さを超えて入れ子になっているとコードが読みにくいと考えています。</target>
        </trans-unit>
        <trans-unit id="ec6dcf6f91e26c974d5a7820b7cb35c058c70329" translate="yes" xml:space="preserve">
          <source>Many people enjoy a terser code style and don't mind comments bumping up against code. If you fall into that category this rule is not for you.</source>
          <target state="translated">多くの人は、ターサースタイルのコードスタイルを楽しみ、コメントがコードにぶつかっても気にしません。もしあなたがそのカテゴリに当てはまるならば、このルールはあなたのためのものではありません。</target>
        </trans-unit>
        <trans-unit id="30142d0203615d41e1641b80d943d73cc5ab1f7d" translate="yes" xml:space="preserve">
          <source>Many style guides require a particular style for comments that span multiple lines. For example, some style guides prefer the use of a single block comment for multiline comments, whereas other style guides prefer consecutive line comments.</source>
          <target state="translated">多くのスタイルガイドでは、複数行にまたがるコメントに対して特定のスタイルを要求しています。例えば、スタイルガイドの中には、複数行のコメントには単一のブロックコメントを使用することを好むものがありますが、他のスタイルガイドでは連続した行のコメントを好むものもあります。</target>
        </trans-unit>
        <trans-unit id="1b81db8af58d6a82844c2a7f8a0fb423a248acad" translate="yes" xml:space="preserve">
          <source>Many style guides require empty lines before or after comments. The primary goal of these rules is to make the comments easier to read and improve readability of the code.</source>
          <target state="translated">多くのスタイルガイドでは、コメントの前後に空行を要求しています。これらの規則の第一の目的は、コメントを読みやすくし、コードの可読性を向上させることです。</target>
        </trans-unit>
        <trans-unit id="65510d0ed7112a32a93fbfa0f852ca9727017a1d" translate="yes" xml:space="preserve">
          <source>Many style guides require or disallow newlines inside of function parentheses.</source>
          <target state="translated">多くのスタイルガイドでは、関数括弧内の改行を要求したり、禁止したりしています。</target>
        </trans-unit>
        <trans-unit id="0ed12807412804e8c761c63c5aafe1b92dde8f29" translate="yes" xml:space="preserve">
          <source>Many users found this behavior confusing, because if they made a typo in a filename, ESLint would appear to lint that file successfully while actually not linting anything.</source>
          <target state="translated">多くのユーザーがこの動作を混乱させていました。なぜならば、ファイル名にタイプミスがあった場合、ESLint はそのファイルを正しくリントしているように見えるのに、実際には何もリントしていないからです。</target>
        </trans-unit>
        <trans-unit id="75eae4786a36e18e4c433733218135d176e49561" translate="yes" xml:space="preserve">
          <source>Many versioning systems (like git and subversion) can automatically ensure the correct ending. However to cover all contingencies, you can activate this rule.</source>
          <target state="translated">多くのバージョン管理システム (git や subversion など)は、正しい結末を自動的に保証してくれます。しかし、すべての不測の事態をカバーするために、このルールを有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="d43df01241be64a2f04e14f16ff54fa881de6350" translate="yes" xml:space="preserve">
          <source>Medium - Runs ESLint on jQuery</source>
          <target state="translated">Medium-jQuery上でESLintを実行します。</target>
        </trans-unit>
        <trans-unit id="08da200116809cb87f9df70d5b14e0b115e836c5" translate="yes" xml:space="preserve">
          <source>MemberExpression</source>
          <target state="translated">MemberExpression</target>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="78327bd6b1c4878fa59ed96c8e3108c92ded9378" translate="yes" xml:space="preserve">
          <source>Migrating</source>
          <target state="translated">Migrating</target>
        </trans-unit>
        <trans-unit id="f19f19cf7d792e42d3a20e6c6066ddb485e88b86" translate="yes" xml:space="preserve">
          <source>Migrating from JSCS</source>
          <target state="translated">JSCSからの移行</target>
        </trans-unit>
        <trans-unit id="f4cc004b36f93dc98ec6cb8cdd988862d89b0841" translate="yes" xml:space="preserve">
          <source>Migrating to v1.0.0</source>
          <target state="translated">v1.0.0への移行</target>
        </trans-unit>
        <trans-unit id="207ad564379ab84e0bd1d9f94528cf475fccedfe" translate="yes" xml:space="preserve">
          <source>Migrating to v2.0.0</source>
          <target state="translated">v2.0.0への移行</target>
        </trans-unit>
        <trans-unit id="6996ff0c977043ad7b164e529401b9633d67d887" translate="yes" xml:space="preserve">
          <source>Migrating to v3.0.0</source>
          <target state="translated">v3.0.0への移行</target>
        </trans-unit>
        <trans-unit id="b7e113904f56ea23562186c3f481bcb45dd5dd88" translate="yes" xml:space="preserve">
          <source>Migrating to v4.0.0</source>
          <target state="translated">v4.0.0への移行</target>
        </trans-unit>
        <trans-unit id="3a672cb43559c6811fe6c8d12f1ff180dd8516ab" translate="yes" xml:space="preserve">
          <source>Migrating to v5.0.0</source>
          <target state="translated">v5.0.0.0への移行</target>
        </trans-unit>
        <trans-unit id="519f16166bf3e002d2ccde6246ebacf01cc0a2bb" translate="yes" xml:space="preserve">
          <source>Migrating to v6.0.0</source>
          <target state="translated">v6.0.0への移行</target>
        </trans-unit>
        <trans-unit id="528b503f97c282e46488116b7644afc7003a7185" translate="yes" xml:space="preserve">
          <source>Mimosa: &lt;a href=&quot;https://www.npmjs.com/package/mimosa-eslint&quot;&gt;mimosa-eslint&lt;/a&gt;</source>
          <target state="translated">ミモザ：&lt;a href=&quot;https://www.npmjs.com/package/mimosa-eslint&quot;&gt;mimosa-eslint&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="99c887ad129c82e774781a1e88541c3f8352bfe0" translate="yes" xml:space="preserve">
          <source>Mocha.js: &lt;a href=&quot;https://www.npmjs.com/package/mocha-eslint&quot;&gt;mocha-eslint&lt;/a&gt;</source>
          <target state="translated">Mocha.js：&lt;a href=&quot;https://www.npmjs.com/package/mocha-eslint&quot;&gt;mocha-eslint&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7d7a3d6a2ddcd05134bdb5c8786e8cf510ba6fd1" translate="yes" xml:space="preserve">
          <source>Modern terminals like &lt;a href=&quot;https://www.iterm2.com/&quot;&gt;iTerm2&lt;/a&gt; or &lt;a href=&quot;http://guake-project.org/&quot;&gt;Guake&lt;/a&gt; expect a specific results format to automatically open filenames when they are clicked. Most terminals support this format for that purpose:</source>
          <target state="translated">&lt;a href=&quot;https://www.iterm2.com/&quot;&gt;iTerm2&lt;/a&gt;や&lt;a href=&quot;http://guake-project.org/&quot;&gt;Guake&lt;/a&gt;などの最新の端末では、特定の結果形式をクリックすると、ファイル名が自動的に開かれることが期待されています。ほとんどの端末は、この目的でこの形式をサポートしています。</target>
        </trans-unit>
        <trans-unit id="3846ef909df0be6113f867ef70064e247aabbd00" translate="yes" xml:space="preserve">
          <source>Monitor the status of the Travis CI build for your pull request. If it fails, please investigate why. We cannot merge pull requests that fail Travis for any reason.</source>
          <target state="translated">プルリクエストのTravis CIビルドの状態を監視します。失敗した場合は、その理由を調査してください。いかなる理由であっても、Travisに失敗したプルリクエストをマージすることはできません。</target>
        </trans-unit>
        <trans-unit id="0dc20fad549e82acb25baf9beda60f2ad6f4782b" translate="yes" xml:space="preserve">
          <source>More Control on Unit Testing</source>
          <target state="translated">ユニットテストの制御性を高める</target>
        </trans-unit>
        <trans-unit id="8985cd96f1b823aecfe823a7ea114c4ab4c77f3f" translate="yes" xml:space="preserve">
          <source>More about Complexity in JavaScript</source>
          <target state="translated">JavaScriptの複雑さの詳細</target>
        </trans-unit>
        <trans-unit id="cf861d594fba09fdccc03924cfd4dbfa37e34457" translate="yes" xml:space="preserve">
          <source>More clear:</source>
          <target state="translated">もっとはっきりと。</target>
        </trans-unit>
        <trans-unit id="f9a9f89b9373f2be282736f322c949e24ac40fdf" translate="yes" xml:space="preserve">
          <source>More on ES6 arrow functions</source>
          <target state="translated">ES6 の矢印関数の詳細</target>
        </trans-unit>
        <trans-unit id="b4a364a72443f90f75eadeb97e6069788cc6ba06" translate="yes" xml:space="preserve">
          <source>More report messages now have full location ranges</source>
          <target state="translated">より多くのレポートメッセージに完全な場所の範囲が追加されました</target>
        </trans-unit>
        <trans-unit id="6e669deb33d5dab4d7c948c39f7c25a8a1410c31" translate="yes" xml:space="preserve">
          <source>Most code conventions require either tabs or spaces be used for indentation. As such, it's usually an error if a single line of code is indented with both tabs and spaces.</source>
          <target state="translated">ほとんどのコード規約では、インデントにはタブかスペースのどちらかを使用する必要があります。そのため、1 行のコードがタブとスペースの両方でインデントされていると、通常はエラーになります。</target>
        </trans-unit>
        <trans-unit id="cda170b39a2aee0a27ca48dc565c4de1f9771f33" translate="yes" xml:space="preserve">
          <source>Most of the installers come with &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; already installed, but if for some reason it doesn't work on your system, you can install it manually using the instructions on the site.</source>
          <target state="translated">ほとんどのインストーラーには&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npmが&lt;/a&gt;既にインストールされていますが、何らかの理由でシステムで動作しない場合は、サイトの指示に従って手動でインストールできます。</target>
        </trans-unit>
        <trans-unit id="c0c042b4288a4f46ee5fbcb5a35c3c86ee3a0aa9" translate="yes" xml:space="preserve">
          <source>Most parts of ESLint have unit tests associated with them. Unit tests are written using &lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt; and are required when making contributions to ESLint. You'll find all of the unit tests in the &lt;code&gt;tests&lt;/code&gt; directory.</source>
          <target state="translated">ESLintのほとんどの部分には、ユニットテストが関連付けられています。単体テストは&lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt;を使用して記述されており、ESLintに貢献するときに必要です。単体テストはすべて、 &lt;code&gt;tests&lt;/code&gt; ディレクトリにあります。</target>
        </trans-unit>
        <trans-unit id="fde66fa86f8517d887e54616bf1fb31656fc7f81" translate="yes" xml:space="preserve">
          <source>Motivations</source>
          <target state="translated">Motivations</target>
        </trans-unit>
        <trans-unit id="cd847d892e51c9af96a07d5f1327caaaa74f5961" translate="yes" xml:space="preserve">
          <source>Mozilla Developer Network</source>
          <target state="translated">Mozilla Developer Network</target>
        </trans-unit>
        <trans-unit id="1717de09461ac8ad667382f9284cc154ed5fcf13" translate="yes" xml:space="preserve">
          <source>Multi-Line Comments</source>
          <target state="translated">複数行コメント</target>
        </trans-unit>
        <trans-unit id="50ffbaa596feb6c3fce6a0ab79b26de80c0fc9ad" translate="yes" xml:space="preserve">
          <source>Multi-line &lt;code&gt;eslint-disable-line&lt;/code&gt; directives are now reported as problems</source>
          <target state="translated">複数行の &lt;code&gt;eslint-disable-line&lt;/code&gt; ディレクティブが問題として報告されるようになりました</target>
        </trans-unit>
        <trans-unit id="ebd80a2db4954a31bc8bbc5ce38618ea3077ca04" translate="yes" xml:space="preserve">
          <source>Multi-line comments should be used to document code that requires more explanation. Each multi-line comment should have at least three lines:</source>
          <target state="translated">複数行コメントは、より多くの説明を必要とするコードを文書化するために使用しなければなりません。各複数行コメントは、少なくとも3行以上でなければなりません。</target>
        </trans-unit>
        <trans-unit id="b97cd68ceb9fb3aefd437fb8bac6c169f39dc7ef" translate="yes" xml:space="preserve">
          <source>Multiline Properties</source>
          <target state="translated">マルチラインプロパティ</target>
        </trans-unit>
        <trans-unit id="25384bc20fcb587fe7b1a27bd9646bb5677ec5ce" translate="yes" xml:space="preserve">
          <source>Multiple glob patterns can be provided within a single override block. A file must match at least one of the supplied patterns for the configuration to apply.</source>
          <target state="translated">1 つのオーバーライド・ブロック内に複数のグロブ・パターンを指定できます。設定を適用するには、指定されたパターンのうち少なくとも 1 つとファイルが一致している必要があります。</target>
        </trans-unit>
        <trans-unit id="75af35131e430e8f953818ff04be0c62dc2c9f54" translate="yes" xml:space="preserve">
          <source>Multiple object/property values can be disallowed, and you can specify an optional message:</source>
          <target state="translated">複数のオブジェクト/プロパティ値を無効にすることができ、オプションでメッセージを指定することができます。</target>
        </trans-unit>
        <trans-unit id="ce6c9b518828a9995fa8b5eaa2bb15a280c804ca" translate="yes" xml:space="preserve">
          <source>Multiple properties with the same key in object literals can cause unexpected behavior in your application.</source>
          <target state="translated">オブジェクトリテラルで同じキーを持つ複数のプロパティを使用すると、アプリケーションで予期せぬ動作を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="2ea30e5e8aba10118d84047ac8d06b2fb97d351e" translate="yes" xml:space="preserve">
          <source>Multiple spaces in a row that are not used for indentation are typically mistakes. For example:</source>
          <target state="translated">インデントに使用されていない行内の複数のスペースは、典型的には間違いです。例えば</target>
        </trans-unit>
        <trans-unit id="fe7b50504e864db175792f08ac3122cab2513fc4" translate="yes" xml:space="preserve">
          <source>Multiple var statements in JavaScript, not superfluous</source>
          <target state="translated">JavaScriptの複数のvar文、余分なものではありません</target>
        </trans-unit>
        <trans-unit id="8b4617b659a51d0b5756991a46730570511eef04" translate="yes" xml:space="preserve">
          <source>Naming</source>
          <target state="translated">Naming</target>
        </trans-unit>
        <trans-unit id="45b150c33703661a4e069fa3f97c482cd27685ef" translate="yes" xml:space="preserve">
          <source>Naming Convention</source>
          <target state="translated">命名規約</target>
        </trans-unit>
        <trans-unit id="4a1334b26c176a4a0cf6f3310906a31587677f7c" translate="yes" xml:space="preserve">
          <source>Naming things consistently in a project is an often underestimated aspect of code creation. When done correctly, it can save your team hours of unnecessary head scratching and misdirections. This rule allows you to precisely define and enforce the variables and function names on your team should use. No more limiting yourself to camelCase, snake_case, PascalCase or oHungarianNotation. Id-match has all your needs covered!</source>
          <target state="translated">プロジェクト内で一貫して物事に名前を付けることは、コード作成において過小評価されることが多いです。正しく行えば、チームが不必要に頭を掻いたり、方向を間違えたりする時間を節約することができます。このルールでは、チームが使用すべき変数名や関数名を正確に定義し、強制することができます。もうキャメルケース、スネークケース、パスカルケース、ハンガリー記法などに限定する必要はありません。Id-matchはあなたのニーズをすべてカバーしています。</target>
        </trans-unit>
        <trans-unit id="f9c51726a21f2c071e2eaecdc1f58e85c2e063e9" translate="yes" xml:space="preserve">
          <source>Negated conditions are more difficult to understand. Code can be made more readable by inverting the condition instead.</source>
          <target state="translated">否定された条件はより理解しにくい。代わりに条件を反転させることで、コードをより読みやすくすることができます。</target>
        </trans-unit>
        <trans-unit id="e4be93dc7bf3a2d0c376b542c46f2be17b015f34" translate="yes" xml:space="preserve">
          <source>Nested &lt;code&gt;overrides&lt;/code&gt; setting will be applied only if the glob patterns of both of the parent config and the child config matched. This is the same when the extended configs have &lt;code&gt;overrides&lt;/code&gt; setting.</source>
          <target state="translated">ネストされた &lt;code&gt;overrides&lt;/code&gt; 設定は、親構成と子構成の両方のglobパターンが一致した場合にのみ適用されます。これは、拡張構成に &lt;code&gt;overrides&lt;/code&gt; 設定がある場合も同じです。</target>
        </trans-unit>
        <trans-unit id="bba2cf8efb9ea175365987d5e97406eab0eb07ac" translate="yes" xml:space="preserve">
          <source>Nested long method chains like the below example are often broken onto separate lines for readability:</source>
          <target state="translated">以下の例のようなネストされた長いメソッドチェーンは、読みやすくするために別の行に分割されていることが多いです。</target>
        </trans-unit>
        <trans-unit id="0f7143e0984fd302373a44b923b04ef166d1d6d4" translate="yes" xml:space="preserve">
          <source>Nesting ternary expressions can make code more difficult to understand.</source>
          <target state="translated">三項式を入れ子にすると、コードを理解するのが難しくなります。</target>
        </trans-unit>
        <trans-unit id="e868c2d163da18b704134c91dfe580b7476d872b" translate="yes" xml:space="preserve">
          <source>Never use &lt;code&gt;eval()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;eval()&lt;/code&gt; を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="17303bc383f07ad6ca5f1e713ad09a8e4c5aceb1" translate="yes" xml:space="preserve">
          <source>Never use the &lt;code&gt;with&lt;/code&gt; statement. This statement isn't available in strict mode and likely won't be available in future ECMAScript editions.</source>
          <target state="translated">&lt;code&gt;with&lt;/code&gt; ステートメントは使用しないでください。このステートメントはストリクトモードでは使用できず、今後のECMAScriptエディションでは使用できなくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="ccd1fb39539ac8b89e4d82497beb7205dfc545dc" translate="yes" xml:space="preserve">
          <source>Never use the primitive wrapper types, such as &lt;code&gt;String&lt;/code&gt;, to create new objects.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; などのプリミティブラッパータイプを使用して新しいオブジェクトを作成しないでください。</target>
        </trans-unit>
        <trans-unit id="b8fd74418c174fa1a6547580b4f9d50c65e103b2" translate="yes" xml:space="preserve">
          <source>Never use the special value &lt;code&gt;undefined&lt;/code&gt;. To see if a variable has been defined, use the &lt;code&gt;typeof&lt;/code&gt; operator:</source>
          <target state="translated">特別な値 &lt;code&gt;undefined&lt;/code&gt; を使用しないでください。変数が定義されているかどうかを確認するには、 &lt;code&gt;typeof&lt;/code&gt; 演算子を使用します。</target>
        </trans-unit>
        <trans-unit id="e29869dc1c4b4ed49384ced7f3787145a78ff2a6" translate="yes" xml:space="preserve">
          <source>Never.</source>
          <target state="translated">Never.</target>
        </trans-unit>
        <trans-unit id="c7c2bffc4ed85d835ff90e67b6700b9717359c25" translate="yes" xml:space="preserve">
          <source>New Rules</source>
          <target state="translated">新しいルール</target>
        </trans-unit>
        <trans-unit id="b90e91c1c9b0532e10c8d94b3242c03a7c521d78" translate="yes" xml:space="preserve">
          <source>New Rules in &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt; 新しいルール</target>
        </trans-unit>
        <trans-unit id="098b5a1915693dd6ff64ee239f651997dde49e83" translate="yes" xml:space="preserve">
          <source>New rules have been added to &lt;code&gt;eslint:recommended&lt;/code&gt;</source>
          <target state="translated">新しいルールが &lt;code&gt;eslint:recommended&lt;/code&gt; に追加されました</target>
        </trans-unit>
        <trans-unit id="3f170caead65df254d786032a409a6f6d204bca6" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="translated">次のステップ</target>
        </trans-unit>
        <trans-unit id="f76dd91a3359617271ed7ffd8b7df9bbc0c954e1" translate="yes" xml:space="preserve">
          <source>Next, push your changes to your clone:</source>
          <target state="translated">次に、変更した内容をクローンにプッシュします。</target>
        </trans-unit>
        <trans-unit id="432bb6269b57474b24c9803b75937c68ef4b90c5" translate="yes" xml:space="preserve">
          <source>No Longer Exporting cli</source>
          <target state="translated">クリの輸出は終了しました。</target>
        </trans-unit>
        <trans-unit id="6fe37c89ea3654de81c59847379a8780e76d887e" translate="yes" xml:space="preserve">
          <source>No one will blame you for backing out of an issue if you are unable to complete it. We just want to keep the process moving along as efficiently as possible.</source>
          <target state="translated">問題を完成できなかったとしても、誰もあなたが手を引いたことを責めることはありません。私たちは、プロセスをできるだけ効率的に進めていきたいと考えています。</target>
        </trans-unit>
        <trans-unit id="015936150c4240bf1685a0beae94734e5c0fd2e7" translate="yes" xml:space="preserve">
          <source>No rules are enabled by default. The &lt;code&gt;&quot;extends&quot;: &quot;eslint:recommended&quot;&lt;/code&gt; property in a &lt;a href=&quot;../user-guide/configuring#extending-configuration-files&quot;&gt;configuration file&lt;/a&gt; enables rules that report common problems, which have a check mark  below.</source>
          <target state="translated">デフォルトでは有効になっているルールはありません。&lt;a href=&quot;../user-guide/configuring#extending-configuration-files&quot;&gt;構成ファイル&lt;/a&gt;の &lt;code&gt;&quot;extends&quot;: &quot;eslint:recommended&quot;&lt;/code&gt; プロパティは、以下のチェックマークがある一般的な問題を報告するルールを有効にします。</target>
        </trans-unit>
        <trans-unit id="43b56bdc9a2f449dd95a29cc4403aabc8d987dfc" translate="yes" xml:space="preserve">
          <source>Node.JS</source>
          <target state="translated">Node.JS</target>
        </trans-unit>
        <trans-unit id="10b3493287f831e81a438811a1ffba01f8cec4b7" translate="yes" xml:space="preserve">
          <source>Node.js</source>
          <target state="translated">Node.js</target>
        </trans-unit>
        <trans-unit id="7c492f9c09c9ff17a16de6ed9c821ef76255da51" translate="yes" xml:space="preserve">
          <source>Node.js 10 (10.13.0 and above)</source>
          <target state="translated">Node.js 10 (10.13.0以上)</target>
        </trans-unit>
        <trans-unit id="90d89d5227cc3415b0eef08538029343dc658ba6" translate="yes" xml:space="preserve">
          <source>Node.js 4 is no longer supported</source>
          <target state="translated">Node.js 4がサポートされなくなった</target>
        </trans-unit>
        <trans-unit id="5a40f605ee0fd0ee1b8acb34f313bb0a19612661" translate="yes" xml:space="preserve">
          <source>Node.js 6 (6.14.0 and above)</source>
          <target state="translated">Node.js 6 (6.14.0以上)</target>
        </trans-unit>
        <trans-unit id="e90914a7b373d6529d8a016e66f5135b658d37af" translate="yes" xml:space="preserve">
          <source>Node.js 6 is no longer supported</source>
          <target state="translated">Node.js 6がサポートされなくなった</target>
        </trans-unit>
        <trans-unit id="2ceb71f6fc886f72cd41914593a377d2331bca2a" translate="yes" xml:space="preserve">
          <source>Node.js 8 (8.10.0 and above)</source>
          <target state="translated">Node.js 8 (8.10.0以上)</target>
        </trans-unit>
        <trans-unit id="8b8214b8e226c143da7ac208d7ccfff6ed28e492" translate="yes" xml:space="preserve">
          <source>Node.js API</source>
          <target state="translated">Node.js API</target>
        </trans-unit>
        <trans-unit id="04fbd93b23e439f6b5bdb44a7ebe23e14c1d9127" translate="yes" xml:space="preserve">
          <source>Node.js and CommonJS</source>
          <target state="translated">Node.jsとCommonJS</target>
        </trans-unit>
        <trans-unit id="e3f2bdd6d137ca1e9a98351c023627cbde0cec9c" translate="yes" xml:space="preserve">
          <source>Nodejitsu: What are the error conventions?</source>
          <target state="translated">Nodejitsuです。エラーの規約を教えてください。</target>
        </trans-unit>
        <trans-unit id="40b5e952bb48a49486eed3f9c7473ff77e065932" translate="yes" xml:space="preserve">
          <source>Normally, if ESLint runs and finds no errors (only warnings), it will exit with a success exit status. However, if &lt;code&gt;--max-warnings&lt;/code&gt; is specified and the total warning count is greater than the specified threshold, ESLint will exit with an error status. Specifying a threshold of &lt;code&gt;-1&lt;/code&gt; or omitting this option will prevent this behavior.</source>
          <target state="translated">通常、ESLintが実行され、エラーが見つからない場合（警告のみ）、成功した終了ステータスで終了します。ただし、 &lt;code&gt;--max-warnings&lt;/code&gt; が指定されていて、警告の総数が指定されたしきい値よりも大きい場合、ESLintはエラーステータスで終了します。しきい値を &lt;code&gt;-1&lt;/code&gt; に指定するか、このオプションを省略すると、この動作が防止されます。</target>
        </trans-unit>
        <trans-unit id="b25fdf6d849a83c39bb3f295e2b8c788a05b6b0d" translate="yes" xml:space="preserve">
          <source>Not be library-specific.</source>
          <target state="translated">図書館に特化したものではありません。</target>
        </trans-unit>
        <trans-unit id="35e36fc0294abf8492a00a6146dff86e708f4159" translate="yes" xml:space="preserve">
          <source>Not be the opposite of an existing rule.</source>
          <target state="translated">既存のルールの逆にならないこと。</target>
        </trans-unit>
        <trans-unit id="fad574db66b94391e41eddfcd296f39d4f94404a" translate="yes" xml:space="preserve">
          <source>Not overlap with an existing rule.</source>
          <target state="translated">既存のルールと重複しない。</target>
        </trans-unit>
        <trans-unit id="9029138548f2a9fdd23c03ef55efcf761ab4cfd0" translate="yes" xml:space="preserve">
          <source>Not specifying this rule is equivalent of assigning it to &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="translated">このルールを指定しないことは、それを &lt;code&gt;none&lt;/code&gt; に割り当てることと同じです。</target>
        </trans-unit>
        <trans-unit id="4861a0142b65983913e9d41b8290eade0ea43067" translate="yes" xml:space="preserve">
          <source>Notations</source>
          <target state="translated">Notations</target>
        </trans-unit>
        <trans-unit id="9b7b918044536aa7a7deb04ec10c32265cca907c" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&quot;always&quot;&lt;/code&gt; has a special case where &lt;code&gt;{}&lt;/code&gt; and &lt;code&gt;[]&lt;/code&gt; are not considered problems.</source>
          <target state="translated">&lt;code&gt;&quot;always&quot;&lt;/code&gt; は、 &lt;code&gt;{}&lt;/code&gt; と &lt;code&gt;[]&lt;/code&gt; が問題と見なされない特別なケースがあることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b8542e39cfc8468ccf1b75f31ccc5f6beca12d4a" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;/* exported */&lt;/code&gt; has no effect for any of the following:</source>
          <target state="translated">&lt;code&gt;/* exported */&lt;/code&gt; は、次のいずれにも影響しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="aca84c496113223feba48b89954e9ed6a64416c1" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;defaultAssignment: false&lt;/code&gt; still allows expressions of the form &lt;code&gt;x ? expr : x&lt;/code&gt; (where the identifier is on the right hand side of the ternary).</source>
          <target state="translated">&lt;code&gt;defaultAssignment: false&lt;/code&gt; でも、 &lt;code&gt;x ? expr : x&lt;/code&gt; の形式の式が許可されることに注意してください。expr：x（識別子は3項の右側にあります）。</target>
        </trans-unit>
        <trans-unit id="9b7f17dafb1fc2ac631526c6b46f9a1d8ffa8e3b" translate="yes" xml:space="preserve">
          <source>Note that at least one of &lt;code&gt;node&lt;/code&gt; or &lt;code&gt;loc&lt;/code&gt; is required.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; または &lt;code&gt;loc&lt;/code&gt; の少なくとも1つが必要であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3f74885501a3e7134a66bf3df8110995866d5416" translate="yes" xml:space="preserve">
          <source>Note that configuration comments and comments which start with URLs are never reported.</source>
          <target state="translated">URL で始まる設定コメントやコメントは報告されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="c2f78d136a146a36971c9e8628e71d64cc1bd5ef" translate="yes" xml:space="preserve">
          <source>Note that even with these compatibilities, there are no guarantees that an external parser will work correctly with ESLint and ESLint will not fix bugs related to incompatibilities with other parsers.</source>
          <target state="translated">これらの互換性があっても、外部パーサーがESLintで正しく動作する保証はありませんし、ESLintは他のパーサーとの互換性のないバグを修正することはありません。</target>
        </trans-unit>
        <trans-unit id="bfc76a3bf8f752b8b71cfd21bce6317dc0eb6d26" translate="yes" xml:space="preserve">
          <source>Note that every &lt;code&gt;getter&lt;/code&gt; is expected to return a value.</source>
          <target state="translated">すべての &lt;code&gt;getter&lt;/code&gt; が値を返すことが期待されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="973ad8dc3ee2a30a3d4c6e8e9554560da150053f" translate="yes" xml:space="preserve">
          <source>Note that leading and trailing whitespace is optional in message parameters.</source>
          <target state="translated">メッセージパラメータでは、先頭と末尾の空白はオプションであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8c038f50e970ff4a6c263baef88671b9b6797c2c" translate="yes" xml:space="preserve">
          <source>Note that one or more string expression statements (with or without semi-colons) will only be considered as unused if they are not in the beginning of a script, module, or function (alone and uninterrupted by other statements). Otherwise, they will be treated as part of a &quot;directive prologue&quot;, a section potentially usable by JavaScript engines. This includes &quot;strict mode&quot; directives.</source>
          <target state="translated">1つ以上の文字列表現文(セミコロンの有無にかかわらず)は、スクリプト、モジュール、関数の先頭にない場合(単独で他の文に邪魔されない場合)にのみ、未使用とみなされることに注意してください。そうでない場合は、JavaScript エンジンが使用できる可能性のあるセクションである &quot;ディレクティブプロローグ&quot; の一部として扱われます。これには &quot;strict mode&quot; ディレクティブも含まれます。</target>
        </trans-unit>
        <trans-unit id="14eabcc20ca1ae6d595dd0146dacc275446c2785" translate="yes" xml:space="preserve">
          <source>Note that operator &lt;code&gt;+&lt;/code&gt; in &lt;code&gt;allow&lt;/code&gt; list would allow &lt;code&gt;+foo&lt;/code&gt; (number coercion) as well as &lt;code&gt;&quot;&quot; + foo&lt;/code&gt; (string coercion).</source>
          <target state="translated">&lt;code&gt;allow&lt;/code&gt; リストの演算子 &lt;code&gt;+&lt;/code&gt; は、 &lt;code&gt;&quot;&quot; + foo&lt;/code&gt; （文字列強制）だけでなく &lt;code&gt;+foo&lt;/code&gt; （数値強制）も許可することに注意してください。</target>
        </trans-unit>
        <trans-unit id="a2ea103023fbbea878ee580810efa43b1ce5e514" translate="yes" xml:space="preserve">
          <source>Note that simply checking &lt;code&gt;foo.hasOwnProperty(key)&lt;/code&gt; is likely to cause an error in some cases; see &lt;a href=&quot;no-prototype-builtins&quot;&gt;no-prototype-builtins&lt;/a&gt;.</source>
          <target state="translated">単に &lt;code&gt;foo.hasOwnProperty(key)&lt;/code&gt; をチェックすると、場合によってはエラーが発生する可能性があることに注意してください。&lt;a href=&quot;no-prototype-builtins&quot;&gt;no-prototype-builtinsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="da8f31abf81fd1530a65a1c89cbaf28a84d87fe4" translate="yes" xml:space="preserve">
          <source>Note that the following words are always ignored by this rule: &lt;code&gt;[&quot;jscs&quot;, &quot;jshint&quot;, &quot;eslint&quot;, &quot;istanbul&quot;, &quot;global&quot;, &quot;globals&quot;, &quot;exported&quot;]&lt;/code&gt;.</source>
          <target state="translated">このルールでは、次の単語は常に無視されることに注意してください： &lt;code&gt;[&quot;jscs&quot;, &quot;jshint&quot;, &quot;eslint&quot;, &quot;istanbul&quot;, &quot;global&quot;, &quot;globals&quot;, &quot;exported&quot;]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="92871ffd4aceb2bd3a9e8edec06e56e2e05d821f" translate="yes" xml:space="preserve">
          <source>Note that the last &lt;code&gt;case&lt;/code&gt; statement in these examples does not cause a warning because there is nothing to fall through into.</source>
          <target state="translated">これらの例の最後の &lt;code&gt;case&lt;/code&gt; ステートメントは、該当するものがないため、警告を発生させないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="9fe60f0778016b7de275c5c3433b4ff7fcd68bdb" translate="yes" xml:space="preserve">
          <source>Note that the patterns considered problems are &lt;strong&gt;not&lt;/strong&gt; flagged by the &lt;a href=&quot;semi&quot;&gt;semi&lt;/a&gt; rule.</source>
          <target state="translated">パターンとみなさ問題がされていることに注意してください&lt;strong&gt;ない&lt;/strong&gt;でフラグを立て&lt;a href=&quot;semi&quot;&gt;半&lt;/a&gt;ルール。</target>
        </trans-unit>
        <trans-unit id="649f078207c83d3aa9f8117c4caa24a177fa6e14" translate="yes" xml:space="preserve">
          <source>Note that this also affects the &lt;a href=&quot;../developer-guide/nodejs-api#cliengineexecuteonfiles&quot;&gt;&lt;code&gt;CLIEngine.executeOnFiles()&lt;/code&gt;&lt;/a&gt; API.</source>
          <target state="translated">これは&lt;a href=&quot;../developer-guide/nodejs-api#cliengineexecuteonfiles&quot;&gt; &lt;code&gt;CLIEngine.executeOnFiles()&lt;/code&gt; &lt;/a&gt; APIにも影響することに注意してください。</target>
        </trans-unit>
        <trans-unit id="4e1fc0ebbd12c442e0e5e74e0e029ef6f09efa61" translate="yes" xml:space="preserve">
          <source>Note that this also enables parsing for other features from ES2018, such as &lt;a href=&quot;https://github.com/tc39/proposal-async-iteration&quot;&gt;async iteration&lt;/a&gt;. When using ESLint v5 with the default parser, it is no longer possible to toggle syntax support for object rest/spread independently of other features.</source>
          <target state="translated">これにより、&lt;a href=&quot;https://github.com/tc39/proposal-async-iteration&quot;&gt;非同期反復&lt;/a&gt;など、ES2018の他の機能の解析も有効になることに注意してください。デフォルトのパーサーでESLint v5を使用する場合、他の機能とは無関係にオブジェクトのレスト/スプレッドの構文サポートを切り替えることができなくなりました。</target>
        </trans-unit>
        <trans-unit id="82d62f793b20020481672da21ac064b568a683e5" translate="yes" xml:space="preserve">
          <source>Note that this rule does not disallow assignments to read-only global variables. See &lt;a href=&quot;no-global-assign&quot;&gt;no-global-assign&lt;/a&gt; if you also want to disallow those assignments.</source>
          <target state="translated">このルールは、読み取り専用のグローバル変数への割り当てを許可しないことに注意してください。これらの割り当ても禁止する場合は、&lt;a href=&quot;no-global-assign&quot;&gt;no-global-assignを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a5a9767c41439a621031ba6529109fef573ecf23" translate="yes" xml:space="preserve">
          <source>Note that this rule does not enforce the usage of single-line statements in general. If you would like to disallow single-line statements, use the &lt;a href=&quot;curly&quot;&gt;&lt;code&gt;curly&lt;/code&gt;&lt;/a&gt; rule instead.</source>
          <target state="translated">この規則は、一般的に単一行ステートメントの使用を強制しないことに注意してください。単一行のステートメントを許可しない場合は、代わりに&lt;a href=&quot;curly&quot;&gt; &lt;code&gt;curly&lt;/code&gt; &lt;/a&gt;ルールを使用してください。</target>
        </trans-unit>
        <trans-unit id="d826b4d17235a608a3c9cd20c92fa11e3d5d2e94" translate="yes" xml:space="preserve">
          <source>Note that this rule only enforces spacing within parentheses; it does not check spacing within curly or square brackets, but will enforce or disallow spacing of those brackets if and only if they are adjacent to an opening or closing parenthesis.</source>
          <target state="translated">この規則は括弧内のスペーシングのみを強制することに注意してください。 巻き括弧や角括弧内のスペーシングはチェックしませんが、それらの括弧が開括弧や閉括弧に隣接している場合にのみ、それらの括弧のスペーシングを強制したり禁止したりします。</target>
        </trans-unit>
        <trans-unit id="347d91e7a5b838e6bcb85cf66bf52f2d967e3ca1" translate="yes" xml:space="preserve">
          <source>Note that when using the &lt;code&gt;node&lt;/code&gt; or &lt;code&gt;commonjs&lt;/code&gt; environments (or &lt;code&gt;ecmaFeatures.globalReturn&lt;/code&gt;, if using the default parser), the top scope of a program is not actually the global scope, but rather a &quot;module&quot; scope. When this is the case, declaring a variable named after a builtin global is not a redeclaration, but rather a shadowing of the global variable. In that case, the &lt;a href=&quot;no-shadow&quot;&gt;&lt;code&gt;no-shadow&lt;/code&gt;&lt;/a&gt; rule with the &lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt; option should be used.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; または &lt;code&gt;commonjs&lt;/code&gt; 環境（またはデフォルトのパーサーを使用する場合は &lt;code&gt;ecmaFeatures.globalReturn&lt;/code&gt; ）を使用する場合、プログラムのトップスコープは実際にはグローバルスコープではなく、「モジュール」スコープであることに注意してください。この場合、組み込みグローバルにちなんで名付けられた変数の宣言は、再宣言ではなく、グローバル変数のシャドウイングです。その場合、 &lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt; オプションを使用した&lt;a href=&quot;no-shadow&quot;&gt; &lt;code&gt;no-shadow&lt;/code&gt; &lt;/a&gt;ルールを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="1125aced35499b31bb41c702c9945c7bd12e9b07" translate="yes" xml:space="preserve">
          <source>Note that you can leave off the &lt;code&gt;.js&lt;/code&gt; from the filename. In this way, you can add as many additional configs to your package as you'd like.</source>
          <target state="translated">ファイル名から &lt;code&gt;.js&lt;/code&gt; を省略できることに注意してください。このようにして、パッケージに必要な数だけ追加の構成を追加できます。</target>
        </trans-unit>
        <trans-unit id="76aa0f033fd5d1d41d32bcaf6fd648d73e33b956" translate="yes" xml:space="preserve">
          <source>Note that, as with core rules and plugin rules, you still need to enable the rules in configuration or via the &lt;code&gt;--rule&lt;/code&gt; CLI option in order to actually run those rules during linting. Specifying a rules directory with &lt;code&gt;--rulesdir&lt;/code&gt; does not automatically enable the rules within that directory.</source>
          <target state="translated">&lt;code&gt;--rule&lt;/code&gt; やプラグインルールと同様に、リンティング中にこれらのルールを実際に実行するには、設定でルールを有効にするか、-rule CLIオプションを使用する必要があることに注意してください。 &lt;code&gt;--rulesdir&lt;/code&gt; でルールディレクトリを指定しても、そのディレクトリ内のルールが自動的に有効になるわけではありません。</target>
        </trans-unit>
        <trans-unit id="e9b6296c44a9bc30cef358e801b33c46b39d24f5" translate="yes" xml:space="preserve">
          <source>Note the use of a semicolon as the final part of this statement. There should be a space before and after the &lt;code&gt;while&lt;/code&gt; keyword.</source>
          <target state="translated">このステートメントの最後の部分としてセミコロンを使用していることに注意してください。 &lt;code&gt;while&lt;/code&gt; キーワードの前後にスペースが必要です。</target>
        </trans-unit>
        <trans-unit id="cc6c88398cdded8def6acc02b6ff7133a562ee36" translate="yes" xml:space="preserve">
          <source>Note when using a custom parser, the &lt;code&gt;parserOptions&lt;/code&gt; configuration property is still required for ESLint to work properly with features not in ECMAScript 5 by default. Parsers are all passed &lt;code&gt;parserOptions&lt;/code&gt; and may or may not use them to determine which features to enable.</source>
          <target state="translated">カスタムパーサーを使用する場合、 &lt;code&gt;parserOptions&lt;/code&gt; がデフォルトでECMAScript 5にない機能を適切に動作させるには、parserOptions構成プロパティが引き続き必要です。パーサーにはすべて &lt;code&gt;parserOptions&lt;/code&gt; が渡され、有効にする機能を決定するためにそれらを使用する場合と使用しない場合があります。</target>
        </trans-unit>
        <trans-unit id="50c39afa03191645dbc4d28c7d2359af7e538e42" translate="yes" xml:space="preserve">
          <source>Note: Currently &lt;code&gt;CLIEngine&lt;/code&gt; does not validate options passed to it, but may start doing so in the future.</source>
          <target state="translated">注：現在、 &lt;code&gt;CLIEngine&lt;/code&gt; は渡されたオプションを検証しませんが、将来的に検証を開始する可能性があります。</target>
        </trans-unit>
        <trans-unit id="984b1133cbe92feba750f10ab3475f0c23c1b51a" translate="yes" xml:space="preserve">
          <source>Note: For a rule preventing deletion of variables, see &lt;a href=&quot;no-delete-var&quot;&gt;no-delete-var instead&lt;/a&gt;</source>
          <target state="translated">注：変数の削除を防ぐルールについては、&lt;a href=&quot;no-delete-var&quot;&gt;代わりにno-delete-varを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="d25aa0b7adae8f5ed33576b5806bc8d4bbf49549" translate="yes" xml:space="preserve">
          <source>Note: Formatting for Terminals</source>
          <target state="translated">注:端末の書式設定</target>
        </trans-unit>
        <trans-unit id="094162498ea0d1d13c56050f15e2107cd8551770" translate="yes" xml:space="preserve">
          <source>Note: Suggestions will be applied as a stand-alone change, without triggering multipass fixes. Each suggestion should focus on a singular change in the code and should not try to conform to user defined styles. For example, if a suggestion is adding a new statement into the codebase, it should not try to match correct indentation, or confirm to user preferences on presence/absence of semicolumns. All of those things can be corrected by multipass autofix when the user triggers it.</source>
          <target state="translated">注意:サジェスチョンは、マルチパス修正をトリガーすることなく、単独の変更として適用されます。各提案は、コード内の単一の変更に焦点を当てるべきであり、ユーザ定義のスタイルに準拠しようとするべきではありません。例えば、提案がコードベースに新しい文を追加する場合、正しいインデントに合わせようとしたり、セミカラムの有無に関するユーザの好みを確認しようとしたりしてはいけません。これらのことはすべて、ユーザが自動修正をトリガーしたときにマルチパス自動修正で修正できます。</target>
        </trans-unit>
        <trans-unit id="7a96d12cefbf530755a3476759379971f31c30b2" translate="yes" xml:space="preserve">
          <source>Note: This API is deprecated as of 4.0.0.</source>
          <target state="translated">注:このAPIは4.0.0.0時点で非推奨です。</target>
        </trans-unit>
        <trans-unit id="24de5bcbd5c3607fa22b1b0d298fae9fdf45a3ea" translate="yes" xml:space="preserve">
          <source>Now here are ES6 equivalents:</source>
          <target state="translated">さて、ここでES6に相当するものを紹介します。</target>
        </trans-unit>
        <trans-unit id="87fe1cc3d574f9be3c85d698f90d866c75ac44a8" translate="yes" xml:space="preserve">
          <source>Now inside your &lt;code&gt;/lib/ci/backend.js&lt;/code&gt;</source>
          <target state="translated">今すぐあなたの内側 &lt;code&gt;/lib/ci/backend.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="35e2195ff597916ba2ef234cdbb68bdf57b69342" translate="yes" xml:space="preserve">
          <source>Now inside your package you have &lt;code&gt;/lib/defaults.js&lt;/code&gt;, which contains:</source>
          <target state="translated">これで、パッケージ内に &lt;code&gt;/lib/defaults.js&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="4137e109ac15d620738ab61f944d78dc01861a63" translate="yes" xml:space="preserve">
          <source>Now it is very clear that three spaces are expected to be matched.</source>
          <target state="translated">これで、3つのスペースが一致することが予想されることが非常に明確になりました。</target>
        </trans-unit>
        <trans-unit id="5bca21c074e0d721a5fd90d89b255318c8ce0216" translate="yes" xml:space="preserve">
          <source>Now when you run &lt;code&gt;eslint&lt;/code&gt;, it will be running your local copy and showing your changes.</source>
          <target state="translated">これで &lt;code&gt;eslint&lt;/code&gt; を実行すると、ローカルコピーが実行され、変更が表示されます。</target>
        </trans-unit>
        <trans-unit id="57c585f4798ef4591adf413472a8e4f97e198bfd" translate="yes" xml:space="preserve">
          <source>Now you're ready to send the pull request. Go to your ESLint fork and then follow the &lt;a href=&quot;https://help.github.com/articles/creating-a-pull-request&quot;&gt;GitHub documentation&lt;/a&gt; on how to send a pull request.</source>
          <target state="translated">これでプルリクエストを送信する準備が整いました。ESLintフォークに移動し、プルリクエストの送信方法に関する&lt;a href=&quot;https://help.github.com/articles/creating-a-pull-request&quot;&gt;GitHubのドキュメント&lt;/a&gt;に従ってください。</target>
        </trans-unit>
        <trans-unit id="20482a66574043c6f07e88950af557ca9ba4cb34" translate="yes" xml:space="preserve">
          <source>Now, consider the following group configuration: &lt;code&gt;{&quot;groups&quot;: [[&quot;&amp;amp;&quot;, &quot;|&quot;, &quot;^&quot;, &quot;~&quot;, &quot;&amp;lt;&amp;lt;&quot;, &quot;&amp;gt;&amp;gt;&quot;, &quot;&amp;gt;&amp;gt;&amp;gt;&quot;], [&quot;&amp;amp;&amp;amp;&quot;, &quot;||&quot;]]}&lt;/code&gt;. There are 2 groups specified in this configuration: bitwise operators and logical operators. This rule checks if the operators belong to the same group only. In this case, this rule checks if bitwise operators and logical operators are mixed, but ignores all other operators.</source>
          <target state="translated">ここで、次のグループ構成を検討してください： &lt;code&gt;{&quot;groups&quot;: [[&quot;&amp;amp;&quot;, &quot;|&quot;, &quot;^&quot;, &quot;~&quot;, &quot;&amp;lt;&amp;lt;&quot;, &quot;&amp;gt;&amp;gt;&quot;, &quot;&amp;gt;&amp;gt;&amp;gt;&quot;], [&quot;&amp;amp;&amp;amp;&quot;, &quot;||&quot;]]}&lt;/code&gt; 。この構成では、ビット演算子と論理演算子の2つのグループが指定されています。このルールは、オペレーターが同じグループにのみ属しているかどうかをチェックします。この場合、このルールはビット演算子と論理演算子が混在しているかどうかをチェックしますが、他のすべての演算子は無視します。</target>
        </trans-unit>
        <trans-unit id="b4992572eba9e898e29cdb06f84784a8f96e8a75" translate="yes" xml:space="preserve">
          <source>Now, the remote &lt;code&gt;upstream&lt;/code&gt; points to the upstream source.</source>
          <target state="translated">これで、リモート &lt;code&gt;upstream&lt;/code&gt; はアップストリームソースをポイントします。</target>
        </trans-unit>
        <trans-unit id="8dad4f5a3bcf9c3bffdb2bf8a3903f51188938d6" translate="yes" xml:space="preserve">
          <source>Now, those variables and references have correct values in these properties.</source>
          <target state="translated">これで、これらの変数と参照は、これらのプロパティで正しい値を持つようになりました。</target>
        </trans-unit>
        <trans-unit id="b69cceaa39cc9827d135c31a0a311643f64c4242" translate="yes" xml:space="preserve">
          <source>Numbers should be written as decimal integers, e-notation integers, hexadecimal integers or floating-point decimals with at least one digit before and one digit after the decimal point. Never use octal literals.</source>
          <target state="translated">数字は、10進数の整数、e-ノテーションの整数、16進数の整数、または浮動小数点の小数で、小数点の前に少なくとも1桁、小数点の後に少なくとも1桁の数字を書く必要があります。8進数リテラルは絶対に使用しないでください。</target>
        </trans-unit>
        <trans-unit id="afb8e044bcdc5720b645f5bad798ce2422b144b7" translate="yes" xml:space="preserve">
          <source>Object Getters</source>
          <target state="translated">オブジェクトゲッター</target>
        </trans-unit>
        <trans-unit id="bff5a67a67ce40c0fd925410f2eb22f8e622ed24" translate="yes" xml:space="preserve">
          <source>Object Literals</source>
          <target state="translated">オブジェクトリテラル</target>
        </trans-unit>
        <trans-unit id="8c039bd2c30b64d60bbf9c614cffee3af09daea6" translate="yes" xml:space="preserve">
          <source>Object Rest/Spread Properties for ECMAScript</source>
          <target state="translated">ECMAScript のオブジェクトレスト/スプレッドプロパティ</target>
        </trans-unit>
        <trans-unit id="5b78ac9af4a56a7e0611f75dde6336ad4efc93cf" translate="yes" xml:space="preserve">
          <source>Object Setters</source>
          <target state="translated">オブジェクトセッター</target>
        </trans-unit>
        <trans-unit id="4671b195767e872ed26e93314009bf9a02b4925b" translate="yes" xml:space="preserve">
          <source>Object initializer - MDN</source>
          <target state="translated">オブジェクトのイニシャライザ-MDN</target>
        </trans-unit>
        <trans-unit id="ffa631f7811b9675c18511c35ebd3c5888d3c693" translate="yes" xml:space="preserve">
          <source>Object literal property names can be defined in two ways: using literals or using strings. For example, these two objects are equivalent:</source>
          <target state="translated">オブジェクトリテラルのプロパティ名は、リテラルを使用する方法と文字列を使用する方法の2つの方法で定義することができます。例えば、これら2つのオブジェクトは等価です。</target>
        </trans-unit>
        <trans-unit id="01a531c72bfc336c6dd4074ad4379fdce5371193" translate="yes" xml:space="preserve">
          <source>Object literals should have the following format:</source>
          <target state="translated">オブジェクトリテラルは、以下の形式にする必要があります。</target>
        </trans-unit>
        <trans-unit id="593c1a9b247ae9203d0656b7697e245c92cca212" translate="yes" xml:space="preserve">
          <source>Object literals.</source>
          <target state="translated">オブジェクトリテラル。</target>
        </trans-unit>
        <trans-unit id="d0906ffdbaac63ebcdad566357ec1fa32b660ce9" translate="yes" xml:space="preserve">
          <source>Object option (when &lt;code&gt;&quot;always&quot;&lt;/code&gt;):</source>
          <target state="translated">オブジェクトオプション（ &lt;code&gt;&quot;always&quot;&lt;/code&gt; 場合）：</target>
        </trans-unit>
        <trans-unit id="ac9c86f6b8a7b6cb8ef56a7d1efe7d9ef0bb7e18" translate="yes" xml:space="preserve">
          <source>Object option (when &lt;code&gt;&quot;never&quot;&lt;/code&gt;):</source>
          <target state="translated">オブジェクトオプション（ &lt;code&gt;&quot;never&quot;&lt;/code&gt; 場合）：</target>
        </trans-unit>
        <trans-unit id="f8eb5265b464019bacbbf51d8d1ff30364921024" translate="yes" xml:space="preserve">
          <source>Object option:</source>
          <target state="translated">オブジェクトオプション。</target>
        </trans-unit>
        <trans-unit id="149ecb5e6d435ef3f0c0b95567c172606e31d857" translate="yes" xml:space="preserve">
          <source>Object properties follow the same naming conventions as variables. Object methods follow the same naming conventions as functions. If a property or method is meant to be private, then it should be prefixed with an underscore character.</source>
          <target state="translated">オブジェクトのプロパティは、変数と同じ命名規則に従います。オブジェクトのメソッドは、関数と同じ命名規則に従います。プロパティやメソッドがプライベートであることを意味する場合は、プレフィックスにアンダースコアを付けなければなりません。</target>
        </trans-unit>
        <trans-unit id="07cc26cad16fa208535abacfadeea81f2c8f08d7" translate="yes" xml:space="preserve">
          <source>Object properties for variants of the &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; option:</source>
          <target state="translated">&lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; オプションのバリアントのオブジェクトプロパティ：</target>
        </trans-unit>
        <trans-unit id="c4dfaa986b5d14c627c83c972171a7941c5b7be6" translate="yes" xml:space="preserve">
          <source>Object rest/spread is now an official part of the JavaScript language, so our support for it is no longer experimental. In both ESLint v4 and ESLint v5, object rest/spread can now be enabled with the &lt;code&gt;&quot;ecmaVersion&quot;: 2018&lt;/code&gt; option:</source>
          <target state="translated">オブジェクトのレスト/スプレッドは、JavaScript言語の公式部分になりました。そのため、サポートはまだ実験段階ではありません。ESLint v4とESLint v5の両方で、 &lt;code&gt;&quot;ecmaVersion&quot;: 2018&lt;/code&gt; オプションを使用してオブジェクトのレスト/スプレッドを有効にできるようになりました。</target>
        </trans-unit>
        <trans-unit id="11a92c8196539fdab3857b1551dea0f331c775a8" translate="yes" xml:space="preserve">
          <source>Object.getPrototypeOf</source>
          <target state="translated">Object.getPrototypeOf</target>
        </trans-unit>
        <trans-unit id="fa8ae9f7df131e038e636e584d189c8515f58a8c" translate="yes" xml:space="preserve">
          <source>ObjectExpression</source>
          <target state="translated">ObjectExpression</target>
        </trans-unit>
        <trans-unit id="793061db282a75e8ed5dcc678e2f977602f536e5" translate="yes" xml:space="preserve">
          <source>ObjectExpression and ObjectPattern</source>
          <target state="translated">オブジェクト式とオブジェクトパターン</target>
        </trans-unit>
        <trans-unit id="72a83add2c5ede877c10d23f302d3e17accbadab" translate="yes" xml:space="preserve">
          <source>Objects</source>
          <target state="translated">Objects</target>
        </trans-unit>
        <trans-unit id="79c19740aba487d5c36feef2d71ebeab770748e7" translate="yes" xml:space="preserve">
          <source>Occasionally, a core ESLint rule needs to be changed. This is not necessarily a bug, but rather, an enhancement that makes a rule more configurable. In those situations, we will consider making changes to rules.</source>
          <target state="translated">時々、ESLintのコアルールを変更する必要があります。これは必ずしもバグではなく、ルールをより設定しやすくするための機能強化です。そのような状況では、ルールを変更することを検討します。</target>
        </trans-unit>
        <trans-unit id="503c1e8b34ff2b306e45ab8d949857759bce53e9" translate="yes" xml:space="preserve">
          <source>Octal literals are numerals that begin with a leading zero, such as:</source>
          <target state="translated">八進数リテラルとは、例えば、先頭のゼロから始まる数字のことです。</target>
        </trans-unit>
        <trans-unit id="5270a8f48af0485d13759bcff94f40182ae7fbe6" translate="yes" xml:space="preserve">
          <source>Of course, you could also have a style guide that disallows spaces around keywords.</source>
          <target state="translated">もちろん、キーワードの周りにスペースを入れないようにするスタイルガイドもあります。</target>
        </trans-unit>
        <trans-unit id="1125ca598816239bf6b761a79b64ee161ec9a9d7" translate="yes" xml:space="preserve">
          <source>Of course, you could also have a style guide that disallows spaces before keywords.</source>
          <target state="translated">もちろん、キーワードの前にスペースを入れないスタイルガイドもあります。</target>
        </trans-unit>
        <trans-unit id="c141537fefa1f7236bb95371a0c1823cf3d5a82a" translate="yes" xml:space="preserve">
          <source>Of particular note is that like &lt;code&gt;.gitignore&lt;/code&gt; files, all paths used as patterns for both &lt;code&gt;.eslintignore&lt;/code&gt; and &lt;code&gt;--ignore-pattern&lt;/code&gt; must use forward slashes as their path separators.</source>
          <target state="translated">特に注目すべきは、 &lt;code&gt;.gitignore&lt;/code&gt; ファイルと同様に、 &lt;code&gt;.eslintignore&lt;/code&gt; と &lt;code&gt;--ignore-pattern&lt;/code&gt; の両方のパターンとして使用されるすべてのパスは、パスの区切り文字としてスラッシュを使用する必要があることです。</target>
        </trans-unit>
        <trans-unit id="051c540be9962a7623f661578a805c175aaad210" translate="yes" xml:space="preserve">
          <source>On a separate line, describing the code beneath it.</source>
          <target state="translated">別の行で、その下のコードを記述します。</target>
        </trans-unit>
        <trans-unit id="41a98baf04faa90e085c1d5b39d3f2303b09a371" translate="yes" xml:space="preserve">
          <source>On multiple lines, to comment out sections of code.</source>
          <target state="translated">複数行で、コードのセクションをコメントアウトします。</target>
        </trans-unit>
        <trans-unit id="dd6bc408351897c37ede1ee1ad09032dd8381b52" translate="yes" xml:space="preserve">
          <source>On the first line, the JavaScript engine will automatically insert a semicolon, so this is not considered a syntax error. The JavaScript engine still knows how to interpret the line and knows that the line end indicates the end of the statement.</source>
          <target state="translated">最初の行では、JavaScriptエンジンは自動的にセミコロンを挿入するので、これは構文エラーとはみなされません。JavaScriptエンジンはまだその行を解釈する方法を知っており、行末が文の終わりを示していることを知っています。</target>
        </trans-unit>
        <trans-unit id="be62b8888255b7d5db97a2146275b0a473a3cd7f" translate="yes" xml:space="preserve">
          <source>On the other hand, if the code is targeting only ES5-compliant environments passing the radix &lt;code&gt;10&lt;/code&gt; may be redundant. In such a case you might want to disallow using such a radix.</source>
          <target state="translated">一方、コードがES5準拠の環境のみを対象としている場合、基数 &lt;code&gt;10&lt;/code&gt; を渡すことは冗長になる可能性があります。そのような場合、そのような基数の使用を禁止したいかもしれません。</target>
        </trans-unit>
        <trans-unit id="54325008781cc6962735603ca0f94ac6486bda16" translate="yes" xml:space="preserve">
          <source>On the other side of the argument are those who say that since semicolons are inserted automatically, they are optional and do not need to be inserted manually. However, the ASI mechanism can also be tricky to people who don't use semicolons. For example, consider this code:</source>
          <target state="translated">反対に、セミコロンは自動的に挿入されるので、セミコロンは任意であり、手動で挿入する必要はないという意見もあります。しかし、ASIの仕組みはセミコロンを使わない人にとっても厄介なものです。例えば、次のコードを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="96134602d9113347d1bc859098545b8dd3e69676" translate="yes" xml:space="preserve">
          <source>Once again, the intent here is to show that the developer intended for there to be no default behavior.</source>
          <target state="translated">繰り返しになりますが、ここでの意図は、開発者がデフォルトの動作がないことを意図していることを示すことです。</target>
        </trans-unit>
        <trans-unit id="c1de3fc4cbdd3e50999095504fb8e328eb84c3d2" translate="yes" xml:space="preserve">
          <source>Once npm is installed, run the following</source>
          <target state="translated">npmをインストールしたら、次のように実行します。</target>
        </trans-unit>
        <trans-unit id="c04fc496076254cace10e1520cd55bfc500cbbe1" translate="yes" xml:space="preserve">
          <source>Once the AST is available, &lt;code&gt;estraverse&lt;/code&gt; is used to traverse the AST from top to bottom. At each node, the &lt;code&gt;Linter&lt;/code&gt; object emits an event that has the same name as the node type (i.e., &quot;Identifier&quot;, &quot;WithStatement&quot;, etc.). On the way back up the subtree, an event is emitted with the AST type name and suffixed with &quot;:exit&quot;, such as &quot;Identifier:exit&quot; - this allows rules to take action both on the way down and on the way up in the traversal. Each event is emitted with the appropriate AST node available.</source>
          <target state="translated">ASTが利用可能になると、 &lt;code&gt;estraverse&lt;/code&gt; を使用してASTを上から下にトラバースします。各ノードで、 &lt;code&gt;Linter&lt;/code&gt; オブジェクトはノードタイプと同じ名前（つまり、「識別子」、「WithStatement」など）を持つイベントを発行します。サブツリーに戻る途中で、イベントはASTタイプ名と「：exit」のサフィックスが付いた「Identifier：exit」などのイベントが発行されます-これにより、ルールは下りと上りの両方でアクションを実行できますトラバーサル。各イベントは、使用可能な適切なASTノードとともに発行されます。</target>
        </trans-unit>
        <trans-unit id="64e40e04906a03b72ac5f6ed6329c5032886299c" translate="yes" xml:space="preserve">
          <source>Once you get a report object, it's up to you to determine how to output the results. Fixes will not be automatically applied to the files, even if you set &lt;code&gt;fix: true&lt;/code&gt; when constructing the &lt;code&gt;CLIEngine&lt;/code&gt; instance. To apply fixes to the files, call &lt;a href=&quot;#cliengineoutputfixes&quot;&gt;&lt;code&gt;outputFixes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">レポートオブジェクトを取得したら、結果を出力する方法を決定する必要があります。 &lt;code&gt;CLIEngine&lt;/code&gt; インスタンスの構築時に &lt;code&gt;fix: true&lt;/code&gt; を設定しても、修正はファイルに自動的に適用されません。ファイルに修正を適用するには、&lt;a href=&quot;#cliengineoutputfixes&quot;&gt; &lt;code&gt;outputFixes&lt;/code&gt; を&lt;/a&gt;呼び出します。</target>
        </trans-unit>
        <trans-unit id="b58e4b61287e965d92e76370ea203cbb83aba778" translate="yes" xml:space="preserve">
          <source>Once you have a local copy and have Node.JS and npm installed, you'll need to install the ESLint dependencies:</source>
          <target state="translated">ローカルコピーを用意し、Node.JSとnpmをインストールしたら、ESLintの依存関係をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="e7288581c9fd0f9fb86a36a0098329661fafddf0" translate="yes" xml:space="preserve">
          <source>Once you have an instance of &lt;code&gt;SourceCode&lt;/code&gt;, you can use the methods on it to work with the code:</source>
          <target state="translated">&lt;code&gt;SourceCode&lt;/code&gt; のインスタンスを取得したら、そのメソッドを使用してコードを操作できます。</target>
        </trans-unit>
        <trans-unit id="c35dc0ae3fcf2f907c56b8a61b2d1c1013797195" translate="yes" xml:space="preserve">
          <source>Once you have the configuration information, you can pass it into the &lt;code&gt;linter&lt;/code&gt; object:</source>
          <target state="translated">構成情報を取得したら、それを &lt;code&gt;linter&lt;/code&gt; オブジェクトに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="b5819a1bbc0e4af2eebf7583e7e5176671549350" translate="yes" xml:space="preserve">
          <source>Once you have your development environment installed, you can make and submit changes to the ESLint source files. Doing this successfully requires careful adherence to our &lt;a href=&quot;contributing/pull-requests&quot;&gt;pull-request submission workflow&lt;/a&gt;.</source>
          <target state="translated">開発環境をインストールしたら、ESLintソースファイルに変更を加えて送信できます。これを正常に行うには、&lt;a href=&quot;contributing/pull-requests&quot;&gt;プルリクエスト送信ワークフローを&lt;/a&gt;注意深く遵守する必要があります。</target>
        </trans-unit>
        <trans-unit id="df1fc06bd4ba0916a355e415a08d9ac385fc744f" translate="yes" xml:space="preserve">
          <source>Once you've cloned the repository, run &lt;code&gt;npm install&lt;/code&gt; to get all the necessary dependencies:</source>
          <target state="translated">リポジトリのクローンを作成したら、 &lt;code&gt;npm install&lt;/code&gt; を実行して、必要なすべての依存関係を取得します。</target>
        </trans-unit>
        <trans-unit id="a952bd0499233ed62352245dbdd816bb714cb93a" translate="yes" xml:space="preserve">
          <source>Once you've got ESLint running, you'll probably want to adjust the configuration to better suit your project. This section explains all the different ways you can configure ESLint.</source>
          <target state="translated">ESLintを起動したら、あなたのプロジェクトに合わせて設定を調整することになるでしょう。このセクションではESLintの設定方法を説明します。</target>
        </trans-unit>
        <trans-unit id="80320c8df4e958c73560fc248b42aa546a052559" translate="yes" xml:space="preserve">
          <source>Once you've made changes that you want to share with the community, the next step is to submit those changes back via a pull request.</source>
          <target state="translated">コミュニティで共有したい変更を行ったら、次のステップでは、プルリクエストを使って変更内容を提出します。</target>
        </trans-unit>
        <trans-unit id="73e73f412681c6b3c636b32c5dd0a954ee56c9f0" translate="yes" xml:space="preserve">
          <source>Once your pull request is sent, it's time for the team to review it. As such, please make sure to:</source>
          <target state="translated">プルリクエストが送信されたら、チームがそれをレビューする時間です。そのため、以下のようにしてください。</target>
        </trans-unit>
        <trans-unit id="461bb8bc5f902440c44a097ed81d4ff591b9129d" translate="yes" xml:space="preserve">
          <source>Once your shareable config is ready, you can &lt;a href=&quot;https://docs.npmjs.com/getting-started/publishing-npm-packages&quot;&gt;publish to npm&lt;/a&gt; to share with others. We recommend using the &lt;code&gt;eslint&lt;/code&gt; and &lt;code&gt;eslintconfig&lt;/code&gt; keywords so others can easily find your module.</source>
          <target state="translated">共有可能な構成の準備ができたら、&lt;a href=&quot;https://docs.npmjs.com/getting-started/publishing-npm-packages&quot;&gt;npm&lt;/a&gt;に公開して他のユーザーと共有できます。 &lt;code&gt;eslint&lt;/code&gt; および &lt;code&gt;eslintconfig&lt;/code&gt; キーワードを使用して、他の人が簡単にモジュールを見つけられるようにすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="968cb18b99b4f357f4169659789d6d35558a5b6b" translate="yes" xml:space="preserve">
          <source>One blank line should always be used in the following circumstances:</source>
          <target state="translated">以下のような場合は、必ず空欄1行を使用してください。</target>
        </trans-unit>
        <trans-unit id="6e05f3f48106cca4c55183384c239e9f6781eecf" translate="yes" xml:space="preserve">
          <source>One common variant of one true brace style is called Stroustrup, in which the &lt;code&gt;else&lt;/code&gt; statements in an &lt;code&gt;if-else&lt;/code&gt; construct, as well as &lt;code&gt;catch&lt;/code&gt; and &lt;code&gt;finally&lt;/code&gt;, must be on its own line after the preceding closing brace. For example:</source>
          <target state="translated">1つの真のブレーススタイルの1つの一般的なバリアントはStroustrupと呼ばれます。この &lt;code&gt;if-else&lt;/code&gt; 、if-elseコンストラクトの &lt;code&gt;else&lt;/code&gt; ステートメントと &lt;code&gt;catch&lt;/code&gt; および &lt;code&gt;finally&lt;/code&gt; は、前の右中括弧の後に独自の行になければなりません。例えば：</target>
        </trans-unit>
        <trans-unit id="074902a0b6265654f7818885f2c699f282da2808" translate="yes" xml:space="preserve">
          <source>One key is &lt;code&gt;VariableDeclarator&lt;/code&gt; and the other is &lt;code&gt;AssignmentExpression&lt;/code&gt;, which can be used to control the destructuring requirement for each of those types independently. Each property accepts an object that accepts two properties, &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt;, which can be used to control the destructuring requirement for each of &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt; independently for variable declarations and assignment expressions. By default, &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt; are set to true for both &lt;code&gt;VariableDeclarator&lt;/code&gt; and &lt;code&gt;AssignmentExpression&lt;/code&gt;.</source>
          <target state="translated">1つのキーは &lt;code&gt;VariableDeclarator&lt;/code&gt; で、もう1つは &lt;code&gt;AssignmentExpression&lt;/code&gt; です。これを使用して、これらの各タイプの個別化の要件を個別に制御できます。各プロパティは、 &lt;code&gt;array&lt;/code&gt; と &lt;code&gt;object&lt;/code&gt; 2つのプロパティを受け入れるオブジェクトを受け入れます。これを使用して、変数の宣言と代入式に対して、 &lt;code&gt;array&lt;/code&gt; と &lt;code&gt;object&lt;/code&gt; それぞれの破壊要件を個別に制御できます。デフォルトでは、 &lt;code&gt;array&lt;/code&gt; と &lt;code&gt;object&lt;/code&gt; は &lt;code&gt;VariableDeclarator&lt;/code&gt; と &lt;code&gt;AssignmentExpression&lt;/code&gt; の両方でtrueに設定されています。</target>
        </trans-unit>
        <trans-unit id="7b40cc8090e56f00ece04fc448cb76c1a5545421" translate="yes" xml:space="preserve">
          <source>One of benefits of this option is that it prevents the incorrect use of arrow functions in conditionals:</source>
          <target state="translated">このオプションの利点の1つは、条件式で矢印関数を誤って使用しないようにすることです。</target>
        </trans-unit>
        <trans-unit id="93a084e0710ce98d42a3b6895d5f4238168d8a76" translate="yes" xml:space="preserve">
          <source>One of the great things about open source projects is that anyone can contribute in any number of meaningful ways. ESLint couldn't exist without the help of the many contributors it's had since the project began, and we want you to feel like you can contribute and make a difference as well.</source>
          <target state="translated">オープンソースプロジェクトの素晴らしい点の一つは、誰もが意味のある方法で貢献できることです。プロジェクトが始まって以来、多くの貢献者の助けがなければESLintは存在できませんでした。</target>
        </trans-unit>
        <trans-unit id="8fe321b030cabb7b6a56d2b3c7ba46379fd8d541" translate="yes" xml:space="preserve">
          <source>One of the interesting, and sometimes confusing, aspects of JavaScript is that assignment can happen at almost any point. Because of this, an errant equals sign can end up causing assignment when the true intent was to do a comparison. This is especially true when using a &lt;code&gt;return&lt;/code&gt; statement. For example:</source>
          <target state="translated">JavaScriptの興味深い、時には混乱を招く側面の1つは、割り当てがほとんどいつでも発生する可能性があることです。このため、真の意図が比較を行うことであった場合に、誤った等号が割り当てを引き起こす可能性があります。これは、特に &lt;code&gt;return&lt;/code&gt; ステートメントを使用する場合に当てはまります。例えば：</target>
        </trans-unit>
        <trans-unit id="dc2c724cf22353a00eb4d8e0b5ec68baf78eb5ec" translate="yes" xml:space="preserve">
          <source>One of the justifications for using Comma First style is that it can help track missing and trailing commas. These are problematic because missing commas in variable declarations can lead to the leakage of global variables and trailing commas can lead to errors in older versions of IE.</source>
          <target state="translated">カンマ・ファースト・スタイルを使用する正当な理由の一つは、カンマの欠落や末尾のカンマを追跡するのに役立つということです。変数宣言のカンマの欠落はグローバル変数の漏洩につながり、末尾のカンマは古いバージョンのIEではエラーにつながる可能性があるため、これらは問題です。</target>
        </trans-unit>
        <trans-unit id="43739dc5f4290e33b069d3cbfc858a0190a0b218" translate="yes" xml:space="preserve">
          <source>One way to fix this issue would be to ensure that &lt;code&gt;totalLength&lt;/code&gt; is read at the same time as it's updated, like this:</source>
          <target state="translated">この問題を修正する1つの方法は、次のように、更新と同時に &lt;code&gt;totalLength&lt;/code&gt; が読み取られるようにすることです。</target>
        </trans-unit>
        <trans-unit id="82d457ac979b2d749bfa1fff14b37ecb16e90d1f" translate="yes" xml:space="preserve">
          <source>Only &lt;code&gt;return&lt;/code&gt; without a value is allowed, as it's a control flow statement.</source>
          <target state="translated">制御フローステートメントであるため、値なしでの &lt;code&gt;return&lt;/code&gt; のみが許可されます。</target>
        </trans-unit>
        <trans-unit id="865b1b6e5f709be37accdd161c63ae845508b783" translate="yes" xml:space="preserve">
          <source>Only make one fix per message. This is enforced because you must return the result of the fixer operation from &lt;code&gt;fix()&lt;/code&gt;.</source>
          <target state="translated">メッセージごとに1つの修正のみを行います。 &lt;code&gt;fix()&lt;/code&gt; からフィクサー操作の結果を返す必要があるため、これが強制されます。</target>
        </trans-unit>
        <trans-unit id="651a50a7f66b3213d4ddbca3f4a04a538e94dae9" translate="yes" xml:space="preserve">
          <source>Only the &lt;code&gt;Property&lt;/code&gt; node type is ignored by default, because for the &lt;a href=&quot;key-spacing&quot;&gt;key-spacing&lt;/a&gt; rule some alignment options require multiple spaces in properties of object literals.</source>
          <target state="translated">&lt;a href=&quot;key-spacing&quot;&gt;キー間隔&lt;/a&gt;ルールの場合、一部の配置オプションではオブジェクトリテラルのプロパティに複数のスペースが必要になるため、デフォルトでは &lt;code&gt;Property&lt;/code&gt; ノードタイプのみが無視されます。</target>
        </trans-unit>
        <trans-unit id="29e0482fd1761fdd60ab2cbaa6f30278bf01c57e" translate="yes" xml:space="preserve">
          <source>Open up developer tools</source>
          <target state="translated">開発者ツールを開く</target>
        </trans-unit>
        <trans-unit id="528fa3274e8f2faac58c536989703b2a7691898b" translate="yes" xml:space="preserve">
          <source>Operator Spacing</source>
          <target state="translated">オペレータの間隔</target>
        </trans-unit>
        <trans-unit id="f31ac1bc0518dff16e20d2bee973046b839b0d11" translate="yes" xml:space="preserve">
          <source>Operators with two operands must be preceded and followed by a single space to make the expression clear. Operators include assignments and logical operators.</source>
          <target state="translated">2つのオペランドを持つ演算子の前には、式を明確にするためにスペースを1つ入れなければなりません。演算子には、代入演算子と論理演算子があります。</target>
        </trans-unit>
        <trans-unit id="5cf9f8318f166d81f0832974953640e35cb76c75" translate="yes" xml:space="preserve">
          <source>Opponents of Yoda conditions point out that tooling has made us better programmers because tools will catch the mistaken use of &lt;code&gt;=&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt; (ESLint will catch this for you). Therefore, they argue, the utility of the pattern doesn't outweigh the readability hit the code takes while using Yoda conditions.</source>
          <target state="translated">ヨーダ条件の反対者は、ツールが &lt;code&gt;==&lt;/code&gt; の代わりに &lt;code&gt;=&lt;/code&gt; の誤った使用をキャッチするため、ツールが私たちの優れたプログラマーになったと指摘しています（ESLintがこれをキャッチします）。したがって、パターンの有用性は、ヨーダ条件を使用しているときにコードが読み取る可読性を上回らないと彼らは主張します。</target>
        </trans-unit>
        <trans-unit id="cc2f1a7f94147f105a8901b8c9bb3f24406fa1ff" translate="yes" xml:space="preserve">
          <source>Optional Exception</source>
          <target state="translated">オプションの例外</target>
        </trans-unit>
        <trans-unit id="4f2085951383e2cdbc090c9683b06731c8ef7ac4" translate="yes" xml:space="preserve">
          <source>Optionally, this rule can also enforce consistent order (&lt;code&gt;getBeforeSet&lt;/code&gt; or &lt;code&gt;setBeforeGet&lt;/code&gt;).</source>
          <target state="translated">オプションで、このルールは一貫した順序を適用することもできます（ &lt;code&gt;getBeforeSet&lt;/code&gt; または &lt;code&gt;setBeforeGet&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="3f583032cbdd550a2873302394f975358318e3c2" translate="yes" xml:space="preserve">
          <source>Optionally, you may specify a &lt;code&gt;max&lt;/code&gt; object property:</source>
          <target state="translated">オプションで、 &lt;code&gt;max&lt;/code&gt; オブジェクトプロパティを指定できます。</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="babf5970a0d99737bb086b6569f51b231437e499" translate="yes" xml:space="preserve">
          <source>Options Schemas</source>
          <target state="translated">オプションスキーマ</target>
        </trans-unit>
        <trans-unit id="125e188e5c535aba49305bcd42d96422853718e3" translate="yes" xml:space="preserve">
          <source>Options that accept array values can be specified by repeating the option or with a comma-delimited list (other than &lt;code&gt;--ignore-pattern&lt;/code&gt; which does not allow the second style).</source>
          <target state="translated">配列値を受け入れるオプションは、オプションを繰り返すか、コンマ区切りのリストを使用して指定できます（2番目のスタイルを許可しない &lt;code&gt;--ignore-pattern&lt;/code&gt; を除く）。</target>
        </trans-unit>
        <trans-unit id="cc6d4354c518051842952b8b24cff75c301ac9bd" translate="yes" xml:space="preserve">
          <source>Or an object option (Requires line breaks if any of properties is satisfied. Otherwise, disallows line breaks):</source>
          <target state="translated">またはオブジェクトオプシ ョ ン (いずれかのプ ロ パテ ィ が満たされていれば改行が必要です。それ以外の場合は改行を無効にします)。</target>
        </trans-unit>
        <trans-unit id="48fb5dcfee6b391a00a0d645f582f3d72542e395" translate="yes" xml:space="preserve">
          <source>Or an object option:</source>
          <target state="translated">またはオブジェクトオプション。</target>
        </trans-unit>
        <trans-unit id="8e04bc60d27598107203a60a335ed572e88264d3" translate="yes" xml:space="preserve">
          <source>Or for non-iterable 'array-like' objects:</source>
          <target state="translated">あるいは、文字化不可能な「配列のような」オブジェクトのために。</target>
        </trans-unit>
        <trans-unit id="8b117f5f38fcd06ba55849762c28b3c6a4df0d38" translate="yes" xml:space="preserve">
          <source>Or for tabbed indentation:</source>
          <target state="translated">または、タブ付きインデントの場合。</target>
        </trans-unit>
        <trans-unit id="534b36ed6d3baf1cd0fb88cab59bd33364f67414" translate="yes" xml:space="preserve">
          <source>Or in a &lt;code&gt;package.json&lt;/code&gt; file</source>
          <target state="translated">または &lt;code&gt;package.json&lt;/code&gt; ファイルで</target>
        </trans-unit>
        <trans-unit id="983504f1db047b4a14f090593364eea27f5c86b0" translate="yes" xml:space="preserve">
          <source>Or you can enforce that calls to &lt;code&gt;setTimeout&lt;/code&gt; always have two arguments:</source>
          <target state="translated">または、 &lt;code&gt;setTimeout&lt;/code&gt; の呼び出しに常に2つの引数があることを強制できます。</target>
        </trans-unit>
        <trans-unit id="2349626c15ba88b850dda985180df347efff61da" translate="yes" xml:space="preserve">
          <source>Originally, &lt;code&gt;Variable&lt;/code&gt; objects and &lt;code&gt;Reference&lt;/code&gt; objects refer each other:</source>
          <target state="translated">元々、 &lt;code&gt;Variable&lt;/code&gt; オブジェクトと &lt;code&gt;Reference&lt;/code&gt; オブジェクトは相互に参照しています。</target>
        </trans-unit>
        <trans-unit id="0c7f2d70c0ac6c087885c2e18648286544190997" translate="yes" xml:space="preserve">
          <source>Other Integration Lists</source>
          <target state="translated">その他の統合リスト</target>
        </trans-unit>
        <trans-unit id="121423f7955be6f99034dbe35e9109d534d3bb31" translate="yes" xml:space="preserve">
          <source>Other code conventions allow you to skip the &lt;code&gt;default&lt;/code&gt; case so long as there is a comment indicating the omission is intentional, such as:</source>
          <target state="translated">以下のように、省略が意図的なものであることを示すコメントがある限り、他のコード規則では &lt;code&gt;default&lt;/code&gt; ケースをスキップできます。</target>
        </trans-unit>
        <trans-unit id="c413664d095ba6eda32b2e5180bd3f63ad775b0e" translate="yes" xml:space="preserve">
          <source>Others prefer to declare one var per line.</source>
          <target state="translated">1 行に 1 つの var を宣言することを好む人もいます。</target>
        </trans-unit>
        <trans-unit id="777e3867f41cdcbbc95d8a27831735e4439631d1" translate="yes" xml:space="preserve">
          <source>Otherwise are considered problems.</source>
          <target state="translated">それ以外は問題視されています。</target>
        </trans-unit>
        <trans-unit id="8f226c4b9fa003489fea8332ce25c85c4ade2f50" translate="yes" xml:space="preserve">
          <source>Otherwise the &lt;code&gt;&quot;safe&quot;&lt;/code&gt; option corresponds to the &lt;code&gt;&quot;function&quot;&lt;/code&gt; option. Note that if &lt;code&gt;&quot;globalReturn&quot;: false&lt;/code&gt; is explicitly specified in the configuration, the &lt;code&gt;&quot;safe&quot;&lt;/code&gt; option will correspond to the &lt;code&gt;&quot;function&quot;&lt;/code&gt; option regardless of the specified environment.</source>
          <target state="translated">それ以外の場合、 &lt;code&gt;&quot;safe&quot;&lt;/code&gt; オプションは &lt;code&gt;&quot;function&quot;&lt;/code&gt; オプションに対応します。 &lt;code&gt;&quot;globalReturn&quot;: false&lt;/code&gt; が構成で明示的に指定されている場合、 &lt;code&gt;&quot;safe&quot;&lt;/code&gt; オプションは、指定された環境に関係なく &lt;code&gt;&quot;function&quot;&lt;/code&gt; オプションに対応することに注意してください。</target>
        </trans-unit>
        <trans-unit id="0b2741d82e791a60bad1a8621fcdbf97b20d60b3" translate="yes" xml:space="preserve">
          <source>Otherwise, &lt;code&gt;RuleTester#run&lt;/code&gt; will simply execute all of the tests in sequence, and will throw an error if one of them fails. This means you can simply execute a test file that calls &lt;code&gt;RuleTester.run&lt;/code&gt; using &lt;code&gt;node&lt;/code&gt;, without needing a testing framework.</source>
          <target state="translated">それ以外の場合、 &lt;code&gt;RuleTester#run&lt;/code&gt; は単純にすべてのテストを順番に実行し、テストの1つが失敗するとエラーをスローします。この手段は、単に呼び出してテストファイルを実行することができます &lt;code&gt;RuleTester.run&lt;/code&gt; を使用して &lt;code&gt;node&lt;/code&gt; テストフレームワークを必要とせずに、。</target>
        </trans-unit>
        <trans-unit id="da453deb49d685f98fdc9eee6730a3db89861b4f" translate="yes" xml:space="preserve">
          <source>Otherwise, if &lt;code&gt;describe&lt;/code&gt; and &lt;code&gt;it&lt;/code&gt; are present as globals, &lt;code&gt;RuleTester&lt;/code&gt; will use &lt;code&gt;global.describe&lt;/code&gt; and &lt;code&gt;global.it&lt;/code&gt; to run tests. This allows &lt;code&gt;RuleTester&lt;/code&gt; to work when using frameworks like &lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt; without any additional configuration.</source>
          <target state="translated">それ以外の場合、 &lt;code&gt;describe&lt;/code&gt; 、 &lt;code&gt;it&lt;/code&gt; がグローバルとして存在する場合、 &lt;code&gt;RuleTester&lt;/code&gt; は &lt;code&gt;global.describe&lt;/code&gt; と &lt;code&gt;global.it&lt;/code&gt; を使用してテストを実行します。これにより、追加設定なしで&lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt;などのフレームワークを使用するときに &lt;code&gt;RuleTester&lt;/code&gt; が機能します。</target>
        </trans-unit>
        <trans-unit id="f111dde36a2183fb8b31d84bb35478c7ad28ae40" translate="yes" xml:space="preserve">
          <source>Otherwise, if the node does not declare any variables, an empty array is returned.</source>
          <target state="translated">そうでなければ、ノードが変数を宣言していない場合、空の配列が返されます。</target>
        </trans-unit>
        <trans-unit id="112f84fde1efd0a6b137f4ef4aeed3c549b08bd5" translate="yes" xml:space="preserve">
          <source>Our commit message format is as follows:</source>
          <target state="translated">コミットメッセージのフォーマットは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="874ef7e39663f7db82348ed922daa965002f8637" translate="yes" xml:space="preserve">
          <source>Our public &lt;a href=&quot;https://github.com/eslint/eslint/issues&quot;&gt;issues tracker&lt;/a&gt; lists all of the things we plan on doing as well as suggestions from the community. Before starting to work on an issue, be sure you read through the rest of this page.</source>
          <target state="translated">パブリック&lt;a href=&quot;https://github.com/eslint/eslint/issues&quot;&gt;イシュートラッカー&lt;/a&gt;には、私たちが計画しているすべてのことと、コミュニティからの提案が一覧表示されます。問題に取り掛かる前に、このページの残りの部分を必ずお読みください。</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Output</target>
        </trans-unit>
        <trans-unit id="50d578ebf4e00d8649eb4f95a59bf792edcd3b16" translate="yes" xml:space="preserve">
          <source>Output Examples</source>
          <target state="translated">出力例</target>
        </trans-unit>
        <trans-unit id="f721699fc008a02ac10d406435648374991b8df2" translate="yes" xml:space="preserve">
          <source>Output object from this method:</source>
          <target state="translated">このメソッドからの出力オブジェクト。</target>
        </trans-unit>
        <trans-unit id="2ae3c877f13160bf4fb915afd2aa35c94e464b88" translate="yes" xml:space="preserve">
          <source>Output to the console</source>
          <target state="translated">コンソールへの出力</target>
        </trans-unit>
        <trans-unit id="afb6b4b6cae2618f58f61a3533c0fccfc233090f" translate="yes" xml:space="preserve">
          <source>Outputting to the console</source>
          <target state="translated">コンソールへの出力</target>
        </trans-unit>
        <trans-unit id="afdf6e15c0ce33e13907329dd18f3fa61951053c" translate="yes" xml:space="preserve">
          <source>Outputting to the filesystem</source>
          <target state="translated">ファイルシステムへの出力</target>
        </trans-unit>
        <trans-unit id="744acdca9924738f6ba20a057659f4dab8956cfb" translate="yes" xml:space="preserve">
          <source>Over the past several releases, we have been deprecating rules and introducing new rules to take their place. The following is a list of the removed rules and their replacements:</source>
          <target state="translated">過去数回のリリースの間に、ルールを非推奨にし、その代わりに新しいルールを導入してきました。以下は、削除されたルールとその代替ルールのリストです。</target>
        </trans-unit>
        <trans-unit id="f15e25b67d56c0b50f6e65a89912cb8c44445c60" translate="yes" xml:space="preserve">
          <source>Overall Performance</source>
          <target state="translated">総合的なパフォーマンス</target>
        </trans-unit>
        <trans-unit id="bed3eb091eb6a1e8a3c68cc9f2b8cad9f0ea7e35" translate="yes" xml:space="preserve">
          <source>Override blocks can also specify patterns to exclude from matches. If a file matches any of the excluded patterns, the configuration won't apply.</source>
          <target state="translated">オーバーライド ブロックでは、マッチから除外するパターンを指定することもできます。ファイルが除外されたパターンのいずれかにマッチした場合、設定は適用されません。</target>
        </trans-unit>
        <trans-unit id="d65d233ad72a12dd5f816f689346ed699f068f74" translate="yes" xml:space="preserve">
          <source>Overrides in a config file can now match dotfiles</source>
          <target state="translated">設定ファイル内のオーバーライドが dotfiles にマッチするようになりました。</target>
        </trans-unit>
        <trans-unit id="c7279b45cea6645bd003b55c34e4e0b68128806b" translate="yes" xml:space="preserve">
          <source>Overrides in an extended config file can now be overridden by a parent config file</source>
          <target state="translated">拡張コンフィグファイル内のオーバーライドを親コンフィグファイルでオーバーライドできるようになりました。</target>
        </trans-unit>
        <trans-unit id="84e380bd7906ce369799455bb337baa4a7e912c3" translate="yes" xml:space="preserve">
          <source>Packaging the Custom Formatter</source>
          <target state="translated">カスタムフォーマッタのパッケージング</target>
        </trans-unit>
        <trans-unit id="0a0e056314281df7ebe5bff4801d78e2bcb2e0da" translate="yes" xml:space="preserve">
          <source>Parentheses Spacing</source>
          <target state="translated">括弧の間隔</target>
        </trans-unit>
        <trans-unit id="8b047ea57f8d4953d13e87c42cd0dfbacf8b9d4e" translate="yes" xml:space="preserve">
          <source>Passing Arguments to Formatters</source>
          <target state="translated">フォーマッタへの引数の渡し方</target>
        </trans-unit>
        <trans-unit id="bbad3fbb9280e935e855b557b50f0feb18c726b1" translate="yes" xml:space="preserve">
          <source>Passing the callback by reference</source>
          <target state="translated">参照によるコールバックの受け渡し</target>
        </trans-unit>
        <trans-unit id="866764460d5b328ce01c5d25fea87d4f72c58d7e" translate="yes" xml:space="preserve">
          <source>Path to the cache file. If none specified &lt;code&gt;.eslintcache&lt;/code&gt; will be used. The file will be created in the directory where the &lt;code&gt;eslint&lt;/code&gt; command is executed. &lt;strong&gt;Deprecated&lt;/strong&gt;: Use &lt;code&gt;--cache-location&lt;/code&gt; instead.</source>
          <target state="translated">キャッシュファイルへのパス。指定がない場合、 &lt;code&gt;.eslintcache&lt;/code&gt; が使用されます。ファイルは、 &lt;code&gt;eslint&lt;/code&gt; コマンドが実行されるディレクトリに作成されます。&lt;strong&gt;非推奨&lt;/strong&gt;：代わりに &lt;code&gt;--cache-location&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="1a4f2472b12ffd8aaa283f1912f4a749bb112a9e" translate="yes" xml:space="preserve">
          <source>Path to the cache location. Can be a file or a directory. If no location is specified, &lt;code&gt;.eslintcache&lt;/code&gt; will be used. In that case, the file will be created in the directory where the &lt;code&gt;eslint&lt;/code&gt; command is executed.</source>
          <target state="translated">キャッシュの場所へのパス。ファイルまたはディレクトリを指定できます。場所を指定しない場合、 &lt;code&gt;.eslintcache&lt;/code&gt; が使用されます。その場合、 &lt;code&gt;eslint&lt;/code&gt; コマンドを実行したディレクトリにファイルが作成されます。</target>
        </trans-unit>
        <trans-unit id="9cf1a4ce359a6f23066671fb0ce9dcb0cf168d6e" translate="yes" xml:space="preserve">
          <source>Paths are relative to &lt;code&gt;.eslintignore&lt;/code&gt; location or the current working directory. This is also true of paths passed in via the &lt;code&gt;--ignore-pattern&lt;/code&gt;&lt;a href=&quot;command-line-interface#--ignore-pattern&quot;&gt;command&lt;/a&gt;.</source>
          <target state="translated">パスは、 &lt;code&gt;.eslintignore&lt;/code&gt; の場所または現在の作業ディレクトリからの相対パスです。これは、-- &lt;code&gt;--ignore-pattern&lt;/code&gt; &lt;a href=&quot;command-line-interface#--ignore-pattern&quot;&gt;コマンドを&lt;/a&gt;介して渡されるパスにも当てはまります。</target>
        </trans-unit>
        <trans-unit id="0493aae6aa03f23cee93bbaad9b496620e893832" translate="yes" xml:space="preserve">
          <source>Peer Dependency</source>
          <target state="translated">ピア依存性</target>
        </trans-unit>
        <trans-unit id="d4a170a4c994882082963476d79b1a77b04c7ae7" translate="yes" xml:space="preserve">
          <source>Per-rule Performance</source>
          <target state="translated">ルールごとの性能</target>
        </trans-unit>
        <trans-unit id="ed363adcc6ae50f9e2d44c956c484ce493017156" translate="yes" xml:space="preserve">
          <source>Perform any asynchronous operations</source>
          <target state="translated">任意の非同期操作を実行する</target>
        </trans-unit>
        <trans-unit id="9b69332b09b8aef3669c8068b4744d1b0de90bdd" translate="yes" xml:space="preserve">
          <source>Performance Testing</source>
          <target state="translated">性能試験</target>
        </trans-unit>
        <trans-unit id="be4da6f0c7a2438c9087ddd0f224ce1c2084f2f0" translate="yes" xml:space="preserve">
          <source>Performing an operation on each element of an iterable is a common task. However, performing an &lt;code&gt;await&lt;/code&gt; as part of each operation is an indication that the program is not taking full advantage of the parallelization benefits of &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;.</source>
          <target state="translated">イテラブルの各要素に対して操作を実行することは、一般的なタスクです。ただし、各操作の一部として &lt;code&gt;await&lt;/code&gt; を実行することは、プログラムが &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; 並列化の利点を十分に活用していないことを示しています。</target>
        </trans-unit>
        <trans-unit id="95901ce3386d6d8922a77162d48436823c7874d9" translate="yes" xml:space="preserve">
          <source>Personal Configuration File (deprecated)</source>
          <target state="translated">個人設定ファイル (非推奨)</target>
        </trans-unit>
        <trans-unit id="df4e75f6b932e3d5f6b66dcca11234789a64b98d" translate="yes" xml:space="preserve">
          <source>Piping Code Into ESLint</source>
          <target state="translated">コードをESLintにパイプする</target>
        </trans-unit>
        <trans-unit id="06f50881a755583b161af4399bd829f0111ebe4f" translate="yes" xml:space="preserve">
          <source>Place all of your runtime rules in the same directory (e.g., &lt;code&gt;eslint_rules&lt;/code&gt;).</source>
          <target state="translated">すべてのランタイムルールを同じディレクトリに配置します（例： &lt;code&gt;eslint_rules&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="31ccc366a57c10600d02a87ddb1627ad8fcf83e4" translate="yes" xml:space="preserve">
          <source>Place all of your runtime rules in the same directory (i.e., &lt;code&gt;eslint_rules&lt;/code&gt;).</source>
          <target state="translated">すべてのランタイムルールを同じディレクトリに配置します（つまり、 &lt;code&gt;eslint_rules&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="92009e0d6a0520471a107f4e981c2e736fb0840b" translate="yes" xml:space="preserve">
          <source>Placeholders in suggestion messages</source>
          <target state="translated">提案メッセージのプレースホルダ</target>
        </trans-unit>
        <trans-unit id="e51396525bede24fbfd195365328421b2712f903" translate="yes" xml:space="preserve">
          <source>Please include as much detail as possible to help us properly address your issue. If we need to triage issues and constantly ask people for more detail, that's time taken away from actually fixing issues. Help us be as efficient as possible by including a lot of detail in your issues.</source>
          <target state="translated">お客様の問題に適切に対処するために、できるだけ詳細な情報を記載してください。問題をトリアージし、常に詳細を尋ねる必要がある場合、実際に問題を解決するための時間が削られてしまいます。あなたの問題に多くの詳細を含めることで、できるだけ効率的に問題を解決できるようにしてください。</target>
        </trans-unit>
        <trans-unit id="cd6cb4e45c0a145bc991dcd0e8f4ab88f39165d4" translate="yes" xml:space="preserve">
          <source>Please note that supporting JSX syntax is not the same as supporting React. React applies specific semantics to JSX syntax that ESLint doesn't recognize. We recommend using &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react&quot;&gt;eslint-plugin-react&lt;/a&gt; if you are using React and want React semantics. By the same token, supporting ES6 syntax is not the same as supporting new ES6 globals (e.g., new types such as &lt;code&gt;Set&lt;/code&gt;). For ES6 syntax, use &lt;code&gt;{ &quot;parserOptions&quot;: { &quot;ecmaVersion&quot;: 6 } }&lt;/code&gt;; for new ES6 global variables, use &lt;code&gt;{ &quot;env&quot;: { &quot;es6&quot;: true } }&lt;/code&gt;. &lt;code&gt;{ &quot;env&quot;: { &quot;es6&quot;: true } }&lt;/code&gt; enables ES6 syntax automatically, but &lt;code&gt;{ &quot;parserOptions&quot;: { &quot;ecmaVersion&quot;: 6 } }&lt;/code&gt; does not enable ES6 globals automatically. Parser options are set in your &lt;code&gt;.eslintrc.*&lt;/code&gt; file by using the &lt;code&gt;parserOptions&lt;/code&gt; property. The available options are:</source>
          <target state="translated">JSX構文のサポートはReactのサポートと同じではないことに注意してください。 Reactは、ESLintが認識しない特定のセマンティクスをJSX構文に適用します。Reactを使用していて、Reactセマンティクスが必要な場合は、&lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react&quot;&gt;eslint-plugin-reactの&lt;/a&gt;使用をお勧めします。同様に、ES6構文のサポートは、新しいES6グローバル（たとえば、 &lt;code&gt;Set&lt;/code&gt; などの新しい型）のサポートと同じではありません。 ES6構文では、 &lt;code&gt;{ &quot;parserOptions&quot;: { &quot;ecmaVersion&quot;: 6 } }&lt;/code&gt; ます。新しいES6グローバル変数の場合は、 &lt;code&gt;{ &quot;env&quot;: { &quot;es6&quot;: true } }&lt;/code&gt; ます。 &lt;code&gt;{ &quot;env&quot;: { &quot;es6&quot;: true } }&lt;/code&gt; はES6構文を自動的に有効にしますが、 &lt;code&gt;{ &quot;parserOptions&quot;: { &quot;ecmaVersion&quot;: 6 } }&lt;/code&gt; はES6グローバルを自動的に有効にしません。パーサーオプションは &lt;code&gt;.eslintrc.*&lt;/code&gt; &lt;code&gt;parserOptions&lt;/code&gt; プロパティを使用してファイル。使用可能なオプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="caa1e575508ae90c0c1f3ba9cbc5f1d6c3021954" translate="yes" xml:space="preserve">
          <source>Please note that the following methods have been deprecated and will be removed in a future version of ESLint:</source>
          <target state="translated">以下のメソッドは非推奨となっており、ESLintの将来のバージョンでは削除されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="32dcca51ba22590cfb1a0282165e0b20b80790ba" translate="yes" xml:space="preserve">
          <source>Please note that this option applies only to identifiers inside destructuring patterns. It doesn't additionally allow any particular use of the created variables later in the code apart from the use that is already allowed by default or by other options.</source>
          <target state="translated">このオプションは、破壊パターン内の識別子にのみ適用されることに注意してください。このオプションは、デフォルトや他のオプションで既に許可されている使用以外に、コードの後半で作成された変数を特別に使用することを許可しません。</target>
        </trans-unit>
        <trans-unit id="2d2fdf1d62a3776fdec8b729a28be6e793bf8d2a" translate="yes" xml:space="preserve">
          <source>Please note that this rule does not compare conditions from the chain with conditions inside statements, and will not warn in the cases such as follows:</source>
          <target state="translated">このルールでは、チェーンからの条件とステートメント内の条件を比較することはなく、以下のような場合は警告しませんのでご注意ください。</target>
        </trans-unit>
        <trans-unit id="970fbd12b618363bade0db3e52057a632da36216" translate="yes" xml:space="preserve">
          <source>Please note that when passing a glob as a parameter, it will be expanded by your shell. The results of the expansion can vary depending on your shell, and its configuration. If you want to use node &lt;code&gt;glob&lt;/code&gt; syntax, you have to quote your parameter (using double quotes if you need it to run in Windows), as follows:</source>
          <target state="translated">グロブをパラメーターとして渡すと、シェルによって展開されることに注意してください。拡張の結果は、シェルとその構成によって異なります。 &lt;code&gt;glob&lt;/code&gt; 構文を使用する場合は、次のようにパラメーターを引用符で囲む必要があります（Windowsで実行する必要がある場合は二重引用符を使用します）。</target>
        </trans-unit>
        <trans-unit id="7e110a34a2db33270f753e46f8b7ab8a3821147b" translate="yes" xml:space="preserve">
          <source>Please note that you can either use the top-level options or the grouped options (&lt;code&gt;singleLine&lt;/code&gt; and &lt;code&gt;multiLine&lt;/code&gt;) but not both.</source>
          <target state="translated">最上位オプションまたはグループ化されたオプション（ &lt;code&gt;singleLine&lt;/code&gt; および &lt;code&gt;multiLine&lt;/code&gt; ）のいずれかを使用できますが、両方は使用できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a115fb1f05052d949674b5ad9f4dd54cca5e205b" translate="yes" xml:space="preserve">
          <source>Please note that you have to provide &lt;code&gt;data&lt;/code&gt; on the suggestion's object. Suggestion messages cannot use properties from the overall error's &lt;code&gt;data&lt;/code&gt;.</source>
          <target state="translated">提案のオブジェクトに関する &lt;code&gt;data&lt;/code&gt; を提供する必要があることに注意してください。提案メッセージでは、エラー全体の &lt;code&gt;data&lt;/code&gt; プロパティを使用できません。</target>
        </trans-unit>
        <trans-unit id="8131e2054fa3d6ce5d0136ddb8d6ac107226cb3a" translate="yes" xml:space="preserve">
          <source>Please read the user guide's section on &lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;configuring parser options&lt;/a&gt; to learn more.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;パーサーオプションの設定&lt;/a&gt;に関するユーザーガイドのセクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="4e9e14b73e813f94faf81a7bf4b8e790aeed433c" translate="yes" xml:space="preserve">
          <source>Please see &lt;code&gt;.gitignore&lt;/code&gt;'s specification for further examples of valid syntax.</source>
          <target state="translated">有効な構文の例については、 &lt;code&gt;.gitignore&lt;/code&gt; の仕様を参照してください。</target>
        </trans-unit>
        <trans-unit id="910be8bbebe15605e3211e93adb45fe019aed843" translate="yes" xml:space="preserve">
          <source>Please see the &lt;a href=&quot;https://github.com/eslint/generator-eslint&quot;&gt;generator documentation&lt;/a&gt; for instructions on how to use it.</source>
          <target state="translated">使用方法については、&lt;a href=&quot;https://github.com/eslint/generator-eslint&quot;&gt;ジェネレーターのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2c576146a981b5faae12b330f7bab5f655d4de92" translate="yes" xml:space="preserve">
          <source>Plugin authors may need to update installation instructions</source>
          <target state="translated">プラグインの作者は、インストール手順を更新する必要があるかもしれません</target>
        </trans-unit>
        <trans-unit id="e3b560171bc6f34e81c89e0ab2f15568841517f3" translate="yes" xml:space="preserve">
          <source>Plugin environments can define the following objects:</source>
          <target state="translated">プラグイン環境では、以下のオブジェクトを定義することができます。</target>
        </trans-unit>
        <trans-unit id="0fbbbaf384cbc0ee72d4f8c606fcf5d504bca04e" translate="yes" xml:space="preserve">
          <source>Plugins No Longer Have Default Configurations</source>
          <target state="translated">プラグインはデフォルト設定を持たなくなりました</target>
        </trans-unit>
        <trans-unit id="7b2f2b7399c496bf73ff7e69192e8907b6ce6f81" translate="yes" xml:space="preserve">
          <source>Plugins and shareable configs are no longer affected by ESLint's location</source>
          <target state="translated">プラグインと共有可能な設定はESLintのロケーションの影響を受けなくなりました。</target>
        </trans-unit>
        <trans-unit id="ee9003d71c823216744370af56f21413e11f9752" translate="yes" xml:space="preserve">
          <source>Plugins can expose additional environments for use in ESLint. To do so, the plugin must export an &lt;code&gt;environments&lt;/code&gt; object. The keys of the &lt;code&gt;environments&lt;/code&gt; object are the names of the different environments provided and the values are the environment settings. For example:</source>
          <target state="translated">プラグインは、ESLintで使用する追加の環境を公開できます。そのためには、プラグインが &lt;code&gt;environments&lt;/code&gt; オブジェクトをエクスポートする必要があります。 &lt;code&gt;environments&lt;/code&gt; オブジェクトのキーは、提供されるさまざまな環境の名前であり、値は環境設定です。例えば：</target>
        </trans-unit>
        <trans-unit id="dec281e97d018cacc13382cfc427e305389a0405" translate="yes" xml:space="preserve">
          <source>Plugins can expose additional rules for use in ESLint. To do so, the plugin must export a &lt;code&gt;rules&lt;/code&gt; object containing a key-value mapping of rule ID to rule. The rule ID does not have to follow any naming convention (so it can just be &lt;code&gt;dollar-sign&lt;/code&gt;, for instance).</source>
          <target state="translated">プラグインは、ESLintで使用する追加のルールを公開できます。そのためには、プラグインは、ルールIDのルールへのキー値マッピングを含む &lt;code&gt;rules&lt;/code&gt; オブジェクトをエクスポートする必要があります。ルールIDは、命名規則に従う必要はありません（たとえば、 &lt;code&gt;dollar-sign&lt;/code&gt; にすることができます）。</target>
        </trans-unit>
        <trans-unit id="b69b69c3f7bf908cf04b17050967f012181e0472" translate="yes" xml:space="preserve">
          <source>Plugins in scoped packages are now resolvable in configs</source>
          <target state="translated">スコープされたパッケージのプラグインは、configs で解決できるようになりました。</target>
        </trans-unit>
        <trans-unit id="f9ec5b88d6b7fe33abdb0cd312d875b7aee0a01e" translate="yes" xml:space="preserve">
          <source>Plugins may provide processors. Processors can extract JavaScript code from another kind of files, then lets ESLint lint the JavaScript code. Or processors can convert JavaScript code in preprocessing for some purpose.</source>
          <target state="translated">プラグインはプロセッサを提供することができます。プロセッサーは別の種類のファイルから JavaScript コードを抽出し、ESLint に JavaScript コードをリントさせることができます。あるいは、プロセッサは JavaScript コードを何らかの目的のために前処理で変換することができます。</target>
        </trans-unit>
        <trans-unit id="04de60818b1275febaa49d420056bd8ab7e76e8e" translate="yes" xml:space="preserve">
          <source>Polyjuice works with JSON configuration files, so if you're using a JavaScript or YAML JSCS configuration file, you should first convert it into a JSON configuration file.</source>
          <target state="translated">PolyjuiceはJSON設定ファイルで動作するので、JavaScriptやYAMLのJSCS設定ファイルを使用している場合は、まずJSON設定ファイルに変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="4db8807336771db69984fb33e2ecb89b2b778d76" translate="yes" xml:space="preserve">
          <source>Possible Errors</source>
          <target state="translated">考えられるエラー</target>
        </trans-unit>
        <trans-unit id="51e379f50f0321cddf83015a5392ece47d742feb" translate="yes" xml:space="preserve">
          <source>Prefer destructuring from arrays and objects (prefer-destructuring)</source>
          <target state="translated">配列やオブジェクトからのデストラクチャリングを優先する(prefer-destructuring)</target>
        </trans-unit>
        <trans-unit id="c228b3216b65c6046a15d3f0b6ae1deea05d3ecb" translate="yes" xml:space="preserve">
          <source>Prefer use of an object spread over &lt;code&gt;Object.assign&lt;/code&gt; (prefer-object-spread)</source>
          <target state="translated">&lt;code&gt;Object.assign&lt;/code&gt; （prefer-object-spread）よりもオブジェクトスプレッドの使用を優先する</target>
        </trans-unit>
        <trans-unit id="82062f1465f3be0589e9c94efa76e989985103e4" translate="yes" xml:space="preserve">
          <source>Prerequisites: &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt; (&lt;code&gt;^8.10.0&lt;/code&gt;, &lt;code&gt;^10.13.0&lt;/code&gt;, or &lt;code&gt;&amp;gt;=11.10.1&lt;/code&gt;) built with SSL support. (If you are using an official Node.js distribution, SSL is always built in.)</source>
          <target state="translated">前提条件：SSLサポートを使用して構築された&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt;（ &lt;code&gt;^8.10.0&lt;/code&gt; 、 &lt;code&gt;^10.13.0&lt;/code&gt; 、または &lt;code&gt;&amp;gt;=11.10.1&lt;/code&gt; ）。（公式のNode.jsディストリビューションを使用している場合、SSLは常に組み込まれています。）</target>
        </trans-unit>
        <trans-unit id="2a14e1b8f5938872ffc8263a306ac7453d0b08cd" translate="yes" xml:space="preserve">
          <source>Previous versions of ESLint silently ignored any nonexistent files and globs provided on the command line:</source>
          <target state="translated">以前のバージョンのESLintでは、コマンドラインで提供された存在しないファイルやグロブを無視するようになりました。</target>
        </trans-unit>
        <trans-unit id="861eb458285d7d2f2e5428c183895fe75d599908" translate="yes" xml:space="preserve">
          <source>Previously, &lt;code&gt;RuleTester&lt;/code&gt; used loose equality when making some of its assertions. For example, if a rule produced the string &lt;code&gt;&quot;7&quot;&lt;/code&gt; as a result of autofixing, &lt;code&gt;RuleTester&lt;/code&gt; would allow the number &lt;code&gt;7&lt;/code&gt; in an &lt;code&gt;output&lt;/code&gt; assertion, rather than the string &lt;code&gt;&quot;7&quot;&lt;/code&gt;. In ESLint v5, comparisons from &lt;code&gt;RuleTester&lt;/code&gt; use strict equality, so an assertion like this will no longer pass.</source>
          <target state="translated">以前は、 &lt;code&gt;RuleTester&lt;/code&gt; はそのアサーションの一部を作成するときに緩やかな等式を使用していました。たとえば、ルールが自動修正の結果として文字列 &lt;code&gt;&quot;7&quot;&lt;/code&gt; を生成した場合、 &lt;code&gt;RuleTester&lt;/code&gt; は文字列 &lt;code&gt;&quot;7&quot;&lt;/code&gt; ではなく、 &lt;code&gt;output&lt;/code&gt; アサーションで数値 &lt;code&gt;7&lt;/code&gt; を許可します。 ESLint v5では、 &lt;code&gt;RuleTester&lt;/code&gt; からの比較で厳密な等価が使用されるため、このようなアサーションは渡されなくなります。</target>
        </trans-unit>
        <trans-unit id="3f50639030ce290e0b2d963a0feb9b72be44a4b6" translate="yes" xml:space="preserve">
          <source>Previously, ESLint loaded plugins relative to the location of the ESLint package itself. As a result, we suggested that users with global ESLint installations should also install plugins globally, and users with local ESLint installations should install plugins locally. However, due to a design bug, this strategy caused ESLint to randomly fail to load plugins and shareable configs under certain circumstances, particularly when using package management tools like &lt;a href=&quot;https://github.com/lerna/lerna&quot;&gt;&lt;code&gt;lerna&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://yarnpkg.com/lang/en/docs/pnp/&quot;&gt;Yarn Plug n' Play&lt;/a&gt;.</source>
          <target state="translated">以前は、ESLintは、ESLintパッケージ自体の場所を基準にしてプラグインをロードしていました。その結果、ESLintをグローバルにインストールしたユーザーはプラグインもグローバルにインストールし、ESLintをローカルにインストールしたユーザーはプラグインをローカルにインストールすることをお勧めします。ただし、設計上のバグが原因で、特に&lt;a href=&quot;https://github.com/lerna/lerna&quot;&gt; &lt;code&gt;lerna&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;https://yarnpkg.com/lang/en/docs/pnp/&quot;&gt;Yarn Plug n 'Play&lt;/a&gt;などのパッケージ管理ツールを使用している場合、この戦略により、ESLintは特定の状況下でプラグインと共有可能な設定をランダムにロードできなくなりました。</target>
        </trans-unit>
        <trans-unit id="e5a31efe99bb4ae0265c26c456f8708e8b3abad7" translate="yes" xml:space="preserve">
          <source>Previously, ESLint would add an &lt;code&gt;eslintExplicitGlobalComment&lt;/code&gt; property to &lt;code&gt;Variable&lt;/code&gt; objects in scope analysis to indicate that a variable was introduced as a result of a &lt;code&gt;/* global */&lt;/code&gt; comment. This property was undocumented, and the ESLint team was unable to find any usage of the property outside of ESLint core. The property has been removed in ESLint v6, and replaced with the &lt;code&gt;eslintExplicitGlobalComments&lt;/code&gt; property, which can contain a list of all &lt;code&gt;/* global */&lt;/code&gt; comments if a variable was declared with more than one of them.</source>
          <target state="translated">以前は、ESLintはスコープ分析の &lt;code&gt;Variable&lt;/code&gt; オブジェクトに &lt;code&gt;eslintExplicitGlobalComment&lt;/code&gt; プロパティを追加して、変数が &lt;code&gt;/* global */&lt;/code&gt; コメントの結果として導入されたことを示していました。このプロパティは文書化されておらず、ESLintチームはESLintコアの外部でプロパティの使用法を見つけることができませんでした。このプロパティはESLint v6で削除され、 &lt;code&gt;eslintExplicitGlobalComments&lt;/code&gt; プロパティに置き換えられました。このプロパティには、変数が複数宣言されている場合にすべての &lt;code&gt;/* global */&lt;/code&gt; コメントのリストを含めることができます。</target>
        </trans-unit>
        <trans-unit id="a1d351994dd8ff11b19e958c9018b81f03cb97ca" translate="yes" xml:space="preserve">
          <source>Previously, ESLint would ignore these malformed directive comments. ESLint v5 will report an error when it sees a problem like this, so that the issue can be more easily corrected.</source>
          <target state="translated">以前は、ESLint はこれらの不正なディレクティブコメントを無視していました。ESLint v5では、このような問題を見つけたときにエラーを報告するようになり、問題をより簡単に修正できるようになりました。</target>
        </trans-unit>
        <trans-unit id="d6b010cfb49c2bd7324d04fb33de705502ddf710" translate="yes" xml:space="preserve">
          <source>Previously, ESLint would set the &lt;code&gt;parent&lt;/code&gt; property on each AST node immediately before running rule listeners for that node. This caused some confusion for rule authors, because the &lt;code&gt;parent&lt;/code&gt; property would not initially be present on any nodes, and it was sometimes necessary to complicate the structure of a rule to ensure that the &lt;code&gt;parent&lt;/code&gt; property of a given node would be available when needed.</source>
          <target state="translated">以前は、ESLintはそのノードのルールリスナーを実行する直前に、各ASTノードに &lt;code&gt;parent&lt;/code&gt; プロパティを設定していました。これにより、ルールの作成者に混乱が生じました。 &lt;code&gt;parent&lt;/code&gt; プロパティは最初はどのノードにも存在しないため、ルールの構造を複雑にして、特定のノードの &lt;code&gt;parent&lt;/code&gt; プロパティが必要なときに利用できるようにする必要がある場合があるためです。</target>
        </trans-unit>
        <trans-unit id="2efde3c7b07c84bb2b96e4b7cf3ee1a328ba78ff" translate="yes" xml:space="preserve">
          <source>Previously, it was possible for rules to report AST nodes without providing a report message. This was not intended behavior, and as a result the default formatter would crash if a rule omitted a message. However, it was possible to avoid a crash when using a non-default formatter, such as &lt;code&gt;json&lt;/code&gt;.</source>
          <target state="translated">以前は、ルールがレポートメッセージを提供せずにASTノードをレポートすることが可能でした。これは意図された動作ではなく、その結果、ルールがメッセージを省略した場合、デフォルトのフォーマッタがクラッシュしました。ただし、 &lt;code&gt;json&lt;/code&gt; などのデフォルト以外のフォーマッタを使用すると、クラッシュを回避できました。</target>
        </trans-unit>
        <trans-unit id="665203081aa657ef14f3fd259bc736ff48eade7a" translate="yes" xml:space="preserve">
          <source>Previously, rule context objects had an undocumented &lt;code&gt;_linter&lt;/code&gt; property, which was used internally within ESLint to process reports from rules. Some rules used this property to achieve functionality that was not intended to be possible for rules. For example, several plugins used the &lt;code&gt;_linter&lt;/code&gt; property in a rule to monitor reports from other rules, for the purpose of checking for unused &lt;code&gt;/* eslint-disable */&lt;/code&gt; directive comments. Although this functionality was useful for users, it could also cause stability problems for projects using ESLint. For example, an upgrade to a rule in one plugin could unexpectedly cause a rule in another plugin to start reporting errors.</source>
          <target state="translated">以前は、ルールコンテキストオブジェクトには、ドキュメント化されていない &lt;code&gt;_linter&lt;/code&gt; プロパティがありました。これは、ESLint内でルールからのレポートを処理するために使用されていました。一部のルールは、このプロパティを使用して、ルールで可能ではない機能を実現しました。たとえば、いくつかのプラグインは、未使用の &lt;code&gt;/* eslint-disable */&lt;/code&gt; ディレクティブコメントをチェックする目的で、ルールで &lt;code&gt;_linter&lt;/code&gt; プロパティを使用して他のルールからのレポートを監視しました。この機能はユーザーにとっては便利ですが、ESLintを使用するプロジェクトの安定性の問題を引き起こす可能性もあります。たとえば、あるプラグインのルールをアップグレードすると、別のプラグインのルールが予期せずエラーを報告する可能性があります。</target>
        </trans-unit>
        <trans-unit id="7ad7f54686fbe669487e9816787f55d0683c5950" translate="yes" xml:space="preserve">
          <source>Previously, the &lt;a href=&quot;../rules/comma-dangle&quot;&gt;&lt;code&gt;comma-dangle&lt;/code&gt;&lt;/a&gt; rule would ignore trailing function arguments and parameters, unless explicitly configured to check for function commas. In ESLint v6, function commas are treated the same way as other types of trailing commas.</source>
          <target state="translated">以前は、関数のコンマをチェックするように明示的に構成されていない限り、&lt;a href=&quot;../rules/comma-dangle&quot;&gt; &lt;code&gt;comma-dangle&lt;/code&gt; &lt;/a&gt;ルールは後続の関数引数とパラメーターを無視していました。ESLint v6では、関数コンマは他のタイプの後続コンマと同じように扱われます。</target>
        </trans-unit>
        <trans-unit id="bb4d9004d86d873bce13da59ea0da1efcb652b6e" translate="yes" xml:space="preserve">
          <source>Previously, the &lt;a href=&quot;../rules/indent&quot;&gt;&lt;code&gt;indent&lt;/code&gt;&lt;/a&gt; rule was fairly lenient about checking indentation; there were many code patterns where indentation was not validated by the rule. This caused confusion for users, because they were accidentally writing code with incorrect indentation, and they expected ESLint to catch the issues.</source>
          <target state="translated">以前は、&lt;a href=&quot;../rules/indent&quot;&gt; &lt;code&gt;indent&lt;/code&gt; &lt;/a&gt;ルールはインデントのチェックについてかなり寛大でした。インデントがルールによって検証されなかった多くのコードパターンがありました。ユーザーが誤ったインデントでコードを誤って作成しており、ESLintが問題を検出することを期待していたため、ユーザーは混乱を招きました。</target>
        </trans-unit>
        <trans-unit id="cac4dad357054ea6ee0c7634c9a4e7c59614fbef" translate="yes" xml:space="preserve">
          <source>Previously, the &lt;code&gt;context.getScope()&lt;/code&gt; method changed its behavior based on the &lt;code&gt;parserOptions.ecmaVersion&lt;/code&gt; property. However, this could cause confusing behavior when using a parser that doesn't respond to the &lt;code&gt;ecmaVersion&lt;/code&gt; option, such as &lt;code&gt;babel-eslint&lt;/code&gt;.</source>
          <target state="translated">以前は、 &lt;code&gt;context.getScope()&lt;/code&gt; メソッドは、 &lt;code&gt;parserOptions.ecmaVersion&lt;/code&gt; プロパティに基づいてその動作を変更していました。ただし、 &lt;code&gt;babel-eslint&lt;/code&gt; などの &lt;code&gt;ecmaVersion&lt;/code&gt; オプションに応答しないパーサーを使用すると、混乱を招く可能性があります。</target>
        </trans-unit>
        <trans-unit id="40450d3f81bf0c288fef5278f775f18d1a6902ca" translate="yes" xml:space="preserve">
          <source>Previously, the &lt;code&gt;linter.verify()&lt;/code&gt; API accepted a &lt;code&gt;global&lt;/code&gt; config option, which was a synonym for the documented &lt;code&gt;globals&lt;/code&gt; property. The &lt;code&gt;global&lt;/code&gt; option was never documented or officially supported, and did not work in config files. It has been removed in 4.0.</source>
          <target state="translated">以前は、 &lt;code&gt;linter.verify()&lt;/code&gt; APIは受け入れ &lt;code&gt;global&lt;/code&gt; 文書化のための同義語だったコンフィグオプション、 &lt;code&gt;globals&lt;/code&gt; プロパティを。 &lt;code&gt;global&lt;/code&gt; オプションは、文書化されていないか、正式にサポートされ、設定ファイルでは動作しませんでしたでした。4.0で削除されました。</target>
        </trans-unit>
        <trans-unit id="759b8740ec08f1087d9d1461adf3e37a3bf5b531" translate="yes" xml:space="preserve">
          <source>Previously, when configuring a set of global variables with an object, it was possible to use anything as the values of the object. An unknown value would be treated the same as &lt;code&gt;&quot;writable&quot;&lt;/code&gt;.</source>
          <target state="translated">以前は、オブジェクトを使用して一連のグローバル変数を構成する場合、オブジェクトの値として何でも使用できました。不明な値は &lt;code&gt;&quot;writable&quot;&lt;/code&gt; と同じように扱われます。</target>
        </trans-unit>
        <trans-unit id="d7b32ac883bfc23aab343c6372688bec1c7d6449" translate="yes" xml:space="preserve">
          <source>Previously, when linting code with a parser that had not been previously defined, the &lt;code&gt;Linter&lt;/code&gt; API would attempt to load the parser from the filesystem. However, this behavior was confusing because &lt;code&gt;Linter&lt;/code&gt; never access the filesystem in any other cases, and it was difficult to ensure that the correct parser would be found when loading the parser from the filesystem.</source>
          <target state="translated">以前は、以前に定義されていないパーサーでコードを &lt;code&gt;Linter&lt;/code&gt; すると、Linter APIはファイルシステムからパーサーをロードしようとしました。ただし、 &lt;code&gt;Linter&lt;/code&gt; が他のケースではファイルシステムにアクセスしないため、この動作は混乱し、ファイルシステムからパーサーをロードするときに正しいパーサーを確実に見つけることが困難でした。</target>
        </trans-unit>
        <trans-unit id="8a3ba3b815ccf0fde610368afb8b3a032a9740a4" translate="yes" xml:space="preserve">
          <source>Previously, when parsing JS code like &lt;code&gt;const foo = {...data}&lt;/code&gt; with the &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option enabled, the default parser would generate an &lt;code&gt;ExperimentalSpreadProperty&lt;/code&gt; node type for the &lt;code&gt;...data&lt;/code&gt; spread element.</source>
          <target state="translated">以前は、 &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; オプションを有効にして &lt;code&gt;const foo = {...data}&lt;/code&gt; ようなJSコードを解析すると、デフォルトのパーサーは &lt;code&gt;...data&lt;/code&gt; スプレッド要素の &lt;code&gt;ExperimentalSpreadProperty&lt;/code&gt; ノードタイプを生成しました。</target>
        </trans-unit>
        <trans-unit id="3572fe8f9bf308c3f1c32a5c5c8ecf7ade2e2992" translate="yes" xml:space="preserve">
          <source>Previously, when parsing JS code like &lt;code&gt;const {foo, ...rest} = data&lt;/code&gt; with the &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option enabled, the default parser would generate an &lt;code&gt;ExperimentalRestProperty&lt;/code&gt; node type for the &lt;code&gt;...data&lt;/code&gt; rest element.</source>
          <target state="translated">以前は、 &lt;code&gt;const {foo, ...rest} = data&lt;/code&gt; ようなJSコードの解析時に、 &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; オプションを有効にすると、デフォルトのパーサーが &lt;code&gt;...data&lt;/code&gt; 残りの要素の &lt;code&gt;ExperimentalRestProperty&lt;/code&gt; ノードタイプを生成していました。</target>
        </trans-unit>
        <trans-unit id="ac97c7d1bc4493830e4f2c35fbc7b98e9d1581e8" translate="yes" xml:space="preserve">
          <source>Previously, when using the default parser it was possible to use the &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option to enable support for &lt;a href=&quot;https://developers.google.com/web/updates/2017/06/object-rest-spread&quot;&gt;rest/spread properties&lt;/a&gt;, as follows:</source>
          <target state="translated">以前は、デフォルトのパーサーを使用する場合、 &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; オプションを使用して、次のように&lt;a href=&quot;https://developers.google.com/web/updates/2017/06/object-rest-spread&quot;&gt;rest / spreadプロパティの&lt;/a&gt;サポートを有効にすることができました。</target>
        </trans-unit>
        <trans-unit id="393a7447e4d30c62abea4ddc9f0d3dfc3e208e74" translate="yes" xml:space="preserve">
          <source>Previously, when using the default parser, a config could use the &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option to enable parsing support for object rest/spread properties:</source>
          <target state="translated">以前は、デフォルトのパーサーを使用する場合、configは &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; オプションを使用して、オブジェクトレスト/スプレッドプロパティの解析サポートを有効にすることができました。</target>
        </trans-unit>
        <trans-unit id="6c1fec0a04a3eab043ee811142120d57785cfef0" translate="yes" xml:space="preserve">
          <source>Primitive Literals</source>
          <target state="translated">原始文字</target>
        </trans-unit>
        <trans-unit id="8c8f400f7e3e42d398c134471b34479ab1e3ff12" translate="yes" xml:space="preserve">
          <source>Prior to 2.0.0, if a directory contained both an &lt;code&gt;.eslintrc&lt;/code&gt; file and a &lt;code&gt;package.json&lt;/code&gt; file with ESLint configuration information, the settings from the two files would be merged together. In 2.0.0, only the settings from the &lt;code&gt;.eslintrc.*&lt;/code&gt; file are used and the ones in &lt;code&gt;package.json&lt;/code&gt; are ignored when both are present. Otherwise, &lt;code&gt;package.json&lt;/code&gt; can still be used with ESLint configuration, but only if no other &lt;code&gt;.eslintrc.*&lt;/code&gt; files are present.</source>
          <target state="translated">2.0.0より前の &lt;code&gt;.eslintrc&lt;/code&gt; 、ディレクトリに.eslintrcファイルとESLint構成情報を含む &lt;code&gt;package.json&lt;/code&gt; ファイルの両方が含まれていた場合、2つのファイルの設定がマージされていました。2.0.0では、 &lt;code&gt;.eslintrc.*&lt;/code&gt; ファイルの設定のみが使用され、 &lt;code&gt;package.json&lt;/code&gt; の設定は両方が存在する場合は無視されます。それ以外の場合、 &lt;code&gt;package.json&lt;/code&gt; はESLint構成で引き続き使用できますが、他の &lt;code&gt;.eslintrc.*&lt;/code&gt; ファイルが存在しない場合のみです。</target>
        </trans-unit>
        <trans-unit id="bacbbe4722ec9b78f85bdddd7ed97a705ae7d9fe" translate="yes" xml:space="preserve">
          <source>Prior to 2.0.0, new global variables that were standardized as part of ES6 such as &lt;code&gt;Promise&lt;/code&gt;, &lt;code&gt;Map&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;, and &lt;code&gt;Symbol&lt;/code&gt; were included in the built-in global environment. This could lead to potential issues when, for example, &lt;code&gt;no-undef&lt;/code&gt; permitted use of the &lt;code&gt;Promise&lt;/code&gt; constructor even in ES5 code where promises are unavailable. In 2.0.0, the built-in environment only includes the standard ES5 global variables, and the new ES6 global variables have been moved to the &lt;code&gt;es6&lt;/code&gt; environment.</source>
          <target state="translated">2.0.0より前のバージョンでは、 &lt;code&gt;Promise&lt;/code&gt; 、 &lt;code&gt;Map&lt;/code&gt; 、 &lt;code&gt;Set&lt;/code&gt; 、 &lt;code&gt;Symbol&lt;/code&gt; など、ES6の一部として標準化された新しいグローバル変数が組み込みグローバル環境に含まれていました。これにより、たとえば、 &lt;code&gt;Promise&lt;/code&gt; が使用できないES5コードでも、un &lt;code&gt;no-undef&lt;/code&gt; がPromiseコンストラクターの使用を許可した場合に、潜在的な問題が発生する可能性があります。2.0.0では、組み込み環境には標準のES5グローバル変数のみが含まれ、新しいES6グローバル変数は &lt;code&gt;es6&lt;/code&gt; 環境に移動されました。</target>
        </trans-unit>
        <trans-unit id="ea53a76cd88b434dcfaff09ec72ada7ae7831a08" translate="yes" xml:space="preserve">
          <source>Prior to 2.0.0, the way to enable language options was by using &lt;code&gt;ecmaFeatures&lt;/code&gt; in your configuration. In 2.0.0:</source>
          <target state="translated">2.0.0より前の &lt;code&gt;ecmaFeatures&lt;/code&gt; では、言語オプションを有効にする方法は、設定でecmaFeaturesを使用することでした。2.0.0の場合：</target>
        </trans-unit>
        <trans-unit id="6b9f0362f6ea97fabedbee28f3e42f7c63d479c2" translate="yes" xml:space="preserve">
          <source>Prior to 4.0, ESLint required parsers to implement comment attachment, a process where AST nodes would gain additional properties corresponding to their leading and trailing comments in the source file. This made it difficult for users to develop custom parsers, because they would have to replicate the confusing comment attachment semantics required by ESLint.</source>
          <target state="translated">4.0以前のESLintでは、ASTノードがソースファイルの先頭と末尾のコメントに対応したプロパティを取得するために、パーサーはコメント添付を実装する必要がありました。このため、ユーザーがカスタムパーサーを開発するのは難しく、ESLintで必要とされている紛らわしいコメント添付のセマンティクスを再現しなければなりませんでした。</target>
        </trans-unit>
        <trans-unit id="5e3d392b20fe6d9664c81b4a65c6b601daf8e9bf" translate="yes" xml:space="preserve">
          <source>Prior to 4.0, shebang comments in a source file would not appear in the output of &lt;code&gt;sourceCode.getAllComments()&lt;/code&gt; or &lt;code&gt;sourceCode.getComments()&lt;/code&gt;, but they would appear in the output of &lt;code&gt;sourceCode.getTokenOrCommentBefore&lt;/code&gt; as line comments. This inconsistency led to some confusion for rule developers.</source>
          <target state="translated">4.0前に、ソースファイル内のシェバングコメントの出力には表示されません &lt;code&gt;sourceCode.getAllComments()&lt;/code&gt; または &lt;code&gt;sourceCode.getComments()&lt;/code&gt; 、しかし、彼らはの出力に現れる &lt;code&gt;sourceCode.getTokenOrCommentBefore&lt;/code&gt; 行コメントとして。この不整合により、ルール開発者は混乱を招きました。</target>
        </trans-unit>
        <trans-unit id="b3be15561d5151f64c56456dc30fa7cef13a71e7" translate="yes" xml:space="preserve">
          <source>Prior to v0.16.0 this rule also enforced that there was only a single line at the end of the file. If you still want this behavior, consider enabling &lt;a href=&quot;no-multiple-empty-lines&quot;&gt;no-multiple-empty-lines&lt;/a&gt; with &lt;code&gt;maxEOF&lt;/code&gt; and/or &lt;a href=&quot;no-trailing-spaces&quot;&gt;no-trailing-spaces&lt;/a&gt;.</source>
          <target state="translated">v0.16.0より前のバージョンでは、このルールにより、ファイルの最後に1行のみが存在することが強制されていました。それでもこの動作が必要な場合は、 &lt;code&gt;maxEOF&lt;/code&gt; または&lt;a href=&quot;no-trailing-spaces&quot;&gt;no-trailing-spacesで&lt;/a&gt;&lt;a href=&quot;no-multiple-empty-lines&quot;&gt;no-multiple-empty-lines&lt;/a&gt;を有効にすることを検討してください。</target>
        </trans-unit>
        <trans-unit id="af52f1493bafbe39bd3dae2bc861bf916727dd6e" translate="yes" xml:space="preserve">
          <source>Prior to v2.0.0, plugins could specify a &lt;code&gt;rulesConfig&lt;/code&gt; for the plugin. The &lt;code&gt;rulesConfig&lt;/code&gt; would automatically be applied whenever someone uses the plugin, which is the opposite of what ESLint does in every other situation (where nothing is on by default). To bring plugins behavior in line, we have removed support for &lt;code&gt;rulesConfig&lt;/code&gt; in plugins.</source>
          <target state="translated">v2.0.0より前のバージョンでは、プラグインはプラグインの &lt;code&gt;rulesConfig&lt;/code&gt; を指定できました。 &lt;code&gt;rulesConfig&lt;/code&gt; は、誰かがESLintは（何もデフォルトでオンになっていない）他のすべての状況で何をするかの反対側にあるプラグインを使用したときに自動的に適用されます。プラグインの動作を一致させるために、プラグインでの &lt;code&gt;rulesConfig&lt;/code&gt; のサポートを削除しました。</target>
        </trans-unit>
        <trans-unit id="692a54c10f74d805a38453bd22bb1d25068c3ba0" translate="yes" xml:space="preserve">
          <source>Processors in Plugins</source>
          <target state="translated">プラグインのプロセッサ</target>
        </trans-unit>
        <trans-unit id="ee555673e8664c98d4ada2d762c610f965ba2a31" translate="yes" xml:space="preserve">
          <source>Processors may make named code blocks such as &lt;code&gt;0.js&lt;/code&gt; and &lt;code&gt;1.js&lt;/code&gt;. ESLint handles such a named code block as a child file of the original file. You can specify additional configurations for named code blocks in the &lt;code&gt;overrides&lt;/code&gt; section of the config. For example, the following disables &lt;code&gt;strict&lt;/code&gt; rule for the named code blocks which end with &lt;code&gt;.js&lt;/code&gt; in markdown files.</source>
          <target state="translated">プロセッサは、 &lt;code&gt;0.js&lt;/code&gt; や &lt;code&gt;1.js&lt;/code&gt; などの名前付きコードブロックを作成できます。ESLintは、このような名前付きコードブロックを元のファイルの子ファイルとして扱います。構成の &lt;code&gt;overrides&lt;/code&gt; セクションで、名前付きコードブロックの追加構成を指定できます。たとえば、次の例では、マークダウンファイルで &lt;code&gt;.js&lt;/code&gt; で終わる名前付きコードブロックの &lt;code&gt;strict&lt;/code&gt; ルールを無効にします。</target>
        </trans-unit>
        <trans-unit id="f32c5098fb499f12ad76958c7a61d5b8091f9763" translate="yes" xml:space="preserve">
          <source>Program is expressed with several code paths. A code path is expressed with objects of two kinds: &lt;code&gt;CodePath&lt;/code&gt; and &lt;code&gt;CodePathSegment&lt;/code&gt;.</source>
          <target state="translated">プログラムはいくつかのコードパスで表現されます。コードパスは、 &lt;code&gt;CodePath&lt;/code&gt; と &lt;code&gt;CodePathSegment&lt;/code&gt; の 2種類のオブジェクトで表されます。</target>
        </trans-unit>
        <trans-unit id="42fa885d13da97a910ec7164bf19b94acb08d0f0" translate="yes" xml:space="preserve">
          <source>Programming language style guides are important for the long-term maintainability of software. This guide is based on the &lt;a href=&quot;https://java.sun.com/docs/codeconv/&quot;&gt;Code Conventions for the Java Programming Language&lt;/a&gt; and &lt;a href=&quot;http://javascript.crockford.com/code.html&quot;&gt;Douglas Crockford's Code Conventions for the JavaScript Programming Language&lt;/a&gt;. Modifications have been made due to my personal experience and preferences.</source>
          <target state="translated">プログラミング言語スタイルガイドは、ソフトウェアの長期保守性にとって重要です。このガイドは&lt;a href=&quot;https://java.sun.com/docs/codeconv/&quot;&gt;、Javaプログラミング言語&lt;/a&gt;&lt;a href=&quot;http://javascript.crockford.com/code.html&quot;&gt;のコード規約&lt;/a&gt;とDouglas CrockfordのJavaScriptプログラミング言語のコード規約に基づいています。私の個人的な経験と好みにより、変更が加えられました。</target>
        </trans-unit>
        <trans-unit id="43f3ace69f2fe7131543d9052cb08b303ff904e4" translate="yes" xml:space="preserve">
          <source>Project-level configuration:</source>
          <target state="translated">プロジェクトレベルの設定。</target>
        </trans-unit>
        <trans-unit id="33fb62ee4504c98b469fcbf6c4712f39685712fe" translate="yes" xml:space="preserve">
          <source>Property descriptors in &lt;code&gt;Object.create&lt;/code&gt;, &lt;code&gt;Object.defineProperty&lt;/code&gt;, &lt;code&gt;Object.defineProperties&lt;/code&gt;, and &lt;code&gt;Reflect.defineProperty&lt;/code&gt; methods of the global objects.</source>
          <target state="translated">グローバルオブジェクトの &lt;code&gt;Object.create&lt;/code&gt; 、 &lt;code&gt;Object.defineProperty&lt;/code&gt; 、 &lt;code&gt;Object.defineProperties&lt;/code&gt; 、および &lt;code&gt;Reflect.defineProperty&lt;/code&gt; メソッドのプロパティ記述子。</target>
        </trans-unit>
        <trans-unit id="b5e66a1596415565d4a94aaddcf8bb5751542451" translate="yes" xml:space="preserve">
          <source>Proponents of Yoda conditions highlight that it is impossible to mistakenly use &lt;code&gt;=&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt; because you cannot assign to a literal value. Doing so will cause a syntax error and you will be informed of the mistake early on. This practice was therefore very common in early programming where tools were not yet available.</source>
          <target state="translated">ヨーダ条件の擁護者は、リテラル値に割り当てることができないため、 &lt;code&gt;==&lt;/code&gt; の代わりに &lt;code&gt;=&lt;/code&gt; を誤って使用することは不可能であることを強調しています。これを行うと構文エラーが発生し、早い段階で間違いが通知されます。したがって、この方法は、ツールがまだ利用できなかった初期のプログラミングでは非常に一般的でした。</target>
        </trans-unit>
        <trans-unit id="d36f5aee868ae6db86c6284531cdd8f72d77db1c" translate="yes" xml:space="preserve">
          <source>Proposing a &lt;a href=&quot;new-rules&quot;&gt;New Rule&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;new-rules&quot;&gt;新しいルールの&lt;/a&gt;提案</target>
        </trans-unit>
        <trans-unit id="ecaeee3736f17c6a22f424961f98b463abcd212d" translate="yes" xml:space="preserve">
          <source>Proposing a &lt;a href=&quot;rule-changes&quot;&gt;Rule Change&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;rule-changes&quot;&gt;ルール変更の&lt;/a&gt;提案</target>
        </trans-unit>
        <trans-unit id="8fde9b438a1e10afec4812ddd08e7722642dc36e" translate="yes" xml:space="preserve">
          <source>Proposing a Rule</source>
          <target state="translated">規則の提案</target>
        </trans-unit>
        <trans-unit id="341849141f80cca77602012c6f342ce4742319fd" translate="yes" xml:space="preserve">
          <source>Proposing a Rule Change</source>
          <target state="translated">ルール変更の提案</target>
        </trans-unit>
        <trans-unit id="86ee7e213745f3cf674455c23534700070da7b53" translate="yes" xml:space="preserve">
          <source>Provide as many unit tests as possible. Your pull request will never be turned down for having too many tests submitted with it!</source>
          <target state="translated">できるだけ多くのユニットテストを提供してください。あなたのプルリクエストは、提出されたテストが多すぎても断られることはありません!</target>
        </trans-unit>
        <trans-unit id="4ffdc87852320c6294c2b02843d1425e91d10cfc" translate="yes" xml:space="preserve">
          <source>Providing Suggestions</source>
          <target state="translated">提案の提供</target>
        </trans-unit>
        <trans-unit id="5591bbc620225df439fe2bdef9369c8238d4af8c" translate="yes" xml:space="preserve">
          <source>Publishing a Shareable Config</source>
          <target state="translated">共有可能な設定の公開</target>
        </trans-unit>
        <trans-unit id="30ab8d084e2209d47a1dc198c8de1e251f390a94" translate="yes" xml:space="preserve">
          <source>Pull Requests</source>
          <target state="translated">プルリクエスト</target>
        </trans-unit>
        <trans-unit id="8317963e9e1ff1e717106bf4888341b278d74c92" translate="yes" xml:space="preserve">
          <source>Push your changes</source>
          <target state="translated">変更を押す</target>
        </trans-unit>
        <trans-unit id="8c720088282bb804281d4141100281d68e2719bb" translate="yes" xml:space="preserve">
          <source>Putting default parameter at last allows function calls to omit optional tail arguments.</source>
          <target state="translated">デフォルトのパラメータを最後に置くことで、関数呼び出しでオプションの末尾引数を省略することができます。</target>
        </trans-unit>
        <trans-unit id="289df8885d703027d487fef77d56fc52e316d891" translate="yes" xml:space="preserve">
          <source>Rather than creating separate rules for every language feature you want to turn off, this rule allows you to configure the syntax elements you want to restrict use of. These elements are represented by their &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt; node types. For example, a function declaration is represented by &lt;code&gt;FunctionDeclaration&lt;/code&gt; and the &lt;code&gt;with&lt;/code&gt; statement is represented by &lt;code&gt;WithStatement&lt;/code&gt;. You may find the full list of AST node names you can use &lt;a href=&quot;https://github.com/eslint/espree/blob/master/lib/ast-node-types.js&quot;&gt;on GitHub&lt;/a&gt; and use &lt;a href=&quot;https://astexplorer.net/&quot;&gt;AST Explorer&lt;/a&gt; with the espree parser to see what type of nodes your code consists of.</source>
          <target state="translated">オフにする言語機能ごとに個別のルールを作成するのではなく、このルールを使用すると、使用を制限する構文要素を構成できます。これらの要素は、&lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt;ノードタイプによって表されます。たとえば、関数宣言は &lt;code&gt;FunctionDeclaration&lt;/code&gt; で表され、 &lt;code&gt;with&lt;/code&gt; ステートメントは &lt;code&gt;WithStatement&lt;/code&gt; で表されます。&lt;a href=&quot;https://github.com/eslint/espree/blob/master/lib/ast-node-types.js&quot;&gt;GitHub&lt;/a&gt;で使用できるASTノード名の完全なリストを見つけ、&lt;a href=&quot;https://astexplorer.net/&quot;&gt;ASTエクスプローラー&lt;/a&gt;とespreeパーサーを使用して、コードが構成するノードのタイプを確認できます。</target>
        </trans-unit>
        <trans-unit id="4d1f996aa17807ebebdb5143b01f86f170d5bea6" translate="yes" xml:space="preserve">
          <source>React</source>
          <target state="translated">React</target>
        </trans-unit>
        <trans-unit id="8bf3ca1af55a4ac765bcc067d56c1abf4201ae04" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;https://js.foundation/community/code-of-conduct&quot;&gt;Code of Conduct&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://js.foundation/community/code-of-conduct&quot;&gt;行動規範&lt;/a&gt;を読む</target>
        </trans-unit>
        <trans-unit id="3c28870b2e40bf75ddc825d7f6ccf7aef23e7e4b" translate="yes" xml:space="preserve">
          <source>Read-only global variables</source>
          <target state="translated">読み取り専用のグローバル変数</target>
        </trans-unit>
        <trans-unit id="f7f699bcbeea4f59d35cf84d686c1fe9d26c6cd2" translate="yes" xml:space="preserve">
          <source>Reading configuration information from config files (including &lt;code&gt;.eslintrc&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt;)</source>
          <target state="translated">構成ファイル（ &lt;code&gt;.eslintrc&lt;/code&gt; および &lt;code&gt;package.json&lt;/code&gt; を含む）から構成情報を読み取る</target>
        </trans-unit>
        <trans-unit id="c503dd1f9c9f723f78d9b1e948ede74c06ed1112" translate="yes" xml:space="preserve">
          <source>Reading from the file system</source>
          <target state="translated">ファイルシステムからの読み込み</target>
        </trans-unit>
        <trans-unit id="256ac291cd34fa721dc7063e9c7a456d831fad1e" translate="yes" xml:space="preserve">
          <source>Rebase onto upstream</source>
          <target state="translated">上流にリベース</target>
        </trans-unit>
        <trans-unit id="3636419e1cfae4b85f914484288a2e7b2429d45d" translate="yes" xml:space="preserve">
          <source>Rebasing</source>
          <target state="translated">Rebasing</target>
        </trans-unit>
        <trans-unit id="15bc3424085a46a8b413590042e27673eda36b4b" translate="yes" xml:space="preserve">
          <source>Recommended keywords:</source>
          <target state="translated">おすすめのキーワードです。</target>
        </trans-unit>
        <trans-unit id="8532988ca58a814f1543477fc268a1acefe668d0" translate="yes" xml:space="preserve">
          <source>Redeclarations of read-only global variables and assignments to read-only global variables.</source>
          <target state="translated">読み取り専用グローバル変数の再宣言と、読み取り専用グローバル変数への代入。</target>
        </trans-unit>
        <trans-unit id="4462d29bec3d07aaf9a71ae4d7273bee7d450028" translate="yes" xml:space="preserve">
          <source>Reference Information</source>
          <target state="translated">参考情報</target>
        </trans-unit>
        <trans-unit id="df9e76446650cac75008b6bf87079e749a453bdb" translate="yes" xml:space="preserve">
          <source>Reference interface</source>
          <target state="translated">参照インタフェース</target>
        </trans-unit>
        <trans-unit id="53c2a1c2bb6e1d4d8148660156aec1a0a17d24a8" translate="yes" xml:space="preserve">
          <source>ReferenceError: assignment to undeclared variable</source>
          <target state="translated">ReferenceError:定義されていない変数への代入</target>
        </trans-unit>
        <trans-unit id="eb264a799738b600bd47d5135f4fc05dfcd5b1d5" translate="yes" xml:space="preserve">
          <source>References to scoped plugins in config files are now required to include the scope</source>
          <target state="translated">コンフィグファイル内のスコープ付きプラグインへの参照は、スコープを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="e4409d5bd36638733bfa9227649affbe8de8da69" translate="yes" xml:space="preserve">
          <source>Reflect.apply</source>
          <target state="translated">Reflect.apply</target>
        </trans-unit>
        <trans-unit id="f2f9fd068e4242fbb4c065fab823928d6658dcc6" translate="yes" xml:space="preserve">
          <source>Reflect.defineProperty</source>
          <target state="translated">Reflect.defineProperty</target>
        </trans-unit>
        <trans-unit id="d9c40e72ed42277e621938140990fecec31860d2" translate="yes" xml:space="preserve">
          <source>Reflect.deleteProperty</source>
          <target state="translated">Reflect.deleteProperty</target>
        </trans-unit>
        <trans-unit id="dca299dec7c4b27406c99a9db8613312969fc8ef" translate="yes" xml:space="preserve">
          <source>Reflect.getOwnPropertyDescriptor</source>
          <target state="translated">Reflect.getOwnPropertyDescriptor</target>
        </trans-unit>
        <trans-unit id="9e55b43471522e73de67aec1ebffc5cdb9fa1436" translate="yes" xml:space="preserve">
          <source>Reflect.getOwnPropertyNames</source>
          <target state="translated">Reflect.getOwnPropertyNames</target>
        </trans-unit>
        <trans-unit id="c4ccc5cd40402aca6f2327273b607a16273c4cf3" translate="yes" xml:space="preserve">
          <source>Reflect.getPrototypeOf</source>
          <target state="translated">Reflect.getPrototypeOf</target>
        </trans-unit>
        <trans-unit id="67b946573d9e6181078c2c26d4ca78a319f779cb" translate="yes" xml:space="preserve">
          <source>Reflect.isExtensible</source>
          <target state="translated">Reflect.isExtensible</target>
        </trans-unit>
        <trans-unit id="9578443035eb8705bd126e9acab6f34b58453535" translate="yes" xml:space="preserve">
          <source>Reflect.preventExtensions</source>
          <target state="translated">Reflect.preventExtensions</target>
        </trans-unit>
        <trans-unit id="a5a0796157a708b39407cdcc3b1149e74aa1ba55" translate="yes" xml:space="preserve">
          <source>Reflect.setPrototypeOf</source>
          <target state="translated">Reflect.setPrototypeOf</target>
        </trans-unit>
        <trans-unit id="5a1a35c83df714211f74bb546dc5facc26363344" translate="yes" xml:space="preserve">
          <source>RegExp &lt;code&gt;u&lt;/code&gt; flag has two effects:</source>
          <target state="translated">RegExp &lt;code&gt;u&lt;/code&gt; フラグには2つの効果があります。</target>
        </trans-unit>
        <trans-unit id="bc019f867ae1e63caad1e171c9ac68f393022fd6" translate="yes" xml:space="preserve">
          <source>RegExp literals such as &lt;code&gt;(/abc/).test(var)&lt;/code&gt; to avoid conflicts with the &lt;a href=&quot;wrap-regex&quot;&gt;wrap-regex&lt;/a&gt; rule</source>
          <target state="translated">&lt;code&gt;(/abc/).test(var)&lt;/code&gt; などのRegExpリテラルは、&lt;a href=&quot;wrap-regex&quot;&gt;wrap-regex&lt;/a&gt;ルールとの競合を回避します</target>
        </trans-unit>
        <trans-unit id="7114653a737d7346ec01e388401a05144edff375" translate="yes" xml:space="preserve">
          <source>Regular expression literals, e.g., &lt;code&gt;/abc/u&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;/abc/u&lt;/code&gt; などの正規表現リテラル。</target>
        </trans-unit>
        <trans-unit id="a0ccd845025a375ba8f53989cf7554162e8cbfee" translate="yes" xml:space="preserve">
          <source>Regular expressions can be very complex and difficult to understand, which is why it's important to keep them as simple as possible in order to avoid mistakes. One of the more error-prone things you can do with a regular expression is to use more than one space, such as:</source>
          <target state="translated">正規表現は非常に複雑で理解するのが難しい場合があるので、ミスを避けるためにはできるだけシンプルにしておくことが重要です。正規表現で間違いやすいことの1つは、次のように複数のスペースを使用することです。</target>
        </trans-unit>
        <trans-unit id="73df01ef95fe676ecd6771adb485003ded6e2733" translate="yes" xml:space="preserve">
          <source>Related Rules</source>
          <target state="translated">関連ルール</target>
        </trans-unit>
        <trans-unit id="33749d1fd374471a64ca2130b8acf29edc1c7f83" translate="yes" xml:space="preserve">
          <source>Related rules</source>
          <target state="translated">関連ルール</target>
        </trans-unit>
        <trans-unit id="c8ca31e64125f97916f5430dc1a846a8fb66cb93" translate="yes" xml:space="preserve">
          <source>Relational Operators: &lt;code&gt;&quot;in&quot;&lt;/code&gt;, &lt;code&gt;&quot;instanceof&quot;&lt;/code&gt;</source>
          <target state="translated">関係演算子： &lt;code&gt;&quot;in&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;instanceof&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9e4f647ac04e2d41dbb5b8e09ff6b1cdb35b950d" translate="yes" xml:space="preserve">
          <source>Relative glob patterns</source>
          <target state="translated">相対的なグロブパターン</target>
        </trans-unit>
        <trans-unit id="e67d73e5c8870b0aee2e6a5b9e1177d2a9866243" translate="yes" xml:space="preserve">
          <source>Remember that ESLint is completely pluggable, which means you can create your own rules and distribute them using plugins. We did this on purpose because we don't want to be the gatekeepers for all possible rules. Even if we don't accept a rule into the core, that doesn't mean you can't have the exact rule that you want. See the &lt;a href=&quot;../working-with-rules&quot;&gt;working with rules&lt;/a&gt; and &lt;a href=&quot;../working-with-plugins&quot;&gt;working with plugins&lt;/a&gt; documentation for more information.</source>
          <target state="translated">ESLintは完全にプラグイン可能です。つまり、独自のルールを作成し、プラグインを使用してそれらを配布できます。これは、考えられるすべてのルールのゲートキーパーになりたくないためです。コアへのルールを受け入れなくても、必要なルールを正確に設定できないというわけではありません。詳細については&lt;a href=&quot;../working-with-rules&quot;&gt;、ルールの操作&lt;/a&gt;と&lt;a href=&quot;../working-with-plugins&quot;&gt;プラグインの操作の&lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="960f6a4b27df973ccb71be9fd4f6a93b7639f03e" translate="yes" xml:space="preserve">
          <source>Remove the severity from the schema</source>
          <target state="translated">スキーマから深刻度を削除する</target>
        </trans-unit>
        <trans-unit id="b5e77c5c02a90c01b16fea8f21a1083425ebe0e0" translate="yes" xml:space="preserve">
          <source>Removed</source>
          <target state="translated">Removed</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
