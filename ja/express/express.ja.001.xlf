<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="express">
    <body>
      <group id="express">
        <trans-unit id="82772fb274b426ca103a906a4cdb5fe75509c9c5" translate="yes" xml:space="preserve">
          <source>&quot;extended&quot;</source>
          <target state="translated">&quot;extended&quot;</target>
        </trans-unit>
        <trans-unit id="ceb7b4c4dcc301fcffa3a79f50225dd8d319789e" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2017 StrongLoop, IBM, and other expressjs.com contributors.</source>
          <target state="translated">&amp;copy;2017 StrongLoop、IBM、およびその他のexpressjs.com寄稿者。</target>
        </trans-unit>
        <trans-unit id="5e488a6a97202260e840272ab8794a2e4bbd2f41" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;allow&amp;rdquo; - No special treatment for dotfiles.</source>
          <target state="translated">「許可」-dotfileに対する特別な処理はありません。</target>
        </trans-unit>
        <trans-unit id="0d043713c2d20f3947236730e7d8fae3f720fb01" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;callback&amp;rdquo;</source>
          <target state="translated">&amp;ldquo;callback&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="58b5178e0e8c20ec97e2dc1c882fb68e4c38f1da" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;deny&amp;rdquo; - Deny a request for a dotfile, respond with &lt;code&gt;403&lt;/code&gt;, then call &lt;code&gt;next()&lt;/code&gt;.</source>
          <target state="translated">「deny」-dotfileのリクエストを拒否し、 &lt;code&gt;403&lt;/code&gt; で応答してから、 &lt;code&gt;next()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="c40c5bae8da6d62b6bb6755328eb17b6caffda0e" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;ignore&amp;rdquo;</source>
          <target state="translated">&amp;ldquo;ignore&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="0e784eeb8854bb66eef5f2830d5f04550d855bfe" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;ignore&amp;rdquo; - Act as if the dotfile does not exist, respond with &lt;code&gt;404&lt;/code&gt;, then call &lt;code&gt;next()&lt;/code&gt;.</source>
          <target state="translated">「無視」-dotfileが存在しないかのように動作し、 &lt;code&gt;404&lt;/code&gt; で応答してから、 &lt;code&gt;next()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="40b072ad25e8b72c62446e4981f54a5bfab18085" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;index.html&amp;rdquo;</source>
          <target state="translated">&amp;ldquo;index.html&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="a17fef7284f01b5469ecad66ec74c5f517f15eae" translate="yes" xml:space="preserve">
          <source>'/' (root path)</source>
          <target state="translated">'/' (ルートパス)</target>
        </trans-unit>
        <trans-unit id="4f18fdaf28bbaa5f26f0efd4d973dac1bdaf7362" translate="yes" xml:space="preserve">
          <source>1. Developing template engines for Express</source>
          <target state="translated">1.Express用テンプレートエンジンの開発</target>
        </trans-unit>
        <trans-unit id="6b2aba740d7c38d220ab5f8d054bef8e922990ce" translate="yes" xml:space="preserve">
          <source>1. Installing</source>
          <target state="translated">1.インストール</target>
        </trans-unit>
        <trans-unit id="811baf41619d43b160d4112a6be6587d23b8dcb0" translate="yes" xml:space="preserve">
          <source>1. Routing</source>
          <target state="translated">1.ルーティング</target>
        </trans-unit>
        <trans-unit id="f9b4775815c53cb327631d9f486b0a25024e5938" translate="yes" xml:space="preserve">
          <source>10. Database integration</source>
          <target state="translated">10.データベースの統合</target>
        </trans-unit>
        <trans-unit id="17df6e02f977b07b07d0190598e8755748c61028" translate="yes" xml:space="preserve">
          <source>2. Hello world example</source>
          <target state="translated">2.ハローワールドの例</target>
        </trans-unit>
        <trans-unit id="67a2c4d0f99dd2da7c608e4bd743c298443afc1c" translate="yes" xml:space="preserve">
          <source>2. Process managers for Express apps</source>
          <target state="translated">2.Expressアプリのプロセスマネージャー</target>
        </trans-unit>
        <trans-unit id="c7d9350597393f0dabf7eb749bfab112e145764f" translate="yes" xml:space="preserve">
          <source>2. Writing middleware for use in Express apps</source>
          <target state="translated">2.Expressアプリで使用するためのミドルウェアを書く</target>
        </trans-unit>
        <trans-unit id="38c7842feedd87de1e2a0162d1a17260a6d9aefb" translate="yes" xml:space="preserve">
          <source>3. Express application generator</source>
          <target state="translated">3.エクスプレスアプリケーションジェネレータ</target>
        </trans-unit>
        <trans-unit id="6cc8b6cd1790f0fabb8f15697fa3387360be5852" translate="yes" xml:space="preserve">
          <source>3. Security updates</source>
          <target state="translated">3.セキュリティアップデート</target>
        </trans-unit>
        <trans-unit id="b4423a00d59bd655d33fd6c15827d8d487664d1e" translate="yes" xml:space="preserve">
          <source>3. Using middleware</source>
          <target state="translated">3.ミドルウェアの利用</target>
        </trans-unit>
        <trans-unit id="baf4af1c92b9431d9d7938826a292c4edcb69819" translate="yes" xml:space="preserve">
          <source>3.16.0</source>
          <target state="translated">3.16.0</target>
        </trans-unit>
        <trans-unit id="1d86b586c3098498174b02c68bab55a0cb956014" translate="yes" xml:space="preserve">
          <source>3.16.10</source>
          <target state="translated">3.16.10</target>
        </trans-unit>
        <trans-unit id="424257104153917e8e6f388584332d0e039aacfa" translate="yes" xml:space="preserve">
          <source>3.16.6</source>
          <target state="translated">3.16.6</target>
        </trans-unit>
        <trans-unit id="dc8df538e1a9a04b434e0bf21b9131541ac733ac" translate="yes" xml:space="preserve">
          <source>3.19.0</source>
          <target state="translated">3.19.0</target>
        </trans-unit>
        <trans-unit id="726e67dfcb49919a9bc0f209e70225e8ea69843e" translate="yes" xml:space="preserve">
          <source>3.19.1</source>
          <target state="translated">3.19.1</target>
        </trans-unit>
        <trans-unit id="3a8e01bbd716628be7b89f1ec085442592846654" translate="yes" xml:space="preserve">
          <source>3.3.0</source>
          <target state="translated">3.3.0</target>
        </trans-unit>
        <trans-unit id="2a75ee1c8b691fdb43e2c8e24304e6a3ce742c4e" translate="yes" xml:space="preserve">
          <source>3.x</source>
          <target state="translated">3.x</target>
        </trans-unit>
        <trans-unit id="645d7cd0d89ce1916d1a3768558807fcf90fc4f2" translate="yes" xml:space="preserve">
          <source>4. Basic routing</source>
          <target state="translated">4.基本的なルーティング</target>
        </trans-unit>
        <trans-unit id="3ed5eba420c9ff2ff459192a695169a55e8b3d01" translate="yes" xml:space="preserve">
          <source>4. Production Best Practices: Security</source>
          <target state="translated">4.生産のベストプラクティス。セキュリティ</target>
        </trans-unit>
        <trans-unit id="2c38c97e0ec6a50d8be62a184f513ad13cfeb64e" translate="yes" xml:space="preserve">
          <source>4. Using template engines with Express</source>
          <target state="translated">4.Expressでテンプレートエンジンを使う</target>
        </trans-unit>
        <trans-unit id="fba90fa57ee2b5dbb2faec1c33e96813ccb14fd5" translate="yes" xml:space="preserve">
          <source>4.10.7</source>
          <target state="translated">4.10.7</target>
        </trans-unit>
        <trans-unit id="291e357ce96dde2c46df4a84e44fd1d04ed7cb73" translate="yes" xml:space="preserve">
          <source>4.11.1</source>
          <target state="translated">4.11.1</target>
        </trans-unit>
        <trans-unit id="cf32739ccdf9900e27611336c93027a7d59f0e18" translate="yes" xml:space="preserve">
          <source>4.15.2</source>
          <target state="translated">4.15.2</target>
        </trans-unit>
        <trans-unit id="64353c986633a5f5a934550290d65f79b2dadaf3" translate="yes" xml:space="preserve">
          <source>4.15.3</source>
          <target state="translated">4.15.3</target>
        </trans-unit>
        <trans-unit id="a75744f8a36111a23dd390952a11271415b968dd" translate="yes" xml:space="preserve">
          <source>4.15.5</source>
          <target state="translated">4.15.5</target>
        </trans-unit>
        <trans-unit id="ee49c41e728b7af9b4fa9de669951863a79a98b1" translate="yes" xml:space="preserve">
          <source>4.16.0</source>
          <target state="translated">4.16.0</target>
        </trans-unit>
        <trans-unit id="9c246e774133b218196eb640cfce4ffd05206b2b" translate="yes" xml:space="preserve">
          <source>4.8.0</source>
          <target state="translated">4.8.0</target>
        </trans-unit>
        <trans-unit id="22f3c084a338e7e16ec380b6b66c3ef5b4de7111" translate="yes" xml:space="preserve">
          <source>4.8.4</source>
          <target state="translated">4.8.4</target>
        </trans-unit>
        <trans-unit id="509ef1ec5246e64eae8e05acb9f3b776cdba270a" translate="yes" xml:space="preserve">
          <source>4.8.8</source>
          <target state="translated">4.8.8</target>
        </trans-unit>
        <trans-unit id="e84cb7901bfc0c77ad7acf3cc599c644e3b8fcf6" translate="yes" xml:space="preserve">
          <source>4.x</source>
          <target state="translated">4.x</target>
        </trans-unit>
        <trans-unit id="fa8f0e356b73b7ae0ed85184c607bc640e54a95d" translate="yes" xml:space="preserve">
          <source>5. Error Handling</source>
          <target state="translated">5.エラー処理</target>
        </trans-unit>
        <trans-unit id="3c4b1edc26c1e5385a7d1f2de43e0d94dd3ed486" translate="yes" xml:space="preserve">
          <source>5. Production best practices: performance and reliability</source>
          <target state="translated">5.生産のベストプラクティス:性能と信頼性</target>
        </trans-unit>
        <trans-unit id="9212540982208fd6ec1065c307eecdc320f52c2e" translate="yes" xml:space="preserve">
          <source>5. Serving static files in Express</source>
          <target state="translated">5.5.Expressでの静的ファイルのサーブ</target>
        </trans-unit>
        <trans-unit id="fb071d8b575d91069a5f152b5a24037131fde3d7" translate="yes" xml:space="preserve">
          <source>6. Debugging Express</source>
          <target state="translated">6.デバッグエクスプレス</target>
        </trans-unit>
        <trans-unit id="b4c73b1ffef51dd7026e3246012f30a3b57f0234" translate="yes" xml:space="preserve">
          <source>6. FAQ</source>
          <target state="translated">6.よくある質問</target>
        </trans-unit>
        <trans-unit id="48c272c3d3eb217411cdffba94d0a0931deff26a" translate="yes" xml:space="preserve">
          <source>6. Health Checks and Graceful Shutdown</source>
          <target state="translated">6.健康診断と潔くシャットダウン</target>
        </trans-unit>
        <trans-unit id="29bb9bc3421c82c3d72294089ef3e10da62e626a" translate="yes" xml:space="preserve">
          <source>7. Express behind proxies</source>
          <target state="translated">7.プロキシの背後にある表現</target>
        </trans-unit>
        <trans-unit id="a8577429dc304f04f88fc50034ac37192dc79231" translate="yes" xml:space="preserve">
          <source>8. Moving to Express 4</source>
          <target state="translated">8.エクスプレス4への移行</target>
        </trans-unit>
        <trans-unit id="350e61e0a349f0771f45074f098028710242a484" translate="yes" xml:space="preserve">
          <source>9. Moving to Express 5</source>
          <target state="translated">9.エクスプレス5への移行</target>
        </trans-unit>
        <trans-unit id="b150cc387a1175c8ec4bd5a8eff46b333057996d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#app-gen&quot;&gt;Upgrading to the Express 4 app generator&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#app-gen&quot;&gt;Express 4アプリジェネレーターへのアップグレード&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="aec241eed907aa17d6951c9c47fe4302c7ae7d17" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#changes&quot;&gt;Changes in Express 4&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#changes&quot;&gt;Express 4での変更点&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="de78f219b12e11601ccef9587b35ae6641b48a3a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#core-changes&quot;&gt;Changes to Express core and middleware system.&lt;/a&gt; The dependencies on Connect and built-in middleware were removed, so you must add middleware yourself.</source>
          <target state="translated">&lt;a href=&quot;#core-changes&quot;&gt;Expressコアおよびミドルウェアシステムの変更。&lt;/a&gt;Connectと組み込みミドルウェアへの依存関係が削除されたため、ミドルウェアを自分で追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="85467d7b732ba0edeac677c523265d0f94b88355" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#example-migration&quot;&gt;An example&lt;/a&gt; of migrating an Express 3 app to Express 4.</source>
          <target state="translated">&lt;a href=&quot;#example-migration&quot;&gt;&lt;/a&gt;Express 3アプリをExpress 4に移行する例。</target>
        </trans-unit>
        <trans-unit id="1c5f2e81338b96dce8b57219ace3fd2961a4b9a8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../index#express.json&quot;&gt;express.json&lt;/a&gt; parses incoming requests with JSON payloads. &lt;strong&gt;NOTE: Available with Express 4.16.0+&lt;/strong&gt;</source>
          <target state="translated">&lt;a href=&quot;../index#express.json&quot;&gt;express.json&lt;/a&gt;は、JSONペイロードを使用して着信リクエストを解析します。&lt;strong&gt;注：Express 4.16.0以降で利用可能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="332d1f391923a357eeb17b30ee6e9bd25902bab6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../index#express.static&quot;&gt;express.static&lt;/a&gt; serves static assets such as HTML files, images, and so on.</source>
          <target state="translated">&lt;a href=&quot;../index#express.static&quot;&gt;express.static&lt;/a&gt;は、HTMLファイル、画像などの静的アセットを提供します。</target>
        </trans-unit>
        <trans-unit id="dc53b7d35cb0907289d39a5a9a81c7280a88acd8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../index#express.urlencoded&quot;&gt;express.urlencoded&lt;/a&gt; parses incoming requests with URL-encoded payloads. &lt;strong&gt;NOTE: Available with Express 4.16.0+&lt;/strong&gt;</source>
          <target state="translated">&lt;a href=&quot;../index#express.urlencoded&quot;&gt;express.urlencoded&lt;/a&gt;は、URLエンコードされたペイロードを持つ着信リクエストを解析します。&lt;strong&gt;注：Express 4.16.0以降で利用可能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6607d56c1e6b000b90ba04d404bd1e446fe98767" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://apmblog.dynatrace.com/2015/07/22/the-drastic-effects-of-omitting-node_env-in-your-express-js-applications/&quot;&gt;Tests indicate&lt;/a&gt; that just doing this can improve app performance by a factor of three!</source>
          <target state="translated">&lt;a href=&quot;http://apmblog.dynatrace.com/2015/07/22/the-drastic-effects-of-omitting-node_env-in-your-express-js-applications/&quot;&gt;テストでは&lt;/a&gt;、これを実行するだけでアプリのパフォーマンスを3倍に向上できることが示されています。</target>
        </trans-unit>
        <trans-unit id="cf19770f782e1efdfb1470fdec83e19051567e2c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://docs.strongloop.com/display/SLC/Using+Process+Manager&quot;&gt;Using StrongLoop Process Manager&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://docs.strongloop.com/display/SLC/Using+Process+Manager&quot;&gt;StrongLoop Process Managerの使用&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d0d3de7700db4706b7dd97676722f8604e911eac" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_ETag&quot;&gt;More about the HTTP ETag header&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_ETag&quot;&gt;HTTP ETagヘッダーの詳細&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="782c5f8c9b4602abbc4dff0c6d65621e952361c8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/expressjs/body-parser&quot;&gt;body-parser&lt;/a&gt; + &lt;a href=&quot;https://github.com/expressjs/multer&quot;&gt;multer&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/expressjs/body-parser&quot;&gt;ボディパーサー&lt;/a&gt; + &lt;a href=&quot;https://github.com/expressjs/multer&quot;&gt;マルター&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d6c58a35521dd742ec419c194564119c9f0e2957" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/godaddy/terminus&quot;&gt;Terminus&lt;/a&gt; is an open-source project that adds health checks and graceful shutdown to your application to eliminate the need to write boilerplate code. You just provide the cleanup logic for graceful shutdowns and the health check logic for health checks, and terminus handles the rest.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/godaddy/terminus&quot;&gt;Terminus&lt;/a&gt;は、ボイラープレートコードを記述する必要をなくすために、アプリケーションにヘルスチェックとグレースフルシャットダウンを追加するオープンソースプロジェクトです。正常なシャットダウンのためのクリーンアップロジックとヘルスチェックのためのヘルスチェックロジックを提供するだけで、終端が残りを処理します。</target>
        </trans-unit>
        <trans-unit id="e24a1393c99ed60d386973b370428e1a1a3e5c33" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/helmetjs/csp&quot;&gt;csp&lt;/a&gt; sets the &lt;code&gt;Content-Security-Policy&lt;/code&gt; header to help prevent cross-site scripting attacks and other cross-site injections.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/helmetjs/csp&quot;&gt;csp&lt;/a&gt;は &lt;code&gt;Content-Security-Policy&lt;/code&gt; ヘッダーを設定して、クロスサイトスクリプティング攻撃やその他のクロスサイトインジェクションを防止します。</target>
        </trans-unit>
        <trans-unit id="d8fafe9630c7a2c3edb7d54fc0983df733a5451b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/helmetjs/dont-sniff-mimetype&quot;&gt;noSniff&lt;/a&gt; sets &lt;code&gt;X-Content-Type-Options&lt;/code&gt; to prevent browsers from MIME-sniffing a response away from the declared content-type.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/helmetjs/dont-sniff-mimetype&quot;&gt;noSniff&lt;/a&gt;は &lt;code&gt;X-Content-Type-Options&lt;/code&gt; を設定して、ブラウザが宣言されたcontent-typeから離れてMIMEスニッフィングを行わないようにします。</target>
        </trans-unit>
        <trans-unit id="998fd1d2810a66da86c74abd7ebe53e08c637efb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/helmetjs/frameguard&quot;&gt;frameguard&lt;/a&gt; sets the &lt;code&gt;X-Frame-Options&lt;/code&gt; header to provide &lt;a href=&quot;https://www.owasp.org/index.php/Clickjacking&quot;&gt;clickjacking&lt;/a&gt; protection.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/helmetjs/frameguard&quot;&gt;frameguardは&lt;/a&gt;セット &lt;code&gt;X-Frame-Options&lt;/code&gt; を提供するために、ヘッダーを&lt;a href=&quot;https://www.owasp.org/index.php/Clickjacking&quot;&gt;クリックジャッキング&lt;/a&gt;保護を。</target>
        </trans-unit>
        <trans-unit id="e792b8ab50efbbea817d69af9af8e5b13ea1e7d0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/helmetjs/hide-powered-by&quot;&gt;hidePoweredBy&lt;/a&gt; removes the &lt;code&gt;X-Powered-By&lt;/code&gt; header.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/helmetjs/hide-powered-by&quot;&gt;hidePoweredBy&lt;/a&gt;は、 &lt;code&gt;X-Powered-By&lt;/code&gt; ヘッダーを削除します。</target>
        </trans-unit>
        <trans-unit id="0bdae4dbfa85f3ca57d805f967693e0ac71207e3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/helmetjs/hpkp&quot;&gt;hpkp&lt;/a&gt; Adds &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Public_Key_Pinning&quot;&gt;Public Key Pinning&lt;/a&gt; headers to prevent man-in-the-middle attacks with forged certificates.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/helmetjs/hpkp&quot;&gt;hpkp &lt;/a&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Public_Key_Pinning&quot;&gt;公開鍵ピニング&lt;/a&gt;ヘッダーを追加して、偽造された証明書による中間者攻撃を防止します。</target>
        </trans-unit>
        <trans-unit id="403defe58d222fbd5e859404d05b7f0be18cbb6c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/helmetjs/hsts&quot;&gt;hsts&lt;/a&gt; sets &lt;code&gt;Strict-Transport-Security&lt;/code&gt; header that enforces secure (HTTP over SSL/TLS) connections to the server.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/helmetjs/hsts&quot;&gt;hsts&lt;/a&gt;は、サーバーへのセキュア（HTTP over SSL / TLS）接続を実施する &lt;code&gt;Strict-Transport-Security&lt;/code&gt; ヘッダーを設定します。</target>
        </trans-unit>
        <trans-unit id="18cc1793663b618f035ac09dccb6af43c5ad82e4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/helmetjs/ienoopen&quot;&gt;ieNoOpen&lt;/a&gt; sets &lt;code&gt;X-Download-Options&lt;/code&gt; for IE8+.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/helmetjs/ienoopen&quot;&gt;ieNoOpen&lt;/a&gt;はIE8 +の &lt;code&gt;X-Download-Options&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="ca592111ffd154015e645b2bdfd83555d5da0dc0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/helmetjs/nocache&quot;&gt;noCache&lt;/a&gt; sets &lt;code&gt;Cache-Control&lt;/code&gt; and Pragma headers to disable client-side caching.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/helmetjs/nocache&quot;&gt;noCache&lt;/a&gt;は、 &lt;code&gt;Cache-Control&lt;/code&gt; およびPragmaヘッダーを設定して、クライアント側のキャッシュを無効にします。</target>
        </trans-unit>
        <trans-unit id="81d82c3f50eb26a66d91a728441b7fcd6f4ad886" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/helmetjs/x-xss-protection&quot;&gt;xssFilter&lt;/a&gt; sets &lt;code&gt;X-XSS-Protection&lt;/code&gt; to enable the Cross-site scripting (XSS) filter in most recent web browsers.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/helmetjs/x-xss-protection&quot;&gt;xssFilter&lt;/a&gt;は、最新のWebブラウザーでクロスサイトスクリプティング（XSS）フィルターを有効にするように &lt;code&gt;X-XSS-Protection&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="b229b8d1287e1c931ea8b28f1ccc511d5abb3431" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://strongloop.com/strongblog/robust-node-applications-error-handling/&quot;&gt;Building Robust Node Applications: Error Handling&lt;/a&gt; (StrongLoop blog)</source>
          <target state="translated">&lt;a href=&quot;https://strongloop.com/strongblog/robust-node-applications-error-handling/&quot;&gt;堅牢なノードアプリケーションの構築：エラー処理&lt;/a&gt;（StrongLoopブログ）</target>
        </trans-unit>
        <trans-unit id="a2b485dde752f28cdf659fefbb6255a40fbf3891" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.npmjs.com/package/cookie-session&quot;&gt;cookie-session&lt;/a&gt; that replaces &lt;code&gt;express.cookieSession&lt;/code&gt; middleware built-in to Express 3.x.</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/cookie-session&quot;&gt;&lt;/a&gt;Express 3.xに組み込まれている &lt;code&gt;express.cookieSession&lt;/code&gt; ミドルウェアを置き換えるcookie-session。</target>
        </trans-unit>
        <trans-unit id="07af77aa91fc5619759b0db1f90bbd136a701e35" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.npmjs.com/package/express-session&quot;&gt;express-session&lt;/a&gt; that replaces &lt;code&gt;express.session&lt;/code&gt; middleware built-in to Express 3.x.</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/express-session&quot;&gt;&lt;/a&gt;Express 3.xに組み込まれている &lt;code&gt;express.session&lt;/code&gt; ミドルウェアを置き換えるexpress-session。</target>
        </trans-unit>
        <trans-unit id="990f3a311240ff3da689328702904f0d79c23435" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.npmjs.com/package/helmet&quot;&gt;Helmet&lt;/a&gt; can help protect your app from some well-known web vulnerabilities by setting HTTP headers appropriately.</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/helmet&quot;&gt;Helmet&lt;/a&gt;は、HTTPヘッダーを適切に設定することで、よく知られたWebの脆弱性からアプリを保護するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="27e0cef6c350929b9bc18478b7ab0efc18ff2a84" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;NOTE&lt;/b&gt;: Sub-apps</source>
          <target state="translated">&lt;b&gt;注&lt;/b&gt;：サブアプリ</target>
        </trans-unit>
        <trans-unit id="b4cb5373c927ba606f727cc51fa6d6cd468a018f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;NOTE&lt;/b&gt;: Sub-apps will inherit the value of this setting.</source>
          <target state="translated">&lt;b&gt;注&lt;/b&gt;：サブアプリはこの設定の値を継承します。</target>
        </trans-unit>
        <trans-unit id="bf33d8dba55868bf533b5c04389a3c29d8965386" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;NOTE&lt;/b&gt;: Sub-apps will not inherit the value of this setting in production (when `NODE_ENV` is &quot;production&quot;).</source>
          <target state="translated">&lt;b&gt;注&lt;/b&gt;：サブアプリは本番環境でこの設定の値を継承しません（ `NODE_ENV`が&quot; production &quot;の場合）。</target>
        </trans-unit>
        <trans-unit id="151505b4fa15bee14a6f2eb556f4919d059ed05d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Note&lt;/b&gt;: Disabling the &lt;code&gt;X-Powered-By header&lt;/code&gt; does not prevent a sophisticated attacker from determining that an app is running Express. It may discourage a casual exploit, but there are other ways to determine an app is running Express.</source>
          <target state="translated">&lt;b&gt;注&lt;/b&gt;： &lt;code&gt;X-Powered-By header&lt;/code&gt; 無効にしても、高度な攻撃者がアプリがExpressを実行していると判断することはできます。偶発的な悪用を阻止する可能性がありますが、アプリがExpressを実行していることを確認する他の方法があります。</target>
        </trans-unit>
        <trans-unit id="a8b6c7236febfb8e90718ee5c98c8618606ec946" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Note&lt;/b&gt;: If you believe you have discovered a security vulnerability in Express, please see &lt;a href=&quot;http://expressjs.com/en/resources/contributing.html#security-policies-and-procedures&quot;&gt;Security Policies and Procedures&lt;/a&gt;.</source>
          <target state="translated">&lt;b&gt;注&lt;/b&gt;：Expressにセキュリティの脆弱性を発見したと思われる場合は、セキュリティの&lt;a href=&quot;http://expressjs.com/en/resources/contributing.html#security-policies-and-procedures&quot;&gt;ポリシーと手順&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="b5f7b2fa8526d17c2761643994fa57736a04a85b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-1&lt;/code&gt; signals an unsatisfiable range</source>
          <target state="translated">&lt;code&gt;-1&lt;/code&gt; は、満足できない範囲を示します</target>
        </trans-unit>
        <trans-unit id="5ff8d82cfe54008d39bb9560274545f86cc3b1c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-2&lt;/code&gt; signals a malformed header string</source>
          <target state="translated">&lt;code&gt;-2&lt;/code&gt; は不正なヘッダー文字列を示します</target>
        </trans-unit>
        <trans-unit id="0e305f9446de72950d2455db5e0ed9a48ec3fe70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HANDLER&lt;/code&gt; is the function executed when the route is matched.</source>
          <target state="translated">&lt;code&gt;HANDLER&lt;/code&gt; は、ルートが一致したときに実行される機能です。</target>
        </trans-unit>
        <trans-unit id="21253ea9c54330d7cc9d1097c0861ce0032246aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;METHOD&lt;/code&gt; is an &lt;a href=&quot;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods&quot;&gt;HTTP request method&lt;/a&gt;, in lowercase.</source>
          <target state="translated">&lt;code&gt;METHOD&lt;/code&gt; は小文字の&lt;a href=&quot;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods&quot;&gt;HTTPリクエストメソッド&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="3c7d988e0c72ca86047c2781a270b697504eb59c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PATH&lt;/code&gt; is a path on the server.</source>
          <target state="translated">&lt;code&gt;PATH&lt;/code&gt; はサーバー上のパスです。</target>
        </trans-unit>
        <trans-unit id="65dbc0e3703a9d43a9d7e6f6c89ec9e66415cca6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Range&lt;/code&gt; header parser.</source>
          <target state="translated">&lt;code&gt;Range&lt;/code&gt; ヘッダーパーサー。</target>
        </trans-unit>
        <trans-unit id="ef42330685f0dbbfaf5d58c39fcffd960f4cae39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;X-Forwarded-Proto&lt;/code&gt; can be set by the reverse proxy to tell the app whether it is &lt;code&gt;https&lt;/code&gt; or &lt;code&gt;http&lt;/code&gt; or even an invalid name. This value is reflected by &lt;a href=&quot;http://expressjs.com/en/api.html#req.protocol&quot;&gt;req.protocol&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;X-Forwarded-Proto&lt;/code&gt; をリバースプロキシで設定して、アプリが &lt;code&gt;https&lt;/code&gt; であるか &lt;code&gt;http&lt;/code&gt; であるか、または無効な名前であるかをアプリに伝えることができます。この値は&lt;a href=&quot;http://expressjs.com/en/api.html#req.protocol&quot;&gt;req.protocol&lt;/a&gt;によって反映されます。</target>
        </trans-unit>
        <trans-unit id="59a16f84d85d3d4b24f1dafe652be2a1d20cdbdb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;app.route()&lt;/code&gt; method</source>
          <target state="translated">&lt;code&gt;app.route()&lt;/code&gt; メソッド</target>
        </trans-unit>
        <trans-unit id="90465936294152a8e63f64540f4c97468f25086f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;app.use&lt;/code&gt; accepts parameters</source>
          <target state="translated">&lt;code&gt;app.use&lt;/code&gt; はパラメーターを受け入れます</target>
        </trans-unit>
        <trans-unit id="13fccfb5ad591cfa016b38aa2f32001281ecfed6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;app&lt;/code&gt; is an instance of &lt;code&gt;express&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;app&lt;/code&gt; は &lt;code&gt;express&lt;/code&gt; のインスタンスです。</target>
        </trans-unit>
        <trans-unit id="adbe8728c6166a80d83fa6bb7b4fe15ac29d0581" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callback&lt;/code&gt;, a callback function. If provided, the method returns both the possible error and rendered string, but does not perform an automated response. When an error occurs, the method invokes &lt;code&gt;next(err)&lt;/code&gt; internally.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 、コールバック関数。指定した場合、メソッドは考えられるエラーとレンダリングされた文字列の両方を返しますが、自動応答は実行しません。エラーが発生すると、メソッドは &lt;code&gt;next(err)&lt;/code&gt; を内部的に呼び出します。</target>
        </trans-unit>
        <trans-unit id="4742ebedca157519ec8aa4e296a1395a99a041da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;debug&lt;/code&gt; is like an augmented version of &lt;code&gt;console.log&lt;/code&gt;, but unlike &lt;code&gt;console.log&lt;/code&gt;, you don&amp;rsquo;t have to comment out &lt;code&gt;debug&lt;/code&gt; logs in production code. Logging is turned off by default and can be conditionally turned on by using the &lt;code&gt;DEBUG&lt;/code&gt; environment variable.</source>
          <target state="translated">&lt;code&gt;debug&lt;/code&gt; は &lt;code&gt;console.log&lt;/code&gt; の拡張バージョンに似ていますが、 &lt;code&gt;console.log&lt;/code&gt; とは異なり、本番用コードで &lt;code&gt;debug&lt;/code&gt; ログをコメント化する必要はありません。ロギングはデフォルトでオフになっており、 &lt;code&gt;DEBUG&lt;/code&gt; 環境変数を使用して条件付きでオンにすることができます。</target>
        </trans-unit>
        <trans-unit id="9a5843f1ce1ad1f2f1d576e7e40f42dae5e1f7a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;domain&lt;/code&gt; - indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next.</source>
          <target state="translated">&lt;code&gt;domain&lt;/code&gt; -Cookieのドメインを示します。これを使用して、URLが要求されているサーバーのドメインと比較します。一致する場合は、次にパス属性を確認します。</target>
        </trans-unit>
        <trans-unit id="f0dc47da00eee9bdee0a333aa1eb0a29555c355c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expires&lt;/code&gt; - use to set expiration date for persistent cookies.</source>
          <target state="translated">&lt;code&gt;expires&lt;/code&gt; -永続的なCookieの有効期限を設定するために使用します。</target>
        </trans-unit>
        <trans-unit id="c7a97cbbcc775c9f7b6e340e2bbfb33641126932" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;express.Router&lt;/code&gt; class</source>
          <target state="translated">&lt;code&gt;express.Router&lt;/code&gt; クラス</target>
        </trans-unit>
        <trans-unit id="6a71351e91089a48b5a3bed09f61b223593d16c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; (disabled)</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; （無効）</target>
        </trans-unit>
        <trans-unit id="8668678bfb185db45353bdd7e8542e7b3f106c3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; disables ETag altogether.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; はETagを完全に無効にします。</target>
        </trans-unit>
        <trans-unit id="54bdf58e6edeccc5d939d65c6e13320cc3cf3814" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;httpOnly&lt;/code&gt; - Ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks.</source>
          <target state="translated">&lt;code&gt;httpOnly&lt;/code&gt; -CookieがクライアントJavaScriptではなくHTTP（S）経由でのみ送信されるようにし、クロスサイトスクリプティング攻撃から保護するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="31781145007734e836ec4e56539b65b9ba9f0da6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;liveness&lt;/code&gt;, that determines when to restart a container.</source>
          <target state="translated">&lt;code&gt;liveness&lt;/code&gt; コンテナを再起動するタイミングを決定する活性。</target>
        </trans-unit>
        <trans-unit id="423d38adc55135e36dfcccd57ae144bf0106cccf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;locals&lt;/code&gt;, an object whose properties define local variables for the view.</source>
          <target state="translated">&lt;code&gt;locals&lt;/code&gt; は、プロパティがビューのローカル変数を定義するオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="22085d8c6f9255c4caa97f98da40b8666e31096d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;next&lt;/code&gt;, indicating the next middleware function.</source>
          <target state="translated">&lt;code&gt;next&lt;/code&gt; 、次のミドルウェア機能を示します。</target>
        </trans-unit>
        <trans-unit id="9a2d4fb2553c866fdb3f00c6c8e0877533726fdd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path&lt;/code&gt; - indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; -Cookieのパスを示します。これを使用して、要求パスと比較します。これとドメインが一致する場合は、リクエストでCookieを送信します。</target>
        </trans-unit>
        <trans-unit id="a1f8ed9bbbbba79d6dcc938f1c7337d2b35cf5ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path&lt;/code&gt;, the file path that is being sent.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 、送信されるファイルパス。</target>
        </trans-unit>
        <trans-unit id="14df7e6276f029b3fb06a5ed3d8ddb1d4708c029" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;process.env.NODE_ENV&lt;/code&gt; (&lt;code&gt;NODE_ENV&lt;/code&gt; environment variable) or &amp;ldquo;development&amp;rdquo; if &lt;code&gt;NODE_ENV&lt;/code&gt; is not set.</source>
          <target state="translated">&lt;code&gt;process.env.NODE_ENV&lt;/code&gt; （ &lt;code&gt;NODE_ENV&lt;/code&gt; 環境変数）または &lt;code&gt;NODE_ENV&lt;/code&gt; が設定されていない場合は「開発」。</target>
        </trans-unit>
        <trans-unit id="69e61828a9616ae698b434fe009ed7579bc92375" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;readiness&lt;/code&gt;, that determines when a container is ready to start accepting traffic. When a pod is not ready, it is removed from the service load balancers.</source>
          <target state="translated">&lt;code&gt;readiness&lt;/code&gt; は、コンテナがトラフィックの受け入れを開始する準備ができた時期を決定します。ポッドの準備ができていない場合、ポッドはサービスロードバランサーから削除されます。</target>
        </trans-unit>
        <trans-unit id="d51caca592e50db03889ebf871577ace8e15e79d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;req.acceptsCharset()&lt;/code&gt; is replaced by &lt;code&gt;req.acceptsCharsets()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;req.acceptsCharset()&lt;/code&gt; に置き換えられ &lt;code&gt;req.acceptsCharsets()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e692f620f5e30d4c09afcc1a29d0d5b6816894cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;req.acceptsEncoding()&lt;/code&gt; is replaced by &lt;code&gt;req.acceptsEncodings()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;req.acceptsEncoding()&lt;/code&gt; によって置き換えられます &lt;code&gt;req.acceptsEncodings()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="209c3ad7da150942fb852f1c5ab1ba114e34eb57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;req.acceptsLanguage()&lt;/code&gt; is replaced by &lt;code&gt;req.acceptsLanguages()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;req.acceptsLanguage()&lt;/code&gt; に置き換えられ &lt;code&gt;req.acceptsLanguages()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0843c232fcdf0dc7442d0c2ffc7801e553c3ce57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;req.url&lt;/code&gt; is not a native Express property, it is inherited from Node&amp;rsquo;s &lt;a href=&quot;https://nodejs.org/api/http.html#http_message_url&quot;&gt;http module&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;req.url&lt;/code&gt; はネイティブのExpressプロパティではなく、Nodeの&lt;a href=&quot;https://nodejs.org/api/http.html#http_message_url&quot;&gt;httpモジュール&lt;/a&gt;から継承されます。</target>
        </trans-unit>
        <trans-unit id="e79df7e39ba1b4f6d1c0ad97f7daadf2e024b84c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;req&lt;/code&gt;, the request object.</source>
          <target state="translated">&lt;code&gt;req&lt;/code&gt; 、リクエストオブジェクト。</target>
        </trans-unit>
        <trans-unit id="0dc7f251aeb9a1bcb8936d4b8d76140dcf44065e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;res.app&lt;/code&gt; is identical to the &lt;a href=&quot;#req.app&quot;&gt;req.app&lt;/a&gt; property in the request object.</source>
          <target state="translated">&lt;code&gt;res.app&lt;/code&gt; は、リクエストオブジェクトの&lt;a href=&quot;#req.app&quot;&gt;req.app&lt;/a&gt;プロパティと同じです。</target>
        </trans-unit>
        <trans-unit id="3949554b07d64f466c2da02d9406bd54a39bd434" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;res.append()&lt;/code&gt; is supported by Express v4.11.0+</source>
          <target state="translated">&lt;code&gt;res.append()&lt;/code&gt; はExpress v4.11.0以降でサポートされています</target>
        </trans-unit>
        <trans-unit id="0a0851fbc6cd5a0c9c0dc5cf80e8eb7f6b8c91b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;res.sendFile()&lt;/code&gt; is supported by Express v4.8.0 onwards.</source>
          <target state="translated">&lt;code&gt;res.sendFile()&lt;/code&gt; はExpress v4.8.0以降でサポートされています。</target>
        </trans-unit>
        <trans-unit id="f7a6886880746e745643740a5f27d07828693ede" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;res&lt;/code&gt;, the &lt;a href=&quot;#res&quot;&gt;response object&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;res&lt;/code&gt; 、&lt;a href=&quot;#res&quot;&gt;応答オブジェクト&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b3cd4585a14ec2ccde3594c7cae8243097372c58" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;res&lt;/code&gt;, the response object.</source>
          <target state="translated">&lt;code&gt;res&lt;/code&gt; 、応答オブジェクト。</target>
        </trans-unit>
        <trans-unit id="ce55256f1045b5c509146ac265c61407f9656562" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;restart myapp&lt;/code&gt; &amp;ndash; Restart the app</source>
          <target state="translated">&lt;code&gt;restart myapp&lt;/code&gt; 再起動します&amp;ndash;アプリを再起動します</target>
        </trans-unit>
        <trans-unit id="90653c61ccbb363e6a33dc5530c7ef46f6e1cfb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;secure&lt;/code&gt; - Ensures the browser only sends the cookie over HTTPS.</source>
          <target state="translated">&lt;code&gt;secure&lt;/code&gt; -ブラウザがHTTPS経由でのみCookieを送信するようにします。</target>
        </trans-unit>
        <trans-unit id="b85376026ab8f0707d9042fcdd56fb56add1f447" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start myapp&lt;/code&gt; &amp;ndash; Start the app</source>
          <target state="translated">&lt;code&gt;start myapp&lt;/code&gt; 起動します&amp;ndash;アプリを起動します</target>
        </trans-unit>
        <trans-unit id="5a037bdb19f6f5f31374b8e882c78314dcd120e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stat&lt;/code&gt;, the &lt;code&gt;stat&lt;/code&gt; object of the file that is being sent.</source>
          <target state="translated">&lt;code&gt;stat&lt;/code&gt; 、送信されるファイルの &lt;code&gt;stat&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="cad2f2bff6c55d5c50423c45fe0313c4ac37c699" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stop myapp&lt;/code&gt; &amp;ndash; Stop the app.</source>
          <target state="translated">&lt;code&gt;stop myapp&lt;/code&gt; &amp;ndash;アプリを停止します。</target>
        </trans-unit>
        <trans-unit id="2a837838b4026dc96d379720c33f3ec09d269376" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; enables weak ETag. This is the default setting.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; は弱いETagを有効にします。これがデフォルトの設定です。</target>
        </trans-unit>
        <trans-unit id="e6cf6c306dac01be7973c2d98f1dad2d4b7ce953" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; in production, otherwise undefined.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 本番環境ではtrue、それ以外は未定義。</target>
        </trans-unit>
        <trans-unit id="7de546236482668234b81b821d594230fc3c3ecc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;view engine&lt;/code&gt;, the template engine to use. For example, to use the Pug template engine: &lt;code&gt;app.set('view engine', 'pug')&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;view engine&lt;/code&gt; 、使用するテンプレートエンジン。たとえば、Pugテンプレートエンジンを使用するには： &lt;code&gt;app.set('view engine', 'pug')&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2b6f93d6e66e6da8e611e0a505e72cf0243e5afa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;views&lt;/code&gt;, the directory where the template files are located. Eg: &lt;code&gt;app.set('views', './views')&lt;/code&gt;. This defaults to the &lt;code&gt;views&lt;/code&gt; directory in the application root directory.</source>
          <target state="translated">&lt;code&gt;views&lt;/code&gt; 、テンプレートファイルが配置されているディレクトリ。例： &lt;code&gt;app.set('views', './views')&lt;/code&gt; 。デフォルトでは、アプリケーションのルートディレクトリの &lt;code&gt;views&lt;/code&gt; ディレクトリになります。</target>
        </trans-unit>
        <trans-unit id="227e31db773b1022014ebd6b0457643a9074df26" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Error Handling&lt;/em&gt; refers to how Express catches and processes errors that occur both synchronously and asynchronously. Express comes with a default error handler so you don&amp;rsquo;t need to write your own to get started.</source>
          <target state="translated">&lt;em&gt;エラー処理&lt;/em&gt;とは、同期および非同期の両方で発生するエラーをExpressがキャッチして処理する方法を指します。Expressにはデフォルトのエラーハンドラーが付属しているため、開始するために独自のエラーハンドラーを作成する必要はありません。</target>
        </trans-unit>
        <trans-unit id="313a0765988b12c7d6bd8e0251052115177ff28c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Middleware&lt;/em&gt; functions are functions that have access to the &lt;a href=&quot;../index#req&quot;&gt;request object&lt;/a&gt; (&lt;code&gt;req&lt;/code&gt;), the &lt;a href=&quot;../index#res&quot;&gt;response object&lt;/a&gt; (&lt;code&gt;res&lt;/code&gt;), and the &lt;code&gt;next&lt;/code&gt; function in the application&amp;rsquo;s request-response cycle. The &lt;code&gt;next&lt;/code&gt; function is a function in the Express router which, when invoked, executes the middleware succeeding the current middleware.</source>
          <target state="translated">&lt;em&gt;ミドルウェア&lt;/em&gt;関数は、&lt;a href=&quot;../index#req&quot;&gt;要求オブジェクト&lt;/a&gt;（ &lt;code&gt;req&lt;/code&gt; ）、&lt;a href=&quot;../index#res&quot;&gt;応答オブジェクト&lt;/a&gt;（ &lt;code&gt;res&lt;/code&gt; ）、およびアプリケーションの要求-応答サイクルの &lt;code&gt;next&lt;/code&gt; 関数にアクセスできる関数です。 &lt;code&gt;next&lt;/code&gt; 関数は、呼び出されると、現在のミドルウェアを後続ミドルウェアを実行Expressルータで機能です。</target>
        </trans-unit>
        <trans-unit id="4cef0e586aee889429cd3ed634d2056ea66df4d4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Middleware&lt;/em&gt; functions are functions that have access to the &lt;a href=&quot;../index#req&quot;&gt;request object&lt;/a&gt; (&lt;code&gt;req&lt;/code&gt;), the &lt;a href=&quot;../index#res&quot;&gt;response object&lt;/a&gt; (&lt;code&gt;res&lt;/code&gt;), and the next middleware function in the application&amp;rsquo;s request-response cycle. The next middleware function is commonly denoted by a variable named &lt;code&gt;next&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;ミドルウェア&lt;/em&gt;関数は、&lt;a href=&quot;../index#req&quot;&gt;要求オブジェクト&lt;/a&gt;（ &lt;code&gt;req&lt;/code&gt; ）、&lt;a href=&quot;../index#res&quot;&gt;応答オブジェクト&lt;/a&gt;（ &lt;code&gt;res&lt;/code&gt; ）、およびアプリケーションの要求-応答サイクルの次のミドルウェア関数にアクセスできる関数です。次のミドルウェア関数は通常、 &lt;code&gt;next&lt;/code&gt; という名前の変数で示されます。</target>
        </trans-unit>
        <trans-unit id="8aefad9bf057bf466065ee668967c898214cbed4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Routing&lt;/em&gt; refers to determining how an application responds to a client request to a particular endpoint, which is a URI (or path) and a specific HTTP request method (GET, POST, and so on).</source>
          <target state="translated">&lt;em&gt;ルーティング&lt;/em&gt;とは、URI（またはパス）と特定のHTTP要求メソッド（GET、POSTなど）である、特定のエンドポイントへのクライアント要求にアプリケーションがどのように応答するかを決定することです。</target>
        </trans-unit>
        <trans-unit id="b11801a24925add430152f1445ae8271c10d2c51" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Routing&lt;/em&gt; refers to how an application&amp;rsquo;s endpoints (URIs) respond to client requests. For an introduction to routing, see &lt;a href=&quot;../starter/basic-routing&quot;&gt;Basic routing&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;ルーティング&lt;/em&gt;とは、アプリケーションのエンドポイント（URI）がクライアント要求に応答する方法を指します。ルーティングの概要については、「&lt;a href=&quot;../starter/basic-routing&quot;&gt;基本的なルーティング&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="5454d0375d7ec69566c3f2ab2d3afc8555abd83d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Changed&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Changed&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="852d725222bcafd264b396a53e26612a7dc393ba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Error-handling middleware&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;エラー処理ミドルウェア&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b88f74e43c0912ff4d325bb1015b1e1f17c63fd4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Express 3.x IS NO LONGER MAINTAINED&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Express 3.xはメンテナンスされなくなりました&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="654d363a7527a4168f82eb4b3199a4c9078d91c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Improvements&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Improvements&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dabb7cae0474afc1ffc486536ad87da3a562d236" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/couchbase/couchnode&quot;&gt;couchnode&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;モジュール&lt;/strong&gt;：&lt;a href=&quot;https://github.com/couchbase/couchnode&quot;&gt;couchnode&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ea8da15268194ccc28005d761560d7fa90285dc3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/datastax/nodejs-driver&quot;&gt;cassandra-driver&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;モジュール&lt;/strong&gt;：&lt;a href=&quot;https://github.com/datastax/nodejs-driver&quot;&gt;cassandra-driver&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4340ea656c2a8e7ed39e0c840c093087ac38f5ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/dscape/nano&quot;&gt;nano&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;モジュール&lt;/strong&gt;：&lt;a href=&quot;https://github.com/dscape/nano&quot;&gt;nano&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d8454dac4641f1ac688283ef032729dc087aa14e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/elastic/elasticsearch-js&quot;&gt;elasticsearch&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;モジュール&lt;/strong&gt;：&lt;a href=&quot;https://github.com/elastic/elasticsearch-js&quot;&gt;elasticsearch&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="21b484042bec2ef656771ed20c205aac6050508c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/felixge/node-mysql/&quot;&gt;mysql&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;モジュール&lt;/strong&gt;：&lt;a href=&quot;https://github.com/felixge/node-mysql/&quot;&gt;mysql&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c0b550f7d45974dea3b1ac95939e4ab0b6a7e548" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/hacksparrow/apoc&quot;&gt;apoc&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;モジュール&lt;/strong&gt;：&lt;a href=&quot;https://github.com/hacksparrow/apoc&quot;&gt;apoc&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="293192bb45948147f02b09c51f38b4e0cfe8ab68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/mapbox/node-sqlite3&quot;&gt;sqlite3&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;モジュール&lt;/strong&gt;：&lt;a href=&quot;https://github.com/mapbox/node-sqlite3&quot;&gt;sqlite3&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="06448398afda08bb5cdbbfc4cff41e6216354433" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/mongodb/node-mongodb-native&quot;&gt;mongodb&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;モジュール&lt;/strong&gt;：&lt;a href=&quot;https://github.com/mongodb/node-mongodb-native&quot;&gt;mongodb&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5179a5dfc75ec7265f09c04d2f2a2f761aa2ba34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/mranney/node_redis&quot;&gt;redis&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;モジュール&lt;/strong&gt;：&lt;a href=&quot;https://github.com/mranney/node_redis&quot;&gt;redis&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b071a71aee4378c59dc8b7d7c8439c333f1427d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/oracle/node-oracledb&quot;&gt;oracledb&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;モジュール&lt;/strong&gt;：&lt;a href=&quot;https://github.com/oracle/node-oracledb&quot;&gt;oracledb&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1aa7f61b20b8d497a2fffa802b20bd66afc52db5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/rvagg/node-levelup&quot;&gt;levelup&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;モジュール&lt;/strong&gt;：&lt;a href=&quot;https://github.com/rvagg/node-levelup&quot;&gt;レベルアップ&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="747f15f2b6be327f8be2f6822aa102a9687ddb9b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/tediousjs/tedious&quot;&gt;tedious&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;モジュール&lt;/strong&gt;：&lt;a href=&quot;https://github.com/tediousjs/tedious&quot;&gt;面倒&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e2f54d8c195c7cfcdbafd5032225a116b6c83800" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.com/vitaly-t/pg-promise&quot;&gt;pg-promise&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;モジュール&lt;/strong&gt;：&lt;a href=&quot;https://github.com/vitaly-t/pg-promise&quot;&gt;pg-promise&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="100d21febb03dd8279f48192722ad6009d0b5ed4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt; The &lt;code&gt;view&lt;/code&gt; argument performs file system operations like reading a file from disk and evaluating Node.js modules, and as so for security reasons should not contain input from the end-user.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;view&lt;/code&gt; ようにセキュリティ上の理由は、エンドユーザからの入力を含むべきではないため、ディスクからファイルを読み取り、Node.jsのモジュールを評価する、などの引数を行うファイルシステム操作。</target>
        </trans-unit>
        <trans-unit id="4fc1597dfe992d87dcc418262208d7b520cc2ad4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;NOTE&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="02483d5a3acc9cd87e654d7dd1c17bffb518a6af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: Although these middleware functions are added via a particular router, &lt;em&gt;when&lt;/em&gt; they run is defined by the path they are attached to (not the router). Therefore, middleware added via one router may run for other routers if its routes match. For example, this code shows two different routers mounted on the same path:</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：これらのミドルウェア機能は特定のルーターを介して追加されますが、それらが実行される&lt;em&gt;とき&lt;/em&gt;は、ルーターではなく接続先のパスによって定義されます。そのため、あるルーターを介して追加されたミドルウェアは、ルートが一致する場合、他のルーターで実行される可能性があります。たとえば、次のコードは、同じパスにマウントされた2つの異なるルーターを示しています。</target>
        </trans-unit>
        <trans-unit id="29aef9716b5bcd1c3ce90f8ab42741548bbb9f11" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: If you believe you have discovered a security vulnerability in Express, please see &lt;a href=&quot;http://expressjs.com/en/resources/contributing.html#security-policies-and-procedures&quot;&gt;Security Policies and Procedures&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：Expressにセキュリティの脆弱性を発見したと思われる場合は、セキュリティ&lt;a href=&quot;http://expressjs.com/en/resources/contributing.html#security-policies-and-procedures&quot;&gt;ポリシーと手順&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="067afe59c5369af2ecc5365228588fe29b034395" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: These settings apply only to dynamic files, not static files. The &lt;a href=&quot;#express.static&quot;&gt;express.static&lt;/a&gt; middleware ignores these settings.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：これらの設定は動的ファイルにのみ適用され、静的ファイルには適用されません。&lt;a href=&quot;#express.static&quot;&gt;express.static&lt;/a&gt;ミドルウェアは、これらの設定を無視します。</target>
        </trans-unit>
        <trans-unit id="c219236be2354a0b1c0f685d1f785328e563f143" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: With the default value, it will not ignore files in a directory that begins with a dot.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：デフォルト値では、ドットで始まるディレクトリ内のファイルは無視されません。</target>
        </trans-unit>
        <trans-unit id="63fcf747477833a3c150fcbe36dc0253404dadb1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Jade has been renamed to &lt;a href=&quot;https://www.npmjs.com/package/pug&quot;&gt;Pug&lt;/a&gt;. You can continue to use Jade in your app, and it will work just fine. However if you want the latest updates to the template engine, you must replace Jade with Pug in your app.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：Jadeは&lt;a href=&quot;https://www.npmjs.com/package/pug&quot;&gt;Pugに&lt;/a&gt;名前が変更されました。アプリでJadeを使い続けることができ、それは問題なく動作します。ただし、テンプレートエンジンの最新の更新が必要な場合は、アプリでJadeをPugに置き換える必要があります。</target>
        </trans-unit>
        <trans-unit id="34cab5224d09d7570fcd45a88c384b4289bae90f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Removed methods and properties&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;削除されたメソッドとプロパティ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="825e3223ab8a79167886ad1a851c9efc93a66111" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;th&lt;/sup&gt; hop from the front-facing proxy server as the client.</source>
          <target state="translated">&lt;sup&gt;目&lt;/sup&gt;のクライアントとして前向きプロキシサーバーからホップ。</target>
        </trans-unit>
        <trans-unit id="6e8cf9b51fa0efc8bf55f02ba2146510457b07a8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;back&lt;/code&gt; redirection redirects the request back to the &lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_referer&quot;&gt;referer&lt;/a&gt;, defaulting to &lt;code&gt;/&lt;/code&gt; when the referer is missing.</source>
          <target state="translated">&lt;code&gt;back&lt;/code&gt; リダイレクトはに要求バックをリダイレクト&lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_referer&quot;&gt;リファラ&lt;/a&gt;をデフォルト、 &lt;code&gt;/&lt;/code&gt; リファラが欠落しているとき。</target>
        </trans-unit>
        <trans-unit id="a8a55ffc9eece1595b14c281ea06ae87c85d279a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;path&lt;/code&gt; value of &amp;ldquo;back&amp;rdquo; has a special meaning, it refers to the URL specified in the &lt;code&gt;Referer&lt;/code&gt; header of the request. If the &lt;code&gt;Referer&lt;/code&gt; header was not specified, it refers to &amp;ldquo;/&amp;rdquo;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 「戻る」の値は、それがで指定されたURLを参照し、特別な意味を持っている &lt;code&gt;Referer&lt;/code&gt; リクエストのヘッダ。 &lt;code&gt;Referer&lt;/code&gt; ヘッダーが指定されていない場合、「/」を参照します。</target>
        </trans-unit>
        <trans-unit id="d59dfcc6a5035ea151973a1e4b8863d0b01ac675" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;router&lt;/code&gt; object is an isolated instance of middleware and routes. You can think of it as a &amp;ldquo;mini-application,&amp;rdquo; capable only of performing middleware and routing functions. Every Express application has a built-in app router.</source>
          <target state="translated">&lt;code&gt;router&lt;/code&gt; オブジェクトは、ミドルウェアとルートの単離されたインスタンスです。ミドルウェアとルーティング機能のみを実行できる「ミニアプリケーション」と考えることができます。すべてのExpressアプリケーションには、組み込みのアプリルーターがあります。</target>
        </trans-unit>
        <trans-unit id="4f949b8b99c4692925f23d35d29f38e7bbf02338" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;template engine&lt;/em&gt; enables you to use static template files in your application. At runtime, the template engine replaces variables in a template file with actual values, and transforms the template into an HTML file sent to the client. This approach makes it easier to design an HTML page.</source>
          <target state="translated">&lt;em&gt;テンプレートエンジンを&lt;/em&gt;使用すると、アプリケーション内の静的テンプレートファイルを使用することができます。実行時に、テンプレートエンジンはテンプレートファイルの変数を実際の値に置き換え、テンプレートをクライアントに送信されるHTMLファイルに変換します。このアプローチにより、HTMLページの設計が容易になります。</target>
        </trans-unit>
        <trans-unit id="6b7961a7c5537a99b213be824954f48846b39765" translate="yes" xml:space="preserve">
          <source>A Boolean property that is &lt;code&gt;true&lt;/code&gt; if the request&amp;rsquo;s &lt;code&gt;X-Requested-With&lt;/code&gt; header field is &amp;ldquo;XMLHttpRequest&amp;rdquo;, indicating that the request was issued by a client library such as jQuery.</source>
          <target state="translated">リクエストの &lt;code&gt;X-Requested-With&lt;/code&gt; ヘッダーフィールドが「XMLHttpRequest」で &lt;code&gt;true&lt;/code&gt; 場合にtrueとなるブールプロパティ。リクエストがjQueryなどのクライアントライブラリによって発行されたことを示します。</target>
        </trans-unit>
        <trans-unit id="9fed5f66d90922c731a8fe856f209e942be6b504" translate="yes" xml:space="preserve">
          <source>A Boolean property that is true if a TLS connection is established. Equivalent to:</source>
          <target state="translated">TLS 接続が確立されている場合に真であることを示すブール値。に相当します。</target>
        </trans-unit>
        <trans-unit id="1a75f96535d0ecf7ad3f2c5c9c53b866fc8db4d1" translate="yes" xml:space="preserve">
          <source>A combination of all of the above.</source>
          <target state="translated">全てを組み合わせたもの。</target>
        </trans-unit>
        <trans-unit id="193e3dad8ae2b33f7e4840778404a86d966de7cf" translate="yes" xml:space="preserve">
          <source>A combination of independent functions and arrays of functions can handle a route. For example:</source>
          <target state="translated">独立した関数と関数の配列の組み合わせでルートを扱うことができます。例えば</target>
        </trans-unit>
        <trans-unit id="ddd5191f34f83990783dabcc9dbae1d282d52ecd" translate="yes" xml:space="preserve">
          <source>A custom query string parsing function will receive the complete query string, and must return an object of query keys and their values.</source>
          <target state="translated">カスタムのクエリ文字列解析関数は、完全なクエリ文字列を受け取り、クエリキーとその値のオブジェクトを返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="46930e0e80154ffd07d068f28fe391624e148057" translate="yes" xml:space="preserve">
          <source>A directory or an array of directories for the application's views. If an array, the views are looked up in the order they occur in the array.</source>
          <target state="translated">アプリケーションのビューのためのディレクトリまたはディレクトリの配列。配列の場合は、配列の中にある順にビューを検索します。</target>
        </trans-unit>
        <trans-unit id="40f63a8239a6492d8dce32081c2282f92cce46e7" translate="yes" xml:space="preserve">
          <source>A leading colon character (:) in the name for the &lt;code&gt;app.param(name, fn)&lt;/code&gt; function is a remnant of Express 3, and for the sake of backwards compatibility, Express 4 supported it with a deprecation notice. Express 5 will silently ignore it and use the name parameter without prefixing it with a colon.</source>
          <target state="translated">&lt;code&gt;app.param(name, fn)&lt;/code&gt; 関数の名前の先頭のコロン文字（:) はExpress 3の残りであり、下位互換性のために、Express 4は非推奨の通知でこれをサポートしました。Express 5は黙ってそれを無視し、コロンを前に付けずにnameパラメータを使用します。</target>
        </trans-unit>
        <trans-unit id="60941ea387d9f47246f86a217d44e0a8a122279e" translate="yes" xml:space="preserve">
          <source>A load balancer is usually a reverse proxy that orchestrates traffic to and from multiple application instances and servers. You can easily set up a load balancer for your app by using &lt;a href=&quot;http://nginx.org/en/docs/http/load_balancing.html&quot;&gt;Nginx&lt;/a&gt; or &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/an-introduction-to-haproxy-and-load-balancing-concepts&quot;&gt;HAProxy&lt;/a&gt;.</source>
          <target state="translated">ロードバランサーは通常、複数のアプリケーションインスタンスおよびサーバーとの間のトラフィックを調整するリバースプロキシです。&lt;a href=&quot;http://nginx.org/en/docs/http/load_balancing.html&quot;&gt;Nginx&lt;/a&gt;または&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/an-introduction-to-haproxy-and-load-balancing-concepts&quot;&gt;HAProxy&lt;/a&gt;を使用して、アプリのロードバランサーを簡単に設定できます。</target>
        </trans-unit>
        <trans-unit id="72e3418c1daceeebfd798c8446443521ccb8461d" translate="yes" xml:space="preserve">
          <source>A load balancer uses health checks to determine if an application instance is healthy and can accept requests. For example, &lt;a href=&quot;https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/&quot;&gt;Kubernetes has two health checks&lt;/a&gt;:</source>
          <target state="translated">ロードバランサーは、ヘルスチェックを使用して、アプリケーションインスタンスが正常でリクエストを受け入れることができるかどうかを判断します。たとえば、&lt;a href=&quot;https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/&quot;&gt;Kubernetesには2つのヘルスチェックがあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9436c73a732f1ca26e08496bc0f00abf85901340" translate="yes" xml:space="preserve">
          <source>A middleware function.</source>
          <target state="translated">ミドルウェア機能です。</target>
        </trans-unit>
        <trans-unit id="8ccb382345ef90199608d591c808e9a7346fabdc" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;body&lt;/code&gt; object containing the parsed data is populated on the &lt;code&gt;request&lt;/code&gt; object after the middleware (i.e. &lt;code&gt;req.body&lt;/code&gt;), or an empty object (&lt;code&gt;{}&lt;/code&gt;) if there was no body to parse, the &lt;code&gt;Content-Type&lt;/code&gt; was not matched, or an error occurred.</source>
          <target state="translated">新しい &lt;code&gt;body&lt;/code&gt; 解析されたデータを含むオブジェクトが上に移入され &lt;code&gt;request&lt;/code&gt; ミドルウェア（すなわち後のオブジェクト &lt;code&gt;req.body&lt;/code&gt; ）、または空のオブジェクト（ &lt;code&gt;{}&lt;/code&gt; ）解析への本体がなかった場合、 &lt;code&gt;Content-Type&lt;/code&gt; 一致し、またはされませんでしたエラーが発生しました。</target>
        </trans-unit>
        <trans-unit id="d2823499c630a696b388793baf596a31acf63142" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;body&lt;/code&gt; object containing the parsed data is populated on the &lt;code&gt;request&lt;/code&gt; object after the middleware (i.e. &lt;code&gt;req.body&lt;/code&gt;), or an empty object (&lt;code&gt;{}&lt;/code&gt;) if there was no body to parse, the &lt;code&gt;Content-Type&lt;/code&gt; was not matched, or an error occurred. This object will contain key-value pairs, where the value can be a string or array (when &lt;code&gt;extended&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;), or any type (when &lt;code&gt;extended&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;).</source>
          <target state="translated">新しい &lt;code&gt;body&lt;/code&gt; 解析されたデータを含むオブジェクトが上に移入され &lt;code&gt;request&lt;/code&gt; ミドルウェア（すなわち後のオブジェクト &lt;code&gt;req.body&lt;/code&gt; ）、または空のオブジェクト（ &lt;code&gt;{}&lt;/code&gt; ）解析への本体がなかった場合、 &lt;code&gt;Content-Type&lt;/code&gt; 一致し、またはされませんでしたエラーが発生しました。このオブジェクトにはキーと値のペアが含まれ、値は文字列または配列（ &lt;code&gt;extended&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; の場合）、または任意のタイプ（ &lt;code&gt;extended&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合）になります。</target>
        </trans-unit>
        <trans-unit id="97d452a6cb1370559254f98897e8a9ba7d499649" translate="yes" xml:space="preserve">
          <source>A new class, &lt;code&gt;express.Router&lt;/code&gt;, to create modular mountable route handlers.</source>
          <target state="translated">モジュラーマウント可能なルートハンドラーを作成するための新しいクラス &lt;code&gt;express.Router&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3cc937a685ea447599b4241d63390e81c64ada2f" translate="yes" xml:space="preserve">
          <source>A new method, &lt;code&gt;app.route()&lt;/code&gt;, to create chainable route handlers for a route path.</source>
          <target state="translated">ルートパスのチェーン可能なルートハンドラーを作成するための新しいメソッド &lt;code&gt;app.route()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="89c199d69e8b78edd3ce240270476eb7dc9e04c1" translate="yes" xml:space="preserve">
          <source>A param callback will be called only once in a request-response cycle, even if the parameter is matched in multiple routes, as shown in the following examples.</source>
          <target state="translated">以下の例のように、パラメータが複数のルートでマッチしていても、パラメタコールバックはリクエスト-レスポンスサイクルの中で一度だけ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="23dd5ad49f5a44cada097ad3097dc45d45e72495" translate="yes" xml:space="preserve">
          <source>A path pattern.</source>
          <target state="translated">パスパターン。</target>
        </trans-unit>
        <trans-unit id="699b669022b7626ad4b16bb6b497a9c8f2ded9b8" translate="yes" xml:space="preserve">
          <source>A process manager is somewhat like an application server: it&amp;rsquo;s a &amp;ldquo;container&amp;rdquo; for applications that facilitates deployment, provides high availability, and enables you to manage the application at runtime.</source>
          <target state="translated">プロセスマネージャーは、アプリケーションサーバーのようなものです。これは、展開を容易にし、高可用性を提供し、実行時にアプリケーションを管理できるようにする、アプリケーションの「コンテナー」です。</target>
        </trans-unit>
        <trans-unit id="fbaff52558fded378d7f9410df1805562da47262" translate="yes" xml:space="preserve">
          <source>A regular expression pattern to match paths.</source>
          <target state="translated">パスを一致させる正規表現パターン。</target>
        </trans-unit>
        <trans-unit id="887e75394832088aa1953a29686be70f2b3a74b3" translate="yes" xml:space="preserve">
          <source>A reverse proxy sits in front of a web app and performs supporting operations on the requests, apart from directing requests to the app. It can handle error pages, compression, caching, serving files, and load balancing among other things.</source>
          <target state="translated">リバースプロキシはウェブアプリの前に立ち、アプリへのリクエストを指示する以外に、リクエストのサポート操作を行います。エラーページ、圧縮、キャッシング、ファイルの提供、ロードバランシングなどを処理することができます。</target>
        </trans-unit>
        <trans-unit id="7fa82bbdf88240e7eea15273b926ee06b152bb66" translate="yes" xml:space="preserve">
          <source>A route method is derived from one of the HTTP methods, and is attached to an instance of the &lt;code&gt;express&lt;/code&gt; class.</source>
          <target state="translated">ルートメソッドはHTTPメソッドの1つから派生し、 &lt;code&gt;express&lt;/code&gt; クラスのインスタンスにアタッチされます。</target>
        </trans-unit>
        <trans-unit id="e30e06cb10d2cdfeb796e73d06a1abd9c8b69ebb" translate="yes" xml:space="preserve">
          <source>A route will match any path that follows its path immediately with a &amp;ldquo;&lt;code&gt;/&lt;/code&gt;&amp;rdquo;. For example: &lt;code&gt;app.use('/apple', ...)&lt;/code&gt; will match &amp;ldquo;/apple&amp;rdquo;, &amp;ldquo;/apple/images&amp;rdquo;, &amp;ldquo;/apple/images/news&amp;rdquo;, and so on.</source>
          <target state="translated">ルートは、「 &lt;code&gt;/&lt;/code&gt; 」ですぐに続くパスに一致します。例： &lt;code&gt;app.use('/apple', ...)&lt;/code&gt; は、「/ apple」、「/ apple / images」、「/ apple / images / news」などと一致します。</target>
        </trans-unit>
        <trans-unit id="40a300173081d5b6dd250e10d043a039cafcfe48" translate="yes" xml:space="preserve">
          <source>A router behaves like middleware itself, so you can use it as an argument to &lt;a href=&quot;#app.use&quot;&gt;app.use()&lt;/a&gt; or as the argument to another router&amp;rsquo;s &lt;a href=&quot;#router.use&quot;&gt;use()&lt;/a&gt; method.</source>
          <target state="translated">ルーターはミドルウェア自体のように動作するため、&lt;a href=&quot;#app.use&quot;&gt;app.use（）&lt;/a&gt;への引数として、または別のルーターの&lt;a href=&quot;#router.use&quot;&gt;use（）&lt;/a&gt;メソッドへの引数として使用できます。</target>
        </trans-unit>
        <trans-unit id="90b7d58381dd830b6ed0a22b31e3947435c5f907" translate="yes" xml:space="preserve">
          <source>A router is valid middleware.</source>
          <target state="translated">ルータは有効なミドルウェアです。</target>
        </trans-unit>
        <trans-unit id="fae0457d772c13f6ef9abc542542f7c427088e67" translate="yes" xml:space="preserve">
          <source>A series of middleware functions (separated by commas).</source>
          <target state="translated">ミドルウェアの一連の機能(カンマで区切られている)。</target>
        </trans-unit>
        <trans-unit id="6b49e87d5c250cf8ee285214237f575462d100b3" translate="yes" xml:space="preserve">
          <source>A single callback function can handle a route. For example:</source>
          <target state="translated">単一のコールバック関数でルートを処理することができます。例えば</target>
        </trans-unit>
        <trans-unit id="f98d95135c7ae62f83f7cb441bf77c309a4981eb" translate="yes" xml:space="preserve">
          <source>A string representing a path.</source>
          <target state="translated">パスを表す文字列。</target>
        </trans-unit>
        <trans-unit id="229b731ae67bffae5deb8ff18c4aa1a811db308a" translate="yes" xml:space="preserve">
          <source>A sub-app is an instance of &lt;code&gt;express&lt;/code&gt; that may be used for handling the request to a route.</source>
          <target state="translated">サブアプリは、ルートへのリクエストを処理するために使用できる &lt;code&gt;express&lt;/code&gt; インスタンスです。</target>
        </trans-unit>
        <trans-unit id="65b9a9cd5fe9230f62a223678e98843501d66a14" translate="yes" xml:space="preserve">
          <source>A synchronous function used for cookie value encoding. Defaults to &lt;code&gt;encodeURIComponent&lt;/code&gt;.</source>
          <target state="translated">Cookie値のエンコードに使用される同期関数。デフォルトは &lt;code&gt;encodeURIComponent&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1fafeecde20053b459296b14402cc5b0495f80d2" translate="yes" xml:space="preserve">
          <source>A systemd service configuration file is called a &lt;em&gt;unit file&lt;/em&gt;, with a filename ending in .service. Here&amp;rsquo;s an example unit file to manage a Node app directly (replace the bold text with values for your system and app):</source>
          <target state="translated">systemdサービス設定ファイルは&lt;em&gt;ユニットファイル&lt;/em&gt;と呼ばれ、&lt;em&gt;ファイル&lt;/em&gt;名の末尾は.serviceです。Nodeアプリを直接管理するためのユニットファイルの例を次に示します（太字のテキストをシステムとアプリの値に置き換えます）。</target>
        </trans-unit>
        <trans-unit id="3df94f5e981eebea83ceda2defe5a16f62424eca" translate="yes" xml:space="preserve">
          <source>Add callback triggers to &lt;a href=&quot;guide/routing#route-parameters&quot;&gt;route parameters&lt;/a&gt;, where &lt;code&gt;name&lt;/code&gt; is the name of the parameter or an array of them, and &lt;code&gt;callback&lt;/code&gt; is the callback function. The parameters of the callback function are the request object, the response object, the next middleware, the value of the parameter and the name of the parameter, in that order.</source>
          <target state="translated">&lt;a href=&quot;guide/routing#route-parameters&quot;&gt;ルートパラメータ&lt;/a&gt;にコールバックトリガーを追加します。ここで、 &lt;code&gt;name&lt;/code&gt; はパラメーターの名前またはその配列で、 &lt;code&gt;callback&lt;/code&gt; はコールバック関数です。コールバック関数のパラメーターは、要求オブジェクト、応答オブジェクト、次のミドルウェア、パラメーターの値、パラメーターの名前の順です。</target>
        </trans-unit>
        <trans-unit id="27c2f8e639ad8ac54997096959cd543b13b4fa3f" translate="yes" xml:space="preserve">
          <source>Add routes dynamically at runtime on an instance of &lt;code&gt;express.Router()&lt;/code&gt; so the routes are not superseded by a middleware function.</source>
          <target state="translated">実行時に &lt;code&gt;express.Router()&lt;/code&gt; のインスタンスに動的にルートを追加して、ミドルウェア関数によってルートが置き換えられないようにします。</target>
        </trans-unit>
        <trans-unit id="6811fd65164ad5ae3c77549d4a47827c2d7d4717" translate="yes" xml:space="preserve">
          <source>Added the &lt;code&gt;--hogan&lt;/code&gt; option to support &lt;a href=&quot;http://twitter.github.io/hogan.js/&quot;&gt;Hogan.js&lt;/a&gt;.</source>
          <target state="translated">追加しました &lt;code&gt;--hogan&lt;/code&gt; をサポートするためのオプション&lt;a href=&quot;http://twitter.github.io/hogan.js/&quot;&gt;Hogan.jsを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3b93b5185aa99d13fc038e4d0091630d27a0e294" translate="yes" xml:space="preserve">
          <source>Adding the capability to connect databases to Express apps is just a matter of loading an appropriate Node.js driver for the database in your app. This document briefly explains how to add and use some of the most popular Node.js modules for database systems in your Express app:</source>
          <target state="translated">データベースをExpressアプリに接続する機能を追加するには、アプリ内のデータベースに適切なNode.jsドライバをロードするだけです。このドキュメントでは、Express アプリにデータベースシステム用の最も人気のある Node.js モジュールのいくつかを追加して使用する方法を簡単に説明します。</target>
        </trans-unit>
        <trans-unit id="6213449961b9306cdaf661411c97b1944e20e97a" translate="yes" xml:space="preserve">
          <source>Additional considerations</source>
          <target state="translated">その他の考慮事項</target>
        </trans-unit>
        <trans-unit id="51f76d93c1c7e58cf66141ad873fd03926a158d7" translate="yes" xml:space="preserve">
          <source>Additionally, using &lt;code&gt;uncaughtException&lt;/code&gt; is officially recognized as &lt;a href=&quot;https://nodejs.org/api/process.html#process_event_uncaughtexception&quot;&gt;crude&lt;/a&gt;. So listening for &lt;code&gt;uncaughtException&lt;/code&gt; is just a bad idea. This is why we recommend things like multiple processes and supervisors: crashing and restarting is often the most reliable way to recover from an error.</source>
          <target state="translated">さらに、 &lt;code&gt;uncaughtException&lt;/code&gt; を使用すると、正式には&lt;a href=&quot;https://nodejs.org/api/process.html#process_event_uncaughtexception&quot;&gt;粗野&lt;/a&gt;として認識されます。そのため、 &lt;code&gt;uncaughtException&lt;/code&gt; をリッスンすることは悪い考えです。これが、複数のプロセスやスーパーバイザーのようなものを推奨する理由です。クラッシュから再起動することが、エラーから回復するための最も信頼できる方法であることがよくあります。</target>
        </trans-unit>
        <trans-unit id="714a1cb4ae6bdc5dc779657d3f2e30b31231dd9b" translate="yes" xml:space="preserve">
          <source>Adds callback triggers to route parameters, where &lt;code&gt;name&lt;/code&gt; is the name of the parameter and &lt;code&gt;callback&lt;/code&gt; is the callback function. Although &lt;code&gt;name&lt;/code&gt; is technically optional, using this method without it is deprecated starting with Express v4.11.0 (see below).</source>
          <target state="translated">ルートパラメーターにコールバックトリガーを追加します。ここで、 &lt;code&gt;name&lt;/code&gt; はパラメーターの名前、 &lt;code&gt;callback&lt;/code&gt; はコールバック関数です。が、 &lt;code&gt;name&lt;/code&gt; 技術的には任意であり、それなしでこのメソッドを使用すると、エクスプレスv4.11.0で始まる廃止されました（下記参照）。</target>
        </trans-unit>
        <trans-unit id="fe4dadb51ce11587689d4253819cf23a7653bf00" translate="yes" xml:space="preserve">
          <source>Adds the field to the &lt;code&gt;Vary&lt;/code&gt; response header, if it is not there already.</source>
          <target state="translated">フィールドがまだない場合は、 &lt;code&gt;Vary&lt;/code&gt; 応答ヘッダーにフィールドを追加します。</target>
        </trans-unit>
        <trans-unit id="99b0021e8fdff5ec6edaa329da8ecb296223d390" translate="yes" xml:space="preserve">
          <source>Advanced topics</source>
          <target state="translated">高度なトピック</target>
        </trans-unit>
        <trans-unit id="bf89e33381e6d156d3a3813008265d5f0bebd56d" translate="yes" xml:space="preserve">
          <source>After an app is started by using the &lt;code&gt;pm2&lt;/code&gt; command, it is registered in PM2&amp;rsquo;s list of processes with an ID. You can therefore manage apps with the same name from different directories on the system, by using their IDs.</source>
          <target state="translated">アプリは、 &lt;code&gt;pm2&lt;/code&gt; コマンドを使用して起動すると、PM2のプロセスのリストにIDで登録されます。したがって、IDを使用して、システム上の異なるディレクトリから同じ名前のアプリを管理できます。</target>
        </trans-unit>
        <trans-unit id="0253d14635a8819537ef35febf1a918a5c76c6af" translate="yes" xml:space="preserve">
          <source>After encoding the URL, if not encoded already, Express passes the specified URL to the browser in the &lt;code&gt;Location&lt;/code&gt; header, without any validation.</source>
          <target state="translated">URLをエンコードした後、まだエンコードされていない場合、Expressは指定されたURLを検証せずに &lt;code&gt;Location&lt;/code&gt; ヘッダーでブラウザーに渡します。</target>
        </trans-unit>
        <trans-unit id="4b0b83b80534dcc19c737147cebfa4417617a1df" translate="yes" xml:space="preserve">
          <source>After installing the dependencies, start the app by using the following command:</source>
          <target state="translated">依存関係をインストールしたら、以下のコマンドでアプリを起動します。</target>
        </trans-unit>
        <trans-unit id="c3dca1814ebfaa64e9d2471dca89c335e0ad6d99" translate="yes" xml:space="preserve">
          <source>After the view engine is set, you don&amp;rsquo;t have to specify the engine or load the template engine module in your app; Express loads the module internally, as shown below (for the above example).</source>
          <target state="translated">ビューエンジンを設定した後は、エンジンを指定したり、テンプレートエンジンモジュールをアプリにロードしたりする必要はありません。以下に示すように、Expressはモジュールを内部的にロードします（上記の例の場合）。</target>
        </trans-unit>
        <trans-unit id="f2e339bd1c442276d1b48c0ab4af5f037279a296" translate="yes" xml:space="preserve">
          <source>Aliased as &lt;code&gt;req.header(field)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;req.header(field)&lt;/code&gt; としてエイリアスされます。</target>
        </trans-unit>
        <trans-unit id="d503e1c586396571733e7787d7ec1e455476e84d" translate="yes" xml:space="preserve">
          <source>Aliased as &lt;code&gt;res.header(field [, value])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;res.header(field [, value])&lt;/code&gt; としてエイリアスされます。</target>
        </trans-unit>
        <trans-unit id="ee60c39fc06cb647d77a516b33c7b545cbf8ecf9" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;res.cookie()&lt;/code&gt; does is set the HTTP &lt;code&gt;Set-Cookie&lt;/code&gt; header with the options provided. Any option not specified defaults to the value stated in &lt;a href=&quot;http://tools.ietf.org/html/rfc6265&quot;&gt;RFC 6265&lt;/a&gt;.</source>
          <target state="translated">全て &lt;code&gt;res.cookie()&lt;/code&gt; は、 HTTP設定されない &lt;code&gt;Set-Cookie&lt;/code&gt; 提供されるオプションを有するヘッダを。指定されていないオプションは、デフォルトで&lt;a href=&quot;http://tools.ietf.org/html/rfc6265&quot;&gt;RFC 6265に&lt;/a&gt;記載されている値になります。</target>
        </trans-unit>
        <trans-unit id="a24de729c6e3f66c4017b03fbf614e66e0c7c2c0" translate="yes" xml:space="preserve">
          <source>All param callbacks will be called before any handler of any route in which the param occurs, and they will each be called only once in a request-response cycle, even if the parameter is matched in multiple routes, as shown in the following examples.</source>
          <target state="translated">すべてのparamコールバックは、paramが発生したルートのハンドラの前に呼び出され、以下の例に示すように、パラメータが複数のルートでマッチしていたとしても、それぞれがリクエスト-レスポンスサイクル内で一度だけ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="76151404df9d73f6c31aaea91d71c212ec256343" translate="yes" xml:space="preserve">
          <source>All your asynchronous code must return promises (except emitters). If a particular library does not return promises, convert the base object by using a helper function like &lt;a href=&quot;http://bluebirdjs.com/docs/api/promise.promisifyall.html&quot;&gt;Bluebird.promisifyAll()&lt;/a&gt;.</source>
          <target state="translated">すべての非同期コードは、プロミス（エミッターを除く）を返す必要があります。特定のライブラリがpromiseを返さない場合は、&lt;a href=&quot;http://bluebirdjs.com/docs/api/promise.promisifyall.html&quot;&gt;Bluebird.promisifyAll（）&lt;/a&gt;などのヘルパー関数を使用して、ベースオブジェクトを変換します。</target>
        </trans-unit>
        <trans-unit id="a381833eabedb920ea96a63c87fca3ca339f6b0a" translate="yes" xml:space="preserve">
          <source>Also ensure you are not using any of the vulnerable Express versions listed on the &lt;a href=&quot;security-updates&quot;&gt;Security updates page&lt;/a&gt;. If you are, update to one of the stable releases, preferably the latest.</source>
          <target state="translated">また、[ &lt;a href=&quot;security-updates&quot;&gt;セキュリティ更新]ページに&lt;/a&gt;リストされている脆弱なExpressバージョンを使用していないことを確認してください。もしそうなら、安定版リリースの1つ、できれば最新のものに更新してください。</target>
        </trans-unit>
        <trans-unit id="01cb7c555b1065607baae2af22f78be914eb437b" translate="yes" xml:space="preserve">
          <source>Also in this example, &lt;code&gt;clientErrorHandler&lt;/code&gt; is defined as follows; in this case, the error is explicitly passed along to the next one.</source>
          <target state="translated">この例でも、 &lt;code&gt;clientErrorHandler&lt;/code&gt; は次のように定義されています。この場合、エラーは明示的に次のエラーに渡されます。</target>
        </trans-unit>
        <trans-unit id="81138243a7e83ff7659fefaa71bb5b5b753acf85" translate="yes" xml:space="preserve">
          <source>Also, a handy tool to get a free TLS certificate is &lt;a href=&quot;https://letsencrypt.org/about/&quot;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;, a free, automated, and open certificate authority (CA) provided by the &lt;a href=&quot;https://letsencrypt.org/isrg/&quot;&gt;Internet Security Research Group (ISRG)&lt;/a&gt;.</source>
          <target state="translated">また、無料のTLS証明書を取得するための便利なツールは&lt;a href=&quot;https://letsencrypt.org/about/&quot;&gt;Let's Encrypt&lt;/a&gt;です。これは&lt;a href=&quot;https://letsencrypt.org/isrg/&quot;&gt;Internet Security Research Group（ISRG）が&lt;/a&gt;提供する無料の自動化されたオープンな認証局（CA ）です。</target>
        </trans-unit>
        <trans-unit id="300f2f8b2561387ab4ed64c26e39a132432899ea" translate="yes" xml:space="preserve">
          <source>Also, there are third-party extensions for Express, which simplify some of these patterns:</source>
          <target state="translated">また、Expressにはサードパーティ製の拡張機能があり、これらのパターンの一部を簡略化しています。</target>
        </trans-unit>
        <trans-unit id="732fad69d95176790674a25f918b3068f84d2ff6" translate="yes" xml:space="preserve">
          <source>Alternatively, specify the path of the file:</source>
          <target state="translated">または、ファイルのパスを指定します。</target>
        </trans-unit>
        <trans-unit id="1f19e2aaedb13a26607f8541350aa64967ad7536" translate="yes" xml:space="preserve">
          <source>Although Node and many modules provide synchronous and asynchronous versions of their functions, always use the asynchronous version in production. The only time when a synchronous function can be justified is upon initial startup.</source>
          <target state="translated">Nodeや多くのモジュールは関数の同期版と非同期版を提供していますが、本番では常に非同期版を使用してください。同期関数が正当化されるのは、最初の起動時だけです。</target>
        </trans-unit>
        <trans-unit id="a3fb0d9eab287cb47a95ce5739d340491ea30ee1" translate="yes" xml:space="preserve">
          <source>Although the app will not fail to run if the application variable &lt;code&gt;trust proxy&lt;/code&gt; is not set, it will incorrectly register the proxy&amp;rsquo;s IP address as the client IP address unless &lt;code&gt;trust proxy&lt;/code&gt; is configured.</source>
          <target state="translated">アプリケーション変数の &lt;code&gt;trust proxy&lt;/code&gt; が設定されていない場合、アプリは実行に失敗しませんが、 &lt;code&gt;trust proxy&lt;/code&gt; が構成されていないと、プロキシのIPアドレスがクライアントIPアドレスとして誤って登録されます。</target>
        </trans-unit>
        <trans-unit id="199b0227334a912ede60f97c6616814c70d14a64" translate="yes" xml:space="preserve">
          <source>Always filter and sanitize user input to protect against cross-site scripting (XSS) and command injection attacks.</source>
          <target state="translated">常にフィルタリングし、クロスサイトスクリプティング(XSS)とコマンドインジェクション攻撃から保護するために、ユーザーの入力をサニタイズします。</target>
        </trans-unit>
        <trans-unit id="d7a47f9b0d65f648ec0079cd3ca12f85815610bf" translate="yes" xml:space="preserve">
          <source>An Express app is valid middleware.</source>
          <target state="translated">Expressアプリは有効なミドルウェアです。</target>
        </trans-unit>
        <trans-unit id="8d027076489247ca8bc918bff02160ba73d5bc97" translate="yes" xml:space="preserve">
          <source>An Express application can use the following types of middleware:</source>
          <target state="translated">Express アプリケーションは、以下のタイプのミドルウェアを使用することができます。</target>
        </trans-unit>
        <trans-unit id="66e8d4fcb14f4de42209766ff75bb499ae5f355c" translate="yes" xml:space="preserve">
          <source>An IP address, subnet, or an array of IP addresses and subnets to trust. The following list shows the pre-configured subnet names:</source>
          <target state="translated">IP アドレス、サブネット、または信頼する IP アドレスとサブネットの配列。以下のリストは、事前に設定されたサブネット名を示しています。</target>
        </trans-unit>
        <trans-unit id="9ab832be3f015f7a3818fcb67bd89d0be8ddbffa" translate="yes" xml:space="preserve">
          <source>An IP address, subnet, or an array of IP addresses, and subnets to trust. Pre-configured subnet names are:</source>
          <target state="translated">IP アドレス、サブネット、または IP アドレスの配列、および信頼するサブネット。事前に設定されたサブネット名は</target>
        </trans-unit>
        <trans-unit id="f8329fe850337a91c7e8b27995ca52db9037701d" translate="yes" xml:space="preserve">
          <source>An Upstart service is defined in a job configuration file (also called a &amp;ldquo;job&amp;rdquo;) with filename ending in &lt;code&gt;.conf&lt;/code&gt;. The following example shows how to create a job called &amp;ldquo;myapp&amp;rdquo; for an app named &amp;ldquo;myapp&amp;rdquo; with the main file located at &lt;code&gt;/projects/myapp/index.js&lt;/code&gt;.</source>
          <target state="translated">Upstartサービスは、ファイル名が &lt;code&gt;.conf&lt;/code&gt; で終わるジョブ構成ファイル（「ジョブ」とも呼ばれます）で定義されます。次の例は、メインファイルが &lt;code&gt;/projects/myapp/index.js&lt;/code&gt; にある「myapp」というアプリの「myapp」というジョブを作成する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="20c78fc45bb2978c77ed3b3d491b56deec7514f6" translate="yes" xml:space="preserve">
          <source>An application generated by the &lt;code&gt;express&lt;/code&gt; command also uses the &lt;code&gt;debug&lt;/code&gt; module and its debug namespace is scoped to the name of the application.</source>
          <target state="translated">&lt;code&gt;express&lt;/code&gt; コマンドによって生成されたアプリケーションも &lt;code&gt;debug&lt;/code&gt; モジュールを使用し、そのデバッグ名前空間のスコープはアプリケーションの名前です。</target>
        </trans-unit>
        <trans-unit id="b3d3d30dda9c8bc55e46ab41a8552b82a25fa14e" translate="yes" xml:space="preserve">
          <source>An array of callback functions can handle a route. For example:</source>
          <target state="translated">コールバック関数の配列でルートを扱うことができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="8f1ecce503b4be46e1a7c4a494b729c4cc41c665" translate="yes" xml:space="preserve">
          <source>An array of combinations of any of the above.</source>
          <target state="translated">上記のいずれかの組み合わせの配列。</target>
        </trans-unit>
        <trans-unit id="7fa292c6a041aa0da713425e4a304d376780d891" translate="yes" xml:space="preserve">
          <source>An array of middleware functions.</source>
          <target state="translated">ミドルウェア関数の配列。</target>
        </trans-unit>
        <trans-unit id="1ef2a62c299704da52d350f96549469c509f903c" translate="yes" xml:space="preserve">
          <source>An array of ranges will be returned or negative numbers indicating an error parsing.</source>
          <target state="translated">範囲の配列が返されるか、解析エラーを示す負の数値が返されます。</target>
        </trans-unit>
        <trans-unit id="8735295ea868513cca9b9e3c73a29dc467dae132" translate="yes" xml:space="preserve">
          <source>An array of subdomains in the domain name of the request.</source>
          <target state="translated">リクエストのドメイン名に含まれるサブドメインの配列。</target>
        </trans-unit>
        <trans-unit id="12038cb78ffa1ec85af9c57e97b4b70bdb317d74" translate="yes" xml:space="preserve">
          <source>An object that contains response local variables scoped to the request, and therefore available only to the view(s) rendered during that request / response cycle (if any). Otherwise, this property is identical to &lt;a href=&quot;#app.locals&quot;&gt;app.locals&lt;/a&gt;.</source>
          <target state="translated">リクエストをスコープとするレスポンスローカル変数を含むオブジェクト。したがって、リクエスト/レスポンスサイクル（存在する場合）中にレンダリングされたビューでのみ使用できます。それ以外の場合、このプロパティは&lt;a href=&quot;#app.locals&quot;&gt;app.locals&lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="616eecaa7f9dfcd63ef55c53f604078c5489cba2" translate="yes" xml:space="preserve">
          <source>Another example is serving files from multiple directories, giving precedence to &amp;ldquo;./public&amp;rdquo; over the others:</source>
          <target state="translated">別の例は、複数のディレクトリからファイルを提供することで、「./ public」を他のディレクトリより優先します。</target>
        </trans-unit>
        <trans-unit id="b54ef1b8fc88bd0f6c28b8d017e9347023d3ac75" translate="yes" xml:space="preserve">
          <source>Another example is white-listed &amp;ldquo;global&amp;rdquo; functionality. The example is similar to the ones above, but it only restricts paths that start with &amp;ldquo;/api&amp;rdquo;:</source>
          <target state="translated">別の例は、ホワイトリストの「グローバル」機能です。この例は上記のものと似ていますが、「/ api」で始まるパスのみを制限します。</target>
        </trans-unit>
        <trans-unit id="736a15bfe73941313abd77d0a77400879219a669" translate="yes" xml:space="preserve">
          <source>Another example of this is white-listed &amp;ldquo;global&amp;rdquo; functionality. Here the example is much like before, but it only restricts paths prefixed with &amp;ldquo;/api&amp;rdquo;:</source>
          <target state="translated">この別の例は、ホワイトリストの「グローバル」機能です。ここでの例は以前とほとんど同じですが、「/ api」で始まるパスのみを制限します。</target>
        </trans-unit>
        <trans-unit id="56cf94b739573aed41bda8709c93351d246b45e6" translate="yes" xml:space="preserve">
          <source>Another strategy to improve the performance in production is to cache the result of requests, so that your app does not repeat the operation to serve the same request repeatedly.</source>
          <target state="translated">本番でパフォーマンスを向上させるもう一つの戦略は、リクエストの結果をキャッシュして、アプリが同じリクエストに繰り返しサービスを提供する操作を繰り返さないようにすることです。</target>
        </trans-unit>
        <trans-unit id="f5895c408aa3bfbb9e9fcb87ca3fd38b817f468a" translate="yes" xml:space="preserve">
          <source>Any changes made to the &lt;code&gt;req.params&lt;/code&gt; object in a middleware or route handler will be reset.</source>
          <target state="translated">ミドルウェアまたはルートハンドラーの &lt;code&gt;req.params&lt;/code&gt; オブジェクトに加えられた変更はすべてリセットされます。</target>
        </trans-unit>
        <trans-unit id="8571b4b17492cb24c36d096f88fc57c1b7cbaac9" translate="yes" xml:space="preserve">
          <source>Apart from automatically restarting the app, Upstart enables you to use these commands:</source>
          <target state="translated">アプリを自動的に再起動する以外に、Upstartでは以下のコマンドを使用することができます。</target>
        </trans-unit>
        <trans-unit id="bc912209a4a10ce3095ac635b03494d258643ecb" translate="yes" xml:space="preserve">
          <source>Appends the specified &lt;code&gt;value&lt;/code&gt; to the HTTP response header &lt;code&gt;field&lt;/code&gt;. If the header is not already set, it creates the header with the specified value. The &lt;code&gt;value&lt;/code&gt; parameter can be a string or an array.</source>
          <target state="translated">指定された &lt;code&gt;value&lt;/code&gt; をHTTP応答ヘッダー &lt;code&gt;field&lt;/code&gt; 追加します。ヘッダーがまだ設定されていない場合は、指定された値でヘッダーが作成されます。 &lt;code&gt;value&lt;/code&gt; パラメータが文字列または配列であり得ます。</target>
        </trans-unit>
        <trans-unit id="b291beb8793f4f3308c463951165dad483715a6c" translate="yes" xml:space="preserve">
          <source>Application</source>
          <target state="translated">Application</target>
        </trans-unit>
        <trans-unit id="626dbef44ab40ac72a2aaf345db7297fdce42642" translate="yes" xml:space="preserve">
          <source>Application Settings</source>
          <target state="translated">アプリケーションの設定</target>
        </trans-unit>
        <trans-unit id="6b4003cdd901041cdd4dba8a480436645ba809bc" translate="yes" xml:space="preserve">
          <source>Application-level middleware</source>
          <target state="translated">アプリケーションレベルのミドルウェア</target>
        </trans-unit>
        <trans-unit id="599bfea14bcae842b3ca687eb25eb420944e7f68" translate="yes" xml:space="preserve">
          <source>Applications generated by &lt;code&gt;express&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;express&lt;/code&gt; によって生成されたアプリケーション</target>
        </trans-unit>
        <trans-unit id="1d1010e518f5b5f575aa3d6b5cfd1cd0f8ba6a75" translate="yes" xml:space="preserve">
          <source>Apps now implicitly load routing middleware, so you no longer have to worry about the order in which middleware is loaded with respect to the &lt;code&gt;router&lt;/code&gt; middleware.</source>
          <target state="translated">アプリがルーティングミドルウェアを暗黙的にロードするようになったため、 &lt;code&gt;router&lt;/code&gt; ミドルウェアに関してミドルウェアがロードされる順序を心配する必要がなくなりました。</target>
        </trans-unit>
        <trans-unit id="ce5e5792e97fe5c7861d6ae9b29cf5a25cc0e70a" translate="yes" xml:space="preserve">
          <source>Argument</source>
          <target state="translated">Argument</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="a0478ca5f4c068ca3ac12f9474f6a15865ce9053" translate="yes" xml:space="preserve">
          <source>Arguments:</source>
          <target state="translated">Arguments:</target>
        </trans-unit>
        <trans-unit id="107004472b7ba4e5e31f3082ee1fb5a1239eec61" translate="yes" xml:space="preserve">
          <source>Array</source>
          <target state="translated">Array</target>
        </trans-unit>
        <trans-unit id="8102e79711120d1b8d856914fba828685e294ba5" translate="yes" xml:space="preserve">
          <source>Array of strings</source>
          <target state="translated">文字列の配列</target>
        </trans-unit>
        <trans-unit id="c1d6b65a68de3f9fcc06f3c016889190306c647a" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;req.body&lt;/code&gt;&amp;rsquo;s shape is based on user-controlled input, all properties and values in this object are untrusted and should be validated before trusting. For example, &lt;code&gt;req.body.foo.toString()&lt;/code&gt; may fail in multiple ways, for example &lt;code&gt;foo&lt;/code&gt; may not be there or may not be a string, and &lt;code&gt;toString&lt;/code&gt; may not be a function and instead a string or other user-input.</source>
          <target state="translated">&lt;code&gt;req.body&lt;/code&gt; の形状は、ユーザ制御の入力に基づいて、このオブジェクトのすべてのプロパティと値が信頼できないと信頼する前に検証されなければなりません。たとえば、 &lt;code&gt;req.body.foo.toString()&lt;/code&gt; は複数の方法で失敗する可能性があります。たとえば、 &lt;code&gt;foo&lt;/code&gt; が存在しないか、文字列でない可能性があります &lt;code&gt;toString&lt;/code&gt; は関数ではなく、文字列またはその他のユーザー入力である可能性があります。</target>
        </trans-unit>
        <trans-unit id="53d1473db927b31ea5a1ecfa6a531861c6ed5b48" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;req.query&lt;/code&gt;&amp;rsquo;s shape is based on user-controlled input, all properties and values in this object are untrusted and should be validated before trusting. For example, &lt;code&gt;req.query.foo.toString()&lt;/code&gt; may fail in multiple ways, for example &lt;code&gt;foo&lt;/code&gt; may not be there or may not be a string, and &lt;code&gt;toString&lt;/code&gt; may not be a function and instead a string or other user-input.</source>
          <target state="translated">&lt;code&gt;req.query&lt;/code&gt; の形状は、ユーザ制御の入力に基づいて、このオブジェクトのすべてのプロパティと値が信頼できないと信頼する前に検証されなければなりません。たとえば、 &lt;code&gt;req.query.foo.toString()&lt;/code&gt; は複数の方法で失敗する可能性があります。たとえば、 &lt;code&gt;foo&lt;/code&gt; が存在しないか文字列でない可能性があり、 &lt;code&gt;toString&lt;/code&gt; が関数ではなく文字列またはその他のユーザー入力である可能性があります。</target>
        </trans-unit>
        <trans-unit id="b0b283fdc7ceeb7cc37b0e5ca1192165f6cd4092" translate="yes" xml:space="preserve">
          <source>As explained below, when you install StrongLoop PM as an operating system service using your init system, it will automatically restart when the system restarts. Thus, it will keep your application processes and clusters alive forever.</source>
          <target state="translated">以下に説明するように、StrongLoop PMをinitシステムを使ってオペレーティングシステムサービスとしてインストールすると、システムの再起動時に自動的に再起動します。このようにして、アプリケーションプロセスとクラスタを永遠に存続させることができます。</target>
        </trans-unit>
        <trans-unit id="7fe81777b037ce2cc2d87fbae1a3e0c6680be3e2" translate="yes" xml:space="preserve">
          <source>Assigns setting &lt;code&gt;name&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt;. You may store any value that you want, but certain names can be used to configure the behavior of the server. These special names are listed in the &lt;a href=&quot;#app.settings.table&quot;&gt;app settings table&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 設定 &lt;code&gt;name&lt;/code&gt; を割り当てます。任意の値を格納できますが、特定の名前を使用してサーバーの動作を構成できます。これらの特別な名前は、&lt;a href=&quot;#app.settings.table&quot;&gt;アプリの設定表に&lt;/a&gt;記載されています。</target>
        </trans-unit>
        <trans-unit id="b6a837b7d9b2cf2f5c4a7d6fdc02210e20a1e245" translate="yes" xml:space="preserve">
          <source>Assuming you&amp;rsquo;ve already installed &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;, create a directory to hold your application, and make that your working directory.</source>
          <target state="translated">&lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;がすでにインストールされていると仮定して、アプリケーションを保持するディレクトリを作成し、それを作業ディレクトリにします。</target>
        </trans-unit>
        <trans-unit id="c4dd53826c1b3992511dc63161144025385ddd4a" translate="yes" xml:space="preserve">
          <source>At a minimum, disable X-Powered-By header</source>
          <target state="translated">最低限、X-Powered-By ヘッダを無効にします。</target>
        </trans-unit>
        <trans-unit id="47f6139603f69997950c5358baa5c8892e48e81c" translate="yes" xml:space="preserve">
          <source>Authentication is another opinionated area that Express does not venture into. You may use any authentication scheme you wish. For a simple username / password scheme, see &lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/auth&quot;&gt;this example&lt;/a&gt;.</source>
          <target state="translated">認証は、Expressが進出しないもう1つの有力な分野です。希望する認証スキームを使用できます。簡単なユーザー名/パスワードスキームについては、&lt;a href=&quot;https://github.com/expressjs/express/tree/master/examples/auth&quot;&gt;この例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6ef078262c0d409a711238a1e946a611c810a5c0" translate="yes" xml:space="preserve">
          <source>Automatically restart your app if it crashes for any reason.</source>
          <target state="translated">何らかの理由でアプリがクラッシュした場合、自動的にアプリを再起動します。</target>
        </trans-unit>
        <trans-unit id="681b5b5ae10b994e61d9fc53cf8a95498ff0df39" translate="yes" xml:space="preserve">
          <source>Availability</source>
          <target state="translated">Availability</target>
        </trans-unit>
        <trans-unit id="67f999b6099810775aa1aafa856bdea78a9e78e1" translate="yes" xml:space="preserve">
          <source>Avoid other known vulnerabilities</source>
          <target state="translated">他の既知の脆弱性を避ける</target>
        </trans-unit>
        <trans-unit id="2180d4b1d73ffc01559433d09562f2f973046468" translate="yes" xml:space="preserve">
          <source>Basic routing</source>
          <target state="translated">基本的なルーティング</target>
        </trans-unit>
        <trans-unit id="168929183d2470cb5fd9c8ab272eed288ccb698d" translate="yes" xml:space="preserve">
          <source>Basic use</source>
          <target state="translated">基本的な使い方</target>
        </trans-unit>
        <trans-unit id="73499cdf7aa32da8eb57df6e6bda45f6f9ecc130" translate="yes" xml:space="preserve">
          <source>Because the &lt;code&gt;app.js&lt;/code&gt; file that was generated by the Express 4 generator is now a Node.js module, it can no longer be started independently as an app (unless you modify the code). The module must be loaded in a Node.js file and started via the Node.js file. The Node.js file is &lt;code&gt;./bin/www&lt;/code&gt; in this case.</source>
          <target state="translated">Express 4ジェネレーターによって生成された &lt;code&gt;app.js&lt;/code&gt; ファイルはNode.jsモジュールになっているため、（コードを変更しない限り）アプリとして独立して起動することはできません。モジュールはNode.jsファイルにロードされ、Node.jsファイルを介して開始される必要があります。この場合、Node.jsファイルは &lt;code&gt;./bin/www&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d24fcf443661642b29d224b9173067f56c14dc68" translate="yes" xml:space="preserve">
          <source>Because the regular expression is usually part of a literal string, be sure to escape any &lt;code&gt;\&lt;/code&gt; characters with an additional backslash, for example &lt;code&gt;\\d+&lt;/code&gt;.</source>
          <target state="translated">正規表現は通常リテラル文字列の一部であるため、追加のバックスラッシュを使用して &lt;code&gt;\&lt;/code&gt; 文字をエスケープしてください（例： &lt;code&gt;\\d+&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f63d82dd8465b5ce5e7e01fe78f03a210a0f388c" translate="yes" xml:space="preserve">
          <source>Because you have access to the request object, the response object, the next middleware function in the stack, and the whole Node.js API, the possibilities with middleware functions are endless.</source>
          <target state="translated">リクエストオブジェクト、レスポンスオブジェクト、スタック内の次のミドルウェア関数、そしてNode.js API全体にアクセスできるので、ミドルウェア関数の可能性は無限大です。</target>
        </trans-unit>
        <trans-unit id="341b6faff2a554e512c0626782e1796c26148ea1" translate="yes" xml:space="preserve">
          <source>Before diving into these topics, you should have a basic understanding of Node/Express error handling: using error-first callbacks, and propagating errors in middleware. Node uses an &amp;ldquo;error-first callback&amp;rdquo; convention for returning errors from asynchronous functions, where the first parameter to the callback function is the error object, followed by result data in succeeding parameters. To indicate no error, pass null as the first parameter. The callback function must correspondingly follow the error-first callback convention to meaningfully handle the error. And in Express, the best practice is to use the next() function to propagate errors through the middleware chain.</source>
          <target state="translated">これらのトピックに入る前に、Node / Expressエラー処理の基本を理解している必要があります。エラーファーストコールバックの使用とミドルウェアでのエラーの伝播です。ノードは非同期関数からエラーを返すために「エラーファーストコールバック」規則を使用します。コールバック関数への最初のパラメーターはエラーオブジェクトであり、その後に続くパラメーターの結果データが続きます。エラーがないことを示すには、最初のパラメーターとしてnullを渡します。コールバック関数は、エラーを意味のある方法で処理するために、対応してエラー優先コールバック規約に従う必要があります。そしてExpressのベストプラクティスは、next（）関数を使用してミドルウェアチェーン全体にエラーを伝播することです。</target>
        </trans-unit>
        <trans-unit id="d35fab277b58560fc799c9acbcf5ef71a1334a69" translate="yes" xml:space="preserve">
          <source>Begin the migration process by installing the required middleware for the Express 4 app and updating Express and Pug to their respective latest version with the following command:</source>
          <target state="translated">Express 4アプリに必要なミドルウェアをインストールし、次のコマンドでExpressとPugをそれぞれの最新バージョンにアップデートすることで、移行プロセスを開始します。</target>
        </trans-unit>
        <trans-unit id="e894581c71991717050cb1e377b1c6075da4f634" translate="yes" xml:space="preserve">
          <source>Bind application-level middleware to an instance of the &lt;a href=&quot;../index#app&quot;&gt;app object&lt;/a&gt; by using the &lt;code&gt;app.use()&lt;/code&gt; and &lt;code&gt;app.METHOD()&lt;/code&gt; functions, where &lt;code&gt;METHOD&lt;/code&gt; is the HTTP method of the request that the middleware function handles (such as GET, PUT, or POST) in lowercase.</source>
          <target state="translated">インスタンスにバインドアプリケーションレベルのミドルウェア&lt;a href=&quot;../index#app&quot;&gt;アプリケーションオブジェクト&lt;/a&gt;用いて &lt;code&gt;app.use()&lt;/code&gt; と &lt;code&gt;app.METHOD()&lt;/code&gt; 関数、 &lt;code&gt;METHOD&lt;/code&gt; リクエストのHTTPメソッドであるが、そのようなGET、PUT、又はミドルウェア機能ハンドル（ POST）小文字で。</target>
        </trans-unit>
        <trans-unit id="69bd62e308a8ef4f438e00cb2c74fba92608e0db" translate="yes" xml:space="preserve">
          <source>Binds and listens for connections on the specified host and port. This method is identical to Node&amp;rsquo;s &lt;a href=&quot;https://nodejs.org/api/http.html#http_server_listen&quot;&gt;http.Server.listen()&lt;/a&gt;.</source>
          <target state="translated">指定されたホストとポートで接続をバインドしてリッスンします。このメソッドは、Nodeの&lt;a href=&quot;https://nodejs.org/api/http.html#http_server_listen&quot;&gt;http.Server.listen（）&lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="ea5adc4375e45984bc195c2653204c764deddeab" translate="yes" xml:space="preserve">
          <source>Body-parsing middleware must be loaded for &lt;code&gt;req.param()&lt;/code&gt; to work predictably. Refer &lt;a href=&quot;#req.body&quot;&gt;req.body&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;req.param()&lt;/code&gt; を予測どおりに動作させるには、ボディ解析ミドルウェアをロードする必要があります。詳細については、&lt;a href=&quot;#req.body&quot;&gt;req.body&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b76ff4906f33c2dd97ddd929b9662ba8cac6174c" translate="yes" xml:space="preserve">
          <source>Boolean</source>
          <target state="translated">Boolean</target>
        </trans-unit>
        <trans-unit id="d4a7aa44cc98faf99ef648465fb87cf26e3894fb" translate="yes" xml:space="preserve">
          <source>Boolean or String</source>
          <target state="translated">ブールまたは文字列</target>
        </trans-unit>
        <trans-unit id="bc458f9370a71baf0a4e92c38dbf6f8c7c0b50de" translate="yes" xml:space="preserve">
          <source>Boolean property that indicates if the app sent HTTP headers for the response.</source>
          <target state="translated">アプリがレスポンスの HTTP ヘッダを送信したかどうかを示すブール値プロパティです。</target>
        </trans-unit>
        <trans-unit id="5e6ed8e8d552e3494d52f5e3f5f37934559ecafd" translate="yes" xml:space="preserve">
          <source>Browsers take the responsibility of deriving the intended URL from the current URL or the referring URL, and the URL specified in the &lt;code&gt;Location&lt;/code&gt; header; and redirect the user accordingly.</source>
          <target state="translated">ブラウザは、現在のURLまたは参照URL、および &lt;code&gt;Location&lt;/code&gt; ヘッダーで指定されたURLから目的のURLを導出する責任を負います。それに応じてユーザーをリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="1cd470f77f17c01cda03356a5f7d5cf9fe00ea91" translate="yes" xml:space="preserve">
          <source>Build and package your app locally, then deploy it securely to your production system.</source>
          <target state="translated">アプリをローカルに構築してパッケージ化し、本番システムに安全にデプロイします。</target>
        </trans-unit>
        <trans-unit id="fa5439265b03b3eac653152bc49bcd47d70baaed" translate="yes" xml:space="preserve">
          <source>Build, package, and deploy your Node.js application to a local or remote system.</source>
          <target state="translated">Node.jsアプリケーションを構築し、パッケージ化し、ローカルまたはリモートシステムにデプロイします。</target>
        </trans-unit>
        <trans-unit id="27d138fa4a42577920b0483f30934ac175e0cd01" translate="yes" xml:space="preserve">
          <source>Building on the &lt;code&gt;router.param()&lt;/code&gt; example above, the following code shows how to use &lt;code&gt;router.route()&lt;/code&gt; to specify various HTTP method handlers.</source>
          <target state="translated">上に構築 &lt;code&gt;router.param()&lt;/code&gt; 上記の例で、次のコードショーはどのように使用する &lt;code&gt;router.route()&lt;/code&gt; は、様々なHTTPメソッドハンドラーを指定します。</target>
        </trans-unit>
        <trans-unit id="e4127f9bc892b5183728e60e46a78ffe67f1cb3e" translate="yes" xml:space="preserve">
          <source>Built-in middleware</source>
          <target state="translated">内蔵ミドルウェア</target>
        </trans-unit>
        <trans-unit id="08ae5ac9260efbb4ac9344f65718db9255f782fb" translate="yes" xml:space="preserve">
          <source>But you could just as well have:</source>
          <target state="translated">でも、あなたもそうだったかもしれない。</target>
        </trans-unit>
        <trans-unit id="d0d55cc853a41a2795cc532c8a9dd852ad55fbf8" translate="yes" xml:space="preserve">
          <source>By default with version npm 5.0+ npm install adds the module to the &lt;code&gt;dependencies&lt;/code&gt; list in the &lt;code&gt;package.json&lt;/code&gt; file; with earlier versions of npm, you must specify the &lt;code&gt;--save&lt;/code&gt; option explicitly. Then, afterwards, running &lt;code&gt;npm install&lt;/code&gt; in the app directory will automatically install modules in the dependencies list.</source>
          <target state="translated">バージョンnpm 5.0以降のデフォルトでは、npm installはモジュールを &lt;code&gt;package.json&lt;/code&gt; ファイルの &lt;code&gt;dependencies&lt;/code&gt; リストに追加します。以前のバージョンのnpmでは、 &lt;code&gt;--save&lt;/code&gt; オプションを明示的に指定する必要があります。その後、アプリディレクトリで &lt;code&gt;npm install&lt;/code&gt; を実行すると、依存関係リストにモジュールが自動的にインストールされます。</target>
        </trans-unit>
        <trans-unit id="c532e29ee53279091d205d6985f3b87579513efb" translate="yes" xml:space="preserve">
          <source>By default, Express will &lt;code&gt;require()&lt;/code&gt; the engine based on the file extension. For example, if you try to render a &amp;ldquo;foo.pug&amp;rdquo; file, Express invokes the following internally, and caches the &lt;code&gt;require()&lt;/code&gt; on subsequent calls to increase performance.</source>
          <target state="translated">デフォルトでは、Expressはファイル拡張子に基づいてエンジンを &lt;code&gt;require()&lt;/code&gt; します。たとえば、「foo.pug」ファイルをレンダリングしようとすると、Expressは以下を内部的に呼び出し、パフォーマンスを向上させるために後続の呼び出しで &lt;code&gt;require()&lt;/code&gt; をキャッシュします。</target>
        </trans-unit>
        <trans-unit id="fe4c1e683fe5d87acc817c348aa5dec7443c6ad1" translate="yes" xml:space="preserve">
          <source>By default, the JSONP callback name is simply &lt;code&gt;callback&lt;/code&gt;. Override this with the &lt;a href=&quot;#app.settings.table&quot;&gt;jsonp callback name&lt;/a&gt; setting.</source>
          <target state="translated">デフォルトでは、JSONPコールバック名は単に &lt;code&gt;callback&lt;/code&gt; です。これを&lt;a href=&quot;#app.settings.table&quot;&gt;jsonpコールバック名&lt;/a&gt;設定でオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="1e6b711b4000b0309a0c2f5fb7ecfad4e9c17527" translate="yes" xml:space="preserve">
          <source>Cache CSS files generated from CSS extensions.</source>
          <target state="translated">CSS拡張子から生成されたCSSファイルをキャッシュします。</target>
        </trans-unit>
        <trans-unit id="27cf63a8644f4531a9738e03c8d964a31a448f54" translate="yes" xml:space="preserve">
          <source>Cache request results</source>
          <target state="translated">キャッシュリクエスト結果</target>
        </trans-unit>
        <trans-unit id="ce727b7db9bf4e505cde3e0fb96702b86f605d0b" translate="yes" xml:space="preserve">
          <source>Cache view templates.</source>
          <target state="translated">キャッシュビューのテンプレート。</target>
        </trans-unit>
        <trans-unit id="7c9a412744d996b1a5f33871a3d2816ec5386aea" translate="yes" xml:space="preserve">
          <source>Call the next middleware function in the stack.</source>
          <target state="translated">スタック内の次のミドルウェア関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="92af351a8025c11ee09d1ecd883172a68670aba1" translate="yes" xml:space="preserve">
          <source>Call the next middleware in the stack.</source>
          <target state="translated">スタック内の次のミドルウェアを呼び出します。</target>
        </trans-unit>
        <trans-unit id="fcf204e86ac5dbba6258bb828013a0d629f92dd3" translate="yes" xml:space="preserve">
          <source>Callback argument to the middleware function, called &quot;next&quot; by convention.</source>
          <target state="translated">ミドルウェア関数のコールバック引数で、規約では &quot;next&quot; と呼ばれています。</target>
        </trans-unit>
        <trans-unit id="10837f6058b72e83ab8b01ead3c530c70f492e91" translate="yes" xml:space="preserve">
          <source>Callback functions; can be:</source>
          <target state="translated">コールバック関数;することができます。</target>
        </trans-unit>
        <trans-unit id="0986d08d007c51dc8fd58504df8b36b8e9b12b43" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;app.set('foo', true)&lt;/code&gt; for a Boolean property is the same as calling &lt;code&gt;app.enable('foo')&lt;/code&gt;. Similarly, calling &lt;code&gt;app.set('foo', false)&lt;/code&gt; for a Boolean property is the same as calling &lt;code&gt;app.disable('foo')&lt;/code&gt;.</source>
          <target state="translated">呼び出し &lt;code&gt;app.set('foo', true)&lt;/code&gt; ブール型プロパティのことを呼び出すのと同じです &lt;code&gt;app.enable('foo')&lt;/code&gt; 。同様に、ブール型プロパティに対して &lt;code&gt;app.set('foo', false)&lt;/code&gt; を呼び出すことは、 &lt;code&gt;app.disable('foo')&lt;/code&gt; を呼び出すことと同じです。</target>
        </trans-unit>
        <trans-unit id="79e218233908db0a49dad7b29f8e1301192c890b" translate="yes" xml:space="preserve">
          <source>Calls to &lt;code&gt;next()&lt;/code&gt; and &lt;code&gt;next(err)&lt;/code&gt; indicate that the current handler is complete and in what state. &lt;code&gt;next(err)&lt;/code&gt; will skip all remaining handlers in the chain except for those that are set up to handle errors as described above.</source>
          <target state="translated">&lt;code&gt;next()&lt;/code&gt; および &lt;code&gt;next(err)&lt;/code&gt; の呼び出しは、現在のハンドラーが完了し、どの状態にあるかを示します。 &lt;code&gt;next(err)&lt;/code&gt; は、上記のエラーを処理するように設定されているハンドラーを除いて、チェーン内の残りのすべてのハンドラーをスキップします。</target>
        </trans-unit>
        <trans-unit id="533a38eeeef68b2a6dff0543d2d23fed7b8f462e" translate="yes" xml:space="preserve">
          <source>Cassandra</source>
          <target state="translated">Cassandra</target>
        </trans-unit>
        <trans-unit id="5dc28fede606eef603fb7498465cddf910f08e54" translate="yes" xml:space="preserve">
          <source>Catching Errors</source>
          <target state="translated">キャッチエラー</target>
        </trans-unit>
        <trans-unit id="cb5424f67784790891d1c6e9c08d167139b91601" translate="yes" xml:space="preserve">
          <source>Changed</source>
          <target state="translated">Changed</target>
        </trans-unit>
        <trans-unit id="327b9eb14af1d972792cfbb1726e7e98a26ec7ca" translate="yes" xml:space="preserve">
          <source>Changed to &lt;code&gt;res.headersSent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;res.headersSent&lt;/code&gt; に変更されました。</target>
        </trans-unit>
        <trans-unit id="eec1655e8fc69c2ffa62794fc14943690f452b45" translate="yes" xml:space="preserve">
          <source>Changes in Express 4</source>
          <target state="translated">エクスプレス4の変更点</target>
        </trans-unit>
        <trans-unit id="cba1bc523fa7688f1fbc809dd4c80b39bb1435f8" translate="yes" xml:space="preserve">
          <source>Changes in Express 5</source>
          <target state="translated">Express 5 の変更点</target>
        </trans-unit>
        <trans-unit id="077e2722b2d517580b524986fa47e395f8fa4ecd" translate="yes" xml:space="preserve">
          <source>Changes to Express core and middleware system</source>
          <target state="translated">エクスプレスのコアシステムとミドルウェアシステムの変更</target>
        </trans-unit>
        <trans-unit id="ca2ed8ce67c19a24a57e3ee5c805ef733f7bb830" translate="yes" xml:space="preserve">
          <source>Changes to the app generator</source>
          <target state="translated">アプリジェネレーターの変更点</target>
        </trans-unit>
        <trans-unit id="d3a6abff5998ee42be4fea3fc58ce594be82beb3" translate="yes" xml:space="preserve">
          <source>Changes to the routing system.</source>
          <target state="translated">ルーティングシステムの変更</target>
        </trans-unit>
        <trans-unit id="3a32ba6bffc86b589903570f4bd0f9acaedb4985" translate="yes" xml:space="preserve">
          <source>Check service status</source>
          <target state="translated">サービス状況の確認</target>
        </trans-unit>
        <trans-unit id="6bfb23de59645549c2d532c18569a4d0b292d948" translate="yes" xml:space="preserve">
          <source>Checks if the specified content types are acceptable, based on the request&amp;rsquo;s &lt;code&gt;Accept&lt;/code&gt; HTTP header field. The method returns the best match, or if none of the specified content types is acceptable, returns &lt;code&gt;false&lt;/code&gt; (in which case, the application should respond with &lt;code&gt;406 &quot;Not Acceptable&quot;&lt;/code&gt;).</source>
          <target state="translated">リクエストの &lt;code&gt;Accept&lt;/code&gt; HTTPヘッダーフィールドに基づいて、指定されたコンテンツタイプが受け入れ可能かどうかを確認します。このメソッドは、最も一致するものを返すか、指定されたコンテンツタイプのいずれも受け入れられない場合は &lt;code&gt;false&lt;/code&gt; を返します（この場合、アプリケーションは &lt;code&gt;406 &quot;Not Acceptable&quot;&lt;/code&gt; で応答する必要があります）。</target>
        </trans-unit>
        <trans-unit id="7cc82949d388c11ba1990f3bec0249a5b3139235" translate="yes" xml:space="preserve">
          <source>Clears the cookie specified by &lt;code&gt;name&lt;/code&gt;. For details about the &lt;code&gt;options&lt;/code&gt; object, see &lt;a href=&quot;#res.cookie&quot;&gt;res.cookie()&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 指定されたCookieをクリアします。 &lt;code&gt;options&lt;/code&gt; オブジェクトの詳細については、&lt;a href=&quot;#res.cookie&quot;&gt;res.cookie（）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="081f8cebf3ac6804eb325e6ec0d25e55f02b4708" translate="yes" xml:space="preserve">
          <source>Clustering is made possible with Node&amp;rsquo;s &lt;a href=&quot;https://nodejs.org/dist/latest-v4.x/docs/api/cluster.html&quot;&gt;cluster module&lt;/a&gt;. This enables a master process to spawn worker processes and distribute incoming connections among the workers. However, rather than using this module directly, it&amp;rsquo;s far better to use one of the many tools out there that does it for you automatically; for example &lt;a href=&quot;https://www.npmjs.com/package/node-pm&quot;&gt;node-pm&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/cluster-service&quot;&gt;cluster-service&lt;/a&gt;.</source>
          <target state="translated">クラスタリングは、Nodeの&lt;a href=&quot;https://nodejs.org/dist/latest-v4.x/docs/api/cluster.html&quot;&gt;クラスターモジュールで&lt;/a&gt;可能になります。これにより、マスタープロセスはワーカープロセスを生成し、着信接続をワーカー間で分散できます。ただし、このモジュールを直接使用するのではなく、自動的に機能する多くのツールの1つを使用する方がはるかに優れています。たとえば、&lt;a href=&quot;https://www.npmjs.com/package/node-pm&quot;&gt;node-pm&lt;/a&gt;や&lt;a href=&quot;https://www.npmjs.com/package/cluster-service&quot;&gt;cluster-service&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="db316d38e0f2c64e217b3a2605bcc3104e4dc570" translate="yes" xml:space="preserve">
          <source>Combination</source>
          <target state="translated">Combination</target>
        </trans-unit>
        <trans-unit id="dbd46d2571d16a185836f62fb4a998da516b36f7" translate="yes" xml:space="preserve">
          <source>Command options and use largely remain the same, with the following exceptions:</source>
          <target state="translated">コマンドのオプションと使用方法は、以下の例外を除いて、ほぼ同じです。</target>
        </trans-unit>
        <trans-unit id="4603babd52df2e74fd06c06e5ec03f563679fec2" translate="yes" xml:space="preserve">
          <source>Configurable middleware</source>
          <target state="translated">構成可能なミドルウェア</target>
        </trans-unit>
        <trans-unit id="340a3d5354b977658e857cbdc54323a09f000f6c" translate="yes" xml:space="preserve">
          <source>Configuring middleware; see &lt;a href=&quot;#app.route&quot;&gt;app.route&lt;/a&gt;.</source>
          <target state="translated">ミドルウェアの構成。&lt;a href=&quot;#app.route&quot;&gt;app.routeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6e21f8f23c79f46efbffa6f57896b24f02c9be93" translate="yes" xml:space="preserve">
          <source>Consider an Express v.3 application with the following &lt;code&gt;app.js&lt;/code&gt; file:</source>
          <target state="translated">次の &lt;code&gt;app.js&lt;/code&gt; ファイルを含むExpress v.3アプリケーションを考えてみます。</target>
        </trans-unit>
        <trans-unit id="bb3f5901d0fec16f3f611581288141ffe170d15b" translate="yes" xml:space="preserve">
          <source>Contains a string corresponding to the HTTP method of the request: &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, and so on.</source>
          <target state="translated">リクエストのHTTPメソッドに対応する文字列が含まれます： &lt;code&gt;GET&lt;/code&gt; 、 &lt;code&gt;POST&lt;/code&gt; 、 &lt;code&gt;PUT&lt;/code&gt; など。</target>
        </trans-unit>
        <trans-unit id="2a3ec3691b6885bf96d8ead84aca19ae870aaaaf" translate="yes" xml:space="preserve">
          <source>Contains key-value pairs of data submitted in the request body. By default, it is &lt;code&gt;undefined&lt;/code&gt;, and is populated when you use body-parsing middleware such as &lt;a href=&quot;https://www.npmjs.org/package/body-parser&quot;&gt;body-parser&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.org/package/multer&quot;&gt;multer&lt;/a&gt;.</source>
          <target state="translated">リクエストの本文で送信されたデータのキーと値のペアが含まれます。デフォルトでは、これは &lt;code&gt;undefined&lt;/code&gt; であり、&lt;a href=&quot;https://www.npmjs.org/package/body-parser&quot;&gt;body-parser&lt;/a&gt;や&lt;a href=&quot;https://www.npmjs.org/package/multer&quot;&gt;multer&lt;/a&gt;などのボディ解析ミドルウェアを使用すると入力されます。</target>
        </trans-unit>
        <trans-unit id="783d83025119e53078283b4686df3a6e731ae270" translate="yes" xml:space="preserve">
          <source>Contains the currently-matched route, a string. For example:</source>
          <target state="translated">現在マッチしているルートを含む文字列。例えば</target>
        </trans-unit>
        <trans-unit id="1c80c08531ee5f06a30971bc23b21208d66fe64d" translate="yes" xml:space="preserve">
          <source>Contains the hostname derived from the &lt;code&gt;Host&lt;/code&gt; HTTP header.</source>
          <target state="translated">&lt;code&gt;Host&lt;/code&gt; HTTPヘッダーから派生したホスト名が含まれます。</target>
        </trans-unit>
        <trans-unit id="0cbc4a2e88972704b570ff9a0560ce98f9f127da" translate="yes" xml:space="preserve">
          <source>Contains the path part of the request URL.</source>
          <target state="translated">リクエストURLのパス部分を含みます。</target>
        </trans-unit>
        <trans-unit id="bbd25a57931e72096cb5b64f4362667fc36711ec" translate="yes" xml:space="preserve">
          <source>Contains the remote IP address of the request.</source>
          <target state="translated">リクエストのリモートIPアドレスを含みます。</target>
        </trans-unit>
        <trans-unit id="f9ffb6887f23209cfcc45dd3c22f8b6aeccc1ef5" translate="yes" xml:space="preserve">
          <source>Contains the request protocol string: either &lt;code&gt;http&lt;/code&gt; or (for TLS requests) &lt;code&gt;https&lt;/code&gt;.</source>
          <target state="translated">要求プロトコル文字列が含まれています： &lt;code&gt;http&lt;/code&gt; または（TLS要求の場合） &lt;code&gt;https&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="35a91c9da1fcd97b2d1ffc9e356938457d3d2ff7" translate="yes" xml:space="preserve">
          <source>Control clustering (StrongLoop PM and pm2).</source>
          <target state="translated">制御クラスタリング(StrongLoop PMとpm2)。</target>
        </trans-unit>
        <trans-unit id="e18921eec56769e2c14b27f9a86e39dced102a62" translate="yes" xml:space="preserve">
          <source>Control clustering.</source>
          <target state="translated">クラスタリングを制御します。</target>
        </trans-unit>
        <trans-unit id="df4eb88a986720b3a43d7ff7370bc423ded7b9f8" translate="yes" xml:space="preserve">
          <source>Controls the maximum request body size. If this is a number, then the value specifies the number of bytes; if it is a string, the value is passed to the &lt;a href=&quot;https://www.npmjs.com/package/bytes&quot;&gt;bytes&lt;/a&gt; library for parsing.</source>
          <target state="translated">リクエストの本文の最大サイズを制御します。これが数値の場合、値はバイト数を指定します。文字列の場合、値は解析のために&lt;a href=&quot;https://www.npmjs.com/package/bytes&quot;&gt;バイト&lt;/a&gt;ライブラリに渡されます。</target>
        </trans-unit>
        <trans-unit id="c412ecc9f179814af20f3b6bfdbc938fd116b12b" translate="yes" xml:space="preserve">
          <source>Convenient option for setting the expiry time relative to the current time in milliseconds.</source>
          <target state="translated">現在時刻からの相対的な有効期限をミリ秒単位で設定できる便利なオプション。</target>
        </trans-unit>
        <trans-unit id="e5503b67729c0db6ba79658202124a1cb8563ab8" translate="yes" xml:space="preserve">
          <source>CouchDB</source>
          <target state="translated">CouchDB</target>
        </trans-unit>
        <trans-unit id="9304cdd066efa64f78387e9cc9240a70527271bc" translate="yes" xml:space="preserve">
          <source>Couchbase</source>
          <target state="translated">Couchbase</target>
        </trans-unit>
        <trans-unit id="69635e64f5efc46f5a8578245cdc40b3314d0daa" translate="yes" xml:space="preserve">
          <source>Create a Pug template file named &lt;code&gt;index.pug&lt;/code&gt; in the &lt;code&gt;views&lt;/code&gt; directory, with the following content:</source>
          <target state="translated">次の内容で、 &lt;code&gt;views&lt;/code&gt; ディレクトリに &lt;code&gt;index.pug&lt;/code&gt; という名前のPugテンプレートファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="3f5539746d990008773f9631056a57f64b93ef1e" translate="yes" xml:space="preserve">
          <source>Create a file in &lt;code&gt;/etc/systemd/system/express.service&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;/etc/systemd/system/express.service&lt;/code&gt; にファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="08c382b1dcea8712c5e3d1604523defedbc10018" translate="yes" xml:space="preserve">
          <source>Create a file named &lt;code&gt;myapp.conf&lt;/code&gt; at &lt;code&gt;/etc/init/&lt;/code&gt; with the following content (replace the bold text with values for your system and app):</source>
          <target state="translated">名前のファイルを作成 &lt;code&gt;myapp.conf&lt;/code&gt; をで &lt;code&gt;/etc/init/&lt;/code&gt; 以下の内容（お使いのシステムとアプリのための値を持つ大胆なテキストを置き換え）と：</target>
        </trans-unit>
        <trans-unit id="cff7be9dd35721376a2803e5a182868c0933a45a" translate="yes" xml:space="preserve">
          <source>Create a router file named &lt;code&gt;birds.js&lt;/code&gt; in the app directory, with the following content:</source>
          <target state="translated">次の内容で、 &lt;code&gt;birds.js&lt;/code&gt; という名前のルーターファイルをappディレクトリに作成します。</target>
        </trans-unit>
        <trans-unit id="0699dfac75204a51005af19824c2925bae2aaf53" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;a href=&quot;#router&quot;&gt;router&lt;/a&gt; object.</source>
          <target state="translated">新しい&lt;a href=&quot;#router&quot;&gt;ルーター&lt;/a&gt;オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="5df6af5213e90d671116e0332aad4fba444c827e" translate="yes" xml:space="preserve">
          <source>Creates an Express application. The &lt;code&gt;express()&lt;/code&gt; function is a top-level function exported by the &lt;code&gt;express&lt;/code&gt; module.</source>
          <target state="translated">Expressアプリケーションを作成します。 &lt;code&gt;express()&lt;/code&gt; 関数は、によってエクスポートされたトップレベルの関数である &lt;code&gt;express&lt;/code&gt; モジュール。</target>
        </trans-unit>
        <trans-unit id="b5f9768df081f1924c9b18ffb3dfa94aea45ed27" translate="yes" xml:space="preserve">
          <source>Custom ETag function implementation. Use this only if you know what you are doing.</source>
          <target state="translated">カスタムETag関数の実装。何をしているか分かっている場合のみ使用してください。</target>
        </trans-unit>
        <trans-unit id="fef08213d349f28f036380d77e8c32f99a480dfe" translate="yes" xml:space="preserve">
          <source>Custom trust implementation. Use this only if you know what you are doing.</source>
          <target state="translated">カスタムトラストの実装。何をしているか分かっている場合にのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="bbf6822e7b38afad37af8f466801fe46bd54a7a5" translate="yes" xml:space="preserve">
          <source>Database integration</source>
          <target state="translated">データベース統合</target>
        </trans-unit>
        <trans-unit id="eb9a4bc1c0c153e4e4b042a79113b815b7e3021d" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="translated">Date</target>
        </trans-unit>
        <trans-unit id="69b5effa09b6ccbb3f8c7139ed0171e16055e242" translate="yes" xml:space="preserve">
          <source>Debugging Express</source>
          <target state="translated">デバッグエクスプレス</target>
        </trans-unit>
        <trans-unit id="808d7dca8a74d84af27a2d6602c3d786de45fe1e" translate="yes" xml:space="preserve">
          <source>Default</source>
          <target state="translated">Default</target>
        </trans-unit>
        <trans-unit id="283147ee408e671dc411e548f906c967eaa09ebb" translate="yes" xml:space="preserve">
          <source>Defend against SQL injection attacks by using parameterized queries or prepared statements.</source>
          <target state="translated">パラメータ化されたクエリや準備されたステートメントを使用して、SQLインジェクション攻撃を防御します。</target>
        </trans-unit>
        <trans-unit id="63457bed982aca50d677cb6b107cd96fd69707e3" translate="yes" xml:space="preserve">
          <source>Define error-handling middleware functions in the same way as other middleware functions, except error-handling functions have four arguments instead of three: &lt;code&gt;(err, req, res, next)&lt;/code&gt;. For example:</source>
          <target state="translated">エラー処理関数が3つではなく4つの引数を持っていることを除いて、他のミドルウェア関数と同じ方法でエラー処理ミドルウェア関数を定義します： &lt;code&gt;(err, req, res, next)&lt;/code&gt; 。例えば：</target>
        </trans-unit>
        <trans-unit id="74410d88f9bcbabc46b8d2b9794524e545a7d113" translate="yes" xml:space="preserve">
          <source>Define error-handling middleware functions in the same way as other middleware functions, except with four arguments instead of three, specifically with the signature &lt;code&gt;(err, req, res, next)&lt;/code&gt;):</source>
          <target state="translated">エラー処理ミドルウェア関数は、他のミドルウェア関数と同じ方法で定義します。ただし、3つではなく4つの引数、特にシグネチャ &lt;code&gt;(err, req, res, next)&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="efa3856cae077ea25e7a24ff86483690e66719e1" translate="yes" xml:space="preserve">
          <source>Depending on how your file and directory privileges are configured, you might need to run this command with &lt;code&gt;sudo&lt;/code&gt;.</source>
          <target state="translated">ファイルとディレクトリの権限の構成方法によっては、このコマンドを &lt;code&gt;sudo&lt;/code&gt; で実行する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="e890fe73a613555ff53cc22d6259fcf78b15bb71" translate="yes" xml:space="preserve">
          <source>Deprecated. Use either &lt;code&gt;req.params&lt;/code&gt;, &lt;code&gt;req.body&lt;/code&gt; or &lt;code&gt;req.query&lt;/code&gt;, as applicable.</source>
          <target state="translated">非推奨。必要に &lt;code&gt;req.query&lt;/code&gt; 、 &lt;code&gt;req.params&lt;/code&gt; 、 &lt;code&gt;req.body&lt;/code&gt; またはreq.queryのいずれかを使用します。</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="355b40c6a56802c99d08deb2869f9ff4908b9b30" translate="yes" xml:space="preserve">
          <source>Determines how dotfiles (files or directories that begin with a dot &amp;ldquo;.&amp;rdquo;) are treated.</source>
          <target state="translated">ドットファイル（ドット「。」で始まるファイルまたはディレクトリ）の処理方法を決定します。</target>
        </trans-unit>
        <trans-unit id="8e967c392d45c339a714e68356e7584d4cef20dd" translate="yes" xml:space="preserve">
          <source>Developing template engines for Express</source>
          <target state="translated">Express用テンプレートエンジンの開発</target>
        </trans-unit>
        <trans-unit id="395319dc3ac6ba2eadf3e73f941388e5d68cc916" translate="yes" xml:space="preserve">
          <source>Development and production environments are usually set up differently and have vastly different requirements. What&amp;rsquo;s fine in development may not be acceptable in production. For example, in a development environment you may want verbose logging of errors for debugging, while the same behavior can become a security concern in a production environment. And in development, you don&amp;rsquo;t need to worry about scalability, reliability, and performance, while those concerns become critical in production.</source>
          <target state="translated">開発環境と本番環境は通常、設定が異なり、要件も大きく異なります。開発で問題ないことは、本番環境では受け入れられない場合があります。たとえば、開発環境では、デバッグのためにエラーの詳細なログを記録したい場合がありますが、本番環境では同じ動作がセキュリティ上の問題になる可能性があります。また、開発では、スケーラビリティ、信頼性、パフォーマンスについて心配する必要はありませんが、本番環境ではこれらの懸念が重要になります。</target>
        </trans-unit>
        <trans-unit id="3b4148395bb6549811f872a7ceeaea541533ad74" translate="yes" xml:space="preserve">
          <source>Direct access to &lt;code&gt;req.body&lt;/code&gt;, &lt;code&gt;req.params&lt;/code&gt;, and &lt;code&gt;req.query&lt;/code&gt; should be favoured for clarity - unless you truly accept input from each object.</source>
          <target state="translated">&lt;code&gt;req.body&lt;/code&gt; 、 &lt;code&gt;req.params&lt;/code&gt; 、および &lt;code&gt;req.query&lt;/code&gt; への直接アクセスは、明確にするために推奨されます-各オブジェクトからの入力を本当に受け入れない限り。</target>
        </trans-unit>
        <trans-unit id="177b170232cb2b6f2679fe51e94b3eb6bb0030cb" translate="yes" xml:space="preserve">
          <source>Disable logging for static content requests by loading the logger middleware after the static middleware:</source>
          <target state="translated">静的ミドルウェアの後にロガーミドルウェアをロードして、静的コンテンツ要求のロギングを無効にします。</target>
        </trans-unit>
        <trans-unit id="de7f437451643bf07da610fc32ccc892f4e42e0f" translate="yes" xml:space="preserve">
          <source>Disable query parsing by setting the value to &lt;code&gt;false&lt;/code&gt;, or set the query parser to use either &amp;ldquo;simple&amp;rdquo; or &amp;ldquo;extended&amp;rdquo; or a custom query string parsing function.</source>
          <target state="translated">値を &lt;code&gt;false&lt;/code&gt; に設定してクエリ解析を無効にするか、「シンプル」または「拡張」またはカスタムクエリ文字列解析関数を使用するようにクエリパーサーを設定します。</target>
        </trans-unit>
        <trans-unit id="ecefd5dcb9ac37b6c6fd72059f423b6bb6a06c0b" translate="yes" xml:space="preserve">
          <source>Disabled by default, &amp;ldquo;/foo&amp;rdquo; and &amp;ldquo;/foo/&amp;rdquo; are treated the same by the router.</source>
          <target state="translated">デフォルトでは無効になっており、「/ foo」と「/ foo /」はルーターによって同じように扱われます。</target>
        </trans-unit>
        <trans-unit id="1b0e1d5ccf4b50e274020c71b61f85d00aeb83e0" translate="yes" xml:space="preserve">
          <source>Disabled by default, treating &amp;ldquo;/Foo&amp;rdquo; and &amp;ldquo;/foo&amp;rdquo; as the same.</source>
          <target state="translated">「/ Foo」と「/ foo」を同じものとして扱い、デフォルトで無効になっています。</target>
        </trans-unit>
        <trans-unit id="933c4cca541b19809e42884f7bd1ee08237a999d" translate="yes" xml:space="preserve">
          <source>Display the command options with the &lt;code&gt;-h&lt;/code&gt; option:</source>
          <target state="translated">&lt;code&gt;-h&lt;/code&gt; オプションを使用してコマンドオプションを表示します。</target>
        </trans-unit>
        <trans-unit id="19c9b4d67d7f2f85a95c6850ccf2bc6dd1f307e8" translate="yes" xml:space="preserve">
          <source>Do logging correctly</source>
          <target state="translated">ログを正しく記録する</target>
        </trans-unit>
        <trans-unit id="3abfaa6f9945482eef90724bb65936e73d40132d" translate="yes" xml:space="preserve">
          <source>Domain name for the cookie. Defaults to the domain name of the app.</source>
          <target state="translated">クッキーのドメイン名。デフォルトはアプリのドメイン名です。</target>
        </trans-unit>
        <trans-unit id="4daa1b4d384252c37dcc70f8befd62bc8e7ceacb" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t use deprecated or vulnerable versions of Express</source>
          <target state="translated">非推奨または脆弱なバージョンのExpressを使用しない</target>
        </trans-unit>
        <trans-unit id="296d8acfb36e5628ff91d68643f0449036029b34" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t use synchronous functions</source>
          <target state="translated">同期関数を使用しない</target>
        </trans-unit>
        <trans-unit id="9cac199c873b3d4a0b8745e8b8991bffb9da76f6" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t use the default session cookie name</source>
          <target state="translated">デフォルトのセッションCookie名を使用しない</target>
        </trans-unit>
        <trans-unit id="56d4922a1b14e40a4157bc19bed28daa3d77af6c" translate="yes" xml:space="preserve">
          <source>Each route can have one or more handler functions, which are executed when the route is matched.</source>
          <target state="translated">各ルートは 1 つ以上のハンドラ関数を持つことができ、ルートが一致したときに実行されます。</target>
        </trans-unit>
        <trans-unit id="a93da6fd3db3cf2b7d517575dc24e78cc5ef81bb" translate="yes" xml:space="preserve">
          <source>Easily manage multi-host deployments with Nginx integration.</source>
          <target state="translated">Nginx との統合により、マルチホストデプロイメントを簡単に管理できます。</target>
        </trans-unit>
        <trans-unit id="65e77a657e6f7606609d964055dbc77d35aca70d" translate="yes" xml:space="preserve">
          <source>Easily scale to multiple hosts with integrated control for Nginx load balancer.</source>
          <target state="translated">Nginxロードバランサーの統合制御により、複数のホストに簡単にスケールできます。</target>
        </trans-unit>
        <trans-unit id="584a02b90ea0bff9e02bf65dd40ffc1d35622c27" translate="yes" xml:space="preserve">
          <source>ElasticSearch</source>
          <target state="translated">ElasticSearch</target>
        </trans-unit>
        <trans-unit id="5a227f0a032d8f32f13183dceacbb6f0bd6738df" translate="yes" xml:space="preserve">
          <source>Embedded below is essentially the simplest Express app you can create. It is a single file app &amp;mdash; &lt;em&gt;not&lt;/em&gt; what you&amp;rsquo;d get if you use the &lt;a href=&quot;generator&quot;&gt;Express generator&lt;/a&gt;, which creates the scaffolding for a full app with numerous JavaScript files, Jade templates, and sub-directories for various purposes.</source>
          <target state="translated">以下に埋め込まれているのは、基本的に、作成できる最も単純なExpressアプリです。これは、単一のファイルアプリです- &lt;em&gt;ではない&lt;/em&gt;あなたが使用している場合、あなたが何を取得したい&lt;a href=&quot;generator&quot;&gt;エクスプレス・ジェネレータ&lt;/a&gt;さまざまな目的のために、多数のJavaScriptファイル、ジェイドテンプレート、およびサブディレクトリとの完全なアプリケーションのための足場を作成し、。</target>
        </trans-unit>
        <trans-unit id="aaae3f8a6561770f46b72bdb101aef7e553d615e" translate="yes" xml:space="preserve">
          <source>Enable case sensitivity.</source>
          <target state="translated">大文字小文字の区別を有効にします。</target>
        </trans-unit>
        <trans-unit id="290934897c1ae866ca5a42316e7aff2e90c8bd5a" translate="yes" xml:space="preserve">
          <source>Enable case sensitivity. When enabled, &quot;/Foo&quot; and &quot;/foo&quot; are different routes. When disabled, &quot;/Foo&quot; and &quot;/foo&quot; are treated the same.</source>
          <target state="translated">大文字小文字の区別を有効にします。有効にすると、&quot;/Foo &quot;と&quot;/foo &quot;は別のルートとして扱われます。無効にすると、&quot;/Foo &quot;と&quot;/foo &quot;は同じ扱いになります。</target>
        </trans-unit>
        <trans-unit id="b4925bdf056754098ee593a4509dcc3bbe83d191" translate="yes" xml:space="preserve">
          <source>Enable escaping JSON responses from the &lt;code&gt;res.json&lt;/code&gt;, &lt;code&gt;res.jsonp&lt;/code&gt;, and &lt;code&gt;res.send&lt;/code&gt; APIs. This will escape the characters &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;amp;&lt;/code&gt; as Unicode escape sequences in JSON. The purpose of this it to assist with &lt;a href=&quot;https://blog.mozilla.org/security/2017/07/18/web-service-audits-firefox-accounts/&quot;&gt;mitigating certain types of persistent XSS attacks&lt;/a&gt; when clients sniff responses for HTML.</source>
          <target state="translated">&lt;code&gt;res.json&lt;/code&gt; 、 &lt;code&gt;res.jsonp&lt;/code&gt; 、および &lt;code&gt;res.send&lt;/code&gt; API からのJSON応答のエスケープを有効にします。これは、JSONのUnicodeエスケープシーケンスとして文字 &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&lt;/code&gt; 、および &lt;code&gt;&amp;amp;&lt;/code&gt; をエスケープします。これの目的は、クライアントがHTMLの応答をスニッフィング&lt;a href=&quot;https://blog.mozilla.org/security/2017/07/18/web-service-audits-firefox-accounts/&quot;&gt;する&lt;/a&gt;ときに特定のタイプの永続的なXSS攻撃を軽減するのを支援することです。</target>
        </trans-unit>
        <trans-unit id="b0fc9a744bd05f7f71df33f42087b2c0f435a9c7" translate="yes" xml:space="preserve">
          <source>Enable or disable accepting ranged requests.</source>
          <target state="translated">レンジ要求を受け入れるかどうかを設定します。</target>
        </trans-unit>
        <trans-unit id="683b0a904d666142219022571616465fa3d6da2c" translate="yes" xml:space="preserve">
          <source>Enable or disable etag generation</source>
          <target state="translated">エタグの生成を有効または無効にする</target>
        </trans-unit>
        <trans-unit id="308623cd84148b092681fb0e3b18eb11379c8147" translate="yes" xml:space="preserve">
          <source>Enable or disable setting &lt;code&gt;Cache-Control&lt;/code&gt; response header.</source>
          <target state="translated">&lt;code&gt;Cache-Control&lt;/code&gt; 応答ヘッダーの設定を有効または無効にします。</target>
        </trans-unit>
        <trans-unit id="ee7f574f5f24332efc93e0aaa4b80169cf7b3d20" translate="yes" xml:space="preserve">
          <source>Enable or disable the &lt;code&gt;immutable&lt;/code&gt; directive in the &lt;code&gt;Cache-Control&lt;/code&gt; response header. If enabled, the &lt;code&gt;maxAge&lt;/code&gt; option should also be specified to enable caching. The &lt;code&gt;immutable&lt;/code&gt; directive will prevent supported clients from making conditional requests during the life of the &lt;code&gt;maxAge&lt;/code&gt; option to check if the file has changed.</source>
          <target state="translated">&lt;code&gt;Cache-Control&lt;/code&gt; 応答ヘッダーの &lt;code&gt;immutable&lt;/code&gt; ディレクティブを有効または無効にします。有効にする場合は、キャッシュを有効にするために &lt;code&gt;maxAge&lt;/code&gt; オプションも指定する必要があります。 &lt;code&gt;immutable&lt;/code&gt; ディレクティブはの期間中に条件付きの要求を行うからサポートされるクライアントを防ぐことができます &lt;code&gt;maxAge&lt;/code&gt; ファイルが変更されたかどうかを確認するためのオプション。</target>
        </trans-unit>
        <trans-unit id="fd28c0780fb38d33a717b8ae0d6f206e8210a23f" translate="yes" xml:space="preserve">
          <source>Enable service</source>
          <target state="translated">サービスを有効にする</target>
        </trans-unit>
        <trans-unit id="daea9cd09e7d3ff730530d1d6dd5c8fb4d59c7d9" translate="yes" xml:space="preserve">
          <source>Enable strict routing.</source>
          <target state="translated">厳格なルーティングを有効にします。</target>
        </trans-unit>
        <trans-unit id="b0fd3968227e357983b2d0342190fd0f040096c9" translate="yes" xml:space="preserve">
          <source>Enable strict routing. When enabled, the router treats &quot;/foo&quot; and &quot;/foo/&quot; as different. Otherwise, the router treats &quot;/foo&quot; and &quot;/foo/&quot; as the same.</source>
          <target state="translated">厳格なルーティングを有効にします。有効にすると、ルータは &quot;/foo&quot; と &quot;/foo/&quot; を別のものとして扱います。そうでない場合、ルータは &quot;/foo&quot; と &quot;/foo/&quot; を同じものとして扱います。</target>
        </trans-unit>
        <trans-unit id="df174a3f2faa31814e06540acda7af8825403fac" translate="yes" xml:space="preserve">
          <source>Enabled</source>
          <target state="translated">Enabled</target>
        </trans-unit>
        <trans-unit id="4fb36a502afc43e2085c32693013b19cb30d5949" translate="yes" xml:space="preserve">
          <source>Enables or disables handling deflated (compressed) bodies; when disabled, deflated bodies are rejected.</source>
          <target state="translated">膨らんだ(圧縮された)体の取り扱いを有効または無効にします。無効にすると、膨らんだ体は拒否されます。</target>
        </trans-unit>
        <trans-unit id="c8dbf4ebae577d8a22b7bb1410c30a40d565b09e" translate="yes" xml:space="preserve">
          <source>Enables or disables only accepting arrays and objects; when disabled will accept anything &lt;code&gt;JSON.parse&lt;/code&gt; accepts.</source>
          <target state="translated">配列とオブジェクトの受け入れのみを有効または無効にします。無効にすると、 &lt;code&gt;JSON.parse&lt;/code&gt; が受け入れるものはすべて受け入れられます。</target>
        </trans-unit>
        <trans-unit id="e02124e195f8401437f6e1760caddbe296b09841" translate="yes" xml:space="preserve">
          <source>Enables the &quot;X-Powered-By: Express&quot; HTTP header.</source>
          <target state="translated">X-Powered-By.Express &quot;を有効にします。Express&quot; HTTPヘッダを有効にします。</target>
        </trans-unit>
        <trans-unit id="b831099575472a0997d0cd9cec90b1e61747bab2" translate="yes" xml:space="preserve">
          <source>Enables view template compilation caching.</source>
          <target state="translated">ビューテンプレートのコンパイルキャッシングを有効にします。</target>
        </trans-unit>
        <trans-unit id="5ee8b1cd18665546f9feb923141e6fcde419c3d7" translate="yes" xml:space="preserve">
          <source>Enabling &lt;code&gt;trust proxy&lt;/code&gt; will have the following impact:</source>
          <target state="translated">&lt;code&gt;trust proxy&lt;/code&gt; を有効にすると、次の影響があります。</target>
        </trans-unit>
        <trans-unit id="26d259233f7c87b0a6bc726137c058ca8161952f" translate="yes" xml:space="preserve">
          <source>End the request-response cycle.</source>
          <target state="translated">リクエスト-レスポンスサイクルを終了します。</target>
        </trans-unit>
        <trans-unit id="09370a9dadac55b49447c02db9cd08d0d8d99aba" translate="yes" xml:space="preserve">
          <source>End the response process.</source>
          <target state="translated">レスポンス処理を終了します。</target>
        </trans-unit>
        <trans-unit id="9c63a8c2a5cd15f961c097c5bd515c652c759b1f" translate="yes" xml:space="preserve">
          <source>Ends the response process. This method actually comes from Node core, specifically the &lt;a href=&quot;https://nodejs.org/api/http.html#http_response_end_data_encoding_callback&quot;&gt;response.end() method of http.ServerResponse&lt;/a&gt;.</source>
          <target state="translated">応答プロセスを終了します。このメソッドは実際にはNodeコア、具体的に&lt;a href=&quot;https://nodejs.org/api/http.html#http_response_end_data_encoding_callback&quot;&gt;はhttp.ServerResponseのresponse.end（）メソッドから取得され&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="fa647a2778919f7258bf7fd4e7b43b96889c41ad" translate="yes" xml:space="preserve">
          <source>Ensure that you load the &lt;code&gt;debug&lt;/code&gt; module at the top of the &lt;code&gt;app.js&lt;/code&gt; file by using the following code:</source>
          <target state="translated">次のコードを使用して、 &lt;code&gt;app.js&lt;/code&gt; ファイルの先頭にある &lt;code&gt;debug&lt;/code&gt; モジュールをロードしてください。</target>
        </trans-unit>
        <trans-unit id="9331c28dfcf6513451a3a3900685f58b58408845" translate="yes" xml:space="preserve">
          <source>Ensure your app automatically restarts</source>
          <target state="translated">アプリが自動的に再起動するようにする</target>
        </trans-unit>
        <trans-unit id="921ff94608d0044deb33358a872725af10a5e4cc" translate="yes" xml:space="preserve">
          <source>Ensure your dependencies are secure</source>
          <target state="translated">依存関係が安全であることを確認する</target>
        </trans-unit>
        <trans-unit id="9caa5a83c98554a44535c501ff2c2d0cbe0ce963" translate="yes" xml:space="preserve">
          <source>Enter &lt;code&gt;app.js&lt;/code&gt;, or whatever you want the name of the main file to be. If you want it to be &lt;code&gt;index.js&lt;/code&gt;, hit RETURN to accept the suggested default file name.</source>
          <target state="translated">&lt;code&gt;app.js&lt;/code&gt; またはメインファイルの名前にしたい名前を入力します。 &lt;code&gt;index.js&lt;/code&gt; にしたい場合は、RETURNを押して、提案されたデフォルトのファイル名を受け入れます。</target>
        </trans-unit>
        <trans-unit id="0d05e4786c70859b9060b91fc7226e8f68f81644" translate="yes" xml:space="preserve">
          <source>Environment mode. Be sure to set to &quot;production&quot; in a production environment; see &lt;a href=&quot;http://expressjs.com/advanced/best-practice-performance.html#env&quot;&gt;Production best practices: performance and reliability&lt;/a&gt;.</source>
          <target state="translated">環境モード。本番環境では必ず「本番」に設定してください。&lt;a href=&quot;http://expressjs.com/advanced/best-practice-performance.html#env&quot;&gt;本番環境のベストプラクティス：パフォーマンスと信頼性を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="5fff1f56919b006049c274c6c76fbbe56470ee4c" translate="yes" xml:space="preserve">
          <source>Error Handling</source>
          <target state="translated">エラー処理</target>
        </trans-unit>
        <trans-unit id="8281542a412265940e3267b1ec8612b789126d4b" translate="yes" xml:space="preserve">
          <source>Error Handling in Node.js</source>
          <target state="translated">Node.jsでのエラー処理</target>
        </trans-unit>
        <trans-unit id="5e71f261f0dd38232943dfd87fe479dd7c19cdcb" translate="yes" xml:space="preserve">
          <source>Error-handling middleware</source>
          <target state="translated">エラー処理ミドルウェア</target>
        </trans-unit>
        <trans-unit id="f7ca32af93ddb79fa55144e3c8df59140806aea2" translate="yes" xml:space="preserve">
          <source>Error-handling middleware always takes &lt;em&gt;four&lt;/em&gt; arguments. You must provide four arguments to identify it as an error-handling middleware function. Even if you don&amp;rsquo;t need to use the &lt;code&gt;next&lt;/code&gt; object, you must specify it to maintain the signature. Otherwise, the &lt;code&gt;next&lt;/code&gt; object will be interpreted as regular middleware and will fail to handle errors.</source>
          <target state="translated">エラー処理ミドルウェアは常に&lt;em&gt;4つの&lt;/em&gt;引数を取ります。それをエラー処理ミドルウェア関数として識別するには、4つの引数を指定する必要があります。 &lt;code&gt;next&lt;/code&gt; オブジェクトを使用する必要がない場合でも、署名を維持するために指定する必要があります。そうでない場合、 &lt;code&gt;next&lt;/code&gt; オブジェクトは通常のミドルウェアとして解釈され、エラーの処理に失敗します。</target>
        </trans-unit>
        <trans-unit id="c6ca31933bd984ea2c860446228da1566be399ee" translate="yes" xml:space="preserve">
          <source>Error-handling middleware always takes &lt;em&gt;four&lt;/em&gt; arguments. You must provide four arguments to identify it as an error-handling middleware function. Even if you don&amp;rsquo;t need to use the &lt;code&gt;next&lt;/code&gt; object, you must specify it to maintain the signature. Otherwise, the &lt;code&gt;next&lt;/code&gt; object will be interpreted as regular middleware and will fail to handle errors. For details about error-handling middleware, see: &lt;a href=&quot;guide/error-handling&quot;&gt;Error handling&lt;/a&gt;.</source>
          <target state="translated">エラー処理ミドルウェアは常に&lt;em&gt;4つの&lt;/em&gt;引数を取ります。これをエラー処理ミドルウェア関数として識別するには、4つの引数を指定する必要があります。 &lt;code&gt;next&lt;/code&gt; オブジェクトを使用する必要がない場合でも、署名を維持するために指定する必要があります。そうでない場合、 &lt;code&gt;next&lt;/code&gt; オブジェクトは通常のミドルウェアとして解釈され、エラーの処理に失敗します。エラー処理ミドルウェアの詳細については、「&lt;a href=&quot;guide/error-handling&quot;&gt;エラー処理&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="0ce9d9e0a68ed06118b1ffcc01b0e2fc1defe7ef" translate="yes" xml:space="preserve">
          <source>Errors that occur in synchronous code inside route handlers and middleware require no extra work. If synchronous code throws an error, then Express will catch and process it. For example:</source>
          <target state="translated">ルートハンドラやミドルウェア内部の同期コードで発生するエラーは、余分な作業を必要としません。同期コードがエラーをスローした場合、Express はそれをキャッチして処理します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="f7406fc33372be802c862fdccd6bc7614bdb8a5a" translate="yes" xml:space="preserve">
          <source>Even if you use a path pattern or a set of path patterns to load the router, the &lt;code&gt;baseUrl&lt;/code&gt; property returns the matched string, not the pattern(s). In the following example, the &lt;code&gt;greet&lt;/code&gt; router is loaded on two path patterns.</source>
          <target state="translated">パスパターンまたはパスパターンのセットを使用してルーターをロードする場合でも、 &lt;code&gt;baseUrl&lt;/code&gt; プロパティはパターンではなく一致した文字列を返します。次の例では、 &lt;code&gt;greet&lt;/code&gt; ルータが2つのパスパターンにロードされています。</target>
        </trans-unit>
        <trans-unit id="0c274a5610a446bdb5d5fc8235d3f9b9c4b109f2" translate="yes" xml:space="preserve">
          <source>Even though the authentication middleware was added via the &lt;code&gt;authRouter&lt;/code&gt; it will run on the routes defined by the &lt;code&gt;openRouter&lt;/code&gt; as well since both routers were mounted on &lt;code&gt;/users&lt;/code&gt;. To avoid this behavior, use different paths for each router.</source>
          <target state="translated">認証ミドルウェアは &lt;code&gt;authRouter&lt;/code&gt; を介して追加されていますが、両方のルーターが &lt;code&gt;/users&lt;/code&gt; にマウントされているため、 &lt;code&gt;openRouter&lt;/code&gt; によって定義されたルートでも実行されます。この動作を回避するには、ルーターごとに異なるパスを使用します。</target>
        </trans-unit>
        <trans-unit id="9363c652e438297c2a368c79ef52bcb161df4d27" translate="yes" xml:space="preserve">
          <source>Event emitters (like streams) can still cause uncaught exceptions. So make sure you are handling the error event properly; for example:</source>
          <target state="translated">イベントエミッタ (ストリームなど)は、捕捉されない例外を発生させる可能性があります。そのため、エラーイベントを適切に処理していることを確認してください。</target>
        </trans-unit>
        <trans-unit id="c5497bca58468ae64aed6c0fd921109217988db3" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">Events</target>
        </trans-unit>
        <trans-unit id="65619610050ac2e98be01ba3a9ad5fa1553b30fc" translate="yes" xml:space="preserve">
          <source>Every time the app receives a request, it prints the message &amp;ldquo;LOGGED&amp;rdquo; to the terminal.</source>
          <target state="translated">アプリはリクエストを受け取るたびに、「LOGGED」というメッセージを端末に出力します。</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="12c8833ce8cbdb16bb6aa3ade9305cfe4e091e32" translate="yes" xml:space="preserve">
          <source>Example (v2.*)</source>
          <target state="translated">例(v2.*)</target>
        </trans-unit>
        <trans-unit id="dde6571d55508797814836beeddcf4137f57cecb" translate="yes" xml:space="preserve">
          <source>Example (v3.*)</source>
          <target state="translated">例(v3.*)</target>
        </trans-unit>
        <trans-unit id="299c7f425e0a9c911a627d9bda1241ca4ff68141" translate="yes" xml:space="preserve">
          <source>Example app migration</source>
          <target state="translated">アプリの移行例</target>
        </trans-unit>
        <trans-unit id="dd94ba99bf7abc74d479f670089b45dea2900278" translate="yes" xml:space="preserve">
          <source>Example of express.static</source>
          <target state="translated">express.staticの例</target>
        </trans-unit>
        <trans-unit id="ef78410618df3c7269c534510b45cc0449040c3b" translate="yes" xml:space="preserve">
          <source>Example output from the previous snippet:</source>
          <target state="translated">前のスニペットの出力例</target>
        </trans-unit>
        <trans-unit id="1acbe55bd8a3c83dd1fbadb8a8db9d81006a79c9" translate="yes" xml:space="preserve">
          <source>Example use case: You need to set a domain-wide cookie for another site in your organization. This other site (not under your administrative control) does not use URI-encoded cookie values.</source>
          <target state="translated">使用例。組織内の別のサイトのためにドメイン全体のクッキーを設定する必要があります。この別のサイト(管理者の管理下ではない)は、URIエンコードされたクッキーの値を使用しません。</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="305f3d3ccbbbf08250508b2e0d204454f1a1d49e" translate="yes" xml:space="preserve">
          <source>Examples of route paths based on regular expressions:</source>
          <target state="translated">正規表現に基づくルートパスの例</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="e9992f62588d0ca9c8dbf56eb92dc1764347f9a7" translate="yes" xml:space="preserve">
          <source>Exceptions: Sub-apps will inherit the value of &lt;code&gt;trust proxy&lt;/code&gt; even though it has a default value (for backward-compatibility); Sub-apps will not inherit the value of &lt;code&gt;view cache&lt;/code&gt; in production (when &lt;code&gt;NODE_ENV&lt;/code&gt; is &amp;ldquo;production&amp;rdquo;).</source>
          <target state="translated">例外：サブアプリは、デフォルト値（下位互換性のため）を持っている場合でも、 &lt;code&gt;trust proxy&lt;/code&gt; の値を継承します。 &lt;code&gt;NODE_ENV&lt;/code&gt; は、本番環境の &lt;code&gt;view cache&lt;/code&gt; の値を継承しません（NODE_ENVが「本番」の場合）。</target>
        </trans-unit>
        <trans-unit id="370ba317bdf9c07fc70af648c857d625e16cf9a8" translate="yes" xml:space="preserve">
          <source>Execute any code.</source>
          <target state="translated">任意のコードを実行します。</target>
        </trans-unit>
        <trans-unit id="2fc1d6576199547fe59e32b2865eca4d8495be27" translate="yes" xml:space="preserve">
          <source>Execute the following command to create an Express 4 app:</source>
          <target state="translated">次のコマンドを実行して、Express 4 アプリを作成します。</target>
        </trans-unit>
        <trans-unit id="e12214976fff259be4a8925b389673e6259fdb9d" translate="yes" xml:space="preserve">
          <source>Expiry date of the cookie in GMT. If not specified or set to 0, creates a session cookie.</source>
          <target state="translated">クッキーの有効期限を GMT で指定します。指定されていないか 0 に設定されている場合、セッションクッキーを作成します。</target>
        </trans-unit>
        <trans-unit id="8b652040961793dd0ebfc35016e694eff7d88f91" translate="yes" xml:space="preserve">
          <source>Express</source>
          <target state="translated">Express</target>
        </trans-unit>
        <trans-unit id="ad5d6fe52dea035b0141b8257837a4fbaeb9c918" translate="yes" xml:space="preserve">
          <source>Express 2.x and 3.x are no longer maintained. Security and performance issues in these versions won&amp;rsquo;t be fixed. Do not use them! If you haven&amp;rsquo;t moved to version 4, follow the &lt;a href=&quot;../guide/migrating-4&quot;&gt;migration guide&lt;/a&gt;.</source>
          <target state="translated">Express 2.xおよび3.xは保守されなくなりました。これらのバージョンのセキュリティとパフォーマンスの問題は修正されません。それらを使用しないでください！バージョン4に移行していない場合は、&lt;a href=&quot;../guide/migrating-4&quot;&gt;移行ガイド&lt;/a&gt;に従ってください。</target>
        </trans-unit>
        <trans-unit id="3d9bf96593fc845e97e1749566cd8d3b18b7f796" translate="yes" xml:space="preserve">
          <source>Express 3</source>
          <target state="translated">エクスプレス3</target>
        </trans-unit>
        <trans-unit id="0e94a09f46665d5d136219942ff7993c91d1317b" translate="yes" xml:space="preserve">
          <source>Express 4</source>
          <target state="translated">エクスプレス4</target>
        </trans-unit>
        <trans-unit id="aee6363985963f481bba1667bfa659a741e5f0dc" translate="yes" xml:space="preserve">
          <source>Express 4 is a breaking change from Express 3. That means an existing Express 3 app will &lt;em&gt;not&lt;/em&gt; work if you update the Express version in its dependencies.</source>
          <target state="translated">Express 4はExpress 3からの重大な変更です。つまり、既存のExpress 3アプリは、依存関係のExpressバージョンを更新すると機能し&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="ef9e667a979971e36ea13a44a155e281bb31a995" translate="yes" xml:space="preserve">
          <source>Express 4 no longer depends on Connect, and removes all built-in middleware from its core, except for the &lt;code&gt;express.static&lt;/code&gt; function. This means that Express is now an independent routing and middleware web framework, and Express versioning and releases are not affected by middleware updates.</source>
          <target state="translated">Express 4はConnectに依存せず、 &lt;code&gt;express.static&lt;/code&gt; 関数を除いて、すべての組み込みミドルウェアをコアから削除します。つまり、Expressは独立したルーティングおよびミドルウェアのWebフレームワークになり、Expressのバージョン管理とリリースはミドルウェアの更新の影響を受けません。</target>
        </trans-unit>
        <trans-unit id="c5a23224dc0b116541eff1df047d6d454b87fbde" translate="yes" xml:space="preserve">
          <source>Express 4 requires Node.js 0.10.x or later and has dropped support for Node.js 0.8.x.</source>
          <target state="translated">Express 4 は Node.js 0.10.x 以降を必要とし、Node.js 0.8.x のサポートを削除しました。</target>
        </trans-unit>
        <trans-unit id="3fe2bc821c6deb30be5bb9b75d083e0324c44bc8" translate="yes" xml:space="preserve">
          <source>Express 5 is not very different from Express 4: The changes to the API are not as significant as from 3.0 to 4.0. Although the basic API remains the same, there are still breaking changes; in other words an existing Express 4 program might not work if you update it to use Express 5.</source>
          <target state="translated">Express 5 は Express 4 とあまり変わりません:API への変更は 3.0 から 4.0 への変更ほど大きくはありません。基本的な API は変わりませんが、破壊的な変更点はまだあります。</target>
        </trans-unit>
        <trans-unit id="51aa71f9113c8621abe8c305410e7d30f30e4b55" translate="yes" xml:space="preserve">
          <source>Express 5 no longer supports the &lt;code&gt;app.del()&lt;/code&gt; function. If you use this function an error is thrown. For registering HTTP DELETE routes, use the &lt;code&gt;app.delete()&lt;/code&gt; function instead.</source>
          <target state="translated">Express 5は &lt;code&gt;app.del()&lt;/code&gt; 関数をサポートしなくなりました。この関数を使用すると、エラーがスローされます。HTTP DELETEルートを登録するには、代わりに &lt;code&gt;app.delete()&lt;/code&gt; 関数を使用します。</target>
        </trans-unit>
        <trans-unit id="4815903856badbfa626d8921d196c44f893d16bb" translate="yes" xml:space="preserve">
          <source>Express 5 no longer supports the signature &lt;code&gt;res.json(obj, status)&lt;/code&gt;. Instead, set the status and then chain it to the &lt;code&gt;res.json()&lt;/code&gt; method like this: &lt;code&gt;res.status(status).json(obj)&lt;/code&gt;.</source>
          <target state="translated">Express 5は、署名 &lt;code&gt;res.json(obj, status)&lt;/code&gt; サポートしなくなりました。代わりに、ステータスを設定して、 &lt;code&gt;res.json()&lt;/code&gt; ようにres.json（）メソッドにチェーンし &lt;code&gt;res.status(status).json(obj)&lt;/code&gt; ：res.status（status）.json（obj）。</target>
        </trans-unit>
        <trans-unit id="52bbb014dd443c7120b5b8b0b927b55126255027" translate="yes" xml:space="preserve">
          <source>Express 5 no longer supports the signature &lt;code&gt;res.jsonp(obj, status)&lt;/code&gt;. Instead, set the status and then chain it to the &lt;code&gt;res.jsonp()&lt;/code&gt; method like this: &lt;code&gt;res.status(status).jsonp(obj)&lt;/code&gt;.</source>
          <target state="translated">Express 5は、署名 &lt;code&gt;res.jsonp(obj, status)&lt;/code&gt; サポートしなくなりました。代わりに、ステータスを設定して、 &lt;code&gt;res.jsonp()&lt;/code&gt; ようにres.jsonp（）メソッドにチェーンし &lt;code&gt;res.status(status).jsonp(obj)&lt;/code&gt; ：res.status（status）.jsonp（obj）。</target>
        </trans-unit>
        <trans-unit id="5bdfe43c809e3e3d58b054a9d1884d885d3e4b49" translate="yes" xml:space="preserve">
          <source>Express 5 no longer supports the signature &lt;code&gt;res.send(&lt;em&gt;status&lt;/em&gt;)&lt;/code&gt;, where &lt;em&gt;&lt;code&gt;status&lt;/code&gt;&lt;/em&gt; is a number. Instead, use the &lt;code&gt;res.sendStatus(statusCode)&lt;/code&gt; function, which sets the HTTP response header status code and sends the text version of the code: &amp;ldquo;Not Found&amp;rdquo;, &amp;ldquo;Internal Server Error&amp;rdquo;, and so on. If you need to send a number by using the &lt;code&gt;res.send()&lt;/code&gt; function, quote the number to convert it to a string, so that Express does not interpret it as an attempt to use the unsupported old signature.</source>
          <target state="translated">Express 5は、シグニチャー &lt;code&gt;res.send(&lt;em&gt;status&lt;/em&gt;)&lt;/code&gt; をサポートしなくなりました。ここで、&lt;em&gt; &lt;code&gt;status&lt;/code&gt; &lt;/em&gt;は数値です。代わりに、 &lt;code&gt;res.sendStatus(statusCode)&lt;/code&gt; 関数を使用します。この関数は、HTTP応答ヘッダーのステータスコードを設定し、コードのテキストバージョン「Not Found」、「Internal Server Error」などを送信します。 &lt;code&gt;res.send()&lt;/code&gt; 関数を使用して数値を送信する必要がある場合は、数値を引用符で囲んで文字列に変換します。これにより、Expressがサポートされていない古い署名を使用しようとすると解釈されなくなります。</target>
        </trans-unit>
        <trans-unit id="dc743dc3a52d4882e64fffd799de194f73c656aa" translate="yes" xml:space="preserve">
          <source>Express 5 no longer supports the signature &lt;code&gt;res.send(obj, status)&lt;/code&gt;. Instead, set the status and then chain it to the &lt;code&gt;res.send()&lt;/code&gt; method like this: &lt;code&gt;res.status(status).send(obj)&lt;/code&gt;.</source>
          <target state="translated">Express 5は、署名 &lt;code&gt;res.send(obj, status)&lt;/code&gt; サポートしなくなりました。代わりに、ステータスを設定してから、 &lt;code&gt;res.status(status).send(obj)&lt;/code&gt; のように、 &lt;code&gt;res.send()&lt;/code&gt; メソッドにチェーンします。</target>
        </trans-unit>
        <trans-unit id="d115d8039b4e68a805613633ec80224b78699388" translate="yes" xml:space="preserve">
          <source>Express 5.0 is still in the alpha release stage, but here is a preview of the changes that will be in the release and how to migrate your Express 4 app to Express 5.</source>
          <target state="translated">Express 5.0はまだアルファリリースの段階ですが、ここではリリースされる変更点のプレビューと、Express 4アプリをExpress 5に移行する方法をご紹介します。</target>
        </trans-unit>
        <trans-unit id="1c079477e7fb1b53626e8efcbd0bf6844793708f" translate="yes" xml:space="preserve">
          <source>Express application generator</source>
          <target state="translated">エクスプレスアプリケーションジェネレータ</target>
        </trans-unit>
        <trans-unit id="e8236b4029899aba96fb949a3639ae589a00d033" translate="yes" xml:space="preserve">
          <source>Express behind proxies</source>
          <target state="translated">プロキシの背後にある表現</target>
        </trans-unit>
        <trans-unit id="1a1fa9a47485e8344e2b19ca23b1da7c381fb835" translate="yes" xml:space="preserve">
          <source>Express comes with a built-in error handler that takes care of any errors that might be encountered in the app. This default error-handling middleware function is added at the end of the middleware function stack.</source>
          <target state="translated">Expressには、アプリ内で発生する可能性のあるエラーを処理するエラーハンドラが組み込まれています。このデフォルトのエラー処理ミドルウェア関数は、ミドルウェア関数スタックの最後に追加されます。</target>
        </trans-unit>
        <trans-unit id="9bdcddec39e37e93db9915e12a5e151bc4ca90e8" translate="yes" xml:space="preserve">
          <source>Express has no notion of a database. This concept is left up to third-party Node modules, allowing you to interface with nearly any database.</source>
          <target state="translated">Expressにはデータベースの概念がありません。この概念はサードパーティの Node モジュールに委ねられており、ほぼすべてのデータベースとのインターフェースを可能にしています。</target>
        </trans-unit>
        <trans-unit id="c54a2456daa991b01562a70bb06c154efd81bdfe" translate="yes" xml:space="preserve">
          <source>Express has the following built-in middleware functions:</source>
          <target state="translated">Expressには以下のようなミドルウェア機能が組み込まれています。</target>
        </trans-unit>
        <trans-unit id="947ec9fdb910970e90d5b4d30f29d2774efe0272" translate="yes" xml:space="preserve">
          <source>Express is a routing and middleware web framework that has minimal functionality of its own: An Express application is essentially a series of middleware function calls.</source>
          <target state="translated">Expressは、ルーティングとミドルウェアのWebフレームワークであり、独自の最小限の機能を持っています。Express アプリケーションは基本的に一連のミドルウェアの関数呼び出しです。</target>
        </trans-unit>
        <trans-unit id="2143e0061636801d688a3573d60a19bc831bfd70" translate="yes" xml:space="preserve">
          <source>Express looks up the files in the order in which you set the static directories with the &lt;code&gt;express.static&lt;/code&gt; middleware function.</source>
          <target state="translated">Expressは、 &lt;code&gt;express.static&lt;/code&gt; ミドルウェア関数で静的ディレクトリを設定した順序でファイルを検索します。</target>
        </trans-unit>
        <trans-unit id="c7c1bc8fd1ab75ca2f3c84e5e43534558919455a" translate="yes" xml:space="preserve">
          <source>Express looks up the files relative to the static directory, so the name of the static directory is not part of the URL.</source>
          <target state="translated">Express は静的ディレクトリからの相対的なファイルを参照するので、静的ディレクトリの名前は URL の一部ではありません。</target>
        </trans-unit>
        <trans-unit id="cac2a48b045013479fd1d6ab8616723ca1a65dc0" translate="yes" xml:space="preserve">
          <source>Express supports any template engine that conforms with the &lt;code&gt;(path, locals, callback)&lt;/code&gt; signature. To normalize template engine interfaces and caching, see the &lt;a href=&quot;https://github.com/visionmedia/consolidate.js&quot;&gt;consolidate.js&lt;/a&gt; project for support. Unlisted template engines might still support the Express signature.</source>
          <target state="translated">Expressは、 &lt;code&gt;(path, locals, callback)&lt;/code&gt; シグネチャに準拠するテンプレートエンジンをサポートしています。テンプレートエンジンのインターフェースとキャッシュを正規化するには、&lt;a href=&quot;https://github.com/visionmedia/consolidate.js&quot;&gt;consolidate.js&lt;/a&gt;プロジェクトのサポートを参照してください。リストにないテンプレートエンジンは、引き続きExpressシグネチャをサポートする可能性があります。</target>
        </trans-unit>
        <trans-unit id="57a7e0b2368e275bea970406ea2ac043737a2054" translate="yes" xml:space="preserve">
          <source>Express supports methods that correspond to all HTTP request methods: &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, and so on. For a full list, see &lt;a href=&quot;../index#app.METHOD&quot;&gt;app.METHOD&lt;/a&gt;.</source>
          <target state="translated">Expressは、すべてのHTTP要求メソッド（ &lt;code&gt;get&lt;/code&gt; 、 &lt;code&gt;post&lt;/code&gt; など）に対応するメソッドをサポートします。完全なリストについては、&lt;a href=&quot;../index#app.METHOD&quot;&gt;app.METHODを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="89f5ea3deac416c98c517d536b6580cb1e997c98" translate="yes" xml:space="preserve">
          <source>Express supports the following routing methods corresponding to the HTTP methods of the same names:</source>
          <target state="translated">Expressでは、同名のHTTPメソッドに対応した以下のルーティングメソッドをサポートしています。</target>
        </trans-unit>
        <trans-unit id="cf5dd4560778faa8f909a554dbc6f922d743e0d5" translate="yes" xml:space="preserve">
          <source>Express uses &lt;a href=&quot;https://www.npmjs.com/package/path-to-regexp&quot;&gt;path-to-regexp&lt;/a&gt; for matching the route paths; see the path-to-regexp documentation for all the possibilities in defining route paths. &lt;a href=&quot;http://forbeslindesay.github.io/express-route-tester/&quot;&gt;Express Route Tester&lt;/a&gt; is a handy tool for testing basic Express routes, although it does not support pattern matching.</source>
          <target state="translated">Expressは、&lt;a href=&quot;https://www.npmjs.com/package/path-to-regexp&quot;&gt;ルートパスの&lt;/a&gt;照合にpath-to-regexpを使用します。ルートパスを定義する際のすべての可能性については、path to regexpのドキュメントを参照してください。&lt;a href=&quot;http://forbeslindesay.github.io/express-route-tester/&quot;&gt;Express Route Tester&lt;/a&gt;は、基本的なExpressルートをテストするための便利なツールですが、パターンマッチングはサポートしていません。</target>
        </trans-unit>
        <trans-unit id="7d1f7a0e26837ca8238bcdb411d54630c7101395" translate="yes" xml:space="preserve">
          <source>Express uses the &lt;a href=&quot;https://www.npmjs.com/package/debug&quot;&gt;debug&lt;/a&gt; module internally to log information about route matches, middleware functions that are in use, application mode, and the flow of the request-response cycle.</source>
          <target state="translated">Expressは、&lt;a href=&quot;https://www.npmjs.com/package/debug&quot;&gt;デバッグ&lt;/a&gt;モジュールを内部で使用して、ルートの一致、使用中のミドルウェア機能、アプリケーションモード、および要求と応答のサイクルのフローに関する情報を記録します。</target>
        </trans-unit>
        <trans-unit id="3f8fa5951568a3821e908ee3f98dc83138ef7063" translate="yes" xml:space="preserve">
          <source>Express-compliant template engines such as Jade and Pug export a function named &lt;code&gt;__express(filePath, options, callback)&lt;/code&gt;, which is called by the &lt;code&gt;res.render()&lt;/code&gt; function to render the template code.</source>
          <target state="translated">JadeやPugなどのExpress準拠のテンプレートエンジンは、テンプレートコードをレンダリングするために &lt;code&gt;res.render()&lt;/code&gt; 関数によって呼び出される &lt;code&gt;__express(filePath, options, callback)&lt;/code&gt; という名前の関数をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="5267965aa5e51c5d1115f0226abfbc07bc7f50ba" translate="yes" xml:space="preserve">
          <source>Extremely nested query string objects could cause the process to block and make the server unresponsive temporarily.</source>
          <target state="translated">極めてネストしたクエリ文字列オブジェクトを使用すると、プロセスがブロックされてサーバーが一時的に応答不能になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="03688ba6aa340b87549088aa5739944cb6b1dc73" translate="yes" xml:space="preserve">
          <source>FAQ</source>
          <target state="translated">FAQ</target>
        </trans-unit>
        <trans-unit id="b8f874dbb82312c887de039c46c8f53c2278e19f" translate="yes" xml:space="preserve">
          <source>File: &lt;code&gt;my-middleware.js&lt;/code&gt;</source>
          <target state="translated">ファイル： &lt;code&gt;my-middleware.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4fc8df7c43555125566f5ee75d9082ab9f82c482" translate="yes" xml:space="preserve">
          <source>Finally, Express apps - like any other web apps - can be vulnerable to a variety of web-based attacks. Familiarize yourself with known &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_Top_10&quot;&gt;web vulnerabilities&lt;/a&gt; and take precautions to avoid them.</source>
          <target state="translated">最後に、Expressアプリは、他のWebアプリと同様に、さまざまなWebベースの攻撃に対して脆弱です。既知の&lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_Top_10&quot;&gt;Web脆弱性&lt;/a&gt;をよく理解し、それらを回避するための予防策を講じてください。</target>
        </trans-unit>
        <trans-unit id="f044285af4e5d5f25713fed8bc8b5812321fd97f" translate="yes" xml:space="preserve">
          <source>First create a directory named &lt;code&gt;myapp&lt;/code&gt;, change to it and run &lt;code&gt;npm init&lt;/code&gt;. Then install &lt;code&gt;express&lt;/code&gt; as a dependency, as per the &lt;a href=&quot;installing&quot;&gt;installation guide&lt;/a&gt;.</source>
          <target state="translated">最初に &lt;code&gt;myapp&lt;/code&gt; という名前のディレクトリを作成し、それに変更して &lt;code&gt;npm init&lt;/code&gt; を実行します。次に、&lt;a href=&quot;installing&quot;&gt;インストールガイド&lt;/a&gt;に従って、 &lt;code&gt;express&lt;/code&gt; を依存関係としてインストールします。</target>
        </trans-unit>
        <trans-unit id="33170e4f7913a77062d044be1776de2e2a1a0fcf" translate="yes" xml:space="preserve">
          <source>Fixed directory traversal vulnerabilities in &lt;code&gt;express.static&lt;/code&gt; (&lt;a href=&quot;http://nodesecurity.io/advisories/send-directory-traversal&quot;&gt;advisory&lt;/a&gt; , &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6394&quot;&gt;CVE-2014-6394&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;express.static&lt;/code&gt; のディレクトリトラバーサルの脆弱性を修正しました（&lt;a href=&quot;http://nodesecurity.io/advisories/send-directory-traversal&quot;&gt;勧告&lt;/a&gt;、&lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6394&quot;&gt;CVE-2014-6394&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="f8778042389a64a175753e1dedfdcd9c25fb3f70" translate="yes" xml:space="preserve">
          <source>Fixed directory traversal vulnerabilities in &lt;code&gt;express.static&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;express.static&lt;/code&gt; のディレクトリトラバーサルの脆弱性を修正しました。</target>
        </trans-unit>
        <trans-unit id="ecca725d626f59ec7358a976f29f270b2735eebe" translate="yes" xml:space="preserve">
          <source>Fixed open redirect vulnerability in &lt;code&gt;express.static&lt;/code&gt; (&lt;a href=&quot;https://nodesecurity.io/advisories/serve-static-open-redirect&quot;&gt;advisory&lt;/a&gt;, &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-1164&quot;&gt;CVE-2015-1164&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;express.static&lt;/code&gt; のオープンリダイレクトの脆弱性を修正しました（&lt;a href=&quot;https://nodesecurity.io/advisories/serve-static-open-redirect&quot;&gt;勧告&lt;/a&gt;、&lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-1164&quot;&gt;CVE-2015-1164&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="96f7d71e633082a9f96dcfafd2f5bb7d76dc44ad" translate="yes" xml:space="preserve">
          <source>Fixed root path disclosure vulnerability in &lt;code&gt;express.static&lt;/code&gt;, &lt;code&gt;res.sendfile&lt;/code&gt;, and &lt;code&gt;res.sendFile&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;express.static&lt;/code&gt; 、 &lt;code&gt;res.sendfile&lt;/code&gt; 、および &lt;code&gt;res.sendFile&lt;/code&gt; のルートパス開示の脆弱性を修正しました</target>
        </trans-unit>
        <trans-unit id="2165917db51662b2b01caf405e9f6f8b3c2fd935" translate="yes" xml:space="preserve">
          <source>Flags the cookie to be accessible only by the web server.</source>
          <target state="translated">ウェブサーバからのみアクセス可能なクッキーにフラグを付けます。</target>
        </trans-unit>
        <trans-unit id="bd3cee274803bfd1580197733b062aa046d4b915" translate="yes" xml:space="preserve">
          <source>Following are some examples of using the &lt;a href=&quot;http://expressjs.com/guide/using-middleware.html#middleware.built-in&quot;&gt;express.static&lt;/a&gt; middleware in an Express app.</source>
          <target state="translated">以下は、Expressアプリでの&lt;a href=&quot;http://expressjs.com/guide/using-middleware.html#middleware.built-in&quot;&gt;express.static&lt;/a&gt;ミドルウェアの使用例です。</target>
        </trans-unit>
        <trans-unit id="d8a3a896b0a54915e23a5dfe2c2ca9f71ccda0f6" translate="yes" xml:space="preserve">
          <source>For a feature-by-feature comparison of the three process managers, see &lt;a href=&quot;http://strong-pm.io/compare/&quot;&gt;http://strong-pm.io/compare/&lt;/a&gt;. For a more detailed introduction to all three, see &lt;a href=&quot;pm&quot;&gt;Process managers for Express apps&lt;/a&gt;.</source>
          <target state="translated">3つのプロセスマネージャの機能ごとの比較については、&lt;a href=&quot;http://strong-pm.io/compare/&quot;&gt;http:&lt;/a&gt; //strong-pm.io/compare/を参照してください。3つすべての詳細については&lt;a href=&quot;pm&quot;&gt;、Expressアプリのプロセスマネージャーを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="ea0e9e8a4a46180846d953160ce0b6e02849a2ef" translate="yes" xml:space="preserve">
          <source>For a high-traffic website in production, the best way to put compression in place is to implement it at a reverse proxy level (see &lt;a href=&quot;#use-a-reverse-proxy&quot;&gt;Use a reverse proxy&lt;/a&gt;). In that case, you do not need to use compression middleware. For details on enabling gzip compression in Nginx, see &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_gzip_module.html&quot;&gt;Module ngx_http_gzip_module&lt;/a&gt; in the Nginx documentation.</source>
          <target state="translated">本番環境でトラフィックの多いWebサイトの場合、圧縮を導入する最良の方法は、リバースプロキシレベルで実装することです（&lt;a href=&quot;#use-a-reverse-proxy&quot;&gt;リバースプロキシの使用を&lt;/a&gt;参照）。その場合、圧縮ミドルウェアを使用する必要はありません。Nginxでgzip圧縮を有効にする方法の詳細については、Nginxドキュメントの&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_gzip_module.html&quot;&gt;モジュールngx_http_gzip_module&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="107fff1e09504008be83aec1828f0ec496feaa84" translate="yes" xml:space="preserve">
          <source>For a partial list of third-party middleware functions that are commonly used with Express, see: &lt;a href=&quot;http://expressjs.com/en/resources/middleware.html&quot;&gt;Third-party middleware&lt;/a&gt;.</source>
          <target state="translated">Expressで一般的に使用されるサードパーティのミドルウェア機能の部分的なリストについては、「&lt;a href=&quot;http://expressjs.com/en/resources/middleware.html&quot;&gt;サードパーティのミドルウェア&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="cbbdf002b27958f16a729ae5eb64cafa37e57cab" translate="yes" xml:space="preserve">
          <source>For app activity</source>
          <target state="translated">アプリのアクティビティについて</target>
        </trans-unit>
        <trans-unit id="890686791677a9a0f957638386e7f11c81ed3e1f" translate="yes" xml:space="preserve">
          <source>For debugging</source>
          <target state="translated">デバッグ用</target>
        </trans-unit>
        <trans-unit id="ea926f410da4309da4f060ad6afbcaed89c267c7" translate="yes" xml:space="preserve">
          <source>For details about error-handling middleware, see: &lt;a href=&quot;error-handling&quot;&gt;Error handling&lt;/a&gt;.</source>
          <target state="translated">エラー処理ミドルウェアの詳細については、「&lt;a href=&quot;error-handling&quot;&gt;エラー処理&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="6e33b48001bf34b562926843b0490a86ef43723e" translate="yes" xml:space="preserve">
          <source>For details, see &lt;a href=&quot;index#app.settings.table&quot;&gt;Application settings&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;index#app.settings.table&quot;&gt;アプリケーション設定を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b242df6a0fe5ef3fe38301fdd07f54d2e6660508" translate="yes" xml:space="preserve">
          <source>For errors returned from asynchronous functions invoked by route handlers and middleware, you must pass them to the &lt;code&gt;next()&lt;/code&gt; function, where Express will catch and process them. For example:</source>
          <target state="translated">ルートハンドラーとミドルウェアによって呼び出された非同期関数から返されたエラーについては、それらを &lt;code&gt;next()&lt;/code&gt; 関数に渡して、Expressがエラーをキャッチして処理する必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="41b45a58292e15215ca0202da4732d883b26b833" translate="yes" xml:space="preserve">
          <source>For example, assuming you&amp;rsquo;ve deployed your app to prod.foo.com and StrongLoop PM is listening on port 8701 (the default), then to set the cluster size to eight using slc:</source>
          <target state="translated">たとえば、アプリをprod.foo.comにデプロイし、StrongLoop PMがポート8701（デフォルト）でリッスンしている場合、slcを使用してクラスターサイズを8に設定します。</target>
        </trans-unit>
        <trans-unit id="3a18ceb5befff444757a76a5705ec118c5988293" translate="yes" xml:space="preserve">
          <source>For example, create a router file named &lt;code&gt;birds.js&lt;/code&gt; in the app directory, with the following content:</source>
          <target state="translated">たとえば、次の内容で、 &lt;code&gt;birds.js&lt;/code&gt; という名前のルーターファイルをappディレクトリに作成します。</target>
        </trans-unit>
        <trans-unit id="0eb8d5095d437aa73f505cfb169e4a626d7b794b" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;X-Forwarded-For&lt;/code&gt; is &lt;code&gt;client, proxy1, proxy2&lt;/code&gt;, &lt;code&gt;req.ips&lt;/code&gt; would be &lt;code&gt;[&quot;client&quot;, &quot;proxy1&quot;, &quot;proxy2&quot;]&lt;/code&gt;, where &lt;code&gt;proxy2&lt;/code&gt; is the furthest downstream.</source>
          <target state="translated">たとえば、 &lt;code&gt;X-Forwarded-For&lt;/code&gt; が &lt;code&gt;client, proxy1, proxy2&lt;/code&gt; 場合、 &lt;code&gt;req.ips&lt;/code&gt; は &lt;code&gt;[&quot;client&quot;, &quot;proxy1&quot;, &quot;proxy2&quot;]&lt;/code&gt; になります。ここで、 &lt;code&gt;proxy2&lt;/code&gt; は最も下流にあります。</target>
        </trans-unit>
        <trans-unit id="1c3a405891fc53eb4879e096e2ca9705b3d911a0" translate="yes" xml:space="preserve">
          <source>For example, if you generated the app with &lt;code&gt;$ express sample-app&lt;/code&gt;, you can enable the debug statements with the following command:</source>
          <target state="translated">たとえば、 &lt;code&gt;$ express sample-app&lt;/code&gt; を使用してアプリを生成した場合、次のコマンドを使用してデバッグステートメントを有効にできます。</target>
        </trans-unit>
        <trans-unit id="e9923e3ae4792b863970bd40ecff98f41d0af593" translate="yes" xml:space="preserve">
          <source>For example, the following call:</source>
          <target state="translated">例えば、次のような呼び出しです。</target>
        </trans-unit>
        <trans-unit id="c6fa00698917ac2a9c231d826dc453eb57a6fd9b" translate="yes" xml:space="preserve">
          <source>For example, the following creates an Express app named &lt;em&gt;myapp&lt;/em&gt;. The app will be created in a folder named &lt;em&gt;myapp&lt;/em&gt; in the current working directory and the view engine will be set to &lt;a href=&quot;https://pugjs.org/&quot;&gt;Pug&lt;/a&gt;:</source>
          <target state="translated">たとえば、次は&lt;em&gt;myapp&lt;/em&gt;という名前のExpressアプリを作成します。アプリは現在の作業ディレクトリの&lt;em&gt;myapp&lt;/em&gt;という名前のフォルダーに作成され、ビューエンジンは&lt;a href=&quot;https://pugjs.org/&quot;&gt;Pug&lt;/a&gt;に設定されます。</target>
        </trans-unit>
        <trans-unit id="770868dbfe20cfff7b14c286d2d604c868f3eeac" translate="yes" xml:space="preserve">
          <source>For example, this middleware function will be executed for &lt;em&gt;every&lt;/em&gt; request to the app:</source>
          <target state="translated">たとえば、このミドルウェア関数は、アプリへの&lt;em&gt;すべての&lt;/em&gt;リクエストに対して実行され&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="d26010a3cd600c1570d3dfe9a847aac7263bd127" translate="yes" xml:space="preserve">
          <source>For example, to map the EJS template engine to &amp;ldquo;.html&amp;rdquo; files:</source>
          <target state="translated">たとえば、EJSテンプレートエンジンを「.html」ファイルにマップするには：</target>
        </trans-unit>
        <trans-unit id="05abdda4e81b1b2eb8d6240ac991191aa63bdaa4" translate="yes" xml:space="preserve">
          <source>For example, use the following code to serve images, CSS files, and JavaScript files in a directory named &lt;code&gt;public&lt;/code&gt;:</source>
          <target state="translated">たとえば、次のコードを使用して、 &lt;code&gt;public&lt;/code&gt; という名前のディレクトリにある画像、CSSファイル、JavaScriptファイルを提供します。</target>
        </trans-unit>
        <trans-unit id="02fd5814da2cf119d4770e29aef01110d485c55e" translate="yes" xml:space="preserve">
          <source>For example, when &lt;code&gt;:user&lt;/code&gt; is present in a route path, you may map user loading logic to automatically provide &lt;code&gt;req.user&lt;/code&gt; to the route, or perform validations on the parameter input.</source>
          <target state="translated">たとえば、 &lt;code&gt;:user&lt;/code&gt; がルートパスに存在する場合、ユーザーロードロジックをマップして、ルートに &lt;code&gt;req.user&lt;/code&gt; を自動的に提供したり、パラメーター入力で検証を実行したりできます。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="ae59db9ec11e287a117f93804341ebb0ceb1bf09" translate="yes" xml:space="preserve">
          <source>For examples, see &lt;a href=&quot;#middleware-callback-function-examples&quot;&gt;Middleware callback function examples&lt;/a&gt;.</source>
          <target state="translated">例については、&lt;a href=&quot;#middleware-callback-function-examples&quot;&gt;ミドルウェアコールバック関数の例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="923d53cdb06c427521d5fadcb04556d1ec4e7c21" translate="yes" xml:space="preserve">
          <source>For examples, see &lt;a href=&quot;#path-examples&quot;&gt;Path examples&lt;/a&gt;.</source>
          <target state="translated">例については、&lt;a href=&quot;#path-examples&quot;&gt;パスの例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4e92672e012e5693967c60f51abb202d8f5384b0" translate="yes" xml:space="preserve">
          <source>For more details about routing, see the &lt;a href=&quot;../guide/routing&quot;&gt;routing guide&lt;/a&gt;.</source>
          <target state="translated">ルーティングの詳細については、&lt;a href=&quot;../guide/routing&quot;&gt;ルーティングガイドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="cb05a7214778709f81fb690e9792e2c8c9a1d914" translate="yes" xml:space="preserve">
          <source>For more details about the &lt;code&gt;serve-static&lt;/code&gt; function and its options, see &lt;a href=&quot;http://expressjs.com/en/resources/middleware/serve-static.html&quot;&gt;serve-static&lt;/a&gt;.</source>
          <target state="translated">詳細については &lt;code&gt;serve-static&lt;/code&gt; 関数とそのオプション、参照&lt;a href=&quot;http://expressjs.com/en/resources/middleware/serve-static.html&quot;&gt;サーブ静電気を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7ed53ffddacc7965cbe9983b5c8bcb3af321cd5a" translate="yes" xml:space="preserve">
          <source>For more information about &lt;code&gt;debug&lt;/code&gt;, see the &lt;a href=&quot;https://www.npmjs.com/package/debug&quot;&gt;debug&lt;/a&gt;.</source>
          <target state="translated">詳細については &lt;code&gt;debug&lt;/code&gt; 、参照の&lt;a href=&quot;https://www.npmjs.com/package/debug&quot;&gt;デバッグを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e8b924f6ac0c779b8d832e11a364fb3a985f95e8" translate="yes" xml:space="preserve">
          <source>For more information about Express middleware, see: &lt;a href=&quot;using-middleware&quot;&gt;Using Express middleware&lt;/a&gt;.</source>
          <target state="translated">Expressミドルウェアについて詳しくは、Expressミドルウェアの&lt;a href=&quot;using-middleware&quot;&gt;使用を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7da2688b0dc4efb6bd13ddb724c64cbe5338d59d" translate="yes" xml:space="preserve">
          <source>For more information about error-handling by using promises, see &lt;a href=&quot;https://strongloop.com/strongblog/promises-in-node-js-with-q-an-alternative-to-callbacks/&quot;&gt;Promises in Node.js with Q &amp;ndash; An Alternative to Callbacks&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://strongloop.com/strongblog/promises-in-node-js-with-q-an-alternative-to-callbacks/&quot;&gt;promiseを&lt;/a&gt;使用したエラー処理の詳細については、「Qを使用したNode.jsのPromises &amp;ndash;コールバックの代替」を参照してください。</target>
        </trans-unit>
        <trans-unit id="83aa465bc71b9fb1170a0b299cccedeefc9397e7" translate="yes" xml:space="preserve">
          <source>For more information on Upstart, see &lt;a href=&quot;http://upstart.ubuntu.com/cookbook&quot;&gt;Upstart Intro, Cookbook and Best Practises&lt;/a&gt;.</source>
          <target state="translated">Upstartの詳細については、&lt;a href=&quot;http://upstart.ubuntu.com/cookbook&quot;&gt;Upstart Intro、Cookbook、およびBest Practicesを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2e5234d505aa344c642297fbe8145633929012b1" translate="yes" xml:space="preserve">
          <source>For more information on clustering with PM2, see &lt;a href=&quot;https://pm2.keymetrics.io/docs/usage/cluster-mode/&quot;&gt;Cluster Mode&lt;/a&gt; in the PM2 documentation.</source>
          <target state="translated">PM2を使用したクラスタリングの詳細については、PM2のドキュメントの「&lt;a href=&quot;https://pm2.keymetrics.io/docs/usage/cluster-mode/&quot;&gt;クラスターモード」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="20d405b8d5ba09a61b63170793e30c9d980914d8" translate="yes" xml:space="preserve">
          <source>For more information on clustering with StrongLoop PM, see &lt;a href=&quot;https://docs.strongloop.com/display/SLC/Clustering&quot;&gt;Clustering&lt;/a&gt; in StrongLoop documentation.</source>
          <target state="translated">StrongLoop PMを使用したクラスタリングの詳細については、StrongLoopドキュメントの&lt;a href=&quot;https://docs.strongloop.com/display/SLC/Clustering&quot;&gt;クラスタリング&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f2fe2e442f3b9b203eacf3e272f19953e3a063ae" translate="yes" xml:space="preserve">
          <source>For more information on routing, see the &lt;a href=&quot;http://expressjs.com/guide/routing.html&quot;&gt;routing guide&lt;/a&gt;.</source>
          <target state="translated">ルーティングの詳細については、&lt;a href=&quot;http://expressjs.com/guide/routing.html&quot;&gt;ルーティングガイドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="e68e46fd31a4361db6126c11d17f40c667a4e5a8" translate="yes" xml:space="preserve">
          <source>For more information on systemd, see the &lt;a href=&quot;http://www.freedesktop.org/software/systemd/man/systemd.unit.html&quot;&gt;systemd reference (man page)&lt;/a&gt;.</source>
          <target state="translated">systemdの詳細については、&lt;a href=&quot;http://www.freedesktop.org/software/systemd/man/systemd.unit.html&quot;&gt;systemdリファレンス（manページ）を参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e6242f401a0d033d8cbcd0e2c2bb56c183f77347" translate="yes" xml:space="preserve">
          <source>For more information, issues, or concerns, see &lt;a href=&quot;https://github.com/expressjs/cookie-parser&quot;&gt;cookie-parser&lt;/a&gt;.</source>
          <target state="translated">詳細、問題、または懸念については、&lt;a href=&quot;https://github.com/expressjs/cookie-parser&quot;&gt;cookie-parserを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="04237f3e7ea883360229ee1da075678a34d9eb99" translate="yes" xml:space="preserve">
          <source>For more information, issues, or concerns, see &lt;a href=&quot;https://github.com/jshttp/fresh&quot;&gt;fresh&lt;/a&gt;.</source>
          <target state="translated">詳細、問題、または懸念事項については、&lt;a href=&quot;https://github.com/jshttp/fresh&quot;&gt;freshを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9a279de21935971fc0b25a2b82c15f3a1a3116df" translate="yes" xml:space="preserve">
          <source>For more information, or if you have issues or concerns, see &lt;a href=&quot;https://github.com/expressjs/accepts&quot;&gt;accepts&lt;/a&gt;.</source>
          <target state="translated">詳細について、または問題や懸念がある場合は、&lt;a href=&quot;https://github.com/expressjs/accepts&quot;&gt;受諾を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="24e630174a81f1034c5408baccd5fb379d48816d" translate="yes" xml:space="preserve">
          <source>For more information, or if you have issues or concerns, see &lt;a href=&quot;https://github.com/expressjs/type-is&quot;&gt;type-is&lt;/a&gt;.</source>
          <target state="translated">詳細について、または問題や懸念がある場合は、&lt;a href=&quot;https://github.com/expressjs/type-is&quot;&gt;type-isを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e0f55de4ccaf166572f024e516e7c09546e17b99" translate="yes" xml:space="preserve">
          <source>For more information, or if you have issues or concerns, see &lt;a href=&quot;https://github.com/pillarjs/send&quot;&gt;send&lt;/a&gt;.</source>
          <target state="translated">詳細について、または問題や懸念がある場合は、&lt;a href=&quot;https://github.com/pillarjs/send&quot;&gt;sendを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f8f5a96010dd8090a6fcc5e0c8660915535bc22f" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;#router&quot;&gt;Router&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#router&quot;&gt;ルーターを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ee805cde1cf95d631d776598f1443476ac3eb561" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../guide/error-handling&quot;&gt;Error handling&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../guide/error-handling&quot;&gt;エラー処理を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c7345e9b46a715df23054d17930acaca8621afee" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../guide/using-template-engines&quot;&gt;Using template engines with Express&lt;/a&gt;.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;../guide/using-template-engines&quot;&gt;Expressでのテンプレートエンジンの使用&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="92247c8391742ab87f38c920c145f2b7e3cefb19" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://expressjs.com/guide/using-template-engines.html&quot;&gt;Using template engines with Express&lt;/a&gt;.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;http://expressjs.com/guide/using-template-engines.html&quot;&gt;Expressでのテンプレートエンジンの使用&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="b35260c8fd3567739c2567438afd84eb4156db28" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://expressjs.com/starter/static-files.html&quot;&gt;Serving static files in Express&lt;/a&gt;. and &lt;a href=&quot;guide/using-middleware#middleware.built-in&quot;&gt;Using middleware - Built-in middleware&lt;/a&gt;.</source>
          <target state="translated">詳しく&lt;a href=&quot;http://expressjs.com/starter/static-files.html&quot;&gt;は、Expressでの静的ファイルの提供を&lt;/a&gt;参照してください。および&lt;a href=&quot;guide/using-middleware#middleware.built-in&quot;&gt;ミドルウェアを使用して-内蔵のミドルウェア&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7271ad962ac79494079eccb3689910bfac87a7ba" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://strong-pm.io/&quot;&gt;http://strong-pm.io/&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;http://strong-pm.io/&quot;&gt;http://strong-pm.io/を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7410b77fc2c5a20b86e1fd2b9bf49e5a2891462c" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://coreos.com/os/docs/latest/using-environment-variables-in-systemd-units.html&quot;&gt;Using Environment Variables In systemd Units&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://coreos.com/os/docs/latest/using-environment-variables-in-systemd-units.html&quot;&gt;systemdユニットでの環境変数の使用を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="47a00568c6e2e980e9ba9bfc0ad2aaf022567398" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://docs.strongloop.com/display/SLC/Setting+up+a+production+host#Settingupaproductionhost-RHEL7+,Ubuntu15.04or15.10&quot;&gt;Setting up a production host (StrongLoop documentation)&lt;/a&gt;.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;https://docs.strongloop.com/display/SLC/Setting+up+a+production+host#Settingupaproductionhost-RHEL7+,Ubuntu15.04or15.10&quot;&gt;プロダクションホストのセットアップ（StrongLoopドキュメント）&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="8cba8680f31f438e197a40c17b26bb168cda7363" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://github.com/Unitech/pm2&quot;&gt;https://github.com/Unitech/pm2&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/Unitech/pm2&quot;&gt;https：//github.com/Unitech/pm2を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1d4905f91bcd6ba74d96e4be4ca1544961dd470e" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://github.com/foreverjs/forever&quot;&gt;https://github.com/foreverjs/forever&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/foreverjs/forever&quot;&gt;https：//github.com/foreverjs/foreverを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="60cedf67661df057f1467b732cbe873383458691" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;http://expressjs.com/guide/routing.html&quot;&gt;routing guide&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;http://expressjs.com/guide/routing.html&quot;&gt;ルーティングガイドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="c80fa6cc7e9d3396c7e6c8af834b7d306d877896" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;http://upstart.ubuntu.com/cookbook/#environment-variables&quot;&gt;Upstart Intro, Cookbook and Best Practices&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;http://upstart.ubuntu.com/cookbook/#environment-variables&quot;&gt;Upstart Intro、Cookbook、およびBest Practicesを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="36c8bd9186b85eb2e772132202f44908152f3ba6" translate="yes" xml:space="preserve">
          <source>For more on the fundamentals of error handling, see:</source>
          <target state="translated">エラー処理の基礎については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="a465342a7d718effd2000910f5a4118c0e8dfe39" translate="yes" xml:space="preserve">
          <source>For organizational (and higher-level framework) purposes, you can define several error-handling middleware functions, much as you would with regular middleware functions. For example, to define an error-handler for requests made by using &lt;code&gt;XHR&lt;/code&gt; and those without:</source>
          <target state="translated">通常のミドルウェア機能の場合と同様に、組織的（およびより高レベルのフレームワーク）の目的で、いくつかのエラー処理ミドルウェア機能を定義できます。たとえば、 &lt;code&gt;XHR&lt;/code&gt; を使用して作成されたリクエストとそれ以外のリクエストのエラーハンドラーを定義するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="d39acc8a0649e7b14f420422e8fac72b243870ed" translate="yes" xml:space="preserve">
          <source>For this option, specify a function to set custom response headers. Alterations to the headers must occur synchronously.</source>
          <target state="translated">このオプションでは、カスタム応答ヘッダを設定する関数を指定します。ヘッダの変更は同期的に行われる必要があります。</target>
        </trans-unit>
        <trans-unit id="2502483d832cd812cb8342e1e9630c3fc9b01539" translate="yes" xml:space="preserve">
          <source>Forever</source>
          <target state="translated">Forever</target>
        </trans-unit>
        <trans-unit id="dcf5ef8cc9a491fcb763a2ac5d0048282126959d" translate="yes" xml:space="preserve">
          <source>Forever has many more options, and it also provides a programmatic API.</source>
          <target state="translated">フォーエバーには他にも多くのオプションがあり、プログラマティックAPIも提供しています。</target>
        </trans-unit>
        <trans-unit id="486b0ab7ef9f56d764bcfa4c8e6a3f17b20a1b8f" translate="yes" xml:space="preserve">
          <source>Forever is a simple command-line interface tool for ensuring that a given script runs continuously (forever). Forever&amp;rsquo;s simple interface makes it ideal for running smaller deployments of Node.js apps and scripts.</source>
          <target state="translated">Foreverは、特定のスクリプトが継続的に（永久に）実行されるようにするためのシンプルなコマンドラインインターフェイスツールです。Foreverのシンプルなインターフェースは、Node.jsアプリとスクリプトの小規模なデプロイメントの実行に最適です。</target>
        </trans-unit>
        <trans-unit id="4b37d52e38be107d44edec47bb2ad2b0fcdfb343" translate="yes" xml:space="preserve">
          <source>Full documentation:</source>
          <target state="translated">完全なドキュメント。</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="b3fc9aa85f301e677097caf7b0af2568ecf7421e" translate="yes" xml:space="preserve">
          <source>Function for setting HTTP headers to serve with the file.</source>
          <target state="translated">ファイルと共に提供するHTTPヘッダを設定する関数です。</target>
        </trans-unit>
        <trans-unit id="22c55d1312d4259a34a1930c72c6ea5e6c801b3e" translate="yes" xml:space="preserve">
          <source>Functionality is now limited to setting the basic cookie value. Use &lt;code&gt;res.cookie()&lt;/code&gt; for added functionality.</source>
          <target state="translated">現在、機能は基本的なCookie値の設定に限定されています。追加機能のために &lt;code&gt;res.cookie()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="e65db94506fadbfe9efb5048e52597202c8babd1" translate="yes" xml:space="preserve">
          <source>Gain insights into runtime performance and resource consumption.</source>
          <target state="translated">ランタイム・パフォーマンスとリソース消費に関する洞察を得ることができます。</target>
        </trans-unit>
        <trans-unit id="c84736cc9e45c60a93f696fb821192dfb5a37470" translate="yes" xml:space="preserve">
          <source>Generate less verbose error messages.</source>
          <target state="translated">冗長性の少ないエラーメッセージを生成します。</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="translated">始めるには</target>
        </trans-unit>
        <trans-unit id="8ef85cc7a7c6444cb46bd7b35e8249c9ee990a3c" translate="yes" xml:space="preserve">
          <source>Graceful shutdown</source>
          <target state="translated">優雅なシャットダウン</target>
        </trans-unit>
        <trans-unit id="bf073fae640ded81eeb7a4cee70faff4a623c16c" translate="yes" xml:space="preserve">
          <source>Guide</source>
          <target state="translated">ガイド</target>
        </trans-unit>
        <trans-unit id="07bfe8b3304d8367ba7334927f2af3a42ccbb6f9" translate="yes" xml:space="preserve">
          <source>Gzip compressing can greatly decrease the size of the response body and hence increase the speed of a web app. Use the &lt;a href=&quot;https://www.npmjs.com/package/compression&quot;&gt;compression&lt;/a&gt; middleware for gzip compression in your Express app. For example:</source>
          <target state="translated">Gzip圧縮により、応答本体のサイズが大幅に減少するため、Webアプリの速度が向上します。Expressアプリでgzip圧縮に&lt;a href=&quot;https://www.npmjs.com/package/compression&quot;&gt;圧縮&lt;/a&gt;ミドルウェアを使用します。例えば：</target>
        </trans-unit>
        <trans-unit id="75001e7f0d5e62d027fba5485030ff95a08ba5d1" translate="yes" xml:space="preserve">
          <source>HTTP &lt;a href=&quot;../index#req&quot;&gt;request&lt;/a&gt; argument to the middleware function, called &quot;req&quot; by convention.</source>
          <target state="translated">慣例により「req」と呼ばれるミドルウェア関数へのHTTP &lt;a href=&quot;../index#req&quot;&gt;要求&lt;/a&gt;引数。</target>
        </trans-unit>
        <trans-unit id="89bbaa2ca865d86eecc63870dec97b0530cdf51b" translate="yes" xml:space="preserve">
          <source>HTTP &lt;a href=&quot;../index#res&quot;&gt;response&lt;/a&gt; argument to the middleware function, called &quot;res&quot; by convention.</source>
          <target state="translated">慣例により「res」と呼ばれるミドルウェア関数へのHTTP &lt;a href=&quot;../index#res&quot;&gt;応答&lt;/a&gt;引数。</target>
        </trans-unit>
        <trans-unit id="b9fdbb72ba1161e80c277e071a6b1ffaad455c29" translate="yes" xml:space="preserve">
          <source>HTTP method for which the middleware function applies.</source>
          <target state="translated">ミドルウェア機能が適用されるHTTPメソッド。</target>
        </trans-unit>
        <trans-unit id="d3f69543d7eb8323f92fefc9e2dfc9d34b08a951" translate="yes" xml:space="preserve">
          <source>Handing over tasks that do not require knowledge of application state to a reverse proxy frees up Express to perform specialized application tasks. For this reason, it is recommended to run Express behind a reverse proxy like &lt;a href=&quot;https://www.nginx.com/&quot;&gt;Nginx&lt;/a&gt; or &lt;a href=&quot;http://www.haproxy.org/&quot;&gt;HAProxy&lt;/a&gt; in production.</source>
          <target state="translated">アプリケーションの状態の知識を必要としないタスクをリバースプロキシに引き渡すと、Expressが解放され、特殊なアプリケーションタスクを実行できます。このため、本番&lt;a href=&quot;http://www.haproxy.org/&quot;&gt;環境&lt;/a&gt;では&lt;a href=&quot;https://www.nginx.com/&quot;&gt;Nginx&lt;/a&gt;やHAProxyなどのリバースプロキシの背後でExpressを実行することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="23d638c85f93da70aec51e09294273a48bacf39c" translate="yes" xml:space="preserve">
          <source>Handle exceptions properly</source>
          <target state="translated">例外を適切に扱う</target>
        </trans-unit>
        <trans-unit id="a2c1adcb564bc12136b48171a19dc887945a7536" translate="yes" xml:space="preserve">
          <source>Health Checks and Graceful Shutdown</source>
          <target state="translated">健康診断と潔くシャットダウン</target>
        </trans-unit>
        <trans-unit id="87398e24ea58e8cafa77352da02409bcf395978d" translate="yes" xml:space="preserve">
          <source>Health checks</source>
          <target state="translated">健康診断</target>
        </trans-unit>
        <trans-unit id="cf41eac7b471300e445d18307ee85ea1edba1a1b" translate="yes" xml:space="preserve">
          <source>Hello world example</source>
          <target state="translated">ハローワールドの例</target>
        </trans-unit>
        <trans-unit id="edd56ca85d75a122309281df34044efea68dc2cd" translate="yes" xml:space="preserve">
          <source>Helmet is actually just a collection of nine smaller middleware functions that set security-related HTTP headers:</source>
          <target state="translated">Helmetは、実際には、セキュリティ関連のHTTPヘッダを設定する9つの小さなミドルウェア関数の集合体に過ぎません。</target>
        </trans-unit>
        <trans-unit id="9a6bb045d2e4c4eca6977cdb8aaffc48157ebece" translate="yes" xml:space="preserve">
          <source>Here are some examples of route paths based on string patterns.</source>
          <target state="translated">文字列パターンに基づいた経路経路の例を紹介します。</target>
        </trans-unit>
        <trans-unit id="fd76d4add41cb79fef0581b21f2a1ebaaeee501b" translate="yes" xml:space="preserve">
          <source>Here are some examples of route paths based on strings.</source>
          <target state="translated">文字列を基にした経路経路の例を紹介します。</target>
        </trans-unit>
        <trans-unit id="fd8c766e2d9cdba3e56401aa3bc5d966cd7ac761" translate="yes" xml:space="preserve">
          <source>Here are some further recommendations from the excellent &lt;a href=&quot;https://blog.risingstack.com/node-js-security-checklist/&quot;&gt;Node.js Security Checklist&lt;/a&gt;. Refer to that blog post for all the details on these recommendations:</source>
          <target state="translated">以下は、優れた&lt;a href=&quot;https://blog.risingstack.com/node-js-security-checklist/&quot;&gt;Node.jsセキュリティチェックリスト&lt;/a&gt;からの推奨事項です。これらの推奨事項の詳細については、そのブログ投稿を参照してください。</target>
        </trans-unit>
        <trans-unit id="43ad73ec7564c756614dece67281edec275e4b2c" translate="yes" xml:space="preserve">
          <source>Here are some things you can do in your code to improve your application&amp;rsquo;s performance:</source>
          <target state="translated">アプリケーションのパフォーマンスを向上させるためにコードで実行できることをいくつか示します。</target>
        </trans-unit>
        <trans-unit id="6a612c035d8cca8bf1922ba64ae32743af23a1a7" translate="yes" xml:space="preserve">
          <source>Here are some things you can do in your system environment to improve your app&amp;rsquo;s performance:</source>
          <target state="translated">アプリのパフォーマンスを向上させるためにシステム環境で実行できるいくつかのことを次に示します。</target>
        </trans-unit>
        <trans-unit id="f54a6b60ff987a13387f1b45020214d11b5fe94d" translate="yes" xml:space="preserve">
          <source>Here is a simple example of a middleware function called &amp;ldquo;myLogger&amp;rdquo;. This function just prints &amp;ldquo;LOGGED&amp;rdquo; when a request to the app passes through it. The middleware function is assigned to a variable named &lt;code&gt;myLogger&lt;/code&gt;.</source>
          <target state="translated">以下は、「myLogger」というミドルウェア関数の簡単な例です。この関数は、アプリへのリクエストが通過したときに「LOGGED」を出力するだけです。ミドルウェア関数は、 &lt;code&gt;myLogger&lt;/code&gt; という名前の変数に割り当てられます。</target>
        </trans-unit>
        <trans-unit id="29eee523e6ac7cfd2b3f4ba5bd6fa42bf2c15da2" translate="yes" xml:space="preserve">
          <source>Here is an example of a simple &amp;ldquo;Hello World&amp;rdquo; Express application. The remainder of this article will define and add two middleware functions to the application: one called &lt;code&gt;myLogger&lt;/code&gt; that prints a simple log message and another called &lt;code&gt;requestTime&lt;/code&gt; that displays the timestamp of the HTTP request.</source>
          <target state="translated">以下は、簡単な「Hello World」Expressアプリケーションの例です。この記事の残りの部分では、2つのミドルウェア関数を定義してアプリケーションに追加します。1つは単純なログメッセージを出力する &lt;code&gt;myLogger&lt;/code&gt; と呼ばれ、もう1つはHTTPリクエストのタイムスタンプを表示する &lt;code&gt;requestTime&lt;/code&gt; と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="5904b4e4df3a387c7672ef1a6aa92ddaea0bf476" translate="yes" xml:space="preserve">
          <source>Here is an example of chained route handlers that are defined by using &lt;code&gt;app.route()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;app.route()&lt;/code&gt; を使用して定義されたチェーンルートハンドラーの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="ae885d4e8d4f5b6f3e41d3ffabc8a16e2fbeed60" translate="yes" xml:space="preserve">
          <source>Here is an example of chained route handlers that are defined by using the &lt;code&gt;app.route()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;app.route()&lt;/code&gt; 関数を使用して定義されたチェーンルートハンドラーの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="7c789453e6914f13e7f8cd7eb7ad8cb2a8f907ae" translate="yes" xml:space="preserve">
          <source>Here is an example of loading a series of middleware functions at a mount point, with a mount path. It illustrates a middleware sub-stack that prints request info for any type of HTTP request to the &lt;code&gt;/user/:id&lt;/code&gt; path.</source>
          <target state="translated">以下は、マウントパスを使用して、一連のミドルウェア機能をマウントポイントにロードする例です。これは、任意のタイプのHTTPリクエストのリクエスト情報を &lt;code&gt;/user/:id&lt;/code&gt; パスに出力するミドルウェアサブスタックを示しています。</target>
        </trans-unit>
        <trans-unit id="ebb96428459638c03c2d8be69dee3c56ccc0ac44" translate="yes" xml:space="preserve">
          <source>Here is an example of migrating an Express 3 application to Express 4. The files of interest are &lt;code&gt;app.js&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt;.</source>
          <target state="translated">以下は、Express 3アプリケーションをExpress 4に移行する例です。対象のファイルは &lt;code&gt;app.js&lt;/code&gt; と &lt;code&gt;package.json&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8266fb3bd0bf006985e3824d729536c3a8ff648a" translate="yes" xml:space="preserve">
          <source>Here is an example of using &lt;code&gt;res.sendFile&lt;/code&gt; with all its arguments.</source>
          <target state="translated">以下に、すべての引数を指定した &lt;code&gt;res.sendFile&lt;/code&gt; の使用例を示します。</target>
        </trans-unit>
        <trans-unit id="d856aeccf40dbeaa41a7a6a8f6314e0d867c3f25" translate="yes" xml:space="preserve">
          <source>Here is an example of using the &lt;code&gt;express.static&lt;/code&gt; middleware function with an elaborate options object:</source>
          <target state="translated">複雑なオプションオブジェクトで &lt;code&gt;express.static&lt;/code&gt; ミドルウェア関数を使用する例を次に示します。</target>
        </trans-unit>
        <trans-unit id="dc3b8fb4235dd12be6ae895105e0ba2e0ca40bbe" translate="yes" xml:space="preserve">
          <source>Here is an example of using try-catch to handle a potential process-crashing exception. This middleware function accepts a query field parameter named &amp;ldquo;params&amp;rdquo; that is a JSON object.</source>
          <target state="translated">次に、try-catchを使用して、潜在的なプロセスクラッシュの例外を処理する例を示します。このミドルウェア関数は、JSONオブジェクトである「params」という名前のクエリフィールドパラメーターを受け入れます。</target>
        </trans-unit>
        <trans-unit id="42931526f56e065ecdd4e7bb2baad3b3f3afd0a4" translate="yes" xml:space="preserve">
          <source>Here is an example using &lt;a href=&quot;https://www.npmjs.com/package/cookie-session&quot;&gt;cookie-session&lt;/a&gt; middleware:</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/cookie-session&quot;&gt;Cookieセッション&lt;/a&gt;ミドルウェアの使用例を次に示します。</target>
        </trans-unit>
        <trans-unit id="6435fe2b12e66e23fb23b9ac2f8ef5c0c528c949" translate="yes" xml:space="preserve">
          <source>Here is the &lt;a href=&quot;https://github.com/senchalabs/connect#middleware&quot;&gt;complete list&lt;/a&gt; of Express 4 middleware.</source>
          <target state="translated">Express 4ミドルウェアの&lt;a href=&quot;https://github.com/senchalabs/connect#middleware&quot;&gt;完全なリスト&lt;/a&gt;を以下に示します。</target>
        </trans-unit>
        <trans-unit id="7a8087aa754c87c467bd05bcfecc805d8e7787f9" translate="yes" xml:space="preserve">
          <source>Here is the list of changes (as of the alpha 2 release ) that will affect you as a user of Express. See the &lt;a href=&quot;https://github.com/strongloop/express/pull/2237&quot;&gt;pull request&lt;/a&gt; for a list of all the planned features.</source>
          <target state="translated">以下は、Expressのユーザーとして影響する変更の一覧です（alpha 2リリース以降）。計画されているすべての機能のリストについては、&lt;a href=&quot;https://github.com/strongloop/express/pull/2237&quot;&gt;プルリクエスト&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="5dd162baa2b444ee3b6306d34b2ea01915cb4529" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a basic template that illustrates using terminus. For more information, see &lt;a href=&quot;https://github.com/godaddy/terminus&quot;&gt;https://github.com/godaddy/terminus&lt;/a&gt;.</source>
          <target state="translated">ターミナルの使用を説明する基本的なテンプレートは次のとおりです。詳細については、&lt;a href=&quot;https://github.com/godaddy/terminus&quot;&gt;https://github.com/godaddy/terminusを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c5183c261f44ea5bf95d7dee1d6a67b57ebbb693" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a brief look at each of these tools. For a detailed comparison, see &lt;a href=&quot;http://strong-pm.io/compare/&quot;&gt;http://strong-pm.io/compare/&lt;/a&gt;.</source>
          <target state="translated">ここでは、これらの各ツールについて簡単に説明します。詳細な比較については、&lt;a href=&quot;http://strong-pm.io/compare/&quot;&gt;http://strong-pm.io/compare/を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4d83b66bd9c3d34caf62d68c628ba7d2f0aa5f92" translate="yes" xml:space="preserve">
          <source>How can I authenticate users?</source>
          <target state="translated">ユーザーを認証するにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="1c8e7e8cdd157da7ebdab4903ec993d058905211" translate="yes" xml:space="preserve">
          <source>How do I define models?</source>
          <target state="translated">モデルを定義するには?</target>
        </trans-unit>
        <trans-unit id="e3022adde31b812ad240becc8e1f6be69af66a4b" translate="yes" xml:space="preserve">
          <source>How do I handle 404 responses?</source>
          <target state="translated">404件の回答を処理するにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="feb77df15023f9935deb230a2aea22843e253eff" translate="yes" xml:space="preserve">
          <source>How do I render plain HTML?</source>
          <target state="translated">プレーンなHTMLをレンダリングするにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="3cc556aa8db25e9e223f8ad78d3c4d3c7c518192" translate="yes" xml:space="preserve">
          <source>How do I setup an error handler?</source>
          <target state="translated">エラーハンドラの設定方法は?</target>
        </trans-unit>
        <trans-unit id="b4b579cb7673d085f9414e548b8c413f90e6c035" translate="yes" xml:space="preserve">
          <source>How should I structure my application?</source>
          <target state="translated">アプリケーションの構成はどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="c3e8ccbc97249d44851b21b156c0c5f3d825fe78" translate="yes" xml:space="preserve">
          <source>However, StrongLoop PM has lots of features that specifically target production deployment. You can use it and the related StrongLoop tools to:</source>
          <target state="translated">しかし、StrongLoop PM には、特に本番環境への導入を目的とした多くの機能があります。あなたは、それと関連するStrongLoopツールを以下のように使用することができます。</target>
        </trans-unit>
        <trans-unit id="4bf4f2b89171b2852eab41d443cd4ba81309c661" translate="yes" xml:space="preserve">
          <source>However, the path that you provide to the &lt;code&gt;express.static&lt;/code&gt; function is relative to the directory from where you launch your &lt;code&gt;node&lt;/code&gt; process. If you run the express app from another directory, it&amp;rsquo;s safer to use the absolute path of the directory that you want to serve:</source>
          <target state="translated">ただし、 &lt;code&gt;express.static&lt;/code&gt; 関数に指定するパスは、 &lt;code&gt;node&lt;/code&gt; プロセスを起動するディレクトリからの相対パスです。別のディレクトリからExpressアプリを実行する場合は、提供するディレクトリの絶対パスを使用する方が安全です。</target>
        </trans-unit>
        <trans-unit id="d3b727274649dce5e00077cb30821d704b38e9ef" translate="yes" xml:space="preserve">
          <source>However, there are two caveats:</source>
          <target state="translated">ただし、2つの注意点があります。</target>
        </trans-unit>
        <trans-unit id="18ea19776f8b299064d4fe790b7bc9b75ae09e06" translate="yes" xml:space="preserve">
          <source>However, try-catch works only for synchronous code. Because the Node platform is primarily asynchronous (particularly in a production environment), try-catch won&amp;rsquo;t catch a lot of exceptions.</source>
          <target state="translated">ただし、try-catchは同期コードに対してのみ機能します。Nodeプラットフォームは主に非同期であるため（特に本番環境では）、try-catchは多くの例外をキャッチしません。</target>
        </trans-unit>
        <trans-unit id="a1696bb2633c96db12c0bcdfb577d6da23981437" translate="yes" xml:space="preserve">
          <source>IMPORTANT: Since the app instances run as separate processes, they do not share the same memory space. That is, objects are local to each instance of the app. Therefore, you cannot maintain state in the application code. However, you can use an in-memory datastore like &lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt; to store session-related data and state. This caveat applies to essentially all forms of horizontal scaling, whether clustering with multiple processes or multiple physical servers.</source>
          <target state="translated">重要：アプリインスタンスは個別のプロセスとして実行されるため、同じメモリ空間を共有しません。つまり、オブジェクトはアプリの各インスタンスに対してローカルです。したがって、アプリケーションコードで状態を維持することはできません。ただし、&lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt;などのメモリ内データストアを使用して、セッション関連のデータと状態を保存できます。この警告は、クラスタリングが複数のプロセスであるか複数の物理サーバーであるかに関係なく、基本的にすべての形式の水平スケーリングに適用されます。</target>
        </trans-unit>
        <trans-unit id="2d68eb41b0bf6d9f4a1f3670230185ea623a1f26" translate="yes" xml:space="preserve">
          <source>IP addresses</source>
          <target state="translated">アイピーアドレス</target>
        </trans-unit>
        <trans-unit id="92e0bf434a9c5656b33cddfda88618ca016db3db" translate="yes" xml:space="preserve">
          <source>If &quot;strong&quot;, enables strong ETag.</source>
          <target state="translated">strong &quot;の場合、強力なETagを有効にします。</target>
        </trans-unit>
        <trans-unit id="01addcc33f6e28da623a5bb7a77866f99a9ed76a" translate="yes" xml:space="preserve">
          <source>If &quot;weak&quot;, enables weak ETag.</source>
          <target state="translated">weak &quot;の場合、弱いETagを有効にします。</target>
        </trans-unit>
        <trans-unit id="ae2fff480e9fc6127f296270617bb7c428b6d9f0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;false&lt;/code&gt;, the app is understood as directly facing the Internet and the client&amp;rsquo;s IP address is derived from &lt;code&gt;req.connection.remoteAddress&lt;/code&gt;. This is the default setting.</source>
          <target state="translated">場合は &lt;code&gt;false&lt;/code&gt; を、アプリが直接インターネットに直面するものとして理解され、クライアントのIPアドレスが由来し &lt;code&gt;req.connection.remoteAddress&lt;/code&gt; 。これがデフォルトの設定です。</target>
        </trans-unit>
        <trans-unit id="0c9558ebb73416ba72c987975c84fde1b1e832fd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;myLogger&lt;/code&gt; is loaded after the route to the root path, the request never reaches it and the app doesn&amp;rsquo;t print &amp;ldquo;LOGGED&amp;rdquo;, because the route handler of the root path terminates the request-response cycle.</source>
          <target state="translated">場合 &lt;code&gt;myLogger&lt;/code&gt; は、ルート・パスへのルートの後にロードされ、要求がそれに到達したことがないし、ルートパスのルートハンドラが要求応答サイクルを終了させるためのアプリは、「LOGGED」に印刷されません。</target>
        </trans-unit>
        <trans-unit id="056224c71a6291d7279aa8baf4ee7f6192cfb78e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;name&lt;/code&gt; is an array, the &lt;code&gt;callback&lt;/code&gt; trigger is registered for each parameter declared in it, in the order in which they are declared. Furthermore, for each declared parameter except the last one, a call to &lt;code&gt;next&lt;/code&gt; inside the callback will call the callback for the next declared parameter. For the last parameter, a call to &lt;code&gt;next&lt;/code&gt; will call the next middleware in place for the route currently being processed, just like it would if &lt;code&gt;name&lt;/code&gt; were just a string.</source>
          <target state="translated">場合は &lt;code&gt;name&lt;/code&gt; 配列され、 &lt;code&gt;callback&lt;/code&gt; のトリガーは、宣言された順序で、その中で宣言された各パラメータに登録されています。さらに、最後のパラメータを除く宣言された各パラメータについて、コールバック内で &lt;code&gt;next&lt;/code&gt; を呼び出すと、次の宣言されたパラメータのコールバックが呼び出されます。最後のパラメーターの場合、 &lt;code&gt;next&lt;/code&gt; を呼び出すと、現在処理中のルートの次のミドルウェアが呼び出されます。これは、 &lt;code&gt;name&lt;/code&gt; が単なる文字列の場合と同じです。</target>
        </trans-unit>
        <trans-unit id="02d369aa0775929b28c3372446dffc8a1888df91" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, the client&amp;rsquo;s IP address is understood as the left-most entry in the &lt;code&gt;X-Forwarded-*&lt;/code&gt; header.</source>
          <target state="translated">場合は &lt;code&gt;true&lt;/code&gt; 、クライアントのIPアドレスがで一番左のエントリとして理解されている &lt;code&gt;X-Forwarded-*&lt;/code&gt; ヘッダー。</target>
        </trans-unit>
        <trans-unit id="31791714f3fda698d2a47c8e6b402d3a6f836774" translate="yes" xml:space="preserve">
          <source>If a sub-app is mounted on multiple path patterns, &lt;code&gt;app.mountpath&lt;/code&gt; returns the list of patterns it is mounted on, as shown in the following example.</source>
          <target state="translated">&lt;code&gt;app.mountpath&lt;/code&gt; が複数のパスパターンにマウントされている場合、app.mountpathは、次の例に示すように、サブアプリがマウントされているパターンのリストを返します。</target>
        </trans-unit>
        <trans-unit id="b0d6b3c2f72479a5b69c27eb17bd4356e2405f52" translate="yes" xml:space="preserve">
          <source>If an unsupported status code is specified, the HTTP status is still set to &lt;code&gt;statusCode&lt;/code&gt; and the string version of the code is sent as the response body.</source>
          <target state="translated">サポートされていないステータスコードが指定されている場合でも、HTTPステータスは &lt;code&gt;statusCode&lt;/code&gt; に設定され、コードの文字列バージョンが応答本文として送信されます。</target>
        </trans-unit>
        <trans-unit id="11045bad3f2c8f679da552c49dcb01e446a83188" translate="yes" xml:space="preserve">
          <source>If no signed cookies are sent, the property defaults to &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="translated">署名付きCookieが送信されない場合、プロパティはデフォルトで &lt;code&gt;{}&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="a4f2bc8e2dfb5c24e37a8093b40c483e4cd6d36b" translate="yes" xml:space="preserve">
          <source>If port is omitted or is 0, the operating system will assign an arbitrary unused port, which is useful for cases like automated tasks (tests, etc.).</source>
          <target state="translated">ポートが省略された場合や0の場合、オペレーティングシステムは任意の未使用のポートを割り当てますので、自動タスク(テストなど)のような場合に便利です。</target>
        </trans-unit>
        <trans-unit id="29970526271d09358c59cb05c881b5576f7eb2c2" translate="yes" xml:space="preserve">
          <source>If the callback in a sequence provides no data, only errors, you can simplify this code as follows:</source>
          <target state="translated">シーケンス内のコールバックがデータを提供せず、エラーのみを提供する場合は、以下のようにコードを簡略化することができます。</target>
        </trans-unit>
        <trans-unit id="933954ce91190a7a525c85c619fe65eb07d62358" translate="yes" xml:space="preserve">
          <source>If the cookie has been signed, you have to use &lt;a href=&quot;#req.signedCookies&quot;&gt;req.signedCookies&lt;/a&gt;.</source>
          <target state="translated">Cookieが署名されている場合は、&lt;a href=&quot;#req.signedCookies&quot;&gt;req.signedCookies&lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="a55a299297ecc876ea30e666395f9359d9372ca5" translate="yes" xml:space="preserve">
          <source>If the current middleware function does not end the request-response cycle, it must call &lt;code&gt;next()&lt;/code&gt; to pass control to the next middleware function. Otherwise, the request will be left hanging.</source>
          <target state="translated">現在のミドルウェア関数が要求/応答サイクルを終了しない場合は、次のミドルウェア関数に制御を渡すために &lt;code&gt;next()&lt;/code&gt; を呼び出す必要があります。それ以外の場合、リクエストは保留のままになります。</target>
        </trans-unit>
        <trans-unit id="e1f1a80344dcfb92361d5f135bb286071c1a5646" translate="yes" xml:space="preserve">
          <source>If you already have the Express 3 app generator installed on your system, you must uninstall it:</source>
          <target state="translated">すでにExpress 3アプリジェネレーターがシステムにインストールされている場合は、それをアンインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="e0a41b42dfc013aa5ef155edcfc958c395f488e6" translate="yes" xml:space="preserve">
          <source>If you are using Node.js 4.0+ or io.js 2.1.0+, you can use the &lt;code&gt;--trace-sync-io&lt;/code&gt; command-line flag to print a warning and a stack trace whenever your application uses a synchronous API. Of course, you wouldn&amp;rsquo;t want to use this in production, but rather to ensure that your code is ready for production. See the &lt;a href=&quot;https://nodejs.org/api/cli.html#cli_trace_sync_io&quot;&gt;node command-line options documentation&lt;/a&gt; for more information.</source>
          <target state="translated">Node.js 4.0+またはio.js 2.1.0+を使用している場合、 &lt;code&gt;--trace-sync-io&lt;/code&gt; コマンドラインフラグを使用して、アプリケーションが同期APIを使用するときはいつでも警告とスタックトレースを出力できます。もちろん、これを本番環境で使用するのではなく、コードを本番環境で使用できるようにする必要があります。詳細については、&lt;a href=&quot;https://nodejs.org/api/cli.html#cli_trace_sync_io&quot;&gt;ノードのコマンドラインオプションのドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="2e50bfdb6d008631ee77562751dbc5df1a0891f9" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;next()&lt;/code&gt; with an error after you have started writing the response (for example, if you encounter an error while streaming the response to the client) the Express default error handler closes the connection and fails the request.</source>
          <target state="translated">応答の書き込み開始後に &lt;code&gt;next()&lt;/code&gt; をエラーで呼び出すと（たとえば、クライアントへの応答のストリーミング中にエラーが発生した場合）、Expressのデフォルトのエラーハンドラーが接続を閉じ、要求を失敗させます。</target>
        </trans-unit>
        <trans-unit id="5a5193563ca4a33ff304f3e6fed6d641785803f8" translate="yes" xml:space="preserve">
          <source>If you deploy your application to StrongLoop Process Manager (PM), then you can take advantage of clustering &lt;em&gt;without&lt;/em&gt; modifying your application code.</source>
          <target state="translated">アプリケーションをStrongLoop Process Manager（PM）にデプロイすると、アプリケーションコード&lt;em&gt;を&lt;/em&gt;変更&lt;em&gt;せず&lt;/em&gt;にクラスタリング&lt;em&gt;を&lt;/em&gt;利用できます。</target>
        </trans-unit>
        <trans-unit id="bb8f3011d872f96786d8d650cde63b4fe7b540ee" translate="yes" xml:space="preserve">
          <source>If you deploy your application with PM2, then you can take advantage of clustering &lt;em&gt;without&lt;/em&gt; modifying your application code. You should ensure your &lt;a href=&quot;http://pm2.keymetrics.io/docs/usage/specifics/#stateless-apps&quot;&gt;application is stateless&lt;/a&gt; first, meaning no local data is stored in the process (such as sessions, websocket connections and the like).</source>
          <target state="translated">PM2でアプリケーションをデプロイする場合、アプリケーションコード&lt;em&gt;を&lt;/em&gt;変更&lt;em&gt;せず&lt;/em&gt;にクラスタリング&lt;em&gt;を&lt;/em&gt;利用できます。最初に&lt;a href=&quot;http://pm2.keymetrics.io/docs/usage/specifics/#stateless-apps&quot;&gt;アプリケーションがステートレスである&lt;/a&gt;ことを確認する必要があります。つまり、プロセスにローカルデータ（セッション、Webソケット接続など）は保存されません。</target>
        </trans-unit>
        <trans-unit id="80b338185da4af57837e716d37f8c79971bb7b82" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to use Helmet, then at least disable the &lt;code&gt;X-Powered-By&lt;/code&gt; header. Attackers can use this header (which is enabled by default) to detect apps running Express and then launch specifically-targeted attacks.</source>
          <target state="translated">Helmetを使用しない場合は、少なくとも &lt;code&gt;X-Powered-By&lt;/code&gt; ヘッダーを無効にします。攻撃者はこのヘッダー（デフォルトで有効）を使用して、Expressを実行しているアプリを検出し、特定のターゲットを狙った攻撃を開始できます。</target>
        </trans-unit>
        <trans-unit id="a5ed12e507ca31cdcda25284d69078edbb84359a" translate="yes" xml:space="preserve">
          <source>If you follow the pattern in which you create a module that just exports a middleware function and &lt;code&gt;require()&lt;/code&gt; it in your main file, then the middleware can access the Express instance via &lt;code&gt;req.app&lt;/code&gt;</source>
          <target state="translated">ミドルウェア関数をエクスポートするモジュールを作成し、それをメインファイルで &lt;code&gt;require()&lt;/code&gt; するパターンに従う場合、ミドルウェアは &lt;code&gt;req.app&lt;/code&gt; を介してExpressインスタンスにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="c0067c5f5d67278ba7b6fc1fbfb8c28c4d7e2f58" translate="yes" xml:space="preserve">
          <source>If you found the above behavior confusing, think of path segments as directories (with trailing slashes) and files, it will start to make sense.</source>
          <target state="translated">上記の動作が混乱するようであれば、パスセグメントをディレクトリ(最後にスラッシュを付けて)とファイルと考えてみてください。</target>
        </trans-unit>
        <trans-unit id="a587c353ca4afc9178eb142caf4ebbb8cf3ebd59" translate="yes" xml:space="preserve">
          <source>If you have a route handler with multiple callback functions you can use the &lt;code&gt;route&lt;/code&gt; parameter to skip to the next route handler. For example:</source>
          <target state="translated">複数のコールバック関数を持つルートハンドラーがある場合は、 &lt;code&gt;route&lt;/code&gt; パラメーターを使用して次のルートハンドラーにスキップできます。例えば：</target>
        </trans-unit>
        <trans-unit id="3ccd10d03f9fd5c6409f6ed22eb03dff4f490928" translate="yes" xml:space="preserve">
          <source>If you look at the contents of the &lt;code&gt;app4/app.js&lt;/code&gt; file, you will notice that all the middleware functions (except &lt;code&gt;express.static&lt;/code&gt;) that are required for the app are loaded as independent modules, and the &lt;code&gt;router&lt;/code&gt; middleware is no longer explicitly loaded in the app.</source>
          <target state="translated">&lt;code&gt;app4/app.js&lt;/code&gt; ファイルの内容を見ると、アプリに必要なすべてのミドルウェア関数（ &lt;code&gt;express.static&lt;/code&gt; を除く）が独立したモジュールとしてロードされており、 &lt;code&gt;router&lt;/code&gt; ミドルウェアが明示的にロードされていないことがわかりますアプリで。</target>
        </trans-unit>
        <trans-unit id="907299c24280a55ee74849f6783b224df5b93631" translate="yes" xml:space="preserve">
          <source>If you look at the npm start script in the &lt;code&gt;package.json&lt;/code&gt; file, you will notice that the actual command that starts the app is &lt;code&gt;node ./bin/www&lt;/code&gt;, which used to be &lt;code&gt;node app.js&lt;/code&gt; in Express 3.</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; ファイルのnpm起動スクリプトを見ると、アプリを起動する実際のコマンドは &lt;code&gt;node ./bin/www&lt;/code&gt; であり、これは以前Express 3では &lt;code&gt;node app.js&lt;/code&gt; でした。</target>
        </trans-unit>
        <trans-unit id="727dca035da7af2ee06bd21f1aa4b3a54a2f3854" translate="yes" xml:space="preserve">
          <source>If you need to make changes to a key in &lt;code&gt;req.params&lt;/code&gt;, use the &lt;a href=&quot;index#app.param&quot;&gt;app.param&lt;/a&gt; handler. Changes are applicable only to &lt;a href=&quot;guide/routing#route-parameters&quot;&gt;parameters&lt;/a&gt; already defined in the route path.</source>
          <target state="translated">&lt;code&gt;req.params&lt;/code&gt; のキーを変更する必要がある場合は、&lt;a href=&quot;index#app.param&quot;&gt;app.param&lt;/a&gt;ハンドラーを使用します。変更は、ルートパスですでに定義されている&lt;a href=&quot;guide/routing#route-parameters&quot;&gt;パラメータに&lt;/a&gt;のみ適用されます。</target>
        </trans-unit>
        <trans-unit id="44208ca647301ec25437d6d4a3fb6878ffefdfbd" translate="yes" xml:space="preserve">
          <source>If you need to use the dollar character (&lt;code&gt;$&lt;/code&gt;) in a path string, enclose it escaped within &lt;code&gt;([&lt;/code&gt; and &lt;code&gt;])&lt;/code&gt;. For example, the path string for requests at &amp;ldquo;&lt;code&gt;/data/$book&lt;/code&gt;&amp;rdquo;, would be &amp;ldquo;&lt;code&gt;/data/([\$])book&lt;/code&gt;&amp;rdquo;.</source>
          <target state="translated">パス文字列でドル記号（ &lt;code&gt;$&lt;/code&gt; ）を使用する必要がある場合は、エスケープして &lt;code&gt;([&lt;/code&gt; と &lt;code&gt;])&lt;/code&gt; で囲みます。たとえば、「 &lt;code&gt;/data/$book&lt;/code&gt; 」でのリクエストのパス文字列は、「 &lt;code&gt;/data/([\$])book&lt;/code&gt; 」になります。</target>
        </trans-unit>
        <trans-unit id="f847a330b53c117f417033ab77cb84b2088a6f02" translate="yes" xml:space="preserve">
          <source>If you need to write environment-specific code, you can check the value of NODE_ENV with &lt;code&gt;process.env.NODE_ENV&lt;/code&gt;. Be aware that checking the value of any environment variable incurs a performance penalty, and so should be done sparingly.</source>
          <target state="translated">環境固有のコードを記述する必要がある場合は、NODE_ENVの値を &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; で確認できます。環境変数の値をチェックするとパフォーマンスが低下するため、慎重に行う必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="99eac75fd4d83d69721b9be343e3a1f5112d408a" translate="yes" xml:space="preserve">
          <source>If you need your middleware to be configurable, export a function which accepts an options object or other parameters, which, then returns the middleware implementation based on the input parameters.</source>
          <target state="translated">ミドルウェアを設定可能にする必要がある場合は、オプションオブジェクトやその他のパラメータを受け付ける関数をエクスポートして、入力パラメータに基づいてミドルウェアの実装を返します。</target>
        </trans-unit>
        <trans-unit id="a74a9b00b118621b25b08e66514d10e28c1b33ed" translate="yes" xml:space="preserve">
          <source>If you pass an error to &lt;code&gt;next()&lt;/code&gt; and you do not handle it in a custom error handler, it will be handled by the built-in error handler; the error will be written to the client with the stack trace. The stack trace is not included in the production environment.</source>
          <target state="translated">エラーを &lt;code&gt;next()&lt;/code&gt; に渡し、それをカスタムエラーハンドラーで処理しない場合、組み込みのエラーハンドラーによって処理されます。エラーはスタックトレースとともにクライアントに書き込まれます。スタックトレースは、本番環境には含まれていません。</target>
        </trans-unit>
        <trans-unit id="3905618cd351c788875d5f115409084f86f19ff5" translate="yes" xml:space="preserve">
          <source>If you pass anything to the &lt;code&gt;next()&lt;/code&gt; function (except the string &lt;code&gt;'route'&lt;/code&gt;), Express regards the current request as being an error and will skip any remaining non-error handling routing and middleware functions. If you want to handle that error, you&amp;rsquo;ll have to create an error-handling route as described in the next section.</source>
          <target state="translated">&lt;code&gt;next()&lt;/code&gt; 関数に何か（文字列 &lt;code&gt;'route'&lt;/code&gt; を除く）を渡すと、Expressは現在の要求をエラーと見なし、残りの非エラー処理ルーティングおよびミドルウェア関数をスキップします。そのエラーを処理する場合は、次のセクションで説明するように、エラー処理ルートを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="c92b8af7f8923f9f935cbdbd328d5ab032b1d55a" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;helmet.js&lt;/code&gt;, it takes care of this for you.</source>
          <target state="translated">&lt;code&gt;helmet.js&lt;/code&gt; を使用する場合は、これが自動的に処理されます。</target>
        </trans-unit>
        <trans-unit id="4b56bac7c5caa8bd3babf8429ba9cd9333aab01d" translate="yes" xml:space="preserve">
          <source>If you use any of these methods or properties in your app, it will crash. So, you&amp;rsquo;ll need to change your app after you update to version 5.</source>
          <target state="translated">アプリでこれらのメソッドまたはプロパティのいずれかを使用すると、クラッシュします。そのため、バージョン5に更新した後、アプリを変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="cb07d1be238ebec33e695d0ede0807c26ba02c3e" translate="yes" xml:space="preserve">
          <source>If you want an object model driver for MongoDB, look at &lt;a href=&quot;https://github.com/LearnBoost/mongoose&quot;&gt;Mongoose&lt;/a&gt;.</source>
          <target state="translated">MongoDBのオブジェクトモデルドライバーが必要な場合は、&lt;a href=&quot;https://github.com/LearnBoost/mongoose&quot;&gt;Mongooseを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3b3d046b97bd3bdb67004e097ac60a403f6c5bda" translate="yes" xml:space="preserve">
          <source>If you want to stay more secure, consider &lt;a href=&quot;https://snyk.io/&quot;&gt;Snyk&lt;/a&gt;.</source>
          <target state="translated">安全性を維持したい場合は、&lt;a href=&quot;https://snyk.io/&quot;&gt;Snykを&lt;/a&gt;検討してください。</target>
        </trans-unit>
        <trans-unit id="8f50b62a245a5f1f32836f68db67743ca4100327" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re logging app activity (for example, tracking traffic or API calls), instead of using &lt;code&gt;console.log()&lt;/code&gt;, use a logging library like &lt;a href=&quot;https://www.npmjs.com/package/winston&quot;&gt;Winston&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/bunyan&quot;&gt;Bunyan&lt;/a&gt;. For a detailed comparison of these two libraries, see the StrongLoop blog post &lt;a href=&quot;https://strongloop.com/strongblog/compare-node-js-logging-winston-bunyan/&quot;&gt;Comparing Winston and Bunyan Node.js Logging&lt;/a&gt;.</source>
          <target state="translated">アプリのアクティビティ（トラフィックの追跡やAPI呼び出しなど）をログに記録する場合は、 &lt;code&gt;console.log()&lt;/code&gt; を使用する代わりに、&lt;a href=&quot;https://www.npmjs.com/package/winston&quot;&gt;Winston&lt;/a&gt;や&lt;a href=&quot;https://www.npmjs.com/package/bunyan&quot;&gt;Bunyan&lt;/a&gt;などのログライブラリを使用します。これら2つのライブラリの詳細な比較については、StrongLoopブログの投稿「&lt;a href=&quot;https://strongloop.com/strongblog/compare-node-js-logging-winston-bunyan/&quot;&gt;WinstonとBunyan Node.jsロギングの比較&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="fb97141b80cd9e7ad14d9046ac73e9b3406f1585" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re logging for purposes of debugging, then instead of using &lt;code&gt;console.log()&lt;/code&gt;, use a special debugging module like &lt;a href=&quot;https://www.npmjs.com/package/debug&quot;&gt;debug&lt;/a&gt;. This module enables you to use the DEBUG environment variable to control what debug messages are sent to &lt;code&gt;console.err()&lt;/code&gt;, if any. To keep your app purely asynchronous, you&amp;rsquo;d still want to pipe &lt;code&gt;console.err()&lt;/code&gt; to another program. But then, you&amp;rsquo;re not really going to debug in production, are you?</source>
          <target state="translated">デバッグの目的でログを記録する場合は、 &lt;code&gt;console.log()&lt;/code&gt; を使用する代わりに、&lt;a href=&quot;https://www.npmjs.com/package/debug&quot;&gt;debug&lt;/a&gt;などの特別なデバッグモジュールを使用します。このモジュールを使用すると、DEBUG環境変数を使用して、 &lt;code&gt;console.err()&lt;/code&gt; に送信されるデバッグメッセージ（ある場合）を制御できます。アプリを完全に非同期に保つために、 &lt;code&gt;console.err()&lt;/code&gt; を別のプログラムにパイプする必要があります。しかし、実際には本番環境でデバッグするつもりはありませんか？</target>
        </trans-unit>
        <trans-unit id="7cc2ae614864c49923ab28d53e79d90029f52d98" translate="yes" xml:space="preserve">
          <source>If your app deals with or transmits sensitive data, use &lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security&quot;&gt;Transport Layer Security&lt;/a&gt; (TLS) to secure the connection and the data. This technology encrypts data before it is sent from the client to the server, thus preventing some common (and easy) hacks. Although Ajax and POST requests might not be visibly obvious and seem &amp;ldquo;hidden&amp;rdquo; in browsers, their network traffic is vulnerable to &lt;a href=&quot;https://en.wikipedia.org/wiki/Packet_analyzer&quot;&gt;packet sniffing&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Man-in-the-middle_attack&quot;&gt;man-in-the-middle attacks&lt;/a&gt;.</source>
          <target state="translated">アプリが機密データを処理または送信する場合は、&lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security&quot;&gt;トランスポート層セキュリティ&lt;/a&gt;（TLS）を使用して接続とデータを保護します。このテクノロジーは、クライアントからサーバーに送信される前にデータを暗号化するため、一般的な（そして簡単な）ハッキングを防ぎます。Ajax要求とPOST要求は、目に見えて明白ではなく、ブラウザーでは「隠されている」ように見えるかもしれませんが、それらのネットワークトラフィックは、&lt;a href=&quot;https://en.wikipedia.org/wiki/Packet_analyzer&quot;&gt;パケットスニッフィング&lt;/a&gt;や&lt;a href=&quot;https://en.wikipedia.org/wiki/Man-in-the-middle_attack&quot;&gt;中間者攻撃&lt;/a&gt;に対して脆弱です。</target>
        </trans-unit>
        <trans-unit id="a02de4d359af11627308bb38ced386f5caa4e09d" translate="yes" xml:space="preserve">
          <source>Implement rate-limiting to prevent brute-force attacks against authentication. One way to do this is to use &lt;a href=&quot;https://github.com/strongloop/microgateway&quot;&gt;StrongLoop Microgateway&lt;/a&gt; to enforce a rate-limiting policy. Alternatively, you can use package such as &lt;a href=&quot;https://github.com/animir/node-rate-limiter-flexible&quot;&gt;rate-limiter-flexible&lt;/a&gt; and configure limits.</source>
          <target state="translated">認証に対するブルートフォース攻撃を防ぐためにレート制限を実装します。これを行う1つの方法は、&lt;a href=&quot;https://github.com/strongloop/microgateway&quot;&gt;StrongLoop Microgateway&lt;/a&gt;を使用してレート制限ポリシーを適用することです。または、&lt;a href=&quot;https://github.com/animir/node-rate-limiter-flexible&quot;&gt;レートリミッターフレキシブル&lt;/a&gt;などのパッケージを使用して制限を構成することもできます。</target>
        </trans-unit>
        <trans-unit id="5472549ab72b55046a693bb06c4c1bd944f70c2d" translate="yes" xml:space="preserve">
          <source>Implement the &amp;ldquo;catch-all&amp;rdquo; &lt;code&gt;errorHandler&lt;/code&gt; function as follows (for example):</source>
          <target state="translated">「catch-all」 &lt;code&gt;errorHandler&lt;/code&gt; 関数を次のように実装します（例）：</target>
        </trans-unit>
        <trans-unit id="df66ef4f9fec541e48971fe99984a92ee3d241bf" translate="yes" xml:space="preserve">
          <source>Improvements</source>
          <target state="translated">Improvements</target>
        </trans-unit>
        <trans-unit id="619c2087032eb572722ee7afc9d66edb0f5d5e54" translate="yes" xml:space="preserve">
          <source>In Express 4, &lt;code&gt;req.files&lt;/code&gt; is no longer available on the &lt;code&gt;req&lt;/code&gt; object by default. To access uploaded files on the &lt;code&gt;req.files&lt;/code&gt; object, use multipart-handling middleware like busboy, &lt;a href=&quot;https://www.npmjs.com/package/multer&quot;&gt;multer&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/formidable&quot;&gt;formidable&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/multiparty&quot;&gt;multiparty&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/connect-multiparty&quot;&gt;connect-multiparty&lt;/a&gt;, or &lt;a href=&quot;https://www.npmjs.com/package/pez&quot;&gt;pez&lt;/a&gt;.</source>
          <target state="translated">Express 4では、 &lt;code&gt;req.files&lt;/code&gt; はデフォルトで &lt;code&gt;req&lt;/code&gt; オブジェクトで使用できなくなりました。 &lt;code&gt;req.files&lt;/code&gt; オブジェクトのアップロードされたファイルにアクセスするには、busboy、&lt;a href=&quot;https://www.npmjs.com/package/multer&quot;&gt;multer&lt;/a&gt;、&lt;a href=&quot;https://www.npmjs.com/package/formidable&quot;&gt;formidable&lt;/a&gt;、&lt;a href=&quot;https://www.npmjs.com/package/multiparty&quot;&gt;multiparty&lt;/a&gt;、&lt;a href=&quot;https://www.npmjs.com/package/connect-multiparty&quot;&gt;connect-multiparty&lt;/a&gt;、または&lt;a href=&quot;https://www.npmjs.com/package/pez&quot;&gt;pez&lt;/a&gt;などのマルチパート処理ミドルウェアを使用します。</target>
        </trans-unit>
        <trans-unit id="f52896695367ceed8a45424d1a45616404dca6f6" translate="yes" xml:space="preserve">
          <source>In Express 4, the &lt;code&gt;req.host&lt;/code&gt; function incorrectly stripped off the port number if it was present. In Express 5 the port number is maintained.</source>
          <target state="translated">Express 4では、 &lt;code&gt;req.host&lt;/code&gt; 関数は、ポート番号が存在する場合、ポート番号を誤って取り除きました。Express 5では、ポート番号は維持されます。</target>
        </trans-unit>
        <trans-unit id="5d679d9589465c282abb43cdd261bb629c012b70" translate="yes" xml:space="preserve">
          <source>In Express 4.7 and Express 5 onwards, the query parser option can accept &lt;code&gt;false&lt;/code&gt; to disable query string parsing when you want to use your own function for query string parsing logic.</source>
          <target state="translated">Express 4.7およびExpress 5以降では、クエリ文字列解析ロジックに独自の関数を使用する場合、クエリパーサーオプションは &lt;code&gt;false&lt;/code&gt; を受け入れてクエリ文字列解析を無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="4c3faca5746ceefc7bfb32f84d6f0db2a77325c3" translate="yes" xml:space="preserve">
          <source>In Express 4.x, &lt;a href=&quot;https://github.com/expressjs/express/issues/2495&quot;&gt;the &lt;code&gt;*&lt;/code&gt; character in regular expressions is not interpreted in the usual way&lt;/a&gt;. As a workaround, use &lt;code&gt;{0,}&lt;/code&gt; instead of &lt;code&gt;*&lt;/code&gt;. This will likely be fixed in Express 5.</source>
          <target state="translated">エクスプレス4.xでは、&lt;a href=&quot;https://github.com/expressjs/express/issues/2495&quot;&gt; &lt;code&gt;*&lt;/code&gt; &lt;/a&gt;正規表現の文字は、通常の方法で解釈されません。回避策として、 &lt;code&gt;*&lt;/code&gt; の代わりに &lt;code&gt;{0,}&lt;/code&gt; 使用してください。これはExpress 5で修正される可能性があります。</target>
        </trans-unit>
        <trans-unit id="7786c45c55cd9bd3fd25078b3bdd3f190ec6ed58" translate="yes" xml:space="preserve">
          <source>In Express, 404 responses are not the result of an error, so the error-handler middleware will not capture them. This behavior is because a 404 response simply indicates the absence of additional work to do; in other words, Express has executed all middleware functions and routes, and found that none of them responded. All you need to do is add a middleware function at the very bottom of the stack (below all other functions) to handle a 404 response:</source>
          <target state="translated">Expressでは、404応答はエラーの結果ではないので、エラーハンドラのミドルウェアはそれらをキャプチャしません。言い換えれば、Express はすべてのミドルウェアの関数とルートを実行して、どれも応答しなかったことを発見したということです。必要なのは、404応答を処理するためのミドルウェア関数をスタックの一番下(他のすべての関数の下)に追加することだけです。</target>
        </trans-unit>
        <trans-unit id="b9a6fec1c20a63e5d8f21ecc4405afa8dd515a85" translate="yes" xml:space="preserve">
          <source>In a middleware function, &lt;code&gt;req.originalUrl&lt;/code&gt; is a combination of &lt;code&gt;req.baseUrl&lt;/code&gt; and &lt;code&gt;req.path&lt;/code&gt;, as shown in the following example.</source>
          <target state="translated">次の例に示すように、ミドルウェア関数では、 &lt;code&gt;req.originalUrl&lt;/code&gt; は &lt;code&gt;req.baseUrl&lt;/code&gt; と &lt;code&gt;req.path&lt;/code&gt; の組み合わせです。</target>
        </trans-unit>
        <trans-unit id="1b9695c5a95683098cbe83e501c623d197fb2c54" translate="yes" xml:space="preserve">
          <source>In a multi-core system, you can increase the performance of a Node app by many times by launching a cluster of processes. A cluster runs multiple instances of the app, ideally one instance on each CPU core, thereby distributing the load and tasks among the instances.</source>
          <target state="translated">マルチコアシステムでは、プロセスのクラスタを起動することでNodeアプリのパフォーマンスを何倍にも向上させることができます。クラスタはアプリの複数のインスタンスを実行し、理想的には各CPUコア上で1つのインスタンスを実行することで、負荷とタスクをインスタンス間で分散させます。</target>
        </trans-unit>
        <trans-unit id="d9219943d8751ee08ccae4f63e118550ed716b5a" translate="yes" xml:space="preserve">
          <source>In addition to canonicalized MIME types, you may also use extension names mapped to these types for a slightly less verbose implementation:</source>
          <target state="translated">正規化された MIME タイプに加えて、これらのタイプにマップされた拡張子名を使用して、少し冗長ではない実装を行うこともできます。</target>
        </trans-unit>
        <trans-unit id="3a1ebe6a316944120f054e6b3ecf86bec4a3a893" translate="yes" xml:space="preserve">
          <source>In addition to restarting your app when it crashes, a process manager can enable you to:</source>
          <target state="translated">クラッシュしたときにアプリを再起動するだけでなく、プロセス マネージャを使用することで、以下のことが可能になります。</target>
        </trans-unit>
        <trans-unit id="cdbf043562176c3537e55ba0cfe2a4f1c7af06b3" translate="yes" xml:space="preserve">
          <source>In clustered apps, worker processes can crash individually without affecting the rest of the processes. Apart from performance advantages, failure isolation is another reason to run a cluster of app processes. Whenever a worker process crashes, always make sure to log the event and spawn a new process using cluster.fork().</source>
          <target state="translated">クラスタ化されたアプリでは、ワーカープロセスは他のプロセスに影響を与えることなく、個別にクラッシュすることができます。パフォーマンスの利点とは別に、障害の隔離もアプリプロセスのクラスタを実行する理由の一つです。ワーカープロセスがクラッシュした場合は常にイベントをログに記録し、cluster.fork()を使用して新しいプロセスを生成するようにしてください。</target>
        </trans-unit>
        <trans-unit id="a2e137b80252b7795c24b6fbfd91d5ad4e839ab1" translate="yes" xml:space="preserve">
          <source>In contrast, &lt;a href=&quot;https://www.npmjs.com/package/cookie-session&quot;&gt;cookie-session&lt;/a&gt; middleware implements cookie-backed storage: it serializes the entire session to the cookie, rather than just a session key. Only use it when session data is relatively small and easily encoded as primitive values (rather than objects). Although browsers are supposed to support at least 4096 bytes per cookie, to ensure you don&amp;rsquo;t exceed the limit, don&amp;rsquo;t exceed a size of 4093 bytes per domain. Also, be aware that the cookie data will be visible to the client, so if there is any reason to keep it secure or obscure, then express-session may be a better choice.</source>
          <target state="translated">対照的に、&lt;a href=&quot;https://www.npmjs.com/package/cookie-session&quot;&gt;cookie-session&lt;/a&gt;ミドルウェアはcookie-backedストレージを実装しています。これは、セッションキーだけでなく、セッション全体をcookieにシリアル化します。セッションデータが比較的小さく、（オブジェクトではなく）プリミティブ値として簡単にエンコードできる場合にのみ使用してください。ブラウザはCookieあたり少なくとも4096バイトをサポートするようになっていますが、制限を超えないようにするために、ドメインあたり4093バイトのサイズを超えないでください。また、Cookieデータはクライアントに表示されるため、それを安全または不明瞭にする理由がある場合は、エクスプレスセッションの方が適している場合があります。</target>
        </trans-unit>
        <trans-unit id="dc45996bb8a7cf045e17bc6315b466bce596e8f1" translate="yes" xml:space="preserve">
          <source>In development, you started your app simply from the command line with &lt;code&gt;node server.js&lt;/code&gt; or something similar. But doing this in production is a recipe for disaster. If the app crashes, it will be offline until you restart it. To ensure your app restarts if it crashes, use a process manager. A process manager is a &amp;ldquo;container&amp;rdquo; for applications that facilitates deployment, provides high availability, and enables you to manage the application at runtime.</source>
          <target state="translated">開発では、コマンドラインから &lt;code&gt;node server.js&lt;/code&gt; または同様のものを使用してアプリを起動しました。しかし、本番環境でこれを行うことは災害のレシピです。アプリがクラッシュした場合、再起動するまでオフラインになります。アプリがクラッシュした場合に確実に再起動するには、プロセスマネージャーを使用します。プロセスマネージャは、展開を容易にし、高可用性を提供し、実行時にアプリケーションを管理できるようにするアプリケーションの「コンテナ」です。</target>
        </trans-unit>
        <trans-unit id="7b1a22cb1292dfa35893663bf985bc60671821fb" translate="yes" xml:space="preserve">
          <source>In development, you typically set environment variables in your interactive shell, for example by using &lt;code&gt;export&lt;/code&gt; or your &lt;code&gt;.bash_profile&lt;/code&gt; file. But in general you shouldn&amp;rsquo;t do that on a production server; instead, use your OS&amp;rsquo;s init system (systemd or Upstart). The next section provides more details about using your init system in general, but setting NODE_ENV is so important for performance (and easy to do), that it&amp;rsquo;s highlighted here.</source>
          <target state="translated">開発では、通常、たとえば &lt;code&gt;export&lt;/code&gt; または &lt;code&gt;.bash_profile&lt;/code&gt; ファイルを使用して、対話型シェルで環境変数を設定します。しかし、一般的には、運用サーバーでそれを行うべきではありません。代わりに、OSのinitシステム（systemdまたはUpstart）を使用してください。次のセクションでは、一般的なinitシステムの使用方法について詳しく説明しますが、NODE_ENVの設定はパフォーマンスにとって非常に重要であり（簡単に実行できます）、ここで強調表示されています。</target>
        </trans-unit>
        <trans-unit id="152698c9d800827204274bd7559be6a5fc677ffd" translate="yes" xml:space="preserve">
          <source>In fact, the routing methods can have more than one callback function as arguments. With multiple callback functions, it is important to provide &lt;code&gt;next&lt;/code&gt; as an argument to the callback function and then call &lt;code&gt;next()&lt;/code&gt; within the body of the function to hand off control to the next callback.</source>
          <target state="translated">実際、ルーティングメソッドは、引数として複数のコールバック関数を持つことができます。複数のコールバック関数がある場合、コールバック関数への引数として &lt;code&gt;next&lt;/code&gt; を指定し、関数の本体内で &lt;code&gt;next()&lt;/code&gt; を呼び出して、次のコールバックに制御を渡すことが重要です。</target>
        </trans-unit>
        <trans-unit id="dc62d9a80194415bbeaa9339d2910d93f182c822" translate="yes" xml:space="preserve">
          <source>In general, there are two reasons for logging from your app: For debugging and for logging app activity (essentially, everything else). Using &lt;code&gt;console.log()&lt;/code&gt; or &lt;code&gt;console.error()&lt;/code&gt; to print log messages to the terminal is common practice in development. But &lt;a href=&quot;https://nodejs.org/api/console.html#console_console_1&quot;&gt;these functions are synchronous&lt;/a&gt; when the destination is a terminal or a file, so they are not suitable for production, unless you pipe the output to another program.</source>
          <target state="translated">一般に、アプリからログを記録する理由は2つあります。デバッグ用と、アプリのアクティビティ（基本的にはその他すべて）をログに記録するためです。使用 &lt;code&gt;console.log()&lt;/code&gt; または &lt;code&gt;console.error()&lt;/code&gt; 端末にログメッセージを印刷するには、開発中の一般的な方法です。ただし、&lt;a href=&quot;https://nodejs.org/api/console.html#console_console_1&quot;&gt;これらの関数は&lt;/a&gt;、宛先が端末またはファイルの場合は同期しているため、出力を別のプログラムにパイプ処理しない限り、本番環境には適していません。</target>
        </trans-unit>
        <trans-unit id="3f5be045451a968bdc222ef5da33e50b1cb4f7f9" translate="yes" xml:space="preserve">
          <source>In most cases, you can simply replace the old version 3 middleware with its Express 4 counterpart. For details, see the module documentation in GitHub.</source>
          <target state="translated">ほとんどの場合、古いバージョン 3 のミドルウェアを Express 4 に置き換えるだけです。詳細は GitHub のモジュールドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="159de15770e574438bbae749fda34e42a66cf946" translate="yes" xml:space="preserve">
          <source>In production, you don&amp;rsquo;t want your application to be offline, ever. This means you need to make sure it restarts both if the app crashes and if the server itself crashes. Although you hope that neither of those events occurs, realistically you must account for both eventualities by:</source>
          <target state="translated">本番環境では、アプリケーションをオフラインにする必要はありません。つまり、アプリがクラッシュした場合とサーバー自体がクラッシュした場合の両方でアプリが再起動することを確認する必要があります。これらのイベントのどちらも発生しないことを望みますが、現実的には、次のようにして両方の結果を説明する必要があります。</target>
        </trans-unit>
        <trans-unit id="09a13f298fec0161077615289ef79338cded9d9a" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;myapp&lt;/code&gt; directory, create a file named &lt;code&gt;app.js&lt;/code&gt; and copy in the code from the example above.</source>
          <target state="translated">では &lt;code&gt;myapp&lt;/code&gt; というディレクトリ、という名前のファイルを作成 &lt;code&gt;app.js&lt;/code&gt; 上記の例のコードでは、コピーを。</target>
        </trans-unit>
        <trans-unit id="f225e001ba23454a735ba8df37e6da8e06e2cc7b" translate="yes" xml:space="preserve">
          <source>In the above example &lt;code&gt;next&lt;/code&gt; is provided as the callback for &lt;code&gt;fs.writeFile&lt;/code&gt;, which is called with or without errors. If there is no error the second handler is executed, otherwise Express catches and processes the error.</source>
          <target state="translated">上記の例では、 &lt;code&gt;next&lt;/code&gt; は &lt;code&gt;fs.writeFile&lt;/code&gt; のコールバックとして提供され、エラーの有無にかかわらず呼び出されます。エラーがない場合は2番目のハンドラーが実行され、それ以外の場合はExpressがエラーをキャッチして処理します。</target>
        </trans-unit>
        <trans-unit id="95c287f5cc79bdfc7ac60eb45684fdd3dd980b4c" translate="yes" xml:space="preserve">
          <source>In this case, EJS provides a &lt;code&gt;.renderFile()&lt;/code&gt; method with the same signature that Express expects: &lt;code&gt;(path, options, callback)&lt;/code&gt;, though note that it aliases this method as &lt;code&gt;ejs.__express&lt;/code&gt; internally so if you&amp;rsquo;re using &amp;ldquo;.ejs&amp;rdquo; extensions you don&amp;rsquo;t need to do anything.</source>
          <target state="translated">この場合、EJSは &lt;code&gt;.renderFile()&lt;/code&gt; メソッドに、Expressが期待するものと同じシグネチャ &lt;code&gt;(path, options, callback)&lt;/code&gt; を提供します。ただし、このメソッドは &lt;code&gt;ejs.__express&lt;/code&gt; として内部的にエイリアスされるため、「。ejs」何もする必要がない拡張機能。</target>
        </trans-unit>
        <trans-unit id="a6b42b96809ac3f60f7a81a9d5683d3a0c9f64ff" translate="yes" xml:space="preserve">
          <source>In this documentation and by convention, the object is always referred to as &lt;code&gt;res&lt;/code&gt; (and the HTTP request is &lt;code&gt;req&lt;/code&gt;) but its actual name is determined by the parameters to the callback function in which you&amp;rsquo;re working.</source>
          <target state="translated">このドキュメントでは、慣例により、オブジェクトは常に &lt;code&gt;res&lt;/code&gt; （およびHTTPリクエストは &lt;code&gt;req&lt;/code&gt; ）と呼ばれますが、実際の名前は、作業しているコールバック関数のパラメーターによって決まります。</target>
        </trans-unit>
        <trans-unit id="9582bf3832738701b5764e47dbe543be76b78f1a" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;app.param(name, callback)&lt;/code&gt; signature is modified to &lt;code&gt;app.param(name, accessId)&lt;/code&gt;. Instead of accepting a name and a callback, &lt;code&gt;app.param()&lt;/code&gt; will now accept a name and a number.</source>
          <target state="translated">この例では、 &lt;code&gt;app.param(name, callback)&lt;/code&gt; シグネチャが &lt;code&gt;app.param(name, accessId)&lt;/code&gt; 変更されています。名前とコールバックを受け入れる代わりに、 &lt;code&gt;app.param()&lt;/code&gt; は名前と番号を受け入れるようになりました。</target>
        </trans-unit>
        <trans-unit id="6c3a20ef60e847c02b61ef94b3e0849b5a7d178d" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;app.param(name, callback)&lt;/code&gt; signature remains the same, but instead of a middleware callback, a custom data type checking function has been defined to validate the data type of the user id.</source>
          <target state="translated">この例では、 &lt;code&gt;app.param(name, callback)&lt;/code&gt; シグネチャは同じままですが、ミドルウェアコールバックの代わりに、ユーザーIDのデータ型を検証するためにカスタムデータ型チェック関数が定義されています。</target>
        </trans-unit>
        <trans-unit id="4d9889978feab28ccfa5f51508e3caad96f4aab9" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;getPaidContent&lt;/code&gt; handler will be skipped but any remaining handlers in &lt;code&gt;app&lt;/code&gt; for &lt;code&gt;/a_route_behind_paywall&lt;/code&gt; would continue to be executed.</source>
          <target state="translated">この例では、 &lt;code&gt;getPaidContent&lt;/code&gt; ハンドラーはスキップされますが、 &lt;code&gt;/a_route_behind_paywall&lt;/code&gt; の &lt;code&gt;app&lt;/code&gt; 残りのハンドラーは引き続き実行されます。</target>
        </trans-unit>
        <trans-unit id="c9ffa45262c8a16d601014a91db15783b5bf118e" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;router.param(name, callback)&lt;/code&gt; signature is modified to &lt;code&gt;router.param(name, accessId)&lt;/code&gt;. Instead of accepting a name and a callback, &lt;code&gt;router.param()&lt;/code&gt; will now accept a name and a number.</source>
          <target state="translated">この例では、 &lt;code&gt;router.param(name, callback)&lt;/code&gt; シグネチャが &lt;code&gt;router.param(name, accessId)&lt;/code&gt; 変更されています。名前とコールバックを受け入れる代わりに、 &lt;code&gt;router.param()&lt;/code&gt; は名前と番号を受け入れるようになりました。</target>
        </trans-unit>
        <trans-unit id="74566bb259f5070a55f09e134a198ee8ae3b5df6" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;router.param(name, callback)&lt;/code&gt; signature remains the same, but instead of a middleware callback, a custom data type checking function has been defined to validate the data type of the user id.</source>
          <target state="translated">この例では、 &lt;code&gt;router.param(name, callback)&lt;/code&gt; シグネチャは同じままですが、ミドルウェアコールバックの代わりに、カスタムデータ型チェック関数が定義されて、ユーザーIDのデータ型を検証しています。</target>
        </trans-unit>
        <trans-unit id="bd9c1d20d6ac273e97036aa72676a475e6acde47" translate="yes" xml:space="preserve">
          <source>In this example, the generic &lt;code&gt;logErrors&lt;/code&gt; might write request and error information to &lt;code&gt;stderr&lt;/code&gt;, for example:</source>
          <target state="translated">この例では、一般的な &lt;code&gt;logErrors&lt;/code&gt; は、リクエストとエラー情報を &lt;code&gt;stderr&lt;/code&gt; に書き込みます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="bcad245b51efe7984b5dade0bf5a7cbeb031952a" translate="yes" xml:space="preserve">
          <source>In version 4 you can use a variable parameter to define the path where middleware functions are loaded, then read the value of the parameter from the route handler. For example:</source>
          <target state="translated">バージョン4では、変数パラメータを使用してミドルウェア関数がロードされるパスを定義し、ルートハンドラからパラメータの値を読み込むことができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="66c16818de5666f307a77bcb440a8eecc1fcd43c" translate="yes" xml:space="preserve">
          <source>In your app, require the module: &lt;code&gt;require('module-name')&lt;/code&gt;</source>
          <target state="translated">アプリで、モジュールを必要とします： &lt;code&gt;require('module-name')&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="395d7062ab7843a7ee4f5991daf254aa3b93669c" translate="yes" xml:space="preserve">
          <source>Indicates if the cookie should be signed.</source>
          <target state="translated">クッキーが署名されるべきかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="211f40ef28c7f5b14c935100c27a2653ce0960b6" translate="yes" xml:space="preserve">
          <source>Indicates the app is behind a front-facing proxy, and to use the &lt;code&gt;X-Forwarded-*&lt;/code&gt; headers to determine the connection and the IP address of the client. NOTE: &lt;code&gt;X-Forwarded-*&lt;/code&gt; headers are easily spoofed and the detected IP addresses are unreliable.</source>
          <target state="translated">アプリが前面プロキシの背後にあり、 &lt;code&gt;X-Forwarded-*&lt;/code&gt; ヘッダーを使用してクライアントの接続とIPアドレスを判別することを示します。注： &lt;code&gt;X-Forwarded-*&lt;/code&gt; ヘッダーは簡単に偽装され、検出されたIPアドレスは信頼できません。</target>
        </trans-unit>
        <trans-unit id="703ffaf35e63b4913294162ae17f11e35f8cb893" translate="yes" xml:space="preserve">
          <source>Indicates whether the request is &amp;ldquo;fresh.&amp;rdquo; It is the opposite of &lt;code&gt;req.stale&lt;/code&gt;.</source>
          <target state="translated">リクエストが「新しい」かどうかを示します。 &lt;code&gt;req.stale&lt;/code&gt; の逆です。</target>
        </trans-unit>
        <trans-unit id="d9e512e54d616ab1c0807de548067baef9d6c05a" translate="yes" xml:space="preserve">
          <source>Indicates whether the request is &amp;ldquo;stale,&amp;rdquo; and is the opposite of &lt;code&gt;req.fresh&lt;/code&gt;. For more information, see &lt;a href=&quot;#req.fresh&quot;&gt;req.fresh&lt;/a&gt;.</source>
          <target state="translated">リクエストが「古い」かどうかを示し、 &lt;code&gt;req.fresh&lt;/code&gt; の反対です。詳細については、&lt;a href=&quot;#req.fresh&quot;&gt;req.freshを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="949b26dc9b76f03892a6d9c907fbfc374dc0381f" translate="yes" xml:space="preserve">
          <source>Inherit the value of settings with no default value.</source>
          <target state="translated">デフォルト値のない設定値を継承します。</target>
        </trans-unit>
        <trans-unit id="9f132f2d22a50934e4cd875664ea413e93e819ae" translate="yes" xml:space="preserve">
          <source>Inherit the value of settings with no default value; these are explicitly noted in the table below.</source>
          <target state="translated">デフォルト値のない設定の値を継承します。</target>
        </trans-unit>
        <trans-unit id="930b16535db4940aa3ef5f6374ce447ceadd0a3c" translate="yes" xml:space="preserve">
          <source>Initially &lt;code&gt;del&lt;/code&gt; was used instead of &lt;code&gt;delete&lt;/code&gt;, because &lt;code&gt;delete&lt;/code&gt; is a reserved keyword in JavaScript. However, as of ECMAScript 6, &lt;code&gt;delete&lt;/code&gt; and other reserved keywords can legally be used as property names.</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; はJavaScriptの予約キーワードであるため、最初は &lt;code&gt;delete&lt;/code&gt; の代わりに &lt;code&gt;del&lt;/code&gt; が使用されていました。ただし、ECMAScript 6以降では、 &lt;code&gt;delete&lt;/code&gt; などの予約キーワードをプロパティ名として合法的に使用できます。</target>
        </trans-unit>
        <trans-unit id="4ffc08f6f5bdf8bfad718c7b4b614a3709b04e2b" translate="yes" xml:space="preserve">
          <source>Install Helmet like any other module:</source>
          <target state="translated">他のモジュールと同じようにHelmetをインストールします。</target>
        </trans-unit>
        <trans-unit id="d79a75e251a2567eec31dc307e2d76419c66d43a" translate="yes" xml:space="preserve">
          <source>Install terminus as follows:</source>
          <target state="translated">以下のようにターミナスを設置します。</target>
        </trans-unit>
        <trans-unit id="f1390449425f8b24c7212143527fbad52edd087f" translate="yes" xml:space="preserve">
          <source>Install the Node.js module for the required functionality, then load it in your app at the application level or at the router level.</source>
          <target state="translated">必要な機能のためにNode.jsモジュールをインストールし、アプリケーションレベルまたはルーターレベルでアプリにロードします。</target>
        </trans-unit>
        <trans-unit id="e71dd971fc6f2470094737a5dca246995ccd74e0" translate="yes" xml:space="preserve">
          <source>Install the module: &lt;code&gt;npm install --save &amp;lt;module-name&amp;gt;&lt;/code&gt;</source>
          <target state="translated">モジュールをインストールします： &lt;code&gt;npm install --save &amp;lt;module-name&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="e38432618ce4d39079fc324e614d4d92a2815160" translate="yes" xml:space="preserve">
          <source>Installing</source>
          <target state="translated">Installing</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="31b353412d852ddf7a216dfe4d883a74e0af12b8" translate="yes" xml:space="preserve">
          <source>It also has settings (properties) that affect how the application behaves; for more information, see &lt;a href=&quot;#app.settings.table&quot;&gt;Application settings&lt;/a&gt;.</source>
          <target state="translated">また、アプリケーションの動作に影響を与える設定（プロパティ）もあります。詳細については、&lt;a href=&quot;#app.settings.table&quot;&gt;アプリケーション設定を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="85d63c29a8fff42f624e6456a349e0a5032185b9" translate="yes" xml:space="preserve">
          <source>It is a good idea to log output from the Forever tool and the script by using the logging options &lt;code&gt;-l&lt;/code&gt;, &lt;code&gt;-o&lt;/code&gt;, and &lt;code&gt;-e&lt;/code&gt;, as shown this example:</source>
          <target state="translated">次の例に示すように、ログオプション &lt;code&gt;-l&lt;/code&gt; 、 &lt;code&gt;-o&lt;/code&gt; 、および &lt;code&gt;-e&lt;/code&gt; を使用して、Foreverツールおよびスクリプトからの出力をログに記録することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="7d99bfa8cd563b7ad4382f0598eaa633251afff3" translate="yes" xml:space="preserve">
          <source>It is similar to the &lt;a href=&quot;#req.baseUrl&quot;&gt;baseUrl&lt;/a&gt; property of the &lt;code&gt;req&lt;/code&gt; object, except &lt;code&gt;req.baseUrl&lt;/code&gt; returns the matched URL path, instead of the matched patterns.</source>
          <target state="translated">&lt;code&gt;req.baseUrl&lt;/code&gt; が一致したパターンの代わりに一致したURLパスを返すことを除いて、 &lt;code&gt;req&lt;/code&gt; オブジェクトの&lt;a href=&quot;#req.baseUrl&quot;&gt;baseUrl&lt;/a&gt;プロパティに似ています。</target>
        </trans-unit>
        <trans-unit id="9daf0d00dd679e88b3e1fb7d925c5313d5eca90a" translate="yes" xml:space="preserve">
          <source>It is true if the &lt;code&gt;cache-control&lt;/code&gt; request header doesn&amp;rsquo;t have a &lt;code&gt;no-cache&lt;/code&gt; directive and any of the following are true:</source>
          <target state="translated">場合、それは本当である &lt;code&gt;cache-control&lt;/code&gt; 要求ヘッダーがありません &lt;code&gt;no-cache&lt;/code&gt; ディレクティブを、次のいずれかに該当します：</target>
        </trans-unit>
        <trans-unit id="4b7e61af8cd1a601f5c3c06becc07e5484d2daec" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s important to ensure that Express catches all errors that occur while running route handlers and middleware.</source>
          <target state="translated">ルートハンドラーとミドルウェアの実行中に発生するすべてのエラーをExpressが確実にキャッチすることが重要です。</target>
        </trans-unit>
        <trans-unit id="46379f1a97c84a9a0876ecbfec4fef449fd9deff" translate="yes" xml:space="preserve">
          <source>Joins the &lt;code&gt;links&lt;/code&gt; provided as properties of the parameter to populate the response&amp;rsquo;s &lt;code&gt;Link&lt;/code&gt; HTTP header field.</source>
          <target state="translated">パラメータのプロパティとして提供された &lt;code&gt;links&lt;/code&gt; 結合して、応答の &lt;code&gt;Link&lt;/code&gt; HTTPヘッダーフィールドに入力します。</target>
        </trans-unit>
        <trans-unit id="64b183e265c4ac7068d86bf6a5a9f60590f15264" translate="yes" xml:space="preserve">
          <source>Keep an eye out for &lt;a href=&quot;https://nodesecurity.io/advisories&quot;&gt;Node Security Project&lt;/a&gt; or &lt;a href=&quot;https://snyk.io/vuln/&quot;&gt;Snyk&lt;/a&gt; advisories that may affect Express or other modules that your app uses. In general, these databases are excellent resources for knowledge and tools about Node security.</source>
          <target state="translated">目を光らせておいてください&lt;a href=&quot;https://nodesecurity.io/advisories&quot;&gt;ノードセキュリティプロジェクト&lt;/a&gt;または&lt;a href=&quot;https://snyk.io/vuln/&quot;&gt;Snyk&lt;/a&gt; Expressまたはアプリの使用している他のモジュールに影響を与える可能性が勧告。一般に、これらのデータベースはノードのセキュリティに関する知識とツールのための優れたリソースです。</target>
        </trans-unit>
        <trans-unit id="26906a858be062571856dd4980661de91f201f05" translate="yes" xml:space="preserve">
          <source>Keep processes and clusters alive forever.</source>
          <target state="translated">プロセスとクラスタを永遠に存続させます。</target>
        </trans-unit>
        <trans-unit id="a4129d993e8dffcb1e45f1dc72dbb846a789fbfe" translate="yes" xml:space="preserve">
          <source>Known and unknown security issues in 3.x have not been addressed since the last update (1 August, 2015). Using the 3.x line should not be considered secure.</source>
          <target state="translated">3.x の既知および未知のセキュリティ問題は、前回のアップデート (2015年8月1日)以降、対処されていません。3.xの回線を使用することは、安全であると考えてはいけません。</target>
        </trans-unit>
        <trans-unit id="199c619a5252be68272c05410a55eedcceab62cd" translate="yes" xml:space="preserve">
          <source>Later you may access this value through the &lt;a href=&quot;#req.signedCookies&quot;&gt;req.signedCookie&lt;/a&gt; object.</source>
          <target state="translated">後で、&lt;a href=&quot;#req.signedCookies&quot;&gt;req.signedCookie&lt;/a&gt;オブジェクトを介してこの値にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="9fe3e9c95f034b072a2a6a5c5ae760db38634aa5" translate="yes" xml:space="preserve">
          <source>Leading colon (:) in the name for app.param(name, fn)</source>
          <target state="translated">app.param(name,fn)の名前の先頭コロン(:)</target>
        </trans-unit>
        <trans-unit id="20d95d41d3198ed43f52c40e717843c04015f08b" translate="yes" xml:space="preserve">
          <source>Leading colon in name argument to app.param(name, fn)</source>
          <target state="translated">app.param(name,fn)へのname引数の先頭コロン</target>
        </trans-unit>
        <trans-unit id="651f9d8d6de1ab9afe3d64aa83b7b4296f811c6d" translate="yes" xml:space="preserve">
          <source>Let client errors fall-through as unhandled requests, otherwise forward a client error.</source>
          <target state="translated">クライアントのエラーを未処理のリクエストとしてフォールスルーさせ、そうでなければクライアントのエラーを転送します。</target>
        </trans-unit>
        <trans-unit id="b7bd213f5681cd69a37c2a64347b2791cac4c11d" translate="yes" xml:space="preserve">
          <source>LevelDB</source>
          <target state="translated">LevelDB</target>
        </trans-unit>
        <trans-unit id="2cdc41a93f5cb0fa43d3beaa1b0481aeffc808a2" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution-ShareAlike License v3.0.</source>
          <target state="translated">クリエイティブ・コモンズ 表示-継承ライセンス v3.0 の下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="db60f946c788f900abe16f7ff334645911fe2e35" translate="yes" xml:space="preserve">
          <source>List all running processes:</source>
          <target state="translated">実行中のプロセスをすべてリストアップします。</target>
        </trans-unit>
        <trans-unit id="a4651ac625be3e54ddc1113b9a13879f0a4799d7" translate="yes" xml:space="preserve">
          <source>List all the apps (services) under management:</source>
          <target state="translated">管理しているアプリ(サービス)をすべてリストアップします。</target>
        </trans-unit>
        <trans-unit id="c5d804870a4d5cd59c89d9151435d4c4a22dc053" translate="yes" xml:space="preserve">
          <source>Load &lt;a href=&quot;http://localhost:3000&quot;&gt;http://localhost:3000&lt;/a&gt; and see the home page being rendered by Express 4.</source>
          <target state="translated">&lt;a href=&quot;http://localhost:3000&quot;&gt;http：// localhost：3000&lt;/a&gt;をロードし、Express 4によってレンダリングされているホームページを確認します。</target>
        </trans-unit>
        <trans-unit id="8ecbe06616adfbc88a908b2817302de44250ecf9" translate="yes" xml:space="preserve">
          <source>Load router-level middleware by using the &lt;code&gt;router.use()&lt;/code&gt; and &lt;code&gt;router.METHOD()&lt;/code&gt; functions.</source>
          <target state="translated">&lt;code&gt;router.use()&lt;/code&gt; および &lt;code&gt;router.METHOD()&lt;/code&gt; 関数を使用して、ルーターレベルのミドルウェアをロードします。</target>
        </trans-unit>
        <trans-unit id="33453bedcc4ce8753f1b797280d4235b68c3fe64" translate="yes" xml:space="preserve">
          <source>Lookup is performed in the following order:</source>
          <target state="translated">検索は以下の順番で行われます。</target>
        </trans-unit>
        <trans-unit id="eb67b8d64c494e14c3cb9c3388441d609b831965" translate="yes" xml:space="preserve">
          <source>MVC style controllers</source>
          <target state="translated">MVC スタイルコントローラ</target>
        </trans-unit>
        <trans-unit id="0a2ef2b03dbaa594fb2ffdecb2bd6069073a2780" translate="yes" xml:space="preserve">
          <source>Make changes to the request and the response objects.</source>
          <target state="translated">リクエストオブジェクトとレスポンスオブジェクトに変更を加えます。</target>
        </trans-unit>
        <trans-unit id="90d5fc913fb104ac305d946aff06c25ffdbd51bb" translate="yes" xml:space="preserve">
          <source>Make sure that the middleware functions are loaded in the correct order - load &lt;code&gt;errorHandler&lt;/code&gt; after loading the app routes.</source>
          <target state="translated">ミドルウェア関数が正しい順序でロードされていることを確認します- アプリのルートをロードした後で &lt;code&gt;errorHandler&lt;/code&gt; をロードします。</target>
        </trans-unit>
        <trans-unit id="7adcd0c3d92807134c504e3a8b2475e210f165ff" translate="yes" xml:space="preserve">
          <source>Make the following changes to &lt;code&gt;app.js&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;app.js&lt;/code&gt; に次の変更を加えます。</target>
        </trans-unit>
        <trans-unit id="02b393bac0cbea60a2720acf1e500c1464e94ddc" translate="yes" xml:space="preserve">
          <source>Manage your clusters remotely.</source>
          <target state="translated">クラスタをリモートで管理します。</target>
        </trans-unit>
        <trans-unit id="39c49957be44af6a3ec5e14f2fc41545ff844518" translate="yes" xml:space="preserve">
          <source>Marks the cookie to be used with HTTPS only.</source>
          <target state="translated">HTTPS のみで使用するクッキーをマークします。</target>
        </trans-unit>
        <trans-unit id="88306943fea7e76f9cd57cae0ea6d8b32d2e8434" translate="yes" xml:space="preserve">
          <source>Method</source>
          <target state="translated">Method</target>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="4760ae67e6f3d26388471383c7378c4ba80f0baa" translate="yes" xml:space="preserve">
          <source>Middleware callback function examples</source>
          <target state="translated">ミドルウェアのコールバック関数の例</target>
        </trans-unit>
        <trans-unit id="4e39e010957f9ac03c460538c049bf5ff52a15e0" translate="yes" xml:space="preserve">
          <source>Middleware function myLogger</source>
          <target state="translated">ミドルウェア関数 myLogger</target>
        </trans-unit>
        <trans-unit id="d5192851e9be33f2620c994dcbab2c592551a143" translate="yes" xml:space="preserve">
          <source>Middleware function requestTime</source>
          <target state="translated">ミドルウェア関数 requestTime</target>
        </trans-unit>
        <trans-unit id="886002e3f779b0e4ff504a9c98f9ce3266ee151f" translate="yes" xml:space="preserve">
          <source>Middleware functions are executed sequentially, therefore the order of middleware inclusion is important.</source>
          <target state="translated">ミドルウェアの機能は順次実行されるため、ミドルウェアの包含順序が重要になります。</target>
        </trans-unit>
        <trans-unit id="327036496cbb48424162501a3ef70e28c1954d4d" translate="yes" xml:space="preserve">
          <source>Middleware functions can perform the following tasks:</source>
          <target state="translated">ミドルウェア機能は、以下のタスクを実行することができます。</target>
        </trans-unit>
        <trans-unit id="b70461c21d2c5132b2b2becb7e676b6df9437999" translate="yes" xml:space="preserve">
          <source>Middleware is like a plumbing pipe: requests start at the first middleware function defined and work their way &amp;ldquo;down&amp;rdquo; the middleware stack processing for each path they match.</source>
          <target state="translated">ミドルウェアは、配管パイプのようなものです。リクエストは、定義された最初のミドルウェア機能から始まり、一致する各パスのミドルウェアスタック処理を「ダウン」します。</target>
        </trans-unit>
        <trans-unit id="feb77a8ca8f6a6b24c0cfb335bc2a8ea63f008fa" translate="yes" xml:space="preserve">
          <source>Migrating from 3.x to 4.x.</source>
          <target state="translated">3.xから4.xへの移行。</target>
        </trans-unit>
        <trans-unit id="c0dcb865ad81a32e522b11fd1e33bae685e88709" translate="yes" xml:space="preserve">
          <source>Mixed</source>
          <target state="translated">Mixed</target>
        </trans-unit>
        <trans-unit id="fe2821d778e2849c2a35b47fa53f494ca2d14fa6" translate="yes" xml:space="preserve">
          <source>Modify settings dynamically to improve performance.</source>
          <target state="translated">設定を動的に変更してパフォーマンスを向上させます。</target>
        </trans-unit>
        <trans-unit id="f0c6acff24bc7941d7797f41a861782190b4b85f" translate="yes" xml:space="preserve">
          <source>MongoDB</source>
          <target state="translated">MongoDB</target>
        </trans-unit>
        <trans-unit id="47db1c37dff531d01f2702355c877c2b443d1b1e" translate="yes" xml:space="preserve">
          <source>More about HTTP Status Codes</source>
          <target state="translated">HTTPステータスコードの詳細</target>
        </trans-unit>
        <trans-unit id="fe6b75d221ea224bfb330bd02bedd9024c76025b" translate="yes" xml:space="preserve">
          <source>More than one callback function can handle a route (make sure you specify the &lt;code&gt;next&lt;/code&gt; object). For example:</source>
          <target state="translated">複数のコールバック関数がルートを処理できます（必ず &lt;code&gt;next&lt;/code&gt; オブジェクトを指定してください）。例えば：</target>
        </trans-unit>
        <trans-unit id="727213957ff3274cceabb7e2ca22919105e2af96" translate="yes" xml:space="preserve">
          <source>Mount the middleware at &amp;ldquo;/static&amp;rdquo; to serve static content only when their request path is prefixed with &amp;ldquo;/static&amp;rdquo;:</source>
          <target state="translated">ミドルウェアを「/ static」にマウントして、リクエストパスの先頭に「/ static」が付いている場合にのみ静的コンテンツを提供します。</target>
        </trans-unit>
        <trans-unit id="3dd5dc7f551987273023bd069ccef8270b5514ba" translate="yes" xml:space="preserve">
          <source>Mounts the specified &lt;a href=&quot;http://expressjs.com/guide/using-middleware.html&quot;&gt;middleware&lt;/a&gt; function or functions at the specified path: the middleware function is executed when the base of the requested path matches &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;http://expressjs.com/guide/using-middleware.html&quot;&gt;ミドルウェア&lt;/a&gt;関数を指定されたパスにマウントします。ミドルウェア関数は、要求されたパスのベースがpathと一致したときに実行され &lt;code&gt;path&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1d6539d6900f82ce1dc307ff2b5a3a5b79eba74d" translate="yes" xml:space="preserve">
          <source>Moving to Express 4</source>
          <target state="translated">エクスプレス4への移行</target>
        </trans-unit>
        <trans-unit id="8c437e7dc23532334c7556b8c3c40775a03f3c61" translate="yes" xml:space="preserve">
          <source>Moving to Express 5</source>
          <target state="translated">エクスプレス5への移行</target>
        </trans-unit>
        <trans-unit id="deaa0c393a6613972aaccbf1fecfdad67aa21e88" translate="yes" xml:space="preserve">
          <source>MySQL</source>
          <target state="translated">MySQL</target>
        </trans-unit>
        <trans-unit id="71239dc7fa63320bc54fc3ac9302541e8f718aef" translate="yes" xml:space="preserve">
          <source>N/A (undefined)</source>
          <target state="translated">該当なし(未定義</target>
        </trans-unit>
        <trans-unit id="5010409ff1dbe4cbe7d17afd567c15ce82d5ad2a" translate="yes" xml:space="preserve">
          <source>NOTE: &lt;a href=&quot;https://github.com/oracle/node-oracledb#-installation&quot;&gt;See installation prerequisites&lt;/a&gt;.</source>
          <target state="translated">注：&lt;a href=&quot;https://github.com/oracle/node-oracledb#-installation&quot;&gt;インストールの前提条件を参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0c7636ffe974139f353c811f06c3a3f2716844ba" translate="yes" xml:space="preserve">
          <source>NOTE: &lt;code&gt;express.static&lt;/code&gt; always sends weak ETags.</source>
          <target state="translated">注： &lt;code&gt;express.static&lt;/code&gt; は常に弱いETagを送信します。</target>
        </trans-unit>
        <trans-unit id="b184a4e72b55f520f244b3c34bbb0da11b3b0da3" translate="yes" xml:space="preserve">
          <source>NOTE: All the forms of Node&amp;rsquo;s &lt;a href=&quot;https://nodejs.org/api/http.html#http_server_listen&quot;&gt;http.Server.listen()&lt;/a&gt; method are in fact actually supported.</source>
          <target state="translated">注：実際には、Nodeの&lt;a href=&quot;https://nodejs.org/api/http.html#http_server_listen&quot;&gt;http.Server.listen（）&lt;/a&gt;メソッドのすべての形式がサポートされています。</target>
        </trans-unit>
        <trans-unit id="433e3b4f2ddb47dc43074f146fc5a2ed0e6e8a2e" translate="yes" xml:space="preserve">
          <source>NOTE: Express automatically decodes the values in &lt;code&gt;req.params&lt;/code&gt; (using &lt;code&gt;decodeURIComponent&lt;/code&gt;).</source>
          <target state="translated">注：Expressは自動的に値をデコード &lt;code&gt;req.params&lt;/code&gt; （使用 &lt;code&gt;decodeURIComponent&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="ffac96f05f9fb88c581942c23c1ae588749ece07" translate="yes" xml:space="preserve">
          <source>NOTE: For best results, &lt;a href=&quot;../advanced/best-practice-performance#use-a-reverse-proxy&quot;&gt;use a reverse proxy&lt;/a&gt; cache to improve performance of serving static assets.</source>
          <target state="translated">注：最良の結果を得るに&lt;a href=&quot;../advanced/best-practice-performance#use-a-reverse-proxy&quot;&gt;は、リバースプロキシ&lt;/a&gt;キャッシュを使用して、静的アセットを提供するパフォーマンスを向上させます。</target>
        </trans-unit>
        <trans-unit id="01ddfe22c54681667d4c7d4858355434cfde4224" translate="yes" xml:space="preserve">
          <source>NOTE: For best results, &lt;a href=&quot;advanced/best-practice-performance#use-a-reverse-proxy&quot;&gt;use a reverse proxy&lt;/a&gt; cache to improve performance of serving static assets.</source>
          <target state="translated">注：最良の結果を得るに&lt;a href=&quot;advanced/best-practice-performance#use-a-reverse-proxy&quot;&gt;は、リバースプロキシ&lt;/a&gt;キャッシュを使用して、静的アセットを提供するパフォーマンスを向上させます。</target>
        </trans-unit>
        <trans-unit id="c9cfcd7dab21d6d3ce7f79353e2abe260c5d6daa" translate="yes" xml:space="preserve">
          <source>NOTE: On systems that don&amp;rsquo;t support Upstart 1.4, the commands are slightly different. See &lt;a href=&quot;https://docs.strongloop.com/display/SLC/Setting+up+a+production+host#Settingupaproductionhost-RHELLinux5and6,Ubuntu10.04-.10,11.04-.10&quot;&gt;Setting up a production host (StrongLoop documentation)&lt;/a&gt; for more information.</source>
          <target state="translated">注：Upstart 1.4をサポートしないシステムでは、コマンドは少し異なります。詳細については&lt;a href=&quot;https://docs.strongloop.com/display/SLC/Setting+up+a+production+host#Settingupaproductionhost-RHELLinux5and6,Ubuntu10.04-.10,11.04-.10&quot;&gt;、本番ホストのセットアップ（StrongLoopのドキュメント）&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="45a9d38a34b92c068d0f922c978c01d380103af6" translate="yes" xml:space="preserve">
          <source>NOTE: This script requires Upstart 1.4 or newer, supported on Ubuntu 12.04-14.10.</source>
          <target state="translated">注:このスクリプトは、Ubuntu 12.04-14.10でサポートされているUpstart 1.4以降が必要です。</target>
        </trans-unit>
        <trans-unit id="e0990c59b7b6ef4dc7e1d6b135a418a2f074471b" translate="yes" xml:space="preserve">
          <source>NOTE: When you use &lt;code&gt;router.route()&lt;/code&gt;, middleware ordering is based on when the &lt;em&gt;route&lt;/em&gt; is created, not when method handlers are added to the route. For this purpose, you can consider method handlers to belong to the route to which they were added.</source>
          <target state="translated">注： &lt;code&gt;router.route()&lt;/code&gt; を使用する場合、ミドルウェアの順序は、メソッドハンドラーがルートに追加されたときではなく、&lt;em&gt;ルート&lt;/em&gt;が作成されたときに基づいています。この目的のために、メソッドハンドラーが追加されたルートに属すると考えることができます。</target>
        </trans-unit>
        <trans-unit id="612a09210b2772847d45e0993f553be521760e68" translate="yes" xml:space="preserve">
          <source>Neither the &lt;code&gt;bin&lt;/code&gt; directory nor the extensionless &lt;code&gt;www&lt;/code&gt; file is mandatory for creating an Express app or starting the app. They are just suggestions made by the generator, so feel free to modify them to suit your needs.</source>
          <target state="translated">Expressアプリの作成やアプリの起動には、 &lt;code&gt;bin&lt;/code&gt; ディレクトリも拡張子のない &lt;code&gt;www&lt;/code&gt; ファイルも必須ではありません。これらはジェネレーターによる提案にすぎないため、ニーズに合わせて自由に変更してください。</target>
        </trans-unit>
        <trans-unit id="40376d294105c45cc4be1971b67aad52424bac59" translate="yes" xml:space="preserve">
          <source>Neo4j</source>
          <target state="translated">Neo4j</target>
        </trans-unit>
        <trans-unit id="bb91a301ed292141003d1d5a1e5543d14d45f5d4" translate="yes" xml:space="preserve">
          <source>New features in 4.x.</source>
          <target state="translated">4.xの新機能</target>
        </trans-unit>
        <trans-unit id="6710871ed2399485ffa7720b360988d74d447270" translate="yes" xml:space="preserve">
          <source>Next, change &lt;code&gt;&quot;start&quot;: &quot;node ./bin/www&quot;&lt;/code&gt; in the &lt;code&gt;package.json&lt;/code&gt; file to &lt;code&gt;&quot;start&quot;: &quot;node app.js&quot;&lt;/code&gt;.</source>
          <target state="translated">次に、変更は &lt;code&gt;&quot;start&quot;: &quot;node ./bin/www&quot;&lt;/code&gt; で &lt;code&gt;package.json&lt;/code&gt; のファイルに &lt;code&gt;&quot;start&quot;: &quot;node app.js&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9525fa3e57e407965d47d1a562768efcd2349d03" translate="yes" xml:space="preserve">
          <source>Next, we&amp;rsquo;ll create a middleware function called &amp;ldquo;requestTime&amp;rdquo; and add it as a property called &lt;code&gt;requestTime&lt;/code&gt; to the request object.</source>
          <target state="translated">次に、「requestTime」というミドルウェア関数を作成し、それを &lt;code&gt;requestTime&lt;/code&gt; というプロパティとしてリクエストオブジェクトに追加します。</target>
        </trans-unit>
        <trans-unit id="0562f580f124a61f177ad1f7356e26265e5f6944" translate="yes" xml:space="preserve">
          <source>No longer resolves relative URLs.</source>
          <target state="translated">相対 URL を解決しなくなりました。</target>
        </trans-unit>
        <trans-unit id="da851b820a844f905420515fc0764c867dc88f51" translate="yes" xml:space="preserve">
          <source>No matter how optimized an app is, a single instance can handle only a limited amount of load and traffic. One way to scale an app is to run multiple instances of it and distribute the traffic via a load balancer. Setting up a load balancer can improve your app&amp;rsquo;s performance and speed, and enable it to scale more than is possible with a single instance.</source>
          <target state="translated">アプリがどのように最適化されていても、単一のインスタンスは限られた量の負荷とトラフィックしか処理できません。アプリをスケーリングする1つの方法は、アプリの複数のインスタンスを実行し、ロードバランサーを介してトラフィックを分散することです。ロードバランサーを設定すると、アプリのパフォーマンスと速度が向上し、単一のインスタンスで可能な場合を超えてスケ​​ーリングできるようになります。</target>
        </trans-unit>
        <trans-unit id="4a4c692813903d7fb04fffc1c18820b385f393fa" translate="yes" xml:space="preserve">
          <source>Node applications crash if they encounter an uncaught exception. The foremost thing you need to do is to ensure your app is well-tested and handles all exceptions (see &lt;a href=&quot;#handle-exceptions-properly&quot;&gt;handle exceptions properly&lt;/a&gt; for details). But as a fail-safe, put a mechanism in place to ensure that if and when your app crashes, it will automatically restart.</source>
          <target state="translated">キャッチされない例外が発生すると、ノードアプリケーションがクラッシュします。最も重要なことは、アプリが十分にテストされ、すべての例外を処理するようにすることです（詳細については、&lt;a href=&quot;#handle-exceptions-properly&quot;&gt;例外の適切な処理&lt;/a&gt;を参照してください）。ただし、フェイルセーフとして、アプリがクラッシュした場合にアプリが自動的に再起動するようにするメカニズムを導入してください。</target>
        </trans-unit>
        <trans-unit id="a5941f7d8c7d9c43b943aeba94475609e690935f" translate="yes" xml:space="preserve">
          <source>Node apps crash when they encounter an uncaught exception. Not handling exceptions and taking appropriate actions will make your Express app crash and go offline. If you follow the advice in &lt;a href=&quot;#ensure-your-app-automatically-restarts&quot;&gt;Ensure your app automatically restarts&lt;/a&gt; below, then your app will recover from a crash. Fortunately, Express apps typically have a short startup time. Nevertheless, you want to avoid crashing in the first place, and to do that, you need to handle exceptions properly.</source>
          <target state="translated">ノードアプリは、キャッチされない例外が発生するとクラッシュします。例外を処理せずに適切なアクションを実行しないと、Expressアプリがクラッシュしてオフラインになります。以下の&lt;a href=&quot;#ensure-your-app-automatically-restarts&quot;&gt;「アプリが自動的に再起動&lt;/a&gt;することを確認する」のアドバイスに従うと、アプリはクラッシュから回復します。幸い、Expressアプリの起動時間は通常短いです。それでも、そもそもクラッシュを回避したいと考えています。そのためには、例外を適切に処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="10b3493287f831e81a438811a1ffba01f8cec4b7" translate="yes" xml:space="preserve">
          <source>Node.js</source>
          <target state="translated">Node.js</target>
        </trans-unit>
        <trans-unit id="3ddce1f09b12c9b74fa5f507618d99fa0a205280" translate="yes" xml:space="preserve">
          <source>Node.js 0.10 can leak &lt;code&gt;fd&lt;/code&gt;s in certain situations that affect &lt;code&gt;express.static&lt;/code&gt; and &lt;code&gt;res.sendfile&lt;/code&gt;. Malicious requests could cause &lt;code&gt;fd&lt;/code&gt;s to leak and eventually lead to &lt;code&gt;EMFILE&lt;/code&gt; errors and server unresponsiveness.</source>
          <target state="translated">Node.js 0.10は、 &lt;code&gt;express.static&lt;/code&gt; および &lt;code&gt;res.sendfile&lt;/code&gt; に影響する特定の状況で &lt;code&gt;fd&lt;/code&gt; をリークする可能性があります。悪意のある要求により、 &lt;code&gt;fd&lt;/code&gt; がリークし、最終的に &lt;code&gt;EMFILE&lt;/code&gt; エラーとサーバーの無応答が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="9741f2a3bd55c90d910a8ecc5c0414ce610d4764" translate="yes" xml:space="preserve">
          <source>Node.js vulnerabilities directly affect Express. Therefore &lt;a href=&quot;http://blog.nodejs.org/vulnerability/&quot;&gt;keep a watch on Node.js vulnerabilities&lt;/a&gt; and make sure you are using the latest stable version of Node.js.</source>
          <target state="translated">Node.jsの脆弱性はExpressに直接影響します。したがって&lt;a href=&quot;http://blog.nodejs.org/vulnerability/&quot;&gt;、Node.jsの脆弱性&lt;/a&gt;を監視し、最新の安定したバージョンのNode.jsを使用していることを確認してください。</target>
        </trans-unit>
        <trans-unit id="6eef6648406c333a4035cd5e60d0bf2ecf2606d7" translate="yes" xml:space="preserve">
          <source>None</source>
          <target state="translated">None</target>
        </trans-unit>
        <trans-unit id="69c7a0869924ab847d45496a2c4c369e67fc828b" translate="yes" xml:space="preserve">
          <source>Not inherit the value of settings that have a default value. You must set the value in the sub-app.</source>
          <target state="translated">初期値が設定されている設定の値を継承しない。サブアプリで設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="92dd104c13ec8b17b8cc83276153017e9866e189" translate="yes" xml:space="preserve">
          <source>Note that if more than one app with the same name is running, &lt;code&gt;pm2&lt;/code&gt; commands affect all of them. So use IDs instead of names to manage individual apps.</source>
          <target state="translated">同じ名前のアプリが複数実行されている場合、 &lt;code&gt;pm2&lt;/code&gt; コマンドはそれらすべてに影響することに注意してください。したがって、個々のアプリを管理するには、名前ではなくIDを使用してください。</target>
        </trans-unit>
        <trans-unit id="e95a96ffefc105691ef7c3e1d1ba12457886d14b" translate="yes" xml:space="preserve">
          <source>Note that sub-apps will:</source>
          <target state="translated">サブアプリがそうなることに注意してください。</target>
        </trans-unit>
        <trans-unit id="1dd9ac5b73067a6e6eb2985047c770241ffa317a" translate="yes" xml:space="preserve">
          <source>Note that the default error handler can get triggered if you call &lt;code&gt;next()&lt;/code&gt; with an error in your code more than once, even if custom error handling middleware is in place.</source>
          <target state="translated">カスタムエラー処理ミドルウェアが配置されている場合でも、コード内のエラーで &lt;code&gt;next()&lt;/code&gt; を複数回呼び出すと、デフォルトのエラーハンドラーがトリガーされる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="edd4bd395ffe452d04f35bc47b8eb7ca06225c08" translate="yes" xml:space="preserve">
          <source>Note: The view engine cache does not cache the contents of the template&amp;rsquo;s output, only the underlying template itself. The view is still re-rendered with every request even when the cache is on.</source>
          <target state="translated">注：ビューエンジンキャッシュでは、テンプレートの出力のコンテンツはキャッシュされません。基になるテンプレート自体のみがキャッシュされます。ビューは、キャッシュがオンの場合でも、すべての要求で再レンダリングされます。</target>
        </trans-unit>
        <trans-unit id="62b3d65b056b5fb7bd9a77db248e1eb431fd3e7e" translate="yes" xml:space="preserve">
          <source>Note: calling &lt;code&gt;res.set()&lt;/code&gt; after &lt;code&gt;res.append()&lt;/code&gt; will reset the previously-set header value.</source>
          <target state="translated">注： &lt;code&gt;res.set()&lt;/code&gt; 後に &lt;code&gt;res.append()&lt;/code&gt; を呼び出すと、以前に設定されたヘッダー値がリセットされます。</target>
        </trans-unit>
        <trans-unit id="ee00ea842b7774ac5424a94c3f8a1eca9bf291a6" translate="yes" xml:space="preserve">
          <source>Notice that when &lt;em&gt;not&lt;/em&gt; calling &amp;ldquo;next&amp;rdquo; in an error-handling function, you are responsible for writing (and ending) the response. Otherwise those requests will &amp;ldquo;hang&amp;rdquo; and will not be eligible for garbage collection.</source>
          <target state="translated">エラー処理関数で「next」を呼び出さ&lt;em&gt;ない&lt;/em&gt;場合は、応答を記述（および終了）する必要があることに注意してください。そうでない場合、それらの要求は「ハング」し、ガベージコレクションの対象にはなりません。</target>
        </trans-unit>
        <trans-unit id="8f0e59d44f7350ade4f4561e1c79a9f237691602" translate="yes" xml:space="preserve">
          <source>Notice the call above to &lt;code&gt;next()&lt;/code&gt;. Calling this function invokes the next middleware function in the app. The &lt;code&gt;next()&lt;/code&gt; function is not a part of the Node.js or Express API, but is the third argument that is passed to the middleware function. The &lt;code&gt;next()&lt;/code&gt; function could be named anything, but by convention it is always named &amp;ldquo;next&amp;rdquo;. To avoid confusion, always use this convention.</source>
          <target state="translated">上記の &lt;code&gt;next()&lt;/code&gt; の呼び出しに注意してください。この関数を呼び出すと、アプリ内の次のミドルウェア関数が呼び出されます。 &lt;code&gt;next()&lt;/code&gt; 関数は、Node.jsのかエクスプレスAPIの一部ではありませんが、ミドルウェアの関数に渡される第三引数です。 &lt;code&gt;next()&lt;/code&gt; 関数は、自由に名前を付けることができますが、慣例により、常に「次」と命名されます。混乱を避けるために、常にこの規則を使用してください。</target>
        </trans-unit>
        <trans-unit id="ac34737375e1ec466948749162a90d6ccec28327" translate="yes" xml:space="preserve">
          <source>Now all errors asynchronous and synchronous get propagated to the error middleware.</source>
          <target state="translated">これで、非同期および同期のすべてのエラーがエラーミドルウェアに伝搬されるようになりました。</target>
        </trans-unit>
        <trans-unit id="66c86cbbcaa5bb9e0ee7b12ec877ad1f51ccb64a" translate="yes" xml:space="preserve">
          <source>Now available as &lt;code&gt;app.mountpath&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;app.mountpath&lt;/code&gt; として利用できるようになりました。</target>
        </trans-unit>
        <trans-unit id="ac561347d088b0883fb91d6a892240f8d83ba881" translate="yes" xml:space="preserve">
          <source>Now install Express in the &lt;code&gt;myapp&lt;/code&gt; directory and save it in the dependencies list. For example:</source>
          <target state="translated">次に、 &lt;code&gt;myapp&lt;/code&gt; ディレクトリにExpressをインストールし、依存関係リストに保存します。例えば：</target>
        </trans-unit>
        <trans-unit id="e6bb906b09f620bee31f484609b2f0b4c223d479" translate="yes" xml:space="preserve">
          <source>Now install the new generator:</source>
          <target state="translated">さて、新しいジェネレーターをインストールします。</target>
        </trans-unit>
        <trans-unit id="6869df3970ebf8c3d5ac8230dcc3a9906ee7e596" translate="yes" xml:space="preserve">
          <source>Now suppose you wanted to ignore logging requests for static files, but to continue logging routes and middleware defined after &lt;code&gt;logger()&lt;/code&gt;. You would simply move the call to &lt;code&gt;express.static()&lt;/code&gt; to the top, before adding the logger middleware:</source>
          <target state="translated">ここで、静的ファイルのロギング要求を無視し、 &lt;code&gt;logger()&lt;/code&gt; の後に定義されたルートとミドルウェアのロギングを継続したいとします。ロガーミドルウェアを追加する前に、単純に &lt;code&gt;express.static()&lt;/code&gt; の呼び出しを先頭に移動します。</target>
        </trans-unit>
        <trans-unit id="5d017fbc4da6a1d882e691e9b179dfce350b8c28" translate="yes" xml:space="preserve">
          <source>Now the &lt;code&gt;express&lt;/code&gt; command on your system is updated to the Express 4 generator.</source>
          <target state="translated">これで、システムの &lt;code&gt;express&lt;/code&gt; コマンドがExpress 4ジェネレーターに更新されました。</target>
        </trans-unit>
        <trans-unit id="3cbc3e742af294ec1390daf4b1237500726631d4" translate="yes" xml:space="preserve">
          <source>Now, you can load the files that are in the &lt;code&gt;public&lt;/code&gt; directory from the &lt;code&gt;/static&lt;/code&gt; path prefix.</source>
          <target state="translated">これで、 &lt;code&gt;/static&lt;/code&gt; パスプレフィックスから &lt;code&gt;public&lt;/code&gt; ディレクトリにあるファイルをロードできます。</target>
        </trans-unit>
        <trans-unit id="5c6651072154305e52e1341f9e514f61cde2de3f" translate="yes" xml:space="preserve">
          <source>Now, you can load the files that are in the &lt;code&gt;public&lt;/code&gt; directory:</source>
          <target state="translated">これで、 &lt;code&gt;public&lt;/code&gt; ディレクトリーにあるファイルをロードできます。</target>
        </trans-unit>
        <trans-unit id="b7baa1d40c4ea29afc9098732bffee2a861a6c44" translate="yes" xml:space="preserve">
          <source>Number</source>
          <target state="translated">Number</target>
        </trans-unit>
        <trans-unit id="2883f191bc5ebfdc16c0813eff659b35363ea69b" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="translated">Object</target>
        </trans-unit>
        <trans-unit id="807bbc0f11d53f3f607798ea46a9ad44137ad154" translate="yes" xml:space="preserve">
          <source>Object containing HTTP headers to serve with the file.</source>
          <target state="translated">ファイルと共に提供する HTTP ヘッダを含むオブジェクト。</target>
        </trans-unit>
        <trans-unit id="c79eb463042b176d839e8dc0f651ddc205e8b8fb" translate="yes" xml:space="preserve">
          <source>On &lt;code&gt;GET /user/42/3&lt;/code&gt;, the following is printed:</source>
          <target state="translated">上の &lt;code&gt;GET /user/42/3&lt;/code&gt; 、以下が印刷されます。</target>
        </trans-unit>
        <trans-unit id="eb678c7ff155ef3b53cbe888ea6d4e3adf535c26" translate="yes" xml:space="preserve">
          <source>On &lt;code&gt;GET /user/42&lt;/code&gt;, the following is printed:</source>
          <target state="translated">で &lt;code&gt;GET /user/42&lt;/code&gt; 、以下が出力されます。</target>
        </trans-unit>
        <trans-unit id="99ee71c23f48bc7f1e8d68720910df2862398888" translate="yes" xml:space="preserve">
          <source>On MacOS or Linux, run the app with this command:</source>
          <target state="translated">MacOSまたはLinuxでは、このコマンドでアプリを実行します。</target>
        </trans-unit>
        <trans-unit id="58d0a8a0be8f218b5d6ba5182069de6033c6eada" translate="yes" xml:space="preserve">
          <source>On Windows, use the corresponding command.</source>
          <target state="translated">Windowsの場合は、対応するコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="3cc478e962d2cf3b3f6b50aab1cee5be70a74d77" translate="yes" xml:space="preserve">
          <source>On Windows, use this command:</source>
          <target state="translated">Windowsの場合は、このコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="56555e12431403f8b119ea9fa00ba4191809642b" translate="yes" xml:space="preserve">
          <source>Once running, a given application with the name &lt;code&gt;app&lt;/code&gt; can be scaled like so:</source>
          <target state="translated">実行すると、 &lt;code&gt;app&lt;/code&gt; という名前の特定のアプリケーションを次のようにスケーリングできます。</target>
        </trans-unit>
        <trans-unit id="b2c8eb68d5989afbc0861f4f3404dc10e0df228d" translate="yes" xml:space="preserve">
          <source>Once set, the value of &lt;code&gt;app.locals&lt;/code&gt; properties persist throughout the life of the application, in contrast with &lt;a href=&quot;#res.locals&quot;&gt;res.locals&lt;/a&gt; properties that are valid only for the lifetime of the request.</source>
          <target state="translated">いったん設定されると、 &lt;code&gt;app.locals&lt;/code&gt; プロパティの値は、アプリケーションの存続期間を通じて存続します。これは、リクエストの存続期間のみ有効な&lt;a href=&quot;#res.locals&quot;&gt;res.locals&lt;/a&gt;プロパティとは対照的です。</target>
        </trans-unit>
        <trans-unit id="5693dbe548abe2948dff59c9d800c9b159494875" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve created a router object, you can add middleware and HTTP method routes (such as &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, and so on) to it just like an application. For example:</source>
          <target state="translated">ルーターオブジェクトを作成したら、アプリケーションと同じようにミドルウェアとHTTPメソッドルート（ &lt;code&gt;get&lt;/code&gt; 、 &lt;code&gt;put&lt;/code&gt; 、 &lt;code&gt;post&lt;/code&gt; など）を追加できます。例えば：</target>
        </trans-unit>
        <trans-unit id="9508ce31745dab5c28e0b5f9b3eeee9c92446502" translate="yes" xml:space="preserve">
          <source>One thing you should &lt;em&gt;not&lt;/em&gt; do is to listen for the &lt;code&gt;uncaughtException&lt;/code&gt; event, emitted when an exception bubbles all the way back to the event loop. Adding an event listener for &lt;code&gt;uncaughtException&lt;/code&gt; will change the default behavior of the process that is encountering an exception; the process will continue to run despite the exception. This might sound like a good way of preventing your app from crashing, but continuing to run the app after an uncaught exception is a dangerous practice and is not recommended, because the state of the process becomes unreliable and unpredictable.</source>
          <target state="translated">行うべきでは&lt;em&gt;ない&lt;/em&gt;ことの1つは、例外がイベントループに戻って泡立つときに発生する &lt;code&gt;uncaughtException&lt;/code&gt; イベントをリッスンすることです。 &lt;code&gt;uncaughtException&lt;/code&gt; のイベントリスナーを追加すると、例外が発生しているプロセスのデフォルトの動作が変更されます。プロセスは例外にもかかわらず実行を続けます。これは、アプリのクラッシュを防ぐ良い方法のように聞こえるかもしれませんが、キャッチされない例外の後でアプリを実行し続けることは危険な慣行であり、プロセスの状態が信頼できなくなり、予測できなくなるためお勧めできません。</target>
        </trans-unit>
        <trans-unit id="4326bbc97fbaf369425a4247c85a2f7aa4cd2f26" translate="yes" xml:space="preserve">
          <source>Operating Node apps (StrongLoop documentation)</source>
          <target state="translated">ノードアプリを操作する (StrongLoopのドキュメント)</target>
        </trans-unit>
        <trans-unit id="85babb5b3aa1279e6bfb7260c5ea33f7fc7d97ba" translate="yes" xml:space="preserve">
          <source>Option for serving dotfiles. Possible values are &amp;ldquo;allow&amp;rdquo;, &amp;ldquo;deny&amp;rdquo;, &amp;ldquo;ignore&amp;rdquo;.</source>
          <target state="translated">dotfilesを提供するためのオプション。可能な値は、「許可」、「拒否」、「無視」です。</target>
        </trans-unit>
        <trans-unit id="dc993d1cbb242d7c8de4a7dfd3af6bd299104236" translate="yes" xml:space="preserve">
          <source>Optionally, you can specify &lt;code&gt;defaultValue&lt;/code&gt; to set a default value if the parameter is not found in any of the request objects.</source>
          <target state="translated">オプションで、 &lt;code&gt;defaultValue&lt;/code&gt; を指定して、パラメーターが要求オブジェクトのいずれにも見つからない場合のデフォルト値を設定できます。</target>
        </trans-unit>
        <trans-unit id="f7a2df8722f3d4dab4468810910f5632a6dfab8c" translate="yes" xml:space="preserve">
          <source>Options for `etag` setting</source>
          <target state="translated">タグ `etag` 設定のオプション</target>
        </trans-unit>
        <trans-unit id="50e64249cb8131bb957cf969ebe09c06d2b4e117" translate="yes" xml:space="preserve">
          <source>Options for `trust proxy` setting</source>
          <target state="translated">トラストプロキシ`設定のオプション</target>
        </trans-unit>
        <trans-unit id="5608055a9f70afc706ebfece230f48148759dd29" translate="yes" xml:space="preserve">
          <source>Or the equivalent:</source>
          <target state="translated">もしくは同等のもの。</target>
        </trans-unit>
        <trans-unit id="8a1681e612a2025087b703fdf1f8f617e506b053" translate="yes" xml:space="preserve">
          <source>Oracle</source>
          <target state="translated">Oracle</target>
        </trans-unit>
        <trans-unit id="bbafc259f7206d8b67a407f80c6229a1b5c432ad" translate="yes" xml:space="preserve">
          <source>Other changes</source>
          <target state="translated">その他の変更点</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="885406d21e0b67e81c188e8aac4751a3ede8af09" translate="yes" xml:space="preserve">
          <source>PM2</source>
          <target state="translated">PM2</target>
        </trans-unit>
        <trans-unit id="84fe177f5f3bec84074dbeb3a3f954d349f4cb69" translate="yes" xml:space="preserve">
          <source>PM2 is a production process manager for Node.js applications, that has a built-in load balancer. PM2 allows you to keep applications alive forever and reload them without downtime, and will facilitate common system admin tasks. PM2 also enables you to manage application logging, monitoring, and clustering.</source>
          <target state="translated">PM2は、ロードバランサを内蔵したNode.jsアプリケーションのためのプロダクションプロセスマネージャです。PM2を使用すると、アプリケーションを永遠に存続させ、ダウンタイムなしでリロードすることができ、一般的なシステム管理タスクを容易にすることができます。また、PM2はアプリケーションのロギング、監視、クラスタリングを管理することができます。</target>
        </trans-unit>
        <trans-unit id="f138388f35dc966da7a35fe2df2e27e241f4554e" translate="yes" xml:space="preserve">
          <source>Param callback functions are local to the router on which they are defined. They are not inherited by mounted apps or routers. Hence, param callbacks defined on &lt;code&gt;app&lt;/code&gt; will be triggered only by route parameters defined on &lt;code&gt;app&lt;/code&gt; routes.</source>
          <target state="translated">パラメータコールバック関数は、それらが定義されているルーターに対してローカルです。マウントされたアプリやルーターには継承されません。したがって、上に定義されたPARAMコールバック &lt;code&gt;app&lt;/code&gt; のみで定義されたルートパラメータによってトリガされる &lt;code&gt;app&lt;/code&gt; ルート。</target>
        </trans-unit>
        <trans-unit id="80f8d55bd236670f21f27b8474a8d4d3facaa4da" translate="yes" xml:space="preserve">
          <source>Param callback functions are local to the router on which they are defined. They are not inherited by mounted apps or routers. Hence, param callbacks defined on &lt;code&gt;router&lt;/code&gt; will be triggered only by route parameters defined on &lt;code&gt;router&lt;/code&gt; routes.</source>
          <target state="translated">パラメータコールバック関数は、それらが定義されているルーターに対してローカルです。マウントされたアプリやルーターには継承されません。したがって、 &lt;code&gt;router&lt;/code&gt; 定義されたparamコールバックは、ルータールートで定義されたルートパラメーターによってのみトリガーされ &lt;code&gt;router&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="519e39132bb98418cc0483cc446ccf5f3c8dcffe" translate="yes" xml:space="preserve">
          <source>Path</source>
          <target state="translated">Path</target>
        </trans-unit>
        <trans-unit id="61788d22ee17f02f69df425aee02ba8cfff34af4" translate="yes" xml:space="preserve">
          <source>Path (route) for which the middleware function applies.</source>
          <target state="translated">ミドルウェア機能が適用されるパス(経路)。</target>
        </trans-unit>
        <trans-unit id="48a73f8059b8cb5bcff8c0fe6505c6a59c998de2" translate="yes" xml:space="preserve">
          <source>Path Pattern</source>
          <target state="translated">パスパターン</target>
        </trans-unit>
        <trans-unit id="c9bcba0223827d43099c567d879e2392a81b7c50" translate="yes" xml:space="preserve">
          <source>Path examples</source>
          <target state="translated">パスの例</target>
        </trans-unit>
        <trans-unit id="fef5b3031d3908cdf103ff04f26284ecdaed8f1d" translate="yes" xml:space="preserve">
          <source>Path for the cookie. Defaults to &amp;ldquo;/&amp;rdquo;.</source>
          <target state="translated">クッキーのパス。デフォルトは「/」です。</target>
        </trans-unit>
        <trans-unit id="725dc941a27ffdbae57de49d342b6b2f81c87e2d" translate="yes" xml:space="preserve">
          <source>Path-relative redirects are also possible. If you were on &lt;code&gt;http://example.com/admin/post/new&lt;/code&gt;, the following would redirect to &lt;code&gt;http://example.com/admin/post&lt;/code&gt;:</source>
          <target state="translated">パス相対リダイレクトも可能です。あなたが上だったら &lt;code&gt;http://example.com/admin/post/new&lt;/code&gt; 、次のようににリダイレクトします &lt;code&gt;http://example.com/admin/post&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="5cc38630617140005413c660475ab5d759acc863" translate="yes" xml:space="preserve">
          <source>Performs content-negotiation on the &lt;code&gt;Accept&lt;/code&gt; HTTP header on the request object, when present. It uses &lt;a href=&quot;#req.accepts&quot;&gt;req.accepts()&lt;/a&gt; to select a handler for the request, based on the acceptable types ordered by their quality values. If the header is not specified, the first callback is invoked. When no match is found, the server responds with 406 &amp;ldquo;Not Acceptable&amp;rdquo;, or invokes the &lt;code&gt;default&lt;/code&gt; callback.</source>
          <target state="translated">存在する場合、リクエストオブジェクトの &lt;code&gt;Accept&lt;/code&gt; HTTPヘッダーでコンテンツネゴシエーションを実行します。&lt;a href=&quot;#req.accepts&quot;&gt;req.accepts（）&lt;/a&gt;を使用して、品質値で順序付けされた受け入れ可能なタイプに基づいて、要求のハンドラーを選択します。ヘッダーが指定されていない場合、最初のコールバックが呼び出されます。一致するものが見つからない場合、サーバーは406「Not Acceptable」で応答するか、 &lt;code&gt;default&lt;/code&gt; コールバックを呼び出します。</target>
        </trans-unit>
        <trans-unit id="664cab1511f48664dceb585cdc7f594862da6a1d" translate="yes" xml:space="preserve">
          <source>Pluralized method names</source>
          <target state="translated">複数化されたメソッド名</target>
        </trans-unit>
        <trans-unit id="2f5ff2956e4d801beaf30b23a4b1680121296458" translate="yes" xml:space="preserve">
          <source>Possible values for this option are:</source>
          <target state="translated">このオプションに設定可能な値は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="24fd6c2d1150de6a47543209150ff4c2a2d3104f" translate="yes" xml:space="preserve">
          <source>PostgreSQL</source>
          <target state="translated">PostgreSQL</target>
        </trans-unit>
        <trans-unit id="1d3bfab6a4379b32c0191366d08cc547061cbb5c" translate="yes" xml:space="preserve">
          <source>Preserve the &lt;code&gt;req.params&lt;/code&gt; values from the parent router. If the parent and the child have conflicting param names, the child&amp;rsquo;s value take precedence.</source>
          <target state="translated">親ルーターの &lt;code&gt;req.params&lt;/code&gt; 値を保持します。親と子のパラメーター名が競合している場合、子の値が優先されます。</target>
        </trans-unit>
        <trans-unit id="12f4c13a6a06f999cc56eb966c94f71ef2658a3f" translate="yes" xml:space="preserve">
          <source>Process</source>
          <target state="translated">Process</target>
        </trans-unit>
        <trans-unit id="9d69b18c96f755e0d2c72d6cabe982d6e40f60c4" translate="yes" xml:space="preserve">
          <source>Process managers for Express apps</source>
          <target state="translated">Expressアプリのプロセスマネージャー</target>
        </trans-unit>
        <trans-unit id="d1f4e5dff31059309500a5b8db5af30936a11b64" translate="yes" xml:space="preserve">
          <source>Production Best Practices: Security</source>
          <target state="translated">生産のベストプラクティス。セキュリティ</target>
        </trans-unit>
        <trans-unit id="69635c22b455ec7f8fb846ff2c1aef7a9cb8c0d0" translate="yes" xml:space="preserve">
          <source>Production best practices: performance and reliability</source>
          <target state="translated">生産のベストプラクティス:性能と信頼性</target>
        </trans-unit>
        <trans-unit id="d84f3fe17aa6acf2bd35040c5b6abfa32758525c" translate="yes" xml:space="preserve">
          <source>Promises will handle any exceptions (both explicit and implicit) in asynchronous code blocks that use &lt;code&gt;then()&lt;/code&gt;. Just add &lt;code&gt;.catch(next)&lt;/code&gt; to the end of promise chains. For example:</source>
          <target state="translated">Promiseは &lt;code&gt;then()&lt;/code&gt; を使用する非同期コードブロック内の例外（明示的および暗黙的）を処理します。 &lt;code&gt;.catch(next)&lt;/code&gt; をプロミスチェーンの最後に追加するだけです。例えば：</target>
        </trans-unit>
        <trans-unit id="59cc3b940c599e3677dc76fc0d131631519d1297" translate="yes" xml:space="preserve">
          <source>Prompt a file to be downloaded.</source>
          <target state="translated">ファイルのダウンロードを促します。</target>
        </trans-unit>
        <trans-unit id="bc6c88db2f0703a9e2461a4a8060ccf1cb881998" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Properties</target>
        </trans-unit>
        <trans-unit id="9ae33a7d0ecb82cae8f04aafab20bf90425b7b8c" translate="yes" xml:space="preserve">
          <source>Property</source>
          <target state="translated">Property</target>
        </trans-unit>
        <trans-unit id="773da65540aea2674cafe1bf06f58363a2510f7c" translate="yes" xml:space="preserve">
          <source>Query strings are not part of the route path.</source>
          <target state="translated">クエリ文字列はルートパスの一部ではありません。</target>
        </trans-unit>
        <trans-unit id="406e3354ded7a30533a16d61e783eefd42b55bc3" translate="yes" xml:space="preserve">
          <source>Read &lt;a href=&quot;http://expressjs.com/guide/behind-proxies.html&quot;&gt;Express behind proxies&lt;/a&gt; for more information.</source>
          <target state="translated">読む&lt;a href=&quot;http://expressjs.com/guide/behind-proxies.html&quot;&gt;プロキシの背後Expressの&lt;/a&gt;詳細については。</target>
        </trans-unit>
        <trans-unit id="f09862fdd5ee49343d7995d709e752a415649383" translate="yes" xml:space="preserve">
          <source>Redirect a request.</source>
          <target state="translated">リクエストをリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="f95dec5f96b45f5f4ad8a553ed18778a4226b9cd" translate="yes" xml:space="preserve">
          <source>Redirect to trailing &amp;ldquo;/&amp;rdquo; when the pathname is a directory.</source>
          <target state="translated">パス名がディレクトリの場合、末尾の「/」にリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="022a59f41b379759912fe6436dd7ef0b37cdd3ec" translate="yes" xml:space="preserve">
          <source>Redirecting to &lt;code&gt;post/new&lt;/code&gt; from &lt;code&gt;http://example.com/blog/admin&lt;/code&gt; (no trailing slash), will redirect to &lt;code&gt;http://example.com/blog/post/new&lt;/code&gt;.</source>
          <target state="translated">リダイレクト &lt;code&gt;post/new&lt;/code&gt; から &lt;code&gt;http://example.com/blog/admin&lt;/code&gt; （最後はスラッシュを指定しない）にリダイレクトします &lt;code&gt;http://example.com/blog/post/new&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="96f83b037c0fdfefc3ffe93813992f3e213ef656" translate="yes" xml:space="preserve">
          <source>Redirects can be a fully-qualified URL for redirecting to a different site:</source>
          <target state="translated">リダイレクトは、別のサイトにリダイレクトするための完全修飾URLにすることができます。</target>
        </trans-unit>
        <trans-unit id="22ffdc4fa4f4c697c7ea8f274a2b813f4cea3604" translate="yes" xml:space="preserve">
          <source>Redirects can be relative to the current URL. For example, from &lt;code&gt;http://example.com/blog/admin/&lt;/code&gt; (notice the trailing slash), the following would redirect to the URL &lt;code&gt;http://example.com/blog/admin/post/new&lt;/code&gt;.</source>
          <target state="translated">リダイレクトは、現在のURLを基準にすることができます。たとえば、 &lt;code&gt;http://example.com/blog/admin/&lt;/code&gt; （末尾のスラッシュに注意）から、以下はURL &lt;code&gt;http://example.com/blog/admin/post/new&lt;/code&gt; にリダイレクトされます。</target>
        </trans-unit>
        <trans-unit id="6996750ab11398227aaff24f6aa8d4a45c5ca1e0" translate="yes" xml:space="preserve">
          <source>Redirects can be relative to the root of the host name. For example, if the application is on &lt;code&gt;http://example.com/admin/post/new&lt;/code&gt;, the following would redirect to the URL &lt;code&gt;http://example.com/admin&lt;/code&gt;:</source>
          <target state="translated">リダイレクトは、ホスト名のルートを基準にすることができます。アプリケーションが上にある場合たとえば、 &lt;code&gt;http://example.com/admin/post/new&lt;/code&gt; 、以下のURLにリダイレクトします &lt;code&gt;http://example.com/admin&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="0775d35b0d0e8d4cc7d9bd7b0ec2e0e0e65e4c91" translate="yes" xml:space="preserve">
          <source>Redirects to the URL derived from the specified &lt;code&gt;path&lt;/code&gt;, with specified &lt;code&gt;status&lt;/code&gt;, a positive integer that corresponds to an &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html&quot;&gt;HTTP status code&lt;/a&gt; . If not specified, &lt;code&gt;status&lt;/code&gt; defaults to &amp;ldquo;302 &amp;ldquo;Found&amp;rdquo;.</source>
          <target state="translated">指定された &lt;code&gt;path&lt;/code&gt; 、&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html&quot;&gt;HTTPステータスコードに&lt;/a&gt;対応する正の整数、指定された &lt;code&gt;status&lt;/code&gt; から派生したURLにリダイレクトします。指定しない場合、 &lt;code&gt;status&lt;/code&gt; デフォルトで「302&amp;ldquo; Found&amp;rdquo;になります。</target>
        </trans-unit>
        <trans-unit id="24071b57a13027c01339027dcccb98218f052a8f" translate="yes" xml:space="preserve">
          <source>Redis</source>
          <target state="translated">Redis</target>
        </trans-unit>
        <trans-unit id="0dac9c55fe4efaf6801999afd6539f476cd22954" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;https://github.com/expressjs/cookie-session&quot;&gt;cookie-session&lt;/a&gt; and &lt;a href=&quot;https://github.com/expressjs/compression&quot;&gt;compression&lt;/a&gt; for examples of configurable middleware.</source>
          <target state="translated">構成可能なミドルウェアの例については、&lt;a href=&quot;https://github.com/expressjs/cookie-session&quot;&gt;Cookieセッション&lt;/a&gt;と&lt;a href=&quot;https://github.com/expressjs/compression&quot;&gt;圧縮&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6cd44855b27b599ae9e1fbdb389c1ad144477dcb" translate="yes" xml:space="preserve">
          <source>Registering a template engine; see &lt;a href=&quot;#app.engine&quot;&gt;app.engine&lt;/a&gt;.</source>
          <target state="translated">テンプレートエンジンの登録。&lt;a href=&quot;#app.engine&quot;&gt;app.engineを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8727039ca261fb51ebc7af17d17baeae66e840db" translate="yes" xml:space="preserve">
          <source>Registers the given template engine &lt;code&gt;callback&lt;/code&gt; as &lt;code&gt;ext&lt;/code&gt;.</source>
          <target state="translated">指定されたテンプレートエンジン &lt;code&gt;callback&lt;/code&gt; を &lt;code&gt;ext&lt;/code&gt; として登録します。</target>
        </trans-unit>
        <trans-unit id="469415c626b697430fa86fc9993ad32f63927e1f" translate="yes" xml:space="preserve">
          <source>Regular Expression</source>
          <target state="translated">正規表現</target>
        </trans-unit>
        <trans-unit id="6c8c2c3614aecfcda1772e6bbd65c7467184be07" translate="yes" xml:space="preserve">
          <source>Removed methods and properties</source>
          <target state="translated">メソッドとプロパティを削除</target>
        </trans-unit>
        <trans-unit id="626e614a2f0eccecba8a278191a9002f3f2bc85a" translate="yes" xml:space="preserve">
          <source>Removed the &lt;code&gt;--jshtml&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;--jshtml&lt;/code&gt; オプションを削除しました。</target>
        </trans-unit>
        <trans-unit id="2174ec2d849fe4bbf69958359caffe35d82437cf" translate="yes" xml:space="preserve">
          <source>Removed the &lt;code&gt;--sessions&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;--sessions&lt;/code&gt; オプションを削除しました。</target>
        </trans-unit>
        <trans-unit id="aca57ff9f0109fe2c858e8c044daed36a6122377" translate="yes" xml:space="preserve">
          <source>Removed.</source>
          <target state="translated">Removed.</target>
        </trans-unit>
        <trans-unit id="945377d9d89f1976bc09bede2d7f815aaef63055" translate="yes" xml:space="preserve">
          <source>Render a view template.</source>
          <target state="translated">ビューテンプレートをレンダリングします。</target>
        </trans-unit>
        <trans-unit id="018b969b49b70909ae4c21ee153cb9be998a5b74" translate="yes" xml:space="preserve">
          <source>Rendering HTML views; see &lt;a href=&quot;#app.render&quot;&gt;app.render&lt;/a&gt;.</source>
          <target state="translated">HTMLビューのレンダリング。&lt;a href=&quot;#app.render&quot;&gt;app.renderを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3a7fafeb35e33f37e0ac69b7863d53f3ff3931dd" translate="yes" xml:space="preserve">
          <source>Renders a &lt;code&gt;view&lt;/code&gt; and sends the rendered HTML string to the client. Optional parameters:</source>
          <target state="translated">&lt;code&gt;view&lt;/code&gt; をレンダリングし、レンダリングされたHTML文字列をクライアントに送信します。オプションのパラメーター：</target>
        </trans-unit>
        <trans-unit id="4aed03cac49d5e43da4e855a967286931a4d621a" translate="yes" xml:space="preserve">
          <source>Request</source>
          <target state="translated">Request</target>
        </trans-unit>
        <trans-unit id="98e2cc8b902f65361680f565da65cb169e0d964a" translate="yes" xml:space="preserve">
          <source>Resourceful routing</source>
          <target state="translated">リソースに富んだルーティング</target>
        </trans-unit>
        <trans-unit id="7ba17bd526e0d7f2a06b8a19d2d65726c3053a28" translate="yes" xml:space="preserve">
          <source>Respond to POST request on the root route (&lt;code&gt;/&lt;/code&gt;), the application&amp;rsquo;s home page:</source>
          <target state="translated">アプリケーションのホームページであるルートルート（ &lt;code&gt;/&lt;/code&gt; ）のPOSTリクエストに応答します。</target>
        </trans-unit>
        <trans-unit id="e5e4209ac38bb92cab3524b7b851e3924fcc0975" translate="yes" xml:space="preserve">
          <source>Respond to a DELETE request to the &lt;code&gt;/user&lt;/code&gt; route:</source>
          <target state="translated">&lt;code&gt;/user&lt;/code&gt; ルートへのDELETEリクエストに応答します。</target>
        </trans-unit>
        <trans-unit id="e5337f0a2e0d5819d8eba3231dfe78dabc3e5746" translate="yes" xml:space="preserve">
          <source>Respond to a PUT request to the &lt;code&gt;/user&lt;/code&gt; route:</source>
          <target state="translated">&lt;code&gt;/user&lt;/code&gt; ルートへのPUTリクエストに応答します。</target>
        </trans-unit>
        <trans-unit id="9436a3edfdc89441f72f63993bf3e8f8eb426912" translate="yes" xml:space="preserve">
          <source>Respond with &lt;code&gt;Hello World!&lt;/code&gt; on the homepage:</source>
          <target state="translated">で応答し &lt;code&gt;Hello World!&lt;/code&gt; ホームページで：</target>
        </trans-unit>
        <trans-unit id="6e617e4fc9da3de9693eac5990613543b86c63f9" translate="yes" xml:space="preserve">
          <source>Response</source>
          <target state="translated">Response</target>
        </trans-unit>
        <trans-unit id="3f24998028394f1be20196df841d9976df6e4a6d" translate="yes" xml:space="preserve">
          <source>Response methods</source>
          <target state="translated">応答方法</target>
        </trans-unit>
        <trans-unit id="5fef41135e9cdf06c5145b6d4bf8709a92b7d8d5" translate="yes" xml:space="preserve">
          <source>Responses from within a middleware function can be in any format, such as an HTML error page, a simple message, or a JSON string.</source>
          <target state="translated">ミドルウェア関数内からのレスポンスは、HTMLエラーページ、シンプルなメッセージ、JSON文字列など、どのような形式でも構いません。</target>
        </trans-unit>
        <trans-unit id="0da2e4fc9aaa966482acba758303f6e6f1353da8" translate="yes" xml:space="preserve">
          <source>Restart an app:</source>
          <target state="translated">アプリを再起動します。</target>
        </trans-unit>
        <trans-unit id="2ae676cd487bb80f3ec41f4458469793336d90aa" translate="yes" xml:space="preserve">
          <source>Restart the app automatically if it crashes.</source>
          <target state="translated">アプリがクラッシュした場合は自動的に再起動します。</target>
        </trans-unit>
        <trans-unit id="7c5820da342c61b021ecb17f5d3043764aa30d88" translate="yes" xml:space="preserve">
          <source>Retrieve the value of a setting with &lt;a href=&quot;#app.get&quot;&gt;&lt;code&gt;app.get()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#app.get&quot;&gt; &lt;code&gt;app.get()&lt;/code&gt; &lt;/a&gt;を使用して設定の値を取得します。</target>
        </trans-unit>
        <trans-unit id="b4cc6d166b13a4a9f23ffc92f6a17c3055a226a9" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the Boolean setting &lt;code&gt;name&lt;/code&gt; is disabled (&lt;code&gt;false&lt;/code&gt;), where &lt;code&gt;name&lt;/code&gt; is one of the properties from the &lt;a href=&quot;#app.settings.table&quot;&gt;app settings table&lt;/a&gt;.</source>
          <target state="translated">戻り値 &lt;code&gt;true&lt;/code&gt; のブール設定場合 &lt;code&gt;name&lt;/code&gt; （無効になっている &lt;code&gt;false&lt;/code&gt; ）、 &lt;code&gt;name&lt;/code&gt; からの特性の一つである&lt;a href=&quot;#app.settings.table&quot;&gt;アプリの設定表&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3ac8a29bf7632784f14ab42343d4653ff1ff4805" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the setting &lt;code&gt;name&lt;/code&gt; is enabled (&lt;code&gt;true&lt;/code&gt;), where &lt;code&gt;name&lt;/code&gt; is one of the properties from the &lt;a href=&quot;#app.settings.table&quot;&gt;app settings table&lt;/a&gt;.</source>
          <target state="translated">戻り値 &lt;code&gt;true&lt;/code&gt; 設定ならば &lt;code&gt;name&lt;/code&gt; （有効になっている &lt;code&gt;true&lt;/code&gt; ）、 &lt;code&gt;name&lt;/code&gt; からの特性の一つである&lt;a href=&quot;#app.settings.table&quot;&gt;アプリの設定表&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e851b1f65bf25bd5e53b1e962e97e932071b90fa" translate="yes" xml:space="preserve">
          <source>Returns an instance of a single route which you can then use to handle HTTP verbs with optional middleware. Use &lt;code&gt;router.route()&lt;/code&gt; to avoid duplicate route naming and thus typing errors.</source>
          <target state="translated">オプションのミドルウェアでHTTP動詞を処理するために使用できる単一のルートのインスタンスを返します。 &lt;code&gt;router.route()&lt;/code&gt; を使用して、ルートの名前の重複を避け、タイプミスを防ぎます。</target>
        </trans-unit>
        <trans-unit id="9487eb5a3a0bef826f2397478e3723a7ac09d287" translate="yes" xml:space="preserve">
          <source>Returns an instance of a single route, which you can then use to handle HTTP verbs with optional middleware. Use &lt;code&gt;app.route()&lt;/code&gt; to avoid duplicate route names (and thus typo errors).</source>
          <target state="translated">オプションのミドルウェアでHTTP動詞を処理するために使用できる単一のルートのインスタンスを返します。 &lt;code&gt;app.route()&lt;/code&gt; を使用して、ルート名の重複を回避します（したがって、タイプミスを防ぎます）。</target>
        </trans-unit>
        <trans-unit id="130f780dc7797f7c91157d4d04f908e7e4926800" translate="yes" xml:space="preserve">
          <source>Returns middleware that only parses JSON and only looks at requests where the &lt;code&gt;Content-Type&lt;/code&gt; header matches the &lt;code&gt;type&lt;/code&gt; option. This parser accepts any Unicode encoding of the body and supports automatic inflation of &lt;code&gt;gzip&lt;/code&gt; and &lt;code&gt;deflate&lt;/code&gt; encodings.</source>
          <target state="translated">JSONの解析のみを行い、 &lt;code&gt;Content-Type&lt;/code&gt; ヘッダーが &lt;code&gt;type&lt;/code&gt; オプションと一致するリクエストのみを確認するミドルウェアを返します。このパーサーは、本文のUnicodeエンコーディングを受け入れ、 &lt;code&gt;gzip&lt;/code&gt; および &lt;code&gt;deflate&lt;/code&gt; エンコーディングの自動インフレーションをサポートします。</target>
        </trans-unit>
        <trans-unit id="91246fbd5ccc48d81b7560de5f04930b0acfd179" translate="yes" xml:space="preserve">
          <source>Returns middleware that only parses urlencoded bodies and only looks at requests where the &lt;code&gt;Content-Type&lt;/code&gt; header matches the &lt;code&gt;type&lt;/code&gt; option. This parser accepts only UTF-8 encoding of the body and supports automatic inflation of &lt;code&gt;gzip&lt;/code&gt; and &lt;code&gt;deflate&lt;/code&gt; encodings.</source>
          <target state="translated">URLエンコードされた本文のみを解析し、 &lt;code&gt;Content-Type&lt;/code&gt; ヘッダーが &lt;code&gt;type&lt;/code&gt; オプションと一致するリクエストのみを確認するミドルウェアを返します。このパーサーは本文のUTF-8エンコーディングのみを受け入れ、 &lt;code&gt;gzip&lt;/code&gt; および &lt;code&gt;deflate&lt;/code&gt; エンコーディングの自動インフレーションをサポートします。</target>
        </trans-unit>
        <trans-unit id="bfe5078c9921c495db28d87aadf221ad7a44753a" translate="yes" xml:space="preserve">
          <source>Returns the HTTP response header specified by &lt;code&gt;field&lt;/code&gt;. The match is case-insensitive.</source>
          <target state="translated">&lt;code&gt;field&lt;/code&gt; 指定されたHTTP応答ヘッダーを返します。一致では大文字と小文字は区別されません。</target>
        </trans-unit>
        <trans-unit id="59698ffdb5c65c6c13b853732ccc073920ac9e99" translate="yes" xml:space="preserve">
          <source>Returns the canonical path of the app, a string.</source>
          <target state="translated">アプリの正規パスを文字列で返します。</target>
        </trans-unit>
        <trans-unit id="4f5b26572cad508cbadac7b911398c8be798f34d" translate="yes" xml:space="preserve">
          <source>Returns the first accepted charset of the specified character sets, based on the request&amp;rsquo;s &lt;code&gt;Accept-Charset&lt;/code&gt; HTTP header field. If none of the specified charsets is accepted, returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">リクエストの &lt;code&gt;Accept-Charset&lt;/code&gt; HTTPヘッダーフィールドに基づいて、指定された文字セットの最初に受け入れられた文字セットを返します。指定された文字セットのいずれも受け入れられない場合は、 &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="cbaace1c0726fe7471b1996d8e8f4c641d97ad9c" translate="yes" xml:space="preserve">
          <source>Returns the first accepted encoding of the specified encodings, based on the request&amp;rsquo;s &lt;code&gt;Accept-Encoding&lt;/code&gt; HTTP header field. If none of the specified encodings is accepted, returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">リクエストの &lt;code&gt;Accept-Encoding&lt;/code&gt; HTTPヘッダーフィールドに基づいて、指定されたエンコーディングの最初に受け入れられたエンコーディングを返します。指定されたエンコーディングのいずれも受け入れられない場合は、 &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ef3bb7648f8077718c3f8af8fcab04ba509d04c7" translate="yes" xml:space="preserve">
          <source>Returns the first accepted language of the specified languages, based on the request&amp;rsquo;s &lt;code&gt;Accept-Language&lt;/code&gt; HTTP header field. If none of the specified languages is accepted, returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">リクエストの &lt;code&gt;Accept-Language&lt;/code&gt; HTTPヘッダーフィールドに基づいて、指定された言語のうち最初に受け入れられた言語を返します。指定された言語がどれも受け入れられない場合は、 &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="b03311840fd1b1f21386b5485902595cde099f32" translate="yes" xml:space="preserve">
          <source>Returns the matching content type if the incoming request&amp;rsquo;s &amp;ldquo;Content-Type&amp;rdquo; HTTP header field matches the MIME type specified by the &lt;code&gt;type&lt;/code&gt; parameter. If the request has no body, returns &lt;code&gt;null&lt;/code&gt;. Returns &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">着信要求の「Content-Type」HTTPヘッダーフィールドが &lt;code&gt;type&lt;/code&gt; パラメーターで指定されたMIMEタイプと一致する場合、一致するコンテンツタイプを返します。リクエストに本文がない場合は、 &lt;code&gt;null&lt;/code&gt; を返します。それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0061e9477288412877890d1f4eb86a3fef229008" translate="yes" xml:space="preserve">
          <source>Returns the rendered HTML of a view via the &lt;code&gt;callback&lt;/code&gt; function. It accepts an optional parameter that is an object containing local variables for the view. It is like &lt;a href=&quot;#res.render&quot;&gt;res.render()&lt;/a&gt;, except it cannot send the rendered view to the client on its own.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 関数を介してビューのレンダリングされたHTMLを返します。これは、ビューのローカル変数を含むオブジェクトであるオプションのパラメーターを受け入れます。&lt;a href=&quot;#res.render&quot;&gt;res.render（）&lt;/a&gt;に似ていますが、レンダリングされたビューを単独でクライアントに送信できない点が異なります。</target>
        </trans-unit>
        <trans-unit id="f4109b9fe6d8c3ae88e12a8c2ade8cf8324908ee" translate="yes" xml:space="preserve">
          <source>Returns the specified HTTP request header field (case-insensitive match). The &lt;code&gt;Referrer&lt;/code&gt; and &lt;code&gt;Referer&lt;/code&gt; fields are interchangeable.</source>
          <target state="translated">指定されたHTTPリクエストヘッダーフィールドを返します（大文字と小文字を区別しない一致）。 &lt;code&gt;Referrer&lt;/code&gt; と &lt;code&gt;Referer&lt;/code&gt; フィールドは交換可能です。</target>
        </trans-unit>
        <trans-unit id="ac335e34898a2340a5caa5c0f862344e63d37d4c" translate="yes" xml:space="preserve">
          <source>Returns the value of &lt;code&gt;name&lt;/code&gt; app setting, where &lt;code&gt;name&lt;/code&gt; is one of the strings in the &lt;a href=&quot;#app.settings.table&quot;&gt;app settings table&lt;/a&gt;. For example:</source>
          <target state="translated">値を返します &lt;code&gt;name&lt;/code&gt; アプリの設定、 &lt;code&gt;name&lt;/code&gt; 内の文字列の一つである&lt;a href=&quot;#app.settings.table&quot;&gt;アプリの設定テーブルを&lt;/a&gt;。例えば：</target>
        </trans-unit>
        <trans-unit id="3b470af2032ab7ae57eadf2173967457afedff1d" translate="yes" xml:space="preserve">
          <source>Returns the value of param &lt;code&gt;name&lt;/code&gt; when present.</source>
          <target state="translated">存在する場合、パラメータ &lt;code&gt;name&lt;/code&gt; の値を返します。</target>
        </trans-unit>
        <trans-unit id="20cf632e40faa4450eb0fe0c2fa1791ce84c04f7" translate="yes" xml:space="preserve">
          <source>Root directory for relative filenames.</source>
          <target state="translated">相対ファイル名のルートディレクトリ。</target>
        </trans-unit>
        <trans-unit id="d348be6a29eb1f409b2cc658ce6085157eae7c07" translate="yes" xml:space="preserve">
          <source>Route definition takes the following structure:</source>
          <target state="translated">ルートの定義は以下の構造をとります。</target>
        </trans-unit>
        <trans-unit id="d988d65892c0a4717adf63f3cad16d3aa99c0af3" translate="yes" xml:space="preserve">
          <source>Route handlers</source>
          <target state="translated">ルートハンドラ</target>
        </trans-unit>
        <trans-unit id="2a5f0ac083bfd3d420b77a2525ebd5dfd3bf0461" translate="yes" xml:space="preserve">
          <source>Route handlers can be in the form of a function, an array of functions, or combinations of both, as shown in the following examples.</source>
          <target state="translated">ルートハンドラは、以下の例に示すように、関数、関数の配列、または両方の組み合わせの形をとることができます。</target>
        </trans-unit>
        <trans-unit id="43772e2b1c82f4ef675fda7d8659725a3ad66256" translate="yes" xml:space="preserve">
          <source>Route handlers enable you to define multiple routes for a path. The example below defines two routes for GET requests to the &lt;code&gt;/user/:id&lt;/code&gt; path. The second route will not cause any problems, but it will never get called because the first route ends the request-response cycle.</source>
          <target state="translated">ルートハンドラーを使用すると、パスに複数のルートを定義できます。以下の例では、 &lt;code&gt;/user/:id&lt;/code&gt; パスへのGETリクエストの2つのルートを定義しています。2番目のルートは問題を引き起こしませんが、最初のルートが要求/応答サイクルを終了するため、呼び出されることはありません。</target>
        </trans-unit>
        <trans-unit id="47f0e2e1ccfbbcf0915a2a336f96263197df933e" translate="yes" xml:space="preserve">
          <source>Route listings</source>
          <target state="translated">路線一覧</target>
        </trans-unit>
        <trans-unit id="3fb2e05f4286fef126784d33123dc78b2612dcc7" translate="yes" xml:space="preserve">
          <source>Route map</source>
          <target state="translated">路線図</target>
        </trans-unit>
        <trans-unit id="6b520cbc2448ae9fcbd3b75bd86718f582806cdb" translate="yes" xml:space="preserve">
          <source>Route methods</source>
          <target state="translated">ルートメソッド</target>
        </trans-unit>
        <trans-unit id="bc1b5693daa93fdd15bd76177c20f8b8594e1a3c" translate="yes" xml:space="preserve">
          <source>Route parameters</source>
          <target state="translated">ルートパラメータ</target>
        </trans-unit>
        <trans-unit id="9930b0e015172c19ec7a530ce90b4dbc1f187bd7" translate="yes" xml:space="preserve">
          <source>Route parameters are named URL segments that are used to capture the values specified at their position in the URL. The captured values are populated in the &lt;code&gt;req.params&lt;/code&gt; object, with the name of the route parameter specified in the path as their respective keys.</source>
          <target state="translated">ルートパラメータは、URLの位置に指定された値をキャプチャするために使用される名前付きURLセグメントです。キャプチャされた値は、 &lt;code&gt;req.params&lt;/code&gt; オブジェクトに入力され、それぞれのキーとしてパスで指定されたルートパラメータの名前が含まれます。</target>
        </trans-unit>
        <trans-unit id="089c9aa88668cbda92612701ea3db4dad7b2f139" translate="yes" xml:space="preserve">
          <source>Route paths</source>
          <target state="translated">ルートパス</target>
        </trans-unit>
        <trans-unit id="ec232e98a9dfda720ba1fef0bc0a5b30053af068" translate="yes" xml:space="preserve">
          <source>Route paths, in combination with a request method, define the endpoints at which requests can be made. Route paths can be strings, string patterns, or regular expressions.</source>
          <target state="translated">ルートパスはリクエストメソッドと組み合わせて、リクエストができるエンドポイントを定義します。ルートパスは文字列、文字列パターン、正規表現のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="6dcf16e1c5d3e9fd2ae4a4d54c174448fe43e1b6" translate="yes" xml:space="preserve">
          <source>Router</source>
          <target state="translated">Router</target>
        </trans-unit>
        <trans-unit id="fcc9904e39f246418481eeb399ed1fb6f43df0bb" translate="yes" xml:space="preserve">
          <source>Router-level middleware</source>
          <target state="translated">ルータレベルのミドルウェア</target>
        </trans-unit>
        <trans-unit id="5dce0619e0e7ed08fff08132210b24a774347d69" translate="yes" xml:space="preserve">
          <source>Router-level middleware works in the same way as application-level middleware, except it is bound to an instance of &lt;code&gt;express.Router()&lt;/code&gt;.</source>
          <target state="translated">ルーターレベルのミドルウェアは、 &lt;code&gt;express.Router()&lt;/code&gt; のインスタンスにバインドされることを除いて、アプリケーションレベルのミドルウェアと同じように機能します。</target>
        </trans-unit>
        <trans-unit id="33d7f21ca0c3f57268ef0450ed68717436d80aa0" translate="yes" xml:space="preserve">
          <source>Routes HTTP DELETE requests to the specified path with the specified callback functions. For more information, see the &lt;a href=&quot;http://expressjs.com/guide/routing.html&quot;&gt;routing guide&lt;/a&gt;.</source>
          <target state="translated">指定されたコールバック関数を使用して、HTTP DELETE要求を指定されたパスにルーティングします。詳細については、&lt;a href=&quot;http://expressjs.com/guide/routing.html&quot;&gt;ルーティングガイドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="ec3bfbe92582a193d7f157f9209f058334bedd2d" translate="yes" xml:space="preserve">
          <source>Routes HTTP GET requests to the specified path with the specified callback functions.</source>
          <target state="translated">指定されたコールバック関数を使用して、指定されたパスにHTTP GETリクエストをルーティングします。</target>
        </trans-unit>
        <trans-unit id="9d149fa04fc54b7fb2e8e78a9951e110f1ba0931" translate="yes" xml:space="preserve">
          <source>Routes HTTP POST requests to the specified path with the specified callback functions. For more information, see the &lt;a href=&quot;http://expressjs.com/guide/routing.html&quot;&gt;routing guide&lt;/a&gt;.</source>
          <target state="translated">指定されたコールバック関数を使用して、HTTP POST要求を指定されたパスにルーティングします。詳細については、&lt;a href=&quot;http://expressjs.com/guide/routing.html&quot;&gt;ルーティングガイドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="ca2ef131e7f8787ecdd8a4c2eb333e0bbdf50958" translate="yes" xml:space="preserve">
          <source>Routes HTTP PUT requests to the specified path with the specified callback functions.</source>
          <target state="translated">指定されたコールバック関数を使用して、指定されたパスにHTTP PUTリクエストをルーティングします。</target>
        </trans-unit>
        <trans-unit id="d8daf651dbea2d45ea29cfecefe6459929754177" translate="yes" xml:space="preserve">
          <source>Routes an HTTP request, where METHOD is the HTTP method of the request, such as GET, PUT, POST, and so on, in lowercase. Thus, the actual methods are &lt;code&gt;app.get()&lt;/code&gt;, &lt;code&gt;app.post()&lt;/code&gt;, &lt;code&gt;app.put()&lt;/code&gt;, and so on. See &lt;a href=&quot;#routing-methods&quot;&gt;Routing methods&lt;/a&gt; below for the complete list.</source>
          <target state="translated">HTTPリクエストをルーティングします。METHODは、GET、PUT、POSTなど、リクエストのHTTPメソッドを小文字で示します。したがって、実際のメソッドは &lt;code&gt;app.get()&lt;/code&gt; 、 &lt;code&gt;app.post()&lt;/code&gt; 、 &lt;code&gt;app.put()&lt;/code&gt; などです。完全なリストについては、以下の&lt;a href=&quot;#routing-methods&quot;&gt;ルーティング方法を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="684ddef7686ea772c5de5131ad3f99f3168dbb44" translate="yes" xml:space="preserve">
          <source>Routes and other application-specific logic can live in as many files as you wish, in any directory structure you prefer. View the following examples for inspiration:</source>
          <target state="translated">ルートやその他のアプリケーション固有のロジックは、お好きなディレクトリ構造のファイルに何個でも格納できます。次の例を参照して、インスピレーションを得てください。</target>
        </trans-unit>
        <trans-unit id="7d15dd1bec2e055c5b177c9f869305ae6c54c9bb" translate="yes" xml:space="preserve">
          <source>Routing</source>
          <target state="translated">Routing</target>
        </trans-unit>
        <trans-unit id="37bccd83b95d4d4d857bdb2c0977c034be919ada" translate="yes" xml:space="preserve">
          <source>Routing HTTP requests; see for example, &lt;a href=&quot;#app.METHOD&quot;&gt;app.METHOD&lt;/a&gt; and &lt;a href=&quot;#app.param&quot;&gt;app.param&lt;/a&gt;.</source>
          <target state="translated">HTTPリクエストのルーティング。たとえば、&lt;a href=&quot;#app.METHOD&quot;&gt;app.METHOD&lt;/a&gt;および&lt;a href=&quot;#app.param&quot;&gt;app.paramを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7e59aec0c4a3591933eaad7d693cbb63354f979f" translate="yes" xml:space="preserve">
          <source>Routing methods</source>
          <target state="translated">ルーティング方法</target>
        </trans-unit>
        <trans-unit id="a097a274167aef2a6b177a27a1004721cde84799" translate="yes" xml:space="preserve">
          <source>Run the app</source>
          <target state="translated">アプリを実行する</target>
        </trans-unit>
        <trans-unit id="7bc9aec7275134fa998a9e27d9f1304942965710" translate="yes" xml:space="preserve">
          <source>Run the app with the following command:</source>
          <target state="translated">以下のコマンドでアプリを実行します。</target>
        </trans-unit>
        <trans-unit id="3e5f85459f630d13605e9ef3b5e3c83fda838f84" translate="yes" xml:space="preserve">
          <source>Run your app (and Node) directly with the init system. This is somewhat simpler, but you don&amp;rsquo;t get the additional advantages of using a process manager.</source>
          <target state="translated">アプリ（およびノー​​ド）をinitシステムで直接実行します。これは多少単純ですが、プロセスマネージャを使用することによる追加の利点は得られません。</target>
        </trans-unit>
        <trans-unit id="6715abc55b076c169ab12e25ab5709199babe16e" translate="yes" xml:space="preserve">
          <source>Run your app in a cluster</source>
          <target state="translated">クラスタでアプリを実行する</target>
        </trans-unit>
        <trans-unit id="d82defaf0a2b5898fe678ac25aac2bb936182657" translate="yes" xml:space="preserve">
          <source>Run your app in a process manager, and install the process manager as a service with the init system. The process manager will restart your app when the app crashes, and the init system will restart the process manager when the OS restarts. This is the recommended approach.</source>
          <target state="translated">プロセスマネージャでアプリを実行し、initシステムでプロセスマネージャをサービスとしてインストールします。アプリがクラッシュしたときにプロセスマネージャでアプリを再起動し、OSが再起動したときにinitシステムでプロセスマネージャを再起動します。これが推奨される方法です。</target>
        </trans-unit>
        <trans-unit id="af123e2f1a1209ae34e31a2012d1a0bec2962db1" translate="yes" xml:space="preserve">
          <source>RunKit is a third-party service not affiliated with the Express project.</source>
          <target state="translated">RunKitはExpressプロジェクトとは提携していないサードパーティのサービスです。</target>
        </trans-unit>
        <trans-unit id="737f194343d1a6519b1ba60b56cfd68faa0bd3e0" translate="yes" xml:space="preserve">
          <source>Running Locally</source>
          <target state="translated">ローカルでのランニング</target>
        </trans-unit>
        <trans-unit id="93328240d9a34d0bd164529a8ce49946ffca0894" translate="yes" xml:space="preserve">
          <source>Running the above &lt;code&gt;npm&lt;/code&gt; command will update &lt;code&gt;package.json&lt;/code&gt; as follows:</source>
          <target state="translated">上記の &lt;code&gt;npm&lt;/code&gt; コマンドを実行すると、 &lt;code&gt;package.json&lt;/code&gt; が次のように更新されます。</target>
        </trans-unit>
        <trans-unit id="311911c9c8793473c30d3432cd79a04e54ca52c5" translate="yes" xml:space="preserve">
          <source>Running this command on the default app generated by the &lt;a href=&quot;../starter/generator&quot;&gt;express generator&lt;/a&gt; prints the following output:</source>
          <target state="translated">&lt;a href=&quot;../starter/generator&quot;&gt;エクスプレスジェネレーター&lt;/a&gt;によって生成されたデフォルトのアプリでこのコマンドを実行すると、次の出力が出力されます。</target>
        </trans-unit>
        <trans-unit id="725d4af7c0a6c33765e24e91b6d9cef2b17c21cb" translate="yes" xml:space="preserve">
          <source>SQL Server</source>
          <target state="translated">エスエックスエルサーバー</target>
        </trans-unit>
        <trans-unit id="9f09ccbd1cfb65aced3eb531305e671e40b95dd3" translate="yes" xml:space="preserve">
          <source>SQLite</source>
          <target state="translated">SQLite</target>
        </trans-unit>
        <trans-unit id="482b46339dd80a5f4d548a5dcf4dc43aa25df229" translate="yes" xml:space="preserve">
          <source>Security best practices for Express applications in production include:</source>
          <target state="translated">本番環境での Express アプリケーションのセキュリティのベストプラクティスには、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="9ff9c4a165ef8a521b042e0b8febf47b66094a81" translate="yes" xml:space="preserve">
          <source>Security updates</source>
          <target state="translated">セキュリティアップデート</target>
        </trans-unit>
        <trans-unit id="a66d10fb0f7589ce4b597538adb9ca6aff4f3311" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#dotfiles&quot;&gt;dotfiles&lt;/a&gt; below.</source>
          <target state="translated">以下の&lt;a href=&quot;#dotfiles&quot;&gt;dotfilesを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="801fae78fc810b25c6e055a5a05d588c67270589" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#fallthrough&quot;&gt;fallthrough&lt;/a&gt; below.</source>
          <target state="translated">以下の&lt;a href=&quot;#fallthrough&quot;&gt;フォールスルーを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9f5769ce60aea42ee0508720d5ef65b8cab29f75" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#setHeaders&quot;&gt;setHeaders&lt;/a&gt; below.</source>
          <target state="translated">下記の&lt;a href=&quot;#setHeaders&quot;&gt;setHeadersを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a7ad695d876b308715f9464f8ae701fa436638aa" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://loopback.io&quot;&gt;LoopBack&lt;/a&gt; for an Express-based framework that is centered around models.</source>
          <target state="translated">モデルを中心としたExpressベースのフレームワークについては、&lt;a href=&quot;http://loopback.io&quot;&gt;LoopBack&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9b807d5dc98816d41f9805d4848a1d04f5770351" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/strongloop/express/wiki#template-engines&quot;&gt;Template Engines (Express wiki)&lt;/a&gt; for a list of template engines you can use with Express. See also &lt;a href=&quot;https://strongloop.com/strongblog/compare-javascript-templates-jade-mustache-dust/&quot;&gt;Comparing JavaScript Templating Engines: Jade, Mustache, Dust and More&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/strongloop/express/wiki#template-engines&quot;&gt;Expressで&lt;/a&gt;使用できるテンプレートエンジンのリストについては、テンプレートエンジン（Express wiki）を参照してください。&lt;a href=&quot;https://strongloop.com/strongblog/compare-javascript-templates-jade-mustache-dust/&quot;&gt;JavaScriptテンプレートエンジンの比較：Jade、Mustache、Dustなど&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="translated">も参照してください。</target>
        </trans-unit>
        <trans-unit id="bedeb5fdfff0203be10fee3f1e72fa03c0485f83" translate="yes" xml:space="preserve">
          <source>Send a JSON response with JSONP support.</source>
          <target state="translated">JSONP対応のJSONレスポンスを送信します。</target>
        </trans-unit>
        <trans-unit id="ddea9c326b772509249a2bbc22aab6161aacc007" translate="yes" xml:space="preserve">
          <source>Send a JSON response.</source>
          <target state="translated">JSON レスポンスを送信します。</target>
        </trans-unit>
        <trans-unit id="4b0726571c70fe4e4f6dabb3f875ed67b14c1c6a" translate="yes" xml:space="preserve">
          <source>Send a file as an octet stream.</source>
          <target state="translated">ファイルをオクテットストリームとして送信します。</target>
        </trans-unit>
        <trans-unit id="7cf66335161f5611707bdfdea876afd40d391127" translate="yes" xml:space="preserve">
          <source>Send a response of various types.</source>
          <target state="translated">様々なタイプのレスポンスを送信します。</target>
        </trans-unit>
        <trans-unit id="de1d1db925efd2a34a7453e440636c373e556dd3" translate="yes" xml:space="preserve">
          <source>Sends a JSON response with JSONP support. This method is identical to &lt;code&gt;res.json()&lt;/code&gt;, except that it opts-in to JSONP callback support.</source>
          <target state="translated">JSONPサポート付きのJSON応答を送信します。このメソッドは、JSONPコールバックサポートを &lt;code&gt;res.json()&lt;/code&gt; することを除いて、res.json（）と同じです。</target>
        </trans-unit>
        <trans-unit id="9ff943732681c5e689092199536663c2b18d1885" translate="yes" xml:space="preserve">
          <source>Sends a JSON response. This method sends a response (with the correct content-type) that is the parameter converted to a JSON string using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt;JSON.stringify()&lt;/a&gt;.</source>
          <target state="translated">JSON応答を送信します。このメソッドは、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt;JSON.stringify（）&lt;/a&gt;を使用してJSON文字列に変換されたパラメーターである応答（正しいcontent-typeを含む）を送信します。</target>
        </trans-unit>
        <trans-unit id="c752aa500f04751a8ecc07cf833dec15fd0aa666" translate="yes" xml:space="preserve">
          <source>Sends the HTTP response.</source>
          <target state="translated">HTTP レスポンスを送信します。</target>
        </trans-unit>
        <trans-unit id="03f782a46a8bac211976d671f1da36c68557b6cf" translate="yes" xml:space="preserve">
          <source>Sends the specified directory index file. Set to &lt;code&gt;false&lt;/code&gt; to disable directory indexing.</source>
          <target state="translated">指定されたディレクトリインデックスファイルを送信します。ディレクトリのインデックス作成を無効にするには、 &lt;code&gt;false&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="af8bdf6b81d4ae60d688b0791219fe89ca5a2438" translate="yes" xml:space="preserve">
          <source>Series of Middleware</source>
          <target state="translated">ミドルウェアシリーズ</target>
        </trans-unit>
        <trans-unit id="9a4eb089f7abeeea82c5decd04ec86a7598c4b43" translate="yes" xml:space="preserve">
          <source>Serve static content for the app from the &amp;ldquo;public&amp;rdquo; directory in the application directory:</source>
          <target state="translated">アプリケーションディレクトリの「public」ディレクトリからアプリの静的コンテンツを提供します。</target>
        </trans-unit>
        <trans-unit id="0050fe91f0a2cee4def4345175b4477ffe748fe3" translate="yes" xml:space="preserve">
          <source>Serve static files from multiple directories, but give precedence to &amp;ldquo;./public&amp;rdquo; over the others:</source>
          <target state="translated">複数のディレクトリから静的ファイルを提供しますが、「./ public」を他のディレクトリより優先します。</target>
        </trans-unit>
        <trans-unit id="1a6c6d19d3933d04b334c2828256c5c55e2803f2" translate="yes" xml:space="preserve">
          <source>Serving static files in Express</source>
          <target state="translated">Express での静的ファイルのサーブ</target>
        </trans-unit>
        <trans-unit id="aff609eaa51f20e20af5643a4811126aa73883e2" translate="yes" xml:space="preserve">
          <source>Set IP addresses in any of the following ways:</source>
          <target state="translated">以下のいずれかの方法でIPアドレスを設定します。</target>
        </trans-unit>
        <trans-unit id="0e01006a77c6e07e7ebce0253f3d51211e9b83a4" translate="yes" xml:space="preserve">
          <source>Set NODE_ENV to &amp;ldquo;production&amp;rdquo;</source>
          <target state="translated">NODE_ENVを「本番」に設定</target>
        </trans-unit>
        <trans-unit id="6909ce8ae4c4ace4144dc0743f026a3ce5e0eaa8" translate="yes" xml:space="preserve">
          <source>Set cookie security options</source>
          <target state="translated">クッキーのセキュリティオプションを設定する</target>
        </trans-unit>
        <trans-unit id="6d24f885871d861c63b8506027f42ef219a98332" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;Last-Modified&lt;/code&gt; header to the last modified date of the file on the OS.</source>
          <target state="translated">設定する &lt;code&gt;Last-Modified&lt;/code&gt; OS上のファイルの最終更新日時にヘッダを。</target>
        </trans-unit>
        <trans-unit id="fe1675aa1046d105878a7a7221af43aae399e09f" translate="yes" xml:space="preserve">
          <source>Set the ETag response header. For possible values, see the &lt;a href=&quot;#etag.options.table&quot;&gt;&lt;code&gt;etag&lt;/code&gt; options table&lt;/a&gt;.</source>
          <target state="translated">ETag応答ヘッダーを設定します。可能な値については、&lt;a href=&quot;#etag.options.table&quot;&gt; &lt;code&gt;etag&lt;/code&gt; オプションの表を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ca3595f7f468697dac8f5eac858853777a733dca" translate="yes" xml:space="preserve">
          <source>Set the environment variable &lt;code&gt;NODE_ENV&lt;/code&gt; to &lt;code&gt;production&lt;/code&gt;, to run the app in production mode.</source>
          <target state="translated">環境変数 &lt;code&gt;NODE_ENV&lt;/code&gt; を &lt;code&gt;production&lt;/code&gt; に設定して、アプリを本番モードで実行します。</target>
        </trans-unit>
        <trans-unit id="812871f8aff15822574da03c93bd7a3c69501915" translate="yes" xml:space="preserve">
          <source>Set the following cookie options to enhance security:</source>
          <target state="translated">セキュリティを強化するために、以下の Cookie オプションを設定します。</target>
        </trans-unit>
        <trans-unit id="4bb24da44fa19b1e64023a68f806c871ceb12b90" translate="yes" xml:space="preserve">
          <source>Set the max-age property of the Cache-Control header in milliseconds or a string in &lt;a href=&quot;https://www.npmjs.org/package/ms&quot;&gt;ms format&lt;/a&gt;.</source>
          <target state="translated">Cache-Controlヘッダーのmax-ageプロパティをミリ秒単位で設定するか、文字列を&lt;a href=&quot;https://www.npmjs.org/package/ms&quot;&gt;ms形式で設定します&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8067e687f2b903faa6d7ffd92b0873cef84879e1" translate="yes" xml:space="preserve">
          <source>Set the response status code and send its string representation as the response body.</source>
          <target state="translated">応答ステータスコードを設定し、その文字列表現を応答本文として送信します。</target>
        </trans-unit>
        <trans-unit id="4f3627cc843e619ce208469b210a455da4e1cd95" translate="yes" xml:space="preserve">
          <source>Set this option to &lt;code&gt;true&lt;/code&gt; so you can map multiple physical directories to the same web address or for routes to fill in non-existent files.</source>
          <target state="translated">このオプションを &lt;code&gt;true&lt;/code&gt; に設定すると、複数の物理ディレクトリを同じWebアドレスにマップしたり、ルートが存在しないファイルを埋めたりできるようになります。</target>
        </trans-unit>
        <trans-unit id="e868de397f8212c4c955107ef305f4249469f617" translate="yes" xml:space="preserve">
          <source>Set up the service</source>
          <target state="translated">サービスの設定</target>
        </trans-unit>
        <trans-unit id="d9d26a176d24ac16c5f304697d0c422ed72ecb7b" translate="yes" xml:space="preserve">
          <source>Sets cookie &lt;code&gt;name&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt;. The &lt;code&gt;value&lt;/code&gt; parameter may be a string or object converted to JSON.</source>
          <target state="translated">cookie &lt;code&gt;name&lt;/code&gt; を &lt;code&gt;value&lt;/code&gt; に設定します。 &lt;code&gt;value&lt;/code&gt; パラメータは、JSONに変換する文字列またはオブジェクトであってもよいです。</target>
        </trans-unit>
        <trans-unit id="6d957615f8daf970417d58c1b4e7b575ea9ce61a" translate="yes" xml:space="preserve">
          <source>Sets file extension fallbacks: If a file is not found, search for files with the specified extensions and serve the first one found. Example: &lt;code&gt;['html', 'htm']&lt;/code&gt;.</source>
          <target state="translated">ファイル拡張子のフォールバックを設定します。ファイルが見つからない場合は、指定された拡張子を持つファイルを検索し、最初に見つかったファイルを提供します。例： &lt;code&gt;['html', 'htm']&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3f1735cf33f94bf2c25d077c6707cd2b1c3368d3" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;Content-Type&lt;/code&gt; HTTP header to the MIME type as determined by &lt;a href=&quot;https://github.com/broofa/node-mime#mimelookuppath&quot;&gt;mime.lookup()&lt;/a&gt; for the specified &lt;code&gt;type&lt;/code&gt;. If &lt;code&gt;type&lt;/code&gt; contains the &amp;ldquo;/&amp;rdquo; character, then it sets the &lt;code&gt;Content-Type&lt;/code&gt; to &lt;code&gt;type&lt;/code&gt;.</source>
          <target state="translated">セット &lt;code&gt;Content-Type&lt;/code&gt; によって決定されるようなMIMEタイプにHTTPヘッダ&lt;a href=&quot;https://github.com/broofa/node-mime#mimelookuppath&quot;&gt;mime.lookup（）&lt;/a&gt;指定するため &lt;code&gt;type&lt;/code&gt; 。 &lt;code&gt;type&lt;/code&gt; に「/」文字が含まれている場合は、 &lt;code&gt;Content-Type&lt;/code&gt; を &lt;code&gt;type&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="ae2c1bc5b61320843da480f7f584847472a50adc" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;Last-Modified&lt;/code&gt; header to the last modified date of the file on the OS. Set &lt;code&gt;false&lt;/code&gt; to disable it.</source>
          <target state="translated">設定 &lt;code&gt;Last-Modified&lt;/code&gt; OS上のファイルの最終更新日時にヘッダを。無効にするには &lt;code&gt;false&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="3c127a5206298b34086b761ceb16071ab006c8bd" translate="yes" xml:space="preserve">
          <source>Sets the Boolean setting &lt;code&gt;name&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;, where &lt;code&gt;name&lt;/code&gt; is one of the properties from the &lt;a href=&quot;#app.settings.table&quot;&gt;app settings table&lt;/a&gt;. Calling &lt;code&gt;app.set('foo', false)&lt;/code&gt; for a Boolean property is the same as calling &lt;code&gt;app.disable('foo')&lt;/code&gt;.</source>
          <target state="translated">ブール設定 &lt;code&gt;name&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に&lt;a href=&quot;#app.settings.table&quot;&gt;設定します&lt;/a&gt;。ここで、 &lt;code&gt;name&lt;/code&gt; はアプリ設定テーブルのプロパティの1つです。呼び出し &lt;code&gt;app.set('foo', false)&lt;/code&gt; ブール型プロパティには、呼び出すのと同じである &lt;code&gt;app.disable('foo')&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="96afd3b383e32a571150e39f004f8ef4b9ff759b" translate="yes" xml:space="preserve">
          <source>Sets the Boolean setting &lt;code&gt;name&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, where &lt;code&gt;name&lt;/code&gt; is one of the properties from the &lt;a href=&quot;#app.settings.table&quot;&gt;app settings table&lt;/a&gt;. Calling &lt;code&gt;app.set('foo', true)&lt;/code&gt; for a Boolean property is the same as calling &lt;code&gt;app.enable('foo')&lt;/code&gt;.</source>
          <target state="translated">ブール設定 &lt;code&gt;name&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定します。ここで、 &lt;code&gt;name&lt;/code&gt; は&lt;a href=&quot;#app.settings.table&quot;&gt;アプリ設定テーブルの&lt;/a&gt;プロパティの1つです。呼び出し &lt;code&gt;app.set('foo', true)&lt;/code&gt; ブール型プロパティのことを呼び出すのと同じです &lt;code&gt;app.enable('foo')&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9a92ec83cd28e0293317d07432beedeaaf625282" translate="yes" xml:space="preserve">
          <source>Sets the HTTP response &lt;code&gt;Content-Disposition&lt;/code&gt; header field to &amp;ldquo;attachment&amp;rdquo;. If a &lt;code&gt;filename&lt;/code&gt; is given, then it sets the Content-Type based on the extension name via &lt;code&gt;res.type()&lt;/code&gt;, and sets the &lt;code&gt;Content-Disposition&lt;/code&gt; &amp;ldquo;filename=&amp;rdquo; parameter.</source>
          <target state="translated">HTTP応答の &lt;code&gt;Content-Disposition&lt;/code&gt; ヘッダーフィールドを「attachment」に設定します。場合は &lt;code&gt;filename&lt;/code&gt; 与えられ、それは経由して拡張名に基づいてコンテンツタイプを設定します &lt;code&gt;res.type()&lt;/code&gt; 、および設定 &lt;code&gt;Content-Disposition&lt;/code&gt; 「ファイル名=」パラメータを。</target>
        </trans-unit>
        <trans-unit id="f8f93665b83107c2e6d681f6e0b70dd01ef33dcd" translate="yes" xml:space="preserve">
          <source>Sets the HTTP status for the response. It is a chainable alias of Node&amp;rsquo;s &lt;a href=&quot;http://nodejs.org/api/http.html#http_response_statuscode&quot;&gt;response.statusCode&lt;/a&gt;.</source>
          <target state="translated">応答のHTTPステータスを設定します。これは、Nodeの&lt;a href=&quot;http://nodejs.org/api/http.html#http_response_statuscode&quot;&gt;response.statusCodeの&lt;/a&gt;チェーン可能なエイリアスです。</target>
        </trans-unit>
        <trans-unit id="e75189e99f79f581448de6a2aab88f05edd08070" translate="yes" xml:space="preserve">
          <source>Sets the max-age property of the &lt;code&gt;Cache-Control&lt;/code&gt; header in milliseconds or a string in &lt;a href=&quot;https://www.npmjs.org/package/ms&quot;&gt;ms format&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;Cache-Control&lt;/code&gt; ヘッダーのmax-ageプロパティをミリ秒単位または文字列を&lt;a href=&quot;https://www.npmjs.org/package/ms&quot;&gt;ms形式で設定します&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ed8e34cb68c3c293a176f69f586487abb0752075" translate="yes" xml:space="preserve">
          <source>Sets the response &lt;code&gt;Location&lt;/code&gt; HTTP header to the specified &lt;code&gt;path&lt;/code&gt; parameter.</source>
          <target state="translated">応答 &lt;code&gt;Location&lt;/code&gt; HTTPヘッダーを指定された &lt;code&gt;path&lt;/code&gt; パラメータに設定します。</target>
        </trans-unit>
        <trans-unit id="b841ff934b1c8b793f4fac863ece282f7abaf401" translate="yes" xml:space="preserve">
          <source>Sets the response HTTP status code to &lt;code&gt;statusCode&lt;/code&gt; and send its string representation as the response body.</source>
          <target state="translated">応答HTTPステータスコードを &lt;code&gt;statusCode&lt;/code&gt; に設定し、その文字列表現を応答本文として送信します。</target>
        </trans-unit>
        <trans-unit id="fea677509563fa0e4df6fb90d0275556cc21d2f7" translate="yes" xml:space="preserve">
          <source>Sets the response&amp;rsquo;s HTTP header &lt;code&gt;field&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt;. To set multiple fields at once, pass an object as the parameter.</source>
          <target state="translated">応答のHTTPヘッダー &lt;code&gt;field&lt;/code&gt; を &lt;code&gt;value&lt;/code&gt; に設定します。複数のフィールドを一度に設定するには、オブジェクトをパラメーターとして渡します。</target>
        </trans-unit>
        <trans-unit id="01c57596ded7f92c61eb9b9ca61f031a0a6f9415" translate="yes" xml:space="preserve">
          <source>Setting NODE_ENV to &amp;ldquo;production&amp;rdquo; makes Express:</source>
          <target state="translated">NODE_ENVを「本番」に設定すると、Expressは次のようになります。</target>
        </trans-unit>
        <trans-unit id="cc39f490b7ece8cf214b816546411004285f66e0" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;#router&quot;&gt;router&lt;/a&gt; and &lt;a href=&quot;#application&quot;&gt;app&lt;/a&gt; implement the middleware interface, you can use them as you would any other middleware function.</source>
          <target state="translated">以来&lt;a href=&quot;#router&quot;&gt;、ルータ&lt;/a&gt;や&lt;a href=&quot;#application&quot;&gt;アプリが&lt;/a&gt;ミドルウェアのインターフェイスを実装します、他のミドルウェア機能と同じように、あなたはそれらを使用することができます。</target>
        </trans-unit>
        <trans-unit id="52d9700618ec718ef68c23a46edf1c02cf117f08" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;path&lt;/code&gt; defaults to &amp;ldquo;/&amp;rdquo;, middleware mounted without a path will be executed for every request to the app.</source>
          <target state="translated">以来、 &lt;code&gt;path&lt;/code&gt; 「/」がデフォルト、ミドルウェアは、アプリケーションへのリクエストごとに実行されるパスなしで取り付けられています。</target>
        </trans-unit>
        <trans-unit id="3f19de106e2828a5cbd72d9b5a11c55936497375" translate="yes" xml:space="preserve">
          <source>Since npm@6, npm automatically reviews every install request. Also you can use &amp;lsquo;npm audit&amp;rsquo; to analyze your dependency tree.</source>
          <target state="translated">npm @ 6以降、npmはすべてのインストール要求を自動的に確認します。また、「npm監査」を使用して、依存関係ツリーを分析できます。</target>
        </trans-unit>
        <trans-unit id="488e6573921b32ba221f55e5ab7919687604d70e" translate="yes" xml:space="preserve">
          <source>Since promises automatically catch both synchronous errors and rejected promises, you can simply provide &lt;code&gt;next&lt;/code&gt; as the final catch handler and Express will catch errors, because the catch handler is given the error as the first argument.</source>
          <target state="translated">プロミスは同期エラーと拒否されたプロミスの両方を自動的にキャッチするため、最後のキャッチハンドラーとして &lt;code&gt;next&lt;/code&gt; を提供するだけで、Expressがエラーをキャッチします。キャッチハンドラーには最初の引数としてエラーが与えられるためです。</target>
        </trans-unit>
        <trans-unit id="c711b307679327e62bd7aafaf064a6a1fb9ba9c8" translate="yes" xml:space="preserve">
          <source>Since the hyphen (&lt;code&gt;-&lt;/code&gt;) and the dot (&lt;code&gt;.&lt;/code&gt;) are interpreted literally, they can be used along with route parameters for useful purposes.</source>
          <target state="translated">ハイフン（ &lt;code&gt;-&lt;/code&gt; ）とドット（ &lt;code&gt;.&lt;/code&gt; ）は文字どおりに解釈されるため、便利な目的でルートパラメーターと共に使用できます。</target>
        </trans-unit>
        <trans-unit id="26051ca8f4d7cc2dea4df889a3ca6dc8fc390c4a" translate="yes" xml:space="preserve">
          <source>Since the job is configured to run when the system starts, your app will be started along with the operating system, and automatically restarted if the app crashes or the system goes down.</source>
          <target state="translated">システムの起動時にジョブが実行されるように設定されているため、アプリがクラッシュしたり、システムがダウンしたりすると、OSと一緒にアプリが起動し、自動的に再起動されます。</target>
        </trans-unit>
        <trans-unit id="0d5974c872752dfafcaffd48b1470f8eaf4502f7" translate="yes" xml:space="preserve">
          <source>Single Middleware</source>
          <target state="translated">シングルミドルウェア</target>
        </trans-unit>
        <trans-unit id="607fb25f51b09c7bc30244aee3c6db9642bf3afb" translate="yes" xml:space="preserve">
          <source>Snyk offers both a &lt;a href=&quot;https://www.npmjs.com/package/snyk&quot;&gt;command-line tool&lt;/a&gt; and a &lt;a href=&quot;https://snyk.io/docs/github&quot;&gt;Github integration&lt;/a&gt; that checks your application against &lt;a href=&quot;https://snyk.io/vuln/&quot;&gt;Snyk&amp;rsquo;s open source vulnerability database&lt;/a&gt; for any known vulnerabilities in your dependencies. Install the CLI as follows:</source>
          <target state="translated">Snykは&lt;a href=&quot;https://www.npmjs.com/package/snyk&quot;&gt;コマンドラインツール&lt;/a&gt;と&lt;a href=&quot;https://snyk.io/docs/github&quot;&gt;Github統合の&lt;/a&gt;両方を提供し、&lt;a href=&quot;https://snyk.io/vuln/&quot;&gt;Snykのオープンソースの脆弱性データベース&lt;/a&gt;に対してアプリケーションをチェックして、依存関係の既知の脆弱性を探します。次のようにCLIをインストールします。</target>
        </trans-unit>
        <trans-unit id="6279396013b64257c617ddc7110244eed1d31981" translate="yes" xml:space="preserve">
          <source>So when you add a custom error handler, you must delegate to the default Express error handler, when the headers have already been sent to the client:</source>
          <target state="translated">そのため、カスタムのエラーハンドラを追加する場合は、ヘッダがすでにクライアントに送信されている場合は、デフォルトの Express エラーハンドラに委譲しなければなりません。</target>
        </trans-unit>
        <trans-unit id="9d68a7207b7e44dd4624efa92c02b135877d0417" translate="yes" xml:space="preserve">
          <source>So, best practice is to to turn off the header with the &lt;code&gt;app.disable()&lt;/code&gt; method:</source>
          <target state="translated">したがって、ベストプラクティスは、 &lt;code&gt;app.disable()&lt;/code&gt; メソッドでヘッダーをオフにすることです。</target>
        </trans-unit>
        <trans-unit id="a687a2be0072445ebe09751e2859f8e59a7a95ff" translate="yes" xml:space="preserve">
          <source>Some popular template engines that work with Express are &lt;a href=&quot;https://pugjs.org/api/getting-started.html&quot;&gt;Pug&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/mustache&quot;&gt;Mustache&lt;/a&gt;, and &lt;a href=&quot;https://www.npmjs.com/package/ejs&quot;&gt;EJS&lt;/a&gt;. The &lt;a href=&quot;../starter/generator&quot;&gt;Express application generator&lt;/a&gt; uses &lt;a href=&quot;https://www.npmjs.com/package/jade&quot;&gt;Jade&lt;/a&gt; as its default, but it also supports several others.</source>
          <target state="translated">Expressで動作する人気のあるテンプレートエンジンには、&lt;a href=&quot;https://pugjs.org/api/getting-started.html&quot;&gt;Pug&lt;/a&gt;、&lt;a href=&quot;https://www.npmjs.com/package/mustache&quot;&gt;Mustache&lt;/a&gt;、および&lt;a href=&quot;https://www.npmjs.com/package/ejs&quot;&gt;EJSがあり&lt;/a&gt;ます。&lt;a href=&quot;../starter/generator&quot;&gt;Expressアプリケーションジェネレータが&lt;/a&gt;使用&lt;a href=&quot;https://www.npmjs.com/package/jade&quot;&gt;ジェイドを&lt;/a&gt;そのデフォルトとして、それはまた、他のいくつかをサポートしています。</target>
        </trans-unit>
        <trans-unit id="ad21a0fa8305b84398f97adf2adfa2f2df5895d2" translate="yes" xml:space="preserve">
          <source>Some template engines do not follow this convention. The &lt;a href=&quot;https://github.com/tj/consolidate.js&quot;&gt;consolidate.js&lt;/a&gt; library maps Node template engines to follow this convention, so they work seamlessly with Express.</source>
          <target state="translated">一部のテンプレートエンジンは、この規則に従っていません。&lt;a href=&quot;https://github.com/tj/consolidate.js&quot;&gt;consolidate.js&lt;/a&gt;ライブラリは、彼らがExpressでシームレスに動作するので、この規則に従うことをノードテンプレートエンジンをマッピングします。</target>
        </trans-unit>
        <trans-unit id="6d225d49e44b9f256124d3c29d27b557e2aaecb1" translate="yes" xml:space="preserve">
          <source>Some template engines do not follow this convention. The &lt;a href=&quot;https://www.npmjs.org/package/consolidate&quot;&gt;Consolidate.js&lt;/a&gt; library follows this convention by mapping all of the popular Node.js template engines, and therefore works seamlessly within Express.</source>
          <target state="translated">一部のテンプレートエンジンは、この規則に従っていません。&lt;a href=&quot;https://www.npmjs.org/package/consolidate&quot;&gt;Consolidate.jsの&lt;/a&gt;ライブラリは、人気のNode.jsのテンプレートエンジンの全てをマッピングすることにより、この規則に従って、そのためエクスプレス内でシームレスに動作します。</target>
        </trans-unit>
        <trans-unit id="ee469dd894d2c0d5112eca8d1731b75ff0b3f857" translate="yes" xml:space="preserve">
          <source>Some versions of Node.js will throw when &lt;code&gt;res.statusCode&lt;/code&gt; is set to an invalid HTTP status code (outside of the range &lt;code&gt;100&lt;/code&gt; to &lt;code&gt;599&lt;/code&gt;). Consult the HTTP server documentation for the Node.js version being used.</source>
          <target state="translated">Node.jsの一部のバージョンでは、 &lt;code&gt;res.statusCode&lt;/code&gt; が無効なHTTPステータスコード（ &lt;code&gt;100&lt;/code&gt; から &lt;code&gt;599&lt;/code&gt; の範囲外）に設定されている場合にスローされます。使用されているNode.jsバージョンについては、HTTPサーバーのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="2336973f3c4b42f5d83e68cea9dcad2127cff9ac" translate="yes" xml:space="preserve">
          <source>Sparse arrays that have extremely high indexes in query string could cause the process to run out of memory and crash the server.</source>
          <target state="translated">クエリ文字列のインデックスが非常に高い疎な配列は、プロセスがメモリを使い果たしてサーバをクラッシュさせる可能性があります。</target>
        </trans-unit>
        <trans-unit id="b5ef97f3eb356131ee3ae97d67740cadea0106df" translate="yes" xml:space="preserve">
          <source>Sparse arrays that have extremely high indexes in the query string could cause the process to run out of memory and crash the server.</source>
          <target state="translated">クエリ文字列のインデックスが非常に高い疎な配列を使用すると、プロセスがメモリを使い果たしてサーバをクラッシュさせる可能性があります。</target>
        </trans-unit>
        <trans-unit id="27e4aa8b4b82b8acf4f1b3767be3f84835fed96a" translate="yes" xml:space="preserve">
          <source>Specifies the default JSONP callback name.</source>
          <target state="translated">デフォルトの JSONP コールバック名を指定します。</target>
        </trans-unit>
        <trans-unit id="641bd5916707fec2514d601040b5fbc4f5128c46" translate="yes" xml:space="preserve">
          <source>Specify a single subnet:</source>
          <target state="translated">単一のサブネットを指定します。</target>
        </trans-unit>
        <trans-unit id="ca32bd89167c893429f6d68f325a9cdaf08c7f96" translate="yes" xml:space="preserve">
          <source>Specify a subnet and an address:</source>
          <target state="translated">サブネットとアドレスを指定します。</target>
        </trans-unit>
        <trans-unit id="5355dbee8cd53350b3184a9df563491afbcb0b6b" translate="yes" xml:space="preserve">
          <source>Specify if overlapping &amp;amp; adjacent ranges should be combined, defaults to &lt;code&gt;false&lt;/code&gt;. When &lt;code&gt;true&lt;/code&gt;, ranges will be combined and returned as if they were specified that way in the header.</source>
          <target state="translated">重複する範囲と隣接する範囲を組み合わせるかどうかを指定し &lt;code&gt;false&lt;/code&gt; 。デフォルトはfalseです。場合 &lt;code&gt;true&lt;/code&gt; それらがヘッダにそのように指定されたかのように、範囲を合わせて返されます。</target>
        </trans-unit>
        <trans-unit id="18383c4f427413fa108687c9edaf868e15415a28" translate="yes" xml:space="preserve">
          <source>Specify multiple subnets as CSV:</source>
          <target state="translated">複数のサブネットをCSVで指定します。</target>
        </trans-unit>
        <trans-unit id="d2fa130b3c0a38c091a238309f12fc577d8e93ec" translate="yes" xml:space="preserve">
          <source>Specify multiple subnets as an array:</source>
          <target state="translated">複数のサブネットを配列で指定します。</target>
        </trans-unit>
        <trans-unit id="41b25279c02f0454306860e1895780af22fb451c" translate="yes" xml:space="preserve">
          <source>Start service</source>
          <target state="translated">サービス開始</target>
        </trans-unit>
        <trans-unit id="9fa48ff981e1f3d94d7aad2e9d994440e5718d47" translate="yes" xml:space="preserve">
          <source>Starting with version 4.x, Express no longer depends on &lt;a href=&quot;https://github.com/senchalabs/connect&quot;&gt;Connect&lt;/a&gt;. The middleware functions that were previously included with Express are now in separate modules; see &lt;a href=&quot;https://github.com/senchalabs/connect#middleware&quot;&gt;the list of middleware functions&lt;/a&gt;.</source>
          <target state="translated">バージョン4.x以降、Expressは&lt;a href=&quot;https://github.com/senchalabs/connect&quot;&gt;Connectに&lt;/a&gt;依存しなくなりました。以前Expressに含まれていたミドルウェア機能は、現在は別のモジュールにあります。&lt;a href=&quot;https://github.com/senchalabs/connect#middleware&quot;&gt;ミドルウェア機能の一覧を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="1db4b70a1d677af14340b5de81a5e1ad2c5f2b94" translate="yes" xml:space="preserve">
          <source>Starts a UNIX socket and listens for connections on the given path. This method is identical to Node&amp;rsquo;s &lt;a href=&quot;https://nodejs.org/api/http.html#http_server_listen&quot;&gt;http.Server.listen()&lt;/a&gt;.</source>
          <target state="translated">UNIXソケットを開始し、指定されたパスで接続を待機します。このメソッドは、Nodeの&lt;a href=&quot;https://nodejs.org/api/http.html#http_server_listen&quot;&gt;http.Server.listen（）&lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="1336694741e37c2efe3ec6e6b8bf2710beea656b" translate="yes" xml:space="preserve">
          <source>Stop an app:</source>
          <target state="translated">アプリを停止します。</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="67de91247cb6f05f729a5729c810ee5169375d87" translate="yes" xml:space="preserve">
          <source>String containing comma-separated values</source>
          <target state="translated">カンマで区切られた値を含む文字列</target>
        </trans-unit>
        <trans-unit id="a7703adac3d9d86521f6328a718d53d9e3bf1899" translate="yes" xml:space="preserve">
          <source>String or Array</source>
          <target state="translated">文字列または配列</target>
        </trans-unit>
        <trans-unit id="be0871945f3a0cf8f9c63879bae1d648fdfc8018" translate="yes" xml:space="preserve">
          <source>StrongLoop PM as a systemd service</source>
          <target state="translated">StrongLoop PM を systemd サービスとして利用する</target>
        </trans-unit>
        <trans-unit id="ee376430f32806754027051a398213a171b8d246" translate="yes" xml:space="preserve">
          <source>StrongLoop PM as an Upstart service</source>
          <target state="translated">アップスタートサービスとしてのStrongLoop PM</target>
        </trans-unit>
        <trans-unit id="578e6b53e19303f150bfa5732e00c71b1c184f8a" translate="yes" xml:space="preserve">
          <source>StrongLoop Process Manager</source>
          <target state="translated">StrongLoopプロセスマネージャ</target>
        </trans-unit>
        <trans-unit id="f29707d9893bc17fe5d19ca7cb9ba5744f744a8a" translate="yes" xml:space="preserve">
          <source>StrongLoop Process Manager (StrongLoop PM) is a production process manager for Node.js applications. StrongLoop PM has built-in load balancing, monitoring, and multi-host deployment, and a graphical console. You can use StrongLoop PM for the following tasks:</source>
          <target state="translated">StrongLoop Process Manager (StrongLoop PM)は、Node.js アプリケーションのためのプロダクションプロセスマネージャです。StrongLoop PM は、組み込みのロードバランシング、モニタリング、マルチホストデプロイメント、グラフィカルコンソールを備えています。StrongLoop PM は以下のタスクに使用できます。</target>
        </trans-unit>
        <trans-unit id="44b45f56a502953d4331e3eb571e87a866c04bb5" translate="yes" xml:space="preserve">
          <source>Sub-apps will:</source>
          <target state="translated">サブアプリになります。</target>
        </trans-unit>
        <trans-unit id="988723fca0b1f92286dd3fa5e6c185f434cbe8c7" translate="yes" xml:space="preserve">
          <source>Synchronous functions and methods tie up the executing process until they return. A single call to a synchronous function might return in a few microseconds or milliseconds, however in high-traffic websites, these calls add up and reduce the performance of the app. Avoid their use in production.</source>
          <target state="translated">同期関数やメソッドは、それらが戻るまで実行プロセスを拘束します。同期関数への1回の呼び出しは数マイクロ秒またはミリ秒で戻るかもしれませんが、トラフィックの多いWebサイトでは、これらの呼び出しが増え、アプリのパフォーマンスを低下させます。本番環境での使用は避けてください。</target>
        </trans-unit>
        <trans-unit id="456d2198000ded3f2dc429dc773ea33964d80d31" translate="yes" xml:space="preserve">
          <source>SystemD</source>
          <target state="translated">SystemD</target>
        </trans-unit>
        <trans-unit id="124493a955eff3531dfe489a5cd138ba10cca742" translate="yes" xml:space="preserve">
          <source>SystemD is the default process manager on modern Linux distributions. Running a Node service based on SystemD is very simple. NOTE: This section is based on &lt;a href=&quot;https://www.axllent.org/docs/view/nodejs-service-with-systemd/&quot;&gt;a blog post by Ralph Slooten (@axllent)&lt;/a&gt;.</source>
          <target state="translated">SystemDは、最新のLinuxディストリビューションのデフォルトのプロセスマネージャーです。SystemDに基づくノードサービスの実行は非常に簡単です。注：このセクションは&lt;a href=&quot;https://www.axllent.org/docs/view/nodejs-service-with-systemd/&quot;&gt;、Ralph Slooten（@axllent）によるブログ投稿に&lt;/a&gt;基づいています。</target>
        </trans-unit>
        <trans-unit id="a44a53c54ba77f8a2ae69713f422d9f138899fdb" translate="yes" xml:space="preserve">
          <source>Systemd</source>
          <target state="translated">Systemd</target>
        </trans-unit>
        <trans-unit id="dfc4b18ab42a0ba369543ea528891a7f5db6913f" translate="yes" xml:space="preserve">
          <source>Systemd is a Linux system and service manager. Most major Linux distributions have adopted systemd as their default init system.</source>
          <target state="translated">systemdはLinuxのシステムおよびサービスマネージャです。ほとんどの主要な Linux ディストリビューションでは、デフォルトの init システムとして systemd が採用されています。</target>
        </trans-unit>
        <trans-unit id="f347b94c14fb35d60c7d81d615e7a006098e0875" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;mount&amp;rdquo; path is stripped and is &lt;em&gt;not&lt;/em&gt; visible to the middleware function. The main effect of this feature is that a mounted middleware function may operate without code changes regardless of its &amp;ldquo;prefix&amp;rdquo; pathname.</source>
          <target state="translated">「マウント」パスは取り除かれ、ミドルウェア機能からは見え&lt;em&gt;ません&lt;/em&gt;。この機能の主な効果は、マウントされたミドルウェア関数が、その「プレフィックス」パス名に関係なく、コードを変更しなくても動作することです。</target>
        </trans-unit>
        <trans-unit id="9f9b4406fa85667b917de06916c12d08be62cdfb" translate="yes" xml:space="preserve">
          <source>The &amp;lsquo;&lt;code&gt;.&lt;/code&gt;&amp;rsquo; character can&amp;rsquo;t be used to capture a character in your capturing regexp. For example you can&amp;rsquo;t use &lt;code&gt;'/user-.+/'&lt;/code&gt; to capture &lt;code&gt;'users-gami'&lt;/code&gt;, use &lt;code&gt;[\\s\\S]&lt;/code&gt; or &lt;code&gt;[\\w\\W]&lt;/code&gt; instead (as in &lt;code&gt;'/user-[\\s\\S]+/'&lt;/code&gt;.</source>
          <target state="translated">' &lt;code&gt;.&lt;/code&gt; '文字を使用して、キャプチャする正規表現で文字をキャプチャすることはできません。例えば、あなたは使用できません &lt;code&gt;'/user-.+/'&lt;/code&gt; キャプチャする &lt;code&gt;'users-gami'&lt;/code&gt; 、使用 &lt;code&gt;[\\s\\S]&lt;/code&gt; または &lt;code&gt;[\\w\\W]&lt;/code&gt; の代わりに（ように &lt;code&gt;'/user-[\\s\\S]+/'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="806f45f972b0cb5e2c8b22b7034c2fd8c9e3a37b" translate="yes" xml:space="preserve">
          <source>The 404 response of an unsupported method override attempt was susceptible to cross-site scripting attacks.</source>
          <target state="translated">サポートされていないメソッドのオーバーライドの試みの404レスポンスは、クロスサイトスクリプティング攻撃の影響を受けやすいものでした。</target>
        </trans-unit>
        <trans-unit id="9f310b4e80cc8571e0196cc728be354de5dca8b8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://expressjs.com/en/api.html#req.ip&quot;&gt;req.ip&lt;/a&gt; and &lt;a href=&quot;http://expressjs.com/en/api.html#req.ips&quot;&gt;req.ips&lt;/a&gt; values are populated with the list of addresses from &lt;code&gt;X-Forwarded-For&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://expressjs.com/en/api.html#req.ip&quot;&gt;req.ip&lt;/a&gt;と&lt;a href=&quot;http://expressjs.com/en/api.html#req.ips&quot;&gt;req.ips&lt;/a&gt;値はからアドレスのリストが取り込まれている &lt;code&gt;X-Forwarded-For&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="99cc27e4563e8667a19d300476c8819b3a920c19" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The_replacer_parameter&quot;&gt;'replacer' argument used by `JSON.stringify`&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The_replacer_parameter&quot;&gt;JSON.stringify` `で使用される「代用」引数&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e000f0b12fa4e781f803aff248bd6ae2207e2d42" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The_space_argument&quot;&gt;'space' argument used by `JSON.stringify`&lt;/a&gt;. This is typically set to the number of spaces to use to indent prettified JSON.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The_space_argument&quot;&gt;JSON.stringify` `で使用される「スペース」引数&lt;/a&gt;。これは通常、事前定義されたJSONをインデントするために使用するスペースの数に設定されます。</target>
        </trans-unit>
        <trans-unit id="719f7690e4db0c63a362c9d877b1b4ec945c5a5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Content-Type&lt;/code&gt; response header is set when a callback is selected. However, you may alter this within the callback using methods such as &lt;code&gt;res.set()&lt;/code&gt; or &lt;code&gt;res.type()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Content-Type&lt;/code&gt; コールバックが選択された場合、応答ヘッダーが設定されています。ただし、 &lt;code&gt;res.set()&lt;/code&gt; や &lt;code&gt;res.type()&lt;/code&gt; などのメソッドを使用して、コールバック内でこれを変更できます。</target>
        </trans-unit>
        <trans-unit id="1cb48940d20c0a4670fddb7155d79ad49843e2ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.all()&lt;/code&gt; method is useful for mapping &amp;ldquo;global&amp;rdquo; logic for specific path prefixes or arbitrary matches. For example, if you put the following at the top of all other route definitions, it requires that all routes from that point on require authentication, and automatically load a user. Keep in mind that these callbacks do not have to act as end-points: &lt;code&gt;loadUser&lt;/code&gt; can perform a task, then call &lt;code&gt;next()&lt;/code&gt; to continue matching subsequent routes.</source>
          <target state="translated">&lt;code&gt;app.all()&lt;/code&gt; メソッドは、特定の経路プレフィックスまたは任意のマッチのためのマッピング「グローバル」論理のために有用です。たとえば、他のすべてのルート定義の先頭に以下を配置する場合、そのポイント以降のすべてのルートで認証が必要であり、ユーザーを自動的にロードする必要があります。これらのコールバックはエンドポイントとして機能する必要がないことに &lt;code&gt;loadUser&lt;/code&gt; はタスクを実行し、 &lt;code&gt;next()&lt;/code&gt; を呼び出して後続のルートの照合を続行できます。</target>
        </trans-unit>
        <trans-unit id="4095cbb4de9229fa5a410fcf5c487b65fb556833" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.configure()&lt;/code&gt; function has been removed. Use the &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; or &lt;code&gt;app.get('env')&lt;/code&gt; function to detect the environment and configure the app accordingly.</source>
          <target state="translated">&lt;code&gt;app.configure()&lt;/code&gt; 関数は削除されました。 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; または &lt;code&gt;app.get('env')&lt;/code&gt; 関数を使用して環境を検出し、それに応じてアプリを構成します。</target>
        </trans-unit>
        <trans-unit id="acb546a414f22260abb5b78d7fc6fd20b6d2e059" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.get()&lt;/code&gt; function is automatically called for the HTTP &lt;code&gt;HEAD&lt;/code&gt; method in addition to the &lt;code&gt;GET&lt;/code&gt; method if &lt;code&gt;app.head()&lt;/code&gt; was not called for the path before &lt;code&gt;app.get()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;app.get()&lt;/code&gt; 自動的にHTTPのために呼び出される関数 &lt;code&gt;HEAD&lt;/code&gt; に加え方法 &lt;code&gt;GET&lt;/code&gt; の場合方法 &lt;code&gt;app.head()&lt;/code&gt; の前にパスするために呼び出されなかった &lt;code&gt;app.get()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="96f33f2b20cbe266f1dd0490ba383c791d9f43fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.listen()&lt;/code&gt; method returns an &lt;a href=&quot;https://nodejs.org/api/http.html#http_class_http_server&quot;&gt;http.Server&lt;/a&gt; object and (for HTTP) is a convenience method for the following:</source>
          <target state="translated">&lt;code&gt;app.listen()&lt;/code&gt; メソッドの戻り&lt;a href=&quot;https://nodejs.org/api/http.html#http_class_http_server&quot;&gt;http.Server&lt;/a&gt;オブジェクトおよび（のためのHTTP）は、以下のための便利な方法です。</target>
        </trans-unit>
        <trans-unit id="4cd9436d8fdbfcee064950de3803e909fc7a44eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.locals&lt;/code&gt; object has properties that are local variables within the application.</source>
          <target state="translated">&lt;code&gt;app.locals&lt;/code&gt; のオブジェクトは、アプリケーション内のローカル変数である特性を持っています。</target>
        </trans-unit>
        <trans-unit id="539eb4a461d245199bfc06b59dace03889dd323b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.mountpath&lt;/code&gt; property contains one or more path patterns on which a sub-app was mounted.</source>
          <target state="translated">&lt;code&gt;app.mountpath&lt;/code&gt; プロパティには、サブアプリがマウントされた1つ以上のパスパターンが含まれています。</target>
        </trans-unit>
        <trans-unit id="ce5c0b00a2968479d672439b233f7f4ada488316" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.param(fn)&lt;/code&gt; signature was used for modifying the behavior of the &lt;code&gt;app.param(name, fn)&lt;/code&gt; function. It has been deprecated since v4.11.0, and Express 5 no longer supports it at all.</source>
          <target state="translated">&lt;code&gt;app.param(fn)&lt;/code&gt; 署名は、行動修正のために使用した &lt;code&gt;app.param(name, fn)&lt;/code&gt; 機能。v4.11.0以降は非推奨になっており、Express 5ではサポートされなくなりました。</target>
        </trans-unit>
        <trans-unit id="6f8d512599341d1ffccb646a9d53c3815a9909f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.router&lt;/code&gt; object, which was removed in Express 4, has made a comeback in Express 5. In the new version, this object is a just a reference to the base Express router, unlike in Express 3, where an app had to explicitly load it.</source>
          <target state="translated">&lt;code&gt;app.router&lt;/code&gt; のエクスプレス4で除去したオブジェクトは、アプリケーションが明示的に持っていたエクスプレス3、とは異なり、このオブジェクトはベースExpressルータにだけ参照され、新しいバージョンでエクスプレス5にカムバックをしましたそれをロードします。</target>
        </trans-unit>
        <trans-unit id="322f724b66d8c50047b10c341f72a6c913117c32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app&lt;/code&gt; object conventionally denotes the Express application. Create it by calling the top-level &lt;code&gt;express()&lt;/code&gt; function exported by the Express module:</source>
          <target state="translated">&lt;code&gt;app&lt;/code&gt; オブジェクトは、従来Expressアプリケーションを示しています。Expressモジュールによってエクスポートされた最上位の &lt;code&gt;express()&lt;/code&gt; 関数を呼び出して作成します。</target>
        </trans-unit>
        <trans-unit id="4d2eb7a6d67f2af542c52887819aa5c7a9ea35e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app&lt;/code&gt; object has methods for</source>
          <target state="translated">&lt;code&gt;app&lt;/code&gt; オブジェクトはのための方法を持っています</target>
        </trans-unit>
        <trans-unit id="0942753a74f14391c17666295ada55f0357a2421" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app&lt;/code&gt; returned by &lt;code&gt;express()&lt;/code&gt; is in fact a JavaScript &lt;code&gt;Function&lt;/code&gt;, designed to be passed to Node&amp;rsquo;s HTTP servers as a callback to handle requests. This makes it easy to provide both HTTP and HTTPS versions of your app with the same code base, as the app does not inherit from these (it is simply a callback):</source>
          <target state="translated">&lt;code&gt;app&lt;/code&gt; によって返さ &lt;code&gt;express()&lt;/code&gt; 実際にはJavaScriptのある &lt;code&gt;Function&lt;/code&gt; ハンドルのリクエストへのコールバックとしてノードのHTTPサーバに渡されるように設計され、。これにより、アプリはHTTPとHTTPSの両方のバージョンに同じコードベースを簡単に提供できます。これは、アプリがこれらから継承しないためです（単なるコールバックです）。</target>
        </trans-unit>
        <trans-unit id="3710b539edaf72141eda35322195cb5211c30446" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;body&lt;/code&gt; parameter can be a &lt;code&gt;Buffer&lt;/code&gt; object, a &lt;code&gt;String&lt;/code&gt;, an object, or an &lt;code&gt;Array&lt;/code&gt;. For example:</source>
          <target state="translated">&lt;code&gt;body&lt;/code&gt; パラメータとすることができる &lt;code&gt;Buffer&lt;/code&gt; オブジェクト、 &lt;code&gt;String&lt;/code&gt; 、オブジェクト、または &lt;code&gt;Array&lt;/code&gt; 。例えば：</target>
        </trans-unit>
        <trans-unit id="646ee064f4d7aac435257422c741d543065adf38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encode&lt;/code&gt; option allows you to choose the function used for cookie value encoding. Does not support asynchronous functions.</source>
          <target state="translated">&lt;code&gt;encode&lt;/code&gt; オプションは、クッキー値の符号化に使用する機能を選択することができます。非同期機能はサポートしていません。</target>
        </trans-unit>
        <trans-unit id="dcde2c62c28f339505069f2c78c0d47a8cc0096e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;express-generator&lt;/code&gt; package installs the &lt;code&gt;express&lt;/code&gt; command-line tool. Use the following command to do so:</source>
          <target state="translated">&lt;code&gt;express-generator&lt;/code&gt; パッケージがインストールさ &lt;code&gt;express&lt;/code&gt; コマンドラインツールを。これを行うには、次のコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="fa33f6c71acb5cd1027066747426935e8d3abbf8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http&lt;/code&gt; module is no longer needed, unless you need to directly work with it (socket.io/SPDY/HTTPS). The app can be started by using the &lt;code&gt;app.listen()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;http&lt;/code&gt; 、あなたがそれ（socket.io/SPDY/HTTPS）を直接操作する必要がない限り、モジュールはもはや、必要ありません。 &lt;code&gt;app.listen()&lt;/code&gt; 関数を使用してアプリを起動できます。</target>
        </trans-unit>
        <trans-unit id="d1384e2c629872060ee158c830dde728621143f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if-modified-since&lt;/code&gt; request header is specified and &lt;code&gt;last-modified&lt;/code&gt; request header is equal to or earlier than the &lt;code&gt;modified&lt;/code&gt; response header.</source>
          <target state="translated">&lt;code&gt;if-modified-since&lt;/code&gt; リクエストヘッダが指定され、 &lt;code&gt;last-modified&lt;/code&gt; 要求ヘッダーに等しいかより前 &lt;code&gt;modified&lt;/code&gt; レスポンスヘッダ。</target>
        </trans-unit>
        <trans-unit id="4b139985ad45a6255e1c2f1a60421b2f0fbbd846" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if-none-match&lt;/code&gt; request header is &lt;code&gt;*&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;if-none-match&lt;/code&gt; 要求ヘッダであります &lt;code&gt;*&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef1552976afa7fe055a52d204daed39fa8c98dee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if-none-match&lt;/code&gt; request header, after being parsed into its directives, does not match the &lt;code&gt;etag&lt;/code&gt; response header.</source>
          <target state="translated">&lt;code&gt;if-none-match&lt;/code&gt; 要求ヘッダは、その指示に解析された後、一致していない &lt;code&gt;etag&lt;/code&gt; レスポンスヘッダを。</target>
        </trans-unit>
        <trans-unit id="a2ef33f6b802f3fa64f468732ef34ea70c4a5ab5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;json spaces&lt;/code&gt; application property is disabled by default in Express 4.</source>
          <target state="translated">&lt;code&gt;json spaces&lt;/code&gt; アプリケーションプロパティはエクスプレス4ではデフォルトで無効になっています。</target>
        </trans-unit>
        <trans-unit id="b3f5170b81dcb3fc1fe5d48c64ba8dcc9163863f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxAge&lt;/code&gt; option is a convenience option for setting &amp;ldquo;expires&amp;rdquo; relative to the current time in milliseconds. The following is equivalent to the second example above.</source>
          <target state="translated">&lt;code&gt;maxAge&lt;/code&gt; オプションは、ミリ秒単位で現在の時刻と比較し、「期限が切れる」の設定のための便利なオプションです。以下は、上記の2番目の例に相当します。</target>
        </trans-unit>
        <trans-unit id="ee985fff3d87125feddfb563c4b7ac49b311a5ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mount&lt;/code&gt; event is fired on a sub-app, when it is mounted on a parent app. The parent app is passed to the callback function.</source>
          <target state="translated">&lt;code&gt;mount&lt;/code&gt; それは親アプリに搭載されたときにイベントは、サブアプリに発射されます。親アプリはコールバック関数に渡されます。</target>
        </trans-unit>
        <trans-unit id="39db5f1c6b6deff262849b77da59d5bb09d64b07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter is an object that can have the following properties.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータは、次の特性を持つことができるオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="03e608ced78a8bb15c5e52c1e15cf30f2fdbfdfe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;req.baseUrl&lt;/code&gt; property is similar to the &lt;a href=&quot;#app.mountpath&quot;&gt;mountpath&lt;/a&gt; property of the &lt;code&gt;app&lt;/code&gt; object, except &lt;code&gt;app.mountpath&lt;/code&gt; returns the matched path pattern(s).</source>
          <target state="translated">&lt;code&gt;req.baseUrl&lt;/code&gt; のプロパティは同様である&lt;a href=&quot;#app.mountpath&quot;&gt;MOUNTPATH用&lt;/a&gt;のプロパティ &lt;code&gt;app&lt;/code&gt; 以外は、オブジェクト &lt;code&gt;app.mountpath&lt;/code&gt; リターンパス照合パターン（S）。</target>
        </trans-unit>
        <trans-unit id="97664149cc7813b09c11f3d26721f8d091db904b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;req&lt;/code&gt; (request) and &lt;code&gt;res&lt;/code&gt; (response) are the exact same objects that Node provides, so you can invoke &lt;code&gt;req.pipe()&lt;/code&gt;, &lt;code&gt;req.on('data', callback)&lt;/code&gt;, and anything else you would do without Express involved.</source>
          <target state="translated">&lt;code&gt;req&lt;/code&gt; （リクエスト）および &lt;code&gt;res&lt;/code&gt; あなたが呼び出すことができるように（レスポンス）は、ノードが提供するまったく同じオブジェクトである &lt;code&gt;req.pipe()&lt;/code&gt; 、 &lt;code&gt;req.on('data', callback)&lt;/code&gt; 、そしてあなたはExpressが関与せずに行うと何かを。</target>
        </trans-unit>
        <trans-unit id="d7840a4b9899b464f407be3492025caedf59ca8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;req&lt;/code&gt; object is an enhanced version of Node&amp;rsquo;s own request object and supports all &lt;a href=&quot;https://nodejs.org/api/http.html#http_class_http_incomingmessage&quot;&gt;built-in fields and methods&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;req&lt;/code&gt; オブジェクトは、ノード自身のリクエストオブジェクトの拡張版であり、すべてがサポートする&lt;a href=&quot;https://nodejs.org/api/http.html#http_class_http_incomingmessage&quot;&gt;組み込みのフィールドとメソッド&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f4cef768a6774c9602c48cd9ac1ab6e1dcea3423" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;req&lt;/code&gt; object represents the HTTP request and has properties for the request query string, parameters, body, HTTP headers, and so on. In this documentation and by convention, the object is always referred to as &lt;code&gt;req&lt;/code&gt; (and the HTTP response is &lt;code&gt;res&lt;/code&gt;) but its actual name is determined by the parameters to the callback function in which you&amp;rsquo;re working.</source>
          <target state="translated">&lt;code&gt;req&lt;/code&gt; オブジェクトは、HTTPリクエストを表し、要求のクエリ文字列パラメータ、身体、HTTPヘッダーなどのプロパティを有します。このドキュメントでは、慣例により、オブジェクトは常に &lt;code&gt;req&lt;/code&gt; （およびHTTP応答は &lt;code&gt;res&lt;/code&gt; ）と呼ばれますが、実際の名前は、作業しているコールバック関数のパラメーターによって決まります。</target>
        </trans-unit>
        <trans-unit id="ce00b7b794b62165916a53daadcdc131b5c48602" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;res.sendfile()&lt;/code&gt; function has been replaced by a camel-cased version &lt;code&gt;res.sendFile()&lt;/code&gt; in Express 5.</source>
          <target state="translated">&lt;code&gt;res.sendfile()&lt;/code&gt; 関数は、キャメルケースバージョンに置き換えられている &lt;code&gt;res.sendFile()&lt;/code&gt; エクスプレス5。</target>
        </trans-unit>
        <trans-unit id="665e873d76738ff5cdb789eddd585b08214508f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;res&lt;/code&gt; object is an enhanced version of Node&amp;rsquo;s own response object and supports all &lt;a href=&quot;https://nodejs.org/api/http.html#http_class_http_serverresponse&quot;&gt;built-in fields and methods&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;res&lt;/code&gt; オブジェクトは、ノード自体のレスポンスオブジェクトの拡張版であり、すべてがサポートする&lt;a href=&quot;https://nodejs.org/api/http.html#http_class_http_serverresponse&quot;&gt;組み込みのフィールドとメソッド&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4e86c4c9c4020c1f3800c6056f4d8c2e4e17dca7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;res&lt;/code&gt; object represents the HTTP response that an Express app sends when it gets an HTTP request.</source>
          <target state="translated">&lt;code&gt;res&lt;/code&gt; オブジェクトは、HTTPリクエストを取得するときExpressのアプリが送信するHTTPレスポンスを表します。</target>
        </trans-unit>
        <trans-unit id="da2836d9568d8cc693f28fc9fda795c6af3a7f41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reviver&lt;/code&gt; option is passed directly to &lt;code&gt;JSON.parse&lt;/code&gt; as the second argument. You can find more information on this argument &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter&quot;&gt;in the MDN documentation about JSON.parse&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;reviver&lt;/code&gt; オプションは、に直接渡され &lt;code&gt;JSON.parse&lt;/code&gt; 2番目の引数として。この引数の詳細&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter&quot;&gt;については、JSON.parseに関するMDNドキュメントを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dc3b090da72862a26917330a106d605ca7385cb0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;root&lt;/code&gt; argument specifies the root directory from which to serve static assets. For more information on the &lt;code&gt;options&lt;/code&gt; argument, see &lt;a href=&quot;../index#express.static&quot;&gt;express.static&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;root&lt;/code&gt; 引数は、静的な資産を提供するから、ルートディレクトリを指定します。詳細については &lt;code&gt;options&lt;/code&gt; の引数を参照してください&lt;a href=&quot;../index#express.static&quot;&gt;express.static&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="09ae8335ab9e3498dcb6c17a9a88f87d7bd082f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;root&lt;/code&gt; argument specifies the root directory from which to serve static assets. The function determines the file to serve by combining &lt;code&gt;req.url&lt;/code&gt; with the provided &lt;code&gt;root&lt;/code&gt; directory. When a file is not found, instead of sending a 404 response, it instead calls &lt;code&gt;next()&lt;/code&gt; to move on to the next middleware, allowing for stacking and fall-backs.</source>
          <target state="translated">&lt;code&gt;root&lt;/code&gt; 引数は、静的な資産を提供するから、ルートディレクトリを指定します。この関数は、 &lt;code&gt;req.url&lt;/code&gt; と指定された &lt;code&gt;root&lt;/code&gt; ディレクトリを組み合わせて、提供するファイルを決定します。ファイルが見つからない場合は、404応答を送信するのではなく、代わりに &lt;code&gt;next()&lt;/code&gt; を呼び出して次のミドルウェアに移動し、スタックとフォールバックを可能にします。</target>
        </trans-unit>
        <trans-unit id="06d4fa1ded976d7ba4ea0c31fd91e3a000e303c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;router.METHOD()&lt;/code&gt; methods provide the routing functionality in Express, where METHOD is one of the HTTP methods, such as GET, PUT, POST, and so on, in lowercase. Thus, the actual methods are &lt;code&gt;router.get()&lt;/code&gt;, &lt;code&gt;router.post()&lt;/code&gt;, &lt;code&gt;router.put()&lt;/code&gt;, and so on.</source>
          <target state="translated">&lt;code&gt;router.METHOD()&lt;/code&gt; メソッドは、メソッドが小文字で、そのようなので、上のGET、PUT、POST、およびなどのHTTPメソッドの一つであるエクスプレス、でルーティング機能を提供します。したがって、実際のメソッドは &lt;code&gt;router.get()&lt;/code&gt; 、 &lt;code&gt;router.post()&lt;/code&gt; 、 &lt;code&gt;router.put()&lt;/code&gt; などです。</target>
        </trans-unit>
        <trans-unit id="0f5c090896a67738df95a8ff1ebef6ab21ca885e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;router.get()&lt;/code&gt; function is automatically called for the HTTP &lt;code&gt;HEAD&lt;/code&gt; method in addition to the &lt;code&gt;GET&lt;/code&gt; method if &lt;code&gt;router.head()&lt;/code&gt; was not called for the path before &lt;code&gt;router.get()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;router.get()&lt;/code&gt; 自動的にHTTPのために呼び出される関数 &lt;code&gt;HEAD&lt;/code&gt; に加え方法 &lt;code&gt;GET&lt;/code&gt; の場合法 &lt;code&gt;router.head()&lt;/code&gt; 前のパスのために呼び出されなかった &lt;code&gt;router.get()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b88921f8fbc9d3675fa2dda9005ee9371a119b41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;router.use()&lt;/code&gt; method also supports named parameters so that your mount points for other routers can benefit from preloading using named parameters.</source>
          <target state="translated">&lt;code&gt;router.use()&lt;/code&gt; 他のルータのためのあなたのマウントポイントが名前付きパラメータを使用してプリロードの恩恵を受けることができるように、この方法はまた、名前付きパラメータをサポートしています。</target>
        </trans-unit>
        <trans-unit id="93628b545dd9a8cf446c1702f0dafaac83b43b54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;size&lt;/code&gt; parameter is the maximum size of the resource.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; パラメータは、リソースの最大サイズです。</target>
        </trans-unit>
        <trans-unit id="419eab728395557afd72910235674dc9431b1fb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trust proxy&lt;/code&gt; setting is implemented using the &lt;a href=&quot;https://www.npmjs.com/package/proxy-addr&quot;&gt;proxy-addr&lt;/a&gt; package. For more information, see its documentation.</source>
          <target state="translated">&lt;code&gt;trust proxy&lt;/code&gt; 設定を使用して実装され&lt;a href=&quot;https://www.npmjs.com/package/proxy-addr&quot;&gt;たプロキシ-addrには&lt;/a&gt;パッケージを。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="9e2c34404f445fba4d95e98b4b3a0945269c4bde" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; value may be a single MIME type string (such as &amp;ldquo;application/json&amp;rdquo;), an extension name such as &amp;ldquo;json&amp;rdquo;, a comma-delimited list, or an array. For a list or array, the method returns the &lt;em&gt;best&lt;/em&gt; match (if any).</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 値は、「JSON」、カンマ区切りリスト、またはアレイとして（例えば、「アプリケーション/ JSON」など）は、単一のMIMEタイプ文字列、拡張子名であってもよいです。リストまたは配列の場合、メソッドは&lt;em&gt;最も&lt;/em&gt;一致するものがあればそれを返します。</target>
        </trans-unit>
        <trans-unit id="5cee7f330a71930eb97bb7a298841b534b9d0c11" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;view&lt;/code&gt; argument is a string that is the file path of the view file to render. This can be an absolute path, or a path relative to the &lt;code&gt;views&lt;/code&gt; setting. If the path does not contain a file extension, then the &lt;code&gt;view engine&lt;/code&gt; setting determines the file extension. If the path does contain a file extension, then Express will load the module for the specified template engine (via &lt;code&gt;require()&lt;/code&gt;) and render it using the loaded module&amp;rsquo;s &lt;code&gt;__express&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;view&lt;/code&gt; 引数には、レンダリングするビューファイルのファイルパス文字列です。これは、絶対パス、または &lt;code&gt;views&lt;/code&gt; 設定に対する相対パスにすることができます。パスにファイル拡張子が含まれていない場合、 &lt;code&gt;view engine&lt;/code&gt; 設定によってファイル拡張子が決定されます。パスにファイル拡張子が含まれている場合、Expressは指定されたテンプレートエンジンのモジュールを（ &lt;code&gt;require()&lt;/code&gt; を介して）ロードし、ロードされたモジュールの &lt;code&gt;__express&lt;/code&gt; 関数を使用してレンダリングします。</target>
        </trans-unit>
        <trans-unit id="7764713403915d90175dcfe6fa9815431bfa7fa3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;wrap()&lt;/code&gt; function is a wrapper that catches rejected promises and calls &lt;code&gt;next()&lt;/code&gt; with the error as the first argument. For details, see &lt;a href=&quot;https://strongloop.com/strongblog/async-error-handling-expressjs-es7-promises-generators/#cleaner-code-with-generators&quot;&gt;Asynchronous Error Handling in Express with Promises, Generators and ES7&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;wrap()&lt;/code&gt; 関数は、漁獲量は約束して通話を拒否したことをラッパーである &lt;code&gt;next()&lt;/code&gt; 最初の引数としてエラーと。詳細については、「&lt;a href=&quot;https://strongloop.com/strongblog/async-error-handling-expressjs-es7-promises-generators/#cleaner-code-with-generators&quot;&gt;Promise、ジェネレータ、ES7を使用するExpressでの非同期エラー処理&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="636f2eb8f455afb32588c3b71cd7e3a000c6d4b4" translate="yes" xml:space="preserve">
          <source>The API documentation has explicit entries only for the most popular HTTP methods &lt;code&gt;app.get()&lt;/code&gt;, &lt;code&gt;app.post()&lt;/code&gt;, &lt;code&gt;app.put()&lt;/code&gt;, and &lt;code&gt;app.delete()&lt;/code&gt;. However, the other methods listed above work in exactly the same way.</source>
          <target state="translated">APIドキュメントには、最も人気のあるHTTPメソッド &lt;code&gt;app.get()&lt;/code&gt; 、 &lt;code&gt;app.post()&lt;/code&gt; 、 &lt;code&gt;app.put()&lt;/code&gt; 、および &lt;code&gt;app.delete()&lt;/code&gt; についてのみ明示的なエントリがあります。ただし、上記の他の方法はまったく同じように機能します。</target>
        </trans-unit>
        <trans-unit id="6444e8516fffae4ffd8a27433e5b7e79a09e4281" translate="yes" xml:space="preserve">
          <source>The ETag functionality is implemented using the &lt;a href=&quot;https://www.npmjs.org/package/etag&quot;&gt;etag&lt;/a&gt; package. For more information, see its documentation.</source>
          <target state="translated">ETag機能は、&lt;a href=&quot;https://www.npmjs.org/package/etag&quot;&gt;etag&lt;/a&gt;パッケージを使用して実装されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="aa23fc0be6e7667e622057a6857f7dee3e50b309" translate="yes" xml:space="preserve">
          <source>The Express application object can be referred from the &lt;a href=&quot;#req&quot;&gt;request object&lt;/a&gt; and the &lt;a href=&quot;#res&quot;&gt;response object&lt;/a&gt; as &lt;code&gt;req.app&lt;/code&gt;, and &lt;code&gt;res.app&lt;/code&gt;, respectively.</source>
          <target state="translated">Expressアプリケーション・オブジェクトから参照可能&lt;a href=&quot;#req&quot;&gt;リクエスト・オブジェクト&lt;/a&gt;と&lt;a href=&quot;#res&quot;&gt;レスポンス・オブジェクト&lt;/a&gt;として &lt;code&gt;req.app&lt;/code&gt; 、及び &lt;code&gt;res.app&lt;/code&gt; それぞれ。</target>
        </trans-unit>
        <trans-unit id="d15ee51e33a595f230c9f6ecde552a577aa38791" translate="yes" xml:space="preserve">
          <source>The NODE_ENV environment variable specifies the environment in which an application is running (usually, development or production). One of the simplest things you can do to improve performance is to set NODE_ENV to &amp;ldquo;production.&amp;rdquo;</source>
          <target state="translated">NODE_ENV環境変数は、アプリケーションが実行されている環境（通常、開発または本番）を指定します。パフォーマンスを改善するためにできる最も簡単なことの1つは、NODE_ENVを「本番」に設定することです。</target>
        </trans-unit>
        <trans-unit id="99668da26e842a1fa1567212fe4d4df926fffbba" translate="yes" xml:space="preserve">
          <source>The URL path on which a router instance was mounted.</source>
          <target state="translated">ルータのインスタンスがマウントされた URL パス。</target>
        </trans-unit>
        <trans-unit id="0d61d6b96b69739da66dd508a20eb3f5655e2ece" translate="yes" xml:space="preserve">
          <source>The `trust proxy` setting is implemented using the &lt;a href=&quot;https://www.npmjs.org/package/proxy-addr&quot;&gt;proxy-addr&lt;/a&gt; package. For more information, see its documentation.</source>
          <target state="translated">`trust proxy`設定は、&lt;a href=&quot;https://www.npmjs.org/package/proxy-addr&quot;&gt;proxy-addr&lt;/a&gt;パッケージを使用して実装されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="71a453ec834b9e12e465dd375ed1853982d627e6" translate="yes" xml:space="preserve">
          <source>The above example has a couple of trivial statements from the &lt;code&gt;readFile&lt;/code&gt; call. If &lt;code&gt;readFile&lt;/code&gt; causes an error, then it passes the error to Express, otherwise you quickly return to the world of synchronous error handling in the next handler in the chain. Then, the example above tries to process the data. If this fails then the synchronous error handler will catch it. If you had done this processing inside the &lt;code&gt;readFile&lt;/code&gt; callback then the application might exit and the Express error handlers would not run.</source>
          <target state="translated">上記の例には、 &lt;code&gt;readFile&lt;/code&gt; 呼び出しからの簡単なステートメントがいくつかあります。 &lt;code&gt;readFile&lt;/code&gt; がエラーの原因となる場合は、エラーをExpressに渡します。それ以外の場合は、チェーン内の次のハンドラーの同期エラー処理の世界にすばやく戻ります。次に、上記の例はデータの処理を試みます。これが失敗すると、同期エラーハンドラーがキャッチします。 &lt;code&gt;readFile&lt;/code&gt; コールバック内でこの処理を行った場合、アプリケーションが終了してExpressエラーハンドラーが実行されない可能性があります。</target>
        </trans-unit>
        <trans-unit id="e6c6ef511007a581b79e3699b304a80c0405aac7" translate="yes" xml:space="preserve">
          <source>The above example uses a &lt;code&gt;try...catch&lt;/code&gt; block to catch errors in the asynchronous code and pass them to Express. If the &lt;code&gt;try...catch&lt;/code&gt; block were omitted, Express would not catch the error since it is not part of the synchronous handler code.</source>
          <target state="translated">上記の例では、 &lt;code&gt;try...catch&lt;/code&gt; ブロックを使用して非同期コードのエラーをキャッチし、Expressに渡します。場合は &lt;code&gt;try...catch&lt;/code&gt; ブロックが省略されたそれは、同期ハンドラのコードの一部ではないので、Expressはエラーをキャッチしません。</target>
        </trans-unit>
        <trans-unit id="d2eb5b722580e926cc275f013178b13b598d9fe9" translate="yes" xml:space="preserve">
          <source>The accompanying version 3 &lt;code&gt;package.json&lt;/code&gt; file might look something like this:</source>
          <target state="translated">付随するバージョン3の &lt;code&gt;package.json&lt;/code&gt; ファイルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="f9285091cb60a2f048078960f37f9793691fe017" translate="yes" xml:space="preserve">
          <source>The app now uses the &lt;code&gt;requestTime&lt;/code&gt; middleware function. Also, the callback function of the root path route uses the property that the middleware function adds to &lt;code&gt;req&lt;/code&gt; (the request object).</source>
          <target state="translated">アプリは現在、 &lt;code&gt;requestTime&lt;/code&gt; ミドルウェア機能を使用しています。また、ルートパスルートのコールバック関数は、ミドルウェア関数が &lt;code&gt;req&lt;/code&gt; （リクエストオブジェクト）に追加するプロパティを使用します。</target>
        </trans-unit>
        <trans-unit id="4f592327481abe53c8da8a91bec1c5299cd0d0f4" translate="yes" xml:space="preserve">
          <source>The app structure created by the generator is just one of many ways to structure Express apps. Feel free to use this structure or modify it to best suit your needs.</source>
          <target state="translated">ジェネレーターによって作成されたアプリ構造は、Expressアプリを構造化する多くの方法の1つにすぎません。この構造を自由に使用したり、ニーズに合わせて変更したりすることができます。</target>
        </trans-unit>
        <trans-unit id="4f3dc7ac408979ce55e54c5e6f6011531c7891e1" translate="yes" xml:space="preserve">
          <source>The app will now be able to handle requests to &lt;code&gt;/birds&lt;/code&gt; and &lt;code&gt;/birds/about&lt;/code&gt;, as well as call the &lt;code&gt;timeLog&lt;/code&gt; middleware function that is specific to the route.</source>
          <target state="translated">これで、アプリは &lt;code&gt;/birds&lt;/code&gt; および &lt;code&gt;/birds/about&lt;/code&gt; へのリクエストを処理し、ルートに固有の &lt;code&gt;timeLog&lt;/code&gt; ミドルウェア関数を呼び出すことができるようになります。</target>
        </trans-unit>
        <trans-unit id="43564ee35dc45456553e061cd72abe65409e3b07" translate="yes" xml:space="preserve">
          <source>The app will now be able to handle requests to the &lt;code&gt;/birds&lt;/code&gt; and &lt;code&gt;/birds/about&lt;/code&gt; paths, and will call the &lt;code&gt;timeLog&lt;/code&gt; middleware that is specific to the route.</source>
          <target state="translated">これで、アプリは &lt;code&gt;/birds&lt;/code&gt; および &lt;code&gt;/birds/about&lt;/code&gt; パスへのリクエストを処理できるようになり、ルートに固有の &lt;code&gt;timeLog&lt;/code&gt; ミドルウェアを呼び出します。</target>
        </trans-unit>
        <trans-unit id="01ce441d028bb19f6dcd18f3298cb4ad9ec6242c" translate="yes" xml:space="preserve">
          <source>The application property &lt;code&gt;subdomain offset&lt;/code&gt;, which defaults to 2, is used for determining the beginning of the subdomain segments. To change this behavior, change its value using &lt;a href=&quot;index#app.set&quot;&gt;app.set&lt;/a&gt;.</source>
          <target state="translated">アプリケーションプロパティの &lt;code&gt;subdomain offset&lt;/code&gt; （デフォルトは2）は、サブドメインセグメントの開始を決定するために使用されます。この動作を変更するには、&lt;a href=&quot;index#app.set&quot;&gt;app.set&lt;/a&gt;を使用してその値を変更します。</target>
        </trans-unit>
        <trans-unit id="62fc2cf45f2b0723ecbe32d7594f5536c451bd6f" translate="yes" xml:space="preserve">
          <source>The behavior of the &lt;code&gt;app.param(name, callback)&lt;/code&gt; method can be altered entirely by passing only a function to &lt;code&gt;app.param()&lt;/code&gt;. This function is a custom implementation of how &lt;code&gt;app.param(name, callback)&lt;/code&gt; should behave - it accepts two parameters and must return a middleware.</source>
          <target state="translated">&lt;code&gt;app.param()&lt;/code&gt; に関数のみを渡すことにより、 &lt;code&gt;app.param(name, callback)&lt;/code&gt; メソッドの動作を完全に変更できます。この関数は、 &lt;code&gt;app.param(name, callback)&lt;/code&gt; 動作のカスタム実装です。2つのパラメーターを受け入れ、ミドルウェアを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="1bb9429ca0b9b2b5fbe9b1561cd435ee0baa0be6" translate="yes" xml:space="preserve">
          <source>The behavior of the &lt;code&gt;router.param(name, callback)&lt;/code&gt; method can be altered entirely by passing only a function to &lt;code&gt;router.param()&lt;/code&gt;. This function is a custom implementation of how &lt;code&gt;router.param(name, callback)&lt;/code&gt; should behave - it accepts two parameters and must return a middleware.</source>
          <target state="translated">&lt;code&gt;router.param()&lt;/code&gt; に関数のみを渡すことにより、 &lt;code&gt;router.param(name, callback)&lt;/code&gt; メソッドの動作を完全に変更できます。この関数は &lt;code&gt;router.param(name, callback)&lt;/code&gt; 動作のカスタム実装です。2つのパラメーターを受け入れ、ミドルウェアを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="2579c2a1743afc4e5330236fc98952eed78d1243" translate="yes" xml:space="preserve">
          <source>The behavior of this method can become very complicated in complex cases of mounted apps: it is usually better to use &lt;a href=&quot;#req.baseUrl&quot;&gt;req.baseUrl&lt;/a&gt; to get the canonical path of the app.</source>
          <target state="translated">マウントされたアプリの複雑なケースでは、このメソッドの動作が非常に複雑になる可能性があります。通常、&lt;a href=&quot;#req.baseUrl&quot;&gt;req.baseUrl&lt;/a&gt;を使用してアプリの正規パスを取得することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="a82646d60479b16dff5ceac35aff1e284b2a3487" translate="yes" xml:space="preserve">
          <source>The built-in Express middleware functions &lt;code&gt;express.favicon&lt;/code&gt;, &lt;code&gt;express.logger&lt;/code&gt;, &lt;code&gt;express.methodOverride&lt;/code&gt;, &lt;code&gt;express.session&lt;/code&gt;, &lt;code&gt;express.bodyParser&lt;/code&gt; and &lt;code&gt;express.errorHandler&lt;/code&gt; are no longer available on the &lt;code&gt;express&lt;/code&gt; object. You must install their alternatives manually and load them in the app.</source>
          <target state="translated">組み込みのExpressミドルウェア関数 &lt;code&gt;express.favicon&lt;/code&gt; 、 &lt;code&gt;express.logger&lt;/code&gt; 、 &lt;code&gt;express.methodOverride&lt;/code&gt; 、 &lt;code&gt;express.session&lt;/code&gt; 、 &lt;code&gt;express.bodyParser&lt;/code&gt; 、および &lt;code&gt;express.errorHandler&lt;/code&gt; は、 &lt;code&gt;express&lt;/code&gt; オブジェクトでは使用できなくなりました。代替を手動でインストールし、アプリにロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="76f8b1a7ae101b67ea30400fb9fa71250d9c3e0e" translate="yes" xml:space="preserve">
          <source>The characters &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, and &lt;code&gt;()&lt;/code&gt; are subsets of their regular expression counterparts. The hyphen (&lt;code&gt;-&lt;/code&gt;) and the dot (&lt;code&gt;.&lt;/code&gt;) are interpreted literally by string-based paths.</source>
          <target state="translated">キャラクター &lt;code&gt;?&lt;/code&gt; 、 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;*&lt;/code&gt; 、および &lt;code&gt;()&lt;/code&gt; は、対応する正規表現のサブセットです。ハイフン（ &lt;code&gt;-&lt;/code&gt; ）とドット（ &lt;code&gt;.&lt;/code&gt; ）は、文字列ベースのパスによって文字どおりに解釈されます。</target>
        </trans-unit>
        <trans-unit id="8c4f6de1b84ea0bf3aa72ffef8deb21d304078da" translate="yes" xml:space="preserve">
          <source>The command-line tool to generate an Express app is still &lt;code&gt;express&lt;/code&gt;, but to upgrade to the new version, you must uninstall the Express 3 app generator and then install the new &lt;code&gt;express-generator&lt;/code&gt;.</source>
          <target state="translated">Expressのアプリを生成するためのコマンドラインツールはまだある &lt;code&gt;express&lt;/code&gt; が、新しいバージョンにアップグレードして、あなたはエクスプレス3アプリジェネレータをアンインストールしてから、新しいインストールする必要があり &lt;code&gt;express-generator&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dd9fb68dfb14081773583c810d61b5264d8ccf3d" translate="yes" xml:space="preserve">
          <source>The default engine extension to use when omitted.</source>
          <target state="translated">省略時に使用するデフォルトのエンジン拡張子。</target>
        </trans-unit>
        <trans-unit id="35a1f0c09848d7dbf92d2352ae16557dd15abac0" translate="yes" xml:space="preserve">
          <source>The default error handler</source>
          <target state="translated">デフォルトのエラーハンドラ</target>
        </trans-unit>
        <trans-unit id="8f34da9ad01a9672e52fd904ed294264c2272634" translate="yes" xml:space="preserve">
          <source>The dependency &lt;code&gt;debug&lt;/code&gt; has been updated to address a &lt;a href=&quot;https://snyk.io/vuln/npm:debug:20170905&quot;&gt;vulnerability&lt;/a&gt;, but this issue does not impact Express.</source>
          <target state="translated">依存関係の &lt;code&gt;debug&lt;/code&gt; は&lt;a href=&quot;https://snyk.io/vuln/npm:debug:20170905&quot;&gt;脆弱性&lt;/a&gt;に対処するために更新されましたが、この問題はExpressには影響しません。</target>
        </trans-unit>
        <trans-unit id="73d1aa9cf8ca71183bc46c337b50290348e33d58" translate="yes" xml:space="preserve">
          <source>The dependency &lt;code&gt;forwarded&lt;/code&gt; has been updated to address a &lt;a href=&quot;https://nodesecurity.io/advisories/527&quot;&gt;vulnerability&lt;/a&gt;. This may affect your application if the following APIs are used: &lt;code&gt;req.host&lt;/code&gt;, &lt;code&gt;req.hostname&lt;/code&gt;, &lt;code&gt;req.ip&lt;/code&gt;, &lt;code&gt;req.ips&lt;/code&gt;, &lt;code&gt;req.protocol&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;forwarded&lt;/code&gt; された依存関係は、&lt;a href=&quot;https://nodesecurity.io/advisories/527&quot;&gt;脆弱性&lt;/a&gt;に対処するために更新されました。これは、次のAPIが使用されている場合にアプリケーションに影響を与える可能性があります： &lt;code&gt;req.host&lt;/code&gt; 、 &lt;code&gt;req.hostname&lt;/code&gt; 、 &lt;code&gt;req.ip&lt;/code&gt; 、 &lt;code&gt;req.ips&lt;/code&gt; 、 &lt;code&gt;req.protocol&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a1bafdd5d44eb8e729df74bd9f9dedb3d2e237fa" translate="yes" xml:space="preserve">
          <source>The dependency &lt;code&gt;fresh&lt;/code&gt; has been updated to address a &lt;a href=&quot;https://nodesecurity.io/advisories/526&quot;&gt;vulnerability&lt;/a&gt;. This will affect your application if the following APIs are used: &lt;code&gt;express.static&lt;/code&gt;, &lt;code&gt;req.fresh&lt;/code&gt;, &lt;code&gt;res.json&lt;/code&gt;, &lt;code&gt;res.jsonp&lt;/code&gt;, &lt;code&gt;res.send&lt;/code&gt;, &lt;code&gt;res.sendfile&lt;/code&gt;&lt;code&gt;res.sendFile&lt;/code&gt;, &lt;code&gt;res.sendStatus&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://nodesecurity.io/advisories/526&quot;&gt;脆弱性&lt;/a&gt;に対処するために、依存関係が &lt;code&gt;fresh&lt;/code&gt; 更新されました。これは、次のAPIが使用されている場合にアプリケーションに影響します： &lt;code&gt;express.static&lt;/code&gt; 、 &lt;code&gt;req.fresh&lt;/code&gt; 、 &lt;code&gt;res.json&lt;/code&gt; 、 &lt;code&gt;res.jsonp&lt;/code&gt; 、 &lt;code&gt;res.send&lt;/code&gt; 、 &lt;code&gt;res.sendfile&lt;/code&gt; &lt;code&gt;res.sendFile&lt;/code&gt; 、 &lt;code&gt;res.sendStatus&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="12ad23e58a9efcc0e4015d2084a124afe512cc11" translate="yes" xml:space="preserve">
          <source>The dependency &lt;code&gt;mime&lt;/code&gt; has been updated to address a &lt;a href=&quot;https://nodesecurity.io/advisories/535&quot;&gt;vulnerability&lt;/a&gt;, but this issue does not impact Express.</source>
          <target state="translated">依存関係の &lt;code&gt;mime&lt;/code&gt; は&lt;a href=&quot;https://nodesecurity.io/advisories/535&quot;&gt;脆弱性&lt;/a&gt;に対処するために更新されましたが、この問題はExpressには影響しません。</target>
        </trans-unit>
        <trans-unit id="8c7c7fe87b35b93cf83d36b993636f41764188b0" translate="yes" xml:space="preserve">
          <source>The dependency &lt;code&gt;ms&lt;/code&gt; has been updated to address a &lt;a href=&quot;https://snyk.io/vuln/npm:ms:20170412&quot;&gt;vulnerability&lt;/a&gt;. This may affect your application if untrusted string input is passed to the &lt;code&gt;maxAge&lt;/code&gt; option in the following APIs: &lt;code&gt;express.static&lt;/code&gt;, &lt;code&gt;res.sendfile&lt;/code&gt;, and &lt;code&gt;res.sendFile&lt;/code&gt;.</source>
          <target state="translated">依存関係 &lt;code&gt;ms&lt;/code&gt; が更新され、&lt;a href=&quot;https://snyk.io/vuln/npm:ms:20170412&quot;&gt;脆弱性&lt;/a&gt;に対処しています。信頼できない文字列入力が次のAPIの &lt;code&gt;maxAge&lt;/code&gt; オプションに渡された場合、これはアプリケーションに影響を与える可能性があります： &lt;code&gt;express.static&lt;/code&gt; 、 &lt;code&gt;res.sendfile&lt;/code&gt; 、および &lt;code&gt;res.sendFile&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fb8f9b239e31ccbd89b7d9750312cd9c985a89af" translate="yes" xml:space="preserve">
          <source>The dependency &lt;code&gt;qs&lt;/code&gt; has been updated to address a &lt;a href=&quot;https://snyk.io/vuln/npm:qs:20170213&quot;&gt;vulnerability&lt;/a&gt;, but this issue does not impact Express. Updating to 4.15.2 is a good practice, but not required to address the vulnerability.</source>
          <target state="translated">依存関係 &lt;code&gt;qs&lt;/code&gt; は&lt;a href=&quot;https://snyk.io/vuln/npm:qs:20170213&quot;&gt;脆弱性&lt;/a&gt;に対処するために更新されましたが、この問題はExpressに影響しません。4.15.2に更新することは良い習慣ですが、脆弱性に対処するために必須ではありません。</target>
        </trans-unit>
        <trans-unit id="f6ffa71268873e9f1db06246219951b6250e7a8c" translate="yes" xml:space="preserve">
          <source>The dependency &lt;code&gt;send&lt;/code&gt; has been updated to provide a protection against a &lt;a href=&quot;https://nodejs.org/en/blog/vulnerability/september-2017-path-validation/&quot;&gt;Node.js 8.5.0 vulnerability&lt;/a&gt;. This only impacts running Express on the specific Node.js version 8.5.0.</source>
          <target state="translated">依存関係の &lt;code&gt;send&lt;/code&gt; が更新され、&lt;a href=&quot;https://nodejs.org/en/blog/vulnerability/september-2017-path-validation/&quot;&gt;Node.js 8.5.0の脆弱性&lt;/a&gt;に対する保護が提供されます。これは、特定のNode.jsバージョン8.5.0でExpressを実行する場合にのみ影響します。</target>
        </trans-unit>
        <trans-unit id="0d5b14bebd29280c1f0b59553c644dc20ce5f43e" translate="yes" xml:space="preserve">
          <source>The example above is actually a working server: Go ahead and click on the URL shown. You&amp;rsquo;ll get a response, with real-time logs on the page, and any changes you make will be reflected in real time. This is powered by &lt;a href=&quot;https://runkit.com&quot;&gt;RunKit&lt;/a&gt;, which provides an interactive JavaScript playground connected to a complete Node environment that runs in your web browser. Below are instructions for running the same app on your local machine.</source>
          <target state="translated">上記の例は実際に機能するサーバーです。先に進み、表示されたURLをクリックしてください。ページにリアルタイムのログが記録された応答が返され、加えた変更はリアルタイムで反映されます。これは、Webブラウザーで実行される完全なノード環境に接続されたインタラクティブなJavaScriptプレイグラウンドを提供する&lt;a href=&quot;https://runkit.com&quot;&gt;RunKit&lt;/a&gt;を利用しています。以下は、ローカルマシンで同じアプリを実行するための手順です。</target>
        </trans-unit>
        <trans-unit id="67d80e19feb2bea29bde8221fad6260bc0e6dcdf" translate="yes" xml:space="preserve">
          <source>The extended query parser is based on &lt;a href=&quot;https://www.npmjs.org/package/qs&quot;&gt;qs&lt;/a&gt;.</source>
          <target state="translated">拡張クエリパーサーは&lt;a href=&quot;https://www.npmjs.org/package/qs&quot;&gt;qsに&lt;/a&gt;基づいています。</target>
        </trans-unit>
        <trans-unit id="9d064391c2c58b65cec66e432fa3cce2c567f934" translate="yes" xml:space="preserve">
          <source>The first parameter of this function is the name of the URL parameter that should be captured, the second parameter can be any JavaScript object which might be used for returning the middleware implementation.</source>
          <target state="translated">この関数の最初のパラメータはキャプチャされるべきURLパラメータの名前で、2番目のパラメータはミドルウェアの実装を返すために使用される可能性のある任意のJavaScriptオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="5e67447c702b1616d7cb4807161e65e722cfa2e4" translate="yes" xml:space="preserve">
          <source>The following are some examples of JSONP responses using the same code:</source>
          <target state="translated">同じコードを使用したJSONPレスポンスの例を以下に示します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
