<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="">
    <body>
      <group id="">
        <trans-unit id="409d7999d545c26c8787177f10b73473b0782ab4" translate="yes" xml:space="preserve">
          <source>The stream resource being filtered. Maybe available only during &lt;strong&gt;filter()&lt;/strong&gt; calls when the &lt;em&gt;closing&lt;/em&gt; parameter is set to &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be09be5ed5bfe98f45c6451fc7d4c09a9fa06ddb" translate="yes" xml:space="preserve">
          <source>The stream resource to import.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0328129a15520acb1dc37b506b6926ca6b30c369" translate="yes" xml:space="preserve">
          <source>The stream resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc5cbe9b76a39577e56dcaa66f33e9221210926" translate="yes" xml:space="preserve">
          <source>The stream to check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8bb35ef5ff1799316352d7513cbe652969633ec" translate="yes" xml:space="preserve">
          <source>The stream will by default be opened in blocking mode. You can switch it to non-blocking mode by using &lt;a href=&quot;function.stream-set-blocking&quot;&gt;stream_set_blocking()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e9f4bf290ef736d20f530a2a7cd535bbceb668" translate="yes" xml:space="preserve">
          <source>The stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f52c30ed3b6b3964c050008d72f28437a31d03d2" translate="yes" xml:space="preserve">
          <source>The streamWrapper class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ef315aea17b1cd2e80f92285002b9df46bfba8" translate="yes" xml:space="preserve">
          <source>The streams listed in the &lt;code&gt;except&lt;/code&gt; array will be watched for high priority exceptional (&quot;out-of-band&quot;) data arriving.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21e34c62344679cd272d4dd74bfac8c65d71c08d" translate="yes" xml:space="preserve">
          <source>The streams listed in the &lt;code&gt;read&lt;/code&gt; array will be watched to see if characters become available for reading (more precisely, to see if a read will not block - in particular, a stream resource is also ready on end-of-file, in which case an &lt;a href=&quot;function.fread&quot;&gt;fread()&lt;/a&gt; will return a zero length string).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba78bf37e2f1cfce486ebda9a40e74914e0c8e5" translate="yes" xml:space="preserve">
          <source>The streams listed in the &lt;code&gt;write&lt;/code&gt; array will be watched to see if a write will not block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18822dcb8b0bc3c64136bcaebcbf45df0cd6a713" translate="yes" xml:space="preserve">
          <source>The string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd4bf36eed14d29cca98ca5d0517759f3236c5a3" translate="yes" xml:space="preserve">
          <source>The string &lt;code&gt;ident&lt;/code&gt; is added to each message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="666320eac4c2862d6da00baef7321ca36a078da6" translate="yes" xml:space="preserve">
          <source>The string being measured for length. It must be a valid UTF-8 string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b44441f173de76c759352697d30b0944239e031" translate="yes" xml:space="preserve">
          <source>The string containing a serialized format of the hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cbb3af66ef1ff0b3434ecd4ffe7a14ca40586b4" translate="yes" xml:space="preserve">
          <source>The string containing a serialized format of the set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f9c40d099d94cee309c3c2e403b4a58c8dceae0" translate="yes" xml:space="preserve">
          <source>The string containing every disallowed character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="769b00ce997589db7b149bb913d868714c13c12d" translate="yes" xml:space="preserve">
          <source>The string containing the &quot;Accept-Language&quot; header according to format in RFC 2616.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ef3a7f43e9aa0e1fb7a75f0874c6ccc6bed928a" translate="yes" xml:space="preserve">
          <source>The string containing the XML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de37b245cf40788615b2d8d4cebe3a463cbd51c" translate="yes" xml:space="preserve">
          <source>The string for match is specified by &lt;a href=&quot;function.mb-ereg-search-init&quot;&gt;mb_ereg_search_init()&lt;/a&gt;. If it is not specified, the previous one will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8f56a8ebce910b47e55bb5cbec57cfff25cd275" translate="yes" xml:space="preserve">
          <source>The string from which to get the first occurrence of &lt;code&gt;needle&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="780bf974fc94d0740979b5b88b32de1080a6387c" translate="yes" xml:space="preserve">
          <source>The string from which to get the last occurrence of &lt;code&gt;needle&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9723e84f0be87e3adb1a717405c6466cb9c15c71" translate="yes" xml:space="preserve">
          <source>The string from which to get the position of the first occurrence of &lt;code&gt;needle&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d93c6a92a6da9a65b71391c3e041e44cc61f06a5" translate="yes" xml:space="preserve">
          <source>The string from which to get the position of the last occurrence of &lt;code&gt;needle&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e2f577224557ca7553a7f6672eca7d731d98015" translate="yes" xml:space="preserve">
          <source>The string of data used to generate the signature previously</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251808742ee5e6eee9a0c313e4a7518d1395f3e7" translate="yes" xml:space="preserve">
          <source>The string of data you wish to sign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2930ec614c7209bdb35d349fbe62ef4a9688145b" translate="yes" xml:space="preserve">
          <source>The string or an array with strings to replace. If this parameter is a string and the &lt;code&gt;pattern&lt;/code&gt; parameter is an array, all patterns will be replaced by that string. If both &lt;code&gt;pattern&lt;/code&gt; and &lt;code&gt;replacement&lt;/code&gt; parameters are arrays, each &lt;code&gt;pattern&lt;/code&gt; will be replaced by the &lt;code&gt;replacement&lt;/code&gt; counterpart. If there are fewer elements in the &lt;code&gt;replacement&lt;/code&gt; array than in the &lt;code&gt;pattern&lt;/code&gt; array, any extra &lt;code&gt;pattern&lt;/code&gt;s will be replaced by an empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="912c6793101aa26a51751c0bde18295811c1875d" translate="yes" xml:space="preserve">
          <source>The string or an array with strings to search and replace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2f97617594621742a6d708b363ebc3d7115c289" translate="yes" xml:space="preserve">
          <source>The string or array being searched and replaced on, otherwise known as the &lt;em&gt;haystack&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e965cc50a1563ed9845b2c494726e910a82b1c7" translate="yes" xml:space="preserve">
          <source>The string representation of the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59127e9755e330cf94878e86f107d5d81ce4bfee" translate="yes" xml:space="preserve">
          <source>The string that defines the query to be prepared and executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb971ef163336f3baf59e1daf9eabde52df72fce" translate="yes" xml:space="preserve">
          <source>The string that is to be written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9ff7437bc817aec7502a22ce004e6db4a9b9880" translate="yes" xml:space="preserve">
          <source>The string to append.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45d9c7c720a1824c711c8aff8756cf2c3422b1e3" translate="yes" xml:space="preserve">
          <source>The string to be chunked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b05c8a3c4fcc8f3b2480f5c65b004019c67040" translate="yes" xml:space="preserve">
          <source>The string to be converted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d237dace87486df3e1e94a3567f5633a741bd3e0" translate="yes" xml:space="preserve">
          <source>The string to be decoded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bc0050b5fd17772f7392f81ec7ce3fba8d5691f" translate="yes" xml:space="preserve">
          <source>The string to be encoded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4429c90f63ec55be6f389a211c538ec7cfe2458" translate="yes" xml:space="preserve">
          <source>The string to be escaped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d1c7a9715d43a0389a5a46cd2bf230ae893f7e7" translate="yes" xml:space="preserve">
          <source>The string to be hashed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a51f550de26253504ea20d378e50cdaae98d9be" translate="yes" xml:space="preserve">
          <source>The string to be measured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1a189671abe82f7d50766e934604dff2f15daaf" translate="yes" xml:space="preserve">
          <source>The string to be quoted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f34da3a71beeb0394c5b2ce77a22f47454f4eb4" translate="yes" xml:space="preserve">
          <source>The string to be repeated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a95c254dad5f3b9e30a88df3bea22359c7abbed0" translate="yes" xml:space="preserve">
          <source>The string to be reversed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c23dd7fe323678be2e599a6fad3940633b1b7452" translate="yes" xml:space="preserve">
          <source>The string to be transformed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2261168c5f5c8713c5b6dd17b06a3ec91d35c8e" translate="yes" xml:space="preserve">
          <source>The string to be unescaped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b66027b887167cf431775b359da8e35538795403" translate="yes" xml:space="preserve">
          <source>The string to be written to the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69247258225abb70b1037bd6689a3ecea9762c5f" translate="yes" xml:space="preserve">
          <source>The string to be written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c1ead79874f487729e4d1d3e187809c31439926" translate="yes" xml:space="preserve">
          <source>The string to compress.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d61753871fbe447823ffc5f65e7fef77eef48f7a" translate="yes" xml:space="preserve">
          <source>The string to convert.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b937bbc7005ed347df9fefe128290b88cb139ff" translate="yes" xml:space="preserve">
          <source>The string to decode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="817c7e44eb809254c3a475e52ea02152eb8ce2ad" translate="yes" xml:space="preserve">
          <source>The string to decompress.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1b72db40af3d5705f74879b8685c5189e1b8630" translate="yes" xml:space="preserve">
          <source>The string to draw</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df29d873157cabf71e304597770840ee7dbb5213" translate="yes" xml:space="preserve">
          <source>The string to examine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c134cfe8b3ba6e26bfb8d7ed39b4c1c73e7aa16" translate="yes" xml:space="preserve">
          <source>The string to find in &lt;code&gt;haystack&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f37537c65f235ef96a37e3331e4e2520a13f668a" translate="yes" xml:space="preserve">
          <source>The string to find in &lt;code&gt;haystack&lt;/code&gt;. In contrast with &lt;a href=&quot;function.strpos&quot;&gt;strpos()&lt;/a&gt;, numeric values are not applied as the ordinal value of a character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f2c09fda1f920a8b7e08d767bdeae6e473db9bb" translate="yes" xml:space="preserve">
          <source>The string to insert.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e911cdf050731ca1ed755cdfe47a19ea5d6ce619" translate="yes" xml:space="preserve">
          <source>The string to look for. Must be valid UTF-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9af6c74715770efa196d35760b6a429c144df3f" translate="yes" xml:space="preserve">
          <source>The string to look in. Must be valid UTF-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="266951b87f2d50697e3a0dfa74e395a3cb2d2c36" translate="yes" xml:space="preserve">
          <source>The string to parse (e.g. returned from &lt;a href=&quot;function.strftime&quot;&gt;strftime()&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb38b69d0ead021a927f63709a5fa05f23a7078b" translate="yes" xml:space="preserve">
          <source>The string to parse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d71f3df0da8c4412aa56262d9391da922ab9857e" translate="yes" xml:space="preserve">
          <source>The string to prepend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d27d4da00074b1a5b79ea221514ba4cf5d16a9" translate="yes" xml:space="preserve">
          <source>The string to produce the key from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86b147ec7c8791fc926e30a4491535a4e1ad5399" translate="yes" xml:space="preserve">
          <source>The string to search in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4794663a199236399f17275e93fbe0ec77d562dc" translate="yes" xml:space="preserve">
          <source>The string to search in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aeef6aff2170af6e67f45850d146cafc1b145e0" translate="yes" xml:space="preserve">
          <source>The string to write.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26bf73b95f68e96a40a0c98e75def4b4a51e3cbb" translate="yes" xml:space="preserve">
          <source>The string where &lt;code&gt;char_list&lt;/code&gt; is looked for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d65c1990193a434c3e3e470ed3079cc41b3cc146" translate="yes" xml:space="preserve">
          <source>The string with which the range must be replaced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584a7865d2cd5677fbf0f6077a1e49cbf9f4e4bd" translate="yes" xml:space="preserve">
          <source>The string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad00d58e9d30553a1eb85cb7bd45fa719977dfa" translate="yes" xml:space="preserve">
          <source>The strings will be compared using the options already specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a058d9dc4569df5099eec723448f483a01b4902b" translate="yes" xml:space="preserve">
          <source>The stripped source code will be returned on success, or an empty string on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fbf0e02e0acfe936ad2757cf9ab2d2fcea3bd2a" translate="yes" xml:space="preserve">
          <source>The structure of the array is as follows. The attribute index is converted to lowercase. (Attributes are case-insensitive for directory servers, but not when used as array indices.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a6d6e8d7282066da949f03df890b4e4f1b22ad5" translate="yes" xml:space="preserve">
          <source>The structure of the ini file is the same as the &lt;var&gt;php.ini&lt;/var&gt;'s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dd2b21f8f5e8280009f27794773645d9880efcc" translate="yes" xml:space="preserve">
          <source>The structure of the ini string is the same as the &lt;var&gt;php.ini&lt;/var&gt;'s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ca3c19b8c8a9a6be963d3bd98fd0da6112a9e9" translate="yes" xml:space="preserve">
          <source>The sub path (sub directory) and filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13350196f8740fa8fc608071e2bb43506f4e21b" translate="yes" xml:space="preserve">
          <source>The sub path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9794a4f6483389ef0b8808e31c747c85fb890bec" translate="yes" xml:space="preserve">
          <source>The subject of the mail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c43048ee47956c018ae7f286874041aa375c8033" translate="yes" xml:space="preserve">
          <source>The substring to search for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94f7bd2996f7329b9db1ec8670992b8281db8b2a" translate="yes" xml:space="preserve">
          <source>The success rate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1190acbc264ab86b638d8ddf85a20313d2b2356b" translate="yes" xml:space="preserve">
          <source>The success rate of the distribution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5168fad649ceadaafb3a1ede7500788ded1725e2" translate="yes" xml:space="preserve">
          <source>The sum of all the values in the deque as either a &lt;a href=&quot;language.types.float&quot;&gt;float&lt;/a&gt; or &lt;a href=&quot;language.types.integer&quot;&gt;int&lt;/a&gt; depending on the values in the deque.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc7a92b7fff71e6b314ea215048c189dfa33a6ab" translate="yes" xml:space="preserve">
          <source>The sum of all the values in the map as either a &lt;a href=&quot;language.types.float&quot;&gt;float&lt;/a&gt; or &lt;a href=&quot;language.types.integer&quot;&gt;int&lt;/a&gt; depending on the values in the map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="501a88e78a4e605f3d402f8c124096b08e522715" translate="yes" xml:space="preserve">
          <source>The sum of all the values in the sequence as either a &lt;a href=&quot;language.types.float&quot;&gt;float&lt;/a&gt; or &lt;a href=&quot;language.types.integer&quot;&gt;int&lt;/a&gt; depending on the values in the sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e634a20c4abb4034fcdcb884804fbbc96aa4829d" translate="yes" xml:space="preserve">
          <source>The sum of all the values in the set as either a &lt;a href=&quot;language.types.float&quot;&gt;float&lt;/a&gt; or &lt;a href=&quot;language.types.integer&quot;&gt;int&lt;/a&gt; depending on the values in the set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78e3b5c3186daa1b54c86c71e2cb0039065b27e1" translate="yes" xml:space="preserve">
          <source>The sum of all the values in the vector as either a &lt;a href=&quot;language.types.float&quot;&gt;float&lt;/a&gt; or &lt;a href=&quot;language.types.integer&quot;&gt;int&lt;/a&gt; depending on the values in the vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258b469ee0a0bdd1dc73f7856111c8a22669925b" translate="yes" xml:space="preserve">
          <source>The sum of the two operands, as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5073cd5f57a34ffaf2dc28ce64c8fe63d5ab3d3" translate="yes" xml:space="preserve">
          <source>The superglobals &lt;var&gt;&lt;var&gt;&lt;a href=&quot;reserved.variables.get&quot;&gt;$_GET&lt;/a&gt;&lt;/var&gt;&lt;/var&gt; and &lt;var&gt;&lt;var&gt;&lt;a href=&quot;reserved.variables.request&quot;&gt;$_REQUEST&lt;/a&gt;&lt;/var&gt;&lt;/var&gt; are already decoded. Using &lt;strong&gt;urldecode()&lt;/strong&gt; on an element in &lt;var&gt;&lt;var&gt;&lt;a href=&quot;reserved.variables.get&quot;&gt;$_GET&lt;/a&gt;&lt;/var&gt;&lt;/var&gt; or &lt;var&gt;&lt;var&gt;&lt;a href=&quot;reserved.variables.request&quot;&gt;$_REQUEST&lt;/a&gt;&lt;/var&gt;&lt;/var&gt; could have unexpected and dangerous results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae21c3e40f4a81914a74e0206021c43e41729542" translate="yes" xml:space="preserve">
          <source>The symbol string or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e02029f5ff3282926a7b03ac1e240e0faf0f8b8" translate="yes" xml:space="preserve">
          <source>The symbolic link path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0fe5031fe8a71a75422b09bc4103c83de28fd07" translate="yes" xml:space="preserve">
          <source>The symbolic name of the DB</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="592391709aee849f2061d085e2aad4c867d19fa6" translate="yes" xml:space="preserve">
          <source>The symbolic name of the given &lt;code&gt;token&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91571d867cae9d06279b66c03e56a1a276f71159" translate="yes" xml:space="preserve">
          <source>The syntax and semantics of the regular expressions supported by PCRE are described below. Regular expressions are also described in the Perl documentation and in a number of other books, some of which have copious examples. Jeffrey Friedl's &quot;Mastering Regular Expressions&quot;, published by O'Reilly (ISBN 1-56592-257-3), covers them in great detail. The description here is intended as reference documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0646176a4daf1e2839a83ecedc11d97dc4696adb" translate="yes" xml:space="preserve">
          <source>The syntax for yielding a key/value pair is very similar to that used to define an associative array, as shown below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc269245a39d3ab7ba19a399ff99659cc045cbf2" translate="yes" xml:space="preserve">
          <source>The system identifier associated with the entity if specified, and &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; otherwise. This may be an absolute URI or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b27a3eb89c729d7e642ff92ff95e3dac820f59c" translate="yes" xml:space="preserve">
          <source>The system identifier of the external subset. This may be an absolute URI or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="905054fe1aefc5725eea1173de784dd765e8936b" translate="yes" xml:space="preserve">
          <source>The table name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ce7a0c9f79adc484a05afc9e94326edcd564b45" translate="yes" xml:space="preserve">
          <source>The table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f71140b0f78592e4b035389af71899b07f244282" translate="yes" xml:space="preserve">
          <source>The tag &amp;lt;?= is always available regardless of the short_open_tag ini setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0db1e5e1dc09f937818ded7aaa9d3cf122a112a8" translate="yes" xml:space="preserve">
          <source>The tag &lt;em&gt;UserComment&lt;/em&gt; has the same problem as the Copyright tag. It can store two values. First the encoding used, and second the value itself. If so the &lt;em&gt;IFD&lt;/em&gt; section only contains the encoding or a byte array. The &lt;em&gt;COMPUTED&lt;/em&gt; section will store both in the entries &lt;em&gt;UserCommentEncoding&lt;/em&gt; and &lt;em&gt;UserComment&lt;/em&gt;. The entry &lt;em&gt;UserComment&lt;/em&gt; is available in both cases so it should be used in preference to the value in &lt;em&gt;IFD0&lt;/em&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1e78329f3ccb26da2cb6ba6381d0511dca5e7c3" translate="yes" xml:space="preserve">
          <source>The tag name and prefix of the attribute, as &lt;em&gt;prefix:tagname&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6508cc78f5f4debec96a0f6610844f01014537" translate="yes" xml:space="preserve">
          <source>The tag name of the attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac186afb3f96c62f78ad7738ca34cdc121a4adaa" translate="yes" xml:space="preserve">
          <source>The tag name of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53d43b081e7305ec18d98c2715e490d86d97c4e5" translate="yes" xml:space="preserve">
          <source>The tag name of the element. When also passing in namespaceURI, the element name may take a prefix to be associated with the URI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4f8362f955c16e5fc5e05cfeff51bebc1ad4800" translate="yes" xml:space="preserve">
          <source>The tag name of the processing instruction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f13b54459ab0e705cc48298821f562c200375f91" translate="yes" xml:space="preserve">
          <source>The tag name. Use &lt;em&gt;*&lt;/em&gt; to return all elements within the element tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e39556d0bbe68bbfd83d4c905c8bcf2ffb351b7" translate="yes" xml:space="preserve">
          <source>The tangent of &lt;code&gt;arg&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a3f6ee1270d03a241fabb383d627e21e7a4740" translate="yes" xml:space="preserve">
          <source>The target Cyrillic character set, as a single character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5b12efcf7bd6742036a04d1660ec83b9621afca" translate="yes" xml:space="preserve">
          <source>The target URI for the transformation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee1e81ac689eeda3392ea773846ce1e007dfd7fd" translate="yes" xml:space="preserve">
          <source>The target URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f868e6d22f787ab7f3be1376de48d465647fc79" translate="yes" xml:space="preserve">
          <source>The target color to paint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13b4461dd224eb9f2bad7eb223ada4c6c4be7791" translate="yes" xml:space="preserve">
          <source>The target directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="342d1883e22410acd2cb2aeb754d65677c0784ff" translate="yes" xml:space="preserve">
          <source>The target may not be the real path on the filesystem. Use &lt;a href=&quot;splfileinfo.getrealpath&quot;&gt;SplFileInfo::getRealPath()&lt;/a&gt; to determine the true path on the filesystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38cf6ab3c4d7c79460259b286fd40d3082e429c6" translate="yes" xml:space="preserve">
          <source>The target of the processing instruction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6a881a30c97c2015b4fa40b5ab3de651d961c6b" translate="yes" xml:space="preserve">
          <source>The target stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a48e8568957b8f9fd4ea8e223487dfb503d33855" translate="yes" xml:space="preserve">
          <source>The task for execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c48f33b76b20763222623cb2e906a589b0434fec" translate="yes" xml:space="preserve">
          <source>The task for execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e574811e8de74ba9039730d5825d93e849ae0ea" translate="yes" xml:space="preserve">
          <source>The temporary &lt;a href=&quot;class.intldateformatter&quot;&gt;IntlDateFormatter&lt;/a&gt; that will be created will take the timezone from the passed in object. The timezone database bundled with PHP will not be used &amp;ndash; ICU's will be used instead. The timezone identifier used in &lt;a href=&quot;class.datetime&quot;&gt;DateTime&lt;/a&gt; objects must therefore also exist in ICU's database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d47dd62e74bbac8926571e6df7de8bad24177894" translate="yes" xml:space="preserve">
          <source>The term to stop at</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d17ca99970f8e3184fac73d4235a4f88787427bb" translate="yes" xml:space="preserve">
          <source>The tested object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb6ee1a81d05a21b37d6ec2d8659bb6a7fe22f48" translate="yes" xml:space="preserve">
          <source>The tested object or class name. This parameter is optional if called from the object's method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0900b3c2251050877c85dbc2e4a2b1598c854d25" translate="yes" xml:space="preserve">
          <source>The tested object. This parameter may be omitted when inside a class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="595e7e2a6f58eee4ee410bb58bb723ab0414a14d" translate="yes" xml:space="preserve">
          <source>The tested string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb1a81bfdd426170e6a7121deacbce92dbb57d79" translate="yes" xml:space="preserve">
          <source>The tested string. This function is especially useful for filenames, but may also be used on regular strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb5a4878d4824a6e3cc97693f13a3d7af45ba70" translate="yes" xml:space="preserve">
          <source>The text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0671dc3ec65bcea33860b857cfa3823273db1f7" translate="yes" xml:space="preserve">
          <source>The text content of this node and its descendants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8b8f800b4c622e64dda4ac7222e5fb940b3e0c1" translate="yes" xml:space="preserve">
          <source>The text string in UTF-8 encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cfdb8f6cb545284285c49ac8935782fc05320a9" translate="yes" xml:space="preserve">
          <source>The text string to write.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="381cfddadc0cf41ca2f4545f8dd74856bfd8b478" translate="yes" xml:space="preserve">
          <source>The text to be translated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35e4dbe30d683708a3fcbda1968ee88426da559e" translate="yes" xml:space="preserve">
          <source>The text to be written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4d65366d9f37264350fd644f5d965eac1f9620" translate="yes" xml:space="preserve">
          <source>The text to draw on the image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ff4218ef5c9f80b34e753a065bf049450f2f401" translate="yes" xml:space="preserve">
          <source>The text value of the node</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df5ce0d12eaf6632ced1598f5400a654fcf34fd" translate="yes" xml:space="preserve">
          <source>The text which appears before a highlighted term</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6157a0eabe667b1ab134078269a96fc71138f3c4" translate="yes" xml:space="preserve">
          <source>The textContent property has been made writable (formerly it has been readonly).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dbff5a94579e9f8babfc411cae1809187b954ab" translate="yes" xml:space="preserve">
          <source>The third parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6254c4cbd9d366927321ce66460a64221997baad" translate="yes" xml:space="preserve">
          <source>The third parameter is optional, &lt;code&gt;errfile&lt;/code&gt;, which contains the filename that the error was raised in, as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b73f3b8e7d9ae3a7cb9457457963de33b0688df" translate="yes" xml:space="preserve">
          <source>The third parameter of &lt;strong&gt;ob_start()&lt;/strong&gt; changed from a &lt;a href=&quot;language.types.boolean&quot;&gt;boolean&lt;/a&gt; parameter called &lt;code&gt;erase&lt;/code&gt; (which, if set to &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;, would prevent the output buffer from being deleted until the script finished executing) to an &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; parameter called &lt;code&gt;flags&lt;/code&gt;. Unfortunately, this results in an API compatibility break for code written prior to PHP 5.4.0 that uses the third parameter. See &lt;a href=&quot;function.ob-start#function.ob-start.flags-bc&quot;&gt;the flags example&lt;/a&gt; for an example of how to handle this with code that needs to be compatible with both.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41b75494b42bdbee83f1c9a3c30c7f8d2d1d1c1a" translate="yes" xml:space="preserve">
          <source>The third parameter, &lt;code&gt;attribs&lt;/code&gt;, contains an associative array with the element's attributes (if any).The keys of this array are the attribute names, the values are the attribute values.Attribute names are &lt;a href=&quot;https://secure.php.net/manual/en/xml.case-folding.php&quot;&gt;case-folded&lt;/a&gt; on the same criteria as element names.Attribute values are &lt;em&gt;not&lt;/em&gt; case-folded.  The original order of the attributes can be retrieved by walking through &lt;code&gt;attribs&lt;/code&gt; the normal way, using &lt;a href=&quot;function.each&quot;&gt;each()&lt;/a&gt;.The first key in the array was the first attribute, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd601e696d1d24f9fefc250f75703f7cd791ecf" translate="yes" xml:space="preserve">
          <source>The third parameter, &lt;code&gt;data&lt;/code&gt;, contains the PI data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06fb0a2765d192d7025c68f63e6c484c8ff29ec0" translate="yes" xml:space="preserve">
          <source>The third thing references can do is &lt;a href=&quot;language.references.return&quot;&gt;return by reference&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0c3454a7589eaec4ea5a8a045e8b79577cb6270" translate="yes" xml:space="preserve">
          <source>The third use of backslash is for specifying generic character types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4f7c621e24ca4e75d8c86d2ce9961059c0ed109" translate="yes" xml:space="preserve">
          <source>The thread ID is assigned on a connection-by-connection basis. Hence, if the connection is broken and then re-established a new thread ID will be assigned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc0f47caebb68a083cda9025e692e932b4f993ae" translate="yes" xml:space="preserve">
          <source>The threshold below which everything turns black</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46f0d7c0187e6b66b6cbe60a08ba73194fa25fdc" translate="yes" xml:space="preserve">
          <source>The thrown object must be an instance of the &lt;a href=&quot;class.exception&quot;&gt;Exception&lt;/a&gt; class or a subclass of &lt;a href=&quot;class.exception&quot;&gt;Exception&lt;/a&gt;. Trying to throw an object that is not will result in a PHP Fatal Error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fccee3f10577d41871c0c6d1e56322b4122b3280" translate="yes" xml:space="preserve">
          <source>The tidy class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd8b8fc208209b6b9a891b703c48ddcb5eab334" translate="yes" xml:space="preserve">
          <source>The tidy option name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca35e862d02ff29f08e78f15eeb440195628d3bb" translate="yes" xml:space="preserve">
          <source>The tidy option name. A list of available configuration options may be found at: &lt;a href=&quot;http://tidy.sourceforge.net/docs/quickref.html&quot;&gt;&amp;raquo; http://tidy.sourceforge.net/docs/quickref.html&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c5a8e9e96c4626a83e798ae5f41be0b35afd9c" translate="yes" xml:space="preserve">
          <source>The tidyNode class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="facaa1d7da86d395cbb89f4a1be81ca7eeda397e" translate="yes" xml:space="preserve">
          <source>The tiger algorithm now uses big-endian byte ordering. See also example below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fb2481407968874e9835c0cc0df8975235ea2f4" translate="yes" xml:space="preserve">
          <source>The time against which to compare the quantity represented by the &lt;code&gt;field&lt;/code&gt;. For the result to be positive, the time given for this parameter must be ahead of the time of the object the method is being invoked on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65141769237efc2777aeb28384d7f4cf332513a9" translate="yes" xml:space="preserve">
          <source>The time allowed for a search to finish.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64e4e42bec5f83b370a50e02d274fa8f75f5d11d" translate="yes" xml:space="preserve">
          <source>The time allowed for a search to finish. This value only applies to the search and not to requests in general. Time is in milliseconds. Values less than or equal to zero implies no time restriction. Partial results may be returned, if there are any.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d19e7c4b9273d0c0496c4b87bbe91ae34ce50e9" translate="yes" xml:space="preserve">
          <source>The time in seconds since January 1st, 1970. The time will be used by &lt;strong&gt;&lt;code&gt;CURLOPT_TIMECONDITION&lt;/code&gt;&lt;/strong&gt;. By default, &lt;code&gt;CURL_TIMECOND_IFMODSINCE&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d9d73d4532636c905452c3623f909890fdaa506" translate="yes" xml:space="preserve">
          <source>The time of the sunrise (zenith angle = 90&amp;deg;35').</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41bcb9de06494b69069ca51e092136ecf36ba45d" translate="yes" xml:space="preserve">
          <source>The time of the sunset (zenith angle = 90&amp;deg;35').</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dadbef298ba30970d70cf636551057f759e68a0" translate="yes" xml:space="preserve">
          <source>The time that the last message was received from the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6772075777830a73c14bb9ac21e406e462f5ae0" translate="yes" xml:space="preserve">
          <source>The time that the last message was sent to the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e068cf9429e22c12a68e68e3274a0a17ee5f2589" translate="yes" xml:space="preserve">
          <source>The time that the queue was last changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba0eba4543c615e7d3c45d68a65c2ec6270039e" translate="yes" xml:space="preserve">
          <source>The time the cookie expires. This is a Unix timestamp so is in number of seconds since the epoch. In other words, you'll most likely set this with the &lt;a href=&quot;function.time&quot;&gt;time()&lt;/a&gt; function plus the number of seconds before you want it to expire. Or you might use &lt;a href=&quot;function.mktime&quot;&gt;mktime()&lt;/a&gt;. &lt;em&gt;time()+60*60*24*30&lt;/em&gt; will set the cookie to expire in 30 days. If set to 0, or omitted, the cookie will expire at the end of the session (when the browser closes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b92191774dda8a23e2425ace59a4987d4dd22933" translate="yes" xml:space="preserve">
          <source>The time when the sun is at its zenith, i.e. has reached its topmost point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a78a655e606d413ab5d768d15a5ef239388a4b8" translate="yes" xml:space="preserve">
          <source>The time zone ID string of the time zone to use. If &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; or the empty string, the default time zone for the runtime is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04d035f387d4bb37e1a1237de52592d329448df4" translate="yes" xml:space="preserve">
          <source>The time zone abbreviation. Not implemented as described on Windows. See below for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f40c5f61e21b5791b4cda744090a5cfd0da3da25" translate="yes" xml:space="preserve">
          <source>The time zone offset. Not implemented as described on Windows. See below for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a95b8487630a70dbaf76d2fac9ab96fcbded42b9" translate="yes" xml:space="preserve">
          <source>The time-to-live of outgoing IPv4 multicast packets. This should be a value between 0 (don't leave the interface) and 255. The default value is 1 (only the local network is reached). (added in PHP 5.4)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cee9794077818c08157c3efe1902134f1a1b1ed5" translate="yes" xml:space="preserve">
          <source>The timeout for Expect: 100-continue responses in milliseconds. Defaults to 1000 milliseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f816822450cbbd893f15702e22f231b05f5025fc" translate="yes" xml:space="preserve">
          <source>The timeout in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd9782a29adc814065669a4baa973341a57163a6" translate="yes" xml:space="preserve">
          <source>The timeout, in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a192df7c226877f36cc9e4209c67fc2cab4a062" translate="yes" xml:space="preserve">
          <source>The timer event callback. See &lt;a href=&quot;https://secure.php.net/manual/en/event.callbacks.php&quot;&gt;Event callbacks&lt;/a&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="834966b7348a5b7ac2a96893650cfc64727c1b18" translate="yes" xml:space="preserve">
          <source>The timer itself will do a best-effort at avoiding drift, that is, if a timer is configured to trigger every &lt;strong&gt;&lt;code&gt;10&lt;/code&gt;&lt;/strong&gt; seconds, then it will normally trigger at exactly &lt;strong&gt;&lt;code&gt;10&lt;/code&gt;&lt;/strong&gt; second intervals. If, however, the script cannot keep up with the timer because it takes longer than those &lt;strong&gt;&lt;code&gt;10&lt;/code&gt;&lt;/strong&gt; seconds to do) the timer will not fire more than once per event loop iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c707dd4ce7bcab645d294e1c0da9ded640546927" translate="yes" xml:space="preserve">
          <source>The timers are based on real time, that is, if one registers an event that times out after an hour and resets the system clock to &lt;em&gt;January last year&lt;/em&gt; , it will still time out after(roughly) one hour. &quot;Roughly&quot; because detecting time jumps is hard, and some inaccuracies are unavoidable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51049ac869cbf7d85426de3f0b594377ead9e5a0" translate="yes" xml:space="preserve">
          <source>The timestamp of the start of the request, with microsecond precision. Available since PHP 5.4.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2496c75b6274662672acb4576bd67948cd087e49" translate="yes" xml:space="preserve">
          <source>The timestamp of the start of the request. Available since PHP 5.1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64de86aa36743fef8c6fdc50e9140f76c7493797" translate="yes" xml:space="preserve">
          <source>The timestamp when the script should wake.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8297dce0513820ce15b829d431f2798eb864d239" translate="yes" xml:space="preserve">
          <source>The timestamp which is used as a base for the calculation of relative dates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="590ad1e0721e7dceff0afa71002dba22e35fffce" translate="yes" xml:space="preserve">
          <source>The timestamp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fc6b9479560852c058a40d43ca02460b148e7a2" translate="yes" xml:space="preserve">
          <source>The timezone identifier, like &lt;em&gt;UTC&lt;/em&gt; or &lt;em&gt;Europe/Lisbon&lt;/em&gt;. The list of valid identifiers is available in the &lt;a href=&quot;https://secure.php.net/manual/en/timezones.php&quot;&gt;List of Supported Timezones&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09dc74ee2a7c38d21b7edabbaba0422224989509" translate="yes" xml:space="preserve">
          <source>The timezone is no longer guessed from information available through the operating system as the guessed timezone can not be relied on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaebbb51d5b0abc97ff64a18cf70399b2179ede3" translate="yes" xml:space="preserve">
          <source>The timezone of the formatter will only be kept if an &lt;a href=&quot;class.intlcalendar&quot;&gt;IntlCalendar&lt;/a&gt; object is not passed, otherwise the new timezone will be that of the passed object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f4fc1049c9a1de57e8e9e18b6dafbdc75ddb417" translate="yes" xml:space="preserve">
          <source>The timezone to use for this formatter. This can be specified in the following forms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c10d42dab41b7a0a164b039970988e7afdac1bb" translate="yes" xml:space="preserve">
          <source>The timezone to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf55503afa390a656a811d879c56dffbabe80b65" translate="yes" xml:space="preserve">
          <source>The title to use as the process title.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcc25588060aa9fe8b59f174e30a224de3b84022" translate="yes" xml:space="preserve">
          <source>The title to use as the thread title.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7d11d4a098cb54c3e64ac88ae456bc143805fc7" translate="yes" xml:space="preserve">
          <source>The token that separates values for each field in each element of &lt;code&gt;rows&lt;/code&gt;. Default is &lt;em&gt;TAB&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b225e3e6297f514d19c1986a186bee388e367a" translate="yes" xml:space="preserve">
          <source>The token value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a3f7d9854dd2c84810695147e04c34f89d96b19" translate="yes" xml:space="preserve">
          <source>The total cache size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45aa95c84ae28d3e974630b1f9b0200b2263ea5e" translate="yes" xml:space="preserve">
          <source>The total count.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0818611bcdcaf3e24dcfcd8fa3208efee70d639" translate="yes" xml:space="preserve">
          <source>The total number of fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="384127e4247c875204c90e9f8d5218d16ba3300a" translate="yes" xml:space="preserve">
          <source>The touch time. If &lt;code&gt;time&lt;/code&gt; is not supplied, the current system time is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df0f92cf70d6ea49d6431a1c54eb9c5359ed69e0" translate="yes" xml:space="preserve">
          <source>The trait name. The trait name includes the namespace it was declared in (e.g. &lt;em&gt;Foo\Bar&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="858745f682a991231fc00ddd5098483edda80f48" translate="yes" xml:space="preserve">
          <source>The transaction begun by &lt;strong&gt;sqlsrv_begin_transaction()&lt;/strong&gt; includes all statements that were executed after the call to &lt;strong&gt;sqlsrv_begin_transaction()&lt;/strong&gt; and before calls to &lt;a href=&quot;function.sqlsrv-rollback&quot;&gt;sqlsrv_rollback()&lt;/a&gt; or &lt;a href=&quot;function.sqlsrv-commit&quot;&gt;sqlsrv_commit()&lt;/a&gt;. Explicit transactions should be started and committed or rolled back using these functions instead of executing SQL statements that begin and committ/roll back transactions. For more information, see &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc296206.aspx&quot;&gt;&amp;raquo; SQLSRV Transactions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0948e341d91b8632bbef092c99d387f6bb9c37b" translate="yes" xml:space="preserve">
          <source>The transfer mode. Must be either &lt;strong&gt;&lt;code&gt;FTP_ASCII&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;FTP_BINARY&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deed7594662640a204cce825d8840ea4cc5aefdb" translate="yes" xml:space="preserve">
          <source>The transfer speed, in bytes per second, that the transfer should be below during the count of &lt;strong&gt;&lt;code&gt;CURLOPT_LOW_SPEED_TIME&lt;/code&gt;&lt;/strong&gt; seconds before PHP considers the transfer too slow and aborts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9b93669e46871360c07998e9152b92c7d8a5e8c" translate="yes" xml:space="preserve">
          <source>The transfomed string on success, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfefe61e72decba184b2790e1fe4b41bf8912207" translate="yes" xml:space="preserve">
          <source>The transparent color is a property of the image, transparency is not a property of the color. Once you have set a color to be the transparent color, any regions of the image in that color that were drawn previously will be transparent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e4d017251e8edb69a72561ae4f286338b9e0540" translate="yes" xml:space="preserve">
          <source>The traversable iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33e8f625929bf8832ffa0310c166830cc3660e60" translate="yes" xml:space="preserve">
          <source>The trimmed string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb441fb367571a56969ea8e62f8dc0e9507f380" translate="yes" xml:space="preserve">
          <source>The truncated &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;. If &lt;code&gt;trimmarker&lt;/code&gt; is set, &lt;code&gt;trimmarker&lt;/code&gt; replaces the last chars to match the &lt;code&gt;width&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca2aac8ddde0bc1330ae229ceee1888f29bbb413" translate="yes" xml:space="preserve">
          <source>The two images will be merged according to &lt;code&gt;pct&lt;/code&gt; which can range from 0 to 100. When &lt;code&gt;pct&lt;/code&gt; = 0, no action is taken, when 100 this function behaves identically to &lt;a href=&quot;function.imagecopy&quot;&gt;imagecopy()&lt;/a&gt; for pallete images, except for ignoring alpha components, while it implements alpha transparency for true colour images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cccd328045ae9c14c3fd8ceb8fb5c87e5d996b2" translate="yes" xml:space="preserve">
          <source>The two keys from the &lt;em&gt;key =&amp;gt; value&lt;/em&gt; pairs are considered equal only if &lt;em&gt;(string) $key1 === (string) $key2 &lt;/em&gt;. In other words a strict type check is executed so the string representation must be the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1e3b0c44d8406b659f9dd33f5fa04a82a177209" translate="yes" xml:space="preserve">
          <source>The two modes of behavior are substantially different. With three arguments, &lt;strong&gt;strtr()&lt;/strong&gt; will replace bytes; with two, it may replace longer substrings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="322058de6bf6eff635169ca3db623c93d5510427" translate="yes" xml:space="preserve">
          <source>The two values from the &lt;em&gt;key =&amp;gt; value&lt;/em&gt; pairs are considered equal only if &lt;em&gt;(string) $elem1 === (string) $elem2 &lt;/em&gt;. In other words a strict type check is executed so the string representation must be the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55da9165b966d59bc3bd14f0dc19b19dc0c4bdd1" translate="yes" xml:space="preserve">
          <source>The two-letter (or digit) region code (see &lt;a href=&quot;function.geoip-region-by-name&quot;&gt;geoip_region_by_name()&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6e302796e975e95b986314af48bdf79981fb4ad" translate="yes" xml:space="preserve">
          <source>The two-letter country code (see &lt;a href=&quot;function.geoip-country-code-by-name&quot;&gt;geoip_country_code_by_name()&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da8c17d345f4df5e1739bc72e59c58351b2e27a2" translate="yes" xml:space="preserve">
          <source>The type comparison tables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba754c45d62bdcd993a39069d186783ad0b8568" translate="yes" xml:space="preserve">
          <source>The type name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb221cc0e014969284b340518f5ed008313ef53d" translate="yes" xml:space="preserve">
          <source>The type namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37ed0fcd26ddd15d9fbd3c17c653d81949e7a89b" translate="yes" xml:space="preserve">
          <source>The type of &lt;code&gt;shmid&lt;/code&gt; has been changed from &lt;a href=&quot;language.types.integer&quot;&gt;int&lt;/a&gt; to &lt;a href=&quot;language.types.resource&quot;&gt;resource&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c24875e7a1b3c5cc0d1f74e108cace42bf1e95" translate="yes" xml:space="preserve">
          <source>The type of a variable is not usually set by the programmer; rather, it is decided at runtime by PHP depending on the context in which that variable is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4450444c28c778345b90600a0d5469b60bda22c1" translate="yes" xml:space="preserve">
          <source>The type of communication to be used: &lt;strong&gt;&lt;code&gt;STREAM_SOCK_DGRAM&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;STREAM_SOCK_RAW&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;STREAM_SOCK_RDM&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;STREAM_SOCK_SEQPACKET&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;STREAM_SOCK_STREAM&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c16aa9429f975b297151a3ba59e9201f8a9cd12" translate="yes" xml:space="preserve">
          <source>The type of document to create or &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a0a2867ab4c98f1d3fa731918d1bcd781c837c" translate="yes" xml:space="preserve">
          <source>The type of encoding that &lt;code&gt;str&lt;/code&gt; is being converted to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8058043517474d62f08c6307f27b8eefcb9b0fda" translate="yes" xml:space="preserve">
          <source>The type of kernel to build e.g. \Imagick::KERNEL_DIAMOND</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9fa3e98639f71364385504740efbd519b5ae534" translate="yes" xml:space="preserve">
          <source>The type of method to create, can be &lt;strong&gt;&lt;code&gt;RUNKIT_ACC_PUBLIC&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;RUNKIT_ACC_PROTECTED&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;RUNKIT_ACC_PRIVATE&lt;/code&gt;&lt;/strong&gt; optionally combined via bitwise OR with &lt;strong&gt;&lt;code&gt;RUNKIT_ACC_STATIC&lt;/code&gt;&lt;/strong&gt; (since 1.0.1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa90093830048065a4c0bbbec69b509abf85a7f5" translate="yes" xml:space="preserve">
          <source>The type of parameter passed into &lt;code&gt;exception_handler&lt;/code&gt; changed from &lt;a href=&quot;class.exception&quot;&gt;Exception&lt;/a&gt; to &lt;a href=&quot;class.throwable&quot;&gt;Throwable&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="226cfba031dcfedc9329bcbd6b724e5820c05f8d" translate="yes" xml:space="preserve">
          <source>The type of parameters to include</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bff5fb881b1da1b7669fc501859580afb163e5cd" translate="yes" xml:space="preserve">
          <source>The type of socket created is determined by the transport specified using standard URL formatting: &lt;em&gt;transport://target&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1ee25d449dbba1b243a3401bdf6faead372e3f3" translate="yes" xml:space="preserve">
          <source>The type of the message that was received will be stored in this parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="463071300111b85d2a07856fc5bb250bef94de80" translate="yes" xml:space="preserve">
          <source>The type of the noise. Refer to this list of &lt;a href=&quot;https://secure.php.net/manual/en/gmagick.constants.php#gmagick.constants.noise&quot;&gt;noise constants&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="330ea95479477bb85853c4c78052bd4c7ef8cf98" translate="yes" xml:space="preserve">
          <source>The type of the noise. Refer to this list of &lt;a href=&quot;https://secure.php.net/manual/en/imagick.constants.php#imagick.constants.noise&quot;&gt;noise constants&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="291d1791a534a22e74d834a03414ff393f8123ba" translate="yes" xml:space="preserve">
          <source>The type of the tag (one of the constants above, e.g. &lt;strong&gt;&lt;code&gt;TIDY_NODETYPE_PHP&lt;/code&gt;&lt;/strong&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f903302dbfdee93674529007b8532e101e6b9a86" translate="yes" xml:space="preserve">
          <source>The type of this column as represented by the &lt;a href=&quot;https://secure.php.net/manual/en/pdo.constants.php&quot;&gt;&lt;em&gt;PDO::PARAM_*&lt;/em&gt; constants&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b87ce6f357dc90cafc07265163922c79589cc18" translate="yes" xml:space="preserve">
          <source>The type to list. Either pass in &lt;strong&gt;&lt;code&gt;APC_LIST_ACTIVE&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;APC_LIST_DELETED&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="066bd4cbd05f48e9bc34160227bce74235c91208" translate="yes" xml:space="preserve">
          <source>The types of the values of the returned array are mapped from SQLite3 types as follows: integers are mapped to &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; if they fit into the range &lt;strong&gt;&lt;code&gt;PHP_INT_MIN&lt;/code&gt;&lt;/strong&gt;..&lt;strong&gt;&lt;code&gt;PHP_INT_MAX&lt;/code&gt;&lt;/strong&gt;, and to &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; otherwise. Floats are mapped to &lt;a href=&quot;language.types.float&quot;&gt;float&lt;/a&gt;, &lt;em&gt;NULL&lt;/em&gt; values are mapped to &lt;a href=&quot;language.types.null&quot;&gt;null&lt;/a&gt;, and strings and blobs are mapped to &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d70303969f5b3600b9708db8b83172a73a72d2e8" translate="yes" xml:space="preserve">
          <source>The uid of the owner of the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dcb98f5620349d6962e7d279dab0549a034c18e" translate="yes" xml:space="preserve">
          <source>The uncompressed and stripped string, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3afefa57b1306aeec445759fcbb415adfc4e287" translate="yes" xml:space="preserve">
          <source>The uncompressed character or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="661d4b42e42f29ccdca488776997e324a29bf5cd" translate="yes" xml:space="preserve">
          <source>The uncompressed string, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31970611d8c870d249ee7ebfce2741935a2e2845" translate="yes" xml:space="preserve">
          <source>The underlying libssh library doesn't support partial auths very cleanly That is, if you need to supply both a public key and a password it will appear as if this function has failed. In this particular case a failure from this call may just mean that auth hasn't been completed yet. You would need to ignore this failure and continue on and call &lt;a href=&quot;function.ssh2-auth-password&quot;&gt;ssh2_auth_password()&lt;/a&gt; in order to complete authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05339dd1743b5f773c80025477bb73ac241eb617" translate="yes" xml:space="preserve">
          <source>The unique attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bb6b878ef8a59a4c23e4c2433afee231eb7570e" translate="yes" xml:space="preserve">
          <source>The unique id value for an element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f24b199a14a49c525a083bd82b6eb291d88c648" translate="yes" xml:space="preserve">
          <source>The unique identifier, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if no identifier is assigned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae2bf44be725e2ee125bcc4d8b9ba15758e8e35" translate="yes" xml:space="preserve">
          <source>The unit types must be entered from the largest scale unit on the left to the smallest scale unit on the right. So years before months, months before days, days before minutes, etc. Thus one year and four days must be represented as &lt;em&gt;P1Y4D&lt;/em&gt;, not &lt;em&gt;P4D1Y&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="278e60e93613d1dfbba63c8842e784e412c74c25" translate="yes" xml:space="preserve">
          <source>The unix timestamp for the start (midnight, not noon) of the given Julian day.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f78f8404d799d80c7091fc73c701ef7c7969b975" translate="yes" xml:space="preserve">
          <source>The unpacked data is stored in an associative array. To accomplish this you have to name the different format codes and separate them by a slash /. If a repeater argument is present, then each of the array keys will have a sequence number behind the given name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b376cd1eb57e373a0f69eecb3ad60544a78df940" translate="yes" xml:space="preserve">
          <source>The unserialized &lt;a href=&quot;class.arrayobject&quot;&gt;ArrayObject&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81af2bf143193c9c9d6df7b16f185bfa50ac2d79" translate="yes" xml:space="preserve">
          <source>The upper bound</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9823f6785ecef5e70c97ee746c90c20bdac9a9da" translate="yes" xml:space="preserve">
          <source>The upper bound (exclusive)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="543972e1d3f21bc057e9860de7050174cbcb430f" translate="yes" xml:space="preserve">
          <source>The upper bound of the distribution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da9eadd6f253a4ade4c4cb63239d14ae522f6492" translate="yes" xml:space="preserve">
          <source>The use of &lt;strong&gt;openlog()&lt;/strong&gt; is optional. It will automatically be called by &lt;a href=&quot;function.syslog&quot;&gt;syslog()&lt;/a&gt; if necessary, in which case &lt;code&gt;ident&lt;/code&gt; will default to &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2321c6e7ee52afe2b064bf7939a96dde78874d1" translate="yes" xml:space="preserve">
          <source>The use of the &lt;em&gt;\g&lt;/em&gt; sequence with a negative number signifies a relative reference. For example, &lt;em&gt;(foo)(bar)\g{-1}&lt;/em&gt; would match the sequence &quot;foobarbar&quot; and &lt;em&gt;(foo)(bar)\g{-2}&lt;/em&gt; matches &quot;foobarfoo&quot;. This can be useful in long patterns as an alternative to keeping track of the number of subpatterns in order to reference a specific previous subpattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb6d9428ed6e157c6f83aa6200d8700207811e01" translate="yes" xml:space="preserve">
          <source>The used algorithm, cost and salt are returned as part of the hash. Therefore, all information that's needed to verify the hash is included in it. This allows the &lt;a href=&quot;function.password-verify&quot;&gt;password_verify()&lt;/a&gt; function to verify the hash without needing separate storage for the salt or algorithm information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f9a15c25ac0ffa457e3e1ff1bb5f31e34305307" translate="yes" xml:space="preserve">
          <source>The user id.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cba27a951c7f5c1c26aabe95b0916c605cfbfbd9" translate="yes" xml:space="preserve">
          <source>The user identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2dcea7ef576a1c2f4e3166fd2a39f0a58e0438d" translate="yes" xml:space="preserve">
          <source>The user name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="249eeceef1200f4fb1342d613364c2873e510bb1" translate="yes" xml:space="preserve">
          <source>The user name for the DSN string. This parameter is optional for some PDO drivers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52d9dceed2465700d75f3a49e01e6275251f639b" translate="yes" xml:space="preserve">
          <source>The user name to use in authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5873b37dfe34c65752d740127572ca679d7f3976" translate="yes" xml:space="preserve">
          <source>The user name. Can be set with the &lt;em&gt;ibase.default_user&lt;/em&gt;&lt;var&gt;php.ini&lt;/var&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca31b3289459d5c070a6c2606a59f3ee643cc4f4" translate="yes" xml:space="preserve">
          <source>The user that the webserver runs as should be added as a trusted user to the sendmail configuration to prevent a 'X-Warning' header from being added to the message when the envelope sender (-f) is set using this method. For sendmail users, this file is &lt;var&gt;/etc/mail/trusted-users&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d405e7bba9153ebf3aaa6f773a54bb5f17251b1" translate="yes" xml:space="preserve">
          <source>The user to calculate the list for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed9a117059ca897bf46a0b2af2cbb3beb8e38f81" translate="yes" xml:space="preserve">
          <source>The user to give the rights to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8273103dc85f744f6dcfb7c3aed4c9bf1136525e" translate="yes" xml:space="preserve">
          <source>The user variables being dumped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="735bab751c4e246415a743632b509e06e586270e" translate="yes" xml:space="preserve">
          <source>The user vars. Passing in &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; signals a dump of every entry, while passing in &lt;a href=&quot;function.array&quot;&gt;array()&lt;/a&gt; will dump nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcc177be3bd3a39dc312b67624200e1a12443383" translate="yes" xml:space="preserve">
          <source>The user's new first name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f3dad0c86ffee7a08d833a50d14af96975e1def" translate="yes" xml:space="preserve">
          <source>The user's new last name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="933bc45c27ade201547f9bdfc9092f5db3fdab9b" translate="yes" xml:space="preserve">
          <source>The user's new middle name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb350e591f5d526db2a5bbdef9b6355908e5c6d4" translate="yes" xml:space="preserve">
          <source>The user's new password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10eab012c461bfc94dae75aa1fcd8595ad75aaa3" translate="yes" xml:space="preserve">
          <source>The user's password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06df871ca6547015035b2febcb329b22c694f74f" translate="yes" xml:space="preserve">
          <source>The user-supplied string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="256f440d3b0d12d82821bf4fca6f952206d4e355" translate="yes" xml:space="preserve">
          <source>The username (&lt;em&gt;USER&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13410b3d09b58edbeb4c091bf40362184fcbbd5f" translate="yes" xml:space="preserve">
          <source>The username to use for authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63803ded3fb89ac77cac31ee0550c9d9e9cdd156" translate="yes" xml:space="preserve">
          <source>The username.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="766164b59d48a07dd92a6d8a25b528cfc5262a7b" translate="yes" xml:space="preserve">
          <source>The uuencoded data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a454b06a58104d74c73dbcfddbb6352ae92408e2" translate="yes" xml:space="preserve">
          <source>The valid range for the Gregorian calendar is from November 25, 4714 B.C. to at least December 31, 9999 A.D.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ff7a97967a87482c3804241825dba8ea2330610" translate="yes" xml:space="preserve">
          <source>The valid range of a timestamp is typically from Fri, 13 Dec 1901 20:45:54 GMT to Tue, 19 Jan 2038 03:14:07 GMT. (These are the dates that correspond to the minimum and maximum values for a 32-bit signed integer). However, before PHP 5.1.0 this range was limited from 01-01-1970 to 19-01-2038 on some systems (e.g. Windows).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a185fc1ad540f044ba377553acd68d47426d64d8" translate="yes" xml:space="preserve">
          <source>The valid range of a timestamp is typically from Fri, 13 Dec 1901 20:45:54 UTC to Tue, 19 Jan 2038 03:14:07 UTC. (These are the dates that correspond to the minimum and maximum values for a 32-bit signed integer.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e446494ebae458b5aea2681dfd535005a9fb5001" translate="yes" xml:space="preserve">
          <source>The value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0165fc77df98b47e7731ec2eaa8d77e5da58a5b5" translate="yes" xml:space="preserve">
          <source>The value &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; may also be returned on failure, for instance after giving a date out of bounds on non-lenient mode; use &lt;a href=&quot;https://secure.php.net/manual/en/intl.configuration.php#ini.intl.use-exceptions&quot;&gt;exceptions&lt;/a&gt; or query &lt;a href=&quot;function.intl-get-error-code&quot;&gt;intl_get_error_code()&lt;/a&gt; to disambiguate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae572d697cb28ab1af9ffbcaf168af65739db351" translate="yes" xml:space="preserve">
          <source>The value at offset &lt;code&gt;index&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c456e5ba1ded991e33f22c56a1874b4fd80533" translate="yes" xml:space="preserve">
          <source>The value at the front of the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47d9ce31739570d5a3e0be80f0c728a4a441fc1f" translate="yes" xml:space="preserve">
          <source>The value at the requested index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e164300a28926a5f4d7007c57d066f1557e9306" translate="yes" xml:space="preserve">
          <source>The value at the specified &lt;code&gt;index&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d99f07be72ac7d5cc076feef7b9510ff333c0c3" translate="yes" xml:space="preserve">
          <source>The value at the specified index or &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b457a2331691733f5f7249fada2f093a2c5e73c" translate="yes" xml:space="preserve">
          <source>The value at the top of the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66ec3656f9f2c3951f5b1c1009d332186c71d7c9" translate="yes" xml:space="preserve">
          <source>The value at which the probability density is calculated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba3fa8771801e0c224ce6b1da06c1db2d49525aa" translate="yes" xml:space="preserve">
          <source>The value at which the probability mass is calculated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff1750f1a2a135b487c2aceecfed599bb9f02acf" translate="yes" xml:space="preserve">
          <source>The value being appended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef5968844523e89704e253f8bd337b2561bc3fe4" translate="yes" xml:space="preserve">
          <source>The value being searched for, otherwise known as the &lt;em&gt;needle&lt;/em&gt;. An array may be used to designate multiple needles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ebce89de34658dca0ad51e892a12efb6c8fd81" translate="yes" xml:space="preserve">
          <source>The value can be any valid PHP type except for resources, because those cannot be represented in a serialized form. If the &lt;strong&gt;&lt;code&gt;Memcached::OPT_COMPRESSION&lt;/code&gt;&lt;/strong&gt; option is turned on, the serialized value will also be compressed before storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c5b73661c14cef7f7818bef945c5012f32f707" translate="yes" xml:space="preserve">
          <source>The value currently being iterated on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="232a3beb5b2ae72219a4d72b847848ea0786a6b0" translate="yes" xml:space="preserve">
          <source>The value for oauth_nonce.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="695660165bb64f33aacb72aa251a1f7085505931" translate="yes" xml:space="preserve">
          <source>The value for the field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c24cfb1d6b27ec431dcf3842e33800f4bcab4029" translate="yes" xml:space="preserve">
          <source>The value for the given &lt;code&gt;option&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac91a7b47840501b22498f1a35cbee4f99d8c707" translate="yes" xml:space="preserve">
          <source>The value for the option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6df786d07e5f41b0e9eb4ca5f16c6e26af4a3d1b" translate="yes" xml:space="preserve">
          <source>The value for this field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5f35facf9634ffa8d932c2f1b21c632e81bd80f" translate="yes" xml:space="preserve">
          <source>The value given to the SERVER_ADMIN (for Apache) directive in the web server configuration file. If the script is running on a virtual host, this will be the value defined for that virtual host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="116df7e1b04da7301ebad59240f80a414436dfa4" translate="yes" xml:space="preserve">
          <source>The value if the key exists, or &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; if the key wasn't part of the hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb4bee7a6962fa7c91f0d0342f39d689acb6e3f" translate="yes" xml:space="preserve">
          <source>The value is given by the initial portion of the &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;. If the &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; starts with valid numeric data, this will be the value used. Otherwise, the value will be 0 (zero). Valid numeric data is an optional sign, followed by one or more digits (optionally containing a decimal point), followed by an optional exponent. The exponent is an 'e' or 'E' followed by one or more digits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2354696eb2363d387dca66e2a4c86b09748a18a0" translate="yes" xml:space="preserve">
          <source>The value is used verbatim except that the &amp;lt; and &amp;gt; entity references will escaped. Note that &amp;amp; has to be manually escaped; otherwise it is regarded as starting an entity reference. Also &quot; won't be escaped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f4caa61909bfd137a066d20e73c2326a6703a9" translate="yes" xml:space="preserve">
          <source>The value mapped to the given &lt;code&gt;key&lt;/code&gt;, or the &lt;code&gt;default&lt;/code&gt; value if provided and the key could not be found in the map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e9741278ff07df922c40b305cd694e4d438a63f" translate="yes" xml:space="preserve">
          <source>The value must be a constant expression, not (for example) a variable, a property, or a function call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="459ea106f85d8ff6bda1d0bb167977e3e129a433" translate="yes" xml:space="preserve">
          <source>The value name to be matched. The name is compared using &quot;loose matching&quot; as described in PropertyValueAliases.txt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38649a0a6600c72e7a055b75963b0ab4d8f165ba" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;flags&lt;/code&gt; can be any combination of the following flags, joined with the &lt;a href=&quot;language.operators.bitwise&quot;&gt;binary OR (|) operator&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75a66861099d07e59b857e3141f8cee376ad06c0" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;flags&lt;/code&gt; can be any combination of the following flags, joined with the binary OR (&lt;em&gt;|&lt;/em&gt;) operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0de35f0b1c33db7a01936de4c302d00b2344d9a" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;flags&lt;/code&gt; can be any combination of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="908b2d8bde0f219ee3c1726d594cc2e6767a07d9" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;how&lt;/code&gt; can be one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a029338d41848c6ebddc62d5349b096a6e439392" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;options&lt;/code&gt; can be any of the following the following flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c96f57f8654b5eaf98d97006236a50c7abf829c" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;options&lt;/code&gt; is the value of zero or more of the following two global constants &lt;em&gt;OR&lt;/em&gt;'ed together:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="477897eec8ac5c4ae0c0e562a558078fa3a5e726" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;pid&lt;/code&gt; can be one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eb8f83272caced8b7dd369201227347617398ee" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;type&lt;/code&gt; can be any one of these:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c0e6a07b7194cf7647ec81b61d1ea75acdc2ef1" translate="yes" xml:space="preserve">
          <source>The value of &lt;strong&gt;&lt;code&gt;__NAMESPACE__&lt;/code&gt;&lt;/strong&gt; is a string that contains the current namespace name. In global, un-namespaced code, it contains an empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f16cef4b281b7cf3126041cface939ef6a825f72" translate="yes" xml:space="preserve">
          <source>The value of an assignment expression is the value assigned. That is, the value of &quot;&lt;em&gt;$a = 3&lt;/em&gt;&quot; is 3. This allows you to do some tricky things:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b6881af6845dba9bd6ee6fcd3f6e1c90f2d78dd" translate="yes" xml:space="preserve">
          <source>The value of pi as float.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eff5308a605c1af328a8c34dd5cf9220147d90e" translate="yes" xml:space="preserve">
          <source>The value of the &lt;em&gt;AUTO_INCREMENT&lt;/em&gt; field that was updated by the previous query. Returns zero if there was no previous query on the connection or if the query did not update an &lt;em&gt;AUTO_INCREMENT&lt;/em&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c0566ca989dd7f44a3072329778b8751d0ea7b" translate="yes" xml:space="preserve">
          <source>The value of the Apache environment variable on success, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on failure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ca3a3e368ec6832c671153c895d257393b732ce" translate="yes" xml:space="preserve">
          <source>The value of the CDATA node. If not supplied, an empty CDATA node is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf8a2b9976bcd27a4370b69e0f45bd163d30fdc8" translate="yes" xml:space="preserve">
          <source>The value of the artifact</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d52740eb64901c1436e493eeb88a8a5fc8eea0" translate="yes" xml:space="preserve">
          <source>The value of the attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c0df78329194632c83551c3b6b309448f80ca3" translate="yes" xml:space="preserve">
          <source>The value of the attribute, or &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; if no attribute with the given &lt;code&gt;name&lt;/code&gt; is found or not positioned on an element node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba0f9871ea2ca02f7e09451837f093df1093e20d" translate="yes" xml:space="preserve">
          <source>The value of the attribute, or an empty string (before PHP 5.6) or &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; (from PHP 5.6 onwards) if no attribute exists at &lt;code&gt;index&lt;/code&gt; or is not positioned on the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1a7b233cb5c0ea3ff806b69720d37f1900c6df" translate="yes" xml:space="preserve">
          <source>The value of the attribute, or an empty string (before PHP 5.6) or &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; (from PHP 5.6 onwards) if no attribute with the given &lt;code&gt;localName&lt;/code&gt; and &lt;code&gt;namespaceURI&lt;/code&gt; is found or not positioned of element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22253388874c2ea7ecc30e6156ee3d58d7bc6d53" translate="yes" xml:space="preserve">
          <source>The value of the attribute, or an empty string if no attribute with the given &lt;code&gt;localName&lt;/code&gt; and &lt;code&gt;namespaceURI&lt;/code&gt; is found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99da58bba0584a0ad9c41a940f9ac041cfbe97a3" translate="yes" xml:space="preserve">
          <source>The value of the attribute, or an empty string if no attribute with the given &lt;code&gt;name&lt;/code&gt; is found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="845e6c8ec8d98e06e940b584b32a03f1c5300aac" translate="yes" xml:space="preserve">
          <source>The value of the attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3660cee4621c5d3d8600e22924c3c17418be307" translate="yes" xml:space="preserve">
          <source>The value of the channel, as a normalized floating-point number, throwing GmagickPixelException on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7906117a6d4d249a244f574566dd04485850e17c" translate="yes" xml:space="preserve">
          <source>The value of the channel, as a normalized floating-point number, throwing ImagickPixelException on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="167b476d3eeeaf7e2d8f646667ddf6d7d3053b0c" translate="yes" xml:space="preserve">
          <source>The value of the class constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a83232ab036544a96382f79d8f86945d899f644" translate="yes" xml:space="preserve">
          <source>The value of the comment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8c71d47ed232ea1574b6964a9b10ea24a784948" translate="yes" xml:space="preserve">
          <source>The value of the constant. In PHP 5, &lt;code&gt;value&lt;/code&gt; must be a scalar value (&lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt;, &lt;a href=&quot;language.types.float&quot;&gt;float&lt;/a&gt;, &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;, &lt;a href=&quot;language.types.boolean&quot;&gt;boolean&lt;/a&gt;, or &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;). In PHP 7, &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; values are also accepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd324e4ddcff8c520caca7ba614ffbfa66c04015" translate="yes" xml:space="preserve">
          <source>The value of the cookie. If not specified, the cookie will be deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cecc51dad70c07ccc7abc4d4321dac201d88907" translate="yes" xml:space="preserve">
          <source>The value of the cookie. This value is stored on the clients computer; do not store sensitive information. Assuming the &lt;code&gt;name&lt;/code&gt; is &lt;em&gt;'cookiename'&lt;/em&gt;, this value is retrieved through &lt;var&gt;&lt;var&gt;&lt;a href=&quot;reserved.variables.cookies&quot;&gt;$_COOKIE['cookiename']&lt;/a&gt;&lt;/var&gt;&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39081c550e323ca9ac39040832249bfe9250481e" translate="yes" xml:space="preserve">
          <source>The value of the current element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb52f2e74ac13132470104ae23012ba8ccc9d547" translate="yes" xml:space="preserve">
          <source>The value of the current iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="445c7031d5c5125b9175acbbb47f6050d9154728" translate="yes" xml:space="preserve">
          <source>The value of the dequeued node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c1df67764c94ebde5a27b6d205354cfc97cbd66" translate="yes" xml:space="preserve">
          <source>The value of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e00bbacfd3e90290f880f6f9418b5d8f7093d1c0" translate="yes" xml:space="preserve">
          <source>The value of the element. By default, an empty element will be created. The value can also be set later with &lt;a href=&quot;class.domnode#domnode.props.nodevalue&quot;&gt;DOMElement::$nodeValue&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30fabe1a176266f8c689cda72b762af967959378" translate="yes" xml:space="preserve">
          <source>The value of the element. By default, an empty element will be created. You can also set the value later with &lt;a href=&quot;class.domnode#domnode.props.nodevalue&quot;&gt;DOMElement::$nodeValue&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7316a82d7c5f1663a7d9f66b587d8e8ee35fa831" translate="yes" xml:space="preserve">
          <source>The value of the entry to add.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="140a2dea0be2f058ab188848342811804bb4dc52" translate="yes" xml:space="preserve">
          <source>The value of the entry to add. If a non-string is passed, it will be converted to a string automatically if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deac3d9834a95556d577c4b8094d66c162a6636c" translate="yes" xml:space="preserve">
          <source>The value of the extracted node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de5286d4ac705945ef20abec9ceef0ca1278817" translate="yes" xml:space="preserve">
          <source>The value of the field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e228b503be3ff6fe9ee3b3e82cd332d1ad8f786" translate="yes" xml:space="preserve">
          <source>The value of the first node being compared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e819799635a1958b9a0ca0d1b3b44dcb29250c06" translate="yes" xml:space="preserve">
          <source>The value of the first node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00c650074816ba4c9f4ab49cd8edf63b7c349983" translate="yes" xml:space="preserve">
          <source>The value of the last node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de4b188b411954ee03d3374ca295216633a1670b" translate="yes" xml:space="preserve">
          <source>The value of the name property becomes the key, the value of the content property becomes the value of the returned array, so you can easily use standard array functions to traverse it or access single values. Special characters in the value of the name property are substituted with '_', the rest is converted to lower case. If two meta tags have the same name, only the last one is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="803e922fe180da0b4e1d87990deaf86ef42c5419" translate="yes" xml:space="preserve">
          <source>The value of the node on the top.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a90879989b357992bde20a85ff9f5258f3b045" translate="yes" xml:space="preserve">
          <source>The value of the note.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4107e8bd6f5b4206dde1c4a1fb66996e0d12130" translate="yes" xml:space="preserve">
          <source>The value of the operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b8fd72b94dd9069b6ad46e775c32cc34c682ca" translate="yes" xml:space="preserve">
          <source>The value of the optional &lt;code&gt;type&lt;/code&gt; can be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b903acffdfc9be8550df4b1b743cd8c557c0b58f" translate="yes" xml:space="preserve">
          <source>The value of the parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e64429ca77c8adc77075adbd7295052c175a322" translate="yes" xml:space="preserve">
          <source>The value of the parameter (as a string), or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if it's not set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39d8ac6369a7c060bc237181b386f379a5ac4a4c" translate="yes" xml:space="preserve">
          <source>The value of the parsed number or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91b777be65605829bb9ff79eb19b4be9ae345c3a" translate="yes" xml:space="preserve">
          <source>The value of the popped node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d023a76a071d5fe157562edd9c9edf5880f0ab16" translate="yes" xml:space="preserve">
          <source>The value of the processing instruction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="514b44e2e6725977e6c2dd2a1d17205460f99d04" translate="yes" xml:space="preserve">
          <source>The value of the second node being compared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad9f3c13f711f078e1ee7e1c1ed412788928e362" translate="yes" xml:space="preserve">
          <source>The value of the shifted node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="178961cf38bc23f5bb4c2058a5d0f4eb62b0c5f7" translate="yes" xml:space="preserve">
          <source>The value of the specified setting. The following table shows possible values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7524322ef4d02a66ab5a96af060dcd603bf4f6fc" translate="yes" xml:space="preserve">
          <source>The value of the static property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6be41a574ded34755f732f053a293fb022609f3" translate="yes" xml:space="preserve">
          <source>The value of the text node. If not supplied an empty text node is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47af7277bf35067ad3331f58a02036b0dbfec2ac" translate="yes" xml:space="preserve">
          <source>The value of the uniqueKey field declared in the schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef7f13d28cedd02235bea809591c266564392d29" translate="yes" xml:space="preserve">
          <source>The value of this node, depending on its type. Contrary to the W3C specification, the node value of &lt;a href=&quot;class.domelement&quot;&gt;DOMElement&lt;/a&gt; nodes is equal to &lt;a href=&quot;class.domnode#domnode.props.textcontent&quot;&gt;DOMNode::textContent&lt;/a&gt; instead of &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="952588f2dac4dc5d31a3da327411efd3ab6a5f0c" translate="yes" xml:space="preserve">
          <source>The value or priority (or both) of the current node, depending on the extract flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c01ac4a56c71894b3a5a491ef03f47fd51fa2899" translate="yes" xml:space="preserve">
          <source>The value or priority (or both) of the extracted node, depending on the extract flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6461070ba2bb983d6d569b60ac35b833cb037ded" translate="yes" xml:space="preserve">
          <source>The value or priority (or both) of the top node, depending on the extract flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c839f8444a2e7579632f3b3b04991fee40536d88" translate="yes" xml:space="preserve">
          <source>The value or values to insert.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30740119f7655d3816768f64575467c946cd6a66" translate="yes" xml:space="preserve">
          <source>The value passed to &lt;a href=&quot;function.mkdir&quot;&gt;mkdir()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1406e4a4060bd1a9bb36f7f4ed26749651bbf1a" translate="yes" xml:space="preserve">
          <source>The value retrived from the request is not safe. you should do some filtering work before you use it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05dea5cb2a54e4edf95a9e6ef7f5e020860c9db6" translate="yes" xml:space="preserve">
          <source>The value that was removed, or the &lt;code&gt;default&lt;/code&gt; value if provided and the &lt;code&gt;key&lt;/code&gt; could not be found in the map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf38290d30a29a0375f566f28c9656ccbb0bde8f" translate="yes" xml:space="preserve">
          <source>The value that was removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7f72866d720c1da6c2450572d5d2aabbbbb8d3" translate="yes" xml:space="preserve">
          <source>The value that will be assigned to &lt;var&gt;&lt;var&gt;$data&lt;/var&gt;&lt;/var&gt; is the value passed to &lt;a href=&quot;generator.send&quot;&gt;Generator::send()&lt;/a&gt;, or &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; if &lt;a href=&quot;generator.next&quot;&gt;Generator::next()&lt;/a&gt; is called instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebcfee0e4bfc3574f50192b908f62d4f5ed4d7c0" translate="yes" xml:space="preserve">
          <source>The value this callback returns must be in exactly the same serialized format that was originally passed for storage to the &lt;code&gt;write&lt;/code&gt; callback. The value returned will be unserialized automatically by PHP and used to populate the &lt;var&gt;&lt;var&gt;&lt;a href=&quot;reserved.variables.session&quot;&gt;$_SESSION&lt;/a&gt;&lt;/var&gt;&lt;/var&gt; superglobal. While the data looks similar to &lt;a href=&quot;function.serialize&quot;&gt;serialize()&lt;/a&gt; please note it is a different format which is specified in the &lt;a href=&quot;https://secure.php.net/manual/en/session.configuration.php#ini.session.serialize-handler&quot;&gt;session.serialize_handler&lt;/a&gt; ini setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ea1a4ae4b9c004c5d2afcb14b6504f978c0f7ea" translate="yes" xml:space="preserve">
          <source>The value to append.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e4f9b8e821f02c9868352da5ba29dfe13c7f392" translate="yes" xml:space="preserve">
          <source>The value to assign to the attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7b97e9f62aeb958ca8d1469a35d8682d015155a" translate="yes" xml:space="preserve">
          <source>The value to assign to the part of the prefix specified in &lt;code&gt;part&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6670f00c5667df36a57016cbe39c218eac4090b3" translate="yes" xml:space="preserve">
          <source>The value to be associated with the key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b588d93a5362ae4f1c9c11dd55a57781352c93d7" translate="yes" xml:space="preserve">
          <source>The value to be inserted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a765c1e9379c88068ffd3146589a3ab50a65e7a" translate="yes" xml:space="preserve">
          <source>The value to be replaced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dddeee6b6abddeb0b363f847ffca86c04af06b26" translate="yes" xml:space="preserve">
          <source>The value to be serialized. &lt;strong&gt;serialize()&lt;/strong&gt; handles all types, except the &lt;a href=&quot;language.types.resource&quot;&gt;resource&lt;/a&gt;-type. You can even &lt;strong&gt;serialize()&lt;/strong&gt; arrays that contain references to itself. Circular references inside the array/object you are serializing will also be stored. Any other reference will be lost.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56a18064352a1699987d0460ef497fa925656788" translate="yes" xml:space="preserve">
          <source>The value to be set on &lt;code&gt;option&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b47cb0b68b13dd19db0acd8e425ee86033d825c" translate="yes" xml:space="preserve">
          <source>The value to bind to a statement variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91a363e1bae9e0a9d686d5a1d9aca07100c8c000" translate="yes" xml:space="preserve">
          <source>The value to bind to the parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b180f1a6f1865173ccbd44a72682765d32c17c4b" translate="yes" xml:space="preserve">
          <source>The value to calculate the logarithm for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="224a586b5c96fa838ab0d25ab2f1c9ecb9042587" translate="yes" xml:space="preserve">
          <source>The value to check</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c7f0dc45506f97ed6ffa074315ff3e43f0a6629" translate="yes" xml:space="preserve">
          <source>The value to enqueue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="722bba62f23051b2840114dcc462eb29840e21b5" translate="yes" xml:space="preserve">
          <source>The value to escape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb08f309fd7720190c394b994291c0451d3948f8" translate="yes" xml:space="preserve">
          <source>The value to find.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6508ce402fab7c2255d1359782bb33edb5681f0" translate="yes" xml:space="preserve">
          <source>The value to format. Can be &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; or &lt;a href=&quot;language.types.float&quot;&gt;float&lt;/a&gt;, other values will be converted to a numeric value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f61c9f4bf767125bf4f7e5f73c0dcf22e278def8" translate="yes" xml:space="preserve">
          <source>The value to insert.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf784f45e197cea9520fd0f00c5733917f5aacb3" translate="yes" xml:space="preserve">
          <source>The value to look for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c2bfd5636945e3b73fbf35b817679c5cb2802c" translate="yes" xml:space="preserve">
          <source>The value to modify.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea2ffe31420bdec7791388a796b25604f236335" translate="yes" xml:space="preserve">
          <source>The value to process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ac7147587447b2ff699646b606944b69fd75c7a" translate="yes" xml:space="preserve">
          <source>The value to push into the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f727ad11bbc727cbc4b53ff6bbec0c947009450b" translate="yes" xml:space="preserve">
          <source>The value to push.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c5f72972e2bee06e2e4d770190cb49d48001e4" translate="yes" xml:space="preserve">
          <source>The value to round</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd17ddef8082c9c9fccb1598330a4e33c21f9085" translate="yes" xml:space="preserve">
          <source>The value to set the item to if it doesn't currently exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2254494fed0162797f13a311777f3e423938b270" translate="yes" xml:space="preserve">
          <source>The value to set this channel to, ranging from 0 to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27af97cf03ff5b42ffc052b39a9abfc7fee345ba" translate="yes" xml:space="preserve">
          <source>The value to set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26611747ab051faf83da9bb9d7c2556f3251cdff" translate="yes" xml:space="preserve">
          <source>The value to store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eccb445256a4b4b73773c6e59f12218150d45205" translate="yes" xml:space="preserve">
          <source>The value to unshift.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="425cc41dc86e015056f2549a325d55ed2878e5ce" translate="yes" xml:space="preserve">
          <source>The value to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95a0a40f1364e30294bfdf46cddbe38c8beb6963" translate="yes" xml:space="preserve">
          <source>The value which is used as the random seed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8395f069ae8d8d1be5883b3a1e938c50f5de51a" translate="yes" xml:space="preserve">
          <source>The value which will be used to get the IP address to use for the FTP &quot;PORT&quot; instruction. The &quot;PORT&quot; instruction tells the remote server to connect to our specified IP address. The string may be a plain IP address, a hostname, a network interface name (under Unix), or just a plain '-' to use the systems default IP address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36090b23e6b19abea403f7cf11708f739d6ebe0a" translate="yes" xml:space="preserve">
          <source>The value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b715512d2f8785cce1b98a8f315b06c82765bdde" translate="yes" xml:space="preserve">
          <source>The values of the array elements are either UNIX timestamps, &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if the sun is below the respective zenith for the whole day, or &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; if the sun is above the respective zenith for the whole day.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfab14cdde999ccca483f247b937e1f39b8366a0" translate="yes" xml:space="preserve">
          <source>The values of the current instance won't be affected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d73380ccc08753ec16a37654e8a538852c15f56" translate="yes" xml:space="preserve">
          <source>The values passed to the callback function are not consistent. In particular the span parameter can increase during image processing. Because of this calculating the percentage complete of an image operation is not trivial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bd0a975066318e282543ed8c4b9b7a840f0ad6a" translate="yes" xml:space="preserve">
          <source>The values set for any capturing subpatterns are those from the outermost level of the recursion at which the subpattern value is set. If the pattern above is matched against &lt;em&gt;(ab(cd)ef)&lt;/em&gt; the value for the capturing parentheses is &quot;ef&quot;, which is the last value taken on at the top level. If additional parentheses are added, giving &lt;em&gt;\( ( ( (?&amp;gt;[^()]+) | (?R) )* ) \)&lt;/em&gt; then the string they capture is &quot;ab(cd)ef&quot;, the contents of the top level parentheses. If there are more than 15 capturing parentheses in a pattern, PCRE has to obtain extra memory to store data during a recursion, which it does by using pcre_malloc, freeing it via pcre_free afterwards. If no memory can be obtained, it saves data for the first 15 capturing parentheses only, as there is no way to give an out-of-memory error from within a recursion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa37ac804b6578eaff508f8c151ac9a5c1cf6f9" translate="yes" xml:space="preserve">
          <source>The values to add to the front of the deque.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29a05fb6ec6332132d210ebfe542f633bc0affc0" translate="yes" xml:space="preserve">
          <source>The values to add to the front of the sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8997470977023dcf141e977cbb33b336a59d1858" translate="yes" xml:space="preserve">
          <source>The values to add to the front of the vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30227c05842007ed07497ac59d0f133278ed3f90" translate="yes" xml:space="preserve">
          <source>The values to add.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfb58f44ba1d218dfb67c941b1a438f0cf364abd" translate="yes" xml:space="preserve">
          <source>The values to prepend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5bfbc618e1904af2a5f4424a6c9d34d3bf7a001" translate="yes" xml:space="preserve">
          <source>The values to push into the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2f28b3f30432eca7e4fb0122ced3cce40f6af07" translate="yes" xml:space="preserve">
          <source>The values to push onto the end of the &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d699865b69ba871c9f8c3ae92a0513012cdc0c27" translate="yes" xml:space="preserve">
          <source>The values to push onto the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a026a91c0deaca6858bbb55aa0aab100314d9526" translate="yes" xml:space="preserve">
          <source>The values to remove.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30a1adba35f2335064501f02ded5da33e580e0d2" translate="yes" xml:space="preserve">
          <source>The variable being converted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa4b809a85a5c8d4aed498b8b79d98aeacfe03d" translate="yes" xml:space="preserve">
          <source>The variable being evaluated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41d43914d2afad1c392a963b0c4a653f87e02d6" translate="yes" xml:space="preserve">
          <source>The variable being type checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e33236e946c02fd3a0373884b0dea95e089f715d" translate="yes" xml:space="preserve">
          <source>The variable key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0f853bee6910ad176cbf308d91ad6d71f2a4129" translate="yes" xml:space="preserve">
          <source>The variable name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6499dba6cfc4f8064a074000d1141a84e458f9be" translate="yes" xml:space="preserve">
          <source>The variable that is being converted to a &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f663f229e2bb98b2c38538444106bf48a9b4bb46" translate="yes" xml:space="preserve">
          <source>The variable to be bound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="407a7e7f4482f576abb82aae749719acdd5f6304" translate="yes" xml:space="preserve">
          <source>The variable to be checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1752b912b13ea673f3950b0fa2352ce4e382215e" translate="yes" xml:space="preserve">
          <source>The variable to be unset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fead950ea9660a0e9681a6de74ea9f9f3c4191a" translate="yes" xml:space="preserve">
          <source>The variable to store</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fe18c9aaa53652d2e102bee3b50f67cc1b53647" translate="yes" xml:space="preserve">
          <source>The variable value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eeead6a476d9cc8eb2e3e080fccd0c1c974e662" translate="yes" xml:space="preserve">
          <source>The variable you want to dump.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87cf44574c561d9f6d324e3ee34b1e63792cbebb" translate="yes" xml:space="preserve">
          <source>The variable you want to export.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9002fa8590e83966d44a85668c9e02bcbb0f70f9" translate="yes" xml:space="preserve">
          <source>The variable. All &lt;a href=&quot;https://secure.php.net/manual/en/language.types.php&quot;&gt;variable types&lt;/a&gt; that &lt;a href=&quot;function.serialize&quot;&gt;serialize()&lt;/a&gt; supports may be used: generally this means all types except for resources and some internal objects that cannot be serialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751eed2dcc1a3a60ea3c2baba5976c2ca0906fe8" translate="yes" xml:space="preserve">
          <source>The variables in &lt;var&gt;&lt;var&gt;$_REQUEST&lt;/var&gt;&lt;/var&gt; are provided to the script via the GET, POST, and COOKIE input mechanisms and therefore could be modified by the remote user and cannot be trusted. The presence and order of variables listed in this array is defined according to the PHP &lt;a href=&quot;https://secure.php.net/manual/en/ini.core.php#ini.variables-order&quot;&gt;variables_order&lt;/a&gt; configuration directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65934320fb6aade2a04c13137993c3a86346511b" translate="yes" xml:space="preserve">
          <source>The version array is filled in with the version information for the Unicode standard that is currently used by ICU. For example, Unicode version 3.1.1 is represented as an array with the values &lt;em&gt;[3, 1, 1, 0]&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1380e13536e73b828ee66bec2569b79aba8c830f" translate="yes" xml:space="preserve">
          <source>The version number of the &lt;code&gt;feature&lt;/code&gt; to test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d5416e29238ac1557c0d5c2fa5b77cd6a659d49" translate="yes" xml:space="preserve">
          <source>The version number of the &lt;code&gt;feature&lt;/code&gt; to test. In level 2, this can be either &lt;em&gt;2.0&lt;/em&gt; or &lt;em&gt;1.0&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="810f591a612807cc3d51df31188f6362c70c0e17" translate="yes" xml:space="preserve">
          <source>The version number of the document as part of the XML declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24ff11463f24a5c1f24da8c5633654d19e4578a" translate="yes" xml:space="preserve">
          <source>The version of the extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21b90affa2593feb534509d00ff2f44257ceb35f" translate="yes" xml:space="preserve">
          <source>The vertical resolution in DPI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="344d1f21fc6c32cbb9d95c90667bb28aaabc7026" translate="yes" xml:space="preserve">
          <source>The vertical resolution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40cccb51faec6abd28566e32e4cea9e091c7ee79" translate="yes" xml:space="preserve">
          <source>The visibility of a property, a method or (as of PHP 7.1.0) a constant can be defined by prefixing the declaration with the keywords &lt;em&gt;public&lt;/em&gt;, &lt;em&gt;protected&lt;/em&gt; or &lt;em&gt;private&lt;/em&gt;. Class members declared public can be accessed everywhere. Members declared protected can be accessed only within the class itself and by inheriting and parent classes. Members declared as private may only be accessed by the class that defines the member.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0b9a46c8420476034f19b9622ce85e4d823b5af" translate="yes" xml:space="preserve">
          <source>The wait function suspends execution of the current process until a child has exited, or until a signal is delivered whose action is to terminate the current process or to call a signal handling function. If a child has already exited by the time of the call (a so-called &quot;zombie&quot; process), the function returns immediately. Any system resources used by the child are freed. Please see your system's wait(2) man page for specific details as to how wait works on your system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d798ea431682560ffb741afca58cc38d4fff19af" translate="yes" xml:space="preserve">
          <source>The way invalid/numeric keys and collisions are treated is determined by the extraction &lt;code&gt;flags&lt;/code&gt;. It can be one of the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c036adbd3a1514ea57dd229b0c62224b4793726" translate="yes" xml:space="preserve">
          <source>The week day deemed to start a week, either the default value for this locale or the value set with &lt;a href=&quot;intlcalendar.setfirstdayofweek&quot;&gt;IntlCalendar::setFirstDayOfWeek()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5524a417dc0c11257d334cdc3503676c5d0ee262" translate="yes" xml:space="preserve">
          <source>The weight of the server relative to the total weight of all the servers in the pool. This controls the probability of the server being selected for operations. This is used only with consistent distribution option and usually corresponds to the amount of memory available to memcache on that server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ee05fb5f2b48210f76bb5a5757960e041cd28d" translate="yes" xml:space="preserve">
          <source>The weights must be positive 32-bit integers, so be careful not to hit 32-bit integer maximum. The final weight is a 32-bit integer too. Default weight value is 1. Unknown field names are silently ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a2165f8dc7f228f459e48b36c0b2a146b334e32" translate="yes" xml:space="preserve">
          <source>The white point</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0835811ee85d15cb6577b565fb4bc79731cea411" translate="yes" xml:space="preserve">
          <source>The white point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4626df563bdbd1786f9fa3d9b4e12191563643b7" translate="yes" xml:space="preserve">
          <source>The white x-point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb387e0849345d5f02e5e699d17825ce64f81d1a" translate="yes" xml:space="preserve">
          <source>The white y-point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05de17f076cb9893625cc64a4eb110fbce5cbf69" translate="yes" xml:space="preserve">
          <source>The width in pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ade42f0d149e22d7ec6c43f07dd1fce954291ca1" translate="yes" xml:space="preserve">
          <source>The width of &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;&lt;code&gt;str&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5876e00e8eb8a720d8bd26f52dd12e880dd488e1" translate="yes" xml:space="preserve">
          <source>The width of the border</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e2978047cb0f3d671ae57322a4d881189f9329" translate="yes" xml:space="preserve">
          <source>The width of the crop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fe9873804e239f40dc152c2f14cfc91ae733691" translate="yes" xml:space="preserve">
          <source>The width of the desired trim. Negative widths count from the end of the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b51af925dc5efe4fa78c2012efa878c7090605" translate="yes" xml:space="preserve">
          <source>The width of the extracted region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="610ae6359dee463c0499aabb6f810ec47c9f4930" translate="yes" xml:space="preserve">
          <source>The width of the field, as specified in the table definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1fd5b6bd6ca7415e55dbe9a6d613e2655538d01" translate="yes" xml:space="preserve">
          <source>The width of the field, in bytes, as specified in the table definition. Note that this number (bytes) might differ from your table definition value (characters), depending on the character set you use. For example, the character set utf8 has 3 bytes per character, so varchar(10) will return a length of 30 for utf8 (10*3), but return 10 for latin1 (10*1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84ba042a909ba6b64b808fd60c4b58267775729b" translate="yes" xml:space="preserve">
          <source>The width of the region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa62fe7367e045c645c1a34396b8eafaf0ca8b3" translate="yes" xml:space="preserve">
          <source>The width of the target size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a7b98232efbd7dbf156aec3b7a0c3523779d42" translate="yes" xml:space="preserve">
          <source>The width of the thumbnail</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf70b9f13a1f6e4a4d773ea51ec9fe9b2ec2558" translate="yes" xml:space="preserve">
          <source>The width to scale the image to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ef53753575f6aa0d0ef27fa3163cc762db0b82" translate="yes" xml:space="preserve">
          <source>The width to which the output of format() is padded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="912783660b3a0e5a6b3763c7d9a094fab64047d4" translate="yes" xml:space="preserve">
          <source>The worker in this example has an artificial delay added during processing of the string to be reversed. After each delay it calls &lt;a href=&quot;gearmanjob.status&quot;&gt;GearmanJob::status()&lt;/a&gt; which the client then picks up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="862646effc49e6d285020388fcd1f41524b5d52f" translate="yes" xml:space="preserve">
          <source>The worker in this example has an artificial delay introduced to mimic a long running job. The client script periodically checks the status of the running job.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19fea78cbfb743ceec41a57767688a98cc4607b5" translate="yes" xml:space="preserve">
          <source>The worker to stack the task onto, indexed from &lt;em&gt;0&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bdd1c9d08b8975e36a17e967b4c4405ea28ccc1" translate="yes" xml:space="preserve">
          <source>The wrapper name to be registered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea0d78b6ca10ba26fe26061a7de3bd34e91c0ee2" translate="yes" xml:space="preserve">
          <source>The wrapper used in &lt;code&gt;oldname&lt;/code&gt;&lt;em&gt;must&lt;/em&gt; match the wrapper used in &lt;code&gt;newname&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bbbd51536a690cd8e96759314de1c8ea7f06504" translate="yes" xml:space="preserve">
          <source>The written data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf91673e4dfcd257fdd5709f4cb3d34357b60af4" translate="yes" xml:space="preserve">
          <source>The x coordinate where text is drawn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33a7d38b6eca3f0b9e85047aed9d9b24639047bc" translate="yes" xml:space="preserve">
          <source>The x offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a407a86acd35e85f35c84790f23697c6c0815e" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the lower right corner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="477bdd501b059af7a4bd084e241817679a9df694" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the pixel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="760b1df1f528543053dee310ecf99669b2417ffd" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c7bb7d0a904ff0cd8cd2d766f44bab6313c22b3" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper left corner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5284608fe411d5f3c5cf09949a0e211f5cf9c33c" translate="yes" xml:space="preserve">
          <source>The xml:lang scope which the node resides</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cdd02c7cf877a144fc17bf4a6a429c794c59cea" translate="yes" xml:space="preserve">
          <source>The y coordinate where text is drawn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74e3f917f1dc69192a320557573709c51f0428a6" translate="yes" xml:space="preserve">
          <source>The y offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc9d7c77c065d2c4ad890506c03028fd84c5b2a8" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the lower right corner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c1794b1bc4fe1355ffa0b630d53a0b5b9ad3bfc" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the pixel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2642aabcfb980cc939d672fa62cf202b348ce58a" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aab570526fece88e4f068097c6a1f2d49097ee4" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper left corner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="767e14e549ae0ab4440ab9a87940618512fba9e1" translate="yes" xml:space="preserve">
          <source>The y-ordinate. This sets the position of the fonts baseline, not the very bottom of the character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="109448d45cda92cd38e03fa0cd8353b386cdad87" translate="yes" xml:space="preserve">
          <source>The year</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e33d8ca45c0d65c6e520fba98df175d7bcd01b" translate="yes" xml:space="preserve">
          <source>The year as a number between -4713 and 9999</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d3f637ceb5cc152d13c85d0e976d7e51648f5ab" translate="yes" xml:space="preserve">
          <source>The year as a number between -4714 and 9999. Negative numbers mean years B.C., positive numbers mean years A.D. Note that there is no year &lt;em&gt;0&lt;/em&gt;; December 31, 1 B.C. is immediately followed by January 1, 1 A.D.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a0bb0be4f7b3a69786a74cd7353492e5c74952" translate="yes" xml:space="preserve">
          <source>The year as a number between 1 and 14</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="032267e7c12600c65f9846f8da991bbf368854f3" translate="yes" xml:space="preserve">
          <source>The year as a number between 1 and 9999</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ace06deda62f96d92e0f6b3d9cf2e66893d2e87" translate="yes" xml:space="preserve">
          <source>The year as a number between 1970 an 2037. If omitted, defaults to the current year according to the local time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5dc781268d87e16a9a28712ba62ba097042fc0e" translate="yes" xml:space="preserve">
          <source>The year as a number, the valid range depends on the &lt;code&gt;calendar&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc313b99be724f7e951a835c2f56328c39daa6fa" translate="yes" xml:space="preserve">
          <source>The year as a positive number. If omitted, defaults to the current year according to the local time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa9d3bcc8967d4bf87f581454a7eefad8cc553f" translate="yes" xml:space="preserve">
          <source>The year is between 1 and 32767 inclusive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b11876dd732f0a13360d7df2e9aab639a51d73b" translate="yes" xml:space="preserve">
          <source>The zero-based line number to seek to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bca40d4e294c1265878712f0ac627ff00c006829" translate="yes" xml:space="preserve">
          <source>The zero-based numeric position to seek to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbd00615a1621d44c1b90c329366646f02041d8b" translate="yes" xml:space="preserve">
          <source>The zero-based positional index to return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8df19e0c28bdb29e3b5793f699a33563daf21d40" translate="yes" xml:space="preserve">
          <source>The zlib window size (logarithmic) in range 8..15; defaults to 15.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c50e55ac8b3315ba88f6dc9c58941da63932be" translate="yes" xml:space="preserve">
          <source>Then name of the parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27ef7d9f4edac45f3282c005083cb51db05e80ed" translate="yes" xml:space="preserve">
          <source>Then the autoload examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="284c8cc24a5dcb7868b0f2308e25b9b33c26becd" translate="yes" xml:space="preserve">
          <source>Then, if user didn't specify callback when registering concurrent call, this callback will be used to handle response, otherwise, the callback specified while registering will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9f04a4588ce1f316c1127e1d23dfba27106d4a2" translate="yes" xml:space="preserve">
          <source>There are a few implementation details of the namespace implementations that are helpful to understand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecffc7db3f14249fddbff4073a0582e57b302cb7" translate="yes" xml:space="preserve">
          <source>There are a few pitfalls to be aware of. Before PHP version 5.1.0, &lt;em&gt;instanceof&lt;/em&gt; would call &lt;a href=&quot;function.autoload&quot;&gt;__autoload()&lt;/a&gt; if the class name did not exist. In addition, if the class was not loaded, a fatal error would occur. This can be worked around by using a dynamic class reference, or a string variable containing the class name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cae8e1e27c954048099cdd970dd2f88f4f171c5" translate="yes" xml:space="preserve">
          <source>There are a number of useful functions for &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; manipulation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d943ab7fba6134a80d423612edd1b956f23774a" translate="yes" xml:space="preserve">
          <source>There are also &lt;a href=&quot;https://secure.php.net/manual/en/ref.url.php&quot;&gt;functions for URL strings&lt;/a&gt;, and functions to encrypt/decrypt strings (&lt;a href=&quot;https://secure.php.net/manual/en/ref.sodium.php&quot;&gt;Sodium&lt;/a&gt; and &lt;a href=&quot;https://secure.php.net/manual/en/ref.hash.php&quot;&gt;Hash&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c304c08170d123441b8e681c50cd13816daa932" translate="yes" xml:space="preserve">
          <source>There are also some related &lt;a href=&quot;language.constants.predefined&quot;&gt; Predefined PHP constants&lt;/a&gt; that may come in handy, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="611ea5b9409a4fdb315e9b06ae22fdb316bb2e93" translate="yes" xml:space="preserve">
          <source>There are at the time of writing some oddities in Perl 5.005_02 concerned with the settings of captured strings when part of a pattern is repeated. For example, matching &quot;aba&quot; against the pattern /^(a(b)?)+$/ sets $2 to the value &quot;b&quot;, but matching &quot;aabbaa&quot; against /^(aa(bb)?)+$/ leaves $2 unset. However, if the pattern is changed to /^(aa(b(b))?)+$/ then $2 (and $3) get set. In Perl 5.004 $2 is set in both cases, and that is also &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; of PCRE. If in the future Perl changes to a consistent state that is different, PCRE may change to follow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db848075c444d3d2c78dd9ba694fbbc628e44e3d" translate="yes" xml:space="preserve">
          <source>There are methods providing access to the &lt;em&gt;default event loop&lt;/em&gt; in &lt;strong&gt;Ev&lt;/strong&gt; class(e.g. &lt;a href=&quot;ev.iteration&quot;&gt;Ev::iteration()&lt;/a&gt; , &lt;a href=&quot;ev.depth&quot;&gt;Ev::depth()&lt;/a&gt; etc.) For &lt;em&gt;custom loops&lt;/em&gt; (created with &lt;a href=&quot;evloop.construct&quot;&gt;EvLoop::__construct()&lt;/a&gt; ) these values may be accessed via corresponding properties and methods of the &lt;a href=&quot;class.evloop&quot;&gt;EvLoop&lt;/a&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="066cad91590cdbc4363c96439a86cdd22256bae2" translate="yes" xml:space="preserve">
          <source>There are nine magical constants that change depending on where they are used. For example, the value of &lt;strong&gt;&lt;code&gt;__LINE__&lt;/code&gt;&lt;/strong&gt; depends on the line that it's used on in your script. All these &quot;magical&quot; constants are resolved at compile time, unlike regular constants, which are resolved at runtime. These special constants are case-insensitive and are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a31644ecc7062646888d955dac5596cf4e36a8dc" translate="yes" xml:space="preserve">
          <source>There are quite a few useful functions for working with arrays. See the &lt;a href=&quot;https://secure.php.net/manual/en/ref.array.php&quot;&gt;array functions&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec07bc4354a41726ca440b1f18fc6460f0cb210" translate="yes" xml:space="preserve">
          <source>There are some historical exceptions to the above rule, where some internal objects could be serialized without implementing the interface or exposing the methods. Notably, the &lt;a href=&quot;class.arrayobject&quot;&gt;ArrayObject&lt;/a&gt; prior to PHP 5.2.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13306c89d0c358b55eda60e6a16eaab9242a7263" translate="yes" xml:space="preserve">
          <source>There are some nice functions to handle classes and objects. You might want to take a look at the &lt;a href=&quot;https://secure.php.net/manual/en/ref.classobj.php&quot;&gt;Class/Object Functions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c10ef7664d0296ab060437325345f1f18a2ce88c" translate="yes" xml:space="preserve">
          <source>There are three basic operations performed using references: &lt;a href=&quot;language.references.whatdo#language.references.whatdo.assign&quot;&gt;assigning by reference&lt;/a&gt;, &lt;a href=&quot;language.references.whatdo#language.references.whatdo.pass&quot;&gt;passing by reference&lt;/a&gt;, and &lt;a href=&quot;language.references.whatdo#language.references.whatdo.return&quot;&gt;returning by reference&lt;/a&gt;. This section will give an introduction to these operations, with links for further reading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9df871a50233baa1c3b4785820b32d401bbb40cd" translate="yes" xml:space="preserve">
          <source>There are three scenarios where a &lt;strong&gt;TypeError&lt;/strong&gt; may be thrown. The first is where the argument type being passed to a function does not match its corresponding declared parameter type. The second is where a value being returned from a function does not match the declared function return type. The third is where an invalid number of arguments are passed to a built-in PHP function (strict mode only).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffa540f2e14a22153cd35f488fe13dc3f6789dea" translate="yes" xml:space="preserve">
          <source>There are two &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; operators. The first is the concatenation operator ('.'), which returns the concatenation of its right and left arguments. The second is the concatenating assignment operator ('&lt;em&gt;.=&lt;/em&gt;'), which appends the argument on the right side to the argument on the left side. Please read &lt;a href=&quot;language.operators.assignment&quot;&gt;Assignment Operators&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d14656d97a723df7f8dd20c81ccd30afbfe6f7" translate="yes" xml:space="preserve">
          <source>There are two different sets of meta-characters: those that are recognized anywhere in the pattern except within square brackets, and those that are recognized in square brackets. Outside square brackets, the meta-characters are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="229b131e72d6c6ace669f6e4af82b70406d131f0" translate="yes" xml:space="preserve">
          <source>There are two kinds of condition. If the text between the parentheses consists of a sequence of digits, then the condition is satisfied if the capturing subpattern of that number has previously matched. Consider the following pattern, which contains non-significant white space to make it more readable (assume the &lt;a href=&quot;reference.pcre.pattern.modifiers&quot;&gt;PCRE_EXTENDED&lt;/a&gt; option) and to divide it into three parts for ease of discussion:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07744de5c80f967235f1c416918a6f584ddc88a3" translate="yes" xml:space="preserve">
          <source>There are two orthogonal sets of modes that can be set:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="990c54cbc93ecf0c07da67850f56e8e65fe9672f" translate="yes" xml:space="preserve">
          <source>There are two special characters you can pass as part of the &lt;code&gt;pattern&lt;/code&gt;: '&lt;em&gt;*&lt;/em&gt;' and '&lt;em&gt;%&lt;/em&gt;'. '&lt;em&gt;*&lt;/em&gt;' means to return all mailboxes. If you pass &lt;code&gt;pattern&lt;/code&gt; as '&lt;em&gt;*&lt;/em&gt;', you will get a list of the entire mailbox hierarchy. '&lt;em&gt;%&lt;/em&gt;' means to return the current level only. '&lt;em&gt;%&lt;/em&gt;' as the &lt;code&gt;pattern&lt;/code&gt; parameter will return only the top level mailboxes; '&lt;em&gt;~/mail/%&lt;/em&gt;' on &lt;em&gt;UW_IMAPD&lt;/em&gt; will return every mailbox in the &lt;var&gt;~/mail&lt;/var&gt; directory, but none in subfolders of that directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9af11be68133f9fc934230795d6c772cb2b0ca5" translate="yes" xml:space="preserve">
          <source>There are two special-case header calls. The first is a header that starts with the string &quot;&lt;em&gt;HTTP/&lt;/em&gt;&quot; (case is not significant), which will be used to figure out the HTTP status code to send. For example, if you have configured Apache to use a PHP script to handle requests for missing files (using the &lt;em&gt;ErrorDocument&lt;/em&gt; directive), you may want to make sure that your script generates the proper status code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89b05bc16164e00d984f2a29fbe09b73a5892c05" translate="yes" xml:space="preserve">
          <source>There are two types of syntax: a &lt;a href=&quot;language.types.string#language.types.string.parsing.simple&quot;&gt;simple&lt;/a&gt; one and a &lt;a href=&quot;language.types.string#language.types.string.parsing.complex&quot;&gt;complex&lt;/a&gt; one. The simple syntax is the most common and convenient. It provides a way to embed a variable, an &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; value, or an &lt;a href=&quot;language.types.object&quot;&gt;object&lt;/a&gt; property in a &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; with a minimum of effort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="676a5437ee514a409124ca9302b0232e2a0cc4aa" translate="yes" xml:space="preserve">
          <source>There are useful &lt;a href=&quot;https://secure.php.net/manual/en/datetime.constants.php&quot;&gt;constants&lt;/a&gt; of standard date/time formats that can be used to specify the &lt;code&gt;format&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cabb759226ef49028153b3747a1665cd11b4b8e9" translate="yes" xml:space="preserve">
          <source>There can only be one writer for one database file. When you use dba on a web server and more than one request requires write operations they can only be done one after another. Also read during write is not allowed. The dba extension uses locks to prevent this. See the following table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd3b432844a43364697720812078fdf2bf61effb" translate="yes" xml:space="preserve">
          <source>There is a &lt;code&gt;flags&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7419a09369578ff377e3f703371bd155c5345ff5" translate="yes" xml:space="preserve">
          <source>There is a bug in Microsoft Internet Explorer 4.01 that prevents this from working. There is no workaround. There is also a bug in Microsoft Internet Explorer 5.5 that interferes with this, which can be resolved by upgrading to Service Pack 2 or later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf7e0a5c1d42c73f07dbb88a0e20354e98fa3adc" translate="yes" xml:space="preserve">
          <source>There is a problem due to palette image limitations (255+1 colors). Resampling or filtering an image commonly needs more colors than 255, a kind of approximation is used to calculate the new resampled pixel and its color. With a palette image we try to allocate a new color, if that failed, we choose the closest (in theory) computed color. This is not always the closest visual color. That may produce a weird result, like blank (or visually blank) images. To skip this problem, please use a truecolor image as a destination image, such as one created by &lt;a href=&quot;function.imagecreatetruecolor&quot;&gt;imagecreatetruecolor()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56fbeb80bdcb3faaa87b407fbcf2aa9488573690" translate="yes" xml:space="preserve">
          <source>There is also a &lt;em&gt;features&lt;/em&gt; option which can be set to &lt;strong&gt;&lt;code&gt;SOAP_WAIT_ONE_WAY_CALLS&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;SOAP_SINGLE_ELEMENT_ARRAYS&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;SOAP_USE_XSI_ARRAY_TYPE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30249a1986741e4b261ff03092be62a5fcb5460b" translate="yes" xml:space="preserve">
          <source>There is just one syntax for &lt;em&gt;do-while&lt;/em&gt; loops:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48302f7f2e807183053360f9613b64b7435d0248" translate="yes" xml:space="preserve">
          <source>There is no &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; division operator in PHP. &lt;em&gt;1/2&lt;/em&gt; yields the &lt;a href=&quot;language.types.float&quot;&gt;float&lt;/a&gt;&lt;em&gt;0.5&lt;/em&gt;. The value can be casted to an &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; to round it towards zero, or the &lt;a href=&quot;function.round&quot;&gt;round()&lt;/a&gt; function provides finer control over rounding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c0a4260c111703a27d86eb47e62c01b33a58577" translate="yes" xml:space="preserve">
          <source>There is no &lt;em&gt;REQUEST_TIME&lt;/em&gt; key in &lt;strong&gt;&lt;code&gt;INPUT_SERVER&lt;/code&gt;&lt;/strong&gt; array because it is inserted into the &lt;var&gt;&lt;var&gt;&lt;a href=&quot;reserved.variables.server&quot;&gt;$_SERVER&lt;/a&gt;&lt;/var&gt;&lt;/var&gt; later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f84e338251505923cb270ea7b9fb1af4f4c7f085" translate="yes" xml:space="preserve">
          <source>There is no function named &lt;strong&gt;main()&lt;/strong&gt; except in the PHP source. In PHP 4.3.0, a new type of error handling in the PHP source (php_error_docref) was introduced. One feature is to provide links to a manual page in PHP error messages when the PHP directives &lt;a href=&quot;https://secure.php.net/manual/en/errorfunc.configuration.php#ini.html-errors&quot;&gt;html_errors&lt;/a&gt; (on by default) and &lt;a href=&quot;https://secure.php.net/manual/en/errorfunc.configuration.php#ini.docref-root&quot;&gt;docref_root&lt;/a&gt; (on by default until PHP 4.3.2) are set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587ffe28e5c4fb15a74efa27ace32a4bca5bdab5" translate="yes" xml:space="preserve">
          <source>There is no limit for the number of watchers for the same signal, but only within the same loop, i.e. one can watch for &lt;strong&gt;&lt;code&gt;SIGINT&lt;/code&gt;&lt;/strong&gt; in the default loop and for &lt;strong&gt;&lt;code&gt;SIGIO&lt;/code&gt;&lt;/strong&gt; in another loop, but it is not allowed to watch for &lt;strong&gt;&lt;code&gt;SIGINT&lt;/code&gt;&lt;/strong&gt; in both the default loop and another loop at the same time. At the moment, &lt;strong&gt;&lt;code&gt;SIGCHLD&lt;/code&gt;&lt;/strong&gt; is permanently tied to the default loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dccfa67a8eea7f50c493cb03593090914de4480" translate="yes" xml:space="preserve">
          <source>There is no name conflict, even though the class &lt;em&gt;MyClass&lt;/em&gt; exists within the &lt;em&gt;my\stuff&lt;/em&gt; namespace, because the MyClass definition is in a separate file. However, the next example causes a fatal error on name conflict because MyClass is defined in the same file as the use statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f89f6dcf8425a52d4503a620083919077da230b6" translate="yes" xml:space="preserve">
          <source>There is no way to return another column from the same row if you use &lt;strong&gt;PDOStatement::fetchColumn()&lt;/strong&gt; to retrieve data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d3459a7a4f20d9f287f6d37a283bf55645b0385" translate="yes" xml:space="preserve">
          <source>There is one more expression that may seem odd if you haven't seen it in other languages, the ternary conditional operator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71ea08711887bc0d616238ad6bb564f858e3256f" translate="yes" xml:space="preserve">
          <source>There is only one iteration parameter you can modify.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c65c7407010b6c8c1fc65938ff424f288a49602a" translate="yes" xml:space="preserve">
          <source>There is only one value of type &lt;a href=&quot;language.types.null&quot;&gt;null&lt;/a&gt;, and that is the case-insensitive constant &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd16bb952a2e297608bb626d62944cfb3d55949f" translate="yes" xml:space="preserve">
          <source>There may be more than one back reference to the same subpattern. If a subpattern has not actually been used in a particular match, then any back references to it always fail. For example, the pattern &lt;em&gt;(a|(bc))\2&lt;/em&gt; always fails if it starts to match &quot;a&quot; rather than &quot;bc&quot;. Because there may be up to 99 back references, all digits following the backslash are taken as part of a potential back reference number. If the pattern continues with a digit character, then some delimiter must be used to terminate the back reference. If the &lt;a href=&quot;reference.pcre.pattern.modifiers&quot;&gt;PCRE_EXTENDED&lt;/a&gt; option is set, this can be whitespace. Otherwise an empty comment can be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aee933df2e49f4979a38ae35fe968fb1e1757896" translate="yes" xml:space="preserve">
          <source>There may be several &lt;em&gt;elseif&lt;/em&gt;s within the same &lt;em&gt;if&lt;/em&gt; statement. The first &lt;em&gt;elseif&lt;/em&gt; expression (if any) that evaluates to &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; would be executed. In PHP, you can also write 'else if' (in two words) and the behavior would be identical to the one of 'elseif' (in a single word). The syntactic meaning is slightly different (if you're familiar with C, this is the same behavior) but the bottom line is that both would result in exactly the same behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf68917c0daec571588df2916c4f104673327772" translate="yes" xml:space="preserve">
          <source>There were some other ways of accessing user input in old PHP versions. These are listed below. See changelog at the bottom of the page for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e5f9e5069427acad3a87b1111dc0d5eb0ffd7c0" translate="yes" xml:space="preserve">
          <source>Therefore, it is recommended to execute GC periodically for production systems using, e.g., &quot;cron&quot; for UNIX-like systems. Make sure to disable probability based GC by setting &lt;a href=&quot;https://secure.php.net/manual/en/session.configuration.php#ini.session.gc-probability&quot;&gt;session.gc_probability&lt;/a&gt; to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8411f4c440ba3b548886804b6bb23898fb8e67e4" translate="yes" xml:space="preserve">
          <source>These are the differences between constants and variables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="259b827d0c5e6b62e4d0c0a9a752b76651dbda5f" translate="yes" xml:space="preserve">
          <source>These arguments are directly fetched without filtering, it should be carefully processed before use them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196f210975d057fc759e97d21192fae1fe1a07f9" translate="yes" xml:space="preserve">
          <source>These assertions may not appear in character classes (but note that &quot;&lt;em&gt;\b&lt;/em&gt;&quot; has a different meaning, namely the backspace character, inside a character class).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74dbc337c7d11370d75e44ba74f2cb86ce0accdc" translate="yes" xml:space="preserve">
          <source>These character type sequences can appear both inside and outside character classes. They each match one character of the appropriate type. If the current matching point is at the end of the subject string, all of them fail, since there is no character to match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be004c636cd2ce33cc903d5c5976d9b74f518902" translate="yes" xml:space="preserve">
          <source>These characters are part of the query syntax and must be escaped</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e92c0d0c89a5476c3f5263157470e232340b243" translate="yes" xml:space="preserve">
          <source>These constants are used to specify different formats in the constructor for DateType and TimeType.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7100dcc9c01f866ed8d2360e55ed03beb0b2b5c" translate="yes" xml:space="preserve">
          <source>These constants define how the Locales are parsed or composed. They should be used as keys in the argument array to &lt;a href=&quot;locale.composelocale&quot;&gt;locale_compose()&lt;/a&gt; and are returned from &lt;a href=&quot;locale.parselocale&quot;&gt;locale_parse()&lt;/a&gt; as keys of the returned associative &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47f764b48b467d693fc191f30838d1acd06711c3" translate="yes" xml:space="preserve">
          <source>These constants define how the numbers are parsed or formatted. They should be used as arguments to &lt;a href=&quot;numberformatter.format&quot;&gt;numfmt_format()&lt;/a&gt; and &lt;a href=&quot;numberformatter.parse&quot;&gt;numfmt_parse()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30ec9f3ad778b56c2b38b260f5eb2846464b12e8" translate="yes" xml:space="preserve">
          <source>These constants describe the choice of the locale for getLocalte method of different classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d198086a21f602b2419aca7fca4ae7f8b41f380a" translate="yes" xml:space="preserve">
          <source>These formats are based on the &lt;a href=&quot;http://en.wikipedia.org/wiki/Iso8601#Durations&quot;&gt;&amp;raquo; ISO 8601 duration specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2ff1b78fc971e881cdb8449ba014d1bb12c4186" translate="yes" xml:space="preserve">
          <source>These optional parameters will be passed to the default class constructor during object creation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5abb681523c395cea23667756856ebfa4fd6a62d" translate="yes" xml:space="preserve">
          <source>These options are not bitfields - you may specify one only!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7ef205ab114ce95dd125b8cd3a914377abb2f5a" translate="yes" xml:space="preserve">
          <source>These parameters are integers between 0 and 255 or hexadecimals between 0x00 and 0xFF.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dad98de2ab3235f42d06ea3b447b9ff852c9190b" translate="yes" xml:space="preserve">
          <source>These routines only convert dates in years 1 through 14 (Gregorian dates 22 September 1792 through 22 September 1806). This more than covers the period when the calendar was in use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62e2684637a7643df50b37488b504e8f2cb53f88" translate="yes" xml:space="preserve">
          <source>These rules are described in the &lt;a href=&quot;http://userguide.icu-project.org/boundaryanalysis#TOC-RBBI-Rules&quot;&gt;&amp;raquo; ICU Boundary Analysis User Guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a38ec0884551860ea5b52db69df5c4b9400d14" translate="yes" xml:space="preserve">
          <source>These semantics are only applicable to pthreads v2 - they have been removed in pthreads v3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa20d3814caa1c5da102723a50e0b940f6e0c111" translate="yes" xml:space="preserve">
          <source>These styles are used by the &lt;a href=&quot;numberformatter.create&quot;&gt;numfmt_create()&lt;/a&gt; to define the type of the formatter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da52a9f7c6c62fcd5aeeca47d8e01af6b3ec6493" translate="yes" xml:space="preserve">
          <source>These superglobal variables are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abe4dfe859208a8e38c1014087d5adb54b5e01d8" translate="yes" xml:space="preserve">
          <source>These variables are imported into PHP's global namespace from the environment under which the PHP parser is running. Many are provided by the shell under which PHP is running and different systems are likely running different kinds of shells, a definitive list is impossible. Please see your shell's documentation for a list of defined environment variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc12768267fa7cc4e80e559e67fdb793ded44a5d" translate="yes" xml:space="preserve">
          <source>They can pass arguments through to their constructors, extend other classes, implement interfaces, and use traits just like a normal class can:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5543eb99b43f0c6c729a2ccb1a3eb3edeee48635" translate="yes" xml:space="preserve">
          <source>Thickness and styled are not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a94c5e356e2be83ad07356fde8085069a3e2d22d" translate="yes" xml:space="preserve">
          <source>Thickness, in pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8df5d6fddc762daa33163170007e3dd719056b55" translate="yes" xml:space="preserve">
          <source>Think about &lt;em&gt;global $var;&lt;/em&gt; as a shortcut to &lt;em&gt;$var =&amp;amp; $GLOBALS['var'];&lt;/em&gt;. Thus assigning another reference to &lt;em&gt;$var&lt;/em&gt; only changes the local variable's reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39dbd5d42a48a709db585ae6b7182cfc29a3e6ed" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;class.intlbreakiterator&quot;&gt;break iterator&lt;/a&gt; identifies the boundaries between UTF-8 code points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09bf246ea579f1cb3fb9e672e5a0e757556341b5" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;language.oop5.static&quot;&gt;static&lt;/a&gt; method is called for classes exported by &lt;a href=&quot;function.var-export&quot;&gt;var_export()&lt;/a&gt; since PHP 5.1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a42846322b50ae814e35551deaef78a6134da40d" translate="yes" xml:space="preserve">
          <source>This FAQ is split into two sections: common questions, and some specifics of implementation that are helpful to understand fully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15ebb067583fd4f4c594636926115b5a18a5a994" translate="yes" xml:space="preserve">
          <source>This abstract iterator filters out unwanted values for a &lt;a href=&quot;class.recursiveiterator&quot;&gt;RecursiveIterator&lt;/a&gt;. This class should be extended to implement custom filters. The &lt;strong&gt;RecursiveFilterIterator::accept()&lt;/strong&gt; must be implemented in the subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="757b8977f111151fe0c24906d4cbce9ddfc28cf0" translate="yes" xml:space="preserve">
          <source>This abstract iterator filters out unwanted values. This class should be extended to implement custom iterator filters. The &lt;a href=&quot;filteriterator.accept&quot;&gt;FilterIterator::accept()&lt;/a&gt; must be implemented in the subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90b21422777019b47de9974ec0ad473a4ced2a79" translate="yes" xml:space="preserve">
          <source>This affects only the instant represented by the calendar (as reported by &lt;a href=&quot;intlcalendar.gettime&quot;&gt;IntlCalendar::getTime()&lt;/a&gt;), the field values will not be rewritten accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="347e54c119660df7475f0a3bf17225ec287a2e43" translate="yes" xml:space="preserve">
          <source>This alias was &lt;em&gt;DEPRECATED&lt;/em&gt; in PHP 5.3.0, and &lt;em&gt;REMOVED&lt;/em&gt; as of PHP 7.0.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda201b585249ba93e198de530efcb63d88da501" translate="yes" xml:space="preserve">
          <source>This allows the caller to stream the reply back to the client and is useful when either not all of the reply data is immediately available or when sending very large replies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a4b85afe120f967752c338b89e544eff12822a6" translate="yes" xml:space="preserve">
          <source>This allows you, for example, to intercept the &lt;code&gt;read&lt;/code&gt; and &lt;code&gt;write&lt;/code&gt; methods to encrypt/decrypt the session data and then pass the result to and from the parent class. Alternatively one might chose to entirely override a method like the garbage collection callback &lt;code&gt;gc&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="352e4ddeee1adad64302420802333555241ee20a" translate="yes" xml:space="preserve">
          <source>This also means that unsetting &lt;var&gt;&lt;var&gt;$var&lt;/var&gt;&lt;/var&gt; won't unset the global variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="857c18236780dd62ab215b48f4e8cc3db24299ec" translate="yes" xml:space="preserve">
          <source>This also work for elements in arrays:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84423fa29e455202191a760527d48bac81ce9eb0" translate="yes" xml:space="preserve">
          <source>This argument can be swapped with &lt;code&gt;array1_sort_flags&lt;/code&gt; or omitted entirely, in which case &lt;strong&gt;&lt;code&gt;SORT_ASC&lt;/code&gt;&lt;/strong&gt; is assumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d80cc524456a2c1055dc35e477dcd9e1900e505" translate="yes" xml:space="preserve">
          <source>This argument can be swapped with &lt;code&gt;array1_sort_order&lt;/code&gt; or omitted entirely, in which case &lt;strong&gt;&lt;code&gt;SORT_REGULAR&lt;/code&gt;&lt;/strong&gt; is assumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fe6817165a1a8f8a3febfe526805b4fdcdd0abd" translate="yes" xml:space="preserve">
          <source>This argument has a different meaning depending on the value of the &lt;code&gt;fetch_style&lt;/code&gt; parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e521a6e203ea447e6ac7f5128d3efca6a3152bf" translate="yes" xml:space="preserve">
          <source>This argument only applies to &lt;strong&gt;&lt;code&gt;AF_INET&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;AF_INET6&lt;/code&gt;&lt;/strong&gt; sockets, and specifies the remote port from which the data is received. If the socket is connection-oriented, &lt;code&gt;port&lt;/code&gt; will be &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c440910759990eff328f0dc38dfc29459f09ef" translate="yes" xml:space="preserve">
          <source>This array holds one or more key=&amp;gt;value pairs to set attribute values for the PDOStatement object that this method returns. You would most commonly use this to set the &lt;em&gt;PDO::ATTR_CURSOR&lt;/em&gt; value to &lt;em&gt;PDO::CURSOR_SCROLL&lt;/em&gt; to request a scrollable cursor. Some drivers have driver specific options that may be set at prepare-time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d244b2656d00b1c49d4b76cf145b4b45c9d8af8e" translate="yes" xml:space="preserve">
          <source>This behavior is further compounded when a variable is not passed to &lt;strong&gt;debug_zval_dump()&lt;/strong&gt; by reference. To illustrate, consider a slightly modified version of the above example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84c38d8e22ca152dbbe8f796b6725b024ab212ea" translate="yes" xml:space="preserve">
          <source>This behaviour changed in PHP 5, so for example with Windows the path is normalized first so that &lt;var&gt;C:\PROGRA~1\A.php&lt;/var&gt; is realized the same as &lt;var&gt;C:\Program Files\a.php&lt;/var&gt; and the file is included just once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79a8d40e6afff03f2ec179dee070f2867c513ea1" translate="yes" xml:space="preserve">
          <source>This behaviour is useful for custom signal handling, or handling signals only in specific threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88e3ee5ce830e6cbe4ad28b107af6531f5c6c000" translate="yes" xml:space="preserve">
          <source>This buffered I/O pattern is common enough that Libevent provides a generic mechanism for it. A &quot;buffer event&quot; consists of an underlying transport (like a socket), a read buffer, and a write buffer. Instead of regular events, which give callbacks when the underlying transport is ready to be read or written, a buffer event invokes its user-supplied callbacks when it has read or written enough data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="165fa7cde21830d5e415f60d6b148d9507fc138b" translate="yes" xml:space="preserve">
          <source>This calculates the similarity between two strings as described in Programming Classics: Implementing the World's Best Algorithms by Oliver (ISBN 0-131-00413-1). Note that this implementation does not use a stack as in Oliver's pseudo code, but recursive calls which may or may not speed up the whole process. Note also that the complexity of this algorithm is O(N**3) where N is the length of the longest string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ef86cd45fa515d45451af295f9804a41aeb69e9" translate="yes" xml:space="preserve">
          <source>This call needs a &lt;code&gt;result_entry_identifier&lt;/code&gt;, so needs to be preceded by one of the ldap search calls and one of the calls to get an individual entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9c2e2c41f0553d9ac498d023d862096e2217a03" translate="yes" xml:space="preserve">
          <source>This callback executes only when executing a &lt;a href=&quot;class.gearmantask&quot;&gt;GearmanTask&lt;/a&gt; using &lt;a href=&quot;gearmanclient.runtasks&quot;&gt;GearmanClient::runTasks()&lt;/a&gt;. It is not used for individual jobs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd58e6eb086b113ee22adaa64f28e921b4ad75e" translate="yes" xml:space="preserve">
          <source>This callback is called internally by PHP when the session starts or when &lt;a href=&quot;function.session-start&quot;&gt;session_start()&lt;/a&gt; is called. Before this callback is invoked PHP will invoke the &lt;code&gt;open&lt;/code&gt; callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="872354585abc4b1da63db2061e5b36798a955710" translate="yes" xml:space="preserve">
          <source>This callback is called when all the group requests are done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fee8b1e886653c675dc058640b85686d021b129" translate="yes" xml:space="preserve">
          <source>This callback is executed when a new session ID is required. No parameters are provided, and the return value should be a string that is a valid session ID for your handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="101a4810083af4847688872ab4dc133d338b1445" translate="yes" xml:space="preserve">
          <source>This callback is executed when a session is destroyed with &lt;a href=&quot;function.session-destroy&quot;&gt;session_destroy()&lt;/a&gt; or with &lt;a href=&quot;function.session-regenerate-id&quot;&gt;session_regenerate_id()&lt;/a&gt; with the destroy parameter set to &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;. Return value should be &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; for success, &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; for failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a58ab0f2bd219979eb67cf59e8fd68c28e635c0d" translate="yes" xml:space="preserve">
          <source>This callback is invoked when PHP shuts down or explicitly when &lt;a href=&quot;function.session-write-close&quot;&gt;session_write_close()&lt;/a&gt; is called. Note that after executing this function PHP will internally execute the &lt;code&gt;close&lt;/code&gt; callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1677d863a38b6aa0150e63eabde4018679bf3359" translate="yes" xml:space="preserve">
          <source>This can also be an &lt;a href=&quot;class.intltimezone&quot;&gt;IntlTimeZone&lt;/a&gt; or a &lt;a href=&quot;class.datetimezone&quot;&gt;DateTimeZone&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="053d3456b317be41c4b6a8d176df7d1266c885fe" translate="yes" xml:space="preserve">
          <source>This can be more reliable than simply adding or subtracting the number of seconds in a day or month to a timestamp because of daylight saving time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfb193622a85edc38ce3dd1305b0c3db84be1b8d" translate="yes" xml:space="preserve">
          <source>This can be used to achieve case insensitive pattern matching in products which support only case sensitive regular expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c1170b54181022080317ea6b9684c5bd7c45c4c" translate="yes" xml:space="preserve">
          <source>This can be used to create a one-character string in a single-byte encoding such as ASCII, ISO-8859, or Windows 1252, by passing the position of a desired character in the encoding's mapping table. However, note that this function is not aware of any string encoding, and in particular cannot be passed a Unicode code point value to generate a string in a multibyte encoding like UTF-8 or UTF-16.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b7b614b136cdc323b54d446fc68344559070e91" translate="yes" xml:space="preserve">
          <source>This can be used to read the contents of an external Phar archive. This is most useful for assigning an alias to a phar so that subsequent references to the phar can use the shorter alias, or for loading Phar archives that only contain data and are not intended for execution/inclusion in PHP scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b0bbb65d05bd4d6cd75e40f5f71035fb3ab44a0" translate="yes" xml:space="preserve">
          <source>This can either be: the &lt;a href=&quot;class.intldateformatter#intl.intldateformatter-constants.calendartypes&quot;&gt;calendar type&lt;/a&gt; to use (default is &lt;strong&gt;&lt;code&gt;IntlDateFormatter::GREGORIAN&lt;/code&gt;&lt;/strong&gt;, which is also used if &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; is specified) or an &lt;a href=&quot;class.intlcalendar&quot;&gt;IntlCalendar&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99e87f7fe82b2f660e34868e31df5b36b2099a68" translate="yes" xml:space="preserve">
          <source>This can match &quot;aaaa&quot; in 33 different ways, and this number increases very rapidly as the string gets longer. (The * repeat can match 0, 1, 2, 3, or 4 times, and for each of those cases other than 0, the + repeats can match different numbers of times.) When the remainder of the pattern is such that the entire match is going to fail, PCRE has in principle to try every possible variation, and this can take an extremely long time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6813a651022d33fa851dc5bb53e870b8b5f794d" translate="yes" xml:space="preserve">
          <source>This can only be called when handling a request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09db4bcb6e39889bd1f07c9e53d11800694e34ae" translate="yes" xml:space="preserve">
          <source>This class allows objects to work as arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ec72aa1710f64075c948a4485a41392fe02a3b2" translate="yes" xml:space="preserve">
          <source>This class behaves the same as &lt;a href=&quot;class.datetime&quot;&gt;DateTime&lt;/a&gt; except it never modifies itself but returns a new object instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dc2871975f8f4c9294158e67e72a1cdacfd123e" translate="yes" xml:space="preserve">
          <source>This class implements &lt;a href=&quot;class.traversable&quot;&gt;Traversable&lt;/a&gt;. Traversing an &lt;strong&gt;IntlBreakIterator&lt;/strong&gt; yields non-negative integer values representing the successive locations of the text boundaries, expressed as UTF-8 code units (byte) counts, taken from the beggining of the text (which has the location &lt;em&gt;0&lt;/em&gt;). The keys yielded by the iterator simply form the sequence of natural numbers &lt;em&gt;{0, 1, 2, &amp;hellip;}&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d4f07630057a6b0c3b45601453d61526e09742c" translate="yes" xml:space="preserve">
          <source>This class implements access to ICU resource data files. These files are binary data arrays which ICU uses to store the localized data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75e0335899e878ffe413ecf4687d17936ab912f5" translate="yes" xml:space="preserve">
          <source>This class is designed to expose the current internal PHP session save handler, if you want to write your own custom save handlers, please implement the &lt;a href=&quot;class.sessionhandlerinterface&quot;&gt;SessionHandlerInterface&lt;/a&gt; interface instead of extending from &lt;strong&gt;SessionHandler&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77a3c9cb9bc143c7391d0b586bc1387ebd16b9f1" translate="yes" xml:space="preserve">
          <source>This class is provided because Unicode contains large number of characters and incorporates the varied writing systems of the world and their incorrect usage can expose programs or systems to possible security attacks using characters similarity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3da4297f1e7bc6cf9c0acf6bcd1c526e5235b4e" translate="yes" xml:space="preserve">
          <source>This class is used for generating exceptions when errors occur inside intl functions. Such exceptions are only generated when &lt;a href=&quot;https://secure.php.net/manual/en/intl.configuration.php#ini.intl.use-exceptions&quot;&gt;intl.use_exceptions&lt;/a&gt; is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0417fc5cb5e0456bc7d22c25f58dff86997347a" translate="yes" xml:space="preserve">
          <source>This class is used to send SOAP fault responses from the PHP handler. &lt;code&gt;faultcode&lt;/code&gt;, &lt;code&gt;faultstring&lt;/code&gt;, &lt;code&gt;faultactor&lt;/code&gt; and &lt;code&gt;detail&lt;/code&gt; are standard elements of a SOAP Fault.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47c988c42933e216fe7d3f72aa1c52ce17b0bbc2" translate="yes" xml:space="preserve">
          <source>This class permits access to methods of the inner iterator via the __call magic method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="477689d65c2a68b1c849fe0e708229ccdcc9284e" translate="yes" xml:space="preserve">
          <source>This class provides an object oriented interface into the fileinfo functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70009f8faf35212577326c54e7e5ceceff7888a8" translate="yes" xml:space="preserve">
          <source>This class represents a Solr document that is about to be submitted to the Solr index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60c9bdbe5c0c96a5deeda619a1b5cd483eaf0284" translate="yes" xml:space="preserve">
          <source>This class represents iterator objects throughout the intl extension whenever the iterator cannot be identified with any other object provided by the extension. The distinct iterator object used internally by the &lt;a href=&quot;control-structures.foreach&quot;&gt;&lt;em&gt;foreach&lt;/em&gt; construct&lt;/a&gt; can only be obtained (in the relevant part here) from objects, so objects of this class serve the purpose of providing the hook through which this internal object can be obtained. As a convenience, this class also implements the &lt;a href=&quot;class.iterator&quot;&gt;Iterator&lt;/a&gt; interface, allowing the collection of values to be navigated using the methods defined in that interface. Both these methods and the internal iterator objects provided to &lt;em&gt;foreach&lt;/em&gt; are backed by the same state (e.g. the position of the iterator and its current value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c8ca59bb1cbe570d215922f6b9f37f484551a06" translate="yes" xml:space="preserve">
          <source>This class represents the ICU date formatting functionality. It allows users to display dates in a localized format or to parse strings into PHP date values using pattern strings and/or canned patterns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e9b76843a73ad40cc745a0416b5feea9f722fc3" translate="yes" xml:space="preserve">
          <source>This class wraps around a hash containing integer numbers, where the values are also integer numbers. Hashes are also available as implementation of the ArrayAccess interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b2031ee6bdf401272e622a99b70e15353a7334c" translate="yes" xml:space="preserve">
          <source>This class wraps around a hash containing integer numbers, where the values are strings. Hashes are also available as implementation of the ArrayAccess interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df79b826421789077e4144e2d6b997d8d1d2e255" translate="yes" xml:space="preserve">
          <source>This class wraps around a hash containing strings, where the values are integer numbers. Hashes are also available as implementation of the ArrayAccess interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b5685711ebf42ede7a32b06885c6d3ac2d6b03" translate="yes" xml:space="preserve">
          <source>This class wraps around a set containing integer numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeb64315ba5557e09052a2175e168273e9ab64a6" translate="yes" xml:space="preserve">
          <source>This code could be used to add these files to the &quot;project.phar&quot; phar archive:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="555e13b3898d258d116a3f1803dbaf9170a76c14" translate="yes" xml:space="preserve">
          <source>This code could be used to add these files to the &quot;project.tar&quot; tar archive:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="016607d49332c08d26b7a04f91e7ff2f8eb4daae" translate="yes" xml:space="preserve">
          <source>This command can be used to determine if a standard output / standard error stream is redirected to a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ea9769cdc3c956a047236c450f1fe15877ad70" translate="yes" xml:space="preserve">
          <source>This consists of an &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;'s for all the members in the group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cc893dc8b8714f8af1f9785d41253e0bd3eda2f" translate="yes" xml:space="preserve">
          <source>This construction can of course contain arbitrarily complicated subpatterns, and it can be nested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a8736cf83c46ac88458411d6ba2ac8a241dc358" translate="yes" xml:space="preserve">
          <source>This constructor allows the creation of &lt;a href=&quot;class.soapserver&quot;&gt;SoapServer&lt;/a&gt; objects in WSDL or non-WSDL mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edfc48275b48c5bc72b672fd39dff7baf8128fe7" translate="yes" xml:space="preserve">
          <source>This constructor creates &lt;a href=&quot;class.soapclient&quot;&gt;SoapClient&lt;/a&gt; objects in &lt;em&gt;WSDL&lt;/em&gt; or &lt;em&gt;non-WSDL&lt;/em&gt; mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4664dee560f544ce917974e3adfc5dce2e0d0cb4" translate="yes" xml:space="preserve">
          <source>This constructor creates a new QuickHashIntHash. The size is the amount of bucket lists to create. The more lists there are, the less collisions you will have. Options are also supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bf53ef0ce3ab7f7d66ae1a4ce54ff434aecb7df" translate="yes" xml:space="preserve">
          <source>This constructor creates a new QuickHashIntSet. The size is the amount of bucket lists to create. The more lists there are, the less collisions you will have. Options are also supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89902a323759e66c21b92f2cb156a05bf7e46d63" translate="yes" xml:space="preserve">
          <source>This constructor creates a new QuickHashIntStringHash. The size is the amount of bucket lists to create. The more lists there are, the less collisions you will have. Options are also supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e15d1812aab1ea8e3312e9eeb66482ce50663a" translate="yes" xml:space="preserve">
          <source>This constructor creates a new QuickHashStringIntHash. The size is the amount of bucket lists to create. The more lists there are, the less collisions you will have. Options are also supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39486f88f66e27881d8588ac4f3899de918cef9f" translate="yes" xml:space="preserve">
          <source>This constructs a new array &lt;a href=&quot;language.types.object&quot;&gt;object&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd7447e75aa7c182997bc9a65458ffeaaabe3594" translate="yes" xml:space="preserve">
          <source>This constructs a new empty doubly linked list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc9335509ed53108fec4b2de8351c495911f682" translate="yes" xml:space="preserve">
          <source>This constructs a new empty heap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c41e5943e1f8e31fb1dd1d1fa7927ea5218b2e" translate="yes" xml:space="preserve">
          <source>This constructs a new empty queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0e1d33c25a6a2e03c7eb5f36004b4707db48451" translate="yes" xml:space="preserve">
          <source>This constructs a new empty stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="803ec9d17c5243d6f5ce9022c9fcb15d56dd62fa" translate="yes" xml:space="preserve">
          <source>This deprecated feature &lt;em&gt;will&lt;/em&gt; certainly be &lt;em&gt;removed&lt;/em&gt; in the future. Since Eio &lt;em&gt;1.1.0&lt;/em&gt;&lt;strong&gt;eio_init()&lt;/strong&gt; is deprecated. In Eio &lt;em&gt;1.0.0&lt;/em&gt; because of &lt;a href=&quot;http://pod.tst.eu/http://cvs.schmorp.de/libeio/eio.pod#FORK_SUPPORT&quot;&gt;&amp;raquo; &lt;em&gt;libeio&lt;/em&gt;'s restrictions&lt;/a&gt; you &lt;em&gt;must&lt;/em&gt; call &lt;strong&gt;eio_init()&lt;/strong&gt; in child process, if you fork one by any means. You have to avoid using Eio in parent process, if you use it in childs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16caa48ba75c339ecbcd2b76aecd779e5cd4b1a3" translate="yes" xml:space="preserve">
          <source>This documentation has moved to the &lt;a href=&quot;functions.arguments#functions.arguments.type-declaration&quot;&gt;function reference&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88014abc23446c00c49108965215ee8862a42921" translate="yes" xml:space="preserve">
          <source>This element contains the absolute path to the home directory of the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48cce434e542cbe023afe567f23c2208b5cccf17" translate="yes" xml:space="preserve">
          <source>This encoding is designed to make binary data survive transport through transport layers that are not 8-bit clean, such as mail bodies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd4a6194a7641907571ec2e2b1756c432c5f5f9" translate="yes" xml:space="preserve">
          <source>This event is not supported under libXML, so a registered handler wouldn't be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="761496fc413ffcf0db148938f4b01eee6d64e9cb" translate="yes" xml:space="preserve">
          <source>This example attempt to kill a bogus process id, which will set the last error. We will then print out the last errno.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1f8d79afaaf4da4c7415ba86d551c3634338725" translate="yes" xml:space="preserve">
          <source>This example attempts to load the classes &lt;em&gt;MyClass1&lt;/em&gt; and &lt;em&gt;MyClass2&lt;/em&gt; from the files &lt;var&gt;MyClass1.php&lt;/var&gt; and &lt;var&gt;MyClass2.php&lt;/var&gt; respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fc180baf1e0e0522e4e823b09586cb0c19a7975" translate="yes" xml:space="preserve">
          <source>This example attempts to load the interface &lt;em&gt;ITest&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f368aeba83a166343921871254f8b8f4963170" translate="yes" xml:space="preserve">
          <source>This example checks for the substring &lt;em&gt;cgi&lt;/em&gt; because it may also be &lt;em&gt;cgi-fcgi&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0514328edaf508b3b460c5341be46b74c827c0dc" translate="yes" xml:space="preserve">
          <source>This example checks to see if data has arrived for reading on either &lt;code&gt;$stream1&lt;/code&gt; or &lt;code&gt;$stream2&lt;/code&gt;. Since the timeout value is &lt;em&gt;0&lt;/em&gt; it will return immediately:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a95440badb41fe8524e4483d4444fa08841a52b1" translate="yes" xml:space="preserve">
          <source>This example contains a recursive function for removing a directory tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52c4f59e116c456e525f25cc6c53bf0ea0fd03a9" translate="yes" xml:space="preserve">
          <source>This example creates a 1-based array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58414de8620d593ce4197e1c6c28373d5f695904" translate="yes" xml:space="preserve">
          <source>This example creates a ZIP file archive &lt;var&gt;test.zip&lt;/var&gt; and add the file &lt;var&gt;test.txt&lt;/var&gt; encrypted using the AES 256 method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5597a35ad43f968a51f26ab25c20d056aa24fece" translate="yes" xml:space="preserve">
          <source>This example creates a listening socket on all interfaces on port 1223 and sets the socket to &lt;strong&gt;&lt;code&gt;O_BLOCK&lt;/code&gt;&lt;/strong&gt; mode. &lt;a href=&quot;function.socket-accept&quot;&gt;socket_accept()&lt;/a&gt; will hang until there is a connection to accept.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e0e327af9e16984e33217ff1b05dd2a597ed020" translate="yes" xml:space="preserve">
          <source>This example creates a listening socket on all interfaces on port 1223 and sets the socket to &lt;strong&gt;&lt;code&gt;O_NONBLOCK&lt;/code&gt;&lt;/strong&gt; mode. &lt;a href=&quot;function.socket-accept&quot;&gt;socket_accept()&lt;/a&gt; will immediately fail unless there is a pending connection exactly at this moment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b34ef9dbab959d45bf724e756c32eb368220863e" translate="yes" xml:space="preserve">
          <source>This example creates a one-based array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07663a9aef7b95c93e293a88190cfc2bd493a0c2" translate="yes" xml:space="preserve">
          <source>This example demonstrates creating a custom &lt;strong&gt;SeekableIterator&lt;/strong&gt;, seeking to a position and handling an invalid position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="188473a5c0a11448529425bedbca9ca873aa9e17" translate="yes" xml:space="preserve">
          <source>This example demonstrates how &lt;strong&gt;PDOStatement::columnCount()&lt;/strong&gt; operates with and without a result set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d411509e43bd37d6694b18e3994f4a68ac3a911" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to build a simple libxml error handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06a6035f8d773fbd7bd950287e6e6c1b878b47e7" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to prepare a statement with &lt;a href=&quot;function.sqlsrv-prepare&quot;&gt;sqlsrv_prepare()&lt;/a&gt; and re-execute it multiple times (with different parameter values) using &lt;strong&gt;sqlsrv_execute()&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da0f75df0a8655bba0bb61b0c5a3b49dd6985c1f" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to prepare a statement with &lt;strong&gt;sqlsrv_prepare()&lt;/strong&gt; and re-execute it multiple times (with different parameter values) using &lt;a href=&quot;function.sqlsrv-execute&quot;&gt;sqlsrv_execute()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce685f0dc4e708eb79e5d0772e4759287d2fe8c" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to take a screenshot of the current screen and save it as a png image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf2a9437e4088f0963600f0e0b27315814362584" translate="yes" xml:space="preserve">
          <source>This example demonstrates in which order methods are called when using &lt;a href=&quot;control-structures.foreach&quot;&gt;foreach&lt;/a&gt; with an iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f658b016bca7de209267fed1bd2e9bba59dab1e3" translate="yes" xml:space="preserve">
          <source>This example demonstrates that calling rewind on a NoRewindIterator object has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ab8ec74366dd0a1ef9e758cad0e3bf5ae481cf4" translate="yes" xml:space="preserve">
          <source>This example demonstrates that when assigning a reference to a static variable, it's not &lt;em&gt;remembered&lt;/em&gt; when you call the &lt;em&gt;&amp;amp;get_instance_ref()&lt;/em&gt; function a second time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010df7f1537ca524e49ed8183a319bc757fd9f66" translate="yes" xml:space="preserve">
          <source>This example demonstrates the basic usage of libxml errors and the value returned by this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f292208a09060eb464eb6c5b1c243b9b37dbd488" translate="yes" xml:space="preserve">
          <source>This example demonstrates the difference between the &lt;a href=&quot;class.filesystemiterator#filesystemiterator.constants.key-as-pathname&quot;&gt;FilesystemIterator::KEY_AS_PATHNAME&lt;/a&gt; and &lt;a href=&quot;class.filesystemiterator#filesystemiterator.constants.key-as-filename&quot;&gt;FilesystemIterator::KEY_AS_FILENAME&lt;/a&gt; flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c3f9964f6b9be668d9cbbbaf3b2ccc498484537" translate="yes" xml:space="preserve">
          <source>This example demonstrates usage of the optional &lt;code&gt;filter&lt;/code&gt; parameter, where it essentially skips private properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66dbc86b79b83e0a9ecee7e15e0100f349723a40" translate="yes" xml:space="preserve">
          <source>This example displays the file name and last change time of the files in the directory containing the script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f2c6eedbaa29cc74427f2b135b4eeee3e8bbe3e" translate="yes" xml:space="preserve">
          <source>This example displays the inode number for the directory containing the script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62cd63e74ac0c52a080e564791ffc8cb6157d300" translate="yes" xml:space="preserve">
          <source>This example displays the owner of the directory which contains the script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34adffd798864e7e317e0ec9edbc18eb81a40485" translate="yes" xml:space="preserve">
          <source>This example extract all the entries of a ZIP archive &lt;var&gt;test.zip&lt;/var&gt; and set the Unix rights from external attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f30d4d1d00fcbc9ffbaa70ee7cff294d4519211" translate="yes" xml:space="preserve">
          <source>This example illustrates a basic use of Yaf_Config_Ini for loading configuration data from an INI file. In this example there are configuration data for both a production system and for a staging system. Because the staging system configuration data are very similar to those for production, the staging section inherits from the production section. In this case, the decision is arbitrary and could have been written conversely, with the production section inheriting from the staging section, though this may not be the case for more complex situations. Suppose, then, that the following configuration data are contained in /path/to/config.ini:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cce07992821535ba4df46efc16a4c96fd14153fc" translate="yes" xml:space="preserve">
          <source>This example illustrates the difference between running a background task and a normal task. The client adds two tasks to execute the same function, but one is added with &lt;strong&gt;addTaskBackground()&lt;/strong&gt;. A callback is set so that progress of the job can be tracked. A simple worker with an artificial delay reports on the job progress and the client picks this up through the callback. Two workers are run for this example. Note that the background task does not show in the client output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28ad000134a281091779e68ddc2098c16a8aa448" translate="yes" xml:space="preserve">
          <source>This example is a simple rewrite of the first example from &lt;a href=&quot;https://secure.php.net/manual/en/sockets.examples.php&quot;&gt;Examples&lt;/a&gt; to use &lt;strong&gt;socket_recv()&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="837a821b4f18a2ec5641b046a26ba713706c6329" translate="yes" xml:space="preserve">
          <source>This example lists files in the directory containing the script which are executable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d3448a40e1d0abf7b9dc94674253c444a7adcef" translate="yes" xml:space="preserve">
          <source>This example lists the directories within the directory of the current script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a5adc9b4784a388bb0361170e882aefca26dfe" translate="yes" xml:space="preserve">
          <source>This example lists the files and directories which can be opened for writing in the directory containing the script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="960ad0c122264af7f0e43acfd797f4d32e02ef31" translate="yes" xml:space="preserve">
          <source>This example opened a shared memory block with a system id returned by &lt;a href=&quot;function.ftok&quot;&gt;ftok()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb50fcf35a3a0589049a1dc04dcdfead7339e0fd" translate="yes" xml:space="preserve">
          <source>This example opens a ZIP file archive &lt;var&gt;test.zip&lt;/var&gt; and add the file &lt;var&gt;/path/to/index.txt&lt;/var&gt;. as &lt;var&gt;newname.txt&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff29943e2c94b54dd520311421cc839f46bdd86a" translate="yes" xml:space="preserve">
          <source>This example opens a ZIP file archive &lt;var&gt;test.zip&lt;/var&gt; and add the file &lt;var&gt;test.txt&lt;/var&gt; with its Unix rights as external attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5b9022fd6fcd8dd2269a8b5489e12910d2f2b55" translate="yes" xml:space="preserve">
          <source>This example opens the current file and iterates over its contents line by line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39d339a279c6c53b22f5ecb5c403cf2fb31d7071" translate="yes" xml:space="preserve">
          <source>This example outputs the third line of the script which is found at position 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a775bf72e47584b90e7f5ab16b3de4178a13163" translate="yes" xml:space="preserve">
          <source>This example rotates an image 180 degrees - upside down.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37d758deefaccf3acbdc103d21847e63abb4fd01" translate="yes" xml:space="preserve">
          <source>This example script will produce a white PNG 400x30 pixels, with the words &quot;Testing...&quot; in black (with grey shadow), in the font Arial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f0b7baa063efeea70a65e4820bb8488565d7b0" translate="yes" xml:space="preserve">
          <source>This example sends the same mail as the example immediately above, but passes the additional headers as array (available as of PHP 7.2.0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1170b3babb3eed4f7383fb640506f0766ff6ad57" translate="yes" xml:space="preserve">
          <source>This example shows how a single prepared statement with a single parameter binding can be used to insert multiple rows with different values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e495e7f09e81db4818590024792e7a133a60160" translate="yes" xml:space="preserve">
          <source>This example shows how large XML documents can be read and parsed in chunks, so that it not necessary to keep the whole document in memory. Error handling is omitted for brevity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9653e4f22996b89f517aa01e546702f5863eb14b" translate="yes" xml:space="preserve">
          <source>This example shows how to crop an image to a square area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba3f1095120d50c04dcd73574d28f4d6baed8b1a" translate="yes" xml:space="preserve">
          <source>This example shows how to get a proxy to an email soap service described by &lt;var&gt;EmailService.wsdl&lt;/var&gt; and located at &lt;var&gt;http://example.org&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f8f0f507bf9715108e13b2ea185cf84b99e36a8" translate="yes" xml:space="preserve">
          <source>This example shows how to print a converted checksum with the &lt;a href=&quot;function.printf&quot;&gt;printf()&lt;/a&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6626a7ea97977827baf7791a60d62496e7c34039" translate="yes" xml:space="preserve">
          <source>This example shows how to use this function when linked against libmcrypt 2.4.x and 2.5.x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43710d0152d1d3197801dc0556066dffde58d939" translate="yes" xml:space="preserve">
          <source>This example shows that only items matching the regular expression are accepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47f0720f0fe67a3b0f5b3ab9b0426d7969aa2dd5" translate="yes" xml:space="preserve">
          <source>This example shows that swapping the &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;second&lt;/code&gt; argument may yield different results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dda3b93d7f93c9bb85876421a7b1401e0db17b3" translate="yes" xml:space="preserve">
          <source>This example shows the basic usage of &lt;strong&gt;stream_socket_pair()&lt;/strong&gt; in Inter-Process Comunication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0f96805d409075dee25586a8b792440ebacba37" translate="yes" xml:space="preserve">
          <source>This example shows using &lt;strong&gt;Phar::copy()&lt;/strong&gt; and the equivalent stream wrapper performance of the same thing. The primary difference between the two approaches is error handling. All Phar methods throw exceptions, whereas the stream wrapper uses &lt;a href=&quot;function.trigger-error&quot;&gt;trigger_error()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d48d6169a4d64a7db4eb50c94bc8a5cf9396f3e6" translate="yes" xml:space="preserve">
          <source>This example shows using &lt;strong&gt;PharData::copy()&lt;/strong&gt; and the equivalent stream wrapper performance of the same thing. The primary difference between the two approaches is error handling. All PharData methods throw exceptions, whereas the stream wrapper uses &lt;a href=&quot;function.trigger-error&quot;&gt;trigger_error()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7842444ee0f3b3643b74d1a1482c458be93153ff" translate="yes" xml:space="preserve">
          <source>This example simply outputs the contents of &lt;em&gt;file.txt&lt;/em&gt; line-by-line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ca2d964c970e56e98001a88b76ae4bf9670170" translate="yes" xml:space="preserve">
          <source>This example splits a string using 'a' as the separator :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="303d9aaa3fcfb59c5b670c3922deb6afee532c96" translate="yes" xml:space="preserve">
          <source>This example strips excess whitespace from a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6abe8d4470562c31080147a9d780692865f484d1" translate="yes" xml:space="preserve">
          <source>This example throws an exception and demonstrates the try/catch block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="078f3889f3b55e0af7235e35ab29dc7aa11c5f32" translate="yes" xml:space="preserve">
          <source>This example throws an exception for a non-loadable, custom exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fecacb303b72e6a003c43c0ee1a3636b7a756ddf" translate="yes" xml:space="preserve">
          <source>This example uses the &lt;strong&gt;&lt;code&gt;IMG_FLIP_HORIZONTAL&lt;/code&gt;&lt;/strong&gt; constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef61430cc5f97cc01340596c7dd14411030fa2fd" translate="yes" xml:space="preserve">
          <source>This example uses the &lt;strong&gt;&lt;code&gt;IMG_FLIP_VERTICAL&lt;/code&gt;&lt;/strong&gt; constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="515646e1ca52b3bf1ad15216b702084e88cbe8cb" translate="yes" xml:space="preserve">
          <source>This example will attempt to kill a process which does not exist, then will print out the corresponding error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c61ada6093df7e4bd8957dce4a66464a7639c3a" translate="yes" xml:space="preserve">
          <source>This example will check if the $file is readable and writable, otherwise will print an error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce8aa3b46ad6e27f817c260a2be476088cce1b35" translate="yes" xml:space="preserve">
          <source>This example will check which features that's available in cURL build by using the &lt;em&gt;'features'&lt;/em&gt; bitmask returned by &lt;strong&gt;curl_version()&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef4b5c9f946d625decae3d8dc257a37cf65af932" translate="yes" xml:space="preserve">
          <source>This example will close shared memory block identified by &lt;em&gt;$shm_id&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b1fd7fd4a6a80ea573f08fa46c16f144cf67084" translate="yes" xml:space="preserve">
          <source>This example will create a cURL share handle, add two cURL handles to it, and then run them with cookie data sharing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9bfe891215b53c63098c8f30e1dbf42c33d1c50" translate="yes" xml:space="preserve">
          <source>This example will create two cURL handles, add them to a multi handle, and process them asynchronously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bacf599d8d48593a9fce06e05a8ca5d5f245717b" translate="yes" xml:space="preserve">
          <source>This example will delete shared memory block identified by &lt;em&gt;$shm_id&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9efda9abe16d7944d78a37daad0199b7cdbc9a2e" translate="yes" xml:space="preserve">
          <source>This example will display an image with the maximum width, or height, of 200 pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6deab005152615b9334475efa9885206ed56d970" translate="yes" xml:space="preserve">
          <source>This example will display the image at half size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cce7479c39be279cf28fae91ce37cb71eeb94cd" translate="yes" xml:space="preserve">
          <source>This example will display the path to the current TTY.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13db499df71b16a314bd6820aa72e263ca71bc5a" translate="yes" xml:space="preserve">
          <source>This example will initiate a UDP socket on port 1223 of 127.0.0.1 and print at most 12 characters received from a remote host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2127d53d337e0fc04585f704ef3cbbbd3a2e8bbb" translate="yes" xml:space="preserve">
          <source>This example will list all files, omitting the &lt;em&gt;.&lt;/em&gt; and &lt;em&gt;..&lt;/em&gt; entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed8e51a25c8862711737bc706d135405892c0206" translate="yes" xml:space="preserve">
          <source>This example will list all regular files in the directory containing the script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dedd52cf4ed1cedf12d8cc6ad9046135d00456d" translate="yes" xml:space="preserve">
          <source>This example will list the contents of the directory containing the script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e06f9b32531c5637b3de0567cee96d480e9a8f3" translate="yes" xml:space="preserve">
          <source>This example will list the full base name and the base name with suffix &lt;em&gt;.jpg&lt;/em&gt; removed for the files in the directory containing the script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e0f002a25b8f291b7f515aee5bcebb1a9eb25c6" translate="yes" xml:space="preserve">
          <source>This example will output (after 10 seconds)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="542e30839e6d13055b1bf02cbbf0d40b2fb86aa9" translate="yes" xml:space="preserve">
          <source>This example will print out the effective group id, once changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baee4f90de2aca93e6ca6f062990eb6d90af12d8" translate="yes" xml:space="preserve">
          <source>This example will print out the effective group id, once it is changed with &lt;a href=&quot;function.posix-setegid&quot;&gt;posix_setegid()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc486ab764321b815cafac08cd5677b9fb7d6836" translate="yes" xml:space="preserve">
          <source>This example will print out the effective group id, once it is changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13fa4afc50ed5d7d7798d286a984ab546f091a1a" translate="yes" xml:space="preserve">
          <source>This example will print out the real group id, even once the effective group id has been changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e21a44af745efa9d0d74e0a6bad47eac2b3c34b" translate="yes" xml:space="preserve">
          <source>This example will put the size of shared memory block identified by &lt;em&gt;$shm_id&lt;/em&gt; into &lt;em&gt;$shm_size&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5512ec211dbaa90551bace41ee35433ecf90e01" translate="yes" xml:space="preserve">
          <source>This example will read 50 bytes from shared memory block and place the data inside &lt;em&gt;$shm_data&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed72b527595f2c81d04859f0f1e979a1bfb38805" translate="yes" xml:space="preserve">
          <source>This example will resample an image to half its original size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d74e7ed9745de7ad206ee8625a50b46fb5bda053" translate="yes" xml:space="preserve">
          <source>This example will return the absolute path of the current working directory of the script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cad234ff16d6aa1206f7a88cbf9b583e8799ffa" translate="yes" xml:space="preserve">
          <source>This example will show the current user id and then set it to a different value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad6de5109517bbceee3a28b5987d6e56ab62eacc" translate="yes" xml:space="preserve">
          <source>This example will show the current user id then set the effective user id to a separate id using &lt;a href=&quot;function.posix-seteuid&quot;&gt;posix_seteuid()&lt;/a&gt;, then show the difference between the real id and the effective id.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ba81409b5a6d0055b23d6794a72ff87e0ce8e46" translate="yes" xml:space="preserve">
          <source>This example will work if you have the respective locales installed in your system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11280d64c5a24e5db89b28961268173f1d4e2ed5" translate="yes" xml:space="preserve">
          <source>This example will write data inside &lt;em&gt;$my_string&lt;/em&gt; into shared memory block, &lt;em&gt;$shm_bytes_written&lt;/em&gt; will contain the number of bytes written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="073a10f8d236968fcd5185d8ec53b05218f37ed3" translate="yes" xml:space="preserve">
          <source>This example writes a temporary file in memory which can be written to and read from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89fa1422245881408bfabe2c68f0ca6872296c64" translate="yes" xml:space="preserve">
          <source>This exception is thrown when exceptional errors occur while using the OAuth extension and contains useful debugging information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6b9d6204276b9d0694a54c41df8bec8662ac50" translate="yes" xml:space="preserve">
          <source>This extended &lt;a href=&quot;class.filteriterator&quot;&gt;FilterIterator&lt;/a&gt; allows a recursive iteration using &lt;a href=&quot;class.recursiveiteratoriterator&quot;&gt;RecursiveIteratorIterator&lt;/a&gt; that only shows those elements which have children.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f86736a53638cde5fb8dbc6420e5348f6e9fd296" translate="yes" xml:space="preserve">
          <source>This factory method creates a new hash from a definition file on disk. The file format consists of a signature 'QH\0x11\0', the number of elements as a 32 bit signed integer in system Endianness, followed by 32 bit signed integers packed together in the Endianness that the system that the code runs on uses. For each hash element there are two 32 bit signed integers stored. The first of each element is the key, and the second is the value belonging to the key. An example could be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1478847c8753bec22ae49b8250e48b10434ce0f5" translate="yes" xml:space="preserve">
          <source>This factory method creates a new hash from a definition file on disk. The file format consists of a signature 'QH\0x12\0', the number of elements as a 32 bit signed integer in system Endianness, an unsigned 32 bit integer containing the number of element data to follow in characters. This element data contains all the strings. After the header and the strings, the elements follow in pairs of two unsigned 32 bit integers where the first one is the key, and the second one the index in the element data string. An example could be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4ff0fb123af65962b492c628fe5aebe31ce95b3" translate="yes" xml:space="preserve">
          <source>This factory method creates a new hash from a definition file on disk. The file format consists of a signature 'QH\0x21\0', the number of elements as a 32 bit signed integer in system Endianness, an unsigned 32 bit integer containing the number of element data to follow in characters. This element data contains all the strings. The follows another signed 32 bit integer containing the number of bucket lists. After the header and the strings, the elements follow. They are ordered by bucket list so that the keys don't have to be hashed in order to restore the hash. For each bucket list, the following information is stored (all as 32 bit integers): the bucket list index, the number of elements in that list, and then in pairs of two unsigned 32 bit integers the elements, where the first one is the index into the string list containing the keys, and the second one the value. An example could be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8c0772c25214c41dabc312ee32cacc6a4d8c340" translate="yes" xml:space="preserve">
          <source>This factory method creates a new hash from a definition in a string. The file format consists of 32 bit signed integers packed together in the Endianness that the system that the code runs on uses. For each element there are two 32 bit signed integers stored. The first of each element is the key, and the second is the value belonging to the key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e02c63c5b8eb95ce3a7e17075deecdd0d85c435" translate="yes" xml:space="preserve">
          <source>This factory method creates a new hash from a definition in a string. The format is the same as the one used in &quot;loadFromFile&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b08a2da9a043154f97f3c59df691db52036f9987" translate="yes" xml:space="preserve">
          <source>This factory method creates a new set from a definition file on disk. The file format consists of 32 bit signed integers packed together in the Endianness that the system that the code runs on uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b34cf6739882a92d85a61847fbcecddd17d9ec8b" translate="yes" xml:space="preserve">
          <source>This factory method creates a new set from a definition in a string. The file format consists of 32 bit signed integers packed together in the Endianness that the system that the code runs on uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3da5a28d7edde6e6754882002576ed64fcb049f" translate="yes" xml:space="preserve">
          <source>This feature has been &lt;em&gt;DEPRECATED&lt;/em&gt; as of PHP 7.0.0. Relying on this feature is highly discouraged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f5e6fb985f3e2423cf7548f55f802f07ecd5bd" translate="yes" xml:space="preserve">
          <source>This feature has been &lt;em&gt;DEPRECATED&lt;/em&gt; as of PHP 7.2.0. Relying on this feature is highly discouraged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="304cb090d123c3de5bf851797c3154b4d1a8c853" translate="yes" xml:space="preserve">
          <source>This feature is available since PHP 5.3.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a4165c64b25b16586888d9bb123513e98bdf09" translate="yes" xml:space="preserve">
          <source>This feature was &lt;em&gt;DEPRECATED&lt;/em&gt; in PHP 5.5.0, and &lt;em&gt;REMOVED&lt;/em&gt; as of PHP 7.0.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d40ead5fce118c389609fbaf830d2acfa57132cd" translate="yes" xml:space="preserve">
          <source>This feature was &lt;em&gt;DEPRECATED&lt;/em&gt; in PHP 5.6.0, and &lt;em&gt;REMOVED&lt;/em&gt; as of PHP 7.0.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4290a197b73a107e8d07b142caa57075798bd85a" translate="yes" xml:space="preserve">
          <source>This feature was added in PHP 5.6.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c6a2ab2674191d622070a4ce791658b66526b80" translate="yes" xml:space="preserve">
          <source>This feature was named &quot;late static bindings&quot; with an internal perspective in mind. &quot;Late binding&quot; comes from the fact that &lt;em&gt;static::&lt;/em&gt; will not be resolved using the class where the method is defined but it will rather be computed using runtime information. It was also called a &quot;static binding&quot; as it can be used for (but is not limited to) static method calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdbe66b6b9dfab70c45a0e4dfcd27177569cf3b4" translate="yes" xml:space="preserve">
          <source>This field supports using a hostname or, with OpenLDAP 2.x.x and later, a full LDAP URI of the form &lt;em&gt;ldap://hostname:port&lt;/em&gt; or &lt;em&gt;ldaps://hostname:port&lt;/em&gt; for SSL encryption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3618619065da08123eff74eec06967d95dba62cc" translate="yes" xml:space="preserve">
          <source>This filter will be added with the specified &lt;code&gt;params&lt;/code&gt; to the &lt;em&gt;beginning&lt;/em&gt; of the list and will therefore be called first during stream operations. To add a filter to the end of the list, use &lt;a href=&quot;function.stream-filter-append&quot;&gt;stream_filter_append()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa9171cc97f2ae4434f5e25229a5fc22e5d54ea" translate="yes" xml:space="preserve">
          <source>This filter will be added with the specified &lt;code&gt;params&lt;/code&gt; to the &lt;em&gt;end&lt;/em&gt; of the list and will therefore be called last during stream operations. To add a filter to the beginning of the list, use &lt;a href=&quot;function.stream-filter-prepend&quot;&gt;stream_filter_prepend()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92f0444c90ea5e9c2620d53b7695500a37bfbc2d" translate="yes" xml:space="preserve">
          <source>This flag can also be activated by settnig the &lt;em&gt;EVENT_EPOLL_USE_CHANGELIST&lt;/em&gt; environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7567fdd811530979847fa27c9422cd6d89f66687" translate="yes" xml:space="preserve">
          <source>This flag has no effect if one winds up using a backend other than &lt;em&gt;epoll&lt;/em&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11e77fefb42d1629c3f12858c6351ad8a0719345" translate="yes" xml:space="preserve">
          <source>This flag indicates an event that becomes active after a timeout elapses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563e9cd120a1d580669edff85812be789ed57e58" translate="yes" xml:space="preserve">
          <source>This flag indicates an event that becomes active when the provided file descriptor(usually a stream resource, or socket) is ready for reading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db9593c666246df115ba1917f8d82716ad1cb134" translate="yes" xml:space="preserve">
          <source>This flexibility does come at a cost, however: generators are forward-only iterators, and cannot be rewound once iteration has started. This also means that the same generator can't be iterated over multiple times: the generator will need to be rebuilt by calling the generator function again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5305951f36f48b561521344fa2e0a3d29e47d1f" translate="yes" xml:space="preserve">
          <source>This function URL encodes the given string according to &lt;a href=&quot;http://www.faqs.org/rfcs/rfc3986&quot;&gt;&amp;raquo; RFC 3986&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb43f9e5ed2d4dfc3a880603be5dad1a752ed012" translate="yes" xml:space="preserve">
          <source>This function accepts either one, two, or four parameters (not three):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c8f6cf8684f4a19c0ca681973f9e10a43ab085b" translate="yes" xml:space="preserve">
          <source>This function adds another name/value pair to the URL rewrite mechanism. The name and value will be added to URLs (as GET parameter) and forms (as hidden input fields) the same way as the session ID when transparent URL rewriting is enabled with &lt;a href=&quot;https://secure.php.net/manual/en/session.configuration.php#ini.session.use-trans-sid&quot;&gt;session.use_trans_sid&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="908390b8a8c6d21cfa4d8bf382b3b1eb9a15e78a" translate="yes" xml:space="preserve">
          <source>This function alias was deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52de81843c6aa5909699d01a3d1abc62fa18c1a8" translate="yes" xml:space="preserve">
          <source>This function allow you to stream portions of a file at a time, rather than read and parse the whole thing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cef8de90823eaf74cee59807b92e98811ef272f" translate="yes" xml:space="preserve">
          <source>This function allows changing the persistence state of a SoapServer object between requests. This function allows saving data between requests utilizing PHP sessions. This method only has an affect on a SoapServer after it has exported functions utilizing &lt;a href=&quot;soapserver.setclass&quot;&gt;SoapServer::setClass()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0530c02c2ccaf4021a5c7f4f3bbe210d8919a076" translate="yes" xml:space="preserve">
          <source>This function allows explicitly resetting the error code value either of a socket or of the extension global last error code. This may be useful to detect within a part of the application if an error occurred or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b927b2a817b918d81a6d98723a3d54f77e562fa" translate="yes" xml:space="preserve">
          <source>This function allows fiddling with the ODBC options for a particular connection or query result. It was written to help find work around to problems in quirky ODBC drivers. You should probably only use this function if you are an ODBC programmer and understand the effects the various options will have. You will certainly need a good ODBC reference to explain all the different options and values that can be used. Different driver versions support different options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d76473c95ca9b596904fc63bb83221008a0def7d" translate="yes" xml:space="preserve">
          <source>This function allows formatting an &lt;a href=&quot;class.intlcalendar&quot;&gt;IntlCalendar&lt;/a&gt; or &lt;a href=&quot;class.datetime&quot;&gt;DateTime&lt;/a&gt; object without first explicitly creating a &lt;a href=&quot;class.intldateformatter&quot;&gt;IntlDateFormatter&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1a2088b760a94524d8e32f7d8736d583f1290d3" translate="yes" xml:space="preserve">
          <source>This function allows sending of emails with correct handling of Cc and Bcc receivers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29a722896af8c9c2ddfe634e80d4dbfbd9cbfd31" translate="yes" xml:space="preserve">
          <source>This function allows to know if &lt;a href=&quot;function.inotify-read&quot;&gt;inotify_read()&lt;/a&gt; will block or not. If a number upper than zero is returned, there are pending events and &lt;a href=&quot;function.inotify-read&quot;&gt;inotify_read()&lt;/a&gt; will not block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="776974b0346ac572af9227ee8f9ffefefa2a7890" translate="yes" xml:space="preserve">
          <source>This function allows to use &lt;code&gt;parser&lt;/code&gt; inside &lt;code&gt;object&lt;/code&gt;. All callback functions could be set with &lt;a href=&quot;function.xml-set-element-handler&quot;&gt;xml_set_element_handler()&lt;/a&gt; etc and assumed to be methods of &lt;code&gt;object&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c812fa186b50eb05e218af31f8faf38d3a617be" translate="yes" xml:space="preserve">
          <source>This function allows you to override the current domain for a single message lookup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b38555fd19ef4b5c2758e02f54c0e6ace67bb9c" translate="yes" xml:space="preserve">
          <source>This function allows you to override the current domain for a single plural message lookup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b48018df9125d053567a86b5cb8b7ee6e7af3a7" translate="yes" xml:space="preserve">
          <source>This function always returns &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; value. If SSL setup is incorrect &lt;a href=&quot;mysqli.real-connect&quot;&gt;mysqli_real_connect()&lt;/a&gt; will return an error when you attempt to connect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="382f695117e787c938ea789ade377408571b2c87" translate="yes" xml:space="preserve">
          <source>This function always returns &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b50e8b1d3e1508dfd439d7225ac181576c6dcd8" translate="yes" xml:space="preserve">
          <source>This function appends a child to an existing list of children or creates a new list of children. The child can be created with e.g. &lt;a href=&quot;domdocument.createelement&quot;&gt;DOMDocument::createElement()&lt;/a&gt;, &lt;a href=&quot;domdocument.createtextnode&quot;&gt;DOMDocument::createTextNode()&lt;/a&gt; etc. or simply by using any other node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df69af846cd84d044d7a83349841dad4403cf59" translate="yes" xml:space="preserve">
          <source>This function assigns a name to a result set. This name can be used later in UPDATE|DELETE ... WHERE CURRENT OF &lt;code&gt;name&lt;/code&gt; statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="257962ee97d18cc64a2bc6b5558931cb885eda3b" translate="yes" xml:space="preserve">
          <source>This function became available in the CLI server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faa44c7094e3c4621c097e8d9ba73039b13835a4" translate="yes" xml:space="preserve">
          <source>This function became available under FastCGI. Previously, it was supported only when PHP was installed as an Apache module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dabff35173e96735e71023370f2216ac6959a7ad" translate="yes" xml:space="preserve">
          <source>This function became available under FastCGI. Previously, it was supported when PHP was installed as an Apache module or by the &lt;a href=&quot;https://secure.php.net/manual/en/book.nsapi.php&quot;&gt;NSAPI server module&lt;/a&gt; in Netscape/iPlanet/SunONE webservers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c792c83003e8765bc68364622a66f87d2fd9de" translate="yes" xml:space="preserve">
          <source>This function became deprecated in favour of the &lt;a href=&quot;language.operators.type&quot;&gt;instanceof&lt;/a&gt; operator. Calling this function will result in an &lt;strong&gt;&lt;code&gt;E_STRICT&lt;/code&gt;&lt;/strong&gt; warning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d51ec470960feb6828292b026e3f577a38e85990" translate="yes" xml:space="preserve">
          <source>This function becomes even &lt;em&gt;more&lt;/em&gt; confusing when a variable with a &lt;em&gt;refcount&lt;/em&gt; of &lt;em&gt;1&lt;/em&gt; is passed (by copy/value):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f1ee9ca9b19cc62ef495a22e983cce9f0311adb" translate="yes" xml:space="preserve">
          <source>This function behaves exactly as &lt;a href=&quot;function.fsockopen&quot;&gt;fsockopen()&lt;/a&gt; with the difference that the connection is not closed after the script finishes. It is the persistent version of &lt;a href=&quot;function.fsockopen&quot;&gt;fsockopen()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcabfc697b6aebbb8036df621e8c0caf7e58cff7" translate="yes" xml:space="preserve">
          <source>This function behaves like &lt;a href=&quot;function.file-get-contents&quot;&gt;file_get_contents()&lt;/a&gt; but for Phar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b42e320551232ef257750e996b8f728253813cfd" translate="yes" xml:space="preserve">
          <source>This function caches information about specific filenames, so you only need to call &lt;strong&gt;clearstatcache()&lt;/strong&gt; if you are performing multiple operations on the same filename and require the information about that particular file to not be cached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ac012dac3671af6816ee41c471f44d5d8da43c6" translate="yes" xml:space="preserve">
          <source>This function calculates and returns the bounding box in pixels for a FreeType text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3355086ebc6678a10266ffd1a468cbf44e3a3d9" translate="yes" xml:space="preserve">
          <source>This function calculates and returns the bounding box in pixels for a TrueType text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="335ed5c997c87f6699683ef0c53ff8be14194cfb" translate="yes" xml:space="preserve">
          <source>This function calculates the arc tangent of the two variables &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. It is similar to calculating the arc tangent of &lt;code&gt;y&lt;/code&gt; / &lt;code&gt;x&lt;/code&gt;, except that the signs of both arguments are used to determine the quadrant of the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc2c6119a841a867c1444aa34cb33fc1b53ccf9a" translate="yes" xml:space="preserve">
          <source>This function can also be called as &lt;a href=&quot;function.gmp-div&quot;&gt;gmp_div()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="915a1a4bc13bc6a05a0ff972b24d013f155a49dc" translate="yes" xml:space="preserve">
          <source>This function can also be used to open streams to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff04da23a9a3e32af057624951996c7debece32" translate="yes" xml:space="preserve">
          <source>This function can be called to prepend a bucket to a bucket brigade. It is typically called from &lt;a href=&quot;php-user-filter.filter&quot;&gt;php_user_filter::filter()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee312f87cad382ce8a8ad7d571e841418731ff69" translate="yes" xml:space="preserve">
          <source>This function can be used by clients that remain idle for a long while, to check whether the server has closed the connection and reconnect if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a5678c94b6fbaefbdb2e452b268aaec390ca983" translate="yes" xml:space="preserve">
          <source>This function can be used e.g. to encrypt message which can be then read only by owner of the private key. It can be also used to store secure data in database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de4479e0c3ebd2a6919e8bee40942d790c4ffcd0" translate="yes" xml:space="preserve">
          <source>This function can be used e.g. to sign data (or its hash) to prove that it is not written by someone else.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1934ba5e136b1c301360d6906cda3577b9453ac8" translate="yes" xml:space="preserve">
          <source>This function can be used for defining your own way of handling errors during runtime, for example in applications in which you need to do cleanup of data/files when a critical error happens, or when you need to trigger an error under certain conditions (using &lt;a href=&quot;function.trigger-error&quot;&gt;trigger_error()&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e501586290726c562d9b908e518a23709ff40231" translate="yes" xml:space="preserve">
          <source>This function can be used instead of &lt;a href=&quot;function.easter-date&quot;&gt;easter_date()&lt;/a&gt; to calculate Easter for years which fall outside the range of Unix timestamps (i.e. before 1970 or after 2037).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c7d64c0216bb61ec90d1d35c93b000f09220810" translate="yes" xml:space="preserve">
          <source>This function can be used to manually search for a class or interface using the registered __autoload functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5bf05ec6ab46a2de93885eef86fc5b5ad3a0a3" translate="yes" xml:space="preserve">
          <source>This function can be used to solve linear Diophantine equations in two variables. These are equations that allow only integer solutions and have the form: &lt;em&gt;a*x + b*y = c&lt;/em&gt;. For more information, go to the &lt;a href=&quot;http://mathworld.wolfram.com/DiophantineEquation.html&quot;&gt;&amp;raquo; &quot;Diophantine Equation&quot; page at MathWorld&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8294dca8e04b2fd2f241ffaa743eaabfd6755eb" translate="yes" xml:space="preserve">
          <source>This function can fail on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1585ccddb2f26324dee91855fc15940f6b02f99a" translate="yes" xml:space="preserve">
          <source>This function can modify and check the file extensions that the built in &lt;a href=&quot;function.autoload&quot;&gt;__autoload()&lt;/a&gt; fallback function &lt;a href=&quot;function.spl-autoload&quot;&gt;spl_autoload()&lt;/a&gt; will be using.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8307806a7049b3952bd5be4dce1e1ef67e66aa06" translate="yes" xml:space="preserve">
          <source>This function can now be called with only one parameter. Formerly, at least two parameters have been required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1da4fc8a41591b5c68d36c4d2b81f311fd0b3c8e" translate="yes" xml:space="preserve">
          <source>This function can now be used in parameter lists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dadc8dae271c070cad99b7fe08101ac9ed53ade3" translate="yes" xml:space="preserve">
          <source>This function can only be used with buffered results attained from the use of the &lt;a href=&quot;mysqli.store-result&quot;&gt;mysqli_store_result()&lt;/a&gt; or &lt;a href=&quot;mysqli.query&quot;&gt;mysqli_query()&lt;/a&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa05f7d330a36a5778e17b540f9361de1ee50c3" translate="yes" xml:space="preserve">
          <source>This function can return &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; both when an error occurs or the program produces no output. It is not possible to detect execution failures using this function. &lt;a href=&quot;function.exec&quot;&gt;exec()&lt;/a&gt; should be used when access to the program exit code is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a19c56209e62d17613c6c86892a401e461f81b1f" translate="yes" xml:space="preserve">
          <source>This function cannot be used to continue a cubic Bezier curve smoothly. It can only continue from a quadratic curve smoothly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1f4d37bdad7890483b9478806502d17ce887873" translate="yes" xml:space="preserve">
          <source>This function causes a fetch of the complete, unfiltered &lt;a href=&quot;http://www.faqs.org/rfcs/rfc2822&quot;&gt;&amp;raquo; RFC2822&lt;/a&gt; format header of the specified message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d549bbff504866bad1141b2c5815fb79032d92f" translate="yes" xml:space="preserve">
          <source>This function causes a store to delete the specified &lt;code&gt;flag&lt;/code&gt; to the flags set for the messages in the specified &lt;code&gt;sequence&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16918d32e5efbb38ccdae10b507f53b68ce95870" translate="yes" xml:space="preserve">
          <source>This function causes the registered event handler specified by &lt;code&gt;event&lt;/code&gt; to be cancelled. The callback function will no longer be called for the events it was registered to handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aaeea3f55166c1daf651e32a4fd8fe3bc8af228" translate="yes" xml:space="preserve">
          <source>This function checks if the attribute is a defined ID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c72e221820d08a8963af98f954eee25f4103ba1" translate="yes" xml:space="preserve">
          <source>This function checks if the given &lt;code&gt;property&lt;/code&gt; exists in the specified class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad78735f3bd445d8d69fbd65f2fc1fd406770bb6" translate="yes" xml:space="preserve">
          <source>This function checks if the node has children.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="657922872b9f2f7960db87efaa974a8bfa9e274e" translate="yes" xml:space="preserve">
          <source>This function checks the existence of a property independent of accessibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54ca2a5bec545a870b5e53ff42869c78d9c5798" translate="yes" xml:space="preserve">
          <source>This function checks to ensure that the file designated by &lt;code&gt;filename&lt;/code&gt; is a valid upload file (meaning that it was uploaded via PHP's HTTP POST upload mechanism). If the file is valid, it will be moved to the filename given by &lt;code&gt;destination&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e3096793aa8ac2a0ea7cf6926aaefca3745c7c" translate="yes" xml:space="preserve">
          <source>This function checks to see if the supplied hash implements the algorithm and options provided. If not, it is assumed that the hash needs to be rehashed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="334076707acc68bca59429bffb7b611212152ec1" translate="yes" xml:space="preserve">
          <source>This function checks whether or not the given class has been defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ee2e11a2fb6731ddf7a60aca24ba9a4fe53de90" translate="yes" xml:space="preserve">
          <source>This function cleans and repairs the given tidy &lt;code&gt;object&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac23a053b903c7aa67c05cbe5ca34e382f51bf78" translate="yes" xml:space="preserve">
          <source>This function clears the error code on the given socket or the global last socket error if no socket is specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac192e01a33c5dd74aa3c305ce005ac6d634bac" translate="yes" xml:space="preserve">
          <source>This function closes a BLOB that has either been opened for reading by &lt;a href=&quot;function.ibase-blob-open&quot;&gt;ibase_blob_open()&lt;/a&gt; or has been opened for writing by &lt;a href=&quot;function.ibase-blob-create&quot;&gt;ibase_blob_create()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0013fbb96ed0098756cfc5635fc4d1b6c8bd13c" translate="yes" xml:space="preserve">
          <source>This function closes the resource opened by &lt;a href=&quot;function.finfo-open&quot;&gt;finfo_open()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48a84f10b4da3979ba35efe8cea541655cafbb4c" translate="yes" xml:space="preserve">
          <source>This function complements &lt;a href=&quot;function.chr&quot;&gt;chr()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c65da2d38820dd1c4f37c46971df0c890e9302" translate="yes" xml:space="preserve">
          <source>This function complements &lt;a href=&quot;function.ord&quot;&gt;ord()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a817830d7c8738566f08cf91872142f2beaef47a" translate="yes" xml:space="preserve">
          <source>This function compliments &lt;a href=&quot;intlchar.chr&quot;&gt;IntlChar::chr()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ee2a281e2ff7a75a35744866d2d99b28d9512d8" translate="yes" xml:space="preserve">
          <source>This function compliments &lt;a href=&quot;intlchar.getpropertyenum&quot;&gt;IntlChar::getPropertyEnum()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fb133ff437fac451bf36d9583daabaf100c85c2" translate="yes" xml:space="preserve">
          <source>This function compliments &lt;a href=&quot;intlchar.getpropertyname&quot;&gt;IntlChar::getPropertyName()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a010b0a482baec19d324731b0d33422359594a" translate="yes" xml:space="preserve">
          <source>This function compliments &lt;a href=&quot;intlchar.ord&quot;&gt;IntlChar::ord()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4205303f735e854b697dee05930f3c46ee4c99fc" translate="yes" xml:space="preserve">
          <source>This function compresses the given string using the &lt;em&gt;DEFLATE&lt;/em&gt; data format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2738695a72351afc44ce8826ffd815f76a6e7109" translate="yes" xml:space="preserve">
          <source>This function compresses the given string using the &lt;em&gt;ZLIB&lt;/em&gt; data format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbda62fbea2de358e47db646a760b92102b59d7f" translate="yes" xml:space="preserve">
          <source>This function controls various runtime options for the specified FTP stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="625eb8bb87fa622c874ded44d0dcb6d0c693f959" translate="yes" xml:space="preserve">
          <source>This function converts &lt;code&gt;number&lt;/code&gt; from degrees to the radian equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e57a42bc63e2179d5b0f7aad2de0a98936fd4c1" translate="yes" xml:space="preserve">
          <source>This function converts &lt;code&gt;number&lt;/code&gt; from radian to degrees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b1ab2c3a8839d929139276c104adc3ef836f7eb" translate="yes" xml:space="preserve">
          <source>This function converts GMP number into native PHP &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbcfbf0c4c5c16c34296fa432f2b72c60728b115" translate="yes" xml:space="preserve">
          <source>This function converts a 32bit IPv4, or 128bit IPv6 address (if PHP was built with IPv6 support enabled) into an address family appropriate string representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83da645d4f8d5561bca141bb520c2c0384b9b367" translate="yes" xml:space="preserve">
          <source>This function converts a Unicode domain name from an IDNA ASCII-compatible format to plain Unicode, encoded in UTF-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff393b3040777fc8c79d96c86b05601a4de2184a" translate="yes" xml:space="preserve">
          <source>This function converts a Unicode domain name to an IDNA ASCII-compatible format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="918c490d30771f51c8cc73765e3fa1770f8a4fe1" translate="yes" xml:space="preserve">
          <source>This function converts a human readable IPv4 or IPv6 address (if PHP was built with IPv6 support enabled) into an address family appropriate 32bit or 128bit binary structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d9208efbeecbcf0d30d279bbaa70bcd4dcf5a86" translate="yes" xml:space="preserve">
          <source>This function converts the string &lt;code&gt;data&lt;/code&gt; from the &lt;em&gt;ISO-8859-1&lt;/em&gt; encoding to &lt;em&gt;UTF-8&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cee42cba0b8378fb2b2b54463d747f433501c8d" translate="yes" xml:space="preserve">
          <source>This function converts the string &lt;code&gt;data&lt;/code&gt; from the &lt;em&gt;UTF-8&lt;/em&gt; encoding to &lt;em&gt;ISO-8859-1&lt;/em&gt;. Bytes in the string which are not valid &lt;em&gt;UTF-8&lt;/em&gt;, and &lt;em&gt;UTF-8&lt;/em&gt; characters which do not exist in &lt;em&gt;ISO-8859-1&lt;/em&gt; (that is, characters above &lt;em&gt;U+00FF&lt;/em&gt;) are replaced with &lt;em&gt;?&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4561202a6c20fa365f0ead8580931f3f76f7fa5d" translate="yes" xml:space="preserve">
          <source>This function creates a BLOB, reads an entire file into it, closes it and returns the assigned BLOB id.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e301a42dde63d7d86a85070a2a901f2ea633f497" translate="yes" xml:space="preserve">
          <source>This function creates a new element node with an associated namespace. This node will not show up in the document unless it is inserted with (e.g.) &lt;a href=&quot;domnode.appendchild&quot;&gt;DOMNode::appendChild()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9337953a7a8528464ebb81d4610567cab09161" translate="yes" xml:space="preserve">
          <source>This function creates a new instance of class &lt;a href=&quot;class.domattr&quot;&gt;DOMAttr&lt;/a&gt;. This node will not show up in the document unless it is inserted with (e.g.) &lt;a href=&quot;domnode.appendchild&quot;&gt;DOMNode::appendChild()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2817b95b6580bc2a6a730cd44294e474f482e8b2" translate="yes" xml:space="preserve">
          <source>This function creates a new instance of class &lt;a href=&quot;class.domcdatasection&quot;&gt;DOMCDATASection&lt;/a&gt;. This node will not show up in the document unless it is inserted with (e.g.) &lt;a href=&quot;domnode.appendchild&quot;&gt;DOMNode::appendChild()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be28625868d2b6ecd7a325e1914a44f40308fc47" translate="yes" xml:space="preserve">
          <source>This function creates a new instance of class &lt;a href=&quot;class.domcomment&quot;&gt;DOMComment&lt;/a&gt;. This node will not show up in the document unless it is inserted with (e.g.) &lt;a href=&quot;domnode.appendchild&quot;&gt;DOMNode::appendChild()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80aaa2b5cb7f0b93131748b3882dc97e3919e4b1" translate="yes" xml:space="preserve">
          <source>This function creates a new instance of class &lt;a href=&quot;class.domdocumentfragment&quot;&gt;DOMDocumentFragment&lt;/a&gt;. This node will not show up in the document unless it is inserted with (e.g.) &lt;a href=&quot;domnode.appendchild&quot;&gt;DOMNode::appendChild()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7376cc183a59014082abcd4426081409f1335fb6" translate="yes" xml:space="preserve">
          <source>This function creates a new instance of class &lt;a href=&quot;class.domelement&quot;&gt;DOMElement&lt;/a&gt;. This node will not show up in the document unless it is inserted with (e.g.) &lt;a href=&quot;domnode.appendchild&quot;&gt;DOMNode::appendChild()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="516320dd965ac5775131473b9961eaa8a4f656fa" translate="yes" xml:space="preserve">
          <source>This function creates a new instance of class &lt;a href=&quot;class.domentityreference&quot;&gt;DOMEntityReference&lt;/a&gt;. This node will not show up in the document unless it is inserted with (e.g.) &lt;a href=&quot;domnode.appendchild&quot;&gt;DOMNode::appendChild()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a77bb76da8d35294219ccf6a0d80a2d389ef6fe" translate="yes" xml:space="preserve">
          <source>This function creates a new instance of class &lt;a href=&quot;class.domprocessinginstruction&quot;&gt;DOMProcessingInstruction&lt;/a&gt;. This node will not show up in the document unless it is inserted with (e.g.) &lt;a href=&quot;domnode.appendchild&quot;&gt;DOMNode::appendChild()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bf9b134efbad60cb7c4532978802141515e6fdb" translate="yes" xml:space="preserve">
          <source>This function creates a new instance of class &lt;a href=&quot;class.domtext&quot;&gt;DOMText&lt;/a&gt;. This node will not show up in the document unless it is inserted with (e.g.) &lt;a href=&quot;domnode.appendchild&quot;&gt;DOMNode::appendChild()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d332053a4afa273262724d5d712a13612831dac" translate="yes" xml:space="preserve">
          <source>This function currently only works with LDAPv3. You may have to use &lt;a href=&quot;function.ldap-set-option&quot;&gt;ldap_set_option()&lt;/a&gt; prior to binding to use LDAPv3. This function is only available when using OpenLDAP 2.x.x OR Netscape Directory SDK x.x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c294198bc11336a8b0d9598cc06d9c73a20fd7a" translate="yes" xml:space="preserve">
          <source>This function decodes the given URL encoded string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87eb8a2124c4202a69a51025e17b8ccbbe63bc43" translate="yes" xml:space="preserve">
          <source>This function decrypts data. Note that the length of the returned string can in fact be longer than the unencrypted string, due to the padding of the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0cc470448cb96d2606fbe5b9708dc38af2ee4a6" translate="yes" xml:space="preserve">
          <source>This function differs from &lt;a href=&quot;function.mysqli-connect&quot;&gt;mysqli_connect()&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a15cb9061083129f189e661a0920ad53f0d5611" translate="yes" xml:space="preserve">
          <source>This function discards the contents of the output buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ddf6cdc24f459829ca95c3f1c4f0d93fcd1e994" translate="yes" xml:space="preserve">
          <source>This function discards the contents of the topmost output buffer and turns off this output buffering. If you want to further process the buffer's contents you have to call &lt;a href=&quot;function.ob-get-contents&quot;&gt;ob_get_contents()&lt;/a&gt; before &lt;strong&gt;ob_end_clean()&lt;/strong&gt; as the buffer contents are discarded when &lt;strong&gt;ob_end_clean()&lt;/strong&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2267a0e4a8fbb7e1ef25572219b54f992786b4c7" translate="yes" xml:space="preserve">
          <source>This function displays structured information about one or more expressions that includes its type and value. Arrays and objects are explored recursively with values indented to show structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7381020ae9bd5084bc60ea074ba682015495b3e3" translate="yes" xml:space="preserve">
          <source>This function does &lt;em&gt;NOT&lt;/em&gt; convert a hexadecimal number to a binary number. This can be done using the &lt;a href=&quot;function.base-convert&quot;&gt;base_convert()&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9947c6b73a80869025216249f9558829e8481f79" translate="yes" xml:space="preserve">
          <source>This function does NOT work on sockets created by the &lt;a href=&quot;https://secure.php.net/manual/en/ref.sockets.php&quot;&gt;Socket extension&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f234a753d545c4ceb665fd0809d32a5b48473323" translate="yes" xml:space="preserve">
          <source>This function does not destroy the output buffer like &lt;a href=&quot;function.ob-end-clean&quot;&gt;ob_end_clean()&lt;/a&gt; does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bfb67b109d0403581467b22cd0703678af98421" translate="yes" xml:space="preserve">
          <source>This function does not destroy the output buffer like &lt;a href=&quot;function.ob-end-flush&quot;&gt;ob_end_flush()&lt;/a&gt; does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d60e47fba9ecf78a716a244971e4eeeeddb080b" translate="yes" xml:space="preserve">
          <source>This function does not emit any errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf6e8b562c8028b1168fa980345f9da21b4915c7" translate="yes" xml:space="preserve">
          <source>This function does not generate cryptographically secure values, and should not be used for cryptographic purposes. If you need a cryptographically secure value, consider using &lt;a href=&quot;function.random-int&quot;&gt;random_int()&lt;/a&gt;, &lt;a href=&quot;function.random-bytes&quot;&gt;random_bytes()&lt;/a&gt;, or &lt;a href=&quot;function.openssl-random-pseudo-bytes&quot;&gt;openssl_random_pseudo_bytes()&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ddb2ec307d686f6a7f140cf476684ac49c33e4" translate="yes" xml:space="preserve">
          <source>This function does not guarantee uniqueness of return value. Since most systems adjust system clock by NTP or like, system time is changed constantly. Therefore, it is possible that this function does not return unique ID for the process/thread. Use &lt;code&gt;more_entropy&lt;/code&gt; to increase likelihood of uniqueness.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11bf881458a10293102bfc5fba27a8f06c1f0ccb" translate="yes" xml:space="preserve">
          <source>This function does not modify any attributes on the tags that you allow using &lt;code&gt;allowable_tags&lt;/code&gt;, including the &lt;em&gt;style&lt;/em&gt; and &lt;em&gt;onmouseover&lt;/em&gt; attributes that a mischievous user may abuse when posting text that will be shown to other users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c62433710518263b2857605097609e226115b78" translate="yes" xml:space="preserve">
          <source>This function does not require the GD image library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a50d5b2bd37e46a99df4cfe00d3366d5bd2c6c" translate="yes" xml:space="preserve">
          <source>This function does not return the alpha value of the color in the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eb5407b86e52472f8400684ec19b86048311134" translate="yes" xml:space="preserve">
          <source>This function does not unset the corresponding global variable for &lt;code&gt;name&lt;/code&gt;, it only prevents the variable from being saved as part of the session. You must call &lt;a href=&quot;function.unset&quot;&gt;unset()&lt;/a&gt; to remove the corresponding global variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c23c24631302e75d7e0b38eb8396558568dd1ae6" translate="yes" xml:space="preserve">
          <source>This function doesn't count overlapped substrings. See the example below!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1718292515d105232f281a54ea11990937b2fa6" translate="yes" xml:space="preserve">
          <source>This function doesn't work with advanced operations like &lt;a href=&quot;function.stream-socket-recvfrom&quot;&gt;stream_socket_recvfrom()&lt;/a&gt;, use &lt;a href=&quot;function.stream-select&quot;&gt;stream_select()&lt;/a&gt; with timeout parameter instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b98da5d4fc284783dfd447a4ec35fe2548b73e" translate="yes" xml:space="preserve">
          <source>This function doesn't work with non transactional table types (like MyISAM or ISAM).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4229dcf959395574e97d61a3f500f8730be595e9" translate="yes" xml:space="preserve">
          <source>This function encrypts data. The data is padded with &quot;&lt;em&gt;\0&lt;/em&gt;&quot; to make sure the length of the data is n * blocksize. This function returns the encrypted data. Note that the length of the returned string can in fact be longer than the input, due to the padding of the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4d5bae552334e4f4b2827f5fd69b0782c585f5c" translate="yes" xml:space="preserve">
          <source>This function expects &lt;code&gt;filename&lt;/code&gt; to be a valid image file. If a non-image file is supplied, it may be incorrectly detected as an image and the function will return successfully, but the array may contain nonsensical values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5ed4cfb63451db97d683a6f94e11ba5c5793aec" translate="yes" xml:space="preserve">
          <source>This function expects a &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; to be useful, so for example passing in an &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; may not return the expected result. However, also note that HTML forms will result in numeric strings and not integers. See also the &lt;a href=&quot;https://secure.php.net/manual/en/language.types.php&quot;&gt;types&lt;/a&gt; section of the manual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a43886935c594bff8e9292b0340e8b53f7d492da" translate="yes" xml:space="preserve">
          <source>This function fetch all the descendant elements with a given &lt;code&gt;localName&lt;/code&gt; and &lt;code&gt;namespaceURI&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17e4712d47e5adf9b0f16a3a302b509506ac5597" translate="yes" xml:space="preserve">
          <source>This function fetches mail headers for the given &lt;code&gt;sequence&lt;/code&gt; and returns an overview of their contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ebd2834de2bc836263c3fe7634666ffd9bab12d" translate="yes" xml:space="preserve">
          <source>This function forces a write of all buffered output to the resource pointed to by the file &lt;code&gt;handle&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e923e7619926842384062d8f07dae6720c1c6cc" translate="yes" xml:space="preserve">
          <source>This function frees a private key created by &lt;a href=&quot;function.openssl-pkey-new&quot;&gt;openssl_pkey_new()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ed28abc3615034ff69614f7ae9a9ee40130df02" translate="yes" xml:space="preserve">
          <source>This function gets the type of the given resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c46ccc71f219dcdd40665db3f2a530bab4309fbe" translate="yes" xml:space="preserve">
          <source>This function has been &lt;em&gt;DEPRECATED&lt;/em&gt; and &lt;em&gt;REMOVED&lt;/em&gt; as of PHP 5.3.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55410f75541df7796824a5ea9333101c6495aad8" translate="yes" xml:space="preserve">
          <source>This function has been &lt;em&gt;DEPRECATED&lt;/em&gt; and &lt;em&gt;REMOVED&lt;/em&gt; as of PHP 5.5.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1035a8a94701f2d0734b0d890ceee5de1333800b" translate="yes" xml:space="preserve">
          <source>This function has been &lt;em&gt;DEPRECATED&lt;/em&gt; as of PHP 5.3.0 and &lt;em&gt;REMOVED&lt;/em&gt; as of PHP 5.4.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85d976d5625673f6d918536fd148299ef4cc4fb9" translate="yes" xml:space="preserve">
          <source>This function has been &lt;em&gt;DEPRECATED&lt;/em&gt; as of PHP 7.1.0 and &lt;em&gt;REMOVED&lt;/em&gt; as of PHP 7.2.0. Relying on this function is highly discouraged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8095c4e4072ff93a1037eeee3da26ea058ec131" translate="yes" xml:space="preserve">
          <source>This function has been &lt;em&gt;DEPRECATED&lt;/em&gt; as of PHP 7.1.0. Relying on this function is highly discouraged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3f241568e41659e389f22373663ebc0df566b0c" translate="yes" xml:space="preserve">
          <source>This function has been &lt;em&gt;DEPRECATED&lt;/em&gt; as of PHP 7.2.0. Relying on this function is highly discouraged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="409ac35bfc7505a7407eaa4e1798cceec01fcc1d" translate="yes" xml:space="preserve">
          <source>This function has been &lt;em&gt;DEPRECATED&lt;/em&gt; as of imagick 3.1.0 in favour of using the &lt;a href=&quot;language.oop5.cloning&quot;&gt;clone&lt;/a&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fee5f03fe12384d9154d606c23f6c0456e7601d" translate="yes" xml:space="preserve">
          <source>This function has been &lt;em&gt;REMOVED&lt;/em&gt; as of PHP 5.4.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57d8671366061dcdb190524a11a49a530213ec7" translate="yes" xml:space="preserve">
          <source>This function has been deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dbe71fc5ae808022c86be467f1413874568e1b0" translate="yes" xml:space="preserve">
          <source>This function has been moved to the core of PHP, and therefore lifting the requirement on the XML extension for this function to be available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f6d00dd6e36b75b0ba07030c43d0f263e75135" translate="yes" xml:space="preserve">
          <source>This function has been removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a5c7d7a2d11431bf5f090d29492af97f2f2579" translate="yes" xml:space="preserve">
          <source>This function has internal escape code and can also be used with PostgreSQL 8.4 or less.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24f8cc31354556f38c86cdc0d5a2e69786859af" translate="yes" xml:space="preserve">
          <source>This function has no effect when PHP is running in &lt;a href=&quot;https://secure.php.net/manual/en/ini.sect.safe-mode.php#ini.safe-mode&quot;&gt;safe mode&lt;/a&gt;. There is no workaround other than turning off safe mode or changing the time limit in the &lt;var&gt;php.ini&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63eb877b6040e406c4d7cf1d2566947362cc0f1e" translate="yes" xml:space="preserve">
          <source>This function has no parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c581f70a3ad8ac68debf40eb62596b8066fe84a5" translate="yes" xml:space="preserve">
          <source>This function has nothing to do with the &lt;var&gt;php.ini&lt;/var&gt; file. It is already processed by the time you run your script. This function can be used to read in your own application's configuration files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e7c838636be4e41cb6205dc1b8af8cf092bb798" translate="yes" xml:space="preserve">
          <source>This function has two prototypes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b573a00b62839f9812120a524c69fa2493b2d237" translate="yes" xml:space="preserve">
          <source>This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would, this is described as a &quot;natural ordering&quot;. Note that this comparison is case sensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9611fbb4d1d7f422e179619672a3f00e7b84289" translate="yes" xml:space="preserve">
          <source>This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would. The behaviour of this function is similar to &lt;a href=&quot;function.strnatcmp&quot;&gt;strnatcmp()&lt;/a&gt;, except that the comparison is not case sensitive. For more information see: Martin Pool's &lt;a href=&quot;http://sourcefrog.net/projects/natsort/&quot;&gt;&amp;raquo; Natural Order String Comparison&lt;/a&gt; page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59b4ef162bc83cdcd200139a85cfa2bd440ee414" translate="yes" xml:space="preserve">
          <source>This function implements a sort algorithm that orders alphanumeric strings in the way a human being would while maintaining key/value associations. This is described as a &quot;natural ordering&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27a79f680276c16dd133c370cdb243834a36328c" translate="yes" xml:space="preserve">
          <source>This function implements a sort algorithm that orders alphanumeric strings in the way a human being would while maintaining key/value associations. This is described as a &quot;natural ordering&quot;. An example of the difference between this algorithm and the regular computer string sorting algorithms (used in &lt;a href=&quot;function.sort&quot;&gt;sort()&lt;/a&gt;) can be seen in the example below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3776cbdedaeec33d32f61f30160b763c434b39c3" translate="yes" xml:space="preserve">
          <source>This function indicates if two nodes are the same node. The comparison is &lt;em&gt;not&lt;/em&gt; based on content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883333f8e63ca48c33bb5df789068c583bb05096" translate="yes" xml:space="preserve">
          <source>This function inflates a deflated string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="975abe66435578cb3b5bc4629d3ed7db381fac4d" translate="yes" xml:space="preserve">
          <source>This function inserts a new node right before the reference node. If you plan to do further modifications on the appended child you must use the returned node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3f7e2e0f51edae9f43a17377270e6dbdc7acc23" translate="yes" xml:space="preserve">
          <source>This function internally performs an &lt;a href=&quot;function.eval&quot;&gt;eval()&lt;/a&gt; and as such has the same security issues as &lt;a href=&quot;function.eval&quot;&gt;eval()&lt;/a&gt;. Additionally it has bad performance and memory usage characteristics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f27617549957a7b5e532315c3b12ad7aa41fa354" translate="yes" xml:space="preserve">
          <source>This function is &lt;em&gt;EXPERIMENTAL&lt;/em&gt;. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e5825826da52dbb8d4c77f1b832d3e534bbb1e" translate="yes" xml:space="preserve">
          <source>This function is &lt;em&gt;not&lt;/em&gt; meant to validate the given URL, it only breaks it up into the above listed parts. Partial URLs are also accepted, &lt;strong&gt;parse_url()&lt;/strong&gt; tries its best to parse them correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a19392f0972ea7f09e7638261c743c9864214973" translate="yes" xml:space="preserve">
          <source>This function is a wrapper for Apache's &lt;em&gt;table_get&lt;/em&gt; and &lt;em&gt;table_set&lt;/em&gt;. It edits the table of notes that exists during a request. The table's purpose is to allow Apache modules to communicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e4533c9a4a94c5b8cb109baa16827850790f14" translate="yes" xml:space="preserve">
          <source>This function is affected by the interpolation method set by &lt;a href=&quot;function.imagesetinterpolation&quot;&gt;imagesetinterpolation()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e870bd2a7d5c470191d8756e494e670e77e74d7e" translate="yes" xml:space="preserve">
          <source>This function is always available if using GeoIP Library version 1.4.1 or newer. The data is taken directly from the GeoIP Library and not from any database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97e11d287972205e2c9b49fd79629467b315e617" translate="yes" xml:space="preserve">
          <source>This function is an alias for &lt;a href=&quot;function.apache-request-headers&quot;&gt;apache_request_headers()&lt;/a&gt;. Please read the &lt;a href=&quot;function.apache-request-headers&quot;&gt;apache_request_headers()&lt;/a&gt; documentation for more information on how this function works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73cc71d7c05aeeb591e9229084cecf86cb4e6a85" translate="yes" xml:space="preserve">
          <source>This function is an alias of &lt;a href=&quot;mysqli-stmt.bind-param&quot;&gt;mysqli_stmt_bind_param()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a13375b9c0a833a7fc2d55237d607b9812e6a3" translate="yes" xml:space="preserve">
          <source>This function is an alias of &lt;a href=&quot;mysqli-stmt.bind-result&quot;&gt;mysqli_stmt_bind_result()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0da5758c7d72a674c580ec9f05554c0b82a4ada4" translate="yes" xml:space="preserve">
          <source>This function is an alias of &lt;a href=&quot;mysqli-stmt.execute&quot;&gt;mysqli_stmt_execute()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14fc8b75b3ce6d968ce9f239371552e4437ef5f3" translate="yes" xml:space="preserve">
          <source>This function is an alias of &lt;a href=&quot;mysqli-stmt.fetch&quot;&gt;mysqli_stmt_fetch()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23bcf8d6e78d11be937bf12006c89b4e526379cb" translate="yes" xml:space="preserve">
          <source>This function is an alias of &lt;a href=&quot;mysqli-stmt.param-count&quot;&gt;mysqli_stmt_param_count()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12376afa08cfe148df7bc041830b61ccb23eeecc" translate="yes" xml:space="preserve">
          <source>This function is an alias of &lt;a href=&quot;mysqli-stmt.result-metadata&quot;&gt;mysqli_stmt_result_metadata()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0de2a82877eaccccf890190db2e512b8f535d15" translate="yes" xml:space="preserve">
          <source>This function is an alias of &lt;a href=&quot;mysqli-stmt.send-long-data&quot;&gt;mysqli_stmt_send_long_data()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a19578f8d751d510c72497e0221a47f0adcaf58c" translate="yes" xml:space="preserve">
          <source>This function is an alias of &lt;a href=&quot;mysqli.character-set-name&quot;&gt;mysqli_character_set_name()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a38fdba8fb6455cb3eed56e5baf25e8b8f47da" translate="yes" xml:space="preserve">
          <source>This function is an alias of &lt;a href=&quot;mysqli.options&quot;&gt;mysqli_options()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e4243ccf43ec1bcd88c63ead90cf56aba3e83b7" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;curlfile.construct&quot;&gt;CURLFile::__construct()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f76a3d825625f58cee7906eec666fe49b01f50" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;dateinterval.createfromdatestring&quot;&gt;DateInterval::createFromDateString()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c58f816e5cff7ab16b649ed36ab7c1b420a4c662" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;dateinterval.format&quot;&gt;DateInterval::format()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a23dd68e2baae420f56abf51d98b43ed74ddc1d6" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;datetime.add&quot;&gt;DateTime::add()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8c6ab5bf353358b52458e90752ee3ce413de74" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;datetime.construct&quot;&gt;DateTime::__construct()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f295d38ba527de986734da2b98407754f5890c42" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;datetime.createfromformat&quot;&gt;DateTime::createFromFormat()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e18c9fde5e6b63958019ee0e9138b9bba73a404e" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;datetime.diff&quot;&gt;DateTime::diff()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b855cc46c5f41429021cd53670d0c4b4b7a78f7d" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;datetime.format&quot;&gt;DateTime::format()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aa77700ef5644a0b0c79542fe2bc47d3f9d4294" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;datetime.getlasterrors&quot;&gt;DateTime::getLastErrors()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdcad716040fe379e63a5ef09d2870c6c24e1735" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;datetime.getoffset&quot;&gt;DateTime::getOffset()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bb69ba2494395f50e94fe51c709f1a70664b399" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;datetime.gettimestamp&quot;&gt;DateTime::getTimestamp()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a124a7dab0acf16075be0482458e7aa609ad1d29" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;datetime.gettimezone&quot;&gt;DateTime::getTimezone()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6526c254508301f9aedda89d7e6d6f7f981c176" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;datetime.modify&quot;&gt;DateTime::modify()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e7ab3029b4ddbd3e280939b0548858e14a5231b" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;datetime.setdate&quot;&gt;DateTime::setDate()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a224b1eccfac802e6f50cfb6134bbdac8a256d7f" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;datetime.setisodate&quot;&gt;DateTime::setISODate()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8582b728103446ff5c6554e8aa13735adcb995d2" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;datetime.settime&quot;&gt;DateTime::setTime()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a704f32e46024364e4350aac5261ebc4180f0afd" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;datetime.settimestamp&quot;&gt;DateTime::setTimestamp()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec605e1795de9c56c62de7c8a3726152d9359977" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;datetime.settimezone&quot;&gt;DateTime::setTimezone()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fde72253c94a803f6aa19e3d2d709974a6c7adc2" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;datetime.sub&quot;&gt;DateTime::sub()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27a0df25316323f027d8737b5cf02d38b02ae334" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;datetimeimmutable.construct&quot;&gt;DateTimeImmutable::__construct()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e738f2633c39f5b5da70080ce9f8705fe7582355" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;datetimeimmutable.createfromformat&quot;&gt;DateTimeImmutable::createFromFormat()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cabbec17ca8577d52461a54fbf3f245061fc2ce" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;datetimezone.construct&quot;&gt;DateTimeZone::__construct()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e38280e3416a04da2b233cd807792ef3f66f72a" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;datetimezone.getlocation&quot;&gt;DateTimeZone::getLocation()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01bc536e5e2b8e021d9e5ba3eb92f95cca77aec0" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;datetimezone.getname&quot;&gt;DateTimeZone::getName()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb374d98d6a59c0c4a3951a7b21c856a75640d12" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;datetimezone.getoffset&quot;&gt;DateTimeZone::getOffset()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8144862f44afe8e075bcce36fa0e69ee2edd5f97" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;datetimezone.gettransitions&quot;&gt;DateTimeZone::getTransitions()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="675a50ce95f8742f66a15a454df938350d90f0e5" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;datetimezone.listabbreviations&quot;&gt;DateTimeZone::listAbbreviations()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc83570d97280cff8afd799f6cd15c2fa7ec60cf" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;datetimezone.listidentifiers&quot;&gt;DateTimeZone::listIdentifiers()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e39ae8488d166a43a02453e4cd5dd1f851273781" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;event.add&quot;&gt;event_add()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="749080ad5b957bb1625b8cf67c0a27171ae165c9" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;event.del&quot;&gt;event_del()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9472fa84d78b9d1ce44d03601239ae540b15522c" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.array-key-exists&quot;&gt;array_key_exists()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d374348523dfaaef6ebbd3c3e2de5fa437aed49" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.checkdnsrr&quot;&gt;checkdnsrr()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7296d71c8efd2624f186ee3f952336bf72dce29" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.count&quot;&gt;count()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0be20eea6142646eab46c57dfc75189c38740c37" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.current&quot;&gt;current()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f62e2be80f2c4d73ce75ab3b7a7013fc7fd302f7" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.disk-free-space&quot;&gt;disk_free_space()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc5e52dc1a5d945c628d7964ebe50eb0b0f9a813" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.event-new&quot;&gt;event_new()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb5bf81b5ab4929c63c018c91d5bdc0dab91d519" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.exif-read-data&quot;&gt;exif_read_data()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb6c29c94f9e352d6a4a1bdd0e218052a15d979f" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.finfo-buffer&quot;&gt;finfo_buffer()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcc33896a8582a7e11175f424e00840a9eae9e76" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.finfo-file&quot;&gt;finfo_file()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9c98936073cfd2c9c138348964a0f261510268b" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.finfo-open&quot;&gt;finfo_open()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4550c4047f13c7133f19678af127f3de5e49063e" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.finfo-set-flags&quot;&gt;finfo_set_flags()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a807a6b7c3022c52c95650022e9e88f680a7c2" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.floatval&quot;&gt;floatval()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4e1904ecd3f6c56fed1e25a013825c6291c30e0" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.ftp-close&quot;&gt;ftp_close()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c49451e533dbd9eb87584ab5d500b73248373ac3" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.fwrite&quot;&gt;fwrite()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aedd9629cfb665ccf6dfdc6faf620e78c20251d9" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.get-included-files&quot;&gt;get_included_files()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="775f25538369beb3de23d509ecb6a843ce03dac9" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.getmxrr&quot;&gt;getmxrr()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82dc91fce13829977caed4687e1653f304bcd7fb" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.gmp-div-q&quot;&gt;gmp_div_q()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f24d12d0af62797712158f93e5a5b7cf1d925d87" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.gzwrite&quot;&gt;gzwrite()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e715d126034b4aee720f55e9d154085765d40fb5" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.highlight-file&quot;&gt;highlight_file()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="603bf31322b740087b58d4ec75fbfc533afe164d" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.imap-body&quot;&gt;imap_body()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d709d9b59b106cbfe983904e43a2f33ea32dec" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.imap-createmailbox&quot;&gt;imap_createmailbox()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2435e262508f5b1deb136edfe8572bdd78039bf" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.imap-headerinfo&quot;&gt;imap_headerinfo()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fcb45475b5001cf99ee0cc536732076ccbd6b17" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.imap-list&quot;&gt;imap_list()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eb970193b9a7850e116b4549a1e1ee32e253e00" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.imap-listscan&quot;&gt;imap_listscan()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a812623a04cbd56de5ebf644a44f7a06235de2b6" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.imap-lsub&quot;&gt;imap_lsub()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bee0ae475d1d55a30477223b94aaab624554ce2" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.imap-renamemailbox&quot;&gt;imap_renamemailbox()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6ef16c3b5f8392506dc45c5c9005811730841bb" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.implode&quot;&gt;implode()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="923fec3d6982435995bdd35b4a93012cc72df72e" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.ini-set&quot;&gt;ini_set()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c17efa5afa0181af066b69f745da3da1599ab9f" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.is-float&quot;&gt;is_float()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26903f2de95f1a09cb19b4f61eb64831aacec1c5" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.is-int&quot;&gt;is_int()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11760867f1f9f460a10a92276d5302db867fe1dd" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.is-writable&quot;&gt;is_writable()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a968baf65f1e01632a59242d02c9db2c340a9d1d" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.ldap-mod-replace&quot;&gt;ldap_mod_replace()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59d5bdf2b0f76f470525fee203f211b0764afaa7" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.ldap-unbind&quot;&gt;ldap_unbind()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2d5af1abe4bf1ce17e94de45430dc14e744d1f2" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.odbc-exec&quot;&gt;odbc_exec()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f97b8f1036c3fa9774a0f2da8b6825c71612fe9" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.odbc-field-len&quot;&gt;odbc_field_len()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c3b0ece1f3132cf78e373e173adc8a8016c318" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.openssl-pkey-get-private&quot;&gt;openssl_pkey_get_private()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c5a28707ed5d2d82f3148e929516e585a02547a" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.openssl-pkey-get-public&quot;&gt;openssl_pkey_get_public()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13b3666911c8d80cefcc799efc58206bf41041a5" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.pcntl-get-last-error&quot;&gt;pcntl_get_last_error()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f0fa5d88316ac3c09b07f618dabd5787cd10d01" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.posix-get-last-error&quot;&gt;posix_get_last_error()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9c75a513497d6bb53ca60a6d32e705efca9042" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.rtrim&quot;&gt;rtrim()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d842209317c266bc78edc1c7f52ccf37b94691" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.session-write-close&quot;&gt;session_write_close()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb399bb60d984dd872170997b836d1217e71f87" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.set-magic-quotes-runtime&quot;&gt;set_magic_quotes_runtime()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46924ec349018b711ed486b7186820b9c703fcf8" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.socket-get-option&quot;&gt;socket_get_option()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b28e204c8e80c181dd192b79bec22da0472d790f" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.socket-set-option&quot;&gt;socket_set_option()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c5bd6ff10ad2b0201346c147fa7bdfa98962de" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.stream-get-meta-data&quot;&gt;stream_get_meta_data()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4816d9baba9a68f2b0e24d3d2719846faa679f6" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.stream-set-blocking&quot;&gt;stream_set_blocking()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1567446e7f1484e944b309b7dff2782c2e4fcc2b" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.stream-set-blocking&quot;&gt;stream_set_blocking()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="061fe9259075ef3c4671658b449c932146557638" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.stream-set-timeout&quot;&gt;stream_set_timeout()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f91ae30f3902fda03700f9477e52a50bf7c5ea8" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.stream-set-write-buffer&quot;&gt;stream_set_write_buffer()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2cf8ec3807f1e45649262cb23c158ac7eb7031d" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.stream-wrapper-register&quot;&gt;stream_wrapper_register()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e869727391fe9a583611671652325dfbbe20bad" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.strstr&quot;&gt;strstr()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9aadb4a87c517a8d5872ef3dd97f0518faa31a8" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;function.trigger-error&quot;&gt;trigger_error()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a903a1003444de16fe31520774028e5c95f1330" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;mysqli-driver.report-mode&quot;&gt;mysqli_driver-&amp;gt;report_mode&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71455865ef1ca12560ff052d9275550ed95cd014" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;mysqli.construct&quot;&gt;mysqli::__construct()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="128c1f2347170cf59d5cfb8c4fd9b05d2573bebe" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;mysqli.real-escape-string&quot;&gt;mysqli_real_escape_string()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec8e5b0902ced0dc59986f370936ffa875981ccd" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;soapclient.soapclient&quot;&gt;SoapClient::SoapClient()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ab0ef7b3118e729cd3ea2bbbeb0df76cb6c7188" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;soapfault.soapfault&quot;&gt;SoapFault::SoapFault()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e8a874a94b115f176e968b6f193548db5c13dd" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;soapheader.soapheader&quot;&gt;SoapHeader::SoapHeader()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22968df6831a344a0f4e2c5e11b17583c9d3f827" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;soapparam.soapparam&quot;&gt;SoapParam::SoapParam()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df32e4039e6fa40823d3c66be73d8cccae256607" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;soapserver.soapserver&quot;&gt;SoapServer::SoapServer()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbda29d3ae42e5c4eb96c7a5170e75617051aa64" translate="yes" xml:space="preserve">
          <source>This function is an alias of: &lt;a href=&quot;soapvar.soapvar&quot;&gt;SoapVar::SoapVar()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="337ae37aec25d6a9f6470af96fa80c23478712da" translate="yes" xml:space="preserve">
          <source>This function is available even if no databases are installed. It will simply list them as non-available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fbc6e4270c5ee82ae41aaf5807b259251414bab" translate="yes" xml:space="preserve">
          <source>This function is available for both GeoLite City Edition and commercial GeoIP City Edition. A warning will be issued if the proper database cannot be located.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dbc678e531e6650fca3b10fe0378fa553957288" translate="yes" xml:space="preserve">
          <source>This function is available only if &lt;em&gt;Event&lt;/em&gt; is compiled with OpenSSL support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd2540ea74eb436010917fa5a8da415bffe329f9" translate="yes" xml:space="preserve">
          <source>This function is available only in &lt;a href=&quot;https://secure.php.net/manual/en/features.commandline.php&quot;&gt;CLI&lt;/a&gt; mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a11f15416d00af4e7bd99ad6f5d8e4336d3452ae" translate="yes" xml:space="preserve">
          <source>This function is case-sensitive. For case-insensitive searches, use &lt;a href=&quot;function.stristr&quot;&gt;stristr()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ddb10f0f067d06eaee13d6cbe188810abd56b09" translate="yes" xml:space="preserve">
          <source>This function is case-sensitive. Use &lt;a href=&quot;function.str-ireplace&quot;&gt;str_ireplace()&lt;/a&gt; for case-insensitive replace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f110e9ebe9282427e97b6e394acf7b7b209441" translate="yes" xml:space="preserve">
          <source>This function is convenient when encoding a string to be used in a query part of a URL, as a convenient way to pass variables to the next page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac9db69a49d59855558707fdcbd920a41326be4" translate="yes" xml:space="preserve">
          <source>This function is currently not documented; only its argument list is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d4d77dc89a5abc529a76c55a6d28b1ba3b66736" translate="yes" xml:space="preserve">
          <source>This function is currently only available to users of the c-client2000 or greater library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3de0a6f754532000cadad03fce37bdf3c599defb" translate="yes" xml:space="preserve">
          <source>This function is currently only available to users who have bought a commercial GeoIP Domain Edition. A warning will be issued if the proper database cannot be located.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51fc3bad939810d66ae42f3a9b3a35b6933adf3b" translate="yes" xml:space="preserve">
          <source>This function is currently only available to users who have bought a commercial GeoIP ISP Edition. A warning will be issued if the proper database cannot be located.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84850c317d973a27899c036faec3f0bd5730a12b" translate="yes" xml:space="preserve">
          <source>This function is currently only available to users who have bought a commercial GeoIP NetSpeedCell Edition. A warning will be issued if the proper database cannot be located.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55b53a2862e48180c70e13c2196890c8faf47473" translate="yes" xml:space="preserve">
          <source>This function is currently only available to users who have bought a commercial GeoIP Organization, ISP or AS Edition. A warning will be issued if the proper database cannot be located.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e119309af970ba388673679421a82bea69fbf02" translate="yes" xml:space="preserve">
          <source>This function is currently only available to users who have bought a commercial GeoIP Region Edition. A warning will be issued if the proper database cannot be located.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1078faf3f836229570869bb15e65a0303fab4e08" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Use combination of &lt;a href=&quot;function.imagesetstyle&quot;&gt;imagesetstyle()&lt;/a&gt; and &lt;a href=&quot;function.imageline&quot;&gt;imageline()&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a9ba5e58dd35dd8b7f81f6fa710e7542f242795" translate="yes" xml:space="preserve">
          <source>This function is designed to be executed by an user with the SUPER privilege and is used to dump debugging information into the log for the MySQL Server relating to the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a186c8b1e9b97afd5cd6038adb3218149ec05f5e" translate="yes" xml:space="preserve">
          <source>This function is disabled when PHP is running in &lt;a href=&quot;https://secure.php.net/manual/en/features.safe-mode.php&quot;&gt;safe mode&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bcc9df365a654c6055a3d239748808da11f2ad5" translate="yes" xml:space="preserve">
          <source>This function is equivalent to calling &lt;a href=&quot;function.pcntl-waitpid&quot;&gt;pcntl_waitpid()&lt;/a&gt; with a &lt;em&gt;-1&lt;/em&gt;&lt;code&gt;pid&lt;/code&gt; and no &lt;code&gt;options&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e2550005e7feac27cd2099b609032bbfb3f225a" translate="yes" xml:space="preserve">
          <source>This function is especially useful for base64 and datetime strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce58feb22a6876b020450627f98c0c8034cb0591" translate="yes" xml:space="preserve">
          <source>This function is guaranteed to return a color index for a requested color, either the exact color or the closest possible alternative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5a882e694f7c269f8a1b315fba4c8e24ec5bbae" translate="yes" xml:space="preserve">
          <source>This function is identical to &lt;a href=&quot;function.ereg&quot;&gt;ereg()&lt;/a&gt; except that it ignores case distinction when matching alphabetic characters.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
