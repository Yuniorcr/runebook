<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="">
    <body>
      <group id="">
        <trans-unit id="c891e6e4721a204b58b71f091a69d6cab5703fa1" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2002-2019 Igor Sysoev</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f1373e909d7c7fa9817042c9d2724123053bea3" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2011-2019 Nginx, Inc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="394c80891b5fefe71aa391add38a5f370c588936" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;--enable-tlsext&amp;rdquo;.</source>
          <target state="translated">&amp;ldquo;--enable-tlsext&amp;rdquo;.</target>
        </trans-unit>
        <trans-unit id="27d53bc173c3dc0b85293b6a55148072a3c42906" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;&lt;code&gt;//&lt;/code&gt;&amp;rdquo; comments are not used</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72290fa6271d319f1d17ea65abe73474f90b56ac" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;&lt;code&gt;?&lt;/code&gt;&amp;rdquo; if a request line has arguments, or an empty string otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="015a558980e60f7c10fb643b8f0902ece5b85f55" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;&lt;code&gt;ALL:!ADH:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP&lt;/code&gt;&amp;rdquo;.</source>
          <target state="translated">&amp;ldquo;&lt;code&gt;ALL:!ADH:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP&lt;/code&gt;&amp;rdquo;.</target>
        </trans-unit>
        <trans-unit id="f2d49bc907094f0eabe4f23e7c1f182feb39f88d" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;&lt;code&gt;OK&lt;/code&gt;&amp;rdquo; if a request has completed, or an empty string otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e619cf5403f702d57444bf5193e83cf3002ab0d" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;&lt;code&gt;len&lt;/code&gt;&amp;rdquo; defines the fragment length in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faf4c78517c19898499d70d2cae98aca4ff2e610" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;&lt;code&gt;offset&lt;/code&gt;&amp;rdquo; shifts an initial playback position to the time offset in seconds (1.9.0). A positive value sets a time offset from the beginning of the playlist. A negative value sets a time offset from the end of the last fragment in the playlist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff9c12bf0c733ea6644662c488f1c7c2580d990f" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;&lt;code&gt;on&lt;/code&gt;&amp;rdquo; if connection operates in SSL mode, or an empty string otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d2e19ed43d5dd56c6971e7faaf4c9f0587bfa9" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;&lt;code&gt;p&lt;/code&gt;&amp;rdquo; if request was pipelined, &amp;ldquo;&lt;code&gt;.&lt;/code&gt;&amp;rdquo; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="592a198ab4d2bb0bf00796fb5bd2716648fd2baa" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;&lt;code&gt;p&lt;/code&gt;&amp;rdquo; if request was pipelined, &amp;ldquo;&lt;code&gt;.&lt;/code&gt;&amp;rdquo; otherwise (1.3.12, 1.2.7)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a14cf61e40ba56fc8ee708ba40471868997276" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;&lt;code&gt;start&lt;/code&gt;&amp;rdquo; and &amp;ldquo;&lt;code&gt;end&lt;/code&gt;&amp;rdquo; define fragment boundaries in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="779b78400f982cde8ebe22b508707e9a4fdf30b0" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;&lt;code&gt;start&lt;/code&gt;&amp;rdquo; and &amp;ldquo;&lt;code&gt;end&lt;/code&gt;&amp;rdquo; define playlist boundaries in seconds (1.9.0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2293a15d97097e9ff5761d9a992596fea981587" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Content-Length&amp;rdquo; request header field</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a83a95750145ec6e53b34af5e5bcae58cc3bdf4" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Content-Type&amp;rdquo; request header field</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b19f96cee52869ee70e6f1f4614e50eeb0891f1c" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;X-Accel-Buffering&amp;rdquo; enables or disables &lt;a href=&quot;#fastcgi_buffering&quot;&gt;buffering&lt;/a&gt; of a response;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a8996821559f70a1c32033040fb5f85874893e" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;X-Accel-Buffering&amp;rdquo; enables or disables &lt;a href=&quot;#proxy_buffering&quot;&gt;buffering&lt;/a&gt; of a response;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4b11c3e7e3d72b307e34fba7937941b7976cebb" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;X-Accel-Buffering&amp;rdquo; enables or disables &lt;a href=&quot;#scgi_buffering&quot;&gt;buffering&lt;/a&gt; of a response;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ed74bb740b9333e96279702fa31accf5df93699" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;X-Accel-Buffering&amp;rdquo; enables or disables &lt;a href=&quot;#uwsgi_buffering&quot;&gt;buffering&lt;/a&gt; of a response;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19c9c2d7a637a0a38a539722578c31f6f8aa4b91" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;X-Accel-Charset&amp;rdquo; sets the desired &lt;a href=&quot;ngx_http_charset_module#charset&quot;&gt;charset&lt;/a&gt; of a response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d95013fccd3fde8dbdc2ae38415aeefa572b602d" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;X-Accel-Expires&amp;rdquo;, &amp;ldquo;Expires&amp;rdquo;, &amp;ldquo;Cache-Control&amp;rdquo;, &amp;ldquo;Set-Cookie&amp;rdquo;, and &amp;ldquo;Vary&amp;rdquo; set the parameters of response &lt;a href=&quot;#fastcgi_cache_valid&quot;&gt;caching&lt;/a&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="782b0eeb43597d410d2fd9152ca5577d97074a8b" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;X-Accel-Expires&amp;rdquo;, &amp;ldquo;Expires&amp;rdquo;, &amp;ldquo;Cache-Control&amp;rdquo;, &amp;ldquo;Set-Cookie&amp;rdquo;, and &amp;ldquo;Vary&amp;rdquo; set the parameters of response &lt;a href=&quot;#proxy_cache_valid&quot;&gt;caching&lt;/a&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="068a9f37e7f1df75b34ad91c4059d5a0b996e305" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;X-Accel-Expires&amp;rdquo;, &amp;ldquo;Expires&amp;rdquo;, &amp;ldquo;Cache-Control&amp;rdquo;, &amp;ldquo;Set-Cookie&amp;rdquo;, and &amp;ldquo;Vary&amp;rdquo; set the parameters of response &lt;a href=&quot;#scgi_cache_valid&quot;&gt;caching&lt;/a&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8522f6f7c5fdeec1ac030a35cc62f7dcbd8ac112" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;X-Accel-Expires&amp;rdquo;, &amp;ldquo;Expires&amp;rdquo;, &amp;ldquo;Cache-Control&amp;rdquo;, &amp;ldquo;Set-Cookie&amp;rdquo;, and &amp;ldquo;Vary&amp;rdquo; set the parameters of response &lt;a href=&quot;#uwsgi_cache_valid&quot;&gt;caching&lt;/a&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b049cb4d2747878aca6f18d1ab7aeebb25f9b68" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;X-Accel-Limit-Rate&amp;rdquo; sets the &lt;a href=&quot;ngx_http_core_module#limit_rate&quot;&gt;rate limit&lt;/a&gt; for transmission of a response to a client;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d745bd22e1d1f8e998a8bd62a7d76452f21603" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;X-Accel-Redirect&amp;rdquo; performs an &lt;a href=&quot;ngx_http_core_module#internal&quot;&gt;internal redirect&lt;/a&gt; to the specified URI;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b8ce078e640788b28ade3a8e664e8740eba89ea" translate="yes" xml:space="preserve">
          <source>&amp;mdash;</source>
          <target state="translated">&amp;mdash;</target>
        </trans-unit>
        <trans-unit id="dede57434b64dedb80ad58cc5ba68de758985f13" translate="yes" xml:space="preserve">
          <source>&amp;rdquo;) of the &lt;code&gt;www.GoDaddy.com&lt;/code&gt; server certificate #0 is signed by an issuer (&amp;ldquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3bbc2cd88206daefb3156938cf91a2b51c1c92f" translate="yes" xml:space="preserve">
          <source>&amp;rdquo;) which itself is the subject of the certificate #1, which is signed by an issuer which itself is the subject of the certificate #2, which signed by the well-known issuer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="297a69f2f55d5e4cd15edfd57e0486c2b7da84e9" translate="yes" xml:space="preserve">
          <source>(njs specific) Converts a byte string containing a valid UTF8 string into a Unicode string, otherwise &lt;code&gt;null&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3ef43f69a4e5e4a5e19800be9e310d39af2a5b0" translate="yes" xml:space="preserve">
          <source>(njs specific) Creates a byte string either from an array that contains octets, or from an encoded string (&lt;a href=&quot;changes#njs0.2.3&quot;&gt;0.2.3&lt;/a&gt;). The encoding can be &lt;code&gt;hex&lt;/code&gt;, &lt;code&gt;base64&lt;/code&gt;, and &lt;code&gt;base64url&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7eff5ea4aefd0addec705b25979f53888de915a" translate="yes" xml:space="preserve">
          <source>(njs specific) If &lt;code&gt;encoding&lt;/code&gt; is specified, encodes a &lt;a href=&quot;#string_tobytes&quot;&gt;byte string&lt;/a&gt; to &lt;code&gt;hex&lt;/code&gt;, &lt;code&gt;base64&lt;/code&gt;, or &lt;code&gt;base64url&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a924326ef6c8aa0bd55ea49e9462c333014b34" translate="yes" xml:space="preserve">
          <source>(njs specific) Returns a new Unicode string from a byte string where each byte is replaced with a corresponding Unicode code point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="814da66c7f0054d9a5e44155be1dbf6d0bbd6490" translate="yes" xml:space="preserve">
          <source>(njs specific) Serializes a Unicode string to a byte string using UTF8 encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7914f5556b77988efadb2f46f56400ec6d50b6d5" translate="yes" xml:space="preserve">
          <source>(njs specific) Serializes a Unicode string to a byte string. Returns &lt;code&gt;null&lt;/code&gt; if a character larger than 255 is found in the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca1ae086a44a8871ee4b270977c33c3f070e9e66" translate="yes" xml:space="preserve">
          <source>. By default the file is named &lt;code&gt;&lt;i&gt;prefix&lt;/i&gt;/conf/nginx.conf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12773e2c640e77978e17b13ccd7060ea894f9ddc" translate="yes" xml:space="preserve">
          <source>/connections</source>
          <target state="translated">/connections</target>
        </trans-unit>
        <trans-unit id="5e03af2735029299182fd39f29b5bbb8bc76c493" translate="yes" xml:space="preserve">
          <source>/http/</source>
          <target state="translated">/http/</target>
        </trans-unit>
        <trans-unit id="259e355ef974392ba89d81549003c568997d195e" translate="yes" xml:space="preserve">
          <source>/http/caches/</source>
          <target state="translated">/http/caches/</target>
        </trans-unit>
        <trans-unit id="7a5ba3cafb939d337a518e156e919dd83ecbb997" translate="yes" xml:space="preserve">
          <source>/http/caches/{httpCacheZoneName}</source>
          <target state="translated">/http/caches/{httpCacheZoneName}</target>
        </trans-unit>
        <trans-unit id="6fda16fcb167efabe72f5a68e443e007affac588" translate="yes" xml:space="preserve">
          <source>/http/keyvals/</source>
          <target state="translated">/http/keyvals/</target>
        </trans-unit>
        <trans-unit id="df58f250c7b8715b782951e75e1686decfc512c6" translate="yes" xml:space="preserve">
          <source>/http/keyvals/{httpKeyvalZoneName}</source>
          <target state="translated">/http/keyvals/{httpKeyvalZoneName}</target>
        </trans-unit>
        <trans-unit id="936c92c596c50df140fcd5db448e01eeb1f606bf" translate="yes" xml:space="preserve">
          <source>/http/requests</source>
          <target state="translated">/http/requests</target>
        </trans-unit>
        <trans-unit id="c07fc34a225036f0f1d875acc0b50895b048839a" translate="yes" xml:space="preserve">
          <source>/http/server_zones/</source>
          <target state="translated">/http/server_zones/</target>
        </trans-unit>
        <trans-unit id="516df572ee43c216419b238084a6c1da1842419d" translate="yes" xml:space="preserve">
          <source>/http/server_zones/{httpServerZoneName}</source>
          <target state="translated">/http/server_zones/{httpServerZoneName}</target>
        </trans-unit>
        <trans-unit id="7ce2cd9ff5cc8e63b3f0a32a95ef73eb87588cec" translate="yes" xml:space="preserve">
          <source>/http/upstreams/</source>
          <target state="translated">/http/upstreams/</target>
        </trans-unit>
        <trans-unit id="a17b7442874f330f2e5862564a408535d56e81be" translate="yes" xml:space="preserve">
          <source>/http/upstreams/{httpUpstreamName}/</source>
          <target state="translated">/http/upstreams/{httpUpstreamName}/</target>
        </trans-unit>
        <trans-unit id="64ab5ff33bb00c9d3b92f0ead06b877a58b7386c" translate="yes" xml:space="preserve">
          <source>/http/upstreams/{httpUpstreamName}/servers/</source>
          <target state="translated">/http/upstreams/{httpUpstreamName}/servers/</target>
        </trans-unit>
        <trans-unit id="7c705e96582cb31f18f138c2eca4b461136bf0da" translate="yes" xml:space="preserve">
          <source>/http/upstreams/{httpUpstreamName}/servers/{httpUpstreamServerId}</source>
          <target state="translated">/http/upstreams/{httpUpstreamName}/servers/{httpUpstreamServerId}</target>
        </trans-unit>
        <trans-unit id="7d5cd3e14d60855393624b4f0867c49c75004c4a" translate="yes" xml:space="preserve">
          <source>/nginx</source>
          <target state="translated">/nginx</target>
        </trans-unit>
        <trans-unit id="a7648dcacd1cbcfc1f1bfecc6754c57ea75856fb" translate="yes" xml:space="preserve">
          <source>/processes</source>
          <target state="translated">/processes</target>
        </trans-unit>
        <trans-unit id="0b4db06773bea04d733427d2382222b5f596b85d" translate="yes" xml:space="preserve">
          <source>/slabs/</source>
          <target state="translated">/slabs/</target>
        </trans-unit>
        <trans-unit id="edc15491e6bc41df4fe73817059759cb7e519c7c" translate="yes" xml:space="preserve">
          <source>/slabs/{slabZoneName}</source>
          <target state="translated">/slabs/{slabZoneName}</target>
        </trans-unit>
        <trans-unit id="e0f08660606a2d7fa8224a6a1b3a252c1268c434" translate="yes" xml:space="preserve">
          <source>/ssl</source>
          <target state="translated">/ssl</target>
        </trans-unit>
        <trans-unit id="5800a03ec3bbc2546d6b4b8bf6308f950193865e" translate="yes" xml:space="preserve">
          <source>/stream/</source>
          <target state="translated">/stream/</target>
        </trans-unit>
        <trans-unit id="68b39d5a63198aec4c6951edea2dee88eac14af1" translate="yes" xml:space="preserve">
          <source>/stream/keyvals/</source>
          <target state="translated">/stream/keyvals/</target>
        </trans-unit>
        <trans-unit id="841513490c9c18b02c0f6b4c3f3c41dbb55ebf5b" translate="yes" xml:space="preserve">
          <source>/stream/keyvals/{streamKeyvalZoneName}</source>
          <target state="translated">/stream/keyvals/{streamKeyvalZoneName}</target>
        </trans-unit>
        <trans-unit id="a04743ef50a0e343ba37268f2fd18094154e8ef7" translate="yes" xml:space="preserve">
          <source>/stream/server_zones/</source>
          <target state="translated">/stream/server_zones/</target>
        </trans-unit>
        <trans-unit id="b4f74d6b79d19940dd97effe2286bd24d8a3b0d2" translate="yes" xml:space="preserve">
          <source>/stream/server_zones/{streamServerZoneName}</source>
          <target state="translated">/stream/server_zones/{streamServerZoneName}</target>
        </trans-unit>
        <trans-unit id="b9554c904745f95569338bb2dcffe6f2720542e9" translate="yes" xml:space="preserve">
          <source>/stream/upstreams/</source>
          <target state="translated">/stream/upstreams/</target>
        </trans-unit>
        <trans-unit id="ab48048f2fbdb0851d0822657c158c0d1f05e91d" translate="yes" xml:space="preserve">
          <source>/stream/upstreams/{streamUpstreamName}/</source>
          <target state="translated">/stream/upstreams/{streamUpstreamName}/</target>
        </trans-unit>
        <trans-unit id="20b6ee038e2dead2d75e96e586134aec145d7104" translate="yes" xml:space="preserve">
          <source>/stream/upstreams/{streamUpstreamName}/servers/</source>
          <target state="translated">/stream/upstreams/{streamUpstreamName}/servers/</target>
        </trans-unit>
        <trans-unit id="f0c588afd14290ed1927e93be84decbb8e88cd0e" translate="yes" xml:space="preserve">
          <source>/stream/upstreams/{streamUpstreamName}/servers/{streamUpstreamServerId}</source>
          <target state="translated">/stream/upstreams/{streamUpstreamName}/servers/{streamUpstreamServerId}</target>
        </trans-unit>
        <trans-unit id="3edd3a9deee84dfea3fa82016063d71d6ab76cb1" translate="yes" xml:space="preserve">
          <source>/stream/zone_sync/</source>
          <target state="translated">/stream/zone_sync/</target>
        </trans-unit>
        <trans-unit id="56fa56ae296cbc85f2f2a7037e6264fbd5d7509b" translate="yes" xml:space="preserve">
          <source>200 - Success, returns &lt;a href=&quot;#def_nginx_connections&quot;&gt;Connections&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18361d23ab74ec3a035b92cb7126c773655ca764" translate="yes" xml:space="preserve">
          <source>200 - Success, returns &lt;a href=&quot;#def_nginx_http_cache&quot;&gt;HTTP Cache&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33dcb91975439ba0649e81c8c28bfa4bd9500c60" translate="yes" xml:space="preserve">
          <source>200 - Success, returns &lt;a href=&quot;#def_nginx_http_keyval_zone&quot;&gt;HTTP Keyval Shared Memory Zone&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caf651228e97a3ee2a803e557737b297af185933" translate="yes" xml:space="preserve">
          <source>200 - Success, returns &lt;a href=&quot;#def_nginx_http_requests&quot;&gt;HTTP Requests&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c5df7ee91ce93ed37a3f8e40c8dc2c43b5d437" translate="yes" xml:space="preserve">
          <source>200 - Success, returns &lt;a href=&quot;#def_nginx_http_server_zone&quot;&gt;HTTP Server Zone&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7804d5fce352fb3c26c0384eb8d9af7f04a9ce3" translate="yes" xml:space="preserve">
          <source>200 - Success, returns &lt;a href=&quot;#def_nginx_http_upstream&quot;&gt;HTTP Upstream&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60b06ece0806e5fc157c2b72a4cd6036d5b3bef8" translate="yes" xml:space="preserve">
          <source>200 - Success, returns &lt;a href=&quot;#def_nginx_http_upstream_conf_server&quot;&gt;HTTP Upstream Server&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8663ceaab39af79a436bc81f530671154fae55b" translate="yes" xml:space="preserve">
          <source>200 - Success, returns &lt;a href=&quot;#def_nginx_object&quot;&gt;nginx&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14ea66f54691903225548a95489b6cf26b013683" translate="yes" xml:space="preserve">
          <source>200 - Success, returns &lt;a href=&quot;#def_nginx_processes&quot;&gt;Processes&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d600ee13287daaff2511fda7b78d365af3f3c380" translate="yes" xml:space="preserve">
          <source>200 - Success, returns &lt;a href=&quot;#def_nginx_slab_zone&quot;&gt;Shared memory zone with slab allocator&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c725d5336c53b8173883027557d4bd02f45ff37" translate="yes" xml:space="preserve">
          <source>200 - Success, returns &lt;a href=&quot;#def_nginx_ssl_object&quot;&gt;SSL&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="407caab434c1126ddb1a8da03b35da1d83198a5d" translate="yes" xml:space="preserve">
          <source>200 - Success, returns &lt;a href=&quot;#def_nginx_stream_keyval_zone&quot;&gt;Stream Keyval Shared Memory Zone&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91ae6f72b1ebf476418dadba7fcb9bad6850a696" translate="yes" xml:space="preserve">
          <source>200 - Success, returns &lt;a href=&quot;#def_nginx_stream_server_zone&quot;&gt;Stream Server Zone&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78c09911abe4f2538b4233f414efcc964d01843d" translate="yes" xml:space="preserve">
          <source>200 - Success, returns &lt;a href=&quot;#def_nginx_stream_upstream&quot;&gt;Stream Upstream&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="859a9ae0a7b372a3af50337920e143f8ef960ac3" translate="yes" xml:space="preserve">
          <source>200 - Success, returns &lt;a href=&quot;#def_nginx_stream_upstream_conf_server&quot;&gt;Stream Upstream Server&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d0052d705e6f7e2823ec7e590b3ebb372ef9e7a" translate="yes" xml:space="preserve">
          <source>200 - Success, returns &lt;a href=&quot;#def_nginx_stream_zone_sync&quot;&gt;Stream Zone Sync Node&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38b1ee1a949e995dff88305e5e47a99eac4e056" translate="yes" xml:space="preserve">
          <source>200 - Success, returns a collection of &quot;&lt;a href=&quot;#def_nginx_http_cache&quot;&gt;HTTP Cache&lt;/a&gt;&quot; objects for all http caches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6bf4ffbc828d8838b93bf64bbd0662def75508e" translate="yes" xml:space="preserve">
          <source>200 - Success, returns a collection of &quot;&lt;a href=&quot;#def_nginx_http_keyval_zone&quot;&gt;HTTP Keyval Shared Memory Zone&lt;/a&gt;&quot; objects for all http keyvals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96179af3c2e29e98098c2605873174a8e23b75b9" translate="yes" xml:space="preserve">
          <source>200 - Success, returns a collection of &quot;&lt;a href=&quot;#def_nginx_http_server_zone&quot;&gt;HTTP Server Zone&lt;/a&gt;&quot; objects for all http server zones</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003ada3751a93f866f701ec70bea30714c9cbe56" translate="yes" xml:space="preserve">
          <source>200 - Success, returns a collection of &quot;&lt;a href=&quot;#def_nginx_http_upstream&quot;&gt;HTTP Upstream&lt;/a&gt;&quot; objects for all http upstreams</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba43a4194daf998f46d606d3fa9a08d6b90ff85" translate="yes" xml:space="preserve">
          <source>200 - Success, returns a collection of &quot;&lt;a href=&quot;#def_nginx_slab_zone&quot;&gt;Shared memory zone with slab allocator&lt;/a&gt;&quot; objects for all slabs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c05f7a3bd8a75b5a23a3c6d14fe56b289006faa3" translate="yes" xml:space="preserve">
          <source>200 - Success, returns a collection of &quot;&lt;a href=&quot;#def_nginx_stream_keyval_zone&quot;&gt;Stream Keyval Shared Memory Zone&lt;/a&gt;&quot; objects for all stream keyvals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="934220dd51cc9a025ceda19cb20f846b01cfe5f0" translate="yes" xml:space="preserve">
          <source>200 - Success, returns a collection of &quot;&lt;a href=&quot;#def_nginx_stream_server_zone&quot;&gt;Stream Server Zone&lt;/a&gt;&quot; objects for all stream server zones</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="350f41278ec4f598cbe3c3d14310a4b1b316a8cb" translate="yes" xml:space="preserve">
          <source>200 - Success, returns a collection of &quot;&lt;a href=&quot;#def_nginx_stream_upstream&quot;&gt;Stream Upstream&lt;/a&gt;&quot; objects for all stream upstreams</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06aa9bbe12ef468be2cd2ba1638e285df79ef189" translate="yes" xml:space="preserve">
          <source>200 - Success, returns an array of &lt;a href=&quot;#def_nginx_http_upstream_conf_server&quot;&gt;HTTP Upstream Servers&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62fe8801937023aead274abc5b182e5311464d8f" translate="yes" xml:space="preserve">
          <source>200 - Success, returns an array of &lt;a href=&quot;#def_nginx_stream_upstream_conf_server&quot;&gt;Stream Upstream Servers&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2feec810f7b78b202c359434b6d01012dd558e57" translate="yes" xml:space="preserve">
          <source>200 - Success, returns an array of strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e90ae5b15e2edc1a6ebb1aed82270f2a94eee4fb" translate="yes" xml:space="preserve">
          <source>201 - Created</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92ca4d1eadf4540c9a5881ba1187434764f585a8" translate="yes" xml:space="preserve">
          <source>201 - Created, returns &lt;a href=&quot;#def_nginx_http_upstream_conf_server&quot;&gt;HTTP Upstream Server&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d3f1292ef9dbb0016275ae8e01dc928d3483edd" translate="yes" xml:space="preserve">
          <source>201 - Created, returns &lt;a href=&quot;#def_nginx_stream_upstream_conf_server&quot;&gt;Stream Upstream Server&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87e54b6945324596b0ba85ba80756b7dd0418272" translate="yes" xml:space="preserve">
          <source>204 - Success</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b977e26ee6bb640eef2ac653987abdc0fca6be8" translate="yes" xml:space="preserve">
          <source>400 - Key required (&lt;code&gt;KeyvalFormatError&lt;/code&gt;), only one key can be added (&lt;code&gt;KeyvalFormatError&lt;/code&gt;), nested object or list (&lt;code&gt;KeyvalFormatError&lt;/code&gt;), returns &lt;a href=&quot;#def_nginx_error&quot;&gt;Error&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="535e8f5fc705a3cf9fb314aaf29059b76eeca715" translate="yes" xml:space="preserve">
          <source>400 - Key required (&lt;code&gt;KeyvalFormatError&lt;/code&gt;), only one key can be updated (&lt;code&gt;KeyvalFormatError&lt;/code&gt;), nested object or list (&lt;code&gt;KeyvalFormatError&lt;/code&gt;), returns &lt;a href=&quot;#def_nginx_error&quot;&gt;Error&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72c5494c9d2c77a6eadbd3b2fff5bdc004f57682" translate="yes" xml:space="preserve">
          <source>400 - Upstream is static (&lt;code&gt;UpstreamStatic&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;&lt;i&gt;parameter&lt;/i&gt;&lt;/code&gt;&amp;rdquo; value (&lt;code&gt;UpstreamConfFormatError&lt;/code&gt;), missing &amp;ldquo;&lt;code&gt;server&lt;/code&gt;&amp;rdquo; argument (&lt;code&gt;UpstreamConfFormatError&lt;/code&gt;), unknown parameter &amp;ldquo;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamConfFormatError&lt;/code&gt;), nested object or list (&lt;code&gt;UpstreamConfFormatError&lt;/code&gt;), &amp;ldquo;&lt;code&gt;error&lt;/code&gt;&amp;rdquo; while parsing (&lt;code&gt;UpstreamBadAddress&lt;/code&gt;), no port in server &amp;ldquo;&lt;code&gt;host&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamBadAddress&lt;/code&gt;), service upstream &amp;ldquo;&lt;code&gt;host&lt;/code&gt;&amp;rdquo; may not have port (&lt;code&gt;UpstreamBadAddress&lt;/code&gt;), service upstream &amp;ldquo;&lt;code&gt;host&lt;/code&gt;&amp;rdquo; requires domain name (&lt;code&gt;UpstreamBadAddress&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;weight&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamBadWeight&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;max_conns&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamBadMaxConns&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;max_fails&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamBadMaxFails&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;fail_timeout&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamBadFailTimeout&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;slow_start&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamBadSlowStart&lt;/code&gt;), &amp;ldquo;&lt;code&gt;service&lt;/code&gt;&amp;rdquo; is empty (&lt;code&gt;UpstreamBadService&lt;/code&gt;), no resolver defined to resolve (&lt;code&gt;UpstreamConfNoResolver&lt;/code&gt;), upstream &amp;ldquo;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;&amp;rdquo; has no backup (&lt;code&gt;UpstreamNoBackup&lt;/code&gt;), upstream &amp;ldquo;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;&amp;rdquo; memory exhausted (&lt;code&gt;UpstreamOutOfMemory&lt;/code&gt;), returns &lt;a href=&quot;#def_nginx_error&quot;&gt;Error&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cb6192ff0578117d5c53e54647ef2fceacaa373" translate="yes" xml:space="preserve">
          <source>400 - Upstream is static (&lt;code&gt;UpstreamStatic&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;&lt;i&gt;parameter&lt;/i&gt;&lt;/code&gt;&amp;rdquo; value (&lt;code&gt;UpstreamConfFormatError&lt;/code&gt;), missing &amp;ldquo;&lt;code&gt;server&lt;/code&gt;&amp;rdquo; argument (&lt;code&gt;UpstreamConfFormatError&lt;/code&gt;), unknown parameter &amp;ldquo;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamConfFormatError&lt;/code&gt;), nested object or list (&lt;code&gt;UpstreamConfFormatError&lt;/code&gt;), &amp;ldquo;&lt;code&gt;error&lt;/code&gt;&amp;rdquo; while parsing (&lt;code&gt;UpstreamBadAddress&lt;/code&gt;), service upstream &amp;ldquo;&lt;code&gt;host&lt;/code&gt;&amp;rdquo; may not have port (&lt;code&gt;UpstreamBadAddress&lt;/code&gt;), service upstream &amp;ldquo;&lt;code&gt;host&lt;/code&gt;&amp;rdquo; requires domain name (&lt;code&gt;UpstreamBadAddress&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;weight&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamBadWeight&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;max_conns&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamBadMaxConns&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;max_fails&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamBadMaxFails&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;fail_timeout&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamBadFailTimeout&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;slow_start&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamBadSlowStart&lt;/code&gt;), route is too long (&lt;code&gt;UpstreamBadRoute&lt;/code&gt;), &amp;ldquo;&lt;code&gt;service&lt;/code&gt;&amp;rdquo; is empty (&lt;code&gt;UpstreamBadService&lt;/code&gt;), no resolver defined to resolve (&lt;code&gt;UpstreamConfNoResolver&lt;/code&gt;), upstream &amp;ldquo;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;&amp;rdquo; has no backup (&lt;code&gt;UpstreamNoBackup&lt;/code&gt;), upstream &amp;ldquo;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;&amp;rdquo; memory exhausted (&lt;code&gt;UpstreamOutOfMemory&lt;/code&gt;), returns &lt;a href=&quot;#def_nginx_error&quot;&gt;Error&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="657af100678de8833d5fc8adf4114fca73f04e5f" translate="yes" xml:space="preserve">
          <source>400 - Upstream is static (&lt;code&gt;UpstreamStatic&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;&lt;i&gt;parameter&lt;/i&gt;&lt;/code&gt;&amp;rdquo; value (&lt;code&gt;UpstreamConfFormatError&lt;/code&gt;), unknown parameter &amp;ldquo;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamConfFormatError&lt;/code&gt;), nested object or list (&lt;code&gt;UpstreamConfFormatError&lt;/code&gt;), &amp;ldquo;&lt;code&gt;error&lt;/code&gt;&amp;rdquo; while parsing (&lt;code&gt;UpstreamBadAddress&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;server&lt;/code&gt;&amp;rdquo; argument (&lt;code&gt;UpstreamBadAddress&lt;/code&gt;), invalid server ID (&lt;code&gt;UpstreamBadServerId&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;weight&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamBadWeight&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;max_conns&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamBadMaxConns&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;max_fails&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamBadMaxFails&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;fail_timeout&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamBadFailTimeout&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;slow_start&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamBadSlowStart&lt;/code&gt;), route is too long (&lt;code&gt;UpstreamBadRoute&lt;/code&gt;), &amp;ldquo;&lt;code&gt;service&lt;/code&gt;&amp;rdquo; is empty (&lt;code&gt;UpstreamBadService&lt;/code&gt;), server &amp;ldquo;&lt;code&gt;&lt;i&gt;ID&lt;/i&gt;&lt;/code&gt;&amp;rdquo; address is immutable (&lt;code&gt;UpstreamServerImmutable&lt;/code&gt;), server &amp;ldquo;&lt;code&gt;ID&lt;/code&gt;&amp;rdquo; weight is immutable (&lt;code&gt;UpstreamServerWeightImmutable&lt;/code&gt;), upstream &amp;ldquo;&lt;code&gt;name&lt;/code&gt;&amp;rdquo; memory exhausted (&lt;code&gt;UpstreamOutOfMemory&lt;/code&gt;), returns &lt;a href=&quot;#def_nginx_error&quot;&gt;Error&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25d3e8f633337ea6d49aaa6ccb41e9f5015dd037" translate="yes" xml:space="preserve">
          <source>400 - Upstream is static (&lt;code&gt;UpstreamStatic&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;&lt;i&gt;parameter&lt;/i&gt;&lt;/code&gt;&amp;rdquo; value (&lt;code&gt;UpstreamConfFormatError&lt;/code&gt;), unknown parameter &amp;ldquo;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamConfFormatError&lt;/code&gt;), nested object or list (&lt;code&gt;UpstreamConfFormatError&lt;/code&gt;), &amp;ldquo;&lt;code&gt;error&lt;/code&gt;&amp;rdquo; while parsing (&lt;code&gt;UpstreamBadAddress&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;server&lt;/code&gt;&amp;rdquo; argument (&lt;code&gt;UpstreamBadAddress&lt;/code&gt;), no port in server &amp;ldquo;&lt;code&gt;host&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamBadAddress&lt;/code&gt;), invalid server ID (&lt;code&gt;UpstreamBadServerId&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;weight&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamBadWeight&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;max_conns&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamBadMaxConns&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;max_fails&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamBadMaxFails&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;fail_timeout&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamBadFailTimeout&lt;/code&gt;), invalid &amp;ldquo;&lt;code&gt;slow_start&lt;/code&gt;&amp;rdquo; (&lt;code&gt;UpstreamBadSlowStart&lt;/code&gt;), &amp;ldquo;&lt;code&gt;service&lt;/code&gt;&amp;rdquo; is empty (&lt;code&gt;UpstreamBadService&lt;/code&gt;), server &amp;ldquo;&lt;code&gt;&lt;i&gt;ID&lt;/i&gt;&lt;/code&gt;&amp;rdquo; address is immutable (&lt;code&gt;UpstreamServerImmutable&lt;/code&gt;), server &amp;ldquo;&lt;code&gt;&lt;i&gt;ID&lt;/i&gt;&lt;/code&gt;&amp;rdquo; weight is immutable (&lt;code&gt;UpstreamServerWeightImmutable&lt;/code&gt;), upstream &amp;ldquo;&lt;code&gt;name&lt;/code&gt;&amp;rdquo; memory exhausted (&lt;code&gt;UpstreamOutOfMemory&lt;/code&gt;), returns &lt;a href=&quot;#def_nginx_error&quot;&gt;Error&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1e280cc3f2d346000b51c6ce59bb100f994ddd6" translate="yes" xml:space="preserve">
          <source>400 - Upstream is static (&lt;code&gt;UpstreamStatic&lt;/code&gt;), invalid server ID (&lt;code&gt;UpstreamBadServerId&lt;/code&gt;), returns &lt;a href=&quot;#def_nginx_error&quot;&gt;Error&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="269dceb308cbe12ba804efff118a538ac0568e8d" translate="yes" xml:space="preserve">
          <source>400 - Upstream is static (&lt;code&gt;UpstreamStatic&lt;/code&gt;), invalid server ID (&lt;code&gt;UpstreamBadServerId&lt;/code&gt;), server &amp;ldquo;&lt;code&gt;&lt;i&gt;id&lt;/i&gt;&lt;/code&gt;&amp;rdquo; not removable (&lt;code&gt;UpstreamServerImmutable&lt;/code&gt;), returns &lt;a href=&quot;#def_nginx_error&quot;&gt;Error&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e38f6bc749c33c7a8062e7d94f3c23496ced5b0c" translate="yes" xml:space="preserve">
          <source>400 - Upstream is static (&lt;code&gt;UpstreamStatic&lt;/code&gt;), returns &lt;a href=&quot;#def_nginx_error&quot;&gt;Error&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ced2c6925f15de2d8e992cb9786f22db1aea4889" translate="yes" xml:space="preserve">
          <source>404 - Cache not found (&lt;code&gt;CacheNotFound&lt;/code&gt;), returns &lt;a href=&quot;#def_nginx_error&quot;&gt;Error&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f767f6045007e45934d4943e3aaf5170ea6193" translate="yes" xml:space="preserve">
          <source>404 - Keyval not found (&lt;code&gt;KeyvalNotFound&lt;/code&gt;), keyval key not found (&lt;code&gt;KeyvalKeyNotFound&lt;/code&gt;), returns &lt;a href=&quot;#def_nginx_error&quot;&gt;Error&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0296e47756f31b78e1dce63e0d8a7763c33eb09" translate="yes" xml:space="preserve">
          <source>404 - Keyval not found (&lt;code&gt;KeyvalNotFound&lt;/code&gt;), returns &lt;a href=&quot;#def_nginx_error&quot;&gt;Error&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="157ecac662e4f1182f6051e11e1f461a63dab2c6" translate="yes" xml:space="preserve">
          <source>404 - Server zone not found (&lt;code&gt;ServerZoneNotFound&lt;/code&gt;), returns &lt;a href=&quot;#def_nginx_error&quot;&gt;Error&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e82af3108e3be65eb0a95ccef513eb346732fa0" translate="yes" xml:space="preserve">
          <source>404 - Slab not found (&lt;code&gt;SlabNotFound&lt;/code&gt;), returns &lt;a href=&quot;#def_nginx_error&quot;&gt;Error&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db77b5a8fb5dc5f2b4fe4a60bbb0b9d9b208b5d" translate="yes" xml:space="preserve">
          <source>404 - Upstream not found (&lt;code&gt;UpstreamNotFound&lt;/code&gt;), returns &lt;a href=&quot;#def_nginx_error&quot;&gt;Error&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5353c1d24e2368172a19ca3725f691216838f973" translate="yes" xml:space="preserve">
          <source>404 - Upstream not found (&lt;code&gt;UpstreamNotFound&lt;/code&gt;), server with ID &amp;ldquo;&lt;code&gt;&lt;i&gt;id&lt;/i&gt;&lt;/code&gt;&amp;rdquo; does not exist (&lt;code&gt;UpstreamServerNotFound&lt;/code&gt;), returns &lt;a href=&quot;#def_nginx_error&quot;&gt;Error&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1a391088353de7fc23b9ec45bbcb0ca0f445e75" translate="yes" xml:space="preserve">
          <source>405 - Method disabled (&lt;code&gt;MethodDisabled&lt;/code&gt;), returns &lt;a href=&quot;#def_nginx_error&quot;&gt;Error&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b25af22a3639d0524cec523fabbf95d13690ae4" translate="yes" xml:space="preserve">
          <source>409 - Key already exists (&lt;code&gt;KeyvalKeyExists&lt;/code&gt;), returns &lt;a href=&quot;#def_nginx_error&quot;&gt;Error&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21243772cb88449369375e50a8719bcf62b2b1a9" translate="yes" xml:space="preserve">
          <source>415 - JSON error (&lt;code&gt;JsonError&lt;/code&gt;), returns &lt;a href=&quot;#def_nginx_error&quot;&gt;Error&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f791e7c05f6385d9abae02aa8a51596cfeb495c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#root&quot;&gt;root&lt;/a&gt; or &lt;a href=&quot;#alias&quot;&gt;alias&lt;/a&gt; directive&amp;rsquo;s value for the current request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="097f5b4e1ca0d52e8bae8b519ca9f15e6883ab08" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../stream/ngx_stream_upstream_module#weight&quot;&gt;Weight&lt;/a&gt; of the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b087737ac1bc13605cad8725f1b989f53fe3918f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.mingw.org/wiki/MSYS&quot;&gt;MSYS&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://www.mingw.org/wiki/MSYS&quot;&gt;MSYS&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="2c065f412b994d82cc79acc190807d294a71708d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.pcre.org&quot;&gt;PCRE&lt;/a&gt;, &lt;a href=&quot;http://zlib.net&quot;&gt;zlib&lt;/a&gt; and &lt;a href=&quot;http://www.openssl.org&quot;&gt;OpenSSL&lt;/a&gt; libraries sources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0087b18893e4138901e3a146a2ee708de9c565e3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://tools.ietf.org/html/rfc1939&quot;&gt;APOP&lt;/a&gt;. In order for this method to work, the password must be stored unencrypted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6febede71ae3d2f0093dbf4e23aa9e7fb0655250" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://tools.ietf.org/html/rfc1939&quot;&gt;USER/PASS&lt;/a&gt;, &lt;a href=&quot;https://tools.ietf.org/html/rfc4616&quot;&gt;AUTH PLAIN&lt;/a&gt;, &lt;a href=&quot;https://tools.ietf.org/html/draft-murchison-sasl-login-00&quot;&gt;AUTH LOGIN&lt;/a&gt;. It is not possible to disable these methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1d99e9e68634c971f0a76ad3d97e1ad7f65bcf6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://tools.ietf.org/html/rfc2195&quot;&gt;AUTH CRAM-MD5&lt;/a&gt;. In order for this method to work, the password must be stored unencrypted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="011fec9c7014cdf2d8d5ea37bfd5ddaa960d724e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://tools.ietf.org/html/rfc2195&quot;&gt;AUTH=CRAM-MD5&lt;/a&gt;. In order for this method to work, the password must be stored unencrypted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee7bc1bafda0b2760547dd84062167d842bfa76" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://tools.ietf.org/html/rfc4422&quot;&gt;AUTH EXTERNAL&lt;/a&gt; (1.11.6).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d837295c1115ab8e099006d5d906dcb75f1898" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://tools.ietf.org/html/rfc4422&quot;&gt;AUTH=EXTERNAL&lt;/a&gt; (1.11.6).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72101b00f076f1234a1b40be545464f37d7692dd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.mercurial-scm.org&quot;&gt;Mercurial&lt;/a&gt; client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="146ecf9779f74bd472b663104b1593c6ee88185a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;index&quot;&gt;njs&lt;/a&gt; provides objects, methods and properties for extending nginx functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bb40c06eeea1b15d2b118e41f8e37625001bd7e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;install&quot;&gt;install&lt;/a&gt; njs scripting language</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58839eecb1a2808b292bcb1305ffc6e847bc52da" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ngx_http_upstream_module#weight&quot;&gt;Weight&lt;/a&gt; of the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfabcd204430c3b17be13a10d55bb578e97f52ab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;reference#cleartimeout&quot;&gt;&lt;code&gt;clearTimeout&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;reference#settimeout&quot;&gt;&lt;code&gt;setTimeout&lt;/code&gt;&lt;/a&gt; functions (0.2.0)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bec96ffc56126dae6f07de62589adff933818481" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;reference#core_json&quot;&gt;&lt;code&gt;JSON&lt;/code&gt;&lt;/a&gt; methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b71bd08269b15df7552c2b5fe9d94a0bfdd028" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;websocket&quot;&gt;WebSocket&lt;/a&gt; proxying requires special configuration and is supported since version 1.3.13.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d8526653624e2565d67fbb143bdc45fe478c46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$arg_&lt;/code&gt;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$arg_&lt;/code&gt;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fe44186794e1cbe447a87ada04d1131f9a1070b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$cookie_&lt;/code&gt;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$cookie_&lt;/code&gt;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d991fa53141444890edf5bc7177425b7e1535ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$http_&lt;/code&gt;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$http_&lt;/code&gt;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="91b1841dc5c0b8cd81a3eb4042ebfc06ae42eb1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$jwt_claim_&lt;/code&gt;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$jwt_claim_&lt;/code&gt;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e53c749709a89836c7f626d49ce52929d5ae130d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$jwt_header_&lt;/code&gt;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$jwt_header_&lt;/code&gt;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a7adf3c820d6add626f80fae2921904ebe7462aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$sent_http_&lt;/code&gt;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$sent_http_&lt;/code&gt;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="652690e017e36686cd60b9a5a63257546d6fae66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$sent_trailer_&lt;/code&gt;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$sent_trailer_&lt;/code&gt;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="222c7c0791b0f52c21c225a72fdeaf4f61ae579c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$tcpinfo_rtt&lt;/code&gt;, &lt;code&gt;$tcpinfo_rttvar&lt;/code&gt;, &lt;code&gt;$tcpinfo_snd_cwnd&lt;/code&gt;, &lt;code&gt;$tcpinfo_rcv_space&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="232d8f9c9f7a77fa9308f3ceb1b8771a254646e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$upstream_cookie_&lt;/code&gt;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$upstream_cookie_&lt;/code&gt;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3fad615cbce23fbf691f76d35156a38d5b810014" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$upstream_http_&lt;/code&gt;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$upstream_http_&lt;/code&gt;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1f4a5e84ad24ad27d9b85692d81856a5881c8125" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$upstream_trailer_&lt;/code&gt;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$upstream_trailer_&lt;/code&gt;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c0bd41b12697fb62f3171fcd6c20132c7fa81f43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%*s&lt;/code&gt; &amp;mdash; &lt;code&gt;size_t + u_char *&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b61b8102b9c631d85abcac7b673fc8ffda88cfe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%O&lt;/code&gt; &amp;mdash; &lt;code&gt;off_t&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="442ee37c74e51b3a1b58e13c09b8c2f187ee6b3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%T&lt;/code&gt; &amp;mdash; &lt;code&gt;time_t&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd289917630a9d54e91673b34910c4442cd9454c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%V&lt;/code&gt; &amp;mdash; &lt;code&gt;ngx_str_t *&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7178f810fd2813d856232214ded4014640b495f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%i&lt;/code&gt; &amp;mdash; &lt;code&gt;ngx_int_t&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db99b07b81a20a340bb4c3d42044bbe6f7ad935" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%p&lt;/code&gt; &amp;mdash; &lt;code&gt;void *&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f791972183665c78ff7de36f28831e5da8442b87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%s&lt;/code&gt; &amp;mdash; &lt;code&gt;u_char *&lt;/code&gt; (null-terminated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f31be3a1944264d649a519803a6b821e3c4894b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%z&lt;/code&gt; &amp;mdash; &lt;code&gt;ssize_t&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea754d0f61a089db38392f36ebc450accec1e7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-?&lt;/code&gt; | &lt;code&gt;-h&lt;/code&gt; &amp;mdash; print help for command-line parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3443c8a3a58b559615f98913fbb059b7277fb076" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-T&lt;/code&gt; &amp;mdash; same as &lt;code&gt;-t&lt;/code&gt;, but additionally dump configuration files to standard output (1.9.2).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e00647a80607d3a0772dc9868756f837219f8907" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-V&lt;/code&gt; &amp;mdash; print nginx version, compiler version, and configure parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f56a6838978900fd94b2ab3cc7b8b3803f63ddc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-c &lt;i&gt;file&lt;/i&gt;&lt;/code&gt; &amp;mdash; use an alternative configuration &lt;code&gt;&lt;i&gt;file&lt;/i&gt;&lt;/code&gt; instead of a default file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f46dcc111d800a117e73a14270c1f6acf3e3b64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-g &lt;i&gt;directives&lt;/i&gt;&lt;/code&gt; &amp;mdash; set &lt;a href=&quot;ngx_core_module&quot;&gt;global configuration directives&lt;/a&gt;, for example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93773f755fd4af2c75235d2b5e8bf09f7aa6e922" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-p &lt;i&gt;prefix&lt;/i&gt;&lt;/code&gt; &amp;mdash; set nginx path prefix, i.e. a directory that will keep server files (default value is &lt;code&gt;&lt;i&gt;/usr/local/nginx&lt;/i&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c9a5c3ef548929473bf9392a732262fbb9f64a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-q&lt;/code&gt; &amp;mdash; suppress non-error messages during configuration testing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="158e5ef70368b7f307c1ca4a6c109ca9cc8cf6cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-s &lt;i&gt;signal&lt;/i&gt;&lt;/code&gt; &amp;mdash; send a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72b7f217a7929f2706095d3ebf07f794007fb122" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-t&lt;/code&gt; &amp;mdash; test the configuration file: nginx checks the configuration for correct syntax, and then tries to open files referred in the configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afe796645ea2cab97723dca92ec2d4e394bbe7e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-v&lt;/code&gt; &amp;mdash; print nginx version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e3d5c5410c9009d4f318a5313fc4339ab43b19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/dev/poll&lt;/code&gt; &amp;mdash; efficient method used on Solaris 7 11/99+, HP/UX 11.22+ (eventport), IRIX 6.5.15+, and Tru64 UNIX 5.1A+.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44217dea8cef04da7f4d55c996c11eeb5b066f2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;1xx&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d2692f2a66a09628f93b49c31616c3e714b083b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;1xx&lt;/code&gt;, &lt;code&gt;2xx&lt;/code&gt;, &lt;code&gt;3xx&lt;/code&gt;, &lt;code&gt;4xx&lt;/code&gt;, &lt;code&gt;5xx&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b48cb6d50b40584bacd5a4da54751b1dd98cbf3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;2xx&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9ff876afec012ae4d55fa11deb3140981dc8f9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;2xx&lt;/code&gt;, &lt;code&gt;4xx&lt;/code&gt;, &lt;code&gt;5xx&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e67232b4b4acdabb12f29825bfc48a2202ac7d36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;3xx&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c064fc17ce3fa0c14a689374023366949567b051" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;4xx&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef79e9b87c2bed48c9a17788be4a60f15990772a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;5xx&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09503c2bab85de77fa79a1a6cb9aad72b1462a70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array&lt;/code&gt; instance methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a14da0c58dc5f3900e764fe5db565850dc44f738" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array&lt;/code&gt; methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6245c942aa626e08b7dcf52040336bdf53180917" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Crypto&lt;/code&gt; methods (0.2.0): &lt;a href=&quot;reference#crypto_createhash&quot;&gt;&lt;code&gt;crypto.createHash&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;reference#crypto_createhmac&quot;&gt;&lt;code&gt;crypto.createHmac&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e5a4e0a4700cd0725b200833461506fe912d726" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DELETE&lt;/code&gt; - Empty the HTTP keyval zone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="438764d66d03023eb68d9482bb6ba67f38582a6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DELETE&lt;/code&gt; - Empty the stream keyval zone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea8fb7fea46dfc76ca6a36e9c861e4c1fe7cd7f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DELETE&lt;/code&gt; - Remove a server from a stream upstream server group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf0347f0dcc9bf8fa6d23204aa8c87890cf0fe8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DELETE&lt;/code&gt; - Remove a server from an HTTP upstream server group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e97b24c93bcf31ac0b370396c5420abd1a098fab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DELETE&lt;/code&gt; - Reset HTTP requests statistics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfca87db39d0502007516a384ad9aff36b8fe257" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DELETE&lt;/code&gt; - Reset SSL statistics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e72cdf96ff94ff70633bc75010884169d3c388ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DELETE&lt;/code&gt; - Reset cache statistics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8ff611b4e342df7d06d2f54d8be00f889d1d8d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DELETE&lt;/code&gt; - Reset client connections statistics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbf79001c0e5080500fad7bb7a94866aa7256789" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DELETE&lt;/code&gt; - Reset nginx processes statistics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02ac8dbe974aedaf30184221194905985e7037ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DELETE&lt;/code&gt; - Reset slab statistics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33db27d84590858836f8525ebdeb8d26bdb3566b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DELETE&lt;/code&gt; - Reset statistics for a stream server zone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="861e81d8e96ffc20593125fb180cb3e19d74184f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DELETE&lt;/code&gt; - Reset statistics for an HTTP server zone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37d6de7b1d322904bceec5987e42c67620ad44b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DELETE&lt;/code&gt; - Reset statistics of a stream upstream server group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfcdec6ce099bc8ea58f254e39bbdccfee9bd0e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DELETE&lt;/code&gt; - Reset statistics of an HTTP upstream server group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e4146300f45032aa8d21590548cf83e148bca3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Date&lt;/code&gt; instance methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0749ad173341925a200e6fd99ab591a9d42bd14c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Date&lt;/code&gt; methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4f3cfcd4b75ae1e3d5358bb02a040c8967ecd6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EHLO&lt;/code&gt; or &lt;code&gt;HELO&lt;/code&gt;, as passed by the client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e72d34957db0bcaaf20f1de6d936cf2c52a9f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EHLO&lt;/code&gt; with the &lt;a href=&quot;ngx_mail_core_module#server_name&quot;&gt;server name&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1056f38d8a043788e705346d004f1e236fdced98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Error&lt;/code&gt; objects: &lt;code&gt;Error&lt;/code&gt;, &lt;code&gt;EvalError&lt;/code&gt;, &lt;code&gt;InternalError&lt;/code&gt;, &lt;code&gt;RangeError&lt;/code&gt;, &lt;code&gt;ReferenceError&lt;/code&gt;, &lt;code&gt;SyntaxError&lt;/code&gt;, &lt;code&gt;TypeError&lt;/code&gt;, &lt;code&gt;URIError&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4293977c4d7cdd3124c5cff3b5f815223f37c3fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;File system&lt;/code&gt; methods: &lt;a href=&quot;reference#appendfilesync&quot;&gt;&lt;code&gt;fs.appendFileSync&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;reference#readfilesync&quot;&gt;&lt;code&gt;fs.readFileSync&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;reference#writefilesync&quot;&gt;&lt;code&gt;fs.writeFileSync&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be462e68ebe60950d1351e26741f6d3ab0beab09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Function&lt;/code&gt; instance methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bce6a0b8a461973f5ba0f549260e8e4a6134f0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return HTTP requests statistics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a332385392a66556df83a2777cf120ac30aa52f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return SSL statistics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d2ba5262327f77d9d0162de711082570ce3d50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return client connections statistics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e8a3664f91ad355ffc4dbbcd92b0751e5dfe57f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return configuration of a server in a stream upstream server group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ded00850647d56dd959339ec2cdb25933ffcfb1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return configuration of a server in an HTTP upstream server group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="390426523ee39c729323356df6f6ce16d92a0b32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return configuration of all servers in a stream upstream server group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe6ab3973f0879fae6215a0212bc6767b0e84b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return configuration of all servers in an HTTP upstream server group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90eb44fea478001d1ce1c4e0eeab3d9646ade37e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return key-value pairs from a stream keyval zone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98cbfce508ce113916230e47134991262632a953" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return key-value pairs from all HTTP keyval zones</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fca28415985a463f31a9384ec0635382ec8e8dcf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return key-value pairs from all stream keyval zones</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c05c0707b0657806fc8bf4c1113b602649f7ac3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return key-value pairs from an HTTP keyval zone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8690df6a13af31b5bbf9a6f32c30836f1364feda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return list of HTTP-related endpoints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2efd78902754b2552ffeec92adfbb0f1c942eace" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return list of root endpoints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11d654497d842e33961210a09ad25c3629604f03" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return list of stream-related endpoints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbcbce11e0868d640f52d9b64cf0e8070a321ff1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return nginx processes status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb84a79ef05b959384052d90f7667b83cc6a3110" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return status of a cache</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53a7205b677641e2a633e14b3ac1b9d490ff2326" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return status of a slab</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35dd8f1f3b46b8e26ab770ea12bdb6ac9837bc61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return status of a stream server zone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bfe3bb8e32b61d789bc28fbcdc7a9366fa1f987" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return status of a stream upstream server group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4736fb30371e35f0844f9919fc13fb72cd41cd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return status of all HTTP server zones</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ac754e52506d4e80ee01e74aee9f961ed9bbf62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return status of all HTTP upstream server groups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7012579b530eec47bebf3b7912701bbf7f067b98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return status of all caches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da27e7c49e5cf23a24b5357bed17edab379944f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return status of all slabs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ff5c52287ee01e3159852ff4ff829b155e363e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return status of all stream server zones</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6493aaa65c5a0be3df7a57173eaa073cbb81fca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return status of all stream upstream server groups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3530a55289430e52a91cbecd09aa821df5c6073d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return status of an HTTP server zone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d642bc3753716cc244bc12fc7120827c59c2b04f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return status of an HTTP upstream server group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f46cf963e35fe1534c16718852715c7ab0f52b95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return status of nginx running instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd353be6c3fd3be7f878ed2152e9650095f30d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET&lt;/code&gt; - Return sync status of a node</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6d024845e9cbe7efa57fbf575babf430d4c4d84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Key-value&lt;/code&gt; (&lt;a href=&quot;#def_nginx_http_keyval_zone&quot;&gt;HTTP Keyval Shared Memory Zone&lt;/a&gt;, required)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c236eec2c8030fddd385aba16ba52a29b27722b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Key-value&lt;/code&gt; (&lt;a href=&quot;#def_nginx_stream_keyval_zone&quot;&gt;Stream Keyval Shared Memory Zone&lt;/a&gt;, required)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d252b3ed5850308592b7fae052f38aa7e7fc83d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math&lt;/code&gt; methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e76df7a39b5e945357713e0db7fbf8582ddbe63d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math&lt;/code&gt; properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e4f81ba3c7903a9830ef92e9fb873c440615088" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_ABORT&lt;/code&gt; &amp;mdash; Function was aborted. Also used as an alternative error code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db6e89575edb1165fdda9390d5672f214b60729d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_AGAIN&lt;/code&gt; &amp;mdash; Operation incomplete; call the function again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73fe216dd18af70af3a60d71b52353f9abb6f326" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_AGAIN&lt;/code&gt;, &lt;code&gt;NGX_DONE&lt;/code&gt; &amp;mdash; Suspend phase handling until some future event which can be an asynchronous I/O operation or just a delay, for example. It is assumed, that phase handling will be resumed later by calling &lt;code&gt;ngx_http_core_run_phases()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47fe319bb8d2c69d7e33527a4146b29954b39046" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_BUSY&lt;/code&gt; &amp;mdash; Resource is not available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b75ab687b9a0e1bf1cf577b996c0ca63b48a99c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_BUSY&lt;/code&gt; &amp;mdash; no servers are currently available. This can happen due to many reasons, including: the dynamic server group is empty, all servers in the group are in the failed state, or all servers in the group are already handling the maximum number of connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="035724f46e44c16106b622a66c83c0513498e988" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_CHANGEBIN_SIGNAL&lt;/code&gt; (&lt;code&gt;SIGUSR2&lt;/code&gt; on most systems) &amp;mdash; Change the nginx binary. The master process starts a new nginx binary and passes in a list of all listen sockets. The text-format list, passed in the &lt;code&gt;&amp;ldquo;NGINX&amp;rdquo;&lt;/code&gt; environment variable, consists of descriptor numbers separated with semicolons. The new nginx binary reads the &lt;code&gt;&amp;ldquo;NGINX&amp;rdquo;&lt;/code&gt; variable and adds the sockets to its init cycle. Other processes ignore this signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="775fae42d488836295dff48549665b699aed42e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_CONF_1MORE&lt;/code&gt; &amp;mdash; Directive takes one or more arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a38f3c99e60c356174477484ace083322c82ce8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_CONF_2MORE&lt;/code&gt; &amp;mdash; Directive takes two or more arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="651aedbc943d8b332bb70d58c003867f8b3aedad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_CONF_BLOCK&lt;/code&gt; &amp;mdash; Directive is a block, that is, it can contain other directives within its opening and closing braces, or even implement its own parser to handle contents inside.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40fc0d7b13437ecfcc3a281b2d15d94fb7397af9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_CONF_FLAG&lt;/code&gt; &amp;mdash; Directive takes a boolean value, either &lt;code&gt;on&lt;/code&gt; or &lt;code&gt;off&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c21cd9564b91419b0ac22fa736073b72260fe5f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_CONF_NOARGS&lt;/code&gt; &amp;mdash; Directive takes no arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f768a8b18cb3370c32f022a846177f228bda330" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_CONF_TAKE12&lt;/code&gt;, &lt;code&gt;NGX_CONF_TAKE13&lt;/code&gt;, &lt;code&gt;NGX_CONF_TAKE23&lt;/code&gt;, &lt;code&gt;NGX_CONF_TAKE123&lt;/code&gt;, &lt;code&gt;NGX_CONF_TAKE1234&lt;/code&gt; &amp;mdash; Directive may take different number of arguments. Options are limited to the given numbers. For example, &lt;code&gt;NGX_CONF_TAKE12&lt;/code&gt; means it takes one or two arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4cc5a42e1d12d0349e5ae6d88948a5c8706276d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_CONF_TAKE1&lt;/code&gt;..&lt;code&gt;NGX_CONF_TAKE7&lt;/code&gt; &amp;mdash; Directive takes exactly the indicated number of arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ccb1af94cad4fa18beab8c11171190d3f20df75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_DECLINED&lt;/code&gt; &amp;mdash; Operation rejected, for example, because it is disabled in the configuration. This is never an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfbd6c89db1833801e50423bf2be7de850d57f6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_DECLINED&lt;/code&gt; &amp;mdash; Proceed to the next handler of the current phase. If the current handler is the last in the current phase, move to the next phase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb10f1101ea08a3e1da4eaffda3b42af4493f569" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_DIRECT_CONF&lt;/code&gt; &amp;mdash; Used by modules that don't create a hierarchy of contexts and only have one global configuration. This configuration is passed to the handler as the &lt;code&gt;conf&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20fcfffaa6ebe910f5726fe2f8e27f6814fb4e93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_DONE&lt;/code&gt; &amp;mdash; Operation complete or continued elsewhere. Also used as an alternative success code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f83a9200667531196b9451dda1f4d0d94dae52df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_DONE&lt;/code&gt; &amp;mdash; the underlying connection was reused and there is no need to create a new connection to the upstream server. This value is set by the &lt;code&gt;keepalive&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69dafa36b096675b7774b649d49c85b1bb61133b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_DONE&lt;/code&gt; - Fast finalization. Decrement the request &lt;code&gt;count&lt;/code&gt; and destroy the request if it reaches zero. The client connection can be used for more requests after the current request is destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d9af196d99f25b5f671f2d304d6f4979f50ad02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_ERROR&lt;/code&gt; &amp;mdash; Internal error occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04fba6855a6778302af4016127cd31c6573aec6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_ERROR&lt;/code&gt; &amp;mdash; Operation failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbf52d44b0139cd43b93bbc6b94617d2edec5870" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_ERROR&lt;/code&gt;, &lt;code&gt;NGX_HTTP_REQUEST_TIME_OUT&lt;/code&gt; (&lt;code&gt;408&lt;/code&gt;), &lt;code&gt;NGX_HTTP_CLIENT_CLOSED_REQUEST&lt;/code&gt; (&lt;code&gt;499&lt;/code&gt;) - Error finalization. Terminate the request as soon as possible and close the client connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="053dd047c8aa1562dd7a42e6cb7e48c4415319de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_EVENT_CONF&lt;/code&gt; &amp;mdash; In the &lt;code&gt;event&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f58841c6c81b5dcb5ce1ab721abecf1df15471f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_ACCESS_PHASE&lt;/code&gt; &amp;mdash; Phase where it is verified that the client is authorized to make the request. Standard nginx modules such as &lt;a href=&quot;../http/ngx_http_access_module&quot;&gt;ngx_http_access_module&lt;/a&gt; and &lt;a href=&quot;../http/ngx_http_auth_basic_module&quot;&gt;ngx_http_auth_basic_module &lt;/a&gt; register their handlers at this phase. By default the client must pass the authorization check of all handlers registered at this phase for the request to continue to the next phase. The &lt;a href=&quot;../http/ngx_http_core_module#satisfy&quot;&gt;satisfy&lt;/a&gt; directive, can be used to permit processing to continue if any of the phase handlers authorizes the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="609ec081f5abc7bec3a330c012266975a747f06e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_CONTENT_PHASE&lt;/code&gt; &amp;mdash; Phase where the response is normally generated. Multiple nginx standard modules register their handlers at this phase, including &lt;a href=&quot;../http/ngx_http_index_module&quot;&gt;ngx_http_index_module&lt;/a&gt; or &lt;code&gt;ngx_http_static_module&lt;/code&gt;. They are called sequentially until one of them produces the output. It's also possible to set content handlers on a per-location basis. If the &lt;a href=&quot;../http/ngx_http_core_module&quot;&gt;ngx_http_core_module&lt;/a&gt;'s location configuration has &lt;code&gt;handler&lt;/code&gt; set, it is called as the content handler and the handlers installed at this phase are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1cc129033565f39bc14ce26b38f79885f909641" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_CREATED&lt;/code&gt; (&lt;code&gt;201&lt;/code&gt;), &lt;code&gt;NGX_HTTP_NO_CONTENT&lt;/code&gt; (&lt;code&gt;204&lt;/code&gt;), codes greater than or equal to &lt;code&gt;NGX_HTTP_SPECIAL_RESPONSE&lt;/code&gt; (&lt;code&gt;300&lt;/code&gt;) - Special response finalization. For these values nginx either sends to the client a default response page for the code or performs the internal redirect to an &lt;a href=&quot;../http/ngx_http_core_module#error_page&quot;&gt;error_page&lt;/a&gt; location if that is configured for the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="195ddb5fb5f319d41b3ec06fc540fc08fd6bba85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_FIND_CONFIG_PHASE&lt;/code&gt; &amp;mdash; Special phase where a location is chosen based on the request URI. Before this phase, the default location for the relevant virtual server is assigned to the request, and any module requesting a location configuration receives the configuration for the default server location. This phase assigns a new location to the request. No additional handlers can be registered at this phase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="260bdb4c59e89330400543f211aeedcea96a31fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_LIF_CONF&lt;/code&gt; &amp;mdash; In an &lt;code&gt;if&lt;/code&gt; block within a &lt;code&gt;location&lt;/code&gt; block in the &lt;code&gt;http&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57b185a41dce6f5ed1e55b4de296f73a5f26730b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_LMT_CONF&lt;/code&gt; &amp;mdash; In a &lt;code&gt;limit_except&lt;/code&gt; block within the &lt;code&gt;http&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a936c42d1d66d8d17f9a650a08f704c9263fe03f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_LOC_CONF&lt;/code&gt; &amp;mdash; In a &lt;code&gt;location&lt;/code&gt; block within the &lt;code&gt;http&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8646de062dacf807d7e7ee8d34e9832fd393255" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_LOC_CONF_OFFSET&lt;/code&gt; &amp;mdash; Configuration for a &lt;code&gt;location&lt;/code&gt; block within the &lt;code&gt;http&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80a41d21b79d4a5fdb05fe447b2f4e36f7b65c63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_LOG_PHASE&lt;/code&gt; &amp;mdash; Phase where request logging is performed. Currently, only the &lt;a href=&quot;../http/ngx_http_log_module&quot;&gt;ngx_http_log_module&lt;/a&gt; registers its handler at this stage for access logging. Log phase handlers are called at the very end of request processing, right before freeing the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="345d3d23389c80fb627904575b8d31e6e5df8964" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_MAIN_CONF&lt;/code&gt; &amp;mdash; In the &lt;code&gt;http&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bce1e181967191d54abfa524ad951ae853d577e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_MAIN_CONF_OFFSET&lt;/code&gt; &amp;mdash; Configuration for the &lt;code&gt;http&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ec0897a6d6097b7cb52a56fdf4cfdbefa01bd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_POST_ACCESS_PHASE&lt;/code&gt; &amp;mdash; Special phase where the &lt;a href=&quot;../http/ngx_http_core_module#satisfy&quot;&gt;satisfy any&lt;/a&gt; directive is processed. If some access phase handlers denied access and none explicitly allowed it, the request is finalized. No additional handlers can be registered at this phase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d0dcd2201f16cb9bf6203766a9cd419aee24251" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_POST_READ_PHASE&lt;/code&gt; &amp;mdash; First phase. The &lt;a href=&quot;../http/ngx_http_realip_module&quot;&gt;ngx_http_realip_module&lt;/a&gt; registers its handler at this phase to enable substitution of client addresses before any other module is invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35bce2d55d84c98758bde84a95b66535977dc234" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_POST_REWRITE_PHASE&lt;/code&gt; &amp;mdash; Special phase where the request is redirected to a new location if its URI changed during a rewrite. This is implemented by the request going through the &lt;code&gt;NGX_HTTP_FIND_CONFIG_PHASE&lt;/code&gt; again. No additional handlers can be registered at this phase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f20be47aaa6e9f5cf755acd264ff0d63774f81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_PREACCESS_PHASE&lt;/code&gt; &amp;mdash; A common phase for different types of handlers, not associated with access control. The standard nginx modules &lt;a href=&quot;../http/ngx_http_limit_conn_module&quot;&gt;ngx_http_limit_conn_module &lt;/a&gt; and &lt;a href=&quot;../http/ngx_http_limit_req_module&quot;&gt; ngx_http_limit_req_module&lt;/a&gt; register their handlers at this phase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c93c7aad1bea6d636033c821d4c0d21fd2f1111" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_PRECONTENT_PHASE&lt;/code&gt; &amp;mdash; Phase for handlers to be called prior to generating content. Standard modules such as &lt;a href=&quot;../http/ngx_http_core_module#try_files&quot;&gt; ngx_http_try_files_module&lt;/a&gt; and &lt;a href=&quot;../http/ngx_http_mirror_module&quot;&gt;ngx_http_mirror_module&lt;/a&gt; register their handlers at this phase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb396c1ec30ca0b86de63739dfd7bef7ab9379a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_REWRITE_PHASE&lt;/code&gt; &amp;mdash; Same as &lt;code&gt;NGX_HTTP_SERVER_REWRITE_PHASE&lt;/code&gt;, but for rewrite rules defined in the location, chosen in the previous phase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8de4f23e26028b1ef07433f91953eb1cc8874ec9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_SERVER_REWRITE_PHASE&lt;/code&gt; &amp;mdash; Phase where rewrite directives defined in a &lt;code&gt;server&lt;/code&gt; block (but outside a &lt;code&gt;location&lt;/code&gt; block) are processed. The &lt;a href=&quot;../http/ngx_http_rewrite_module&quot;&gt;ngx_http_rewrite_module&lt;/a&gt; installs its handler at this phase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02f367fc23f3e3b56612484f5716bb0174fb0878" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_SIF_CONF&lt;/code&gt; &amp;mdash; In an &lt;code&gt;if&lt;/code&gt; block within a &lt;code&gt;server&lt;/code&gt; block in the &lt;code&gt;http&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8187336782da7218e79a33f888f0bd01baf92b94" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_SRV_CONF&lt;/code&gt; &amp;mdash; In a &lt;code&gt;server&lt;/code&gt; block within the &lt;code&gt;http&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95965645cc8c76e2a9a4dd02929e07b3d6f85c02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_SRV_CONF_OFFSET&lt;/code&gt; &amp;mdash; Configuration for a &lt;code&gt;server&lt;/code&gt; block within the &lt;code&gt;http&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae7e61a785432ce4d2a5add5b89cf5f3d0250601" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_SUBREQUEST_CLONE&lt;/code&gt; - The subrequest is created as a clone of its parent. It is started at the same location and proceeds from the same phase as the parent request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eb92c76c082c4b6ecf5dfd0ff5840aea19061c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_SUBREQUEST_IN_MEMORY&lt;/code&gt; - Output is not sent to the client, but rather stored in memory. The flag only affects subrequests which are processed by one of the proxying modules. After a subrequest is finalized its output is available in a &lt;code&gt;r-&amp;gt;upstream-&amp;gt;buffer&lt;/code&gt; of type &lt;code&gt;ngx_buf_t&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1d7dae4096bb5583190acecaec9b86ea8082726" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_SUBREQUEST_WAITED&lt;/code&gt; - The subrequest's &lt;code&gt;done&lt;/code&gt; flag is set even if the subrequest is not active when it is finalized. This subrequest flag is used by the SSI filter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e7bcc2ee62d985ef4a02c8d30326a715dae04dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_UPSTREAM_BACKUP&lt;/code&gt; &amp;mdash; The &amp;ldquo;&lt;code&gt;backup&lt;/code&gt;&amp;rdquo; parameter is supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c7cd222a6ba16c58c60d769b724b4da4ff0d31e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_UPSTREAM_CREATE&lt;/code&gt; &amp;mdash; Distinguishes explicitly defined upstreams from those that are automatically created by the &lt;a href=&quot;../http/ngx_http_proxy_module#proxy_pass&quot;&gt;proxy_pass&lt;/a&gt; directive and &amp;ldquo;friends&amp;rdquo; (FastCGI, SCGI, etc.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f4a5817a56a34d1a9062f59f88c53d2efd3bd41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_UPSTREAM_DOWN&lt;/code&gt; &amp;mdash; The &amp;ldquo;&lt;code&gt;down&lt;/code&gt;&amp;rdquo; parameter is supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd949bc992ee58a75b5394ec44b6be6d7cad23a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_UPSTREAM_FAIL_TIMEOUT&lt;/code&gt; &amp;mdash; The &amp;ldquo;&lt;code&gt;fail_timeout&lt;/code&gt;&amp;rdquo; parameter is supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="418a4f9a56cec86ec68ba5c0ed5bf98db42d13c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_UPSTREAM_MAX_CONNS&lt;/code&gt; &amp;mdash; The &amp;ldquo;&lt;code&gt;max_conns&lt;/code&gt;&amp;rdquo; parameter is supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fc4f81de304ff9028af5bd591fc17c20763a036" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_UPSTREAM_MAX_FAILS&lt;/code&gt; &amp;mdash; The &amp;ldquo;&lt;code&gt;max_fails&lt;/code&gt;&amp;rdquo; parameter is supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cf045e2620cf412fe656ee0758f7e85fcc89c8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_UPSTREAM_WEIGHT&lt;/code&gt; &amp;mdash; The &amp;ldquo;&lt;code&gt;weight&lt;/code&gt;&amp;rdquo; parameter is supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f242785b6198423a500b5879f0252f1095d952d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_UPS_CONF&lt;/code&gt; &amp;mdash; In an &lt;code&gt;upstream&lt;/code&gt; block within the &lt;code&gt;http&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c3d638a09986c0deeec30e87375c86633ee4697" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_VAR_CHANGEABLE&lt;/code&gt; &amp;mdash; Enables redefinition of the variable: there is no conflict if another module defines a variable with the same name. This allows the &lt;a href=&quot;../http/ngx_http_rewrite_module#set&quot;&gt;set&lt;/a&gt; directive to override variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4329ea6aa3f34203f8223795064dfb2c9be2c11a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_VAR_NOCACHEABLE&lt;/code&gt; &amp;mdash; Disables caching, which is useful for variables such as &lt;code&gt;$time_local&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcae442a46cdfd73177e376bcd5c72d92f34d600" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_VAR_NOHASH&lt;/code&gt; &amp;mdash; Indicates that this variable is only accessible by index, not by name. This is a small optimization for use when it is known that the variable is not needed in modules like SSI or Perl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="476227f5fa9f04d6f1d231d85353321697f96ab5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_HTTP_VAR_PREFIX&lt;/code&gt; &amp;mdash; The name of the variable is a prefix. In this case, a handler must implement additional logic to obtain the value of a specific variable. For example, all &amp;ldquo;&lt;code&gt;arg_&lt;/code&gt;&amp;rdquo; variables are processed by the same handler, which performs lookup in request arguments and returns the value of a specific argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84a2136379e774aa6a64e2eb694d8edde25b1822" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_MAIL_MAIN_CONF&lt;/code&gt; &amp;mdash; In the &lt;code&gt;mail&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7642e016c9b1a817780e376469e2b8a5d3e767c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_MAIL_MAIN_CONF_OFFSET&lt;/code&gt; &amp;mdash; Configuration for the &lt;code&gt;mail&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7fe50224331ee8003ecadf4ef7e9301cdf6ea14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_MAIL_SRV_CONF&lt;/code&gt; &amp;mdash; In a &lt;code&gt;server&lt;/code&gt; block within the &lt;code&gt;mail&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d264bc315876893a806ed032a71320c7d1844c37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_MAIL_SRV_CONF_OFFSET&lt;/code&gt; &amp;mdash; Configuration for a &lt;code&gt;server&lt;/code&gt; block within the &lt;code&gt;mail&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ba72c687a52e1ae334876e1275e2e0a65ae1f7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_MAIN_CONF&lt;/code&gt; &amp;mdash; In the top level context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea3e1ea7b5e543fdd778f2f71206d17e41819ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_NOACCEPT_SIGNAL&lt;/code&gt; (&lt;code&gt;SIGWINCH&lt;/code&gt; on most systems) - Shut down all worker and helper processes. Upon receiving this signal, the master process shuts down its child processes. If a previously started new nginx binary exits, the child processes of the old master are started again. When a worker process receives this signal, it shuts down in debug mode set by the &lt;code&gt;debug_points&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c1cc328ffb58bd1a617331b0c8617fa49a85ef1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_OK&lt;/code&gt; &amp;mdash; Operation succeeded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="214d5775f9c83ec8ee62dcd9f350b4637ecf6616" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_OK&lt;/code&gt; &amp;mdash; Proceed to the next phase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e24eddd8080c82e6c0d53d54cd69cea54132be76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_OK&lt;/code&gt; &amp;mdash; Server was selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386e04af0b04ec6976f865245ffcdec809df8144" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_PEER_FAILED&lt;/code&gt; &amp;mdash; Attempt was &lt;a href=&quot;../http/ngx_http_upstream_module#max_fails&quot;&gt;unsuccessful&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c14acb5f31cbe8bff40c339122e092e3f6a3d291" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_PEER_KEEPALIVE&lt;/code&gt; &amp;mdash; Currently unused</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf702879ba9af553887cbe80f685edebf892e24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_PEER_NEXT&lt;/code&gt; &amp;mdash; A special case when upstream server returns codes &lt;code&gt;403&lt;/code&gt; or &lt;code&gt;404&lt;/code&gt;, which are not considered a &lt;a href=&quot;../http/ngx_http_upstream_module#max_fails&quot;&gt;failure&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c31739644efbebf0f172dfe4ab10057cae76e09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_PROCESS_HELPER&lt;/code&gt; &amp;mdash; The helper process, of which currently there are two types: cache manager and cache loader. The cycle function for both is &lt;code&gt;ngx_cache_manager_process_cycle()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc03340ca1c6607825a87b51e2ed39921d78aec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_PROCESS_MASTER&lt;/code&gt; &amp;mdash; The master process, which reads the NGINX configuration, creates cycles, and starts and controls child processes. It does not perform any I/O and responds only to signals. Its cycle function is &lt;code&gt;ngx_master_process_cycle()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c874bb1e6d87ff647559b10d8d7e8dbdee68e0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_PROCESS_SINGLE&lt;/code&gt; &amp;mdash; The single process, which exists only in &lt;code&gt;master_process off&lt;/code&gt; mode, and is the only process running in that mode. It creates cycles (like the master process does) and handles client connections (like the worker process does). Its cycle function is &lt;code&gt;ngx_single_process_cycle()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3cb902e57374ce7b51734aeb86e91388a95bddb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_PROCESS_WORKER&lt;/code&gt; &amp;mdash; The worker process, which handles client connections. It is started by the master process and responds to its signals and channel commands as well. Its cycle function is &lt;code&gt;ngx_worker_process_cycle()&lt;/code&gt;. There can be multiple worker processes, as configured by the &lt;code&gt;worker_processes&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e634091e54321cd342e8f0c3e7e80055a0204892" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_RECONFIGURE_SIGNAL&lt;/code&gt; (&lt;code&gt;SIGHUP&lt;/code&gt; on most systems) - Reconfigure. Upon receiving this signal, the master process re-reads the configuration and creates a new cycle based on it. If the new cycle is created successfully, the old cycle is deleted and new child processes are started. Meanwhile, the old child processes receive the &lt;code&gt;NGX_SHUTDOWN_SIGNAL&lt;/code&gt; signal. In single-process mode, nginx creates a new cycle, but keeps the old one until there are no longer clients with active connections tied to it. The worker and helper processes ignore this signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ca33722c83e3ffa2a8d56f5f83e2a1e5a9ec75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_REOPEN_SIGNAL&lt;/code&gt; (&lt;code&gt;SIGUSR1&lt;/code&gt; on most systems) &amp;mdash; Reopen files. The master process sends this signal to workers, which reopen all &lt;code&gt;open_files&lt;/code&gt; related to the cycle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b8659d410d3c91a6b73928bd27cb30a062415e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_SHUTDOWN_SIGNAL&lt;/code&gt; (&lt;code&gt;SIGQUIT&lt;/code&gt; on most systems) &amp;mdash; Gracefully shutdown. Upon receiving this signal, the master process sends a shutdown signal to all child processes. When no child processes are left, the master destroys the cycle pool and exits. When a worker process receives this signal, it closes all listening sockets and waits until there are no non-cancelable events scheduled, then destroys the cycle pool and exits. When the cache manager or the cache loader process receives this signal, it exits immediately. The &lt;code&gt;ngx_quit&lt;/code&gt; variable is set to &lt;code&gt;1&lt;/code&gt; when a process receives this signal, and is immediately reset after being processed. The &lt;code&gt;ngx_exiting&lt;/code&gt; variable is set to &lt;code&gt;1&lt;/code&gt; while a worker process is in the shutdown state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99548374eec93655bcba51922a8d9ab28085ce23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_STREAM_MAIN_CONF&lt;/code&gt; &amp;mdash; In the &lt;code&gt;stream&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac800810c0a70a101966e3154839cf95d6ee0431" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_STREAM_MAIN_CONF_OFFSET&lt;/code&gt; &amp;mdash; Configuration for the &lt;code&gt;stream&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="276fcb356066c4bab73adc4e1ca78cad84aa2d73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_STREAM_SRV_CONF&lt;/code&gt; &amp;mdash; In a &lt;code&gt;server&lt;/code&gt; block within the &lt;code&gt;stream&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b0f994b436178213ff4c9731e0c9355109570ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_STREAM_SRV_CONF_OFFSET&lt;/code&gt; &amp;mdash; Configuration for a &lt;code&gt;server&lt;/code&gt; block within the &lt;code&gt;stream&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9034c6cc1aba4ec8a07350936c1aff45a4460114" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_STREAM_UPS_CONF&lt;/code&gt; &amp;mdash; In an &lt;code&gt;upstream&lt;/code&gt; block within the &lt;code&gt;stream&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="028eaef4bb0bdd97c8534f4310c425ca91b46e65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NGX_TERMINATE_SIGNAL&lt;/code&gt; (&lt;code&gt;SIGTERM&lt;/code&gt; on most systems) &amp;mdash; Terminate. Upon receiving this signal, the master process sends a terminate signal to all child processes. If a child process does not exit within 1 second, the master process sends the &lt;code&gt;SIGKILL&lt;/code&gt; signal to kill it. When no child processes are left, the master process destroys the cycle pool and exits. When a worker process, the cache manager process or the cache loader process receives this signal, it destroys the cycle pool and exits. The variable &lt;code&gt;ngx_terminate&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt; when this signal is received.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74275445d7613456fb3cfb0f0e29e52d19b3157e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Number&lt;/code&gt; methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99e35923345cebcfb769c30d56d22103f5595b30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Number&lt;/code&gt; properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b95b96b0e377d1d9496769a29f226700e44fd65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object&lt;/code&gt; instance methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cb64d8b96c354ee4263a72a9c4a59190a57fbb7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object&lt;/code&gt; methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="509a8d49d04ac4da0f96ce24590566e9962f7413" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PATCH&lt;/code&gt; - Modify a key-value or delete a key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e7e1f7668f70a1454ee6449c51e5de13c5aae9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PATCH&lt;/code&gt; - Modify a server in a stream upstream server group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb39c1eafca43cce0e000a68c5b48bc2629f89bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PATCH&lt;/code&gt; - Modify a server in an HTTP upstream server group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24860c8b9ccb96634da5ba55ea8672ccf1ab7cdb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;POST&lt;/code&gt; - Add a key-value pair to the HTTP keyval zone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf1d84828c57cf1c5df36e51b893670632426072" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;POST&lt;/code&gt; - Add a key-value pair to the stream keyval zone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4bc19f4897bff8ca952a75f4594119edd918d6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;POST&lt;/code&gt; - Add a server to a stream upstream server group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc02ad58c21b4c02c96240cc1295b07ef12134e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;POST&lt;/code&gt; - Add a server to an HTTP upstream server group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58331c3ae159782354cfe476a262ab0c357f215b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RegExp&lt;/code&gt; ES9 named capture groups (&lt;a href=&quot;changes#njs0.3.2&quot;&gt;0.3.2&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7db02018122c2b634549eca7db80a506ba0304c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RegExp&lt;/code&gt; instance methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40531f90b71acfee59e21ffb6876fa23ecbf133d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt; instance methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="282fed1bb8e3f788eab617f471f80f09d2ff183f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt; methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3af6726965c62ffbcca121417c0a147c45f650cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a+&lt;/code&gt; &amp;mdash; open a file for reading and appending. If the file does not exist, it will be created</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a68a54e47d36995055b3cf00f27e80dbb09c944" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a&lt;/code&gt; &amp;mdash; open a file for appending. The file is created if it does not exist</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7c7f593eb36e90d9b1b5128af77812240526bcf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;accept_filter&lt;/code&gt;=&lt;code&gt;&lt;i&gt;filter&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;accept_filter&lt;/code&gt;=&lt;code&gt;&lt;i&gt;filter&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b8ad667f4209f29309a5230ef2040d8b2627e133" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;accepted&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7e8617a4108f9d8a817ec816e3a930230d75724" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;active&lt;/code&gt; &amp;mdash; Flag indicating that the event is registered for receiving I/O notifications, normally from notification mechanisms like &lt;code&gt;epoll&lt;/code&gt;, &lt;code&gt;kqueue&lt;/code&gt;, &lt;code&gt;poll&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f291f87bbaeebce138b08242fe918b44ccfa8690" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;active&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="229bc51b0684d6fe4f17d738474c982b5aa3b4bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;addr&lt;/code&gt; &amp;mdash; Mapped shared memory address, initially NULL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc111ba1409da2180beed30856c4288d3d927ca8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;address&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba941f9ace6ff9aeaac00cdb5583de6648a86c0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;allow_ranges&lt;/code&gt; &amp;mdash; Flag indicating that a partial response can be sent to the client, as requested by the HTTP Range header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a23289fa9d2765b87d85d08f38c051d39a383c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;as+&lt;/code&gt; &amp;mdash; open a file for reading and appending in synchronous mode. If the file does not exist, it will be created</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="116eb50f04b0c471913a48b20b62b6d1befba4c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;as&lt;/code&gt; &amp;mdash; open a file for appending in synchronous mode. If the file does not exist, it will be created</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13c8cb16e92a1d01230b388749967d44ad6bef21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auto&lt;/code&gt; &amp;mdash; Build scripts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebe1b49d47cd58b9d4a1cfc6e105cdf9fb79befe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ax+&lt;/code&gt; &amp;mdash; the same as &lt;code&gt;a+&lt;/code&gt; but fails if the file already exists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f589f24c4a70868da1b76e639ee2fdb34a0625c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ax&lt;/code&gt; &amp;mdash; the same as &lt;code&gt;a&lt;/code&gt; but fails if the file already exists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b92d2a6243865e66e175febaac7283152c82680" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;backlog&lt;/code&gt;=&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;backlog&lt;/code&gt;=&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="97307945d315a29956b71468f2b8c8ec99fcd125" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;backup&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1378c110c7d14be7a2f54a1658aa82c89c581b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blocked&lt;/code&gt; &amp;mdash; Counter of blocks held on the request. While this value is non-zero, the request cannot be terminated. Currently, this value is increased by pending AIO operations (POSIX AIO and thread operations) and active cache lock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="136b44457e5baa6eb60cb0cd31d210c0f108a03e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;buffered&lt;/code&gt; &amp;mdash; Bitmask showing which modules have buffered the output produced by the request. A number of filters can buffer output; for example, sub_filter can buffer data because of a partial string match, copy filter can buffer data because of the lack of free output buffers etc. As long as this value is non-zero, the request is not finalized pending the flush.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69d504aa833bae0f7da25e3e8f1b4a76aeb10fd1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;build&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aa00ce09ed6c5d6f6faa1219a6874ded6f136db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bytes&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75f0b3d3c829f13bb1a2c8e5afa1e870c22d018e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bytes_in&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d68c55996011615cd038b600a31953407f8d6376" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bytes_out&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac977f1dc5819894d2c3286ee29e6823929a94c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bytes_written&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="529ab2e11d9ddeb56864ea989a409b01f23899b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cache&lt;/code&gt; &amp;mdash; Request cache object for caching the upstream response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48a05cf94d4df955db847662b4af0ffb0cfea7f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cancelable&lt;/code&gt; &amp;mdash; Timer event flag indicating that the event should be ignored while shutting down the worker. Graceful worker shutdown is delayed until there are no non-cancelable timer events scheduled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2292f57560d462e1ff41125924cc832cdcc7ba60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cf&lt;/code&gt; &amp;mdash; Configuration pointer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adcdd959d249bab6a8fc775778d4754d71c1af76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;checks&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e69e95971a470ba59febe948e3b05d391d933c07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;close&lt;/code&gt; &amp;mdash; Flag indicating that the connection is being reused and needs to be closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="846a299cad0fb2f559328922199219656f8331c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;code&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b260f4ffa6011bb34eabe96eb9e0b911436ddb4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cold&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9bac1f0e4903fcc6f55a60cdad6846ffb17082a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;complex_value&lt;/code&gt; &amp;mdash; Compiled value (output)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a48e9ae90e8c414560bfad232c3a285826263e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;conf_ctx&lt;/code&gt; &amp;mdash; Array of core module configurations. The configurations are created and filled during reading of nginx configuration files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570f61a09bfb5eab4158fe71b654722a7a41cf82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;conf_prefix&lt;/code&gt; &amp;mdash; Prefixes the result with the configuration prefix (the directory where nginx is currently looking for configuration)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca8bdfeaae3b3271027e166bba1408175b4e8b69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;connect_time&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bfa199e1034e25a11e264aa6430a518340a39ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;connection&lt;/code&gt; &amp;mdash; Pointer to a &lt;code&gt;ngx_connection_t&lt;/code&gt; client connection object. Several requests can reference the same connection object at the same time - one main request and its subrequests. After a request is deleted, a new request can be created on the same connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa182f691b782259602395f5d3953213e7b7a261" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;connections&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f19199fc7264f6c9bba60c1823032433ea313d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;connections&lt;/code&gt;, &lt;code&gt;connection_n&lt;/code&gt; &amp;mdash; Array of connections of type &lt;code&gt;ngx_connection_t&lt;/code&gt;, created by the event module while initializing each nginx worker. The &lt;code&gt;worker_connections&lt;/code&gt; directive in the nginx configuration sets the number of connections &lt;code&gt;connection_n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="843b8eabb67aae293a39541bb5fbbcaae99447fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;core&lt;/code&gt; &amp;mdash; Basic types and functions &amp;mdash; string, array, log, pool, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35cb77cd67429ddfa8a245af90e590dd27219f8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;count&lt;/code&gt; &amp;mdash; Request reference counter. The field only makes sense for the main request. Increasing the counter is done by simple &lt;code&gt;r-&amp;gt;main-&amp;gt;count++&lt;/code&gt;. To decrease the counter, call &lt;code&gt;ngx_http_finalize_request(r, rc)&lt;/code&gt;. Creating of a subrequest and running the request body read process both increment the counter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db5eb2b92ef7def91ce5b7392d93b0f0678465a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;crop&lt;/code&gt;&lt;code&gt;&lt;i&gt;width&lt;/i&gt;&lt;/code&gt;&lt;code&gt;&lt;i&gt;height&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;crop&lt;/code&gt;&lt;code&gt;&lt;i&gt;width&lt;/i&gt;&lt;/code&gt;&lt;code&gt;&lt;i&gt;height&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eb05959b323a652c1caecc89e9bca3900a7ea57d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ctx&lt;/code&gt; &amp;mdash; Array of HTTP module contexts. Each module of type &lt;code&gt;NGX_HTTP_MODULE&lt;/code&gt; can store any value (normally, a pointer to a structure) in the request. The value is stored in the &lt;code&gt;ctx&lt;/code&gt; array at the module's &lt;code&gt;ctx_index&lt;/code&gt; position. The following macros provide a convenient way to get and set request contexts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fd768eb9ab577e5c2d51bd8e4899ac055743551" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;current&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed96e76017d9155230f6ba75e6065e160df890a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data&lt;/code&gt; &amp;mdash; Arbitrary connection context. Normally, it is a pointer to a higher-level object built on top of the connection, such as an HTTP request or a Stream session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="838ac5db964fc47f40392b50ce7f953a300ef522" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data&lt;/code&gt; &amp;mdash; Arbitrary event context used in event handlers, usually as pointer to a connection related to the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="661ef95d1d954d4453a2b672c3d48c701630eceb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data&lt;/code&gt; &amp;mdash; Data context, used to pass arbitrary data to the &lt;code&gt;init&lt;/code&gt; callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5aa39e3c8d9b7b5f977e4532082afc036be8708" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data&lt;/code&gt; &amp;mdash; The per-request data of a load-balancing method; keeps the state of the selection algorithm and usually includes the link to the upstream configuration. It is passed as an argument to all methods that deal with server selection (see &lt;a href=&quot;#lb_method_get&quot;&gt;below&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c951bb5a8dc02b277ed4e33543cd8f41639a83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data&lt;/code&gt; &amp;mdash; The value itself</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d6363759959a6ae1279da16caaa1313a7757b35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default&lt;/code&gt;&lt;code&gt;&lt;i&gt;value&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt;&lt;code&gt;&lt;i&gt;value&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4153469919cd9a67f2ff238dfe5f39b5b3275460" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delayed&lt;/code&gt; &amp;mdash; Flag indicating that I/O is delayed due to rate limiting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a815bdf902512ba215c162802ea16f86a3dbf7f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;discarded&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2019cb8d0e13f9db256dc5492a51e1330704b85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;domain=&lt;/code&gt;&lt;code&gt;&lt;i&gt;domain&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;domain=&lt;/code&gt;&lt;code&gt;&lt;i&gt;domain&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d18430433c59d041e46ef00a27856806bfdc6283" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;down&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80693263dda0da2f0b839f2d33c8e49ea98e769f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;downstart&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6a8a3affcfebd8ddfed85d02e40b480fb479a21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;downtime&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b00258af51577306d6cf570cd9307be4fc3dcf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;drain&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd7dc8a58cfec8dd0d2ff1df370e99d121be4313" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dropped&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04949906a89e91bbc22fb3c66b63bbc48e7a5c9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eof&lt;/code&gt; &amp;mdash; Flag indicating that EOF occurred while reading data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31c942a2864b912fa30f94ce7bbeb96a47a634d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;epoll&lt;/code&gt; &amp;mdash; efficient method used on Linux 2.6+.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80aa1116f22f9bcc438208326bec0f3bd29ee9f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error&lt;/code&gt; &amp;mdash; Flag indicating that an error occurred during reading (for a read event) or writing (for a write event).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a28d758ee9c49ae67a2c2c4735a01474c2ee34ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;escape&lt;/code&gt; &amp;mdash; Used internally by the logging module to mark values that require escaping on output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c3e25dd3a548a0b5819db73cc85b3c7739e3123" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;event&lt;/code&gt; &amp;mdash; Event core</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5031c3d6abc3e12a1a8821a7ad83cee991791b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eventport&lt;/code&gt; &amp;mdash; event ports, method used on Solaris 10+ (due to known issues, it is recommended using the &lt;code&gt;/dev/poll&lt;/code&gt; method instead).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e704ef4a225b165bba0e65deebe6ea9cecf8560b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exists&lt;/code&gt; &amp;mdash; Flag that indicates shared memory was inherited from the master process (Windows-specific)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03f52fc757bdfa4c2f3a09d9f688148a91411673" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expect&lt;/code&gt;&lt;code&gt;&lt;i&gt;string&lt;/i&gt;&lt;/code&gt; | &lt;code&gt;~&lt;/code&gt;&lt;code&gt;&lt;i&gt;regex&lt;/i&gt;&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41c8295c469290036cd84a382a37809ed3b668b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expires=&lt;/code&gt;&lt;code&gt;&lt;i&gt;time&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;expires=&lt;/code&gt;&lt;code&gt;&lt;i&gt;time&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ba75e0127e6aad655ed226b0962ef92afe099aaa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;facility=&lt;/code&gt;&lt;code&gt;&lt;i&gt;string&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;facility=&lt;/code&gt;&lt;code&gt;&lt;i&gt;string&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2c9e569130605b67586a17317cecd39f942d7af3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fail_timeout&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="074b91e4d17e8e886a435c7c6079d5b5e87bf2f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fail_timeout&lt;/code&gt;=&lt;code&gt;&lt;i&gt;time&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fail_timeout&lt;/code&gt;=&lt;code&gt;&lt;i&gt;time&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3c58d7a42ca37a0ffde9070a5dff450d9775564d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fail_timeout=&lt;/code&gt;&lt;code&gt;&lt;i&gt;time&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fail_timeout=&lt;/code&gt;&lt;code&gt;&lt;i&gt;time&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="607a61fa54033d73a23aad5baa75dae0dd5c10e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fails&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ce6c91ae2b8fa7c317c1298806d3f102fa4a4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fails&lt;/code&gt;=&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fails&lt;/code&gt;=&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="555a1a08139eb25f6e20c825e1bce32f857eeba3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fastopen&lt;/code&gt;=&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fastopen&lt;/code&gt;=&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="82fb229d13a725448def5c5aa85e89a5601fdb6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fastresponse.js&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;fastresponse.js&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="a5e93671402b6533afdaf2bd4878ccac3b424aba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fd&lt;/code&gt; &amp;mdash; Socket descriptor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dfe8e7ea1002f9cd5a93b6d72adcf4188b958cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fields&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, optional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aed108868a93a1beb94d76b68447fb7d631560f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;file&lt;/code&gt; &amp;mdash; File object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63f3ac49eeb2301698a11184f1fd4c50673812d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;file_name, line&lt;/code&gt; &amp;mdash; Name of the configuration file and the line where the &lt;code&gt;upstream&lt;/code&gt; block is located.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5018c5cbde31e5df026ecb4eb6ff0827d335d829" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;file_pos&lt;/code&gt;, &lt;code&gt;file_last&lt;/code&gt; &amp;mdash; The boundaries of a file buffer, expressed as offsets from the beginning of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4afd2f2c334a4fd2d259b85f49a270792ff0941" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;files&lt;/code&gt;, &lt;code&gt;files_n&lt;/code&gt; &amp;mdash; Array for mapping file descriptors to nginx connections. This mapping is used by the event modules, having the &lt;code&gt;NGX_USE_FD_EVENT&lt;/code&gt; flag (currently, it's &lt;code&gt;poll&lt;/code&gt; and &lt;code&gt;devpoll&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba27253e939b593a0e0e26991fbdd5e11c0f8395" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter_need_temporary&lt;/code&gt; &amp;mdash; Flag requesting that the request output be produced in temporary buffers, but not in readonly memory buffers or file buffers. This is used by filters which may change output directly in the buffers where it's sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d764eef6ba626dcbc92f49ad9b24739f1e796502" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;first_byte_time&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ce43f6c847005348a702f453f7ab2ec246da58b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; &amp;mdash; Flags that mostly mark which features are supported by the load-balancing method. The features are configured as parameters of the &lt;a href=&quot;../http/ngx_http_upstream_module#server&quot;&gt;server&lt;/a&gt; directive:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6a61590a22a13a25ea81700bc7ca2911ea3ab26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flush&lt;/code&gt; &amp;mdash; Flag indicating that all data prior to the buffer need to be flushed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17eca3c9a8decf9bb96121a56498f7043a9ef8fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;free(pc, data, state)&lt;/code&gt; &amp;mdash; The method called when an upstream module has finished work with a particular server. The &lt;code&gt;state&lt;/code&gt; argument is the completion status of the upstream connection, a bitmask with the following possible values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="268be1a13f20114593e5bb0294facce8f678c673" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;free&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fbb9c064910cefc6d532cbaebe322a5e38453e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;free_connections&lt;/code&gt;, &lt;code&gt;free_connection_n&lt;/code&gt; &amp;mdash; List and number of currently available connections. If no connections are available, an nginx worker refuses to accept new clients or connect to upstream servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98cb3ffec8d27991900a567344469303ca131ace" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;from&lt;/code&gt;=&lt;code&gt;&lt;i&gt;part&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;from&lt;/code&gt;=&lt;code&gt;&lt;i&gt;part&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3be7855fdeeb42740c9e7f45aefcde03c2b657d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;generation&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b34bc0c4e59083a6fee3ade41d7ef9c009f5463a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get(pc, data)&lt;/code&gt; &amp;mdash; The method called when the upstream module is ready to pass a request to an upstream server and needs to know its address. The method has to fill the &lt;code&gt;sockaddr&lt;/code&gt;, &lt;code&gt;socklen&lt;/code&gt;, and &lt;code&gt;name&lt;/code&gt; fields of &lt;code&gt;ngx_peer_connection_t&lt;/code&gt; structure. The return is one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa42cddf459f6054af1868519d6a7821988d1313" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get&lt;/code&gt;, &lt;code&gt;free&lt;/code&gt;, &lt;code&gt;notify&lt;/code&gt;, &lt;code&gt;set_session&lt;/code&gt;, and &lt;code&gt;save_session&lt;/code&gt; - Methods of the load-balancing module, described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="146bc9eff1c7faaa20a5865e793307e9498356aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;handler&lt;/code&gt; &amp;mdash; Callback function to be invoked when the event happens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe514e309bdd3dac6b3b7243c048d4cfbccb3e31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;handshakes&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a587c9d2c401f3a774181134f86f430e8ef92e56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;handshakes_failed&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b40b56163653b54f573755633b56dae67ccdac84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hash.js&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;hash.js&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="dede1280760fb3914ada496230f9fa870946cd09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;header_in&lt;/code&gt; &amp;mdash; Buffer into which the client HTTP request header is read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f6aabb15e00eac7a5ec06a7f7f1337de715e75b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;header_only&lt;/code&gt; &amp;mdash; Flag indicating that the output does not require a body. For example, this flag is used by HTTP HEAD requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13f52e3095f09676c4b48d44955be17528e56740" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;header_sent&lt;/code&gt; &amp;mdash; Flag indicating that the output header has already been sent by the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e30dd118ee843c381fed416cf673ab7932c391a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;header_time&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f52d06347eca4d93020070da93a089bb71142d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;headers_in&lt;/code&gt;, &lt;code&gt;headers_out&lt;/code&gt; &amp;mdash; Input and output HTTP headers objects. Both objects contain the &lt;code&gt;headers&lt;/code&gt; field of type &lt;code&gt;ngx_list_t&lt;/code&gt; for keeping the raw list of headers. In addition to that, specific headers are available for getting and setting as separate fields, for example &lt;code&gt;content_length_n&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8227725e4493c506299ed395ec5dfc7e5d3dd8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hello_world.js&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;hello_world.js&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="6fc59d90f25136a888a35dc314e23f74ccb6763f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hit&lt;/code&gt;, &lt;code&gt;stale&lt;/code&gt;, &lt;code&gt;updating&lt;/code&gt;, &lt;code&gt;revalidated&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dc2e31b6d791d5fb5071e913c70b0faae9cfd0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;host&lt;/code&gt; &amp;mdash; Name of the upstream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de3f7d899c14e37c296316aa4e81dfeecd112e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;host&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5d8d613ce5e61feddfa0fd71ef61032a3b201eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;href&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f28312c6ad234d1c06f90a2c75fcbae1c4a16af8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hs_jwt.js&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;hs_jwt.js&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="0a44aa191146f3ca2bd227f94bfa0dd2014e881e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;http&lt;/code&gt; &amp;mdash; Core HTTP module and common code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83663515933fd19d98c870f6c8de82210bec05bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;http&lt;/code&gt;, &lt;code&gt;server&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d11c81b9f3d80f5bc25859b96b7ce11fe4014ee4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;http&lt;/code&gt;, &lt;code&gt;server&lt;/code&gt;, &lt;code&gt;location&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f32f215ba65fa9e16f2459a069404b84dd2f81a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;http&lt;/code&gt;, &lt;code&gt;server&lt;/code&gt;, &lt;code&gt;location&lt;/code&gt;, &lt;code&gt;if in location&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4661a703f38a1827459f371ba41c428f0f882e4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;http&lt;/code&gt;, &lt;code&gt;server&lt;/code&gt;, &lt;code&gt;location&lt;/code&gt;, &lt;code&gt;if in location&lt;/code&gt;, &lt;code&gt;limit_except&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2acde82e6b6851e3bbfb5c88f6d7cc1df9c9a46f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;http&lt;/code&gt;, &lt;code&gt;server&lt;/code&gt;, &lt;code&gt;location&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57772c7d938e49ab612210ae4608aa105891e29b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;http&lt;/code&gt;, &lt;code&gt;server&lt;/code&gt;, &lt;code&gt;location&lt;/code&gt;, &lt;code&gt;limit_except&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbdfa99ac86ce305207e9e91562d4809fe5a1428" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;httpCacheZoneName&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e259d41c1ceb7e77a44b295efebf340eb330c5c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;httpKeyvalZoneKeyValue&lt;/code&gt; (&lt;a href=&quot;#def_nginx_http_keyval_zone&quot;&gt;HTTP Keyval Shared Memory Zone&lt;/a&gt;, required)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="927fd320668a387d18cbad2a16acf4231451e2bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;httpKeyvalZoneName&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b884aa2f1d8185e7c576cd79a8ab3ac8f9f8fe0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;httpServerZoneName&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a9257a2c70914ee005ff469b1e9516b4ed6d76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;httpUpstreamName&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0830c6d6a85a83396e67c923a3daebcccc5925c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;httpUpstreamServerId&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dd6f8c3421d06afc00436002ac3b20dec132136" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;http_major&lt;/code&gt;, &lt;code&gt;http_minor&lt;/code&gt; &amp;mdash; Client HTTP protocol version in numeric form split into major and minor parts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="547cd87030790c745f89ada6d33a0fa8a0cf6f61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;http_protocol&lt;/code&gt; &amp;mdash; Client HTTP protocol version in its original text form (&amp;ldquo;HTTP/1.0&amp;rdquo;, &amp;ldquo;HTTP/1.1&amp;rdquo; etc).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1cfe6ceb94303a58a6cd10859b3ff1d98bf6cd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;http_version&lt;/code&gt; &amp;mdash; Client HTTP protocol version in numeric form (&lt;code&gt;NGX_HTTP_VERSION_10&lt;/code&gt;, &lt;code&gt;NGX_HTTP_VERSION_11&lt;/code&gt;, etc.).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c01adbfed03e681787476f48ce16cc982e3b93e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa5d2bacf361f56bdf2a9d1c193640f94409c16d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id=&lt;/code&gt;&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;id=&lt;/code&gt;&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f95fcc4a79b3a46800e45b51e8aa5b47c4d3a107" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;idle&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0960e95ce102b9075bcf322bf7943f965350fde4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imap&lt;/code&gt;: 143, 993</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b0d17180fe5579b89005d3c89a3244b51e25773" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;in_file&lt;/code&gt; &amp;mdash; Flag indicating that the buffer references data in a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2045c78369f412166c962d8845de5909ff126fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;include&lt;/code&gt;&lt;code&gt;&lt;i&gt;file&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;include&lt;/code&gt;&lt;code&gt;&lt;i&gt;file&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="40676c7d5baf899a510e4ba695d281f67f05d4be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;init(r, us)&lt;/code&gt; &amp;mdash; Initializes a per-request &lt;code&gt;ngx_http_upstream_peer_t.peer&lt;/code&gt; structure that is used for load balancing (not to be confused with the &lt;code&gt;ngx_http_upstream_srv_conf_t.peer&lt;/code&gt; described above which is per-upstream). It is passed as the &lt;code&gt;data&lt;/code&gt; argument to all callbacks that deal with server selection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cee8bd688ef1be557ce4237c8c8d7db93759765" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;init&lt;/code&gt; &amp;mdash; Initialization callback, called after the shared zone is mapped to actual memory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8241bb263f25b7022749d5ece2a9540d9c1ab7f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;init_upstream(cf, us)&lt;/code&gt; &amp;mdash; Configuration-time method responsible for initializing a group of servers and initializing the &lt;code&gt;init()&lt;/code&gt; method in case of success. A typical load-balancing module uses a list of servers in the &lt;code&gt;upstream&lt;/code&gt; block to create an efficient data structure that it uses and saves its own configuration to the &lt;code&gt;data&lt;/code&gt; field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf1919cf330ec14b2661c86798e00438b4ffa491" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;internal&lt;/code&gt; &amp;mdash; Flag indicating that the current request is internal. To enter the internal state, a request must pass through an internal redirect or be a subrequest. Internal requests are allowed to enter internal locations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc64cc7bf83aab22ea7c1c5dd27daa35b05f0fc8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;interval&lt;/code&gt;=&lt;code&gt;&lt;i&gt;time&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;interval&lt;/code&gt;=&lt;code&gt;&lt;i&gt;time&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8eeb14cc4009c2274205a9e5af4fa5ef9cda9148" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ipv6only&lt;/code&gt;=&lt;code&gt;on&lt;/code&gt;|&lt;code&gt;off&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ipv6only&lt;/code&gt;=&lt;code&gt;on&lt;/code&gt;|&lt;code&gt;off&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="74bbfd3840b1f970f88ade860d48ba0212ca2f57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jitter&lt;/code&gt;=&lt;code&gt;&lt;i&gt;time&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;jitter&lt;/code&gt;=&lt;code&gt;&lt;i&gt;time&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ac7f76a075f5e1b587327953ab578731871b3e29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keepalive&lt;/code&gt; &amp;mdash; Flag indicating whether client connection keepalive is supported. The value is inferred from the HTTP version and the value of the &amp;ldquo;Connection&amp;rdquo; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b934f02751b53e12f8849f817034ef3da3a424c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keepalive&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a75f6f7b7619cbaf3a3f61848204cf7f848f94" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, optional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba8f94b83c8ba0f311983d7af109840e1be7bfd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kqueue&lt;/code&gt; &amp;mdash; efficient method used on FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0, and macOS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42c8c4c4bef4fb97dd919f47db5b4d379f0fd59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;last_buf&lt;/code&gt; &amp;mdash; Flag indicating that the buffer is the last in output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3c8925d9d7a694371c9d7854958a09b6c1b755a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;last_in_chain&lt;/code&gt; &amp;mdash; Flag indicating that there are no more data buffers in a request or subrequest.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="192005f90da9a285f487f8ce2b3f0afe3f4d43ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;last_passed&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="994f08c47d4158421a6313f99095d12220cef1ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;last_shadow&lt;/code&gt; &amp;mdash; Flag indicating that the buffer is the last one that references a particular shadow buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0613f0e8b647327f75dc12299590dc75c8e2f81d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;len&lt;/code&gt; &amp;mdash; The length of the value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6534ada34f757daca7977b8d7fa710402e493de6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;limit_conn_zone&lt;/code&gt;&lt;code&gt;&lt;i&gt;$variable&lt;/i&gt;&lt;/code&gt;&lt;code&gt;zone&lt;/code&gt;=&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;:&lt;code&gt;&lt;i&gt;size&lt;/i&gt;&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;limit_conn_zone&lt;/code&gt;&lt;code&gt;&lt;i&gt;$variable&lt;/i&gt;&lt;/code&gt;&lt;code&gt;zone&lt;/code&gt;=&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;:&lt;code&gt;&lt;i&gt;size&lt;/i&gt;&lt;/code&gt;;</target>
        </trans-unit>
        <trans-unit id="f2a70caa79c6b9286567db6ed550cad9d1f94964" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;listening&lt;/code&gt; &amp;mdash; Array of listening objects of type &lt;code&gt;ngx_listening_t&lt;/code&gt;. Listening objects are normally added by the &lt;code&gt;listen&lt;/code&gt; directive of different modules which call the &lt;code&gt;ngx_create_listening()&lt;/code&gt; function. Listen sockets are created based on the listening objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5a7e52a189d584d637fe055fbe1e4fb29cc6e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;load_timestamp&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a5ed2e94586e37aabbc65e214cf22c5d3a938d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;local_sockaddr&lt;/code&gt;, &lt;code&gt;local_socklen&lt;/code&gt; &amp;mdash; Local socket address in binary form. Initially, these fields are empty. Use the &lt;code&gt;ngx_connection_local_sockaddr()&lt;/code&gt; function to get the local socket address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159b53d210ea40e21408f656f4e5b36db4fcd079" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;location&lt;/code&gt; blocks can be nested, with some exceptions mentioned below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d1d73acd0388df341dd9ec4c716bc5dc3e5fa8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;location&lt;/code&gt;, &lt;code&gt;if in location&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a40c20018238fb323dc518494c480fc5fbfc1a3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;location&lt;/code&gt;, &lt;code&gt;if in location&lt;/code&gt;, &lt;code&gt;limit_except&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="119addac9ce4b402f0a7be0b9932fd128e31d054" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;location&lt;/code&gt;, &lt;code&gt;limit_except&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cfd200f34e7ae69870c795c55ced568e1fb5fd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log&lt;/code&gt; &amp;mdash; Connection log.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec7f21fd4067865105fcfbc8aa48527be3a6827" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log&lt;/code&gt; &amp;mdash; Cycle log. Initially inherited from the old cycle, it is set to point to &lt;code&gt;new_log&lt;/code&gt; after the configuration is read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8766d1d86c39c8a43517bced49e110a5231b359" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log&lt;/code&gt; &amp;mdash; Shared memory log</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7977059eddd7c7b97ae2b3944c9cdf585b29010a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mail&lt;/code&gt; &amp;mdash; Mail modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c8c7575342d1f33e80e16c044264cef6254d3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mail&lt;/code&gt;, &lt;code&gt;server&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ee4857a061ac1aadb94a412ee2dc1db748e08b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;main&lt;/code&gt; &amp;mdash; Pointer to a main request object. This object is created to process a client HTTP request, as opposed to subrequests, which are created to perform a specific subtask within the main request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90398c3a45c5c0239a310c37f35e72e279b63bac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;main&lt;/code&gt;, &lt;code&gt;http&lt;/code&gt;, &lt;code&gt;mail&lt;/code&gt;, &lt;code&gt;stream&lt;/code&gt;, &lt;code&gt;server&lt;/code&gt;, &lt;code&gt;location&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a315f7ea55801302ac1c61e79cc96247691c6d0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;main_conf&lt;/code&gt;, &lt;code&gt;srv_conf&lt;/code&gt;, &lt;code&gt;loc_conf&lt;/code&gt; &amp;mdash; Arrays of current request configurations. Configurations are stored at the module's &lt;code&gt;ctx_index&lt;/code&gt; positions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff67bd70943954f0044327d7c280557df7f600d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;main_filter_need_in_memory&lt;/code&gt;, &lt;code&gt;filter_need_in_memory&lt;/code&gt; &amp;mdash; Flags requesting that the output produced in memory buffers rather than files. This is a signal to the copy filter to read data from file buffers even if sendfile is enabled. The difference between the two flags is the location of the filter modules that set them. Filters called before the postpone filter in the filter chain set &lt;code&gt;filter_need_in_memory&lt;/code&gt;, requesting that only the current request output come in memory buffers. Filters called later in the filter chain set &lt;code&gt;main_filter_need_in_memory&lt;/code&gt;, requesting that both the main request and all subrequests read files in memory while sending output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="646a07980fa9b673c6ff552edd013d6bd9c3e51c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;match&lt;/code&gt;=&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;match&lt;/code&gt;=&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fea1ba699b56ac4a25472b13e6faa9df3d849289" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_conns&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc6b565ef54d552797d72e125fd54d6d2619f9fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_conns&lt;/code&gt;=&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;max_conns&lt;/code&gt;=&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cacbf5d51d345b83a4c9216821243c51eaaccac5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_conns=&lt;/code&gt;&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;max_conns=&lt;/code&gt;&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7f3ee711770ffe67c540eb56b1e1ee6de148fe74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_fails&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="621116393d97fd11b8af23dcc81bdf1bed63a5dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_fails&lt;/code&gt;=&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;max_fails&lt;/code&gt;=&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="22ea5b307dcd5ce3a7b6435f9eb75f97d5ae6479" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_fails=&lt;/code&gt;&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;max_fails=&lt;/code&gt;&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7b76f7456df9fce26420f81dfc47b26163d42943" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_size&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c423f34a11e8fb2e7be3ee87de5d812fd10a28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memory&lt;/code&gt; &amp;mdash; Flag indicating that the buffer references read-only memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0986230415f46218552f5c9166e2ee286e3df704" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;method&lt;/code&gt;, &lt;code&gt;method_name&lt;/code&gt; &amp;mdash; Numeric and text representation of the client HTTP request method. Numeric values for methods are defined in &lt;code&gt;src/http/ngx_http_request.h&lt;/code&gt; with the macros &lt;code&gt;NGX_HTTP_GET&lt;/code&gt;, &lt;code&gt;NGX_HTTP_HEAD&lt;/code&gt;, &lt;code&gt;NGX_HTTP_POST&lt;/code&gt;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e55a6e35e2905b5312db839ae64a1d79b0e2eea9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;miss&lt;/code&gt;, &lt;code&gt;expired&lt;/code&gt;, &lt;code&gt;bypass&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f971fed831e34616e6b170fd028c416d710ec297" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;modules&lt;/code&gt; &amp;mdash; Event notification modules: &lt;code&gt;epoll&lt;/code&gt;, &lt;code&gt;kqueue&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt; etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb93ea6c85b6d35c61bf7d24769ad314034bf115" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;modules&lt;/code&gt; &amp;mdash; Other HTTP modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d2c333a5392dbb1c70e248062a8f6f069e30203" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;modules&lt;/code&gt;, &lt;code&gt;modules_n&lt;/code&gt; &amp;mdash; Array of modules of type &lt;code&gt;ngx_module_t&lt;/code&gt;, both static and dynamic, loaded by the current configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c55e5b04fe1494fa7494fec8cdff3336f7c0a76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;msgs_in&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c56e7ed937df039e5d2b0dac5528008e15c348d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;msgs_out&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64d5fc1bf0d8dc746fa72c4d2934fe73b4fddaa2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; &amp;mdash; Shared memory name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7af663cac24735daca7d82e3b1958a56ec7b755" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b15167cc92903cbc78a90f9e7d243cf47be887" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ncaptures&lt;/code&gt;, &lt;code&gt;captures&lt;/code&gt;, &lt;code&gt;captures_data&lt;/code&gt; &amp;mdash; Regex captures produced by the last regex match of the request. A regex match can occur at a number of places during request processing: map lookup, server lookup by SNI or HTTP Host, rewrite, proxy_redirect, etc. Captures produced by a lookup are stored in the above mentioned fields. The field &lt;code&gt;ncaptures&lt;/code&gt; holds the number of captures, &lt;code&gt;captures&lt;/code&gt; holds captures boundaries and &lt;code&gt;captures_data&lt;/code&gt; holds the string against which the regex was matched and which is used to extract captures. After each new regex match, request captures are reset to hold new values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f79b9423e347ca30ff1190aeb4260e10f68459e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new_log&lt;/code&gt; &amp;mdash; Cycle log, created by the configuration. It's affected by the root-scope &lt;code&gt;error_log&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32fe9fe5ad4a0497bbdbfb4f77f4dd971085ad02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nginx-module-njs-dbg&lt;/code&gt; &amp;mdash; debug symbols for the &lt;code&gt;nginx-module-njs&lt;/code&gt; package</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ab83191d87ef62f2e221818fbb8a5e96ff6b682" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nginx-module-njs&lt;/code&gt; &amp;mdash; njs &lt;a href=&quot;../ngx_core_module#load_module&quot;&gt;dynamic&lt;/a&gt; modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4106b705277d059cc82d892c8ae44b4c22180e25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nginx.conf&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;nginx.conf&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="6fd2e1686936c8ecb94072455d5c5d3c03b21127" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_addon_name&lt;/code&gt; &amp;mdash; Name of the module as it appears in output on the console from the configure script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f5a9c3d5d0ece56921cea0c11ebe1588cf1c813" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_alloc(size, log)&lt;/code&gt; &amp;mdash; Allocate memory from system heap. This is a wrapper around &lt;code&gt;malloc()&lt;/code&gt; with logging support. Allocation error and debugging information is logged to &lt;code&gt;log&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04b61e7987e908afb51de6164e364439adbfde3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_array_push(a)&lt;/code&gt; adds one tail element and returns pointer to it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8fb6fa25cceea48d1acf216792460d2ec025fb7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_array_push_n(a, n)&lt;/code&gt; adds &lt;code&gt;n&lt;/code&gt; tail elements and returns pointer to the first one</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fca7e6c8eb6cd987c7ee95244668ac7ee7dd349" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_atofp(line, n, point)&lt;/code&gt; &amp;mdash; Converts a fixed point floating number of given length to a positive integer of type &lt;code&gt;ngx_int_t&lt;/code&gt;. The result is shifted left by &lt;code&gt;point&lt;/code&gt; decimal positions. The string representation of the number is expected to have no more than &lt;code&gt;points&lt;/code&gt; fractional digits. For example, &lt;code&gt;ngx_atofp(&quot;10.5&quot;, 4, 2)&lt;/code&gt; returns &lt;code&gt;1050&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39482730d9ebc71e85c3899d8263bb86a62e544b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_atoi(line, n)&lt;/code&gt; &amp;mdash; &lt;code&gt;ngx_int_t&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1579fd4f13bcf6d77fb11bd348aecd5c31f7c47d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_atoof(line, n)&lt;/code&gt; &amp;mdash; &lt;code&gt;off_t&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f161e60dbdb3520be596b441bf460eaa874fc64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_atosz(line, n)&lt;/code&gt; &amp;mdash; &lt;code&gt;ssize_t&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c98104bfc8c2b534f8d455a68667384df805c35f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_atotm(line, n)&lt;/code&gt; &amp;mdash; &lt;code&gt;time_t&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="829c6e0b5d85aa55a9a17a4bc832f18a6d58ec7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_cached_err_log_time&lt;/code&gt; &amp;mdash; Used in error log entries: &lt;code&gt;&quot;1970/09/28 12:00:00&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f6fa3e0acf0aa2a5b883f964f56ab1711cea46f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_cached_http_log_iso8601&lt;/code&gt; &amp;mdash; The ISO 8601 standard format: &lt;code&gt;&quot;1970-09-28T12:00:00+06:00&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="295cc21055637f2b1bf3133f0fde9ba06c06a697" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_cached_http_log_time&lt;/code&gt; &amp;mdash; Used in HTTP access log entries: &lt;code&gt;&quot;28/Sep/1970:12:00:00 +0600&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="692131543076160ac4e6e45319b7b719172724de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_cached_http_time&lt;/code&gt; &amp;mdash; Used in HTTP headers: &lt;code&gt;&quot;Mon, 28 Sep 1970 06:00:00 GMT&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14c7aeedbf7203233f1fe1bce8dc20cc110424e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_cached_syslog_time&lt;/code&gt; &amp;mdash; Used in syslog entries: &lt;code&gt;&quot;Sep 28 12:00:00&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95968100c295f067811d189cc45978f03c486c28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_calloc(size, log)&lt;/code&gt; &amp;mdash; Allocate memory from system heap like &lt;code&gt;ngx_alloc()&lt;/code&gt;, but fill memory with zeros after allocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f4f20b1372203ce506c49fe6fd09450c2a84a5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_conf_set_bitmask_slot&lt;/code&gt; &amp;mdash; Converts the supplied arguments into an &lt;code&gt;ngx_uint_t&lt;/code&gt; value. The mask values for each argument are ORed producing the result. The null-terminated array of &lt;code&gt;ngx_conf_bitmask_t&lt;/code&gt; passed in the &lt;code&gt;post&lt;/code&gt; field defines the acceptable strings and corresponding mask values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a33544c8d848d32aeae047df836ff03626b3a2af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_conf_set_bufs_slot&lt;/code&gt; &amp;mdash; Converts the two supplied arguments into an &lt;code&gt;ngx_bufs_t&lt;/code&gt; object that holds the number and &lt;a href=&quot;../syntax&quot;&gt;size&lt;/a&gt; of buffers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2faa13ff14200d9faab0424ea7d4a9c0f8edb6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_conf_set_enum_slot&lt;/code&gt; &amp;mdash; Converts the supplied argument into an &lt;code&gt;ngx_uint_t&lt;/code&gt; value. The null-terminated array of &lt;code&gt;ngx_conf_enum_t&lt;/code&gt; passed in the &lt;code&gt;post&lt;/code&gt; field defines the acceptable strings and corresponding integer values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58822ff4a64e2dd3904390e71fbb687530ffea66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_conf_set_flag_slot&lt;/code&gt; &amp;mdash; Converts the literal strings &lt;code&gt;on&lt;/code&gt; and &lt;code&gt;off&lt;/code&gt; into an &lt;code&gt;ngx_flag_t&lt;/code&gt; value with values 1 or 0, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="791ba0967694d9d9fe2a493e1c114b37635fd9c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_conf_set_keyval_slot&lt;/code&gt; &amp;mdash; Appends a key-value pair to an array &lt;code&gt;ngx_array_t&lt;/code&gt; of key-value pairs &lt;code&gt;ngx_keyval_t&lt;/code&gt;. The first string becomes the key and the second the value. The array is created if it does not already exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="268e6bd363c90608f688754b040a6a3d4af626c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_conf_set_msec_slot&lt;/code&gt; &amp;mdash; Converts a &lt;a href=&quot;../syntax&quot;&gt;time&lt;/a&gt; to an &lt;code&gt;ngx_msec_t&lt;/code&gt; value expressed in milliseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87b06bbbca109cf62582b86a49426548a02d1c9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_conf_set_num_slot&lt;/code&gt; &amp;mdash; Converts a directive's argument to an &lt;code&gt;ngx_int_t&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="048e9a0c3dd8b14b8e9235f92c401d712ecd8561" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_conf_set_off_slot&lt;/code&gt; &amp;mdash; Converts an &lt;a href=&quot;../syntax&quot;&gt;offset&lt;/a&gt; to an &lt;code&gt;off_t&lt;/code&gt; value expressed in bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaf22d548e44e40e147c6b82823a64b2bbb1e27f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_conf_set_sec_slot&lt;/code&gt; &amp;mdash; Converts a &lt;a href=&quot;../syntax&quot;&gt;time&lt;/a&gt; to a &lt;code&gt;time_t&lt;/code&gt; value expressed in in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23a8c1ba491ebc1d5372bb0f9c8e83ce9b3a6bae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_conf_set_size_slot&lt;/code&gt; &amp;mdash; Converts a &lt;a href=&quot;../syntax&quot;&gt;size&lt;/a&gt; to a &lt;code&gt;size_t&lt;/code&gt; value expressed in bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e316cd28e360ecfc171d59a2a4192c4a91810473" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_conf_set_str_array_slot&lt;/code&gt; &amp;mdash; Appends a value to an array &lt;code&gt;ngx_array_t&lt;/code&gt; of strings &lt;code&gt;ngx_str_t&lt;/code&gt;. The array is created if does not already exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="175caa7b861899634b804b27e63494512343c910" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_conf_set_str_slot&lt;/code&gt; &amp;mdash; Stores a string as a value of the &lt;code&gt;ngx_str_t&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="672bca23af488951c7abe583ff3ba4e28ec454e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_cpymem()&lt;/code&gt; &amp;mdash; Does the same as &lt;code&gt;ngx_memcpy()&lt;/code&gt;, but returns the final destination address This one is handy for appending multiple strings in a row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb076a148f1eca2ecbcf48457b2006c061642847" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_create_pool(size, log)&lt;/code&gt; &amp;mdash; Create a pool with specified block size. The pool object returned is allocated in the pool as well. The &lt;code&gt;size&lt;/code&gt; should be at least &lt;code&gt;NGX_MIN_POOL_SIZE&lt;/code&gt; and a multiple of &lt;code&gt;NGX_POOL_ALIGNMENT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a2e69792d429681ed318233af8cb3476a8a700" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_destroy_pool(pool)&lt;/code&gt; &amp;mdash; Free all pool memory, including the pool object itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36cea37a577f5cffc84c4b86e664fd908a65dbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_event_accept()&lt;/code&gt; accepts a client TCP connection. This handler is called in response to a read notification on a listen socket. A new &lt;code&gt;ngx_connecton_t&lt;/code&gt; object is created at this stage to wrap the newly accepted client socket. Each nginx listener provides a handler to pass the new connection object to. For HTTP connections it's &lt;code&gt;ngx_http_init_connection(c)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0224ec06b262476c03efa23cc521eced3a6e458c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_explicit_memzero()&lt;/code&gt; &amp;mdash; Does the same as &lt;code&gt;ngx_memzero()&lt;/code&gt;, but this call is never removed by the compiler's dead store elimination optimization. This function can be used to clear sensitive data such as passwords and keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a21aae98c2c0dabc514e39eee4e7d35b6dc74e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_free(p)&lt;/code&gt; &amp;mdash; Free allocated memory. This is a wrapper around &lt;code&gt;free()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c18b32977476c73bd223696b38f8b535ef9070" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_gmtime(), ngx_libc_gmtime()&lt;/code&gt; &amp;mdash; Time expressed as UTC</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaaa9af59f6d6f710448c680fb7904f43e9efda3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_hextoi(line, n)&lt;/code&gt; &amp;mdash; Converts a hexadecimal representation of a positive integer to &lt;code&gt;ngx_int_t&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53df211755c9128dcee61bf31f6861f77c24b843" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_http_core_run_phases()&lt;/code&gt; is called when the request header is completely read and parsed. This function runs request phases from &lt;code&gt;NGX_HTTP_POST_READ_PHASE&lt;/code&gt; to &lt;code&gt;NGX_HTTP_CONTENT_PHASE&lt;/code&gt;. The last phase is intended to generate a response and pass it along the filter chain. The response is not necessarily sent to the client at this phase. It might remain buffered and be sent at the finalization stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b67cd7825d2ec55066306ee28d0aecfe7c8f8b00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_http_finalize_connection()&lt;/code&gt; is called when the complete response has been sent to the client and the request can be destroyed. If the client connection keepalive feature is enabled, &lt;code&gt;ngx_http_set_keepalive()&lt;/code&gt; is called, which destroys the current request and waits for the next request on the connection. Otherwise, &lt;code&gt;ngx_http_close_request()&lt;/code&gt; destroys both the request and the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d218876aa61f04d6ce9c96b8580c2929b5ba0e42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_http_finalize_request()&lt;/code&gt; is usually called when the request has generated all the output or produced an error. In the latter case an appropriate error page is looked up and used as the response. If the response is not completely sent to the client by this point, an HTTP writer &lt;code&gt;ngx_http_writer()&lt;/code&gt; is activated to finish sending outstanding data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="633f1a61133ed9aa856a7073cf5876c8edd149f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_http_get_module_ctx(r, module)&lt;/code&gt; &amp;mdash; Returns the &lt;code&gt;module&lt;/code&gt;'s context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a2edb727da509993dee04227771a2d6b86c9b71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_http_init_connection()&lt;/code&gt; performs early initialization of the HTTP connection. At this stage an &lt;code&gt;ngx_http_connection_t&lt;/code&gt; object is created for the connection and its reference is stored in the connection's &lt;code&gt;data&lt;/code&gt; field. Later it will be replaced by an HTTP request object. A PROXY protocol parser and the SSL handshake are started at this stage as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acd2d7c540c506f1f3e47305810d3a988730accf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_http_process_request_headers()&lt;/code&gt; read event handler, is set after &lt;code&gt;ngx_http_process_request_line()&lt;/code&gt; to read the client request header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0000a6321c1de290bd25269d775b6e0b8a6776d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_http_process_request_line()&lt;/code&gt; read event handler reads client request line. The handler is set by &lt;code&gt;ngx_http_wait_request_handler()&lt;/code&gt;. The data is read into connection's &lt;code&gt;buffer&lt;/code&gt;. The size of the buffer is initially set by the directive &lt;a href=&quot;../http/ngx_http_core_module#client_header_buffer_size&quot;&gt;client_header_buffer_size&lt;/a&gt;. The entire client header is supposed to fit in the buffer. If the initial size is not sufficient, a bigger buffer is allocated, with the capacity set by the &lt;code&gt;large_client_header_buffers&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a756026f71bc649e4ad79b5e552d955b37ce385" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_http_set_ctx(r, c, module)&lt;/code&gt; &amp;mdash; Sets &lt;code&gt;c&lt;/code&gt; as the &lt;code&gt;module&lt;/code&gt;'s context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5330d2e47fabd9e658e80a9a6ffc2360437f7cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_http_wait_request_handler()&lt;/code&gt; read event handler is called when data is available on the client socket. At this stage an HTTP request object &lt;code&gt;ngx_http_request_t&lt;/code&gt; is created and set to the connection's &lt;code&gt;data&lt;/code&gt; field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d819b7df0dcd12065b6846fa4fc33096e760c57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_localtime(), ngx_libc_localtime()&lt;/code&gt; &amp;mdash; Time expressed relative to the local time zone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8363f1e84d981d72386cac40c3a5618a4fe1974d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_log_debug0(level, log, err, fmt)&lt;/code&gt;, &lt;code&gt;ngx_log_debug1(level, log, err, fmt, arg1)&lt;/code&gt; etc &amp;mdash; Debug logging with up to eight supported formatting arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fba4296cff1b3050d412ca5936c417407a63a04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_log_error(level, log, err, fmt, ...)&lt;/code&gt; &amp;mdash; Error logging</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bedd6abcb44cf8a6eb408826b0e62ef8e3e0e4a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_memalign(alignment, size, log)&lt;/code&gt; &amp;mdash; Allocate aligned memory from system heap. This is a wrapper around &lt;code&gt;posix_memalign()&lt;/code&gt; on those platforms that provide that function. Otherwise implementation falls back to &lt;code&gt;ngx_alloc()&lt;/code&gt; which provides maximum alignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78558df1d7a0cf91732c9e5614588a84d2dc6abc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_memzero()&lt;/code&gt; &amp;mdash; Fills memory with zeroes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc8034127f02ac3a1910d4b97a850f6f60b91b33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_module_deps&lt;/code&gt; &amp;mdash; Whitespace-separated list of the module's dependencies. Usually, it is the list of header files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf54e6186d9a2afd89b0a8c83380f8b01bda264a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_module_incs&lt;/code&gt; &amp;mdash; Include paths required to build the module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="183906f97d4bbe7bec277bf3e021ac42d6ca558b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_module_libs&lt;/code&gt; &amp;mdash; Whitespace-separated list of libraries to link with the module. For example, use &lt;code&gt;ngx_module_libs=-lpthread&lt;/code&gt; to link &lt;code&gt;libpthread&lt;/code&gt; library. The following macros can be used to link against the same libraries as nginx: &lt;code&gt;LIBXSLT&lt;/code&gt;, &lt;code&gt;LIBGD&lt;/code&gt;, &lt;code&gt;GEOIP&lt;/code&gt;, &lt;code&gt;PCRE&lt;/code&gt;, &lt;code&gt;OPENSSL&lt;/code&gt;, &lt;code&gt;MD5&lt;/code&gt;, &lt;code&gt;SHA1&lt;/code&gt;, &lt;code&gt;ZLIB&lt;/code&gt;, and &lt;code&gt;PERL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3854491d25487591cf23a3d82fa558592980bb1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_module_link&lt;/code&gt; &amp;mdash; Variable set by the build system to &lt;code&gt;DYNAMIC&lt;/code&gt; for a dynamic module or &lt;code&gt;ADDON&lt;/code&gt; for a static module and used to determine different actions to perform depending on linking type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a73b5e8bd9c88c572dd23e056e7068526f996119" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_module_name&lt;/code&gt; &amp;mdash; Module names. To build multiple modules from a set of source files, specify a whitespace-separated list of names. The first name indicates the name of the output binary for the dynamic module. The names in the list must match the names used in the source code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb20d6a02254e00ef547d67e5cb990fddd7b9fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_module_order&lt;/code&gt; &amp;mdash; Load order for the module; useful for the &lt;code&gt;HTTP_FILTER&lt;/code&gt; and &lt;code&gt;HTTP_AUX_FILTER&lt;/code&gt; module types. The format for this option is a whitespace-separated list of modules. All modules in the list following the current module's name end up after it in the global list of modules, which sets up the order for modules initialization. For filter modules later initialization means earlier execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="021893a848a8b32a30af0bdc0979011ea93262dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_module_srcs&lt;/code&gt; &amp;mdash; Whitespace-separated list of source files used to compile the module. The &lt;code&gt;$ngx_addon_dir&lt;/code&gt; variable can be used to represent the path to the module directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="677d34d62d642f529fe4cb031c6e90e9fa839355" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_module_type&lt;/code&gt; &amp;mdash; Type of module to build. Possible values are &lt;code&gt;CORE&lt;/code&gt;, &lt;code&gt;HTTP&lt;/code&gt;, &lt;code&gt;HTTP_FILTER&lt;/code&gt;, &lt;code&gt;HTTP_INIT_FILTER&lt;/code&gt;, &lt;code&gt;HTTP_AUX_FILTER&lt;/code&gt;, &lt;code&gt;MAIL&lt;/code&gt;, &lt;code&gt;STREAM&lt;/code&gt;, or &lt;code&gt;MISC&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a85e445a6d96dc7f3a85c96bb2a85e472330db7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_movemem()&lt;/code&gt; &amp;mdash; Does the same as &lt;code&gt;ngx_memmove()&lt;/code&gt;, but returns the final destination address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14f9ce7350d914a30bc557e3d7377e9c8c9028fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_null_string&lt;/code&gt; &amp;mdash; static empty string initializer for the &lt;code&gt;ngx_str_t&lt;/code&gt; type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0509988af539f1529ea048d9b8796541194a87f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_palloc(pool, size)&lt;/code&gt; &amp;mdash; Allocate aligned memory from the specified pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2216dbb1cf0d2cc751a780bdcc30fed433d6ae74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_pcalloc(pool, size)&lt;/code&gt; &amp;mdash; Allocate aligned memory from the specified pool and fill it with zeroes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3e85bf0ca2863afef4712ec4529c1d57255c3aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_pfree(pool, p)&lt;/code&gt; &amp;mdash; Free memory that was previously allocated in the specified pool. Only allocations that result from requests forwarded to the system allocator can be freed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7ed4dc0e847623894919dd3a09ad925aeb79c2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_pnalloc(pool, size)&lt;/code&gt; &amp;mdash; Allocate unaligned memory from the specified pool. Mostly used for allocating strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0290f8ea442b497bf2b29bbedcb0b65c71be2132" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_queue_add(h, n)&lt;/code&gt; &amp;mdash; Add a second queue to the first queue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bafab69563ae50f919a803961e7a3e943199c786" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_queue_data(q, type, link)&lt;/code&gt; &amp;mdash; Get a reference to the beginning of a queue node data structure, considering the queue field offset in it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ce92da5a095cdeddbb8f5e34cb50408535a7da2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_queue_head(h)&lt;/code&gt;, &lt;code&gt;ngx_queue_last(h)&lt;/code&gt; &amp;mdash; Get first or last queue node</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fedaa2f792f829a0709c7159930306db230741a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_queue_insert_head(h, x)&lt;/code&gt;, &lt;code&gt;ngx_queue_insert_tail(h, x)&lt;/code&gt; &amp;mdash; Insert a new node</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dbf0d90becd8d7d17fd8c7f487f30dc02aa8016" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_queue_remove(x)&lt;/code&gt; &amp;mdash; Remove a queue node</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ce58ad7c3060cc5ad78d90a0c0475cfd5ee5978" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_queue_sentinel(h)&lt;/code&gt; - Get a queue sentinel object to end iteration at</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73143c7671b857c0ce087a25f10daab12e9970ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_queue_split(h, q, n)&lt;/code&gt; &amp;mdash; Split a queue at a node, returning the queue tail in a separate queue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87a9d8d1ecbf6b692f60be6776579ea953549f8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_str_null(str)&lt;/code&gt; &amp;mdash; initializes string &lt;code&gt;str&lt;/code&gt; of &lt;code&gt;ngx_str_t *&lt;/code&gt; type with the empty string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1edf7c918cd1aa41357bbf379e5e95ba3feb5b2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_str_set(str, text)&lt;/code&gt; &amp;mdash; initializes string &lt;code&gt;str&lt;/code&gt; of &lt;code&gt;ngx_str_t *&lt;/code&gt; type with the C string literal &lt;code&gt;text&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c6f1c123f51eee54808c23552d79b89dfa93c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_string(text)&lt;/code&gt; &amp;mdash; static initializer for the &lt;code&gt;ngx_str_t&lt;/code&gt; type from the C string literal &lt;code&gt;text&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f79e914582d7278e0f05c37776ca60b53ef47cf3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngx_strlchr()&lt;/code&gt; &amp;mdash; Searches for a character in a string, delimited by two pointers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c31319bf8012af4054a0e284453888fb8d69940b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_cacheable&lt;/code&gt; &amp;mdash; Do not cache result</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf045c603d7c7e25ba8e6a13448998762169746c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nodes_online&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7ca33ac219f56f4e98efd1ad81bb910cd6cb654" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;noreuse&lt;/code&gt; &amp;mdash; Flag that disables reuse of a shared zone from the old cycle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="114796888b57f8527298eb2bc98f9f10bc84a966" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;not_found&lt;/code&gt; &amp;mdash; The variable was not found and thus the &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; fields are irrelevant; this can happen, for example, with variables like &lt;code&gt;$arg_foo&lt;/code&gt; when a corresponding argument was not passed in a request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f85286bb5e7accdd5c964d059665746ef91eb954" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;notify(pc, data, type)&lt;/code&gt; &amp;mdash; Currently unused in the OSS version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f48913191753120d10db1c64c135fcf04c61fc1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open_files&lt;/code&gt; &amp;mdash; List of open file objects of type &lt;code&gt;ngx_open_file_t&lt;/code&gt;, which are created by calling the function &lt;code&gt;ngx_conf_open_file()&lt;/code&gt;. Currently, nginx uses this kind of open files for logging. After reading the configuration, nginx opens all files in the &lt;code&gt;open_files&lt;/code&gt; list and stores each file descriptor in the object's &lt;code&gt;fd&lt;/code&gt; field. The files are opened in append mode and are created if missing. The files in the list are reopened by nginx workers upon receiving the reopen signal (most often &lt;code&gt;USR1&lt;/code&gt;). In this case the descriptor in the &lt;code&gt;fd&lt;/code&gt; field is changed to a new value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8296e246bf486e8423da070dc642104aa48e1b1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;os&lt;/code&gt; &amp;mdash; Platform-specific code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f0278a360a04f910ec81da6c099014e0155abc7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;overflows&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f4157fdfaddd9a2b1b2a72d8fcdb4b7e318df9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parent&lt;/code&gt; &amp;mdash; Pointer to the parent request of a subrequest.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e81ab146095d76e8e598aaa5eddd76d3daa8ab7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parent&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6203d274b5b7d267566e7b38f7597e87d1a48590" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;passes&lt;/code&gt;=&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;passes&lt;/code&gt;=&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="44eecbcb70364ec6baa81531c7fb853d4ded56b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;patchHttpUpstreamServer&lt;/code&gt; (&lt;a href=&quot;#def_nginx_http_upstream_conf_server&quot;&gt;HTTP Upstream Server&lt;/a&gt;, required)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf334d98431d24338f079eb50c66d44920aeae6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;patchStreamUpstreamServer&lt;/code&gt; (&lt;a href=&quot;#def_nginx_stream_upstream_conf_server&quot;&gt;Stream Upstream Server&lt;/a&gt;, required)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f25b3f3e009a89a7afb78587b3f4166eb33f1e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path=&lt;/code&gt;&lt;code&gt;&lt;i&gt;path&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;path=&lt;/code&gt;&lt;code&gt;&lt;i&gt;path&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="88ace986f98ec57b9a1ece322157a088fc20d042" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;paths&lt;/code&gt; &amp;mdash; Array of paths of type &lt;code&gt;ngx_path_t&lt;/code&gt;. Paths are added by calling the function &lt;code&gt;ngx_add_path()&lt;/code&gt; from modules which are going to operate on certain directories. These directories are created by nginx after reading configuration, if missing. Moreover, two handlers can be added for each path:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92ef7392dba61fb2adb825cef9dcf8a811c695b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;peer&lt;/code&gt; &amp;mdash; object that holds generic methods for initializing upstream configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bda15bc5e463ab14ae6f4d9e5814b131061f52b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pending_eof&lt;/code&gt; &amp;mdash; Flag indicating that EOF is pending on the socket, even though there may be some data available before it. The flag is delivered via the &lt;code&gt;EPOLLRDHUP&lt;/code&gt;&lt;code&gt;epoll&lt;/code&gt; event or &lt;code&gt;EV_EOF&lt;/code&gt;&lt;code&gt;kqueue&lt;/code&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="709e3eb678c8861dd75d8283a25305893b4a4f40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;phase_handler&lt;/code&gt; &amp;mdash; Index of current request phase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a30844ce2f5a0d988db985710e1546068cd5605d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pid&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbae8816ca2c5d5e54a05c0fa7fe31697fce327d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;poll&lt;/code&gt; &amp;mdash; standard method. The supporting module is built automatically on platforms that lack more efficient methods. The &lt;code&gt;--with-poll_module&lt;/code&gt; and &lt;code&gt;--without-poll_module&lt;/code&gt; configuration parameters can be used to forcibly enable or disable the build of this module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1380f9b45f7fb2e350193b4a81b40eac52a0bdfc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pool&lt;/code&gt; &amp;mdash; Connection pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ef4cbd6d5ca9319202b13c27bc3152582aba84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pool&lt;/code&gt; &amp;mdash; Cycle pool. Created for each new cycle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3de39e3b66b60d140bf28c1bdcb492ac608100a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pool&lt;/code&gt; &amp;mdash; Request pool. The request object itself is allocated in this pool, which is destroyed when the request is deleted. For allocations that need to be available throughout the client connection's lifetime, use &lt;code&gt;ngx_connection_t&lt;/code&gt;'s pool instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9537e77893195590327ddbc4839579e3968e78f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pop3&lt;/code&gt;: 110, 995</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28ada46889c2ff3d8165cd55c828ecd5d132e41d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;port&lt;/code&gt; and &lt;code&gt;no_port&lt;/code&gt; &amp;mdash; Not used for explicitly defined upstream groups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d6927e11d7edb5ceef924506aaac5e660e72a29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;port&lt;/code&gt;=&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;port&lt;/code&gt;=&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="af4146aa3a60ba47e45b400c97e2e1ec0e4ad2c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pos&lt;/code&gt;, &lt;code&gt;last&lt;/code&gt; &amp;mdash; The boundaries of the memory buffer; normally a subrange of &lt;code&gt;start&lt;/code&gt; .. &lt;code&gt;end&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db039ab373bd74612aca5cfe67de2cf42302e9ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;postHttpUpstreamServer&lt;/code&gt; (&lt;a href=&quot;#def_nginx_http_upstream_conf_server&quot;&gt;HTTP Upstream Server&lt;/a&gt;, required)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f0757f9ff5868d46c41759ce89a592a04b3ce47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;postStreamUpstreamServer&lt;/code&gt; (&lt;a href=&quot;#def_nginx_stream_upstream_conf_server&quot;&gt;Stream Upstream Server&lt;/a&gt;, required)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="086ecbcb88c5ad34ea6abf683d5ca9578a781373" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;post_subrequest&lt;/code&gt; &amp;mdash; Pointer to a handler with the context to be called when a subrequest gets finalized. Unused for main requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883ae687fa24a4783164ea4543e902562cf409b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;posted&lt;/code&gt; &amp;mdash; Flag indicating that the event is posted to a queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb968461f8795d2998c6b8b37374eb8843845608" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;posted_requests&lt;/code&gt; &amp;mdash; List of requests to be started or resumed, which is done by calling the request's &lt;code&gt;write_event_handler&lt;/code&gt;. Normally, this handler holds the request main function, which at first runs request phases and then produces the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="437d64835b277c2d9c917702788d863c7d96da05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;postponed&lt;/code&gt; &amp;mdash; List of output buffers and subrequests, in the order in which they are sent and created. The list is used by the postpone filter to provide consistent request output when parts of it are created by subrequests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10d12deeca49e3577ec290ddea802dbe699e411f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ppid&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fb41b59447980689e9f834668538cda7a833e11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;processing&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe349fdd5087bd34662f1d9dded640edc6dca5ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;proxy_protocol_addr&lt;/code&gt;, &lt;code&gt;proxy_protocol_port&lt;/code&gt; - PROXY protocol client address and port, if the PROXY protocol is enabled for the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c09a0b0fdb8eefa6227ba1f54f4a9ae2d602db6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;proxy_set_header Host $proxy_host;&lt;/code&gt;&lt;code&gt;proxy_set_header Connection close;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="465eb5ea27c66dce3bf8737053423d3efb314dad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;purger&lt;/code&gt;=&lt;code&gt;on&lt;/code&gt;|&lt;code&gt;off&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;purger&lt;/code&gt;=&lt;code&gt;on&lt;/code&gt;|&lt;code&gt;off&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8251df038fb09c6c030e4dc18b0d438cbd383177" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;purger_files&lt;/code&gt;=&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;purger_files&lt;/code&gt;=&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="edd655a297003e53cb295d45ec84ee6d89c6b638" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;purger_sleep&lt;/code&gt;=&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;purger_sleep&lt;/code&gt;=&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d849b4b21cc53ecd6f61cc8cebed5f138167f217" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;purger_threshold&lt;/code&gt;=&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;purger_threshold&lt;/code&gt;=&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c71626c2ca6b34a5d5345d2e7bffef0308823e02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queue&lt;/code&gt; &amp;mdash; Queue node for posting the event to a queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5ba781c555e050af356cf8abe88df91e8525299" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;quit&lt;/code&gt; &amp;mdash; graceful shutdown</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c82f6a8ff46b10cc10e0a92009c8487fb0b3d83c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;quit&lt;/code&gt; &amp;mdash; shut down gracefully</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a29e334866da763c832d73a89dc610cf206ccc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;r+&lt;/code&gt; &amp;mdash; open a file for reading and writing. An exception occurs if the file does not exist</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df814abe6bbad528896ed79dd88f747f1dd7101b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;r&lt;/code&gt; &amp;mdash; open a file for reading. An exception occurs if the file does not exist</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcede86504a8f5b911c9145d740cef8d883ee6a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rcvbuf&lt;/code&gt;=&lt;code&gt;&lt;i&gt;size&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;rcvbuf&lt;/code&gt;=&lt;code&gt;&lt;i&gt;size&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c3a6b46c6d038873894f8acc72cfe727fdd3b616" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;read&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt; &amp;mdash; Read and write events for the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42313f233405b9f11f6d723231ac951fb349003c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;read_event_handler&lt;/code&gt;, &lt;code&gt;write_event_handler&lt;/code&gt; - Read and write event handlers for the request. Normally, both the read and write event handlers for an HTTP connection are set to &lt;code&gt;ngx_http_request_handler()&lt;/code&gt;. This function calls the &lt;code&gt;read_event_handler&lt;/code&gt; and &lt;code&gt;write_event_handler&lt;/code&gt; handlers for the currently active request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3398badbf8fc643f28b2050c36b4da2e1f07ebf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ready&lt;/code&gt; &amp;mdash; Flag indicating that the event has received an I/O notification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da528e1f52f8eea1b282f21eb9838517e4da3a57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;received&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad010347b80e8a2681e423e6584626aa9803ff12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;records_pending&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bd8e1aae51cec049120538015136b30bdb9c4cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;records_total&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="522e4a347dba3c22ae9d0d4d7f0890f16f1c043c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;recv&lt;/code&gt;, &lt;code&gt;send&lt;/code&gt;, &lt;code&gt;recv_chain&lt;/code&gt;, &lt;code&gt;send_chain&lt;/code&gt; &amp;mdash; I/O operations for the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="143999551ec99ade25638c5f732b0463ea32dcab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;recycled&lt;/code&gt; &amp;mdash; Flag indicating that the buffer can be reused and needs to be consumed as soon as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3b65d842d1c585a7e4e6ccbe39246cec1c78fe1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;redirect.js&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;redirect.js&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="f043f20acd5ceb5ce35175eea83a218ed6f2d583" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reload&lt;/code&gt; &amp;mdash; reload configuration, start the new worker process with a new configuration, gracefully shut down old worker processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd22c360f685519b295efb243ee5ab4cbd6ad91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reload&lt;/code&gt; &amp;mdash; reloading the configuration file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ab67a4064c50ae0bab91cbdc0ae6ef1e238c7cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reopen&lt;/code&gt; &amp;mdash; reopen log files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e84f0f0e98d4cd0d2f9f3584e734aaf77d8d1c4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reopen&lt;/code&gt; &amp;mdash; reopening the log files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c5c57f6213c47933bb317faeaf6d90e4d16d9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;req.body&lt;/code&gt; (use &lt;code&gt;req.requestBody&lt;/code&gt; or &lt;code&gt;req.responseBody&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="556454be59f2b2c702418290c2e084425446becb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;req.finish()&lt;/code&gt; (&lt;code&gt;res.finish()&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e8ef34f774aba3aa2d28139b199b8244a21def" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;req.headers&lt;/code&gt; (use &lt;code&gt;req.headersIn&lt;/code&gt; or &lt;code&gt;req.headersOut&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e936e6583c1275bfe06a47a10db7ac41ab2ec224" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;req.headersIn&lt;/code&gt; (&lt;code&gt;req.headers&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a67f18ecac9b595550e8425c77afc029224d9fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;req.headersOut&lt;/code&gt; (&lt;code&gt;res.headers&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd9a68b163707b710d31d62f1dd5c8c1324c954" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;req.parent&lt;/code&gt; (&lt;code&gt;reply.parent&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cef577ad3b179e030e590bebfeb98e90c007040" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;req.requestBody&lt;/code&gt; (&lt;code&gt;req.body&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61638c1e6ee20d98b1703d38dd5c61f28b04c5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;req.responseBody&lt;/code&gt; (&lt;code&gt;reply.body&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ce944bbd63c18163b6500342916e311a11ddcbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;req.return()&lt;/code&gt; (&lt;code&gt;res.return()&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bc6708550d18d09d0f5a6058fe9160c66fced3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;req.send()&lt;/code&gt; (&lt;code&gt;res.send()&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="404fc643babe3dd4de2a6285776180bf9eac1a2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;req.sendHeader()&lt;/code&gt; (&lt;code&gt;res.sendHeader()&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d7025984b56635d5e3d8d33b92a5273d22f0565" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;req.status&lt;/code&gt; (&lt;code&gt;res.status&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd937a2fcf4a278be772f60e35512707caebbe3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reqs&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8141d137fd0afdcb6bcb8de748f957ffa9d79e4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;request_body&lt;/code&gt; &amp;mdash; Client request body object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d603a54a2729847fba4cfc9e5642024606cc64e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;request_body_file_group_access&lt;/code&gt; - Enable group access to the file by replacing the default 0600 access mask with 0660.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecefcd0190db37d4c7d16122066e7f3d7654d27e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;request_body_file_log_level&lt;/code&gt; - Severity level at which to log file errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7de46f9c7d46a6b53b78585a930e1e87feaa1dd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;request_body_in_clean_file&lt;/code&gt; - Unlink the file when the request is finalized. This can be useful when a file was supposed to be moved to another directory but was not moved for some reason.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63360f9f5149c9d891dc8eeeb049691ae8226735" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;request_body_in_file_only&lt;/code&gt; - Always read the body to a file, even if fits in the memory buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7213e116c32a2eba6fe0f20f1e5e44fc1ee89e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;request_body_in_persistent_file&lt;/code&gt; - Do not unlink the file immediately after creation. A file with this flag can be moved to another directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9420c6b61c5cca0b42af82eb60d455288bec934c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;request_body_in_single_buf&lt;/code&gt; - Read the body to a single memory buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a8b362c4d115be42ead3745312904c2e6d1b57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;request_body_no_buffering&lt;/code&gt; - Read the request body without buffering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="216aecb7fd117536c88fe672b02367efe1251b73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;request_id&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f897a022f71573a2cf40d2c62a8f1f16eb64be48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;request_line&lt;/code&gt;, &lt;code&gt;unparsed_uri&lt;/code&gt; &amp;mdash; Request line and URI in the original client request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24151bafc8af1dda32e713b50823ee381fe5a574" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;requests&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4e181722680bee17455e13f7b06c55ef5a1dc69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;require&lt;/code&gt;&lt;code&gt;&lt;i&gt;$variable&lt;/i&gt;&lt;/code&gt;&lt;code&gt;...;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt;&lt;code&gt;&lt;i&gt;$variable&lt;/i&gt;&lt;/code&gt;&lt;code&gt;...;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a28808a3a95e0be8a190d2cda9f1035a7511ecf4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;res.contentLength&lt;/code&gt; (use &lt;a href=&quot;reference#r_headers_out&quot;&gt;&lt;code&gt;req.headersOut&lt;/code&gt;&lt;/a&gt;&lt;code&gt;['Content-Length']&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6517023ea250ee30c9eedb870f66f07fd3362b0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;res.contentType&lt;/code&gt; (use &lt;a href=&quot;reference#r_headers_out&quot;&gt;&lt;code&gt;req.headersOut&lt;/code&gt;&lt;/a&gt;&lt;code&gt;['Content-Type']&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db0cc2550915f1c05e74632d23cc681c0c14f6b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;resize&lt;/code&gt;&lt;code&gt;&lt;i&gt;width&lt;/i&gt;&lt;/code&gt;&lt;code&gt;&lt;i&gt;height&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;resize&lt;/code&gt;&lt;code&gt;&lt;i&gt;width&lt;/i&gt;&lt;/code&gt;&lt;code&gt;&lt;i&gt;height&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a46f06081ffb3703658d2d971826cc5fc74c7b2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;respawned&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d98572c17cedd5e0a766743d92395cfd68c4ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;response_time&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab07d82d73b5ad58ce2c00146b70d6d1058687d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;responses&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0ae19a06a8c303eb94eb0c8f28215da6b83b79b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;responses_written&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="298144d93c48861717b86389a3489a8f8e0ccd3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reusable&lt;/code&gt; &amp;mdash; Flag indicating the connection is in a state that makes it eligible for reuse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c15c61eb332f32cfa61edbd00087eaa0e9866c8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;root_prefix&lt;/code&gt; &amp;mdash; Prefixes the result with the root prefix (the normal nginx installation prefix)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12ebc0bd3c734563a03abd43f57b705b04cc3788" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rotate&lt;/code&gt;&lt;code&gt;90&lt;/code&gt;|&lt;code&gt;180&lt;/code&gt;|&lt;code&gt;270&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;rotate&lt;/code&gt;&lt;code&gt;90&lt;/code&gt;|&lt;code&gt;180&lt;/code&gt;|&lt;code&gt;270&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="397676b3ded4be02927731d63ae19d541d5832a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;route&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e318cfb8f3503339e1279313b7fc9f94a61feeee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;route&lt;/code&gt;=&lt;code&gt;&lt;i&gt;string&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;route&lt;/code&gt;=&lt;code&gt;&lt;i&gt;string&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="14fac16eaeddafc612d079936e02f3598e4c712a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;route=&lt;/code&gt;&lt;code&gt;&lt;i&gt;string&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;route=&lt;/code&gt;&lt;code&gt;&lt;i&gt;string&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="38aa3ea3c91c56a7e270d108069a3df6551e925b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rs+&lt;/code&gt; &amp;mdash; open a file for reading and writing in synchronous mode. Instructs the operating system to bypass the local file system cache</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c741353ce3bf1b5db02dc0c8b65eadeb70969a39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s.buffer&lt;/code&gt; (for reading replaced with data argument of the corresponding callback, for writing use &lt;a href=&quot;reference#s_send&quot;&gt;s.send()&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06acdde56d18b119f6801fe27c3daa126c865e0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s.done&lt;/code&gt;(&lt;code&gt;&lt;i&gt;[code]&lt;/i&gt;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;s.done&lt;/code&gt;(&lt;code&gt;&lt;i&gt;[code]&lt;/i&gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="71f6c27a8d3527449832ee5120624a27dfb9c257" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s.eof&lt;/code&gt; (replaced with  &lt;a href=&quot;reference#s_on_callback_last&quot;&gt;flags.last&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ee093a06ccb3f1b6ac05a751a2dafba069fcd72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s.fromUpstream&lt;/code&gt; (replaced with a callback for a corresponding event).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b94b86320101b43c188fe86f21a9aec29ee4c618" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;select&lt;/code&gt; &amp;mdash; standard method. The supporting module is built automatically on platforms that lack more efficient methods. The &lt;code&gt;--with-select_module&lt;/code&gt; and &lt;code&gt;--without-select_module&lt;/code&gt; configuration parameters can be used to forcibly enable or disable the build of this module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a52fb3fc76907716049f73c6e4f8a86a1d3f71e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;selected&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acb75dc85819e30f72c72c09bfdf2a7d8a1a9188" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;send&lt;/code&gt;&lt;code&gt;&lt;i&gt;string&lt;/i&gt;&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;send&lt;/code&gt;&lt;code&gt;&lt;i&gt;string&lt;/i&gt;&lt;/code&gt;;</target>
        </trans-unit>
        <trans-unit id="ed642c0318e1271a3671a938b08852ad9050f021" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sent&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f01c8531d4cb74ca0959bbcd8367f96a950e692c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;server&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4f61715f4000f5a9bd5fae67f22f16f29a231f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;server&lt;/code&gt;, &lt;code&gt;location&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c653b6dd45e72d92533bb599f10afa530878a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;server&lt;/code&gt;, &lt;code&gt;location&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02f57953cc04f85c5959b589da395fca9daa2aa5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;server=&lt;/code&gt;&lt;code&gt;&lt;i&gt;address&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;server=&lt;/code&gt;&lt;code&gt;&lt;i&gt;address&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5937469ef40d28165c6f7afacd7050e63e76956d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;servers&lt;/code&gt; &amp;mdash; Array of &lt;code&gt;ngx_http_upstream_server_t&lt;/code&gt;, the result of parsing a set of &lt;a href=&quot;../http/ngx_http_upstream_module#server&quot;&gt;server&lt;/a&gt; directives in the &lt;code&gt;upstream&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d7b4f88b0285144a8ee9cdc228bfe1b17a34a5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;service&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c92a21d3c3936a676697a3d50af440d6f7f807fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;service&lt;/code&gt;=&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;service&lt;/code&gt;=&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7363cbe5e24f77a0f7cc925ee469badd70d9a88e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;service=&lt;/code&gt;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;service=&lt;/code&gt;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fd8f33eba73eebb1487c97e97a543c046d7727ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;session_reuses&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd5b85d94b79b8ad3fa86f015fa94e7c67e53264" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_access_slot&lt;/code&gt; &amp;mdash; Converts the supplied arguments to a file permissions mask. For details, see the documentation for the &lt;a href=&quot;../http/ngx_http_proxy_module#proxy_store_access&quot;&gt; proxy_store_access&lt;/a&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db6697b6063d9cc5c4ed65312777e0a4b1366d5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_path_slot&lt;/code&gt; &amp;mdash; Converts the supplied arguments to an &lt;code&gt;ngx_path_t&lt;/code&gt; value and performs all required initializations. For details, see the documentation for the &lt;a href=&quot;../http/ngx_http_proxy_module#proxy_temp_path&quot;&gt; proxy_temp_path&lt;/a&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a461d1cd6652bad3f557b67e9f1dda6390e8f822" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_session(pc, data)&lt;/code&gt; and &lt;code&gt;save_session(pc, data)&lt;/code&gt; &amp;mdash; SSL-specific methods that enable caching sessions to upstream servers. The implementation is provided by the round-robin balancing method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a9c7f8b4cb74f5810755f3f3fea83ba35bddc5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setfib&lt;/code&gt;=&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;setfib&lt;/code&gt;=&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="de70593b15c914b79fc282474dacf172ae3b4156" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setitimer()&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c0be866aa92ab5d7ab477473ca5e5e5cdff1cb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;severity=&lt;/code&gt;&lt;code&gt;&lt;i&gt;string&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;severity=&lt;/code&gt;&lt;code&gt;&lt;i&gt;string&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="425bcee912938b49ac360d813f5eef3380a5707d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shadow&lt;/code&gt; &amp;mdash; Reference to another (&quot;shadow&quot;) buffer related to the current buffer, usually in the sense that the buffer uses data from the shadow. When the buffer is consumed, the shadow buffer is normally also marked as consumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba8cbc71514b638fe2edbed48d258d5d36bddbde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shared_memory&lt;/code&gt; &amp;mdash; List of shared memory zones, each added by calling the &lt;code&gt;ngx_shared_memory_add()&lt;/code&gt; function. Shared zones are mapped to the same address range in all nginx processes and are used to share common data, for example the HTTP cache in-memory tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c656983a7489a13c66fca2d97dc38fee4ab8218" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shm&lt;/code&gt; &amp;mdash; Platform-specific object of type &lt;code&gt;ngx_shm_t&lt;/code&gt;, having at least the following fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e14477337b23c6202de309396b799eb999f3e8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shm_zone&lt;/code&gt; &amp;mdash; Shared memory zone used by this upstream group, if any.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c97c01d48621bf25da6c18717f561ef2589ed2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;single_range&lt;/code&gt; &amp;mdash; Flag indicating that only a single continuous range of output data can be sent to the client. This flag is usually set when sending a stream of data, for example from a proxied server, and the entire response is not available in one buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43dc916fc07248d1ab81eed6ed2d2414f990f774" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; &amp;mdash; Shared memory size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0119886c7ef3dc2af92588cf1358dc182fd2acfa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="042cc748589c1b6672db995e927409a1c23b1f4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slabZoneName&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23e390ad7cc267f2bcd78092e184974c37e4b8e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slow_start&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc8e8f7270aeb4e1c8c13b1d9b1421e934f43705" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slow_start&lt;/code&gt;=&lt;code&gt;&lt;i&gt;time&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;slow_start&lt;/code&gt;=&lt;code&gt;&lt;i&gt;time&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3157e6558ba5b407393ee2875b6400fa88569abb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slow_start=&lt;/code&gt;&lt;code&gt;&lt;i&gt;time&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;slow_start=&lt;/code&gt;&lt;code&gt;&lt;i&gt;time&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3d387b085a86d9ebd2e673374e8ab0f5dc984c44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;smtp&lt;/code&gt;: 25, 587, 465</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e3c1f20a45313a6f7041b06576dfc569f75513" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sndbuf&lt;/code&gt;=&lt;code&gt;&lt;i&gt;size&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;sndbuf&lt;/code&gt;=&lt;code&gt;&lt;i&gt;size&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="244cdd15689ea110fb3e100515fab29615c82745" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;so_keepalive&lt;/code&gt;=&lt;code&gt;on&lt;/code&gt;|&lt;code&gt;off&lt;/code&gt;|[&lt;code&gt;&lt;i&gt;keepidle&lt;/i&gt;&lt;/code&gt;]:[&lt;code&gt;&lt;i&gt;keepintvl&lt;/i&gt;&lt;/code&gt;]:[&lt;code&gt;&lt;i&gt;keepcnt&lt;/i&gt;&lt;/code&gt;]</source>
          <target state="translated">&lt;code&gt;so_keepalive&lt;/code&gt;=&lt;code&gt;on&lt;/code&gt;|&lt;code&gt;off&lt;/code&gt;|[&lt;code&gt;&lt;i&gt;keepidle&lt;/i&gt;&lt;/code&gt;]:[&lt;code&gt;&lt;i&gt;keepintvl&lt;/i&gt;&lt;/code&gt;]:[&lt;code&gt;&lt;i&gt;keepcnt&lt;/i&gt;&lt;/code&gt;]</target>
        </trans-unit>
        <trans-unit id="696220f0874dc84e8313d06db93c4a2d1005b9fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sockaddr&lt;/code&gt;, &lt;code&gt;socklen&lt;/code&gt;, &lt;code&gt;addr_text&lt;/code&gt; &amp;mdash; Remote socket address in binary and text forms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bd4ec20a3e88ce16ca24f670d2c475aa8dd3423" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sockaddr&lt;/code&gt;, &lt;code&gt;socklen&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; &amp;mdash; Address of the upstream server to connect to; this is the output parameter of a load-balancing method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e7e9d84c1edeca6d2d5d03ae1228dfd23ebb40f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srv_conf&lt;/code&gt; &amp;mdash; Configuration context of upstream modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6487f45b36a664e7b1a098e148df0d5eb76cfd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ssl&lt;/code&gt; &amp;mdash; SSL context for the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96f059404636ac7d532332d3983b0e8b136f469f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt; &amp;mdash; The boundaries of the memory block allocated for the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="866bccc6f519917c45df12af9c5a5a6443da3558" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start_sec&lt;/code&gt;, &lt;code&gt;start_msec&lt;/code&gt; &amp;mdash; Time point when the request was created, used for tracking request duration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29c4b33c719291855d74e415bf87f1b5090092f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;state&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdae663b7e7a7e511923c4628834c7111ef73816" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;status&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b4fd2f9e4c236318f784829f5faf2751658e48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sticky cookie&lt;/code&gt;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt; [&lt;code&gt;expires=&lt;/code&gt;&lt;code&gt;&lt;i&gt;time&lt;/i&gt;&lt;/code&gt;] [&lt;code&gt;domain=&lt;/code&gt;&lt;code&gt;&lt;i&gt;domain&lt;/i&gt;&lt;/code&gt;] [&lt;code&gt;path=&lt;/code&gt;&lt;code&gt;&lt;i&gt;path&lt;/i&gt;&lt;/code&gt;];</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="484061429d10ea43dd53e57bfb5f02146bca53a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stop&lt;/code&gt; &amp;mdash; fast shutdown</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eebb18a7fc554152ef56cbb72cac3fa70d130efc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stop&lt;/code&gt; &amp;mdash; shut down quickly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f402c0db5615132b0491d5d4e925c11da9138a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stream&lt;/code&gt; &amp;mdash; Stream modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05456e20cdf60724be5d3f8f09af6663994410b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stream&lt;/code&gt;, &lt;code&gt;server&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df0c631ff027ea17cd9593dedf4db04e5e15a97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;streamKeyvalZoneKeyValue&lt;/code&gt; (&lt;a href=&quot;#def_nginx_stream_keyval_zone&quot;&gt;Stream Keyval Shared Memory Zone&lt;/a&gt;, required)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="874b4f8338ac79add8f9ce29d8e51ba8a0905ae3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;streamKeyvalZoneName&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35fddb73f4086fa9f2d913f09caef644331fa45c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;streamServerZoneName&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71cf63dd919c797778538e346c1d2177487c225c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;streamUpstreamName&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52fcf05edf8d0069c42732b0e7bee9947e3fd411" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;streamUpstreamServerId&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab051121db920b24a72a6918550e9b8326fdf988" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subrequest.js&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;subrequest.js&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="a0ce5ebb0c3e168e6470782bcc6c615c684a0e62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subrequest_ranges&lt;/code&gt; &amp;mdash; Flag indicating that a partial response can be sent while a subrequest is being processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7715cfb33e13afbe99615578efef3457e13f37cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subrequests&lt;/code&gt; &amp;mdash; Current subrequest nesting level. Each subrequest inherits its parent's nesting level, decreased by one. An error is generated if the value reaches zero. The value for the main request is defined by the &lt;code&gt;NGX_HTTP_MAX_SUBREQUESTS&lt;/code&gt; constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50771d2ccbcc4b7cc28fd20f0bca18f98b4ab0b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sync&lt;/code&gt; &amp;mdash; Flag indicating that the buffer carries no data or special signal like &lt;code&gt;flush&lt;/code&gt; or &lt;code&gt;last_buf&lt;/code&gt;. By default nginx considers such buffers an error condition, but this flag tells nginx to skip the error check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad8557d4ac33d4419a72874c6af15ec279347c33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tag&lt;/code&gt; &amp;mdash; Shared zone tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ac5cf55d690ab192694c440b7d056a089074948" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tag&lt;/code&gt; &amp;mdash; Unique value used to distinguish buffers; created by different nginx modules, usually for the purpose of buffer reuse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9962f4a6d1601332e1cafa89dfeb37db77f33518" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tag=&lt;/code&gt;&lt;code&gt;&lt;i&gt;string&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;tag=&lt;/code&gt;&lt;code&gt;&lt;i&gt;string&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4bb690ef91802101a5d7d516302a775e56ab4809" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;temp_file&lt;/code&gt; &amp;mdash; Flag indicating that the buffer is in a temporary file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4fb41e4af53922bbbd30c482e147ede8781a2a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;temporary&lt;/code&gt; &amp;mdash; Flag indicating that the buffer references writable memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7eed2b6d45348b720e65fb837c1ff1203bc507f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;text&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d0cb28aaa846f2ef0ada02fd1e7ae509646a5cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timedout&lt;/code&gt; &amp;mdash; Flag indicating that the event timer has expired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1fee3872c0cc94d5ef01e638bd779d87b2061f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timer&lt;/code&gt; &amp;mdash; Red-black tree node for inserting the event into the timer tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="769ceb921f6ae9e6663532c661cb7873046aae4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timer_create()&lt;/code&gt; if &lt;code&gt;eventport&lt;/code&gt; is used;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb862d8ec82bd971a14d7690c10b64523cb38d11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timer_set&lt;/code&gt; &amp;mdash; Flag indicating that the event timer is set and not yet expired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e4ed060861f2b3caee5f46807adf22f56f4f023" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timestamp&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffa56be1904d6b87c62f95697ad4641a376c380c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;total&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72676cc23b32402da300883380c1900ac48f3ca4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tries&lt;/code&gt; &amp;mdash; Allowed &lt;a href=&quot;../http/ngx_http_proxy_module#proxy_next_upstream_tries&quot;&gt;number&lt;/a&gt; of attempts to connect to an upstream server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3832084e9de72876a74c1f53172011dc18c60e74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;try_files&lt;/code&gt; checks the existence of the PHP file before passing the request to the FastCGI server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b175b002cae40c629ce95fb3cda9a5634c0a648" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unavail&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92499525bdd2dc2a3163772dde59236ba79fb9fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unhealthy&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="802eb91f994d604742071e4dbcf77d7c1edeb1e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;upstream&lt;/code&gt; &amp;mdash; Request upstream object for proxying.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc1286d2ee034797e5c6bea6f71c8598c3f7a71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;upstream=&lt;/code&gt;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;upstream=&lt;/code&gt;&lt;code&gt;&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2664490e5be24317207388abb8eb651bdb624a00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uri&lt;/code&gt;, &lt;code&gt;args&lt;/code&gt;, &lt;code&gt;exten&lt;/code&gt; &amp;mdash; URI, arguments and file extension for the current request. The URI value here might differ from the original URI sent by the client due to normalization. Throughout request processing, these values can change as internal redirects are performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c921c4006e093eb9092632f8a8fa953e250e0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uri&lt;/code&gt;=&lt;code&gt;&lt;i&gt;uri&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;uri&lt;/code&gt;=&lt;code&gt;&lt;i&gt;uri&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0a09500b1f5ab9a94dc0c03be3447498f3c981af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uri_changes&lt;/code&gt; &amp;mdash; Number of URI changes remaining for the request. The total number of times a request can change its URI is limited by the &lt;code&gt;NGX_HTTP_MAX_URI_CHANGES&lt;/code&gt; constant. With each change the value is decremented until it reaches zero, at which time an error is generated. Rewrites and internal redirects to normal or named locations are considered URI changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b560ce2cc07ecbcdf5b503e1adb8f591625c96c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;urldecode.js&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;urldecode.js&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="43d387fc38ab50f9d41d074ec6716b835d2b6592" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;urlencode.js&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;urlencode.js&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="afd255ef3e668632dd9090a51c87e67e066aae27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;used&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd1619cd9625e9b9ef0432f6fef81b0900696a70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;v2&lt;/code&gt; &amp;mdash; HTTP/2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cdf295d5c24f79379ae8b24b18bcd1edd6ccfd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;valid&lt;/code&gt; &amp;mdash; The value is valid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b6f4276cb6b08159dd42a4f54ec5615d82ac50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; &amp;mdash; String to be parsed (input)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a5e10a94d9947c68fb7849233bf0f3bfbaa2167" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;version&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5820175a9ccd2d5d3d43fa4bdd8899fc0a8b7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;w+&lt;/code&gt; &amp;mdash; open a file for reading and writing. If the file does not exist, it will be created. If the file exists, it will be replaced</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a82de966d89f6a1cd8baca69ae8755050c2995f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;w&lt;/code&gt; &amp;mdash; open a file for writing. If the file does not exist, it will be created. If the file exists, it will be replaced</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cabb646a240b475254f238fa07ab4394f1471491" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weight&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19e04529719aac24bc8c8e4e723f8de008ce1ce2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weight&lt;/code&gt;=&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;weight&lt;/code&gt;=&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="69e44f630713fc2777cbb369169542e63c09edc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weight=&lt;/code&gt;&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;weight=&lt;/code&gt;&lt;code&gt;&lt;i&gt;number&lt;/i&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="27e42cba582c6f0b8e39b3608d0176edbb524d1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;write&lt;/code&gt; &amp;mdash; Flag indicating a write event. Absence of the flag indicates a read event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="395be92c6275ebe106ec155a96fe1674b815848d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wx+&lt;/code&gt; &amp;mdash; the same as &lt;code&gt;w+&lt;/code&gt; but fails if the file already exists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bce5cb78d32192c0a9978d0d107ba890ffd2ba4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wx&lt;/code&gt; &amp;mdash; the same as &lt;code&gt;w&lt;/code&gt; but fails if the file already exists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="802f7897405449d7f8f5cff64b8728a2fe58a88c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zero&lt;/code&gt; &amp;mdash; Flag that enables zero-terminating value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb366f00d901ebd2360f0663a40cbb472edc4113" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zombies&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d69bcbf9b16e60167501f673daf73c1498e6b848" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zone&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5362ee17e31df3ef446d5c446b5d5828b1dbe92" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../dev/development_guide#http_subrequests&quot;&gt;subrequest&lt;/a&gt; shares its input headers with the client request. To send headers different from original headers to a proxied server, the &lt;a href=&quot;../http/ngx_http_proxy_module#proxy_set_header&quot;&gt;proxy_set_header&lt;/a&gt; directive can be used. To send a completely new set of headers to a proxied server, the &lt;a href=&quot;../http/ngx_http_proxy_module#proxy_pass_request_headers&quot;&gt;proxy_pass_request_headers&lt;/a&gt; directive can be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06207d42a2611b5646e4e6cc886cf692bb5b5461" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;i&gt;redirect&lt;/i&gt;&lt;/code&gt; can also contain (1.1.11) variables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55fb1ff1f3a2baf39ed58fee97323df181374dcc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;i&gt;replacement&lt;/i&gt;&lt;/code&gt; string can contain variables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d14185e6d8369c16045bcb6c88b203927693b74e" translate="yes" xml:space="preserve">
          <source>A TCP/UDP session from a client is processed in successive steps called &lt;b&gt;phases&lt;/b&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c508417124b9ab6812c3ae5829076c3f0dbcb9f4" translate="yes" xml:space="preserve">
          <source>A Unicode string corresponds to an ECMAScript string which contains Unicode characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="543cc1ad8bf27d152044a26ce84f49a7533c9dd2" translate="yes" xml:space="preserve">
          <source>A body filter handler receives a chain of buffers. The handler is supposed to process the buffers and pass a possibly new chain to the next handler. It's worth noting that the chain links &lt;code&gt;ngx_chain_t&lt;/code&gt; of the incoming chain belong to the caller, and must not be reused or changed. Right after the handler completes, the caller can use its output chain links to keep track of the buffers it has sent. To save the buffer chain or to substitute some buffers before passing to the next filter, a handler needs to allocate its own chain links.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f584149427dc7cc232082615b6dcf2777cd9a6dc" translate="yes" xml:space="preserve">
          <source>A boolean value indicating whether the &amp;ldquo;cache loader&amp;rdquo; process is still loading data from disk into the cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="499d8c75d308fcd476cc2dae18e867b4477ee761" translate="yes" xml:space="preserve">
          <source>A boolean value indicating whether the server is a &lt;a href=&quot;../stream/ngx_stream_upstream_module#backup&quot;&gt;backup&lt;/a&gt; server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="964433cfc6cb42586c8124ba2f74bdd87fc91994" translate="yes" xml:space="preserve">
          <source>A boolean value indicating whether the server is a &lt;a href=&quot;ngx_http_upstream_module#backup&quot;&gt;backup&lt;/a&gt; server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f0ee29bec91db56c084f4c80e13e55555a67981" translate="yes" xml:space="preserve">
          <source>A cached response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the cache can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both cache and a directory holding temporary files are put on the same file system. A directory for temporary files is set based on the &lt;code&gt;use_temp_path&lt;/code&gt; parameter (1.7.10). If this parameter is omitted or set to the value &lt;code&gt;on&lt;/code&gt;, the directory set by the &lt;a href=&quot;#fastcgi_temp_path&quot;&gt;fastcgi_temp_path&lt;/a&gt; directive for the given location will be used. If the value is set to &lt;code&gt;off&lt;/code&gt;, temporary files will be put directly in the cache directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d814864fa97637b0a99957669f33e905ea6ef2b" translate="yes" xml:space="preserve">
          <source>A cached response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the cache can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both cache and a directory holding temporary files are put on the same file system. A directory for temporary files is set based on the &lt;code&gt;use_temp_path&lt;/code&gt; parameter (1.7.10). If this parameter is omitted or set to the value &lt;code&gt;on&lt;/code&gt;, the directory set by the &lt;a href=&quot;#scgi_temp_path&quot;&gt;scgi_temp_path&lt;/a&gt; directive for the given location will be used. If the value is set to &lt;code&gt;off&lt;/code&gt;, temporary files will be put directly in the cache directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="384a785aef7be7df621009c30e9dec4da6aba166" translate="yes" xml:space="preserve">
          <source>A cached response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the cache can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both cache and a directory holding temporary files are put on the same file system. A directory for temporary files is set based on the &lt;code&gt;use_temp_path&lt;/code&gt; parameter (1.7.10). If this parameter is omitted or set to the value &lt;code&gt;on&lt;/code&gt;, the directory set by the &lt;a href=&quot;#uwsgi_temp_path&quot;&gt;uwsgi_temp_path&lt;/a&gt; directive for the given location will be used. If the value is set to &lt;code&gt;off&lt;/code&gt;, temporary files will be put directly in the cache directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea2f011fcb2926c3510a37635c8cb933ceb9e66" translate="yes" xml:space="preserve">
          <source>A cached response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the cache can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both cache and a directory holding temporary files are put on the same file system. The directory for temporary files is set based on the &lt;code&gt;use_temp_path&lt;/code&gt; parameter (1.7.10). If this parameter is omitted or set to the value &lt;code&gt;on&lt;/code&gt;, the directory set by the &lt;a href=&quot;#proxy_temp_path&quot;&gt;proxy_temp_path&lt;/a&gt; directive for the given location will be used. If the value is set to &lt;code&gt;off&lt;/code&gt;, temporary files will be put directly in the cache directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56fbfedbfbe1ca3541d59dc27f6d684514fe96f6" translate="yes" xml:space="preserve">
          <source>A charset can be defined with a variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8971fdc60c901ccb2c52ecb1f7fd78fb7d88e3e0" translate="yes" xml:space="preserve">
          <source>A client IP address serves as a key. Note that instead of &lt;code&gt;$remote_addr&lt;/code&gt;, the &lt;code&gt;$binary_remote_addr&lt;/code&gt; variable is used here. The &lt;code&gt;$binary_remote_addr&lt;/code&gt; variable&amp;rsquo;s size is always 4 bytes for IPv4 addresses or 16 bytes for IPv6 addresses. The stored state always occupies 64 bytes on 32-bit platforms and 128 bytes on 64-bit platforms. One megabyte zone can keep about 16 thousand 64-byte states or about 8 thousand 128-byte states.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8aeedda3aba0cb0459857b83ddf44fc021d8e8d" translate="yes" xml:space="preserve">
          <source>A collection of &quot;&lt;a href=&quot;#def_nginx_slab_zone_slot&quot;&gt;Memory Slot&lt;/a&gt;&quot; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b27729d52b59ab16b8e8db2af07dbb4fbb2a09fc" translate="yes" xml:space="preserve">
          <source>A collection of &quot;&lt;a href=&quot;#def_nginx_stream_zone_sync_zone&quot;&gt;Sync Zone&lt;/a&gt;&quot; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e83f097ccca5e6034e5eca684c4b6b23e99d2c66" translate="yes" xml:space="preserve">
          <source>A common issue arises when configuring two or more HTTPS servers listening on a single IP address:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dcd8279af3223ee9d368c4c0e829a9ecee33112" translate="yes" xml:space="preserve">
          <source>A common mistake is to use libraries that are blocking internally. Most libraries out there are synchronous and blocking by nature. In other words, they perform one operation at a time and waste time waiting for response from other peer. As a result, when a request is processed with such library, whole nginx worker is blocked, thus destroying performance. Use only libraries that provide asynchronous interface and don't block whole process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="516cf9de3724b749977b6001244ea383111374f5" translate="yes" xml:space="preserve">
          <source>A complex value, despite its name, provides an easy way to evaluate expressions which can contain text, variables, and their combination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05dfc9a56966f2db7319856e1f46c63b12b1282f" translate="yes" xml:space="preserve">
          <source>A condition may be any of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96d68f57945b98e4d171c22b32d22a89c9f60777" translate="yes" xml:space="preserve">
          <source>A configuration command consists of parameters passed as request arguments, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1b8fbecfd6c65ebf52fdbadfb2bb639469f3dda" translate="yes" xml:space="preserve">
          <source>A cycle is created by the &lt;code&gt;ngx_init_cycle()&lt;/code&gt; function, which takes the previous cycle as its argument. The function locates the previous cycle's configuration file and inherits as many resources as possible from the previous cycle. A placeholder cycle called &quot;init cycle&quot; is created as nginx start, then is replaced by an actual cycle built from configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a41c0018fd7488d9a1a2f8996e2dfde8cb59957" translate="yes" xml:space="preserve">
          <source>A cycle object stores the nginx runtime context created from a specific configuration. Its type is &lt;code&gt;ngx_cycle_t&lt;/code&gt;. The current cycle is referenced by the &lt;code&gt;ngx_cycle&lt;/code&gt; global variable and inherited by nginx workers as they start. Each time the nginx configuration is reloaded, a new cycle is created from the new nginx configuration; the old cycle is usually deleted after the new one is successfully created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e584b83f70c82a13137937857f7d231ae661ce6" translate="yes" xml:space="preserve">
          <source>A debugging log</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9feb7df9dc0ebb8be24f4a75fcbaa85f0dd15662" translate="yes" xml:space="preserve">
          <source>A default server name value is an empty name &amp;ldquo;&amp;rdquo; since 0.8.48.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81756a27dc229086de52f0686f957b47079ed28c" translate="yes" xml:space="preserve">
          <source>A directive's context defines where it may appear in the configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8469c9e1586dedb42f0c3864f6d68253b78bb9e" translate="yes" xml:space="preserve">
          <source>A dot at the beginning of the &lt;code&gt;&lt;i&gt;domain&lt;/i&gt;&lt;/code&gt; and &lt;code&gt;&lt;i&gt;replacement&lt;/i&gt;&lt;/code&gt; strings and the &lt;code&gt;domain&lt;/code&gt; attribute is ignored. Matching is case-insensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f6a08ae6aa73ea9e42a1a29fd67abbf5ca8f1f4" translate="yes" xml:space="preserve">
          <source>A file uploaded with the PUT method is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the persistent store can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both saved files and a directory holding temporary files, set by the &lt;a href=&quot;ngx_http_core_module#client_body_temp_path&quot;&gt;client_body_temp_path&lt;/a&gt; directive, are put on the same file system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b5b62de7b31d8cd93c059101e9aca533ce2b03" translate="yes" xml:space="preserve">
          <source>A fragment URI with the &amp;ldquo;&lt;code&gt;.ts&lt;/code&gt;&amp;rdquo; filename extension. The URI can accept optional arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac855c2a29042756c7719eeafb9d4735f06f6d44" translate="yes" xml:space="preserve">
          <source>A key-value pair is specified in the JSON format. Several key-value pairs can be entered if the HTTP keyval shared memory zone is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6abed77ccc01f13cea172860f2b3119fb1dbba08" translate="yes" xml:space="preserve">
          <source>A key-value pair is specified in the JSON format. Several key-value pairs can be entered if the stream keyval shared memory zone is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8e2147f9841aedd22f9d2d73376931f255161cd" translate="yes" xml:space="preserve">
          <source>A location can either be defined by a prefix string, or by a regular expression. Regular expressions are specified with the preceding &amp;ldquo;&lt;code&gt;~*&lt;/code&gt;&amp;rdquo; modifier (for case-insensitive matching), or the &amp;ldquo;&lt;code&gt;~&lt;/code&gt;&amp;rdquo; modifier (for case-sensitive matching). To find location matching a given request, nginx first checks locations defined using the prefix strings (prefix locations). Among them, the location with the longest matching prefix is selected and remembered. Then regular expressions are checked, in the order of their appearance in the configuration file. The search of regular expressions terminates on the first match, and the corresponding configuration is used. If no match with a regular expression is found then the configuration of the prefix location remembered earlier is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdcada9fa1246818f0b6a98e60870bbef908b6ee" translate="yes" xml:space="preserve">
          <source>A log message is formatted in a buffer of size &lt;code&gt;NGX_MAX_ERROR_STR&lt;/code&gt; (currently, 2048 bytes) on stack. The message is prepended with the severity level, process ID (PID), connection ID (stored in &lt;code&gt;log-&amp;gt;connection&lt;/code&gt;), and the system error text. For non-debug messages &lt;code&gt;log-&amp;gt;handler&lt;/code&gt; is called as well to prepend more specific information to the log message. HTTP module sets &lt;code&gt;ngx_http_log_error()&lt;/code&gt; function as log handler to log client and server addresses, current action (stored in &lt;code&gt;log-&amp;gt;action&lt;/code&gt;), client request line, server name etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a694ff23d648a75a3ff77c9b3cc757e96fae3300" translate="yes" xml:space="preserve">
          <source>A logger instance can be a chain of loggers, linked to each other with the &lt;code&gt;next&lt;/code&gt; field. In this case, each message is written to all loggers in the chain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d071c6034e0076dbf78f76df419ff9c0cccb7f09" translate="yes" xml:space="preserve">
          <source>A loop with an empty body is also indicated by the &amp;ldquo;&lt;code&gt;/* void */&lt;/code&gt;&amp;rdquo; comment which may be put on the same line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5626add380ed216d74d81d38ab631ceebcdc0ac" translate="yes" xml:space="preserve">
          <source>A minute after the start the special &amp;ldquo;cache loader&amp;rdquo; process is activated. It loads information about previously cached data stored on file system into a cache zone. The loading is also done in iterations. During one iteration no more than &lt;code&gt;loader_files&lt;/code&gt; items are loaded (by default, 100). Besides, the duration of one iteration is limited by the &lt;code&gt;loader_threshold&lt;/code&gt; parameter (by default, 200 milliseconds). Between iterations, a pause configured by the &lt;code&gt;loader_sleep&lt;/code&gt; parameter (by default, 50 milliseconds) is made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e152feb3907ca852561bc910c31c90c22da4724" translate="yes" xml:space="preserve">
          <source>A module that implements a load-balancing algorithm must set these methods and initialize private &lt;code&gt;data&lt;/code&gt;. If &lt;code&gt;init_upstream&lt;/code&gt; was not initialized during configuration parsing, &lt;code&gt;ngx_http_upstream_module&lt;/code&gt; sets it to the default &lt;code&gt;ngx_http_upstream_init_round_robin&lt;/code&gt; algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d75e74ab79becba68371017028a96317d1ba7b7c" translate="yes" xml:space="preserve">
          <source>A more complex configuration with SSL enabled and with cluster members defined by DNS:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30bc80e2f636e5754c15b23dc9bb9357db2a4ef1" translate="yes" xml:space="preserve">
          <source>A more generic solution for running several HTTPS servers on a single IP address is &lt;a href=&quot;http://en.wikipedia.org/wiki/Server_Name_Indication&quot;&gt;TLS Server Name Indication extension&lt;/a&gt; (SNI, RFC 6066), which allows a browser to pass a requested server name during the SSL handshake and, therefore, the server will know which certificate it should use for the connection. SNI is currently &lt;a href=&quot;http://en.wikipedia.org/wiki/Server_Name_Indication#Support&quot;&gt;supported&lt;/a&gt; by most modern browsers, though may not be used by some old or special clients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73cd2db384e50af0227cae5f8c801c4ca916baeb" translate="yes" xml:space="preserve">
          <source>A more sophisticated example in which a value of the &amp;ldquo;Connection&amp;rdquo; header field in a request to the proxied server depends on the presence of the &amp;ldquo;Upgrade&amp;rdquo; field in the client request header:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b3ad54eee32df00de2261803fad5d1dd50c55b" translate="yes" xml:space="preserve">
          <source>A named regular expression capture can be used later as a variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1723040a60ab5c66935b2e595148399bb2a2b6b0" translate="yes" xml:space="preserve">
          <source>A new value for the key is specified in the JSON format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c81a4fe5efce3c6e0caec7cca754d3847c2e0a" translate="yes" xml:space="preserve">
          <source>A path to the file is constructed by merely adding a URI to the value of the &lt;code&gt;root&lt;/code&gt; directive. If a URI has to be modified, the &lt;a href=&quot;#alias&quot;&gt;alias&lt;/a&gt; directive should be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="febcfe61ef14feec53de7a40f55310326b6f5fdd" translate="yes" xml:space="preserve">
          <source>A playlist URI with the &amp;ldquo;&lt;code&gt;.m3u8&lt;/code&gt;&amp;rdquo; filename extension. The URI can accept optional arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18b131560abf61e3193cb51e5c8c18521a36f144" translate="yes" xml:space="preserve">
          <source>A pool internally allocates objects in continuous blocks of memory. Once a block is full, a new one is allocated and added to the pool memory block list. When the requested allocation is too large to fit into a block, the request is forwarded to the system allocator and the returned pointer is stored in the pool for further deallocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efbca56d1f7674c547980253bab8c89659626492" translate="yes" xml:space="preserve">
          <source>A redirect to a main site</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1248d896012607ce98f4056a5b879825eafc6328" translate="yes" xml:space="preserve">
          <source>A regular expression should either start from the &amp;ldquo;&lt;code&gt;~&lt;/code&gt;&amp;rdquo; symbol for a case-sensitive matching, or from the &amp;ldquo;&lt;code&gt;~*&lt;/code&gt;&amp;rdquo; symbols (1.0.4) for case-insensitive matching. A regular expression can contain named and positional captures that can later be used in other directives along with the resulting variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd24c952d419c135780515f8f274eb5f54d408ff" translate="yes" xml:space="preserve">
          <source>A regular expression should either start from the &amp;ldquo;&lt;code&gt;~&lt;/code&gt;&amp;rdquo; symbol for a case-sensitive matching, or from the &amp;ldquo;&lt;code&gt;~*&lt;/code&gt;&amp;rdquo; symbols for case-insensitive matching. A regular expression can contain named and positional captures that can later be used in other directives along with the resulting variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcef4b5c7995548f0eed68eb6ac8719f30039d96" translate="yes" xml:space="preserve">
          <source>A request &amp;ldquo;&lt;code&gt;/about.html&lt;/code&gt;&amp;rdquo; is matched by the prefix location &amp;ldquo;&lt;code&gt;/&lt;/code&gt;&amp;rdquo; only, therefore, it is handled in this location. Using the directive &amp;ldquo;&lt;code&gt;root /data/www&lt;/code&gt;&amp;rdquo; the request is mapped to the file &lt;code&gt;/data/www/about.html&lt;/code&gt;, and the file is sent to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d25ceaf1a94610a98bb1ac983e8d3bfd62dccc3" translate="yes" xml:space="preserve">
          <source>A request &amp;ldquo;&lt;code&gt;/index.php&lt;/code&gt;&amp;rdquo; is also matched by the prefix location &amp;ldquo;&lt;code&gt;/&lt;/code&gt;&amp;rdquo; first and then by the regular expression &amp;ldquo;&lt;code&gt;\.(php)$&lt;/code&gt;&amp;rdquo;. Therefore, it is handled by the latter location and the request is passed to a FastCGI server listening on localhost:9000. The &lt;a href=&quot;ngx_http_fastcgi_module#fastcgi_param&quot;&gt;fastcgi_param&lt;/a&gt; directive sets the FastCGI parameter &lt;code&gt;SCRIPT_FILENAME&lt;/code&gt; to &amp;ldquo;&lt;code&gt;/data/www/index.php&lt;/code&gt;&amp;rdquo;, and the FastCGI server executes the file. The variable &lt;code&gt;$document_root&lt;/code&gt; is equal to the value of the &lt;a href=&quot;ngx_http_core_module#root&quot;&gt;root&lt;/a&gt; directive and the variable &lt;code&gt;$fastcgi_script_name&lt;/code&gt; is equal to the request URI, i.e. &amp;ldquo;&lt;code&gt;/index.php&lt;/code&gt;&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77126375395effe92e77d7ec26a4b3f07472757d" translate="yes" xml:space="preserve">
          <source>A request &amp;ldquo;&lt;code&gt;/logo.gif&lt;/code&gt;&amp;rdquo; is matched by the prefix location &amp;ldquo;&lt;code&gt;/&lt;/code&gt;&amp;rdquo; first and then by the regular expression &amp;ldquo;&lt;code&gt;\.(gif|jpg|png)$&lt;/code&gt;&amp;rdquo;, therefore, it is handled by the latter location. Using the directive &amp;ldquo;&lt;code&gt;root&amp;nbsp;/data/www&lt;/code&gt;&amp;rdquo; the request is mapped to the file &lt;code&gt;/data/www/logo.gif&lt;/code&gt;, and the file is sent to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="779b57fb460e550250033fd95c8978db08e50ba2" translate="yes" xml:space="preserve">
          <source>A request URI is passed to the server as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcd3936b7c10baeb59001b2c0b067f314266cd5b" translate="yes" xml:space="preserve">
          <source>A request is usually posted by the &lt;code&gt;ngx_http_post_request(r, NULL)&lt;/code&gt; call. It is always posted to the main request &lt;code&gt;posted_requests&lt;/code&gt; list. The function &lt;code&gt;ngx_http_run_posted_requests(c)&lt;/code&gt; runs all requests that are posted in the main request of the passed connection's active request. All event handlers call &lt;code&gt;ngx_http_run_posted_requests&lt;/code&gt;, which can lead to new posted requests. Normally, it is called after invoking a request's read or write handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6fbafa0faadabda1278f2b0e1f26a4e6d806d1" translate="yes" xml:space="preserve">
          <source>A request of &amp;ldquo;&lt;code&gt;/p/5e814704a28d9bc1914ff19fa0c4a00a/link&lt;/code&gt;&amp;rdquo; will be internally redirected to &amp;ldquo;&lt;code&gt;/secure/link&lt;/code&gt;&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e4cbefc02dc259c4424a01272eebfab579ebe20" translate="yes" xml:space="preserve">
          <source>A request that comes from a client not yet bound to a particular server is passed to the server selected by the configured balancing method. Further requests with this cookie will be passed to the designated server. If the designated server cannot process a request, the new server is selected as if the client has not been bound yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c4115dfa82d9b8196bd59d2db74b897e695985" translate="yes" xml:space="preserve">
          <source>A server name may be omitted in the &lt;code&gt;&lt;i&gt;replacement&lt;/i&gt;&lt;/code&gt; string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8089628b0a0d2414a6b1412c76809758ea6cbe70" translate="yes" xml:space="preserve">
          <source>A session is considered active for as long as the time elapsed since the last request in the session does not exceed the specified &lt;code&gt;timeout&lt;/code&gt; (by default, 30 seconds). Once a session is no longer active, it is written to the log.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfa589340a654e77085b2b42b04ce5416dda3384" translate="yes" xml:space="preserve">
          <source>A signal may also be sent to nginx processes with the help of Unix tools such as the &lt;code&gt;kill&lt;/code&gt; utility. In this case a signal is sent directly to a process with a given process ID. The process ID of the nginx master process is written, by default, to the &lt;code&gt;nginx.pid&lt;/code&gt; in the directory &lt;code&gt;/usr/local/nginx/logs&lt;/code&gt; or &lt;code&gt;/var/run&lt;/code&gt;. For example, if the master process ID is 1628, to send the QUIT signal resulting in nginx&amp;rsquo;s graceful shutdown, execute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45d6cc252cf4f3d69a5beb280326cd67fd6d70aa" translate="yes" xml:space="preserve">
          <source>A similar pseudo-streaming support for FLV files is provided by the &lt;a href=&quot;ngx_http_flv_module&quot;&gt;ngx_http_flv_module&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a95a4e12f9ba05e5c96cd34cd62daabb88ecae" translate="yes" xml:space="preserve">
          <source>A simple PHP site configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45060cfe538ba6d363bdf8c88e624b7c6e9d29ac" translate="yes" xml:space="preserve">
          <source>A single HTTP/HTTPS server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be32392047c31c595a6618573db68e3fafcbd327" translate="yes" xml:space="preserve">
          <source>A single buffer must be large enough to hold any entry of each zone being synchronized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c55ccfd0e45b25969c019eb6e947f90427d602ec" translate="yes" xml:space="preserve">
          <source>A special wildcard name in the form &amp;ldquo;&lt;code&gt;.example.org&lt;/code&gt;&amp;rdquo; can be used to match both the exact name &amp;ldquo;&lt;code&gt;example.org&lt;/code&gt;&amp;rdquo; and the wildcard name &amp;ldquo;&lt;code&gt;*.example.org&lt;/code&gt;&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d55414108d6c204379176b3a79eb914ff9b9334" translate="yes" xml:space="preserve">
          <source>A subrequest can also be created for other purposes than data output. For example, the &lt;a href=&quot;../http/ngx_http_auth_request_module&quot;&gt; ngx_http_auth_request_module&lt;/a&gt; module creates a subrequest at the &lt;code&gt;NGX_HTTP_ACCESS_PHASE&lt;/code&gt; phase. To disable output at this point, the &lt;code&gt;header_only&lt;/code&gt; flag is set on the subrequest. This prevents the subrequest body from being sent to the client. Note that the subrequest's header is never sent to the client. The result of the subrequest can be analyzed in the callback handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a59ecbfb6d8d32e98a555363ffd5902ef2d46eba" translate="yes" xml:space="preserve">
          <source>A subrequest starts in the &lt;code&gt;NGX_HTTP_SERVER_REWRITE_PHASE&lt;/code&gt; phase. It passes through the same subsequent phases as a normal request and is assigned a location based on its own URI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ca4fbdabfbe4de4f5450aa533f2b7951af5558" translate="yes" xml:space="preserve">
          <source>A sufficiently full mapping table is distributed with nginx in the &lt;code&gt;conf/mime.types&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d547d95994cc20fb0d8df16e17e07de16d5e6bb2" translate="yes" xml:space="preserve">
          <source>A typical source file may contain the following sections separated by two empty lines:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8efb24271d7c843b55d8a9445e9c5a948aa89818" translate="yes" xml:space="preserve">
          <source>A value of the &lt;code&gt;$invalid_referer&lt;/code&gt; embedded variable is set by the &lt;a href=&quot;ngx_http_referer_module#valid_referers&quot;&gt;valid_referers&lt;/a&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab14060aaaa988697166397a42ef88aa9e15504a" translate="yes" xml:space="preserve">
          <source>A value of the most specific match is used. For example, for the 127.0.0.1 address the value &amp;ldquo;&lt;code&gt;RU&lt;/code&gt;&amp;rdquo; will be chosen, not &amp;ldquo;&lt;code&gt;US&lt;/code&gt;&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13e00e9c521ee7b41f5034dd15d796189dbe44c3" translate="yes" xml:space="preserve">
          <source>A wildcard name may contain an asterisk only on the name&amp;rsquo;s start or end, and only on a dot border. The names &amp;ldquo;&lt;code&gt;www.*.example.org&lt;/code&gt;&amp;rdquo; and &amp;ldquo;&lt;code&gt;w*.example.org&lt;/code&gt;&amp;rdquo; are invalid. However, these names can be specified using regular expressions, for example, &amp;ldquo;&lt;code&gt;~^www\..+\.example\.org$&lt;/code&gt;&amp;rdquo; and &amp;ldquo;&lt;code&gt;~^w.*\.example\.org$&lt;/code&gt;&amp;rdquo;. An asterisk can match several name parts. The name &amp;ldquo;&lt;code&gt;*.example.org&lt;/code&gt;&amp;rdquo; matches not only &lt;code&gt;www.example.org&lt;/code&gt; but &lt;code&gt;www.sub.example.org&lt;/code&gt; as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb703343c7e219dae54d47b3292499a9e861a34" translate="yes" xml:space="preserve">
          <source>A wildcard server name or regular expression has been supported for use as the first server name since 0.6.25.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa12fae17d2bd406feaca9b19cad21bb05a1f5d" translate="yes" xml:space="preserve">
          <source>API endpoints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2b9b9479ffe5c4b3c61341873f8e967e050035e" translate="yes" xml:space="preserve">
          <source>AUTH LOGIN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85bc8ca5624c6605cdcce670a9941dfacca83246" translate="yes" xml:space="preserve">
          <source>AUTH PLAIN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="193d05fc74136be4f249f8d4cdd67b65780e8555" translate="yes" xml:space="preserve">
          <source>AUTH=LOGIN</source>
          <target state="translated">AUTH=LOGIN</target>
        </trans-unit>
        <trans-unit id="5bbbe7d3851861ae074e3df8ec9bf5e77bec7abd" translate="yes" xml:space="preserve">
          <source>AUTH=PLAIN</source>
          <target state="translated">AUTH=PLAIN</target>
        </trans-unit>
        <trans-unit id="3bcde6ccd7bbb434367afe6307ba6d69bc301893" translate="yes" xml:space="preserve">
          <source>Access can also be limited by &lt;a href=&quot;ngx_http_access_module&quot;&gt;address&lt;/a&gt;, by the &lt;a href=&quot;ngx_http_auth_request_module&quot;&gt;result of subrequest&lt;/a&gt;, or by &lt;a href=&quot;ngx_http_auth_jwt_module&quot;&gt;JWT&lt;/a&gt;. Simultaneous limitation of access by address and by password is controlled by the &lt;a href=&quot;ngx_http_core_module#satisfy&quot;&gt;satisfy&lt;/a&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641521cbf5e819040e1828d514a3ae3f31a8eeab" translate="yes" xml:space="preserve">
          <source>Access can also be limited by &lt;a href=&quot;ngx_http_auth_basic_module&quot;&gt;password&lt;/a&gt;, by the &lt;a href=&quot;ngx_http_auth_request_module&quot;&gt;result of subrequest&lt;/a&gt;, or by &lt;a href=&quot;ngx_http_auth_jwt_module&quot;&gt;JWT&lt;/a&gt;. Simultaneous limitation of access by address and by password is controlled by the &lt;a href=&quot;ngx_http_core_module#satisfy&quot;&gt;satisfy&lt;/a&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e345cca74d3162ab51bae2d753b0f29fa777f9d5" translate="yes" xml:space="preserve">
          <source>Access to a file is denied if any component of the pathname is a symbolic link, and the link and object that the link points to have different owners.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68903f6a808c84245d8772ebac53c14bdc5dba8e" translate="yes" xml:space="preserve">
          <source>Accessing API from a Subrequest</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="351266711b823144422df3933f8c613a08b57fcb" translate="yes" xml:space="preserve">
          <source>Accessing existing variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="367ae828e6a18a4c3601ae584da13a80f501e3c0" translate="yes" xml:space="preserve">
          <source>Activates the cache for connections to upstream servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c1d3d1514343dab6a273dfa0c76c046997efb7" translate="yes" xml:space="preserve">
          <source>Add the following &lt;code&gt;location&lt;/code&gt; block to the &lt;code&gt;server&lt;/code&gt; block:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49bde5c8c2ad9c2db08707633211950fd9916e97" translate="yes" xml:space="preserve">
          <source>Adding new modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8842f994316f4e6941f31416921377f4b7225bc" translate="yes" xml:space="preserve">
          <source>Additional parameters may be as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf6e0bee938ecd2801ffa01a1c096d1a70b3f7ff" translate="yes" xml:space="preserve">
          <source>Additionally, as part of our &lt;a href=&quot;http://nginx.com/products/&quot;&gt;commercial subscription&lt;/a&gt;, starting from version 1.9.13 the signature on error pages and the &amp;ldquo;Server&amp;rdquo; response header field value can be set explicitly using the &lt;code&gt;&lt;i&gt;string&lt;/i&gt;&lt;/code&gt; with variables. An empty string disables the emission of the &amp;ldquo;Server&amp;rdquo; field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0dafd960a5379da8ca76e34998c9efc37b25a0a" translate="yes" xml:space="preserve">
          <source>Additionally, as part of our &lt;a href=&quot;http://nginx.com/products/&quot;&gt;commercial subscription&lt;/a&gt;, such groups allow changing the group membership or modifying the settings of a particular server without the need of restarting nginx. The configuration is accessible via the &lt;a href=&quot;../http/ngx_http_api_module&quot;&gt;API&lt;/a&gt; module (1.13.3).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f67f755d96c9b79b0a97a1a711535b6f9c8b12a5" translate="yes" xml:space="preserve">
          <source>Additionally, as part of our &lt;a href=&quot;http://nginx.com/products/&quot;&gt;commercial subscription&lt;/a&gt;, such groups allow changing the group membership or modifying the settings of a particular server without the need of restarting nginx. The configuration is accessible via the &lt;a href=&quot;ngx_http_api_module&quot;&gt;API&lt;/a&gt; module (1.13.3).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a89457c3ab5ca2a5f6bda38b11621440ac1648c3" translate="yes" xml:space="preserve">
          <source>Additionally, the &lt;code&gt;updating&lt;/code&gt; parameter permits using a stale cached response if it is currently being updated. This allows minimizing the number of accesses to FastCGI servers when updating cached data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5f1c52eae717c218bda5d4becfd21e1595d3b02" translate="yes" xml:space="preserve">
          <source>Additionally, the &lt;code&gt;updating&lt;/code&gt; parameter permits using a stale cached response if it is currently being updated. This allows minimizing the number of accesses to SCGI servers when updating cached data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da92e4cf5b318acd315f51bd419c4d666e048a28" translate="yes" xml:space="preserve">
          <source>Additionally, the &lt;code&gt;updating&lt;/code&gt; parameter permits using a stale cached response if it is currently being updated. This allows minimizing the number of accesses to proxied servers when updating cached data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3868287fc0ae68c52d94979196e7ee9c8952b331" translate="yes" xml:space="preserve">
          <source>Additionally, the &lt;code&gt;updating&lt;/code&gt; parameter permits using a stale cached response if it is currently being updated. This allows minimizing the number of accesses to uwsgi servers when updating cached data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c7c6b2dee050a0c8077b348b9e3f1090d24a0aa" translate="yes" xml:space="preserve">
          <source>Additionally, the following parameters are available as part of our &lt;a href=&quot;http://nginx.com/products/&quot;&gt;commercial subscription&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7024372f1cb7514c3179ce57880c0a914d52f2a7" translate="yes" xml:space="preserve">
          <source>Address of a new server and other optional parameters in the JSON format. The &amp;ldquo;&lt;code&gt;ID&lt;/code&gt;&amp;rdquo;, &amp;ldquo;&lt;code&gt;backup&lt;/code&gt;&amp;rdquo;, and &amp;ldquo;&lt;code&gt;service&lt;/code&gt;&amp;rdquo; parameters cannot be changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a93ed24f953bd3f4d9c0c672a41850c2f023fa0" translate="yes" xml:space="preserve">
          <source>Addresses are specified either as prefixes in CIDR notation (including individual addresses) or as ranges (0.7.23).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dcc6672bb18c309274c72d0f5b3e37f11699b1c" translate="yes" xml:space="preserve">
          <source>Addresses are specified either as prefixes in CIDR notation (including individual addresses) or as ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9ed97e25d5aa0ec23db2f42bcd0d880287f8172" translate="yes" xml:space="preserve">
          <source>Adds a new key-value pair to the HTTP keyval shared memory &lt;a href=&quot;ngx_http_keyval_module#keyval_zone&quot;&gt;zone&lt;/a&gt;. Several key-value pairs can be entered if the HTTP keyval shared memory zone is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a94b5d6e906f2488259ff1a7f91ee6b38fc2c52" translate="yes" xml:space="preserve">
          <source>Adds a new key-value pair to the stream keyval shared memory &lt;a href=&quot;../stream/ngx_stream_keyval_module#keyval_zone&quot;&gt;zone&lt;/a&gt;. Several key-value pairs can be entered if the stream keyval shared memory zone is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e51a3f9c8ea89677f8b35a54f13d2e06021b1972" translate="yes" xml:space="preserve">
          <source>Adds a new server to a stream upstream server group. Server parameters are specified in the JSON format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dcb204e2e0dac92cd0a5020680f05eca157c211" translate="yes" xml:space="preserve">
          <source>Adds a new server to an HTTP upstream server group. Server parameters are specified in the JSON format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40a5960f1871b0e8c6d56344a39a1332f9d48df8" translate="yes" xml:space="preserve">
          <source>Adds a new server to the group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80f7b6bda3b9e7991211011a8ed1e1048dfd6071" translate="yes" xml:space="preserve">
          <source>Adds arguments from a playlist request to URIs of fragments. This may be useful for performing client authorization at the moment of requesting a fragment, or when protecting an HLS stream with the &lt;a href=&quot;ngx_http_secure_link_module&quot;&gt;ngx_http_secure_link_module&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ced353bff3a9352773f7f0af7ad2c4d6d548f7a" translate="yes" xml:space="preserve">
          <source>Adds the &lt;code&gt;HttpOnly&lt;/code&gt; attribute to the cookie (1.7.11).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d7103364e1ea4ee955d0c4a06cd9d6ab5b5e660" translate="yes" xml:space="preserve">
          <source>Adds the &lt;code&gt;Secure&lt;/code&gt; attribute to the cookie (1.7.11).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c1176d8b6da3d98cd8c70a8eeebea1f4d2909d" translate="yes" xml:space="preserve">
          <source>Adds the specified charset to the &amp;ldquo;Content-Type&amp;rdquo; response header field. If this charset is different from the charset specified in the &lt;a href=&quot;#source_charset&quot;&gt;source_charset&lt;/a&gt; directive, a conversion is performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1775bf7688ac536530bafe64a75f56a83a599c9" translate="yes" xml:space="preserve">
          <source>Adds the specified field to a response header provided that the response code equals 200, 201 (1.3.10), 204, 206, 301, 302, 303, 304, 307 (1.1.16, 1.0.13), or 308 (1.13.0). Parameter value can contain variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a4e8d969792cb44ee98bfedbe3b8061a41e6e9f" translate="yes" xml:space="preserve">
          <source>Adds the specified field to the end of a response provided that the response code equals 200, 201, 206, 301, 302, 303, 307, or 308. Parameter value can contain variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f0b8cce1597cae2d51c521b2df7f6fb73029c0c" translate="yes" xml:space="preserve">
          <source>Adds the text returned as a result of processing a given subrequest after the response body. An empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;) as a parameter cancels addition inherited from the previous configuration level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5af50c5971728a671703aeccc277a8130d81326f" translate="yes" xml:space="preserve">
          <source>Adds the text returned as a result of processing a given subrequest before the response body. An empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;) as a parameter cancels addition inherited from the previous configuration level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a4d18bc111e24277fb013513146e8a3a3042de0" translate="yes" xml:space="preserve">
          <source>Admin&amp;rsquo;s Guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="556015d7d02a1ff292d55654d03c511d98014f95" translate="yes" xml:space="preserve">
          <source>After configuration, nginx is compiled and installed using &lt;code&gt;make&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b67f31fbfe9b9d9aaf132384b4acd738610daa0c" translate="yes" xml:space="preserve">
          <source>After some time, only the new worker processes will process requests:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e9563f5afb9299c192b51a2102cde5ec1c26040" translate="yes" xml:space="preserve">
          <source>After successful compilation, the &lt;code&gt;captures&lt;/code&gt; and &lt;code&gt;named_captures&lt;/code&gt; fields in the &lt;code&gt;ngx_regex_compile_t&lt;/code&gt; structure contain the count of all captures and named captures, respectively, found in the regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a007de0303d6bc8346f3404fbfadcda0a6d0a919" translate="yes" xml:space="preserve">
          <source>After that all worker processes (old and new ones) continue to accept requests. If the WINCH signal is sent to the first master process, it will send messages to its worker processes, requesting them to shut down gracefully, and they will start to exit:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8aa9015ab977310fede74bb52bb27d358982444" translate="yes" xml:space="preserve">
          <source>After the configuration is parsed successfully, &lt;code&gt;init_module&lt;/code&gt; handler is called in the context of the master process. The &lt;code&gt;init_module&lt;/code&gt; handler is called in the master process each time a configuration is loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8be486ceffe2e36b91dcd8569d540e00f028a6c" translate="yes" xml:space="preserve">
          <source>All API requests include a supported API &lt;a href=&quot;#api_version&quot;&gt;version&lt;/a&gt; in the URI. Examples of API requests with this configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba837e904bedd27d091e7e129398f412bd3c964" translate="yes" xml:space="preserve">
          <source>All API requests should contain a supported API version in the URI. If the request URI equals the location prefix, the list of supported API versions is returned. The current API version is &amp;ldquo;&lt;code&gt;4&lt;/code&gt;&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a933a82a24c5c833c9f3370511930132799b4044" translate="yes" xml:space="preserve">
          <source>All HTTP variables are evaluated in the context of a given HTTP request, and results are specific to and cached in that HTTP request. All functions that evaluate variables return the &lt;code&gt;ngx_http_variable_value_t&lt;/code&gt; type, representing the variable value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28b1393ec0362657623048fecb50c12e3e0c94ff" translate="yes" xml:space="preserve">
          <source>All cluster nodes should use the same configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="103414ed686702ccbc7a396649b19de10ee55d0d" translate="yes" xml:space="preserve">
          <source>All functions (even static ones) should have prototypes. Prototypes include argument names. Long prototypes are wrapped with a single indentation on continuation lines:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c61b7579704da8b491f9c36d8d2923040537f62" translate="yes" xml:space="preserve">
          <source>All methods accept at least two arguments: a peer connection object &lt;code&gt;pc&lt;/code&gt; and the &lt;code&gt;data&lt;/code&gt; created by &lt;code&gt;ngx_http_upstream_srv_conf_t.peer.init()&lt;/code&gt;. Note that it might differ from &lt;code&gt;pc.data&lt;/code&gt; due to &amp;ldquo;chaining&amp;rdquo; of load-balancing modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46b1cac7c13bd97d5ed1562f7115605bee79de24" translate="yes" xml:space="preserve">
          <source>All nginx processes handle signals as well. Signal handlers only set global variables which are checked after the &lt;code&gt;ngx_process_events_and_timers()&lt;/code&gt; call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b78b654f0eadba42904da5dc39a5183626f22a78" translate="yes" xml:space="preserve">
          <source>Allows access for the specified network or address. If the special value &lt;code&gt;unix:&lt;/code&gt; is specified (1.5.1), allows access for all UNIX-domain sockets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b4242da7676bef677e02b16763f16b05452574e" translate="yes" xml:space="preserve">
          <source>Allows access for the specified network or address. If the special value &lt;code&gt;unix:&lt;/code&gt; is specified, allows access for all UNIX-domain sockets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9054871b573a7b17c6c1459f6fb2302fce09971e" translate="yes" xml:space="preserve">
          <source>Allows access if all (&lt;code&gt;all&lt;/code&gt;) or at least one (&lt;code&gt;any&lt;/code&gt;) of the &lt;a href=&quot;ngx_http_access_module&quot;&gt;ngx_http_access_module&lt;/a&gt;, &lt;a href=&quot;ngx_http_auth_basic_module&quot;&gt;ngx_http_auth_basic_module&lt;/a&gt;, &lt;a href=&quot;ngx_http_auth_request_module&quot;&gt;ngx_http_auth_request_module&lt;/a&gt;, or &lt;a href=&quot;ngx_http_auth_jwt_module&quot;&gt;ngx_http_auth_jwt_module&lt;/a&gt; modules allow access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8847398a2e5e5d425bc8f913468f818f805590ea" translate="yes" xml:space="preserve">
          <source>Allows accurate tuning of per-connection memory allocations. This directive has minimal impact on performance and should not generally be used. By default, the size is equal to 256 bytes on 32-bit platforms and 512 bytes on 64-bit platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bacb73e78d0773ee0a6352e96cc1fb0c946f3b6a" translate="yes" xml:space="preserve">
          <source>Allows accurate tuning of per-request memory allocations. This directive has minimal impact on performance and should not generally be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5047c317a8d27f1414baba2d2e3a046ae0b346c" translate="yes" xml:space="preserve">
          <source>Allows adding text in responses with the specified MIME types, in addition to &amp;ldquo;&lt;code&gt;text/html&lt;/code&gt;&amp;rdquo;. The special value &amp;ldquo;&lt;code&gt;*&lt;/code&gt;&amp;rdquo; matches any MIME type (0.8.29).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bcc08eebaafb11fce29fc2408f65038d2e23dd1" translate="yes" xml:space="preserve">
          <source>Allows disabling chunked transfer encoding in HTTP/1.1. It may come in handy when using a software failing to support chunked encoding despite the standard&amp;rsquo;s requirement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="516c0f9c67d00e5a55074e26809170119a0a22bf" translate="yes" xml:space="preserve">
          <source>Allows overriding the server name used to &lt;a href=&quot;#grpc_ssl_verify&quot;&gt;verify&lt;/a&gt; the certificate of the gRPC SSL server and to be &lt;a href=&quot;#grpc_ssl_server_name&quot;&gt;passed through SNI&lt;/a&gt; when establishing a connection with the gRPC SSL server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67b452c5705eb5d32f185c7ad154102a09f90dd1" translate="yes" xml:space="preserve">
          <source>Allows overriding the server name used to &lt;a href=&quot;#proxy_ssl_verify&quot;&gt;verify&lt;/a&gt; the certificate of the proxied HTTPS server and to be &lt;a href=&quot;#proxy_ssl_server_name&quot;&gt;passed through SNI&lt;/a&gt; when establishing a connection with the proxied HTTPS server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34d915bea2b307be4b64738c7c11fdbb1dbf00aa" translate="yes" xml:space="preserve">
          <source>Allows overriding the server name used to &lt;a href=&quot;#proxy_ssl_verify&quot;&gt;verify&lt;/a&gt; the certificate of the proxied server and to be &lt;a href=&quot;#proxy_ssl_server_name&quot;&gt;passed through SNI&lt;/a&gt; when establishing a connection with the proxied server. The server name can also be specified using variables (1.11.3).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e48725c241562ec8fa2e33609b2df282d5429c54" translate="yes" xml:space="preserve">
          <source>Allows overriding the server name used to &lt;a href=&quot;#uwsgi_ssl_verify&quot;&gt;verify&lt;/a&gt; the certificate of the secured uwsgi server and to be &lt;a href=&quot;#uwsgi_ssl_server_name&quot;&gt;passed through SNI&lt;/a&gt; when establishing a connection with the secured uwsgi server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb179ba1255c1efa0a10781460e17390dec2568" translate="yes" xml:space="preserve">
          <source>Allows overriding the server name used to &lt;a href=&quot;#zone_sync_ssl_verify&quot;&gt;verify&lt;/a&gt; the certificate of a cluster server and to be &lt;a href=&quot;#zone_sync_ssl_server_name&quot;&gt;passed through SNI&lt;/a&gt; when establishing a connection with the cluster server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c4d207531cb3f64d0da6fc4e4ac39d20e130043" translate="yes" xml:space="preserve">
          <source>Allows preserving the &amp;ldquo;Last-Modified&amp;rdquo; header field from the original response during SSI processing to facilitate response caching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf6c26037135bba2fabe52f07ef353316b3ca640" translate="yes" xml:space="preserve">
          <source>Allows preserving the &amp;ldquo;Last-Modified&amp;rdquo; header field from the original response during XSLT transformations to facilitate response caching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50f940da66ea3ef1ddbfb6041e8c6f7e72cc723c" translate="yes" xml:space="preserve">
          <source>Allows preserving the &amp;ldquo;Last-Modified&amp;rdquo; header field from the original response during replacement to facilitate response caching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="036862fab4353b48b562e724cc48a6f011d2f780" translate="yes" xml:space="preserve">
          <source>Allows proxying requests with &lt;a href=&quot;https://en.wikipedia.org/wiki/Integrated_Windows_Authentication&quot;&gt;NTLM Authentication&lt;/a&gt;. The upstream connection is bound to the client connection once the client sends a request with the &amp;ldquo;Authorization&amp;rdquo; header field value starting with &amp;ldquo;&lt;code&gt;Negotiate&lt;/code&gt;&amp;rdquo; or &amp;ldquo;&lt;code&gt;NTLM&lt;/code&gt;&amp;rdquo;. Further client requests will be proxied through the same upstream connection, keeping the authentication context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71c27d822fb6e6d9fb3915717e822aa516eb5c9f" translate="yes" xml:space="preserve">
          <source>Allows redefining or appending fields to the request header &lt;a href=&quot;#grpc_pass_request_headers&quot;&gt;passed&lt;/a&gt; to the gRPC server. The &lt;code&gt;&lt;i&gt;value&lt;/i&gt;&lt;/code&gt; can contain text, variables, and their combinations. These directives are inherited from the previous level if and only if there are no &lt;code&gt;grpc_set_header&lt;/code&gt; directives defined on the current level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47002eceda474a17cff59496f88365d7cc422c4e" translate="yes" xml:space="preserve">
          <source>Allows redefining or appending fields to the request header &lt;a href=&quot;#proxy_pass_request_headers&quot;&gt;passed&lt;/a&gt; to the proxied server. The &lt;code&gt;&lt;i&gt;value&lt;/i&gt;&lt;/code&gt; can contain text, variables, and their combinations. These directives are inherited from the previous level if and only if there are no &lt;code&gt;proxy_set_header&lt;/code&gt; directives defined on the current level. By default, only two fields are redefined:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ce47243b98e5e99b96045256645713bf04974ed" translate="yes" xml:space="preserve">
          <source>Allows redefining the request body passed to the proxied server. The &lt;code&gt;&lt;i&gt;value&lt;/i&gt;&lt;/code&gt; can contain text, variables, and their combination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="366ddbedef59351b58a4bab916c59e0100757075" translate="yes" xml:space="preserve">
          <source>Allows retrieving a &lt;a href=&quot;https://tools.ietf.org/html/rfc7517#section-5&quot;&gt;JSON Web Key Set&lt;/a&gt; file from a subrequest for validating JWT signature and sets the URI where the subrequest will be sent to. To avoid validation overhead, it is recommended to cache the key file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f4bc6b80eef18e54f88b6bbf6ded7689d9453c7" translate="yes" xml:space="preserve">
          <source>Allows setting a delay before sending an SMTP greeting in order to reject clients who fail to wait for the greeting before sending SMTP commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aa21d6c966b17fc41dfde436c5ac3bee1250e30" translate="yes" xml:space="preserve">
          <source>Allows starting a background subrequest to update an expired cache item, while a stale cached response is returned to the client. Note that it is necessary to &lt;a href=&quot;#fastcgi_cache_use_stale_updating&quot;&gt;allow&lt;/a&gt; the usage of a stale cached response when it is being updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1db19eef408afec59823a2681a45f25760d8fe15" translate="yes" xml:space="preserve">
          <source>Allows starting a background subrequest to update an expired cache item, while a stale cached response is returned to the client. Note that it is necessary to &lt;a href=&quot;#proxy_cache_use_stale_updating&quot;&gt;allow&lt;/a&gt; the usage of a stale cached response when it is being updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="777c8bea5bcd65669b2acde15590380242c4c257" translate="yes" xml:space="preserve">
          <source>Allows starting a background subrequest to update an expired cache item, while a stale cached response is returned to the client. Note that it is necessary to &lt;a href=&quot;#scgi_cache_use_stale_updating&quot;&gt;allow&lt;/a&gt; the usage of a stale cached response when it is being updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="624c2725704a9f949db1262724456138fc147a7b" translate="yes" xml:space="preserve">
          <source>Allows starting a background subrequest to update an expired cache item, while a stale cached response is returned to the client. Note that it is necessary to &lt;a href=&quot;#uwsgi_cache_use_stale_updating&quot;&gt;allow&lt;/a&gt; the usage of a stale cached response when it is being updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db8cc827159ef799e95ed51f3519d2ab8ad93581" translate="yes" xml:space="preserve">
          <source>Allows the DELETE method to remove files provided that the number of elements in a request path is not less than the specified number. For example, the directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="160d041821ab8963a3421f618a79053cdcf30502" translate="yes" xml:space="preserve">
          <source>Allows the specified HTTP and WebDAV methods. The parameter &lt;code&gt;off&lt;/code&gt; denies all methods processed by this module. The following methods are supported: &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;MKCOL&lt;/code&gt;, &lt;code&gt;COPY&lt;/code&gt;, and &lt;code&gt;MOVE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddbb8a8c907f7922b8850f128a3016c53d95e989" translate="yes" xml:space="preserve">
          <source>Alphabetical index of directives</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cdb76315a0d7ca0643768ffab25cb96deed1ead" translate="yes" xml:space="preserve">
          <source>Alphabetical index of variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="533469e00cabed886c214bd315c7befba25857b8" translate="yes" xml:space="preserve">
          <source>Also note that if the &lt;a href=&quot;ngx_http_ssl_module#ssl_prefer_server_ciphers&quot;&gt;ssl_prefer_server_ciphers&lt;/a&gt; directive is set to the value &amp;ldquo;&lt;code&gt;on&lt;/code&gt;&amp;rdquo;, the &lt;a href=&quot;ngx_http_ssl_module#ssl_ciphers&quot;&gt;ciphers&lt;/a&gt; should be configured to comply with &lt;a href=&quot;https://tools.ietf.org/html/rfc7540#appendix-A&quot;&gt;RFC 7540, Appendix A&lt;/a&gt; black list and supported by clients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66591ced6271031521d9ddaad82823d36fc96c7d" translate="yes" xml:space="preserve">
          <source>Also, using the &amp;ldquo;&lt;code&gt;=&lt;/code&gt;&amp;rdquo; modifier it is possible to define an exact match of URI and location. If an exact match is found, the search terminates. For example, if a &amp;ldquo;&lt;code&gt;/&lt;/code&gt;&amp;rdquo; request happens frequently, defining &amp;ldquo;&lt;code&gt;location = /&lt;/code&gt;&amp;rdquo; will speed up the processing of these requests, as search terminates right after the first comparison. Such a location cannot obviously contain nested locations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7e855e2c121250664d16ea677b981227ea33b15" translate="yes" xml:space="preserve">
          <source>Alternatively, HTTP/1.0 persistent connections can be used by passing the &amp;ldquo;Connection: Keep-Alive&amp;rdquo; header field to an upstream server, though this method is not recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef794d027b97a0194108577b99875e1e28026de1" translate="yes" xml:space="preserve">
          <source>Alternatively, data may be output as JSONP. The &lt;code&gt;&lt;i&gt;callback&lt;/i&gt;&lt;/code&gt; parameter specifies the name of a callback function. Parameter value can contain variables. If parameter is omitted, or the computed value is an empty string, then &amp;ldquo;&lt;code&gt;ngx_status_jsonp_callback&lt;/code&gt;&amp;rdquo; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f4a700a95632414f4bef7a32520b9fc3102409" translate="yes" xml:space="preserve">
          <source>Alternatively, the &amp;ldquo;&lt;code&gt;grpc://&lt;/code&gt;&amp;rdquo; scheme can be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac552558310bfa19ebdd50890aa141321ed2c7cc" translate="yes" xml:space="preserve">
          <source>Although nginx built with the &lt;a href=&quot;debugging_log&quot;&gt;--with-debug&lt;/a&gt; option already provides a lot of information about request processing, it is sometimes desirable to trace particular parts of code path more thoroughly and at the same time omit the rest of debugging output. DTrace pid provider (available on Solaris, macOS) is a useful tool to explore userland program&amp;rsquo;s internals, since it doesn&amp;rsquo;t require any code changes and it can help with the task. A simple DTrace script to trace and print nginx function calls may look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63257654529c92f051aecd2922143d2498ab5ccd" translate="yes" xml:space="preserve">
          <source>Although several workers can be started, only one of them actually does any work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3331c75b5350dda8dc28815c5216e14eedf53cd1" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../stream/ngx_stream_upstream_module#server&quot;&gt;address&lt;/a&gt; of the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="869da9a6f8c3a2c12c778d0da41ba58c52a62e25" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;ngx_http_upstream_module#server&quot;&gt;address&lt;/a&gt; of the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec4918298aca976bf8923251d6d61d5e2b588dee" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;event&lt;/code&gt; may be one of the following strings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f74a8e8bfbb99fb190e25c32070616acd08e9295" translate="yes" xml:space="preserve">
          <source>An HTTP request is always connected to a location via the &lt;code&gt;loc_conf&lt;/code&gt; field of the &lt;code&gt;ngx_http_request_t&lt;/code&gt; structure. This means that at any point the location configuration of any module can be retrieved from the request by calling &lt;code&gt;ngx_http_get_module_loc_conf(r, module)&lt;/code&gt;. Request location can change several times during the request's lifetime. Initially, a default server location of the default server is assigned to a request. If the request switches to a different server (chosen by the HTTP &amp;ldquo;Host&amp;rdquo; header or SSL SNI extension), the request switches to the default location of that server as well. The next change of the location takes place at the &lt;code&gt;NGX_HTTP_FIND_CONFIG_PHASE&lt;/code&gt; request phase. At this phase a location is chosen by request URI among all non-named locations configured for the server. The &lt;a href=&quot;../http/ngx_http_rewrite_module&quot;&gt;ngx_http_rewrite_module&lt;/a&gt; can change the request URI at the &lt;code&gt;NGX_HTTP_REWRITE_PHASE&lt;/code&gt; request phase as a result of the &lt;a href=&quot;../http/ngx_http_rewrite_module#rewrite&quot;&gt;rewrite&lt;/a&gt; directive and send the request back to the &lt;code&gt;NGX_HTTP_FIND_CONFIG_PHASE&lt;/code&gt; phase for selection of a new location based on the new URI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb5b0edae65392e9bf5c371799bf1d6b73f30bc9" translate="yes" xml:space="preserve">
          <source>An HTTP request is finalized by calling the function &lt;code&gt;ngx_http_finalize_request(r, rc)&lt;/code&gt;. It is usually finalized by the content handler after all output buffers are sent to the filter chain. At this point all of the output might not be sent to the client, with some of it remaining buffered somewhere along the filter chain. If it is, the &lt;code&gt;ngx_http_finalize_request(r, rc)&lt;/code&gt; function automatically installs a special handler &lt;code&gt;ngx_http_writer(r)&lt;/code&gt; to finish sending the output. A request is also finalized in case of an error or if a standard HTTP response code needs to be returned to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71bf11fa5f43cf5ec58216484b9510e7752a286c" translate="yes" xml:space="preserve">
          <source>An SSI command calling Perl has the following format:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68f7d0e91e25b5c06cb85df60645f92d8a31a913" translate="yes" xml:space="preserve">
          <source>An SSL certificate with several names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13d81ace90a6ff3ba27f9be533122037f4aaa813" translate="yes" xml:space="preserve">
          <source>An address can be specified as a domain name or IP address, and an optional port (1.3.1, 1.2.2). If port is not specified, the port 53 is used. Name servers are queried in a round-robin fashion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eef99048bea71da2110e3ae56f76aaa14312955" translate="yes" xml:space="preserve">
          <source>An address can be specified as a domain name or IP address, and an optional port. If port is not specified, the port 53 is used. Name servers are queried in a round-robin fashion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d46797e8a573c4161e460eeeb582a0b5d65e2e82" translate="yes" xml:space="preserve">
          <source>An array of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0d9093a7586035d3cec480f39e3326f8f3f78c3" translate="yes" xml:space="preserve">
          <source>An empty server name &amp;ldquo;&amp;rdquo; has been supported since 0.7.12.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5f92902d92887125181a0ae653de6e49b6b90e8" translate="yes" xml:space="preserve">
          <source>An endless loop looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db089d1102783de3553a4c9ff9740a228e2644b0" translate="yes" xml:space="preserve">
          <source>An event can be posted which means that its handler will be called at some point later within the current event loop iteration. Posting events is a good practice for simplifying code and escaping stack overflows. Posted events are held in a post queue. The &lt;code&gt;ngx_post_event(ev, q)&lt;/code&gt; mscro posts the event &lt;code&gt;ev&lt;/code&gt; to the post queue &lt;code&gt;q&lt;/code&gt;. The &lt;code&gt;ngx_delete_posted_event(ev)&lt;/code&gt; macro deletes the event &lt;code&gt;ev&lt;/code&gt; from the queue it's currently posted in. Normally, events are posted to the &lt;code&gt;ngx_posted_events&lt;/code&gt; queue, which is processed late in the event loop &amp;mdash; after all I/O and timer events are already handled. The function &lt;code&gt;ngx_event_process_posted()&lt;/code&gt; is called to process an event queue. It calls event handlers until the queue is not empty. This means that a posted event handler can post more events to be processed within the current event loop iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ae795de37f2fe7185130c2bc498640de9cecdc4" translate="yes" xml:space="preserve">
          <source>An event can be set to send a notification when a timeout expires. The timer used by events counts milliseconds since some unspecified point in the past truncated to &lt;code&gt;ngx_msec_t&lt;/code&gt; type. Its current value can be obtained from the &lt;code&gt;ngx_current_msec&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="590da34657dae932bcb05d658b103f0c09c93905" translate="yes" xml:space="preserve">
          <source>An example of using buffers and chains:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f481ad49809e7c27b79d2e6d830283b22c04c1f7" translate="yes" xml:space="preserve">
          <source>An example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e47f44be9b6ddce458d27c739eb7da1830d6a8" translate="yes" xml:space="preserve">
          <source>An important web server task is serving out files (such as images or static HTML pages). You will implement an example where, depending on the request, files will be served from different local directories: &lt;code&gt;/data/www&lt;/code&gt; (which may contain HTML files) and &lt;code&gt;/data/images&lt;/code&gt; (containing images). This will require editing of the configuration file and setting up of a &lt;a href=&quot;http/ngx_http_core_module#server&quot;&gt;server&lt;/a&gt; block inside the &lt;a href=&quot;http/ngx_http_core_module#http&quot;&gt;http&lt;/a&gt; block with two &lt;a href=&quot;http/ngx_http_core_module#location&quot;&gt;location&lt;/a&gt; blocks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3289a755ed812067306315a4f69b1bd49d280e0" translate="yes" xml:space="preserve">
          <source>An nginx connection can transparently encapsulate the SSL layer. In this case the connection's &lt;code&gt;ssl&lt;/code&gt; field holds a pointer to an &lt;code&gt;ngx_ssl_connection_t&lt;/code&gt; structure, keeping all SSL-related data for the connection, including &lt;code&gt;SSL_CTX&lt;/code&gt; and &lt;code&gt;SSL&lt;/code&gt;. The &lt;code&gt;recv&lt;/code&gt;, &lt;code&gt;send&lt;/code&gt;, &lt;code&gt;recv_chain&lt;/code&gt;, and &lt;code&gt;send_chain&lt;/code&gt; handlers are set to SSL-enabled functions as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90bae503b5e53714ce5b75e68d88de3e5b7fd1d4" translate="yes" xml:space="preserve">
          <source>An optional &lt;code&gt;&lt;i&gt;flag&lt;/i&gt;&lt;/code&gt; parameter can be one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19760fd3795175c651f5749612b8aab21a157c7e" translate="yes" xml:space="preserve">
          <source>An unchanged &amp;ldquo;Host&amp;rdquo; request header field can be passed like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4d306f7ff3eb4c110fc2196664636fa835a4ef3" translate="yes" xml:space="preserve">
          <source>And here,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98ae12113a5c6acc7f37f9f99b17e203140fbe81" translate="yes" xml:space="preserve">
          <source>Another example. Instead of the &amp;ldquo;upside-down&amp;rdquo; logic &amp;ldquo;all that is not &lt;code&gt;example.com&lt;/code&gt; and is not &lt;code&gt;www.example.com&lt;/code&gt;&amp;rdquo;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc36833a08d7c6d807b9a5101796c5d2829efa58" translate="yes" xml:space="preserve">
          <source>Another load balancing discipline is least-connected. Least-connected allows controlling the load on application instances more fairly in a situation when some of the requests take longer to complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e8d38711e3c0d9461a106cf28c991d776dd848" translate="yes" xml:space="preserve">
          <source>Another way is to use a certificate with a wildcard name, for example, &lt;code&gt;*.example.org&lt;/code&gt;. A wildcard certificate secures all subdomains of the specified domain, but only on one level. This certificate matches &lt;code&gt;www.example.org&lt;/code&gt;, but does not match &lt;code&gt;example.org&lt;/code&gt; and &lt;code&gt;www.sub.example.org&lt;/code&gt;. These two methods can also be combined. A certificate may contain exact and wildcard names in the SubjectAltName field, for example, &lt;code&gt;example.org&lt;/code&gt; and &lt;code&gt;*.example.org&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd019327f72ded8b139ab841785b47cd5bbe770a" translate="yes" xml:space="preserve">
          <source>Any other value returned by the phase handler is treated as a request finalization code, in particular, an HTTP response code. The request is finalized with the code provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="606714468f156bca9fc95fb8e9adffe683916ab4" translate="yes" xml:space="preserve">
          <source>Apache&amp;rsquo;s .htaccess files, usually translate the following rules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3397c7cd4e68a3963fd78e7062893fde46685828" translate="yes" xml:space="preserve">
          <source>Appends the &amp;ldquo;Auth-SSL-Cert&amp;rdquo; header with the &lt;a href=&quot;ngx_mail_ssl_module#ssl_verify_client&quot;&gt;client&lt;/a&gt; certificate in the PEM format (urlencoded) to requests sent to the authentication server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf92488ca25c02736e9891f027dca7bd37157355" translate="yes" xml:space="preserve">
          <source>Appends the specified header to requests sent to the authentication server. This header can be used as the shared secret to verify that the request comes from nginx. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107004472b7ba4e5e31f3082ee1fb5a1239eec61" translate="yes" xml:space="preserve">
          <source>Array</source>
          <target state="translated">Array</target>
        </trans-unit>
        <trans-unit id="fe71d490e66fef4731445286dcd615993104ee74" translate="yes" xml:space="preserve">
          <source>As a last resort, it is possible to wrap an expression so that the continuation line ends at position 79:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8ea7a1fc71b33975084507763dd5ff335ea1a1c" translate="yes" xml:space="preserve">
          <source>As already stated, a default server is a property of the listen port, and different default servers may be defined for different ports:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf47a8240897bdc87499a20c9e909d04ee99e196" translate="yes" xml:space="preserve">
          <source>As noted above, hop-by-hop headers including &amp;ldquo;Upgrade&amp;rdquo; and &amp;ldquo;Connection&amp;rdquo; are not passed from a client to proxied server, therefore in order for the proxied server to know about the client&amp;rsquo;s intention to switch a protocol to WebSocket, these headers have to be passed explicitly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b65cae202aeb232c9f15c36d1b425cf06e1c792a" translate="yes" xml:space="preserve">
          <source>As part of &lt;a href=&quot;http://nginx.com/products/&quot;&gt;commercial subscription&lt;/a&gt;, the shared memory zone also stores extended cache &lt;a href=&quot;ngx_http_api_module#http_caches_&quot;&gt;information&lt;/a&gt;, thus, it is required to specify a larger zone size for the same number of keys. For example, one megabyte zone can store about 4 thousand keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b96d256352605ce7a2d39d9722016b07c8e88f97" translate="yes" xml:space="preserve">
          <source>As seen in the example, the &lt;code&gt;ngx_http_foo_create_loc_conf()&lt;/code&gt; function creates a new configuration structure, and &lt;code&gt;ngx_http_foo_merge_loc_conf()&lt;/code&gt; merges a configuration with configuration from a higher level. In fact, server and location configuration do not exist only at the server and location levels, but are also created for all levels above them. Specifically, a server configuration is also created at the main level and location configurations are created at the main, server, and location levels. These configurations make it possible to specify server- and location-specific settings at any level of an nginx configuration file. Eventually configurations are merged down. A number of macros like &lt;code&gt;NGX_CONF_UNSET&lt;/code&gt; and &lt;code&gt;NGX_CONF_UNSET_UINT&lt;/code&gt; are provided for indicating a missing setting and ignoring it while merging. Standard nginx merge macros like &lt;code&gt;ngx_conf_merge_value()&lt;/code&gt; and &lt;code&gt;ngx_conf_merge_uint_value()&lt;/code&gt; provide a convenient way to merge a setting and set the default value if none of the configurations provided an explicit value. For complete list of macros for different types, see &lt;code&gt;src/core/ngx_conf_file.h&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9304fa18c6205a454fec06044e17fbccb0d5e3ab" translate="yes" xml:space="preserve">
          <source>At configuration time, a module willing to use threads has to obtain a reference to a thread pool by calling &lt;code&gt;ngx_thread_pool_add(cf, name)&lt;/code&gt;, which either creates a new thread pool with the given &lt;code&gt;name&lt;/code&gt; or returns a reference to the pool with that name if it already exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7095a54a2294dece5e090a21a91b15aa5679c32c" translate="yes" xml:space="preserve">
          <source>At runtime, a complex value can be calculated using the &lt;code&gt;ngx_http_complex_value()&lt;/code&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a00606bdf3ae7591e54047fa387e405d276cfe8a" translate="yes" xml:space="preserve">
          <source>At the end of processing, the file needs to be removed. To always write the request body to a file, &lt;a href=&quot;#client_body_in_file_only&quot;&gt;client_body_in_file_only&lt;/a&gt; needs to be enabled. When the name of a temporary file is passed in a proxied request or in a request to a FastCGI/uwsgi/SCGI server, passing the request body should be disabled by the &lt;a href=&quot;ngx_http_proxy_module#proxy_pass_request_body&quot;&gt; proxy_pass_request_body off&lt;/a&gt;, &lt;a href=&quot;ngx_http_fastcgi_module#fastcgi_pass_request_body&quot;&gt; fastcgi_pass_request_body off&lt;/a&gt;, &lt;a href=&quot;ngx_http_uwsgi_module#uwsgi_pass_request_body&quot;&gt; uwsgi_pass_request_body off&lt;/a&gt;, or &lt;a href=&quot;ngx_http_scgi_module#scgi_pass_request_body&quot;&gt; scgi_pass_request_body off&lt;/a&gt; directives, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70efaf8bf028fe34bba0a4fcc6f12853cc65bf7f" translate="yes" xml:space="preserve">
          <source>Authentication is not required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f076a25ef77022906534817f128763ebb9bc96e7" translate="yes" xml:space="preserve">
          <source>Avoid using global variables in your modules. Most likely this is an error to have a global variable. Any global data should be tied to a &lt;a href=&quot;#cycle&quot;&gt;configuration cycle&lt;/a&gt; and be allocated from the corresponding &lt;a href=&quot;#pool&quot;&gt;memory pool&lt;/a&gt;. This allows nginx to perform graceful configuration reloads. An attempt to use global variables will likely break this feature, because it will be impossible to have two configurations at the same time and get rid of them. Sometimes global variables are required. In this case, special attention is needed to manage reconfiguration properly. Also, check if libraries used by your code have implicit global state that may be broken on reload.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abb388efd51a64da72047318bf8773cb950984db" translate="yes" xml:space="preserve">
          <source>Bad response:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e29aafdd514be3f5f3a660d64cdf1c71fa86d1b" translate="yes" xml:space="preserve">
          <source>Basic HTTP Example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e13c6ea2d4d73d0f8b2e0bdb11c5cbaedf34d2c2" translate="yes" xml:space="preserve">
          <source>Because the number of connections per worker is limited, nginx provides a way to grab connections that are currently in use. To enable or disable reuse of a connection, call the &lt;code&gt;ngx_reusable_connection(c, reusable)&lt;/code&gt; function. Calling &lt;code&gt;ngx_reusable_connection(c, 1)&lt;/code&gt; sets the &lt;code&gt;reuse&lt;/code&gt; flag in the connection structure and inserts the connection into the &lt;code&gt;reusable_connections_queue&lt;/code&gt; of the cycle. Whenever &lt;code&gt;ngx_get_connection()&lt;/code&gt; finds out there are no available connections in the cycle's &lt;code&gt;free_connections&lt;/code&gt; list, it calls &lt;code&gt;ngx_drain_connections()&lt;/code&gt; to release a specific number of reusable connections. For each such connection, the &lt;code&gt;close&lt;/code&gt; flag is set and its read handler is called which is supposed to free the connection by calling &lt;code&gt;ngx_close_connection(c)&lt;/code&gt; and make it available for reuse. To exit the state when a connection can be reused &lt;code&gt;ngx_reusable_connection(c, 0)&lt;/code&gt; is called. HTTP client connections are an example of reusable connections in nginx; they are marked as reusable until the first request byte is received from the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196042d05964c44120cc35dbe6f5cc32602ff19b" translate="yes" xml:space="preserve">
          <source>Because threads are used in nginx only as a supplementary I/O facility with its own API, &lt;code&gt;init_thread&lt;/code&gt; and &lt;code&gt;exit_thread&lt;/code&gt; handlers are not currently called. There is also no &lt;code&gt;init_master&lt;/code&gt; handler, because it would be unnecessary overhead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="565ee0b7b9af5a5339b9a66f7bae928851929a55" translate="yes" xml:space="preserve">
          <source>Before 0.8.48, the machine&amp;rsquo;s hostname was used by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d768310acb8b35646c8eef6f15c0648d45e1e2c" translate="yes" xml:space="preserve">
          <source>Before 1.7.8, the response could be cached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1321c31f27cfe736dfa74fecdf5ab8f00d838c3" translate="yes" xml:space="preserve">
          <source>Before initializing a hash, you need to know the number of elements it will hold so that nginx can build it optimally. Two parameters that need to be configured are &lt;code&gt;max_size&lt;/code&gt; and &lt;code&gt;bucket_size&lt;/code&gt;, as detailed in a separate &lt;a href=&quot;../hash&quot;&gt;document&lt;/a&gt;. They are usually configurable by the user. Hash initialization settings are stored with the &lt;code&gt;ngx_hash_init_t&lt;/code&gt; type, and the hash itself is &lt;code&gt;ngx_hash_t&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="929b6d8dec5c42220fb1df4dcaa96c2dfe3a0f59" translate="yes" xml:space="preserve">
          <source>Before starting a module, consider the following questions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7deea002172f22390f080621ffcb6c55b7c6349b" translate="yes" xml:space="preserve">
          <source>Before use, a list must be initialized by calling &lt;code&gt;ngx_list_init(list, pool, n, size)&lt;/code&gt; or created by calling &lt;code&gt;ngx_list_create(pool, n, size)&lt;/code&gt;. Both functions take as arguments the size of a single item and a number of items per list part. To add an item to a list, use the &lt;code&gt;ngx_list_push(list)&lt;/code&gt; function. To iterate over the items, directly access the list fields as shown in the example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="913699401a57352699ff3ba0466444d472c92ec5" translate="yes" xml:space="preserve">
          <source>Before version 0.9.0 only a single variable could be specified in the first parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dad0b23f140c749ae15ab9f7bf90155fe215d448" translate="yes" xml:space="preserve">
          <source>Before version 1.0.1, any string starting with &amp;ldquo;&lt;code&gt;0&lt;/code&gt;&amp;rdquo; was considered a false value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6723aea8f026dc2ae5f07ff436988c0fc245862" translate="yes" xml:space="preserve">
          <source>Before version 1.1.12, if &lt;code&gt;proxy_pass&lt;/code&gt; is specified without a URI, the original request URI might be passed instead of the changed URI in some cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc6ae4ddf3f4019862a7555a36fd8ac859d932d2" translate="yes" xml:space="preserve">
          <source>Before version 1.1.7, only a single name server could be configured. Specifying name servers using IPv6 addresses is supported starting from versions 1.3.1 and 1.2.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5e4c6030d86ed64505ae612a51cded96efafce0" translate="yes" xml:space="preserve">
          <source>Before version 1.1.9, tuning of caching time was not possible, and nginx always cached answers for the duration of 5 minutes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db082d1a06074da1ebb2d4b195150f33ff65e371" translate="yes" xml:space="preserve">
          <source>Before version 1.11.3, this directive was available as part of our &lt;a href=&quot;http://nginx.com/products/&quot;&gt;commercial subscription&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c2dec6a3f4ee021f49580aae981ce8165ce5992" translate="yes" xml:space="preserve">
          <source>Before version 1.5.10, &lt;a href=&quot;http://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft2&quot;&gt;draft 2&lt;/a&gt; of SPDY protocol was implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b37c5c2446c1ace503d535246918df2d042a433" translate="yes" xml:space="preserve">
          <source>Before version 1.7.11, pre-loading could be enabled with &lt;code&gt;aio sendfile;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bbf8cc7aa414588598df729b0ce0edf2602e0c8" translate="yes" xml:space="preserve">
          <source>Before version 1.7.2, &lt;code&gt;backup=&lt;/code&gt; was also required to view, modify, or remove existing backup servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3392f02123afa7d47a16dce2d04500cd6dda99d3" translate="yes" xml:space="preserve">
          <source>Before version 1.7.3, responses to authorization subrequests could not be cached (using &lt;a href=&quot;ngx_http_proxy_module#proxy_cache&quot;&gt;proxy_cache&lt;/a&gt;, &lt;a href=&quot;ngx_http_proxy_module#proxy_store&quot;&gt;proxy_store&lt;/a&gt;, etc.).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5ad4e50d220614c4949daa6caeb65105bca2555" translate="yes" xml:space="preserve">
          <source>Before version 1.9.14, buffering of a client request body could not be disabled regardless of &lt;a href=&quot;ngx_http_proxy_module#proxy_request_buffering&quot;&gt;proxy_request_buffering&lt;/a&gt;, &lt;a href=&quot;ngx_http_fastcgi_module#fastcgi_request_buffering&quot;&gt;fastcgi_request_buffering&lt;/a&gt;, &lt;a href=&quot;ngx_http_uwsgi_module#uwsgi_request_buffering&quot;&gt;uwsgi_request_buffering&lt;/a&gt;, and &lt;a href=&quot;ngx_http_scgi_module#scgi_request_buffering&quot;&gt;scgi_request_buffering&lt;/a&gt; directive values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd7ca5a9fe5039f8ef0f11ef44a302a4df1bcdd4" translate="yes" xml:space="preserve">
          <source>Beginner&amp;rsquo;s Guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b841429aea2845bda264f3eeda7cf0915e3252" translate="yes" xml:space="preserve">
          <source>Beginner’s Guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="730d6a2190a1eb33602434dff7a70db1edf86bdb" translate="yes" xml:space="preserve">
          <source>Besides, anyone may request anything in the query string:</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
