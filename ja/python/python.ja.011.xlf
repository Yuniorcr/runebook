<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="python">
    <body>
      <group id="python">
        <trans-unit id="1489759a66ae1aa1d73ef33403aebd13063968d9" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;name&lt;/em&gt; is not &lt;code&gt;None&lt;/code&gt;, it is set as the name of the task using &lt;a href=&quot;#asyncio.Task.set_name&quot;&gt;&lt;code&gt;Task.set_name()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;name&lt;/em&gt;が &lt;code&gt;None&lt;/code&gt; でない場合は、&lt;a href=&quot;#asyncio.Task.set_name&quot;&gt; &lt;code&gt;Task.set_name()&lt;/code&gt; &lt;/a&gt;を使用してタスクの名前として設定されます。</target>
        </trans-unit>
        <trans-unit id="9757d615d57917081da1f9a4bda1c19a2f37a8bd" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;name&lt;/em&gt; is not found, return &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;名前&lt;/em&gt;が見つからない場合は、 &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d1f6781895f736e401572500b4ef19d36ece9f67" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;name&lt;/em&gt; is not provided in the constructor, the name returned by &lt;code&gt;tzname(dt)&lt;/code&gt; is generated from the value of the &lt;code&gt;offset&lt;/code&gt; as follows. If &lt;em&gt;offset&lt;/em&gt; is &lt;code&gt;timedelta(0)&lt;/code&gt;, the name is &amp;ldquo;UTC&amp;rdquo;, otherwise it is a string in the format &lt;code&gt;UTC&amp;plusmn;HH:MM&lt;/code&gt;, where &amp;plusmn; is the sign of &lt;code&gt;offset&lt;/code&gt;, HH and MM are two digits of &lt;code&gt;offset.hours&lt;/code&gt; and &lt;code&gt;offset.minutes&lt;/code&gt; respectively.</source>
          <target state="translated">コンストラクタで&lt;em&gt;名前&lt;/em&gt;が指定されていない場合、 &lt;code&gt;tzname(dt)&lt;/code&gt; によって返される名前は、次のように &lt;code&gt;offset&lt;/code&gt; の値から生成されます。場合は&lt;em&gt;オフセットが&lt;/em&gt;ある &lt;code&gt;timedelta(0)&lt;/code&gt; 名前は「UTC」で、それ以外の場合は、形式の文字列である &lt;code&gt;UTC&amp;plusmn;HH:MM&lt;/code&gt; &amp;plusmn;はの兆候である、 &lt;code&gt;offset&lt;/code&gt; 、HHとMMは2桁です &lt;code&gt;offset.hours&lt;/code&gt; と &lt;code&gt;offset.minutes&lt;/code&gt; それぞれ分。</target>
        </trans-unit>
        <trans-unit id="34baedb9fa444a6c6bcfd5a19fda6da4eff56aaf" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;new&lt;/em&gt; is omitted, then the target is replaced with an &lt;a href=&quot;#unittest.mock.AsyncMock&quot;&gt;&lt;code&gt;AsyncMock&lt;/code&gt;&lt;/a&gt; if the patched object is an async function or a &lt;a href=&quot;#unittest.mock.MagicMock&quot;&gt;&lt;code&gt;MagicMock&lt;/code&gt;&lt;/a&gt; otherwise. If &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; is used as a decorator and &lt;em&gt;new&lt;/em&gt; is omitted, the created mock is passed in as an extra argument to the decorated function. If &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; is used as a context manager the created mock is returned by the context manager.</source>
          <target state="translated">場合は&lt;em&gt;新しいが&lt;/em&gt;省略され、その後、ターゲットは置き換えられ&lt;a href=&quot;#unittest.mock.AsyncMock&quot;&gt; &lt;code&gt;AsyncMock&lt;/code&gt; &lt;/a&gt;パッチを適用したオブジェクトは、非同期関数またはある場合&lt;a href=&quot;#unittest.mock.MagicMock&quot;&gt; &lt;code&gt;MagicMock&lt;/code&gt; &lt;/a&gt;そう。場合は&lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt;デコレータとして使用され、&lt;em&gt;新しいが&lt;/em&gt;省略され、作成されたモックが飾ら関数に追加の引数として渡されます。&lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt;がコンテキストマネージャーとして使用される場合、作成されたモックはコンテキストマネージャーによって返されます。</target>
        </trans-unit>
        <trans-unit id="bdbb8a0ef01210cf36a93be1fc72449e2c9a07dd" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;newindex&lt;/em&gt; is specified, sets the combobox value to the element position &lt;em&gt;newindex&lt;/em&gt;. Otherwise, returns the index of the current value or -1 if the current value is not in the values list.</source>
          <target state="translated">&lt;em&gt;newindex&lt;/em&gt;が指定されている場合、コンボボックスの値を要素の位置&lt;em&gt;newindex&lt;/em&gt;に設定します。それ以外の場合は、現在の値のインデックスを返すか、現在の値が値リストにない場合は-1を返します。</target>
        </trans-unit>
        <trans-unit id="e337316c1e611ca8905f1e941e19e507d1281cae" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;ns&lt;/em&gt; is specified, it must be a 2-tuple of the form &lt;code&gt;(atime_ns, mtime_ns)&lt;/code&gt; where each member is an int expressing nanoseconds.</source>
          <target state="translated">&lt;em&gt;ns&lt;/em&gt;を指定する場合は、 &lt;code&gt;(atime_ns, mtime_ns)&lt;/code&gt; 形式の2タプルである必要があります。各メンバーは、ナノ秒を表すintです。</target>
        </trans-unit>
        <trans-unit id="17680ea1c66682ed7ecb735074a91fe5b504f141" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;numeric_owner&lt;/em&gt; is &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;, the uid and gid numbers from the tarfile are used to set the owner/group for the extracted files. Otherwise, the named values from the tarfile are used.</source>
          <target state="translated">&lt;em&gt;numeric_owner&lt;/em&gt;が&lt;a href=&quot;constants#True&quot;&gt; &lt;code&gt;True&lt;/code&gt; の&lt;/a&gt;場合、tarfileからのuidおよびgid番号を使用して、抽出されたファイルの所有者/グループを設定します。それ以外の場合は、tarfileの名前付きの値が使用されます。</target>
        </trans-unit>
        <trans-unit id="27c4c94e6ce3ccf84f7ed2aea1284d8994324b1c" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;obj&lt;/em&gt; is neither of the above a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">&lt;em&gt;obj&lt;/em&gt;が上記のいずれでもない場合、&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="26791b8e13e2f8fc527c3deabc666fe937e4ae87" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;offset&lt;/em&gt; is given then data is read from that position in &lt;em&gt;buffer&lt;/em&gt;. If &lt;em&gt;size&lt;/em&gt; is given then that many bytes will be read from buffer. Very large buffers (approximately 32 MiB+, though it depends on the OS) may raise a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; exception</source>
          <target state="translated">&lt;em&gt;オフセット&lt;/em&gt;が指定&lt;em&gt;されて&lt;/em&gt;いる場合、データは&lt;em&gt;bufferの&lt;/em&gt;その位置から読み取られます。&lt;em&gt;サイズ&lt;/em&gt;が指定&lt;em&gt;されて&lt;/em&gt;いる場合、その数のバイトがバッファーから読み取られます。非常に大きなバッファー（OSによって異なりますが、約32 MiB +）は&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;例外を発生させる可能性があります</target>
        </trans-unit>
        <trans-unit id="1eb1415e8bf69142526ae3a0d79981219d8743ee" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;onerror&lt;/em&gt; is provided, it must be a callable that accepts three parameters: &lt;em&gt;function&lt;/em&gt;, &lt;em&gt;path&lt;/em&gt;, and &lt;em&gt;excinfo&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;onerrorを指定する&lt;/em&gt;場合は、3つのパラメーター（&lt;em&gt;function&lt;/em&gt;、&lt;em&gt;path&lt;/em&gt;、および&lt;em&gt;excinfo）&lt;/em&gt;を受け入れる呼び出し可能でなければなりません。</target>
        </trans-unit>
        <trans-unit id="7a54a6cff529e67ad9256b50db56cfc700f1a554" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;outcome&lt;/em&gt; is &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, the subtest succeeded. Otherwise, it failed with an exception where &lt;em&gt;outcome&lt;/em&gt; is a tuple of the form returned by &lt;a href=&quot;sys#sys.exc_info&quot;&gt;&lt;code&gt;sys.exc_info()&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;(type, value, traceback)&lt;/code&gt;.</source>
          <target state="translated">場合は&lt;em&gt;結果が&lt;/em&gt;ありません&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;、サブテストは成功しました。それ以外の場合、&lt;em&gt;結果&lt;/em&gt;は&lt;a href=&quot;sys#sys.exc_info&quot;&gt; &lt;code&gt;sys.exc_info()&lt;/code&gt; &lt;/a&gt;によって返される形式のタプルであるという例外で失敗しました： &lt;code&gt;(type, value, traceback)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a3b88cfef8d16d5c39cd9551217cde560b733287" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;pad&lt;/em&gt; is true, the input is padded with &lt;code&gt;b'\0'&lt;/code&gt; so its length is a multiple of 4 bytes before encoding.</source>
          <target state="translated">場合&lt;em&gt;パッドが&lt;/em&gt;真である、入力がで埋められ &lt;code&gt;b'\0'&lt;/code&gt; 、その長さは、符号化前の4バイトの倍数になるように。</target>
        </trans-unit>
        <trans-unit id="21c2c919a75ee69d0dcd72db6a0617293d88b398" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;padded&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, the first line of a multi-line statement will be padded with spaces to match its original position.</source>
          <target state="translated">&lt;em&gt;padded&lt;/em&gt;が &lt;code&gt;True&lt;/code&gt; の場合、複数行ステートメントの最初の行は、元の位置と一致するようにスペースが埋め込まれます。</target>
        </trans-unit>
        <trans-unit id="122ddd43051ad3f6afe1e426367c921264fdf80e" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;params&lt;/em&gt; is specified, iterate its &lt;code&gt;items&lt;/code&gt; method and use the resulting &lt;code&gt;(key, value)&lt;/code&gt; pairs to set additional parameters on the &lt;em&gt;Content-Type&lt;/em&gt; header.</source>
          <target state="translated">&lt;em&gt;params&lt;/em&gt;が指定されている場合、その &lt;code&gt;items&lt;/code&gt; メソッドを反復し、結果の &lt;code&gt;(key, value)&lt;/code&gt; ペアを使用して、&lt;em&gt;Content-Type&lt;/em&gt;ヘッダーに追加のパラメーターを設定します。</target>
        </trans-unit>
        <trans-unit id="d2742098af95f156e52d71eb33134930cc5b2d2b" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;parents&lt;/em&gt; is false (the default), a missing parent raises &lt;a href=&quot;exceptions#FileNotFoundError&quot;&gt;&lt;code&gt;FileNotFoundError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合は&lt;em&gt;親が&lt;/em&gt; false（デフォルト）で、不足している親が提起&lt;a href=&quot;exceptions#FileNotFoundError&quot;&gt; &lt;code&gt;FileNotFoundError&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8c4c366ed6d7e659455c85c50fcab426cfddafe8" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;parents&lt;/em&gt; is true, any missing parents of this path are created as needed; they are created with the default permissions without taking &lt;em&gt;mode&lt;/em&gt; into account (mimicking the POSIX &lt;code&gt;mkdir -p&lt;/code&gt; command).</source>
          <target state="translated">&lt;em&gt;parents&lt;/em&gt;がtrueの場合、このパスの欠落している親は必要に応じて作成されます。これらは、&lt;em&gt;モード&lt;/em&gt;を考慮せずにデフォルトの権限で作成されます（POSIX &lt;code&gt;mkdir -p&lt;/code&gt; コマンドを模倣しています）。</target>
        </trans-unit>
        <trans-unit id="bfb728e63dc4d6becb096af8bffbd3133d9658f2" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;path&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, the temporary directory is created using &lt;a href=&quot;tempfile#tempfile.mkdtemp&quot;&gt;&lt;code&gt;tempfile.mkdtemp()&lt;/code&gt;&lt;/a&gt;. If &lt;em&gt;quiet&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt;, the context manager raises an exception on error. Otherwise, if &lt;em&gt;path&lt;/em&gt; is specified and cannot be created, only a warning is issued.</source>
          <target state="translated">場合は&lt;em&gt;、パスは&lt;/em&gt;ありません &lt;code&gt;None&lt;/code&gt; 、一時ディレクトリを使用して作成され&lt;a href=&quot;tempfile#tempfile.mkdtemp&quot;&gt; &lt;code&gt;tempfile.mkdtemp()&lt;/code&gt; &lt;/a&gt;。場合は&lt;em&gt;、静かで&lt;/em&gt;ある &lt;code&gt;False&lt;/code&gt; を、コンテキストマネージャは、エラー時に例外が発生します。それ以外の場合、&lt;em&gt;パス&lt;/em&gt;が指定されていて作成できない場合は、警告のみが発行されます。</target>
        </trans-unit>
        <trans-unit id="279e8821e221ab83a590df5547bdc8fe83b891ad" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;pathname&lt;/em&gt; is a file, the filename must end with &lt;code&gt;.py&lt;/code&gt;, and just the (corresponding &lt;code&gt;*.pyc&lt;/code&gt;) file is added at the top level (no path information). If &lt;em&gt;pathname&lt;/em&gt; is a file that does not end with &lt;code&gt;.py&lt;/code&gt;, a &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; will be raised. If it is a directory, and the directory is not a package directory, then all the files &lt;code&gt;*.pyc&lt;/code&gt; are added at the top level. If the directory is a package directory, then all &lt;code&gt;*.pyc&lt;/code&gt; are added under the package name as a file path, and if any subdirectories are package directories, all of these are added recursively in sorted order.</source>
          <target state="translated">&lt;em&gt;パス名&lt;/em&gt;がファイルの場合、ファイル&lt;em&gt;名&lt;/em&gt;は &lt;code&gt;.py&lt;/code&gt; で終わる必要があり、（対応する &lt;code&gt;*.pyc&lt;/code&gt; ）ファイルだけが最上位に追加されます（パス情報なし）。&lt;em&gt;パス名&lt;/em&gt;が &lt;code&gt;.py&lt;/code&gt; で終わらないファイルの場合、&lt;a href=&quot;exceptions#RuntimeError&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;/a&gt;が発生します。それがディレクトリであり、ディレクトリがパッケージディレクトリではない場合、すべてのファイル &lt;code&gt;*.pyc&lt;/code&gt; が最上位に追加されます。ディレクトリがパッケージディレクトリの場合は、すべての &lt;code&gt;*.pyc&lt;/code&gt; がパッケージ名の下にファイルパスとして追加され、サブディレクトリがパッケージディレクトリの場合は、これらすべてがソートされた順序で再帰的に追加されます。</target>
        </trans-unit>
        <trans-unit id="41b2681b700b43aa39bbefe5e6b6c8affd770518" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;pattern&lt;/em&gt; is absolute, the path must be absolute, and the whole path must match:</source>
          <target state="translated">場合&lt;em&gt;パターンは&lt;/em&gt;絶対であり、パスは、絶対でなければならず、全体のパスが一致しなければなりません。</target>
        </trans-unit>
        <trans-unit id="dc3dc34c3e256a8f40643eeec54c50b0a72ef1b0" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;pattern&lt;/em&gt; is relative, the path can be either relative or absolute, and matching is done from the right:</source>
          <target state="translated">&lt;em&gt;パターン&lt;/em&gt;が相対である場合、パスは相対または絶対のいずれかであり、マッチングは右から行われます。</target>
        </trans-unit>
        <trans-unit id="ae4f495484349c434b35e20b4a937b07e53b6277" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;pid&lt;/em&gt; is greater than &lt;code&gt;0&lt;/code&gt;, &lt;a href=&quot;#os.waitpid&quot;&gt;&lt;code&gt;waitpid()&lt;/code&gt;&lt;/a&gt; requests status information for that specific process. If &lt;em&gt;pid&lt;/em&gt; is &lt;code&gt;0&lt;/code&gt;, the request is for the status of any child in the process group of the current process. If &lt;em&gt;pid&lt;/em&gt; is &lt;code&gt;-1&lt;/code&gt;, the request pertains to any child of the current process. If &lt;em&gt;pid&lt;/em&gt; is less than &lt;code&gt;-1&lt;/code&gt;, status is requested for any process in the process group &lt;code&gt;-pid&lt;/code&gt; (the absolute value of &lt;em&gt;pid&lt;/em&gt;).</source>
          <target state="translated">場合&lt;em&gt;PIDが&lt;/em&gt;より大きい &lt;code&gt;0&lt;/code&gt; 、&lt;a href=&quot;#os.waitpid&quot;&gt; &lt;code&gt;waitpid()&lt;/code&gt; &lt;/a&gt;その特定のプロセスのステータス情報を要求します。場合&lt;em&gt;pidが&lt;/em&gt;ある &lt;code&gt;0&lt;/code&gt; 、要求は、現在のプロセスのプロセスグループ内のいずれかの子の状態のためです。もし&lt;em&gt;pidが&lt;/em&gt;ある &lt;code&gt;-1&lt;/code&gt; 、現在のプロセスのいずれかの子にリクエストが関係。場合&lt;em&gt;PIDが&lt;/em&gt;未満である &lt;code&gt;-1&lt;/code&gt; 、ステータスは、プロセスグループ内の任意のプロセスのために要求される &lt;code&gt;-pid&lt;/code&gt; （の絶対値&lt;em&gt;PID&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="158f301a96505e39d53ef0b213995b204eb36ca6" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;policy&lt;/em&gt; is set to &lt;code&gt;None&lt;/code&gt;, the default policy is restored.</source>
          <target state="translated">&lt;em&gt;ポリシー&lt;/em&gt;が &lt;code&gt;None&lt;/code&gt; に設定されている場合、デフォルトのポリシーが復元されます。</target>
        </trans-unit>
        <trans-unit id="a33cda1caeb8620df4cbd866550cefe362b20013" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;policy&lt;/em&gt; is specified (it must be an instance of a &lt;a href=&quot;email.policy#module-email.policy&quot;&gt;&lt;code&gt;policy&lt;/code&gt;&lt;/a&gt; class) use the rules it specifies to update and serialize the representation of the message. If &lt;em&gt;policy&lt;/em&gt; is not set, use the &lt;a href=&quot;email.policy#email.policy.Compat32&quot;&gt;&lt;code&gt;compat32&lt;/code&gt;&lt;/a&gt; policy, which maintains backward compatibility with the Python 3.2 version of the email package. For more information see the &lt;a href=&quot;email.policy#module-email.policy&quot;&gt;&lt;code&gt;policy&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">&lt;em&gt;ポリシー&lt;/em&gt;が指定されている場合（&lt;a href=&quot;email.policy#module-email.policy&quot;&gt; &lt;code&gt;policy&lt;/code&gt; &lt;/a&gt;クラスのインスタンスである必要があります）、メッセージの表現を更新およびシリアル化するために、ポリシーが指定するルールを使用します。&lt;em&gt;ポリシー&lt;/em&gt;が設定されていない場合は、メールパッケージのPython 3.2バージョンとの下位互換性を維持する&lt;a href=&quot;email.policy#email.policy.Compat32&quot;&gt; &lt;code&gt;compat32&lt;/code&gt; &lt;/a&gt;ポリシーを使用します。詳細については、&lt;a href=&quot;email.policy#module-email.policy&quot;&gt; &lt;code&gt;policy&lt;/code&gt; &lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7b06b36408a6fd37b66a32d5d1725489b1aa43b4" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;policy&lt;/em&gt; is specified use the rules it specifies to update and serialize the representation of the message. If &lt;em&gt;policy&lt;/em&gt; is not set, use the &lt;a href=&quot;email.policy#email.policy.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt; policy, which follows the rules of the email RFCs except for line endings (instead of the RFC mandated &lt;code&gt;\r\n&lt;/code&gt;, it uses the Python standard &lt;code&gt;\n&lt;/code&gt; line endings). For more information see the &lt;a href=&quot;email.policy#module-email.policy&quot;&gt;&lt;code&gt;policy&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">&lt;em&gt;ポリシー&lt;/em&gt;が指定されている場合は、メッセージの表現を更新およびシリアル化するために指定されているルールを使用します。&lt;em&gt;ポリシー&lt;/em&gt;が設定されていない場合、&lt;a href=&quot;email.policy#email.policy.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt;ポリシーを使用します。これは、行末を除く電子メールRFCのルールに従います（RFCで義務付けられている &lt;code&gt;\r\n&lt;/code&gt; ではなく、Python標準の &lt;code&gt;\n&lt;/code&gt; 行末を使用します）。詳細については、&lt;a href=&quot;email.policy#module-email.policy&quot;&gt; &lt;code&gt;policy&lt;/code&gt; &lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="a6693268834f69640651269a3a6f634c6aa263db" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;policy&lt;/em&gt; is specified use the rules it specifies to update the representation of the message. If &lt;em&gt;policy&lt;/em&gt; is not set, use the &lt;a href=&quot;email.policy#email.policy.Compat32&quot;&gt;&lt;code&gt;compat32&lt;/code&gt;&lt;/a&gt; policy, which maintains backward compatibility with the Python 3.2 version of the email package and provides &lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; as the default factory. All other policies provide &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; as the default &lt;em&gt;_factory&lt;/em&gt;. For more information on what else &lt;em&gt;policy&lt;/em&gt; controls, see the &lt;a href=&quot;email.policy#module-email.policy&quot;&gt;&lt;code&gt;policy&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">&lt;em&gt;ポリシー&lt;/em&gt;が指定されている場合、メッセージの表現を更新するために指定されているルールを使用します。&lt;em&gt;ポリシー&lt;/em&gt;が設定されていない場合は、&lt;a href=&quot;email.policy#email.policy.Compat32&quot;&gt; &lt;code&gt;compat32&lt;/code&gt; &lt;/a&gt;ポリシーを使用します。これは、メールパッケージのPython 3.2バージョンとの下位互換性を維持し、デフォルトのファクトリとして&lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt; &lt;code&gt;Message&lt;/code&gt; &lt;/a&gt;を提供します。他のすべてのポリシーが提供&lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; のを&lt;/a&gt;デフォルトとして&lt;em&gt;_factory&lt;/em&gt;。その他の&lt;em&gt;ポリシー&lt;/em&gt;制御について詳しくは、&lt;a href=&quot;email.policy#module-email.policy&quot;&gt; &lt;code&gt;policy&lt;/code&gt; &lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="f1b19921a08fb3038055adec87fe883544995964" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;policy&lt;/em&gt; is specified, (defaults to the &lt;a href=&quot;email.policy#email.policy.Compat32&quot;&gt;&lt;code&gt;compat32&lt;/code&gt;&lt;/a&gt; policy) it will be passed to &lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合は&lt;em&gt;、ポリシーが&lt;/em&gt;指定され、（デフォルト&lt;a href=&quot;email.policy#email.policy.Compat32&quot;&gt; &lt;code&gt;compat32&lt;/code&gt; の&lt;/a&gt;方針は）それがに渡されます&lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt; &lt;code&gt;Message&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2399425e522c294a6da30e75c6833061e72088e7" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;policy&lt;/em&gt; is specified, use that policy to control message generation. If &lt;em&gt;policy&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt; (the default), use the policy associated with the &lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; object passed to &lt;code&gt;flatten&lt;/code&gt; to control the message generation. See &lt;a href=&quot;email.policy#module-email.policy&quot;&gt;&lt;code&gt;email.policy&lt;/code&gt;&lt;/a&gt; for details on what &lt;em&gt;policy&lt;/em&gt; controls.</source>
          <target state="translated">&lt;em&gt;ポリシー&lt;/em&gt;が指定されている場合は、そのポリシーを使用してメッセージの生成を制御します。場合&lt;em&gt;ポリシーは&lt;/em&gt;しない &lt;code&gt;None&lt;/code&gt; （デフォルト）、関連付けられたポリシーを使用&lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt; &lt;code&gt;Message&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; の&lt;/a&gt;目的は、に渡さ &lt;code&gt;flatten&lt;/code&gt; メッセージの生成を制御します。参照してください&lt;a href=&quot;email.policy#module-email.policy&quot;&gt; &lt;code&gt;email.policy&lt;/code&gt; &lt;/a&gt;何の詳細については、&lt;em&gt;ポリシー&lt;/em&gt;を制御します。</target>
        </trans-unit>
        <trans-unit id="234372ba74ab2a1f7e9543f3c025cced7baa0bcd" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;preexec_fn&lt;/em&gt; is set to a callable object, this object will be called in the child process just before the child is executed. (POSIX only)</source>
          <target state="translated">場合&lt;em&gt;preexec_fnに&lt;/em&gt;呼び出し可能オブジェクトに設定され、このオブジェクトは、子が実行される直前に子プロセスで呼び出されます。（POSIXのみ）</target>
        </trans-unit>
        <trans-unit id="e055baae3a89e75ac216cb3b78aecef961d8ea30" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;prefix&lt;/em&gt; is not &lt;code&gt;None&lt;/code&gt;, the file name will begin with that prefix; otherwise, a default prefix is used. The default is the return value of &lt;a href=&quot;#tempfile.gettempprefix&quot;&gt;&lt;code&gt;gettempprefix()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#tempfile.gettempprefixb&quot;&gt;&lt;code&gt;gettempprefixb()&lt;/code&gt;&lt;/a&gt;, as appropriate.</source>
          <target state="translated">&lt;em&gt;prefix&lt;/em&gt;が &lt;code&gt;None&lt;/code&gt; でない場合、ファイル名はそのプレフィックスで始まります。それ以外の場合は、デフォルトのプレフィックスが使用されます。デフォルトは、必要に&lt;a href=&quot;#tempfile.gettempprefixb&quot;&gt; &lt;code&gt;gettempprefixb()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#tempfile.gettempprefix&quot;&gt; &lt;code&gt;gettempprefix()&lt;/code&gt; &lt;/a&gt;またはgettempprefixb（）の戻り値です。</target>
        </trans-unit>
        <trans-unit id="320d6a341f543a03504526e2053eb17df2ebd864" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;progress&lt;/em&gt; is specified, it must either be &lt;code&gt;None&lt;/code&gt; or a callable object that will be executed at each iteration with three integer arguments, respectively the &lt;em&gt;status&lt;/em&gt; of the last iteration, the &lt;em&gt;remaining&lt;/em&gt; number of pages still to be copied and the &lt;em&gt;total&lt;/em&gt; number of pages.</source>
          <target state="translated">&lt;em&gt;進行状況&lt;/em&gt;が指定されている場合、それは &lt;code&gt;None&lt;/code&gt; または3つの整数引数を使用して各反復で実行される呼び出し可能なオブジェクトである必要があります。それぞれ、最後の反復の&lt;em&gt;ステータス&lt;/em&gt;、コピーされる&lt;em&gt;残り&lt;/em&gt;のページ数、およびページの&lt;em&gt;総数&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="fd9af5ff1d54bf3dba9ffd1e4521d25aa43c2aa9" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;quiet&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt; and it is not possible to create or change the CWD, an error is raised. Otherwise, only a warning is raised and the original CWD is used.</source>
          <target state="translated">場合は&lt;em&gt;、静かで&lt;/em&gt;ある &lt;code&gt;False&lt;/code&gt; 、CWDを作成または変更することはできません、エラーが発生します。それ以外の場合は、警告のみが発生し、元のCWDが使用されます。</target>
        </trans-unit>
        <trans-unit id="835884060a8a9192218bcab1cde5f47ef1b050ce" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;quiet&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt; (the default), the filenames and other information are printed to standard out. Set to &lt;code&gt;1&lt;/code&gt;, only errors are printed. Set to &lt;code&gt;2&lt;/code&gt;, all output is suppressed.</source>
          <target state="translated">場合は&lt;em&gt;、静かで&lt;/em&gt;ある &lt;code&gt;False&lt;/code&gt; または &lt;code&gt;0&lt;/code&gt; （デフォルト）、ファイル名やその他の情報を標準出力に出力されます。 &lt;code&gt;1&lt;/code&gt; に設定すると、エラーのみが出力されます。 &lt;code&gt;2&lt;/code&gt; に設定すると、すべての出力が抑制されます。</target>
        </trans-unit>
        <trans-unit id="8dadb44823dad128ad864c2298313a9d5da71265" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;quiet&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt;, the context manager raises an exception on error. Otherwise, it issues only a warning and keeps the current working directory the same.</source>
          <target state="translated">場合は&lt;em&gt;、静かで&lt;/em&gt;ある &lt;code&gt;False&lt;/code&gt; を、コンテキストマネージャは、エラー時に例外が発生します。それ以外の場合は、警告のみを発行し、現在の作業ディレクトリを同じままにします。</target>
        </trans-unit>
        <trans-unit id="e77db954cc02cf6ffcd1e5162b0740633d6c9859" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;r&lt;/em&gt; is not specified or is &lt;code&gt;None&lt;/code&gt;, then &lt;em&gt;r&lt;/em&gt; defaults to the length of the &lt;em&gt;iterable&lt;/em&gt; and all possible full-length permutations are generated.</source>
          <target state="translated">場合&lt;em&gt;Rが&lt;/em&gt;指定され又はされていないされていない &lt;code&gt;None&lt;/code&gt; 、次いで&lt;em&gt;rの&lt;/em&gt;長さにデフォルト値を&lt;em&gt;反復可能&lt;/em&gt;かつ全ての可能な完全長の順列が生成されます。</target>
        </trans-unit>
        <trans-unit id="eb898bae774457e0cd44b1cda07745bfe870b0dd" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;rawdata&lt;/em&gt; is a string, parse it as an &lt;code&gt;HTTP_COOKIE&lt;/code&gt; and add the values found there as &lt;a href=&quot;#http.cookies.Morsel&quot;&gt;&lt;code&gt;Morsel&lt;/code&gt;&lt;/a&gt;s. If it is a dictionary, it is equivalent to:</source>
          <target state="translated">場合は&lt;em&gt;生データが&lt;/em&gt;文字列である、としてそれを解析 &lt;code&gt;HTTP_COOKIE&lt;/code&gt; と値を追加してそこにい&lt;a href=&quot;#http.cookies.Morsel&quot;&gt; &lt;code&gt;Morsel&lt;/code&gt; &lt;/a&gt;秒。辞書の場合、次と同等です。</target>
        </trans-unit>
        <trans-unit id="c178f6125a527b13b9c928333c2db9e291dd9095" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;recursive&lt;/em&gt; is true, the pattern &amp;ldquo;&lt;code&gt;**&lt;/code&gt;&amp;rdquo; will match any files and zero or more directories, subdirectories and symbolic links to directories. If the pattern is followed by an &lt;a href=&quot;os#os.sep&quot;&gt;&lt;code&gt;os.sep&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;os#os.altsep&quot;&gt;&lt;code&gt;os.altsep&lt;/code&gt;&lt;/a&gt; then files will not match.</source>
          <target state="translated">場合は&lt;em&gt;、再帰的に&lt;/em&gt;真である、パターンが「 &lt;code&gt;**&lt;/code&gt; 」のすべてのファイルと0個以上のディレクトリ、サブディレクトリとディレクトリへのシンボリックリンクにマッチします。パターンの後に&lt;a href=&quot;os#os.sep&quot;&gt; &lt;code&gt;os.sep&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;os#os.altsep&quot;&gt; &lt;code&gt;os.altsep&lt;/code&gt; &lt;/a&gt;が続く場合、ファイルは一致しません。</target>
        </trans-unit>
        <trans-unit id="652f42ab0e60e31310c32efc30bfe26cd213dcee" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;rename&lt;/em&gt; is true, invalid fieldnames are automatically replaced with positional names. For example, &lt;code&gt;['abc', 'def', 'ghi', 'abc']&lt;/code&gt; is converted to &lt;code&gt;['abc', '_1', 'ghi', '_3']&lt;/code&gt;, eliminating the keyword &lt;code&gt;def&lt;/code&gt; and the duplicate fieldname &lt;code&gt;abc&lt;/code&gt;.</source>
          <target state="translated">場合は&lt;em&gt;、名前変更が&lt;/em&gt; trueの場合、無効なフィールド名が自動的に位置名に置き換えられます。たとえば、 &lt;code&gt;['abc', 'def', 'ghi', 'abc']&lt;/code&gt; は &lt;code&gt;['abc', '_1', 'ghi', '_3']&lt;/code&gt; に変換され、キーワード &lt;code&gt;def&lt;/code&gt; と重複するフィールド名 &lt;code&gt;abc&lt;/code&gt; が削除されます。</target>
        </trans-unit>
        <trans-unit id="6b0fc2117fa452e5fb0901602f2e235ae4931393" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;repl&lt;/em&gt; is a function, it is called for every non-overlapping occurrence of &lt;em&gt;pattern&lt;/em&gt;. The function takes a single &lt;a href=&quot;#match-objects&quot;&gt;match object&lt;/a&gt; argument, and returns the replacement string. For example:</source>
          <target state="translated">&lt;em&gt;repl&lt;/em&gt;が関数の場合、&lt;em&gt;patternが&lt;/em&gt;重複しない場合に呼び出され&lt;em&gt;ます&lt;/em&gt;。この関数は、単一の&lt;a href=&quot;#match-objects&quot;&gt;一致オブジェクト&lt;/a&gt;引数を取り、置換文字列を返します。例えば：</target>
        </trans-unit>
        <trans-unit id="2a093846d95a069713492d1fd6ead5de8bd55f04" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;replace&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt; (the default) the header is moved to the end of the list of headers. If &lt;em&gt;replace&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, the header will be updated in place.</source>
          <target state="translated">場合&lt;em&gt;置き換える&lt;/em&gt;ある &lt;code&gt;False&lt;/code&gt; （デフォルト）ヘッダはヘッダのリストの末尾に移動します。場合&lt;em&gt;置き換える&lt;/em&gt;ある &lt;code&gt;True&lt;/code&gt; 、ヘッダは、所定の位置に更新されます。</target>
        </trans-unit>
        <trans-unit id="989522b42bb979106607a604c110fad8c9045475" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;restore_signals&lt;/em&gt; is true (the default) all signals that Python has set to SIG_IGN are restored to SIG_DFL in the child process before the exec. Currently this includes the SIGPIPE, SIGXFZ and SIGXFSZ signals. (POSIX only)</source>
          <target state="translated">場合&lt;em&gt;restore_signalsが&lt;/em&gt;真である（デフォルト）PythonがSIG_IGNに設定されたことをすべての信号はexecの前に、子プロセスでSIG_DFLに復元されています。現在、これにはSIGPIPE、SIGXFZ、およびSIGXFSZ信号が含まれます。（POSIXのみ）</target>
        </trans-unit>
        <trans-unit id="eb9630daaf2813c2a4fbd9d5532117273440d21b" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;result&lt;/em&gt; is provided, it is returned to the caller when the coroutine completes.</source>
          <target state="translated">場合は&lt;em&gt;、結果が&lt;/em&gt;提供されコルーチンが完了したとき、それが呼び出し元に返されます。</target>
        </trans-unit>
        <trans-unit id="5684052c764729c0f68c3561f034eace258e3a1a" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;return_exceptions&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt; (default), the first raised exception is immediately propagated to the task that awaits on &lt;code&gt;gather()&lt;/code&gt;. Other awaitables in the &lt;em&gt;aws&lt;/em&gt; sequence &lt;strong&gt;won&amp;rsquo;t be cancelled&lt;/strong&gt; and will continue to run.</source>
          <target state="translated">場合&lt;em&gt;return_exceptionsが&lt;/em&gt;ある &lt;code&gt;False&lt;/code&gt; （デフォルト）、最初に発生した例外はすぐに上の待ち受けがそのタスクに伝播される &lt;code&gt;gather()&lt;/code&gt; 。&lt;em&gt;aws&lt;/em&gt;シーケンスの他のawaitablesは&lt;strong&gt;キャンセルされず&lt;/strong&gt;、引き続き実行されます。</target>
        </trans-unit>
        <trans-unit id="d6de4a327272d8e394442d6de35dbc10f4156abb" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;return_exceptions&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, exceptions are treated the same as successful results, and aggregated in the result list.</source>
          <target state="translated">&lt;em&gt;return_exceptions&lt;/em&gt;が &lt;code&gt;True&lt;/code&gt; の場合、例外は成功した結果と同様に扱われ、結果リストに集計されます。</target>
        </trans-unit>
        <trans-unit id="c43a33c76c7da2f4198988b499c7fcff4ea7e0ba" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;rx&lt;/em&gt; is given, its search method is called on the complete path to each file considered for compilation, and if it returns a true value, the file is skipped.</source>
          <target state="translated">&lt;em&gt;rx&lt;/em&gt;が指定されている場合、その検索メソッドは、コンパイル対象と見なされる各ファイルへの完全なパスで呼び出され、true値を返す場合、ファイルはスキップされます。</target>
        </trans-unit>
        <trans-unit id="bceb5a6050a398999357f2debabd55d53448093b" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;rx&lt;/em&gt; is given, its search method is passed the full path name to the file being compiled, and if it returns a true value, the file is not compiled and &lt;code&gt;True&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;em&gt;rx&lt;/em&gt;が指定されている場合、その検索メソッドにはコンパイル中のファイルへのフルパス名が渡され、true値を返す場合、ファイルはコンパイルされず、 &lt;code&gt;True&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="11ffb51839f338f99c26b93f469a2ff3e996354c" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;s&lt;/em&gt; is an instance of &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;, then &lt;em&gt;charset&lt;/em&gt; is a hint specifying the character set of the characters in the string.</source>
          <target state="translated">場合は&lt;em&gt;sが&lt;/em&gt;のインスタンスである&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; が&lt;/a&gt;、その後、&lt;em&gt;文字セットは&lt;/em&gt;、文字列の文字セットを決定するためのヒントです。</target>
        </trans-unit>
        <trans-unit id="c4b191218804654e28d488d61d7963e295b8ba38" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;scheme&lt;/em&gt; is not an existing scheme, &lt;a href=&quot;#sysconfig.get_paths&quot;&gt;&lt;code&gt;get_paths()&lt;/code&gt;&lt;/a&gt; will raise a &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;スキーム&lt;/em&gt;が既存のスキームでない場合、&lt;a href=&quot;#sysconfig.get_paths&quot;&gt; &lt;code&gt;get_paths()&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;exceptions#KeyError&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; を発生させ&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="579ce2501f9bd2e51356cbfaa3d40376b9ab476a" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;scheme&lt;/em&gt; is not provided, will use the default scheme for the current platform.</source>
          <target state="translated">&lt;em&gt;スキーム&lt;/em&gt;が指定されていない場合は、現在のプラットフォームのデフォルトのスキームが使用されます。</target>
        </trans-unit>
        <trans-unit id="dcde2be3fbea710fd434bc34595dec1ea0f24076" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;scheme&lt;/em&gt; is provided, it must be a value from the list returned by &lt;a href=&quot;#sysconfig.get_scheme_names&quot;&gt;&lt;code&gt;get_scheme_names()&lt;/code&gt;&lt;/a&gt;. Otherwise, the default scheme for the current platform is used.</source>
          <target state="translated">&lt;em&gt;スキーム&lt;/em&gt;が提供される場合、それは&lt;a href=&quot;#sysconfig.get_scheme_names&quot;&gt; &lt;code&gt;get_scheme_names()&lt;/code&gt; &lt;/a&gt;によって返されるリストからの値でなければなりません。それ以外の場合は、現在のプラットフォームのデフォルトのスキームが使用されます。</target>
        </trans-unit>
        <trans-unit id="0e383345ed1ffb777fd51335060944d7c8849d95" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;secs&lt;/em&gt; is not provided or &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, the current time as returned by &lt;a href=&quot;#time.time&quot;&gt;&lt;code&gt;time()&lt;/code&gt;&lt;/a&gt; is used. &lt;code&gt;ctime(secs)&lt;/code&gt; is equivalent to &lt;code&gt;asctime(localtime(secs))&lt;/code&gt;. Locale information is not used by &lt;a href=&quot;#time.ctime&quot;&gt;&lt;code&gt;ctime()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合&lt;em&gt;秒が&lt;/em&gt;設けられていない、またはされていない&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;、によって返される現在時刻&lt;a href=&quot;#time.time&quot;&gt; &lt;code&gt;time()&lt;/code&gt; &lt;/a&gt;使用されます。 &lt;code&gt;ctime(secs)&lt;/code&gt; は &lt;code&gt;asctime(localtime(secs))&lt;/code&gt; と同等です。ロケール情報は&lt;a href=&quot;#time.ctime&quot;&gt; &lt;code&gt;ctime()&lt;/code&gt; &lt;/a&gt;では使用されません。</target>
        </trans-unit>
        <trans-unit id="52127174ed10907e5ff17d5141342c89e06f5f85" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;seed&lt;/em&gt; is given, creates a new instance of the underlying random number generator. This is useful for creating reproducible results, even in a multi-threading context.</source>
          <target state="translated">場合は&lt;em&gt;シードが&lt;/em&gt;与えられ、基礎となる乱数生成器の新しいインスタンスを作成します。これは、マルチスレッドのコンテキストでも再現可能な結果を​​作成するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="4edab34fe0d303f2ab6c480c28b9df03c2bd34c0" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;self&lt;/em&gt; is alive then mark it as dead and return the result of calling &lt;code&gt;func(*args, **kwargs)&lt;/code&gt;. If &lt;em&gt;self&lt;/em&gt; is dead then return &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;自分自身&lt;/em&gt;が生きている場合は、それをデッドとしてマークし、 &lt;code&gt;func(*args, **kwargs)&lt;/code&gt; を呼び出した結果を返します。&lt;em&gt;自分&lt;/em&gt;が死んでいる場合は&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="1d5cc9d166c3fd7fa9f433e7f26249d72bf951f3" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;self&lt;/em&gt; is alive then mark it as dead and return the tuple &lt;code&gt;(obj, func, args, kwargs)&lt;/code&gt;. If &lt;em&gt;self&lt;/em&gt; is dead then return &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;自分自身&lt;/em&gt;が生きている場合は、それをデッドとしてマークし、タプル &lt;code&gt;(obj, func, args, kwargs)&lt;/code&gt; ます。&lt;em&gt;自分&lt;/em&gt;が死んでいる場合は&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="d62395a4c8cd7edcdbc400ae85af1063602e83fb" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;self&lt;/em&gt; is alive then return the tuple &lt;code&gt;(obj, func, args,
kwargs)&lt;/code&gt;. If &lt;em&gt;self&lt;/em&gt; is dead then return &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;自分自身&lt;/em&gt;が生きている場合は、タプル &lt;code&gt;(obj, func, args, kwargs)&lt;/code&gt; ます。&lt;em&gt;自分&lt;/em&gt;が死んでいる場合は&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="7c78e910291328954d1c689354013e70073a04fb" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;sep&lt;/em&gt; is given, consecutive delimiters are not grouped together and are deemed to delimit empty strings (for example, &lt;code&gt;'1,,2'.split(',')&lt;/code&gt; returns &lt;code&gt;['1', '', '2']&lt;/code&gt;). The &lt;em&gt;sep&lt;/em&gt; argument may consist of multiple characters (for example, &lt;code&gt;'1&amp;lt;&amp;gt;2&amp;lt;&amp;gt;3'.split('&amp;lt;&amp;gt;')&lt;/code&gt; returns &lt;code&gt;['1', '2', '3']&lt;/code&gt;). Splitting an empty string with a specified separator returns &lt;code&gt;['']&lt;/code&gt;.</source>
          <target state="translated">場合&lt;em&gt;9月が&lt;/em&gt;与えられ、連続する区切り文字はグループ化されず、空の文字列（例えば、区切りとみなされる &lt;code&gt;'1,,2'.split(',')&lt;/code&gt; 戻り &lt;code&gt;['1', '', '2']&lt;/code&gt; ）。&lt;em&gt;SEP&lt;/em&gt;引数が複数の文字からなることができる（例えば、 &lt;code&gt;'1&amp;lt;&amp;gt;2&amp;lt;&amp;gt;3'.split('&amp;lt;&amp;gt;')&lt;/code&gt; 戻り &lt;code&gt;['1', '2', '3']&lt;/code&gt; ）。指定されたセパレータで空の文字列を分割すると、 &lt;code&gt;['']&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="d32a65d384a22e7aca1e7f72f27cdc388ee1ce1e" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;sep&lt;/em&gt; is given, consecutive delimiters are not grouped together and are deemed to delimit empty subsequences (for example, &lt;code&gt;b'1,,2'.split(b',')&lt;/code&gt; returns &lt;code&gt;[b'1', b'', b'2']&lt;/code&gt;). The &lt;em&gt;sep&lt;/em&gt; argument may consist of a multibyte sequence (for example, &lt;code&gt;b'1&amp;lt;&amp;gt;2&amp;lt;&amp;gt;3'.split(b'&amp;lt;&amp;gt;')&lt;/code&gt; returns &lt;code&gt;[b'1', b'2', b'3']&lt;/code&gt;). Splitting an empty sequence with a specified separator returns &lt;code&gt;[b'']&lt;/code&gt; or &lt;code&gt;[bytearray(b'')]&lt;/code&gt; depending on the type of object being split. The &lt;em&gt;sep&lt;/em&gt; argument may be any &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;sep&lt;/em&gt;が指定されている場合、連続する区切り文字はグループ化されず、空のサブシーケンスを区切るものと見なされます（たとえば、 &lt;code&gt;b'1,,2'.split(b',')&lt;/code&gt; は &lt;code&gt;[b'1', b'', b'2']&lt;/code&gt; 返します2 ']）。&lt;em&gt;SEP&lt;/em&gt;引数は、マルチバイトシーケンスからなってもよい（例えば、 &lt;code&gt;b'1&amp;lt;&amp;gt;2&amp;lt;&amp;gt;3'.split(b'&amp;lt;&amp;gt;')&lt;/code&gt; 戻り &lt;code&gt;[b'1', b'2', b'3']&lt;/code&gt; ） 。指定されたセパレータで空のシーケンスを分割すると、分割されるオブジェクトのタイプに応じて &lt;code&gt;[b'']&lt;/code&gt; または &lt;code&gt;[bytearray(b'')]&lt;/code&gt; れます。&lt;em&gt;9月の&lt;/em&gt;引数はいずれであってもよい&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクト&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ddf21781d7159ff06d30d7d7782c5cadffcfb73e" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;sep&lt;/em&gt; is not specified or is &lt;code&gt;None&lt;/code&gt;, a different splitting algorithm is applied: runs of consecutive ASCII whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the sequence has leading or trailing whitespace. Consequently, splitting an empty sequence or a sequence consisting solely of ASCII whitespace without a specified separator returns &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">場合&lt;em&gt;9月を&lt;/em&gt;指定するかしないれていない &lt;code&gt;None&lt;/code&gt; 単一セパレータと見なされる空白の連続するASCIIの実行を、そして配列が空白を先頭または末尾た場合、結果は、開始または終了時に空の文字列が含まれていません：、異なる分割アルゴリズムが適用されます。その結果、空のシーケンスまたは指定されたセパレータなしのASCII空白のみで構成されるシーケンスを分割すると、 &lt;code&gt;[]&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="75815e1c039cef44f7ce05b27c1b9d61fa4ea0ed" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;sep&lt;/em&gt; is not specified or is &lt;code&gt;None&lt;/code&gt;, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace. Consequently, splitting an empty string or a string consisting of just whitespace with a &lt;code&gt;None&lt;/code&gt; separator returns &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">場合&lt;em&gt;9月を&lt;/em&gt;指定するかしないれていない &lt;code&gt;None&lt;/code&gt; 、異なる分割アルゴリズムが適用される：連続空白の実行は、単一のセパレータとみなされ、そして文字列が空白を先頭または末尾た場合、結果は、開始または終了時に空の文字列が含まれていません。その結果、空の文字列または空白のみで構成される文字列を &lt;code&gt;None&lt;/code&gt; セパレータで分割すると、 &lt;code&gt;[]&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="bacd7e201472689d45d2129900593e8ba53a276f" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;sep&lt;/em&gt; is specified, it must be a single character str or bytes object. It will be inserted in the output after every &lt;em&gt;bytes_per_sep&lt;/em&gt; input bytes. Separator placement is counted from the right end of the output by default, if you wish to count from the left, supply a negative &lt;em&gt;bytes_per_sep&lt;/em&gt; value.</source>
          <target state="translated">&lt;em&gt;sep&lt;/em&gt;を指定する場合は、1文字のstrまたはbytesオブジェクトでなければなりません。これは、各&lt;em&gt;bytes_per_sep&lt;/em&gt;入力バイトの後に出力に挿入されます。セパレーターの配置は、デフォルトでは出力の右端からカウントされます。左からカウントする場合は、負の&lt;em&gt;bytes_per_sep&lt;/em&gt;値を&lt;em&gt;指定し&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b2e53523b64aa1ece0f05f00001ffc33c683dfc6" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;shallow&lt;/em&gt; is true, files with identical &lt;a href=&quot;os#os.stat&quot;&gt;&lt;code&gt;os.stat()&lt;/code&gt;&lt;/a&gt; signatures are taken to be equal. Otherwise, the contents of the files are compared.</source>
          <target state="translated">場合&lt;em&gt;浅いが&lt;/em&gt;真である、同一のファイル&lt;a href=&quot;os#os.stat&quot;&gt; &lt;code&gt;os.stat()&lt;/code&gt; &lt;/a&gt;シグネチャが等しくなるように取られます。それ以外の場合は、ファイルの内容が比較されます。</target>
        </trans-unit>
        <trans-unit id="6a14ade8fc04b529f8c66e54b142b5f11123facc" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;shell&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, the specified command will be executed through the shell. This can be useful if you are using Python primarily for the enhanced control flow it offers over most system shells and still want convenient access to other shell features such as shell pipes, filename wildcards, environment variable expansion, and expansion of &lt;code&gt;~&lt;/code&gt; to a user&amp;rsquo;s home directory. However, note that Python itself offers implementations of many shell-like features (in particular, &lt;a href=&quot;glob#module-glob&quot;&gt;&lt;code&gt;glob&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;fnmatch#module-fnmatch&quot;&gt;&lt;code&gt;fnmatch&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;os#os.walk&quot;&gt;&lt;code&gt;os.walk()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;os.path#os.path.expandvars&quot;&gt;&lt;code&gt;os.path.expandvars()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;os.path#os.path.expanduser&quot;&gt;&lt;code&gt;os.path.expanduser()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;shutil#module-shutil&quot;&gt;&lt;code&gt;shutil&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">場合は&lt;em&gt;シェルが&lt;/em&gt;ある &lt;code&gt;True&lt;/code&gt; 、指定されたコマンドは、シェルを介して実行されます。これは、Pythonを主に拡張制御フローに使用していて、ほとんどのシステムシェルで提供されているにもかかわらず、シェルパイプ、ファイル名のワイルドカード、環境変数の展開、ユーザーの家への &lt;code&gt;~&lt;/code&gt; 展開など、他のシェル機能への便利なアクセスが必要な場合に役立ちます。ディレクトリ。ただし、Python自体がシェルのような多くの機能の実装を提供していることに注意してください（特に、&lt;a href=&quot;glob#module-glob&quot;&gt; &lt;code&gt;glob&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;fnmatch#module-fnmatch&quot;&gt; &lt;code&gt;fnmatch&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;os#os.walk&quot;&gt; &lt;code&gt;os.walk()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;os.path#os.path.expandvars&quot;&gt; &lt;code&gt;os.path.expandvars()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;os.path#os.path.expanduser&quot;&gt; &lt;code&gt;os.path.expanduser()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;shutil#module-shutil&quot;&gt; &lt;code&gt;shutil&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="c3fabb4f0dfc614531e56476a132b5752f344c2f" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;side_effect&lt;/em&gt; is an iterable then each call to the mock will return the next value from the iterable.</source>
          <target state="translated">&lt;em&gt;side_effect&lt;/em&gt;が反復可能である場合、モックを呼び出すたびに、反復可能から次の値が返されます。</target>
        </trans-unit>
        <trans-unit id="32d4906d1c181de707adccc5361aecabb724997b" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;sigma&lt;/em&gt; is negative, raises &lt;a href=&quot;#statistics.StatisticsError&quot;&gt;&lt;code&gt;StatisticsError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;sigma&lt;/em&gt;が負の場合、&lt;a href=&quot;#statistics.StatisticsError&quot;&gt; &lt;code&gt;StatisticsError&lt;/code&gt; &lt;/a&gt;を送出します。</target>
        </trans-unit>
        <trans-unit id="84a4b0f24b46c93f18da5c06f6ae94445c0fe2cf" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;signalnum&lt;/em&gt; is 0, then no signal is sent, but error checking is still performed; this can be used to check if the target thread is still running.</source>
          <target state="translated">&lt;em&gt;signalnum&lt;/em&gt;が0の場合、シグナルは送信されませんが、エラーチェックは実行されます。これは、ターゲットスレッドがまだ実行されているかどうかを確認するために使用できます。</target>
        </trans-unit>
        <trans-unit id="d8a8c085c8f93c34a62d1f5006e023a789d7f748" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;size&lt;/em&gt; is &lt;code&gt;-1&lt;/code&gt; (the default), an arbitrary number of bytes are returned (more than zero unless EOF is reached).</source>
          <target state="translated">場合&lt;em&gt;サイズが&lt;/em&gt;ある &lt;code&gt;-1&lt;/code&gt; （デフォルト）（EOFに到達しない限り、複数ゼロよりも）、任意のバイト数が返されます。</target>
        </trans-unit>
        <trans-unit id="783061ee6ebe0a3e848628b0e39a754d7f845bd2" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;size&lt;/em&gt; is specified, at most &lt;em&gt;size&lt;/em&gt; characters will be read.</source>
          <target state="translated">場合は&lt;em&gt;サイズが&lt;/em&gt;指定されている、ほとんどの&lt;em&gt;サイズの&lt;/em&gt;文字を読み込みます。</target>
        </trans-unit>
        <trans-unit id="847d50bbad63ed5c73adc70a9729f398c1c78b9f" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;skip_curdir&lt;/em&gt; is true (the default), the current directory is not included in the search. All other parameters are passed to the &lt;a href=&quot;#compileall.compile_dir&quot;&gt;&lt;code&gt;compile_dir()&lt;/code&gt;&lt;/a&gt; function. Note that unlike the other compile functions, &lt;code&gt;maxlevels&lt;/code&gt; defaults to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">場合&lt;em&gt;skip_curdirが&lt;/em&gt; true（デフォルト）で、現在のディレクトリが検索に含まれていません。他のすべてのパラメーターは、&lt;a href=&quot;#compileall.compile_dir&quot;&gt; &lt;code&gt;compile_dir()&lt;/code&gt; &lt;/a&gt;関数に渡されます。他のコンパイル関数とは異なり、 &lt;code&gt;maxlevels&lt;/code&gt; のデフォルトは &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1622612acffaa08ff5b0ba0489c4b9b99e2215a3" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;skipkeys&lt;/em&gt; is false (the default), then it is a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; to attempt encoding of keys that are not &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;None&lt;/code&gt;. If &lt;em&gt;skipkeys&lt;/em&gt; is true, such items are simply skipped.</source>
          <target state="translated">場合&lt;em&gt;skipkeysが&lt;/em&gt; false（デフォルト）で、ある&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 例外&lt;/a&gt;ではありませんキーの符号化の試行する&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt;または &lt;code&gt;None&lt;/code&gt; 。場合&lt;em&gt;skipkeysが&lt;/em&gt; trueの場合、このような項目は単にスキップされます。</target>
        </trans-unit>
        <trans-unit id="fdad7b18b91cc5adf5f82da39ab59d5d78a1ecfd" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;skipkeys&lt;/em&gt; is true (default: &lt;code&gt;False&lt;/code&gt;), then dict keys that are not of a basic type (&lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#bool&quot;&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;None&lt;/code&gt;) will be skipped instead of raising a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合&lt;em&gt;skipkeysが&lt;/em&gt; true（デフォルト：ある &lt;code&gt;False&lt;/code&gt; ）、そして基本的なタイプではないdictのキー（&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;functions#bool&quot;&gt; &lt;code&gt;bool&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;None&lt;/code&gt; ）引き上げの代わりにスキップされません&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="919e52d14550425c25e9a8891929227e5c2b4b36" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;sort_keys&lt;/em&gt; is true (default: &lt;code&gt;False&lt;/code&gt;), then the output of dictionaries will be sorted by key.</source>
          <target state="translated">場合&lt;em&gt;sort_keysが&lt;/em&gt; true（デフォルト：ある &lt;code&gt;False&lt;/code&gt; ）、その後、辞書の出力がキーでソートされます。</target>
        </trans-unit>
        <trans-unit id="141cc93734b2806ef0b422eaafd25c2a3bb5717d" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;sort_keys&lt;/em&gt; is true (default: &lt;code&gt;False&lt;/code&gt;), then the output of dictionaries will be sorted by key; this is useful for regression tests to ensure that JSON serializations can be compared on a day-to-day basis.</source>
          <target state="translated">場合&lt;em&gt;sort_keysが&lt;/em&gt; true（デフォルト：ある &lt;code&gt;False&lt;/code&gt; ）、その後、辞書の出力がキーでソートされます。これは、JSONシリアル化を日常的に比較できることを確認する回帰テストに役立ちます。</target>
        </trans-unit>
        <trans-unit id="0ec4d3670001eb4630add8e5d77a6b7f8a38307e" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;source&lt;/em&gt; is a directory, this will create an archive from the contents of &lt;em&gt;source&lt;/em&gt;. If &lt;em&gt;source&lt;/em&gt; is a file, it should be an archive, and it will be copied to the target archive (or the contents of its shebang line will be displayed if the &amp;ndash;info option is specified).</source>
          <target state="translated">&lt;em&gt;source&lt;/em&gt;がディレクトリの場合、これは&lt;em&gt;source&lt;/em&gt;のコンテンツからアーカイブを作成します。&lt;em&gt;ソース&lt;/em&gt;がファイルの場合、それはアーカイブである必要があり、それはターゲットアーカイブにコピーされます（または、-infoオプションが指定されている場合は、そのシバン行の内容が表示されます）。</target>
        </trans-unit>
        <trans-unit id="dd866a51c1af75263cc3da023ee73b4ff52a8f3f" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;spec&lt;/em&gt; is an object (rather than a list of strings) then &lt;a href=&quot;stdtypes#instance.__class__&quot;&gt;&lt;code&gt;__class__&lt;/code&gt;&lt;/a&gt; returns the class of the spec object. This allows mocks to pass &lt;a href=&quot;functions#isinstance&quot;&gt;&lt;code&gt;isinstance()&lt;/code&gt;&lt;/a&gt; tests.</source>
          <target state="translated">&lt;em&gt;spec&lt;/em&gt;が（文字列のリストではなく）オブジェクトの場合、&lt;a href=&quot;stdtypes#instance.__class__&quot;&gt; &lt;code&gt;__class__&lt;/code&gt; &lt;/a&gt;はspecオブジェクトのクラスを返します。これにより、モックは&lt;a href=&quot;functions#isinstance&quot;&gt; &lt;code&gt;isinstance()&lt;/code&gt; &lt;/a&gt;テストに合格できます。</target>
        </trans-unit>
        <trans-unit id="e430ec45184814b7e3a5423aaa67762e8ff2ee26" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;spec_set&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt; then attempting to set attributes that don&amp;rsquo;t exist on the spec object will raise an &lt;a href=&quot;exceptions#AttributeError&quot;&gt;&lt;code&gt;AttributeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;spec_set&lt;/em&gt;が &lt;code&gt;True&lt;/code&gt; の場合、specオブジェクトに存在しない属性を設定しようとすると、&lt;a href=&quot;exceptions#AttributeError&quot;&gt; &lt;code&gt;AttributeError&lt;/code&gt; が発生し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="afed44ee7ef600b461a700a3398505683d4ea66e" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;spec_set&lt;/em&gt; is true then only attributes on the spec can be set.</source>
          <target state="translated">&lt;em&gt;spec_set&lt;/em&gt;がtrueの場合、設定できるのは仕様の属性のみです。</target>
        </trans-unit>
        <trans-unit id="e7a8ce63e7abc528992721347309573385b89984" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;start&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, then iteration starts at zero. If &lt;em&gt;step&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, then the step defaults to one.</source>
          <target state="translated">場合は&lt;em&gt;、スタートが&lt;/em&gt;ありません &lt;code&gt;None&lt;/code&gt; 、その後、反復はゼロから始まります。&lt;em&gt;step&lt;/em&gt;が &lt;code&gt;None&lt;/code&gt; の場合、ステップのデフォルトは1です。</target>
        </trans-unit>
        <trans-unit id="24863e0f029a6a7992cca82f7b21086bad27e744" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;start_new_session&lt;/em&gt; is true the setsid() system call will be made in the child process prior to the execution of the subprocess. (POSIX only)</source>
          <target state="translated">場合&lt;em&gt;start_new_sessionが&lt;/em&gt;真であるがsetsid（）システムコールは、サブプロセスの実行前に、子プロセスで行われます。（POSIXのみ）</target>
        </trans-unit>
        <trans-unit id="dae10e2b8108370fbc36f3fb951b2b6fcfa7ee03" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;state&lt;/em&gt; is specified, it is expected to be a sequence of one or more states. If the &lt;em&gt;default&lt;/em&gt; argument is set, it is used as a fallback value in case no specification for option is found.</source>
          <target state="translated">場合は&lt;em&gt;状態が&lt;/em&gt;指定され、一つ以上の状態のシーケンスであることが予想されます。場合は&lt;em&gt;、デフォルトの&lt;/em&gt;引数が設定されている、それはオプションのための仕様が見つからない場合には代替値として使用されます。</target>
        </trans-unit>
        <trans-unit id="03eb4116ba9791728aa443f40f34198f5e04395f" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;strict&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt; and host bits are set in the supplied address, then &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised. Otherwise, the host bits are masked out to determine the appropriate network address.</source>
          <target state="translated">場合&lt;em&gt;厳密で&lt;/em&gt;ある &lt;code&gt;True&lt;/code&gt; とホストビットが供給されたアドレスに設定され、その後&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;上昇します。そうでない場合、ホストビットは適切なネットワークアドレスを決定するためにマスクされます。</target>
        </trans-unit>
        <trans-unit id="973cfc980a368126ab372341f5a82f90bd2ace1b" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;strict&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, information will be added to list of standard types, else to the list of non-standard types.</source>
          <target state="translated">&lt;em&gt;strict&lt;/em&gt;が &lt;code&gt;True&lt;/code&gt; の場合、情報は標準タイプのリストに追加され、そうでない場合は非標準タイプのリストに追加されます。</target>
        </trans-unit>
        <trans-unit id="c63d58de5c2b785bb280134953605f32b3e0b06f" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;strict&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, information will be added to the list of standard types, else to the list of non-standard types.</source>
          <target state="translated">&lt;em&gt;strict&lt;/em&gt;が &lt;code&gt;True&lt;/code&gt; の場合、情報は標準タイプのリストに追加され、そうでない場合は非標準タイプのリストに追加されます。</target>
        </trans-unit>
        <trans-unit id="59fa67b55f66822993cd529b9e43d4b11387a896" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;strict&lt;/em&gt; is false (&lt;code&gt;True&lt;/code&gt; is the default), then control characters will be allowed inside strings. Control characters in this context are those with character codes in the 0&amp;ndash;31 range, including &lt;code&gt;'\t'&lt;/code&gt; (tab), &lt;code&gt;'\n'&lt;/code&gt;, &lt;code&gt;'\r'&lt;/code&gt; and &lt;code&gt;'\0'&lt;/code&gt;.</source>
          <target state="translated">場合は&lt;em&gt;厳密には&lt;/em&gt;（偽である &lt;code&gt;True&lt;/code&gt; デフォルトです）、その後、制御文字は文字列の内側に許可されます。このコンテキストでの制御文字は、 &lt;code&gt;'\t'&lt;/code&gt; （タブ）、 &lt;code&gt;'\n'&lt;/code&gt; 、 &lt;code&gt;'\r'&lt;/code&gt; 、および &lt;code&gt;'\0'&lt;/code&gt; を含む、0〜31の範囲の文字コードを持つものです。</target>
        </trans-unit>
        <trans-unit id="00bb41b8d4ff338b7ff04695279e77d2e3c93ebd" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;suffix&lt;/em&gt; is not &lt;code&gt;None&lt;/code&gt;, the file name will end with that suffix, otherwise there will be no suffix. &lt;a href=&quot;#tempfile.mkstemp&quot;&gt;&lt;code&gt;mkstemp()&lt;/code&gt;&lt;/a&gt; does not put a dot between the file name and the suffix; if you need one, put it at the beginning of &lt;em&gt;suffix&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;suffix&lt;/em&gt;が &lt;code&gt;None&lt;/code&gt; でない場合、ファイル名はそのサフィックスで終わります。それ以外の場合、サフィックスはありません。&lt;a href=&quot;#tempfile.mkstemp&quot;&gt; &lt;code&gt;mkstemp()&lt;/code&gt; &lt;/a&gt;は、ファイル名とサフィックスの間にドットを入れません。必要な場合は、&lt;em&gt;サフィックス&lt;/em&gt;の最初に&lt;em&gt;付けてください&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="13150c99ab21ad6513149f3afd00516abf1afabf" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;symlinks&lt;/em&gt; is true, symbolic links in the source tree are represented as symbolic links in the new tree and the metadata of the original links will be copied as far as the platform allows; if false or omitted, the contents and metadata of the linked files are copied to the new tree.</source>
          <target state="translated">&lt;em&gt;symlinks&lt;/em&gt;がtrueの場合、ソースツリーのシンボリックリンクは新しいツリーのシンボリックリンクとして表され、元のリンクのメタデータはプラットフォームが許可する限りコピーされます。falseまたは省略した場合、リンクされたファイルのコンテンツとメタデータが新しいツリーにコピーされます。</target>
        </trans-unit>
        <trans-unit id="790a7891dbe26c0d182cc188c6888155d0da69dc" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;t&lt;/em&gt; is not provided, the current time as returned by &lt;a href=&quot;#time.localtime&quot;&gt;&lt;code&gt;localtime()&lt;/code&gt;&lt;/a&gt; is used. Locale information is not used by &lt;a href=&quot;#time.asctime&quot;&gt;&lt;code&gt;asctime()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;t&lt;/em&gt;が指定されていない場合は、&lt;a href=&quot;#time.localtime&quot;&gt; &lt;code&gt;localtime()&lt;/code&gt; &lt;/a&gt;によって返された現在時刻が使用されます。ロケール情報は&lt;a href=&quot;#time.asctime&quot;&gt; &lt;code&gt;asctime()&lt;/code&gt; &lt;/a&gt;では使用されません。</target>
        </trans-unit>
        <trans-unit id="02d5c93f7a324aa5bde0984e4ba37a751a5f3a3c" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;tests&lt;/em&gt; is given, it must be an iterable of individual test cases or other test suites that will be used to build the suite initially. Additional methods are provided to add test cases and suites to the collection later on.</source>
          <target state="translated">場合&lt;em&gt;のテストが&lt;/em&gt;与えられ、それは最初はスイートを構築するために使用される個々のテストケースや他のテストスイートの反復可能でなければなりません。後でコレクションにテストケースとスイートを追加するための追加のメソッドが提供されます。</target>
        </trans-unit>
        <trans-unit id="32cd3e51c090a1bc9065f8c1d01729be7286d1ed" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;text&lt;/em&gt; is specified, it indicates whether to open the file in binary mode (the default) or text mode. On some platforms, this makes no difference.</source>
          <target state="translated">&lt;em&gt;テキスト&lt;/em&gt;が指定されている場合は、ファイルをバイナリモード（デフォルト）で開くか、&lt;em&gt;テキスト&lt;/em&gt;モードで開くかを示します。一部のプラットフォームでは、これは違いがありません。</target>
        </trans-unit>
        <trans-unit id="a4559c7dea064e6ee3c47db167d23f484bc1c7d3" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;themename&lt;/em&gt; is not given, returns the theme in use. Otherwise, sets the current theme to &lt;em&gt;themename&lt;/em&gt;, refreshes all widgets and emits a &amp;lt;&amp;lt;ThemeChanged&amp;gt;&amp;gt; event.</source>
          <target state="translated">&lt;em&gt;themename&lt;/em&gt;が指定されていない場合、使用中のテーマを返します。それ以外の場合は、現在のテーマを&lt;em&gt;themename&lt;/em&gt;に設定し、すべてのウィジェットを更新して、&amp;lt;&amp;lt; ThemeChanged &amp;gt;&amp;gt;イベントを発行します。</target>
        </trans-unit>
        <trans-unit id="28532016ce2dec2f43f2440bb50823bc42171d6a" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;time&lt;/em&gt; is non-zero, this function requests that a &lt;code&gt;SIGALRM&lt;/code&gt; signal be sent to the process in &lt;em&gt;time&lt;/em&gt; seconds. Any previously scheduled alarm is canceled (only one alarm can be scheduled at any time). The returned value is then the number of seconds before any previously set alarm was to have been delivered. If &lt;em&gt;time&lt;/em&gt; is zero, no alarm is scheduled, and any scheduled alarm is canceled. If the return value is zero, no alarm is currently scheduled.</source>
          <target state="translated">場合は&lt;em&gt;、時間が&lt;/em&gt;あることゼロで、この関数は、要求 &lt;code&gt;SIGALRM&lt;/code&gt; のシグナルがプロセスに送信され&lt;em&gt;た時間&lt;/em&gt;秒。以前にスケジュールされたアラームはキャンセルされます（いつでもスケジュールできるアラームは1つだけです）。戻り値は、以前に設定されたアラームが配信される前の秒数になります。場合は&lt;em&gt;時間が&lt;/em&gt;ゼロである、何のアラームが予定されていない、と任意のスケジュールされた警報は解除されます。戻り値がゼロの場合、現在アラームはスケジュールされていません。</target>
        </trans-unit>
        <trans-unit id="497079b5b5c0bcfc850eb270a835cdeff89fcdd1" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;timeout&lt;/em&gt; is not specified then it will return immediately. If &lt;em&gt;timeout&lt;/em&gt; is a number then this specifies the maximum time in seconds to block. If &lt;em&gt;timeout&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt; then an infinite timeout is used.</source>
          <target state="translated">&lt;em&gt;タイムアウト&lt;/em&gt;が指定されていない場合は、すぐに戻ります。場合は&lt;em&gt;タイムアウトが&lt;/em&gt;数で、これはブロックに最大の時間を秒単位で指定します。場合は&lt;em&gt;タイムアウトは&lt;/em&gt;ありません &lt;code&gt;None&lt;/code&gt; そして無限のタイムアウトが使用されています。</target>
        </trans-unit>
        <trans-unit id="38330b7243617ce7e169c4b1ec03b6f57cadf500" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;times&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt; and &lt;em&gt;ns&lt;/em&gt; is unspecified, this is equivalent to specifying &lt;code&gt;ns=(atime_ns, mtime_ns)&lt;/code&gt; where both times are the current time.</source>
          <target state="translated">場合&lt;em&gt;倍&lt;/em&gt;である &lt;code&gt;None&lt;/code&gt; と&lt;em&gt;NSは&lt;/em&gt;不特定ではない、これは指定することと同じである &lt;code&gt;ns=(atime_ns, mtime_ns)&lt;/code&gt; 両方の時間が現在の時間です。</target>
        </trans-unit>
        <trans-unit id="8db77a303cd49acf6960de74cc642fc8c3611507" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;times&lt;/em&gt; is not &lt;code&gt;None&lt;/code&gt;, it must be a 2-tuple of the form &lt;code&gt;(atime, mtime)&lt;/code&gt; where each member is an int or float expressing seconds.</source>
          <target state="translated">&lt;em&gt;times&lt;/em&gt;が &lt;code&gt;None&lt;/code&gt; でない場合、各メンバーは秒を表すintまたはfloat の形式 &lt;code&gt;(atime, mtime)&lt;/code&gt; 2タプルでなければなりません。</target>
        </trans-unit>
        <trans-unit id="347e1c7b8f66668341af1aa8af2cae34d5219df5" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;typed&lt;/em&gt; is set to true, function arguments of different types will be cached separately. For example, &lt;code&gt;f(3)&lt;/code&gt; and &lt;code&gt;f(3.0)&lt;/code&gt; will be treated as distinct calls with distinct results.</source>
          <target state="translated">場合&lt;em&gt;型付きが&lt;/em&gt; trueに設定されている、さまざまな種類の関数の引数は、個別にキャッシュされます。たとえば、 &lt;code&gt;f(3)&lt;/code&gt; と &lt;code&gt;f(3.0)&lt;/code&gt; は異なる呼び出しとして扱われ、異なる結果が得られます。</target>
        </trans-unit>
        <trans-unit id="35713c7d2a1b17f3adfee94e67fe51913e45bad5" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;tz&lt;/em&gt; is not &lt;code&gt;None&lt;/code&gt;, it must be an instance of a &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; subclass, and the current date and time are converted to &lt;em&gt;tz&lt;/em&gt;&amp;rsquo;s time zone.</source>
          <target state="translated">&lt;em&gt;tz&lt;/em&gt;が &lt;code&gt;None&lt;/code&gt; でない場合、それは&lt;a href=&quot;#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;サブクラスのインスタンスである必要があり、現在の日付と時刻は&lt;em&gt;tz&lt;/em&gt;のタイムゾーンに変換されます。</target>
        </trans-unit>
        <trans-unit id="260c901c4e473510ed15a11c2c9dd83021ee8189" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;tz&lt;/em&gt; is not &lt;code&gt;None&lt;/code&gt;, it must be an instance of a &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; subclass, and the timestamp is converted to &lt;em&gt;tz&lt;/em&gt;&amp;rsquo;s time zone.</source>
          <target state="translated">&lt;em&gt;tz&lt;/em&gt;が &lt;code&gt;None&lt;/code&gt; でない場合、それは&lt;a href=&quot;#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;サブクラスのインスタンスでなければならず、タイムスタンプは&lt;em&gt;tz&lt;/em&gt;のタイムゾーンに変換されます。</target>
        </trans-unit>
        <trans-unit id="8a43748fde1efea83cc1d49bf1dde82fa0eb165d" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;unixfrom&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, print the envelope header delimiter used by the Unix mailbox format (see &lt;a href=&quot;mailbox#module-mailbox&quot;&gt;&lt;code&gt;mailbox&lt;/code&gt;&lt;/a&gt;) before the first of the &lt;a href=&quot;https://tools.ietf.org/html/rfc5322.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 5322&lt;/strong&gt;&lt;/a&gt; headers of the root message object. If the root object has no envelope header, craft a standard one. The default is &lt;code&gt;False&lt;/code&gt;. Note that for subparts, no envelope header is ever printed.</source>
          <target state="translated">&lt;em&gt;unixfrom&lt;/em&gt;が &lt;code&gt;True&lt;/code&gt; の場合、ルートメッセージオブジェクトの&lt;a href=&quot;https://tools.ietf.org/html/rfc5322.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 5322&lt;/strong&gt;&lt;/a&gt;ヘッダーの最初の前に、Unixメールボックス形式（&lt;a href=&quot;mailbox#module-mailbox&quot;&gt; &lt;code&gt;mailbox&lt;/code&gt; &lt;/a&gt;参照）で使用されるエンベロープヘッダー区切り文字を出力します。ルートオブジェクトにエンベロープヘッダーがない場合は、標準のヘッダーを作成します。デフォルトは &lt;code&gt;False&lt;/code&gt; です。サブパーツの場合、エンベロープヘッダーは印刷されないことに注意してください。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="09ee2106f178148b8593077159fed634361f4c90" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;unixfrom&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, print the envelope header delimiter used by the Unix mailbox format (see &lt;a href=&quot;mailbox#module-mailbox&quot;&gt;&lt;code&gt;mailbox&lt;/code&gt;&lt;/a&gt;) before the first of the &lt;a href=&quot;https://tools.ietf.org/html/rfc5322.html&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 5322&lt;/strong&gt;&lt;/a&gt; headers of the root message object. If the root object has no envelope header, craft a standard one. The default is &lt;code&gt;False&lt;/code&gt;. Note that for subparts, no envelope header is ever printed.</source>
          <target state="translated">&lt;em&gt;unixfrom&lt;/em&gt;が &lt;code&gt;True&lt;/code&gt; の場合、ルートメッセージオブジェクトの&lt;a href=&quot;https://tools.ietf.org/html/rfc5322.html&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 5322&lt;/strong&gt;&lt;/a&gt;ヘッダーの最初の前に、Unixメールボックス形式（&lt;a href=&quot;mailbox#module-mailbox&quot;&gt; &lt;code&gt;mailbox&lt;/code&gt; &lt;/a&gt;参照）で使用されるエンベロープヘッダー区切り文字を出力します。ルートオブジェクトにエンベロープヘッダーがない場合は、標準のヘッダーを作成します。デフォルトは &lt;code&gt;False&lt;/code&gt; です。サブパーツの場合、エンベロープヘッダーは印刷されないことに注意してください。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="564c391e2eea7b00e0d4511879cbcfaf5a4d8d17" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;uri&lt;/em&gt; is true, &lt;em&gt;database&lt;/em&gt; is interpreted as a URI. This allows you to specify options. For example, to open a database in read-only mode you can use:</source>
          <target state="translated">場合&lt;em&gt;URIが&lt;/em&gt; trueの場合、&lt;em&gt;データベースは、&lt;/em&gt; URIとして解釈されます。これにより、オプションを指定できます。たとえば、データベースを読み取り専用モードで開くには、次のコマンドを使用できます。</target>
        </trans-unit>
        <trans-unit id="92ee0e1dd0fe08e277eb2f16cc058b3ac9c272b9" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;url&lt;/em&gt; contains a fragment identifier, return a modified version of &lt;em&gt;url&lt;/em&gt; with no fragment identifier, and the fragment identifier as a separate string. If there is no fragment identifier in &lt;em&gt;url&lt;/em&gt;, return &lt;em&gt;url&lt;/em&gt; unmodified and an empty string.</source>
          <target state="translated">&lt;em&gt;url&lt;/em&gt;にフラグメント識別子が含まれている場合、フラグメント識別子のない変更されたバージョンの&lt;em&gt;url&lt;/em&gt;を返し、フラグメント識別子を別の文字列として返します。&lt;em&gt;url&lt;/em&gt;にフラグメント識別子がない場合、変更されていない&lt;em&gt;url&lt;/em&gt;と空の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="35a93d83feb3c7efc87442bcc3ea9ca48667e136" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;url&lt;/em&gt; is an absolute URL (that is, starting with &lt;code&gt;//&lt;/code&gt; or &lt;code&gt;scheme://&lt;/code&gt;), the &lt;em&gt;url&lt;/em&gt;&amp;rsquo;s host name and/or scheme will be present in the result. For example:</source>
          <target state="translated">場合は&lt;em&gt;、URLは&lt;/em&gt;（、で始まる絶対URLである &lt;code&gt;//&lt;/code&gt; または &lt;code&gt;scheme://&lt;/code&gt; ）、&lt;em&gt;URL&lt;/em&gt;のホスト名および/またはスキームは、結果で存在するであろう。例えば：</target>
        </trans-unit>
        <trans-unit id="d52da6544fdd2712a853ec73945e433591662e8f" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;use_builtin_types&lt;/em&gt; is true (the default) binary data will be returned as instances of &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;, otherwise it is returned as instances of &lt;a href=&quot;#plistlib.Data&quot;&gt;&lt;code&gt;Data&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合&lt;em&gt;use_builtin_typesが&lt;/em&gt;真である（デフォルト）のバイナリデータは、のインスタンスとして返されます&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;それ以外の場合は、のインスタンスとして返され、&lt;a href=&quot;#plistlib.Data&quot;&gt; &lt;code&gt;Data&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6a9f1ac8559eac5c86eefcea83c87b1263668062" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;user_function&lt;/em&gt; is specified, it must be a callable. This allows the &lt;em&gt;lru_cache&lt;/em&gt; decorator to be applied directly to a user function, leaving the &lt;em&gt;maxsize&lt;/em&gt; at its default value of 128:</source>
          <target state="translated">&lt;em&gt;user_function&lt;/em&gt;が指定されている場合、それは呼び出し可能でなければなりません。これにより、&lt;em&gt;lru_cache&lt;/em&gt;デコレーターをユーザー関数に直接適用して、&lt;em&gt;maxsize&lt;/em&gt;をデフォルト値の128のままにすることができます。</target>
        </trans-unit>
        <trans-unit id="a9352d72ddc99ca448cdec42d9f75b91943270d1" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;validate&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt; (the default), characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check. If &lt;em&gt;validate&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, these non-alphabet characters in the input result in a &lt;a href=&quot;binascii#binascii.Error&quot;&gt;&lt;code&gt;binascii.Error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合は&lt;em&gt;検証が&lt;/em&gt;ある &lt;code&gt;False&lt;/code&gt; （デフォルト）、通常のベース64アルファベットや代替アルファベットでもないん文字がパディングチェックする前に破棄されます。&lt;em&gt;validate&lt;/em&gt;が &lt;code&gt;True&lt;/code&gt; の場合、入力内のこれらの非アルファベット文字は&lt;a href=&quot;binascii#binascii.Error&quot;&gt; &lt;code&gt;binascii.Error&lt;/code&gt; になり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="041b397f09c0fc84d045447fef90474b85a692b7" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;value&lt;/em&gt; is a &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;, the binary floating point value is losslessly converted to its exact decimal equivalent. This conversion can often require 53 or more digits of precision. For example, &lt;code&gt;Decimal(float('1.1'))&lt;/code&gt; converts to &lt;code&gt;Decimal('1.100000000000000088817841970012523233890533447265625')&lt;/code&gt;.</source>
          <target state="translated">場合&lt;em&gt;値が&lt;/em&gt;ある&lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt;、バイナリ浮動小数点値は、可逆その正確な小数等価に変換されます。多くの場合、この変換には53桁以上の精度が必要です。たとえば、 &lt;code&gt;Decimal(float('1.1'))&lt;/code&gt; は &lt;code&gt;Decimal('1.100000000000000088817841970012523233890533447265625')&lt;/code&gt; に変換されます。</target>
        </trans-unit>
        <trans-unit id="16a5fca024ec28b87ad8022c2ff864fdc8a9edce" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;value&lt;/em&gt; is a &lt;a href=&quot;stdtypes#tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt;, it should have three components, a sign (&lt;code&gt;0&lt;/code&gt; for positive or &lt;code&gt;1&lt;/code&gt; for negative), a &lt;a href=&quot;stdtypes#tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt; of digits, and an integer exponent. For example, &lt;code&gt;Decimal((0, (1, 4, 1, 4), -3))&lt;/code&gt; returns &lt;code&gt;Decimal('1.414')&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;value&lt;/em&gt;が&lt;a href=&quot;stdtypes#tuple&quot;&gt; &lt;code&gt;tuple&lt;/code&gt; &lt;/a&gt;場合、3つのコンポーネント、符号（正の場合は &lt;code&gt;0&lt;/code&gt; 、負の場合は &lt;code&gt;1&lt;/code&gt; ）、数字の&lt;a href=&quot;stdtypes#tuple&quot;&gt; &lt;code&gt;tuple&lt;/code&gt; &lt;/a&gt;、および整数の指数が必要です。たとえば、 &lt;code&gt;Decimal((0, (1, 4, 1, 4), -3))&lt;/code&gt; &lt;code&gt;Decimal('1.414')&lt;/code&gt; ）、-3））はDecimal（ '1.414'）を返します。</target>
        </trans-unit>
        <trans-unit id="e6a26098b49583f3821ec64d052c3aa7592a7689" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;value&lt;/em&gt; is not &lt;code&gt;None&lt;/code&gt;, this function prints &lt;code&gt;repr(value)&lt;/code&gt; to &lt;code&gt;sys.stdout&lt;/code&gt;, and saves &lt;em&gt;value&lt;/em&gt; in &lt;code&gt;builtins._&lt;/code&gt;. If &lt;code&gt;repr(value)&lt;/code&gt; is not encodable to &lt;code&gt;sys.stdout.encoding&lt;/code&gt; with &lt;code&gt;sys.stdout.errors&lt;/code&gt; error handler (which is probably &lt;code&gt;'strict'&lt;/code&gt;), encode it to &lt;code&gt;sys.stdout.encoding&lt;/code&gt; with &lt;code&gt;'backslashreplace'&lt;/code&gt; error handler.</source>
          <target state="translated">&lt;em&gt;value&lt;/em&gt;が &lt;code&gt;None&lt;/code&gt; でない場合、この関数は &lt;code&gt;repr(value)&lt;/code&gt; を &lt;code&gt;sys.stdout&lt;/code&gt; に出力し、 &lt;code&gt;builtins._&lt;/code&gt; に&lt;em&gt;値&lt;/em&gt;を保存し&lt;em&gt;ます&lt;/em&gt;。場合 &lt;code&gt;repr(value)&lt;/code&gt; にエンコード可能ではありません &lt;code&gt;sys.stdout.encoding&lt;/code&gt; で &lt;code&gt;sys.stdout.errors&lt;/code&gt; の（おそらくエラーハンドラ &lt;code&gt;'strict'&lt;/code&gt; ）、それをコード化する &lt;code&gt;sys.stdout.encoding&lt;/code&gt; で &lt;code&gt;'backslashreplace'&lt;/code&gt; エラーハンドラ。</target>
        </trans-unit>
        <trans-unit id="b6c068a3fde871a0618297833b8d4828d3974011" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;vars&lt;/em&gt; is provided, it must be a dictionary of variables that will update the dictionary return by &lt;a href=&quot;#sysconfig.get_config_vars&quot;&gt;&lt;code&gt;get_config_vars()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;varsを指定する&lt;/em&gt;場合は、&lt;a href=&quot;#sysconfig.get_config_vars&quot;&gt; &lt;code&gt;get_config_vars()&lt;/code&gt; &lt;/a&gt;によって返される辞書を更新する変数の辞書でなければなりません。</target>
        </trans-unit>
        <trans-unit id="a8460fba468dd9bc7ed1d9f47454b97a770706f8" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;vars&lt;/em&gt; is provided, it must be a dictionary of variables that will update the dictionary used to expand the paths.</source>
          <target state="translated">&lt;em&gt;varsを指定する&lt;/em&gt;場合は、パスの展開に使用される辞書を更新する変数の辞書である必要があります。</target>
        </trans-unit>
        <trans-unit id="65259ad55e207c66c56ade920231ad288fcf9123" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;verbosity&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, &lt;a href=&quot;doctest#doctest.testmod&quot;&gt;&lt;code&gt;doctest.testmod()&lt;/code&gt;&lt;/a&gt; is run with verbosity set to &lt;a href=&quot;#test.support.verbose&quot;&gt;&lt;code&gt;verbose&lt;/code&gt;&lt;/a&gt;. Otherwise, it is run with verbosity set to &lt;code&gt;None&lt;/code&gt;. &lt;em&gt;optionflags&lt;/em&gt; is passed as &lt;code&gt;optionflags&lt;/code&gt; to &lt;a href=&quot;doctest#doctest.testmod&quot;&gt;&lt;code&gt;doctest.testmod()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;verbosity&lt;/em&gt;が &lt;code&gt;None&lt;/code&gt; の場合、&lt;a href=&quot;doctest#doctest.testmod&quot;&gt; &lt;code&gt;doctest.testmod()&lt;/code&gt; &lt;/a&gt;は、verbosityを&lt;a href=&quot;#test.support.verbose&quot;&gt; &lt;code&gt;verbose&lt;/code&gt; に&lt;/a&gt;設定して実行されます。それ以外の場合は、冗長性を &lt;code&gt;None&lt;/code&gt; に設定して実行されます。&lt;em&gt;optionflagsはを&lt;/em&gt;として渡され &lt;code&gt;optionflags&lt;/code&gt; はし&lt;a href=&quot;doctest#doctest.testmod&quot;&gt; &lt;code&gt;doctest.testmod()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="942606e11a16e77c16cf6f2083e90d213368e12c" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;wait&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt; then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed. If &lt;em&gt;wait&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt; then this method will return immediately and the resources associated with the executor will be freed when all pending futures are done executing. Regardless of the value of &lt;em&gt;wait&lt;/em&gt;, the entire Python program will not exit until all pending futures are done executing.</source>
          <target state="translated">&lt;em&gt;wait&lt;/em&gt;が &lt;code&gt;True&lt;/code&gt; の場合、保留中のフューチャーがすべて実行され、executorに関連付けられたリソースが解放されるまで、このメソッドは戻りません。&lt;em&gt;wait&lt;/em&gt;が &lt;code&gt;False&lt;/code&gt; の場合、このメソッドはすぐに戻り、保留中のフューチャーがすべて実行されると、executorに関連付けられたリソースが解放されます。&lt;em&gt;wait&lt;/em&gt;の値に関係なく、保留中のフューチャーがすべて実行されるまで、Pythonプログラム全体は終了しません。</target>
        </trans-unit>
        <trans-unit id="1c093aaca359d099d06e48dc626af24bc9190ff1" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;write_through&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, calls to &lt;code&gt;write()&lt;/code&gt; are guaranteed not to be buffered: any data written on the &lt;a href=&quot;#io.TextIOWrapper&quot;&gt;&lt;code&gt;TextIOWrapper&lt;/code&gt;&lt;/a&gt; object is immediately handled to its underlying binary &lt;em&gt;buffer&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;write_through&lt;/em&gt;が &lt;code&gt;True&lt;/code&gt; の場合、 &lt;code&gt;write()&lt;/code&gt; への呼び出しはバッファーに入れられないことが保証されます&lt;a href=&quot;#io.TextIOWrapper&quot;&gt; &lt;code&gt;TextIOWrapper&lt;/code&gt; &lt;/a&gt;オブジェクトに書き込まれたデータはすべて、基礎となるバイナリ&lt;em&gt;バッファーに&lt;/em&gt;すぐに処理されます。</target>
        </trans-unit>
        <trans-unit id="4eabe5555eb349dd57c749df6fcb8345ed8d6ff8" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;x&lt;/em&gt; is not a number or if &lt;em&gt;base&lt;/em&gt; is given, then &lt;em&gt;x&lt;/em&gt; must be a string, &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;stdtypes#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt; instance representing an &lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#integers&quot;&gt;integer literal&lt;/a&gt; in radix &lt;em&gt;base&lt;/em&gt;. Optionally, the literal can be preceded by &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; (with no space in between) and surrounded by whitespace. A base-n literal consists of the digits 0 to n-1, with &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;z&lt;/code&gt; (or &lt;code&gt;A&lt;/code&gt; to &lt;code&gt;Z&lt;/code&gt;) having values 10 to 35. The default &lt;em&gt;base&lt;/em&gt; is 10. The allowed values are 0 and 2&amp;ndash;36. Base-2, -8, and -16 literals can be optionally prefixed with &lt;code&gt;0b&lt;/code&gt;/&lt;code&gt;0B&lt;/code&gt;, &lt;code&gt;0o&lt;/code&gt;/&lt;code&gt;0O&lt;/code&gt;, or &lt;code&gt;0x&lt;/code&gt;/&lt;code&gt;0X&lt;/code&gt;, as with integer literals in code. Base 0 means to interpret exactly as a code literal, so that the actual base is 2, 8, 10, or 16, and so that &lt;code&gt;int('010', 0)&lt;/code&gt; is not legal, while &lt;code&gt;int('010')&lt;/code&gt; is, as well as &lt;code&gt;int('010', 8)&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt;が数値ではない場合、または&lt;em&gt;base&lt;/em&gt;が指定されている場合、&lt;em&gt;x&lt;/em&gt;は、基数&lt;em&gt;baseの&lt;/em&gt;&lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#integers&quot;&gt;整数リテラル&lt;/a&gt;を表す文字列、&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;、またはバイト&lt;a href=&quot;stdtypes#bytearray&quot;&gt; &lt;code&gt;bytearray&lt;/code&gt; &lt;/a&gt;インスタンスでなければなりません。オプションで、リテラルの前に &lt;code&gt;+&lt;/code&gt; または &lt;code&gt;-&lt;/code&gt; （間にスペースなし）を置き、空白で囲むことができます。 base-nリテラルは、0からn-1の数字で構成され、 &lt;code&gt;a&lt;/code&gt; から &lt;code&gt;z&lt;/code&gt; （または &lt;code&gt;A&lt;/code&gt; から &lt;code&gt;Z&lt;/code&gt; ）の値は10から35 です。デフォルトの&lt;em&gt;基数&lt;/em&gt;は10です。許可される値は0と2から36です。 Base-2、-8、および-16リテラルには、オプションで &lt;code&gt;0b&lt;/code&gt; をプレフィックスとして付けることができます&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;/ &lt;code&gt;0B&lt;/code&gt; 、 &lt;code&gt;0o&lt;/code&gt; / &lt;code&gt;0O&lt;/code&gt; 、または &lt;code&gt;0x&lt;/code&gt; / &lt;code&gt;0X&lt;/code&gt; 、コード内の整数リテラルと同様。ベース0は、コードリテラルとして正確に解釈することを意味します。したがって、実際のベースは2、8、10、または16であり、 &lt;code&gt;int('010', 0)&lt;/code&gt; は無効ですが、 &lt;code&gt;int('010')&lt;/code&gt; は、 &lt;code&gt;int('010', 8)&lt;/code&gt; も同様です。</target>
        </trans-unit>
        <trans-unit id="a4ca00c56cdce0b10d4e7ca75f4203a4d4dbe4b3" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;y&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, &lt;em&gt;x&lt;/em&gt; must be a pair of coordinates or a &lt;a href=&quot;#turtle.Vec2D&quot;&gt;&lt;code&gt;Vec2D&lt;/code&gt;&lt;/a&gt; (e.g. as returned by &lt;a href=&quot;#turtle.pos&quot;&gt;&lt;code&gt;pos()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;y&lt;/em&gt;が &lt;code&gt;None&lt;/code&gt; の場合、&lt;em&gt;x&lt;/em&gt;は座標のペアまたは&lt;a href=&quot;#turtle.Vec2D&quot;&gt; &lt;code&gt;Vec2D&lt;/code&gt; &lt;/a&gt;（たとえば、&lt;a href=&quot;#turtle.pos&quot;&gt; &lt;code&gt;pos()&lt;/code&gt; &lt;/a&gt;によって返される）でなければなりません。</target>
        </trans-unit>
        <trans-unit id="fdae1f0f9315700b86b3f53ba94aa3d7efe1b994" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;zdict&lt;/em&gt; is a mutable object (such as a &lt;a href=&quot;stdtypes#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt;), you must not modify its contents between the call to &lt;a href=&quot;#zlib.decompressobj&quot;&gt;&lt;code&gt;decompressobj()&lt;/code&gt;&lt;/a&gt; and the first call to the decompressor&amp;rsquo;s &lt;code&gt;decompress()&lt;/code&gt; method.</source>
          <target state="translated">場合&lt;em&gt;zdictは&lt;/em&gt;（のような変更可能なオブジェクトである&lt;a href=&quot;stdtypes#bytearray&quot;&gt; &lt;code&gt;bytearray&lt;/code&gt; &lt;/a&gt;）、あなたはへの呼び出しの間でその内容を変更してはなりません&lt;a href=&quot;#zlib.decompressobj&quot;&gt; &lt;code&gt;decompressobj()&lt;/code&gt; &lt;/a&gt;およびデコンプレッサのを最初に呼び出し &lt;code&gt;decompress()&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="98b6444e6bf4fa2e7a824739c1040724489b08e5" translate="yes" xml:space="preserve">
          <source>If &lt;strong&gt;name&lt;/strong&gt; has no leading dots, then &lt;strong&gt;name&lt;/strong&gt; is simply returned. This allows for usage such as &lt;code&gt;importlib.util.resolve_name('sys', __package__)&lt;/code&gt; without doing a check to see if the &lt;strong&gt;package&lt;/strong&gt; argument is needed.</source>
          <target state="translated">&lt;strong&gt;名前&lt;/strong&gt;に先行ドットがない場合、&lt;strong&gt;名前&lt;/strong&gt;は単に返されます。これにより、&lt;strong&gt;package&lt;/strong&gt;引数が必要かどうかを確認するチェックを行わなくても、 &lt;code&gt;importlib.util.resolve_name('sys', __package__)&lt;/code&gt; などの使用が可能になります。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e4184d0852443b8deb67c16f50527b5c78f15fd7" translate="yes" xml:space="preserve">
          <source>If &lt;strong&gt;name&lt;/strong&gt; is for a submodule (contains a dot), the parent module is automatically imported.</source>
          <target state="translated">場合&lt;strong&gt;名前は&lt;/strong&gt;（ドットが含まれている）サブモジュール用で、親モジュールが自動的にインポートされます。</target>
        </trans-unit>
        <trans-unit id="a96ea5a5013dd3fe9b6e8602e6df4e7d733e2d24" translate="yes" xml:space="preserve">
          <source>If EOF is reached before the complete separator is found, an &lt;a href=&quot;asyncio-exceptions#asyncio.IncompleteReadError&quot;&gt;&lt;code&gt;IncompleteReadError&lt;/code&gt;&lt;/a&gt; exception is raised, and the internal buffer is reset. The &lt;a href=&quot;asyncio-exceptions#asyncio.IncompleteReadError.partial&quot;&gt;&lt;code&gt;IncompleteReadError.partial&lt;/code&gt;&lt;/a&gt; attribute may contain a portion of the separator.</source>
          <target state="translated">完全なセパレータが見つかる前にEOFに達すると、&lt;a href=&quot;asyncio-exceptions#asyncio.IncompleteReadError&quot;&gt; &lt;code&gt;IncompleteReadError&lt;/code&gt; &lt;/a&gt;例外が発生し、内部バッファがリセットされます。&lt;a href=&quot;asyncio-exceptions#asyncio.IncompleteReadError.partial&quot;&gt; &lt;code&gt;IncompleteReadError.partial&lt;/code&gt; の&lt;/a&gt;属性は、セパレータの部分を含んでいてもよいです。</target>
        </trans-unit>
        <trans-unit id="64966df5aaf0fe93384998cc74db09b1b1e0908b" translate="yes" xml:space="preserve">
          <source>If EOF is received and &lt;code&gt;\n&lt;/code&gt; was not found, the method returns partially read data.</source>
          <target state="translated">EOFが受信され、 &lt;code&gt;\n&lt;/code&gt; が見つからなかった場合、メソッドは部分的に読み取られたデータを返します。</target>
        </trans-unit>
        <trans-unit id="37ccc310a3c93f0e5b0c94cdc94d47902bd4a292" translate="yes" xml:space="preserve">
          <source>If EOF is received and the internal buffer is empty, return an empty &lt;code&gt;bytes&lt;/code&gt; object.</source>
          <target state="translated">EOFが受信され、内部バッファーが空の場合、空の &lt;code&gt;bytes&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="b333fc07ff7677c5890283c373e9cd05a53e6b15" translate="yes" xml:space="preserve">
          <source>If EOF was received and the internal buffer is empty, return an empty &lt;code&gt;bytes&lt;/code&gt; object.</source>
          <target state="translated">EOFが受信され、内部バッファが空の場合、空の &lt;code&gt;bytes&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="565904950e6bb3477bfa33cb4d9c35fc162ea0d1" translate="yes" xml:space="preserve">
          <source>If IDLE is started with the -n command line switch it will run in a single process and will not create the subprocess which runs the RPC Python execution server. This can be useful if Python cannot create the subprocess or the RPC socket interface on your platform. However, in this mode user code is not isolated from IDLE itself. Also, the environment is not restarted when Run/Run Module (F5) is selected. If your code has been modified, you must reload() the affected modules and re-import any specific items (e.g. from foo import baz) if the changes are to take effect. For these reasons, it is preferable to run IDLE with the default subprocess if at all possible.</source>
          <target state="translated">n コマンドラインスイッチで IDLE が起動された場合、単一プロセスで実行され、RPC Python 実行サーバを実行するサブプロセスは作成されません。これは、Pythonがサブプロセスやプラットフォーム上のRPCソケットインターフェイスを作成できない場合に便利です。しかし、このモードでは、ユーザーコードはIDLE自体から分離されません。また、Run/Run Module (F5)を選択しても環境は再起動されません。コードが変更されている場合は、影響を受けるモジュールをリロード()し、変更が有効になるように特定の項目を再インポートしなければなりません (例:foo import baz)。これらの理由から、可能な限りデフォルトのサブプロセスで IDLE を実行することが望ましいです。</target>
        </trans-unit>
        <trans-unit id="4b89fe059f09f502735b8f9ac90a0efcb1f4144f" translate="yes" xml:space="preserve">
          <source>If IDLE quits with no message, and it was not started from a console, try starting from a console (&lt;code&gt;python -m idlelib&lt;/code&gt;) and see if a message appears.</source>
          <target state="translated">IDLEがメッセージなしで終了し、コンソールから開始されなかった場合は、コンソール（ &lt;code&gt;python -m idlelib&lt;/code&gt; ）から開始して、メッセージが表示されるかどうかを確認してください。</target>
        </trans-unit>
        <trans-unit id="6da326dbc2e0f620d5b3562ac4003336f6c4fcbf" translate="yes" xml:space="preserve">
          <source>If Python is configured &amp;ndash;with-pydebug, it also performs some expensive internal consistency checks.</source>
          <target state="translated">Pythonが&amp;ndash;with-pydebugで構成されている場合は、高価な内部整合性チェックも実行されます。</target>
        </trans-unit>
        <trans-unit id="7e8ad6a5bf4b4e800e3d3c07556ce745ad232c22" translate="yes" xml:space="preserve">
          <source>If TOS is &lt;code&gt;NULL&lt;/code&gt; (pushed by &lt;a href=&quot;#opcode-BEGIN_FINALLY&quot;&gt;&lt;code&gt;BEGIN_FINALLY&lt;/code&gt;&lt;/a&gt;) continue from the next instruction. TOS is popped.</source>
          <target state="translated">TOSが &lt;code&gt;NULL&lt;/code&gt; の場合（&lt;a href=&quot;#opcode-BEGIN_FINALLY&quot;&gt; &lt;code&gt;BEGIN_FINALLY&lt;/code&gt; &lt;/a&gt;によってプッシュされる）、次の命令から続行します。TOSがポップされます。</target>
        </trans-unit>
        <trans-unit id="4cf9fa5811d78e12561243fd40b78efba546d577" translate="yes" xml:space="preserve">
          <source>If TOS is &lt;code&gt;NULL&lt;/code&gt; or an integer (pushed by &lt;a href=&quot;#opcode-BEGIN_FINALLY&quot;&gt;&lt;code&gt;BEGIN_FINALLY&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#opcode-CALL_FINALLY&quot;&gt;&lt;code&gt;CALL_FINALLY&lt;/code&gt;&lt;/a&gt;) it is popped from the stack.</source>
          <target state="translated">TOSが &lt;code&gt;NULL&lt;/code&gt; または整数（&lt;a href=&quot;#opcode-BEGIN_FINALLY&quot;&gt; &lt;code&gt;BEGIN_FINALLY&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#opcode-CALL_FINALLY&quot;&gt; &lt;code&gt;CALL_FINALLY&lt;/code&gt; &lt;/a&gt;によってプッシュされる）の場合、それはスタックからポップされます。</target>
        </trans-unit>
        <trans-unit id="f48c5490bf7b7f8935f8dee66c02900d2c4ab8df" translate="yes" xml:space="preserve">
          <source>If TOS is &lt;code&gt;NULL&lt;/code&gt;, calls &lt;code&gt;SECOND(None, None, None)&lt;/code&gt;, removes the function from the stack, leaving TOS, and pushes &lt;code&gt;None&lt;/code&gt; to the stack. Otherwise calls &lt;code&gt;SEVENTH(TOP, SECOND, THIRD)&lt;/code&gt;, shifts the bottom 3 values of the stack down, replaces the empty spot with &lt;code&gt;NULL&lt;/code&gt; and pushes TOS. Finally pushes the result of the call.</source>
          <target state="translated">TOSが &lt;code&gt;NULL&lt;/code&gt; の場合、 &lt;code&gt;SECOND(None, None, None)&lt;/code&gt; 呼び出し、スタックから関数を削除してTOSを残し、 &lt;code&gt;None&lt;/code&gt; をスタックにプッシュします。それ以外の場合は &lt;code&gt;SEVENTH(TOP, SECOND, THIRD)&lt;/code&gt; 呼び出し、スタックの下位3つの値を下にシフトし、空のスポットを &lt;code&gt;NULL&lt;/code&gt; に置き換えてTOSをプッシュします。最後に、呼び出しの結果をプッシュします。</target>
        </trans-unit>
        <trans-unit id="abb8b40f1da2f2b2347978a298ac651c1725f8e8" translate="yes" xml:space="preserve">
          <source>If TOS is an exception type (pushed when an exception has been raised) 6 values are popped from the stack, the first three popped values are used to re-raise the exception and the last three popped values are used to restore the exception state. An exception handler block is removed from the block stack.</source>
          <target state="translated">TOSが例外タイプの場合(例外が発生したときにプッシュされます)、スタックから6つの値がポップされ、最初の3つの値は例外を再発生させるために使用され、最後の3つの値は例外の状態を復元するために使用されます。ブロックスタックから例外ハンドラブロックが削除されます。</target>
        </trans-unit>
        <trans-unit id="2302c4982e8b01f632b216292ea649801c6c0d96" translate="yes" xml:space="preserve">
          <source>If TOS is an exception type (pushed when an exception has been raised) 6 values are popped from the stack, the last three popped values are used to restore the exception state. An exception handler block is removed from the block stack.</source>
          <target state="translated">TOSが例外タイプの場合(例外が発生したときにプッシュされます)、6つの値がスタックからポップされ、最後の3つのポップされた値が例外状態を復元するために使用されます。例外ハンドラブロックはブロックスタックから削除されます。</target>
        </trans-unit>
        <trans-unit id="fd2cf047c9942e0f550e6077fa8d21cb90b76cb7" translate="yes" xml:space="preserve">
          <source>If TOS is an integer (pushed by &lt;a href=&quot;#opcode-CALL_FINALLY&quot;&gt;&lt;code&gt;CALL_FINALLY&lt;/code&gt;&lt;/a&gt;), sets the bytecode counter to TOS. TOS is popped.</source>
          <target state="translated">TOSが整数の場合（&lt;a href=&quot;#opcode-CALL_FINALLY&quot;&gt; &lt;code&gt;CALL_FINALLY&lt;/code&gt; &lt;/a&gt;によってプッシュされる）、バイトコードカウンターをTOSに設定します。TOSがポップされます。</target>
        </trans-unit>
        <trans-unit id="f6c824aa2841edf27744c99adfaeb683cc13ab98" translate="yes" xml:space="preserve">
          <source>If TOS is false, sets the bytecode counter to &lt;em&gt;target&lt;/em&gt; and leaves TOS on the stack. Otherwise (TOS is true), TOS is popped.</source>
          <target state="translated">TOSがfalseの場合、バイトコードカウンターを&lt;em&gt;ターゲットに&lt;/em&gt;設定し、TOSをスタックに残します。それ以外の場合（TOSがtrue）、TOSがポップされます。</target>
        </trans-unit>
        <trans-unit id="38d252fb2c0b51db170eaaf60178e5958dde0da6" translate="yes" xml:space="preserve">
          <source>If TOS is false, sets the bytecode counter to &lt;em&gt;target&lt;/em&gt;. TOS is popped.</source>
          <target state="translated">TOSがfalseの場合、バイトコードカウンターを&lt;em&gt;targetに設定し&lt;/em&gt;ます。TOSがポップされます。</target>
        </trans-unit>
        <trans-unit id="4d11fcb64b49991d5e23ff5378876664a570eb06" translate="yes" xml:space="preserve">
          <source>If TOS is true, sets the bytecode counter to &lt;em&gt;target&lt;/em&gt; and leaves TOS on the stack. Otherwise (TOS is false), TOS is popped.</source>
          <target state="translated">TOSがtrueの場合、バイトコードカウンターを&lt;em&gt;ターゲットに&lt;/em&gt;設定し、TOSをスタックに残します。それ以外の場合（TOSがfalse）、TOSがポップされます。</target>
        </trans-unit>
        <trans-unit id="8563156513d08688acbcc0dcf86ef18bbf609716" translate="yes" xml:space="preserve">
          <source>If TOS is true, sets the bytecode counter to &lt;em&gt;target&lt;/em&gt;. TOS is popped.</source>
          <target state="translated">TOSがtrueの場合、バイトコードカウンターを&lt;em&gt;targetに設定し&lt;/em&gt;ます。TOSがポップされます。</target>
        </trans-unit>
        <trans-unit id="7cc1fd538beeedcb8c3c03d14bb5f0c903b80416" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;#asyncio.Queue.join&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt; is currently blocking, it will resume when all items have been processed (meaning that a &lt;a href=&quot;#asyncio.Queue.task_done&quot;&gt;&lt;code&gt;task_done()&lt;/code&gt;&lt;/a&gt; call was received for every item that had been &lt;a href=&quot;#asyncio.Queue.put&quot;&gt;&lt;code&gt;put()&lt;/code&gt;&lt;/a&gt; into the queue).</source>
          <target state="translated">場合は&lt;a href=&quot;#asyncio.Queue.join&quot;&gt; &lt;code&gt;join()&lt;/code&gt; &lt;/a&gt;、現在ブロックしているすべての項目が（つまり処理されたとき、それが再開します&lt;a href=&quot;#asyncio.Queue.task_done&quot;&gt; &lt;code&gt;task_done()&lt;/code&gt; &lt;/a&gt;の呼び出しがされていたすべてのアイテムのために受信された&lt;a href=&quot;#asyncio.Queue.put&quot;&gt; &lt;code&gt;put()&lt;/code&gt; &lt;/a&gt;キューに）。</target>
        </trans-unit>
        <trans-unit id="0f22d8dc16cef20350827c1688943ea1d51e1b6e" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;#dataclasses.field&quot;&gt;&lt;code&gt;field()&lt;/code&gt;&lt;/a&gt; specifies a &lt;code&gt;default_factory&lt;/code&gt;, it is called with zero arguments when a default value for the field is needed. For example, to create a new instance of a list, use:</source>
          <target state="translated">&lt;a href=&quot;#dataclasses.field&quot;&gt; &lt;code&gt;field()&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;default_factory&lt;/code&gt; を指定している場合、フィールドのデフォルト値が必要なときに、引数なしで呼び出されます。たとえば、リストの新しいインスタンスを作成するには、次を使用します。</target>
        </trans-unit>
        <trans-unit id="88fb56a53222e7bda82191727d7975a25a26bcde" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;#queue.Queue.join&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt; is currently blocking, it will resume when all items have been processed (meaning that a &lt;a href=&quot;#queue.Queue.task_done&quot;&gt;&lt;code&gt;task_done()&lt;/code&gt;&lt;/a&gt; call was received for every item that had been &lt;a href=&quot;#queue.Queue.put&quot;&gt;&lt;code&gt;put()&lt;/code&gt;&lt;/a&gt; into the queue).</source>
          <target state="translated">場合は&lt;a href=&quot;#queue.Queue.join&quot;&gt; &lt;code&gt;join()&lt;/code&gt; &lt;/a&gt;、現在ブロックしているすべての項目が（つまり処理されたとき、それが再開します&lt;a href=&quot;#queue.Queue.task_done&quot;&gt; &lt;code&gt;task_done()&lt;/code&gt; &lt;/a&gt;の呼び出しがされていたすべてのアイテムのために受信された&lt;a href=&quot;#queue.Queue.put&quot;&gt; &lt;code&gt;put()&lt;/code&gt; &lt;/a&gt;キューに）。</target>
        </trans-unit>
        <trans-unit id="8738b4c21d7c83839b7de0b30dc8bf54b691da48" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;asyncio-future#asyncio.Future.set_exception&quot;&gt;&lt;code&gt;Future.set_exception()&lt;/code&gt;&lt;/a&gt; is called but the Future object is never awaited on, the exception would never be propagated to the user code. In this case, asyncio would emit a log message when the Future object is garbage collected.</source>
          <target state="translated">もし&lt;a href=&quot;asyncio-future#asyncio.Future.set_exception&quot;&gt; &lt;code&gt;Future.set_exception()&lt;/code&gt; &lt;/a&gt;と呼ばれているが、今後のオブジェクトが上待望されることはありません、例外がユーザーコードに伝播することはないだろう。この場合、Futureオブジェクトがガベージコレクションされると、asyncioはログメッセージを発行します。</target>
        </trans-unit>
        <trans-unit id="8e4d1e78b745e52d4ebe30db3c57ec62db32a37b" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;queue#queue.Queue.join&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt; is currently blocking, it will resume when all items have been processed (meaning that a &lt;a href=&quot;#multiprocessing.JoinableQueue.task_done&quot;&gt;&lt;code&gt;task_done()&lt;/code&gt;&lt;/a&gt; call was received for every item that had been &lt;a href=&quot;#multiprocessing.Queue.put&quot;&gt;&lt;code&gt;put()&lt;/code&gt;&lt;/a&gt; into the queue).</source>
          <target state="translated">場合は&lt;a href=&quot;queue#queue.Queue.join&quot;&gt; &lt;code&gt;join()&lt;/code&gt; &lt;/a&gt;、現在ブロックしているすべての項目が（つまり処理されたとき、それが再開します&lt;a href=&quot;#multiprocessing.JoinableQueue.task_done&quot;&gt; &lt;code&gt;task_done()&lt;/code&gt; &lt;/a&gt;の呼び出しがされていたすべてのアイテムのために受信された&lt;a href=&quot;#multiprocessing.Queue.put&quot;&gt; &lt;code&gt;put()&lt;/code&gt; &lt;/a&gt;キューに）。</target>
        </trans-unit>
        <trans-unit id="d195caefdbc4c716fdba586aa4513e02d88af028" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;venv#venv-def&quot;&gt;virtual environment&lt;/a&gt; is in effect, this value will be changed in &lt;code&gt;site.py&lt;/code&gt; to point to the virtual environment. The value for the Python installation will still be available, via &lt;a href=&quot;#sys.base_exec_prefix&quot;&gt;&lt;code&gt;base_exec_prefix&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合は&lt;a href=&quot;venv#venv-def&quot;&gt;、仮想環境が&lt;/a&gt;有効である、この値が変更されます &lt;code&gt;site.py&lt;/code&gt; 仮想環境へのポイントに。Pythonインストールの値は、&lt;a href=&quot;#sys.base_exec_prefix&quot;&gt; &lt;code&gt;base_exec_prefix&lt;/code&gt; &lt;/a&gt;を介して引き続き利用できます。</target>
        </trans-unit>
        <trans-unit id="cadf44283b95910d5b7d617daadb92f12ea1588c" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;venv#venv-def&quot;&gt;virtual environment&lt;/a&gt; is in effect, this value will be changed in &lt;code&gt;site.py&lt;/code&gt; to point to the virtual environment. The value for the Python installation will still be available, via &lt;a href=&quot;#sys.base_prefix&quot;&gt;&lt;code&gt;base_prefix&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合は&lt;a href=&quot;venv#venv-def&quot;&gt;、仮想環境が&lt;/a&gt;有効である、この値が変更されます &lt;code&gt;site.py&lt;/code&gt; 仮想環境へのポイントに。Pythonインストールの値は、&lt;a href=&quot;#sys.base_prefix&quot;&gt; &lt;code&gt;base_prefix&lt;/code&gt; &lt;/a&gt;を介して引き続き利用できます。</target>
        </trans-unit>
        <trans-unit id="0fe39842fffdbab07a3dcbd6ca0ebfc6e8ddea4e" translate="yes" xml:space="preserve">
          <source>If a &lt;em&gt;func&lt;/em&gt; call raises an exception, then that exception will be raised when its value is retrieved from the iterator.</source>
          <target state="translated">場合&lt;em&gt;FUNCの&lt;/em&gt;呼び出しが例外を発生させ、その値は、イテレータから取得されたときに、その例外が発生します。</target>
        </trans-unit>
        <trans-unit id="514035568d6c1e520c43a7a94949e224b330525e" translate="yes" xml:space="preserve">
          <source>If a &lt;em&gt;weights&lt;/em&gt; sequence is specified, selections are made according to the relative weights. Alternatively, if a &lt;em&gt;cum_weights&lt;/em&gt; sequence is given, the selections are made according to the cumulative weights (perhaps computed using &lt;a href=&quot;itertools#itertools.accumulate&quot;&gt;&lt;code&gt;itertools.accumulate()&lt;/code&gt;&lt;/a&gt;). For example, the relative weights &lt;code&gt;[10, 5, 30, 5]&lt;/code&gt; are equivalent to the cumulative weights &lt;code&gt;[10, 15, 45, 50]&lt;/code&gt;. Internally, the relative weights are converted to cumulative weights before making selections, so supplying the cumulative weights saves work.</source>
          <target state="translated">&lt;em&gt;重み&lt;/em&gt;シーケンスが指定されている場合、選択は相対重みに従って行われます。あるいは、&lt;em&gt;cum_weights&lt;/em&gt;シーケンスが指定されている場合、選択は累積ウェイトに従って行われます（おそらく&lt;a href=&quot;itertools#itertools.accumulate&quot;&gt; &lt;code&gt;itertools.accumulate()&lt;/code&gt; &lt;/a&gt;を使用して計算されます）。たとえば、相対ウェイト &lt;code&gt;[10, 5, 30, 5]&lt;/code&gt; 10、5、30、5 ]は、累積ウェイト &lt;code&gt;[10, 15, 45, 50]&lt;/code&gt; 10、15、45、50 ]と同等です。内部的には、相対的な重みは選択を行う前に累積的な重みに変換されるため、累積的な重みを指定すると作業が節約されます。</target>
        </trans-unit>
        <trans-unit id="4f41fb59be7ba020951a7118cd7f719bcea2d8d7" translate="yes" xml:space="preserve">
          <source>If a DOM implementation supports modification of the document, the &lt;code&gt;NodeList&lt;/code&gt; implementation must also support the &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__setitem__&quot;&gt;&lt;code&gt;__setitem__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__delitem__&quot;&gt;&lt;code&gt;__delitem__()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">DOM実装がドキュメントの変更をサポートする場合、 &lt;code&gt;NodeList&lt;/code&gt; 実装は&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__setitem__&quot;&gt; &lt;code&gt;__setitem__()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__delitem__&quot;&gt; &lt;code&gt;__delitem__()&lt;/code&gt; &lt;/a&gt;メソッドもサポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="5a7b9e9c072e9d7f0dad90957cde9dde1a308b30" translate="yes" xml:space="preserve">
          <source>If a Python build or implementation cannot reasonably compute this information, &lt;a href=&quot;#sys.getallocatedblocks&quot;&gt;&lt;code&gt;getallocatedblocks()&lt;/code&gt;&lt;/a&gt; is allowed to return 0 instead.</source>
          <target state="translated">Pythonのビルドまたは実装がこの情報を合理的に計算できない場合、&lt;a href=&quot;#sys.getallocatedblocks&quot;&gt; &lt;code&gt;getallocatedblocks()&lt;/code&gt; &lt;/a&gt;は代わりに0を返すことができます。</target>
        </trans-unit>
        <trans-unit id="60da62d17196410fef26f1732934782af59026ed" translate="yes" xml:space="preserve">
          <source>If a bytes object is specified as first argument, the buffer is made one item larger than its length so that the last element in the array is a NUL termination character. An integer can be passed as second argument which allows specifying the size of the array if the length of the bytes should not be used.</source>
          <target state="translated">第一引数に bytes オブジェクトを指定した場合、配列の最後の要素が NUL 終了文字になるように、バッファをその長さよりも 1 つ大きくします。第二引数に整数を渡すことができ、バイト長を使用しない場合は配列のサイズを指定することができます。</target>
        </trans-unit>
        <trans-unit id="e0a9df58cde01c85e3e361479c2eaa47542a1d1e" translate="yes" xml:space="preserve">
          <source>If a class is used as a spec then the return value of the mock (the instance of the class) will have the same spec. You can use a class as the spec for an instance object by passing &lt;code&gt;instance=True&lt;/code&gt;. The returned mock will only be callable if instances of the mock are callable.</source>
          <target state="translated">クラスが仕様として使用されている場合、モック（クラスのインスタンス）の戻り値は同じ仕様になります。 &lt;code&gt;instance=True&lt;/code&gt; を渡すことにより、クラスをインスタンスオブジェクトの仕様として使用できます。返されたモックは、モックのインスタンスが呼び出し可能である場合にのみ呼び出し可能です。</target>
        </trans-unit>
        <trans-unit id="b4f43db4f49808e0e46033f11efdb30feae93504" translate="yes" xml:space="preserve">
          <source>If a client certificate is needed for the connection, it can be added with &lt;a href=&quot;#ssl.SSLContext.load_cert_chain&quot;&gt;&lt;code&gt;SSLContext.load_cert_chain()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">接続にクライアント証明書が必要な場合は、&lt;a href=&quot;#ssl.SSLContext.load_cert_chain&quot;&gt; &lt;code&gt;SSLContext.load_cert_chain()&lt;/code&gt; &lt;/a&gt;を使用して追加できます。</target>
        </trans-unit>
        <trans-unit id="58b445a457d97e0f901bef2a89a3d771923959d7" translate="yes" xml:space="preserve">
          <source>If a combination of Flag members is not named, the &lt;a href=&quot;functions#repr&quot;&gt;&lt;code&gt;repr()&lt;/code&gt;&lt;/a&gt; will include all named flags and all named combinations of flags that are in the value:</source>
          <target state="translated">Flagメンバーの組み合わせに名前が付けられていない場合、&lt;a href=&quot;functions#repr&quot;&gt; &lt;code&gt;repr()&lt;/code&gt; &lt;/a&gt;には、値に含まれるすべての名前付きフラグとすべての名前付きフラグの組み合わせが含まれます。</target>
        </trans-unit>
        <trans-unit id="5ec6b65a6b4e8ded11a923539e5e70636ccd0baa" translate="yes" xml:space="preserve">
          <source>If a derived class does not wish to comply with this requirement, all of the special methods supported by this class will need to be overridden; please consult the sources for information about the methods which need to be provided in that case.</source>
          <target state="translated">派生クラスがこの要件を遵守したくない場合、このクラスでサポートされているすべての特別なメソッドをオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="06eec7a5cb652201659973dd7752b18166617a4a" translate="yes" xml:space="preserve">
          <source>If a fallback has been set, forward &lt;a href=&quot;#gettext.npgettext&quot;&gt;&lt;code&gt;npgettext()&lt;/code&gt;&lt;/a&gt; to the fallback. Otherwise, return the translated message. Overridden in derived classes.</source>
          <target state="translated">フォールバックが設定されている場合は、&lt;a href=&quot;#gettext.npgettext&quot;&gt; &lt;code&gt;npgettext()&lt;/code&gt; &lt;/a&gt;をフォールバックに転送します。それ以外の場合は、翻訳されたメッセージを返します。派生クラスでオーバーライドされます。</target>
        </trans-unit>
        <trans-unit id="dc269c958946b76f1994096408ccbb977101ec26" translate="yes" xml:space="preserve">
          <source>If a fallback has been set, forward &lt;a href=&quot;#gettext.pgettext&quot;&gt;&lt;code&gt;pgettext()&lt;/code&gt;&lt;/a&gt; to the fallback. Otherwise, return the translated message. Overridden in derived classes.</source>
          <target state="translated">フォールバックが設定されている場合は、&lt;a href=&quot;#gettext.pgettext&quot;&gt; &lt;code&gt;pgettext()&lt;/code&gt; &lt;/a&gt;をフォールバックに転送します。それ以外の場合は、翻訳されたメッセージを返します。派生クラスでオーバーライドされます。</target>
        </trans-unit>
        <trans-unit id="31061e62016f356b1c4c0fbc4aa1f88db7f71ad7" translate="yes" xml:space="preserve">
          <source>If a fallback has been set, forward &lt;code&gt;gettext()&lt;/code&gt; to the fallback. Otherwise, return &lt;em&gt;message&lt;/em&gt;. Overridden in derived classes.</source>
          <target state="translated">フォールバックが設定されている場合は、 &lt;code&gt;gettext()&lt;/code&gt; をフォールバックに転送します。それ以外の場合は、&lt;em&gt;メッセージを&lt;/em&gt;返し&lt;em&gt;ます&lt;/em&gt;。派生クラスでオーバーライドされます。</target>
        </trans-unit>
        <trans-unit id="1742c3486fc827c0e30b5e6a8b02073a52c6f50e" translate="yes" xml:space="preserve">
          <source>If a fallback has been set, forward &lt;code&gt;ngettext()&lt;/code&gt; to the fallback. Otherwise, return &lt;em&gt;singular&lt;/em&gt; if &lt;em&gt;n&lt;/em&gt; is 1; return &lt;em&gt;plural&lt;/em&gt; otherwise. Overridden in derived classes.</source>
          <target state="translated">フォールバックが設定されている場合、 &lt;code&gt;ngettext()&lt;/code&gt; をフォールバックに転送します。それ以外の場合、&lt;em&gt;n&lt;/em&gt;が1の場合は&lt;em&gt;単数を&lt;/em&gt;返します。それ以外の場合は&lt;em&gt;複数を&lt;/em&gt;返します。派生クラスでオーバーライドされます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8d7b45636976cf2d05c5fad71555cb6ec8a500e2" translate="yes" xml:space="preserve">
          <source>If a field is excluded from &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt; (using &lt;code&gt;init=False&lt;/code&gt;) and the field also specifies &lt;code&gt;default_factory&lt;/code&gt;, then the default factory function will always be called from the generated &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt; function. This happens because there is no other way to give the field an initial value.</source>
          <target state="translated">フィールドが&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt;から除外され（ &lt;code&gt;init=False&lt;/code&gt; を使用）、フィールドに &lt;code&gt;default_factory&lt;/code&gt; も指定されている場合、デフォルトのファクトリー関数は常に、生成された&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt;関数から呼び出されます。これは、フィールドに初期値を与える他の方法がないために発生します。</target>
        </trans-unit>
        <trans-unit id="565807013493930067f8f17afe47ed0e67b8a0c2" translate="yes" xml:space="preserve">
          <source>If a field represents an uploaded file, accessing the value via the &lt;code&gt;value&lt;/code&gt; attribute or the &lt;code&gt;getvalue()&lt;/code&gt; method reads the entire file in memory as bytes. This may not be what you want. You can test for an uploaded file by testing either the &lt;code&gt;filename&lt;/code&gt; attribute or the &lt;code&gt;file&lt;/code&gt; attribute. You can then read the data from the &lt;code&gt;file&lt;/code&gt; attribute before it is automatically closed as part of the garbage collection of the &lt;code&gt;FieldStorage&lt;/code&gt; instance (the &lt;a href=&quot;io#io.RawIOBase.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;io#io.IOBase.readline&quot;&gt;&lt;code&gt;readline()&lt;/code&gt;&lt;/a&gt; methods will return bytes):</source>
          <target state="translated">フィールドがアップロードされたファイルを表す場合、 &lt;code&gt;value&lt;/code&gt; 属性または &lt;code&gt;getvalue()&lt;/code&gt; メソッドを介して値にアクセスすると、メモリ内のファイル全体がバイトとして読み込まれます。これはあなたが望むものではないかもしれません。 &lt;code&gt;filename&lt;/code&gt; 属性またはファイル属性をテストすることにより、アップロードされたファイルをテスト &lt;code&gt;file&lt;/code&gt; ます。その後、 &lt;code&gt;FieldStorage&lt;/code&gt; インスタンスのガベージコレクションの一部として自動的に閉じる前に、 &lt;code&gt;file&lt;/code&gt; 属性からデータを読み取ることができます（&lt;a href=&quot;io#io.RawIOBase.read&quot;&gt; &lt;code&gt;read()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;io#io.IOBase.readline&quot;&gt; &lt;code&gt;readline()&lt;/code&gt; &lt;/a&gt;メソッドとreadline（）メソッドはバイトを返します）。</target>
        </trans-unit>
        <trans-unit id="2ac00aa24d225f2a25916402cc6d54632f003730" translate="yes" xml:space="preserve">
          <source>If a file &lt;code&gt;.pdbrc&lt;/code&gt; exists in the user&amp;rsquo;s home directory or in the current directory, it is read in and executed as if it had been typed at the debugger prompt. This is particularly useful for aliases. If both files exist, the one in the home directory is read first and aliases defined there can be overridden by the local file.</source>
          <target state="translated">ユーザーのホームディレクトリまたは現在のディレクトリにファイル &lt;code&gt;.pdbrc&lt;/code&gt; が存在する場合は、デバッガープロンプトで入力されたかのように読み込まれ、実行されます。これは、エイリアスに特に役立ちます。両方のファイルが存在する場合、ホームディレクトリ内のファイルが最初に読み取られ、そこで定義されたエイリアスがローカルファイルによって上書きされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="5448f252b6aeff14276e99301e4c6e612a601743" translate="yes" xml:space="preserve">
          <source>If a file named &amp;ldquo;pyvenv.cfg&amp;rdquo; exists one directory above sys.executable, sys.prefix and sys.exec_prefix are set to that directory and it is also checked for site-packages (sys.base_prefix and sys.base_exec_prefix will always be the &amp;ldquo;real&amp;rdquo; prefixes of the Python installation). If &amp;ldquo;pyvenv.cfg&amp;rdquo; (a bootstrap configuration file) contains the key &amp;ldquo;include-system-site-packages&amp;rdquo; set to anything other than &amp;ldquo;true&amp;rdquo; (case-insensitive), the system-level prefixes will not be searched for site-packages; otherwise they will.</source>
          <target state="translated">「pyvenv.cfg」という名前のファイルがsys.executableの1つ上のディレクトリに存在する場合、sys.prefixとsys.exec_prefixはそのディレクトリに設定され、サイトパッケージもチェックされます（sys.base_prefixとsys.base_exec_prefixは常にPythonインストールの「実際の」プレフィックス）。 「pyvenv.cfg」（ブートストラップ構成ファイル）に「true」（大文字と小文字を区別しない）以外に設定されたキー「include-system-site-packages」が含まれている場合、システムレベルのプレフィックスでサイトの検索は行われません。パッケージ;そうでなければ彼らはそうするでしょう。</target>
        </trans-unit>
        <trans-unit id="b1c78860034600d414c83db7d32c54bb73e1ecd7" translate="yes" xml:space="preserve">
          <source>If a file named &lt;em&gt;filename&lt;/em&gt; is not found, the function first checks for a &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt;&lt;code&gt;__loader__&lt;/code&gt; in &lt;em&gt;module_globals&lt;/em&gt;. If there is such a loader and it defines a &lt;code&gt;get_source&lt;/code&gt; method, then that determines the source lines (if &lt;code&gt;get_source()&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;, then &lt;code&gt;''&lt;/code&gt; is returned). Finally, if &lt;em&gt;filename&lt;/em&gt; is a relative filename, it is looked up relative to the entries in the module search path, &lt;code&gt;sys.path&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;filename&lt;/em&gt;という名前の&lt;em&gt;ファイル&lt;/em&gt;が見つからない場合、関数は最初に &lt;code&gt;__loader__&lt;/code&gt; で&lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; __loader__を&lt;em&gt;チェックし&lt;/em&gt;ます。そのようなローダーがあり、それが &lt;code&gt;get_source&lt;/code&gt; メソッドを定義している場合、それによってソース行が決定されます（ &lt;code&gt;get_source()&lt;/code&gt; が &lt;code&gt;None&lt;/code&gt; を返す場合、 &lt;code&gt;''&lt;/code&gt; が返されます）。最後に、&lt;em&gt;filename&lt;/em&gt;が相対ファイル名の場合、モジュール検索パス &lt;code&gt;sys.path&lt;/code&gt; のエントリを基準にして検索されます。</target>
        </trans-unit>
        <trans-unit id="f21e40fc27ce27eb35a61db85ca27f562b3c3c39" translate="yes" xml:space="preserve">
          <source>If a file object is specified for &lt;em&gt;source&lt;/em&gt; or &lt;em&gt;target&lt;/em&gt;, it is the caller&amp;rsquo;s responsibility to close it after calling create_archive.</source>
          <target state="translated">ファイルオブジェクトが&lt;em&gt;source&lt;/em&gt;または&lt;em&gt;targetに&lt;/em&gt;指定されて&lt;em&gt;いる&lt;/em&gt;場合、create_archiveを呼び出した後にファイルオブジェクトを閉じるのは呼び出し側の責任です。</target>
        </trans-unit>
        <trans-unit id="a3207350b9a94fa842bcda66334617cd920267c5" translate="yes" xml:space="preserve">
          <source>If a formatter is specified, it is used to format the record. The record is then written to the stream with a terminator. If exception information is present, it is formatted using &lt;a href=&quot;traceback#traceback.print_exception&quot;&gt;&lt;code&gt;traceback.print_exception()&lt;/code&gt;&lt;/a&gt; and appended to the stream.</source>
          <target state="translated">フォーマッターが指定されている場合は、それを使用してレコードをフォーマットします。次に、レコードはターミネーターを使用してストリームに書き込まれます。例外情報が存在する場合は、&lt;a href=&quot;traceback#traceback.print_exception&quot;&gt; &lt;code&gt;traceback.print_exception()&lt;/code&gt; &lt;/a&gt;を使用してフォーマットされ、ストリームに追加されます。</target>
        </trans-unit>
        <trans-unit id="76e26d9c99665021cd2747cf34bdb27b0c694a2b" translate="yes" xml:space="preserve">
          <source>If a generator code directly or indirectly raises &lt;a href=&quot;#StopIteration&quot;&gt;&lt;code&gt;StopIteration&lt;/code&gt;&lt;/a&gt;, it is converted into a &lt;a href=&quot;#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; (retaining the &lt;a href=&quot;#StopIteration&quot;&gt;&lt;code&gt;StopIteration&lt;/code&gt;&lt;/a&gt; as the new exception&amp;rsquo;s cause).</source>
          <target state="translated">ジェネレータコードが直接的または間接的に&lt;a href=&quot;#StopIteration&quot;&gt; &lt;code&gt;StopIteration&lt;/code&gt; を&lt;/a&gt;発生させる場合、それは&lt;a href=&quot;#RuntimeError&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; に&lt;/a&gt;変換されます（新しい例外の原因として&lt;a href=&quot;#StopIteration&quot;&gt; &lt;code&gt;StopIteration&lt;/code&gt; &lt;/a&gt;を保持します）。</target>
        </trans-unit>
        <trans-unit id="93d34f8fd817c6e0f1345b2e762a4c72177524ff" translate="yes" xml:space="preserve">
          <source>If a group matches multiple times, only the last match is accessible:</source>
          <target state="translated">グループが複数回マッチした場合、最後にマッチしたものだけがアクセス可能です。</target>
        </trans-unit>
        <trans-unit id="5cbbe58498c91a0c4d108c85bbbabc900782816b" translate="yes" xml:space="preserve">
          <source>If a member filename is an absolute path, a drive/UNC sharepoint and leading (back)slashes will be stripped, e.g.: &lt;code&gt;///foo/bar&lt;/code&gt; becomes &lt;code&gt;foo/bar&lt;/code&gt; on Unix, and &lt;code&gt;C:\foo\bar&lt;/code&gt; becomes &lt;code&gt;foo\bar&lt;/code&gt; on Windows. And all &lt;code&gt;&quot;..&quot;&lt;/code&gt; components in a member filename will be removed, e.g.: &lt;code&gt;../../foo../../ba..r&lt;/code&gt; becomes &lt;code&gt;foo../ba..r&lt;/code&gt;. On Windows illegal characters (&lt;code&gt;:&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;&quot;&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, and &lt;code&gt;*&lt;/code&gt;) replaced by underscore (&lt;code&gt;_&lt;/code&gt;).</source>
          <target state="translated">メンバーファイル名が絶対パスの場合、ドライブ/ UNCシェアポイントと先頭の（バック）スラッシュは削除されます。例： &lt;code&gt;///foo/bar&lt;/code&gt; はUnixでは &lt;code&gt;foo/bar&lt;/code&gt; になり、 &lt;code&gt;C:\foo\bar&lt;/code&gt; は &lt;code&gt;foo\bar&lt;/code&gt; なります Windowsの場合。そして、メンバーファイル名のすべての &lt;code&gt;&quot;..&quot;&lt;/code&gt; コンポーネントが削除されます。例： &lt;code&gt;../../foo../../ba..r&lt;/code&gt; &lt;code&gt;foo../ba..r&lt;/code&gt; ../../ba..rはfoo ../ ba..rになります。 Windowsでは、不正な文字（ &lt;code&gt;:&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;|&lt;/code&gt; 、 &lt;code&gt;&quot;&lt;/code&gt; 、 &lt;code&gt;?&lt;/code&gt; 、および &lt;code&gt;*&lt;/code&gt; ）はアンダースコア（ &lt;code&gt;_&lt;/code&gt; ）に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="503137eb198604b87efeb2bcd433e998e37317d8" translate="yes" xml:space="preserve">
          <source>If a member occurs more than once in the archive, its last occurrence is assumed to be the most up-to-date version.</source>
          <target state="translated">メンバーがアーカイブ内で複数回出現した場合、最後に出現したものが最新バージョンとみなされます。</target>
        </trans-unit>
        <trans-unit id="f787e74c446e2990e618d08579803f817ebdb5cc" translate="yes" xml:space="preserve">
          <source>If a mock instance with a name or a spec is assigned to an attribute it won&amp;rsquo;t be considered in the sealing chain. This allows one to prevent seal from fixing part of the mock object.</source>
          <target state="translated">名前または仕様のモックインスタンスが属性に割り当てられている場合、シーリングチェーンでは考慮されません。これにより、モックオブジェクトの一部がシールによって固定されるのを防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="392fa48383638f6ca8f0993f37a1ecb79cf4aca5" translate="yes" xml:space="preserve">
          <source>If a module imports objects from another module using &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#from&quot;&gt;&lt;code&gt;from&lt;/code&gt;&lt;/a&gt; &amp;hellip; &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; &amp;hellip;, calling &lt;a href=&quot;#importlib.reload&quot;&gt;&lt;code&gt;reload()&lt;/code&gt;&lt;/a&gt; for the other module does not redefine the objects imported from it &amp;mdash; one way around this is to re-execute the &lt;code&gt;from&lt;/code&gt; statement, another is to use &lt;code&gt;import&lt;/code&gt; and qualified names (&lt;em&gt;module.name&lt;/em&gt;) instead.</source>
          <target state="translated">使用して、別のモジュールからモジュールをインポートしたオブジェクト場合&lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#from&quot;&gt; &lt;code&gt;from&lt;/code&gt; &lt;/a&gt; ... &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#import&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt; ...、呼び出し&lt;a href=&quot;#importlib.reload&quot;&gt; &lt;code&gt;reload()&lt;/code&gt; &lt;/a&gt;他のモジュールのためには、それからインポートされたオブジェクトを再定義しない-これを回避片道再実行することです &lt;code&gt;from&lt;/code&gt; 声明、他は使用することです &lt;code&gt;import&lt;/code&gt; し、代わりに修飾名（&lt;em&gt;module.name&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="b76b30a9fc3685533f4941dde34b064d15308902" translate="yes" xml:space="preserve">
          <source>If a module instantiates instances of a class, reloading the module that defines the class does not affect the method definitions of the instances &amp;mdash; they continue to use the old class definition. The same is true for derived classes.</source>
          <target state="translated">モジュールがクラスのインスタンスをインスタンス化する場合、クラスを定義するモジュールを再ロードしても、インスタンスのメソッド定義には影響しません&amp;mdash;古いクラス定義を引き続き使用します。派生クラスについても同様です。</target>
        </trans-unit>
        <trans-unit id="c7274841cd2a6c4fb6fc0a1fd5f00a02812a3cd7" translate="yes" xml:space="preserve">
          <source>If a module provides a &lt;code&gt;load_tests&lt;/code&gt; function it will be called to load the tests. This allows modules to customize test loading. This is the &lt;a href=&quot;#load-tests-protocol&quot;&gt;load_tests protocol&lt;/a&gt;. The &lt;em&gt;pattern&lt;/em&gt; argument is passed as the third argument to &lt;code&gt;load_tests&lt;/code&gt;.</source>
          <target state="translated">モジュールが &lt;code&gt;load_tests&lt;/code&gt; 関数を提供する場合、テストをロードするために呼び出されます。これにより、モジュールはテストの読み込みをカスタマイズできます。これは&lt;a href=&quot;#load-tests-protocol&quot;&gt;load_testsプロトコルです&lt;/a&gt;。&lt;em&gt;パターン&lt;/em&gt;引数は、第3引数として渡され &lt;code&gt;load_tests&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9967a7e9f61023ca795710b85aa3fd3437d08d6a" translate="yes" xml:space="preserve">
          <source>If a mutable buffer is passed, then the behaviour is determined by the value of the &lt;em&gt;mutate_flag&lt;/em&gt; parameter.</source>
          <target state="translated">可変バッファが渡される場合、動作は&lt;em&gt;mutate_flag&lt;/em&gt;パラメータの値によって&lt;em&gt;決まり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="a1fc9fb74f4ebf143daf34473be06e5da4ab833c" translate="yes" xml:space="preserve">
          <source>If a new seeding method is added, then a backward compatible seeder will be offered.</source>
          <target state="translated">新たな播種方法が追加された場合は、下位互換性のある播種機が提供されます。</target>
        </trans-unit>
        <trans-unit id="133e9d936cb0cf3ade6b9637c210b91b2ab80815" translate="yes" xml:space="preserve">
          <source>If a package (a directory containing a file named &lt;code&gt;__init__.py&lt;/code&gt;) is found, the package will be checked for a &lt;code&gt;load_tests&lt;/code&gt; function. If this exists then it will be called &lt;code&gt;package.load_tests(loader, tests, pattern)&lt;/code&gt;. Test discovery takes care to ensure that a package is only checked for tests once during an invocation, even if the load_tests function itself calls &lt;code&gt;loader.discover&lt;/code&gt;.</source>
          <target state="translated">パッケージ（ &lt;code&gt;__init__.py&lt;/code&gt; という名前のファイルを含むディレクトリ）が見つかった場合、パッケージの &lt;code&gt;load_tests&lt;/code&gt; 関数がチェックされます。これが存在する場合、 &lt;code&gt;package.load_tests(loader, tests, pattern)&lt;/code&gt; と呼ばれます。テスト検出は、load_tests関数自体が &lt;code&gt;loader.discover&lt;/code&gt; を呼び出した場合でも、呼び出し中にパッケージのテストが1回だけ確認されるように注意します。</target>
        </trans-unit>
        <trans-unit id="de4d246a31d1c98bfbbe12597b38a1577e9dcbc3" translate="yes" xml:space="preserve">
          <source>If a part has a &lt;em&gt;Content-Disposition&lt;/em&gt; header, only consider the part a candidate match if the value of the header is &lt;code&gt;inline&lt;/code&gt;.</source>
          <target state="translated">パーツに&lt;em&gt;Content-Disposition&lt;/em&gt;ヘッダーがある場合、ヘッダーの値が &lt;code&gt;inline&lt;/code&gt; である場合にのみ、候補の一致と見なされます。</target>
        </trans-unit>
        <trans-unit id="08bdb3b5117fe753e55ab3386000a7b11f147e33" translate="yes" xml:space="preserve">
          <source>If a particular application uses this pattern a lot, it can be simplified even further by means of a small helper class:</source>
          <target state="translated">特定のアプリケーションがこのパターンを多用する場合は、小さなヘルパークラスを使用することでさらに簡略化することができます。</target>
        </trans-unit>
        <trans-unit id="ca72e817de266e57decb5a9ba95638d41c318561" translate="yes" xml:space="preserve">
          <source>If a pointer points to an array, its elements can be read and written using standard subscript and slice accesses. Pointer objects have no size, so &lt;a href=&quot;functions#len&quot;&gt;&lt;code&gt;len()&lt;/code&gt;&lt;/a&gt; will raise &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. Negative subscripts will read from the memory &lt;em&gt;before&lt;/em&gt; the pointer (as in C), and out-of-range subscripts will probably crash with an access violation (if you&amp;rsquo;re lucky).</source>
          <target state="translated">ポインターが配列を指す場合、その要素は、標準の添え字アクセスとスライスアクセスを使用して読み書きできます。ポインタオブジェクトにはサイズがないため、&lt;a href=&quot;functions#len&quot;&gt; &lt;code&gt;len()&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; を送出し&lt;/a&gt;ます。負の添え字はポインターの&lt;em&gt;前&lt;/em&gt;にメモリーから読み取られ（Cのように）、範囲外の添え字はおそらくアクセス違反でクラッシュします（運が良ければ）。</target>
        </trans-unit>
        <trans-unit id="eed381cd380722df57d19d1544f97f6af790e234" translate="yes" xml:space="preserve">
          <source>If a process is killed using &lt;a href=&quot;#multiprocessing.Process.terminate&quot;&gt;&lt;code&gt;Process.terminate()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;os#os.kill&quot;&gt;&lt;code&gt;os.kill()&lt;/code&gt;&lt;/a&gt; while it is trying to use a &lt;a href=&quot;#multiprocessing.Queue&quot;&gt;&lt;code&gt;Queue&lt;/code&gt;&lt;/a&gt;, then the data in the queue is likely to become corrupted. This may cause any other process to get an exception when it tries to use the queue later on.</source>
          <target state="translated">&lt;a href=&quot;#multiprocessing.Queue&quot;&gt; &lt;code&gt;Queue&lt;/code&gt; &lt;/a&gt;を使用しようとしている&lt;a href=&quot;#multiprocessing.Process.terminate&quot;&gt; &lt;code&gt;Process.terminate()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;os#os.kill&quot;&gt; &lt;code&gt;os.kill()&lt;/code&gt; &lt;/a&gt;を使用してプロセスを強制終了すると、キュー内のデータが破損する可能性があります。これにより、他のプロセスが後でキューを使用しようとしたときに例外が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="56d1f01d3ec2d55cce1c8cf716b703713495099e" translate="yes" xml:space="preserve">
          <source>If a process is killed while it is trying to read or write to a pipe then the data in the pipe is likely to become corrupted, because it may become impossible to be sure where the message boundaries lie.</source>
          <target state="translated">パイプに読み書きしようとしている間にプロセスが殺された場合、パイプ内のデータが破損する可能性があります。</target>
        </trans-unit>
        <trans-unit id="ee27c621c4af454357253732e654ec550abd9b30" translate="yes" xml:space="preserve">
          <source>If a regular expression ends with a greedy match (such as &lt;code&gt;.*&lt;/code&gt;) or if more than one expression can match the same input, the results are non-deterministic, and may depend on the I/O timing.</source>
          <target state="translated">正規表現が貪欲な一致（ &lt;code&gt;.*&lt;/code&gt; など）で終了する場合、または複数の表現が同じ入力に一致する可能性がある場合、結果は非決定的であり、I / Oタイミングに依存する可能性があります。</target>
        </trans-unit>
        <trans-unit id="9f18a5c5319b593cf33dfdbccb25dc47d86b19fc" translate="yes" xml:space="preserve">
          <source>If a row has more fields than fieldnames, the remaining data is put in a list and stored with the fieldname specified by &lt;em&gt;restkey&lt;/em&gt; (which defaults to &lt;code&gt;None&lt;/code&gt;). If a non-blank row has fewer fields than fieldnames, the missing values are filled-in with &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">行にフィールド名よりも多くのフィールドがある場合、残りのデータはリストに入れられ、&lt;em&gt;restkeyで&lt;/em&gt;指定されたフィールド名（デフォルトは &lt;code&gt;None&lt;/code&gt; ）で格納されます。空白でない行のフィールド名がフィールド名より少ない場合、欠落している値は &lt;code&gt;None&lt;/code&gt; で埋められます。</target>
        </trans-unit>
        <trans-unit id="005f4f5ea8b5cbe5aac64333d420adc456c1595c" translate="yes" xml:space="preserve">
          <source>If a second argument is present, it is an expression which must evaluate to true before the breakpoint is honored.</source>
          <target state="translated">第2引数が存在する場合、ブレークポイントが実行される前に真を評価しなければならない式です。</target>
        </trans-unit>
        <trans-unit id="8557dead7893ee28dc4312dd3fbd82bd7ef26377" translate="yes" xml:space="preserve">
          <source>If a sequence of events takes longer to run than the time available before the next event, the scheduler will simply fall behind. No events will be dropped; the calling code is responsible for canceling events which are no longer pertinent.</source>
          <target state="translated">一連のイベントの実行に次のイベントまでの時間よりも長い時間がかかる場合、スケジューラは単に遅れてしまいます。イベントが削除されることはありません。</target>
        </trans-unit>
        <trans-unit id="a04337ee52a07d55c116e62a9138163aca040133" translate="yes" xml:space="preserve">
          <source>If a string is returned, the string should be interpreted as the name of a global variable. It should be the object&amp;rsquo;s local name relative to its module; the pickle module searches the module namespace to determine the object&amp;rsquo;s module. This behaviour is typically useful for singletons.</source>
          <target state="translated">文字列が返された場合、その文字列はグローバル変数の名前として解釈されます。これは、そのモジュールに対するオブジェクトのローカル名である必要があります。pickleモジュールはモジュール名前空間を検索してオブジェクトのモジュールを決定します。この動作は通常、シングルトンに役立ちます。</target>
        </trans-unit>
        <trans-unit id="b77fc0289dcb779f53a98f0301822ac00449bb60" translate="yes" xml:space="preserve">
          <source>If a string is specified as first argument, the buffer is made one item larger than the length of the string so that the last element in the array is a NUL termination character. An integer can be passed as second argument which allows specifying the size of the array if the length of the string should not be used.</source>
          <target state="translated">第1引数に文字列を指定した場合は、配列の最後の要素がNUL終端文字となるように、バッファを文字列の長さよりも1項目大きくします。第2引数に整数を渡すことで、文字列の長さを使わない場合の配列のサイズを指定することができます。</target>
        </trans-unit>
        <trans-unit id="21c6bea79d147aa97afcd362c1b240007ff84d93" translate="yes" xml:space="preserve">
          <source>If a string of characters is typed, the ACW selection will jump to the entry most closely matching those characters. Entering a</source>
          <target state="translated">文字列が入力されると、ACW 選択範囲はそれらの文字に最も近いエントリにジャンプします。文字列を入力する</target>
        </trans-unit>
        <trans-unit id="1ad7ab62792840cafd5c6a7e7c21e711f92ec2c4" translate="yes" xml:space="preserve">
          <source>If a subclass of dict defines a method &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__missing__&quot;&gt;&lt;code&gt;__missing__()&lt;/code&gt;&lt;/a&gt; and &lt;em&gt;key&lt;/em&gt; is not present, the &lt;code&gt;d[key]&lt;/code&gt; operation calls that method with the key &lt;em&gt;key&lt;/em&gt; as argument. The &lt;code&gt;d[key]&lt;/code&gt; operation then returns or raises whatever is returned or raised by the &lt;code&gt;__missing__(key)&lt;/code&gt; call. No other operations or methods invoke &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__missing__&quot;&gt;&lt;code&gt;__missing__()&lt;/code&gt;&lt;/a&gt;. If &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__missing__&quot;&gt;&lt;code&gt;__missing__()&lt;/code&gt;&lt;/a&gt; is not defined, &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; is raised. &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__missing__&quot;&gt;&lt;code&gt;__missing__()&lt;/code&gt;&lt;/a&gt; must be a method; it cannot be an instance variable:</source>
          <target state="translated">dictのサブクラスがメソッド&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__missing__&quot;&gt; &lt;code&gt;__missing__()&lt;/code&gt; &lt;/a&gt;を定義し、&lt;em&gt;key&lt;/em&gt;が存在しない場合、 &lt;code&gt;d[key]&lt;/code&gt; 操作は、キー&lt;em&gt;key&lt;/em&gt;を引数としてそのメソッドを呼び出します。次に、 &lt;code&gt;d[key]&lt;/code&gt; 操作は、 &lt;code&gt;__missing__(key)&lt;/code&gt; 呼び出しによって返された、または発生したものを返すか発生させます。他の操作やメソッドは&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__missing__&quot;&gt; &lt;code&gt;__missing__()&lt;/code&gt; &lt;/a&gt;呼び出しません。&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__missing__&quot;&gt; &lt;code&gt;__missing__()&lt;/code&gt; &lt;/a&gt;が定義されていない場合、&lt;a href=&quot;exceptions#KeyError&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; &lt;/a&gt;が発生します。&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__missing__&quot;&gt; &lt;code&gt;__missing__()&lt;/code&gt; &lt;/a&gt;はメソッドでなければなりません。インスタンス変数にすることはできません：</target>
        </trans-unit>
        <trans-unit id="f05a402a563718610b92e3f5ebab6bc115c75aff" translate="yes" xml:space="preserve">
          <source>If a subclass overrides the constructor, it must make sure it invokes the base class constructor (&lt;code&gt;Process.__init__()&lt;/code&gt;) before doing anything else to the process.</source>
          <target state="translated">サブクラスがコンストラクターをオーバーライドする場合、 &lt;code&gt;Process.__init__()&lt;/code&gt; に対して何かを行う前に、サブクラスが基本クラスコンストラクター（Process .__ init __（））を呼び出すことを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="7167bd01592177c6831e227c0f96cfa70f5703f6" translate="yes" xml:space="preserve">
          <source>If a test is dependent on a specific condition of the operating system then verify the condition already exists before attempting the test.</source>
          <target state="translated">テストがオペレーティングシステムの特定の条件に依存している場合は、テストを試みる前に、その条件がすでに存在することを確認してください。</target>
        </trans-unit>
        <trans-unit id="fdb64156356707d7f00a7d8b9a96bfe1ba13d7ee" translate="yes" xml:space="preserve">
          <source>If a test module defines &lt;code&gt;load_tests&lt;/code&gt; it will be called by &lt;a href=&quot;#unittest.TestLoader.loadTestsFromModule&quot;&gt;&lt;code&gt;TestLoader.loadTestsFromModule()&lt;/code&gt;&lt;/a&gt; with the following arguments:</source>
          <target state="translated">テストモジュールが &lt;code&gt;load_tests&lt;/code&gt; を定義する場合、次の引数を使用して&lt;a href=&quot;#unittest.TestLoader.loadTestsFromModule&quot;&gt; &lt;code&gt;TestLoader.loadTestsFromModule()&lt;/code&gt; &lt;/a&gt;によって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="56a75cd42f01b47ed5b176576dca9593b3d7d4ee" translate="yes" xml:space="preserve">
          <source>If a timeout occurs, it cancels the task and raises &lt;a href=&quot;asyncio-exceptions#asyncio.TimeoutError&quot;&gt;&lt;code&gt;asyncio.TimeoutError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">タイムアウトが発生すると、タスクがキャンセルされ、&lt;a href=&quot;asyncio-exceptions#asyncio.TimeoutError&quot;&gt; &lt;code&gt;asyncio.TimeoutError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="4894447c60737f3d9dbafbd5dd46efa9b16f3b36" translate="yes" xml:space="preserve">
          <source>If a timestamp stored in SQLite has a fractional part longer than 6 numbers, its value will be truncated to microsecond precision by the timestamp converter.</source>
          <target state="translated">SQLite に保存されているタイムスタンプが 6 つの数字よりも長い端数部分を持つ場合、その値はタイムスタンプ変換器によってマイクロ秒の精度に切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="5ac42206d9872e5d1063a9d182b043d77e4d7069" translate="yes" xml:space="preserve">
          <source>If a valid &lt;em&gt;align&lt;/em&gt; value is specified, it can be preceded by a &lt;em&gt;fill&lt;/em&gt; character that can be any character and defaults to a space if omitted. It is not possible to use a literal curly brace (&amp;ldquo;&lt;code&gt;{&lt;/code&gt;&amp;rdquo; or &amp;ldquo;&lt;code&gt;}&lt;/code&gt;&amp;rdquo;) as the &lt;em&gt;fill&lt;/em&gt; character in a &lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#f-strings&quot;&gt;formatted string literal&lt;/a&gt; or when using the &lt;a href=&quot;stdtypes#str.format&quot;&gt;&lt;code&gt;str.format()&lt;/code&gt;&lt;/a&gt; method. However, it is possible to insert a curly brace with a nested replacement field. This limitation doesn&amp;rsquo;t affect the &lt;a href=&quot;functions#format&quot;&gt;&lt;code&gt;format()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">有効な&lt;em&gt;align&lt;/em&gt;値が指定されている場合、その前に任意の文字である&lt;em&gt;埋め込み&lt;/em&gt;文字を&lt;em&gt;付ける&lt;/em&gt;ことができ、省略された場合はデフォルトでスペースになります。&lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#f-strings&quot;&gt;フォーマットされた文字列リテラルの&lt;/a&gt;&lt;em&gt;充填&lt;/em&gt;文字として、または&lt;a href=&quot;stdtypes#str.format&quot;&gt; &lt;code&gt;str.format()&lt;/code&gt; &lt;/a&gt;メソッドを使用する場合、リテラル中括弧（「 &lt;code&gt;{&lt;/code&gt; 」または「 &lt;code&gt;}&lt;/code&gt; 」）を使用することはできません。ただし、入れ子の置換フィールドを持つ中括弧を挿入することは可能です。この制限は&lt;a href=&quot;functions#format&quot;&gt; &lt;code&gt;format()&lt;/code&gt; &lt;/a&gt;関数には影響しません。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7c00602bdfa725779b622a293e31f264d4ee274c" translate="yes" xml:space="preserve">
          <source>If a warning is reported and doesn&amp;rsquo;t match any registered filter then the &amp;ldquo;default&amp;rdquo; action is applied (hence its name).</source>
          <target state="translated">警告が報告され、登録されているどのフィルターにも一致しない場合、「デフォルト」アクションが適用されます（そのため、その名前になります）。</target>
        </trans-unit>
        <trans-unit id="cb0337d207d18ad7007727b229c1af4d0cd626a1" translate="yes" xml:space="preserve">
          <source>If a welcome message is not received, then &lt;a href=&quot;#multiprocessing.AuthenticationError&quot;&gt;&lt;code&gt;AuthenticationError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">ウェルカムメッセージが受信されない場合、&lt;a href=&quot;#multiprocessing.AuthenticationError&quot;&gt; &lt;code&gt;AuthenticationError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="8fcc1d5a91e23de43d9a5dc52b88297e33f33bba" translate="yes" xml:space="preserve">
          <source>If all awaitables are completed successfully, the result is an aggregate list of returned values. The order of result values corresponds to the order of awaitables in &lt;em&gt;aws&lt;/em&gt;.</source>
          <target state="translated">すべての待機可能変数が正常に完了した場合、結果は戻り値の集約リストになります。結果値の順序は、&lt;em&gt;aws&lt;/em&gt;のawaitableの順序に対応しています。</target>
        </trans-unit>
        <trans-unit id="2547834e994630d32d2037a19c05c10c7d6ee975" translate="yes" xml:space="preserve">
          <source>If all of the input data was decompressed and returned (either because this was less than &lt;em&gt;max_length&lt;/em&gt; bytes, or because &lt;em&gt;max_length&lt;/em&gt; was negative), the &lt;a href=&quot;#bz2.BZ2Decompressor.needs_input&quot;&gt;&lt;code&gt;needs_input&lt;/code&gt;&lt;/a&gt; attribute will be set to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">すべての入力データが解凍されて返された場合（これが&lt;em&gt;max_length&lt;/em&gt;バイト未満だったため、または&lt;em&gt;max_length&lt;/em&gt;が負だったため）、&lt;a href=&quot;#bz2.BZ2Decompressor.needs_input&quot;&gt; &lt;code&gt;needs_input&lt;/code&gt; &lt;/a&gt;属性は &lt;code&gt;True&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="6e121cbdbd9c19e9656d52cccebd105f837012c9" translate="yes" xml:space="preserve">
          <source>If all of the input data was decompressed and returned (either because this was less than &lt;em&gt;max_length&lt;/em&gt; bytes, or because &lt;em&gt;max_length&lt;/em&gt; was negative), the &lt;a href=&quot;#lzma.LZMADecompressor.needs_input&quot;&gt;&lt;code&gt;needs_input&lt;/code&gt;&lt;/a&gt; attribute will be set to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">すべての入力データが解凍されて返された場合（これが&lt;em&gt;max_length&lt;/em&gt;バイト未満だったため、または&lt;em&gt;max_length&lt;/em&gt;が負だったため）、&lt;a href=&quot;#lzma.LZMADecompressor.needs_input&quot;&gt; &lt;code&gt;needs_input&lt;/code&gt; &lt;/a&gt;属性は &lt;code&gt;True&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="d829aa8e2300eed8aa97b16a76abdddadb851327" translate="yes" xml:space="preserve">
          <source>If all you want is a unique ID, you should probably call &lt;a href=&quot;#uuid.uuid1&quot;&gt;&lt;code&gt;uuid1()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#uuid.uuid4&quot;&gt;&lt;code&gt;uuid4()&lt;/code&gt;&lt;/a&gt;. Note that &lt;a href=&quot;#uuid.uuid1&quot;&gt;&lt;code&gt;uuid1()&lt;/code&gt;&lt;/a&gt; may compromise privacy since it creates a UUID containing the computer&amp;rsquo;s network address. &lt;a href=&quot;#uuid.uuid4&quot;&gt;&lt;code&gt;uuid4()&lt;/code&gt;&lt;/a&gt; creates a random UUID.</source>
          <target state="translated">一意のIDだけが必要な場合は、おそらく&lt;a href=&quot;#uuid.uuid1&quot;&gt; &lt;code&gt;uuid1()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#uuid.uuid4&quot;&gt; &lt;code&gt;uuid4()&lt;/code&gt; を&lt;/a&gt;呼び出す必要があります。&lt;a href=&quot;#uuid.uuid1&quot;&gt; &lt;code&gt;uuid1()&lt;/code&gt; &lt;/a&gt;はコンピューターのネットワークアドレスを含むUUIDを作成するため、プライバシーが侵害される可能性があることに注意してください。&lt;a href=&quot;#uuid.uuid4&quot;&gt; &lt;code&gt;uuid4()&lt;/code&gt; &lt;/a&gt;はランダムなUUIDを作成します。</target>
        </trans-unit>
        <trans-unit id="a1f1d33458f6e961931c3b1a1e541c58fb116cf6" translate="yes" xml:space="preserve">
          <source>If an &lt;em&gt;action&lt;/em&gt; was provided to the constructor, one of the threads will have called it prior to being released. Should this call raise an error, the barrier is put into the broken state.</source>
          <target state="translated">&lt;em&gt;アクション&lt;/em&gt;がコンストラクターに提供された場合、スレッドの1つが解放される前にそれを呼び出します。この呼び出しでエラーが発生した場合、バリアは壊れた状態になります。</target>
        </trans-unit>
        <trans-unit id="299a160b2857a2e046717940313b837ea0255ecb" translate="yes" xml:space="preserve">
          <source>If an address of &amp;lsquo;0.0.0.0&amp;rsquo; is used, the address will not be a connectable end point on Windows. If you require a connectable end-point, you should use &amp;lsquo;127.0.0.1&amp;rsquo;.</source>
          <target state="translated">「0.0.0.0」のアドレスが使用されている場合、そのアドレスはWindowsで接続可能なエンドポイントにはなりません。接続可能なエンドポイントが必要な場合は、「127.0.0.1」を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="fafdef20b0392cfa5094409aaee99cd26f4d16c3" translate="yes" xml:space="preserve">
          <source>If an ancestor is found with a level other than NOTSET, then that ancestor&amp;rsquo;s level is treated as the effective level of the logger where the ancestor search began, and is used to determine how a logging event is handled.</source>
          <target state="translated">NOTSET以外のレベルで祖先が見つかった場合、その祖先のレベルは、祖先検索が開始されたロガーの有効レベルとして扱われ、ロギングイベントの処理方法を決定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="042dca6beb53678ea3404d9d765bfdcb1778c211" translate="yes" xml:space="preserve">
          <source>If an application archive has a shebang line, it may have the executable bit set on POSIX systems, to allow it to be executed directly.</source>
          <target state="translated">アプリケーションアーカイブに shebang 行がある場合、POSIX システムでは、それが直接実行できるように、実行可能ビットが設定されている可能性があります。</target>
        </trans-unit>
        <trans-unit id="256f4fa29f36d441db33ab5876bc2ec311be265f" translate="yes" xml:space="preserve">
          <source>If an application does not care about tracking significance, it is easy to remove the exponent and trailing zeroes, losing significance, but keeping the value unchanged:</source>
          <target state="translated">アプリケーションが有意性の追跡を気にしない場合、指数と末尾のゼロを削除して有意性を失いますが、値は変更しないままにしておくことは簡単です。</target>
        </trans-unit>
        <trans-unit id="adadff191e4f3cff9fafee17cbdf1b2c0fa260d7" translate="yes" xml:space="preserve">
          <source>If an argument outside those ranges is given, &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">これらの範囲外の引数が指定された場合、&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="ac5211f8f4fad0b439f05ba8bae6b1f51d4b9857" translate="yes" xml:space="preserve">
          <source>If an argument outside those ranges is given, &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised. All default to &lt;code&gt;0&lt;/code&gt; except &lt;em&gt;tzinfo&lt;/em&gt;, which defaults to &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらの範囲外の引数が指定された場合、&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;が発生します。&lt;em&gt;tzinfo&lt;/em&gt;を除くすべてのデフォルトは &lt;code&gt;0&lt;/code&gt; で、&lt;em&gt;tzinfoの&lt;/em&gt;デフォルトは&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="5cf8ab7a4f610ae0e91814539a3ad269a9742c39" translate="yes" xml:space="preserve">
          <source>If an attempt is made to change any object in a way that is not permitted with regard to the &lt;a href=&quot;https://www.w3.org/TR/REC-xml-names/&quot;&gt;Namespaces in XML&lt;/a&gt; recommendation, this exception is raised.</source>
          <target state="translated">&lt;a href=&quot;https://www.w3.org/TR/REC-xml-names/&quot;&gt;Namespaces in XMLの&lt;/a&gt;推奨事項に関して許可されていない方法でオブジェクトを変更しようとすると、この例外が発生します。</target>
        </trans-unit>
        <trans-unit id="53d8a1b202b136b96256c5d5d6a53d98a6548fc9" translate="yes" xml:space="preserve">
          <source>If an error is encountered during configuration, this function will raise a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;exceptions#AttributeError&quot;&gt;&lt;code&gt;AttributeError&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt; with a suitably descriptive message. The following is a (possibly incomplete) list of conditions which will raise an error:</source>
          <target state="translated">設定中にエラーが発生した場合、この関数は&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;exceptions#AttributeError&quot;&gt; &lt;code&gt;AttributeError&lt;/code&gt; 、&lt;/a&gt;または&lt;a href=&quot;exceptions#ImportError&quot;&gt; &lt;code&gt;ImportError&lt;/code&gt; &lt;/a&gt;を発生させ、適切な説明メッセージを表示します。以下は、エラーが発生する条件の（おそらく不完全な）リストです。</target>
        </trans-unit>
        <trans-unit id="4574f822c008c1deacbc94bbf73252f1957961ce" translate="yes" xml:space="preserve">
          <source>If an error is encountered when obtaining the contents of an uploaded file (for example, when the user interrupts the form submission by clicking on a Back or Cancel button) the &lt;code&gt;done&lt;/code&gt; attribute of the object for the field will be set to the value -1.</source>
          <target state="translated">アップロードされたファイルのコンテンツを取得するときにエラーが発生した場合（たとえば、ユーザーが[戻る]または[キャンセル]ボタンをクリックしてフォームの送信を中断した場合）、フィールドのオブジェクトの &lt;code&gt;done&lt;/code&gt; 属性は値-1に設定されます。</target>
        </trans-unit>
        <trans-unit id="f60eea2b32259323dba912ba5d7f1dfbdfc71476" translate="yes" xml:space="preserve">
          <source>If an exception is raised by the call, then is re-raised by &lt;a href=&quot;#multiprocessing.managers.BaseProxy._callmethod&quot;&gt;&lt;code&gt;_callmethod()&lt;/code&gt;&lt;/a&gt;. If some other exception is raised in the manager&amp;rsquo;s process then this is converted into a &lt;code&gt;RemoteError&lt;/code&gt; exception and is raised by &lt;a href=&quot;#multiprocessing.managers.BaseProxy._callmethod&quot;&gt;&lt;code&gt;_callmethod()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">呼び出しによって例外が発生した場合は、&lt;a href=&quot;#multiprocessing.managers.BaseProxy._callmethod&quot;&gt; &lt;code&gt;_callmethod()&lt;/code&gt; &lt;/a&gt;によって再発生されます。マネージャーのプロセスで他の例外が発生した場合、これは &lt;code&gt;RemoteError&lt;/code&gt; 例外に変換され、&lt;a href=&quot;#multiprocessing.managers.BaseProxy._callmethod&quot;&gt; &lt;code&gt;_callmethod()&lt;/code&gt; &lt;/a&gt;によって発生します。</target>
        </trans-unit>
        <trans-unit id="f85bdbc54de505eec7f8ff1f7bab9e90300754e6" translate="yes" xml:space="preserve">
          <source>If an exception is raised by the decorated method and a module was added to &lt;a href=&quot;sys#sys.modules&quot;&gt;&lt;code&gt;sys.modules&lt;/code&gt;&lt;/a&gt;, then the module will be removed to prevent a partially initialized module from being in left in &lt;a href=&quot;sys#sys.modules&quot;&gt;&lt;code&gt;sys.modules&lt;/code&gt;&lt;/a&gt;. If the module was already in &lt;a href=&quot;sys#sys.modules&quot;&gt;&lt;code&gt;sys.modules&lt;/code&gt;&lt;/a&gt; then it is left alone.</source>
          <target state="translated">装飾されたメソッドによって例外が発生し、モジュールが&lt;a href=&quot;sys#sys.modules&quot;&gt; &lt;code&gt;sys.modules&lt;/code&gt; &lt;/a&gt;に追加された場合、モジュールは削除され、部分的に初期化されたモジュールが&lt;a href=&quot;sys#sys.modules&quot;&gt; &lt;code&gt;sys.modules&lt;/code&gt; &lt;/a&gt;に残されないようにします。モジュールがすでに&lt;a href=&quot;sys#sys.modules&quot;&gt; &lt;code&gt;sys.modules&lt;/code&gt; に&lt;/a&gt;あった場合、それはそのままになります。</target>
        </trans-unit>
        <trans-unit id="a7bc6eb7f643b6c0eaaabf73ac57b62236f71065" translate="yes" xml:space="preserve">
          <source>If an exception is raised during a &lt;code&gt;setUpClass&lt;/code&gt; then the tests in the class are not run and the &lt;code&gt;tearDownClass&lt;/code&gt; is not run. Skipped classes will not have &lt;code&gt;setUpClass&lt;/code&gt; or &lt;code&gt;tearDownClass&lt;/code&gt; run. If the exception is a &lt;a href=&quot;#unittest.SkipTest&quot;&gt;&lt;code&gt;SkipTest&lt;/code&gt;&lt;/a&gt; exception then the class will be reported as having been skipped instead of as an error.</source>
          <target state="translated">&lt;code&gt;setUpClass&lt;/code&gt; の実行中に例外が発生した場合、クラスのテストは実行されず、 &lt;code&gt;tearDownClass&lt;/code&gt; は実行されません。スキップされたクラスは、 &lt;code&gt;setUpClass&lt;/code&gt; または &lt;code&gt;tearDownClass&lt;/code&gt; を実行しません。例外が&lt;a href=&quot;#unittest.SkipTest&quot;&gt; &lt;code&gt;SkipTest&lt;/code&gt; &lt;/a&gt;例外である場合、クラスはエラーではなくスキップされたと報告されます。</target>
        </trans-unit>
        <trans-unit id="4533ac88ecc0c7c6a8780ebbf4203e5ab1429294" translate="yes" xml:space="preserve">
          <source>If an exception is raised during execution of the exit handlers, a traceback is printed (unless &lt;a href=&quot;exceptions#SystemExit&quot;&gt;&lt;code&gt;SystemExit&lt;/code&gt;&lt;/a&gt; is raised) and the exception information is saved. After all exit handlers have had a chance to run the last exception to be raised is re-raised.</source>
          <target state="translated">出口ハンドラーの実行中に例外が発生すると、（&lt;a href=&quot;exceptions#SystemExit&quot;&gt; &lt;code&gt;SystemExit&lt;/code&gt; &lt;/a&gt;が発生しない限り）トレースバックが出力され、例外情報が保存されます。すべての出口ハンドラーが実行する機会を得た後、発生する最後の例外が再発生します。</target>
        </trans-unit>
        <trans-unit id="7d998d88a8ce16f7be9ebac1b439bf842f586529" translate="yes" xml:space="preserve">
          <source>If an exception is raised from the &lt;em&gt;sni_callback&lt;/em&gt; function the TLS connection will terminate with a fatal TLS alert message &lt;a href=&quot;#ssl.ALERT_DESCRIPTION_HANDSHAKE_FAILURE&quot;&gt;&lt;code&gt;ALERT_DESCRIPTION_HANDSHAKE_FAILURE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;sni_callback&lt;/em&gt;関数から例外が発生した場合、TLS接続は致命的なTLSアラートメッセージ&lt;a href=&quot;#ssl.ALERT_DESCRIPTION_HANDSHAKE_FAILURE&quot;&gt; &lt;code&gt;ALERT_DESCRIPTION_HANDSHAKE_FAILURE&lt;/code&gt; で&lt;/a&gt;終了します。</target>
        </trans-unit>
        <trans-unit id="2a43dea4c94d3c2af36ea8264f982c5356cb01f9" translate="yes" xml:space="preserve">
          <source>If an exception is raised in a &lt;code&gt;setUpModule&lt;/code&gt; then none of the tests in the module will be run and the &lt;code&gt;tearDownModule&lt;/code&gt; will not be run. If the exception is a &lt;a href=&quot;#unittest.SkipTest&quot;&gt;&lt;code&gt;SkipTest&lt;/code&gt;&lt;/a&gt; exception then the module will be reported as having been skipped instead of as an error.</source>
          <target state="translated">&lt;code&gt;setUpModule&lt;/code&gt; で例外が発生した場合、モジュール内のテストは実行されず、 &lt;code&gt;tearDownModule&lt;/code&gt; は実行されません。例外が&lt;a href=&quot;#unittest.SkipTest&quot;&gt; &lt;code&gt;SkipTest&lt;/code&gt; &lt;/a&gt;例外の場合、モジュールはエラーではなくスキップされたと報告されます。</target>
        </trans-unit>
        <trans-unit id="dd703abca148b756a14a9c781a44d9f0b2ac0696" translate="yes" xml:space="preserve">
          <source>If an exception is raised in the coroutine, the returned Future will be notified. It can also be used to cancel the task in the event loop:</source>
          <target state="translated">コアーチンで例外が発生した場合は、返されたFutureが通知されます。また、イベントループでタスクをキャンセルする際にも使用できます。</target>
        </trans-unit>
        <trans-unit id="0153b7e6f09b5f4cdeeae21ebab69aa25ec08be0" translate="yes" xml:space="preserve">
          <source>If an implementation wishes to retain compatibility with the existing email package policies, &lt;em&gt;name&lt;/em&gt; should be the case preserved name (all characters up to the &amp;lsquo;&lt;code&gt;:&lt;/code&gt;&amp;rsquo; separator), while &lt;em&gt;value&lt;/em&gt; should be the unfolded value (all line separator characters removed, but whitespace kept intact), stripped of leading whitespace.</source>
          <target state="translated">実装は、既存の電子メールのパッケージポリシーとの互換性を維持することを希望する場合、&lt;em&gt;名前は&lt;/em&gt;ケースに保存名前（「までのすべての文字まででなければなりません &lt;code&gt;:&lt;/code&gt; 」区切り）をしながら、&lt;em&gt;値が&lt;/em&gt;折り畳まれていない値である必要があります（すべての行区切り文字は削除されますが、空白ままそのまま）、先頭の空白が削除されます。</target>
        </trans-unit>
        <trans-unit id="e6cd0b0b3afc2fba0e7fc3c8402c2b5436592af6" translate="yes" xml:space="preserve">
          <source>If an implementation wishes to retain compatibility with the existing email package policies, the &lt;em&gt;name&lt;/em&gt; and &lt;em&gt;value&lt;/em&gt; should be strings or string subclasses that do not change the content of the passed in arguments.</source>
          <target state="translated">実装が既存の電子メールパッケージポリシーとの互換性を維持したい場合、&lt;em&gt;名前&lt;/em&gt;と&lt;em&gt;値&lt;/em&gt;は、渡された引数の内容を変更しない文字列または文字列サブクラスである必要があります。</target>
        </trans-unit>
        <trans-unit id="4cbad0f63bdd9fa84f8130dbeeb23dc3b6cbb508" translate="yes" xml:space="preserve">
          <source>If an object containing an unsupported type was marshalled with &lt;a href=&quot;#marshal.dump&quot;&gt;&lt;code&gt;dump()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#marshal.load&quot;&gt;&lt;code&gt;load()&lt;/code&gt;&lt;/a&gt; will substitute &lt;code&gt;None&lt;/code&gt; for the unmarshallable type.</source>
          <target state="translated">サポートされていないタイプを含むオブジェクトが&lt;a href=&quot;#marshal.dump&quot;&gt; &lt;code&gt;dump()&lt;/code&gt; &lt;/a&gt;でマーシャリングされた場合、&lt;a href=&quot;#marshal.load&quot;&gt; &lt;code&gt;load()&lt;/code&gt; &lt;/a&gt;は、非マーシャリング可能なタイプを &lt;code&gt;None&lt;/code&gt; に置き換えます。</target>
        </trans-unit>
        <trans-unit id="4d67c470c08505e21fcfb4046a1dfce4ba755fea" translate="yes" xml:space="preserve">
          <source>If any Task or Future from the &lt;em&gt;aws&lt;/em&gt; sequence is &lt;em&gt;cancelled&lt;/em&gt;, it is treated as if it raised &lt;a href=&quot;asyncio-exceptions#asyncio.CancelledError&quot;&gt;&lt;code&gt;CancelledError&lt;/code&gt;&lt;/a&gt; &amp;ndash; the &lt;code&gt;gather()&lt;/code&gt; call is &lt;strong&gt;not&lt;/strong&gt; cancelled in this case. This is to prevent the cancellation of one submitted Task/Future to cause other Tasks/Futures to be cancelled.</source>
          <target state="translated">&lt;em&gt;aws&lt;/em&gt;シーケンスのTaskまたはFuture が&lt;em&gt;キャンセル&lt;/em&gt;された場合、&lt;a href=&quot;asyncio-exceptions#asyncio.CancelledError&quot;&gt; &lt;code&gt;CancelledError&lt;/code&gt; が&lt;/a&gt;発生したかのように処理されます。この場合、 &lt;code&gt;gather()&lt;/code&gt; 呼び出しはキャンセルされ&lt;strong&gt;ません&lt;/strong&gt;。これは、送信された1つのタスク/フューチャーがキャンセルされて、他のタスク/フューチャーがキャンセルされるのを防ぐためです。</target>
        </trans-unit>
        <trans-unit id="05fdb3a1d8014df423fd4d720c0c1096b43f8291" translate="yes" xml:space="preserve">
          <source>If any argument is a float and there are fractional microseconds, the fractional microseconds left over from all arguments are combined and their sum is rounded to the nearest microsecond using round-half-to-even tiebreaker. If no argument is a float, the conversion and normalization processes are exact (no information is lost).</source>
          <target state="translated">いずれかの引数が float であり、小数のマイクロ秒がある場合、すべての引数から残った小数のマイクロ秒が結合され、それらの合計は、ラウンドハーフからイーブンへのタイブレーカーを使用して、最も近いマイクロ秒に丸められます。引数が float でない場合、変換および正規化処理は正確に行われます(情報は失われません)。</target>
        </trans-unit>
        <trans-unit id="9d56491638c3d7ac65a56ae607e299d4de0401c5" translate="yes" xml:space="preserve">
          <source>If any awaitable in &lt;em&gt;aws&lt;/em&gt; is a coroutine, it is automatically scheduled as a Task.</source>
          <target state="translated">&lt;em&gt;aws&lt;/em&gt;で待機可能なものがコルーチンである場合、それは自動的にタスクとしてスケジュールされます。</target>
        </trans-unit>
        <trans-unit id="c5aebf3c75452198e6c5d279e23fde1e5f1cf025" translate="yes" xml:space="preserve">
          <source>If any members of the iterable are exceptions they will be raised instead of returned:</source>
          <target state="translated">iterableのメンバが例外である場合は、それが返されるのではなく発生します。</target>
        </trans-unit>
        <trans-unit id="27863231d65cea126a57b6d24dbf17c8f2a32c4a" translate="yes" xml:space="preserve">
          <source>If any of &lt;em&gt;suffix&lt;/em&gt;, &lt;em&gt;prefix&lt;/em&gt;, and &lt;em&gt;dir&lt;/em&gt; are not &lt;code&gt;None&lt;/code&gt;, they must be the same type. If they are bytes, the returned name will be bytes instead of str. If you want to force a bytes return value with otherwise default behavior, pass &lt;code&gt;suffix=b''&lt;/code&gt;.</source>
          <target state="translated">いずれかの場合は&lt;em&gt;接尾辞&lt;/em&gt;、&lt;em&gt;接頭辞&lt;/em&gt;、および&lt;em&gt;dirが&lt;/em&gt;ないではない &lt;code&gt;None&lt;/code&gt; 、彼らは同じ型でなければなりません。それらがバイトの場合、返される名前はstrではなくbytesになります。デフォルトの動作でバイトの戻り値を強制したい場合は、 &lt;code&gt;suffix=b''&lt;/code&gt; 渡します。</target>
        </trans-unit>
        <trans-unit id="907ec62b4e5199551950ce42a0c4c3bcd986262a" translate="yes" xml:space="preserve">
          <source>If any option is given, the script will exit with one of these values: &lt;code&gt;0&lt;/code&gt; if the user site-packages directory is enabled, &lt;code&gt;1&lt;/code&gt; if it was disabled by the user, &lt;code&gt;2&lt;/code&gt; if it is disabled for security reasons or by an administrator, and a value greater than 2 if there is an error.</source>
          <target state="translated">いずれかのオプションが与えられた場合、スクリプトは、次のいずれかの値で終了します： &lt;code&gt;0&lt;/code&gt; ユーザーsite-packagesディレクトリが有効になっている場合、 &lt;code&gt;1&lt;/code&gt; には、ユーザによって無効になっていた場合 &lt;code&gt;2&lt;/code&gt; 、それはセキュリティ上の理由からか、管理者によって無効にされている場合、およびエラーが発生した場合は、2より大きい値。</target>
        </trans-unit>
        <trans-unit id="24d1e1e82f1f2ee9e1949816fed45d7ac33121d6" translate="yes" xml:space="preserve">
          <source>If any precondition isn&amp;rsquo;t met (e.g. not TLS 1.3, PHA not enabled), an &lt;a href=&quot;#ssl.SSLError&quot;&gt;&lt;code&gt;SSLError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">前提条件が満たされていない場合（TLS 1.3、PHAが有効になっていないなど）、&lt;a href=&quot;#ssl.SSLError&quot;&gt; &lt;code&gt;SSLError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="37276ee5d3e42e8336da18222c175ce80e212073" translate="yes" xml:space="preserve">
          <source>If at least one of &lt;em&gt;encoding&lt;/em&gt; or &lt;em&gt;errors&lt;/em&gt; is given, &lt;em&gt;object&lt;/em&gt; should be a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt; (e.g. &lt;a href=&quot;#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt;). In this case, if &lt;em&gt;object&lt;/em&gt; is a &lt;a href=&quot;#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt;) object, then &lt;code&gt;str(bytes, encoding, errors)&lt;/code&gt; is equivalent to &lt;a href=&quot;#bytes.decode&quot;&gt;&lt;code&gt;bytes.decode(encoding, errors)&lt;/code&gt;&lt;/a&gt;. Otherwise, the bytes object underlying the buffer object is obtained before calling &lt;a href=&quot;#bytes.decode&quot;&gt;&lt;code&gt;bytes.decode()&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;#binaryseq&quot;&gt;Binary Sequence Types &amp;mdash; bytes, bytearray, memoryview&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/c-api/buffer.html#bufferobjects&quot;&gt;Buffer Protocol&lt;/a&gt; for information on buffer objects.</source>
          <target state="translated">&lt;em&gt;エンコーディング&lt;/em&gt;または&lt;em&gt;エラーの&lt;/em&gt;少なくとも1つが指定されている場合、&lt;em&gt;オブジェクト&lt;/em&gt;は&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクト&lt;/a&gt;（たとえば、&lt;a href=&quot;#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#bytearray&quot;&gt; &lt;code&gt;bytearray&lt;/code&gt; &lt;/a&gt;）である必要があります。この場合、&lt;em&gt;object&lt;/em&gt;が&lt;a href=&quot;#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;（または&lt;a href=&quot;#bytearray&quot;&gt; &lt;code&gt;bytearray&lt;/code&gt; &lt;/a&gt;）オブジェクトの場合、 &lt;code&gt;str(bytes, encoding, errors)&lt;/code&gt; は&lt;a href=&quot;#bytes.decode&quot;&gt; &lt;code&gt;bytes.decode(encoding, errors)&lt;/code&gt; &lt;/a&gt;と同等です。それ以外の場合は、&lt;a href=&quot;#bytes.decode&quot;&gt; &lt;code&gt;bytes.decode()&lt;/code&gt; を&lt;/a&gt;呼び出す前に、バッファオブジェクトの基礎となるbytesオブジェクトを取得します。バッファオブジェクトの詳細については、&lt;a href=&quot;#binaryseq&quot;&gt;バイナリシーケンスタイプ&amp;mdash;バイト、バイト配列、メモリビュー、&lt;/a&gt;および&lt;a href=&quot;https://docs.python.org/3.8/c-api/buffer.html#bufferobjects&quot;&gt;バッファプロトコル&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a08ad24a4b377d2b7fc4af8b136e23de7adba584" translate="yes" xml:space="preserve">
          <source>If authentication is requested but no authentication key is specified then the return value of &lt;code&gt;current_process().authkey&lt;/code&gt; is used (see &lt;a href=&quot;#multiprocessing.Process&quot;&gt;&lt;code&gt;Process&lt;/code&gt;&lt;/a&gt;). This value will be automatically inherited by any &lt;a href=&quot;#multiprocessing.Process&quot;&gt;&lt;code&gt;Process&lt;/code&gt;&lt;/a&gt; object that the current process creates. This means that (by default) all processes of a multi-process program will share a single authentication key which can be used when setting up connections between themselves.</source>
          <target state="translated">認証が要求されても認証キーが指定されていない場合は、 &lt;code&gt;current_process().authkey&lt;/code&gt; 戻り値が使用されます（&lt;a href=&quot;#multiprocessing.Process&quot;&gt; &lt;code&gt;Process&lt;/code&gt; を&lt;/a&gt;参照）。この値は、現在のプロセスが作成するすべての&lt;a href=&quot;#multiprocessing.Process&quot;&gt; &lt;code&gt;Process&lt;/code&gt; &lt;/a&gt;オブジェクトによって自動的に継承されます。これは、（デフォルトで）マルチプロセスプログラムのすべてのプロセスが、それらの間の接続をセットアップするときに使用できる単一の認証キーを共有することを意味します。</target>
        </trans-unit>
        <trans-unit id="e20a8216bd741a08c72ea1c6ed3561d4c0175953" translate="yes" xml:space="preserve">
          <source>If backslashes immediately precede a double quotation mark, every pair of backslashes is interpreted as a literal backslash. If the number of backslashes is odd, the last backslash escapes the next double quotation mark as described in rule 3.</source>
          <target state="translated">ダブルクォーテーションマークの直前にバックスラッシュがある場合、すべてのバックスラッシュのペアはリテラルバックスラッシュとして解釈されます。バックスラッシュの数が奇数の場合、規則3で説明されているように、最後のバックスラッシュは次のダブルクォーテーションマークをエスケープします。</target>
        </trans-unit>
        <trans-unit id="c7232d0f35717aeee89b7f01e116b1ce15ef033a" translate="yes" xml:space="preserve">
          <source>If both are aware and have different &lt;a href=&quot;#datetime.datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; attributes, &lt;code&gt;a-b&lt;/code&gt; acts as if &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; were first converted to naive UTC datetimes first. The result is &lt;code&gt;(a.replace(tzinfo=None) - a.utcoffset()) - (b.replace(tzinfo=None)
- b.utcoffset())&lt;/code&gt; except that the implementation never overflows.</source>
          <target state="translated">両方が認識していて、&lt;a href=&quot;#datetime.datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;属性が異なる場合、 &lt;code&gt;a-b&lt;/code&gt; &lt;em&gt;は&lt;/em&gt;、&lt;em&gt;a&lt;/em&gt;と&lt;em&gt;b&lt;/em&gt;が最初に単純なUTC日時に最初に変換されたかのように動作します。結果は &lt;code&gt;(a.replace(tzinfo=None) - a.utcoffset()) - (b.replace(tzinfo=None) - b.utcoffset())&lt;/code&gt; になりますが、実装がオーバーフローすることはありません。</target>
        </trans-unit>
        <trans-unit id="21414aeb047eb522c66140299d9c38360d32d811" translate="yes" xml:space="preserve">
          <source>If both are naive, or both are aware and have the same &lt;a href=&quot;#datetime.datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; attribute, the &lt;a href=&quot;#datetime.datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; attributes are ignored, and the result is a &lt;a href=&quot;#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt; object &lt;em&gt;t&lt;/em&gt; such that &lt;code&gt;datetime2 + t == datetime1&lt;/code&gt;. No time zone adjustments are done in this case.</source>
          <target state="translated">両方がナイーブであるか、両方が認識されており、同じ&lt;a href=&quot;#datetime.datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;属性を持っている場合、&lt;a href=&quot;#datetime.datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;属性は無視され、結果は &lt;code&gt;datetime2 + t == datetime1&lt;/code&gt; ような&lt;a href=&quot;#datetime.timedelta&quot;&gt; &lt;code&gt;timedelta&lt;/code&gt; &lt;/a&gt;オブジェクト&lt;em&gt;tに&lt;/em&gt;なります。この場合、タイムゾーンの調整は行われません。</target>
        </trans-unit>
        <trans-unit id="a6f9d2935f72f29d54f2f1f7b010c9d2226c8c57" translate="yes" xml:space="preserve">
          <source>If both callbacks signal EOF then &lt;em&gt;spawn&lt;/em&gt; will probably never return, unless &lt;em&gt;select&lt;/em&gt; throws an error on your platform when passed three empty lists. This is a bug, documented in &lt;a href=&quot;https://bugs.python.org/issue26228&quot;&gt;issue 26228&lt;/a&gt;.</source>
          <target state="translated">両方のコールバックがEOFを通知する場合、&lt;em&gt;select&lt;/em&gt;が3つの空のリストを渡してプラットフォームでエラーをスローしない限り、&lt;em&gt;spawn&lt;/em&gt;はおそらく決して戻りません。これはバグであり、&lt;a href=&quot;https://bugs.python.org/issue26228&quot;&gt;問題26228&lt;/a&gt;に記載されています。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9b4e1f0c2a028fb50a27b3609c4d3827918db65a" translate="yes" xml:space="preserve">
          <source>If both comparands are aware, and have the same &lt;a href=&quot;#datetime.datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; attribute, the common &lt;a href=&quot;#datetime.datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; attribute is ignored and the base datetimes are compared. If both comparands are aware and have different &lt;a href=&quot;#datetime.datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; attributes, the comparands are first adjusted by subtracting their UTC offsets (obtained from &lt;code&gt;self.utcoffset()&lt;/code&gt;).</source>
          <target state="translated">両方の被比較数が認識されており、同じ&lt;a href=&quot;#datetime.datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;属性を持っている場合、共通の&lt;a href=&quot;#datetime.datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;属性は無視され、基準日時が比較されます。両方の比較対象が認識され、異なる&lt;a href=&quot;#datetime.datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;属性を持っている場合、最初に、比較対象はUTCオフセット（ &lt;code&gt;self.utcoffset()&lt;/code&gt; から取得）を差し引くことによって調整されます。</target>
        </trans-unit>
        <trans-unit id="d641321a92c1f78e2ea9102fa10acde0aa020cab" translate="yes" xml:space="preserve">
          <source>If both comparands are aware, and have the same &lt;a href=&quot;#datetime.time.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; attribute, the common &lt;a href=&quot;#datetime.time.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; attribute is ignored and the base times are compared. If both comparands are aware and have different &lt;a href=&quot;#datetime.time.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; attributes, the comparands are first adjusted by subtracting their UTC offsets (obtained from &lt;code&gt;self.utcoffset()&lt;/code&gt;). In order to stop mixed-type comparisons from falling back to the default comparison by object address, when a &lt;a href=&quot;#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; object is compared to an object of a different type, &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised unless the comparison is &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt;. The latter cases return &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;, respectively.</source>
          <target state="translated">両方の被比較数が認識されており、同じ&lt;a href=&quot;#datetime.time.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;属性を持っている場合、共通の&lt;a href=&quot;#datetime.time.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;属性は無視され、基準時刻が比較されます。両方の比較対象が認識され、異なる&lt;a href=&quot;#datetime.time.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;属性を持っている場合、最初に、比較対象はUTCオフセット（ &lt;code&gt;self.utcoffset()&lt;/code&gt; から取得）を差し引くことによって調整されます。混合タイプの比較がオブジェクトアドレスによるデフォルトの比較にフォールバックしないようにするために、&lt;a href=&quot;#datetime.time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt;オブジェクトが異なるタイプのオブジェクトと比較されると、比較が &lt;code&gt;==&lt;/code&gt; または &lt;code&gt;!=&lt;/code&gt; でない限り、&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;が発生します。後者の場合は、それぞれ&lt;a href=&quot;constants#False&quot;&gt; &lt;code&gt;False&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;constants#True&quot;&gt; &lt;code&gt;True&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="640348c16c27f575031545c2822c834b44553bb0" translate="yes" xml:space="preserve">
          <source>If both options are given, user base and user site will be printed (always in this order), separated by &lt;a href=&quot;os#os.pathsep&quot;&gt;&lt;code&gt;os.pathsep&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">両方のオプションを指定すると、ユーザーベースとユーザーサイトが（常にこの順序で）印刷され、&lt;a href=&quot;os#os.pathsep&quot;&gt; &lt;code&gt;os.pathsep&lt;/code&gt; &lt;/a&gt;で区切られます。</target>
        </trans-unit>
        <trans-unit id="5636d444bb3185b61c96a8708aabc4aa7259b873" translate="yes" xml:space="preserve">
          <source>If both the &lt;a href=&quot;#pickle.Pickler.dispatch_table&quot;&gt;&lt;code&gt;dispatch_table&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pickle.Pickler.reducer_override&quot;&gt;&lt;code&gt;reducer_override()&lt;/code&gt;&lt;/a&gt; are defined, then &lt;a href=&quot;#pickle.Pickler.reducer_override&quot;&gt;&lt;code&gt;reducer_override()&lt;/code&gt;&lt;/a&gt; method takes priority.</source>
          <target state="translated">両方の場合&lt;a href=&quot;#pickle.Pickler.dispatch_table&quot;&gt; &lt;code&gt;dispatch_table&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#pickle.Pickler.reducer_override&quot;&gt; &lt;code&gt;reducer_override()&lt;/code&gt; が&lt;/a&gt;定義され、次いで&lt;a href=&quot;#pickle.Pickler.reducer_override&quot;&gt; &lt;code&gt;reducer_override()&lt;/code&gt; &lt;/a&gt;メソッドが優先されます。</target>
        </trans-unit>
        <trans-unit id="0084a482d9be8fc3608c4a7c65006f2f65fc3c35" translate="yes" xml:space="preserve">
          <source>If called for &lt;em&gt;text&lt;/em&gt; that doesn&amp;rsquo;t include a period character (&lt;code&gt;'.'&lt;/code&gt;), it will complete from names currently defined in &lt;a href=&quot;__main__#module-__main__&quot;&gt;&lt;code&gt;__main__&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;builtins#module-builtins&quot;&gt;&lt;code&gt;builtins&lt;/code&gt;&lt;/a&gt; and keywords (as defined by the &lt;a href=&quot;keyword#module-keyword&quot;&gt;&lt;code&gt;keyword&lt;/code&gt;&lt;/a&gt; module).</source>
          <target state="translated">ピリオド文字（ &lt;code&gt;'.'&lt;/code&gt; ）を含まない&lt;em&gt;テキスト&lt;/em&gt;を呼び出すと、現在&lt;a href=&quot;__main__#module-__main__&quot;&gt; &lt;code&gt;__main__&lt;/code&gt; &lt;/a&gt;で定義されている名前、&lt;a href=&quot;builtins#module-builtins&quot;&gt; &lt;code&gt;builtins&lt;/code&gt; &lt;/a&gt;キーワード、および&lt;a href=&quot;keyword#module-keyword&quot;&gt; &lt;code&gt;keyword&lt;/code&gt; &lt;/a&gt;モジュールで定義されているキーワードから補完されます。</target>
        </trans-unit>
        <trans-unit id="9c41c5f7a69443087f2a6c12e1c09cf638abbcdd" translate="yes" xml:space="preserve">
          <source>If called for a dotted name, it will try to evaluate anything without obvious side-effects (functions will not be evaluated, but it can generate calls to &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattr__&quot;&gt;&lt;code&gt;__getattr__()&lt;/code&gt;&lt;/a&gt;) up to the last part, and find matches for the rest via the &lt;a href=&quot;functions#dir&quot;&gt;&lt;code&gt;dir()&lt;/code&gt;&lt;/a&gt; function. Any exception raised during the evaluation of the expression is caught, silenced and &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">点線の名前を呼ばれた場合、それは明白な副作用なしには何も評価しよう（関数が評価されることはありませんが、それはへの呼び出しを生成することができます&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattr__&quot;&gt; &lt;code&gt;__getattr__()&lt;/code&gt; &lt;/a&gt;）までの最後の部分に、を介して残りの試合を見つける&lt;a href=&quot;functions#dir&quot;&gt; &lt;code&gt;dir()&lt;/code&gt; &lt;/a&gt;関数。式の評価中に発生した例外はすべてキャッチされ、沈黙し、&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="1db8ca82fb7c38924ab71e87dc3d3f1a74a4cf1e" translate="yes" xml:space="preserve">
          <source>If called without arguments (or with &lt;code&gt;tz=None&lt;/code&gt;) the system local timezone is assumed for the target timezone. The &lt;code&gt;.tzinfo&lt;/code&gt; attribute of the converted datetime instance will be set to an instance of &lt;a href=&quot;#datetime.timezone&quot;&gt;&lt;code&gt;timezone&lt;/code&gt;&lt;/a&gt; with the zone name and offset obtained from the OS.</source>
          <target state="translated">引数 &lt;code&gt;tz=None&lt;/code&gt; （またはtz = Noneを使用して）呼び出されると、システムのローカルタイムゾーンがターゲットタイムゾーンと見なされます。変換された日時インスタンスの &lt;code&gt;.tzinfo&lt;/code&gt; 属性は、OSから取得したゾーン名とオフセットを使用して&lt;a href=&quot;#datetime.timezone&quot;&gt; &lt;code&gt;timezone&lt;/code&gt; &lt;/a&gt;インスタンスに設定されます。</target>
        </trans-unit>
        <trans-unit id="ed2cd04e51ea2f7f1214c3f95faf0caa16f6b695" translate="yes" xml:space="preserve">
          <source>If calling &lt;a href=&quot;#collections.defaultdict.default_factory&quot;&gt;&lt;code&gt;default_factory&lt;/code&gt;&lt;/a&gt; raises an exception this exception is propagated unchanged.</source>
          <target state="translated">&lt;a href=&quot;#collections.defaultdict.default_factory&quot;&gt; &lt;code&gt;default_factory&lt;/code&gt; &lt;/a&gt;を呼び出すと例外が発生する場合、この例外は変更されずに伝播されます。</target>
        </trans-unit>
        <trans-unit id="52f86dd4dc687753a2bf5577502ab4b99d7efacd" translate="yes" xml:space="preserve">
          <source>If completion is enabled, completing commands will be done automatically, and completing of commands args is done by calling &lt;code&gt;complete_foo()&lt;/code&gt; with arguments &lt;em&gt;text&lt;/em&gt;, &lt;em&gt;line&lt;/em&gt;, &lt;em&gt;begidx&lt;/em&gt;, and &lt;em&gt;endidx&lt;/em&gt;. &lt;em&gt;text&lt;/em&gt; is the string prefix we are attempting to match: all returned matches must begin with it. &lt;em&gt;line&lt;/em&gt; is the current input line with leading whitespace removed, &lt;em&gt;begidx&lt;/em&gt; and &lt;em&gt;endidx&lt;/em&gt; are the beginning and ending indexes of the prefix text, which could be used to provide different completion depending upon which position the argument is in.</source>
          <target state="translated">補完が有効になっている場合、コマンドの補完は自動的に行われ、コマンドargsの補完は、引数&lt;em&gt;text&lt;/em&gt;、&lt;em&gt;line&lt;/em&gt;、&lt;em&gt;begidx&lt;/em&gt;、および&lt;em&gt;endidx&lt;/em&gt;を指定して &lt;code&gt;complete_foo()&lt;/code&gt; を呼び出すことによって行われ&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;text&lt;/em&gt;は、照合しようとしている文字列プレフィックスです。返されるすべての一致は、それで始まる必要があります。&lt;em&gt;line&lt;/em&gt;は、先頭の空白が削除された現在の入力行です&lt;em&gt;。begidx&lt;/em&gt;と&lt;em&gt;endidx&lt;/em&gt;は、プレフィックステキストの開始インデックスと終了インデックスです。これを使用して、引数の位置に応じて異なる補完を提供できます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0fec01fc70889d001a5e5d5e76ebae2d730e863d" translate="yes" xml:space="preserve">
          <source>If cookie has the named cookie-attribute, return its value. Otherwise, return &lt;em&gt;default&lt;/em&gt;.</source>
          <target state="translated">cookieに名前付きのcookie-attributeがある場合、その値を返します。それ以外の場合は、&lt;em&gt;デフォルトを&lt;/em&gt;返し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="67343970e1a1e7fd355a02bf76406a533d9720d9" translate="yes" xml:space="preserve">
          <source>If defined, &lt;a href=&quot;#pickle.Unpickler.persistent_load&quot;&gt;&lt;code&gt;persistent_load()&lt;/code&gt;&lt;/a&gt; should return the object specified by the persistent ID &lt;em&gt;pid&lt;/em&gt;. If an invalid persistent ID is encountered, an &lt;a href=&quot;#pickle.UnpicklingError&quot;&gt;&lt;code&gt;UnpicklingError&lt;/code&gt;&lt;/a&gt; should be raised.</source>
          <target state="translated">定義されている場合、&lt;a href=&quot;#pickle.Unpickler.persistent_load&quot;&gt; &lt;code&gt;persistent_load()&lt;/code&gt; &lt;/a&gt;は、永続ID &lt;em&gt;pidで&lt;/em&gt;指定されたオブジェクトを返す必要があります。無効な永続IDが検出されると、&lt;a href=&quot;#pickle.UnpicklingError&quot;&gt; &lt;code&gt;UnpicklingError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="6474a9f723b4362b908bfb9818eb48e3ccd80f58" translate="yes" xml:space="preserve">
          <source>If discovery is started in a directory containing a package, either from the command line or by calling &lt;a href=&quot;#unittest.TestLoader.discover&quot;&gt;&lt;code&gt;TestLoader.discover()&lt;/code&gt;&lt;/a&gt;, then the package &lt;code&gt;__init__.py&lt;/code&gt; will be checked for &lt;code&gt;load_tests&lt;/code&gt;. If that function does not exist, discovery will recurse into the package as though it were just another directory. Otherwise, discovery of the package&amp;rsquo;s tests will be left up to &lt;code&gt;load_tests&lt;/code&gt; which is called with the following arguments:</source>
          <target state="translated">コマンドラインから、&lt;a href=&quot;#unittest.TestLoader.discover&quot;&gt; &lt;code&gt;TestLoader.discover()&lt;/code&gt; &lt;/a&gt;呼び出して、パッケージを含むディレクトリで検出が開始されると、パッケージ &lt;code&gt;__init__.py&lt;/code&gt; で &lt;code&gt;load_tests&lt;/code&gt; がチェックされます。その機能が存在しない場合、あたかも別のディレクトリであるかのように、検出がパッケージに再帰します。それ以外の場合、パッケージのテストの検出は、次の引数で呼び出される &lt;code&gt;load_tests&lt;/code&gt; に任されます。</target>
        </trans-unit>
        <trans-unit id="f3d282be498a158600c18b4f9266fe30d1c639ff" translate="yes" xml:space="preserve">
          <source>If echo free input is unavailable getpass() falls back to printing a warning message to &lt;em&gt;stream&lt;/em&gt; and reading from &lt;code&gt;sys.stdin&lt;/code&gt; and issuing a &lt;a href=&quot;#getpass.GetPassWarning&quot;&gt;&lt;code&gt;GetPassWarning&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エコーのない入力が利用できない場合、getpass（）はフォールバックして、 &lt;code&gt;sys.stdin&lt;/code&gt; から&lt;em&gt;ストリーミング&lt;/em&gt;および読み取りを行う警告メッセージを&lt;a href=&quot;#getpass.GetPassWarning&quot;&gt; &lt;code&gt;GetPassWarning&lt;/code&gt; &lt;/a&gt;し、GetPassWarningを発行します。</target>
        </trans-unit>
        <trans-unit id="f9040a07fe9c1bf05ab58e880006a37bf7aba0a3" translate="yes" xml:space="preserve">
          <source>If either &lt;a href=&quot;exceptions#BrokenPipeError&quot;&gt;&lt;code&gt;BrokenPipeError&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;exceptions#ConnectionResetError&quot;&gt;&lt;code&gt;ConnectionResetError&lt;/code&gt;&lt;/a&gt; exception is raised when writing &lt;em&gt;input&lt;/em&gt; into &lt;em&gt;stdin&lt;/em&gt;, the exception is ignored. This condition occurs when the process exits before all data are written into &lt;em&gt;stdin&lt;/em&gt;.</source>
          <target state="translated">いずれかの場合&lt;a href=&quot;exceptions#BrokenPipeError&quot;&gt; &lt;code&gt;BrokenPipeError&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;exceptions#ConnectionResetError&quot;&gt; &lt;code&gt;ConnectionResetError&lt;/code&gt; &lt;/a&gt;書き込み時に例外が発生した&lt;em&gt;入力&lt;/em&gt;に&lt;em&gt;STDINを&lt;/em&gt;、例外は無視されます。この状態は、すべてのデータが&lt;em&gt;stdinに&lt;/em&gt;書き込まれる前にプロセスが終了したときに発生します。</target>
        </trans-unit>
        <trans-unit id="be4f44baf0b306a7dfcbf05bf212b256e0623d5a" translate="yes" xml:space="preserve">
          <source>If either format string is not supported by the &lt;a href=&quot;struct#module-struct&quot;&gt;&lt;code&gt;struct&lt;/code&gt;&lt;/a&gt; module, then the objects will always compare as unequal (even if the format strings and buffer contents are identical):</source>
          <target state="translated">どちらかのフォーマット文字列が&lt;a href=&quot;struct#module-struct&quot;&gt; &lt;code&gt;struct&lt;/code&gt; &lt;/a&gt;モジュールでサポートされていない場合、オブジェクトは常に不等として比較されます（フォーマット文字列とバッファーの内容が同じであっても）。</target>
        </trans-unit>
        <trans-unit id="2b8cf100d8fc5cb58fc7dd2777bc293a42ecb2c2" translate="yes" xml:space="preserve">
          <source>If end of file is found and no bytes were read, raise &lt;a href=&quot;exceptions#EOFError&quot;&gt;&lt;code&gt;EOFError&lt;/code&gt;&lt;/a&gt;. Otherwise, when nothing matches, return &lt;code&gt;(-1, None, data)&lt;/code&gt; where &lt;em&gt;data&lt;/em&gt; is the bytes received so far (may be empty bytes if a timeout happened).</source>
          <target state="translated">ファイルの終わりが見つかり、バイトが読み取られなかった場合は、&lt;a href=&quot;exceptions#EOFError&quot;&gt; &lt;code&gt;EOFError&lt;/code&gt; を送出し&lt;/a&gt;ます。それ以外の場合、何も一致しない場合は、 &lt;code&gt;(-1, None, data)&lt;/code&gt; 返します。ここで、&lt;em&gt;データ&lt;/em&gt;はこれまでに受信したバイトです（タイムアウトが発生した場合は空のバイトになる場合があります）。</target>
        </trans-unit>
        <trans-unit id="2e0604802c9b1772457ef4937546641bbade8d20" translate="yes" xml:space="preserve">
          <source>If exception(s) occur, an &lt;a href=&quot;#shutil.Error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; is raised with a list of reasons.</source>
          <target state="translated">例外が発生すると、理由のリストとともに&lt;a href=&quot;#shutil.Error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="71e75d563ccaca9a7a7e9ebdc073bdb50eae3f53" translate="yes" xml:space="preserve">
          <source>If fullname contains a &amp;lsquo;.&amp;rsquo;, the finders will be for the package containing fullname, otherwise they will be all registered top level finders (i.e. those on both sys.meta_path and sys.path_hooks).</source>
          <target state="translated">fullnameに「。」が含まれている場合、ファインダーはfullnameを含むパッケージ用です。それ以外の場合、それらはすべて登録されたトップレベルのファインダー（つまり、sys.meta_pathとsys.path_hooksの両方）になります。</target>
        </trans-unit>
        <trans-unit id="01110f1d67d6e9a5355fb7676557e4a50b926762" translate="yes" xml:space="preserve">
          <source>If given a list or string, the initializer is passed to the new array&amp;rsquo;s &lt;a href=&quot;#array.array.fromlist&quot;&gt;&lt;code&gt;fromlist()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#array.array.frombytes&quot;&gt;&lt;code&gt;frombytes()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;#array.array.fromunicode&quot;&gt;&lt;code&gt;fromunicode()&lt;/code&gt;&lt;/a&gt; method (see below) to add initial items to the array. Otherwise, the iterable initializer is passed to the &lt;a href=&quot;#array.array.extend&quot;&gt;&lt;code&gt;extend()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">リストまたは文字列が指定されている場合、初期化子は新しい配列の&lt;a href=&quot;#array.array.fromlist&quot;&gt; &lt;code&gt;fromlist()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#array.array.frombytes&quot;&gt; &lt;code&gt;frombytes()&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;#array.array.fromunicode&quot;&gt; &lt;code&gt;fromunicode()&lt;/code&gt; &lt;/a&gt;メソッド（下記を参照）に渡され、配列に初期項目が追加されます。それ以外の場合、反復可能な初期化子は、&lt;a href=&quot;#array.array.extend&quot;&gt; &lt;code&gt;extend()&lt;/code&gt; &lt;/a&gt;メソッドに渡されます。</target>
        </trans-unit>
        <trans-unit id="2af680c07fb1f88b58852d1a71d38f2be07b2607" translate="yes" xml:space="preserve">
          <source>If given, &lt;em&gt;compress_type&lt;/em&gt; overrides the value given for the &lt;em&gt;compression&lt;/em&gt; parameter to the constructor for the new entry, or in the &lt;em&gt;zinfo_or_arcname&lt;/em&gt; (if that is a &lt;a href=&quot;#zipfile.ZipInfo&quot;&gt;&lt;code&gt;ZipInfo&lt;/code&gt;&lt;/a&gt; instance). Similarly, &lt;em&gt;compresslevel&lt;/em&gt; will override the constructor if given.</source>
          <target state="translated">与えられた場合、&lt;em&gt;compress_type&lt;/em&gt;は、新しいパラメーターのコンストラクター、または&lt;em&gt;zinfo_or_arcname&lt;/em&gt;（&lt;a href=&quot;#zipfile.ZipInfo&quot;&gt; &lt;code&gt;ZipInfo&lt;/code&gt; &lt;/a&gt;インスタンスの場合）の&lt;em&gt;圧縮&lt;/em&gt;パラメーターに指定された値をオーバーライドします。同様に、&lt;em&gt;compresslevelを指定&lt;/em&gt;すると、コンストラクターがオーバーライドされます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="609f14a5d88e9d16549cb48055d0b9bddf3d600e" translate="yes" xml:space="preserve">
          <source>If given, &lt;em&gt;default&lt;/em&gt; will be returned if the object does not provide means to retrieve the size. Otherwise a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; will be raised.</source>
          <target state="translated">&lt;em&gt;指定&lt;/em&gt;すると、オブジェクトがサイズを取得する手段を提供しない場合、&lt;em&gt;デフォルト&lt;/em&gt;が返されます。それ以外の場合は、&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="9f38935e27047cadfc0462ecbb2dd5665952c0eb" translate="yes" xml:space="preserve">
          <source>If given, &lt;em&gt;doc&lt;/em&gt; will be the docstring of the property attribute. Otherwise, the property will copy &lt;em&gt;fget&lt;/em&gt;&amp;rsquo;s docstring (if it exists). This makes it possible to create read-only properties easily using &lt;a href=&quot;#property&quot;&gt;&lt;code&gt;property()&lt;/code&gt;&lt;/a&gt; as a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-decorator&quot;&gt;decorator&lt;/a&gt;:</source>
          <target state="translated">指定した場合、&lt;em&gt;doc&lt;/em&gt;はプロパティ属性のdocstringになります。それ以外の場合、プロパティは&lt;em&gt;fgetのドキュメント&lt;/em&gt;文字列（存在する場合）をコピーします。これにより、&lt;a href=&quot;#property&quot;&gt; &lt;code&gt;property()&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-decorator&quot;&gt;デコレータ&lt;/a&gt;として使用して、読み取り専用プロパティを簡単に作成できます。</target>
        </trans-unit>
        <trans-unit id="47874343de9186efbf845a71e131f69e43d9eafd" translate="yes" xml:space="preserve">
          <source>If given, &lt;em&gt;extra_args&lt;/em&gt; is a sequence of &lt;code&gt;(name, value)&lt;/code&gt; pairs that will be used as extra keywords arguments when the archiver callable is used.</source>
          <target state="translated">指定された場合、&lt;em&gt;extra_args&lt;/em&gt;は、 &lt;code&gt;(name, value)&lt;/code&gt; ペアのシーケンスであり、アーカイバー呼び出し可能オブジェクトが使用されるときに追加のキーワード引数として使用されます。</target>
        </trans-unit>
        <trans-unit id="fa087efbf7689c1c4adc26135d774f6bca7fd2e9" translate="yes" xml:space="preserve">
          <source>If given, &lt;em&gt;level&lt;/em&gt; should be either a numeric logging level or its string equivalent (for example either &lt;code&gt;&quot;ERROR&quot;&lt;/code&gt; or &lt;code&gt;logging.ERROR&lt;/code&gt;). The default is &lt;code&gt;logging.INFO&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;level&lt;/em&gt;を指定する場合、&lt;em&gt;レベル&lt;/em&gt;は数値のログレベルまたはそれに相当する文字列（たとえば、 &lt;code&gt;&quot;ERROR&quot;&lt;/code&gt; または &lt;code&gt;logging.ERROR&lt;/code&gt; ）のいずれかでなければなりません。デフォルトは &lt;code&gt;logging.INFO&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6742a72866173acc4c64ea3543dda8799bca224e" translate="yes" xml:space="preserve">
          <source>If given, &lt;em&gt;logger&lt;/em&gt; should be a &lt;a href=&quot;logging#logging.Logger&quot;&gt;&lt;code&gt;logging.Logger&lt;/code&gt;&lt;/a&gt; object or a &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; giving the name of a logger. The default is the root logger, which will catch all messages.</source>
          <target state="translated">指定する場合、&lt;em&gt;ロガー&lt;/em&gt;は&lt;a href=&quot;logging#logging.Logger&quot;&gt; &lt;code&gt;logging.Logger&lt;/code&gt; &lt;/a&gt;オブジェクトまたはロガーの名前を示す&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; に&lt;/a&gt;する必要があります。デフォルトはルートロガーで、すべてのメッセージをキャッチします。</target>
        </trans-unit>
        <trans-unit id="5d1743db3a55e3d1d851253caed66fb63e4ec4ba" translate="yes" xml:space="preserve">
          <source>If given, &lt;em&gt;startupinfo&lt;/em&gt; will be a &lt;a href=&quot;#subprocess.STARTUPINFO&quot;&gt;&lt;code&gt;STARTUPINFO&lt;/code&gt;&lt;/a&gt; object, which is passed to the underlying &lt;code&gt;CreateProcess&lt;/code&gt; function. &lt;em&gt;creationflags&lt;/em&gt;, if given, can be one or more of the following flags:</source>
          <target state="translated">指定された場合、&lt;em&gt;startupinfo&lt;/em&gt;は&lt;a href=&quot;#subprocess.STARTUPINFO&quot;&gt; &lt;code&gt;STARTUPINFO&lt;/code&gt; &lt;/a&gt;オブジェクトであり、基礎となる &lt;code&gt;CreateProcess&lt;/code&gt; 関数に渡されます。&lt;em&gt;creationflags&lt;/em&gt;は、指定する場合、次のフラグの1つ以上にすることができます。</target>
        </trans-unit>
        <trans-unit id="44cb0cd8c45e437d22c4b42cdbed99611a31b48c" translate="yes" xml:space="preserve">
          <source>If greater than zero, specifies how much space, in character widths, to allocate for the text label, if less than zero, specifies a minimum width. If zero or unspecified, the natural width of the text label is used.</source>
          <target state="translated">ゼロより大きい場合は、 テキス ト ラ ベルに割り当てるスペースを文字幅で指定し、 ゼロより小さい場合は最小幅を指定します。ゼロまたは指定しない場合、テキストラベルの自然な幅が使用されます。</target>
        </trans-unit>
        <trans-unit id="718d9d10f66de628c1bab6c410a233a3ac12213c" translate="yes" xml:space="preserve">
          <source>If importing a module fails, for example due to a syntax error, then this will be recorded as a single error and discovery will continue. If the import failure is due to &lt;a href=&quot;#unittest.SkipTest&quot;&gt;&lt;code&gt;SkipTest&lt;/code&gt;&lt;/a&gt; being raised, it will be recorded as a skip instead of an error.</source>
          <target state="translated">構文エラーなどが原因でモジュールのインポートが失敗した場合、これは単一のエラーとして記録され、検出が続行されます。&lt;a href=&quot;#unittest.SkipTest&quot;&gt; &lt;code&gt;SkipTest&lt;/code&gt; &lt;/a&gt;が発生したことがインポートの失敗の原因である場合、エラーではなくスキップとして記録されます。</target>
        </trans-unit>
        <trans-unit id="79f23909838ce6528a57771817116435f2739054" translate="yes" xml:space="preserve">
          <source>If input is a number greater than 10 or smaller than 0.5, speed is set to 0. Speedstrings are mapped to speedvalues as follows:</source>
          <target state="translated">入力が10以上0.5以下の数値の場合、速度は0に設定されます。 速度文字列は以下のように速度値にマッピングされます。</target>
        </trans-unit>
        <trans-unit id="5989f9c468e2d22d579475f78ddf414d62121f7d" translate="yes" xml:space="preserve">
          <source>If invalid arguments are passed in, it will issue an error:</source>
          <target state="translated">無効な引数が渡された場合、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="93a952190c9333e02d422078312ba6dfe53a93fe" translate="yes" xml:space="preserve">
          <source>If invoked without arguments, clear all cookies. If given a single argument, only cookies belonging to that &lt;em&gt;domain&lt;/em&gt; will be removed. If given two arguments, cookies belonging to the specified &lt;em&gt;domain&lt;/em&gt; and URL &lt;em&gt;path&lt;/em&gt; are removed. If given three arguments, then the cookie with the specified &lt;em&gt;domain&lt;/em&gt;, &lt;em&gt;path&lt;/em&gt; and &lt;em&gt;name&lt;/em&gt; is removed.</source>
          <target state="translated">引数なしで呼び出された場合、すべてのCookieをクリアします。単一の引数を指定すると、その&lt;em&gt;ドメインに&lt;/em&gt;属するCookieのみが削除されます。2つの引数を指定すると、指定した&lt;em&gt;ドメイン&lt;/em&gt;およびURL &lt;em&gt;パスに&lt;/em&gt;属するCookie が削除されます。3つの引数が指定された&lt;em&gt;場合&lt;/em&gt;、指定された&lt;em&gt;ドメイン&lt;/em&gt;、&lt;em&gt;パス&lt;/em&gt;、および&lt;em&gt;名前&lt;/em&gt;のCookie が削除されます。</target>
        </trans-unit>
        <trans-unit id="00314545be4a33bc05a395af1ac6499955ea39c3" translate="yes" xml:space="preserve">
          <source>If it falls back to the boilerplate, there are no more possible methods to try, so this is where the default implementation should live.</source>
          <target state="translated">それがボイラープレートに戻ってしまうと、試すことができるメソッドがなくなってしまうので、ここはデフォルトの実装が生きているはずです。</target>
        </trans-unit>
        <trans-unit id="967a860c70a7b59392bb2e73d01133edf0c97f92" translate="yes" xml:space="preserve">
          <source>If it is a &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;, unescaped non-ASCII characters in &lt;em&gt;string&lt;/em&gt; are encoded into UTF-8 bytes.</source>
          <target state="translated">もしそうであれば&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;、中にエスケープされていない非ASCII文字&lt;em&gt;列を&lt;/em&gt; UTF-8バイトにエンコードされています。</target>
        </trans-unit>
        <trans-unit id="cb04b7e71c45bcf4eca27bc7c2fbd2f0873fc977" translate="yes" xml:space="preserve">
          <source>If it is a &lt;em&gt;string&lt;/em&gt;, you must also give the &lt;em&gt;encoding&lt;/em&gt; (and optionally, &lt;em&gt;errors&lt;/em&gt;) parameters; &lt;a href=&quot;stdtypes#bytearray&quot;&gt;&lt;code&gt;bytearray()&lt;/code&gt;&lt;/a&gt; then converts the string to bytes using &lt;a href=&quot;stdtypes#str.encode&quot;&gt;&lt;code&gt;str.encode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;文字列の&lt;/em&gt;場合は、&lt;em&gt;エンコーディング&lt;/em&gt;（およびオプションで&lt;em&gt;エラー&lt;/em&gt;）パラメータも指定する必要があります。&lt;a href=&quot;stdtypes#bytearray&quot;&gt; &lt;code&gt;bytearray()&lt;/code&gt; &lt;/a&gt;次に使用バイトに文字列を変換&lt;a href=&quot;stdtypes#str.encode&quot;&gt; &lt;code&gt;str.encode()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2e5fd905d7cb634eab36e5f7022d541dd08678a8" translate="yes" xml:space="preserve">
          <source>If it is an &lt;em&gt;integer&lt;/em&gt;, the array will have that size and will be initialized with null bytes.</source>
          <target state="translated">もしそうであれば&lt;em&gt;、整数&lt;/em&gt;、アレイは、その大きさを有し、ヌルバイトで初期化されます。</target>
        </trans-unit>
        <trans-unit id="ddd8748ceb366423912a917b053d73ddd49a2edd" translate="yes" xml:space="preserve">
          <source>If it is an &lt;em&gt;iterable&lt;/em&gt;, it must be an iterable of integers in the range &lt;code&gt;0 &amp;lt;= x &amp;lt; 256&lt;/code&gt;, which are used as the initial contents of the array.</source>
          <target state="translated">&lt;em&gt;iterableの&lt;/em&gt;場合、配列の初期コンテンツとして使用される &lt;code&gt;0 &amp;lt;= x &amp;lt; 256&lt;/code&gt; 範囲の整数のiterableでなければなりません。</target>
        </trans-unit>
        <trans-unit id="b3634a5c7e10c7f8808e49a74bf8a6b4e7fd50a4" translate="yes" xml:space="preserve">
          <source>If it is an object conforming to the &lt;em&gt;buffer&lt;/em&gt; interface, a read-only buffer of the object will be used to initialize the bytes array.</source>
          <target state="translated">&lt;em&gt;バッファ&lt;/em&gt;インターフェースに準拠したオブジェクトの場合、バイト配列を初期化するためにオブジェクトの読み取り専用バッファが使用されます。</target>
        </trans-unit>
        <trans-unit id="9cdca5ec79b73d99eb39c2ec4e51e31cb8a1c732" translate="yes" xml:space="preserve">
          <source>If it is an open file object, the archive will be written to that file object, which must be open for writing in bytes mode.</source>
          <target state="translated">それがオープンなファイルオブジェクトであれば、アーカイブはそのファイルオブジェクトに書き込まれますが、そのファイルオブジェクトはバイトモードで書き込むためにはオープンでなければなりません。</target>
        </trans-unit>
        <trans-unit id="44706e24cce0d97822e15cc2cdd3d9f22b0e7993" translate="yes" xml:space="preserve">
          <source>If it is called without arguments, it will print the contents of &lt;a href=&quot;sys#sys.path&quot;&gt;&lt;code&gt;sys.path&lt;/code&gt;&lt;/a&gt; on the standard output, followed by the value of &lt;a href=&quot;#site.USER_BASE&quot;&gt;&lt;code&gt;USER_BASE&lt;/code&gt;&lt;/a&gt; and whether the directory exists, then the same thing for &lt;a href=&quot;#site.USER_SITE&quot;&gt;&lt;code&gt;USER_SITE&lt;/code&gt;&lt;/a&gt;, and finally the value of &lt;a href=&quot;#site.ENABLE_USER_SITE&quot;&gt;&lt;code&gt;ENABLE_USER_SITE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">それは、引数なしで呼び出された場合、それはの内容に印刷されます&lt;a href=&quot;sys#sys.path&quot;&gt; &lt;code&gt;sys.path&lt;/code&gt; &lt;/a&gt;値に続いて、標準出力に&lt;a href=&quot;#site.USER_BASE&quot;&gt; &lt;code&gt;USER_BASE&lt;/code&gt; &lt;/a&gt;やディレクトリが存在するかどうか、そして、同じこと&lt;a href=&quot;#site.USER_SITE&quot;&gt; &lt;code&gt;USER_SITE&lt;/code&gt; &lt;/a&gt;、との最後に値&lt;a href=&quot;#site.ENABLE_USER_SITE&quot;&gt; &lt;code&gt;ENABLE_USER_SITE&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8e4f1f075612bafa0ec058bfc6d0d37706417e13" translate="yes" xml:space="preserve">
          <source>If it is desired to completely ignore cancellation (not recommended) the &lt;code&gt;shield()&lt;/code&gt; function should be combined with a try/except clause, as follows:</source>
          <target state="translated">キャンセルを完全に無視することが望ましい場合（非推奨）、次のように、 &lt;code&gt;shield()&lt;/code&gt; 関数をtry / except句と組み合わせる必要があります。</target>
        </trans-unit>
        <trans-unit id="01192a9f95f76e2eb7be7dea65299a6baa4bc2ab" translate="yes" xml:space="preserve">
          <source>If it is desired to send data to the process&amp;rsquo; &lt;em&gt;stdin&lt;/em&gt;, the process needs to be created with &lt;code&gt;stdin=PIPE&lt;/code&gt;. Similarly, to get anything other than &lt;code&gt;None&lt;/code&gt; in the result tuple, the process has to be created with &lt;code&gt;stdout=PIPE&lt;/code&gt; and/or &lt;code&gt;stderr=PIPE&lt;/code&gt; arguments.</source>
          <target state="translated">プロセスの&lt;em&gt;stdinに&lt;/em&gt;データを送信する必要がある場合は、プロセスを &lt;code&gt;stdin=PIPE&lt;/code&gt; で作成する必要があります。同様に、結果タプルで &lt;code&gt;None&lt;/code&gt; 以外のものを取得するには、プロセスを &lt;code&gt;stdout=PIPE&lt;/code&gt; や &lt;code&gt;stderr=PIPE&lt;/code&gt; 引数で作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="36e5b58797559e7d7360ba24eec2865eada11f86" translate="yes" xml:space="preserve">
          <source>If it is false, the buffer&amp;rsquo;s mutability is ignored and behaviour is as for a read-only buffer, except that the 1024 byte limit mentioned above is avoided &amp;ndash; so long as the buffer you pass is at least as long as what the operating system wants to put there, things should work.</source>
          <target state="translated">falseの場合、バッファーの可変性は無視され、読み取り専用バッファーの場合と同様の動作になります。ただし、上記の1024バイトの制限は回避されます&amp;ndash;渡すバッファーが少なくともオペレーティングシステムの要求する長さである限りそこに置くために、物事はうまくいくはずです。</target>
        </trans-unit>
        <trans-unit id="f61ccb0d5046c26bcd78e1f1f830264ae4214727" translate="yes" xml:space="preserve">
          <source>If it is temporary or not.</source>
          <target state="translated">それが一時的なものかどうか。</target>
        </trans-unit>
        <trans-unit id="04ea50b1d44dcb9e42bb0e15073254ec5d646ca9" translate="yes" xml:space="preserve">
          <source>If it is the name of a file, or a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-like-object&quot;&gt;path-like object&lt;/a&gt;, the archive will be written to that file.</source>
          <target state="translated">ファイルの名前または&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-like-object&quot;&gt;パスのようなオブジェクトの&lt;/a&gt;場合、アーカイブはそのファイルに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="b445164335a5373b51d2219b8df35ac044c9a899" translate="yes" xml:space="preserve">
          <source>If it must be ignored the next N times.</source>
          <target state="translated">次のN回を無視しなければならない場合。</target>
        </trans-unit>
        <trans-unit id="9df4a0ab1dcaed9052df14308a45b7732b61c521" translate="yes" xml:space="preserve">
          <source>If it was set via line number, it checks if &lt;code&gt;b.line&lt;/code&gt; is the same as the one in the frame also passed as argument. If the breakpoint was set via function name, we have to check we are in the right frame (the right function) and if we are in its first executable line.</source>
          <target state="translated">行番号を介して設定されている場合、 &lt;code&gt;b.line&lt;/code&gt; が、引数として渡されたフレーム内のものと同じかどうかを確認します。ブレークポイントが関数名で設定されている場合は、正しいフレーム（正しい関数）にいることと、その最初の実行可能行にあることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="d92fb59232d64b94f33278f3d1f5a387b837f8fe" translate="yes" xml:space="preserve">
          <source>If keyword arguments are given, the keyword arguments and their values are added to the dictionary created from the positional argument. If a key being added is already present, the value from the keyword argument replaces the value from the positional argument.</source>
          <target state="translated">キーワード引数が与えられた場合、キーワード引数とその値は、位置引数から作成された辞書に追加されます。追加されるキーが既に存在する場合、キーワード引数の値が位置引数の値を置き換えます。</target>
        </trans-unit>
        <trans-unit id="298d4ffd5a1a153665fe65937860d394e9ce55c5" translate="yes" xml:space="preserve">
          <source>If line is blank, delete it, otherwise clear to end of line.</source>
          <target state="translated">行が空白の場合は削除し、そうでない場合は行末までクリアします。</target>
        </trans-unit>
        <trans-unit id="e5b5e5077dcfb2543cd16c5eaa3971bdfe538b2b" translate="yes" xml:space="preserve">
          <source>If modifying your production classes to add defaults isn&amp;rsquo;t to your liking then there are more options. One of these is simply to use an instance as the spec rather than the class. The other is to create a subclass of the production class and add the defaults to the subclass without affecting the production class. Both of these require you to use an alternative object as the spec. Thankfully &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; supports this - you can simply pass the alternative object as the &lt;em&gt;autospec&lt;/em&gt; argument:</source>
          <target state="translated">プロダクションクラスを変更してデフォルトを追加することが好みに合わない場合は、さらに多くのオプションがあります。これらの1つは、クラスではなくインスタンスを仕様として使用することです。もう1つは、本番クラスのサブクラスを作成し、本番クラスに影響を与えずにデフォルトをサブクラスに追加することです。これらはどちらも、仕様として代替オブジェクトを使用する必要があります。ありがたいことに、&lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt;はこれをサポートしています&lt;em&gt;。autospec&lt;/em&gt;引数として代替オブジェクトを渡すだけです。</target>
        </trans-unit>
        <trans-unit id="17ae7629605c78f2ad74ec604b851cab4b9b9b18" translate="yes" xml:space="preserve">
          <source>If multiple directive comments are used for a single example, then they are combined:</source>
          <target state="translated">複数のディレクティブコメントが一つの例に使用されている場合は、それらが結合されます。</target>
        </trans-unit>
        <trans-unit id="7453bc4e224cf54a5aeef5110e30a59fe07fd075" translate="yes" xml:space="preserve">
          <source>If multiple files are found, later files are used as fallbacks for earlier ones. To allow setting the fallback, &lt;a href=&quot;copy#copy.copy&quot;&gt;&lt;code&gt;copy.copy()&lt;/code&gt;&lt;/a&gt; is used to clone each translation object from the cache; the actual instance data is still shared with the cache.</source>
          <target state="translated">複数のファイルが見つかった場合、後のファイルが前のファイルのフォールバックとして使用されます。フォールバックを設定できるようにするには、&lt;a href=&quot;copy#copy.copy&quot;&gt; &lt;code&gt;copy.copy()&lt;/code&gt; &lt;/a&gt;を使用して、キャッシュから各変換オブジェクトを複製します。実際のインスタンスデータは引き続きキャッシュと共有されます。</target>
        </trans-unit>
        <trans-unit id="8452349a938b29d0b36774ae51c5edbf888f2236" translate="yes" xml:space="preserve">
          <source>If multiple items are maximal, the function returns the first one encountered. This is consistent with other sort-stability preserving tools such as &lt;code&gt;sorted(iterable, key=keyfunc, reverse=True)[0]&lt;/code&gt; and &lt;code&gt;heapq.nlargest(1, iterable, key=keyfunc)&lt;/code&gt;.</source>
          <target state="translated">複数のアイテムが最大の場合、関数は最初に見つかったアイテムを返します。これは、 &lt;code&gt;sorted(iterable, key=keyfunc, reverse=True)[0]&lt;/code&gt; や &lt;code&gt;heapq.nlargest(1, iterable, key=keyfunc)&lt;/code&gt; などの他のソート安定性保持ツールと一致しています。</target>
        </trans-unit>
        <trans-unit id="c3c9e3d0380e3afc1d3245499ca493b8cdbe62b9" translate="yes" xml:space="preserve">
          <source>If multiple items are minimal, the function returns the first one encountered. This is consistent with other sort-stability preserving tools such as &lt;code&gt;sorted(iterable, key=keyfunc)[0]&lt;/code&gt; and &lt;code&gt;heapq.nsmallest(1,
iterable, key=keyfunc)&lt;/code&gt;.</source>
          <target state="translated">複数のアイテムが最小の場合、関数は最初に見つかったアイテムを返します。これは、 &lt;code&gt;sorted(iterable, key=keyfunc)[0]&lt;/code&gt; や &lt;code&gt;heapq.nsmallest(1, iterable, key=keyfunc)&lt;/code&gt; などの他のソート安定性保持ツールと一致しています。</target>
        </trans-unit>
        <trans-unit id="f562be4d3070268fdf6e36d18ca74512853d9784" translate="yes" xml:space="preserve">
          <source>If multiple processes are enqueuing objects, it is possible for the objects to be received at the other end out-of-order. However, objects enqueued by the same process will always be in the expected order with respect to each other.</source>
          <target state="translated">複数のプロセスがオブジェクトを待ち受けにしている場合、オブジェクトが他方の端で順番外に受信される可能性があります。しかし、同じプロセスによって待ち受けにされたオブジェクトは、常に互いに期待される順序になります。</target>
        </trans-unit>
        <trans-unit id="b636cc065ec6ef42100c3456eb6185694bc5d4f7" translate="yes" xml:space="preserve">
          <source>If name is not given, this examines the available implementations to find one with the required feature set. If no implementation can be found, raise an &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt;. The features list must be a sequence of &lt;code&gt;(feature,
version)&lt;/code&gt; pairs which are passed to the &lt;code&gt;hasFeature()&lt;/code&gt; method on available &lt;code&gt;DOMImplementation&lt;/code&gt; objects.</source>
          <target state="translated">名前が指定されていない場合は、使用可能な実装を調べて、必要な機能セットを持つ実装を見つけます。実装が見つからない場合は、&lt;a href=&quot;exceptions#ImportError&quot;&gt; &lt;code&gt;ImportError&lt;/code&gt; を送出し&lt;/a&gt;ます。機能リストは、使用可能な &lt;code&gt;DOMImplementation&lt;/code&gt; オブジェクトの &lt;code&gt;hasFeature()&lt;/code&gt; メソッドに渡される一連の &lt;code&gt;(feature, version)&lt;/code&gt; ペアである必要があります。</target>
        </trans-unit>
        <trans-unit id="26b2ddfd53b925d6fed2be41cbcc44c6bb590446" translate="yes" xml:space="preserve">
          <source>If neither &lt;em&gt;encoding&lt;/em&gt; nor &lt;em&gt;errors&lt;/em&gt; is given, &lt;code&gt;str(object)&lt;/code&gt; returns &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__str__&quot;&gt;&lt;code&gt;object.__str__()&lt;/code&gt;&lt;/a&gt;, which is the &amp;ldquo;informal&amp;rdquo; or nicely printable string representation of &lt;em&gt;object&lt;/em&gt;. For string objects, this is the string itself. If &lt;em&gt;object&lt;/em&gt; does not have a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__str__&quot;&gt;&lt;code&gt;__str__()&lt;/code&gt;&lt;/a&gt; method, then &lt;a href=&quot;#str&quot;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; falls back to returning &lt;a href=&quot;functions#repr&quot;&gt;&lt;code&gt;repr(object)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">どちらの場合&lt;em&gt;エンコーディング&lt;/em&gt;も&lt;em&gt;エラーが&lt;/em&gt;与えられ、 &lt;code&gt;str(object)&lt;/code&gt; を返しますが&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__str__&quot;&gt; &lt;code&gt;object.__str__()&lt;/code&gt; &lt;/a&gt;の「非公式」またはきれいに印字可能な文字列表現である、&lt;em&gt;オブジェクトを&lt;/em&gt;。文字列オブジェクトの場合、これは文字列自体です。&lt;em&gt;オブジェクトに&lt;/em&gt;&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__str__&quot;&gt; &lt;code&gt;__str__()&lt;/code&gt; &lt;/a&gt;メソッドがない場合、&lt;a href=&quot;#str&quot;&gt; &lt;code&gt;str()&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;functions#repr&quot;&gt; &lt;code&gt;repr(object)&lt;/code&gt; &lt;/a&gt;を返すようにフォールバックします。</target>
        </trans-unit>
        <trans-unit id="54d4d7ea65c7bad4af575a43659f61752244563a" translate="yes" xml:space="preserve">
          <source>If neither &lt;em&gt;weights&lt;/em&gt; nor &lt;em&gt;cum_weights&lt;/em&gt; are specified, selections are made with equal probability. If a weights sequence is supplied, it must be the same length as the &lt;em&gt;population&lt;/em&gt; sequence. It is a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; to specify both &lt;em&gt;weights&lt;/em&gt; and &lt;em&gt;cum_weights&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;weights&lt;/em&gt;も&lt;em&gt;cum_weights&lt;/em&gt;も指定されていない場合、選択は同じ確率で行われます。重みシーケンスが指定されている場合、それは&lt;em&gt;母集団&lt;/em&gt;シーケンスと同じ長さでなければなりません。&lt;em&gt;weight&lt;/em&gt;と&lt;em&gt;cum_weightsの&lt;/em&gt;両方を指定するのは&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;&lt;em&gt;です&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="23e71f0816a9280c7a878c8d86eb0dc6fc13142c" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;.mo&lt;/code&gt; file is found, this function raises &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; if &lt;em&gt;fallback&lt;/em&gt; is false (which is the default), and returns a &lt;a href=&quot;#gettext.NullTranslations&quot;&gt;&lt;code&gt;NullTranslations&lt;/code&gt;&lt;/a&gt; instance if &lt;em&gt;fallback&lt;/em&gt; is true.</source>
          <target state="translated">&lt;code&gt;.mo&lt;/code&gt; ファイルが見つからない場合、この関数は、&lt;em&gt;フォールバック&lt;/em&gt;がfalse（デフォルト）の場合に&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;を発生させ、&lt;em&gt;フォール&lt;/em&gt;&lt;em&gt;バック&lt;/em&gt;がtrueの場合に&lt;a href=&quot;#gettext.NullTranslations&quot;&gt; &lt;code&gt;NullTranslations&lt;/code&gt; &lt;/a&gt;インスタンスを返します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b5fa475a3d6271ad07e3d7908a4b54063aef9110" translate="yes" xml:space="preserve">
          <source>If no &lt;em&gt;Content-Length&lt;/em&gt; header was supplied, urlretrieve can not check the size of the data it has downloaded, and just returns it. In this case you just have to assume that the download was successful.</source>
          <target state="translated">何場合&lt;em&gt;のContent-Length&lt;/em&gt;ヘッダが供給されなかった、urlretrieveは、それがダウンロードされたデータのサイズをチェックし、それを返すことができません。この場合、ダウンロードが成功したと想定する必要があります。</target>
        </trans-unit>
        <trans-unit id="b66b107ef18a6ec29206237c3b1968db398d135d" translate="yes" xml:space="preserve">
          <source>If no argument is given, &lt;code&gt;0.0&lt;/code&gt; is returned.</source>
          <target state="translated">引数を指定しない場合、 &lt;code&gt;0.0&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="46157783a038d57f5604740e6a9b616a64d86cd0" translate="yes" xml:space="preserve">
          <source>If no arguments are given, return current (canvaswidth, canvasheight). Else resize the canvas the turtles are drawing on. Do not alter the drawing window. To observe hidden parts of the canvas, use the scrollbars. With this method, one can make visible those parts of a drawing which were outside the canvas before.</source>
          <target state="translated">引数が与えられない場合は、現在の (canvaswidth,canvasheight)を返します。そうでなければ、カメが描いているキャンバスのサイズを変更します。描画ウィンドウを変更しないでください。キャンバスの隠れた部分を見るには、スクロールバーを使います。この方法を使うと、 キャンバスの外にあった部分を見えるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="5e52dc62f51669f668a33bf460b7f8bf82543a15" translate="yes" xml:space="preserve">
          <source>If no arguments are specified, it defaults to:</source>
          <target state="translated">引数が指定されていない場合はデフォルトです。</target>
        </trans-unit>
        <trans-unit id="17c7d031f77de40c273fcdef1ad3809784776686" translate="yes" xml:space="preserve">
          <source>If no blocks match, this returns &lt;code&gt;(alo, blo, 0)&lt;/code&gt;.</source>
          <target state="translated">一致するブロックがない場合、これは &lt;code&gt;(alo, blo, 0)&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="fce8e5571f9d4e61cf90e90a33029b4a46f9fdae" translate="yes" xml:space="preserve">
          <source>If no encoding is specified, then the default of &lt;code&gt;'utf-8'&lt;/code&gt; will be returned.</source>
          <target state="translated">エンコーディングが指定されていない場合、デフォルトの &lt;code&gt;'utf-8'&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="d0b220a8961aa756600716c9da500833111cb46e" translate="yes" xml:space="preserve">
          <source>If no errors occur, the result will be: &lt;code&gt;abs(a-b) &amp;lt;= max(rel_tol * max(abs(a), abs(b)), abs_tol)&lt;/code&gt;.</source>
          <target state="translated">エラーが発生しない場合、結果は &lt;code&gt;abs(a-b) &amp;lt;= max(rel_tol * max(abs(a), abs(b)), abs_tol)&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="ad242d3e56bb64a3f42863144cd33fbe0e3221f2" translate="yes" xml:space="preserve">
          <source>If no exception is being handled anywhere on the stack, a tuple containing three &lt;code&gt;None&lt;/code&gt; values is returned. Otherwise, the values returned are &lt;code&gt;(type, value, traceback)&lt;/code&gt;. Their meaning is: &lt;em&gt;type&lt;/em&gt; gets the type of the exception being handled (a subclass of &lt;a href=&quot;exceptions#BaseException&quot;&gt;&lt;code&gt;BaseException&lt;/code&gt;&lt;/a&gt;); &lt;em&gt;value&lt;/em&gt; gets the exception instance (an instance of the exception type); &lt;em&gt;traceback&lt;/em&gt; gets a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#traceback-objects&quot;&gt;traceback object&lt;/a&gt; which encapsulates the call stack at the point where the exception originally occurred.</source>
          <target state="translated">スタックのどこでも例外が処理されていない場合、3つの &lt;code&gt;None&lt;/code&gt; 値を含むタプルが返されます。それ以外の場合、返される値は &lt;code&gt;(type, value, traceback)&lt;/code&gt; です。これらの意味は次のとおりです。&lt;em&gt;タイプが&lt;/em&gt;処理された例外（のサブクラスの種類を取得&lt;a href=&quot;exceptions#BaseException&quot;&gt; &lt;code&gt;BaseException&lt;/code&gt; を&lt;/a&gt;）。&lt;em&gt;value&lt;/em&gt;は例外インスタンス（例外タイプのインスタンス）を取得します。&lt;em&gt;traceback&lt;/em&gt;は、例外が最初に発生した時点で呼び出しスタックをカプセル化する&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#traceback-objects&quot;&gt;tracebackオブジェクト&lt;/a&gt;を取得します。</target>
        </trans-unit>
        <trans-unit id="a41e77f992af07e40b87a473294e5a8dd6509be1" translate="yes" xml:space="preserve">
          <source>If no free slot is immediately available, raise &lt;a href=&quot;#asyncio.QueueFull&quot;&gt;&lt;code&gt;QueueFull&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すぐに利用できる空きスロットがない場合は、&lt;a href=&quot;#asyncio.QueueFull&quot;&gt; &lt;code&gt;QueueFull&lt;/code&gt; を発生させ&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="a4ced0a7f5ac900ff7845bee14185b70154aab39" translate="yes" xml:space="preserve">
          <source>If no module name is specified, all top level finders are produced.</source>
          <target state="translated">モジュール名が指定されていない場合は、すべてのトップレベルのファインダーが生成されます。</target>
        </trans-unit>
        <trans-unit id="24caaa893d53e123c1924dd2370cf821d291d32b" translate="yes" xml:space="preserve">
          <source>If no name has been explicitly assigned to the Task, the default asyncio Task implementation generates a default name during instantiation.</source>
          <target state="translated">タスクに名前が明示的に割り当てられていない場合、デフォルトのasyncioタスクの実装では、インスタンス化時にデフォルトの名前が生成されます。</target>
        </trans-unit>
        <trans-unit id="476aa611f101edc0bc9619df18f523a41ebd1c82" translate="yes" xml:space="preserve">
          <source>If no options are given, a dict with options/values for the item is returned. If &lt;em&gt;option&lt;/em&gt; is specified then the value for that option is returned. Otherwise, sets the options to the corresponding values as given by &lt;em&gt;kw&lt;/em&gt;.</source>
          <target state="translated">オプションが指定されていない場合、アイテムのオプション/値を持つdictが返されます。場合は&lt;em&gt;オプションが&lt;/em&gt;指定され、そのオプションの値が返されます。それ以外の場合は、オプションを&lt;em&gt;kwで&lt;/em&gt;指定された対応する値に設定します。</target>
        </trans-unit>
        <trans-unit id="bea50889454379e91f30a2f42fee654aa7de3fcf" translate="yes" xml:space="preserve">
          <source>If no positional argument is given, an empty dictionary is created. If a positional argument is given and it is a mapping object, a dictionary is created with the same key-value pairs as the mapping object. Otherwise, the positional argument must be an &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-iterable&quot;&gt;iterable&lt;/a&gt; object. Each item in the iterable must itself be an iterable with exactly two objects. The first object of each item becomes a key in the new dictionary, and the second object the corresponding value. If a key occurs more than once, the last value for that key becomes the corresponding value in the new dictionary.</source>
          <target state="translated">位置引数を指定しない場合、空の辞書が作成されます。位置引数が指定され、それがマッピングオブジェクトである場合、マッピングオブジェクトと同じキーと値のペアを使用して辞書が作成されます。それ以外の場合、位置引数は&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-iterable&quot;&gt;反復可能な&lt;/a&gt;オブジェクトでなければなりません。反復可能オブジェクトの各アイテムは、それ自体が2つのオブジェクトを持つ反復可能でなければなりません。各項目の最初のオブジェクトは新しい辞書のキーになり、2番目のオブジェクトは対応する値になります。キーが複数回出現する場合、そのキーの最後の値が新しい辞書の対応する値になります。</target>
        </trans-unit>
        <trans-unit id="a3c12853377a0fdf751ae91320dcc270d07f4698" translate="yes" xml:space="preserve">
          <source>If no signature is defined for the method, a non-array value is returned. In Python this means that the type of the returned value will be something other than list.</source>
          <target state="translated">メソッドのシグネチャが定義されていない場合、配列以外の値が返されます。Pythonでは、これは返される値の型がリスト以外のものになることを意味します。</target>
        </trans-unit>
        <trans-unit id="20bea7147a663550bf73fbd6aa35936ec0f1727f" translate="yes" xml:space="preserve">
          <source>If no such message exists, a &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; exception is raised if the method was called as &lt;a href=&quot;#mailbox.Mailbox.remove&quot;&gt;&lt;code&gt;remove()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#mailbox.Mailbox.__delitem__&quot;&gt;&lt;code&gt;__delitem__()&lt;/code&gt;&lt;/a&gt; but no exception is raised if the method was called as &lt;a href=&quot;#mailbox.Mailbox.discard&quot;&gt;&lt;code&gt;discard()&lt;/code&gt;&lt;/a&gt;. The behavior of &lt;a href=&quot;#mailbox.Mailbox.discard&quot;&gt;&lt;code&gt;discard()&lt;/code&gt;&lt;/a&gt; may be preferred if the underlying mailbox format supports concurrent modification by other processes.</source>
          <target state="translated">そのようなメッセージが存在しない場合、メソッドが&lt;a href=&quot;#mailbox.Mailbox.remove&quot;&gt; &lt;code&gt;remove()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#mailbox.Mailbox.__delitem__&quot;&gt; &lt;code&gt;__delitem__()&lt;/code&gt; &lt;/a&gt;として呼び出された場合は&lt;a href=&quot;exceptions#KeyError&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; &lt;/a&gt;例外が発生しますが、メソッドが&lt;a href=&quot;#mailbox.Mailbox.discard&quot;&gt; &lt;code&gt;discard()&lt;/code&gt; &lt;/a&gt;として呼び出された場合は例外は発生しません。基になるメールボックス形式が他のプロセスによる同時変更をサポートしている場合、&lt;a href=&quot;#mailbox.Mailbox.discard&quot;&gt; &lt;code&gt;discard()&lt;/code&gt; &lt;/a&gt;の動作が優先される場合があります。</target>
        </trans-unit>
        <trans-unit id="3cd75852ba66a942e3ef9da043c72d0616bb9860" translate="yes" xml:space="preserve">
          <source>If none of the above match, repeat all of the checks above for each of the types in the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-mro&quot;&gt;MRO&lt;/a&gt; (&lt;code&gt;typ.__mro__&lt;/code&gt;). Finally, if no other key yields a handler, check for a handler for the key &lt;code&gt;None&lt;/code&gt;. If there is no handler for &lt;code&gt;None&lt;/code&gt;, raise a &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; for the fully qualified name of the type.</source>
          <target state="translated">上記のいずれも一致しない場合は、&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-mro&quot;&gt;MROの&lt;/a&gt;各タイプ（ &lt;code&gt;typ.__mro__&lt;/code&gt; ）について上記のチェックをすべて繰り返します。最後に、ハンドラーを生成する他のキーがない場合は、キー &lt;code&gt;None&lt;/code&gt; のハンドラーを確認します。以下のためのハンドラが存在しない場合は &lt;code&gt;None&lt;/code&gt; 、調達&lt;a href=&quot;exceptions#KeyError&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; 例外&lt;/a&gt;型の完全修飾名のために。</target>
        </trans-unit>
        <trans-unit id="6ab966a0bae68c566e4582d75c7e75e79ff60df0" translate="yes" xml:space="preserve">
          <source>If none of the candidates matches any of the preferences in &lt;em&gt;preferencelist&lt;/em&gt;, return &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">候補者のどれもに好みのいずれかに一致しない場合&lt;em&gt;preferencelist&lt;/em&gt;、リターン &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0af9b04d52a06016027c04f7762d012d26364887" translate="yes" xml:space="preserve">
          <source>If none of the matrix elements are given, return the transformation matrix as a tuple of 4 elements. Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row t11, t12 and second row t21, 22. The determinant t11 * t22 - t12 * t21 must not be zero, otherwise an error is raised. Modify stretchfactor, shearfactor and tiltangle according to the given matrix.</source>
          <target state="translated">行列の要素が与えられていない場合は,4つの要素のタプルとして変換行列を返します.そうでなければ,与えられた要素をセットし,1行目のt11,t12と2行目のt21,22からなる行列に従ってタートルシェープを変換します.行列式 t11*t22-t12*t21 はゼロであってはいけません.与えられた行列に従って,ストレッチファクター,シアファクター,傾斜角を修正します.</target>
        </trans-unit>
        <trans-unit id="d022ff617a119c979b5be13e4ac716aea9e10a76" translate="yes" xml:space="preserve">
          <source>If none of the named files exist, the &lt;a href=&quot;#configparser.ConfigParser&quot;&gt;&lt;code&gt;ConfigParser&lt;/code&gt;&lt;/a&gt; instance will contain an empty dataset. An application which requires initial values to be loaded from a file should load the required file or files using &lt;a href=&quot;#configparser.ConfigParser.read_file&quot;&gt;&lt;code&gt;read_file()&lt;/code&gt;&lt;/a&gt; before calling &lt;a href=&quot;#configparser.ConfigParser.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; for any optional files:</source>
          <target state="translated">名前付きファイルが存在しない場合、&lt;a href=&quot;#configparser.ConfigParser&quot;&gt; &lt;code&gt;ConfigParser&lt;/code&gt; &lt;/a&gt;インスタンスには空のデータセットが含まれます。ファイルから初期値をロードする必要があるアプリケーションは、オプションのファイルに対して&lt;a href=&quot;#configparser.ConfigParser.read&quot;&gt; &lt;code&gt;read()&lt;/code&gt; &lt;/a&gt;を呼び出す前に、&lt;a href=&quot;#configparser.ConfigParser.read_file&quot;&gt; &lt;code&gt;read_file()&lt;/code&gt; &lt;/a&gt;を使用して必要なファイルをロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="d63f28fd05ae33a3c995e80b7d7ac4d24283f9a6" translate="yes" xml:space="preserve">
          <source>If none of these keys produce a handler, raise a &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; for the full MIME type.</source>
          <target state="translated">これらのキーのいずれもハンドラを生成しない場合は、完全なMIMEタイプの&lt;a href=&quot;exceptions#KeyError&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; &lt;/a&gt;を送出します。</target>
        </trans-unit>
        <trans-unit id="c4b559d6709f523acb559ebc9de05a632f179410" translate="yes" xml:space="preserve">
          <source>If not &lt;code&gt;None&lt;/code&gt;, &lt;em&gt;daemon&lt;/em&gt; explicitly sets whether the thread is daemonic. If &lt;code&gt;None&lt;/code&gt; (the default), the daemonic property is inherited from the current thread.</source>
          <target state="translated">&lt;code&gt;None&lt;/code&gt; でない場合、&lt;em&gt;daemon&lt;/em&gt;はスレッドが&lt;em&gt;デーモンである&lt;/em&gt;かどうかを明示的に設定します。場合 &lt;code&gt;None&lt;/code&gt; （デフォルト）、鬼神のプロパティは、現在のスレッドから継承されます。</target>
        </trans-unit>
        <trans-unit id="1c475ada572eb526f097538d76dc4f24e8fb21ac" translate="yes" xml:space="preserve">
          <source>If not passed as a parameter when creating the object, this attribute is initialized upon first access or when the first record is read from the file.</source>
          <target state="translated">オブジェクトの作成時にパラメータとして渡されなかった場合、この属性は最初のアクセス時、または最初のレコードがファイルから読み込まれた時に初期化されます。</target>
        </trans-unit>
        <trans-unit id="e5b0f653097180825fd4fc47faf0827556509908" translate="yes" xml:space="preserve">
          <source>If not specified, the directory to serve is the current working directory.</source>
          <target state="translated">指定されていない場合、サービスを提供するディレクトリは現在の作業ディレクトリになります。</target>
        </trans-unit>
        <trans-unit id="46415929d11820d8c6bb9f358d9a2092933c6fcf" translate="yes" xml:space="preserve">
          <source>If one comparand is naive and the other is aware, &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised if an order comparison is attempted. For equality comparisons, naive instances are never equal to aware instances.</source>
          <target state="translated">一方の被比較数がナイーブで、もう一方が認識している場合、順序比較が試行されると&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;が発生します。同等性の比較では、ナイーブインスタンスが認識インスタンスと等しくなることはありません。</target>
        </trans-unit>
        <trans-unit id="f586af1a41a07ac3dcc0f4d3f82539d6176c3e4c" translate="yes" xml:space="preserve">
          <source>If one of the iterables is potentially infinite, then the &lt;a href=&quot;#itertools.zip_longest&quot;&gt;&lt;code&gt;zip_longest()&lt;/code&gt;&lt;/a&gt; function should be wrapped with something that limits the number of calls (for example &lt;a href=&quot;#itertools.islice&quot;&gt;&lt;code&gt;islice()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#itertools.takewhile&quot;&gt;&lt;code&gt;takewhile()&lt;/code&gt;&lt;/a&gt;). If not specified, &lt;em&gt;fillvalue&lt;/em&gt; defaults to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#itertools.zip_longest&quot;&gt; &lt;code&gt;zip_longest()&lt;/code&gt; &lt;/a&gt; 1つが潜在的に無限である場合、zip_longest（）関数は、呼び出し数を制限するもの（例えば&lt;a href=&quot;#itertools.islice&quot;&gt; &lt;code&gt;islice()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#itertools.takewhile&quot;&gt; &lt;code&gt;takewhile()&lt;/code&gt; &lt;/a&gt;）でラップする必要があります。指定しない場合、&lt;em&gt;fillvalueの&lt;/em&gt;デフォルトは &lt;code&gt;None&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="fed106ddf387a9f27caba16b43370e63282aec73" translate="yes" xml:space="preserve">
          <source>If one positional argument is provided, it should be an &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-iterable&quot;&gt;iterable&lt;/a&gt;. The largest item in the iterable is returned. If two or more positional arguments are provided, the largest of the positional arguments is returned.</source>
          <target state="translated">位置引数が1つ提供される場合、それは&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-iterable&quot;&gt;反復可能&lt;/a&gt;でなければなりません。イテラブルの最大のアイテムが返されます。2つ以上の位置引数が指定されている場合、最大の位置引数が返されます。</target>
        </trans-unit>
        <trans-unit id="cd31c867fd89a7c1d95f7f40da4f4f0882fa7af1" translate="yes" xml:space="preserve">
          <source>If one positional argument is provided, it should be an &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-iterable&quot;&gt;iterable&lt;/a&gt;. The smallest item in the iterable is returned. If two or more positional arguments are provided, the smallest of the positional arguments is returned.</source>
          <target state="translated">位置引数が1つ提供される場合、それは&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-iterable&quot;&gt;反復可能&lt;/a&gt;でなければなりません。イテラブルの最小のアイテムが返されます。2つ以上の位置引数が指定されている場合、位置引数の最小値が返されます。</target>
        </trans-unit>
        <trans-unit id="b1237f29843fb6e1241d53edd8dcf105508a566f" translate="yes" xml:space="preserve">
          <source>If one wants more information about all matches of a pattern than the matched text, &lt;a href=&quot;#re.finditer&quot;&gt;&lt;code&gt;finditer()&lt;/code&gt;&lt;/a&gt; is useful as it provides &lt;a href=&quot;#match-objects&quot;&gt;match objects&lt;/a&gt; instead of strings. Continuing with the previous example, if a writer wanted to find all of the adverbs &lt;em&gt;and their positions&lt;/em&gt; in some text, they would use &lt;a href=&quot;#re.finditer&quot;&gt;&lt;code&gt;finditer()&lt;/code&gt;&lt;/a&gt; in the following manner:</source>
          <target state="translated">パターンのすべての一致について、一致したテキストよりも多くの情報が必要な場合、&lt;a href=&quot;#re.finditer&quot;&gt; &lt;code&gt;finditer()&lt;/code&gt; &lt;/a&gt;は文字列ではなく&lt;a href=&quot;#match-objects&quot;&gt;一致オブジェクト&lt;/a&gt;を提供するので便利です。前の例を続けると、ライターがすべての副詞&lt;em&gt;とその&lt;/em&gt;テキスト内の&lt;em&gt;位置&lt;/em&gt;を見つけたい場合、次のように&lt;a href=&quot;#re.finditer&quot;&gt; &lt;code&gt;finditer()&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="f1347dbe4680d59bafdc6451d2e8d67e574fff02" translate="yes" xml:space="preserve">
          <source>If one wants to customize pickling of some classes without disturbing any other code which depends on pickling, then one can create a pickler with a private dispatch table.</source>
          <target state="translated">picklingに依存する他のコードを邪魔することなく、いくつかのクラスのpicklingをカスタマイズしたい場合は、プライベートなディスパッチテーブルを使ってpicklerを作成することができます。</target>
        </trans-unit>
        <trans-unit id="37a72b7770c6c17e2466572d1f613dd461295e35" translate="yes" xml:space="preserve">
          <source>If only some components are abstract, only those components need to be updated to create a concrete property in a subclass:</source>
          <target state="translated">一部のコンポーネントだけが抽象化されている場合は、サブクラスで具体的なプロパティを作成するために、そのコンポーネントだけを更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="1c740863730ebbf14b847aaee2c1d18d2436d45e" translate="yes" xml:space="preserve">
          <source>If only the &lt;em&gt;exception&lt;/em&gt; and possibly the &lt;em&gt;msg&lt;/em&gt; arguments are given, return a context manager so that the code under test can be written inline rather than as a function:</source>
          <target state="translated">場合にのみ、&lt;em&gt;例外&lt;/em&gt;とはおそらく&lt;em&gt;MSGの&lt;/em&gt;引数が与えられ、テスト対象コードはむしろ関数としてよりもインラインで書き込むことができるようにコンテキストマネージャを返します。</target>
        </trans-unit>
        <trans-unit id="7753140c3a7be41fbf94278880c58bc397646c99" translate="yes" xml:space="preserve">
          <source>If only the &lt;em&gt;warning&lt;/em&gt; and possibly the &lt;em&gt;msg&lt;/em&gt; arguments are given, return a context manager so that the code under test can be written inline rather than as a function:</source>
          <target state="translated">場合にのみ&lt;em&gt;警告&lt;/em&gt;おそらくと&lt;em&gt;のMSG&lt;/em&gt;：引数が与えられているテスト対象のコードが書かれたインラインではなく関数としてできるように、コンテキストマネージャを返します</target>
        </trans-unit>
        <trans-unit id="daaad11308bf3ecc56da6270a84c953330e34e9b" translate="yes" xml:space="preserve">
          <source>If optional &lt;em&gt;charset&lt;/em&gt; is specified, the parameter will be encoded according to &lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt;. Optional &lt;em&gt;language&lt;/em&gt; specifies the RFC 2231 language, defaulting to the empty string. Both &lt;em&gt;charset&lt;/em&gt; and &lt;em&gt;language&lt;/em&gt; should be strings.</source>
          <target state="translated">オプションの&lt;em&gt;文字セット&lt;/em&gt;が指定されている場合、パラメーターは&lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt;に従ってエンコードされ&lt;strong&gt;ます&lt;/strong&gt;。オプションの&lt;em&gt;言語&lt;/em&gt;はRFC 2231 &lt;em&gt;言語を&lt;/em&gt;指定し、デフォルトでは空の文字列になります。&lt;em&gt;文字セット&lt;/em&gt;と&lt;em&gt;言語&lt;/em&gt;はどちらも&lt;em&gt;文字&lt;/em&gt;列である必要があります。</target>
        </trans-unit>
        <trans-unit id="30e460f7c1de270b9a5d3d19b52510be2728dbac" translate="yes" xml:space="preserve">
          <source>If optional &lt;em&gt;mangle_from_&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, put a &lt;code&gt;&amp;gt;&lt;/code&gt; character in front of any line in the body that starts with the exact string &lt;code&gt;&quot;From &quot;&lt;/code&gt;, that is &lt;code&gt;From&lt;/code&gt; followed by a space at the beginning of a line. &lt;em&gt;mangle_from_&lt;/em&gt; defaults to the value of the &lt;a href=&quot;email.policy#email.policy.Policy.mangle_from_&quot;&gt;&lt;code&gt;mangle_from_&lt;/code&gt;&lt;/a&gt; setting of the &lt;em&gt;policy&lt;/em&gt; (which is &lt;code&gt;True&lt;/code&gt; for the &lt;a href=&quot;email.policy#email.policy.compat32&quot;&gt;&lt;code&gt;compat32&lt;/code&gt;&lt;/a&gt; policy and &lt;code&gt;False&lt;/code&gt; for all others). &lt;em&gt;mangle_from_&lt;/em&gt; is intended for use when messages are stored in unix mbox format (see &lt;a href=&quot;mailbox#module-mailbox&quot;&gt;&lt;code&gt;mailbox&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://www.jwz.org/doc/content-length.html&quot;&gt;WHY THE CONTENT-LENGTH FORMAT IS BAD&lt;/a&gt;).</source>
          <target state="translated">オプションの&lt;em&gt;mangle_from_&lt;/em&gt;が &lt;code&gt;True&lt;/code&gt; の場合、正確な文字列 &lt;code&gt;&quot;From &quot;&lt;/code&gt; で始まる本文の行の前に &lt;code&gt;&amp;gt;&lt;/code&gt; 文字を置きます。つまり、 &lt;code&gt;From&lt;/code&gt; の後に行の先頭にスペースが続きます。&lt;em&gt;mangle_from_の&lt;/em&gt;デフォルトは、&lt;em&gt;ポリシーの&lt;/em&gt;&lt;a href=&quot;email.policy#email.policy.Policy.mangle_from_&quot;&gt; &lt;code&gt;mangle_from_&lt;/code&gt; &lt;/a&gt;設定の値です（&lt;a href=&quot;email.policy#email.policy.compat32&quot;&gt; &lt;code&gt;compat32&lt;/code&gt; &lt;/a&gt;ポリシーの場合は &lt;code&gt;True&lt;/code&gt; 、その他の場合は &lt;code&gt;False&lt;/code&gt; です）。&lt;em&gt;mangle_from_&lt;/em&gt;は、メッセージがunix mbox形式で格納されている場合に使用することを目的としています（&lt;a href=&quot;mailbox#module-mailbox&quot;&gt; &lt;code&gt;mailbox&lt;/code&gt; &lt;/a&gt;と、&lt;a href=&quot;https://www.jwz.org/doc/content-length.html&quot;&gt;コンテンツの長さの&lt;/a&gt;形式が&lt;em&gt;不適切な理由を&lt;/em&gt;参照してください）。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3c8605e1fe87239a6939ac038c36a1310db420f6" translate="yes" xml:space="preserve">
          <source>If optional &lt;em&gt;rest&lt;/em&gt; is given, a &lt;code&gt;REST&lt;/code&gt; command is sent to the server, passing &lt;em&gt;rest&lt;/em&gt; as an argument. &lt;em&gt;rest&lt;/em&gt; is usually a byte offset into the requested file, telling the server to restart sending the file&amp;rsquo;s bytes at the requested offset, skipping over the initial bytes. Note however that &lt;a href=&quot;https://tools.ietf.org/html/rfc959.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 959&lt;/strong&gt;&lt;/a&gt; requires only that &lt;em&gt;rest&lt;/em&gt; be a string containing characters in the printable range from ASCII code 33 to ASCII code 126. The &lt;a href=&quot;#ftplib.FTP.transfercmd&quot;&gt;&lt;code&gt;transfercmd()&lt;/code&gt;&lt;/a&gt; method, therefore, converts &lt;em&gt;rest&lt;/em&gt; to a string, but no check is performed on the string&amp;rsquo;s contents. If the server does not recognize the &lt;code&gt;REST&lt;/code&gt; command, an &lt;a href=&quot;#ftplib.error_reply&quot;&gt;&lt;code&gt;error_reply&lt;/code&gt;&lt;/a&gt; exception will be raised. If this happens, simply call &lt;a href=&quot;#ftplib.FTP.transfercmd&quot;&gt;&lt;code&gt;transfercmd()&lt;/code&gt;&lt;/a&gt; without a &lt;em&gt;rest&lt;/em&gt; argument.</source>
          <target state="translated">オプションの&lt;em&gt;rest&lt;/em&gt;を指定すると、 &lt;code&gt;REST&lt;/code&gt; コマンドがサーバーに送信され、&lt;em&gt;rest&lt;/em&gt;が引数として渡されます。&lt;em&gt;rest&lt;/em&gt;は通常、要求されたファイルへのバイトオフセットであり、要求されたオフセットでファイルのバイトの送信を再開し、初期バイトをスキップするようサーバーに指示します。ただし、&lt;a href=&quot;https://tools.ietf.org/html/rfc959.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 959&lt;/strong&gt;&lt;/a&gt;では、&lt;em&gt;残り&lt;/em&gt;がASCIIコード33からASCIIコード126までの印刷可能な範囲の文字を含む文字列のみである必要があることに注意してください。したがって、&lt;a href=&quot;#ftplib.FTP.transfercmd&quot;&gt; &lt;code&gt;transfercmd()&lt;/code&gt; &lt;/a&gt;メソッドは、&lt;em&gt;残り&lt;/em&gt;を文字列に変換しますが、文字列の内容はチェックされません。 。サーバーが &lt;code&gt;REST&lt;/code&gt; コマンドを認識しない場合、&lt;a href=&quot;#ftplib.error_reply&quot;&gt; &lt;code&gt;error_reply&lt;/code&gt; &lt;/a&gt;例外が発生します。これが発生した場合は、&lt;em&gt;残余&lt;/em&gt;引数なしで&lt;a href=&quot;#ftplib.FTP.transfercmd&quot;&gt; &lt;code&gt;transfercmd()&lt;/code&gt; &lt;/a&gt;を呼び出します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="12e5876c996fe3ce7e5f11f23f2acba47a2002c2" translate="yes" xml:space="preserve">
          <source>If optional argument &lt;em&gt;topdown&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt; or not specified, the triple for a directory is generated before the triples for any of its subdirectories (directories are generated top-down). If &lt;em&gt;topdown&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt;, the triple for a directory is generated after the triples for all of its subdirectories (directories are generated bottom-up). No matter the value of &lt;em&gt;topdown&lt;/em&gt;, the list of subdirectories is retrieved before the tuples for the directory and its subdirectories are generated.</source>
          <target state="translated">オプションの引数&lt;em&gt;topdown&lt;/em&gt;が &lt;code&gt;True&lt;/code&gt; または指定されていない場合、ディレクトリのトリプルは、そのサブディレクトリのトリプルの前に生成されます（ディレクトリはトップダウンで生成されます）。&lt;em&gt;topdown&lt;/em&gt;が &lt;code&gt;False&lt;/code&gt; の場合、ディレクトリのトリプルは、そのすべてのサブディレクトリのトリプルの後に生成されます（ディレクトリはボトムアップで生成されます）。&lt;em&gt;topdown&lt;/em&gt;の値に関係なく、サブディレクトリのリストは、ディレクトリとそのサブディレクトリのタプルが生成される前に取得されます。</target>
        </trans-unit>
        <trans-unit id="c43cb00d5fc16bd54dc39ceae5b45c2ffe796cc5" translate="yes" xml:space="preserve">
          <source>If optional argument &lt;em&gt;tz&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt; or not specified, this is like &lt;a href=&quot;#datetime.datetime.today&quot;&gt;&lt;code&gt;today()&lt;/code&gt;&lt;/a&gt;, but, if possible, supplies more precision than can be gotten from going through a &lt;a href=&quot;time#time.time&quot;&gt;&lt;code&gt;time.time()&lt;/code&gt;&lt;/a&gt; timestamp (for example, this may be possible on platforms supplying the C &lt;code&gt;gettimeofday()&lt;/code&gt; function).</source>
          <target state="translated">オプションの引数&lt;em&gt;tz&lt;/em&gt;が &lt;code&gt;None&lt;/code&gt; または指定されていない場合、これは&lt;a href=&quot;#datetime.datetime.today&quot;&gt; &lt;code&gt;today()&lt;/code&gt; &lt;/a&gt;に似ていますが、可能であれば、&lt;a href=&quot;time#time.time&quot;&gt; &lt;code&gt;time.time()&lt;/code&gt; &lt;/a&gt;タイムスタンプを通過することで得られるよりも高い精度を提供します（たとえば、これは、 Cの &lt;code&gt;gettimeofday()&lt;/code&gt; 関数）。</target>
        </trans-unit>
        <trans-unit id="8ebb578f00d1c7fad8844f4eebad620649156c22" translate="yes" xml:space="preserve">
          <source>If optional argument &lt;em&gt;verbose&lt;/em&gt; is true, output is generated even if there are no failures. By default, output is generated only in case of an example failure.</source>
          <target state="translated">オプションの引数&lt;em&gt;verbose&lt;/em&gt;がtrueの場合、失敗がなくても出力が生成されます。デフォルトでは、サンプルの失敗の場合にのみ出力が生成されます。</target>
        </trans-unit>
        <trans-unit id="8ffdd4e7b5895f1e0d5dff890e02c15a4800f31a" translate="yes" xml:space="preserve">
          <source>If optional keyword argument &lt;em&gt;initial_response_ok&lt;/em&gt; is true, &lt;code&gt;authobject()&lt;/code&gt; will be called first with no argument. It can return the &lt;a href=&quot;https://tools.ietf.org/html/rfc4954.html&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;RFC 4954&lt;/strong&gt;&lt;/a&gt; &amp;ldquo;initial response&amp;rdquo; ASCII &lt;code&gt;str&lt;/code&gt; which will be encoded and sent with the &lt;code&gt;AUTH&lt;/code&gt; command as below. If the &lt;code&gt;authobject()&lt;/code&gt; does not support an initial response (e.g. because it requires a challenge), it should return &lt;code&gt;None&lt;/code&gt; when called with &lt;code&gt;challenge=None&lt;/code&gt;. If &lt;em&gt;initial_response_ok&lt;/em&gt; is false, then &lt;code&gt;authobject()&lt;/code&gt; will not be called first with &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">オプションのキーワード引数&lt;em&gt;initial_response_ok&lt;/em&gt;がtrueの場合、 &lt;code&gt;authobject()&lt;/code&gt; が引数なしで最初に呼び出されます。&lt;a href=&quot;https://tools.ietf.org/html/rfc4954.html&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;RFC 4954の&lt;/strong&gt;&lt;/a&gt;「初期応答」ASCII &lt;code&gt;str&lt;/code&gt; を返すことができます。これは、エンコードされ、以下のように &lt;code&gt;AUTH&lt;/code&gt; コマンドで送信されます。 &lt;code&gt;authobject()&lt;/code&gt; が初期応答をサポートしていない場合（チャレンジが必要な場合など）、 &lt;code&gt;challenge=None&lt;/code&gt; で呼び出された場合、 &lt;code&gt;None&lt;/code&gt; を返す必要があります。場合&lt;em&gt;initial_response_okが&lt;/em&gt;偽である場合、 &lt;code&gt;authobject()&lt;/code&gt; で最初に呼び出されることはありません &lt;code&gt;None&lt;/code&gt; 。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="aae29e2c8c341be783838f132ff21d9ab34d97fc" translate="yes" xml:space="preserve">
          <source>If passed an object that is not a context manager, this method assumes it is a callback with the same signature as a context manager&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt;&lt;code&gt;__exit__()&lt;/code&gt;&lt;/a&gt; method and adds it directly to the callback stack.</source>
          <target state="translated">コンテキストマネージャではないオブジェクトが渡された場合、このメソッドは、それがコンテキストマネージャの&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt; &lt;code&gt;__exit__()&lt;/code&gt; &lt;/a&gt;メソッドと同じシグネチャを持つコールバックであると想定し、コールバックスタックに直接追加します。</target>
        </trans-unit>
        <trans-unit id="38619f38fb2e8ea83cef76fefbe9fa418722ab8f" translate="yes" xml:space="preserve">
          <source>If policy allows (ie. the &lt;code&gt;rfc2965&lt;/code&gt; and &lt;code&gt;hide_cookie2&lt;/code&gt; attributes of the &lt;a href=&quot;#http.cookiejar.CookieJar&quot;&gt;&lt;code&gt;CookieJar&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;a href=&quot;#http.cookiejar.CookiePolicy&quot;&gt;&lt;code&gt;CookiePolicy&lt;/code&gt;&lt;/a&gt; instance are true and false respectively), the &lt;em&gt;Cookie2&lt;/em&gt; header is also added when appropriate.</source>
          <target state="translated">ポリシーが許可されている場合（すなわち、 &lt;code&gt;rfc2965&lt;/code&gt; 及び &lt;code&gt;hide_cookie2&lt;/code&gt; の属性&lt;a href=&quot;#http.cookiejar.CookieJar&quot;&gt; &lt;code&gt;CookieJar&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;#http.cookiejar.CookiePolicy&quot;&gt; &lt;code&gt;CookiePolicy&lt;/code&gt; &lt;/a&gt;インスタンスは、それぞれ真および偽である）、&lt;em&gt;Cookie2の&lt;/em&gt;ヘッダはまた、適切な場合に添加されます。</target>
        </trans-unit>
        <trans-unit id="d11ebbe292ed1e1ee178b91b1ecd2889a70e4116" translate="yes" xml:space="preserve">
          <source>If precision is &lt;code&gt;N&lt;/code&gt;, the output is truncated to &lt;code&gt;N&lt;/code&gt; characters.</source>
          <target state="translated">精度が &lt;code&gt;N&lt;/code&gt; の場合、出力は &lt;code&gt;N&lt;/code&gt; 文字に切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="443ece5632be703c310845263c3ce1e3e31a1c39" translate="yes" xml:space="preserve">
          <source>If prefix &amp;ldquo;0b&amp;rdquo; is desired or not, you can use either of the following ways.</source>
          <target state="translated">プレフィックス「0b」が必要かどうかは、次のいずれかの方法を使用できます。</target>
        </trans-unit>
        <trans-unit id="e4ce265a9ea589b84bb1ae1a723bd20e1e88bd3e" translate="yes" xml:space="preserve">
          <source>If present and greater than zero, specified the desired width of the pane area (not including internal padding). Otherwise, the maximum width of all panes is used.</source>
          <target state="translated">存在し、ゼロより大きい場合は、希望するペイン領域の幅を指定します(内部パディングは含まれません)。それ以外の場合は、すべてのペインの最大幅が使用されます。</target>
        </trans-unit>
        <trans-unit id="3b03a80e9a562cf9b1589a814197ce3243d92bcb" translate="yes" xml:space="preserve">
          <source>If present and greater than zero, specifies the desired height of the pane area (not including internal padding or tabs). Otherwise, the maximum height of all panes is used.</source>
          <target state="translated">存在し、0より大きい場合は、ペイン領域の希望する高さを指定します(内部のパディングやタブは含まれません)。それ以外の場合は、すべてのペインの最大高さが使用されます。</target>
        </trans-unit>
        <trans-unit id="4545dbeee8dafb95a5bd0e1db8e7852d40b3ad54" translate="yes" xml:space="preserve">
          <source>If provided, &lt;em&gt;tz&lt;/em&gt; must be an instance of a &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; subclass, and its &lt;a href=&quot;#datetime.datetime.utcoffset&quot;&gt;&lt;code&gt;utcoffset()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#datetime.datetime.dst&quot;&gt;&lt;code&gt;dst()&lt;/code&gt;&lt;/a&gt; methods must not return &lt;code&gt;None&lt;/code&gt;. If &lt;em&gt;self&lt;/em&gt; is naive, it is presumed to represent time in the system timezone.</source>
          <target state="translated">指定する場合、&lt;em&gt;tz&lt;/em&gt;は&lt;a href=&quot;#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;サブクラスのインスタンスである必要があり、その&lt;a href=&quot;#datetime.datetime.utcoffset&quot;&gt; &lt;code&gt;utcoffset()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#datetime.datetime.dst&quot;&gt; &lt;code&gt;dst()&lt;/code&gt; &lt;/a&gt;メソッドは &lt;code&gt;None&lt;/code&gt; を返してはなりません。&lt;em&gt;自分自身&lt;/em&gt;がナイーブである場合、それはシステムのタイムゾーンの時間を表すと推定されます。</target>
        </trans-unit>
        <trans-unit id="70f41e2c7bc507b15fffa53f66966c258b97643a" translate="yes" xml:space="preserve">
          <source>If returning a tuple doesn&amp;rsquo;t suffice and you want name-based access to columns, you should consider setting &lt;a href=&quot;#sqlite3.Connection.row_factory&quot;&gt;&lt;code&gt;row_factory&lt;/code&gt;&lt;/a&gt; to the highly-optimized &lt;a href=&quot;#sqlite3.Row&quot;&gt;&lt;code&gt;sqlite3.Row&lt;/code&gt;&lt;/a&gt; type. &lt;a href=&quot;#sqlite3.Row&quot;&gt;&lt;code&gt;Row&lt;/code&gt;&lt;/a&gt; provides both index-based and case-insensitive name-based access to columns with almost no memory overhead. It will probably be better than your own custom dictionary-based approach or even a db_row based solution.</source>
          <target state="translated">タプルを返すだけでは不十分で、列への名前ベースのアクセスが必要な場合は、&lt;a href=&quot;#sqlite3.Connection.row_factory&quot;&gt; &lt;code&gt;row_factory&lt;/code&gt; &lt;/a&gt;を高度に最適化された&lt;a href=&quot;#sqlite3.Row&quot;&gt; &lt;code&gt;sqlite3.Row&lt;/code&gt; &lt;/a&gt;タイプに設定することを検討する必要があります。&lt;a href=&quot;#sqlite3.Row&quot;&gt; &lt;code&gt;Row&lt;/code&gt; &lt;/a&gt;は、メモリオーバーヘッドをほとんど発生させることなく、インデックスベースと大文字と小文字を区別しない名前ベースの両方の列へのアクセスを提供します。おそらく、独自のカスタム辞書ベースのアプローチや、db_rowベースのソリューションよりも優れています。</target>
        </trans-unit>
        <trans-unit id="fb1cc245a11320da1db54ed5268d026fb86fcc00" translate="yes" xml:space="preserve">
          <source>If set to 1, causes the element and all of its descendants to be treated as a single element for the purposes of &lt;a href=&quot;#tkinter.ttk.Widget.identify&quot;&gt;&lt;code&gt;Widget.identify()&lt;/code&gt;&lt;/a&gt; et al. It&amp;rsquo;s used for things like scrollbar thumbs with grips.</source>
          <target state="translated">1に設定すると、要素とそのすべての子孫が&lt;a href=&quot;#tkinter.ttk.Widget.identify&quot;&gt; &lt;code&gt;Widget.identify()&lt;/code&gt; などの&lt;/a&gt;目的で単一の要素として扱われます。グリップ付きのスクロールバーのつまみのようなものに使用されます。</target>
        </trans-unit>
        <trans-unit id="8e4c1e34442088e1b288c391bdce23a843d942a1" translate="yes" xml:space="preserve">
          <source>If set to a non-zero integer, the parser will report only those attributes which were specified in the document instance and not those which were derived from attribute declarations. Applications which set this need to be especially careful to use what additional information is available from the declarations as needed to comply with the standards for the behavior of XML processors. By default, this attribute is false; it may be changed at any time.</source>
          <target state="translated">0以外の整数に設定された場合、パーサは文書インスタンスで指定された属性のみを報告し、属性宣言から派生した属性は報告しません。これを設定したアプリケーションは、XMLプロセッサの動作の標準に準拠するために必要な宣言から利用可能な追加情報を使用するように特に注意する必要があります。デフォルトでは、この属性はfalseです。</target>
        </trans-unit>
        <trans-unit id="3ee3f2b48192a68f3a6682ab4100a180bef3319f" translate="yes" xml:space="preserve">
          <source>If set to true &lt;a href=&quot;#unittest.TestResult.stop&quot;&gt;&lt;code&gt;stop()&lt;/code&gt;&lt;/a&gt; will be called on the first failure or error, halting the test run.</source>
          <target state="translated">trueに設定すると、最初の失敗またはエラー時に&lt;a href=&quot;#unittest.TestResult.stop&quot;&gt; &lt;code&gt;stop()&lt;/code&gt; &lt;/a&gt;が呼び出され、テストの実行が停止します。</target>
        </trans-unit>
        <trans-unit id="e51e0d8058becfc44eb0b15e9fbb655eff6ca1d8" translate="yes" xml:space="preserve">
          <source>If set to true then local variables will be shown in tracebacks.</source>
          <target state="translated">true に設定すると、ローカル変数がトレースバックで表示されます。</target>
        </trans-unit>
        <trans-unit id="64b6f3bafe48fa6aa11d7a7bedca0dc485936902" translate="yes" xml:space="preserve">
          <source>If set to true, &lt;code&gt;sys.stdout&lt;/code&gt; and &lt;code&gt;sys.stderr&lt;/code&gt; will be buffered in between &lt;a href=&quot;#unittest.TestResult.startTest&quot;&gt;&lt;code&gt;startTest()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#unittest.TestResult.stopTest&quot;&gt;&lt;code&gt;stopTest()&lt;/code&gt;&lt;/a&gt; being called. Collected output will only be echoed onto the real &lt;code&gt;sys.stdout&lt;/code&gt; and &lt;code&gt;sys.stderr&lt;/code&gt; if the test fails or errors. Any output is also attached to the failure / error message.</source>
          <target state="translated">trueに設定すると、 &lt;code&gt;sys.stdout&lt;/code&gt; と &lt;code&gt;sys.stderr&lt;/code&gt; は、&lt;a href=&quot;#unittest.TestResult.startTest&quot;&gt; &lt;code&gt;startTest()&lt;/code&gt; &lt;/a&gt;れているstartTest（）と&lt;a href=&quot;#unittest.TestResult.stopTest&quot;&gt; &lt;code&gt;stopTest()&lt;/code&gt; の&lt;/a&gt;間にバッファリングされます。収集された出力は、テストが失敗またはエラーになった場合にのみ、実際の &lt;code&gt;sys.stdout&lt;/code&gt; および &lt;code&gt;sys.stderr&lt;/code&gt; にエコーされます。すべての出力は、失敗/エラーメッセージにも添付されます。</target>
        </trans-unit>
        <trans-unit id="ecf8c4b33b20be57bc6efdf4b39c10800d750a9d" translate="yes" xml:space="preserve">
          <source>If set, a new dict will be created for the frame&amp;rsquo;s &lt;code&gt;f_locals&lt;/code&gt; when the code object is executed.</source>
          <target state="translated">設定されている場合、コードオブジェクトが実行されるときに、フレームの &lt;code&gt;f_locals&lt;/code&gt; に対して新しいdictが作成されます。</target>
        </trans-unit>
        <trans-unit id="90c8757d24024109684a25cf5517e4c9f2ec4bd1" translate="yes" xml:space="preserve">
          <source>If set, specifies the index (0-based) of a character to underline in the text string. The underline character is used for mnemonic activation.</source>
          <target state="translated">セットされている場合、テキスト文字列の下線を引く文字のインデックス (0 ベース)を指定します。下線文字はニーモニック活性化のために使用されます。</target>
        </trans-unit>
        <trans-unit id="8a6c0ce7a7752011eb06bc4de3089d05ce6f551e" translate="yes" xml:space="preserve">
          <source>If some data was successfully read, it will return the number of bytes read. If no bytes were read, it will return &lt;code&gt;-1&lt;/code&gt; and set errno to &lt;a href=&quot;errno#errno.EAGAIN&quot;&gt;&lt;code&gt;errno.EAGAIN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">一部のデータが正常に読み取られた場合は、読み取られたバイト数を返します。バイトが読み取られなかった場合は、 &lt;code&gt;-1&lt;/code&gt; を返し、errnoを&lt;a href=&quot;errno#errno.EAGAIN&quot;&gt; &lt;code&gt;errno.EAGAIN&lt;/code&gt; に&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="8c0a8612344f25e81798fab5bf81643a26a155fd" translate="yes" xml:space="preserve">
          <source>If source code is available, then the method should return the path to the source file, regardless of whether a bytecode was used to load the module.</source>
          <target state="translated">ソースコードが利用可能な場合、モジュールをロードするためにバイトコードが使用されたかどうかに関わらず、このメソッドはソースファイルへのパスを返します。</target>
        </trans-unit>
        <trans-unit id="0e0b6d4c847d28d357f25ee69a7125504c0d6bad" translate="yes" xml:space="preserve">
          <source>If specified, &lt;em&gt;default&lt;/em&gt; should be a function that gets called for objects that can&amp;rsquo;t otherwise be serialized. It should return a JSON encodable version of the object or raise a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. If not specified, &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">指定する場合、&lt;em&gt;デフォルト&lt;/em&gt;は、他の方法ではシリアル化できないオブジェクトに対して呼び出される関数にする必要があります。オブジェクトのJSONエンコード可能なバージョンを返すか、&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; を発生させ&lt;/a&gt;ます。指定しない場合、&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="59bccf61da6bc8aa73e6b26d9107f86de89d1f17" translate="yes" xml:space="preserve">
          <source>If specified, &lt;em&gt;env&lt;/em&gt; must provide any variables required for the program to execute. On Windows, in order to run a &lt;a href=&quot;https://en.wikipedia.org/wiki/Side-by-Side_Assembly&quot;&gt;side-by-side assembly&lt;/a&gt; the specified &lt;em&gt;env&lt;/em&gt;&lt;strong&gt;must&lt;/strong&gt; include a valid &lt;code id=&quot;index-3&quot;&gt;SystemRoot&lt;/code&gt;.</source>
          <target state="translated">指定した場合、&lt;em&gt;env&lt;/em&gt;はプログラムの実行に必要な変数を提供する必要があります。Windowsでは、&lt;a href=&quot;https://en.wikipedia.org/wiki/Side-by-Side_Assembly&quot;&gt;サイドバイサイドアセンブリ&lt;/a&gt;を実行するために、指定された&lt;em&gt;envに&lt;/em&gt;有効な &lt;code id=&quot;index-3&quot;&gt;SystemRoot&lt;/code&gt; が含まれている&lt;strong&gt;必要&lt;/strong&gt;があります。</target>
        </trans-unit>
        <trans-unit id="55004220c3f31c4448c84db4c687ec30a9bc0a57" translate="yes" xml:space="preserve">
          <source>If specified, &lt;em&gt;separators&lt;/em&gt; should be an &lt;code&gt;(item_separator, key_separator)&lt;/code&gt; tuple. The default is &lt;code&gt;(', ', ': ')&lt;/code&gt; if &lt;em&gt;indent&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt; and &lt;code&gt;(',', ': ')&lt;/code&gt; otherwise. To get the most compact JSON representation, you should specify &lt;code&gt;(',', ':')&lt;/code&gt; to eliminate whitespace.</source>
          <target state="translated">指定する場合、&lt;em&gt;セパレーター&lt;/em&gt;は &lt;code&gt;(item_separator, key_separator)&lt;/code&gt; タプルである必要があります。デフォルトは &lt;code&gt;(', ', ': ')&lt;/code&gt; 場合&lt;em&gt;インデントは&lt;/em&gt;ありません &lt;code&gt;None&lt;/code&gt; と &lt;code&gt;(',', ': ')&lt;/code&gt; そう。最もコンパクトなJSON表現を取得するには、 &lt;code&gt;(',', ':')&lt;/code&gt; を指定して空白を削除する必要があります。</target>
        </trans-unit>
        <trans-unit id="51387c50308ba22f05c775c6091c3e23657f8358" translate="yes" xml:space="preserve">
          <source>If specified, this should be an iterable of already created handlers to add to the root logger. Any handlers which don&amp;rsquo;t already have a formatter set will be assigned the default formatter created in this function. Note that this argument is incompatible with &lt;em&gt;filename&lt;/em&gt; or &lt;em&gt;stream&lt;/em&gt; - if both are present, a &lt;code&gt;ValueError&lt;/code&gt; is raised.</source>
          <target state="translated">指定する場合、これはルートロガーに追加するために作成済みのハンドラーの反復可能でなければなりません。フォーマッタセットがまだないハンドラには、この関数で作成されたデフォルトのフォーマッタが割り当てられます。この引数は&lt;em&gt;ファイル名&lt;/em&gt;または&lt;em&gt;ストリーム&lt;/em&gt;と互換性がないことに注意してください-両方が存在する &lt;code&gt;ValueError&lt;/code&gt; 、ValueErrorが発生します。</target>
        </trans-unit>
        <trans-unit id="2396c9bd05ca934d78b97fe306102f571da9db25" translate="yes" xml:space="preserve">
          <source>If stack information is available, it&amp;rsquo;s appended after the exception information, using &lt;a href=&quot;#logging.Formatter.formatStack&quot;&gt;&lt;code&gt;formatStack()&lt;/code&gt;&lt;/a&gt; to transform it if necessary.</source>
          <target state="translated">スタック情報が利用可能な場合は、例外情報の後に追加され、必要に応じて&lt;a href=&quot;#logging.Formatter.formatStack&quot;&gt; &lt;code&gt;formatStack()&lt;/code&gt; &lt;/a&gt;を使用して変換します。</target>
        </trans-unit>
        <trans-unit id="49e5edaf7d45ad995b7d09a564fc8b598f00fc32" translate="yes" xml:space="preserve">
          <source>If standard (non-proxy) &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;stdtypes#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; objects are contained in a referent, modifications to those mutable values will not be propagated through the manager because the proxy has no way of knowing when the values contained within are modified. However, storing a value in a container proxy (which triggers a &lt;code&gt;__setitem__&lt;/code&gt; on the proxy object) does propagate through the manager and so to effectively modify such an item, one could re-assign the modified value to the container proxy:</source>
          <target state="translated">標準（非プロキシ）&lt;a href=&quot;stdtypes#list&quot;&gt; &lt;code&gt;list&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;stdtypes#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt;オブジェクトがリファレントに含まれている場合、プロキシには内部に含まれる値がいつ変更されるかを知る方法がないため、これらの変更可能な値への変更はマネージャーを通じて伝播されません。ただし、値をコンテナープロキシに格納すると（プロキシオブジェクトで &lt;code&gt;__setitem__&lt;/code&gt; がトリガーされます）、マネージャーを通じて伝達されるため、そのようなアイテムを効果的に変更するには、変更した値をコンテナープロキシに再度割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="af8f87d5d4d9f4f5995cccc6502c2c7f249e6db4" translate="yes" xml:space="preserve">
          <source>If supplied, &lt;em&gt;source_address&lt;/em&gt; must be a 2-tuple &lt;code&gt;(host, port)&lt;/code&gt; for the socket to bind to as its source address before connecting. If host or port are &amp;lsquo;&amp;rsquo; or 0 respectively the OS default behavior will be used.</source>
          <target state="translated">指定する場合、ソケットが接続前にソースアドレスとしてバインドするには、&lt;em&gt;source_address&lt;/em&gt;は2タプル &lt;code&gt;(host, port)&lt;/code&gt; である必要があります。ホストまたはポートがそれぞれ ''または0の場合、OSのデフォルトの動作が使用されます。</target>
        </trans-unit>
        <trans-unit id="7158776ee648d11018c88143c872cabdaad5856c" translate="yes" xml:space="preserve">
          <source>If text mode is not used, &lt;em&gt;stdin&lt;/em&gt;, &lt;em&gt;stdout&lt;/em&gt; and &lt;em&gt;stderr&lt;/em&gt; will be opened as binary streams. No encoding or line ending conversion is performed.</source>
          <target state="translated">テキストモードを使用しない場合、&lt;em&gt;stdin&lt;/em&gt;、&lt;em&gt;stdout&lt;/em&gt;、および&lt;em&gt;stderr&lt;/em&gt;はバイナリストリームとして開かれます。エンコードや行末変換は行われません。</target>
        </trans-unit>
        <trans-unit id="b647614fdb703e999c4e6277543848afe83dfe6b" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;#collections.defaultdict.default_factory&quot;&gt;&lt;code&gt;default_factory&lt;/code&gt;&lt;/a&gt; attribute is &lt;code&gt;None&lt;/code&gt;, this raises a &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; exception with the &lt;em&gt;key&lt;/em&gt; as argument.</source>
          <target state="translated">&lt;a href=&quot;#collections.defaultdict.default_factory&quot;&gt; &lt;code&gt;default_factory&lt;/code&gt; &lt;/a&gt;属性が &lt;code&gt;None&lt;/code&gt; の場合、これは&lt;em&gt;キー&lt;/em&gt;を引数として&lt;a href=&quot;exceptions#KeyError&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; &lt;/a&gt;例外を発生させます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5166c50db841216329f470ef00ee35316868399a" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;#decimal.FloatOperation&quot;&gt;&lt;code&gt;FloatOperation&lt;/code&gt;&lt;/a&gt; signal is trapped, accidental mixing of decimals and floats in constructors or ordering comparisons raises an exception:</source>
          <target state="translated">&lt;a href=&quot;#decimal.FloatOperation&quot;&gt; &lt;code&gt;FloatOperation&lt;/code&gt; &lt;/a&gt;信号がトラップされた場合、コンストラクターでの小数と浮動小数の偶然の混合、または比較の順序付けで例外が発生します。</target>
        </trans-unit>
        <trans-unit id="9bbeb2f2786191004c4aacbd9b237c32b9a9e470" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;#os.GRND_NONBLOCK&quot;&gt;&lt;code&gt;GRND_NONBLOCK&lt;/code&gt;&lt;/a&gt; flag is set, then &lt;a href=&quot;#os.getrandom&quot;&gt;&lt;code&gt;getrandom()&lt;/code&gt;&lt;/a&gt; does not block in these cases, but instead immediately raises &lt;a href=&quot;exceptions#BlockingIOError&quot;&gt;&lt;code&gt;BlockingIOError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合&lt;a href=&quot;#os.GRND_NONBLOCK&quot;&gt; &lt;code&gt;GRND_NONBLOCK&lt;/code&gt; の&lt;/a&gt;フラグがセットされ、次いで&lt;a href=&quot;#os.getrandom&quot;&gt; &lt;code&gt;getrandom()&lt;/code&gt; &lt;/a&gt;これらの場合にはブロックしないが、代わりに直ちに上昇させる&lt;a href=&quot;exceptions#BlockingIOError&quot;&gt; &lt;code&gt;BlockingIOError&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7e5c2c854be11bcf191a49fa0ebcc698cb65781e" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;#threading.Thread.run&quot;&gt;&lt;code&gt;run()&lt;/code&gt;&lt;/a&gt; method raises an exception, &lt;a href=&quot;#threading.excepthook&quot;&gt;&lt;code&gt;threading.excepthook()&lt;/code&gt;&lt;/a&gt; is called to handle it. By default, &lt;a href=&quot;#threading.excepthook&quot;&gt;&lt;code&gt;threading.excepthook()&lt;/code&gt;&lt;/a&gt; ignores silently &lt;a href=&quot;exceptions#SystemExit&quot;&gt;&lt;code&gt;SystemExit&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合は&lt;a href=&quot;#threading.Thread.run&quot;&gt; &lt;code&gt;run()&lt;/code&gt; &lt;/a&gt;メソッドが例外を発生させ、&lt;a href=&quot;#threading.excepthook&quot;&gt; &lt;code&gt;threading.excepthook()&lt;/code&gt; は&lt;/a&gt;、それを処理するために呼び出されます。デフォルトでは、&lt;a href=&quot;#threading.excepthook&quot;&gt; &lt;code&gt;threading.excepthook()&lt;/code&gt; &lt;/a&gt;は暗黙的に&lt;a href=&quot;exceptions#SystemExit&quot;&gt; &lt;code&gt;SystemExit&lt;/code&gt; を&lt;/a&gt;無視します。</target>
        </trans-unit>
        <trans-unit id="e96f8cfc40738bbb062383e1cc52fead6fbf34f8" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;#unittest.TestCase.setUp&quot;&gt;&lt;code&gt;setUp()&lt;/code&gt;&lt;/a&gt; method raises an exception while the test is running, the framework will consider the test to have suffered an error, and the test method will not be executed.</source>
          <target state="translated">場合&lt;a href=&quot;#unittest.TestCase.setUp&quot;&gt; &lt;code&gt;setUp()&lt;/code&gt; &lt;/a&gt;テストの実行中にメソッドは例外を発生させ、フレームワークは、テストがエラーを受けていると考えます、そして試験方法が実行されません。</target>
        </trans-unit>
        <trans-unit id="a83922f016248c8cd1e133445c39b06053bf60d4" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;#wsgiref.handlers.BaseHandler.origin_server&quot;&gt;&lt;code&gt;origin_server&lt;/code&gt;&lt;/a&gt; attribute is set, this attribute&amp;rsquo;s value is used to set the default &lt;code&gt;SERVER_SOFTWARE&lt;/code&gt; WSGI environment variable, and also to set a default &lt;code&gt;Server:&lt;/code&gt; header in HTTP responses. It is ignored for handlers (such as &lt;a href=&quot;#wsgiref.handlers.BaseCGIHandler&quot;&gt;&lt;code&gt;BaseCGIHandler&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#wsgiref.handlers.CGIHandler&quot;&gt;&lt;code&gt;CGIHandler&lt;/code&gt;&lt;/a&gt;) that are not HTTP origin servers.</source>
          <target state="translated">&lt;a href=&quot;#wsgiref.handlers.BaseHandler.origin_server&quot;&gt; &lt;code&gt;origin_server&lt;/code&gt; &lt;/a&gt;属性が設定されている場合、この属性の値は、デフォルトの &lt;code&gt;SERVER_SOFTWARE&lt;/code&gt; WSGI環境変数を設定するため、およびHTTP応答でデフォルトの &lt;code&gt;Server:&lt;/code&gt; ヘッダーを設定するためにも使用されます。HTTPオリジンサーバーではないハンドラー（&lt;a href=&quot;#wsgiref.handlers.BaseCGIHandler&quot;&gt; &lt;code&gt;BaseCGIHandler&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#wsgiref.handlers.CGIHandler&quot;&gt; &lt;code&gt;CGIHandler&lt;/code&gt; など&lt;/a&gt;）では無視されます。</target>
        </trans-unit>
        <trans-unit id="9e6190ef04b122e93b83bb48591b9a20ea9d1832" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;email.policy#module-email.policy&quot;&gt;&lt;code&gt;policy&lt;/code&gt;&lt;/a&gt; option &lt;a href=&quot;email.policy#email.policy.Policy.cte_type&quot;&gt;&lt;code&gt;cte_type&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;8bit&lt;/code&gt; (the default), copy any headers in the original parsed message that have not been modified to the output with any bytes with the high bit set reproduced as in the original, and preserve the non-ASCII &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt; of any body parts that have them. If &lt;code&gt;cte_type&lt;/code&gt; is &lt;code&gt;7bit&lt;/code&gt;, convert the bytes with the high bit set as needed using an ASCII-compatible &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt;. That is, transform parts with non-ASCII &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt; (&lt;em&gt;Content-Transfer-Encoding: 8bit&lt;/em&gt;) to an ASCII compatible &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt;, and encode RFC-invalid non-ASCII bytes in headers using the MIME &lt;code&gt;unknown-8bit&lt;/code&gt; character set, thus rendering them RFC-compliant.</source>
          <target state="translated">場合&lt;a href=&quot;email.policy#module-email.policy&quot;&gt; &lt;code&gt;policy&lt;/code&gt; &lt;/a&gt;オプション&lt;a href=&quot;email.policy#email.policy.Policy.cte_type&quot;&gt; &lt;code&gt;cte_type&lt;/code&gt; が&lt;/a&gt;ある &lt;code&gt;8bit&lt;/code&gt; （デフォルト）は、元のように再生高いビットが設定された任意のバイトで出力するように変更されていない元の構文解析されたメッセージ内の任意のヘッダがコピー、および非ASCII保存&lt;em&gt;たContentを&lt;/em&gt;それらを持っているすべての体の部分の&lt;em&gt;転送エンコーディング&lt;/em&gt;。場合 &lt;code&gt;cte_type&lt;/code&gt; がある &lt;code&gt;7bit&lt;/code&gt; ASCII互換使用して、必要に応じて、高ビットが設定されたバイト数を変換する&lt;em&gt;コンテンツ転送エンコードを&lt;/em&gt;。つまり、ASCII以外の&lt;em&gt;Content-Transfer-Encoding&lt;/em&gt;（&lt;em&gt;Content-Transfer-Encoding：8bit&lt;/em&gt;）のパーツをASCII互換の&lt;em&gt;Content-Transfer-Encodingに変換します。&lt;/em&gt;、およびヘッダーのRFC無効な非ASCIIバイトをMIMEの &lt;code&gt;unknown-8bit&lt;/code&gt; 文字セットを使用してエンコードし、RFC 準拠にします。</target>
        </trans-unit>
        <trans-unit id="2c701b67912c6e3c4a20fa3bedd65247e3914281" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;email.policy#module-email.policy&quot;&gt;&lt;code&gt;policy&lt;/code&gt;&lt;/a&gt; option &lt;a href=&quot;email.policy#email.policy.Policy.cte_type&quot;&gt;&lt;code&gt;cte_type&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;8bit&lt;/code&gt;, generate the message as if the option were set to &lt;code&gt;7bit&lt;/code&gt;. (This is required because strings cannot represent non-ASCII bytes.) Convert any bytes with the high bit set as needed using an ASCII-compatible &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt;. That is, transform parts with non-ASCII &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt; (&lt;em&gt;Content-Transfer-Encoding: 8bit&lt;/em&gt;) to an ASCII compatible &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt;, and encode RFC-invalid non-ASCII bytes in headers using the MIME &lt;code&gt;unknown-8bit&lt;/code&gt; character set, thus rendering them RFC-compliant.</source>
          <target state="translated">場合は&lt;a href=&quot;email.policy#module-email.policy&quot;&gt; &lt;code&gt;policy&lt;/code&gt; &lt;/a&gt;オプション&lt;a href=&quot;email.policy#email.policy.Policy.cte_type&quot;&gt; &lt;code&gt;cte_type&lt;/code&gt; が&lt;/a&gt;ある &lt;code&gt;8bit&lt;/code&gt; のオプションに設定しているかのように、メッセージを生成する &lt;code&gt;7bit&lt;/code&gt; 。 （これは、文字列が非ASCIIバイトを表すことができないために必要です。）ASCII互換の&lt;em&gt;Content-Transfer-Encoding&lt;/em&gt;を使用して、必要に応じて上位ビットが設定されたバイトを変換します。つまり、ASCII以外の&lt;em&gt;Content-Transfer-Encoding&lt;/em&gt;（&lt;em&gt;Content-Transfer-Encoding：8bit&lt;/em&gt;）の部分をASCII互換の&lt;em&gt;Content-Transfer-Encoding&lt;/em&gt;に変換し、MIME &lt;code&gt;unknown-8bit&lt;/code&gt; を使用してヘッダー内のRFC無効な非ASCIIバイトをエンコードします。文字セット、したがってそれらをRFC準拠にレンダリングします。</target>
        </trans-unit>
        <trans-unit id="6705ff167ef2a10be922c82015337dad5632886f" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;readline#module-readline&quot;&gt;&lt;code&gt;readline&lt;/code&gt;&lt;/a&gt; module is loaded, input will automatically inherit &lt;strong&gt;bash&lt;/strong&gt;-like history-list editing (e.g.</source>
          <target state="translated">&lt;a href=&quot;readline#module-readline&quot;&gt; &lt;code&gt;readline&lt;/code&gt; &lt;/a&gt;モジュールがロードされている場合、入力は自動的に&lt;strong&gt;bashの&lt;/strong&gt;ような履歴リストの編集（たとえば、</target>
        </trans-unit>
        <trans-unit id="992e16a7eb0c65f78ed4d6b22ea21a69e69f88d9" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;readline#module-readline&quot;&gt;&lt;code&gt;readline&lt;/code&gt;&lt;/a&gt; module was loaded, then &lt;a href=&quot;#input&quot;&gt;&lt;code&gt;input()&lt;/code&gt;&lt;/a&gt; will use it to provide elaborate line editing and history features.</source>
          <target state="translated">場合は&lt;a href=&quot;readline#module-readline&quot;&gt; &lt;code&gt;readline&lt;/code&gt; の&lt;/a&gt;モジュールがロードされた後、&lt;a href=&quot;#input&quot;&gt; &lt;code&gt;input()&lt;/code&gt; &lt;/a&gt;精緻な行編集およびヒストリ機能を提供するために、それを使用します。</target>
        </trans-unit>
        <trans-unit id="7f400827c02071e6ef95ee0237e542f0c4ec14fd" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;.mo&lt;/code&gt; file&amp;rsquo;s magic number is invalid, the major version number is unexpected, or if other problems occur while reading the file, instantiating a &lt;a href=&quot;#gettext.GNUTranslations&quot;&gt;&lt;code&gt;GNUTranslations&lt;/code&gt;&lt;/a&gt; class can raise &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合 &lt;code&gt;.mo&lt;/code&gt; ファイルのマジック番号が無効である、メジャーバージョン番号は予想外である、またはファイルを読みながら、他の問題が発生した場合、インスタンス化&lt;a href=&quot;#gettext.GNUTranslations&quot;&gt; &lt;code&gt;GNUTranslations&lt;/code&gt; の&lt;/a&gt;クラスは上げることができ&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; のを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="210a0037ce73d1bfc67ee4b4b5e95490df8f8b6b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;INSERT&lt;/code&gt; or &lt;code&gt;REPLACE&lt;/code&gt; statement failed to insert the previous successful rowid is returned.</source>
          <target state="translated">&lt;code&gt;INSERT&lt;/code&gt; または &lt;code&gt;REPLACE&lt;/code&gt; ステートメントが前の正常なROWIDの挿入に失敗した場合は返されます。</target>
        </trans-unit>
        <trans-unit id="cf74d5b2f54438d18ff96c889c2efdf40add3ab4" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;__cleanenv&lt;/code&gt; keyword is set, &lt;em&gt;env_vars&lt;/em&gt; is used as a fresh environment.</source>
          <target state="translated">場合 &lt;code&gt;__cleanenv&lt;/code&gt; のキーワードが設定されている、&lt;em&gt;env_varsは、&lt;/em&gt;新鮮な環境として使用されています。</target>
        </trans-unit>
        <trans-unit id="7797779c313c0745d10542dc3e51baa071288853" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;binary_form&lt;/code&gt; parameter is &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt;, and a certificate was received from the peer, this method returns a &lt;a href=&quot;stdtypes#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; instance. If the certificate was not validated, the dict is empty. If the certificate was validated, it returns a dict with several keys, amongst them &lt;code&gt;subject&lt;/code&gt; (the principal for which the certificate was issued) and &lt;code&gt;issuer&lt;/code&gt; (the principal issuing the certificate). If a certificate contains an instance of the &lt;em&gt;Subject Alternative Name&lt;/em&gt; extension (see &lt;a href=&quot;https://tools.ietf.org/html/rfc3280.html&quot; id=&quot;index-13&quot;&gt;&lt;strong&gt;RFC 3280&lt;/strong&gt;&lt;/a&gt;), there will also be a &lt;code&gt;subjectAltName&lt;/code&gt; key in the dictionary.</source>
          <target state="translated">場合 &lt;code&gt;binary_form&lt;/code&gt; のパラメータである&lt;a href=&quot;constants#False&quot;&gt; &lt;code&gt;False&lt;/code&gt; &lt;/a&gt;、及び証明書がピアから受信し、この方法は、返し&lt;a href=&quot;stdtypes#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt;インスタンス。証明書が検証されなかった場合、dictは空です。証明書が検証された場合、 &lt;code&gt;subject&lt;/code&gt; （証明書が発行されたプリンシパル）と &lt;code&gt;issuer&lt;/code&gt; （証明書を発行したプリンシパル）の間でいくつかのキーを持つdictを返します。証明書に&lt;em&gt;サブジェクト代替名&lt;/em&gt;拡張のインスタンスが含まれている場合（&lt;a href=&quot;https://tools.ietf.org/html/rfc3280.html&quot; id=&quot;index-13&quot;&gt;&lt;strong&gt;RFC 3280を&lt;/strong&gt;&lt;/a&gt;参照）、ディクショナリにも &lt;code&gt;subjectAltName&lt;/code&gt; キーがあります。</target>
        </trans-unit>
        <trans-unit id="c2e0d519216a7d9523337363e10594cf657eace6" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;binary_form&lt;/code&gt; parameter is &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;, and a certificate was provided, this method returns the DER-encoded form of the entire certificate as a sequence of bytes, or &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; if the peer did not provide a certificate. Whether the peer provides a certificate depends on the SSL socket&amp;rsquo;s role:</source>
          <target state="translated">場合 &lt;code&gt;binary_form&lt;/code&gt; のパラメータである&lt;a href=&quot;constants#True&quot;&gt; &lt;code&gt;True&lt;/code&gt; &lt;/a&gt;、および証明書を提供し、この方法戻りバイトのシーケンスとして、または全体の証明書のDER符号化された形&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;ピアが証明書を提供しなかった場合。ピアが証明書を提供するかどうかは、SSLソケットの役割によって異なります。</target>
        </trans-unit>
        <trans-unit id="b7602209fb479da231610b89b7e98c9ce4312d1b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;default&lt;/code&gt; value is a string, the parser parses the value as if it were a command-line argument. In particular, the parser applies any &lt;a href=&quot;#type&quot;&gt;type&lt;/a&gt; conversion argument, if provided, before setting the attribute on the &lt;a href=&quot;#argparse.Namespace&quot;&gt;&lt;code&gt;Namespace&lt;/code&gt;&lt;/a&gt; return value. Otherwise, the parser uses the value as is:</source>
          <target state="translated">場合は &lt;code&gt;default&lt;/code&gt; 値が文字列であることは、コマンドライン引数であるかのように、パーサは値を解析します。特に、パーサーは、&lt;a href=&quot;#argparse.Namespace&quot;&gt; &lt;code&gt;Namespace&lt;/code&gt; &lt;/a&gt;戻り値に属性を設定する前に、提供されている場合は、&lt;a href=&quot;#type&quot;&gt;型&lt;/a&gt;変換引数を適用します。それ以外の場合、パーサーは値をそのまま使用します。</target>
        </trans-unit>
        <trans-unit id="524a418bcb1a0b57bbd955c0618848eef7130b81" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;errcheck&lt;/code&gt; function returns the argument tuple it receives unchanged, &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt; continues the normal processing it does on the output parameters. If you want to return a tuple of window coordinates instead of a &lt;code&gt;RECT&lt;/code&gt; instance, you can retrieve the fields in the function and return them instead, the normal processing will no longer take place:</source>
          <target state="translated">&lt;code&gt;errcheck&lt;/code&gt; 関数が受け取った引数タプルを変更せずに返す場合、&lt;a href=&quot;#module-ctypes&quot;&gt; &lt;code&gt;ctypes&lt;/code&gt; &lt;/a&gt;は出力パラメーターに対して行う通常の処理を続行します。 &lt;code&gt;RECT&lt;/code&gt; インスタンスの代わりにウィンドウ座標のタプルを返したい場合は、関数内のフィールドを取得してそれらを返すことができます。通常の処理は行われなくなります。</target>
        </trans-unit>
        <trans-unit id="bf2573a0870de1e1acad81d1f5302762db9e30a1" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;fcntl()&lt;/code&gt; fails, an &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">場合 &lt;code&gt;fcntl()&lt;/code&gt; 失敗し、&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; のが&lt;/a&gt;発生します。</target>
        </trans-unit>
        <trans-unit id="ed678ab7c2a7ff6be9a99eeaf17a3ebf9fd3c1d0" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;flock()&lt;/code&gt; fails, an &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">場合 &lt;code&gt;flock()&lt;/code&gt; 失敗し、&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; のの&lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="a7eec3c89612e0c25a2a5977559eba7c168d3900" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;freeze_support()&lt;/code&gt; line is omitted then trying to run the frozen executable will raise &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合 &lt;code&gt;freeze_support()&lt;/code&gt; ラインが省略されて凍結された実行可能ファイルを実行しようとすると発生します&lt;a href=&quot;exceptions#RuntimeError&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; がします&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ed2522d782a9625d0947133482aaae29a6c466db" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ioctl()&lt;/code&gt; fails, an &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">場合 &lt;code&gt;ioctl()&lt;/code&gt; 失敗し、&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; のの&lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="0cc2fbe72c3b4ad145fe3964a92c94ac6062f4e1" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;maintype&lt;/code&gt; is &lt;code&gt;multipart&lt;/code&gt;, raise a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;; otherwise look up a handler function based on the type of &lt;em&gt;obj&lt;/em&gt; (see next paragraph), call &lt;a href=&quot;email.message#email.message.EmailMessage.clear_content&quot;&gt;&lt;code&gt;clear_content()&lt;/code&gt;&lt;/a&gt; on the &lt;em&gt;msg&lt;/em&gt;, and call the handler function, passing through all arguments. The expectation is that the handler will transform and store &lt;em&gt;obj&lt;/em&gt; into &lt;em&gt;msg&lt;/em&gt;, possibly making other changes to &lt;em&gt;msg&lt;/em&gt; as well, such as adding various MIME headers to encode information needed to interpret the stored data.</source>
          <target state="translated">場合 &lt;code&gt;maintype&lt;/code&gt; がある &lt;code&gt;multipart&lt;/code&gt; 、調達&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 例外を&lt;/a&gt;。それ以外の場合は、&lt;em&gt;obj&lt;/em&gt;のタイプに基づいてハンドラー関数を検索し（次の段落を参照&lt;a href=&quot;email.message#email.message.EmailMessage.clear_content&quot;&gt; &lt;code&gt;clear_content()&lt;/code&gt; &lt;/a&gt;、&lt;em&gt;msg&lt;/em&gt;に対してclear_content（）を呼び出し、すべての引数を渡してハンドラー関数を呼び出します。期待されるのは、ハンドラーが&lt;em&gt;obj&lt;/em&gt;を&lt;em&gt;msgに&lt;/em&gt;変換して格納し、おそらく格納されたデータを解釈するために必要な情報をエンコードするさまざまなMIMEヘッダーを追加するなど、&lt;em&gt;msgに&lt;/em&gt;他の変更を加えることです。</target>
        </trans-unit>
        <trans-unit id="01aab64feb734e15541a9ef45d407a359bd7163d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;nargs&lt;/code&gt; keyword argument is not provided, the number of arguments consumed is determined by the &lt;a href=&quot;#action&quot;&gt;action&lt;/a&gt;. Generally this means a single command-line argument will be consumed and a single item (not a list) will be produced.</source>
          <target state="translated">場合 &lt;code&gt;nargs&lt;/code&gt; キーワード引数が提供されていない、引数の数は、によって決定される消費&lt;a href=&quot;#action&quot;&gt;行動&lt;/a&gt;。通常、これは単一のコマンドライン引数が消費され、単一のアイテム（リストではない）が生成されることを意味します。</target>
        </trans-unit>
        <trans-unit id="d61c61e67464c67c3680c4713d3809692520d001" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;policy&lt;/code&gt; defines certain headers to be unique (as the standard policies do), this method may raise a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; when an attempt is made to assign a value to such a header when one already exists. This behavior is intentional for consistency&amp;rsquo;s sake, but do not depend on it as we may choose to make such assignments do an automatic deletion of the existing header in the future.</source>
          <target state="translated">&lt;code&gt;policy&lt;/code&gt; 特定のヘッダーが一意であると定義されている場合（標準のポリシーと同様）、このメソッドは、ヘッダーが既に存在する場合にそのようなヘッダーに値を割り当てようとすると、&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; を&lt;/a&gt;発生させることがあります。この動作は、一貫性を保つために意図的なものですが、将来的に既存のヘッダーを自動的に削除するように割り当てることができるので、これに依存しないでください。</target>
        </trans-unit>
        <trans-unit id="4b0c4b939b714d8d4621edf9c00758ce14c62b46" translate="yes" xml:space="preserve">
          <source>If the &lt;em&gt;allow_fragments&lt;/em&gt; argument is false, fragment identifiers are not recognized. Instead, they are parsed as part of the path, parameters or query component, and &lt;code&gt;fragment&lt;/code&gt; is set to the empty string in the return value.</source>
          <target state="translated">&lt;em&gt;allow_fragments&lt;/em&gt;引数がfalseの場合、フラグメント識別子は認識されません。代わりに、それらはパス、パラメーター、またはクエリコンポーネントの一部として解析され、 &lt;code&gt;fragment&lt;/code&gt; は戻り値の空の文字列に設定されます。</target>
        </trans-unit>
        <trans-unit id="07fd1d70e19aeb308ff95aa96b168f877108f2f2" translate="yes" xml:space="preserve">
          <source>If the &lt;em&gt;data&lt;/em&gt; elements are not comparable, the data can be wrapped in a class that ignores the data item and only compares the priority number:</source>
          <target state="translated">&lt;em&gt;データ&lt;/em&gt;要素が比較できない場合、&lt;em&gt;データ&lt;/em&gt;項目を無視し、優先順位番号のみを比較するクラスでデータをラップできます。</target>
        </trans-unit>
        <trans-unit id="2ff12e160cec1aee3fa846e0341806c3c002aa1b" translate="yes" xml:space="preserve">
          <source>If the &lt;em&gt;decode_data&lt;/em&gt; constructor keyword is set to &lt;code&gt;True&lt;/code&gt;, the &lt;em&gt;data&lt;/em&gt; argument will be a unicode string. If it is set to &lt;code&gt;False&lt;/code&gt;, it will be a bytes object.</source>
          <target state="translated">場合&lt;em&gt;decode_data&lt;/em&gt;コンストラクタキーワードがに設定されている &lt;code&gt;True&lt;/code&gt; 、&lt;em&gt;データ&lt;/em&gt;引数はUnicode文字列になります。 &lt;code&gt;False&lt;/code&gt; に設定されている場合、それはbytesオブジェクトになります。</target>
        </trans-unit>
        <trans-unit id="b6fd4d95e538d8f47be51a60097509c8d1f0049b" translate="yes" xml:space="preserve">
          <source>If the &lt;em&gt;globals&lt;/em&gt; dictionary does not contain a value for the key &lt;code&gt;__builtins__&lt;/code&gt;, a reference to the dictionary of the built-in module &lt;a href=&quot;builtins#module-builtins&quot;&gt;&lt;code&gt;builtins&lt;/code&gt;&lt;/a&gt; is inserted under that key. That way you can control what builtins are available to the executed code by inserting your own &lt;code&gt;__builtins__&lt;/code&gt; dictionary into &lt;em&gt;globals&lt;/em&gt; before passing it to &lt;a href=&quot;#exec&quot;&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;グローバル&lt;/em&gt;ディクショナリにキー &lt;code&gt;__builtins__&lt;/code&gt; の値が含まれていない場合、&lt;a href=&quot;builtins#module-builtins&quot;&gt; &lt;code&gt;builtins&lt;/code&gt; &lt;/a&gt;モジュールbuiltinsのディクショナリへの参照がそのキーの下に挿入されます。このように、独自の &lt;code&gt;__builtins__&lt;/code&gt; ディクショナリを&lt;a href=&quot;#exec&quot;&gt; &lt;code&gt;exec()&lt;/code&gt; &lt;/a&gt;に渡す前に&lt;em&gt;グローバル&lt;/em&gt;に挿入することにより、実行されたコードで利用できる組み込み関数を制御できます。</target>
        </trans-unit>
        <trans-unit id="069dacc3747df8898ad29dd490b8b3d318fd8df1" translate="yes" xml:space="preserve">
          <source>If the &lt;em&gt;lock&lt;/em&gt; argument is given and not &lt;code&gt;None&lt;/code&gt;, it must be a &lt;a href=&quot;#threading.Lock&quot;&gt;&lt;code&gt;Lock&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#threading.RLock&quot;&gt;&lt;code&gt;RLock&lt;/code&gt;&lt;/a&gt; object, and it is used as the underlying lock. Otherwise, a new &lt;a href=&quot;#threading.RLock&quot;&gt;&lt;code&gt;RLock&lt;/code&gt;&lt;/a&gt; object is created and used as the underlying lock.</source>
          <target state="translated">場合は&lt;em&gt;ロック&lt;/em&gt;引数が与えられていないとされていない &lt;code&gt;None&lt;/code&gt; 、それがなければなりません&lt;a href=&quot;#threading.Lock&quot;&gt; &lt;code&gt;Lock&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#threading.RLock&quot;&gt; &lt;code&gt;RLock&lt;/code&gt; &lt;/a&gt;オブジェクト、およびそれが根底にあるロックとして使用されています。それ以外の場合は、新しい&lt;a href=&quot;#threading.RLock&quot;&gt; &lt;code&gt;RLock&lt;/code&gt; &lt;/a&gt;オブジェクトが作成され、基になるロックとして使用されます。</target>
        </trans-unit>
        <trans-unit id="2b6ebb4583fd8191695e04b7d39b1f581cf29da7" translate="yes" xml:space="preserve">
          <source>If the &lt;em&gt;name&lt;/em&gt; argument is provided and not &lt;code&gt;None&lt;/code&gt;, it is set as the name of the task using &lt;a href=&quot;asyncio-task#asyncio.Task.set_name&quot;&gt;&lt;code&gt;Task.set_name()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合は&lt;em&gt;名前の&lt;/em&gt;引数が指定されていないとされていない &lt;code&gt;None&lt;/code&gt; 、それが使用して、タスクの名前として設定されている&lt;a href=&quot;asyncio-task#asyncio.Task.set_name&quot;&gt; &lt;code&gt;Task.set_name()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="944dd20e7d4a05557cec3a977a23d9d4d3f2d8ce" translate="yes" xml:space="preserve">
          <source>If the &lt;em&gt;names&lt;/em&gt; parameter is given, it must be a sequence containing the names of functions you want to install in the builtins namespace in addition to &lt;code&gt;_()&lt;/code&gt;. Supported names are &lt;code&gt;'gettext'&lt;/code&gt;, &lt;code&gt;'ngettext'&lt;/code&gt;, &lt;code&gt;'pgettext'&lt;/code&gt;, &lt;code&gt;'npgettext'&lt;/code&gt;, &lt;code&gt;'lgettext'&lt;/code&gt;, and &lt;code&gt;'lngettext'&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;names&lt;/em&gt;パラメータを指定する場合は、 &lt;code&gt;_()&lt;/code&gt; に加えて組み込みの名前空間にインストールする関数の名前を含むシーケンスである必要があります。サポートされている名前は、 &lt;code&gt;'gettext'&lt;/code&gt; 、 &lt;code&gt;'ngettext'&lt;/code&gt; 、 &lt;code&gt;'pgettext'&lt;/code&gt; 、 &lt;code&gt;'npgettext'&lt;/code&gt; 、 &lt;code&gt;'lgettext'&lt;/code&gt; 、および &lt;code&gt;'lngettext'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="158a36858ed9af1b9e9c3d28c384cc021e46769c" translate="yes" xml:space="preserve">
          <source>If the &lt;em&gt;optimize&lt;/em&gt; parameter to &lt;a href=&quot;#zipfile.PyZipFile&quot;&gt;&lt;code&gt;PyZipFile&lt;/code&gt;&lt;/a&gt; was &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;2&lt;/code&gt;, only files with that optimization level (see &lt;a href=&quot;functions#compile&quot;&gt;&lt;code&gt;compile()&lt;/code&gt;&lt;/a&gt;) are added to the archive, compiling if necessary.</source>
          <target state="translated">場合は&lt;em&gt;最適化&lt;/em&gt;へのパラメータ&lt;a href=&quot;#zipfile.PyZipFile&quot;&gt; &lt;code&gt;PyZipFile&lt;/code&gt; が&lt;/a&gt;いた &lt;code&gt;0&lt;/code&gt; 、 &lt;code&gt;1&lt;/code&gt; または &lt;code&gt;2&lt;/code&gt; 、その最適化レベルを持つファイルだけが（参照&lt;a href=&quot;functions#compile&quot;&gt; &lt;code&gt;compile()&lt;/code&gt; &lt;/a&gt;）必要に応じてコンパイル、アーカイブに追加されます。</target>
        </trans-unit>
        <trans-unit id="7d5c62ff88707e4df1f101083878379244687d02" translate="yes" xml:space="preserve">
          <source>If the &lt;em&gt;optimize&lt;/em&gt; parameter to &lt;a href=&quot;#zipfile.PyZipFile&quot;&gt;&lt;code&gt;PyZipFile&lt;/code&gt;&lt;/a&gt; was not given or &lt;code&gt;-1&lt;/code&gt;, the corresponding file is a &lt;code&gt;*.pyc&lt;/code&gt; file, compiling if necessary.</source>
          <target state="translated">&lt;a href=&quot;#zipfile.PyZipFile&quot;&gt; &lt;code&gt;PyZipFile&lt;/code&gt; &lt;/a&gt;への&lt;em&gt;最適化&lt;/em&gt;パラメータが指定されていないか &lt;code&gt;-1&lt;/code&gt; の場合、対応するファイルは &lt;code&gt;*.pyc&lt;/code&gt; ファイルであり、必要に応じてコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="c7cdfc5e325d7266ce128da3b51f1e8b3f9943d8" translate="yes" xml:space="preserve">
          <source>If the &lt;em&gt;password&lt;/em&gt; argument is not specified and a password is required, OpenSSL&amp;rsquo;s built-in password prompting mechanism will be used to interactively prompt the user for a password.</source>
          <target state="translated">場合は&lt;em&gt;、パスワードの&lt;/em&gt;引数が指定されていないとパスワードが要求され、OpenSSLの内蔵のパスワードプロンプトのメカニズムは、パスワードの対話的プロンプトユーザーに使用されます。</target>
        </trans-unit>
        <trans-unit id="35fcb585a20584b556f4e162e5309c98983b0178" translate="yes" xml:space="preserve">
          <source>If the &lt;em&gt;path&lt;/em&gt; is a string object (directly or indirectly through a &lt;a href=&quot;#os.PathLike&quot;&gt;&lt;code&gt;PathLike&lt;/code&gt;&lt;/a&gt; interface), the result will also be a string object, and the call may raise a UnicodeDecodeError. If the &lt;em&gt;path&lt;/em&gt; is a bytes object (direct or indirectly), the result will be a bytes object.</source>
          <target state="translated">場合&lt;em&gt;パスは&lt;/em&gt;、文字列オブジェクトが（直接的または間接的に介している&lt;a href=&quot;#os.PathLike&quot;&gt; &lt;code&gt;PathLike&lt;/code&gt; の&lt;/a&gt;インターフェース）、結果はまた、文字列オブジェクトになり、そしてコールがUnicodeDecodeErrorを上げることができます。場合&lt;em&gt;パスが&lt;/em&gt;オブジェクト（直接または間接的に）バイトであり、結果は、バイトのオブジェクトであろう。</target>
        </trans-unit>
        <trans-unit id="8c9066b80c3d8a541423631fefca4e57b368ec7b" translate="yes" xml:space="preserve">
          <source>If the &lt;em&gt;prompt&lt;/em&gt; argument is present, it is written to standard output without a trailing newline. The function then reads a line from input, converts it to a string (stripping a trailing newline), and returns that. When EOF is read, &lt;a href=&quot;exceptions#EOFError&quot;&gt;&lt;code&gt;EOFError&lt;/code&gt;&lt;/a&gt; is raised. Example:</source>
          <target state="translated">&lt;em&gt;プロンプト&lt;/em&gt;引数が存在する場合、後続の改行なしで標準出力に書き込まれます。次に、関数は入力から行を読み取り、それを文字列に変換し（末尾の改行を削除）、それを返します。EOFが読み取られると、&lt;a href=&quot;exceptions#EOFError&quot;&gt; &lt;code&gt;EOFError&lt;/code&gt; &lt;/a&gt;が発生します。例：</target>
        </trans-unit>
        <trans-unit id="93285696a22411d5d2e8a7f6363aa84855969bd3" translate="yes" xml:space="preserve">
          <source>If the &lt;em&gt;resetids&lt;/em&gt; argument is &lt;code&gt;True&lt;/code&gt; it will reset the effective UID and GID of the child to the real UID and GID of the parent process. If the argument is &lt;code&gt;False&lt;/code&gt;, then the child retains the effective UID and GID of the parent. In either case, if the set-user-ID and set-group-ID permission bits are enabled on the executable file, their effect will override the setting of the effective UID and GID. This argument corresponds to the C library &lt;code&gt;POSIX_SPAWN_RESETIDS&lt;/code&gt; flag.</source>
          <target state="translated">&lt;em&gt;resetids&lt;/em&gt;引数が &lt;code&gt;True&lt;/code&gt; の場合、子の実効UIDおよびGIDを親プロセスの実際のUIDおよびGIDにリセットします。引数が &lt;code&gt;False&lt;/code&gt; の場合、子は親の有効なUIDおよびGIDを保持します。どちらの場合も、実行可能ファイルでset-user-IDおよびset-group-ID許可ビットが有効になっている場合、それらの効果は有効なUIDおよびGIDの設定をオーバーライドします。この引数は、Cライブラリの &lt;code&gt;POSIX_SPAWN_RESETIDS&lt;/code&gt; フラグに対応しています。</target>
        </trans-unit>
        <trans-unit id="88919bba2afc8f184e2a327acf142c1486867e0d" translate="yes" xml:space="preserve">
          <source>If the &lt;em&gt;setsid&lt;/em&gt; argument is &lt;code&gt;True&lt;/code&gt;, it will create a new session ID for &lt;code&gt;posix_spawn&lt;/code&gt;. &lt;em&gt;setsid&lt;/em&gt; requires &lt;code&gt;POSIX_SPAWN_SETSID&lt;/code&gt; or &lt;code&gt;POSIX_SPAWN_SETSID_NP&lt;/code&gt; flag. Otherwise, &lt;a href=&quot;exceptions#NotImplementedError&quot;&gt;&lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">&lt;em&gt;setsid&lt;/em&gt;引数が &lt;code&gt;True&lt;/code&gt; の場合、 &lt;code&gt;posix_spawn&lt;/code&gt; の新しいセッションIDが作成されます。&lt;em&gt;setsidに&lt;/em&gt;は、 &lt;code&gt;POSIX_SPAWN_SETSID&lt;/code&gt; または &lt;code&gt;POSIX_SPAWN_SETSID_NP&lt;/code&gt; フラグが必要です。それ以外の場合、&lt;a href=&quot;exceptions#NotImplementedError&quot;&gt; &lt;code&gt;NotImplementedError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="2d24ec0d17c1f7e1a0a329ec520394941ae2b010" translate="yes" xml:space="preserve">
          <source>If the &lt;em&gt;stderr&lt;/em&gt; argument was &lt;a href=&quot;#subprocess.PIPE&quot;&gt;&lt;code&gt;PIPE&lt;/code&gt;&lt;/a&gt;, this attribute is a readable stream object as returned by &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt;. Reading from the stream provides error output from the child process. If the &lt;em&gt;encoding&lt;/em&gt; or &lt;em&gt;errors&lt;/em&gt; arguments were specified or the &lt;em&gt;universal_newlines&lt;/em&gt; argument was &lt;code&gt;True&lt;/code&gt;, the stream is a text stream, otherwise it is a byte stream. If the &lt;em&gt;stderr&lt;/em&gt; argument was not &lt;a href=&quot;#subprocess.PIPE&quot;&gt;&lt;code&gt;PIPE&lt;/code&gt;&lt;/a&gt;, this attribute is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;stderr&lt;/em&gt;引数が&lt;a href=&quot;#subprocess.PIPE&quot;&gt; &lt;code&gt;PIPE&lt;/code&gt; の&lt;/a&gt;場合、この属性は&lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;によって返される読み取り可能なストリームオブジェクトです。ストリームから読み取ると、子プロセスからのエラー出力が提供されます。場合&lt;em&gt;のエンコード&lt;/em&gt;や&lt;em&gt;エラー&lt;/em&gt;引数が指定されたりして&lt;em&gt;universal_newlinesの&lt;/em&gt;引数がした &lt;code&gt;True&lt;/code&gt; 、ストリームは、それ以外の場合はバイトストリームで、テキスト・ストリームです。&lt;em&gt;stderr&lt;/em&gt;引数が&lt;a href=&quot;#subprocess.PIPE&quot;&gt; &lt;code&gt;PIPE&lt;/code&gt; &lt;/a&gt;でない場合、この属性は &lt;code&gt;None&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1e6be0106d84be33c234e54aaea99852564b5e3c" translate="yes" xml:space="preserve">
          <source>If the &lt;em&gt;stdin&lt;/em&gt; argument was &lt;a href=&quot;#subprocess.PIPE&quot;&gt;&lt;code&gt;PIPE&lt;/code&gt;&lt;/a&gt;, this attribute is a writeable stream object as returned by &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt;. If the &lt;em&gt;encoding&lt;/em&gt; or &lt;em&gt;errors&lt;/em&gt; arguments were specified or the &lt;em&gt;universal_newlines&lt;/em&gt; argument was &lt;code&gt;True&lt;/code&gt;, the stream is a text stream, otherwise it is a byte stream. If the &lt;em&gt;stdin&lt;/em&gt; argument was not &lt;a href=&quot;#subprocess.PIPE&quot;&gt;&lt;code&gt;PIPE&lt;/code&gt;&lt;/a&gt;, this attribute is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;stdin&lt;/em&gt;引数が&lt;a href=&quot;#subprocess.PIPE&quot;&gt; &lt;code&gt;PIPE&lt;/code&gt; の&lt;/a&gt;場合、この属性は&lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;によって返される書き込み可能なストリームオブジェクトです。場合&lt;em&gt;のエンコード&lt;/em&gt;や&lt;em&gt;エラー&lt;/em&gt;引数が指定されたりして&lt;em&gt;universal_newlinesの&lt;/em&gt;引数がした &lt;code&gt;True&lt;/code&gt; 、ストリームは、それ以外の場合はバイトストリームで、テキスト・ストリームです。&lt;em&gt;stdin&lt;/em&gt;引数が&lt;a href=&quot;#subprocess.PIPE&quot;&gt; &lt;code&gt;PIPE&lt;/code&gt; &lt;/a&gt;でない場合、この属性は &lt;code&gt;None&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ec355cf89b9dc73b02f80f0df2eaf169cc492684" translate="yes" xml:space="preserve">
          <source>If the &lt;em&gt;stdout&lt;/em&gt; argument was &lt;a href=&quot;#subprocess.PIPE&quot;&gt;&lt;code&gt;PIPE&lt;/code&gt;&lt;/a&gt;, this attribute is a readable stream object as returned by &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt;. Reading from the stream provides output from the child process. If the &lt;em&gt;encoding&lt;/em&gt; or &lt;em&gt;errors&lt;/em&gt; arguments were specified or the &lt;em&gt;universal_newlines&lt;/em&gt; argument was &lt;code&gt;True&lt;/code&gt;, the stream is a text stream, otherwise it is a byte stream. If the &lt;em&gt;stdout&lt;/em&gt; argument was not &lt;a href=&quot;#subprocess.PIPE&quot;&gt;&lt;code&gt;PIPE&lt;/code&gt;&lt;/a&gt;, this attribute is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;stdout&lt;/em&gt;引数が&lt;a href=&quot;#subprocess.PIPE&quot;&gt; &lt;code&gt;PIPE&lt;/code&gt; の&lt;/a&gt;場合、この属性は&lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;によって返される読み取り可能なストリームオブジェクトです。ストリームからの読み取りは、子プロセスからの出力を提供します。場合&lt;em&gt;のエンコード&lt;/em&gt;や&lt;em&gt;エラー&lt;/em&gt;引数が指定されたりして&lt;em&gt;universal_newlinesの&lt;/em&gt;引数がした &lt;code&gt;True&lt;/code&gt; 、ストリームは、それ以外の場合はバイトストリームで、テキスト・ストリームです。&lt;em&gt;stdout&lt;/em&gt;引数が&lt;a href=&quot;#subprocess.PIPE&quot;&gt; &lt;code&gt;PIPE&lt;/code&gt; &lt;/a&gt;でなかった場合、この属性は &lt;code&gt;None&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="60dd2e899bc85f2db36a0109aa802d1a7f4ce7a0" translate="yes" xml:space="preserve">
          <source>If the &lt;em&gt;url&lt;/em&gt; uses the &lt;code&gt;http:&lt;/code&gt; scheme identifier, the optional &lt;em&gt;data&lt;/em&gt; argument may be given to specify a &lt;code&gt;POST&lt;/code&gt; request (normally the request type is &lt;code&gt;GET&lt;/code&gt;). The &lt;em&gt;data&lt;/em&gt; argument must be a bytes object in standard &lt;em&gt;application/x-www-form-urlencoded&lt;/em&gt; format; see the &lt;a href=&quot;urllib.parse#urllib.parse.urlencode&quot;&gt;&lt;code&gt;urllib.parse.urlencode()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">&lt;em&gt;URL&lt;/em&gt;が &lt;code&gt;http:&lt;/code&gt; スキーム識別子を使用する場合、オプションの&lt;em&gt;データ&lt;/em&gt;引数を指定して &lt;code&gt;POST&lt;/code&gt; リクエストを指定できます（通常、リクエストタイプは &lt;code&gt;GET&lt;/code&gt; です）。&lt;em&gt;データ&lt;/em&gt;引数は、標準のバイトのオブジェクトでなければならない&lt;em&gt;アプリケーション/ x-www-form-urlencodedで&lt;/em&gt;フォーマット。&lt;a href=&quot;urllib.parse#urllib.parse.urlencode&quot;&gt; &lt;code&gt;urllib.parse.urlencode()&lt;/code&gt; &lt;/a&gt;関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="294c59bd568e04803a80acb61e134333ab0b073c" translate="yes" xml:space="preserve">
          <source>If the &lt;em&gt;url&lt;/em&gt; uses the &lt;code&gt;http:&lt;/code&gt; scheme identifier, the optional &lt;em&gt;data&lt;/em&gt; argument may be given to specify a &lt;code&gt;POST&lt;/code&gt; request (normally the request type is &lt;code&gt;GET&lt;/code&gt;). The &lt;em&gt;data&lt;/em&gt; argument must in standard &lt;em&gt;application/x-www-form-urlencoded&lt;/em&gt; format; see the &lt;a href=&quot;urllib.parse#urllib.parse.urlencode&quot;&gt;&lt;code&gt;urllib.parse.urlencode()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">&lt;em&gt;URL&lt;/em&gt;が &lt;code&gt;http:&lt;/code&gt; スキーム識別子を使用する場合、オプションの&lt;em&gt;データ&lt;/em&gt;引数を指定して &lt;code&gt;POST&lt;/code&gt; リクエストを指定できます（通常、リクエストタイプは &lt;code&gt;GET&lt;/code&gt; です）。&lt;em&gt;データ&lt;/em&gt;標準で引数必須&lt;em&gt;アプリケーション/ x-www-form-urlencodedで&lt;/em&gt;フォーマット。&lt;a href=&quot;urllib.parse#urllib.parse.urlencode&quot;&gt; &lt;code&gt;urllib.parse.urlencode()&lt;/code&gt; &lt;/a&gt;関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="9974f7a3aebe3f3ce47175d7359b29d02772cfa6" translate="yes" xml:space="preserve">
          <source>If the &lt;em&gt;utc&lt;/em&gt; argument is true, times in UTC will be used; otherwise local time is used.</source>
          <target state="translated">&lt;em&gt;utc&lt;/em&gt;引数がtrueの場合、UTCの時間が使用されます。それ以外の場合は、現地時間が使用されます。</target>
        </trans-unit>
        <trans-unit id="b84602b7fa18863b22e6dbcff32969883dda4684" translate="yes" xml:space="preserve">
          <source>If the &lt;em&gt;writeback&lt;/em&gt; parameter is &lt;code&gt;True&lt;/code&gt;, the object will hold a cache of all entries accessed and write them back to the &lt;em&gt;dict&lt;/em&gt; at sync and close times. This allows natural operations on mutable entries, but can consume much more memory and make sync and close take a long time.</source>
          <target state="translated">場合は&lt;em&gt;ライトバックの&lt;/em&gt;パラメータがある &lt;code&gt;True&lt;/code&gt; 、オブジェクトがアクセスされたすべてのエントリのキャッシュを保持し、バックにそれらを書き込みます&lt;em&gt;dictの&lt;/em&gt;同期と近い時期に。これにより、変更可能なエントリでの自然な操作が可能になりますが、より多くのメモリを消費し、同期とクローズに長時間かかる場合があります。</target>
        </trans-unit>
        <trans-unit id="c144dbd6eb2a2ec5c9464d6a3b5b49fd560d35b3" translate="yes" xml:space="preserve">
          <source>If the &lt;strong&gt;parse&lt;/strong&gt; attribute is omitted, it defaults to &amp;ldquo;xml&amp;rdquo;. The href attribute is required.</source>
          <target state="translated">場合は&lt;strong&gt;、解析&lt;/strong&gt;「XML」に属性が省略され、それがデフォルトになります。href属性は必須です。</target>
        </trans-unit>
        <trans-unit id="651912b3d40236c9ca01d4f642c00c2265e6c0e1" translate="yes" xml:space="preserve">
          <source>If the Future has been &lt;em&gt;cancelled&lt;/em&gt;, this method raises a &lt;a href=&quot;asyncio-exceptions#asyncio.CancelledError&quot;&gt;&lt;code&gt;CancelledError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">Futureが&lt;em&gt;キャンセル&lt;/em&gt;さ&lt;em&gt;れた&lt;/em&gt;場合、このメソッドは&lt;a href=&quot;asyncio-exceptions#asyncio.CancelledError&quot;&gt; &lt;code&gt;CancelledError&lt;/code&gt; &lt;/a&gt;例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="6620141bffb844ff7e0a325c37437088a6fc0bb4" translate="yes" xml:space="preserve">
          <source>If the Future is &lt;em&gt;done&lt;/em&gt; and has a result set by the &lt;a href=&quot;#asyncio.Future.set_result&quot;&gt;&lt;code&gt;set_result()&lt;/code&gt;&lt;/a&gt; method, the result value is returned.</source>
          <target state="translated">Futureが&lt;em&gt;完了&lt;/em&gt;し、&lt;a href=&quot;#asyncio.Future.set_result&quot;&gt; &lt;code&gt;set_result()&lt;/code&gt; &lt;/a&gt;メソッドによって結果セットが設定されている場合、結果値が返されます。</target>
        </trans-unit>
        <trans-unit id="e0644b75daac5e15661852c684cb262de9f51c89" translate="yes" xml:space="preserve">
          <source>If the Future is &lt;em&gt;done&lt;/em&gt; and has an exception set by the &lt;a href=&quot;#asyncio.Future.set_exception&quot;&gt;&lt;code&gt;set_exception()&lt;/code&gt;&lt;/a&gt; method, this method raises the exception.</source>
          <target state="translated">Futureが&lt;em&gt;完了&lt;/em&gt;し、&lt;a href=&quot;#asyncio.Future.set_exception&quot;&gt; &lt;code&gt;set_exception()&lt;/code&gt; &lt;/a&gt;メソッドによって設定された例外がある場合、このメソッドは例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="1195f6304df98cd2d3bc86ac4e83f5d2f868771a" translate="yes" xml:space="preserve">
          <source>If the Future is already &lt;em&gt;done&lt;/em&gt; or &lt;em&gt;cancelled&lt;/em&gt;, return &lt;code&gt;False&lt;/code&gt;. Otherwise, change the Future&amp;rsquo;s state to &lt;em&gt;cancelled&lt;/em&gt;, schedule the callbacks, and return &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">Futureがすでに&lt;em&gt;完了&lt;/em&gt;または&lt;em&gt;キャンセルされ&lt;/em&gt;て&lt;em&gt;いる&lt;/em&gt;場合は、 &lt;code&gt;False&lt;/code&gt; を返します。それ以外の場合は、Futureの状態を&lt;em&gt;cancelled&lt;/em&gt;に変更し、コールバックをスケジュールして、 &lt;code&gt;True&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="37006e9f079c3accc6d5f6040b789291ba917d94" translate="yes" xml:space="preserve">
          <source>If the Future is already &lt;em&gt;done&lt;/em&gt; when this method is called, the callback is scheduled with &lt;a href=&quot;asyncio-eventloop#asyncio.loop.call_soon&quot;&gt;&lt;code&gt;loop.call_soon()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このメソッドが呼び出さ&lt;em&gt;れた&lt;/em&gt;ときにFutureがすでに&lt;em&gt;完了&lt;/em&gt;して&lt;em&gt;いる&lt;/em&gt;場合、コールバックは&lt;a href=&quot;asyncio-eventloop#asyncio.loop.call_soon&quot;&gt; &lt;code&gt;loop.call_soon()&lt;/code&gt; で&lt;/a&gt;スケジュールされます。</target>
        </trans-unit>
        <trans-unit id="cb914681d6d5d5b08170de81c66e21d60e415ba0" translate="yes" xml:space="preserve">
          <source>If the Future isn&amp;rsquo;t &lt;em&gt;done&lt;/em&gt; yet, this method raises an &lt;a href=&quot;asyncio-exceptions#asyncio.InvalidStateError&quot;&gt;&lt;code&gt;InvalidStateError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">Futureがまだ&lt;em&gt;完了して&lt;/em&gt;いない場合、このメソッドは&lt;a href=&quot;asyncio-exceptions#asyncio.InvalidStateError&quot;&gt; &lt;code&gt;InvalidStateError&lt;/code&gt; &lt;/a&gt;例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="81ccf8aacb015ef04d4641484c8369a9b1dc7178" translate="yes" xml:space="preserve">
          <source>If the Future&amp;rsquo;s result isn&amp;rsquo;t yet available, this method raises a &lt;a href=&quot;asyncio-exceptions#asyncio.InvalidStateError&quot;&gt;&lt;code&gt;InvalidStateError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">Futureの結果がまだ利用できない場合、このメソッドは&lt;a href=&quot;asyncio-exceptions#asyncio.InvalidStateError&quot;&gt; &lt;code&gt;InvalidStateError&lt;/code&gt; &lt;/a&gt;例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="2b7f6762700d8fee47524d6de578cf0f5d964de0" translate="yes" xml:space="preserve">
          <source>If the IPv4 address string passed to this function is invalid, &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; will be raised. Note that exactly what is valid depends on the underlying C implementation of &lt;code&gt;inet_aton()&lt;/code&gt;.</source>
          <target state="translated">この関数に渡されたIPv4アドレス文字列が無効な場合、&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;が発生します。正確に何が有効であるかは、 &lt;code&gt;inet_aton()&lt;/code&gt; の基礎となるC実装に依存することに注意してください。</target>
        </trans-unit>
        <trans-unit id="560fe43f47d62379a66ce9688e16e4014a73fc5a" translate="yes" xml:space="preserve">
          <source>If the Python installation has SSL support (i.e., if the &lt;a href=&quot;ssl#module-ssl&quot;&gt;&lt;code&gt;ssl&lt;/code&gt;&lt;/a&gt; module can be imported), &lt;a href=&quot;#urllib.request.HTTPSHandler&quot;&gt;&lt;code&gt;HTTPSHandler&lt;/code&gt;&lt;/a&gt; will also be added.</source>
          <target state="translated">PythonのインストールでSSLがサポートされている場合（つまり、&lt;a href=&quot;ssl#module-ssl&quot;&gt; &lt;code&gt;ssl&lt;/code&gt; &lt;/a&gt;モジュールをインポートできる場合）、&lt;a href=&quot;#urllib.request.HTTPSHandler&quot;&gt; &lt;code&gt;HTTPSHandler&lt;/code&gt; &lt;/a&gt;も追加されます。</target>
        </trans-unit>
        <trans-unit id="3ea0b3ed7f3baf4db7002928837be7003ffe5eb0" translate="yes" xml:space="preserve">
          <source>If the SIGINT signal generated by</source>
          <target state="translated">によって生成されたSIGINT信号が</target>
        </trans-unit>
        <trans-unit id="ca9dca35c700b2a4f039a704ed976b0b70c0a61f" translate="yes" xml:space="preserve">
          <source>If the Task has been &lt;em&gt;cancelled&lt;/em&gt;, this method raises a &lt;a href=&quot;asyncio-exceptions#asyncio.CancelledError&quot;&gt;&lt;code&gt;CancelledError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">タスクが&lt;em&gt;キャンセル&lt;/em&gt;さ&lt;em&gt;れた&lt;/em&gt;場合、このメソッドは&lt;a href=&quot;asyncio-exceptions#asyncio.CancelledError&quot;&gt; &lt;code&gt;CancelledError&lt;/code&gt; &lt;/a&gt;例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="de231fa26bffd71d36d4fadee99f70cdd007208c" translate="yes" xml:space="preserve">
          <source>If the Task is &lt;em&gt;done&lt;/em&gt;, the result of the wrapped coroutine is returned (or if the coroutine raised an exception, that exception is re-raised.)</source>
          <target state="translated">タスクが&lt;em&gt;完了した&lt;/em&gt;場合、ラップされたコルーチンの結果が返されます（またはコルーチンが例外を発生させた場合、その例外は再発生します）。</target>
        </trans-unit>
        <trans-unit id="c6606fc1940874e65aa19f560ba1745a72e10a6e" translate="yes" xml:space="preserve">
          <source>If the Task isn&amp;rsquo;t &lt;em&gt;done&lt;/em&gt; yet, this method raises an &lt;a href=&quot;asyncio-exceptions#asyncio.InvalidStateError&quot;&gt;&lt;code&gt;InvalidStateError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">タスクがまだ&lt;em&gt;完了して&lt;/em&gt;いない場合、このメソッドは&lt;a href=&quot;asyncio-exceptions#asyncio.InvalidStateError&quot;&gt; &lt;code&gt;InvalidStateError&lt;/code&gt; &lt;/a&gt;例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="1dc46f1d10f9c96a479d508e9267096933ed6fa6" translate="yes" xml:space="preserve">
          <source>If the Task&amp;rsquo;s result isn&amp;rsquo;t yet available, this method raises a &lt;a href=&quot;asyncio-exceptions#asyncio.InvalidStateError&quot;&gt;&lt;code&gt;InvalidStateError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">タスクの結果がまだ利用できない場合、このメソッドは&lt;a href=&quot;asyncio-exceptions#asyncio.InvalidStateError&quot;&gt; &lt;code&gt;InvalidStateError&lt;/code&gt; &lt;/a&gt;例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="0d2428fdf8b60d8010dea0a01f7c47a9ea2e0739" translate="yes" xml:space="preserve">
          <source>If the XML input has &lt;a href=&quot;https://en.wikipedia.org/wiki/XML_namespace&quot;&gt;namespaces&lt;/a&gt;, tags and attributes with prefixes in the form &lt;code&gt;prefix:sometag&lt;/code&gt; get expanded to &lt;code&gt;{uri}sometag&lt;/code&gt; where the &lt;em&gt;prefix&lt;/em&gt; is replaced by the full &lt;em&gt;URI&lt;/em&gt;. Also, if there is a &lt;a href=&quot;https://www.w3.org/TR/xml-names/#defaulting&quot;&gt;default namespace&lt;/a&gt;, that full URI gets prepended to all of the non-prefixed tags.</source>
          <target state="translated">XML入力に&lt;a href=&quot;https://en.wikipedia.org/wiki/XML_namespace&quot;&gt;名前空間&lt;/a&gt;がある場合、 &lt;code&gt;prefix:sometag&lt;/code&gt; という形式のプレフィックスを持つタグと属性は、 &lt;code&gt;{uri}sometag&lt;/code&gt; に展開され、&lt;em&gt;プレフィックス&lt;/em&gt;は完全な&lt;em&gt;URIに&lt;/em&gt;置き換えられます。また、&lt;a href=&quot;https://www.w3.org/TR/xml-names/#defaulting&quot;&gt;デフォルトの名前空間&lt;/a&gt;がある場合、その完全なURIが接頭辞のないすべてのタグの前に付加されます。</target>
        </trans-unit>
        <trans-unit id="1035788874be82f93e34090a34131ddf3cbc5486" translate="yes" xml:space="preserve">
          <source>If the amount of data read exceeds the configured stream limit, a &lt;a href=&quot;asyncio-exceptions#asyncio.LimitOverrunError&quot;&gt;&lt;code&gt;LimitOverrunError&lt;/code&gt;&lt;/a&gt; exception is raised, and the data is left in the internal buffer and can be read again.</source>
          <target state="translated">読み取られたデータの量が構成されたストリーム制限を超えると、&lt;a href=&quot;asyncio-exceptions#asyncio.LimitOverrunError&quot;&gt; &lt;code&gt;LimitOverrunError&lt;/code&gt; &lt;/a&gt;例外が発生し、データは内部バッファーに残り、再度読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="9b49e74988c341dbee66d98c70300f05b412e8ad" translate="yes" xml:space="preserve">
          <source>If the application knows the character encoding of the byte stream, it should set it with the setEncoding method.</source>
          <target state="translated">アプリケーションがバイトストリームの文字エンコーディングを知っている場合は、setEncodingメソッドで設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="3fa82cef5f28606b6fd2a9d2c0bbbdbbb88b6591" translate="yes" xml:space="preserve">
          <source>If the argument &lt;em&gt;alter_sys&lt;/em&gt; is supplied and evaluates to &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;, then &lt;code&gt;sys.argv[0]&lt;/code&gt; is updated with the value of &lt;code&gt;__file__&lt;/code&gt; and &lt;code&gt;sys.modules[__name__]&lt;/code&gt; is updated with a temporary module object for the module being executed. Both &lt;code&gt;sys.argv[0]&lt;/code&gt; and &lt;code&gt;sys.modules[__name__]&lt;/code&gt; are restored to their original values before the function returns.</source>
          <target state="translated">引数の場合&lt;em&gt;alter_sysが&lt;/em&gt;供給さに評価される&lt;a href=&quot;constants#True&quot;&gt; &lt;code&gt;True&lt;/code&gt; &lt;/a&gt;、その後、 &lt;code&gt;sys.argv[0]&lt;/code&gt; の値で更新され &lt;code&gt;__file__&lt;/code&gt; と &lt;code&gt;sys.modules[__name__]&lt;/code&gt; 実行されているモジュールのための一時的なモジュールオブジェクトで更新されます。 &lt;code&gt;sys.argv[0]&lt;/code&gt; と &lt;code&gt;sys.modules[__name__]&lt;/code&gt; はどちらも、関数が戻る前に元の値に復元されます。</target>
        </trans-unit>
        <trans-unit id="a5411ed7af975d74d9bde61eea8619af34a7725c" translate="yes" xml:space="preserve">
          <source>If the argument is a &lt;a href=&quot;asyncio-task#coroutine&quot;&gt;coroutine object&lt;/a&gt; it is implicitly scheduled to run as a &lt;a href=&quot;asyncio-task#asyncio.Task&quot;&gt;&lt;code&gt;asyncio.Task&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数が&lt;a href=&quot;asyncio-task#coroutine&quot;&gt;コルーチンオブジェクトの&lt;/a&gt;場合、暗黙的に&lt;a href=&quot;asyncio-task#asyncio.Task&quot;&gt; &lt;code&gt;asyncio.Task&lt;/code&gt; &lt;/a&gt;として実行するようにスケジュールされます。</target>
        </trans-unit>
        <trans-unit id="81ba162b85ef412221638aff281d53793a7875ce" translate="yes" xml:space="preserve">
          <source>If the argument is a string, it should contain a decimal number, optionally preceded by a sign, and optionally embedded in whitespace. The optional sign may be &lt;code&gt;'+'&lt;/code&gt; or &lt;code&gt;'-'&lt;/code&gt;; a &lt;code&gt;'+'&lt;/code&gt; sign has no effect on the value produced. The argument may also be a string representing a NaN (not-a-number), or a positive or negative infinity. More precisely, the input must conform to the following grammar after leading and trailing whitespace characters are removed:</source>
          <target state="translated">引数が文字列の場合、10進数を含み、オプションで前に符号を付け、オプションで空白に埋め込む必要があります。オプションの符号は &lt;code&gt;'+'&lt;/code&gt; または &lt;code&gt;'-'&lt;/code&gt; です。 &lt;code&gt;'+'&lt;/code&gt; 記号が生成される値には影響しません。引数は、NaN（非数）、または正または負の無限大を表す文字列にすることもできます。より正確には、先頭と末尾の空白文字が削除された後、入力は次の文法に準拠する必要があります。</target>
        </trans-unit>
        <trans-unit id="e0bf4582d5afa94925ba1fb86d35299839904863" translate="yes" xml:space="preserve">
          <source>If the argument is positive, and the underlying raw stream is not interactive, multiple raw reads may be issued to satisfy the byte count (unless EOF is reached first). But for interactive raw streams, at most one raw read will be issued, and a short result does not imply that EOF is imminent.</source>
          <target state="translated">引数が正の値で、基礎となる生ストリームが対話的でない場合、バイト数を満たすために複数のraw readを発行することができます(最初にEOFに到達しない限り)。しかし、対話的なRawストリームの場合、最大でも1回のRawリードが発行され、結果が短くてもEOFが差し迫っていることを意味するものではありません。</target>
        </trans-unit>
        <trans-unit id="bf5c155da4b8b4fe57abec8d0c0e72c648a413c5" translate="yes" xml:space="preserve">
          <source>If the argument to the closure is not an existing directory, &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">クロージャの引数が既存のディレクトリでない場合、&lt;a href=&quot;exceptions#ImportError&quot;&gt; &lt;code&gt;ImportError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="9e34bdcceb6034130f11958c3ceb8f25313fc52d" translate="yes" xml:space="preserve">
          <source>If the attempt to make the socket connection fails, Idle will notify you. Such failures are sometimes transient, but if persistent, the problem may be either a firewall blocking the connection or misconfiguration of a particular system. Until the problem is fixed, one can run Idle with the -n command line switch.</source>
          <target state="translated">ソケット接続の試みが失敗した場合、Idle はその旨を通知します。このような失敗は一過性のものであることもありますが、もし失敗が続く場合は、ファイアウォールが接続をブロックしているか、特定のシステムの設定ミスが原因である可能性があります。問題が解決するまでは、-n コマンドラインスイッチを使って Idle を実行することができます。</target>
        </trans-unit>
        <trans-unit id="5376fd70393bce3b2627873412a2a120086e43a7" translate="yes" xml:space="preserve">
          <source>If the buffer is too short then a &lt;code&gt;BufferTooShort&lt;/code&gt; exception is raised and the complete message is available as &lt;code&gt;e.args[0]&lt;/code&gt; where &lt;code&gt;e&lt;/code&gt; is the exception instance.</source>
          <target state="translated">バッファが短すぎる場合、 &lt;code&gt;BufferTooShort&lt;/code&gt; 例外が発生し、完全なメッセージは &lt;code&gt;e.args[0]&lt;/code&gt; として利用できます。ここで、 &lt;code&gt;e&lt;/code&gt; は例外インスタンスです。</target>
        </trans-unit>
        <trans-unit id="b55ba6cd680fc7c446defa1148be7f603a8c347a" translate="yes" xml:space="preserve">
          <source>If the buffer size equals the high watermark, &lt;a href=&quot;#asyncio.BaseProtocol.pause_writing&quot;&gt;&lt;code&gt;pause_writing()&lt;/code&gt;&lt;/a&gt; is not called: the buffer size must go strictly over.</source>
          <target state="translated">バッファサイズが最高水準点と等しい場合、&lt;a href=&quot;#asyncio.BaseProtocol.pause_writing&quot;&gt; &lt;code&gt;pause_writing()&lt;/code&gt; &lt;/a&gt;は呼び出されません。バッファサイズは厳密に超えなければなりません。</target>
        </trans-unit>
        <trans-unit id="c975333ddfdaa3bf375713fbe96ca6198feddace" translate="yes" xml:space="preserve">
          <source>If the byte sequence passed to this function is not exactly 4 bytes in length, &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; will be raised. &lt;a href=&quot;#socket.inet_ntoa&quot;&gt;&lt;code&gt;inet_ntoa()&lt;/code&gt;&lt;/a&gt; does not support IPv6, and &lt;a href=&quot;#socket.inet_ntop&quot;&gt;&lt;code&gt;inet_ntop()&lt;/code&gt;&lt;/a&gt; should be used instead for IPv4/v6 dual stack support.</source>
          <target state="translated">この関数に渡されるバイトシーケンスの長さが正確に4バイトでない場合、&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;が発生します。&lt;a href=&quot;#socket.inet_ntoa&quot;&gt; &lt;code&gt;inet_ntoa()&lt;/code&gt; &lt;/a&gt;はIPv6をサポートしていません&lt;a href=&quot;#socket.inet_ntop&quot;&gt; &lt;code&gt;inet_ntop()&lt;/code&gt; &lt;/a&gt; / v6デュアルスタックをサポートするには、代わりにinet_ntop（）を使用してください。</target>
        </trans-unit>
        <trans-unit id="4080aabef6f9144e191027041093c739d2c1b3bd" translate="yes" xml:space="preserve">
          <source>If the call completed without raising, &lt;code&gt;None&lt;/code&gt; is returned.</source>
          <target state="translated">呼び出しが発生せずに完了した場合、 &lt;code&gt;None&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="f83b4efd6f712f456500a47232013459d991539c" translate="yes" xml:space="preserve">
          <source>If the call raised, this method will raise the same exception.</source>
          <target state="translated">呼び出しが発生した場合、このメソッドは同じ例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="98c6607719d86226a4951bc27faa2632178e9837" translate="yes" xml:space="preserve">
          <source>If the call times out, the barrier is put into the broken state.</source>
          <target state="translated">呼び出しがタイムアウトすると、バリアが壊れた状態になります。</target>
        </trans-unit>
        <trans-unit id="34c6962c614477a6094fef9f3349e26138a51253" translate="yes" xml:space="preserve">
          <source>If the calling task has not acquired the lock when this method is called, a &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">このメソッドが呼び出されたときに呼び出しタスクがロックを取得していない場合、&lt;a href=&quot;exceptions#RuntimeError&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="8100a6b6af3438279c1efdd3048e83262e4a542c" translate="yes" xml:space="preserve">
          <source>If the character set must be encoded before it can be used in an email header, this attribute will be set to &lt;code&gt;Charset.QP&lt;/code&gt; (for quoted-printable), &lt;code&gt;Charset.BASE64&lt;/code&gt; (for base64 encoding), or &lt;code&gt;Charset.SHORTEST&lt;/code&gt; for the shortest of QP or BASE64 encoding. Otherwise, it will be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">文字セットをメールヘッダーで使用する前にエンコードする必要がある場合、この属性は &lt;code&gt;Charset.QP&lt;/code&gt; （quoted-printableの場合）、 &lt;code&gt;Charset.BASE64&lt;/code&gt; （base64エンコードの場合）、または &lt;code&gt;Charset.SHORTEST&lt;/code&gt; に設定されます。QPまたはBASE64エンコーディング。それ以外の場合は &lt;code&gt;None&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="6e8caac2adb6bf9423fea6039c1be36f8bc7d75e" translate="yes" xml:space="preserve">
          <source>If the class already defines &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__eq__&quot;&gt;&lt;code&gt;__eq__()&lt;/code&gt;&lt;/a&gt;, this parameter is ignored.</source>
          <target state="translated">クラスがすでに&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__eq__&quot;&gt; &lt;code&gt;__eq__()&lt;/code&gt; &lt;/a&gt;定義している場合、このパラメーターは無視されます。</target>
        </trans-unit>
        <trans-unit id="5173bdebec1086940c7a8a6c5f27b3d81d48ed3a" translate="yes" xml:space="preserve">
          <source>If the class already defines &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt;, this parameter is ignored.</source>
          <target state="translated">クラスが&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt;すでに定義している場合、このパラメーターは無視されます。</target>
        </trans-unit>
        <trans-unit id="8cb1399398df7c668ff6210d8b504532d3b5fe53" translate="yes" xml:space="preserve">
          <source>If the class already defines &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__repr__&quot;&gt;&lt;code&gt;__repr__()&lt;/code&gt;&lt;/a&gt;, this parameter is ignored.</source>
          <target state="translated">クラスがすでに&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__repr__&quot;&gt; &lt;code&gt;__repr__()&lt;/code&gt; &lt;/a&gt;定義している場合、このパラメーターは無視されます。</target>
        </trans-unit>
        <trans-unit id="d1e40f424d0a60fa1524e20d8b1ff8a462f2310e" translate="yes" xml:space="preserve">
          <source>If the class already defines any of &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__lt__&quot;&gt;&lt;code&gt;__lt__()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__le__&quot;&gt;&lt;code&gt;__le__()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__gt__&quot;&gt;&lt;code&gt;__gt__()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__ge__&quot;&gt;&lt;code&gt;__ge__()&lt;/code&gt;&lt;/a&gt;, then &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">クラスはすでに、任意の定義されている場合&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__lt__&quot;&gt; &lt;code&gt;__lt__()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__le__&quot;&gt; &lt;code&gt;__le__()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__gt__&quot;&gt; &lt;code&gt;__gt__()&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__ge__&quot;&gt; &lt;code&gt;__ge__()&lt;/code&gt; &lt;/a&gt;、その後、&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;発生します。</target>
        </trans-unit>
        <trans-unit id="18d54afc52e2190ab5698bf62a007d327a0d9532" translate="yes" xml:space="preserve">
          <source>If the class is instantiated multiple times you could use &lt;a href=&quot;#unittest.mock.Mock.side_effect&quot;&gt;&lt;code&gt;side_effect&lt;/code&gt;&lt;/a&gt; to return a new mock each time. Alternatively you can set the &lt;em&gt;return_value&lt;/em&gt; to be anything you want.</source>
          <target state="translated">クラスが複数回インスタンス化されている場合は、&lt;a href=&quot;#unittest.mock.Mock.side_effect&quot;&gt; &lt;code&gt;side_effect&lt;/code&gt; &lt;/a&gt;を使用して毎回新しいモックを返すことができます。または、&lt;em&gt;return_value&lt;/em&gt;を任意の値に設定できます。</target>
        </trans-unit>
        <trans-unit id="0844b2f1f4f28f1d3c7e82725d649a65558d8346" translate="yes" xml:space="preserve">
          <source>If the cmd argument to popen2 functions is a string, the command is executed through /bin/sh. If it is a list, the command is directly executed.</source>
          <target state="translated">popen2関数へのcmdの引数が文字列の場合、コマンドは/bin/shを通して実行されます。リストの場合は直接実行されます。</target>
        </trans-unit>
        <trans-unit id="0b487b3fa1bfe238daee50939a9f3547d743abdb" translate="yes" xml:space="preserve">
          <source>If the code has a jump target and &lt;em&gt;jump&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, &lt;a href=&quot;#dis.stack_effect&quot;&gt;&lt;code&gt;stack_effect()&lt;/code&gt;&lt;/a&gt; will return the stack effect of jumping. If &lt;em&gt;jump&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt;, it will return the stack effect of not jumping. And if &lt;em&gt;jump&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt; (default), it will return the maximal stack effect of both cases.</source>
          <target state="translated">コードにジャンプターゲットがあり、&lt;em&gt;jump&lt;/em&gt;が &lt;code&gt;True&lt;/code&gt; の場合、&lt;a href=&quot;#dis.stack_effect&quot;&gt; &lt;code&gt;stack_effect()&lt;/code&gt; &lt;/a&gt;はジャンプのスタック効果を返します。&lt;em&gt;jump&lt;/em&gt;が &lt;code&gt;False&lt;/code&gt; の場合、&lt;em&gt;ジャンプし&lt;/em&gt;ないというスタック効果を返します。場合や&lt;em&gt;ジャンプが&lt;/em&gt;あるん &lt;code&gt;None&lt;/code&gt; （デフォルト）、それは両方のケースの最大スタック効果を返します。</target>
        </trans-unit>
        <trans-unit id="4f49dfb1d7b288c0f309278b39f37d05e88304b1" translate="yes" xml:space="preserve">
          <source>If the configuration value specified by &lt;em&gt;name&lt;/em&gt; isn&amp;rsquo;t defined, &lt;code&gt;None&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;em&gt;名前&lt;/em&gt;で指定された構成値が定義されていない場合、 &lt;code&gt;None&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="a0290d581f118be47fbc672209c5237cf2ee347a" translate="yes" xml:space="preserve">
          <source>If the connection is interrupted by a signal, the method waits until the connection completes, or raise a &lt;a href=&quot;#socket.timeout&quot;&gt;&lt;code&gt;socket.timeout&lt;/code&gt;&lt;/a&gt; on timeout, if the signal handler doesn&amp;rsquo;t raise an exception and the socket is blocking or has a timeout. For non-blocking sockets, the method raises an &lt;a href=&quot;exceptions#InterruptedError&quot;&gt;&lt;code&gt;InterruptedError&lt;/code&gt;&lt;/a&gt; exception if the connection is interrupted by a signal (or the exception raised by the signal handler).</source>
          <target state="translated">接続がシグナルによって中断された場合、メソッドは接続が完了するまで待機するか、またはシグナルハンドラーが例外を発生させず、ソケットがブロックされているかタイムアウトしている場合は、タイムアウト時に&lt;a href=&quot;#socket.timeout&quot;&gt; &lt;code&gt;socket.timeout&lt;/code&gt; &lt;/a&gt;を発生させます。非ブロッキングソケットの場合、接続がシグナルによって中断された場合（またはシグナルハンドラーによって発生した例外）、メソッドは&lt;a href=&quot;exceptions#InterruptedError&quot;&gt; &lt;code&gt;InterruptedError&lt;/code&gt; &lt;/a&gt;例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="1ccfc1df4a51fc69641651224aae9f0339a11398" translate="yes" xml:space="preserve">
          <source>If the connection to the server is lost while waiting for the reply, &lt;a href=&quot;#smtplib.SMTPServerDisconnected&quot;&gt;&lt;code&gt;SMTPServerDisconnected&lt;/code&gt;&lt;/a&gt; will be raised.</source>
          <target state="translated">応答の待機中にサーバーへの接続が失われた場合、&lt;a href=&quot;#smtplib.SMTPServerDisconnected&quot;&gt; &lt;code&gt;SMTPServerDisconnected&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="3ad155938abd6bd816f11164daa5559b5b6f8335" translate="yes" xml:space="preserve">
          <source>If the containing toplevel&amp;rsquo;s position was specified relative to the right or bottom of the screen (e.g. &amp;hellip;.), the &lt;code&gt;Sizegrip&lt;/code&gt; widget will not resize the window.</source>
          <target state="translated">含むトップレベルの位置が画面の右または下を基準にして指定された場合（例：&amp;hellip;）、 &lt;code&gt;Sizegrip&lt;/code&gt; ウィジェットはウィンドウのサイズを変更しません。</target>
        </trans-unit>
        <trans-unit id="43dd941fcd2c8ec7d6f5b3b06bac3aa6c32162ba" translate="yes" xml:space="preserve">
          <source>If the context&amp;rsquo;s trap enabler is set for the signal, then the condition causes a Python exception to be raised. For example, if the &lt;a href=&quot;#decimal.DivisionByZero&quot;&gt;&lt;code&gt;DivisionByZero&lt;/code&gt;&lt;/a&gt; trap is set, then a &lt;a href=&quot;#decimal.DivisionByZero&quot;&gt;&lt;code&gt;DivisionByZero&lt;/code&gt;&lt;/a&gt; exception is raised upon encountering the condition.</source>
          <target state="translated">コンテキストのトラップイネーブラーが信号に設定されている場合、条件によりPython例外が発生します。たとえば、&lt;a href=&quot;#decimal.DivisionByZero&quot;&gt; &lt;code&gt;DivisionByZero&lt;/code&gt; &lt;/a&gt;トラップが設定されている場合、条件が発生すると&lt;a href=&quot;#decimal.DivisionByZero&quot;&gt; &lt;code&gt;DivisionByZero&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="22595aef4892c0871cfe75e3e28f828bb007ef0c" translate="yes" xml:space="preserve">
          <source>If the converter needs to access the state of the parser, it can be implemented as a method on a config parser subclass. If the name of this method starts with &lt;code&gt;get&lt;/code&gt;, it will be available on all section proxies, in the dict-compatible form (see the &lt;code&gt;getdecimal()&lt;/code&gt; example above).</source>
          <target state="translated">コンバーターがパーサーの状態にアクセスする必要がある場合は、構成パーサーサブクラスのメソッドとして実装できます。このメソッドの名前が &lt;code&gt;get&lt;/code&gt; で始まる場合、すべてのセクションプロキシでdict互換の形式で使用できます（上記の &lt;code&gt;getdecimal()&lt;/code&gt; の例を参照）。</target>
        </trans-unit>
        <trans-unit id="8b3d3dc34b0d0bf1c8c7d4897bc704963dd23f37" translate="yes" xml:space="preserve">
          <source>If the cursor is over an output line, squeeze all the output between the code above and the prompt below down to a &amp;lsquo;Squeezed text&amp;rsquo; label.</source>
          <target state="translated">カーソルが出力行の上にある場合は、上のコードと下のプロンプトの間のすべての出力を「スクイーズされたテキスト」ラベルまでスクイーズします。</target>
        </trans-unit>
        <trans-unit id="a84ed8f0fda6ec2ae9ca1bc860b4c3906be5fb5d" translate="yes" xml:space="preserve">
          <source>If the data being deserialized is not a valid JSON document, a &lt;a href=&quot;#json.JSONDecodeError&quot;&gt;&lt;code&gt;JSONDecodeError&lt;/code&gt;&lt;/a&gt; will be raised.</source>
          <target state="translated">逆シリアル化されるデータが有効なJSONドキュメントでない場合、&lt;a href=&quot;#json.JSONDecodeError&quot;&gt; &lt;code&gt;JSONDecodeError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="722e3f031b5abfe9b3484e64e6d2902f708fa4b0" translate="yes" xml:space="preserve">
          <source>If the data is ordinal (supports order operations) but not numeric (doesn&amp;rsquo;t support addition), consider using &lt;a href=&quot;#statistics.median_low&quot;&gt;&lt;code&gt;median_low()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#statistics.median_high&quot;&gt;&lt;code&gt;median_high()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">データが序数である（注文操作をサポートする）が数値ではない（加算をサポートしていない）場合は、代わりに&lt;a href=&quot;#statistics.median_low&quot;&gt; &lt;code&gt;median_low()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#statistics.median_high&quot;&gt; &lt;code&gt;median_high()&lt;/code&gt; の&lt;/a&gt;使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="154822805c12d2aab70f1b641202eb990335ef91" translate="yes" xml:space="preserve">
          <source>If the database file already exists, the &lt;a href=&quot;#dbm.whichdb&quot;&gt;&lt;code&gt;whichdb()&lt;/code&gt;&lt;/a&gt; function is used to determine its type and the appropriate module is used; if it does not exist, the first module listed above that can be imported is used.</source>
          <target state="translated">データベースファイルがすでに存在する場合は、&lt;a href=&quot;#dbm.whichdb&quot;&gt; &lt;code&gt;whichdb()&lt;/code&gt; &lt;/a&gt;関数を使用してそのタイプを判別し、適切なモジュールを使用します。存在しない場合は、上記の最初にインポートできるモジュールが使用されます。</target>
        </trans-unit>
        <trans-unit id="b118369699b7fc02d2c91e666ca503503b584356" translate="yes" xml:space="preserve">
          <source>If the debugger should stop at this exception, invokes the &lt;a href=&quot;#bdb.Bdb.user_exception&quot;&gt;&lt;code&gt;user_exception()&lt;/code&gt;&lt;/a&gt; method (which should be overridden in subclasses). Raise a &lt;a href=&quot;#bdb.BdbQuit&quot;&gt;&lt;code&gt;BdbQuit&lt;/code&gt;&lt;/a&gt; exception if the &lt;code&gt;Bdb.quitting&lt;/code&gt; flag is set (which can be set from &lt;a href=&quot;#bdb.Bdb.user_exception&quot;&gt;&lt;code&gt;user_exception()&lt;/code&gt;&lt;/a&gt;). Return a reference to the &lt;a href=&quot;#bdb.Bdb.trace_dispatch&quot;&gt;&lt;code&gt;trace_dispatch()&lt;/code&gt;&lt;/a&gt; method for further tracing in that scope.</source>
          <target state="translated">デバッガーがこの例外で停止する必要がある場合は、&lt;a href=&quot;#bdb.Bdb.user_exception&quot;&gt; &lt;code&gt;user_exception()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出します（サブクラスでオーバーライドする必要があります）。 &lt;code&gt;Bdb.quitting&lt;/code&gt; フラグが設定されている&lt;a href=&quot;#bdb.Bdb.user_exception&quot;&gt; &lt;code&gt;user_exception()&lt;/code&gt; &lt;/a&gt;から設定できます）、&lt;a href=&quot;#bdb.BdbQuit&quot;&gt; &lt;code&gt;BdbQuit&lt;/code&gt; &lt;/a&gt;例外を発生させます。そのスコープでさらにトレースするには、&lt;a href=&quot;#bdb.Bdb.trace_dispatch&quot;&gt; &lt;code&gt;trace_dispatch()&lt;/code&gt; &lt;/a&gt;メソッドへの参照を返します。</target>
        </trans-unit>
        <trans-unit id="d65f4eae2712c33680ab9efbc1f19062565841d8" translate="yes" xml:space="preserve">
          <source>If the debugger should stop on the current line, invoke the &lt;a href=&quot;#bdb.Bdb.user_line&quot;&gt;&lt;code&gt;user_line()&lt;/code&gt;&lt;/a&gt; method (which should be overridden in subclasses). Raise a &lt;a href=&quot;#bdb.BdbQuit&quot;&gt;&lt;code&gt;BdbQuit&lt;/code&gt;&lt;/a&gt; exception if the &lt;code&gt;Bdb.quitting&lt;/code&gt; flag is set (which can be set from &lt;a href=&quot;#bdb.Bdb.user_line&quot;&gt;&lt;code&gt;user_line()&lt;/code&gt;&lt;/a&gt;). Return a reference to the &lt;a href=&quot;#bdb.Bdb.trace_dispatch&quot;&gt;&lt;code&gt;trace_dispatch()&lt;/code&gt;&lt;/a&gt; method for further tracing in that scope.</source>
          <target state="translated">デバッガーが現在の行で停止する必要がある場合は、&lt;a href=&quot;#bdb.Bdb.user_line&quot;&gt; &lt;code&gt;user_line()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出します（これはサブクラスでオーバーライドする必要があります）。 &lt;code&gt;Bdb.quitting&lt;/code&gt; フラグが設定されている&lt;a href=&quot;#bdb.Bdb.user_line&quot;&gt; &lt;code&gt;user_line()&lt;/code&gt; &lt;/a&gt;から設定できます）、&lt;a href=&quot;#bdb.BdbQuit&quot;&gt; &lt;code&gt;BdbQuit&lt;/code&gt; &lt;/a&gt;例外を発生させます。そのスコープでさらにトレースするには、&lt;a href=&quot;#bdb.Bdb.trace_dispatch&quot;&gt; &lt;code&gt;trace_dispatch()&lt;/code&gt; &lt;/a&gt;メソッドへの参照を返します。</target>
        </trans-unit>
        <trans-unit id="f1c7df4d0adf08d6f3c7e84cf0ae146dc6be7d64" translate="yes" xml:space="preserve">
          <source>If the debugger should stop on this function call, invoke the &lt;a href=&quot;#bdb.Bdb.user_call&quot;&gt;&lt;code&gt;user_call()&lt;/code&gt;&lt;/a&gt; method (which should be overridden in subclasses). Raise a &lt;a href=&quot;#bdb.BdbQuit&quot;&gt;&lt;code&gt;BdbQuit&lt;/code&gt;&lt;/a&gt; exception if the &lt;code&gt;Bdb.quitting&lt;/code&gt; flag is set (which can be set from &lt;a href=&quot;#bdb.Bdb.user_call&quot;&gt;&lt;code&gt;user_call()&lt;/code&gt;&lt;/a&gt;). Return a reference to the &lt;a href=&quot;#bdb.Bdb.trace_dispatch&quot;&gt;&lt;code&gt;trace_dispatch()&lt;/code&gt;&lt;/a&gt; method for further tracing in that scope.</source>
          <target state="translated">デバッガーがこの関数呼び出しで停止する必要がある場合は、&lt;a href=&quot;#bdb.Bdb.user_call&quot;&gt; &lt;code&gt;user_call()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出します（サブクラスでオーバーライドする必要があります）。 &lt;code&gt;Bdb.quitting&lt;/code&gt; フラグが設定されている&lt;a href=&quot;#bdb.Bdb.user_call&quot;&gt; &lt;code&gt;user_call()&lt;/code&gt; &lt;/a&gt;から設定できます）、&lt;a href=&quot;#bdb.BdbQuit&quot;&gt; &lt;code&gt;BdbQuit&lt;/code&gt; &lt;/a&gt;例外を発生させます。そのスコープでさらにトレースするには、&lt;a href=&quot;#bdb.Bdb.trace_dispatch&quot;&gt; &lt;code&gt;trace_dispatch()&lt;/code&gt; &lt;/a&gt;メソッドへの参照を返します。</target>
        </trans-unit>
        <trans-unit id="be5272f439cf1bb932bed5ba2fa9705c6449082c" translate="yes" xml:space="preserve">
          <source>If the debugger should stop on this function return, invoke the &lt;a href=&quot;#bdb.Bdb.user_return&quot;&gt;&lt;code&gt;user_return()&lt;/code&gt;&lt;/a&gt; method (which should be overridden in subclasses). Raise a &lt;a href=&quot;#bdb.BdbQuit&quot;&gt;&lt;code&gt;BdbQuit&lt;/code&gt;&lt;/a&gt; exception if the &lt;code&gt;Bdb.quitting&lt;/code&gt; flag is set (which can be set from &lt;a href=&quot;#bdb.Bdb.user_return&quot;&gt;&lt;code&gt;user_return()&lt;/code&gt;&lt;/a&gt;). Return a reference to the &lt;a href=&quot;#bdb.Bdb.trace_dispatch&quot;&gt;&lt;code&gt;trace_dispatch()&lt;/code&gt;&lt;/a&gt; method for further tracing in that scope.</source>
          <target state="translated">デバッガーがこの関数の戻りで停止する必要がある場合は、&lt;a href=&quot;#bdb.Bdb.user_return&quot;&gt; &lt;code&gt;user_return()&lt;/code&gt; &lt;/a&gt;メソッド（サブクラスでオーバーライドする必要があります）を呼び出します。 &lt;code&gt;Bdb.quitting&lt;/code&gt; フラグが設定されている&lt;a href=&quot;#bdb.Bdb.user_return&quot;&gt; &lt;code&gt;user_return()&lt;/code&gt; &lt;/a&gt;から設定できます）、&lt;a href=&quot;#bdb.BdbQuit&quot;&gt; &lt;code&gt;BdbQuit&lt;/code&gt; &lt;/a&gt;例外を発生させます。そのスコープでさらにトレースするには、&lt;a href=&quot;#bdb.Bdb.trace_dispatch&quot;&gt; &lt;code&gt;trace_dispatch()&lt;/code&gt; &lt;/a&gt;メソッドへの参照を返します。</target>
        </trans-unit>
        <trans-unit id="201fc8099c1ec49d0ede598d1afe842c5aadcbab" translate="yes" xml:space="preserve">
          <source>If the default value of a field is specified by a call to &lt;a href=&quot;#dataclasses.field&quot;&gt;&lt;code&gt;field()&lt;/code&gt;&lt;/a&gt;, then the class attribute for this field will be replaced by the specified &lt;code&gt;default&lt;/code&gt; value. If no &lt;code&gt;default&lt;/code&gt; is provided, then the class attribute will be deleted. The intent is that after the &lt;a href=&quot;#dataclasses.dataclass&quot;&gt;&lt;code&gt;dataclass()&lt;/code&gt;&lt;/a&gt; decorator runs, the class attributes will all contain the default values for the fields, just as if the default value itself were specified. For example, after:</source>
          <target state="translated">フィールドのデフォルト値が&lt;a href=&quot;#dataclasses.field&quot;&gt; &lt;code&gt;field()&lt;/code&gt; の&lt;/a&gt;呼び出しで指定されている場合、このフィールドのクラス属性は指定された &lt;code&gt;default&lt;/code&gt; 値で置き換えられます。 &lt;code&gt;default&lt;/code&gt; が指定されていない場合、クラス属性は削除されます。その意図は、&lt;a href=&quot;#dataclasses.dataclass&quot;&gt; &lt;code&gt;dataclass()&lt;/code&gt; &lt;/a&gt;デコレーターが実行された後、クラス属性にはすべて、デフォルト値自体が指定されたかのように、フィールドのデフォルト値が含まれることです。たとえば、次のようになります。</target>
        </trans-unit>
        <trans-unit id="5ae4681cafc2df817b63559ac73e2e01d8b7ddf0" translate="yes" xml:space="preserve">
          <source>If the destination is an existing directory, then &lt;em&gt;src&lt;/em&gt; is moved inside that directory. If the destination already exists but is not a directory, it may be overwritten depending on &lt;a href=&quot;os#os.rename&quot;&gt;&lt;code&gt;os.rename()&lt;/code&gt;&lt;/a&gt; semantics.</source>
          <target state="translated">宛先が既存のディレクトリの場合、&lt;em&gt;src&lt;/em&gt;はそのディレクトリ内に移動されます。宛先がすでに存在しているがディレクトリではない場合、&lt;a href=&quot;os#os.rename&quot;&gt; &lt;code&gt;os.rename()&lt;/code&gt; &lt;/a&gt;セマンティクスによっては上書きされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="90a483529ef380acfabb4df595aa7f9eedaacd18" translate="yes" xml:space="preserve">
          <source>If the destination is on the current filesystem, then &lt;a href=&quot;os#os.rename&quot;&gt;&lt;code&gt;os.rename()&lt;/code&gt;&lt;/a&gt; is used. Otherwise, &lt;em&gt;src&lt;/em&gt; is copied to &lt;em&gt;dst&lt;/em&gt; using &lt;em&gt;copy_function&lt;/em&gt; and then removed. In case of symlinks, a new symlink pointing to the target of &lt;em&gt;src&lt;/em&gt; will be created in or as &lt;em&gt;dst&lt;/em&gt; and &lt;em&gt;src&lt;/em&gt; will be removed.</source>
          <target state="translated">宛先が現在のファイルシステムにある場合、&lt;a href=&quot;os#os.rename&quot;&gt; &lt;code&gt;os.rename()&lt;/code&gt; &lt;/a&gt;が使用されます。それ以外の場合、&lt;em&gt;src&lt;/em&gt;は&lt;em&gt;copy_function&lt;/em&gt;を使用して&lt;em&gt;dstに&lt;/em&gt;コピーされ、その後削除されます。シンボリックリンクの場合、&lt;em&gt;src&lt;/em&gt;のターゲットを指す新しいシンボリックリンクが、&lt;em&gt;dst内またはdst&lt;/em&gt;として作成され、&lt;em&gt;src&lt;/em&gt;が削除されます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e7f148091df358050d8bcfaf1e96d8acba5a8a3d" translate="yes" xml:space="preserve">
          <source>If the directory already exists, &lt;a href=&quot;exceptions#FileExistsError&quot;&gt;&lt;code&gt;FileExistsError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">ディレクトリがすでに存在する場合、&lt;a href=&quot;exceptions#FileExistsError&quot;&gt; &lt;code&gt;FileExistsError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="f4bf018015908f2a980d2821276c417e78ee5737" translate="yes" xml:space="preserve">
          <source>If the directory contains files starting with &lt;code&gt;.&lt;/code&gt; they won&amp;rsquo;t be matched by default. For example, consider a directory containing &lt;code&gt;card.gif&lt;/code&gt; and &lt;code&gt;.card.gif&lt;/code&gt;:</source>
          <target state="translated">ディレクトリにで始まるファイルが含まれている場合 &lt;code&gt;.&lt;/code&gt; デフォルトでは一致しません。たとえば、 &lt;code&gt;card.gif&lt;/code&gt; と &lt;code&gt;.card.gif&lt;/code&gt; を含むディレクトリを考えます。</target>
        </trans-unit>
        <trans-unit id="7ced573f72ad49106a583ae064c2db74e18bb9c9" translate="yes" xml:space="preserve">
          <source>If the environment variable &lt;code id=&quot;index-0&quot;&gt;BROWSER&lt;/code&gt; exists, it is interpreted as the &lt;a href=&quot;os#os.pathsep&quot;&gt;&lt;code&gt;os.pathsep&lt;/code&gt;&lt;/a&gt;-separated list of browsers to try ahead of the platform defaults. When the value of a list part contains the string &lt;code&gt;%s&lt;/code&gt;, then it is interpreted as a literal browser command line to be used with the argument URL substituted for &lt;code&gt;%s&lt;/code&gt;; if the part does not contain &lt;code&gt;%s&lt;/code&gt;, it is simply interpreted as the name of the browser to launch. &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;</source>
          <target state="translated">環境変数 &lt;code id=&quot;index-0&quot;&gt;BROWSER&lt;/code&gt; が存在する場合、プラットフォームのデフォルトよりも先に試すために、ブラウザーの&lt;a href=&quot;os#os.pathsep&quot;&gt; &lt;code&gt;os.pathsep&lt;/code&gt; &lt;/a&gt;で区切られたリストとして解釈されます。リストパーツの値に文字列 &lt;code&gt;%s&lt;/code&gt; が含まれている場合、文字列ブラウザコマンドラインとして解釈され、 &lt;code&gt;%s&lt;/code&gt; の代わりに引数URLが使用されます。パーツに &lt;code&gt;%s&lt;/code&gt; が含まれていない場合は、起動するブラウザの名前として解釈されます。&lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4992ba0add3e62936beba1abed0141fdfe5937a4" translate="yes" xml:space="preserve">
          <source>If the environment variable &lt;code&gt;REQUEST_METHOD&lt;/code&gt; is set, which usually indicates your script is running in a CGI environment, the environment variable &lt;code&gt;HTTP_PROXY&lt;/code&gt; (uppercase &lt;code&gt;_PROXY&lt;/code&gt;) will be ignored. This is because that variable can be injected by a client using the &amp;ldquo;Proxy:&amp;rdquo; HTTP header. If you need to use an HTTP proxy in a CGI environment, either use &lt;code&gt;ProxyHandler&lt;/code&gt; explicitly, or make sure the variable name is in lowercase (or at least the &lt;code&gt;_proxy&lt;/code&gt; suffix).</source>
          <target state="translated">環境変数 &lt;code&gt;REQUEST_METHOD&lt;/code&gt; が設定されている場合、これは通常、スクリプトがCGI環境で実行されていることを示し、環境変数 &lt;code&gt;HTTP_PROXY&lt;/code&gt; （大文字の &lt;code&gt;_PROXY&lt;/code&gt; ）は無視されます。これは、「Proxy：」HTTPヘッダーを使用してクライアントが変数を注入できるためです。CGI環境でHTTPプロキシを使用する必要がある場合は、 &lt;code&gt;ProxyHandler&lt;/code&gt; を明示的に使用するか、変数名が小文字（または少なくとも &lt;code&gt;_proxy&lt;/code&gt; サフィックス）であることを確認してください。</target>
        </trans-unit>
        <trans-unit id="733c3f8ae616712998ec582c7dc9418f60036c61" translate="yes" xml:space="preserve">
          <source>If the event is set, return &lt;code&gt;True&lt;/code&gt; immediately. Otherwise block until another task calls &lt;a href=&quot;stdtypes#set&quot;&gt;&lt;code&gt;set()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">イベントが設定されている場合は、すぐに &lt;code&gt;True&lt;/code&gt; を返します。それ以外の場合は、別のタスクが&lt;a href=&quot;stdtypes#set&quot;&gt; &lt;code&gt;set()&lt;/code&gt; を&lt;/a&gt;呼び出すまでブロックします。</target>
        </trans-unit>
        <trans-unit id="378c9e1cdfb8344fd77c512889f953f89cb90508" translate="yes" xml:space="preserve">
          <source>If the exact value is unimportant you can use &lt;a href=&quot;#enum.auto&quot;&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">正確な値が重要でない場合は、&lt;a href=&quot;#enum.auto&quot;&gt; &lt;code&gt;auto&lt;/code&gt; &lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="80196981eb3b8cd3185224864fb45d685edece2b" translate="yes" xml:space="preserve">
          <source>If the expansion fails or if the path does not begin with a tilde, the path is returned unchanged.</source>
          <target state="translated">展開に失敗した場合、またはパスがチルダで始まらない場合、パスは変更されずに返されます。</target>
        </trans-unit>
        <trans-unit id="25581f556094bf0f7a3af63df730aedc4bbc5af1" translate="yes" xml:space="preserve">
          <source>If the exponent of the second operand is larger than that of the first then rounding may be necessary. In this case, the rounding mode is determined by the &lt;code&gt;rounding&lt;/code&gt; argument if given, else by the given &lt;code&gt;context&lt;/code&gt; argument; if neither argument is given the rounding mode of the current thread&amp;rsquo;s context is used.</source>
          <target state="translated">2番目のオペランドの指数が最初のオペランドの指数より大きい場合、丸めが必要になることがあります。この場合、丸めモードは、 &lt;code&gt;rounding&lt;/code&gt; 引数が指定されている場合はそれによって決定され、そうでない場合は &lt;code&gt;context&lt;/code&gt; 引数によって決定されます。どちらの引数も指定されていない場合は、現在のスレッドのコンテキストの丸めモードが使用されます。</target>
        </trans-unit>
        <trans-unit id="f40d8b7c76b10f8d6afc27ed43238ec343c52d0a" translate="yes" xml:space="preserve">
          <source>If the fast-copy operation fails and no data was written in the destination file then shutil will silently fallback on using less efficient &lt;a href=&quot;#shutil.copyfileobj&quot;&gt;&lt;code&gt;copyfileobj()&lt;/code&gt;&lt;/a&gt; function internally.</source>
          <target state="translated">高速コピー操作が失敗し、宛先ファイルにデータが書き込まれなかった場合、shutilは効率の悪いcopyfileobj &lt;a href=&quot;#shutil.copyfileobj&quot;&gt; &lt;code&gt;copyfileobj()&lt;/code&gt; &lt;/a&gt;関数を内部で使用してフォールバックします。</target>
        </trans-unit>
        <trans-unit id="7904f5dd4c3c1ff4fa7eecbfcee0078bf02fe590" translate="yes" xml:space="preserve">
          <source>If the file descriptor is not connected to a terminal, an &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">ファイル記述子が端末に接続されていない場合、&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="204d5c0bddce0bad70b8e8384a949257afd035f7" translate="yes" xml:space="preserve">
          <source>If the file is created with mode &lt;code&gt;'w'&lt;/code&gt;, &lt;code&gt;'x'&lt;/code&gt; or &lt;code&gt;'a'&lt;/code&gt; and then &lt;a href=&quot;#zipfile.ZipFile.close&quot;&gt;&lt;code&gt;closed&lt;/code&gt;&lt;/a&gt; without adding any files to the archive, the appropriate ZIP structures for an empty archive will be written to the file.</source>
          <target state="translated">ファイルがモード &lt;code&gt;'w'&lt;/code&gt; 、 &lt;code&gt;'x'&lt;/code&gt; または &lt;code&gt;'a'&lt;/code&gt; で作成され、ファイルをアーカイブに追加せずに&lt;a href=&quot;#zipfile.ZipFile.close&quot;&gt; &lt;code&gt;closed&lt;/code&gt; &lt;/a&gt;た場合、空のアーカイブに適切なZIP構造がファイルに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="e0b3807f55b2bb553078d84e9b4f290c46390447" translate="yes" xml:space="preserve">
          <source>If the first character is not one of these, &lt;code&gt;'@'&lt;/code&gt; is assumed.</source>
          <target state="translated">最初の文字がこれらのいずれでもない場合、 &lt;code&gt;'@'&lt;/code&gt; が想定されます。</target>
        </trans-unit>
        <trans-unit id="ecd2158e2f17566a6c9110f348c8d34a00d129fc" translate="yes" xml:space="preserve">
          <source>If the first character of the option string is &lt;code&gt;'+'&lt;/code&gt;, or if the environment variable &lt;code id=&quot;index-0&quot;&gt;POSIXLY_CORRECT&lt;/code&gt; is set, then option processing stops as soon as a non-option argument is encountered.</source>
          <target state="translated">オプション文字列の最初の文字が &lt;code&gt;'+'&lt;/code&gt; の場合、または環境変数 &lt;code id=&quot;index-0&quot;&gt;POSIXLY_CORRECT&lt;/code&gt; が設定されている場合、非オプション引数が検出されるとすぐにオプション処理が停止します。</target>
        </trans-unit>
        <trans-unit id="c76146671826ba2b4412a62fe7631ca797af78d5" translate="yes" xml:space="preserve">
          <source>If the floating-point &lt;em&gt;timeout&lt;/em&gt; argument is present and positive, it specifies the maximum wait time in seconds before returning. A negative &lt;em&gt;timeout&lt;/em&gt; argument specifies an unbounded wait. You cannot specify a &lt;em&gt;timeout&lt;/em&gt; if &lt;em&gt;waitflag&lt;/em&gt; is zero.</source>
          <target state="translated">浮動小数点&lt;em&gt;タイムアウト&lt;/em&gt;引数が存在し、正の場合は、戻る前の最大待機時間を秒単位で指定します。負の&lt;em&gt;タイムアウト&lt;/em&gt;引数は、無制限の待機を指定します。&lt;em&gt;waitflag&lt;/em&gt;がゼロの場合、&lt;em&gt;タイムアウトを&lt;/em&gt;指定することはできません。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="71f137ca45f1f4315df5ce3a53742f74127f3689" translate="yes" xml:space="preserve">
          <source>If the function also supports &lt;em&gt;dir_fd&lt;/em&gt; or &lt;em&gt;follow_symlinks&lt;/em&gt; arguments, it&amp;rsquo;s an error to specify one of those when supplying &lt;em&gt;path&lt;/em&gt; as a file descriptor.</source>
          <target state="translated">関数が&lt;em&gt;dir_fd&lt;/em&gt;または&lt;em&gt;follow_symlinks&lt;/em&gt;引数もサポートする場合、&lt;em&gt;パス&lt;/em&gt;をファイル記述子として指定するときにこれらの引数の1つを指定するとエラーになります。</target>
        </trans-unit>
        <trans-unit id="9e255e0f89d3c1037cfd2af8f07b7a7b9b651a55" translate="yes" xml:space="preserve">
          <source>If the function fails, &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">関数が失敗すると、&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="5356d77e205569cd60b75101b731b99c07bcf65d" translate="yes" xml:space="preserve">
          <source>If the future has already completed or been cancelled, &lt;em&gt;fn&lt;/em&gt; will be called immediately.</source>
          <target state="translated">futureがすでに完了しているかキャンセルされている場合は、&lt;em&gt;fn&lt;/em&gt;がすぐに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d7602bbb5410a8b437816b287f32e8aba7e81abc" translate="yes" xml:space="preserve">
          <source>If the future is cancelled before completing then &lt;a href=&quot;#concurrent.futures.CancelledError&quot;&gt;&lt;code&gt;CancelledError&lt;/code&gt;&lt;/a&gt; will be raised.</source>
          <target state="translated">完了する前にフューチャーがキャンセルされた場合、&lt;a href=&quot;#concurrent.futures.CancelledError&quot;&gt; &lt;code&gt;CancelledError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="22d45851562f9f10333edeb0961c986bb8146cb1" translate="yes" xml:space="preserve">
          <source>If the given &lt;em&gt;section&lt;/em&gt; exists, and contains the given &lt;em&gt;option&lt;/em&gt;, return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;; otherwise return &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt;. If the specified &lt;em&gt;section&lt;/em&gt; is &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; or an empty string, DEFAULT is assumed.</source>
          <target state="translated">指定された&lt;em&gt;セクション&lt;/em&gt;が存在し、指定された&lt;em&gt;オプション&lt;/em&gt;が含まれている&lt;em&gt;場合は&lt;/em&gt;、&lt;a href=&quot;constants#True&quot;&gt; &lt;code&gt;True&lt;/code&gt; を&lt;/a&gt;返します。それ以外の場合は&lt;a href=&quot;constants#False&quot;&gt; &lt;code&gt;False&lt;/code&gt; を&lt;/a&gt;返します。指定された&lt;em&gt;セクション&lt;/em&gt;が&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;または空の文字列の場合、DEFAULTが想定されます。</target>
        </trans-unit>
        <trans-unit id="1285768fc63d1e86280e3cad6887bc85265a423a" translate="yes" xml:space="preserve">
          <source>If the given encoding is not known, the function defaults to the default encoding for the locale code just like &lt;a href=&quot;#locale.setlocale&quot;&gt;&lt;code&gt;setlocale()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定されたエンコーディングが不明な場合、関数はデフォルトで&lt;a href=&quot;#locale.setlocale&quot;&gt; &lt;code&gt;setlocale()&lt;/code&gt; と&lt;/a&gt;同様にロケールコードのデフォルトエンコーディングになります。</target>
        </trans-unit>
        <trans-unit id="5e03a404aa9f2043079442bcf94d4ec5e79efc91" translate="yes" xml:space="preserve">
          <source>If the given section exists, set the given option to the specified value; otherwise raise &lt;a href=&quot;#configparser.NoSectionError&quot;&gt;&lt;code&gt;NoSectionError&lt;/code&gt;&lt;/a&gt;. &lt;em&gt;option&lt;/em&gt; and &lt;em&gt;value&lt;/em&gt; must be strings; if not, &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">指定されたセクションが存在する場合、指定されたオプションを指定された値に設定します。それ以外の場合は&lt;a href=&quot;#configparser.NoSectionError&quot;&gt; &lt;code&gt;NoSectionError&lt;/code&gt; を発生させ&lt;/a&gt;ます。&lt;em&gt;オプション&lt;/em&gt;と&lt;em&gt;値&lt;/em&gt;は文字列でなければなりません。そうでない場合、&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="1402525cf09cdaaddadb10846e26316cab80e378" translate="yes" xml:space="preserve">
          <source>If the given section exists, set the given option to the specified value; otherwise raise &lt;a href=&quot;#configparser.NoSectionError&quot;&gt;&lt;code&gt;NoSectionError&lt;/code&gt;&lt;/a&gt;. While it is possible to use &lt;a href=&quot;#configparser.RawConfigParser&quot;&gt;&lt;code&gt;RawConfigParser&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;#configparser.ConfigParser&quot;&gt;&lt;code&gt;ConfigParser&lt;/code&gt;&lt;/a&gt; with &lt;em&gt;raw&lt;/em&gt; parameters set to true) for &lt;em&gt;internal&lt;/em&gt; storage of non-string values, full functionality (including interpolation and output to files) can only be achieved using string values.</source>
          <target state="translated">指定されたセクションが存在する場合、指定されたオプションを指定された値に設定します。それ以外の場合は&lt;a href=&quot;#configparser.NoSectionError&quot;&gt; &lt;code&gt;NoSectionError&lt;/code&gt; を発生させ&lt;/a&gt;ます。それは使用することが可能であるが&lt;a href=&quot;#configparser.RawConfigParser&quot;&gt; &lt;code&gt;RawConfigParser&lt;/code&gt; &lt;/a&gt;（または&lt;a href=&quot;#configparser.ConfigParser&quot;&gt; &lt;code&gt;ConfigParser&lt;/code&gt; &lt;/a&gt;有する&lt;em&gt;生&lt;/em&gt;をtrueに設定されたパラメータ）&lt;em&gt;内部&lt;/em&gt;の非文字列値の記憶、（ファイルに補間出力を含む）すべての機能は、文字列値を使用して達成することができます。</target>
        </trans-unit>
        <trans-unit id="25fbf997b0a78ead811d3ad55217a116fa50d909" translate="yes" xml:space="preserve">
          <source>If the handle is already closed, no error is raised.</source>
          <target state="translated">ハンドルが既に閉じられている場合は、エラーは発生しません。</target>
        </trans-unit>
        <trans-unit id="641b7d4d28be7e1599a1dccf300ba61a3ce1d4ca" translate="yes" xml:space="preserve">
          <source>If the header value can be recognized as a valid date of one form or another, this attribute will contain a &lt;a href=&quot;datetime#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; instance representing that date. If the timezone of the input date is specified as &lt;code&gt;-0000&lt;/code&gt; (indicating it is in UTC but contains no information about the source timezone), then &lt;a href=&quot;#email.headerregistry.DateHeader.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; will be a naive &lt;a href=&quot;datetime#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt;. If a specific timezone offset is found (including &lt;code&gt;+0000&lt;/code&gt;), then &lt;a href=&quot;#email.headerregistry.DateHeader.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; will contain an aware &lt;code&gt;datetime&lt;/code&gt; that uses &lt;a href=&quot;datetime#datetime.timezone&quot;&gt;&lt;code&gt;datetime.timezone&lt;/code&gt;&lt;/a&gt; to record the timezone offset.</source>
          <target state="translated">ヘッダー値が&lt;a href=&quot;datetime#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;形式の有効な日付として認識できる場合、この属性にはその日付を表すdatetimeインスタンスが含まれます。入力日付のタイムゾーンが &lt;code&gt;-0000&lt;/code&gt; （UTCであるがソースのタイムゾーンに関する情報が含まれていないことを示す）と指定されている場合、&lt;a href=&quot;#email.headerregistry.DateHeader.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;は単純な&lt;a href=&quot;datetime#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; になり&lt;/a&gt;ます。特定のオフセットのタイムゾーンが（を含む発見された場合 &lt;code&gt;+0000&lt;/code&gt; ）、その後、&lt;a href=&quot;#email.headerregistry.DateHeader.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;承知含まれます &lt;code&gt;datetime&lt;/code&gt; 用途があること&lt;a href=&quot;datetime#datetime.timezone&quot;&gt; &lt;code&gt;datetime.timezone&lt;/code&gt; &lt;/a&gt;タイムゾーンのオフセットを記録します。</target>
        </trans-unit>
        <trans-unit id="06a777ed5d38b562baf8f3d74ea5382e00d35e44" translate="yes" xml:space="preserve">
          <source>If the higher-level protocol supports its own compression mechanism, you can use &lt;a href=&quot;#ssl.OP_NO_COMPRESSION&quot;&gt;&lt;code&gt;OP_NO_COMPRESSION&lt;/code&gt;&lt;/a&gt; to disable SSL-level compression.</source>
          <target state="translated">上位レベルのプロトコルが独自の圧縮メカニズムをサポートしている場合は、&lt;a href=&quot;#ssl.OP_NO_COMPRESSION&quot;&gt; &lt;code&gt;OP_NO_COMPRESSION&lt;/code&gt; &lt;/a&gt;を使用してSSLレベルの圧縮を無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="52c8f2ad85aead8b4995e491e22aafadac0261c9" translate="yes" xml:space="preserve">
          <source>If the index or keyword refers to an item that does not exist, then an &lt;a href=&quot;exceptions#IndexError&quot;&gt;&lt;code&gt;IndexError&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; should be raised.</source>
          <target state="translated">インデックスまたはキーワードが存在しないアイテムを参照している場合、&lt;a href=&quot;exceptions#IndexError&quot;&gt; &lt;code&gt;IndexError&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;exceptions#KeyError&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="c788569ddd7977c4b0bf996b77dcb6e2c7a3c442" translate="yes" xml:space="preserve">
          <source>If the initial response check returns &lt;code&gt;None&lt;/code&gt;, or if &lt;em&gt;initial_response_ok&lt;/em&gt; is false, &lt;code&gt;authobject()&lt;/code&gt; will be called to process the server&amp;rsquo;s challenge response; the &lt;em&gt;challenge&lt;/em&gt; argument it is passed will be a &lt;code&gt;bytes&lt;/code&gt;. It should return ASCII &lt;code&gt;str&lt;/code&gt;&lt;em&gt;data&lt;/em&gt; that will be base64 encoded and sent to the server.</source>
          <target state="translated">初期応答チェックで &lt;code&gt;None&lt;/code&gt; が返された場合、または&lt;em&gt;initial_response_ok&lt;/em&gt;がfalseの場合、 &lt;code&gt;authobject()&lt;/code&gt; が呼び出されてサーバーのチャレンジ応答が処理されます。&lt;em&gt;チャレンジ&lt;/em&gt;それが渡された引数になります &lt;code&gt;bytes&lt;/code&gt; 。これは、base64でエンコードされ、サーバーに送信されるASCII &lt;code&gt;str&lt;/code&gt; &lt;em&gt;データ&lt;/em&gt;を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="dab9d8717f742399cb738b981063ba490b7eb6fd" translate="yes" xml:space="preserve">
          <source>If the input path is not a list (as is the case for frozen packages) it is returned unchanged. The input path is not modified; an extended copy is returned. Items are only appended to the copy at the end.</source>
          <target state="translated">入力パスがリストでない場合 (フリーズしたパッケージの場合のように)は、変更されずに返されます。入力パスは変更されず、拡張コピーが返されます。アイテムは、最後にコピーに追加されるだけです。</target>
        </trans-unit>
        <trans-unit id="b943d29ac87cd73e259d10ec9f1b9fd2ca008d7c" translate="yes" xml:space="preserve">
          <source>If the insertion would cause a bounded deque to grow beyond &lt;em&gt;maxlen&lt;/em&gt;, an &lt;a href=&quot;exceptions#IndexError&quot;&gt;&lt;code&gt;IndexError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">挿入によって制限された両端キューが&lt;em&gt;maxlen&lt;/em&gt;を超える場合、&lt;a href=&quot;exceptions#IndexError&quot;&gt; &lt;code&gt;IndexError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="ed6b40b45f9572155a78f6d589785061f5e1cae3" translate="yes" xml:space="preserve">
          <source>If the instance &lt;a href=&quot;stdtypes#object.__dict__&quot;&gt;&lt;code&gt;__dict__&lt;/code&gt;&lt;/a&gt; is shadowed by another member (for example a property) then this function will be unable to find instance members.</source>
          <target state="translated">インスタンス&lt;a href=&quot;stdtypes#object.__dict__&quot;&gt; &lt;code&gt;__dict__&lt;/code&gt; &lt;/a&gt;が別のメンバー（プロパティなど）によってシャドウされている場合、この関数はインスタンスメンバーを見つけることができません。</target>
        </trans-unit>
        <trans-unit id="bb4531fcea1f06a7582067573022ca8343fb967f" translate="yes" xml:space="preserve">
          <source>If the integer &lt;em&gt;waitflag&lt;/em&gt; argument is present, the action depends on its value: if it is zero, the lock is only acquired if it can be acquired immediately without waiting, while if it is nonzero, the lock is acquired unconditionally as above.</source>
          <target state="translated">整数の&lt;em&gt;waitflag&lt;/em&gt;引数が存在する場合、アクションはその値に依存します。ゼロの場合、ロックは待機せずにすぐに取得できる場合にのみ取得されます。ゼロ以外の場合、上記のようにロックは無条件に取得されます。</target>
        </trans-unit>
        <trans-unit id="205ca1ee8e670ddfe86eb319c90becb94497b60e" translate="yes" xml:space="preserve">
          <source>If the internal counter is greater than zero, decrement it by one and return &lt;code&gt;True&lt;/code&gt; immediately. If it is zero, wait until a &lt;a href=&quot;#asyncio.Semaphore.release&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt; is called and return &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">内部カウンタが0より大きい場合は、1だけ減らし、すぐに &lt;code&gt;True&lt;/code&gt; を返します。ゼロの場合は、&lt;a href=&quot;#asyncio.Semaphore.release&quot;&gt; &lt;code&gt;release()&lt;/code&gt; &lt;/a&gt;が呼び出されるまで待機し、 &lt;code&gt;True&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9198aebf4f31811d32099cd373d77078c5c73698" translate="yes" xml:space="preserve">
          <source>If the internal counter is larger than zero on entry, decrement it by one and return &lt;code&gt;True&lt;/code&gt; immediately.</source>
          <target state="translated">入力時に内部カウンターがゼロより大きい場合は、カウンターを1つ減らし、すぐに &lt;code&gt;True&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="21e399ee49393f3430f9b48c05c804f297ac4618" translate="yes" xml:space="preserve">
          <source>If the internal counter is zero on entry, block until awoken by a call to &lt;a href=&quot;#threading.Semaphore.release&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt;. Once awoken (and the counter is greater than 0), decrement the counter by 1 and return &lt;code&gt;True&lt;/code&gt;. Exactly one thread will be awoken by each call to &lt;a href=&quot;#threading.Semaphore.release&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt;. The order in which threads are awoken should not be relied on.</source>
          <target state="translated">エントリの内部カウンタがゼロの場合、&lt;a href=&quot;#threading.Semaphore.release&quot;&gt; &lt;code&gt;release()&lt;/code&gt; の&lt;/a&gt;呼び出しによって起こされるまでブロックします。目覚めたら（そしてカウンターが0より大きい場合）、カウンターを1だけ減らし、 &lt;code&gt;True&lt;/code&gt; を返します。&lt;a href=&quot;#threading.Semaphore.release&quot;&gt; &lt;code&gt;release()&lt;/code&gt; を&lt;/a&gt;呼び出すたびに、正確に1つのスレッドが起こされます。スレッドが起こされる順序に依存すべきではありません。</target>
        </trans-unit>
        <trans-unit id="9ae60cc570833d155b59d2cc8b8afcbadf08444b" translate="yes" xml:space="preserve">
          <source>If the internal limits of the C version are exceeded, constructing a decimal raises &lt;a href=&quot;#decimal.InvalidOperation&quot;&gt;&lt;code&gt;InvalidOperation&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">Cバージョンの内部制限を超えている場合、10進数を作成すると&lt;a href=&quot;#decimal.InvalidOperation&quot;&gt; &lt;code&gt;InvalidOperation&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="8ffeab8a7c96e27484e303216d68be0fc6343fa6" translate="yes" xml:space="preserve">
          <source>If the interpreter would have been started with &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-o&quot;&gt;&lt;code&gt;-O&lt;/code&gt;&lt;/a&gt;, the sample would have printed &lt;code&gt;c_long(1)&lt;/code&gt;, or &lt;code&gt;c_long(2)&lt;/code&gt; if &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-oo&quot;&gt;&lt;code&gt;-OO&lt;/code&gt;&lt;/a&gt; would have been specified.</source>
          <target state="translated">インタープリターが&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-o&quot;&gt; &lt;code&gt;-O&lt;/code&gt; &lt;/a&gt;で開始された場合、サンプルは &lt;code&gt;c_long(1)&lt;/code&gt; を出力し、 &lt;code&gt;c_long(2)&lt;/code&gt; が指定された場合は&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-oo&quot;&gt; &lt;code&gt;-OO&lt;/code&gt; &lt;/a&gt;（2）を出力します。</target>
        </trans-unit>
        <trans-unit id="7ef843c9a43f59994d3da2c5e8418b405453ca10" translate="yes" xml:space="preserve">
          <source>If the key already exists, this function opens the existing key.</source>
          <target state="translated">既にキーが存在する場合、この関数は既存のキーを開きます。</target>
        </trans-unit>
        <trans-unit id="509b60b16f13bbedfe1f6d9e50bffcd673298294" translate="yes" xml:space="preserve">
          <source>If the key is not on the reflection list, the function succeeds but has no effect. Disabling reflection for a key does not affect reflection of any subkeys.</source>
          <target state="translated">キーが反映リストにない場合、この関数は成功しますが、何の効果もありません。キーの反射を無効にしても、サブキーの反射には影響しません。</target>
        </trans-unit>
        <trans-unit id="930e9f6ed338a6954d9cbd0e2a7335e5749df5c2" translate="yes" xml:space="preserve">
          <source>If the key specified by the &lt;em&gt;sub_key&lt;/em&gt; parameter does not exist, the SetValue function creates it.</source>
          <target state="translated">&lt;em&gt;sub_key&lt;/em&gt;パラメータで指定されたキーが存在しない場合、SetValue関数がそれを作成します。</target>
        </trans-unit>
        <trans-unit id="7f0fd305b3a1c159e43727b6d7cbb51944be9b83" translate="yes" xml:space="preserve">
          <source>If the listener object uses a socket then &lt;em&gt;backlog&lt;/em&gt; (1 by default) is passed to the &lt;a href=&quot;socket#socket.socket.listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt; method of the socket once it has been bound.</source>
          <target state="translated">リスナーオブジェクトがソケットを使用する場合、バインドされると、&lt;em&gt;バックログ&lt;/em&gt;（デフォルトでは1）がソケットの&lt;a href=&quot;socket#socket.socket.listen&quot;&gt; &lt;code&gt;listen()&lt;/code&gt; &lt;/a&gt;メソッドに渡されます。</target>
        </trans-unit>
        <trans-unit id="4fcbb3ff56b47c3934c001b5fdf01a88c7f7abf9" translate="yes" xml:space="preserve">
          <source>If the lock is &lt;em&gt;unlocked&lt;/em&gt;, a &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">ロックが&lt;em&gt;ロック解除される&lt;/em&gt;と、&lt;a href=&quot;exceptions#RuntimeError&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="0cd48a8f0e050bbf8d1af3c021ed42cd478aed78" translate="yes" xml:space="preserve">
          <source>If the locking flags &lt;a href=&quot;os#os.O_SHLOCK&quot;&gt;&lt;code&gt;O_SHLOCK&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;os#os.O_EXLOCK&quot;&gt;&lt;code&gt;O_EXLOCK&lt;/code&gt;&lt;/a&gt; are present in the &lt;a href=&quot;os#module-os&quot;&gt;&lt;code&gt;os&lt;/code&gt;&lt;/a&gt; module (on BSD only), the &lt;a href=&quot;os#os.open&quot;&gt;&lt;code&gt;os.open()&lt;/code&gt;&lt;/a&gt; function provides an alternative to the &lt;a href=&quot;#fcntl.lockf&quot;&gt;&lt;code&gt;lockf()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#fcntl.flock&quot;&gt;&lt;code&gt;flock()&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="translated">ロックフラグ&lt;a href=&quot;os#os.O_SHLOCK&quot;&gt; &lt;code&gt;O_SHLOCK&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;os#os.O_EXLOCK&quot;&gt; &lt;code&gt;O_EXLOCK&lt;/code&gt; &lt;/a&gt;が&lt;a href=&quot;os#module-os&quot;&gt; &lt;code&gt;os&lt;/code&gt; &lt;/a&gt;モジュールに存在する場合（BSDのみ）、&lt;a href=&quot;os#os.open&quot;&gt; &lt;code&gt;os.open()&lt;/code&gt; &lt;/a&gt;関数は、&lt;a href=&quot;#fcntl.lockf&quot;&gt; &lt;code&gt;lockf()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#fcntl.flock&quot;&gt; &lt;code&gt;flock()&lt;/code&gt; &lt;/a&gt;関数の代替手段を提供します。</target>
        </trans-unit>
        <trans-unit id="266c606d27bf00d6844ea3d600920e9ed72976cd" translate="yes" xml:space="preserve">
          <source>If the message id for &lt;em&gt;context&lt;/em&gt; is not found in the catalog, and a fallback is specified, the request is forwarded to the fallback&amp;rsquo;s &lt;a href=&quot;#gettext.npgettext&quot;&gt;&lt;code&gt;npgettext()&lt;/code&gt;&lt;/a&gt; method. Otherwise, when &lt;em&gt;n&lt;/em&gt; is 1 &lt;em&gt;singular&lt;/em&gt; is returned, and &lt;em&gt;plural&lt;/em&gt; is returned in all other cases.</source>
          <target state="translated">&lt;em&gt;コンテキスト&lt;/em&gt;のメッセージID がカタログで見つからず、フォールバックが指定されている場合、リクエストはフォールバックの&lt;a href=&quot;#gettext.npgettext&quot;&gt; &lt;code&gt;npgettext()&lt;/code&gt; &lt;/a&gt;メソッドに転送されます。それ以外の場合、&lt;em&gt;n&lt;/em&gt;が1の&lt;em&gt;場合&lt;/em&gt;は&lt;em&gt;単数&lt;/em&gt;が返され、それ以外の場合は&lt;em&gt;複数&lt;/em&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="83b4d9a88e07f7820cdb0b2639ae3a66c2f8ddbd" translate="yes" xml:space="preserve">
          <source>If the message id is not found in the catalog, and a fallback is specified, the request is forwarded to the fallback&amp;rsquo;s &lt;a href=&quot;#gettext.NullTranslations.ngettext&quot;&gt;&lt;code&gt;ngettext()&lt;/code&gt;&lt;/a&gt; method. Otherwise, when &lt;em&gt;n&lt;/em&gt; is 1 &lt;em&gt;singular&lt;/em&gt; is returned, and &lt;em&gt;plural&lt;/em&gt; is returned in all other cases.</source>
          <target state="translated">メッセージIDがカタログで見つからず、フォールバックが指定されている場合、リクエストはフォールバックの&lt;a href=&quot;#gettext.NullTranslations.ngettext&quot;&gt; &lt;code&gt;ngettext()&lt;/code&gt; &lt;/a&gt;メソッドに転送されます。それ以外の場合、&lt;em&gt;n&lt;/em&gt;が1の&lt;em&gt;場合&lt;/em&gt;は&lt;em&gt;単数&lt;/em&gt;が返され、それ以外の場合は&lt;em&gt;複数&lt;/em&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="84aa620a75940f54a9d2650b7be09bf90a61d67a" translate="yes" xml:space="preserve">
          <source>If the message is a &lt;code&gt;multipart/alternative&lt;/code&gt;, create a new message object, pass all of the arguments to its &lt;a href=&quot;#email.message.EmailMessage.set_content&quot;&gt;&lt;code&gt;set_content()&lt;/code&gt;&lt;/a&gt; method, and &lt;a href=&quot;email.compat32-message#email.message.Message.attach&quot;&gt;&lt;code&gt;attach()&lt;/code&gt;&lt;/a&gt; it to the &lt;code&gt;multipart&lt;/code&gt;. If the message is a non-&lt;code&gt;multipart&lt;/code&gt; or &lt;code&gt;multipart/related&lt;/code&gt;, call &lt;a href=&quot;#email.message.EmailMessage.make_alternative&quot;&gt;&lt;code&gt;make_alternative()&lt;/code&gt;&lt;/a&gt; and then proceed as above. If the message is any other type of &lt;code&gt;multipart&lt;/code&gt;, raise a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. If &lt;em&gt;content_manager&lt;/em&gt; is not specified, use the &lt;code&gt;content_manager&lt;/code&gt; specified by the current &lt;a href=&quot;email.policy#module-email.policy&quot;&gt;&lt;code&gt;policy&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">メッセージが &lt;code&gt;multipart/alternative&lt;/code&gt; の場合は、新しいメッセージオブジェクトを作成し、すべての引数を&lt;a href=&quot;#email.message.EmailMessage.set_content&quot;&gt; &lt;code&gt;set_content()&lt;/code&gt; &lt;/a&gt;メソッドに渡し、&lt;a href=&quot;email.compat32-message#email.message.Message.attach&quot;&gt; &lt;code&gt;attach()&lt;/code&gt; &lt;/a&gt;して &lt;code&gt;multipart&lt;/code&gt; に渡します。メッセージが非 &lt;code&gt;multipart&lt;/code&gt; または &lt;code&gt;multipart/related&lt;/code&gt; の場合は、&lt;a href=&quot;#email.message.EmailMessage.make_alternative&quot;&gt; &lt;code&gt;make_alternative()&lt;/code&gt; &lt;/a&gt;を呼び出してから上記の手順を実行します。メッセージが他のタイプの &lt;code&gt;multipart&lt;/code&gt; 場合は、&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; を送出し&lt;/a&gt;ます。&lt;em&gt;content_manager&lt;/em&gt;が指定されていない場合は、現在の&lt;a href=&quot;email.policy#module-email.policy&quot;&gt; &lt;code&gt;policy&lt;/code&gt; &lt;/a&gt;指定されている &lt;code&gt;content_manager&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="0b6c62590a9b06138d696cdbccce215f1bf1d175" translate="yes" xml:space="preserve">
          <source>If the message is a &lt;code&gt;multipart/mixed&lt;/code&gt;, create a new message object, pass all of the arguments to its &lt;a href=&quot;#email.message.EmailMessage.set_content&quot;&gt;&lt;code&gt;set_content()&lt;/code&gt;&lt;/a&gt; method, and &lt;a href=&quot;email.compat32-message#email.message.Message.attach&quot;&gt;&lt;code&gt;attach()&lt;/code&gt;&lt;/a&gt; it to the &lt;code&gt;multipart&lt;/code&gt;. If the message is a non-&lt;code&gt;multipart&lt;/code&gt;, &lt;code&gt;multipart/related&lt;/code&gt;, or &lt;code&gt;multipart/alternative&lt;/code&gt;, call &lt;a href=&quot;#email.message.EmailMessage.make_mixed&quot;&gt;&lt;code&gt;make_mixed()&lt;/code&gt;&lt;/a&gt; and then proceed as above. If &lt;em&gt;content_manager&lt;/em&gt; is not specified, use the &lt;code&gt;content_manager&lt;/code&gt; specified by the current &lt;a href=&quot;email.policy#module-email.policy&quot;&gt;&lt;code&gt;policy&lt;/code&gt;&lt;/a&gt;. If the added part has no &lt;em&gt;Content-Disposition&lt;/em&gt; header, add one with the value &lt;code&gt;attachment&lt;/code&gt;. This method can be used both for explicit attachments (&lt;em&gt;Content-Disposition: attachment&lt;/em&gt;) and &lt;code&gt;inline&lt;/code&gt; attachments (&lt;em&gt;Content-Disposition: inline&lt;/em&gt;), by passing appropriate options to the &lt;code&gt;content_manager&lt;/code&gt;.</source>
          <target state="translated">メッセージが &lt;code&gt;multipart/mixed&lt;/code&gt; の場合は、新しいメッセージオブジェクトを作成し、すべての引数を&lt;a href=&quot;#email.message.EmailMessage.set_content&quot;&gt; &lt;code&gt;set_content()&lt;/code&gt; &lt;/a&gt;メソッドに渡し、&lt;a href=&quot;email.compat32-message#email.message.Message.attach&quot;&gt; &lt;code&gt;attach()&lt;/code&gt; &lt;/a&gt;して &lt;code&gt;multipart&lt;/code&gt; に渡します。メッセージが非 &lt;code&gt;multipart&lt;/code&gt; 、 &lt;code&gt;multipart/related&lt;/code&gt; 、または &lt;code&gt;multipart/alternative&lt;/code&gt; の場合は、&lt;a href=&quot;#email.message.EmailMessage.make_mixed&quot;&gt; &lt;code&gt;make_mixed()&lt;/code&gt; &lt;/a&gt;を呼び出してから上記の手順に進みます。&lt;em&gt;content_manager&lt;/em&gt;が指定されていない場合は、現在の&lt;a href=&quot;email.policy#module-email.policy&quot;&gt; &lt;code&gt;policy&lt;/code&gt; &lt;/a&gt;指定されている &lt;code&gt;content_manager&lt;/code&gt; を使用します。追加されたパーツに&lt;em&gt;Content-Disposition&lt;/em&gt;ヘッダーがない場合は、値が &lt;code&gt;attachment&lt;/code&gt; のヘッダーを追加します&lt;em&gt;&lt;/em&gt;。このメソッドは、適切なオプションを &lt;code&gt;content_manager&lt;/code&gt; に渡すことにより、明示的な添付ファイル（&lt;em&gt;Content-Disposition：attachment&lt;/em&gt;）と &lt;code&gt;inline&lt;/code&gt; 添付ファイル（&lt;em&gt;Content-Disposition：inline&lt;/em&gt;）の両方に使用できます。</target>
        </trans-unit>
        <trans-unit id="242ebb9aa3a221a1cc2e7cc02579fdb6a91649b7" translate="yes" xml:space="preserve">
          <source>If the message is a &lt;code&gt;multipart/related&lt;/code&gt;, create a new message object, pass all of the arguments to its &lt;a href=&quot;#email.message.EmailMessage.set_content&quot;&gt;&lt;code&gt;set_content()&lt;/code&gt;&lt;/a&gt; method, and &lt;a href=&quot;email.compat32-message#email.message.Message.attach&quot;&gt;&lt;code&gt;attach()&lt;/code&gt;&lt;/a&gt; it to the &lt;code&gt;multipart&lt;/code&gt;. If the message is a non-&lt;code&gt;multipart&lt;/code&gt;, call &lt;a href=&quot;#email.message.EmailMessage.make_related&quot;&gt;&lt;code&gt;make_related()&lt;/code&gt;&lt;/a&gt; and then proceed as above. If the message is any other type of &lt;code&gt;multipart&lt;/code&gt;, raise a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. If &lt;em&gt;content_manager&lt;/em&gt; is not specified, use the &lt;code&gt;content_manager&lt;/code&gt; specified by the current &lt;a href=&quot;email.policy#module-email.policy&quot;&gt;&lt;code&gt;policy&lt;/code&gt;&lt;/a&gt;. If the added part has no &lt;em&gt;Content-Disposition&lt;/em&gt; header, add one with the value &lt;code&gt;inline&lt;/code&gt;.</source>
          <target state="translated">メッセージが &lt;code&gt;multipart/related&lt;/code&gt; の場合は、新しいメッセージオブジェクトを作成し、すべての引数を&lt;a href=&quot;#email.message.EmailMessage.set_content&quot;&gt; &lt;code&gt;set_content()&lt;/code&gt; &lt;/a&gt;メソッドに渡し、&lt;a href=&quot;email.compat32-message#email.message.Message.attach&quot;&gt; &lt;code&gt;attach()&lt;/code&gt; &lt;/a&gt;して &lt;code&gt;multipart&lt;/code&gt; に渡します。メッセージが非 &lt;code&gt;multipart&lt;/code&gt; 場合は、&lt;a href=&quot;#email.message.EmailMessage.make_related&quot;&gt; &lt;code&gt;make_related()&lt;/code&gt; &lt;/a&gt;を呼び出してから上記の手順を実行します。メッセージが他のタイプの &lt;code&gt;multipart&lt;/code&gt; 場合は、&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; を送出し&lt;/a&gt;ます。&lt;em&gt;content_manager&lt;/em&gt;が指定されていない場合は、現在の&lt;a href=&quot;email.policy#module-email.policy&quot;&gt; &lt;code&gt;policy&lt;/code&gt; &lt;/a&gt;指定されている &lt;code&gt;content_manager&lt;/code&gt; を使用します。追加されたパーツに&lt;em&gt;Content-Disposition&lt;/em&gt;ヘッダーがない場合は、値 &lt;code&gt;inline&lt;/code&gt; のヘッダーを追加します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9c9d1deafb768d7777ddc466b02dc8f72673a7cf" translate="yes" xml:space="preserve">
          <source>If the message object contains binary data that is not encoded according to RFC standards, the non-compliant data will be replaced by unicode &amp;ldquo;unknown character&amp;rdquo; code points. (See also &lt;a href=&quot;#email.message.Message.as_bytes&quot;&gt;&lt;code&gt;as_bytes()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;email.generator#email.generator.BytesGenerator&quot;&gt;&lt;code&gt;BytesGenerator&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">メッセージオブジェクトにRFC標準に従ってエンコードされていないバイナリデータが含まれている場合、非準拠のデータはUnicodeの「不明な文字」コードポイントに置き換えられます。（&lt;a href=&quot;#email.message.Message.as_bytes&quot;&gt; &lt;code&gt;as_bytes()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;email.generator#email.generator.BytesGenerator&quot;&gt; &lt;code&gt;BytesGenerator&lt;/code&gt; &lt;/a&gt;も参照してください。）</target>
        </trans-unit>
        <trans-unit id="1d471d00aa6a8fd988a0ba607f8c74c947b07502" translate="yes" xml:space="preserve">
          <source>If the method returns &lt;code&gt;False&lt;/code&gt; then the &lt;a href=&quot;#concurrent.futures.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; was cancelled, i.e. &lt;a href=&quot;#concurrent.futures.Future.cancel&quot;&gt;&lt;code&gt;Future.cancel()&lt;/code&gt;&lt;/a&gt; was called and returned &lt;code&gt;True&lt;/code&gt;. Any threads waiting on the &lt;a href=&quot;#concurrent.futures.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; completing (i.e. through &lt;a href=&quot;#concurrent.futures.as_completed&quot;&gt;&lt;code&gt;as_completed()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#concurrent.futures.wait&quot;&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/a&gt;) will be woken up.</source>
          <target state="translated">メソッドが &lt;code&gt;False&lt;/code&gt; を返した場合、&lt;a href=&quot;#concurrent.futures.Future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt;はキャンセルされました。つまり、&lt;a href=&quot;#concurrent.futures.Future.cancel&quot;&gt; &lt;code&gt;Future.cancel()&lt;/code&gt; &lt;/a&gt;が呼び出されて &lt;code&gt;True&lt;/code&gt; が返されました。&lt;a href=&quot;#concurrent.futures.Future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; が&lt;/a&gt;完了するのを（つまり、&lt;a href=&quot;#concurrent.futures.as_completed&quot;&gt; &lt;code&gt;as_completed()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#concurrent.futures.wait&quot;&gt; &lt;code&gt;wait()&lt;/code&gt; を&lt;/a&gt;介して）待機しているスレッドはすべて起こされます。</target>
        </trans-unit>
        <trans-unit id="3cec9785f35a66b9250f6994cb4b5ad2f020d3b4" translate="yes" xml:space="preserve">
          <source>If the method returns &lt;code&gt;True&lt;/code&gt; then the &lt;a href=&quot;#concurrent.futures.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; was not cancelled and has been put in the running state, i.e. calls to &lt;a href=&quot;#concurrent.futures.Future.running&quot;&gt;&lt;code&gt;Future.running()&lt;/code&gt;&lt;/a&gt; will return &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">メソッドが &lt;code&gt;True&lt;/code&gt; を返す場合、&lt;a href=&quot;#concurrent.futures.Future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt;はキャンセルされておらず、実行状態になっています。つまり、&lt;a href=&quot;#concurrent.futures.Future.running&quot;&gt; &lt;code&gt;Future.running()&lt;/code&gt; &lt;/a&gt;を呼び出すと &lt;code&gt;True&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="fbff94a7b3ccf99de926f202b3c2b1024530b6b5" translate="yes" xml:space="preserve">
          <source>If the method succeeds, the entire key, including all of its values, is removed. If the method fails, an &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">メソッドが成功すると、すべての値を含むキー全体が削除されます。メソッドが失敗すると、&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="0c7e815087343f8292c99aab7ab0f093f5891323" translate="yes" xml:space="preserve">
          <source>If the method succeeds, the server&amp;rsquo;s response is returned. If the server refuses posting, a &lt;a href=&quot;#nntplib.NNTPReplyError&quot;&gt;&lt;code&gt;NNTPReplyError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">メソッドが成功すると、サーバーの応答が返されます。サーバーが投稿を拒否すると、&lt;a href=&quot;#nntplib.NNTPReplyError&quot;&gt; &lt;code&gt;NNTPReplyError&lt;/code&gt; &lt;/a&gt;が送出されます。</target>
        </trans-unit>
        <trans-unit id="7153563f652430df4d79eea119afe5c6dc69a83e" translate="yes" xml:space="preserve">
          <source>If the mock has an explicit &lt;em&gt;return_value&lt;/em&gt; set then calls are not passed to the wrapped object and the &lt;em&gt;return_value&lt;/em&gt; is returned instead.</source>
          <target state="translated">モックに明示的な&lt;em&gt;return_valueが&lt;/em&gt;設定されている場合、呼び出しはラップされたオブジェクトに渡されず、代わりに&lt;em&gt;return_value&lt;/em&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="45919ac1b7a80b5e3b67f287a2f90644613d8e96" translate="yes" xml:space="preserve">
          <source>If the module or package is accessible via the normal import mechanism, a wrapper around the relevant part of that machinery is returned. Returns &lt;code&gt;None&lt;/code&gt; if the module cannot be found or imported. If the named module is not already imported, its containing package (if any) is imported, in order to establish the package &lt;code&gt;__path__&lt;/code&gt;.</source>
          <target state="translated">通常のインポートメカニズムを介してモジュールまたはパッケージにアクセスできる場合、その機構の関連部分のラッパーが返されます。モジュールが見つからないかインポートできない場合は、 &lt;code&gt;None&lt;/code&gt; を返します。名前付きモジュールがまだインポートされていない場合は、パッケージ &lt;code&gt;__path__&lt;/code&gt; を確立するために、含まれているパッケージ（存在する場合）がインポートされます。</target>
        </trans-unit>
        <trans-unit id="51e5842707c11d94e17db137bb67b47236a037bf" translate="yes" xml:space="preserve">
          <source>If the name is used as the target of a function or class statement, this will be true.</source>
          <target state="translated">関数やクラス文のターゲットとして名前が使われている場合、これは真になります。</target>
        </trans-unit>
        <trans-unit id="cc0362f1195e807cb7d35fcee8c326c2a06bfad6" translate="yes" xml:space="preserve">
          <source>If the named module is in a package, that package is imported as a side effect of invoking this function.</source>
          <target state="translated">指定されたモジュールがパッケージ内にある場合、そのパッケージはこの関数を呼び出した副作用としてインポートされます。</target>
        </trans-unit>
        <trans-unit id="9189c0d6152e209a08169bddf71ad00af16f14e9" translate="yes" xml:space="preserve">
          <source>If the new limit is too low at the current recursion depth, a &lt;a href=&quot;exceptions#RecursionError&quot;&gt;&lt;code&gt;RecursionError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">現在の再帰の深さで新しい制限が低すぎる場合、&lt;a href=&quot;exceptions#RecursionError&quot;&gt; &lt;code&gt;RecursionError&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="8460feb89a7b7829874aae5225965d9b87e2ad34" translate="yes" xml:space="preserve">
          <source>If the normalized value of days lies outside the indicated range, &lt;a href=&quot;exceptions#OverflowError&quot;&gt;&lt;code&gt;OverflowError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">日数の正規化された値が示された範囲外にある場合、&lt;a href=&quot;exceptions#OverflowError&quot;&gt; &lt;code&gt;OverflowError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="588410c54abe56967f1464e64a03d18c20cd3967" translate="yes" xml:space="preserve">
          <source>If the object does not provide &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__dir__&quot;&gt;&lt;code&gt;__dir__()&lt;/code&gt;&lt;/a&gt;, the function tries its best to gather information from the object&amp;rsquo;s &lt;a href=&quot;stdtypes#object.__dict__&quot;&gt;&lt;code&gt;__dict__&lt;/code&gt;&lt;/a&gt; attribute, if defined, and from its type object. The resulting list is not necessarily complete, and may be inaccurate when the object has a custom &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattr__&quot;&gt;&lt;code&gt;__getattr__()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">オブジェクトが&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__dir__&quot;&gt; &lt;code&gt;__dir__()&lt;/code&gt; &lt;/a&gt;提供しない場合、関数はオブジェクトの&lt;a href=&quot;stdtypes#object.__dict__&quot;&gt; &lt;code&gt;__dict__&lt;/code&gt; &lt;/a&gt;属性（定義されている場合）およびその型オブジェクトから情報を収集するために最善を尽くします。結果のリストは完全である必要はなく、オブジェクトにカスタムの&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattr__&quot;&gt; &lt;code&gt;__getattr__()&lt;/code&gt; &lt;/a&gt;がある場合は不正確になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="00cb3870e9b06174890128e7e72fbdcdb2084f55" translate="yes" xml:space="preserve">
          <source>If the object has a method named &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__dir__&quot;&gt;&lt;code&gt;__dir__()&lt;/code&gt;&lt;/a&gt;, this method will be called and must return the list of attributes. This allows objects that implement a custom &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattr__&quot;&gt;&lt;code&gt;__getattr__()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattribute__&quot;&gt;&lt;code&gt;__getattribute__()&lt;/code&gt;&lt;/a&gt; function to customize the way &lt;a href=&quot;#dir&quot;&gt;&lt;code&gt;dir()&lt;/code&gt;&lt;/a&gt; reports their attributes.</source>
          <target state="translated">オブジェクトに&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__dir__&quot;&gt; &lt;code&gt;__dir__()&lt;/code&gt; &lt;/a&gt;という名前のメソッドがある場合、このメソッドが呼び出され、属性のリストを返す必要があります。これにより、カスタムの&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattr__&quot;&gt; &lt;code&gt;__getattr__()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattribute__&quot;&gt; &lt;code&gt;__getattribute__()&lt;/code&gt; &lt;/a&gt;関数を実装するオブジェクトが、&lt;a href=&quot;#dir&quot;&gt; &lt;code&gt;dir()&lt;/code&gt; &lt;/a&gt;が属性を報告する方法をカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="6efa5f83d57e360fb04084d7429ce45f6b697027" translate="yes" xml:space="preserve">
          <source>If the object is a module object, the list contains the names of the module&amp;rsquo;s attributes.</source>
          <target state="translated">オブジェクトがモジュールオブジェクトの場合、リストにはモジュールの属性の名前が含まれます。</target>
        </trans-unit>
        <trans-unit id="7573a086962ae326425c85210e2af2f83614b6a3" translate="yes" xml:space="preserve">
          <source>If the object is a type or class object, the list contains the names of its attributes, and recursively of the attributes of its bases.</source>
          <target state="translated">オブジェクトが型やクラスのオブジェクトである場合、リストはその属性の名前と、そのベースの属性の再帰的な名前を含みます。</target>
        </trans-unit>
        <trans-unit id="2997ac7e88144e3d7c1c1886f52b5f3da5581222" translate="yes" xml:space="preserve">
          <source>If the optional &lt;code&gt;infile&lt;/code&gt; and &lt;code&gt;outfile&lt;/code&gt; arguments are not specified, &lt;a href=&quot;sys#sys.stdin&quot;&gt;&lt;code&gt;sys.stdin&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;sys#sys.stdout&quot;&gt;&lt;code&gt;sys.stdout&lt;/code&gt;&lt;/a&gt; will be used respectively:</source>
          <target state="translated">オプションの &lt;code&gt;infile&lt;/code&gt; および &lt;code&gt;outfile&lt;/code&gt; 引数が指定されていない場合、それぞれ&lt;a href=&quot;sys#sys.stdin&quot;&gt; &lt;code&gt;sys.stdin&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;sys#sys.stdout&quot;&gt; &lt;code&gt;sys.stdout&lt;/code&gt; &lt;/a&gt;が使用されます。</target>
        </trans-unit>
        <trans-unit id="549e746dc68c5d98d85de52964752ff8fe6a8117" translate="yes" xml:space="preserve">
          <source>If the optional &lt;em&gt;allow_dotted_names&lt;/em&gt; argument is true and the instance does not have a &lt;code&gt;_dispatch()&lt;/code&gt; method, then if the requested method name contains periods, each component of the method name is searched for individually, with the effect that a simple hierarchical search is performed. The value found from this search is then called with the parameters from the request, and the return value is passed back to the client.</source>
          <target state="translated">オプションの&lt;em&gt;allow_dotted_names&lt;/em&gt;引数がtrueでインスタンスに &lt;code&gt;_dispatch()&lt;/code&gt; メソッドがない場合、リクエストされたメソッド名にピリオドが含まれていると、メソッド名の各コンポーネントが個別に検索され、単純な階層検索が実行されます。次に、この検索で​​見つかった値がリクエストのパラメーターで呼び出され、戻り値がクライアントに返されます。</target>
        </trans-unit>
        <trans-unit id="7bf594fe9f1e866693d0d56f18167c8228362f08" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;em&gt;exclude_empty&lt;/em&gt; is false, then &lt;a href=&quot;#doctest.DocTestFinder.find&quot;&gt;&lt;code&gt;DocTestFinder.find()&lt;/code&gt;&lt;/a&gt; will include tests for objects with empty docstrings.</source>
          <target state="translated">オプションの引数&lt;em&gt;exclude_empty&lt;/em&gt;がfalseの場合、&lt;a href=&quot;#doctest.DocTestFinder.find&quot;&gt; &lt;code&gt;DocTestFinder.find()&lt;/code&gt; &lt;/a&gt;は空のdocstringを持つオブジェクトのテストを含めます。</target>
        </trans-unit>
        <trans-unit id="4dda0a6681904db033d6436f3b4c07ed02a5cd5c" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;em&gt;recurse&lt;/em&gt; is false, then &lt;a href=&quot;#doctest.DocTestFinder.find&quot;&gt;&lt;code&gt;DocTestFinder.find()&lt;/code&gt;&lt;/a&gt; will only examine the given object, and not any contained objects.</source>
          <target state="translated">オプションの引数&lt;em&gt;recurse&lt;/em&gt;がfalseの場合、&lt;a href=&quot;#doctest.DocTestFinder.find&quot;&gt; &lt;code&gt;DocTestFinder.find()&lt;/code&gt; &lt;/a&gt;は指定されたオブジェクトのみを検査し、含まれているオブジェクトは検査しません。</target>
        </trans-unit>
        <trans-unit id="87f9d738288c72fc56cefc596ae3035e04fd6c01" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;em&gt;timeout&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt; (the default), the method blocks until the process whose &lt;a href=&quot;#multiprocessing.Process.join&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt; method is called terminates. If &lt;em&gt;timeout&lt;/em&gt; is a positive number, it blocks at most &lt;em&gt;timeout&lt;/em&gt; seconds. Note that the method returns &lt;code&gt;None&lt;/code&gt; if its process terminates or if the method times out. Check the process&amp;rsquo;s &lt;a href=&quot;#multiprocessing.Process.exitcode&quot;&gt;&lt;code&gt;exitcode&lt;/code&gt;&lt;/a&gt; to determine if it terminated.</source>
          <target state="translated">オプションの引数&lt;em&gt;timeout&lt;/em&gt;が &lt;code&gt;None&lt;/code&gt; （デフォルト）の場合、&lt;a href=&quot;#multiprocessing.Process.join&quot;&gt; &lt;code&gt;join()&lt;/code&gt; &lt;/a&gt;メソッドが呼び出されたプロセスが終了するまで、メソッドはブロックされます。&lt;em&gt;timeout&lt;/em&gt;が正の数の場合、最大で&lt;em&gt;timeout&lt;/em&gt;秒ブロックされます。プロセスが終了した場合、またはメソッドがタイムアウトした場合、メソッドは &lt;code&gt;None&lt;/code&gt; を返すことに注意してください。プロセスの終了&lt;a href=&quot;#multiprocessing.Process.exitcode&quot;&gt; &lt;code&gt;exitcode&lt;/code&gt; &lt;/a&gt;を調べて、プロセスが終了したかどうかを判別してください。</target>
        </trans-unit>
        <trans-unit id="907e323a441ade6004f0f9b1d15889b1a6cbc0b5" translate="yes" xml:space="preserve">
          <source>If the optional parameter &lt;em&gt;max_length&lt;/em&gt; is non-zero then the return value will be no longer than &lt;em&gt;max_length&lt;/em&gt;. This may mean that not all of the compressed input can be processed; and unconsumed data will be stored in the attribute &lt;a href=&quot;#zlib.Decompress.unconsumed_tail&quot;&gt;&lt;code&gt;unconsumed_tail&lt;/code&gt;&lt;/a&gt;. This bytestring must be passed to a subsequent call to &lt;a href=&quot;#zlib.decompress&quot;&gt;&lt;code&gt;decompress()&lt;/code&gt;&lt;/a&gt; if decompression is to continue. If &lt;em&gt;max_length&lt;/em&gt; is zero then the whole input is decompressed, and &lt;a href=&quot;#zlib.Decompress.unconsumed_tail&quot;&gt;&lt;code&gt;unconsumed_tail&lt;/code&gt;&lt;/a&gt; is empty.</source>
          <target state="translated">オプションのパラメーター&lt;em&gt;max_length&lt;/em&gt;がゼロ以外の場合、戻り値は&lt;em&gt;max_length&lt;/em&gt;以下になります。これは、圧縮された入力のすべてを処理できるわけではないことを意味する場合があります。消費されなかったデータは、属性&lt;a href=&quot;#zlib.Decompress.unconsumed_tail&quot;&gt; &lt;code&gt;unconsumed_tail&lt;/code&gt; に&lt;/a&gt;格納されます。解凍を続行する場合は、このバイト文字列を&lt;a href=&quot;#zlib.decompress&quot;&gt; &lt;code&gt;decompress()&lt;/code&gt; &lt;/a&gt;への後続の呼び出しに渡す必要があります。場合&lt;em&gt;MAX_LENGTHが&lt;/em&gt;ゼロである全ての入力が解凍され、され&lt;a href=&quot;#zlib.Decompress.unconsumed_tail&quot;&gt; &lt;code&gt;unconsumed_tail&lt;/code&gt; 属性は&lt;/a&gt;空です。</target>
        </trans-unit>
        <trans-unit id="1d1a61b6065550962e0f197aa4aa509c70c359be" translate="yes" xml:space="preserve">
          <source>If the optional second argument &lt;em&gt;mu&lt;/em&gt; is given, it is typically the mean of the &lt;em&gt;data&lt;/em&gt;. It can also be used to compute the second moment around a point that is not the mean. If it is missing or &lt;code&gt;None&lt;/code&gt; (the default), the arithmetic mean is automatically calculated.</source>
          <target state="translated">オプションの2番目の引数&lt;em&gt;mu&lt;/em&gt;が指定されている場合、これは通常、&lt;em&gt;データの&lt;/em&gt;平均です。また、平均ではない点の周りの2次モーメントを計算するためにも使用できます。欠落しているか、 &lt;code&gt;None&lt;/code&gt; （デフォルト）の場合、算術平均は自動的に計算されます。</target>
        </trans-unit>
        <trans-unit id="e99c895d04ea8fb9d48b5ad452d4282ff6838cfb" translate="yes" xml:space="preserve">
          <source>If the optional second argument &lt;em&gt;xbar&lt;/em&gt; is given, it should be the mean of &lt;em&gt;data&lt;/em&gt;. If it is missing or &lt;code&gt;None&lt;/code&gt; (the default), the mean is automatically calculated.</source>
          <target state="translated">オプションの2番目の引数&lt;em&gt;xbar&lt;/em&gt;が指定されている場合、それは&lt;em&gt;データ&lt;/em&gt;の平均でなければなりません。欠落しているか、 &lt;code&gt;None&lt;/code&gt; （デフォルト）の場合、平均は自動的に計算されます。</target>
        </trans-unit>
        <trans-unit id="519de9aef0c2fe8269af8bb45ede63861ec8669a" translate="yes" xml:space="preserve">
          <source>If the package cannot be located or loaded, or it uses a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; which does not support &lt;a href=&quot;importlib#importlib.abc.ResourceLoader.get_data&quot;&gt;&lt;code&gt;get_data&lt;/code&gt;&lt;/a&gt;, then &lt;code&gt;None&lt;/code&gt; is returned. In particular, the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; for &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-namespace-package&quot;&gt;namespace packages&lt;/a&gt; does not support &lt;a href=&quot;importlib#importlib.abc.ResourceLoader.get_data&quot;&gt;&lt;code&gt;get_data&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パッケージが置かまたはロードされ、またはそれを使用することができない場合は&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;、ローダー&lt;/a&gt;をサポートしていません&lt;a href=&quot;importlib#importlib.abc.ResourceLoader.get_data&quot;&gt; &lt;code&gt;get_data&lt;/code&gt; を&lt;/a&gt;、そして &lt;code&gt;None&lt;/code&gt; 返されません。特に、&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-namespace-package&quot;&gt;名前空間パッケージ&lt;/a&gt;の&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;ローダー&lt;/a&gt;は&lt;a href=&quot;importlib#importlib.abc.ResourceLoader.get_data&quot;&gt; &lt;code&gt;get_data&lt;/code&gt; を&lt;/a&gt;サポートしていません。</target>
        </trans-unit>
        <trans-unit id="2bf31cbb63bcd5170fdee78792fd311e362a5c3e" translate="yes" xml:space="preserve">
          <source>If the path contains a UNC path, drive will contain the host name and share, up to but not including the fourth separator. e.g. &lt;code&gt;splitdrive(&quot;//host/computer/dir&quot;)&lt;/code&gt; returns &lt;code&gt;(&quot;//host/computer&quot;, &quot;/dir&quot;)&lt;/code&gt;</source>
          <target state="translated">パスにUNCパスが含まれている場合、ドライブにはホスト名と共有が含まれますが、4番目の区切り文字は含まれません。たとえば、 &lt;code&gt;splitdrive(&quot;//host/computer/dir&quot;)&lt;/code&gt; は &lt;code&gt;(&quot;//host/computer&quot;, &quot;/dir&quot;)&lt;/code&gt; 返します</target>
        </trans-unit>
        <trans-unit id="7031f23f71038fb209bf8f54ab8a04e1845013c6" translate="yes" xml:space="preserve">
          <source>If the path contains a drive letter, drive will contain everything up to and including the colon. e.g. &lt;code&gt;splitdrive(&quot;c:/dir&quot;)&lt;/code&gt; returns &lt;code&gt;(&quot;c:&quot;, &quot;/dir&quot;)&lt;/code&gt;</source>
          <target state="translated">パスにドライブ文字が含まれている場合、ドライブにはコロンまでのすべてが含まれます。たとえば、 &lt;code&gt;splitdrive(&quot;c:/dir&quot;)&lt;/code&gt; は &lt;code&gt;(&quot;c:&quot;, &quot;/dir&quot;)&lt;/code&gt; 返します</target>
        </trans-unit>
        <trans-unit id="af52da286f518b1289952aa6209b0505b4fe92ec" translate="yes" xml:space="preserve">
          <source>If the path doesn&amp;rsquo;t exist and &lt;em&gt;strict&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, &lt;a href=&quot;exceptions#FileNotFoundError&quot;&gt;&lt;code&gt;FileNotFoundError&lt;/code&gt;&lt;/a&gt; is raised. If &lt;em&gt;strict&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt;, the path is resolved as far as possible and any remainder is appended without checking whether it exists. If an infinite loop is encountered along the resolution path, &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">パスが存在せず、&lt;em&gt;strict&lt;/em&gt;が &lt;code&gt;True&lt;/code&gt; の場合、&lt;a href=&quot;exceptions#FileNotFoundError&quot;&gt; &lt;code&gt;FileNotFoundError&lt;/code&gt; &lt;/a&gt;が発生します。場合&lt;em&gt;厳密で&lt;/em&gt;ある &lt;code&gt;False&lt;/code&gt; を、パスが可能な限り解決され、任意の残りの部分は、それが存在するかどうかをチェックせずに添付されています。解決パスに沿って無限ループが発生すると、&lt;a href=&quot;exceptions#RuntimeError&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="40dbde78914080d45949f61923851c99159b5b52" translate="yes" xml:space="preserve">
          <source>If the path points to a symlink, &lt;a href=&quot;#pathlib.Path.exists&quot;&gt;&lt;code&gt;exists()&lt;/code&gt;&lt;/a&gt; returns whether the symlink &lt;em&gt;points to&lt;/em&gt; an existing file or directory.</source>
          <target state="translated">パスがシンボリックリンクを指している場合、&lt;a href=&quot;#pathlib.Path.exists&quot;&gt; &lt;code&gt;exists()&lt;/code&gt; &lt;/a&gt;はシンボリックリンクが既存のファイルまたはディレクトリを&lt;em&gt;指して&lt;/em&gt;いるかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="44f1c1068fb3f75ecb6e1e324e661782e6111e57" translate="yes" xml:space="preserve">
          <source>If the path that &lt;em&gt;cfile&lt;/em&gt; becomes (either explicitly specified or computed) is a symlink or non-regular file, &lt;a href=&quot;exceptions#FileExistsError&quot;&gt;&lt;code&gt;FileExistsError&lt;/code&gt;&lt;/a&gt; will be raised. This is to act as a warning that import will turn those paths into regular files if it is allowed to write byte-compiled files to those paths. This is a side-effect of import using file renaming to place the final byte-compiled file into place to prevent concurrent file writing issues.</source>
          <target state="translated">&lt;em&gt;cfile&lt;/em&gt;が（明示的に指定または計算されて）なるパスがシンボリックリンクまたは通常でないファイルである場合、&lt;a href=&quot;exceptions#FileExistsError&quot;&gt; &lt;code&gt;FileExistsError&lt;/code&gt; &lt;/a&gt;が発生します。これは、バイトコンパイルされたファイルをこれらのパスに書き込むことが許可されている場合、インポートによってこれらのパスが通常のファイルに変わるという警告として機能します。これは、ファイルの名前変更を使用したインポートの副作用であり、最終的なバイトコンパイルファイルを配置して、ファイルの同時書き込みの問題を防止します。</target>
        </trans-unit>
        <trans-unit id="ae2d2687ad3551ef8bd1472c724bb07372b1e0e7" translate="yes" xml:space="preserve">
          <source>If the platform supports the &lt;a href=&quot;#os.putenv&quot;&gt;&lt;code&gt;putenv()&lt;/code&gt;&lt;/a&gt; function, this mapping may be used to modify the environment as well as query the environment. &lt;a href=&quot;#os.putenv&quot;&gt;&lt;code&gt;putenv()&lt;/code&gt;&lt;/a&gt; will be called automatically when the mapping is modified.</source>
          <target state="translated">プラットフォームが&lt;a href=&quot;#os.putenv&quot;&gt; &lt;code&gt;putenv()&lt;/code&gt; &lt;/a&gt;関数をサポートしている場合、このマッピングを使用して、環境を変更したり、環境を照会したりできます。&lt;a href=&quot;#os.putenv&quot;&gt; &lt;code&gt;putenv()&lt;/code&gt; &lt;/a&gt;は、マッピングが変更されると自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="359b0fc2d0ac172f51521bc634e7ed8e651ae47d" translate="yes" xml:space="preserve">
          <source>If the platform supports the &lt;a href=&quot;#os.unsetenv&quot;&gt;&lt;code&gt;unsetenv()&lt;/code&gt;&lt;/a&gt; function, you can delete items in this mapping to unset environment variables. &lt;a href=&quot;#os.unsetenv&quot;&gt;&lt;code&gt;unsetenv()&lt;/code&gt;&lt;/a&gt; will be called automatically when an item is deleted from &lt;code&gt;os.environ&lt;/code&gt;, and when one of the &lt;code&gt;pop()&lt;/code&gt; or &lt;code&gt;clear()&lt;/code&gt; methods is called.</source>
          <target state="translated">プラットフォームが&lt;a href=&quot;#os.unsetenv&quot;&gt; &lt;code&gt;unsetenv()&lt;/code&gt; &lt;/a&gt;関数をサポートしている場合は、このマッピングの項目を削除して、環境変数を設定解除できます。&lt;a href=&quot;#os.unsetenv&quot;&gt; &lt;code&gt;unsetenv()&lt;/code&gt; &lt;/a&gt;は、項目が &lt;code&gt;os.environ&lt;/code&gt; から削除されたとき、および &lt;code&gt;pop()&lt;/code&gt; または &lt;code&gt;clear()&lt;/code&gt; メソッドのいずれかが呼び出されたときに自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c98e4ced54c3de726831a13682ac05eaffe4094a" translate="yes" xml:space="preserve">
          <source>If the priority of a task changes, how do you move it to a new position in the heap?</source>
          <target state="translated">タスクの優先順位が変わった場合、ヒープ内の新しい位置に移動させるにはどうすればいいのでしょうか?</target>
        </trans-unit>
        <trans-unit id="a498076041fadf1d07bb9300b846a643e776f60f" translate="yes" xml:space="preserve">
          <source>If the process does not terminate after &lt;em&gt;timeout&lt;/em&gt; seconds, a &lt;a href=&quot;#subprocess.TimeoutExpired&quot;&gt;&lt;code&gt;TimeoutExpired&lt;/code&gt;&lt;/a&gt; exception will be raised. Catching this exception and retrying communication will not lose any output.</source>
          <target state="translated">プロセスが&lt;em&gt;timeout&lt;/em&gt;秒後に終了しない場合、&lt;a href=&quot;#subprocess.TimeoutExpired&quot;&gt; &lt;code&gt;TimeoutExpired&lt;/code&gt; &lt;/a&gt;例外が発生します。この例外をキャッチして通信を再試行しても、出力は失われません。</target>
        </trans-unit>
        <trans-unit id="1d9458f7fed96d843f923a0a12238a4b1050fd9f" translate="yes" xml:space="preserve">
          <source>If the process does not terminate after &lt;em&gt;timeout&lt;/em&gt; seconds, raise a &lt;a href=&quot;#subprocess.TimeoutExpired&quot;&gt;&lt;code&gt;TimeoutExpired&lt;/code&gt;&lt;/a&gt; exception. It is safe to catch this exception and retry the wait.</source>
          <target state="translated">&lt;em&gt;timeout&lt;/em&gt;秒後にプロセスが終了しない場合は、&lt;a href=&quot;#subprocess.TimeoutExpired&quot;&gt; &lt;code&gt;TimeoutExpired&lt;/code&gt; &lt;/a&gt;例外を発生させます。この例外をキャッチして待機を再試行しても安全です。</target>
        </trans-unit>
        <trans-unit id="f7262122dc4b6b829f446558da074d130b2a5add" translate="yes" xml:space="preserve">
          <source>If the queue was initialized with &lt;code&gt;maxsize=0&lt;/code&gt; (the default), then &lt;a href=&quot;#asyncio.Queue.full&quot;&gt;&lt;code&gt;full()&lt;/code&gt;&lt;/a&gt; never returns &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">キューが &lt;code&gt;maxsize=0&lt;/code&gt; （デフォルト）で初期化された場合、&lt;a href=&quot;#asyncio.Queue.full&quot;&gt; &lt;code&gt;full()&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;True&lt;/code&gt; を返しません。</target>
        </trans-unit>
        <trans-unit id="d78a8ec352511b839919bc03232ce959083bf45a" translate="yes" xml:space="preserve">
          <source>If the referent is unpicklable then this will raise an exception.</source>
          <target state="translated">リファレンタがpicklableでない場合は、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="91ada59b96a0d8cfa6712ce3f61b93c29c1b67a6" translate="yes" xml:space="preserve">
          <source>If the referent no longer exists, calling the reference object returns &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">指示対象が存在しない場合、参照オブジェクトを呼び出すと&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="909c01304c9716dba0fff5875fca0ce88ce2dc59" translate="yes" xml:space="preserve">
          <source>If the regular expression uses the &lt;code&gt;(?P&amp;lt;name&amp;gt;...)&lt;/code&gt; syntax, the &lt;em&gt;groupN&lt;/em&gt; arguments may also be strings identifying groups by their group name. If a string argument is not used as a group name in the pattern, an &lt;a href=&quot;exceptions#IndexError&quot;&gt;&lt;code&gt;IndexError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">正規表現が &lt;code&gt;(?P&amp;lt;name&amp;gt;...)&lt;/code&gt; 構文を使用する場合、&lt;em&gt;groupN&lt;/em&gt;引数は、グループ名でグループを識別する文字列にすることもできます。文字列引数がパターンのグループ名として使用されていない場合、&lt;a href=&quot;exceptions#IndexError&quot;&gt; &lt;code&gt;IndexError&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="9150bc1a07c7bb0e57bdc9eaf32d4f61f9798eda" translate="yes" xml:space="preserve">
          <source>If the reply matches the digest of the message using &lt;em&gt;authkey&lt;/em&gt; as the key then a welcome message is sent to the other end of the connection. Otherwise &lt;a href=&quot;#multiprocessing.AuthenticationError&quot;&gt;&lt;code&gt;AuthenticationError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">応答が&lt;em&gt;authkey&lt;/em&gt;をキーとして使用してメッセージのダイジェストと一致する場合、ウェルカムメッセージが接続の相手側に送信されます。それ以外の場合、&lt;a href=&quot;#multiprocessing.AuthenticationError&quot;&gt; &lt;code&gt;AuthenticationError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="335f0408ae4594f8d3341768174fc78d95715a5d" translate="yes" xml:space="preserve">
          <source>If the request was mapped to a directory, the directory is checked for a file named &lt;code&gt;index.html&lt;/code&gt; or &lt;code&gt;index.htm&lt;/code&gt; (in that order). If found, the file&amp;rsquo;s contents are returned; otherwise a directory listing is generated by calling the &lt;code&gt;list_directory()&lt;/code&gt; method. This method uses &lt;a href=&quot;os#os.listdir&quot;&gt;&lt;code&gt;os.listdir()&lt;/code&gt;&lt;/a&gt; to scan the directory, and returns a &lt;code&gt;404&lt;/code&gt; error response if the &lt;a href=&quot;os#os.listdir&quot;&gt;&lt;code&gt;listdir()&lt;/code&gt;&lt;/a&gt; fails.</source>
          <target state="translated">リクエストがディレクトリにマッピングされている場合、ディレクトリは、 &lt;code&gt;index.html&lt;/code&gt; または &lt;code&gt;index.htm&lt;/code&gt; という名前のファイルが（この順序で）チェックされます。見つかった場合、ファイルの内容が返されます。それ以外の場合は、 &lt;code&gt;list_directory()&lt;/code&gt; メソッドを呼び出すことによってディレクトリリストが生成されます。このメソッドは&lt;a href=&quot;os#os.listdir&quot;&gt; &lt;code&gt;os.listdir()&lt;/code&gt; &lt;/a&gt;を使用してディレクトリをスキャンし、&lt;a href=&quot;os#os.listdir&quot;&gt; &lt;code&gt;listdir()&lt;/code&gt; &lt;/a&gt;が失敗した場合は &lt;code&gt;404&lt;/code&gt; エラー応答を返します。</target>
        </trans-unit>
        <trans-unit id="785b81ecc43784be1a5372c2c81457edd17d9681" translate="yes" xml:space="preserve">
          <source>If the request was mapped to a file, it is opened. Any &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; exception in opening the requested file is mapped to a &lt;code&gt;404&lt;/code&gt;, &lt;code&gt;'File not found'&lt;/code&gt; error. If there was a &lt;code&gt;'If-Modified-Since'&lt;/code&gt; header in the request, and the file was not modified after this time, a &lt;code&gt;304&lt;/code&gt;, &lt;code&gt;'Not Modified'&lt;/code&gt; response is sent. Otherwise, the content type is guessed by calling the &lt;code&gt;guess_type()&lt;/code&gt; method, which in turn uses the &lt;em&gt;extensions_map&lt;/em&gt; variable, and the file contents are returned.</source>
          <target state="translated">リクエストがファイルにマッピングされていた場合、それが開かれます。どれでも&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; のを&lt;/a&gt;要求されたファイルを開くことで例外がマップされ &lt;code&gt;404&lt;/code&gt; 、 &lt;code&gt;'File not found'&lt;/code&gt; エラーが発生しました。あった場合は &lt;code&gt;'If-Modified-Since'&lt;/code&gt; 要求のヘッダ、およびファイルがこの時間の後に変更されなかった、 &lt;code&gt;304&lt;/code&gt; は、 &lt;code&gt;'Not Modified'&lt;/code&gt; 応答が送信されます。それ以外の場合は、 &lt;code&gt;guess_type()&lt;/code&gt; メソッドを呼び出すことでコンテンツタイプが推測され、&lt;em&gt;extensions_map&lt;/em&gt;変数が順に使用され、ファイルのコンテンツが返されます。</target>
        </trans-unit>
        <trans-unit id="164f68a4853c0030aecaf77543f70404dffd338d" translate="yes" xml:space="preserve">
          <source>If the requested module already exists in &lt;a href=&quot;sys#sys.modules&quot;&gt;&lt;code&gt;sys.modules&lt;/code&gt;&lt;/a&gt;, that module should be used and reloaded. Otherwise the loader should create a new module and insert it into &lt;a href=&quot;sys#sys.modules&quot;&gt;&lt;code&gt;sys.modules&lt;/code&gt;&lt;/a&gt; before any loading begins, to prevent recursion from the import. If the loader inserted a module and the load fails, it must be removed by the loader from &lt;a href=&quot;sys#sys.modules&quot;&gt;&lt;code&gt;sys.modules&lt;/code&gt;&lt;/a&gt;; modules already in &lt;a href=&quot;sys#sys.modules&quot;&gt;&lt;code&gt;sys.modules&lt;/code&gt;&lt;/a&gt; before the loader began execution should be left alone (see &lt;a href=&quot;#importlib.util.module_for_loader&quot;&gt;&lt;code&gt;importlib.util.module_for_loader()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">要求されたモジュールが&lt;a href=&quot;sys#sys.modules&quot;&gt; &lt;code&gt;sys.modules&lt;/code&gt; &lt;/a&gt;にすでに存在する場合は、そのモジュールを使用して再ロードする必要があります。それ以外の場合、ローダーは、読み込みが始まる前に新しいモジュールを作成して&lt;a href=&quot;sys#sys.modules&quot;&gt; &lt;code&gt;sys.modules&lt;/code&gt; &lt;/a&gt;に挿入し、インポートからの再帰を防止する必要があります。ローダーがモジュールを挿入し、ロードが失敗した場合は、ローダーによって&lt;a href=&quot;sys#sys.modules&quot;&gt; &lt;code&gt;sys.modules&lt;/code&gt; &lt;/a&gt;から削除する必要があります。ローダーが実行を開始する前にすでに&lt;a href=&quot;sys#sys.modules&quot;&gt; &lt;code&gt;sys.modules&lt;/code&gt; &lt;/a&gt;にあるモジュールは、そのままにしておく必要があります（&lt;a href=&quot;#importlib.util.module_for_loader&quot;&gt; &lt;code&gt;importlib.util.module_for_loader()&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="03b4e196b2e9acd5ba4a384dea909aa2a6ee615a" translate="yes" xml:space="preserve">
          <source>If the resource cannot be found, &lt;a href=&quot;exceptions#FileNotFoundError&quot;&gt;&lt;code&gt;FileNotFoundError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">リソースが見つからない場合、&lt;a href=&quot;exceptions#FileNotFoundError&quot;&gt; &lt;code&gt;FileNotFoundError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="0df3e09c5b36021f773ac46f41a2c43194c9fca6" translate="yes" xml:space="preserve">
          <source>If the resource cleanup isn&amp;rsquo;t already neatly bundled into a standalone function, then it is still possible to use the decorator form of &lt;a href=&quot;#contextlib.ExitStack.callback&quot;&gt;&lt;code&gt;ExitStack.callback()&lt;/code&gt;&lt;/a&gt; to declare the resource cleanup in advance:</source>
          <target state="translated">リソースのクリーンアップがスタンドアロン関数にきちんとバンドルされていない場合でも、&lt;a href=&quot;#contextlib.ExitStack.callback&quot;&gt; &lt;code&gt;ExitStack.callback()&lt;/code&gt; の&lt;/a&gt;デコレータ形式を使用して、リソースのクリーンアップを事前に宣言できます。</target>
        </trans-unit>
        <trans-unit id="da1ab5f376bf69b7b54158c8e22471cb84fdbe8d" translate="yes" xml:space="preserve">
          <source>If the resource does not concretely exist on the file system, raise &lt;a href=&quot;exceptions#FileNotFoundError&quot;&gt;&lt;code&gt;FileNotFoundError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">リソースがファイルシステムに具体的に存在しない場合は、&lt;a href=&quot;exceptions#FileNotFoundError&quot;&gt; &lt;code&gt;FileNotFoundError&lt;/code&gt; を送出し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="e8f1ce475d9c36397896ac205e613c6b1f406f21" translate="yes" xml:space="preserve">
          <source>If the result is zero then its sign will be the sign of &lt;em&gt;self&lt;/em&gt;.</source>
          <target state="translated">結果がゼロの場合、その符号は&lt;em&gt;自己の&lt;/em&gt;符号になります。</target>
        </trans-unit>
        <trans-unit id="5a98dda2c1e7c49ba619d9723afd406089bc22f0" translate="yes" xml:space="preserve">
          <source>If the return code was non-zero it raises a &lt;a href=&quot;#subprocess.CalledProcessError&quot;&gt;&lt;code&gt;CalledProcessError&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;#subprocess.CalledProcessError&quot;&gt;&lt;code&gt;CalledProcessError&lt;/code&gt;&lt;/a&gt; object will have the return code in the &lt;a href=&quot;#subprocess.CalledProcessError.returncode&quot;&gt;&lt;code&gt;returncode&lt;/code&gt;&lt;/a&gt; attribute and any output in the &lt;a href=&quot;#subprocess.CalledProcessError.output&quot;&gt;&lt;code&gt;output&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">戻りコードがゼロ以外の場合は、&lt;a href=&quot;#subprocess.CalledProcessError&quot;&gt; &lt;code&gt;CalledProcessError&lt;/code&gt; が発生し&lt;/a&gt;ます。&lt;a href=&quot;#subprocess.CalledProcessError&quot;&gt; &lt;code&gt;CalledProcessError&lt;/code&gt; の&lt;/a&gt;オブジェクトがでリターンコードを持っています&lt;a href=&quot;#subprocess.CalledProcessError.returncode&quot;&gt; &lt;code&gt;returncode&lt;/code&gt; &lt;/a&gt;属性とのいずれかの出力&lt;a href=&quot;#subprocess.CalledProcessError.output&quot;&gt; &lt;code&gt;output&lt;/code&gt; &lt;/a&gt;属性。</target>
        </trans-unit>
        <trans-unit id="1499f9fffce42eacfcc4c16359b64bca87b01b5c" translate="yes" xml:space="preserve">
          <source>If the return value &lt;em&gt;is&lt;/em&gt; an iterator, then iterating over it once will consume it and subsequent iterations will result in an empty list:</source>
          <target state="translated">戻り値&lt;em&gt;が&lt;/em&gt;イテレータである場合、それを1回反復すると消費され、その後の反復では空のリストが生成されます。</target>
        </trans-unit>
        <trans-unit id="108f2d44c66943b7534256bc63b5f502b9a8ba5a" translate="yes" xml:space="preserve">
          <source>If the root is reached, and it has a level of NOTSET, then all messages will be processed. Otherwise, the root&amp;rsquo;s level will be used as the effective level.</source>
          <target state="translated">ルートに到達し、レベルがNOTSETの場合、すべてのメッセージが処理されます。それ以外の場合は、ルートのレベルが有効レベルとして使用されます。</target>
        </trans-unit>
        <trans-unit id="09d539352f4b8bde471c4c7a5b1b7605d75d424f" translate="yes" xml:space="preserve">
          <source>If the sample size is larger than the population size, a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">標本サイズが母集団サイズより大きい場合、&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="5d4676a6fdc2402cf5a3dbbb4a4b2ed50deb25ed" translate="yes" xml:space="preserve">
          <source>If the second argument is omitted, the super object returned is unbound. If the second argument is an object, &lt;code&gt;isinstance(obj, type)&lt;/code&gt; must be true. If the second argument is a type, &lt;code&gt;issubclass(type2, type)&lt;/code&gt; must be true (this is useful for classmethods).</source>
          <target state="translated">2番目の引数を省略すると、返されるスーパーオブジェクトはバインドされません。2番目の引数がオブジェクトの場合、 &lt;code&gt;isinstance(obj, type)&lt;/code&gt; はtrueでなければなりません。2番目の引数が型の場合、 &lt;code&gt;issubclass(type2, type)&lt;/code&gt; はtrueでなければなりません（これはクラスメソッドに役立ちます）。</target>
        </trans-unit>
        <trans-unit id="5001076d001501658658c23588861355b9db6f5b" translate="yes" xml:space="preserve">
          <source>If the signal is not trapped (default), mixing floats and Decimals is permitted in the &lt;a href=&quot;#decimal.Decimal&quot;&gt;&lt;code&gt;Decimal&lt;/code&gt;&lt;/a&gt; constructor, &lt;a href=&quot;#decimal.Context.create_decimal&quot;&gt;&lt;code&gt;create_decimal()&lt;/code&gt;&lt;/a&gt; and all comparison operators. Both conversion and comparisons are exact. Any occurrence of a mixed operation is silently recorded by setting &lt;a href=&quot;#decimal.FloatOperation&quot;&gt;&lt;code&gt;FloatOperation&lt;/code&gt;&lt;/a&gt; in the context flags. Explicit conversions with &lt;a href=&quot;#decimal.Decimal.from_float&quot;&gt;&lt;code&gt;from_float()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#decimal.Context.create_decimal_from_float&quot;&gt;&lt;code&gt;create_decimal_from_float()&lt;/code&gt;&lt;/a&gt; do not set the flag.</source>
          <target state="translated">信号がトラップされない場合（デフォルト）、&lt;a href=&quot;#decimal.Decimal&quot;&gt; &lt;code&gt;Decimal&lt;/code&gt; &lt;/a&gt;コンストラクター、&lt;a href=&quot;#decimal.Context.create_decimal&quot;&gt; &lt;code&gt;create_decimal()&lt;/code&gt; &lt;/a&gt;およびすべての比較演算子で浮動小数点数とDecimalsの混合が許可されます。変換と比較はどちらも正確です。混合操作の発生は、コンテキストフラグに&lt;a href=&quot;#decimal.FloatOperation&quot;&gt; &lt;code&gt;FloatOperation&lt;/code&gt; &lt;/a&gt;を設定することにより、通知なしで記録されます。&lt;a href=&quot;#decimal.Decimal.from_float&quot;&gt; &lt;code&gt;from_float()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#decimal.Context.create_decimal_from_float&quot;&gt; &lt;code&gt;create_decimal_from_float()&lt;/code&gt; を使用&lt;/a&gt;した明示的な変換では、フラグは設定されません。</target>
        </trans-unit>
        <trans-unit id="5eb98687458be9bdfcd1779f07871d42fe11615b" translate="yes" xml:space="preserve">
          <source>If the specified check is not supported, an &lt;a href=&quot;#lzma.LZMAError&quot;&gt;&lt;code&gt;LZMAError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">指定されたチェックがサポートされていない場合、&lt;a href=&quot;#lzma.LZMAError&quot;&gt; &lt;code&gt;LZMAError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="5b54c9f0cfe02eb7352da72b9945e23c261ee5f4" translate="yes" xml:space="preserve">
          <source>If the specified sound cannot be found, do not play the system default sound.</source>
          <target state="translated">指定したサウンドが見つからない場合は、システムデフォルトのサウンドを再生しないでください。</target>
        </trans-unit>
        <trans-unit id="778c39a7849194812f3b69dbd53ec4638f531eda" translate="yes" xml:space="preserve">
          <source>If the specified value is &lt;code&gt;True&lt;/code&gt;, the configuration is processed as described in the section on &lt;a href=&quot;#logging-config-dict-incremental&quot;&gt;Incremental Configuration&lt;/a&gt;.</source>
          <target state="translated">指定された値が &lt;code&gt;True&lt;/code&gt; の場合、構成は&lt;a href=&quot;#logging-config-dict-incremental&quot;&gt;インクリメンタル構成の&lt;/a&gt;セクションで説明されているように処理されます。</target>
        </trans-unit>
        <trans-unit id="06cc8f856e11dad88ac598335b513ab61be78c92" translate="yes" xml:space="preserve">
          <source>If the start method has not been fixed and &lt;em&gt;allow_none&lt;/em&gt; is false, then the start method is fixed to the default and the name is returned. If the start method has not been fixed and &lt;em&gt;allow_none&lt;/em&gt; is true then &lt;code&gt;None&lt;/code&gt; is returned.</source>
          <target state="translated">startメソッドが固定されておらず、&lt;em&gt;allow_none&lt;/em&gt;がfalseの場合、startメソッドはデフォルトに固定され、名前が返されます。startメソッドが修正されておらず、&lt;em&gt;allow_none&lt;/em&gt;がtrueの場合、 &lt;code&gt;None&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="1b8c9208a62d78a294576a65a53059a1c5f6f17a" translate="yes" xml:space="preserve">
          <source>If the subclass overrides the constructor, it must make sure to invoke the base class constructor (&lt;code&gt;Thread.__init__()&lt;/code&gt;) before doing anything else to the thread.</source>
          <target state="translated">サブクラスがコンストラクターをオーバーライドする場合は、スレッドに対して何かを行う前に、必ず基本クラスコンストラクター（ &lt;code&gt;Thread.__init__()&lt;/code&gt; ）を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="acce8b93fe985a72766f9ac89c69d8af02e986e6" translate="yes" xml:space="preserve">
          <source>If the submitted form data contains more than one field with the same name, the object retrieved by &lt;code&gt;form[key]&lt;/code&gt; is not a &lt;code&gt;FieldStorage&lt;/code&gt; or &lt;code&gt;MiniFieldStorage&lt;/code&gt; instance but a list of such instances. Similarly, in this situation, &lt;code&gt;form.getvalue(key)&lt;/code&gt; would return a list of strings. If you expect this possibility (when your HTML form contains multiple fields with the same name), use the &lt;a href=&quot;#cgi.FieldStorage.getlist&quot;&gt;&lt;code&gt;getlist()&lt;/code&gt;&lt;/a&gt; method, which always returns a list of values (so that you do not need to special-case the single item case). For example, this code concatenates any number of username fields, separated by commas:</source>
          <target state="translated">送信されたフォームデータに同じ名前のフィールドが複数含まれている場合、 &lt;code&gt;form[key]&lt;/code&gt; によって取得されるオブジェクトは、 &lt;code&gt;FieldStorage&lt;/code&gt; または &lt;code&gt;MiniFieldStorage&lt;/code&gt; インスタンスではなく、そのようなインスタンスのリストです。同様に、この状況では、 &lt;code&gt;form.getvalue(key)&lt;/code&gt; は文字列のリストを返します。この可能性が予想される場合（HTMLフォームに同じ名前の複数のフィールドが含まれている場合）、常に値のリストを返す&lt;a href=&quot;#cgi.FieldStorage.getlist&quot;&gt; &lt;code&gt;getlist()&lt;/code&gt; &lt;/a&gt;メソッドを使用します（単一アイテムのケースを特別なケースにする必要がないようにするため）。たとえば、次のコードは、カンマで区切られた任意の数のユーザー名フィールドを連結します。</target>
        </trans-unit>
        <trans-unit id="5ca69890189daafd25a2e36e6b3b7787040e88e4" translate="yes" xml:space="preserve">
          <source>If the subprocess hasn&amp;rsquo;t returned yet, and close transports of &lt;em&gt;stdin&lt;/em&gt;, &lt;em&gt;stdout&lt;/em&gt;, and &lt;em&gt;stderr&lt;/em&gt; pipes.</source>
          <target state="translated">サブプロセスがまだ戻っていない場合、&lt;em&gt;stdin&lt;/em&gt;、&lt;em&gt;stdout&lt;/em&gt;、および&lt;em&gt;stderr&lt;/em&gt;パイプのトランスポートを閉じます。</target>
        </trans-unit>
        <trans-unit id="97b2ccdb92b73cedf9597250b83de25464d1e506" translate="yes" xml:space="preserve">
          <source>If the supplied path directly references a script file (whether as source or as precompiled byte code), then &lt;code&gt;__file__&lt;/code&gt; will be set to the supplied path, and &lt;code&gt;__spec__&lt;/code&gt;, &lt;code&gt;__cached__&lt;/code&gt;, &lt;code&gt;__loader__&lt;/code&gt; and &lt;code&gt;__package__&lt;/code&gt; will all be set to &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">供給されたパスは、直接スクリプトファイル（ソースとして、またはコンパイル済みバイトコードとしてかどうか）を参照する場合、 &lt;code&gt;__file__&lt;/code&gt; 供給されたパスに設定され、 &lt;code&gt;__spec__&lt;/code&gt; 、 &lt;code&gt;__cached__&lt;/code&gt; 、 &lt;code&gt;__loader__&lt;/code&gt; と &lt;code&gt;__package__&lt;/code&gt; すべてに設定されます&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c60916833581a918770fd11c43105b09a19f5fd3" translate="yes" xml:space="preserve">
          <source>If the supplied path is a reference to a valid sys.path entry, then &lt;code&gt;__spec__&lt;/code&gt; will be set appropriately for the imported &lt;code&gt;__main__&lt;/code&gt; module (that is, &lt;code&gt;__spec__.name&lt;/code&gt; will always be &lt;code&gt;__main__&lt;/code&gt;). &lt;code&gt;__file__&lt;/code&gt;, &lt;code&gt;__cached__&lt;/code&gt;, &lt;code&gt;__loader__&lt;/code&gt; and &lt;code&gt;__package__&lt;/code&gt; will be &lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#import-mod-attrs&quot;&gt;set as normal&lt;/a&gt; based on the module spec.</source>
          <target state="translated">指定されたパスが有効なsys.pathエントリへの参照である場合、 &lt;code&gt;__spec__&lt;/code&gt; はインポートされた &lt;code&gt;__main__&lt;/code&gt; モジュールに適切に設定されます（つまり、 &lt;code&gt;__spec__.name&lt;/code&gt; は常に &lt;code&gt;__main__&lt;/code&gt; になります）。 &lt;code&gt;__file__&lt;/code&gt; 、 &lt;code&gt;__cached__&lt;/code&gt; 、 &lt;code&gt;__loader__&lt;/code&gt; と &lt;code&gt;__package__&lt;/code&gt; する&lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#import-mod-attrs&quot;&gt;正常に設定&lt;/a&gt;モジュール仕様に基づきます。</target>
        </trans-unit>
        <trans-unit id="1adf55313515a9d46f4badde3d9f05bb3bac807d" translate="yes" xml:space="preserve">
          <source>If the system call is interrupted and the signal handler does not raise an exception, the function now retries the system call instead of raising an &lt;a href=&quot;exceptions#InterruptedError&quot;&gt;&lt;code&gt;InterruptedError&lt;/code&gt;&lt;/a&gt; exception (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0475&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;PEP 475&lt;/strong&gt;&lt;/a&gt; for the rationale).</source>
          <target state="translated">システムコールが中断され、シグナルハンドラーが例外を発生させない場合、関数は、&lt;a href=&quot;exceptions#InterruptedError&quot;&gt; &lt;code&gt;InterruptedError&lt;/code&gt; &lt;/a&gt;例外を発生させる代わりにシステムコールを再試行します（根拠については&lt;a href=&quot;https://www.python.org/dev/peps/pep-0475&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;PEP 475&lt;/strong&gt;&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="a6d43cf81da71fff4123417dbbd417d2066dd963" translate="yes" xml:space="preserve">
          <source>If the system has little free memory, snapshots can be written on disk using the &lt;a href=&quot;#tracemalloc.Snapshot.dump&quot;&gt;&lt;code&gt;Snapshot.dump()&lt;/code&gt;&lt;/a&gt; method to analyze the snapshot offline. Then use the &lt;a href=&quot;#tracemalloc.Snapshot.load&quot;&gt;&lt;code&gt;Snapshot.load()&lt;/code&gt;&lt;/a&gt; method reload the snapshot.</source>
          <target state="translated">システムの空きメモリが少ない場合は、&lt;a href=&quot;#tracemalloc.Snapshot.dump&quot;&gt; &lt;code&gt;Snapshot.dump()&lt;/code&gt; &lt;/a&gt;メソッドを使用してスナップショットをディスクに書き込み、スナップショットをオフラインで分析できます。次に、&lt;a href=&quot;#tracemalloc.Snapshot.load&quot;&gt; &lt;code&gt;Snapshot.load()&lt;/code&gt; &lt;/a&gt;メソッドを使用してスナップショットを再ロードします。</target>
        </trans-unit>
        <trans-unit id="31f84dc9d5116f5e6dfe6a1466f5a476a9188d05" translate="yes" xml:space="preserve">
          <source>If the target is omitted (or &lt;code&gt;None&lt;/code&gt;), the source must be a directory and the target will be a file with the same name as the source, with a &lt;code&gt;.pyz&lt;/code&gt; extension added.</source>
          <target state="translated">ターゲットを省略した場合（または &lt;code&gt;None&lt;/code&gt; の場合）、ソースはディレクトリである必要があり、ターゲットはソースと同じ名前のファイルであり、 &lt;code&gt;.pyz&lt;/code&gt; 拡張子が追加されます。</target>
        </trans-unit>
        <trans-unit id="a81ad72c0eb0b73e6a8f61b1a3e045791f08818e" translate="yes" xml:space="preserve">
          <source>If the terminal size cannot be successfully queried, either because the system doesn&amp;rsquo;t support querying, or because we are not connected to a terminal, the value given in &lt;code&gt;fallback&lt;/code&gt; parameter is used. &lt;code&gt;fallback&lt;/code&gt; defaults to &lt;code&gt;(80, 24)&lt;/code&gt; which is the default size used by many terminal emulators.</source>
          <target state="translated">システムがクエリをサポートしていないか、ターミナルに接続していないために、ターミナルサイズを正常にクエリできない場合は、 &lt;code&gt;fallback&lt;/code&gt; パラメータで指定された値が使用されます。 &lt;code&gt;fallback&lt;/code&gt; デフォルトは &lt;code&gt;(80, 24)&lt;/code&gt; 80、24 ）で、これは多くの端末エミュレーターで使用されるデフォルトのサイズです。</target>
        </trans-unit>
        <trans-unit id="2de2938d3bd0d33a2753ba4337962dd33d95e0ce" translate="yes" xml:space="preserve">
          <source>If the testing strategy changes, there is no need to change the source code.</source>
          <target state="translated">テスト戦略が変われば、ソースコードを変更する必要はありません。</target>
        </trans-unit>
        <trans-unit id="bcd64126f5fb037416eebb3476593dfc24805624" translate="yes" xml:space="preserve">
          <source>If the transport has a buffer for outgoing data, buffered data will be flushed asynchronously. No more data will be received. After all buffered data is flushed, the protocol&amp;rsquo;s &lt;a href=&quot;#asyncio.BaseProtocol.connection_lost&quot;&gt;&lt;code&gt;protocol.connection_lost()&lt;/code&gt;&lt;/a&gt; method will be called with &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; as its argument.</source>
          <target state="translated">トランスポートに発信データ用のバッファがある場合、バッファされたデータは非同期にフラッシュされます。これ以上のデータは受信されません。バッファリングされたすべてのデータがフラッシュされた後、プロトコルの&lt;a href=&quot;#asyncio.BaseProtocol.connection_lost&quot;&gt; &lt;code&gt;protocol.connection_lost()&lt;/code&gt; &lt;/a&gt;メソッドが引数として&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3f1d6afc6fe93a09cfe3361f1b4868b729dcdad9" translate="yes" xml:space="preserve">
          <source>If the two operands are unequal, return the number closest to the first operand in the direction of the second operand. If both operands are numerically equal, return a copy of the first operand with the sign set to be the same as the sign of the second operand.</source>
          <target state="translated">2つのオペランドが不等号の場合、2つ目のオペランドの方向で1つ目のオペランドに最も近い数値を返します。両方のオペランドが数値的に等しい場合、符号が2番目のオペランドの符号と同じになるように設定された1番目のオペランドのコピーを返します。</target>
        </trans-unit>
        <trans-unit id="5a546ad02eac6e07241889e84cea3b1a7f283a82" translate="yes" xml:space="preserve">
          <source>If the underlying object is writable, the memoryview supports one-dimensional slice assignment. Resizing is not allowed:</source>
          <target state="translated">基礎となるオブジェクトが書き込み可能な場合、メモリビューは一次元スライスの割り当てをサポートします。リサイズは許可されていません。</target>
        </trans-unit>
        <trans-unit id="1896841bb368d293e9660afd2874585397d59819" translate="yes" xml:space="preserve">
          <source>If the value &amp;ldquo;using_IDLE&amp;rdquo; in the configuration dictionary is &lt;code&gt;False&lt;/code&gt; (default value), also enter mainloop. Remark: If IDLE with the &lt;code&gt;-n&lt;/code&gt; switch (no subprocess) is used, this value should be set to &lt;code&gt;True&lt;/code&gt; in &lt;code&gt;turtle.cfg&lt;/code&gt;. In this case IDLE&amp;rsquo;s own mainloop is active also for the client script.</source>
          <target state="translated">構成辞書の値「using_IDLE」が &lt;code&gt;False&lt;/code&gt; （デフォルト値）の場合は、mainloopも入力します。備考： &lt;code&gt;-n&lt;/code&gt; スイッチ付きのIDLE （サブプロセスなし）を使用する場合は、この値を &lt;code&gt;turtle.cfg&lt;/code&gt; で &lt;code&gt;True&lt;/code&gt; に設定する必要があります。この場合、クライアントスクリプトでもIDLE独自のメインループがアクティブになります。</target>
        </trans-unit>
        <trans-unit id="89e5de1d1a57cbd9a0fc9d4e4a4217ecc10e0356" translate="yes" xml:space="preserve">
          <source>If the value contains binary data, it is converted into a &lt;a href=&quot;email.header#email.header.Header&quot;&gt;&lt;code&gt;Header&lt;/code&gt;&lt;/a&gt; object using the &lt;code&gt;unknown-8bit&lt;/code&gt; charset. Otherwise it is returned unmodified.</source>
          <target state="translated">値にバイナリデータが含まれている場合、 &lt;code&gt;unknown-8bit&lt;/code&gt; 文字セットを使用して&lt;a href=&quot;email.header#email.header.Header&quot;&gt; &lt;code&gt;Header&lt;/code&gt; &lt;/a&gt;オブジェクトに変換されます。それ以外の場合は、変更されずに返されます。</target>
        </trans-unit>
        <trans-unit id="3065c24d18047dbd8738a4165aafe7e2b3d722cb" translate="yes" xml:space="preserve">
          <source>If the value contains non-ASCII characters, the charset and language may be explicitly controlled by specifying the value as a three tuple in the format &lt;code&gt;(CHARSET, LANGUAGE, VALUE)&lt;/code&gt;, where &lt;code&gt;CHARSET&lt;/code&gt; is a string naming the charset to be used to encode the value, &lt;code&gt;LANGUAGE&lt;/code&gt; can usually be set to &lt;code&gt;None&lt;/code&gt; or the empty string (see &lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt; for other possibilities), and &lt;code&gt;VALUE&lt;/code&gt; is the string value containing non-ASCII code points. If a three tuple is not passed and the value contains non-ASCII characters, it is automatically encoded in &lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt; format using a &lt;code&gt;CHARSET&lt;/code&gt; of &lt;code&gt;utf-8&lt;/code&gt; and a &lt;code&gt;LANGUAGE&lt;/code&gt; of &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">値に非ASCII文字が含まれている場合、値を3つのタプル &lt;code&gt;(CHARSET, LANGUAGE, VALUE)&lt;/code&gt; の形式で指定することにより、文字セットと言語を明示的に制御できます。ここで、 &lt;code&gt;CHARSET&lt;/code&gt; は、値は、 &lt;code&gt;LANGUAGE&lt;/code&gt; は通常に設定することができる &lt;code&gt;None&lt;/code&gt; （参照または空の文字列&lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt;他の可能性のため）、および &lt;code&gt;VALUE&lt;/code&gt; は、非ASCIIコードポイントを含む文字列値です。3つのタプルが渡されず、値に非ASCII文字が含まれている &lt;code&gt;CHARSET&lt;/code&gt; 、 &lt;code&gt;utf-8&lt;/code&gt; CHARSETと &lt;code&gt;LANGUAGE&lt;/code&gt; を使用して、&lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt;形式で自動的にエンコードされ&lt;strong&gt;ます。&lt;/strong&gt; &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c8fcbdf6220f66ea7da06b9cbc74f6b8c7af4352" translate="yes" xml:space="preserve">
          <source>If the value contains non-ASCII characters, the charset and language may be explicitly specified using the optional &lt;em&gt;charset&lt;/em&gt; and &lt;em&gt;language&lt;/em&gt; parameters. Optional &lt;em&gt;language&lt;/em&gt; specifies the &lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-9&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt; language, defaulting to the empty string. Both &lt;em&gt;charset&lt;/em&gt; and &lt;em&gt;language&lt;/em&gt; should be strings. The default is to use the &lt;code&gt;utf8&lt;/code&gt;&lt;em&gt;charset&lt;/em&gt; and &lt;code&gt;None&lt;/code&gt; for the &lt;em&gt;language&lt;/em&gt;.</source>
          <target state="translated">値に非ASCII文字が含まれている場合、オプションの&lt;em&gt;文字セット&lt;/em&gt;および&lt;em&gt;言語&lt;/em&gt;パラメーターを使用して、&lt;em&gt;文字セット&lt;/em&gt;および&lt;em&gt;言語&lt;/em&gt;を明示的に指定できます。オプションの&lt;em&gt;言語&lt;/em&gt;は&lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-9&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt;&lt;em&gt;言語を&lt;/em&gt;指定し、デフォルトでは空の文字列になります。&lt;em&gt;文字セット&lt;/em&gt;と&lt;em&gt;言語&lt;/em&gt;はどちらも&lt;em&gt;文字&lt;/em&gt;列である必要があります。デフォルトでは使用することです &lt;code&gt;utf8&lt;/code&gt; &lt;em&gt;文字セット&lt;/em&gt;と &lt;code&gt;None&lt;/code&gt; ため&lt;em&gt;の言語&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="fd5432d4a79d323ca399133a88c268b9b6146b6f" translate="yes" xml:space="preserve">
          <source>If the value for a header in the &lt;code&gt;Message&lt;/code&gt; object originated from a &lt;a href=&quot;email.parser#module-email.parser&quot;&gt;&lt;code&gt;parser&lt;/code&gt;&lt;/a&gt; (as opposed to being set by a program), this attribute indicates whether or not a generator should refold that value when transforming the message back into serialized form. The possible values are:</source>
          <target state="translated">&lt;code&gt;Message&lt;/code&gt; オブジェクトのヘッダーの値が（プログラムによって設定されるのではなく）&lt;a href=&quot;email.parser#module-email.parser&quot;&gt; &lt;code&gt;parser&lt;/code&gt; &lt;/a&gt;から発信された場合、この属性は、メッセージをシリアライズされた形式に変換するときにジェネレータがその値を再折り畳みするかどうかを示します。可能な値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="61f619f6c6e535a52f8e51d5c113f91f23edb137" translate="yes" xml:space="preserve">
          <source>If the value has (or contains an object that has) an unsupported type, a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; exception is raised &amp;mdash; but garbage data will also be written to the file. The object will not be properly read back by &lt;a href=&quot;#marshal.load&quot;&gt;&lt;code&gt;load()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">値にサポートされていないタイプがある（またはオブジェクトが含まれている）&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;、ValueError例外が発生しますが、不要なデータもファイルに書き込まれます。オブジェクトは&lt;a href=&quot;#marshal.load&quot;&gt; &lt;code&gt;load()&lt;/code&gt; &lt;/a&gt;によって正しく読み戻されません。</target>
        </trans-unit>
        <trans-unit id="ac70e682ecd6b9523bcc00452173d51c8483ed90" translate="yes" xml:space="preserve">
          <source>If the value has a &lt;code&gt;name&lt;/code&gt; attribute, it is returned to unmodified. Otherwise the &lt;em&gt;name&lt;/em&gt;, and the &lt;em&gt;value&lt;/em&gt; with any CR or LF characters removed, are passed to the &lt;code&gt;header_factory&lt;/code&gt;, and the resulting header object is returned. Any surrogateescaped bytes get turned into the unicode unknown-character glyph.</source>
          <target state="translated">値に &lt;code&gt;name&lt;/code&gt; 属性がある場合、値は変更されずに返されます。それ以外の場合は、&lt;em&gt;name&lt;/em&gt;と、CRまたはLF文字を削除した&lt;em&gt;値&lt;/em&gt;が &lt;code&gt;header_factory&lt;/code&gt; に渡され、結果のヘッダーオブジェクトが返されます。サロゲートされたバイトは、Unicodeの不明な文字のグリフに変換されます。</target>
        </trans-unit>
        <trans-unit id="ecac18b5d34fc503358e09e7a4c0d8959266d301" translate="yes" xml:space="preserve">
          <source>If the wait is cancelled, the future &lt;em&gt;aw&lt;/em&gt; is also cancelled.</source>
          <target state="translated">待機がキャンセルされると、将来の&lt;em&gt;aw&lt;/em&gt;もキャンセルされます。</target>
        </trans-unit>
        <trans-unit id="56c5f97d09e31156fff54feae27ef3f4943d5433" translate="yes" xml:space="preserve">
          <source>If the watcher was previously attached to an event loop, then it is first detached before attaching to the new loop.</source>
          <target state="translated">ウォッチャーが以前にイベントループにアタッチされていた場合は、新しいループにアタッチする前に最初にアタッチされます。</target>
        </trans-unit>
        <trans-unit id="2bf203d12061685d40f0461125be7723191a6603" translate="yes" xml:space="preserve">
          <source>If the whole &lt;em&gt;string&lt;/em&gt; matches the regular expression &lt;em&gt;pattern&lt;/em&gt;, return a corresponding &lt;a href=&quot;#match-objects&quot;&gt;match object&lt;/a&gt;. Return &lt;code&gt;None&lt;/code&gt; if the string does not match the pattern; note that this is different from a zero-length match.</source>
          <target state="translated">&lt;em&gt;文字列&lt;/em&gt;全体が正規表現&lt;em&gt;パターンに&lt;/em&gt;一致する場合、対応する&lt;a href=&quot;#match-objects&quot;&gt;一致オブジェクトを&lt;/a&gt;返します。文字列がパターンに一致しない場合は &lt;code&gt;None&lt;/code&gt; を返します。これは長さゼロの一致とは異なることに注意してください。</target>
        </trans-unit>
        <trans-unit id="59c52023f4547acb57c7c8cf28c845aed9e66702" translate="yes" xml:space="preserve">
          <source>If the whole &lt;em&gt;string&lt;/em&gt; matches this regular expression, return a corresponding &lt;a href=&quot;#match-objects&quot;&gt;match object&lt;/a&gt;. Return &lt;code&gt;None&lt;/code&gt; if the string does not match the pattern; note that this is different from a zero-length match.</source>
          <target state="translated">&lt;em&gt;文字列&lt;/em&gt;全体がこの正規表現に一致する場合、対応する&lt;a href=&quot;#match-objects&quot;&gt;一致オブジェクトを&lt;/a&gt;返します。文字列がパターンに一致しない場合は &lt;code&gt;None&lt;/code&gt; を返します。これは長さゼロの一致とは異なることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4d277c1615b59061e36b6cff551c4b7615a3cee8" translate="yes" xml:space="preserve">
          <source>If the wrapped coroutine is not done, this returns the stack where it is suspended. If the coroutine has completed successfully or was cancelled, this returns an empty list. If the coroutine was terminated by an exception, this returns the list of traceback frames.</source>
          <target state="translated">ラップされたコアーチンが完了していない場合は、それが中断されたスタックを返します。コアーチンが正常に終了したか、またはキャンセルされた場合は、空のリストを返します。例外によってコアーチンが終了した場合は、トレースバックフレームのリストを返します。</target>
        </trans-unit>
        <trans-unit id="18bdf0075a155b02791d5a0bac71eb783654ca33" translate="yes" xml:space="preserve">
          <source>If the wrapped coroutine raised an exception that exception is returned. If the wrapped coroutine returned normally this method returns &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">ラップされたコルーチンが例外を発生させた場合、その例外が返されます。ラップされたコルーチンが正常に返された場合、このメソッドは &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="3f7728d4c859a24cbc45d6d58427ec4561648e7f" translate="yes" xml:space="preserve">
          <source>If there are any exceptions raised during one of the shared fixture functions the test is reported as an error. Because there is no corresponding test instance an &lt;code&gt;_ErrorHolder&lt;/code&gt; object (that has the same interface as a &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt;) is created to represent the error. If you are just using the standard unittest test runner then this detail doesn&amp;rsquo;t matter, but if you are a framework author it may be relevant.</source>
          <target state="translated">共有フィクスチャ関数の1つで例外が発生した場合、テストはエラーとして報告されます。対応するテストインスタンスがないため、エラーを表すために &lt;code&gt;_ErrorHolder&lt;/code&gt; オブジェクト（&lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt;と同じインターフェースを持つ）が作成されます。標準の単体テストテストランナーを使用しているだけの場合、この詳細は問題になりませんが、フレームワークの作成者であれば、関連性があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="60d4834d5062c8d19bbd59417935a75681b0f714" translate="yes" xml:space="preserve">
          <source>If there are arguments:</source>
          <target state="translated">引数があれば</target>
        </trans-unit>
        <trans-unit id="afe713097f513403e4602cccddaf88e097fca7b5" translate="yes" xml:space="preserve">
          <source>If there are capturing groups in the separator and it matches at the start of the string, the result will start with an empty string. The same holds for the end of the string:</source>
          <target state="translated">区切り文字にキャプチャグループがあり、それが文字列の先頭にマッチした場合、結果は空の文字列で始まります。文字列の最後も同様です。</target>
        </trans-unit>
        <trans-unit id="b105dd89905ca457b0617942c150ccc9ce8c2ecd" translate="yes" xml:space="preserve">
          <source>If there are keyword arguments, they will set the attributes of the same names to the given values.</source>
          <target state="translated">キーワード引数がある場合は、同じ名前の属性を与えられた値に設定します。</target>
        </trans-unit>
        <trans-unit id="06875e271bfc97aca9aed5132911283e876fd1e3" translate="yes" xml:space="preserve">
          <source>If there are multiple modes with the same frequency, returns the first one encountered in the &lt;em&gt;data&lt;/em&gt;. If the smallest or largest of those is desired instead, use &lt;code&gt;min(multimode(data))&lt;/code&gt; or &lt;code&gt;max(multimode(data))&lt;/code&gt;. If the input &lt;em&gt;data&lt;/em&gt; is empty, &lt;a href=&quot;#statistics.StatisticsError&quot;&gt;&lt;code&gt;StatisticsError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">同じ頻度のモードが複数ある場合は、&lt;em&gt;データ&lt;/em&gt;で最初に見つかったモードを返し&lt;em&gt;ます&lt;/em&gt;。それらの最小値または最大値が代わりに必要な場合は、 &lt;code&gt;min(multimode(data))&lt;/code&gt; または &lt;code&gt;max(multimode(data))&lt;/code&gt; を使用してください。入力&lt;em&gt;データ&lt;/em&gt;が空の場合、&lt;a href=&quot;#statistics.StatisticsError&quot;&gt; &lt;code&gt;StatisticsError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="f44c76149f8456dfb2f9b8dc82d343dcb9e7029d" translate="yes" xml:space="preserve">
          <source>If there are no remaining path segments in &lt;code&gt;PATH_INFO&lt;/code&gt;, &lt;code&gt;None&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;PATH_INFO&lt;/code&gt; にパスセグメントが残っていない場合は、 &lt;code&gt;None&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="70b04fc0fe654b81856797a63a15dc517bb87a72" translate="yes" xml:space="preserve">
          <source>If there are positional arguments, there must be as many as there are items in &lt;code&gt;T._fields&lt;/code&gt;; they will be assigned as attributes of these names.</source>
          <target state="translated">位置引数がある場合は、 &lt;code&gt;T._fields&lt;/code&gt; の項目と同じ数だけ存在する必要があります。これらは、これらの名前の属性として割り当てられます。</target>
        </trans-unit>
        <trans-unit id="0f42d2c2054cdfdb7413a7243a89893529ac2223" translate="yes" xml:space="preserve">
          <source>If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in x will be mapped to the character at the same position in y. If there is a third argument, it must be a string, whose characters will be mapped to &lt;code&gt;None&lt;/code&gt; in the result.</source>
          <target state="translated">2つの引数がある場合、それらは等しい長さの文字列でなければならず、結果のディクショナリでは、xの各文字はyの同じ位置の文字にマップされます。3番目の引数がある場合、それは文字列である必要があり、その文字は結果で &lt;code&gt;None&lt;/code&gt; にマップされます。</target>
        </trans-unit>
        <trans-unit id="710f0541779e51ddda266bf2e4665a21cc66a9aa" translate="yes" xml:space="preserve">
          <source>If there has been no previous &lt;code&gt;EHLO&lt;/code&gt; or &lt;code&gt;HELO&lt;/code&gt; command this session, this method tries ESMTP &lt;code&gt;EHLO&lt;/code&gt; first.</source>
          <target state="translated">このセッションに以前の &lt;code&gt;EHLO&lt;/code&gt; または &lt;code&gt;HELO&lt;/code&gt; コマンドがない場合、このメソッドは最初にESMTP &lt;code&gt;EHLO&lt;/code&gt; を試行します。</target>
        </trans-unit>
        <trans-unit id="1386edd9abb7368a780ead9fa2633755d22aab5e" translate="yes" xml:space="preserve">
          <source>If there has been no previous &lt;code&gt;EHLO&lt;/code&gt; or &lt;code&gt;HELO&lt;/code&gt; command this session, this method tries ESMTP &lt;code&gt;EHLO&lt;/code&gt; first. If the server does ESMTP, message size and each of the specified options will be passed to it (if the option is in the feature set the server advertises). If &lt;code&gt;EHLO&lt;/code&gt; fails, &lt;code&gt;HELO&lt;/code&gt; will be tried and ESMTP options suppressed.</source>
          <target state="translated">このセッションに以前の &lt;code&gt;EHLO&lt;/code&gt; または &lt;code&gt;HELO&lt;/code&gt; コマンドがない場合、このメソッドは最初にESMTP &lt;code&gt;EHLO&lt;/code&gt; を試行します。サーバーがESMTPを実行する場合、メッセージサイズと指定された各オプションがサーバーに渡されます（オプションがサーバーがアドバタイズする機能セットにある場合）。場合 &lt;code&gt;EHLO&lt;/code&gt; が失敗し、 &lt;code&gt;HELO&lt;/code&gt; が試されますとESMTPオプションが抑制されました。</target>
        </trans-unit>
        <trans-unit id="8264923428e93189de3d9488f3d02a8d83fd11ec" translate="yes" xml:space="preserve">
          <source>If there is a character stream specified, the SAX parser will ignore any byte stream and will not attempt to open a URI connection to the system identifier.</source>
          <target state="translated">文字ストリームが指定されている場合、SAX パーサはバイトストリームを無視し、システム識別子への URI 接続を開こうとしません。</target>
        </trans-unit>
        <trans-unit id="7846e0ef14d60bd28e7efa81ee77d44a8c2917bd" translate="yes" xml:space="preserve">
          <source>If there is a problem with &lt;em&gt;source&lt;/em&gt;, an exception will be raised. &lt;a href=&quot;exceptions#SyntaxError&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; is raised if there is invalid Python syntax, and &lt;a href=&quot;exceptions#OverflowError&quot;&gt;&lt;code&gt;OverflowError&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; if there is an invalid literal.</source>
          <target state="translated">&lt;em&gt;source&lt;/em&gt;に問題がある場合、例外が発生します。&lt;a href=&quot;exceptions#SyntaxError&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;は、無効なPython構文がある場合に発生し、&lt;a href=&quot;exceptions#OverflowError&quot;&gt; &lt;code&gt;OverflowError&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;が無効なリテラルがある場合に発生します。</target>
        </trans-unit>
        <trans-unit id="c624ff3e0c15c1748938e12da19d4755d79f2928" translate="yes" xml:space="preserve">
          <source>If there is an decoding error on the server name, the TLS connection will terminate with an &lt;a href=&quot;#ssl.ALERT_DESCRIPTION_INTERNAL_ERROR&quot;&gt;&lt;code&gt;ALERT_DESCRIPTION_INTERNAL_ERROR&lt;/code&gt;&lt;/a&gt; fatal TLS alert message to the client.</source>
          <target state="translated">サーバー名にデコードエラーがある場合、TLS接続はクライアントへの&lt;a href=&quot;#ssl.ALERT_DESCRIPTION_INTERNAL_ERROR&quot;&gt; &lt;code&gt;ALERT_DESCRIPTION_INTERNAL_ERROR&lt;/code&gt; &lt;/a&gt;致命的なTLSアラートメッセージで終了します。</target>
        </trans-unit>
        <trans-unit id="c08a28ed04606b4fe20cd569bde11df730c25ffd" translate="yes" xml:space="preserve">
          <source>If there is an error opening the terminal, the underlying curses library may cause the interpreter to exit.</source>
          <target state="translated">ターミナルを開く際にエラーが発生した場合、基礎となる curses ライブラリによってインタープリタが終了する可能性があります。</target>
        </trans-unit>
        <trans-unit id="20d9f9895dc923352fb368d4bf728ee9c56de965" translate="yes" xml:space="preserve">
          <source>If there is any error occurred in the trace function, it will be unset, just like &lt;code&gt;settrace(None)&lt;/code&gt; is called.</source>
          <target state="translated">trace関数でエラーが発生した場合、 &lt;code&gt;settrace(None)&lt;/code&gt; が呼び出されるのと同じように、エラーは解除されます。</target>
        </trans-unit>
        <trans-unit id="0926a91c9853e7eeca2a1fc656ef6115ed6a1bf4" translate="yes" xml:space="preserve">
          <source>If there is no certificate for the peer on the other end of the connection, return &lt;code&gt;None&lt;/code&gt;. If the SSL handshake hasn&amp;rsquo;t been done yet, raise &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">接続のもう一方の端にピアの証明書がない場合は、 &lt;code&gt;None&lt;/code&gt; を返します。SSLハンドシェイクがまだ行われていない場合は、&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; を発生させ&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="a16e417025a92b683985a38322a1cd0d3d0859ca" translate="yes" xml:space="preserve">
          <source>If there is no existing &lt;em&gt;MIME-Version&lt;/em&gt; header one will be added. If there is no existing &lt;em&gt;Content-Type&lt;/em&gt; header, one will be added with a value of &lt;em&gt;text/plain&lt;/em&gt;. Whether the &lt;em&gt;Content-Type&lt;/em&gt; header already exists or not, its &lt;code&gt;charset&lt;/code&gt; parameter will be set to &lt;em&gt;charset.output_charset&lt;/em&gt;. If &lt;em&gt;charset.input_charset&lt;/em&gt; and &lt;em&gt;charset.output_charset&lt;/em&gt; differ, the payload will be re-encoded to the &lt;em&gt;output_charset&lt;/em&gt;. If there is no existing &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt; header, then the payload will be transfer-encoded, if needed, using the specified &lt;a href=&quot;email.charset#email.charset.Charset&quot;&gt;&lt;code&gt;Charset&lt;/code&gt;&lt;/a&gt;, and a header with the appropriate value will be added. If a &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt; header already exists, the payload is assumed to already be correctly encoded using that &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt; and is not modified.</source>
          <target state="translated">既存の&lt;em&gt;MIME-Version&lt;/em&gt;ヘッダーがない場合は追加されます。既存の&lt;em&gt;Content-Type&lt;/em&gt;ヘッダーがない場合は、&lt;em&gt;text / plainの&lt;/em&gt;値で追加され&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;Content-Type&lt;/em&gt;ヘッダーがすでに存在するかどうかに関係なく、その &lt;code&gt;charset&lt;/code&gt; パラメータは&lt;em&gt;charset.output_charset&lt;/em&gt;に設定され&lt;em&gt;ます&lt;/em&gt;。場合&lt;em&gt;charset.input_charset&lt;/em&gt;と&lt;em&gt;charset.output_charsetは&lt;/em&gt;異なる、ペイロードに再エンコードになり&lt;em&gt;output_charset&lt;/em&gt;。既存の&lt;em&gt;Content-Transfer-Encoding&lt;/em&gt;ヘッダーがない場合、必要に応じて、指定された&lt;a href=&quot;email.charset#email.charset.Charset&quot;&gt; &lt;code&gt;Charset&lt;/code&gt; &lt;/a&gt;を使用してペイロードが転送エンコードされます。、適切な値のヘッダーが追加されます。場合&lt;em&gt;コンテンツ転送符号化&lt;/em&gt;ヘッダが既に存在し、ペイロードは既に正しくことを使用して符号化されているものとする&lt;em&gt;コンテンツ転送符号化&lt;/em&gt;及び変性されていません。</target>
        </trans-unit>
        <trans-unit id="668457ccf6ecd6f3a813b38d49f7b92435618884" translate="yes" xml:space="preserve">
          <source>If there is no running event loop a &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; is raised. This function can only be called from a coroutine or a callback.</source>
          <target state="translated">実行中のイベントループがない場合、&lt;a href=&quot;exceptions#RuntimeError&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;/a&gt;が発生します。この関数は、コルーチンまたはコールバックからのみ呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="69cac254e6b298fe4270f509ae2413d5927fd1a9" translate="yes" xml:space="preserve">
          <source>If there is no value for the variable in the current context, the method will:</source>
          <target state="translated">現在のコンテキストに変数の値が存在しない場合、このメソッドは</target>
        </trans-unit>
        <trans-unit id="80c2dc75a994416645ae1c9380a6d0ceb3f65147" translate="yes" xml:space="preserve">
          <source>If there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters (strings of length 1) to Unicode ordinals, strings (of arbitrary lengths) or &lt;code&gt;None&lt;/code&gt;. Character keys will then be converted to ordinals.</source>
          <target state="translated">引数が1つしかない場合は、Unicodeの序数（整数）または文字（長さ1の文字列）をUnicodeの序数、文字列（任意の長さ）、または &lt;code&gt;None&lt;/code&gt; にマッピングする辞書でなければなりません。その後、文字キーは序数に変換されます。</target>
        </trans-unit>
        <trans-unit id="4b89ec1a8424896e51072da33f9efe49e974e577" translate="yes" xml:space="preserve">
          <source>If there is only one possible completion for the characters entered, a</source>
          <target state="translated">入力された文字の補完が1つしかない場合は</target>
        </trans-unit>
        <trans-unit id="8b2610dd6d4564147cdc6a071edbeae596a215ec" translate="yes" xml:space="preserve">
          <source>If these attributes are marked as optional in the grammar (using a question mark), the value might be &lt;code&gt;None&lt;/code&gt;. If the attributes can have zero-or-more values (marked with an asterisk), the values are represented as Python lists. All possible attributes must be present and have valid values when compiling an AST with &lt;a href=&quot;functions#compile&quot;&gt;&lt;code&gt;compile()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらの属性が文法で（疑問符を使用して）オプションとしてマークされている場合、値は &lt;code&gt;None&lt;/code&gt; になる可能性があります。属性にゼロ以上の値（アスタリスクが付いている）を含めることができる場合、値はPythonリストとして表されます。&lt;a href=&quot;functions#compile&quot;&gt; &lt;code&gt;compile()&lt;/code&gt; &lt;/a&gt;を使用してASTをコンパイルする場合、すべての可能な属性が存在し、有効な値を持っている必要があります。</target>
        </trans-unit>
        <trans-unit id="4cc8f6301859f9ffe9df6772bfd5316c956f6429" translate="yes" xml:space="preserve">
          <source>If this attribute evaluates to true, events logged to this logger will be passed to the handlers of higher level (ancestor) loggers, in addition to any handlers attached to this logger. Messages are passed directly to the ancestor loggers&amp;rsquo; handlers - neither the level nor filters of the ancestor loggers in question are considered.</source>
          <target state="translated">この属性がtrueと評価された場合、このロガーに記録されたイベントは、このロガーに接続されているハンドラーに加えて、より高いレベル（祖先）のロガーのハンドラーに渡されます。メッセージは祖先ロガーのハンドラーに直接渡されます。問題の祖先ロガーのレベルもフィルターも考慮されません。</target>
        </trans-unit>
        <trans-unit id="abdb9590d870789abfb1d2c6cd1c630b5f260a6c" translate="yes" xml:space="preserve">
          <source>If this attribute is accessed before the end of the stream has been reached, its value will be &lt;code&gt;b''&lt;/code&gt;.</source>
          <target state="translated">ストリームの終わりに達する前にこの属性にアクセスした場合、その値は &lt;code&gt;b''&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="57abef9824fea6e680f0e895e49db397a22940bc" translate="yes" xml:space="preserve">
          <source>If this attribute is not &lt;code&gt;None&lt;/code&gt; (the default), all test methods to be included in test suites must match one of the patterns in this list. Note that matches are always performed using &lt;a href=&quot;fnmatch#fnmatch.fnmatchcase&quot;&gt;&lt;code&gt;fnmatch.fnmatchcase()&lt;/code&gt;&lt;/a&gt;, so unlike patterns passed to the &lt;code&gt;-v&lt;/code&gt; option, simple substring patterns will have to be converted using &lt;code&gt;*&lt;/code&gt; wildcards.</source>
          <target state="translated">この属性が &lt;code&gt;None&lt;/code&gt; （デフォルト）でない場合、テストスイートに含まれるすべてのテストメソッドは、このリストのパターンのいずれかに一致する必要があります。一致は常に&lt;a href=&quot;fnmatch#fnmatch.fnmatchcase&quot;&gt; &lt;code&gt;fnmatch.fnmatchcase()&lt;/code&gt; &lt;/a&gt;を使用して実行されるため、 &lt;code&gt;-v&lt;/code&gt; オプションに渡されるパターンとは異なり、単純な部分文字列パターンは &lt;code&gt;*&lt;/code&gt; ワイルドカードを使用して変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="0e0a95050375345febb5eec5f5dd1307acaa7573" translate="yes" xml:space="preserve">
          <source>If this attribute is numeric and &lt;code&gt;1&lt;/code&gt; or more, a &lt;a href=&quot;#shlex.shlex&quot;&gt;&lt;code&gt;shlex&lt;/code&gt;&lt;/a&gt; instance will print verbose progress output on its behavior. If you need to use this, you can read the module source code to learn the details.</source>
          <target state="translated">この属性が数値で &lt;code&gt;1&lt;/code&gt; 以上の場合、&lt;a href=&quot;#shlex.shlex&quot;&gt; &lt;code&gt;shlex&lt;/code&gt; &lt;/a&gt;インスタンスはその動作に関する詳細な進行状況を出力します。これを使用する必要がある場合は、モジュールのソースコードを読んで詳細を確認できます。</target>
        </trans-unit>
        <trans-unit id="b804a91b5f1f64f8e7129df9975fc4040a040277" translate="yes" xml:space="preserve">
          <source>If this attribute is set to a callable, the &lt;a href=&quot;#logging.handlers.BaseRotatingHandler.rotate&quot;&gt;&lt;code&gt;rotate()&lt;/code&gt;&lt;/a&gt; method delegates to this callable. The parameters passed to the callable are those passed to &lt;a href=&quot;#logging.handlers.BaseRotatingHandler.rotate&quot;&gt;&lt;code&gt;rotate()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この属性が呼び出し可能に設定されている場合、&lt;a href=&quot;#logging.handlers.BaseRotatingHandler.rotate&quot;&gt; &lt;code&gt;rotate()&lt;/code&gt; &lt;/a&gt;メソッドはこの呼び出し可能に委譲します。呼び出し可能オブジェクトに渡されるパラメーターは、&lt;a href=&quot;#logging.handlers.BaseRotatingHandler.rotate&quot;&gt; &lt;code&gt;rotate()&lt;/code&gt; に&lt;/a&gt;渡されるパラメーターです。</target>
        </trans-unit>
        <trans-unit id="7ebbb6f8f84980f280f393669d0bd62b9cd2bef9" translate="yes" xml:space="preserve">
          <source>If this attribute is set to a callable, the &lt;a href=&quot;#logging.handlers.BaseRotatingHandler.rotation_filename&quot;&gt;&lt;code&gt;rotation_filename()&lt;/code&gt;&lt;/a&gt; method delegates to this callable. The parameters passed to the callable are those passed to &lt;a href=&quot;#logging.handlers.BaseRotatingHandler.rotation_filename&quot;&gt;&lt;code&gt;rotation_filename()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この属性が呼び出し可能に設定されている場合、&lt;a href=&quot;#logging.handlers.BaseRotatingHandler.rotation_filename&quot;&gt; &lt;code&gt;rotation_filename()&lt;/code&gt; &lt;/a&gt;メソッドはこの呼び出し可能に委譲します。呼び出し可能オブジェクトに渡されるパラメーターは、&lt;a href=&quot;#logging.handlers.BaseRotatingHandler.rotation_filename&quot;&gt; &lt;code&gt;rotation_filename()&lt;/code&gt; に&lt;/a&gt;渡されるパラメーターです。</target>
        </trans-unit>
        <trans-unit id="dff1b29a4811ae4a2758c854c0086cdf364b91aa" translate="yes" xml:space="preserve">
          <source>If this bit is set, then random bytes are drawn from the &lt;code&gt;/dev/random&lt;/code&gt; pool instead of the &lt;code&gt;/dev/urandom&lt;/code&gt; pool.</source>
          <target state="translated">このビットが設定されている場合、ランダムバイトは、 &lt;code&gt;/dev/urandom&lt;/code&gt; プールではなく &lt;code&gt;/dev/random&lt;/code&gt; プールから取得されます。</target>
        </trans-unit>
        <trans-unit id="90bb6faa5b3834263ad7c4573939b37c5a542a65" translate="yes" xml:space="preserve">
          <source>If this evaluates to false, logging messages are not passed to the handlers of ancestor loggers.</source>
          <target state="translated">これが false と評価された場合、ロギングメッセージは祖先ロガーのハンドラには渡されません。</target>
        </trans-unit>
        <trans-unit id="017d3d68f19210726c382bec27e52a2d417c3981" translate="yes" xml:space="preserve">
          <source>If this function raises an exception, &lt;a href=&quot;sys#sys.excepthook&quot;&gt;&lt;code&gt;sys.excepthook()&lt;/code&gt;&lt;/a&gt; is called to handle it.</source>
          <target state="translated">この関数が例外を発生させると、それを処理するために&lt;a href=&quot;sys#sys.excepthook&quot;&gt; &lt;code&gt;sys.excepthook()&lt;/code&gt; &lt;/a&gt;が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="58d8a99c356472fc70700f6ecb9c84865af60bb2" translate="yes" xml:space="preserve">
          <source>If this gives an error of type 404, the server cannot find the script &amp;ndash; perhaps you need to install it in a different directory. If it gives another error, there&amp;rsquo;s an installation problem that you should fix before trying to go any further. If you get a nicely formatted listing of the environment and form content (in this example, the fields should be listed as &amp;ldquo;addr&amp;rdquo; with value &amp;ldquo;At Home&amp;rdquo; and &amp;ldquo;name&amp;rdquo; with value &amp;ldquo;Joe Blow&amp;rdquo;), the &lt;code&gt;cgi.py&lt;/code&gt; script has been installed correctly. If you follow the same procedure for your own script, you should now be able to debug it.</source>
          <target state="translated">これによりタイプ404のエラーが発生した場合、サーバーはスクリプトを見つけることができません。おそらく、別のディレクトリにインストールする必要があります。別のエラーが発生する場合は、インストールの問題があるため、先に進む前に修正する必要があります。環境とフォームの内容が適切にフォーマットされたリストを取得した場合（この例では、フィールドは値が「At Home」の「addr」、値が「Joe Blow」の「name」としてリストされます）、 &lt;code&gt;cgi.py&lt;/code&gt; スクリプト正しくインストールされています。独自のスクリプトで同じ手順を実行すると、スクリプトをデバッグできるようになります。</target>
        </trans-unit>
        <trans-unit id="f8f7b6501e5b158a220ae98c2d595a7087ee640a" translate="yes" xml:space="preserve">
          <source>If this handler is not provided, external entities are reported by the &lt;a href=&quot;#xml.parsers.expat.xmlparser.DefaultHandler&quot;&gt;&lt;code&gt;DefaultHandler&lt;/code&gt;&lt;/a&gt; callback, if provided.</source>
          <target state="translated">このハンドラーが提供されない場合、提供されている場合、&lt;a href=&quot;#xml.parsers.expat.xmlparser.DefaultHandler&quot;&gt; &lt;code&gt;DefaultHandler&lt;/code&gt; &lt;/a&gt;コールバックによって外部エンティティーが報告されます。</target>
        </trans-unit>
        <trans-unit id="85450d770d6418bc4deec157d80a4e51aa30db87" translate="yes" xml:space="preserve">
          <source>If this heap invariant is protected at all time, index 0 is clearly the overall winner. The simplest algorithmic way to remove it and find the &amp;ldquo;next&amp;rdquo; winner is to move some loser (let&amp;rsquo;s say cell 30 in the diagram above) into the 0 position, and then percolate this new 0 down the tree, exchanging values, until the invariant is re-established. This is clearly logarithmic on the total number of items in the tree. By iterating over all items, you get an O(n log n) sort.</source>
          <target state="translated">このヒープの不変条件が常に保護されている場合、インデックス0は明らかに全体的な勝者です。それを削除して「次の」勝者を見つける最も簡単なアルゴリズム的な方法は、敗者（上の図のセル30としましょう）を0の位置に移動し、この新しい0をツリーの下に浸透させ、不変になるまで値を交換します。再設立されました。これは、ツリー内のアイテムの総数の対数です。すべてのアイテムを反復することにより、O（n log n）ソートを取得します。</target>
        </trans-unit>
        <trans-unit id="7a3e8042246e5ac5ba9685632876ea8a3d42c4e7" translate="yes" xml:space="preserve">
          <source>If this is set (not &lt;code&gt;None&lt;/code&gt;), Python will write bytecode-cache &lt;code&gt;.pyc&lt;/code&gt; files to (and read them from) a parallel directory tree rooted at this directory, rather than from &lt;code&gt;__pycache__&lt;/code&gt; directories in the source code tree. Any &lt;code&gt;__pycache__&lt;/code&gt; directories in the source code tree will be ignored and new &lt;code&gt;.pyc&lt;/code&gt; files written within the pycache prefix. Thus if you use &lt;a href=&quot;compileall#module-compileall&quot;&gt;&lt;code&gt;compileall&lt;/code&gt;&lt;/a&gt; as a pre-build step, you must ensure you run it with the same pycache prefix (if any) that you will use at runtime.</source>
          <target state="translated">これが（ &lt;code&gt;None&lt;/code&gt; 以外の）設定されている場合、Pythonはバイトコードキャッシュの &lt;code&gt;.pyc&lt;/code&gt; ファイルを、ソースコードツリーの &lt;code&gt;__pycache__&lt;/code&gt; ディレクトリからではなく、このディレクトリをルートとする並列ディレクトリツリーに（そしてそこから）読み取ります。どれ &lt;code&gt;__pycache__&lt;/code&gt; ソースコードツリー内のディレクトリは無視され、新 &lt;code&gt;.pyc&lt;/code&gt; ファイルがpycacheプレフィックス内書かれました。したがって、&lt;a href=&quot;compileall#module-compileall&quot;&gt; &lt;code&gt;compileall&lt;/code&gt; &lt;/a&gt;前ステップとしてcompileallを使用する場合は、実行時に使用するものと同じpycacheプレフィックス（存在する場合）を付けて実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="6b26511950bcfbe88174f69e9200e69454a2056a" translate="yes" xml:space="preserve">
          <source>If this is true, Python won&amp;rsquo;t try to write &lt;code&gt;.pyc&lt;/code&gt; files on the import of source modules. This value is initially set to &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; depending on the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id1&quot;&gt;&lt;code&gt;-B&lt;/code&gt;&lt;/a&gt; command line option and the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONDONTWRITEBYTECODE&quot; id=&quot;index-5&quot;&gt;&lt;code&gt;PYTHONDONTWRITEBYTECODE&lt;/code&gt;&lt;/a&gt; environment variable, but you can set it yourself to control bytecode file generation.</source>
          <target state="translated">これがtrueの場合、Pythonはソースモジュールのインポート時に &lt;code&gt;.pyc&lt;/code&gt; ファイルを書き込もうとしません。この値は、最初は&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id1&quot;&gt; &lt;code&gt;-B&lt;/code&gt; &lt;/a&gt;コマンドラインオプションと&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONDONTWRITEBYTECODE&quot; id=&quot;index-5&quot;&gt; &lt;code&gt;PYTHONDONTWRITEBYTECODE&lt;/code&gt; &lt;/a&gt;環境変数に応じて &lt;code&gt;True&lt;/code&gt; または &lt;code&gt;False&lt;/code&gt; に設定されますが、バイトコードファイルの生成を制御するために自分で設定できます。</target>
        </trans-unit>
        <trans-unit id="3314650337b2349372ab978feed37d7432cf9791" translate="yes" xml:space="preserve">
          <source>If this keyword argument is specified as true, any existing handlers attached to the root logger are removed and closed, before carrying out the configuration as specified by the other arguments.</source>
          <target state="translated">このキーワード引数を true に指定すると、ルートロガーに接続されている既存のハンドラは、他の引数で指定された構成を実行する前に削除されて閉じられます。</target>
        </trans-unit>
        <trans-unit id="11e62c76d42fa37b48327413f77512cf4b5df592" translate="yes" xml:space="preserve">
          <source>If this method is used when the associated process is using a pipe or queue then the pipe or queue is liable to become corrupted and may become unusable by other process. Similarly, if the process has acquired a lock or semaphore etc. then terminating it is liable to cause other processes to deadlock.</source>
          <target state="translated">この方法は、関連プロセスがパイプやキューを使用しているときに使用されると、パイプやキューが破損しやすく、他のプロセスが使用できなくなる可能性があります。同様に、プロセスがロックやセマフォなどを取得している場合、そのプロセスを終了すると他のプロセスがデッドロックする可能性があります。</target>
        </trans-unit>
        <trans-unit id="40b84b7c2b8cd75da3b54cede5c5b30cfe17179e" translate="yes" xml:space="preserve">
          <source>If true, load cookies lazily from disk. This attribute should not be assigned to. This is only a hint, since this only affects performance, not behaviour (unless the cookies on disk are changing). A &lt;a href=&quot;#http.cookiejar.CookieJar&quot;&gt;&lt;code&gt;CookieJar&lt;/code&gt;&lt;/a&gt; object may ignore it. None of the &lt;a href=&quot;#http.cookiejar.FileCookieJar&quot;&gt;&lt;code&gt;FileCookieJar&lt;/code&gt;&lt;/a&gt; classes included in the standard library lazily loads cookies.</source>
          <target state="translated">trueの場合、cookieをディスクから遅延読み込みします。この属性は割り当てないでください。これは単なるヒントであり、これはパフォーマンスにのみ影響し、動作には影響しません（ディスク上のCookieが変更されない限り）。&lt;a href=&quot;#http.cookiejar.CookieJar&quot;&gt; &lt;code&gt;CookieJar&lt;/code&gt; の&lt;/a&gt;オブジェクトは、それを無視することができます。標準ライブラリに含まれている&lt;a href=&quot;#http.cookiejar.FileCookieJar&quot;&gt; &lt;code&gt;FileCookieJar&lt;/code&gt; &lt;/a&gt;クラスは、どれも遅延してCookieをロードしません。</target>
        </trans-unit>
        <trans-unit id="4b776e3e6964e37b47588161e44e80da43328cd0" translate="yes" xml:space="preserve">
          <source>If true, request that the &lt;a href=&quot;#http.cookiejar.CookieJar&quot;&gt;&lt;code&gt;CookieJar&lt;/code&gt;&lt;/a&gt; instance downgrade &lt;a href=&quot;https://tools.ietf.org/html/rfc2109.html&quot; id=&quot;index-15&quot;&gt;&lt;strong&gt;RFC 2109&lt;/strong&gt;&lt;/a&gt; cookies (ie. cookies received in a &lt;em&gt;Set-Cookie&lt;/em&gt; header with a version cookie-attribute of 1) to Netscape cookies by setting the version attribute of the &lt;a href=&quot;#http.cookiejar.Cookie&quot;&gt;&lt;code&gt;Cookie&lt;/code&gt;&lt;/a&gt; instance to 0. The default value is &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, in which case RFC 2109 cookies are downgraded if and only if &lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-16&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt; handling is turned off. Therefore, RFC 2109 cookies are downgraded by default.</source>
          <target state="translated">trueの場合、&lt;a href=&quot;#http.cookiejar.Cookie&quot;&gt; &lt;code&gt;Cookie&lt;/code&gt; &lt;/a&gt;インスタンスのバージョン属性を0に設定して、&lt;a href=&quot;#http.cookiejar.CookieJar&quot;&gt; &lt;code&gt;CookieJar&lt;/code&gt; &lt;/a&gt;インスタンスが&lt;a href=&quot;https://tools.ietf.org/html/rfc2109.html&quot; id=&quot;index-15&quot;&gt;&lt;strong&gt;RFC 2109&lt;/strong&gt;&lt;/a&gt; Cookie（つまり、バージョンCookie属性が1の&lt;em&gt;Set-Cookie&lt;/em&gt;ヘッダーで受信した&lt;em&gt;Cookie&lt;/em&gt;）をNetscape Cookieにダウングレードするように要求します。デフォルト値は&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;です。この場合、&lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-16&quot;&gt;&lt;strong&gt;RFC 2965の&lt;/strong&gt;&lt;/a&gt;処理がオフになっている場合に限り、&lt;strong&gt;RFC&lt;/strong&gt; 2109 Cookieがダウングレードされます。したがって、RFC 2109 Cookieはデフォルトでダウングレードされます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ae1121f9e45a9703c97a6bf40a561f0b607ea007" translate="yes" xml:space="preserve">
          <source>If turtleshape is a polygon, outline and interior of that polygon is drawn with the newly set colors.</source>
          <target state="translated">タートルシェープが多角形の場合は、その多角形の輪郭と内部が新たに設定された色で描画されます。</target>
        </trans-unit>
        <trans-unit id="6b992dbf815e5a48ca08b90300fa3a4771a7068e" translate="yes" xml:space="preserve">
          <source>If turtleshape is a polygon, the interior of that polygon is drawn with the newly set fillcolor.</source>
          <target state="translated">タートルシェープが多角形の場合は、その多角形の内部を新たに設定した塗りつぶし色で描画します。</target>
        </trans-unit>
        <trans-unit id="be2827a5012b6740877e0b7b0e62c1a742812bf7" translate="yes" xml:space="preserve">
          <source>If turtleshape is a polygon, the outline of that polygon is drawn with the newly set pencolor.</source>
          <target state="translated">タートルシェープが多角形の場合は、その多角形の輪郭を新たに設定したペンカラーで描画します。</target>
        </trans-unit>
        <trans-unit id="0c29d653e6b038e2fe7684142d34103dcd03b42e" translate="yes" xml:space="preserve">
          <source>If two &lt;a href=&quot;#sqlite3.Row&quot;&gt;&lt;code&gt;Row&lt;/code&gt;&lt;/a&gt; objects have exactly the same columns and their members are equal, they compare equal.</source>
          <target state="translated">2つの&lt;a href=&quot;#sqlite3.Row&quot;&gt; &lt;code&gt;Row&lt;/code&gt; &lt;/a&gt;オブジェクトがまったく同じ列を持ち、それらのメンバーが等しい場合、それらは等しく比較されます。</target>
        </trans-unit>
        <trans-unit id="260d0a1b06a2d521034b375df46c28e25cc4e075" translate="yes" xml:space="preserve">
          <source>If used, this function should be called before &lt;a href=&quot;#curses.initscr&quot;&gt;&lt;code&gt;initscr()&lt;/code&gt;&lt;/a&gt; or newterm are called. When &lt;em&gt;flag&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt;, the values of lines and columns specified in the terminfo database will be used, even if environment variables &lt;code id=&quot;index-5&quot;&gt;LINES&lt;/code&gt; and &lt;code id=&quot;index-6&quot;&gt;COLUMNS&lt;/code&gt; (used by default) are set, or if curses is running in a window (in which case default behavior would be to use the window size if &lt;code id=&quot;index-7&quot;&gt;LINES&lt;/code&gt; and &lt;code id=&quot;index-8&quot;&gt;COLUMNS&lt;/code&gt; are not set).</source>
          <target state="translated">使用する場合、この関数は&lt;a href=&quot;#curses.initscr&quot;&gt; &lt;code&gt;initscr()&lt;/code&gt; &lt;/a&gt;またはnewtermを呼び出す前に呼び出す必要があります。場合&lt;em&gt;フラグが&lt;/em&gt;ある &lt;code&gt;False&lt;/code&gt; 、行と列の値は、terminfoデータベース内の指定された環境変数の場合でも、使用される &lt;code id=&quot;index-5&quot;&gt;LINES&lt;/code&gt; と &lt;code id=&quot;index-6&quot;&gt;COLUMNS&lt;/code&gt; （デフォルトで使用）が設定されている、または呪いは、ウィンドウで実行されている場合（で場合のデフォルトの動作になります &lt;code id=&quot;index-7&quot;&gt;LINES&lt;/code&gt; と &lt;code id=&quot;index-8&quot;&gt;COLUMNS&lt;/code&gt; が設定されていない場合は、ウィンドウサイズを使用してください）。</target>
        </trans-unit>
        <trans-unit id="b09a2a72ca9eebcfaf2f7a111fffa10693a0be54" translate="yes" xml:space="preserve">
          <source>If using this module as part of a multi-processed application (using, for example the &lt;a href=&quot;multiprocessing#module-multiprocessing&quot;&gt;&lt;code&gt;multiprocessing&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;concurrent.futures#module-concurrent.futures&quot;&gt;&lt;code&gt;concurrent.futures&lt;/code&gt;&lt;/a&gt; modules), be aware that OpenSSL&amp;rsquo;s internal random number generator does not properly handle forked processes. Applications must change the PRNG state of the parent process if they use any SSL feature with &lt;a href=&quot;os#os.fork&quot;&gt;&lt;code&gt;os.fork()&lt;/code&gt;&lt;/a&gt;. Any successful call of &lt;a href=&quot;#ssl.RAND_add&quot;&gt;&lt;code&gt;RAND_add()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ssl.RAND_bytes&quot;&gt;&lt;code&gt;RAND_bytes()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#ssl.RAND_pseudo_bytes&quot;&gt;&lt;code&gt;RAND_pseudo_bytes()&lt;/code&gt;&lt;/a&gt; is sufficient.</source>
          <target state="translated">このモジュールをマルチプロセスアプリケーションの一部として使用する場合（たとえば、&lt;a href=&quot;multiprocessing#module-multiprocessing&quot;&gt; &lt;code&gt;multiprocessing&lt;/code&gt; &lt;/a&gt;モジュールまたは&lt;a href=&quot;concurrent.futures#module-concurrent.futures&quot;&gt; &lt;code&gt;concurrent.futures&lt;/code&gt; &lt;/a&gt;モジュールを使用）、OpenSSLの内部乱数ジェネレーターがフォークされたプロセスを適切に処理しないことに注意してください。&lt;a href=&quot;os#os.fork&quot;&gt; &lt;code&gt;os.fork()&lt;/code&gt; で&lt;/a&gt; SSL機能を使用する場合、アプリケーションは親プロセスのPRNG状態を変更する必要があります。&lt;a href=&quot;#ssl.RAND_add&quot;&gt; &lt;code&gt;RAND_add()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ssl.RAND_bytes&quot;&gt; &lt;code&gt;RAND_bytes()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#ssl.RAND_pseudo_bytes&quot;&gt; &lt;code&gt;RAND_pseudo_bytes()&lt;/code&gt; の&lt;/a&gt;正常な呼び出しで十分です。</target>
        </trans-unit>
        <trans-unit id="40cadaadf40f8d88630127c112a5dbe1fa546685" translate="yes" xml:space="preserve">
          <source>If we make the decimal place and everything after it optional, not all groups might participate in the match. These groups will default to &lt;code&gt;None&lt;/code&gt; unless the &lt;em&gt;default&lt;/em&gt; argument is given:</source>
          <target state="translated">小数点以下をオプションにすると、すべてのグループが試合に参加するわけではありません。これらのグループは、&lt;em&gt;デフォルトの&lt;/em&gt;引数が指定されていない限り、&lt;em&gt;デフォルトで&lt;/em&gt; &lt;code&gt;None&lt;/code&gt; になります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="21252e699b38c9bde015d527adf98063ea9f956c" translate="yes" xml:space="preserve">
          <source>If we were sent the message from the last example, here is one way we could process it:</source>
          <target state="translated">先ほどの例のメッセージが送られてきたとしたら、それを処理する方法の1つをご紹介します。</target>
        </trans-unit>
        <trans-unit id="6bfdd750da38ffcee31dea60ae619912d24791e2" translate="yes" xml:space="preserve">
          <source>If window is currently managed by the notebook but hidden, it is restored to its previous position.</source>
          <target state="translated">ウィンドウが現在ノートブックで管理されているが非表示になっている場合は、以前の位置に復元されます。</target>
        </trans-unit>
        <trans-unit id="aec5c8d5afc40ab554ad46b385c383363932d7b7" translate="yes" xml:space="preserve">
          <source>If wrapping a shared library with &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt;, it &lt;em&gt;may&lt;/em&gt; be better to determine the shared library name at development time, and hardcode that into the wrapper module instead of using &lt;code&gt;find_library()&lt;/code&gt; to locate the library at runtime.</source>
          <target state="translated">共有ライブラリ包む場合は&lt;a href=&quot;#module-ctypes&quot;&gt; &lt;code&gt;ctypes&lt;/code&gt; のを&lt;/a&gt;、それは&lt;em&gt;可能&lt;/em&gt;その代わりに使用するラッパーモジュールに共有ライブラリの開発時には名前、および打ちを決定する方が良い &lt;code&gt;find_library()&lt;/code&gt; 実行時にライブラリを検索します。</target>
        </trans-unit>
        <trans-unit id="f6e263b3d734f898bddb0b90497009b949e688c7" translate="yes" xml:space="preserve">
          <source>If you (or your students) want to use &lt;a href=&quot;#module-turtle&quot;&gt;&lt;code&gt;turtle&lt;/code&gt;&lt;/a&gt; with online help in your native language, you have to translate the docstrings and save the resulting file as e.g. &lt;code&gt;turtle_docstringdict_german.py&lt;/code&gt;.</source>
          <target state="translated">あなた（またはあなたの学生）が母国語でオンラインヘルプ付きの&lt;a href=&quot;#module-turtle&quot;&gt; &lt;code&gt;turtle&lt;/code&gt; &lt;/a&gt;を使用したい場合は、docstringsを翻訳し、結果のファイルを &lt;code&gt;turtle_docstringdict_german.py&lt;/code&gt; などとして保存する必要があります。</target>
        </trans-unit>
        <trans-unit id="681001f9dedd39553c496bc8278d37c4dfe3445e" translate="yes" xml:space="preserve">
          <source>If you access a method (a function defined in a class namespace) through an instance, you get a special object: a &lt;em&gt;bound method&lt;/em&gt; (also called &lt;em&gt;instance method&lt;/em&gt;) object. When called, it will add the &lt;code&gt;self&lt;/code&gt; argument to the argument list. Bound methods have two special read-only attributes: &lt;code&gt;m.__self__&lt;/code&gt; is the object on which the method operates, and &lt;code&gt;m.__func__&lt;/code&gt; is the function implementing the method. Calling &lt;code&gt;m(arg-1, arg-2, ..., arg-n)&lt;/code&gt; is completely equivalent to calling &lt;code&gt;m.__func__(m.__self__, arg-1, arg-2, ...,
arg-n)&lt;/code&gt;.</source>
          <target state="translated">インスタンスを介してメソッド（クラス名前空間で定義された関数）にアクセスすると、特別なオブジェクト、&lt;em&gt;つまりバインドされたメソッド&lt;/em&gt;（&lt;em&gt;インスタンスメソッド&lt;/em&gt;とも呼ばれる）が得られます。呼び出されると、引数リストに &lt;code&gt;self&lt;/code&gt; 引数が追加されます。バインドされたメソッドには、2つの特別な読み取り専用属性があります &lt;code&gt;m.__self__&lt;/code&gt; はメソッドが操作するオブジェクトであり、 &lt;code&gt;m.__func__&lt;/code&gt; はメソッドを実装する関数です。呼び出し &lt;code&gt;m(arg-1, arg-2, ..., arg-n)&lt;/code&gt; 呼び出すことと完全に等価である &lt;code&gt;m.__func__(m.__self__, arg-1, arg-2, ..., arg-n)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8a1f07de56da7ccfad9978d85c56532e9c3232e2" translate="yes" xml:space="preserve">
          <source>If you are dynamically importing a module that was created since the interpreter began execution (e.g., created a Python source file), you may need to call &lt;a href=&quot;#importlib.invalidate_caches&quot;&gt;&lt;code&gt;invalidate_caches()&lt;/code&gt;&lt;/a&gt; in order for the new module to be noticed by the import system.</source>
          <target state="translated">インタプリタが実行を開始してから作成された（たとえば、Pythonソースファイルを作成した）モジュールを動的にインポートする場合、インポートシステムが新しいモジュールに気付くために&lt;a href=&quot;#importlib.invalidate_caches&quot;&gt; &lt;code&gt;invalidate_caches()&lt;/code&gt; &lt;/a&gt;を呼び出す必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="7a4f0de1719448ed4a63c40279ef044d3f941a85" translate="yes" xml:space="preserve">
          <source>If you are going to create a server that provides SSL-encrypted connection services, you will need to acquire a certificate for that service. There are many ways of acquiring appropriate certificates, such as buying one from a certification authority. Another common practice is to generate a self-signed certificate. The simplest way to do this is with the OpenSSL package, using something like the following:</source>
          <target state="translated">SSLで暗号化された接続サービスを提供するサーバーを作成する場合、そのサービス用の証明書を取得する必要があります。適切な証明書を取得するには、認証局から購入するなど、さまざまな方法があります。もう一つの一般的な方法は、自己署名証明書を生成することです。これを行う最も簡単な方法は、OpenSSL パッケージを使用して、以下のようなものを使用することです。</target>
        </trans-unit>
        <trans-unit id="48d6cd7b9afb257bc9891717d33d65b967870ac6" translate="yes" xml:space="preserve">
          <source>If you are going to require validation of the other side of the connection&amp;rsquo;s certificate, you need to provide a &amp;ldquo;CA certs&amp;rdquo; file, filled with the certificate chains for each issuer you are willing to trust. Again, this file just contains these chains concatenated together. For validation, Python will use the first chain it finds in the file which matches. The platform&amp;rsquo;s certificates file can be used by calling &lt;a href=&quot;#ssl.SSLContext.load_default_certs&quot;&gt;&lt;code&gt;SSLContext.load_default_certs()&lt;/code&gt;&lt;/a&gt;, this is done automatically with &lt;a href=&quot;#ssl.create_default_context&quot;&gt;&lt;code&gt;create_default_context()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">接続の証明書の反対側の検証を要求する場合は、信頼できる各発行者の証明書チェーンが入った「CA証明書」ファイルを提供する必要があります。繰り返しますが、このファイルには、これらのチェーンが連結されただけが含まれています。検証のために、Pythonは一致するファイルで最初に見つかったチェーンを使用します。&lt;a href=&quot;#ssl.SSLContext.load_default_certs&quot;&gt; &lt;code&gt;SSLContext.load_default_certs()&lt;/code&gt; を&lt;/a&gt;呼び出すことで、プラットフォームの証明書ファイルを使用できます。これは、&lt;a href=&quot;#ssl.create_default_context&quot;&gt; &lt;code&gt;create_default_context()&lt;/code&gt; で&lt;/a&gt;自動的に行われます。</target>
        </trans-unit>
        <trans-unit id="2f73a6f10ffa7b443163f14e92196bc1fc4490c7" translate="yes" xml:space="preserve">
          <source>If you are implementing a CGI-based handler of your own, you probably want to use this routine instead of just copying values out of &lt;code&gt;os.environ&lt;/code&gt; directly.</source>
          <target state="translated">独自のCGIベースのハンドラーを実装している場合は、 &lt;code&gt;os.environ&lt;/code&gt; から直接値をコピーするのではなく、このルーチンを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="7b970e3329e89a382ded0086b19b66d215dd892f" translate="yes" xml:space="preserve">
          <source>If you are implementing asynchronous signal handlers using the &lt;a href=&quot;signal#module-signal&quot;&gt;&lt;code&gt;signal&lt;/code&gt;&lt;/a&gt; module, you may not be able to use logging from within such handlers. This is because lock implementations in the &lt;a href=&quot;threading#module-threading&quot;&gt;&lt;code&gt;threading&lt;/code&gt;&lt;/a&gt; module are not always re-entrant, and so cannot be invoked from such signal handlers.</source>
          <target state="translated">&lt;a href=&quot;signal#module-signal&quot;&gt; &lt;code&gt;signal&lt;/code&gt; &lt;/a&gt;モジュールを使用して非同期シグナルハンドラーを実装している場合、そのようなハンドラー内からロギングを使用できないことがあります。これは、&lt;a href=&quot;threading#module-threading&quot;&gt; &lt;code&gt;threading&lt;/code&gt; &lt;/a&gt;モジュールのロック実装が常に再入可能であるとは限らないため、そのようなシグナルハンドラーから呼び出すことができないためです。</target>
        </trans-unit>
        <trans-unit id="4f3cb106b921f87d2d40c7d80ff67464e95e3f8e" translate="yes" xml:space="preserve">
          <source>If you are localizing your application, you can install the &lt;code&gt;_()&lt;/code&gt; function globally into the built-in namespace, usually in the main driver file of your application. This will let all your application-specific files just use &lt;code&gt;_('...')&lt;/code&gt; without having to explicitly install it in each file.</source>
          <target state="translated">アプリケーションをローカライズする場合は、 &lt;code&gt;_()&lt;/code&gt; 関数を組み込みネームスペースにグローバルにインストールできます。通常は、アプリケーションのメインドライバーファイルにあります。これにより、アプリケーション固有のすべてのファイルで &lt;code&gt;_('...')&lt;/code&gt; を使用するだけで、各ファイルに明示的にインストールする必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="1c5e00d28ce108672fa04f99996f53e40842cac4" translate="yes" xml:space="preserve">
          <source>If you are localizing your module, you must take care not to make global changes, e.g. to the built-in namespace. You should not use the GNU &lt;strong&gt;gettext&lt;/strong&gt; API but instead the class-based API.</source>
          <target state="translated">モジュールをローカライズする場合は、組み込みの名前空間など、グローバルな変更を行わないように注意する必要があります。GNU &lt;strong&gt;gettext&lt;/strong&gt; APIではなく、クラスベースのAPIを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="11373b731524ebbb3396ed6f424ed35b172c4f94" translate="yes" xml:space="preserve">
          <source>If you are running an entropy-gathering daemon (EGD) somewhere, and &lt;em&gt;path&lt;/em&gt; is the pathname of a socket connection open to it, this will read 256 bytes of randomness from the socket, and add it to the SSL pseudo-random number generator to increase the security of generated secret keys. This is typically only necessary on systems without better sources of randomness.</source>
          <target state="translated">エントロピー収集デーモン（EGD）をどこかで実行していて、&lt;em&gt;path&lt;/em&gt;が開いているソケット接続のパス名である場合、これはソケットから256バイトのランダム性を読み取り、SSL擬似乱数ジェネレーターに追加して、生成された秘密鍵のセキュリティを強化します。これは通常、より良いランダム性のソースがないシステムでのみ必要です。</target>
        </trans-unit>
        <trans-unit id="5d915c3ac798b1162027d4b78ee74eb32aecf245" translate="yes" xml:space="preserve">
          <source>If you are shipping a Windows executable as described above, you either need to ensure that your users have &lt;code&gt;python3.dll&lt;/code&gt; on their PATH (which is not the default behaviour of the installer) or you should bundle your application with the embedded distribution.</source>
          <target state="translated">上記のようにWindows実行可能ファイルを出荷する場合は、ユーザーのPATHに &lt;code&gt;python3.dll&lt;/code&gt; があることを確認する必要があります（インストーラーのデフォルトの動作ではありません）。または、アプリケーションを組み込みディストリビューションにバンドルする必要があります。</target>
        </trans-unit>
        <trans-unit id="b3c30a5d84ebc01f28c65df6e216a65d2921455f" translate="yes" xml:space="preserve">
          <source>If you are thinking of defining your own levels, please see the section on &lt;a href=&quot;https://docs.python.org/3.8/howto/logging.html#custom-levels&quot;&gt;Custom Levels&lt;/a&gt;.</source>
          <target state="translated">独自のレベルを定義することを考えている場合は、「&lt;a href=&quot;https://docs.python.org/3.8/howto/logging.html#custom-levels&quot;&gt;カスタムレベル&lt;/a&gt;」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="49e3cbf5ea7b5f0ea71d8bc500fc226c950f1779" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; to create a mock for you then it will be returned by the call to &lt;code&gt;patcher.start&lt;/code&gt;.</source>
          <target state="translated">使用している場合は&lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt;あなたのためのモックを作成するために、それはへの呼び出しによって返されます &lt;code&gt;patcher.start&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="364049631376a2a1d8911fd5401507c7f5516ee6" translate="yes" xml:space="preserve">
          <source>If you are using code that you know will raise a warning, such as a deprecated function, but do not want to see the warning (even when warnings have been explicitly configured via the command line), then it is possible to suppress the warning using the &lt;a href=&quot;#warnings.catch_warnings&quot;&gt;&lt;code&gt;catch_warnings&lt;/code&gt;&lt;/a&gt; context manager:</source>
          <target state="translated">廃止予定の関数など、警告が発生することがわかっているが、警告を表示したくないことがわかっているコードを使用している場合（コマンドラインで警告が明示的に構成されている場合でも）、次のコマンドを使用して警告を抑制することができます。&lt;a href=&quot;#warnings.catch_warnings&quot;&gt; &lt;code&gt;catch_warnings&lt;/code&gt; の&lt;/a&gt;コンテキストマネージャ：</target>
        </trans-unit>
        <trans-unit id="0c3d77e1b4bf3414b19d6e3647400caf29838bae" translate="yes" xml:space="preserve">
          <source>If you are using {}-formatting (&lt;a href=&quot;stdtypes#str.format&quot;&gt;&lt;code&gt;str.format()&lt;/code&gt;&lt;/a&gt;), you can use &lt;code&gt;{attrname}&lt;/code&gt; as the placeholder in the format string. If you are using $-formatting (&lt;a href=&quot;string#string.Template&quot;&gt;&lt;code&gt;string.Template&lt;/code&gt;&lt;/a&gt;), use the form &lt;code&gt;${attrname}&lt;/code&gt;. In both cases, of course, replace &lt;code&gt;attrname&lt;/code&gt; with the actual attribute name you want to use.</source>
          <target state="translated">{}-フォーマット（&lt;a href=&quot;stdtypes#str.format&quot;&gt; &lt;code&gt;str.format()&lt;/code&gt; &lt;/a&gt;）を使用している場合は、フォーマット文字列のプレースホルダーとして &lt;code&gt;{attrname}&lt;/code&gt; を使用できます。 $ -formatting（&lt;a href=&quot;string#string.Template&quot;&gt; &lt;code&gt;string.Template&lt;/code&gt; &lt;/a&gt;）を使用している場合は、 &lt;code&gt;${attrname}&lt;/code&gt; 形式を使用します。もちろん、どちらの場合でも、 &lt;code&gt;attrname&lt;/code&gt; を実際に使用する属性名に置き換えます。</target>
        </trans-unit>
        <trans-unit id="b6c36be2e20c5d0cd71ba05a7b714e1c1aa79df2" translate="yes" xml:space="preserve">
          <source>If you attach a handler to a logger &lt;em&gt;and&lt;/em&gt; one or more of its ancestors, it may emit the same record multiple times. In general, you should not need to attach a handler to more than one logger - if you just attach it to the appropriate logger which is highest in the logger hierarchy, then it will see all events logged by all descendant loggers, provided that their propagate setting is left set to &lt;code&gt;True&lt;/code&gt;. A common scenario is to attach handlers only to the root logger, and to let propagation take care of the rest.</source>
          <target state="translated">ロガー&lt;em&gt;と&lt;/em&gt;その祖先の1つ以上にハンドラーをアタッチすると、同じレコードが複数回出力される場合があります。一般に、ハンドラーを複数のロガーにアタッチする必要はありません。ロガー階層の最上位にある適切なロガーにハンドラーをアタッチするだけであれば、すべての子孫ロガーによってログに記録されたすべてのイベントが表示されます。設定は &lt;code&gt;True&lt;/code&gt; に設定されたままです。一般的なシナリオは、ルートロガーにのみハンドラーを接続し、残りの部分は伝播に任せることです。</target>
        </trans-unit>
        <trans-unit id="71db1cfc049ed9436b58c3258dd2abae66bed7a0" translate="yes" xml:space="preserve">
          <source>If you call getpass from within IDLE, the input may be done in the terminal you launched IDLE from rather than the idle window itself.</source>
          <target state="translated">idle内からgetpassを呼び出すと、idleウィンドウそのものではなく、idleを起動した端末で入力が行われる場合があります。</target>
        </trans-unit>
        <trans-unit id="dcfe31f0c3025ba1247b84cd55bce06307c9aaab" translate="yes" xml:space="preserve">
          <source>If you choose to use these attributes in logged messages, you need to exercise some care. In the above example, for instance, the &lt;a href=&quot;#logging.Formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt; has been set up with a format string which expects &amp;lsquo;clientip&amp;rsquo; and &amp;lsquo;user&amp;rsquo; in the attribute dictionary of the &lt;a href=&quot;#logging.LogRecord&quot;&gt;&lt;code&gt;LogRecord&lt;/code&gt;&lt;/a&gt;. If these are missing, the message will not be logged because a string formatting exception will occur. So in this case, you always need to pass the &lt;em&gt;extra&lt;/em&gt; dictionary with these keys.</source>
          <target state="translated">ログに記録されたメッセージでこれらの属性を使用することを選択した場合、いくつかの注意を払う必要があります。たとえば、上記の例では、&lt;a href=&quot;#logging.Formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;#logging.LogRecord&quot;&gt; &lt;code&gt;LogRecord&lt;/code&gt; の&lt;/a&gt;属性ディクショナリで「clientip」と「user」を予期するフォーマット文字列で設定されています。これらがない場合、文字列フォーマットの例外が発生するため、メッセージはログに記録されません。したがって、この場合、常にこれらのキーを使用して&lt;em&gt;追加の&lt;/em&gt;辞書を渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="9a9e4560c049a5fff3d7922f2065fe9c4f0bab32" translate="yes" xml:space="preserve">
          <source>If you choose to use these attributes in logged messages, you need to exercise some care. In the above example, for instance, the &lt;a href=&quot;#logging.Formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt; has been set up with a format string which expects &amp;lsquo;clientip&amp;rsquo; and &amp;lsquo;user&amp;rsquo; in the attribute dictionary of the LogRecord. If these are missing, the message will not be logged because a string formatting exception will occur. So in this case, you always need to pass the &lt;em&gt;extra&lt;/em&gt; dictionary with these keys.</source>
          <target state="translated">ログに記録されたメッセージでこれらの属性を使用することを選択した場合、いくつかの注意を払う必要があります。たとえば、上記の例では、&lt;a href=&quot;#logging.Formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt;は、LogRecordの属性ディクショナリで「clientip」と「user」を予期するフォーマット文字列で設定されています。これらがない場合、文字列フォーマットの例外が発生するため、メッセージはログに記録されません。したがって、この場合、常にこれらのキーを使用して&lt;em&gt;追加の&lt;/em&gt;辞書を渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="c553bc4df8103396b1cf2c4eb7ef7300e63b8315" translate="yes" xml:space="preserve">
          <source>If you code or decode textfiles on non-Macintosh platforms they will still use the old Macintosh newline convention (carriage-return as end of line).</source>
          <target state="translated">Macintosh 以外のプラットフォームでテキストファイルをコード化したりデコードしたりしても、古い Macintosh の改行の規則 (行末にキャリッジリターン)が使われます。</target>
        </trans-unit>
        <trans-unit id="5d1ed81961b6cb7496a0e0f060cff06cad3d1812" translate="yes" xml:space="preserve">
          <source>If you continue a line via backslashing in an interactive session, or for any other reason use a backslash, you should use a raw docstring, which will preserve your backslashes exactly as you type them:</source>
          <target state="translated">対話型セッションでバックスラッシュを使って行を続ける場合や、その他の理由でバックスラッシュを使用する場合は、生の docstring を使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="5cac94944ad97618e4be13390591255007102a1f" translate="yes" xml:space="preserve">
          <source>If you create a finalizer object in a daemonic thread just as the program exits then there is the possibility that the finalizer does not get called at exit. However, in a daemonic thread &lt;a href=&quot;atexit#atexit.register&quot;&gt;&lt;code&gt;atexit.register()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;try: ... finally: ...&lt;/code&gt; and &lt;code&gt;with: ...&lt;/code&gt; do not guarantee that cleanup occurs either.</source>
          <target state="translated">プログラムの終了時にデーモンスレッドでファイナライザオブジェクトを作成すると、終了時にファイナライザが呼び出されない可能性があります。しかし、鬼神のスレッドで&lt;a href=&quot;atexit#atexit.register&quot;&gt; &lt;code&gt;atexit.register()&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;try: ... finally: ...&lt;/code&gt; と &lt;code&gt;with: ...&lt;/code&gt; そのクリーンアップがいずれかの発生を保証するものではありません。</target>
        </trans-unit>
        <trans-unit id="a460562d42a2a11f6a379108a05dfc43f47c1591" translate="yes" xml:space="preserve">
          <source>If you define the &lt;code&gt;WINDOWS&lt;/code&gt; preprocessor symbol, this will generate a GUI executable, and without it, a console executable.</source>
          <target state="translated">&lt;code&gt;WINDOWS&lt;/code&gt; プリプロセッサシンボルを定義すると、GUI実行可能ファイルが生成され、それがない場合はコンソール実行可能ファイルが生成されます。</target>
        </trans-unit>
        <trans-unit id="2b8d268659c0afbd91ab53443b6a751cff765c3b" translate="yes" xml:space="preserve">
          <source>If you do not want that behavior, preprocess the &lt;em&gt;url&lt;/em&gt; with &lt;a href=&quot;#urllib.parse.urlsplit&quot;&gt;&lt;code&gt;urlsplit()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#urllib.parse.urlunsplit&quot;&gt;&lt;code&gt;urlunsplit()&lt;/code&gt;&lt;/a&gt;, removing possible &lt;em&gt;scheme&lt;/em&gt; and &lt;em&gt;netloc&lt;/em&gt; parts.</source>
          <target state="translated">その動作を望まない場合は、&lt;a href=&quot;#urllib.parse.urlsplit&quot;&gt; &lt;code&gt;urlsplit()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#urllib.parse.urlunsplit&quot;&gt; &lt;code&gt;urlunsplit()&lt;/code&gt; &lt;/a&gt;を使用して&lt;em&gt;URL&lt;/em&gt;を前処理し、考えられる&lt;em&gt;スキーム&lt;/em&gt;と&lt;em&gt;netlocの&lt;/em&gt;部分を削除して&lt;em&gt;ください&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="75f973cadf33dbb5346b31c20f9455a09e62a539" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t know whether a &lt;a href=&quot;#winreg.FlushKey&quot;&gt;&lt;code&gt;FlushKey()&lt;/code&gt;&lt;/a&gt; call is required, it probably isn&amp;rsquo;t.</source>
          <target state="translated">&lt;a href=&quot;#winreg.FlushKey&quot;&gt; &lt;code&gt;FlushKey()&lt;/code&gt; &lt;/a&gt;コールが必要かどうかわからない場合は、おそらく必要ありません。</target>
        </trans-unit>
        <trans-unit id="8e329f1a76521b4e0c106f18d644a53b002a016b" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t like the ACW popping up unbidden, simply make the delay longer or disable the extension.</source>
          <target state="translated">ACWポップアップが表示されたくない場合は、遅延を長くするか、拡張機能を無効にしてください。</target>
        </trans-unit>
        <trans-unit id="c0b378bb20bf0aa3247056c249ea998b15eb65e8" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to store the instance&amp;rsquo;s data in the &lt;code&gt;_as_parameter_&lt;/code&gt; instance variable, you could define a &lt;a href=&quot;functions#property&quot;&gt;&lt;code&gt;property&lt;/code&gt;&lt;/a&gt; which makes the attribute available on request.</source>
          <target state="translated">インスタンスのデータを &lt;code&gt;_as_parameter_&lt;/code&gt; インスタンス変数に保存したくない場合は、リクエストに応じて属性を使用可能にする&lt;a href=&quot;functions#property&quot;&gt; &lt;code&gt;property&lt;/code&gt; &lt;/a&gt;を定義できます。</target>
        </trans-unit>
        <trans-unit id="7a8d040851b0915051f326bd15d54a88ae21e65f" translate="yes" xml:space="preserve">
          <source>If you find that when certain older clients or servers attempt to connect with a &lt;a href=&quot;#ssl.SSLContext&quot;&gt;&lt;code&gt;SSLContext&lt;/code&gt;&lt;/a&gt; created by this function that they get an error stating &amp;ldquo;Protocol or cipher suite mismatch&amp;rdquo;, it may be that they only support SSL3.0 which this function excludes using the &lt;a href=&quot;#ssl.OP_NO_SSLv3&quot;&gt;&lt;code&gt;OP_NO_SSLv3&lt;/code&gt;&lt;/a&gt;. SSL3.0 is widely considered to be &lt;a href=&quot;https://en.wikipedia.org/wiki/POODLE&quot;&gt;completely broken&lt;/a&gt;. If you still wish to continue to use this function but still allow SSL 3.0 connections you can re-enable them using:</source>
          <target state="translated">特定の古いクライアントまたはサーバーがこの関数によって作成された&lt;a href=&quot;#ssl.SSLContext&quot;&gt; &lt;code&gt;SSLContext&lt;/code&gt; で&lt;/a&gt;接続しようとすると、「プロトコルまたは暗号スイートの不一致」というエラーが表示される場合、SSL3.0のみがサポートされている可能性があります。&lt;a href=&quot;#ssl.OP_NO_SSLv3&quot;&gt; &lt;code&gt;OP_NO_SSLv3&lt;/code&gt; &lt;/a&gt;。SSL3.0は&lt;a href=&quot;https://en.wikipedia.org/wiki/POODLE&quot;&gt;完全に壊れて&lt;/a&gt;いると広く考えられています。この機能を引き続き使用したいが、SSL 3.0接続を許可する場合は、次のコマンドを使用して再度有効にできます。</target>
        </trans-unit>
        <trans-unit id="fe9aa74952f83bd4d51d51d4e83cebc44b0b2fe0" translate="yes" xml:space="preserve">
          <source>If you give your &lt;a href=&quot;#enum.Enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; subclass extra methods, like the &lt;a href=&quot;#planet&quot;&gt;Planet&lt;/a&gt; class above, those methods will show up in a &lt;a href=&quot;functions#dir&quot;&gt;&lt;code&gt;dir()&lt;/code&gt;&lt;/a&gt; of the member, but not of the class:</source>
          <target state="translated">あなたが与えた場合&lt;a href=&quot;#enum.Enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;サブクラス余分な方法を、のような&lt;a href=&quot;#planet&quot;&gt;惑星の&lt;/a&gt;上のクラスに、これらのメソッドは、に表示されます&lt;a href=&quot;functions#dir&quot;&gt; &lt;code&gt;dir()&lt;/code&gt; &lt;/a&gt;メンバーのではなく、クラスの：</target>
        </trans-unit>
        <trans-unit id="ddea48c736e63a88242d988d2f93ca78d7b3b84d" translate="yes" xml:space="preserve">
          <source>If you have XML in a string, you can use the &lt;a href=&quot;#xml.dom.minidom.parseString&quot;&gt;&lt;code&gt;parseString()&lt;/code&gt;&lt;/a&gt; function instead:</source>
          <target state="translated">文字列にXMLがある場合は、代わりに&lt;a href=&quot;#xml.dom.minidom.parseString&quot;&gt; &lt;code&gt;parseString()&lt;/code&gt; &lt;/a&gt;関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="68b99e8b222c2278454b1cadc38d91ffc4b68997" translate="yes" xml:space="preserve">
          <source>If you have XML in a string, you can use the &lt;a href=&quot;#xml.dom.pulldom.parseString&quot;&gt;&lt;code&gt;parseString()&lt;/code&gt;&lt;/a&gt; function instead:</source>
          <target state="translated">文字列にXMLがある場合は、代わりに&lt;a href=&quot;#xml.dom.pulldom.parseString&quot;&gt; &lt;code&gt;parseString()&lt;/code&gt; &lt;/a&gt;関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="e75dc8b8eb57f89ef2cc0c8f2d61866415c62ce9" translate="yes" xml:space="preserve">
          <source>If you have a choice, you are better off choosing a smaller constant, and then your results will &amp;ldquo;less often&amp;rdquo; show up as negative in profile statistics.</source>
          <target state="translated">選択肢がある場合は、小さい定数を選択することをお勧めします。結果は、プロファイル統計で「あまり頻繁に」否定的に表示されません。</target>
        </trans-unit>
        <trans-unit id="08f422ccd0761694976f4b7f344ccca267ef692c" translate="yes" xml:space="preserve">
          <source>If you have a package installed globally and attempt test discovery on a different copy of the package then the import &lt;em&gt;could&lt;/em&gt; happen from the wrong place. If this happens test discovery will warn you and exit.</source>
          <target state="translated">パッケージをグローバルにインストールしていて、パッケージの別のコピーでテスト検出を試みると、インポート&lt;em&gt;が&lt;/em&gt;間違った場所から行われる&lt;em&gt;可能&lt;/em&gt;性があります。これが発生した場合、テスト検出は警告を表示して終了します。</target>
        </trans-unit>
        <trans-unit id="fdc90a074f4d5efa53ede11d8bcd3da1d1900c9c" translate="yes" xml:space="preserve">
          <source>If you have advanced security requirements, fine-tuning of the ciphers enabled when negotiating a SSL session is possible through the &lt;a href=&quot;#ssl.SSLContext.set_ciphers&quot;&gt;&lt;code&gt;SSLContext.set_ciphers()&lt;/code&gt;&lt;/a&gt; method. Starting from Python 3.2.3, the ssl module disables certain weak ciphers by default, but you may want to further restrict the cipher choice. Be sure to read OpenSSL&amp;rsquo;s documentation about the &lt;a href=&quot;https://www.openssl.org/docs/manmaster/man1/ciphers.html#CIPHER-LIST-FORMAT&quot;&gt;cipher list format&lt;/a&gt;. If you want to check which ciphers are enabled by a given cipher list, use &lt;a href=&quot;#ssl.SSLContext.get_ciphers&quot;&gt;&lt;code&gt;SSLContext.get_ciphers()&lt;/code&gt;&lt;/a&gt; or the &lt;code&gt;openssl ciphers&lt;/code&gt; command on your system.</source>
          <target state="translated">高度なセキュリティ要件がある場合、SSLセッションをネゴシエートするときに有効になっている暗号の微調整は、&lt;a href=&quot;#ssl.SSLContext.set_ciphers&quot;&gt; &lt;code&gt;SSLContext.set_ciphers()&lt;/code&gt; &lt;/a&gt;メソッドを介して可能です。Python 3.2.3以降、sslモジュールは特定の弱い暗号をデフォルトで無効にしますが、暗号の選択をさらに制限したい場合があります。&lt;a href=&quot;https://www.openssl.org/docs/manmaster/man1/ciphers.html#CIPHER-LIST-FORMAT&quot;&gt;暗号リスト形式&lt;/a&gt;に関するOpenSSLのドキュメントを必ずお読みください。特定の暗号リストで有効になっている暗号を確認する場合は、システムで&lt;a href=&quot;#ssl.SSLContext.get_ciphers&quot;&gt; &lt;code&gt;SSLContext.get_ciphers()&lt;/code&gt; &lt;/a&gt;または &lt;code&gt;openssl ciphers&lt;/code&gt; ciphersコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="f1e86f5dd0e423a473b0f05f43d4240f3be40b1e" translate="yes" xml:space="preserve">
          <source>If you have already calculated the mean of your data, you can pass it as the optional second argument &lt;em&gt;mu&lt;/em&gt; to avoid recalculation:</source>
          <target state="translated">データの平均をすでに計算している場合は、それをオプションの2番目の引数&lt;em&gt;mu&lt;/em&gt;として渡して、再計算を回避できます。</target>
        </trans-unit>
        <trans-unit id="4f65249585348639b163a15c90fb125aadfb0a99" translate="yes" xml:space="preserve">
          <source>If you have already calculated the mean of your data, you can pass it as the optional second argument &lt;em&gt;xbar&lt;/em&gt; to avoid recalculation:</source>
          <target state="translated">データの平均をすでに計算している場合は、それをオプションの2番目の引数&lt;em&gt;xbar&lt;/em&gt;として渡して、再計算を回避できます。</target>
        </trans-unit>
        <trans-unit id="6b5f4691daf2771d8fbe481e68889a589550470c" translate="yes" xml:space="preserve">
          <source>If you have an appropriate entry in your &lt;code&gt;turtle.cfg&lt;/code&gt; file this dictionary will be read in at import time and will replace the original English docstrings.</source>
          <target state="translated">&lt;code&gt;turtle.cfg&lt;/code&gt; ファイルに適切なエントリがある場合、この辞書はインポート時に読み込まれ、元の英語のドキュメント文字列を置き換えます。</target>
        </trans-unit>
        <trans-unit id="0a1e2776fdb2c280f99d04fa6d3f9aadbbdd2668" translate="yes" xml:space="preserve">
          <source>If you have an enum member and need its &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;value&lt;/code&gt;:</source>
          <target state="translated">enumメンバーがあり、その &lt;code&gt;name&lt;/code&gt; または &lt;code&gt;value&lt;/code&gt; が必要な場合：</target>
        </trans-unit>
        <trans-unit id="adddc6c47cf6a214332d2bba1e6dcbb1cf7609c4" translate="yes" xml:space="preserve">
          <source>If you have carried out a lot of deletions and would like to shrink the space used by the &lt;code&gt;gdbm&lt;/code&gt; file, this routine will reorganize the database. &lt;code&gt;gdbm&lt;/code&gt; objects will not shorten the length of a database file except by using this reorganization; otherwise, deleted file space will be kept and reused as new (key, value) pairs are added.</source>
          <target state="translated">多数の削除を実行し、 &lt;code&gt;gdbm&lt;/code&gt; ファイルが使用するスペースを縮小したい場合、このルーチンはデータベースを再編成します。 &lt;code&gt;gdbm&lt;/code&gt; オブジェクトは、この再編成を使用しない限り、データベースファイルの長さを短くしません。それ以外の場合、削除されたファイルスペースは保持され、新しい（キー、値）ペアが追加されたときに再利用されます。</target>
        </trans-unit>
        <trans-unit id="f3941a6c86792842a0db1694694d8d40f3510d0d" translate="yes" xml:space="preserve">
          <source>If you have defined your own classes which you pass to function calls, you have to implement a &lt;code&gt;from_param()&lt;/code&gt; class method for them to be able to use them in the &lt;code&gt;argtypes&lt;/code&gt; sequence. The &lt;code&gt;from_param()&lt;/code&gt; class method receives the Python object passed to the function call, it should do a typecheck or whatever is needed to make sure this object is acceptable, and then return the object itself, its &lt;code&gt;_as_parameter_&lt;/code&gt; attribute, or whatever you want to pass as the C function argument in this case. Again, the result should be an integer, string, bytes, a &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt; instance, or an object with an &lt;code&gt;_as_parameter_&lt;/code&gt; attribute.</source>
          <target state="translated">関数呼び出しに渡す独自のクラスを定義している場合、それらを &lt;code&gt;argtypes&lt;/code&gt; シーケンスで使用できるようにするには、from_param &lt;code&gt;from_param()&lt;/code&gt; クラスメソッドを実装する必要があります。 &lt;code&gt;from_param()&lt;/code&gt; クラスメソッドは関数呼び出しに渡されたPythonオブジェクトを受け取り、それはです。TypeCheckを行う必要がありますか、必ずこのオブジェクトが許容可能であることを確認するために必要なものは何でも、その後、オブジェクト自身、その戻り &lt;code&gt;_as_parameter_&lt;/code&gt; の属性、または何でもあなたが渡したいがこの場合、C関数の引数として。この場合も、結果は整数、文字列、バイト、&lt;a href=&quot;#module-ctypes&quot;&gt; &lt;code&gt;ctypes&lt;/code&gt; &lt;/a&gt;インスタンス、または &lt;code&gt;_as_parameter_&lt;/code&gt; 属性を持つオブジェクトである必要があります。</target>
        </trans-unit>
        <trans-unit id="c7ba5f87f67362e164e00c45234b25b88116bc45" translate="yes" xml:space="preserve">
          <source>If you have positional arguments that must begin with &lt;code&gt;-&lt;/code&gt; and don&amp;rsquo;t look like negative numbers, you can insert the pseudo-argument &lt;code&gt;'--'&lt;/code&gt; which tells &lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt;&lt;code&gt;parse_args()&lt;/code&gt;&lt;/a&gt; that everything after that is a positional argument:</source>
          <target state="translated">&lt;code&gt;-&lt;/code&gt; で始まる必要がある位置引数があり、負の数値のように見えない場合は、&lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt; &lt;code&gt;parse_args()&lt;/code&gt; に&lt;/a&gt;それ以降のすべてが位置引数であることを通知する疑似引数 &lt;code&gt;'--'&lt;/code&gt; を挿入できます。</target>
        </trans-unit>
        <trans-unit id="a1ad6fc06b4f04b51136dd86e77cdf44c2345475" translate="yes" xml:space="preserve">
          <source>If you instantiate any of these types, note that signatures may vary between Python versions.</source>
          <target state="translated">これらの型のいずれかをインスタンス化する場合、シグネチャはPythonのバージョンによって異なる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0ee2c99f3c1ce008b2482f9a4bd039eac988eb85" translate="yes" xml:space="preserve">
          <source>If you merely want to attach a time zone object &lt;em&gt;tz&lt;/em&gt; to a datetime &lt;em&gt;dt&lt;/em&gt; without adjustment of date and time data, use &lt;code&gt;dt.replace(tzinfo=tz)&lt;/code&gt;. If you merely want to remove the time zone object from an aware datetime &lt;em&gt;dt&lt;/em&gt; without conversion of date and time data, use &lt;code&gt;dt.replace(tzinfo=None)&lt;/code&gt;.</source>
          <target state="translated">日時データを調整せずに、タイムゾーンオブジェクト&lt;em&gt;tz&lt;/em&gt;を日時&lt;em&gt;dt&lt;/em&gt;にアタッチするだけの場合は、 &lt;code&gt;dt.replace(tzinfo=tz)&lt;/code&gt; を使用します。日時データを変換せずに、対応する日時&lt;em&gt;dt&lt;/em&gt;からタイムゾーンオブジェクトを削除するだけの場合は、 &lt;code&gt;dt.replace(tzinfo=None)&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="cc6c75c360131321b14d956646dcffde70eca5a7" translate="yes" xml:space="preserve">
          <source>If you need a fully populated element, look for &amp;ldquo;end&amp;rdquo; events instead.</source>
          <target state="translated">完全に入力された要素が必要な場合は、代わりに「終了」イベントを探してください。</target>
        </trans-unit>
        <trans-unit id="86368d19f69c93150072272046943f1484ff2526" translate="yes" xml:space="preserve">
          <source>If you need to find out if a module can be imported without actually doing the import, then you should use &lt;a href=&quot;#importlib.util.find_spec&quot;&gt;&lt;code&gt;importlib.util.find_spec()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">実際にインポートを行わずにモジュールをインポートできるかどうかを確認する必要がある場合は、&lt;a href=&quot;#importlib.util.find_spec&quot;&gt; &lt;code&gt;importlib.util.find_spec()&lt;/code&gt; &lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="4101124fa4b09fc6cc1ef68bc64b034b218ec7e6" translate="yes" xml:space="preserve">
          <source>If you need to free memory, for example, allocated by an extension module with a call to the &lt;code&gt;free(void *)&lt;/code&gt;, it is important that you use the function in the same library that allocated the memory.</source>
          <target state="translated">たとえば、 &lt;code&gt;free(void *)&lt;/code&gt; を呼び出して拡張モジュールによって割り当てられたメモリを解放する必要がある場合は、メモリを割り当てたのと同じライブラリ内の関数を使用することが重要です。</target>
        </trans-unit>
        <trans-unit id="6ca61f6332d6d58306dfe4cd895fbd3ec252e9fa" translate="yes" xml:space="preserve">
          <source>If you need to know if a class is an instance of a dataclass (and not a dataclass itself), then add a further check for &lt;code&gt;not
isinstance(obj, type)&lt;/code&gt;:</source>
          <target state="translated">クラスが（データクラス自体ではなく）データクラスのインスタンスであるかどうかを知る必要がある場合は、 &lt;code&gt;not isinstance(obj, type)&lt;/code&gt; チェックを追加します。</target>
        </trans-unit>
        <trans-unit id="9fbb0aa423003d7733fbd8694a32a308d63c2747" translate="yes" xml:space="preserve">
          <source>If you need to load modules from a directory which is not on Python&amp;rsquo;s default module search path, you can change the path in your script, before importing other modules. For example:</source>
          <target state="translated">Pythonのデフォルトのモジュール検索パス上にないディレクトリからモジュールをロードする必要がある場合は、他のモジュールをインポートする前に、スクリプトでパスを変更できます。例えば：</target>
        </trans-unit>
        <trans-unit id="1cf32b7cc15737ca5c3f1bc7291a3230ef00b4ed" translate="yes" xml:space="preserve">
          <source>If you need to make more significant changes to rotation processing, you can override the methods.</source>
          <target state="translated">回転処理をより大幅に変更する必要がある場合は、メソッドをオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="d96003b130e0abd7634352c365ff1181febdd21c" translate="yes" xml:space="preserve">
          <source>If you need to modify the environment for the child use the &lt;em&gt;env&lt;/em&gt; parameter rather than doing it in a &lt;em&gt;preexec_fn&lt;/em&gt;. The &lt;em&gt;start_new_session&lt;/em&gt; parameter can take the place of a previously common use of &lt;em&gt;preexec_fn&lt;/em&gt; to call os.setsid() in the child.</source>
          <target state="translated">子の環境を変更する必要がある場合は、&lt;em&gt;preexec_fn&lt;/em&gt;ではなく&lt;em&gt;env&lt;/em&gt;パラメータを使用します。&lt;em&gt;start_new_sessionの&lt;/em&gt;パラメータは、以前の一般的な使用場所取ることができ&lt;em&gt;preexec_fnには&lt;/em&gt;、子供に（）os.setsidコールします。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f304fd08cfd78b8854b1fd29f66f112cd5c13e1e" translate="yes" xml:space="preserve">
          <source>If you need to set the locale directory, you can pass it into the &lt;a href=&quot;#gettext.install&quot;&gt;&lt;code&gt;install()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">ロケールディレクトリを設定する必要がある場合は、それを&lt;a href=&quot;#gettext.install&quot;&gt; &lt;code&gt;install()&lt;/code&gt; &lt;/a&gt;関数に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="989b83d5f423a04c98cf18328ded12c8c1f9993b" translate="yes" xml:space="preserve">
          <source>If you pass a relative pathname, don&amp;rsquo;t change the current working directory between resumptions of &lt;a href=&quot;#os.walk&quot;&gt;&lt;code&gt;walk()&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#os.walk&quot;&gt;&lt;code&gt;walk()&lt;/code&gt;&lt;/a&gt; never changes the current directory, and assumes that its caller doesn&amp;rsquo;t either.</source>
          <target state="translated">相対パス名を渡す場合、&lt;a href=&quot;#os.walk&quot;&gt; &lt;code&gt;walk()&lt;/code&gt; の&lt;/a&gt;再開の間に現在の作業ディレクトリを変更しないでください。&lt;a href=&quot;#os.walk&quot;&gt; &lt;code&gt;walk()&lt;/code&gt; &lt;/a&gt;は現在のディレクトリを決して変更せず、その呼び出し元も変更しないと想定します。</target>
        </trans-unit>
        <trans-unit id="14e992d9d4752d16d4f2db4c0441e7739cd4616d" translate="yes" xml:space="preserve">
          <source>If you pass in a file-like object, the wave object will not close it when its &lt;code&gt;close()&lt;/code&gt; method is called; it is the caller&amp;rsquo;s responsibility to close the file object.</source>
          <target state="translated">ファイルのようなオブジェクトを渡した場合、waveオブジェクトは &lt;code&gt;close()&lt;/code&gt; メソッドが呼び出されてもそれを閉じません。ファイルオブジェクトを閉じるのは呼び出し側の責任です。</target>
        </trans-unit>
        <trans-unit id="bce6fbed23eb5dcd1301360b71b6c428b6101471" translate="yes" xml:space="preserve">
          <source>If you pass in a function it will be called with same arguments as the mock and unless the function returns the &lt;a href=&quot;#unittest.mock.DEFAULT&quot;&gt;&lt;code&gt;DEFAULT&lt;/code&gt;&lt;/a&gt; singleton the call to the mock will then return whatever the function returns. If the function returns &lt;a href=&quot;#unittest.mock.DEFAULT&quot;&gt;&lt;code&gt;DEFAULT&lt;/code&gt;&lt;/a&gt; then the mock will return its normal value (from the &lt;a href=&quot;#unittest.mock.Mock.return_value&quot;&gt;&lt;code&gt;return_value&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">関数を渡すと、モックと同じ引数で呼び出され、関数が&lt;a href=&quot;#unittest.mock.DEFAULT&quot;&gt; &lt;code&gt;DEFAULT&lt;/code&gt; &lt;/a&gt;シングルトンを返さない限り、モックの呼び出しは、関数が返すものは何でも返します。関数が&lt;a href=&quot;#unittest.mock.DEFAULT&quot;&gt; &lt;code&gt;DEFAULT&lt;/code&gt; &lt;/a&gt;を返す場合、モックは（&lt;a href=&quot;#unittest.mock.Mock.return_value&quot;&gt; &lt;code&gt;return_value&lt;/code&gt; &lt;/a&gt;から）通常の値を返します。</target>
        </trans-unit>
        <trans-unit id="a5bcec43963bc6522bf0a067657c871d04e72c94" translate="yes" xml:space="preserve">
          <source>If you pass in an iterable, it is used to retrieve an iterator which must yield a value on every call. This value can either be an exception instance to be raised, or a value to be returned from the call to the mock (&lt;a href=&quot;#unittest.mock.DEFAULT&quot;&gt;&lt;code&gt;DEFAULT&lt;/code&gt;&lt;/a&gt; handling is identical to the function case).</source>
          <target state="translated">iterableを渡すと、すべての呼び出しで値を生成する必要があるイテレータを取得するために使用されます。この値は、発生する例外インスタンスか、呼び出しからモックに返される値のいずれかです（&lt;a href=&quot;#unittest.mock.DEFAULT&quot;&gt; &lt;code&gt;DEFAULT&lt;/code&gt; &lt;/a&gt;処理は関数の場合と同じです）。</target>
        </trans-unit>
        <trans-unit id="e8f98dd86ae9edd376ec292daf25469e857090bc" translate="yes" xml:space="preserve">
          <source>If you prefer to tune security settings yourself, you might create a context from scratch (but beware that you might not get the settings right):</source>
          <target state="translated">セキュリティ設定を自分で調整したい場合は、最初からコンテキストを作成することができます (ただし、設定が正しく行われない可能性があるので注意してください)。</target>
        </trans-unit>
        <trans-unit id="13d9f70eafdbcb60562762894f8800d86df24ae3" translate="yes" xml:space="preserve">
          <source>If you ran the process with &lt;code&gt;stderr=subprocess.STDOUT&lt;/code&gt;, stdout and stderr will be combined in this attribute, and &lt;a href=&quot;#subprocess.CompletedProcess.stderr&quot;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt; will be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stderr=subprocess.STDOUT&lt;/code&gt; でプロセスを実行した場合、stdoutとstderrがこの属性で結合され、&lt;a href=&quot;#subprocess.CompletedProcess.stderr&quot;&gt; &lt;code&gt;stderr&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;None&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="097c1b21b4dc383068accbc4c009da7628ba1b98" translate="yes" xml:space="preserve">
          <source>If you run &lt;code&gt;example.py&lt;/code&gt; directly from the command line, &lt;a href=&quot;#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; works its magic:</source>
          <target state="translated">コマンドラインから直接 &lt;code&gt;example.py&lt;/code&gt; を実行すると、&lt;a href=&quot;#module-doctest&quot;&gt; &lt;code&gt;doctest&lt;/code&gt; &lt;/a&gt;はその魔法を使います：</target>
        </trans-unit>
        <trans-unit id="4f231c383bc8b650abcdc023f68a52b9b627363e" translate="yes" xml:space="preserve">
          <source>If you set e.g. &lt;code&gt;language = italian&lt;/code&gt; the docstringdict &lt;code&gt;turtle_docstringdict_italian.py&lt;/code&gt; will be loaded at import time (if present on the import path, e.g. in the same directory as &lt;a href=&quot;#module-turtle&quot;&gt;&lt;code&gt;turtle&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">たとえば、 &lt;code&gt;language = italian&lt;/code&gt; を設定すると、docstringdict &lt;code&gt;turtle_docstringdict_italian.py&lt;/code&gt; がインポート時にロードされます（インポートパスに存在する場合、たとえば&lt;a href=&quot;#module-turtle&quot;&gt; &lt;code&gt;turtle&lt;/code&gt; &lt;/a&gt;と同じディレクトリにある場合）。</target>
        </trans-unit>
        <trans-unit id="9f9ca74752ebe3e1cde63708838074a0ef64b8ab" translate="yes" xml:space="preserve">
          <source>If you simply want to import a module (potentially within a package) by name, use &lt;a href=&quot;importlib#importlib.import_module&quot;&gt;&lt;code&gt;importlib.import_module()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">名前だけで（パッケージ内にある可能性がある）モジュールをインポートするだけの場合は、&lt;a href=&quot;importlib#importlib.import_module&quot;&gt; &lt;code&gt;importlib.import_module()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="eadedf4eaab1c80ba2f6a6ef7e45a206594d656a" translate="yes" xml:space="preserve">
          <source>If you somehow know the actual population mean &amp;mu; you should pass it to the &lt;a href=&quot;#statistics.pvariance&quot;&gt;&lt;code&gt;pvariance()&lt;/code&gt;&lt;/a&gt; function as the &lt;em&gt;mu&lt;/em&gt; parameter to get the variance of a sample.</source>
          <target state="translated">どういうわけか実際の母集団の平均&amp;mu;がわかっている場合は、それを&lt;em&gt;mu&lt;/em&gt;パラメーターとして&lt;a href=&quot;#statistics.pvariance&quot;&gt; &lt;code&gt;pvariance()&lt;/code&gt; &lt;/a&gt;関数に渡して、標本の分散を取得する必要があります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6158aab4724beaceaa6e79b29d9be8382f2e23f9" translate="yes" xml:space="preserve">
          <source>If you somehow know the true population mean &amp;mu;, you may use this function to calculate the variance of a sample, giving the known population mean as the second argument. Provided the data points are a random sample of the population, the result will be an unbiased estimate of the population variance.</source>
          <target state="translated">真の母集団平均&amp;mu;が何らかの形でわかっている場合は、この関数を使用してサンプルの分散を計算し、既知の母集団平均を2番目の引数として与えます。データポイントが母集団のランダムサンプルである場合、結果は母集団分散の不偏推定値になります。</target>
        </trans-unit>
        <trans-unit id="c10de555c4449d7964f6af5647d563052cabd068" translate="yes" xml:space="preserve">
          <source>If you supply the start directory as a package name rather than a path to a directory then discover assumes that whichever location it imports from is the location you intended, so you will not get the warning.</source>
          <target state="translated">開始ディレクトリをディレクトリへのパスではなくパッケージ名として指定した場合、discover はインポート元の場所があなたの意図した場所であると仮定しますので、警告は表示されません。</target>
        </trans-unit>
        <trans-unit id="9bc2a6c7429466d8bb8a989fdc7ce4cc694cd926" translate="yes" xml:space="preserve">
          <source>If you suspect that there may be a problem in importing the &lt;a href=&quot;cgitb#module-cgitb&quot;&gt;&lt;code&gt;cgitb&lt;/code&gt;&lt;/a&gt; module, you can use an even more robust approach (which only uses built-in modules):</source>
          <target state="translated">&lt;a href=&quot;cgitb#module-cgitb&quot;&gt; &lt;code&gt;cgitb&lt;/code&gt; &lt;/a&gt;モジュールのインポートに問題があると思われる場合は、さらに強力な方法（組み込みモジュールのみを使用）を使用できます。</target>
        </trans-unit>
        <trans-unit id="50de709429c8c96a2fb6b6fdf0e8b44acd7d7e0a" translate="yes" xml:space="preserve">
          <source>If you use &amp;ldquo;/usr/bin/env python&amp;rdquo; (or other forms of the &amp;ldquo;python&amp;rdquo; command, such as &amp;ldquo;/usr/bin/python&amp;rdquo;), you need to consider that your users may have either Python 2 or Python 3 as their default, and write your code to work under both versions.</source>
          <target state="translated">「/ usr / bin / env python」（または「/ usr / bin / python」などの他の形式の「python」コマンド）を使用する場合は、ユーザーがPython 2またはPython 3を使用している可能性があることを考慮する必要がありますデフォルトとして、両方のバージョンで動作するようにコードを記述します。</target>
        </trans-unit>
        <trans-unit id="3327948dd8642cd268b3754e1a2f4b14a2babf7c" translate="yes" xml:space="preserve">
          <source>If you use &lt;a href=&quot;#multiprocessing.JoinableQueue&quot;&gt;&lt;code&gt;JoinableQueue&lt;/code&gt;&lt;/a&gt; then you &lt;strong&gt;must&lt;/strong&gt; call &lt;a href=&quot;#multiprocessing.JoinableQueue.task_done&quot;&gt;&lt;code&gt;JoinableQueue.task_done()&lt;/code&gt;&lt;/a&gt; for each task removed from the queue or else the semaphore used to count the number of unfinished tasks may eventually overflow, raising an exception.</source>
          <target state="translated">&lt;a href=&quot;#multiprocessing.JoinableQueue&quot;&gt; &lt;code&gt;JoinableQueue&lt;/code&gt; &lt;/a&gt;を使用する場合、キューから削除される各タスクに対して&lt;a href=&quot;#multiprocessing.JoinableQueue.task_done&quot;&gt; &lt;code&gt;JoinableQueue.task_done()&lt;/code&gt; &lt;/a&gt;を呼び出す&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます。そうし&lt;strong&gt;ない&lt;/strong&gt;と、未完了のタスクの数をカウントするために使用されるセマフォが最終的にオーバーフローし、例外が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="8f4f2a66699a6ccb9a802c6a128aa2a5c76c7e61" translate="yes" xml:space="preserve">
          <source>If you use &lt;em&gt;editline&lt;/em&gt;/&lt;code&gt;libedit&lt;/code&gt; readline emulation on macOS, the initialization file located in your home directory is named &lt;code&gt;.editrc&lt;/code&gt;. For example, the following content in &lt;code&gt;~/.editrc&lt;/code&gt; will turn ON &lt;em&gt;vi&lt;/em&gt; keybindings and TAB completion:</source>
          <target state="translated">macOSで&lt;em&gt;editline&lt;/em&gt; / &lt;code&gt;libedit&lt;/code&gt; readlineエミュレーションを使用する場合、ホームディレクトリにある初期化ファイルの名前は &lt;code&gt;.editrc&lt;/code&gt; です。たとえば、 &lt;code&gt;~/.editrc&lt;/code&gt; 次のコンテンツは、&lt;em&gt;vi&lt;/em&gt;キーバインドとタブ補完をオンにします。</target>
        </trans-unit>
        <trans-unit id="c3d4a93e13f71d80556de33a53d4ec361fe070d9" translate="yes" xml:space="preserve">
          <source>If you use &lt;em&gt;spec&lt;/em&gt; or &lt;em&gt;spec_set&lt;/em&gt; and &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; is replacing a &lt;em&gt;class&lt;/em&gt;, then the return value of the created mock will have the same spec.</source>
          <target state="translated">&lt;em&gt;spec&lt;/em&gt;または&lt;em&gt;spec_set&lt;/em&gt;を使用し、&lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt;が&lt;em&gt;classを&lt;/em&gt;置き換えている場合、作成されたモックの戻り値は同じ仕様になります。</target>
        </trans-unit>
        <trans-unit id="514f9487f7b2350c961e01f947173c311579e162" translate="yes" xml:space="preserve">
          <source>If you use a hostname in the &lt;em&gt;host&lt;/em&gt; portion of IPv4/v6 socket address, the program may show a nondeterministic behavior, as Python uses the first address returned from the DNS resolution. The socket address will be resolved differently into an actual IPv4/v6 address, depending on the results from DNS resolution and/or the host configuration. For deterministic behavior use a numeric address in &lt;em&gt;host&lt;/em&gt; portion.</source>
          <target state="translated">IPv4 / v6ソケットアドレスの&lt;em&gt;ホスト&lt;/em&gt;部分で&lt;em&gt;ホスト&lt;/em&gt;名を使用すると、PythonがDNS解決から返された最初のアドレスを使用するため、プログラムが非決定的な動作を示すことがあります。ソケットアドレスは、DNS解決やホスト構成の結果に応じて、実際のIPv4 / v6アドレスに異なる方法で解決されます。確定的な動作には、&lt;em&gt;ホスト&lt;/em&gt;部分に数値アドレスを使用します。</target>
        </trans-unit>
        <trans-unit id="96ea7b1cf88562cf80e633c2b1c94203e479e327" translate="yes" xml:space="preserve">
          <source>If you use an explicit version, for example &amp;ldquo;/usr/bin/env python3&amp;rdquo; your application will not work for users who do not have that version. (This may be what you want if you have not made your code Python 2 compatible).</source>
          <target state="translated">「/ usr / bin / env python3」などの明示的なバージョンを使用する場合、そのバージョンを持たないユーザーはアプリケーションを使用できません。（コードをPython 2互換にしていない場合は、これで十分です）。</target>
        </trans-unit>
        <trans-unit id="6997de2e41b96b52ebe4782063e52556ff05a848" translate="yes" xml:space="preserve">
          <source>If you use the &amp;lsquo;silent&amp;rsquo; command in the command list, the usual message about stopping at a breakpoint is not printed. This may be desirable for breakpoints that are to print a specific message and then continue. If none of the other commands print anything, you see no sign that the breakpoint was reached.</source>
          <target state="translated">コマンドリストで 'silent'コマンドを使用すると、ブレークポイントで停止することに関する通常のメッセージは出力されません。これは、特定のメッセージを出力して続行するブレークポイントに望ましい場合があります。他のコマンドで何も出力されない場合は、ブレークポイントに到達したという兆候はありません。</target>
        </trans-unit>
        <trans-unit id="f69dd2dd959b985277dcf16e4c5303ee3dde0861" translate="yes" xml:space="preserve">
          <source>If you use the &lt;em&gt;spec&lt;/em&gt; keyword argument to create a mock then attempting to set a magic method that isn&amp;rsquo;t in the spec will raise an &lt;a href=&quot;exceptions#AttributeError&quot;&gt;&lt;code&gt;AttributeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;spec&lt;/em&gt;キーワード引数を使用してモックを作成する場合、&lt;em&gt;仕様に&lt;/em&gt;ないマジックメソッドを設定しようとすると、&lt;a href=&quot;exceptions#AttributeError&quot;&gt; &lt;code&gt;AttributeError&lt;/code&gt; が発生し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="353ad31e4d774964063f5b58ea1776698ab8f303" translate="yes" xml:space="preserve">
          <source>If you use the &lt;em&gt;spec&lt;/em&gt; or &lt;em&gt;spec_set&lt;/em&gt; arguments then &lt;em&gt;only&lt;/em&gt; magic methods that exist in the spec will be created.</source>
          <target state="translated">&lt;em&gt;spec&lt;/em&gt;または&lt;em&gt;spec_set&lt;/em&gt;引数を使用すると、&lt;em&gt;specに&lt;/em&gt;存在するマジックメソッド&lt;em&gt;のみ&lt;/em&gt;が作成されます。</target>
        </trans-unit>
        <trans-unit id="3be1784a6b9e18d186acdce6908f38010e51c9ef" translate="yes" xml:space="preserve">
          <source>If you use the ADPCM coder to build network packets and you want your protocol to be stateless (i.e. to be able to tolerate packet loss) you should not only transmit the data but also the state. Note that you should send the &lt;em&gt;initial&lt;/em&gt; state (the one you passed to &lt;a href=&quot;#audioop.lin2adpcm&quot;&gt;&lt;code&gt;lin2adpcm()&lt;/code&gt;&lt;/a&gt;) along to the decoder, not the final state (as returned by the coder). If you want to use &lt;a href=&quot;struct#struct.Struct&quot;&gt;&lt;code&gt;struct.Struct&lt;/code&gt;&lt;/a&gt; to store the state in binary you can code the first element (the predicted value) in 16 bits and the second (the delta index) in 8.</source>
          <target state="translated">ADPCMコーダーを使用してネットワークパケットを構築し、プロトコルをステートレスにしたい場合（つまり、パケット損失を許容できるようにする場合）は、データだけでなく状態も送信する必要があります。&lt;em&gt;初期&lt;/em&gt;状態（&lt;a href=&quot;#audioop.lin2adpcm&quot;&gt; &lt;code&gt;lin2adpcm()&lt;/code&gt; に&lt;/a&gt;渡した状態）をデコーダーに送る必要があることに注意してください（最終的な状態（コーダーによって返される）ではありません）。&lt;a href=&quot;struct#struct.Struct&quot;&gt; &lt;code&gt;struct.Struct&lt;/code&gt; &lt;/a&gt;を使用して状態をバイナリで格納する場合は、最初の要素（予測値）を16ビットで、2番目の要素（デルタインデックス）を8でコーディングできます。</target>
        </trans-unit>
        <trans-unit id="9c83d7f1f379ed7a6cf04574d6c921d79a111100" translate="yes" xml:space="preserve">
          <source>If you use this technique you must ensure that the patching is &amp;ldquo;undone&amp;rdquo; by calling &lt;code&gt;stop&lt;/code&gt;. This can be fiddlier than you might think, because if an exception is raised in the &lt;code&gt;setUp&lt;/code&gt; then &lt;code&gt;tearDown&lt;/code&gt; is not called. &lt;a href=&quot;unittest#unittest.TestCase.addCleanup&quot;&gt;&lt;code&gt;unittest.TestCase.addCleanup()&lt;/code&gt;&lt;/a&gt; makes this easier:</source>
          <target state="translated">この手法を使用する場合は、 &lt;code&gt;stop&lt;/code&gt; を呼び出して、パッチを確実に「取り消す」必要があります。例外がで発生した場合ので、これは、あなたが思っているよりfiddlierことができる &lt;code&gt;setUp&lt;/code&gt; そして &lt;code&gt;tearDown&lt;/code&gt; 呼び出されません。&lt;a href=&quot;unittest#unittest.TestCase.addCleanup&quot;&gt; &lt;code&gt;unittest.TestCase.addCleanup()&lt;/code&gt; &lt;/a&gt;はこれを簡単にします：</target>
        </trans-unit>
        <trans-unit id="75bf0749f0dd727a13fcc6a835a82d9cd272d1fc" translate="yes" xml:space="preserve">
          <source>If you want &lt;a href=&quot;#unittest.mock.patch.multiple&quot;&gt;&lt;code&gt;patch.multiple()&lt;/code&gt;&lt;/a&gt; to create mocks for you, then you can use &lt;a href=&quot;#unittest.mock.DEFAULT&quot;&gt;&lt;code&gt;DEFAULT&lt;/code&gt;&lt;/a&gt; as the value. If you use &lt;a href=&quot;#unittest.mock.patch.multiple&quot;&gt;&lt;code&gt;patch.multiple()&lt;/code&gt;&lt;/a&gt; as a decorator then the created mocks are passed into the decorated function by keyword.</source>
          <target state="translated">あなたがしたい場合&lt;a href=&quot;#unittest.mock.patch.multiple&quot;&gt; &lt;code&gt;patch.multiple()&lt;/code&gt; &lt;/a&gt;あなたのためのモックを作成するには、あなたが使用することができます&lt;a href=&quot;#unittest.mock.DEFAULT&quot;&gt; &lt;code&gt;DEFAULT&lt;/code&gt; を&lt;/a&gt;値として。&lt;a href=&quot;#unittest.mock.patch.multiple&quot;&gt; &lt;code&gt;patch.multiple()&lt;/code&gt; &lt;/a&gt;をデコレータとして使用する場合、作成されたモックは、キーワードによって装飾された関数に渡されます。</target>
        </trans-unit>
        <trans-unit id="6a385ee3f431c0cf8aa5476eab766bc532450fe5" translate="yes" xml:space="preserve">
          <source>If you want a given &lt;em&gt;stdin&lt;/em&gt; to be used, make sure to set the instance&amp;rsquo;s &lt;a href=&quot;#cmd.Cmd.use_rawinput&quot;&gt;&lt;code&gt;use_rawinput&lt;/code&gt;&lt;/a&gt; attribute to &lt;code&gt;False&lt;/code&gt;, otherwise &lt;em&gt;stdin&lt;/em&gt; will be ignored.</source>
          <target state="translated">特定の&lt;em&gt;stdin&lt;/em&gt;を使用する場合は、インスタンスの&lt;a href=&quot;#cmd.Cmd.use_rawinput&quot;&gt; &lt;code&gt;use_rawinput&lt;/code&gt; &lt;/a&gt;属性を必ず &lt;code&gt;False&lt;/code&gt; に設定してください。そうしないと、&lt;em&gt;stdin&lt;/em&gt;は無視されます。</target>
        </trans-unit>
        <trans-unit id="d7bcf54413bb963aa019597f5acad81401f292e6" translate="yes" xml:space="preserve">
          <source>If you want cross-platform overwriting of the destination, use &lt;a href=&quot;#os.replace&quot;&gt;&lt;code&gt;replace()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">クロスプラットフォームで宛先を上書きする場合は、&lt;a href=&quot;#os.replace&quot;&gt; &lt;code&gt;replace()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="7a129089344fee48b88396b82f4d19b77ca7fc4d" translate="yes" xml:space="preserve">
          <source>If you want more functionality, you&amp;rsquo;re going to have to read the manual, or guess what the following functions do:</source>
          <target state="translated">より多くの機能が必要な場合は、マニュアルを読むか、次の関数の機能を推測する必要があります。</target>
        </trans-unit>
        <trans-unit id="8ae975db4dc6412041430b1daafaa6c1c0e31b5d" translate="yes" xml:space="preserve">
          <source>If you want the &lt;code&gt;setUpClass&lt;/code&gt; and &lt;code&gt;tearDownClass&lt;/code&gt; on base classes called then you must call up to them yourself. The implementations in &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; are empty.</source>
          <target state="translated">あなたがしたい場合 &lt;code&gt;setUpClass&lt;/code&gt; と &lt;code&gt;tearDownClass&lt;/code&gt; と呼ばれる基本クラスのを、あなたは彼らに自分自身を呼び出す必要があります。&lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt;の実装は空です。</target>
        </trans-unit>
        <trans-unit id="8fc69a19f6a319eafed02a83645ae1ec1683cb6c" translate="yes" xml:space="preserve">
          <source>If you want the adler32 or crc32 hash functions, they are available in the &lt;a href=&quot;zlib#module-zlib&quot;&gt;&lt;code&gt;zlib&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">adler32またはcrc32ハッシュ関数が必要な場合は、&lt;a href=&quot;zlib#module-zlib&quot;&gt; &lt;code&gt;zlib&lt;/code&gt; &lt;/a&gt;モジュールで使用できます。</target>
        </trans-unit>
        <trans-unit id="4cc2b2701ce617852e01ad2fdbb4d98e0e062510" translate="yes" xml:space="preserve">
          <source>If you want the mock to still return the default return value (a new mock), or any set return value, then there are two ways of doing this. Either return &lt;code&gt;mock.return_value&lt;/code&gt; from inside &lt;code&gt;side_effect&lt;/code&gt;, or return &lt;a href=&quot;#unittest.mock.DEFAULT&quot;&gt;&lt;code&gt;DEFAULT&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">モックがデフォルトの戻り値（新しいモック）または任意の設定された戻り値を返すようにする場合は、2つの方法があります。どちらのリターン &lt;code&gt;mock.return_value&lt;/code&gt; 内部から &lt;code&gt;side_effect&lt;/code&gt; 、または戻り&lt;a href=&quot;#unittest.mock.DEFAULT&quot;&gt; &lt;code&gt;DEFAULT&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="c2e7b29010c2bd4bd3a7b2186800720ade7653a7" translate="yes" xml:space="preserve">
          <source>If you want to access enum members by &lt;em&gt;name&lt;/em&gt;, use item access:</source>
          <target state="translated">enumメンバーに&lt;em&gt;名前&lt;/em&gt;でアクセスする場合は、アイテムアクセスを使用します。</target>
        </trans-unit>
        <trans-unit id="2c2d72cb023b23999d092f07ff8849d8edf000d1" translate="yes" xml:space="preserve">
          <source>If you want to avoid the &lt;code&gt;ord(&quot;x&quot;)&lt;/code&gt; calls above, you can set the &lt;code&gt;argtypes&lt;/code&gt; attribute, and the second argument will be converted from a single character Python bytes object into a C char:</source>
          <target state="translated">上記の &lt;code&gt;ord(&quot;x&quot;)&lt;/code&gt; 呼び出しを避けたい場合は、 &lt;code&gt;argtypes&lt;/code&gt; 属性を設定できます。2番目の引数は、1文字のPythonバイトオブジェクトからC文字に変換されます。</target>
        </trans-unit>
        <trans-unit id="279c29c89aa9656f84b48678016178fbd67cb71c" translate="yes" xml:space="preserve">
          <source>If you want to change how current time is determined (for example, to force use of wall-clock time or elapsed process time), pass the timing function you want to the &lt;code&gt;Profile&lt;/code&gt; class constructor:</source>
          <target state="translated">現在の時刻の決定方法を変更する場合（たとえば、実時間または経過したプロセス時間の使用を強制する場合）、必要なタイミング関数を &lt;code&gt;Profile&lt;/code&gt; クラスコンストラクターに渡します。</target>
        </trans-unit>
        <trans-unit id="73a589407368c78ec530e2f941e80cc64760ae2f" translate="yes" xml:space="preserve">
          <source>If you want to clear any previously installed progress handler, call the method with &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; for &lt;em&gt;handler&lt;/em&gt;.</source>
          <target state="translated">以前にインストールした進行状況ハンドラーをクリアする場合は、&lt;em&gt;ハンドラーに&lt;/em&gt;&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;を指定してメソッドを呼び出します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b85687d6933b3a0fe36fbb7a49d525fedab74695" translate="yes" xml:space="preserve">
          <source>If you want to convert an integer number to an uppercase or lower hexadecimal string with prefix or not, you can use either of the following ways:</source>
          <target state="translated">整数の数値を接頭辞付きの大文字か小文字の16進数文字列に変換したい場合は、以下のいずれかの方法で変換できます。</target>
        </trans-unit>
        <trans-unit id="555dbff41f37109f588fa5abd198ada8e8af5c33" translate="yes" xml:space="preserve">
          <source>If you want to convert an integer number to octal string either with prefix &amp;ldquo;0o&amp;rdquo; or not, you can use either of the following ways.</source>
          <target state="translated">整数を接頭辞「0o」の付いた8進数の文字列に変換するかどうかは、次のいずれかの方法を使用できます。</target>
        </trans-unit>
        <trans-unit id="8a7e395a436c737fb4f983babcb85c37f7ffba2a" translate="yes" xml:space="preserve">
          <source>If you want to create a memory-mapping for a writable, buffered file, you should &lt;a href=&quot;io#io.IOBase.flush&quot;&gt;&lt;code&gt;flush()&lt;/code&gt;&lt;/a&gt; the file first. This is necessary to ensure that local modifications to the buffers are actually available to the mapping.</source>
          <target state="translated">書き込み可能なバッファ付きファイルのメモリマッピングを作成する場合は、最初にファイルを&lt;a href=&quot;io#io.IOBase.flush&quot;&gt; &lt;code&gt;flush()&lt;/code&gt; &lt;/a&gt;する必要があります。これは、バッファへのローカル変更が実際にマッピングで使用できるようにするために必要です。</target>
        </trans-unit>
        <trans-unit id="8c96548f19f99190ded12d511ae463febe2b5258" translate="yes" xml:space="preserve">
          <source>If you want to create a new ZIP archive, specify its name after the &lt;a href=&quot;#cmdoption-zipfile-c&quot;&gt;&lt;code&gt;-c&lt;/code&gt;&lt;/a&gt; option and then list the filename(s) that should be included:</source>
          <target state="translated">新しいZIPアーカイブを作成する場合は、&lt;a href=&quot;#cmdoption-zipfile-c&quot;&gt; &lt;code&gt;-c&lt;/code&gt; &lt;/a&gt;オプションの後にその名前を指定して、含める必要のあるファイル名をリストします。</target>
        </trans-unit>
        <trans-unit id="b106ae412fab326b87e70a6ef024d49bf607babb" translate="yes" xml:space="preserve">
          <source>If you want to create a new tar archive, specify its name after the &lt;a href=&quot;#cmdoption-tarfile-c&quot;&gt;&lt;code&gt;-c&lt;/code&gt;&lt;/a&gt; option and then list the filename(s) that should be included:</source>
          <target state="translated">新しいtarアーカイブを作成する場合は、&lt;a href=&quot;#cmdoption-tarfile-c&quot;&gt; &lt;code&gt;-c&lt;/code&gt; &lt;/a&gt;オプションの後にその名前を指定し、次に含める必要のあるファイル名をリストします。</target>
        </trans-unit>
        <trans-unit id="7c1a46617f45e12138983a57722199d3eb708a28" translate="yes" xml:space="preserve">
          <source>If you want to extract a ZIP archive into the specified directory, use the &lt;a href=&quot;#cmdoption-zipfile-e&quot;&gt;&lt;code&gt;-e&lt;/code&gt;&lt;/a&gt; option:</source>
          <target state="translated">指定したディレクトリにZIPアーカイブを抽出する場合は、&lt;a href=&quot;#cmdoption-zipfile-e&quot;&gt; &lt;code&gt;-e&lt;/code&gt; &lt;/a&gt;オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="700b384e128d1fbde8cf4400e885f3cf8732d78d" translate="yes" xml:space="preserve">
          <source>If you want to extract a tar archive into the current directory, use the &lt;a href=&quot;#cmdoption-tarfile-e&quot;&gt;&lt;code&gt;-e&lt;/code&gt;&lt;/a&gt; option:</source>
          <target state="translated">tarアーカイブを現在のディレクトリに抽出する場合は、&lt;a href=&quot;#cmdoption-tarfile-e&quot;&gt; &lt;code&gt;-e&lt;/code&gt; &lt;/a&gt;オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="58588189cff4519d00d0897d652e2f735d514b04" translate="yes" xml:space="preserve">
          <source>If you want to include non-ASCII characters in your email headers, say in the &lt;em&gt;Subject&lt;/em&gt; or &lt;em&gt;To&lt;/em&gt; fields, you should use the &lt;a href=&quot;#email.header.Header&quot;&gt;&lt;code&gt;Header&lt;/code&gt;&lt;/a&gt; class and assign the field in the &lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; object to an instance of &lt;a href=&quot;#email.header.Header&quot;&gt;&lt;code&gt;Header&lt;/code&gt;&lt;/a&gt; instead of using a string for the header value. Import the &lt;a href=&quot;#email.header.Header&quot;&gt;&lt;code&gt;Header&lt;/code&gt;&lt;/a&gt; class from the &lt;a href=&quot;#module-email.header&quot;&gt;&lt;code&gt;email.header&lt;/code&gt;&lt;/a&gt; module. For example:</source>
          <target state="translated">電子メールのヘッダーに、ASCII以外の文字を含める場合、たとえば、[ &lt;em&gt;件名]&lt;/em&gt;または[ &lt;em&gt;宛先]&lt;/em&gt;フィールドに含める場合は、ヘッダー値に文字列を使用するのではなく、&lt;a href=&quot;#email.header.Header&quot;&gt; &lt;code&gt;Header&lt;/code&gt; &lt;/a&gt;クラスを使用して、&lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt; &lt;code&gt;Message&lt;/code&gt; &lt;/a&gt;オブジェクトのフィールドを&lt;a href=&quot;#email.header.Header&quot;&gt; &lt;code&gt;Header&lt;/code&gt; &lt;/a&gt;インスタンスに割り当てます。 。&lt;a href=&quot;#module-email.header&quot;&gt; &lt;code&gt;email.header&lt;/code&gt; &lt;/a&gt;モジュールから&lt;a href=&quot;#email.header.Header&quot;&gt; &lt;code&gt;Header&lt;/code&gt; &lt;/a&gt;クラスをインポートします。例えば：</target>
        </trans-unit>
        <trans-unit id="24ec3c78c55c3f145a14ab40bbeb1ab84cc85d19" translate="yes" xml:space="preserve">
          <source>If you want to keep the frame around (for example to print a traceback later), you can also break reference cycles by using the &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#frame.clear&quot;&gt;&lt;code&gt;frame.clear()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">フレームを保持したい場合（たとえば、後でトレースバックを印刷する場合）、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#frame.clear&quot;&gt; &lt;code&gt;frame.clear()&lt;/code&gt; &lt;/a&gt;メソッドを使用して参照サイクルを解除することもできます。</target>
        </trans-unit>
        <trans-unit id="f6549b472b422a2e03ce43ff8ed3f5196f818e1c" translate="yes" xml:space="preserve">
          <source>If you want to know how to change the first sequence into the second, use &lt;code&gt;get_opcodes()&lt;/code&gt;:</source>
          <target state="translated">最初のシーケンスを2番目のシーケンスに変更する方法を知りたい場合は、 &lt;code&gt;get_opcodes()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="cd6b6c79b6bb6752c1926957d748425869a9d94e" translate="yes" xml:space="preserve">
          <source>If you want to locate a match anywhere in &lt;em&gt;string&lt;/em&gt;, use &lt;a href=&quot;#re.Pattern.search&quot;&gt;&lt;code&gt;search()&lt;/code&gt;&lt;/a&gt; instead (see also &lt;a href=&quot;#search-vs-match&quot;&gt;search() vs. match()&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;string&lt;/em&gt;内のどこかで一致を検索する場合は、代わりに&lt;a href=&quot;#re.Pattern.search&quot;&gt; &lt;code&gt;search()&lt;/code&gt; を&lt;/a&gt;使用します（&lt;a href=&quot;#search-vs-match&quot;&gt; search（）とmatch（）&lt;/a&gt;も参照）。</target>
        </trans-unit>
        <trans-unit id="90b7dc5b7c7d64eb5dcf8c64af54da317f615167" translate="yes" xml:space="preserve">
          <source>If you want to locate a match anywhere in &lt;em&gt;string&lt;/em&gt;, use &lt;a href=&quot;#re.search&quot;&gt;&lt;code&gt;search()&lt;/code&gt;&lt;/a&gt; instead (see also &lt;a href=&quot;#search-vs-match&quot;&gt;search() vs. match()&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;string&lt;/em&gt;内のどこかで一致を検索する場合は、代わりに&lt;a href=&quot;#re.search&quot;&gt; &lt;code&gt;search()&lt;/code&gt; を&lt;/a&gt;使用します（&lt;a href=&quot;#search-vs-match&quot;&gt; search（）とmatch（）&lt;/a&gt;も参照）。</target>
        </trans-unit>
        <trans-unit id="7691cb3a9d42f9132cc69c1d67bf2035399d4696" translate="yes" xml:space="preserve">
          <source>If you want to make the hex string easier to read, you can specify a single character separator &lt;em&gt;sep&lt;/em&gt; parameter to include in the output. By default between each byte. A second optional &lt;em&gt;bytes_per_sep&lt;/em&gt; parameter controls the spacing. Positive values calculate the separator position from the right, negative values from the left.</source>
          <target state="translated">16進文字列を読みやすくする場合は、出力に含める1文字のセパレータ&lt;em&gt;sep&lt;/em&gt;パラメータを指定できます。デフォルトでは、各バイト間。2番目のオプションの&lt;em&gt;bytes_per_sep&lt;/em&gt;パラメータは、間隔を制御します。正の値はセパレーターの位置を右から計算し、負の値は左から計算します。</target>
        </trans-unit>
        <trans-unit id="7f82f6a50d02c1f8accc0d99988bbd66002ab317" translate="yes" xml:space="preserve">
          <source>If you want to manipulate Windows paths on a Unix machine (or vice versa). You cannot instantiate a &lt;a href=&quot;#pathlib.WindowsPath&quot;&gt;&lt;code&gt;WindowsPath&lt;/code&gt;&lt;/a&gt; when running on Unix, but you can instantiate &lt;a href=&quot;#pathlib.PureWindowsPath&quot;&gt;&lt;code&gt;PureWindowsPath&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">UnixマシンでWindowsパスを操作する場合（またはその逆）。Unixで実行している場合、&lt;a href=&quot;#pathlib.WindowsPath&quot;&gt; &lt;code&gt;WindowsPath&lt;/code&gt; を&lt;/a&gt;インスタンス化することはできませんが、&lt;a href=&quot;#pathlib.PureWindowsPath&quot;&gt; &lt;code&gt;PureWindowsPath&lt;/code&gt; &lt;/a&gt;をインスタンス化することはできます。</target>
        </trans-unit>
        <trans-unit id="9b7de6afd3109312dd2620f94a9fb410828a34c7" translate="yes" xml:space="preserve">
          <source>If you want to parse Python code into its AST representation, see &lt;a href=&quot;ast#ast.parse&quot;&gt;&lt;code&gt;ast.parse()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">PythonコードをAST表現に解析する場合は、&lt;a href=&quot;ast#ast.parse&quot;&gt; &lt;code&gt;ast.parse()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8826f07288ab3dad612019804c049ce5ddd0e19a" translate="yes" xml:space="preserve">
          <source>If you want to perform multiple patches then you can simply stack up the decorators.</source>
          <target state="translated">複数のパッチを実行したい場合は、単純にデコレータを積み重ねることができます。</target>
        </trans-unit>
        <trans-unit id="4f79361e9cfffc79417f13f6a383a9717a273aa3" translate="yes" xml:space="preserve">
          <source>If you want to reflect the turtle its state, you have to use &lt;code&gt;resizemode =
auto&lt;/code&gt;.</source>
          <target state="translated">カメの状態を反映したい場合は、 &lt;code&gt;resizemode = auto&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="f28c7d51ec7d8d10c742281de629eb006ff45c11" translate="yes" xml:space="preserve">
          <source>If you want to send configurations to the listener which don&amp;rsquo;t disable existing loggers, you will need to use a JSON format for the configuration, which will use &lt;a href=&quot;#logging.config.dictConfig&quot;&gt;&lt;code&gt;dictConfig()&lt;/code&gt;&lt;/a&gt; for configuration. This method allows you to specify &lt;code&gt;disable_existing_loggers&lt;/code&gt; as &lt;code&gt;False&lt;/code&gt; in the configuration you send.</source>
          <target state="translated">既存のロガーを無効にしない構成をリスナーに送信する場合は、構成に&lt;a href=&quot;#logging.config.dictConfig&quot;&gt; &lt;code&gt;dictConfig()&lt;/code&gt; &lt;/a&gt;を使用する構成にJSON形式を使用する必要があります。このメソッドを使用すると、送信する構成で &lt;code&gt;disable_existing_loggers&lt;/code&gt; を &lt;code&gt;False&lt;/code&gt; として指定できます。</target>
        </trans-unit>
        <trans-unit id="3ebc31a3f94e9849595d45e456c192050750c4e3" translate="yes" xml:space="preserve">
          <source>If you want to specify a subject line which is record-dependent, override this method.</source>
          <target state="translated">レコード依存の件名を指定したい場合は、このメソッドをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="745b19cebcf113a8d5f26626ff17bb861b6e043f" translate="yes" xml:space="preserve">
          <source>If you want to use a different configuration which better reflects the features of this module or which better fits to your needs, e.g. for use in a classroom, you can prepare a configuration file &lt;code&gt;turtle.cfg&lt;/code&gt; which will be read at import time and modify the configuration according to its settings.</source>
          <target state="translated">このモジュールの機能をよりよく反映する、またはニーズにぴったり合う別の構成を使用する場合は、たとえば教室で使用するために、インポート時に読み取られる構成ファイル &lt;code&gt;turtle.cfg&lt;/code&gt; を準備し、その設定に応じた構成。</target>
        </trans-unit>
        <trans-unit id="6b8dc840c342df51fe5ce8af14007a99dd5c3a47" translate="yes" xml:space="preserve">
          <source>If you want to use a different prefix for your test, you can inform the patchers of the different prefix by setting &lt;code&gt;patch.TEST_PREFIX&lt;/code&gt;. For more details about how to change the value of see &lt;a href=&quot;#test-prefix&quot;&gt;TEST_PREFIX&lt;/a&gt;.</source>
          <target state="translated">テストに別の接頭辞を使用したい場合は、 &lt;code&gt;patch.TEST_PREFIX&lt;/code&gt; を設定して、異なる接頭辞をパッチャーに通知できます。値を変更する方法の詳細については、&lt;a href=&quot;#test-prefix&quot;&gt;TEST_PREFIX&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4fad4732a998a9e23ea176b65c3a718c625cdcc4" translate="yes" xml:space="preserve">
          <source>If you want to use no fillcolor (i.e. make the turtle transparent), you have to write &lt;code&gt;fillcolor = &quot;&quot;&lt;/code&gt; (but all nonempty strings must not have quotes in the cfg-file).</source>
          <target state="translated">fillcolorを使用しない（つまり、亀を透明にする）場合は、 &lt;code&gt;fillcolor = &quot;&quot;&lt;/code&gt; と記述する必要があります（ただし、空でないすべての文字列は、cfg-file内に引用符があってはなりません）。</target>
        </trans-unit>
        <trans-unit id="0f8f3a435f429e1cd523ef833f8de0aef1f31607" translate="yes" xml:space="preserve">
          <source>If you want to walk an arbitrary filesystem path upwards, it is recommended to first call &lt;a href=&quot;#pathlib.Path.resolve&quot;&gt;&lt;code&gt;Path.resolve()&lt;/code&gt;&lt;/a&gt; so as to resolve symlinks and eliminate &lt;code&gt;&amp;ldquo;..&amp;rdquo;&lt;/code&gt; components.</source>
          <target state="translated">任意のファイルシステムパスを上に移動する場合は、最初に&lt;a href=&quot;#pathlib.Path.resolve&quot;&gt; &lt;code&gt;Path.resolve()&lt;/code&gt; を&lt;/a&gt;呼び出してシンボリックリンクを解決し、 &lt;code&gt;&amp;ldquo;..&amp;rdquo;&lt;/code&gt; コンポーネントを削除することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="70ac8ffb536e6d85123fe960473989eb7a059ddc" translate="yes" xml:space="preserve">
          <source>If you were looking to see what functions were looping a lot, and taking a lot of time, you would do:</source>
          <target state="translated">どんな機能がたくさんループしていて、時間がかかっているのかを見ていたら、やってしまいますよね。</target>
        </trans-unit>
        <trans-unit id="acf8d273366df0fb10eec018a0ee0ccd5949445d" translate="yes" xml:space="preserve">
          <source>If you wondered what functions called the above functions, you could now (&lt;code&gt;p&lt;/code&gt; is still sorted according to the last criteria) do:</source>
          <target state="translated">どの関数が上記の関数を呼び出したのか疑問に思った場合は、次のことができます（ &lt;code&gt;p&lt;/code&gt; は最後の基準に従ってまだソートされています）。</target>
        </trans-unit>
        <trans-unit id="a0bf217f357783caa209594b9bcd75c3ce805fda" translate="yes" xml:space="preserve">
          <source>If you write a file-like object and implement your own caching, you can make it fork-safe by storing the pid whenever you append to the cache, and discarding the cache when the pid changes. For example:</source>
          <target state="translated">ファイルライクなオブジェクトを書いて独自のキャッシュを実装した場合、キャッシュに追記するたびにpidを格納し、pidが変わったらキャッシュを破棄することでフォークセーフにすることができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="fe0eb8d599c47b7f3926f4416144dc29d275eb9e" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not using a raw string to express the pattern, remember that Python also uses the backslash as an escape sequence in string literals; if the escape sequence isn&amp;rsquo;t recognized by Python&amp;rsquo;s parser, the backslash and subsequent character are included in the resulting string. However, if Python would recognize the resulting sequence, the backslash should be repeated twice. This is complicated and hard to understand, so it&amp;rsquo;s highly recommended that you use raw strings for all but the simplest expressions.</source>
          <target state="translated">生の文字列を使用してパターンを表現していない場合、Pythonでは文字列リテラルのエスケープシーケンスとしてバックスラッシュも使用することに注意してください。エスケープシーケンスがPythonのパーサーで認識されない場合は、結果の文字列にバックスラッシュとそれに続く文字が含まれます。ただし、Pythonが結果のシーケンスを認識する場合は、バックスラッシュを2回繰り返す必要があります。これは複雑で理解しにくいので、最も単純な式以外のすべてに生の文字列を使用することを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="63ba1bb5f63d28b0a2652e45a8f7caac7c895c2a" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re only interested in where the sequences match, &lt;code&gt;get_matching_blocks()&lt;/code&gt; is handy:</source>
          <target state="translated">シーケンスが一致する場所のみに関心がある場合は、 &lt;code&gt;get_matching_blocks()&lt;/code&gt; が便利です。</target>
        </trans-unit>
        <trans-unit id="f936f48bc81e3933728945057465fe8b1eaf71cf" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re starting with a buffered Python &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt;&lt;em&gt;f&lt;/em&gt;, first do &lt;code&gt;f.flush()&lt;/code&gt;, and then do &lt;code&gt;os.fsync(f.fileno())&lt;/code&gt;, to ensure that all internal buffers associated with &lt;em&gt;f&lt;/em&gt; are written to disk.</source>
          <target state="translated">バッファリングされたPython &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;ファイルオブジェクト&lt;/a&gt;&lt;em&gt;f&lt;/em&gt;から始める場合は、最初に &lt;code&gt;f.flush()&lt;/code&gt; を実行し、次に &lt;code&gt;os.fsync(f.fileno())&lt;/code&gt; を実行して、&lt;em&gt;fに&lt;/em&gt;関連付けられたすべての内部バッファがディスクに書き込まれるようにします。</target>
        </trans-unit>
        <trans-unit id="c32e5e3d701ca2fc3b2aabba2d5788af273dfeb3" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve never used this module before or just aren&amp;rsquo;t sure which class is right for your task, &lt;a href=&quot;#pathlib.Path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; is most likely what you need. It instantiates a &lt;a href=&quot;#concrete-paths&quot;&gt;concrete path&lt;/a&gt; for the platform the code is running on.</source>
          <target state="translated">これまでにこのモジュールを使用したことがない場合や、どのクラスがタスクに適しているのかわからない場合は、&lt;a href=&quot;#pathlib.Path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt;がおそらく必要です。コードが実行されているプラ​​ットフォームの&lt;a href=&quot;#concrete-paths&quot;&gt;具体的なパス&lt;/a&gt;をインスタンス化します。</target>
        </trans-unit>
        <trans-unit id="f33f0fe74a1d8aa8c68e244e2bc5362d95964bbf" translate="yes" xml:space="preserve">
          <source>If your application depends on a package that includes a C extension, that package cannot be run from a zip file (this is an OS limitation, as executable code must be present in the filesystem for the OS loader to load it). In this case, you can exclude that dependency from the zipfile, and either require your users to have it installed, or ship it alongside your zipfile and add code to your &lt;code&gt;__main__.py&lt;/code&gt; to include the directory containing the unzipped module in &lt;code&gt;sys.path&lt;/code&gt;. In this case, you will need to make sure to ship appropriate binaries for your target architecture(s) (and potentially pick the correct version to add to &lt;code&gt;sys.path&lt;/code&gt; at runtime, based on the user&amp;rsquo;s machine).</source>
          <target state="translated">アプリケーションがC拡張を含むパッケージに依存している場合、そのパッケージはzipファイルから実行できません（OSローダーがファイルをロードするには実行可能コードがファイルシステムに存在する必要があるため、これはOSの制限です）。この場合、その依存関係をzip &lt;code&gt;sys.path&lt;/code&gt; から除外し、ユーザーにインストールを要求するか、zip ファイルと一緒に配布して &lt;code&gt;__main__.py&lt;/code&gt; にコードを追加し、解凍したモジュールを含むディレクトリをsys.pathに含めることができます。この場合、ターゲットアーキテクチャに適切なバイナリを出荷する必要があります（ユーザーのマシンに基づいて、実行時に &lt;code&gt;sys.path&lt;/code&gt; に追加する正しいバージョンを選択する可能性があります）。</target>
        </trans-unit>
        <trans-unit id="2a11020c14c0b00c5484221191c5a40664dd44bf" translate="yes" xml:space="preserve">
          <source>If your application doesn&amp;rsquo;t care whether the parameter was encoded as in &lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt;, you can collapse the parameter value by calling &lt;a href=&quot;email.utils#email.utils.collapse_rfc2231_value&quot;&gt;&lt;code&gt;email.utils.collapse_rfc2231_value()&lt;/code&gt;&lt;/a&gt;, passing in the return value from &lt;a href=&quot;#email.message.Message.get_param&quot;&gt;&lt;code&gt;get_param()&lt;/code&gt;&lt;/a&gt;. This will return a suitably decoded Unicode string when the value is a tuple, or the original string unquoted if it isn&amp;rsquo;t. For example:</source>
          <target state="translated">アプリケーションは、パラメータがのようにエンコードされたかどうかを気にしない場合は&lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;、RFC 2231&lt;/strong&gt;&lt;/a&gt;、あなたは呼び出すことで、パラメータ値を折りたたむことができます&lt;a href=&quot;email.utils#email.utils.collapse_rfc2231_value&quot;&gt; &lt;code&gt;email.utils.collapse_rfc2231_value()&lt;/code&gt; &lt;/a&gt;からの戻り値を渡して、&lt;a href=&quot;#email.message.Message.get_param&quot;&gt; &lt;code&gt;get_param()&lt;/code&gt; &lt;/a&gt;。これは、値がタプルの場合は適切にデコードされたUnicode文字列を返し、そうでない場合は引用符で囲まれていない元の文字列を返します。例えば：</target>
        </trans-unit>
        <trans-unit id="7027931b44d28707bd4c664ebc8956c5af833c14" translate="yes" xml:space="preserve">
          <source>If your application needs specific settings, you should create a &lt;a href=&quot;#ssl.SSLContext&quot;&gt;&lt;code&gt;SSLContext&lt;/code&gt;&lt;/a&gt; and apply the settings yourself.</source>
          <target state="translated">アプリケーションで特定の設定が必要な場合は、&lt;a href=&quot;#ssl.SSLContext&quot;&gt; &lt;code&gt;SSLContext&lt;/code&gt; &lt;/a&gt;を作成して、自分で設定を適用する必要があります。</target>
        </trans-unit>
        <trans-unit id="5edf794d03c4b2ffd7486fd7e128bf5e002387d1" translate="yes" xml:space="preserve">
          <source>If your generator will only yield values, set the &lt;code&gt;SendType&lt;/code&gt; and &lt;code&gt;ReturnType&lt;/code&gt; to &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="translated">ジェネレーターが値のみを生成する場合は、 &lt;code&gt;SendType&lt;/code&gt; および &lt;code&gt;ReturnType&lt;/code&gt; を &lt;code&gt;None&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="3a6fc9f504fb9ac47a5e232ec8b3e5d967c1d094" translate="yes" xml:space="preserve">
          <source>If your generator will only yield values, set the &lt;code&gt;SendType&lt;/code&gt; to &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="translated">ジェネレーターが値のみを生成する場合は、 &lt;code&gt;SendType&lt;/code&gt; を &lt;code&gt;None&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="ae8a1702501d5b127615e973ca97f9e761c7eb59" translate="yes" xml:space="preserve">
          <source>If your operating system supports the &lt;code&gt;select()&lt;/code&gt; system call in its I/O library (and nearly all do), then you can use it to juggle multiple communication channels at once; doing other work while your I/O is taking place in the &amp;ldquo;background.&amp;rdquo; Although this strategy can seem strange and complex, especially at first, it is in many ways easier to understand and control than multi-threaded programming. The &lt;a href=&quot;#module-asyncore&quot;&gt;&lt;code&gt;asyncore&lt;/code&gt;&lt;/a&gt; module solves many of the difficult problems for you, making the task of building sophisticated high-performance network servers and clients a snap. For &amp;ldquo;conversational&amp;rdquo; applications and protocols the companion &lt;a href=&quot;asynchat#module-asynchat&quot;&gt;&lt;code&gt;asynchat&lt;/code&gt;&lt;/a&gt; module is invaluable.</source>
          <target state="translated">オペレーティングシステムがI / Oライブラリで &lt;code&gt;select()&lt;/code&gt; システムコールをサポートしている場合（ほとんどすべてがサポートしています）、それを使用して複数の通信チャネルを一度に操作できます。 I / Oが「バックグラウンド」で行われている間に他の作業を行う。この戦略は奇妙で複雑に見えるかもしれませんが、特に最初は、マルチスレッドプログラミングよりも多くの点で理解と制御が簡単です。&lt;a href=&quot;#module-asyncore&quot;&gt; &lt;code&gt;asyncore&lt;/code&gt; の&lt;/a&gt;モジュールは、洗練された高性能ネットワーク・サーバとクライアントにスナップを構築する作業を行う、あなたのための困難な問題の多くを解決します。 「会話型」のアプリケーションおよびプロトコルの場合、&lt;a href=&quot;asynchat#module-asynchat&quot;&gt; &lt;code&gt;asynchat&lt;/code&gt; &lt;/a&gt;モジュールは非常に貴重です。</target>
        </trans-unit>
        <trans-unit id="955a544f9e1d26fd1d26d80d1022f0327fd7582e" translate="yes" xml:space="preserve">
          <source>If your program needs to support many languages at the same time, you may want to create multiple translation instances and then switch between them explicitly, like so:</source>
          <target state="translated">プログラムが複数の言語を同時にサポートする必要がある場合は、複数の翻訳インスタンスを作成して、その間を明示的に切り替えたい場合があります。</target>
        </trans-unit>
        <trans-unit id="93490801dea0da95308cb5a5318fbdcbabcfcf7b" translate="yes" xml:space="preserve">
          <source>If your script does not have any syntax errors, try adding &lt;code&gt;import cgitb;
cgitb.enable()&lt;/code&gt; to the top of the script.</source>
          <target state="translated">スクリプトに構文エラーがない場合は、 &lt;code&gt;import cgitb; cgitb.enable()&lt;/code&gt; 追加してみてください。スクリプトの先頭にcgitb.enable（）を追加します。</target>
        </trans-unit>
        <trans-unit id="f31cb37df73b3125c3f57c9d809d3e1ed793e729" translate="yes" xml:space="preserve">
          <source>If your server supports the command, &lt;a href=&quot;#ftplib.FTP.mlsd&quot;&gt;&lt;code&gt;mlsd()&lt;/code&gt;&lt;/a&gt; offers a better API.</source>
          <target state="translated">サーバーがコマンドをサポートしている場合、&lt;a href=&quot;#ftplib.FTP.mlsd&quot;&gt; &lt;code&gt;mlsd()&lt;/code&gt; &lt;/a&gt;はより優れたAPIを提供します。</target>
        </trans-unit>
        <trans-unit id="cbbc5ab274a4717efc6cc381b10937fbe7d77265" translate="yes" xml:space="preserve">
          <source>If zero or more characters at the &lt;em&gt;beginning&lt;/em&gt; of &lt;em&gt;string&lt;/em&gt; match this regular expression, return a corresponding &lt;a href=&quot;#match-objects&quot;&gt;match object&lt;/a&gt;. Return &lt;code&gt;None&lt;/code&gt; if the string does not match the pattern; note that this is different from a zero-length match.</source>
          <target state="translated">&lt;em&gt;文字列&lt;/em&gt;の&lt;em&gt;先頭&lt;/em&gt;の0個以上の文字がこの正規表現に&lt;a href=&quot;#match-objects&quot;&gt;一致する場合&lt;/a&gt;、対応する一致オブジェクトを返します。文字列がパターンに一致しない場合は &lt;code&gt;None&lt;/code&gt; を返します。これは長さゼロの一致とは異なることに注意してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7b4350db35f3b9bbabeaa05f2baf19f9fc617cb2" translate="yes" xml:space="preserve">
          <source>If zero or more characters at the beginning of &lt;em&gt;string&lt;/em&gt; match the regular expression &lt;em&gt;pattern&lt;/em&gt;, return a corresponding &lt;a href=&quot;#match-objects&quot;&gt;match object&lt;/a&gt;. Return &lt;code&gt;None&lt;/code&gt; if the string does not match the pattern; note that this is different from a zero-length match.</source>
          <target state="translated">&lt;em&gt;文字列&lt;/em&gt;の先頭のゼロ個以上の文字が正規表現&lt;em&gt;パターン&lt;/em&gt;に&lt;a href=&quot;#match-objects&quot;&gt;一致する場合&lt;/a&gt;、対応する一致オブジェクトを返します。文字列がパターンに一致しない場合は &lt;code&gt;None&lt;/code&gt; を返します。これは長さゼロの一致とは異なることに注意してください。</target>
        </trans-unit>
        <trans-unit id="092f14f1f8cb7d25b3e6d70dcd0a46d04a6819c6" translate="yes" xml:space="preserve">
          <source>If, that is, we ignore the effects of Relativity</source>
          <target state="translated">つまり、相対性理論の効果を無視した場合</target>
        </trans-unit>
        <trans-unit id="2fa5b809a29b75e222e19a786786494e855b9b8b" translate="yes" xml:space="preserve">
          <source>If, when coding a module for general use, you need a locale independent version of an operation that is affected by the locale (such as certain formats used with &lt;a href=&quot;time#time.strftime&quot;&gt;&lt;code&gt;time.strftime()&lt;/code&gt;&lt;/a&gt;), you will have to find a way to do it without using the standard library routine. Even better is convincing yourself that using locale settings is okay. Only as a last resort should you document that your module is not compatible with non-&lt;code&gt;C&lt;/code&gt; locale settings.</source>
          <target state="translated">一般的な使用のためにモジュールをコーディングするときに、ロケールに影響される操作のロケールに依存しないバージョンが必要な場合（&lt;a href=&quot;time#time.strftime&quot;&gt; &lt;code&gt;time.strftime()&lt;/code&gt; で&lt;/a&gt;使用される特定の形式など）、それなしでそれを行う方法を見つける必要があります標準ライブラリルーチンを使用します。さらに良いのは、ロケール設定を使用しても大丈夫だと自分に納得させることです。最後の手段としてのみ、モジュールが &lt;code&gt;C&lt;/code&gt; 以外のロケール設定と互換性がないことを文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="9964433f6a0266bdf9fa6725a19e41fef8b37330" translate="yes" xml:space="preserve">
          <source>If/how &lt;em&gt;atTime&lt;/em&gt; is used</source>
          <target state="translated">&lt;em&gt;atTime&lt;/em&gt;が使用される場合と方法</target>
        </trans-unit>
        <trans-unit id="1c210c82683143a51cb6e3ad028c9f8883a010ad" translate="yes" xml:space="preserve">
          <source>Ignore all modules and packages in the named directory and subdirectories. The argument can be a list of directories separated by &lt;a href=&quot;os#os.pathsep&quot;&gt;&lt;code&gt;os.pathsep&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定されたディレクトリとサブディレクトリにあるすべてのモジュールとパッケージを無視します。引数は、&lt;a href=&quot;os#os.pathsep&quot;&gt; &lt;code&gt;os.pathsep&lt;/code&gt; で&lt;/a&gt;区切られたディレクトリーのリストにすることができます。</target>
        </trans-unit>
        <trans-unit id="1fce84b920d19c50aa58d91da2a36c60b8c2de65" translate="yes" xml:space="preserve">
          <source>Ignore cookies in Set-Cookie: headers that have names starting with &lt;code&gt;'$'&lt;/code&gt;.</source>
          <target state="translated">名前が &lt;code&gt;'$'&lt;/code&gt; で始まるSet-Cookie：ヘッダーのCookieを無視します。</target>
        </trans-unit>
        <trans-unit id="c2855bf1eb59ace3c404c75993cf42a4581a04c3" translate="yes" xml:space="preserve">
          <source>Ignore each of the given module names and its submodules (if it is a package). The argument can be a list of names separated by a comma.</source>
          <target state="translated">与えられたモジュール名とそのサブモジュール(パッケージの場合)のそれぞれを無視します。引数にはカンマで区切られた名前のリストを指定できます。</target>
        </trans-unit>
        <trans-unit id="930fbf8a76be290144b9247e218920a109183ddb" translate="yes" xml:space="preserve">
          <source>Ignore the malformed data and continue without further notice. Implemented in &lt;a href=&quot;#codecs.ignore_errors&quot;&gt;&lt;code&gt;ignore_errors()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">不正な形式のデータを無視して、予告なく続行します。&lt;a href=&quot;#codecs.ignore_errors&quot;&gt; &lt;code&gt;ignore_errors()&lt;/code&gt; に&lt;/a&gt;実装されています。</target>
        </trans-unit>
        <trans-unit id="78fee1435d74666b84850cd5e82c18229351da5d" translate="yes" xml:space="preserve">
          <source>Ignored</source>
          <target state="translated">Ignored</target>
        </trans-unit>
        <trans-unit id="1e65bb4eca2d3c71529c96890a4b735eb7dafeac" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
          <target state="translated">Ignored.</target>
        </trans-unit>
        <trans-unit id="b90e620c5d88940bfdd404823e410652bfa5a956" translate="yes" xml:space="preserve">
          <source>Ignoring the timeout feature, calling this method is roughly equivalent to writing:</source>
          <target state="translated">タイムアウト機能を無視して、このメソッドを呼び出すことは、ほぼ書き込みと同じです。</target>
        </trans-unit>
        <trans-unit id="e769494ea641bd01735c8978b12dae80bc631fc2" translate="yes" xml:space="preserve">
          <source>Illegal byte sequence</source>
          <target state="translated">不正なバイト列</target>
        </trans-unit>
        <trans-unit id="3176fdb344f7026fb9cd9da003d83547cd35fc12" translate="yes" xml:space="preserve">
          <source>Illegal seek</source>
          <target state="translated">違法シーク</target>
        </trans-unit>
        <trans-unit id="e221fe5a3e6f4ff124e28b73d70e7afa9ab3f313" translate="yes" xml:space="preserve">
          <source>Image Types</source>
          <target state="translated">画像の種類</target>
        </trans-unit>
        <trans-unit id="c177d6ae70be09c0df8491f4bb934a1ebcbac143" translate="yes" xml:space="preserve">
          <source>Image format</source>
          <target state="translated">画像形式</target>
        </trans-unit>
        <trans-unit id="42de00097c89c82d17336b2d87ec32e4f21480ff" translate="yes" xml:space="preserve">
          <source>Image shapes &lt;em&gt;do not&lt;/em&gt; rotate when turning the turtle, so they do not display the heading of the turtle!</source>
          <target state="translated">タートルを回転させ&lt;em&gt;ても&lt;/em&gt;画像の形状&lt;em&gt;は&lt;/em&gt;回転&lt;em&gt;しない&lt;/em&gt;ため、タートルの向きは表示されません。</target>
        </trans-unit>
        <trans-unit id="09e871c98fef3b901a775def173e4126aaf73b42" translate="yes" xml:space="preserve">
          <source>Images</source>
          <target state="translated">Images</target>
        </trans-unit>
        <trans-unit id="70b3cbc7767df833fa045e36e82910b275002110" translate="yes" xml:space="preserve">
          <source>Images of different formats can be created through the corresponding subclass of &lt;code&gt;tkinter.Image&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;tkinter.Image&lt;/code&gt; の対応するサブクラスを通じて、さまざまな形式の画像を作成できます。</target>
        </trans-unit>
        <trans-unit id="a13a369729af2332fed8dda8e39f614910984143" translate="yes" xml:space="preserve">
          <source>Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;code&gt;import turtle&lt;/code&gt;, give it the command &lt;code&gt;turtle.forward(15)&lt;/code&gt;, and it moves (on-screen!) 15 pixels in the direction it is facing, drawing a line as it moves. Give it the command &lt;code&gt;turtle.right(25)&lt;/code&gt;, and it rotates in-place 25 degrees clockwise.</source>
          <target state="translated">xy平面で（0、0）から始まるロボットカメを想像してください。 &lt;code&gt;import turtle&lt;/code&gt; 後、コマンド &lt;code&gt;turtle.forward(15)&lt;/code&gt; を与えると、向きが15ピクセル（画面上！）になり、移動するにつれて線が描画されます。コマンド &lt;code&gt;turtle.right(25)&lt;/code&gt; を与えると、インプレイスで時計回りに25度回転します。</target>
        </trans-unit>
        <trans-unit id="687db08c82f3ad0c17cb55a8e0f53abf69ca4195" translate="yes" xml:space="preserve">
          <source>Imagine we have a project that we want to test with the following structure:</source>
          <target state="translated">以下のような構造でテストしたいプロジェクトがあるとします。</target>
        </trans-unit>
        <trans-unit id="40c36dcfc5b7dc5aaaaa183a438e2f62f6e25008" translate="yes" xml:space="preserve">
          <source>Immediately stop playing or recording and return the device to a state where it can accept commands. The OSS documentation recommends closing and re-opening the device after calling &lt;a href=&quot;#ossaudiodev.oss_audio_device.reset&quot;&gt;&lt;code&gt;reset()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すぐに再生または録音を停止し、デバイスをコマンドを受け入れることができる状態に戻します。OSSのドキュメントでは、&lt;a href=&quot;#ossaudiodev.oss_audio_device.reset&quot;&gt; &lt;code&gt;reset()&lt;/code&gt; を&lt;/a&gt;呼び出した後にデバイスを閉じて再度開くことを推奨しています。</target>
        </trans-unit>
        <trans-unit id="80cb7526f8f17d0e625c37d38a71d1b8b176c45b" translate="yes" xml:space="preserve">
          <source>Immediately unwinds the callback stack, invoking callbacks in the reverse order of registration. For any context managers and exit callbacks registered, the arguments passed in will indicate that no exception occurred.</source>
          <target state="translated">コールバックスタックの巻き戻しを即座に行い、登録順を逆にしてコールバックを呼び出します。登録されているコンテキストマネージャや終了コールバックに対して、引数として渡された引数は例外が発生しなかったことを示します。</target>
        </trans-unit>
        <trans-unit id="42e8811b32cc14bd73ca1c7cf254e434ca1c4be2" translate="yes" xml:space="preserve">
          <source>Immutable Sequence Types</source>
          <target state="translated">不変シーケンスタイプ</target>
        </trans-unit>
        <trans-unit id="7d364b632538803974da1c9485bc7401ef2fd2eb" translate="yes" xml:space="preserve">
          <source>Implement &lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-12&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt; protocol.</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-12&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt;プロトコルを実装します。</target>
        </trans-unit>
        <trans-unit id="876c8f17da52cca0c2c72876d566383804f060a0" translate="yes" xml:space="preserve">
          <source>Implement &lt;a href=&quot;https://tools.ietf.org/html/rfc3490.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 3490&lt;/strong&gt;&lt;/a&gt;, see also &lt;a href=&quot;#module-encodings.idna&quot;&gt;&lt;code&gt;encodings.idna&lt;/code&gt;&lt;/a&gt;. Only &lt;code&gt;errors='strict'&lt;/code&gt; is supported.</source>
          <target state="translated">実装&lt;a href=&quot;https://tools.ietf.org/html/rfc3490.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 3490&lt;/strong&gt;&lt;/a&gt;、も参照&lt;a href=&quot;#module-encodings.idna&quot;&gt; &lt;code&gt;encodings.idna&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;errors='strict'&lt;/code&gt; のみがサポートされています。</target>
        </trans-unit>
        <trans-unit id="4dbe2ee30f05a84b86d098b6ad21ef61bde254e0" translate="yes" xml:space="preserve">
          <source>Implement &lt;a href=&quot;https://tools.ietf.org/html/rfc3492.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 3492&lt;/strong&gt;&lt;/a&gt;. Stateful codecs are not supported.</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc3492.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 3492を&lt;/strong&gt;&lt;/a&gt;実装し&lt;strong&gt;ます&lt;/strong&gt;。ステートフルコーデックはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="cb9ce8751f48a6114c443a4bb2aac9cb2915809a" translate="yes" xml:space="preserve">
          <source>Implement Netscape protocol.</source>
          <target state="translated">Netscapeのプロトコルを実装します。</target>
        </trans-unit>
        <trans-unit id="1ed133685773097940d3cf663208ebc50eb17709" translate="yes" xml:space="preserve">
          <source>Implement checking for unused arguments if desired. The arguments to this function is the set of all argument keys that were actually referred to in the format string (integers for positional arguments, and strings for named arguments), and a reference to the &lt;em&gt;args&lt;/em&gt; and &lt;em&gt;kwargs&lt;/em&gt; that was passed to vformat. The set of unused args can be calculated from these parameters. &lt;a href=&quot;#string.Formatter.check_unused_args&quot;&gt;&lt;code&gt;check_unused_args()&lt;/code&gt;&lt;/a&gt; is assumed to raise an exception if the check fails.</source>
          <target state="translated">必要に応じて、未使用の引数のチェックを実装します。この関数の引数は、フォーマット文字列（位置引数の場合は整数、名前付き引数の場合は文字列）で実際に参照されたすべての引数キーのセットと、&lt;em&gt;vformat&lt;/em&gt;に渡された&lt;em&gt;args&lt;/em&gt;および&lt;em&gt;kwargs&lt;/em&gt;への参照です。未使用の引数のセットは、これらのパラメーターから計算できます。&lt;a href=&quot;#string.Formatter.check_unused_args&quot;&gt; &lt;code&gt;check_unused_args()&lt;/code&gt; &lt;/a&gt;は、チェックが失敗した場合に例外を発生させると想定されています。</target>
        </trans-unit>
        <trans-unit id="fd8c27461faf491446b966e22536bdd5517a900e" translate="yes" xml:space="preserve">
          <source>Implement this method in a subclass such that it returns a serializable object for &lt;em&gt;o&lt;/em&gt;, or calls the base implementation (to raise a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">このメソッドをサブクラスに実装して、&lt;em&gt;oの&lt;/em&gt;シリアル化可能なオブジェクトを返すか、基本の実装を呼び出します（&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; を発生&lt;/a&gt;させるため）。</target>
        </trans-unit>
        <trans-unit id="6372052045f8af6340009762eb4a097bf006bc91" translate="yes" xml:space="preserve">
          <source>Implementation Limitations</source>
          <target state="translated">実装上の制限</target>
        </trans-unit>
        <trans-unit id="a928eb642e8d69164143d07e134772861cb6056c" translate="yes" xml:space="preserve">
          <source>Implementation note: Some of the mixin methods, such as &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__iter__&quot;&gt;&lt;code&gt;__iter__()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__reversed__&quot;&gt;&lt;code&gt;__reversed__()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;index()&lt;/code&gt;, make repeated calls to the underlying &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getitem__&quot;&gt;&lt;code&gt;__getitem__()&lt;/code&gt;&lt;/a&gt; method. Consequently, if &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getitem__&quot;&gt;&lt;code&gt;__getitem__()&lt;/code&gt;&lt;/a&gt; is implemented with constant access speed, the mixin methods will have linear performance; however, if the underlying method is linear (as it would be with a linked list), the mixins will have quadratic performance and will likely need to be overridden.</source>
          <target state="translated">実装上の注意：などのmixin方法のいくつか&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__iter__&quot;&gt; &lt;code&gt;__iter__()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__reversed__&quot;&gt; &lt;code&gt;__reversed__()&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;index()&lt;/code&gt; 、根本的に繰り返し呼び出し作る&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getitem__&quot;&gt; &lt;code&gt;__getitem__()&lt;/code&gt; &lt;/a&gt;方法。したがって、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getitem__&quot;&gt; &lt;code&gt;__getitem__()&lt;/code&gt; &lt;/a&gt;が一定のアクセス速度で実装されている場合、mixinメソッドのパフォーマンスは線形になります。ただし、基になるメソッドが線形である場合（リンクされたリストの場合と同様）、ミックスインのパフォーマンスは2次であり、オーバーライドする必要がある可能性があります。</target>
        </trans-unit>
        <trans-unit id="602e467a96a4864b3e865c151d6768f89e1f6c9a" translate="yes" xml:space="preserve">
          <source>Implementation of &lt;a href=&quot;#importlib.abc.Loader.exec_module&quot;&gt;&lt;code&gt;Loader.exec_module()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#importlib.abc.Loader.exec_module&quot;&gt; &lt;code&gt;Loader.exec_module()&lt;/code&gt; の&lt;/a&gt;実装。</target>
        </trans-unit>
        <trans-unit id="8b24035207ed54bd400485a1684e18bf3533d78a" translate="yes" xml:space="preserve">
          <source>Implementation of &lt;a href=&quot;#importlib.abc.Loader.load_module&quot;&gt;&lt;code&gt;Loader.load_module()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#importlib.abc.Loader.load_module&quot;&gt; &lt;code&gt;Loader.load_module()&lt;/code&gt; の&lt;/a&gt;実装。</target>
        </trans-unit>
        <trans-unit id="20977e3c93bce44f3af2c831893e3343efa9bf7c" translate="yes" xml:space="preserve">
          <source>Implementations of &lt;code&gt;process_message&lt;/code&gt; should use the &lt;code&gt;**kwargs&lt;/code&gt; signature to accept arbitrary keyword arguments, since future feature enhancements may add keys to the kwargs dictionary.</source>
          <target state="translated">&lt;code&gt;process_message&lt;/code&gt; の実装では、 &lt;code&gt;**kwargs&lt;/code&gt; シグネチャを使用して任意のキーワード引数を受け入れる必要があります。将来の機能拡張により、kwargs辞書にキーが追加される可能性があるためです。</target>
        </trans-unit>
        <trans-unit id="1d8b1b41137285f8c4de39c176a278d9f49ddf2e" translate="yes" xml:space="preserve">
          <source>Implementing the arithmetic operations</source>
          <target state="translated">演算の実装</target>
        </trans-unit>
        <trans-unit id="ca6c4d83cb31522562758f2caae6de20eb026979" translate="yes" xml:space="preserve">
          <source>Implementors should be careful to make equal numbers equal and hash them to the same values. This may be subtle if there are two different extensions of the real numbers. For example, &lt;a href=&quot;fractions#fractions.Fraction&quot;&gt;&lt;code&gt;fractions.Fraction&lt;/code&gt;&lt;/a&gt; implements &lt;a href=&quot;functions#hash&quot;&gt;&lt;code&gt;hash()&lt;/code&gt;&lt;/a&gt; as follows:</source>
          <target state="translated">実装者は、等しい数を等しくし、それらを同じ値にハッシュするように注意する必要があります。実数の2つの異なる拡張がある場合、これは微妙な場合があります。たとえば、&lt;a href=&quot;fractions#fractions.Fraction&quot;&gt; &lt;code&gt;fractions.Fraction&lt;/code&gt; &lt;/a&gt;は次のように&lt;a href=&quot;functions#hash&quot;&gt; &lt;code&gt;hash()&lt;/code&gt; &lt;/a&gt;を実装します。</target>
        </trans-unit>
        <trans-unit id="d903524c1ea6aa12c931b0a6c641b3778b3888a8" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;PUSH(get_awaitable(TOS.__anext__()))&lt;/code&gt;. See &lt;code&gt;GET_AWAITABLE&lt;/code&gt; for details about &lt;code&gt;get_awaitable&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;PUSH(get_awaitable(TOS.__anext__()))&lt;/code&gt; 実装します。参照 &lt;code&gt;GET_AWAITABLE&lt;/code&gt; の詳細については、 &lt;code&gt;get_awaitable&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3cb421f905057ea14812c7d7b55740f7dcb3aa14" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = +TOS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = +TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="9f8030dd288cf838d962bc81cf0b1e710e59dab6" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = -TOS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = -TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="23caf167f55ab86f7acf8ef10a08029547ccae56" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS.__aiter__()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = TOS.__aiter__()&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="6804ffbe6ca6db0446550f606e8c3b827c72019d" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 % TOS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = TOS1 % TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="1ccd836db2748a42cdb6568840d6b34ab7680997" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 &amp;amp; TOS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = TOS1 &amp;amp; TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="98b212dadbaf80fff0c651d73234d968ff6d57ff" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 &amp;gt;&amp;gt; TOS&lt;/code&gt;.</source>
          <target state="translated">道具 &lt;code&gt;TOS = TOS1 &amp;gt;&amp;gt; TOS&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a92a967387ba75f1c824f8c282c1b389323c1c12" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 &amp;lt;&amp;lt; TOS&lt;/code&gt;.</source>
          <target state="translated">道具 &lt;code&gt;TOS = TOS1 &amp;lt;&amp;lt; TOS&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fe06b1264a086dd70cc373eb95043d5b61c0bdec" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 * TOS&lt;/code&gt;.</source>
          <target state="translated">道具 &lt;code&gt;TOS = TOS1 * TOS&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e7727e8610b32769f888b796569df51894a6e1a4" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 ** TOS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = TOS1 ** TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="a68a686d5d97ef25da29ba50188cfe812c2b160c" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 + TOS&lt;/code&gt;.</source>
          <target state="translated">道具 &lt;code&gt;TOS = TOS1 + TOS&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0b7f98171174dff07ba4794fcfc188a2b547babd" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 - TOS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = TOS1 - TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="e03d1b043f5b83ce06f326b9be67568ba2593f09" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 / TOS&lt;/code&gt;.</source>
          <target state="translated">道具 &lt;code&gt;TOS = TOS1 / TOS&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="54632e771c9265cca4e71a87f0788919f6c1a468" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 // TOS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = TOS1 // TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="b4ff4094536277707470df447fbf4ac881111c43" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 @ TOS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = TOS1 @ TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="70062ec736c872ff9695663f40f72ab315ef9ddf" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 ^ TOS&lt;/code&gt;.</source>
          <target state="translated">道具 &lt;code&gt;TOS = TOS1 ^ TOS&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ed9a0b5ebb7afed19c96ac5e2a783c31cb5f2376" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 | TOS&lt;/code&gt;.</source>
          <target state="translated">道具 &lt;code&gt;TOS = TOS1 | TOS&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a435cd9e0a8ca34e1604fda39f5b0f09b410d773" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1[TOS]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = TOS1[TOS]&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="a55222ca989584dee87037902ae61c754d1433ea" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = get_awaitable(TOS)&lt;/code&gt;, where &lt;code&gt;get_awaitable(o)&lt;/code&gt; returns &lt;code&gt;o&lt;/code&gt; if &lt;code&gt;o&lt;/code&gt; is a coroutine object or a generator object with the CO_ITERABLE_COROUTINE flag, or resolves &lt;code&gt;o.__await__&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = get_awaitable(TOS)&lt;/code&gt; 実装します &lt;code&gt;o&lt;/code&gt; がコルーチンオブジェクトまたはCO_ITERABLE_COROUTINEフラグの付いたジェネレーターオブジェクトである場合、 &lt;code&gt;get_awaitable(o)&lt;/code&gt; は &lt;code&gt;o&lt;/code&gt; を返すか、 &lt;code&gt;o.__await__&lt;/code&gt; 解決します。</target>
        </trans-unit>
        <trans-unit id="5e24956a48bbfdcc09d0cf754f3dad5634e36ef6" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = iter(TOS)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = iter(TOS)&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="7127e3da317dbd834e1c9fa4d150709b0595c38c" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = not TOS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = not TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="6aefd62fa0df0b5ae152afef20eb6a2be7bc7fe1" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = ~TOS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = ~TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="4f729d424456b44dfd8d226e0748fec98a45f659" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS.name = TOS1&lt;/code&gt;, where &lt;em&gt;namei&lt;/em&gt; is the index of name in &lt;code&gt;co_names&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS.name = TOS1&lt;/code&gt; 実装し &lt;code&gt;co_names&lt;/code&gt; 。ここで、&lt;em&gt;namei&lt;/em&gt;はco_names内の名前のインデックスです。</target>
        </trans-unit>
        <trans-unit id="f7674022864a24bfc63ce8ce10c8db53e65eff9f" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS1[TOS] = TOS2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS1[TOS] = TOS2&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="47c788dc833478a625bb744ec09e58aea9fc10d4" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;del TOS.name&lt;/code&gt;, using &lt;em&gt;namei&lt;/em&gt; as index into &lt;code&gt;co_names&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;del TOS.name&lt;/code&gt; を実装し、&lt;em&gt;namei&lt;/em&gt;を &lt;code&gt;co_names&lt;/code&gt; へのインデックスとして使用します。</target>
        </trans-unit>
        <trans-unit id="ab97a7e60a0b065d453ed23af196b35ed6d71cfd" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;del TOS1[TOS]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;del TOS1[TOS]&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="c6cb3ef10de23ff06b085fdd4bd8df8cca8edb2e" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;del name&lt;/code&gt;, where &lt;em&gt;namei&lt;/em&gt; is the index into &lt;code&gt;co_names&lt;/code&gt; attribute of the code object.</source>
          <target state="translated">道具 &lt;code&gt;del name&lt;/code&gt; 、&lt;em&gt;nameiは&lt;/em&gt;へのインデックスである &lt;code&gt;co_names&lt;/code&gt; のコードオブジェクトの属性。</target>
        </trans-unit>
        <trans-unit id="0e9bf63b19593d04613e29b26ddb368205c21880" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;name = TOS&lt;/code&gt;. &lt;em&gt;namei&lt;/em&gt; is the index of &lt;em&gt;name&lt;/em&gt; in the attribute &lt;code&gt;co_names&lt;/code&gt; of the code object. The compiler tries to use &lt;a href=&quot;#opcode-STORE_FAST&quot;&gt;&lt;code&gt;STORE_FAST&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#opcode-STORE_GLOBAL&quot;&gt;&lt;code&gt;STORE_GLOBAL&lt;/code&gt;&lt;/a&gt; if possible.</source>
          <target state="translated">&lt;code&gt;name = TOS&lt;/code&gt; 実装します。&lt;em&gt;namei&lt;/em&gt;は、コードオブジェクトの属性 &lt;code&gt;co_names&lt;/code&gt; 内の&lt;em&gt;名前&lt;/em&gt;のインデックスです。コンパイラーは、&lt;a href=&quot;#opcode-STORE_FAST&quot;&gt; &lt;code&gt;STORE_FAST&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#opcode-STORE_GLOBAL&quot;&gt; &lt;code&gt;STORE_GLOBAL&lt;/code&gt; &lt;/a&gt;を使用しようとします。</target>
        </trans-unit>
        <trans-unit id="3bb12d25ddb30f12352643b960eb58634dcff262" translate="yes" xml:space="preserve">
          <source>Implements a mutex lock for asyncio tasks. Not thread-safe.</source>
          <target state="translated">非同期タスク用のミューテックスロックを実装しました。スレッドセーフではありません。</target>
        </trans-unit>
        <trans-unit id="f127d7511ab821d90fc0d9e0415de725710e1c0e" translate="yes" xml:space="preserve">
          <source>Implements assignment with a starred target: Unpacks an iterable in TOS into individual values, where the total number of values can be smaller than the number of items in the iterable: one of the new values will be a list of all leftover items.</source>
          <target state="translated">星付きのターゲットを持つ代入を実装しました。TOSのイテレータブルを個々の値にアンパックします。値の総数はイテレータブル内の項目数よりも小さくすることができます。</target>
        </trans-unit>
        <trans-unit id="ad8c71c60917e28ec70cc6e72ac5aba785cd2533" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 % TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースの &lt;code&gt;TOS = TOS1 % TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="34a2e00a28f9e41709e5a409debe9f70047ccfa5" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 &amp;amp; TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースの &lt;code&gt;TOS = TOS1 &amp;amp; TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="58c41048e48b098a8662937aa13eba0fb458de61" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 &amp;gt;&amp;gt; TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースに &lt;code&gt;TOS = TOS1 &amp;gt;&amp;gt; TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="fa04e754a31d6027a7f4daa4b4fdd702965038b1" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 &amp;lt;&amp;lt; TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースの &lt;code&gt;TOS = TOS1 &amp;lt;&amp;lt; TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="1ee8bdd10bfb59d1de1b7233652a10a6aebf648c" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 * TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースの &lt;code&gt;TOS = TOS1 * TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="239c416c5552e24e40b0c3f5a8da8834a4549b9c" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 ** TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースの &lt;code&gt;TOS = TOS1 ** TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="b92e466e855a22dcee87a299d9f506bd0bd45e91" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 + TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースの &lt;code&gt;TOS = TOS1 + TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="e4a87fbd97f23bdda16b8cf5fe0fe1fd3bb5bef6" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 - TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースの &lt;code&gt;TOS = TOS1 - TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="6b26e08c65cff3d8460f7b64f132529ac3dc22be" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 / TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースの &lt;code&gt;TOS = TOS1 / TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="44d86e1dd26553b877ecf8c640b2c2b6832071f1" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 // TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースに &lt;code&gt;TOS = TOS1 // TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="b416ab2beeb3c3d6516c059eeb07d58936d0e6df" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 @ TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースの &lt;code&gt;TOS = TOS1 @ TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="e9962e5508639fbb25594a1f43d3b5f76b2afc27" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 ^ TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースの &lt;code&gt;TOS = TOS1 ^ TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="3896caff55805b902dd285f3c899f9096710e046" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 | TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースの &lt;code&gt;TOS = TOS1 | TOS&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="85bad2fb59570e2a5eef60329848ed4622403300" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;'backslashreplace'&lt;/code&gt; error handling (for &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-text-encoding&quot;&gt;text encodings&lt;/a&gt; only): malformed data is replaced by a backslashed escape sequence.</source>
          <target state="translated">&lt;code&gt;'backslashreplace'&lt;/code&gt; エラー処理を実装します（&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-text-encoding&quot;&gt;テキストエンコードの場合&lt;/a&gt;のみ）：不正な形式のデータは、バックスラッシュ付きのエスケープシーケンスに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="f6c10a6bbb7422a691823579f3081bab9b0e71d9" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;'ignore'&lt;/code&gt; error handling: malformed data is ignored and encoding or decoding is continued without further notice.</source>
          <target state="translated">&lt;code&gt;'ignore'&lt;/code&gt; エラー処理を実装します。不正な形式のデータは無視され、エンコードまたはデコードは通知なしで続行されます。</target>
        </trans-unit>
        <trans-unit id="c7d23f24683ac08882aaa07d91874ed6ef4c6dd2" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;'namereplace'&lt;/code&gt; error handling (for encoding with &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-text-encoding&quot;&gt;text encodings&lt;/a&gt; only): the unencodable character is replaced by a &lt;code&gt;\N{...}&lt;/code&gt; escape sequence.</source>
          <target state="translated">&lt;code&gt;'namereplace'&lt;/code&gt; エラー処理を実装し&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-text-encoding&quot;&gt;ます&lt;/a&gt;（テキストエンコーディングでのエンコーディングのみ）：エンコードできない文字は &lt;code&gt;\N{...}&lt;/code&gt; エスケープシーケンスに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="663edbb12a782a964e38e6f015a8ae61e59c5cb6" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;'replace'&lt;/code&gt; error handling (for &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-text-encoding&quot;&gt;text encodings&lt;/a&gt; only): substitutes &lt;code&gt;'?'&lt;/code&gt; for encoding errors (to be encoded by the codec), and &lt;code&gt;'\ufffd'&lt;/code&gt; (the Unicode replacement character) for decoding errors.</source>
          <target state="translated">&lt;code&gt;'replace'&lt;/code&gt; エラー処理を実装します（&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-text-encoding&quot;&gt;テキストエンコーディング&lt;/a&gt;のみ）： &lt;code&gt;'?'&lt;/code&gt; を置き換えます エンコードエラー（コーデックによってエンコードされる）、および &lt;code&gt;'\ufffd'&lt;/code&gt; （Unicode置換文字）はデコードエラー。</target>
        </trans-unit>
        <trans-unit id="a478a6a191e85196bdcece7d24cdbeb8b90bb3e4" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;'strict'&lt;/code&gt; error handling: each encoding or decoding error raises a &lt;a href=&quot;exceptions#UnicodeError&quot;&gt;&lt;code&gt;UnicodeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;'strict'&lt;/code&gt; エラー処理を実装します。エンコードまたはデコードのエラーが発生するたびに&lt;a href=&quot;exceptions#UnicodeError&quot;&gt; &lt;code&gt;UnicodeError&lt;/code&gt; が&lt;/a&gt;発生します。</target>
        </trans-unit>
        <trans-unit id="45e09434edbbb004dd6529a8c664f47c18ec9c8a" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;'xmlcharrefreplace'&lt;/code&gt; error handling (for encoding with &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-text-encoding&quot;&gt;text encodings&lt;/a&gt; only): the unencodable character is replaced by an appropriate XML character reference.</source>
          <target state="translated">&lt;code&gt;'xmlcharrefreplace'&lt;/code&gt; エラー処理を実装し&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-text-encoding&quot;&gt;ます&lt;/a&gt;（テキストエンコーディングを使用したエンコーディングのみ）。エンコードできない文字は、適切なXML文字参照に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="4589678f737340f266ad3c03c880cd6693ba765b" translate="yes" xml:space="preserve">
          <source>Implements the expression statement for the interactive mode. TOS is removed from the stack and printed. In non-interactive mode, an expression statement is terminated with &lt;a href=&quot;#opcode-POP_TOP&quot;&gt;&lt;code&gt;POP_TOP&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">インタラクティブモードの式ステートメントを実装します。TOSはスタックから削除され、印刷されます。非インタラクティブモードでは、式ステートメントは&lt;a href=&quot;#opcode-POP_TOP&quot;&gt; &lt;code&gt;POP_TOP&lt;/code&gt; &lt;/a&gt;で終了します。</target>
        </trans-unit>
        <trans-unit id="431d2662e4cf482dbbd51ee873a2bf4d4dbe506a" translate="yes" xml:space="preserve">
          <source>Implements the standard rules for accepting and returning cookies.</source>
          <target state="translated">クッキーの受け入れと返却の標準ルールを実装します。</target>
        </trans-unit>
        <trans-unit id="357be719dc69e352146cd9351979e2f88b18aa53" translate="yes" xml:space="preserve">
          <source>Implicit namespace packages</source>
          <target state="translated">暗黙の名前空間パッケージ</target>
        </trans-unit>
        <trans-unit id="3d1027d5bfea0f5b907c45a2719ba20af2951bac" translate="yes" xml:space="preserve">
          <source>Implicitly via the declared type</source>
          <target state="translated">宣言された型を介して暗黙のうちに</target>
        </trans-unit>
        <trans-unit id="87b9fc3f346510b76b17999f7a146e2b1534c297" translate="yes" xml:space="preserve">
          <source>Implied by a read event on a listening socket</source>
          <target state="translated">リスニングソケットの読み込みイベントによって暗示される</target>
        </trans-unit>
        <trans-unit id="4698e1d5e35f008f6196e32547364bf825c475dc" translate="yes" xml:space="preserve">
          <source>Implied by a read event with no data available</source>
          <target state="translated">データが利用できないリードイベントによって暗示される</target>
        </trans-unit>
        <trans-unit id="21611d57f0838ec535115caab52079c6fc745f43" translate="yes" xml:space="preserve">
          <source>Implied by the first read or write event</source>
          <target state="translated">最初の読み書きイベントによって暗示される</target>
        </trans-unit>
        <trans-unit id="da96b428d292acbbe72df9e50d4e769cb28b7b27" translate="yes" xml:space="preserve">
          <source>Import &lt;em&gt;module&lt;/em&gt; if necessary and return the object called &lt;em&gt;name&lt;/em&gt; from it, where the &lt;em&gt;module&lt;/em&gt; and &lt;em&gt;name&lt;/em&gt; arguments are &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; objects. Note, unlike its name suggests, &lt;a href=&quot;#pickle.Unpickler.find_class&quot;&gt;&lt;code&gt;find_class()&lt;/code&gt;&lt;/a&gt; is also used for finding functions.</source>
          <target state="translated">必要に応じて&lt;em&gt;モジュールを&lt;/em&gt;インポートし、そこから&lt;em&gt;nameという&lt;/em&gt;オブジェクトを返します。ここで、&lt;em&gt;モジュール&lt;/em&gt;と&lt;em&gt;名前の&lt;/em&gt;引数は&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;オブジェクトです。名前が示すように、&lt;a href=&quot;#pickle.Unpickler.find_class&quot;&gt; &lt;code&gt;find_class()&lt;/code&gt; &lt;/a&gt;は関数の検索にも使用されます。</target>
        </trans-unit>
        <trans-unit id="b52818d6d21a3617010654286ad1530ac0e14b13" translate="yes" xml:space="preserve">
          <source>Import a module. The &lt;em&gt;name&lt;/em&gt; argument specifies what module to import in absolute or relative terms (e.g. either &lt;code&gt;pkg.mod&lt;/code&gt; or &lt;code&gt;..mod&lt;/code&gt;). If the name is specified in relative terms, then the &lt;em&gt;package&lt;/em&gt; argument must be set to the name of the package which is to act as the anchor for resolving the package name (e.g. &lt;code&gt;import_module('..mod', 'pkg.subpkg')&lt;/code&gt; will import &lt;code&gt;pkg.mod&lt;/code&gt;).</source>
          <target state="translated">モジュールをインポートします。&lt;em&gt;名前の&lt;/em&gt;引数を指定絶対的または相対的に輸入にどのようなモジュール（例えばいずれか &lt;code&gt;pkg.mod&lt;/code&gt; または &lt;code&gt;..mod&lt;/code&gt; ）。名前が相対的な用語で指定されている場合、&lt;em&gt;package&lt;/em&gt;引数は、パッケージ名を解決するためのアンカーとして機能するパッケージの名前に設定する必要があります（例： &lt;code&gt;import_module('..mod', 'pkg.subpkg')&lt;/code&gt; &lt;code&gt;pkg.mod&lt;/code&gt; をインポートします）。</target>
        </trans-unit>
        <trans-unit id="509eb07f39761a76413d728e8002d91cab5669f9" translate="yes" xml:space="preserve">
          <source>Import as few modules as possible and do it as soon as possible. This minimizes external dependencies of tests and also minimizes possible anomalous behavior from side-effects of importing a module.</source>
          <target state="translated">できるだけ少ないモジュールをインポートして、できるだけ早く実行してください。これにより、テストの外部依存性を最小限に抑え、モジュールのインポートによる副作用による異常動作の可能性も最小限に抑えられます。</target>
        </trans-unit>
        <trans-unit id="ebf453241874ae9140f1c4fba4572af23be16d96" translate="yes" xml:space="preserve">
          <source>Import itself is implemented in Python code, making it possible to expose most of the import machinery through importlib. The following helps illustrate the various APIs that importlib exposes by providing an approximate implementation of &lt;a href=&quot;#importlib.import_module&quot;&gt;&lt;code&gt;importlib.import_module()&lt;/code&gt;&lt;/a&gt; (Python 3.4 and newer for the importlib usage, Python 3.6 and newer for other parts of the code).</source>
          <target state="translated">インポート自体はPythonコードで実装されているため、importlibを通じてほとんどのインポート機構を公開できます。以下は、&lt;a href=&quot;#importlib.import_module&quot;&gt; &lt;code&gt;importlib.import_module()&lt;/code&gt; の&lt;/a&gt;おおよその実装を提供することにより、importlibが公開するさまざまなAPIを示しています（ importlibの使用についてはPython 3.4以降、コードの他の部分についてはPython 3.6以降）。</target>
        </trans-unit>
        <trans-unit id="eb7d80557274b41c25be1de7f2b2a9c69daa9de1" translate="yes" xml:space="preserve">
          <source>Import on Case-Insensitive Platforms</source>
          <target state="translated">大文字小文字を区別しないプラットフォームでのインポート</target>
        </trans-unit>
        <trans-unit id="51a0d1e201d38ceab71bb750a252b512b10de5c2" translate="yes" xml:space="preserve">
          <source>Import resolution and custom importers</source>
          <target state="translated">輸入解決とカスタムインポーター</target>
        </trans-unit>
        <trans-unit id="b46dda0f3af0f364b45aca902f93a2030e1d6cf0" translate="yes" xml:space="preserve">
          <source>Import resolution, by default, uses the builtin &lt;a href=&quot;functions#__import__&quot;&gt;&lt;code&gt;__import__()&lt;/code&gt;&lt;/a&gt; function to do its importing. You may want to replace this with your own importing mechanism: if so, you can replace the &lt;code&gt;importer&lt;/code&gt; attribute of the &lt;code&gt;DictConfigurator&lt;/code&gt; or its superclass, the &lt;code&gt;BaseConfigurator&lt;/code&gt; class. However, you need to be careful because of the way functions are accessed from classes via descriptors. If you are using a Python callable to do your imports, and you want to define it at class level rather than instance level, you need to wrap it with &lt;a href=&quot;functions#staticmethod&quot;&gt;&lt;code&gt;staticmethod()&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">インポートの解決では、デフォルトで、組み込みの&lt;a href=&quot;functions#__import__&quot;&gt; &lt;code&gt;__import__()&lt;/code&gt; &lt;/a&gt;関数を使用してインポートを実行します。これを独自のインポートメカニズムに置き換えることができます。その場合は、 &lt;code&gt;DictConfigurator&lt;/code&gt; またはそのスーパークラスの &lt;code&gt;BaseConfigurator&lt;/code&gt; クラスの &lt;code&gt;importer&lt;/code&gt; 属性を置き換えることができます。ただし、関数は記述子を介してクラスからアクセスされるため、注意する必要があります。インポートを実行するために呼び出し可能なPythonを使用していて、インスタンスレベルではなくクラスレベルでそれを定義する場合は、&lt;a href=&quot;functions#staticmethod&quot;&gt; &lt;code&gt;staticmethod()&lt;/code&gt; で&lt;/a&gt;ラップする必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="ed9b8c2261e65d838380f42dc0d920d3b56a2dfe" translate="yes" xml:space="preserve">
          <source>Import this class from the &lt;a href=&quot;#module-email.charset&quot;&gt;&lt;code&gt;email.charset&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">このクラスを&lt;a href=&quot;#module-email.charset&quot;&gt; &lt;code&gt;email.charset&lt;/code&gt; &lt;/a&gt;モジュールからインポートします。</target>
        </trans-unit>
        <trans-unit id="361838ee748707501d1086cda1d546a0bca541ea" translate="yes" xml:space="preserve">
          <source>ImportError</source>
          <target state="translated">ImportError</target>
        </trans-unit>
        <trans-unit id="d88d4c76f774a45881449d93cfdd576af021e9ee" translate="yes" xml:space="preserve">
          <source>ImportWarning</source>
          <target state="translated">ImportWarning</target>
        </trans-unit>
        <trans-unit id="4b6d6a30150a506f9b79caf45da5aecb76b0018e" translate="yes" xml:space="preserve">
          <source>Important</source>
          <target state="translated">Important</target>
        </trans-unit>
        <trans-unit id="90ab5ed3bb3e27748d586ad9b9b11e2ab9efaaf8" translate="yes" xml:space="preserve">
          <source>Importing</source>
          <target state="translated">Importing</target>
        </trans-unit>
        <trans-unit id="fe0f554fef6d8bbe2bada744a7a99611cdfdc416" translate="yes" xml:space="preserve">
          <source>Importing Modules</source>
          <target state="translated">モジュールのインポート</target>
        </trans-unit>
        <trans-unit id="7d7d20fec55d874b61e9a23d4848e2fe11f9ac1d" translate="yes" xml:space="preserve">
          <source>Importing a source file directly</source>
          <target state="translated">ソースファイルを直接インポートする</target>
        </trans-unit>
        <trans-unit id="c638d5fe75ce243c593fb88053ccdfc251f4221c" translate="yes" xml:space="preserve">
          <source>Importing programmatically</source>
          <target state="translated">プログラムによるインポート</target>
        </trans-unit>
        <trans-unit id="da4b6fd661f8f0ff59c6e77bf0660d2518b7404d" translate="yes" xml:space="preserve">
          <source>Importing the main class:</source>
          <target state="translated">メインクラスをインポートします。</target>
        </trans-unit>
        <trans-unit id="1ab6816ef80ddd057eefbe256b51f340873b1f96" translate="yes" xml:space="preserve">
          <source>Importing this module will append site-specific paths to the module search path and add a few builtins, unless &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id3&quot;&gt;&lt;code&gt;-S&lt;/code&gt;&lt;/a&gt; was used. In that case, this module can be safely imported with no automatic modifications to the module search path or additions to the builtins. To explicitly trigger the usual site-specific additions, call the &lt;a href=&quot;#site.main&quot;&gt;&lt;code&gt;site.main()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">このモジュールをインポートすると、&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id3&quot;&gt; &lt;code&gt;-S&lt;/code&gt; &lt;/a&gt;が使用されていない限り、サイト固有のパスがモジュール検索パスに追加され、いくつかの組み込みが追加されます。その場合、このモジュールは安全にインポートでき、モジュールの検索パスを自動的に変更したり、ビルトインに追加したりする必要はありません。通常のサイト固有の追加を明示的にトリガーするには、&lt;a href=&quot;#site.main&quot;&gt; &lt;code&gt;site.main()&lt;/code&gt; &lt;/a&gt;関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="f16b4231e3d6ba6a1713c3f5cbbd7c9a26c500c5" translate="yes" xml:space="preserve">
          <source>Imports the module &lt;code&gt;co_names[namei]&lt;/code&gt;. TOS and TOS1 are popped and provide the &lt;em&gt;fromlist&lt;/em&gt; and &lt;em&gt;level&lt;/em&gt; arguments of &lt;a href=&quot;functions#__import__&quot;&gt;&lt;code&gt;__import__()&lt;/code&gt;&lt;/a&gt;. The module object is pushed onto the stack. The current namespace is not affected: for a proper import statement, a subsequent &lt;a href=&quot;#opcode-STORE_FAST&quot;&gt;&lt;code&gt;STORE_FAST&lt;/code&gt;&lt;/a&gt; instruction modifies the namespace.</source>
          <target state="translated">モジュール &lt;code&gt;co_names[namei]&lt;/code&gt; インポートします。TOSおよびTOS1がポップされ、&lt;a href=&quot;functions#__import__&quot;&gt; &lt;code&gt;__import__()&lt;/code&gt; &lt;/a&gt;の&lt;em&gt;fromlist&lt;/em&gt;および&lt;em&gt;level&lt;/em&gt;引数を提供します。モジュールオブジェクトがスタックにプッシュされます。現在のネームスペースは影響を受けません。適切なインポートステートメントの場合、後続の&lt;a href=&quot;#opcode-STORE_FAST&quot;&gt; &lt;code&gt;STORE_FAST&lt;/code&gt; &lt;/a&gt;命令がネームスペースを変更します。</target>
        </trans-unit>
        <trans-unit id="3a067f8e863950831516af1d650bd9d3d58d9c6c" translate="yes" xml:space="preserve">
          <source>Imports: Multi-Line and Absolute/Relative</source>
          <target state="translated">輸入品。マルチラインと絶対/相対</target>
        </trans-unit>
        <trans-unit id="e34afa4c6c43fdf304519c4cf65d27d88a721571" translate="yes" xml:space="preserve">
          <source>Improved Compatibility with Shells</source>
          <target state="translated">シェルとの互換性の向上</target>
        </trans-unit>
        <trans-unit id="089354fe34004fc9de595d32a05e79153d2c456c" translate="yes" xml:space="preserve">
          <source>In 3.8, the two primary ways DLLs are loaded now explicitly override the process-wide behavior to ensure consistency. See the &lt;a href=&quot;https://docs.python.org/3.8/whatsnew/3.8.html#bpo-36085-whatsnew&quot;&gt;porting notes&lt;/a&gt; for information on updating libraries.</source>
          <target state="translated">3.8では、DLLが読み込まれる2つの主要な方法は、一貫性を確保するためにプロセス全体の動作を明示的にオーバーライドするようになりました。ライブラリの更新については、&lt;a href=&quot;https://docs.python.org/3.8/whatsnew/3.8.html#bpo-36085-whatsnew&quot;&gt;移植に関する注意事項&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="09b2f076615a334a17aaf9a55dfdf31ef870f1d5" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;#io.BytesIO&quot;&gt;&lt;code&gt;BytesIO&lt;/code&gt;&lt;/a&gt;, this is the same as &lt;a href=&quot;#io.BufferedIOBase.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#io.BytesIO&quot;&gt; &lt;code&gt;BytesIO&lt;/code&gt; &lt;/a&gt;、これは同じである&lt;a href=&quot;#io.BufferedIOBase.read&quot;&gt; &lt;code&gt;read()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b38fe556a6e29923e6bee3656f92a012825b5239" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;#io.BytesIO&quot;&gt;&lt;code&gt;BytesIO&lt;/code&gt;&lt;/a&gt;, this is the same as &lt;a href=&quot;#io.BufferedIOBase.readinto&quot;&gt;&lt;code&gt;readinto()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#io.BytesIO&quot;&gt; &lt;code&gt;BytesIO&lt;/code&gt; &lt;/a&gt;、これは同じである&lt;a href=&quot;#io.BufferedIOBase.readinto&quot;&gt; &lt;code&gt;readinto()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cb4f5fa376dc3e2057a73ea4e8efbb45b9541ac5" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;#module-multiprocessing&quot;&gt;&lt;code&gt;multiprocessing&lt;/code&gt;&lt;/a&gt;, processes are spawned by creating a &lt;a href=&quot;#multiprocessing.Process&quot;&gt;&lt;code&gt;Process&lt;/code&gt;&lt;/a&gt; object and then calling its &lt;a href=&quot;#multiprocessing.Process.start&quot;&gt;&lt;code&gt;start()&lt;/code&gt;&lt;/a&gt; method. &lt;a href=&quot;#multiprocessing.Process&quot;&gt;&lt;code&gt;Process&lt;/code&gt;&lt;/a&gt; follows the API of &lt;a href=&quot;threading#threading.Thread&quot;&gt;&lt;code&gt;threading.Thread&lt;/code&gt;&lt;/a&gt;. A trivial example of a multiprocess program is</source>
          <target state="translated">&lt;a href=&quot;#module-multiprocessing&quot;&gt; &lt;code&gt;multiprocessing&lt;/code&gt; &lt;/a&gt;、プロセスが作成によって生成された&lt;a href=&quot;#multiprocessing.Process&quot;&gt; &lt;code&gt;Process&lt;/code&gt; &lt;/a&gt;オブジェクトおよびその呼び出し&lt;a href=&quot;#multiprocessing.Process.start&quot;&gt; &lt;code&gt;start()&lt;/code&gt; &lt;/a&gt;メソッドを。&lt;a href=&quot;#multiprocessing.Process&quot;&gt; &lt;code&gt;Process&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;threading#threading.Thread&quot;&gt; &lt;code&gt;threading.Thread&lt;/code&gt; &lt;/a&gt;のAPIに従います。マルチプロセスプログラムの簡単な例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a41975f414337b4161e766ea1a36bb88654c31c4" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://tools.ietf.org/html/rfc5322.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 5322&lt;/strong&gt;&lt;/a&gt;, an unstructured header is a run of arbitrary text in the ASCII character set. &lt;a href=&quot;https://tools.ietf.org/html/rfc2047.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 2047&lt;/strong&gt;&lt;/a&gt;, however, has an &lt;a href=&quot;https://tools.ietf.org/html/rfc5322.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 5322&lt;/strong&gt;&lt;/a&gt; compatible mechanism for encoding non-ASCII text as ASCII characters within a header value. When a &lt;em&gt;value&lt;/em&gt; containing encoded words is passed to the constructor, the &lt;code&gt;UnstructuredHeader&lt;/code&gt; parser converts such encoded words into unicode, following the &lt;a href=&quot;https://tools.ietf.org/html/rfc2047.html&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;RFC 2047&lt;/strong&gt;&lt;/a&gt; rules for unstructured text. The parser uses heuristics to attempt to decode certain non-compliant encoded words. Defects are registered in such cases, as well as defects for issues such as invalid characters within the encoded words or the non-encoded text.</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc5322.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 5322&lt;/strong&gt;&lt;/a&gt;、構造化されていないヘッダは、ASCII文字セット内の任意のテキストのランです。ただし、&lt;a href=&quot;https://tools.ietf.org/html/rfc2047.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 2047&lt;/strong&gt;&lt;/a&gt;には、非ASCIIテキストをヘッダー値内のASCII文字としてエンコードするための&lt;a href=&quot;https://tools.ietf.org/html/rfc5322.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 5322&lt;/strong&gt;&lt;/a&gt;互換メカニズムがあります。場合&lt;em&gt;値&lt;/em&gt;符号化された単語を含むが、コンストラクタに渡され、 &lt;code&gt;UnstructuredHeader&lt;/code&gt; のパーサーは、以下の、ユニコードにそのような符号化された単語を変換&lt;a href=&quot;https://tools.ietf.org/html/rfc2047.html&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;RFC 2047&lt;/strong&gt;&lt;/a&gt;非構造化テキストのためのルール。パーサーはヒューリスティックを使用して、特定の非準拠のエンコードされた単語をデコードしようとします。このような場合は欠陥が登録され、エンコードされた単語内の無効な文字やエンコードされていないテキストなどの問題も登録されます。</target>
        </trans-unit>
        <trans-unit id="6551877af47b9396e87eaa7a777f7c956f3407a3" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;[0, 1]&lt;/code&gt;. Used to disambiguate wall times during a repeated interval. (A repeated interval occurs when clocks are rolled back at the end of daylight saving time or when the UTC offset for the current zone is decreased for political reasons.) The value 0 (1) represents the earlier (later) of the two moments with the same wall time representation.</source>
          <target state="translated">&lt;code&gt;[0, 1]&lt;/code&gt; 。繰り返される間隔の間に壁時間を明確にするために使用されます。（夏時間の終わりにクロックがロールバックされるか、政治的な理由で現在のゾーンのUTCオフセットが減少すると、間隔が繰り返されます。）値0（1）は、同じ実時間表現。</target>
        </trans-unit>
        <trans-unit id="93133f5ae9ab6ab0577f712c1e104727b3ae2cfc" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;range(1000000)&lt;/code&gt;.</source>
          <target state="translated">中 &lt;code&gt;range(1000000)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0618520a9a19fea1f2fc3b1e38952ba554e40a73" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;range(24)&lt;/code&gt;.</source>
          <target state="translated">中 &lt;code&gt;range(24)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6e20d8913c951c136cbfa4ba9fbeb279dcb3126a" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;range(60)&lt;/code&gt;.</source>
          <target state="translated">中 &lt;code&gt;range(60)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="80cddb7b7e3874d06e76f8eb562205fbd3b77d3e" translate="yes" xml:space="preserve">
          <source>In &lt;em&gt;blocking mode&lt;/em&gt;, operations block until complete or the system returns an error (such as connection timed out).</source>
          <target state="translated">で&lt;em&gt;ブロッキングモード&lt;/em&gt;、操作が完了するまでブロックまたはシステムがエラー（接続がタイムアウトなど）を返します。</target>
        </trans-unit>
        <trans-unit id="6d6a9efba04a47d4781b6de1610f6fe37834e4f6" translate="yes" xml:space="preserve">
          <source>In &lt;em&gt;non-blocking mode&lt;/em&gt;, operations fail (with an error that is unfortunately system-dependent) if they cannot be completed immediately: functions from the &lt;a href=&quot;select#module-select&quot;&gt;&lt;code&gt;select&lt;/code&gt;&lt;/a&gt; can be used to know when and whether a socket is available for reading or writing.</source>
          <target state="translated">では&lt;em&gt;非ブロックモード&lt;/em&gt;から機能：彼らはすぐに完了できない場合、操作は（残念ながら、システムに依存するエラーで）失敗&lt;a href=&quot;select#module-select&quot;&gt; &lt;code&gt;select&lt;/code&gt; &lt;/a&gt;ときにソケットが読み取りまたは書き込みのために利用可能であるかどうかを知るために使用することができます。</target>
        </trans-unit>
        <trans-unit id="1de600e7748b1b2c637dacf9c402ecc59c2e3930" translate="yes" xml:space="preserve">
          <source>In &lt;em&gt;timeout mode&lt;/em&gt;, operations fail if they cannot be completed within the timeout specified for the socket (they raise a &lt;a href=&quot;#socket.timeout&quot;&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;/a&gt; exception) or if the system returns an error.</source>
          <target state="translated">で&lt;em&gt;タイムアウトモード&lt;/em&gt;それらはソケット（それらが上げるために指定されたタイムアウト時間内に完了できない場合、操作は失敗&lt;a href=&quot;#socket.timeout&quot;&gt; &lt;code&gt;timeout&lt;/code&gt; &lt;/a&gt;例外）またはシステムがエラーを返す場合。</target>
        </trans-unit>
        <trans-unit id="93e4a4e56d6d1e50756bb9c6e4bc1bc4ccb5eed5" translate="yes" xml:space="preserve">
          <source>In BLAKE2 the salt is processed as a one-time input to the hash function during initialization, rather than as an input to each compression function.</source>
          <target state="translated">BLAKE2では、ソルトは各圧縮関数への入力としてではなく、初期化時にハッシュ関数への1回限りの入力として処理されます。</target>
        </trans-unit>
        <trans-unit id="9c7d0b0868fac88a221721ed400ce1bb944f7db5" translate="yes" xml:space="preserve">
          <source>In Babyl mailboxes, the headers of a message are not stored contiguously with the body of the message. To generate a file-like representation, the headers and body are copied together into an &lt;a href=&quot;io#io.BytesIO&quot;&gt;&lt;code&gt;io.BytesIO&lt;/code&gt;&lt;/a&gt; instance, which has an API identical to that of a file. As a result, the file-like object is truly independent of the underlying mailbox but does not save memory compared to a string representation.</source>
          <target state="translated">Babylメールボックスでは、メッセージのヘッダーはメッセージの本文と隣接して保存されません。ファイルのような表現を生成するには、ヘッダーと本文を一緒に&lt;a href=&quot;io#io.BytesIO&quot;&gt; &lt;code&gt;io.BytesIO&lt;/code&gt; &lt;/a&gt;インスタンスにコピーします。このインスタンスには、ファイルと同じAPIがあります。その結果、ファイルのようなオブジェクトは、基になるメールボックスから完全に独立していますが、文字列表現と比較してメモリを節約しません。</target>
        </trans-unit>
        <trans-unit id="a441fd784df981e42da3513e4f1b407c066fa595" translate="yes" xml:space="preserve">
          <source>In Boolean contexts, a &lt;a href=&quot;#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; object is always considered to be true.</source>
          <target state="translated">ブール値のコンテキストでは、&lt;a href=&quot;#datetime.time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt;オブジェクトは常にtrueと見なされます。</target>
        </trans-unit>
        <trans-unit id="3c9b44f6dcf172af2afd8e8696bebf4c5016d825" translate="yes" xml:space="preserve">
          <source>In Boolean contexts, a &lt;a href=&quot;#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt; object is considered to be true if and only if it isn&amp;rsquo;t equal to &lt;code&gt;timedelta(0)&lt;/code&gt;.</source>
          <target state="translated">ブール値のコンテキストでは、&lt;a href=&quot;#datetime.timedelta&quot;&gt; &lt;code&gt;timedelta&lt;/code&gt; &lt;/a&gt;オブジェクトは、それが &lt;code&gt;timedelta(0)&lt;/code&gt; と等しくない場合にのみtrueと見なされます。</target>
        </trans-unit>
        <trans-unit id="6f761eb1aa256d436b20321c9c6e424dc4749847" translate="yes" xml:space="preserve">
          <source>In Boolean contexts, all &lt;a href=&quot;#datetime.date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; objects are considered to be true.</source>
          <target state="translated">ブール値のコンテキストでは、すべての&lt;a href=&quot;#datetime.date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt;オブジェクトがtrueと見なされます。</target>
        </trans-unit>
        <trans-unit id="4133c1559bb69d3748ad119bc549a3b63e788a0f" translate="yes" xml:space="preserve">
          <source>In CPython, generator-based coroutines (generators decorated with &lt;a href=&quot;types#types.coroutine&quot;&gt;&lt;code&gt;types.coroutine()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;asyncio-task#asyncio.coroutine&quot;&gt;&lt;code&gt;asyncio.coroutine()&lt;/code&gt;&lt;/a&gt;) are &lt;em&gt;awaitables&lt;/em&gt;, even though they do not have an &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__await__&quot;&gt;&lt;code&gt;__await__()&lt;/code&gt;&lt;/a&gt; method. Using &lt;code&gt;isinstance(gencoro, Awaitable)&lt;/code&gt; for them will return &lt;code&gt;False&lt;/code&gt;. Use &lt;a href=&quot;inspect#inspect.isawaitable&quot;&gt;&lt;code&gt;inspect.isawaitable()&lt;/code&gt;&lt;/a&gt; to detect them.</source>
          <target state="translated">CPythonでは、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__await__&quot;&gt; &lt;code&gt;__await__()&lt;/code&gt; &lt;/a&gt;メソッドがなくても、ジェネレーターベースのコルーチン（&lt;a href=&quot;types#types.coroutine&quot;&gt; &lt;code&gt;types.coroutine()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;asyncio-task#asyncio.coroutine&quot;&gt; &lt;code&gt;asyncio.coroutine()&lt;/code&gt; で&lt;/a&gt;装飾されたジェネレーター）は&lt;em&gt;awaitables&lt;/em&gt;です。使用 &lt;code&gt;isinstance(gencoro, Awaitable)&lt;/code&gt; 彼らのためにして返します &lt;code&gt;False&lt;/code&gt; 。それらを検出するには、&lt;a href=&quot;inspect#inspect.isawaitable&quot;&gt; &lt;code&gt;inspect.isawaitable()&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="3cae09edf26f6e37b7e750f76e28a3e8c3c44cf6" translate="yes" xml:space="preserve">
          <source>In CPython, generator-based coroutines (generators decorated with &lt;a href=&quot;types#types.coroutine&quot;&gt;&lt;code&gt;types.coroutine()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;asyncio-task#asyncio.coroutine&quot;&gt;&lt;code&gt;asyncio.coroutine()&lt;/code&gt;&lt;/a&gt;) are &lt;em&gt;awaitables&lt;/em&gt;, even though they do not have an &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__await__&quot;&gt;&lt;code&gt;__await__()&lt;/code&gt;&lt;/a&gt; method. Using &lt;code&gt;isinstance(gencoro, Coroutine)&lt;/code&gt; for them will return &lt;code&gt;False&lt;/code&gt;. Use &lt;a href=&quot;inspect#inspect.isawaitable&quot;&gt;&lt;code&gt;inspect.isawaitable()&lt;/code&gt;&lt;/a&gt; to detect them.</source>
          <target state="translated">CPythonでは、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__await__&quot;&gt; &lt;code&gt;__await__()&lt;/code&gt; &lt;/a&gt;メソッドがなくても、ジェネレーターベースのコルーチン（&lt;a href=&quot;types#types.coroutine&quot;&gt; &lt;code&gt;types.coroutine()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;asyncio-task#asyncio.coroutine&quot;&gt; &lt;code&gt;asyncio.coroutine()&lt;/code&gt; で&lt;/a&gt;装飾されたジェネレーター）は&lt;em&gt;awaitables&lt;/em&gt;です。使用 &lt;code&gt;isinstance(gencoro, Coroutine)&lt;/code&gt; 彼らのためにして返します &lt;code&gt;False&lt;/code&gt; 。それらを検出するには、&lt;a href=&quot;inspect#inspect.isawaitable&quot;&gt; &lt;code&gt;inspect.isawaitable()&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="631366628298d4582a6ee037a9362b871c3234a2" translate="yes" xml:space="preserve">
          <source>In Python 2 code the &lt;code&gt;_order_&lt;/code&gt; attribute is necessary as definition order is lost before it can be recorded.</source>
          <target state="translated">Python 2コードでは、記録する前に定義の順序が失われるため、 &lt;code&gt;_order_&lt;/code&gt; 属性が必要です。</target>
        </trans-unit>
        <trans-unit id="3bc7f7458422d2effbdbed743271c2b54fbb7402" translate="yes" xml:space="preserve">
          <source>In Python, all exceptions must be instances of a class that derives from &lt;a href=&quot;#BaseException&quot;&gt;&lt;code&gt;BaseException&lt;/code&gt;&lt;/a&gt;. In a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#try&quot;&gt;&lt;code&gt;try&lt;/code&gt;&lt;/a&gt; statement with an &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#except&quot;&gt;&lt;code&gt;except&lt;/code&gt;&lt;/a&gt; clause that mentions a particular class, that clause also handles any exception classes derived from that class (but not exception classes from which &lt;em&gt;it&lt;/em&gt; is derived). Two exception classes that are not related via subclassing are never equivalent, even if they have the same name.</source>
          <target state="translated">Pythonでは、すべての例外は&lt;a href=&quot;#BaseException&quot;&gt; &lt;code&gt;BaseException&lt;/code&gt; &lt;/a&gt;から派生するクラスのインスタンスでなければなりません。特定のクラスについて言及する&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#except&quot;&gt; &lt;code&gt;except&lt;/code&gt; &lt;/a&gt;句を含む&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#try&quot;&gt; &lt;code&gt;try&lt;/code&gt; &lt;/a&gt;ステートメントでは、その句はそのクラスから派生した例外クラスも処理します（ただし、&lt;em&gt;それ&lt;/em&gt;が派生した例外クラスは処理しません）。サブクラス化を介して関連付けられていない2つの例外クラスは、たとえ同じ名前であっても、決して同等になることはありません。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c0e22094af023753a3f8645474baf7875adb216c" translate="yes" xml:space="preserve">
          <source>In Python, file names, command line arguments, and environment variables are represented using the string type. On some systems, decoding these strings to and from bytes is necessary before passing them to the operating system. Python uses the file system encoding to perform this conversion (see &lt;a href=&quot;sys#sys.getfilesystemencoding&quot;&gt;&lt;code&gt;sys.getfilesystemencoding()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">Pythonでは、ファイル名、コマンドライン引数、および環境変数は文字列型を使用して表されます。一部のシステムでは、これらの文字列をバイトに、またはバイトからデコードしてから、オペレーティングシステムに渡す必要があります。Pythonはファイルシステムエンコーディングを使用してこの変換を実行します（&lt;a href=&quot;sys#sys.getfilesystemencoding&quot;&gt; &lt;code&gt;sys.getfilesystemencoding()&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="4a265e5614bc913aa2b5d3df9ffa283db482f3d1" translate="yes" xml:space="preserve">
          <source>In Python, since there is an interpreter active during execution, the presence of instrumented code is not required in order to do deterministic profiling. Python automatically provides a &lt;em&gt;hook&lt;/em&gt; (optional callback) for each event. In addition, the interpreted nature of Python tends to add so much overhead to execution, that deterministic profiling tends to only add small processing overhead in typical applications. The result is that deterministic profiling is not that expensive, yet provides extensive run time statistics about the execution of a Python program.</source>
          <target state="translated">Pythonでは、実行中にアクティブなインタープリターが存在するため、確定的プロファイリングを行うためにインストルメント済みコードの存在は必要ありません。 Pythonは、各イベントに&lt;em&gt;フック&lt;/em&gt;（オプションのコールバック）を自動的に提供します。さらに、Pythonのインタープリター型の性質は、実行に非常に多くのオーバーヘッドを追加する傾向があり、決定論的プロファイリングは、一般的なアプリケーションでわずかな処理オーバーヘッドのみを追加する傾向があります。その結果、確定的プロファイリングはそれほど高価ではありませんが、Pythonプログラムの実行に関する広範なランタイム統計を提供します。</target>
        </trans-unit>
        <trans-unit id="07ba9e60148d18758b640f6ed814832833d34be7" translate="yes" xml:space="preserve">
          <source>In Tk, there is a utility command, &lt;code&gt;wm&lt;/code&gt;, for interacting with the window manager. Options to the &lt;code&gt;wm&lt;/code&gt; command allow you to control things like titles, placement, icon bitmaps, and the like. In &lt;a href=&quot;#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt;, these commands have been implemented as methods on the &lt;code&gt;Wm&lt;/code&gt; class. Toplevel widgets are subclassed from the &lt;code&gt;Wm&lt;/code&gt; class, and so can call the &lt;code&gt;Wm&lt;/code&gt; methods directly.</source>
          <target state="translated">Tkには、ウィンドウマネージャーと対話するためのユーティリティコマンド &lt;code&gt;wm&lt;/code&gt; があります。 &lt;code&gt;wm&lt;/code&gt; コマンドのオプションを使用すると、タイトル、配置、アイコンビットマップなどを制御できます。では&lt;a href=&quot;#module-tkinter&quot;&gt; &lt;code&gt;tkinter&lt;/code&gt; &lt;/a&gt;、これらのコマンドは、上のメソッドとして実装されている &lt;code&gt;Wm&lt;/code&gt; クラス。トップレベルのウィジェットは &lt;code&gt;Wm&lt;/code&gt; クラスからサブクラス化されているため、 &lt;code&gt;Wm&lt;/code&gt; メソッドを直接呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="e4bf65333e7dc9c2da7ca99bbab91025e00bf167" translate="yes" xml:space="preserve">
          <source>In Tk, to perform an action on a widget, use the widget name as a command, and follow it with an action name, possibly with arguments (options). In Tkinter, you call methods on the class instance to invoke actions on the widget. The actions (methods) that a given widget can perform are listed in &lt;code&gt;tkinter/__init__.py&lt;/code&gt;.</source>
          <target state="translated">Tkでは、ウィジェットでアクションを実行するには、ウィジェット名をコマンドとして使用し、その後にアクション名、おそらく引数（オプション）を付けます。Tkinterでは、クラスインスタンスのメソッドを呼び出して、ウィジェットのアクションを呼び出します。特定のウィジェットが実行できるアクション（メソッド）は、 &lt;code&gt;tkinter/__init__.py&lt;/code&gt; にリストされています。</target>
        </trans-unit>
        <trans-unit id="62b35e4b6aee318c8476142aafce45b3919ab5f7" translate="yes" xml:space="preserve">
          <source>In a mailcap file, the &amp;ldquo;test&amp;rdquo; field can optionally be specified to test some external condition (such as the machine architecture, or the window system in use) to determine whether or not the mailcap line applies. &lt;a href=&quot;#mailcap.findmatch&quot;&gt;&lt;code&gt;findmatch()&lt;/code&gt;&lt;/a&gt; will automatically check such conditions and skip the entry if the check fails.</source>
          <target state="translated">mailcapファイルでは、「test」フィールドをオプションで指定して、いくつかの外部条件（マシンアーキテクチャ、使用中のウィンドウシステムなど）をテストし、mailcap行が適用されるかどうかを判断できます。&lt;a href=&quot;#mailcap.findmatch&quot;&gt; &lt;code&gt;findmatch()&lt;/code&gt; &lt;/a&gt;はそのような条件を自動的にチェックし、チェックが失敗した場合はエントリをスキップします。</target>
        </trans-unit>
        <trans-unit id="dff27fd73d9cbfd83fc3861e07e29a5ce9fa9b2c" translate="yes" xml:space="preserve">
          <source>In a model generated from bytes, any header values that (in contravention of the RFCs) contain non-ASCII bytes will, when retrieved through this interface, be represented as &lt;a href=&quot;email.header#email.header.Header&quot;&gt;&lt;code&gt;Header&lt;/code&gt;&lt;/a&gt; objects with a charset of &lt;code&gt;unknown-8bit&lt;/code&gt;.</source>
          <target state="translated">バイトから生成されたモデルでは、（RFCに違反して）非ASCIIバイトを含むヘッダー値は、このインターフェイスを介して取得されると、 &lt;code&gt;unknown-8bit&lt;/code&gt; 文字セットを持つ&lt;a href=&quot;email.header#email.header.Header&quot;&gt; &lt;code&gt;Header&lt;/code&gt; &lt;/a&gt;オブジェクトとして表されます。</target>
        </trans-unit>
        <trans-unit id="bcdf824d25e196bd0265599e5fc259b9d7a7343d" translate="yes" xml:space="preserve">
          <source>In a multithreaded process, use caution to avoid leaking handles that are marked inheritable when combining this feature with concurrent calls to other process creation functions that inherit all handles such as &lt;a href=&quot;os#os.system&quot;&gt;&lt;code&gt;os.system()&lt;/code&gt;&lt;/a&gt;. This also applies to standard handle redirection, which temporarily creates inheritable handles.</source>
          <target state="translated">マルチスレッドプロセスでは、この機能を&lt;a href=&quot;os#os.system&quot;&gt; &lt;code&gt;os.system()&lt;/code&gt; &lt;/a&gt;などのすべてのハンドルを継承する他のプロセス作成関数への同時呼び出しと組み合わせるときに、継承可能とマークされたハンドルがリークしないように注意してください。これは、継承可能なハンドルを一時的に作成する標準のハンドルリダイレクトにも適用されます。</target>
        </trans-unit>
        <trans-unit id="29450dfd4c15b79ba3d022659c17515b216a2723" translate="yes" xml:space="preserve">
          <source>In a script, &lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt;&lt;code&gt;parse_args()&lt;/code&gt;&lt;/a&gt; will typically be called with no arguments, and the &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; will automatically determine the command-line arguments from &lt;a href=&quot;sys#sys.argv&quot;&gt;&lt;code&gt;sys.argv&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">スクリプトでは、通常、&lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt; &lt;code&gt;parse_args()&lt;/code&gt; &lt;/a&gt;は引数なしで呼び出され、&lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;sys#sys.argv&quot;&gt; &lt;code&gt;sys.argv&lt;/code&gt; &lt;/a&gt;からコマンドライン引数を自動的に決定します。</target>
        </trans-unit>
        <trans-unit id="b3bcc045679addb686c190d0e988b9e965c3a92d" translate="yes" xml:space="preserve">
          <source>In a script, typical usage is something like this:</source>
          <target state="translated">スクリプトでは、典型的な使用法は次のようなものです。</target>
        </trans-unit>
        <trans-unit id="e2b64a4d09137b4b9dd59b9330a2c7d91bb6320b" translate="yes" xml:space="preserve">
          <source>In a word, heaps are useful memory structures to know. I use them in a few applications, and I think it is good to keep a &amp;lsquo;heap&amp;rsquo; module around. :-)</source>
          <target state="translated">つまり、ヒープは知っておくと便利なメモリ構造です。私はいくつかのアプリケーションでそれらを使用しており、「ヒープ」モジュールを維持することは良いことだと思います。:-)</target>
        </trans-unit>
        <trans-unit id="9f2f0f5240c4f2006c555b058d4decb08fc35f55" translate="yes" xml:space="preserve">
          <source>In accordance with the standard, the &lt;a href=&quot;#module-decimal&quot;&gt;&lt;code&gt;decimal&lt;/code&gt;&lt;/a&gt; module provides two ready to use standard contexts, &lt;a href=&quot;#decimal.BasicContext&quot;&gt;&lt;code&gt;BasicContext&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#decimal.ExtendedContext&quot;&gt;&lt;code&gt;ExtendedContext&lt;/code&gt;&lt;/a&gt;. The former is especially useful for debugging because many of the traps are enabled:</source>
          <target state="translated">標準に従って、&lt;a href=&quot;#module-decimal&quot;&gt; &lt;code&gt;decimal&lt;/code&gt; &lt;/a&gt;モジュールは、すぐに使用できる2つの標準コンテキスト&lt;a href=&quot;#decimal.BasicContext&quot;&gt; &lt;code&gt;BasicContext&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#decimal.ExtendedContext&quot;&gt; &lt;code&gt;ExtendedContext&lt;/code&gt; を提供し&lt;/a&gt;ます。前者は、多くのトラップが有効になっているため、デバッグに特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="d46ae7189ab259286c168e0b80b2fd3235fd9aed" translate="yes" xml:space="preserve">
          <source>In addition to &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like objects&lt;/a&gt;, &lt;code&gt;'base64_codec'&lt;/code&gt; also accepts ASCII-only instances of &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; for decoding</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクトに&lt;/a&gt;加えて、 &lt;code&gt;'base64_codec'&lt;/code&gt; は&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; の&lt;/a&gt; ASCIIのみのインスタンスもデコードに受け入れます</target>
        </trans-unit>
        <trans-unit id="a7b20715c6c20497ac319a68d7016a8f75ae620e" translate="yes" xml:space="preserve">
          <source>In addition to being more CPU-intensive, compression with higher presets also requires much more memory (and produces output that needs more memory to decompress). With preset &lt;code&gt;9&lt;/code&gt; for example, the overhead for an &lt;a href=&quot;#lzma.LZMACompressor&quot;&gt;&lt;code&gt;LZMACompressor&lt;/code&gt;&lt;/a&gt; object can be as high as 800 MiB. For this reason, it is generally best to stick with the default preset.</source>
          <target state="translated">CPUを集中的に使用することに加えて、より高いプリセットを使用した圧縮では、さらに多くのメモリが必要になります（解凍するためにより多くのメモリを必要とする出力が生成されます）。たとえば、プリセット &lt;code&gt;9&lt;/code&gt; の場合、&lt;a href=&quot;#lzma.LZMACompressor&quot;&gt; &lt;code&gt;LZMACompressor&lt;/code&gt; &lt;/a&gt;オブジェクトのオーバーヘッドは800 MiBにもなる可能性があります。このため、通常はデフォルトのプリセットを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="62f40ff2f60f38cdc6a391277467f1c0b2fc7189" translate="yes" xml:space="preserve">
          <source>In addition to enabling the debug mode, consider also:</source>
          <target state="translated">デバッグモードを有効にすることに加えて、デバッグモードを有効にすることも検討してみてください。</target>
        </trans-unit>
        <trans-unit id="9b6341c25f3405f85d37bcad24b0b303303d029c" translate="yes" xml:space="preserve">
          <source>In addition to implementing the methods above, implementations of the &lt;a href=&quot;#http.cookiejar.CookiePolicy&quot;&gt;&lt;code&gt;CookiePolicy&lt;/code&gt;&lt;/a&gt; interface must also supply the following attributes, indicating which protocols should be used, and how. All of these attributes may be assigned to.</source>
          <target state="translated">上記のメソッドの実装に加えて、&lt;a href=&quot;#http.cookiejar.CookiePolicy&quot;&gt; &lt;code&gt;CookiePolicy&lt;/code&gt; &lt;/a&gt;インターフェースの実装は、使用するプロトコルとその方法を示す次の属性も提供する必要があります。これらの属性はすべて割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="0b8600bc88afada2a15d07e3d3b860294a40b1a7" translate="yes" xml:space="preserve">
          <source>In addition to many functions described in the &lt;a href=&quot;os#module-os&quot;&gt;&lt;code&gt;os&lt;/code&gt;&lt;/a&gt; module documentation, &lt;a href=&quot;#module-posix&quot;&gt;&lt;code&gt;posix&lt;/code&gt;&lt;/a&gt; defines the following data item:</source>
          <target state="translated">&lt;a href=&quot;os#module-os&quot;&gt; &lt;code&gt;os&lt;/code&gt; &lt;/a&gt;モジュールのドキュメントで説明されている多くの関数に加えて、&lt;a href=&quot;#module-posix&quot;&gt; &lt;code&gt;posix&lt;/code&gt; &lt;/a&gt;は次のデータ項目を定義します：</target>
        </trans-unit>
        <trans-unit id="ea70a6e7df22f6334f5444417337936e1629f2a1" translate="yes" xml:space="preserve">
          <source>In addition to method lookups, &lt;a href=&quot;#super&quot;&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt; also works for attribute lookups. One possible use case for this is calling &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-descriptor&quot;&gt;descriptors&lt;/a&gt; in a parent or sibling class.</source>
          <target state="translated">メソッド検索に加えて、&lt;a href=&quot;#super&quot;&gt; &lt;code&gt;super()&lt;/code&gt; &lt;/a&gt;は属性検索にも機能します。この使用例の1つは、親クラスまたは兄弟クラスの&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-descriptor&quot;&gt;記述子&lt;/a&gt;を呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="dcad6a5eb6d0ad37696a20f7d2411fda996f3b45" translate="yes" xml:space="preserve">
          <source>In addition to size-limiting tools, the module also provides a decorator for detecting recursive calls to &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__repr__&quot;&gt;&lt;code&gt;__repr__()&lt;/code&gt;&lt;/a&gt; and substituting a placeholder string instead.</source>
          <target state="translated">サイズ制限ツールに加えて、モジュールは&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__repr__&quot;&gt; &lt;code&gt;__repr__()&lt;/code&gt; &lt;/a&gt;への再帰呼び出しを検出し、代わりにプレースホルダー文字列を置き換えるためのデコレーターも提供します。</target>
        </trans-unit>
        <trans-unit id="8d830c6765c9dc0300fe6b5cbc2b3e8460866e69" translate="yes" xml:space="preserve">
          <source>In addition to supporting the methods and operations of mappings, &lt;a href=&quot;#collections.UserDict&quot;&gt;&lt;code&gt;UserDict&lt;/code&gt;&lt;/a&gt; instances provide the following attribute:</source>
          <target state="translated">マッピングのメソッドと操作をサポートすることに加えて、&lt;a href=&quot;#collections.UserDict&quot;&gt; &lt;code&gt;UserDict&lt;/code&gt; &lt;/a&gt;インスタンスは次の属性を提供します。</target>
        </trans-unit>
        <trans-unit id="a8807f211b2460760255a1709766f0a3137c6dab" translate="yes" xml:space="preserve">
          <source>In addition to supporting the methods and operations of mutable sequences, &lt;a href=&quot;#collections.UserList&quot;&gt;&lt;code&gt;UserList&lt;/code&gt;&lt;/a&gt; instances provide the following attribute:</source>
          <target state="translated">可変シーケンスのメソッドと操作をサポートすることに加えて、&lt;a href=&quot;#collections.UserList&quot;&gt; &lt;code&gt;UserList&lt;/code&gt; &lt;/a&gt;インスタンスは次の属性を提供します。</target>
        </trans-unit>
        <trans-unit id="04aa2e8b62d41221e69b20a54dc36f3e6372ea8e" translate="yes" xml:space="preserve">
          <source>In addition to supporting the methods and operations of strings, &lt;a href=&quot;#collections.UserString&quot;&gt;&lt;code&gt;UserString&lt;/code&gt;&lt;/a&gt; instances provide the following attribute:</source>
          <target state="translated">文字列のメソッドと操作をサポートすることに加えて、&lt;a href=&quot;#collections.UserString&quot;&gt; &lt;code&gt;UserString&lt;/code&gt; &lt;/a&gt;インスタンスは次の属性を提供します。</target>
        </trans-unit>
        <trans-unit id="2cf43345efe70766c6640171cc92f01b4817ca97" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;a href=&quot;threading#threading.Thread&quot;&gt;&lt;code&gt;threading.Thread&lt;/code&gt;&lt;/a&gt; API, &lt;a href=&quot;#multiprocessing.Process&quot;&gt;&lt;code&gt;Process&lt;/code&gt;&lt;/a&gt; objects also support the following attributes and methods:</source>
          <target state="translated">&lt;a href=&quot;threading#threading.Thread&quot;&gt; &lt;code&gt;threading.Thread&lt;/code&gt; &lt;/a&gt; APIに加えて、&lt;a href=&quot;#multiprocessing.Process&quot;&gt; &lt;code&gt;Process&lt;/code&gt; &lt;/a&gt;オブジェクトは次の属性とメソッドもサポートします。</target>
        </trans-unit>
        <trans-unit id="3537cce0770809bd80cddc6370639f4675c1c292" translate="yes" xml:space="preserve">
          <source>In addition to the Tk interface module, &lt;a href=&quot;#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt; includes a number of Python modules, &lt;code&gt;tkinter.constants&lt;/code&gt; being one of the most important. Importing &lt;a href=&quot;#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt; will automatically import &lt;code&gt;tkinter.constants&lt;/code&gt;, so, usually, to use Tkinter all you need is a simple import statement:</source>
          <target state="translated">Tkのインタフェースモジュールに加えて、&lt;a href=&quot;#module-tkinter&quot;&gt; &lt;code&gt;tkinter&lt;/code&gt; &lt;/a&gt;、Pythonモジュールの数を含む &lt;code&gt;tkinter.constants&lt;/code&gt; は、最も重要なものの一つです。インポート&lt;a href=&quot;#module-tkinter&quot;&gt; &lt;code&gt;tkinter&lt;/code&gt; &lt;/a&gt;自動的にインポートされます &lt;code&gt;tkinter.constants&lt;/code&gt; は、そう、通常、あなたが必要なのは、単純なimport文でのTkinterを使用するには：</target>
        </trans-unit>
        <trans-unit id="9690476654ee5a2736c4ceafa04629e93b08060a" translate="yes" xml:space="preserve">
          <source>In addition to the above methods, the &lt;a href=&quot;#codecs.StreamReader&quot;&gt;&lt;code&gt;StreamReader&lt;/code&gt;&lt;/a&gt; must also inherit all other methods and attributes from the underlying stream.</source>
          <target state="translated">上記のメソッドに加えて、&lt;a href=&quot;#codecs.StreamReader&quot;&gt; &lt;code&gt;StreamReader&lt;/code&gt; &lt;/a&gt;は他のすべてのメソッドと属性を基になるストリームから継承する必要があります。</target>
        </trans-unit>
        <trans-unit id="222314dc286fea8c88b16cc332dcefcec6c56990" translate="yes" xml:space="preserve">
          <source>In addition to the above methods, the &lt;a href=&quot;#codecs.StreamWriter&quot;&gt;&lt;code&gt;StreamWriter&lt;/code&gt;&lt;/a&gt; must also inherit all other methods and attributes from the underlying stream.</source>
          <target state="translated">上記のメソッドに加えて、&lt;a href=&quot;#codecs.StreamWriter&quot;&gt; &lt;code&gt;StreamWriter&lt;/code&gt; &lt;/a&gt;は、基になるストリームから他のすべてのメソッドと属性も継承する必要があります。</target>
        </trans-unit>
        <trans-unit id="1720f463c1df0d0fe9311a603541746810b18c89" translate="yes" xml:space="preserve">
          <source>In addition to the above presentation types, integers can be formatted with the floating point presentation types listed below (except &lt;code&gt;'n'&lt;/code&gt; and &lt;code&gt;None&lt;/code&gt;). When doing so, &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float()&lt;/code&gt;&lt;/a&gt; is used to convert the integer to a floating point number before formatting.</source>
          <target state="translated">上記の表示タイプに加えて、整数は、以下にリストされている浮動小数点表示タイプでフォーマットできます（ &lt;code&gt;'n'&lt;/code&gt; および &lt;code&gt;None&lt;/code&gt; を除く）。その際、&lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float()&lt;/code&gt; &lt;/a&gt;を使用して、フォーマットする前に整数を浮動小数点数に変換します。</target>
        </trans-unit>
        <trans-unit id="cfa4995b269e79140bbd715d66781cc2d6ced577" translate="yes" xml:space="preserve">
          <source>In addition to the above, &lt;a href=&quot;#logging.LoggerAdapter&quot;&gt;&lt;code&gt;LoggerAdapter&lt;/code&gt;&lt;/a&gt; supports the following methods of &lt;a href=&quot;#logging.Logger&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt;: &lt;a href=&quot;#logging.Logger.debug&quot;&gt;&lt;code&gt;debug()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#logging.Logger.info&quot;&gt;&lt;code&gt;info()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#logging.Logger.warning&quot;&gt;&lt;code&gt;warning()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#logging.Logger.error&quot;&gt;&lt;code&gt;error()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#logging.Logger.exception&quot;&gt;&lt;code&gt;exception()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#logging.Logger.critical&quot;&gt;&lt;code&gt;critical()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#logging.Logger.log&quot;&gt;&lt;code&gt;log()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#logging.Logger.isEnabledFor&quot;&gt;&lt;code&gt;isEnabledFor()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#logging.Logger.getEffectiveLevel&quot;&gt;&lt;code&gt;getEffectiveLevel()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#logging.Logger.setLevel&quot;&gt;&lt;code&gt;setLevel()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#logging.Logger.hasHandlers&quot;&gt;&lt;code&gt;hasHandlers()&lt;/code&gt;&lt;/a&gt;. These methods have the same signatures as their counterparts in &lt;a href=&quot;#logging.Logger&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt;, so you can use the two types of instances interchangeably.</source>
          <target state="translated">上記に加えて、&lt;a href=&quot;#logging.LoggerAdapter&quot;&gt; &lt;code&gt;LoggerAdapter&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;#logging.Logger&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; &lt;/a&gt;の以下のメソッドをサポートします：&lt;a href=&quot;#logging.Logger.debug&quot;&gt; &lt;code&gt;debug()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#logging.Logger.info&quot;&gt; &lt;code&gt;info()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#logging.Logger.warning&quot;&gt; &lt;code&gt;warning()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#logging.Logger.error&quot;&gt; &lt;code&gt;error()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#logging.Logger.exception&quot;&gt; &lt;code&gt;exception()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#logging.Logger.critical&quot;&gt; &lt;code&gt;critical()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#logging.Logger.log&quot;&gt; &lt;code&gt;log()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#logging.Logger.isEnabledFor&quot;&gt; &lt;code&gt;isEnabledFor()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#logging.Logger.getEffectiveLevel&quot;&gt; &lt;code&gt;getEffectiveLevel()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#logging.Logger.setLevel&quot;&gt; &lt;code&gt;setLevel()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#logging.Logger.hasHandlers&quot;&gt; &lt;code&gt;hasHandlers()&lt;/code&gt; &lt;/a&gt;。これらのメソッドの署名は&lt;a href=&quot;#logging.Logger&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; の&lt;/a&gt;対応するメソッドと同じであるため、2つのタイプのインスタンスを交換して使用できます。</target>
        </trans-unit>
        <trans-unit id="3d50c1e6c07de1acc4db99246c84c882aabeeb1c" translate="yes" xml:space="preserve">
          <source>In addition to the above, deques support iteration, pickling, &lt;code&gt;len(d)&lt;/code&gt;, &lt;code&gt;reversed(d)&lt;/code&gt;, &lt;code&gt;copy.copy(d)&lt;/code&gt;, &lt;code&gt;copy.deepcopy(d)&lt;/code&gt;, membership testing with the &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; operator, and subscript references such as &lt;code&gt;d[0]&lt;/code&gt; to access the first element. Indexed access is O(1) at both ends but slows to O(n) in the middle. For fast random access, use lists instead.</source>
          <target state="translated">上記に加えて、dequeは反復、ピクルリング、 &lt;code&gt;len(d)&lt;/code&gt; 、 &lt;code&gt;reversed(d)&lt;/code&gt; 、 &lt;code&gt;copy.copy(d)&lt;/code&gt; 、 &lt;code&gt;copy.deepcopy(d)&lt;/code&gt; 、&lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt;演算子を使用したメンバーシップテスト、および &lt;code&gt;d[0]&lt;/code&gt; などの添え字参照をサポートします0]は、最初の要素にアクセスします。インデックス付きアクセスは両端でO（1）ですが、途中でO（n）に遅くなります。高速ランダムアクセスの場合は、代わりにリストを使用してください。</target>
        </trans-unit>
        <trans-unit id="ebaf021a38f23d1b3be305231ce1cfa6bc43bf01" translate="yes" xml:space="preserve">
          <source>In addition to the attributes and methods from &lt;a href=&quot;#io.IOBase&quot;&gt;&lt;code&gt;IOBase&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#io.RawIOBase&quot;&gt;&lt;code&gt;RawIOBase&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#io.FileIO&quot;&gt;&lt;code&gt;FileIO&lt;/code&gt;&lt;/a&gt; provides the following data attributes:</source>
          <target state="translated">&lt;a href=&quot;#io.IOBase&quot;&gt; &lt;code&gt;IOBase&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#io.RawIOBase&quot;&gt; &lt;code&gt;RawIOBase&lt;/code&gt; &lt;/a&gt;の属性とメソッドに加えて、&lt;a href=&quot;#io.FileIO&quot;&gt; &lt;code&gt;FileIO&lt;/code&gt; &lt;/a&gt;は次のデータ属性を提供します。</target>
        </trans-unit>
        <trans-unit id="14586c995a780d78561f97624099b8e4ec9b4105" translate="yes" xml:space="preserve">
          <source>In addition to the attributes and methods from &lt;a href=&quot;#io.IOBase&quot;&gt;&lt;code&gt;IOBase&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#io.RawIOBase&quot;&gt;&lt;code&gt;RawIOBase&lt;/code&gt;&lt;/a&gt; provides the following methods:</source>
          <target state="translated">&lt;a href=&quot;#io.IOBase&quot;&gt; &lt;code&gt;IOBase&lt;/code&gt; の&lt;/a&gt;属性とメソッドに加えて、&lt;a href=&quot;#io.RawIOBase&quot;&gt; &lt;code&gt;RawIOBase&lt;/code&gt; &lt;/a&gt;は次のメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="52fd5a33b320649b6f1060489177810635c6ea92" translate="yes" xml:space="preserve">
          <source>In addition to the classes described above, there are a number of module-level functions.</source>
          <target state="translated">上記のクラスに加えて、モジュールレベルの関数がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="c1112b3c989ed862bdeb0f82d3c1bc4efa761003" translate="yes" xml:space="preserve">
          <source>In addition to the dictionary-like methods, &lt;code&gt;gdbm&lt;/code&gt; objects have the following methods:</source>
          <target state="translated">辞書のようなメソッドに加えて、 &lt;code&gt;gdbm&lt;/code&gt; オブジェクトには次のメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="6226060e492ea216f0e7f78ce7856fca0eebffd1" translate="yes" xml:space="preserve">
          <source>In addition to the dictionary-like methods, &lt;code&gt;ndbm&lt;/code&gt; objects provide the following method:</source>
          <target state="translated">辞書のようなメソッドに加えて、 &lt;code&gt;ndbm&lt;/code&gt; オブジェクトは次のメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="cea61bcebf3b4dd67f209d89e9e334cbef2a059e" translate="yes" xml:space="preserve">
          <source>In addition to the environment functions above, the &lt;a href=&quot;#module-wsgiref.util&quot;&gt;&lt;code&gt;wsgiref.util&lt;/code&gt;&lt;/a&gt; module also provides these miscellaneous utilities:</source>
          <target state="translated">上記の環境関数に加えて、&lt;a href=&quot;#module-wsgiref.util&quot;&gt; &lt;code&gt;wsgiref.util&lt;/code&gt; &lt;/a&gt;モジュールは以下の雑多なユーティリティも提供します：</target>
        </trans-unit>
        <trans-unit id="858dce34107f4186993a5996db613388f2631800" translate="yes" xml:space="preserve">
          <source>In addition to the examples below, more examples are given in &lt;a href=&quot;https://docs.python.org/3.8/howto/urllib2.html#urllib-howto&quot;&gt;HOWTO Fetch Internet Resources Using The urllib Package&lt;/a&gt;.</source>
          <target state="translated">以下の例に加えて、より多くの例が&lt;a href=&quot;https://docs.python.org/3.8/howto/urllib2.html#urllib-howto&quot;&gt;urllibパッケージを使用&lt;/a&gt;したHOWTO Fetch Internet Resourcesで提供されています。</target>
        </trans-unit>
        <trans-unit id="b096e1520c7229739493907c163d5aa90e2c7fd3" translate="yes" xml:space="preserve">
          <source>In addition to the features required to implement the &lt;a href=&quot;#http.cookiejar.CookiePolicy&quot;&gt;&lt;code&gt;CookiePolicy&lt;/code&gt;&lt;/a&gt; interface, this class allows you to block and allow domains from setting and receiving cookies. There are also some strictness switches that allow you to tighten up the rather loose Netscape protocol rules a little bit (at the cost of blocking some benign cookies).</source>
          <target state="translated">&lt;a href=&quot;#http.cookiejar.CookiePolicy&quot;&gt; &lt;code&gt;CookiePolicy&lt;/code&gt; &lt;/a&gt;インターフェースの実装に必要な機能に加えて、このクラスを使用すると、ドメインがCookieを設定および受信することをブロックおよび許可できます。多少緩いNetscapeプロトコルルールを少し厳しくできる（いくつかの無害なCookieをブロックする代わりに）厳密性スイッチもあります。</target>
        </trans-unit>
        <trans-unit id="1dc8d82427b096c43fc2e7d5213bd591f0d85590" translate="yes" xml:space="preserve">
          <source>In addition to the literal forms, bytes objects can be created in a number of other ways:</source>
          <target state="translated">リテラル形式に加えて、バイトオブジェクトは他の多くの方法で作成することができます。</target>
        </trans-unit>
        <trans-unit id="c64e42d0dab883c69e970748044e9e77b97cb7a8" translate="yes" xml:space="preserve">
          <source>In addition to the methods inherited from tuples, named tuples support three additional methods and two attributes. To prevent conflicts with field names, the method and attribute names start with an underscore.</source>
          <target state="translated">タプルから継承されるメソッドに加えて、名前付きタプルは3つのメソッドと2つの属性をサポートしています。フィールド名との競合を防ぐため、メソッド名と属性名はアンダースコアで始まります。</target>
        </trans-unit>
        <trans-unit id="e2f6ddf1bf12cf34152fec328d39c9d8ce0a989d" translate="yes" xml:space="preserve">
          <source>In addition to the methods provided by the &lt;a href=&quot;collections.abc#collections.abc.MutableMapping&quot;&gt;&lt;code&gt;collections.abc.MutableMapping&lt;/code&gt;&lt;/a&gt; class, &lt;code&gt;dumbdbm&lt;/code&gt; objects provide the following methods:</source>
          <target state="translated">&lt;a href=&quot;collections.abc#collections.abc.MutableMapping&quot;&gt; &lt;code&gt;collections.abc.MutableMapping&lt;/code&gt; &lt;/a&gt;クラスによって提供されるメソッドに加えて、 &lt;code&gt;dumbdbm&lt;/code&gt; オブジェクトは次のメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="49c9b324d276aba55bfa28551beee12479bf0531" translate="yes" xml:space="preserve">
          <source>In addition to the operations listed above, &lt;a href=&quot;#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt; objects support certain additions and subtractions with &lt;a href=&quot;#datetime.date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; objects (see below).</source>
          <target state="translated">上記の操作に加えて、&lt;a href=&quot;#datetime.timedelta&quot;&gt; &lt;code&gt;timedelta&lt;/code&gt; &lt;/a&gt;オブジェクトは、&lt;a href=&quot;#datetime.date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;オブジェクトを使用した特定の加算および減算をサポートしています（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="8c4c56f4ca00cb6b6be40eba948fd85089f6ade4" translate="yes" xml:space="preserve">
          <source>In addition to the settable attributes listed above that apply to all policies, this policy adds the following additional attributes:</source>
          <target state="translated">すべてのポリシーに適用される上記の設定可能な属性に加えて、このポリシーでは以下の属性が追加されます。</target>
        </trans-unit>
        <trans-unit id="7d6fe1a1b1f7fcd5eef30c9780f9e8758b294753" translate="yes" xml:space="preserve">
          <source>In addition to the standard library, there is a growing collection of several thousand components (from individual programs and modules to packages and entire application development frameworks), available from the &lt;a href=&quot;https://pypi.org&quot;&gt;Python Package Index&lt;/a&gt;.</source>
          <target state="translated">標準ライブラリに加えて、&lt;a href=&quot;https://pypi.org&quot;&gt;Pythonパッケージインデックス&lt;/a&gt;から入手できる数千のコンポーネント（個々のプログラムやモジュールからパッケージやアプリケーション開発フレームワーク全体まで）のコレクションが増えています。</target>
        </trans-unit>
        <trans-unit id="37b1282f5319fc90d1ae0fbf402438654f72c8b7" translate="yes" xml:space="preserve">
          <source>In addition to the standard numeric properties, decimal floating point objects also have a number of specialized methods:</source>
          <target state="translated">標準的な数値特性に加えて、10進浮動小数点オブジェクトには多くの専門的なメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="20844ff85a7de274374759963a07f03ca0ec2fa4" translate="yes" xml:space="preserve">
          <source>In addition to the three supplied contexts, new contexts can be created with the &lt;a href=&quot;#decimal.Context&quot;&gt;&lt;code&gt;Context&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">提供された3つのコンテキストに加えて、&lt;a href=&quot;#decimal.Context&quot;&gt; &lt;code&gt;Context&lt;/code&gt; &lt;/a&gt;コンストラクターで新しいコンテキストを作成できます。</target>
        </trans-unit>
        <trans-unit id="032befaca731d1da6b9f55a3d41598ab32bb42d3" translate="yes" xml:space="preserve">
          <source>In addition to the two signed zeros which are distinct yet equal, there are various representations of zero with differing precisions yet equivalent in value. This takes a bit of getting used to. For an eye accustomed to normalized floating point representations, it is not immediately obvious that the following calculation returns a value equal to zero:</source>
          <target state="translated">2つの符号付きゼロは区別されているが等しいことに加えて、さまざまなゼロの表現があり、異なる精度であるが値は等しい。これには少し慣れが必要です。正規化された浮動小数点表現に慣れている人にとっては、次の計算でゼロに等しい値が返されることはすぐにはわかりません。</target>
        </trans-unit>
        <trans-unit id="470a6fd8b7a670e99e5471d463edd75a822561e0" translate="yes" xml:space="preserve">
          <source>In addition to the usual mapping methods, ordered dictionaries also support reverse iteration using &lt;a href=&quot;functions#reversed&quot;&gt;&lt;code&gt;reversed()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">通常のマッピングメソッドに加えて、順序付けされたディクショナリはreverse &lt;a href=&quot;functions#reversed&quot;&gt; &lt;code&gt;reversed()&lt;/code&gt; &lt;/a&gt;を使用した逆反復もサポートしています。</target>
        </trans-unit>
        <trans-unit id="1f6056a668fa6b597cd5e06fbb9eab25b2a47143" translate="yes" xml:space="preserve">
          <source>In addition to their mapping interface and formatting features, &lt;a href=&quot;#wsgiref.headers.Headers&quot;&gt;&lt;code&gt;Headers&lt;/code&gt;&lt;/a&gt; objects also have the following methods for querying and adding multi-valued headers, and for adding headers with MIME parameters:</source>
          <target state="translated">マッピングインターフェイスと書式設定機能に加えて、&lt;a href=&quot;#wsgiref.headers.Headers&quot;&gt; &lt;code&gt;Headers&lt;/code&gt; &lt;/a&gt;オブジェクトには、多値ヘッダーのクエリと追加、およびMIMEパラメーターを使用したヘッダーの追加のための次のメソッドもあります。</target>
        </trans-unit>
        <trans-unit id="b37effc66593dde7858807d6c481046b5424a851" translate="yes" xml:space="preserve">
          <source>In addition to these classes, &lt;a href=&quot;#module-xml.sax&quot;&gt;&lt;code&gt;xml.sax&lt;/code&gt;&lt;/a&gt; provides the following exception classes.</source>
          <target state="translated">これらのクラスに加えて、&lt;a href=&quot;#module-xml.sax&quot;&gt; &lt;code&gt;xml.sax&lt;/code&gt; &lt;/a&gt;は次の例外クラスを提供します。</target>
        </trans-unit>
        <trans-unit id="3c5fc990cbc73c12c0b40300fad7df5e7ee287cd" translate="yes" xml:space="preserve">
          <source>In addition to these classes, &lt;a href=&quot;#module-xml.sax.handler&quot;&gt;&lt;code&gt;xml.sax.handler&lt;/code&gt;&lt;/a&gt; provides symbolic constants for the feature and property names.</source>
          <target state="translated">これらのクラスに加えて、&lt;a href=&quot;#module-xml.sax.handler&quot;&gt; &lt;code&gt;xml.sax.handler&lt;/code&gt; &lt;/a&gt;は機能とプロパティ名のシンボリック定数を提供します。</target>
        </trans-unit>
        <trans-unit id="398bda298534a149091a837cc6c784d269a2e413" translate="yes" xml:space="preserve">
          <source>In addition to these methods, lock objects can also be used via the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement, e.g.:</source>
          <target state="translated">これらのメソッドに加えて、ロックオブジェクトは&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントを介して使用することもできます。例：</target>
        </trans-unit>
        <trans-unit id="324d7520dd2db34f14989622298b9a50942c0a6b" translate="yes" xml:space="preserve">
          <source>In addition to these two forms, there are two additional normal forms based on compatibility equivalence. In Unicode, certain characters are supported which normally would be unified with other characters. For example, U+2160 (ROMAN NUMERAL ONE) is really the same thing as U+0049 (LATIN CAPITAL LETTER I). However, it is supported in Unicode for compatibility with existing character sets (e.g. gb2312).</source>
          <target state="translated">こ れ ら 2 つの形式に加えて、 互換性等価性に基づく 2 つの通常形式が追加されています。Unicodeでは、通常は他の文字と統一されているであろう特定の文字がサポートされています。た と えば、 U+2160 (ROMAN NUMERAL ONE)は、 U+0049 (LATIN CAPITAL LETTER I)と実際には同じものです。しかし、既存の文字セット(gb2312など)との互換性のためにUnicodeではサポートされています。</target>
        </trans-unit>
        <trans-unit id="9e0c6060f180bd1be434b002c3a8e1bb629b28ba" translate="yes" xml:space="preserve">
          <source>In addition to those of &lt;a href=&quot;#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#BlockingIOError&quot;&gt;&lt;code&gt;BlockingIOError&lt;/code&gt;&lt;/a&gt; can have one more attribute:</source>
          <target state="translated">&lt;a href=&quot;#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; の&lt;/a&gt;属性に加えて、&lt;a href=&quot;#BlockingIOError&quot;&gt; &lt;code&gt;BlockingIOError&lt;/code&gt; に&lt;/a&gt;はもう1つの属性があります。</target>
        </trans-unit>
        <trans-unit id="58b602fd4657546b90e8bec1feb16284ddd90bfc" translate="yes" xml:space="preserve">
          <source>In addition you can pass &lt;code&gt;spec=True&lt;/code&gt; or &lt;code&gt;spec_set=True&lt;/code&gt;, which causes patch to pass in the object being mocked as the spec/spec_set object.</source>
          <target state="translated">さらに、 &lt;code&gt;spec=True&lt;/code&gt; または &lt;code&gt;spec_set=True&lt;/code&gt; を渡すことができます。これにより、モックされるオブジェクトをspec / spec_setオブジェクトとして渡します。</target>
        </trans-unit>
        <trans-unit id="1538a099b36c536517432c89a4b9de9737c1b154" translate="yes" xml:space="preserve">
          <source>In addition, &lt;a href=&quot;#module-tkinter.tix&quot;&gt;&lt;code&gt;tkinter.tix&lt;/code&gt;&lt;/a&gt; augments &lt;a href=&quot;tkinter#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt; by providing:</source>
          <target state="translated">また、&lt;a href=&quot;#module-tkinter.tix&quot;&gt; &lt;code&gt;tkinter.tix&lt;/code&gt; &lt;/a&gt;オーグメント&lt;a href=&quot;tkinter#module-tkinter&quot;&gt; &lt;code&gt;tkinter&lt;/code&gt; &lt;/a&gt;提供することにより：</target>
        </trans-unit>
        <trans-unit id="ad37a6225b74614726b479be7666d6240684d671" translate="yes" xml:space="preserve">
          <source>In addition, &lt;a href=&quot;#module-xml.dom&quot;&gt;&lt;code&gt;xml.dom&lt;/code&gt;&lt;/a&gt; contains a base &lt;code&gt;Node&lt;/code&gt; class and the DOM exception classes. The &lt;code&gt;Node&lt;/code&gt; class provided by this module does not implement any of the methods or attributes defined by the DOM specification; concrete DOM implementations must provide those. The &lt;code&gt;Node&lt;/code&gt; class provided as part of this module does provide the constants used for the &lt;code&gt;nodeType&lt;/code&gt; attribute on concrete &lt;code&gt;Node&lt;/code&gt; objects; they are located within the class rather than at the module level to conform with the DOM specifications.</source>
          <target state="translated">さらに、&lt;a href=&quot;#module-xml.dom&quot;&gt; &lt;code&gt;xml.dom&lt;/code&gt; に&lt;/a&gt;は、ベース &lt;code&gt;Node&lt;/code&gt; クラスとDOM例外クラスが含まれています。 &lt;code&gt;Node&lt;/code&gt; このモジュールによって提供されるクラスは、DOM仕様で定義されたメソッドまたは属性のいずれかを実装していません。具体的なDOM実装はそれらを提供する必要があります。 &lt;code&gt;Node&lt;/code&gt; のために使用される定数を提供しない、このモジュールの一部として提供されるクラス &lt;code&gt;nodeType&lt;/code&gt; コンクリートの属性 &lt;code&gt;Node&lt;/code&gt; のオブジェクトを、これらは、DOM仕様に準拠するために、モジュールレベルではなくクラス内に配置されます。</target>
        </trans-unit>
        <trans-unit id="c5d44ab30dfa1f3ce24fbe120b70c25d4d0b4cc1" translate="yes" xml:space="preserve">
          <source>In addition, &lt;a href=&quot;#venv.EnvBuilder&quot;&gt;&lt;code&gt;EnvBuilder&lt;/code&gt;&lt;/a&gt; provides this utility method that can be called from &lt;a href=&quot;#venv.EnvBuilder.setup_scripts&quot;&gt;&lt;code&gt;setup_scripts()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#venv.EnvBuilder.post_setup&quot;&gt;&lt;code&gt;post_setup()&lt;/code&gt;&lt;/a&gt; in subclasses to assist in installing custom scripts into the virtual environment.</source>
          <target state="translated">さらに、&lt;a href=&quot;#venv.EnvBuilder&quot;&gt; &lt;code&gt;EnvBuilder&lt;/code&gt; &lt;/a&gt;は、カスタムスクリプトを仮想環境にインストールするのを支援するために、サブクラスの&lt;a href=&quot;#venv.EnvBuilder.setup_scripts&quot;&gt; &lt;code&gt;setup_scripts()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#venv.EnvBuilder.post_setup&quot;&gt; &lt;code&gt;post_setup()&lt;/code&gt; &lt;/a&gt;から呼び出すことができるこのユーティリティメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="8d5378207c9afa23bfe1afa0e6e3ef8b7515d910" translate="yes" xml:space="preserve">
          <source>In addition, &lt;code&gt;Tk&lt;/code&gt; also loads a startup file if it is present. Note that the Tk file is loaded unconditionally. This additional file is &lt;code&gt;.Idle.py&lt;/code&gt; and is looked for in the user&amp;rsquo;s home directory. Statements in this file will be executed in the Tk namespace, so this file is not useful for importing functions to be used from IDLE&amp;rsquo;s Python shell.</source>
          <target state="translated">さらに、 &lt;code&gt;Tk&lt;/code&gt; は、スタートアップファイルが存在する場合は、それもロードします。Tkファイルは無条件にロードされることに注意してください。この追加ファイルは &lt;code&gt;.Idle.py&lt;/code&gt; であり、ユーザーのホームディレクトリで検索されます。このファイルのステートメントはTk名前空間で実行されるため、このファイルは、IDLEのPythonシェルから使用する関数をインポートする場合には役立ちません。</target>
        </trans-unit>
        <trans-unit id="714413f1caa3214664dffb1034eb3924cd14e3f3" translate="yes" xml:space="preserve">
          <source>In addition, a custom &lt;a href=&quot;#xml.etree.ElementTree.TreeBuilder&quot;&gt;&lt;code&gt;TreeBuilder&lt;/code&gt;&lt;/a&gt; object can provide the following methods:</source>
          <target state="translated">さらに、カスタム&lt;a href=&quot;#xml.etree.ElementTree.TreeBuilder&quot;&gt; &lt;code&gt;TreeBuilder&lt;/code&gt; &lt;/a&gt;オブジェクトは次のメソッドを提供できます。</target>
        </trans-unit>
        <trans-unit id="ffffc9f25603a24b2ca6858559ed5b2e495ca947" translate="yes" xml:space="preserve">
          <source>In addition, each channel delegates or extends many of the socket methods. Most of these are nearly identical to their socket partners.</source>
          <target state="translated">また、各チャネルは多くのソケットメソッドをデリゲートしたり、拡張したりしています。これらのメソッドのほとんどは、ソケットパートナーとほぼ同じです。</target>
        </trans-unit>
        <trans-unit id="c412f65e105df43e1227481dd3222239a0aaaa6f" translate="yes" xml:space="preserve">
          <source>In addition, every data type that can be packed with a &lt;a href=&quot;#xdrlib.Packer&quot;&gt;&lt;code&gt;Packer&lt;/code&gt;&lt;/a&gt;, can be unpacked with an &lt;a href=&quot;#xdrlib.Unpacker&quot;&gt;&lt;code&gt;Unpacker&lt;/code&gt;&lt;/a&gt;. Unpacking methods are of the form &lt;code&gt;unpack_type()&lt;/code&gt;, and take no arguments. They return the unpacked object.</source>
          <target state="translated">さらに、&lt;a href=&quot;#xdrlib.Packer&quot;&gt; &lt;code&gt;Packer&lt;/code&gt; &lt;/a&gt;でパックできるすべてのデータ型は、&lt;a href=&quot;#xdrlib.Unpacker&quot;&gt; &lt;code&gt;Unpacker&lt;/code&gt; &lt;/a&gt;でアンパックできます。 &lt;code&gt;unpack_type()&lt;/code&gt; メソッドはunpack_type（）の形式で、引数を取りません。解凍されたオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="7ba3a9a49cc3e12a995a955c9b502b49ba170e63" translate="yes" xml:space="preserve">
          <source>In addition, if &lt;code&gt;M.__test__&lt;/code&gt; exists and &amp;ldquo;is true&amp;rdquo;, it must be a dict, and each entry maps a (string) name to a function object, class object, or string. Function and class object docstrings found from &lt;code&gt;M.__test__&lt;/code&gt; are searched, and strings are treated as if they were docstrings. In output, a key &lt;code&gt;K&lt;/code&gt; in &lt;code&gt;M.__test__&lt;/code&gt; appears with name</source>
          <target state="translated">さらに、 &lt;code&gt;M.__test__&lt;/code&gt; が存在し、「true」である場合は、dictである必要があり、各エントリは（文字列）名を関数オブジェクト、クラスオブジェクト、または文字列にマップします。 &lt;code&gt;M.__test__&lt;/code&gt; から見つかった関数およびクラスオブジェクトのdocstring が検索され、文字列はdocstringであるかのように扱われます。出力では、 &lt;code&gt;M.__test__&lt;/code&gt; キー &lt;code&gt;K&lt;/code&gt; が名前とともに表示されます。</target>
        </trans-unit>
        <trans-unit id="7c4f27b629e481e3b68eabacd3944479c69ebbb1" translate="yes" xml:space="preserve">
          <source>In addition, if &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;'func_type'&lt;/code&gt;, the input syntax is modified to correspond to &lt;a href=&quot;https://www.python.org/dev/peps/pep-0484&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;PEP 484&lt;/strong&gt;&lt;/a&gt; &amp;ldquo;signature type comments&amp;rdquo;, e.g. &lt;code&gt;(str, int) -&amp;gt; List[str]&lt;/code&gt;.</source>
          <target state="translated">さらに、 &lt;code&gt;mode&lt;/code&gt; が &lt;code&gt;'func_type'&lt;/code&gt; の場合、入力構文は&lt;a href=&quot;https://www.python.org/dev/peps/pep-0484&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;PEP 484の&lt;/strong&gt;&lt;/a&gt;「署名タイプコメント」に対応するように変更され &lt;code&gt;(str, int) -&amp;gt; List[str]&lt;/code&gt; 例：（str、int）-&amp;gt; List [str]）。</target>
        </trans-unit>
        <trans-unit id="30c6bed1ea7380108e2ca8ee55afe3a1b3931b43" translate="yes" xml:space="preserve">
          <source>In addition, if &lt;em&gt;first&lt;/em&gt; and &lt;em&gt;second&lt;/em&gt; are the exact same type and one of list, tuple, dict, set, frozenset or str or any type that a subclass registers with &lt;a href=&quot;#unittest.TestCase.addTypeEqualityFunc&quot;&gt;&lt;code&gt;addTypeEqualityFunc()&lt;/code&gt;&lt;/a&gt; the type-specific equality function will be called in order to generate a more useful default error message (see also the &lt;a href=&quot;#type-specific-methods&quot;&gt;list of type-specific methods&lt;/a&gt;).</source>
          <target state="translated">さらに、&lt;em&gt;1番目&lt;/em&gt;と&lt;em&gt;2番目&lt;/em&gt;がまったく同じ型であり、リスト、タプル、ディクト、セット、&lt;a href=&quot;#unittest.TestCase.addTypeEqualityFunc&quot;&gt; &lt;code&gt;addTypeEqualityFunc()&lt;/code&gt; &lt;/a&gt;セット、またはstrのいずれか、またはサブクラスがaddTypeEqualityFunc（）に登録する任意の型の場合、生成するために型固有の等式関数が呼び出されますより有用なデフォルトのエラーメッセージ（&lt;a href=&quot;#type-specific-methods&quot;&gt;型固有のメソッドのリスト&lt;/a&gt;も参照）。</target>
        </trans-unit>
        <trans-unit id="0e854c4d4c93154cb656dd7533a63f2e464a95d5" translate="yes" xml:space="preserve">
          <source>In addition, if a function argument is explicitly declared to be a pointer type (such as &lt;code&gt;POINTER(c_int)&lt;/code&gt;) in &lt;code&gt;argtypes&lt;/code&gt;, an object of the pointed type (&lt;code&gt;c_int&lt;/code&gt; in this case) can be passed to the function. ctypes will apply the required &lt;a href=&quot;#ctypes.byref&quot;&gt;&lt;code&gt;byref()&lt;/code&gt;&lt;/a&gt; conversion in this case automatically.</source>
          <target state="translated">関数の引数が明示的に（例えば、ポインタ型であると宣言されている場合に加えて、 &lt;code&gt;POINTER(c_int)&lt;/code&gt; で） &lt;code&gt;argtypes&lt;/code&gt; 、尖ったタイプ（のオブジェクト &lt;code&gt;c_int&lt;/code&gt; のこのケースでは）関数に渡すことができます。この場合、ctypesは必要な&lt;a href=&quot;#ctypes.byref&quot;&gt; &lt;code&gt;byref()&lt;/code&gt; &lt;/a&gt;変換を自動的に適用します。</target>
        </trans-unit>
        <trans-unit id="be2d0ea0907cf041df70ca4f4e655493e7b46100" translate="yes" xml:space="preserve">
          <source>In addition, if proxy settings are detected (for example, when a &lt;code&gt;*_proxy&lt;/code&gt; environment variable like &lt;code id=&quot;index-0&quot;&gt;http_proxy&lt;/code&gt; is set), &lt;a href=&quot;#urllib.request.ProxyHandler&quot;&gt;&lt;code&gt;ProxyHandler&lt;/code&gt;&lt;/a&gt; is default installed and makes sure the requests are handled through the proxy.</source>
          <target state="translated">さらに、プロキシ設定が検出された場合（たとえば、 &lt;code id=&quot;index-0&quot;&gt;http_proxy&lt;/code&gt; などの &lt;code&gt;*_proxy&lt;/code&gt; 環境変数が設定されている場合）、&lt;a href=&quot;#urllib.request.ProxyHandler&quot;&gt; &lt;code&gt;ProxyHandler&lt;/code&gt; &lt;/a&gt;がデフォルトでインストールされ、リクエストがプロキシを介して処理されるようにします。</target>
        </trans-unit>
        <trans-unit id="7b6bed6910e60de13a0aa73a3eceff08d688367d" translate="yes" xml:space="preserve">
          <source>In addition, the &lt;a href=&quot;#string.Formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt; defines a number of methods that are intended to be replaced by subclasses:</source>
          <target state="translated">さらに、&lt;a href=&quot;#string.Formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt;は、サブクラスで置き換えることを目的としたいくつかのメソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="c9ff53ab4ada69f7c64d6901e8e9786692449da2" translate="yes" xml:space="preserve">
          <source>In addition, the Python DOM interface requires that some additional support is provided to allow &lt;code&gt;NodeList&lt;/code&gt; objects to be used as Python sequences. All &lt;code&gt;NodeList&lt;/code&gt; implementations must include support for &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__len__&quot;&gt;&lt;code&gt;__len__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getitem__&quot;&gt;&lt;code&gt;__getitem__()&lt;/code&gt;&lt;/a&gt;; this allows iteration over the &lt;code&gt;NodeList&lt;/code&gt; in &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; statements and proper support for the &lt;a href=&quot;functions#len&quot;&gt;&lt;code&gt;len()&lt;/code&gt;&lt;/a&gt; built-in function.</source>
          <target state="translated">さらに、Python DOMインターフェースでは、 &lt;code&gt;NodeList&lt;/code&gt; オブジェクトをPythonシーケンスとして使用できるようにするために、いくつかの追加サポートが必要です。すべての &lt;code&gt;NodeList&lt;/code&gt; 実装には、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__len__&quot;&gt; &lt;code&gt;__len__()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getitem__&quot;&gt; &lt;code&gt;__getitem__()&lt;/code&gt; &lt;/a&gt;サポートが含まれている必要があります。これにより、&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#for&quot;&gt; &lt;code&gt;for&lt;/code&gt; &lt;/a&gt;ステートメントでの &lt;code&gt;NodeList&lt;/code&gt; の反復と、&lt;a href=&quot;functions#len&quot;&gt; &lt;code&gt;len()&lt;/code&gt; &lt;/a&gt;組み込み関数の適切なサポートが可能になります。</target>
        </trans-unit>
        <trans-unit id="d01bd464654d85025080875761ac5e61133f11b9" translate="yes" xml:space="preserve">
          <source>In addition, the following constants are defined:</source>
          <target state="translated">また、以下のような定数が定義されています。</target>
        </trans-unit>
        <trans-unit id="b6828d60770f39f7550e18f2180b31c38e1ba2b8" translate="yes" xml:space="preserve">
          <source>In addition, the following error handler is specific to the given codecs:</source>
          <target state="translated">さらに、以下のエラーハンドラは、与えられたコーデックに固有のものである。</target>
        </trans-unit>
        <trans-unit id="a7d6c3e3ae1f40f0b841f0ae9fa2ce8b4b2c827e" translate="yes" xml:space="preserve">
          <source>In addition, the following methods unpack strings, bytes, and opaque data:</source>
          <target state="translated">また、以下のメソッドは、文字列、バイト、不透明なデータを展開します。</target>
        </trans-unit>
        <trans-unit id="8f79591ef67ae18b0ee2f6ad572507855d4aebe8" translate="yes" xml:space="preserve">
          <source>In addition, the module exposes the following constant:</source>
          <target state="translated">さらに、モジュールは以下の定数を公開しています。</target>
        </trans-unit>
        <trans-unit id="7202589f315636dd521931132570107c0e2975e5" translate="yes" xml:space="preserve">
          <source>In addition, the module implements a &amp;ldquo;simple&amp;rdquo;</source>
          <target state="translated">さらに、モジュールは「シンプル」な</target>
        </trans-unit>
        <trans-unit id="65768f8c8e36ecf98d8bfdf5c170282437244a45" translate="yes" xml:space="preserve">
          <source>In addition, the replacements using &lt;a href=&quot;#subprocess.check_output&quot;&gt;&lt;code&gt;check_output()&lt;/code&gt;&lt;/a&gt; will fail with a &lt;a href=&quot;#subprocess.CalledProcessError&quot;&gt;&lt;code&gt;CalledProcessError&lt;/code&gt;&lt;/a&gt; if the requested operation produces a non-zero return code. The output is still available as the &lt;a href=&quot;#subprocess.CalledProcessError.output&quot;&gt;&lt;code&gt;output&lt;/code&gt;&lt;/a&gt; attribute of the raised exception.</source>
          <target state="translated">さらに、要求された操作がゼロ以外の戻りコードを生成した場合、&lt;a href=&quot;#subprocess.check_output&quot;&gt; &lt;code&gt;check_output()&lt;/code&gt; &lt;/a&gt;を使用した置換は&lt;a href=&quot;#subprocess.CalledProcessError&quot;&gt; &lt;code&gt;CalledProcessError&lt;/code&gt; で&lt;/a&gt;失敗します。出力は、発生した例外の&lt;a href=&quot;#subprocess.CalledProcessError.output&quot;&gt; &lt;code&gt;output&lt;/code&gt; &lt;/a&gt;属性として引き続き使用できます。</target>
        </trans-unit>
        <trans-unit id="24d6f5e76f333b5e2721aafc94f1e5f93dcadd61" translate="yes" xml:space="preserve">
          <source>In addition, those methods can raise &lt;a href=&quot;exceptions#BlockingIOError&quot;&gt;&lt;code&gt;BlockingIOError&lt;/code&gt;&lt;/a&gt; if the underlying raw stream is in non-blocking mode and cannot take or give enough data; unlike their &lt;a href=&quot;#io.RawIOBase&quot;&gt;&lt;code&gt;RawIOBase&lt;/code&gt;&lt;/a&gt; counterparts, they will never return &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">さらに、これらのメソッドは、基になるrawストリームが非ブロッキングモードであり、十分なデータを取得または提供できない場合に、&lt;a href=&quot;exceptions#BlockingIOError&quot;&gt; &lt;code&gt;BlockingIOError&lt;/code&gt; &lt;/a&gt;を発生させる可能性があります。&lt;a href=&quot;#io.RawIOBase&quot;&gt; &lt;code&gt;RawIOBase&lt;/code&gt; &lt;/a&gt;とは異なり、 &lt;code&gt;None&lt;/code&gt; を返すことはありません。</target>
        </trans-unit>
        <trans-unit id="e0c8203792cc7837023ccc2f6c27be6b401948da" translate="yes" xml:space="preserve">
          <source>In all but the last case, behaviour is as for the &lt;a href=&quot;#fcntl.fcntl&quot;&gt;&lt;code&gt;fcntl()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">最後の場合を除いて、動作は&lt;a href=&quot;#fcntl.fcntl&quot;&gt; &lt;code&gt;fcntl()&lt;/code&gt; &lt;/a&gt;関数の場合と同じです。</target>
        </trans-unit>
        <trans-unit id="692d29dfab8ab67219a17ecaca49c353f09b7b11" translate="yes" xml:space="preserve">
          <source>In all cases, if the optional parts are omitted, the code is executed in the current scope. If only &lt;em&gt;globals&lt;/em&gt; is provided, it must be a dictionary (and not a subclass of dictionary), which will be used for both the global and the local variables. If &lt;em&gt;globals&lt;/em&gt; and &lt;em&gt;locals&lt;/em&gt; are given, they are used for the global and local variables, respectively. If provided, &lt;em&gt;locals&lt;/em&gt; can be any mapping object. Remember that at module level, globals and locals are the same dictionary. If exec gets two separate objects as &lt;em&gt;globals&lt;/em&gt; and &lt;em&gt;locals&lt;/em&gt;, the code will be executed as if it were embedded in a class definition.</source>
          <target state="translated">すべての場合で、オプションのパーツが省略されている場合、コードは現在のスコープで実行されます。&lt;em&gt;グローバル&lt;/em&gt;のみが提供される場合、それはディクショナリーでなければならず（ディクショナリーのサブクラスではない）、これはグローバル変数とローカル変数の両方に使用されます。場合は&lt;em&gt;グローバル&lt;/em&gt;と&lt;em&gt;地元の人々が&lt;/em&gt;与えられ、彼らはそれぞれ、グローバルとローカル変数のために使用されています。提供される場合、&lt;em&gt;ローカル&lt;/em&gt;は任意のマッピングオブジェクトにすることができます。モジュールレベルでは、グローバルとローカルは同じ辞書です。 execが2つの個別のオブジェクトを&lt;em&gt;globals&lt;/em&gt;と&lt;em&gt;locals&lt;/em&gt;として取得した場合、コードはクラス定義に埋め込まれているかのように実行されます。</target>
        </trans-unit>
        <trans-unit id="e125a1f4b01ec045b13c222789290bf79d3655aa" translate="yes" xml:space="preserve">
          <source>In an editor, import statements have no effect until one runs the file. One might want to run a file after writing the import statements at the top, or immediately run an existing file before editing.</source>
          <target state="translated">エディタでは、インポート文はファイルを実行するまで何の効果もありません。上部にインポート文を書いた後にファイルを実行したり、編集する前に既存のファイルをすぐに実行したりしたい場合があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="7585fd505655ba1d8efec7b44c9872a4847511d0" translate="yes" xml:space="preserve">
          <source>In any case, the parameter value (either the returned string, or the &lt;code&gt;VALUE&lt;/code&gt; item in the 3-tuple) is always unquoted, unless &lt;em&gt;unquote&lt;/em&gt; is set to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">いずれの場合も、&lt;em&gt;unquote&lt;/em&gt;が &lt;code&gt;False&lt;/code&gt; に設定されていない限り、パラメーター値（返される文字列、または3タプルの &lt;code&gt;VALUE&lt;/code&gt; アイテム）は常に引用符で囲まれてい&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="1ea5e474a620a942ee44b6caa68731405ccc53b7" translate="yes" xml:space="preserve">
          <source>In asyncio, child processes are created with &lt;a href=&quot;asyncio-subprocess#asyncio.create_subprocess_exec&quot;&gt;&lt;code&gt;create_subprocess_exec()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;asyncio-eventloop#asyncio.loop.subprocess_exec&quot;&gt;&lt;code&gt;loop.subprocess_exec()&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="translated">asyncioでは、子プロセスは&lt;a href=&quot;asyncio-subprocess#asyncio.create_subprocess_exec&quot;&gt; &lt;code&gt;create_subprocess_exec()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;asyncio-eventloop#asyncio.loop.subprocess_exec&quot;&gt; &lt;code&gt;loop.subprocess_exec()&lt;/code&gt; &lt;/a&gt;関数で作成されます。</target>
        </trans-unit>
        <trans-unit id="ee9c6189bdb6109a3314f3a6fa2e8324565b928c" translate="yes" xml:space="preserve">
          <source>In calls to &lt;a href=&quot;#time.mktime&quot;&gt;&lt;code&gt;mktime()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;tm_isdst&lt;/code&gt; may be set to 1 when daylight savings time is in effect, and 0 when it is not. A value of -1 indicates that this is not known, and will usually result in the correct state being filled in.</source>
          <target state="translated">&lt;a href=&quot;#time.mktime&quot;&gt; &lt;code&gt;mktime()&lt;/code&gt; の&lt;/a&gt;呼び出しでは、 &lt;code&gt;tm_isdst&lt;/code&gt; が有効な場合はtm_isdstが1に設定され、そうでない場合は0に設定されます。値-1はこれが不明であることを示し、通常は正しい状態が入力されます。</target>
        </trans-unit>
        <trans-unit id="bc48b1dca0b1da787a928b9dd93dc589bfde5754" translate="yes" xml:space="preserve">
          <source>In cases when only the library handle is available rather than the object, accessing a function raises an auditing event &lt;code&gt;ctypes.dlsym/handle&lt;/code&gt; with arguments &lt;code&gt;handle&lt;/code&gt; (the raw library handle) and &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">オブジェクトではなくライブラリハンドルしか使用できない場合、関数にアクセスすると、引数 &lt;code&gt;handle&lt;/code&gt; （生のライブラリハンドル）と &lt;code&gt;name&lt;/code&gt; を指定した監査イベント &lt;code&gt;ctypes.dlsym/handle&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="30db5ca10a27995819aa59775e12a2ebd80f3013" translate="yes" xml:space="preserve">
          <source>In cases where canonical output is not applicable but a specific attribute order is still desirable on output, code should aim for creating the attributes directly in the desired order, to avoid perceptual mismatches for readers of the code. In cases where this is difficult to achieve, a recipe like the following can be applied prior to serialisation to enforce an order independently from the Element creation:</source>
          <target state="translated">正準出力が適用できないが、出力上で特定の属性順序がまだ望ましい場合、コードの読者にとって知覚的な不一致を避けるために、コードは望ましい順序で属性を直接作成することを目指すべきである。これを達成するのが難しい場合には、以下のようなレシピをシリアライズの前に適用して、Elementの作成とは独立した順序を強制することができます。</target>
        </trans-unit>
        <trans-unit id="9a76a269c9a0813ca8158d4ca521d20cd58a501b" translate="yes" xml:space="preserve">
          <source>In config parsers, values can span multiple lines as long as they are indented more than the key that holds them. By default parsers also let empty lines to be parts of values. At the same time, keys can be arbitrarily indented themselves to improve readability. In consequence, when configuration files get big and complex, it is easy for the user to lose track of the file structure. Take for instance:</source>
          <target state="translated">コンフィグ・パーサでは、値を保持するキーよりもインデントされている限り、値は複数行に渡ることができます。デフォルトでは、パーサは空行を値の一部にすることもできます。同時に、可読性を向上させるために、キー自体を任意にインデントすることができます。結果として、設定ファイルが大きく複雑になると、ユーザーはファイル構造を見失うことが容易になります。例えば、以下のような例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="4474384d258039b476c26e51f3dc73c8e1621318" translate="yes" xml:space="preserve">
          <source>In contrast, &lt;code&gt;NewType&lt;/code&gt; declares one type to be a &lt;em&gt;subtype&lt;/em&gt; of another. Doing &lt;code&gt;Derived = NewType('Derived', Original)&lt;/code&gt; will make the static type checker treat &lt;code&gt;Derived&lt;/code&gt; as a &lt;em&gt;subclass&lt;/em&gt; of &lt;code&gt;Original&lt;/code&gt;, which means a value of type &lt;code&gt;Original&lt;/code&gt; cannot be used in places where a value of type &lt;code&gt;Derived&lt;/code&gt; is expected. This is useful when you want to prevent logic errors with minimal runtime cost.</source>
          <target state="translated">対照的に、 &lt;code&gt;NewType&lt;/code&gt; は、ある&lt;em&gt;タイプ&lt;/em&gt;を別の&lt;em&gt;タイプのサブタイプ&lt;/em&gt;として宣言します。やっ &lt;code&gt;Derived = NewType('Derived', Original)&lt;/code&gt; 静的型チェッカー御馳走になります &lt;code&gt;Derived&lt;/code&gt; として&lt;em&gt;、サブクラス&lt;/em&gt;の &lt;code&gt;Original&lt;/code&gt; 型の値を意味し、 &lt;code&gt;Original&lt;/code&gt; 型の値の場所で使用することはできません &lt;code&gt;Derived&lt;/code&gt; 期待されているが。これは、ランタイムコストを最小限に抑えてロジックエラーを防止する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="808194d88f87f062e3f917a77c2fd08a648ff57f" translate="yes" xml:space="preserve">
          <source>In debug builds, the list of default warning filters is empty.</source>
          <target state="translated">デバッグビルドでは、デフォルトの警告フィルターのリストは空です。</target>
        </trans-unit>
        <trans-unit id="acc6dc48ce98dfe1787544928804d1351131ed2d" translate="yes" xml:space="preserve">
          <source>In developing fixed-point applications, it is convenient to define functions to handle the &lt;code&gt;quantize()&lt;/code&gt; step:</source>
          <target state="translated">固定小数点アプリケーションの開発では、 &lt;code&gt;quantize()&lt;/code&gt; ステップを処理する関数を定義すると便利です。</target>
        </trans-unit>
        <trans-unit id="c977d792bc856342f19c64cada581050dd1e4694" translate="yes" xml:space="preserve">
          <source>In either case, the exception itself is always shown after any chained exceptions so that the final line of the traceback always shows the last exception that was raised.</source>
          <target state="translated">いずれの場合も、例外自体は常に連鎖した例外の後に表示されるので、トレースバックの最終行には常に最後に発生した例外が表示されます。</target>
        </trans-unit>
        <trans-unit id="22384914a04d22b7049ea2fa018ad8b0c6e7dc2b" translate="yes" xml:space="preserve">
          <source>In either case, when producing an &lt;a href=&quot;https://tools.ietf.org/html/rfc2822.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 2822&lt;/strong&gt;&lt;/a&gt;-compliant header using &lt;a href=&quot;https://tools.ietf.org/html/rfc2047.html&quot; id=&quot;index-11&quot;&gt;&lt;strong&gt;RFC 2047&lt;/strong&gt;&lt;/a&gt; rules, the string will be encoded using the output codec of the charset. If the string cannot be encoded using the output codec, a UnicodeError will be raised.</source>
          <target state="translated">どちらの場合でも、&lt;a href=&quot;https://tools.ietf.org/html/rfc2047.html&quot; id=&quot;index-11&quot;&gt;&lt;strong&gt;RFC 2047&lt;/strong&gt;&lt;/a&gt;ルールを使用して&lt;a href=&quot;https://tools.ietf.org/html/rfc2822.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 2822&lt;/strong&gt;&lt;/a&gt;準拠のヘッダーを作成する場合、文字列は文字セットの出力コーデックを使用してエンコードされます。文字列が出力コーデックを使用してエンコードできない場合、UnicodeErrorが発生します。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="245fefefdc72a1779e932cbff8e651714d2e5fec" translate="yes" xml:space="preserve">
          <source>In emergencies this method will discard any data held in the input and/or output buffers and the producer queue.</source>
          <target state="translated">緊急時には、このメソッドは、入力および/または出力バッファとプロデューサキューに保持されているすべてのデータを破棄します。</target>
        </trans-unit>
        <trans-unit id="965c8af21ae4828757fda71d55deb0166d6df2fd" translate="yes" xml:space="preserve">
          <source>In essence, a Condition object combines the functionality of an &lt;a href=&quot;#asyncio.Event&quot;&gt;&lt;code&gt;Event&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;#asyncio.Lock&quot;&gt;&lt;code&gt;Lock&lt;/code&gt;&lt;/a&gt;. It is possible to have multiple Condition objects share one Lock, which allows coordinating exclusive access to a shared resource between different tasks interested in particular states of that shared resource.</source>
          <target state="translated">本質的に、Conditionオブジェクトは、&lt;a href=&quot;#asyncio.Event&quot;&gt; &lt;code&gt;Event&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#asyncio.Lock&quot;&gt; &lt;code&gt;Lock&lt;/code&gt; の&lt;/a&gt;機能を組み合わせたものです。複数のConditionオブジェクトで1つのロックを共有することが可能です。これにより、共有リソースの特定の状態に関係する異なるタスク間で共有リソースへの排他的アクセスを調整できます。</target>
        </trans-unit>
        <trans-unit id="aab7997c363058025f4902dd79fa90e9d4f7cc8a" translate="yes" xml:space="preserve">
          <source>In fact, the above algorithm is first tried for methods named &lt;code&gt;default_open()&lt;/code&gt;. If all such methods return &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, the algorithm is repeated for methods named like &lt;code&gt;&amp;lt;protocol&amp;gt;_open()&lt;/code&gt;. If all such methods return &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, the algorithm is repeated for methods named &lt;code&gt;unknown_open()&lt;/code&gt;.</source>
          <target state="translated">実際、上記のアルゴリズムは &lt;code&gt;default_open()&lt;/code&gt; という名前のメソッドで最初に試行されます。そのようなすべてのメソッドが&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; を&lt;/a&gt;返す場合、アルゴリズムは &lt;code&gt;&amp;lt;protocol&amp;gt;_open()&lt;/code&gt; のような名前のメソッドに対して繰り返されます。そのようなすべてのメソッドが&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; を&lt;/a&gt;返す場合、アルゴリズムは &lt;code&gt;unknown_open()&lt;/code&gt; という名前のメソッドに対して繰り返されます。</target>
        </trans-unit>
        <trans-unit id="26db7d03f5d7b2f8484e83cc9df341e5fcb76c6d" translate="yes" xml:space="preserve">
          <source>In general, &lt;em&gt;t1&lt;/em&gt; * i == &lt;em&gt;t1&lt;/em&gt; * (i-1) + &lt;em&gt;t1&lt;/em&gt; is true. (1)</source>
          <target state="translated">一般に、&lt;em&gt;t1&lt;/em&gt; * i == &lt;em&gt;t1&lt;/em&gt; *（i-1）+ &lt;em&gt;t1&lt;/em&gt;はtrueです。（1）</target>
        </trans-unit>
        <trans-unit id="0506d07a792bdf1420c6f5ee2d8683b4bb973f20" translate="yes" xml:space="preserve">
          <source>In general, it should be the case that &lt;a href=&quot;#http.cookies.BaseCookie.value_encode&quot;&gt;&lt;code&gt;value_encode()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#http.cookies.BaseCookie.value_decode&quot;&gt;&lt;code&gt;value_decode()&lt;/code&gt;&lt;/a&gt; are inverses on the range of &lt;em&gt;value_decode&lt;/em&gt;.</source>
          <target state="translated">一般に、&lt;a href=&quot;#http.cookies.BaseCookie.value_encode&quot;&gt; &lt;code&gt;value_encode()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#http.cookies.BaseCookie.value_decode&quot;&gt; &lt;code&gt;value_decode()&lt;/code&gt; &lt;/a&gt;は、&lt;em&gt;value_decode&lt;/em&gt;の範囲の逆である&lt;em&gt;必要があり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="df0b5cf5765724139c03b2e68725a9a7fc0cadf5" translate="yes" xml:space="preserve">
          <source>In general, protocol implementations that use transport-based APIs such as &lt;a href=&quot;#asyncio.loop.create_connection&quot;&gt;&lt;code&gt;loop.create_connection()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#asyncio.loop.create_server&quot;&gt;&lt;code&gt;loop.create_server()&lt;/code&gt;&lt;/a&gt; are faster than implementations that work with sockets directly. However, there are some use cases when performance is not critical, and working with &lt;a href=&quot;socket#socket.socket&quot;&gt;&lt;code&gt;socket&lt;/code&gt;&lt;/a&gt; objects directly is more convenient.</source>
          <target state="translated">一般に、&lt;a href=&quot;#asyncio.loop.create_connection&quot;&gt; &lt;code&gt;loop.create_connection()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#asyncio.loop.create_server&quot;&gt; &lt;code&gt;loop.create_server()&lt;/code&gt; &lt;/a&gt;などのトランスポートベースのAPIを使用するプロトコル実装は、ソケットを直接操作する実装よりも高速です。ただし、パフォーマンスが重要ではないユースケースがいくつかあり、&lt;a href=&quot;socket#socket.socket&quot;&gt; &lt;code&gt;socket&lt;/code&gt; &lt;/a&gt;オブジェクトを直接操作する方が便利です。</target>
        </trans-unit>
        <trans-unit id="20cd72495b8797b1b45d990ccd4902f5c5f42a41" translate="yes" xml:space="preserve">
          <source>In general, the &lt;a href=&quot;#module-argparse&quot;&gt;&lt;code&gt;argparse&lt;/code&gt;&lt;/a&gt; module assumes that flags like &lt;code&gt;-f&lt;/code&gt; and &lt;code&gt;--bar&lt;/code&gt; indicate &lt;em&gt;optional&lt;/em&gt; arguments, which can always be omitted at the command line. To make an option &lt;em&gt;required&lt;/em&gt;, &lt;code&gt;True&lt;/code&gt; can be specified for the &lt;code&gt;required=&lt;/code&gt; keyword argument to &lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt;&lt;code&gt;add_argument()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">一般に、&lt;a href=&quot;#module-argparse&quot;&gt; &lt;code&gt;argparse&lt;/code&gt; &lt;/a&gt;モジュールは、 &lt;code&gt;-f&lt;/code&gt; や &lt;code&gt;--bar&lt;/code&gt; などのフラグが&lt;em&gt;オプションの&lt;/em&gt;引数を示していると想定しています。これは、コマンドラインでは常に省略できます。オプションを&lt;em&gt;必須にするには&lt;/em&gt;、&lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt; &lt;code&gt;add_argument()&lt;/code&gt; &lt;/a&gt; &lt;code&gt;required=&lt;/code&gt; キーワード引数に &lt;code&gt;True&lt;/code&gt; を指定できます。</target>
        </trans-unit>
        <trans-unit id="c4db8812f85eaab112b76e9bb72d0ea809a10832" translate="yes" xml:space="preserve">
          <source>In general, the LRU cache should only be used when you want to reuse previously computed values. Accordingly, it doesn&amp;rsquo;t make sense to cache functions with side-effects, functions that need to create distinct mutable objects on each call, or impure functions such as time() or random().</source>
          <target state="translated">一般に、LRUキャッシュは、以前に計算された値を再利用する場合にのみ使用してください。したがって、副作用のある関数、各呼び出しで個別の可変オブジェクトを作成する必要がある関数、またはtime（）やrandom（）などの不純な関数をキャッシュしても意味がありません。</target>
        </trans-unit>
        <trans-unit id="0855957cf96cc591654edbae97ba73e1a179c2a2" translate="yes" xml:space="preserve">
          <source>In general, this function should be preferred over &lt;a href=&quot;os#os.getlogin&quot;&gt;&lt;code&gt;os.getlogin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">一般に、この関数は&lt;a href=&quot;os#os.getlogin&quot;&gt; &lt;code&gt;os.getlogin()&lt;/code&gt; &lt;/a&gt;よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="440426040cf7cbfc6d96c968361e3b6f6f71b8cf" translate="yes" xml:space="preserve">
          <source>In general, user code should try not to depend on a specific ordering of attributes, given that the &lt;a href=&quot;https://www.w3.org/TR/xml-infoset/&quot;&gt;XML Information Set&lt;/a&gt; explicitly excludes the attribute order from conveying information. Code should be prepared to deal with any ordering on input. In cases where deterministic XML output is required, e.g. for cryptographic signing or test data sets, canonical serialisation is available with the &lt;a href=&quot;#xml.etree.ElementTree.canonicalize&quot;&gt;&lt;code&gt;canonicalize()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">一般に、&lt;a href=&quot;https://www.w3.org/TR/xml-infoset/&quot;&gt;XML&lt;/a&gt;コードセットが属性の順序を情報の伝達から明示的に除外している場合、ユーザーコードは属性の特定の順序に依存しないようにする必要があります。コードは、入力時の順序付けに対応できるように準備する必要があります。暗号署名やテストデータセットなど、確定的なXML出力が必要な場合は、&lt;a href=&quot;#xml.etree.ElementTree.canonicalize&quot;&gt; &lt;code&gt;canonicalize()&lt;/code&gt; &lt;/a&gt;関数を使用して正規シリアル化を利用できます。</target>
        </trans-unit>
        <trans-unit id="c8e833685e558fad9e6d2aed4b5edd8ed53ab53a" translate="yes" xml:space="preserve">
          <source>In general, you can pack any of the most common XDR data types by calling the appropriate &lt;code&gt;pack_type()&lt;/code&gt; method. Each method takes a single argument, the value to pack. The following simple data type packing methods are supported: &lt;code&gt;pack_uint()&lt;/code&gt;, &lt;code&gt;pack_int()&lt;/code&gt;, &lt;code&gt;pack_enum()&lt;/code&gt;, &lt;code&gt;pack_bool()&lt;/code&gt;, &lt;code&gt;pack_uhyper()&lt;/code&gt;, and &lt;code&gt;pack_hyper()&lt;/code&gt;.</source>
          <target state="translated">通常、適切な &lt;code&gt;pack_type()&lt;/code&gt; メソッドを呼び出すことにより、最も一般的なXDRデータ型をパックできます。各メソッドは、1つの引数、つまりパックする値を取ります。次の単純なデータ型のパッキングメソッドがサポートされています： &lt;code&gt;pack_uint()&lt;/code&gt; 、 &lt;code&gt;pack_int()&lt;/code&gt; 、 &lt;code&gt;pack_enum()&lt;/code&gt; 、 &lt;code&gt;pack_bool()&lt;/code&gt; 、 &lt;code&gt;pack_uhyper()&lt;/code&gt; 、および &lt;code&gt;pack_hyper()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7051fb77a6d138d8bb42933ac13b4fab45cc061e" translate="yes" xml:space="preserve">
          <source>In general, you will want to use the &lt;a href=&quot;email#module-email&quot;&gt;&lt;code&gt;email&lt;/code&gt;&lt;/a&gt; package&amp;rsquo;s features to construct an email message, which you can then send via &lt;a href=&quot;#smtplib.SMTP.send_message&quot;&gt;&lt;code&gt;send_message()&lt;/code&gt;&lt;/a&gt;; see &lt;a href=&quot;email.examples#email-examples&quot;&gt;email: Examples&lt;/a&gt;.</source>
          <target state="translated">一般に、&lt;a href=&quot;email#module-email&quot;&gt; &lt;code&gt;email&lt;/code&gt; &lt;/a&gt;パッケージの機能を使用して電子メールメッセージを作成し、それを&lt;a href=&quot;#smtplib.SMTP.send_message&quot;&gt; &lt;code&gt;send_message()&lt;/code&gt; を&lt;/a&gt;介して送信できます。&lt;a href=&quot;email.examples#email-examples&quot;&gt;電子メール：例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="840dd19adeba7204bf237688be99f304d742eb60" translate="yes" xml:space="preserve">
          <source>In its basic form, &lt;a href=&quot;#module-pprint&quot;&gt;&lt;code&gt;pprint()&lt;/code&gt;&lt;/a&gt; shows the whole object:</source>
          <target state="translated">基本的な形式では、&lt;a href=&quot;#module-pprint&quot;&gt; &lt;code&gt;pprint()&lt;/code&gt; &lt;/a&gt;はオブジェクト全体を表示します。</target>
        </trans-unit>
        <trans-unit id="70cdc658f4f5ab332fd8069815a9324e25e35d83" translate="yes" xml:space="preserve">
          <source>In less formal terms, the replacement field can start with a &lt;em&gt;field_name&lt;/em&gt; that specifies the object whose value is to be formatted and inserted into the output instead of the replacement field. The &lt;em&gt;field_name&lt;/em&gt; is optionally followed by a &lt;em&gt;conversion&lt;/em&gt; field, which is preceded by an exclamation point &lt;code&gt;'!'&lt;/code&gt;, and a &lt;em&gt;format_spec&lt;/em&gt;, which is preceded by a colon &lt;code&gt;':'&lt;/code&gt;. These specify a non-default format for the replacement value.</source>
          <target state="translated">あまり正式ではありませんが、置換フィールドは、値がフォーマットされ、置換フィールドの代わりに出力に挿入されるオブジェクトを指定する&lt;em&gt;field_name&lt;/em&gt;で開始できます。オプションで、&lt;em&gt;field_nameの&lt;/em&gt;後には感嘆符 &lt;code&gt;'!'&lt;/code&gt; が前に付いた&lt;em&gt;変換&lt;/em&gt;フィールドが続きます。、およびコロン &lt;code&gt;':'&lt;/code&gt; が前に付く&lt;em&gt;format_spec&lt;/em&gt;。これらは、置換値のデフォルト以外のフォーマットを指定します。</target>
        </trans-unit>
        <trans-unit id="207eed5cab33c7fd44f50216fdcd9b7ae0089e35" translate="yes" xml:space="preserve">
          <source>In less ideal cases, applications can be checked for use of deprecated interfaces by passing &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-w&quot;&gt;&lt;code&gt;-Wd&lt;/code&gt;&lt;/a&gt; to the Python interpreter (this is shorthand for &lt;code&gt;-W default&lt;/code&gt;) or setting &lt;code&gt;PYTHONWARNINGS=default&lt;/code&gt; in the environment. This enables default handling for all warnings, including those that are ignored by default. To change what action is taken for encountered warnings you can change what argument is passed to &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-w&quot;&gt;&lt;code&gt;-W&lt;/code&gt;&lt;/a&gt; (e.g. &lt;code&gt;-W error&lt;/code&gt;). See the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-w&quot;&gt;&lt;code&gt;-W&lt;/code&gt;&lt;/a&gt; flag for more details on what is possible.</source>
          <target state="translated">理想的ではないケースでは、Pythonインタープリターに&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-w&quot;&gt; &lt;code&gt;-Wd&lt;/code&gt; &lt;/a&gt;を渡すか（これは &lt;code&gt;-W default&lt;/code&gt; の省略形です）、または環境で &lt;code&gt;PYTHONWARNINGS=default&lt;/code&gt; を設定することにより、非推奨のインターフェースの使用についてアプリケーションをチェックできます。これにより、デフォルトで無視されるものも含め、すべての警告のデフォルト処理が有効になります。発生した警告に対して実行するアクションを変更するには、&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-w&quot;&gt; &lt;code&gt;-W&lt;/code&gt; に&lt;/a&gt;渡す引数を変更します（例： &lt;code&gt;-W error&lt;/code&gt; ）。可能なことの詳細については、&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-w&quot;&gt; &lt;code&gt;-W&lt;/code&gt; &lt;/a&gt;フラグを参照してください。</target>
        </trans-unit>
        <trans-unit id="534991bf3a76b961bedcef085ae867583416a5d2" translate="yes" xml:space="preserve">
          <source>In many cases you will just be able to add &lt;code&gt;autospec=True&lt;/code&gt; to your existing &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; calls and then be protected against bugs due to typos and api changes.</source>
          <target state="translated">多くの場合、既存の&lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt;呼び出しに &lt;code&gt;autospec=True&lt;/code&gt; を追加するだけで、タイプミスやAPIの変更によるバグから保護できます。</target>
        </trans-unit>
        <trans-unit id="cd8b6f5d72094bed2a418a171229c3a3461791a6" translate="yes" xml:space="preserve">
          <source>In many use-cases one doesn&amp;rsquo;t care what the actual value of an enumeration is. There are several ways to define this type of simple enumeration:</source>
          <target state="translated">多くのユースケースでは、列挙の実際の値が何であるかを気にしません。このタイプの単純な列挙を定義するには、いくつかの方法があります。</target>
        </trans-unit>
        <trans-unit id="683dda921eb9dde69c65282fd8a1442adc4883df" translate="yes" xml:space="preserve">
          <source>In most cases a copy-and-paste of an interactive console session works fine, but doctest isn&amp;rsquo;t trying to do an exact emulation of any specific Python shell.</source>
          <target state="translated">ほとんどの場合、インタラクティブコンソールセッションのコピーアンドペーストは問題なく機能しますが、doctestは特定のPythonシェルの正確なエミュレーションを実行しようとはしていません。</target>
        </trans-unit>
        <trans-unit id="3c95379866d99798cdc6b44f569e45b47b03caff" translate="yes" xml:space="preserve">
          <source>In most cases, end users of Python shouldn&amp;rsquo;t need to invoke this module directly (as &lt;code&gt;pip&lt;/code&gt; should be bootstrapped by default), but it may be needed if installing &lt;code&gt;pip&lt;/code&gt; was skipped when installing Python (or when creating a virtual environment) or after explicitly uninstalling &lt;code&gt;pip&lt;/code&gt;.</source>
          <target state="translated">ほとんどの場合、Pythonのエンドユーザーはこのモジュールを直接呼び出す必要はありません（デフォルトで &lt;code&gt;pip&lt;/code&gt; をブートストラップする必要があるため）が、Pythonのインストール時（または仮想環境の作成時）または後に &lt;code&gt;pip&lt;/code&gt; のインストールをスキップした場合に必要になることがあります。明示的に &lt;code&gt;pip&lt;/code&gt; をアンインストールします。</target>
        </trans-unit>
        <trans-unit id="976b8e0f0142bf68fb963efdbb1f64f443c3a2d4" translate="yes" xml:space="preserve">
          <source>In most cases, no additional code is needed to make instances picklable. By default, pickle will retrieve the class and the attributes of an instance via introspection. When a class instance is unpickled, its &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt; method is usually &lt;em&gt;not&lt;/em&gt; invoked. The default behaviour first creates an uninitialized instance and then restores the saved attributes. The following code shows an implementation of this behaviour:</source>
          <target state="translated">ほとんどの場合、インスタンスをピクル可能にするために追加のコードは必要ありません。デフォルトでは、pickleはイントロスペクションを介してインスタンスのクラスと属性を取得します。クラスインスタンスがunpickledされるとき、その&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt;メソッドは通常呼び出され&lt;em&gt;ません&lt;/em&gt;。デフォルトの動作では、最初に初期化されていないインスタンスが作成され、次に保存された属性が復元されます。次のコードは、この動作の実装を示しています。</target>
        </trans-unit>
        <trans-unit id="4529cbb146eb6065739aafbd505c95e547aa3ac8" translate="yes" xml:space="preserve">
          <source>In most coding situations, strings are translated where they are coded. Occasionally however, you need to mark strings for translation, but defer actual translation until later. A classic example is:</source>
          <target state="translated">ほとんどのコーディング状況では、文字列はコーディングされた場所で翻訳されます。しかし、時折、文字列を翻訳するためにマークしておきながら、実際の翻訳は後回しにする必要がある場合があります。典型的な例は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="c31666ba6595f7dfef709e3c800c98df8b264362" translate="yes" xml:space="preserve">
          <source>In most of the cases the syntax is similar to the old &lt;code&gt;%&lt;/code&gt;-formatting, with the addition of the &lt;code&gt;{}&lt;/code&gt; and with &lt;code&gt;:&lt;/code&gt; used instead of &lt;code&gt;%&lt;/code&gt;. For example, &lt;code&gt;'%03.2f'&lt;/code&gt; can be translated to &lt;code&gt;'{:03.2f}'&lt;/code&gt;.</source>
          <target state="translated">ほとんどの場合、構文は以前の &lt;code&gt;%&lt;/code&gt; 形式と似ていますが、 &lt;code&gt;%&lt;/code&gt; の代わりに &lt;code&gt;{}&lt;/code&gt; と &lt;code&gt;:&lt;/code&gt; が追加されています。たとえば、 &lt;code&gt;'%03.2f'&lt;/code&gt; は &lt;code&gt;'{:03.2f}'&lt;/code&gt; 変換できます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
