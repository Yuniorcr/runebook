<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="python">
    <body>
      <group id="python">
        <trans-unit id="68f4145fee7dde76afceb910165924ad14cf0d00" translate="yes" xml:space="preserve">
          <source>Message</source>
          <target state="translated">Message</target>
        </trans-unit>
        <trans-unit id="80b747cc58c65b15d89258f4e17a95d87d10f509" translate="yes" xml:space="preserve">
          <source>Message object structures can be created in one of two ways: they can be created from whole cloth by creating an &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; object, adding headers using the dictionary interface, and adding payload(s) using &lt;a href=&quot;email.message#email.message.EmailMessage.set_content&quot;&gt;&lt;code&gt;set_content()&lt;/code&gt;&lt;/a&gt; and related methods, or they can be created by parsing a serialized representation of the email message.</source>
          <target state="translated">メッセージオブジェクトの構造は、&lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; &lt;/a&gt;オブジェクトを作成し、ディクショナリインターフェースを使用してヘッダーを追加し、&lt;a href=&quot;email.message#email.message.EmailMessage.set_content&quot;&gt; &lt;code&gt;set_content()&lt;/code&gt; &lt;/a&gt;および関連メソッドを使用してペイロードを追加することで、布全体から作成できます。電子メールメッセージのシリアル化された表現を解析して作成されます。</target>
        </trans-unit>
        <trans-unit id="7e80a85b81acb5bcf8134a2999833f3f872f8a62" translate="yes" xml:space="preserve">
          <source>Message objects</source>
          <target state="translated">メッセージオブジェクト</target>
        </trans-unit>
        <trans-unit id="6bf991e7854ed942e57f7a8ae958526d710e4851" translate="yes" xml:space="preserve">
          <source>Message too long</source>
          <target state="translated">メッセージが長すぎる</target>
        </trans-unit>
        <trans-unit id="ae3fac3d770c2302e7b6a1ae541c61804b4bbb02" translate="yes" xml:space="preserve">
          <source>MessageIDHeader</source>
          <target state="translated">MessageIDHeader</target>
        </trans-unit>
        <trans-unit id="8ca731184f3581459cebf23959eca61bfdee5621" translate="yes" xml:space="preserve">
          <source>Messages in a Babyl mailbox have two sets of headers, original headers and so-called visible headers. Visible headers are typically a subset of the original headers that have been reformatted or abridged to be more attractive. Each message in a Babyl mailbox also has an accompanying list of &lt;em&gt;labels&lt;/em&gt;, or short strings that record extra information about the message, and a list of all user-defined labels found in the mailbox is kept in the Babyl options section.</source>
          <target state="translated">Babylメールボックスのメッセージには、元のヘッダーといわゆる可視ヘッダーの2つのヘッダーセットがあります。可視ヘッダーは通常、より魅力的になるように再フォーマットまたは要約された元のヘッダーのサブセットです。 Babylメールボックス内の各メッセージには、&lt;em&gt;ラベル&lt;/em&gt;に関する付随するリスト、またはメッセージに関する追加情報を記録する短い文字列もあり、メールボックスにあるすべてのユーザー定義ラベルのリストは、Babylオプションセクションに保持されます。</target>
        </trans-unit>
        <trans-unit id="1677ab0cd3601cac9f7ad62eb5f484d8b6a9b975" translate="yes" xml:space="preserve">
          <source>Messages in an mbox mailbox are stored together in a single file. The sender&amp;rsquo;s envelope address and the time of delivery are typically stored in a line beginning with &amp;ldquo;From &amp;rdquo; that is used to indicate the start of a message, though there is considerable variation in the exact format of this data among mbox implementations. Flags that indicate the state of the message, such as whether it has been read or marked as important, are typically stored in &lt;em&gt;Status&lt;/em&gt; and &lt;em&gt;X-Status&lt;/em&gt; headers.</source>
          <target state="translated">mboxメールボックス内のメッセージは、1つのファイルにまとめて保存されます。送信者のエンベロープアドレスと配信時間は通常、メッセージの開始を示すために使用される「From」で始まる行に格納されますが、mbox実装間でこのデータの正確な形式にはかなりのばらつきがあります。そのようなことが読み取りまたは重要としてマークされているかどうかなど、メッセージの状態を示すフラグは、通常に格納されている&lt;em&gt;状況&lt;/em&gt;と&lt;em&gt;X-ステータス&lt;/em&gt;ヘッダ。</target>
        </trans-unit>
        <trans-unit id="ce502b237ed2952032c06cc66fddcfdbf0466da2" translate="yes" xml:space="preserve">
          <source>Messages may be added to a &lt;a href=&quot;#mailbox.Mailbox&quot;&gt;&lt;code&gt;Mailbox&lt;/code&gt;&lt;/a&gt; instance using the set-like method &lt;a href=&quot;#mailbox.Mailbox.add&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt; and removed using a &lt;code&gt;del&lt;/code&gt; statement or the set-like methods &lt;a href=&quot;#mailbox.Mailbox.remove&quot;&gt;&lt;code&gt;remove()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#mailbox.Mailbox.discard&quot;&gt;&lt;code&gt;discard()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">メッセージは、set-likeメソッド&lt;a href=&quot;#mailbox.Mailbox.add&quot;&gt; &lt;code&gt;add()&lt;/code&gt; &lt;/a&gt;を使用して&lt;a href=&quot;#mailbox.Mailbox&quot;&gt; &lt;code&gt;Mailbox&lt;/code&gt; &lt;/a&gt;インスタンスに追加し、 &lt;code&gt;del&lt;/code&gt; ステートメントまたはset-likeメソッド&lt;a href=&quot;#mailbox.Mailbox.remove&quot;&gt; &lt;code&gt;remove()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#mailbox.Mailbox.discard&quot;&gt; &lt;code&gt;discard()&lt;/code&gt; を&lt;/a&gt;使用して削除できます。</target>
        </trans-unit>
        <trans-unit id="4b1f88ec82e011a2e8176b28aacc80eda529a767" translate="yes" xml:space="preserve">
          <source>Metaclass for defining Abstract Base Classes (ABCs).</source>
          <target state="translated">抽象基底クラス(ABC)を定義するためのメタクラス。</target>
        </trans-unit>
        <trans-unit id="a49c9e99a5c2fca29b2700a9772373e6a22ccee7" translate="yes" xml:space="preserve">
          <source>Metaclasses</source>
          <target state="translated">Metaclasses</target>
        </trans-unit>
        <trans-unit id="88306943fea7e76f9cd57cae0ea6d8b32d2e8434" translate="yes" xml:space="preserve">
          <source>Method</source>
          <target state="translated">Method</target>
        </trans-unit>
        <trans-unit id="1ad6284b73b0f911633f1c682d1bd1a0d2a1d3e3" translate="yes" xml:space="preserve">
          <source>Method Name</source>
          <target state="translated">メソッド名</target>
        </trans-unit>
        <trans-unit id="7397c74c7f3015f9c8b78018a46b8693a78d3d77" translate="yes" xml:space="preserve">
          <source>Method called immediately after the test method has been called and the result recorded. This is called before &lt;code&gt;tearDown()&lt;/code&gt;. This is called even if the test method raised an exception, so the implementation in subclasses may need to be particularly careful about checking internal state. Any exception, other than &lt;a href=&quot;exceptions#AssertionError&quot;&gt;&lt;code&gt;AssertionError&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#unittest.SkipTest&quot;&gt;&lt;code&gt;SkipTest&lt;/code&gt;&lt;/a&gt;, raised by this method will be considered an additional error rather than a test failure (thus increasing the total number of reported errors). This method will only be called if the &lt;a href=&quot;#unittest.IsolatedAsyncioTestCase.asyncSetUp&quot;&gt;&lt;code&gt;asyncSetUp()&lt;/code&gt;&lt;/a&gt; succeeds, regardless of the outcome of the test method. The default implementation does nothing.</source>
          <target state="translated">テストメソッドが呼び出され、結果が記録された直後に呼び出されるメソッド。これは &lt;code&gt;tearDown()&lt;/code&gt; の前に呼び出されます。これは、テストメソッドで例外が発生した場合でも呼び出されるため、サブクラスの実装では、内部状態のチェックに特に注意が必要になる場合があります。このメソッドによって生成された&lt;a href=&quot;exceptions#AssertionError&quot;&gt; &lt;code&gt;AssertionError&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#unittest.SkipTest&quot;&gt; &lt;code&gt;SkipTest&lt;/code&gt; &lt;/a&gt;以外の例外は、テストの失敗ではなく追加のエラーと見なされます（したがって、報告されるエラーの総数が増加します）。このメソッドは、テストメソッドの結果に関係なく、&lt;a href=&quot;#unittest.IsolatedAsyncioTestCase.asyncSetUp&quot;&gt; &lt;code&gt;asyncSetUp()&lt;/code&gt; &lt;/a&gt;が成功した場合にのみ呼び出されます。デフォルトの実装では何も行われません。</target>
        </trans-unit>
        <trans-unit id="5dbbd8f81d018eed640981cd64112d0d9e54bc10" translate="yes" xml:space="preserve">
          <source>Method called immediately after the test method has been called and the result recorded. This is called even if the test method raised an exception, so the implementation in subclasses may need to be particularly careful about checking internal state. Any exception, other than &lt;a href=&quot;exceptions#AssertionError&quot;&gt;&lt;code&gt;AssertionError&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#unittest.SkipTest&quot;&gt;&lt;code&gt;SkipTest&lt;/code&gt;&lt;/a&gt;, raised by this method will be considered an additional error rather than a test failure (thus increasing the total number of reported errors). This method will only be called if the &lt;a href=&quot;#unittest.TestCase.setUp&quot;&gt;&lt;code&gt;setUp()&lt;/code&gt;&lt;/a&gt; succeeds, regardless of the outcome of the test method. The default implementation does nothing.</source>
          <target state="translated">テストメソッドが呼び出され、結果が記録された直後に呼び出されるメソッド。これは、テストメソッドで例外が発生した場合でも呼び出されるため、サブクラスの実装では、内部状態のチェックに特に注意が必要になる場合があります。このメソッドによって生成された&lt;a href=&quot;exceptions#AssertionError&quot;&gt; &lt;code&gt;AssertionError&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#unittest.SkipTest&quot;&gt; &lt;code&gt;SkipTest&lt;/code&gt; &lt;/a&gt;以外の例外は、テストの失敗ではなく追加のエラーと見なされます（したがって、報告されるエラーの総数が増加します）。このメソッドは、テストメソッドの結果に関係なく、&lt;a href=&quot;#unittest.TestCase.setUp&quot;&gt; &lt;code&gt;setUp()&lt;/code&gt; &lt;/a&gt;が成功した場合にのみ呼び出されます。デフォルトの実装では何も行われません。</target>
        </trans-unit>
        <trans-unit id="649399ca8ea45b90bb86cca66b9e51f7b179886c" translate="yes" xml:space="preserve">
          <source>Method called on an input line when the command prefix is not recognized. If this method is not overridden, it prints an error message and returns.</source>
          <target state="translated">コマンドの接頭辞が認識されない場合に入力行で呼び出されるメソッド。このメソッドがオーバーライドされていない場合は、エラーメッセージを表示して戻ります。</target>
        </trans-unit>
        <trans-unit id="b83ae09e4143ec55d36cfc4cb6caafc420c049b4" translate="yes" xml:space="preserve">
          <source>Method called to complete an input line when no command-specific &lt;code&gt;complete_*()&lt;/code&gt; method is available. By default, it returns an empty list.</source>
          <target state="translated">コマンド固有の &lt;code&gt;complete_*()&lt;/code&gt; メソッドが使用できない場合に、入力行を完了するために呼び出されるメソッド。デフォルトでは、空のリストを返します。</target>
        </trans-unit>
        <trans-unit id="e63efa71573eeb573342934f9e04a35f636518cc" translate="yes" xml:space="preserve">
          <source>Method called to prepare the test fixture. This is called after &lt;code&gt;setUp()&lt;/code&gt;. This is called immediately before calling the test method; other than &lt;a href=&quot;exceptions#AssertionError&quot;&gt;&lt;code&gt;AssertionError&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#unittest.SkipTest&quot;&gt;&lt;code&gt;SkipTest&lt;/code&gt;&lt;/a&gt;, any exception raised by this method will be considered an error rather than a test failure. The default implementation does nothing.</source>
          <target state="translated">テストフィクスチャを準備するために呼び出されるメソッド。これは &lt;code&gt;setUp()&lt;/code&gt; の後に呼び出されます。これは、テストメソッドを呼び出す直前に呼び出されます。&lt;a href=&quot;exceptions#AssertionError&quot;&gt; &lt;code&gt;AssertionError&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#unittest.SkipTest&quot;&gt; &lt;code&gt;SkipTest&lt;/code&gt; &lt;/a&gt;以外の場合、このメソッドによって発生した例外は、テストの失敗ではなくエラーと見なされます。デフォルトの実装では何も行われません。</target>
        </trans-unit>
        <trans-unit id="8ba475e032ec26577941b02aa8180ec211fee641" translate="yes" xml:space="preserve">
          <source>Method called to prepare the test fixture. This is called immediately before calling the test method; other than &lt;a href=&quot;exceptions#AssertionError&quot;&gt;&lt;code&gt;AssertionError&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#unittest.SkipTest&quot;&gt;&lt;code&gt;SkipTest&lt;/code&gt;&lt;/a&gt;, any exception raised by this method will be considered an error rather than a test failure. The default implementation does nothing.</source>
          <target state="translated">テストフィクスチャを準備するために呼び出されるメソッド。これは、テストメソッドを呼び出す直前に呼び出されます。&lt;a href=&quot;exceptions#AssertionError&quot;&gt; &lt;code&gt;AssertionError&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#unittest.SkipTest&quot;&gt; &lt;code&gt;SkipTest&lt;/code&gt; &lt;/a&gt;以外の場合、このメソッドによって発生した例外は、テストの失敗ではなくエラーと見なされます。デフォルトの実装では何も行われません。</target>
        </trans-unit>
        <trans-unit id="37a3391d3e50f08fbc5f1dc6bfe9fb76fdbd1e6e" translate="yes" xml:space="preserve">
          <source>Method called when a processing instruction is encountered. The &lt;em&gt;data&lt;/em&gt; parameter will contain the entire processing instruction. For example, for the processing instruction &lt;code&gt;&amp;lt;?proc color='red'&amp;gt;&lt;/code&gt;, this method would be called as &lt;code&gt;handle_pi(&quot;proc color='red'&quot;)&lt;/code&gt;. It is intended to be overridden by a derived class; the base class implementation does nothing.</source>
          <target state="translated">処理命令が発生したときに呼び出されるメソッド。&lt;em&gt;データ&lt;/em&gt;パラメータは、全体の処理命令が含まれています。たとえば、処理命令 &lt;code&gt;&amp;lt;?proc color='red'&amp;gt;&lt;/code&gt; の場合、このメソッドは &lt;code&gt;handle_pi(&quot;proc color='red'&quot;)&lt;/code&gt; として呼び出されます。派生クラスによってオーバーライドされることを意図しています。基本クラスの実装は何もしません。</target>
        </trans-unit>
        <trans-unit id="0288a5f7ccd8cc496ea12f8fbcdaa51a282fa56f" translate="yes" xml:space="preserve">
          <source>Method called when an empty line is entered in response to the prompt. If this method is not overridden, it repeats the last nonempty command entered.</source>
          <target state="translated">プロンプトに応答して空行が入力されたときに呼び出されるメソッド。このメソッドがオーバーライドされていない場合、最後に入力された空でないコマンドを繰り返します。</target>
        </trans-unit>
        <trans-unit id="e24fcca75d4001a50a3952dc15cf0af185ccf066" translate="yes" xml:space="preserve">
          <source>Method of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7659f5d6aa5a918feaa57fcebe08395c1db51d9" translate="yes" xml:space="preserve">
          <source>Method representing the process&amp;rsquo;s activity.</source>
          <target state="translated">プロセスのアクティビティを表すメソッド。</target>
        </trans-unit>
        <trans-unit id="599bc23d73a1edefe369be9db61c7ca34ff8a7cb" translate="yes" xml:space="preserve">
          <source>Method representing the thread&amp;rsquo;s activity.</source>
          <target state="translated">スレッドのアクティビティを表すメソッド。</target>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="8d4aa5000379004bcc4aff6105bab534cc12d577" translate="yes" xml:space="preserve">
          <source>Methods and attributes for &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333&quot; id=&quot;index-15&quot;&gt;&lt;strong&gt;PEP 3333&lt;/strong&gt;&lt;/a&gt;&amp;rsquo;s &amp;ldquo;Optional Platform-Specific File Handling&amp;rdquo; feature:</source>
          <target state="translated">&lt;a href=&quot;https://www.python.org/dev/peps/pep-3333&quot; id=&quot;index-15&quot;&gt;&lt;strong&gt;PEP 3333&lt;/strong&gt;&lt;/a&gt;の「オプションのプラットフォーム固有のファイル処理」機能のメソッドと属性：</target>
        </trans-unit>
        <trans-unit id="0da2ffd7bd9a87acd1c5cd9576e17a1cb3b019f6" translate="yes" xml:space="preserve">
          <source>Methods and attributes for customizing exception handling:</source>
          <target state="translated">例外処理をカスタマイズするためのメソッドと属性。</target>
        </trans-unit>
        <trans-unit id="1f97bbd5be402e144dea36fabf7319751aeb1da1" translate="yes" xml:space="preserve">
          <source>Methods and properties</source>
          <target state="translated">メソッドとプロパティ</target>
        </trans-unit>
        <trans-unit id="b954e3daaa50f78aaaff2c7fa0f441c94145e8b7" translate="yes" xml:space="preserve">
          <source>Methods and their defaults:</source>
          <target state="translated">メソッドとそのデフォルト。</target>
        </trans-unit>
        <trans-unit id="7cc2af8c2f86f770582029b10e3b40de2255d2a7" translate="yes" xml:space="preserve">
          <source>Methods are functions that are called using the attribute notation. There are two flavors: built-in methods (such as &lt;code&gt;append()&lt;/code&gt; on lists) and class instance methods. Built-in methods are described with the types that support them.</source>
          <target state="translated">メソッドは、属性表記を使用して呼び出される関数です。フレーバーには、組み込みメソッド（リストの &lt;code&gt;append()&lt;/code&gt; など）とクラスインスタンスメソッドの2つがあります。組み込みメソッドは、それらをサポートする型で説明されています。</target>
        </trans-unit>
        <trans-unit id="157469193b5d41d954e73f13258439fe6beb778e" translate="yes" xml:space="preserve">
          <source>Methods described in this subsections are low-level. In regular async/await code consider using the high-level &lt;a href=&quot;asyncio-subprocess#asyncio.create_subprocess_shell&quot;&gt;&lt;code&gt;asyncio.create_subprocess_shell()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;asyncio-subprocess#asyncio.create_subprocess_exec&quot;&gt;&lt;code&gt;asyncio.create_subprocess_exec()&lt;/code&gt;&lt;/a&gt; convenience functions instead.</source>
          <target state="translated">このサブセクションで説明する方法は低レベルです。通常のasync / awaitコードでは、代わりに高レベルの&lt;a href=&quot;asyncio-subprocess#asyncio.create_subprocess_shell&quot;&gt; &lt;code&gt;asyncio.create_subprocess_shell()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;asyncio-subprocess#asyncio.create_subprocess_exec&quot;&gt; &lt;code&gt;asyncio.create_subprocess_exec()&lt;/code&gt; &lt;/a&gt;コンビニエンス関数の使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="0965a16d87bebafaef05da87be1917226fdd0b9d" translate="yes" xml:space="preserve">
          <source>Methods implemented via descriptors that also pass one of the other tests return &lt;code&gt;False&lt;/code&gt; from the &lt;a href=&quot;#inspect.ismethoddescriptor&quot;&gt;&lt;code&gt;ismethoddescriptor()&lt;/code&gt;&lt;/a&gt; test, simply because the other tests promise more &amp;ndash; you can, e.g., count on having the &lt;code&gt;__func__&lt;/code&gt; attribute (etc) when an object passes &lt;a href=&quot;#inspect.ismethod&quot;&gt;&lt;code&gt;ismethod()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">他のテストの1つにも合格する記述子を介して実装されたメソッドは、&lt;a href=&quot;#inspect.ismethoddescriptor&quot;&gt; &lt;code&gt;ismethoddescriptor()&lt;/code&gt; &lt;/a&gt;テストから &lt;code&gt;False&lt;/code&gt; を返します。これは、他のテストがより多くのことを約束しているためです。たとえば、オブジェクトが&lt;a href=&quot;#inspect.ismethod&quot;&gt; &lt;code&gt;ismethod()&lt;/code&gt; を&lt;/a&gt;渡すときに &lt;code&gt;__func__&lt;/code&gt; 属性（など）。</target>
        </trans-unit>
        <trans-unit id="e9100cdec520f2115d829aad91ecbf2d3a3c46d0" translate="yes" xml:space="preserve">
          <source>Methods in the first group (running the test) are:</source>
          <target state="translated">最初のグループ(テストを実行する)のメソッドは</target>
        </trans-unit>
        <trans-unit id="5a45ab4a3e2a82c9598ef6d35c55326d75ba801c" translate="yes" xml:space="preserve">
          <source>Methods of RawTurtle/Turtle and corresponding functions</source>
          <target state="translated">RawTurtle/タートルの方法と対応機能</target>
        </trans-unit>
        <trans-unit id="02c2ec68b20d39a2feafa7d1d898a028041eb4f1" translate="yes" xml:space="preserve">
          <source>Methods of TurtleScreen/Screen</source>
          <target state="translated">タートルスクリーン/スクリーンの方法</target>
        </trans-unit>
        <trans-unit id="020f9d7bdaf4f831aeffeaaaeea5da2050a62b4e" translate="yes" xml:space="preserve">
          <source>Methods of TurtleScreen/Screen and corresponding functions</source>
          <target state="translated">タートルスクリーン/スクリーンの方法と対応機能</target>
        </trans-unit>
        <trans-unit id="74870948cfdac56fe627ac3f9017759f080dd5ad" translate="yes" xml:space="preserve">
          <source>Methods specific to Screen</source>
          <target state="translated">スクリーン特有の方法</target>
        </trans-unit>
        <trans-unit id="ed10df094e649397ec44790d691389289e610494" translate="yes" xml:space="preserve">
          <source>Methods specific to Screen, not inherited from TurtleScreen</source>
          <target state="translated">TurtleScreenからは継承されないScreen専用のメソッド</target>
        </trans-unit>
        <trans-unit id="c659b6a8d84e8b57729160efb981e97738f69a55" translate="yes" xml:space="preserve">
          <source>Microsecond as a decimal number, zero-padded on the left.</source>
          <target state="translated">マイクロ秒を10進数にして、左にゼロパッドを入れています。</target>
        </trans-unit>
        <trans-unit id="27380d20cf0052fb068648454674c0487d921401" translate="yes" xml:space="preserve">
          <source>Mike Clarkson converted the documentation to LaTeX, and compiled the User Interface chapter of the reference manual.</source>
          <target state="translated">Mike Clarkson氏は、ドキュメントをLaTeXに変換し、リファレンスマニュアルのUser Interfaceの章をまとめました。</target>
        </trans-unit>
        <trans-unit id="27af939f79765f408e27d70736e746c0d48d9a0c" translate="yes" xml:space="preserve">
          <source>Millisecond portion of the time when the &lt;a href=&quot;#logging.LogRecord&quot;&gt;&lt;code&gt;LogRecord&lt;/code&gt;&lt;/a&gt; was created.</source>
          <target state="translated">&lt;a href=&quot;#logging.LogRecord&quot;&gt; &lt;code&gt;LogRecord&lt;/code&gt; &lt;/a&gt;が作成された時刻のミリ秒部分。</target>
        </trans-unit>
        <trans-unit id="dccbd93c0e8d8f9988adced2fe258f1e1532b0c5" translate="yes" xml:space="preserve">
          <source>MimeTypes Objects</source>
          <target state="translated">MimeTypes オブジェクト</target>
        </trans-unit>
        <trans-unit id="9efbdba622b2dadfd43fa42e2a291351db71d49c" translate="yes" xml:space="preserve">
          <source>Minimal number of days between changes</source>
          <target state="translated">変更間隔の最小日数</target>
        </trans-unit>
        <trans-unit id="10937ed4b37b67fa14b13edd3d7e271abb8fa9aa" translate="yes" xml:space="preserve">
          <source>Minimum field width (optional). If specified as an &lt;code&gt;'*'&lt;/code&gt; (asterisk), the actual width is read from the next element of the tuple in &lt;em&gt;values&lt;/em&gt;, and the object to convert comes after the minimum field width and optional precision.</source>
          <target state="translated">最小フィールド幅（オプション）。 &lt;code&gt;'*'&lt;/code&gt; （アスタリスク）として指定した場合、実際の幅は&lt;em&gt;values&lt;/em&gt;のタプルの次の要素から読み取られ、変換するオブジェクトは最小フィールド幅とオプションの精度の後に来ます。</target>
        </trans-unit>
        <trans-unit id="b823f84a7a7baed339dafffa8b2988e08ee82d18" translate="yes" xml:space="preserve">
          <source>Minimum key value</source>
          <target state="translated">最小キー値</target>
        </trans-unit>
        <trans-unit id="b9bea4e62057406a848ed5d0422b9238d8ab04ce" translate="yes" xml:space="preserve">
          <source>Minimum size in bytes</source>
          <target state="translated">最小サイズ(バイト数</target>
        </trans-unit>
        <trans-unit id="6506540f28a982451f07fe2b992f3fdcae62b53d" translate="yes" xml:space="preserve">
          <source>Minus corresponds to the unary prefix minus operator in Python.</source>
          <target state="translated">MinusはPythonの単項接頭辞マイナス演算子に相当します。</target>
        </trans-unit>
        <trans-unit id="2b6196c452bc75192cad3b9bbe7b45fccf953c66" translate="yes" xml:space="preserve">
          <source>Minute as a decimal number [00,59].</source>
          <target state="translated">10進数[00,59]での分。</target>
        </trans-unit>
        <trans-unit id="04796ca1f6aacaabf17bb7220586582c19201712" translate="yes" xml:space="preserve">
          <source>Minute as a zero-padded decimal number.</source>
          <target state="translated">分をゼロパッド10進数にしたものです。</target>
        </trans-unit>
        <trans-unit id="092f99ea11a34a8490e7a767a83a42fc45634f82" translate="yes" xml:space="preserve">
          <source>Minutes</source>
          <target state="translated">Minutes</target>
        </trans-unit>
        <trans-unit id="edb2ab561b48557288fb17a60a42f5fe203a8b9c" translate="yes" xml:space="preserve">
          <source>Minutes (zero-based)</source>
          <target state="translated">分(ゼロベース</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="e34e8783c8b5d62f8e56a6c5cad9c3189996ba14" translate="yes" xml:space="preserve">
          <source>Miscellaneous Services</source>
          <target state="translated">その他のサービス</target>
        </trans-unit>
        <trans-unit id="43274253a78afe031d6f6358c749c28e750ad3ba" translate="yes" xml:space="preserve">
          <source>Miscellaneous System Information</source>
          <target state="translated">その他のシステム情報</target>
        </trans-unit>
        <trans-unit id="2cacc40bbba670255923cac65963686bb7f6e8fa" translate="yes" xml:space="preserve">
          <source>Miscellaneous Widgets</source>
          <target state="translated">その他のウィジェット</target>
        </trans-unit>
        <trans-unit id="b80881a19ff8cf751c3f41f6a0bbae4d2fa4b957" translate="yes" xml:space="preserve">
          <source>Miscellaneous methods and attributes:</source>
          <target state="translated">その他の方法と属性。</target>
        </trans-unit>
        <trans-unit id="1be5ce0f6da11db26ce77b075f6f409fed55bed0" translate="yes" xml:space="preserve">
          <source>Mitigating round-off error with increased precision</source>
          <target state="translated">精度を上げて丸め込み誤差を軽減</target>
        </trans-unit>
        <trans-unit id="fbb183ab6d5eb981bdb6b26cfc5bc04b44dbf9ef" translate="yes" xml:space="preserve">
          <source>Mix the given &lt;em&gt;bytes&lt;/em&gt; into the SSL pseudo-random number generator. The parameter &lt;em&gt;entropy&lt;/em&gt; (a float) is a lower bound on the entropy contained in string (so you can always use &lt;code&gt;0.0&lt;/code&gt;). See &lt;a href=&quot;https://tools.ietf.org/html/rfc1750.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 1750&lt;/strong&gt;&lt;/a&gt; for more information on sources of entropy.</source>
          <target state="translated">指定された&lt;em&gt;バイト&lt;/em&gt;をSSL疑似乱数ジェネレーターに混合し&lt;em&gt;ます&lt;/em&gt;。パラメータ&lt;em&gt;entropy&lt;/em&gt;（float）は、stringに含まれるエントロピーの下限です（したがって、常に &lt;code&gt;0.0&lt;/code&gt; を使用できます）。エントロピーのソースの詳細については、&lt;a href=&quot;https://tools.ietf.org/html/rfc1750.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 1750&lt;/strong&gt;&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="08cde62b7bf975bbde5b97246a5722dd5b75c745" translate="yes" xml:space="preserve">
          <source>Mixer Device Objects</source>
          <target state="translated">ミキサーデバイスオブジェクト</target>
        </trans-unit>
        <trans-unit id="1cdbdedcba3074069f36e236c409fb7bd1ae38c6" translate="yes" xml:space="preserve">
          <source>Mixin Methods</source>
          <target state="translated">ミキシング方法</target>
        </trans-unit>
        <trans-unit id="9cb6196c924e579cfebfa9d20714ab12efb27976" translate="yes" xml:space="preserve">
          <source>Mixin Methods and Properties</source>
          <target state="translated">ミキシンのメソッドとプロパティ</target>
        </trans-unit>
        <trans-unit id="eff64571433b5d5f6c30bbfd893c2be61001c6a7" translate="yes" xml:space="preserve">
          <source>Mock Patching Methods</source>
          <target state="translated">モックパッチングの方法</target>
        </trans-unit>
        <trans-unit id="a3f6662904906028997ca7c9f0b62eded70f9d87" translate="yes" xml:space="preserve">
          <source>Mock allows you to assign functions (or other Mock instances) to magic methods and they will be called appropriately. The &lt;a href=&quot;#unittest.mock.MagicMock&quot;&gt;&lt;code&gt;MagicMock&lt;/code&gt;&lt;/a&gt; class is just a Mock variant that has all of the magic methods pre-created for you (well, all the useful ones anyway).</source>
          <target state="translated">Mockでは、関数（または他のMockインスタンス）を魔法のメソッドに割り当てることができ、それらは適切に呼び出されます。&lt;a href=&quot;#unittest.mock.MagicMock&quot;&gt; &lt;code&gt;MagicMock&lt;/code&gt; の&lt;/a&gt;クラスは（よくとにかくすべての有用なもの）あなたのための魔法のメソッドのすべてがいる事前に作成しただけでモック変異体です。</target>
        </trans-unit>
        <trans-unit id="cd40a569044d5954e317d074d7665541eb9c7c41" translate="yes" xml:space="preserve">
          <source>Mock for Method Calls on an Object</source>
          <target state="translated">オブジェクトのメソッド呼び出しのモック</target>
        </trans-unit>
        <trans-unit id="ad02912ae468a4be2e695c5d469c4a5f0380c99b" translate="yes" xml:space="preserve">
          <source>Mock has many other ways you can configure it and control its behaviour. For example the &lt;em&gt;spec&lt;/em&gt; argument configures the mock to take its specification from another object. Attempting to access attributes or methods on the mock that don&amp;rsquo;t exist on the spec will fail with an &lt;a href=&quot;exceptions#AttributeError&quot;&gt;&lt;code&gt;AttributeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Mockには、それを構成してその動作を制御する方法が他にもたくさんあります。たとえば、&lt;em&gt;spec&lt;/em&gt;引数は、別のオブジェクトから仕様を取得するようにモックを構成します。仕様に存在しないモックの属性またはメソッドにアクセスしようとすると、&lt;a href=&quot;exceptions#AttributeError&quot;&gt; &lt;code&gt;AttributeError&lt;/code&gt; で&lt;/a&gt;失敗します。</target>
        </trans-unit>
        <trans-unit id="6465c7a575090539f19523ea47c493eba308187f" translate="yes" xml:space="preserve">
          <source>Mock is very easy to use and is designed for use with &lt;a href=&quot;unittest#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt;. Mock is based on the &amp;lsquo;action -&amp;gt; assertion&amp;rsquo; pattern instead of &amp;lsquo;record -&amp;gt; replay&amp;rsquo; used by many mocking frameworks.</source>
          <target state="translated">Mockは非常に使いやすく、&lt;a href=&quot;unittest#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt;で使用するように設計されています。モックは、多くのモックフレームワークで使用されている「記録-&amp;gt;再生」ではなく、「アクション-&amp;gt;アサーション」パターンに基づいています。</target>
        </trans-unit>
        <trans-unit id="a33279ac6a1d4f11a964719fd8b938904220c3f2" translate="yes" xml:space="preserve">
          <source>Mock names and the name attribute</source>
          <target state="translated">モック名とname属性</target>
        </trans-unit>
        <trans-unit id="297d74ca0e3cf788f8845b7bffff3c689ae98bb8" translate="yes" xml:space="preserve">
          <source>Mock objects are callable. The call will return the value set as the &lt;a href=&quot;#unittest.mock.Mock.return_value&quot;&gt;&lt;code&gt;return_value&lt;/code&gt;&lt;/a&gt; attribute. The default return value is a new Mock object; it is created the first time the return value is accessed (either explicitly or by calling the Mock) - but it is stored and the same one returned each time.</source>
          <target state="translated">モックオブジェクトは呼び出し可能です。呼び出しは、&lt;a href=&quot;#unittest.mock.Mock.return_value&quot;&gt; &lt;code&gt;return_value&lt;/code&gt; &lt;/a&gt;属性として設定された値を返します。デフォルトの戻り値は新しいMockオブジェクトです。戻り値が最初にアクセスされたときに（明示的にまたはMockを呼び出すことによって）作成されますが、保存され、毎回同じものが返されます。</target>
        </trans-unit>
        <trans-unit id="f9d9cf297397c83b1c1f81d316fa2ec3e341da36" translate="yes" xml:space="preserve">
          <source>Mock objects create attributes on demand. This allows them to pretend to be objects of any type.</source>
          <target state="translated">モックオブジェクトは、必要に応じて属性を作成します。これにより、任意のタイプのオブジェクトのふりをすることができます。</target>
        </trans-unit>
        <trans-unit id="e775774d5b183cd27cc35f774581d60bd2a447c3" translate="yes" xml:space="preserve">
          <source>Mock objects that use a class or an instance as a &lt;code&gt;spec&lt;/code&gt; or &lt;code&gt;spec_set&lt;/code&gt; are able to pass &lt;a href=&quot;functions#isinstance&quot;&gt;&lt;code&gt;isinstance()&lt;/code&gt;&lt;/a&gt; tests:</source>
          <target state="translated">クラスまたはインスタンスを &lt;code&gt;spec&lt;/code&gt; または &lt;code&gt;spec_set&lt;/code&gt; として使用するモックオブジェクトは、&lt;a href=&quot;functions#isinstance&quot;&gt; &lt;code&gt;isinstance()&lt;/code&gt; &lt;/a&gt;テストに合格できます。</target>
        </trans-unit>
        <trans-unit id="f9e1deeb7a9ee5f850fe86eecbde6fcdcdde263d" translate="yes" xml:space="preserve">
          <source>Mock subclasses and their attributes</source>
          <target state="translated">モックサブクラスとその属性</target>
        </trans-unit>
        <trans-unit id="7d6354b13984c9353fd8091e3574d84d2ae7bff2" translate="yes" xml:space="preserve">
          <source>Mock supports the mocking of Python &lt;a href=&quot;#magic-methods&quot;&gt;magic methods&lt;/a&gt;. The easiest way of using magic methods is with the &lt;a href=&quot;#unittest.mock.MagicMock&quot;&gt;&lt;code&gt;MagicMock&lt;/code&gt;&lt;/a&gt; class. It allows you to do things like:</source>
          <target state="translated">モックは、Python &lt;a href=&quot;#magic-methods&quot;&gt;マジックメソッドの&lt;/a&gt;モックをサポートしています。マジックメソッドを使用する最も簡単な方法は、&lt;a href=&quot;#unittest.mock.MagicMock&quot;&gt; &lt;code&gt;MagicMock&lt;/code&gt; &lt;/a&gt;クラスを使用することです。次のようなことができます。</target>
        </trans-unit>
        <trans-unit id="442dbf157ba95db3e914bc2e408149e5cd398207" translate="yes" xml:space="preserve">
          <source>Mocking Classes</source>
          <target state="translated">モッキングクラス</target>
        </trans-unit>
        <trans-unit id="9c8d301fe549f44ad1715a27813e8f92b2397116" translate="yes" xml:space="preserve">
          <source>Mocking Magic Methods</source>
          <target state="translated">モッキングマジックの方法</target>
        </trans-unit>
        <trans-unit id="c72f61e205c323791b33c0bccba66e2eb04fbb68" translate="yes" xml:space="preserve">
          <source>Mocking Unbound Methods</source>
          <target state="translated">束縛されていない方法をモックする</target>
        </trans-unit>
        <trans-unit id="c0498faab975f9dec8b132168e6c508f7f74f956" translate="yes" xml:space="preserve">
          <source>Mocking a Generator Method</source>
          <target state="translated">ジェネレーターの方法をコケにする</target>
        </trans-unit>
        <trans-unit id="631d0520a6e791d2c5663b5421225becab5962da" translate="yes" xml:space="preserve">
          <source>Mocking a dictionary with MagicMock</source>
          <target state="translated">MagicMockで辞書をあざ笑う</target>
        </trans-unit>
        <trans-unit id="a35b06a5a88f1663407e0afcc28d593f48d020de" translate="yes" xml:space="preserve">
          <source>Mocking asynchronous context manager</source>
          <target state="translated">非同期コンテキストマネージャをモックする</target>
        </trans-unit>
        <trans-unit id="9a90be214817c7625129004dae96c161fa6d1b8f" translate="yes" xml:space="preserve">
          <source>Mocking asynchronous iterators</source>
          <target state="translated">非同期イテレータのモッキング</target>
        </trans-unit>
        <trans-unit id="21c9b59bfaaa2939d61edf0de7e54d2b77191fcb" translate="yes" xml:space="preserve">
          <source>Mocking chained calls</source>
          <target state="translated">モッキングチェーンコール</target>
        </trans-unit>
        <trans-unit id="077151c5dfce974cc6f624aaa441016501984bcd" translate="yes" xml:space="preserve">
          <source>Mocking context managers with a &lt;a href=&quot;#unittest.mock.MagicMock&quot;&gt;&lt;code&gt;MagicMock&lt;/code&gt;&lt;/a&gt; is common enough and fiddly enough that a helper function is useful.</source>
          <target state="translated">&lt;a href=&quot;#unittest.mock.MagicMock&quot;&gt; &lt;code&gt;MagicMock&lt;/code&gt; で&lt;/a&gt;コンテキストマネージャーをモックすることは、ヘルパー関数が役立つほど一般的であり、手間がかかります。</target>
        </trans-unit>
        <trans-unit id="7c7ee5cc465310c6d4c3ad7b378ba9b12a5a62d8" translate="yes" xml:space="preserve">
          <source>Mocking imports with patch.dict</source>
          <target state="translated">patch.dict でインポートをモックする</target>
        </trans-unit>
        <trans-unit id="365779533ffb4a7f946eeb0ebce48c8d4a000a5b" translate="yes" xml:space="preserve">
          <source>Mocks can also be called with arbitrary keyword arguments. These will be used to set attributes on the mock after it is created. See the &lt;a href=&quot;#unittest.mock.Mock.configure_mock&quot;&gt;&lt;code&gt;configure_mock()&lt;/code&gt;&lt;/a&gt; method for details.</source>
          <target state="translated">モックは、任意のキーワード引数で呼び出すこともできます。これらは、モックの作成後にモックの属性を設定するために使用されます。詳細については、&lt;a href=&quot;#unittest.mock.Mock.configure_mock&quot;&gt; &lt;code&gt;configure_mock()&lt;/code&gt; &lt;/a&gt;メソッドを参照してください。</target>
        </trans-unit>
        <trans-unit id="2cbdd4fc62fd73dd9af51cb0370400f47d6de4ca" translate="yes" xml:space="preserve">
          <source>Mocks created for you by &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; are automatically given names. To attach mocks that have names to a parent you use the &lt;a href=&quot;#unittest.mock.Mock.attach_mock&quot;&gt;&lt;code&gt;attach_mock()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">&lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt;によって作成されたモックには、自動的に名前が付けられます。名前を持つモックを親にアタッチするには、&lt;a href=&quot;#unittest.mock.Mock.attach_mock&quot;&gt; &lt;code&gt;attach_mock()&lt;/code&gt; &lt;/a&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="a7b93d2128e820f861fc8dfccd9f5521e89ad21f" translate="yes" xml:space="preserve">
          <source>Mode</source>
          <target state="translated">Mode</target>
        </trans-unit>
        <trans-unit id="de84d7a663bae517f4b489470b51febd30e66c30" translate="yes" xml:space="preserve">
          <source>Mode &amp;ldquo;standard&amp;rdquo; is compatible with old &lt;a href=&quot;#module-turtle&quot;&gt;&lt;code&gt;turtle&lt;/code&gt;&lt;/a&gt;. Mode &amp;ldquo;logo&amp;rdquo; is compatible with most Logo turtle graphics. Mode &amp;ldquo;world&amp;rdquo; uses user-defined &amp;ldquo;world coordinates&amp;rdquo;. &lt;strong&gt;Attention&lt;/strong&gt;: in this mode angles appear distorted if &lt;code&gt;x/y&lt;/code&gt; unit-ratio doesn&amp;rsquo;t equal 1.</source>
          <target state="translated">モード「標準」は古い&lt;a href=&quot;#module-turtle&quot;&gt; &lt;code&gt;turtle&lt;/code&gt; &lt;/a&gt;と互換性があります。モード「ロゴ」は、ほとんどのロゴカメグラフィックと互換性があります。モード「ワールド」は、ユーザー定義の「ワールド座標」を使用します。&lt;strong&gt;注意&lt;/strong&gt;：このモードでは、 &lt;code&gt;x/y&lt;/code&gt; 単位比が1に等しくない場合、角度が歪んで表示されます。</target>
        </trans-unit>
        <trans-unit id="92d399cc66de7cf367f31ade723cb8b6691c5bdf" translate="yes" xml:space="preserve">
          <source>Models which represent a series of models which follow one after the other are indicated with this model type. This is used for models such as &lt;code&gt;(A, B, C)&lt;/code&gt;.</source>
          <target state="translated">次々と続く一連のモデルを表すモデルは、このモデルタイプで示されます。これは &lt;code&gt;(A, B, C)&lt;/code&gt; などのモデルに使用されます。</target>
        </trans-unit>
        <trans-unit id="59ce22dee5a92a32f030e3b34445688bcbabd4d7" translate="yes" xml:space="preserve">
          <source>Modern Tkinter for Busy Python Developers</source>
          <target state="translated">忙しいPython開発者のためのモダンなTkinter</target>
        </trans-unit>
        <trans-unit id="59eeb274f6d5a5d8796b7fb0f22a558b81af0ba0" translate="yes" xml:space="preserve">
          <source>Modern macOS versions are fully supported.</source>
          <target state="translated">最近のmacOSのバージョンは完全にサポートされています。</target>
        </trans-unit>
        <trans-unit id="77c81a24b3232f4341cb83b7f39ce945fe4ff3fb" translate="yes" xml:space="preserve">
          <source>Modified by the user</source>
          <target state="translated">ユーザーによって変更された</target>
        </trans-unit>
        <trans-unit id="3a7ea294bf33134dce4b142b8b7182de29b978b2" translate="yes" xml:space="preserve">
          <source>Modifiers</source>
          <target state="translated">Modifiers</target>
        </trans-unit>
        <trans-unit id="32cd9ef050293cc9b2ea16140453d0cb9eba9e0e" translate="yes" xml:space="preserve">
          <source>Modifies an already registered fd. This has the same effect as &lt;code&gt;register(fd, eventmask)&lt;/code&gt;. Attempting to modify a file descriptor that was never registered causes an &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; exception with errno &lt;code&gt;ENOENT&lt;/code&gt; to be raised.</source>
          <target state="translated">すでに登録されているfdを変更します。これは、 &lt;code&gt;register(fd, eventmask)&lt;/code&gt; と同じ効果があります。登録されたことのないファイル記述子を変更しようとすると、errno &lt;code&gt;ENOENT&lt;/code&gt; の&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="6cc4f46aa243a25741c6b3f64809ea24113b97cc" translate="yes" xml:space="preserve">
          <source>Modifies the message and/or keyword arguments passed to a logging call in order to insert contextual information. This implementation takes the object passed as &lt;em&gt;extra&lt;/em&gt; to the constructor and adds it to &lt;em&gt;kwargs&lt;/em&gt; using key &amp;lsquo;extra&amp;rsquo;. The return value is a (&lt;em&gt;msg&lt;/em&gt;, &lt;em&gt;kwargs&lt;/em&gt;) tuple which has the (possibly modified) versions of the arguments passed in.</source>
          <target state="translated">コンテキスト情報を挿入するために、ロギング呼び出しに渡されるメッセージおよび/またはキーワード引数を変更します。この実装は、コンストラクターに&lt;em&gt;エクストラ&lt;/em&gt;として渡されたオブジェクトを&lt;em&gt;取得&lt;/em&gt;し、キー 'extra'を使用して&lt;em&gt;kwargsに&lt;/em&gt;追加します。戻り値は、渡された引数の（変更された可能性がある）バージョンを持つ（&lt;em&gt;msg&lt;/em&gt;、&lt;em&gt;kwargs&lt;/em&gt;）タプルです。</target>
        </trans-unit>
        <trans-unit id="32de46524638c4aca576e999a7d9c22055939413" translate="yes" xml:space="preserve">
          <source>Modify a registered file descriptor.</source>
          <target state="translated">登録されているファイルディスクリプタを変更します。</target>
        </trans-unit>
        <trans-unit id="4578c669df0697b22dfd8c519fd4e58ce7cdd60a" translate="yes" xml:space="preserve">
          <source>Modify or inquire widget state. If &lt;em&gt;statespec&lt;/em&gt; is specified, sets the widget state according to it and return a new &lt;em&gt;statespec&lt;/em&gt; indicating which flags were changed. If &lt;em&gt;statespec&lt;/em&gt; is not specified, returns the currently-enabled state flags.</source>
          <target state="translated">ウィジェットの状態を変更または照会します。&lt;em&gt;statespec&lt;/em&gt;が指定されている場合、それに応じてウィジェットの状態を設定し、変更されたフラグを示す新しい&lt;em&gt;statespec&lt;/em&gt;を返します。&lt;em&gt;statespec&lt;/em&gt;が指定されていない場合、現在有効な状態フラグを返します。</target>
        </trans-unit>
        <trans-unit id="0e86176ca1442040dd82f620317ec50cbc92d6c8" translate="yes" xml:space="preserve">
          <source>Modify the filename of a log file when rotating.</source>
          <target state="translated">回転時のログファイルのファイル名を変更します。</target>
        </trans-unit>
        <trans-unit id="bf1c865f30cbb3976816405737bd964fbc2fa0de" translate="yes" xml:space="preserve">
          <source>Modify the view, by calling &lt;code&gt;MsiViewModify()&lt;/code&gt;. &lt;em&gt;kind&lt;/em&gt; can be one of &lt;code&gt;MSIMODIFY_SEEK&lt;/code&gt;, &lt;code&gt;MSIMODIFY_REFRESH&lt;/code&gt;, &lt;code&gt;MSIMODIFY_INSERT&lt;/code&gt;, &lt;code&gt;MSIMODIFY_UPDATE&lt;/code&gt;, &lt;code&gt;MSIMODIFY_ASSIGN&lt;/code&gt;, &lt;code&gt;MSIMODIFY_REPLACE&lt;/code&gt;, &lt;code&gt;MSIMODIFY_MERGE&lt;/code&gt;, &lt;code&gt;MSIMODIFY_DELETE&lt;/code&gt;, &lt;code&gt;MSIMODIFY_INSERT_TEMPORARY&lt;/code&gt;, &lt;code&gt;MSIMODIFY_VALIDATE&lt;/code&gt;, &lt;code&gt;MSIMODIFY_VALIDATE_NEW&lt;/code&gt;, &lt;code&gt;MSIMODIFY_VALIDATE_FIELD&lt;/code&gt;, or &lt;code&gt;MSIMODIFY_VALIDATE_DELETE&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MsiViewModify()&lt;/code&gt; を呼び出して、ビューを変更します。&lt;em&gt;種類は、&lt;/em&gt;のいずれかになります &lt;code&gt;MSIMODIFY_SEEK&lt;/code&gt; 、 &lt;code&gt;MSIMODIFY_REFRESH&lt;/code&gt; 、 &lt;code&gt;MSIMODIFY_INSERT&lt;/code&gt; 、 &lt;code&gt;MSIMODIFY_UPDATE&lt;/code&gt; 、 &lt;code&gt;MSIMODIFY_ASSIGN&lt;/code&gt; 、 &lt;code&gt;MSIMODIFY_REPLACE&lt;/code&gt; 、 &lt;code&gt;MSIMODIFY_MERGE&lt;/code&gt; 、 &lt;code&gt;MSIMODIFY_DELETE&lt;/code&gt; 、 &lt;code&gt;MSIMODIFY_INSERT_TEMPORARY&lt;/code&gt; 、 &lt;code&gt;MSIMODIFY_VALIDATE&lt;/code&gt; 、 &lt;code&gt;MSIMODIFY_VALIDATE_NEW&lt;/code&gt; 、 &lt;code&gt;MSIMODIFY_VALIDATE_FIELD&lt;/code&gt; 、または &lt;code&gt;MSIMODIFY_VALIDATE_DELETE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cf8f52d6faa8b1275eba9c831dbbef1ed90879cc" translate="yes" xml:space="preserve">
          <source>Modifying an XML File</source>
          <target state="translated">XML ファイルの修正</target>
        </trans-unit>
        <trans-unit id="84c3d768a8d5770c62abdea208959d6592bb41c2" translate="yes" xml:space="preserve">
          <source>Modifying this dictionary does not affect the string environment passed on by &lt;a href=&quot;os#os.execv&quot;&gt;&lt;code&gt;execv()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;os#os.popen&quot;&gt;&lt;code&gt;popen()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;os#os.system&quot;&gt;&lt;code&gt;system()&lt;/code&gt;&lt;/a&gt;; if you need to change the environment, pass &lt;code&gt;environ&lt;/code&gt; to &lt;a href=&quot;os#os.execve&quot;&gt;&lt;code&gt;execve()&lt;/code&gt;&lt;/a&gt; or add variable assignments and export statements to the command string for &lt;a href=&quot;os#os.system&quot;&gt;&lt;code&gt;system()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;os#os.popen&quot;&gt;&lt;code&gt;popen()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この辞書を変更しても、&lt;a href=&quot;os#os.execv&quot;&gt; &lt;code&gt;execv()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;os#os.popen&quot;&gt; &lt;code&gt;popen()&lt;/code&gt; 、&lt;/a&gt;または&lt;a href=&quot;os#os.system&quot;&gt; &lt;code&gt;system()&lt;/code&gt; &lt;/a&gt;によって渡される文字列環境には影響しません。環境を変更する必要がある場合は、 &lt;code&gt;environ&lt;/code&gt; を&lt;a href=&quot;os#os.execve&quot;&gt; &lt;code&gt;execve()&lt;/code&gt; に&lt;/a&gt;渡すか、変数割り当てとエクスポートステートメントを&lt;a href=&quot;os#os.system&quot;&gt; &lt;code&gt;system()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;os#os.popen&quot;&gt; &lt;code&gt;popen()&lt;/code&gt; &lt;/a&gt;のコマンド文字列に追加します。</target>
        </trans-unit>
        <trans-unit id="978b5a43a650471c75f8350ef7774ba329f2f3fe" translate="yes" xml:space="preserve">
          <source>Module (name portion of &lt;code&gt;filename&lt;/code&gt;).</source>
          <target state="translated">モジュール（ &lt;code&gt;filename&lt;/code&gt; の名前部分）。</target>
        </trans-unit>
        <trans-unit id="b4a2aa27448f7d0da42e7887a48a75e0b25fb6eb" translate="yes" xml:space="preserve">
          <source>Module &lt;a href=&quot;#module-aifc&quot;&gt;&lt;code&gt;aifc&lt;/code&gt;&lt;/a&gt; defines the following function:</source>
          <target state="translated">モジュール&lt;a href=&quot;#module-aifc&quot;&gt; &lt;code&gt;aifc&lt;/code&gt; &lt;/a&gt;は以下の関数を定義します：</target>
        </trans-unit>
        <trans-unit id="2e90a7416ba8632b458a1755a2a52518580a6402" translate="yes" xml:space="preserve">
          <source>Module &lt;a href=&quot;site#module-site&quot;&gt;&lt;code&gt;site&lt;/code&gt;&lt;/a&gt; This describes how to use .pth files to extend &lt;a href=&quot;#sys.path&quot;&gt;&lt;code&gt;sys.path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">モジュール&lt;a href=&quot;site#module-site&quot;&gt; &lt;code&gt;site&lt;/code&gt; &lt;/a&gt;これは拡張し.pthファイルを使用する方法について説明&lt;a href=&quot;#sys.path&quot;&gt; &lt;code&gt;sys.path&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7ee83fed2e8bf53e577b314dd959ae5c55d31275" translate="yes" xml:space="preserve">
          <source>Module API</source>
          <target state="translated">モジュールAPI</target>
        </trans-unit>
        <trans-unit id="9c3f2aba6913de8da00faed8e2df2428bb1257b7" translate="yes" xml:space="preserve">
          <source>Module Attributes</source>
          <target state="translated">モジュール属性</target>
        </trans-unit>
        <trans-unit id="d4c1069b1d33fd7a5bbcf140560e3a8a4cc1d1fd" translate="yes" xml:space="preserve">
          <source>Module Contents</source>
          <target state="translated">モジュールの内容</target>
        </trans-unit>
        <trans-unit id="6395f8327bd07812babbe38b248c6564d3e3499a" translate="yes" xml:space="preserve">
          <source>Module Functions</source>
          <target state="translated">モジュール機能</target>
        </trans-unit>
        <trans-unit id="34bdda02dde5bc12bbc7235959c04177e16c821e" translate="yes" xml:space="preserve">
          <source>Module Interface</source>
          <target state="translated">モジュールインタフェース</target>
        </trans-unit>
        <trans-unit id="92fdd8d530e964e456294b900fa883ff826caa46" translate="yes" xml:space="preserve">
          <source>Module and package deprecation messages are suppressed during this import if &lt;em&gt;deprecated&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;deprecated&lt;/em&gt;が &lt;code&gt;True&lt;/code&gt; の場合、このインポート中、モジュールとパッケージの非推奨メッセージは抑制されます。</target>
        </trans-unit>
        <trans-unit id="37e90fc9b9d2ea5592629e3ac0763109ff09df33" translate="yes" xml:space="preserve">
          <source>Module and package deprecation messages are suppressed during this import if &lt;em&gt;deprecated&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;. If a module is required on a platform but optional for others, set &lt;em&gt;required_on&lt;/em&gt; to an iterable of platform prefixes which will be compared against &lt;a href=&quot;sys#sys.platform&quot;&gt;&lt;code&gt;sys.platform&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;deprecated&lt;/em&gt;が &lt;code&gt;True&lt;/code&gt; の場合、このインポート中、モジュールとパッケージの非推奨メッセージは抑制されます。モジュールがプラットフォームで必要であるが他のプラットフォームではオプションである場合、&lt;em&gt;required_on&lt;/em&gt;を&lt;a href=&quot;sys#sys.platform&quot;&gt; &lt;code&gt;sys.platform&lt;/code&gt; &lt;/a&gt;と比較されるプラットフォームの接頭辞の反復可能に設定します。</target>
        </trans-unit>
        <trans-unit id="8fb52752185bff1afa3095dd1ee054b10a8741dd" translate="yes" xml:space="preserve">
          <source>Module contents</source>
          <target state="translated">モジュールの内容</target>
        </trans-unit>
        <trans-unit id="92e9d0a965eb0a3f69212e87aeb376c3817bace5" translate="yes" xml:space="preserve">
          <source>Module docs for core modules are assumed to reside in &lt;code&gt;https://docs.python.org/X.Y/library/&lt;/code&gt; where &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; are the major and minor version numbers of the Python interpreter. This can be overridden by setting the &lt;code id=&quot;index-2&quot;&gt;PYTHONDOCS&lt;/code&gt; environment variable to a different URL or to a local directory containing the Library Reference Manual pages.</source>
          <target state="translated">コアモジュールのモジュールドキュメントは、 &lt;code&gt;https://docs.python.org/X.Y/library/&lt;/code&gt; あると想定されています &lt;code&gt;X&lt;/code&gt; と &lt;code&gt;Y&lt;/code&gt; は、Pythonインタープリターのメジャーバージョン番号とマイナーバージョン番号です。これは、 &lt;code id=&quot;index-2&quot;&gt;PYTHONDOCS&lt;/code&gt; 環境変数を別のURLまたはライブラリリファレンスマニュアルページを含むローカルディレクトリに設定することでオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="1ef1dd98e4cfd7a9708f2569eff22f5637fb8bc6" translate="yes" xml:space="preserve">
          <source>Module functions and constants</source>
          <target state="translated">モジュールの関数と定数</target>
        </trans-unit>
        <trans-unit id="9ef7884387f3e4f0b36275d92cdf793323d304a1" translate="yes" xml:space="preserve">
          <source>Module which provides function to parse and escape command lines.</source>
          <target state="translated">コマンドラインを解析したり、エスケープしたりする機能を提供するモジュールです。</target>
        </trans-unit>
        <trans-unit id="c383a8897cd1716700d1c6ce4d55ad2fcebbab29" translate="yes" xml:space="preserve">
          <source>Module-Level Attributes</source>
          <target state="translated">モジュールレベルの属性</target>
        </trans-unit>
        <trans-unit id="f6833370d46becabc41cf08b0e482dee5c655b31" translate="yes" xml:space="preserve">
          <source>Module-Level Functions</source>
          <target state="translated">モジュールレベルの機能</target>
        </trans-unit>
        <trans-unit id="72f4be7481838d35b49b8de2e9a7fee6249d8e61" translate="yes" xml:space="preserve">
          <source>Module-level decorators, classes, and functions</source>
          <target state="translated">モジュールレベルのデコレータ、クラス、関数</target>
        </trans-unit>
        <trans-unit id="0912cb95ac0d180a81219825c72ec9eb605ea300" translate="yes" xml:space="preserve">
          <source>Module: &lt;code&gt;email.mime.application&lt;/code&gt;</source>
          <target state="translated">モジュール： &lt;code&gt;email.mime.application&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cb79c7e1617398068225f2820c0c3459cc440e65" translate="yes" xml:space="preserve">
          <source>Module: &lt;code&gt;email.mime.audio&lt;/code&gt;</source>
          <target state="translated">モジュール： &lt;code&gt;email.mime.audio&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="94725cd99078c801f5574ad6d6ea78ee9a024ea3" translate="yes" xml:space="preserve">
          <source>Module: &lt;code&gt;email.mime.base&lt;/code&gt;</source>
          <target state="translated">モジュール： &lt;code&gt;email.mime.base&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2ea4be398009cc8d6de590b862d7f3009c1b810f" translate="yes" xml:space="preserve">
          <source>Module: &lt;code&gt;email.mime.image&lt;/code&gt;</source>
          <target state="translated">モジュール： &lt;code&gt;email.mime.image&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="93b775199744840d67da16eb9ccb4cd9bbae2050" translate="yes" xml:space="preserve">
          <source>Module: &lt;code&gt;email.mime.message&lt;/code&gt;</source>
          <target state="translated">モジュール： &lt;code&gt;email.mime.message&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="441e7562ed5fe7a1630841c1a22bdc73a4f3d757" translate="yes" xml:space="preserve">
          <source>Module: &lt;code&gt;email.mime.multipart&lt;/code&gt;</source>
          <target state="translated">モジュール： &lt;code&gt;email.mime.multipart&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d510569ecc8d71a91a86a65c09928a0f4ef8f5d5" translate="yes" xml:space="preserve">
          <source>Module: &lt;code&gt;email.mime.nonmultipart&lt;/code&gt;</source>
          <target state="translated">モジュール： &lt;code&gt;email.mime.nonmultipart&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="127f26a281cad66280273f6515132d982225e9cf" translate="yes" xml:space="preserve">
          <source>Module: &lt;code&gt;email.mime.text&lt;/code&gt;</source>
          <target state="translated">モジュール： &lt;code&gt;email.mime.text&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4dc7c7ee2e220614ae05c4256b05b12812ad8cf9" translate="yes" xml:space="preserve">
          <source>ModuleNotFoundError</source>
          <target state="translated">ModuleNotFoundError</target>
        </trans-unit>
        <trans-unit id="04e9462c0ff02bb9032b92abd45881a3c7e15fb7" translate="yes" xml:space="preserve">
          <source>Modules</source>
          <target state="translated">Modules</target>
        </trans-unit>
        <trans-unit id="e118e0912a01f24a429ac2012ae97cc544249d59" translate="yes" xml:space="preserve">
          <source>Modules built into the interpreter are written like this: &lt;code&gt;&amp;lt;module 'sys'
(built-in)&amp;gt;&lt;/code&gt;. If loaded from a file, they are written as &lt;code&gt;&amp;lt;module 'os' from
'/usr/local/lib/pythonX.Y/os.pyc'&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">インタープリターに組み込まれているモジュールは、 &lt;code&gt;&amp;lt;module 'sys' (built-in)&amp;gt;&lt;/code&gt; ように記述されています。ファイルからロードされた場合、それらは &lt;code&gt;&amp;lt;module 'os' from '/usr/local/lib/pythonX.Y/os.pyc'&amp;gt;&lt;/code&gt; として書き込まれます。</target>
        </trans-unit>
        <trans-unit id="1911b7883b819819b6db37c8e8e2824d20e1cc32" translate="yes" xml:space="preserve">
          <source>Modules or packages can customize how tests are loaded from them during normal test runs or test discovery by implementing a function called &lt;code&gt;load_tests&lt;/code&gt;.</source>
          <target state="translated">モジュールまたはパッケージは、 &lt;code&gt;load_tests&lt;/code&gt; と呼ばれる関数を実装することにより、通常のテスト実行またはテストディスカバリ中にそれらからテストをロードする方法をカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="87a40520b4026078c79efca77f06437b79124739" translate="yes" xml:space="preserve">
          <source>Modulo</source>
          <target state="translated">Modulo</target>
        </trans-unit>
        <trans-unit id="5d0d78dc5224fd4f6862f5f7a9fb54a486fd390b" translate="yes" xml:space="preserve">
          <source>Monitor for completion with a &lt;code&gt;for&lt;/code&gt; loop.</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; ループで完了を監視します。</target>
        </trans-unit>
        <trans-unit id="ed5abdf1184868f05915cfc662a0097b73af5db0" translate="yes" xml:space="preserve">
          <source>Monitor for completion.</source>
          <target state="translated">完成度を監視する。</target>
        </trans-unit>
        <trans-unit id="496c793822576e70e527412a984554382d2aebe7" translate="yes" xml:space="preserve">
          <source>Month (one-based)</source>
          <target state="translated">月(ワンベース</target>
        </trans-unit>
        <trans-unit id="742b33d400ddeeabce686bc1c2413ddb0c448e2a" translate="yes" xml:space="preserve">
          <source>Month as a decimal number [01,12].</source>
          <target state="translated">月を10進数で表す [01,12]。</target>
        </trans-unit>
        <trans-unit id="f2ebd646406d99068e09d2f4e14fbbffed228a7d" translate="yes" xml:space="preserve">
          <source>Month as a zero-padded decimal number.</source>
          <target state="translated">月をゼロパッド10進数にしたもの。</target>
        </trans-unit>
        <trans-unit id="4b69dcb0d93760210c273e2a1abcde796903be87" translate="yes" xml:space="preserve">
          <source>Month as locale&amp;rsquo;s abbreviated name.</source>
          <target state="translated">ロケールの省略名としての月。</target>
        </trans-unit>
        <trans-unit id="fea5423e8f5a25290885c0d0e12a775f3fd61281" translate="yes" xml:space="preserve">
          <source>Month as locale&amp;rsquo;s full name.</source>
          <target state="translated">ロケールのフルネームとしての月。</target>
        </trans-unit>
        <trans-unit id="e202399e2af6ae3d8e2fdbf89c95c2518eee70d8" translate="yes" xml:space="preserve">
          <source>More advanced customization may be achieved by overriding default values of these parser attributes. The defaults are defined on the classes, so they may be overridden by subclasses or by attribute assignment.</source>
          <target state="translated">これらのパーサ属性のデフォルト値をオーバーライドすることで、より高度なカスタマイズが可能になります。デフォルト値はクラスで定義されているので、サブクラスや属性の割り当てによってオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="76f2ac8fa6191d0a7752f0403130e23050b322b6" translate="yes" xml:space="preserve">
          <source>More complex argument matching</source>
          <target state="translated">より複雑な引数マッチング</target>
        </trans-unit>
        <trans-unit id="a4edbe5aa58310b4837dc402b6725527f1000abe" translate="yes" xml:space="preserve">
          <source>More condensed:</source>
          <target state="translated">もっと凝縮されている。</target>
        </trans-unit>
        <trans-unit id="af27293770923a34ccc5524c23d8989922e0488b" translate="yes" xml:space="preserve">
          <source>More details of &lt;code&gt;hexversion&lt;/code&gt; can be found at &lt;a href=&quot;https://docs.python.org/3.8/c-api/apiabiversion.html#apiabiversion&quot;&gt;API and ABI Versioning&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;hexversion&lt;/code&gt; の詳細については、&lt;a href=&quot;https://docs.python.org/3.8/c-api/apiabiversion.html#apiabiversion&quot;&gt;APIおよびABIバージョン管理を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="35c58ae0fd8a7e1329fa05386d5d2de6a083afbd" translate="yes" xml:space="preserve">
          <source>More drawing control</source>
          <target state="translated">より多くの描画制御</target>
        </trans-unit>
        <trans-unit id="f73f1a20168b82e8d86b3b46baab234a74659e99" translate="yes" xml:space="preserve">
          <source>More examples of working with &lt;a href=&quot;#datetime.date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#datetime.date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt;その他の例：</target>
        </trans-unit>
        <trans-unit id="bda595d7c3822cdddfd4e7f95e4ba1fe77eef18d" translate="yes" xml:space="preserve">
          <source>More information about color spaces can be found at &lt;a href=&quot;http://poynton.ca/ColorFAQ.html&quot;&gt;http://poynton.ca/ColorFAQ.html&lt;/a&gt; and &lt;a href=&quot;https://www.cambridgeincolour.com/tutorials/color-spaces.htm&quot;&gt;https://www.cambridgeincolour.com/tutorials/color-spaces.htm&lt;/a&gt;.</source>
          <target state="translated">色空間の詳細については、&lt;a href=&quot;http://poynton.ca/ColorFAQ.html&quot;&gt;http：//poynton.ca/ColorFAQ.html&lt;/a&gt;および&lt;a href=&quot;https://www.cambridgeincolour.com/tutorials/color-spaces.htm&quot;&gt;https://www.cambridgeincolour.com/tutorials/color-spaces.htmを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1cf8e91c8e08ed18b8e45a5ac7ba72687719075d" translate="yes" xml:space="preserve">
          <source>More information about this feature, including a list of recognized options, can be found in the &lt;a href=&quot;https://www.sqlite.org/uri.html&quot;&gt;SQLite URI documentation&lt;/a&gt;.</source>
          <target state="translated">認識されるオプションのリストなど、この機能の詳細については、&lt;a href=&quot;https://www.sqlite.org/uri.html&quot;&gt;SQLite URIのドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="7f7f884738e96b308c393050b48c8b8755a6d24c" translate="yes" xml:space="preserve">
          <source>More object-oriented interface to dates and times.</source>
          <target state="translated">日付や時刻をよりオブジェクト指向のインターフェイスに。</target>
        </trans-unit>
        <trans-unit id="b4302b5e109b770c6a0ea76fbd2882a8bc6db8b6" translate="yes" xml:space="preserve">
          <source>More picklability</source>
          <target state="translated">より多くの酸洗性</target>
        </trans-unit>
        <trans-unit id="0d62cf081bc641ff89c8b59069e0d5d811e8757a" translate="yes" xml:space="preserve">
          <source>More precisely, if &lt;code&gt;x&lt;/code&gt; is nonzero, then &lt;code&gt;x.bit_length()&lt;/code&gt; is the unique positive integer &lt;code&gt;k&lt;/code&gt; such that &lt;code&gt;2**(k-1) &amp;lt;= abs(x) &amp;lt; 2**k&lt;/code&gt;. Equivalently, when &lt;code&gt;abs(x)&lt;/code&gt; is small enough to have a correctly rounded logarithm, then &lt;code&gt;k = 1 + int(log(abs(x), 2))&lt;/code&gt;. If &lt;code&gt;x&lt;/code&gt; is zero, then &lt;code&gt;x.bit_length()&lt;/code&gt; returns &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">場合は、より正確には、 &lt;code&gt;x&lt;/code&gt; がゼロで、次いで &lt;code&gt;x.bit_length()&lt;/code&gt; は、ユニークな正の整数であり、 &lt;code&gt;k&lt;/code&gt; のように &lt;code&gt;2**(k-1) &amp;lt;= abs(x) &amp;lt; 2**k&lt;/code&gt; 。同様に、 &lt;code&gt;abs(x)&lt;/code&gt; が正しく丸められた対数を持つほど小さい場合、 &lt;code&gt;k = 1 + int(log(abs(x), 2))&lt;/code&gt; ます。場合 &lt;code&gt;x&lt;/code&gt; ゼロであり、その後 &lt;code&gt;x.bit_length()&lt;/code&gt; を返す &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ced1f1a5abe7721a13a8ffbf16d63ff492b8f140" translate="yes" xml:space="preserve">
          <source>More precisely, the expression &lt;code&gt;some_value is Derived(some_value)&lt;/code&gt; is always true at runtime.</source>
          <target state="translated">より正確には、式 &lt;code&gt;some_value is Derived(some_value)&lt;/code&gt; は実行時に常にtrueです。</target>
        </trans-unit>
        <trans-unit id="afcfcf646cf0d59e75aa3efa0a7dca7907775b81" translate="yes" xml:space="preserve">
          <source>More sophisticated context managers may be &amp;ldquo;reentrant&amp;rdquo;. These context managers can not only be used in multiple &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statements, but may also be used &lt;em&gt;inside&lt;/em&gt; a &lt;code&gt;with&lt;/code&gt; statement that is already using the same context manager.</source>
          <target state="translated">より洗練されたコンテキストマネージャは「再入可能」かもしれません。これらのコンテキストマネージャーは、複数の&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントで使用できるだけでなく、すでに同じコンテキストマネージャーを使用し&lt;em&gt;て&lt;/em&gt;いる &lt;code&gt;with&lt;/code&gt; ステートメント&lt;em&gt;内で&lt;/em&gt;も使用&lt;em&gt;でき&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="bec52d0bf3df1fe2b7028c4e46728b05b6585a7b" translate="yes" xml:space="preserve">
          <source>More sophisticated specification of which elements to look for is possible by using &lt;a href=&quot;#elementtree-xpath&quot;&gt;XPath&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#elementtree-xpath&quot;&gt;XPath&lt;/a&gt;を使用することで、検索する要素のより高度な指定が可能です。</target>
        </trans-unit>
        <trans-unit id="44cce591f12835a93d72e2725773defea428923d" translate="yes" xml:space="preserve">
          <source>Moreover, by subclassing a special class &lt;a href=&quot;#typing.Protocol&quot;&gt;&lt;code&gt;Protocol&lt;/code&gt;&lt;/a&gt;, a user can define new custom protocols to fully enjoy structural subtyping (see examples below).</source>
          <target state="translated">さらに、特別なクラス&lt;a href=&quot;#typing.Protocol&quot;&gt; &lt;code&gt;Protocol&lt;/code&gt; を&lt;/a&gt;サブクラス化することにより、ユーザーは新しいカスタムプロトコルを定義して、構造的なサブタイピングを完全に楽しむことができます（以下の例を参照）。</target>
        </trans-unit>
        <trans-unit id="c7c6427f00dc397938f8e9415a2f590774699402" translate="yes" xml:space="preserve">
          <source>Moreover, if you output the 0&amp;rsquo;th item on disk and get an input which may not fit in the current tournament (because the value &amp;ldquo;wins&amp;rdquo; over the last output value), it cannot fit in the heap, so the size of the heap decreases. The freed memory could be cleverly reused immediately for progressively building a second heap, which grows at exactly the same rate the first heap is melting. When the first heap completely vanishes, you switch heaps and start a new run. Clever and quite effective!</source>
          <target state="translated">さらに、ディスク上の0番目のアイテムを出力し、現在のトーナメントに収まらない可能性がある入力を取得した場合（値が最後の出力値よりも「勝つ」ため）、ヒープに収まらないため、ヒープが減少します。解放されたメモリは、2番目のヒープを徐々に構築するためにすぐに再利用できます。2番目のヒープは、最初のヒープが溶けているのとまったく同じ速度で成長します。最初のヒープが完全に消えたら、ヒープを切り替えて新しい実行を開始します。賢くて非常に効果的です！</target>
        </trans-unit>
        <trans-unit id="223a97db4a13581b9f40926ba9bf06631a533426" translate="yes" xml:space="preserve">
          <source>Morsel Objects</source>
          <target state="translated">モーゼルオブジェクト</target>
        </trans-unit>
        <trans-unit id="aab9d541f9999319a8925c74373dfaf9120edff4" translate="yes" xml:space="preserve">
          <source>Morsels are dictionary-like objects, whose set of keys is constant &amp;mdash; the valid &lt;a href=&quot;https://tools.ietf.org/html/rfc2109.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 2109&lt;/strong&gt;&lt;/a&gt; attributes, which are</source>
          <target state="translated">モーセルは辞書のようなオブジェクトであり、そのキーのセットは一定です&amp;mdash;有効な&lt;a href=&quot;https://tools.ietf.org/html/rfc2109.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 2109&lt;/strong&gt;&lt;/a&gt;属性は、</target>
        </trans-unit>
        <trans-unit id="12e365ba43d20a735f475457d6d67ad170f2ddc0" translate="yes" xml:space="preserve">
          <source>Most &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; actions add some value as an attribute of the object returned by &lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt;&lt;code&gt;parse_args()&lt;/code&gt;&lt;/a&gt;. The name of this attribute is determined by the &lt;code&gt;dest&lt;/code&gt; keyword argument of &lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt;&lt;code&gt;add_argument()&lt;/code&gt;&lt;/a&gt;. For positional argument actions, &lt;code&gt;dest&lt;/code&gt; is normally supplied as the first argument to &lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt;&lt;code&gt;add_argument()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">ほとんどの&lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; &lt;/a&gt;アクションは、&lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt; &lt;code&gt;parse_args()&lt;/code&gt; &lt;/a&gt;によって返されるオブジェクトの属性としていくつかの値を追加します。この属性の名前は、&lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt; &lt;code&gt;add_argument()&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;dest&lt;/code&gt; キーワード引数によって決定されます。位置引数アクションの場合、通常、 &lt;code&gt;dest&lt;/code&gt; は&lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt; &lt;code&gt;add_argument()&lt;/code&gt; の&lt;/a&gt;最初の引数として提供されます。</target>
        </trans-unit>
        <trans-unit id="0b8a1ba8e18b5f5019a5d4312dc314b8b2c9954f" translate="yes" xml:space="preserve">
          <source>Most &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; subclasses should be able to inherit the default &lt;a href=&quot;#datetime.tzinfo.fromutc&quot;&gt;&lt;code&gt;fromutc()&lt;/code&gt;&lt;/a&gt; implementation without problems. It&amp;rsquo;s strong enough to handle fixed-offset time zones, and time zones accounting for both standard and daylight time, and the latter even if the DST transition times differ in different years. An example of a time zone the default &lt;a href=&quot;#datetime.tzinfo.fromutc&quot;&gt;&lt;code&gt;fromutc()&lt;/code&gt;&lt;/a&gt; implementation may not handle correctly in all cases is one where the standard offset (from UTC) depends on the specific date and time passed, which can happen for political reasons. The default implementations of &lt;code&gt;astimezone()&lt;/code&gt; and &lt;a href=&quot;#datetime.tzinfo.fromutc&quot;&gt;&lt;code&gt;fromutc()&lt;/code&gt;&lt;/a&gt; may not produce the result you want if the result is one of the hours straddling the moment the standard offset changes.</source>
          <target state="translated">ほとんどの&lt;a href=&quot;#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;サブクラスは、デフォルトの&lt;a href=&quot;#datetime.tzinfo.fromutc&quot;&gt; &lt;code&gt;fromutc()&lt;/code&gt; &lt;/a&gt;実装を問題なく継承できるはずです。これは、固定オフセットのタイムゾーン、および標準時間と夏時間の両方に対応するタイムゾーンを処理するのに十分な強さであり、夏時間の移行時間が異なる年でも異なる場合でも後者に​​なります。デフォルトの&lt;a href=&quot;#datetime.tzinfo.fromutc&quot;&gt; &lt;code&gt;fromutc()&lt;/code&gt; &lt;/a&gt;実装がすべてのケースで正しく処理できないタイムゾーンの例は、（UTCからの）標準オフセットが、渡された特定の日時に依存する場合です。これは、政治的な理由で発生する可能性があります。 &lt;code&gt;astimezone()&lt;/code&gt; と&lt;a href=&quot;#datetime.tzinfo.fromutc&quot;&gt; &lt;code&gt;fromutc()&lt;/code&gt; &lt;/a&gt;のデフォルトの実装では、標準オフセットが変化する瞬間にまたがる時間の1つである場合、期待する結果が得られない場合があります。</target>
        </trans-unit>
        <trans-unit id="fa3c05e44820db4266ade0ef0b637c16f15b20d4" translate="yes" xml:space="preserve">
          <source>Most &lt;a href=&quot;#ssl.SSLSocket&quot;&gt;&lt;code&gt;SSLSocket&lt;/code&gt;&lt;/a&gt; methods will raise either &lt;a href=&quot;#ssl.SSLWantWriteError&quot;&gt;&lt;code&gt;SSLWantWriteError&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#ssl.SSLWantReadError&quot;&gt;&lt;code&gt;SSLWantReadError&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;exceptions#BlockingIOError&quot;&gt;&lt;code&gt;BlockingIOError&lt;/code&gt;&lt;/a&gt; if an I/O operation would block. &lt;a href=&quot;#ssl.SSLWantReadError&quot;&gt;&lt;code&gt;SSLWantReadError&lt;/code&gt;&lt;/a&gt; will be raised if a read operation on the underlying socket is necessary, and &lt;a href=&quot;#ssl.SSLWantWriteError&quot;&gt;&lt;code&gt;SSLWantWriteError&lt;/code&gt;&lt;/a&gt; for a write operation on the underlying socket. Note that attempts to &lt;em&gt;write&lt;/em&gt; to an SSL socket may require &lt;em&gt;reading&lt;/em&gt; from the underlying socket first, and attempts to &lt;em&gt;read&lt;/em&gt; from the SSL socket may require a prior &lt;em&gt;write&lt;/em&gt; to the underlying socket.</source>
          <target state="translated">ほとんどの&lt;a href=&quot;#ssl.SSLSocket&quot;&gt; &lt;code&gt;SSLSocket&lt;/code&gt; &lt;/a&gt;メソッドは、I / O操作がブロックした場合、&lt;a href=&quot;exceptions#BlockingIOError&quot;&gt; &lt;code&gt;BlockingIOError&lt;/code&gt; &lt;/a&gt;ではなく&lt;a href=&quot;#ssl.SSLWantWriteError&quot;&gt; &lt;code&gt;SSLWantWriteError&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#ssl.SSLWantReadError&quot;&gt; &lt;code&gt;SSLWantReadError&lt;/code&gt; の&lt;/a&gt;いずれかを発生させます。基礎となるソケットでの読み取り操作が必要な場合は&lt;a href=&quot;#ssl.SSLWantReadError&quot;&gt; &lt;code&gt;SSLWantReadError&lt;/code&gt; &lt;/a&gt;が発生し、基礎となるソケットでの書き込み操作には&lt;a href=&quot;#ssl.SSLWantWriteError&quot;&gt; &lt;code&gt;SSLWantWriteError&lt;/code&gt; が発生&lt;/a&gt;します。しようとするノート&lt;em&gt;ライト&lt;/em&gt; SSLソケットには、必要とするかもしれない&lt;em&gt;読ん&lt;/em&gt;第1の下地ソケットから、とする試み&lt;em&gt;読み取る&lt;/em&gt; SSLソケットからは、従来必要とし得る&lt;em&gt;書き込み&lt;/em&gt;下層のソケットにあります。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bd522bac8b9e11ce49eeb2583e8f07839a03488c" translate="yes" xml:space="preserve">
          <source>Most &lt;a href=&quot;asyncio#module-asyncio&quot;&gt;&lt;code&gt;asyncio&lt;/code&gt;&lt;/a&gt; scheduling functions don&amp;rsquo;t allow passing keyword arguments. To do that, use &lt;a href=&quot;functools#functools.partial&quot;&gt;&lt;code&gt;functools.partial()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">ほとんどの&lt;a href=&quot;asyncio#module-asyncio&quot;&gt; &lt;code&gt;asyncio&lt;/code&gt; &lt;/a&gt;スケジューリング関数では、キーワード引数を渡すことができません。これを行うには、&lt;a href=&quot;functools#functools.partial&quot;&gt; &lt;code&gt;functools.partial()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="bd51bb63feffbfa7148f18472384cc0b94c13ee7" translate="yes" xml:space="preserve">
          <source>Most HTTP servers buffer the output from CGI scripts until the script is completed. This means that it is not possible to display a progress report on the client&amp;rsquo;s display while the script is running.</source>
          <target state="translated">ほとんどのHTTPサーバーは、CGIスクリプトからの出力を、スクリプトが完了するまでバッファリングします。つまり、スクリプトの実行中は、クライアントのディスプレイに進捗レポートを表示することはできません。</target>
        </trans-unit>
        <trans-unit id="89262a759f5c4450ccbba1d7e972a20eb9d6f62d" translate="yes" xml:space="preserve">
          <source>Most Python users will &lt;em&gt;not&lt;/em&gt; want to use this module directly, but instead use the cross-version tools maintained by the Python Packaging Authority. In particular, &lt;a href=&quot;https://setuptools.readthedocs.io/en/latest/&quot;&gt;setuptools&lt;/a&gt; is an enhanced alternative to &lt;a href=&quot;#module-distutils&quot;&gt;&lt;code&gt;distutils&lt;/code&gt;&lt;/a&gt; that provides:</source>
          <target state="translated">ほとんどのPythonユーザーはなり&lt;em&gt;ません&lt;/em&gt;、直接このモジュールを使用するが、代わりにPythonのパッケージング機関によって維持され、クロスバージョンのツールを使用します。特に、&lt;a href=&quot;https://setuptools.readthedocs.io/en/latest/&quot;&gt;setuptools&lt;/a&gt;は、以下を提供する&lt;a href=&quot;#module-distutils&quot;&gt; &lt;code&gt;distutils&lt;/code&gt; の&lt;/a&gt;拡張版です。</target>
        </trans-unit>
        <trans-unit id="b4ff9c4f943c838658554972d2715c1911832530" translate="yes" xml:space="preserve">
          <source>Most built-in types implement the following options for format specifications, although some of the formatting options are only supported by the numeric types.</source>
          <target state="translated">ほとんどの組み込み型は、書式指定のための以下のオプションを実装していますが、いくつかの書式オプションは数値型でのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="4671a5faa2bb50d6521e2b74a0ac603b3e8ea2c0" translate="yes" xml:space="preserve">
          <source>Most built-in types support a common formatting mini-language, which is described in the next section.</source>
          <target state="translated">ほとんどの組み込み型は、次のセクションで説明する共通の書式設定ミニ言語をサポートしています。</target>
        </trans-unit>
        <trans-unit id="9f333f2038f1ecde46179e5361647a36ea955c1a" translate="yes" xml:space="preserve">
          <source>Most calls to the &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; constructor will use the &lt;code&gt;description=&lt;/code&gt; keyword argument. This argument gives a brief description of what the program does and how it works. In help messages, the description is displayed between the command-line usage string and the help messages for the various arguments:</source>
          <target state="translated">&lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; &lt;/a&gt;コンストラクターへのほとんどの呼び出しは、 &lt;code&gt;description=&lt;/code&gt; キーワード引数を使用します。この引数は、プログラムの機能と動作の簡単な説明を提供します。ヘルプメッセージでは、コマンドラインの使用方法の文字列とさまざまな引数のヘルプメッセージの間に説明が表示されます。</target>
        </trans-unit>
        <trans-unit id="d721b333c77edec8818b7d94960eeed847aceea5" translate="yes" xml:space="preserve">
          <source>Most command-line options will use &lt;code&gt;-&lt;/code&gt; as the prefix, e.g. &lt;code&gt;-f/--foo&lt;/code&gt;. Parsers that need to support different or additional prefix characters, e.g. for options like &lt;code&gt;+f&lt;/code&gt; or &lt;code&gt;/foo&lt;/code&gt;, may specify them using the &lt;code&gt;prefix_chars=&lt;/code&gt; argument to the ArgumentParser constructor:</source>
          <target state="translated">ほとんどのコマンドラインオプションは、接頭辞として &lt;code&gt;-&lt;/code&gt; を使用します（例： &lt;code&gt;-f/--foo&lt;/code&gt; 。 &lt;code&gt;+f&lt;/code&gt; や &lt;code&gt;/foo&lt;/code&gt; などのオプションの場合、異なるまたは追加のプレフィックス文字をサポートする必要があるパーサーは、ArgumentParserコンストラクターの &lt;code&gt;prefix_chars=&lt;/code&gt; 引数を使用してそれらを指定できます。</target>
        </trans-unit>
        <trans-unit id="8c59d2f4304b47bbe5f9025fc2719f37eb21fc59" translate="yes" xml:space="preserve">
          <source>Most commands are available as &lt;a href=&quot;#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;tkinter.ttk#module-tkinter.ttk&quot;&gt;&lt;code&gt;tkinter.ttk&lt;/code&gt;&lt;/a&gt; classes. Change &amp;lsquo;8.6&amp;rsquo; to match the version of your Tcl/Tk installation.</source>
          <target state="translated">ほとんどのコマンドはとして用意されてい&lt;a href=&quot;#module-tkinter&quot;&gt; &lt;code&gt;tkinter&lt;/code&gt; &lt;/a&gt;か&lt;a href=&quot;tkinter.ttk#module-tkinter.ttk&quot;&gt; &lt;code&gt;tkinter.ttk&lt;/code&gt; &lt;/a&gt;クラス。 Tcl / Tkインストールのバージョンと一致するように「8.6」を変更します。</target>
        </trans-unit>
        <trans-unit id="09e1be6a3a08fdd80447facaa6e35fc4dcf067a7" translate="yes" xml:space="preserve">
          <source>Most configuration options apply to all windows or all future windows. The option items below only apply to the active window.</source>
          <target state="translated">ほとんどの設定オプションは、すべてのウィンドウまたは将来のすべてのウィンドウに適用されます。以下のオプション項目は、アクティブなウィンドウにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="5d738b94492588389087414a01d9272752be1e6c" translate="yes" xml:space="preserve">
          <source>Most context managers are written in a way that means they can only be used effectively in a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement once. These single use context managers must be created afresh each time they&amp;rsquo;re used - attempting to use them a second time will trigger an exception or otherwise not work correctly.</source>
          <target state="translated">ほとんどのコンテキストマネージャは、&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントで1回だけ有効に使用できるように記述されています。これらの使い捨てコンテキストマネージャーは、使用するたびに新しく作成する必要があります。2回目に使用しようとすると、例外がトリガーされるか、正しく機能しません。</target>
        </trans-unit>
        <trans-unit id="acd4fa21da07450f40a52f6949201b55436a1a6a" translate="yes" xml:space="preserve">
          <source>Most implementations of &lt;a href=&quot;#datetime.tzinfo.dst&quot;&gt;&lt;code&gt;dst()&lt;/code&gt;&lt;/a&gt; will probably look like one of these two:</source>
          <target state="translated">&lt;a href=&quot;#datetime.tzinfo.dst&quot;&gt; &lt;code&gt;dst()&lt;/code&gt; の&lt;/a&gt;ほとんどの実装は、おそらく次の2つのいずれかのようになります。</target>
        </trans-unit>
        <trans-unit id="aea2023d714ec31a854470fd3ecf8d9355c053c4" translate="yes" xml:space="preserve">
          <source>Most importantly, a good understanding of the Python grammar processed by the internal parser is required. For full information on the language syntax, refer to &lt;a href=&quot;https://docs.python.org/3.8/reference/index.html#reference-index&quot;&gt;The Python Language Reference&lt;/a&gt;. The parser itself is created from a grammar specification defined in the file &lt;code&gt;Grammar/Grammar&lt;/code&gt; in the standard Python distribution. The parse trees stored in the ST objects created by this module are the actual output from the internal parser when created by the &lt;a href=&quot;#parser.expr&quot;&gt;&lt;code&gt;expr()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#parser.suite&quot;&gt;&lt;code&gt;suite()&lt;/code&gt;&lt;/a&gt; functions, described below. The ST objects created by &lt;a href=&quot;#parser.sequence2st&quot;&gt;&lt;code&gt;sequence2st()&lt;/code&gt;&lt;/a&gt; faithfully simulate those structures. Be aware that the values of the sequences which are considered &amp;ldquo;correct&amp;rdquo; will vary from one version of Python to another as the formal grammar for the language is revised. However, transporting code from one Python version to another as source text will always allow correct parse trees to be created in the target version, with the only restriction being that migrating to an older version of the interpreter will not support more recent language constructs. The parse trees are not typically compatible from one version to another, though source code has usually been forward-compatible within a major release series.</source>
          <target state="translated">最も重要なのは、内部パーサーによって処理されるPython文法をよく理解することです。言語構文の詳細については、&lt;a href=&quot;https://docs.python.org/3.8/reference/index.html#reference-index&quot;&gt;Python言語リファレンスを参照してください&lt;/a&gt;。パーサー自体は、標準のPythonディストリビューションの &lt;code&gt;Grammar/Grammar&lt;/code&gt; ファイルで定義されている文法仕様から作成されます。このモジュールによって作成されたSTオブジェクトに格納された解析ツリーは、以下に説明する&lt;a href=&quot;#parser.expr&quot;&gt; &lt;code&gt;expr()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#parser.suite&quot;&gt; &lt;code&gt;suite()&lt;/code&gt; &lt;/a&gt;関数によって作成されたときの内部パーサーからの実際の出力です。&lt;a href=&quot;#parser.sequence2st&quot;&gt; &lt;code&gt;sequence2st()&lt;/code&gt; &lt;/a&gt;によって作成されたSTオブジェクトそれらの構造を忠実にシミュレートします。 「正しい」と見なされるシーケンスの値は、言語の正式な文法が改訂されるため、Pythonのバージョンによって異なることに注意してください。ただし、コードを1つのPythonバージョンから別のバージョンにソーステキストとして転送すると、常にターゲットバージョンで正しい解析ツリーを作成できます。唯一の制限は、古いバージョンのインタープリターに移行すると、より新しい言語構成がサポートされないことです。パースツリーは通常、あるバージョンから別のバージョンに互換性がありませんが、ソースコードは通常、メジャーリリースシリーズ内で上位互換性があります。</target>
        </trans-unit>
        <trans-unit id="91b41d0992c76daa7e6ce1cb34f492287f10c4f0" translate="yes" xml:space="preserve">
          <source>Most locales do not define this value. An example of a locale which does define this value is the Japanese one. In Japan, the traditional representation of dates includes the name of the era corresponding to the then-emperor&amp;rsquo;s reign.</source>
          <target state="translated">ほとんどのロケールはこの値を定義していません。この値を定義するロケールの例は、日本語のロケールです。日本では、日付の伝統的な表現には、当時の天皇の治世に対応する時代の名前が含まれています。</target>
        </trans-unit>
        <trans-unit id="7e2559cd2f7c66c93f9db240a7fc5efb17e9d6cc" translate="yes" xml:space="preserve">
          <source>Most messages with a content type of &lt;em&gt;message/*&lt;/em&gt; (such as &lt;em&gt;message/delivery-status&lt;/em&gt; and &lt;em&gt;message/rfc822&lt;/em&gt;) will also be parsed as container object containing a list payload of length 1. Their &lt;a href=&quot;email.message#email.message.EmailMessage.is_multipart&quot;&gt;&lt;code&gt;is_multipart()&lt;/code&gt;&lt;/a&gt; method will return &lt;code&gt;True&lt;/code&gt;. The single element yielded by &lt;a href=&quot;email.message#email.message.EmailMessage.iter_parts&quot;&gt;&lt;code&gt;iter_parts()&lt;/code&gt;&lt;/a&gt; will be a sub-message object.</source>
          <target state="translated">コンテンツタイプが&lt;em&gt;message / *の&lt;/em&gt;ほとんどのメッセージ（&lt;em&gt;message / delivery-status&lt;/em&gt;や&lt;em&gt;message / rfc822など&lt;/em&gt;）も、長さ1のリストペイロードを含むコンテナオブジェクトとして解析されます。それらの&lt;a href=&quot;email.message#email.message.EmailMessage.is_multipart&quot;&gt; &lt;code&gt;is_multipart()&lt;/code&gt; &lt;/a&gt;メソッドは &lt;code&gt;True&lt;/code&gt; を返します。&lt;a href=&quot;email.message#email.message.EmailMessage.iter_parts&quot;&gt; &lt;code&gt;iter_parts()&lt;/code&gt; &lt;/a&gt;によって生成される単一の要素はサブメッセージオブジェクトになります。</target>
        </trans-unit>
        <trans-unit id="0bbab5f6cfbae51ba73420b5d82749fd2992f95e" translate="yes" xml:space="preserve">
          <source>Most non-&lt;em&gt;multipart&lt;/em&gt; type messages are parsed as a single message object with a string payload. These objects will return &lt;code&gt;False&lt;/code&gt; for &lt;a href=&quot;email.message#email.message.EmailMessage.is_multipart&quot;&gt;&lt;code&gt;is_multipart()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;email.message#email.message.EmailMessage.iter_parts&quot;&gt;&lt;code&gt;iter_parts()&lt;/code&gt;&lt;/a&gt; will yield an empty list.</source>
          <target state="translated">ほとんどの非&lt;em&gt;マルチパート&lt;/em&gt;タイプのメッセージは、文字列のペイロードを持つ単一のメッセージオブジェクトとして解析されます。これらのオブジェクトは&lt;a href=&quot;email.message#email.message.EmailMessage.is_multipart&quot;&gt; &lt;code&gt;is_multipart()&lt;/code&gt; &lt;/a&gt;に対して &lt;code&gt;False&lt;/code&gt; を返し、&lt;a href=&quot;email.message#email.message.EmailMessage.iter_parts&quot;&gt; &lt;code&gt;iter_parts()&lt;/code&gt; &lt;/a&gt;は空のリストを生成します。</target>
        </trans-unit>
        <trans-unit id="c2841625ce82d29906f55ae50358119d7bcc13ad" translate="yes" xml:space="preserve">
          <source>Most of connection oriented event loop methods (such as &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_connection&quot;&gt;&lt;code&gt;loop.create_connection()&lt;/code&gt;&lt;/a&gt;) usually accept a &lt;em&gt;protocol_factory&lt;/em&gt; argument used to create a &lt;em&gt;Protocol&lt;/em&gt; object for an accepted connection, represented by a &lt;em&gt;Transport&lt;/em&gt; object. Such methods usually return a tuple of &lt;code&gt;(transport, protocol)&lt;/code&gt;.</source>
          <target state="translated">ほとんどの接続指向のイベントループメソッド（&lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_connection&quot;&gt; &lt;code&gt;loop.create_connection()&lt;/code&gt; など&lt;/a&gt;）は、通常、&lt;em&gt;Transport&lt;/em&gt;オブジェクトによって表される、受け入れられた接続の&lt;em&gt;Protocol&lt;/em&gt;オブジェクトを作成するために使用される&lt;em&gt;protocol_factory&lt;/em&gt;引数を受け入れます。そのようなメソッドは通常 &lt;code&gt;(transport, protocol)&lt;/code&gt; タプルを返します。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="81f7d7d5c7660933a30dd70b5115a9493350bf31" translate="yes" xml:space="preserve">
          <source>Most of the examples in this section refer to a Turtle instance called &lt;code&gt;turtle&lt;/code&gt;.</source>
          <target state="translated">このセクションのほとんどの例は、 &lt;code&gt;turtle&lt;/code&gt; と呼ばれるTurtleインスタンスを参照しています。</target>
        </trans-unit>
        <trans-unit id="00f06901ce4c8554bb321be3baaa0d6f5ae7c8b3" translate="yes" xml:space="preserve">
          <source>Most of the examples in this section refer to a TurtleScreen instance called &lt;code&gt;screen&lt;/code&gt;.</source>
          <target state="translated">このセクションのほとんどの例は、 &lt;code&gt;screen&lt;/code&gt; というTurtleScreenインスタンスを参照しています。</target>
        </trans-unit>
        <trans-unit id="6a2fb976c0f061ef5f5627769d911fef317c03b7" translate="yes" xml:space="preserve">
          <source>Most of the random module&amp;rsquo;s algorithms and seeding functions are subject to change across Python versions, but two aspects are guaranteed not to change:</source>
          <target state="translated">randomモジュールのアルゴリズムとシード関数のほとんどは、Pythonバージョン間で変更される可能性がありますが、2つの側面が変更されないことが保証されています。</target>
        </trans-unit>
        <trans-unit id="7745b7926e51bd60c61099df7ea2085b449eedf0" translate="yes" xml:space="preserve">
          <source>Most of the standard escapes supported by Python string literals are also accepted by the regular expression parser:</source>
          <target state="translated">Python の文字列リテラルでサポートされている標準エスケープのほとんどは、正規表現パーサでも受け入れられます。</target>
        </trans-unit>
        <trans-unit id="566d54a039879a714c6a3632228f8ac12ebf75df" translate="yes" xml:space="preserve">
          <source>Most of the time, &lt;a href=&quot;#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt; is all you really need, but a number of additional modules are available as well. The Tk interface is located in a binary module named &lt;code&gt;_tkinter&lt;/code&gt;. This module contains the low-level interface to Tk, and should never be used directly by application programmers. It is usually a shared library (or DLL), but might in some cases be statically linked with the Python interpreter.</source>
          <target state="translated">ほとんどの場合、本当に必要なのは&lt;a href=&quot;#module-tkinter&quot;&gt; &lt;code&gt;tkinter&lt;/code&gt; &lt;/a&gt;だけですが、多数の追加モジュールも利用できます。Tkインターフェイスは &lt;code&gt;_tkinter&lt;/code&gt; という名前のバイナリモジュールにあります。このモジュールにはTkへの低レベルのインターフェースが含まれているため、アプリケーションプログラマーが直接使用することはできません。通常は共有ライブラリ（またはDLL）ですが、場合によっては、Pythonインタープリターと静的にリンクされることがあります。</target>
        </trans-unit>
        <trans-unit id="cd5bad467beb5b7fbd87a238c1288e8d07b19cf1" translate="yes" xml:space="preserve">
          <source>Most of the time, the attributes of the object returned by &lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt;&lt;code&gt;parse_args()&lt;/code&gt;&lt;/a&gt; will be fully determined by inspecting the command-line arguments and the argument actions. &lt;a href=&quot;#argparse.ArgumentParser.set_defaults&quot;&gt;&lt;code&gt;set_defaults()&lt;/code&gt;&lt;/a&gt; allows some additional attributes that are determined without any inspection of the command line to be added:</source>
          <target state="translated">ほとんどの場合、&lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt; &lt;code&gt;parse_args()&lt;/code&gt; &lt;/a&gt;によって返されるオブジェクトの属性は、コマンドライン引数と引数アクションを調べることによって完全に決定されます。&lt;a href=&quot;#argparse.ArgumentParser.set_defaults&quot;&gt; &lt;code&gt;set_defaults()&lt;/code&gt; を&lt;/a&gt;使用すると、コマンドラインを検査せずに決定される追加の属性を追加できます。</target>
        </trans-unit>
        <trans-unit id="1089f5c7ed3d0c68bfe01bebe0674b2ea0fa5e89" translate="yes" xml:space="preserve">
          <source>Most of these reflect information in the XML document that is not of general utility to most DOM users.</source>
          <target state="translated">これらのほとんどは、ほとんどの DOM ユーザにとって一般的に有用ではない XML ドキュメントの情報を反映しています。</target>
        </trans-unit>
        <trans-unit id="13b592a4e1b821b7d19f58aba800d1b83c05c87f" translate="yes" xml:space="preserve">
          <source>Most often, CGI scripts live in the server&amp;rsquo;s special &lt;code&gt;cgi-bin&lt;/code&gt; directory. The HTTP server places all sorts of information about the request (such as the client&amp;rsquo;s hostname, the requested URL, the query string, and lots of other goodies) in the script&amp;rsquo;s shell environment, executes the script, and sends the script&amp;rsquo;s output back to the client.</source>
          <target state="translated">ほとんどの場合、CGIスクリプトはサーバーの特別な &lt;code&gt;cgi-bin&lt;/code&gt; ディレクトリにあります。HTTPサーバーは、リクエストに関するあらゆる種類の情報（クライアントのホスト名、リクエストされたURL、クエリ文字列、その他のさまざまな機能など）をスクリプトのシェル環境に配置し、スクリプトを実行して、スクリプトの出力をスクリプトに送り返しますクライアント。</target>
        </trans-unit>
        <trans-unit id="84948582795acb691856110e5ae66ef32acdd219" translate="yes" xml:space="preserve">
          <source>Most parsing functions provided by this module require the whole document to be read at once before returning any result. It is possible to use an &lt;a href=&quot;#xml.etree.ElementTree.XMLParser&quot;&gt;&lt;code&gt;XMLParser&lt;/code&gt;&lt;/a&gt; and feed data into it incrementally, but it is a push API that calls methods on a callback target, which is too low-level and inconvenient for most needs. Sometimes what the user really wants is to be able to parse XML incrementally, without blocking operations, while enjoying the convenience of fully constructed &lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="translated">このモジュールが提供するほとんどの解析関数では、結果を返す前にドキュメント全体を一度に読み取る必要があります。&lt;a href=&quot;#xml.etree.ElementTree.XMLParser&quot;&gt; &lt;code&gt;XMLParser&lt;/code&gt; &lt;/a&gt;を使用してデータを段階的にフィードすることは可能ですが、コールバックターゲットでメソッドを呼び出すのはプッシュAPIであり、低レベルであり、ほとんどのニーズに不便です。ユーザーが本当に望んでいるのは、完全に構築された&lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt; &lt;code&gt;Element&lt;/code&gt; &lt;/a&gt;オブジェクトの利便性を享受しながら、操作をブロックすることなくXMLを段階的に解析できることです。</target>
        </trans-unit>
        <trans-unit id="793641b11ec9edf6536ef14e14a17a202ba37fd0" translate="yes" xml:space="preserve">
          <source>Most programs adjust the current context only once, at the beginning of the program. And, in many applications, data is converted to &lt;a href=&quot;#decimal.Decimal&quot;&gt;&lt;code&gt;Decimal&lt;/code&gt;&lt;/a&gt; with a single cast inside a loop. With context set and decimals created, the bulk of the program manipulates the data no differently than with other Python numeric types.</source>
          <target state="translated">ほとんどのプログラムは、プログラムの開始時に現在のコンテキストを一度だけ調整します。また、多くのアプリケーションでは、ループ内での1回のキャストでデータが&lt;a href=&quot;#decimal.Decimal&quot;&gt; &lt;code&gt;Decimal&lt;/code&gt; に&lt;/a&gt;変換されます。コンテキストセットと10進数が作成されると、プログラムの大部分は他のPython数値型と同じようにデータを操作します。</target>
        </trans-unit>
        <trans-unit id="bed33f38a8121d67d831a08ac6160cf7fca8b25f" translate="yes" xml:space="preserve">
          <source>Most programs should find that using one of these weak container types or &lt;a href=&quot;#weakref.finalize&quot;&gt;&lt;code&gt;finalize&lt;/code&gt;&lt;/a&gt; is all they need &amp;ndash; it&amp;rsquo;s not usually necessary to create your own weak references directly. The low-level machinery is exposed by the &lt;a href=&quot;#module-weakref&quot;&gt;&lt;code&gt;weakref&lt;/code&gt;&lt;/a&gt; module for the benefit of advanced uses.</source>
          <target state="translated">ほとんどのプログラムでは、これらのウィークコンテナータイプまたは&lt;a href=&quot;#weakref.finalize&quot;&gt; &lt;code&gt;finalize&lt;/code&gt; &lt;/a&gt;いずれかを使用するだけで十分であることがわかります。通常、独自のウィークリファレンスを直接作成する必要はありません。低レベルの機構は、高度な使用のために&lt;a href=&quot;#module-weakref&quot;&gt; &lt;code&gt;weakref&lt;/code&gt; &lt;/a&gt;モジュールによって公開されます。</target>
        </trans-unit>
        <trans-unit id="1e33a7247ba2cdbfe9e4c5eadcda0b6fb6940dfb" translate="yes" xml:space="preserve">
          <source>Most tkinter programs run &lt;code&gt;root.mainloop()&lt;/code&gt;, which usually does not return until the tk app is destroyed. If the program is run with &lt;code&gt;python -i&lt;/code&gt; or from an IDLE editor, a &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; shell prompt does not appear until &lt;code&gt;mainloop()&lt;/code&gt; returns, at which time there is nothing left to interact with.</source>
          <target state="translated">ほとんどの &lt;code&gt;root.mainloop()&lt;/code&gt; プログラムはroot.mainloop（）を実行します。これは通常、tkアプリが破棄されるまで戻りません。プログラムが &lt;code&gt;python -i&lt;/code&gt; またはIDLEエディターから実行される場合、 &lt;code&gt;mainloop()&lt;/code&gt; が戻るまで &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; シェルプロンプトは表示されません。このとき、操作するものは何もありません。</target>
        </trans-unit>
        <trans-unit id="467bcc5b3e2170db615ed243a7771ae192662925" translate="yes" xml:space="preserve">
          <source>Most users should use &lt;a href=&quot;subprocess#subprocess.run&quot;&gt;&lt;code&gt;subprocess.run()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;#os.posix_spawn&quot;&gt;&lt;code&gt;posix_spawn()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ほとんどのユーザーは、&lt;a href=&quot;#os.posix_spawn&quot;&gt; &lt;code&gt;posix_spawn()&lt;/code&gt; の&lt;/a&gt;代わりに&lt;a href=&quot;subprocess#subprocess.run&quot;&gt; &lt;code&gt;subprocess.run()&lt;/code&gt; &lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="7022d092d568159a8deb2f5345b042987cdc731a" translate="yes" xml:space="preserve">
          <source>Mouse event has occurred</source>
          <target state="translated">マウスイベントが発生しました</target>
        </trans-unit>
        <trans-unit id="76cdb950721642b6b8596d36d5a39f7705028b99" translate="yes" xml:space="preserve">
          <source>Move</source>
          <target state="translated">Move</target>
        </trans-unit>
        <trans-unit id="59b381f9ae62e71a6e656f888600974d66a2a445" translate="yes" xml:space="preserve">
          <source>Move a &lt;a href=&quot;https://www.python.org/dev/peps/pep-3147&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 3147&lt;/strong&gt;&lt;/a&gt;/&lt;a href=&quot;https://www.python.org/dev/peps/pep-0488&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 488&lt;/strong&gt;&lt;/a&gt; pyc file to its legacy pyc location and return the file system path to the legacy pyc file. The &lt;em&gt;source&lt;/em&gt; value is the file system path to the source file. It does not need to exist, however the PEP 3147/488 pyc file must exist.</source>
          <target state="translated">移動&lt;a href=&quot;https://www.python.org/dev/peps/pep-3147&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 3147&lt;/strong&gt;&lt;/a&gt; / &lt;a href=&quot;https://www.python.org/dev/peps/pep-0488&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 488&lt;/strong&gt;&lt;/a&gt;そのレガシーPYCの場所にPYCファイルをレガシーPYCファイルへのファイルシステムパスを返します。&lt;em&gt;ソース&lt;/em&gt;値は、ソース・ファイルへのファイル・システム・パスです。存在する必要はありませんが、PEP 3147/488 pycファイルが存在している必要があります。</target>
        </trans-unit>
        <trans-unit id="34fb02884cc45eb332edf96e82c7d3d89690c570" translate="yes" xml:space="preserve">
          <source>Move an existing &lt;em&gt;key&lt;/em&gt; to either end of an ordered dictionary. The item is moved to the right end if &lt;em&gt;last&lt;/em&gt; is true (the default) or to the beginning if &lt;em&gt;last&lt;/em&gt; is false. Raises &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; if the &lt;em&gt;key&lt;/em&gt; does not exist:</source>
          <target state="translated">既存の&lt;em&gt;キー&lt;/em&gt;を順序付けされた辞書のいずれかの端に移動します。アイテムは、&lt;em&gt;last&lt;/em&gt;がtrue（デフォルト）の場合は右端に移動し、&lt;em&gt;last&lt;/em&gt;がfalseの場合は最初に移動します。発生させ&lt;a href=&quot;exceptions#KeyError&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; 例外が&lt;/a&gt;あれば&lt;em&gt;、キーが&lt;/em&gt;存在しません：</target>
        </trans-unit>
        <trans-unit id="a9241b7a62db251595ec94a8670f8492cc79c5f0" translate="yes" xml:space="preserve">
          <source>Move and draw</source>
          <target state="translated">移動と描画</target>
        </trans-unit>
        <trans-unit id="ef3b0cebd03fd191bbc4cb8897a06eaaba33d4fe" translate="yes" xml:space="preserve">
          <source>Move cursor to &lt;code&gt;(new_y, new_x)&lt;/code&gt;.</source>
          <target state="translated">カーソルを &lt;code&gt;(new_y, new_x)&lt;/code&gt; 移動します。</target>
        </trans-unit>
        <trans-unit id="601b26f56eb7f3dd5627e0542377e2380db7e481" translate="yes" xml:space="preserve">
          <source>Move cursor to the line number requested and make that line visible.</source>
          <target state="translated">カーソルを要求された行番号に移動し、その行を表示させます。</target>
        </trans-unit>
        <trans-unit id="00de7b574f0ca4dca2db05f7ac95cf8fa926cd45" translate="yes" xml:space="preserve">
          <source>Move operations do nothing if the cursor is at an edge where the movement is not possible. The following synonyms are supported where possible:</source>
          <target state="translated">カーソルが移動できないエッジにある場合、移動操作は何もしません。可能な限り、以下の同義語がサポートされています。</target>
        </trans-unit>
        <trans-unit id="f14c08ec9cc70b053ef1452c74150f8bece0b93f" translate="yes" xml:space="preserve">
          <source>Move the current frame &lt;em&gt;count&lt;/em&gt; (default one) levels down in the stack trace (to a newer frame).</source>
          <target state="translated">スタックトレースで現在のフレーム&lt;em&gt;カウント&lt;/em&gt;（デフォルトは1）のレベルを（新しいフレームに）移動します。</target>
        </trans-unit>
        <trans-unit id="1f999beea6e1d8614d33e214187f8c14de783371" translate="yes" xml:space="preserve">
          <source>Move the current frame &lt;em&gt;count&lt;/em&gt; (default one) levels up in the stack trace (to an older frame).</source>
          <target state="translated">スタックトレースで現在のフレーム&lt;em&gt;カウント&lt;/em&gt;（デフォルトは1）のレベルを（古いフレームに）移動します。</target>
        </trans-unit>
        <trans-unit id="bddc2d8cac88c0e16d0d15e699390e1c93202c14" translate="yes" xml:space="preserve">
          <source>Move the panel to the screen coordinates &lt;code&gt;(y, x)&lt;/code&gt;.</source>
          <target state="translated">パネルを画面座標 &lt;code&gt;(y, x)&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="366616b5769d49d8c4989ea2123f0635dfd476c9" translate="yes" xml:space="preserve">
          <source>Move the turtle backward by &lt;em&gt;distance&lt;/em&gt;, opposite to the direction the turtle is headed. Do not change the turtle&amp;rsquo;s heading.</source>
          <target state="translated">タートルが向いている方向とは反対に、タートルを&lt;em&gt;距離だけ&lt;/em&gt;後方に移動します。カメの向きを変えないでください。</target>
        </trans-unit>
        <trans-unit id="5bb8f30d63462cf640df95fdfb728a8ffba5f530" translate="yes" xml:space="preserve">
          <source>Move the turtle forward by the specified &lt;em&gt;distance&lt;/em&gt;, in the direction the turtle is headed.</source>
          <target state="translated">タートルが向いている方向に、タートルを指定された&lt;em&gt;距離だけ&lt;/em&gt;前方に移動します。</target>
        </trans-unit>
        <trans-unit id="606392f9ada71eee7694589f863fe49c6c953eb7" translate="yes" xml:space="preserve">
          <source>Move the window inside its parent window. The screen-relative parameters of the window are not changed. This routine is used to display different parts of the parent window at the same physical position on the screen.</source>
          <target state="translated">親ウィンドウの内側にウィンドウを移動します。ウィンドウの画面関連パラメータは変更されません。このルーチンは、親ウィンドウの異なる部分を画面上の同じ物理的位置に表示するために使用されます。</target>
        </trans-unit>
        <trans-unit id="9b4cc9d6cf91904a69809b29953b1b97a8cb436c" translate="yes" xml:space="preserve">
          <source>Move the window so its upper-left corner is at &lt;code&gt;(new_y, new_x)&lt;/code&gt;.</source>
          <target state="translated">左上隅が &lt;code&gt;(new_y, new_x)&lt;/code&gt; なるようにウィンドウを移動します。</target>
        </trans-unit>
        <trans-unit id="9ae1c0cedf7a7f6220f5e9b65d8d117ba2c19e75" translate="yes" xml:space="preserve">
          <source>Move turtle to an absolute position. If the pen is down, draw line. Do not change the turtle&amp;rsquo;s orientation.</source>
          <target state="translated">カメを絶対位置に移動します。ペンが下がっている場合は、線を引きます。カメの向きを変えないでください。</target>
        </trans-unit>
        <trans-unit id="22468681bb2cde570129a7bbf809a05431bc555d" translate="yes" xml:space="preserve">
          <source>Move turtle to the origin &amp;ndash; coordinates (0,0) &amp;ndash; and set its heading to its start-orientation (which depends on the mode, see &lt;a href=&quot;#turtle.mode&quot;&gt;&lt;code&gt;mode()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">亀を原点（座標（0,0））に移動し、その向きを開始方向に設定し&lt;a href=&quot;#turtle.mode&quot;&gt; &lt;code&gt;mode()&lt;/code&gt; &lt;/a&gt;モードによって異なります。mode（）を参照）。</target>
        </trans-unit>
        <trans-unit id="5be33704c954094f90870e7ed96a149ee7bd9c74" translate="yes" xml:space="preserve">
          <source>Moves &lt;em&gt;item&lt;/em&gt; to position &lt;em&gt;index&lt;/em&gt; in &lt;em&gt;parent&lt;/em&gt;&amp;rsquo;s list of children.</source>
          <target state="translated">&lt;em&gt;アイテム&lt;/em&gt;を&lt;em&gt;親&lt;/em&gt;の子のリスト内の位置&lt;em&gt;インデックス&lt;/em&gt;に移動し&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d83016dd56e9bf9199d175870ff56ee77659cfb7" translate="yes" xml:space="preserve">
          <source>Mozilla</source>
          <target state="translated">Mozilla</target>
        </trans-unit>
        <trans-unit id="77bb2f79a7eb833c24226c0fc4afbc0065f7bae3" translate="yes" xml:space="preserve">
          <source>Mozilla&amp;rsquo;s Server Side TLS recommendations</source>
          <target state="translated">Mozillaのサーバー側TLSの推奨事項</target>
        </trans-unit>
        <trans-unit id="34e4e3490cfd5d827b6939f20b6812fc7ab81c0a" translate="yes" xml:space="preserve">
          <source>Much like &lt;a href=&quot;#opcode-LOAD_DEREF&quot;&gt;&lt;code&gt;LOAD_DEREF&lt;/code&gt;&lt;/a&gt; but first checks the locals dictionary before consulting the cell. This is used for loading free variables in class bodies.</source>
          <target state="translated">&lt;a href=&quot;#opcode-LOAD_DEREF&quot;&gt; &lt;code&gt;LOAD_DEREF&lt;/code&gt; に&lt;/a&gt;よく似ていますが、セルを調べる前にまずローカル辞書をチェックします。これは、クラス本体に自由変数をロードするために使用されます。</target>
        </trans-unit>
        <trans-unit id="330f90a4a7f8697f732d832206c87a0c80b1e817" translate="yes" xml:space="preserve">
          <source>Multi-dimensional arrays:</source>
          <target state="translated">多次元配列。</target>
        </trans-unit>
        <trans-unit id="e286be50d1c645889d37cc60a961288d4708698c" translate="yes" xml:space="preserve">
          <source>Multi-phase extension module initialization</source>
          <target state="translated">多相拡張モジュールの初期化</target>
        </trans-unit>
        <trans-unit id="3a17483ef417b9f9729e4d5407d6224ba50cae48" translate="yes" xml:space="preserve">
          <source>Multi-processing</source>
          <target state="translated">Multi-processing</target>
        </trans-unit>
        <trans-unit id="4df9252fd5d4911ee5eb1c96d25797e8cf043b28" translate="yes" xml:space="preserve">
          <source>Multi-threading</source>
          <target state="translated">Multi-threading</target>
        </trans-unit>
        <trans-unit id="775f46e5feac2a655ca3c0f4647af4e10f6b1405" translate="yes" xml:space="preserve">
          <source>MultiCall Objects</source>
          <target state="translated">マルチコールオブジェクト</target>
        </trans-unit>
        <trans-unit id="d9e13b473f0ae3bd1e957746112d999190ceed57" translate="yes" xml:space="preserve">
          <source>Multihop attempted</source>
          <target state="translated">マルチホップの試み</target>
        </trans-unit>
        <trans-unit id="82dabd0bba3a5f611035c568eaa03187a7117693" translate="yes" xml:space="preserve">
          <source>Multimedia</source>
          <target state="translated">Multimedia</target>
        </trans-unit>
        <trans-unit id="4e13023947484ddbe09e9dcd00133156cd68392c" translate="yes" xml:space="preserve">
          <source>Multimedia Services</source>
          <target state="translated">マルチメディアサービス</target>
        </trans-unit>
        <trans-unit id="bb2ec50bee2ac650f14f5c5ab53fb76fb7fa35c2" translate="yes" xml:space="preserve">
          <source>Multiple commands may be entered on a single line, separated by &lt;code&gt;;;&lt;/code&gt;. (A single &lt;code&gt;;&lt;/code&gt; is not used as it is the separator for multiple commands in a line that is passed to the Python parser.) No intelligence is applied to separating the commands; the input is split at the first &lt;code&gt;;;&lt;/code&gt; pair, even if it is in the middle of a quoted string.</source>
          <target state="translated">複数のコマンドを &lt;code&gt;;;&lt;/code&gt; で区切って1行で入力できます。。（単一の &lt;code&gt;;&lt;/code&gt; は、Pythonパーサーに渡される行内の複数のコマンドの区切り文字であるため使用されません。）コマンドを分離するためのインテリジェンスは適用されません。入力は最初に分割されます &lt;code&gt;;;&lt;/code&gt; 引用符で囲まれた文字列の途中であっても、ペアになります。</target>
        </trans-unit>
        <trans-unit id="3d09adb7f1de6110bb767281eb6fabdd98f6a2d7" translate="yes" xml:space="preserve">
          <source>Multiple directives can be used on a single physical line, separated by commas:</source>
          <target state="translated">複数のディレクティブをカンマで区切って、1つの物理行で使用することができます。</target>
        </trans-unit>
        <trans-unit id="7299187e78acfeb10e1b49723ae100be4c64b0fe" translate="yes" xml:space="preserve">
          <source>Multiple notebooks in a single toplevel may be enabled for traversal, including nested notebooks. However, notebook traversal only works properly if all panes have the notebook they are in as master.</source>
          <target state="translated">1つのトップレベル内の複数のノートブックは、ネストされたノートブックを含めて、トラバーサルを有効にすることができます。ただし、ノートブックの探索は、すべてのペインがそのノートブックをマスターとして使用している場合にのみ正常に動作します。</target>
        </trans-unit>
        <trans-unit id="5162321020c32ce61d50bae28086dd890680e982" translate="yes" xml:space="preserve">
          <source>Multiple paths can be given to &lt;code&gt;venv&lt;/code&gt;, in which case an identical virtual environment will be created, according to the given options, at each provided path.</source>
          <target state="translated">&lt;code&gt;venv&lt;/code&gt; に複数のパスを与えることができます。その場合、与えられた各パスで、与えられたオプションに従って、同一の仮想環境が作成されます。</target>
        </trans-unit>
        <trans-unit id="4573ed2f0edb61983a51e72e312c05e99fea31c4" translate="yes" xml:space="preserve">
          <source>Multiple scripts demonstrating different features of the &lt;a href=&quot;#module-turtle&quot;&gt;&lt;code&gt;turtle&lt;/code&gt;&lt;/a&gt; module. Examples can be accessed via the Examples menu. They can also be run standalone.</source>
          <target state="translated">&lt;a href=&quot;#module-turtle&quot;&gt; &lt;code&gt;turtle&lt;/code&gt; &lt;/a&gt;モジュールのさまざまな機能を示す複数のスクリプト。例には、[例]メニューからアクセスできます。スタンドアロンで実行することもできます。</target>
        </trans-unit>
        <trans-unit id="2b9ee6e2b5fcdbd970e8f069acf17877e49e0441" translate="yes" xml:space="preserve">
          <source>Multiplication</source>
          <target state="translated">Multiplication</target>
        </trans-unit>
        <trans-unit id="7a49abf6458e7554b14dad6ea5826909852a08c1" translate="yes" xml:space="preserve">
          <source>Multithreaded version of &lt;a href=&quot;#telnetlib.Telnet.interact&quot;&gt;&lt;code&gt;interact()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#telnetlib.Telnet.interact&quot;&gt; &lt;code&gt;interact()&lt;/code&gt; の&lt;/a&gt;マルチスレッドバージョン。</target>
        </trans-unit>
        <trans-unit id="8a86acdcb9f782d0a3ed3f193ab37879a5d757d7" translate="yes" xml:space="preserve">
          <source>Multithreading</source>
          <target state="translated">Multithreading</target>
        </trans-unit>
        <trans-unit id="e84051d950065a19888b9a4b65dd834b3ca5708a" translate="yes" xml:space="preserve">
          <source>Must accept a request from the socket, and return a 2-tuple containing the &lt;em&gt;new&lt;/em&gt; socket object to be used to communicate with the client, and the client&amp;rsquo;s address.</source>
          <target state="translated">ソケットからの要求を受け入れ、クライアントとの通信に使用する&lt;em&gt;新しい&lt;/em&gt;ソケットオブジェクトとクライアントのアドレスを含む2タプルを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="4747a0250917ddc1dc2a0d4fc6b92b4e01de5dd8" translate="yes" xml:space="preserve">
          <source>Must be called if the programmer wants to use colors, and before any other color manipulation routine is called. It is good practice to call this routine right after &lt;a href=&quot;#curses.initscr&quot;&gt;&lt;code&gt;initscr()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">プログラマーが色を使用したい場合で、他の色操作ルーチンが呼び出される前に呼び出す必要があります。&lt;a href=&quot;#curses.initscr&quot;&gt; &lt;code&gt;initscr()&lt;/code&gt; の&lt;/a&gt;直後にこのルーチンを呼び出すことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="ff7e72021a763f0ee5ccf9301a43b444b5e95394" translate="yes" xml:space="preserve">
          <source>Must be one of: &lt;code&gt;&quot;none&quot;&lt;/code&gt;, &lt;code&gt;&quot;char&quot;&lt;/code&gt;, or &lt;code&gt;&quot;word&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;none&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;char&quot;&lt;/code&gt; 、または &lt;code&gt;&quot;word&quot;&lt;/code&gt; のいずれかである必要があります。</target>
        </trans-unit>
        <trans-unit id="ebf1dc0566c10e0139b5df0505eb1e78b6fd3569" translate="yes" xml:space="preserve">
          <source>Must be raised by &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__anext__&quot;&gt;&lt;code&gt;__anext__()&lt;/code&gt;&lt;/a&gt; method of an &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-asynchronous-iterator&quot;&gt;asynchronous iterator&lt;/a&gt; object to stop the iteration.</source>
          <target state="translated">反復を停止するには、&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-asynchronous-iterator&quot;&gt;非同期イテレータ&lt;/a&gt;オブジェクトの&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__anext__&quot;&gt; &lt;code&gt;__anext__()&lt;/code&gt; &lt;/a&gt;メソッドで発生させる必要があります。</target>
        </trans-unit>
        <trans-unit id="adf6c9fd4760a31bfbf5ba31fc932d1f5a3f031e" translate="yes" xml:space="preserve">
          <source>Must be zero.</source>
          <target state="translated">ゼロでなければなりません。</target>
        </trans-unit>
        <trans-unit id="ae91554455709a10c47572fb3081826f1c8d9b10" translate="yes" xml:space="preserve">
          <source>Must return a Boolean value; if the value is &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;, the request will be processed, and if it&amp;rsquo;s &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt;, the request will be denied. This function can be overridden to implement access controls for a server. The default implementation always returns &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ブール値を返す必要があります。値が&lt;a href=&quot;constants#True&quot;&gt; &lt;code&gt;True&lt;/code&gt; の&lt;/a&gt;場合、リクエストは処理され、&lt;a href=&quot;constants#False&quot;&gt; &lt;code&gt;False&lt;/code&gt; の&lt;/a&gt;場合、リクエストは拒否されます。この関数をオーバーライドして、サーバーのアクセス制御を実装できます。デフォルトの実装は常に&lt;a href=&quot;constants#True&quot;&gt; &lt;code&gt;True&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="6a5c56949118e7bbfa4e5df14253fa9c206b4ced" translate="yes" xml:space="preserve">
          <source>Mutable Sequence Types</source>
          <target state="translated">可変シーケンスタイプ</target>
        </trans-unit>
        <trans-unit id="59a777ead597ed74ce5de4536307c0d1ace10414" translate="yes" xml:space="preserve">
          <source>Mutable default values</source>
          <target state="translated">Mutableデフォルト値</target>
        </trans-unit>
        <trans-unit id="bd89464f515bc7c1945f885ef807721ee91c256b" translate="yes" xml:space="preserve">
          <source>Mutual exclusion</source>
          <target state="translated">相互排除</target>
        </trans-unit>
        <trans-unit id="f1dae7604a00897f0a4fd9c9086372f8cb686e88" translate="yes" xml:space="preserve">
          <source>MyStruct(4, 6)</source>
          <target state="translated">MyStruct(4,6)</target>
        </trans-unit>
        <trans-unit id="08d2e98e6754af941484848930ccbaddfefe13d6" translate="yes" xml:space="preserve">
          <source>N/A</source>
          <target state="translated">N/A</target>
        </trans-unit>
        <trans-unit id="f3b6e147d97b483fedd25cc8dfa6e8453dae0246" translate="yes" xml:space="preserve">
          <source>NNTP (Net News Transport Protocol) client</source>
          <target state="translated">エヌエヌティーピークライアント</target>
        </trans-unit>
        <trans-unit id="79c75ca6272ee59fef0850ac71420be0538f2b61" translate="yes" xml:space="preserve">
          <source>NNTP Objects</source>
          <target state="translated">NNTP オブジェクト</target>
        </trans-unit>
        <trans-unit id="d1dc5a1761f453c4a0fd7017ba832bc17fd8ad13" translate="yes" xml:space="preserve">
          <source>NOOP</source>
          <target state="translated">NOOP</target>
        </trans-unit>
        <trans-unit id="51374517cce15cf30e5fafe081ab605aef775d59" translate="yes" xml:space="preserve">
          <source>NTEventLogHandler</source>
          <target state="translated">NTEventLogHandler</target>
        </trans-unit>
        <trans-unit id="96cd9da0c6e1ccdfcc159d790597f9c5ab44b9f9" translate="yes" xml:space="preserve">
          <source>Naive &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; instances are assumed to represent local time and this method relies on the platform C &lt;code&gt;mktime()&lt;/code&gt; function to perform the conversion. Since &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; supports wider range of values than &lt;code&gt;mktime()&lt;/code&gt; on many platforms, this method may raise &lt;a href=&quot;exceptions#OverflowError&quot;&gt;&lt;code&gt;OverflowError&lt;/code&gt;&lt;/a&gt; for times far in the past or far in the future.</source>
          <target state="translated">単純な&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;インスタンスは現地時間を表すと想定されており、このメソッドはプラットフォームCの &lt;code&gt;mktime()&lt;/code&gt; 関数に依存して変換を実行します。多くのプラットフォームでは、&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;mktime()&lt;/code&gt; より広い範囲の値をサポートしているため、このメソッドは、過去または未来の時間で&lt;a href=&quot;exceptions#OverflowError&quot;&gt; &lt;code&gt;OverflowError&lt;/code&gt; &lt;/a&gt;を発生させる可能性があります。</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="c27442e14dcf480c5096062467b3aa70532fef60" translate="yes" xml:space="preserve">
          <source>Name (string)</source>
          <target state="translated">名前(文字列</target>
        </trans-unit>
        <trans-unit id="f749babb57e6226126151fa3ff0dcb49a37a4566" translate="yes" xml:space="preserve">
          <source>Name and version of the thread library. It is a string, or &lt;code&gt;None&lt;/code&gt; if this information is unknown.</source>
          <target state="translated">スレッドライブラリの名前とバージョン。文字列です。この情報が不明な場合は &lt;code&gt;None&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bd0eba018b32a3fc8bf5757f41e9d39ed4d796bd" translate="yes" xml:space="preserve">
          <source>Name not unique on network</source>
          <target state="translated">ネットワーク上で一意ではない名前</target>
        </trans-unit>
        <trans-unit id="6b9e670759af04e3a29cb11b387ac0af4c4ba79a" translate="yes" xml:space="preserve">
          <source>Name of a file to accumulate counts over several tracing runs. Should be used with the &lt;a href=&quot;#cmdoption-trace-c&quot;&gt;&lt;code&gt;--count&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">いくつかのトレース実行でカウントを累積するファイルの名前。&lt;a href=&quot;#cmdoption-trace-c&quot;&gt; &lt;code&gt;--count&lt;/code&gt; &lt;/a&gt;オプションと一緒に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="1f41d04af7c00689d29db73e5e39ccec3d7f4baa" translate="yes" xml:space="preserve">
          <source>Name of a file where the output should be written.</source>
          <target state="translated">出力を書き込むファイル名。</target>
        </trans-unit>
        <trans-unit id="909d50c1d59e7f6872cd42d8d690e7a67cfddf5e" translate="yes" xml:space="preserve">
          <source>Name of function containing the logging call.</source>
          <target state="translated">ロギングコールを含む関数の名前。</target>
        </trans-unit>
        <trans-unit id="a4e437038133290bc84db0a7901dbdac884887ac" translate="yes" xml:space="preserve">
          <source>Name of the &lt;code&gt;ndbm&lt;/code&gt; implementation library used.</source>
          <target state="translated">使用される &lt;code&gt;ndbm&lt;/code&gt; 実装ライブラリの名前。</target>
        </trans-unit>
        <trans-unit id="b82dd6dc18736a73581a12357aabc36155aa0044" translate="yes" xml:space="preserve">
          <source>Name of the ZIP file.</source>
          <target state="translated">ZIPファイルの名前。</target>
        </trans-unit>
        <trans-unit id="7bd737364faf0eec56bb0fc421ccc3c610d6ed65" translate="yes" xml:space="preserve">
          <source>Name of the archive member.</source>
          <target state="translated">アーカイブメンバーの名前。</target>
        </trans-unit>
        <trans-unit id="2c902fcfc808584d112a3ceeb4eb2bc1f3619bea" translate="yes" xml:space="preserve">
          <source>Name of the file in the archive.</source>
          <target state="translated">アーカイブ内のファイル名。</target>
        </trans-unit>
        <trans-unit id="3f4f64a593b458f13706273b6df06d01e90dabff" translate="yes" xml:space="preserve">
          <source>Name of the file in which the class is defined.</source>
          <target state="translated">クラスが定義されているファイル名。</target>
        </trans-unit>
        <trans-unit id="52c4cd4fff87ccdc917ab79849a30f112d326420" translate="yes" xml:space="preserve">
          <source>Name of the file in which the function is defined.</source>
          <target state="translated">関数が定義されているファイル名。</target>
        </trans-unit>
        <trans-unit id="479b58a3698cd8bdd2749e826438a6efb9a37443" translate="yes" xml:space="preserve">
          <source>Name of the kernel filter.</source>
          <target state="translated">カーネルフィルタの名前。</target>
        </trans-unit>
        <trans-unit id="557389192cfcd5c2bf918ddbf712bd3b1d343b90" translate="yes" xml:space="preserve">
          <source>Name of the lock implementation:</source>
          <target state="translated">ロックの実装名。</target>
        </trans-unit>
        <trans-unit id="e5bcc652602bbe94f6a9ebcc11b4cb38e6c0ea60" translate="yes" xml:space="preserve">
          <source>Name of the logger used to log the call.</source>
          <target state="translated">呼び出しの記録に使用されるロガーの名前。</target>
        </trans-unit>
        <trans-unit id="1ac5bb9ec4a87c7e2e4d424b152dffc6dceb92f8" translate="yes" xml:space="preserve">
          <source>Name of the module the loader supports.</source>
          <target state="translated">ローダがサポートするモジュールの名前。</target>
        </trans-unit>
        <trans-unit id="88649ef30eca2eef544db1a703bfa26a7680062b" translate="yes" xml:space="preserve">
          <source>Name of the place from which the module is loaded, e.g. &amp;ldquo;builtin&amp;rdquo; for built-in modules and the filename for modules loaded from source. Normally &amp;ldquo;origin&amp;rdquo; should be set, but it may be &lt;code&gt;None&lt;/code&gt; (the default) which indicates it is unspecified (e.g. for namespace packages).</source>
          <target state="translated">モジュールのロード元の場所の名前。たとえば、組み込みモジュールの場合は「builtin」、ソースからロードされたモジュールの場合はファイル名。通常は「origin」を設定する必要がありますが、指定しないことを示す &lt;code&gt;None&lt;/code&gt; （デフォルト）にすることもできます（たとえば、名前空間パッケージの場合）。</target>
        </trans-unit>
        <trans-unit id="3add1cd07c9747dd5701cddb479a22e098f8ef27" translate="yes" xml:space="preserve">
          <source>Name of the target file name, which is only present in &lt;a href=&quot;#tarfile.TarInfo&quot;&gt;&lt;code&gt;TarInfo&lt;/code&gt;&lt;/a&gt; objects of type &lt;code&gt;LNKTYPE&lt;/code&gt; and &lt;code&gt;SYMTYPE&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;LNKTYPE&lt;/code&gt; および &lt;code&gt;SYMTYPE&lt;/code&gt; の&lt;a href=&quot;#tarfile.TarInfo&quot;&gt; &lt;code&gt;TarInfo&lt;/code&gt; &lt;/a&gt;オブジェクトにのみ存在するターゲットファイル名の名前。</target>
        </trans-unit>
        <trans-unit id="8c8a8acd0a715e63879cf8add7d8952be75bc26b" translate="yes" xml:space="preserve">
          <source>Name of the thread implementation:</source>
          <target state="translated">スレッドの実装名。</target>
        </trans-unit>
        <trans-unit id="552b247919a3a4142c7193f3218e6c006dc56731" translate="yes" xml:space="preserve">
          <source>NameError</source>
          <target state="translated">NameError</target>
        </trans-unit>
        <trans-unit id="9aded8be679f83c11f74ee1bff7f85682a20e807" translate="yes" xml:space="preserve">
          <source>Named groups can also be referred to by their index:</source>
          <target state="translated">名前付きグループは、そのインデックスで参照することもできます。</target>
        </trans-unit>
        <trans-unit id="c28e1ee5f518cf29efb67d882148a0b1e5416250" translate="yes" xml:space="preserve">
          <source>Named groups can be referenced in three contexts. If the pattern is &lt;code&gt;(?P&amp;lt;quote&amp;gt;['&quot;]).*?(?P=quote)&lt;/code&gt; (i.e. matching a string quoted with either single or double quotes):</source>
          <target state="translated">名前付きグループは、3つのコンテキストで参照できます。パターンが &lt;code&gt;(?P&amp;lt;quote&amp;gt;['&quot;]).*?(?P=quote)&lt;/code&gt; （つまり、単一引用符または二重引用符で引用された文字列に一致）：</target>
        </trans-unit>
        <trans-unit id="f16a4120b764cba8959d773cf7f3b0e19c88a175" translate="yes" xml:space="preserve">
          <source>Named tuple instances do not have per-instance dictionaries, so they are lightweight and require no more memory than regular tuples.</source>
          <target state="translated">名前付きタプルインスタンスはインスタンスごとの辞書を持たないので、通常のタプルよりも軽量でメモリを必要としません。</target>
        </trans-unit>
        <trans-unit id="f512fe216c8d2627c3f288b9c1b60f1f0813d360" translate="yes" xml:space="preserve">
          <source>Named tuples are especially useful for assigning field names to result tuples returned by the &lt;a href=&quot;csv#module-csv&quot;&gt;&lt;code&gt;csv&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;sqlite3#module-sqlite3&quot;&gt;&lt;code&gt;sqlite3&lt;/code&gt;&lt;/a&gt; modules:</source>
          <target state="translated">名前付きタプルは、&lt;a href=&quot;csv#module-csv&quot;&gt; &lt;code&gt;csv&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;sqlite3#module-sqlite3&quot;&gt; &lt;code&gt;sqlite3&lt;/code&gt; &lt;/a&gt;モジュールによって返される結果タプルにフィールド名を割り当てる場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="d560ba60fd40808c605c894ca61edab52b60a8f7" translate="yes" xml:space="preserve">
          <source>Named tuples assign meaning to each position in a tuple and allow for more readable, self-documenting code. They can be used wherever regular tuples are used, and they add the ability to access fields by name instead of position index.</source>
          <target state="translated">名前付きタプルは、タプルの各位置に意味を割り当て、より読みやすく、自己文書化されたコードを作成することができます。名前付きタプルは、通常のタプルが使用されている場所であればどこでも使用することができ、位置インデックスの代わりに名前でフィールドにアクセスする機能が追加されます。</target>
        </trans-unit>
        <trans-unit id="138d23bf87d91f2cf8e499a38b28a27198431782" translate="yes" xml:space="preserve">
          <source>NamedNodeMap Objects</source>
          <target state="translated">NamedNodeMap オブジェクト</target>
        </trans-unit>
        <trans-unit id="79151ef5523cbb3688933e1d2359c827b97b6dba" translate="yes" xml:space="preserve">
          <source>Names in both &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt;, such that the type differs between the directories, or names for which &lt;a href=&quot;os#os.stat&quot;&gt;&lt;code&gt;os.stat()&lt;/code&gt;&lt;/a&gt; reports an error.</source>
          <target state="translated">&lt;em&gt;a&lt;/em&gt;と&lt;em&gt;bの&lt;/em&gt;両方の名前。タイプがディレクトリ間で異なるか、&lt;a href=&quot;os#os.stat&quot;&gt; &lt;code&gt;os.stat()&lt;/code&gt; &lt;/a&gt;がエラーを報告する名前。</target>
        </trans-unit>
        <trans-unit id="0a0bec580c91a0db0dd9741e0f59ccc6c55e7006" translate="yes" xml:space="preserve">
          <source>Namespace-aware variant of &lt;a href=&quot;#xml.sax.xmlreader.AttributesImpl&quot;&gt;&lt;code&gt;AttributesImpl&lt;/code&gt;&lt;/a&gt;, which will be passed to &lt;code&gt;startElementNS()&lt;/code&gt;. It is derived from &lt;a href=&quot;#xml.sax.xmlreader.AttributesImpl&quot;&gt;&lt;code&gt;AttributesImpl&lt;/code&gt;&lt;/a&gt;, but understands attribute names as two-tuples of &lt;em&gt;namespaceURI&lt;/em&gt; and &lt;em&gt;localname&lt;/em&gt;. In addition, it provides a number of methods expecting qualified names as they appear in the original document. This class implements the &lt;code&gt;AttributesNS&lt;/code&gt; interface (see section &lt;a href=&quot;#attributes-ns-objects&quot;&gt;The AttributesNS Interface&lt;/a&gt;).</source>
          <target state="translated">名前空間を認識する&lt;a href=&quot;#xml.sax.xmlreader.AttributesImpl&quot;&gt; &lt;code&gt;AttributesImpl&lt;/code&gt; の&lt;/a&gt;バリアント。これは &lt;code&gt;startElementNS()&lt;/code&gt; に渡されます。これは&lt;a href=&quot;#xml.sax.xmlreader.AttributesImpl&quot;&gt; &lt;code&gt;AttributesImpl&lt;/code&gt; &lt;/a&gt;から派生していますが、属性名を&lt;em&gt;namespaceURI&lt;/em&gt;と&lt;em&gt;localnameの&lt;/em&gt; 2つのタプルとして理解します。さらに、元のドキュメントに表示される修飾名を期待する多くのメソッドを提供します。このクラスを実装 &lt;code&gt;AttributesNS&lt;/code&gt; のインターフェース（セクションを参照&lt;a href=&quot;#attributes-ns-objects&quot;&gt;ザ・AttributesNSインタフェース&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="3fac676b9daa5e7147af0e960a2d8869c1122f19" translate="yes" xml:space="preserve">
          <source>Naming your mocks</source>
          <target state="translated">モックに名前をつける</target>
        </trans-unit>
        <trans-unit id="3e8980fc43ff1044a18189e78dedc1df9a62b49e" translate="yes" xml:space="preserve">
          <source>Native byte order is big-endian or little-endian, depending on the host system. For example, Intel x86 and AMD64 (x86-64) are little-endian; Motorola 68000 and PowerPC G5 are big-endian; ARM and Intel Itanium feature switchable endianness (bi-endian). Use &lt;code&gt;sys.byteorder&lt;/code&gt; to check the endianness of your system.</source>
          <target state="translated">ホストシステムに応じて、ネイティブバイトオーダーはビッグエンディアンまたはリトルエンディアンです。たとえば、Intel x86およびAMD64（x86-64）はリトルエンディアンです。Motorola 68000とPowerPC G5はビッグエンディアンです。ARMとIntel Itaniumは、切り替え可能なエンディアン（バイエンディアン）を備えています。 &lt;code&gt;sys.byteorder&lt;/code&gt; を使用して、システムのエンディアンを確認します。</target>
        </trans-unit>
        <trans-unit id="48f10fdc477f6339c64bce4467bf56cec228d333" translate="yes" xml:space="preserve">
          <source>Native size and alignment are determined using the C compiler&amp;rsquo;s &lt;code&gt;sizeof&lt;/code&gt; expression. This is always combined with native byte order.</source>
          <target state="translated">ネイティブサイズと配置は、Cコンパイラの &lt;code&gt;sizeof&lt;/code&gt; 式を使用して決定されます。これは常にネイティブバイトオーダーと組み合わされます。</target>
        </trans-unit>
        <trans-unit id="517a1d8d49b78127b5bb2acf6015f7707345aa2e" translate="yes" xml:space="preserve">
          <source>Navigating inside a directory tree:</source>
          <target state="translated">ディレクトリツリー内を移動します。</target>
        </trans-unit>
        <trans-unit id="987fc48a30ea30d92d41a6019a3ed94eb415d66d" translate="yes" xml:space="preserve">
          <source>Negation (Arithmetic)</source>
          <target state="translated">否定(算数</target>
        </trans-unit>
        <trans-unit id="627e9d13ddc6c294f7ec2e115eee5c51e4b0a37a" translate="yes" xml:space="preserve">
          <source>Negation (Logical)</source>
          <target state="translated">否定(論理的</target>
        </trans-unit>
        <trans-unit id="b55a8cef5977e78a89ae2e69772eef902ec4a5a5" translate="yes" xml:space="preserve">
          <source>Negative acknowledgement</source>
          <target state="translated">否定的な認識</target>
        </trans-unit>
        <trans-unit id="34c7643d5f745ab08c69c16dd12140498edf58a7" translate="yes" xml:space="preserve">
          <source>Negative shift counts are illegal and cause a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; to be raised.</source>
          <target state="translated">負のシフトカウントは不正であり、&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="32487c26ecab149a196fce5321757c6b3bf4b876" translate="yes" xml:space="preserve">
          <source>Nested structures can also be initialized in the constructor in several ways:</source>
          <target state="translated">入れ子になった構造体は、いくつかの方法でコンストラクタで初期化することもできます。</target>
        </trans-unit>
        <trans-unit id="6b24ed9821e96a2648c5646b75130ceb97178a4c" translate="yes" xml:space="preserve">
          <source>Nesting Patch Decorators</source>
          <target state="translated">ネスティングパッチデコレーター</target>
        </trans-unit>
        <trans-unit id="ea31f50cab713b0f124052f1b7a16defcb810ab2" translate="yes" xml:space="preserve">
          <source>Nesting Patches</source>
          <target state="translated">ネスティングパッチ</target>
        </trans-unit>
        <trans-unit id="48f4eff85da085dead78d399f32b4afe378e5d2d" translate="yes" xml:space="preserve">
          <source>Nesting arguments and more complex examples:</source>
          <target state="translated">引数のネスティングとより複雑な例</target>
        </trans-unit>
        <trans-unit id="387c36a7e2c55b1e37b061b1ad887cc307968414" translate="yes" xml:space="preserve">
          <source>Netscape protocol strictness switches:</source>
          <target state="translated">Netscapeのプロトコル厳格化スイッチ。</target>
        </trans-unit>
        <trans-unit id="8baad1cbc284c12f56ea33b670eb34325f6b8199" translate="yes" xml:space="preserve">
          <source>Network IO</source>
          <target state="translated">ネットワークIO</target>
        </trans-unit>
        <trans-unit id="82a92bfa4dd74a7c277b6e280e7993e24e6bd37b" translate="yes" xml:space="preserve">
          <source>Network dropped connection because of reset</source>
          <target state="translated">リセットによりネットワークの接続が切断された</target>
        </trans-unit>
        <trans-unit id="ea849e260b8735345217e4f53f113c9fcde5b394" translate="yes" xml:space="preserve">
          <source>Network is down</source>
          <target state="translated">ネットワークがダウンしています</target>
        </trans-unit>
        <trans-unit id="d34a1412dd6535ceabe7960d72728113a96b875c" translate="yes" xml:space="preserve">
          <source>Network is unreachable</source>
          <target state="translated">ネットワークに接続できない</target>
        </trans-unit>
        <trans-unit id="f1187f91a6b9526e3ad1f52e3394c4d7df1155f3" translate="yes" xml:space="preserve">
          <source>Network location part</source>
          <target state="translated">ネットワークロケーション部</target>
        </trans-unit>
        <trans-unit id="a94bfe6962e04d8964bb10b7ee9c6ed49863a34f" translate="yes" xml:space="preserve">
          <source>Network objects</source>
          <target state="translated">ネットワークオブジェクト</target>
        </trans-unit>
        <trans-unit id="d002009562d56b5b62febaf56a1d9b00d7976530" translate="yes" xml:space="preserve">
          <source>Network objects can act as containers of addresses. Some examples:</source>
          <target state="translated">ネットワークオブジェクトは、アドレスのコンテナとして機能することができます。いくつかの例があります。</target>
        </trans-unit>
        <trans-unit id="20fcf7eba0d4de1e05964bd5839c098f8acebea8" translate="yes" xml:space="preserve">
          <source>Network objects can be compared with the usual set of logical operators. Network objects are ordered first by network address, then by net mask.</source>
          <target state="translated">ネットワークオブジェクトは、通常の論理演算子のセットと比較することができます。ネットワークオブジェクトは、最初にネットワークアドレス、次にネットマスクの順に並べられます。</target>
        </trans-unit>
        <trans-unit id="9fb3a6d9875537b1c0c38a2431cc632cb829f8a7" translate="yes" xml:space="preserve">
          <source>Network objects can be iterated to list all the addresses belonging to the network. For iteration, &lt;em&gt;all&lt;/em&gt; hosts are returned, including unusable hosts (for usable hosts, use the &lt;a href=&quot;#ipaddress.IPv4Network.hosts&quot;&gt;&lt;code&gt;hosts()&lt;/code&gt;&lt;/a&gt; method). An example:</source>
          <target state="translated">ネットワークオブジェクトを反復して、ネットワークに属するすべてのアドレスをリストできます。反復の場合、使用できないホストを含​​む&lt;em&gt;すべての&lt;/em&gt;ホストが返されます（使用可能なホストの場合は、&lt;a href=&quot;#ipaddress.IPv4Network.hosts&quot;&gt; &lt;code&gt;hosts()&lt;/code&gt; &lt;/a&gt;メソッドを使用します）。例：</target>
        </trans-unit>
        <trans-unit id="1c620c8b990249735711860cb7b51cafd949fab4" translate="yes" xml:space="preserve">
          <source>Network objects support some operators. Unless stated otherwise, operators can only be applied between compatible objects (i.e. IPv4 with IPv4, IPv6 with IPv6).</source>
          <target state="translated">ネットワークオブジェクトは、いくつかの演算子をサポートしています。特に明記されていない限り、演算子は互換性のあるオブジェクト間でのみ適用することができます(すなわち、IPv4とIPv4、IPv6とIPv6)。</target>
        </trans-unit>
        <trans-unit id="94d3480ab302bd240a4a2e92c94a41facba908a0" translate="yes" xml:space="preserve">
          <source>Networking &amp;amp; Interprocess Communication</source>
          <target state="translated">ネットワーキングとプロセス間通信</target>
        </trans-unit>
        <trans-unit id="173aff8fcb77fae19c3b7a5cfe41672fc9b21ae0" translate="yes" xml:space="preserve">
          <source>Networking and IPC</source>
          <target state="translated">ネットワークとIPC</target>
        </trans-unit>
        <trans-unit id="7696b1c0a533c955797df8c40d2eb34ddf93894d" translate="yes" xml:space="preserve">
          <source>Networking and Interprocess Communication</source>
          <target state="translated">ネットワークとプロセス間通信</target>
        </trans-unit>
        <trans-unit id="4136d3e620eed1009afaac5766d22a562ea45d95" translate="yes" xml:space="preserve">
          <source>Networks as containers of addresses</source>
          <target state="translated">アドレスのコンテナとしてのネットワーク</target>
        </trans-unit>
        <trans-unit id="1b2021fe3ae1d663f2ee43b16a7c7f0fc183cecc" translate="yes" xml:space="preserve">
          <source>Never extract archives from untrusted sources without prior inspection. It is possible that files are created outside of &lt;em&gt;path&lt;/em&gt;, e.g. members that have absolute filenames starting with &lt;code&gt;&quot;/&quot;&lt;/code&gt; or filenames with two dots &lt;code&gt;&quot;..&quot;&lt;/code&gt;.</source>
          <target state="translated">事前の検査なしに、信頼できないソースからアーカイブを抽出しないでください。&lt;em&gt;パスの&lt;/em&gt;外にファイルが作成される可能性があります。たとえば、 &lt;code&gt;&quot;/&quot;&lt;/code&gt; 始まる絶対ファイル名または2つのドット &lt;code&gt;&quot;..&quot;&lt;/code&gt; 始まるファイル名を持つメンバー。</target>
        </trans-unit>
        <trans-unit id="c62e809819381e83090bced1e2173f918be1f3b0" translate="yes" xml:space="preserve">
          <source>Never extract archives from untrusted sources without prior inspection. It is possible that files are created outside of &lt;em&gt;path&lt;/em&gt;, e.g. members that have absolute filenames starting with &lt;code&gt;&quot;/&quot;&lt;/code&gt; or filenames with two dots &lt;code&gt;&quot;..&quot;&lt;/code&gt;. This module attempts to prevent that. See &lt;a href=&quot;#zipfile.ZipFile.extract&quot;&gt;&lt;code&gt;extract()&lt;/code&gt;&lt;/a&gt; note.</source>
          <target state="translated">事前の検査なしに、信頼できないソースからアーカイブを抽出しないでください。&lt;em&gt;パスの&lt;/em&gt;外にファイルが作成される可能性があります。たとえば、 &lt;code&gt;&quot;/&quot;&lt;/code&gt; 始まる絶対ファイル名または2つのドット &lt;code&gt;&quot;..&quot;&lt;/code&gt; 始まるファイル名を持つメンバー。このモジュールはそれを防止しようとします。&lt;a href=&quot;#zipfile.ZipFile.extract&quot;&gt; &lt;code&gt;extract()&lt;/code&gt; の&lt;/a&gt;注を参照してください。</target>
        </trans-unit>
        <trans-unit id="ccaf85ee75327fc748e39faca2166199011de41a" translate="yes" xml:space="preserve">
          <source>New File</source>
          <target state="translated">新規ファイル</target>
        </trans-unit>
        <trans-unit id="409292424eb18087ed2f720f75aa3dc7008467fa" translate="yes" xml:space="preserve">
          <source>New Import Hooks</source>
          <target state="translated">新規輸入フック</target>
        </trans-unit>
        <trans-unit id="f67997d268c1af98301a345d50239d3f892a0eb7" translate="yes" xml:space="preserve">
          <source>New Indent Width</source>
          <target state="translated">新しいインデント幅</target>
        </trans-unit>
        <trans-unit id="12a8cecf358397da137dcdd0fe30e38555ec9cfd" translate="yes" xml:space="preserve">
          <source>New contexts can also be created using the &lt;a href=&quot;#decimal.Context&quot;&gt;&lt;code&gt;Context&lt;/code&gt;&lt;/a&gt; constructor described below. In addition, the module provides three pre-made contexts:</source>
          <target state="translated">新しいコンテキストは、以下で説明する&lt;a href=&quot;#decimal.Context&quot;&gt; &lt;code&gt;Context&lt;/code&gt; &lt;/a&gt;コンストラクターを使用して作成することもできます。さらに、モジュールは3つの事前に作成されたコンテキストを提供します。</target>
        </trans-unit>
        <trans-unit id="7a1d94154a6598cae8341b022c23e40f99e28431" translate="yes" xml:space="preserve">
          <source>New hash objects are created by calling constructor functions:</source>
          <target state="translated">新しいハッシュオブジェクトはコンストラクタ関数を呼び出すことで作成されます。</target>
        </trans-unit>
        <trans-unit id="f0e3ef54012ca2003232ea452f70d451c14796eb" translate="yes" xml:space="preserve">
          <source>New in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3044731cb14928152cff1cf7dc1f4fa6c076e116" translate="yes" xml:space="preserve">
          <source>New in version 3.1.</source>
          <target state="translated">バージョン3.1の新機能。</target>
        </trans-unit>
        <trans-unit id="3490f0090dbcdc45af81e4d62ca30e6b962ba596" translate="yes" xml:space="preserve">
          <source>New in version 3.1: Added under the name &lt;code&gt;assertRaisesRegexp&lt;/code&gt;.</source>
          <target state="translated">バージョン3.1の新機能： &lt;code&gt;assertRaisesRegexp&lt;/code&gt; という名前で追加されました。</target>
        </trans-unit>
        <trans-unit id="5aaafe02546b7ea7e8be1083e6726b39beceb3be" translate="yes" xml:space="preserve">
          <source>New in version 3.1: Added under the name &lt;code&gt;assertRegexpMatches&lt;/code&gt;.</source>
          <target state="translated">バージョン3.1の新機能： &lt;code&gt;assertRegexpMatches&lt;/code&gt; という名前で追加されました。</target>
        </trans-unit>
        <trans-unit id="0cdd0395e78a0dc6664ff5b4d4ec37a63a481081" translate="yes" xml:space="preserve">
          <source>New in version 3.1: The &lt;code&gt;'surrogateescape'&lt;/code&gt; and &lt;code&gt;'surrogatepass'&lt;/code&gt; error handlers.</source>
          <target state="translated">バージョン3.1の新機能： &lt;code&gt;'surrogateescape'&lt;/code&gt; および &lt;code&gt;'surrogatepass'&lt;/code&gt; エラーハンドラー。</target>
        </trans-unit>
        <trans-unit id="32c6d6c31b4876c85b341703ff1176d48fc1033d" translate="yes" xml:space="preserve">
          <source>New in version 3.1: The &lt;code&gt;SEEK_*&lt;/code&gt; constants.</source>
          <target state="translated">バージョン3.1の新機能： &lt;code&gt;SEEK_*&lt;/code&gt; 定数。</target>
        </trans-unit>
        <trans-unit id="ff81f06c49fb2cc34747b6d94a1ad63a6cf4f4f3" translate="yes" xml:space="preserve">
          <source>New in version 3.1: The &lt;em&gt;skip&lt;/em&gt; argument.</source>
          <target state="translated">バージョン3.1の新機能：&lt;em&gt;スキップ&lt;/em&gt;引数。</target>
        </trans-unit>
        <trans-unit id="aec3464ceeab8cf46a16efea3d5d6d17ad876e19" translate="yes" xml:space="preserve">
          <source>New in version 3.2.</source>
          <target state="translated">バージョン3.2の新機能。</target>
        </trans-unit>
        <trans-unit id="db31bd421783154e9fc48afcb4954a828a5d37e2" translate="yes" xml:space="preserve">
          <source>New in version 3.2.3: The &lt;code&gt;hash_randomization&lt;/code&gt; attribute.</source>
          <target state="translated">バージョン3.2.3の新機能： &lt;code&gt;hash_randomization&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="c0dcdf7c449d4eea6b69af79b67c72ca17c53ff2" translate="yes" xml:space="preserve">
          <source>New in version 3.2: &lt;a href=&quot;#array.array.fromstring&quot;&gt;&lt;code&gt;fromstring()&lt;/code&gt;&lt;/a&gt; is renamed to &lt;a href=&quot;#array.array.frombytes&quot;&gt;&lt;code&gt;frombytes()&lt;/code&gt;&lt;/a&gt; for clarity.</source>
          <target state="translated">バージョン3.2の新機能：明確にするために、&lt;a href=&quot;#array.array.fromstring&quot;&gt; &lt;code&gt;fromstring()&lt;/code&gt; &lt;/a&gt;はfrombytes（）に名前が変更され&lt;a href=&quot;#array.array.frombytes&quot;&gt; &lt;code&gt;frombytes()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="488e827468c8402f0be6892563ca51a7f7278aa7" translate="yes" xml:space="preserve">
          <source>New in version 3.2: &lt;a href=&quot;#array.array.tostring&quot;&gt;&lt;code&gt;tostring()&lt;/code&gt;&lt;/a&gt; is renamed to &lt;a href=&quot;#array.array.tobytes&quot;&gt;&lt;code&gt;tobytes()&lt;/code&gt;&lt;/a&gt; for clarity.</source>
          <target state="translated">バージョン3.2の新機能：&lt;a href=&quot;#array.array.tostring&quot;&gt; &lt;code&gt;tostring()&lt;/code&gt; &lt;/a&gt;名前に変更された&lt;a href=&quot;#array.array.tobytes&quot;&gt; &lt;code&gt;tobytes()&lt;/code&gt; &lt;/a&gt;明確にするため。</target>
        </trans-unit>
        <trans-unit id="65be5f1abc346b5a084ab6611d2dcd14b97b4c5c" translate="yes" xml:space="preserve">
          <source>New in version 3.2: &lt;a href=&quot;#unittest.TestCase.assertNotRegex&quot;&gt;&lt;code&gt;assertNotRegex()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">バージョン3.2の新機能：&lt;a href=&quot;#unittest.TestCase.assertNotRegex&quot;&gt; &lt;code&gt;assertNotRegex()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8b17191ede606c26b4c8116dfbc25448c9f8f280" translate="yes" xml:space="preserve">
          <source>New in version 3.2: &lt;code&gt;pdb.py&lt;/code&gt; now accepts a &lt;code&gt;-c&lt;/code&gt; option that executes commands as if given in a &lt;code&gt;.pdbrc&lt;/code&gt; file, see &lt;a href=&quot;#debugger-commands&quot;&gt;Debugger Commands&lt;/a&gt;.</source>
          <target state="translated">バージョン3.2の新機能： &lt;code&gt;pdb.py&lt;/code&gt; が、 &lt;code&gt;.pdbrc&lt;/code&gt; ファイルで指定されているかのようにコマンドを実行する &lt;code&gt;-c&lt;/code&gt; オプションを受け入れるようになりました。「&lt;a href=&quot;#debugger-commands&quot;&gt;デバッガーコマンド&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="fc5a5d84b89ad5a4ba8ce3020321268ef0fa4d48" translate="yes" xml:space="preserve">
          <source>New in version 3.2: &lt;em&gt;body&lt;/em&gt; can now be an iterable.</source>
          <target state="translated">バージョン3.2の新機能：&lt;em&gt;body&lt;/em&gt;を反復可能にすることができます。</target>
        </trans-unit>
        <trans-unit id="8a92a77a7766db733546c9b77cd133915e1079c0" translate="yes" xml:space="preserve">
          <source>New in version 3.2: &lt;em&gt;data&lt;/em&gt; can be an iterable object.</source>
          <target state="translated">バージョン3.2の新機能：&lt;em&gt;データ&lt;/em&gt;は反復可能なオブジェクトに&lt;em&gt;する&lt;/em&gt;ことができます。</target>
        </trans-unit>
        <trans-unit id="492fab092548a082cfe9773b6e25423f9e425e63" translate="yes" xml:space="preserve">
          <source>New in version 3.2: &lt;em&gt;maxtasksperchild&lt;/em&gt;</source>
          <target state="translated">バージョン3.2の新機能：&lt;em&gt;maxtasksperchild&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9af04aa0a51b0152280c245269d849a5d155aaa7" translate="yes" xml:space="preserve">
          <source>New in version 3.2: Added support for the context management protocol.</source>
          <target state="translated">バージョン3.2の新機能:コンテキスト管理プロトコルのサポートを追加しました。</target>
        </trans-unit>
        <trans-unit id="c7e70655ae33c518c88446ef6624470fc4ce9d29" translate="yes" xml:space="preserve">
          <source>New in version 3.2: Added the ability to use &lt;a href=&quot;#zipfile.ZipFile&quot;&gt;&lt;code&gt;ZipFile&lt;/code&gt;&lt;/a&gt; as a context manager.</source>
          <target state="translated">バージョン3.2の新機能：&lt;a href=&quot;#zipfile.ZipFile&quot;&gt; &lt;code&gt;ZipFile&lt;/code&gt; &lt;/a&gt;をコンテキストマネージャーとして使用する機能が追加されました。</target>
        </trans-unit>
        <trans-unit id="d09766d62b8d99b219d60b276118965866ee5426" translate="yes" xml:space="preserve">
          <source>New in version 3.2: Automatic addition of the &lt;code&gt;__wrapped__&lt;/code&gt; attribute.</source>
          <target state="translated">バージョン3.2の新機能： &lt;code&gt;__wrapped__&lt;/code&gt; 属性の自動追加。</target>
        </trans-unit>
        <trans-unit id="6a2cb5a7143cca2378773c116c1731a3835404ed" translate="yes" xml:space="preserve">
          <source>New in version 3.2: Context manager support.</source>
          <target state="translated">バージョン3.2の新機能:コンテキストマネージャのサポート。</target>
        </trans-unit>
        <trans-unit id="e4691f22ec6af8115c8ef643b32bf896e13020ae" translate="yes" xml:space="preserve">
          <source>New in version 3.2: Copying of the &lt;code&gt;__annotations__&lt;/code&gt; attribute by default.</source>
          <target state="translated">バージョン3.2の新機能：デフォルトでの &lt;code&gt;__annotations__&lt;/code&gt; 属性のコピー。</target>
        </trans-unit>
        <trans-unit id="d43b8283dd2a98a7af1fa11e7c76adbd21232c7c" translate="yes" xml:space="preserve">
          <source>New in version 3.2: Optional &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;lineno&lt;/code&gt; attributes and arguments to &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt; were added.</source>
          <target state="translated">バージョン3.2の新機能：オプションの &lt;code&gt;source&lt;/code&gt; および &lt;code&gt;lineno&lt;/code&gt; 属性と&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt;への引数が追加されました。</target>
        </trans-unit>
        <trans-unit id="fafccb4e9a5405ae3b834787685cd7c2b125b7e3" translate="yes" xml:space="preserve">
          <source>New in version 3.2: Replaces &lt;a href=&quot;#configparser.ConfigParser.readfp&quot;&gt;&lt;code&gt;readfp()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">バージョン3.2の新機能：&lt;a href=&quot;#configparser.ConfigParser.readfp&quot;&gt; &lt;code&gt;readfp()&lt;/code&gt; を&lt;/a&gt;置き換えます。</target>
        </trans-unit>
        <trans-unit id="28b0f51bd56d33241ea9b5ddcc94c77be36c2020" translate="yes" xml:space="preserve">
          <source>New in version 3.2: Restoration of the &lt;code&gt;rot_13&lt;/code&gt; text transform.</source>
          <target state="translated">バージョン3.2の新機能： &lt;code&gt;rot_13&lt;/code&gt; テキスト変換の復元。</target>
        </trans-unit>
        <trans-unit id="970ab611ee1b762f1709817732af44838b6f66a1" translate="yes" xml:space="preserve">
          <source>New in version 3.2: Restoration of the binary transforms.</source>
          <target state="translated">バージョン3.2の新機能:バイナリ変換の復元。</target>
        </trans-unit>
        <trans-unit id="9dcceb3168131b28f25a8473e7a17f54fc795c88" translate="yes" xml:space="preserve">
          <source>New in version 3.2: The &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; marker.</source>
          <target state="translated">バージョン3.2の新機能： &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; マーカー。</target>
        </trans-unit>
        <trans-unit id="b402819ef1b2aed8bcd076ddf219c4cc93fd00a5" translate="yes" xml:space="preserve">
          <source>New in version 3.2: The &lt;em&gt;annotate&lt;/em&gt; argument.</source>
          <target state="translated">バージョン3.2の新機能：&lt;em&gt;annotate&lt;/em&gt;引数。</target>
        </trans-unit>
        <trans-unit id="e55bd4f980e8fc073a71ff35dfc24e9dd75e20d9" translate="yes" xml:space="preserve">
          <source>New in version 3.2: The &lt;em&gt;autojunk&lt;/em&gt; parameter.</source>
          <target state="translated">バージョン3.2の新機能：&lt;em&gt;autojunk&lt;/em&gt;パラメーター。</target>
        </trans-unit>
        <trans-unit id="2de34420d3f8e77e82c57b967288676e7b162df3" translate="yes" xml:space="preserve">
          <source>New in version 3.2: The &lt;em&gt;bjunk&lt;/em&gt; and &lt;em&gt;bpopular&lt;/em&gt; attributes.</source>
          <target state="translated">バージョン3.2の新機能：&lt;em&gt;bjunk&lt;/em&gt;および&lt;em&gt;bpopular&lt;/em&gt;属性。</target>
        </trans-unit>
        <trans-unit id="07dfce94408fc7eb43edf07bf810590d083842d0" translate="yes" xml:space="preserve">
          <source>New in version 3.2: The &lt;em&gt;encoding&lt;/em&gt; parameter. Previously, all files were read using the default encoding for &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">バージョン3.2の新機能：&lt;em&gt;エンコーディング&lt;/em&gt;パラメータ。以前は、すべてのファイルは&lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; の&lt;/a&gt;デフォルトのエンコーディングを使用して読み取られていました。</target>
        </trans-unit>
        <trans-unit id="e00307d0d1ac1787c787512ca063499efdae81fb" translate="yes" xml:space="preserve">
          <source>New in version 3.2: The &lt;em&gt;exist_ok&lt;/em&gt; parameter.</source>
          <target state="translated">バージョン3.2の新機能：&lt;em&gt;exist_ok&lt;/em&gt;パラメーター。</target>
        </trans-unit>
        <trans-unit id="5eff261c50725aaf56234c60b7ad321e0b6d7a28" translate="yes" xml:space="preserve">
          <source>New in version 3.2: The &lt;em&gt;nosigint&lt;/em&gt; argument. Previously, a SIGINT handler was never set by Pdb.</source>
          <target state="translated">バージョン3.2の新機能：&lt;em&gt;nosigint&lt;/em&gt;引数。以前は、SIGINTハンドラーはPdbによって設定されていませんでした。</target>
        </trans-unit>
        <trans-unit id="d9d3ff17279278f1fbe533d1cb8d4a4e101a51cb" translate="yes" xml:space="preserve">
          <source>New in version 3.2: The &lt;em&gt;optimize&lt;/em&gt; parameter.</source>
          <target state="translated">バージョン3.2の新機能：&lt;em&gt;最適化&lt;/em&gt;パラメーター。</target>
        </trans-unit>
        <trans-unit id="e360c3f1e3102b0b5025a254db53852cc697487a" translate="yes" xml:space="preserve">
          <source>New in version 3.2: The &lt;em&gt;short_empty_elements&lt;/em&gt; parameter.</source>
          <target state="translated">バージョン3.2の新機能：&lt;em&gt;short_empty_elements&lt;/em&gt;パラメーター。</target>
        </trans-unit>
        <trans-unit id="0d065c9ae385620cf6d16a31d56d0cbb370df8a1" translate="yes" xml:space="preserve">
          <source>New in version 3.2: The command-line options &lt;code&gt;-b&lt;/code&gt;, &lt;code&gt;-c&lt;/code&gt; and &lt;code&gt;-f&lt;/code&gt; were added.</source>
          <target state="translated">バージョン3.2の新機能：コマンドラインオプション &lt;code&gt;-b&lt;/code&gt; 、 &lt;code&gt;-c&lt;/code&gt; および &lt;code&gt;-f&lt;/code&gt; が追加されました。</target>
        </trans-unit>
        <trans-unit id="a75b199eafd71fb28b679c45575e353e48ba2b36" translate="yes" xml:space="preserve">
          <source>New in version 3.2: This class was previously named &lt;code&gt;_TextTestResult&lt;/code&gt;. The old name still exists as an alias but is deprecated.</source>
          <target state="translated">バージョン3.2の新機能：このクラスは、以前は &lt;code&gt;_TextTestResult&lt;/code&gt; という名前でした。古い名前はエイリアスとしてまだ存在しますが、非推奨です。</target>
        </trans-unit>
        <trans-unit id="82b107c9c10c5a55aee4a0e3debb2416f6131861" translate="yes" xml:space="preserve">
          <source>New in version 3.2: This function has been provided, along with &lt;a href=&quot;#logging.getLogRecordFactory&quot;&gt;&lt;code&gt;getLogRecordFactory()&lt;/code&gt;&lt;/a&gt;, to allow developers more control over how the &lt;a href=&quot;#logging.LogRecord&quot;&gt;&lt;code&gt;LogRecord&lt;/code&gt;&lt;/a&gt; representing a logging event is constructed.</source>
          <target state="translated">バージョン3.2の新機能：この関数は&lt;a href=&quot;#logging.getLogRecordFactory&quot;&gt; &lt;code&gt;getLogRecordFactory()&lt;/code&gt; &lt;/a&gt;とともに提供され、開発者がロギングイベントを表す&lt;a href=&quot;#logging.LogRecord&quot;&gt; &lt;code&gt;LogRecord&lt;/code&gt; の&lt;/a&gt;構築方法をより詳細に制御できるようにします。</target>
        </trans-unit>
        <trans-unit id="196f39022abdb30b19d21c28520cda8cdeace93c" translate="yes" xml:space="preserve">
          <source>New in version 3.2: This function has been provided, along with &lt;a href=&quot;#logging.setLogRecordFactory&quot;&gt;&lt;code&gt;setLogRecordFactory()&lt;/code&gt;&lt;/a&gt;, to allow developers more control over how the &lt;a href=&quot;#logging.LogRecord&quot;&gt;&lt;code&gt;LogRecord&lt;/code&gt;&lt;/a&gt; representing a logging event is constructed.</source>
          <target state="translated">バージョン3.2の新機能：この関数は&lt;a href=&quot;#logging.setLogRecordFactory&quot;&gt; &lt;code&gt;setLogRecordFactory()&lt;/code&gt; &lt;/a&gt;とともに提供され、開発者はロギングイベントを表す&lt;a href=&quot;#logging.LogRecord&quot;&gt; &lt;code&gt;LogRecord&lt;/code&gt; の&lt;/a&gt;構築方法をより詳細に制御できます。</target>
        </trans-unit>
        <trans-unit id="5feff224bf3a58e8d61eacdd8a8522e0dbed87b0" translate="yes" xml:space="preserve">
          <source>New in version 3.2: This function was first removed in Python 3.0 and then brought back in Python 3.2.</source>
          <target state="translated">バージョン3.2の新機能:この関数はPython 3.0で削除され、Python 3.2で復活しました。</target>
        </trans-unit>
        <trans-unit id="da106e3ee3289214b471fcbb56de045708a54150" translate="yes" xml:space="preserve">
          <source>New in version 3.2: Windows support.</source>
          <target state="translated">バージョン3.2の新機能:Windowsのサポート。</target>
        </trans-unit>
        <trans-unit id="e656aeccfdd3bd906cae00fa7c0478f89eb5d3a9" translate="yes" xml:space="preserve">
          <source>New in version 3.3.</source>
          <target state="translated">バージョン3.3の新機能。</target>
        </trans-unit>
        <trans-unit id="f3e98ffdcb282b0853dcb031735ce601012ab4f1" translate="yes" xml:space="preserve">
          <source>New in version 3.3: &lt;code&gt;clear()&lt;/code&gt; and &lt;code&gt;copy()&lt;/code&gt; methods.</source>
          <target state="translated">バージョン3.3の新機能： &lt;code&gt;clear()&lt;/code&gt; および &lt;code&gt;copy()&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="c5e4a238bfa33077d729fa48ecf1b789826f4102" translate="yes" xml:space="preserve">
          <source>New in version 3.3: Added support for specifying &lt;em&gt;path&lt;/em&gt; as a file descriptor on some platforms.</source>
          <target state="translated">バージョン3.3の新機能：一部のプラットフォームでファイル記述子として&lt;em&gt;パス&lt;/em&gt;を指定するためのサポートが追加されました。</target>
        </trans-unit>
        <trans-unit id="16af71ee4e36ec0cae6b181b694b7f51956f7a0c" translate="yes" xml:space="preserve">
          <source>New in version 3.3: Added support for specifying &lt;em&gt;path&lt;/em&gt; as an open file descriptor for &lt;a href=&quot;#os.execve&quot;&gt;&lt;code&gt;execve()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">バージョン3.3の新機能：&lt;a href=&quot;#os.execve&quot;&gt; &lt;code&gt;execve()&lt;/code&gt; の&lt;/a&gt;オープンファイル記述子として&lt;em&gt;パス&lt;/em&gt;を指定するためのサポートが追加されました。</target>
        </trans-unit>
        <trans-unit id="038d2a2d4a390798684aa8f618e2a86258a63438" translate="yes" xml:space="preserve">
          <source>New in version 3.3: Added support for specifying &lt;em&gt;path&lt;/em&gt; as an open file descriptor, and the &lt;em&gt;dir_fd&lt;/em&gt; and &lt;em&gt;follow_symlinks&lt;/em&gt; arguments.</source>
          <target state="translated">バージョン3.3の新機能：開いているファイル記述子としての&lt;em&gt;パス&lt;/em&gt;、および&lt;em&gt;dir_fd&lt;/em&gt;と&lt;em&gt;follow_symlinks&lt;/em&gt;引数を指定するためのサポートが追加されました。</target>
        </trans-unit>
        <trans-unit id="c61f8f029e31102256de167c06ecfbdb5b027ab4" translate="yes" xml:space="preserve">
          <source>New in version 3.3: Added support for specifying &lt;em&gt;path&lt;/em&gt; as an open file descriptor, and the &lt;em&gt;dir_fd&lt;/em&gt;, &lt;em&gt;follow_symlinks&lt;/em&gt;, and &lt;em&gt;ns&lt;/em&gt; parameters.</source>
          <target state="translated">バージョン3.3の新機能：オープンファイル記述子としての&lt;em&gt;パス&lt;/em&gt;、および&lt;em&gt;dir_fd&lt;/em&gt;、&lt;em&gt;follow_symlinks&lt;/em&gt;、および&lt;em&gt;ns&lt;/em&gt;パラメーターを指定するためのサポートが追加されました。</target>
        </trans-unit>
        <trans-unit id="c25592d4be380fcbfc21e2a7e95a3669a8c8becd" translate="yes" xml:space="preserve">
          <source>New in version 3.3: Added support for specifying &lt;em&gt;path&lt;/em&gt; as an open file descriptor.</source>
          <target state="translated">バージョン3.3の新機能：開いているファイル記述子として&lt;em&gt;パス&lt;/em&gt;を指定するためのサポートが追加されました。</target>
        </trans-unit>
        <trans-unit id="76739bbab39d5c2710046bf45eec1397909326fd" translate="yes" xml:space="preserve">
          <source>New in version 3.3: Added support for unary plus, unary minus, and in-place multiset operations.</source>
          <target state="translated">バージョン3.3の新機能:単項プラス、単項マイナス、インプレースマルチセット操作のサポートを追加しました。</target>
        </trans-unit>
        <trans-unit id="046d02c5d1094d36422bcd5465bc69373e23f681" translate="yes" xml:space="preserve">
          <source>New in version 3.3: Added the &lt;a href=&quot;#os.stat_result.st_atime_ns&quot;&gt;&lt;code&gt;st_atime_ns&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.stat_result.st_mtime_ns&quot;&gt;&lt;code&gt;st_mtime_ns&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#os.stat_result.st_ctime_ns&quot;&gt;&lt;code&gt;st_ctime_ns&lt;/code&gt;&lt;/a&gt; members.</source>
          <target state="translated">バージョン3.3の新機能：&lt;a href=&quot;#os.stat_result.st_atime_ns&quot;&gt; &lt;code&gt;st_atime_ns&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.stat_result.st_mtime_ns&quot;&gt; &lt;code&gt;st_mtime_ns&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#os.stat_result.st_ctime_ns&quot;&gt; &lt;code&gt;st_ctime_ns&lt;/code&gt; &lt;/a&gt;メンバーが追加されました。</target>
        </trans-unit>
        <trans-unit id="7a588e30cae71f1b15d920765c3d80c0bf7800b8" translate="yes" xml:space="preserve">
          <source>New in version 3.3: Added the &lt;em&gt;dir_fd&lt;/em&gt; and &lt;em&gt;follow_symlinks&lt;/em&gt; arguments, specifying a file descriptor instead of a path.</source>
          <target state="translated">バージョン3.3の新機能：&lt;em&gt;dir_fd&lt;/em&gt;および&lt;em&gt;follow_symlinks&lt;/em&gt;引数を追加し、パスの代わりにファイル記述子を指定しました。</target>
        </trans-unit>
        <trans-unit id="216100c31adc18c23bb9e9b560bc677eca6633bd" translate="yes" xml:space="preserve">
          <source>New in version 3.3: Added the &lt;em&gt;dir_fd&lt;/em&gt; argument, and now allow &lt;em&gt;target_is_directory&lt;/em&gt; on non-Windows platforms.</source>
          <target state="translated">バージョン3.3の新機能：&lt;em&gt;dir_fd&lt;/em&gt;引数が追加され、Windows以外のプラットフォームで&lt;em&gt;target_is_directory&lt;/em&gt;が許可されるように&lt;em&gt;なり&lt;/em&gt;ました。</target>
        </trans-unit>
        <trans-unit id="cb1fa9f44f4b3e986271d3360090ef64263dfa98" translate="yes" xml:space="preserve">
          <source>New in version 3.3: Added the &lt;em&gt;src_dir_fd&lt;/em&gt;, &lt;em&gt;dst_dir_fd&lt;/em&gt;, and &lt;em&gt;follow_symlinks&lt;/em&gt; arguments.</source>
          <target state="translated">バージョン3.3の新機能：&lt;em&gt;src_dir_fd&lt;/em&gt;、&lt;em&gt;dst_dir_fd&lt;/em&gt;、および&lt;em&gt;follow_symlinks&lt;/em&gt;引数を追加しました。</target>
        </trans-unit>
        <trans-unit id="690563f7aa9f77702829a99858275338d41ffc11" translate="yes" xml:space="preserve">
          <source>New in version 3.3: All the above &lt;a href=&quot;#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; subclasses were added.</source>
          <target state="translated">バージョン3.3の新機能：上記のすべての&lt;a href=&quot;#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;サブクラスが追加されました。</target>
        </trans-unit>
        <trans-unit id="d7c35a84efd3292c4e322bb6cd08bf0c445e5d0c" translate="yes" xml:space="preserve">
          <source>New in version 3.3: Connection objects now support the context management protocol &amp;ndash; see &lt;a href=&quot;stdtypes#typecontextmanager&quot;&gt;Context Manager Types&lt;/a&gt;. &lt;a href=&quot;stdtypes#contextmanager.__enter__&quot;&gt;&lt;code&gt;__enter__()&lt;/code&gt;&lt;/a&gt; returns the connection object, and &lt;a href=&quot;stdtypes#contextmanager.__exit__&quot;&gt;&lt;code&gt;__exit__()&lt;/code&gt;&lt;/a&gt; calls &lt;a href=&quot;#multiprocessing.connection.Connection.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">バージョン3.3の新機能：接続オブジェクトは、コンテキスト管理プロトコルをサポートするようになりました。「&lt;a href=&quot;stdtypes#typecontextmanager&quot;&gt;コンテキストマネージャーのタイプ」を&lt;/a&gt;参照してください。&lt;a href=&quot;stdtypes#contextmanager.__enter__&quot;&gt; &lt;code&gt;__enter__()&lt;/code&gt; &lt;/a&gt;は接続オブジェクトを返し、&lt;a href=&quot;stdtypes#contextmanager.__exit__&quot;&gt; &lt;code&gt;__exit__()&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;#multiprocessing.connection.Connection.close&quot;&gt; &lt;code&gt;close()&lt;/code&gt; を&lt;/a&gt;呼び出します。</target>
        </trans-unit>
        <trans-unit id="43b79ec2cfdf493c4c7ba024e42791b064af21b0" translate="yes" xml:space="preserve">
          <source>New in version 3.3: Formerly, this module was part of the &lt;a href=&quot;collections#module-collections&quot;&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">バージョン3.3の新機能：以前は、このモジュールは&lt;a href=&quot;collections#module-collections&quot;&gt; &lt;code&gt;collections&lt;/code&gt; &lt;/a&gt;モジュールの一部でした。</target>
        </trans-unit>
        <trans-unit id="7ebcbd28e34b67cd966b999669d0242ada456632" translate="yes" xml:space="preserve">
          <source>New in version 3.3: Listener objects now support the context management protocol &amp;ndash; see &lt;a href=&quot;stdtypes#typecontextmanager&quot;&gt;Context Manager Types&lt;/a&gt;. &lt;a href=&quot;stdtypes#contextmanager.__enter__&quot;&gt;&lt;code&gt;__enter__()&lt;/code&gt;&lt;/a&gt; returns the listener object, and &lt;a href=&quot;stdtypes#contextmanager.__exit__&quot;&gt;&lt;code&gt;__exit__()&lt;/code&gt;&lt;/a&gt; calls &lt;a href=&quot;#multiprocessing.connection.Listener.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">バージョン3.3の新機能：リスナーオブジェクトは、コンテキスト管理プロトコルをサポートするようになりました。「&lt;a href=&quot;stdtypes#typecontextmanager&quot;&gt;コンテキストマネージャーのタイプ」を&lt;/a&gt;参照してください。&lt;a href=&quot;stdtypes#contextmanager.__enter__&quot;&gt; &lt;code&gt;__enter__()&lt;/code&gt; &lt;/a&gt;はリスナーオブジェクトを返し、&lt;a href=&quot;stdtypes#contextmanager.__exit__&quot;&gt; &lt;code&gt;__exit__()&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;#multiprocessing.connection.Listener.close&quot;&gt; &lt;code&gt;close()&lt;/code&gt; を&lt;/a&gt;呼び出します。</target>
        </trans-unit>
        <trans-unit id="70103fb68f7f0cfa32aba69ba39031a736a2d76b" translate="yes" xml:space="preserve">
          <source>New in version 3.3: Pool objects now support the context management protocol &amp;ndash; see &lt;a href=&quot;stdtypes#typecontextmanager&quot;&gt;Context Manager Types&lt;/a&gt;. &lt;a href=&quot;stdtypes#contextmanager.__enter__&quot;&gt;&lt;code&gt;__enter__()&lt;/code&gt;&lt;/a&gt; returns the pool object, and &lt;a href=&quot;stdtypes#contextmanager.__exit__&quot;&gt;&lt;code&gt;__exit__()&lt;/code&gt;&lt;/a&gt; calls &lt;a href=&quot;#multiprocessing.pool.Pool.terminate&quot;&gt;&lt;code&gt;terminate()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">バージョン3.3の新機能：プールオブジェクトは、コンテキスト管理プロトコルをサポートするようになりました。「&lt;a href=&quot;stdtypes#typecontextmanager&quot;&gt;コンテキストマネージャーのタイプ」を&lt;/a&gt;参照してください。&lt;a href=&quot;stdtypes#contextmanager.__enter__&quot;&gt; &lt;code&gt;__enter__()&lt;/code&gt; &lt;/a&gt;はプールオブジェクトを返し、&lt;a href=&quot;stdtypes#contextmanager.__exit__&quot;&gt; &lt;code&gt;__exit__()&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;#multiprocessing.pool.Pool.terminate&quot;&gt; &lt;code&gt;terminate()&lt;/code&gt; を&lt;/a&gt;呼び出します。</target>
        </trans-unit>
        <trans-unit id="0564ad09da5d11fa74ab8521856c7a0ee08a4a38" translate="yes" xml:space="preserve">
          <source>New in version 3.3: Some operating systems could support additional values, like &lt;code&gt;os.SEEK_HOLE&lt;/code&gt; or &lt;code&gt;os.SEEK_DATA&lt;/code&gt;.</source>
          <target state="translated">バージョン3.3の新機能：一部のオペレーティングシステムでは、 &lt;code&gt;os.SEEK_HOLE&lt;/code&gt; や &lt;code&gt;os.SEEK_DATA&lt;/code&gt; などの追加の値をサポートできます。</target>
        </trans-unit>
        <trans-unit id="28848c417a2cec6f368a3d64351da7441b8eda2f" translate="yes" xml:space="preserve">
          <source>New in version 3.3: Some operating systems could support additional values, like &lt;code&gt;os.SEEK_HOLE&lt;/code&gt; or &lt;code&gt;os.SEEK_DATA&lt;/code&gt;. The valid values for a file could depend on it being open in text or binary mode.</source>
          <target state="translated">バージョン3.3の新機能：一部のオペレーティングシステムでは、 &lt;code&gt;os.SEEK_HOLE&lt;/code&gt; や &lt;code&gt;os.SEEK_DATA&lt;/code&gt; などの追加の値をサポートできます。ファイルの有効な値は、テキストモードまたはバイナリモードで開いているかどうかによって異なります。</target>
        </trans-unit>
        <trans-unit id="e8db3552cce786db5f51c5e10688a0e7ea38316b" translate="yes" xml:space="preserve">
          <source>New in version 3.3: Support for Chrome/Chromium has been added.</source>
          <target state="translated">バージョン3.3の新機能:Chrome/Chromiumのサポートが追加されました。</target>
        </trans-unit>
        <trans-unit id="e3a14a6878f1d57e3a61755e1e35f512ac6cf6a9" translate="yes" xml:space="preserve">
          <source>New in version 3.3: The &lt;a href=&quot;#range.start&quot;&gt;&lt;code&gt;start&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#range.stop&quot;&gt;&lt;code&gt;stop&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#range.step&quot;&gt;&lt;code&gt;step&lt;/code&gt;&lt;/a&gt; attributes.</source>
          <target state="translated">バージョン3.3の新機能：&lt;a href=&quot;#range.start&quot;&gt; &lt;code&gt;start&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#range.stop&quot;&gt; &lt;code&gt;stop&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#range.step&quot;&gt; &lt;code&gt;step&lt;/code&gt; &lt;/a&gt;属性。</target>
        </trans-unit>
        <trans-unit id="738beaa1df24e84cceeec4368cebe369172c2a07" translate="yes" xml:space="preserve">
          <source>New in version 3.3: The &lt;a href=&quot;#subprocess.SubprocessError&quot;&gt;&lt;code&gt;SubprocessError&lt;/code&gt;&lt;/a&gt; base class was added.</source>
          <target state="translated">バージョン3.3の新機能：&lt;a href=&quot;#subprocess.SubprocessError&quot;&gt; &lt;code&gt;SubprocessError&lt;/code&gt; &lt;/a&gt;基本クラスが追加されました。</target>
        </trans-unit>
        <trans-unit id="bd2ee4ce23d4cda751ffdf5ed2ab607d0320d229" translate="yes" xml:space="preserve">
          <source>New in version 3.3: The &lt;em&gt;dir_fd&lt;/em&gt; argument.</source>
          <target state="translated">バージョン3.3の新機能：&lt;em&gt;dir_fd&lt;/em&gt;引数。</target>
        </trans-unit>
        <trans-unit id="8bbb7dcfc93a3256da3e77e30128896f8934e79e" translate="yes" xml:space="preserve">
          <source>New in version 3.3: The &lt;em&gt;dir_fd&lt;/em&gt; parameter.</source>
          <target state="translated">バージョン3.3の新機能：&lt;em&gt;dir_fd&lt;/em&gt;パラメーター。</target>
        </trans-unit>
        <trans-unit id="8e3679a20a6466e36ee13269b95778590402cdc8" translate="yes" xml:space="preserve">
          <source>New in version 3.3: The &lt;em&gt;follow_symlinks&lt;/em&gt; argument.</source>
          <target state="translated">バージョン3.3の新機能：&lt;em&gt;follow_symlinks&lt;/em&gt;引数。</target>
        </trans-unit>
        <trans-unit id="f5a1bcb4d58f63caf511ef4af7b5a61495f919de" translate="yes" xml:space="preserve">
          <source>New in version 3.3: The &lt;em&gt;src_dir_fd&lt;/em&gt; and &lt;em&gt;dst_dir_fd&lt;/em&gt; arguments.</source>
          <target state="translated">バージョン3.3の新機能：&lt;em&gt;src_dir_fd&lt;/em&gt;および&lt;em&gt;dst_dir_fd&lt;/em&gt;引数。</target>
        </trans-unit>
        <trans-unit id="959865bf3e479ce8479a65e679ed0d30ba7e0c4b" translate="yes" xml:space="preserve">
          <source>New in version 3.3: The &lt;em&gt;timeout&lt;/em&gt; argument was added.</source>
          <target state="translated">バージョン3.3の新機能：&lt;em&gt;タイムアウト&lt;/em&gt;引数が追加されました。</target>
        </trans-unit>
        <trans-unit id="ff5f89afe35355ca3e836deef3c91bc2e3c948b4" translate="yes" xml:space="preserve">
          <source>New in version 3.3: This error used to be a subtype of &lt;a href=&quot;exceptions#IOError&quot;&gt;&lt;code&gt;IOError&lt;/code&gt;&lt;/a&gt;, which is now an alias of &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">バージョン3.3の新機能：このエラーは、以前は&lt;a href=&quot;exceptions#IOError&quot;&gt; &lt;code&gt;IOError&lt;/code&gt; の&lt;/a&gt;サブタイプでしたが、現在は&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; の&lt;/a&gt;エイリアスになっています。</target>
        </trans-unit>
        <trans-unit id="41224dc3ad1482785fdd83d4be25d59287870563" translate="yes" xml:space="preserve">
          <source>New in version 3.4.</source>
          <target state="translated">バージョン3.4の新機能。</target>
        </trans-unit>
        <trans-unit id="c2d2413b8a3a54c5ac894c0e648d044eed2cfc3a" translate="yes" xml:space="preserve">
          <source>New in version 3.4.2.</source>
          <target state="translated">バージョン3.4.2の新機能。</target>
        </trans-unit>
        <trans-unit id="3d45319c8b08d09575a413772fc1dfd31f6be0bd" translate="yes" xml:space="preserve">
          <source>New in version 3.4.4.</source>
          <target state="translated">バージョン3.4.4の新機能。</target>
        </trans-unit>
        <trans-unit id="d3fc5c5c6b68de9938f037f211d874194800b33d" translate="yes" xml:space="preserve">
          <source>New in version 3.4: &lt;code&gt;--bind&lt;/code&gt; argument was introduced.</source>
          <target state="translated">バージョン3.4の新機能：-- &lt;code&gt;--bind&lt;/code&gt; 引数が導入されました。</target>
        </trans-unit>
        <trans-unit id="04e6b7704b4197ee6a706885b339be509977b09a" translate="yes" xml:space="preserve">
          <source>New in version 3.4: &lt;code&gt;fish&lt;/code&gt; and &lt;code&gt;csh&lt;/code&gt; activation scripts.</source>
          <target state="translated">バージョン3.4の新機能： &lt;code&gt;fish&lt;/code&gt; および &lt;code&gt;csh&lt;/code&gt; アクティベーションスクリプト。</target>
        </trans-unit>
        <trans-unit id="07c6d19e4ee989f8d0d6e80bb2cbc4015ab1781f" translate="yes" xml:space="preserve">
          <source>New in version 3.4: &lt;em&gt;context&lt;/em&gt;</source>
          <target state="translated">バージョン3.4の新機能：&lt;em&gt;コンテキスト&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="936964700ac0e4fd4816f6dbc756a4bbb96008b9" translate="yes" xml:space="preserve">
          <source>New in version 3.4: Support for detecting non-root mount points on Windows.</source>
          <target state="translated">バージョン 3.4 の新機能。Windows上の非ルートマウントポイントの検出をサポート。</target>
        </trans-unit>
        <trans-unit id="abf63dbf0eed08509d121c30dc1546ccdf810093" translate="yes" xml:space="preserve">
          <source>New in version 3.4: The &lt;code&gt;-o&lt;/code&gt; command line option.</source>
          <target state="translated">バージョン3.4の新機能： &lt;code&gt;-o&lt;/code&gt; コマンドラインオプション。</target>
        </trans-unit>
        <trans-unit id="66caeee5dc102404c5331845b0c15981aad98a8a" translate="yes" xml:space="preserve">
          <source>New in version 3.4: The &lt;em&gt;default&lt;/em&gt; keyword-only argument.</source>
          <target state="translated">バージョン3.4の新機能：&lt;em&gt;デフォルトの&lt;/em&gt;キーワードのみの引数。</target>
        </trans-unit>
        <trans-unit id="4a4446cd72af1035874858d7979681228958c99b" translate="yes" xml:space="preserve">
          <source>New in version 3.4: The &lt;em&gt;encodings&lt;/em&gt; and &lt;em&gt;errors&lt;/em&gt; keyword arguments.</source>
          <target state="translated">バージョン3.4の新機能：&lt;em&gt;encodings&lt;/em&gt;および&lt;em&gt;errors&lt;/em&gt;キーワード引数。</target>
        </trans-unit>
        <trans-unit id="6d2024551b24076a993344063174df6ead408974" translate="yes" xml:space="preserve">
          <source>New in version 3.4: The &lt;em&gt;filterfunc&lt;/em&gt; parameter.</source>
          <target state="translated">バージョン3.4の新機能：&lt;em&gt;filterfunc&lt;/em&gt;パラメーター。</target>
        </trans-unit>
        <trans-unit id="b83a71ae56ef44ebfee3c63e25b3ec77ed9bfc29" translate="yes" xml:space="preserve">
          <source>New in version 3.4: The &lt;em&gt;map&lt;/em&gt; constructor argument.</source>
          <target state="translated">バージョン3.4の新機能：&lt;em&gt;マップ&lt;/em&gt;コンストラクター引数。</target>
        </trans-unit>
        <trans-unit id="8101eef7ac9068476ab49bb67e1a8ce316c1da05" translate="yes" xml:space="preserve">
          <source>New in version 3.4: The &lt;em&gt;short_empty_elements&lt;/em&gt; parameter.</source>
          <target state="translated">バージョン3.4の新機能：&lt;em&gt;short_empty_elements&lt;/em&gt;パラメーター。</target>
        </trans-unit>
        <trans-unit id="9f6e0effa06c3e5c138d8490e703f490b0039368" translate="yes" xml:space="preserve">
          <source>New in version 3.4: is_global</source>
          <target state="translated">バージョン 3.4 の新機能:is_global</target>
        </trans-unit>
        <trans-unit id="1f837cd28063a6c218f31e72720b5003175aed01" translate="yes" xml:space="preserve">
          <source>New in version 3.5.</source>
          <target state="translated">バージョン3.5の新機能。</target>
        </trans-unit>
        <trans-unit id="1fa95c8a406c55887ed636be5dccd00a7a0fa295" translate="yes" xml:space="preserve">
          <source>New in version 3.5.1.</source>
          <target state="translated">バージョン3.5.1の新機能。</target>
        </trans-unit>
        <trans-unit id="8b612aef28c4f185839e563a8a96375f82700410" translate="yes" xml:space="preserve">
          <source>New in version 3.5.2.</source>
          <target state="translated">バージョン3.5.2の新機能。</target>
        </trans-unit>
        <trans-unit id="2c7957076db9f4d38f7ee1ad92950f56a72edea9" translate="yes" xml:space="preserve">
          <source>New in version 3.5.3.</source>
          <target state="translated">バージョン3.5.3の新機能。</target>
        </trans-unit>
        <trans-unit id="07321da105ae55ff5d5709eae1f53e75964ddc33" translate="yes" xml:space="preserve">
          <source>New in version 3.5.4.</source>
          <target state="translated">バージョン3.5.4の新機能。</target>
        </trans-unit>
        <trans-unit id="3fbc5dfdcbe6f0de84bdbc30382ee50720861f9c" translate="yes" xml:space="preserve">
          <source>New in version 3.5: &lt;code&gt;follow_wrapped&lt;/code&gt; parameter. Pass &lt;code&gt;False&lt;/code&gt; to get a signature of &lt;code&gt;callable&lt;/code&gt; specifically (&lt;code&gt;callable.__wrapped__&lt;/code&gt; will not be used to unwrap decorated callables.)</source>
          <target state="translated">バージョン3.5の新機能： &lt;code&gt;follow_wrapped&lt;/code&gt; パラメータ。パス &lt;code&gt;False&lt;/code&gt; の署名を取得するために &lt;code&gt;callable&lt;/code&gt; （具体的に &lt;code&gt;callable.__wrapped__&lt;/code&gt; 装飾された呼び出し可能のラップを解除するために使用されることはありません。）</target>
        </trans-unit>
        <trans-unit id="9e2d52bce291ba21a1b94d4b005b1cf7dc019b90" translate="yes" xml:space="preserve">
          <source>New in version 3.5: &lt;em&gt;quote_via&lt;/em&gt; parameter.</source>
          <target state="translated">バージョン3.5の新機能：&lt;em&gt;quote_via&lt;/em&gt;パラメーター。</target>
        </trans-unit>
        <trans-unit id="0a2103b4477c36713c1b4425a3142a28baa40aa4" translate="yes" xml:space="preserve">
          <source>New in version 3.5: Added &lt;code&gt;is_authenticated&lt;/code&gt; support.</source>
          <target state="translated">バージョン3.5の新機能： &lt;code&gt;is_authenticated&lt;/code&gt; サポートが追加されました。</target>
        </trans-unit>
        <trans-unit id="0178c262a4c0123cec8f5bef7190a7211f72daae" translate="yes" xml:space="preserve">
          <source>New in version 3.5: Added the &lt;a href=&quot;#os.stat_result.st_file_attributes&quot;&gt;&lt;code&gt;st_file_attributes&lt;/code&gt;&lt;/a&gt; member on Windows.</source>
          <target state="translated">バージョン3.5の新機能：Windowsに&lt;a href=&quot;#os.stat_result.st_file_attributes&quot;&gt; &lt;code&gt;st_file_attributes&lt;/code&gt; &lt;/a&gt;メンバーを追加しました。</target>
        </trans-unit>
        <trans-unit id="8df129ebe6df04e6f5367d827d4028abd2387a31" translate="yes" xml:space="preserve">
          <source>New in version 3.5: Previously, &lt;a href=&quot;#http.client.BadStatusLine&quot;&gt;&lt;code&gt;BadStatusLine&lt;/code&gt;&lt;/a&gt;&lt;code&gt;('')&lt;/code&gt; was raised.</source>
          <target state="translated">バージョン3.5の新機能：以前は、&lt;a href=&quot;#http.client.BadStatusLine&quot;&gt; &lt;code&gt;BadStatusLine&lt;/code&gt; &lt;/a&gt; &lt;code&gt;('')&lt;/code&gt; が発生していました。</target>
        </trans-unit>
        <trans-unit id="9180aafc542f6e962e2074854b1f38f5061dcdf6" translate="yes" xml:space="preserve">
          <source>New in version 3.5: Previously, a plain &lt;a href=&quot;#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; was raised.</source>
          <target state="translated">バージョン3.5の新機能：以前は、単純な&lt;a href=&quot;#RuntimeError&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;/a&gt;が発生していました。</target>
        </trans-unit>
        <trans-unit id="3b54ddd1a8adfffd3e1ed259fed23234d3a80add" translate="yes" xml:space="preserve">
          <source>New in version 3.5: Support for internationalized addresses (&lt;code&gt;SMTPUTF8&lt;/code&gt;).</source>
          <target state="translated">バージョン3.5の新機能：国際化アドレスのサポート（ &lt;code&gt;SMTPUTF8&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="146b7ebb3f774b3f489ea95a898318e2a4680f5a" translate="yes" xml:space="preserve">
          <source>New in version 3.5: The &lt;a href=&quot;#imaplib.IMAP4.enable&quot;&gt;&lt;code&gt;enable()&lt;/code&gt;&lt;/a&gt; method itself, and &lt;a href=&quot;https://tools.ietf.org/html/rfc6855.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 6855&lt;/strong&gt;&lt;/a&gt; support.</source>
          <target state="translated">バージョン3.5の新機能：&lt;a href=&quot;#imaplib.IMAP4.enable&quot;&gt; &lt;code&gt;enable()&lt;/code&gt; &lt;/a&gt;メソッド自体、および&lt;a href=&quot;https://tools.ietf.org/html/rfc6855.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 6855の&lt;/strong&gt;&lt;/a&gt;サポート。</target>
        </trans-unit>
        <trans-unit id="3d5702ae33ccc35d4ec27c96ab0f6748c1bfbbce" translate="yes" xml:space="preserve">
          <source>New in version 3.5: The &lt;code&gt;'namereplace'&lt;/code&gt; error handler.</source>
          <target state="translated">バージョン3.5の新機能： &lt;code&gt;'namereplace'&lt;/code&gt; エラーハンドラー。</target>
        </trans-unit>
        <trans-unit id="c97b2effe0e40cd82111946917872bd69cee668e" translate="yes" xml:space="preserve">
          <source>New in version 3.5: The &lt;em&gt;decode_data&lt;/em&gt; and &lt;em&gt;enable_SMTPUTF8&lt;/em&gt; constructor parameters, and the &lt;em&gt;kwargs&lt;/em&gt; parameter to &lt;a href=&quot;#smtpd.SMTPServer.process_message&quot;&gt;&lt;code&gt;process_message()&lt;/code&gt;&lt;/a&gt; when &lt;em&gt;decode_data&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">バージョン3.5の新機能：&lt;em&gt;decode_data&lt;/em&gt;が &lt;code&gt;False&lt;/code&gt; の場合、&lt;em&gt;decode_data&lt;/em&gt;および&lt;em&gt;enable_SMTPUTF8&lt;/em&gt;コンストラクターパラメーター、および&lt;a href=&quot;#smtpd.SMTPServer.process_message&quot;&gt; &lt;code&gt;process_message()&lt;/code&gt; &lt;/a&gt;への&lt;em&gt;kwargs&lt;/em&gt;パラメーター。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="503c88f7cc88d9c109004b72250f22c5abdb8141" translate="yes" xml:space="preserve">
          <source>New in version 3.5: The &lt;em&gt;exr&lt;/em&gt; and &lt;em&gt;webp&lt;/em&gt; formats were added.</source>
          <target state="translated">バージョン3.5の新機能：&lt;em&gt;exr&lt;/em&gt;および&lt;em&gt;webp&lt;/em&gt;形式が追加されました。</target>
        </trans-unit>
        <trans-unit id="3cfbf13ed17363441f3df8820387841a221acb2f" translate="yes" xml:space="preserve">
          <source>New in version 3.5: The &lt;em&gt;mangle_from_&lt;/em&gt; parameter.</source>
          <target state="translated">バージョン3.5の新機能：&lt;em&gt;mangle_from_&lt;/em&gt;パラメーター。</target>
        </trans-unit>
        <trans-unit id="b705147dd17b73bdb5144032054ce3ee0a848bed" translate="yes" xml:space="preserve">
          <source>New in version 3.5: The SMTPUTF8 extension (&lt;a href=&quot;https://tools.ietf.org/html/rfc6531.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 6531&lt;/strong&gt;&lt;/a&gt;) is now supported.</source>
          <target state="translated">バージョン3.5の新機能：SMTPUTF8拡張（&lt;a href=&quot;https://tools.ietf.org/html/rfc6531.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 6531&lt;/strong&gt;&lt;/a&gt;）がサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="4071071236fe8569928d891b12576f7b86895ed7" translate="yes" xml:space="preserve">
          <source>New in version 3.5: The command-line option &lt;code&gt;--locals&lt;/code&gt;.</source>
          <target state="translated">バージョン3.5の新機能：コマンドラインオプション &lt;code&gt;--locals&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f069158efc3960b336f0767e900a4a5a3e81e366" translate="yes" xml:space="preserve">
          <source>New in version 3.5: The name &lt;code&gt;assertNotRegexpMatches&lt;/code&gt; is a deprecated alias for &lt;a href=&quot;#unittest.TestCase.assertNotRegex&quot;&gt;&lt;code&gt;assertNotRegex()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">バージョン3.5の新機能： &lt;code&gt;assertNotRegexpMatches&lt;/code&gt; という名前は、&lt;a href=&quot;#unittest.TestCase.assertNotRegex&quot;&gt; &lt;code&gt;assertNotRegex()&lt;/code&gt; の&lt;/a&gt;非推奨のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="19bf2295406fe646f85406c7590ce23f4c62ad62" translate="yes" xml:space="preserve">
          <source>New in version 3.6.</source>
          <target state="translated">バージョン3.6の新機能。</target>
        </trans-unit>
        <trans-unit id="90349cc2f262d4c23d65ab39676f28264f9ab398" translate="yes" xml:space="preserve">
          <source>New in version 3.6.0.</source>
          <target state="translated">バージョン3.6.0の新機能。</target>
        </trans-unit>
        <trans-unit id="45594f8e6c19eac8ab677c7056e00b26cfb95c1f" translate="yes" xml:space="preserve">
          <source>New in version 3.6.1.</source>
          <target state="translated">バージョン3.6.1の新機能。</target>
        </trans-unit>
        <trans-unit id="5a7ee2ea584d1e3940ee533dbeaa4e452bd13404" translate="yes" xml:space="preserve">
          <source>New in version 3.6.1: The &lt;em&gt;filenames&lt;/em&gt; parameter accepts a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-like-object&quot;&gt;path-like object&lt;/a&gt;.</source>
          <target state="translated">バージョン3.6.1の新機能：&lt;em&gt;filenames&lt;/em&gt;パラメーターは、&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-like-object&quot;&gt;パスのようなオブジェクトを&lt;/a&gt;受け入れます。</target>
        </trans-unit>
        <trans-unit id="5e7a6843b86d2ae87bc59ed04e6f809cf47c50e6" translate="yes" xml:space="preserve">
          <source>New in version 3.6.2.</source>
          <target state="translated">バージョン3.6.2の新機能。</target>
        </trans-unit>
        <trans-unit id="80dfc6066f14bf6496d45305c08af7a4c450a97c" translate="yes" xml:space="preserve">
          <source>New in version 3.6: &lt;a href=&quot;#hashlib.blake2b&quot;&gt;&lt;code&gt;blake2b()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#hashlib.blake2s&quot;&gt;&lt;code&gt;blake2s()&lt;/code&gt;&lt;/a&gt; were added.</source>
          <target state="translated">バージョン3.6の新機能：&lt;a href=&quot;#hashlib.blake2b&quot;&gt; &lt;code&gt;blake2b()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#hashlib.blake2s&quot;&gt; &lt;code&gt;blake2s()&lt;/code&gt; &lt;/a&gt;が追加されました。</target>
        </trans-unit>
        <trans-unit id="4340416fdc1fa009b4460cbe3e9816c6f0043daf" translate="yes" xml:space="preserve">
          <source>New in version 3.6: &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;</source>
          <target state="translated">バージョン3.6の新機能：&lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a2feeb245024eb57add73d00ab775abcb904e866" translate="yes" xml:space="preserve">
          <source>New in version 3.6: &lt;code&gt;%G&lt;/code&gt;, &lt;code&gt;%u&lt;/code&gt; and &lt;code&gt;%V&lt;/code&gt; were added.</source>
          <target state="translated">バージョン3.6の新機能： &lt;code&gt;%G&lt;/code&gt; 、 &lt;code&gt;%u&lt;/code&gt; 、 &lt;code&gt;%V&lt;/code&gt; が追加されました。</target>
        </trans-unit>
        <trans-unit id="c218c216bff866c0b87e532df3da0d215cc23a5f" translate="yes" xml:space="preserve">
          <source>New in version 3.6: &lt;code&gt;EPOLLEXCLUSIVE&lt;/code&gt; was added. It&amp;rsquo;s only supported by Linux Kernel 4.5 or later.</source>
          <target state="translated">バージョン3.6の新機能： &lt;code&gt;EPOLLEXCLUSIVE&lt;/code&gt; が追加されました。Linux Kernel 4.5以降でのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="67f3b398e277e32be1c6a0466247dee478994e07" translate="yes" xml:space="preserve">
          <source>New in version 3.6: &lt;code&gt;Flag&lt;/code&gt;, &lt;code&gt;IntFlag&lt;/code&gt;, &lt;code&gt;auto&lt;/code&gt;</source>
          <target state="translated">バージョン3.6の新機能： &lt;code&gt;Flag&lt;/code&gt; 、 &lt;code&gt;IntFlag&lt;/code&gt; 、 &lt;code&gt;auto&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d27e2376c72696bcc77e2fe6f41dd1602bc5773c" translate="yes" xml:space="preserve">
          <source>New in version 3.6: &lt;code&gt;_missing_&lt;/code&gt;, &lt;code&gt;_order_&lt;/code&gt;, &lt;code&gt;_generate_next_value_&lt;/code&gt;</source>
          <target state="translated">バージョン3.6の新機能： &lt;code&gt;_missing_&lt;/code&gt; 、 &lt;code&gt;_order_&lt;/code&gt; 、 &lt;code&gt;_generate_next_value_&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b10e005437ad547a8fd8e2ccd4b8b20d9e4c5dff" translate="yes" xml:space="preserve">
          <source>New in version 3.6: &lt;em&gt;encoding&lt;/em&gt; and &lt;em&gt;errors&lt;/em&gt; were added.</source>
          <target state="translated">バージョン3.6の新機能：&lt;em&gt;エンコーディング&lt;/em&gt;と&lt;em&gt;エラー&lt;/em&gt;が追加されました。</target>
        </trans-unit>
        <trans-unit id="12ace1f101bca9a308b177329a35f1d66d6db703" translate="yes" xml:space="preserve">
          <source>New in version 3.6: Added &lt;em&gt;encoding&lt;/em&gt; and &lt;em&gt;errors&lt;/em&gt; parameters.</source>
          <target state="translated">バージョン3.6の新機能：&lt;em&gt;エンコーディング&lt;/em&gt;と&lt;em&gt;エラーの&lt;/em&gt;パラメーターを追加しました。</target>
        </trans-unit>
        <trans-unit id="e301bee116d339912a92c894a8a22f3f1fa59962" translate="yes" xml:space="preserve">
          <source>New in version 3.6: Added support for the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-context-manager&quot;&gt;context manager&lt;/a&gt; protocol and the &lt;a href=&quot;#os.scandir.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; method. If a &lt;a href=&quot;#os.scandir&quot;&gt;&lt;code&gt;scandir()&lt;/code&gt;&lt;/a&gt; iterator is neither exhausted nor explicitly closed a &lt;a href=&quot;exceptions#ResourceWarning&quot;&gt;&lt;code&gt;ResourceWarning&lt;/code&gt;&lt;/a&gt; will be emitted in its destructor.</source>
          <target state="translated">バージョン3.6の新機能：&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-context-manager&quot;&gt;コンテキストマネージャー&lt;/a&gt;プロトコルと&lt;a href=&quot;#os.scandir.close&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt;メソッドのサポートを追加しました。場合&lt;a href=&quot;#os.scandir&quot;&gt; &lt;code&gt;scandir()&lt;/code&gt; &lt;/a&gt;イテレータはどちらも疲れも明示的に閉じている&lt;a href=&quot;exceptions#ResourceWarning&quot;&gt; &lt;code&gt;ResourceWarning&lt;/code&gt; &lt;/a&gt;そのデストラクタで放出されます。</target>
        </trans-unit>
        <trans-unit id="b402613c2d781a5a7bb0dd32b82d79f1ecb4727b" translate="yes" xml:space="preserve">
          <source>New in version 3.6: Added the &lt;code&gt;fold&lt;/code&gt; argument.</source>
          <target state="translated">バージョン3.6の新機能： &lt;code&gt;fold&lt;/code&gt; 引数を追加しました。</target>
        </trans-unit>
        <trans-unit id="00930151a8d899f4720871c54b11a77ab5264e8f" translate="yes" xml:space="preserve">
          <source>New in version 3.6: Added the &lt;code&gt;prompt&lt;/code&gt; parameter</source>
          <target state="translated">バージョン3.6の新機能： &lt;code&gt;prompt&lt;/code&gt; パラメーターを追加しました</target>
        </trans-unit>
        <trans-unit id="5f1a9af93f36ac766f8daa131d6c0d3f78622179" translate="yes" xml:space="preserve">
          <source>New in version 3.6: Added the &lt;em&gt;timespec&lt;/em&gt; argument.</source>
          <target state="translated">バージョン3.6の新機能：&lt;em&gt;timespec&lt;/em&gt;引数を追加しました。</target>
        </trans-unit>
        <trans-unit id="7066aa1da03dd2863a3d30aa190f6000662f4314" translate="yes" xml:space="preserve">
          <source>New in version 3.6: Chunked encoding support. The &lt;em&gt;encode_chunked&lt;/em&gt; parameter was added.</source>
          <target state="translated">バージョン3.6の新機能：チャンクエンコーディングのサポート。&lt;em&gt;encode_chunked&lt;/em&gt;パラメータが追加されました。</target>
        </trans-unit>
        <trans-unit id="a58ba40e7a25c57becebc3eef2d13a66d5397af8" translate="yes" xml:space="preserve">
          <source>New in version 3.6: SHA3 (Keccak) and SHAKE constructors &lt;code&gt;sha3_224()&lt;/code&gt;, &lt;code&gt;sha3_256()&lt;/code&gt;, &lt;code&gt;sha3_384()&lt;/code&gt;, &lt;code&gt;sha3_512()&lt;/code&gt;, &lt;code&gt;shake_128()&lt;/code&gt;, &lt;code&gt;shake_256()&lt;/code&gt;.</source>
          <target state="translated">バージョン3.6の新機能：SHA3（Keccak）およびSHAKEコンストラクター &lt;code&gt;sha3_224()&lt;/code&gt; 、 &lt;code&gt;sha3_256()&lt;/code&gt; 、 &lt;code&gt;sha3_384()&lt;/code&gt; 、 &lt;code&gt;sha3_512()&lt;/code&gt; 、 &lt;code&gt;shake_128()&lt;/code&gt; 、 &lt;code&gt;shake_256()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ba67193ad20bf5f9e114ef18a7615f3b1a6f3fc7" translate="yes" xml:space="preserve">
          <source>New in version 3.6: See &lt;a href=&quot;https://www.python.org/dev/peps/pep-0525&quot; id=&quot;index-11&quot;&gt;&lt;strong&gt;PEP 525&lt;/strong&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">バージョン3.6の新機能：詳細については、&lt;a href=&quot;https://www.python.org/dev/peps/pep-0525&quot; id=&quot;index-11&quot;&gt;&lt;strong&gt;PEP 525&lt;/strong&gt;&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="32a8a06257d0d3aa4bc5a3c9830582cf1e8ac1b0" translate="yes" xml:space="preserve">
          <source>New in version 3.6: See &lt;a href=&quot;https://www.python.org/dev/peps/pep-0525&quot; id=&quot;index-27&quot;&gt;&lt;strong&gt;PEP 525&lt;/strong&gt;&lt;/a&gt; for more details, and for a reference example of a &lt;em&gt;finalizer&lt;/em&gt; method see the implementation of &lt;code&gt;asyncio.Loop.shutdown_asyncgens&lt;/code&gt; in &lt;a href=&quot;https://github.com/python/cpython/tree/3.8/Lib/asyncio/base_events.py&quot;&gt;Lib/asyncio/base_events.py&lt;/a&gt;</source>
          <target state="translated">バージョン3.6の新機能：詳細については、&lt;a href=&quot;https://www.python.org/dev/peps/pep-0525&quot; id=&quot;index-27&quot;&gt;&lt;strong&gt;PEP 525&lt;/strong&gt;&lt;/a&gt;を参照してください。&lt;em&gt;ファイナライザ&lt;/em&gt;メソッドのリファレンス例については、&lt;a href=&quot;https://github.com/python/cpython/tree/3.8/Lib/asyncio/base_events.py&quot;&gt;Lib / asyncio / base_events.pyの&lt;/a&gt; &lt;code&gt;asyncio.Loop.shutdown_asyncgens&lt;/code&gt; の実装を参照してください。</target>
        </trans-unit>
        <trans-unit id="0029940bca23ccdb728fe00850c420e066576083" translate="yes" xml:space="preserve">
          <source>New in version 3.6: See &lt;a href=&quot;https://www.python.org/dev/peps/pep-0529&quot; id=&quot;index-31&quot;&gt;&lt;strong&gt;PEP 529&lt;/strong&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">バージョン3.6の新機能：詳細については、&lt;a href=&quot;https://www.python.org/dev/peps/pep-0529&quot; id=&quot;index-31&quot;&gt;&lt;strong&gt;PEP 529&lt;/strong&gt;&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e4aac78a8599305666d1bcd98d489c9b474ee017" translate="yes" xml:space="preserve">
          <source>New in version 3.6: The &lt;em&gt;strict&lt;/em&gt; argument (pre-3.6 behavior is strict).</source>
          <target state="translated">バージョン3.6の新機能：&lt;em&gt;厳密な&lt;/em&gt;引数（3.6より前の動作は厳密です）。</target>
        </trans-unit>
        <trans-unit id="ed2cdfb400d26244abead12bdb67496c73a450a0" translate="yes" xml:space="preserve">
          <source>New in version 3.6: The &lt;em&gt;thread_name_prefix&lt;/em&gt; argument was added to allow users to control the &lt;a href=&quot;threading#threading.Thread&quot;&gt;&lt;code&gt;threading.Thread&lt;/code&gt;&lt;/a&gt; names for worker threads created by the pool for easier debugging.</source>
          <target state="translated">バージョン3.6の新機能：&lt;em&gt;thread_name_prefix&lt;/em&gt;引数が追加され、ユーザーが&lt;a href=&quot;threading#threading.Thread&quot;&gt; &lt;code&gt;threading.Thread&lt;/code&gt; &lt;/a&gt;を制御できるようになりました。デバッグを容易にするためにプールによって作成されたワーカースレッドのスレッド名。</target>
        </trans-unit>
        <trans-unit id="bd28c614713bbf071342d57c2928588052675b48" translate="yes" xml:space="preserve">
          <source>New in version 3.7.</source>
          <target state="translated">バージョン3.7の新機能。</target>
        </trans-unit>
        <trans-unit id="ab8b0d832441ec9f8afe55c3080968bfbf5d3b44" translate="yes" xml:space="preserve">
          <source>New in version 3.7.1.</source>
          <target state="translated">バージョン3.7.1の新機能。</target>
        </trans-unit>
        <trans-unit id="c9fd11c42763cb36ec0c19d3ced88d96a640764b" translate="yes" xml:space="preserve">
          <source>New in version 3.7.2.</source>
          <target state="translated">バージョン3.7.2の新機能。</target>
        </trans-unit>
        <trans-unit id="9a57a48cac73d938901b1d889265048d7b45f13b" translate="yes" xml:space="preserve">
          <source>New in version 3.7: &lt;code&gt;--directory&lt;/code&gt; specify alternate directory</source>
          <target state="translated">バージョン3.7の新機能：-- directory代替 &lt;code&gt;--directory&lt;/code&gt; 指定</target>
        </trans-unit>
        <trans-unit id="2909fbd69c7afbaa6cf6f31b68ba8de890bc59f0" translate="yes" xml:space="preserve">
          <source>New in version 3.7: &lt;code&gt;A_ITALIC&lt;/code&gt; was added.</source>
          <target state="translated">バージョン3.7の新機能： &lt;code&gt;A_ITALIC&lt;/code&gt; が追加されました。</target>
        </trans-unit>
        <trans-unit id="8a466235e323520983f5de7f81ecbc6daa3c3354" translate="yes" xml:space="preserve">
          <source>New in version 3.7: &lt;code&gt;_ignore_&lt;/code&gt;</source>
          <target state="translated">バージョン3.7の新機能： &lt;code&gt;_ignore_&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="adde274e405e80348f0778a3079bdac06f47c1e9" translate="yes" xml:space="preserve">
          <source>New in version 3.7: &lt;code&gt;pdb.py&lt;/code&gt; now accepts a &lt;code&gt;-m&lt;/code&gt; option that execute modules similar to the way &lt;code&gt;python3 -m&lt;/code&gt; does. As with a script, the debugger will pause execution just before the first line of the module.</source>
          <target state="translated">バージョン3.7の新機能： &lt;code&gt;pdb.py&lt;/code&gt; は、 &lt;code&gt;python3 -m&lt;/code&gt; と同様にモジュールを実行する &lt;code&gt;-m&lt;/code&gt; オプションを受け入れるようになりました。スクリプトと同様に、デバッガーはモジュールの最初の行の直前で実行を一時停止します。</target>
        </trans-unit>
        <trans-unit id="0348eea632d38a741b35d7722942981b7e29f1ce" translate="yes" xml:space="preserve">
          <source>New in version 3.7: &lt;em&gt;text&lt;/em&gt; was added as a more readable alias for &lt;em&gt;universal_newlines&lt;/em&gt;.</source>
          <target state="translated">バージョン3.7の新機能：&lt;em&gt;テキスト&lt;/em&gt;が&lt;em&gt;universal_newlinesの&lt;/em&gt;より読みやすいエイリアスとして追加されました。</target>
        </trans-unit>
        <trans-unit id="5f0baef37767767dd3f2cb730f45d1b063439fc7" translate="yes" xml:space="preserve">
          <source>New in version 3.7: &lt;strong&gt;Important:&lt;/strong&gt; this has been added to asyncio in Python 3.7 &lt;em&gt;on a provisional basis&lt;/em&gt;! This is as an experimental API that might be changed or removed completely in Python 3.8.</source>
          <target state="translated">バージョン3.7の新機能：&lt;strong&gt;重要：&lt;/strong&gt;これはPython 3.7のasyncioに&lt;em&gt;暫定的に&lt;/em&gt;追加されてい&lt;em&gt;ます&lt;/em&gt;！これは実験的なAPIであり、Python 3.8で完全に変更または削除される可能性があります。</target>
        </trans-unit>
        <trans-unit id="f3a4eca7b00b876cf18c98faef57e563aee90833" translate="yes" xml:space="preserve">
          <source>New in version 3.7: Added &lt;code&gt;f_fsid&lt;/code&gt;.</source>
          <target state="translated">バージョン3.7の新機能： &lt;code&gt;f_fsid&lt;/code&gt; を追加しました。</target>
        </trans-unit>
        <trans-unit id="acbec27175c9a57e694aea3647f0f2d4e44b15b1" translate="yes" xml:space="preserve">
          <source>New in version 3.7: Added &lt;em&gt;ssl_handshake_timeout&lt;/em&gt; and &lt;em&gt;start_serving&lt;/em&gt; parameters.</source>
          <target state="translated">バージョン3.7の新機能：&lt;em&gt;ssl_handshake_timeout&lt;/em&gt;および&lt;em&gt;start_serving&lt;/em&gt;パラメーターを追加しました。</target>
        </trans-unit>
        <trans-unit id="02404564795309b1c84708a7dc54ae19f294229e" translate="yes" xml:space="preserve">
          <source>New in version 3.7: Added the &lt;a href=&quot;#os.stat_result.st_fstype&quot;&gt;&lt;code&gt;st_fstype&lt;/code&gt;&lt;/a&gt; member to Solaris/derivatives.</source>
          <target state="translated">バージョン3.7の新機能：&lt;a href=&quot;#os.stat_result.st_fstype&quot;&gt; &lt;code&gt;st_fstype&lt;/code&gt; &lt;/a&gt;メンバーをSolaris / derivativesに追加しました。</target>
        </trans-unit>
        <trans-unit id="4825919b8ce59ba82d22b5bba489218e7eb00e42" translate="yes" xml:space="preserve">
          <source>New in version 3.7: Added the &lt;code&gt;-m&lt;/code&gt; option to &lt;a href=&quot;#module-cProfile&quot;&gt;&lt;code&gt;cProfile&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">バージョン3.7の新機能：&lt;a href=&quot;#module-cProfile&quot;&gt; &lt;code&gt;cProfile&lt;/code&gt; に&lt;/a&gt; &lt;code&gt;-m&lt;/code&gt; オプションを追加しました。</target>
        </trans-unit>
        <trans-unit id="08036b38411b712da487efc5c9de3f5c019a9bfd" translate="yes" xml:space="preserve">
          <source>New in version 3.7: Added the &lt;em&gt;filter&lt;/em&gt; and &lt;em&gt;compressed&lt;/em&gt; arguments.</source>
          <target state="translated">バージョン3.7の新機能：&lt;em&gt;フィルター&lt;/em&gt;と&lt;em&gt;圧縮&lt;/em&gt;引数を追加しました。</target>
        </trans-unit>
        <trans-unit id="ce490b7adba761d51637a993e78564658a585b7c" translate="yes" xml:space="preserve">
          <source>New in version 3.7: Added the &lt;em&gt;text&lt;/em&gt; parameter as an alias for &lt;em&gt;universal_newlines&lt;/em&gt;.</source>
          <target state="translated">バージョン3.7の新機能：&lt;em&gt;テキスト&lt;/em&gt;パラメーターを&lt;em&gt;universal_newlinesの&lt;/em&gt;エイリアスとして追加しました。</target>
        </trans-unit>
        <trans-unit id="b546280fb3d0cd05c36e366475e058b3bfb9e3cf" translate="yes" xml:space="preserve">
          <source>New in version 3.7: Added the SortKey enum.</source>
          <target state="translated">バージョン 3.7 の新機能:SortKey 列挙を追加しました。</target>
        </trans-unit>
        <trans-unit id="410aff229467eac243173224687c8e5967e89a41" translate="yes" xml:space="preserve">
          <source>New in version 3.7: Descriptors for nested definitions. They are accessed through the new children attribute. Each has a new parent attribute.</source>
          <target state="translated">バージョン3.7の新機能:入れ子になった定義のためのディスクリプタ。これらは new children 属性を通してアクセスされます。それぞれが新しい親属性を持っています。</target>
        </trans-unit>
        <trans-unit id="a30a5ef6e12e6aa72ab9eaa507a8c20cae7e496f" translate="yes" xml:space="preserve">
          <source>New in version 3.7: The &lt;em&gt;filenames&lt;/em&gt; parameter accepts a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">バージョン3.7の新機能：&lt;em&gt;filenames&lt;/em&gt;パラメーターは、&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;オブジェクトを受け入れます。</target>
        </trans-unit>
        <trans-unit id="493a985537bd7b9d798cb8594ee5777373a89a86" translate="yes" xml:space="preserve">
          <source>New in version 3.7: The &lt;em&gt;ssl_handshake_timeout&lt;/em&gt; and &lt;em&gt;start_serving&lt;/em&gt; parameters.</source>
          <target state="translated">バージョン3.7の新機能：&lt;em&gt;ssl_handshake_timeout&lt;/em&gt;および&lt;em&gt;start_serving&lt;/em&gt;パラメーター。</target>
        </trans-unit>
        <trans-unit id="f67f29ad67b51dd6b7b13f7df829ff2ca08cd222" translate="yes" xml:space="preserve">
          <source>New in version 3.7: The &lt;em&gt;ssl_handshake_timeout&lt;/em&gt; parameter.</source>
          <target state="translated">バージョン3.7の新機能：&lt;em&gt;ssl_handshake_timeout&lt;/em&gt;パラメーター。</target>
        </trans-unit>
        <trans-unit id="338f24ef253909c3bf5579f812dd70f28bc15ad5" translate="yes" xml:space="preserve">
          <source>New in version 3.7: The built-in &lt;a href=&quot;functions#breakpoint&quot;&gt;&lt;code&gt;breakpoint()&lt;/code&gt;&lt;/a&gt;, when called with defaults, can be used instead of &lt;code&gt;import pdb; pdb.set_trace()&lt;/code&gt;.</source>
          <target state="translated">バージョン3.7の新機能：組み込みの&lt;a href=&quot;functions#breakpoint&quot;&gt; &lt;code&gt;breakpoint()&lt;/code&gt; は&lt;/a&gt;、デフォルトで呼び出された場合、 &lt;code&gt;import pdb; pdb.set_trace()&lt;/code&gt; 代わりに使用できます。pdb.set_trace（）。</target>
        </trans-unit>
        <trans-unit id="7b44bee6a8a9a71004cf5c288fd7ae64eb6f752b" translate="yes" xml:space="preserve">
          <source>New in version 3.7: The command-line option &lt;code&gt;-k&lt;/code&gt;.</source>
          <target state="translated">バージョン3.7の新機能：コマンドラインオプション &lt;code&gt;-k&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0aef538c8351307b1d3b281db6329d7cb7bec872" translate="yes" xml:space="preserve">
          <source>New in version 3.7: __breakpointhook__</source>
          <target state="translated">バージョン 3.7 の新機能:__breakpointhook__。</target>
        </trans-unit>
        <trans-unit id="d47b26a1d8dd776fc7c16b2a5c0deac1fe3b72d5" translate="yes" xml:space="preserve">
          <source>New in version 3.8.</source>
          <target state="translated">バージョン3.8の新機能。</target>
        </trans-unit>
        <trans-unit id="cd6669aa182efb34ab7412c772c8149990945b82" translate="yes" xml:space="preserve">
          <source>New in version 3.8: &lt;code&gt;--bind&lt;/code&gt; argument enhanced to support IPv6</source>
          <target state="translated">バージョン3.8の新機能：IPv6をサポートするように拡張された &lt;code&gt;--bind&lt;/code&gt; 引数</target>
        </trans-unit>
        <trans-unit id="152fbdc9d06de500d8f88db67583d3d091f0e3fe" translate="yes" xml:space="preserve">
          <source>New in version 3.8: &lt;code&gt;ast.PyCF_ALLOW_TOP_LEVEL_AWAIT&lt;/code&gt; can now be passed in flags to enable support for top-level &lt;code&gt;await&lt;/code&gt;, &lt;code&gt;async for&lt;/code&gt;, and &lt;code&gt;async with&lt;/code&gt;.</source>
          <target state="translated">バージョン3.8の新機能： &lt;code&gt;ast.PyCF_ALLOW_TOP_LEVEL_AWAIT&lt;/code&gt; をフラグに渡し &lt;code&gt;await&lt;/code&gt; 、トップレベルのawait、 &lt;code&gt;async for&lt;/code&gt; 、および &lt;code&gt;async with&lt;/code&gt; のサポートを有効にできるようになりました。</target>
        </trans-unit>
        <trans-unit id="f75a638f151f376d645945dad75c62bc6c93b237" translate="yes" xml:space="preserve">
          <source>New in version 3.8: &lt;em&gt;order&lt;/em&gt; can be {&amp;lsquo;C&amp;rsquo;, &amp;lsquo;F&amp;rsquo;, &amp;lsquo;A&amp;rsquo;}. When &lt;em&gt;order&lt;/em&gt; is &amp;lsquo;C&amp;rsquo; or &amp;lsquo;F&amp;rsquo;, the data of the original array is converted to C or Fortran order. For contiguous views, &amp;lsquo;A&amp;rsquo; returns an exact copy of the physical memory. In particular, in-memory Fortran order is preserved. For non-contiguous views, the data is converted to C first. &lt;em&gt;order=None&lt;/em&gt; is the same as &lt;em&gt;order=&amp;rsquo;C&amp;rsquo;&lt;/em&gt;.</source>
          <target state="translated">バージョン3.8の新機能：&lt;em&gt;順序&lt;/em&gt;は{'C'、 'F'、 'A'}です。場合&lt;em&gt;順序は&lt;/em&gt;「C」または「F」であり、元の配列のデータは、CまたはFortran順序に変換されます。連続ビューの場合、「A」は物理メモリの正確なコピーを返します。特に、メモリ内のFortran順序が保持されます。非連続ビューの場合、データは最初にCに変換されます。&lt;em&gt;order = None&lt;/em&gt;は、&lt;em&gt;order = 'C'&lt;/em&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="2cff40a0917f8f2171e5ff8c7704c205ac772d99" translate="yes" xml:space="preserve">
          <source>New in version 3.8: Added &lt;code&gt;--module&lt;/code&gt; option that allows to run an executable module.</source>
          <target state="translated">バージョン3.8の新機能：実行可能モジュールを実行できるようにする &lt;code&gt;--module&lt;/code&gt; オプションを追加しました。</target>
        </trans-unit>
        <trans-unit id="9ec5376ab9dcf06a2c4b76dd85864c5f7f72d6f3" translate="yes" xml:space="preserve">
          <source>New in version 3.8: Added &lt;code&gt;451 UNAVAILABLE_FOR_LEGAL_REASONS&lt;/code&gt; status code.</source>
          <target state="translated">バージョン3.8の新機能： &lt;code&gt;451 UNAVAILABLE_FOR_LEGAL_REASONS&lt;/code&gt; ステータスコードを追加しました。</target>
        </trans-unit>
        <trans-unit id="186ccced30c0596281d99c06878fe06f5cba4d05" translate="yes" xml:space="preserve">
          <source>New in version 3.8: Added the &lt;a href=&quot;#os.stat_result.st_reparse_tag&quot;&gt;&lt;code&gt;st_reparse_tag&lt;/code&gt;&lt;/a&gt; member on Windows.</source>
          <target state="translated">バージョン3.8の新機能：Windowsに&lt;a href=&quot;#os.stat_result.st_reparse_tag&quot;&gt; &lt;code&gt;st_reparse_tag&lt;/code&gt; &lt;/a&gt;メンバーを追加しました。</target>
        </trans-unit>
        <trans-unit id="31ad6246322e02482cc2675a0a61de73a9615090" translate="yes" xml:space="preserve">
          <source>New in version 3.8: Added the &lt;code&gt;-m&lt;/code&gt; option to &lt;a href=&quot;#module-profile&quot;&gt;&lt;code&gt;profile&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">バージョン3.8の新機能： &lt;code&gt;-m&lt;/code&gt; オプションを&lt;a href=&quot;#module-profile&quot;&gt; &lt;code&gt;profile&lt;/code&gt; に&lt;/a&gt;追加しました。</target>
        </trans-unit>
        <trans-unit id="94e84a13854d39d8a4e632a89b58cf02e628570f" translate="yes" xml:space="preserve">
          <source>New in version 3.8: PowerShell activation scripts installed under POSIX for PowerShell Core support.</source>
          <target state="translated">バージョン3.8の新機能。PowerShell CoreのサポートのためにPOSIXの下にインストールされたPowerShellアクティベーションスクリプト。</target>
        </trans-unit>
        <trans-unit id="f6946e0aad7bd1d3aa73545d7a267c0b448f75c6" translate="yes" xml:space="preserve">
          <source>New in version 3.8: Previous versions of CPython would resolve DLLs using the default behavior for the current process. This led to inconsistencies, such as only sometimes searching &lt;code id=&quot;index-25&quot;&gt;PATH&lt;/code&gt; or the current working directory, and OS functions such as &lt;code&gt;AddDllDirectory&lt;/code&gt; having no effect.</source>
          <target state="translated">バージョン3.8の新機能：以前のバージョンのCPythonでは、現在のプロセスのデフォルトの動作を使用してDLLを解決していました。これにより、 &lt;code id=&quot;index-25&quot;&gt;PATH&lt;/code&gt; や現在の作業ディレクトリのみを検索するなどの不整合が発生し、 &lt;code&gt;AddDllDirectory&lt;/code&gt; などのOS機能が無効になります。</target>
        </trans-unit>
        <trans-unit id="f977a95a81a55a1784f791e2a58c544b6b5481e3" translate="yes" xml:space="preserve">
          <source>New in version 3.8: The &lt;em&gt;dirs_exist_ok&lt;/em&gt; parameter.</source>
          <target state="translated">バージョン3.8の新機能：&lt;em&gt;dirs_exist_ok&lt;/em&gt;パラメーター。</target>
        </trans-unit>
        <trans-unit id="b713cbde69ae2c18b39ec28507e206c345a918bd" translate="yes" xml:space="preserve">
          <source>New in version 3.8: The &lt;em&gt;happy_eyeballs_delay&lt;/em&gt; and &lt;em&gt;interleave&lt;/em&gt; parameters.</source>
          <target state="translated">バージョン3.8の新機能：&lt;em&gt;happy_eyeballs_delay&lt;/em&gt;および&lt;em&gt;interleave&lt;/em&gt;パラメーター。</target>
        </trans-unit>
        <trans-unit id="bce6b595725e42c8ce0117c78ce8cc089343e237" translate="yes" xml:space="preserve">
          <source>New in version 3.8: The &lt;em&gt;strict_timestamps&lt;/em&gt; keyword-only argument</source>
          <target state="translated">バージョン3.8の新機能：&lt;em&gt;strict_timestamps&lt;/em&gt;キーワードのみの引数</target>
        </trans-unit>
        <trans-unit id="aeec7f4f480fc32e5c189622f501015e66103fc7" translate="yes" xml:space="preserve">
          <source>New in version 3.8: The &lt;em&gt;xml_declaration&lt;/em&gt; and &lt;em&gt;default_namespace&lt;/em&gt; parameters.</source>
          <target state="translated">バージョン3.8の新機能：&lt;em&gt;xml_declaration&lt;/em&gt;および&lt;em&gt;default_namespace&lt;/em&gt;パラメーター。</target>
        </trans-unit>
        <trans-unit id="4207315e68011a4c07693dcc3f18b88787928c23" translate="yes" xml:space="preserve">
          <source>New in version 3.8: The optional sixth tuple item, &lt;code&gt;(obj, state)&lt;/code&gt;, was added.</source>
          <target state="translated">バージョン3.8の新機能：オプションの6番目のタプル項目 &lt;code&gt;(obj, state)&lt;/code&gt; が追加されました。</target>
        </trans-unit>
        <trans-unit id="1101fa4c967ee98df4f4734b3541a4560182d08f" translate="yes" xml:space="preserve">
          <source>New: It is now possible to put items in argtypes which are not ctypes types, but each item must have a &lt;code&gt;from_param()&lt;/code&gt; method which returns a value usable as argument (integer, string, ctypes instance). This allows defining adapters that can adapt custom objects as function parameters.</source>
          <target state="translated">New：ctypes型ではないargtypesに項目を置くことができるようになりましたが、各項目には、引数として使用できる値（整数、文字列、ctypesインスタンス）を返す &lt;code&gt;from_param()&lt;/code&gt; メソッドが必要です。これにより、カスタムオブジェクトを関数パラメーターとして適合できるアダプターを定義できます。</target>
        </trans-unit>
        <trans-unit id="540f7186c4d530bac579f69bb157fd5e121529cc" translate="yes" xml:space="preserve">
          <source>NewType</source>
          <target state="translated">NewType</target>
        </trans-unit>
        <trans-unit id="1f243883e19f81b334c75128a8750ed8afdcc9d0" translate="yes" xml:space="preserve">
          <source>Newer RFC that provides a revised definition of XDR.</source>
          <target state="translated">XDRの改訂された定義を提供するより新しいRFC。</target>
        </trans-unit>
        <trans-unit id="bc981983e7f547dc62e19a1e383acfe00782a6d5" translate="yes" xml:space="preserve">
          <source>Next</source>
          <target state="translated">Next</target>
        </trans-unit>
        <trans-unit id="3fd8fdbb697f927d539f398a34de5c84c0407d98" translate="yes" xml:space="preserve">
          <source>Next History</source>
          <target state="translated">次の歴史</target>
        </trans-unit>
        <trans-unit id="7012977a58ea8b287c205fbbab7e5434b3642c46" translate="yes" xml:space="preserve">
          <source>Next Line (C1 Control Code)</source>
          <target state="translated">次の行(C1制御コード</target>
        </trans-unit>
        <trans-unit id="4bfc194b68a3369d53aadcddc4f891771d91a3d9" translate="yes" xml:space="preserve">
          <source>Next page</source>
          <target state="translated">次のページ</target>
        </trans-unit>
        <trans-unit id="233213a348a3467a9713a7d089885546d38eba8b" translate="yes" xml:space="preserve">
          <source>Next we instantiate a Differ object:</source>
          <target state="translated">次に、Differオブジェクトのインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="b9fac927a58027f98332aa47670afe3b77e6d6a4" translate="yes" xml:space="preserve">
          <source>Next, we encounter a new person whose feature measurements are known but whose gender is unknown:</source>
          <target state="translated">次に、特徴の測定値はわかっているが、性別がわからない新しい人物に遭遇します。</target>
        </trans-unit>
        <trans-unit id="cd608f08ab177c1073a159dda57f4a0251fcd9d9" translate="yes" xml:space="preserve">
          <source>No CSI structure available</source>
          <target state="translated">CSI構造はありません。</target>
        </trans-unit>
        <trans-unit id="bf8647669a8695bdc05a11d401d6432a9f88b641" translate="yes" xml:space="preserve">
          <source>No XENIX semaphores available</source>
          <target state="translated">XENIXセマフォが利用できない</target>
        </trans-unit>
        <trans-unit id="7c45a435d178e3e2e2c3ba71f0b27f7074852c14" translate="yes" xml:space="preserve">
          <source>No anode</source>
          <target state="translated">アノードなし</target>
        </trans-unit>
        <trans-unit id="b599ea3e9f4d15ca66ad3df24a2527224a8ea2d5" translate="yes" xml:space="preserve">
          <source>No argument is converted, results in a &lt;code&gt;'%'&lt;/code&gt; character in the result.</source>
          <target state="translated">引数は変換されず、結果に &lt;code&gt;'%'&lt;/code&gt; 文字が含まれます。</target>
        </trans-unit>
        <trans-unit id="e792e65ee8a80fd8989ad1b66325f180ccd8b365" translate="yes" xml:space="preserve">
          <source>No buffer space available</source>
          <target state="translated">利用可能なバッファスペースがない</target>
        </trans-unit>
        <trans-unit id="099e11888438840a8566c983d5b1e6de2dad8524" translate="yes" xml:space="preserve">
          <source>No child processes</source>
          <target state="translated">子プロセスなし</target>
        </trans-unit>
        <trans-unit id="0cfc430ad5192c2568f967923954cde952307fa4" translate="yes" xml:space="preserve">
          <source>No data available</source>
          <target state="translated">データはありません。</target>
        </trans-unit>
        <trans-unit id="5921088185a40f1dda6c07e51735aa215a517c81" translate="yes" xml:space="preserve">
          <source>No defined value type.</source>
          <target state="translated">定義された値のタイプがありません。</target>
        </trans-unit>
        <trans-unit id="5cb62108d46698f5697c85ab801ad27a8ef1fbf6" translate="yes" xml:space="preserve">
          <source>No distinction between standard and widget-specific options is made in this document. Some options don&amp;rsquo;t apply to some kinds of widgets. Whether a given widget responds to a particular option depends on the class of the widget; buttons have a &lt;code&gt;command&lt;/code&gt; option, labels do not.</source>
          <target state="translated">このドキュメントでは、標準オプションとウィジェット固有オプションの区別はありません。一部のオプションは、特定の種類のウィジェットに適用されません。特定のウィジェットが特定のオプションに応答するかどうかは、ウィジェットのクラスによって異なります。ボタンには &lt;code&gt;command&lt;/code&gt; オプションがありますが、ラベルにはありません。</target>
        </trans-unit>
        <trans-unit id="3a8258b97ca1863297badad1b0273640969901f7" translate="yes" xml:space="preserve">
          <source>No feature description will ever be deleted from &lt;a href=&quot;#module-__future__&quot;&gt;&lt;code&gt;__future__&lt;/code&gt;&lt;/a&gt;. Since its introduction in Python 2.1 the following features have found their way into the language using this mechanism:</source>
          <target state="translated">&lt;a href=&quot;#module-__future__&quot;&gt; &lt;code&gt;__future__&lt;/code&gt; &lt;/a&gt;から機能の説明が削除されることはありません。Python 2.1での導入以来、次の機能がこのメカニズムを使用して言語に組み込まれています。</target>
        </trans-unit>
        <trans-unit id="f45ab0b8375bdf5386e021a0b31d679497a33d5c" translate="yes" xml:space="preserve">
          <source>No message of desired type</source>
          <target state="translated">希望するタイプのメッセージがない</target>
        </trans-unit>
        <trans-unit id="19ae1fe9004b24354abb4ed1dcb0717c604a6346" translate="yes" xml:space="preserve">
          <source>No modifier is given, so it can appear exactly once, as for &lt;code&gt;A&lt;/code&gt;.</source>
          <target state="translated">修飾子が指定されていないため、 &lt;code&gt;A&lt;/code&gt; のように1回だけ表示できます。</target>
        </trans-unit>
        <trans-unit id="7498d9819e38f5924fea12d89303afac91d07387" translate="yes" xml:space="preserve">
          <source>No padding is added when using non-native size and alignment, e.g. with &amp;lsquo;&amp;lt;&amp;rsquo;, &amp;lsquo;&amp;gt;&amp;rsquo;, &amp;lsquo;=&amp;rsquo;, and &amp;lsquo;!&amp;rsquo;.</source>
          <target state="translated">非ネイティブのサイズと配置を使用する場合、パディングは追加されません。たとえば、「&amp;lt;」、「&amp;gt;」、「=」、「！」などです。</target>
        </trans-unit>
        <trans-unit id="3ab4c24c0255ad55292cf986980b47b2ee3d453f" translate="yes" xml:space="preserve">
          <source>No problem, provided that the traceback is the only output produced by the example: just paste in the traceback. &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt; Since tracebacks contain details that are likely to change rapidly (for example, exact file paths and line numbers), this is one case where doctest works hard to be flexible in what it accepts.</source>
          <target state="translated">例で生成される出力がトレースバックだけの場合は問題ありません。トレースバックに貼り付けるだけです。&lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;トレースバックには、急速に変化する可能性のある詳細（正確なファイルパスや行番号など）が含まれているため、これは、doctestが受け入れる内容に柔軟性を持たせるために懸命に機能する1つのケースです。</target>
        </trans-unit>
        <trans-unit id="ab134dfa754cd3657dd291f57f80c528eeaa381a" translate="yes" xml:space="preserve">
          <source>No record locks available</source>
          <target state="translated">レコードロックは利用できません。</target>
        </trans-unit>
        <trans-unit id="62c6526007299ca03f778b5b7ce0d726354cae0d" translate="yes" xml:space="preserve">
          <source>No route to host</source>
          <target state="translated">ホストへのルートがない</target>
        </trans-unit>
        <trans-unit id="5c0580667d6055e92a026b8c67fa943060b2c89d" translate="yes" xml:space="preserve">
          <source>No space left on device</source>
          <target state="translated">デバイス上に空きスペースがありません</target>
        </trans-unit>
        <trans-unit id="8affcec2bb7338bba6a528b37e279cb979510364" translate="yes" xml:space="preserve">
          <source>No special efforts are made to achieve exact results. (However, this may change in the future.)</source>
          <target state="translated">正確な結果を出すために特別な努力をしているわけではありません。ただし、将来的には変更される可能性があります)</target>
        </trans-unit>
        <trans-unit id="e5feee0204f5532e0cb04d5be298f4c467c05e6f" translate="yes" xml:space="preserve">
          <source>No such device</source>
          <target state="translated">そのような装置はありません。</target>
        </trans-unit>
        <trans-unit id="112765ee706d5c7ea20d7309d6bf892b8a5aa7eb" translate="yes" xml:space="preserve">
          <source>No such device or address</source>
          <target state="translated">そのようなデバイスやアドレスはありません</target>
        </trans-unit>
        <trans-unit id="8a6cb568f806ffae868a77b519003a5df95ec0c3" translate="yes" xml:space="preserve">
          <source>No such file or directory</source>
          <target state="translated">そのようなファイルやディレクトリはありません</target>
        </trans-unit>
        <trans-unit id="0cf4a772e5ca24befae7ddee66e425eeaa8130aa" translate="yes" xml:space="preserve">
          <source>No such process</source>
          <target state="translated">そのようなプロセスはありません。</target>
        </trans-unit>
        <trans-unit id="589aa359449804b5cecdf6ad3c2674828c4925a4" translate="yes" xml:space="preserve">
          <source>No suitable authentication method was found.</source>
          <target state="translated">適切な認証方法は見つかりませんでした。</target>
        </trans-unit>
        <trans-unit id="0e86c9e3430455ac090ffb5eaf4ae106dd193246" translate="yes" xml:space="preserve">
          <source>No-op in the base class, this method takes file object &lt;em&gt;fp&lt;/em&gt;, and reads the data from the file, initializing its message catalog. If you have an unsupported message catalog file format, you should override this method to parse your format.</source>
          <target state="translated">基本クラスでは何も行われません。このメソッドはファイルオブジェクト&lt;em&gt;fpを&lt;/em&gt;受け取り、ファイルからデータを読み取り、メッセージカタログを初期化します。サポートされていないメッセージカタログファイル形式がある場合は、このメソッドをオーバーライドして形式を解析する必要があります。</target>
        </trans-unit>
        <trans-unit id="b17a6c458741a86bf04ade61ad9a14f7ac61215b" translate="yes" xml:space="preserve">
          <source>Node Objects</source>
          <target state="translated">ノードオブジェクト</target>
        </trans-unit>
        <trans-unit id="7e378cbf407e94014d60a68e1eb16b7d4cc0b6a2" translate="yes" xml:space="preserve">
          <source>Node classes</source>
          <target state="translated">ノードクラス</target>
        </trans-unit>
        <trans-unit id="14144ba530975f0eb39fc2d9e3b0c8023d821c70" translate="yes" xml:space="preserve">
          <source>NodeList Objects</source>
          <target state="translated">ノードリストオブジェクト</target>
        </trans-unit>
        <trans-unit id="750728f3a8917784306697d947d7258635f9568e" translate="yes" xml:space="preserve">
          <source>Nodes containing textual content from the document.</source>
          <target state="translated">ドキュメントのテキストコンテンツを含むノード。</target>
        </trans-unit>
        <trans-unit id="bdc7ab16126589f949098e57c1b5539a8ac176ed" translate="yes" xml:space="preserve">
          <source>Nomenclature</source>
          <target state="translated">Nomenclature</target>
        </trans-unit>
        <trans-unit id="56c04398e9678198426e682b1f9d96427b74b23b" translate="yes" xml:space="preserve">
          <source>Nominal vs structural subtyping</source>
          <target state="translated">名目と構造のサブタイプ</target>
        </trans-unit>
        <trans-unit id="35d3f82350431652e47bdcf8c933cca085703f88" translate="yes" xml:space="preserve">
          <source>Non-blocking mode is supported through &lt;a href=&quot;#socket.socket.setblocking&quot;&gt;&lt;code&gt;setblocking()&lt;/code&gt;&lt;/a&gt;. A generalization of this based on timeouts is supported through &lt;a href=&quot;#socket.socket.settimeout&quot;&gt;&lt;code&gt;settimeout()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">非ブロッキングモードは、&lt;a href=&quot;#socket.socket.setblocking&quot;&gt; &lt;code&gt;setblocking()&lt;/code&gt; &lt;/a&gt;によってサポートされます。タイムアウトに基づくこれの一般化は、&lt;a href=&quot;#socket.socket.settimeout&quot;&gt; &lt;code&gt;settimeout()&lt;/code&gt; &lt;/a&gt;によってサポートされます。</target>
        </trans-unit>
        <trans-unit id="4c6473f2b77717e9eaefce19afcd71fb87fcc938" translate="yes" xml:space="preserve">
          <source>Non-empty sets (not frozensets) can be created by placing a comma-separated list of elements within braces, for example: &lt;code&gt;{'jack', 'sjoerd'}&lt;/code&gt;, in addition to the &lt;a href=&quot;#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">空でないセット（frozensetsではない）は、&lt;a href=&quot;#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;コンストラクターに加えて、要素のコンマ区切りのリストを中かっこ内に配置することで作成できます（例： &lt;code&gt;{'jack', 'sjoerd'}&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="4aa0a99e9276d0e78ac1248387e6c6b9c79d9b2a" translate="yes" xml:space="preserve">
          <source>Non-identical instances of a class normally compare as non-equal unless the class defines the &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__eq__&quot;&gt;&lt;code&gt;__eq__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">クラスが&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__eq__&quot;&gt; &lt;code&gt;__eq__()&lt;/code&gt; &lt;/a&gt;メソッドを定義しない限り、クラスの同一でないインスタンスは通常、非同等として比較されます。</target>
        </trans-unit>
        <trans-unit id="5432efc874ee04f0f27783979ffafd974c2144c4" translate="yes" xml:space="preserve">
          <source>Non-quoted escape characters (e.g. &lt;code&gt;'\'&lt;/code&gt;) preserve the literal value of the next character that follows;</source>
          <target state="translated">引用符で囲まれていないエスケープ文字（ &lt;code&gt;'\'&lt;/code&gt; など）は、次の文字のリテラル値を保持します。</target>
        </trans-unit>
        <trans-unit id="6eef6648406c333a4035cd5e60d0bf2ecf2606d7" translate="yes" xml:space="preserve">
          <source>None</source>
          <target state="translated">None</target>
        </trans-unit>
        <trans-unit id="7e5255a130b91c89dba736489c8c648b0ae932c0" translate="yes" xml:space="preserve">
          <source>Nonzero if a DST timezone is defined. See note below.</source>
          <target state="translated">DSTタイムゾーンが定義されている場合は0以外。以下の注釈を参照してください。</target>
        </trans-unit>
        <trans-unit id="5d6248d1d5c865a0048cbc0bf21dcb388cd91a77" translate="yes" xml:space="preserve">
          <source>Nordic languages</source>
          <target state="translated">北欧諸語</target>
        </trans-unit>
        <trans-unit id="02e21f33972d3ea6d360c18684f08ac13010544f" translate="yes" xml:space="preserve">
          <source>Normal and error output are generally kept separate (on separate lines) from code input and each other. They each get different highlight colors.</source>
          <target state="translated">通常、通常、ノーマル出力とエラー出力は、コード入力や他のコードとは別の(別の行にある)ものになります。これらの出力はそれぞれ異なるハイライトカラーを取得します。</target>
        </trans-unit>
        <trans-unit id="170f10d24b0b85cf90e96608630df2d96c9b4817" translate="yes" xml:space="preserve">
          <source>Normal attribute</source>
          <target state="translated">通常属性</target>
        </trans-unit>
        <trans-unit id="f1f743126e0f5dd0902750180da22c23c53778c8" translate="yes" xml:space="preserve">
          <source>Normal distribution. &lt;em&gt;mu&lt;/em&gt; is the mean, and &lt;em&gt;sigma&lt;/em&gt; is the standard deviation.</source>
          <target state="translated">正規分布。&lt;em&gt;mu&lt;/em&gt;は平均、&lt;em&gt;sigma&lt;/em&gt;は標準偏差です。</target>
        </trans-unit>
        <trans-unit id="3d1612e1a01af8e8718757fe0eb13a0da18713da" translate="yes" xml:space="preserve">
          <source>Normal distributions arise from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_limit_theorem&quot;&gt;Central Limit Theorem&lt;/a&gt; and have a wide range of applications in statistics.</source>
          <target state="translated">正規分布は、&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_limit_theorem&quot;&gt;中心極限定理&lt;/a&gt;から生じ、統計において幅広い用途があります。</target>
        </trans-unit>
        <trans-unit id="fe823566d89d09d65bf2172f99f78ec17aa83bd8" translate="yes" xml:space="preserve">
          <source>Normal distributions commonly arise in machine learning problems.</source>
          <target state="translated">機械学習の問題では、正規分布が一般的に発生します。</target>
        </trans-unit>
        <trans-unit id="6b2153c60470208f45dcfdc29d655f5a4049324a" translate="yes" xml:space="preserve">
          <source>NormalDist objects</source>
          <target state="translated">ノーマルディストオブジェクト</target>
        </trans-unit>
        <trans-unit id="691b62ff89f4b08738f81953df74ff8ae6e26204" translate="yes" xml:space="preserve">
          <source>Normalize a pathname by collapsing redundant separators and up-level references so that &lt;code&gt;A//B&lt;/code&gt;, &lt;code&gt;A/B/&lt;/code&gt;, &lt;code&gt;A/./B&lt;/code&gt; and &lt;code&gt;A/foo/../B&lt;/code&gt; all become &lt;code&gt;A/B&lt;/code&gt;. This string manipulation may change the meaning of a path that contains symbolic links. On Windows, it converts forward slashes to backward slashes. To normalize case, use &lt;a href=&quot;#os.path.normcase&quot;&gt;&lt;code&gt;normcase()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;A//B&lt;/code&gt; 、 &lt;code&gt;A/B/&lt;/code&gt; 、 &lt;code&gt;A/./B&lt;/code&gt; 、および &lt;code&gt;A/foo/../B&lt;/code&gt; すべて &lt;code&gt;A/B&lt;/code&gt; になるように、冗長なセパレーターと上位レベルの参照を折りたたんでパス名を正規化します。この文字列操作により、シンボリックリンクを含むパスの意味が変わる場合があります。 Windowsでは、スラッシュをバックスラッシュに変換します。大文字と小文字を正規化するには、&lt;a href=&quot;#os.path.normcase&quot;&gt; &lt;code&gt;normcase()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="4de47e1cb4db52e6f0ace31520ebf2d73cf5200f" translate="yes" xml:space="preserve">
          <source>Normalize the case of a pathname. On Windows, convert all characters in the pathname to lowercase, and also convert forward slashes to backward slashes. On other operating systems, return the path unchanged.</source>
          <target state="translated">パス名の大文字小文字を正規化します。Windows では、パス名のすべての文字を小文字に変換し、前方のスラッシュを後方のスラッシュに変換します。その他のオペレーティングシステムでは、パスを変更せずに返します。</target>
        </trans-unit>
        <trans-unit id="5bb740d481f263379151a90b9e11e2b6fdb345e7" translate="yes" xml:space="preserve">
          <source>Normalize the number by stripping the rightmost trailing zeros and converting any result equal to &lt;code&gt;Decimal('0')&lt;/code&gt; to &lt;code&gt;Decimal('0e0')&lt;/code&gt;. Used for producing canonical values for attributes of an equivalence class. For example, &lt;code&gt;Decimal('32.100')&lt;/code&gt; and &lt;code&gt;Decimal('0.321000e+2')&lt;/code&gt; both normalize to the equivalent value &lt;code&gt;Decimal('32.1')&lt;/code&gt;.</source>
          <target state="translated">右端の後続ゼロを取り除き、 &lt;code&gt;Decimal('0')&lt;/code&gt; に等しい結果をすべて &lt;code&gt;Decimal('0e0')&lt;/code&gt; に変換することにより、数値を正規化します。等価クラスの属性の標準値を生成するために使用されます。たとえば、 &lt;code&gt;Decimal('32.100')&lt;/code&gt; と &lt;code&gt;Decimal('0.321000e+2')&lt;/code&gt; どちらも、同等の値 &lt;code&gt;Decimal('32.1')&lt;/code&gt; 正規化します。</target>
        </trans-unit>
        <trans-unit id="2f52a413a99343944d32b2af1d020b8d0b1acd04" translate="yes" xml:space="preserve">
          <source>Normally &lt;strong&gt;there is no need&lt;/strong&gt; to create Future objects at the application level code.</source>
          <target state="translated">通常、アプリケーションレベルのコードでFutureオブジェクトを作成する&lt;strong&gt;必要はありません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="d90ea54070ee394f637e437d868344967800111e" translate="yes" xml:space="preserve">
          <source>Normally derived classes don&amp;rsquo;t override the following methods, but they may if they want to redefine the definition of stopping and breakpoints.</source>
          <target state="translated">通常、派生クラスは次のメソッドをオーバーライドしませんが、停止ポイントとブレークポイントの定義を再定義する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="e7e3e4198625d7397897fc42c4d0f77e2c31eff8" translate="yes" xml:space="preserve">
          <source>Normally it should not be necessary to use this value directly. Specifying the &lt;code&gt;E&lt;/code&gt; modifier in their format strings causes the &lt;a href=&quot;time#time.strftime&quot;&gt;&lt;code&gt;time.strftime()&lt;/code&gt;&lt;/a&gt; function to use this information. The format of the returned string is not specified, and therefore you should not assume knowledge of it on different systems.</source>
          <target state="translated">通常、この値を直接使用する必要はありません。フォーマット文字列で &lt;code&gt;E&lt;/code&gt; 修飾子を指定すると、&lt;a href=&quot;time#time.strftime&quot;&gt; &lt;code&gt;time.strftime()&lt;/code&gt; &lt;/a&gt;関数がこの情報を使用します。返される文字列の形式は指定されていないため、別のシステムでその知識があると想定しないでください。</target>
        </trans-unit>
        <trans-unit id="2dd8b4f218db00ed4e30efd72f3a335858fe6269" translate="yes" xml:space="preserve">
          <source>Normally the &lt;a href=&quot;#unittest.mock.Mock.__class__&quot;&gt;&lt;code&gt;__class__&lt;/code&gt;&lt;/a&gt; attribute of an object will return its type. For a mock object with a &lt;code&gt;spec&lt;/code&gt;, &lt;code&gt;__class__&lt;/code&gt; returns the spec class instead. This allows mock objects to pass &lt;a href=&quot;functions#isinstance&quot;&gt;&lt;code&gt;isinstance()&lt;/code&gt;&lt;/a&gt; tests for the object they are replacing / masquerading as:</source>
          <target state="translated">通常、オブジェクトの&lt;a href=&quot;#unittest.mock.Mock.__class__&quot;&gt; &lt;code&gt;__class__&lt;/code&gt; &lt;/a&gt;属性はそのタイプを返します。モックオブジェクトのため &lt;code&gt;spec&lt;/code&gt; 、 &lt;code&gt;__class__&lt;/code&gt; 代わり仕様クラスを返します。これにより、モックオブジェクトは、置換するオブジェクトの&lt;a href=&quot;functions#isinstance&quot;&gt; &lt;code&gt;isinstance()&lt;/code&gt; &lt;/a&gt;テストに合格することができます。</target>
        </trans-unit>
        <trans-unit id="5aa93ae111a762d37226903d82a74d9b1f47e777" translate="yes" xml:space="preserve">
          <source>Normally you should use the socket API methods like &lt;a href=&quot;socket#socket.socket.recv&quot;&gt;&lt;code&gt;recv()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;socket#socket.socket.send&quot;&gt;&lt;code&gt;send()&lt;/code&gt;&lt;/a&gt; instead of these methods.</source>
          <target state="translated">通常、これらのメソッドの代わりに、&lt;a href=&quot;socket#socket.socket.recv&quot;&gt; &lt;code&gt;recv()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;socket#socket.socket.send&quot;&gt; &lt;code&gt;send()&lt;/code&gt; &lt;/a&gt;などのソケットAPIメソッドを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="8d529dbb8b442b62924e944a3daf4b0e0711efec" translate="yes" xml:space="preserve">
          <source>Normally, however, you do not need to use these additional methods, as &lt;a href=&quot;#wsgiref.simple_server.WSGIServer.set_app&quot;&gt;&lt;code&gt;set_app()&lt;/code&gt;&lt;/a&gt; is normally called by &lt;a href=&quot;#wsgiref.simple_server.make_server&quot;&gt;&lt;code&gt;make_server()&lt;/code&gt;&lt;/a&gt;, and the &lt;a href=&quot;#wsgiref.simple_server.WSGIServer.get_app&quot;&gt;&lt;code&gt;get_app()&lt;/code&gt;&lt;/a&gt; exists mainly for the benefit of request handler instances.</source>
          <target state="translated">ただし、通常、これらの追加のメソッドを使用する必要はありません。通常、&lt;a href=&quot;#wsgiref.simple_server.WSGIServer.set_app&quot;&gt; &lt;code&gt;set_app()&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;#wsgiref.simple_server.make_server&quot;&gt; &lt;code&gt;make_server()&lt;/code&gt; &lt;/a&gt;によって呼び出され、&lt;a href=&quot;#wsgiref.simple_server.WSGIServer.get_app&quot;&gt; &lt;code&gt;get_app()&lt;/code&gt; &lt;/a&gt;は主に要求ハンドラインスタンスのために存在します。</target>
        </trans-unit>
        <trans-unit id="0788443a411022d37bd9d9d545b151030497a024" translate="yes" xml:space="preserve">
          <source>Normally, the generator emits a single string; however, for &lt;a href=&quot;exceptions#SyntaxError&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; exceptions, it emits several lines that (when printed) display detailed information about where the syntax error occurred.</source>
          <target state="translated">通常、ジェネレータは単一の文字列を出力します。ただし、&lt;a href=&quot;exceptions#SyntaxError&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;例外の場合は、（印刷時に）構文エラーが発生した場所に関する詳細情報を表示する数行が出力されます。</target>
        </trans-unit>
        <trans-unit id="23ff9f150633c592aa535d8b9f1a3400f42cda0e" translate="yes" xml:space="preserve">
          <source>Normally, this method first strips any quotes off the argument. If the result is an absolute pathname, or there was no previous source request in effect, or the previous source was a stream (such as &lt;code&gt;sys.stdin&lt;/code&gt;), the result is left alone. Otherwise, if the result is a relative pathname, the directory part of the name of the file immediately before it on the source inclusion stack is prepended (this behavior is like the way the C preprocessor handles &lt;code&gt;#include
&quot;file.h&quot;&lt;/code&gt;).</source>
          <target state="translated">通常、このメソッドは最初に引用符を引数から取り除きます。結果が絶対パス名である場合、以前のソース要求が有効でなかった場合、または以前のソースがストリーム（ &lt;code&gt;sys.stdin&lt;/code&gt; など）であった場合、結果はそのままになります。それ以外の場合、結果が相対パス名の場合、ソースインクルードスタック上のファイルの直前のファイル名のディレクトリ部分が先頭に追加されます（この動作は、Cプリプロセッサが &lt;code&gt;#include &quot;file.h&quot;&lt;/code&gt; 処理する方法に似ています）。</target>
        </trans-unit>
        <trans-unit id="0fde105c2e0c2c34defc4b3e3f0d9044ebf54e00" translate="yes" xml:space="preserve">
          <source>Normally, when you pass an argument list to the &lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt;&lt;code&gt;parse_args()&lt;/code&gt;&lt;/a&gt; method of an &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt;, it &lt;a href=&quot;#prefix-matching&quot;&gt;recognizes abbreviations&lt;/a&gt; of long options.</source>
          <target state="translated">あなたが引数リストを渡す際、通常、&lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt; &lt;code&gt;parse_args()&lt;/code&gt; &lt;/a&gt;のメソッド&lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; &lt;/a&gt;、それは&lt;a href=&quot;#prefix-matching&quot;&gt;略語を認識し&lt;/a&gt;、長いオプションのを。</target>
        </trans-unit>
        <trans-unit id="9db1844f9d4e3e923c05588f67a7669bd03d89f7" translate="yes" xml:space="preserve">
          <source>Normally, you would use the &lt;code&gt;os.path.is*()&lt;/code&gt; functions for testing the type of a file; the functions here are useful when you are doing multiple tests of the same file and wish to avoid the overhead of the &lt;code&gt;stat()&lt;/code&gt; system call for each test. These are also useful when checking for information about a file that isn&amp;rsquo;t handled by &lt;a href=&quot;os.path#module-os.path&quot;&gt;&lt;code&gt;os.path&lt;/code&gt;&lt;/a&gt;, like the tests for block and character devices.</source>
          <target state="translated">通常、ファイルのタイプをテストするには &lt;code&gt;os.path.is*()&lt;/code&gt; 関数を使用します。ここでの関数は、同じファイルの複数のテストを実行していて、各テストの &lt;code&gt;stat()&lt;/code&gt; システムコールのオーバーヘッドを回避したい場合に役立ちます。これらは、ブロックデバイスやキャラクターデバイスのテストのように、&lt;a href=&quot;os.path#module-os.path&quot;&gt; &lt;code&gt;os.path&lt;/code&gt; &lt;/a&gt;で処理されないファイルに関する情報をチェックする場合にも役立ちます。</target>
        </trans-unit>
        <trans-unit id="bb0c92aed320c99f3cf5a7b36f620aee6bc3d350" translate="yes" xml:space="preserve">
          <source>Not a XENIX named type file</source>
          <target state="translated">XENIX の名前付き型ファイルではない</target>
        </trans-unit>
        <trans-unit id="16362f559ca4bab86e57b8b31308ce0876579def" translate="yes" xml:space="preserve">
          <source>Not a data message</source>
          <target state="translated">データメッセージではない</target>
        </trans-unit>
        <trans-unit id="338469a733ebda5aa0e30bb1db80e0e157e51892" translate="yes" xml:space="preserve">
          <source>Not a directory</source>
          <target state="translated">ディレクトリではない</target>
        </trans-unit>
        <trans-unit id="8c67b4de17834c13bd6e4d2b12aca324d453a11f" translate="yes" xml:space="preserve">
          <source>Not a typewriter</source>
          <target state="translated">タイプライターではなく</target>
        </trans-unit>
        <trans-unit id="2c7846a67eb11ab196b9e6f6d7a69ff03be54a85" translate="yes" xml:space="preserve">
          <source>Not all Python object types are supported; in general, only objects whose value is independent from a particular invocation of Python can be written and read by this module. The following types are supported: booleans, integers, floating point numbers, complex numbers, strings, bytes, bytearrays, tuples, lists, sets, frozensets, dictionaries, and code objects, where it should be understood that tuples, lists, sets, frozensets and dictionaries are only supported as long as the values contained therein are themselves supported. The singletons &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;constants#Ellipsis&quot;&gt;&lt;code&gt;Ellipsis&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;exceptions#StopIteration&quot;&gt;&lt;code&gt;StopIteration&lt;/code&gt;&lt;/a&gt; can also be marshalled and unmarshalled. For format &lt;em&gt;version&lt;/em&gt; lower than 3, recursive lists, sets and dictionaries cannot be written (see below).</source>
          <target state="translated">すべてのPythonオブジェクトタイプがサポートされているわけではありません。一般に、このモジュールでは、Pythonの特定の呼び出しから独立した値を持つオブジェクトのみを読み書きできます。次のタイプがサポートされています：ブール、整数、浮動小数点数、複素数、文字列、バイト、バイト配列、タプル、リスト、セット、frozensets、ディクショナリ、およびコードオブジェクト。タプル、リスト、セット、frozensetsまた、辞書は、そこに含まれる値自体がサポートされている場合にのみサポートされます。シングルトンの&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;constants#Ellipsis&quot;&gt; &lt;code&gt;Ellipsis&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;exceptions#StopIteration&quot;&gt; &lt;code&gt;StopIteration&lt;/code&gt; &lt;/a&gt;また、整列化されず、非整列化することができます。3未満のフォーマット&lt;em&gt;バージョンの&lt;/em&gt;場合、再帰的なリスト、セット、およびディクショナリは記述できません（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="a3e1b1287060e9ba795d51d985b235049aa105ed" translate="yes" xml:space="preserve">
          <source>Not all elements of the XML input will end up as elements of the parsed tree. Currently, this module skips over any XML comments, processing instructions, and document type declarations in the input. Nevertheless, trees built using this module&amp;rsquo;s API rather than parsing from XML text can have comments and processing instructions in them; they will be included when generating XML output. A document type declaration may be accessed by passing a custom &lt;a href=&quot;#xml.etree.ElementTree.TreeBuilder&quot;&gt;&lt;code&gt;TreeBuilder&lt;/code&gt;&lt;/a&gt; instance to the &lt;a href=&quot;#xml.etree.ElementTree.XMLParser&quot;&gt;&lt;code&gt;XMLParser&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">XML入力のすべての要素が解析済みツリーの要素になるわけではありません。現在、このモジュールは、XMLコメント、処理命令、および入力のドキュメントタイプ宣言をスキップします。それにもかかわらず、XMLテキストから解析するのではなく、このモジュールのAPIを使用して構築されたツリーには、コメントと処理命令を含めることができます。XML出力の生成時に含まれます。文書型宣言には、カスタム&lt;a href=&quot;#xml.etree.ElementTree.TreeBuilder&quot;&gt; &lt;code&gt;TreeBuilder&lt;/code&gt; &lt;/a&gt;インスタンスを&lt;a href=&quot;#xml.etree.ElementTree.XMLParser&quot;&gt; &lt;code&gt;XMLParser&lt;/code&gt; &lt;/a&gt;コンストラクターに渡すことでアクセスできます。</target>
        </trans-unit>
        <trans-unit id="7451951009f7df728b6f3d4aa4cb2d7ba85029ba" translate="yes" xml:space="preserve">
          <source>Not all flags are valid for all versions of &lt;code&gt;gdbm&lt;/code&gt;. The module constant &lt;code&gt;open_flags&lt;/code&gt; is a string of supported flag characters. The exception &lt;a href=&quot;#dbm.gnu.error&quot;&gt;&lt;code&gt;error&lt;/code&gt;&lt;/a&gt; is raised if an invalid flag is specified.</source>
          <target state="translated">すべてのフラグが &lt;code&gt;gdbm&lt;/code&gt; のすべてのバージョンで有効であるとは限りません。モジュール定数 &lt;code&gt;open_flags&lt;/code&gt; は、サポートされているフラグ文字の文字列です。無効なフラグを指定すると、例外&lt;a href=&quot;#dbm.gnu.error&quot;&gt; &lt;code&gt;error&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="5642009188b00b4b1401ca4b9758d17920df1198" translate="yes" xml:space="preserve">
          <source>Not all objects can be weakly referenced; those objects which can include class instances, functions written in Python (but not in C), instance methods, sets, frozensets, some &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file objects&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generator&quot;&gt;generators&lt;/a&gt;, type objects, sockets, arrays, deques, regular expression pattern objects, and code objects.</source>
          <target state="translated">すべてのオブジェクトが弱参照できるわけではありません。クラスインスタンス、Python（Cではなく）で記述された関数、インスタンスメソッド、セット、frozensets、一部の&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;ファイルオブジェクト&lt;/a&gt;、&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generator&quot;&gt;ジェネレーター&lt;/a&gt;、タイプオブジェクト、ソケット、配列、両端キュー、正規表現パターンオブジェクト、およびコードオブジェクトを含むことができるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="07c849ef61574f048a53a41ad5a4327d9310750e" translate="yes" xml:space="preserve">
          <source>Not all platforms provide the ability to examine and modify symbolic links. Python itself can tell you what functionality is locally available.</source>
          <target state="translated">すべてのプラットフォームがシンボリックリンクを調べたり修正したりする機能を提供しているわけではありません。Python 自体は、ローカルで利用可能な機能を教えてくれます。</target>
        </trans-unit>
        <trans-unit id="a45153922480b755eeb20a8cd5a5df84141dc176" translate="yes" xml:space="preserve">
          <source>Not available on Windows.</source>
          <target state="translated">Windowsでは使用できません。</target>
        </trans-unit>
        <trans-unit id="4c2c4692797b1c72c2490c0e81cb931fc786ce55" translate="yes" xml:space="preserve">
          <source>Not currently used.</source>
          <target state="translated">現在は使用していません。</target>
        </trans-unit>
        <trans-unit id="ac08186824133d19452b6a51a06060ff36e3034e" translate="yes" xml:space="preserve">
          <source>Not for complex numbers. Instead convert to floats using &lt;a href=&quot;functions#abs&quot;&gt;&lt;code&gt;abs()&lt;/code&gt;&lt;/a&gt; if appropriate.</source>
          <target state="translated">複素数ではありません。代わりに、必要に応じて&lt;a href=&quot;functions#abs&quot;&gt; &lt;code&gt;abs()&lt;/code&gt; &lt;/a&gt;を使用して浮動小数点数に変換してください。</target>
        </trans-unit>
        <trans-unit id="c8587c1a0a933c635a00ae69af27b2446cfdae1c" translate="yes" xml:space="preserve">
          <source>Not knowing the default extraction behaviors can cause unexpected decompression results. For example, when extracting the same archive twice, it overwrites files without asking.</source>
          <target state="translated">デフォルトの抽出動作を知らないと、予期せぬ解凍結果を引き起こす可能性があります。例えば、同じアーカイブを2回抽出すると、問答無用でファイルを上書きしてしまいます。</target>
        </trans-unit>
        <trans-unit id="edfda3842ea6fbe6f744c728779b1389a38d845f" translate="yes" xml:space="preserve">
          <source>Not read, but previously detected by MUA</source>
          <target state="translated">読まれていませんが、MUAによって以前に検出されています。</target>
        </trans-unit>
        <trans-unit id="68572512d58f5572f216f0e3f449070bb1b9602b" translate="yes" xml:space="preserve">
          <source>NotADirectoryError</source>
          <target state="translated">NotADirectoryError</target>
        </trans-unit>
        <trans-unit id="5ceae088184ecb2a3d44c94c6258a6f897118f5f" translate="yes" xml:space="preserve">
          <source>NotImplemented</source>
          <target state="translated">NotImplemented</target>
        </trans-unit>
        <trans-unit id="8850b3bd61499741c05bd500ea7929ed489941ca" translate="yes" xml:space="preserve">
          <source>NotImplementedError</source>
          <target state="translated">NotImplementedError</target>
        </trans-unit>
        <trans-unit id="028373739f7f8068eb474265d2fb30ef33c2b72c" translate="yes" xml:space="preserve">
          <source>Notable Module Contents</source>
          <target state="translated">注目すべきモジュールの内容</target>
        </trans-unit>
        <trans-unit id="b5ae56c0c64d23ceb8b79ad6407cefba354d2d9f" translate="yes" xml:space="preserve">
          <source>Notably, this &amp;ldquo;ignored by default&amp;rdquo; list includes &lt;a href=&quot;exceptions#DeprecationWarning&quot;&gt;&lt;code&gt;DeprecationWarning&lt;/code&gt;&lt;/a&gt; (for every module except &lt;code&gt;__main__&lt;/code&gt;), which means developers should make sure to test their code with typically ignored warnings made visible in order to receive timely notifications of future breaking API changes (whether in the standard library or third party packages).</source>
          <target state="translated">特に、この「デフォルトで無視される」リストには&lt;a href=&quot;exceptions#DeprecationWarning&quot;&gt; &lt;code&gt;DeprecationWarning&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;__main__&lt;/code&gt; を除くすべてのモジュール）が含まれます。つまり、開発者は、将来のAPIの変更に関する最新の通知を受け取るために、通常無視される警告を表示してコードをテストする必要があります（標準ライブラリまたはサードパーティのパッケージ）。</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="eaaf5966f427f3dea82bee61a4387fc35eceff0f" translate="yes" xml:space="preserve">
          <source>Note &lt;code&gt;Decimal.from_float(0.1)&lt;/code&gt; is not the same as &lt;code&gt;Decimal(&amp;lsquo;0.1&amp;rsquo;)&lt;/code&gt;. Since 0.1 is not exactly representable in binary floating point, the value is stored as the nearest representable value which is &lt;code&gt;0x1.999999999999ap-4&lt;/code&gt;. That equivalent value in decimal is &lt;code&gt;0.1000000000000000055511151231257827021181583404541015625&lt;/code&gt;.</source>
          <target state="translated">注 &lt;code&gt;Decimal.from_float(0.1)&lt;/code&gt; は &lt;code&gt;Decimal(&amp;lsquo;0.1&amp;rsquo;)&lt;/code&gt; と同じではありません。0.1は2進浮動小数点で正確に表現できないため、値は &lt;code&gt;0x1.999999999999ap-4&lt;/code&gt; である最も近い表現可能な値として格納されます。この10進数での同等の値は &lt;code&gt;0.1000000000000000055511151231257827021181583404541015625&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a228a03ba762c109dde9253a8ec3fc25b50a1c65" translate="yes" xml:space="preserve">
          <source>Note also that being reentrant is &lt;em&gt;not&lt;/em&gt; the same thing as being thread safe. &lt;a href=&quot;#contextlib.redirect_stdout&quot;&gt;&lt;code&gt;redirect_stdout()&lt;/code&gt;&lt;/a&gt;, for example, is definitely not thread safe, as it makes a global modification to the system state by binding &lt;a href=&quot;sys#sys.stdout&quot;&gt;&lt;code&gt;sys.stdout&lt;/code&gt;&lt;/a&gt; to a different stream.</source>
          <target state="translated">再入可能であること&lt;em&gt;は&lt;/em&gt;、スレッドセーフであることと同じでは&lt;em&gt;ない&lt;/em&gt;ことにも注意してください。たとえば、&lt;a href=&quot;#contextlib.redirect_stdout&quot;&gt; &lt;code&gt;redirect_stdout()&lt;/code&gt; は&lt;/a&gt;、&lt;a href=&quot;sys#sys.stdout&quot;&gt; &lt;code&gt;sys.stdout&lt;/code&gt; &lt;/a&gt;を別のストリームにバインドしてシステム状態をグローバルに変更するため、スレッドセーフではありません。</target>
        </trans-unit>
        <trans-unit id="f61fec861c768279fab36f6f5c37291126c064a6" translate="yes" xml:space="preserve">
          <source>Note how &lt;a href=&quot;#__import__&quot;&gt;&lt;code&gt;__import__()&lt;/code&gt;&lt;/a&gt; returns the toplevel module here because this is the object that is bound to a name by the &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; statement.</source>
          <target state="translated">これが&lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#import&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt;ステートメントによって名前にバインドされているオブジェクトであるため、&lt;a href=&quot;#__import__&quot;&gt; &lt;code&gt;__import__()&lt;/code&gt; &lt;/a&gt;がここでトップレベルモジュールを返す方法に注意してください。</target>
        </trans-unit>
        <trans-unit id="39a7d5217c5c02cfeb8a4550c216b87b699db0c2" translate="yes" xml:space="preserve">
          <source>Note however that &lt;a href=&quot;#timeit.timeit&quot;&gt;&lt;code&gt;timeit()&lt;/code&gt;&lt;/a&gt; will automatically determine the number of repetitions only when the command-line interface is used. In the &lt;a href=&quot;#timeit-examples&quot;&gt;Examples&lt;/a&gt; section you can find more advanced examples.</source>
          <target state="translated">ただし、&lt;a href=&quot;#timeit.timeit&quot;&gt; &lt;code&gt;timeit()&lt;/code&gt; &lt;/a&gt;は、コマンド行インターフェースが使用されている場合にのみ、繰り返し回数を自動的に決定することに注意してください。では&lt;a href=&quot;#timeit-examples&quot;&gt;例&lt;/a&gt;節あなたは、より高度な例を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="f54f228df230f0474c98b205804fa448f5fe875b" translate="yes" xml:space="preserve">
          <source>Note however that in &lt;a href=&quot;#re.MULTILINE&quot;&gt;&lt;code&gt;MULTILINE&lt;/code&gt;&lt;/a&gt; mode &lt;a href=&quot;#re.match&quot;&gt;&lt;code&gt;match()&lt;/code&gt;&lt;/a&gt; only matches at the beginning of the string, whereas using &lt;a href=&quot;#re.search&quot;&gt;&lt;code&gt;search()&lt;/code&gt;&lt;/a&gt; with a regular expression beginning with &lt;code&gt;'^'&lt;/code&gt; will match at the beginning of each line.</source>
          <target state="translated">ただし、&lt;a href=&quot;#re.MULTILINE&quot;&gt; &lt;code&gt;MULTILINE&lt;/code&gt; &lt;/a&gt;モードでは、&lt;a href=&quot;#re.match&quot;&gt; &lt;code&gt;match()&lt;/code&gt; &lt;/a&gt;は文字列の先頭でのみ一致しますが、 &lt;code&gt;'^'&lt;/code&gt; 始まる正規表現で&lt;a href=&quot;#re.search&quot;&gt; &lt;code&gt;search()&lt;/code&gt; &lt;/a&gt;を使用すると、各行の先頭で一致します。</target>
        </trans-unit>
        <trans-unit id="05beb81acbbd60ea7c3692e5bef7179c9b5915a3" translate="yes" xml:space="preserve">
          <source>Note in particular that an exception will be raised if &lt;em&gt;methodname&lt;/em&gt; has not been &lt;em&gt;exposed&lt;/em&gt;.</source>
          <target state="translated">特に、&lt;em&gt;methodname&lt;/em&gt;が&lt;em&gt;公開&lt;/em&gt;さ&lt;em&gt;れ&lt;/em&gt;ていない場合は例外が発生することに注意してください。</target>
        </trans-unit>
        <trans-unit id="bcb9bc5733348cf84603de82545dd9a70a1be5f4" translate="yes" xml:space="preserve">
          <source>Note in particular that options (such as &lt;em&gt;-input&lt;/em&gt;) and arguments (such as &lt;em&gt;eggs.txt&lt;/em&gt;) that are separated by whitespace in the shell go in separate list elements, while arguments that need quoting or backslash escaping when used in the shell (such as filenames containing spaces or the &lt;em&gt;echo&lt;/em&gt; command shown above) are single list elements.</source>
          <target state="translated">特に、シェルで空白で区切られているオプション（&lt;em&gt;-input&lt;/em&gt;など）と引数（&lt;em&gt;eggs.txt&lt;/em&gt;など）は別々のリスト要素にあり、シェルで使用する場合は引用&lt;em&gt;符&lt;/em&gt;またはバックスラッシュエスケープが必要な引数（スペースを含むファイル名または上記の&lt;em&gt;echo&lt;/em&gt;コマンド）は、単一のリスト要素です。</target>
        </trans-unit>
        <trans-unit id="facb49e906f58a2995d4a0cf64fd63f312feb840" translate="yes" xml:space="preserve">
          <source>Note on SIGPIPE</source>
          <target state="translated">SIGPIPEに関する注意事項</target>
        </trans-unit>
        <trans-unit id="93d7b55b91dfb84b963b538a0f61240812a059a0" translate="yes" xml:space="preserve">
          <source>Note on VxWorks, this function doesn&amp;rsquo;t return &lt;code&gt;-signal&lt;/code&gt; when the new process is killed. Instead it raises OSError exception.</source>
          <target state="translated">VxWorksでは、この関数は、新しいプロセスが &lt;code&gt;-signal&lt;/code&gt; ときに-signalを返しません。代わりにOSError例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="2e7e41fdb90e46b885d4fc21bb32cf0b77b1568d" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; objects only remove an action if all of its option strings are overridden. So, in the example above, the old &lt;code&gt;-f/--foo&lt;/code&gt; action is retained as the &lt;code&gt;-f&lt;/code&gt; action, because only the &lt;code&gt;--foo&lt;/code&gt; option string was overridden.</source>
          <target state="translated">&lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; &lt;/a&gt;オブジェクトは、すべてのオプション文字列がオーバーライドされている場合にのみアクションを削除することに注意してください。したがって、上記の例では、 &lt;code&gt;--foo&lt;/code&gt; オプション文字列のみがオーバーライドされたため、古い &lt;code&gt;-f/--foo&lt;/code&gt; -fooアクションは &lt;code&gt;-f&lt;/code&gt; アクションとして保持されます。</target>
        </trans-unit>
        <trans-unit id="bbabc92aff4ed81b97fa59772d1100b9a7b02ef9" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#asyncore.dispatcher.recv&quot;&gt;&lt;code&gt;recv()&lt;/code&gt;&lt;/a&gt; may raise &lt;a href=&quot;exceptions#BlockingIOError&quot;&gt;&lt;code&gt;BlockingIOError&lt;/code&gt;&lt;/a&gt; , even though &lt;a href=&quot;select#select.select&quot;&gt;&lt;code&gt;select.select()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;select#select.poll&quot;&gt;&lt;code&gt;select.poll()&lt;/code&gt;&lt;/a&gt; has reported the socket ready for reading.</source>
          <target state="translated">その注意&lt;a href=&quot;#asyncore.dispatcher.recv&quot;&gt; &lt;code&gt;recv()&lt;/code&gt; &lt;/a&gt;上げることができる&lt;a href=&quot;exceptions#BlockingIOError&quot;&gt; &lt;code&gt;BlockingIOError&lt;/code&gt; を&lt;/a&gt;もかかわらず、&lt;a href=&quot;select#select.select&quot;&gt; &lt;code&gt;select.select()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;select#select.poll&quot;&gt; &lt;code&gt;select.poll()&lt;/code&gt; &lt;/a&gt;読書のための準備ができてソケットを報告しました。</target>
        </trans-unit>
        <trans-unit id="21a214d994f16e1f90118d934dbbf9725f16b159" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#collections.defaultdict.__missing__&quot;&gt;&lt;code&gt;__missing__()&lt;/code&gt;&lt;/a&gt; is &lt;em&gt;not&lt;/em&gt; called for any operations besides &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getitem__&quot;&gt;&lt;code&gt;__getitem__()&lt;/code&gt;&lt;/a&gt;. This means that &lt;code&gt;get()&lt;/code&gt; will, like normal dictionaries, return &lt;code&gt;None&lt;/code&gt; as a default rather than using &lt;a href=&quot;#collections.defaultdict.default_factory&quot;&gt;&lt;code&gt;default_factory&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">注&lt;a href=&quot;#collections.defaultdict.__missing__&quot;&gt; &lt;code&gt;__missing__()&lt;/code&gt; &lt;/a&gt;されて&lt;em&gt;いない&lt;/em&gt;以外のすべての操作のために呼ばれる&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getitem__&quot;&gt; &lt;code&gt;__getitem__()&lt;/code&gt; &lt;/a&gt;。つまり、通常の辞書と同様に、 &lt;code&gt;get()&lt;/code&gt; は&lt;a href=&quot;#collections.defaultdict.default_factory&quot;&gt; &lt;code&gt;default_factory&lt;/code&gt; &lt;/a&gt;を使用するのではなく、デフォルトとして &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0481906125c173c6e85bed62a526281abaa1516a" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#difflib.Differ&quot;&gt;&lt;code&gt;Differ&lt;/code&gt;&lt;/a&gt;-generated deltas make no claim to be &lt;strong&gt;minimal&lt;/strong&gt; diffs. To the contrary, minimal diffs are often counter-intuitive, because they synch up anywhere possible, sometimes accidental matches 100 pages apart. Restricting synch points to contiguous matches preserves some notion of locality, at the occasional cost of producing a longer diff.</source>
          <target state="translated">&lt;a href=&quot;#difflib.Differ&quot;&gt; &lt;code&gt;Differ&lt;/code&gt; が&lt;/a&gt;生成したデルタは、&lt;strong&gt;最小の&lt;/strong&gt;差分であるとは主張しないことに注意してください。それどころか、最小限の差分は直感に反することがよくあります。なぜなら、それらは可能な限りどこでも同期し、時には偶然に100ページ離れて一致するからです。同期ポイントを隣接する一致に制限すると、局所性の概念が維持されますが、長い差分が生成されることがあります。</target>
        </trans-unit>
        <trans-unit id="dd69c68c8e1ff03113702c7b4183ad050851c7e0" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#doctest.ELLIPSIS&quot;&gt;&lt;code&gt;ELLIPSIS&lt;/code&gt;&lt;/a&gt; can also be used to ignore the details of the exception message, but such a test may still fail based on whether or not the module details are printed as part of the exception name. Using &lt;a href=&quot;#doctest.IGNORE_EXCEPTION_DETAIL&quot;&gt;&lt;code&gt;IGNORE_EXCEPTION_DETAIL&lt;/code&gt;&lt;/a&gt; and the details from Python 2.3 is also the only clear way to write a doctest that doesn&amp;rsquo;t care about the exception detail yet continues to pass under Python 2.3 or earlier (those releases do not support &lt;a href=&quot;#doctest-directives&quot;&gt;doctest directives&lt;/a&gt; and ignore them as irrelevant comments). For example:</source>
          <target state="translated">そのノート&lt;a href=&quot;#doctest.ELLIPSIS&quot;&gt; &lt;code&gt;ELLIPSIS&lt;/code&gt; は&lt;/a&gt;また、例外メッセージの内容を無視するために使用することができ、そのようなテストはまだモジュールの詳細は例外名の一部として印刷されるか否かに基づいて失敗することがあります。&lt;a href=&quot;#doctest.IGNORE_EXCEPTION_DETAIL&quot;&gt; &lt;code&gt;IGNORE_EXCEPTION_DETAIL&lt;/code&gt; &lt;/a&gt;とPython 2.3の詳細を使用することも、例外の詳細を気にせず、Python 2.3以前で引き続き合格するdoctestを作成する唯一の明確な方法です（これらのリリースは&lt;a href=&quot;#doctest-directives&quot;&gt;doctestディレクティブ&lt;/a&gt;をサポートせず、無関係なコメントとして無視します） ）。例えば：</target>
        </trans-unit>
        <trans-unit id="8e63f31f55e12cdee25e7b08fb73243d54374458" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#float.hex&quot;&gt;&lt;code&gt;float.hex()&lt;/code&gt;&lt;/a&gt; is an instance method, while &lt;a href=&quot;#float.fromhex&quot;&gt;&lt;code&gt;float.fromhex()&lt;/code&gt;&lt;/a&gt; is a class method.</source>
          <target state="translated">&lt;a href=&quot;#float.hex&quot;&gt; &lt;code&gt;float.hex()&lt;/code&gt; &lt;/a&gt;はインスタンスメソッドであり、&lt;a href=&quot;#float.fromhex&quot;&gt; &lt;code&gt;float.fromhex()&lt;/code&gt; &lt;/a&gt;はクラスメソッドであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8a0c31b2a17d1253675bf81f567abe1a01487d1b" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#http.cookiejar.CookiePolicy.domain_return_ok&quot;&gt;&lt;code&gt;domain_return_ok()&lt;/code&gt;&lt;/a&gt; is called for every &lt;em&gt;cookie&lt;/em&gt; domain, not just for the &lt;em&gt;request&lt;/em&gt; domain. For example, the function might be called with both &lt;code&gt;&quot;.example.com&quot;&lt;/code&gt; and &lt;code&gt;&quot;www.example.com&quot;&lt;/code&gt; if the request domain is &lt;code&gt;&quot;www.example.com&quot;&lt;/code&gt;. The same goes for &lt;a href=&quot;#http.cookiejar.CookiePolicy.path_return_ok&quot;&gt;&lt;code&gt;path_return_ok()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#http.cookiejar.CookiePolicy.domain_return_ok&quot;&gt; &lt;code&gt;domain_return_ok()&lt;/code&gt; &lt;/a&gt;は、&lt;em&gt;要求&lt;/em&gt;ドメインだけでなく、すべての&lt;em&gt;Cookie&lt;/em&gt;ドメインに対して呼び出されることに注意してください。たとえば、リクエストドメインが &lt;code&gt;&quot;www.example.com&quot;&lt;/code&gt; 場合、関数は &lt;code&gt;&quot;.example.com&quot;&lt;/code&gt; と &lt;code&gt;&quot;www.example.com&quot;&lt;/code&gt; 両方で呼び出される可能性があります。&lt;a href=&quot;#http.cookiejar.CookiePolicy.path_return_ok&quot;&gt; &lt;code&gt;path_return_ok()&lt;/code&gt; &lt;/a&gt;についても同様です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="adc891a129f72cc10502357d2a58f83d2b041536" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#inspect.signature&quot;&gt;&lt;code&gt;signature()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#inspect-signature-object&quot;&gt;Signature Object&lt;/a&gt; provide the recommended API for callable introspection, and support additional behaviours (like positional-only arguments) that are sometimes encountered in extension module APIs. This function is retained primarily for use in code that needs to maintain compatibility with the Python 2 &lt;code&gt;inspect&lt;/code&gt; module API.</source>
          <target state="translated">&lt;a href=&quot;#inspect.signature&quot;&gt; &lt;code&gt;signature()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#inspect-signature-object&quot;&gt;Signature Object&lt;/a&gt;は、呼び出し可能なイントロスペクションに推奨されるAPIを提供し、拡張モジュールAPIで時々発生する追加の動作（位置のみの引数など）をサポートすることに注意してください。この関数は、主にPython 2 &lt;code&gt;inspect&lt;/code&gt; モジュールAPI との互換性を維持する必要があるコードで使用するために保持されています。</target>
        </trans-unit>
        <trans-unit id="ddd48ccb5c495507a52bd279914fdcc7d41317f6" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#math.frexp&quot;&gt;&lt;code&gt;frexp()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#math.modf&quot;&gt;&lt;code&gt;modf()&lt;/code&gt;&lt;/a&gt; have a different call/return pattern than their C equivalents: they take a single argument and return a pair of values, rather than returning their second return value through an &amp;lsquo;output parameter&amp;rsquo; (there is no such thing in Python).</source>
          <target state="translated">&lt;a href=&quot;#math.frexp&quot;&gt; &lt;code&gt;frexp()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#math.modf&quot;&gt; &lt;code&gt;modf()&lt;/code&gt; &lt;/a&gt;は、同等のCとは異なる呼び出し/戻りパターンを持っていることに注意してください。これらは、「出力パラメーター」を通じて2番目の戻り値を返すのではなく、単一の引数を取り、値のペアを返します（存在しません）。 Pythonのようなもの）。</target>
        </trans-unit>
        <trans-unit id="c47ac53dbffb6c7e920e0e9c3a5bd7e68f910640" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt; does not have OOR (original object return), it constructs a new, equivalent object each time you retrieve an attribute:</source>
          <target state="translated">&lt;a href=&quot;#module-ctypes&quot;&gt; &lt;code&gt;ctypes&lt;/code&gt; に&lt;/a&gt;はOOR（元のオブジェクトの戻り値）がないことに注意してください。属性を取得するたびに、新しい同等のオブジェクトが作成されます。</target>
        </trans-unit>
        <trans-unit id="021cbf64fa7daa47a193a25312368fd1063a8ec4" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#multiprocessing.Lock&quot;&gt;&lt;code&gt;Lock&lt;/code&gt;&lt;/a&gt; is actually a factory function which returns an instance of &lt;code&gt;multiprocessing.synchronize.Lock&lt;/code&gt; initialized with a default context.</source>
          <target state="translated">&lt;a href=&quot;#multiprocessing.Lock&quot;&gt; &lt;code&gt;Lock&lt;/code&gt; &lt;/a&gt;は実際には、デフォルトのコンテキストで初期化された &lt;code&gt;multiprocessing.synchronize.Lock&lt;/code&gt; のインスタンスを返すファクトリ関数であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="35bd8a5288450aef9ec563731c03552420d81a78" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#multiprocessing.RLock&quot;&gt;&lt;code&gt;RLock&lt;/code&gt;&lt;/a&gt; is actually a factory function which returns an instance of &lt;code&gt;multiprocessing.synchronize.RLock&lt;/code&gt; initialized with a default context.</source>
          <target state="translated">&lt;a href=&quot;#multiprocessing.RLock&quot;&gt; &lt;code&gt;RLock&lt;/code&gt; &lt;/a&gt;は実際には、デフォルトのコンテキストで初期化された &lt;code&gt;multiprocessing.synchronize.RLock&lt;/code&gt; のインスタンスを返すファクトリ関数であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="9325e13fae2a61a60a73c50f96336405ee30e5aa" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#pkgutil.ImpImporter&quot;&gt;&lt;code&gt;ImpImporter&lt;/code&gt;&lt;/a&gt; does not currently support being used by placement on &lt;a href=&quot;sys#sys.meta_path&quot;&gt;&lt;code&gt;sys.meta_path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#pkgutil.ImpImporter&quot;&gt; &lt;code&gt;ImpImporter&lt;/code&gt; &lt;/a&gt;は現在、&lt;a href=&quot;sys#sys.meta_path&quot;&gt; &lt;code&gt;sys.meta_path&lt;/code&gt; &lt;/a&gt;上の配置での使用をサポートしていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="beaaa22c5ee17911c79acb082b3767365455460e" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#socketserver.UnixDatagramServer&quot;&gt;&lt;code&gt;UnixDatagramServer&lt;/code&gt;&lt;/a&gt; derives from &lt;a href=&quot;#socketserver.UDPServer&quot;&gt;&lt;code&gt;UDPServer&lt;/code&gt;&lt;/a&gt;, not from &lt;a href=&quot;#socketserver.UnixStreamServer&quot;&gt;&lt;code&gt;UnixStreamServer&lt;/code&gt;&lt;/a&gt; &amp;mdash; the only difference between an IP and a Unix stream server is the address family, which is simply repeated in both Unix server classes.</source>
          <target state="translated">&lt;a href=&quot;#socketserver.UnixDatagramServer&quot;&gt; &lt;code&gt;UnixDatagramServer&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;#socketserver.UDPServer&quot;&gt; &lt;code&gt;UDPServer&lt;/code&gt; &lt;/a&gt;から派生したものであり、&lt;a href=&quot;#socketserver.UnixStreamServer&quot;&gt; &lt;code&gt;UnixStreamServer&lt;/code&gt; &lt;/a&gt;から派生したものではないことに注意してください。IPとUnixストリームサーバーの唯一の違いは、両方のUnixサーバークラスで単純に繰り返されるアドレスファミリです。</target>
        </trans-unit>
        <trans-unit id="778f82ffcb2b485246b0e53ae55c103c932424fb" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#super&quot;&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt; is implemented as part of the binding process for explicit dotted attribute lookups such as &lt;code&gt;super().__getitem__(name)&lt;/code&gt;. It does so by implementing its own &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattribute__&quot;&gt;&lt;code&gt;__getattribute__()&lt;/code&gt;&lt;/a&gt; method for searching classes in a predictable order that supports cooperative multiple inheritance. Accordingly, &lt;a href=&quot;#super&quot;&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt; is undefined for implicit lookups using statements or operators such as &lt;code&gt;super()[name]&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#super&quot;&gt; &lt;code&gt;super()&lt;/code&gt; &lt;/a&gt;は、 &lt;code&gt;super().__getitem__(name)&lt;/code&gt; などの明示的なドット付き属性ルックアップのバインディングプロセスの一部として実装されていることに注意してください。これは、協調的な多重継承をサポートする予測可能な順序でクラスを検索するための独自の&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattribute__&quot;&gt; &lt;code&gt;__getattribute__()&lt;/code&gt; &lt;/a&gt;メソッドを実装することによって行われます。したがって、&lt;a href=&quot;#super&quot;&gt; &lt;code&gt;super()&lt;/code&gt; &lt;/a&gt; &lt;code&gt;super()[name]&lt;/code&gt; などのステートメントまたは演算子を使用した暗黙的な検索では、super（）は未定義です。</target>
        </trans-unit>
        <trans-unit id="f2d150903542528eb29c182959a6e94d9657319e" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#xml.etree.ElementTree.XMLParser&quot;&gt;&lt;code&gt;XMLParser&lt;/code&gt;&lt;/a&gt; skips over comments in the input instead of creating comment objects for them. An &lt;a href=&quot;#xml.etree.ElementTree.ElementTree&quot;&gt;&lt;code&gt;ElementTree&lt;/code&gt;&lt;/a&gt; will only contain comment nodes if they have been inserted into to the tree using one of the &lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">&lt;a href=&quot;#xml.etree.ElementTree.XMLParser&quot;&gt; &lt;code&gt;XMLParser&lt;/code&gt; &lt;/a&gt;は、コメントオブジェクトを作成する代わりに、入力内のコメントをスキップすることに注意してください。アン&lt;a href=&quot;#xml.etree.ElementTree.ElementTree&quot;&gt; &lt;code&gt;ElementTree&lt;/code&gt; のは&lt;/a&gt;、彼らがのいずれかを使用してツリーに挿入されている場合のみ、コメントノードが含まれています&lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt; &lt;code&gt;Element&lt;/code&gt; &lt;/a&gt;法を。</target>
        </trans-unit>
        <trans-unit id="7733b443aa3ad7da3792a2988711f38bba4a2a03" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#xml.etree.ElementTree.XMLParser&quot;&gt;&lt;code&gt;XMLParser&lt;/code&gt;&lt;/a&gt; skips over processing instructions in the input instead of creating comment objects for them. An &lt;a href=&quot;#xml.etree.ElementTree.ElementTree&quot;&gt;&lt;code&gt;ElementTree&lt;/code&gt;&lt;/a&gt; will only contain processing instruction nodes if they have been inserted into to the tree using one of the &lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">&lt;a href=&quot;#xml.etree.ElementTree.XMLParser&quot;&gt; &lt;code&gt;XMLParser&lt;/code&gt; &lt;/a&gt;は、コメントオブジェクトを作成する代わりに、入力内の処理命令をスキップすることに注意してください。アン&lt;a href=&quot;#xml.etree.ElementTree.ElementTree&quot;&gt; &lt;code&gt;ElementTree&lt;/code&gt; のは&lt;/a&gt;、彼らがのいずれかを使用してツリーに挿入されている場合のみ、命令ノードの処理が含まれます&lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt; &lt;code&gt;Element&lt;/code&gt; &lt;/a&gt;法を。</target>
        </trans-unit>
        <trans-unit id="0a0e52a29264a10a0ed33e3ee017893c317f8a46" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#xml.sax.handler.ContentHandler.startPrefixMapping&quot;&gt;&lt;code&gt;startPrefixMapping()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#xml.sax.handler.ContentHandler.endPrefixMapping&quot;&gt;&lt;code&gt;endPrefixMapping()&lt;/code&gt;&lt;/a&gt; events are not guaranteed to be properly nested relative to each-other: all &lt;a href=&quot;#xml.sax.handler.ContentHandler.startPrefixMapping&quot;&gt;&lt;code&gt;startPrefixMapping()&lt;/code&gt;&lt;/a&gt; events will occur before the corresponding &lt;a href=&quot;#xml.sax.handler.ContentHandler.startElement&quot;&gt;&lt;code&gt;startElement()&lt;/code&gt;&lt;/a&gt; event, and all &lt;a href=&quot;#xml.sax.handler.ContentHandler.endPrefixMapping&quot;&gt;&lt;code&gt;endPrefixMapping()&lt;/code&gt;&lt;/a&gt; events will occur after the corresponding &lt;a href=&quot;#xml.sax.handler.ContentHandler.endElement&quot;&gt;&lt;code&gt;endElement()&lt;/code&gt;&lt;/a&gt; event, but their order is not guaranteed.</source>
          <target state="translated">&lt;a href=&quot;#xml.sax.handler.ContentHandler.startPrefixMapping&quot;&gt; &lt;code&gt;startPrefixMapping()&lt;/code&gt; &lt;/a&gt;イベントと&lt;a href=&quot;#xml.sax.handler.ContentHandler.endPrefixMapping&quot;&gt; &lt;code&gt;endPrefixMapping()&lt;/code&gt; &lt;/a&gt;イベントは、互いに対して適切にネストされることが保証されないことに注意してください。すべての&lt;a href=&quot;#xml.sax.handler.ContentHandler.startPrefixMapping&quot;&gt; &lt;code&gt;startPrefixMapping()&lt;/code&gt; &lt;/a&gt;イベントは、対応する&lt;a href=&quot;#xml.sax.handler.ContentHandler.startElement&quot;&gt; &lt;code&gt;startElement()&lt;/code&gt; &lt;/a&gt;イベントの前に発生し、すべての&lt;a href=&quot;#xml.sax.handler.ContentHandler.endPrefixMapping&quot;&gt; &lt;code&gt;endPrefixMapping()&lt;/code&gt; &lt;/a&gt;イベントは、対応する&lt;a href=&quot;#xml.sax.handler.ContentHandler.endElement&quot;&gt; &lt;code&gt;endElement()&lt;/code&gt; &lt;/a&gt;後に発生します。 （）イベント。ただし、その順序は保証されません。</target>
        </trans-unit>
        <trans-unit id="47444f992c8f787e5218f00f598cb803627da402" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;'a:gz'&lt;/code&gt;, &lt;code&gt;'a:bz2'&lt;/code&gt; or &lt;code&gt;'a:xz'&lt;/code&gt; is not possible. If &lt;em&gt;mode&lt;/em&gt; is not suitable to open a certain (compressed) file for reading, &lt;a href=&quot;#tarfile.ReadError&quot;&gt;&lt;code&gt;ReadError&lt;/code&gt;&lt;/a&gt; is raised. Use &lt;em&gt;mode&lt;/em&gt;&lt;code&gt;'r'&lt;/code&gt; to avoid this. If a compression method is not supported, &lt;a href=&quot;#tarfile.CompressionError&quot;&gt;&lt;code&gt;CompressionError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">なお、 &lt;code&gt;'a:gz'&lt;/code&gt; 、 &lt;code&gt;'a:bz2'&lt;/code&gt; か &lt;code&gt;'a:xz'&lt;/code&gt; は使用できないことに。&lt;em&gt;モード&lt;/em&gt;が特定の（圧縮された）ファイルを読み取るために開くのに適していない場合、&lt;a href=&quot;#tarfile.ReadError&quot;&gt; &lt;code&gt;ReadError&lt;/code&gt; &lt;/a&gt;が発生します。これを回避するには、&lt;em&gt;モード&lt;/em&gt; &lt;code&gt;'r'&lt;/code&gt; を使用し&lt;em&gt;ます&lt;/em&gt;。圧縮方法がサポートされていない場合、&lt;a href=&quot;#tarfile.CompressionError&quot;&gt; &lt;code&gt;CompressionError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="1cc69e2c68bc296e588d8f892981cbd43a28c6e1" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;Lock&lt;/code&gt; is actually a factory function which returns an instance of the most efficient version of the concrete Lock class that is supported by the platform.</source>
          <target state="translated">&lt;code&gt;Lock&lt;/code&gt; は実際には、プラットフォームでサポートされている具象Lockクラスの最も効率的なバージョンのインスタンスを返すファクトリ関数であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ee6451008c83ce88b9e80fafc4e7537e799843ea" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;None&lt;/code&gt; as a type hint is a special case and is replaced by &lt;code&gt;type(None)&lt;/code&gt;.</source>
          <target state="translated">そのノート &lt;code&gt;None&lt;/code&gt; タイプのヒントとしては、特殊なケースではないとによって置き換えられる &lt;code&gt;type(None)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="57fae4790fdc5439f742aac77bc9daa66d83e4d4" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;None&lt;/code&gt; may be returned if no handler handles the request (though the default installed global &lt;a href=&quot;#urllib.request.OpenerDirector&quot;&gt;&lt;code&gt;OpenerDirector&lt;/code&gt;&lt;/a&gt; uses &lt;a href=&quot;#urllib.request.UnknownHandler&quot;&gt;&lt;code&gt;UnknownHandler&lt;/code&gt;&lt;/a&gt; to ensure this never happens).</source>
          <target state="translated">ハンドラーがリクエストを処理しない場合、 &lt;code&gt;None&lt;/code&gt; が返される可能性があることに注意してください（デフォルトでインストールされたグローバル&lt;a href=&quot;#urllib.request.OpenerDirector&quot;&gt; &lt;code&gt;OpenerDirector&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;#urllib.request.UnknownHandler&quot;&gt; &lt;code&gt;UnknownHandler&lt;/code&gt; &lt;/a&gt;を使用してこれが発生しないことを保証します）。</target>
        </trans-unit>
        <trans-unit id="236fa39ea36e5dba046de057b39ac4f3d0d57af9" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;RLock&lt;/code&gt; is actually a factory function which returns an instance of the most efficient version of the concrete RLock class that is supported by the platform.</source>
          <target state="translated">&lt;code&gt;RLock&lt;/code&gt; は、実際には、プラットフォームでサポートされている具象RLockクラスの最も効率的なバージョンのインスタンスを返すファクトリ関数であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="9ed32062270ce11074feca5a6bc1d17484d5ca1f" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;Type[C]&lt;/code&gt; is covariant:</source>
          <target state="translated">&lt;code&gt;Type[C]&lt;/code&gt; は共変であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5b9cfa59b4f04a3b3e5fb4f6cd1086211b01f3d0" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;bletch&lt;/code&gt; is omitted because it doesn&amp;rsquo;t exist; the &lt;code&gt;bar&lt;/code&gt; directory precedes the &lt;code&gt;foo&lt;/code&gt; directory because &lt;code&gt;bar.pth&lt;/code&gt; comes alphabetically before &lt;code&gt;foo.pth&lt;/code&gt;; and &lt;code&gt;spam&lt;/code&gt; is omitted because it is not mentioned in either path configuration file.</source>
          <target state="translated">&lt;code&gt;bletch&lt;/code&gt; は存在しないため省略されていることに注意してください。 &lt;code&gt;bar&lt;/code&gt; ディレクトリには、先行し &lt;code&gt;foo&lt;/code&gt; というのためのディレクトリを &lt;code&gt;bar.pth&lt;/code&gt; は &lt;code&gt;foo.pth&lt;/code&gt; の前にアルファベット順に来る前にあります。そして &lt;code&gt;spam&lt;/code&gt; それがどちらのパス設定ファイルにも記載されていないため省略されています。</target>
        </trans-unit>
        <trans-unit id="d33be2cd5b4983695dd8516ab51e58c98eb1cabb" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;filter(function, iterable)&lt;/code&gt; is equivalent to the generator expression &lt;code&gt;(item for item in iterable if function(item))&lt;/code&gt; if function is not &lt;code&gt;None&lt;/code&gt; and &lt;code&gt;(item for item in iterable if item)&lt;/code&gt; if function is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;filter(function, iterable)&lt;/code&gt; は、functionが &lt;code&gt;None&lt;/code&gt; でない場合、ジェネレーター式 &lt;code&gt;(item for item in iterable if function(item))&lt;/code&gt; ）と同等であることに注意してください。でと &lt;code&gt;(item for item in iterable if item)&lt;/code&gt; if functionが &lt;code&gt;None&lt;/code&gt; である。</target>
        </trans-unit>
        <trans-unit id="85efeca034605ee9db13f57e747d94bb977067bc" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;fork()&lt;/code&gt; calls made by third-party C code may not call those functions, unless it explicitly calls &lt;a href=&quot;https://docs.python.org/3.8/c-api/sys.html#c.PyOS_BeforeFork&quot;&gt;&lt;code&gt;PyOS_BeforeFork()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.8/c-api/sys.html#c.PyOS_AfterFork_Parent&quot;&gt;&lt;code&gt;PyOS_AfterFork_Parent()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/c-api/sys.html#c.PyOS_AfterFork_Child&quot;&gt;&lt;code&gt;PyOS_AfterFork_Child()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">サードパーティのCコードによって行われた &lt;code&gt;fork()&lt;/code&gt; 呼び出しは、明示的に&lt;a href=&quot;https://docs.python.org/3.8/c-api/sys.html#c.PyOS_BeforeFork&quot;&gt; &lt;code&gt;PyOS_BeforeFork()&lt;/code&gt; を&lt;/a&gt;呼び出さない限り、これらの関数を呼び出さない場合があることに注意してください。&lt;a href=&quot;https://docs.python.org/3.8/c-api/sys.html#c.PyOS_AfterFork_Parent&quot;&gt; &lt;code&gt;PyOS_AfterFork_Parent()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;https://docs.python.org/3.8/c-api/sys.html#c.PyOS_AfterFork_Child&quot;&gt; &lt;code&gt;PyOS_AfterFork_Child()&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d7ba61f0ef9cfc007a2b6f8bfd3fbe4f04edd595" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;m.start(group)&lt;/code&gt; will equal &lt;code&gt;m.end(group)&lt;/code&gt; if &lt;em&gt;group&lt;/em&gt; matched a null string. For example, after &lt;code&gt;m = re.search('b(c?)', 'cba')&lt;/code&gt;, &lt;code&gt;m.start(0)&lt;/code&gt; is 1, &lt;code&gt;m.end(0)&lt;/code&gt; is 2, &lt;code&gt;m.start(1)&lt;/code&gt; and &lt;code&gt;m.end(1)&lt;/code&gt; are both 2, and &lt;code&gt;m.start(2)&lt;/code&gt; raises an &lt;a href=&quot;exceptions#IndexError&quot;&gt;&lt;code&gt;IndexError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">そのノート &lt;code&gt;m.start(group)&lt;/code&gt; 等しくなる &lt;code&gt;m.end(group)&lt;/code&gt; 場合&lt;em&gt;グループは&lt;/em&gt;ヌル文字列と一致しました。たとえば、 &lt;code&gt;m = re.search('b(c?)', 'cba')&lt;/code&gt; 後、 &lt;code&gt;m.start(0)&lt;/code&gt; は1、 &lt;code&gt;m.end(0)&lt;/code&gt; は2、 &lt;code&gt;m.start(1)&lt;/code&gt; および &lt;code&gt;m.end(1)&lt;/code&gt; は両方とも2であり、 &lt;code&gt;m.start(2)&lt;/code&gt; は&lt;a href=&quot;exceptions#IndexError&quot;&gt; &lt;code&gt;IndexError&lt;/code&gt; &lt;/a&gt;例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="a801fa594d8a089d333c1d08dda4b81a98110981" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;metavar&lt;/code&gt; only changes the &lt;em&gt;displayed&lt;/em&gt; name - the name of the attribute on the &lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt;&lt;code&gt;parse_args()&lt;/code&gt;&lt;/a&gt; object is still determined by the &lt;a href=&quot;#dest&quot;&gt;dest&lt;/a&gt; value.</source>
          <target state="translated">&lt;code&gt;metavar&lt;/code&gt; は&lt;em&gt;表示される&lt;/em&gt;名前のみを変更することに注意してください-上の属性の名前&lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt; &lt;code&gt;parse_args()&lt;/code&gt; &lt;/a&gt;オブジェクトの、&lt;a href=&quot;#dest&quot;&gt; dest&lt;/a&gt;値によって決定されます。</target>
        </trans-unit>
        <trans-unit id="36e3e839ce2533fb32ef0684d4636235258670ad" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;nargs=1&lt;/code&gt; produces a list of one item. This is different from the default, in which the item is produced by itself.</source>
          <target state="translated">&lt;code&gt;nargs=1&lt;/code&gt; は1つの項目のリストを生成することに注意してください。これは、アイテムがそれ自体で作成されるデフォルトとは異なります。</target>
        </trans-unit>
        <trans-unit id="6cb4d80564b60cb42824f340ae271f84acf512f2" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;quote(string, safe, encoding, errors)&lt;/code&gt; is equivalent to &lt;code&gt;quote_from_bytes(string.encode(encoding, errors), safe)&lt;/code&gt;.</source>
          <target state="translated">なお、 &lt;code&gt;quote(string, safe, encoding, errors)&lt;/code&gt; は &lt;code&gt;quote_from_bytes(string.encode(encoding, errors), safe)&lt;/code&gt; と同等であることに。</target>
        </trans-unit>
        <trans-unit id="cc85143f0c8971e93992f10750203e06ab969614" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;temp0&lt;/code&gt; and &lt;code&gt;temp1&lt;/code&gt; are objects still using the internal buffer of the &lt;code&gt;rc&lt;/code&gt; object above. So executing &lt;code&gt;rc.a = temp0&lt;/code&gt; copies the buffer contents of &lt;code&gt;temp0&lt;/code&gt; into &lt;code&gt;rc&lt;/code&gt; &amp;lsquo;s buffer. This, in turn, changes the contents of &lt;code&gt;temp1&lt;/code&gt;. So, the last assignment &lt;code&gt;rc.b = temp1&lt;/code&gt;, doesn&amp;rsquo;t have the expected effect.</source>
          <target state="translated">&lt;code&gt;temp0&lt;/code&gt; と &lt;code&gt;temp1&lt;/code&gt; は、上記の &lt;code&gt;rc&lt;/code&gt; オブジェクトの内部バッファーをまだ使用しているオブジェクトであることに注意してください。したがって、 &lt;code&gt;rc.a = temp0&lt;/code&gt; 実行すると、temp0のバッファーの内容が &lt;code&gt;rc&lt;/code&gt; のバッファーに &lt;code&gt;temp0&lt;/code&gt; されます。これにより、 &lt;code&gt;temp1&lt;/code&gt; の内容が変更されます。したがって、最後の割り当て &lt;code&gt;rc.b = temp1&lt;/code&gt; は、期待した効果をもたらしません。</target>
        </trans-unit>
        <trans-unit id="7f362e945054667a3816f573ef83bd7edea53f2a" translate="yes" xml:space="preserve">
          <source>Note that &lt;em&gt;all&lt;/em&gt;&lt;a href=&quot;sys#sys.path&quot;&gt;&lt;code&gt;sys.path&lt;/code&gt;&lt;/a&gt; modifications in the body of the context manager, including replacement of the object, will be reverted at the end of the block.</source>
          <target state="translated">&lt;em&gt;すべての&lt;/em&gt;ことに注意してください&lt;em&gt;&lt;/em&gt;&lt;a href=&quot;sys#sys.path&quot;&gt; &lt;code&gt;sys.path&lt;/code&gt; &lt;/a&gt;オブジェクトの置換を含む、コンテキストマネージャーの本体に sys.pathの変更は、ブロックの最後で元に戻されることに。</target>
        </trans-unit>
        <trans-unit id="ce5fc6b37538034752807f8815ba613f8bc848ab" translate="yes" xml:space="preserve">
          <source>Note that &lt;em&gt;lock&lt;/em&gt; is a keyword only argument.</source>
          <target state="translated">ご了承ください &lt;em&gt;lock&lt;/em&gt;はキーワードのみの引数である。</target>
        </trans-unit>
        <trans-unit id="3b2234a6dca333d6acda4ece1514b447bb223c5d" translate="yes" xml:space="preserve">
          <source>Note that &lt;em&gt;lock&lt;/em&gt; is a keyword-only argument.</source>
          <target state="translated">ご了承ください &lt;em&gt;lock&lt;/em&gt;はキーワードのみの引数である。</target>
        </trans-unit>
        <trans-unit id="3e5897049932333313c37f96477a83c9d676a2c7" translate="yes" xml:space="preserve">
          <source>Note that &lt;em&gt;mapname&lt;/em&gt; is first checked if it is an alias to another name.</source>
          <target state="translated">ご了承ください &lt;em&gt;mapname&lt;/em&gt;が別の名前のエイリアスであるかどうかが最初にチェックされることに。</target>
        </trans-unit>
        <trans-unit id="0bf52d3f07d9f7c54657bde5e8753068a541df3d" translate="yes" xml:space="preserve">
          <source>Note that &lt;em&gt;subtype&lt;/em&gt; is optional; if omitted, then subpart MIME type matching is done only with the main type. &lt;em&gt;maintype&lt;/em&gt; is optional too; it defaults to &lt;em&gt;text&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;サブタイプ&lt;/em&gt;はオプションであることに注意してください。省略した場合、サブパートMIMEタイプのマッチングはメインタイプでのみ行われます。&lt;em&gt;maintype&lt;/em&gt;もオプションです。デフォルトは&lt;em&gt; text&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="185bf61bd6bed1a3aeabce3b0e19da1aead89726" translate="yes" xml:space="preserve">
          <source>Note that CGI scripts will be run with UID of user nobody, for security reasons. Problems with the CGI script will be translated to error 403.</source>
          <target state="translated">セキュリティ上の理由から、CGI スクリプトはユーザ nobody の UID で実行されることに注意してください。CGI スクリプトの問題はエラー 403 に変換されます。</target>
        </trans-unit>
        <trans-unit id="2d9d2deaf97052c0294923500df788d9b644ff07" translate="yes" xml:space="preserve">
          <source>Note that DOM attributes may also be manipulated as nodes instead of as simple strings. It is fairly rare that you must do this, however, so this usage is not yet documented.</source>
          <target state="translated">DOM の属性は、単純な文字列ではなくノードとしても操作できることに注意してください。しかし、これをしなければならないことはかなり稀なので、この使用法はまだ文書化されていません。</target>
        </trans-unit>
        <trans-unit id="f0c209dc694d0046aa169702d84ba458e5877b53" translate="yes" xml:space="preserve">
          <source>Note that GNU &lt;strong&gt;gettext&lt;/strong&gt; also defines a &lt;code&gt;dcgettext()&lt;/code&gt; method, but this was deemed not useful and so it is currently unimplemented.</source>
          <target state="translated">GNU &lt;strong&gt;gettext&lt;/strong&gt;は、 &lt;code&gt;dcgettext()&lt;/code&gt; メソッドをいますが、これは役に立たないと見なされたため、現在実装されていません。</target>
        </trans-unit>
        <trans-unit id="ac3a38393892122ad7e515b32aa73f768974848c" translate="yes" xml:space="preserve">
          <source>Note that IMAP4 message numbers change as the mailbox changes; in particular, after an &lt;code&gt;EXPUNGE&lt;/code&gt; command performs deletions the remaining messages are renumbered. So it is highly advisable to use UIDs instead, with the UID command.</source>
          <target state="translated">IMAP4メッセージ番号は、メールボックスが変更されると変化することに注意してください。特に、 &lt;code&gt;EXPUNGE&lt;/code&gt; コマンドが削除を実行した、残りのメッセージの番号が付け直されます。したがって、代わりにUIDコマンドでUIDを使用することを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="171726c431e5e57c0ba8ef895a87dd12a2775147" translate="yes" xml:space="preserve">
          <source>Note that POP3, though widely supported, is obsolescent. The implementation quality of POP3 servers varies widely, and too many are quite poor. If your mailserver supports IMAP, you would be better off using the &lt;a href=&quot;imaplib#imaplib.IMAP4&quot;&gt;&lt;code&gt;imaplib.IMAP4&lt;/code&gt;&lt;/a&gt; class, as IMAP servers tend to be better implemented.</source>
          <target state="translated">POP3は広くサポートされていますが、廃止されていることに注意してください。 POP3サーバーの実装品質は大きく異なり、多すぎるとかなり貧弱です。メールサーバーがIMAPをサポートしている場合は、IMAPサーバーがより適切に実装される傾向があるため、&lt;a href=&quot;imaplib#imaplib.IMAP4&quot;&gt; &lt;code&gt;imaplib.IMAP4&lt;/code&gt; &lt;/a&gt;クラスを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="b0976769a6f63c576221d99c17d735ec72b6244d" translate="yes" xml:space="preserve">
          <source>Note that Python makes no effort to distinguish signaling NaNs from quiet NaNs, and behavior for signaling NaNs remains unspecified. Typical behavior is to treat all NaNs as though they were quiet.</source>
          <target state="translated">Pythonはシグナルを発するNaNと静かなNaNを区別する努力をしておらず、シグナルを発するNaNの振る舞いは未定義のままであることに注意してください。典型的な動作は、すべてのNaNをあたかも静音であるかのように扱うことです。</target>
        </trans-unit>
        <trans-unit id="9296f2c1170009e8779568448d5aef2bd32ea765" translate="yes" xml:space="preserve">
          <source>Note that SSL-on-563 is discouraged per &lt;a href=&quot;https://tools.ietf.org/html/rfc4642.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 4642&lt;/strong&gt;&lt;/a&gt;, in favor of STARTTLS as described below. However, some servers only support the former.</source>
          <target state="translated">SSL-on-563は、&lt;a href=&quot;https://tools.ietf.org/html/rfc4642.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 4642&lt;/strong&gt;&lt;/a&gt;で推奨されていないことに注意してください。以下で説明するように、STARTTLS が推奨されます。ただし、一部のサーバーは前者のみをサポートしています。</target>
        </trans-unit>
        <trans-unit id="0d544a9bc75ffdcf42bb88359222d7a7b4debd33" translate="yes" xml:space="preserve">
          <source>Note that a daemonic process is not allowed to create child processes. Otherwise a daemonic process would leave its children orphaned if it gets terminated when its parent process exits. Additionally, these are &lt;strong&gt;not&lt;/strong&gt; Unix daemons or services, they are normal processes that will be terminated (and not joined) if non-daemonic processes have exited.</source>
          <target state="translated">デーモンプロセスは子プロセスを作成できないことに注意してください。そうしないと、デーモンプロセスは、親プロセスが終了したときに終了した場合、子プロセスが孤立したままになります。さらに、これらはあり&lt;strong&gt;ません&lt;/strong&gt;、彼らは非鬼神のプロセスが終了している場合は終了し（と接合されていない）され、通常のプロセスであり、UNIXのデーモンまたはサービス。</target>
        </trans-unit>
        <trans-unit id="b3ab68b2d6d6352eec66994675336fc958445858" translate="yes" xml:space="preserve">
          <source>Note that a queue created using a manager does not have this issue. See &lt;a href=&quot;#multiprocessing-programming&quot;&gt;Programming guidelines&lt;/a&gt;.</source>
          <target state="translated">マネージャーを使用して作成されたキューにはこの問題がないことに注意してください。&lt;a href=&quot;#multiprocessing-programming&quot;&gt;プログラミングのガイドラインを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="83b09fa4d37d211dda63c2257b5bbfcc0eea346c" translate="yes" xml:space="preserve">
          <source>Note that a single name can be bound to multiple objects. If the result is &lt;code&gt;True&lt;/code&gt;, the name may also be bound to other objects, like an int or list, that does not introduce a new namespace.</source>
          <target state="translated">単一の名前を複数のオブジェクトにバインドできることに注意してください。結果が &lt;code&gt;True&lt;/code&gt; の場合、名前は、新しい名前空間を導入しないintやリストなどの他のオブジェクトにバインドされている可能性もあります。</target>
        </trans-unit>
        <trans-unit id="cc7182d710470dc2eccc4f80d44d9c3c8590984b" translate="yes" xml:space="preserve">
          <source>Note that accessing the ctypes object through the wrapper can be a lot slower than accessing the raw ctypes object.</source>
          <target state="translated">ラッパーを使ってctypesオブジェクトにアクセスすると、生のctypesオブジェクトにアクセスするよりもかなり遅くなることに注意してください。</target>
        </trans-unit>
        <trans-unit id="cfff56aec00da48d3760fdc8fdc321170625cd65" translate="yes" xml:space="preserve">
          <source>Note that additional file formats which can be decompressed by the &lt;strong&gt;gzip&lt;/strong&gt; and &lt;strong&gt;gunzip&lt;/strong&gt; programs, such as those produced by &lt;strong&gt;compress&lt;/strong&gt; and &lt;strong&gt;pack&lt;/strong&gt;, are not supported by this module.</source>
          <target state="translated">このモジュールでは、&lt;strong&gt;compress&lt;/strong&gt;や&lt;strong&gt;pack&lt;/strong&gt;で作成されたものなど、&lt;strong&gt;gzip&lt;/strong&gt;および&lt;strong&gt;gunzip&lt;/strong&gt;プログラムで解凍できる追加のファイル形式はサポートされていません。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="29cc14f3bb61b303c6e569ab997e5a9c2519db07" translate="yes" xml:space="preserve">
          <source>Note that all examples in this section &lt;strong&gt;purposefully&lt;/strong&gt; show how to use the low-level event loop APIs, such as &lt;a href=&quot;#asyncio.loop.run_forever&quot;&gt;&lt;code&gt;loop.run_forever()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#asyncio.loop.call_soon&quot;&gt;&lt;code&gt;loop.call_soon()&lt;/code&gt;&lt;/a&gt;. Modern asyncio applications rarely need to be written this way; consider using the high-level functions like &lt;a href=&quot;asyncio-task#asyncio.run&quot;&gt;&lt;code&gt;asyncio.run()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このセクションのすべての例は、&lt;a href=&quot;#asyncio.loop.run_forever&quot;&gt; &lt;code&gt;loop.run_forever()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#asyncio.loop.call_soon&quot;&gt; &lt;code&gt;loop.call_soon()&lt;/code&gt; &lt;/a&gt;などの低レベルのイベントループAPIの使用方法を&lt;strong&gt;意図的に&lt;/strong&gt;示していることに注意してください。最新のasyncioアプリケーションがこのように記述される必要はほとんどありません。&lt;a href=&quot;asyncio-task#asyncio.run&quot;&gt; &lt;code&gt;asyncio.run()&lt;/code&gt; &lt;/a&gt;などの高水準関数の使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="52b13893f67d7ba58e9280b940186eb07db6ac12" translate="yes" xml:space="preserve">
          <source>Note that all sorts on statistics are in descending order (placing most time consuming items first), where as name, file, and line number searches are in ascending order (alphabetical). The subtle distinction between &lt;code&gt;SortKey.NFL&lt;/code&gt; and &lt;code&gt;SortKey.STDNAME&lt;/code&gt; is that the standard name is a sort of the name as printed, which means that the embedded line numbers get compared in an odd way. For example, lines 3, 20, and 40 would (if the file names were the same) appear in the string order 20, 3 and 40. In contrast, &lt;code&gt;SortKey.NFL&lt;/code&gt; does a numeric compare of the line numbers. In fact, &lt;code&gt;sort_stats(SortKey.NFL)&lt;/code&gt; is the same as &lt;code&gt;sort_stats(SortKey.NAME, SortKey.FILENAME, SortKey.LINE)&lt;/code&gt;.</source>
          <target state="translated">統計のすべてのソートは降順（最も時間のかかる項目を最初に配置）であり、名前、ファイル、および行番号の検索は昇順（アルファベット順）であることに注意してください。 &lt;code&gt;SortKey.NFL&lt;/code&gt; と &lt;code&gt;SortKey.STDNAME&lt;/code&gt; の微妙な違いは、標準名が印刷された名前の一種であることです。つまり、埋め込まれた行番号が奇妙な方法で比較されます。たとえば、 &lt;code&gt;SortKey.NFL&lt;/code&gt; 行目（ファイル名が同じ場合）は、20、3、40の文字列順に表示されます。対照的に、SortKey.NFLは行番号の数値比較を行います。実際、 &lt;code&gt;sort_stats(SortKey.NFL)&lt;/code&gt; は &lt;code&gt;sort_stats(SortKey.NAME, SortKey.FILENAME, SortKey.LINE)&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="f0c40fc37a9bf565a857f29ad723c19c596a97f9" translate="yes" xml:space="preserve">
          <source>Note that all these functions check ordinal bit values derived from the character of the string you pass in; they do not actually know anything about the host machine&amp;rsquo;s character encoding.</source>
          <target state="translated">これらの関数はすべて、渡した文字列の文字から派生した序数ビット値をチェックすることに注意してください。ホストマシンの文字エンコーディングについては、実際には何も知りません。</target>
        </trans-unit>
        <trans-unit id="0102294a10326ceacdc04ecf27b97bae220074cc" translate="yes" xml:space="preserve">
          <source>Note that alternative event loop implementations might have own limitations; please refer to their documentation.</source>
          <target state="translated">イベントループの実装には制限があるかもしれないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="45152f2b702b262fbbfcdce7c55047081266ed37" translate="yes" xml:space="preserve">
          <source>Note that although the naming for the above described class attributes is singular (e.g. &lt;code&gt;cssclass_month&lt;/code&gt;&lt;code&gt;cssclass_noday&lt;/code&gt;), one can replace the single CSS class with a space separated list of CSS classes, for example:</source>
          <target state="translated">上記のクラス属性の命名は単数（例： &lt;code&gt;cssclass_month&lt;/code&gt; &lt;code&gt;cssclass_noday&lt;/code&gt; ）ですが、単一のCSSクラスをスペースで区切られたCSSクラスのリストで置き換えることができます。たとえば、次のようになります。</target>
        </trans-unit>
        <trans-unit id="cc788fedc235ef380745686ed580eadd15bb5571" translate="yes" xml:space="preserve">
          <source>Note that an array of &lt;a href=&quot;ctypes#ctypes.c_char&quot;&gt;&lt;code&gt;ctypes.c_char&lt;/code&gt;&lt;/a&gt; has &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;raw&lt;/code&gt; attributes which allow one to use it to store and retrieve strings &amp;ndash; see documentation for &lt;a href=&quot;ctypes#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;ctypes#ctypes.c_char&quot;&gt; &lt;code&gt;ctypes.c_char&lt;/code&gt; &lt;/a&gt;の配列には &lt;code&gt;value&lt;/code&gt; と &lt;code&gt;raw&lt;/code&gt; 属性があり、文字列の格納と取得にそれを使用できることに注意してください&amp;ndash; &lt;a href=&quot;ctypes#module-ctypes&quot;&gt; &lt;code&gt;ctypes&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="dbc239128181b638fbd4155908a13241b2705d34" translate="yes" xml:space="preserve">
          <source>Note that an array of &lt;a href=&quot;ctypes#ctypes.c_char&quot;&gt;&lt;code&gt;ctypes.c_char&lt;/code&gt;&lt;/a&gt; has &lt;em&gt;value&lt;/em&gt; and &lt;em&gt;raw&lt;/em&gt; attributes which allow one to use it to store and retrieve strings.</source>
          <target state="translated">配列という注意&lt;a href=&quot;ctypes#ctypes.c_char&quot;&gt; &lt;code&gt;ctypes.c_char&lt;/code&gt; が&lt;/a&gt;あり&lt;em&gt;価値&lt;/em&gt;と&lt;em&gt;生&lt;/em&gt; 1は、文字列を格納および取得するためにそれを使用できるようにする属性を。</target>
        </trans-unit>
        <trans-unit id="0725d9c7542906970da6bf54619129ddce9a488b" translate="yes" xml:space="preserve">
          <source>Note that an equivalent command line interface could be produced with less code and more informative help and error messages by using the &lt;a href=&quot;argparse#module-argparse&quot;&gt;&lt;code&gt;argparse&lt;/code&gt;&lt;/a&gt; module:</source>
          <target state="translated">&lt;a href=&quot;argparse#module-argparse&quot;&gt; &lt;code&gt;argparse&lt;/code&gt; &lt;/a&gt;モジュールを使用することで、同等のコマンドラインインターフェイスを、少ないコードで、より有益なヘルプとエラーメッセージで生成できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d79de2b4a69fab3541bfc76151735d65f04d953a" translate="yes" xml:space="preserve">
          <source>Note that any arguments not in your user-defined groups will end up back in the usual &amp;ldquo;positional arguments&amp;rdquo; and &amp;ldquo;optional arguments&amp;rdquo; sections.</source>
          <target state="translated">ユーザー定義グループにない引数は、通常の「位置引数」および「オプション引数」セクションに戻ることに注意してください。</target>
        </trans-unit>
        <trans-unit id="68a57b0f8502dd0b76f40e988de13524a3dc9d6d" translate="yes" xml:space="preserve">
          <source>Note that any data following the terminator will be available for reading by the channel after &lt;a href=&quot;#asynchat.async_chat.found_terminator&quot;&gt;&lt;code&gt;found_terminator()&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="translated">ターミネータに続くデータは、&lt;a href=&quot;#asynchat.async_chat.found_terminator&quot;&gt; &lt;code&gt;found_terminator()&lt;/code&gt; &lt;/a&gt;が呼び出された後、チャネルで読み取ることができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="10e132ee6084002c7b0a817968e06f5f4037ab02" translate="yes" xml:space="preserve">
          <source>Note that any string beginning with two backslashes is assumed by default to be an &lt;code&gt;'AF_PIPE'&lt;/code&gt; address rather than an &lt;code&gt;'AF_UNIX'&lt;/code&gt; address.</source>
          <target state="translated">2つのバックスラッシュで始まる文字列は、デフォルトで &lt;code&gt;'AF_UNIX'&lt;/code&gt; アドレスではなく &lt;code&gt;'AF_PIPE'&lt;/code&gt; アドレスであると想定されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="27d20a06c7ebcc2a74c0dcd2eec75504ff20d0c8" translate="yes" xml:space="preserve">
          <source>Note that as an exception is propagated down the chain of callers, an &lt;code&gt;'exception'&lt;/code&gt; event is generated at each level.</source>
          <target state="translated">例外が呼び出し側のチェーンを伝わるにつれて、 &lt;code&gt;'exception'&lt;/code&gt; イベントが各レベルで生成されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f9800dc40fc6ed2861610fc1c540d6d1d8733fe1" translate="yes" xml:space="preserve">
          <source>Note that calling any method (even inquiries) on a closed stream is undefined. Implementations may raise &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; in this case.</source>
          <target state="translated">閉じたストリームでメソッド（照会も含む）を呼び出すことは定義されていないことに注意してください。この場合、実装では&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="7982f207f5b326c1a5b9df38ed760b57b9caf0aa" translate="yes" xml:space="preserve">
          <source>Note that child nodes of nodes that have a custom visitor method won&amp;rsquo;t be visited unless the visitor calls &lt;a href=&quot;#ast.NodeVisitor.generic_visit&quot;&gt;&lt;code&gt;generic_visit()&lt;/code&gt;&lt;/a&gt; or visits them itself.</source>
          <target state="translated">カスタムビジターメソッドを持つノードの子ノードは、ビジターが&lt;a href=&quot;#ast.NodeVisitor.generic_visit&quot;&gt; &lt;code&gt;generic_visit()&lt;/code&gt; を&lt;/a&gt;呼び出すか、それ自体を訪問しない限りアクセスされないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="2d382ed6dd9eab4df2994bedfb13e3537561f992" translate="yes" xml:space="preserve">
          <source>Note that currently expanded netmasks are not supported. That means &lt;code&gt;2001:db00::0/24&lt;/code&gt; is a valid argument while &lt;code&gt;2001:db00::0/ffff:ff00::&lt;/code&gt; not.</source>
          <target state="translated">現在拡張されているネットマスクはサポートされていないことに注意してください。つまり、 &lt;code&gt;2001:db00::0/24&lt;/code&gt; は有効な引数ですが、 &lt;code&gt;2001:db00::0/ffff:ff00::&lt;/code&gt; は無効です。</target>
        </trans-unit>
        <trans-unit id="4db3f43ffbaa9cce83c5e9797f11ee3784e159b1" translate="yes" xml:space="preserve">
          <source>Note that currently mutually exclusive argument groups do not support the &lt;em&gt;title&lt;/em&gt; and &lt;em&gt;description&lt;/em&gt; arguments of &lt;a href=&quot;#argparse.ArgumentParser.add_argument_group&quot;&gt;&lt;code&gt;add_argument_group()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">現在、相互に排他的な引数グループは、&lt;a href=&quot;#argparse.ArgumentParser.add_argument_group&quot;&gt; &lt;code&gt;add_argument_group()&lt;/code&gt; の&lt;/a&gt;&lt;em&gt;タイトル&lt;/em&gt;と&lt;em&gt;説明の&lt;/em&gt;引数をサポートしていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="4ba81a2a12ca2905b7e3bc3e32ecb856013a86f5" translate="yes" xml:space="preserve">
          <source>Note that descendant processes of the process will &lt;em&gt;not&lt;/em&gt; be terminated &amp;ndash; they will simply become orphaned.</source>
          <target state="translated">プロセスの子孫プロセスは終了され&lt;em&gt;ない&lt;/em&gt;ことに注意してください。単に孤立するだけです。</target>
        </trans-unit>
        <trans-unit id="b3a3be6e16147e9e8fd7d6862b1baa360c9c8ab4" translate="yes" xml:space="preserve">
          <source>Note that encoding with &lt;a href=&quot;#email.encoders.encode_quopri&quot;&gt;&lt;code&gt;encode_quopri()&lt;/code&gt;&lt;/a&gt; also encodes all tabs and space characters in the data.</source>
          <target state="translated">&lt;a href=&quot;#email.encoders.encode_quopri&quot;&gt; &lt;code&gt;encode_quopri()&lt;/code&gt; &lt;/a&gt;を使用したエンコードでは、データ内のすべてのタブとスペース文字もエンコードされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8858707f6b738b8eec7bc257425fec239a5f9e41" translate="yes" xml:space="preserve">
          <source>Note that even for small &lt;code&gt;len(x)&lt;/code&gt;, the total number of permutations of &lt;em&gt;x&lt;/em&gt; can quickly grow larger than the period of most random number generators. This implies that most permutations of a long sequence can never be generated. For example, a sequence of length 2080 is the largest that can fit within the period of the Mersenne Twister random number generator.</source>
          <target state="translated">少しでもために注意 &lt;code&gt;len(x)&lt;/code&gt; 、の順列の総数&lt;em&gt;xは&lt;/em&gt;すぐにほとんどの乱数発生器の周期よりも大きく成長することができます。これは、長いシーケンスのほとんどの順列が生成できないことを意味します。たとえば、長さ2080のシーケンスは、メルセンヌツイスター乱数発生器の期間内に収まる最大のものです。</target>
        </trans-unit>
        <trans-unit id="c135e18157f388a32703b9e0b8ce0fcf98a88ef9" translate="yes" xml:space="preserve">
          <source>Note that even in &lt;a href=&quot;#re.MULTILINE&quot;&gt;&lt;code&gt;MULTILINE&lt;/code&gt;&lt;/a&gt; mode, &lt;a href=&quot;#re.match&quot;&gt;&lt;code&gt;re.match()&lt;/code&gt;&lt;/a&gt; will only match at the beginning of the string and not at the beginning of each line.</source>
          <target state="translated">&lt;a href=&quot;#re.MULTILINE&quot;&gt; &lt;code&gt;MULTILINE&lt;/code&gt; &lt;/a&gt;モードでも、&lt;a href=&quot;#re.match&quot;&gt; &lt;code&gt;re.match()&lt;/code&gt; &lt;/a&gt;は文字列の先頭でのみ一致し、各行の先頭では一致しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="c248f2777a5cff0833e5e1f56ce05642e54cb886" translate="yes" xml:space="preserve">
          <source>Note that even though the time is always returned as a floating point number, not all systems provide time with a better precision than 1 second. While this function normally returns non-decreasing values, it can return a lower value than a previous call if the system clock has been set back between the two calls.</source>
          <target state="translated">時刻は常に浮動小数点数で返されますが、すべてのシステムが1秒よりも精度の良い時刻を提供しているわけではないことに注意してください。この関数は通常は減少しない値を返しますが、2回の呼び出しの間にシステムクロックがセットバックされている場合、前の呼び出しよりも低い値を返すことがあります。</target>
        </trans-unit>
        <trans-unit id="8979e2f2b1b29e83666a8cd201294ac167294831" translate="yes" xml:space="preserve">
          <source>Note that existing parameter values of headers may be accessed through the &lt;code&gt;params&lt;/code&gt; attribute of the header value (for example, &lt;code&gt;msg['Content-Type'].params['charset']&lt;/code&gt;).</source>
          <target state="translated">ヘッダーの既存のパラメーター値には、ヘッダー値の &lt;code&gt;params&lt;/code&gt; 属性を通じてアクセスできることに注意してください（たとえば、 &lt;code&gt;msg['Content-Type'].params['charset']&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="5786a82a8493b79c96451e2f0e8ff1a491a88f3b" translate="yes" xml:space="preserve">
          <source>Note that expected output now shows that the snippet runs 1 second faster than before:</source>
          <target state="translated">期待される出力は、スニペットが以前よりも1秒速く実行されることを示すようになったことに注意してください。</target>
        </trans-unit>
        <trans-unit id="356743d5b08962bffdeebdb7d374e8d296f8aa3d" translate="yes" xml:space="preserve">
          <source>Note that filters attached to handlers are consulted before an event is emitted by the handler, whereas filters attached to loggers are consulted whenever an event is logged (using &lt;a href=&quot;#logging.debug&quot;&gt;&lt;code&gt;debug()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#logging.info&quot;&gt;&lt;code&gt;info()&lt;/code&gt;&lt;/a&gt;, etc.), before sending an event to handlers. This means that events which have been generated by descendant loggers will not be filtered by a logger&amp;rsquo;s filter setting, unless the filter has also been applied to those descendant loggers.</source>
          <target state="translated">ハンドラーにアタッチされたフィルターは、イベントがハンドラーによって発行される前に参照されますが、ロガーにアタッチされたフィルターは、イベントがハンドラーに送信される前に、イベントが記録されるたびに参照されます（&lt;a href=&quot;#logging.debug&quot;&gt; &lt;code&gt;debug()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#logging.info&quot;&gt; &lt;code&gt;info()&lt;/code&gt; &lt;/a&gt;などを使用）。つまり、子孫ロガーによって生成されたイベントは、その子孫ロガーにもフィルターが適用されていない限り、ロガーのフィルター設定によってフィルターされません。</target>
        </trans-unit>
        <trans-unit id="61a0f268ab225e4ac517bd285248bf03bd4c499e" translate="yes" xml:space="preserve">
          <source>Note that for backward compatibility, the &lt;code&gt;re.U&lt;/code&gt; flag still exists (as well as its synonym &lt;code&gt;re.UNICODE&lt;/code&gt; and its embedded counterpart &lt;code&gt;(?u)&lt;/code&gt;), but these are redundant in Python 3 since matches are Unicode by default for strings (and Unicode matching isn&amp;rsquo;t allowed for bytes).</source>
          <target state="translated">下位互換性のために、 &lt;code&gt;re.U&lt;/code&gt; フラグ（およびその同義語 &lt;code&gt;re.UNICODE&lt;/code&gt; とその埋め込み対応物 &lt;code&gt;(?u)&lt;/code&gt; ）は引き続き存在しますが、一致はデフォルトで文字列のUnicode（およびUnicodeバイトのマッチングは許可されていません）。</target>
        </trans-unit>
        <trans-unit id="465c176dc885bd97b79a8361a2bbae22c1b4e34c" translate="yes" xml:space="preserve">
          <source>Note that for processes created by the &lt;a href=&quot;#asyncio.create_subprocess_shell&quot;&gt;&lt;code&gt;create_subprocess_shell()&lt;/code&gt;&lt;/a&gt; function, this attribute is the PID of the spawned shell.</source>
          <target state="translated">&lt;a href=&quot;#asyncio.create_subprocess_shell&quot;&gt; &lt;code&gt;create_subprocess_shell()&lt;/code&gt; &lt;/a&gt;関数によって作成されたプロセスの場合、この属性は生成されたシェルのPIDであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3882e94a24c32a31d35cc2a1b007f11e37659571" translate="yes" xml:space="preserve">
          <source>Note that for some non-Unix systems, &lt;code&gt;sys.prefix&lt;/code&gt; and &lt;code&gt;sys.exec_prefix&lt;/code&gt; are empty, and the path manipulations are skipped; however the import of &lt;code&gt;sitecustomize&lt;/code&gt; and &lt;code&gt;usercustomize&lt;/code&gt; is still attempted.</source>
          <target state="translated">一部の非UNIXシステムでは、 &lt;code&gt;sys.prefix&lt;/code&gt; と &lt;code&gt;sys.exec_prefix&lt;/code&gt; が空であり、パス操作がスキップされることに注意してください。ただし、 &lt;code&gt;sitecustomize&lt;/code&gt; および &lt;code&gt;usercustomize&lt;/code&gt; のインポートは引き続き試行されます。</target>
        </trans-unit>
        <trans-unit id="8fd33ef4d4d5e2689d3ced573aea2f56a54160ad" translate="yes" xml:space="preserve">
          <source>Note that for very large time intervals (greater than 270 years on most platforms) this method will lose microsecond accuracy.</source>
          <target state="translated">非常に大きな時間間隔(ほとんどのプラットフォームで270年以上)では、この方法はマイクロ秒の精度を失うことに注意してください。</target>
        </trans-unit>
        <trans-unit id="840170e277d815baed7c66a50d417357022d75d1" translate="yes" xml:space="preserve">
          <source>Note that functions (built-in and user-defined) are pickled by &amp;ldquo;fully qualified&amp;rdquo; name reference, not by value. &lt;a href=&quot;#id8&quot; id=&quot;id3&quot;&gt;2&lt;/a&gt; This means that only the function name is pickled, along with the name of the module the function is defined in. Neither the function&amp;rsquo;s code, nor any of its function attributes are pickled. Thus the defining module must be importable in the unpickling environment, and the module must contain the named object, otherwise an exception will be raised. &lt;a href=&quot;#id9&quot; id=&quot;id4&quot;&gt;3&lt;/a&gt;</source>
          <target state="translated">関数（組み込みおよびユーザー定義）は、値ではなく「完全修飾」名参照によってピクルされます。&lt;a href=&quot;#id8&quot; id=&quot;id3&quot;&gt;2&lt;/a&gt;これは、関数が定義されているモジュールの名前とともに、関数名のみがpickle化されることを意味します。関数のコードも関数属性もpickle化されません。したがって、定義モジュールはunpickle環境でインポート可能でなければならず、モジュールには名前付きオブジェクトが含まれている必要があります。そうでない場合、例外が発生します。&lt;a href=&quot;#id9&quot; id=&quot;id4&quot;&gt;３&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="eb1ee9a91608b1283fe0ceec10e559f6fc6844a7" translate="yes" xml:space="preserve">
          <source>Note that if a slash(/) appears in the parameter list of a function, when invoking &lt;a href=&quot;#help&quot;&gt;&lt;code&gt;help()&lt;/code&gt;&lt;/a&gt;, it means that the parameters prior to the slash are positional-only. For more info, see &lt;a href=&quot;https://docs.python.org/3.8/faq/programming.html#faq-positional-only-arguments&quot;&gt;the FAQ entry on positional-only parameters&lt;/a&gt;.</source>
          <target state="translated">関数のパラメーターリストにスラッシュ（/）が表示されている場合、&lt;a href=&quot;#help&quot;&gt; &lt;code&gt;help()&lt;/code&gt; &lt;/a&gt;を呼び出すと、スラッシュの前のパラメーターは位置のみに限定されます。詳細については&lt;a href=&quot;https://docs.python.org/3.8/faq/programming.html#faq-positional-only-arguments&quot;&gt;、位置のみのパラメータに関するFAQエントリを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6ba29bc642962688bd93f7d7440bdc3d09b1a14c" translate="yes" xml:space="preserve">
          <source>Note that if anything goes wrong while importing the callable named by &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONBREAKPOINT&quot; id=&quot;index-3&quot;&gt;&lt;code&gt;PYTHONBREAKPOINT&lt;/code&gt;&lt;/a&gt;, a &lt;a href=&quot;exceptions#RuntimeWarning&quot;&gt;&lt;code&gt;RuntimeWarning&lt;/code&gt;&lt;/a&gt; is reported and the breakpoint is ignored.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONBREAKPOINT&quot; id=&quot;index-3&quot;&gt; &lt;code&gt;PYTHONBREAKPOINT&lt;/code&gt; &lt;/a&gt;で指定された呼び出し可能オブジェクトのインポート中に問題が発生した場合、&lt;a href=&quot;exceptions#RuntimeWarning&quot;&gt; &lt;code&gt;RuntimeWarning&lt;/code&gt; &lt;/a&gt;が報告され、ブレークポイントは無視されます。</target>
        </trans-unit>
        <trans-unit id="d37b5b457c0e579a56a9008b596dcf0daed0c531" translate="yes" xml:space="preserve">
          <source>Note that if the message object has no preamble, the &lt;em&gt;preamble&lt;/em&gt; attribute will be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">メッセージオブジェクトにプリアンブルがない場合、&lt;em&gt;プリアンブル&lt;/em&gt;属性は &lt;code&gt;None&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="c57b574c5b42a4687029f512f3b789f966aa395d" translate="yes" xml:space="preserve">
          <source>Note that if the named field appears more than once in the message&amp;rsquo;s headers, exactly which of those field values will be returned is undefined. Use the &lt;a href=&quot;#email.message.EmailMessage.get_all&quot;&gt;&lt;code&gt;get_all()&lt;/code&gt;&lt;/a&gt; method to get the values of all the extant headers named &lt;em&gt;name&lt;/em&gt;.</source>
          <target state="translated">名前付きフィールドがメッセージのヘッダーに複数回出現する場合、返されるフィールド値は正確には定義されていないことに注意してください。&lt;a href=&quot;#email.message.EmailMessage.get_all&quot;&gt; &lt;code&gt;get_all()&lt;/code&gt; &lt;/a&gt;メソッドを使用して、nameという&lt;em&gt;名前の&lt;/em&gt;既存のすべてのヘッダーの値を取得します。</target>
        </trans-unit>
        <trans-unit id="15161d213ea81ba024de0a076644d1272635e94d" translate="yes" xml:space="preserve">
          <source>Note that if the named field appears more than once in the message&amp;rsquo;s headers, exactly which of those field values will be returned is undefined. Use the &lt;a href=&quot;#email.message.Message.get_all&quot;&gt;&lt;code&gt;get_all()&lt;/code&gt;&lt;/a&gt; method to get the values of all the extant named headers.</source>
          <target state="translated">名前付きフィールドがメッセージのヘッダーに複数回出現する場合、返されるフィールド値は正確には定義されていないことに注意してください。&lt;a href=&quot;#email.message.Message.get_all&quot;&gt; &lt;code&gt;get_all()&lt;/code&gt; &lt;/a&gt;メソッドを使用して、既存のすべての名前付きヘッダーの値を取得します。</target>
        </trans-unit>
        <trans-unit id="87ae25219d92f70d8ce3d6068ac05c1ccc107875" translate="yes" xml:space="preserve">
          <source>Note that if you have defined any custom logging level higher than &lt;code&gt;CRITICAL&lt;/code&gt; (this is not recommended), you won&amp;rsquo;t be able to rely on the default value for the &lt;em&gt;level&lt;/em&gt; parameter, but will have to explicitly supply a suitable value.</source>
          <target state="translated">&lt;code&gt;CRITICAL&lt;/code&gt; よりも高いカスタムログレベルを定義した場合（これは推奨されません）、&lt;em&gt;level&lt;/em&gt;パラメーターのデフォルト値に依存することはできませんが、適切な値を明示的に指定する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="2465633c732bfdca544359da14ee59c714468eb0" translate="yes" xml:space="preserve">
          <source>Note that if you set the &lt;em&gt;shell&lt;/em&gt; argument to &lt;code&gt;True&lt;/code&gt;, this is the process ID of the spawned shell.</source>
          <target state="translated">&lt;em&gt;shell&lt;/em&gt;引数を &lt;code&gt;True&lt;/code&gt; に設定した場合、これは生成されたシェルのプロセスIDであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="95edd926d0c8f963e4c8a0f19295c25236bc7bfd" translate="yes" xml:space="preserve">
          <source>Note that if you specify an interpreter and then distribute your application archive, you need to ensure that the interpreter used is portable. The Python launcher for Windows supports most common forms of POSIX &lt;code&gt;#!&lt;/code&gt; line, but there are other issues to consider:</source>
          <target state="translated">インタープリターを指定してアプリケーションアーカイブを配布する場合は、使用するインタープリターが移植可能であることを確認する必要があることに注意してください。Windows用のPythonランチャーは、POSIXの最も一般的な形式をサポートします &lt;code&gt;#!&lt;/code&gt; 行、しかし考慮すべき他の問題があります：</target>
        </trans-unit>
        <trans-unit id="aababa3d966c7b1183bc1e3bb713ff94a4b803c7" translate="yes" xml:space="preserve">
          <source>Note that if you want to send data to the process&amp;rsquo;s stdin, you need to create the Popen object with &lt;code&gt;stdin=PIPE&lt;/code&gt;. Similarly, to get anything other than &lt;code&gt;None&lt;/code&gt; in the result tuple, you need to give &lt;code&gt;stdout=PIPE&lt;/code&gt; and/or &lt;code&gt;stderr=PIPE&lt;/code&gt; too.</source>
          <target state="translated">プロセスのstdinにデータを送信したい場合、 &lt;code&gt;stdin=PIPE&lt;/code&gt; で Popenオブジェクトを作成する必要があることに注意してください。同様に、結果タプルで &lt;code&gt;None&lt;/code&gt; 以外のものを取得するには、 &lt;code&gt;stdout=PIPE&lt;/code&gt; や &lt;code&gt;stderr=PIPE&lt;/code&gt; も指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="d30eb9f3b524dd91c924b480ac665ceea172bbd3" translate="yes" xml:space="preserve">
          <source>Note that if your server is not listening on UDP port 514, &lt;a href=&quot;#logging.handlers.SysLogHandler&quot;&gt;&lt;code&gt;SysLogHandler&lt;/code&gt;&lt;/a&gt; may appear not to work. In that case, check what address you should be using for a domain socket - it&amp;rsquo;s system dependent. For example, on Linux it&amp;rsquo;s usually &amp;lsquo;/dev/log&amp;rsquo; but on OS/X it&amp;rsquo;s &amp;lsquo;/var/run/syslog&amp;rsquo;. You&amp;rsquo;ll need to check your platform and use the appropriate address (you may need to do this check at runtime if your application needs to run on several platforms). On Windows, you pretty much have to use the UDP option.</source>
          <target state="translated">サーバーがUDPポート514を&lt;a href=&quot;#logging.handlers.SysLogHandler&quot;&gt; &lt;code&gt;SysLogHandler&lt;/code&gt; &lt;/a&gt;ない場合、SysLogHandlerが機能していないように見えることがあります。その場合は、ドメインソケットに使用するアドレスを確認してください。システムに依存します。たとえば、Linuxでは通常「/ dev / log」ですが、OS / Xでは「/ var / run / syslog」です。プラットフォームをチェックして適切なアドレスを使用する必要があります（アプリケーションを複数のプラットフォームで実行する必要がある場合は、実行時にこのチェックを行う必要がある場合があります）。 Windowsでは、UDPオプションを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="7e6d6ccf640c4a7fd68532b2415ba6bb4f3714d8" translate="yes" xml:space="preserve">
          <source>Note that in all cases, any envelope header present in the message is not included in the mapping interface.</source>
          <target state="translated">すべての場合において、メッセージに存在するエンベロープヘッダはマッピングインタフェースには含まれないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="ba327349434f8a3d52b3e4e613f26c146b8940c2" translate="yes" xml:space="preserve">
          <source>Note that in order to test something, we use one of the &lt;code&gt;assert*()&lt;/code&gt; methods provided by the &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; base class. If the test fails, an exception will be raised with an explanatory message, and &lt;a href=&quot;#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; will identify the test case as a &lt;em&gt;failure&lt;/em&gt;. Any other exceptions will be treated as &lt;em&gt;errors&lt;/em&gt;.</source>
          <target state="translated">何かをテストするために、&lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt;基本クラスによって提供される &lt;code&gt;assert*()&lt;/code&gt; メソッドの1つを使用することに注意してください。テストが失敗すると、説明メッセージとともに例外が発生し、&lt;a href=&quot;#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt;はテストケースを&lt;em&gt;失敗&lt;/em&gt;として識別します。その他の例外は&lt;em&gt;エラー&lt;/em&gt;として扱われます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e2963c39aeb1fbe44d9106170763ccfab16bbab6" translate="yes" xml:space="preserve">
          <source>Note that in the first example the return value variable &lt;em&gt;rv&lt;/em&gt; will hold an integer value; in the second example it will hold a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object. The structure lay-out for the &lt;em&gt;lockdata&lt;/em&gt; variable is system dependent &amp;mdash; therefore using the &lt;a href=&quot;#fcntl.flock&quot;&gt;&lt;code&gt;flock()&lt;/code&gt;&lt;/a&gt; call may be better.</source>
          <target state="translated">最初の例では、戻り値の変数&lt;em&gt;rv&lt;/em&gt;が整数値を保持することに注意してください。2番目の例では、&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;オブジェクトを保持します。&lt;em&gt;lockdata&lt;/em&gt;変数の構造体のレイアウトはシステムに依存するため、&lt;a href=&quot;#fcntl.flock&quot;&gt; &lt;code&gt;flock()&lt;/code&gt; &lt;/a&gt;呼び出しを使用する方が良い場合があります。</target>
        </trans-unit>
        <trans-unit id="e76d82ec0cfb558c63a1e08054c8f07fa0699635" translate="yes" xml:space="preserve">
          <source>Note that inclusion in the &lt;em&gt;choices&lt;/em&gt; container is checked after any &lt;a href=&quot;#type&quot;&gt;type&lt;/a&gt; conversions have been performed, so the type of the objects in the &lt;em&gt;choices&lt;/em&gt; container should match the &lt;a href=&quot;#type&quot;&gt;type&lt;/a&gt; specified:</source>
          <target state="translated">&lt;em&gt;選択&lt;/em&gt;コンテナーへの組み込みは、&lt;a href=&quot;#type&quot;&gt;型&lt;/a&gt;変換が実行された後にチェックされるため、&lt;em&gt;選択&lt;/em&gt;コンテナー内のオブジェクトのタイプは、指定された&lt;a href=&quot;#type&quot;&gt;タイプと&lt;/a&gt;一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="a424e123046b9f2ba0f16ae4ec8e158536158450" translate="yes" xml:space="preserve">
          <source>Note that installing a signal handler with &lt;a href=&quot;#module-signal&quot;&gt;&lt;code&gt;signal()&lt;/code&gt;&lt;/a&gt; will reset the restart behaviour to interruptible by implicitly calling &lt;code&gt;siginterrupt()&lt;/code&gt; with a true &lt;em&gt;flag&lt;/em&gt; value for the given signal.</source>
          <target state="translated">&lt;a href=&quot;#module-signal&quot;&gt; &lt;code&gt;signal()&lt;/code&gt; &lt;/a&gt;を使用してシグナルハンドラーをインストールすると、特定のシグナルにtrue &lt;em&gt;フラグ&lt;/em&gt;値を指定して &lt;code&gt;siginterrupt()&lt;/code&gt; を暗黙的に呼び出すことにより、再起動動作が割り込み可能にリセットされることに注意してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b9f60fa0720b86d1dcdc718ca772ee8cca933f15" translate="yes" xml:space="preserve">
          <source>Note that it does not allow read/write WAV files.</source>
          <target state="translated">WAVファイルの読み書きはできませんのでご注意ください。</target>
        </trans-unit>
        <trans-unit id="b37732e38cdf4751eb314377a55436fbd87b874f" translate="yes" xml:space="preserve">
          <source>Note that it is actually the comma which makes a tuple, not the parentheses. The parentheses are optional, except in the empty tuple case, or when they are needed to avoid syntactic ambiguity. For example, &lt;code&gt;f(a, b, c)&lt;/code&gt; is a function call with three arguments, while &lt;code&gt;f((a, b, c))&lt;/code&gt; is a function call with a 3-tuple as the sole argument.</source>
          <target state="translated">括弧ではなく、実際にはタプルを作るのはコンマです。括弧は、空のタプルの場合、または構文のあいまいさを回避するために必要な場合を除いて、オプションです。たとえば、 &lt;code&gt;f(a, b, c)&lt;/code&gt; は3つの引数を持つ関数呼び出しであり、 &lt;code&gt;f((a, b, c))&lt;/code&gt; は3つのタプルを唯一の引数として持つ関数呼び出しです。</target>
        </trans-unit>
        <trans-unit id="c1142fa9322d5765d4454b6dfb466ee0b2fdb642" translate="yes" xml:space="preserve">
          <source>Note that it is invalid to set any parameters after calling &lt;code&gt;writeframes()&lt;/code&gt; or &lt;code&gt;writeframesraw()&lt;/code&gt;, and any attempt to do so will raise &lt;a href=&quot;#wave.Error&quot;&gt;&lt;code&gt;wave.Error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;writeframes()&lt;/code&gt; または &lt;code&gt;writeframesraw()&lt;/code&gt; を呼び出した後にパラメータを設定することは無効であり、設定しようとすると&lt;a href=&quot;#wave.Error&quot;&gt; &lt;code&gt;wave.Error&lt;/code&gt; が発生し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="8bccd4b29f1a54b5e303c1a916237118b7ad7ec0" translate="yes" xml:space="preserve">
          <source>Note that it may cause high memory usage for very long iterables. Consider using &lt;a href=&quot;#multiprocessing.pool.Pool.imap&quot;&gt;&lt;code&gt;imap()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#multiprocessing.pool.Pool.imap_unordered&quot;&gt;&lt;code&gt;imap_unordered()&lt;/code&gt;&lt;/a&gt; with explicit &lt;em&gt;chunksize&lt;/em&gt; option for better efficiency.</source>
          <target state="translated">非常に長いイテラブルの場合、メモリ使用量が増える可能性があることに注意してください。効率を上げるために、明示的な&lt;em&gt;チャンクサイズ&lt;/em&gt;オプションを指定した&lt;a href=&quot;#multiprocessing.pool.Pool.imap&quot;&gt; &lt;code&gt;imap()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#multiprocessing.pool.Pool.imap_unordered&quot;&gt; &lt;code&gt;imap_unordered()&lt;/code&gt; の&lt;/a&gt;使用を検討してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bc1c75d4508d9bbf24ec9e11eb857898269d1eae" translate="yes" xml:space="preserve">
          <source>Note that it&amp;rsquo;s already possible to iterate on file objects using &lt;code&gt;for
line in file: ...&lt;/code&gt; without calling &lt;code&gt;file.readlines()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;for line in file: ...&lt;/code&gt; &lt;code&gt;file.readlines()&lt;/code&gt; を呼び出さなくても、ファイルの行で...を使用してファイルオブジェクトを反復処理することはすでに可能であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="05a2b045555cd68924e93f59f7b760be26ddd68b" translate="yes" xml:space="preserve">
          <source>Note that many of these have little practical significance in modern usage. The mnemonics derive from teleprinter conventions that predate digital computers.</source>
          <target state="translated">これらの多くは、現代の使用において実用的な意味をほとんど持たないことに注意してください。これらのニーモニックは、デジタルコンピュータよりも前のテレプリンタの規約に由来しています。</target>
        </trans-unit>
        <trans-unit id="9ed4f4956d2d64f5ed11cfc83c3e2520067e2797" translate="yes" xml:space="preserve">
          <source>Note that methods of asyncio queues don&amp;rsquo;t have a &lt;em&gt;timeout&lt;/em&gt; parameter; use &lt;a href=&quot;asyncio-task#asyncio.wait_for&quot;&gt;&lt;code&gt;asyncio.wait_for()&lt;/code&gt;&lt;/a&gt; function to do queue operations with a timeout.</source>
          <target state="translated">asyncioキューのメソッドには&lt;em&gt;タイムアウト&lt;/em&gt;パラメータがないことに注意してください。&lt;a href=&quot;asyncio-task#asyncio.wait_for&quot;&gt; &lt;code&gt;asyncio.wait_for()&lt;/code&gt; &lt;/a&gt;関数を使用して、タイムアウト付きのキュー操作を実行します。</target>
        </trans-unit>
        <trans-unit id="9d7173aaff46eece39c6ad050dacaca07a346492" translate="yes" xml:space="preserve">
          <source>Note that most parent parsers will specify &lt;code&gt;add_help=False&lt;/code&gt;. Otherwise, the &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; will see two &lt;code&gt;-h/--help&lt;/code&gt; options (one in the parent and one in the child) and raise an error.</source>
          <target state="translated">ほとんどの親パーサーは &lt;code&gt;add_help=False&lt;/code&gt; を指定することに注意してください。それ以外の場合、&lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; &lt;/a&gt;は2つの &lt;code&gt;-h/--help&lt;/code&gt; オプション（親に1つと子に1つ）を表示し、エラーを発生させます。</target>
        </trans-unit>
        <trans-unit id="ec5c2fc42c63d4c02f722210f01d284542c94cdd" translate="yes" xml:space="preserve">
          <source>Note that multiple connection objects may be polled at once by using &lt;a href=&quot;#multiprocessing.connection.wait&quot;&gt;&lt;code&gt;multiprocessing.connection.wait()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#multiprocessing.connection.wait&quot;&gt; &lt;code&gt;multiprocessing.connection.wait()&lt;/code&gt; &lt;/a&gt;を使用して、複数の接続オブジェクトを一度にポーリングできることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5aad7f2fe356ddb37a2958193ffcc95757955613" translate="yes" xml:space="preserve">
          <source>Note that no external programs are called from this function, giving it portability and efficiency.</source>
          <target state="translated">この関数から外部プログラムが呼び出されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="73e56395f79c913850173ac7c4bbd0a531342117" translate="yes" xml:space="preserve">
          <source>Note that no stream repositioning should take place. This method is primarily intended to be able to recover from decoding errors.</source>
          <target state="translated">ストリームの再配置は行わないことに注意してください。この方法は、主にデコードエラーから回復できるようにすることを目的としています。</target>
        </trans-unit>
        <trans-unit id="9b04c87d02c729d2b34d36ed6364a0bf9a50ea51" translate="yes" xml:space="preserve">
          <source>Note that normalization of negative values may be surprising at first. For example:</source>
          <target state="translated">負の値の正規化は、最初は驚くかもしれないことに注意してください。例えば</target>
        </trans-unit>
        <trans-unit id="08827e39a2581735ab237416a511e4b4882c7aff" translate="yes" xml:space="preserve">
          <source>Note that objects related to one context may not be compatible with processes for a different context. In particular, locks created using the &lt;em&gt;fork&lt;/em&gt; context cannot be passed to processes started using the &lt;em&gt;spawn&lt;/em&gt; or &lt;em&gt;forkserver&lt;/em&gt; start methods.</source>
          <target state="translated">あるコンテキストに関連するオブジェクトは、別のコンテキストのプロセスと互換性がない場合があることに注意してください。特に、&lt;em&gt;fork&lt;/em&gt;コンテキストを使用して作成されたロックは、&lt;em&gt;spawn&lt;/em&gt;または&lt;em&gt;forkserver&lt;/em&gt; startメソッドを使用して開始されたプロセスに渡すことができません。</target>
        </trans-unit>
        <trans-unit id="eda4961590997a45a1e79372239074265d25ed88" translate="yes" xml:space="preserve">
          <source>Note that objects which have already been dereferenced, but which live in cycles and have not yet been collected by the garbage collector can be listed among the resulting referrers. To get only currently live objects, call &lt;a href=&quot;#gc.collect&quot;&gt;&lt;code&gt;collect()&lt;/code&gt;&lt;/a&gt; before calling &lt;a href=&quot;#gc.get_referrers&quot;&gt;&lt;code&gt;get_referrers()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すでに逆参照されているが、循環していて、ガベージコレクターによってまだ収集されていないオブジェクトは、結果の参照元にリストされます。現在ライブオブジェクトのみを取得するには、&lt;a href=&quot;#gc.get_referrers&quot;&gt; &lt;code&gt;get_referrers()&lt;/code&gt; を&lt;/a&gt;呼び出す前に&lt;a href=&quot;#gc.collect&quot;&gt; &lt;code&gt;collect()&lt;/code&gt; &lt;/a&gt;を呼び出します。</target>
        </trans-unit>
        <trans-unit id="0d01f60caa4137debd7332962680da8372d67729" translate="yes" xml:space="preserve">
          <source>Note that on Windows child processes will only inherit the level of the parent process&amp;rsquo;s logger &amp;ndash; any other customization of the logger will not be inherited.</source>
          <target state="translated">Windowsでは、子プロセスは親プロセスのロガーのレベルのみを継承することに注意してください。ロガーの他のカスタマイズは継承されません。</target>
        </trans-unit>
        <trans-unit id="71665cc8043f3efa68e4485fe250bc5b29c8a385" translate="yes" xml:space="preserve">
          <source>Note that on some platforms, trying to open a filename using this function, may work and start the operating system&amp;rsquo;s associated program. However, this is neither supported nor portable.</source>
          <target state="translated">一部のプラットフォームでは、この関数を使用してファイル名を開こうとすると、動作してオペレーティングシステムの関連プログラムを起動する場合があります。ただし、これはサポートされておらず、移植性もありません。</target>
        </trans-unit>
        <trans-unit id="2c5a9e4b55caffc98aca4b11598a9c875e9057ec" translate="yes" xml:space="preserve">
          <source>Note that one can also create a shared queue by using a manager object &amp;ndash; see &lt;a href=&quot;#multiprocessing-managers&quot;&gt;Managers&lt;/a&gt;.</source>
          <target state="translated">マネージャオブジェクトを使用して共有キューを作成することもできます&amp;ndash; &lt;a href=&quot;#multiprocessing-managers&quot;&gt;マネージャを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="11489b229a9332af75273ce34ce4bbce75cf8ef6" translate="yes" xml:space="preserve">
          <source>Note that one can also create synchronization primitives by using a manager object &amp;ndash; see &lt;a href=&quot;#multiprocessing-managers&quot;&gt;Managers&lt;/a&gt;.</source>
          <target state="translated">マネージャーオブジェクトを使用して同期プリミティブを作成することもできます&amp;ndash; &lt;a href=&quot;#multiprocessing-managers&quot;&gt;マネージャーを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3d73f2e5696ae1abc027da2033b4b034e5b6843a" translate="yes" xml:space="preserve">
          <source>Note that operations such as &lt;a href=&quot;#audioop.mul&quot;&gt;&lt;code&gt;mul()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#audioop.max&quot;&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/a&gt; make no distinction between mono and stereo fragments, i.e. all samples are treated equal. If this is a problem the stereo fragment should be split into two mono fragments first and recombined later. Here is an example of how to do that:</source>
          <target state="translated">&lt;a href=&quot;#audioop.mul&quot;&gt; &lt;code&gt;mul()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#audioop.max&quot;&gt; &lt;code&gt;max()&lt;/code&gt; &lt;/a&gt;などの操作では、モノフラグメントとステレオフラグメントが区別されないことに注意してください。つまり、すべてのサンプルは同等に扱われます。これが問題である場合、ステレオフラグメントを最初に2つのモノフラグメントに分割し、後で再結合する必要があります。これを行う方法の例を次に示します。</target>
        </trans-unit>
        <trans-unit id="9b16370266d750c139819b213ca33ad0c71c90be" translate="yes" xml:space="preserve">
          <source>Note that other exceptions may also be raised during unpickling, including (but not necessarily limited to) AttributeError, EOFError, ImportError, and IndexError.</source>
          <target state="translated">AttributeError、EOFError、ImportError、IndexErrorなどの例外が発生する可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c14ddea7d8a40390395369e4d9bf692d2a322f31" translate="yes" xml:space="preserve">
          <source>Note that parser-level defaults always override argument-level defaults:</source>
          <target state="translated">パーサレベルのデフォルトは常に引数レベルのデフォルトを上書きすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7eb9240d51fab27d432be3b59cc8d057375a5d25" translate="yes" xml:space="preserve">
          <source>Note that pickles aren&amp;rsquo;t completely secure. If you are concerned about security, you may want to override this method to implement a more secure mechanism. For example, you can sign pickles using HMAC and then verify them on the receiving end, or alternatively you can disable unpickling of global objects on the receiving end.</source>
          <target state="translated">ピクルスは完全に安全ではないことに注意してください。セキュリティが心配な場合は、このメソッドをオーバーライドして、より安全なメカニズムを実装できます。たとえば、HMACを使用してピクルに署名し、受信側でそれらを確認したり、受信側でグローバルオブジェクトのunpickleを無効にしたりできます。</target>
        </trans-unit>
        <trans-unit id="bcb90d29aeda61d23a983d5f5ed8686703c50549" translate="yes" xml:space="preserve">
          <source>Note that printf prints to the real standard output channel, &lt;em&gt;not&lt;/em&gt; to &lt;a href=&quot;sys#sys.stdout&quot;&gt;&lt;code&gt;sys.stdout&lt;/code&gt;&lt;/a&gt;, so these examples will only work at the console prompt, not from within &lt;em&gt;IDLE&lt;/em&gt; or &lt;em&gt;PythonWin&lt;/em&gt;:</source>
          <target state="translated">実際の標準出力チャネルに、なお、printfのプリント&lt;em&gt;ではない&lt;/em&gt;と&lt;a href=&quot;sys#sys.stdout&quot;&gt; &lt;code&gt;sys.stdout&lt;/code&gt; の&lt;/a&gt;ため、これらの例ではない内から、プロンプトコンソールでのみ動作します&lt;em&gt;IDLE&lt;/em&gt;や&lt;em&gt;PythonWin&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="dbe8dc287e2d3ac27238f225b2b077ec51310c3b" translate="yes" xml:space="preserve">
          <source>Note that profiling will only work if the called command/function actually returns. If the interpreter is terminated (e.g. via a &lt;a href=&quot;sys#sys.exit&quot;&gt;&lt;code&gt;sys.exit()&lt;/code&gt;&lt;/a&gt; call during the called command/function execution) no profiling results will be printed.</source>
          <target state="translated">プロファイリングは、呼び出されたコマンド/関数が実際に戻る場合にのみ機能することに注意してください。インタプリタが終了した場合（たとえば、呼び出されたコマンド/関数の実行中に&lt;a href=&quot;sys#sys.exit&quot;&gt; &lt;code&gt;sys.exit()&lt;/code&gt; &lt;/a&gt;呼び出しを介して）、プロファイリング結果は出力されません。</target>
        </trans-unit>
        <trans-unit id="de353d4750a5cdba4018be858fb797f69441158f" translate="yes" xml:space="preserve">
          <source>Note that returning instances of private classes is not recommended. It is usually preferable to make such classes public.</source>
          <target state="translated">プライベートクラスのインスタンスを返すことは推奨されていないことに注意してください。通常はそのようなクラスを公開することが望ましいです。</target>
        </trans-unit>
        <trans-unit id="bae0d8a27b12e898d4d9a61e003f0408e393752d" translate="yes" xml:space="preserve">
          <source>Note that setting and getting an element is potentially non-atomic &amp;ndash; use &lt;a href=&quot;#multiprocessing.sharedctypes.Array&quot;&gt;&lt;code&gt;Array()&lt;/code&gt;&lt;/a&gt; instead to make sure that access is automatically synchronized using a lock.</source>
          <target state="translated">要素の設定と取得は潜在的に非アトミックであることに注意してください。代わりに&lt;a href=&quot;#multiprocessing.sharedctypes.Array&quot;&gt; &lt;code&gt;Array()&lt;/code&gt; &lt;/a&gt;を使用して、ロックを使用してアクセスが自動的に同期されるようにしてください。</target>
        </trans-unit>
        <trans-unit id="fba826635b3c9adedafaa20e7c85f3678b0d3888" translate="yes" xml:space="preserve">
          <source>Note that setting and getting the value is potentially non-atomic &amp;ndash; use &lt;a href=&quot;#multiprocessing.sharedctypes.Value&quot;&gt;&lt;code&gt;Value()&lt;/code&gt;&lt;/a&gt; instead to make sure that access is automatically synchronized using a lock.</source>
          <target state="translated">値の設定と取得は潜在的に非アトミックであることに注意してください&amp;ndash; 代わりに&lt;a href=&quot;#multiprocessing.sharedctypes.Value&quot;&gt; &lt;code&gt;Value()&lt;/code&gt; &lt;/a&gt;を使用して、ロックを使用してアクセスが自動的に同期されるようにします。</target>
        </trans-unit>
        <trans-unit id="a0a4d937d898d6dae87b372469dc8ecdc5efcd60" translate="yes" xml:space="preserve">
          <source>Note that shared fixtures do not play well with [potential] features like test parallelization and they break test isolation. They should be used with care.</source>
          <target state="translated">共有のフィクスチャは、テストの並列化のような[潜在的な]機能とは相性が悪く、テストの分離を壊してしまうことに注意してください。これらは注意して使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="3a3a80c8445850d90d40639df2476d5a77bd29df" translate="yes" xml:space="preserve">
          <source>Note that simply calling a coroutine will not schedule it to be executed:</source>
          <target state="translated">単にコアーチンを呼び出すだけでは、実行されるようにスケジュールされないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="68956186d48d42443b6758d13e6916e94a8cef68" translate="yes" xml:space="preserve">
          <source>Note that since all options are disabled by default, and directives apply only to the example they appear in, enabling options (via &lt;code&gt;+&lt;/code&gt; in a directive) is usually the only meaningful choice. However, option flags can also be passed to functions that run doctests, establishing different defaults. In such cases, disabling an option via &lt;code&gt;-&lt;/code&gt; in a directive can be useful.</source>
          <target state="translated">すべてのオプションはデフォルトで無効になっており、ディレクティブはそれらが表示される例にのみ適用されるため、オプションを有効にすること（ディレクティブの &lt;code&gt;+&lt;/code&gt; による）は通常、唯一の意味のある選択です。ただし、オプションフラグをdoctestを実行する関数に渡して、異なるデフォルトを設定することもできます。このような場合、ディレクティブで &lt;code&gt;-&lt;/code&gt; を使用してオプションを無効にすると便利です。</target>
        </trans-unit>
        <trans-unit id="d486f123342853ccfe49cff51f3b937ee427e3c1" translate="yes" xml:space="preserve">
          <source>Note that some platforms including FreeBSD &amp;lt;= 6.3 and Cygwin have known issues when using &lt;code&gt;fork()&lt;/code&gt; from a thread.</source>
          <target state="translated">FreeBSD &amp;lt;= 6.3およびCygwinを含む一部のプラットフォームには、スレッドから &lt;code&gt;fork()&lt;/code&gt; を使用するときに既知の問題があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4eebda1ed9cbd631d501f51d602004fcc0df5dce" translate="yes" xml:space="preserve">
          <source>Note that some recent versions of the HTML specification do state what order the field values should be supplied in, but knowing whether a request was received from a conforming browser, or even from a browser at all, is tedious and error-prone.</source>
          <target state="translated">最近のHTML仕様のいくつかのバージョンでは、フィールド値がどのような順序で提供されるべきかを記述していますが、リクエストが適合するブラウザから受信されたかどうか、あるいはブラウザから受信されたかどうかを知ることは、面倒でエラーが発生しやすいことに注意してください。</target>
        </trans-unit>
        <trans-unit id="e49765d68859e961a6e270321dec95f459b3abf4" translate="yes" xml:space="preserve">
          <source>Note that some systems might support ancillary data without providing this function. Also note that setting the buffer size using the results of this function may not precisely limit the amount of ancillary data that can be received, since additional data may be able to fit into the padding area.</source>
          <target state="translated">システムによっては、この関数を使用せずにアンシラリデータをサポートしている場合があります。また、この関数の結果を使用してバッファサイズを設定すると、パディング領域に追加データが収まる可能性があるため、受信可能なアンシラリデータの量が正確に制限されない場合があることにも注意してください。</target>
        </trans-unit>
        <trans-unit id="aa8a9295a9dbce0828c8e847a08e997833350743" translate="yes" xml:space="preserve">
          <source>Note that tabs and spaces are both treated as whitespace, but they are not equal: the lines &lt;code&gt;&quot;&amp;nbsp; hello&quot;&lt;/code&gt; and &lt;code&gt;&quot;\thello&quot;&lt;/code&gt; are considered to have no common leading whitespace.</source>
          <target state="translated">タブとスペースはどちらも空白として扱われますが、等しくはありません。 &lt;code&gt;&quot;&amp;nbsp; hello&quot;&lt;/code&gt; 行と &lt;code&gt;&quot;\thello&quot;&lt;/code&gt; は共通の先行空白がないと見なされます。</target>
        </trans-unit>
        <trans-unit id="d9458e3f856c8568d276b2ccc17c59d5c9e0de3b" translate="yes" xml:space="preserve">
          <source>Note that the &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; instances that differ only by the value of the &lt;a href=&quot;#datetime.datetime.fold&quot;&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; attribute are considered equal in comparisons.</source>
          <target state="translated">&lt;a href=&quot;#datetime.datetime.fold&quot;&gt; &lt;code&gt;fold&lt;/code&gt; &lt;/a&gt;属性の値のみが異なる&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;インスタンスは、比較では等しいと見なされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="6e00171800132e17b717121535b8def5b8c707ca" translate="yes" xml:space="preserve">
          <source>Note that the &lt;a href=&quot;#multiprocessing.Process.start&quot;&gt;&lt;code&gt;start()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#multiprocessing.Process.join&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#multiprocessing.Process.is_alive&quot;&gt;&lt;code&gt;is_alive()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#multiprocessing.Process.terminate&quot;&gt;&lt;code&gt;terminate()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#multiprocessing.Process.exitcode&quot;&gt;&lt;code&gt;exitcode&lt;/code&gt;&lt;/a&gt; methods should only be called by the process that created the process object.</source>
          <target state="translated">なお&lt;a href=&quot;#multiprocessing.Process.start&quot;&gt; &lt;code&gt;start()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#multiprocessing.Process.join&quot;&gt; &lt;code&gt;join()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#multiprocessing.Process.is_alive&quot;&gt; &lt;code&gt;is_alive()&lt;/code&gt; 、&lt;/a&gt;（）&lt;a href=&quot;#multiprocessing.Process.terminate&quot;&gt; &lt;code&gt;terminate()&lt;/code&gt; &lt;/a&gt;し、&lt;a href=&quot;#multiprocessing.Process.exitcode&quot;&gt; &lt;code&gt;exitcode&lt;/code&gt; &lt;/a&gt;方法は、プロセスオブジェクトを作成したプロセスによって呼び出されるべきです。</target>
        </trans-unit>
        <trans-unit id="76be1da5963fc00b55ce37e0edfebe2ece5a230b" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;save()&lt;/code&gt; method won&amp;rsquo;t save session cookies anyway, unless you ask otherwise by passing a true &lt;em&gt;ignore_discard&lt;/em&gt; argument.</source>
          <target state="translated">本当の&lt;em&gt;ignore_discard&lt;/em&gt;引数を渡して別の方法で要求しない限り、 &lt;code&gt;save()&lt;/code&gt; メソッドはセッションCookieを保存しないことに&lt;em&gt;注意して&lt;/em&gt;ください。</target>
        </trans-unit>
        <trans-unit id="8d128adeddb15c243a31ce0c09ab30c3100bf9aa" translate="yes" xml:space="preserve">
          <source>Note that the application code and tag bindings can set the selection however they wish, regardless of the value of this option.</source>
          <target state="translated">アプ リ ケーシ ョ ン コ ー ド と タ グのバ イ ンデ ィ ン グは、 こ のオプシ ョ ンの値に関係な く 、 希望す る 選択範囲を設定で き る こ と に注意 し て く だ さ い。</target>
        </trans-unit>
        <trans-unit id="5c688652d419206207ca4fcfbba08a17cc1b4d53" translate="yes" xml:space="preserve">
          <source>Note that the audited arguments may not match the names or positions required by the initializer.</source>
          <target state="translated">監査された引数は、イニシャライザで必要とされる名前や位置と一致しない場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="1deb77e6b0aedeb954896c3aa4ddbd679ed1b4d5" translate="yes" xml:space="preserve">
          <source>Note that the behaviour of &lt;a href=&quot;#asyncio.get_event_loop&quot;&gt;&lt;code&gt;get_event_loop()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#asyncio.set_event_loop&quot;&gt;&lt;code&gt;set_event_loop()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#asyncio.new_event_loop&quot;&gt;&lt;code&gt;new_event_loop()&lt;/code&gt;&lt;/a&gt; functions can be altered by &lt;a href=&quot;asyncio-policy#asyncio-policies&quot;&gt;setting a custom event loop policy&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#asyncio.get_event_loop&quot;&gt; &lt;code&gt;get_event_loop()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#asyncio.set_event_loop&quot;&gt; &lt;code&gt;set_event_loop()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#asyncio.new_event_loop&quot;&gt; &lt;code&gt;new_event_loop()&lt;/code&gt; &lt;/a&gt;関数の動作は&lt;a href=&quot;asyncio-policy#asyncio-policies&quot;&gt;、カスタムイベントループポリシーを設定する&lt;/a&gt;ことで変更できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c66dde87415197d1cc25303a3cb3f7fea45cb7cf" translate="yes" xml:space="preserve">
          <source>Note that the callable will get its parameters as Python bytestrings, which will normally be encoded in UTF-8.</source>
          <target state="translated">callableはそのパラメータをPythonのバイト文字列として取得することに注意してください。</target>
        </trans-unit>
        <trans-unit id="e0ce1087d446a80a298883ee298079809ee68d3a" translate="yes" xml:space="preserve">
          <source>Note that the decorators are applied from the bottom upwards. This is the standard way that Python applies decorators. The order of the created mocks passed into your test function matches this order.</source>
          <target state="translated">デコレータは下から上に向かって適用されることに注意してください。これはPythonがデコレータを適用する標準的な方法です。作成されたモックの順番は、テスト関数に渡された順番と一致します。</target>
        </trans-unit>
        <trans-unit id="e97d1070ca60575742bafcaf80da75c01c5d2f24" translate="yes" xml:space="preserve">
          <source>Note that the default &lt;a href=&quot;#datetime.tzinfo.fromutc&quot;&gt;&lt;code&gt;tzinfo.fromutc()&lt;/code&gt;&lt;/a&gt; method can be overridden in a &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; subclass to affect the result returned by &lt;a href=&quot;#datetime.datetime.astimezone&quot;&gt;&lt;code&gt;astimezone()&lt;/code&gt;&lt;/a&gt;. Ignoring error cases, &lt;a href=&quot;#datetime.datetime.astimezone&quot;&gt;&lt;code&gt;astimezone()&lt;/code&gt;&lt;/a&gt; acts like:</source>
          <target state="translated">デフォルトの&lt;a href=&quot;#datetime.tzinfo.fromutc&quot;&gt; &lt;code&gt;tzinfo.fromutc()&lt;/code&gt; &lt;/a&gt;メソッドを&lt;a href=&quot;#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;サブクラスでオーバーライドして、&lt;a href=&quot;#datetime.datetime.astimezone&quot;&gt; &lt;code&gt;astimezone()&lt;/code&gt; &lt;/a&gt;によって返される結果に影響を与えることができることに注意してください。エラーケースを無視すると、&lt;a href=&quot;#datetime.datetime.astimezone&quot;&gt; &lt;code&gt;astimezone()&lt;/code&gt; &lt;/a&gt;は次のように動作します。</target>
        </trans-unit>
        <trans-unit id="1cdde200b54fdac2ca71696d1fcd9ec16758fa9f" translate="yes" xml:space="preserve">
          <source>Note that the end positions are not required by the compiler and are therefore optional. The end offset is &lt;em&gt;after&lt;/em&gt; the last symbol, for example one can get the source segment of a one-line expression node using &lt;code&gt;source_line[node.col_offset : node.end_col_offset]&lt;/code&gt;.</source>
          <target state="translated">終了位置はコンパイラーには必要ないため、オプションであることに注意してください。終了オフセットは最後のシンボルの&lt;em&gt;後に&lt;/em&gt;あります。たとえば、 &lt;code&gt;source_line[node.col_offset : node.end_col_offset]&lt;/code&gt; を使用して、1行式ノードのソースセグメントを取得できます。</target>
        </trans-unit>
        <trans-unit id="eec0865e31dfa1bea83fd13d92d1b7c2e61986db" translate="yes" xml:space="preserve">
          <source>Note that the exact contents of code info strings are highly implementation dependent and they may change arbitrarily across Python VMs or Python releases.</source>
          <target state="translated">コード情報文字列の正確な内容は実装に大きく依存しており、Python VMやPythonのリリースによって任意に変更される可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="164b1f59a18e5c8abf18fac5ba8c576d24f04885" translate="yes" xml:space="preserve">
          <source>Note that the exact times you set here may not be returned by a subsequent &lt;a href=&quot;#os.stat&quot;&gt;&lt;code&gt;stat()&lt;/code&gt;&lt;/a&gt; call, depending on the resolution with which your operating system records access and modification times; see &lt;a href=&quot;#os.stat&quot;&gt;&lt;code&gt;stat()&lt;/code&gt;&lt;/a&gt;. The best way to preserve exact times is to use the &lt;em&gt;st_atime_ns&lt;/em&gt; and &lt;em&gt;st_mtime_ns&lt;/em&gt; fields from the &lt;a href=&quot;#os.stat&quot;&gt;&lt;code&gt;os.stat()&lt;/code&gt;&lt;/a&gt; result object with the &lt;em&gt;ns&lt;/em&gt; parameter to &lt;code&gt;utime&lt;/code&gt;.</source>
          <target state="translated">ここで設定した正確な時間は、オペレーティングシステムがアクセス時間と変更時間を記録する解像度によっては、後続の&lt;a href=&quot;#os.stat&quot;&gt; &lt;code&gt;stat()&lt;/code&gt; &lt;/a&gt;呼び出しで返されない場合があることに注意してください。&lt;a href=&quot;#os.stat&quot;&gt; &lt;code&gt;stat()&lt;/code&gt; を&lt;/a&gt;参照してください。正確な時間を維持するための最良の方法は、使用することです&lt;em&gt;st_atime_ns&lt;/em&gt;と&lt;em&gt;st_mtime_nsの&lt;/em&gt;からフィールド&lt;a href=&quot;#os.stat&quot;&gt; &lt;code&gt;os.stat()&lt;/code&gt; &lt;/a&gt;で結果オブジェクト&lt;em&gt;NS&lt;/em&gt;へのパラメータ &lt;code&gt;utime&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0b5bbdf77d63ecd9abde1ce3e6def80c3014baa1" translate="yes" xml:space="preserve">
          <source>Note that the exponent is written in decimal rather than hexadecimal, and that it gives the power of 2 by which to multiply the coefficient. For example, the hexadecimal string &lt;code&gt;0x3.a7p10&lt;/code&gt; represents the floating-point number &lt;code&gt;(3 + 10./16 + 7./16**2) * 2.0**10&lt;/code&gt;, or &lt;code&gt;3740.0&lt;/code&gt;:</source>
          <target state="translated">指数は16進数ではなく10進数で記述され、係数に乗算する2の累乗を与えることに注意してください。たとえば、16進数の文字列 &lt;code&gt;0x3.a7p10&lt;/code&gt; は、浮動小数点数 &lt;code&gt;(3 + 10./16 + 7./16**2) * 2.0**10&lt;/code&gt; または &lt;code&gt;3740.0&lt;/code&gt; を表します。</target>
        </trans-unit>
        <trans-unit id="eabb40ec8d9514ff31867d76604ec09c63b3f62f" translate="yes" xml:space="preserve">
          <source>Note that the file is always opened in binary mode. To open a compressed file in text mode, use &lt;a href=&quot;#gzip.open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; (or wrap your &lt;a href=&quot;#gzip.GzipFile&quot;&gt;&lt;code&gt;GzipFile&lt;/code&gt;&lt;/a&gt; with an &lt;a href=&quot;io#io.TextIOWrapper&quot;&gt;&lt;code&gt;io.TextIOWrapper&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">ファイルは常にバイナリモードで開かれることに注意してください。、テキストモードで圧縮されたファイルを開く使用するには&lt;a href=&quot;#gzip.open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;（またはあなたのラップ&lt;a href=&quot;#gzip.GzipFile&quot;&gt; &lt;code&gt;GzipFile&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;io#io.TextIOWrapper&quot;&gt; &lt;code&gt;io.TextIOWrapper&lt;/code&gt; を&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="2d4d5de3b61f6ba7f6afbe52eb7e703b5895b919" translate="yes" xml:space="preserve">
          <source>Note that the filename separator (&lt;code&gt;'/'&lt;/code&gt; on Unix) is &lt;em&gt;not&lt;/em&gt; special to this module. See module &lt;a href=&quot;glob#module-glob&quot;&gt;&lt;code&gt;glob&lt;/code&gt;&lt;/a&gt; for pathname expansion (&lt;a href=&quot;glob#module-glob&quot;&gt;&lt;code&gt;glob&lt;/code&gt;&lt;/a&gt; uses &lt;a href=&quot;#fnmatch.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; to match pathname segments). Similarly, filenames starting with a period are not special for this module, and are matched by the &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt; patterns.</source>
          <target state="translated">ファイル名区切り文字（Unixでは &lt;code&gt;'/'&lt;/code&gt; ）は、このモジュールに固有のものでは&lt;em&gt;ない&lt;/em&gt;ことに注意してください。パス名の展開については、モジュール&lt;a href=&quot;glob#module-glob&quot;&gt; &lt;code&gt;glob&lt;/code&gt; &lt;/a&gt;を参照してください（&lt;a href=&quot;glob#module-glob&quot;&gt; &lt;code&gt;glob&lt;/code&gt; &lt;/a&gt;は、パス名セグメントを一致させるために&lt;a href=&quot;#fnmatch.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt;を使用します）。同様に、ピリオドで始まるファイル名はこのモジュールにとって特別なものではなく、 &lt;code&gt;*&lt;/code&gt; および &lt;code&gt;?&lt;/code&gt; パターン。</target>
        </trans-unit>
        <trans-unit id="1992a5171785db5fc3c20b9338bd90d43b3a8008" translate="yes" xml:space="preserve">
          <source>Note that the first type annotation must be enclosed in quotes, making it a &amp;ldquo;forward reference&amp;rdquo;, to hide the &lt;code&gt;expensive_mod&lt;/code&gt; reference from the interpreter runtime. Type annotations for local variables are not evaluated, so the second annotation does not need to be enclosed in quotes.</source>
          <target state="translated">最初のタイプの注釈は引用符で囲み、「前方参照」にして、 &lt;code&gt;expensive_mod&lt;/code&gt; 参照をインタープリターランタイムから隠す必要があることに注意してください。ローカル変数の型注釈は評価されないため、2番目の注釈を引用符で囲む必要はありません。</target>
        </trans-unit>
        <trans-unit id="59a1de269ac77e8f64ef50ba801d5c66b9db1422" translate="yes" xml:space="preserve">
          <source>Note that the functions &lt;a href=&quot;#parser.compilest&quot;&gt;&lt;code&gt;compilest()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#parser.expr&quot;&gt;&lt;code&gt;expr()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#parser.suite&quot;&gt;&lt;code&gt;suite()&lt;/code&gt;&lt;/a&gt; may raise exceptions which are normally raised by the parsing and compilation process. These include the built in exceptions &lt;a href=&quot;exceptions#MemoryError&quot;&gt;&lt;code&gt;MemoryError&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;exceptions#OverflowError&quot;&gt;&lt;code&gt;OverflowError&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;exceptions#SyntaxError&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;exceptions#SystemError&quot;&gt;&lt;code&gt;SystemError&lt;/code&gt;&lt;/a&gt;. In these cases, these exceptions carry all the meaning normally associated with them. Refer to the descriptions of each function for detailed information.</source>
          <target state="translated">関数&lt;a href=&quot;#parser.compilest&quot;&gt; &lt;code&gt;compilest()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#parser.expr&quot;&gt; &lt;code&gt;expr()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#parser.suite&quot;&gt; &lt;code&gt;suite()&lt;/code&gt; &lt;/a&gt;は、通常、解析およびコンパイルプロセスによって発生する例外を発生させる可能性があることに注意してください。これらは例外に建て含める&lt;a href=&quot;exceptions#MemoryError&quot;&gt; &lt;code&gt;MemoryError&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;exceptions#OverflowError&quot;&gt; &lt;code&gt;OverflowError&lt;/code&gt; を&lt;/a&gt;、&lt;a href=&quot;exceptions#SyntaxError&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;、と&lt;a href=&quot;exceptions#SystemError&quot;&gt; &lt;code&gt;SystemError&lt;/code&gt; &lt;/a&gt;。これらの場合、これらの例外は通常それらに関連するすべての意味を持ちます。詳細については、各機能の説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="cba8c1dab1231c0e020d29f555ee5fe18e0dc2a0" translate="yes" xml:space="preserve">
          <source>Note that the global side effect on &lt;a href=&quot;sys#sys.stdout&quot;&gt;&lt;code&gt;sys.stdout&lt;/code&gt;&lt;/a&gt; means that this context manager is not suitable for use in library code and most threaded applications. It also has no effect on the output of subprocesses. However, it is still a useful approach for many utility scripts.</source>
          <target state="translated">&lt;a href=&quot;sys#sys.stdout&quot;&gt; &lt;code&gt;sys.stdout&lt;/code&gt; &lt;/a&gt;に対するグローバルな副作用は、このコンテキストマネージャがライブラリコードおよびほとんどのスレッドアプリケーションでの使用に適していないことを意味することに注意してください。また、サブプロセスの出力にも影響しません。ただし、それでも多くのユーティリティスクリプトで有用なアプローチです。</target>
        </trans-unit>
        <trans-unit id="256291afcdf663f4ee7f5d169948e8c4e068a3ea" translate="yes" xml:space="preserve">
          <source>Note that the implementation of these methods may involve calls of the parent &lt;a href=&quot;#urllib.request.OpenerDirector&quot;&gt;&lt;code&gt;OpenerDirector&lt;/code&gt;&lt;/a&gt; instance&amp;rsquo;s &lt;a href=&quot;#urllib.request.OpenerDirector.open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#urllib.request.OpenerDirector.error&quot;&gt;&lt;code&gt;error()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">これらのメソッドの実装には、親&lt;a href=&quot;#urllib.request.OpenerDirector&quot;&gt; &lt;code&gt;OpenerDirector&lt;/code&gt; &lt;/a&gt;インスタンスの&lt;a href=&quot;#urllib.request.OpenerDirector.open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#urllib.request.OpenerDirector.error&quot;&gt; &lt;code&gt;error()&lt;/code&gt; &lt;/a&gt;メソッドの呼び出しが含まれる場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="db96e2903bb03526d487ef5f0e7a28904d91b153" translate="yes" xml:space="preserve">
          <source>Note that the last tuple returned by &lt;code&gt;get_matching_blocks()&lt;/code&gt; is always a dummy, &lt;code&gt;(len(a), len(b), 0)&lt;/code&gt;, and this is the only case in which the last tuple element (number of elements matched) is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;get_matching_blocks()&lt;/code&gt; によって返される最後のタプルは常にダミー &lt;code&gt;(len(a), len(b), 0)&lt;/code&gt; であり、これが最後のタプル要素（一致する要素の数）が &lt;code&gt;0&lt;/code&gt; である唯一のケースであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5d9efcbb8db4d5059e437fd61cf5752e8f008ac4" translate="yes" xml:space="preserve">
          <source>Note that the length of this list must be seven items.</source>
          <target state="translated">このリストの長さは7項目でなければならないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="cc6ae65cf6a2c6b690528b4be599e5bed47ef7e9" translate="yes" xml:space="preserve">
          <source>Note that the locator will return correct information only during the invocation of the events in this interface. The application should not attempt to use it at any other time.</source>
          <target state="translated">ロケータが正しい情報を返すのは、このインタフェース内のイベントの呼び出しの間だけであることに注意してください。アプリケーションは、それ以外の時間にこれを使用しようとしてはいけません。</target>
        </trans-unit>
        <trans-unit id="4e632c3015ab8a0ba3453634da1b41b96d4c11e9" translate="yes" xml:space="preserve">
          <source>Note that the man pages list &amp;ldquo;STANDARD OPTIONS&amp;rdquo; and &amp;ldquo;WIDGET SPECIFIC OPTIONS&amp;rdquo; for each widget. The former is a list of options that are common to many widgets, the latter are the options that are idiosyncratic to that particular widget. The Standard Options are documented on the &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/options(3)&quot;&gt;options(3)&lt;/a&gt;&lt;/em&gt; man page.</source>
          <target state="translated">マニュアルページには、各ウィジェットの「標準オプション」と「ウィジェット固有のオプション」がリストされていることに注意してください。前者は多くのウィジェットに共通のオプションのリストであり、後者はその特定のウィジェットに固有のオプションです。標準オプションは、&lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/options(3)&quot;&gt;options（3）の&lt;/a&gt;&lt;/em&gt;マニュアルページに記載されてい&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="0aa16e828033b4f45947239c8dad63dfd83cf58b" translate="yes" xml:space="preserve">
          <source>Note that the methods of a pool should only ever be used by the process which created it.</source>
          <target state="translated">プールのメソッドは、プールを作成したプロセスでのみ使用することに注意してください。</target>
        </trans-unit>
        <trans-unit id="403f74ccffe9160e93df16ee60fb1936940a68d7" translate="yes" xml:space="preserve">
          <source>Note that the methods of the pool object should only be called by the process which created the pool.</source>
          <target state="translated">プールオブジェクトのメソッドは、プールを作成したプロセスからのみ呼び出されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="072ef7e2339f223029bd2baf38337de36c7889d9" translate="yes" xml:space="preserve">
          <source>Note that the object name, &lt;code&gt;.fred&lt;/code&gt;, starts with a dot.</source>
          <target state="translated">オブジェクト名 &lt;code&gt;.fred&lt;/code&gt; はドットで始まることに注意してください。</target>
        </trans-unit>
        <trans-unit id="dd5e150e0b095725b6075fcce13020fbe7fbe7d6" translate="yes" xml:space="preserve">
          <source>Note that the object returned by &lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt;&lt;code&gt;parse_args()&lt;/code&gt;&lt;/a&gt; will only contain attributes for the main parser and the subparser that was selected by the command line (and not any other subparsers). So in the example above, when the &lt;code&gt;a&lt;/code&gt; command is specified, only the &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; attributes are present, and when the &lt;code&gt;b&lt;/code&gt; command is specified, only the &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt; attributes are present.</source>
          <target state="translated">&lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt; &lt;code&gt;parse_args()&lt;/code&gt; &lt;/a&gt;によって返されるオブジェクトには、メインパーサーとコマンドラインによって選択されたサブパーサーの属性のみが含まれることに注意してください（他のサブパーサーは含まれません）。したがって、上記の例では、 &lt;code&gt;a&lt;/code&gt; コマンドが指定されている場合、 &lt;code&gt;foo&lt;/code&gt; 属性と &lt;code&gt;bar&lt;/code&gt; 属性のみが存在し、 &lt;code&gt;b&lt;/code&gt; コマンドが指定されている場合、 &lt;code&gt;foo&lt;/code&gt; 属性と &lt;code&gt;baz&lt;/code&gt; 属性のみが存在します。</target>
        </trans-unit>
        <trans-unit id="833ae3938a6f5fe64221af69a439e4759ab70b12" translate="yes" xml:space="preserve">
          <source>Note that the order of the (states, value) sequences for an option does matter, if the order is changed to &lt;code&gt;[('active', 'blue'), ('pressed',
'red')]&lt;/code&gt; in the foreground option, for example, the result would be a blue foreground when the widget were in active or pressed states.</source>
          <target state="translated">フォアグラウンドオプションで順序が &lt;code&gt;[('active', 'blue'), ('pressed', 'red')]&lt;/code&gt; に変更された場合、オプションの（状態、値）シーケンスの順序が重要であることに注意してください。たとえば、ウィジェットがアクティブまたは押された状態の場合、結果は青い前景になります。</target>
        </trans-unit>
        <trans-unit id="01a23cd9ecbf3257e28cf9b896b0dcad21defe07" translate="yes" xml:space="preserve">
          <source>Note that the parser can be extended in limited ways, and of course you can implement your own parser completely from scratch. All of the logic that connects the &lt;a href=&quot;email#module-email&quot;&gt;&lt;code&gt;email&lt;/code&gt;&lt;/a&gt; package&amp;rsquo;s bundled parser and the &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; class is embodied in the &lt;code&gt;policy&lt;/code&gt; class, so a custom parser can create message object trees any way it finds necessary by implementing custom versions of the appropriate &lt;code&gt;policy&lt;/code&gt; methods.</source>
          <target state="translated">パーサーは限られた方法で拡張でき、もちろん独自のパーサーを完全にゼロから実装できることに注意してください。&lt;a href=&quot;email#module-email&quot;&gt; &lt;code&gt;email&lt;/code&gt; &lt;/a&gt;パッケージのバンドルパーサーと&lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; &lt;/a&gt;クラスを接続するロジックはすべて &lt;code&gt;policy&lt;/code&gt; クラスに組み込まれているため、カスタムパーサーは、適切な &lt;code&gt;policy&lt;/code&gt; メソッドのカスタムバージョンを実装することで、必要に応じてメッセージオブジェクトツリーを作成できます。</target>
        </trans-unit>
        <trans-unit id="1eb8965b25ea5257a0aa1f9f0bb3c11a3367f9de" translate="yes" xml:space="preserve">
          <source>Note that the parser only accepts the Unix-style end of line convention. If you are reading the code from a file, make sure to use newline conversion mode to convert Windows or Mac-style newlines.</source>
          <target state="translated">パーサはUnixスタイルの行末規則しか受け付けないことに注意してください。ファイルからコードを読む場合は、WindowsまたはMacスタイルの改行を変換するために改行変換モードを使用するようにしてください。</target>
        </trans-unit>
        <trans-unit id="34bc7518b3bc42848108ade424e482f1e8016982" translate="yes" xml:space="preserve">
          <source>Note that the program name, whether determined from &lt;code&gt;sys.argv[0]&lt;/code&gt; or from the &lt;code&gt;prog=&lt;/code&gt; argument, is available to help messages using the &lt;code&gt;%(prog)s&lt;/code&gt; format specifier.</source>
          <target state="translated">&lt;code&gt;sys.argv[0]&lt;/code&gt; から、または &lt;code&gt;prog=&lt;/code&gt; 引数から決定されたプログラム名は、 &lt;code&gt;%(prog)s&lt;/code&gt; 形式指定子を使用してメッセージを支援するために使用できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b19c49eed7c2426d8842fd07e5e1a3d9193ed340" translate="yes" xml:space="preserve">
          <source>Note that the second use of &lt;code&gt;_()&lt;/code&gt; will not identify &amp;ldquo;a&amp;rdquo; as being translatable to the &lt;strong&gt;gettext&lt;/strong&gt; program, because the parameter is not a string literal.</source>
          <target state="translated">パラメータが文字列リテラルではないため、2回目の &lt;code&gt;_()&lt;/code&gt; の使用では、「a」が&lt;strong&gt;gettext&lt;/strong&gt;プログラムに変換可能であることを識別しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="750397ea45aa11b67082fae179f2b2c630c4ca79" translate="yes" xml:space="preserve">
          <source>Note that the selection of functions is similar, but not identical, to that in module &lt;a href=&quot;math#module-math&quot;&gt;&lt;code&gt;math&lt;/code&gt;&lt;/a&gt;. The reason for having two modules is that some users aren&amp;rsquo;t interested in complex numbers, and perhaps don&amp;rsquo;t even know what they are. They would rather have &lt;code&gt;math.sqrt(-1)&lt;/code&gt; raise an exception than return a complex number. Also note that the functions defined in &lt;a href=&quot;#module-cmath&quot;&gt;&lt;code&gt;cmath&lt;/code&gt;&lt;/a&gt; always return a complex number, even if the answer can be expressed as a real number (in which case the complex number has an imaginary part of zero).</source>
          <target state="translated">関数の選択は、モジュール&lt;a href=&quot;math#module-math&quot;&gt; &lt;code&gt;math&lt;/code&gt; &lt;/a&gt;の選択と似ていますが、同一ではないことに注意してください。2つのモジュールがある理由は、一部のユーザーは複素数に興味がなく、おそらくそれらが何であるかさえ知らないためです。彼らはむしろ、複素数を返すよりも &lt;code&gt;math.sqrt(-1)&lt;/code&gt; に例外を発生させます。また、答えが実数として表現できる場合でも、&lt;a href=&quot;#module-cmath&quot;&gt; &lt;code&gt;cmath&lt;/code&gt; で&lt;/a&gt;定義された関数は常に複素数を返すことに注意してください（この場合、複素数の虚数部はゼロです）。</target>
        </trans-unit>
        <trans-unit id="81dcea5e7b8c2cdc13cbbc4c1f112a24bc49255e" translate="yes" xml:space="preserve">
          <source>Note that the sign of the timezone offset is the opposite of the sign of the &lt;code&gt;time.timezone&lt;/code&gt; variable for the same timezone; the latter variable follows the POSIX standard while this module follows &lt;a href=&quot;https://tools.ietf.org/html/rfc2822.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 2822&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">タイムゾーンオフセットの符号は、同じタイムゾーンの &lt;code&gt;time.timezone&lt;/code&gt; 変数の符号と反対であることに注意してください。後者の変数はPOSIX標準に従いますが、このモジュールは&lt;a href=&quot;https://tools.ietf.org/html/rfc2822.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 2822に&lt;/strong&gt;&lt;/a&gt;従い&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="e162688246d240a8c716dca372b82c4250936fa7" translate="yes" xml:space="preserve">
          <source>Note that the two instances of class &lt;code&gt;C&lt;/code&gt; share the same class variable &lt;code&gt;x&lt;/code&gt;, as expected.</source>
          <target state="translated">予想どおり、クラス &lt;code&gt;C&lt;/code&gt; の 2つのインスタンスが同じクラス変数 &lt;code&gt;x&lt;/code&gt; を共有していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="cd586d754c27e8997ced1a5ea4a1abad329acacc" translate="yes" xml:space="preserve">
          <source>Note that the type of &lt;a href=&quot;#abc.ABC&quot;&gt;&lt;code&gt;ABC&lt;/code&gt;&lt;/a&gt; is still &lt;a href=&quot;#abc.ABCMeta&quot;&gt;&lt;code&gt;ABCMeta&lt;/code&gt;&lt;/a&gt;, therefore inheriting from &lt;a href=&quot;#abc.ABC&quot;&gt;&lt;code&gt;ABC&lt;/code&gt;&lt;/a&gt; requires the usual precautions regarding metaclass usage, as multiple inheritance may lead to metaclass conflicts. One may also define an abstract base class by passing the metaclass keyword and using &lt;a href=&quot;#abc.ABCMeta&quot;&gt;&lt;code&gt;ABCMeta&lt;/code&gt;&lt;/a&gt; directly, for example:</source>
          <target state="translated">&lt;a href=&quot;#abc.ABC&quot;&gt; &lt;code&gt;ABC&lt;/code&gt; &lt;/a&gt;のタイプは引き続き&lt;a href=&quot;#abc.ABCMeta&quot;&gt; &lt;code&gt;ABCMeta&lt;/code&gt; &lt;/a&gt;であるため、&lt;a href=&quot;#abc.ABC&quot;&gt; &lt;code&gt;ABC&lt;/code&gt; &lt;/a&gt;からの継承にはメタクラスの使用に関する通常の予防策が必要です。多重継承はメタクラスの競合につながる可能性があるためです。metaclassキーワードを渡して&lt;a href=&quot;#abc.ABCMeta&quot;&gt; &lt;code&gt;ABCMeta&lt;/code&gt; を&lt;/a&gt;直接使用することで、抽象基本クラスを定義することもできます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="2fc591820a47265f251fd7af3b9597e91511cf6a" translate="yes" xml:space="preserve">
          <source>Note that there are no methods &lt;code&gt;read()&lt;/code&gt; or &lt;code&gt;write()&lt;/code&gt;; use &lt;a href=&quot;#socket.socket.recv&quot;&gt;&lt;code&gt;recv()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#socket.socket.send&quot;&gt;&lt;code&gt;send()&lt;/code&gt;&lt;/a&gt; without &lt;em&gt;flags&lt;/em&gt; argument instead.</source>
          <target state="translated">メソッド &lt;code&gt;read()&lt;/code&gt; または &lt;code&gt;write()&lt;/code&gt; がないことに注意してください。使用&lt;a href=&quot;#socket.socket.recv&quot;&gt; &lt;code&gt;recv()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#socket.socket.send&quot;&gt; &lt;code&gt;send()&lt;/code&gt; &lt;/a&gt;せずに&lt;em&gt;フラグの&lt;/em&gt;代わりに引数。</target>
        </trans-unit>
        <trans-unit id="36630936cce6573d3d4dc4a543a2ef65fc12897f" translate="yes" xml:space="preserve">
          <source>Note that there are unavoidable subtleties twice per year in a &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; subclass accounting for both standard and daylight time, at the DST transition points. For concreteness, consider US Eastern (UTC -0500), where EDT begins the minute after 1:59 (EST) on the second Sunday in March, and ends the minute after 1:59 (EDT) on the first Sunday in November:</source>
          <target state="translated">DSTの移行ポイントで、標準と夏時間の両方を考慮した&lt;a href=&quot;#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;サブクラスには、年に2回、避けられない微妙な点があることに注意してください。具体的には、米国東部（UTC -0500）を考慮してください。EDTは、3月の第2日曜日の1:59（EST）から1分後に始まり、11月の第1日曜日の1:59（EDT）から1分で終わります。</target>
        </trans-unit>
        <trans-unit id="15592c72a8f6f854d7f0dbccf4a1703e76bd673a" translate="yes" xml:space="preserve">
          <source>Note that there is a nice correspondence between several attributes and methods of &lt;code&gt;os.DirEntry&lt;/code&gt; and of &lt;a href=&quot;pathlib#pathlib.Path&quot;&gt;&lt;code&gt;pathlib.Path&lt;/code&gt;&lt;/a&gt;. In particular, the &lt;code&gt;name&lt;/code&gt; attribute has the same meaning, as do the &lt;code&gt;is_dir()&lt;/code&gt;, &lt;code&gt;is_file()&lt;/code&gt;, &lt;code&gt;is_symlink()&lt;/code&gt; and &lt;code&gt;stat()&lt;/code&gt; methods.</source>
          <target state="translated">いくつかの属性との方法の間に素敵な対応があることに注意してください &lt;code&gt;os.DirEntry&lt;/code&gt; との&lt;a href=&quot;pathlib#pathlib.Path&quot;&gt; &lt;code&gt;pathlib.Path&lt;/code&gt; が&lt;/a&gt;。特に、 &lt;code&gt;name&lt;/code&gt; 属性は、 &lt;code&gt;is_dir()&lt;/code&gt; 、 &lt;code&gt;is_file()&lt;/code&gt; 、 &lt;code&gt;is_symlink()&lt;/code&gt; および &lt;code&gt;stat()&lt;/code&gt; メソッドと同じ意味です。</target>
        </trans-unit>
        <trans-unit id="8df01b5cba256bfe26308cfbe1ebdc3f6c2def0b" translate="yes" xml:space="preserve">
          <source>Note that there is no need to call this function when &lt;a href=&quot;asyncio-task#asyncio.run&quot;&gt;&lt;code&gt;asyncio.run()&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">&lt;a href=&quot;asyncio-task#asyncio.run&quot;&gt; &lt;code&gt;asyncio.run()&lt;/code&gt; &lt;/a&gt;を使用する場合は、この関数を呼び出す必要がないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="b57144e5df9df62e17e080fadafa48aa0596258b" translate="yes" xml:space="preserve">
          <source>Note that there is no specific slot for any of these methods in the type structure for Python objects in the Python/C API. Extension types wanting to define these methods must provide them as a normal Python accessible method. Compared to the overhead of setting up the runtime context, the overhead of a single class dictionary lookup is negligible.</source>
          <target state="translated">Python/C API の Python オブジェクトの型構造には、これらのメソッドのための特定のスロットがないことに注意してください。これらのメソッドを定義したい拡張タイプは、通常のPythonアクセス可能なメソッドとして提供しなければなりません。ランタイムコンテキストを設定するオーバーヘッドと比較して、単一のクラス辞書のルックアップのオーバーヘッドは無視できるほどのものです。</target>
        </trans-unit>
        <trans-unit id="9a02df7e02b3ab3b4f010591f5ece20d6e24dd6b" translate="yes" xml:space="preserve">
          <source>Note that there is one additional limitation when using context managers as function decorators: there&amp;rsquo;s no way to access the return value of &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__enter__&quot;&gt;&lt;code&gt;__enter__()&lt;/code&gt;&lt;/a&gt;. If that value is needed, then it is still necessary to use an explicit &lt;code&gt;with&lt;/code&gt; statement.</source>
          <target state="translated">コンテキストマネージャを関数デコレータとして使用する場合、1つの追加の制限があることに注意してください&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__enter__&quot;&gt; &lt;code&gt;__enter__()&lt;/code&gt; &lt;/a&gt;戻り値にアクセスする方法はありません。その値が必要な場合でも、明示的な &lt;code&gt;with&lt;/code&gt; ステートメントを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e1a0bc324af393bbb5dd82800c76c036cbda0f5f" translate="yes" xml:space="preserve">
          <source>Note that these checks are enforced only by the static type checker. At runtime, the statement &lt;code&gt;Derived = NewType('Derived', Base)&lt;/code&gt; will make &lt;code&gt;Derived&lt;/code&gt; a function that immediately returns whatever parameter you pass it. That means the expression &lt;code&gt;Derived(some_value)&lt;/code&gt; does not create a new class or introduce any overhead beyond that of a regular function call.</source>
          <target state="translated">これらのチェックは、静的型チェッカーによってのみ実行されることに注意してください。実行時に、ステートメント &lt;code&gt;Derived = NewType('Derived', Base)&lt;/code&gt; は、 &lt;code&gt;Derived&lt;/code&gt; を、渡したパラメーターをすぐに返す関数にします。つまり、 &lt;code&gt;Derived(some_value)&lt;/code&gt; という式は、新しいクラスを作成したり、通常の関数呼び出しを超えるオーバーヘッドを導入したりしません。</target>
        </trans-unit>
        <trans-unit id="472bb74ea73045e483510b2cd999d2e021bf1acc" translate="yes" xml:space="preserve">
          <source>Note that these functions are not meaningful for a multipart message. They must be applied to individual subparts instead, and will raise a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if passed a message whose type is multipart.</source>
          <target state="translated">これらの関数は、マルチパートメッセージでは意味がないことに注意してください。代わりに個々のサブパートに適用する必要があり、タイプがマルチパートのメッセージを渡すと&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; が発生&lt;/a&gt;します。</target>
        </trans-unit>
        <trans-unit id="30d1675de10cd2d2ad0bc712bec13688a9a6c970" translate="yes" xml:space="preserve">
          <source>Note that these methods must &lt;em&gt;not&lt;/em&gt; be called during parsing, that is, after parse has been called and before it returns.</source>
          <target state="translated">これらのメソッドは、解析中、つまり解析が呼び出されてから戻る前に呼び出さ&lt;em&gt;ないで&lt;/em&gt;ください。</target>
        </trans-unit>
        <trans-unit id="d29fa93c8852c067f1d3f1f3ca06f2de2869049f" translate="yes" xml:space="preserve">
          <source>Note that this adds a sixth attribute (&lt;a href=&quot;#platform.processor&quot;&gt;&lt;code&gt;processor&lt;/code&gt;&lt;/a&gt;) not present in the &lt;a href=&quot;os#os.uname&quot;&gt;&lt;code&gt;os.uname()&lt;/code&gt;&lt;/a&gt; result. Also, the attribute names are different for the first two attributes; &lt;a href=&quot;os#os.uname&quot;&gt;&lt;code&gt;os.uname()&lt;/code&gt;&lt;/a&gt; names them &lt;code&gt;sysname&lt;/code&gt; and &lt;code&gt;nodename&lt;/code&gt;.</source>
          <target state="translated">これにより、&lt;a href=&quot;os#os.uname&quot;&gt; &lt;code&gt;os.uname()&lt;/code&gt; の&lt;/a&gt;結果に存在しない6番目の属性（&lt;a href=&quot;#platform.processor&quot;&gt; &lt;code&gt;processor&lt;/code&gt; &lt;/a&gt;）が追加されることに注意してください。また、最初の2つの属性の属性名は異なります。&lt;a href=&quot;os#os.uname&quot;&gt; &lt;code&gt;os.uname()&lt;/code&gt; &lt;/a&gt;はそれらに &lt;code&gt;sysname&lt;/code&gt; および &lt;code&gt;nodename&lt;/code&gt; という名前を付けます。</target>
        </trans-unit>
        <trans-unit id="2d46886958797cfa9907ad4c6425e0ae6791da66" translate="yes" xml:space="preserve">
          <source>Note that this does &lt;em&gt;not&lt;/em&gt; overwrite or delete any existing header with the same name. If you want to ensure that the new header is the only one present in the message with field name &lt;em&gt;name&lt;/em&gt;, delete the field first, e.g.:</source>
          <target state="translated">これにより、同じ名前の既存のヘッダーが上書きまたは削除されることはありませ&lt;em&gt;ん&lt;/em&gt;。新しいヘッダーがフィールド名&lt;em&gt;nameの&lt;/em&gt;メッセージに存在する唯一のものであることを確認したい場合は、最初にフィールドを削除します。例：</target>
        </trans-unit>
        <trans-unit id="b79b943f472b0275b7ad6a51da0c669884bba25f" translate="yes" xml:space="preserve">
          <source>Note that this function &lt;em&gt;only&lt;/em&gt; returns a meaningful name for actual Python modules - paths that potentially refer to Python packages will still return &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">この関数は、実際のP​​ythonモジュールの意味のある名前&lt;em&gt;のみを&lt;/em&gt;返すことに注意してください。Pythonパッケージを参照する可能性のあるパスは、 &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1e5f27a50e7211ff256009dee22a78b6d7a48364" translate="yes" xml:space="preserve">
          <source>Note that this function does not raise &lt;a href=&quot;asyncio-exceptions#asyncio.TimeoutError&quot;&gt;&lt;code&gt;asyncio.TimeoutError&lt;/code&gt;&lt;/a&gt;. Futures or Tasks that aren&amp;rsquo;t done when the timeout occurs are simply returned in the second set.</source>
          <target state="translated">この関数は&lt;a href=&quot;asyncio-exceptions#asyncio.TimeoutError&quot;&gt; &lt;code&gt;asyncio.TimeoutError&lt;/code&gt; を発生さ&lt;/a&gt;せないことに注意してください。タイムアウトが発生したときに実行されない先物またはタスクは、2番目のセットで単に返されます。</target>
        </trans-unit>
        <trans-unit id="f6e96664f646c10e89d795c433800d7c1e4544c3" translate="yes" xml:space="preserve">
          <source>Note that this function has intimate knowledge of how different libc versions add symbols to the executable is probably only usable for executables compiled using &lt;strong&gt;gcc&lt;/strong&gt;.</source>
          <target state="translated">この関数はlibcのバージョンが実行可能に記号を追加する方法異なるの親密な知識を持っていることを注記は、おそらく使用してコンパイルされた実行ファイルに対してのみ使用可能である&lt;strong&gt;GCCを&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="45f629527ef98fcd33c266ca1c4678e0ef5157a6" translate="yes" xml:space="preserve">
          <source>Note that this function must import all &lt;em&gt;packages&lt;/em&gt; (&lt;em&gt;not&lt;/em&gt; all modules!) on the given &lt;em&gt;path&lt;/em&gt;, in order to access the &lt;code&gt;__path__&lt;/code&gt; attribute to find submodules.</source>
          <target state="translated">この関数は、 &lt;code&gt;__path__&lt;/code&gt; 属性にアクセスしてサブモジュールを見つけるために、指定された&lt;em&gt;パス&lt;/em&gt;上のすべての&lt;em&gt;パッケージ&lt;/em&gt;（すべてのモジュールで&lt;em&gt;はない&lt;/em&gt;！）をインポートする必要があることに注意してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a589457ce4b7eed1abc8c3023b9a61ab3a1a55e6" translate="yes" xml:space="preserve">
          <source>Note that this function will not work with the &amp;lsquo;C&amp;rsquo; locale, so you have to set a locale via &lt;a href=&quot;#locale.setlocale&quot;&gt;&lt;code&gt;setlocale()&lt;/code&gt;&lt;/a&gt; first.</source>
          <target state="translated">この関数は 'C'ロケールでは機能しないため、最初に&lt;a href=&quot;#locale.setlocale&quot;&gt; &lt;code&gt;setlocale()&lt;/code&gt; &lt;/a&gt;を使用してロケールを設定する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c7fbd744392c36926075a26d9e3ab559ef32a1e2" translate="yes" xml:space="preserve">
          <source>Note that this is &lt;em&gt;not&lt;/em&gt; a sandbox module - all code is executed in the current process, and any side effects (such as cached imports of other modules) will remain in place after the functions have returned.</source>
          <target state="translated">これはサンドボックスモジュールでは&lt;em&gt;ない&lt;/em&gt;ことに注意してください-すべてのコードは現在のプロセスで実行され、副作用（他のモジュールのキャッシュされたインポートなど）は関数が戻った後もそのまま残ります。</target>
        </trans-unit>
        <trans-unit id="5db5a52cc1e7c561c7837d97bc61981bd4e2bf44" translate="yes" xml:space="preserve">
          <source>Note that this is another reason why you need integration tests as well as unit tests. Testing everything in isolation is all fine and dandy, but if you don&amp;rsquo;t test how your units are &amp;ldquo;wired together&amp;rdquo; there is still lots of room for bugs that tests might have caught.</source>
          <target state="translated">これは、統合テストと単体テストが必要になるもう1つの理由です。すべてを個別にテストすることは、すべてうまくいきますが、ユニットがどのように「相互接続」されているかをテストしないと、テストで発見された可能性のあるバグがまだたくさんあります。</target>
        </trans-unit>
        <trans-unit id="b965eef784d4d104baee666239b49d8cae11dad4" translate="yes" xml:space="preserve">
          <source>Note that this is equivalent to &lt;code&gt;bool(expr) is True&lt;/code&gt; and not to &lt;code&gt;expr
is True&lt;/code&gt; (use &lt;code&gt;assertIs(expr, True)&lt;/code&gt; for the latter). This method should also be avoided when more specific methods are available (e.g. &lt;code&gt;assertEqual(a, b)&lt;/code&gt; instead of &lt;code&gt;assertTrue(a == b)&lt;/code&gt;), because they provide a better error message in case of failure.</source>
          <target state="translated">これは &lt;code&gt;bool(expr) is True&lt;/code&gt; 、 &lt;code&gt;expr is True&lt;/code&gt; ないことに相当します（後者の場合は &lt;code&gt;assertIs(expr, True)&lt;/code&gt; を使用してください）。このメソッドは、より具体的なメソッドが利用できる場合（たとえば、 &lt;code&gt;assertTrue(a == b)&lt;/code&gt; ではなく &lt;code&gt;assertEqual(a, b)&lt;/code&gt; も回避する必要があります。失敗した場合により適切なエラーメッセージを提供するためです。</target>
        </trans-unit>
        <trans-unit id="5e6fff084be385dbf0bc1a43435632a2295ef2a7" translate="yes" xml:space="preserve">
          <source>Note that this is not the same concept as an optional argument, which is one that has a default. An optional argument with a default does not require the &lt;code&gt;Optional&lt;/code&gt; qualifier on its type annotation just because it is optional. For example:</source>
          <target state="translated">これは省略可能な引数と同じ概念ではないことに注意してください。これにはデフォルトがあります。デフォルトのオプション引数は、それがオプションであるという理由だけで、型注釈に &lt;code&gt;Optional&lt;/code&gt; 修飾子を必要としません。例えば：</target>
        </trans-unit>
        <trans-unit id="497db1e409c9d5535b9f7799396b336c6bf26c17" translate="yes" xml:space="preserve">
          <source>Note that this is only one way, albeit the most convenient way, to make the &lt;code&gt;_()&lt;/code&gt; function available to your application. Because it affects the entire application globally, and specifically the built-in namespace, localized modules should never install &lt;code&gt;_()&lt;/code&gt;. Instead, they should use this code to make &lt;code&gt;_()&lt;/code&gt; available to their module:</source>
          <target state="translated">これは、アプリケーションで &lt;code&gt;_()&lt;/code&gt; 関数を使用できるようにするための最も便利な方法ですが、1つの方法にすぎないことに注意してください。アプリケーション全体、特に組み込みの名前空間に影響を与えるため、ローカライズされたモジュールは &lt;code&gt;_()&lt;/code&gt; をインストールしないでください。代わりに、このコードを使用して、モジュールで &lt;code&gt;_()&lt;/code&gt; を使用できるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="c5dd52f7d1a18d76b5b1670ad4b672dfed972deb" translate="yes" xml:space="preserve">
          <source>Note that this manipulation of &lt;a href=&quot;sys#module-sys&quot;&gt;&lt;code&gt;sys&lt;/code&gt;&lt;/a&gt; is not thread-safe. Other threads may see the partially initialised module, as well as the altered list of arguments. It is recommended that the &lt;a href=&quot;sys#module-sys&quot;&gt;&lt;code&gt;sys&lt;/code&gt;&lt;/a&gt; module be left alone when invoking this function from threaded code.</source>
          <target state="translated">この&lt;a href=&quot;sys#module-sys&quot;&gt; &lt;code&gt;sys&lt;/code&gt; の&lt;/a&gt;操作はスレッドセーフではないことに注意してください。他のスレッドは、部分的に初期化されたモジュール、および変更された引数のリストを見る場合があります。スレッド化されたコードからこの関数を呼び出すときは、&lt;a href=&quot;sys#module-sys&quot;&gt; &lt;code&gt;sys&lt;/code&gt; &lt;/a&gt;モジュールをそのままにすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="ad60b5a4d53caa42fe4b708c2e6654939094b20a" translate="yes" xml:space="preserve">
          <source>Note that this may not be done after authentication information has been transmitted, and authentication occurs by default if possible during a &lt;a href=&quot;#nntplib.NNTP&quot;&gt;&lt;code&gt;NNTP&lt;/code&gt;&lt;/a&gt; object initialization. See &lt;a href=&quot;#nntplib.NNTP.login&quot;&gt;&lt;code&gt;NNTP.login()&lt;/code&gt;&lt;/a&gt; for information on suppressing this behavior.</source>
          <target state="translated">これは、認証情報が送信された後は行われない可能性があり、&lt;a href=&quot;#nntplib.NNTP&quot;&gt; &lt;code&gt;NNTP&lt;/code&gt; &lt;/a&gt;オブジェクトの初期化中に可能であればデフォルトで認証が行われることに注意してください。この動作を抑制する方法については、&lt;a href=&quot;#nntplib.NNTP.login&quot;&gt; &lt;code&gt;NNTP.login()&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1ca198d21563fd5cf167242f8f7abad568ca45e5" translate="yes" xml:space="preserve">
          <source>Note that this may raise &lt;a href=&quot;exceptions#NotImplementedError&quot;&gt;&lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/a&gt; on Unix platforms like Mac OS X where &lt;code&gt;sem_getvalue()&lt;/code&gt; is not implemented.</source>
          <target state="translated">これにより、 &lt;code&gt;sem_getvalue()&lt;/code&gt; が実装されていないMac OS XなどのUnixプラットフォームで&lt;a href=&quot;exceptions#NotImplementedError&quot;&gt; &lt;code&gt;NotImplementedError&lt;/code&gt; が発生&lt;/a&gt;する可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="46df65154fc5779c9a8d8169de6b544a5033f917" translate="yes" xml:space="preserve">
          <source>Note that this method differs from &lt;a href=&quot;#email.message.Message.get_charset&quot;&gt;&lt;code&gt;get_charset()&lt;/code&gt;&lt;/a&gt; which returns the &lt;a href=&quot;email.charset#email.charset.Charset&quot;&gt;&lt;code&gt;Charset&lt;/code&gt;&lt;/a&gt; instance for the default encoding of the message body.</source>
          <target state="translated">このメソッドは、メッセージ本文のデフォルトエンコーディングの&lt;a href=&quot;email.charset#email.charset.Charset&quot;&gt; &lt;code&gt;Charset&lt;/code&gt; &lt;/a&gt;インスタンスを返す&lt;a href=&quot;#email.message.Message.get_charset&quot;&gt; &lt;code&gt;get_charset()&lt;/code&gt; &lt;/a&gt;とは異なることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7ec37bb1f92cbf01a7d78829d33f077a718bc081" translate="yes" xml:space="preserve">
          <source>Note that this method is automatically added to the class: it is not directly specified in the &lt;code&gt;InventoryItem&lt;/code&gt; definition shown above.</source>
          <target state="translated">このメソッドはクラスに自動的に追加されることに注意してください。上記の &lt;code&gt;InventoryItem&lt;/code&gt; 定義で直接指定されていません。</target>
        </trans-unit>
        <trans-unit id="2d0305ac41e9e98f465e3a09a7a321fde7592591" translate="yes" xml:space="preserve">
          <source>Note that this method is provided as a convenience and may not always format the message the way you want. For example, by default it does not do the mangling of lines that begin with &lt;code&gt;From&lt;/code&gt; that is required by the unix mbox format. For more flexibility, instantiate a &lt;a href=&quot;email.generator#email.generator.BytesGenerator&quot;&gt;&lt;code&gt;BytesGenerator&lt;/code&gt;&lt;/a&gt; instance and use its &lt;a href=&quot;email.generator#email.generator.BytesGenerator.flatten&quot;&gt;&lt;code&gt;flatten()&lt;/code&gt;&lt;/a&gt; method directly. For example:</source>
          <target state="translated">このメソッドは便宜上提供されており、必ずしもメッセージを希望どおりにフォーマットできるとは限らないことに注意してください。たとえば、デフォルトでは、Unix mbox形式で必要な &lt;code&gt;From&lt;/code&gt; で始まる行のマングルは行われません。柔軟性を高めるには、&lt;a href=&quot;email.generator#email.generator.BytesGenerator&quot;&gt; &lt;code&gt;BytesGenerator&lt;/code&gt; &lt;/a&gt;インスタンスをインスタンス化し、その&lt;a href=&quot;email.generator#email.generator.BytesGenerator.flatten&quot;&gt; &lt;code&gt;flatten()&lt;/code&gt; &lt;/a&gt;メソッドを直接使用します。例えば：</target>
        </trans-unit>
        <trans-unit id="bc1e53b42c929782edab5f61e605edfc1b232f1f" translate="yes" xml:space="preserve">
          <source>Note that this method is provided as a convenience and may not always format the message the way you want. For example, by default it does not do the mangling of lines that begin with &lt;code&gt;From&lt;/code&gt; that is required by the unix mbox format. For more flexibility, instantiate a &lt;a href=&quot;email.generator#email.generator.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt; instance and use its &lt;a href=&quot;email.generator#email.generator.Generator.flatten&quot;&gt;&lt;code&gt;flatten()&lt;/code&gt;&lt;/a&gt; method directly. For example:</source>
          <target state="translated">このメソッドは便宜上提供されており、必ずしもメッセージを希望どおりにフォーマットできるとは限らないことに注意してください。たとえば、デフォルトでは、Unix mbox形式で必要な &lt;code&gt;From&lt;/code&gt; で始まる行のマングルは行われません。柔軟性を高めるには、&lt;a href=&quot;email.generator#email.generator.Generator&quot;&gt; &lt;code&gt;Generator&lt;/code&gt; &lt;/a&gt;インスタンスをインスタンス化し、その&lt;a href=&quot;email.generator#email.generator.Generator.flatten&quot;&gt; &lt;code&gt;flatten()&lt;/code&gt; &lt;/a&gt;メソッドを直接使用します。例えば：</target>
        </trans-unit>
        <trans-unit id="914ac925c90ce0481ed0d7bcee5c22d8232a27d1" translate="yes" xml:space="preserve">
          <source>Note that this method is provided as a convenience and may not be the most useful way to serialize messages in your application, especially if you are dealing with multiple messages. See &lt;a href=&quot;email.generator#email.generator.BytesGenerator&quot;&gt;&lt;code&gt;email.generator.BytesGenerator&lt;/code&gt;&lt;/a&gt; for a more flexible API for serializing messages.</source>
          <target state="translated">このメソッドは便宜上提供されており、特に複数のメッセージを処理している場合は、アプリケーションでメッセージをシリアル化するための最も有用な方法ではない場合があることに注意してください。メッセージをシリアライズするためのより柔軟なAPIについては、&lt;a href=&quot;email.generator#email.generator.BytesGenerator&quot;&gt; &lt;code&gt;email.generator.BytesGenerator&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0569aab75ed3c326d1e3ad45e468b2d9a967ffbc" translate="yes" xml:space="preserve">
          <source>Note that this method is provided as a convenience and may not be the most useful way to serialize messages in your application, especially if you are dealing with multiple messages. See &lt;a href=&quot;email.generator#email.generator.Generator&quot;&gt;&lt;code&gt;email.generator.Generator&lt;/code&gt;&lt;/a&gt; for a more flexible API for serializing messages. Note also that this method is restricted to producing messages serialized as &amp;ldquo;7 bit clean&amp;rdquo; when &lt;a href=&quot;email.policy#email.policy.EmailPolicy.utf8&quot;&gt;&lt;code&gt;utf8&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, which is the default.</source>
          <target state="translated">このメソッドは便宜上提供されており、特に複数のメッセージを処理している場合は、アプリケーションでメッセージをシリアル化するための最も有用な方法ではない場合があることに注意してください。メッセージをシリアライズするためのより柔軟なAPIについては、&lt;a href=&quot;email.generator#email.generator.Generator&quot;&gt; &lt;code&gt;email.generator.Generator&lt;/code&gt; &lt;/a&gt;を参照してください。また、このメソッドは、デフォルトである&lt;a href=&quot;email.policy#email.policy.EmailPolicy.utf8&quot;&gt; &lt;code&gt;utf8&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;False&lt;/code&gt; の場合、「7ビットクリーン」としてシリアル化されたメッセージの生成に限定されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4863202591f117b45079183ed253d97469614cfd" translate="yes" xml:space="preserve">
          <source>Note that this should be called at most once, and it should be protected inside the &lt;code&gt;if __name__ == '__main__'&lt;/code&gt; clause of the main module.</source>
          <target state="translated">これは最大で1回呼び出す必要があり、メインモジュール &lt;code&gt;if __name__ == '__main__'&lt;/code&gt; 句内で保護する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5f023dfbaa5e7784ac868d744c9df4db74a2b0f4" translate="yes" xml:space="preserve">
          <source>Note that this utility does not guarantee complete &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333&quot; id=&quot;index-9&quot;&gt;&lt;strong&gt;PEP 3333&lt;/strong&gt;&lt;/a&gt; compliance; an absence of errors from this module does not necessarily mean that errors do not exist. However, if this module does produce an error, then it is virtually certain that either the server or application is not 100% compliant.</source>
          <target state="translated">このユーティリティは完全な&lt;a href=&quot;https://www.python.org/dev/peps/pep-3333&quot; id=&quot;index-9&quot;&gt;&lt;strong&gt;PEP 3333&lt;/strong&gt;&lt;/a&gt;準拠を保証するものではないことに注意してください。このモジュールにエラーがないことは、必ずしもエラーが存在しないことを意味するわけではありません。ただし、このモジュールでエラーが発生した場合は、サーバーまたはアプリケーションのいずれかが100％準拠していないことがほぼ確実です。</target>
        </trans-unit>
        <trans-unit id="392655359709b780ff1bb9da7fb1ff72dc351b8b" translate="yes" xml:space="preserve">
          <source>Note that tracebacks are treated very specially. In particular, in the rewritten example, the use of &lt;code&gt;...&lt;/code&gt; is independent of doctest&amp;rsquo;s &lt;a href=&quot;#doctest.ELLIPSIS&quot;&gt;&lt;code&gt;ELLIPSIS&lt;/code&gt;&lt;/a&gt; option. The ellipsis in that example could be left out, or could just as well be three (or three hundred) commas or digits, or an indented transcript of a Monty Python skit.</source>
          <target state="translated">トレースバックは非常に特別に扱われることに注意してください。特に、書き換えられた例では、 &lt;code&gt;...&lt;/code&gt; の使用はdoctestの&lt;a href=&quot;#doctest.ELLIPSIS&quot;&gt; &lt;code&gt;ELLIPSIS&lt;/code&gt; &lt;/a&gt;オプションとは無関係です。その例の省略記号は省略できますが、3つ（または300）のコンマまたは数字、あるいはモンティパイソンスキットのインデントされた筆記録でもかまいません。</target>
        </trans-unit>
        <trans-unit id="953d734e119512ee18a0a9392b9f9b9d6d4df366" translate="yes" xml:space="preserve">
          <source>Note that unclosed single-quoted strings do not cause an error to be raised. They are tokenized as &lt;a href=&quot;token#token.ERRORTOKEN&quot;&gt;&lt;code&gt;ERRORTOKEN&lt;/code&gt;&lt;/a&gt;, followed by the tokenization of their contents.</source>
          <target state="translated">閉じられていない単一引用符で囲まれた文字列が原因でエラーが発生することはありません。それらは&lt;a href=&quot;token#token.ERRORTOKEN&quot;&gt; &lt;code&gt;ERRORTOKEN&lt;/code&gt; &lt;/a&gt;としてトークン化され、その後にコンテンツのトークン化が続きます。</target>
        </trans-unit>
        <trans-unit id="025bc18a2bc141ea4af9a1700e4ee039cbf3bd9f" translate="yes" xml:space="preserve">
          <source>Note that unless a minimum field width is defined, the field width will always be the same size as the data to fill it, so that the alignment option has no meaning in this case.</source>
          <target state="translated">最小フィールド幅が定義されていない限り、フィールド幅は常にそれを埋めるデータと同じサイズになることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f0733676794f7d6ac39c0d22a2a452465ab6a556" translate="yes" xml:space="preserve">
          <source>Note that unlike many other generics in the typing module, the &lt;code&gt;SendType&lt;/code&gt; of &lt;a href=&quot;#typing.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt; behaves contravariantly, not covariantly or invariantly.</source>
          <target state="translated">タイピングモジュール内の他の多くのジェネリック医薬品とは異なり、という注意 &lt;code&gt;SendType&lt;/code&gt; の&lt;a href=&quot;#typing.Generator&quot;&gt; &lt;code&gt;Generator&lt;/code&gt; &lt;/a&gt;ないcovariantlyまたは不変、contravariantly振る舞います。</target>
        </trans-unit>
        <trans-unit id="a6e9cb78d9006ba4f85f82103063e16f601f2f04" translate="yes" xml:space="preserve">
          <source>Note that unlike the &lt;a href=&quot;#csv.DictReader&quot;&gt;&lt;code&gt;DictReader&lt;/code&gt;&lt;/a&gt; class, the &lt;em&gt;fieldnames&lt;/em&gt; parameter of the &lt;a href=&quot;#csv.DictWriter&quot;&gt;&lt;code&gt;DictWriter&lt;/code&gt;&lt;/a&gt; class is not optional.</source>
          <target state="translated">違っていることを注意&lt;a href=&quot;#csv.DictReader&quot;&gt; &lt;code&gt;DictReader&lt;/code&gt; の&lt;/a&gt;クラス、&lt;em&gt;フィールド名の&lt;/em&gt;パラメータ&lt;a href=&quot;#csv.DictWriter&quot;&gt; &lt;code&gt;DictWriter&lt;/code&gt; の&lt;/a&gt;クラスはオプションではありません。</target>
        </trans-unit>
        <trans-unit id="b92a04f3a0309df577dbc705f08776279130e14e" translate="yes" xml:space="preserve">
          <source>Note that unlike the C structure, the month value is a range of [1, 12], not [0, 11].</source>
          <target state="translated">C構造とは異なり、月の値は[0,11]ではなく[1,12]の範囲であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8eede2ce0b3d8e2c9335916e2ca2bc70c1345924" translate="yes" xml:space="preserve">
          <source>Note that unlike the Python &lt;code&gt;sys.version&lt;/code&gt;, the returned value will always include the patchlevel (it defaults to 0).</source>
          <target state="translated">Pythonの &lt;code&gt;sys.version&lt;/code&gt; とは異なり、戻り値には常にパッチレベルが含まれることに注意してください（デフォルトは0です）。</target>
        </trans-unit>
        <trans-unit id="a0e44189a3d936dd2974b45ad2423d66b85bbb11" translate="yes" xml:space="preserve">
          <source>Note that unlike the Python &lt;code&gt;sys.version&lt;/code&gt;, the returned value will always include the patchlevel (it defaults to &lt;code&gt;'0'&lt;/code&gt;).</source>
          <target state="translated">Pythonの &lt;code&gt;sys.version&lt;/code&gt; とは異なり、戻り値には常にパッチレベルが含まれることに注意してください（デフォルトは &lt;code&gt;'0'&lt;/code&gt; です）。</target>
        </trans-unit>
        <trans-unit id="faae0ddf62d8d17e4575535b139e839cc1f2ad54" translate="yes" xml:space="preserve">
          <source>Note that urlopen returns a bytes object. This is because there is no way for urlopen to automatically determine the encoding of the byte stream it receives from the HTTP server. In general, a program will decode the returned bytes object to string once it determines or guesses the appropriate encoding.</source>
          <target state="translated">urlopenはバイトオブジェクトを返すことに注意してください。これは、urlopenがHTTPサーバから受け取るバイトストリームのエンコーディングを自動的に決定する方法がないからです。一般的に、プログラムは返されたバイトオブジェクトを文字列にデコードします。</target>
        </trans-unit>
        <trans-unit id="fb5a04375d4dd30682512ce20dc834dd48ae4073" translate="yes" xml:space="preserve">
          <source>Note that using this function may require some external synchronization if there are other threads whose state is unknown. If a barrier is broken it may be better to just leave it and create a new one.</source>
          <target state="translated">状態が不明な他のスレッドがある場合、この関数を使用すると外部同期が必要になるかもしれないことに注意してください。バリアが壊れている場合は、そのままにしておいて新しいバリアを作成した方が良いかもしれません。</target>
        </trans-unit>
        <trans-unit id="9c6aed152d7d60b297ac12eb40378b5912ced5a2" translate="yes" xml:space="preserve">
          <source>Note that using this method is subtly different from deleting the old &lt;em&gt;Content-Type&lt;/em&gt; header and adding a new one with the new boundary via &lt;a href=&quot;#email.message.EmailMessage.add_header&quot;&gt;&lt;code&gt;add_header()&lt;/code&gt;&lt;/a&gt;, because &lt;a href=&quot;#email.message.EmailMessage.set_boundary&quot;&gt;&lt;code&gt;set_boundary()&lt;/code&gt;&lt;/a&gt; preserves the order of the &lt;em&gt;Content-Type&lt;/em&gt; header in the list of headers.</source>
          <target state="translated">この方法を使用する古い削除から微妙に異なることに注意してください&lt;em&gt;のContent-Type&lt;/em&gt;ヘッダを介して新たな境界と新しいものを追加すること&lt;a href=&quot;#email.message.EmailMessage.add_header&quot;&gt; &lt;code&gt;add_header()&lt;/code&gt; &lt;/a&gt;、なぜなら&lt;a href=&quot;#email.message.EmailMessage.set_boundary&quot;&gt; &lt;code&gt;set_boundary()&lt;/code&gt; &lt;/a&gt;の順序維持&lt;em&gt;のContent-Type&lt;/em&gt;ヘッダのリストにおけるヘッダ。</target>
        </trans-unit>
        <trans-unit id="9bd23778bbf355f16dc2a21579fe2ace4a93366b" translate="yes" xml:space="preserve">
          <source>Note that using this method is subtly different than deleting the old &lt;em&gt;Content-Type&lt;/em&gt; header and adding a new one with the new boundary via &lt;a href=&quot;#email.message.Message.add_header&quot;&gt;&lt;code&gt;add_header()&lt;/code&gt;&lt;/a&gt;, because &lt;a href=&quot;#email.message.Message.set_boundary&quot;&gt;&lt;code&gt;set_boundary()&lt;/code&gt;&lt;/a&gt; preserves the order of the &lt;em&gt;Content-Type&lt;/em&gt; header in the list of headers. However, it does &lt;em&gt;not&lt;/em&gt; preserve any continuation lines which may have been present in the original &lt;em&gt;Content-Type&lt;/em&gt; header.</source>
          <target state="translated">この方法を使用する古い削除するよりも微妙に異なることに注意してください&lt;em&gt;のContent-Type&lt;/em&gt;ヘッダを介して新たな境界と新しいものを追加すること&lt;a href=&quot;#email.message.Message.add_header&quot;&gt; &lt;code&gt;add_header()&lt;/code&gt; &lt;/a&gt;、なぜなら&lt;a href=&quot;#email.message.Message.set_boundary&quot;&gt; &lt;code&gt;set_boundary()&lt;/code&gt; &lt;/a&gt;の順序維持&lt;em&gt;のContent-Type&lt;/em&gt;ヘッダのリストにおけるヘッダ。ただし、元の&lt;em&gt;Content-Type&lt;/em&gt;ヘッダーに存在していた可能性のある継続行&lt;em&gt;は&lt;/em&gt;保持されませ&lt;em&gt;ん&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c91ae7008ef906071438192c9d712ce1afcb7577" translate="yes" xml:space="preserve">
          <source>Note that via &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattr__&quot;&gt;&lt;code&gt;__getattr__()&lt;/code&gt;&lt;/a&gt; hooks, all attributes are computed lazily, so there is no speed penalty if only those attributes which are lightweight to compute are used.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattr__&quot;&gt; &lt;code&gt;__getattr__()&lt;/code&gt; &lt;/a&gt;フックを介して、すべての属性が遅延計算されるため、計算が軽量な属性のみを使用する場合、速度が低下することはありません。</target>
        </trans-unit>
        <trans-unit id="6620fed817fce6e58ea094966e81cd033a5e4010" translate="yes" xml:space="preserve">
          <source>Note that when instantiating a &lt;a href=&quot;#difflib.Differ&quot;&gt;&lt;code&gt;Differ&lt;/code&gt;&lt;/a&gt; object we may pass functions to filter out line and character &amp;ldquo;junk.&amp;rdquo; See the &lt;a href=&quot;#difflib.Differ&quot;&gt;&lt;code&gt;Differ()&lt;/code&gt;&lt;/a&gt; constructor for details.</source>
          <target state="translated">&lt;a href=&quot;#difflib.Differ&quot;&gt; &lt;code&gt;Differ&lt;/code&gt; &lt;/a&gt;オブジェクトをインスタンス化するときに、行や文字の「ジャンク」を除外する関数を渡す場合があることに注意してください。詳細については、&lt;a href=&quot;#difflib.Differ&quot;&gt; &lt;code&gt;Differ()&lt;/code&gt; &lt;/a&gt;コンストラクターを参照してください。</target>
        </trans-unit>
        <trans-unit id="dd02f589dec05a4f2acacc6d0ca5ede64ffc86f9" translate="yes" xml:space="preserve">
          <source>Note that when locals are captured, they are also shown in the traceback.</source>
          <target state="translated">ローカルがキャプチャされると、トレースバックにも表示されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="502bb316d8bdb001894aeb3898845cca4d8900b3" translate="yes" xml:space="preserve">
          <source>Note that when reading configuration files, whitespace around the option names is stripped before &lt;a href=&quot;#configparser.ConfigParser.optionxform&quot;&gt;&lt;code&gt;optionxform()&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="translated">構成ファイルを読み取るとき、&lt;a href=&quot;#configparser.ConfigParser.optionxform&quot;&gt; &lt;code&gt;optionxform()&lt;/code&gt; &lt;/a&gt;が呼び出される前に、オプション名の周りの空白が削除されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ea83e7983f7be281ec5a3262ffed3a7df409c2d9" translate="yes" xml:space="preserve">
          <source>Note that when the Unicode patterns &lt;code&gt;[a-z]&lt;/code&gt; or &lt;code&gt;[A-Z]&lt;/code&gt; are used in combination with the &lt;a href=&quot;#re.IGNORECASE&quot;&gt;&lt;code&gt;IGNORECASE&lt;/code&gt;&lt;/a&gt; flag, they will match the 52 ASCII letters and 4 additional non-ASCII letters: &amp;lsquo;İ&amp;rsquo; (U+0130, Latin capital letter I with dot above), &amp;lsquo;ı&amp;rsquo; (U+0131, Latin small letter dotless i), &amp;lsquo;ſ&amp;rsquo; (U+017F, Latin small letter long s) and &amp;lsquo;K&amp;rsquo; (U+212A, Kelvin sign). If the &lt;a href=&quot;#re.ASCII&quot;&gt;&lt;code&gt;ASCII&lt;/code&gt;&lt;/a&gt; flag is used, only letters &amp;lsquo;a&amp;rsquo; to &amp;lsquo;z&amp;rsquo; and &amp;lsquo;A&amp;rsquo; to &amp;lsquo;Z&amp;rsquo; are matched.</source>
          <target state="translated">Unicodeパターン &lt;code&gt;[a-z]&lt;/code&gt; または &lt;code&gt;[A-Z]&lt;/code&gt; が&lt;a href=&quot;#re.IGNORECASE&quot;&gt; &lt;code&gt;IGNORECASE&lt;/code&gt; &lt;/a&gt;フラグと組み合わせて使用​​される場合、52個のASCII文字と4つの追加の非ASCII文字に一致することに注意してください： 'İ'（U + 0130、ラテン大文字I上のドット）、「ı」（U + 0131、ラテン小文字のドットなしi）、「ſ」（U + 017F、ラテン小文字の長いs）、および「K」（U + 212A、ケルビン記号）。&lt;a href=&quot;#re.ASCII&quot;&gt; &lt;code&gt;ASCII&lt;/code&gt; &lt;/a&gt;フラグを使用する場合、「a」から「z」までの文字と「A」から「Z」までの文字のみが一致します。</target>
        </trans-unit>
        <trans-unit id="941b2bd8c0fceca2a354dab3b47ce6850b8f3e86" translate="yes" xml:space="preserve">
          <source>Note that while &lt;a href=&quot;#xml.etree.ElementTree.iterparse&quot;&gt;&lt;code&gt;iterparse()&lt;/code&gt;&lt;/a&gt; builds the tree incrementally, it issues blocking reads on &lt;em&gt;source&lt;/em&gt; (or the file it names). As such, it&amp;rsquo;s unsuitable for applications where blocking reads can&amp;rsquo;t be made. For fully non-blocking parsing, see &lt;a href=&quot;#xml.etree.ElementTree.XMLPullParser&quot;&gt;&lt;code&gt;XMLPullParser&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#xml.etree.ElementTree.iterparse&quot;&gt; &lt;code&gt;iterparse()&lt;/code&gt; &lt;/a&gt;は段階的にツリーを構築しますが、&lt;em&gt;ソース&lt;/em&gt;（または名前が付けられたファイル）に対するブロック読み取りを発行することに注意してください。そのため、読み取りをブロックできないアプリケーションには適していません。完全に非ブロッキングの解析については、&lt;a href=&quot;#xml.etree.ElementTree.XMLPullParser&quot;&gt; &lt;code&gt;XMLPullParser&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2e2a3769eac1a1d1cf5224599e594a65402067fa" translate="yes" xml:space="preserve">
          <source>Note that widgets do not appear until they have had their geometry specified with a geometry manager. It&amp;rsquo;s a common early mistake to leave out the geometry specification, and then be surprised when the widget is created but nothing appears. A widget will appear only after it has had, for example, the packer&amp;rsquo;s &lt;code&gt;pack()&lt;/code&gt; method applied to it.</source>
          <target state="translated">ウィジェットは、ジオメトリマネージャでジオメトリが指定されるまで表示されないことに注意してください。ジオメトリの指定を省略して、ウィジェットが作成されても何も表示されないことに驚かされるのは、初期のよくある間違いです。ウィジェットは、たとえば、packerの &lt;code&gt;pack()&lt;/code&gt; メソッドが適用された後にのみ表示されます。</target>
        </trans-unit>
        <trans-unit id="2968c2dcd25aa32f9a9ffad2dfcf5c7c74536aa8" translate="yes" xml:space="preserve">
          <source>Note that win32 system dlls like &lt;code&gt;kernel32&lt;/code&gt; and &lt;code&gt;user32&lt;/code&gt; often export ANSI as well as UNICODE versions of a function. The UNICODE version is exported with an &lt;code&gt;W&lt;/code&gt; appended to the name, while the ANSI version is exported with an &lt;code&gt;A&lt;/code&gt; appended to the name. The win32 &lt;code&gt;GetModuleHandle&lt;/code&gt; function, which returns a &lt;em&gt;module handle&lt;/em&gt; for a given module name, has the following C prototype, and a macro is used to expose one of them as &lt;code&gt;GetModuleHandle&lt;/code&gt; depending on whether UNICODE is defined or not:</source>
          <target state="translated">&lt;code&gt;kernel32&lt;/code&gt; や &lt;code&gt;user32&lt;/code&gt; などのwin32システムdllは、関数のUNICODEバージョンだけでなくANSIバージョンもエクスポートすることに注意してください。UNICODEバージョンは名前に &lt;code&gt;W&lt;/code&gt; が追加されてエクスポートされますが、ANSIバージョンは名前に &lt;code&gt;A&lt;/code&gt; が追加されてエクスポートされます。特定のモジュール名の&lt;em&gt;モジュールハンドル&lt;/em&gt;を返すwin32 &lt;code&gt;GetModuleHandle&lt;/code&gt; 関数には次のCプロトタイプがあり、マクロを使用して、UNICODEが定義されているかどうかに応じて、これらの1つを &lt;code&gt;GetModuleHandle&lt;/code&gt; として公開します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2e484f1a68e220911d28f836ad1681a6e8b9beab" translate="yes" xml:space="preserve">
          <source>Note that you must have read the whole response before you can send a new request to the server.</source>
          <target state="translated">サーバに新しいリクエストを送る前に、レスポンス全体を読む必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="03c8f7f230406149e0b90ed811820d038dcfd819" translate="yes" xml:space="preserve">
          <source>Note that, as with floating point numbers, &lt;code&gt;v is w&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; imply &lt;code&gt;v == w&lt;/code&gt; for memoryview objects.</source>
          <target state="translated">浮動小数点数と同様に、 &lt;code&gt;v is w&lt;/code&gt; は、memoryviewオブジェクトの &lt;code&gt;v == w&lt;/code&gt; を意味し&lt;em&gt;ない&lt;/em&gt;ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="84e31b16758bcc976ec2d505de7ab96563d8cfa9" translate="yes" xml:space="preserve">
          <source>Note that, because of normalization, &lt;code&gt;timedelta.max&lt;/code&gt; &amp;gt; &lt;code&gt;-timedelta.min&lt;/code&gt;. &lt;code&gt;-timedelta.max&lt;/code&gt; is not representable as a &lt;a href=&quot;#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">正規化のため、 &lt;code&gt;timedelta.max&lt;/code&gt; &amp;gt; &lt;code&gt;-timedelta.min&lt;/code&gt; であることに注意してください。 &lt;code&gt;-timedelta.max&lt;/code&gt; は、&lt;a href=&quot;#datetime.timedelta&quot;&gt; &lt;code&gt;timedelta&lt;/code&gt; &lt;/a&gt;オブジェクトとして表現できません。</target>
        </trans-unit>
        <trans-unit id="d2fa3178c8ace73525d94f281c6241f693463f13" translate="yes" xml:space="preserve">
          <source>Note that, unlike &lt;a href=&quot;#runpy.run_module&quot;&gt;&lt;code&gt;run_module()&lt;/code&gt;&lt;/a&gt;, the alterations made to &lt;a href=&quot;sys#module-sys&quot;&gt;&lt;code&gt;sys&lt;/code&gt;&lt;/a&gt; are not optional in this function as these adjustments are essential to allowing the execution of sys.path entries. As the thread-safety limitations still apply, use of this function in threaded code should be either serialised with the import lock or delegated to a separate process.</source>
          <target state="translated">&lt;a href=&quot;#runpy.run_module&quot;&gt; &lt;code&gt;run_module()&lt;/code&gt; &lt;/a&gt;とは異なり、&lt;a href=&quot;sys#module-sys&quot;&gt; &lt;code&gt;sys&lt;/code&gt; に&lt;/a&gt;加えられた変更は、sys.pathエントリの実行を許可するために不可欠であるため、この関数ではオプションではありません。スレッドセーフティの制限が引き続き適用されるため、スレッドコードでのこの関数の使用は、インポートロックでシリアル化するか、別のプロセスに委任する必要があります。</target>
        </trans-unit>
        <trans-unit id="f1c5a3a10c1525bb6f32e3ae69372905a7415c70" translate="yes" xml:space="preserve">
          <source>Note the difference between &lt;code&gt;'@'&lt;/code&gt; and &lt;code&gt;'='&lt;/code&gt;: both use native byte order, but the size and alignment of the latter is standardized.</source>
          <target state="translated">&lt;code&gt;'@'&lt;/code&gt; と &lt;code&gt;'='&lt;/code&gt; の違いに注意してください。どちらもネイティブのバイト順を使用していますが、後者のサイズと配置は標準化されています。</target>
        </trans-unit>
        <trans-unit id="394e74fcbbfae11d61ce5fd9d0741b358dc5b679" translate="yes" xml:space="preserve">
          <source>Note the unusual calling syntax: the &lt;em&gt;first&lt;/em&gt; argument is optional, and the second is required. This is a historical artifact for compatibility with the older &lt;code&gt;linuxaudiodev&lt;/code&gt; module which &lt;a href=&quot;#module-ossaudiodev&quot;&gt;&lt;code&gt;ossaudiodev&lt;/code&gt;&lt;/a&gt; supersedes.</source>
          <target state="translated">異常な呼び出し構文に注意してください。&lt;em&gt;最初の&lt;/em&gt;引数はオプションで、2番目の引数は必須です。これは、&lt;a href=&quot;#module-ossaudiodev&quot;&gt; &lt;code&gt;ossaudiodev&lt;/code&gt; が&lt;/a&gt;取って代わる古い &lt;code&gt;linuxaudiodev&lt;/code&gt; モジュールとの互換性のための歴史的な成果物です。</target>
        </trans-unit>
        <trans-unit id="7af185c96012df581e5e0886681b5f83b41d3210" translate="yes" xml:space="preserve">
          <source>Note there are performance considerations involved with the &lt;em&gt;size&lt;/em&gt; parameter. For optimal performance, it is usually best to use the arraysize attribute. If the &lt;em&gt;size&lt;/em&gt; parameter is used, then it is best for it to retain the same value from one &lt;a href=&quot;#sqlite3.Cursor.fetchmany&quot;&gt;&lt;code&gt;fetchmany()&lt;/code&gt;&lt;/a&gt; call to the next.</source>
          <target state="translated">&lt;em&gt;size&lt;/em&gt;パラメータに関連するパフォーマンスの考慮事項があることに注意してください。最適なパフォーマンスを得るには、通常、arraysize属性を使用するのが最適です。場合は&lt;em&gt;サイズの&lt;/em&gt;パラメータが使用されている、それは1から同じ値を保持するために、それがベストです&lt;a href=&quot;#sqlite3.Cursor.fetchmany&quot;&gt; &lt;code&gt;fetchmany()&lt;/code&gt; &lt;/a&gt;の次の呼び出し。</target>
        </trans-unit>
        <trans-unit id="4fe587f2f04237cccac255c57a5d7d8af7041796" translate="yes" xml:space="preserve">
          <source>Note, however, that it&amp;rsquo;s not recommended from a security perspective to spit out diagnostics to any old user; ideally, you should have to do something special to enable diagnostic output, which is why the default implementation doesn&amp;rsquo;t include any.</source>
          <target state="translated">ただし、セキュリティの観点から、診断を古いユーザーに送信することはお勧めしません。理想的には、診断出力を有効にするために特別なことをする必要があります。これがデフォルトの実装に何も含まれていない理由です。</target>
        </trans-unit>
        <trans-unit id="762ab7548d9281c2411acf4c20182504bff18c33" translate="yes" xml:space="preserve">
          <source>Note, that the data read is buffered in memory, so do not use this method if the data size is large or unlimited.</source>
          <target state="translated">なお、読み込んだデータはメモリ内にバッファリングされるので、データサイズが大きい場合や無制限の場合はこの方法は使用しないでください。</target>
        </trans-unit>
        <trans-unit id="88aebce2f9074a5fa8e2b3fc150edc9adfd4b5a6" translate="yes" xml:space="preserve">
          <source>Note, the &lt;em&gt;default&lt;/em&gt; will be &lt;code&gt;None&lt;/code&gt; unless explicitly set to &lt;em&gt;0&lt;/em&gt;.</source>
          <target state="translated">明示的に&lt;em&gt;0&lt;/em&gt;に設定しない限り、&lt;em&gt;デフォルト&lt;/em&gt;は &lt;code&gt;None&lt;/code&gt; になり&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c1bc85960916ca65e7a3c8ddd82bfd13d344d14f" translate="yes" xml:space="preserve">
          <source>Note, the &lt;em&gt;elem&lt;/em&gt; argument to the &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__contains__&quot;&gt;&lt;code&gt;__contains__()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#frozenset.remove&quot;&gt;&lt;code&gt;remove()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#frozenset.discard&quot;&gt;&lt;code&gt;discard()&lt;/code&gt;&lt;/a&gt; methods may be a set. To support searching for an equivalent frozenset, a temporary one is created from &lt;em&gt;elem&lt;/em&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__contains__&quot;&gt; &lt;code&gt;__contains__()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#frozenset.remove&quot;&gt; &lt;code&gt;remove()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#frozenset.discard&quot;&gt; &lt;code&gt;discard()&lt;/code&gt; &lt;/a&gt;メソッドへの&lt;em&gt;elem&lt;/em&gt;引数は、セットである場合があることに注意してください。同等のfrozensetの検索をサポートするために、&lt;em&gt;elem&lt;/em&gt;から一時的なものが作成され&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9ce50e6ce36b2bce4757cdba44683aef09df0f6a" translate="yes" xml:space="preserve">
          <source>Note, the iteration order of a &lt;a href=&quot;#collections.ChainMap&quot;&gt;&lt;code&gt;ChainMap()&lt;/code&gt;&lt;/a&gt; is determined by scanning the mappings last to first:</source>
          <target state="translated">&lt;a href=&quot;#collections.ChainMap&quot;&gt; &lt;code&gt;ChainMap()&lt;/code&gt; &lt;/a&gt;の反復順序は、マッピングを最後から最初にスキャンすることによって決定されます。</target>
        </trans-unit>
        <trans-unit id="ca3dedf0fa71983b6357e6e9bae7d93a1fd17b41" translate="yes" xml:space="preserve">
          <source>Note, the non-operator versions of &lt;a href=&quot;#frozenset.union&quot;&gt;&lt;code&gt;union()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#frozenset.intersection&quot;&gt;&lt;code&gt;intersection()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#frozenset.difference&quot;&gt;&lt;code&gt;difference()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#frozenset.symmetric_difference&quot;&gt;&lt;code&gt;symmetric_difference()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#frozenset.issubset&quot;&gt;&lt;code&gt;issubset()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#frozenset.issuperset&quot;&gt;&lt;code&gt;issuperset()&lt;/code&gt;&lt;/a&gt; methods will accept any iterable as an argument. In contrast, their operator based counterparts require their arguments to be sets. This precludes error-prone constructions like &lt;code&gt;set('abc') &amp;amp; 'cbs'&lt;/code&gt; in favor of the more readable &lt;code&gt;set('abc').intersection('cbs')&lt;/code&gt;.</source>
          <target state="translated">オペレーター以外のバージョンの&lt;a href=&quot;#frozenset.union&quot;&gt; &lt;code&gt;union()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#frozenset.intersection&quot;&gt; &lt;code&gt;intersection()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#frozenset.difference&quot;&gt; &lt;code&gt;difference()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#frozenset.symmetric_difference&quot;&gt; &lt;code&gt;symmetric_difference()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#frozenset.issubset&quot;&gt; &lt;code&gt;issubset()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#frozenset.issuperset&quot;&gt; &lt;code&gt;issuperset()&lt;/code&gt; &lt;/a&gt;メソッドは、任意の反復可能オブジェクトを引数として受け入れます。対照的に、それらの演算子ベースの対応物は、引数をセットにする必要があります。これにより、 &lt;code&gt;set('abc') &amp;amp; 'cbs'&lt;/code&gt; などのエラーが発生しやすい構造が排除され、より読みやすい &lt;code&gt;set('abc').intersection('cbs')&lt;/code&gt; が優先されます。</target>
        </trans-unit>
        <trans-unit id="051512041c44a2517e704de51f5530d92cd85cdd" translate="yes" xml:space="preserve">
          <source>Note, the non-operator versions of the &lt;a href=&quot;#frozenset.update&quot;&gt;&lt;code&gt;update()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#frozenset.intersection_update&quot;&gt;&lt;code&gt;intersection_update()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#frozenset.difference_update&quot;&gt;&lt;code&gt;difference_update()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#frozenset.symmetric_difference_update&quot;&gt;&lt;code&gt;symmetric_difference_update()&lt;/code&gt;&lt;/a&gt; methods will accept any iterable as an argument.</source>
          <target state="translated">オペレーター以外のバージョンの&lt;a href=&quot;#frozenset.update&quot;&gt; &lt;code&gt;update()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#frozenset.intersection_update&quot;&gt; &lt;code&gt;intersection_update()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#frozenset.difference_update&quot;&gt; &lt;code&gt;difference_update()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#frozenset.symmetric_difference_update&quot;&gt; &lt;code&gt;symmetric_difference_update()&lt;/code&gt; &lt;/a&gt;メソッドは、反復可能オブジェクトを引数として受け入れます。</target>
        </trans-unit>
        <trans-unit id="112b3520cc7fea120e7deb94779035341ecfd7d1" translate="yes" xml:space="preserve">
          <source>Note, this member of the toolkit may require significant auxiliary storage (depending on the length of the iterable).</source>
          <target state="translated">ツールキットのこのメンバーは、かなりの補助的なストレージが必要になることに注意してください(イテレータブルの長さによっては)。</target>
        </trans-unit>
        <trans-unit id="13a1e86095e2b68b8a7fa1905437c2cc90128cdc" translate="yes" xml:space="preserve">
          <source>Note: &lt;a href=&quot;#socket.gethostname&quot;&gt;&lt;code&gt;gethostname()&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t always return the fully qualified domain name; use &lt;a href=&quot;#socket.getfqdn&quot;&gt;&lt;code&gt;getfqdn()&lt;/code&gt;&lt;/a&gt; for that.</source>
          <target state="translated">注：&lt;a href=&quot;#socket.gethostname&quot;&gt; &lt;code&gt;gethostname()&lt;/code&gt; &lt;/a&gt;は常に完全修飾ドメイン名を返すとは限りません。そのためには&lt;a href=&quot;#socket.getfqdn&quot;&gt; &lt;code&gt;getfqdn()&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="940b0549d5a0a4041429b4eecbc4dbeb233620a3" translate="yes" xml:space="preserve">
          <source>Note: &lt;strong&gt;The policy keyword should always be specified&lt;/strong&gt;; The default will change to &lt;a href=&quot;email.policy#email.policy.default&quot;&gt;&lt;code&gt;email.policy.default&lt;/code&gt;&lt;/a&gt; in a future version of Python.</source>
          <target state="translated">注：&lt;strong&gt;policyキーワードは常に指定する必要があります&lt;/strong&gt;。Pythonの将来のバージョンでは、デフォルトが&lt;a href=&quot;email.policy#email.policy.default&quot;&gt; &lt;code&gt;email.policy.default&lt;/code&gt; &lt;/a&gt;に変更されます。</target>
        </trans-unit>
        <trans-unit id="e2cbdd7a2167c420ef2fe1b094a5250391cb7403" translate="yes" xml:space="preserve">
          <source>Note: If you just want to pass a pointer to an object to a foreign function call, you should use &lt;code&gt;byref(obj)&lt;/code&gt; which is much faster.</source>
          <target state="translated">注：オブジェクトへのポインタを外部関数呼び出しに渡すだけの場合は、より高速な &lt;code&gt;byref(obj)&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="77e52fe2400941c708aa213fb2c6d50d40a1c8b9" translate="yes" xml:space="preserve">
          <source>Note: Some code samples reference the ctypes &lt;a href=&quot;#ctypes.c_int&quot;&gt;&lt;code&gt;c_int&lt;/code&gt;&lt;/a&gt; type. On platforms where &lt;code&gt;sizeof(long) == sizeof(int)&lt;/code&gt; it is an alias to &lt;a href=&quot;#ctypes.c_long&quot;&gt;&lt;code&gt;c_long&lt;/code&gt;&lt;/a&gt;. So, you should not be confused if &lt;a href=&quot;#ctypes.c_long&quot;&gt;&lt;code&gt;c_long&lt;/code&gt;&lt;/a&gt; is printed if you would expect &lt;a href=&quot;#ctypes.c_int&quot;&gt;&lt;code&gt;c_int&lt;/code&gt;&lt;/a&gt; &amp;mdash; they are actually the same type.</source>
          <target state="translated">注：一部のコードサンプルは、ctypes &lt;a href=&quot;#ctypes.c_int&quot;&gt; &lt;code&gt;c_int&lt;/code&gt; &lt;/a&gt;型を参照しています。 &lt;code&gt;sizeof(long) == sizeof(int)&lt;/code&gt; プラットフォームでは、これは&lt;a href=&quot;#ctypes.c_long&quot;&gt; &lt;code&gt;c_long&lt;/code&gt; の&lt;/a&gt;エイリアスです。であれば、あなたは混同してはならない&lt;a href=&quot;#ctypes.c_long&quot;&gt; &lt;code&gt;c_long&lt;/code&gt; のは、&lt;/a&gt;あなたが期待する場合には印刷され&lt;a href=&quot;#ctypes.c_int&quot;&gt; &lt;code&gt;c_int&lt;/code&gt; のを&lt;/a&gt; -彼らは実際には同じタイプです。</target>
        </trans-unit>
        <trans-unit id="3e0eb9ee31e1587e739522fcda6c31ae3034a95a" translate="yes" xml:space="preserve">
          <source>Note: The code samples in this tutorial use &lt;a href=&quot;doctest#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; to make sure that they actually work. Since some code samples behave differently under Linux, Windows, or Mac OS X, they contain doctest directives in comments.</source>
          <target state="translated">注：このチュートリアルのコードサンプルでは、&lt;a href=&quot;doctest#module-doctest&quot;&gt; &lt;code&gt;doctest&lt;/code&gt; &lt;/a&gt;を使用して、実際に機能することを確認しています。Linux、Windows、またはMac OS Xでは一部のコードサンプルの動作が異なるため、コメントにdoctestディレクティブが含まれています。</target>
        </trans-unit>
        <trans-unit id="953b3d8abb71583778699e086e9ed766999d86c8" translate="yes" xml:space="preserve">
          <source>Note: The functions do not require the data given to them to be sorted. However, for reading convenience, most of the examples show sorted sequences.</source>
          <target state="translated">注意:これらの関数は,与えられたデータがソートされている必要はありません.しかし,読みやすくするために,ほとんどの例ではソートされたシーケンスを示しています.</target>
        </trans-unit>
        <trans-unit id="a1c53c3229edec4d12d1c96e481f3cb1be441c54" translate="yes" xml:space="preserve">
          <source>Note: an awakened thread does not actually return from its &lt;a href=&quot;#threading.Condition.wait&quot;&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/a&gt; call until it can reacquire the lock. Since &lt;a href=&quot;#threading.Condition.notify&quot;&gt;&lt;code&gt;notify()&lt;/code&gt;&lt;/a&gt; does not release the lock, its caller should.</source>
          <target state="translated">注：呼び起こされたスレッドは、ロックを再取得できるまで、実際には&lt;a href=&quot;#threading.Condition.wait&quot;&gt; &lt;code&gt;wait()&lt;/code&gt; &lt;/a&gt;呼び出しから戻りません。&lt;a href=&quot;#threading.Condition.notify&quot;&gt; &lt;code&gt;notify()&lt;/code&gt; &lt;/a&gt;はロックを解放しないため、呼び出し元は解放する必要があります。</target>
        </trans-unit>
        <trans-unit id="0a990121c7b5c3a78884ba5ed2602b8ed6c392e4" translate="yes" xml:space="preserve">
          <source>Note: if your enumeration defines &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__new__&quot;&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/a&gt; and/or &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt; then whatever value(s) were given to the enum member will be passed into those methods. See &lt;a href=&quot;#planet&quot;&gt;Planet&lt;/a&gt; for an example.</source>
          <target state="translated">注：列挙型が&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__new__&quot;&gt; &lt;code&gt;__new__()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt;定義している場合、列挙型メンバーに指定された値はすべてそれらのメソッドに渡されます。例については、&lt;a href=&quot;#planet&quot;&gt;Planet&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="17bfb70d8bc59b6a601bb652e3e1e16fb71419ac" translate="yes" xml:space="preserve">
          <source>Note: loop may be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">注：loopは &lt;code&gt;None&lt;/code&gt; の場合があります。</target>
        </trans-unit>
        <trans-unit id="dcbf716e0a93fc3a46f989b0950001ff549cbbb0" translate="yes" xml:space="preserve">
          <source>Note: the &lt;a href=&quot;#threading.Condition.notify&quot;&gt;&lt;code&gt;notify()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#threading.Condition.notify_all&quot;&gt;&lt;code&gt;notify_all()&lt;/code&gt;&lt;/a&gt; methods don&amp;rsquo;t release the lock; this means that the thread or threads awakened will not return from their &lt;a href=&quot;#threading.Condition.wait&quot;&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/a&gt; call immediately, but only when the thread that called &lt;a href=&quot;#threading.Condition.notify&quot;&gt;&lt;code&gt;notify()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#threading.Condition.notify_all&quot;&gt;&lt;code&gt;notify_all()&lt;/code&gt;&lt;/a&gt; finally relinquishes ownership of the lock.</source>
          <target state="translated">注：&lt;a href=&quot;#threading.Condition.notify&quot;&gt; &lt;code&gt;notify()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#threading.Condition.notify_all&quot;&gt; &lt;code&gt;notify_all()&lt;/code&gt; &lt;/a&gt;メソッドはロックを解放しません。つまり、&lt;a href=&quot;#threading.Condition.notify_all&quot;&gt; &lt;code&gt;notify_all()&lt;/code&gt; &lt;/a&gt;たスレッドは、&lt;a href=&quot;#threading.Condition.wait&quot;&gt; &lt;code&gt;wait()&lt;/code&gt; &lt;/a&gt;呼び出しからすぐに戻るのではなく、&lt;a href=&quot;#threading.Condition.notify&quot;&gt; &lt;code&gt;notify()&lt;/code&gt; &lt;/a&gt;またはnotify_all（）を呼び出したスレッドが最終的にロックの所有権を放棄したときにのみ戻ります。</target>
        </trans-unit>
        <trans-unit id="20fdf933b6a8eed945310d963fa5e36f40c7100f" translate="yes" xml:space="preserve">
          <source>Note: this function may not be able to retrieve all attributes that getattr can fetch (like dynamically created attributes) and may find attributes that getattr can&amp;rsquo;t (like descriptors that raise AttributeError). It can also return descriptors objects instead of instance members.</source>
          <target state="translated">注：この関数は、getattrがフェッチできるすべての属性（動的に作成された属性など）を取得できない場合があり、getattrが取得できない属性（AttributeErrorを発生させる記述子など）を見つける場合があります。インスタンスメンバーの代わりに記述子オブジェクトを返すこともできます。</target>
        </trans-unit>
        <trans-unit id="cbe152fdfb8ac8116096c5833a5da72fe28dcdf6" translate="yes" xml:space="preserve">
          <source>Notebook</source>
          <target state="translated">Notebook</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="bd2179fffb660660b08dc66587d54c4693ebd949" translate="yes" xml:space="preserve">
          <source>Notes for type implementors</source>
          <target state="translated">型の実装者に関する注意事項</target>
        </trans-unit>
        <trans-unit id="7d429a334eb57d5c3e2b4354221adcdf790abbaa" translate="yes" xml:space="preserve">
          <source>Notes on Maildir by its inventor. Includes an updated name-creation scheme and details on &amp;ldquo;info&amp;rdquo; semantics.</source>
          <target state="translated">発明者によるMaildirに関するメモ。更新された名前作成スキームと「情報」セマンティクスの詳細が含まれています。</target>
        </trans-unit>
        <trans-unit id="39979ab954b5d6a8f0a293f5c81ebd913e2a234b" translate="yes" xml:space="preserve">
          <source>Notes on Reproducibility</source>
          <target state="translated">再現性に関する注意事項</target>
        </trans-unit>
        <trans-unit id="994bfa04566317a983e1a93b7ff9716e4f306af7" translate="yes" xml:space="preserve">
          <source>Notes on availability</source>
          <target state="translated">アベイラビリティに関する注意事項</target>
        </trans-unit>
        <trans-unit id="96ea6c9601efc087de48baaaf665d4181463804b" translate="yes" xml:space="preserve">
          <source>Notes on non-blocking sockets</source>
          <target state="translated">ノンブロッキングソケットに関する注意事項</target>
        </trans-unit>
        <trans-unit id="3529fba1dfaa4d96d92ade4092c1a3d7d76cb625" translate="yes" xml:space="preserve">
          <source>Notes on socket timeouts</source>
          <target state="translated">ソケットのタイムアウトに関する注意事項</target>
        </trans-unit>
        <trans-unit id="4183ad6f00d027788e1933ebd67bd6184f44f2f1" translate="yes" xml:space="preserve">
          <source>Notes on the availability of these functions:</source>
          <target state="translated">これらの機能を利用できるかどうかの注意点</target>
        </trans-unit>
        <trans-unit id="4ab3dde9df12858e1f1d64a466b42281fd1c43e0" translate="yes" xml:space="preserve">
          <source>Notes on using &lt;a href=&quot;#collections.abc.Set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#collections.abc.MutableSet&quot;&gt;&lt;code&gt;MutableSet&lt;/code&gt;&lt;/a&gt; as a mixin:</source>
          <target state="translated">&lt;a href=&quot;#collections.abc.Set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#collections.abc.MutableSet&quot;&gt; &lt;code&gt;MutableSet&lt;/code&gt; &lt;/a&gt;をミックスインとして使用する場合の注意：</target>
        </trans-unit>
        <trans-unit id="9c3befe7e22c8667bc957541f49b0ee79970b588" translate="yes" xml:space="preserve">
          <source>Notes:</source>
          <target state="translated">Notes:</target>
        </trans-unit>
        <trans-unit id="2174435297546a50c24c84751b2ef81fc8fb5831" translate="yes" xml:space="preserve">
          <source>Notes: (1) For most applications the only &lt;em&gt;preferencelist&lt;/em&gt; combinations that really make sense are &lt;code&gt;('plain',)&lt;/code&gt;, &lt;code&gt;('html', 'plain')&lt;/code&gt;, and the default &lt;code&gt;('related', 'html', 'plain')&lt;/code&gt;. (2) Because matching starts with the object on which &lt;code&gt;get_body&lt;/code&gt; is called, calling &lt;code&gt;get_body&lt;/code&gt; on a &lt;code&gt;multipart/related&lt;/code&gt; will return the object itself unless &lt;em&gt;preferencelist&lt;/em&gt; has a non-default value. (3) Messages (or message parts) that do not specify a &lt;em&gt;Content-Type&lt;/em&gt; or whose &lt;em&gt;Content-Type&lt;/em&gt; header is invalid will be treated as if they are of type &lt;code&gt;text/plain&lt;/code&gt;, which may occasionally cause &lt;code&gt;get_body&lt;/code&gt; to return unexpected results.</source>
          <target state="translated">注：（1）ほとんどのアプリケーションで、本当に意味のある&lt;em&gt;優先リストの&lt;/em&gt;組み合わせは &lt;code&gt;('plain',)&lt;/code&gt; 、 &lt;code&gt;('html', 'plain')&lt;/code&gt; とデフォルト &lt;code&gt;('related', 'html', 'plain')&lt;/code&gt; 。 （2）のでているオブジェクトとのマッチングを開始 &lt;code&gt;get_body&lt;/code&gt; 呼び出し、呼び出され &lt;code&gt;get_body&lt;/code&gt; の上に &lt;code&gt;multipart/related&lt;/code&gt; ない限り、オブジェクト自体が返され&lt;em&gt;preferencelistは、&lt;/em&gt;デフォルト以外の値を有します。 （3）&lt;em&gt;Content-Typeが&lt;/em&gt;指定されていない、または&lt;em&gt;Content-Type&lt;/em&gt;ヘッダーが無効なメッセージ（またはメッセージパーツ）は、タイプが &lt;code&gt;text/plain&lt;/code&gt; であるかのように扱われます。それは時々引き起こすかもしれません &lt;code&gt;get_body&lt;/code&gt; 予期しない結果を返すget_body。</target>
        </trans-unit>
        <trans-unit id="409919d20a4d8cdab37ba3de46d6036e52228eae" translate="yes" xml:space="preserve">
          <source>Nothing is specified in this locale.</source>
          <target state="translated">このロケールには何も指定されていません。</target>
        </trans-unit>
        <trans-unit id="f5c76d766938924c4560f425f6d8538403d340e8" translate="yes" xml:space="preserve">
          <source>Notice here how we wanted the &lt;em&gt;Subject&lt;/em&gt; field to contain a non-ASCII character? We did this by creating a &lt;a href=&quot;#email.header.Header&quot;&gt;&lt;code&gt;Header&lt;/code&gt;&lt;/a&gt; instance and passing in the character set that the byte string was encoded in. When the subsequent &lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; instance was flattened, the &lt;em&gt;Subject&lt;/em&gt; field was properly &lt;a href=&quot;https://tools.ietf.org/html/rfc2047.html&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;RFC 2047&lt;/strong&gt;&lt;/a&gt; encoded. MIME-aware mail readers would show this header using the embedded ISO-8859-1 character.</source>
          <target state="translated">ここで、[ &lt;em&gt;件名]&lt;/em&gt;フィールドに非ASCII文字を含める方法に注意してください。これを行うには、&lt;a href=&quot;#email.header.Header&quot;&gt; &lt;code&gt;Header&lt;/code&gt; &lt;/a&gt;インスタンスを作成し、バイト文字列がエンコードされた文字セットを渡します。後続の&lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt; &lt;code&gt;Message&lt;/code&gt; &lt;/a&gt;インスタンスがフラット化されると、&lt;em&gt;Subject&lt;/em&gt;フィールドは適切に&lt;a href=&quot;https://tools.ietf.org/html/rfc2047.html&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;RFC 2047&lt;/strong&gt;&lt;/a&gt;エンコードされました。MIME対応のメールリーダーは、埋め込まれたISO-8859-1文字を使用してこのヘッダーを表示します。</target>
        </trans-unit>
        <trans-unit id="30aaa667ceadb867eac4109ef078332b809dce4f" translate="yes" xml:space="preserve">
          <source>Notice how the widget field of the event is being accessed in the &lt;code&gt;turn_red()&lt;/code&gt; callback. This field contains the widget that caught the X event. The following table lists the other event fields you can access, and how they are denoted in Tk, which can be useful when referring to the Tk man pages.</source>
          <target state="translated">イベントのウィジェットフィールドが &lt;code&gt;turn_red()&lt;/code&gt; コールバックでアクセスされていることに注意してください。このフィールドには、Xイベントをキャッチしたウィジェットが含まれます。次の表は、アクセスできる他のイベントフィールドと、それらがTkでどのように示されるかを示しています。これは、Tkのマニュアルページを参照するときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="96b9beb737cf3231c7449d825ff3410688086c28" translate="yes" xml:space="preserve">
          <source>Notice that applying &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; to a proxy will return the representation of the referent, whereas applying &lt;a href=&quot;functions#repr&quot;&gt;&lt;code&gt;repr()&lt;/code&gt;&lt;/a&gt; will return the representation of the proxy.</source>
          <target state="translated">&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str()&lt;/code&gt; &lt;/a&gt;をプロキシに適用すると&lt;a href=&quot;functions#repr&quot;&gt; &lt;code&gt;repr()&lt;/code&gt; &lt;/a&gt;の表現が返され、repr（）を適用するとプロキシの表現が返されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="aa30b318f59f62feb7be7cc735b127ba14e6692b" translate="yes" xml:space="preserve">
          <source>Notice that no typechecking is performed when assigning a value of type &lt;a href=&quot;#typing.Any&quot;&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/a&gt; to a more precise type. For example, the static type checker did not report an error when assigning &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;s&lt;/code&gt; even though &lt;code&gt;s&lt;/code&gt; was declared to be of type &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; and receives an &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; value at runtime!</source>
          <target state="translated">&lt;a href=&quot;#typing.Any&quot;&gt; &lt;code&gt;Any&lt;/code&gt; &lt;/a&gt;型の値をより正確な型に割り当てる場合、型チェックは実行されないことに注意してください。たとえば、 &lt;code&gt;s&lt;/code&gt; が&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;型であると宣言され、実行時に&lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt;値を受け取ったとしても、静的型チェッカーは &lt;code&gt;s&lt;/code&gt; に &lt;code&gt;a&lt;/code&gt; を割り当てるときにエラーを報告しませんでした！</target>
        </trans-unit>
        <trans-unit id="376b3de67409d19233b0e4907b9f553ccc115c20" translate="yes" xml:space="preserve">
          <source>Notice that on Windows, it&amp;rsquo;s a much smaller set.</source>
          <target state="translated">Windowsでは、これははるかに小さいセットであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="2cf0b6869f1edb55f90d57ea0a5832b1aa4e18b8" translate="yes" xml:space="preserve">
          <source>Notice that the behavior of this module depends on the actual implementation of the &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/crypt(3)&quot;&gt;crypt(3)&lt;/a&gt;&lt;/em&gt; routine in the running system. Therefore, any extensions available on the current implementation will also be available on this module.</source>
          <target state="translated">このモジュールの動作は、実行中のシステムでの&lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/crypt(3)&quot;&gt;crypt（3）&lt;/a&gt;&lt;/em&gt;ルーチンの実際の実装に依存することに注意してください。したがって、現在の実装で利用可能な拡張機能は、このモジュールでも利用できます。</target>
        </trans-unit>
        <trans-unit id="5c0c4d04cc2d3987360c07fbe4eeb4ed6e5e1e21" translate="yes" xml:space="preserve">
          <source>Now add the Shape to the Screen&amp;rsquo;s shapelist and use it:</source>
          <target state="translated">次に、ShapeをScreenのシェイプリストに追加して使用します。</target>
        </trans-unit>
        <trans-unit id="0b5aed1a03f8c35d4b559d5f5099d36802ea5696" translate="yes" xml:space="preserve">
          <source>Now that we have created and saved a configuration file, let&amp;rsquo;s read it back and explore the data it holds.</source>
          <target state="translated">構成ファイルを作成して保存したので、それを読み戻して、保持しているデータを調べてみましょう。</target>
        </trans-unit>
        <trans-unit id="62f8769fc4f592eaaff3b60938b72976e8a63ca6" translate="yes" xml:space="preserve">
          <source>Now the SSL channel is established and the certificate verified, you can proceed to talk with the server:</source>
          <target state="translated">これでSSLチャネルが確立され、証明書が検証されたので、サーバーとの会話に進むことができます。</target>
        </trans-unit>
        <trans-unit id="31924ee76d82b9e37715f009e523c241db6e0226" translate="yes" xml:space="preserve">
          <source>Now we can actually compare the two items and return a useful result:</source>
          <target state="translated">これで実際に2つの項目を比較して、有用な結果を返すことができるようになりました。</target>
        </trans-unit>
        <trans-unit id="f5eeebbc7cb554fdc7b5389ad448df86c1df182b" translate="yes" xml:space="preserve">
          <source>Now we plug &lt;a href=&quot;#sqlite3.Row&quot;&gt;&lt;code&gt;Row&lt;/code&gt;&lt;/a&gt; in:</source>
          <target state="translated">次に、&lt;a href=&quot;#sqlite3.Row&quot;&gt; &lt;code&gt;Row&lt;/code&gt; &lt;/a&gt;をプラグインします。</target>
        </trans-unit>
        <trans-unit id="8cb4116ac86e771beb460431be65c48158d5f51c" translate="yes" xml:space="preserve">
          <source>Now we want to test &lt;code&gt;some_function&lt;/code&gt; but we want to mock out &lt;code&gt;SomeClass&lt;/code&gt; using &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt;. The problem is that when we import module b, which we will have to do then it imports &lt;code&gt;SomeClass&lt;/code&gt; from module a. If we use &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; to mock out &lt;code&gt;a.SomeClass&lt;/code&gt; then it will have no effect on our test; module b already has a reference to the &lt;em&gt;real&lt;/em&gt;&lt;code&gt;SomeClass&lt;/code&gt; and it looks like our patching had no effect.</source>
          <target state="translated">次に、 &lt;code&gt;some_function&lt;/code&gt; をテストしますが、&lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt;を使用して &lt;code&gt;SomeClass&lt;/code&gt; をモックアウトします。問題は、モジュールbをインポートすると、モジュールa から &lt;code&gt;SomeClass&lt;/code&gt; がインポートされることです。&lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt;を使用して &lt;code&gt;a.SomeClass&lt;/code&gt; をモックアウトした場合、テストに影響はありません。モジュールbにはすでに&lt;em&gt;実際の&lt;/em&gt; &lt;code&gt;SomeClass&lt;/code&gt; への参照があり、パッチを当てても効果がなかったようです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a1ed0c7c2d81859eda6b5cc833464eb0dd988f38" translate="yes" xml:space="preserve">
          <source>Now you need to make the &lt;a href=&quot;#module-sqlite3&quot;&gt;&lt;code&gt;sqlite3&lt;/code&gt;&lt;/a&gt; module know that what you select from the database is actually a point. There are two ways of doing this:</source>
          <target state="translated">次に、&lt;a href=&quot;#module-sqlite3&quot;&gt; &lt;code&gt;sqlite3&lt;/code&gt; &lt;/a&gt;モジュールに、データベースから選択したものがポイントであることを知らせる必要があります。これには2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="d29ec33880afd873623e441fe4abecf453440c79" translate="yes" xml:space="preserve">
          <source>Now you want to store the point in a single SQLite column. First you&amp;rsquo;ll have to choose one of the supported types first to be used for representing the point. Let&amp;rsquo;s just use str and separate the coordinates using a semicolon. Then you need to give your class a method &lt;code&gt;__conform__(self, protocol)&lt;/code&gt; which must return the converted value. The parameter &lt;em&gt;protocol&lt;/em&gt; will be &lt;code&gt;PrepareProtocol&lt;/code&gt;.</source>
          <target state="translated">次に、ポイントを単一のSQLite列に格納します。最初に、ポイントを表すために使用するサポートされているタイプの1つを最初に選択する必要があります。strを使用し、セミコロンを使用して座標を区切りましょう。次に、変換された値を返す必要のあるメソッド &lt;code&gt;__conform__(self, protocol)&lt;/code&gt; をクラスに与える必要があります。パラメータ&lt;em&gt;protocol&lt;/em&gt;は &lt;code&gt;PrepareProtocol&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="b6befe568a0abd7fa9cb859e17c6a8a729ffcf6a" translate="yes" xml:space="preserve">
          <source>Null-terminated string containing references to environment variables (&lt;code&gt;%PATH%&lt;/code&gt;).</source>
          <target state="translated">環境変数への参照を含むヌル終了文字列（ &lt;code&gt;%PATH%&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="19a9339a57b70f4cc49edd3bf00a059e1a50c395" translate="yes" xml:space="preserve">
          <source>NullHandler</source>
          <target state="translated">NullHandler</target>
        </trans-unit>
        <trans-unit id="fe1b2483239a18901875b04c1af675561eca1503" translate="yes" xml:space="preserve">
          <source>Number of 512-byte blocks allocated for file. This may be smaller than &lt;a href=&quot;#os.stat_result.st_size&quot;&gt;&lt;code&gt;st_size&lt;/code&gt;&lt;/a&gt;/512 when the file has holes.</source>
          <target state="translated">ファイルに割り当てられた512バイトブロックの数。ファイルに穴がある場合、これは&lt;a href=&quot;#os.stat_result.st_size&quot;&gt; &lt;code&gt;st_size&lt;/code&gt; &lt;/a&gt; / 512 より小さくなることがあります。</target>
        </trans-unit>
        <trans-unit id="9bd9aeb87537b2525d0c88b89b62a820757528d3" translate="yes" xml:space="preserve">
          <source>Number of days after password expires until account is disabled</source>
          <target state="translated">パスワードの有効期限が切れてからアカウントが無効になるまでの日数</target>
        </trans-unit>
        <trans-unit id="365942f74cce88224fdaf80b42555c03a1d840aa" translate="yes" xml:space="preserve">
          <source>Number of days before password expires to warn user about it</source>
          <target state="translated">ユーザーに警告するためのパスワードの有効期限の日数</target>
        </trans-unit>
        <trans-unit id="f1d107706720211290a9386c8812c2312f0e8823" translate="yes" xml:space="preserve">
          <source>Number of days since 1970-01-01 when account expires</source>
          <target state="translated">1970-01-01からアカウントの有効期限が切れた日数</target>
        </trans-unit>
        <trans-unit id="a9ee5a8328ef8d145926d62850a8557baa3d4537" translate="yes" xml:space="preserve">
          <source>Number of fractional digits used in international formatting of monetary values.</source>
          <target state="translated">貨幣価値の国際的なフォーマットで使用される端数桁数。</target>
        </trans-unit>
        <trans-unit id="57778df03c86eae3d7455ab3c46c4fdf052bfc73" translate="yes" xml:space="preserve">
          <source>Number of fractional digits used in local formatting of monetary values.</source>
          <target state="translated">貨幣価値のローカルフォーマットで使用される端数桁数。</target>
        </trans-unit>
        <trans-unit id="6c3cc540d70dfce9e01f95ffe47d1ef75ac135de" translate="yes" xml:space="preserve">
          <source>Number of hard links.</source>
          <target state="translated">ハードリンクの数。</target>
        </trans-unit>
        <trans-unit id="c971530ee281315f241b2dd1d6ecd30f91644cee" translate="yes" xml:space="preserve">
          <source>Number of items allowed in the queue.</source>
          <target state="translated">キューで許可されているアイテムの数。</target>
        </trans-unit>
        <trans-unit id="a932b86c0474eba5db591ae5f5240a50c1458767" translate="yes" xml:space="preserve">
          <source>Number of links to the inode.</source>
          <target state="translated">inodeへのリンク数。</target>
        </trans-unit>
        <trans-unit id="4bc5edcccc10a3e8720986ec609357b1e21973dc" translate="yes" xml:space="preserve">
          <source>Number of memory blocks (&lt;code&gt;int&lt;/code&gt;).</source>
          <target state="translated">メモリブロックの数（ &lt;code&gt;int&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="4cac858ebc148236e0b1217a291cec1302b7e513" translate="yes" xml:space="preserve">
          <source>Number of memory blocks in the new snapshot (&lt;code&gt;int&lt;/code&gt;): &lt;code&gt;0&lt;/code&gt; if the memory blocks have been released in the new snapshot.</source>
          <target state="translated">新しいスナップショットのメモリブロック数（ &lt;code&gt;int&lt;/code&gt; ）：新しいスナップショットでメモリブロックが解放されている場合は &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c7bc75d07118ba1efb51d5f92550d75df2499753" translate="yes" xml:space="preserve">
          <source>Number-theoretic and representation functions</source>
          <target state="translated">数論的関数と表現関数</target>
        </trans-unit>
        <trans-unit id="27268cbddf6ca05f823a05275d4b43b80d3a4bb3" translate="yes" xml:space="preserve">
          <source>Number. This is the same as &lt;code&gt;'d'&lt;/code&gt;, except that it uses the current locale setting to insert the appropriate number separator characters.</source>
          <target state="translated">数。これは、現在のロケール設定を使用して適切な数字区切り文字を挿入することを除いて、 &lt;code&gt;'d'&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="2247bb12f37411302dec8137671e6f42f4c568a3" translate="yes" xml:space="preserve">
          <source>Number. This is the same as &lt;code&gt;'g'&lt;/code&gt;, except that it uses the current locale setting to insert the appropriate number separator characters.</source>
          <target state="translated">数。これは、現在のロケール設定を使用して適切な数字区切り文字を挿入することを除いて、 &lt;code&gt;'g'&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="29ab7f8b0894602500582c7973038069b78c9eaf" translate="yes" xml:space="preserve">
          <source>Numbers are created by numeric literals or as the result of built-in functions and operators. Unadorned integer literals (including hex, octal and binary numbers) yield integers. Numeric literals containing a decimal point or an exponent sign yield floating point numbers. Appending &lt;code&gt;'j'&lt;/code&gt; or &lt;code&gt;'J'&lt;/code&gt; to a numeric literal yields an imaginary number (a complex number with a zero real part) which you can add to an integer or float to get a complex number with real and imaginary parts.</source>
          <target state="translated">数値は、数値リテラルによって、または組み込み関数と演算子の結果として作成されます。装飾されていない整数リテラル（16進数、8進数、2進数を含む）は整数になります。小数点または指数記号を含む数値リテラルは、浮動小数点数を生成します。追加 &lt;code&gt;'j'&lt;/code&gt; または &lt;code&gt;'J'&lt;/code&gt; 使用すると、実部と虚部と複素数を取得するには、整数または浮動小数点数に追加することができ虚数（ゼロ実数部を持つ複素数）は、数値リテラル利回りに。</target>
        </trans-unit>
        <trans-unit id="9524713edf06bad44da0de5f83160b3103bf5ebf" translate="yes" xml:space="preserve">
          <source>Numbers of the form &lt;code&gt;I/2.**J&lt;/code&gt; are safe across all platforms, and I often contrive doctest examples to produce numbers of that form:</source>
          <target state="translated">&lt;code&gt;I/2.**J&lt;/code&gt; という形式の数値はすべてのプラットフォームで安全であり、その形式の数値を生成するためにdoctestの例をよく考えています。</target>
        </trans-unit>
        <trans-unit id="ae5a0b6b4520823e7613d9501888e3d11e368899" translate="yes" xml:space="preserve">
          <source>Numerator of the Fraction in lowest term.</source>
          <target state="translated">最下位項の分数の分子。</target>
        </trans-unit>
        <trans-unit id="fe7c15f08e26c4968f404fff756bea4c29d294be" translate="yes" xml:space="preserve">
          <source>Numeric &amp;amp; Mathematical</source>
          <target state="translated">数値と数学</target>
        </trans-unit>
        <trans-unit id="9d18068578c94f717e14cf6e56443bc9d65ccc00" translate="yes" xml:space="preserve">
          <source>Numeric Types &amp;mdash; &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;complex&lt;/code&gt;</source>
          <target state="translated">数値型&amp;mdash; &lt;code&gt;int&lt;/code&gt; 、 &lt;code&gt;float&lt;/code&gt; 、 &lt;code&gt;complex&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cd0376c4852e68845ab3978d24b24f0cc35e578a" translate="yes" xml:space="preserve">
          <source>Numeric Types &amp;mdash; int, float, complex</source>
          <target state="translated">数値型&amp;mdash; int、float、complex</target>
        </trans-unit>
        <trans-unit id="77321ffd329dae8a0e37ae9894a49ded0d830d86" translate="yes" xml:space="preserve">
          <source>Numeric and Mathematical Modules</source>
          <target state="translated">数値・数学モジュール</target>
        </trans-unit>
        <trans-unit id="bd54554f02877d81fe4bebfe90fa1408d8cb1959" translate="yes" xml:space="preserve">
          <source>Numeric code specifying the problem. This value can be passed to the &lt;a href=&quot;#xml.parsers.expat.ErrorString&quot;&gt;&lt;code&gt;ErrorString()&lt;/code&gt;&lt;/a&gt; function, or compared to one of the constants defined in the &lt;code&gt;errors&lt;/code&gt; object.</source>
          <target state="translated">問題を特定する数値コード。この値は、&lt;a href=&quot;#xml.parsers.expat.ErrorString&quot;&gt; &lt;code&gt;ErrorString()&lt;/code&gt; &lt;/a&gt;関数に渡すか、 &lt;code&gt;errors&lt;/code&gt; オブジェクトで定義されている定数の1つと比較できます。</target>
        </trans-unit>
        <trans-unit id="545ad8b75c0d30c78850cca48b34174137396861" translate="yes" xml:space="preserve">
          <source>Numeric conversion methods: &lt;code&gt;__complex__&lt;/code&gt;, &lt;code&gt;__int__&lt;/code&gt;, &lt;code&gt;__float__&lt;/code&gt; and &lt;code&gt;__index__&lt;/code&gt;</source>
          <target state="translated">数値変換メソッド： &lt;code&gt;__complex__&lt;/code&gt; 、 &lt;code&gt;__int__&lt;/code&gt; 、 &lt;code&gt;__float__&lt;/code&gt; および &lt;code&gt;__index__&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="871490f5f5a5ca6fd724e46e5e1c4d2eb2c25301" translate="yes" xml:space="preserve">
          <source>Numeric logging level for the message (&lt;code&gt;DEBUG&lt;/code&gt;, &lt;code&gt;INFO&lt;/code&gt;, &lt;code&gt;WARNING&lt;/code&gt;, &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;CRITICAL&lt;/code&gt;).</source>
          <target state="translated">メッセージの数値ログレベル（ &lt;code&gt;DEBUG&lt;/code&gt; 、 &lt;code&gt;INFO&lt;/code&gt; 、 &lt;code&gt;WARNING&lt;/code&gt; 、 &lt;code&gt;ERROR&lt;/code&gt; 、 &lt;code&gt;CRITICAL&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="3bd50801aaae4c7a3a8229dfe2023c97d0cb617c" translate="yes" xml:space="preserve">
          <source>Numeric value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8563a86b2e247948408ea7ca2751b301105c385" translate="yes" xml:space="preserve">
          <source>Numerical group ID</source>
          <target state="translated">数値グループID</target>
        </trans-unit>
        <trans-unit id="d6feb6b63e4e9dedb1044129659dca2566b3a4d5" translate="yes" xml:space="preserve">
          <source>Numerical overflow.</source>
          <target state="translated">数値オーバーフロー。</target>
        </trans-unit>
        <trans-unit id="504a627804ef772d9d97c9da6cc14b33a6e1fd94" translate="yes" xml:space="preserve">
          <source>Numerical underflow with result rounded to zero.</source>
          <target state="translated">結果がゼロに丸められた数値アンダーフロー</target>
        </trans-unit>
        <trans-unit id="dae105dbfe6ba9515db517e2c22306eaf168a3ed" translate="yes" xml:space="preserve">
          <source>Numerical user ID</source>
          <target state="translated">数値ユーザID</target>
        </trans-unit>
        <trans-unit id="08a914cde05039694ef0194d9ee79ff9a79dde33" translate="yes" xml:space="preserve">
          <source>O</source>
          <target state="translated">O</target>
        </trans-unit>
        <trans-unit id="b8e649f839ee53ebcae7841aed5eddf9904a43fd" translate="yes" xml:space="preserve">
          <source>O flag</source>
          <target state="translated">オーフラグ</target>
        </trans-unit>
        <trans-unit id="2081f9b4215b950149c134904322caba1359a7a3" translate="yes" xml:space="preserve">
          <source>OS exceptions</source>
          <target state="translated">OSの例外</target>
        </trans-unit>
        <trans-unit id="495dc72791fecbe14725db696ffa42ad8b5edf3d" translate="yes" xml:space="preserve">
          <source>OSError</source>
          <target state="translated">OSError</target>
        </trans-unit>
        <trans-unit id="70bc67f09c2b2fce50ddd07b8816ca72d8245a13" translate="yes" xml:space="preserve">
          <source>OSError.errno</source>
          <target state="translated">OSError.errno</target>
        </trans-unit>
        <trans-unit id="6b00a948ec3f45fe825b1d53b803425a17d2bac9" translate="yes" xml:space="preserve">
          <source>OSError.filename</source>
          <target state="translated">OSError.filename</target>
        </trans-unit>
        <trans-unit id="87b0b664ad8163e07f5f101b197e001d4dadefba" translate="yes" xml:space="preserve">
          <source>OSError.filename2</source>
          <target state="translated">OSError.filename2</target>
        </trans-unit>
        <trans-unit id="1d64b19f5dacbeca7d89e999fabefa0257b25308" translate="yes" xml:space="preserve">
          <source>OSError.strerror</source>
          <target state="translated">OSError.strerror</target>
        </trans-unit>
        <trans-unit id="1252f72b16eb4033e6a82e45191bc3fa864d0cf2" translate="yes" xml:space="preserve">
          <source>OSError.winerror</source>
          <target state="translated">OSError.winerror</target>
        </trans-unit>
        <trans-unit id="fec57e31aba99aafb11659a650fe7e717b5c39f8" translate="yes" xml:space="preserve">
          <source>Object connections</source>
          <target state="translated">オブジェクト接続</target>
        </trans-unit>
        <trans-unit id="ba195d654d6092a3e9da8ddd541dd8c15779615b" translate="yes" xml:space="preserve">
          <source>Object is remote</source>
          <target state="translated">オブジェクトはリモート</target>
        </trans-unit>
        <trans-unit id="59b64b94151b6c193b42629c8e0da5f27de1d3fe" translate="yes" xml:space="preserve">
          <source>Object serialization used by &lt;a href=&quot;#module-shelve&quot;&gt;&lt;code&gt;shelve&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#module-shelve&quot;&gt; &lt;code&gt;shelve&lt;/code&gt; で&lt;/a&gt;使用されるオブジェクトのシリアル化。</target>
        </trans-unit>
        <trans-unit id="94492e219ece2be2aab3f164513645039f660bea" translate="yes" xml:space="preserve">
          <source>Object that is equal to anything. Used to test mixed type comparison.</source>
          <target state="translated">何でも等しくなるオブジェクト。混合型比較のテストに使用します。</target>
        </trans-unit>
        <trans-unit id="f503d8f51f7ba310bf7f45e5162a8633bb6e9f0e" translate="yes" xml:space="preserve">
          <source>Object that is greater than anything (except itself). Used to test mixed type comparison.</source>
          <target state="translated">何よりも大きい(それ自身を除く)オブジェクト。混合型比較のテストに使用します。</target>
        </trans-unit>
        <trans-unit id="f0cd36b2dc674025e7e6b6873e4676f84304e54a" translate="yes" xml:space="preserve">
          <source>Object that is less than anything (except itself). Used to test mixed type comparison.</source>
          <target state="translated">何よりも小さい(それ自身を除く)オブジェクト。混合型比較のテストに使用します。</target>
        </trans-unit>
        <trans-unit id="723f3e7fedc35db64092babeaa58ef63cd3624a6" translate="yes" xml:space="preserve">
          <source>Object that when printed, prints the message &amp;ldquo;Type license() to see the full license text&amp;rdquo;, and when called, displays the full license text in a pager-like fashion (one screen at a time).</source>
          <target state="translated">印刷されると、「ライセンスを入力して完全なライセンステキストを表示してください」というメッセージを印刷し、呼び出されると、ポケットベルのような方法で（一度に1画面ずつ）完全なライセンステキストを表示するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="6f46d65c8d10b203bddd0e21c7c84db68306a018" translate="yes" xml:space="preserve">
          <source>Object which represents an entire document.</source>
          <target state="translated">ドキュメント全体を表すオブジェクト。</target>
        </trans-unit>
        <trans-unit id="7d97a7f0b05a173dd169071a9c7f47af3300ccc5" translate="yes" xml:space="preserve">
          <source>Object whose attributes correspond roughly to the members of the &lt;code&gt;stat&lt;/code&gt; structure. It is used for the result of &lt;a href=&quot;#os.stat&quot;&gt;&lt;code&gt;os.stat()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.fstat&quot;&gt;&lt;code&gt;os.fstat()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#os.lstat&quot;&gt;&lt;code&gt;os.lstat()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">属性が &lt;code&gt;stat&lt;/code&gt; 構造体のメンバーにほぼ対応するオブジェクト。&lt;a href=&quot;#os.stat&quot;&gt; &lt;code&gt;os.stat()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.fstat&quot;&gt; &lt;code&gt;os.fstat()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#os.lstat&quot;&gt; &lt;code&gt;os.lstat()&lt;/code&gt; &lt;/a&gt;の結果に使用されます。</target>
        </trans-unit>
        <trans-unit id="92ddc22b65e8b5b40d370242a415cbe437e1fb5b" translate="yes" xml:space="preserve">
          <source>Object yielded by &lt;a href=&quot;#os.scandir&quot;&gt;&lt;code&gt;scandir()&lt;/code&gt;&lt;/a&gt; to expose the file path and other file attributes of a directory entry.</source>
          <target state="translated">ディレクトリエントリのファイルパスとその他のファイル属性を公開するために&lt;a href=&quot;#os.scandir&quot;&gt; &lt;code&gt;scandir()&lt;/code&gt; &lt;/a&gt;によって生成されるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="b505394857cf752f097451f34e2de726a3519d1d" translate="yes" xml:space="preserve">
          <source>Object-oriented interface to dates and times with similar functionality to the &lt;a href=&quot;time#module-time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">&lt;a href=&quot;time#module-time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt;モジュールと同様の機能を持つ日付と時刻へのオブジェクト指向のインターフェース。</target>
        </trans-unit>
        <trans-unit id="0de0194dce47b55f786136e7ca5d1d1e84495b24" translate="yes" xml:space="preserve">
          <source>Objects implementing the &lt;a href=&quot;#http.cookiejar.CookiePolicy&quot;&gt;&lt;code&gt;CookiePolicy&lt;/code&gt;&lt;/a&gt; interface have the following methods:</source>
          <target state="translated">&lt;a href=&quot;#http.cookiejar.CookiePolicy&quot;&gt; &lt;code&gt;CookiePolicy&lt;/code&gt; &lt;/a&gt;インターフェースを実装するオブジェクトには、次のメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="d203b8faa0a194771d07d8e7b897dfd529a11dc3" translate="yes" xml:space="preserve">
          <source>Objects in the DOM</source>
          <target state="translated">DOM 内のオブジェクト</target>
        </trans-unit>
        <trans-unit id="1d2961eba3bc82e095ef8f99f120f340ffafacae" translate="yes" xml:space="preserve">
          <source>Objects instantiated from &lt;a href=&quot;#ctypes.c_char_p&quot;&gt;&lt;code&gt;c_char_p&lt;/code&gt;&lt;/a&gt; can only have their value set to bytes or integers.</source>
          <target state="translated">&lt;a href=&quot;#ctypes.c_char_p&quot;&gt; &lt;code&gt;c_char_p&lt;/code&gt; &lt;/a&gt;からインスタンス化されたオブジェクトは、値をバイトまたは整数にのみ設定できます。</target>
        </trans-unit>
        <trans-unit id="942293f86c9c554a7407c6e383f6fb514f2d3c50" translate="yes" xml:space="preserve">
          <source>Objects of different types, except different numeric types, never compare equal. The &lt;code&gt;==&lt;/code&gt; operator is always defined but for some object types (for example, class objects) is equivalent to &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#is&quot;&gt;&lt;code&gt;is&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;gt;=&lt;/code&gt; operators are only defined where they make sense; for example, they raise a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception when one of the arguments is a complex number.</source>
          <target state="translated">異なる数値型を除いて、異なる型のオブジェクトは決して等しく比較されません。 &lt;code&gt;==&lt;/code&gt; の演算子は常に定義されているが、いくつかのオブジェクトタイプに対して（例えば、クラス・オブジェクト）と等価です。 &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;=&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&lt;/code&gt; および &lt;code&gt;&amp;gt;=&lt;/code&gt; 彼らは理にかなっている事業者のみが定義されています。たとえば、引数の1つが複素数の場合、&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;例外が発生します。&lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#is&quot;&gt; &lt;code&gt;is&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="844eb425fd6afc3bee0d0b6028be8ef6772711e2" translate="yes" xml:space="preserve">
          <source>Objects of the &lt;a href=&quot;#datetime.date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; type are always naive.</source>
          <target state="translated">&lt;a href=&quot;#datetime.date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt;型のオブジェクトは常にナイーブです。</target>
        </trans-unit>
        <trans-unit id="bd7f72ab2249f983753a1d861db7908c8fcec575" translate="yes" xml:space="preserve">
          <source>Objects of these types are hashable, meaning that they can be used as dictionary keys.</source>
          <target state="translated">これらの型のオブジェクトはハッシュ化可能であり、辞書のキーとして使用できることを意味します。</target>
        </trans-unit>
        <trans-unit id="938221cef57f2475840b0471c4e70257edb6b048" translate="yes" xml:space="preserve">
          <source>Objects of these types are immutable.</source>
          <target state="translated">これらの型のオブジェクトは不変です。</target>
        </trans-unit>
        <trans-unit id="41b191879a423d793dfaba6e910a7801ce025caa" translate="yes" xml:space="preserve">
          <source>Objects of these types support efficient pickling via the &lt;a href=&quot;pickle#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">これらのタイプのオブジェクトは、&lt;a href=&quot;pickle#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt;モジュールを介した効率的な酸洗いをサポートします。</target>
        </trans-unit>
        <trans-unit id="5f93dcf2a529620bad38d87c650a52874fefbf22" translate="yes" xml:space="preserve">
          <source>Objects of this class cannot be used to represent timezone information in the locations where different offsets are used in different days of the year or where historical changes have been made to civil time.</source>
          <target state="translated">このクラスのオブジェクトは、年の異なる日に異なるオフセットが使用されている場所や、歴史的に市民時間が変更されている場所では、タイムゾーン情報を表現するために使用することはできません。</target>
        </trans-unit>
        <trans-unit id="214c213394b160163b319993661476db974e76ee" translate="yes" xml:space="preserve">
          <source>Objects returned by &lt;a href=&quot;#aifc.open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; when a file is opened for reading have the following methods:</source>
          <target state="translated">ファイルを読み取り用に開いたときに&lt;a href=&quot;#aifc.open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; が&lt;/a&gt;返すオブジェクトには、次のメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="657eae2282d6e60f1300aee5c59552435401221e" translate="yes" xml:space="preserve">
          <source>Objects returned by &lt;a href=&quot;#aifc.open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; when a file is opened for writing have all the above methods, except for &lt;code&gt;readframes()&lt;/code&gt; and &lt;code&gt;setpos()&lt;/code&gt;. In addition the following methods exist. The &lt;code&gt;get*()&lt;/code&gt; methods can only be called after the corresponding &lt;code&gt;set*()&lt;/code&gt; methods have been called. Before the first &lt;code&gt;writeframes()&lt;/code&gt; or &lt;code&gt;writeframesraw()&lt;/code&gt;, all parameters except for the number of frames must be filled in.</source>
          <target state="translated">ファイルが書き込み用に開かれたときに&lt;a href=&quot;#aifc.open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;によって返されるオブジェクトには、 &lt;code&gt;readframes()&lt;/code&gt; および &lt;code&gt;setpos()&lt;/code&gt; を除いて、上記のすべてのメソッドがあります。また、以下の方法があります。 &lt;code&gt;get*()&lt;/code&gt; メソッドは、対応する後に呼び出すことができます &lt;code&gt;set*()&lt;/code&gt; メソッドが呼び出されています。最初の &lt;code&gt;writeframes()&lt;/code&gt; または &lt;code&gt;writeframesraw()&lt;/code&gt; の前に、フレーム数を除くすべてのパラメータを入力する必要があります。</target>
        </trans-unit>
        <trans-unit id="89396d26028965648a3435a5a9a2e0de20223e3b" translate="yes" xml:space="preserve">
          <source>Objects such as modules and instances have an updateable &lt;a href=&quot;stdtypes#object.__dict__&quot;&gt;&lt;code&gt;__dict__&lt;/code&gt;&lt;/a&gt; attribute; however, other objects may have write restrictions on their &lt;a href=&quot;stdtypes#object.__dict__&quot;&gt;&lt;code&gt;__dict__&lt;/code&gt;&lt;/a&gt; attributes (for example, classes use a &lt;a href=&quot;types#types.MappingProxyType&quot;&gt;&lt;code&gt;types.MappingProxyType&lt;/code&gt;&lt;/a&gt; to prevent direct dictionary updates).</source>
          <target state="translated">モジュールやインスタンスなどのオブジェクトには、更新可能な&lt;a href=&quot;stdtypes#object.__dict__&quot;&gt; &lt;code&gt;__dict__&lt;/code&gt; &lt;/a&gt;属性があります。しかし、他のオブジェクトは、その上の書き込み制限があり&lt;a href=&quot;stdtypes#object.__dict__&quot;&gt; &lt;code&gt;__dict__&lt;/code&gt; &lt;/a&gt;（例えば、クラスが使用する属性を&lt;a href=&quot;types#types.MappingProxyType&quot;&gt; &lt;code&gt;types.MappingProxyType&lt;/code&gt; を&lt;/a&gt;直接辞書の更新を防ぐため）。</target>
        </trans-unit>
        <trans-unit id="24ddcc97acfc6e06b7be05736ede2846c52ff438" translate="yes" xml:space="preserve">
          <source>Objects that when printed or called, print the text of copyright or credits, respectively.</source>
          <target state="translated">印刷されたとき、または呼び出されたときに、それぞれ著作権やクレジットのテキストを印刷するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="6aee9caab0ea803614d4bdec33d7d17a13eeeb34" translate="yes" xml:space="preserve">
          <source>Objects that when printed, print a message like &amp;ldquo;Use quit() or Ctrl-D (i.e. EOF) to exit&amp;rdquo;, and when called, raise &lt;a href=&quot;exceptions#SystemExit&quot;&gt;&lt;code&gt;SystemExit&lt;/code&gt;&lt;/a&gt; with the specified exit code.</source>
          <target state="translated">印刷時に「quit（）またはCtrl-D（EOF）を使用して終了する」などのメッセージを印刷し、呼び出されたときに、指定された終了コードで&lt;a href=&quot;exceptions#SystemExit&quot;&gt; &lt;code&gt;SystemExit&lt;/code&gt; &lt;/a&gt;を発生させるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="317ff8c9afd265b37a084319109dd329ff7e9ee9" translate="yes" xml:space="preserve">
          <source>Objects to be configured are described by dictionaries which detail their configuration. In some places, the logging system will be able to infer from the context how an object is to be instantiated, but when a user-defined object is to be instantiated, the system will not know how to do this. In order to provide complete flexibility for user-defined object instantiation, the user needs to provide a &amp;lsquo;factory&amp;rsquo; - a callable which is called with a configuration dictionary and which returns the instantiated object. This is signalled by an absolute import path to the factory being made available under the special key &lt;code&gt;'()'&lt;/code&gt;. Here&amp;rsquo;s a concrete example:</source>
          <target state="translated">設定されるオブジェクトは、設定を詳述する辞書によって記述されます。一部の場所では、ロギングシステムはオブジェクトをインスタンス化する方法をコンテキストから推測できますが、ユーザー定義オブジェクトをインスタンス化する場合、システムはこれを行う方法を認識しません。ユーザー定義のオブジェクトのインスタンス化に完全な柔軟性を提供するために、ユーザーは「ファクトリー」を提供する必要があります。これは、構成辞書で呼び出され、インスタンス化されたオブジェクトを返す呼び出し可能オブジェクトです。これは、特別なキー &lt;code&gt;'()'&lt;/code&gt; で使用できるようにされているファクトリへの絶対インポートパスによって示されます。具体的な例を次に示します。</target>
        </trans-unit>
        <trans-unit id="c09d2d2576e2197a44808fdb59140b84b2d6ab6c" translate="yes" xml:space="preserve">
          <source>Objects with this interface are used to receive error and warning information from the &lt;a href=&quot;xml.sax.reader#xml.sax.xmlreader.XMLReader&quot;&gt;&lt;code&gt;XMLReader&lt;/code&gt;&lt;/a&gt;. If you create an object that implements this interface, then register the object with your &lt;a href=&quot;xml.sax.reader#xml.sax.xmlreader.XMLReader&quot;&gt;&lt;code&gt;XMLReader&lt;/code&gt;&lt;/a&gt;, the parser will call the methods in your object to report all warnings and errors. There are three levels of errors available: warnings, (possibly) recoverable errors, and unrecoverable errors. All methods take a &lt;code&gt;SAXParseException&lt;/code&gt; as the only parameter. Errors and warnings may be converted to an exception by raising the passed-in exception object.</source>
          <target state="translated">このインターフェイスを持つオブジェクトは、&lt;a href=&quot;xml.sax.reader#xml.sax.xmlreader.XMLReader&quot;&gt; &lt;code&gt;XMLReader&lt;/code&gt; &lt;/a&gt;からエラーおよび警告情報を受け取るために使用されます。このインターフェイスを実装するオブジェクトを作成し、そのオブジェクトを&lt;a href=&quot;xml.sax.reader#xml.sax.xmlreader.XMLReader&quot;&gt; &lt;code&gt;XMLReader&lt;/code&gt; に&lt;/a&gt;登録すると、パーサーはオブジェクトのメソッドを呼び出して、すべての警告とエラーを報告します。利用可能なエラーには、警告、（おそらく）回復可能なエラー、回復不可能なエラーの3つのレベルがあります。すべてのメソッドは &lt;code&gt;SAXParseException&lt;/code&gt; を唯一のパラメーターとして受け取ります。エラーと警告は、渡された例外オブジェクトを発生させることによって例外に変換できます。</target>
        </trans-unit>
        <trans-unit id="0ffd090521623011161357dcee2bcb6fbdee8700" translate="yes" xml:space="preserve">
          <source>Obsolete type &amp;ndash; it is identical to &lt;code&gt;'d'&lt;/code&gt;.</source>
          <target state="translated">廃止されたタイプ&amp;ndash; &lt;code&gt;'d'&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="b63bbfd86cfd7432e9f0106c88858984af190c93" translate="yes" xml:space="preserve">
          <source>Obsoleted by &lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt;. Uses &lt;em&gt;Set-Cookie&lt;/em&gt; with version=1.</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt;により廃止。使用&lt;em&gt;するSet-Cookieを&lt;/em&gt;バージョン= 1と。</target>
        </trans-unit>
        <trans-unit id="3f55ca62e4ccae40aeb50a0b093437b18720a007" translate="yes" xml:space="preserve">
          <source>Obtaining the Event Loop</source>
          <target state="translated">イベントループの取得</target>
        </trans-unit>
        <trans-unit id="4f99bb290b9222ef321b66eb0aabb138fcf03891" translate="yes" xml:space="preserve">
          <source>Occasionally, it may be useful to disable the addition of this help option. This can be achieved by passing &lt;code&gt;False&lt;/code&gt; as the &lt;code&gt;add_help=&lt;/code&gt; argument to &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">このヘルプオプションの追加を無効にすると便利な場合があります。これは、&lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;add_help=&lt;/code&gt; 引数として &lt;code&gt;False&lt;/code&gt; を渡すことで実現できます。</target>
        </trans-unit>
        <trans-unit id="126a6d3a842a574897ac64e80b2a2f96ded4709a" translate="yes" xml:space="preserve">
          <source>Occurs when a subnormal result is pushed to zero by rounding. &lt;a href=&quot;#decimal.Inexact&quot;&gt;&lt;code&gt;Inexact&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#decimal.Subnormal&quot;&gt;&lt;code&gt;Subnormal&lt;/code&gt;&lt;/a&gt; are also signaled.</source>
          <target state="translated">丸めによって非正規の結果がゼロにプッシュされると発生します。&lt;a href=&quot;#decimal.Inexact&quot;&gt; &lt;code&gt;Inexact&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#decimal.Subnormal&quot;&gt; &lt;code&gt;Subnormal&lt;/code&gt; &lt;/a&gt;も通知されます。</target>
        </trans-unit>
        <trans-unit id="1d2ba6a8e415086f99e2740841ad13a25c9e365c" translate="yes" xml:space="preserve">
          <source>Occurs when an operation result is subnormal (the exponent is too small). If not trapped, returns the result unchanged.</source>
          <target state="translated">演算結果が亜正規(指数が小さすぎる)の場合に発生します。トラップされていない場合、結果は変更されずに返されます。</target>
        </trans-unit>
        <trans-unit id="8b690fa09f4c5b0f36d26f6bb8267ab0f5b1a04e" translate="yes" xml:space="preserve">
          <source>Octal escapes are included in a limited form. If the first digit is a 0, or if there are three octal digits, it is considered an octal escape. Otherwise, it is a group reference. As for string literals, octal escapes are always at most three digits in length.</source>
          <target state="translated">八進数エスケープは限られた形で含まれています。最初の桁が0である場合、または8進数が3桁ある場合は、8進数エスケープとみなされます。それ以外の場合はグループ参照です。文字列リテラルに関しては、八進数エスケープは常に最大でも3桁の長さになります。</target>
        </trans-unit>
        <trans-unit id="e48a55708577c922dfe1c8727c5015fe59dcd19c" translate="yes" xml:space="preserve">
          <source>Octal format. Outputs the number in base 8.</source>
          <target state="translated">8進数形式。8進数で出力します。</target>
        </trans-unit>
        <trans-unit id="0c41c8a61bc16d4027683f8db82ba66479208909" translate="yes" xml:space="preserve">
          <source>Of course, as email has been deployed worldwide, it has become internationalized, such that language specific character sets can now be used in email messages. The base standard still requires email messages to be transferred using only 7-bit ASCII characters, so a slew of RFCs have been written describing how to encode email containing non-ASCII characters into &lt;a href=&quot;https://tools.ietf.org/html/rfc2822.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 2822&lt;/strong&gt;&lt;/a&gt;-compliant format. These RFCs include &lt;a href=&quot;https://tools.ietf.org/html/rfc2045.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 2045&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://tools.ietf.org/html/rfc2046.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 2046&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://tools.ietf.org/html/rfc2047.html&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;RFC 2047&lt;/strong&gt;&lt;/a&gt;, and &lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt;. The &lt;a href=&quot;email#module-email&quot;&gt;&lt;code&gt;email&lt;/code&gt;&lt;/a&gt; package supports these standards in its &lt;a href=&quot;#module-email.header&quot;&gt;&lt;code&gt;email.header&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;email.charset#module-email.charset&quot;&gt;&lt;code&gt;email.charset&lt;/code&gt;&lt;/a&gt; modules.</source>
          <target state="translated">もちろん、電子メールは世界中に配備されているため、国際化され、言語固有の文字セットを電子メールメッセージで使用できるようになりました。基本標準では、依然として7ビットASCII文字のみを使用して電子メールメッセージを転送する必要があるため、非ASCII文字を含む電子メールを&lt;a href=&quot;https://tools.ietf.org/html/rfc2822.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 2822&lt;/strong&gt;&lt;/a&gt;準拠の形式にエンコードする方法を説明する多数のRFCが記述されています。これらのRFCには、&lt;a href=&quot;https://tools.ietf.org/html/rfc2045.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 2045&lt;/strong&gt;&lt;/a&gt;、&lt;a href=&quot;https://tools.ietf.org/html/rfc2046.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 2046&lt;/strong&gt;&lt;/a&gt;、&lt;a href=&quot;https://tools.ietf.org/html/rfc2047.html&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;RFC 2047&lt;/strong&gt;&lt;/a&gt;、および&lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;RFC 2231が含まれ&lt;/strong&gt;&lt;/a&gt;ます。&lt;a href=&quot;email#module-email&quot;&gt; &lt;code&gt;email&lt;/code&gt; &lt;/a&gt;パッケージは、その中で、これらの規格をサポートしてい&lt;a href=&quot;#module-email.header&quot;&gt; &lt;code&gt;email.header&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;email.charset#module-email.charset&quot;&gt; &lt;code&gt;email.charset&lt;/code&gt; &lt;/a&gt;モジュール。</target>
        </trans-unit>
        <trans-unit id="2afb4718d7f7d394f419ceafea003a6616573fac" translate="yes" xml:space="preserve">
          <source>Of course, the dictionary printed will include all the options available and their values. This is meant only as an example.</source>
          <target state="translated">もちろん、印刷される辞書には、利用可能なすべてのオプションとその値が含まれます。これはあくまでも一例です。</target>
        </trans-unit>
        <trans-unit id="57957486097ed91a113e640adfd8aa89098b3192" translate="yes" xml:space="preserve">
          <source>Of course, tokens will be returned which are not valid for shells, and you&amp;rsquo;ll need to implement your own error checks on the returned tokens.</source>
          <target state="translated">もちろん、シェルには無効なトークンが返されます。返されたトークンに独自のエラーチェックを実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="8d96c2d35a34921bbc473cf1f63f5c7f7ce87d37" translate="yes" xml:space="preserve">
          <source>Of course, you still have to use your head! For instance, it makes no sense to use a forking server if the service contains state in memory that can be modified by different requests, since the modifications in the child process would never reach the initial state kept in the parent process and passed to each child. In this case, you can use a threading server, but you will probably have to use locks to protect the integrity of the shared data.</source>
          <target state="translated">もちろん、まだ頭を使わなければなりません! 例えば、サービスが異なるリクエストによって変更される可能性のある状態をメモリに含んでいる場合、フォークサーバを使うことは意味がありません。この場合、スレッディングサーバを使うことができますが、共有データの整合性を保護するためにロックを使わなければならないでしょう。</target>
        </trans-unit>
        <trans-unit id="a189e90de7a831a297990fcc13eed8180febeaaf" translate="yes" xml:space="preserve">
          <source>Of the following list, symbols that are not used on the current platform are not defined by the module. The specific list of defined symbols is available as &lt;code&gt;errno.errorcode.keys()&lt;/code&gt;. Symbols available can include:</source>
          <target state="translated">次のリストの中で、現在のプラットフォームで使用されていないシンボルは、モジュールによって定義されていません。定義されたシンボルの特定のリストは、 &lt;code&gt;errno.errorcode.keys()&lt;/code&gt; として入手できます。使用可能な記号には次のものがあります。</target>
        </trans-unit>
        <trans-unit id="d6d3eaaecea9032e886e0354de8e806c271d885c" translate="yes" xml:space="preserve">
          <source>Official BLAKE2 website.</source>
          <target state="translated">BLAKE2公式サイト。</target>
        </trans-unit>
        <trans-unit id="ce667716547fa82bc8795ad7ef205e9410193ed0" translate="yes" xml:space="preserve">
          <source>Offset</source>
          <target state="translated">Offset</target>
        </trans-unit>
        <trans-unit id="db094d4468a2312d7105c1d93cf46de84f4525c2" translate="yes" xml:space="preserve">
          <source>Often the private key is stored in the same file as the certificate; in this case, only the &lt;code&gt;certfile&lt;/code&gt; parameter to &lt;a href=&quot;#ssl.SSLContext.load_cert_chain&quot;&gt;&lt;code&gt;SSLContext.load_cert_chain()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ssl.wrap_socket&quot;&gt;&lt;code&gt;wrap_socket()&lt;/code&gt;&lt;/a&gt; needs to be passed. If the private key is stored with the certificate, it should come before the first certificate in the certificate chain:</source>
          <target state="translated">多くの場合、秘密鍵は証明書と同じファイルに保存されます。この場合、&lt;a href=&quot;#ssl.SSLContext.load_cert_chain&quot;&gt; &lt;code&gt;SSLContext.load_cert_chain()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#ssl.wrap_socket&quot;&gt; &lt;code&gt;wrap_socket()&lt;/code&gt; &lt;/a&gt;への &lt;code&gt;certfile&lt;/code&gt; パラメータのみを渡す必要があります。秘密キーが証明書と共に保存されている場合、それは証明書チェーンの最初の証明書の前にある必要があります。</target>
        </trans-unit>
        <trans-unit id="fbb3c38f7157933f1410deccc0c0bd46be6786fa" translate="yes" xml:space="preserve">
          <source>Old</source>
          <target state="translated">Old</target>
        </trans-unit>
        <trans-unit id="b921270420b7b08f1568f831c3397e52a38fa523" translate="yes" xml:space="preserve">
          <source>Old cookies are kept unless overwritten by newly loaded ones.</source>
          <target state="translated">古いクッキーは、新たに読み込まれたクッキーで上書きされない限り保持されます。</target>
        </trans-unit>
        <trans-unit id="7314a38341e89f90dcb4e508f3c78058527250f6" translate="yes" xml:space="preserve">
          <source>Old getter/setter API for &lt;a href=&quot;#threading.Thread.daemon&quot;&gt;&lt;code&gt;daemon&lt;/code&gt;&lt;/a&gt;; use it directly as a property instead.</source>
          <target state="translated">&lt;a href=&quot;#threading.Thread.daemon&quot;&gt; &lt;code&gt;daemon&lt;/code&gt; &lt;/a&gt;古いゲッター/セッターAPI 。代わりに、プロパティとして直接使用してください。</target>
        </trans-unit>
        <trans-unit id="c7dbcb06ab05ba98c6ef08633aa445b5c4081b42" translate="yes" xml:space="preserve">
          <source>Old getter/setter API for &lt;a href=&quot;#threading.Thread.name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;; use it directly as a property instead.</source>
          <target state="translated">&lt;a href=&quot;#threading.Thread.name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;古いゲッター/セッターAPI ; 代わりに、プロパティとして直接使用してください。</target>
        </trans-unit>
        <trans-unit id="a430408287831c43c01068e431ced99daedf6248" translate="yes" xml:space="preserve">
          <source>Older SQLite versions had issues with sharing connections between threads. That&amp;rsquo;s why the Python module disallows sharing connections and cursors between threads. If you still try to do so, you will get an exception at runtime.</source>
          <target state="translated">古いSQLiteバージョンには、スレッド間の接続の共有に関する問題がありました。そのため、Pythonモジュールはスレッド間での接続とカーソルの共有を許可していません。それでも実行しようとすると、実行時に例外が発生します。</target>
        </trans-unit>
        <trans-unit id="b798a5717d947276e99cddcb457e1602f3cac8b9" translate="yes" xml:space="preserve">
          <source>Older high-level API</source>
          <target state="translated">古い高レベルAPI</target>
        </trans-unit>
        <trans-unit id="6b7df62ceb94ab7be4fe94caa4bfa594c93034e1" translate="yes" xml:space="preserve">
          <source>Omitting values</source>
          <target state="translated">値の省略</target>
        </trans-unit>
        <trans-unit id="1bb81bb7fe8c54a984481046ff452e9ec4cda5b2" translate="yes" xml:space="preserve">
          <source>On Android or in the UTF-8 mode (&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id5&quot;&gt;&lt;code&gt;-X&lt;/code&gt;&lt;/a&gt;&lt;code&gt;utf8&lt;/code&gt; option), always return &lt;code&gt;'UTF-8'&lt;/code&gt;, the locale and the &lt;em&gt;do_setlocale&lt;/em&gt; argument are ignored.</source>
          <target state="translated">AndroidまたはUTF-8モード（&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id5&quot;&gt; &lt;code&gt;-X&lt;/code&gt; &lt;/a&gt; &lt;code&gt;utf8&lt;/code&gt; オプション）では、常に &lt;code&gt;'UTF-8'&lt;/code&gt; を返します。ロケールと&lt;em&gt;do_setlocale&lt;/em&gt;引数は無視されます。</target>
        </trans-unit>
        <trans-unit id="d4464bd203731f640095d017614727a2ce8882aa" translate="yes" xml:space="preserve">
          <source>On Android, the encoding is &lt;code&gt;'utf-8'&lt;/code&gt;.</source>
          <target state="translated">Androidでは、エンコーディングは &lt;code&gt;'utf-8'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="cdac50d7ab041ede3970502d373d1b546c0fc224" translate="yes" xml:space="preserve">
          <source>On BSD systems (macOS, FreeBSD, etc.) flow control is not supported for datagram protocols, because there is no reliable way to detect send failures caused by writing too many packets.</source>
          <target state="translated">BSD システム (macOS,FreeBSD など)では、データグラムプロトコルではフロー制御はサポートされていません。 なぜなら、パケットの書きすぎによる送信失敗を検出する信頼できる方法がないからです。</target>
        </trans-unit>
        <trans-unit id="5df68af755b4ca9998915a72600b113ea0a954b4" translate="yes" xml:space="preserve">
          <source>On Linux &lt;a href=&quot;os#os.sendfile&quot;&gt;&lt;code&gt;os.sendfile()&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">Linuxでは&lt;a href=&quot;os#os.sendfile&quot;&gt; &lt;code&gt;os.sendfile()&lt;/code&gt; &lt;/a&gt;が使用されます。</target>
        </trans-unit>
        <trans-unit id="b894a54ac738054398c257505814cbf2c23a93f5" translate="yes" xml:space="preserve">
          <source>On Linux, &lt;code&gt;find_library()&lt;/code&gt; tries to run external programs (&lt;code&gt;/sbin/ldconfig&lt;/code&gt;, &lt;code&gt;gcc&lt;/code&gt;, &lt;code&gt;objdump&lt;/code&gt; and &lt;code&gt;ld&lt;/code&gt;) to find the library file. It returns the filename of the library file.</source>
          <target state="translated">Linuxでは、 &lt;code&gt;find_library()&lt;/code&gt; は外部プログラム（ &lt;code&gt;/sbin/ldconfig&lt;/code&gt; 、 &lt;code&gt;gcc&lt;/code&gt; 、 &lt;code&gt;objdump&lt;/code&gt; および &lt;code&gt;ld&lt;/code&gt; ）を実行してライブラリファイルを見つけようとします。ライブラリファイルのファイル名を返します。</target>
        </trans-unit>
        <trans-unit id="b7f5823f8fbd988d636ff83e069f2a210239fdad" translate="yes" xml:space="preserve">
          <source>On Linux, if &lt;em&gt;offset&lt;/em&gt; is given as &lt;code&gt;None&lt;/code&gt;, the bytes are read from the current position of &lt;em&gt;in&lt;/em&gt; and the position of &lt;em&gt;in&lt;/em&gt; is updated.</source>
          <target state="translated">場合Linuxでは、&lt;em&gt;オフセットが&lt;/em&gt;として与えられ &lt;code&gt;None&lt;/code&gt; 、バイトは現在の位置から読み込まれ&lt;em&gt;内&lt;/em&gt;の位置&lt;em&gt;に&lt;/em&gt;更新されます。</target>
        </trans-unit>
        <trans-unit id="e281758369d3e3022dacf8f57e2fcc73ab4a776b" translate="yes" xml:space="preserve">
          <source>On Linux, if the &lt;code&gt;getrandom()&lt;/code&gt; syscall is available, it is used in blocking mode: block until the system urandom entropy pool is initialized (128 bits of entropy are collected by the kernel). See the &lt;a href=&quot;https://www.python.org/dev/peps/pep-0524&quot; id=&quot;index-45&quot;&gt;&lt;strong&gt;PEP 524&lt;/strong&gt;&lt;/a&gt; for the rationale. On Linux, the &lt;a href=&quot;#os.getrandom&quot;&gt;&lt;code&gt;getrandom()&lt;/code&gt;&lt;/a&gt; function can be used to get random bytes in non-blocking mode (using the &lt;a href=&quot;#os.GRND_NONBLOCK&quot;&gt;&lt;code&gt;GRND_NONBLOCK&lt;/code&gt;&lt;/a&gt; flag) or to poll until the system urandom entropy pool is initialized.</source>
          <target state="translated">Linuxでは、 &lt;code&gt;getrandom()&lt;/code&gt; syscallが使用可能な場合、それはブロッキングモードで使用されます。システムのランダムエントロピープールが初期化されるまでブロックします（カーネルによって128ビットのエントロピーが収集されます）。根拠については、&lt;a href=&quot;https://www.python.org/dev/peps/pep-0524&quot; id=&quot;index-45&quot;&gt;&lt;strong&gt;PEP 524&lt;/strong&gt;&lt;/a&gt;を参照してください。Linuxでは、&lt;a href=&quot;#os.getrandom&quot;&gt; &lt;code&gt;getrandom()&lt;/code&gt; &lt;/a&gt;関数を使用して、ノンブロッキングモードでランダムなバイトを取得（&lt;a href=&quot;#os.GRND_NONBLOCK&quot;&gt; &lt;code&gt;GRND_NONBLOCK&lt;/code&gt; &lt;/a&gt;フラグを使用）したり、システムのランダムエントロピープールが初期化されるまでポーリングしたりできます。</target>
        </trans-unit>
        <trans-unit id="34356f543169215adf877047fe8fe6de6815c500" translate="yes" xml:space="preserve">
          <source>On Linux, it is required to specify the filename &lt;em&gt;including&lt;/em&gt; the extension to load a library, so attribute access can not be used to load libraries. Either the &lt;code&gt;LoadLibrary()&lt;/code&gt; method of the dll loaders should be used, or you should load the library by creating an instance of CDLL by calling the constructor:</source>
          <target state="translated">Linuxでは、ライブラリをロードするために拡張子を&lt;em&gt;含む&lt;/em&gt;ファイル名&lt;em&gt;を&lt;/em&gt;指定する必要があるため、属性のアクセスを使用してライブラリをロードすることはできません。dllローダーの &lt;code&gt;LoadLibrary()&lt;/code&gt; メソッドを使用するか、コンストラクターを呼び出してCDLLのインスタンスを作成してライブラリをロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="dc1364db7c80f222c6aa60a25008da922cb7a7e1" translate="yes" xml:space="preserve">
          <source>On Mac OS X (and perhaps other platforms), executable files may be universal files containing multiple architectures.</source>
          <target state="translated">Mac OS X(およびおそらく他のプラットフォーム)では、実行可能ファイルは複数のアーキテクチャを含むユニバーサルファイルである可能性があります。</target>
        </trans-unit>
        <trans-unit id="f3005d61cb9e9c1da2b366641dda8f652e63e021" translate="yes" xml:space="preserve">
          <source>On Mac OS X and FreeBSD, a value of 0 for &lt;em&gt;count&lt;/em&gt; specifies to send until the end of &lt;em&gt;in&lt;/em&gt; is reached.</source>
          <target state="translated">Mac OS XおよびFreeBSDでは、&lt;em&gt;countの&lt;/em&gt;値が0の場合は、&lt;em&gt;in&lt;/em&gt;の終わりに達するまで送信することを指定します。</target>
        </trans-unit>
        <trans-unit id="47c284398b02650696dc28bb5b5b1f62ce624525" translate="yes" xml:space="preserve">
          <source>On Mac OS X, &lt;a href=&quot;#os.getgroups&quot;&gt;&lt;code&gt;getgroups()&lt;/code&gt;&lt;/a&gt; behavior differs somewhat from other Unix platforms. If the Python interpreter was built with a deployment target of &lt;code&gt;10.5&lt;/code&gt; or earlier, &lt;a href=&quot;#os.getgroups&quot;&gt;&lt;code&gt;getgroups()&lt;/code&gt;&lt;/a&gt; returns the list of effective group ids associated with the current user process; this list is limited to a system-defined number of entries, typically 16, and may be modified by calls to &lt;a href=&quot;#os.setgroups&quot;&gt;&lt;code&gt;setgroups()&lt;/code&gt;&lt;/a&gt; if suitably privileged. If built with a deployment target greater than &lt;code&gt;10.5&lt;/code&gt;, &lt;a href=&quot;#os.getgroups&quot;&gt;&lt;code&gt;getgroups()&lt;/code&gt;&lt;/a&gt; returns the current group access list for the user associated with the effective user id of the process; the group access list may change over the lifetime of the process, it is not affected by calls to &lt;a href=&quot;#os.setgroups&quot;&gt;&lt;code&gt;setgroups()&lt;/code&gt;&lt;/a&gt;, and its length is not limited to 16. The deployment target value, &lt;code&gt;MACOSX_DEPLOYMENT_TARGET&lt;/code&gt;, can be obtained with &lt;a href=&quot;sysconfig#sysconfig.get_config_var&quot;&gt;&lt;code&gt;sysconfig.get_config_var()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Mac OS Xでは、&lt;a href=&quot;#os.getgroups&quot;&gt; &lt;code&gt;getgroups()&lt;/code&gt; の&lt;/a&gt;動作は他のUnixプラットフォームとは多少異なります。 Pythonインタープリターが &lt;code&gt;10.5&lt;/code&gt; 以前のデプロイメントターゲットでビルドされた場合、&lt;a href=&quot;#os.getgroups&quot;&gt; &lt;code&gt;getgroups()&lt;/code&gt; &lt;/a&gt;は現在のユーザープロセスに関連付けられた有効なグループIDのリストを返します。このリストは、システム定義のエントリ数（通常は16）に制限されており、適切な特権があれば、&lt;a href=&quot;#os.setgroups&quot;&gt; &lt;code&gt;setgroups()&lt;/code&gt; の&lt;/a&gt;呼び出しによって変更できます。 &lt;code&gt;10.5&lt;/code&gt; より大きい配備ターゲットでビルドされた場合、&lt;a href=&quot;#os.getgroups&quot;&gt; &lt;code&gt;getgroups()&lt;/code&gt; &lt;/a&gt;は、プロセスの実効ユーザーIDに関連付けられたユーザーの現在のグループアクセスリストを返します。グループアクセスリストはプロセスの存続期間中に変更される可能性があり、&lt;a href=&quot;#os.setgroups&quot;&gt; &lt;code&gt;setgroups()&lt;/code&gt; &lt;/a&gt;への呼び出しの影響を受けません、およびその長さは16に制限されていません。展開ターゲット値 &lt;code&gt;MACOSX_DEPLOYMENT_TARGET&lt;/code&gt; は、&lt;a href=&quot;sysconfig#sysconfig.get_config_var&quot;&gt; &lt;code&gt;sysconfig.get_config_var()&lt;/code&gt; で&lt;/a&gt;取得できます。</target>
        </trans-unit>
        <trans-unit id="6be300bd70052f23a866a27939e3f7e700d243e4" translate="yes" xml:space="preserve">
          <source>On Mac OS X, &lt;code&gt;sem_timedwait&lt;/code&gt; is unsupported, so calling &lt;code&gt;acquire()&lt;/code&gt; with a timeout will emulate that function&amp;rsquo;s behavior using a sleeping loop.</source>
          <target state="translated">Mac OS Xでは、 &lt;code&gt;sem_timedwait&lt;/code&gt; はサポートされていないため、タイムアウトを指定して &lt;code&gt;acquire()&lt;/code&gt; を呼び出すと、スリープループを使用してその関数の動作がエミュレートされます。</target>
        </trans-unit>
        <trans-unit id="02ec16ecfd2b354d814f70d8478dc9a7f0630d5a" translate="yes" xml:space="preserve">
          <source>On Mac OS X, the length of &lt;em&gt;groups&lt;/em&gt; may not exceed the system-defined maximum number of effective group ids, typically 16. See the documentation for &lt;a href=&quot;#os.getgroups&quot;&gt;&lt;code&gt;getgroups()&lt;/code&gt;&lt;/a&gt; for cases where it may not return the same group list set by calling setgroups().</source>
          <target state="translated">Mac OS Xでは、&lt;em&gt;グループ&lt;/em&gt;の長さは、システム定義の有効なグループIDの最大数（通常は16 &lt;a href=&quot;#os.getgroups&quot;&gt; &lt;code&gt;getgroups()&lt;/code&gt; &lt;/a&gt;を超えることはできません。setgroups（）を呼び出しても同じグループリストセットが返されない場合は、getgroups（）のドキュメントを参照してください。。</target>
        </trans-unit>
        <trans-unit id="d466ddfea82165c6998d2732d0fd966668af8aa8" translate="yes" xml:space="preserve">
          <source>On Mac OS X, this is indistinguishable from &lt;a href=&quot;#multiprocessing.Semaphore&quot;&gt;&lt;code&gt;Semaphore&lt;/code&gt;&lt;/a&gt; because &lt;code&gt;sem_getvalue()&lt;/code&gt; is not implemented on that platform.</source>
          <target state="translated">Mac OS Xでは、 &lt;code&gt;sem_getvalue()&lt;/code&gt; がそのプラットフォームに実装されていないため、これは&lt;a href=&quot;#multiprocessing.Semaphore&quot;&gt; &lt;code&gt;Semaphore&lt;/code&gt; &lt;/a&gt;と区別できません。</target>
        </trans-unit>
        <trans-unit id="80a13c286aa16dd15254ee11f8acc93c6967fcac" translate="yes" xml:space="preserve">
          <source>On Mac OS systems, the following attributes may also be available:</source>
          <target state="translated">Mac OS システムでは、以下の属性も利用可能な場合があります。</target>
        </trans-unit>
        <trans-unit id="a1d8d30d955ec9defda1be84eda85bc8070a5a55" translate="yes" xml:space="preserve">
          <source>On MacOS X, toplevel windows automatically include a built-in size grip by default. Adding a &lt;code&gt;Sizegrip&lt;/code&gt; is harmless, since the built-in grip will just mask the widget.</source>
          <target state="translated">MacOS Xでは、トップレベルウィンドウにデフォルトで組み込みサイズグリップが自動的に含まれます。組み込みグリップはウィジェットをマスクするだけなので、 &lt;code&gt;Sizegrip&lt;/code&gt; グリップを追加しても問題はありません。</target>
        </trans-unit>
        <trans-unit id="047a505ac3a0bde5924ac34403621b5a7b16f3e7" translate="yes" xml:space="preserve">
          <source>On OS X, &lt;code&gt;find_library()&lt;/code&gt; tries several predefined naming schemes and paths to locate the library, and returns a full pathname if successful:</source>
          <target state="translated">OS Xでは、 &lt;code&gt;find_library()&lt;/code&gt; は事前定義されたいくつかの命名方式とパスを試行してライブラリを見つけ、成功した場合は完全なパス名を返します。</target>
        </trans-unit>
        <trans-unit id="ee3adeb42a6773c0b5a1d764561ba1bd5f6e5c81" translate="yes" xml:space="preserve">
          <source>On OpenSSL 1.1 and newer the cipher dict contains additional fields:</source>
          <target state="translated">OpenSSL 1.1 以降では、暗号文には追加のフィールドが含まれています。</target>
        </trans-unit>
        <trans-unit id="80e86175144551edf0014fe20868235165756774" translate="yes" xml:space="preserve">
          <source>On POSIX platforms the &lt;code&gt;SO_REUSEADDR&lt;/code&gt; socket option is set in order to immediately reuse previous sockets which were bound on the same &lt;em&gt;address&lt;/em&gt; and remained in TIME_WAIT state.</source>
          <target state="translated">POSIXプラットフォームでは、 &lt;code&gt;SO_REUSEADDR&lt;/code&gt; ソケットオプションが設定され、同じ&lt;em&gt;アドレスに&lt;/em&gt;バインドされ、TIME_WAIT状態のままであった以前のソケットをすぐに再利用します。</target>
        </trans-unit>
        <trans-unit id="14c00f7063151de1165f655a6bb2db8b60c068aa" translate="yes" xml:space="preserve">
          <source>On POSIX platforms, this means that file owner and group are lost as well as ACLs. On Mac OS, the resource fork and other metadata are not used. This means that resources will be lost and file type and creator codes will not be correct. On Windows, file owners, ACLs and alternate data streams are not copied.</source>
          <target state="translated">POSIXプラットフォームでは、ACLと同様にファイルの所有者やグループが失われることを意味します。Mac OSでは、リソースフォークなどのメタデータが使用されません。これは、リソースが失われ、ファイルタイプとクリエータコードが正しくないことを意味します。Windowsでは、ファイルの所有者、ACL、代替データストリームはコピーされません。</target>
        </trans-unit>
        <trans-unit id="15ae7630db2b82bcf652d24e44fe7ab4a0226a3d" translate="yes" xml:space="preserve">
          <source>On POSIX systems this method sends &lt;code&gt;SIGKILL&lt;/code&gt; to the child process.</source>
          <target state="translated">POSIXシステムでは、このメソッドは &lt;code&gt;SIGKILL&lt;/code&gt; を子プロセスに送信します。</target>
        </trans-unit>
        <trans-unit id="7eefcbd33acff5f55854147162274a89ed80a85f" translate="yes" xml:space="preserve">
          <source>On POSIX systems this method sends &lt;code&gt;signal.SIGTERM&lt;/code&gt; to the child process.</source>
          <target state="translated">POSIXシステムでは、このメソッドは &lt;code&gt;signal.SIGTERM&lt;/code&gt; を子プロセスに送信します。</target>
        </trans-unit>
        <trans-unit id="d0ff6ad8e999cc10f48eff5c76d5f2a7188b214a" translate="yes" xml:space="preserve">
          <source>On POSIX systems where Python was built with the standard &lt;code&gt;configure&lt;/code&gt; script, this contains the ABI flags as specified by &lt;a href=&quot;https://www.python.org/dev/peps/pep-3149&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 3149&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">Pythonが標準の &lt;code&gt;configure&lt;/code&gt; スクリプトで構築されたPOSIXシステムでは、これには&lt;a href=&quot;https://www.python.org/dev/peps/pep-3149&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 3149で&lt;/strong&gt;&lt;/a&gt;指定されているABIフラグが含まれています。</target>
        </trans-unit>
        <trans-unit id="b236dd13a030ed94e044d584c2fe8291e71001b9" translate="yes" xml:space="preserve">
          <source>On POSIX systems, the function sends SIGKILL to the subprocess. On Windows, this method is an alias for &lt;a href=&quot;#asyncio.SubprocessTransport.terminate&quot;&gt;&lt;code&gt;terminate()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">POSIXシステムでは、関数はSIGKILLをサブプロセスに送信します。Windowsでは、このメソッドは&lt;a href=&quot;#asyncio.SubprocessTransport.terminate&quot;&gt; &lt;code&gt;terminate()&lt;/code&gt; の&lt;/a&gt;エイリアスです。</target>
        </trans-unit>
        <trans-unit id="f07a49e833d6a2c04f61073e69f1d34ae8d4879c" translate="yes" xml:space="preserve">
          <source>On POSIX systems, this method sends SIGTERM to the subprocess. On Windows, the Windows API function TerminateProcess() is called to stop the subprocess.</source>
          <target state="translated">POSIXシステムでは、このメソッドはサブプロセスにSIGTERMを送ります。Windowsでは、Windows API関数TerminateProcess()が呼び出され、サブプロセスを停止します。</target>
        </trans-unit>
        <trans-unit id="39b54d200ee996c99872333f17e610ed05df0ab4" translate="yes" xml:space="preserve">
          <source>On POSIX with &lt;code&gt;shell=True&lt;/code&gt;, the shell defaults to &lt;code&gt;/bin/sh&lt;/code&gt;. If &lt;em&gt;args&lt;/em&gt; is a string, the string specifies the command to execute through the shell. This means that the string must be formatted exactly as it would be when typed at the shell prompt. This includes, for example, quoting or backslash escaping filenames with spaces in them. If &lt;em&gt;args&lt;/em&gt; is a sequence, the first item specifies the command string, and any additional items will be treated as additional arguments to the shell itself. That is to say, &lt;a href=&quot;#subprocess.Popen&quot;&gt;&lt;code&gt;Popen&lt;/code&gt;&lt;/a&gt; does the equivalent of:</source>
          <target state="translated">&lt;code&gt;shell=True&lt;/code&gt; を使用した POSIXでは、シェルのデフォルトは &lt;code&gt;/bin/sh&lt;/code&gt; です。場合は&lt;em&gt;引数は&lt;/em&gt;文字列で、文字列は、シェルを介して実行するコマンドを指定します。つまり、文字列は、シェルプロンプトで入力したときとまったく同じようにフォーマットする必要があります。これには、たとえば、スペースを含むファイル名の引用やバックスラッシュエスケープが含まれます。場合は&lt;em&gt;引数が&lt;/em&gt;シーケンスで、最初の項目は、コマンド文字列を指定し、任意の追加項目は、シェル自体への追加の引数として扱われます。つまり、&lt;a href=&quot;#subprocess.Popen&quot;&gt; &lt;code&gt;Popen&lt;/code&gt; &lt;/a&gt;は以下と同等のことを行います。</target>
        </trans-unit>
        <trans-unit id="e0fbb44798e8fa6c268c46e281d4b570ead4545d" translate="yes" xml:space="preserve">
          <source>On POSIX, if &lt;em&gt;args&lt;/em&gt; is a string, the string is interpreted as the name or path of the program to execute. However, this can only be done if not passing arguments to the program.</source>
          <target state="translated">POSIXでは、&lt;em&gt;args&lt;/em&gt;が文字列の場合、文字列は実行するプログラムの名前またはパスとして解釈されます。ただし、これはプログラムに引数を渡さない場合にのみ実行できます。</target>
        </trans-unit>
        <trans-unit id="042d4232a3ed266a5bf3c414e7d49bafb86c8327" translate="yes" xml:space="preserve">
          <source>On Solaris and derivatives, the following attributes may also be available:</source>
          <target state="translated">Solaris およびその派生製品では、以下の属性も利用可能な場合があります。</target>
        </trans-unit>
        <trans-unit id="80cc19f9b1626f125dbd406b222352afad1074ce" translate="yes" xml:space="preserve">
          <source>On UNIX &lt;em&gt;child watchers&lt;/em&gt; are used for subprocess finish waiting, see &lt;a href=&quot;asyncio-policy#asyncio-watchers&quot;&gt;Process Watchers&lt;/a&gt; for more info.</source>
          <target state="translated">UNIXでは、&lt;em&gt;子ウォッチャー&lt;/em&gt;はサブプロセスの終了待機に使用されます。詳細については、&lt;a href=&quot;asyncio-policy#asyncio-watchers&quot;&gt;プロセスウォッチャー&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="061033fe6897a382e694d5ebd2c26f0de8aa24b9" translate="yes" xml:space="preserve">
          <source>On UNIX, &lt;a href=&quot;resource#resource.setrlimit&quot;&gt;&lt;code&gt;resource.setrlimit()&lt;/code&gt;&lt;/a&gt; is used to set &lt;a href=&quot;resource#resource.RLIMIT_CORE&quot;&gt;&lt;code&gt;resource.RLIMIT_CORE&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s soft limit to 0 to prevent coredump file creation.</source>
          <target state="translated">UNIXでは、&lt;a href=&quot;resource#resource.setrlimit&quot;&gt; &lt;code&gt;resource.setrlimit()&lt;/code&gt; &lt;/a&gt;を使用して&lt;a href=&quot;resource#resource.RLIMIT_CORE&quot;&gt; &lt;code&gt;resource.RLIMIT_CORE&lt;/code&gt; &lt;/a&gt;のソフト制限を0に設定し、コアダンプファイルが作成されないようにします。</target>
        </trans-unit>
        <trans-unit id="5303fb5664f54ac196ff0624621bf3e9b937a218" translate="yes" xml:space="preserve">
          <source>On UNIX, non-inheritable file descriptors are closed in child processes at the execution of a new program, other file descriptors are inherited.</source>
          <target state="translated">UNIXでは、継承不可能なファイルディスクリプタは新しいプログラムの実行時に子プロセスでクローズされ、他のファイルディスクリプタは継承されます。</target>
        </trans-unit>
        <trans-unit id="8c0b4ce9edeaa46004c1ea89a47277ea82f428e7" translate="yes" xml:space="preserve">
          <source>On Unix and Windows, return the argument with an initial component of &lt;code&gt;~&lt;/code&gt; or &lt;code&gt;~user&lt;/code&gt; replaced by that &lt;em&gt;user&lt;/em&gt;&amp;rsquo;s home directory.</source>
          <target state="translated">UnixとWindowsでは、最初のコンポーネントで引数を返す &lt;code&gt;~&lt;/code&gt; か &lt;code&gt;~user&lt;/code&gt; その置き換えられ&lt;em&gt;たユーザ&lt;/em&gt;のホームディレクトリ。</target>
        </trans-unit>
        <trans-unit id="b4612ea5389981457aec60b2589e2c3358b80472" translate="yes" xml:space="preserve">
          <source>On Unix using the &lt;em&gt;fork&lt;/em&gt; start method, a child process can make use of a shared resource created in a parent process using a global resource. However, it is better to pass the object as an argument to the constructor for the child process.</source>
          <target state="translated">Unixでは、&lt;em&gt;fork&lt;/em&gt; startメソッドを使用して、子プロセスはグローバルリソースを使用して親プロセスで作成された共有リソースを利用できます。ただし、オブジェクトを引数として子プロセスのコンストラクターに渡すことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="b0ccbae6c96cdea294fa24abe9f6be651948a8f9" translate="yes" xml:space="preserve">
          <source>On Unix using the &lt;em&gt;spawn&lt;/em&gt; or &lt;em&gt;forkserver&lt;/em&gt; start methods will also start a &lt;em&gt;resource tracker&lt;/em&gt; process which tracks the unlinked named system resources (such as named semaphores or &lt;a href=&quot;multiprocessing.shared_memory#multiprocessing.shared_memory.SharedMemory&quot;&gt;&lt;code&gt;SharedMemory&lt;/code&gt;&lt;/a&gt; objects) created by processes of the program. When all processes have exited the resource tracker unlinks any remaining tracked object. Usually there should be none, but if a process was killed by a signal there may be some &amp;ldquo;leaked&amp;rdquo; resources. (Neither leaked semaphores nor shared memory segments will be automatically unlinked until the next reboot. This is problematic for both objects because the system allows only a limited number of named semaphores, and shared memory segments occupy some space in the main memory.)</source>
          <target state="translated">Unixでは、&lt;em&gt;spawn&lt;/em&gt;または&lt;em&gt;forkserver&lt;/em&gt; startメソッドを使用して、プログラムのプロセスによって作成されたリンクされていない名前付きシステムリソース（名前付きセマフォや&lt;a href=&quot;multiprocessing.shared_memory#multiprocessing.shared_memory.SharedMemory&quot;&gt; &lt;code&gt;SharedMemory&lt;/code&gt; &lt;/a&gt;オブジェクトなど）を&lt;em&gt;追跡&lt;/em&gt;する&lt;em&gt;リソーストラッカー&lt;/em&gt;プロセスも開始します。すべてのプロセスが終了すると、リソーストラッカーは残りの追跡対象オブジェクトのリンクを解除します。通常は何もないはずですが、プロセスがシグナルによって強制終了された場合、いくつかの「リークされた」リソースが存在する可能性があります。 （リークしたセマフォも共有メモリセグメントも、次の再起動まで自動的にリンク解除されません。システムは名前付きセマフォの限られた数のみを許可し、共有メモリセグメントはメインメモリの一部のスペースを占有するため、両方のオブジェクトに問題があります。）</target>
        </trans-unit>
        <trans-unit id="4fd6975fe19e134e6847e77c53014ea295e229e5" translate="yes" xml:space="preserve">
          <source>On Unix when a process finishes but has not been joined it becomes a zombie. There should never be very many because each time a new process starts (or &lt;a href=&quot;#multiprocessing.active_children&quot;&gt;&lt;code&gt;active_children()&lt;/code&gt;&lt;/a&gt; is called) all completed processes which have not yet been joined will be joined. Also calling a finished process&amp;rsquo;s &lt;a href=&quot;#multiprocessing.Process.is_alive&quot;&gt;&lt;code&gt;Process.is_alive&lt;/code&gt;&lt;/a&gt; will join the process. Even so it is probably good practice to explicitly join all the processes that you start.</source>
          <target state="translated">Unixでは、プロセスが終了しても参加していないと、ゾンビになります。新しいプロセスが開始する（または&lt;a href=&quot;#multiprocessing.active_children&quot;&gt; &lt;code&gt;active_children()&lt;/code&gt; &lt;/a&gt;が呼び出される）たびに、まだ結合されていないすべての完了したプロセスが結合されるので、それほど多くないはずです。また、終了したプロセスの&lt;a href=&quot;#multiprocessing.Process.is_alive&quot;&gt; &lt;code&gt;Process.is_alive&lt;/code&gt; を呼び出す&lt;/a&gt;と、プロセスに参加します。それでも、開始するすべてのプロセスを明示的に結合することは、おそらく良い習慣です。</target>
        </trans-unit>
        <trans-unit id="eac03dafabd5b9228353f47e1be8ab58e5322fe4" translate="yes" xml:space="preserve">
          <source>On Unix, an initial &lt;code&gt;~&lt;/code&gt; is replaced by the environment variable &lt;code id=&quot;index-3&quot;&gt;HOME&lt;/code&gt; if it is set; otherwise the current user&amp;rsquo;s home directory is looked up in the password directory through the built-in module &lt;a href=&quot;pwd#module-pwd&quot;&gt;&lt;code&gt;pwd&lt;/code&gt;&lt;/a&gt;. An initial &lt;code&gt;~user&lt;/code&gt; is looked up directly in the password directory.</source>
          <target state="translated">Unixでは、最初の &lt;code&gt;~&lt;/code&gt; が設定されている場合、環境変数 &lt;code id=&quot;index-3&quot;&gt;HOME&lt;/code&gt; に置き換えられます。それ以外の場合、現在のユーザーのホームディレクトリは、組み込みモジュール&lt;a href=&quot;pwd#module-pwd&quot;&gt; &lt;code&gt;pwd&lt;/code&gt; &lt;/a&gt;によってパスワードディレクトリで検索されます。初期 &lt;code&gt;~user&lt;/code&gt; パスワードディレクトリ内で直接検索されます。</target>
        </trans-unit>
        <trans-unit id="90a3c08a07528042488b78006ddb2bd1f632d904" translate="yes" xml:space="preserve">
          <source>On Unix, command line arguments are passed by bytes from OS. Python decodes them with filesystem encoding and &amp;ldquo;surrogateescape&amp;rdquo; error handler. When you need original bytes, you can get it by &lt;code&gt;[os.fsencode(arg) for arg in sys.argv]&lt;/code&gt;.</source>
          <target state="translated">Unixでは、コマンドライン引数はOSからバイトで渡されます。 Pythonは、ファイルシステムエンコーディングと「surrogateescape」エラーハンドラーでそれらをデコードします。元のバイトが必要な場合は、 &lt;code&gt;[os.fsencode(arg) for arg in sys.argv]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="93002bc4f16ed4f7287d3b4688f861b295aba774" translate="yes" xml:space="preserve">
          <source>On Unix, if &lt;em&gt;src&lt;/em&gt; is a file and &lt;em&gt;dst&lt;/em&gt; is a directory or vice-versa, an &lt;a href=&quot;exceptions#IsADirectoryError&quot;&gt;&lt;code&gt;IsADirectoryError&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;exceptions#NotADirectoryError&quot;&gt;&lt;code&gt;NotADirectoryError&lt;/code&gt;&lt;/a&gt; will be raised respectively. If both are directories and &lt;em&gt;dst&lt;/em&gt; is empty, &lt;em&gt;dst&lt;/em&gt; will be silently replaced. If &lt;em&gt;dst&lt;/em&gt; is a non-empty directory, an &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; is raised. If both are files, &lt;em&gt;dst&lt;/em&gt; it will be replaced silently if the user has permission. The operation may fail on some Unix flavors if &lt;em&gt;src&lt;/em&gt; and &lt;em&gt;dst&lt;/em&gt; are on different filesystems. If successful, the renaming will be an atomic operation (this is a POSIX requirement).</source>
          <target state="translated">Unixでは、&lt;em&gt;src&lt;/em&gt;がファイルで&lt;em&gt;dst&lt;/em&gt;がディレクトリの場合、またはその逆の場合、&lt;a href=&quot;exceptions#IsADirectoryError&quot;&gt; &lt;code&gt;IsADirectoryError&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;exceptions#NotADirectoryError&quot;&gt; &lt;code&gt;NotADirectoryError&lt;/code&gt; &lt;/a&gt;がそれぞれ発生します。両方がディレクトリで、&lt;em&gt;dst&lt;/em&gt;が空の場合、&lt;em&gt;dst&lt;/em&gt;は警告なしに置き換えられます。場合&lt;em&gt;dstが&lt;/em&gt;空でないディレクトリである、&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; のが&lt;/a&gt;発生します。両方がファイルの場合、ユーザーが権限を持っている場合、&lt;em&gt;dst&lt;/em&gt;はサイレントに置き換えられます。&lt;em&gt;src&lt;/em&gt;と&lt;em&gt;dst&lt;/em&gt;が異なるファイルシステムにある場合、一部のUnixフレーバーでは操作が失敗する場合があります。成功した場合、名前の変更はアトミック操作になります（これはPOSIXの要件です）。</target>
        </trans-unit>
        <trans-unit id="8780f206d9a466abf25b51a1356f99b2ac3e12d8" translate="yes" xml:space="preserve">
          <source>On Unix, keys and values are decoded with &lt;a href=&quot;sys#sys.getfilesystemencoding&quot;&gt;&lt;code&gt;sys.getfilesystemencoding()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;'surrogateescape'&lt;/code&gt; error handler. Use &lt;a href=&quot;#os.getenvb&quot;&gt;&lt;code&gt;os.getenvb()&lt;/code&gt;&lt;/a&gt; if you would like to use a different encoding.</source>
          <target state="translated">Unixでは、キーと値は&lt;a href=&quot;sys#sys.getfilesystemencoding&quot;&gt; &lt;code&gt;sys.getfilesystemencoding()&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;'surrogateescape'&lt;/code&gt; エラーハンドラーでデコードされます。別のエンコーディングを使用したい場合は&lt;a href=&quot;#os.getenvb&quot;&gt; &lt;code&gt;os.getenvb()&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="2736be53c72c433fb105b8ad845ba0292116edf7" translate="yes" xml:space="preserve">
          <source>On Unix, keys and values use &lt;a href=&quot;sys#sys.getfilesystemencoding&quot;&gt;&lt;code&gt;sys.getfilesystemencoding()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;'surrogateescape'&lt;/code&gt; error handler. Use &lt;a href=&quot;#os.environb&quot;&gt;&lt;code&gt;environb&lt;/code&gt;&lt;/a&gt; if you would like to use a different encoding.</source>
          <target state="translated">Unixでは、キーと値は&lt;a href=&quot;sys#sys.getfilesystemencoding&quot;&gt; &lt;code&gt;sys.getfilesystemencoding()&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;'surrogateescape'&lt;/code&gt; エラーハンドラーを使用します。使用して、&lt;a href=&quot;#os.environb&quot;&gt; &lt;code&gt;environb&lt;/code&gt; &lt;/a&gt;あなたが別のエンコーディングを使用したい場合。</target>
        </trans-unit>
        <trans-unit id="e0c4f12b4b23fde3793d78231c974ebbe635b6cb" translate="yes" xml:space="preserve">
          <source>On Unix, the &lt;code&gt;myapp.pyz&lt;/code&gt; file is executable as it stands. You can rename the file to remove the &lt;code&gt;.pyz&lt;/code&gt; extension if you prefer a &amp;ldquo;plain&amp;rdquo; command name. On Windows, the &lt;code&gt;myapp.pyz[w]&lt;/code&gt; file is executable by virtue of the fact that the Python interpreter registers the &lt;code&gt;.pyz&lt;/code&gt; and &lt;code&gt;.pyzw&lt;/code&gt; file extensions when installed.</source>
          <target state="translated">Unixでは、 &lt;code&gt;myapp.pyz&lt;/code&gt; ファイルはそのまま実行可能です。「プレーン」なコマンド名を使用したい場合は、ファイルの名前を変更して &lt;code&gt;.pyz&lt;/code&gt; 拡張子を削除できます。Windowsでは、Pythonインタープリターが &lt;code&gt;.pyz&lt;/code&gt; および &lt;code&gt;.pyzw&lt;/code&gt; ファイル拡張子をインストール時に登録するため、 &lt;code&gt;myapp.pyz[w]&lt;/code&gt; ファイルは実行可能です。</target>
        </trans-unit>
        <trans-unit id="c8f756c834d5e154ecd1fc2f824c744c6fb65726" translate="yes" xml:space="preserve">
          <source>On Unix, the encoding is the locale encoding.</source>
          <target state="translated">Unix では、エンコーディングはロケールエンコーディングになります。</target>
        </trans-unit>
        <trans-unit id="4130f28e99fb9d275797c90efd13d5dc34107bb6" translate="yes" xml:space="preserve">
          <source>On Unix, the return value is the exit status of the process encoded in the format specified for &lt;a href=&quot;#os.wait&quot;&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/a&gt;. Note that POSIX does not specify the meaning of the return value of the C &lt;code&gt;system()&lt;/code&gt; function, so the return value of the Python function is system-dependent.</source>
          <target state="translated">Unixでは、戻り値は、&lt;a href=&quot;#os.wait&quot;&gt; &lt;code&gt;wait()&lt;/code&gt; に&lt;/a&gt;指定された形式でエンコードされたプロセスの終了ステータスです。POSIXはC &lt;code&gt;system()&lt;/code&gt; 関数の戻り値の意味を指定しないため、Python関数の戻り値はシステムに依存することに注意してください。</target>
        </trans-unit>
        <trans-unit id="db73826f114b93339271a1e0fe842703c96cf902" translate="yes" xml:space="preserve">
          <source>On Unix, this method always requires a system call. On Windows, it only requires a system call if &lt;em&gt;follow_symlinks&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt; and the entry is a reparse point (for example, a symbolic link or directory junction).</source>
          <target state="translated">Unixでは、このメソッドは常にシステムコールを必要とします。Windowsでは、&lt;em&gt;follow_symlinks&lt;/em&gt;が &lt;code&gt;True&lt;/code&gt; で、エントリが再解析ポイント（たとえば、シンボリックリンクまたはディレクトリジャンクション）である場合にのみ、システムコールが必要です。</target>
        </trans-unit>
        <trans-unit id="150170a27442f2fab1bfdced209dec9ff8347086" translate="yes" xml:space="preserve">
          <source>On Unix-based systems, &lt;a href=&quot;#os.scandir&quot;&gt;&lt;code&gt;scandir()&lt;/code&gt;&lt;/a&gt; uses the system&amp;rsquo;s &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/functions/opendir.html&quot;&gt;opendir()&lt;/a&gt; and &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/functions/readdir_r.html&quot;&gt;readdir()&lt;/a&gt; functions. On Windows, it uses the Win32 &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa364418(v=vs.85).aspx&quot;&gt;FindFirstFileW&lt;/a&gt; and &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa364428(v=vs.85).aspx&quot;&gt;FindNextFileW&lt;/a&gt; functions.</source>
          <target state="translated">Unixベースのシステムでは、&lt;a href=&quot;#os.scandir&quot;&gt; &lt;code&gt;scandir()&lt;/code&gt; &lt;/a&gt;はシステムの&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/functions/opendir.html&quot;&gt;opendir &lt;/a&gt;&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/functions/readdir_r.html&quot;&gt;（）&lt;/a&gt;関数とreaddir（）関数を使用します。Windowsでは、Win32 &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa364418(v=vs.85).aspx&quot;&gt;FindFirstFileW&lt;/a&gt;関数と&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa364428(v=vs.85).aspx&quot;&gt;FindNextFileW&lt;/a&gt;関数を使用します。</target>
        </trans-unit>
        <trans-unit id="063f29033f1f42ed60a4000d40548820821c002e" translate="yes" xml:space="preserve">
          <source>On Unix: Wait for completion of a child process given by process id &lt;em&gt;pid&lt;/em&gt;, and return a tuple containing its process id and exit status indication (encoded as for &lt;a href=&quot;#os.wait&quot;&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/a&gt;). The semantics of the call are affected by the value of the integer &lt;em&gt;options&lt;/em&gt;, which should be &lt;code&gt;0&lt;/code&gt; for normal operation.</source>
          <target state="translated">Unixの場合：プロセスID &lt;em&gt;pid&lt;/em&gt;で指定された子プロセスの完了を待機し、そのプロセスIDと終了ステータスの表示（&lt;a href=&quot;#os.wait&quot;&gt; &lt;code&gt;wait()&lt;/code&gt; の&lt;/a&gt;ようにエンコード）を含むタプルを返します。呼び出しのセマンティクスは整数&lt;em&gt;オプションの&lt;/em&gt;値の影響を受け&lt;em&gt;ます&lt;/em&gt;。通常の操作では &lt;code&gt;0&lt;/code&gt; にする必要が&lt;em&gt;あります&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="c6664197221cc90bd320057a225826f63dffde52" translate="yes" xml:space="preserve">
          <source>On VT100s and their software emulations, such as X terminal emulators, there are normally at least four function keys (&lt;code&gt;KEY_F1&lt;/code&gt;, &lt;code&gt;KEY_F2&lt;/code&gt;, &lt;code&gt;KEY_F3&lt;/code&gt;, &lt;code&gt;KEY_F4&lt;/code&gt;) available, and the arrow keys mapped to &lt;code&gt;KEY_UP&lt;/code&gt;, &lt;code&gt;KEY_DOWN&lt;/code&gt;, &lt;code&gt;KEY_LEFT&lt;/code&gt; and &lt;code&gt;KEY_RIGHT&lt;/code&gt; in the obvious way. If your machine has a PC keyboard, it is safe to expect arrow keys and twelve function keys (older PC keyboards may have only ten function keys); also, the following keypad mappings are standard:</source>
          <target state="translated">VT100およびX端末エミュレータなどのソフトウェアエミュレーションでは、通常、少なくとも4つのファンクションキー（ &lt;code&gt;KEY_F1&lt;/code&gt; 、 &lt;code&gt;KEY_F2&lt;/code&gt; 、 &lt;code&gt;KEY_F3&lt;/code&gt; 、 &lt;code&gt;KEY_F4&lt;/code&gt; ）が利用可能で、矢印キーは &lt;code&gt;KEY_UP&lt;/code&gt; 、 &lt;code&gt;KEY_DOWN&lt;/code&gt; 、 &lt;code&gt;KEY_LEFT&lt;/code&gt; 、および &lt;code&gt;KEY_RIGHT&lt;/code&gt; にマップされています。マシンにPCキーボードが搭載されている場合、矢印キーと12個のファンクションキーを期待しても安全です（古いPCキーボードには10個のファンクションキーしかない場合があります）。また、次のキーパッドマッピングが標準です。</target>
        </trans-unit>
        <trans-unit id="3899987121cefa28d5ca881e747a27db892dca88" translate="yes" xml:space="preserve">
          <source>On VxWorks, os.fork, os.execv and os.spawn*p* are not supported.</source>
          <target state="translated">VxWorksでは、os.fork、os.execv、os.spawn*p*はサポートされていません。</target>
        </trans-unit>
        <trans-unit id="6ee0d33d4266d631edea6f3c6725804aebe33d95" translate="yes" xml:space="preserve">
          <source>On VxWorks, the encoding is &lt;code&gt;'utf-8'&lt;/code&gt;.</source>
          <target state="translated">VxWorksでは、エンコーディングは &lt;code&gt;'utf-8'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="203f05598318fc482dff2c5d330d5adcc5f6680a" translate="yes" xml:space="preserve">
          <source>On Windows &lt;a href=&quot;#shutil.copyfile&quot;&gt;&lt;code&gt;shutil.copyfile()&lt;/code&gt;&lt;/a&gt; uses a bigger default buffer size (1 MiB instead of 64 KiB) and a &lt;a href=&quot;stdtypes#memoryview&quot;&gt;&lt;code&gt;memoryview()&lt;/code&gt;&lt;/a&gt;-based variant of &lt;a href=&quot;#shutil.copyfileobj&quot;&gt;&lt;code&gt;shutil.copyfileobj()&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">Windows上で&lt;a href=&quot;#shutil.copyfile&quot;&gt; &lt;code&gt;shutil.copyfile()&lt;/code&gt; は、&lt;/a&gt;より大きなデフォルトのバッファサイズ（代わりに64 KiBのの1 MIB）を使用し、&lt;a href=&quot;stdtypes#memoryview&quot;&gt; &lt;code&gt;memoryview()&lt;/code&gt; &lt;/a&gt;のベースバリアント&lt;a href=&quot;#shutil.copyfileobj&quot;&gt; &lt;code&gt;shutil.copyfileobj()&lt;/code&gt; が&lt;/a&gt;使用されています。</target>
        </trans-unit>
        <trans-unit id="8d9ce61f86eb4d4ac3c24d7367b804553ab20d7c" translate="yes" xml:space="preserve">
          <source>On Windows CE only the standard calling convention is used, for convenience the &lt;a href=&quot;#ctypes.WinDLL&quot;&gt;&lt;code&gt;WinDLL&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ctypes.OleDLL&quot;&gt;&lt;code&gt;OleDLL&lt;/code&gt;&lt;/a&gt; use the standard calling convention on this platform.</source>
          <target state="translated">Windows CEでは、標準の呼び出し規約のみが使用されます。便宜上、&lt;a href=&quot;#ctypes.WinDLL&quot;&gt; &lt;code&gt;WinDLL&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#ctypes.OleDLL&quot;&gt; &lt;code&gt;OleDLL&lt;/code&gt; &lt;/a&gt;はこのプラットフォームの標準の呼び出し規約を使用します。</target>
        </trans-unit>
        <trans-unit id="0867eba7d4a0405fe6540f206891d83e1500d5af" translate="yes" xml:space="preserve">
          <source>On Windows subprocesses are provided by &lt;a href=&quot;asyncio-eventloop#asyncio.ProactorEventLoop&quot;&gt;&lt;code&gt;ProactorEventLoop&lt;/code&gt;&lt;/a&gt; only (default), &lt;a href=&quot;asyncio-eventloop#asyncio.SelectorEventLoop&quot;&gt;&lt;code&gt;SelectorEventLoop&lt;/code&gt;&lt;/a&gt; has no subprocess support.</source>
          <target state="translated">Windowsでは、サブプロセスは&lt;a href=&quot;asyncio-eventloop#asyncio.ProactorEventLoop&quot;&gt; &lt;code&gt;ProactorEventLoop&lt;/code&gt; &lt;/a&gt;のみによって提供され（デフォルト）、&lt;a href=&quot;asyncio-eventloop#asyncio.SelectorEventLoop&quot;&gt; &lt;code&gt;SelectorEventLoop&lt;/code&gt; &lt;/a&gt;はサブプロセスをサポートしません。</target>
        </trans-unit>
        <trans-unit id="f8900df099d23fe4cefc3ed2ff747e1965dae1b2" translate="yes" xml:space="preserve">
          <source>On Windows systems, the following attributes are also available:</source>
          <target state="translated">Windowsシステムでは、以下の属性も利用できます。</target>
        </trans-unit>
        <trans-unit id="ddfe0eef2e2f38ebe4f48d369d9ce1a6cca527aa" translate="yes" xml:space="preserve">
          <source>On Windows the Win32 API function &lt;code&gt;TerminateProcess()&lt;/code&gt; is called to stop the child process.</source>
          <target state="translated">Windowsでは、Win32 API関数 &lt;code&gt;TerminateProcess()&lt;/code&gt; が呼び出され、子プロセスが停止します。</target>
        </trans-unit>
        <trans-unit id="737fe33437bc6a2ea80e837e0281f2030d4293e1" translate="yes" xml:space="preserve">
          <source>On Windows this method is an alias for &lt;a href=&quot;#asyncio.asyncio.subprocess.Process.terminate&quot;&gt;&lt;code&gt;terminate()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Windowsでは、このメソッドは&lt;a href=&quot;#asyncio.asyncio.subprocess.Process.terminate&quot;&gt; &lt;code&gt;terminate()&lt;/code&gt; の&lt;/a&gt;エイリアスです。</target>
        </trans-unit>
        <trans-unit id="2a9d37ebffa50750cbeaa7ad01c13a30b0983c37" translate="yes" xml:space="preserve">
          <source>On Windows with &lt;code&gt;shell=True&lt;/code&gt;, the &lt;code id=&quot;index-2&quot;&gt;COMSPEC&lt;/code&gt; environment variable specifies the default shell. The only time you need to specify &lt;code&gt;shell=True&lt;/code&gt; on Windows is when the command you wish to execute is built into the shell (e.g. &lt;strong&gt;dir&lt;/strong&gt; or &lt;strong&gt;copy&lt;/strong&gt;). You do not need &lt;code&gt;shell=True&lt;/code&gt; to run a batch file or console-based executable.</source>
          <target state="translated">&lt;code&gt;shell=True&lt;/code&gt; を使用するWindows では、 &lt;code id=&quot;index-2&quot;&gt;COMSPEC&lt;/code&gt; 環境変数はデフォルトのシェルを指定します。Windowsで &lt;code&gt;shell=True&lt;/code&gt; を指定する必要があるのは、実行するコマンドがシェルに組み込まれているときだけです（たとえば、&lt;strong&gt;dir&lt;/strong&gt;または&lt;strong&gt;copy&lt;/strong&gt;）。バッチファイルまたはコンソールベースの実行可能ファイルを実行するために、 &lt;code&gt;shell=True&lt;/code&gt; は必要ありません。</target>
        </trans-unit>
        <trans-unit id="644fd389f0194cebaf7154a9a1f88aabdea9f63c" translate="yes" xml:space="preserve">
          <source>On Windows, &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt; uses win32 structured exception handling to prevent crashes from general protection faults when functions are called with invalid argument values:</source>
          <target state="translated">Windowsでは、&lt;a href=&quot;#module-ctypes&quot;&gt; &lt;code&gt;ctypes&lt;/code&gt; &lt;/a&gt;はwin32構造化例外処理を使用して、無効な引数値で関数が呼び出された場合の一般保護違反によるクラッシュを防止します。</target>
        </trans-unit>
        <trans-unit id="1b11ed5ae47203f10f9e39c4677ebfc9b376f13c" translate="yes" xml:space="preserve">
          <source>On Windows, &lt;a href=&quot;#module-signal&quot;&gt;&lt;code&gt;signal()&lt;/code&gt;&lt;/a&gt; can only be called with &lt;code&gt;SIGABRT&lt;/code&gt;, &lt;code&gt;SIGFPE&lt;/code&gt;, &lt;code&gt;SIGILL&lt;/code&gt;, &lt;code&gt;SIGINT&lt;/code&gt;, &lt;code&gt;SIGSEGV&lt;/code&gt;, &lt;code&gt;SIGTERM&lt;/code&gt;, or &lt;code&gt;SIGBREAK&lt;/code&gt;. A &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; will be raised in any other case. Note that not all systems define the same set of signal names; an &lt;a href=&quot;exceptions#AttributeError&quot;&gt;&lt;code&gt;AttributeError&lt;/code&gt;&lt;/a&gt; will be raised if a signal name is not defined as &lt;code&gt;SIG*&lt;/code&gt; module level constant.</source>
          <target state="translated">Windowsでは、&lt;a href=&quot;#module-signal&quot;&gt; &lt;code&gt;signal()&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;SIGABRT&lt;/code&gt; 、 &lt;code&gt;SIGFPE&lt;/code&gt; 、 &lt;code&gt;SIGILL&lt;/code&gt; 、 &lt;code&gt;SIGINT&lt;/code&gt; 、 &lt;code&gt;SIGSEGV&lt;/code&gt; 、 &lt;code&gt;SIGTERM&lt;/code&gt; 、または &lt;code&gt;SIGBREAK&lt;/code&gt; でのみ呼び出すことができます。 A &lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;その他の場合に発生します。すべてのシステムが同じ信号名のセットを定義しているわけではないことに注意してください。シグナル名が &lt;code&gt;SIG*&lt;/code&gt; モジュールレベルの定数として定義されていない場合、&lt;a href=&quot;exceptions#AttributeError&quot;&gt; &lt;code&gt;AttributeError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="c63488f33cea6ed67ee2b396df2631f882861591" translate="yes" xml:space="preserve">
          <source>On Windows, &lt;code id=&quot;index-4&quot;&gt;USERPROFILE&lt;/code&gt; will be used if set, otherwise a combination of &lt;code id=&quot;index-5&quot;&gt;HOMEPATH&lt;/code&gt; and &lt;code id=&quot;index-6&quot;&gt;HOMEDRIVE&lt;/code&gt; will be used. An initial &lt;code&gt;~user&lt;/code&gt; is handled by stripping the last directory component from the created user path derived above.</source>
          <target state="translated">Windowsでは、設定されている場合は &lt;code id=&quot;index-4&quot;&gt;USERPROFILE&lt;/code&gt; が使用され、そうでない場合は &lt;code id=&quot;index-5&quot;&gt;HOMEPATH&lt;/code&gt; と &lt;code id=&quot;index-6&quot;&gt;HOMEDRIVE&lt;/code&gt; の組み合わせが使用されます。最初の〜userは、上記で作成された作成済みユーザーパスから最後のディレクトリコンポーネントを &lt;code&gt;~user&lt;/code&gt; で処理されます。</target>
        </trans-unit>
        <trans-unit id="78373ba9cc1e658aeb2f4b7766b4619af35de1bd" translate="yes" xml:space="preserve">
          <source>On Windows, &lt;code&gt;%name%&lt;/code&gt; expansions are supported in addition to &lt;code&gt;$name&lt;/code&gt; and &lt;code&gt;${name}&lt;/code&gt;.</source>
          <target state="translated">Windowsでは、 &lt;code&gt;$name&lt;/code&gt; および &lt;code&gt;${name}&lt;/code&gt; に加えて、 &lt;code&gt;%name%&lt;/code&gt; の拡張がサポートされています。</target>
        </trans-unit>
        <trans-unit id="b9eb07682cf8d7554c89ddc6eb7649bd072a9065" translate="yes" xml:space="preserve">
          <source>On Windows, &lt;code&gt;SIGTERM&lt;/code&gt; is an alias for &lt;a href=&quot;#asyncio.asyncio.subprocess.Process.terminate&quot;&gt;&lt;code&gt;terminate()&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;CTRL_C_EVENT&lt;/code&gt; and &lt;code&gt;CTRL_BREAK_EVENT&lt;/code&gt; can be sent to processes started with a &lt;em&gt;creationflags&lt;/em&gt; parameter which includes &lt;code&gt;CREATE_NEW_PROCESS_GROUP&lt;/code&gt;.</source>
          <target state="translated">Windowsでは、 &lt;code&gt;SIGTERM&lt;/code&gt; は&lt;a href=&quot;#asyncio.asyncio.subprocess.Process.terminate&quot;&gt; &lt;code&gt;terminate()&lt;/code&gt; の&lt;/a&gt;エイリアスです。 &lt;code&gt;CTRL_C_EVENT&lt;/code&gt; および &lt;code&gt;CTRL_BREAK_EVENT&lt;/code&gt; は、 &lt;code&gt;CREATE_NEW_PROCESS_GROUP&lt;/code&gt; を含む&lt;em&gt;creationflags&lt;/em&gt;パラメーターで開始されたプロセスに送信できます。</target>
        </trans-unit>
        <trans-unit id="b164d50e56bce46e5b506000cebb450ea480b3ac" translate="yes" xml:space="preserve">
          <source>On Windows, &lt;code&gt;TCP_KEEPIDLE&lt;/code&gt;, &lt;code&gt;TCP_KEEPINTVL&lt;/code&gt; appear if run-time Windows supports.</source>
          <target state="translated">Windowsでは、 &lt;code&gt;TCP_KEEPIDLE&lt;/code&gt; Windowsがサポートしている場合、TCP_KEEPIDLE、 &lt;code&gt;TCP_KEEPINTVL&lt;/code&gt; が表示されます。</target>
        </trans-unit>
        <trans-unit id="ae142dbc5c5a17511c3df2343dcf4473e9997091" translate="yes" xml:space="preserve">
          <source>On Windows, &lt;code&gt;find_library()&lt;/code&gt; searches along the system search path, and returns the full pathname, but since there is no predefined naming scheme a call like &lt;code&gt;find_library(&quot;c&quot;)&lt;/code&gt; will fail and return &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">Windowsでは、 &lt;code&gt;find_library()&lt;/code&gt; はシステム検索パスに沿って検索し、完全なパス名を返しますが、事前定義された命名スキームがないため、 &lt;code&gt;find_library(&quot;c&quot;)&lt;/code&gt; のような呼び出しは失敗し、 &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5c65155288185d4a2495f910b1a07cb130b3e4d7" translate="yes" xml:space="preserve">
          <source>On Windows, SIGTERM is an alias for &lt;a href=&quot;#subprocess.Popen.terminate&quot;&gt;&lt;code&gt;terminate()&lt;/code&gt;&lt;/a&gt;. CTRL_C_EVENT and CTRL_BREAK_EVENT can be sent to processes started with a &lt;em&gt;creationflags&lt;/em&gt; parameter which includes &lt;code&gt;CREATE_NEW_PROCESS_GROUP&lt;/code&gt;.</source>
          <target state="translated">Windowsでは、SIGTERMは&lt;a href=&quot;#subprocess.Popen.terminate&quot;&gt; &lt;code&gt;terminate()&lt;/code&gt; の&lt;/a&gt;エイリアスです。CTRL_C_EVENTおよびCTRL_BREAK_EVENT は、 &lt;code&gt;CREATE_NEW_PROCESS_GROUP&lt;/code&gt; を含む&lt;em&gt;creationflags&lt;/em&gt;パラメーターで開始されたプロセスに送信できます。</target>
        </trans-unit>
        <trans-unit id="7f3b8e43dba078c733dd83c201ede25e60d579e5" translate="yes" xml:space="preserve">
          <source>On Windows, UTF-8 is used for the console device. Non-character devices such as disk files and pipes use the system locale encoding (i.e. the ANSI codepage). Non-console character devices such as NUL (i.e. where &lt;code&gt;isatty()&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt;) use the value of the console input and output codepages at startup, respectively for stdin and stdout/stderr. This defaults to the system locale encoding if the process is not initially attached to a console.</source>
          <target state="translated">Windowsでは、コンソールデバイスにUTF-8が使用されます。ディスクファイルやパイプなどの非文字デバイスは、システムロケールエンコーディング（つまり、ANSIコードページ）を使用します。 NULなどの非コンソール文字デバイス（つまり、 &lt;code&gt;isatty()&lt;/code&gt; が &lt;code&gt;True&lt;/code&gt; を返す）は、起動時にコンソールの入力および出力コードページの値をそれぞれstdinおよびstdout / stderrに使用します。プロセスが最初にコンソールに接続されていない場合、これはデフォルトでシステムロケールエンコーディングになります。</target>
        </trans-unit>
        <trans-unit id="b01b208cf55586de3c3689ead1e3a6f10f966e03" translate="yes" xml:space="preserve">
          <source>On Windows, a symlink represents either a file or a directory, and does not morph to the target dynamically. If the target is present, the type of the symlink will be created to match. Otherwise, the symlink will be created as a directory if &lt;em&gt;target_is_directory&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt; or a file symlink (the default) otherwise. On non-Windows platforms, &lt;em&gt;target_is_directory&lt;/em&gt; is ignored.</source>
          <target state="translated">Windowsでは、シンボリックリンクはファイルまたはディレクトリのいずれかを表し、ターゲットに動的に変形しません。ターゲットが存在する場合、一致するようにシンボリックリンクのタイプが作成されます。それ以外の場合、&lt;em&gt;target_is_directory&lt;/em&gt;が &lt;code&gt;True&lt;/code&gt; の場合はシンボリックリンクがディレクトリとして作成され、それ以外の場合はファイルシンボリックリンク（デフォルト）が作成されます。Windows以外のプラットフォームでは、&lt;em&gt;target_is_directory&lt;/em&gt;は無視されます。</target>
        </trans-unit>
        <trans-unit id="c2d9aee7b296b4bb607ee17ff222cfff0af15e2d" translate="yes" xml:space="preserve">
          <source>On Windows, an &lt;em&gt;args&lt;/em&gt; sequence is converted to a string that can be parsed using the following rules (which correspond to the rules used by the MS C runtime):</source>
          <target state="translated">Windowsでは、&lt;em&gt;args&lt;/em&gt;シーケンスは、次のルール（MS Cランタイムで使用されるルールに対応する）を使用して解析できる文字列に変換されます。</target>
        </trans-unit>
        <trans-unit id="afd63b6fc8ddc6f6804a57f1784ecec5567ec0b8" translate="yes" xml:space="preserve">
          <source>On Windows, attempting to remove a file that is in use causes an exception to be raised; on Unix, the directory entry is removed but the storage allocated to the file is not made available until the original file is no longer in use.</source>
          <target state="translated">Windows では、使用中のファイルを削除しようとすると例外が発生します。Unix では、ディレクトリエントリは削除されますが、元のファイルが使用中でなくなるまで、ファイルに割り当てられたストレージは利用できません。</target>
        </trans-unit>
        <trans-unit id="324c0800a7c7e804335674d04ffb5659d07d9331" translate="yes" xml:space="preserve">
          <source>On Windows, if &lt;em&gt;args&lt;/em&gt; is a sequence, it will be converted to a string in a manner described in &lt;a href=&quot;#converting-argument-sequence&quot;&gt;Converting an argument sequence to a string on Windows&lt;/a&gt;. This is because the underlying &lt;code&gt;CreateProcess()&lt;/code&gt; operates on strings.</source>
          <target state="translated">Windowsでは、&lt;em&gt;args&lt;/em&gt;がシーケンスの場合、Windowsで&lt;a href=&quot;#converting-argument-sequence&quot;&gt;の引数シーケンスの文字列への変換&lt;/a&gt;で説明されている方法で文字列に変換されます。これは、基になる &lt;code&gt;CreateProcess()&lt;/code&gt; が文字列を操作するためです。</target>
        </trans-unit>
        <trans-unit id="1ca0b135ebc47d0ae31593b807a8b41656a98f18" translate="yes" xml:space="preserve">
          <source>On Windows, if &lt;em&gt;close_fds&lt;/em&gt; is true then no handles will be inherited by the child process unless explicitly passed in the &lt;code&gt;handle_list&lt;/code&gt; element of &lt;a href=&quot;#subprocess.STARTUPINFO.lpAttributeList&quot;&gt;&lt;code&gt;STARTUPINFO.lpAttributeList&lt;/code&gt;&lt;/a&gt;, or by standard handle redirection.</source>
          <target state="translated">場合Windowsでは、&lt;em&gt;close_fdsが&lt;/em&gt;真で明示的に渡さない限り、何のハンドルは子プロセスに継承されません &lt;code&gt;handle_list&lt;/code&gt; の要素&lt;a href=&quot;#subprocess.STARTUPINFO.lpAttributeList&quot;&gt; &lt;code&gt;STARTUPINFO.lpAttributeList&lt;/code&gt; &lt;/a&gt;、または標準ハンドルのリダイレクトによって。</target>
        </trans-unit>
        <trans-unit id="58cdff6f38e8a2fc1c45a1396be1d9e11b5516bf" translate="yes" xml:space="preserve">
          <source>On Windows, if &lt;em&gt;dst&lt;/em&gt; exists a &lt;a href=&quot;exceptions#FileExistsError&quot;&gt;&lt;code&gt;FileExistsError&lt;/code&gt;&lt;/a&gt; is always raised.</source>
          <target state="translated">Windowsでは、&lt;em&gt;dst&lt;/em&gt;が存在する場合、常に&lt;a href=&quot;exceptions#FileExistsError&quot;&gt; &lt;code&gt;FileExistsError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="151772e095fb4521d0d15c163d22479ec518b344" translate="yes" xml:space="preserve">
          <source>On Windows, invoke the &lt;code&gt;venv&lt;/code&gt; command as follows:</source>
          <target state="translated">Windowsでは、次のように &lt;code&gt;venv&lt;/code&gt; コマンドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="9f8dcef9d943b988c3e3efd4a7635b6a0452bcf9" translate="yes" xml:space="preserve">
          <source>On Windows, it disables Windows Error Reporting dialogs using &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms680621.aspx&quot;&gt;SetErrorMode&lt;/a&gt;.</source>
          <target state="translated">Windowsでは、&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms680621.aspx&quot;&gt;SetErrorMode&lt;/a&gt;を使用してWindowsエラー報告ダイアログを無効にします。</target>
        </trans-unit>
        <trans-unit id="80f74d4a0cc9c87f486e6c7e5dfa2600066b3d59" translate="yes" xml:space="preserve">
          <source>On Windows, it will use &lt;code&gt;CryptGenRandom()&lt;/code&gt;.</source>
          <target state="translated">Windowsでは、 &lt;code&gt;CryptGenRandom()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="5fdaa8220ca2781471b1bc92ae5261ce25d132d2" translate="yes" xml:space="preserve">
          <source>On Windows, non-inheritable handles and file descriptors are closed in child processes, except for standard streams (file descriptors 0, 1 and 2: stdin, stdout and stderr), which are always inherited. Using &lt;a href=&quot;#os.spawnl&quot;&gt;&lt;code&gt;spawn*&lt;/code&gt;&lt;/a&gt; functions, all inheritable handles and all inheritable file descriptors are inherited. Using the &lt;a href=&quot;subprocess#module-subprocess&quot;&gt;&lt;code&gt;subprocess&lt;/code&gt;&lt;/a&gt; module, all file descriptors except standard streams are closed, and inheritable handles are only inherited if the &lt;em&gt;close_fds&lt;/em&gt; parameter is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">Windowsでは、継承できないハンドルとファイル記述子は、常に継承される標準ストリーム（ファイル記述子0、1、2：stdin、stdout、stderr）を除いて、子プロセスで閉じられます。&lt;a href=&quot;#os.spawnl&quot;&gt; &lt;code&gt;spawn*&lt;/code&gt; &lt;/a&gt;関数を使用すると、すべての継承可能なハンドルとすべての継承可能なファイル記述子が継承されます。&lt;a href=&quot;subprocess#module-subprocess&quot;&gt; &lt;code&gt;subprocess&lt;/code&gt; &lt;/a&gt;モジュールを使用すると、標準ストリームを除くすべてのファイル記述子が閉じられ、&lt;em&gt;close_fds&lt;/em&gt;パラメータが &lt;code&gt;False&lt;/code&gt; の場合にのみ、継承可能なハンドルが継承されます。</target>
        </trans-unit>
        <trans-unit id="f9dbbca27b5bff454495040c1d717be7efc3364e" translate="yes" xml:space="preserve">
          <source>On Windows, opening a console buffer may return a subclass of &lt;a href=&quot;io#io.RawIOBase&quot;&gt;&lt;code&gt;io.RawIOBase&lt;/code&gt;&lt;/a&gt; other than &lt;a href=&quot;io#io.FileIO&quot;&gt;&lt;code&gt;io.FileIO&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Windowsでは、コンソールバッファーを開くと、&lt;a href=&quot;io#io.RawIOBase&quot;&gt; &lt;code&gt;io.RawIOBase&lt;/code&gt; &lt;/a&gt;以外のio.RawIOBaseのサブクラスが返される場合が&lt;a href=&quot;io#io.FileIO&quot;&gt; &lt;code&gt;io.FileIO&lt;/code&gt; &lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="cfe81378442524ce067312e393681abdbd697179" translate="yes" xml:space="preserve">
          <source>On Windows, passing &lt;code&gt;follow_symlinks=False&lt;/code&gt; will disable following all name-surrogate reparse points, which includes symlinks and directory junctions. Other types of reparse points that do not resemble links or that the operating system is unable to follow will be opened directly. When following a chain of multiple links, this may result in the original link being returned instead of the non-link that prevented full traversal. To obtain stat results for the final path in this case, use the &lt;a href=&quot;os.path#os.path.realpath&quot;&gt;&lt;code&gt;os.path.realpath()&lt;/code&gt;&lt;/a&gt; function to resolve the path name as far as possible and call &lt;a href=&quot;#os.lstat&quot;&gt;&lt;code&gt;lstat()&lt;/code&gt;&lt;/a&gt; on the result. This does not apply to dangling symlinks or junction points, which will raise the usual exceptions.</source>
          <target state="translated">Windowsでは、 &lt;code&gt;follow_symlinks=False&lt;/code&gt; を渡すと、シンボリックリンクやディレクトリジャンクションを含むすべての名前代理リパースポイントの追跡が無効になります。リンクに似ていない、またはオペレーティングシステムが追跡できないその他の種類の再解析ポイントは、直接開かれます。複数のリンクのチェーンをたどると、完全なトラバーサルを妨げた非リンクではなく元のリンクが返される可能性があります。この場合の最終パスの統計結果を取得するには、&lt;a href=&quot;os.path#os.path.realpath&quot;&gt; &lt;code&gt;os.path.realpath()&lt;/code&gt; &lt;/a&gt;関数を使用してパス名を可能な限り解決し、結果に対して&lt;a href=&quot;#os.lstat&quot;&gt; &lt;code&gt;lstat()&lt;/code&gt; &lt;/a&gt;を呼び出します。これは、通常の例外が発生するぶら下がりシンボリックリンクまたはジャンクションポイントには適用されません。</target>
        </trans-unit>
        <trans-unit id="c6205a30ddac655e92925086962c3c5fcb701b9b" translate="yes" xml:space="preserve">
          <source>On Windows, registration of the &lt;code&gt;.pyz&lt;/code&gt; extension is optional, and furthermore, there are certain places that don&amp;rsquo;t recognise registered extensions &amp;ldquo;transparently&amp;rdquo; (the simplest example is that &lt;code&gt;subprocess.run(['myapp'])&lt;/code&gt; won&amp;rsquo;t find your application - you need to explicitly specify the extension).</source>
          <target state="translated">Windowsでは、 &lt;code&gt;.pyz&lt;/code&gt; 拡張子の登録はオプションです。さらに、登録された拡張子を「透過的に」認識しない特定の場所があります（最も単純な例は、 &lt;code&gt;subprocess.run(['myapp'])&lt;/code&gt; がアプリケーション-拡張子を明示的に指定する必要があります）。</target>
        </trans-unit>
        <trans-unit id="e03e9ab7254bf5d9f3bb216b7f00876ce2b424a1" translate="yes" xml:space="preserve">
          <source>On Windows, some dlls export functions not by name but by ordinal. These functions can be accessed by indexing the dll object with the ordinal number:</source>
          <target state="translated">Windowsでは、いくつかのdllは名前ではなく順序で関数をエクスポートします。これらの関数は、順序番号を持つDLLオブジェクトにインデックスを付けることでアクセスできます。</target>
        </trans-unit>
        <trans-unit id="cf783f34ae011486fa108e118d4bbe59763b0114" translate="yes" xml:space="preserve">
          <source>On Windows, splits a pathname into drive/UNC sharepoint and relative path.</source>
          <target state="translated">Windowsでは、パス名をドライブ/UNC sharepointと相対パスに分割します。</target>
        </trans-unit>
        <trans-unit id="68fb8e7f05cf4a3d74f2fa5903e1bafcce342f6e" translate="yes" xml:space="preserve">
          <source>On Windows, the &lt;code&gt;st_ino&lt;/code&gt;, &lt;code&gt;st_dev&lt;/code&gt; and &lt;code&gt;st_nlink&lt;/code&gt; attributes of the &lt;a href=&quot;#os.stat_result&quot;&gt;&lt;code&gt;stat_result&lt;/code&gt;&lt;/a&gt; are always set to zero. Call &lt;a href=&quot;#os.stat&quot;&gt;&lt;code&gt;os.stat()&lt;/code&gt;&lt;/a&gt; to get these attributes.</source>
          <target state="translated">Windowsでは、 &lt;code&gt;st_ino&lt;/code&gt; の、 &lt;code&gt;st_dev&lt;/code&gt; フィールドと &lt;code&gt;st_nlink&lt;/code&gt; の属性&lt;a href=&quot;#os.stat_result&quot;&gt; &lt;code&gt;stat_result&lt;/code&gt; には&lt;/a&gt;常にゼロに設定されています。これらの属性を取得するには、&lt;a href=&quot;#os.stat&quot;&gt; &lt;code&gt;os.stat()&lt;/code&gt; &lt;/a&gt;を呼び出します。</target>
        </trans-unit>
        <trans-unit id="66761d013cd2216b1b7b3cd2e296f227d596f61c" translate="yes" xml:space="preserve">
          <source>On Windows, the current directory is always prepended to the &lt;em&gt;path&lt;/em&gt; whether or not you use the default or provide your own, which is the behavior the command shell uses when finding executables. Additionally, when finding the &lt;em&gt;cmd&lt;/em&gt; in the &lt;em&gt;path&lt;/em&gt;, the &lt;code&gt;PATHEXT&lt;/code&gt; environment variable is checked. For example, if you call &lt;code&gt;shutil.which(&quot;python&quot;)&lt;/code&gt;, &lt;a href=&quot;#shutil.which&quot;&gt;&lt;code&gt;which()&lt;/code&gt;&lt;/a&gt; will search &lt;code&gt;PATHEXT&lt;/code&gt; to know that it should look for &lt;code&gt;python.exe&lt;/code&gt; within the &lt;em&gt;path&lt;/em&gt; directories. For example, on Windows:</source>
          <target state="translated">Windowsでは、デフォルトを使用するか独自のものを提供するかどうかに関係なく、常に現在のディレクトリが&lt;em&gt;パスの&lt;/em&gt;先頭に追加されます。これは、実行可能ファイルを検索するときにコマンドシェルが使用する動作です。さらに、&lt;em&gt;パス&lt;/em&gt;で&lt;em&gt;cmd&lt;/em&gt;を見つけると、 &lt;code&gt;PATHEXT&lt;/code&gt; 環境変数がチェックされます。たとえば、 &lt;code&gt;shutil.which(&quot;python&quot;)&lt;/code&gt; を呼び出すと、&lt;a href=&quot;#shutil.which&quot;&gt; &lt;code&gt;which()&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;PATHEXT&lt;/code&gt; を検索して、&lt;em&gt;パス&lt;/em&gt;ディレクトリ内で &lt;code&gt;python.exe&lt;/code&gt; を探す必要があることを確認します。たとえば、Windowsの場合：&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="983f7bfa681a3a9d17b8f9ddb50e0f8c76511264" translate="yes" xml:space="preserve">
          <source>On Windows, the default event loop &lt;a href=&quot;asyncio-eventloop#asyncio.ProactorEventLoop&quot;&gt;&lt;code&gt;ProactorEventLoop&lt;/code&gt;&lt;/a&gt; supports subprocesses, whereas &lt;a href=&quot;asyncio-eventloop#asyncio.SelectorEventLoop&quot;&gt;&lt;code&gt;SelectorEventLoop&lt;/code&gt;&lt;/a&gt; does not.</source>
          <target state="translated">Windowsでは、デフォルトのイベントループ&lt;a href=&quot;asyncio-eventloop#asyncio.ProactorEventLoop&quot;&gt; &lt;code&gt;ProactorEventLoop&lt;/code&gt; &lt;/a&gt;はサブプロセスをサポートしていますが、&lt;a href=&quot;asyncio-eventloop#asyncio.SelectorEventLoop&quot;&gt; &lt;code&gt;SelectorEventLoop&lt;/code&gt; &lt;/a&gt;はサポートしていません。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
