<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="nim">
    <body>
      <group id="nim">
        <trans-unit id="c76fa1132c9049877899fb2dd217fb4f9fb94f6c" translate="yes" xml:space="preserve">
          <source>Note that without the &lt;em&gt;*&lt;/em&gt; following the name of the type, the documentation for this type would not be generated. Documentation will only be generated for &lt;em&gt;exported&lt;/em&gt; types/procedures/etc.</source>
          <target state="translated">タイプの名前の後に&lt;em&gt;*&lt;/em&gt;がないと、このタイプのドキュメントは生成されません。ドキュメントは、&lt;em&gt;エクスポートされた&lt;/em&gt;タイプ/手順/などについてのみ生成されます。</target>
        </trans-unit>
        <trans-unit id="83dc7e0556afc26215f0f05cbb05794c79af8e39" translate="yes" xml:space="preserve">
          <source>Note that you can use &lt;code&gt;gorge&lt;/code&gt; from the &lt;a href=&quot;system&quot;&gt;system module&lt;/a&gt; to embed parameters from an external command at compile time:</source>
          <target state="translated">&lt;a href=&quot;system&quot;&gt;システムモジュールの&lt;/a&gt; &lt;code&gt;gorge&lt;/code&gt; を使用して、コンパイル時に外部コマンドのパラメーターを埋め込むことができます。</target>
        </trans-unit>
        <trans-unit id="7a8772d3554a687071842e284d2ee1e51238d62e" translate="yes" xml:space="preserve">
          <source>Note that you can't pass any &lt;em&gt;args&lt;/em&gt; if you use the option &lt;code&gt;poEvalCommand&lt;/code&gt;, which invokes the system shell to run the specified &lt;em&gt;command&lt;/em&gt;. In this situation you have to concatenate manually the contents of &lt;em&gt;args&lt;/em&gt; to &lt;em&gt;command&lt;/em&gt; carefully escaping/quoting any special characters, since it will be passed &lt;em&gt;as is&lt;/em&gt; to the system shell. Each system/shell may feature different escaping rules, so try to avoid this kind of shell invocation if possible as it leads to non portable software.</source>
          <target state="translated">システムシェルを呼び出して指定された&lt;em&gt;コマンド&lt;/em&gt;を実行するオプション &lt;code&gt;poEvalCommand&lt;/code&gt; を使用する場合、&lt;em&gt;引数を&lt;/em&gt;渡すことができないことに注意してください。このような状況では、手動の内容連結しなければならない&lt;em&gt;引数を&lt;/em&gt;する&lt;em&gt;コマンド&lt;/em&gt;、それが渡されますから、慎重に特殊文字を引用/エスケープ&lt;em&gt;であるとして&lt;/em&gt;、システムのシェルに。各システム/シェルは異なるエスケープルールを備えている可能性があるため、移植性のないソフトウェアにつながる可能性があるため、このようなシェルの呼び出しはできるだけ避けてください。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2c5592912b54a15cb049ee1308dc422e794cf8b0" translate="yes" xml:space="preserve">
          <source>Note that, unlike tuples, objects require the field names along with their values. For a &lt;code&gt;ref object&lt;/code&gt; type &lt;code&gt;system.new&lt;/code&gt; is invoked implicitly.</source>
          <target state="translated">タプルとは異なり、オブジェクトにはフィールド名とその値が必要です。 &lt;code&gt;ref object&lt;/code&gt; 型の場合、 &lt;code&gt;system.new&lt;/code&gt; が暗黙的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4fe2a6b6231ef8afd037c1399752e71468fb5fa7" translate="yes" xml:space="preserve">
          <source>Note, single letter options that take an argument require a colon. E.g. -p:PATH.</source>
          <target state="translated">引数を取る一文字のオプションはコロンを必要とすることに注意してください。例:-p:PATH。</target>
        </trans-unit>
        <trans-unit id="41b4d4771d7ff34d7e5d420650862df593a32f84" translate="yes" xml:space="preserve">
          <source>Note: Ensure the original #define is not seen by c2nim (notice the #ifndef C2NIM).</source>
          <target state="translated">注意:元の #define が c2nim に見られないようにしてください (#ifndef C2NIM に注意してください)。</target>
        </trans-unit>
        <trans-unit id="589daca808645da8bffbebba1f4a3d7ffd0724bc" translate="yes" xml:space="preserve">
          <source>Note: For inter thread communication use a &lt;a href=&quot;channels&quot;&gt;Channel&lt;/a&gt; instead.</source>
          <target state="translated">注：スレッド間通信の場合は、代わりに&lt;a href=&quot;channels&quot;&gt;チャネル&lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="3c98c05550ca8db8ba1bb08e3e1cdb582a3c0958" translate="yes" xml:space="preserve">
          <source>Note: Import &lt;code&gt;std/sha1&lt;/code&gt; to use this module</source>
          <target state="translated">注：このモジュールを使用するには、 &lt;code&gt;std/sha1&lt;/code&gt; をインポートしてください</target>
        </trans-unit>
        <trans-unit id="a3380d8cd20bf5139372befec400003e462558ff" translate="yes" xml:space="preserve">
          <source>Note: In general, auto-converting from int to float loses information, which is why these operators live in a separate module. Use with care.</source>
          <target state="translated">注意:一般的に、int から float への自動変換は情報を失うので、これらの演算子は別のモジュールで動作します。注意して使用してください。</target>
        </trans-unit>
        <trans-unit id="b0b65c5d5f2ba33aefbd25c3c5eb32dd838fe065" translate="yes" xml:space="preserve">
          <source>Note: The pattern refers to the original C identifiers, not to the resulting identifiers after mangling!</source>
          <target state="translated">注意:このパターンは元の C の識別子を指しており、 混乱した後の結果の識別子を指しているのではありません!</target>
        </trans-unit>
        <trans-unit id="b85936911cd46420f06b600d6cad5d51acfe276f" translate="yes" xml:space="preserve">
          <source>Note: While the rules outlined below are the &lt;em&gt;current&lt;/em&gt; naming conventions, these conventions have not always been in place. Previously, the naming conventions for identifiers followed the Pascal tradition of prefixes which indicated the base type of the identifier - PFoo for pointer and reference types, TFoo for value types, EFoo for exceptions, etc. Though this has since changed, there are many places in the standard library which still use this convention. Such style remains in place purely for legacy reasons, and will be changed in the future.</source>
          <target state="translated">注：以下に概説する規則は&lt;em&gt;現在の&lt;/em&gt;命名規則ですが、これらの規則は常に実施されているわけではありません。以前は、識別子の命名規則は、識別子の基本型を示す接頭辞のPascalの伝統に従いました-ポインタと参照型のPFoo、値型のTFoo、例外のEFooなど。これは変更されて以来、多くの場所がありますこの規則をまだ使用している標準ライブラリで。このようなスタイルは、純粋にレガシーの理由からそのまま残されており、将来変更される予定です。</target>
        </trans-unit>
        <trans-unit id="34fecedf4653bc748c9340a21b565062d449db86" translate="yes" xml:space="preserve">
          <source>Note: alternate ways of writing this are &lt;code&gt;b[^8..^2] = &quot;useful&quot;&lt;/code&gt; or as &lt;code&gt;b[11..b.len-2] = &quot;useful&quot;&lt;/code&gt; or as &lt;code&gt;b[11..&amp;lt;b.len-1] = &quot;useful&quot;&lt;/code&gt;.</source>
          <target state="translated">注：これを書く別の方法は、 &lt;code&gt;b[^8..^2] = &quot;useful&quot;&lt;/code&gt; または &lt;code&gt;b[11..b.len-2] = &quot;useful&quot;&lt;/code&gt; または &lt;code&gt;b[11..&amp;lt;b.len-1] = &quot;useful&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="74d2a8fe03f1e52e70d949a49deffb7beaa9697e" translate="yes" xml:space="preserve">
          <source>Note: there is a speed improvement if the matches do not need to be captured.</source>
          <target state="translated">注意:マッチをキャプチャする必要がない場合は、速度の向上があります。</target>
        </trans-unit>
        <trans-unit id="c9e84c20ada2d36c53605b5b42bec5ecb1edbb93" translate="yes" xml:space="preserve">
          <source>Note: to serialize &lt;em&gt;x&lt;/em&gt; to JSON use $(%x) from the &lt;code&gt;json&lt;/code&gt; module</source>
          <target state="translated">注：&lt;em&gt;x&lt;/em&gt;をJSON にシリアル化するには、 &lt;code&gt;json&lt;/code&gt; モジュールの$（％x）を使用します</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="c599056dda568258fe7a8884f67e29669997a74a" translate="yes" xml:space="preserve">
          <source>Now that we covered the basic control flow statements, let's return to Nim indentation rules.</source>
          <target state="translated">基本的な制御フロー文をカバーしたので、Nimのインデントルールに戻りましょう。</target>
        </trans-unit>
        <trans-unit id="359cc1b4d4e1198e58400a2f6178f9956362e79d" translate="yes" xml:space="preserve">
          <source>Now that we use named arguments to call &lt;code&gt;createWindow&lt;/code&gt; the argument order does not matter anymore. Mixing named arguments with ordered arguments is also possible, but not very readable:</source>
          <target state="translated">名前付き引数を使用して &lt;code&gt;createWindow&lt;/code&gt; を呼び出すようになったので、引数の順序は重要ではなくなりました。名前付き引数と順序付けられた引数を混在させることも可能ですが、あまり読みにくいものです。</target>
        </trans-unit>
        <trans-unit id="de073aaec09d9a82c0b5660d7283e643aafc1ad4" translate="yes" xml:space="preserve">
          <source>Now the call to &lt;code&gt;createWindow&lt;/code&gt; only needs to set the values that differ from the defaults.</source>
          <target state="translated">これで、 &lt;code&gt;createWindow&lt;/code&gt; の呼び出しは、デフォルトとは異なる値を設定するだけで済みます。</target>
        </trans-unit>
        <trans-unit id="37e192255f51d8e35fa4d8c800cc0c72921cf379" translate="yes" xml:space="preserve">
          <source>Now the following holds:</source>
          <target state="translated">これで次のようになりました。</target>
        </trans-unit>
        <trans-unit id="1f1e7ee1876e3e297d1a65cb42dae5bbd812f819" translate="yes" xml:space="preserve">
          <source>Now we have compile-time checking against SQL injection attacks. Since &lt;code&gt;&quot;&quot;.SQL&lt;/code&gt; is transformed to &lt;code&gt;SQL(&quot;&quot;)&lt;/code&gt; no new syntax is needed for nice looking &lt;code&gt;SQL&lt;/code&gt; string literals. The hypothetical &lt;code&gt;SQL&lt;/code&gt; type actually exists in the library as the &lt;a href=&quot;db_sqlite#TSqlQuery&quot;&gt;TSqlQuery type&lt;/a&gt; of modules like &lt;a href=&quot;db_sqlite&quot;&gt;db_sqlite&lt;/a&gt;.</source>
          <target state="translated">これで、SQLインジェクション攻撃に対するコンパイル時のチェックが完了しました。以来 &lt;code&gt;&quot;&quot;.SQL&lt;/code&gt; に変換される &lt;code&gt;SQL(&quot;&quot;)&lt;/code&gt; 新しい構文は見栄えのために必要ではない &lt;code&gt;SQL&lt;/code&gt; の文字列リテラル。仮想的な &lt;code&gt;SQL&lt;/code&gt; の型が実際にはライブラリに存在する&lt;a href=&quot;db_sqlite#TSqlQuery&quot;&gt;TSQLQueryをタイプ&lt;/a&gt;などのモジュールの&lt;a href=&quot;db_sqlite&quot;&gt;db_sqlite&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="756f1995808a7a657065d45ecdba62e1e4422db8" translate="yes" xml:space="preserve">
          <source>Now you can run the following Unix like commands to first generate C sources form the Nim code, then link them into a static binary along your main C program:</source>
          <target state="translated">これで、以下の Unix ライクなコマンドを実行して、まず Nim コードから C ソースを生成し、それをメインの C プログラムに沿って静的なバイナリにリンクすることができるようになりました。</target>
        </trans-unit>
        <trans-unit id="c3cf1586c107e2ad157be6c3699e618619c6124a" translate="yes" xml:space="preserve">
          <source>Number of decimal digits that can be represented in a 32-bit floating-point type without losing precision.</source>
          <target state="translated">32ビット浮動小数点型で精度を落とさずに表現できる10進数。</target>
        </trans-unit>
        <trans-unit id="f2a4cda872ca90910ea60e675f66d013e1c1c5d2" translate="yes" xml:space="preserve">
          <source>Number of decimal digits that can be represented in a 64-bit floating-point type without losing precision.</source>
          <target state="translated">64ビット浮動小数点型で精度を落とさずに表現できる10進数。</target>
        </trans-unit>
        <trans-unit id="1e93ac306e3ccaf06ddd125b223d48515fd601ae" translate="yes" xml:space="preserve">
          <source>Number of digits (in base &lt;code&gt;floatingPointRadix&lt;/code&gt;) in the mantissa of 32-bit floating-point numbers.</source>
          <target state="translated">32ビット浮動小数点数の仮数の桁数（基本 &lt;code&gt;floatingPointRadix&lt;/code&gt; 内）。</target>
        </trans-unit>
        <trans-unit id="8d111fafd83c57aff8321d904d1159c139884ca1" translate="yes" xml:space="preserve">
          <source>Number of digits (in base &lt;code&gt;floatingPointRadix&lt;/code&gt;) in the mantissa of 64-bit floating-point numbers.</source>
          <target state="translated">64ビット浮動小数点数の仮数の桁数（基本 &lt;code&gt;floatingPointRadix&lt;/code&gt; 内）。</target>
        </trans-unit>
        <trans-unit id="6d57434884838acf9fbf6aa87bb099375ffa68a7" translate="yes" xml:space="preserve">
          <source>Number of whole days represented by the duration.</source>
          <target state="translated">期間で表される全日数。</target>
        </trans-unit>
        <trans-unit id="bbbf1dbfdd00220f8dc094d6ec5b5e3a5b7eec35" translate="yes" xml:space="preserve">
          <source>Number of whole hours represented by the duration.</source>
          <target state="translated">持続時間で表される全時間の数。</target>
        </trans-unit>
        <trans-unit id="b3416e7091156db48c9ee6ff7ce55182de3f7f47" translate="yes" xml:space="preserve">
          <source>Number of whole microseconds represented by the &lt;strong&gt;fractional&lt;/strong&gt; part of the duration.</source>
          <target state="translated">期間の&lt;strong&gt;小数&lt;/strong&gt;部で表されるマイクロ秒全体の数。</target>
        </trans-unit>
        <trans-unit id="e7efa45f297295912fd59ed47a00f3af6bfa2ef2" translate="yes" xml:space="preserve">
          <source>Number of whole milliseconds represented by the &lt;strong&gt;fractional&lt;/strong&gt; part of the duration.</source>
          <target state="translated">期間の&lt;strong&gt;小数&lt;/strong&gt;部分で表されるミリ秒単位の整数。</target>
        </trans-unit>
        <trans-unit id="76ab1f8aba37163bdf200dab23553396a7d3e689" translate="yes" xml:space="preserve">
          <source>Number of whole minutes represented by the duration.</source>
          <target state="translated">持続時間で表される全体の分数。</target>
        </trans-unit>
        <trans-unit id="18290aaf8138cc68a7cb85c476b2a4618ec23b5c" translate="yes" xml:space="preserve">
          <source>Number of whole nanoseconds represented by the &lt;strong&gt;fractional&lt;/strong&gt; part of the duration.</source>
          <target state="translated">期間の&lt;strong&gt;小数&lt;/strong&gt;部分で表されるナノ秒全体の数。</target>
        </trans-unit>
        <trans-unit id="a01af1e768fd4e093861831d977f5d94b80aa9f9" translate="yes" xml:space="preserve">
          <source>Number of whole seconds represented by the duration.</source>
          <target state="translated">持続時間で表される全秒数。</target>
        </trans-unit>
        <trans-unit id="5019b0366e2a30d163a49d5eb75e70470ba3899e" translate="yes" xml:space="preserve">
          <source>Number of whole weeks represented by the duration.</source>
          <target state="translated">期間で表される全週数。</target>
        </trans-unit>
        <trans-unit id="7e53821f70ae16079c4a6a64c52a91fae645bc5f" translate="yes" xml:space="preserve">
          <source>Numbers</source>
          <target state="translated">Numbers</target>
        </trans-unit>
        <trans-unit id="6d872a21aa9a7b7fea7d5fe31a5c2025c54405e4" translate="yes" xml:space="preserve">
          <source>Numbers in of the range -1000.0&amp;lt;f&amp;lt;1000.0 will be formatted without an exponent. Numbers outside of this range will be formatted as a significand in the range -1000.0&amp;lt;f&amp;lt;1000.0 and an exponent that will always be an integer multiple of 3, corresponding with the SI prefix scale k, M, G, T etc for numbers with an absolute value greater than 1 and m, &amp;mu;, n, p etc for numbers with an absolute value less than 1.</source>
          <target state="translated">-1000.0 &amp;lt;f &amp;lt;1000.0の範囲の数値は、指数なしでフォーマットされます。この範囲外の数値は、-1000.0 &amp;lt;f &amp;lt;1000.0の範囲の仮数と、常に3の整数倍になる指数としてフォーマットされ、SIプレフィックススケールk、M、G、Tなどに対応します。 1より大きい絶対値と、1より小さい絶対値を持つ数値の場合はm、&amp;mu;、n、pなど。</target>
        </trans-unit>
        <trans-unit id="76046e581003f2b0494ba6b4f5311bb28033bd96" translate="yes" xml:space="preserve">
          <source>Numeric value representing the day of the month, it will be either one or two digits long.</source>
          <target state="translated">月の曜日を表す数値で、1桁または2桁の長さになります。</target>
        </trans-unit>
        <trans-unit id="de117b3e0329ec2102122ec4b014ce37f5a796cb" translate="yes" xml:space="preserve">
          <source>Numerical constants</source>
          <target state="translated">数値定数</target>
        </trans-unit>
        <trans-unit id="1e9d4ed2757d3ae1dd279289b3d36043bcba7966" translate="yes" xml:space="preserve">
          <source>Numerical constants are of a single type and have the form:</source>
          <target state="translated">数値定数は単一の型であり、形式を持っています。</target>
        </trans-unit>
        <trans-unit id="14f53cb15d3a159e9414701d05c0d3d0e93ec666" translate="yes" xml:space="preserve">
          <source>Numerical literals are written as in most other languages. As a special twist, underscores are allowed for better readability: &lt;code&gt;1_000_000&lt;/code&gt; (one million). A number that contains a dot (or 'e' or 'E') is a floating point literal: &lt;code&gt;1.0e9&lt;/code&gt; (one billion). Hexadecimal literals are prefixed with &lt;code&gt;0x&lt;/code&gt;, binary literals with &lt;code&gt;0b&lt;/code&gt; and octal literals with &lt;code&gt;0o&lt;/code&gt;. A leading zero alone does not produce an octal.</source>
          <target state="translated">数値リテラルは、他のほとんどの言語と同様に書かれています。特別なひねりとして、読みやすくするためにアンダースコアを使用できます： &lt;code&gt;1_000_000&lt;/code&gt; （100万）。ドット（または「e」または「E」）を含む数値は、浮動小数点リテラル： &lt;code&gt;1.0e9&lt;/code&gt; （10億）です。16進リテラルの前には &lt;code&gt;0x&lt;/code&gt; 、2進リテラルには &lt;code&gt;0b&lt;/code&gt; 、8進リテラルには &lt;code&gt;0o&lt;/code&gt; を付けます。先行ゼロだけでは8進数は生成されません。</target>
        </trans-unit>
        <trans-unit id="c04cb3eb98c641516855449fcdbb36cf3f897d21" translate="yes" xml:space="preserve">
          <source>OP0</source>
          <target state="translated">OP0</target>
        </trans-unit>
        <trans-unit id="e04bcfb1ab304010d11e5f6c998c2482bd0d4128" translate="yes" xml:space="preserve">
          <source>OP1</source>
          <target state="translated">OP1</target>
        </trans-unit>
        <trans-unit id="a0f424f70ed0dceb9a4df1bcbbb44ba5f55142ae" translate="yes" xml:space="preserve">
          <source>OP10</source>
          <target state="translated">OP10</target>
        </trans-unit>
        <trans-unit id="c7235db666ae5752cda05330ea4cb5178dc33cc7" translate="yes" xml:space="preserve">
          <source>OP2</source>
          <target state="translated">OP2</target>
        </trans-unit>
        <trans-unit id="0269d7bdbba9ed5972892d3d356a1a3fac87612d" translate="yes" xml:space="preserve">
          <source>OP3</source>
          <target state="translated">OP3</target>
        </trans-unit>
        <trans-unit id="edc0331fa7efd5f99c8d4978274902462f4a77f2" translate="yes" xml:space="preserve">
          <source>OP4</source>
          <target state="translated">OP4</target>
        </trans-unit>
        <trans-unit id="1076f805e66d9538ab3ed3922addefb1313d6fee" translate="yes" xml:space="preserve">
          <source>OP5</source>
          <target state="translated">OP5</target>
        </trans-unit>
        <trans-unit id="ff32e5028e5ac9dd0850a491b15bab66a3070884" translate="yes" xml:space="preserve">
          <source>OP6</source>
          <target state="translated">OP6</target>
        </trans-unit>
        <trans-unit id="c5255cf0231d866ba6a47dd27b61007d7803323f" translate="yes" xml:space="preserve">
          <source>OP7</source>
          <target state="translated">OP7</target>
        </trans-unit>
        <trans-unit id="94fa4343a5ec0348b7ea746f38cbd00d2482ae4f" translate="yes" xml:space="preserve">
          <source>OP8</source>
          <target state="translated">OP8</target>
        </trans-unit>
        <trans-unit id="f373944b57d55ca9eddf4252a4349141943f321e" translate="yes" xml:space="preserve">
          <source>OP9</source>
          <target state="translated">OP9</target>
        </trans-unit>
        <trans-unit id="e2e3a80c4bd8a468bcd99583c85e67abc6426be7" translate="yes" xml:space="preserve">
          <source>Object Oriented Programming</source>
          <target state="translated">オブジェクト指向プログラミング</target>
        </trans-unit>
        <trans-unit id="228b119ddf88904b9df1033a323f6ac211450b69" translate="yes" xml:space="preserve">
          <source>Object access operator &lt;code&gt;.&lt;/code&gt;</source>
          <target state="translated">オブジェクトアクセス演算子 &lt;code&gt;.&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="91ca8083a285ad1c3815b36f3d7992ca6b703603" translate="yes" xml:space="preserve">
          <source>Object construction</source>
          <target state="translated">オブジェクトの構築</target>
        </trans-unit>
        <trans-unit id="233bb7b76158a54f9e255a510cc28ac7b239b2dc" translate="yes" xml:space="preserve">
          <source>Object fields and global variables can be annotated via a &lt;code&gt;guard&lt;/code&gt; pragma:</source>
          <target state="translated">オブジェクトフィールドとグローバル変数には、 &lt;code&gt;guard&lt;/code&gt; プラグマを使用して注釈を付けることができます。</target>
        </trans-unit>
        <trans-unit id="97f4ffdb6041c29c1c6a9a1c4566f9fc24ba1904" translate="yes" xml:space="preserve">
          <source>Object fields that should be visible from outside the defining module have to be marked by &lt;code&gt;*&lt;/code&gt;. In contrast to tuples, different object types are never &lt;em&gt;equivalent&lt;/em&gt;. New object types can only be defined within a type section.</source>
          <target state="translated">定義モジュールの外部から表示する必要があるオブジェクトフィールドは、 &lt;code&gt;*&lt;/code&gt; でマークする必要があります。タプルとは対照的に、異なるオブジェクトタイプが&lt;em&gt;等価になる&lt;/em&gt;ことはありません。新しいオブジェクトタイプは、タイプセクション内でのみ定義できます。</target>
        </trans-unit>
        <trans-unit id="f0d5262dff32615f0940c3ad8ba0ac64dcad73ed" translate="yes" xml:space="preserve">
          <source>Object fields that should be visible from outside the defining module, have to be marked by &lt;code&gt;*&lt;/code&gt;. In contrast to tuples, different object types are never &lt;em&gt;equivalent&lt;/em&gt;. Objects that have no ancestor are implicitly &lt;code&gt;final&lt;/code&gt; and thus have no hidden type field. One can use the &lt;code&gt;inheritable&lt;/code&gt; pragma to introduce new object roots apart from &lt;code&gt;system.RootObj&lt;/code&gt;.</source>
          <target state="translated">定義モジュールの外部から表示する必要があるオブジェクトフィールドは、 &lt;code&gt;*&lt;/code&gt; でマークする必要があります。タプルとは対照的に、異なるオブジェクトタイプが&lt;em&gt;等価になる&lt;/em&gt;ことはありません。祖先を持たないオブジェクトは暗黙的に &lt;code&gt;final&lt;/code&gt; であるため、非表示の型フィールドはありません。 &lt;code&gt;inheritable&lt;/code&gt; プラグマを使用して、 &lt;code&gt;system.RootObj&lt;/code&gt; 以外の新しいオブジェクトルートを導入できます。</target>
        </trans-unit>
        <trans-unit id="0978d14ec54e6881dd2800cbf0b00efa45a72d10" translate="yes" xml:space="preserve">
          <source>Object variants</source>
          <target state="translated">オブジェクトのバリエーション</target>
        </trans-unit>
        <trans-unit id="72a83add2c5ede877c10d23f302d3e17accbadab" translate="yes" xml:space="preserve">
          <source>Objects</source>
          <target state="translated">Objects</target>
        </trans-unit>
        <trans-unit id="d2c0e1be93b0738e53ee9b0896c747691dcee381" translate="yes" xml:space="preserve">
          <source>Objects can also be created with an &lt;span id=&quot;object-construction-expression_1&quot;&gt;object construction expression&lt;/span&gt; that has the syntax &lt;code&gt;T(fieldA: valueA, fieldB: valueB, ...)&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; is an &lt;code&gt;object&lt;/code&gt; type or a &lt;code&gt;ref object&lt;/code&gt; type:</source>
          <target state="translated">オブジェクトも使用して作成することができる&lt;span id=&quot;object-construction-expression_1&quot;&gt;オブジェクト構造式&lt;/span&gt;構文有する &lt;code&gt;T(fieldA: valueA, fieldB: valueB, ...)&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; は、ある &lt;code&gt;object&lt;/code&gt; 型または &lt;code&gt;ref object&lt;/code&gt; タイプ：</target>
        </trans-unit>
        <trans-unit id="ec43891abad4c5f51b9f1f5052e07c492132c2c3" translate="yes" xml:space="preserve">
          <source>Objects have access to their type at runtime. There is an &lt;code&gt;of&lt;/code&gt; operator that can be used to check the object's type:</source>
          <target state="translated">オブジェクトは実行時にその型にアクセスできます。オブジェクトのタイプを確認するために使用できる &lt;code&gt;of&lt;/code&gt; 演算子があります。</target>
        </trans-unit>
        <trans-unit id="4834206117cd45bf703010b173f8d2ab8b0e8785" translate="yes" xml:space="preserve">
          <source>Objects provide many features that tuples do not. Object provide inheritance and information hiding. Objects have access to their type at runtime, so that the &lt;code&gt;of&lt;/code&gt; operator can be used to determine the object's type. The &lt;code&gt;of&lt;/code&gt; operator is similar to the &lt;code&gt;instanceof&lt;/code&gt; operator in Java.</source>
          <target state="translated">オブジェクトは、タプルが提供しない多くの機能を提供します。オブジェクトは継承と情報隠蔽を提供します。オブジェクトは実行時にその型にアクセスできるため、 &lt;code&gt;of&lt;/code&gt; 演算子を使用してオブジェクトの型を判別できます。オペレータは、に似ている &lt;code&gt;instanceof&lt;/code&gt; は Javaでオペレータ。 &lt;code&gt;of&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3c57f97f14e60597fdfd797182b06e968256db96" translate="yes" xml:space="preserve">
          <source>Objects, tuples and references can model quite complex data structures which depend on each other; they are &lt;em&gt;mutually recursive&lt;/em&gt;. In Nim these types can only be declared within a single type section. (Anything else would require arbitrary symbol lookahead which slows down compilation.)</source>
          <target state="translated">オブジェクト、タプル、および参照は、相互に依存する非常に複雑なデータ構造をモデル化できます。それらは&lt;em&gt;相互に再帰的&lt;/em&gt;です。Nimでは、これらの型は単一の型セクション内でのみ宣言できます。（それ以外のものは、コンパイルを遅くする任意のシンボル先読みを必要とします。）</target>
        </trans-unit>
        <trans-unit id="71f640b46a5645b45934608435a884aa861a4b91" translate="yes" xml:space="preserve">
          <source>Obtains a sequence containing the Runes in &lt;code&gt;s&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; のルーン文字を含むシーケンスを取得します</target>
        </trans-unit>
        <trans-unit id="46ad7ba4d959a6de6e644561408cd88962c2b6f5" translate="yes" xml:space="preserve">
          <source>Obtains the AST nodes returned from a macro or template invocation. Example:</source>
          <target state="translated">マクロやテンプレートの呼び出しから返されたASTノードを取得します。例:マクロやテンプレートの呼び出しで返されたASTノードを取得します。</target>
        </trans-unit>
        <trans-unit id="e48a55708577c922dfe1c8727c5015fe59dcd19c" translate="yes" xml:space="preserve">
          <source>Octal format. Outputs the number in base 8.</source>
          <target state="translated">8進数形式。8進数で出力します。</target>
        </trans-unit>
        <trans-unit id="1168d0c029a48fe3aea275c0858b8d7c66a53429" translate="yes" xml:space="preserve">
          <source>OctalEscape</source>
          <target state="translated">OctalEscape</target>
        </trans-unit>
        <trans-unit id="848ceaf7c8a295c627cb93a73ac754f0130154b6" translate="yes" xml:space="preserve">
          <source>Often C and C++ code contains something like the following, where the return value is frequently ignored and so the Nim wrapper should contain a &lt;code&gt;.discardable&lt;/code&gt; pragma:</source>
          <target state="translated">多くの場合、CおよびC ++コードには次のようなものが含まれます。この場合、戻り値は頻繁に無視されるため、Nimラッパーには &lt;code&gt;.discardable&lt;/code&gt; プラグマを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="c85c11c4b42c93c3e7a04193ab3c113033320a61" translate="yes" xml:space="preserve">
          <source>Often C code contains special macros that affect the declaration of a function prototype but confuse c2nim's parser:</source>
          <target state="translated">多くの場合、C言語のコードには、関数プロトタイプの宣言に影響を与える特別なマクロが含まれていますが、それはc2nimのパーサを混乱させます。</target>
        </trans-unit>
        <trans-unit id="a8f42ebc1976b2a5351c29b1673e9099dfdbaca1" translate="yes" xml:space="preserve">
          <source>Often a procedure has many parameters and it is not clear in which order the parameters appear. This is especially true for procedures that construct a complex data type. Therefore the arguments to a procedure can be named, so that it is clear which argument belongs to which parameter:</source>
          <target state="translated">多くの場合、プロシージャには多くのパラメータがあり、どの順番でパラメータが現れるのかが明確ではありません。これは特に複雑なデータ型を構築するプロシージャに当てはまります。そのため、どの引数がどのパラメータに属するかが明確になるように、プロシージャの引数に名前を付けることができます。</target>
        </trans-unit>
        <trans-unit id="f6395b4ee4a71999d586e3acbee700ed5ca4da87" translate="yes" xml:space="preserve">
          <source>Often an object hierarchy is overkill in certain situations where simple variant types are needed.</source>
          <target state="translated">単純なバリアント型が必要な場合には、オブジェクト階層が過剰になることがよくあります。</target>
        </trans-unit>
        <trans-unit id="06ebd19cc8bc8c7150cf93f1a6c3d3c1726b3741" translate="yes" xml:space="preserve">
          <source>Often fixed size arrays turn out to be too inflexible; procedures should be able to deal with arrays of different sizes. The &lt;span id=&quot;openarray_1&quot;&gt;openarray&lt;/span&gt; type allows this. Openarrays are always indexed with an &lt;code&gt;int&lt;/code&gt; starting at position 0. The &lt;a href=&quot;system#len,TOpenArray&quot;&gt;len&lt;/a&gt;, &lt;a href=&quot;system#low&quot;&gt;low&lt;/a&gt; and &lt;a href=&quot;system#high&quot;&gt;high&lt;/a&gt; operations are available for open arrays too. Any array with a compatible base type can be passed to an openarray parameter, the index type does not matter.</source>
          <target state="translated">多くの場合、固定サイズの配列は柔軟性に欠けます。プロシージャは、異なるサイズの配列を処理できる必要があります。&lt;span id=&quot;openarray_1&quot;&gt;openarray&lt;/span&gt;タイプはこれを可能にします。 Openarraysは、常にでインデックスされている &lt;code&gt;int&lt;/code&gt; の位置0から始まる&lt;a href=&quot;system#len,TOpenArray&quot;&gt;LENを&lt;/a&gt;、&lt;a href=&quot;system#low&quot;&gt;低い&lt;/a&gt;及び&lt;a href=&quot;system#high&quot;&gt;高い&lt;/a&gt;動作があまりにもオープン配列のために利用可能です。互換性のある基本型を持つ任意の配列をopenarrayパラメーターに渡すことができ、インデックス型は関係ありません。</target>
        </trans-unit>
        <trans-unit id="b72b9d6119b4da4f2df6e174e7eebce8ade809c0" translate="yes" xml:space="preserve">
          <source>Often fixed size arrays turn out to be too inflexible; procedures should be able to deal with arrays of different sizes. The &lt;span id=&quot;openarray_1&quot;&gt;openarray&lt;/span&gt; type allows this; it can only be used for parameters. Openarrays are always indexed with an &lt;code&gt;int&lt;/code&gt; starting at position 0. The &lt;code&gt;len&lt;/code&gt;, &lt;code&gt;low&lt;/code&gt; and &lt;code&gt;high&lt;/code&gt; operations are available for open arrays too. Any array with a compatible base type can be passed to an openarray parameter, the index type does not matter. In addition to arrays sequences can also be passed to an open array parameter.</source>
          <target state="translated">多くの場合、固定サイズの配列は柔軟性に欠けます。プロシージャは、異なるサイズの配列を処理できる必要があります。&lt;span id=&quot;openarray_1&quot;&gt;openarray&lt;/span&gt;タイプは、このことができます。パラメータにのみ使用できます。Openarraysは、常にでインデックスされている &lt;code&gt;int&lt;/code&gt; の位置0から始まる &lt;code&gt;len&lt;/code&gt; 、 &lt;code&gt;low&lt;/code&gt; 及び &lt;code&gt;high&lt;/code&gt; 動作があまりにもオープン配列のために利用可能です。互換性のある基本型を持つ任意の配列をopenarrayパラメーターに渡すことができ、インデックス型は関係ありません。配列に加えて、シーケンスをオープン配列パラメーターに渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="653db7bf1a8cfcc325e38da27b77e167f0e8e1e1" translate="yes" xml:space="preserve">
          <source>Often it is unclear where the method should belong to: is &lt;code&gt;join&lt;/code&gt; a string method or an array method?</source>
          <target state="translated">メソッドがどこに属すべきか不明確なことがよくあります：文字列メソッドまたは配列メソッドを &lt;code&gt;join&lt;/code&gt; しますか？</target>
        </trans-unit>
        <trans-unit id="c448be5e6f2f721a095ce66e4d5d6809129d6a5f" translate="yes" xml:space="preserve">
          <source>Often, you might work with callback-based API-s. You can wrap them with asynchronous procedures using promises and &lt;code&gt;newPromise&lt;/code&gt;:</source>
          <target state="translated">多くの場合、コールバックベースのAPIを使用することがあります。 &lt;code&gt;newPromise&lt;/code&gt; とnewPromiseを使用して、非同期プロシージャでそれらをラップできます。</target>
        </trans-unit>
        <trans-unit id="13c64dac54bbedb5367bd67136157fa1cbeaf400" translate="yes" xml:space="preserve">
          <source>Old HTML contains tags that have no end tag: &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; for example.</source>
          <target state="translated">古いHTMLには、終了タグのないタグが含まれています（ &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; など）。</target>
        </trans-unit>
        <trans-unit id="b33123903f02b8bf587a5568b29d3def5ad6cd5c" translate="yes" xml:space="preserve">
          <source>On Posix systems, it uses the following parsing rules: Components are separated by whitespace unless the whitespace occurs within &lt;code&gt;&quot;&lt;/code&gt; or &lt;code&gt;'&lt;/code&gt; quotes.</source>
          <target state="translated">Posixシステムでは、次の解析ルールを使用します。 &lt;code&gt;&quot;&lt;/code&gt; または &lt;code&gt;'&lt;/code&gt; 引用符内に空白が出現しない限り、コンポーネントは空白で区切られます。</target>
        </trans-unit>
        <trans-unit id="131615a38d5f682e627f291b00695b764612c48b" translate="yes" xml:space="preserve">
          <source>On Windows this is a noop, &lt;code&gt;symlinkPath&lt;/code&gt; is simply returned.</source>
          <target state="translated">Windowsではこれは &lt;code&gt;symlinkPath&lt;/code&gt; もしないので、symlinkPathが返されます。</target>
        </trans-unit>
        <trans-unit id="70ce96c0b5b17afe1bacf0b1747928e53aaa71eb" translate="yes" xml:space="preserve">
          <source>On Windows, a file is hidden if the file's 'hidden' attribute is set. On Unix-like systems, a file is hidden if it starts with a '.' (period) and is not &lt;em&gt;just&lt;/em&gt; '.' or '..' ' .&quot;</source>
          <target state="translated">Windowsでは、ファイルの 'hidden'属性が設定されている場合、ファイルは非表示になります。Unixライクなシステムでは、「。」で始まるファイルは非表示になります。（ピリオド）&lt;em&gt;だけ&lt;/em&gt;ではありません。または '..' '。」</target>
        </trans-unit>
        <trans-unit id="b49455f655e6af02510b37b400ad079bda32fcf9" translate="yes" xml:space="preserve">
          <source>On Windows, it uses the following parsing rules (see &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/17w5ykft.aspx&quot;&gt;http://msdn.microsoft.com/en-us/library/17w5ykft.aspx&lt;/a&gt; ):</source>
          <target state="translated">Windowsでは、次の解析ルールを使用します（&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/17w5ykft.aspx&quot;&gt;http://msdn.microsoft.com/en-us/library/17w5ykft.aspxを参照&lt;/a&gt;）：</target>
        </trans-unit>
        <trans-unit id="2d9112d9c390a489d1abe81e704b96328351c744" translate="yes" xml:space="preserve">
          <source>On Windows, network paths are considered absolute too.</source>
          <target state="translated">Windowsでは、ネットワークパスも絶対パスとみなされます。</target>
        </trans-unit>
        <trans-unit id="7fd69f94a373ae6ea79b01a75e59c435ad639d26" translate="yes" xml:space="preserve">
          <source>On a case-sensitive filesystem this is done case-sensitively otherwise case-insensitively. Returns:</source>
          <target state="translated">大文字小文字を区別するファイルシステムでは、大文字小文字を区別して処理されます。戻り値。</target>
        </trans-unit>
        <trans-unit id="c8469f270e6308a5204d808346468ba7e32ce5ba" translate="yes" xml:space="preserve">
          <source>On an UNIX system this does nothing. Else it converts '/', '.', '..' to the appropriate things.</source>
          <target state="translated">UNIXシステムでは、これは何もしません。そうでなければ、'/'、'.'、'..を適切なものに変換します。</target>
        </trans-unit>
        <trans-unit id="410676d7292fbbcf827b204fd9a0c07b3ffe5980" translate="yes" xml:space="preserve">
          <source>On backends without branch prediction (JS and the nimscript VM), this template will not affect code execution.</source>
          <target state="translated">ブランチ予測のないバックエンド(JS と nimscript VM)では、このテンプレートはコードの実行に影響を与えません。</target>
        </trans-unit>
        <trans-unit id="71349d230261d02d2bc3058f2f163656370a285c" translate="yes" xml:space="preserve">
          <source>On non Windows systems permissions are copied after the file itself has been copied, which won't happen atomically and could lead to a race condition. If &lt;em&gt;ignorePermissionErrors&lt;/em&gt; is true, errors while reading/setting file attributes will be ignored, otherwise will raise &lt;em&gt;OSError&lt;/em&gt;.</source>
          <target state="translated">Windows以外のシステムでは、ファイル自体がコピーされた後にアクセス権がコピーされます。これは、アトミックに発生せず、競合状態を引き起こす可能性があります。場合&lt;em&gt;ignorePermissionErrorsが&lt;/em&gt;真である読み取り/設定ファイル属性は無視されますが、エラーが、それ以外の場合は発生します&lt;em&gt;OSErrorのを&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="b26734ed023d711198160409aa5df1de55e088f2" translate="yes" xml:space="preserve">
          <source>On non Windows systems permissions are copied after the file or directory itself has been copied, which won't happen atomically and could lead to a race condition. If &lt;em&gt;ignorePermissionErrors&lt;/em&gt; is true, errors while reading/setting file attributes will be ignored, otherwise will raise &lt;em&gt;OSError&lt;/em&gt;.</source>
          <target state="translated">Windows以外のシステムでは、ファイルまたはディレクトリ自体がコピーされた後に権限がコピーされます。これはアトミックに行われず、競合状態を引き起こす可能性があります。場合&lt;em&gt;ignorePermissionErrorsが&lt;/em&gt;真である読み取り/設定ファイル属性は無視されますが、エラーが、それ以外の場合は発生します&lt;em&gt;OSErrorのを&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="dd5345a8b53344aaa0863f04f717114c18227851" translate="yes" xml:space="preserve">
          <source>On non-Windows OSs, this proc conforms to the XDG Base Directory spec. Thus, this proc returns the value of the XDG_CONFIG_HOME environment variable if it is set, and returns the default configuration directory, &quot;~/.config/&quot;, otherwise.</source>
          <target state="translated">Windows 以外の OS では、この proc は XDG Base Directory の仕様に準拠しています。したがって、この proc は、環境変数 XDG_CONFIG_HOME が設定されている場合はその値を返し、設定されていない場合はデフォルトの構成ディレクトリ &quot;~/.config/&quot; を返します。</target>
        </trans-unit>
        <trans-unit id="898bf4553278bc34226081a98acca7cca2299308" translate="yes" xml:space="preserve">
          <source>On posix this will search through the &lt;code&gt;/etc/services&lt;/code&gt; file.</source>
          <target state="translated">posixでは、これは &lt;code&gt;/etc/services&lt;/code&gt; ファイルを検索します。</target>
        </trans-unit>
        <trans-unit id="c51ed0629b09b2b1d09d42b4681c845de22a12d3" translate="yes" xml:space="preserve">
          <source>On posix, if the process has exited because of a signal, 128 + signal number will be returned.</source>
          <target state="translated">posixでは、シグナルが原因でプロセスが終了した場合、128+シグナル番号が返されます。</target>
        </trans-unit>
        <trans-unit id="bd3c38d17d46151c5d354197efeee10f8d783f2b" translate="yes" xml:space="preserve">
          <source>On relative paths, double dot (..) sequences are collapsed if possible. On absolute paths they are always collapsed.</source>
          <target state="translated">相対パスでは、ダブルドット (...)シーケンスは可能であれば折りたたまれます。絶対パスでは常に折りたたまれます。</target>
        </trans-unit>
        <trans-unit id="d20fce5143547ae9c280f86e85a7f988d0055a8f" translate="yes" xml:space="preserve">
          <source>On systems with a concept of &quot;drives&quot;, &lt;em&gt;drive&lt;/em&gt; is used to determine which drive label to use during absolute path conversion. &lt;em&gt;drive&lt;/em&gt; defaults to the drive of the current working directory, and is ignored on systems that do not have a concept of &quot;drives&quot;.</source>
          <target state="translated">「ドライブ」の概念を持つシステムでは、絶対パス変換中に使用するドライブラベルを決定するために&lt;em&gt;ドライブ&lt;/em&gt;が使用されます。&lt;em&gt;driveは&lt;/em&gt;デフォルトで現在の作業ディレクトリの&lt;em&gt;ドライブに&lt;/em&gt;設定され、「ドライブ」の概念を持たないシステムでは無視されます。</target>
        </trans-unit>
        <trans-unit id="4b3066034f3e12801386284630d4449cf120d021" translate="yes" xml:space="preserve">
          <source>On the other hand, if &lt;em&gt;spread&lt;/em&gt; is true, the proc will distribute evenly the remainder of the division across all sequences, which makes the result more suited to multithreading where you are passing equal sized work units to a thread pool and want to maximize core usage.</source>
          <target state="translated">一方、&lt;em&gt;spread&lt;/em&gt;がtrueの場合、procは残りの除算をすべてのシーケンスに均等に分散します。これにより、同じサイズの作業単位をスレッドプールに渡し、コアの使用率を最大化したいマルチスレッドにより適した結果になります。 。</target>
        </trans-unit>
        <trans-unit id="317e86312cac8e36e1b7e5107ff34ed5cc4b1895" translate="yes" xml:space="preserve">
          <source>On the other hand, in Nim's future I would like to replace the VM by native code. A diff algorithm wouldn't work for that. Instead the native code would work with an API like &lt;code&gt;put&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt;:</source>
          <target state="translated">一方、Nimの将来は、VMをネイティブコードに置き換えたいと考えています。差分アルゴリズムはそのためには機能しません。代わりに、ネイティブコードは &lt;code&gt;put&lt;/code&gt; 、 &lt;code&gt;get&lt;/code&gt; のようなAPIで動作します。</target>
        </trans-unit>
        <trans-unit id="c25df01f5e813eafaaa5663850dd783a4040697d" translate="yes" xml:space="preserve">
          <source>On the other hand, in the &lt;em&gt;RingBuffer&lt;/em&gt; example above, the designated generic param is used to instantiate the non-pointer &lt;code&gt;seq&lt;/code&gt; type, which means that the resulting generic type will have covariance that mimics an array or sequence (i.e. it will be covariant only when instantiated with &lt;code&gt;ptr&lt;/code&gt; and &lt;code&gt;ref&lt;/code&gt; types):</source>
          <target state="translated">一方、上記の&lt;em&gt;RingBufferの&lt;/em&gt;例では、指定されたジェネリック&lt;em&gt;パラメーターを&lt;/em&gt;使用して非ポインター &lt;code&gt;seq&lt;/code&gt; タイプをインスタンス化しています。つまり、結果のジェネリックタイプは、配列またはシーケンスを模倣する共分散を持っています（つまり、 &lt;code&gt;ptr&lt;/code&gt; および &lt;code&gt;ref&lt;/code&gt; タイプでインスタンス化されます）：</target>
        </trans-unit>
        <trans-unit id="9c4aef9144f0f23eb3dbf979b7ad1a6367db8432" translate="yes" xml:space="preserve">
          <source>On the other hand, using &lt;code&gt;bind once&lt;/code&gt; types allows you to test for equivalent types used in multiple signatures, without actually requiring any concrete types, thus allowing you to encode implementation-defined types:</source>
          <target state="translated">一方、 &lt;code&gt;bind once&lt;/code&gt; タイプを使用すると、具体的なタイプを実際に必要とせずに、複数のシグネチャで使用される同等のタイプをテストできるため、実装定義タイプをエンコードできます。</target>
        </trans-unit>
        <trans-unit id="d13d679112fedc32342b16f2848339011424e35e" translate="yes" xml:space="preserve">
          <source>On the other hand, when &lt;em&gt;a&lt;/em&gt; is a TableRef instead, then changes to &lt;em&gt;b&lt;/em&gt; also affect &lt;em&gt;a&lt;/em&gt;. Both &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; reference the same data structure:</source>
          <target state="translated">一方、&lt;em&gt;a&lt;/em&gt;が代わりにTableRef である場合&lt;em&gt;、&lt;/em&gt;&lt;em&gt;b&lt;/em&gt;への変更は&lt;em&gt;aに&lt;/em&gt;も影響&lt;em&gt;し&lt;/em&gt;ます。&lt;em&gt;a&lt;/em&gt;と&lt;em&gt;bは&lt;/em&gt;どちらも同じデータ構造を参照します。</target>
        </trans-unit>
        <trans-unit id="37d18afb7f631d26e467ad1c5e79cc58b688edd5" translate="yes" xml:space="preserve">
          <source>On top of generating libraries or standalone applications, Nim offers bidirectional interfacing with the backend targets through generic and specific pragmas.</source>
          <target state="translated">Nimは、ライブラリやスタンドアロンアプリケーションを生成するだけでなく、一般的なプラグマや特定のプラグマを使ってバックエンドターゲットとの双方向のインターフェイスを提供します。</target>
        </trans-unit>
        <trans-unit id="e8edce91442634d7387fe386cb073a4a709ecff8" translate="yes" xml:space="preserve">
          <source>Once bound, type params can appear in the rest of the proc signature:</source>
          <target state="translated">一度バインドされると、型引数は残りの proc シグネチャの中に現れることができます。</target>
        </trans-unit>
        <trans-unit id="3b47a60e99f1394d99a1c045b8c28b67a9fc8f6a" translate="yes" xml:space="preserve">
          <source>Once everything is registered in a dispatcher, you need to call the &lt;code&gt;poll&lt;/code&gt; function in a while loop.</source>
          <target state="translated">すべてがディスパッチャーに登録されたら、whileループで &lt;code&gt;poll&lt;/code&gt; 関数を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="d5654d82c2a3884c2cbc3f1c679468b9597dacae" translate="yes" xml:space="preserve">
          <source>Once index files have been generated for one or more modules, the Nim compiler command &lt;code&gt;buildIndex directory&lt;/code&gt; can be run to go over all the index files in the specified directory to generate a &lt;a href=&quot;https://nim-lang.org/docs/theindex.html&quot;&gt;theindex.html&lt;/a&gt; file.</source>
          <target state="translated">インデックスファイルは、1つのまたは複数のモジュール用に生成されたら、ニムコンパイラコマンド &lt;code&gt;buildIndex directory&lt;/code&gt; 生成するために、指定したディレクトリ内のすべてのインデックスファイルを越えるために実行することができます&lt;a href=&quot;https://nim-lang.org/docs/theindex.html&quot;&gt;theindex.htmlの&lt;/a&gt;ファイルを。</target>
        </trans-unit>
        <trans-unit id="ba237fb6a97d475a345fe56549779371d65c0b14" translate="yes" xml:space="preserve">
          <source>Once you have code like this in place, if the list of raised exception changes the compiler will stop with an error specifying the line of the proc which stopped validating the pragma and the raised exception not being caught, along with the file and line where the uncaught exception is being raised, which may help you locate the offending code which has changed.</source>
          <target state="translated">このようなコードを作成した後、発生した例外のリストに変更があった場合、コンパイラはpragmaの検証を停止した行と発生した例外が捕捉されなかった行、捕捉されなかった例外が発生したファイルと行を指定したエラーで停止します。</target>
        </trans-unit>
        <trans-unit id="e837030f84dd416a1763c3313ad3b60179285a22" translate="yes" xml:space="preserve">
          <source>Once your code is compiled for hot reloading, you can use a framework such as &lt;em&gt;LiveReload &amp;lt;http://livereload.com/&amp;gt;&lt;/em&gt; or &lt;em&gt;BrowserSync &amp;lt;https://browsersync.io/&amp;gt;&lt;/em&gt; to implement the actual reloading behavior in your project.</source>
          <target state="translated">コードがホットリロード用にコンパイルされたら、&lt;em&gt;LiveReload &amp;lt;http://livereload.com/&amp;gt;&lt;/em&gt;や&lt;em&gt;BrowserSync &amp;lt;https://browsersync.io/&amp;gt;&lt;/em&gt;などのフレームワークを使用して、プロジェクトに実際のリロード動作を実装できます。</target>
        </trans-unit>
        <trans-unit id="b2d92002386ccab2c66af44a60e6f00bc53d2d7b" translate="yes" xml:space="preserve">
          <source>Once your macro is finished, there are two ways to invoke it:</source>
          <target state="translated">マクロが完成したら、それを呼び出すには2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="6e2e14b82a6a078671a4c4d9c4519514eb953104" translate="yes" xml:space="preserve">
          <source>One can tell the compiler about the convention that a parameter of name &lt;code&gt;c&lt;/code&gt; should default to type &lt;code&gt;Context&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt; should default to &lt;code&gt;Node&lt;/code&gt; etc.:</source>
          <target state="translated">名前 &lt;code&gt;c&lt;/code&gt; のパラメーターはデフォルトでタイプ &lt;code&gt;Context&lt;/code&gt; に、 &lt;code&gt;n&lt;/code&gt; はデフォルトで &lt;code&gt;Node&lt;/code&gt; に、という規則に従ってコンパイラーに伝えることができます。</target>
        </trans-unit>
        <trans-unit id="b441a31745d56840471825f544c92905083aa43a" translate="yes" xml:space="preserve">
          <source>One can use &lt;span id=&quot;tuple-unpacking_1&quot;&gt;tuple unpacking&lt;/span&gt; to access the tuple's fields:</source>
          <target state="translated">一つは使用することができ&lt;span id=&quot;tuple-unpacking_1&quot;&gt;開梱タプルを&lt;/span&gt;タプルのフィールドにアクセスするには：</target>
        </trans-unit>
        <trans-unit id="f6393931ab1901888c2c40493d5e9e26b0c1998b" translate="yes" xml:space="preserve">
          <source>One of Nim's cool features is pragmas, which allow fine-tuning of various aspects of the language. They come in all types, such as adorning procs and objects, but the standalone &lt;code&gt;emit&lt;/code&gt; pragma shows the basics with the AST.</source>
          <target state="translated">Nimの優れた機能の1つはプラグマです。プラグマを使用すると、言語のさまざまな側面を微調整できます。彼らは、このようなprocsのとオブジェクトを飾るなど、すべてのタイプの、入って来ますが、スタンドアロン &lt;code&gt;emit&lt;/code&gt; プラグマは、ASTとの基本を示しています。</target>
        </trans-unit>
        <trans-unit id="da1a3f527bb79b13e631a70eceb3b03667fef012" translate="yes" xml:space="preserve">
          <source>One or more</source>
          <target state="translated">1つ以上の</target>
        </trans-unit>
        <trans-unit id="2207e76c212f3f40ba5c67c82dea4cf30adfcd7c" translate="yes" xml:space="preserve">
          <source>One or more: Apply expression &lt;em&gt;E&lt;/em&gt; repeatedly to match the text ahead, as long as it succeeds. Consume the matched text (if any) and indicate success if there was at least one match. Otherwise indicate failure.</source>
          <target state="translated">1つ以上：式&lt;em&gt;Eを&lt;/em&gt;繰り返し適用して、成功する限り、前のテキストと一致させます。一致したテキストがある場合はそれを消費し、少なくとも1つの一致があった場合は成功を示します。それ以外の場合は失敗を示します。</target>
        </trans-unit>
        <trans-unit id="fcabe66eb85b400f8ef4fa596004eac08e1527ca" translate="yes" xml:space="preserve">
          <source>One should overload this proc if one wants to overload the &lt;code&gt;in&lt;/code&gt; operator. The parameters are in reverse order! &lt;code&gt;a in b&lt;/code&gt; is a template for &lt;code&gt;contains(b, a)&lt;/code&gt;. This is because the unification algorithm that Nim uses for overload resolution works from left to right. But for the &lt;code&gt;in&lt;/code&gt; operator that would be the wrong direction for this piece of code:</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; 演算子をオーバーロードしたい場合は、このプロシージャをオーバーロードする必要があります。パラメータの順序が逆です！ &lt;code&gt;a in b&lt;/code&gt; は &lt;code&gt;contains(b, a)&lt;/code&gt; テンプレートです。これは、Nimがオーバーロードの解決に使用する統合アルゴリズムが左から右に機能するためです。しかし、このコードの場合、間違った方向にある &lt;code&gt;in&lt;/code&gt; 演算子の場合：</target>
        </trans-unit>
        <trans-unit id="43e4679df7a5cffe918b1e69c86872ec6282c2aa" translate="yes" xml:space="preserve">
          <source>One very nice advantage over regular expressions is that &lt;code&gt;scanf&lt;/code&gt; is extensible with ordinary Nim procs. The proc is either enclosed in &lt;code&gt;${}&lt;/code&gt; or in &lt;code&gt;$[]&lt;/code&gt;. &lt;code&gt;${}&lt;/code&gt; matches and binds the result to a variable (that was passed to the &lt;code&gt;scanf&lt;/code&gt; macro) while &lt;code&gt;$[]&lt;/code&gt; merely optional tokens.</source>
          <target state="translated">正規表現に対する非常に優れた利点の1つは、 &lt;code&gt;scanf&lt;/code&gt; が通常のNimプロシージャで拡張できることです。プロシージャは &lt;code&gt;${}&lt;/code&gt; または &lt;code&gt;$[]&lt;/code&gt; で囲まれています。 &lt;code&gt;${}&lt;/code&gt; 一致し、結果を（ &lt;code&gt;scanf&lt;/code&gt; マクロに渡された）変数にバインドしますが、 &lt;code&gt;$[]&lt;/code&gt; 単なるオプションのトークンです。</target>
        </trans-unit>
        <trans-unit id="7aa20e42e9fac36bab86ec5c3c5c9673fd5be3ee" translate="yes" xml:space="preserve">
          <source>Only available for numbers types. Note that the sequence will be uninitialized. After the creation of the sequence you should assign entries to the sequence instead of adding them.</source>
          <target state="translated">数値型でのみ使用可能です。シーケンスは初期化されないことに注意してください。シーケンスを作成した後は、エントリを追加するのではなく、シーケンスに代入する必要があります。</target>
        </trans-unit>
        <trans-unit id="fbc370c46bbbf0bf1dd85847affcf8aaa6e750bc" translate="yes" xml:space="preserve">
          <source>Only used in PSK ciphersuites.</source>
          <target state="translated">PSK暗号スイートでのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="8eef2b7e3d6c43c01d59bb1d06ba5236003b6a81" translate="yes" xml:space="preserve">
          <source>Open and Closed symbols</source>
          <target state="translated">オープンとクローズの記号</target>
        </trans-unit>
        <trans-unit id="cc4d804a9a52970f4e0eefea5bf1b6f54e9967fb" translate="yes" xml:space="preserve">
          <source>Open arrays</source>
          <target state="translated">オープンアレイ</target>
        </trans-unit>
        <trans-unit id="9ab2517dbed2bed693f918f911730ef79e6d5360" translate="yes" xml:space="preserve">
          <source>Open symbols are looked up in two different contexts: Both the context at definition and the context at instantiation are considered:</source>
          <target state="translated">オープンシンボルは 2 つの異なるコンテキストで検索されます。定義時のコンテキストとインスタンス化時のコンテキストの両方を考慮します。</target>
        </trans-unit>
        <trans-unit id="6d77bab6bef6033d1033ca864d642fde957a56f8" translate="yes" xml:space="preserve">
          <source>OpenSSL can also be statically linked using &lt;code&gt;--dynlibOverride:ssl&lt;/code&gt; for OpenSSL &amp;gt;= 1.1.0. If you want to statically link against OpenSSL 1.0.x, you now have to define the &lt;code&gt;openssl10&lt;/code&gt; symbol via &lt;code&gt;-d:openssl10&lt;/code&gt;.</source>
          <target state="translated">OpenSSLは、OpenSSL&amp;gt; = 1.1.0に対して &lt;code&gt;--dynlibOverride:ssl&lt;/code&gt; を使用して静的にリンクすることもできます。 OpenSSL 1.0.xに対して静的にリンクする場合は、 &lt;code&gt;-d:openssl10&lt;/code&gt; を使用して &lt;code&gt;openssl10&lt;/code&gt; シンボルを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="f0576b64464ad64eb4c53eaa5c4ef2696b5bb4d5" translate="yes" xml:space="preserve">
          <source>OpenSSL support</source>
          <target state="translated">OpenSSL 対応</target>
        </trans-unit>
        <trans-unit id="41785aa4105d96f7aa2063837bbf62b9d0c42838" translate="yes" xml:space="preserve">
          <source>Opening a connection to a database</source>
          <target state="translated">データベースへの接続を開く</target>
        </trans-unit>
        <trans-unit id="28b5a32312a9dd72c3dba0d99cdc13009520ada4" translate="yes" xml:space="preserve">
          <source>Opens a database connection.</source>
          <target state="translated">データベース接続を開きます。</target>
        </trans-unit>
        <trans-unit id="6d89b0ce8e9218e6fea12851e9b880be1e4997d4" translate="yes" xml:space="preserve">
          <source>Opens a file named &lt;em&gt;filename&lt;/em&gt; for reading.</source>
          <target state="translated">&lt;em&gt;filename&lt;/em&gt;という名前の&lt;em&gt;ファイル&lt;/em&gt;を読み取り用に開きます。</target>
        </trans-unit>
        <trans-unit id="a04bc38a4be5b20cb1f277438e98d1933fa9e233" translate="yes" xml:space="preserve">
          <source>Opens a file named &lt;em&gt;filename&lt;/em&gt; for writing. Then writes the &lt;em&gt;content&lt;/em&gt; completely to the file and closes the file afterwards. Raises an IO exception in case of an error.</source>
          <target state="translated">&lt;em&gt;filename&lt;/em&gt;という名前の&lt;em&gt;ファイル&lt;/em&gt;を書き込み用に開きます。次に、&lt;em&gt;コンテンツ&lt;/em&gt;をファイルに完全に書き込み、後でファイルを閉じます。エラーが発生した場合、IO例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="eaf81cf94eccf62abfb731ae2352ef1f7afad678" translate="yes" xml:space="preserve">
          <source>Opens a file named &lt;em&gt;filename&lt;/em&gt; with given &lt;em&gt;mode&lt;/em&gt;.</source>
          <target state="translated">指定された&lt;em&gt;モードで&lt;/em&gt;&lt;em&gt;filename&lt;/em&gt;という名前の&lt;em&gt;ファイル&lt;/em&gt;を開き&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="14f607a4816b562ae72f4697df3c9b5d1e94db71" translate="yes" xml:space="preserve">
          <source>Opens a file specified by the path in &lt;code&gt;filename&lt;/code&gt; using the specified FileMode &lt;code&gt;mode&lt;/code&gt; asynchronously.</source>
          <target state="translated">指定されたFileMode &lt;code&gt;mode&lt;/code&gt; 非同期に使用して、 &lt;code&gt;filename&lt;/code&gt; のパスで指定されたファイルを開きます。</target>
        </trans-unit>
        <trans-unit id="430d32076eb256f0fb1db5fd1333254c368ef1ba" translate="yes" xml:space="preserve">
          <source>Operation</source>
          <target state="translated">Operation</target>
        </trans-unit>
        <trans-unit id="27fea8d4a592d2ef15188641818c4f50cf213496" translate="yes" xml:space="preserve">
          <source>Operations like &lt;code&gt;mitems&lt;/code&gt; or &lt;code&gt;mpairs&lt;/code&gt; (or the now deprecated &lt;code&gt;mget&lt;/code&gt;) that allow a &lt;em&gt;mutating view&lt;/em&gt; into some data structure should start with an &lt;code&gt;m&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mitems&lt;/code&gt; や &lt;code&gt;mpairs&lt;/code&gt; （または現在は非推奨の &lt;code&gt;mget&lt;/code&gt; ）のような操作で、データ構造を変更する&lt;em&gt;ビュー&lt;/em&gt;を許可する操作は、 &lt;code&gt;m&lt;/code&gt; で始める必要があります。</target>
        </trans-unit>
        <trans-unit id="d0e687b079fb70f2208d1f8d2c75d64d74925496" translate="yes" xml:space="preserve">
          <source>Operator</source>
          <target state="translated">Operator</target>
        </trans-unit>
        <trans-unit id="e90414358dbfff0a68e4eb5d68a16978cf197d5a" translate="yes" xml:space="preserve">
          <source>Operators</source>
          <target state="translated">Operators</target>
        </trans-unit>
        <trans-unit id="2eb04c37cf98ac30d71ff1b2f86ff1286db3a060" translate="yes" xml:space="preserve">
          <source>Operators ending in either &lt;code&gt;-&amp;gt;&lt;/code&gt;, &lt;code&gt;~&amp;gt;&lt;/code&gt; or &lt;code&gt;=&amp;gt;&lt;/code&gt; are called &lt;span id=&quot;arrow-like_1&quot;&gt;arrow like&lt;/span&gt;, and have the lowest precedence of all operators.</source>
          <target state="translated">&lt;code&gt;-&amp;gt;&lt;/code&gt; 、 &lt;code&gt;~&amp;gt;&lt;/code&gt; または &lt;code&gt;=&amp;gt;&lt;/code&gt; で終わる演算子は、&lt;span id=&quot;arrow-like_1&quot;&gt;矢印のよう&lt;/span&gt;に呼ばれ、すべての演算子の中で最も優先順位が低くなります。</target>
        </trans-unit>
        <trans-unit id="b9fb7505b70ebf5d6a9bf27d2cc12bbd40ee6af9" translate="yes" xml:space="preserve">
          <source>Operators with one parameter are prefix operators, operators with two parameters are infix operators. (However, the parser distinguishes these from the operator's position within an expression.) There is no way to declare postfix operators: all postfix operators are built-in and handled by the grammar explicitly.</source>
          <target state="translated">1つのパラメータを持つ演算子は接頭演算子、2つのパラメータを持つ演算子は接頭演算子です。(ただし、パーサはこれらを式の中での演算子の位置と区別します)。接頭辞演算子を宣言する方法はありません。すべての接頭辞演算子は組み込みで、文法で明示的に処理されます。</target>
        </trans-unit>
        <trans-unit id="4cad12b6f389d483084d0d553643ba732946936d" translate="yes" xml:space="preserve">
          <source>Optimize the code for speed or size, or disable optimization.</source>
          <target state="translated">速度やサイズのためにコードを最適化したり、最適化を無効にしたりします。</target>
        </trans-unit>
        <trans-unit id="5bc67490a69e2f143ae9471a30d11d13f1cf0a23" translate="yes" xml:space="preserve">
          <source>Optimized version of &lt;a href=&quot;#replace,string,string&quot;&gt;replace&lt;/a&gt; for characters.</source>
          <target state="translated">文字の&lt;a href=&quot;#replace,string,string&quot;&gt;置換の&lt;/a&gt;最適化バージョン。</target>
        </trans-unit>
        <trans-unit id="eeaab884d147b712e7cd622a4a60b4a88154310b" translate="yes" xml:space="preserve">
          <source>Optimizing for Nim</source>
          <target state="translated">ニムのための最適化</target>
        </trans-unit>
        <trans-unit id="b48db209b043766c1b5804d5e27bcd73790ad927" translate="yes" xml:space="preserve">
          <source>Optimizing string handling</source>
          <target state="translated">文字列処理の最適化</target>
        </trans-unit>
        <trans-unit id="74b1e148d5f6b3cc16368babcbaee255c62422d6" translate="yes" xml:space="preserve">
          <source>Optional human readable string to display as hyper link. If the value is not present or is the empty string, the hyper link will be rendered using the term. Prefix whitespace indicates that this entry is not for an API symbol but for a TOC entry.</source>
          <target state="translated">ハイパーリンクとして表示するための人間が読める文字列。値が存在しないか空文字列の場合、ハイパーリンクは用語を使用して表示されます。接頭辞の空白は、このエントリがAPIシンボルではなくTOCエントリであることを示します。</target>
        </trans-unit>
        <trans-unit id="d39225d11f759a6f965920f1aaea6c3af2e9f0dd" translate="yes" xml:space="preserve">
          <source>Optional title or description of the hyper link. Browsers usually display this as a tooltip after hovering a moment over the hyper link.</source>
          <target state="translated">ハイパーリンクのタイトルまたは説明。通常、ブラウザはハイパーリンクの上にカーソルを置いた後にツールチップとして表示します。</target>
        </trans-unit>
        <trans-unit id="bdd0b506837a990803d8edf137f2934329835748" translate="yes" xml:space="preserve">
          <source>Options:</source>
          <target state="translated">Options:</target>
        </trans-unit>
        <trans-unit id="81de498479269f7efcd2ce9f7789819338e86fcf" translate="yes" xml:space="preserve">
          <source>Or if we directly use a ref object:</source>
          <target state="translated">あるいは、直接 ref オブジェクトを使用する場合。</target>
        </trans-unit>
        <trans-unit id="00fcdda14949d42c1610edfba9ca80d41d59564f" translate="yes" xml:space="preserve">
          <source>Or:</source>
          <target state="translated">Or:</target>
        </trans-unit>
        <trans-unit id="21ab442b56e6693d449e1b3316a7c72b27f04270" translate="yes" xml:space="preserve">
          <source>Order of evaluation</source>
          <target state="translated">評価の順番</target>
        </trans-unit>
        <trans-unit id="6fddf2edd42bb52326d95d7ad197008a3ad3c62b" translate="yes" xml:space="preserve">
          <source>Order of evaluation is strictly left-to-right, inside-out as it is typical for most others imperative programming languages:</source>
          <target state="translated">評価の順序は、他のほとんどの命令型プログラミング言語で典型的なように、厳密には左から右、内側から外側になります。</target>
        </trans-unit>
        <trans-unit id="ab66e435888dccd3c76f559e634b263fcd8938b5" translate="yes" xml:space="preserve">
          <source>Ordered choice: Apply expressions &lt;em&gt;A&lt;/em&gt;, ..., &lt;em&gt;Z&lt;/em&gt;, in this order, to the text ahead, until one of them succeeds and possibly consumes some text. Indicate success if one of expressions succeeded. Otherwise do not consume any text and indicate failure.</source>
          <target state="translated">順序付けされた選択：式&lt;em&gt;A&lt;/em&gt;、...、&lt;em&gt;Z&lt;/em&gt;をこの順序でテキストに適用し、そのうちの1つが成功しておそらくテキストを消費するまで。式の1つが成功した場合は、成功を示します。それ以外の場合は、テキストを使用せず、失敗を示します。</target>
        </trans-unit>
        <trans-unit id="bca57d661a7ac85cef723a55cd585566c9d3f621" translate="yes" xml:space="preserve">
          <source>Ordinal types</source>
          <target state="translated">序列型</target>
        </trans-unit>
        <trans-unit id="3119a2318ed75057b08b3960866241e029fabd75" translate="yes" xml:space="preserve">
          <source>Ordinal types are countable and ordered. This property allows the operation of functions as &lt;code&gt;inc&lt;/code&gt;, &lt;code&gt;ord&lt;/code&gt;, &lt;code&gt;dec&lt;/code&gt; on ordinal types to be defined.</source>
          <target state="translated">順序型はカウント可能であり、順序付けされています。このプロパティにより、序数型に対する &lt;code&gt;inc&lt;/code&gt; 、 &lt;code&gt;ord&lt;/code&gt; 、 &lt;code&gt;dec&lt;/code&gt; としての関数の操作を定義できます。</target>
        </trans-unit>
        <trans-unit id="872a8c3d6d59041261f393e2e15158de859ea0da" translate="yes" xml:space="preserve">
          <source>Ordinal types have the following characteristics:</source>
          <target state="translated">序列型には次のような特徴があります。</target>
        </trans-unit>
        <trans-unit id="e629aac27b5777617cee72722956d8b340e2199c" translate="yes" xml:space="preserve">
          <source>Ordinal values have a largest possible value. Trying to count further than the largest value gives a checked runtime or static error.</source>
          <target state="translated">序数値は、可能な限り最大の値を持ちます。最大値よりも大きい値をカウントしようとすると、チェックされたランタイムエラーまたは静的エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="36acb83b7e99f490d0435fdeb44f36127e91db65" translate="yes" xml:space="preserve">
          <source>Ordinal values have a smallest possible value. Trying to count further down than the smallest value gives a checked runtime or static error.</source>
          <target state="translated">序数値は、可能な限り最小の値を持ちます。最小値よりも下の値をカウントしようとすると、チェックされたランタイムエラーまたはスタティックエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="5d640a1890d09eeb8ca875d238db12f1e6d3c3e8" translate="yes" xml:space="preserve">
          <source>Ordinary procs are often preferred over type conversions in Nim: For instance, &lt;code&gt;$&lt;/code&gt; is the &lt;code&gt;toString&lt;/code&gt; operator by convention and &lt;code&gt;toFloat&lt;/code&gt; and &lt;code&gt;toInt&lt;/code&gt; can be used to convert from floating point to integer or vice versa.</source>
          <target state="translated">通常、Nimの型変換よりも通常のprocが好まれます。たとえば、 &lt;code&gt;$&lt;/code&gt; は慣例により &lt;code&gt;toString&lt;/code&gt; 演算子であり、 &lt;code&gt;toFloat&lt;/code&gt; および &lt;code&gt;toInt&lt;/code&gt; を使用して浮動小数点から整数に、またはその逆に変換できます。</target>
        </trans-unit>
        <trans-unit id="6e6a6f2086bb5fe5dbfd17d8d5f502d48759834b" translate="yes" xml:space="preserve">
          <source>Other</source>
          <target state="translated">Other</target>
        </trans-unit>
        <trans-unit id="2ff9f42e32037de9fa807030da493664b568f9f2" translate="yes" xml:space="preserve">
          <source>Other Input Formats</source>
          <target state="translated">その他の入力フォーマット</target>
        </trans-unit>
        <trans-unit id="43a5e3b913b70aa6bbf66b3f9a94594af1d85d6e" translate="yes" xml:space="preserve">
          <source>Other features that are &lt;em&gt;implicitly&lt;/em&gt; triggered cause problems for modularity too. Type converters fall into this category:</source>
          <target state="translated">&lt;em&gt;暗黙的に&lt;/em&gt;トリガーされる他の機能は、モジュール性の問題も引き起こします。タイプコンバーターはこのカテゴリに分類されます。</target>
        </trans-unit>
        <trans-unit id="eaade51f8bd7dc897edf07f1c61fcd7a86afa793" translate="yes" xml:space="preserve">
          <source>Other parts of Nim - like scoping rules or runtime semantics are only described in the, more easily comprehensible, informal manner for now.</source>
          <target state="translated">スコーピングルールやランタイムセマンティクスのようなNimの他の部分は、今のところ、よりわかりやすく、非公式な方法でしか説明されていません。</target>
        </trans-unit>
        <trans-unit id="13760399786dc4b7c7d0f4b3dbf3b00e5ee44753" translate="yes" xml:space="preserve">
          <source>Other strings can be inserted by putting them in &lt;code&gt;''&lt;/code&gt;. For example &lt;code&gt;hh'-&amp;gt;'mm&lt;/code&gt; will give &lt;code&gt;01-&amp;gt;56&lt;/code&gt;. The following characters can be inserted without quoting them: &lt;code&gt;:&lt;/code&gt;&lt;code&gt;-&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;&lt;code&gt;/&lt;/code&gt;&lt;code&gt;[&lt;/code&gt;&lt;code&gt;]&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;. A literal &lt;code&gt;'&lt;/code&gt; can be specified with &lt;code&gt;''&lt;/code&gt;.</source>
          <target state="translated">他の文字列は &lt;code&gt;''&lt;/code&gt; に入れることで挿入できます。たとえば、 &lt;code&gt;hh'-&amp;gt;'mm&lt;/code&gt; は &lt;code&gt;01-&amp;gt;56&lt;/code&gt; を返します。次の文字は、それらを引用することなく挿入することができます： &lt;code&gt;:&lt;/code&gt; &lt;code&gt;-&lt;/code&gt; ( &lt;code&gt;)&lt;/code&gt; &lt;code&gt;(&lt;/code&gt; &lt;code&gt;/&lt;/code&gt; &lt;code&gt;[&lt;/code&gt; &lt;code&gt;]&lt;/code&gt; &lt;code&gt;,&lt;/code&gt; 。リテラル &lt;code&gt;'&lt;/code&gt; は &lt;code&gt;''&lt;/code&gt; で指定できます。</target>
        </trans-unit>
        <trans-unit id="8db18f7107204fed8fe24c5d3014de56d0af6c5d" translate="yes" xml:space="preserve">
          <source>Other tokens</source>
          <target state="translated">その他のトークン</target>
        </trans-unit>
        <trans-unit id="d65b86f3209b622242b01d2656aba539a4c22285" translate="yes" xml:space="preserve">
          <source>Other useful iterators for collections (like arrays and sequences) are</source>
          <target state="translated">他にも、コレクション(配列やシーケンスなど)に便利なイテレータは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="2d2d7e0a58dc8427e382ddd731db370ec009572b" translate="yes" xml:space="preserve">
          <source>Otherwise precedence is determined by the first character.</source>
          <target state="translated">それ以外の場合は、最初の文字が優先されます。</target>
        </trans-unit>
        <trans-unit id="21bc9e76f2a8c2a0eaf537c08d3d36f6d8085e56" translate="yes" xml:space="preserve">
          <source>Otherwise returns an empty string.</source>
          <target state="translated">それ以外の場合は空の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="0bdd4c9ffbb5fd3025e9485c4feb564db99a1d5f" translate="yes" xml:space="preserve">
          <source>Our first attempt will start by modifying the program to generate a compile time string with the &lt;em&gt;generated source code&lt;/em&gt;, which we then pass to the &lt;code&gt;parseStmt&lt;/code&gt; proc from the &lt;a href=&quot;macros&quot;&gt;macros module&lt;/a&gt;. Here is the modified source code implementing the macro:</source>
          <target state="translated">最初の試みは、プログラムを変更して、&lt;em&gt;生成されたソースコード&lt;/em&gt;でコンパイル時文字列を&lt;em&gt;生成すること&lt;/em&gt;から &lt;code&gt;parseStmt&lt;/code&gt; &lt;a href=&quot;macros&quot;&gt;ます&lt;/a&gt;。次に、それをマクロモジュールからparseStmtプロシージャに渡します。次に、マクロを実装する変更されたソースコードを示します。</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Output</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="6ee76fa98a639a0ac269010b7032639b0a171647" translate="yes" xml:space="preserve">
          <source>Outputs:</source>
          <target state="translated">Outputs:</target>
        </trans-unit>
        <trans-unit id="1458e0711b267bc74f8fee698a4064944483ced7" translate="yes" xml:space="preserve">
          <source>Overflow: operation produces a result that exceeds the range of the exponent, for example MAXDOUBLE+0.0000000000001e308.</source>
          <target state="translated">オーバーフロー:操作は、例えば MAXDOUBLE+0.00000000001e308 のように、指数の範囲を超える結果を生成します。</target>
        </trans-unit>
        <trans-unit id="754c102f9b75ce776185c568a14f1c8a51acdc8a" translate="yes" xml:space="preserve">
          <source>Overload resolution can be further influenced by constraining the set of types that will match the type param:</source>
          <target state="translated">過負荷の解決は,型パラメータにマッチする型のセットを制約することで,さらに影響を受けることができます.</target>
        </trans-unit>
        <trans-unit id="7fa7936a516e9b4405cfaaa07e91ba994298a243" translate="yes" xml:space="preserve">
          <source>Overload that validates &lt;code&gt;f&lt;/code&gt; at compile time.</source>
          <target state="translated">コンパイル時に &lt;code&gt;f&lt;/code&gt; を検証するオーバーロード。</target>
        </trans-unit>
        <trans-unit id="9c00e2ea8b8b406447c26bdcb6148e11ef275602" translate="yes" xml:space="preserve">
          <source>Overload that validates &lt;code&gt;format&lt;/code&gt; at compile time.</source>
          <target state="translated">コンパイル時に &lt;code&gt;format&lt;/code&gt; を検証するオーバーロード。</target>
        </trans-unit>
        <trans-unit id="084d89d78f9253e5971aa14b7a1c146ed66021d5" translate="yes" xml:space="preserve">
          <source>Overloaded procedures</source>
          <target state="translated">オーバーロードされた手順</target>
        </trans-unit>
        <trans-unit id="52682dea26ce453286dbc5b5476302bf2f155d52" translate="yes" xml:space="preserve">
          <source>Overloading based on &amp;#x27;var T&amp;#x27;</source>
          <target state="translated">「var T」に基づくオーバーロード</target>
        </trans-unit>
        <trans-unit id="fdfc3d44da0fc76ce20708147d4fa0f06487870d" translate="yes" xml:space="preserve">
          <source>Overloading based on 'var T'</source>
          <target state="translated">'var T' に基づくオーバーロード</target>
        </trans-unit>
        <trans-unit id="376919dad96314f113fa2e51189fad0ab6b8a289" translate="yes" xml:space="preserve">
          <source>Overloading of the subscript operator</source>
          <target state="translated">添え字演算子のオーバーロード</target>
        </trans-unit>
        <trans-unit id="856f6c8643871a65621d9a78bd00b337b84e3743" translate="yes" xml:space="preserve">
          <source>Overloading resolution</source>
          <target state="translated">解像度のオーバーロード</target>
        </trans-unit>
        <trans-unit id="59d786986f63a664027eb772a26d80c3f7a0abe9" translate="yes" xml:space="preserve">
          <source>Override this method in custom loggers. Default implementation does nothing.</source>
          <target state="translated">カスタム ロガーでこのメソッドをオーバーライドします。デフォルトの実装では何もしません。</target>
        </trans-unit>
        <trans-unit id="a7bf096f89a1c09f22a68174532321948a126b7a" translate="yes" xml:space="preserve">
          <source>PCRE is a library of functions to support regular expressions whose syntax and semantics are as close as possible to those of the Perl 5 language.</source>
          <target state="translated">PCREは、Perl 5言語の構文とセマンティクスに可能な限り近い正規表現をサポートするための関数のライブラリです。</target>
        </trans-unit>
        <trans-unit id="595a895491f3a0cc703f76860a5a4b9d42a6ea7f" translate="yes" xml:space="preserve">
          <source>PEG construction</source>
          <target state="translated">PEG構築</target>
        </trans-unit>
        <trans-unit id="118ee2de963e33508b97b815b8c557728d365a9c" translate="yes" xml:space="preserve">
          <source>PEG syntax and semantics</source>
          <target state="translated">PEGの構文と意味</target>
        </trans-unit>
        <trans-unit id="9bde7e84a708b95057b420b93ae5d95c394c2f01" translate="yes" xml:space="preserve">
          <source>PEG vs regular expression</source>
          <target state="translated">PEG対正規表現</target>
        </trans-unit>
        <trans-unit id="567edf4105fe83ec09be7bbd5ad833d065991b7e" translate="yes" xml:space="preserve">
          <source>POSIX character class (only if followed by POSIX syntax)</source>
          <target state="translated">POSIX文字クラス</target>
        </trans-unit>
        <trans-unit id="e3896dc47c849389aad6b68320cef38af4776a63" translate="yes" xml:space="preserve">
          <source>POSIX-compliant systems on conventional hardware are usually pretty easy to port: Add the platform to &lt;code&gt;platform&lt;/code&gt; (if it is not already listed there), check that the OS, System modules work and recompile Nim.</source>
          <target state="translated">従来のハードウェア上のPOSIX準拠システムは、通常、移植が非常に簡単です。プラットフォームが &lt;code&gt;platform&lt;/code&gt; 追加されていない場合（そこにまだリストされていない場合）、OS、システムモジュールが機能することを確認し、Nimを再コンパイルします。</target>
        </trans-unit>
        <trans-unit id="12142e28cc69313a619ae99c351fba5fe84b0a4b" translate="yes" xml:space="preserve">
          <source>POSTs &lt;code&gt;body&lt;/code&gt; to &lt;code&gt;url&lt;/code&gt; and returns the response's body as a string</source>
          <target state="translated">&lt;code&gt;body&lt;/code&gt; を &lt;code&gt;url&lt;/code&gt; POSTし、応答の本文を文字列として返します</target>
        </trans-unit>
        <trans-unit id="2dbc1dded6bee0ca902ff7658892851595e373f2" translate="yes" xml:space="preserve">
          <source>POSTs &lt;code&gt;body&lt;/code&gt; to the &lt;code&gt;url&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;body&lt;/code&gt; を &lt;code&gt;url&lt;/code&gt; POSTし、 &lt;code&gt;Response&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="332b04a11e1cc3787447391399cd62fd1868e0c6" translate="yes" xml:space="preserve">
          <source>Package level objects</source>
          <target state="translated">パッケージレベルオブジェクト</target>
        </trans-unit>
        <trans-unit id="55fd3d981957b0d91d11e46f1e01dfd840b2014b" translate="yes" xml:space="preserve">
          <source>Packed pragma</source>
          <target state="translated">パックされたプラグマ</target>
        </trans-unit>
        <trans-unit id="5510a92cb951dc073e6190edad274f134f704fb8" translate="yes" xml:space="preserve">
          <source>Parallel &amp;amp; Spawn</source>
          <target state="translated">パラレル＆スポーン</target>
        </trans-unit>
        <trans-unit id="3b1299c53c7f5cf485c6482e9c854f429e16cdd6" translate="yes" xml:space="preserve">
          <source>Parallel statement</source>
          <target state="translated">並列文</target>
        </trans-unit>
        <trans-unit id="eec7d291b5a6446b7643c94e8e46ada61a750299" translate="yes" xml:space="preserve">
          <source>Parameter constraints</source>
          <target state="translated">パラメータ制約</target>
        </trans-unit>
        <trans-unit id="6edec2e5d0a7a5dbb4aae5b4adaf9693a07b89ea" translate="yes" xml:space="preserve">
          <source>Parameter constraints can also be used for ordinary routine parameters; these constraints affect ordinary overloading resolution then:</source>
          <target state="translated">パラメータ制約は、通常のルーチンパラメータにも使用することができ、これらの制約は、その後、通常のオーバーロードの解像度に影響を与えます。</target>
        </trans-unit>
        <trans-unit id="f1a6890392c7940ddb0108d029ad337fb538b0dc" translate="yes" xml:space="preserve">
          <source>Parameter substitution</source>
          <target state="translated">パラメータの置換</target>
        </trans-unit>
        <trans-unit id="a975eea30db9fa05003e3b5097688bd49ec7e01b" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Parameters</target>
        </trans-unit>
        <trans-unit id="248b028facc0fd21c2e902405b8d5a47c01d6c40" translate="yes" xml:space="preserve">
          <source>Parameters and their defaults:</source>
          <target state="translated">パラメータとそのデフォルト値。</target>
        </trans-unit>
        <trans-unit id="0f206e21ffd2fb787832ab9df479679c8199f0e6" translate="yes" xml:space="preserve">
          <source>Parameters are immutable in the procedure body. By default, their value cannot be changed because this allows the compiler to implement parameter passing in the most efficient way. If a mutable variable is needed inside the procedure, it has to be declared with &lt;code&gt;var&lt;/code&gt; in the procedure body. Shadowing the parameter name is possible, and actually an idiom:</source>
          <target state="translated">パラメータは、プロシージャ本体では不変です。デフォルトでは、コンパイラーはパラメーターの受け渡しを最も効率的な方法で実装できるため、これらの値を変更することはできません。プロシージャ内で可変変数が必要な場合は、プロシージャ本体で &lt;code&gt;var&lt;/code&gt; を使用して宣言する必要があります。パラメータ名をシャドウすることは可能で、実際にはイディオムです：</target>
        </trans-unit>
        <trans-unit id="0fa46df5cd24d9e242819c5e1aa5a6733dc8ec59" translate="yes" xml:space="preserve">
          <source>Parameters can be declared mutable and so allow the proc to modify those arguments, by using the type modifier &lt;em&gt;var&lt;/em&gt;.</source>
          <target state="translated">パラメータは変更可能として宣言できるため、型修飾子&lt;em&gt;var&lt;/em&gt;を使用して、プロシージャがこれらの引数を変更できるようにします。</target>
        </trans-unit>
        <trans-unit id="bb1a33ba432c2fafb1613ca7e699e06e64431463" translate="yes" xml:space="preserve">
          <source>Parameters in a pattern are type checked in the matching process. If a parameter is of the type &lt;code&gt;varargs&lt;/code&gt; it is treated specially and it can match 0 or more arguments in the AST to be matched against:</source>
          <target state="translated">パターン内のパラメーターは、マッチングプロセスで型チェックされます。パラメータが &lt;code&gt;varargs&lt;/code&gt; 型の場合は特別に扱われ、ASTの0個以上の引数と照合して照合することができます。</target>
        </trans-unit>
        <trans-unit id="381c775599d6e4185d4410725809e360928357cd" translate="yes" xml:space="preserve">
          <source>Parameters:</source>
          <target state="translated">Parameters:</target>
        </trans-unit>
        <trans-unit id="f9627107a88876f4aaf6d7e0b0c19984c3a631ae" translate="yes" xml:space="preserve">
          <source>Parentheses</source>
          <target state="translated">Parentheses</target>
        </trans-unit>
        <trans-unit id="127effbb71ba19570ab235baa525f232fbd22004" translate="yes" xml:space="preserve">
          <source>Parentheses for affecting operator precedence or tuple construction are built with the &lt;code&gt;nnkPar&lt;/code&gt; node.</source>
          <target state="translated">演算子の優先順位またはタプルの構成に影響を与える括弧は、 &lt;code&gt;nnkPar&lt;/code&gt; ノードで作成されます。</target>
        </trans-unit>
        <trans-unit id="efdb99a054fb37fae9696b10ed15efeeb9f36b28" translate="yes" xml:space="preserve">
          <source>Parsers</source>
          <target state="translated">Parsers</target>
        </trans-unit>
        <trans-unit id="92c8de0d487854ee3be6455d253f7500550cee2d" translate="yes" xml:space="preserve">
          <source>Parses &lt;code&gt;input&lt;/code&gt; as a &lt;code&gt;DateTime&lt;/code&gt; using the format specified by &lt;code&gt;f&lt;/code&gt;. If no UTC offset was parsed, then &lt;code&gt;input&lt;/code&gt; is assumed to be specified in the &lt;code&gt;zone&lt;/code&gt; timezone. If a UTC offset was parsed, the result will be converted to the &lt;code&gt;zone&lt;/code&gt; timezone.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; で指定された形式を使用して、 &lt;code&gt;input&lt;/code&gt; を &lt;code&gt;DateTime&lt;/code&gt; として解析します。UTCオフセットが解析されなかった場合、 &lt;code&gt;input&lt;/code&gt; は &lt;code&gt;zone&lt;/code&gt; タイムゾーンで指定されていると見なされます。UTCオフセットが解析された場合、結果は &lt;code&gt;zone&lt;/code&gt; タイムゾーンに変換されます。</target>
        </trans-unit>
        <trans-unit id="7ca7a029bb84bff8ec1168a8bf88514632d40ff1" translate="yes" xml:space="preserve">
          <source>Parses &lt;em&gt;file&lt;/em&gt; into a &lt;em&gt;JsonNode&lt;/em&gt;. If &lt;em&gt;file&lt;/em&gt; contains extra data, it will raise &lt;em&gt;JsonParsingError&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;ファイル&lt;/em&gt;を&lt;em&gt;JsonNodeに&lt;/em&gt;解析し&lt;em&gt;ます&lt;/em&gt;。場合は&lt;em&gt;、ファイルが&lt;/em&gt;余分なデータが含まれ、それが発生します&lt;em&gt;JsonParsingErrorを&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="c31988daf224c3e5481844d9affd370b85ab0c4b" translate="yes" xml:space="preserve">
          <source>Parses JSON from &lt;em&gt;buffer&lt;/em&gt;. If &lt;em&gt;buffer&lt;/em&gt; contains extra data, it will raise &lt;em&gt;JsonParsingError&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;バッファ&lt;/em&gt;からJSONを解析します。場合は&lt;em&gt;、バッファは&lt;/em&gt;、余分なデータが含まれ、それが発生します&lt;em&gt;JsonParsingErrorを&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="c83d8c3603707a9ecc2dd84a9a6037c204951a36" translate="yes" xml:space="preserve">
          <source>Parses Sexp from &lt;em&gt;buffer&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;バッファ&lt;/em&gt;からSexpを解析します。</target>
        </trans-unit>
        <trans-unit id="ac7b270c2a1c4209369629ad62e2046102416eaf" translate="yes" xml:space="preserve">
          <source>Parses a URI and returns it.</source>
          <target state="translated">URIをパースしてそれを返します。</target>
        </trans-unit>
        <trans-unit id="fec7d8bb1b5440dcea9f8d95176ab435560994e3" translate="yes" xml:space="preserve">
          <source>Parses a URI. The &lt;em&gt;result&lt;/em&gt; variable will be cleared before.</source>
          <target state="translated">URIを解析します。&lt;em&gt;結果&lt;/em&gt;変数は、前にクリアされます。</target>
        </trans-unit>
        <trans-unit id="d18146fc030fe2a6ab8885a719a469a90008e5f4" translate="yes" xml:space="preserve">
          <source>Parses a binary integer value contained in &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;sに&lt;/em&gt;含まれる2進整数値を解析します。</target>
        </trans-unit>
        <trans-unit id="835e144c44ca9aa9a0c3bc52fffba2a23a756070" translate="yes" xml:space="preserve">
          <source>Parses a decimal floating point value contained in &lt;em&gt;s&lt;/em&gt;. If &lt;em&gt;s&lt;/em&gt; is not a valid floating point number, &lt;em&gt;ValueError&lt;/em&gt; is raised. &lt;code&gt;NAN&lt;/code&gt;, &lt;code&gt;INF&lt;/code&gt;, &lt;code&gt;-INF&lt;/code&gt; are also supported (case insensitive comparison).</source>
          <target state="translated">&lt;em&gt;sに&lt;/em&gt;含まれる10進浮動小数点値を解析します。&lt;em&gt;s&lt;/em&gt;が有効な浮動小数点数でない場合、&lt;em&gt;ValueError&lt;/em&gt;が&lt;em&gt;送出&lt;/em&gt;されます。 &lt;code&gt;NAN&lt;/code&gt; 、 &lt;code&gt;INF&lt;/code&gt; 、 &lt;code&gt;-INF&lt;/code&gt; もサポートされています（大文字と小文字を区別しない比較）。</target>
        </trans-unit>
        <trans-unit id="95acbbe3645191c11345e3af876888af39d5fe0a" translate="yes" xml:space="preserve">
          <source>Parses a decimal integer value contained in &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;sに&lt;/em&gt;含まれる10進整数値を解析します。</target>
        </trans-unit>
        <trans-unit id="ed0e8f3670947e2eebff34e6614bd7b5cc662d7c" translate="yes" xml:space="preserve">
          <source>Parses a decimal unsigned integer value contained in &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;sに&lt;/em&gt;含まれる10進数の符号なし整数値を解析します。</target>
        </trans-unit>
        <trans-unit id="2552cef1d7b2fd79db3dae66bea932dea01f7f48" translate="yes" xml:space="preserve">
          <source>Parses a hexadecimal integer value contained in &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;sに&lt;/em&gt;含まれる16進整数値を解析します。</target>
        </trans-unit>
        <trans-unit id="fc2488ed821276fa08bab01cec3a67e70fc3f6f8" translate="yes" xml:space="preserve">
          <source>Parses a hexadecimal number and stores its value in &lt;code&gt;number&lt;/code&gt;.</source>
          <target state="translated">16進数を解析し、その値を &lt;code&gt;number&lt;/code&gt; に格納します。</target>
        </trans-unit>
        <trans-unit id="52772096a4233cc51e1600d105de8977b1778a95" translate="yes" xml:space="preserve">
          <source>Parses a single raw header HTTP line into key value pairs.</source>
          <target state="translated">単一の生のヘッダHTTP行をキー値のペアに解析します。</target>
        </trans-unit>
        <trans-unit id="42c29907580552c41f83b6dee8503b24b04303ca" translate="yes" xml:space="preserve">
          <source>Parses a value into a &lt;em&gt;bool&lt;/em&gt;.</source>
          <target state="translated">値を&lt;em&gt;ブール&lt;/em&gt;値に解析します。</target>
        </trans-unit>
        <trans-unit id="410e8b23cd46010b49b0dd0e3914dc4ecc9e1ca5" translate="yes" xml:space="preserve">
          <source>Parses an IP address Raises EInvalidValue on error</source>
          <target state="translated">IP アドレスをパースする エラー時に EInvalidValue を発生させる</target>
        </trans-unit>
        <trans-unit id="2a6850ab1bcfc38172914099c85e87137a9e1a8e" translate="yes" xml:space="preserve">
          <source>Parses an binary number and stores its value in &lt;code&gt;number&lt;/code&gt;. Returns the number of the parsed characters or 0 in case of an error.</source>
          <target state="translated">2進数を解析し、その値を &lt;code&gt;number&lt;/code&gt; に格納します。解析された文字の数を返します。エラーの場合は0を返します。</target>
        </trans-unit>
        <trans-unit id="52ecab5e0e696e851dd2d8e05a4efb7aef630d77" translate="yes" xml:space="preserve">
          <source>Parses an enum &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">列挙 &lt;code&gt;T&lt;/code&gt; を解析します。</target>
        </trans-unit>
        <trans-unit id="1300628673257382b63897d5a63358653f3d654e" translate="yes" xml:space="preserve">
          <source>Parses an octal integer value contained in &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;sに&lt;/em&gt;含まれる8進整数値を解析します。</target>
        </trans-unit>
        <trans-unit id="77b4c05a71f0a355fc50b443e92107cc745a1c8a" translate="yes" xml:space="preserve">
          <source>Parses an octal number and stores its value in &lt;code&gt;number&lt;/code&gt;. Returns the number of the parsed characters or 0 in case of an error.</source>
          <target state="translated">8進数を解析し、その値を &lt;code&gt;number&lt;/code&gt; に格納します。解析された文字の数を返します。エラーの場合は0を返します。</target>
        </trans-unit>
        <trans-unit id="541ca66d4dbc79404bc942d6bfb6c2be8439048d" translate="yes" xml:space="preserve">
          <source>Parses from a buffer &lt;em&gt;s&lt;/em&gt; into a &lt;em&gt;SexpNode&lt;/em&gt;.</source>
          <target state="translated">バッファからパース&lt;em&gt;S&lt;/em&gt;に&lt;em&gt;SexpNode&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="d8f09fb29abff457c84ba95e0bc8011331d06c2a" translate="yes" xml:space="preserve">
          <source>Parses from a stream &lt;em&gt;s&lt;/em&gt; into a &lt;em&gt;JsonNode&lt;/em&gt;. &lt;em&gt;filename&lt;/em&gt; is only needed for nice error messages. If &lt;em&gt;s&lt;/em&gt; contains extra data, it will raise &lt;em&gt;JsonParsingError&lt;/em&gt;.</source>
          <target state="translated">ストリームから解析し&lt;em&gt;、S&lt;/em&gt;に&lt;em&gt;JsonNode&lt;/em&gt;。&lt;em&gt;filename&lt;/em&gt;は、素敵なエラーメッセージにのみ必要です。場合は&lt;em&gt;sが&lt;/em&gt;余分なデータが含まれ、それが発生します&lt;em&gt;JsonParsingErrorを&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="7392bd1dfd3616a852a08b90df502af326331916" translate="yes" xml:space="preserve">
          <source>Parses the HTML from stream &lt;em&gt;s&lt;/em&gt; and returns a &lt;code&gt;XmlNode&lt;/code&gt;. All parsing errors are ignored.</source>
          <target state="translated">ストリーム&lt;em&gt;s&lt;/em&gt;からHTMLを解析し、 &lt;code&gt;XmlNode&lt;/code&gt; を返します。解析エラーはすべて無視されます。</target>
        </trans-unit>
        <trans-unit id="9d6b6e4325404bd4282ae6db6786d3c6cdde20d0" translate="yes" xml:space="preserve">
          <source>Parses the HTML from string &lt;code&gt;html&lt;/code&gt; and returns a &lt;code&gt;XmlNode&lt;/code&gt;. All parsing errors are ignored.</source>
          <target state="translated">文字列 &lt;code&gt;html&lt;/code&gt; からHTMLを解析し、 &lt;code&gt;XmlNode&lt;/code&gt; を返します。解析エラーはすべて無視されます。</target>
        </trans-unit>
        <trans-unit id="1b291cc50ee23e8b1901cb7970d7d44a0a902e25" translate="yes" xml:space="preserve">
          <source>Parses the XML from stream &lt;code&gt;s&lt;/code&gt; and returns a &lt;code&gt;XmlNode&lt;/code&gt;. All parsing errors are turned into an &lt;code&gt;XmlError&lt;/code&gt; exception.</source>
          <target state="translated">ストリーム &lt;code&gt;s&lt;/code&gt; からXMLを解析し、 &lt;code&gt;XmlNode&lt;/code&gt; を返します。すべての解析エラーは &lt;code&gt;XmlError&lt;/code&gt; 例外に変換されます。</target>
        </trans-unit>
        <trans-unit id="377e589d2efc7bd7f0d783557a0305ff1980a8dc" translate="yes" xml:space="preserve">
          <source>Parses the XML from stream &lt;code&gt;s&lt;/code&gt; and returns a &lt;code&gt;XmlNode&lt;/code&gt;. Every occurred parsing error is added to the &lt;code&gt;errors&lt;/code&gt; sequence.</source>
          <target state="translated">ストリーム &lt;code&gt;s&lt;/code&gt; からXMLを解析し、 &lt;code&gt;XmlNode&lt;/code&gt; を返します。発生したすべての解析エラーは、 &lt;code&gt;errors&lt;/code&gt; シーケンスに追加されます。</target>
        </trans-unit>
        <trans-unit id="693b35a301ba4a3e77a1617dfcdfe0c2eea41014" translate="yes" xml:space="preserve">
          <source>Parses the XML from stream &lt;em&gt;s&lt;/em&gt; and returns a &lt;code&gt;XmlNode&lt;/code&gt;. Every occurred parsing error is added to the &lt;em&gt;errors&lt;/em&gt; sequence.</source>
          <target state="translated">ストリーム&lt;em&gt;s&lt;/em&gt;からXMLを解析し、 &lt;code&gt;XmlNode&lt;/code&gt; を返します。発生したすべての解析エラーは、&lt;em&gt;エラー&lt;/em&gt;シーケンスに追加されます。</target>
        </trans-unit>
        <trans-unit id="000730be1a0f93678cf7000c57f6c22e66d7b0b4" translate="yes" xml:space="preserve">
          <source>Parses the XML from string &lt;code&gt;str&lt;/code&gt; and returns a &lt;code&gt;XmlNode&lt;/code&gt;. All parsing errors are turned into an &lt;code&gt;XmlError&lt;/code&gt; exception.</source>
          <target state="translated">文字列 &lt;code&gt;str&lt;/code&gt; からXMLを解析し、 &lt;code&gt;XmlNode&lt;/code&gt; を返します。すべての解析エラーは &lt;code&gt;XmlError&lt;/code&gt; 例外に変換されます。</target>
        </trans-unit>
        <trans-unit id="0d46a080325775ed12fd3ffd5aa0a8d40db7175c" translate="yes" xml:space="preserve">
          <source>Parsing a string into an AST which consists of &lt;em&gt;Peg&lt;/em&gt; nodes with the &lt;em&gt;peg&lt;/em&gt; proc.</source>
          <target state="translated">成るASTに文字列を解析&lt;em&gt;ペグと、&lt;/em&gt;を有するノード&lt;em&gt;PEG&lt;/em&gt; PROC。</target>
        </trans-unit>
        <trans-unit id="6d1213aa0c980986abc9cfe893f564f800d35d51" translate="yes" xml:space="preserve">
          <source>Parsing and Formatting Dates</source>
          <target state="translated">日付のパースと書式設定</target>
        </trans-unit>
        <trans-unit id="e8de9b67e60bfc9e5a53216bb30c98671e868ddb" translate="yes" xml:space="preserve">
          <source>Parsing idetools output</source>
          <target state="translated">idetools の出力を解析する</target>
        </trans-unit>
        <trans-unit id="1800737251d65799e8ed6a97afb24d8a2b9918ef" translate="yes" xml:space="preserve">
          <source>Parsing nimsuggest output</source>
          <target state="translated">nimsuggest 出力のパース</target>
        </trans-unit>
        <trans-unit id="5a01db6f2d606f2a701b77fbab0924cc899be0e3" translate="yes" xml:space="preserve">
          <source>Part 2</source>
          <target state="translated">第二部</target>
        </trans-unit>
        <trans-unit id="859cfaaaeaf6a8ced2a1b65b58557fb95d875c48" translate="yes" xml:space="preserve">
          <source>Part of a pattern that is in square brackets is called a &quot;character class&quot;. In a character class the only metacharacters are:</source>
          <target state="translated">括弧内にあるパターンの一部を「文字クラス」と呼びます。文字クラスでは、メタキャラクタのみが使用されます。</target>
        </trans-unit>
        <trans-unit id="9269695463c8a5faa720fae720afebc9f6ef9e73" translate="yes" xml:space="preserve">
          <source>Partial Output:</source>
          <target state="translated">部分的に出力します。</target>
        </trans-unit>
        <trans-unit id="d2ed3ad5db69194cd3d8766327afd474a9733e0f" translate="yes" xml:space="preserve">
          <source>Partially supported OS: Windows (only sockets and user events), Solaris (files, sockets, handles and user events). Android (files, sockets, handles and user events).</source>
          <target state="translated">一部対応OS。Windows (ソケットとユーザーイベントのみ)、Solaris (ファイル、ソケット、ハンドル、ユーザーイベント)Android (ファイル、ソケット、ハンドル、ユーザーイベント)。</target>
        </trans-unit>
        <trans-unit id="8a171b6aa4025579258fcd2c8b48f01cfb4c51c1" translate="yes" xml:space="preserve">
          <source>Parts of the string that are enclosed in the curly braces are interpreted as Nim code, to escape an &lt;code&gt;{&lt;/code&gt; or &lt;code&gt;}&lt;/code&gt; double it.</source>
          <target state="translated">中括弧で囲まれた文字列の部分は、 &lt;code&gt;{&lt;/code&gt; または &lt;code&gt;}&lt;/code&gt; でエスケープするためにNimコードとして解釈されます。</target>
        </trans-unit>
        <trans-unit id="8aca8fe67e97585de445057c4943ea7782cef87e" translate="yes" xml:space="preserve">
          <source>Pass the filename and an array of times to set the access and modification times respectively. If you pass nil as the array both attributes will be set to the current time.</source>
          <target state="translated">ファイル名と時刻の配列を渡して、それぞれアクセス時刻と変更時刻を設定します。配列に nil を渡すと、両方の属性が現在の時刻に設定されます。</target>
        </trans-unit>
        <trans-unit id="c6c5b9444c85f22cfca7c6842fd1c77d3d446d19" translate="yes" xml:space="preserve">
          <source>PassC pragma</source>
          <target state="translated">パスCプラグマ</target>
        </trans-unit>
        <trans-unit id="27478f48296583129eac069e5087f2d2b0da482f" translate="yes" xml:space="preserve">
          <source>PassL pragma</source>
          <target state="translated">パスエルプラグマ</target>
        </trans-unit>
        <trans-unit id="c1f8c2a994a126eaf7103a7c43409efdd75a983d" translate="yes" xml:space="preserve">
          <source>Passing a code block to a template</source>
          <target state="translated">コードブロックをテンプレートに渡す</target>
        </trans-unit>
        <trans-unit id="519e39132bb98418cc0483cc446ccf5f3c8dcffe" translate="yes" xml:space="preserve">
          <source>Path</source>
          <target state="translated">Path</target>
        </trans-unit>
        <trans-unit id="e2643c3434dcb6df9c1e72e6681f1bedc8ada4a0" translate="yes" xml:space="preserve">
          <source>Path names are syntactically either Nim identifiers or string literals. If the path name is not a valid Nim identifier it needs to be a string literal:</source>
          <target state="translated">パス名は構文的には Nim 識別子か文字列リテラルのいずれかです。パス名が有効な Nim 識別子でない場合は、文字列リテラルにする必要があります。</target>
        </trans-unit>
        <trans-unit id="1fff6a31661b491fc40cc9c1ad7fe5e479cb7500" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Pattern</target>
        </trans-unit>
        <trans-unit id="7b6c2f9c3abcefd6eb4c4d0a0b5007e45b97a311" translate="yes" xml:space="preserve">
          <source>Pattern operators</source>
          <target state="translated">パターン演算子</target>
        </trans-unit>
        <trans-unit id="d82e5a058ac8dd2705ce01808437b2ad8b5084fa" translate="yes" xml:space="preserve">
          <source>Peeks a line from a stream &lt;em&gt;s&lt;/em&gt;. Note: This is not very efficient. Raises &lt;em&gt;EIO&lt;/em&gt; if an error occurred.</source>
          <target state="translated">ストリーム&lt;em&gt;s&lt;/em&gt;からラインをピークします。注：これはあまり効率的ではありません。発生させ&lt;em&gt;EIOは、&lt;/em&gt;エラーが発生した場合。</target>
        </trans-unit>
        <trans-unit id="b5d4c57147bf5dd3bbcaf7bdfd58b0b2226cf25d" translate="yes" xml:space="preserve">
          <source>Per convention, all strings are UTF-8 strings, but this is not enforced. For example, when reading strings from binary files, they are merely a sequence of bytes. The index operation &lt;code&gt;s[i]&lt;/code&gt; means the i-th &lt;em&gt;char&lt;/em&gt; of &lt;code&gt;s&lt;/code&gt;, not the i-th &lt;em&gt;unichar&lt;/em&gt;. The iterator &lt;code&gt;runes&lt;/code&gt; from the &lt;a href=&quot;unicode&quot;&gt;unicode module&lt;/a&gt; can be used for iteration over all Unicode characters.</source>
          <target state="translated">規約により、すべての文字列はUTF-8文字列ですが、これは強制されていません。たとえば、バイナリファイルから文字列を読み取る場合、それらは単なるバイトのシーケンスです。インデックス操作 &lt;code&gt;s[i]&lt;/code&gt; は、i 番目の&lt;em&gt;unichar&lt;/em&gt;ではなく、 &lt;code&gt;s&lt;/code&gt; の i番目の&lt;em&gt;char&lt;/em&gt;を意味します。&lt;a href=&quot;unicode&quot;&gt;ユニコードモジュール&lt;/a&gt;からのイテレータ &lt;code&gt;runes&lt;/code&gt; は、すべてのユニコード文字の反復に使用できます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ff72f9179ae9e4a2376a59a5c8d0eeb265a32c2e" translate="yes" xml:space="preserve">
          <source>Per default templates are &lt;span id=&quot;hygienic_2&quot;&gt;hygienic&lt;/span&gt;: Local identifiers declared in a template cannot be accessed in the instantiation context:</source>
          <target state="translated">デフォルトのテンプレートは&lt;span id=&quot;hygienic_2&quot;&gt;衛生的&lt;/span&gt;です：テンプレートで宣言されたローカル識別子はインスタンス化のコンテキストではアクセスできません：</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="c1cd9242728b5c1a926850fd325c67f2fc62426b" translate="yes" xml:space="preserve">
          <source>Performs a deep copy of &lt;em&gt;a&lt;/em&gt;.</source>
          <target state="translated">の深いコピーを実行。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="88fc1469f461af1ae348df9943fa1632f7f69e69" translate="yes" xml:space="preserve">
          <source>Performs a left rotation on a range of elements. If you want to rotate right, use a negative &lt;code&gt;dist&lt;/code&gt;. Specifically, &lt;code&gt;rotateLeft&lt;/code&gt; rotates the elements at &lt;code&gt;slice&lt;/code&gt; by &lt;code&gt;dist&lt;/code&gt; positions. The element at index &lt;code&gt;slice.a + dist&lt;/code&gt; will be at index &lt;code&gt;slice.a&lt;/code&gt;. The element at index &lt;code&gt;slice.b&lt;/code&gt; will be at &lt;code&gt;slice.a + dist -1&lt;/code&gt;. The element at index &lt;code&gt;slice.a&lt;/code&gt; will be at &lt;code&gt;slice.b + 1 - dist&lt;/code&gt;. The element at index &lt;code&gt;slice.a + dist - 1&lt;/code&gt; will be at &lt;code&gt;slice.b&lt;/code&gt;.</source>
          <target state="translated">要素の範囲で左回転を実行します。右回転したい場合は、負の &lt;code&gt;dist&lt;/code&gt; を使用してください。具体的には、 &lt;code&gt;rotateLeft&lt;/code&gt; はで要素回転 &lt;code&gt;slice&lt;/code&gt; によって &lt;code&gt;dist&lt;/code&gt; 位置。インデックス &lt;code&gt;slice.a + dist&lt;/code&gt; の要素は、インデックス &lt;code&gt;slice.a&lt;/code&gt; にあります。インデックス &lt;code&gt;slice.b&lt;/code&gt; の要素は、 &lt;code&gt;slice.a + dist -1&lt;/code&gt; ます。インデックス &lt;code&gt;slice.a&lt;/code&gt; の要素は、 &lt;code&gt;slice.b + 1 - dist&lt;/code&gt; ます。インデックスにある要素 &lt;code&gt;slice.a + dist - 1&lt;/code&gt; になります &lt;code&gt;slice.b&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d668e43bf0a5743410bd7ab9e0edf6b66e6ccd9e" translate="yes" xml:space="preserve">
          <source>Pipe operator</source>
          <target state="translated">パイプオペレーター</target>
        </trans-unit>
        <trans-unit id="91502d9216b226c484d80d6fd0eebe1eb9ccca35" translate="yes" xml:space="preserve">
          <source>Please note that &lt;code&gt;static T&lt;/code&gt; is just a syntactic convenience for the underlying generic type &lt;code&gt;static[T]&lt;/code&gt;. The type param can be omitted to obtain the type class of all values known at compile-time. A more specific type class can be created by instantiating &lt;code&gt;static&lt;/code&gt; with another type class.</source>
          <target state="translated">&lt;code&gt;static T&lt;/code&gt; は、基礎となるジェネリック型 &lt;code&gt;static[T]&lt;/code&gt; 構文上の便宜にすぎないことに注意してください。タイプparamを省略して、コンパイル時に既知のすべての値のタイプクラスを取得できます。 &lt;code&gt;static&lt;/code&gt; を別の型クラスでインスタンス化することにより、より具体的な型クラスを作成できます。</target>
        </trans-unit>
        <trans-unit id="b6a448e8765ceed97b70d742a1fbff8cbe9813f8" translate="yes" xml:space="preserve">
          <source>Please note that Nim will treat the user-defined pointer-like types as proper alternatives to the built-in pointer types. That is, types such as &lt;em&gt;seq[AnnotatedPtr[T]]&lt;/em&gt; or &lt;em&gt;RingBuffer[AnnotatedPtr[T]]&lt;/em&gt; will also be considered covariant and you can create new pointer-like types by instantiating other user-defined pointer-like types.</source>
          <target state="translated">Nimはユーザー定義のポインターのような型を組み込みのポインター型の適切な代替として扱うことに注意してください。つまり、&lt;em&gt;seq [AnnotatedPtr [T]]&lt;/em&gt;や&lt;em&gt;RingBuffer [AnnotatedPtr [T]]&lt;/em&gt;などの型も共変と見なされ、他のユーザー定義のポインターのような型をインスタンス化することにより、新しいポインターのような型を作成できます。</target>
        </trans-unit>
        <trans-unit id="c6121f8f77a7e5843548ab29d76b72f1fdf494af" translate="yes" xml:space="preserve">
          <source>Please note that generic concepts such as &lt;em&gt;Enumerable[T]&lt;/em&gt; can be matched against concrete types such as &lt;em&gt;string&lt;/em&gt;. Nim doesn't require the concept type to have the same number of parameters as the type being matched. If you wish to express a requirement towards the generic parameters of the matched type, you can use a type mapping operator such as &lt;em&gt;genericHead&lt;/em&gt; or &lt;em&gt;stripGenericParams&lt;/em&gt; within the body of the concept to obtain the uninstantiated version of the type, which you can then try to instantiate in any required way. For example, here is how one might define the classic &lt;em&gt;Functor&lt;/em&gt; concept from Haskell and then demonstrate that Nim's &lt;em&gt;Option[T]&lt;/em&gt; type is an instance of it:</source>
          <target state="translated">&lt;em&gt;Enumerable [T]&lt;/em&gt;などの一般的な概念は、&lt;em&gt;string&lt;/em&gt;などの具象型と照合できることに注意してください。 Nimは、コンセプトタイプが一致するタイプと同じ数のパラメーターを持つ必要はありません。一致したタイプのジェネリックパラメーターに対する要件を表現する場合は、コンセプトの本体内で&lt;em&gt;genericHead&lt;/em&gt;や&lt;em&gt;stripGenericParams&lt;/em&gt;などのタイプマッピング演算子を使用して、インスタンス化されていないバージョンのタイプを取得し、インスタンス化を試みることができます。必要な方法で。たとえば、Haskellの古典的な&lt;em&gt;Functorの&lt;/em&gt;概念を定義し、Nimの&lt;em&gt;Option [T]&lt;/em&gt;型がそのインスタンスであることを示す方法を次に示します。</target>
        </trans-unit>
        <trans-unit id="f5ca38697a6a448107efa272f859558c7b3efed4" translate="yes" xml:space="preserve">
          <source>Please note that the &lt;code&gt;is&lt;/code&gt; operator allows one to easily verify the precise type signatures of the required operations, but since type inference and default parameters are still applied in the concept body, it's also possible to describe usage protocols that do not reveal implementation details.</source>
          <target state="translated">ことに注意してください &lt;code&gt;is&lt;/code&gt; オペレータは1つが簡単に必要な操作の正確なタイプの署名を検証することができますが、型推論と、デフォルトのパラメータはまだコンセプトのボディに適用されているので、それは実装の詳細を明らかにしない、使用プロトコルを記述することも可能です。</target>
        </trans-unit>
        <trans-unit id="1e396fac5e10a7261ea311d079d21e12d48a8e32" translate="yes" xml:space="preserve">
          <source>Pop and return the current smallest value, and add the new item. This is more efficient than pop() followed by push(), and can be more appropriate when using a fixed-size heap. Note that the value returned may be larger than item! That constrains reasonable uses of this routine unless written as part of a conditional replacement:</source>
          <target state="translated">popして現在の最小値を返し、新しい項目を追加します。これは pop()に続いて push()を行うよりも効率的で、固定サイズのヒープを使用している場合にはより適切です。返される値は item よりも大きいかもしれないことに注意してください! これは、条件付き置換の一部として書かれていない限り、このルーチンの合理的な使用を制限します。</target>
        </trans-unit>
        <trans-unit id="7a35ff20b244cefddc1604b170c46f6cbce2de97" translate="yes" xml:space="preserve">
          <source>Pop the smallest item off the heap, maintaining the heap invariant.</source>
          <target state="translated">ヒープの不変性を維持したまま、最小のアイテムをヒープからポップします。</target>
        </trans-unit>
        <trans-unit id="fe035157cda20b361ce30613e29b5d6f1a46b5fc" translate="yes" xml:space="preserve">
          <source>Port</source>
          <target state="translated">Port</target>
        </trans-unit>
        <trans-unit id="62eb2d652c640374db70b913a59f5d9da34f44b1" translate="yes" xml:space="preserve">
          <source>Porting Nim to a new architecture is pretty easy, since C is the most portable programming language (within certain limits) and Nim generates C code, porting the code generator is not necessary.</source>
          <target state="translated">Nimを新しいアーキテクチャに移植するのは非常に簡単です。Cは(一定の範囲内で)最も移植性の高いプログラミング言語であり、NimはCのコードを生成するので、コードジェネレータを移植する必要はありません。</target>
        </trans-unit>
        <trans-unit id="442a29f3c82b03d1fb72c4411cbd3b9a535b5dbf" translate="yes" xml:space="preserve">
          <source>Porting to new platforms</source>
          <target state="translated">新しいプラットフォームへの移植</target>
        </trans-unit>
        <trans-unit id="96938ac778902dc9c8a77d5d10c75b74615cc812" translate="yes" xml:space="preserve">
          <source>Position relative to which seek should happen</source>
          <target state="translated">シークが起こるべき相対的な位置</target>
        </trans-unit>
        <trans-unit id="7350d4c47ea4aa0bc5e9515e97fb1d18e41403e7" translate="yes" xml:space="preserve">
          <source>Postfix operator call</source>
          <target state="translated">ポストフィックスオペレータコール</target>
        </trans-unit>
        <trans-unit id="d857c4a3cba6bb11f909b140e46311890f7f21c4" translate="yes" xml:space="preserve">
          <source>Pragmas</source>
          <target state="translated">Pragmas</target>
        </trans-unit>
        <trans-unit id="5d8e7de7f25aa645cd3d52db842b4045251d9dd7" translate="yes" xml:space="preserve">
          <source>Pragmas are Nim's method to give the compiler additional information / commands without introducing a massive number of new keywords. Pragmas are processed on the fly during semantic checking. Pragmas are enclosed in the special &lt;code&gt;{.&lt;/code&gt; and &lt;code&gt;.}&lt;/code&gt; curly brackets. Pragmas are also often used as a first implementation to play with a language feature before a nicer syntax to access the feature becomes available.</source>
          <target state="translated">プラグマは、膨大な数の新しいキーワードを導入せずにコンパイラーに追加情報/コマンドを提供するNimの方法です。プラグマは、セマンティックチェック中にその場で処理されます。プラグマは特殊な &lt;code&gt;{.&lt;/code&gt; 囲まれています。および &lt;code&gt;.}&lt;/code&gt; 中括弧。プラグマは、機能にアクセスするためのより良い構文が使用可能になる前に、言語機能を試す最初の実装としてもよく使用されます。</target>
        </trans-unit>
        <trans-unit id="fe9ce5f74d6f359dacb6b5ff6609ec745d285ed1" translate="yes" xml:space="preserve">
          <source>Pragmas are Nim's method to give the compiler additional information/ commands without introducing a massive number of new keywords. Pragmas are enclosed in the special &lt;code&gt;{.&lt;/code&gt; and &lt;code&gt;.}&lt;/code&gt; curly dot brackets. This tutorial does not cover pragmas. See the &lt;a href=&quot;manual#pragmas&quot;&gt;manual&lt;/a&gt; or &lt;a href=&quot;nimc#additional-features&quot;&gt;user guide&lt;/a&gt; for a description of the available pragmas.</source>
          <target state="translated">プラグマは、膨大な数の新しいキーワードを導入することなく、コンパイラーに追加情報/コマンドを提供するNimの方法です。プラグマは特殊な &lt;code&gt;{.&lt;/code&gt; 囲まれています。および &lt;code&gt;.}&lt;/code&gt; 中かっこ。このチュートリアルではプラグマは扱いません。使用可能なプラグマの説明については、&lt;a href=&quot;manual#pragmas&quot;&gt;マニュアル&lt;/a&gt;または&lt;a href=&quot;nimc#additional-features&quot;&gt;ユーザーガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="98fd755e5931021a9b89b9579124e072dc87d99f" translate="yes" xml:space="preserve">
          <source>Pre-defined floating point types</source>
          <target state="translated">定義済みの浮動小数点型</target>
        </trans-unit>
        <trans-unit id="ddce2e3fda9f6f78c28f745b41b5c1d94ce0affb" translate="yes" xml:space="preserve">
          <source>Pre-defined integer types</source>
          <target state="translated">あらかじめ定義された整数型</target>
        </trans-unit>
        <trans-unit id="ab86fb82a986460447b29bbb55ca5b9bf867bad6" translate="yes" xml:space="preserve">
          <source>Precedence</source>
          <target state="translated">Precedence</target>
        </trans-unit>
        <trans-unit id="e11b40e5dc046d6eacf2b9c0341a3b59b3ba5410" translate="yes" xml:space="preserve">
          <source>Precedence level</source>
          <target state="translated">優先順位</target>
        </trans-unit>
        <trans-unit id="9eee28bfd739e1debf4d3b892d013537ae16da9f" translate="yes" xml:space="preserve">
          <source>Predicate</source>
          <target state="translated">Predicate</target>
        </trans-unit>
        <trans-unit id="b360b99e5530a900c44998c81311dbde2b2172fa" translate="yes" xml:space="preserve">
          <source>Predicates that share their name with a keyword have to be escaped with backticks: `` &lt;em&gt;const&lt;/em&gt;&lt;code&gt;. The ``alias&lt;/code&gt; and &lt;code&gt;noalias&lt;/code&gt; predicates refer not only to the matching AST, but also to every other bound parameter; syntactically they need to occur after the ordinary AST predicates:</source>
          <target state="translated">キーワードと名前を共有する述語は、バッククォートでエスケープする必要があります： `` &lt;em&gt;const &lt;/em&gt; &lt;code&gt;. The ``alias&lt;/code&gt; および &lt;code&gt;noalias&lt;/code&gt; 述語は、一致するASTだけでなく、他のすべてのバインドされたパラメーターも参照します; 構文的には、通常のAST述語の後に出現する必要があります。</target>
        </trans-unit>
        <trans-unit id="2b151af2a194f19ff375b24827bd3223300579c0" translate="yes" xml:space="preserve">
          <source>Prefix operator call</source>
          <target state="translated">プレフィックスオペレータコール</target>
        </trans-unit>
        <trans-unit id="66495d0734591a26213f3a366af624feb0c83b41" translate="yes" xml:space="preserve">
          <source>Prepares a string for insertion into a XML document by escaping the XML special characters.</source>
          <target state="translated">XML の特殊文字をエスケープして XML ドキュメントに挿入するための文字列を準備します。</target>
        </trans-unit>
        <trans-unit id="db44386f03d5b854ad6dafaca1b1eeb202b32004" translate="yes" xml:space="preserve">
          <source>Prepends the element x to the beginning of the sequence. Requires copying of the sequence</source>
          <target state="translated">要素 x をシーケンスの先頭に前置します。シーケンスのコピーが必要です。</target>
        </trans-unit>
        <trans-unit id="a5ecd31a75929e40768bb20c6e9a666bcfc1c0cf" translate="yes" xml:space="preserve">
          <source>Preprocess table &lt;em&gt;a&lt;/em&gt; for &lt;em&gt;sub&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;subの&lt;/em&gt;テーブル&lt;em&gt;a&lt;/em&gt;を前処理します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0ebd928fc5c21d8b23de923afa72f9b439e03d18" translate="yes" xml:space="preserve">
          <source>Preprocessor support</source>
          <target state="translated">プリプロセッサのサポート</target>
        </trans-unit>
        <trans-unit id="78f94e0402b0663fec796a2cb153834ccd0300a2" translate="yes" xml:space="preserve">
          <source>Presumably this snippet of code could be used in a commercial software, reading a configuration file to display information about the person who bought the software. This external file would be generated by an online web shopping cart to be included along the program containing the license information:</source>
          <target state="translated">おそらく、このコードのスニペットは、ソフトウェアを購入した人に関する情報を表示するために設定ファイルを読み込んで、商用ソフトウェアで使用することができます。この外部ファイルは、オンラインのウェブショッピングカートによって生成され、ライセンス情報を含むプログラムに添付されます。</target>
        </trans-unit>
        <trans-unit id="bbaacc193c8d2a284014a58127bf356addea8297" translate="yes" xml:space="preserve">
          <source>Print out the checkpoints encountered so far and quit if &lt;code&gt;abortOnError&lt;/code&gt; is true. Otherwise, erase the checkpoints and indicate the test has failed (change exit code and test status). This template is useful for debugging, but is otherwise mostly used internally. Example:</source>
          <target state="translated">これまでに発生したチェックポイントを出力し、 &lt;code&gt;abortOnError&lt;/code&gt; がtrueの場合は終了します。それ以外の場合は、チェックポイントを消去して、テストが失敗したことを示します（終了コードとテストステータスを変更します）。このテンプレートはデバッグに役立ちますが、それ以外の場合はほとんど内部で使用されます。例：</target>
        </trans-unit>
        <trans-unit id="eb113d7d8beac65e410d096bf62f5df0c3b28a3c" translate="yes" xml:space="preserve">
          <source>Procedural type</source>
          <target state="translated">手続き型</target>
        </trans-unit>
        <trans-unit id="9e7331be4f43593dd7df9b640d47a72f7445dbe7" translate="yes" xml:space="preserve">
          <source>Procedure calls of the form &lt;code&gt;p(X)&lt;/code&gt; are compile-time computable if &lt;code&gt;p&lt;/code&gt; is a proc without side-effects (see the &lt;a href=&quot;#pragmas-nosideeffect-pragma&quot;&gt;noSideEffect pragma&lt;/a&gt; for details) and if &lt;code&gt;X&lt;/code&gt; is a (possibly empty) list of compile-time computable arguments.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; が副作用のないproc（詳細は&lt;a href=&quot;#pragmas-nosideeffect-pragma&quot;&gt;noSideEffectプラグマ&lt;/a&gt;を参照）であり、 &lt;code&gt;X&lt;/code&gt; がコンパイル時の計算可能な引数のリスト（空の場合もある）である場合、 &lt;code&gt;p(X)&lt;/code&gt; 形式のプロシージャコールはコンパイル時に計算可能です。</target>
        </trans-unit>
        <trans-unit id="b8db867373f6b118d2afb0458feddadd86fe8e12" translate="yes" xml:space="preserve">
          <source>Procedure declaration</source>
          <target state="translated">手続き宣言</target>
        </trans-unit>
        <trans-unit id="d682fc9dab69c1d2daf94fe72d9c9c2027249415" translate="yes" xml:space="preserve">
          <source>Procedures</source>
          <target state="translated">Procedures</target>
        </trans-unit>
        <trans-unit id="c7e7f6611bf2da78f49f8e451d842d8bd7ab42ec" translate="yes" xml:space="preserve">
          <source>Procedures always use static dispatch. For dynamic dispatch replace the &lt;code&gt;proc&lt;/code&gt; keyword by &lt;code&gt;method&lt;/code&gt;:</source>
          <target state="translated">プロシージャは常に静的ディスパッチを使用します。動的ディスパッチの場合は、 &lt;code&gt;proc&lt;/code&gt; キーワードを &lt;code&gt;method&lt;/code&gt; 置き換えます。</target>
        </trans-unit>
        <trans-unit id="8ad221890d30672f04664877c946ff70a32ff7b5" translate="yes" xml:space="preserve">
          <source>Procedures always use static dispatch. Multi-methods use dynamic dispatch. For dynamic dispatch to work on an object it should be a reference type as well.</source>
          <target state="translated">プロシージャは常に静的なディスパッチを使用します。マルチメソッドは動的ディスパッチを使用します。動的ディスパッチがオブジェクトで動作するためには、参照型である必要があります。</target>
        </trans-unit>
        <trans-unit id="06fbd2dad7effcb2234aac62fd8428a3ba476436" translate="yes" xml:space="preserve">
          <source>Procedures can appear at the top level in a module as well as inside other scopes, in which case they are called nested procs. A nested proc can access local variables from its enclosing scope and if it does so it becomes a closure. Any captured variables are stored in a hidden additional argument to the closure (its environment) and they are accessed by reference by both the closure and its enclosing scope (i.e. any modifications made to them are visible in both places). The closure environment may be allocated on the heap or on the stack if the compiler determines that this would be safe.</source>
          <target state="translated">プロシージャは、モジュール内のトップレベルでも他のスコープ内でも使用できますが、その場合は入れ子になったプロシージャと呼ばれます。入れ子になったプロシージャは、そのスコープからローカル変数にアクセスすることができ、そうするとクロージャになります。キャプチャされた変数は、クロージャへの追加引数(その環境)に格納され、クロージャとそのスコープの両方から参照することでアクセスされます(つまり、それらに加えられた変更は、両方の場所で可視化されます)。クロージャ環境は、コンパイラが安全であると判断した場合には、 ヒープまたはスタック上に割り当てられます。</target>
        </trans-unit>
        <trans-unit id="e6d366db67df6a0b1e1efe0e08594bca71f8eee2" translate="yes" xml:space="preserve">
          <source>Procedures utilizing type classes in such manner are considered to be &lt;span id=&quot;implicitly-generic_1&quot;&gt;implicitly generic&lt;/span&gt;. They will be instantiated once for each unique combination of param types used within the program.</source>
          <target state="translated">このような方法で型クラスを利用する手続きは、&lt;span id=&quot;implicitly-generic_1&quot;&gt;暗黙的に総称的&lt;/span&gt;であると見なされます。これらは、プログラム内で使用されるパラメータータイプの一意の組み合わせごとに1回インスタンス化されます。</target>
        </trans-unit>
        <trans-unit id="77d887d3c4269645cbb00a3f203259c5546c162d" translate="yes" xml:space="preserve">
          <source>Process the closure of all inner procs in one pass and accumulate the environments. This is however not always possible.</source>
          <target state="translated">すべての内部プロックのクロージャを一度に処理し、環境を蓄積します。しかし、これは常に可能とは限りません。</target>
        </trans-unit>
        <trans-unit id="e63451d3cf90040c075dc1fe95aa1f7d7528c37f" translate="yes" xml:space="preserve">
          <source>Processing</source>
          <target state="translated">Processing</target>
        </trans-unit>
        <trans-unit id="9afbe384e2a83f2b02c509b5363d71ee79a38e3a" translate="yes" xml:space="preserve">
          <source>Procs</source>
          <target state="translated">Procs</target>
        </trans-unit>
        <trans-unit id="4311d5a41c23a4400f7edfce5e0b039536a0abc1" translate="yes" xml:space="preserve">
          <source>Procs as expressions can appear both as nested procs and inside top level executable code.</source>
          <target state="translated">式としてのプロックは、入れ子になったプロックとしても、トップレベルの実行可能コードの中にも現れることができます。</target>
        </trans-unit>
        <trans-unit id="3a1616e4bc1aa2bed912867d0902aca437b90990" translate="yes" xml:space="preserve">
          <source>Procs can also be treated as expressions, in which case it's allowed to omit the proc's name.</source>
          <target state="translated">Procsは式として扱うこともできますが、その場合はprocの名前を省略することができます。</target>
        </trans-unit>
        <trans-unit id="57362afa37cf6acde07ad138b615e180f8f62a5b" translate="yes" xml:space="preserve">
          <source>Procs featuring &lt;code&gt;type&lt;/code&gt; params are considered implicitly generic. They will be instantiated for each unique combination of supplied types and within the body of the proc, the name of each param will refer to the bound concrete type:</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; paramsを備えたプロシージャは、暗黙的にジェネリックと見なされます。これらは、指定された型の一意の組み合わせごとにインスタンス化され、プロシージャの本体内で、各パラメータの名前はバインドされた具象型を参照します。</target>
        </trans-unit>
        <trans-unit id="6342d3bbf4c02568a11954f011158915db9e2356" translate="yes" xml:space="preserve">
          <source>Procs have been provided to calculate statistics on arrays and sequences.</source>
          <target state="translated">配列やシーケンスの統計を計算するためのProcsが提供されています。</target>
        </trans-unit>
        <trans-unit id="cdad80c260c1b79fcf7078364eee12ddb03d0dbf" translate="yes" xml:space="preserve">
          <source>Procs written with the implicitly generic style will often need to refer to the type parameters of the matched generic type. They can be easily accessed using the dot syntax:</source>
          <target state="translated">暗黙的に汎用スタイルで書かれたプロックは、マッチした汎用型の型パラメータを参照する必要があることがよくあります。これらはドット構文を使用して簡単にアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="9a5dd73eabe0ceec3510ddd56cff50a79d0fd6a6" translate="yes" xml:space="preserve">
          <source>Produces an XML tree for:</source>
          <target state="translated">の XML ツリーを生成します。</target>
        </trans-unit>
        <trans-unit id="2fac879cf602e3396c116983a52de85ad6e251ad" translate="yes" xml:space="preserve">
          <source>Produces roughly this C code:</source>
          <target state="translated">大体このようなC言語のコードを生成します。</target>
        </trans-unit>
        <trans-unit id="960e8fddc698625d55770887235e931f448d8d54" translate="yes" xml:space="preserve">
          <source>Produces:</source>
          <target state="translated">Produces:</target>
        </trans-unit>
        <trans-unit id="a6d68bd4be10c0820c76fc8d06aecf226d4b6440" translate="yes" xml:space="preserve">
          <source>Program is executed.</source>
          <target state="translated">プログラムが実行されます。</target>
        </trans-unit>
        <trans-unit id="4f17a83cbcff788a0cad5a770a0848dad49ec175" translate="yes" xml:space="preserve">
          <source>Progress reporting</source>
          <target state="translated">進捗報告</target>
        </trans-unit>
        <trans-unit id="1f2140e31dbd92836ebf9c2bfdffac3015b3027f" translate="yes" xml:space="preserve">
          <source>Project switch</source>
          <target state="translated">プロジェクトスイッチ</target>
        </trans-unit>
        <trans-unit id="760874ddf5afe0d82343947ffb16ccd1781c1d3b" translate="yes" xml:space="preserve">
          <source>Proper thunk generation is harder because the proc that is to wrap could stem from a complex expression:</source>
          <target state="translated">ラップするprocは複雑な表現に由来する可能性があるため、適切なthunkの生成は困難です。</target>
        </trans-unit>
        <trans-unit id="bc6c88db2f0703a9e2461a4a8060ccf1cb881998" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Properties</target>
        </trans-unit>
        <trans-unit id="5e49b9bd99ab4bc355bcfd55bdeb30deaad41741" translate="yes" xml:space="preserve">
          <source>Protecting general locations</source>
          <target state="translated">一般的な場所の保護</target>
        </trans-unit>
        <trans-unit id="d8eec506723634351a9cba0d6d82397b9f72baf0" translate="yes" xml:space="preserve">
          <source>Protecting global variables</source>
          <target state="translated">グローバル変数の保護</target>
        </trans-unit>
        <trans-unit id="157122474fc28e9dcab665a3696cb13a6fe9933e" translate="yes" xml:space="preserve">
          <source>Protocol version specifies the protocol to use. SSLv2, SSLv3, TLSv1 are available with the addition of &lt;code&gt;protSSLv23&lt;/code&gt; which allows for compatibility with all of them.</source>
          <target state="translated">プロトコルバージョンは、使用するプロトコルを指定します。SSLv2の、のSSLv3、TLSv1のは、追加でご利用いただけます &lt;code&gt;protSSLv23&lt;/code&gt; それらのすべてとの互換性を可能にします。</target>
        </trans-unit>
        <trans-unit id="e38d7d5b91755bfbdf05c15f5eb398d4e6becf82" translate="yes" xml:space="preserve">
          <source>Provide a restrictive API that can load/save the compiletime state to a file.</source>
          <target state="translated">コンパイル時の状態をファイルにロード/保存できる制限付きのAPIを提供します。</target>
        </trans-unit>
        <trans-unit id="7b940e771b06f772546586fc239edc7c0e4b029b" translate="yes" xml:space="preserve">
          <source>Provide spaces around binary operators if that enhances readability.</source>
          <target state="translated">可読性を向上させる場合は、バイナリ演算子の周りにスペースを設けます。</target>
        </trans-unit>
        <trans-unit id="d1cea344353e26ba6f1565ed661d94f610ce9e4f" translate="yes" xml:space="preserve">
          <source>Proxy</source>
          <target state="translated">Proxy</target>
        </trans-unit>
        <trans-unit id="8ec4b541fad1239b548ff32ef94487dec816b95b" translate="yes" xml:space="preserve">
          <source>Pseudo import/include paths</source>
          <target state="translated">擬似的なインポート/インクルードパス</target>
        </trans-unit>
        <trans-unit id="b3a030279e3be16bc447509ee9cb018fef87870e" translate="yes" xml:space="preserve">
          <source>Pull an identifier from prefix/postfix expressions</source>
          <target state="translated">接頭辞/接尾辞式から識別子を取り出す</target>
        </trans-unit>
        <trans-unit id="7d5ec8ce5c1cd610e2351c5a15b6b9c81346e199" translate="yes" xml:space="preserve">
          <source>Pure libraries</source>
          <target state="translated">ピュアライブラリ</target>
        </trans-unit>
        <trans-unit id="c6a218c1fffd61e7a4c8cd984b85f49ea6bce0e1" translate="yes" xml:space="preserve">
          <source>Pure libraries do not depend on any external &lt;code&gt;*.dll&lt;/code&gt; or &lt;code&gt;lib*.so&lt;/code&gt; binary while impure libraries do. A wrapper is an impure library that is a very low-level interface to a C library.</source>
          <target state="translated">純粋なライブラリは外部の &lt;code&gt;*.dll&lt;/code&gt; または &lt;code&gt;lib*.so&lt;/code&gt; バイナリに依存しませんが、純粋でないライブラリは依存します。ラッパーは、Cライブラリへの非常に低レベルのインターフェイスである不純なライブラリです。</target>
        </trans-unit>
        <trans-unit id="a0fb821bdaf93ed9a1f1e920acfb2840eff5b153" translate="yes" xml:space="preserve">
          <source>Purpose</source>
          <target state="translated">Purpose</target>
        </trans-unit>
        <trans-unit id="ab194e6c51955e3ece7467854fe421e48b6e4cf4" translate="yes" xml:space="preserve">
          <source>Push item onto heap, maintaining the heap invariant.</source>
          <target state="translated">ヒープの不変性を維持したまま、アイテムをヒープにプッシュします。</target>
        </trans-unit>
        <trans-unit id="a39c27c6f3bf8974c957653b58c3fa5dc8ccf58c" translate="yes" xml:space="preserve">
          <source>Quasi-quoting operator. Accepts an expression or a block and returns the AST that represents it. Within the quoted AST, you are able to interpolate NimNode expressions from the surrounding scope. If no operator is given, quoting is done using backticks. Otherwise, the given operator must be used as a prefix operator for any interpolated expression. The original meaning of the interpolation operator may be obtained by escaping it (by prefixing it with itself): e.g. &lt;em&gt;@&lt;/em&gt; is escaped as &lt;em&gt;@@&lt;/em&gt;, &lt;em&gt;@@&lt;/em&gt; is escaped as &lt;em&gt;@@@&lt;/em&gt; and so on.</source>
          <target state="translated">準引用演算子。式またはブロックを受け入れ、それを表すASTを返します。引用されたAST内で、周囲のスコープからNimNode式を補間できます。演算子が指定されていない場合、引用はバックティックを使用して行われます。それ以外の場合、指定された演算子は、補間された式の前置演算子として使用する必要があります。補間演算子の元の意味は、それをエスケープすることによって（それ自体を前に付けることによって）取得できます。たとえば、&lt;em&gt;@&lt;/em&gt;は&lt;em&gt;@@&lt;/em&gt;としてエスケープされ、&lt;em&gt;@@&lt;/em&gt;は&lt;em&gt;@@@&lt;/em&gt;としてエスケープされます。</target>
        </trans-unit>
        <trans-unit id="84df47161db68162cf2c1cf2df6862e32ae9b781" translate="yes" xml:space="preserve">
          <source>Quickly find the log base 2 of an integer. If &lt;em&gt;x&lt;/em&gt; is zero, when &lt;code&gt;noUndefinedBitOpts&lt;/code&gt; is set, result is -1, otherwise result is undefined.</source>
          <target state="translated">整数の対数2をすばやく見つけます。場合&lt;em&gt;、xが&lt;/em&gt;ゼロである場合、 &lt;code&gt;noUndefinedBitOpts&lt;/code&gt; が設定され、結果は-1、そうでなければ結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="e155eddd124128a190616e7a186ae4d25f6a6ebc" translate="yes" xml:space="preserve">
          <source>QuitCalled</source>
          <target state="translated">QuitCalled</target>
        </trans-unit>
        <trans-unit id="d43a34ec7721112f13b97cfbb0d6e0a2ad3e3442" translate="yes" xml:space="preserve">
          <source>Quote &lt;code&gt;s&lt;/code&gt;, so it can be safely passed to POSIX shell. Based on Python's pipes.quote</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; を引用して、POSIXシェルに安全に渡すことができるようにします。Pythonのpipes.quoteに基づく</target>
        </trans-unit>
        <trans-unit id="4d08dfbd0710ec2fc6ea17808fda70dbf079d436" translate="yes" xml:space="preserve">
          <source>Quote &lt;code&gt;s&lt;/code&gt;, so it can be safely passed to shell.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; を引用して、シェルに安全に渡せるようにします。</target>
        </trans-unit>
        <trans-unit id="b5d45f4b8112546563b986e1d340a3de1ceef7ec" translate="yes" xml:space="preserve">
          <source>Quote s, so it can be safely passed to Windows API. Based on Python's subprocess.list2cmdline See &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/17w5ykft.aspx&quot;&gt;http://msdn.microsoft.com/en-us/library/17w5ykft.aspx&lt;/a&gt;</source>
          <target state="translated">sを引用して、Windows APIに安全に渡すことができるようにします。Pythonのsubprocess.list2cmdlineに基づく&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/17w5ykft.aspx&quot;&gt;http://msdn.microsoft.com/en-us/library/17w5ykft.aspx&lt;/a&gt;を参照</target>
        </trans-unit>
        <trans-unit id="c3a56dd5f4e333e6e2e0eafd9130d0884fa87aa3" translate="yes" xml:space="preserve">
          <source>RST Quick Reference</source>
          <target state="translated">RSTクイックリファレンス</target>
        </trans-unit>
        <trans-unit id="bcb0bbc7586f8b1cf1562ef98d5628eb03fc6223" translate="yes" xml:space="preserve">
          <source>Raise statement</source>
          <target state="translated">文章を上げる</target>
        </trans-unit>
        <trans-unit id="728c44d434025a939b40fb468f6b464eb21b6d42" translate="yes" xml:space="preserve">
          <source>Raise the supported exceptions represented by &lt;em&gt;excepts&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;exceptsで&lt;/em&gt;表されるサポートされている例外を発生さ&lt;em&gt;せ&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="ec3240294db6590d6eb674eceefe2d3080c82d81" translate="yes" xml:space="preserve">
          <source>Raised by &lt;code&gt;0.0/0.0&lt;/code&gt;, for example.</source>
          <target state="translated">たとえば &lt;code&gt;0.0/0.0&lt;/code&gt; 上げられます。</target>
        </trans-unit>
        <trans-unit id="1ad44127cead1a93b77e67eaafbb798c1b8d6a72" translate="yes" xml:space="preserve">
          <source>Raised by division by zero.</source>
          <target state="translated">0で割ることで上がります。</target>
        </trans-unit>
        <trans-unit id="66d476b23e649e63bb348172beb74bbf37053e03" translate="yes" xml:space="preserve">
          <source>Raised by invalid operations according to IEEE.</source>
          <target state="translated">IEEEに準拠した無効な操作で発生します。</target>
        </trans-unit>
        <trans-unit id="0626d08315c63b21ae589949312963836c529522" translate="yes" xml:space="preserve">
          <source>Raised for inexact results.</source>
          <target state="translated">不正確な結果のために引き上げられました。</target>
        </trans-unit>
        <trans-unit id="99e5be4241e93c72cfe80efe56d3696ed1d11b32" translate="yes" xml:space="preserve">
          <source>Raised for invalid memory access errors</source>
          <target state="translated">無効なメモリアクセスエラーのために発生</target>
        </trans-unit>
        <trans-unit id="38c30cf567b7b9ee1eddd8acb70da472c0ad9270" translate="yes" xml:space="preserve">
          <source>Raised for overflows.</source>
          <target state="translated">オーバーフローのために引き上げられました。</target>
        </trans-unit>
        <trans-unit id="dd2cdbc5b0a42dacf72096db49f963030ac2eaf1" translate="yes" xml:space="preserve">
          <source>Raised for runtime integer divide-by-zero errors.</source>
          <target state="translated">実行時の整数を 0 で割ったエラーで発生します。</target>
        </trans-unit>
        <trans-unit id="2c9304ac03b02da4616572280aa9bb8ab12791a0" translate="yes" xml:space="preserve">
          <source>Raised for runtime integer overflows.</source>
          <target state="translated">実行時の整数オーバーフローのために発生します。</target>
        </trans-unit>
        <trans-unit id="32c28ea5c78055e8ea68515c83c3ba22b6953b99" translate="yes" xml:space="preserve">
          <source>Raised for string and object conversion errors.</source>
          <target state="translated">文字列およびオブジェクトの変換エラーのために発生します。</target>
        </trans-unit>
        <trans-unit id="08c46d3ef782190797d8a4bd64e301f0fa063ecc" translate="yes" xml:space="preserve">
          <source>Raised for underflows.</source>
          <target state="translated">アンダーフローのために調達しました。</target>
        </trans-unit>
        <trans-unit id="be95aced11bd594c29b8a4cd5b58705ab2fd7a7d" translate="yes" xml:space="preserve">
          <source>Raised for unsuccessful attempts to allocate memory.</source>
          <target state="translated">メモリの割り当てに失敗した場合に発生します。</target>
        </trans-unit>
        <trans-unit id="ec59fe758ecda80d7bef1c0104bc8498d5c4a618" translate="yes" xml:space="preserve">
          <source>Raised if a dynamic library could not be loaded.</source>
          <target state="translated">ダイナミック ライブラリをロードできなかった場合に発生します。</target>
        </trans-unit>
        <trans-unit id="fe56f3d52954d21251fffdab96d048a6101b0e04" translate="yes" xml:space="preserve">
          <source>Raised if a key cannot be found in a table.</source>
          <target state="translated">テーブルでキーが見つからない場合に発生します。</target>
        </trans-unit>
        <trans-unit id="bbba70332d0c775286b48ce439b172d9ba242f8e" translate="yes" xml:space="preserve">
          <source>Raised if a range check error occurred.</source>
          <target state="translated">範囲チェックエラーが発生した場合に発生します。</target>
        </trans-unit>
        <trans-unit id="650353b9e13b1678f3e0f946a77bce78b804cb35" translate="yes" xml:space="preserve">
          <source>Raised if a record field is not accessible because its dicriminant's value does not fit.</source>
          <target state="translated">レコードフィールドにアクセスできない場合に発生します。</target>
        </trans-unit>
        <trans-unit id="3ad88cbc3b7ff45823f8340b1fcd5be1d429c6ad" translate="yes" xml:space="preserve">
          <source>Raised if a resource request could not be fulfilled.</source>
          <target state="translated">リソース要求を満たすことができなかった場合に発生します。</target>
        </trans-unit>
        <trans-unit id="cd11d72b167232b61b07884734877076a77cdc66" translate="yes" xml:space="preserve">
          <source>Raised if an IO &quot;end of file&quot; error occurred.</source>
          <target state="translated">IO &quot;ファイルの終了&quot; エラーが発生した場合に発生します。</target>
        </trans-unit>
        <trans-unit id="68c91c46567b49ce511b6a68e91cd37c644d9b1b" translate="yes" xml:space="preserve">
          <source>Raised if an IO error occurred.</source>
          <target state="translated">IO エラーが発生した場合に発生します。</target>
        </trans-unit>
        <trans-unit id="f68ad7db1fb95353786755c35e1d60aecfb00a29" translate="yes" xml:space="preserve">
          <source>Raised if an array index is out of bounds.</source>
          <target state="translated">配列のインデックスが範囲外の場合に発生します。</target>
        </trans-unit>
        <trans-unit id="d3ef858ef306b68c4f896a6d7c87ab203440961c" translate="yes" xml:space="preserve">
          <source>Raised if an object gets assigned to its parent's object.</source>
          <target state="translated">オブジェクトが親のオブジェクトに割り当てられた場合に発生します。</target>
        </trans-unit>
        <trans-unit id="fdb573346d5de72dc1dc0894684d9b86b57d2d06" translate="yes" xml:space="preserve">
          <source>Raised if an object is converted to an incompatible object type. You can use &lt;code&gt;of&lt;/code&gt; operator to check if conversion will succeed.</source>
          <target state="translated">オブジェクトが互換性のないオブジェクトタイプに変換されると発生します。あなたは使用することができる &lt;code&gt;of&lt;/code&gt; 変換が成功するかどうかを確認する作業。</target>
        </trans-unit>
        <trans-unit id="da2633c286ea06df76a0438d7891623c292b571a" translate="yes" xml:space="preserve">
          <source>Raised if an operating system service failed.</source>
          <target state="translated">オペレーティング システム サービスに失敗した場合に発生します。</target>
        </trans-unit>
        <trans-unit id="028c1298a842b618b5e92022ea3c9cb7f8150b55" translate="yes" xml:space="preserve">
          <source>Raised if any kind of arithmetic error occurred.</source>
          <target state="translated">何らかの演算エラーが発生した場合に発生します。</target>
        </trans-unit>
        <trans-unit id="b57acbd1eafc73247bdc8b7db4a7e36731116243" translate="yes" xml:space="preserve">
          <source>Raised if it is attempted to send a message to a dead thread.</source>
          <target state="translated">死んだスレッドにメッセージを送ろうとした場合に発生します。</target>
        </trans-unit>
        <trans-unit id="586536f2532bdba51684aaa2faaccf9a0ee3ad93" translate="yes" xml:space="preserve">
          <source>Raised if the hardware stack used for subroutine calls overflowed.</source>
          <target state="translated">サブルーチンの呼び出しに使用されるハードウェアスタックがオーバーフローした場合に発生します。</target>
        </trans-unit>
        <trans-unit id="17261fb73363d2c277ed1529e2e101dd346435d0" translate="yes" xml:space="preserve">
          <source>Raised if there is no exception to reraise.</source>
          <target state="translated">リレイズの例外がない場合はリレイズされます。</target>
        </trans-unit>
        <trans-unit id="351c8bf075d81572768b1ca963b6bf3b6f76ed34" translate="yes" xml:space="preserve">
          <source>Raised on attempts to re-sink an already consumed &lt;code&gt;sink&lt;/code&gt; parameter.</source>
          <target state="translated">すでに消費された &lt;code&gt;sink&lt;/code&gt; パラメータを再シンクしようとすると発生します。</target>
        </trans-unit>
        <trans-unit id="c3c39e104d96138eb3a3997e68ced83f3dee4e47" translate="yes" xml:space="preserve">
          <source>Raised on dereferences of &lt;code&gt;nil&lt;/code&gt; pointers.</source>
          <target state="translated">&lt;code&gt;nil&lt;/code&gt; ポインターの逆参照で発生します。</target>
        </trans-unit>
        <trans-unit id="32a2e38706f27d38537d5bf0c1530200f9030954" translate="yes" xml:space="preserve">
          <source>Raised when a tag is not properly closed</source>
          <target state="translated">タグが適切に閉じられていない場合に発生</target>
        </trans-unit>
        <trans-unit id="42ca68196e5e694cdc0156d223a1ff6b17dcec98" translate="yes" xml:space="preserve">
          <source>Raised when an unexpected XML Parser event occurs</source>
          <target state="translated">予期せぬ XML パーサーイベントが発生した場合に発生します。</target>
        </trans-unit>
        <trans-unit id="4d15913f72d2ca164e122d25060193477a26ffc0" translate="yes" xml:space="preserve">
          <source>Raised when assertion is proved wrong.</source>
          <target state="translated">アサーションが間違っていると証明された場合に発生します。</target>
        </trans-unit>
        <trans-unit id="91029130d53f12dffcfc80d43ea48134c5d69fcf" translate="yes" xml:space="preserve">
          <source>Raises &lt;code&gt;AssertionError&lt;/code&gt; if specified &lt;code&gt;code&lt;/code&gt; does not raise the specified exception. Example:</source>
          <target state="translated">発生させ &lt;code&gt;AssertionError&lt;/code&gt; 指定した場合 &lt;code&gt;code&lt;/code&gt; 指定された例外を発生しません。例：</target>
        </trans-unit>
        <trans-unit id="567f8f001d78a8e744cdf6369fc805b49aa2b893" translate="yes" xml:space="preserve">
          <source>Raises &lt;code&gt;AssertionError&lt;/code&gt; with &lt;em&gt;msg&lt;/em&gt; if &lt;em&gt;cond&lt;/em&gt; is false. Note that &lt;code&gt;AssertionError&lt;/code&gt; is hidden from the effect system, so it doesn't produce &lt;code&gt;{.raises: [AssertionError].}&lt;/code&gt;. This exception is only supposed to be caught by unit testing frameworks.</source>
          <target state="translated">発生させ &lt;code&gt;AssertionError&lt;/code&gt; と&lt;em&gt;MSG&lt;/em&gt;場合&lt;em&gt;condが&lt;/em&gt;偽です。 &lt;code&gt;AssertionError&lt;/code&gt; はエフェクトシステムから隠されているため、 &lt;code&gt;{.raises: [AssertionError].}&lt;/code&gt; 生成しないことに注意してください。この例外は、単体テストフレームワークでのみキャッチされることになっています。</target>
        </trans-unit>
        <trans-unit id="40cc1c9996322f8cc38f559f2584b50f088e6996" translate="yes" xml:space="preserve">
          <source>Raises &lt;code&gt;ValueError&lt;/code&gt; for an invalid hex values. The comparison is case-insensitive.</source>
          <target state="translated">発生させます &lt;code&gt;ValueError&lt;/code&gt; 無効進値のために。比較では大文字と小文字が区別されません。</target>
        </trans-unit>
        <trans-unit id="c22f12804c795d88ca74f939ddf08aea8931971a" translate="yes" xml:space="preserve">
          <source>Raises &lt;code&gt;ValueError&lt;/code&gt; for an invalid value in &lt;em&gt;s&lt;/em&gt;. The comparison is done in a style insensitive way.</source>
          <target state="translated">発生させます &lt;code&gt;ValueError&lt;/code&gt; で無効な値のため&lt;em&gt;の&lt;/em&gt;。比較は、スタイルに依存しない方法で行われます。</target>
        </trans-unit>
        <trans-unit id="2d4578456b5ba2f01543ab1822189b16a39fba87" translate="yes" xml:space="preserve">
          <source>Raises &lt;em&gt;EDb&lt;/em&gt; if the connection could not be established.</source>
          <target state="translated">発生させ&lt;em&gt;EDBは&lt;/em&gt;、接続が確立できなかった場合。</target>
        </trans-unit>
        <trans-unit id="09f056dbb100b1c839a4625115b8a60c96d1a0e6" translate="yes" xml:space="preserve">
          <source>Raises EInvalidValue in case of an error.</source>
          <target state="translated">エラーが発生した場合、EInvalidValueを発生させます。</target>
        </trans-unit>
        <trans-unit id="e0bebaa2403bca683eb4d2b3f51753adb492d176" translate="yes" xml:space="preserve">
          <source>Raises EOS on error.</source>
          <target state="translated">エラー時にEOSを発生させます。</target>
        </trans-unit>
        <trans-unit id="e80f698527275363029eae2721df321a059387f0" translate="yes" xml:space="preserve">
          <source>Raises KeyError if the set &lt;em&gt;s&lt;/em&gt; is empty.</source>
          <target state="translated">セット&lt;em&gt;s&lt;/em&gt;が空&lt;em&gt;の&lt;/em&gt;場合、KeyErrorを発生させます。</target>
        </trans-unit>
        <trans-unit id="9e8600b37550ccb497a4af5ce01a4410e73d0d2b" translate="yes" xml:space="preserve">
          <source>Raises a &lt;code&gt;ValueError&lt;/code&gt; if the parsing fails or the value is not a correctly formatted time.</source>
          <target state="translated">解析が失敗した場合、または値が正しくフォーマットされていない場合は、 &lt;code&gt;ValueError&lt;/code&gt; を発生させます。</target>
        </trans-unit>
        <trans-unit id="276b555f70ce184a6b1f8f69f1b6bd8354a1579b" translate="yes" xml:space="preserve">
          <source>Raises a &lt;code&gt;ValueError&lt;/code&gt; if the response's &lt;code&gt;status&lt;/code&gt; does not have a corresponding &lt;code&gt;HttpCode&lt;/code&gt;.</source>
          <target state="translated">応答の &lt;code&gt;status&lt;/code&gt; 対応する &lt;code&gt;HttpCode&lt;/code&gt; がない場合は、 &lt;code&gt;ValueError&lt;/code&gt; を発生させます。</target>
        </trans-unit>
        <trans-unit id="307a090405fae28bbe37ae495085d4fc3467fca3" translate="yes" xml:space="preserve">
          <source>Raises a new SSL error.</source>
          <target state="translated">新しいSSLエラーを発生させます。</target>
        </trans-unit>
        <trans-unit id="e4b8735df78acafac0305b07c45583c0f5e06188" translate="yes" xml:space="preserve">
          <source>Raises an &lt;em&gt;[DbError]&lt;/em&gt; exception with ODBC error information</source>
          <target state="translated">レイズ&lt;em&gt;[DBERROR]&lt;/em&gt; ODBCエラー情報を持つ例外を</target>
        </trans-unit>
        <trans-unit id="172a8dadd8dd7c12c87a018821e520f360bdd00c" translate="yes" xml:space="preserve">
          <source>Raises an EOS error upon failure.</source>
          <target state="translated">失敗時にEOSエラーを発生させます。</target>
        </trans-unit>
        <trans-unit id="524595e54374e963ef480df057abcc139126f7c3" translate="yes" xml:space="preserve">
          <source>Raises an IO exception in case of an error. It is an error if the current file position is not at the beginning of the file.</source>
          <target state="translated">エラーが発生した場合にIO例外を発生させます。現在のファイル位置がファイルの先頭にない場合はエラーとなります。</target>
        </trans-unit>
        <trans-unit id="6ab99fafbb1c01fadc221231a21a65c013cfa660" translate="yes" xml:space="preserve">
          <source>Raises an OSError based on the error code returned by &lt;code&gt;SSLGetError&lt;/code&gt; (for SSL sockets) and &lt;code&gt;osLastError&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;SSLGetError&lt;/code&gt; （SSLソケットの場合）から返されたエラーコードに基づいてOSErrorを &lt;code&gt;osLastError&lt;/code&gt; それ以外の場合はosLastErrorを送出します。</target>
        </trans-unit>
        <trans-unit id="90ebae0e4f71b7a4be2a66964668697eb30ea1dc" translate="yes" xml:space="preserve">
          <source>Raises exceptions for the status codes &lt;code&gt;4xx&lt;/code&gt; and &lt;code&gt;5xx&lt;/code&gt;</source>
          <target state="translated">ステータスコード &lt;code&gt;4xx&lt;/code&gt; および &lt;code&gt;5xx&lt;/code&gt; の例外を発生させます</target>
        </trans-unit>
        <trans-unit id="bbcfba3180974b175ec29f25aedc4af60fbde06f" translate="yes" xml:space="preserve">
          <source>Raises proper errors based on return values of &lt;code&gt;recv&lt;/code&gt; functions.</source>
          <target state="translated">&lt;code&gt;recv&lt;/code&gt; 関数の戻り値に基づいて適切なエラーを発生させます。</target>
        </trans-unit>
        <trans-unit id="2208414278b65730f3d9e753c0bd6120a6090206" translate="yes" xml:space="preserve">
          <source>Raising an exception is done with the &lt;code&gt;raise&lt;/code&gt; statement:</source>
          <target state="translated">例外を発生させるには、 &lt;code&gt;raise&lt;/code&gt; ステートメントを使用します。</target>
        </trans-unit>
        <trans-unit id="0d5fda95e3940bc09dc1ccc22666813c0b54f73d" translate="yes" xml:space="preserve">
          <source>Ranges</source>
          <target state="translated">Ranges</target>
        </trans-unit>
        <trans-unit id="39db0baa12271196bc8f4503eccfe33d8bedd2cf" translate="yes" xml:space="preserve">
          <source>Ranges occur in set constructors, case statement branches, or array slices. Internally, the node kind &lt;code&gt;nnkRange&lt;/code&gt; is used, but when constructing the AST, construction with &lt;code&gt;..&lt;/code&gt; as an infix operator should be used instead.</source>
          <target state="translated">範囲は、セットコンストラクター、caseステートメントの分岐、または配列スライスで発生します。内部的には、ノードの種類 &lt;code&gt;nnkRange&lt;/code&gt; が使用されますが、ASTを作成するときは、代わりに &lt;code&gt;..&lt;/code&gt; を中置演算子として使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="0a6d74fbec021ac49e6d5b9824dc9112431d3fb1" translate="yes" xml:space="preserve">
          <source>Rationale: Consistency with overloaded assignment or assignment-like operations, &lt;code&gt;a = b&lt;/code&gt; can be read as &lt;code&gt;performSomeCopy(a, b)&lt;/code&gt;.</source>
          <target state="translated">理論的根拠：オーバーロードされた割り当てまたは割り当てのような操作との整合性、 &lt;code&gt;a = b&lt;/code&gt; は、 &lt;code&gt;performSomeCopy(a, b)&lt;/code&gt; として読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="ce9a4a772a88d49b6a63f78245488ac96b3f98ab" translate="yes" xml:space="preserve">
          <source>Raw string literals</source>
          <target state="translated">生の文字列リテラル</target>
        </trans-unit>
        <trans-unit id="386ba29889d0288988970831100059ae32e75da0" translate="yes" xml:space="preserve">
          <source>Read &lt;code&gt;size&lt;/code&gt; bytes from the specified file asynchronously starting at the current position of the file pointer.</source>
          <target state="translated">ファイルポインターの現在の位置から、指定されたファイルから非同期に &lt;code&gt;size&lt;/code&gt; バイトを読み取ります。</target>
        </trans-unit>
        <trans-unit id="6837b052d9e0068e0b32c146cb0a7341a45c3d40" translate="yes" xml:space="preserve">
          <source>Read CGI data. If the client does not use a method listed in the &lt;em&gt;allowedMethods&lt;/em&gt; set, an &lt;em&gt;ECgi&lt;/em&gt; exception is raised.</source>
          <target state="translated">CGIデータを読み取ります。クライアントが&lt;em&gt;allowedMethods&lt;/em&gt;セットにリストされているメソッドを使用しない場合、&lt;em&gt;ECgi&lt;/em&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="cec1fd33cb854b699cea99a9f755995756d5ee2f" translate="yes" xml:space="preserve">
          <source>Read a single character from the terminal, blocking until it is entered. The character is not printed to the terminal.</source>
          <target state="translated">端末から1文字を読み込み、入力されるまでブロックします。その文字は端末には印刷されません。</target>
        </trans-unit>
        <trans-unit id="fa1f949ee6094b79d43e6d504438e7f6f64c9ab8" translate="yes" xml:space="preserve">
          <source>Read this &lt;a href=&quot;apis&quot;&gt;document&lt;/a&gt; for a quick overview of the API design.</source>
          <target state="translated">API設計の概要については、この&lt;a href=&quot;apis&quot;&gt;ドキュメント&lt;/a&gt;をお読みください。</target>
        </trans-unit>
        <trans-unit id="e12115c2336394c1a363bbc5f4d2a10707e72fdd" translate="yes" xml:space="preserve">
          <source>Read/Write tracking</source>
          <target state="translated">読み取り/書き込みトラッキング</target>
        </trans-unit>
        <trans-unit id="24620e210d243aab2166090142b8a7d92b8f8897" translate="yes" xml:space="preserve">
          <source>Reading a configuration file.</source>
          <target state="translated">設定ファイルの読み込み</target>
        </trans-unit>
        <trans-unit id="ed5a5f0d0a31292a7e615d242d5373135350e488" translate="yes" xml:space="preserve">
          <source>Reads &lt;strong&gt;up to&lt;/strong&gt;&lt;code&gt;size&lt;/code&gt; bytes from &lt;code&gt;socket&lt;/code&gt; into &lt;code&gt;buf&lt;/code&gt;, which must at least be of that size. Returned future will complete once all the data requested is read, a part of the data has been read, or the socket has disconnected in which case the future will complete with a value of &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;最大で&lt;/strong&gt; &lt;code&gt;size&lt;/code&gt; バイトを &lt;code&gt;socket&lt;/code&gt; から &lt;code&gt;buf&lt;/code&gt; に読み取ります。これは、少なくともそのサイズでなければなりません。返されたfutureは、要求されたすべてのデータが読み取られるか、データの一部が読み取られるか、ソケットが切断されると完了します。この場合、futureは値 &lt;code&gt;0&lt;/code&gt; で完了します。</target>
        </trans-unit>
        <trans-unit id="1e7c0e94dad43b7d156eb9468f3ce53d820c8c1b" translate="yes" xml:space="preserve">
          <source>Reads &lt;strong&gt;up to&lt;/strong&gt;&lt;code&gt;size&lt;/code&gt; bytes from &lt;code&gt;socket&lt;/code&gt; into &lt;code&gt;buf&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;最大&lt;/strong&gt; &lt;code&gt;size&lt;/code&gt; バイトを &lt;code&gt;socket&lt;/code&gt; から &lt;code&gt;buf&lt;/code&gt; に読み取ります。</target>
        </trans-unit>
        <trans-unit id="33491ee917470d5dff9cb97340d439812d5536b8" translate="yes" xml:space="preserve">
          <source>Reads &lt;strong&gt;up to&lt;/strong&gt;&lt;code&gt;size&lt;/code&gt; bytes from &lt;code&gt;socket&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;socket&lt;/code&gt; から&lt;strong&gt;最大&lt;/strong&gt; &lt;code&gt;size&lt;/code&gt; バイトを読み取ります。</target>
        </trans-unit>
        <trans-unit id="77c0df6a022c05feac3496fef62e568dec0833b2" translate="yes" xml:space="preserve">
          <source>Reads &lt;strong&gt;up to&lt;/strong&gt;&lt;code&gt;size&lt;/code&gt; bytes from &lt;code&gt;socket&lt;/code&gt;. Returned future will complete once all the data requested is read, a part of the data has been read, or the socket has disconnected in which case the future will complete with a value of &lt;code&gt;&quot;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;socket&lt;/code&gt; から&lt;strong&gt;最大&lt;/strong&gt; &lt;code&gt;size&lt;/code&gt; バイトを読み取ります。要求されたすべてのデータが読み取られるか、データの一部が読み取られるか、ソケットが切断されると、返されたfutureは完了します。この場合、futureは値 &lt;code&gt;&quot;&quot;&lt;/code&gt; で完了します。</target>
        </trans-unit>
        <trans-unit id="978c556c2dd2a7521290801e2dc3c34fa4b57db4" translate="yes" xml:space="preserve">
          <source>Reads a &lt;em&gt;password&lt;/em&gt; from stdin without printing it. &lt;em&gt;password&lt;/em&gt; must not be &lt;code&gt;nil&lt;/code&gt;! Returns &lt;code&gt;false&lt;/code&gt; if the end of the file has been reached, &lt;code&gt;true&lt;/code&gt; otherwise.</source>
          <target state="translated">印刷せずにstdinから&lt;em&gt;パスワード&lt;/em&gt;を読み取り&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;パスワードを&lt;/em&gt; &lt;code&gt;nil&lt;/code&gt; にしないでください！ファイルの終わりに達した場合は &lt;code&gt;false&lt;/code&gt; を返し、 &lt;code&gt;true&lt;/code&gt; ない場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="f4c7c69f0a4086f87414fa84f0850e98e826f6a2" translate="yes" xml:space="preserve">
          <source>Reads a line from a stream &lt;em&gt;s&lt;/em&gt;. Note: This is not very efficient. Raises &lt;em&gt;EIO&lt;/em&gt; if an error occurred.</source>
          <target state="translated">ストリーム&lt;em&gt;s&lt;/em&gt;から行を読み取ります。注：これはあまり効率的ではありません。発生させ&lt;em&gt;EIOは、&lt;/em&gt;エラーが発生した場合。</target>
        </trans-unit>
        <trans-unit id="603f08eff7888543b9965532d75111a52efffb42" translate="yes" xml:space="preserve">
          <source>Reads a line of data from &lt;code&gt;socket&lt;/code&gt; into &lt;code&gt;resString&lt;/code&gt;.</source>
          <target state="translated">データ行を &lt;code&gt;socket&lt;/code&gt; から &lt;code&gt;resString&lt;/code&gt; に読み取ります。</target>
        </trans-unit>
        <trans-unit id="7f939728ad91b0c6736db56d252e3d56ef5aac62" translate="yes" xml:space="preserve">
          <source>Reads a line of data from &lt;code&gt;socket&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;socket&lt;/code&gt; からデータ行を読み取ります。</target>
        </trans-unit>
        <trans-unit id="b9683a6732a76c35b64fa9e3a0d7661b3a22d384" translate="yes" xml:space="preserve">
          <source>Reads a line of data from &lt;code&gt;socket&lt;/code&gt;. Returned future will complete once a full line is read or an error occurs.</source>
          <target state="translated">&lt;code&gt;socket&lt;/code&gt; からデータ行を読み取ります。返されたfutureは、行全体が読み取られるか、エラーが発生すると完了します。</target>
        </trans-unit>
        <trans-unit id="512f7f707ed82b2a4fb989d157a70b5d69b30b07" translate="yes" xml:space="preserve">
          <source>Reads a password from stdin without printing it.</source>
          <target state="translated">パスワードを印刷せずに標準入力から読み込みます。</target>
        </trans-unit>
        <trans-unit id="38f82d6c2b3adf0dd37525a198d9bcda0bb8916c" translate="yes" xml:space="preserve">
          <source>Reads a single character from the stream &lt;em&gt;f&lt;/em&gt;. Should not be used in performance sensitive code.</source>
          <target state="translated">ストリーム&lt;em&gt;f&lt;/em&gt;から単一の文字を読み取ります。パフォーマンスに敏感なコードでは使用しないでください。</target>
        </trans-unit>
        <trans-unit id="4ad562c998d7d33d16f2d35016ec8f1190aaf424" translate="yes" xml:space="preserve">
          <source>Reads a single line from the specified file asynchronously.</source>
          <target state="translated">指定したファイルから非同期に1行を読み込みます。</target>
        </trans-unit>
        <trans-unit id="b45c699410e48af3598ad0ffd48f49477789d869" translate="yes" xml:space="preserve">
          <source>Reads all available data.</source>
          <target state="translated">利用可能なすべてのデータを読み込みます。</target>
        </trans-unit>
        <trans-unit id="2c8cdad2cd8286acdfd0d66e63f133bab5192a3c" translate="yes" xml:space="preserve">
          <source>Reads all data from the specified file.</source>
          <target state="translated">指定したファイルからすべてのデータを読み込みます。</target>
        </trans-unit>
        <trans-unit id="50c0c9eac2fafeeecf77fef0fbd118a7d5fe097d" translate="yes" xml:space="preserve">
          <source>Reads all data from the stream &lt;em&gt;file&lt;/em&gt;.</source>
          <target state="translated">ストリーム&lt;em&gt;ファイル&lt;/em&gt;からすべてのデータを読み取り&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="16aa2b06a9fd45fdc5177ba0791c46e2186fefff" translate="yes" xml:space="preserve">
          <source>Reads and decodes CGI data and yields the (name, value) pairs the data consists of.</source>
          <target state="translated">CGI データを読み込んでデコードし、データが構成する (名前、値)ペアを生成します。</target>
        </trans-unit>
        <trans-unit id="2f08e1736fd8ee6f6e4264f9ba880fc2692403ee" translate="yes" xml:space="preserve">
          <source>Reads and decodes CGI data and yields the (name, value) pairs the data consists of. If the client does not use a method listed in the &lt;em&gt;allowedMethods&lt;/em&gt; set, an &lt;em&gt;ECgi&lt;/em&gt; exception is raised.</source>
          <target state="translated">CGIデータを読み取ってデコードし、データを構成する（名前、値）のペアを生成します。クライアントが&lt;em&gt;allowedMethods&lt;/em&gt;セットにリストされているメソッドを使用しない場合、&lt;em&gt;ECgi&lt;/em&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="cd580d77db8229465ebeb4157251802035fe7ba1" translate="yes" xml:space="preserve">
          <source>Reads data from the specified future stream until it is completed. The data which is read is written to the file immediately and freed from memory.</source>
          <target state="translated">指定した未来のストリームのデータを完了するまで読み込みます。読み込んだデータはすぐにファイルに書き込まれ、メモリから解放されます。</target>
        </trans-unit>
        <trans-unit id="595d56d3e18b21c18bca00840423ca2ea7fc2a5e" translate="yes" xml:space="preserve">
          <source>Reads in a build-time define as a string</source>
          <target state="translated">ビルド時の定義を文字列として読み込む</target>
        </trans-unit>
        <trans-unit id="e8adc86af0b87b9e44aebe3a30de9bd18fc60874" translate="yes" xml:space="preserve">
          <source>Reads in a build-time define as an integer</source>
          <target state="translated">ビルドタイム定義での読み込みを整数で指定します。</target>
        </trans-unit>
        <trans-unit id="4598472634a594f3ffeff8206db9ccc9d9d0f85d" translate="yes" xml:space="preserve">
          <source>Reads the first row and creates a look-up table for column numbers See also &lt;a href=&quot;#rowEntry.CsvParser.string&quot;&gt;rowEntry&lt;/a&gt;.</source>
          <target state="translated">最初の行を読み取り、列番号のルックアップテーブルを作成します&lt;a href=&quot;#rowEntry.CsvParser.string&quot;&gt;。rowEntry&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="494c153aaf278be23e83188e46e8ae53c00137ae" translate="yes" xml:space="preserve">
          <source>Reads the response's body and caches it. The read is performed only once.</source>
          <target state="translated">レスポンスの本体を読み込んでキャッシュします。読み取りは一度だけ実行されます。</target>
        </trans-unit>
        <trans-unit id="c09ea5f583e17a92aa05d2a79d90d53798b88bd5" translate="yes" xml:space="preserve">
          <source>Realtime support</source>
          <target state="translated">リアルタイムサポート</target>
        </trans-unit>
        <trans-unit id="7a26b1287f5ff59f6b29334f315518ff72b9960f" translate="yes" xml:space="preserve">
          <source>Receive a line of data from &lt;code&gt;socket&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;socket&lt;/code&gt; から1行のデータを受信します。</target>
        </trans-unit>
        <trans-unit id="45ba1787b19136d286049145b2a0b743a6c33a76" translate="yes" xml:space="preserve">
          <source>Receives a datagram data from &lt;code&gt;socket&lt;/code&gt; into &lt;code&gt;buf&lt;/code&gt;, which must be at least of size &lt;code&gt;size&lt;/code&gt;, address of datagram's sender will be stored into &lt;code&gt;saddr&lt;/code&gt; and &lt;code&gt;saddrLen&lt;/code&gt;. Returned future will complete once one datagram has been received, and will return size of packet received.</source>
          <target state="translated">以下からのデータグラムのデータ受信 &lt;code&gt;socket&lt;/code&gt; に &lt;code&gt;buf&lt;/code&gt; のサイズの少なくともでなければなりません、 &lt;code&gt;size&lt;/code&gt; 、データグラムの送信元のアドレスに格納されます &lt;code&gt;saddr&lt;/code&gt; と &lt;code&gt;saddrLen&lt;/code&gt; を。返されたフューチャーは、1つのデータグラムを受信すると完了し、受信したパケットのサイズを返します。</target>
        </trans-unit>
        <trans-unit id="cc62c15428d535855ae8065d053fb9f3dae416a2" translate="yes" xml:space="preserve">
          <source>Receives data from &lt;code&gt;socket&lt;/code&gt;. This function should normally be used with connection-less sockets (UDP sockets).</source>
          <target state="translated">&lt;code&gt;socket&lt;/code&gt; からデータを受信します。この関数は通常、コネクションレス型ソケット（UDPソケット）で使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="fde44220b1eb77eb349f04d90b283dec9ec8fc18" translate="yes" xml:space="preserve">
          <source>Receives data from a socket.</source>
          <target state="translated">ソケットからデータを受信します。</target>
        </trans-unit>
        <trans-unit id="4a29f5764a54e8058c540d4730c0a945d240f1f8" translate="yes" xml:space="preserve">
          <source>Recursively walks over the directory &lt;em&gt;dir&lt;/em&gt; and yields for each file or directory in &lt;em&gt;dir&lt;/em&gt;. The full path for each file or directory is returned. &lt;strong&gt;Warning&lt;/strong&gt;: Modifying the directory structure while the iterator is traversing may result in undefined behavior!</source>
          <target state="translated">再帰的にディレクトリ&lt;em&gt;dir&lt;/em&gt;を調べ、&lt;em&gt;dir&lt;/em&gt;内の各ファイルまたはディレクトリを生成します。各ファイルまたはディレクトリの完全パスが返されます。&lt;strong&gt;警告&lt;/strong&gt;：イテレータが移動中にディレクトリ構造を変更すると、未定義の動作が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="c20bb0f7c4d78b01fa838319a2981e9b417f1f05" translate="yes" xml:space="preserve">
          <source>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</source>
          <target state="translated">この場合、以下の条件が満たされていることを条件に、ソースおよびバイナリ形式での再配布および使用が許可されます。</target>
        </trans-unit>
        <trans-unit id="57ec4bae787e02e75ae9439f5fbfc851c887f70f" translate="yes" xml:space="preserve">
          <source>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</source>
          <target state="translated">バイナリ形式で再配布する場合は、上記の著作権表示、この条件のリスト、および以下の免責事項を、配布物と共に提供されるドキュメントおよび/またはその他の資料に複製しなければなりません。</target>
        </trans-unit>
        <trans-unit id="b7338b5245c44e48d0d288fd4ec6f22445873f8e" translate="yes" xml:space="preserve">
          <source>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</source>
          <target state="translated">ソースコードの再配布には、上記の著作権表示、この条件リスト、および以下の免責事項を保持しなければなりません。</target>
        </trans-unit>
        <trans-unit id="7a93873a7ac8bb5a91e249745de2599e8d65fd26" translate="yes" xml:space="preserve">
          <source>Reduce rational &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">有理&lt;em&gt;xを&lt;/em&gt;減らします。</target>
        </trans-unit>
        <trans-unit id="259516f23573e881a917050af2115d65af6da166" translate="yes" xml:space="preserve">
          <source>Ref objects should be used whenever inheritance is used. It isn't strictly necessary, but with non-ref objects assignments such as &lt;code&gt;let person: Person = Student(id: 123)&lt;/code&gt; will truncate subclass fields.</source>
          <target state="translated">継承が使用されるときはいつでもRefオブジェクトを使用する必要があります。厳密には必要ありませんが、 &lt;code&gt;let person: Person = Student(id: 123)&lt;/code&gt; などの非refオブジェクトの割り当てでは、サブクラスフィールドが切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="db1c784524e1b54011a95823026161f7c8517fe0" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">Reference</target>
        </trans-unit>
        <trans-unit id="960faca00a2ea60fd367da06c6a9cf388e7dc545" translate="yes" xml:space="preserve">
          <source>Reference and pointer types</source>
          <target state="translated">参照とポインタの型</target>
        </trans-unit>
        <trans-unit id="170afdf8e2efc163d33d771c752badc8b632f258" translate="yes" xml:space="preserve">
          <source>References (similar to pointers in other programming languages) are a way to introduce many-to-one relationships. This means different references can point to and modify the same location in memory (also called &lt;span id=&quot;aliasing_1&quot;&gt;aliasing&lt;/span&gt;).</source>
          <target state="translated">参照（他のプログラミング言語のポインターと同様）は、多対1の関係を導入する方法です。この手段異なる参照がを指し、メモリ内の同じ位置を変更する（とも呼ばれることができる&lt;span id=&quot;aliasing_1&quot;&gt;エイリアシング&lt;/span&gt;）。</target>
        </trans-unit>
        <trans-unit id="02069e24e1a9efdb72de58330148c041dfc9b7b2" translate="yes" xml:space="preserve">
          <source>References (similar to pointers in other programming languages) are a way to introduce many-to-one relationships. This means different references can point to and modify the same location in memory.</source>
          <target state="translated">参照(他のプログラミング言語のポインタに似ています)は、多対一の関係を導入するための方法です。これは、異なる参照がメモリ内の同じ場所を指し示したり、変更したりできることを意味します。</target>
        </trans-unit>
        <trans-unit id="21261db724edbd03f7602d59e2bb7a253492652e" translate="yes" xml:space="preserve">
          <source>Regarding binary comparison, this module only provides unequal operators. The equality operator &lt;code&gt;==&lt;/code&gt; is omitted, because depending on the use case either casting to float or rounding to int might be preferred, and users should make an explicit choice.</source>
          <target state="translated">バイナリ比較に関して、このモジュールは不等演算子のみを提供します。等号演算子 &lt;code&gt;==&lt;/code&gt; は省略されています。これは、ユースケースによっては、floatへのキャストまたはintへの丸めが優先される場合があり、ユーザーが明示的に選択する必要があるためです。</target>
        </trans-unit>
        <trans-unit id="e68ebd1d4ba803b29c2b4073e01cb0c6ecc77d97" translate="yes" xml:space="preserve">
          <source>Registers 'foreignPackageName' to the internal list of foreign deps. It is your job to ensure the package name</source>
          <target state="translated">foreignPackageName' を海外のデップの内部リストに登録します。パッケージ名</target>
        </trans-unit>
        <trans-unit id="dba53deed8138d1e437d395564bccc72d2fe91e1" translate="yes" xml:space="preserve">
          <source>Registers &lt;code&gt;fd&lt;/code&gt; with the dispatcher.</source>
          <target state="translated">&lt;code&gt;fd&lt;/code&gt; をディスパッチャーに登録します。</target>
        </trans-unit>
        <trans-unit id="bb5bd595db3b7cfbb12cdce72914e82c34cdf5db" translate="yes" xml:space="preserve">
          <source>Registers &lt;code&gt;ftp&lt;/code&gt; with dispatcher &lt;code&gt;d&lt;/code&gt;.</source>
          <target state="translated">ディスパッチャー &lt;code&gt;d&lt;/code&gt; に &lt;code&gt;ftp&lt;/code&gt; を登録します。</target>
        </trans-unit>
        <trans-unit id="cbabe5b470b654e5897fc52c60eed8e57b18f5cc" translate="yes" xml:space="preserve">
          <source>Registers &lt;code&gt;s&lt;/code&gt; with dispatcher &lt;code&gt;d&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; をディスパッチャー &lt;code&gt;d&lt;/code&gt; に登録します。</target>
        </trans-unit>
        <trans-unit id="3ac05ff3f5dcfa293b9d59ad4d7bb0664b1aef3f" translate="yes" xml:space="preserve">
          <source>Registers Unix signal notification with &lt;code&gt;signal&lt;/code&gt; to selector &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">Unixシグナル通知を &lt;code&gt;signal&lt;/code&gt; セレクター &lt;code&gt;s&lt;/code&gt; に登録します。</target>
        </trans-unit>
        <trans-unit id="ac28cb53181efd36c017064827507024c32b8745" translate="yes" xml:space="preserve">
          <source>Registers a &lt;em&gt;thread local&lt;/em&gt; handler that is called at the thread's destruction. A thread is destructed when the &lt;code&gt;.thread&lt;/code&gt; proc returns normally or when it raises an exception. Note that unhandled exceptions in a thread nevertheless cause the whole process to die.</source>
          <target state="translated">スレッドの破棄時に呼び出される&lt;em&gt;スレッドローカル&lt;/em&gt;ハンドラーを登録し&lt;em&gt;ます&lt;/em&gt;。 &lt;code&gt;.thread&lt;/code&gt; procが正常に戻るか、例外が発生すると、スレッドは破棄されます。ただし、スレッド内の未処理の例外により、プロセス全体が停止することに注意してください。</target>
        </trans-unit>
        <trans-unit id="3deac7496ef34d80158290e83f7f14ef92d45c58" translate="yes" xml:space="preserve">
          <source>Registers a foreign command to the intern list of commands that can be queried later.</source>
          <target state="translated">外部コマンドを、後で問い合わせ可能なコマンドの内部リストに登録します。</target>
        </trans-unit>
        <trans-unit id="f6b6982c4f6e50fc17a208315b2726e3bf92e0ac" translate="yes" xml:space="preserve">
          <source>Registers a process id (pid) notification (when process has exited) in selector &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">セレクター &lt;code&gt;s&lt;/code&gt; にプロセスID（pid）通知（プロセスが終了したとき）を登録します。</target>
        </trans-unit>
        <trans-unit id="a2e6ab3c2650ac19e734751307d1c267db478032" translate="yes" xml:space="preserve">
          <source>Registers async socket &lt;code&gt;sock&lt;/code&gt; with dispatcher &lt;code&gt;d&lt;/code&gt;.</source>
          <target state="translated">非同期ソケット &lt;code&gt;sock&lt;/code&gt; をディスパッチャー &lt;code&gt;d&lt;/code&gt; に登録します。</target>
        </trans-unit>
        <trans-unit id="4d5e51b21a074f3910595269ee7ab90c19c97cbb" translate="yes" xml:space="preserve">
          <source>Registers callback &lt;code&gt;cb&lt;/code&gt; to be called when &lt;code&gt;ev&lt;/code&gt; will be signaled</source>
          <target state="translated">&lt;code&gt;ev&lt;/code&gt; が通知されるときに呼び出されるコールバック &lt;code&gt;cb&lt;/code&gt; を登録します</target>
        </trans-unit>
        <trans-unit id="31450955f986e0842dc1c13efe0a244827237e9d" translate="yes" xml:space="preserve">
          <source>Registers callback &lt;code&gt;cb&lt;/code&gt; to be called when process with process ID &lt;code&gt;pid&lt;/code&gt; exited.</source>
          <target state="translated">プロセスID &lt;code&gt;pid&lt;/code&gt; のプロセスが終了したときに呼び出されるコールバック &lt;code&gt;cb&lt;/code&gt; を登録します。</target>
        </trans-unit>
        <trans-unit id="e6471db9bd2a705c0ad2173f10920c7b023bff08" translate="yes" xml:space="preserve">
          <source>Registers callback &lt;code&gt;cb&lt;/code&gt; to be called when timer expired.</source>
          <target state="translated">タイマーが切れたときに呼び出されるコールバック &lt;code&gt;cb&lt;/code&gt; を登録します。</target>
        </trans-unit>
        <trans-unit id="337e6b2b0028085b3fcc713332555d1608d2e3ce" translate="yes" xml:space="preserve">
          <source>Registers delegate &lt;code&gt;deleg&lt;/code&gt; with dispatcher &lt;code&gt;d&lt;/code&gt;.</source>
          <target state="translated">代理人 &lt;code&gt;deleg&lt;/code&gt; をディスパッチャー &lt;code&gt;d&lt;/code&gt; に登録します。</target>
        </trans-unit>
        <trans-unit id="0836d5ff61abf1d138e16122f0ec0c79c61d80e8" translate="yes" xml:space="preserve">
          <source>Registers file/socket descriptor &lt;code&gt;fd&lt;/code&gt; to selector &lt;code&gt;s&lt;/code&gt; with events set in &lt;code&gt;events&lt;/code&gt;. The &lt;code&gt;data&lt;/code&gt; is application-defined data, which will be passed when an event is triggered.</source>
          <target state="translated">eventsで設定された &lt;code&gt;events&lt;/code&gt; して、ファイル/ソケット記述子 &lt;code&gt;fd&lt;/code&gt; をセレクター &lt;code&gt;s&lt;/code&gt; に登録します。 &lt;code&gt;data&lt;/code&gt; イベントがトリガされたときに渡されるアプリケーション定義データです。</target>
        </trans-unit>
        <trans-unit id="43e16ff873d5de584458f76ad72d9537d10683d7" translate="yes" xml:space="preserve">
          <source>Registers selector BSD/MacOSX specific vnode events for file descriptor &lt;code&gt;fd&lt;/code&gt; and events &lt;code&gt;events&lt;/code&gt;. &lt;code&gt;data&lt;/code&gt; application-defined data, which to be passed, when vnode event happens.</source>
          <target state="translated">ファイル記述子 &lt;code&gt;fd&lt;/code&gt; およびイベント &lt;code&gt;events&lt;/code&gt; セレクターBSD / MacOSX固有のvnodeイベントを登録します。 &lt;code&gt;data&lt;/code&gt; のvnodeイベントが発生したときに、渡されるデータを、アプリケーションで定義されました。</target>
        </trans-unit>
        <trans-unit id="2199311ef193878f7d6db4d7b746d800cbc0159f" translate="yes" xml:space="preserve">
          <source>Registers selector event &lt;code&gt;ev&lt;/code&gt; in selector &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">セレクター &lt;code&gt;s&lt;/code&gt; にセレクターイベント &lt;code&gt;ev&lt;/code&gt; を登録します。</target>
        </trans-unit>
        <trans-unit id="b636a5c4fface43e127ecfee78ea1a0d490a11bb" translate="yes" xml:space="preserve">
          <source>Registers timer notification with &lt;code&gt;timeout&lt;/code&gt; (in milliseconds) to selector &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">タイマー通知を &lt;code&gt;timeout&lt;/code&gt; （ミリ秒単位）でセレクター &lt;code&gt;s&lt;/code&gt; に登録します。</target>
        </trans-unit>
        <trans-unit id="136039c2b54f04914b3cfa5a13100aef989f0ca7" translate="yes" xml:space="preserve">
          <source>Regular expression support for Nim.</source>
          <target state="translated">Nimの正規表現をサポートしています。</target>
        </trans-unit>
        <trans-unit id="dc6d5a0c3dd27227e0ade1d680a1afafeb5cd176" translate="yes" xml:space="preserve">
          <source>Regular expression syntax and semantics</source>
          <target state="translated">正規表現の構文と意味</target>
        </trans-unit>
        <trans-unit id="3172c4ae8fee97c04bb506eac2e6f47443f5a679" translate="yes" xml:space="preserve">
          <source>Regular expressions</source>
          <target state="translated">正規表現</target>
        </trans-unit>
        <trans-unit id="632284d6d44cd285a0879407d2b79c59fd92e9cc" translate="yes" xml:space="preserve">
          <source>Regular file.</source>
          <target state="translated">通常のファイル。</target>
        </trans-unit>
        <trans-unit id="c73e7346189862b7e0f60858180cc71c17d6472c" translate="yes" xml:space="preserve">
          <source>Related Options</source>
          <target state="translated">関連オプション</target>
        </trans-unit>
        <trans-unit id="0eeef2cf95f50c40792682050928f40e5526ea33" translate="yes" xml:space="preserve">
          <source>Relative paths won't be expanded by this proc. Instead, it will traverse only the directories appearing in the relative path.</source>
          <target state="translated">相対パスはこの調達によって展開されません。代わりに、相対パスに含まれるディレクトリのみをトラバースします。</target>
        </trans-unit>
        <trans-unit id="7bbbb9e16a836cdff3a094ab77249ddd20e70760" translate="yes" xml:space="preserve">
          <source>Releases the given lock.</source>
          <target state="translated">与えられたロックを解除します。</target>
        </trans-unit>
        <trans-unit id="154465987117610232e8996850d08335b4100707" translate="yes" xml:space="preserve">
          <source>Remove &lt;em&gt;fromFirst&lt;/em&gt; elements from the front of the deque and &lt;em&gt;fromLast&lt;/em&gt; elements from the back. If the supplied number of elements exceeds the total number of elements in the deque, the deque will remain empty.</source>
          <target state="translated">削除&lt;em&gt;fromFirst&lt;/em&gt;両端キューとの正面から要素を&lt;em&gt;fromLast&lt;/em&gt;バックからの要素。指定された要素の数が両端キューの要素の総数を超える場合、両端キューは空のままになります。</target>
        </trans-unit>
        <trans-unit id="1c3917158d99d175858d7953e6b6e9cb15550589" translate="yes" xml:space="preserve">
          <source>Remove and return an arbitrary element from the set &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">セット&lt;em&gt;s&lt;/em&gt;から任意の要素を削除して返します。</target>
        </trans-unit>
        <trans-unit id="2c54936e344741227a270e4e931622db1988d283" translate="yes" xml:space="preserve">
          <source>Remove and returns the first element of the &lt;em&gt;deq&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;deqの&lt;/em&gt;最初の要素を削除して返します。</target>
        </trans-unit>
        <trans-unit id="d0fbcf13973a390df5982811fd42fe25c950652d" translate="yes" xml:space="preserve">
          <source>Remove and returns the last element of the &lt;em&gt;deq&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;deqの&lt;/em&gt;最後の要素を削除して返します。</target>
        </trans-unit>
        <trans-unit id="384fc682f39353a0f1c47ba8e506eebd6931689b" translate="yes" xml:space="preserve">
          <source>Remove one level of structure in a nested Option.</source>
          <target state="translated">入れ子になっている Option の構造のレベルを 1 つ削除します。</target>
        </trans-unit>
        <trans-unit id="03b764d0e66d4b3da726d47a7364c4864a30ba9c" translate="yes" xml:space="preserve">
          <source>Remove the first matching prefix (in-place) from a string.</source>
          <target state="translated">文字列から最初に一致する接頭辞 (インプレース)を削除します。</target>
        </trans-unit>
        <trans-unit id="097126e9687b04ffc950f7c735543acbbb976e38" translate="yes" xml:space="preserve">
          <source>Remove the first matching suffix (in-place) from a string.</source>
          <target state="translated">文字列から最初に一致する接尾辞 (インプレース)を削除します。</target>
        </trans-unit>
        <trans-unit id="dde5ba5aedd2d9d8a62213b10fb268c832c22b6e" translate="yes" xml:space="preserve">
          <source>Removes a node specified by &lt;code&gt;name&lt;/code&gt; Raises the &lt;code&gt;ENotFoundErr&lt;/code&gt; exception, if the node was not found</source>
          <target state="translated">で指定したノードを削除し &lt;code&gt;name&lt;/code&gt; 発生させます &lt;code&gt;ENotFoundErr&lt;/code&gt; のノードが見つからなかった場合は、例外を</target>
        </trans-unit>
        <trans-unit id="6042c06e3ae5da402287f685262f3a39bd2645a1" translate="yes" xml:space="preserve">
          <source>Removes a node specified by local name and namespace URI</source>
          <target state="translated">ローカル名と名前空間URIで指定されたノードを削除します。</target>
        </trans-unit>
        <trans-unit id="fe3025964da6282be8933d53955ea4da04a6f2c1" translate="yes" xml:space="preserve">
          <source>Removes all characters from &lt;em&gt;chars&lt;/em&gt; from the end of the string &lt;em&gt;s&lt;/em&gt; (in-place).</source>
          <target state="translated">文字列&lt;em&gt;sの&lt;/em&gt;末尾から（インプレースで）&lt;em&gt;chars&lt;/em&gt;からすべての文字を削除します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="56467b96f7431e715a40bfe72ad92d9f145c8f16" translate="yes" xml:space="preserve">
          <source>Removes all characters from &lt;em&gt;chars&lt;/em&gt; from the start of the string &lt;em&gt;s&lt;/em&gt; (in-place).</source>
          <target state="translated">文字列&lt;em&gt;sの&lt;/em&gt;先頭から（インプレースで）&lt;em&gt;chars&lt;/em&gt;からすべての文字を削除します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e0f43cf9ae15cdd0ea09bd461752b6a5b76b2311" translate="yes" xml:space="preserve">
          <source>Removes all indentation composed of whitespace from each line in &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; の各行から空白で構成されるすべてのインデントを削除します。</target>
        </trans-unit>
        <trans-unit id="23688146735e8d6717a569932dbc93f6dcbe7bdb" translate="yes" xml:space="preserve">
          <source>Removes all occurrences of a single character (in-place) from the end of a string.</source>
          <target state="translated">文字列の末尾から1文字(インプレース)の出現をすべて削除します。</target>
        </trans-unit>
        <trans-unit id="8258aaf046e7709f9a807daa9506d031e201445b" translate="yes" xml:space="preserve">
          <source>Removes all occurrences of a single character (in-place) from the start of a string.</source>
          <target state="translated">文字列の先頭から1文字(インプレース)の出現をすべて削除します。</target>
        </trans-unit>
        <trans-unit id="2e38297722c496fe4c9430024a4d966deb7e3fa0" translate="yes" xml:space="preserve">
          <source>Removes an attribute by &lt;code&gt;localName&lt;/code&gt; and &lt;code&gt;namespaceURI&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;localName&lt;/code&gt; および &lt;code&gt;namespaceURI&lt;/code&gt; によって属性を削除します</target>
        </trans-unit>
        <trans-unit id="625dd27e0373847ddd93f90e5824a6018c71e8b9" translate="yes" xml:space="preserve">
          <source>Removes an attribute by &lt;code&gt;name&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 属性を削除します</target>
        </trans-unit>
        <trans-unit id="2e72850d2f2ef7ec0860f6783fa13720858d4e67" translate="yes" xml:space="preserve">
          <source>Removes element at &lt;em&gt;index&lt;/em&gt;, maintaining the heap invariant.</source>
          <target state="translated">ヒープの不変を維持しながら、&lt;em&gt;インデックスの&lt;/em&gt;要素を削除します。</target>
        </trans-unit>
        <trans-unit id="a0f617920b58e6892e9b62e5c8ba8e1d424b46ca" translate="yes" xml:space="preserve">
          <source>Removes the &lt;code&gt;handleWrite&lt;/code&gt; event handler on &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; の &lt;code&gt;handleWrite&lt;/code&gt; イベントハンドラーを削除します。</target>
        </trans-unit>
        <trans-unit id="8525e09ee3d6117f5a94a1df04aac06a3b67a70e" translate="yes" xml:space="preserve">
          <source>Removes the &lt;em&gt;file&lt;/em&gt;. If this fails, &lt;em&gt;OSError&lt;/em&gt; is raised. This does not fail if the file never existed in the first place. On Windows, ignores the read-only attribute.</source>
          <target state="translated">&lt;em&gt;ファイルを&lt;/em&gt;削除し&lt;em&gt;ます&lt;/em&gt;。これが失敗すると、&lt;em&gt;OSError&lt;/em&gt;が発生します。そもそもファイルが存在しない場合でも、これは失敗しません。Windowsでは、読み取り専用属性を無視します。</target>
        </trans-unit>
        <trans-unit id="56895bcc66cef43a87d6d589301de22089ce085a" translate="yes" xml:space="preserve">
          <source>Removes the &lt;em&gt;file&lt;/em&gt;. If this fails, returns &lt;em&gt;false&lt;/em&gt;. This does not fail if the file never existed in the first place. On Windows, ignores the read-only attribute.</source>
          <target state="translated">&lt;em&gt;ファイルを&lt;/em&gt;削除し&lt;em&gt;ます&lt;/em&gt;。これが失敗した場合、&lt;em&gt;falseを&lt;/em&gt;返し&lt;em&gt;ます&lt;/em&gt;。そもそもファイルが存在しない場合でも、これは失敗しません。Windowsでは、読み取り専用属性を無視します。</target>
        </trans-unit>
        <trans-unit id="ea98ca68efa98c2122daacf8ecd527527e525c03" translate="yes" xml:space="preserve">
          <source>Removes the child node indicated by &lt;code&gt;oldChild&lt;/code&gt; from the list of children, and returns it.</source>
          <target state="translated">子の &lt;code&gt;oldChild&lt;/code&gt; からoldChildで示される子ノードを削除して返します。</target>
        </trans-unit>
        <trans-unit id="5ee7a80a2694626db7ca8837e09b04f1f91d6149" translate="yes" xml:space="preserve">
          <source>Removes the directory &lt;em&gt;dir&lt;/em&gt; including all subdirectories and files in &lt;em&gt;dir&lt;/em&gt; (recursively).</source>
          <target state="translated">ディレクトリの削除&lt;em&gt;ディレクトリ&lt;/em&gt;内のすべてのサブディレクトリとファイルを含む&lt;em&gt;ディレクトリを&lt;/em&gt;（再帰的に）。</target>
        </trans-unit>
        <trans-unit id="1562f8c69c8827573900416b9339b1607f33af77" translate="yes" xml:space="preserve">
          <source>Removes the specified attribute node If the attribute node cannot be found raises &lt;code&gt;ENotFoundErr&lt;/code&gt;</source>
          <target state="translated">指定された属性ノードを削除します。属性ノードが見つからない場合は、 &lt;code&gt;ENotFoundErr&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="9c7a479da37958808f0473f7eac3fda1de6808b9" translate="yes" xml:space="preserve">
          <source>Removing a cell is analogous - the bit has to be set to zero. Single page descriptors are never deleted from the hash table. This is not needed as the data structures needs to be rebuilt periodically anyway.</source>
          <target state="translated">セルを削除することは類似しています-ビットはゼロに設定されなければなりません。シングルページ記述子はハッシュテーブルから削除されることはありません。データ構造はいずれにせよ定期的に再構築する必要があるので、これは必要ありません。</target>
        </trans-unit>
        <trans-unit id="c7866d0abb35f4f59ac67429d338b279fa1b6f97" translate="yes" xml:space="preserve">
          <source>Rename a file or directory on the remote FTP Server from current name &lt;code&gt;name_from&lt;/code&gt; to new name &lt;code&gt;name_to&lt;/code&gt;</source>
          <target state="translated">リモートFTPサーバー上のファイルまたはディレクトリの名前を現在の名前 &lt;code&gt;name_from&lt;/code&gt; から新しい名前 &lt;code&gt;name_to&lt;/code&gt; に変更します</target>
        </trans-unit>
        <trans-unit id="cd10c92b5f024da07bd7626f0c1bf73f5c9b5b8e" translate="yes" xml:space="preserve">
          <source>Renders the string decorated within `foobar`:idx: markers.</source>
          <target state="translated">foobar`:idx:マーカー内で装飾された文字列をレンダリングします。</target>
        </trans-unit>
        <trans-unit id="193b295a7082d54e15809cab2c56316092ddb475" translate="yes" xml:space="preserve">
          <source>Replace contents of passed buffer with each new line, like &lt;a href=&quot;system#readLine,File,TaintedString&quot;&gt;readLine(File)&lt;/a&gt;. &lt;em&gt;delim&lt;/em&gt;, &lt;em&gt;eat&lt;/em&gt;, and delimiting logic is exactly as for &lt;a href=&quot;#memSlices&quot;&gt;memSlices&lt;/a&gt;, but Nim strings are returned.</source>
          <target state="translated">渡されたバッファーの内容を、&lt;a href=&quot;system#readLine,File,TaintedString&quot;&gt;readLine（File）の&lt;/a&gt;ように新しい各行で置き換えます。&lt;em&gt;delim&lt;/em&gt;、&lt;em&gt;eat&lt;/em&gt;、およびdelimitingロジックは&lt;a href=&quot;#memSlices&quot;&gt;memSlices&lt;/a&gt;とまったく同じですが、Nim文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="3ba87bae1b2bf4888ad1a6c7d8f7d7e43da2ff92" translate="yes" xml:space="preserve">
          <source>Replace filter</source>
          <target state="translated">フィルターの交換</target>
        </trans-unit>
        <trans-unit id="ec48379ea31f417016f7bb9acdc33294df54c21e" translate="yes" xml:space="preserve">
          <source>Replaces &lt;code&gt;sub&lt;/code&gt; in &lt;code&gt;s&lt;/code&gt; by the string &lt;code&gt;by&lt;/code&gt;. Captures can be accessed in &lt;code&gt;by&lt;/code&gt; with the notation &lt;code&gt;$i&lt;/code&gt; and &lt;code&gt;$#&lt;/code&gt; (see strutils.`%`).</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 内の &lt;code&gt;sub&lt;/code&gt; を文字列 &lt;code&gt;by&lt;/code&gt; で置き換えます。キャプチャはでアクセスすることができる &lt;code&gt;by&lt;/code&gt; 表記と &lt;code&gt;$i&lt;/code&gt; および &lt;code&gt;$#&lt;/code&gt; （ `strutils.`％を参照）。</target>
        </trans-unit>
        <trans-unit id="262b172d0e596a292cd19fd4e382a22e07137b68" translate="yes" xml:space="preserve">
          <source>Replaces &lt;code&gt;sub&lt;/code&gt; in &lt;code&gt;s&lt;/code&gt; by the string &lt;code&gt;by&lt;/code&gt;. Captures cannot be accessed in &lt;code&gt;by&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 内の &lt;code&gt;sub&lt;/code&gt; を文字列 &lt;code&gt;by&lt;/code&gt; で置き換えます。キャプチャはでアクセスすることができない &lt;code&gt;by&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d2826f2bd7456d830ac8eee22fa77591049f4481" translate="yes" xml:space="preserve">
          <source>Replaces &lt;em&gt;sub&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; by the character &lt;em&gt;by&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;sの&lt;/em&gt;&lt;em&gt;sub&lt;/em&gt;を文字&lt;em&gt;by&lt;/em&gt;で置き換えます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d39df839f36a3e3c3be3d5f7890f0bfbe2b93efc" translate="yes" xml:space="preserve">
          <source>Replaces &lt;em&gt;sub&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; by the resulting strings from the callback. The callback proc receives the index of the current match (starting with 0), the count of captures and an open array with the captures of each match. Examples:</source>
          <target state="translated">&lt;em&gt;sの&lt;/em&gt;&lt;em&gt;sub&lt;/em&gt;を、コールバックの結果の文字列で置き換えます。コールバックプロシージャは、現在の一致のインデックス（0から開始）、キャプチャの数、および各一致のキャプチャを含むオープン配列を受け取ります。例：&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="827aa382fc5c0590c1b9e715fe77ee41d565fca8" translate="yes" xml:space="preserve">
          <source>Replaces &lt;em&gt;sub&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; by the string &lt;em&gt;by&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt;内&lt;em&gt;の&lt;/em&gt;&lt;em&gt;sub&lt;/em&gt;を文字列&lt;em&gt;by&lt;/em&gt;で置き換えます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="91b199be59ebf23ec19835773410d2f5a88562e7" translate="yes" xml:space="preserve">
          <source>Replaces &lt;em&gt;sub&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; by the string &lt;em&gt;by&lt;/em&gt;. Captures can be accessed in &lt;em&gt;by&lt;/em&gt; with the notation &lt;code&gt;$i&lt;/code&gt; and &lt;code&gt;$#&lt;/code&gt; (see strutils.`%`). Examples:</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt;内&lt;em&gt;の&lt;/em&gt;&lt;em&gt;sub&lt;/em&gt;を文字列&lt;em&gt;by&lt;/em&gt;で置き換えます。キャプチャはでアクセスすることができる&lt;em&gt;ことにより、&lt;/em&gt;表記と &lt;code&gt;$i&lt;/code&gt; および &lt;code&gt;$#&lt;/code&gt; （ `strutils.`％を参照）。例：&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="44a45639108d1ff8f624730f88605c2a8d489575" translate="yes" xml:space="preserve">
          <source>Replaces &lt;em&gt;sub&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; by the string &lt;em&gt;by&lt;/em&gt;. Captures cannot be accessed in &lt;em&gt;by&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt;内&lt;em&gt;の&lt;/em&gt;&lt;em&gt;sub&lt;/em&gt;を文字列&lt;em&gt;by&lt;/em&gt;で置き換えます。キャプチャはでアクセスすることができない&lt;em&gt;ことで&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="63b2c45af2328eac15e4934824b957c6dbf1aaa0" translate="yes" xml:space="preserve">
          <source>Replaces the child node &lt;code&gt;oldChild&lt;/code&gt; with &lt;code&gt;newChild&lt;/code&gt; in the list of children, and returns the &lt;code&gt;oldChild&lt;/code&gt; node.</source>
          <target state="translated">子ノードの &lt;code&gt;oldChild&lt;/code&gt; で子ノードoldChildを &lt;code&gt;newChild&lt;/code&gt; に置き換え、 &lt;code&gt;oldChild&lt;/code&gt; ノードを返します。</target>
        </trans-unit>
        <trans-unit id="9a74f67447ef0a253561123dbcd3d24a64504400" translate="yes" xml:space="preserve">
          <source>Represents a fixed duration of time. Uses the same time resolution as &lt;code&gt;Time&lt;/code&gt;. This type should be prefered over &lt;code&gt;TimeInterval&lt;/code&gt; unless non-static time units is needed.</source>
          <target state="translated">一定の期間を表します。 &lt;code&gt;Time&lt;/code&gt; と同じ時間分解能を使用します。非静的な時間単位が必要でない限り、このタイプは &lt;code&gt;TimeInterval&lt;/code&gt; よりも推奨されます。</target>
        </trans-unit>
        <trans-unit id="4f08818bb528e70e03c0e6a752708ea82a2d50f2" translate="yes" xml:space="preserve">
          <source>Represents a format for parsing and printing time types.</source>
          <target state="translated">時間型を解析して印刷するためのフォーマットを表します。</target>
        </trans-unit>
        <trans-unit id="d7f78d2532222ee16ceb829670216b43daae9773" translate="yes" xml:space="preserve">
          <source>Represents a month. Note that the enum starts at &lt;code&gt;1&lt;/code&gt;, so &lt;code&gt;ord(month)&lt;/code&gt; will give the month number in the range &lt;code&gt;[1..12]&lt;/code&gt;.</source>
          <target state="translated">月を表します。enumは &lt;code&gt;1&lt;/code&gt; から始まるため、 &lt;code&gt;ord(month)&lt;/code&gt; は &lt;code&gt;[1..12]&lt;/code&gt; の範囲の月番号を示します。</target>
        </trans-unit>
        <trans-unit id="753488b243f7d9dcec21ce6db3fb2ec29aeeb786" translate="yes" xml:space="preserve">
          <source>Represents a non-fixed duration of time. Can be used to add and subtract non-fixed time units from a &lt;code&gt;DateTime&lt;/code&gt; or &lt;code&gt;Time&lt;/code&gt;. &lt;code&gt;TimeInterval&lt;/code&gt; doesn't represent a fixed duration of time, since the duration of some units depend on the context (e.g a year can be either 365 or 366 days long). The non-fixed time units are years, months and days.</source>
          <target state="translated">固定されていない期間を表します。 &lt;code&gt;DateTime&lt;/code&gt; または &lt;code&gt;Time&lt;/code&gt; から固定されていない時間単位を加算および減算するために使用できます。一部のユニットの期間はコンテキストに依存するため、 &lt;code&gt;TimeInterval&lt;/code&gt; は固定された期間を表しません（たとえば、1年は365日または366日のいずれかです）。非固定時間単位は年、月、日です。</target>
        </trans-unit>
        <trans-unit id="4953c5cebb0f8703b4ed26ddbee7652305a6e232" translate="yes" xml:space="preserve">
          <source>Represents a point in time with an associated UTC offset and DST flag. This type is only used for implementing timezones.</source>
          <target state="translated">UTCオフセットとDSTフラグに関連付けられた時刻を表す。この型はタイムゾーンの実装にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="7018b9456e85041baffc3aba3513cd751297be23" translate="yes" xml:space="preserve">
          <source>Represents a point in time.</source>
          <target state="translated">ある時点を表します。</target>
        </trans-unit>
        <trans-unit id="2c4e3d3ad7eedf7bcfffd4d6b9f05ec606703879" translate="yes" xml:space="preserve">
          <source>Represents a time in different parts. Although this type can represent leap seconds, they are generally not supported in this module. They are not ignored, but the &lt;code&gt;DateTime&lt;/code&gt;'s returned by procedures in this module will never have a leap second.</source>
          <target state="translated">さまざまな部分で時間を表します。このタイプはうるう秒を表すことができますが、通常、このモジュールではサポートされていません。これらは無視されませんが、このモジュールのプロシージャによって返される &lt;code&gt;DateTime&lt;/code&gt; にはうるう秒はありません。</target>
        </trans-unit>
        <trans-unit id="899b801db0732a2b8bb088f71d876cce161577c6" translate="yes" xml:space="preserve">
          <source>Represents a weekday.</source>
          <target state="translated">平日を表します。</target>
        </trans-unit>
        <trans-unit id="de4d2a2dca7a42ded5243e5a6e366a0f42019f32" translate="yes" xml:space="preserve">
          <source>Represents the entire floating-point environment. The floating-point environment refers collectively to any floating-point status flags and control modes supported by the implementation.</source>
          <target state="translated">浮動小数点環境全体を表す。浮動小数点環境は、実装でサポートされている浮動小数点ステータスフラグと制御モードを総称して参照します。</target>
        </trans-unit>
        <trans-unit id="577162d22bbb66e30b35ce553801326629e0643e" translate="yes" xml:space="preserve">
          <source>Represents the floating-point status flags collectively, including any status the implementation associates with the flags. A floating-point status flag is a system variable whose value is set (but never cleared) when a floating-point exception is raised, which occurs as a side effect of exceptional floating-point arithmetic to provide auxiliary information. A floating-point control mode is a system variable whose value may be set by the user to affect the subsequent behavior of floating-point arithmetic.</source>
          <target state="translated">浮動小数点ステータスフラグをまとめて表し、実装がフラグに関連付けるステータスを含みます。浮動小数点ステータス・フラグは、浮動小数点例外が発生したときに値が設定される(クリアされることはない)システム変数で、補助情報を提供するための例外的な浮動小数点演算の副作用として発生します。浮動小数点制御モードは、浮動小数点演算のその後の動作に影響を与えるために、ユーザが値を設定することができるシステム変数です。</target>
        </trans-unit>
        <trans-unit id="2b2210bdc3dcb3fa823cf296b4b33bc17dc576f6" translate="yes" xml:space="preserve">
          <source>Requests &lt;code&gt;url&lt;/code&gt; with the custom method string specified by the</source>
          <target state="translated">で指定されたカスタムメソッド文字列を使用して &lt;code&gt;url&lt;/code&gt; をリクエストします</target>
        </trans-unit>
        <trans-unit id="423bf14a52b51814fad80460b71fa2b637c1a7a2" translate="yes" xml:space="preserve">
          <source>Requests &lt;code&gt;url&lt;/code&gt; with the specified &lt;code&gt;httpMethod&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;httpMethod&lt;/code&gt; で &lt;code&gt;url&lt;/code&gt; を要求します。</target>
        </trans-unit>
        <trans-unit id="37f069ac401bf42a0dbc5b97d2bb0aa079730513" translate="yes" xml:space="preserve">
          <source>Required to build this module.</source>
          <target state="translated">このモジュールを構築するために必要です。</target>
        </trans-unit>
        <trans-unit id="d3c49d0f71096b4ee04b440fb7f00fdd36784456" translate="yes" xml:space="preserve">
          <source>Resets all attributes on stdout. It is advisable to register this as a quit proc with &lt;code&gt;system.addQuitProc(resetAttributes)&lt;/code&gt;.</source>
          <target state="translated">stdoutのすべての属性をリセットします。これをquit procとして &lt;code&gt;system.addQuitProc(resetAttributes)&lt;/code&gt; に登録することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="97f4d7e17f03d2ddae5b33b0691e0061a8d5b3a6" translate="yes" xml:space="preserve">
          <source>Resets all attributes.</source>
          <target state="translated">すべての属性をリセットします。</target>
        </trans-unit>
        <trans-unit id="df722cbded2bdfc5394608fd4ef3dc24f7902930" translate="yes" xml:space="preserve">
          <source>Resets the &lt;code&gt;finished&lt;/code&gt; status of &lt;code&gt;future&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;future&lt;/code&gt; の &lt;code&gt;finished&lt;/code&gt; ステータスをリセットします。</target>
        </trans-unit>
        <trans-unit id="751dfe5aca039753b67ccdb550e807be870fe5e1" translate="yes" xml:space="preserve">
          <source>Resets the deque so that it is empty.</source>
          <target state="translated">deque を空になるようにリセットします。</target>
        </trans-unit>
        <trans-unit id="9a02051a6d57fa8e81760d7a4c6ac7cb815afd1c" translate="yes" xml:space="preserve">
          <source>Resets the table so that is is empty.</source>
          <target state="translated">テーブルが空になるようにリセットします。</target>
        </trans-unit>
        <trans-unit id="f3835365cc0aec4ce30ee73bcf3f82965e792739" translate="yes" xml:space="preserve">
          <source>Resets the table so that it is empty.</source>
          <target state="translated">テーブルが空になるようにリセットします。</target>
        </trans-unit>
        <trans-unit id="87198cfc41473b283133dd7d542f9622316bdb79" translate="yes" xml:space="preserve">
          <source>Responds to the request with the specified &lt;code&gt;HttpCode&lt;/code&gt;, headers and content.</source>
          <target state="translated">指定された &lt;code&gt;HttpCode&lt;/code&gt; 、ヘッダー、コンテンツでリクエストに応答します。</target>
        </trans-unit>
        <trans-unit id="e2fa0c601772113ab10ae8c9ecaea4253c175498" translate="yes" xml:space="preserve">
          <source>Restrict the types of global compiletime variables to &lt;code&gt;Set[T]&lt;/code&gt; or similar unordered, only-growable collections so that we can track the module's write effects to these variables and reapply the changes in a different order.</source>
          <target state="translated">グローバルコンパイル時変数のタイプを &lt;code&gt;Set[T]&lt;/code&gt; または同様の順序付けされていない、成長可能なコレクションに制限して、これらの変数に対するモジュールの書き込み効果を追跡し、変更を別の順序で再適用できるようにします。</target>
        </trans-unit>
        <trans-unit id="5faa59d4bc3756040b8ce9e673c09f929e6ee9ba" translate="yes" xml:space="preserve">
          <source>Result</source>
          <target state="translated">Result</target>
        </trans-unit>
        <trans-unit id="b14c22c32514d194f9b116863613c6081728c177" translate="yes" xml:space="preserve">
          <source>Result variable</source>
          <target state="translated">結果変数</target>
        </trans-unit>
        <trans-unit id="0a21e903b6267f536fabc1b6084afbb594ce4774" translate="yes" xml:space="preserve">
          <source>Resulting type of literal</source>
          <target state="translated">リテラルの結果型</target>
        </trans-unit>
        <trans-unit id="a9e8ac0d20310a4fbe103da4be4f60aadb8e03c1" translate="yes" xml:space="preserve">
          <source>Results in &lt;em&gt;tailSplit&lt;/em&gt; containing:</source>
          <target state="translated">&lt;em&gt;次&lt;/em&gt;を含む&lt;em&gt;tailSplitの&lt;/em&gt;結果：</target>
        </trans-unit>
        <trans-unit id="02d55b2baf2725bcbe0634735b4de01c005aa3e5" translate="yes" xml:space="preserve">
          <source>Results in:</source>
          <target state="translated">結果が出ています。</target>
        </trans-unit>
        <trans-unit id="c11c0efb014d298d8b91fe1db9fb38dc43bf8827" translate="yes" xml:space="preserve">
          <source>Resumes the process &lt;em&gt;p&lt;/em&gt;.</source>
          <target state="translated">プロセス&lt;em&gt;pを&lt;/em&gt;再開します。</target>
        </trans-unit>
        <trans-unit id="066583e93d0d4e7bbce10d5a64fe73f5cf48d2df" translate="yes" xml:space="preserve">
          <source>Retrieve the server name requested in the client hello. This can be used in the callback set in &lt;em&gt;SSL_CTX_set_tlsext_servername_callback&lt;/em&gt; to implement virtual hosting. May return &lt;em&gt;nil&lt;/em&gt;.</source>
          <target state="translated">クライアントのhelloで要求されたサーバー名を取得します。これは、&lt;em&gt;SSL_CTX_set_tlsext_servername_callback&lt;/em&gt;のコールバックセットで使用して、仮想ホスティングを実装できます。&lt;em&gt;nilを&lt;/em&gt;返す場合があります。</target>
        </trans-unit>
        <trans-unit id="04589a81fb23be8bb65bf03611e766051e2ac975" translate="yes" xml:space="preserve">
          <source>Retrieves &lt;code&gt;file&lt;/code&gt;. File must be ASCII text.</source>
          <target state="translated">&lt;code&gt;file&lt;/code&gt; 取得します。ファイルはASCIIテキストである必要があります。</target>
        </trans-unit>
        <trans-unit id="06165ff17f31624c66e7c5d59742bd21ce1e6e02" translate="yes" xml:space="preserve">
          <source>Retrieves &lt;code&gt;file&lt;/code&gt;. File must be ASCII text. If &lt;code&gt;async&lt;/code&gt; is true, this function will return immediately and it will be your job to call asyncio's &lt;code&gt;poll&lt;/code&gt; to progress this operation.</source>
          <target state="translated">&lt;code&gt;file&lt;/code&gt; 取得します。ファイルはASCIIテキストである必要があります。場合は &lt;code&gt;async&lt;/code&gt; trueの場合、この関数はすぐに戻りますと、asyncioの呼び出すためにあなたの仕事になります &lt;code&gt;poll&lt;/code&gt; この操作を進行します。</target>
        </trans-unit>
        <trans-unit id="708b44dc2f2baf5cc8245762f76c3a9de0bba1e7" translate="yes" xml:space="preserve">
          <source>Retrieves a node specified by &lt;code&gt;localName&lt;/code&gt; and &lt;code&gt;namespaceURI&lt;/code&gt;. If this node cannot be found returns &lt;code&gt;nil&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;localName&lt;/code&gt; と &lt;code&gt;namespaceURI&lt;/code&gt; で指定されたノードを取得します。このノードが見つからない場合は &lt;code&gt;nil&lt;/code&gt; を返します</target>
        </trans-unit>
        <trans-unit id="0f4a5d757905a34a975a7c7f880ee9257bec516b" translate="yes" xml:space="preserve">
          <source>Retrieves a node specified by &lt;code&gt;name&lt;/code&gt;. If this node cannot be found returns &lt;code&gt;nil&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 指定されたノードを取得します。このノードが見つからない場合は &lt;code&gt;nil&lt;/code&gt; を返します</target>
        </trans-unit>
        <trans-unit id="1e4ba6f579e56eb9968a2769102dd7d9747f8076" translate="yes" xml:space="preserve">
          <source>Retrieves a single row. If the query doesn't return any rows, this proc will return a Row with empty strings for each column.</source>
          <target state="translated">単一の行を取得します。クエリが何も行を返さない場合、このプロシージャは各列に空の文字列を含む行を返します。</target>
        </trans-unit>
        <trans-unit id="cd6ff2ac1d9027b0924878f8ff15cc5797e1e841" translate="yes" xml:space="preserve">
          <source>Retrieves an &lt;em&gt;Attr&lt;/em&gt; node by &lt;code&gt;localName&lt;/code&gt; and &lt;code&gt;namespaceURI&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;localName&lt;/code&gt; および &lt;code&gt;namespaceURI&lt;/code&gt; によって&lt;em&gt;Attr&lt;/em&gt;ノードを取得します</target>
        </trans-unit>
        <trans-unit id="f9e91065bf30d26fa7fab636c6847bb75cb5b08a" translate="yes" xml:space="preserve">
          <source>Retrieves an attribute node by &lt;code&gt;name&lt;/code&gt; To retrieve an attribute node by qualified name and namespace URI, use the &lt;em&gt;getAttributeNodeNS&lt;/em&gt; method</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 属性ノードを取得する修飾名と名前空間URIで属性ノードを取得するには、&lt;em&gt;getAttributeNodeNS&lt;/em&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="d99b34114c6fab7e3e4c9b090e7887f1f8c2734d" translate="yes" xml:space="preserve">
          <source>Retrieves an attribute value by &lt;code&gt;localName&lt;/code&gt; and &lt;code&gt;namespaceURI&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;localName&lt;/code&gt; および &lt;code&gt;namespaceURI&lt;/code&gt; によって属性値を取得します</target>
        </trans-unit>
        <trans-unit id="321d6245edf371666ca536f11b615b2835822504" translate="yes" xml:space="preserve">
          <source>Retrieves an attribute value by &lt;code&gt;name&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 属性値を取得します</target>
        </trans-unit>
        <trans-unit id="2d3583b597046bb9612671a541518853b1914b2a" translate="yes" xml:space="preserve">
          <source>Retrieves application-defined &lt;code&gt;data&lt;/code&gt; associated with descriptor &lt;code&gt;fd&lt;/code&gt;. If specified descriptor &lt;code&gt;fd&lt;/code&gt; is not registered, empty/default value will be returned.</source>
          <target state="translated">記述子 &lt;code&gt;fd&lt;/code&gt; に関連付けられているアプリケーション定義の &lt;code&gt;data&lt;/code&gt; 取得します。指定された記述子 &lt;code&gt;fd&lt;/code&gt; が登録されていない場合、空/デフォルト値が返されます。</target>
        </trans-unit>
        <trans-unit id="fb8a6d4886e2330b52bb6a75989727c4bd05a532" translate="yes" xml:space="preserve">
          <source>Retrieves arbitrary data stored inside SSLContext.</source>
          <target state="translated">SSLContext 内に保存されている任意のデータを取得します。</target>
        </trans-unit>
        <trans-unit id="015f16100c976af43692f433ec03836131d79abe" translate="yes" xml:space="preserve">
          <source>Retrieves file information for the file object pointed to by &lt;em&gt;path&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;pathが&lt;/em&gt;指すファイルオブジェクトのファイル情報を取得します。</target>
        </trans-unit>
        <trans-unit id="2191cd8bc54b836002b1901a06c2621a1a7fbaee" translate="yes" xml:space="preserve">
          <source>Retrieves file information for the file object represented by the given handle.</source>
          <target state="translated">指定したハンドルで表されるファイルオブジェクトのファイル情報を取得します。</target>
        </trans-unit>
        <trans-unit id="c7e0c86f86814f46e9dbd90709b15f1e20420dc0" translate="yes" xml:space="preserve">
          <source>Retrieves option &lt;code&gt;opt&lt;/code&gt; as a boolean value.</source>
          <target state="translated">オプション &lt;code&gt;opt&lt;/code&gt; をブール値として取得します。</target>
        </trans-unit>
        <trans-unit id="837b13a4bd9356d109f78e8ac8a4f83d4bf6eb4d" translate="yes" xml:space="preserve">
          <source>Retrieves the BiggestInt value of a &lt;em&gt;JInt JsonNode&lt;/em&gt;.</source>
          <target state="translated">BiggestInt値取得&lt;em&gt;JINT JsonNodeを&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="6067326ec0effa74c48170c1f1d00e93cde22b6d" translate="yes" xml:space="preserve">
          <source>Retrieves the amount of delegates in &lt;code&gt;disp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;disp&lt;/code&gt; 内のデリゲートの数を取得します。</target>
        </trans-unit>
        <trans-unit id="51443b1a027e0041343a327a18a22da988c23255" translate="yes" xml:space="preserve">
          <source>Retrieves the application-data assigned with descriptor &lt;code&gt;fd&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt;. This &lt;code&gt;value&lt;/code&gt; can be modified in the scope of the &lt;code&gt;withData&lt;/code&gt; call.</source>
          <target state="translated">記述子 &lt;code&gt;fd&lt;/code&gt; で &lt;code&gt;value&lt;/code&gt; に割り当てられたアプリケーションデータを取得します。この &lt;code&gt;value&lt;/code&gt; は、 &lt;code&gt;withData&lt;/code&gt; 呼び出しのスコープで変更できます。</target>
        </trans-unit>
        <trans-unit id="3e50dd135cc90e3bf1fb606553463e3584da4aaf" translate="yes" xml:space="preserve">
          <source>Retrieves the array of a &lt;em&gt;JArray JsonNode&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;JArray JsonNodeの&lt;/em&gt;配列を取得します。</target>
        </trans-unit>
        <trans-unit id="b6b54980b1ce107ca235e14e5585daeca73e5b68" translate="yes" xml:space="preserve">
          <source>Retrieves the bool value of a &lt;em&gt;JBool JsonNode&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;JBool JsonNodeの&lt;/em&gt;ブール値を取得します。</target>
        </trans-unit>
        <trans-unit id="6116e6af7428731b024ee0bcb9a90633eaa1b65c" translate="yes" xml:space="preserve">
          <source>Retrieves the cons value of a &lt;em&gt;SList SexpNode&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;SList SexpNodeの&lt;/em&gt; cons値を取得します。</target>
        </trans-unit>
        <trans-unit id="1fb77bcde55641bc259dfaf8d662eb74e685f27f" translate="yes" xml:space="preserve">
          <source>Retrieves the current position of the file pointer that is used to read from the specified file. The file's first byte has the index zero.</source>
          <target state="translated">指定されたファイルからの読み込みに使用されるファイルポインタの現在位置を取得します。ファイルの最初のバイトのインデックスはゼロです。</target>
        </trans-unit>
        <trans-unit id="6806d5240ac26960202f3647aa627772a18e4246" translate="yes" xml:space="preserve">
          <source>Retrieves the exception stored in &lt;code&gt;future&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;future&lt;/code&gt; に格納されている例外を取得します。</target>
        </trans-unit>
        <trans-unit id="6e39d1bc79f320cde4bb8be5a5b0c6f755b35daa" translate="yes" xml:space="preserve">
          <source>Retrieves the float value of a &lt;em&gt;JFloat JsonNode&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;JFloat JsonNodeの&lt;/em&gt; float値を取得します。</target>
        </trans-unit>
        <trans-unit id="444feb29b7d6550e584fb3b8bfc96e61bd1599e8" translate="yes" xml:space="preserve">
          <source>Retrieves the float value of a &lt;em&gt;SFloat SexpNode&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;SFloat SexpNodeの&lt;/em&gt; float値を取得します。</target>
        </trans-unit>
        <trans-unit id="39cc5a39396857a14f239752157a7eddb187d0b6" translate="yes" xml:space="preserve">
          <source>Retrieves the int value of a &lt;em&gt;JInt JsonNode&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;JInt JsonNodeの&lt;/em&gt; int値を取得します。</target>
        </trans-unit>
        <trans-unit id="72e2f84a130412ae5b2d3de89f74115d86fbbe30" translate="yes" xml:space="preserve">
          <source>Retrieves the int value of a &lt;em&gt;SInt SexpNode&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;SInt SexpNodeの&lt;/em&gt; int値を取得します。</target>
        </trans-unit>
        <trans-unit id="ca4fb2018aae86dbcad121e715113628f3608605" translate="yes" xml:space="preserve">
          <source>Retrieves the int value of a &lt;em&gt;SList SexpNode&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;SList SexpNodeの&lt;/em&gt; int値を取得します。</target>
        </trans-unit>
        <trans-unit id="9e6999893833e0ccc7cf4102045821f5a0b25645" translate="yes" xml:space="preserve">
          <source>Retrieves the key, value pairs of a &lt;em&gt;JObject JsonNode&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;JObject JsonNode&lt;/em&gt;のキーと値のペアを取得します。</target>
        </trans-unit>
        <trans-unit id="9ff933948f6e23aa1e7b11b1015d8095219c9661" translate="yes" xml:space="preserve">
          <source>Retrieves the specified file's size.</source>
          <target state="translated">指定したファイルのサイズを取得します。</target>
        </trans-unit>
        <trans-unit id="685a3d9e7762093ce44594d9a49f0280d7bf0559" translate="yes" xml:space="preserve">
          <source>Retrieves the specified response's &lt;code&gt;HttpCode&lt;/code&gt;.</source>
          <target state="translated">指定された応答の &lt;code&gt;HttpCode&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="7d1d493765a4f0514c58ff02b20db45c11ad1976" translate="yes" xml:space="preserve">
          <source>Retrieves the specified response's body.</source>
          <target state="translated">指定されたレスポンスのボディを取得します。</target>
        </trans-unit>
        <trans-unit id="570a4baba3e303fa102910501697bc3bb03173f4" translate="yes" xml:space="preserve">
          <source>Retrieves the specified response's content length.</source>
          <target state="translated">指定されたレスポンスの内容の長さを取得します。</target>
        </trans-unit>
        <trans-unit id="09359ef901fb6fa3a94480d9dc3968d56f7146fa" translate="yes" xml:space="preserve">
          <source>Retrieves the specified response's content type.</source>
          <target state="translated">指定されたレスポンスのコンテンツタイプを取得します。</target>
        </trans-unit>
        <trans-unit id="df7f739a35f9f0c186a541799d97d6d0e6f76841" translate="yes" xml:space="preserve">
          <source>Retrieves the specified response's last modified time.</source>
          <target state="translated">指定したレスポンスの最終更新時刻を取得します。</target>
        </trans-unit>
        <trans-unit id="3d6fcdd1f339c48a10ac7e4a0ef6aab88c7ad6c3" translate="yes" xml:space="preserve">
          <source>Retrieves the string value of a &lt;em&gt;JString JsonNode&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;JString JsonNodeの&lt;/em&gt;文字列値を取得します。</target>
        </trans-unit>
        <trans-unit id="dea0445c40c6bc5fbb5df22449aeeb7a80d3b4cb" translate="yes" xml:space="preserve">
          <source>Retrieves the string value of a &lt;em&gt;SString SexpNode&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;SString SexpNodeの&lt;/em&gt;文字列値を取得します。</target>
        </trans-unit>
        <trans-unit id="fa288d732352af266800fd3d19549ed756860f85" translate="yes" xml:space="preserve">
          <source>Retrieves the underlying selector's file descriptor.</source>
          <target state="translated">基礎となるセレクタのファイル記述子を取得します。</target>
        </trans-unit>
        <trans-unit id="f6d6454598f094014f3dd4207038915a13b25f1b" translate="yes" xml:space="preserve">
          <source>Retrieves the value of &lt;code&gt;future&lt;/code&gt;. Future must be finished otherwise this function will fail with a &lt;code&gt;ValueError&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;future&lt;/code&gt; の値を取得します。Futureを終了する必要があります。そうしないと、この関数は &lt;code&gt;ValueError&lt;/code&gt; 例外で失敗します。</target>
        </trans-unit>
        <trans-unit id="128c89c6e212cd4b3fd298d37566de4e1e003547" translate="yes" xml:space="preserve">
          <source>Retrieving a website</source>
          <target state="translated">ウェブサイトの検索</target>
        </trans-unit>
        <trans-unit id="d18c3dba807023eb479b19cccaf642fbd166e81c" translate="yes" xml:space="preserve">
          <source>Retrieving the value of a JSON node can then be achieved using one of the helper procedures, which include:</source>
          <target state="translated">JSONノードの値を取得するには、次のようなヘルパープロシージャのいずれかを使用します。</target>
        </trans-unit>
        <trans-unit id="f83e64c353006b473f887588653de238abd34f04" translate="yes" xml:space="preserve">
          <source>Return OpenSSL version as unsigned long or 0 if not available</source>
          <target state="translated">OpenSSL のバージョンを unsigned long で返します。</target>
        </trans-unit>
        <trans-unit id="44a1fa97206206bfcd4e3bf95bbf51164e9829bc" translate="yes" xml:space="preserve">
          <source>Return a Nim string built from a MemSlice.</source>
          <target state="translated">MemSliceから構築されたNim文字列を返します。</target>
        </trans-unit>
        <trans-unit id="ade10eda4a0f18e89f3696d99a08c9ee0cd76ea8" translate="yes" xml:space="preserve">
          <source>Return each line in a file as a Nim string, like &lt;a href=&quot;system#lines.i,File&quot;&gt;lines(File)&lt;/a&gt;. &lt;em&gt;delim&lt;/em&gt;, &lt;em&gt;eat&lt;/em&gt;, and delimiting logic is exactly as for &lt;a href=&quot;#memSlices&quot;&gt;memSlices&lt;/a&gt;, but Nim strings are returned.</source>
          <target state="translated">&lt;a href=&quot;system#lines.i,File&quot;&gt;lines（File）の&lt;/a&gt;ように、ファイルの各行をNim文字列として返します。&lt;em&gt;delim&lt;/em&gt;、&lt;em&gt;eat&lt;/em&gt;、およびdelimitingロジックは&lt;a href=&quot;#memSlices&quot;&gt;memSlices&lt;/a&gt;とまったく同じですが、Nim文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="2264bb678878c1da487e8d9590aeb94bfa8d65fd" translate="yes" xml:space="preserve">
          <source>Return statement</source>
          <target state="translated">返却文</target>
        </trans-unit>
        <trans-unit id="99c5a3d019af345a567a439667416a1af215f5db" translate="yes" xml:space="preserve">
          <source>Return the contents of &lt;em&gt;s&lt;/em&gt; centered in a string &lt;em&gt;width&lt;/em&gt; long using &lt;em&gt;fillChar&lt;/em&gt; as padding.</source>
          <target state="translated">&lt;em&gt;fillChar&lt;/em&gt;をパディングとして使用して、文字列&lt;em&gt;幅&lt;/em&gt; longで&lt;em&gt;中央揃え&lt;/em&gt;された&lt;em&gt;s&lt;/em&gt;のコンテンツを返します。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0f5596430fc57cece11913c7a92342ebf124e61d" translate="yes" xml:space="preserve">
          <source>Return the distance from (0,0) to &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">（0,0）から&lt;em&gt;z&lt;/em&gt;までの距離を返します。</target>
        </trans-unit>
        <trans-unit id="7c18a019affcca1100cfdc0773d93f18d4c7aaf7" translate="yes" xml:space="preserve">
          <source>Return the last item in nodes children. Same as &lt;em&gt;node[^1]&lt;/em&gt;</source>
          <target state="translated">子ノードの最後のアイテムを返します。&lt;em&gt;ノードと&lt;/em&gt;同じ&lt;em&gt;[^ 1]&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fa1f8ce586fa1f1aca322872b925f917f2a43aeb" translate="yes" xml:space="preserve">
          <source>Return the number of elements of &lt;em&gt;deq&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;deq&lt;/em&gt;の要素数を返します。</target>
        </trans-unit>
        <trans-unit id="e135dfefec0e7e76f509c5ee6e0fde4befcd98e5" translate="yes" xml:space="preserve">
          <source>Return the value of &lt;em&gt;initialSize&lt;/em&gt; to support &lt;em&gt;count&lt;/em&gt; items.</source>
          <target state="translated">値を返します&lt;em&gt;INITIALSIZEを&lt;/em&gt;サポートする&lt;em&gt;カウント&lt;/em&gt;アイテム。</target>
        </trans-unit>
        <trans-unit id="2defcf7d16cd037c1dc3872ea7a75d5c11453bfe" translate="yes" xml:space="preserve">
          <source>Return the value of a property of name &lt;em&gt;field&lt;/em&gt; from a JsAssoc &lt;em&gt;obj&lt;/em&gt;.</source>
          <target state="translated">JsAssoc &lt;em&gt;obj&lt;/em&gt;から名前&lt;em&gt;フィールドの&lt;/em&gt;プロパティの値を返します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="287838e3c35b83d59a3db1c06370a17b602e22aa" translate="yes" xml:space="preserve">
          <source>Return the value of a property of name &lt;em&gt;field&lt;/em&gt; from a JsObject &lt;em&gt;obj&lt;/em&gt;.</source>
          <target state="translated">JsObject &lt;em&gt;obj&lt;/em&gt;から名前&lt;em&gt;フィールドの&lt;/em&gt;プロパティの値を返します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7f3e132f4f4ff03980d3b3694da1d265aad54262" translate="yes" xml:space="preserve">
          <source>Return true if &lt;em&gt;item&lt;/em&gt; is in &lt;em&gt;deq&lt;/em&gt; or false if not found. Usually used via the &lt;code&gt;in&lt;/code&gt; operator. It is the equivalent of &lt;code&gt;deq.find(item) &amp;gt;= 0&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;アイテム&lt;/em&gt;が&lt;em&gt;deqの&lt;/em&gt;場合はtrue、見つからない場合はfalseを返します。通常、 &lt;code&gt;in&lt;/code&gt; 演算子を介して使用されます。これは &lt;code&gt;deq.find(item) &amp;gt;= 0&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="f6171f05dfc435cf65e810b333e9106c25b9bfdb" translate="yes" xml:space="preserve">
          <source>Return value: The newly created process object. Nil is never returned, but &lt;code&gt;EOS&lt;/code&gt; is raised in case of an error.</source>
          <target state="translated">戻り値：新しく作成されたプロセスオブジェクト。Nilは返されませんが、エラーの場合は &lt;code&gt;EOS&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="ca9a66242586d466bdbc58b7b1fbfd07beea37fc" translate="yes" xml:space="preserve">
          <source>Returns (osInvalidSocket, &quot;&quot;) if an error occurred.</source>
          <target state="translated">エラーが発生した場合は (osInvalidSocket,&quot;&quot;)を返します。</target>
        </trans-unit>
        <trans-unit id="dcc5df2e4d6cbe31ebed040fecbbd0e4641a1493" translate="yes" xml:space="preserve">
          <source>Returns -1 if no item has been found and -2 if multiple items match.</source>
          <target state="translated">アイテムが見つからなかった場合は -1、複数のアイテムが一致した場合は -2 を返します。</target>
        </trans-unit>
        <trans-unit id="a48dc00b46b58cb7acacdcf6975044cb1e94919e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;'&quot;' &amp;amp; s &amp;amp; '&quot;'&lt;/code&gt; if &lt;em&gt;s&lt;/em&gt; contains a space and does not start with a quote, else returns &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">戻り値 &lt;code&gt;'&quot;' &amp;amp; s &amp;amp; '&quot;'&lt;/code&gt; 場合&lt;em&gt;sが&lt;/em&gt;スペースが含まれており、引用付きで起動しない、それ以外のリターン&lt;em&gt;秒&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="ff8a229e5915e9c9536813d4f5bd6d13cc7a7728" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is not a &lt;code&gt;JArray&lt;/code&gt;, or if &lt;code&gt;n&lt;/code&gt; is nil.</source>
          <target state="translated">戻り値の &lt;code&gt;default&lt;/code&gt; 場合 &lt;code&gt;n&lt;/code&gt; ない &lt;code&gt;JArray&lt;/code&gt; 場合、または &lt;code&gt;n&lt;/code&gt; はゼロです。</target>
        </trans-unit>
        <trans-unit id="a543f654ad3f6ad7022da544bf7e19b20651b602" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is not a &lt;code&gt;JBool&lt;/code&gt;, or if &lt;code&gt;n&lt;/code&gt; is nil.</source>
          <target state="translated">戻り値の &lt;code&gt;default&lt;/code&gt; 場合 &lt;code&gt;n&lt;/code&gt; ない &lt;code&gt;JBool&lt;/code&gt; 場合、または &lt;code&gt;n&lt;/code&gt; はゼロです。</target>
        </trans-unit>
        <trans-unit id="705a6a4b6149c64acc6d1beaddd53f928a0aa174" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is not a &lt;code&gt;JFloat&lt;/code&gt; or &lt;code&gt;JInt&lt;/code&gt;, or if &lt;code&gt;n&lt;/code&gt; is nil.</source>
          <target state="translated">戻り値の &lt;code&gt;default&lt;/code&gt; 場合 &lt;code&gt;n&lt;/code&gt; ない &lt;code&gt;JFloat&lt;/code&gt; または &lt;code&gt;JInt&lt;/code&gt; 場合、または &lt;code&gt;n&lt;/code&gt; はゼロです。</target>
        </trans-unit>
        <trans-unit id="17145b367e102ff87e1c3b70efa399b993ee1807" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is not a &lt;code&gt;JInt&lt;/code&gt;, or if &lt;code&gt;n&lt;/code&gt; is nil.</source>
          <target state="translated">戻り値の &lt;code&gt;default&lt;/code&gt; 場合 &lt;code&gt;n&lt;/code&gt; ない &lt;code&gt;JInt&lt;/code&gt; 場合、または &lt;code&gt;n&lt;/code&gt; はゼロです。</target>
        </trans-unit>
        <trans-unit id="d315e71eab355d443e19ab232507339662628da0" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is not a &lt;code&gt;JObject&lt;/code&gt;, or if &lt;code&gt;n&lt;/code&gt; is nil.</source>
          <target state="translated">戻り値の &lt;code&gt;default&lt;/code&gt; 場合 &lt;code&gt;n&lt;/code&gt; ない &lt;code&gt;JObject&lt;/code&gt; 場合、または &lt;code&gt;n&lt;/code&gt; はゼロです。</target>
        </trans-unit>
        <trans-unit id="447d0f7984892e3f07ebf8fdcaeb9993ef879662" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is not a &lt;code&gt;JString&lt;/code&gt;, or if &lt;code&gt;n&lt;/code&gt; is nil.</source>
          <target state="translated">戻り値の &lt;code&gt;default&lt;/code&gt; 場合 &lt;code&gt;n&lt;/code&gt; ない &lt;code&gt;JString&lt;/code&gt; 場合、または &lt;code&gt;n&lt;/code&gt; はゼロです。</target>
        </trans-unit>
        <trans-unit id="fb00d2122f17f1f0c359738ddd75daa270a80735" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is not a &lt;code&gt;SFloat&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; が &lt;code&gt;SFloat&lt;/code&gt; でない場合、 &lt;code&gt;default&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="65855ca1ca284e074b8dd94da068d9bf1106092a" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is not a &lt;code&gt;SInt&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; が &lt;code&gt;SInt&lt;/code&gt; でない場合、 &lt;code&gt;default&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="18a4d4ecaa5a382af5d435aea158e0708c8bbec4" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is not a &lt;code&gt;SList&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; が &lt;code&gt;SList&lt;/code&gt; でない場合、 &lt;code&gt;default&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="929ba86ba314d5479dcc23c84e8127c5ecd14a30" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is not a &lt;code&gt;SString&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; が &lt;code&gt;SString&lt;/code&gt; でない場合、 &lt;code&gt;default&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="0b28c62b1da24916c221ec36be11091184096142" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if both &lt;code&gt;Option``s are ``none&lt;/code&gt;, or if they have equal values</source>
          <target state="translated">両方の &lt;code&gt;Option``s are ``none&lt;/code&gt; である場合、またはそれらの値が等しい場合、 &lt;code&gt;true&lt;/code&gt; を返します</target>
        </trans-unit>
        <trans-unit id="28fa89343dd943d496f518140ed7a30afde7f32b" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if coroutine has not returned, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">コルーチンが返されなかった場合は &lt;code&gt;true&lt;/code&gt; 、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="b27d2210164d96dcfbf7397901cc1f380f593789" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;version&lt;/code&gt; of the DomImplementation implements &lt;code&gt;feature&lt;/code&gt;, otherwise &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">この &lt;code&gt;version&lt;/code&gt; のDomImplementationが &lt;code&gt;feature&lt;/code&gt; 実装している場合は &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="09c6ec64fce7e918d973572976c4020e6633665f" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; when an attribute with a given &lt;code&gt;localName&lt;/code&gt; and &lt;code&gt;namespaceURI&lt;/code&gt; is specified on this element , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">指定された &lt;code&gt;localName&lt;/code&gt; および &lt;code&gt;namespaceURI&lt;/code&gt; を持つ属性がこの要素で指定されている場合は &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="98d0a77296ca4a8d67f075aafe1d6d3ae1f66c4a" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; when an attribute with a given &lt;code&gt;name&lt;/code&gt; is specified on this element , &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">指定された &lt;code&gt;name&lt;/code&gt; 属性がこの要素に指定されている場合は &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5ebe36e10d41ce2814858bd5dd8194d1f70832e7" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt;, if data was succesfully updated, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">データが正常に更新された場合は &lt;code&gt;true&lt;/code&gt; 、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1f1db63a5862808a2c924bc4746de9c71a294f97" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt;, if there are no registered events or descriptors in selector.</source>
          <target state="translated">セレクターに登録済みのイベントまたは記述子がない場合は、 &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c225b4c4709abebe016008360969c173825e525b" translate="yes" xml:space="preserve">
          <source>Returns &lt;em&gt;true&lt;/em&gt; if the global dispatcher has pending operations.</source>
          <target state="translated">グローバルディスパッチャーに保留中の操作が&lt;em&gt;ある&lt;/em&gt;場合は&lt;em&gt;trueを&lt;/em&gt;返します。</target>
        </trans-unit>
        <trans-unit id="fdfb1ee5e761f01932c785e691256728905609ed" translate="yes" xml:space="preserve">
          <source>Returns &lt;em&gt;true&lt;/em&gt; if the ordered set has been initialized with &lt;a href=&quot;#initOrderedSet&quot;&gt;initSet&lt;/a&gt;.</source>
          <target state="translated">順序付きセットが&lt;a href=&quot;#initOrderedSet&quot;&gt;initSetで&lt;/a&gt;初期化されている場合は&lt;em&gt;trueを&lt;/em&gt;返します。</target>
        </trans-unit>
        <trans-unit id="e1c31e9371662f13a3b17347d05acdb3e1fd8273" translate="yes" xml:space="preserve">
          <source>Returns &lt;em&gt;true&lt;/em&gt; if the set has been initialized with &lt;a href=&quot;#initSet&quot;&gt;initSet&lt;/a&gt;.</source>
          <target state="translated">セットが&lt;a href=&quot;#initSet&quot;&gt;initSetで&lt;/a&gt;初期化されている場合は&lt;em&gt;trueを&lt;/em&gt;返します。</target>
        </trans-unit>
        <trans-unit id="617fb92dd97e67dc58115e3bd9351acb01159738" translate="yes" xml:space="preserve">
          <source>Returns &lt;em&gt;x&lt;/em&gt; rounded up to the nearest power of two. Zero and negative numbers get rounded up to 1.</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt;を最も近い2の累乗に切り上げて返します。ゼロと負の数は1に切り上げられます。</target>
        </trans-unit>
        <trans-unit id="d79ac8ba0001d2e4bf4814e4735414553d0e3714" translate="yes" xml:space="preserve">
          <source>Returns &lt;em&gt;z&lt;/em&gt; in polar coordinates.</source>
          <target state="translated">極座標で&lt;em&gt;z&lt;/em&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="e937b1bc62398f7c2558d4ffdd31612a2e54f52a" translate="yes" xml:space="preserve">
          <source>Returns &lt;em&gt;z&lt;/em&gt;'s string representation as &lt;code&gt;&quot;(re, im)&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt;の文字列表現を &lt;code&gt;&quot;(re, im)&quot;&lt;/code&gt; として返します。</target>
        </trans-unit>
        <trans-unit id="83e5fcd487e8bc7b4df2471ce12906d82bfa5ccf" translate="yes" xml:space="preserve">
          <source>Returns String &lt;em&gt;s&lt;/em&gt; concatenated &lt;em&gt;n&lt;/em&gt; times. Example:</source>
          <target state="translated">戻り値文字列&lt;em&gt;の&lt;/em&gt;連結&lt;em&gt;のn&lt;/em&gt;倍。例：</target>
        </trans-unit>
        <trans-unit id="a5ba56abaada16d3d95720efe5b8df3d88e69e47" translate="yes" xml:space="preserve">
          <source>Returns a 3 string tuple of (beforeSep, &lt;em&gt;sep&lt;/em&gt;, afterSep) or (&quot;&quot;, &quot;&quot;, &lt;em&gt;s&lt;/em&gt;) if &lt;em&gt;sep&lt;/em&gt; is not found</source>
          <target state="translated">（beforeSep、&lt;em&gt;sep&lt;/em&gt;、afterSep）または&lt;em&gt;sep&lt;/em&gt;が見つからない場合は（ &quot;&quot;、 &quot;&quot;、&lt;em&gt;s&lt;/em&gt;）の3文字列タプルを返します&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7c14975a8ace5a4bace767a7db2a7ec221ee7e24" translate="yes" xml:space="preserve">
          <source>Returns a 3 string tuple of (beforeSep, &lt;em&gt;sep&lt;/em&gt;, afterSep) or (&lt;em&gt;s&lt;/em&gt;, &quot;&quot;, &quot;&quot;) if &lt;em&gt;sep&lt;/em&gt; is not found and &lt;em&gt;right&lt;/em&gt; is false or (&quot;&quot;, &quot;&quot;, &lt;em&gt;s&lt;/em&gt;) if &lt;em&gt;sep&lt;/em&gt; is not found and &lt;em&gt;right&lt;/em&gt; is true</source>
          <target state="translated">戻り値（beforeSep、の3列タプル&lt;em&gt;9月&lt;/em&gt;、afterSep）または（&lt;em&gt;S&lt;/em&gt;場合は、「」、「」）&lt;em&gt;9月が&lt;/em&gt;見つからとされていない&lt;em&gt;権利は&lt;/em&gt;偽であるか（「」、「」、&lt;em&gt;sの&lt;/em&gt;場合）&lt;em&gt;9月に&lt;/em&gt;発見されていない&lt;em&gt;権利&lt;/em&gt;であります本当</target>
        </trans-unit>
        <trans-unit id="21bcbadd68e657f3ed1a515499ca587a21bba13a" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;DateTime&lt;/code&gt; representing the same point in time as &lt;code&gt;dt&lt;/code&gt; but using &lt;code&gt;zone&lt;/code&gt; as the timezone.</source>
          <target state="translated">&lt;code&gt;dt&lt;/code&gt; と同じ時点を表す &lt;code&gt;DateTime&lt;/code&gt; を返しますが、タイム &lt;code&gt;zone&lt;/code&gt; としてゾーンを使用します。</target>
        </trans-unit>
        <trans-unit id="3ea737ff6b94cd4a40ffa9d780ebfb5527d132a3" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;Future&lt;/code&gt; which will complete when the connection succeeds or an error occurs.</source>
          <target state="translated">接続が成功するかエラーが発生したときに完了する &lt;code&gt;Future&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5e690e1f490d05b71bfb6b87d07a16afb1f392bb" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;Option&lt;/code&gt; that has this value.</source>
          <target state="translated">この値を持つ &lt;code&gt;Option&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="dfd47355dad3eb6af7756f443b830f23b90002ed" translate="yes" xml:space="preserve">
          <source>Returns a &lt;em&gt;NodeList&lt;/em&gt; of all descendant &lt;em&gt;Elements&lt;/em&gt; of &lt;code&gt;el&lt;/code&gt; with a given tag &lt;code&gt;name&lt;/code&gt;, in the order in which they are encountered in a preorder traversal of this &lt;em&gt;Element&lt;/em&gt; tree If &lt;code&gt;name&lt;/code&gt; is &lt;em&gt;*&lt;/em&gt;, returns all descendant of &lt;code&gt;el&lt;/code&gt;</source>
          <target state="translated">戻り値&lt;em&gt;のNodeList&lt;/em&gt;すべての子孫の&lt;em&gt;要素&lt;/em&gt;の &lt;code&gt;el&lt;/code&gt; 与えられたタグを持つ &lt;code&gt;name&lt;/code&gt; それらはこれの先行順走査で検出された順に、&lt;em&gt;要素の&lt;/em&gt;場合は、ツリー &lt;code&gt;name&lt;/code&gt; ある&lt;em&gt;*&lt;/em&gt;、すべての子孫返し &lt;code&gt;el&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4c3162e0f286b1ef5b797cd5da1319af941f9a53" translate="yes" xml:space="preserve">
          <source>Returns a &lt;em&gt;NodeList&lt;/em&gt; of all the descendant Elements with a given &lt;code&gt;localName&lt;/code&gt; and &lt;code&gt;namespaceURI&lt;/code&gt; in the order in which they are encountered in a preorder traversal of this Element tree</source>
          <target state="translated">指定された &lt;code&gt;localName&lt;/code&gt; と &lt;code&gt;namespaceURI&lt;/code&gt; を持つすべての子孫要素の&lt;em&gt;NodeList&lt;/em&gt;を、このElementツリーの先行順序走査で検出された順序で返します。</target>
        </trans-unit>
        <trans-unit id="f8a932e252fd4a1a850b0115ae826d6c001c1a85" translate="yes" xml:space="preserve">
          <source>Returns a DOMImplementation</source>
          <target state="translated">DOMImplementation を返します。</target>
        </trans-unit>
        <trans-unit id="d46521933e52611d0e858b527ac35169763ac109" translate="yes" xml:space="preserve">
          <source>Returns a JSON Representation of &lt;em&gt;node&lt;/em&gt;, with indentation and on multiple lines.</source>
          <target state="translated">インデント付きで複数行にある&lt;em&gt;nodeの&lt;/em&gt; JSON表現を返します。</target>
        </trans-unit>
        <trans-unit id="4ccdda87bca9ffe9dff01b6820d3f932d1cb5a78" translate="yes" xml:space="preserve">
          <source>Returns a NodeList of all the Elements with a given localName and namespaceURI in the order in which they are encountered in a preorder traversal of the Document tree.</source>
          <target state="translated">指定した localName と namespaceURI を持つすべての要素の NodeList を、Document ツリーの順序順に並べ替えて返します。</target>
        </trans-unit>
        <trans-unit id="8597d90ffc929922526f80787675bd1559ff0801" translate="yes" xml:space="preserve">
          <source>Returns a NodeList of all the Elements with a given tag name in the order in which they are encountered in a preorder traversal of the Document tree.</source>
          <target state="translated">指定したタグ名を持つすべての要素の NodeList を、Document ツリーのプレオーダー探索で遭遇した順に返します。</target>
        </trans-unit>
        <trans-unit id="af4ef06f70ba4289a8205cb198139a60ca84c58c" translate="yes" xml:space="preserve">
          <source>Returns a String with &lt;em&gt;n&lt;/em&gt; space characters. You can use this proc to left align strings. Example:</source>
          <target state="translated">&lt;em&gt;n個の&lt;/em&gt;スペース文字を含む文字列を返します。このプロシージャを使用して、文字列を左揃えにすることができます。例：</target>
        </trans-unit>
        <trans-unit id="bc0b3186ee1a878fabe64da9b65c64963c90f977" translate="yes" xml:space="preserve">
          <source>Returns a default configuration for embedded HTML generation.</source>
          <target state="translated">埋め込みHTML生成のデフォルト設定を返します。</target>
        </trans-unit>
        <trans-unit id="7396f8dbd9d1b9b1f444559a8e82eeb735eee681" translate="yes" xml:space="preserve">
          <source>Returns a duplicate of this node, if &lt;code&gt;deep&lt;/code&gt; is &lt;em&gt;true&lt;/em&gt;, Element node's children are copied</source>
          <target state="translated">このノードの複製を返します &lt;code&gt;deep&lt;/code&gt; が&lt;em&gt;trueの場合&lt;/em&gt;、Elementノードの子がコピーされます</target>
        </trans-unit>
        <trans-unit id="e4b0f8c69a4c10eda5ab67fcbf318c126e6e879d" translate="yes" xml:space="preserve">
          <source>Returns a future that will complete when all the string data from the specified future stream is retrieved.</source>
          <target state="translated">指定した未来ストリームの文字列データをすべて取得した時点で完了する未来を返します。</target>
        </trans-unit>
        <trans-unit id="a0cdb38da1af4ab6afd03acceb4110f5f6beea22" translate="yes" xml:space="preserve">
          <source>Returns a future that will complete when the &lt;code&gt;FutureStream&lt;/code&gt; has data placed into it. The future will be completed with the oldest value stored inside the stream. The return value will also determine whether data was retrieved, &lt;code&gt;false&lt;/code&gt; means that the future stream was completed and no data was retrieved.</source>
          <target state="translated">&lt;code&gt;FutureStream&lt;/code&gt; にデータが配置されたときに完了するフューチャを返します。ストリーム内に保存されている最も古い値で未来が完成します。戻り値は、データが取得されたかどうかも判別します &lt;code&gt;false&lt;/code&gt; は、将来のストリームが完了し、データが取得されなかったことを意味します。</target>
        </trans-unit>
        <trans-unit id="17f67688a98105a5c45fdf95c9b823343e237672" translate="yes" xml:space="preserve">
          <source>Returns a future which will complete once &lt;code&gt;fut&lt;/code&gt; completes or after &lt;code&gt;timeout&lt;/code&gt; milliseconds has elapsed.</source>
          <target state="translated">&lt;code&gt;fut&lt;/code&gt; が完了するか、 &lt;code&gt;timeout&lt;/code&gt; ミリ秒が経過した後に完了するfutureを返します。</target>
        </trans-unit>
        <trans-unit id="af4c30424f6182ef1ffa6042052d2d62fd1713ee" translate="yes" xml:space="preserve">
          <source>Returns a future which will complete once all futures in &lt;code&gt;futs&lt;/code&gt; complete. If the argument is empty, the returned future completes immediately.</source>
          <target state="translated">&lt;code&gt;futs&lt;/code&gt; すべての先物が完了すると完了するフューチャを返します。引数が空の場合、返されたフューチャーはすぐに完了します。</target>
        </trans-unit>
        <trans-unit id="87509fcccbc673ff7757dab67acd12813910ce57" translate="yes" xml:space="preserve">
          <source>Returns a future which will complete once both &lt;code&gt;fut1&lt;/code&gt; and &lt;code&gt;fut2&lt;/code&gt; complete.</source>
          <target state="translated">&lt;code&gt;fut1&lt;/code&gt; と &lt;code&gt;fut2&lt;/code&gt; の両方が完了すると完了するfutureを返します。</target>
        </trans-unit>
        <trans-unit id="dfe856eddf1daae7687fabc975783a3f6fb0d7d7" translate="yes" xml:space="preserve">
          <source>Returns a future which will complete once either &lt;code&gt;fut1&lt;/code&gt; or &lt;code&gt;fut2&lt;/code&gt; complete.</source>
          <target state="translated">&lt;code&gt;fut1&lt;/code&gt; または &lt;code&gt;fut2&lt;/code&gt; のいずれかが完了すると完了するフューチャを返します。</target>
        </trans-unit>
        <trans-unit id="cc7dd181fcfc9f4e7ccf6514ea197d24d3ddb73e" translate="yes" xml:space="preserve">
          <source>Returns a list of all the registered handlers.</source>
          <target state="translated">登録されているすべてのハンドラの一覧を返します。</target>
        </trans-unit>
        <trans-unit id="c7b83ebc97f050c17044a7445153d70272612a77" translate="yes" xml:space="preserve">
          <source>Returns a list of filenames in the given directory. If &lt;code&gt;dir&lt;/code&gt; is &quot;&quot;, the current directory is used. If &lt;code&gt;async&lt;/code&gt; is true, this function will return immediately and it will be your job to use asyncio's &lt;code&gt;poll&lt;/code&gt; to progress this operation.</source>
          <target state="translated">指定されたディレクトリ内のファイル名のリストを返します。場合 &lt;code&gt;dir&lt;/code&gt; は「」で、現在のディレクトリが使用されています。場合は &lt;code&gt;async&lt;/code&gt; trueの場合、この関数はすぐに戻りますと、asyncioの使用するためにあなたの仕事になります &lt;code&gt;poll&lt;/code&gt; この操作を進行します。</target>
        </trans-unit>
        <trans-unit id="105109764bdb3507e6a49222e3207a0f77b639ba" translate="yes" xml:space="preserve">
          <source>Returns a list of triggered events.</source>
          <target state="translated">トリガイベントのリストを返します。</target>
        </trans-unit>
        <trans-unit id="03b22ef5aa888694a87a3597c1d780b39d97041b" translate="yes" xml:space="preserve">
          <source>Returns a modified copy of &lt;code&gt;s&lt;/code&gt; with the substitutions in &lt;code&gt;subs&lt;/code&gt; applied in parallel.</source>
          <target state="translated">並行して適用された &lt;code&gt;subs&lt;/code&gt; 内の置換を含む &lt;code&gt;s&lt;/code&gt; の変更されたコピーを返します。</target>
        </trans-unit>
        <trans-unit id="7f4868f59d6694df3f6c5457e4655f3fa8479176" translate="yes" xml:space="preserve">
          <source>Returns a modified copy of &lt;code&gt;s&lt;/code&gt; with the substitutions in &lt;code&gt;subs&lt;/code&gt; applied in parallel. &lt;strong&gt;Deprecated since version 0.18.0&lt;/strong&gt;: Use &lt;code&gt;multiReplace&lt;/code&gt; instead.</source>
          <target state="translated">並行して適用された &lt;code&gt;subs&lt;/code&gt; 内の置換を含む &lt;code&gt;s&lt;/code&gt; の変更されたコピーを返します。&lt;strong&gt;バージョン0.18.0以降非推奨&lt;/strong&gt;：代わりに &lt;code&gt;multiReplace&lt;/code&gt; を使用してください。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3142b10d20ec06e5558b02c59f6248d554d6fdda" translate="yes" xml:space="preserve">
          <source>Returns a modified copy of &lt;em&gt;s&lt;/em&gt; with the substitutions in &lt;em&gt;subs&lt;/em&gt; applied in parallel.</source>
          <target state="translated">並行して適用された&lt;em&gt;subs&lt;/em&gt;内の置換を含む&lt;em&gt;sの&lt;/em&gt;変更されたコピーを返します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="53ae0a67b94291c3cc81406099c3cc74bd406dd5" translate="yes" xml:space="preserve">
          <source>Returns a mutable value stored in &lt;code&gt;future&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;future&lt;/code&gt; に格納されている変更可能な値を返します。</target>
        </trans-unit>
        <trans-unit id="7629b5e1e3c9a0e807c6d52359111e0cc0b17460" translate="yes" xml:space="preserve">
          <source>Returns a new sequence with a combination of the two input containers.</source>
          <target state="translated">2つの入力コンテナを組み合わせた新しいシーケンスを返します。</target>
        </trans-unit>
        <trans-unit id="b45de52b00b364a3a7528cb3b2501c62d283104e" translate="yes" xml:space="preserve">
          <source>Returns a new sequence with all the items that fulfilled the predicate.</source>
          <target state="translated">述語を満たすすべての項目を含む新しいシーケンスを返します。</target>
        </trans-unit>
        <trans-unit id="0aeeb61c9f4521d776691655703a71ddb7e73a11" translate="yes" xml:space="preserve">
          <source>Returns a new sequence with the item &lt;em&gt;x&lt;/em&gt; repeated &lt;em&gt;n&lt;/em&gt; times.</source>
          <target state="translated">項目&lt;em&gt;x&lt;/em&gt;が&lt;em&gt;n&lt;/em&gt;回繰り返された新しいシーケンスを返します。</target>
        </trans-unit>
        <trans-unit id="b49db4f7063639f973ccdea100c134d2ac66f7d4" translate="yes" xml:space="preserve">
          <source>Returns a new sequence with the items of the container &lt;em&gt;s&lt;/em&gt; repeated &lt;em&gt;n&lt;/em&gt; times.</source>
          <target state="translated">コンテナ&lt;em&gt;sの&lt;/em&gt;アイテムが&lt;em&gt;n&lt;/em&gt;回繰り返された新しいシーケンスを返します。</target>
        </trans-unit>
        <trans-unit id="f3ae344d6d7844ed25d2cd53f9ab3cab1412c997" translate="yes" xml:space="preserve">
          <source>Returns a new sequence with the results of &lt;em&gt;op&lt;/em&gt; applied to every item in the container &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">コンテナ&lt;em&gt;s&lt;/em&gt;内のすべてのアイテムに&lt;em&gt;op&lt;/em&gt;の結果が適用された新しいシーケンスを返します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7f653e6bcb9722e03527b27cdac64ce1ddc74cd2" translate="yes" xml:space="preserve">
          <source>Returns a new sequence without duplicates.</source>
          <target state="translated">重複のない新しいシーケンスを返します。</target>
        </trans-unit>
        <trans-unit id="91bcae9ed5957c0188e55f1c22827e4cb3420ba2" translate="yes" xml:space="preserve">
          <source>Returns a new set after applying &lt;em&gt;op&lt;/em&gt; on each of the elements of &lt;em&gt;data&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;dataの&lt;/em&gt;各要素に&lt;em&gt;op&lt;/em&gt;を適用した後、新しいセットを返します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="38d25807403b75563f0cf70385a1925abc93ad13" translate="yes" xml:space="preserve">
          <source>Returns a new string such that the cases of all unicode characters are swapped if possible</source>
          <target state="translated">可能であれば、すべての unicode キ ャ ラ ク タ の大文字小文字が入れ替わる よ う な新しい文字列を返します。</target>
        </trans-unit>
        <trans-unit id="46fc71040bd28d3aad09d4d99804df86881a6769" translate="yes" xml:space="preserve">
          <source>Returns a new string such that the first character in each word inside &lt;em&gt;s&lt;/em&gt; is capitalized</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt;内&lt;em&gt;の&lt;/em&gt;各単語の最初の文字が大文字になるような新しい文字列を返します</target>
        </trans-unit>
        <trans-unit id="90c1e528172ae28acfbb11957c3efd57b6949e4f" translate="yes" xml:space="preserve">
          <source>Returns a normalized path for the current OS. See &lt;a href=&quot;#normalizePath&quot;&gt;#normalizePath&lt;/a&gt;</source>
          <target state="translated">現在のOSの正規化されたパスを返します。&lt;a href=&quot;#normalizePath&quot;&gt;#normalizePathを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="089f66a2f54998147b7a8821a74f973e8de72d1b" translate="yes" xml:space="preserve">
          <source>Returns a position to the first element in the &lt;em&gt;a&lt;/em&gt; that is greater than &lt;em&gt;key&lt;/em&gt;, or last if no such element is found. In other words if you have a sorted sequence and you call insert(thing, elm, lowerBound(thing, elm)) the sequence will still be sorted.</source>
          <target state="translated">&lt;em&gt;key&lt;/em&gt;より大きい&lt;em&gt;aの&lt;/em&gt;最初の要素の位置を返します。そのような要素が見つからない場合は最後を返します。つまり、並べ替えられたシーケンスがあり、insert（thing、elm、lowerBound（thing、elm））を呼び出した場合でも、シーケンスは並べ替えられます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dcdc0a2c4ca881c97eb5de9f6acf424b68856876" translate="yes" xml:space="preserve">
          <source>Returns a position to the first element in the &lt;em&gt;a&lt;/em&gt; that is not less (i.e. greater or equal to) than &lt;em&gt;key&lt;/em&gt;, or last if no such element is found. In other words if you have a sorted sequence and you call insert(thing, elm, upperBound(thing, elm)) the sequence will still be sorted.</source>
          <target state="translated">最初の要素に戻る位置&lt;em&gt;A&lt;/em&gt;よりも（すなわち、大きいまたは等しい）以下でない&lt;em&gt;キー&lt;/em&gt;、または最後のこのような要素が見つからない場合。つまり、並べ替えられたシーケンスがあり、insert（thing、elm、upperBound（thing、elm））を呼び出した場合、シーケンスは引き続き並べ替えられます。</target>
        </trans-unit>
        <trans-unit id="a0068c3382b33425a095976f4593ded8ef900a93" translate="yes" xml:space="preserve">
          <source>Returns a random number in the range 0..&amp;lt;max. The sequence of random number is always the same, unless &lt;em&gt;randomize&lt;/em&gt; is called which initializes the random number generator with a &quot;random&quot; number, i.e. a tickcount. &lt;strong&gt;Deprecated since version 0.18.0&lt;/strong&gt;. Use &lt;code&gt;rand&lt;/code&gt; instead.</source>
          <target state="translated">0 .. &amp;lt;max。の範囲の乱数を返します。乱数のシーケンスは常に同じですが、&lt;em&gt;randomize&lt;/em&gt;が呼び出されて乱数発生器が「乱数」、つまりティックカウントで初期化される場合を除きます。&lt;strong&gt;バージョン0.18.0以降廃止されました&lt;/strong&gt;。代わりに &lt;code&gt;rand&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="1181f08ec4a272665c29f8cf44cb56a75215cf95" translate="yes" xml:space="preserve">
          <source>Returns a random number in the range 0..max-1. The sequence of random number is always the same, unless &lt;em&gt;randomize&lt;/em&gt; is called which initializes the random number generator with a &quot;random&quot; number, i.e. a tickcount. &lt;strong&gt;Deprecated since version 0.18.0&lt;/strong&gt;. Use &lt;code&gt;rand&lt;/code&gt; instead.</source>
          <target state="translated">0..max-1の範囲の乱数を返します。乱数のシーケンスは常に同じですが、&lt;em&gt;randomize&lt;/em&gt;が呼び出されて乱数発生器が「乱数」、つまりティックカウントで初期化される場合を除きます。&lt;strong&gt;バージョン0.18.0以降廃止されました&lt;/strong&gt;。代わりに &lt;code&gt;rand&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="f75dde8a047d74d4a105234e405aec653589372d" translate="yes" xml:space="preserve">
          <source>Returns a random number in the range 0..max. The sequence of random number is always the same, unless &lt;em&gt;randomize&lt;/em&gt; is called which initializes the random number generator with a &quot;random&quot; number, i.e. a tickcount.</source>
          <target state="translated">0..maxの範囲の乱数を返します。乱数のシーケンスは常に同じですが、&lt;em&gt;randomize&lt;/em&gt;が呼び出されて乱数発生器が「乱数」、つまりティックカウントで初期化される場合を除きます。</target>
        </trans-unit>
        <trans-unit id="9636f7f7ba07ddb23945ad7f7a48b85ea602c6a3" translate="yes" xml:space="preserve">
          <source>Returns a sequence of &lt;em&gt;num&lt;/em&gt; sequences. For some input values this is the inverse of the &lt;a href=&quot;#concat&quot;&gt;concat&lt;/a&gt; proc. The proc will assert in debug builds if &lt;em&gt;s&lt;/em&gt; is nil or &lt;em&gt;num&lt;/em&gt; is less than one, and will likely crash on release builds. The input sequence &lt;em&gt;s&lt;/em&gt; can be empty, which will produce &lt;em&gt;num&lt;/em&gt; empty sequences.</source>
          <target state="translated">&lt;em&gt;num&lt;/em&gt;シーケンスのシーケンスを返します。一部の入力値では、これは&lt;a href=&quot;#concat&quot;&gt;concat&lt;/a&gt; procの逆です。&lt;em&gt;s&lt;/em&gt;がnilまたは&lt;em&gt;num&lt;/em&gt;が1未満の場合、&lt;em&gt;プロシージャ&lt;/em&gt;はデバッグビルドでアサートし、リリースビルドでクラッシュする可能性があります。入力シーケンス&lt;em&gt;s&lt;/em&gt;は空にすることができ、空のシーケンスが&lt;em&gt;num&lt;/em&gt;個生成されます。</target>
        </trans-unit>
        <trans-unit id="add9a203f2079cc13e1ace73e487476172846d64" translate="yes" xml:space="preserve">
          <source>Returns a string of length &lt;em&gt;count&lt;/em&gt; consisting only of the character &lt;em&gt;c&lt;/em&gt;. You can use this proc to left align strings. Example:</source>
          <target state="translated">文字&lt;em&gt;c&lt;/em&gt;のみで構成される長さ&lt;em&gt;カウントの&lt;/em&gt;文字列を返します。このプロシージャを使用して、文字列を左揃えにすることができます。例：&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="729725bfb4a47dce6c82ccf2ab99fa662b4d8ece" translate="yes" xml:space="preserve">
          <source>Returns a string representing the path to which the symbolic link points.</source>
          <target state="translated">シンボリックリンクが指すパスを表す文字列を返します。</target>
        </trans-unit>
        <trans-unit id="84cd1e30df0708afd420eb5009581093d4f4d274" translate="yes" xml:space="preserve">
          <source>Returns a tuple containing intpart and floatpart representing the integer part and the fractional part respectively.</source>
          <target state="translated">intpartとfloatpartを含むタプルを返します。</target>
        </trans-unit>
        <trans-unit id="d09e139464614935076ecb5fc050699b848cfe3d" translate="yes" xml:space="preserve">
          <source>Returns a tuple with the the byte offset of the unicode character at position &lt;code&gt;rev&lt;/code&gt; in s counting from the end (starting with 1) and the total number of runes in the string. Returns a negative value for offset if there are to few runes in the string to satisfy the request.</source>
          <target state="translated">末尾から数えてsの位置 &lt;code&gt;rev&lt;/code&gt; のユニコード文字のバイトオフセット（1から始まる）と、文字列内のルーン文字の総数を含むタプルを返します。文字列にリクエストを満たすルーンが少ない場合は、オフセットに負の値を返します。</target>
        </trans-unit>
        <trans-unit id="1b5be8d333e1abc777e094dd1044a10d487a6ae4" translate="yes" xml:space="preserve">
          <source>Returns an &lt;code&gt;Option&lt;/code&gt; for this type that has no value.</source>
          <target state="translated">値のないこのタイプの &lt;code&gt;Option&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="df3df41de1b4c50e97ca2936dd535a774d4e50de" translate="yes" xml:space="preserve">
          <source>Returns an empty hash set you can assign directly in &lt;code&gt;var&lt;/code&gt; blocks in a single line. Example:</source>
          <target state="translated">1行の &lt;code&gt;var&lt;/code&gt; ブロックに直接割り当てることができる空のハッシュセットを返します。例：</target>
        </trans-unit>
        <trans-unit id="9a7ed7f7fe14c1f7ef4472a98ce7f354a4a13943" translate="yes" xml:space="preserve">
          <source>Returns an empty ordered hash set you can assign directly in &lt;code&gt;var&lt;/code&gt; blocks in a single line. Example:</source>
          <target state="translated">1行の &lt;code&gt;var&lt;/code&gt; ブロックに直接割り当てることができる、空の順序付きハッシュセットを返します。例：</target>
        </trans-unit>
        <trans-unit id="7a6ec976df2b967286d40c7cce2d0572e152304f" translate="yes" xml:space="preserve">
          <source>Returns contents of the Option. If it is none, then an exception is thrown.</source>
          <target state="translated">Option の内容を返します。何もない場合は例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="beffe0dcb6ea1b18cf214054c9ac51442d535c3d" translate="yes" xml:space="preserve">
          <source>Returns index of the '.' char in &lt;em&gt;path&lt;/em&gt; if it signifies the beginning of extension. Returns -1 otherwise.</source>
          <target state="translated">「。」のインデックスを返します 拡張の始まりを示す場合は、&lt;em&gt;パス&lt;/em&gt;内のchar 。それ以外の場合は-1を返します。</target>
        </trans-unit>
        <trans-unit id="90649b5ee35112c84ac4f019ec2bca72a730a877" translate="yes" xml:space="preserve">
          <source>Returns number of columns in the row</source>
          <target state="translated">行内の列数を返します。</target>
        </trans-unit>
        <trans-unit id="a56c3d1353aa8876a78c07a4f1281cebd356cda4" translate="yes" xml:space="preserve">
          <source>Returns number of columns in the row.</source>
          <target state="translated">行内の列数を返します。</target>
        </trans-unit>
        <trans-unit id="745a5ee1bffc8ff6dee6cbfb12dd9c0b58f36f5f" translate="yes" xml:space="preserve">
          <source>Returns number of triggered events.</source>
          <target state="translated">トリガーされたイベントの数を返します。</target>
        </trans-unit>
        <trans-unit id="e7e9384227e7f76e2195180d2f189910e5f68927" translate="yes" xml:space="preserve">
          <source>Returns only after coroutine &lt;code&gt;c&lt;/code&gt; has returned. &lt;code&gt;interval&lt;/code&gt; is time in seconds how often.</source>
          <target state="translated">コルーチン &lt;code&gt;c&lt;/code&gt; が戻った後にのみ戻ります。 &lt;code&gt;interval&lt;/code&gt; は、秒単位の時間と頻度です。</target>
        </trans-unit>
        <trans-unit id="c9e14b65cad4b3c339c1aec06e2bb80bf8c6e8b7" translate="yes" xml:space="preserve">
          <source>Returns text for given column of the row</source>
          <target state="translated">指定された行の指定された列のテキストを返します。</target>
        </trans-unit>
        <trans-unit id="b6255c7bcaefa03e52b2f865c36487063d9547a3" translate="yes" xml:space="preserve">
          <source>Returns text for given column of the row.</source>
          <target state="translated">指定した行の指定した列のテキストを返します。</target>
        </trans-unit>
        <trans-unit id="f7a0496a26992e3c3478b5259b27e385a19a5a37" translate="yes" xml:space="preserve">
          <source>Returns the 1-based index of the least significant set bit of x. If &lt;em&gt;x&lt;/em&gt; is zero, when &lt;code&gt;noUndefinedBitOpts&lt;/code&gt; is set, result is 0, otherwise result is undefined.</source>
          <target state="translated">xの最下位セットビットの1から始まるインデックスを返します。場合&lt;em&gt;、xが&lt;/em&gt;ゼロである場合、 &lt;code&gt;noUndefinedBitOpts&lt;/code&gt; が設定され、その結果は、そうでなければ結果は未定義である、0です。</target>
        </trans-unit>
        <trans-unit id="4fd7d846dc9addc90bbae0234b2170f049826f61" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;ZonedTime&lt;/code&gt; for some local time.</source>
          <target state="translated">現地時間の &lt;code&gt;ZonedTime&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0a6db4d2c33567d91e94119171ef6a0238c4be40" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;ZonedTime&lt;/code&gt; for some point in time.</source>
          <target state="translated">ある時点の &lt;code&gt;ZonedTime&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9984435573ae5ce64486dfeb8d7406a4fbe0183d" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;i&lt;/code&gt;'th value associated with the given key. If there are no values associated with the key or the &lt;code&gt;i&lt;/code&gt;'th value doesn't exist, an exception is raised.</source>
          <target state="translated">指定されたキーに関連付けられている &lt;code&gt;i&lt;/code&gt; 番目の値を返します。キーに関連付けられた値がない場合、または &lt;code&gt;i&lt;/code&gt; 番目の値が存在しない場合は、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="e845f6e6fd5c9db40839662ad45e1694dbb3a2fb" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;index&lt;/code&gt; th item in the map. If &lt;code&gt;index&lt;/code&gt; is greater than or equal to the number of nodes in this map, this returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">マップの &lt;code&gt;index&lt;/code&gt; 番目のアイテムを返します。 &lt;code&gt;index&lt;/code&gt; がこのマップのノード数以上の場合、 &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0c412f8c43994f877bfb8607971a925eaae97e2c" translate="yes" xml:space="preserve">
          <source>Returns the &lt;em&gt;NonTerminal&lt;/em&gt; object of a given &lt;em&gt;Peg&lt;/em&gt; variant object where present.</source>
          <target state="translated">&lt;em&gt;存在する&lt;/em&gt;場合、指定された&lt;em&gt;Peg&lt;/em&gt;バリアントオブジェクトの&lt;em&gt;NonTerminal&lt;/em&gt;オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="04c14dafe1a3fc460e6dc43c12460374417d29df" translate="yes" xml:space="preserve">
          <source>Returns the &lt;em&gt;PegKind&lt;/em&gt; of a given &lt;em&gt;Peg&lt;/em&gt; object.</source>
          <target state="translated">指定された&lt;em&gt;Peg&lt;/em&gt;オブジェクトの&lt;em&gt;PegKind&lt;/em&gt;を返します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="03f56dea0a275e9777e238ac6dca1e8531710163" translate="yes" xml:space="preserve">
          <source>Returns the &lt;em&gt;char&lt;/em&gt; representation of a given &lt;em&gt;Peg&lt;/em&gt; variant object where present.</source>
          <target state="translated">存在する場合、指定された&lt;em&gt;Peg&lt;/em&gt;バリアントオブジェクトの&lt;em&gt;文字&lt;/em&gt;表現を返します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dd15366b23d1b4b0f490725bd38f5e37ade16edf" translate="yes" xml:space="preserve">
          <source>Returns the &lt;em&gt;charChoice&lt;/em&gt; field of a given &lt;em&gt;Peg&lt;/em&gt; variant object where present.</source>
          <target state="translated">存在する場合、指定された&lt;em&gt;Peg&lt;/em&gt;バリアントオブジェクトの&lt;em&gt;charChoice&lt;/em&gt;フィールドを返します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f250f789738838738632f20b2bc37e7ed7425a45" translate="yes" xml:space="preserve">
          <source>Returns the &lt;em&gt;file&lt;/em&gt;'s creation time.</source>
          <target state="translated">&lt;em&gt;ファイル&lt;/em&gt;の作成時刻を返します。</target>
        </trans-unit>
        <trans-unit id="ac946990955d93ce95d42bf02bdd942c43e2203e" translate="yes" xml:space="preserve">
          <source>Returns the &lt;em&gt;file&lt;/em&gt;'s last modification time.</source>
          <target state="translated">&lt;em&gt;ファイル&lt;/em&gt;の最終変更時刻を返します。</target>
        </trans-unit>
        <trans-unit id="24e4933c2e27f568e7e56b2a6a4951cf8501c70a" translate="yes" xml:space="preserve">
          <source>Returns the &lt;em&gt;file&lt;/em&gt;'s last read or write access time.</source>
          <target state="translated">&lt;em&gt;ファイル&lt;/em&gt;の最後の読み取りまたは書き込みアクセス時間を返します。</target>
        </trans-unit>
        <trans-unit id="e6a52d8441a79607d1079404d2ace05fbb990222" translate="yes" xml:space="preserve">
          <source>Returns the &lt;em&gt;i&lt;/em&gt;-th &lt;span id=&quot;command-line-argument_1&quot;&gt;command line argument&lt;/span&gt; given to the application.</source>
          <target state="translated">アプリケーションに指定された&lt;em&gt;i&lt;/em&gt;番目の&lt;span id=&quot;command-line-argument_1&quot;&gt;コマンドライン引数を&lt;/span&gt;返します。</target>
        </trans-unit>
        <trans-unit id="41ea345d831e1e15dc72765d01e8c2e488abff1c" translate="yes" xml:space="preserve">
          <source>Returns the &lt;em&gt;string&lt;/em&gt; representation of a given &lt;em&gt;Peg&lt;/em&gt; variant object where present.</source>
          <target state="translated">存在する場合、指定された&lt;em&gt;Peg&lt;/em&gt;バリアントオブジェクトの&lt;em&gt;文字列&lt;/em&gt;表現を返します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="71b794d7a2ed4c93f9d0eb5bac1e18ab882b0d4a" translate="yes" xml:space="preserve">
          <source>Returns the &lt;span id=&quot;current-working-directory_1&quot;&gt;current working directory&lt;/span&gt;.</source>
          <target state="translated">&lt;span id=&quot;current-working-directory_1&quot;&gt;現在の作業ディレクトリを&lt;/span&gt;返します。</target>
        </trans-unit>
        <trans-unit id="c9ed26717dcf5985d2a006d7aa71ce1194ded9fb" translate="yes" xml:space="preserve">
          <source>Returns the &lt;span id=&quot;type_2&quot;&gt;type&lt;/span&gt; of a node in a form matching the way the type instance was declared in the code.</source>
          <target state="translated">コードで型インスタンスが宣言された方法と一致する形式でノードの&lt;span id=&quot;type_2&quot;&gt;型&lt;/span&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="3cda697cb36f49d6d270ab65a128bd21ed3883d5" translate="yes" xml:space="preserve">
          <source>Returns the &lt;span id=&quot;type_3&quot;&gt;type&lt;/span&gt; of a node in a form matching the implementation of the type. Any intermediate aliases are expanded to arrive at the final type implementation. You can instead use &lt;code&gt;getImpl&lt;/code&gt; on a symbol if you want to find the intermediate aliases.</source>
          <target state="translated">&lt;span id=&quot;type_3&quot;&gt;タイプ&lt;/span&gt;の実装に一致するフォームでノードの&lt;span id=&quot;type_3&quot;&gt;タイプ&lt;/span&gt;を返します。中間エイリアスはすべて展開され、最終的な型の実装に到達します。中間エイリアスを検索する場合は、代わりにシンボルで &lt;code&gt;getImpl&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="15c9b199982ddb1300ebf75272e2ba25f689e774" translate="yes" xml:space="preserve">
          <source>Returns the Element Tag Name</source>
          <target state="translated">要素タグ名を返します。</target>
        </trans-unit>
        <trans-unit id="e3ea48d569b36f236e3612895a7c823acc97ed77" translate="yes" xml:space="preserve">
          <source>Returns the IPv4 any address, which can be used to listen on all available network adapters</source>
          <target state="translated">利用可能なすべてのネットワークアダプタをリッスンするために使用できる IPv4 任意のアドレスを返します。</target>
        </trans-unit>
        <trans-unit id="6adce3178b8c3b20426c3e4a10c83d1fb7df36fb" translate="yes" xml:space="preserve">
          <source>Returns the IPv4 broadcast address (255.255.255.255)</source>
          <target state="translated">IPv4ブロードキャストアドレス(255.255.255.255.255)を返します。</target>
        </trans-unit>
        <trans-unit id="2349504ebad9a6536c26520001e11ccad1529acd" translate="yes" xml:space="preserve">
          <source>Returns the IPv4 loopback address (127.0.0.1)</source>
          <target state="translated">IPv4ループバックアドレス (127.0.0.0.1)を返します。</target>
        </trans-unit>
        <trans-unit id="7b6ef67ab44754b35712729ed50dc82d5ddee5cd" translate="yes" xml:space="preserve">
          <source>Returns the IPv6 any address (::0), which can be used to listen on all available network adapters</source>
          <target state="translated">IPv6 の任意のアドレス (::0)を返します。これは、利用可能なすべてのネットワークアダプタをリッスンするために使用できます。</target>
        </trans-unit>
        <trans-unit id="ed51704630af368fd067e423ea2d6b4d9b780ec3" translate="yes" xml:space="preserve">
          <source>Returns the IPv6 loopback address (::1)</source>
          <target state="translated">IPv6ループバックアドレス(::1)を返します。</target>
        </trans-unit>
        <trans-unit id="a043d26c4f552fd8d24f32736730f7c637cb7f97" translate="yes" xml:space="preserve">
          <source>Returns the Nim type node for given type. This can be used to turn macro typedesc parameter into proper NimNode representing type, since typedesc are an exception in macro calls - they are not mapped implicitly to NimNode like any other arguments.</source>
          <target state="translated">指定された型の Nim 型ノードを返します。マクロの typedesc パラメータを型を表す適切な NimNode に変換するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="7433819d56d01691e2ccf657dcec2df2e8f31b5d" translate="yes" xml:space="preserve">
          <source>Returns the Processing Instructions target</source>
          <target state="translated">処理命令の対象を返します。</target>
        </trans-unit>
        <trans-unit id="5653f59b7b80c05fc62c78ffa7eb6b2873729868" translate="yes" xml:space="preserve">
          <source>Returns the UTF-8 substring starting at codepoint pos with len codepoints. If pos or len is negative they count from the end of the string. If len is not given it means the longest possible string.</source>
          <target state="translated">コードポイント pos から始まる UTF-8 部分文字列を、コードポイント len で返します。posまたはlenが負の値の場合は、文字列の末尾から数えます。lenが与えられていない場合は、可能な限り長い文字列を意味します。</target>
        </trans-unit>
        <trans-unit id="823a5548b20b132657e68bae1622e4e4132f8775" translate="yes" xml:space="preserve">
          <source>Returns the Unicode character &lt;code&gt;s[i]&lt;/code&gt; in &lt;code&gt;result&lt;/code&gt;. If &lt;code&gt;doInc == true&lt;/code&gt;&lt;code&gt;i&lt;/code&gt; is incremented by the number of bytes that have been processed.</source>
          <target state="translated">Unicode文字 &lt;code&gt;s[i]&lt;/code&gt; を &lt;code&gt;result&lt;/code&gt; に返します。場合 &lt;code&gt;doInc == true&lt;/code&gt; &lt;code&gt;i&lt;/code&gt; 処理されたバイト数だけインクリメントされます。</target>
        </trans-unit>
        <trans-unit id="39287f476e3bfbbbd1b3cc2c693dcdeef60f15e2" translate="yes" xml:space="preserve">
          <source>Returns the absolute path of &lt;em&gt;path&lt;/em&gt;, rooted at &lt;em&gt;root&lt;/em&gt; (which must be absolute) if &lt;em&gt;path&lt;/em&gt; is absolute, return it, ignoring &lt;em&gt;root&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;パス&lt;/em&gt;が絶対&lt;em&gt;パスの&lt;/em&gt;場合、&lt;em&gt;ルート&lt;/em&gt;（絶対パスでなければなりません）を&lt;em&gt;ルート&lt;/em&gt;とする&lt;em&gt;path&lt;/em&gt;の絶対パスを返します。&lt;em&gt;ルートを&lt;/em&gt;無視してそれを返します。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6ea5f6bd3f9ea7654f4dfb8f3de71e1a0ce4b532" translate="yes" xml:space="preserve">
          <source>Returns the amount of data pieces inside the stream.</source>
          <target state="translated">ストリーム内のデータピースの量を返します。</target>
        </trans-unit>
        <trans-unit id="1219754fd56425ae43ed093ca4c19533433f0a7b" translate="yes" xml:space="preserve">
          <source>Returns the arity of the given type. This is the number of &quot;type&quot; components or the number of generic parameters a given type &lt;code&gt;t&lt;/code&gt; has.</source>
          <target state="translated">指定されたタイプのアリティを返します。これは、「タイプ」コンポーネントの数、または特定のタイプ &lt;code&gt;t&lt;/code&gt; が持つジェネリックパラメータの数です。</target>
        </trans-unit>
        <trans-unit id="2059f108411ea7f5060cac7d3878c64da9452b85" translate="yes" xml:space="preserve">
          <source>Returns the back-reference index of a captured sub-pattern in the &lt;em&gt;Captures&lt;/em&gt; object for a given &lt;em&gt;Peg&lt;/em&gt; variant object where present.</source>
          <target state="translated">指定された&lt;em&gt;Peg&lt;/em&gt;バリアントオブジェクトが存在する場合、&lt;em&gt;Captures&lt;/em&gt;オブジェクト内のキャプチャされたサブパターンの後方参照インデックスを返します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ca6b794572a1b7b105f3786e1abc623a7e896705" translate="yes" xml:space="preserve">
          <source>Returns the byte position of unicode character at position pos in s with an optional start byte position. returns the special value -1 if it runs out of the string</source>
          <target state="translated">s の位置 pos にある unicode 文字のバイト位置を、オプションで開始バイト位置を指定して返します。</target>
        </trans-unit>
        <trans-unit id="d43abdcc32243118359e534675605f18d35d812a" translate="yes" xml:space="preserve">
          <source>Returns the complex number with polar coordinates &lt;em&gt;r&lt;/em&gt; and &lt;em&gt;phi&lt;/em&gt;.</source>
          <target state="translated">極座標&lt;em&gt;r&lt;/em&gt;および&lt;em&gt;phi&lt;/em&gt;の複素数を返します。</target>
        </trans-unit>
        <trans-unit id="358ef03ef3c60bbd3ce5d975aa6fd219e1d9b74d" translate="yes" xml:space="preserve">
          <source>Returns the config directory of the current user for applications.</source>
          <target state="translated">現在のユーザのアプリケーションの設定ディレクトリを返します。</target>
        </trans-unit>
        <trans-unit id="95f6f709748d8136b6ddc3e522b728ef71103dff" translate="yes" xml:space="preserve">
          <source>Returns the contents of this option or &lt;em&gt;otherwise&lt;/em&gt; if the option is none.</source>
          <target state="translated">このオプションのコンテンツを返します。オプションがnoneの場合は&lt;em&gt;それ以外&lt;/em&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="20851868b7760a2d968df9e69541fc1e01654770" translate="yes" xml:space="preserve">
          <source>Returns the cosecant of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt;の余割を返します。</target>
        </trans-unit>
        <trans-unit id="a69e3d606de0d95df07623f7d2795ededaf14241" translate="yes" xml:space="preserve">
          <source>Returns the cosine of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt;の余弦を返します。</target>
        </trans-unit>
        <trans-unit id="512bec76bbfbda171b3dc22f92d2d7c76c5f21b1" translate="yes" xml:space="preserve">
          <source>Returns the cotangent of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt;のコタンジェントを返します。</target>
        </trans-unit>
        <trans-unit id="7c44a2f225c0656c4984e0204b4d9b37b2725674" translate="yes" xml:space="preserve">
          <source>Returns the current working directory.</source>
          <target state="translated">カレントの作業ディレクトリを返します。</target>
        </trans-unit>
        <trans-unit id="ef0675a729cb81d96787bfcb8ceae90163a7c73c" translate="yes" xml:space="preserve">
          <source>Returns the day of the week enum from day, month and year, according to the Julian calendar. &lt;strong&gt;Deprecated since v0.18.0&lt;/strong&gt;</source>
          <target state="translated">ユリウス暦に従って、日、月、年から曜日の列挙を返します。&lt;strong&gt;v0.18.0以降非推奨&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b8e59982ec0b8066eb026a2ed720c38b5f9f9a46" translate="yes" xml:space="preserve">
          <source>Returns the day of the week enum from day, month and year. Equivalent with &lt;code&gt;initDateTime(monthday, month, year, 0, 0, 0).weekday&lt;/code&gt;.</source>
          <target state="translated">日、月、年から曜日列挙型を返します。等価 &lt;code&gt;initDateTime(monthday, month, year, 0, 0, 0).weekday&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4fa70cf2a79fdcabda28d7c41b04b923d256481a" translate="yes" xml:space="preserve">
          <source>Returns the day of the year. Equivalent with &lt;code&gt;initDateTime(monthday, month, year, 0, 0, 0).yearday&lt;/code&gt;.</source>
          <target state="translated">年間通算日を返します。等価 &lt;code&gt;initDateTime(monthday, month, year, 0, 0, 0).yearday&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2d972459838c903303770f7bf06e90a0ed84df8a" translate="yes" xml:space="preserve">
          <source>Returns the default filename for a logger.</source>
          <target state="translated">ロガーのデフォルトのファイル名を返します。</target>
        </trans-unit>
        <trans-unit id="e962d9ac2f76673ff17f9107d37cdd7c91870947" translate="yes" xml:space="preserve">
          <source>Returns the difference of the sets &lt;em&gt;s1&lt;/em&gt; and &lt;em&gt;s2&lt;/em&gt;.</source>
          <target state="translated">セット&lt;em&gt;s1&lt;/em&gt;と&lt;em&gt;s2&lt;/em&gt;の差を返します。</target>
        </trans-unit>
        <trans-unit id="cde5eac100ae5b614459cf59e78de95c2de517c4" translate="yes" xml:space="preserve">
          <source>Returns the directory of the application's executable.</source>
          <target state="translated">アプリケーションの実行可能なディレクトリを返します。</target>
        </trans-unit>
        <trans-unit id="0e6370c3941b4dba713b459ae89fd981d4bedcb4" translate="yes" xml:space="preserve">
          <source>Returns the distro's native command line to install 'foreignPackageName' and whether it requires root/admin rights.</source>
          <target state="translated">foreignPackageName' をインストールするための distro のネイティブコマンドラインと、それが root/admin 権限を必要とするかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="a2188ec7d8b2a26e1588447e2107061e12a0e5fc" translate="yes" xml:space="preserve">
          <source>Returns the edit distance between &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;a&lt;/em&gt;と&lt;em&gt;bの&lt;/em&gt;間の編集距離を返します。</target>
        </trans-unit>
        <trans-unit id="6e7af8cb6f899c592d00cd50a6013888d315f923" translate="yes" xml:space="preserve">
          <source>Returns the file descriptor for the registered signal.</source>
          <target state="translated">登録されている信号のファイルディスクリプタを返します。</target>
        </trans-unit>
        <trans-unit id="bc63e72775b038c01ababa66995a57eceff5b40b" translate="yes" xml:space="preserve">
          <source>Returns the file descriptor for the registered timer.</source>
          <target state="translated">登録されているタイマーのファイルディスクリプタを返します。</target>
        </trans-unit>
        <trans-unit id="b126f9553d4c9ba1bfd9f8e0a91f5ab64ab9b148" translate="yes" xml:space="preserve">
          <source>Returns the filename of the application's executable.</source>
          <target state="translated">アプリケーションの実行ファイルのファイル名を返します。</target>
        </trans-unit>
        <trans-unit id="adf375ae1da98ac46dc18c55e71d641eb10b309a" translate="yes" xml:space="preserve">
          <source>Returns the first element of &lt;em&gt;deq&lt;/em&gt;, but does not remove it from the deque.</source>
          <target state="translated">&lt;em&gt;deq&lt;/em&gt;の最初の要素を返しますが、それをdequeから削除しません。</target>
        </trans-unit>
        <trans-unit id="dbb577ef88265f28a26bcb01520bd1c1d8ad8217" translate="yes" xml:space="preserve">
          <source>Returns the first index of &lt;em&gt;item&lt;/em&gt; in &lt;em&gt;a&lt;/em&gt; or -1 if not found. This requires appropriate &lt;em&gt;items&lt;/em&gt; and &lt;em&gt;==&lt;/em&gt; operations to work.</source>
          <target state="translated">最初のインデックスを返します&lt;em&gt;項目&lt;/em&gt;で見つからない場合は-1を。これには、適切な&lt;em&gt;アイテム&lt;/em&gt;と&lt;em&gt;==&lt;/em&gt;操作が必要です。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0c0507d1d2a44cbb9d1d78ab2a36f85e8e167881" translate="yes" xml:space="preserve">
          <source>Returns the format string that was used to construct &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; の構築に使用されたフォーマット文字列を返します。</target>
        </trans-unit>
        <trans-unit id="ae97b02f4656b13efaf66409cc376f53702e5c50" translate="yes" xml:space="preserve">
          <source>Returns the full (&lt;span id=&quot;absolute_1&quot;&gt;absolute&lt;/span&gt;) path of an existing file &lt;em&gt;filename&lt;/em&gt;, raises OSError in case of an error. Follows symlinks.</source>
          <target state="translated">既存のファイル&lt;em&gt;filename&lt;/em&gt;の完全な（&lt;span id=&quot;absolute_1&quot;&gt;絶対&lt;/span&gt;）パスを返し、エラーが発生した場合はOSErrorを送出します。シンボリックリンクをたどります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d49781281b1143a4b4bdc8add328f40c359c2806" translate="yes" xml:space="preserve">
          <source>Returns the home directory of the current user.</source>
          <target state="translated">現在のユーザのホームディレクトリを返します。</target>
        </trans-unit>
        <trans-unit id="7c82e4545d98e84c1c322c09f4faecd80039521d" translate="yes" xml:space="preserve">
          <source>Returns the hyperbolic cosecant of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt;の双曲線余割を返します。</target>
        </trans-unit>
        <trans-unit id="e785a9a98849a574d2b5ef31ce4f6c4411049fc8" translate="yes" xml:space="preserve">
          <source>Returns the hyperbolic cosine of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt;の双曲線余弦を返します。</target>
        </trans-unit>
        <trans-unit id="867ddae35dbed6f127c59de11de752b01a23aa38" translate="yes" xml:space="preserve">
          <source>Returns the hyperbolic cotangent of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt;の双曲線余接を返します。</target>
        </trans-unit>
        <trans-unit id="a94942bb6b75b6797eabf43e10308bd4c88b31bd" translate="yes" xml:space="preserve">
          <source>Returns the hyperbolic secant of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt;の双曲線正割を返します。</target>
        </trans-unit>
        <trans-unit id="012add359acea4853b5e3238eae2580d3054529d" translate="yes" xml:space="preserve">
          <source>Returns the hyperbolic sine of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt;の双曲線正弦を返します。</target>
        </trans-unit>
        <trans-unit id="5eaef9c432e7d46458a2b5cc51e7f8014f05434c" translate="yes" xml:space="preserve">
          <source>Returns the hyperbolic tangent of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt;の双曲線正接を返します。</target>
        </trans-unit>
        <trans-unit id="1dce11bbab06f8ffead798ec7486fedd346c105b" translate="yes" xml:space="preserve">
          <source>Returns the index of the first item in &lt;em&gt;possibilities&lt;/em&gt; if not ambiguous.</source>
          <target state="translated">あいまいでない場合、&lt;em&gt;可能性の&lt;/em&gt;ある最初の項目のインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="f05f9acaf107aa3190a4bc7df5f213e423e2e888" translate="yes" xml:space="preserve">
          <source>Returns the intersection of the sets &lt;em&gt;s1&lt;/em&gt; and &lt;em&gt;s2&lt;/em&gt;.</source>
          <target state="translated">セット&lt;em&gt;s1&lt;/em&gt;と&lt;em&gt;s2&lt;/em&gt;の共通部分を返します。</target>
        </trans-unit>
        <trans-unit id="f935f229b0bfb085d8c1d575a5aa200df2ef7b88" translate="yes" xml:space="preserve">
          <source>Returns the inverse cosecant of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt;の逆余割を返します。</target>
        </trans-unit>
        <trans-unit id="20751c2ed8fa6863ff5dece55a7e389fb427e1ad" translate="yes" xml:space="preserve">
          <source>Returns the inverse cosine of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt;の逆余弦を返します。</target>
        </trans-unit>
        <trans-unit id="d17c0d9927485c09b41254f0d91f5bc173767638" translate="yes" xml:space="preserve">
          <source>Returns the inverse cotangent of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt;の逆余接を返します。</target>
        </trans-unit>
        <trans-unit id="cc3717f106a5003f52f78d884432e5865dbca12a" translate="yes" xml:space="preserve">
          <source>Returns the inverse hyperbolic cosecant of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;zの&lt;/em&gt;逆双曲線余割を返します。</target>
        </trans-unit>
        <trans-unit id="df5064f4d7ad9bb96d44a0634a89ebaf9c38e3c5" translate="yes" xml:space="preserve">
          <source>Returns the inverse hyperbolic cosine of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;zの&lt;/em&gt;逆双曲線余弦を返します。</target>
        </trans-unit>
        <trans-unit id="c92fa0cbea631550312413b45214232865b24691" translate="yes" xml:space="preserve">
          <source>Returns the inverse hyperbolic cotangent of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;zの&lt;/em&gt;逆双曲線余接を返します。</target>
        </trans-unit>
        <trans-unit id="16101e5040db0d5cdc27ac8767562ddaf9df3c67" translate="yes" xml:space="preserve">
          <source>Returns the inverse hyperbolic secant of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;zの&lt;/em&gt;逆双曲線正割を返します。</target>
        </trans-unit>
        <trans-unit id="68e35bfedfe2bfc68c79ec70076f047edacaf910" translate="yes" xml:space="preserve">
          <source>Returns the inverse hyperbolic sine of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;zの&lt;/em&gt;逆双曲線正弦を返します。</target>
        </trans-unit>
        <trans-unit id="0cfa561a9b2dd1b1753328afeba4603410ef5c08" translate="yes" xml:space="preserve">
          <source>Returns the inverse hyperbolic tangent of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;zの&lt;/em&gt;逆双曲線正接を返します。</target>
        </trans-unit>
        <trans-unit id="ba022740663f94c827a5e35661ae5a73236aa9fa" translate="yes" xml:space="preserve">
          <source>Returns the inverse secant of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt;の逆正割を返します。</target>
        </trans-unit>
        <trans-unit id="3c908fba863b6f2ed1ca1be3d23be24fe5c3727a" translate="yes" xml:space="preserve">
          <source>Returns the inverse sine of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt;の逆正弦を返します。</target>
        </trans-unit>
        <trans-unit id="db980b4934b225a980d12dd26f945fb3bbad0199" translate="yes" xml:space="preserve">
          <source>Returns the inverse tangent of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt;の逆正接を返します。</target>
        </trans-unit>
        <trans-unit id="1bdfb318daa81f8388873dc49cac501df0ee04da" translate="yes" xml:space="preserve">
          <source>Returns the last element of &lt;em&gt;deq&lt;/em&gt;, but does not remove it from the deque.</source>
          <target state="translated">&lt;em&gt;deq&lt;/em&gt;の最後の要素を返しますが、それをdequeから削除しません。</target>
        </trans-unit>
        <trans-unit id="3c3568a8a59a23bd3c47abc38d639e8234f727e0" translate="yes" xml:space="preserve">
          <source>Returns the local hostname (not the FQDN)</source>
          <target state="translated">ローカルのホスト名を返します(FQDNではありません)。</target>
        </trans-unit>
        <trans-unit id="21f1eaae83d3abe304f9e1afa86c216faef79e1b" translate="yes" xml:space="preserve">
          <source>Returns the log base 10 of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;zの&lt;/em&gt; 10を底とする対数を返します。</target>
        </trans-unit>
        <trans-unit id="32d434abd5082f55f8ad5af6623032d1d30788a7" translate="yes" xml:space="preserve">
          <source>Returns the log base 2 of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;zの&lt;/em&gt;対数2を返します。</target>
        </trans-unit>
        <trans-unit id="30fefcee5b9c1400d6f8a7e087dccd826153b24e" translate="yes" xml:space="preserve">
          <source>Returns the merged and sorted indices into a single HTML block which can be further embedded into nimdoc templates.</source>
          <target state="translated">マージされたインデックスとソートされたインデックスを、nimdocテンプレートに埋め込むことができる単一のHTMLブロックに返します。</target>
        </trans-unit>
        <trans-unit id="3f8dc736257a7fb16276e1007f7a3cc6203dc2b4" translate="yes" xml:space="preserve">
          <source>Returns the name of the Attribute</source>
          <target state="translated">属性の名前を返します。</target>
        </trans-unit>
        <trans-unit id="59aa8c03ea22c046f6e91773826223012b99a16f" translate="yes" xml:space="preserve">
          <source>Returns the name of the JsObject's JavaScript type as a cstring.</source>
          <target state="translated">JsObjectのJavaScriptの型名をcstringで返します。</target>
        </trans-unit>
        <trans-unit id="5e71c5b59da08e8b0ff9d2557c61076c1d833e47" translate="yes" xml:space="preserve">
          <source>Returns the name of the given type.</source>
          <target state="translated">指定した型の名前を返します。</target>
        </trans-unit>
        <trans-unit id="9906a5fa9ce20f5e5185caf2720c0e6ef096cf53" translate="yes" xml:space="preserve">
          <source>Returns the name of the timezone.</source>
          <target state="translated">タイムゾーンの名前を返します。</target>
        </trans-unit>
        <trans-unit id="25c33f85c950eaa780c845a0c076d4a6c2529008" translate="yes" xml:space="preserve">
          <source>Returns the name of this node</source>
          <target state="translated">このノードの名前を返します</target>
        </trans-unit>
        <trans-unit id="28681f2a35610ba03a7e3f770e1a61864cc1218b" translate="yes" xml:space="preserve">
          <source>Returns the natural log of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt;の自然対数を返します。</target>
        </trans-unit>
        <trans-unit id="17cbfcbdaa935018c204b81856b33524e0e77584" translate="yes" xml:space="preserve">
          <source>Returns the next pseudo random number ranging from 0 to high(uint32)</source>
          <target state="translated">0からhigh(uint32)までの範囲の次の擬似乱数を返します。</target>
        </trans-unit>
        <trans-unit id="cebb03f437a4a106392e96937340e702bf3270a8" translate="yes" xml:space="preserve">
          <source>Returns the next sibling of this node</source>
          <target state="translated">このノードの次の兄弟を返します</target>
        </trans-unit>
        <trans-unit id="f9cdab9bca02508199771437f71f8865e10ea563" translate="yes" xml:space="preserve">
          <source>Returns the number of &lt;span id=&quot;command-line-arguments_1&quot;&gt;command line arguments&lt;/span&gt; given to the application.</source>
          <target state="translated">アプリケーションに与えられた&lt;span id=&quot;command-line-arguments_1&quot;&gt;コマンドライン引数の&lt;/span&gt;数を返します。</target>
        </trans-unit>
        <trans-unit id="d269fb2bd9b0984074ff25662d5abbeb504fa562" translate="yes" xml:space="preserve">
          <source>Returns the number of Unicode characters of the string &lt;code&gt;s&lt;/code&gt;</source>
          <target state="translated">文字列 &lt;code&gt;s&lt;/code&gt; の Unicode文字の数を返します</target>
        </trans-unit>
        <trans-unit id="7a4a75324ac5ed5e003df60c683bd0e77be24639" translate="yes" xml:space="preserve">
          <source>Returns the number of bytes the rune starting at &lt;code&gt;s[i]&lt;/code&gt; takes</source>
          <target state="translated">&lt;code&gt;s[i]&lt;/code&gt; で始まるルーンが取るバイト数を返します</target>
        </trans-unit>
        <trans-unit id="aa284194f3de1c6d83f6c1d799814514d9388a2d" translate="yes" xml:space="preserve">
          <source>Returns the number of days spanned by a given number of years.</source>
          <target state="translated">指定した年数分の日数を返します。</target>
        </trans-unit>
        <trans-unit id="c6410e16df9d6786db04898460a8796cf7527fa5" translate="yes" xml:space="preserve">
          <source>Returns the number of keys in &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt;のキーの数を返します。</target>
        </trans-unit>
        <trans-unit id="9ad87f976893c5d9f4743f19aec9d2b6e130936d" translate="yes" xml:space="preserve">
          <source>Returns the number of leading zero bits in integer. If &lt;em&gt;x&lt;/em&gt; is zero, when &lt;code&gt;noUndefinedBitOpts&lt;/code&gt; is set, result is 0, otherwise result is undefined.</source>
          <target state="translated">整数の先行ゼロビットの数を返します。場合&lt;em&gt;、xが&lt;/em&gt;ゼロである場合、 &lt;code&gt;noUndefinedBitOpts&lt;/code&gt; が設定され、その結果は、そうでなければ結果は未定義である、0です。</target>
        </trans-unit>
        <trans-unit id="10ae6bad4e5ca9ef6cb1b114c9210ee31bdb3d93" translate="yes" xml:space="preserve">
          <source>Returns the number of leap years spanned by a given number of years.</source>
          <target state="translated">指定した年数分のうるう年の数を返します。</target>
        </trans-unit>
        <trans-unit id="868b75ec3b9ff5ba8d5879c82669503c91167a28" translate="yes" xml:space="preserve">
          <source>Returns the number of lines in the string &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">文字列&lt;em&gt;sの&lt;/em&gt;行数を返します。</target>
        </trans-unit>
        <trans-unit id="8031e96acb04e749b09c745d3dfff7519e307adb" translate="yes" xml:space="preserve">
          <source>Returns the number of occurrences of the item &lt;em&gt;x&lt;/em&gt; in the container &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">コンテナ&lt;em&gt;s&lt;/em&gt;内のアイテム&lt;em&gt;xの&lt;/em&gt;出現回数を返します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1440a213702270cf2e7bb92677edc89da9c76164" translate="yes" xml:space="preserve">
          <source>Returns the number of skipped bytes.</source>
          <target state="translated">スキップしたバイト数を返します。</target>
        </trans-unit>
        <trans-unit id="5ed6c957ece3b4b44218387b7d7e327cc05a3415" translate="yes" xml:space="preserve">
          <source>Returns the number of the parsed characters or 0 in case of an error. This proc is sensitive to the already existing value of &lt;code&gt;number&lt;/code&gt; and will likely not do what you want unless you make sure &lt;code&gt;number&lt;/code&gt; is zero. You can use this feature to &lt;em&gt;chain&lt;/em&gt; calls, though the result int will quickly overflow. Example:</source>
          <target state="translated">解析された文字の数を返します。エラーの場合は0を返します。このプロシージャは、 &lt;code&gt;number&lt;/code&gt; の既存の値に敏感であり、 &lt;code&gt;number&lt;/code&gt; がゼロであることを確認しない限り、望んだことを実行しない可能性があります。この機能を使用して呼び出しを&lt;em&gt;チェーン&lt;/em&gt;できますが、結果のintはすぐにオーバーフローします。例：</target>
        </trans-unit>
        <trans-unit id="c7835afba0157e1a056262f78ac77d6114f01a80" translate="yes" xml:space="preserve">
          <source>Returns the number of trailing zeros in integer. If &lt;em&gt;x&lt;/em&gt; is zero, when &lt;code&gt;noUndefinedBitOpts&lt;/code&gt; is set, result is 0, otherwise result is undefined.</source>
          <target state="translated">後続のゼロの数を整数で返します。場合&lt;em&gt;、xが&lt;/em&gt;ゼロである場合、 &lt;code&gt;noUndefinedBitOpts&lt;/code&gt; が設定され、その結果は、そうでなければ結果は未定義である、0です。</target>
        </trans-unit>
        <trans-unit id="38b458cbb1ce4d0f1bbe000474a921dbda5aaf84" translate="yes" xml:space="preserve">
          <source>Returns the number of years spanned by a given number of days and the remainder as days.</source>
          <target state="translated">指定した日数分の年数を、残りの日数で返します。</target>
        </trans-unit>
        <trans-unit id="47361723fe221d8d9427bb3568a0d9ed4d141663" translate="yes" xml:space="preserve">
          <source>Returns the number of years spanned by a given number of days.</source>
          <target state="translated">指定した日数分の年数を返します。</target>
        </trans-unit>
        <trans-unit id="c5502538b141e755c101390499be955a30f09349" translate="yes" xml:space="preserve">
          <source>Returns the offset of the local (non-DST) timezone in seconds west of UTC.</source>
          <target state="translated">ローカル(DST以外の)タイムゾーンのオフセットを、UTCから西に秒単位で返します。</target>
        </trans-unit>
        <trans-unit id="6c13da3192f12802c7f7f7cf658fe53f46bb891f" translate="yes" xml:space="preserve">
          <source>Returns the owner document of this node</source>
          <target state="translated">このノードの所有者ドキュメントを返します</target>
        </trans-unit>
        <trans-unit id="19eb25b16b94b106cd29d96dc8d300008883baae" translate="yes" xml:space="preserve">
          <source>Returns the parent directory of &lt;em&gt;path&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;path&lt;/em&gt;の親ディレクトリを返します。</target>
        </trans-unit>
        <trans-unit id="f55db505f7e31d5d602432fbb5c5933f00a6446a" translate="yes" xml:space="preserve">
          <source>Returns the parent node of this node</source>
          <target state="translated">このノードの親ノードを返します</target>
        </trans-unit>
        <trans-unit id="9031ef989255b038ad3598bcc8f847d9e67d50fe" translate="yes" xml:space="preserve">
          <source>Returns the path to the currently compiling project</source>
          <target state="translated">現在コンパイル中のプロジェクトへのパスを返します。</target>
        </trans-unit>
        <trans-unit id="119499b23ef4163bf4c0bf8fe76b075e516ec784" translate="yes" xml:space="preserve">
          <source>Returns the phase of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt;の位相を返します。</target>
        </trans-unit>
        <trans-unit id="74a6b9b345a48fefe2db6377f4f4e7c707706a8d" translate="yes" xml:space="preserve">
          <source>Returns the position of the invalid byte in &lt;code&gt;s&lt;/code&gt; if the string &lt;code&gt;s&lt;/code&gt; does not hold valid UTF-8 data. Otherwise &lt;code&gt;-1&lt;/code&gt; is returned.</source>
          <target state="translated">文字列 &lt;code&gt;s&lt;/code&gt; が有効なUTF-8データを保持していない場合、無効なバイトの位置を &lt;code&gt;s&lt;/code&gt; で返します。それ以外の場合は &lt;code&gt;-1&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="3224ab35c1aac184c90db0d92fb81df2b0637785" translate="yes" xml:space="preserve">
          <source>Returns the previous sibling of this node</source>
          <target state="translated">このノードの前の兄弟姉妹を返します</target>
        </trans-unit>
        <trans-unit id="a9bd67cf75a1f91a6848fff257cf259eca2e1503" translate="yes" xml:space="preserve">
          <source>Returns the reverse of &lt;code&gt;s&lt;/code&gt;, interpreting it as Unicode characters. Unicode combining characters are correctly interpreted as well:</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; の逆を返し、それをUnicode文字として解釈します。Unicode結合文字も正しく解釈されます。</target>
        </trans-unit>
        <trans-unit id="034dca5b89c49b3b3a21763616e6836be709ce0c" translate="yes" xml:space="preserve">
          <source>Returns the secant of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt;の正割を返します。</target>
        </trans-unit>
        <trans-unit id="8f28f034b9df64e62630194c82dba2c27ea90f30" translate="yes" xml:space="preserve">
          <source>Returns the sine of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt;の正弦を返します。</target>
        </trans-unit>
        <trans-unit id="9dbc212b3b981df30039102f6c2ab55fe5bcd1ba" translate="yes" xml:space="preserve">
          <source>Returns the socket's file descriptor</source>
          <target state="translated">ソケットのファイルディスクリプタを返す</target>
        </trans-unit>
        <trans-unit id="aff469b903b9494158308e0a594553f762cb57f2" translate="yes" xml:space="preserve">
          <source>Returns the socket's file descriptor.</source>
          <target state="translated">ソケットのファイルディスクリプタを返します。</target>
        </trans-unit>
        <trans-unit id="abe5aa8e0fe8f8d3006ccbb8fc6f6340b16bdf3d" translate="yes" xml:space="preserve">
          <source>Returns the string representation of the specified URI object.</source>
          <target state="translated">指定したURIオブジェクトの文字列表現を返します。</target>
        </trans-unit>
        <trans-unit id="d310f9d142541923eb8760089370f02ccac138c1" translate="yes" xml:space="preserve">
          <source>Returns the symmetric difference of the sets &lt;em&gt;s1&lt;/em&gt; and &lt;em&gt;s2&lt;/em&gt;.</source>
          <target state="translated">セット&lt;em&gt;s1&lt;/em&gt;と&lt;em&gt;s2&lt;/em&gt;の対称差を返します。</target>
        </trans-unit>
        <trans-unit id="831b1b13c8ff344093708e211ecc41f8909c7f54" translate="yes" xml:space="preserve">
          <source>Returns the tail part of &lt;em&gt;path&lt;/em&gt;..</source>
          <target state="translated">&lt;em&gt;パス&lt;/em&gt;の末尾部分を返します。</target>
        </trans-unit>
        <trans-unit id="3f73b5f8833125b0818002da84b6a296d0b9c654" translate="yes" xml:space="preserve">
          <source>Returns the tangent of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt;のタンジェントを返します。</target>
        </trans-unit>
        <trans-unit id="c98c53f67d8dc3b78d8f86ac49ca64dbe19df2f3" translate="yes" xml:space="preserve">
          <source>Returns the temporary directory of the current user for applications to save temporary files in.</source>
          <target state="translated">一時ファイルを保存するアプリケーションのために、現在のユーザーの一時ディレクトリを返します。</target>
        </trans-unit>
        <trans-unit id="99fcc09ef326b7f61e3fbba7e6283a4079d8758d" translate="yes" xml:space="preserve">
          <source>Returns the terminal width and height as a tuple. Internally calls &lt;em&gt;terminalWidth&lt;/em&gt; and &lt;em&gt;terminalHeight&lt;/em&gt;, so the same assumptions apply.</source>
          <target state="translated">端末の幅と高さをタプルとして返します。内部的に&lt;em&gt;terminalWidth&lt;/em&gt;と&lt;em&gt;terminalHeightを&lt;/em&gt;呼び出すため、同じ仮定が適用されます。</target>
        </trans-unit>
        <trans-unit id="485ea0f123b90e802d59e631716f2f95f1826a64" translate="yes" xml:space="preserve">
          <source>Returns the time in seconds since the unix epoch.</source>
          <target state="translated">unixエポックからの時間を秒単位で返します。</target>
        </trans-unit>
        <trans-unit id="7df8e6a9d30abb456a6d968ddd869b70bc13ffe3" translate="yes" xml:space="preserve">
          <source>Returns the type kind of the node 'n' that should represent a type, that means the node should have been obtained via &lt;code&gt;getType&lt;/code&gt;.</source>
          <target state="translated">タイプを表す必要があるノード「n」のタイプの種類を返します。つまり、ノードは &lt;code&gt;getType&lt;/code&gt; を介して取得されているはずです。</target>
        </trans-unit>
        <trans-unit id="f005451c6d94515674b59537aa80c67d9afcfad4" translate="yes" xml:space="preserve">
          <source>Returns the type of this node</source>
          <target state="translated">このノードの型を返します。</target>
        </trans-unit>
        <trans-unit id="6741d8a109f95be623bc0496522d3d085d106130" translate="yes" xml:space="preserve">
          <source>Returns the underlying IO Completion Port handle (Windows) or selector (Unix) for the specified dispatcher.</source>
          <target state="translated">指定したディスパッチャの基本となる IO 補完ポートハンドル (Windows)あるいはセレクタ (Unix)を返します。</target>
        </trans-unit>
        <trans-unit id="b2bf709110faaa4311d681b0cccd57863ada3fd7" translate="yes" xml:space="preserve">
          <source>Returns the unicode character at position pos</source>
          <target state="translated">位置 pos の unicode 文字を返します。</target>
        </trans-unit>
        <trans-unit id="b3bcfe5c86cb245a8ba3c4e6e3381fd930ac4c8b" translate="yes" xml:space="preserve">
          <source>Returns the unicode character at position pos as UTF8 String</source>
          <target state="translated">位置 pos の unicode キ ャ ラ ク タ を UTF8 で返します。</target>
        </trans-unit>
        <trans-unit id="ec1e257e3ab866521de12167756645f6bbd4cf09" translate="yes" xml:space="preserve">
          <source>Returns the unicode character in &lt;code&gt;s&lt;/code&gt; at byte index &lt;code&gt;i&lt;/code&gt;</source>
          <target state="translated">Unicodeの文字をバイトインデックス &lt;code&gt;i&lt;/code&gt; &lt;code&gt;s&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="f2f1a75ebbf42c4fa5d0b7cc12ea43445b338ea3" translate="yes" xml:space="preserve">
          <source>Returns the union of the sets &lt;em&gt;s1&lt;/em&gt; and &lt;em&gt;s2&lt;/em&gt;.</source>
          <target state="translated">セット&lt;em&gt;s1&lt;/em&gt;と&lt;em&gt;s2&lt;/em&gt;の和集合を返します。</target>
        </trans-unit>
        <trans-unit id="a42c4006c25448cb8e8a9927654e643e2d41eee6" translate="yes" xml:space="preserve">
          <source>Returns the value of a &lt;code&gt;some&lt;/code&gt;. Behavior is undefined for &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;some&lt;/code&gt; の値を返します。 &lt;code&gt;none&lt;/code&gt; の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="e9822f79cc77c7dcef1e1be2dfccc7f5d5a327da" translate="yes" xml:space="preserve">
          <source>Returns the value of a specific &lt;code&gt;rnField&lt;/code&gt; node.</source>
          <target state="translated">特定の &lt;code&gt;rnField&lt;/code&gt; ノードの値を返します。</target>
        </trans-unit>
        <trans-unit id="0cd4bf07463e0f7367808c9b677081eac431e722" translate="yes" xml:space="preserve">
          <source>Returns the values associated with the given &lt;code&gt;key&lt;/code&gt;. If the returned values are passed to a procedure expecting a &lt;code&gt;string&lt;/code&gt;, the first value is automatically picked. If there are no values associated with the key, an exception is raised.</source>
          <target state="translated">指定された &lt;code&gt;key&lt;/code&gt; 関連付けられた値を返します。戻り値が &lt;code&gt;string&lt;/code&gt; を期待するプロシージャに渡されると、最初の値が自動的に選択されます。キーに関連付けられた値がない場合、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="93f51faa57e9b3489262567f680af0cbaa4e89f3" translate="yes" xml:space="preserve">
          <source>Returns the values associated with the given &lt;code&gt;key&lt;/code&gt;. If there are no values associated with the key, then &lt;code&gt;default&lt;/code&gt; is returned.</source>
          <target state="translated">指定された &lt;code&gt;key&lt;/code&gt; 関連付けられた値を返します。キーに関連付けられた値がない場合は、 &lt;code&gt;default&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="a103de7c9534549de982a329849174d847991461" translate="yes" xml:space="preserve">
          <source>Returns this Attributes owner element</source>
          <target state="translated">この属性の所有者要素を返します。</target>
        </trans-unit>
        <trans-unit id="97aed22ddb99c2d3b3900b9eff89121a7467bb53" translate="yes" xml:space="preserve">
          <source>Returns this node's first child</source>
          <target state="translated">このノードの最初の子を返します</target>
        </trans-unit>
        <trans-unit id="46c4123940050ab879470321b00f02a05fe04d3e" translate="yes" xml:space="preserve">
          <source>Returns this node's last child</source>
          <target state="translated">このノードの最後の子を返します</target>
        </trans-unit>
        <trans-unit id="5566259966775d6ab4d785dba138b97e794b8ef6" translate="yes" xml:space="preserve">
          <source>Returns this nodes local name</source>
          <target state="translated">このノードのローカル名を返します</target>
        </trans-unit>
        <trans-unit id="33893d95cf60d05be4ea9e5a0f490e5b5052c3cf" translate="yes" xml:space="preserve">
          <source>Returns this nodes namespace URI</source>
          <target state="translated">このノードの名前空間 URI を返します</target>
        </trans-unit>
        <trans-unit id="e7c1f7bfc8f54bcf959e440f67dee37c86f130cf" translate="yes" xml:space="preserve">
          <source>Returns true if &lt;code&gt;a == b&lt;/code&gt;, that is if both dates represent the same point in time.</source>
          <target state="translated">&lt;code&gt;a == b&lt;/code&gt; 場合、つまり両方の日付が同じ時点を表す場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="b6c329ea909a5d0e9d3ffdb0b4876217ed838ee7" translate="yes" xml:space="preserve">
          <source>Returns true if &lt;code&gt;a == b&lt;/code&gt;, that is if both times represent the same point in time.</source>
          <target state="translated">&lt;code&gt;a == b&lt;/code&gt; 場合、つまり両方の時間が同じ時点を表す場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="4466f7a21685de9f410b9130d63bbe23744ae53d" translate="yes" xml:space="preserve">
          <source>Returns true if &lt;code&gt;year&lt;/code&gt; is a leap year.</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; がうるう年の場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="f0d47248fdc2ddd06b5fc1c4920fe5668b35cfa6" translate="yes" xml:space="preserve">
          <source>Returns true if &lt;em&gt;f&lt;/em&gt; is associated with a terminal device.</source>
          <target state="translated">&lt;em&gt;f&lt;/em&gt;が端末デバイスに関連付けられている場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="8a375bfef84a2adf0c1e8894adbbc84c2a6db990" translate="yes" xml:space="preserve">
          <source>Returns true if &lt;em&gt;filename&lt;/em&gt; exists and is a regular file or symlink. (directories, device files, named pipes and sockets return false)</source>
          <target state="translated">&lt;em&gt;ファイル名&lt;/em&gt;が存在し、通常のファイルまたはシンボリックリンクである場合、trueを返します。（ディレクトリ、デバイスファイル、名前付きパイプおよびソケットはfalseを返します）</target>
        </trans-unit>
        <trans-unit id="2b6a20adf71f715ac99b978019378d6a4de2e105" translate="yes" xml:space="preserve">
          <source>Returns true if &lt;em&gt;item&lt;/em&gt; is in &lt;em&gt;a&lt;/em&gt; or false if not found. This is a shortcut for &lt;code&gt;find(a, item) &amp;gt;= 0&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;アイテム&lt;/em&gt;が&lt;em&gt;aに&lt;/em&gt;ある場合はtrue、見つからない場合はfalseを返します。これは &lt;code&gt;find(a, item) &amp;gt;= 0&lt;/code&gt; ショートカットです。</target>
        </trans-unit>
        <trans-unit id="f1f892089be6bdc1ecad63fe88fb93b06f48fb7c" translate="yes" xml:space="preserve">
          <source>Returns true if &lt;em&gt;s&lt;/em&gt; is a strict or proper subset of &lt;em&gt;t&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt;が&lt;em&gt;tの&lt;/em&gt;厳密なサブセットまたは適切なサブセットである場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="2fbc95f11f1058737c01ec6bb3d24b1abf45935f" translate="yes" xml:space="preserve">
          <source>Returns true if &lt;em&gt;s&lt;/em&gt; is a valid identifier.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt;が有効な識別子の場合、trueを返します。</target>
        </trans-unit>
        <trans-unit id="d9f0d9fc96a2c159528d34d30631b7367401cc98" translate="yes" xml:space="preserve">
          <source>Returns true if &lt;em&gt;s&lt;/em&gt; is subset of &lt;em&gt;t&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt;が&lt;em&gt;tの&lt;/em&gt;サブセットである場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="f1a5fb997fbf5f05184d700473d623a97e566c7a" translate="yes" xml:space="preserve">
          <source>Returns true if a terminal supports true color.</source>
          <target state="translated">端末がトゥルーカラーをサポートしている場合にtrueを返します。</target>
        </trans-unit>
        <trans-unit id="3f3ea35d72c725449adfde6da07c438ca9552a1f" translate="yes" xml:space="preserve">
          <source>Returns true if all characters in &lt;em&gt;s&lt;/em&gt; are whitespace characters and there is at least one character in &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;sの&lt;/em&gt;すべての文字が空白文字であり、少なくとも1つの文字が&lt;em&gt;sに&lt;/em&gt;ある場合、trueを返します。</target>
        </trans-unit>
        <trans-unit id="b95dfabe13ee6a1609ae976d3718f019be6c63d5" translate="yes" xml:space="preserve">
          <source>Returns true if both &lt;em&gt;s&lt;/em&gt; and &lt;em&gt;t&lt;/em&gt; have the same members and set size.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt;と&lt;em&gt;tの&lt;/em&gt;両方に同じメンバーとセットサイズがある場合、trueを返します。</target>
        </trans-unit>
        <trans-unit id="bacafe9bb3e56969a4f182228b8a17b4ce906f1d" translate="yes" xml:space="preserve">
          <source>Returns true if both pathname arguments refer to files with identical binary content.</source>
          <target state="translated">両方のパス名引数が同一のバイナリ内容のファイルを参照している場合に真を返します。</target>
        </trans-unit>
        <trans-unit id="5bd2b49a7ac6325b556d1e14e4a95619c08b615a" translate="yes" xml:space="preserve">
          <source>Returns true if both pathname arguments refer to the same physical file or directory. Raises an exception if any of the files does not exist or information about it can not be obtained.</source>
          <target state="translated">パス名引数の両方が同じ物理ファイルまたはディレクトリを参照している場合は真を返します。いずれかのファイルが存在しない場合や、そのファイルに関する情報が得られない場合は例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="cd7ec21082838962be509e5da1d8fca2e60fe954" translate="yes" xml:space="preserve">
          <source>Returns true if the file &lt;em&gt;a&lt;/em&gt; is newer than file &lt;em&gt;b&lt;/em&gt;, i.e. if &lt;em&gt;a&lt;/em&gt;'s modification time is later than &lt;em&gt;b&lt;/em&gt;'s.</source>
          <target state="translated">trueを返し、ファイル場合は、ファイルよりも新しい&lt;em&gt;B&lt;/em&gt;場合、すなわちの修正時刻が後より&lt;em&gt;、B&lt;/em&gt; s 'を。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d18295e84bb9768516d59ae848cb506adfd712a9" translate="yes" xml:space="preserve">
          <source>Returns true if the first character in each word inside &lt;em&gt;s&lt;/em&gt; are upper case and there is at least one character in &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt;内&lt;em&gt;の&lt;/em&gt;各単語の最初の文字が大文字で、&lt;em&gt;sに&lt;/em&gt;少なくとも1文字ある場合、trueを返します。</target>
        </trans-unit>
        <trans-unit id="c6a345c7016264fc027d4e41c24c42c178fee6e3" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;a &amp;lt; b&lt;/code&gt;, that is iff a happened before b.</source>
          <target state="translated">&lt;code&gt;a &amp;lt; b&lt;/code&gt; 場合、つまりaがbの前に発生した場合に限り、真を返します。</target>
        </trans-unit>
        <trans-unit id="d1c8ab774c4ec4a2c7f7e4068c83f812e96b10fa" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;a &amp;lt;= b&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;a &amp;lt;= b&lt;/code&gt; 場合に真を返します。</target>
        </trans-unit>
        <trans-unit id="be46f5184aa1f715107d38ca43a2be3f6627fcd6" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;c&lt;/code&gt; is a Unicode combining character</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; がUnicode結合文字である場合にtrueを返します</target>
        </trans-unit>
        <trans-unit id="4f53760b18145aae16c17664969c430df5f6e22b" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;c&lt;/code&gt; is a Unicode titlecase character</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; がUnicodeタイトルケース文字である場合にtrueを返します</target>
        </trans-unit>
        <trans-unit id="13f9cf92f412c08f7d45d707fe596c36f478f7c6" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;c&lt;/code&gt; is a Unicode whitespace character</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; がUnicodeの空白文字である場合にtrueを返します</target>
        </trans-unit>
        <trans-unit id="842b11875525454eaf78ea9e702b73d44dbb828b" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;c&lt;/code&gt; is a lower case Unicode character. If possible, prefer &lt;code&gt;isLower&lt;/code&gt; over &lt;code&gt;isUpper&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; が小文字のUnicode文字である場合にtrueを返します。可能であれば、 &lt;code&gt;isLower&lt;/code&gt; よりもisLowerを優先して &lt;code&gt;isUpper&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1d0be0d9786917ee47dc5077951cebbed4a773f1" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;c&lt;/code&gt; is a upper case Unicode character. If possible, prefer &lt;code&gt;isLower&lt;/code&gt; over &lt;code&gt;isUpper&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; が大文字のUnicode文字である場合にtrueを返します。可能であれば、 &lt;code&gt;isLower&lt;/code&gt; よりもisLowerを優先して &lt;code&gt;isUpper&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="937a5ab5858128a451cc1afaae6edd6e3313a016" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;c&lt;/code&gt; is an &lt;em&gt;alpha&lt;/em&gt; Unicode character (i.e., a letter)</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; が&lt;em&gt;アルファ&lt;/em&gt; Unicode文字（つまり、文字）である場合にtrueを返します。</target>
        </trans-unit>
        <trans-unit id="58c9fb7b3fa81326681d0874fd797ba4b1c22f08" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;s&lt;/code&gt; continues with &lt;code&gt;substr&lt;/code&gt; at position &lt;code&gt;start&lt;/code&gt;.</source>
          <target state="translated">trueを返しますIFF &lt;code&gt;s&lt;/code&gt; がで継続する &lt;code&gt;substr&lt;/code&gt; 位置で &lt;code&gt;start&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2db059e834545ec15afef56b21df8639c9c17bef" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;s&lt;/code&gt; ends with &lt;code&gt;suffix&lt;/code&gt;.</source>
          <target state="translated">真IFF返し &lt;code&gt;s&lt;/code&gt; で終了し &lt;code&gt;suffix&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="03ab746180143be68c1fc2adc8d559f675d74c0d" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;s&lt;/code&gt; starts with &lt;code&gt;prefix&lt;/code&gt;.</source>
          <target state="translated">真IFF返し &lt;code&gt;s&lt;/code&gt; で始まるを &lt;code&gt;prefix&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c7ab96885b8905adb36fa6fd5f1d92035a4c57cf" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;unsigned(x) &amp;lt; unsigned(y)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;unsigned(x) &amp;lt; unsigned(y)&lt;/code&gt; 場合にtrueを返します。</target>
        </trans-unit>
        <trans-unit id="989161bea2a8fd33b18d377395646382e88d24a7" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;x &amp;lt;= y&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x &amp;lt;= y&lt;/code&gt; 場合に真を返します。</target>
        </trans-unit>
        <trans-unit id="cc68d3fb6e32ee81440dccee40aeab98efc1b636" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;em&gt;c&lt;/em&gt; does not contain the given &lt;em&gt;key&lt;/em&gt;. If the key does exist, c.excl(key) is performed.</source>
          <target state="translated">&lt;em&gt;c&lt;/em&gt;が指定された&lt;em&gt;キーを&lt;/em&gt;含まない場合にtrueを返します。キーが存在する場合、c.excl（key）が実行されます。</target>
        </trans-unit>
        <trans-unit id="1e31f59357067504885196ae02f864de63152565" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;em&gt;f&lt;/em&gt; is at the end.</source>
          <target state="translated">&lt;em&gt;f&lt;/em&gt;が最後にある場合にtrueを返します。</target>
        </trans-unit>
        <trans-unit id="bed62579837f33b1ad936f60e7f58038d0a36966" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;em&gt;key&lt;/em&gt; is in &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;キー&lt;/em&gt;が&lt;em&gt;sに&lt;/em&gt;ある場合にtrueを返します。</target>
        </trans-unit>
        <trans-unit id="c1fa5c1044ffea59affb1130470462f23fe4b931" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;em&gt;s1&lt;/em&gt; is proper subset of &lt;em&gt;s2&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;s1&lt;/em&gt;が&lt;em&gt;s2の&lt;/em&gt;適切なサブセットである場合にtrueを返します。</target>
        </trans-unit>
        <trans-unit id="40704492783b00bd93d0595318517e1537391c3d" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;em&gt;s1&lt;/em&gt; is subset of &lt;em&gt;s2&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;s1&lt;/em&gt;が&lt;em&gt;s2の&lt;/em&gt;サブセットである場合にtrueを返します。</target>
        </trans-unit>
        <trans-unit id="06bbbf1fcf91b89e08a767a1ca4fd1d480635aab" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;em&gt;s&lt;/em&gt; contains all alphabetic unicode characters.</source>
          <target state="translated">すべてのアルファベットのユニコード文字が&lt;em&gt;sに&lt;/em&gt;含まれている場合にtrueを返します。</target>
        </trans-unit>
        <trans-unit id="fd9b0b52bf7eef83d096e5758576c9da25421424" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;em&gt;s&lt;/em&gt; contains all whitespace unicode characters.</source>
          <target state="translated">すべての空白Unicode文字が&lt;em&gt;sに&lt;/em&gt;含まれている場合にtrueを返します。</target>
        </trans-unit>
        <trans-unit id="099fa1404dd4a3e6a31a634adb9c5f73a0fcb782" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;em&gt;x&lt;/em&gt; is less than &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt;が&lt;em&gt;y&lt;/em&gt;より小さい場合に真を返します。</target>
        </trans-unit>
        <trans-unit id="a8393ecc96f9abbf571ff80c1f09e22cee090e0a" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;em&gt;x&lt;/em&gt; is less than or equal to &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt;が&lt;em&gt;y&lt;/em&gt;以下の場合に真を返します。</target>
        </trans-unit>
        <trans-unit id="0e6e41d0625e1136d8c3f7ff69a37ae63be1a77a" translate="yes" xml:space="preserve">
          <source>Returns true iff each character of &lt;em&gt;s&lt;/em&gt; is in the set &lt;em&gt;theSet&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;sの&lt;/em&gt;各文字がセット&lt;em&gt;theSetに&lt;/em&gt;ある場合にtrueを返します。</target>
        </trans-unit>
        <trans-unit id="274a567b46e62fb1bd35fbdd5f84bd3b390c2be3" translate="yes" xml:space="preserve">
          <source>Returns true iff the directory &lt;em&gt;dir&lt;/em&gt; exists. If &lt;em&gt;dir&lt;/em&gt; is a file, false is returned.</source>
          <target state="translated">ディレクトリ&lt;em&gt;dir&lt;/em&gt;が存在する場合はtrueを返します。&lt;em&gt;dir&lt;/em&gt;がファイルの場合、falseが返されます。</target>
        </trans-unit>
        <trans-unit id="e474d336f342512272f48e5b692a7be26da35b17" translate="yes" xml:space="preserve">
          <source>Returns true iff the process &lt;em&gt;p&lt;/em&gt; is still running. Returns immediately.</source>
          <target state="translated">プロセス&lt;em&gt;p&lt;/em&gt;がまだ実行されている場合はtrueを返します。すぐに戻ります。</target>
        </trans-unit>
        <trans-unit id="3363f09adb4d04cb85355ac2da1367de53b31d67" translate="yes" xml:space="preserve">
          <source>Returns true iff the sets &lt;em&gt;s1&lt;/em&gt; and &lt;em&gt;s2&lt;/em&gt; have no items in common.</source>
          <target state="translated">セット&lt;em&gt;s1&lt;/em&gt;と&lt;em&gt;s2&lt;/em&gt;に共通のアイテムがない場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="0c82cd243c1933a75b353c20f3c9079e9292e5d7" translate="yes" xml:space="preserve">
          <source>Returns true iff the symlink &lt;em&gt;link&lt;/em&gt; exists. Will return true regardless of whether the link points to a directory or file.</source>
          <target state="translated">シンボリック&lt;em&gt;リンク&lt;/em&gt;が存在する場合にtrueを返します。リンクがディレクトリまたはファイルを指しているかどうかに関係なく、trueを返します。</target>
        </trans-unit>
        <trans-unit id="9da9a63a45bba33de5fc9b077956378763e4710d" translate="yes" xml:space="preserve">
          <source>Returns true, if &lt;em&gt;x&lt;/em&gt; is a power of two, false otherwise. Zero and negative numbers are not a power of two.</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt;が2の累乗の場合はtrue、それ以外の場合はfalseを返します。ゼロと負の数は2の累乗ではありません。</target>
        </trans-unit>
        <trans-unit id="95ab6c9bb98e11d820dd03f216ac2a3563c7cbaf" translate="yes" xml:space="preserve">
          <source>Returns whether this node (if it is an element) has any attributes.</source>
          <target state="translated">このノード(要素である場合)が属性を持っているかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="64b0e3e014f680c6cee41ff15c7156cf4736a8e2" translate="yes" xml:space="preserve">
          <source>Returns whether this node has any children.</source>
          <target state="translated">このノードに子があるかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="921d08259fefe923f27c8709cf0ca2be0f19c915" translate="yes" xml:space="preserve">
          <source>Returns zero on success.</source>
          <target state="translated">成功した場合はゼロを返します。</target>
        </trans-unit>
        <trans-unit id="94a56f49aceed5b4f1376409b7241610e054530b" translate="yes" xml:space="preserve">
          <source>Reverse a duration.</source>
          <target state="translated">デュレーションを反転させます。</target>
        </trans-unit>
        <trans-unit id="d4eb4f9adb7dabea3e5b355957a9b7339c9cf086" translate="yes" xml:space="preserve">
          <source>Reverses a time interval</source>
          <target state="translated">時間間隔を反転させます。</target>
        </trans-unit>
        <trans-unit id="1576a7955e1212bee1e1e9a087a1bc1675b7eb9d" translate="yes" xml:space="preserve">
          <source>Right-rotate bits in a 16-bits value.</source>
          <target state="translated">16ビットの値を右回転させます。</target>
        </trans-unit>
        <trans-unit id="b1901a77f2b1fbfddc559de040c0f787cb0575ad" translate="yes" xml:space="preserve">
          <source>Right-rotate bits in a 32-bits value.</source>
          <target state="translated">32ビットの値を右回転させます。</target>
        </trans-unit>
        <trans-unit id="b3caac53f637fa40f74149239dfe245d5ae4d6f3" translate="yes" xml:space="preserve">
          <source>Right-rotate bits in a 64-bits value.</source>
          <target state="translated">64ビットの値を右回転させます。</target>
        </trans-unit>
        <trans-unit id="a7aba425de45fd784c6d62570031d13e8b4e50b3" translate="yes" xml:space="preserve">
          <source>Right-rotate bits in a 8-bits value.</source>
          <target state="translated">8ビットの値を右回転させます。</target>
        </trans-unit>
        <trans-unit id="807ed363e3ecefb21de485fe6e4d591f4e211a86" translate="yes" xml:space="preserve">
          <source>Root type of the JavaScript object hierarchy</source>
          <target state="translated">JavaScriptオブジェクト階層のルート型</target>
        </trans-unit>
        <trans-unit id="66e290595d5ac59c4a565f1e2762fadc2e1d5e2f" translate="yes" xml:space="preserve">
          <source>Round a floating point number.</source>
          <target state="translated">浮動小数点数を丸めます。</target>
        </trans-unit>
        <trans-unit id="3f6285a733882b71208f679ccce1b0e39eaf76d3" translate="yes" xml:space="preserve">
          <source>Rounds and formats &lt;em&gt;bytes&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;バイトを&lt;/em&gt;丸め、フォーマットし&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="16da0b3857815def052ecbf0d1a7d411e083f1fa" translate="yes" xml:space="preserve">
          <source>Routines can be invoked without the &lt;code&gt;()&lt;/code&gt; if the call is syntactically a statement. This command invocation syntax also works for expressions, but then only a single argument may follow. This restriction means &lt;code&gt;echo f 1, f 2&lt;/code&gt; is parsed as &lt;code&gt;echo(f(1), f(2))&lt;/code&gt; and not as &lt;code&gt;echo(f(1, f(2)))&lt;/code&gt;. The method call syntax may be used to provide one more argument in this case:</source>
          <target state="translated">呼び出しが構文的にステートメントである場合、ルーチンは &lt;code&gt;()&lt;/code&gt; なしで呼び出すことができます。このコマンド呼び出し構文は式に対しても機能しますが、その後に続くことができるのは単一の引数のみです。この制限手段は、 &lt;code&gt;echo f 1, f 2&lt;/code&gt; として解析される &lt;code&gt;echo(f(1), f(2))&lt;/code&gt; としないような &lt;code&gt;echo(f(1, f(2)))&lt;/code&gt; 。この場合、メソッド呼び出し構文を使用してもう1つの引数を指定できます。</target>
        </trans-unit>
        <trans-unit id="16963d5c01f4da70faf8f227d8db7851d5d356fa" translate="yes" xml:space="preserve">
          <source>Routines that are imported from C are always assumed to be &lt;code&gt;gcsafe&lt;/code&gt;. To disable the GC-safety checking the &lt;code&gt;--threadAnalysis:off&lt;/code&gt; command line switch can be used. This is a temporary workaround to ease the porting effort from old code to the new threading model.</source>
          <target state="translated">Cからインポートされたルーチンは、常に &lt;code&gt;gcsafe&lt;/code&gt; であると見なされます。GCの安全性チェックを無効にするには、 &lt;code&gt;--threadAnalysis:off&lt;/code&gt; コマンドラインスイッチを使用できます。これは、古いコードから新しいスレッドモデルへの移植作業を容易にするための一時的な回避策です。</target>
        </trans-unit>
        <trans-unit id="c54d661a4fe39dc49b20639369c0867602b2def8" translate="yes" xml:space="preserve">
          <source>Rows are retrieved from the server at each iteration.</source>
          <target state="translated">各イテレーションでサーバから行を取得します。</target>
        </trans-unit>
        <trans-unit id="cb8bf77cede87ad18ce7dffc8811672324879519" translate="yes" xml:space="preserve">
          <source>Rule: Bind the expression &lt;em&gt;E&lt;/em&gt; to the &lt;em&gt;nonterminal symbol&lt;/em&gt;&lt;em&gt;A&lt;/em&gt;. &lt;strong&gt;Left recursive rules are not possible and crash the matching engine.&lt;/strong&gt;</source>
          <target state="translated">ルール：式&lt;em&gt;E&lt;/em&gt;を&lt;em&gt;非終端記号&lt;/em&gt;&lt;em&gt;Aに&lt;/em&gt;バインドします。&lt;strong&gt;左再帰ルールは不可能であり、一致するエンジンをクラッシュさせます。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eaf0271f93155201626fd726e221c8d6edf77a58" translate="yes" xml:space="preserve">
          <source>Rules 1-2 ensure the following works:</source>
          <target state="translated">ルール 1-2 は、以下の動作を保証します。</target>
        </trans-unit>
        <trans-unit id="178bbb914e180ee4437de9efa9d2efbcf55416ed" translate="yes" xml:space="preserve">
          <source>Run it via &lt;code&gt;nimsuggest --stdin --debug --v2 myproject.nim&lt;/code&gt;. Nimsuggest is a server that takes queries that are related to &lt;code&gt;myproject&lt;/code&gt;. There is some support so that you can throw random &lt;code&gt;.nim&lt;/code&gt; files which are not part of &lt;code&gt;myproject&lt;/code&gt; at Nimsuggest too, but usually the query refer to modules/files that are part of &lt;code&gt;myproject&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;nimsuggest --stdin --debug --v2 myproject.nim&lt;/code&gt; で実行します。Nimsuggestは、 &lt;code&gt;myproject&lt;/code&gt; に関連するクエリを受け取るサーバーです。 &lt;code&gt;.nim&lt;/code&gt; で &lt;code&gt;myproject&lt;/code&gt; の一部ではないランダムな.nimファイルをスローできるように、いくつかのサポートがありますが、通常、クエリは &lt;code&gt;myproject&lt;/code&gt; の一部であるモジュール/ファイルを参照します。</target>
        </trans-unit>
        <trans-unit id="0b4a7ea8c0792491001922adaff665458451a667" translate="yes" xml:space="preserve">
          <source>Running a single test</source>
          <target state="translated">単一のテストを実行する</target>
        </trans-unit>
        <trans-unit id="09552c90e54913d565538b7f6bcb2dea7e830095" translate="yes" xml:space="preserve">
          <source>Running a single test suite</source>
          <target state="translated">単一のテストスイートの実行</target>
        </trans-unit>
        <trans-unit id="489f1cd116ebc39235c3de0222662235ee30506a" translate="yes" xml:space="preserve">
          <source>Running the &lt;code&gt;caasdriver&lt;/code&gt; without parameters will attempt to process all the test cases in all three operation modes. If a test succeeds nothing will be printed and the process will exit with zero. If any test fails, the specific line of the test preceding the failure and the failure itself will be dumped to stdout, along with a final indicator of the success state and operation mode. You can pass the parameter &lt;code&gt;verbose&lt;/code&gt; to force all output even on successful tests.</source>
          <target state="translated">パラメータなしで &lt;code&gt;caasdriver&lt;/code&gt; を実行すると、3つの操作モードすべてですべてのテストケースが処理されます。テストが成功した場合、何も出力されず、プロセスはゼロで終了します。いずれかのテストが失敗した場合、失敗の前のテストの特定の行と失敗自体が、成功状態と操作モードの最終的なインジケーターとともにstdoutにダンプされます。パラメータ &lt;code&gt;verbose&lt;/code&gt; を渡して、テストが成功した場合でもすべての出力を強制できます。</target>
        </trans-unit>
        <trans-unit id="d4c5f3fdf69fa7aba94d3cfadb0af88cbc0c09a1" translate="yes" xml:space="preserve">
          <source>Running the test suite</source>
          <target state="translated">テストスイートの実行</target>
        </trans-unit>
        <trans-unit id="74a331a7406e7d65c8316a6cbc51f5fa95a0cd09" translate="yes" xml:space="preserve">
          <source>Runs the query (typically &quot;UPDATE&quot;) and returns the number of affected rows</source>
          <target state="translated">クエリ (通常は &quot;UPDATE&quot;)を実行し、影響を受ける行の数を返します。</target>
        </trans-unit>
        <trans-unit id="347702aa4fda57b5221678d353ef36e030f1e1fb" translate="yes" xml:space="preserve">
          <source>Runtime type information</source>
          <target state="translated">ランタイムタイプ情報</target>
        </trans-unit>
        <trans-unit id="4e81beb7bd9c7466cdede3ff0d2b4e410d57d1f5" translate="yes" xml:space="preserve">
          <source>SCGI state object</source>
          <target state="translated">エスシージーアイ状態オブジェクト</target>
        </trans-unit>
        <trans-unit id="ff98764de0504c108b09d3cb3695158e24376b68" translate="yes" xml:space="preserve">
          <source>SEXP node</source>
          <target state="translated">セクスプノード</target>
        </trans-unit>
        <trans-unit id="65068f14e3b7f92c1df965e21bc29d98c82e75c9" translate="yes" xml:space="preserve">
          <source>SOBool</source>
          <target state="translated">SOBool</target>
        </trans-unit>
        <trans-unit id="6a73cc83305dcf7c307c3cb5753f0e67e05f38ef" translate="yes" xml:space="preserve">
          <source>SQL parser object</source>
          <target state="translated">エスエルエルパーサオブジェクト</target>
        </trans-unit>
        <trans-unit id="78bb8826fcc2504583e625386c238563e6207595" translate="yes" xml:space="preserve">
          <source>SSL</source>
          <target state="translated">SSL</target>
        </trans-unit>
        <trans-unit id="dc4efddfc2555e442cfb1d2f170aeeda792ad777" translate="yes" xml:space="preserve">
          <source>SSL can be enabled by compiling with the &lt;code&gt;-d:ssl&lt;/code&gt; flag.</source>
          <target state="translated">SSLを有効にするには、 &lt;code&gt;-d:ssl&lt;/code&gt; フラグを使用してコンパイルします。</target>
        </trans-unit>
        <trans-unit id="7bec8191edd4600a59f1a884197b619e05577ef1" translate="yes" xml:space="preserve">
          <source>SSL is supported through the OpenSSL library. This support can be activated by compiling with the &lt;code&gt;-d:ssl&lt;/code&gt; switch. When an SSL socket is used it will raise ESSL exceptions when SSL errors occur.</source>
          <target state="translated">SSLはOpenSSLライブラリを通じてサポートされています。このサポートは、 &lt;code&gt;-d:ssl&lt;/code&gt; スイッチを使用してコンパイルすることでアクティブにできます。SSLソケットを使用すると、SSLエラーが発生したときにESSL例外が発生します。</target>
        </trans-unit>
        <trans-unit id="2b3c414b1fbe84be2cc3fd66d6e0113d5ef10164" translate="yes" xml:space="preserve">
          <source>SSL/TLS support</source>
          <target state="translated">SSL/TLS対応</target>
        </trans-unit>
        <trans-unit id="79a88f6299b961bcf360191b035d872be482703b" translate="yes" xml:space="preserve">
          <source>SSL_TLSEXT_ERR_ALERT_FATAL</source>
          <target state="translated">SSL_TLSEXT_ERR_ALERT_FATAL</target>
        </trans-unit>
        <trans-unit id="56c229ceb34fc459171ec8dbfd9f085fe13e38b9" translate="yes" xml:space="preserve">
          <source>SSL_TLSEXT_ERR_ALERT_WARNING</source>
          <target state="translated">SSL_TLSEXT_ERR_ALERT_WARNING</target>
        </trans-unit>
        <trans-unit id="be6b34c0e7c61951a8f4e9498285aa602f66b472" translate="yes" xml:space="preserve">
          <source>SSL_TLSEXT_ERR_NOACK</source>
          <target state="translated">SSL_TLSEXT_ERR_NOACK</target>
        </trans-unit>
        <trans-unit id="8052b33f646e6999358ebfd291394b5c53d08cc5" translate="yes" xml:space="preserve">
          <source>SSL_TLSEXT_ERR_OK</source>
          <target state="translated">SSL_TLSEXT_ERR_OK</target>
        </trans-unit>
        <trans-unit id="5c5eaf1404be1155cab2206709e5a03edbf28083" translate="yes" xml:space="preserve">
          <source>Safe alternative to &lt;code&gt;send&lt;/code&gt;. Does not raise an EOS when an error occurs, and instead returns &lt;code&gt;false&lt;/code&gt; on failure.</source>
          <target state="translated">&lt;code&gt;send&lt;/code&gt; 安全な代替手段。エラー発生時にEOSを発生させず、代わりに失敗時に &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="e1b03b74797fecc452c176f514f8824e68c98aab" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#echo&quot;&gt;echo&lt;/a&gt;, but as a special semantic rule, &lt;code&gt;debugEcho&lt;/code&gt; pretends to be free of side effects, so that it can be used for debugging routines marked as &lt;a href=&quot;manual#pragmas-nosideeffect-pragma&quot;&gt;noSideEffect&lt;/a&gt;.</source>
          <target state="translated">同じ&lt;a href=&quot;#echo&quot;&gt;エコー&lt;/a&gt;が、特別な意味的なルールとして、 &lt;code&gt;debugEcho&lt;/code&gt; は、それは次のようにマークされたルーチンのデバッグのために使用することができるように、副作用の自由になりすまし&lt;a href=&quot;manual#pragmas-nosideeffect-pragma&quot;&gt;noSideEffectを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cae316e49719a5d17e05487f3a3446241878dbfe" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;find(s, c) &amp;gt;= 0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;find(s, c) &amp;gt;= 0&lt;/code&gt; 同じ。</target>
        </trans-unit>
        <trans-unit id="bf05772fddbca23f39278597cf0a88944814455e" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;find(s, chars) &amp;gt;= 0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;find(s, chars) &amp;gt;= 0&lt;/code&gt; 同じ。</target>
        </trans-unit>
        <trans-unit id="0eb638aeaaddd6236cffcef4fe0d42ea003eb3ae" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;find(s, sub) &amp;gt;= 0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;find(s, sub) &amp;gt;= 0&lt;/code&gt; 同じ。</target>
        </trans-unit>
        <trans-unit id="7e5b6c68d0c7209eed575cea11d1b7de870323a5" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;{@} E&lt;/code&gt;.</source>
          <target state="translated">同様 &lt;code&gt;{@} E&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a11726c63d0ec8978edea1c9e5f29146069a06bf" translate="yes" xml:space="preserve">
          <source>Same as &lt;em&gt;check&lt;/em&gt; except any failed test causes the program to quit immediately. Any teardown statements are not executed and the failed test output is not generated.</source>
          <target state="translated">失敗したテストによってプログラムがすぐに終了&lt;em&gt;すること&lt;/em&gt;を除いて、&lt;em&gt;checkと&lt;/em&gt;同じです。ティアダウンステートメントは実行されず、失敗したテスト出力は生成されません。</target>
        </trans-unit>
        <trans-unit id="83e89ee100776e6f9e2e9f157578409932b3f6d6" translate="yes" xml:space="preserve">
          <source>Same as &lt;em&gt;fastRows&lt;/em&gt;, but slower and safe.</source>
          <target state="translated">&lt;em&gt;fastRows&lt;/em&gt;と同じ&lt;em&gt;です&lt;/em&gt;が、低速で安全です。</target>
        </trans-unit>
        <trans-unit id="d362db7884b9b46c6a3d44434123c45de14ec1b4" translate="yes" xml:space="preserve">
          <source>Same as &lt;em&gt;gorge&lt;/em&gt; but also returns the precious exit code.</source>
          <target state="translated">&lt;em&gt;gorgeと&lt;/em&gt;同じですが、貴重な終了コードも返します。</target>
        </trans-unit>
        <trans-unit id="6d005bfbffa25fd3f6907fab064aef834fea6c07" translate="yes" xml:space="preserve">
          <source>Same as above but always 2 digits, 0 is prepended if the minute is one digit.</source>
          <target state="translated">上記と同じですが、常に2桁で、分が1桁の場合は0が前置されます。</target>
        </trans-unit>
        <trans-unit id="593a67af74ca60df1d753179f6579b368b8ecabb" translate="yes" xml:space="preserve">
          <source>Same as above but always two digits. 0 is prepended.</source>
          <target state="translated">上記と同じですが、常に2桁です。0が前に付きます。</target>
        </trans-unit>
        <trans-unit id="3b35c0e25910bfc8092243e72f3f5dfb338c8493" translate="yes" xml:space="preserve">
          <source>Same as above but with &lt;code&gt;:mm&lt;/code&gt; where &lt;em&gt;mm&lt;/em&gt; represents minutes.</source>
          <target state="translated">上記と同じですが、 &lt;code&gt;:mm&lt;/code&gt; を使用します&lt;em&gt;。mm&lt;/em&gt;は分を表します。</target>
        </trans-unit>
        <trans-unit id="1f7cdb4819cd49164b43b8e929c90565bd76edc7" translate="yes" xml:space="preserve">
          <source>Same as above but with &lt;code&gt;:ss&lt;/code&gt; where &lt;em&gt;ss&lt;/em&gt; represents seconds.</source>
          <target state="translated">上記と同じですが、 &lt;code&gt;:ss&lt;/code&gt; を使用します&lt;em&gt;。ss&lt;/em&gt;は秒を表します。</target>
        </trans-unit>
        <trans-unit id="0eb66618f40e3aa6b28e9256d96120d3b5c74faa" translate="yes" xml:space="preserve">
          <source>Same as above but with leading 0.</source>
          <target state="translated">上記と同じですが、先頭に0があります。</target>
        </trans-unit>
        <trans-unit id="b28cb2a32cff3b6aea860b63fc87b4c434b5eaa1" translate="yes" xml:space="preserve">
          <source>Same as above, but &lt;code&gt;AM&lt;/code&gt; and &lt;code&gt;PM&lt;/code&gt; instead of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;P&lt;/code&gt; respectively.</source>
          <target state="translated">上記と同じですが、 &lt;code&gt;A&lt;/code&gt; と &lt;code&gt;P&lt;/code&gt; の代わりに &lt;code&gt;AM&lt;/code&gt; と &lt;code&gt;PM&lt;/code&gt; をそれぞれ使用します。</target>
        </trans-unit>
        <trans-unit id="72f428ba17f954e3a8ef6db77883ac29a4a540a8" translate="yes" xml:space="preserve">
          <source>Same as above, but is always two digits.</source>
          <target state="translated">上記と同じですが、常に2桁です。</target>
        </trans-unit>
        <trans-unit id="8534970f50803862dcb810540900fc5227561718" translate="yes" xml:space="preserve">
          <source>Same as fastRows but returns a handle that can be used to get column text on demand using []. Returned handle is valid only within the interator body.</source>
          <target state="translated">fastRowsと同じですが、[]を使用して必要に応じて列のテキストを取得するために使用できるハンドルを返します。返されたハンドルは、インターレータ本体内でのみ有効です。</target>
        </trans-unit>
        <trans-unit id="7fa437f07e81a81aeb20918d589755aff3131279" translate="yes" xml:space="preserve">
          <source>Same as fastRows but returns a handle that can be used to get column text on demand using []. Returned handle is valid only within the iterator body.</source>
          <target state="translated">fastRowsと同じですが、[]を使用して必要に応じて列のテキストを取得するために使用できるハンドルを返します。返されたハンドルは、イテレータ本体内でのみ有効です。</target>
        </trans-unit>
        <trans-unit id="2dc9b3b1a8688d9fd2c653ab330f0b9b6c723b0f" translate="yes" xml:space="preserve">
          <source>Same as replace, but specialized for doing multiple replacements in a single pass through the input string.</source>
          <target state="translated">replace と同じですが、入力文字列を一度に複数の置換を行うことに特化しています。</target>
        </trans-unit>
        <trans-unit id="283e538395378eea3aaea570fed9ed227432c36f" translate="yes" xml:space="preserve">
          <source>Same for 8/16</source>
          <target state="translated">8/16も同じ</target>
        </trans-unit>
        <trans-unit id="f15fdec22b1531cc92e62430352ff3780009a8a0" translate="yes" xml:space="preserve">
          <source>Same for 8/16/32</source>
          <target state="translated">8/16/32も同じ</target>
        </trans-unit>
        <trans-unit id="f320568538fc06811c18160fdc21283612518e08" translate="yes" xml:space="preserve">
          <source>Save current exceptions in temporary storage, install environment represented by object pointed to by &lt;em&gt;envp&lt;/em&gt; and raise exceptions according to saved exceptions.</source>
          <target state="translated">現在の例外を一時記憶域に保存し、&lt;em&gt;envpが&lt;/em&gt;指すオブジェクトによって表される環境をインストールし、保存された例外に従って例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="22647c986d59ad784653050cc50abe50e6b37bcc" translate="yes" xml:space="preserve">
          <source>Save the current environment in the object pointed to by &lt;em&gt;envp&lt;/em&gt;, clear exception flags and install a non-stop mode (if available) for all exceptions.</source>
          <target state="translated">&lt;em&gt;envpが&lt;/em&gt;指すオブジェクトに現在の環境を保存し、例外フラグをクリアして、すべての例外に対して非停止モード（可能な場合）をインストールします。</target>
        </trans-unit>
        <trans-unit id="000fdec7b0fb4f7ca4d80b71370aa2bd7f253c32" translate="yes" xml:space="preserve">
          <source>Save this code to the file &quot;greetings.nim&quot;. Now compile and run it:</source>
          <target state="translated">このコードを &quot;greetings.nim&quot; ファイルに保存します。では、コンパイルして実行してみましょう。</target>
        </trans-unit>
        <trans-unit id="6ac82619ea882de68eeb0082674550708440d08a" translate="yes" xml:space="preserve">
          <source>Schedule coroutine for execution. It does not run immediately.</source>
          <target state="translated">coroutineを実行するようにスケジュールします。すぐには実行されません。</target>
        </trans-unit>
        <trans-unit id="cdfca4155826bc8e6ad3ef0a7d59e8759a6b9d52" translate="yes" xml:space="preserve">
          <source>Scope rules</source>
          <target state="translated">スコープルール</target>
        </trans-unit>
        <trans-unit id="ee3530f970ffbb5ec4559bc99680ad1143fac206" translate="yes" xml:space="preserve">
          <source>Scopes and the block statement</source>
          <target state="translated">スコープとブロック文</target>
        </trans-unit>
        <trans-unit id="00da56197fc812db9fff1bc8a7ea6c836a93112d" translate="yes" xml:space="preserve">
          <source>Search nnkFormalParams for an argument.</source>
          <target state="translated">nnkFormalParamsで引数を検索します。</target>
        </trans-unit>
        <trans-unit id="854e806638626e330301f049db3f54b2ddc27cc2" translate="yes" xml:space="preserve">
          <source>Search path handling</source>
          <target state="translated">検索パスの取り扱い</target>
        </trans-unit>
        <trans-unit id="8c453282de484c89be41cb7be79db2f5dcdb0814" translate="yes" xml:space="preserve">
          <source>Search paths modifications.</source>
          <target state="translated">検索パスの変更。</target>
        </trans-unit>
        <trans-unit id="3a19227f98a8795e53d16744d185b4399fa0b4fc" translate="yes" xml:space="preserve">
          <source>Search: Shorthand for &lt;code&gt;(!E .)* E&lt;/code&gt;. (Search loop for the pattern &lt;em&gt;E&lt;/em&gt;.)</source>
          <target state="translated">検索：の省略形 &lt;code&gt;(!E .)* E&lt;/code&gt; 。（パターン&lt;em&gt;Eの&lt;/em&gt;検索ループ。）</target>
        </trans-unit>
        <trans-unit id="3733c670253bc28d6353cb5edb694485bb0dd84e" translate="yes" xml:space="preserve">
          <source>Searches for &lt;em&gt;chars&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; in reverse starting at position &lt;em&gt;start&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;startの&lt;/em&gt;位置&lt;em&gt;から&lt;/em&gt;逆方向に&lt;em&gt;sの&lt;/em&gt;&lt;em&gt;文字&lt;/em&gt;を検索します。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="248865dbfaf519c83ddafb291c9cac33dc567f69" translate="yes" xml:space="preserve">
          <source>Searches for &lt;em&gt;chars&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; inside range &lt;em&gt;start&lt;/em&gt;..`last`. If &lt;em&gt;last&lt;/em&gt; is unspecified, it defaults to &lt;em&gt;s.high&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;開始&lt;/em&gt;範囲..`last` 内&lt;em&gt;のsの&lt;/em&gt;&lt;em&gt;文字&lt;/em&gt;を検索します。&lt;em&gt;last&lt;/em&gt;が指定されていない場合、デフォルトで&lt;em&gt;s.highになり&lt;/em&gt;ます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a4e227efca156bcedc3499c3c17e9a199325882d" translate="yes" xml:space="preserve">
          <source>Searches for &lt;em&gt;exe&lt;/em&gt; in the current working directory and then in directories listed in the &lt;code&gt;PATH&lt;/code&gt; environment variable. Returns &quot;&quot; if the &lt;em&gt;exe&lt;/em&gt; cannot be found. &lt;em&gt;exe&lt;/em&gt; is added the &lt;a href=&quot;#ExeExts&quot;&gt;ExeExts&lt;/a&gt; file extensions if it has none. If the system supports symlinks it also resolves them until it meets the actual file. This behavior can be disabled if desired.</source>
          <target state="translated">現在の作業ディレクトリで&lt;em&gt;exe&lt;/em&gt;を検索し、次に &lt;code&gt;PATH&lt;/code&gt; 環境変数にリストされているディレクトリを検索します。&lt;em&gt;exe&lt;/em&gt;が見つからない場合は &quot;&quot;を返します。&lt;em&gt;exe&lt;/em&gt;は、&lt;a href=&quot;#ExeExts&quot;&gt;ExeExts&lt;/a&gt;ファイル拡張子がない場合は追加されます。システムがシンボリックリンクをサポートしている場合は、実際のファイルと一致するまでシンボリックリンクを解決します。この動作は、必要に応じて無効にできます。</target>
        </trans-unit>
        <trans-unit id="93ebaf85930657208392c075ab454ea29ce19dfa" translate="yes" xml:space="preserve">
          <source>Searches for &lt;em&gt;sub&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; in reverse starting at position &lt;em&gt;start&lt;/em&gt;.</source>
          <target state="translated">検索&lt;em&gt;サブ&lt;/em&gt;内&lt;em&gt;の&lt;/em&gt;位置で逆開始で&lt;em&gt;開始&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="8c50eb3c068c74f518a2397edff50c4427849e1b" translate="yes" xml:space="preserve">
          <source>Searches for &lt;em&gt;sub&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; in reverse, starting at &lt;em&gt;start&lt;/em&gt; and going backwards to 0.</source>
          <target state="translated">検索し&lt;em&gt;、サブ&lt;/em&gt;で&lt;em&gt;の&lt;/em&gt;逆で、で始まる&lt;em&gt;開始&lt;/em&gt;し、0に後方に行きます。</target>
        </trans-unit>
        <trans-unit id="0f889e86cb19736912b36200c4d9fd28c03ccd26" translate="yes" xml:space="preserve">
          <source>Searches for &lt;em&gt;sub&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; inside range &lt;em&gt;start&lt;/em&gt;..`last` using preprocessed table &lt;em&gt;a&lt;/em&gt;. If &lt;em&gt;last&lt;/em&gt; is unspecified, it defaults to &lt;em&gt;s.high&lt;/em&gt;.</source>
          <target state="translated">検索&lt;em&gt;サブ&lt;/em&gt;における&lt;em&gt;Sの&lt;/em&gt;内部範囲&lt;em&gt;開始&lt;/em&gt;前処理テーブルの使用..`last` &lt;em&gt;Aを&lt;/em&gt;。&lt;em&gt;last&lt;/em&gt;が指定されていない場合、デフォルトで&lt;em&gt;s.highになり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="33c2559f7a5ed2aaa9aa78cb77d3567c110a4b8e" translate="yes" xml:space="preserve">
          <source>Searches for &lt;em&gt;sub&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; inside range &lt;em&gt;start&lt;/em&gt;..`last`. If &lt;em&gt;last&lt;/em&gt; is unspecified, it defaults to &lt;em&gt;s.high&lt;/em&gt;.</source>
          <target state="translated">検索&lt;em&gt;サブ&lt;/em&gt;における&lt;em&gt;Sの&lt;/em&gt;内部範囲&lt;em&gt;開始&lt;/em&gt; ..`last`。&lt;em&gt;last&lt;/em&gt;が指定されていない場合、デフォルトで&lt;em&gt;s.highになり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="8b89d3b0ce0511c851f99e886ac565d15df6abf5" translate="yes" xml:space="preserve">
          <source>Searches the database from the beginning and finds the first entry for which the port specified by &lt;code&gt;port&lt;/code&gt; matches the s_port member and the protocol name specified by &lt;code&gt;proto&lt;/code&gt; matches the s_proto member.</source>
          <target state="translated">データベースを最初から検索し、portで指定された &lt;code&gt;port&lt;/code&gt; がs_portメンバーと一致し、 &lt;code&gt;proto&lt;/code&gt; で指定されたプロトコル名がs_protoメンバーと一致する最初のエントリを見つけます。</target>
        </trans-unit>
        <trans-unit id="c449a0393c39301f6123d0a0e9a55389325e10b4" translate="yes" xml:space="preserve">
          <source>Searches the database from the beginning and finds the first entry for which the service name specified by &lt;code&gt;name&lt;/code&gt; matches the s_name member and the protocol name specified by &lt;code&gt;proto&lt;/code&gt; matches the s_proto member.</source>
          <target state="translated">検索開始と発見によって指定されたサービス名れる最初のエントリからデータベース &lt;code&gt;name&lt;/code&gt; s_name部材とによって指定されたプロトコル名と一致 &lt;code&gt;proto&lt;/code&gt; s_proto部材と一致します。</target>
        </trans-unit>
        <trans-unit id="b2a3b23da5776a04ee423e81be96f8e462fd4f27" translate="yes" xml:space="preserve">
          <source>Searching is case-sensitive. If &lt;em&gt;sub&lt;/em&gt; is not in &lt;em&gt;s&lt;/em&gt;, -1 is returned.</source>
          <target state="translated">検索では大文字と小文字が区別されます。&lt;em&gt;sub&lt;/em&gt;が&lt;em&gt;s&lt;/em&gt;にない場合、-1が返されます。</target>
        </trans-unit>
        <trans-unit id="c2ad72db173f245e5e0df92e9c460c77e51e6b33" translate="yes" xml:space="preserve">
          <source>Second, we cannot use the &lt;a href=&quot;system#readFile&quot;&gt;readFile proc&lt;/a&gt; from the &lt;a href=&quot;system&quot;&gt;system module&lt;/a&gt; due to FFI restriction at compile time. If we try to use this proc, or any other which depends on FFI, the compiler will error with the message &lt;code&gt;cannot evaluate&lt;/code&gt; and a dump of the macro's source code, along with a stack trace where the compiler reached before bailing out. We can get around this limitation by using the &lt;a href=&quot;system#slurp&quot;&gt;slurp proc&lt;/a&gt; from the &lt;a href=&quot;system&quot;&gt;system module&lt;/a&gt;, which was precisely made for compilation time (just like &lt;a href=&quot;system#gorge&quot;&gt;gorge&lt;/a&gt; which executes an external program and captures its output).</source>
          <target state="translated">次に、コンパイル時のFFI制限により、&lt;a href=&quot;system&quot;&gt;システムモジュールの&lt;/a&gt;&lt;a href=&quot;system#readFile&quot;&gt;readFileプロシージャを&lt;/a&gt;使用できません。このプロシージャまたはFFIに依存するその他のプロシージャを使用しようとすると、コンパイラはエラーを &lt;code&gt;cannot evaluate&lt;/code&gt; 、マクロのソースコードのダンプとともにエラーが発生します。コンパイル時に正確に作成された&lt;a href=&quot;system&quot;&gt;システムモジュールの&lt;/a&gt;&lt;a href=&quot;system#slurp&quot;&gt;slurp&lt;/a&gt;プロシージャを使用して、この制限を回避できます（外部プログラムを実行してその出力をキャプチャする&lt;a href=&quot;system#gorge&quot;&gt;gorgeの&lt;/a&gt;ように）。</target>
        </trans-unit>
        <trans-unit id="ce312d7beae7ab8d67d31a009e1edbe16821c39b" translate="yes" xml:space="preserve">
          <source>Seconds as one digit if possible.</source>
          <target state="translated">秒数は可能であれば1桁で表示されます。</target>
        </trans-unit>
        <trans-unit id="3973fce9cc10858049aacc6f93d928ceef21cfea" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#parsing-and-formatting-dates&quot;&gt;Parsing and formatting dates&lt;/a&gt; for documentation of the &lt;code&gt;f&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; 引数の説明については、&lt;a href=&quot;#parsing-and-formatting-dates&quot;&gt;日付の解析とフォーマットを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="007854703b2856873c5b75e5ccd07028741d9f88" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#parsing-and-formatting-dates&quot;&gt;Parsing and formatting dates&lt;/a&gt; for documentation of the &lt;code&gt;format&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 引数のドキュメントについては、&lt;a href=&quot;#parsing-and-formatting-dates&quot;&gt;日付の解析とフォーマットを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="079e35ad49364b7b959837d7b8c4075bad42046b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#types-varargs&quot;&gt;Varargs&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#types-varargs&quot;&gt;Varargsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8d7cec6c27750168d071981a308988f033dad082" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING&quot;&gt;http://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;http://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING&quot;&gt;http：//www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="026f00ed70b5ea1d33e3d0a7fe97e633ce8c314d" translate="yes" xml:space="preserve">
          <source>See &lt;em&gt;dumpTree&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;dumpTreeを&lt;/em&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2e84aded15a4dce7fa32ff9274352ce415d6c1a7" translate="yes" xml:space="preserve">
          <source>See also &lt;em&gt;getCustomPragmaVal&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;getCustomPragmaVal&lt;/em&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="397e58039ec924dd88eae423221c59ae4164ec76" translate="yes" xml:space="preserve">
          <source>See also &lt;em&gt;hasCustomPragma&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;hasCustomPragma&lt;/em&gt;も参照してください&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="158612fe403e9ded24807d705a5e535f24b55b64" translate="yes" xml:space="preserve">
          <source>See also &lt;em&gt;repr&lt;/em&gt;, &lt;em&gt;lispRepr&lt;/em&gt;, and &lt;em&gt;astGenRepr&lt;/em&gt;.</source>
          <target state="translated">参照&lt;em&gt;のrepr&lt;/em&gt;、&lt;em&gt;lispRepr&lt;/em&gt;、および&lt;em&gt;astGenReprを&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="1ec2854aa3891f1afbcabb78062c8a9bd4a052a2" translate="yes" xml:space="preserve">
          <source>See also &lt;em&gt;repr&lt;/em&gt;, &lt;em&gt;treeRepr&lt;/em&gt;, and &lt;em&gt;astGenRepr&lt;/em&gt;.</source>
          <target state="translated">参照&lt;em&gt;のrepr&lt;/em&gt;、&lt;em&gt;treeRepr&lt;/em&gt;、および&lt;em&gt;astGenReprを&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="597467af3eae67fa0e1bc983ecbd4275692c9f35" translate="yes" xml:space="preserve">
          <source>See also &lt;em&gt;repr&lt;/em&gt;, &lt;em&gt;treeRepr&lt;/em&gt;, and &lt;em&gt;lispRepr&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;repr&lt;/em&gt;、&lt;em&gt;treeRepr&lt;/em&gt;、および&lt;em&gt;lispRepr&lt;/em&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="1cd50ccb05e94d25f4e0618842ed1a7f8a06b947" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;apis&quot;&gt;API naming design&lt;/a&gt; document.</source>
          <target state="translated">&lt;a href=&quot;apis&quot;&gt;API命名設計&lt;/a&gt;ドキュメントも参照してください。</target>
        </trans-unit>
        <trans-unit id="843bda3db4712edbcd6b9df44e3a1feb2e04cf4f" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#templates-limitations-of-the-method-call-syntax&quot;&gt;Limitations of the method call syntax&lt;/a&gt;.</source>
          <target state="translated">参照：&lt;a href=&quot;#templates-limitations-of-the-method-call-syntax&quot;&gt;メソッド呼び出し構文の制限&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="134288782bb5bcfc11c246b2fe53ceb3bd016399" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;db_odbc&quot;&gt;db_odbc&lt;/a&gt;, &lt;a href=&quot;db_postgres&quot;&gt;db_postgres&lt;/a&gt;, &lt;a href=&quot;db_mysql&quot;&gt;db_mysql&lt;/a&gt;.</source>
          <target state="translated">参照：&lt;a href=&quot;db_odbc&quot;&gt;db_odbc&lt;/a&gt;、&lt;a href=&quot;db_postgres&quot;&gt;db_postgres&lt;/a&gt;、&lt;a href=&quot;db_mysql&quot;&gt;db_mysql&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b602f00227041e32bbea05ec9419db9ca3913e68" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;db_odbc&quot;&gt;db_odbc&lt;/a&gt;, &lt;a href=&quot;db_sqlite&quot;&gt;db_sqlite&lt;/a&gt;, &lt;a href=&quot;db_mysql&quot;&gt;db_mysql&lt;/a&gt;.</source>
          <target state="translated">参照：&lt;a href=&quot;db_odbc&quot;&gt;db_odbc&lt;/a&gt;、&lt;a href=&quot;db_sqlite&quot;&gt;db_sqlite&lt;/a&gt;、&lt;a href=&quot;db_mysql&quot;&gt;db_mysql&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="552c1373b853f1fdc119ba44224e31ffef581dcc" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;db_odbc&quot;&gt;db_odbc&lt;/a&gt;, &lt;a href=&quot;db_sqlite&quot;&gt;db_sqlite&lt;/a&gt;, &lt;a href=&quot;db_postgres&quot;&gt;db_postgres&lt;/a&gt;.</source>
          <target state="translated">参照：&lt;a href=&quot;db_odbc&quot;&gt;db_odbc&lt;/a&gt;、&lt;a href=&quot;db_sqlite&quot;&gt;db_sqlite&lt;/a&gt;、&lt;a href=&quot;db_postgres&quot;&gt;db_postgres&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dfbc3119399a1e39fc0881eab1af3e49a07506f2" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;db_postgres&quot;&gt;db_postgres&lt;/a&gt;, &lt;a href=&quot;db_sqlite&quot;&gt;db_sqlite&lt;/a&gt;, &lt;a href=&quot;db_mysql&quot;&gt;db_mysql&lt;/a&gt;.</source>
          <target state="translated">参照：&lt;a href=&quot;db_postgres&quot;&gt;db_postgres&lt;/a&gt;、&lt;a href=&quot;db_sqlite&quot;&gt;db_sqlite&lt;/a&gt;、&lt;a href=&quot;db_mysql&quot;&gt;db_mysql&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4a58566255fef7a43538068edfefb3c7c0ee78e5" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;https://en.wikipedia.org/wiki/Tz_database&quot;&gt;https://en.wikipedia.org/wiki/Tz_database&lt;/a&gt;</source>
          <target state="translated">参照：&lt;a href=&quot;https://en.wikipedia.org/wiki/Tz_database&quot;&gt;https&lt;/a&gt; : //en.wikipedia.org/wiki/Tz_database</target>
        </trans-unit>
        <trans-unit id="7210897998bd22d53a943b0d63318de4e68e08ab" translate="yes" xml:space="preserve">
          <source>See source switch</source>
          <target state="translated">ソーススイッチを参照</target>
        </trans-unit>
        <trans-unit id="9716956ee4c391a60ffca3d3606313d84f461c53" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;marshal&quot;&gt;marshal&lt;/a&gt; module for what this module allows you to do.</source>
          <target state="translated">このモジュールで何ができるかについては、&lt;a href=&quot;marshal&quot;&gt;marshal&lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="81b8d3c2c7da851f8357605755ae3101cf8fc78b" translate="yes" xml:space="preserve">
          <source>See the documentation of Nim's soft realtime &lt;a href=&quot;gc&quot;&gt;GC&lt;/a&gt; for further information.</source>
          <target state="translated">詳細については、Nimのソフトリアルタイム&lt;a href=&quot;gc&quot;&gt;GC&lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="387cfbde3ee86288c077827a6cc5c3f634db22fd" translate="yes" xml:space="preserve">
          <source>See top level documentation of this module about how &lt;code&gt;scanf&lt;/code&gt; works.</source>
          <target state="translated">&lt;code&gt;scanf&lt;/code&gt; の動作については、このモジュールの最上位のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b4985d545e511c0eae8a67fa27c39ad7147c0724" translate="yes" xml:space="preserve">
          <source>See top level documentation of this module about how &lt;code&gt;scanp&lt;/code&gt; works.</source>
          <target state="translated">&lt;code&gt;scanp&lt;/code&gt; の動作については、このモジュールの最上位のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f40b41a194a89e314ef14f7724b344a13e9f60fd" translate="yes" xml:space="preserve">
          <source>Selecting tests by pattern</source>
          <target state="translated">パターンによるテストの選択</target>
        </trans-unit>
        <trans-unit id="310483b902e72895f55c75452b18157642311c62" translate="yes" xml:space="preserve">
          <source>Semantically the same as &lt;code&gt;cmp(normalize($a), normalize($b))&lt;/code&gt;. It is just optimized to not allocate temporary strings. This should NOT be used to compare Nim identifier names. use &lt;em&gt;macros.eqIdent&lt;/em&gt; for that. Returns:</source>
          <target state="translated">意味的には &lt;code&gt;cmp(normalize($a), normalize($b))&lt;/code&gt; と同じです。一時的な文字列を割り当てないように最適化されています。これはNim識別子名の比較には使用しないでください。そのためには、&lt;em&gt;macros.eqIdent&lt;/em&gt;を使用します。戻り値：</target>
        </trans-unit>
        <trans-unit id="0c8a203644fa71ccfac204cf794cac43cb056bec" translate="yes" xml:space="preserve">
          <source>Semantically the same as &lt;code&gt;cmp(normalize(a), normalize(b))&lt;/code&gt;. It is just optimized to not allocate temporary strings. This should NOT be used to compare Nim identifier names. use &lt;em&gt;macros.eqIdent&lt;/em&gt; for that. Returns:</source>
          <target state="translated">意味的には &lt;code&gt;cmp(normalize(a), normalize(b))&lt;/code&gt; と同じです。一時的な文字列を割り当てないように最適化されています。これはNim識別子名の比較には使用しないでください。そのためには、&lt;em&gt;macros.eqIdent&lt;/em&gt;を使用します。戻り値：</target>
        </trans-unit>
        <trans-unit id="35ee868f8885d37a97939546d68b678aa3fda4f4" translate="yes" xml:space="preserve">
          <source>Semantically this is the same as &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">意味的にこれは &lt;code&gt;pred&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="6de77ffd37607ff9518c4f9e8e5386cd009439b2" translate="yes" xml:space="preserve">
          <source>Semantically very similar to &lt;em&gt;info&lt;/em&gt;, but meant to be messages you want to be actively notified about (depending on your application). These could be, for example, grouped by hour and mailed out.</source>
          <target state="translated">意味的には&lt;em&gt;info&lt;/em&gt;に非常に似ていますが、積極的に通知されたいメッセージを意味します（アプリケーションによって異なります）。これらは、たとえば、時間単位でグループ化してメールで送信できます。</target>
        </trans-unit>
        <trans-unit id="170573f174a216ca03d9ab682d5f2a88dc2b1d9e" translate="yes" xml:space="preserve">
          <source>Send a message to the server, and wait for a primary reply. &lt;code&gt;\c\L&lt;/code&gt; is added for you.</source>
          <target state="translated">サーバーにメッセージを送信し、一次応答を待ちます。 &lt;code&gt;\c\L&lt;/code&gt; が追加されます。</target>
        </trans-unit>
        <trans-unit id="63217fdf9c05113069261bfb7f82b228cd9313a7" translate="yes" xml:space="preserve">
          <source>Sends &lt;code&gt;data&lt;/code&gt; to &lt;code&gt;socket&lt;/code&gt;. The returned future will complete once all data has been sent.</source>
          <target state="translated">送信し &lt;code&gt;data&lt;/code&gt; する &lt;code&gt;socket&lt;/code&gt; 。返されたフューチャーは、すべてのデータが送信されると完了します。</target>
        </trans-unit>
        <trans-unit id="808586c92c7155d7aa45db302e4d798013a29d17" translate="yes" xml:space="preserve">
          <source>Sends &lt;code&gt;data&lt;/code&gt; to socket &lt;code&gt;sock&lt;/code&gt;. This is basically a nicer implementation of &lt;code&gt;sockets.sendAsync&lt;/code&gt;.</source>
          <target state="translated">送信 &lt;code&gt;data&lt;/code&gt; ソケットに &lt;code&gt;sock&lt;/code&gt; 。これは基本的に、 &lt;code&gt;sockets.sendAsync&lt;/code&gt; のより優れた実装です。</target>
        </trans-unit>
        <trans-unit id="0f44cbe7038e29ec39697e4aee0dac9b82e51886" translate="yes" xml:space="preserve">
          <source>Sends &lt;code&gt;data&lt;/code&gt; to specified destination &lt;code&gt;saddr&lt;/code&gt;, using socket &lt;code&gt;socket&lt;/code&gt;. The returned future will complete once all data has been sent.</source>
          <target state="translated">送信 &lt;code&gt;data&lt;/code&gt; 指定された宛先に &lt;code&gt;saddr&lt;/code&gt; ソケット使用して、 &lt;code&gt;socket&lt;/code&gt; 。返されたフューチャーは、すべてのデータが送信されると完了します。</target>
        </trans-unit>
        <trans-unit id="a182e14ae39a6a6ff86eecf3bc70c0b36c727808" translate="yes" xml:space="preserve">
          <source>Sends &lt;code&gt;msg&lt;/code&gt; from &lt;code&gt;fromAddr&lt;/code&gt; to the addresses specified in &lt;code&gt;toAddrs&lt;/code&gt;. Messages may be formed using &lt;code&gt;createMessage&lt;/code&gt; by converting the Message into a string.</source>
          <target state="translated">送信 &lt;code&gt;msg&lt;/code&gt; から &lt;code&gt;fromAddr&lt;/code&gt; をで指定されたアドレスに &lt;code&gt;toAddrs&lt;/code&gt; 。メッセージは、メッセージを文字列に変換することにより、 &lt;code&gt;createMessage&lt;/code&gt; を使用して形成できます。</target>
        </trans-unit>
        <trans-unit id="e5a27dce3f2a133605f9afba21dbcbe87d7d9e13" translate="yes" xml:space="preserve">
          <source>Sends &lt;code&gt;size&lt;/code&gt; bytes from &lt;code&gt;buf&lt;/code&gt; to &lt;code&gt;socket&lt;/code&gt;. The returned future will complete once all data has been sent.</source>
          <target state="translated">送信 &lt;code&gt;size&lt;/code&gt; からバイトを &lt;code&gt;buf&lt;/code&gt; に &lt;code&gt;socket&lt;/code&gt; 。返されたフューチャーは、すべてのデータが送信されると完了します。</target>
        </trans-unit>
        <trans-unit id="25ffc10d9cb8e1ef8e3b0a351837cdbdd813d092" translate="yes" xml:space="preserve">
          <source>Sends an AUTH command to the server to login as the &lt;em&gt;username&lt;/em&gt; using &lt;em&gt;password&lt;/em&gt;. May fail with ReplyError.</source>
          <target state="translated">AUTHコマンドをサーバーに送信し、&lt;em&gt;パスワード&lt;/em&gt;を使用して&lt;em&gt;ユーザー名&lt;/em&gt;としてログインし&lt;em&gt;ます&lt;/em&gt;。ReplyErrorで失敗する場合があります。</target>
        </trans-unit>
        <trans-unit id="5ec0a390eca744b4e21d1c9faa664e07afa13bdd" translate="yes" xml:space="preserve">
          <source>Sends data to a socket.</source>
          <target state="translated">データをソケットに送信します。</target>
        </trans-unit>
        <trans-unit id="33ad671989ea5eac38ff7d3c0f12e1c1f50e5df6" translate="yes" xml:space="preserve">
          <source>Sends the specified headers to the requesting client.</source>
          <target state="translated">指定されたヘッダを要求元のクライアントに送信します。</target>
        </trans-unit>
        <trans-unit id="3074a16babd576481f6d30b0f45e8d125986e54b" translate="yes" xml:space="preserve">
          <source>Sequence variables are initialized with &lt;code&gt;@[]&lt;/code&gt;.</source>
          <target state="translated">シーケンス変数は &lt;code&gt;@[]&lt;/code&gt; 初期化されます。</target>
        </trans-unit>
        <trans-unit id="88178136525c6478718f7b2fc55007e115123eaa" translate="yes" xml:space="preserve">
          <source>Sequence: Apply expressions &lt;em&gt;A&lt;/em&gt;, ..., &lt;em&gt;Z&lt;/em&gt;, in this order, to consume consecutive portions of the text ahead, as long as they succeed. Indicate success if all succeeded. Otherwise do not consume any text and indicate failure. The sequence's precedence is higher than that of ordered choice: &lt;code&gt;A B / C&lt;/code&gt; means &lt;code&gt;(A B) / Z&lt;/code&gt; and not &lt;code&gt;A (B / Z)&lt;/code&gt;.</source>
          <target state="translated">シーケンス：式&lt;em&gt;A&lt;/em&gt;、...、&lt;em&gt;Z&lt;/em&gt;をこの順序で適用して、成功する限り、テキストの連続部分を先に消費します。すべて成功した場合は、成功を示します。それ以外の場合は、テキストを使用せず、失敗を示します。シーケンスの優先順位は、順序付けされた選択の優先順位よりも高くなります &lt;code&gt;A B / C&lt;/code&gt; は &lt;code&gt;(A B) / Z&lt;/code&gt; を意味し、 &lt;code&gt;A (B / Z)&lt;/code&gt; ありません。</target>
        </trans-unit>
        <trans-unit id="b5fb636023abb67d347041d398442118f79ea091" translate="yes" xml:space="preserve">
          <source>Sequences</source>
          <target state="translated">Sequences</target>
        </trans-unit>
        <trans-unit id="0bc1ddda48aa18861bbd55aff84f335ccf39403e" translate="yes" xml:space="preserve">
          <source>Sequences and strings are implemented as pointers to resizeable buffers, but Nim requires copying for assignments. Apart from RTTI the compiler could generate copy procedures for any type that needs one. However, this would make the code bigger and the RTTI is likely already there for the GC.</source>
          <target state="translated">シーケンスと文字列はリサイズ可能なバッファへのポインタとして実装されていますが、Nimでは代入のためにコピーが必要です。RTTIとは別に、コンパイラはコピープロシージャを必要とする任意の型のためのコピープロシージャを生成することができます。しかし、これはコードを大きくしてしまい、RTTIはGCのためにすでに存在している可能性が高いです。</target>
        </trans-unit>
        <trans-unit id="5a52dd463d27a8ba5f3355a484a83258d1f51219" translate="yes" xml:space="preserve">
          <source>Sequences are always indexed with an &lt;code&gt;int&lt;/code&gt; starting at position 0. The &lt;a href=&quot;system#len,seq%5BT%5D&quot;&gt;len&lt;/a&gt;, &lt;a href=&quot;system#low&quot;&gt;low&lt;/a&gt; and &lt;a href=&quot;system#high&quot;&gt;high&lt;/a&gt; operations are available for sequences too. The notation &lt;code&gt;x[i]&lt;/code&gt; can be used to access the i-th element of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">シーケンスは常に位置0から始まる &lt;code&gt;int&lt;/code&gt; でインデックス付けされます。シーケンスには、&lt;a href=&quot;system#len,seq%5BT%5D&quot;&gt;len&lt;/a&gt;、&lt;a href=&quot;system#low&quot;&gt;low&lt;/a&gt;および&lt;a href=&quot;system#high&quot;&gt;highの&lt;/a&gt;操作も使用できます。表記 &lt;code&gt;x[i]&lt;/code&gt; を使用して、 &lt;code&gt;x&lt;/code&gt; の i番目の要素にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="d57a688b0804db680b53148991bfaf47d165ac64" translate="yes" xml:space="preserve">
          <source>Sequences are similar to arrays but of dynamic length which may change during runtime (like strings). Sequences are implemented as growable arrays, allocating pieces of memory as items are added. A sequence &lt;code&gt;S&lt;/code&gt; is always indexed by integers from 0 to &lt;code&gt;len(S)-1&lt;/code&gt; and its bounds are checked. Sequences can be constructed by the array constructor &lt;code&gt;[]&lt;/code&gt; in conjunction with the array to sequence operator &lt;code&gt;@&lt;/code&gt;. Another way to allocate space for a sequence is to call the built-in &lt;code&gt;newSeq&lt;/code&gt; procedure.</source>
          <target state="translated">シーケンスは配列に似ていますが、（文字列のように）実行中に変更される可能性のある動的な長さです。シーケンスは拡張可能な配列として実装され、項目が追加されるとメモリの一部を割り当てます。シーケンス &lt;code&gt;S&lt;/code&gt; は常に0から &lt;code&gt;len(S)-1&lt;/code&gt; までの整数でインデックスが付けられ、その境界がチェックされます。シーケンスは、配列コンストラクター &lt;code&gt;[]&lt;/code&gt; と配列から配列への演算子 &lt;code&gt;@&lt;/code&gt; を組み合わせて作成できます。シーケンスにスペースを割り当てる別の方法は、組み込みの &lt;code&gt;newSeq&lt;/code&gt; プロシージャを呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="f4caee0ce61eb9f9010da8278c6bb9819fd97bcc" translate="yes" xml:space="preserve">
          <source>Sequences are similar to arrays but of dynamic length which may change during runtime (like strings). Since sequences are resizable they are always allocated on the heap and garbage collected.</source>
          <target state="translated">シーケンスは配列に似ていますが、動的な長さで、実行時に変更される可能性があります(文字列のように)。シーケンスはリサイズ可能なので、常にヒープに割り当てられ、ガベージコレクションされます。</target>
        </trans-unit>
        <trans-unit id="de40162a10ac517da4c83478490320d176010324" translate="yes" xml:space="preserve">
          <source>Sequences can be constructed by the array constructor &lt;code&gt;[]&lt;/code&gt; in conjunction with the array to sequence operator &lt;code&gt;@&lt;/code&gt;. Another way to allocate space for a sequence is to call the built-in &lt;a href=&quot;system#newSeq&quot;&gt;newSeq&lt;/a&gt; procedure.</source>
          <target state="translated">シーケンスは、配列コンストラクター &lt;code&gt;[]&lt;/code&gt; と配列から配列への演算子 &lt;code&gt;@&lt;/code&gt; を組み合わせて作成できます。シーケンスにスペースを割り当てる別の方法は、組み込みの&lt;a href=&quot;system#newSeq&quot;&gt;newSeq&lt;/a&gt;プロシージャを呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="382013311d593d4fc5f3d775cc83027690f80d35" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;oneshot&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; if you want periodic notifications.</source>
          <target state="translated">定期的な通知が必要な場合は、 &lt;code&gt;oneshot&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="ac3b3dbadd2d80926e6b2ef30c5d46cd3af98beb" translate="yes" xml:space="preserve">
          <source>Set PSK identity hint to use.</source>
          <target state="translated">使用するPSK identity hintを設定します。</target>
        </trans-unit>
        <trans-unit id="fca3a3f78708e6e8ef0a5fc9e87f9955562e0cf8" translate="yes" xml:space="preserve">
          <source>Set a checkpoint identified by &lt;em&gt;msg&lt;/em&gt;. Upon test failure all checkpoints encountered so far are printed out. Example:</source>
          <target state="translated">&lt;em&gt;msgで&lt;/em&gt;識別されるチェックポイントを設定します。テストが失敗すると、これまでに発生したすべてのチェックポイントが出力されます。例：</target>
        </trans-unit>
        <trans-unit id="bea824346555421d7b4f79726afe2253b1cb518f" translate="yes" xml:space="preserve">
          <source>Set a file length.</source>
          <target state="translated">ファイルの長さを設定します。</target>
        </trans-unit>
        <trans-unit id="abb4da8f53976c10c6722300fc689b2d215c41e5" translate="yes" xml:space="preserve">
          <source>Set callback called when OpenSSL needs PSK (for client).</source>
          <target state="translated">OpenSSL が PSK を必要とするときに呼び出されるコールバックを設定します (クライアント用)。</target>
        </trans-unit>
        <trans-unit id="18edc59e062af37dea81ac6e186b07fd669cf629" translate="yes" xml:space="preserve">
          <source>Set callback called when OpenSSL needs PSK (for server).</source>
          <target state="translated">OpenSSL が PSK を必要とするときに呼び出されるコールバックを設定します(サーバ用)。</target>
        </trans-unit>
        <trans-unit id="2eb3a86185513109bd4d845afe43667d09e37d7b" translate="yes" xml:space="preserve">
          <source>Set complete status for exceptions indicated by &lt;em&gt;excepts&lt;/em&gt; according to the representation in the object pointed to by &lt;em&gt;flagp&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;flagpが&lt;/em&gt;指すオブジェクトの表現に従って、&lt;em&gt;exceptsが&lt;/em&gt;示す例外の完全なステータスを設定します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="33ac2bcee80b5462c33e07494b4201714806558a" translate="yes" xml:space="preserve">
          <source>Set event &lt;code&gt;ev&lt;/code&gt; to signaled state.</source>
          <target state="translated">イベント &lt;code&gt;ev&lt;/code&gt; をシグナル状態に設定します。</target>
        </trans-unit>
        <trans-unit id="caab561e9360f5b03bbaa05a1412b0e6faa1a2d3" translate="yes" xml:space="preserve">
          <source>Set the SNI server name extension to be used in a client hello. Returns 1 if SNI was set, 0 if current SSL configuration doesn't support SNI.</source>
          <target state="translated">クライアントの hello で使用する SNI サーバー名の拡張子を設定します。SNI が設定されている場合は 1 を、現在の SSL 設定が SNI をサポートしていない場合は 0 を返します。</target>
        </trans-unit>
        <trans-unit id="ec2788dcf8be591ed6a7f6e6a23a5f17199035e0" translate="yes" xml:space="preserve">
          <source>Set the appropriate bit in the page descriptor indicating that the cell points to the start of a memory block.</source>
          <target state="translated">セルがメモリブロックの開始点を指していることを示すページディスクリプタの適切なビットを設定します。</target>
        </trans-unit>
        <trans-unit id="be778905c0bc766264b1775d017b7217e1afea98" translate="yes" xml:space="preserve">
          <source>Set the callback to be used on listening SSL connections when the client hello is received.</source>
          <target state="translated">クライアントのhelloを受信したときに、SSL接続のリスニングで使用されるコールバックを設定します。</target>
        </trans-unit>
        <trans-unit id="300fa407b8a8eb2c9e1e0d5cce10b34f6a8aba60" translate="yes" xml:space="preserve">
          <source>Set the pointer to be used in the callback registered to &lt;code&gt;SSL_CTX_set_tlsext_servername_callback&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SSL_CTX_set_tlsext_servername_callback&lt;/code&gt; に登録されているコールバックで使用するポインタを設定します。</target>
        </trans-unit>
        <trans-unit id="facaeed5def5c1ec0d1296bc94bea17d9d9a94e4" translate="yes" xml:space="preserve">
          <source>Set the pragma of a proc type</source>
          <target state="translated">proc型のプラグマを設定します。</target>
        </trans-unit>
        <trans-unit id="d39aea59047168d929f9e5b4e91f67157f32e9e7" translate="yes" xml:space="preserve">
          <source>Set the value of a property of name &lt;em&gt;field&lt;/em&gt; in a JsAssoc &lt;em&gt;obj&lt;/em&gt; to &lt;em&gt;v&lt;/em&gt;.</source>
          <target state="translated">JsAssoc &lt;em&gt;objの&lt;/em&gt;名前&lt;em&gt;フィールドの&lt;/em&gt;プロパティの値を&lt;em&gt;vに設定し&lt;/em&gt;ます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3db21d69f3f8485742c0994bd2b4a1ac360b9852" translate="yes" xml:space="preserve">
          <source>Set the value of a property of name &lt;em&gt;field&lt;/em&gt; in a JsObject &lt;em&gt;obj&lt;/em&gt; to &lt;em&gt;v&lt;/em&gt;.</source>
          <target state="translated">JsObject &lt;em&gt;objの&lt;/em&gt;名前&lt;em&gt;フィールドの&lt;/em&gt;プロパティの値を&lt;em&gt;vに設定し&lt;/em&gt;ます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cc77a1d3da71ce9d8ef7a90a239ccce2678cbecf" translate="yes" xml:space="preserve">
          <source>Set to true in order to quit immediately on fail. Default is false, unless the &lt;code&gt;NIMTEST_ABORT_ON_ERROR&lt;/code&gt; environment variable is set for the non-js target.</source>
          <target state="translated">失敗時にすぐに終了するには、trueに設定します。非 &lt;code&gt;NIMTEST_ABORT_ON_ERROR&lt;/code&gt; 環境変数が設定されていない限り、デフォルトはfalse です。</target>
        </trans-unit>
        <trans-unit id="6ba8a4e35c2ca993f0910108377e4d4052112de4" translate="yes" xml:space="preserve">
          <source>Set type</source>
          <target state="translated">セットタイプ</target>
        </trans-unit>
        <trans-unit id="2ab262f44dfc9e1ee8adf98c1aa64de34434fa83" translate="yes" xml:space="preserve">
          <source>Sets</source>
          <target state="translated">Sets</target>
        </trans-unit>
        <trans-unit id="2b58a2dc522a6a8ba321f78fee1a6c388a06c415" translate="yes" xml:space="preserve">
          <source>Sets a callback on &lt;code&gt;future&lt;/code&gt; which raises an exception if the future finished with an error.</source>
          <target state="translated">futureがエラーで終了した場合に例外を発生させる &lt;code&gt;future&lt;/code&gt; にコールバックを設定します。</target>
        </trans-unit>
        <trans-unit id="d46a344c3d7a8738543b24b1f6ba63ae6f78fe53" translate="yes" xml:space="preserve">
          <source>Sets a cookie.</source>
          <target state="translated">クッキーを設定します。</target>
        </trans-unit>
        <trans-unit id="7e9befb4cdae1e6823e43dc2c6ff05a4d14679a4" translate="yes" xml:space="preserve">
          <source>Sets a field from a &lt;em&gt;JObject&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;JObject&lt;/em&gt;からフィールドを設定します。</target>
        </trans-unit>
        <trans-unit id="ec9850c80890ceba2abbf806a1f610eb26626643" translate="yes" xml:space="preserve">
          <source>Sets an assertion failure handler that will intercept any assert statements following &lt;em&gt;onFailedAssert&lt;/em&gt; in the current module scope.</source>
          <target state="translated">現在のモジュールスコープで&lt;em&gt;onFailedAssert&lt;/em&gt;に続くアサートステートメントをインターセプトするアサーションエラーハンドラーを設定します。</target>
        </trans-unit>
        <trans-unit id="c2d72ef2dff8a1ecfc77b14fb5fb6845b0292abd" translate="yes" xml:space="preserve">
          <source>Sets are often used to define a type for the &lt;em&gt;flags&lt;/em&gt; of a procedure. This is a much cleaner (and type safe) solution than just defining integer constants that should be &lt;code&gt;or&lt;/code&gt;'ed together.</source>
          <target state="translated">セットは、プロシージャの&lt;em&gt;フラグ&lt;/em&gt;のタイプを定義するためによく使用されます。これは、一緒に &lt;code&gt;or&lt;/code&gt; 'でまとめる必要がある整数定数を定義するよりもはるかにクリーンな（そしてタイプセーフな）ソリューションです。</target>
        </trans-unit>
        <trans-unit id="b1196a7636e138500281b6029122d47c3358474c" translate="yes" xml:space="preserve">
          <source>Sets blocking mode on socket</source>
          <target state="translated">ソケットのブロッキングモードを設定する</target>
        </trans-unit>
        <trans-unit id="5a2f39b3a6fa12685dce4cec4aebd5a5a8e594a6" translate="yes" xml:space="preserve">
          <source>Sets blocking mode on socket.</source>
          <target state="translated">ソケットのブロッキングモードを設定します。</target>
        </trans-unit>
        <trans-unit id="13d87b8c2a64eaf422ebe52b694323f1b95af950" translate="yes" xml:space="preserve">
          <source>Sets can be constructed via the set constructor: &lt;code&gt;{}&lt;/code&gt; is the empty set. The empty set is type compatible with any concrete set type. The constructor can also be used to include elements (and ranges of elements):</source>
          <target state="translated">セットは、セットコンストラクタを介して構築できます。 &lt;code&gt;{}&lt;/code&gt; は空のセットです。空のセットは、どの具象セットタイプとも互換性のあるタイプです。コンストラクターを使用して、要素（および要素の範囲）を含めることもできます。</target>
        </trans-unit>
        <trans-unit id="5c70ba56414b5c4f667e41bd0273c23bf52416e2" translate="yes" xml:space="preserve">
          <source>Sets file access and modification times.</source>
          <target state="translated">ファイルのアクセス時間と変更時間を設定します。</target>
        </trans-unit>
        <trans-unit id="7c204196126cdd879acd680d24d30aaf38839f0b" translate="yes" xml:space="preserve">
          <source>Sets function that returns PSK based on the client identity.</source>
          <target state="translated">クライアントIDに基づいてPSKを返す関数を設定します。</target>
        </trans-unit>
        <trans-unit id="100097d058008ef76ad407d5cedae724ee7a4479" translate="yes" xml:space="preserve">
          <source>Sets function that returns the client identity and the PSK based on identity hint from the server.</source>
          <target state="translated">サーバからのアイデンティティヒントに基づいて、クライアントのアイデンティティとPSKを返す関数を設定します。</target>
        </trans-unit>
        <trans-unit id="593b179784d31587e9e35012a25f04eecb3bc779" translate="yes" xml:space="preserve">
          <source>Sets in object variants are not supported.</source>
          <target state="translated">オブジェクトバリアントのセットはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="dabb4963a555ba7124e0874b5417cee4a3363cf2" translate="yes" xml:space="preserve">
          <source>Sets option &lt;code&gt;opt&lt;/code&gt; to a boolean value specified by &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">セットオプション &lt;code&gt;opt&lt;/code&gt; で指定されたboolean値に &lt;code&gt;value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f9b2940d72b32b640ab2b037c4f1cddaddf0cde2" translate="yes" xml:space="preserve">
          <source>Sets the &lt;em&gt;file&lt;/em&gt;'s last modification time. &lt;em&gt;OSError&lt;/em&gt; is raised in case of an error.</source>
          <target state="translated">&lt;em&gt;ファイル&lt;/em&gt;の最終変更時刻を設定し&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;エラー&lt;/em&gt;が発生した場合、&lt;em&gt;OSError&lt;/em&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="b83f8f862eba6356a93ce6941ee575f1de05800f" translate="yes" xml:space="preserve">
          <source>Sets the &lt;span id=&quot;current-working-directory_2&quot;&gt;current working directory&lt;/span&gt;; &lt;em&gt;OSError&lt;/em&gt; is raised if &lt;em&gt;newDir&lt;/em&gt; cannot been set.</source>
          <target state="translated">&lt;span id=&quot;current-working-directory_2&quot;&gt;現在の作業ディレクトリを&lt;/span&gt;設定します。&lt;em&gt;OSErrorのが&lt;/em&gt;あれば上げて&lt;em&gt;NEWDIRが&lt;/em&gt;設定されていないことができます。</target>
        </trans-unit>
        <trans-unit id="37f5e53f3803952f681635d49b1492116ff1a455" translate="yes" xml:space="preserve">
          <source>Sets the Key value of the specified Section.</source>
          <target state="translated">指定されたセクションのキー値を設定します。</target>
        </trans-unit>
        <trans-unit id="a8e8f8486f8b126f04c244b5acc79c545422b032" translate="yes" xml:space="preserve">
          <source>Sets the callback proc to be called when data was placed inside the future stream.</source>
          <target state="translated">データがフューチャースリーム内に配置されたときに呼び出されるコールバック処理を設定します。</target>
        </trans-unit>
        <trans-unit id="dfd402f8b29e8041ffa26bd2e46cfccf9560e819" translate="yes" xml:space="preserve">
          <source>Sets the callback proc to be called when the future completes.</source>
          <target state="translated">未来が完了したときに呼び出されるコールバックプロックを設定します。</target>
        </trans-unit>
        <trans-unit id="2bd9d81344500b645186c4c243c4d7737df7028e" translate="yes" xml:space="preserve">
          <source>Sets the encoding of a database connection, returns true for success, false for failure. result = set_character_set(connection, encoding) == 0</source>
          <target state="translated">データベース接続のエンコーディングを設定し、成功した場合はtrue、失敗した場合はfalseを返します。</target>
        </trans-unit>
        <trans-unit id="9a160c5f28384ff8d9cb2001fe120c533b9f14fa" translate="yes" xml:space="preserve">
          <source>Sets the global log filter.</source>
          <target state="translated">グローバルログフィルタを設定します。</target>
        </trans-unit>
        <trans-unit id="0767527cb84f2c78c768c161ec01249708d5c674" translate="yes" xml:space="preserve">
          <source>Sets the header entries associated with &lt;code&gt;key&lt;/code&gt; to the specified list of values. Replaces any existing values.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; に関連付けられたヘッダーエントリを、指定された値のリストに設定します。既存の値を置き換えます。</target>
        </trans-unit>
        <trans-unit id="30775b9da4f687e49b7ce056c05167e372e5d957" translate="yes" xml:space="preserve">
          <source>Sets the header entries associated with &lt;code&gt;key&lt;/code&gt; to the specified value. Replaces any existing values.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; に関連付けられたヘッダーエントリを指定された値に設定します。既存の値を置き換えます。</target>
        </trans-unit>
        <trans-unit id="9d7d565e294c74c7f76daa93a38c7d68240d9e2d" translate="yes" xml:space="preserve">
          <source>Sets the identity hint passed to server.</source>
          <target state="translated">サーバーに渡される ID ヒントを設定します。</target>
        </trans-unit>
        <trans-unit id="cde44825811fc9045b3cdcbd8dc04231770b2041" translate="yes" xml:space="preserve">
          <source>Sets the position of the file pointer that is used for read/write operations. The file's first byte has the index zero.</source>
          <target state="translated">読み書き操作に使用するファイルポインタの位置を設定します。ファイルの最初のバイトのインデックスはゼロです。</target>
        </trans-unit>
        <trans-unit id="8fa087f6ec74e4f8bac3289c0ce3118bb4dac0ff" translate="yes" xml:space="preserve">
          <source>Sets the terminal style.</source>
          <target state="translated">ターミナルのスタイルを設定します。</target>
        </trans-unit>
        <trans-unit id="e624588f393759507f3613c629e6df9eaa251266" translate="yes" xml:space="preserve">
          <source>Sets the terminal's background color.</source>
          <target state="translated">端末の背景色を設定します。</target>
        </trans-unit>
        <trans-unit id="ba839ae8690b617da587c686a5f041a1f15dd58c" translate="yes" xml:space="preserve">
          <source>Sets the terminal's background true color.</source>
          <target state="translated">端末の背景色を設定します。</target>
        </trans-unit>
        <trans-unit id="692d91dc53c987f088c17432a09d05df33286dc2" translate="yes" xml:space="preserve">
          <source>Sets the terminal's cursor to the (x,y) position. (0,0) is the upper left of the screen.</source>
          <target state="translated">端末のカーソルを(x,y)の位置に設定します。(0,0)は画面の左上になります。</target>
        </trans-unit>
        <trans-unit id="3a93a60c09c9561641755272688e52a0376880fe" translate="yes" xml:space="preserve">
          <source>Sets the terminal's cursor to the x position. The y position is not changed.</source>
          <target state="translated">端末のカーソルを x 位置に設定します。y 位置は変更されません。</target>
        </trans-unit>
        <trans-unit id="4b5b2e99977b2a5492673f05761bcdb029825663" translate="yes" xml:space="preserve">
          <source>Sets the terminal's cursor to the y position. The x position is not changed. &lt;strong&gt;Warning&lt;/strong&gt;: This is not supported on UNIX!</source>
          <target state="translated">端末のカーソルをy位置に設定します。x位置は変更されません。&lt;strong&gt;警告&lt;/strong&gt;：これはUNIXではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="33d6e610d0a3c1c7ea14e8ff71649b85e0821381" translate="yes" xml:space="preserve">
          <source>Sets the terminal's foreground color.</source>
          <target state="translated">端末の前景色を設定します。</target>
        </trans-unit>
        <trans-unit id="2b7fb45a7a27531e9ca1ac031875d00590ed7793" translate="yes" xml:space="preserve">
          <source>Sets the terminal's foreground true color.</source>
          <target state="translated">端末の前景色の色を設定します。</target>
        </trans-unit>
        <trans-unit id="58b128f1f1dfd81080ace41d9a53a79e98c77e32" translate="yes" xml:space="preserve">
          <source>Setter for backward compatibility.</source>
          <target state="translated">下位互換性のためのセッター。</target>
        </trans-unit>
        <trans-unit id="2409ea624ba698b2734c243a9f2d2956dda21e7e" translate="yes" xml:space="preserve">
          <source>Setter for the &lt;code&gt;handleWrite&lt;/code&gt; event.</source>
          <target state="translated">&lt;code&gt;handleWrite&lt;/code&gt; イベントのセッター。</target>
        </trans-unit>
        <trans-unit id="7655e5151bc276acbf89d38beaab125af1057fee" translate="yes" xml:space="preserve">
          <source>Setup code to be executed when Unix signals are received. The currently handled signal is injected as &lt;code&gt;sig&lt;/code&gt; into the calling scope.</source>
          <target state="translated">Unixシグナルを受信したときに実行されるセットアップコード。現在処理されているシグナルは、 &lt;code&gt;sig&lt;/code&gt; として呼び出しスコープに挿入されます。</target>
        </trans-unit>
        <trans-unit id="4438d5cf2b81bdd383ce9074e1f2ffceafc43c3c" translate="yes" xml:space="preserve">
          <source>ShadowIdent</source>
          <target state="translated">ShadowIdent</target>
        </trans-unit>
        <trans-unit id="b9aac6edcd9fccee278d1d720b29ecfb0939f38d" translate="yes" xml:space="preserve">
          <source>Shared global compiletime state</source>
          <target state="translated">グローバルなコンパイル時の状態を共有</target>
        </trans-unit>
        <trans-unit id="28dc378515622329465eaea75a1dd093caa6b12c" translate="yes" xml:space="preserve">
          <source>Shared list support.</source>
          <target state="translated">共有リストのサポート。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
