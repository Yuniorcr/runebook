<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="apache_pig">
    <body>
      <group id="apache_pig">
        <trans-unit id="f89fc99117d408b1b5daf4ea18e08240646cac51" translate="yes" xml:space="preserve">
          <source>You must supply an even number of expressions as parameters</source>
          <target state="translated">偶数の式をパラメータとして指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="ac4ff14522521ba428ad8abe1f061848d08d94d3" translate="yes" xml:space="preserve">
          <source>You must supply arguments for all specifiers</source>
          <target state="translated">すべての指定子に引数を与えなければなりません。</target>
        </trans-unit>
        <trans-unit id="66ea7a21bb38358aa2288540b6c46a2a93761792" translate="yes" xml:space="preserve">
          <source>You need to import the org.apache.pig.data.DataType class into your code to define schemas. You also need to import the schema class org.apache.pig.impl.logicalLayer.schema.Schema.</source>
          <target state="translated">スキーマを定義するためには、 org.apache.pig.data.DataType クラスをコードにインポートする必要があります。また、スキーマクラス org.apache.pig.impl.logicalLayer.schema.Schema.Schema をコードにインポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="3ea60627e4b7e10d8910dc20732f36f8e9b31cb0" translate="yes" xml:space="preserve">
          <source>You need to put outputSchema/outputSchemaFunction statement right before your UDF. The schema function itself can be defined anywhere inside the class.</source>
          <target state="translated">UDF の直前に outputSchemaoutputSchemaFunction ステートメントを記述する必要があります。スキーマ関数自体は、クラス内のどこでも定義できます。</target>
        </trans-unit>
        <trans-unit id="bf2f8e0d0cd0b1b2681f37dbc92b9d6a326486e5" translate="yes" xml:space="preserve">
          <source>You should now see myudfs.jar in your current working directory. You can use this jar with the script described in the previous section.</source>
          <target state="translated">現在の作業ディレクトリに myudfs.jar があるはずです。この jar は前のセクションで説明したスクリプトを使って使うことができます。</target>
        </trans-unit>
        <trans-unit id="e7cf2c9da63218aa48f888e5688144d27bd3512f" translate="yes" xml:space="preserve">
          <source>You should see pig.jar in your current working directory. The set of commands below first compiles the function and then creates a jar file that contains it.</source>
          <target state="translated">現在の作業ディレクトリに pig.jar があるはずです。以下のコマンドは、まず関数をコンパイルし、それを含む jar ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="7e5b7ddba58a76a5ce83807ed35c686ad63509eb" translate="yes" xml:space="preserve">
          <source>You will also see better performance if the data in the left table is partitioned evenly across part files (no significant skew and each part file contains at least one full block of data).</source>
          <target state="translated">また、左テーブルのデータがパーツファイル間で均等に分割されている場合は、パフォーマンスが向上します(有意なスキューはなく、各パーツファイルには少なくとも1つの完全なデータブロックが含まれています)。</target>
        </trans-unit>
        <trans-unit id="985588985eb49447a450a50ee2acbd2195603d91" translate="yes" xml:space="preserve">
          <source>[ 'name' # 'John', 'ext' # 5555 ]</source>
          <target state="translated">['name'#'John','ext'#5555 ]</target>
        </trans-unit>
        <trans-unit id="cdcd5c9a3a475f2298b5ee3f4258f8207ba10879" translate="yes" xml:space="preserve">
          <source>[ ]</source>
          <target state="translated">[]</target>
        </trans-unit>
        <trans-unit id="1bb0e3c33e2f6f7989ad4b6004af9e52af563b26" translate="yes" xml:space="preserve">
          <source>[ key#value &amp;lt;, key#value &amp;hellip;&amp;gt; ]</source>
          <target state="translated">[key＃value &amp;lt;、key＃value&amp;hellip;&amp;gt;]</target>
        </trans-unit>
        <trans-unit id="981a029f7e5a420683fc64341abe46ce62fe1be0" translate="yes" xml:space="preserve">
          <source>[&quot;boolean&quot;,&quot;null&quot;]</source>
          <target state="translated">[&quot;boolean&quot;,&quot;null&quot;]</target>
        </trans-unit>
        <trans-unit id="086199a67ec26ee58287d965e49e859c430e1f10" translate="yes" xml:space="preserve">
          <source>[&quot;boolean&quot;,&quot;null&quot;] or &quot;boolean&quot;</source>
          <target state="translated">[&quot;boolean&quot;,&quot;null&quot;]または &quot;boolean&quot;</target>
        </trans-unit>
        <trans-unit id="e78eb459b9aa80543c797ca0cf24c63c81d4238c" translate="yes" xml:space="preserve">
          <source>[&quot;bytes&quot;,&quot;null&quot;]</source>
          <target state="translated">[&quot;bytes&quot;,&quot;null&quot;]</target>
        </trans-unit>
        <trans-unit id="90591fd668db2192839d0be4855fd3cfc14d5b8a" translate="yes" xml:space="preserve">
          <source>[&quot;bytes&quot;,&quot;null&quot;] or &quot;bytes&quot;</source>
          <target state="translated">[&quot;bytes&quot;,&quot;null&quot;]または &quot;bytes&quot;</target>
        </trans-unit>
        <trans-unit id="1e82353d397e1309d0a0afaff8a1054e6524f8d9" translate="yes" xml:space="preserve">
          <source>[&quot;double&quot;,&quot;null&quot;]</source>
          <target state="translated">[&quot;double&quot;,&quot;null&quot;]</target>
        </trans-unit>
        <trans-unit id="463db3b0e45987b052f238e486366a4bb2eaef9a" translate="yes" xml:space="preserve">
          <source>[&quot;double&quot;,&quot;null&quot;] or &quot;double&quot;</source>
          <target state="translated">[&quot;double&quot;,&quot;null&quot;]または &quot;double&quot;</target>
        </trans-unit>
        <trans-unit id="3ac464d8a973f270578d522fc86cc73492d39c13" translate="yes" xml:space="preserve">
          <source>[&quot;float&quot;,&quot;null&quot;]</source>
          <target state="translated">[&quot;float&quot;,&quot;null&quot;]</target>
        </trans-unit>
        <trans-unit id="4e1ec087b2b04d204853f1dcc05741959005731c" translate="yes" xml:space="preserve">
          <source>[&quot;float&quot;,&quot;null&quot;] or &quot;float&quot;</source>
          <target state="translated">[&quot;float&quot;,&quot;null&quot;]または &quot;float&quot;</target>
        </trans-unit>
        <trans-unit id="33e78f3ca1d8e34abe71f8a5147bd6f42791b24c" translate="yes" xml:space="preserve">
          <source>[&quot;int&quot;,&quot;null&quot;]</source>
          <target state="translated">[&quot;int&quot;,&quot;null&quot;]</target>
        </trans-unit>
        <trans-unit id="9c8a7b56f015e2824b69ad6fdba6e42c19678500" translate="yes" xml:space="preserve">
          <source>[&quot;int&quot;,&quot;null&quot;] or &quot;int&quot;</source>
          <target state="translated">[&quot;int&quot;,&quot;null&quot;]または &quot;int&quot;</target>
        </trans-unit>
        <trans-unit id="a1684709c3c75b5907875531dcf617c6812821c6" translate="yes" xml:space="preserve">
          <source>[&quot;long,&quot;null&quot;]</source>
          <target state="translated">[&quot;long,&quot;null&quot;]</target>
        </trans-unit>
        <trans-unit id="ca45a1a64978aa85744dedbd09b087f84a8167c5" translate="yes" xml:space="preserve">
          <source>[&quot;long,&quot;null&quot;] or &quot;long&quot;</source>
          <target state="translated">[&quot;long,&quot;null&quot;]または &quot;long&quot;</target>
        </trans-unit>
        <trans-unit id="f9bdf88ad86c3d0bafbf0339ac60db255f29aa22" translate="yes" xml:space="preserve">
          <source>[&quot;string&quot;,&quot;null&quot;]</source>
          <target state="translated">[&quot;string&quot;,&quot;null&quot;]</target>
        </trans-unit>
        <trans-unit id="3ea2eef967df5ae6395088a9d0a6faf609f04f3e" translate="yes" xml:space="preserve">
          <source>[&quot;string&quot;,&quot;null&quot;] or &quot;string&quot;</source>
          <target state="translated">[&quot;文字列&quot;,&quot;null&quot;]または &quot;文字列&quot;</target>
        </trans-unit>
        <trans-unit id="7f85061fb93811065d56faf31664ce15d4187336" translate="yes" xml:space="preserve">
          <source>[INNER | OUTER]</source>
          <target state="translated">OUTER]</target>
        </trans-unit>
        <trans-unit id="38f7d517af0c26f1f5c04c1d8911241ff41e4072" translate="yes" xml:space="preserve">
          <source>[open#apache]</source>
          <target state="translated">[open#apache]</target>
        </trans-unit>
        <trans-unit id="dde22d4b4c0517a908e6a6e4ae62c2256d4c7b3b" translate="yes" xml:space="preserve">
          <source>\d alias - shourtcut for &lt;a href=&quot;test#dump&quot;&gt;DUMP&lt;/a&gt; operator. If alias is ignored last defined alias will be used.</source>
          <target state="translated">\ dエイリアス-DUMP演算子のショートカット。 エイリアスが無視される場合、最後に定義されたエイリアスが使用されます。</target>
        </trans-unit>
        <trans-unit id="de34e6c173a6e061ca7ba23224e15db93873a93b" translate="yes" xml:space="preserve">
          <source>\de alias - shourtcut for &lt;a href=&quot;test#describe&quot;&gt;DESCRIBE&lt;/a&gt; operator. If alias is ignored last defined alias will be used.</source>
          <target state="translated">\ deエイリアス-DESCRIBE演算子のショートカット。 エイリアスが無視される場合、最後に定義されたエイリアスが使用されます。</target>
        </trans-unit>
        <trans-unit id="3b6eab1197095769d04aed95714b45f6a0776fb6" translate="yes" xml:space="preserve">
          <source>\e alias - shourtcut for &lt;a href=&quot;test#explain&quot;&gt;EXPLAIN&lt;/a&gt; operator. If alias is ignored last defined alias will be used.</source>
          <target state="translated">\ eエイリアス-EXPLAIN演算子のショートカット。 エイリアスが無視される場合、最後に定義されたエイリアスが使用されます。</target>
        </trans-unit>
        <trans-unit id="98ba872a4ed582c22a664f857294fb36248f6dd8" translate="yes" xml:space="preserve">
          <source>\i alias - shourtcut for &lt;a href=&quot;test#illustrate&quot;&gt;ILLUSTRATE&lt;/a&gt; operator. If alias is ignored last defined alias will be used.</source>
          <target state="translated">\ iエイリアス-ILLUSTRATE演算子のショートカット。 エイリアスが無視される場合、最後に定義されたエイリアスが使用されます。</target>
        </trans-unit>
        <trans-unit id="bd73df3adf14c1037948128c55619387d3b5e08a" translate="yes" xml:space="preserve">
          <source>\q - To quit grunt shell</source>
          <target state="translated">\♪ To quit grunt shell ♪</target>
        </trans-unit>
        <trans-unit id="6daa8c50436df9440146df346db2369dd4c83e8e" translate="yes" xml:space="preserve">
          <source>`command`</source>
          <target state="translated">`command`</target>
        </trans-unit>
        <trans-unit id="e00b103c8c95897fb75f8485f988a232f0cf18fc" translate="yes" xml:space="preserve">
          <source>`params, ...`</source>
          <target state="translated">`params,...`。</target>
        </trans-unit>
        <trans-unit id="445cd0286c3cba49ec1fad16aa4342020e75c632" translate="yes" xml:space="preserve">
          <source>a = LOAD 'data' AS (f1:int);</source>
          <target state="translated">a=LOAD 'data' AS (f1:int)。</target>
        </trans-unit>
        <trans-unit id="e89e41d7986d3a787b68d25486ce57c2d8183cc5" translate="yes" xml:space="preserve">
          <source>a constant (for example, 3)</source>
          <target state="translated">定数</target>
        </trans-unit>
        <trans-unit id="67bee403c61dbac08bfbf76b1951233f34c16345" translate="yes" xml:space="preserve">
          <source>a constant, range 0 to 1 (for example, enter 0.1 for 10%)</source>
          <target state="translated">定数、範囲0~1(例えば、10%の場合は0.1と入力します</target>
        </trans-unit>
        <trans-unit id="551bf9a9f71fedf706cba66d85da4e8362e34a0d" translate="yes" xml:space="preserve">
          <source>a scalar used in an expression</source>
          <target state="translated">式中のスカラ</target>
        </trans-unit>
        <trans-unit id="885bb6eba8547c5b24812aa50866614877571c00" translate="yes" xml:space="preserve">
          <source>a scalar used in an expression (for example, c.sum/100)</source>
          <target state="translated">スカラ</target>
        </trans-unit>
        <trans-unit id="ce83601f24964bd040d12cbebd8a9d9875c5b3d7" translate="yes" xml:space="preserve">
          <source>a whole number</source>
          <target state="translated">ぜんすう</target>
        </trans-unit>
        <trans-unit id="5bad426b0d4ee8a04994041b98632d5182299b9f" translate="yes" xml:space="preserve">
          <source>a, f1 - aliases you supply</source>
          <target state="translated">a,f1-提供するエイリアス</target>
        </trans-unit>
        <trans-unit id="8f6bcda4763c67b167b0b5f3523995f9842e5097" translate="yes" xml:space="preserve">
          <source>a2 is irrelevant in this query, so we can prune it earlier. The loader in this query is PigStorage and it supports column pruning. So we only load a0 and a1 from the input file.</source>
          <target state="translated">このクエリではa2は無関係なので、早めに剪定することができます。このクエリのローダはPigStorageで、カラムの剪定をサポートしています。そのため、入力ファイルからa0とa1だけをロードします。</target>
        </trans-unit>
        <trans-unit id="c3805175370d19c334b59f45b87343b9f2b7f5e1" translate="yes" xml:space="preserve">
          <source>addition</source>
          <target state="translated">addition</target>
        </trans-unit>
        <trans-unit id="5dc56b9aab61867257a3c1bd7c786c9410d38cd2" translate="yes" xml:space="preserve">
          <source>age</source>
          <target state="translated">age</target>
        </trans-unit>
        <trans-unit id="cdb6fdbe91faa53a7c573c80b7c18108c73c0480" translate="yes" xml:space="preserve">
          <source>alias</source>
          <target state="translated">alias</target>
        </trans-unit>
        <trans-unit id="7c8c349177a50c9078b5e4367d47f9bac9e7df5a" translate="yes" xml:space="preserve">
          <source>alias &amp;ndash; the name assigned to the field</source>
          <target state="translated">エイリアス&amp;ndash;フィールドに割り当てられた名前</target>
        </trans-unit>
        <trans-unit id="ae8ecb5ddc9ef0cf0d611ba7ddc999f475afd736" translate="yes" xml:space="preserve">
          <source>alias (IDENTIFIER)</source>
          <target state="translated">エイリアス</target>
        </trans-unit>
        <trans-unit id="52615c4e75e168a69f38bbbe7882b6af8ae42956" translate="yes" xml:space="preserve">
          <source>alias = CROSS alias, alias [, alias &amp;hellip;] [PARTITION BY partitioner] [PARALLEL n];</source>
          <target state="translated">alias = CROSSエイリアス、エイリアス[、エイリアス&amp;hellip;] [PARTITION BYパーティショナー] [PARALLEL n];</target>
        </trans-unit>
        <trans-unit id="82377721fab30ada4869f17e34a07bc890a69fa8" translate="yes" xml:space="preserve">
          <source>alias = CUBE alias BY { CUBE expression | ROLLUP expression }, [ CUBE expression | ROLLUP expression ] [PARALLEL n];</source>
          <target state="translated">ROLLUP expression },[CUBE expression</target>
        </trans-unit>
        <trans-unit id="40bbf2febd722644c8690c2b9034f2fccb26d134" translate="yes" xml:space="preserve">
          <source>alias = DISTINCT alias [PARTITION BY partitioner] [PARALLEL n];</source>
          <target state="translated">alias=DISTINCT alias [PARTITION BY partitioner][PARALLEL n]。</target>
        </trans-unit>
        <trans-unit id="205d348119ae99d5bbe5cb493febf1975b0d811c" translate="yes" xml:space="preserve">
          <source>alias = FILTER alias BY expression;</source>
          <target state="translated">alias=FILTER alias BY expression.</target>
        </trans-unit>
        <trans-unit id="4d58c66ffec4e276a9422a7a59ea0a78a849b360" translate="yes" xml:space="preserve">
          <source>alias = FOREACH alias GENERATE expression [AS schema] [expression [AS schema]&amp;hellip;.];</source>
          <target state="translated">エイリアス= FOREACHエイリアスGENERATE式[ASスキーマ] [式[ASスキーマ]&amp;hellip;。];</target>
        </trans-unit>
        <trans-unit id="057e99962c6d8a84986a2dce50ce868e9b595c77" translate="yes" xml:space="preserve">
          <source>alias = FOREACH nested_alias {</source>
          <target state="translated">alias=FOREACH nested_alias {</target>
        </trans-unit>
        <trans-unit id="126ec64583f5cfd3c7d859245529f474d01dd101" translate="yes" xml:space="preserve">
          <source>alias = FOREACH { block | nested_block };</source>
          <target state="translated">nested_block };</target>
        </trans-unit>
        <trans-unit id="f12f4c285cd36aac987e617d37a8c3528cb1a337" translate="yes" xml:space="preserve">
          <source>alias = GROUP alias { ALL | BY expression} [, alias ALL | BY expression &amp;hellip;] [USING 'collected' | 'merge'] [PARTITION BY partitioner] [PARALLEL n];</source>
          <target state="translated">エイリアス= GROUPエイリアス{ALL | BY式} [、エイリアスALL | BY式&amp;hellip;] [USED 'collected' | 'merge'] [PARTITION BYパーティショナー] [PARALLEL n];</target>
        </trans-unit>
        <trans-unit id="67de63f381eb48c5ffcab0f0f31c8354cdc4f021" translate="yes" xml:space="preserve">
          <source>alias = JOIN alias BY {expression|'('expression [, expression &amp;hellip;]')'} (, alias BY {expression|'('expression [, expression &amp;hellip;]')'} &amp;hellip;) [USING 'replicated' | 'bloom' | 'skewed' | 'merge' | 'merge-sparse'] [PARTITION BY partitioner] [PARALLEL n];</source>
          <target state="translated">alias = JOINエイリアスBY {式| '（'式[、式&amp;hellip;] '）'}（、エイリアスBY {式| '（'式[、式&amp;hellip;] '）'}&amp;hellip;）[USING 'replicated' | 「ブルーム」| 「ゆがんだ」| 'マージ' | 'merge-sparse'] [PARTITION BYパーティショナー] [PARALLEL n];</target>
        </trans-unit>
        <trans-unit id="c17a22084951f825154a836fb6a555e1d3d80a89" translate="yes" xml:space="preserve">
          <source>alias = JOIN left-alias BY left-alias-column [LEFT|RIGHT|FULL] [OUTER], right-alias BY right-alias-column [USING 'replicated' | 'bloom' | 'skewed' | 'merge'] [PARTITION BY partitioner] [PARALLEL n];</source>
          <target state="translated">RIGHT</target>
        </trans-unit>
        <trans-unit id="2c9069318010b3b2ca02972b17f4914f0d2f1f65" translate="yes" xml:space="preserve">
          <source>alias = LIMIT alias n;</source>
          <target state="translated">alias=LIMIT alias n.</target>
        </trans-unit>
        <trans-unit id="675000eb8c8c09ecee5a5d6ac53e06c84ccc017c" translate="yes" xml:space="preserve">
          <source>alias = ORDER alias BY { * [ASC|DESC] | field_alias [ASC|DESC] [, field_alias [ASC|DESC] &amp;hellip;] } [PARALLEL n];</source>
          <target state="translated">エイリアス= ORDERエイリアスBY {* [ASC | DESC] | field_alias [ASC | DESC] [、field_alias [ASC | DESC]&amp;hellip;]} [PARALLEL n];</target>
        </trans-unit>
        <trans-unit id="026826c9fcf69d42318f6c57004e0de77725bf57" translate="yes" xml:space="preserve">
          <source>alias = RANK alias [ BY { * [ASC|DESC] | field_alias [ASC|DESC] [, field_alias [ASC|DESC] &amp;hellip;] } [DENSE] ];</source>
          <target state="translated">エイリアス= RANKエイリアス[BY {* [ASC | DESC] | field_alias [ASC | DESC] [、field_alias [ASC | DESC]&amp;hellip;]} [DENSE]];</target>
        </trans-unit>
        <trans-unit id="538f15201941c1da73d441bcd40f660522d5676e" translate="yes" xml:space="preserve">
          <source>alias = STREAM alias [, alias &amp;hellip;] THROUGH {`command` | cmd_alias } [AS schema] ;</source>
          <target state="translated">alias = STREAM alias [、alias&amp;hellip;] THROUGH {`command` | cmd_alias} [ASスキーマ];</target>
        </trans-unit>
        <trans-unit id="d5d0f898634fcb466d5dbd858538150a96da7065" translate="yes" xml:space="preserve">
          <source>alias = UNION [ONSCHEMA] alias, alias [, alias &amp;hellip;] [PARALLEL n];</source>
          <target state="translated">エイリアス= UNION [ONSCHEMA]エイリアス、エイリアス[、エイリアス&amp;hellip;] [PARALLEL n];</target>
        </trans-unit>
        <trans-unit id="1345f84aefca5a4cb34b18ccaa90bc9c94b4474a" translate="yes" xml:space="preserve">
          <source>alias = {nested_op | nested_exp}; [{alias = {nested_op | nested_exp}; &amp;hellip;]</source>
          <target state="translated">エイリアス= {nested_op | nested_exp}; [{エイリアス= {nested_op | nested_exp}; &amp;hellip;]</target>
        </trans-unit>
        <trans-unit id="5866d8e60f09033a8d7d8a43cc792df6b484c069" translate="yes" xml:space="preserve">
          <source>alias [, alias ...] = macro_name (param [, param ...]) ;</source>
          <target state="translated">alias [,alias ....]=macro_name (stop [,stop ....]).</target>
        </trans-unit>
        <trans-unit id="faba8b843d014cda829efc5e6b6561d9eefcf2ed" translate="yes" xml:space="preserve">
          <source>alias&amp;lt;:map&amp;gt; [ &amp;lt;type&amp;gt; ]</source>
          <target state="translated">エイリアス&amp;lt;：map&amp;gt; [&amp;lt;type&amp;gt;]</target>
        </trans-unit>
        <trans-unit id="ad45dfb91c0a57ead7b69d623f9298171a774b4e" translate="yes" xml:space="preserve">
          <source>alias-column</source>
          <target state="translated">alias-column</target>
        </trans-unit>
        <trans-unit id="ca3f464a1dabcec77c76c559b31e04bf5917c094" translate="yes" xml:space="preserve">
          <source>alias1 = NATIVE 'native.jar' STORE alias2 INTO 'inputLocation' USING storeFunc LOAD 'outputLocation' USING loadFunc AS schema [`params, ... `];</source>
          <target state="translated">alias1=NATIVE 'native.jar' STORE alias2 INTO 'inputLocation' USING storeFunc LOAD 'outputLocation' USING loadFunc AS schema [`params,...`].</target>
        </trans-unit>
        <trans-unit id="124f38684ea33ae9b1152b2dc87d912f8f985a74" translate="yes" xml:space="preserve">
          <source>alias1, alias2</source>
          <target state="translated">エイリアス1、エイリアス2</target>
        </trans-unit>
        <trans-unit id="af4cc0ead1f3bb702d02e56d79c6a6d7dd4579d8" translate="yes" xml:space="preserve">
          <source>alias[:bag] {tuple}</source>
          <target state="translated">alias[:bag]{タプル}</target>
        </trans-unit>
        <trans-unit id="05a6d07f71ad258726941523135d9d691c33841c" translate="yes" xml:space="preserve">
          <source>alias[:tuple] (alias[:type]) [, (alias[:type]) &amp;hellip;] )</source>
          <target state="translated">エイリアス[：タプル]（エイリアス[：タイプ]）[、（エイリアス[：タイプ]）&amp;hellip;]）</target>
        </trans-unit>
        <trans-unit id="79c2f66be0c5941bfbd63d7379eeb67fc89736a2" translate="yes" xml:space="preserve">
          <source>alias[:type]</source>
          <target state="translated">alias[:type]</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="62b6e02bd43aa44ea4a29135583b6e40c4f9b25d" translate="yes" xml:space="preserve">
          <source>and in Groovy, pig script.groovy student.txt:</source>
          <target state="translated">とGroovyでは、pig script.groovy student.txtを使用しています。</target>
        </trans-unit>
        <trans-unit id="fc9c4e48126d581b076173e75281bf86fccbba30" translate="yes" xml:space="preserve">
          <source>and start your script like this:</source>
          <target state="translated">のようにスクリプトを開始します。</target>
        </trans-unit>
        <trans-unit id="e044db5cacc7c1e1ded3c45fa7472331fe5e6246" translate="yes" xml:space="preserve">
          <source>arg1</source>
          <target state="translated">arg1</target>
        </trans-unit>
        <trans-unit id="b38facf4a8f9f6e8fc7192d1cbc326386647f4c1" translate="yes" xml:space="preserve">
          <source>arg2</source>
          <target state="translated">arg2</target>
        </trans-unit>
        <trans-unit id="acdb94344573594f5ae5956ef0e2477e3c8c2b07" translate="yes" xml:space="preserve">
          <source>arg3</source>
          <target state="translated">arg3</target>
        </trans-unit>
        <trans-unit id="2c535ac541552039a6caa31dd1e2b2d42083aa3c" translate="yes" xml:space="preserve">
          <source>assert, and, any, all, arrange, as, asc, AVG</source>
          <target state="translated">アサート、と、任意の、すべての、アレンジ、として、asc、AVG</target>
        </trans-unit>
        <trans-unit id="9b4e473e4de7949c4ab8e441a7faa5e2b295b469" translate="yes" xml:space="preserve">
          <source>bag</source>
          <target state="translated">bag</target>
        </trans-unit>
        <trans-unit id="3c8303e6f67197774032841a4dc28852944f905a" translate="yes" xml:space="preserve">
          <source>bag constructor</source>
          <target state="translated">バッグコンストラクター</target>
        </trans-unit>
        <trans-unit id="a3d15d3dcd8bb27fde0897a7ff8db212df4ab9fc" translate="yes" xml:space="preserve">
          <source>bag dereference</source>
          <target state="translated">袋参照</target>
        </trans-unit>
        <trans-unit id="583ab35390cb219a766be6547284232a4b8b6511" translate="yes" xml:space="preserve">
          <source>bag, BinStorage, by, bytearray, BIGINTEGER, BIGDECIMAL</source>
          <target state="translated">bag,BinStorage,by,bytearray,BIGINTEGER,BIGDECIMAL</target>
        </trans-unit>
        <trans-unit id="0b040a516fa93032df5325965804c0114274f653" translate="yes" xml:space="preserve">
          <source>bag.id or bag.(id,&amp;hellip;)</source>
          <target state="translated">bag.idまたはbag。（id、&amp;hellip;）</target>
        </trans-unit>
        <trans-unit id="df8eb3db2e3e7757e3322ea59d3dc7a64c51a0b9" translate="yes" xml:space="preserve">
          <source>bigdecimal</source>
          <target state="translated">bigdecimal</target>
        </trans-unit>
        <trans-unit id="a5513f8c142f72af1365b7b59876f5dfdf8807bf" translate="yes" xml:space="preserve">
          <source>bigdecimal *</source>
          <target state="translated">ビッグデシマル</target>
        </trans-unit>
        <trans-unit id="6d6bf4860f783bf2249259a652573e4cf9104542" translate="yes" xml:space="preserve">
          <source>bigdecimal: BigDecimal</source>
          <target state="translated">bigdecimal:BigDecimal</target>
        </trans-unit>
        <trans-unit id="321c75dc8fdac180ee3004612b046e628181d51b" translate="yes" xml:space="preserve">
          <source>biginteger</source>
          <target state="translated">biginteger</target>
        </trans-unit>
        <trans-unit id="1c6da73e559c37dcfea741d6e1401bd4404ab279" translate="yes" xml:space="preserve">
          <source>biginteger: BigInteger</source>
          <target state="translated">Biginteger:BigInteger</target>
        </trans-unit>
        <trans-unit id="515d5a4c32bfb6525ca008fa1c19d436acbe2822" translate="yes" xml:space="preserve">
          <source>bincond</source>
          <target state="translated">bincond</target>
        </trans-unit>
        <trans-unit id="0214b4b355d11ca8f2ce45a968c264651bdfbf83" translate="yes" xml:space="preserve">
          <source>block</source>
          <target state="translated">block</target>
        </trans-unit>
        <trans-unit id="48647474b89fa8f56ed6bda0f8148a17b51b97bd" translate="yes" xml:space="preserve">
          <source>boolean</source>
          <target state="translated">boolean</target>
        </trans-unit>
        <trans-unit id="03df9fa5e15355cf584bca85973ccf114f81efaa" translate="yes" xml:space="preserve">
          <source>boolean (bytearray cast as chararray)</source>
          <target state="translated">ブーリアン(bytearrayをchararrayにキャスト)</target>
        </trans-unit>
        <trans-unit id="85d15a565a2b582e6765f8d0d078e0d1141b1fb6" translate="yes" xml:space="preserve">
          <source>boolean (bytearray cast as double)</source>
          <target state="translated">ブーリアン(バイト配列をダブルキャストしたもの)</target>
        </trans-unit>
        <trans-unit id="d44ce31355a992383507e60641882aff3171b53d" translate="yes" xml:space="preserve">
          <source>boolean (bytearray cast as float)</source>
          <target state="translated">ブーリアン(bytearrayをfloatでキャストしたもの)</target>
        </trans-unit>
        <trans-unit id="2b93e8edc29e19e8bb98437cf91fd7a66a00176f" translate="yes" xml:space="preserve">
          <source>boolean (bytearray cast as int)</source>
          <target state="translated">ブーリアン</target>
        </trans-unit>
        <trans-unit id="dbe55a3a8187d98d92005eb6e72583fa07146b2a" translate="yes" xml:space="preserve">
          <source>boolean (bytearray cast as long)</source>
          <target state="translated">ブーリアン(バイト配列を長めにキャスト)</target>
        </trans-unit>
        <trans-unit id="e42e0595a4b13974ed7001e007339e34f7ce9aec" translate="yes" xml:space="preserve">
          <source>boolean: boolean</source>
          <target state="translated">真偽値:真偽値</target>
        </trans-unit>
        <trans-unit id="0ff7eddd83af44b55d259cfd67cfac9fd59ec69d" translate="yes" xml:space="preserve">
          <source>byte[]: DataByteArray (content is copied)</source>
          <target state="translated">byte[]を使用しています。DataByteArray(内容をコピー</target>
        </trans-unit>
        <trans-unit id="ce8605ff30b56a513cfb82f11af0adb15216e97a" translate="yes" xml:space="preserve">
          <source>bytearray</source>
          <target state="translated">bytearray</target>
        </trans-unit>
        <trans-unit id="4c8925e8a68d4f9b7ac7e0932f0bb158d7dd424a" translate="yes" xml:space="preserve">
          <source>bytearray*</source>
          <target state="translated">bytearray*</target>
        </trans-unit>
        <trans-unit id="eadc3d0aa64297414c95f0a21ad3bec83402b0c3" translate="yes" xml:space="preserve">
          <source>bytearray: byte[] (content is copied)</source>
          <target state="translated">bytearray:byte[](内容をコピー)</target>
        </trans-unit>
        <trans-unit id="b03592806efabfeeb709f5a70a7c172669b00538" translate="yes" xml:space="preserve">
          <source>cache</source>
          <target state="translated">cache</target>
        </trans-unit>
        <trans-unit id="d78591e6521f8bc5bdb5c0f92f1ad26ddc4e16c5" translate="yes" xml:space="preserve">
          <source>cache, CASE, cat, cd, chararray, cogroup, CONCAT, copyFromLocal, copyToLocal, COUNT, cp, cross</source>
          <target state="translated">キャッシュ、CASE、cat、cd、chararray、cogroup、CONCAT、copyFromLocal、copyToLocal、COUNT、cp、cross</target>
        </trans-unit>
        <trans-unit id="6406510c31e0c9925733c7f21414bf6428333ed2" translate="yes" xml:space="preserve">
          <source>case</source>
          <target state="translated">case</target>
        </trans-unit>
        <trans-unit id="fa5c75c21bb1a0936f5f7a2b6595e67696e377ba" translate="yes" xml:space="preserve">
          <source>cast as boolean</source>
          <target state="translated">ブーリアンキャスト</target>
        </trans-unit>
        <trans-unit id="7cbea8331f133e062aa54ce9e42d4542baa343e8" translate="yes" xml:space="preserve">
          <source>cast as double</source>
          <target state="translated">替え玉にする</target>
        </trans-unit>
        <trans-unit id="dbe9e0cc8c464e0f237a980bb99e5b256bea2b8d" translate="yes" xml:space="preserve">
          <source>cast as float</source>
          <target state="translated">浮かべる</target>
        </trans-unit>
        <trans-unit id="86879f858c6a08d6f4d087610693213bd80a51cd" translate="yes" xml:space="preserve">
          <source>cast as int</source>
          <target state="translated">インスタントキャスト</target>
        </trans-unit>
        <trans-unit id="ebbd512cc904a9f4529450ca33152a042cfd9ae9" translate="yes" xml:space="preserve">
          <source>cast as long</source>
          <target state="translated">ながめる</target>
        </trans-unit>
        <trans-unit id="b78309555790c7aee2539fc1cd4142067f2c328b" translate="yes" xml:space="preserve">
          <source>cat *.bz &amp;gt; text/concat.bz</source>
          <target state="translated">cat * .bz&amp;gt; text / concat.bz</target>
        </trans-unit>
        <trans-unit id="b7676a051897251d0401be05e33b68e445454977" translate="yes" xml:space="preserve">
          <source>cat *.bz2 &amp;gt; text/concat.bz2</source>
          <target state="translated">cat * .bz2&amp;gt; text / concat.bz2</target>
        </trans-unit>
        <trans-unit id="3399ef60c897f942b696f12f1749746e63002f4c" translate="yes" xml:space="preserve">
          <source>cat path [path &amp;hellip;]</source>
          <target state="translated">猫のパス[パス&amp;hellip;]</target>
        </trans-unit>
        <trans-unit id="1143d0d22af27b086f94c6fefa7726b7c4b95bde" translate="yes" xml:space="preserve">
          <source>chararray</source>
          <target state="translated">chararray</target>
        </trans-unit>
        <trans-unit id="b67aa6a488edce94d7452c39ee9b47a0ac4df166" translate="yes" xml:space="preserve">
          <source>chararray: String</source>
          <target state="translated">chararrayを使用しています。文字列</target>
        </trans-unit>
        <trans-unit id="65076934082d8bc4fd8cbc0ed8a1e29dbdb4945b" translate="yes" xml:space="preserve">
          <source>checkSchema(): A Store function should implement this function to check that a given schema describing the data to be written is acceptable to it. The default implementation in StoreFunc has an empty body. This method will be called before any calls to setStoreLocation().</source>
          <target state="translated">checkSchema()。Store 関数は、書き込まれるデータを記述しているスキーマが許容されるかどうかをチェックするために、この関数を実装しなければなりません。StoreFunc のデフォルトの実装は空のボディを持っています。このメソッドは、setStoreLocation()を呼び出す前に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="168cbb2ea52b9e34d271accecfa7d7951e948a99" translate="yes" xml:space="preserve">
          <source>clear</source>
          <target state="translated">clear</target>
        </trans-unit>
        <trans-unit id="7b267e109d428d8e68d7fd9ce9aa38cd621fd78d" translate="yes" xml:space="preserve">
          <source>cmd_alias</source>
          <target state="translated">cmd_alias</target>
        </trans-unit>
        <trans-unit id="aa60230ab00282b5a1f3f1993b2d1c503e7d15a5" translate="yes" xml:space="preserve">
          <source>column</source>
          <target state="translated">column</target>
        </trans-unit>
        <trans-unit id="4f1b1dbedec9c3b99e9ddb2477a8188aa8eba202" translate="yes" xml:space="preserve">
          <source>columns</source>
          <target state="translated">columns</target>
        </trans-unit>
        <trans-unit id="2cdda43b707e3b6d80f311cd9476fe909399da45" translate="yes" xml:space="preserve">
          <source>constant parameters</source>
          <target state="translated">ていすうパラメタ</target>
        </trans-unit>
        <trans-unit id="89ffad089c042f31dcc81269da38bef3ca44ab1f" translate="yes" xml:space="preserve">
          <source>datetime</source>
          <target state="translated">datetime</target>
        </trans-unit>
        <trans-unit id="32e4b349a5799839f335967d646029773f7a3c66" translate="yes" xml:space="preserve">
          <source>datetime, %declare, %default, define, dense, desc, describe, DIFF, distinct, double, du, dump</source>
          <target state="translated">datetime,%declare,%default,define,dense,desc,describe,DIFF,distinct,double,du,dump</target>
        </trans-unit>
        <trans-unit id="9e1ddc14207e1f6ccdf3f43239542c8a8afd53fe" translate="yes" xml:space="preserve">
          <source>datetime1</source>
          <target state="translated">datetime1</target>
        </trans-unit>
        <trans-unit id="0f29606abc935b461f6aa5dec80ae7748833c79e" translate="yes" xml:space="preserve">
          <source>datetime2</source>
          <target state="translated">datetime2</target>
        </trans-unit>
        <trans-unit id="32faaecac742100f7753f0c1d0aa0add01b4046b" translate="yes" xml:space="preserve">
          <source>debug</source>
          <target state="translated">debug</target>
        </trans-unit>
        <trans-unit id="5ea3a2cbcccba7d42629fa1baa73994118adf721" translate="yes" xml:space="preserve">
          <source>default_parallel</source>
          <target state="translated">default_parallel</target>
        </trans-unit>
        <trans-unit id="e6982d514bce827a00649bb6b2607624f6f0aa12" translate="yes" xml:space="preserve">
          <source>delimiter</source>
          <target state="translated">delimiter</target>
        </trans-unit>
        <trans-unit id="78bf98120436630d83474bf7f1709574be3584a6" translate="yes" xml:space="preserve">
          <source>deserializer &amp;ndash; PigStreaming is the default deserializer.</source>
          <target state="translated">デシリアライザー&amp;ndash; PigStreamingがデフォルトのデシリアライザーです。</target>
        </trans-unit>
        <trans-unit id="1cc8d40e2ad6a337a6ab8c75ecec0b05071a07fb" translate="yes" xml:space="preserve">
          <source>digits</source>
          <target state="translated">digits</target>
        </trans-unit>
        <trans-unit id="4fd95a301ae378a4229848000961bf355cf745d3" translate="yes" xml:space="preserve">
          <source>division</source>
          <target state="translated">division</target>
        </trans-unit>
        <trans-unit id="bdb36bb22deb169275b3094ba9005a29eeddd195" translate="yes" xml:space="preserve">
          <source>double</source>
          <target state="translated">double</target>
        </trans-unit>
        <trans-unit id="6914066a1a9414604bcf89f6dec710c936ab1afd" translate="yes" xml:space="preserve">
          <source>double &amp;gt; float &amp;gt; long &amp;gt; int &amp;gt; bytearray</source>
          <target state="translated">double&amp;gt; float&amp;gt; long&amp;gt; int&amp;gt; bytearray</target>
        </trans-unit>
        <trans-unit id="1f9e72be95b9a6015c061f088151a7d7fcf36a98" translate="yes" xml:space="preserve">
          <source>double (as double)</source>
          <target state="translated">二重</target>
        </trans-unit>
        <trans-unit id="5d3f344b5bd21e9500c69ca575a3286c85b28f1c" translate="yes" xml:space="preserve">
          <source>duration</source>
          <target state="translated">duration</target>
        </trans-unit>
        <trans-unit id="4f1fad1a0ed615882eca4ad28bb71bcdbbba5279" translate="yes" xml:space="preserve">
          <source>e, E, eval, exec, explain</source>
          <target state="translated">e,E,eval,exec,説明</target>
        </trans-unit>
        <trans-unit id="f57b2d312d9efe8fe993c8eb1f3e19d41ad04030" translate="yes" xml:space="preserve">
          <source>equal</source>
          <target state="translated">equal</target>
        </trans-unit>
        <trans-unit id="11f9578d05e6f7bb58a3cdd00107e9f4e3882671" translate="yes" xml:space="preserve">
          <source>error</source>
          <target state="translated">error</target>
        </trans-unit>
        <trans-unit id="d6eedd69da4c0baa1b3395de5cbd0fdc603b2d15" translate="yes" xml:space="preserve">
          <source>excite-small.log</source>
          <target state="translated">excite-small.log</target>
        </trans-unit>
        <trans-unit id="5a45a842dd85c73bf1a1fdcb5f94e12b6d439a94" translate="yes" xml:space="preserve">
          <source>excite.log.bz2</source>
          <target state="translated">excite.log.bz2</target>
        </trans-unit>
        <trans-unit id="be62562725d30894d1641b11d5106adde66f0d79" translate="yes" xml:space="preserve">
          <source>exec</source>
          <target state="translated">exec</target>
        </trans-unit>
        <trans-unit id="cd1798aaa01ff054346c18cae38c7a469de3f76d" translate="yes" xml:space="preserve">
          <source>exec [&amp;ndash;param param_name = param_value] [&amp;ndash;param_file file_name] [script]</source>
          <target state="translated">exec [&amp;ndash;param param_name = param_value] [&amp;ndash;param_file file_name] [script]</target>
        </trans-unit>
        <trans-unit id="de3ac21778e51de199438300e1a9f816c618d33a" translate="yes" xml:space="preserve">
          <source>exit</source>
          <target state="translated">exit</target>
        </trans-unit>
        <trans-unit id="2216470a6aacb2edec4887e9eadec834847afc5d" translate="yes" xml:space="preserve">
          <source>experimental</source>
          <target state="translated">experimental</target>
        </trans-unit>
        <trans-unit id="ec9814396ba26fa02dc3261046ba55a3b4bb32a6" translate="yes" xml:space="preserve">
          <source>expression</source>
          <target state="translated">expression</target>
        </trans-unit>
        <trans-unit id="69e47915175f14ebdab961d8af61cbb3a9105425" translate="yes" xml:space="preserve">
          <source>expression1</source>
          <target state="translated">expression1</target>
        </trans-unit>
        <trans-unit id="3649587d02a5e7fff06dcdc432b6b38bbacea880" translate="yes" xml:space="preserve">
          <source>expression2</source>
          <target state="translated">expression2</target>
        </trans-unit>
        <trans-unit id="8393fe3e27262118539bfbc6739f8101f460cb45" translate="yes" xml:space="preserve">
          <source>expression3</source>
          <target state="translated">expression3</target>
        </trans-unit>
        <trans-unit id="4a1522c2012a227f6e1e2d849c11d7df055940ee" translate="yes" xml:space="preserve">
          <source>f or F in which case it is assigned type float (for example, 1.5f)</source>
          <target state="translated">f または F の場合は float 型 (例えば 1.5f)が割り当てられます。</target>
        </trans-unit>
        <trans-unit id="0756f559af462296155e07870a97ff53f37d7082" translate="yes" xml:space="preserve">
          <source>f, F, filter, flatten, float, foreach, full</source>
          <target state="translated">f,F,filter,flatten,float,foreach,full</target>
        </trans-unit>
        <trans-unit id="2da0b68df8841752bb747a76780679bcd87c6215" translate="yes" xml:space="preserve">
          <source>field</source>
          <target state="translated">field</target>
        </trans-unit>
        <trans-unit id="a624601bf845d95f140d07208de8ece633dbc520" translate="yes" xml:space="preserve">
          <source>field_alias</source>
          <target state="translated">field_alias</target>
        </trans-unit>
        <trans-unit id="5f2007ea6a7f76f28aedc6904933feea04dbc63c" translate="yes" xml:space="preserve">
          <source>field_delimiter</source>
          <target state="translated">field_delimiter</target>
        </trans-unit>
        <trans-unit id="8769ee7a5953d963faf44fcbdac44d30561dc633" translate="yes" xml:space="preserve">
          <source>file-with-macro</source>
          <target state="translated">file-with-macro</target>
        </trans-unit>
        <trans-unit id="df16ff3255e6dfc777b086949b78a08845a85c1e" translate="yes" xml:space="preserve">
          <source>file_name</source>
          <target state="translated">file_name</target>
        </trans-unit>
        <trans-unit id="08deae8d9ea9bc0b84f94475d868351830e9f7e7" translate="yes" xml:space="preserve">
          <source>filename</source>
          <target state="translated">filename</target>
        </trans-unit>
        <trans-unit id="685e80366130387cb75c055248326976d16fdf8d" translate="yes" xml:space="preserve">
          <source>float</source>
          <target state="translated">float</target>
        </trans-unit>
        <trans-unit id="785987648f85190cfde9eadc69fc7c46fe8a7433" translate="yes" xml:space="preserve">
          <source>format</source>
          <target state="translated">format</target>
        </trans-unit>
        <trans-unit id="5b25aa0509ff64a400acc60c925370489330e40a" translate="yes" xml:space="preserve">
          <source>format string</source>
          <target state="translated">書式文字列</target>
        </trans-unit>
        <trans-unit id="3f4bb586f04a0c1d93eadab9363a8a3183b4860c" translate="yes" xml:space="preserve">
          <source>fs</source>
          <target state="translated">fs</target>
        </trans-unit>
        <trans-unit id="b9618b14995b1f2be0b382d70e5dda3aa6cdae4d" translate="yes" xml:space="preserve">
          <source>fs subcommand subcommand_parameters</source>
          <target state="translated">fs サブコマンド サブコマンドパラメータ</target>
        </trans-unit>
        <trans-unit id="c218e39efa2e1aae69f39d2054528369ce1e1f46" translate="yes" xml:space="preserve">
          <source>function</source>
          <target state="translated">function</target>
        </trans-unit>
        <trans-unit id="dd1998590e5824f4a9473e2e046208bb4ffcdd36" translate="yes" xml:space="preserve">
          <source>generate, group</source>
          <target state="translated">ジェネレートグループ</target>
        </trans-unit>
        <trans-unit id="814a276f502b391a33dd39891bbac19bd7c80b84" translate="yes" xml:space="preserve">
          <source>getAllStats() and List&amp;lt; &amp;gt; getAllErrorMessages() methods were added to the PigStats class. The map returned from getAllStats is keyed on the name of the pipeline provided in the compile call. If the name was not compiled an internally generated id would be used.</source>
          <target state="translated">getAllStats（）およびList &amp;lt;&amp;gt; getAllErrorMessages（）メソッドがPigStatsクラスに追加されました。 getAllStatsから返されるマップは、コンパイル呼び出しで提供されるパイプラインの名前をキーとします。 名前がコンパイルされなかった場合は、内部で生成されたIDが使用されます。</target>
        </trans-unit>
        <trans-unit id="2a569714f426a6b17e8d912571463def9b0b6879" translate="yes" xml:space="preserve">
          <source>getCacheFiles(): Return a list of hdfs files to ship to distributed cache.</source>
          <target state="translated">getCacheFiles()。分散キャッシュに出荷する hdfs ファイルのリストを返します。</target>
        </trans-unit>
        <trans-unit id="ecfb38b88bfeed87029ceda8ae22cf3d5e7141b5" translate="yes" xml:space="preserve">
          <source>getInputFormat(): This method is called by Pig to get the InputFormat used by the loader. The methods in the InputFormat (and underlying RecordReader) are called by Pig in the same manner (and in the same context) as by Hadoop in a MapReduce java program. If the InputFormat is a Hadoop packaged one, the implementation should use the new API based one under org.apache.hadoop.mapreduce. If it is a custom InputFormat, it should be implemented using the new API in org.apache.hadoop.mapreduce.</source>
          <target state="translated">getInputFormat()を使用しています。このメソッドは、ローダが使用するInputFormatを取得するためにPigによって呼び出されます。InputFormat (および基礎となるRecordReader)のメソッドは、MapReduceのJavaプログラムの中でHadoopによって呼び出されるのと同じ方法で(そして同じコンテキストで)Pigによって呼び出されます。もしInputFormatがHadoopのパッケージ化されたものであれば、実装はorg.apache.hadoop.mapreduceの下にある新しいAPIベースのものを使うべきです。それがカスタムInputFormatであれば、org.apache.hadoop.mapreduceの新しいAPIを使って実装されなければならない。</target>
        </trans-unit>
        <trans-unit id="476c1009971cb56bca7f972db8c89d355454f143" translate="yes" xml:space="preserve">
          <source>getNext(): The meaning of getNext() has not changed and is called by Pig runtime to get the next tuple in the data - in this method the implementation should use the underlying RecordReader and construct the tuple to return.</source>
          <target state="translated">getNext()の意味は変わっておらず、Pigの実行時に呼び出されます。getNext()の意味は変更されておらず、データ内の次のタプルを取得するためにPigランタイムによって呼び出されます-このメソッドでは、実装は基礎となるRecordReaderを使用し、返すタプルを構築しなければなりません。</target>
        </trans-unit>
        <trans-unit id="f37894bdef2ccb8968bb62bd5c05cb0fccafb423" translate="yes" xml:space="preserve">
          <source>getOutputFormat(): This method will be called by Pig to get the OutputFormat used by the storer. The methods in the OutputFormat (and underlying RecordWriter and OutputCommitter) will be called by pig in the same manner (and in the same context) as by Hadoop in a map-reduce java program. If the OutputFormat is a hadoop packaged one, the implementation should use the new API based one under org.apache.hadoop.mapreduce. If it is a custom OutputFormat, it should be implemented using the new API under org.apache.hadoop.mapreduce. The checkOutputSpecs() method of the OutputFormat will be called by pig to check the output location up-front. This method will also be called as part of the Hadoop call sequence when the job is launched. So implementations should ensure that this method can be called multiple times without inconsistent side effects.</source>
          <target state="translated">getOutputFormat()を使用しています。このメソッドは、ストーラーが使用する OutputFormat を取得するために pig によって呼び出されます。OutputFormat (および、基礎となる RecordWriter と OutputCommitter)のメソッドは、map-reduce java プログラムの Hadoop と同じ方法で (そして同じコンテキストで)Pig によって呼び出されます。OutputFormatがhadoopパッケージのものであれば、実装はorg.apache.hadoop.mapreduceの下にある新しいAPIベースのものを使用しなければなりません。カスタムOutputFormatの場合は、org.apache.hadoop.mapreduceの新しいAPIを使って実装しなければなりません。OutputFormatのcheckOutputSpecs()メソッドは、出力場所を前もってチェックするためにpigによって呼び出されます。このメソッドは、ジョブの起動時にHadoopのコールシーケンスの一部としても呼び出されます。そのため、実装では、このメソッドが矛盾した副作用なく複数回呼ばれるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="132b79ed096b79044d44547aa471f0b4f14417e4" translate="yes" xml:space="preserve">
          <source>getShipFiles(): Return a list of local files to ship to distributed cache.</source>
          <target state="translated">getShipFiles()。分散キャッシュに出荷するローカルファイルのリストを返します。</target>
        </trans-unit>
        <trans-unit id="0c2b23ed9b9f834a1e598a252146546bd78238e7" translate="yes" xml:space="preserve">
          <source>gpa</source>
          <target state="translated">gpa</target>
        </trans-unit>
        <trans-unit id="2fa709f02b0516ccfdcfe5e3158bedc23fbc69c5" translate="yes" xml:space="preserve">
          <source>greater than</source>
          <target state="translated">よりも</target>
        </trans-unit>
        <trans-unit id="65bc30c904c711751bb0c0f744b001ef044bdfa1" translate="yes" xml:space="preserve">
          <source>greater than or equal to</source>
          <target state="translated">以上</target>
        </trans-unit>
        <trans-unit id="2385a5f5c8f10298d4ce8f74c0fb4a6adf78e527" translate="yes" xml:space="preserve">
          <source>groovy.lang.Tuple: Tuple</source>
          <target state="translated">groovy.lang.Tuple.タプル</target>
        </trans-unit>
        <trans-unit id="64292b1c2b2e13ead8788fc8a2b8edc8c1db4ecd" translate="yes" xml:space="preserve">
          <source>group</source>
          <target state="translated">group</target>
        </trans-unit>
        <trans-unit id="f3325094019ecdc4c442d7e1ed0a98eb8c2571d3" translate="yes" xml:space="preserve">
          <source>hadoop fs -ls /mydata/20110423{00,01,02,03,04,05,06,07,08,09,{10..23}}00//&lt;strong&gt;part &lt;/strong&gt;</source>
          <target state="translated">hadoop fs -ls /mydata/20110423{00,01,02,03,04,05,06,07,08,09,{10..23}}00// &lt;strong&gt;パーツ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="baf5254ceeddd349faa9d9a49244412cb9d4ce23" translate="yes" xml:space="preserve">
          <source>hashtype</source>
          <target state="translated">hashtype</target>
        </trans-unit>
        <trans-unit id="2aae6c35c94fcfb415dbe95f408b9ce91ee846ed" translate="yes" xml:space="preserve">
          <source>hello world</source>
          <target state="translated">ハローワールド</target>
        </trans-unit>
        <trans-unit id="92005ecf3788faea8346a7919fba0232188561ab" translate="yes" xml:space="preserve">
          <source>help</source>
          <target state="translated">help</target>
        </trans-unit>
        <trans-unit id="66f79d8a6327c82c9033e6d65ff03322a3766c87" translate="yes" xml:space="preserve">
          <source>history</source>
          <target state="translated">history</target>
        </trans-unit>
        <trans-unit id="47f5a9c78868800f91dfc04ede07047510031232" translate="yes" xml:space="preserve">
          <source>history [-n]</source>
          <target state="translated">れきし</target>
        </trans-unit>
        <trans-unit id="0a3f3c632d8ebdaf7797258e434fd6ae59366da0" translate="yes" xml:space="preserve">
          <source>idlocal.java - The sample code is based on Pig Latin statements that extract all user IDs from the /etc/passwd file. Copy the /etc/passwd file to your local working directory.</source>
          <target state="translated">idlocal.java-サンプルコードは、etcpasswdファイルからすべてのユーザIDを抽出するPig Latinステートメントに基づいています。etcpasswdファイルをローカルの作業ディレクトリにコピーしてください。</target>
        </trans-unit>
        <trans-unit id="49d77d5dc3eec2e904e65d8baa6445b664570815" translate="yes" xml:space="preserve">
          <source>idmapreduce.java - The sample code is based on Pig Latin statements that extract all user IDs from the /etc/passwd file. Copy the /etc/passwd file to your home directory on the HDFS.</source>
          <target state="translated">idmapreduce.java-サンプルコードは、etcpasswdファイルからすべてのユーザIDを抽出するPig Latin文に基づいています。etcpasswdファイルをHDFS上のホームディレクトリにコピーします。</target>
        </trans-unit>
        <trans-unit id="25242bb9e7a0d483778ffe459624c70d9b767d93" translate="yes" xml:space="preserve">
          <source>if, illustrate, import, inner, input, int, into, is</source>
          <target state="translated">if,illustrate,import,inner,input,int,into,is</target>
        </trans-unit>
        <trans-unit id="cce74689e52c3e8cc0b73896edae44343707d7fe" translate="yes" xml:space="preserve">
          <source>implicit splits</source>
          <target state="translated">暗黙の分裂</target>
        </trans-unit>
        <trans-unit id="af10ef20dd9060bbeead0afbc55381a66af442ef" translate="yes" xml:space="preserve">
          <source>in</source>
          <target state="translated">in</target>
        </trans-unit>
        <trans-unit id="e540cdd1328b2b21e29a95405c301b9313b7c346" translate="yes" xml:space="preserve">
          <source>index</source>
          <target state="translated">index</target>
        </trans-unit>
        <trans-unit id="140f86aae51ab9e1cda9b4254fe98a74eb54c1a1" translate="yes" xml:space="preserve">
          <source>input</source>
          <target state="translated">input</target>
        </trans-unit>
        <trans-unit id="46f8ab7c0cff9df7cd124852e26022a6bf89e315" translate="yes" xml:space="preserve">
          <source>int</source>
          <target state="translated">int</target>
        </trans-unit>
        <trans-unit id="8a7edf44ef61254b49e430f5b787e7021df2dd31" translate="yes" xml:space="preserve">
          <source>int/long/float/double: as is</source>
          <target state="translated">intlongfloatdouble:そのまま</target>
        </trans-unit>
        <trans-unit id="9a8d4a47d4cc0e2ae740183c04090a015ca2960c" translate="yes" xml:space="preserve">
          <source>intDefault, longDefault, doubleDefault, floatDefault, and stringDefault can be specified in the annotation; the correct default will be chosen based on the return type of the UDF. Custom defaults for tuples and bags are not supported at this time.</source>
          <target state="translated">intDefault、longDefault、doubleDefault、floatDefault、stringDefaultをアノテーションで指定することができます。タプルとバッグのカスタム・デフォルトは、現時点ではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="1178cafbd64bbbfa77f5ac0a9d5032ed88162781" translate="yes" xml:space="preserve">
          <source>integer</source>
          <target state="translated">integer</target>
        </trans-unit>
        <trans-unit id="a0a1906b49c86308427a870885e9ce87fd81942e" translate="yes" xml:space="preserve">
          <source>is not null</source>
          <target state="translated">がヌルではない</target>
        </trans-unit>
        <trans-unit id="0e4f54fa1561c6572ecc20527f4590f0d98d2195" translate="yes" xml:space="preserve">
          <source>is null</source>
          <target state="translated">がヌル</target>
        </trans-unit>
        <trans-unit id="346801592b41a1438d4a69a51228fbd8ee7e71d4" translate="yes" xml:space="preserve">
          <source>is rewritten by Pig to</source>
          <target state="translated">をピグが書き換えることで</target>
        </trans-unit>
        <trans-unit id="6c4ec933387565ac985776c1cfea03b200573d18" translate="yes" xml:space="preserve">
          <source>isEmbedded() is a new abstract method that accommodates embedded Pig.</source>
          <target state="translated">isEmbedded()は、埋め込まれたPigを収容する新しい抽象メソッドです。</target>
        </trans-unit>
        <trans-unit id="8a78e089f82d06d39804d26b8a314605d6362976" translate="yes" xml:space="preserve">
          <source>isostring</source>
          <target state="translated">isostring</target>
        </trans-unit>
        <trans-unit id="bf9b252c45e19cf604b0522491c2b6c19a23fef3" translate="yes" xml:space="preserve">
          <source>java.util.List: DataBag</source>
          <target state="translated">java.util.List:DataBag</target>
        </trans-unit>
        <trans-unit id="8ea450c3d98341cb16b80a61a29461ba4fceeab8" translate="yes" xml:space="preserve">
          <source>java.util.Map: Map</source>
          <target state="translated">java.util.Map:マップ</target>
        </trans-unit>
        <trans-unit id="7b962e71e4cb73e3c4054138a3cb55618559bf2c" translate="yes" xml:space="preserve">
          <source>job.name</source>
          <target state="translated">job.name</target>
        </trans-unit>
        <trans-unit id="27c2a9eb88f083912dbf5ffa5faac35a9bdef150" translate="yes" xml:space="preserve">
          <source>job.priority</source>
          <target state="translated">job.priority</target>
        </trans-unit>
        <trans-unit id="10fe0e40a62253967148ba17752d76d5912bf6b7" translate="yes" xml:space="preserve">
          <source>jobid</source>
          <target state="translated">jobid</target>
        </trans-unit>
        <trans-unit id="c455b38e076228392d1c751d14fe95da50519334" translate="yes" xml:space="preserve">
          <source>join</source>
          <target state="translated">join</target>
        </trans-unit>
        <trans-unit id="a62f2225bf70bfaccbc7f1ef2a397836717377de" translate="yes" xml:space="preserve">
          <source>key</source>
          <target state="translated">key</target>
        </trans-unit>
        <trans-unit id="5a0833356e7628e6d1ee37d1da3ea5a3a425ff06" translate="yes" xml:space="preserve">
          <source>key-expression</source>
          <target state="translated">key-expression</target>
        </trans-unit>
        <trans-unit id="c80f5bc166cd6739ba9ba6d94acabc0aa01494da" translate="yes" xml:space="preserve">
          <source>kill</source>
          <target state="translated">kill</target>
        </trans-unit>
        <trans-unit id="6532e92a9395c87b8df28276dc25e79a34912d54" translate="yes" xml:space="preserve">
          <source>kill jobid</source>
          <target state="translated">ジョブを殺す</target>
        </trans-unit>
        <trans-unit id="3c85f6f60f816f576b1d385bd1c4ece9be8d2467" translate="yes" xml:space="preserve">
          <source>l, L, left, limit, load, long, ls</source>
          <target state="translated">l,L,left,limit,load,long,ls</target>
        </trans-unit>
        <trans-unit id="6bb2aa987a1cdc7525f5672334ed54a5cee446c5" translate="yes" xml:space="preserve">
          <source>less than</source>
          <target state="translated">未満</target>
        </trans-unit>
        <trans-unit id="1b709205d85df56c7a244034c07e09a1af509871" translate="yes" xml:space="preserve">
          <source>less than or equal to</source>
          <target state="translated">以下</target>
        </trans-unit>
        <trans-unit id="e4d68c5a97e466323c2fbe2b655ab578066a1cd5" translate="yes" xml:space="preserve">
          <source>limit</source>
          <target state="translated">limit</target>
        </trans-unit>
        <trans-unit id="bd3027fa569ea15ca76d84db21c67e2d514c1a5a" translate="yes" xml:space="preserve">
          <source>long</source>
          <target state="translated">long</target>
        </trans-unit>
        <trans-unit id="171c1e65f95a4d4992c129151e673f844920649a" translate="yes" xml:space="preserve">
          <source>lowercase</source>
          <target state="translated">lowercase</target>
        </trans-unit>
        <trans-unit id="76c2e94835ffbfbf79c7fc6df2fbcb13df0d0ccb" translate="yes" xml:space="preserve">
          <source>macro_name</source>
          <target state="translated">macro_name</target>
        </trans-unit>
        <trans-unit id="37745ed7a0f005fb14522c5cc7c1ba3d9e0df579" translate="yes" xml:space="preserve">
          <source>map</source>
          <target state="translated">map</target>
        </trans-unit>
        <trans-unit id="920e6592b422ad598f207d2bc5014a760e34efb7" translate="yes" xml:space="preserve">
          <source>map - In each map, bloom filters are computed on the join keys partitioned by the hashcode of the key with pig.bloomjoin.num.filters number of partitions. Bloom filters for each partition from different maps are then combined in the reducers producing one bloom filter per partition. The default value of pig.bloomjoin.num.filters is 1 for this strategy and so usually only one bloom filter is created. This is efficient and fast if there are smaller number of maps (&amp;lt;10) and the number of distinct keys are not too high. It can be faster with larger number of maps and even with bigger bloom vector sizes, but the amount of data shuffled to the reducer for aggregation becomes huge making it inefficient.</source>
          <target state="translated">map-各マップで、ブルームフィルターは、pig.bloomjoin.num.filtersのパーティション数を持つキーのハッシュコードによってパーティション化された結合キーで計算されます。 次に、異なるマップからの各パーティションのブルームフィルターがリデューサーで結合され、パーティションごとに1つのブルームフィルターが生成されます。 この戦略のpig.bloomjoin.num.filtersのデフォルト値は1であるため、通常、ブルームフィルターは1つだけ作成されます。 これは、マップの数が少なく（&amp;lt;10）、個別のキーの数が多すぎない場合に効率的で高速です。 マップの数が多いほど、またブルームベクトルのサイズが大きいほど高速になりますが、集約のためにレデューサーにシャッフルされるデータの量が膨大になり、効率が悪くなります。</target>
        </trans-unit>
        <trans-unit id="af2483c1dc00bb68f35cdc6882400e1af74a4d58" translate="yes" xml:space="preserve">
          <source>map constructor</source>
          <target state="translated">マップコンストラクタ</target>
        </trans-unit>
        <trans-unit id="b6837f0881a197a646aad2b78dd695837e0b2e46" translate="yes" xml:space="preserve">
          <source>map dereference</source>
          <target state="translated">マップ参照</target>
        </trans-unit>
        <trans-unit id="93be7e64cb0970e3d5dd86156ca012314257a6ee" translate="yes" xml:space="preserve">
          <source>map#'key'</source>
          <target state="translated">map#'key'</target>
        </trans-unit>
        <trans-unit id="d82b7ed19ee12ea5ea0b4d179be75c64a801968f" translate="yes" xml:space="preserve">
          <source>map, matches, MAX, MIN, mkdir, mv</source>
          <target state="translated">マップ、マッチ、MAX、MIN、mkdir、mv</target>
        </trans-unit>
        <trans-unit id="9f3e9242c63870528e4600bc635fca8f0f5d6e9c" translate="yes" xml:space="preserve">
          <source>matches</source>
          <target state="translated">matches</target>
        </trans-unit>
        <trans-unit id="6f9b9af3cd6e8b8a73c2cdced37fe9f59226e27d" translate="yes" xml:space="preserve">
          <source>message</source>
          <target state="translated">message</target>
        </trans-unit>
        <trans-unit id="33229476f0bc906faa56f5e8433000fc54007399" translate="yes" xml:space="preserve">
          <source>millseconds</source>
          <target state="translated">millseconds</target>
        </trans-unit>
        <trans-unit id="e78fe7049341b36116d8054f5a3e00d01f245fcc" translate="yes" xml:space="preserve">
          <source>mode</source>
          <target state="translated">mode</target>
        </trans-unit>
        <trans-unit id="fbd34a2b6e6a9fe8161f97dc435642609ac0bc29" translate="yes" xml:space="preserve">
          <source>module</source>
          <target state="translated">module</target>
        </trans-unit>
        <trans-unit id="1af60b7b96e08873e7bd780893eed25aa7a430b1" translate="yes" xml:space="preserve">
          <source>modulo</source>
          <target state="translated">modulo</target>
        </trans-unit>
        <trans-unit id="ae7f0c96c89117c5697d7b457d501fe03b502b0e" translate="yes" xml:space="preserve">
          <source>multiplication</source>
          <target state="translated">multiplication</target>
        </trans-unit>
        <trans-unit id="28229485665f96e033333c22c3bdb508daefca17" translate="yes" xml:space="preserve">
          <source>mydata</source>
          <target state="translated">mydata</target>
        </trans-unit>
        <trans-unit id="5563318762e8b3e4908b268e721e529899d18b32" translate="yes" xml:space="preserve">
          <source>myscript.pig</source>
          <target state="translated">myscript.pig</target>
        </trans-unit>
        <trans-unit id="d1854cae891ec7b29161ccaf79a24b00c274bdaa" translate="yes" xml:space="preserve">
          <source>n</source>
          <target state="translated">n</target>
        </trans-unit>
        <trans-unit id="6ae999552a0d2dca14d62e2bc8b764d377b1dd6c" translate="yes" xml:space="preserve">
          <source>name</source>
          <target state="translated">name</target>
        </trans-unit>
        <trans-unit id="848a3a40c1893933e2fe08d79f79a1dfcb2ea791" translate="yes" xml:space="preserve">
          <source>native.jar</source>
          <target state="translated">native.jar</target>
        </trans-unit>
        <trans-unit id="62f8b0e19a855a99dd4550a22f61dbf860002d3a" translate="yes" xml:space="preserve">
          <source>nbHash</source>
          <target state="translated">nbHash</target>
        </trans-unit>
        <trans-unit id="350e901cb4eadef1fd65caf704b36ac4d8e0a749" translate="yes" xml:space="preserve">
          <source>negative (negation)</source>
          <target state="translated">ひてい</target>
        </trans-unit>
        <trans-unit id="f6ad08668033b7fa180febda5bd1ca736a694cb5" translate="yes" xml:space="preserve">
          <source>nested_alias</source>
          <target state="translated">nested_alias</target>
        </trans-unit>
        <trans-unit id="bde4b5f1c9c7e3c5348138860f1d9c279eb01a1e" translate="yes" xml:space="preserve">
          <source>nested_block</source>
          <target state="translated">nested_block</target>
        </trans-unit>
        <trans-unit id="633aad70ed12b9dca814ee27ef65a287002ed77c" translate="yes" xml:space="preserve">
          <source>nested_exp</source>
          <target state="translated">nested_exp</target>
        </trans-unit>
        <trans-unit id="9d18f5981a3b7e56ae92b5ad9a5e1fb10def39f0" translate="yes" xml:space="preserve">
          <source>nested_op</source>
          <target state="translated">nested_op</target>
        </trans-unit>
        <trans-unit id="c1ca3272496494b620482ab89138271a876ef300" translate="yes" xml:space="preserve">
          <source>no &lt;a href=&quot;basic#limit&quot;&gt;LIMIT&lt;/a&gt; operator</source>
          <target state="translated">&lt;a href=&quot;basic#limit&quot;&gt;LIMIT&lt;/a&gt;演算子なし</target>
        </trans-unit>
        <trans-unit id="e1abb385d420461d471a43ff66423b403332c427" translate="yes" xml:space="preserve">
          <source>no parameters</source>
          <target state="translated">パラメーターなし</target>
        </trans-unit>
        <trans-unit id="71f8e7976e4cbc4561c9d62fb283e7f788202acb" translate="yes" xml:space="preserve">
          <source>none</source>
          <target state="translated">none</target>
        </trans-unit>
        <trans-unit id="557f255516719ea16f8f4a0aae1166054e2c9b43" translate="yes" xml:space="preserve">
          <source>not</source>
          <target state="translated">not</target>
        </trans-unit>
        <trans-unit id="314fdd253172b46ec5e9c201230d49197f8bbf32" translate="yes" xml:space="preserve">
          <source>not equal</source>
          <target state="translated">不揃い</target>
        </trans-unit>
        <trans-unit id="3a230353f0073e04f9a1e459a962979ad87e9ed4" translate="yes" xml:space="preserve">
          <source>not yet</source>
          <target state="translated">未だ</target>
        </trans-unit>
        <trans-unit id="5fe69458fe73970ad0f72fce0f8c911526f3c6bc" translate="yes" xml:space="preserve">
          <source>not, null</source>
          <target state="translated">ではない</target>
        </trans-unit>
        <trans-unit id="3add7b9612102f2a7dbe4ed4fe886e07e847c24d" translate="yes" xml:space="preserve">
          <source>notes</source>
          <target state="translated">notes</target>
        </trans-unit>
        <trans-unit id="a0baf8441e98922e819e2f027bbe43665d1ebb77" translate="yes" xml:space="preserve">
          <source>null: null</source>
          <target state="translated">ヌル:ヌル</target>
        </trans-unit>
        <trans-unit id="d3c8e4cafa5bfc9cfaff03c269ea885c116299bb" translate="yes" xml:space="preserve">
          <source>on/off</source>
          <target state="translated">on/off</target>
        </trans-unit>
        <trans-unit id="8cc1cd875c344fca5e489441d4263b9de52401d6" translate="yes" xml:space="preserve">
          <source>onschema, or, order, outer, output</source>
          <target state="translated">オンスキーマ、または、順序、外部、出力</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="1119e3058dacb45b034831d9e4934b9d763f6420" translate="yes" xml:space="preserve">
          <source>org.apache.pig.data.DataBag: DataBag</source>
          <target state="translated">org.apache.pig.data.DataBag:DataBag</target>
        </trans-unit>
        <trans-unit id="bf17fa07528d9e1976d77a982cac0cb3acae923f" translate="yes" xml:space="preserve">
          <source>org.apache.pig.data.Tuple: Tuple</source>
          <target state="translated">org.apache.pig.data.Tuple。タプル</target>
        </trans-unit>
        <trans-unit id="150eb3fc5056ed4d744f05855fa27c8fcbd71925" translate="yes" xml:space="preserve">
          <source>org.apache.pig.piggybank.comparison - for custom comparator used by ORDER operator</source>
          <target state="translated">org.apache.pig.piggybank.comparison-ORDER オペレータが使用するカスタムコンパレータ用</target>
        </trans-unit>
        <trans-unit id="c8c1f5d42d40602dbdd1ea955c0e2dd9dc0a4200" translate="yes" xml:space="preserve">
          <source>org.apache.pig.piggybank.evaluation - for eval functions like aggregates and column transformations</source>
          <target state="translated">org.apache.pig.piggybank.eval-集約やカラム変換などのeval関数用</target>
        </trans-unit>
        <trans-unit id="8d4c66f9feb727c04eadf2d6dc125c9ef551d51a" translate="yes" xml:space="preserve">
          <source>org.apache.pig.piggybank.filtering - for functions used in FILTER operator</source>
          <target state="translated">org.apache.pig.piggybank.filtering-FILTER演算子で使用される関数用</target>
        </trans-unit>
        <trans-unit id="7bf61423c0608712e782bc0417779ea9f301d2b3" translate="yes" xml:space="preserve">
          <source>org.apache.pig.piggybank.grouping - for grouping functions</source>
          <target state="translated">org.apache.pig.piggybank.grouping-グループ化機能用</target>
        </trans-unit>
        <trans-unit id="6505ebc292635d1179d2a3cf613c604a265f0995" translate="yes" xml:space="preserve">
          <source>org.apache.pig.piggybank.storage - for load/store functions</source>
          <target state="translated">org.apache.pig.piggybank.storage-ロードストア関数用</target>
        </trans-unit>
        <trans-unit id="bd4ff58b9d3a86d12cd6c08e32181c54bae28208" translate="yes" xml:space="preserve">
          <source>org.joda.time.DateTime: org.joda.time.DateTime</source>
          <target state="translated">org.joda.time.DateTime:org.joda.time.DateTime</target>
        </trans-unit>
        <trans-unit id="1029d67644815d428f554e390aa966d57a0b29b8" translate="yes" xml:space="preserve">
          <source>output</source>
          <target state="translated">output</target>
        </trans-unit>
        <trans-unit id="785843bfeadec6afa912b4849d37bc946d4214f3" translate="yes" xml:space="preserve">
          <source>outputFunctionSchema - Defines a script delegate function that defines schema for this function depending upon the input type. This is needed for functions that can accept generic types and perform generic operations on these types. A simple example is square which can accept multiple types. SchemaFunction for this type is a simple identity function (same schema as input).</source>
          <target state="translated">outputFunctionSchema-入力型に応じてこの関数のスキーマを定義するスクリプトデリゲート関数を定義します。これは、一般的な型を受け入れ、これらの型に対して一般的な操作を行うことができる関数に必要です。単純な例としては、複数の型を受け入れることができる square があります。この型の SchemaFunction は、単純な ID 関数 (入力と同じスキーマ)です。</target>
        </trans-unit>
        <trans-unit id="e147a18a11f266b2b5c1e125cf68c4165355b7ef" translate="yes" xml:space="preserve">
          <source>outputSchema - Defines schema for a script UDF in a format that Pig understands and is able to parse.</source>
          <target state="translated">outputSchema-スクリプト UDF のスキーマを定義する。</target>
        </trans-unit>
        <trans-unit id="2af2fead64f62b0673f546007dce525d44212a39" translate="yes" xml:space="preserve">
          <source>outputSchema - Defines schema for a script udf in a format that Pig understands and is able to parse.</source>
          <target state="translated">outputSchema-スクリプト udf のスキーマを、Pig が理解してパースできる形式で定義する。</target>
        </trans-unit>
        <trans-unit id="f94788b8cc5e617b276cdad10b777732f19a04f9" translate="yes" xml:space="preserve">
          <source>outputSchema - Defines the schema for a UDF in a format that Pig understands.</source>
          <target state="translated">outputSchema-Pig が理解できる形式で UDF のスキーマを定義する.</target>
        </trans-unit>
        <trans-unit id="3565989b13e3d44fe3b50a5c97cfc0c95681665c" translate="yes" xml:space="preserve">
          <source>parallel, pig, PigDump, PigStorage, pwd</source>
          <target state="translated">パラレル、ピッグ、ピッグダンプ、ピッグストレージ、pwd</target>
        </trans-unit>
        <trans-unit id="df06651788c884556a0b4b290fb40475ec9a45ba" translate="yes" xml:space="preserve">
          <source>param</source>
          <target state="translated">param</target>
        </trans-unit>
        <trans-unit id="1c3e1bc85a875ead22e0b4d35c566940f1afe636" translate="yes" xml:space="preserve">
          <source>param_name</source>
          <target state="translated">param_name</target>
        </trans-unit>
        <trans-unit id="15730e397365f1ab4336903a739ceb55ea452562" translate="yes" xml:space="preserve">
          <source>param_value</source>
          <target state="translated">param_value</target>
        </trans-unit>
        <trans-unit id="3150ecd5e0294534a81ae047ddac559de481d774" translate="yes" xml:space="preserve">
          <source>path</source>
          <target state="translated">path</target>
        </trans-unit>
        <trans-unit id="c9616f93828582ec9550918516651f47e26d92b1" translate="yes" xml:space="preserve">
          <source>pattern matching</source>
          <target state="translated">パターンマッチング</target>
        </trans-unit>
        <trans-unit id="2cd4ba93087f27499adb46f6a91ddeb729b9966b" translate="yes" xml:space="preserve">
          <source>pig</source>
          <target state="translated">pig</target>
        </trans-unit>
        <trans-unit id="3ad608ebee6fe22cbcf8c64716dad3292c05c293" translate="yes" xml:space="preserve">
          <source>pig {-param param_name = param_value | -param_file file_name} [-debug | -dryrun] script</source>
          <target state="translated">pig {-param param_name=param_value</target>
        </trans-unit>
        <trans-unit id="9c000aaab5d05bb9f08b1561ec32fa8ce70c7619" translate="yes" xml:space="preserve">
          <source>pig.alias</source>
          <target state="translated">pig.alias</target>
        </trans-unit>
        <trans-unit id="808c5ab7715229e9e2de66ef0d37693ffa625222" translate="yes" xml:space="preserve">
          <source>pig.auto.local.enabled - Turns on/off auto local mode feature (false by default).</source>
          <target state="translated">pig.auto.local.enabled-自動ローカルモード機能をオンオフにする(デフォルトでは false)。</target>
        </trans-unit>
        <trans-unit id="861425ba2faf9f9a353517387f43768f7c4a29c3" translate="yes" xml:space="preserve">
          <source>pig.auto.local.input.maxbytes - Controls the max threshold size (in bytes) to convert jobs to run in local mode (100MB by default).</source>
          <target state="translated">pig.auto.local.input.maxbytes-ローカルモードで実行するジョブを変換するための最大しきい値サイズ(バイト単位)を制御する(デフォルトでは 100MB)。</target>
        </trans-unit>
        <trans-unit id="aacffe2445df5c2c1c590fe0b35aa80284c6418f" translate="yes" xml:space="preserve">
          <source>pig.blacklist</source>
          <target state="translated">pig.blacklist</target>
        </trans-unit>
        <trans-unit id="940bc5f34a827f79a9e6c7fae083d211d9f12bb8" translate="yes" xml:space="preserve">
          <source>pig.bloomjoin.hash.functions - The type of hash function to use. Valid values are 'jenkins' and 'murmur'. Default is murmur.</source>
          <target state="translated">pig.bloomjoin.hash.functions-使用するハッシュ関数の種類。有効な値は 'jenkins' と 'murmurur' です。デフォルトは 'murmurur' です。</target>
        </trans-unit>
        <trans-unit id="6c64ce134ab9533c98149e91f43cd2b58aa68203" translate="yes" xml:space="preserve">
          <source>pig.bloomjoin.hash.types - The number of hash functions to be used in bloom computation. It determines the probability of false positives. Higher the number lower the false positives. Too high a value can increase the cpu time. Default value is 3.</source>
          <target state="translated">pig.bloomjoin.hash.types-ブルーム計算で利用されるハッシュ関数の数です。誤検出の確率を決定します。数値が高ければ高いほど偽陽性の確率は低くなります。値が高すぎるとCPU時間が長くなります。デフォルト値は3です。</target>
        </trans-unit>
        <trans-unit id="3aca1476490c9b113d64709bd1c0f0028eeb2ea2" translate="yes" xml:space="preserve">
          <source>pig.bloomjoin.num.filters - The number of bloom filters that will be created. Default is 1 for map strategy and 11 for reduce strategy.</source>
          <target state="translated">pig.bloomjoin.num.filters-作成されるブルームフィルタの数。デフォルトはマップストラテジーの場合は1、リダクションストラテジーの場合は11です。</target>
        </trans-unit>
        <trans-unit id="74bd74ccbfac9969a76ef8a14f97389fd750e64b" translate="yes" xml:space="preserve">
          <source>pig.bloomjoin.strategy - The valid values for this are 'map' and 'reduce'. Default value is map. Bloom join has two different kind of implementations to be more efficient in different cases. In general, there is an extra reduce step in the DAG for construction of the bloom filter(s).</source>
          <target state="translated">pig.bloomjoin.strategy-有効な値は 'map' と 'reduce' です。デフォルト値は map です。ブルーム結合には、異なるケースでより効率的になるように、2種類の異なる実装があります。一般的には、ブルームフィルタを構築するためのDAGの中にreduceステップが追加されます。</target>
        </trans-unit>
        <trans-unit id="c812d84985fec2474807034b1db55376e84bade1" translate="yes" xml:space="preserve">
          <source>pig.bloomjoin.vectorsize.bytes - The size in bytes of the bit vector to be used for the bloom filter. A bigger vector size will be needed when the number of distinct keys is higher. Default value is 1048576 (1MB).</source>
          <target state="translated">pig.bloomjoin.vectorsize.bytes-ブルームフィルタに利用されるビットベクトルのバイト数。別個のキーの数が多い場合は、より大きなベクタサイズが必要になります。デフォルト値は 1048576 (1MB)です。</target>
        </trans-unit>
        <trans-unit id="99c22460178dc2e5768cbb054929d6117aaca7b6" translate="yes" xml:space="preserve">
          <source>pig.command.line</source>
          <target state="translated">pig.command.line</target>
        </trans-unit>
        <trans-unit id="b6eb160c376beb7aaf17e1466c4f139ca199a0f0" translate="yes" xml:space="preserve">
          <source>pig.exec.reducers.bytes.per.reducer - Defines the number of input bytes per reduce; default value is 1000*1000*1000 (1GB).</source>
          <target state="translated">pig.exec.reducers.bytes.per.reducer-リデュースごとの入力バイト数を定義します;デフォルト値は 1000*1000*1000 (1GB)です。</target>
        </trans-unit>
        <trans-unit id="f7d01c4ea56c00cbef9d8789e5cb117764e4bfd7" translate="yes" xml:space="preserve">
          <source>pig.exec.reducers.max - Defines the upper bound on the number of reducers; default is 999.</source>
          <target state="translated">pig.exec.reducers.max-レデューサの数の上限を定義する;デフォルトは 999 です。</target>
        </trans-unit>
        <trans-unit id="b886d06bf13af6bb1dd644093bce236d291a9ada" translate="yes" xml:space="preserve">
          <source>pig.hadoop.version</source>
          <target state="translated">pig.hadoop.version</target>
        </trans-unit>
        <trans-unit id="4710e1ce35625f55863711a9f6cc164442e6e9c8" translate="yes" xml:space="preserve">
          <source>pig.input.dirs</source>
          <target state="translated">pig.input.dirs</target>
        </trans-unit>
        <trans-unit id="6d579ff888e4a47ed94066c5f7f35f6b882baf90" translate="yes" xml:space="preserve">
          <source>pig.jar</source>
          <target state="translated">pig.jar</target>
        </trans-unit>
        <trans-unit id="6f7f99e141b45e166f408fe9a3fa9efdf884564e" translate="yes" xml:space="preserve">
          <source>pig.job.feature</source>
          <target state="translated">pig.job.feature</target>
        </trans-unit>
        <trans-unit id="45c54a975e6a0f428954facd849a7362abf8b3ea" translate="yes" xml:space="preserve">
          <source>pig.map.output.dirs</source>
          <target state="translated">pig.map.output.dirs</target>
        </trans-unit>
        <trans-unit id="e38c075e70cad641acad7c550f489eaf755d5006" translate="yes" xml:space="preserve">
          <source>pig.maxCombinedSplitSize &amp;ndash; Specifies the size, in bytes, of data to be processed by a single map. Smaller files are combined untill this size is reached.</source>
          <target state="translated">pig.maxCombinedSplitSize &amp;ndash;単一のマップによって処理されるデータのサイズをバイト単位で指定します。 このサイズに達するまで、小さいファイルが結合されます。</target>
        </trans-unit>
        <trans-unit id="d38e6133b2e6977e820e5a4f92e7aaa45ee34d9b" translate="yes" xml:space="preserve">
          <source>pig.parent.jobid</source>
          <target state="translated">pig.parent.jobid</target>
        </trans-unit>
        <trans-unit id="740ac63521067a17773c1dec492906d44fa1309e" translate="yes" xml:space="preserve">
          <source>pig.reduce.output.dirs</source>
          <target state="translated">pig.reduce.output.dirs</target>
        </trans-unit>
        <trans-unit id="2fab383b8d09405c047b4193a07ca732e3dead0d" translate="yes" xml:space="preserve">
          <source>pig.script</source>
          <target state="translated">pig.script</target>
        </trans-unit>
        <trans-unit id="6ab42a2dabe080c3084761046b9ab2462091af9b" translate="yes" xml:space="preserve">
          <source>pig.script.features</source>
          <target state="translated">pig.script.features</target>
        </trans-unit>
        <trans-unit id="cf5b21b82da036e7264d300ed9dfd67b4757dbbc" translate="yes" xml:space="preserve">
          <source>pig.script.id</source>
          <target state="translated">pig.script.id</target>
        </trans-unit>
        <trans-unit id="00e051c99733de8faf879a2815c9aa781b617ee3" translate="yes" xml:space="preserve">
          <source>pig.splitCombination &amp;ndash; Turns combine split files on or off (set to &amp;ldquo;true&amp;rdquo; by default).</source>
          <target state="translated">pig.splitCombination &amp;ndash;分割ファイルの結合をオンまたはオフにします（デフォルトでは「true」に設定されています）。</target>
        </trans-unit>
        <trans-unit id="e361d4cfb587cb9dd768dd4be150dd791fd28122" translate="yes" xml:space="preserve">
          <source>pig.tmpfilecompression - Determines if the temporary files should be compressed or not (set to false by default).</source>
          <target state="translated">pig.tmpfilecompression-一時ファイルを圧縮するかどうかを決める(デフォルトでは false に設定)。</target>
        </trans-unit>
        <trans-unit id="00bb3d81f68f0c4ed3812e5fcda6e06647dc8d89" translate="yes" xml:space="preserve">
          <source>pig.tmpfilecompression.codec - Specifies which compression codec to use. Currently, Pig accepts &quot;gz&quot; and &quot;lzo&quot; as possible values. However, because LZO is under GPL license (and disabled by default) you will need to configure your cluster to use the LZO codec to take advantage of this feature. For details, see http://code.google.com/p/hadoop-gpl-compression/wiki/FAQ.</source>
          <target state="translated">pig.tmpfilecompression.codec-使用する圧縮コーデックを指定する 現在、Pig は可能な値として &quot;gz&quot; と &quot;lzo&quot; を受け付けています。しかし、LZO は GPL ライセンス下にあるため (デフォルトでは無効になっています)、この機能を利用するには LZO コーデックを使用するようにクラスタを設定する必要があります。詳細については、http:/code.google.comphadoop-gpl-compressionwikiFAQを参照してください。</target>
        </trans-unit>
        <trans-unit id="cfe3bdad6d181d60eb75188040f408ab794ae3ba" translate="yes" xml:space="preserve">
          <source>pig.user.cache.enabled - Turn on/off user jar cache feature (false by default).</source>
          <target state="translated">pig.user.cache.enabled-ユーザー jar キャッシュ機能をオフにする (デフォルトでは false)。</target>
        </trans-unit>
        <trans-unit id="191425d805d34f939a2d9e32ac452419c899aacf" translate="yes" xml:space="preserve">
          <source>pig.user.cache.location - Path on HDFS that will be used a staging directory for the user jar cache (defaults to pig.temp.dir or /tmp).</source>
          <target state="translated">pig.user.cache.location-ユーザー jar キャッシュのためのステージングディレクトリとして使用される HDFS 上のパス (デフォルトは pig.temp.dir または tmp)。</target>
        </trans-unit>
        <trans-unit id="c73c3982af91915c25d6147b12c3a9a01acdb51b" translate="yes" xml:space="preserve">
          <source>pig.version</source>
          <target state="translated">pig.version</target>
        </trans-unit>
        <trans-unit id="b333ca6a072d77ad3a739784d99c35e83f769b81" translate="yes" xml:space="preserve">
          <source>pig.whitelist</source>
          <target state="translated">pig.whitelist</target>
        </trans-unit>
        <trans-unit id="a54fbd03df70b9d1cea73703499f38253f83a64c" translate="yes" xml:space="preserve">
          <source>pig_latin_fragment</source>
          <target state="translated">pig_latin_fragment</target>
        </trans-unit>
        <trans-unit id="82ee5e54eea0743289b96abeff3b8f6ede391f45" translate="yes" xml:space="preserve">
          <source>pigunit.jar</source>
          <target state="translated">pigunit.jar</target>
        </trans-unit>
        <trans-unit id="d4cb54f256d68e14ecfb3f7848c19f0edba1b97a" translate="yes" xml:space="preserve">
          <source>pluck(expression2)</source>
          <target state="translated">pluck(expression2)</target>
        </trans-unit>
        <trans-unit id="c4c6c5725301c9d2df7f9eb4507a04cef2f9b0c7" translate="yes" xml:space="preserve">
          <source>positive</source>
          <target state="translated">positive</target>
        </trans-unit>
        <trans-unit id="cc1a983f3bc8da6e475d6df7572f2c9410920807" translate="yes" xml:space="preserve">
          <source>prepareToRead(): Through this method the RecordReader associated with the InputFormat provided by the LoadFunc is passed to the LoadFunc. The RecordReader can then be used by the implementation in getNext() to return a tuple representing a record of data back to pig.</source>
          <target state="translated">prepareToRead()を使用します。このメソッドを通して、LoadFuncが提供するInputFormatに関連付けられたRecordReaderがLoadFuncに渡されます。このRecordReaderは、getNext()の実装で使用され、データのレコードを表すタプルをpigに返すことができます。</target>
        </trans-unit>
        <trans-unit id="ad69edc37641b7cb01ecc8c4e94d78378a4b6ca2" translate="yes" xml:space="preserve">
          <source>prepareToWrite(): Writing of the data is through the OutputFormat provided by the StoreFunc. In prepareToWrite() the RecordWriter associated with the OutputFormat provided by the StoreFunc is passed to the StoreFunc. The RecordWriter can then be used by the implementation in putNext() to write a tuple representing a record of data in a manner expected by the RecordWriter.</source>
          <target state="translated">prepareToWrite()を使用します。データの書き込みは、StoreFuncが提供するOutputFormatを介して行う。prepareToWrite()では、StoreFuncが提供するOutputFormatに関連付けられたRecordWriterをStoreFuncに渡す。その後、このRecordWriterはputNext()の実装で使用され、RecordWriterが期待する方法でデータのレコードを表すタプルを書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="d0449e86077449843777d1958aff83cf086dbcba" translate="yes" xml:space="preserve">
          <source>properties</source>
          <target state="translated">properties</target>
        </trans-unit>
        <trans-unit id="9dc3be245effe943b4b96ec84c483ecbd5e13756" translate="yes" xml:space="preserve">
          <source>pushProjection(): This method tells LoadFunc which fields are required in the Pig script, thus enabling LoadFunc to optimize performance by loading only those fields that are needed. pushProjection() takes a requiredFieldList. requiredFieldList is read only and cannot be changed by LoadFunc. requiredFieldList includes a list of requiredField: each requiredField indicates a field required by the Pig script; each requiredField includes index, alias, type (which is reserved for future use), and subFields. Pig will use the column index requiredField.index to communicate with the LoadFunc about the fields required by the Pig script. If the required field is a map, Pig will optionally pass requiredField.subFields which contains a list of keys that the Pig script needs for the map. For example, if the Pig script needs two keys for the map, &quot;key1&quot; and &quot;key2&quot;, the subFields for that map will contain two requiredField; the alias field for the first RequiredField will be &quot;key1&quot; and the alias for the second requiredField will be &quot;key2&quot;. LoadFunc will use requiredFieldResponse.requiredFieldRequestHonored to indicate whether the pushProjection() request is honored.</source>
          <target state="translated">pushProjection()を使用しています。pushProjection()は requiredFieldList を受け取ります。 requiredFieldList は読み込み専用であり、LoadFunc が変更することはできません。各 requiredField には index、alias、type (将来的に使用するために予約されている)、subFields が含まれます。Pig はカラム index requiredField.index を使用して、Pig スクリプトが必要とするフィールドについて LoadFunc と通信します。必要なフィールドがマップである場合、Pigはオプションとして、Pigスクリプトがマップに必要なキーのリストを含むrequiredField.subFieldsを渡します。例えば、Pig スクリプトがマップに &quot;key1&quot; と &quot;key2&quot; の 2 つのキーを必要とする場合、そのマップの subFields には 2 つの requiredField が含まれます。LoadFuncは、pushProjection()リクエストが成功したかどうかを示すために、requiredFieldResponse.requiredFieldRequestHonoredを使用します。</target>
        </trans-unit>
        <trans-unit id="d2649a23419a61ade82cbb59be5cabeb06d7b2ac" translate="yes" xml:space="preserve">
          <source>putNext(): This method is called by Pig runtime to write the next tuple of data - this is the method wherein the implementation will use the underlying RecordWriter to write the Tuple out.</source>
          <target state="translated">putNext()を使用しています。このメソッドは、次のデータのタプルを書き込むために Pig ランタイムから呼び出されます-これは、実装がタプルを書き出すために基礎となる RecordWriter を使用するメソッドです。</target>
        </trans-unit>
        <trans-unit id="48663266fbdf49b4cd9cf3918220755ba0772887" translate="yes" xml:space="preserve">
          <source>querystring</source>
          <target state="translated">querystring</target>
        </trans-unit>
        <trans-unit id="f59118712ff45e3f8132cdd3ecfcfc6d3d2fa490" translate="yes" xml:space="preserve">
          <source>quit</source>
          <target state="translated">quit</target>
        </trans-unit>
        <trans-unit id="6ddecab4898ef80299e2ea07094f722c3586ab07" translate="yes" xml:space="preserve">
          <source>record name</source>
          <target state="translated">レコード名</target>
        </trans-unit>
        <trans-unit id="feadda4772a8d78ac57361346b7b06452035ca11" translate="yes" xml:space="preserve">
          <source>reduce - Join keys are sent from the map to the reducer partitioned by hashcode of the key with pig.bloomjoin.num.filters number of partitions. In the reducers, one bloom filter is then computed per partition. Number of reducers are set equal to the number of partitions allowing for each bloom filter to be computed in parallel. The default value of pig.bloomjoin.num.filters is 11 for this strategy. This is efficient for larger datasets with lot of maps or very large bloom vector size. In this case size of keys sent to the reducer is smaller than sending bloom filters to reducer for aggregation making it efficient.</source>
          <target state="translated">reduce-結合キーを、パーティションの数を pig.bloomjoin.num.filters で指定したキーのハッシュコードで分割して、マップからレデューサに送信します。そして、レデューサーでは、パーティションごとに1つのブルームフィルタが計算されます。レデューサーの数はパーティションの数と同じに設定され、各ブルームフィルタを並列に計算できるようになります。pig.bloomjoin.num.filtersのデフォルト値は11です。これは、多くのマップを持つ大きなデータセットや、非常に大きなブルームベクタサイズを持つデータセットに効率的です。この場合、ブルームフィルタをアグリゲーションのためにレデューサに送るよりも、レデューサに送る鍵のサイズを小さくすることで、効率的にブルームフィルタを計算することができます。</target>
        </trans-unit>
        <trans-unit id="d6a8e6cdd4cabc2934bca3497a954a09b02b3c74" translate="yes" xml:space="preserve">
          <source>regex</source>
          <target state="translated">regex</target>
        </trans-unit>
        <trans-unit id="6ccf2509adcb26d39d1e02a68150b5ccd4fb8879" translate="yes" xml:space="preserve">
          <source>register, returns, right, rm, rmf, rollup, run</source>
          <target state="translated">register,returns,right,rm,rmf,rollup,run</target>
        </trans-unit>
        <trans-unit id="b662afc111fb2b6b1d7de84eccd892fee904d8e0" translate="yes" xml:space="preserve">
          <source>relToAbsPathForStoreLocation(): Pig runtime will call this method to allow the Storer to convert a relative store location to an absolute location. An implementation is provided in StoreFunc which handles this for FileSystem based locations.</source>
          <target state="translated">relToAbsPathForStoreLocation()。Pig ランタイムはこのメソッドを呼び出して、ストアラーが相対的なストアロケーションを絶対的なロケーションに変換できるようにします。FileSystem ベースのロケーションのための実装が StoreFunc で提供されています。</target>
        </trans-unit>
        <trans-unit id="2d5badbd08164337ad2dcfead2e34faf2fa9e576" translate="yes" xml:space="preserve">
          <source>relation</source>
          <target state="translated">relation</target>
        </trans-unit>
        <trans-unit id="219942efdaef3590681817037e89002aa3dfce13" translate="yes" xml:space="preserve">
          <source>relativeToAbsolutePath(): Pig runtime will call this method to allow the Loader to convert a relative load location to an absolute location. The default implementation provided in LoadFunc handles this for FileSystem locations. If the load source is something else, loader implementation may choose to override this.</source>
          <target state="translated">relativeToAbsolutePath()を使用します。Pig ランタイムはこのメソッドを呼び出して、ローダが相対的なロードロケーションを絶対的なロケーションに変換できるようにします。LoadFunc で提供されているデフォルトの実装では、FileSystem のロケーションに対してこれを処理します。ロードソースが他の何かである場合、ローダの実装はこれをオーバーライドすることを選択することができます。</target>
        </trans-unit>
        <trans-unit id="f35f80e2d4da3f67a165d630cebb14023847c1ec" translate="yes" xml:space="preserve">
          <source>returns 1</source>
          <target state="translated">1を返します。</target>
        </trans-unit>
        <trans-unit id="e1b965eceba98723e333fef56fb45910f949c163" translate="yes" xml:space="preserve">
          <source>returns number of bytes in the array</source>
          <target state="translated">配列のバイト数を返します。</target>
        </trans-unit>
        <trans-unit id="4ac38a0f4ec8223230b951d3acdf1d3568317ca1" translate="yes" xml:space="preserve">
          <source>returns number of characters in the array</source>
          <target state="translated">配列の文字数を返します。</target>
        </trans-unit>
        <trans-unit id="c3f7ea1a5ee54187e340e9432ffba38197b25361" translate="yes" xml:space="preserve">
          <source>returns number of fields in the tuple</source>
          <target state="translated">タプル内のフィールド数を返します。</target>
        </trans-unit>
        <trans-unit id="3efd620386bbc7dce17c73b6ec72bc374c214971" translate="yes" xml:space="preserve">
          <source>returns number of key/value pairs in map</source>
          <target state="translated">マップ内のキー値ペアの数を返します。</target>
        </trans-unit>
        <trans-unit id="ed1e52ef3ec7630fa32fb20162755f33b7539c56" translate="yes" xml:space="preserve">
          <source>returns number of tuples in bag</source>
          <target state="translated">バッグ内のタプルの数を返します。</target>
        </trans-unit>
        <trans-unit id="df6ad19037c97987c4ff9792810c0e145356717c" translate="yes" xml:space="preserve">
          <source>run</source>
          <target state="translated">run</target>
        </trans-unit>
        <trans-unit id="289cad56717abafdbd71327e1654f469b10b8fc0" translate="yes" xml:space="preserve">
          <source>run [&amp;ndash;param param_name = param_value] [&amp;ndash;param_file file_name] script</source>
          <target state="translated">[&amp;ndash;param param_name = param_value] [&amp;ndash;param_file file_name]スクリプトを実行</target>
        </trans-unit>
        <trans-unit id="39f9bc68f662c845ee9b9437b10fc13df0936663" translate="yes" xml:space="preserve">
          <source>sample, set, ship, SIZE, split, stderr, stdin, stdout, store, stream, SUM</source>
          <target state="translated">sample、set、ship、SIZE、split、stderr、stdin、stdout、store、stream、SUM</target>
        </trans-unit>
        <trans-unit id="fe7042cb74a5576f32a19f0f44a2c6e304936b11" translate="yes" xml:space="preserve">
          <source>schema</source>
          <target state="translated">schema</target>
        </trans-unit>
        <trans-unit id="59381959267edb539f2864135b4e66d00a1cbbc4" translate="yes" xml:space="preserve">
          <source>schemaFunction - Defines delegate function and is not registered to Pig.</source>
          <target state="translated">schemaFunction-デリゲート関数を定義し、Pigには登録されていません。</target>
        </trans-unit>
        <trans-unit id="cb5346a081dcf654061b7f897ea14d9b43140712" translate="yes" xml:space="preserve">
          <source>script</source>
          <target state="translated">script</target>
        </trans-unit>
        <trans-unit id="cca3fc13cd6479a9f94069e601a06983b96e7cf8" translate="yes" xml:space="preserve">
          <source>script1-hadoop.pig</source>
          <target state="translated">script1-hadoop.pig</target>
        </trans-unit>
        <trans-unit id="3dec84345dfe920193488ca60c5260bc822ad95f" translate="yes" xml:space="preserve">
          <source>script1-local.pig</source>
          <target state="translated">script1-local.pig</target>
        </trans-unit>
        <trans-unit id="e3feec85c4ba271506a62b555091f936ff2eaca9" translate="yes" xml:space="preserve">
          <source>script2-hadoop.pig</source>
          <target state="translated">script2-hadoop.pig</target>
        </trans-unit>
        <trans-unit id="ac5e6fa2f6c5386386ffb4cf6c524d6ce79c4e56" translate="yes" xml:space="preserve">
          <source>script2-local.pig</source>
          <target state="translated">script2-local.pig</target>
        </trans-unit>
        <trans-unit id="3bf417222a8ab3a7bbc7369f598c5c3d0d4bd4f3" translate="yes" xml:space="preserve">
          <source>serializer &amp;ndash; PigStreaming is the default serializer.</source>
          <target state="translated">シリアライザー&amp;ndash; PigStreamingがデフォルトのシリアライザーです。</target>
        </trans-unit>
        <trans-unit id="65c10dc3549fe07424148a8a4790a3341ecbc253" translate="yes" xml:space="preserve">
          <source>set</source>
          <target state="translated">set</target>
        </trans-unit>
        <trans-unit id="27c2bccc17092788a234eaadb89d1905aa482a34" translate="yes" xml:space="preserve">
          <source>set [key 'value']</source>
          <target state="translated">セット [キー '値']</target>
        </trans-unit>
        <trans-unit id="c37451eccb4a6dbf5c36054d557b8e8d3a26d1b9" translate="yes" xml:space="preserve">
          <source>setLocation(): This method is called by Pig to communicate the load location to the loader. The loader should use this method to communicate the same information to the underlying InputFormat. This method is called multiple times by pig - implementations should bear this in mind and should ensure there are no inconsistent side effects due to the multiple calls.</source>
          <target state="translated">setLocation()を使用しています。このメソッドは、ローダにロード位置を伝えるために Pig から呼び出されます。ローダはこのメソッドを使って、基礎となるInputFormatに同じ情報を伝えなければなりません。このメソッドは pig によって複数回呼び出されます-実装はこれを念頭に置き、複数回の呼び出しによる一貫性のない副作用がないことを保証しなければなりません。</target>
        </trans-unit>
        <trans-unit id="e9ea94f7f39aaa242d666ad2a300998e85e809c0" translate="yes" xml:space="preserve">
          <source>setStoreFuncUDFContextSignature(): This method will be called by Pig both in the front end and back end to pass a unique signature to the Storer. The signature can be used to store into the UDFContext any information which the Storer needs to store between various method invocations in the front end and back end. The default implementation in StoreFunc has an empty body. This method will be called before other methods.</source>
          <target state="translated">setStoreFuncUDFContextSignature()。このメソッドは、ユニークなシグネチャをStorerに渡すために、フロントエンドとバックエンドの両方でPigによって呼び出されます。このシグネチャは、フロントエンドとバックエンドの様々なメソッド呼び出しの間にストーラーが必要とする情報をUDFContextに格納するために使用されます。StoreFuncのデフォルトの実装は、空のボディを持っています。このメソッドは、他のメソッドの前に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9a07dd59f372da5493ea4f010dfdcf14597eacb1" translate="yes" xml:space="preserve">
          <source>setStoreLocation(): This method is called by Pig to communicate the store location to the storer. The storer should use this method to communicate the same information to the underlying OutputFormat. This method is called multiple times by pig - implementations should bear in mind that this method is called multiple times and should ensure there are no inconsistent side effects due to the multiple calls.</source>
          <target state="translated">setStoreLocation()。このメソッドは Pig によって呼び出され、ストアの位置をストーラーに伝えるために使われます。ストアはこのメソッドを使って、基礎となるOutputFormatに同じ情報を伝えなければなりません。このメソッドはpigによって複数回呼び出されます-実装はこのメソッドが複数回呼び出されることを念頭に置き、複数回の呼び出しによる一貫性のない副作用がないようにしなければなりません。</target>
        </trans-unit>
        <trans-unit id="12e033c767f392c814a2246911f5ac7f9b89dd13" translate="yes" xml:space="preserve">
          <source>setUdfContextSignature(): This method will be called by Pig both in the front end and back end to pass a unique signature to the Loader. The signature can be used to store into the UDFContext any information which the Loader needs to store between various method invocations in the front end and back end. A use case is to store RequiredFieldList passed to it in LoadPushDown.pushProjection(RequiredFieldList) for use in the back end before returning tuples in getNext(). The default implementation in LoadFunc has an empty body. This method will be called before other methods.</source>
          <target state="translated">setUdfContextSignature()。このメソッドはフロントエンドとバックエンドの両方で Pig によって呼び出され、 ローダに一意のシグネチャを渡します。このシグネチャは、フロントエンドとバックエンドの様々なメソッド呼び出しの間にローダが保存する必要のある情報を UDFContext に保存するために使用することができます。使用例としては、LoadPushDown.pushProjection(RequiredFieldList)に渡された RequiredFieldList を格納して、getNext()でタプルを返す前にバックエンドで使用することがあります。LoadFuncのデフォルトの実装では、空のボディを持っています。このメソッドは他のメソッドの前に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="16795633e2c1543064a3ad70ac3ba71d3d589b3b" translate="yes" xml:space="preserve">
          <source>sh</source>
          <target state="translated">sh</target>
        </trans-unit>
        <trans-unit id="5fc5a8aa65257ef36a08dce34b52ccba2673b9cb" translate="yes" xml:space="preserve">
          <source>sh subcommand subcommand_parameters</source>
          <target state="translated">sh サブコマンド サブコマンドパラメータ</target>
        </trans-unit>
        <trans-unit id="ed43a8a09e9ba56d3804e6a7a1e00adc332624b1" translate="yes" xml:space="preserve">
          <source>ship</source>
          <target state="translated">ship</target>
        </trans-unit>
        <trans-unit id="89368e1d68015693ab48ee189d0632cb5d6edfb3" translate="yes" xml:space="preserve">
          <source>size</source>
          <target state="translated">size</target>
        </trans-unit>
        <trans-unit id="8972561214bdfd4779823e480036eaf0853e3c56" translate="yes" xml:space="preserve">
          <source>startIndex</source>
          <target state="translated">startIndex</target>
        </trans-unit>
        <trans-unit id="351eb7019c1640acf10c265cc31c377fd68443b5" translate="yes" xml:space="preserve">
          <source>stderr</source>
          <target state="translated">stderr</target>
        </trans-unit>
        <trans-unit id="2accf05af6600abb460e025303e89ec81123eb7b" translate="yes" xml:space="preserve">
          <source>stopIndex</source>
          <target state="translated">stopIndex</target>
        </trans-unit>
        <trans-unit id="6256b75724ebda8516a4b8be4b2e78048862ae5b" translate="yes" xml:space="preserve">
          <source>stream.skippath</source>
          <target state="translated">stream.skippath</target>
        </trans-unit>
        <trans-unit id="ecb252044b5ea0f679ee78ec1a12904739e2904d" translate="yes" xml:space="preserve">
          <source>string</source>
          <target state="translated">string</target>
        </trans-unit>
        <trans-unit id="8a9c242dd5a175acdaea876a8e3c7a177f62e64a" translate="yes" xml:space="preserve">
          <source>string literal (quoted string)</source>
          <target state="translated">文字列リテラル</target>
        </trans-unit>
        <trans-unit id="4b35be0f7818df6954737ab957f691eb72a389d2" translate="yes" xml:space="preserve">
          <source>string1</source>
          <target state="translated">string1</target>
        </trans-unit>
        <trans-unit id="62fb1585fd37a03b137afeeedaada345f5537a00" translate="yes" xml:space="preserve">
          <source>string2</source>
          <target state="translated">string2</target>
        </trans-unit>
        <trans-unit id="146947ffd26ebace3b3d31ad81aad413493b1edb" translate="yes" xml:space="preserve">
          <source>subcommand</source>
          <target state="translated">subcommand</target>
        </trans-unit>
        <trans-unit id="4cef8f76aa8b5d782cb32839675aeeeb5450978c" translate="yes" xml:space="preserve">
          <source>subcommand_parameters</source>
          <target state="translated">subcommand_parameters</target>
        </trans-unit>
        <trans-unit id="148d46fb75d907f1fd6bcb109cb532d2ed504a21" translate="yes" xml:space="preserve">
          <source>subtraction</source>
          <target state="translated">subtraction</target>
        </trans-unit>
        <trans-unit id="5bcb0a67572de081b95d7846e7ee88ee861727b6" translate="yes" xml:space="preserve">
          <source>tags_map[chararray] - In this case, the column values are all declared to be of type chararray</source>
          <target state="translated">tags_map[chararray]-この場合,カラムの値はすべてchararray型であると宣言されます.</target>
        </trans-unit>
        <trans-unit id="04dfa3a8803d957eb45b33993e3fb9ee442d01bc" translate="yes" xml:space="preserve">
          <source>tags_map[int] - In this case, the column values are all declared to be of type int.</source>
          <target state="translated">tags_map[int]-この場合,列の値はすべてint型であると宣言されます.</target>
        </trans-unit>
        <trans-unit id="d4ead472f88a289e093783d3b0935d712e9fca04" translate="yes" xml:space="preserve">
          <source>testAgainst</source>
          <target state="translated">testAgainst</target>
        </trans-unit>
        <trans-unit id="8e6904e522da1b2af752cf30088d37b739fd30de" translate="yes" xml:space="preserve">
          <source>the presence of other operators, &lt;a href=&quot;http://pig.apache.org/docs/r0.13.0/api/org/apache/pig/impl/builtin/SampleLoader.html&quot;&gt;sample loaders&lt;/a&gt; and scalar expressions</source>
          <target state="translated">他の演算子、 &lt;a href=&quot;http://pig.apache.org/docs/r0.13.0/api/org/apache/pig/impl/builtin/SampleLoader.html&quot;&gt;サンプルローダー&lt;/a&gt; 、スカラー式の存在</target>
        </trans-unit>
        <trans-unit id="5c20cce6d54315c2cddb000c75e8b961ae3217d4" translate="yes" xml:space="preserve">
          <source>then the nulls will be dropped before the join. Since all null keys go to a single reducer, if your key is null even a small percentage of the time the gain can be significant. In one test where the key was null 7% of the time and the data was spread across 200 reducers, we saw a about a 10x speed up in the query by adding the early filters.</source>
          <target state="translated">の場合は、結合の前にヌルが削除されます。すべてのNULLキーは1つのレデューサに送られるため、わずかな割合でもNULLキーがあった場合、大きな効果が得られる可能性があります。あるテストでは、キーが7%の確率でヌルになっていて、データが200のレデューサに分散されていた場合、初期のフィルタを追加することで、クエリの処理速度が約10倍に向上しました。</target>
        </trans-unit>
        <trans-unit id="15c899639c738a04f9c4ed62a2259a4edc87f81d" translate="yes" xml:space="preserve">
          <source>timezone</source>
          <target state="translated">timezone</target>
        </trans-unit>
        <trans-unit id="b31cdfb7880447b3777d817dc31e0d2681fbd570" translate="yes" xml:space="preserve">
          <source>topN</source>
          <target state="translated">topN</target>
        </trans-unit>
        <trans-unit id="6195eb3db667e7d8c1a07529a4aee0de7f0ad219" translate="yes" xml:space="preserve">
          <source>top_queries.pig</source>
          <target state="translated">top_queries.pig</target>
        </trans-unit>
        <trans-unit id="6db4e26e48c354d90629c8e07c57726a9b3369d1" translate="yes" xml:space="preserve">
          <source>true/false</source>
          <target state="translated">true/false</target>
        </trans-unit>
        <trans-unit id="53c314cf8976dd0b8d72b26f7aaecf2b31d6da89" translate="yes" xml:space="preserve">
          <source>true/false (case insensitive)</source>
          <target state="translated">真偽</target>
        </trans-unit>
        <trans-unit id="49f80ea5aacfb5a957337dc906635fccbde446fc" translate="yes" xml:space="preserve">
          <source>tuple</source>
          <target state="translated">tuple</target>
        </trans-unit>
        <trans-unit id="3483afe4293e394f3f64e4ccdcc4835be7bb984f" translate="yes" xml:space="preserve">
          <source>tuple (.) or map (#)</source>
          <target state="translated">タプル(.)またはマップ(#)</target>
        </trans-unit>
        <trans-unit id="62e1a1503f2974c8b5134f8a623a126475288bfe" translate="yes" xml:space="preserve">
          <source>tuple constructor</source>
          <target state="translated">タプルコンストラクタ</target>
        </trans-unit>
        <trans-unit id="a519a7dbe1c866c4543eb0351b91b01587f4f95e" translate="yes" xml:space="preserve">
          <source>tuple dereference</source>
          <target state="translated">タプル参照解除</target>
        </trans-unit>
        <trans-unit id="ff547ff71465386f40d7ac704f70fa5f50ead5cb" translate="yes" xml:space="preserve">
          <source>tuple.id or tuple.(id,&amp;hellip;)</source>
          <target state="translated">tuple.idまたはtuple。（id、&amp;hellip;）</target>
        </trans-unit>
        <trans-unit id="e588de3400c8b32ed388e1b02d04018616e12331" translate="yes" xml:space="preserve">
          <source>tuple|bag|map|chararray &amp;gt; bytearray</source>
          <target state="translated">タプル|バッグ|マップ|文字配列&amp;gt;バイト配列</target>
        </trans-unit>
        <trans-unit id="d785b6f695b2f7a0177a228e0abb101046cd4b45" translate="yes" xml:space="preserve">
          <source>tutorial.jar</source>
          <target state="translated">tutorial.jar</target>
        </trans-unit>
        <trans-unit id="d0a3e7f81a9885e99049d1cae0336d269d5e47a9" translate="yes" xml:space="preserve">
          <source>type</source>
          <target state="translated">type</target>
        </trans-unit>
        <trans-unit id="e0991417d0a4350af0681c3c23799d731d54f18b" translate="yes" xml:space="preserve">
          <source>type (optional) &amp;ndash; the simple or complex data type assigned to the field</source>
          <target state="translated">type（オプション）&amp;ndash;フィールドに割り当てられた単純または複合データ型</target>
        </trans-unit>
        <trans-unit id="21f37c2d85b6166663fdc5c1ac867a126c5da8fa" translate="yes" xml:space="preserve">
          <source>union, using</source>
          <target state="translated">ユニオンを使用して</target>
        </trans-unit>
        <trans-unit id="4ba4a5bea7ab1206bfbe5536d9afbeefc514100f" translate="yes" xml:space="preserve">
          <source>userstring</source>
          <target state="translated">userstring</target>
        </trans-unit>
        <trans-unit id="39f69c278f46165447f30d10acf54277aaa3d5fc" translate="yes" xml:space="preserve">
          <source>val</source>
          <target state="translated">val</target>
        </trans-unit>
        <trans-unit id="8750707339be8cccbfc72555bda38324dc84bfaa" translate="yes" xml:space="preserve">
          <source>vals</source>
          <target state="translated">vals</target>
        </trans-unit>
        <trans-unit id="f32b67c7e26342af42efabc674d441dca0a281c5" translate="yes" xml:space="preserve">
          <source>value</source>
          <target state="translated">value</target>
        </trans-unit>
        <trans-unit id="f335be8b78cff9d5e6097742d33ad2a8d02d7b0c" translate="yes" xml:space="preserve">
          <source>value-expression</source>
          <target state="translated">value-expression</target>
        </trans-unit>
        <trans-unit id="c7601e8a0edac2b3e2d3b1558241bc8702470e5a" translate="yes" xml:space="preserve">
          <source>vectorSize</source>
          <target state="translated">vectorSize</target>
        </trans-unit>
        <trans-unit id="c692273deb2772da307ffe37041fef77bf4baa97" translate="yes" xml:space="preserve">
          <source>version</source>
          <target state="translated">version</target>
        </trans-unit>
        <trans-unit id="e9cede9b80ea3abd89c755f1117337d429162c86" translate="yes" xml:space="preserve">
          <source>void</source>
          <target state="translated">void</target>
        </trans-unit>
        <trans-unit id="11f6ad8ec52a2984abaafd7c3b516503785c2072" translate="yes" xml:space="preserve">
          <source>x</source>
          <target state="translated">x</target>
        </trans-unit>
        <trans-unit id="fb360f9c09ac8c5edb2f18be5de4e80ea4c430d0" translate="yes" xml:space="preserve">
          <source>yes</source>
          <target state="translated">yes</target>
        </trans-unit>
        <trans-unit id="66269ede72a0d0ea948bedb9e7d7a93a28006ca4" translate="yes" xml:space="preserve">
          <source>{ (19, 2), (1, 2) }</source>
          <target state="translated">{(19,2),(1,2)}</target>
        </trans-unit>
        <trans-unit id="c2ba0f5b18700619226ae3c6ebc2a674a36fdfb8" translate="yes" xml:space="preserve">
          <source>{ block | nested_block }</source>
          <target state="translated">nested_block }</target>
        </trans-unit>
        <trans-unit id="f73bb8460230ad3a8c7c05dd117175fa6930805b" translate="yes" xml:space="preserve">
          <source>{ tuple [, tuple &amp;hellip;] }</source>
          <target state="translated">{タプル[、タプル&amp;hellip;]}</target>
        </trans-unit>
        <trans-unit id="4448e1dbcb7f6e8f55f2f5b257a1169d8c4db209" translate="yes" xml:space="preserve">
          <source>{ }</source>
          <target state="translated">{}</target>
        </trans-unit>
        <trans-unit id="293f25d4e16be76701432d3626b80a23c52d0810" translate="yes" xml:space="preserve">
          <source>{%declare | %default} param_name param_value</source>
          <target state="translated">%default}param_name param_value</target>
        </trans-unit>
        <trans-unit id="0d925c28364c3c2bfc96db628642f43f7be77026" translate="yes" xml:space="preserve">
          <source>{('BOS'),('NYA'),('BAL')}</source>
          <target state="translated">{('BOS'),('NYA'),('BAL')}</target>
        </trans-unit>
        <trans-unit id="61c843a0b4395d4f60242deb43e1cf0869e62fb7" translate="yes" xml:space="preserve">
          <source>{(19,2), (18,1)}</source>
          <target state="translated">{(19,2),(18,1)}</target>
        </trans-unit>
        <trans-unit id="4e1192aaa5de7a912d3343330e9d958afd0ac192" translate="yes" xml:space="preserve">
          <source>{(data_type) | (tuple(data_type)) | (bag{tuple(data_type)}) | (map[]) } field</source>
          <target state="translated">(tuple(data_type))</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
