<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="kotlin">
    <body>
      <group id="kotlin">
        <trans-unit id="0ff7dd14bddbf16872e847e94eba176ae439d7f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is&lt;/code&gt; and &lt;code&gt;!is&lt;/code&gt; Operators</source>
          <target state="translated">&lt;code&gt;is&lt;/code&gt; および &lt;code&gt;!is&lt;/code&gt; 演算子</target>
        </trans-unit>
        <trans-unit id="d8c935a2340adaa853030be371e651ee624f1fbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isDaemon&lt;/code&gt; - if &lt;code&gt;true&lt;/code&gt;, the thread is created as a daemon thread. The Java Virtual Machine exits when the only threads running are all daemon threads.</source>
          <target state="translated">&lt;code&gt;isDaemon&lt;/code&gt; - &lt;code&gt;true&lt;/code&gt; の場合、スレッドはデーモンスレッドとして作成されます。実行中のスレッドがすべてデーモンスレッドである場合、Java仮想マシンは終了します。</target>
        </trans-unit>
        <trans-unit id="681c744b4f800b84baa915faeffc9ff5bd83c80d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isNullOrEmpty&lt;/code&gt; and &lt;code&gt;orEmpty&lt;/code&gt; extensions for some types are already present in stdlib . The first one returns &lt;code&gt;true&lt;/code&gt; if the receiver is &lt;code&gt;null&lt;/code&gt; or empty, and the second one falls back to an empty instance if the receiver is &lt;code&gt;null&lt;/code&gt;. Kotlin 1.3 provides similar extensions on collections, maps, and arrays of objects.</source>
          <target state="translated">&lt;code&gt;isNullOrEmpty&lt;/code&gt; 一部のタイプのisNullOrEmptyおよび &lt;code&gt;orEmpty&lt;/code&gt; 拡張は、stdlibにすでに存在しています。1つ目は、レシーバーが &lt;code&gt;null&lt;/code&gt; または空の場合は &lt;code&gt;true&lt;/code&gt; を返し、2つ目はレシーバーが &lt;code&gt;null&lt;/code&gt; の場合は空のインスタンスにフォールバックします。Kotlin 1.3は、オブジェクトのコレクション、マップ、配列に同様の拡張機能を提供します。</target>
        </trans-unit>
        <trans-unit id="de90a696bcf57b1bcc31ff52baec77b7d9b7ca59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;it&lt;/code&gt; is used inside a lambda to &lt;a href=&quot;lambdas#it-implicit-name-of-a-single-parameter&quot;&gt;refer to its parameter implicitly&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;it&lt;/code&gt; ために、ラムダの内部で使用されている&lt;a href=&quot;lambdas#it-implicit-name-of-a-single-parameter&quot;&gt;暗黙的にそのパラメータを参照してください。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4aa50b82a0b8e0f99fc4186e17e98ebb7ffcf4b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;it&lt;/code&gt;: implicit name of a single parameter</source>
          <target state="translated">&lt;code&gt;it&lt;/code&gt; ：単一のパラメーターの暗黙的な名前</target>
        </trans-unit>
        <trans-unit id="ea358e1a14d266c00c6f85e11265be634997f6a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jar&lt;/code&gt; is disabled in favor of the target's JAR task (e.g. &lt;code&gt;jvmJar&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;jar&lt;/code&gt; ターゲットのJARタスク（ &lt;code&gt;jvmJar&lt;/code&gt; など）のためにjarが無効になっています</target>
        </trans-unit>
        <trans-unit id="8bd780c3978b00b5702c58c38c5608cf9ed18504" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;javacArguments&lt;/code&gt;: A base64-encoded list of the options passed to javac. See &lt;a href=&quot;#apjavac-options-encoding&quot;&gt;AP/javac options encoding&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;javacArguments&lt;/code&gt; ：javacに渡されるオプションのbase64エンコードリスト。詳細については、&lt;a href=&quot;#apjavac-options-encoding&quot;&gt;AP / javacオプションのエンコーディング&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5bd2a62a78ed2b4ffde2081b0ff49dda401f06dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;joinToString()&lt;/code&gt; builds a single &lt;code&gt;String&lt;/code&gt; from the collection elements based on the provided arguments. &lt;code&gt;joinTo()&lt;/code&gt; does the same but appends the result to the given &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.text/-appendable/index&quot;&gt;&lt;code&gt;Appendable&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;joinToString()&lt;/code&gt; は、指定された引数に基づいて、コレクション要素から単一の &lt;code&gt;String&lt;/code&gt; を構築します。 &lt;code&gt;joinTo()&lt;/code&gt; は同じことを&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.text/-appendable/index&quot;&gt; &lt;code&gt;Appendable&lt;/code&gt; &lt;/a&gt;ますが、結果を指定されたAppendableオブジェクトに追加します。</target>
        </trans-unit>
        <trans-unit id="5e909b15f139ff5459b0205107b17607f4dd7103" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;js&lt;/code&gt; for Kotlin/JS;</source>
          <target state="translated">&lt;code&gt;js&lt;/code&gt; Kotlin / JSのjs。</target>
        </trans-unit>
        <trans-unit id="a707686185435c5406cec7e4c975d9359b0bb8e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jvm&lt;/code&gt; for Kotlin/JVM;</source>
          <target state="translated">&lt;code&gt;jvm&lt;/code&gt; Kotlin / JVMのjvm ;</target>
        </trans-unit>
        <trans-unit id="f697848dc8081d2a2c7a75b05f373534bb55ea65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;k&lt;/code&gt;, &lt;code&gt;v&lt;/code&gt; can be called anything.</source>
          <target state="translated">&lt;code&gt;k&lt;/code&gt; 、 &lt;code&gt;v&lt;/code&gt; は何でも呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="ff8a7e682a2b1f9a53924e27c15255db032aee0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt;: the key of the group this element belongs to;</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; ：この要素が属するグループのキー。</target>
        </trans-unit>
        <trans-unit id="ab4e881f29e68e9958b0eb0f70abc3ff801b7cdc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt;: the key of the group;</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; ：グループのキー。</target>
        </trans-unit>
        <trans-unit id="de5c81d32b0741611c5078f9b42f2916b5a9c709" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kotlin-jslib&lt;/code&gt; in the compiler distribution: use &lt;code&gt;kotlin-stdlib-js&lt;/code&gt; instead</source>
          <target state="translated">&lt;code&gt;kotlin-jslib&lt;/code&gt; コンパイラディストリビューションのkotlin-jslib：代わりに &lt;code&gt;kotlin-stdlib-js&lt;/code&gt; を使用</target>
        </trans-unit>
        <trans-unit id="d70bd93f4539e5ca0184e65414eafc07ece123a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kotlin-platform-native&lt;/code&gt; reference</source>
          <target state="translated">&lt;code&gt;kotlin-platform-native&lt;/code&gt; リファレンス</target>
        </trans-unit>
        <trans-unit id="9edb4c87cf51275dfefa597af9b0ec6766a6898e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kotlin-runtime&lt;/code&gt;: use &lt;code&gt;kotlin-stdlib&lt;/code&gt; instead</source>
          <target state="translated">&lt;code&gt;kotlin-runtime&lt;/code&gt; ：代わりに &lt;code&gt;kotlin-stdlib&lt;/code&gt; を使用してください</target>
        </trans-unit>
        <trans-unit id="d6c09d23fd2e37aeadc2e4b51c6221e0848f2d22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kotlin-stdlib-jre7/8&lt;/code&gt;: use &lt;code&gt;kotlin-stdlib-jdk7/8&lt;/code&gt; instead</source>
          <target state="translated">&lt;code&gt;kotlin-stdlib-jre7/8&lt;/code&gt; ：代わりに &lt;code&gt;kotlin-stdlib-jdk7/8&lt;/code&gt; を使用</target>
        </trans-unit>
        <trans-unit id="c6d44a61ea419b1e0b9d2afc609d339b1b0b5e0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kotlin.Any&lt;/code&gt; is mapped to JavaScript Object (i.e. &lt;code&gt;new Object()&lt;/code&gt;, &lt;code&gt;{}&lt;/code&gt;, etc).</source>
          <target state="translated">&lt;code&gt;kotlin.Any&lt;/code&gt; はJavaScriptオブジェクト（つまり、 &lt;code&gt;new Object()&lt;/code&gt; 、 &lt;code&gt;{}&lt;/code&gt; など）にマップされます。</target>
        </trans-unit>
        <trans-unit id="2ddfcf2a8a79ecd8653558e192f93462d3c18e00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kotlin.Array&lt;/code&gt; is mapped to JavaScript Array.</source>
          <target state="translated">&lt;code&gt;kotlin.Array&lt;/code&gt; はJavaScript配列にマップされます。</target>
        </trans-unit>
        <trans-unit id="3f215bcad68b1060d49b48962f3879d3bb0e4f94" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kotlin.BooleanArray&lt;/code&gt; is mapped to JavaScript Int8Array with a property &lt;code&gt;$type$ == &quot;BooleanArray&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;kotlin.BooleanArray&lt;/code&gt; は、プロパティ &lt;code&gt;$type$ == &quot;BooleanArray&quot;&lt;/code&gt; を使用してJavaScript Int8Arrayにマップされます</target>
        </trans-unit>
        <trans-unit id="9a86c5dacfd9c6120320455c871be52e80b58d7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kotlin.ByteArray&lt;/code&gt;, &lt;code&gt;-.ShortArray&lt;/code&gt;, &lt;code&gt;-.IntArray&lt;/code&gt;, &lt;code&gt;-.FloatArray&lt;/code&gt;, and &lt;code&gt;-.DoubleArray&lt;/code&gt; are mapped to JavaScript Int8Array, Int16Array, Int32Array, Float32Array, and Float64Array correspondingly.</source>
          <target state="translated">&lt;code&gt;kotlin.ByteArray&lt;/code&gt; 、-. &lt;code&gt;-.ShortArray&lt;/code&gt; 、 &lt;code&gt;-.IntArray&lt;/code&gt; . &lt;code&gt;-.FloatArray&lt;/code&gt; 、- . FloatArray、および &lt;code&gt;-.DoubleArray&lt;/code&gt; は、JavaScript Int8Array、Int16Array、Int32Array、Float32Array、およびFloat64Arrayに対応してマッピングされます。</target>
        </trans-unit>
        <trans-unit id="9bd0be38735d6b975409c2f81bca2f630826f4b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kotlin.Char&lt;/code&gt; is mapped to JavaScript Number representing character code.</source>
          <target state="translated">&lt;code&gt;kotlin.Char&lt;/code&gt; は、文字コードを表すJavaScript番号にマップされます。</target>
        </trans-unit>
        <trans-unit id="cdcf3c9ad1d43abe08401cc671a2e77504e8aa9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kotlin.CharArray&lt;/code&gt; is mapped to JavaScript UInt16Array with a property &lt;code&gt;$type$ == &quot;CharArray&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;kotlin.CharArray&lt;/code&gt; は、プロパティ &lt;code&gt;$type$ == &quot;CharArray&quot;&lt;/code&gt; を使用してJavaScript UInt16Arrayにマップされます</target>
        </trans-unit>
        <trans-unit id="51964479d0cc04679f9e087cb5cb10bd7104f508" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kotlin.LongArray&lt;/code&gt; is mapped to JavaScript Array of &lt;code&gt;kotlin.Long&lt;/code&gt; with a property &lt;code&gt;$type$ == &quot;LongArray&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;kotlin.LongArray&lt;/code&gt; は、プロパティ &lt;code&gt;$type$ == &quot;LongArray&quot;&lt;/code&gt; を &lt;code&gt;kotlin.Long&lt;/code&gt; してkotlin.Longの JavaScript配列にマップされます。</target>
        </trans-unit>
        <trans-unit id="40b593eac371c795dff3c154373e95d3cdc2318b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kotlin.String&lt;/code&gt; is mapped to JavaScript String.</source>
          <target state="translated">&lt;code&gt;kotlin.String&lt;/code&gt; はJavaScript文字列にマップされます。</target>
        </trans-unit>
        <trans-unit id="659d48c3d2e9aebbcbdd04f2fd4373b7d80c0fe0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kotlin.Throwable&lt;/code&gt; is mapped to JavaScript Error.</source>
          <target state="translated">&lt;code&gt;kotlin.Throwable&lt;/code&gt; はJavaScriptエラーにマップされます。</target>
        </trans-unit>
        <trans-unit id="9fa8a2460cee8d76cd0b1e9ead686e66398c35dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kotlin.UByte&lt;/code&gt;: an unsigned 8-bit integer, ranges from 0 to 255</source>
          <target state="translated">&lt;code&gt;kotlin.UByte&lt;/code&gt; ：0〜255の範囲の符号なし8ビット整数</target>
        </trans-unit>
        <trans-unit id="55ecdeee8026ceb1527dc5228dd9ee0242b1164d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kotlin.UByteArray&lt;/code&gt;: an array of unsigned bytes</source>
          <target state="translated">&lt;code&gt;kotlin.UByteArray&lt;/code&gt; ：符号なしバイトの配列</target>
        </trans-unit>
        <trans-unit id="fe542874cceb8c831a2c348b62fc8e197df5b4de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kotlin.UInt&lt;/code&gt;: an unsigned 32-bit integer, ranges from 0 to 2^32 - 1</source>
          <target state="translated">&lt;code&gt;kotlin.UInt&lt;/code&gt; ：符号なし32ビット整数、範囲は0〜2 ^ 32-1</target>
        </trans-unit>
        <trans-unit id="53b868f94ce2ff2483b575ec530e7d864c04a613" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kotlin.UIntArray&lt;/code&gt;: an array of unsigned ints</source>
          <target state="translated">&lt;code&gt;kotlin.UIntArray&lt;/code&gt; ：符号なし整数の配列</target>
        </trans-unit>
        <trans-unit id="b5300ade05ab7504b50adc690d42f105e4ee68ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kotlin.ULong&lt;/code&gt;: an unsigned 64-bit integer, ranges from 0 to 2^64 - 1</source>
          <target state="translated">&lt;code&gt;kotlin.ULong&lt;/code&gt; ：符号なし64ビット整数、範囲は0〜2 ^ 64-1</target>
        </trans-unit>
        <trans-unit id="c91f3dac68dab1ad0547ccd10cb5bb4bc9498943" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kotlin.ULongArray&lt;/code&gt;: an array of unsigned longs</source>
          <target state="translated">&lt;code&gt;kotlin.ULongArray&lt;/code&gt; ：符号なしlongの配列</target>
        </trans-unit>
        <trans-unit id="db5ab1fc15c468d60456a286e46502fad9c4578b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kotlin.UShort&lt;/code&gt;: an unsigned 16-bit integer, ranges from 0 to 65535</source>
          <target state="translated">&lt;code&gt;kotlin.UShort&lt;/code&gt; ：0〜65535の範囲の符号なし16ビット整数</target>
        </trans-unit>
        <trans-unit id="c762c7d7fdd2dfaf391c2acbcd2b5ab6356ab61c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kotlin.UShortArray&lt;/code&gt;: an array of unsigned shorts</source>
          <target state="translated">&lt;code&gt;kotlin.UShortArray&lt;/code&gt; ：符号なしshortの配列</target>
        </trans-unit>
        <trans-unit id="88d3da956578fff7d75545b50c7da3120d547a4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kotlin.js&lt;/code&gt;. The runtime and standard library. This doesn't change between applications. It's tied to the version of Kotlin being used.</source>
          <target state="translated">&lt;code&gt;kotlin.js&lt;/code&gt; 。ランタイムおよび標準ライブラリ。これはアプリケーション間で変わりません。これは、使用されているKotlinのバージョンに関連付けられています。</target>
        </trans-unit>
        <trans-unit id="c2ea000a8effe62ea2560052e3aff3ee5917f015" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kotlinx.coroutines&lt;/code&gt; is a rich library for coroutines developed by JetBrains. It contains a number of high-level coroutine-enabled primitives that this guide covers, including &lt;code&gt;launch&lt;/code&gt;, &lt;code&gt;async&lt;/code&gt; and others.</source>
          <target state="translated">&lt;code&gt;kotlinx.coroutines&lt;/code&gt; は、JetBrainsによって開発されたコルーチン用の豊富なライブラリーです。これには、 &lt;code&gt;launch&lt;/code&gt; 、 &lt;code&gt;async&lt;/code&gt; など、このガイドがカバーする高レベルのコルーチン対応のプリミティブがいくつか含まれています。</target>
        </trans-unit>
        <trans-unit id="5f82fba44c63724ec2e93709793338db3d8e569f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lateinit&lt;/code&gt; allows initializing a &lt;a href=&quot;properties#late-initialized-properties-and-variables&quot;&gt;non-null property outside of a constructor&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;lateinit&lt;/code&gt; を使用する&lt;a href=&quot;properties#late-initialized-properties-and-variables&quot;&gt;と、コンストラクターの外部でnull以外のプロパティを&lt;/a&gt;初期化できます</target>
        </trans-unit>
        <trans-unit id="5a0b3563766c38058ea4c77ba9ae974f57d2ee49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lateinit&lt;/code&gt; can only be used with &lt;code&gt;var&lt;/code&gt;, not with &lt;code&gt;val&lt;/code&gt;, and the type must be non-primitive and non-nullable.</source>
          <target state="translated">&lt;code&gt;lateinit&lt;/code&gt; は &lt;code&gt;var&lt;/code&gt; でのみ使用でき、 &lt;code&gt;val&lt;/code&gt; では使用できません。また、型はプリミティブではなく、null可能であってはなりません。</target>
        </trans-unit>
        <trans-unit id="47053d7865cd4d1362dd0fed3a07553e4bcf4bf0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lateinit&lt;/code&gt; modifier;</source>
          <target state="translated">&lt;code&gt;lateinit&lt;/code&gt; 修飾子;</target>
        </trans-unit>
        <trans-unit id="59a5af96d0a80bd7bccbbc50ab23c1f600da2e28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;length&lt;/code&gt; - the desired string length.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; -希望する文字列の長さ。</target>
        </trans-unit>
        <trans-unit id="c5f67685e8fb85c57bbdc9d9d7db128bf5c55c6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;length&lt;/code&gt; - the length of the portion of the array to read.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; -読み取る配列の部分の長さ。</target>
        </trans-unit>
        <trans-unit id="a123d5c22ab2a54bb2467057b241dc254d99292a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;length&lt;/code&gt; - the length of the substring to compare.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; -比較する部分文字列の長さ。</target>
        </trans-unit>
        <trans-unit id="d9cc168ae9309d396e193854fa2e497d466b8aa1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;length&lt;/code&gt; - the number of bytes to be converted.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; -変換されるバイト数。</target>
        </trans-unit>
        <trans-unit id="e551de8b7f6a686a65bd70d06d97e7a7c117cbbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;let&lt;/code&gt; can be used to invoke one or more functions on results of call chains. For example, the following code prints the results of two operations on a collection:</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; は、呼び出しチェーンの結果に対して1つ以上の関数を呼び出すために使用できます。たとえば、次のコードは、コレクションに対する2つの操作の結果を出力します。</target>
        </trans-unit>
        <trans-unit id="fe705198c64b22461a258c472dd254519e542ea4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;let&lt;/code&gt; is often used for executing a code block only with non-null values. To perform actions on a non-null object, use the safe call operator &lt;code&gt;?.&lt;/code&gt; on it and call &lt;code&gt;let&lt;/code&gt; with the actions in its lambda.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; は、null以外の値でのみコードブロックを実行するためによく使用されます。null以外のオブジェクトに対してアクションを実行するには、安全な呼び出し演算子 &lt;code&gt;?.&lt;/code&gt; 使用します。その上で、そのラムダのアクションで &lt;code&gt;let&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="f39dab5586b77abb09839bb50cf60ada67479e37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;let&lt;/code&gt;, &lt;code&gt;run&lt;/code&gt;, and &lt;code&gt;with&lt;/code&gt; return the lambda result.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; 、 &lt;code&gt;run&lt;/code&gt; 、そしてlambdaの結果 &lt;code&gt;with&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="dc178cbf3d417c488cd76dd0ba0df9c30201e6a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;let&lt;/code&gt;, &lt;code&gt;run&lt;/code&gt;, and &lt;code&gt;with&lt;/code&gt; return the lambda result. So, you can use them when assigning the result to a variable, chaining operations on the result, and so on.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; 、 &lt;code&gt;run&lt;/code&gt; 、そしてlambdaの結果 &lt;code&gt;with&lt;/code&gt; 返します。そのため、結果を変数に割り当てたり、結果に対する操作を連鎖させたりする場合などに使用できます。</target>
        </trans-unit>
        <trans-unit id="6540140321404c7beb48cb8d41c1d076d0ad9902" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;level&lt;/code&gt; - Specifies how the deprecated element usages are reported in code. See the &lt;a href=&quot;../-deprecation-level/index#kotlin.DeprecationLevel&quot;&gt;DeprecationLevel&lt;/a&gt; enum for the possible values.</source>
          <target state="translated">&lt;code&gt;level&lt;/code&gt; -非推奨の要素の用法は、コードで報告されているかを指定します。可能な値については、&lt;a href=&quot;../-deprecation-level/index#kotlin.DeprecationLevel&quot;&gt;DeprecationLevel&lt;/a&gt; enumを参照してください。</target>
        </trans-unit>
        <trans-unit id="f52f5c62d7318037ef9d40f8fdaba593bc1b0344" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;limit&lt;/code&gt; -</source>
          <target state="translated">&lt;code&gt;limit&lt;/code&gt; -</target>
        </trans-unit>
        <trans-unit id="208df0bf5d40aa3cae90380f2554f8371ca7e880" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;limit&lt;/code&gt; - Non-negative value specifying the maximum number of substrings the string can be split to. Zero by default means no limit is set.</source>
          <target state="translated">&lt;code&gt;limit&lt;/code&gt; -文字列はに分けることができるストリングの最大数を示す負でない値。デフォルトのゼロは、制限が設定されていないことを意味します。</target>
        </trans-unit>
        <trans-unit id="d06bb1e204b58f4ad96b54b0bcd05a20c0a7ddae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;limit&lt;/code&gt; - Non-negative value specifying the maximum number of substrings to return. Zero by default means no limit is set.</source>
          <target state="translated">&lt;code&gt;limit&lt;/code&gt; -返すサブストリングの最大数を示す負でない値。デフォルトのゼロは、制限が設定されていないことを意味します。</target>
        </trans-unit>
        <trans-unit id="185232970a0ccd48f8d36fc01a8b97c7d74a583f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;limit&lt;/code&gt; - The maximum number of substrings to return.</source>
          <target state="translated">&lt;code&gt;limit&lt;/code&gt; -返される部分文字列の最大数。</target>
        </trans-unit>
        <trans-unit id="996cb31faa7091a408533c92f1605440669d6c82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;linuxArm32Hfp&lt;/code&gt;, &lt;code&gt;linuxMips32&lt;/code&gt;, &lt;code&gt;linuxMipsel32&lt;/code&gt;, &lt;code&gt;linuxX64&lt;/code&gt; for Linux;</source>
          <target state="translated">&lt;code&gt;linuxArm32Hfp&lt;/code&gt; 場合、linuxArm32Hfp、 &lt;code&gt;linuxMips32&lt;/code&gt; 、 &lt;code&gt;linuxMipsel32&lt;/code&gt; 、 &lt;code&gt;linuxX64&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7eaf9b61690a4c5efc748e6664d0249c907fc836" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ln(+Inf)&lt;/code&gt; is &lt;code&gt;+Inf&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ln(+Inf)&lt;/code&gt; は &lt;code&gt;+Inf&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="252e73347a18f8bb8350262b3bd9c8566aec27e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ln(0.0)&lt;/code&gt; is &lt;code&gt;-Inf&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ln(0.0)&lt;/code&gt; は &lt;code&gt;-Inf&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2593060e4a854271ebc6ff65b6483ed85aca28ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ln(NaN)&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ln(NaN)&lt;/code&gt; は &lt;code&gt;NaN&lt;/code&gt; です</target>
        </trans-unit>
        <trans-unit id="b8895ee0a78645b4b9c622865b5b229403169b21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ln(x)&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt; when &lt;code&gt;x &amp;lt; 0.0&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ln(x)&lt;/code&gt; &lt;code&gt;x &amp;lt; 0.0&lt;/code&gt; 場合、ln（x）は &lt;code&gt;NaN&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d32e977cf0dd497316b051e4c5a4d1b8c1668dcf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ln1p(+Inf)&lt;/code&gt; is &lt;code&gt;+Inf&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ln1p(+Inf)&lt;/code&gt; は &lt;code&gt;+Inf&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="453056e570960655e4d47d15bb3b675fe54808db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ln1p(-1.0)&lt;/code&gt; is &lt;code&gt;-Inf&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ln1p(-1.0)&lt;/code&gt; は &lt;code&gt;-Inf&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8b4702bf0ad629b7d81ff384b1a72af88f6eb0a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ln1p(NaN)&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ln1p(NaN)&lt;/code&gt; は &lt;code&gt;NaN&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3cc8921af2631a539159df90811cad409ebb4c73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ln1p(x)&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt; where &lt;code&gt;x &amp;lt; -1.0&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ln1p(x)&lt;/code&gt; は &lt;code&gt;NaN&lt;/code&gt; であり、 &lt;code&gt;x &amp;lt; -1.0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4f18babb62aef788b1e852582f82afe6752be400" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;loadFactor&lt;/code&gt; - the load factor (ignored)</source>
          <target state="translated">&lt;code&gt;loadFactor&lt;/code&gt; -負荷係数（無視されます）</target>
        </trans-unit>
        <trans-unit id="f0659f8f29af75053650a20bee7d9878080e5c9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log(+Inf, +Inf)&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;log(+Inf, +Inf)&lt;/code&gt; は &lt;code&gt;NaN&lt;/code&gt; です</target>
        </trans-unit>
        <trans-unit id="5f9fcf4db999d97d7d238b1872e876501b301349" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log(+Inf, b)&lt;/code&gt; is &lt;code&gt;+Inf&lt;/code&gt; for &lt;code&gt;b &amp;gt; 1&lt;/code&gt; and &lt;code&gt;-Inf&lt;/code&gt; for &lt;code&gt;b &amp;lt; 1&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;log(+Inf, b)&lt;/code&gt; ある &lt;code&gt;+Inf&lt;/code&gt; のための &lt;code&gt;b &amp;gt; 1&lt;/code&gt; と &lt;code&gt;-Inf&lt;/code&gt; ため &lt;code&gt;b &amp;lt; 1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4bcb4d7205bbda0cca1f7fe9d0e18f4c91575924" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log(0.0, b)&lt;/code&gt; is &lt;code&gt;-Inf&lt;/code&gt; for &lt;code&gt;b &amp;gt; 1&lt;/code&gt; and &lt;code&gt;+Inf&lt;/code&gt; for &lt;code&gt;b &amp;gt; 1&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;log(0.0, b)&lt;/code&gt; ある &lt;code&gt;-Inf&lt;/code&gt; 用 &lt;code&gt;b &amp;gt; 1&lt;/code&gt; と &lt;code&gt;+Inf&lt;/code&gt; のための &lt;code&gt;b &amp;gt; 1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9bf6a10920924469889cc579295db4bd6dabf9b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log(x, b)&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt; if either &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt; are &lt;code&gt;NaN&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;log(x, b)&lt;/code&gt; ある &lt;code&gt;NaN&lt;/code&gt; のいずれかであれば &lt;code&gt;x&lt;/code&gt; または &lt;code&gt;b&lt;/code&gt; ある &lt;code&gt;NaN&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="48b7bfd0270001a14346785eb0b107e7ec23af52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log(x, b)&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt; when &lt;code&gt;x &amp;lt; 0&lt;/code&gt; or &lt;code&gt;b &amp;lt;= 0&lt;/code&gt; or &lt;code&gt;b == 1.0&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;log(x, b)&lt;/code&gt; は、 &lt;code&gt;x &amp;lt; 0&lt;/code&gt; または &lt;code&gt;b &amp;lt;= 0&lt;/code&gt; または &lt;code&gt;b == 1.0&lt;/code&gt; 場合、 &lt;code&gt;NaN&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e3a17174ddefa3c240ec9b5428c4a695f7b64287" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;macosX64&lt;/code&gt; for MacOS;</source>
          <target state="translated">&lt;code&gt;macosX64&lt;/code&gt; macOSのmacosX64 ;</target>
        </trans-unit>
        <trans-unit id="dbeb272e7f89ac7dac73c641f4be4499d4cd2be6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;main([]);&lt;/code&gt;: a call of the &lt;code&gt;main&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;main([]);&lt;/code&gt; ： &lt;code&gt;main&lt;/code&gt; 関数の呼び出し。</target>
        </trans-unit>
        <trans-unit id="e69612f279814b811d3fc6078abd9151f622c2b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;main&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; compilations for JVM, JS, and Native targets;</source>
          <target state="translated">&lt;code&gt;main&lt;/code&gt; JVM、JS、およびネイティブターゲットのメインおよび &lt;code&gt;test&lt;/code&gt; コンパイル。</target>
        </trans-unit>
        <trans-unit id="26bac2457d8e6e02f39f9164fa073d3d3cf2ae86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;marginPrefix&lt;/code&gt; - non-blank string, which is used as a margin delimiter. Default is &lt;code&gt;|&lt;/code&gt; (pipe character).</source>
          <target state="translated">&lt;code&gt;marginPrefix&lt;/code&gt; -マージン区切り文字として使用される非空白の文字列。デフォルトは &lt;code&gt;|&lt;/code&gt; です。（パイプ文字）。</target>
        </trans-unit>
        <trans-unit id="a5727d9111c741b27f9daa6a06d7e82e1c4fd1e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mathContext&lt;/code&gt; - specifies the precision and the rounding mode.</source>
          <target state="translated">&lt;code&gt;mathContext&lt;/code&gt; -精度と丸めモードを指定します。</target>
        </trans-unit>
        <trans-unit id="fd13b61c3a876d813b06d8d27211349f43668229" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max&lt;/code&gt; and &lt;code&gt;min&lt;/code&gt; of two values;</source>
          <target state="translated">&lt;code&gt;max&lt;/code&gt; 2つの値の最大値と &lt;code&gt;min&lt;/code&gt; 値。</target>
        </trans-unit>
        <trans-unit id="f38e78071ae592eb02eb59a9dd54350331d7e3b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxSpeed&lt;/code&gt; and &lt;code&gt;horsepowers&lt;/code&gt;, which are inherited from &lt;code&gt;MotorVehicle&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;maxSpeed&lt;/code&gt; と &lt;code&gt;horsepowers&lt;/code&gt; から継承され、 &lt;code&gt;MotorVehicle&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0178aa57547ec9fda6f96912d87656568ceb8a49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;message&lt;/code&gt; - The message explaining the deprecation and recommending an alternative API to use.</source>
          <target state="translated">&lt;code&gt;message&lt;/code&gt; -メッセージ廃止を説明し、使用する代替APIを推奨します。</target>
        </trans-unit>
        <trans-unit id="69954a17845ed686114d3646757964c5ce2b5f6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;message&lt;/code&gt; - the detail message string.</source>
          <target state="translated">&lt;code&gt;message&lt;/code&gt; -詳細メッセージ文字列。</target>
        </trans-unit>
        <trans-unit id="7aa3f56c6672dbd3162619f55c00a0fa601f3c1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mingwX64&lt;/code&gt; and &lt;code&gt;mingwX86&lt;/code&gt; for Windows;</source>
          <target state="translated">&lt;code&gt;mingwX64&lt;/code&gt; Windows用のmingwX64および &lt;code&gt;mingwX86&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="267160ff261db7f19167c9dd54fea15141f714be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minus&lt;/code&gt; creates a &lt;code&gt;Map&lt;/code&gt; from entries of a &lt;code&gt;Map&lt;/code&gt; on the left except those with keys from the right-hand side operand. So, the right-hand side operand can be either a single key or a collection of keys: list, set, and so on.</source>
          <target state="translated">&lt;code&gt;minus&lt;/code&gt; は、右側のオペランドからのキーを持つものを除いて、左側の &lt;code&gt;Map&lt;/code&gt; エントリから &lt;code&gt;Map&lt;/code&gt; を作成します。したがって、右側のオペランドは、単一のキーまたはキーのコレクション（リスト、セットなど）のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="988b67650cf5accf92fe098a86492ee65cfddc43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mod&lt;/code&gt; operator convention</source>
          <target state="translated">&lt;code&gt;mod&lt;/code&gt; 演算子の規則</target>
        </trans-unit>
        <trans-unit id="4e5b5e36367f2b5720885e31db4553ac0624e9fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; - the name of the element.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; -要素の名前。</target>
        </trans-unit>
        <trans-unit id="6235ae131413288e1ad1541828056ee77ac6f50c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; - the name of the thread.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; -スレッドの名前。</target>
        </trans-unit>
        <trans-unit id="56831cce1ac10281427a82b03d4a290f0b3e2091" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; - the name to use for the thread which is running the timer.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; -タイマーを実行しているスレッドに使用する名前。</target>
        </trans-unit>
        <trans-unit id="7fefd14206e17fee67936f93d8bb7b6202585842" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; - the name which compiler uses both for declaration itself and for all references to the declaration. It's required to denote a valid JavaScript identifier.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; -コンパイラは、宣言自身のためにと宣言へのすべての参照のための両方に使用する名前。有効なJavaScript識別子を示す必要があります。</target>
        </trans-unit>
        <trans-unit id="0cc326db8cb5ff54bd2faea12c15dbece4695569" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;names&lt;/code&gt; - names of the compiler diagnostics to suppress.</source>
          <target state="translated">&lt;code&gt;names&lt;/code&gt; -抑制するコンパイラ診断の名前。</target>
        </trans-unit>
        <trans-unit id="ae0634b94bbd8a34abb02bec7888d9a010a2b264" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new value&lt;/code&gt; &amp;mdash; must be of the same type as the property or its subtype.</source>
          <target state="translated">&lt;code&gt;new value&lt;/code&gt; &amp;mdash;プロパティまたはそのサブタイプと同じタイプである必要があります。</target>
        </trans-unit>
        <trans-unit id="ace8d18319ba4a90a94060c1b1c435fd947d410b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new&lt;/code&gt; - the new value</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; -新しい値</target>
        </trans-unit>
        <trans-unit id="3bcca1c2c4cfe6988423b94bdd43815e502e35b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nextUp&lt;/code&gt;, &lt;code&gt;nextDown&lt;/code&gt;, &lt;code&gt;nextTowards&lt;/code&gt; extension functions;</source>
          <target state="translated">&lt;code&gt;nextUp&lt;/code&gt; 、 &lt;code&gt;nextDown&lt;/code&gt; 、 &lt;code&gt;nextTowards&lt;/code&gt; 拡張関数。</target>
        </trans-unit>
        <trans-unit id="ed51d6e0299c2fb8e3d3bc33bcd5b22ef4fb4be1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;noStringConversion&lt;/code&gt; property value is space-separated lists of the functions whose &lt;code&gt;const char*&lt;/code&gt; parameters shall not be autoconverted as Kotlin string</source>
          <target state="translated">&lt;code&gt;noStringConversion&lt;/code&gt; プロパティ値は、 &lt;code&gt;const char*&lt;/code&gt; パラメータがKotlin文字列として自動変換されない関数のスペース区切りリストです。</target>
        </trans-unit>
        <trans-unit id="05a0c8ff6a3c213a67a9ee469db4827fa63ce669" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;noinline&lt;/code&gt; turns off &lt;a href=&quot;inline-functions#noinline&quot;&gt;inlining of a lambda passed to an inline function&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;noinline&lt;/code&gt; は&lt;a href=&quot;inline-functions#noinline&quot;&gt;、インライン関数に渡されるラムダのインライン化を&lt;/a&gt;オフにします</target>
        </trans-unit>
        <trans-unit id="36297d07fe34068128422f55af6a43def97f5318" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;null&lt;/code&gt; is a constant representing an object reference that doesn't point to any object</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; は、どのオブジェクトも指していないオブジェクト参照を表す定数です</target>
        </trans-unit>
        <trans-unit id="1068fc03044320a95496c7fdf93f1a4da1b38f0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;null&lt;/code&gt; value is considered to be less than any non-null value.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 値は、null以外の値よりも小さいと見なされます。</target>
        </trans-unit>
        <trans-unit id="334180cb811d90900ac4efec28ceda74c1452e33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;null&lt;/code&gt;-checks are disabled for such values.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; そのような値のnullチェックは無効になります。</target>
        </trans-unit>
        <trans-unit id="15ba108e8fde1f1b4730082255c210938d1874dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;object&lt;/code&gt; declares &lt;a href=&quot;object-declarations&quot;&gt;a class and its instance at the same time&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;object&lt;/code&gt; &lt;a href=&quot;object-declarations&quot;&gt;はクラスとそのインスタンスを同時に&lt;/a&gt;宣言します</target>
        </trans-unit>
        <trans-unit id="f3a944d208de06158465d383160a1c8a51d2fecb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt; - the offset in the array of the data to be converted.</source>
          <target state="translated">&lt;code&gt;offset&lt;/code&gt; -変換するデータの配列内のオフセット。</target>
        </trans-unit>
        <trans-unit id="8120bdf65433d32e076766e7ab1b7c3d1d03b966" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt; - the start offset of the portion of the array to read.</source>
          <target state="translated">&lt;code&gt;offset&lt;/code&gt; -読み取る配列の部分の開始オフセット。</target>
        </trans-unit>
        <trans-unit id="fcbd11d6992f04df0a96f8e3d24ee5a62de8bece" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;onChange&lt;/code&gt; - the callback which is called after the change of the property is made. The value of the property has already been changed when this callback is invoked.</source>
          <target state="translated">&lt;code&gt;onChange&lt;/code&gt; -プロパティの変更が行われた後に呼び出されるコールバック。このコールバックが呼び出されたとき、プロパティの値はすでに変更されています。</target>
        </trans-unit>
        <trans-unit id="5bd8e7fd457a57ac8471e4aacebd37f1f3bba183" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;onChange&lt;/code&gt; - the callback which is called before a change to the property value is attempted. The value of the property hasn't been changed yet, when this callback is invoked. If the callback returns &lt;code&gt;true&lt;/code&gt; the value of the property is being set to the new value, and if the callback returns &lt;code&gt;false&lt;/code&gt; the new value is discarded and the property remains its old value.</source>
          <target state="translated">&lt;code&gt;onChange&lt;/code&gt; -プロパティ値の変更が試行される前に呼び出されるコールバック。このコールバックが呼び出されたとき、プロパティの値はまだ変更されていません。コールバックが &lt;code&gt;true&lt;/code&gt; を返す場合、プロパティの値は新しい値に設定され、コールバックが &lt;code&gt;false&lt;/code&gt; を返す場合、新しい値は破棄され、プロパティは古い値のままです。</target>
        </trans-unit>
        <trans-unit id="bd0af8f0f4441f0dd5c8e3ec2ac8ee31da629ce2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;onEach&lt;/code&gt; is a small, but useful extension function for collections and sequences, which allows to perform some action, possibly with side-effects, on each element of the collection/sequence in a chain of operations. On iterables it behaves like &lt;code&gt;forEach&lt;/code&gt; but also returns the iterable instance further. And on sequences it returns a wrapping sequence, which applies the given action lazily as the elements are being iterated.</source>
          <target state="translated">&lt;code&gt;onEach&lt;/code&gt; は、コレクションとシーケンスの小さいながらも便利な拡張関数です。これにより、操作のチェーンのコレクション/シーケンスの各要素に対して、副作用を伴う可能性のあるアクションを実行できます。イテラブルでは、 &lt;code&gt;forEach&lt;/code&gt; のように動作しますが、イテラブルインスタンスをさらに返します。シーケンスでは、要素が反復されているときに指定されたアクションを遅延して適用するラッピングシーケンスを返します。</target>
        </trans-unit>
        <trans-unit id="e904ec087d6b0daa0ca01993e45c332a47f884f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open&lt;/code&gt; allows &lt;a href=&quot;classes#inheritance&quot;&gt;subclassing a class or overriding a member&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; は&lt;a href=&quot;classes#inheritance&quot;&gt;、クラスのサブクラス化またはメンバーのオーバーライドを&lt;/a&gt;許可します</target>
        </trans-unit>
        <trans-unit id="ff40089b7efd684f476ea88fc60502882cb7ea01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operation&lt;/code&gt; -</source>
          <target state="translated">&lt;code&gt;operation&lt;/code&gt; -</target>
        </trans-unit>
        <trans-unit id="07b99c04ea1829b2394f976c655390997c8969b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operation&lt;/code&gt; - a function that is invoked on each element with the following parameters:</source>
          <target state="translated">&lt;code&gt;operation&lt;/code&gt; -次のパラメータを使用して各要素で呼び出される関数：</target>
        </trans-unit>
        <trans-unit id="248b36e5b9cea14adb1d1632ffd922f8a21f7211" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operation&lt;/code&gt; - a function that is invoked on each subsequent element of the group with the following parameters:</source>
          <target state="translated">&lt;code&gt;operation&lt;/code&gt; -次のパラメータを使用して、グループの後続の各要素で呼び出される関数：</target>
        </trans-unit>
        <trans-unit id="e2ee0282f792518493f58e943267d8efcc3288db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operation&lt;/code&gt; - function is invoked on each element with the following parameters:</source>
          <target state="translated">&lt;code&gt;operation&lt;/code&gt; -関数は、次のパラメーターを使用して各要素で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="5cc1b221c737a0161b2a21c10d217e38462c4ade" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operation&lt;/code&gt; - function that takes the index of a character, current accumulator value and the character itself and calculates the next accumulator value.</source>
          <target state="translated">&lt;code&gt;operation&lt;/code&gt; -文字のインデックス、現在のアキュムレータ値、および文字自体を受け取り、次のアキュムレータ値を計算する関数。</target>
        </trans-unit>
        <trans-unit id="ba9c3bd14120f260b4f8e64489c22c68aa16564b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operation&lt;/code&gt; - function that takes the index of a character, current accumulator value and the character itself, and calculates the next accumulator value.</source>
          <target state="translated">&lt;code&gt;operation&lt;/code&gt; -文字のインデックス、現在のアキュムレータ値、および文字自体を受け取り、次のアキュムレータ値を計算する関数。</target>
        </trans-unit>
        <trans-unit id="f3dfc746053a52619623276197f45f33b5ecb26d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operation&lt;/code&gt; - function that takes the index of a character, the character itself and current accumulator value, and calculates the next accumulator value.</source>
          <target state="translated">&lt;code&gt;operation&lt;/code&gt; -文字のインデックス、文字自体、現在のアキュムレータ値を受け取り、次のアキュムレータ値を計算する関数。</target>
        </trans-unit>
        <trans-unit id="a2f5a2634dcfd83cfd21d6a9d72e6de1b8cdcc04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operation&lt;/code&gt; - function that takes the index of an element, current accumulator value and the element itself and calculates the next accumulator value.</source>
          <target state="translated">&lt;code&gt;operation&lt;/code&gt; -要素のインデックス、現在のアキュムレータ値、および要素自体を受け取り、次のアキュムレータ値を計算する関数。</target>
        </trans-unit>
        <trans-unit id="02e8057805378f6f4959a5114b1e0c8c72e8a698" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operation&lt;/code&gt; - function that takes the index of an element, current accumulator value and the element itself, and calculates the next accumulator value.</source>
          <target state="translated">&lt;code&gt;operation&lt;/code&gt; -要素のインデックス、現在のアキュムレータ値、および要素自体を受け取り、次のアキュムレータ値を計算する関数。</target>
        </trans-unit>
        <trans-unit id="040dd6574f8413112a5e75a2983637acf71a1379" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operation&lt;/code&gt; - function that takes the index of an element, the element itself and current accumulator value, and calculates the next accumulator value.</source>
          <target state="translated">&lt;code&gt;operation&lt;/code&gt; -要素のインデックス、要素自体、および現在のアキュムレータ値を取得し、次のアキュムレータ値を計算する関数。</target>
        </trans-unit>
        <trans-unit id="5b067faadea8fe2e509cda471afed4b9a218621e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operator&lt;/code&gt; can also be used for certain other predefined functions in order to create fancy effects, such as &lt;a href=&quot;inheritance#delegated-properties&quot;&gt;delegated properties&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;operator&lt;/code&gt; は、&lt;a href=&quot;inheritance#delegated-properties&quot;&gt;委任されたプロパティ&lt;/a&gt;などの派手な効果を作成するために、他の特定の定義済み関数にも使用できます。</target>
        </trans-unit>
        <trans-unit id="95654b15a18c309b6235b5117183f93417c5d312" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operator&lt;/code&gt; marks a function as &lt;a href=&quot;operator-overloading&quot;&gt;overloading an operator or implementing a convention&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;operator&lt;/code&gt; は関数を&lt;a href=&quot;operator-overloading&quot;&gt;演算子のオーバーロードまたは規約の実装&lt;/a&gt;としてマークします</target>
        </trans-unit>
        <trans-unit id="3cd45210ebe76bf8c9d596dbc0bd1c602c3e9156" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or(bits)&lt;/code&gt; &amp;ndash; bitwise or</source>
          <target state="translated">&lt;code&gt;or(bits)&lt;/code&gt; &amp;ndash;ビットごとまたは</target>
        </trans-unit>
        <trans-unit id="0417518c8faa0d30af999be7aa738560e49d1684" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;other&lt;/code&gt; - the second file involved in the operation, if any (for example, the target of a copy or move)</source>
          <target state="translated">&lt;code&gt;other&lt;/code&gt; -操作に含まれる2番目のファイル（ある場合）（たとえば、コピーまたは移動のターゲット）</target>
        </trans-unit>
        <trans-unit id="bb20a2a448ff12b6516746fa32432684ec92ed0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;other&lt;/code&gt; - the string against a substring of which the comparison is performed.</source>
          <target state="translated">&lt;code&gt;other&lt;/code&gt; -の比較が行われるのサブに対する文字列。</target>
        </trans-unit>
        <trans-unit id="fd1894c3bcae99eca6d992390ddbf52aaa027cc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;otherOffset&lt;/code&gt; - the start offset in the other char sequence of the substring to compare.</source>
          <target state="translated">&lt;code&gt;otherOffset&lt;/code&gt; -比較する部分文字列の他の文字シーケンスの開始オフセット。</target>
        </trans-unit>
        <trans-unit id="2c87226a909e3b81c0afe8efaffdd2d21cb277a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;otherOffset&lt;/code&gt; - the start offset in the other string of the substring to compare.</source>
          <target state="translated">&lt;code&gt;otherOffset&lt;/code&gt; -比較する部分文字列の他の文字列の開始オフセット。</target>
        </trans-unit>
        <trans-unit id="278f0f16ac78072a8cba927937acd7f2f05a2391" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;out&lt;/code&gt; - writer to write to.</source>
          <target state="translated">&lt;code&gt;out&lt;/code&gt; -に書き込むライター。</target>
        </trans-unit>
        <trans-unit id="16c0fd496d4fff9161f7d9ca668c90772211d02f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;out&lt;/code&gt; marks a type parameter as &lt;a href=&quot;generics#declaration-site-variance&quot;&gt;covariant&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;out&lt;/code&gt; は型パラメーターを&lt;a href=&quot;generics#declaration-site-variance&quot;&gt;共変&lt;/a&gt;としてマークします</target>
        </trans-unit>
        <trans-unit id="fde49d9720c995254e8b80d376d43b1b6ce6a80b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;override&lt;/code&gt; marks a member as an &lt;a href=&quot;classes#overriding-methods&quot;&gt;override of a superclass member&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;override&lt;/code&gt; は、メンバーを&lt;a href=&quot;classes#overriding-methods&quot;&gt;スーパークラスメンバーのオーバーライド&lt;/a&gt;としてマークします。</target>
        </trans-unit>
        <trans-unit id="26962046c0df7da84035dbd93e8153ed382e3f4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;overwrite&lt;/code&gt; - &lt;code&gt;true&lt;/code&gt; if destination overwrite is allowed.</source>
          <target state="translated">&lt;code&gt;overwrite&lt;/code&gt; - &lt;code&gt;true&lt;/code&gt; 目的地の上書きが許可されている場合。</target>
        </trans-unit>
        <trans-unit id="2e9b081e48d7cab3fbcabb38cde0858f4dd92ef7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;overwrite&lt;/code&gt; - &lt;code&gt;true&lt;/code&gt; if it is allowed to overwrite existing destination files and directories.</source>
          <target state="translated">&lt;code&gt;overwrite&lt;/code&gt; - &lt;code&gt;true&lt;/code&gt; 既存の宛先ファイルやディレクトリを上書きする許可されている場合。</target>
        </trans-unit>
        <trans-unit id="c14ba6252e54c8220dc6cf80d69d0274bff1b72e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;package&lt;/code&gt; specifies the &lt;a href=&quot;packages&quot;&gt;package for the current file&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;package&lt;/code&gt; &lt;a href=&quot;packages&quot;&gt;は、現在のファイルのパッケージを&lt;/a&gt;指定します</target>
        </trans-unit>
        <trans-unit id="a233b575d588b308b8f3f49a9a0e445768b13910" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;padChar&lt;/code&gt; - the character to pad string with, if it has length less than the &lt;a href=&quot;pad-end#kotlin.text%24padEnd%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Char%29%2Flength&quot;&gt;length&lt;/a&gt; specified. Space is used by default.</source>
          <target state="translated">&lt;code&gt;padChar&lt;/code&gt; -文字列に指定&lt;a href=&quot;pad-end#kotlin.text%24padEnd%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Char%29%2Flength&quot;&gt;さ&lt;/a&gt;れた長さよりも短い場合に文字列を埋め込む文字。デフォルトではスペースが使用されます。</target>
        </trans-unit>
        <trans-unit id="bd5f42bf06fd521604498e289daa482258243b4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;padChar&lt;/code&gt; - the character to pad string with, if it has length less than the &lt;a href=&quot;pad-end#kotlin.text%24padEnd%28kotlin.String%2C+kotlin.Int%2C+kotlin.Char%29%2Flength&quot;&gt;length&lt;/a&gt; specified. Space is used by default.</source>
          <target state="translated">&lt;code&gt;padChar&lt;/code&gt; -文字列に指定&lt;a href=&quot;pad-end#kotlin.text%24padEnd%28kotlin.String%2C+kotlin.Int%2C+kotlin.Char%29%2Flength&quot;&gt;さ&lt;/a&gt;れた長さよりも短い場合に文字列を埋め込む文字。デフォルトではスペースが使用されます。</target>
        </trans-unit>
        <trans-unit id="378933c6c2d1f9e9920876580e36b05e9b8d8efd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;padChar&lt;/code&gt; - the character to pad string with, if it has length less than the &lt;a href=&quot;pad-start#kotlin.text%24padStart%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Char%29%2Flength&quot;&gt;length&lt;/a&gt; specified. Space is used by default.</source>
          <target state="translated">&lt;code&gt;padChar&lt;/code&gt; -文字列に指定&lt;a href=&quot;pad-start#kotlin.text%24padStart%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Char%29%2Flength&quot;&gt;さ&lt;/a&gt;れた長さよりも短い場合に文字列を埋め込む文字。デフォルトではスペースが使用されます。</target>
        </trans-unit>
        <trans-unit id="87eeb6c9880e5e71d0479ba97d1c1e287e21e51b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;padChar&lt;/code&gt; - the character to pad string with, if it has length less than the &lt;a href=&quot;pad-start#kotlin.text%24padStart%28kotlin.String%2C+kotlin.Int%2C+kotlin.Char%29%2Flength&quot;&gt;length&lt;/a&gt; specified. Space is used by default.</source>
          <target state="translated">&lt;code&gt;padChar&lt;/code&gt; -文字列に指定&lt;a href=&quot;pad-start#kotlin.text%24padStart%28kotlin.String%2C+kotlin.Int%2C+kotlin.Char%29%2Flength&quot;&gt;さ&lt;/a&gt;れた長さよりも短い場合に文字列を埋め込む文字。デフォルトではスペースが使用されます。</target>
        </trans-unit>
        <trans-unit id="f627d3fa9e23e2203a00e2793f1fff7a22aa25a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;param&lt;/code&gt; (constructor parameter);</source>
          <target state="translated">&lt;code&gt;param&lt;/code&gt; （コンストラクターのパラメーター）;</target>
        </trans-unit>
        <trans-unit id="876f5a1dc4c597977d50707f9b50fb0abc3ad55f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;param&lt;/code&gt; is used as an &lt;a href=&quot;annotations#annotation-use-site-targets&quot;&gt;annotation use-site target&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;param&lt;/code&gt; は、&lt;a href=&quot;annotations#annotation-use-site-targets&quot;&gt;アノテーションの使用サイトターゲット&lt;/a&gt;として使用されます</target>
        </trans-unit>
        <trans-unit id="901b369de442aad5ab3ae75e055c03e25e33f53f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;param&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;param&lt;/code&gt;;</target>
        </trans-unit>
        <trans-unit id="e276fe6573ffb36e406150493494379285bc9c8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;partialWindows&lt;/code&gt; - controls whether or not to keep partial windows in the end if any, by default &lt;code&gt;false&lt;/code&gt; which means partial windows won't be preserved</source>
          <target state="translated">&lt;code&gt;partialWindows&lt;/code&gt; -部分的なウィンドウがある場合、最後に保持するかどうかを制御します。デフォルトでは &lt;code&gt;false&lt;/code&gt; で、部分的なウィンドウは保持されません。</target>
        </trans-unit>
        <trans-unit id="03307a7e15abd3869cc4eb9931070c2c66b67566" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;partialWindows&lt;/code&gt; includes windows of smaller sizes that start from the elements at the end of the collection. For example, if you request windows of three elements, you can't build them for the last two elements. Enabling &lt;code&gt;partialWindows&lt;/code&gt; in this case includes two more lists of sizes 2 and 1.</source>
          <target state="translated">&lt;code&gt;partialWindows&lt;/code&gt; には、コレクションの最後の要素から始まる小さいサイズのウィンドウが含まれます。たとえば、3つの要素のウィンドウを要求した場合、最後の2つの要素のウィンドウを作成することはできません。この場合、 &lt;code&gt;partialWindows&lt;/code&gt; を有効にすると、サイズ2と1のリストがさらに2つ含まれます。</target>
        </trans-unit>
        <trans-unit id="f2d394959b391b289e117e32c942748943fc04a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;plus&lt;/code&gt; and &lt;code&gt;minus&lt;/code&gt; Operators</source>
          <target state="translated">&lt;code&gt;plus&lt;/code&gt; 演算子と &lt;code&gt;minus&lt;/code&gt; 演算子</target>
        </trans-unit>
        <trans-unit id="494290e91b6acda25f5d2f8130edbbea915551b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;plus&lt;/code&gt; and &lt;code&gt;minus&lt;/code&gt; operators</source>
          <target state="translated">&lt;code&gt;plus&lt;/code&gt; 演算子と &lt;code&gt;minus&lt;/code&gt; 演算子</target>
        </trans-unit>
        <trans-unit id="b49b180353e64fc6e5d9f7cdff02fc5294156b0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pointer&lt;/code&gt; - value returned earlier by &lt;a href=&quot;as-c-pointer&quot;&gt;Worker.asCPointer&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;pointer&lt;/code&gt; &lt;a href=&quot;as-c-pointer&quot;&gt;-Worker.asCPointer&lt;/a&gt;によって以前に返された値</target>
        </trans-unit>
        <trans-unit id="83c8f8709e3b990c9d3a5aec7ee5a2b395d10020" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;predicate&lt;/code&gt; -</source>
          <target state="translated">&lt;code&gt;predicate&lt;/code&gt; -</target>
        </trans-unit>
        <trans-unit id="60de56b1c096594153c02aa153a88c551524ad51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;predicate&lt;/code&gt; - function that takes the index of a character and the character itself and returns the result of predicate evaluation on the character.</source>
          <target state="translated">&lt;code&gt;predicate&lt;/code&gt; -文字のインデックスと文字自体を受け取り、文字の述語評価の結果を返す関数。</target>
        </trans-unit>
        <trans-unit id="4bbf5867532295d9c456bd64904fdfdeb406eaf0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;predicate&lt;/code&gt; - function that takes the index of an element and the element itself and returns the result of predicate evaluation on the element.</source>
          <target state="translated">&lt;code&gt;predicate&lt;/code&gt; -要素のインデックスと要素自体を受け取り、要素の述語評価の結果を返す関数。</target>
        </trans-unit>
        <trans-unit id="c442ed0ab5aa9e966a98b7f03fa078374249462d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;preserve-class-initialization&lt;/code&gt; &amp;ndash; generate Java-like bytecode for constructor calls, ensuring that the class initialization order is preserved. This can affect overall performance of your application; use it only if you have some complex state shared between multiple classes and updated on class initialization.</source>
          <target state="translated">&lt;code&gt;preserve-class-initialization&lt;/code&gt; &amp;ndash;コンストラクター呼び出し用のJavaのようなバイトコードを生成し、クラスの初期化順序が確実に保持されるようにします。これは、アプリケーションの全体的なパフォーマンスに影響を与える可能性があります。複数のクラス間で共有され、クラスの初期化時に更新される複雑な状態がある場合にのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="57ba3b863cc8c4290462a7e4c0c2afda26c98701" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;priority&lt;/code&gt; - the priority of the thread.</source>
          <target state="translated">&lt;code&gt;priority&lt;/code&gt; -スレッドの優先度。</target>
        </trans-unit>
        <trans-unit id="c5796ca90f05f8844ac1a5114df5b97bb2be4cb7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;private&lt;/code&gt; marks a declaration as &lt;a href=&quot;visibility-modifiers&quot;&gt;visible in the current class or file&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;private&lt;/code&gt; は、宣言を&lt;a href=&quot;visibility-modifiers&quot;&gt;現在のクラスまたはファイルで可視&lt;/a&gt;としてマークします</target>
        </trans-unit>
        <trans-unit id="3cd1ab3237e659782b1a445b6691cc604fc818d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;private&lt;/code&gt; means visible inside this class only (including all its members);</source>
          <target state="translated">&lt;code&gt;private&lt;/code&gt; は、このクラス内でのみ（そのメンバーをすべて含む）見えることを意味します。</target>
        </trans-unit>
        <trans-unit id="b4ca3ddcd68dce9aded9ed2f0c210450bb7e6949" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;private&lt;/code&gt; members (and &lt;code&gt;internal&lt;/code&gt; members from superclasses in other modules) are also inherited, but are not directly accessible: if the superclass contains a private property &lt;code&gt;foo&lt;/code&gt; that is referenced by a public function &lt;code&gt;bar()&lt;/code&gt;, instances of the subclass will contain a &lt;code&gt;foo&lt;/code&gt;; they can't use it directly, but they are allowed to call &lt;code&gt;bar()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;private&lt;/code&gt; メンバー（および他のモジュールのスーパークラスからの &lt;code&gt;internal&lt;/code&gt; メンバー）も継承されますが、直接アクセスすることはできません。スーパークラスに、パブリック関数 &lt;code&gt;bar()&lt;/code&gt; によって参照されるプライベートプロパティ &lt;code&gt;foo&lt;/code&gt; が含まれている場合、サブクラスのインスタンスには &lt;code&gt;foo&lt;/code&gt; が含まれます。直接使用することはできませんが、 &lt;code&gt;bar()&lt;/code&gt; の呼び出しは許可されています。</target>
        </trans-unit>
        <trans-unit id="f2a7ab2daf9b3462587f6e2840cea60565269c93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;private&lt;/code&gt; members are compiled to &lt;code&gt;private&lt;/code&gt; members;</source>
          <target state="translated">&lt;code&gt;private&lt;/code&gt; メンバーはにコンパイルされている &lt;code&gt;private&lt;/code&gt; メンバー。</target>
        </trans-unit>
        <trans-unit id="281c4e0c9036d6e2b18b7425ed99f8f3ded9c97b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;private&lt;/code&gt; top-level declarations are compiled to package-local declarations;</source>
          <target state="translated">&lt;code&gt;private&lt;/code&gt; トップレベル宣言は、パッケージローカル宣言にコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="1772eb6a89fcd1a653ae37a0e00a70be31b2a71c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;private&lt;/code&gt;: this symbol is only visible inside the containing class</source>
          <target state="translated">&lt;code&gt;private&lt;/code&gt; ：このシンボルは、含まれているクラス内でのみ表示されます</target>
        </trans-unit>
        <trans-unit id="7b1a8411fd48b2c8ac75533016bccfea94c57ce8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;private&lt;/code&gt;: this symbol is only visible inside the file where this symbol is declared</source>
          <target state="translated">&lt;code&gt;private&lt;/code&gt; ：このシンボルは、このシンボルが宣言されているファイル内でのみ表示されます</target>
        </trans-unit>
        <trans-unit id="ebbbdb3c17c62ac194fe9be714fd124da12ea708" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;processScheduledJobs&lt;/code&gt; - controls is we shall wait until all scheduled jobs processed, or terminate immediately.</source>
          <target state="translated">&lt;code&gt;processScheduledJobs&lt;/code&gt; -コントロールは、スケジュールされたすべてのジョブが処理されるまで待機するか、すぐに終了します。</target>
        </trans-unit>
        <trans-unit id="12ee3153ed5cd6c3d8cdbd82eda4a7e94d655cec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;processors&lt;/code&gt;: A comma-specified list of annotation processor qualified class names. If specified, kapt does not try to find annotation processors in &lt;code&gt;apclasspath&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;processors&lt;/code&gt; ：注釈プロセッサで修飾されたクラス名のカンマ指定のリスト。指定された場合は、kaptはで注釈プロセッサを見つけようとしません &lt;code&gt;apclasspath&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bc42dd4e73430a357a459c52466884fb13a6edd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;property&lt;/code&gt; &amp;mdash; must be of type &lt;code&gt;KProperty&amp;lt;*&amp;gt;&lt;/code&gt; or its supertype.</source>
          <target state="translated">&lt;code&gt;property&lt;/code&gt; &amp;mdash;タイプ &lt;code&gt;KProperty&amp;lt;*&amp;gt;&lt;/code&gt; またはそのスーパータイプである必要があります。</target>
        </trans-unit>
        <trans-unit id="8492efa53994f5517732a61648debeb707627261" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;property&lt;/code&gt; &amp;mdash; same as for &lt;code&gt;getValue()&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;property&lt;/code&gt; &amp;mdash; &lt;code&gt;getValue()&lt;/code&gt; の場合と同じです。</target>
        </trans-unit>
        <trans-unit id="39c75279096bb1069711ff5a3beb0e36af65557c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;property&lt;/code&gt; (annotations with this target are not visible to Java);</source>
          <target state="translated">&lt;code&gt;property&lt;/code&gt; （このターゲットの注釈はJavaには表示されません）;</target>
        </trans-unit>
        <trans-unit id="7d79907823fd25c6a00e88d1beabb5caf46c411f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;property&lt;/code&gt; - the metadata for the property, used to get the name of property and lookup the value corresponding to this name in the map.</source>
          <target state="translated">&lt;code&gt;property&lt;/code&gt; -プロパティのメタデータ。プロパティの名前を取得し、マップ内でこの名前に対応する値を検索するために使用されます。</target>
        </trans-unit>
        <trans-unit id="4eb0a7c5aaedbf85636c8349c449b9017584b130" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;property&lt;/code&gt; - the metadata for the property, used to get the name of property and store the value associated with that name in the map.</source>
          <target state="translated">&lt;code&gt;property&lt;/code&gt; -プロパティのメタデータ。プロパティの名前を取得し、その名前に関連付けられた値をマップに格納するために使用されます。</target>
        </trans-unit>
        <trans-unit id="a84e91f7b88fb5b447ff2adc00ec643fcd89527e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;property&lt;/code&gt; - the metadata for the property.</source>
          <target state="translated">&lt;code&gt;property&lt;/code&gt; -プロパティのメタデータ。</target>
        </trans-unit>
        <trans-unit id="6c88d0209b5cf686364eee61e0aa5b18521f117e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;property&lt;/code&gt; is used as an &lt;a href=&quot;annotations#annotation-use-site-targets&quot;&gt;annotation use-site target&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;property&lt;/code&gt; は、&lt;a href=&quot;annotations#annotation-use-site-targets&quot;&gt;アノテーションの使用サイトターゲット&lt;/a&gt;として使用されます</target>
        </trans-unit>
        <trans-unit id="26979e5a5a77a7c1d8d4cd90472ae70bee609c92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;property&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;property&lt;/code&gt;;</target>
        </trans-unit>
        <trans-unit id="ef850a5ede12132543032152b498af154c1e665f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;protected&lt;/code&gt; &amp;mdash; same as &lt;code&gt;private&lt;/code&gt; + visible in subclasses too;</source>
          <target state="translated">&lt;code&gt;protected&lt;/code&gt; &amp;mdash; &lt;code&gt;private&lt;/code&gt; + と同じです。サブクラスでも可視です。</target>
        </trans-unit>
        <trans-unit id="d5172ab175bda21bb87b88dda90ee95aced1b408" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;protected&lt;/code&gt; is not available for top-level declarations.</source>
          <target state="translated">&lt;code&gt;protected&lt;/code&gt; トップレベルの宣言では、protectedは使用できません。</target>
        </trans-unit>
        <trans-unit id="cb63247e4c1c5e0eab7c42818f592f975a1fad75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;protected&lt;/code&gt; marks a declaration as &lt;a href=&quot;visibility-modifiers&quot;&gt;visible in the current class and its subclasses&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;protected&lt;/code&gt; は、宣言を&lt;a href=&quot;visibility-modifiers&quot;&gt;現在のクラスとそのサブクラスで可視&lt;/a&gt;としてマークします</target>
        </trans-unit>
        <trans-unit id="88734a0fe76710da1df7b4bdadba18b2d8d5c719" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;protected&lt;/code&gt; remains &lt;code&gt;protected&lt;/code&gt; (note that Java allows accessing protected members from other classes in the same package and Kotlin doesn't, so Java classes will have broader access to the code);</source>
          <target state="translated">&lt;code&gt;protected&lt;/code&gt; は &lt;code&gt;protected&lt;/code&gt; されたままです（Javaは同じパッケージ内の他のクラスから保護されたメンバーへのアクセスを許可し、Kotlinは許可しないので、Javaクラスはコードへのより広範なアクセスを持つことに注意してください）。</target>
        </trans-unit>
        <trans-unit id="e68dde344fe415e84c6a9816a94c8b12d5689a2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;protected&lt;/code&gt;: this symbol is only visible inside the containing class and all of its subclasses, no matter where they are declared (so if your class is public and &lt;a href=&quot;inheritance#subclassing&quot;&gt;open&lt;/a&gt;, anyone can subclass it and thus get to see and use the protected members). If you have used Java: this does &lt;em&gt;not&lt;/em&gt; also grant access from the rest of the package.</source>
          <target state="translated">&lt;code&gt;protected&lt;/code&gt; ：このシンボルは、それらが宣言されている場所に関係なく、包含クラスとそのすべてのサブクラス内でのみ表示されます（したがって、クラスがpublicおよび&lt;a href=&quot;inheritance#subclassing&quot;&gt;openの&lt;/a&gt;場合、誰でもサブクラス化して、保護されたメンバーを表示および使用できます）。Javaを使用した場合：これは、パッケージの残りの部分からのアクセスも許可しませ&lt;em&gt;ん&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="bfec9cea237b4503e6387514e81a2644bba7606a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;provideDelegate&lt;/code&gt;, &lt;code&gt;getValue&lt;/code&gt; and &lt;code&gt;setValue&lt;/code&gt; operator functions are described in &lt;a href=&quot;delegated-properties&quot;&gt;Delegated properties&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;provideDelegate&lt;/code&gt; 、 &lt;code&gt;getValue&lt;/code&gt; 、および &lt;code&gt;setValue&lt;/code&gt; 演算子関数については、&lt;a href=&quot;delegated-properties&quot;&gt;委任プロパティで&lt;/a&gt;説明しています。</target>
        </trans-unit>
        <trans-unit id="3c1c6059a88a6253ff33bb98675ffdbdfc713e49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;public&lt;/code&gt; &amp;mdash; any client who sees the declaring class sees its &lt;code&gt;public&lt;/code&gt; members.</source>
          <target state="translated">&lt;code&gt;public&lt;/code&gt; &amp;mdash;宣言クラスを見るすべてのクライアントは、その &lt;code&gt;public&lt;/code&gt; メンバーを見る。</target>
        </trans-unit>
        <trans-unit id="eab1bb865b6abaa17bf70e9f55b348d2a075d6f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;public&lt;/code&gt; (or omitted): this symbol is visible throughout the entire codebase</source>
          <target state="translated">&lt;code&gt;public&lt;/code&gt; （または省略）：このシンボルはコードベース全体で表示されます</target>
        </trans-unit>
        <trans-unit id="e349eb6b48871de21c2fc41920223e4c77f26a7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;public&lt;/code&gt; (or omitted): this symbol is visible to any code that can see the containing class</source>
          <target state="translated">&lt;code&gt;public&lt;/code&gt; （または省略）：このシンボルは、含まれているクラスを見ることができるすべてのコードに表示されます</target>
        </trans-unit>
        <trans-unit id="766337e6074e7cbfa5ffd93c46a523fcdd45f121" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;public&lt;/code&gt; marks a declaration as &lt;a href=&quot;visibility-modifiers&quot;&gt;visible anywhere&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;public&lt;/code&gt; は宣言を&lt;a href=&quot;visibility-modifiers&quot;&gt;どこでも可視&lt;/a&gt;としてマークします</target>
        </trans-unit>
        <trans-unit id="f52a00d65f5a1828adf3ed2971a1f773399099be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;public&lt;/code&gt; remains &lt;code&gt;public&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;public&lt;/code&gt; 依然として &lt;code&gt;public&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ba7bd6b8dedfc63ca246864f34e877c81a48abe3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;range&lt;/code&gt; -</source>
          <target state="translated">&lt;code&gt;range&lt;/code&gt; -</target>
        </trans-unit>
        <trans-unit id="4c1136a4c963471f1976afcff5e1a1af934e7e99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reason&lt;/code&gt; - a string explaining why the implementation is missing.</source>
          <target state="translated">&lt;code&gt;reason&lt;/code&gt; -実装が欠落している理由を説明する文字列。</target>
        </trans-unit>
        <trans-unit id="a97ab72a73b1326a99a3abc12c26aa0ff03c9064" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reason&lt;/code&gt; - the description of the error</source>
          <target state="translated">&lt;code&gt;reason&lt;/code&gt; -エラーの説明</target>
        </trans-unit>
        <trans-unit id="2ce0cb646c34f13816ccce7b03f884fd00d7d2be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;receiver1&lt;/code&gt; - the instance of the first receiver.</source>
          <target state="translated">&lt;code&gt;receiver1&lt;/code&gt; -最初のレシーバーのインスタンス。</target>
        </trans-unit>
        <trans-unit id="158844371f061c3de78c6f60c8d8fdebcee509e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;receiver2&lt;/code&gt; - the instance of the second receiver.</source>
          <target state="translated">&lt;code&gt;receiver2&lt;/code&gt; -2番目のレシーバーのインスタンス。</target>
        </trans-unit>
        <trans-unit id="d05c93992a87e7b93bfa0b53aaf9442f53c0fc40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;receiver&lt;/code&gt; (receiver parameter of an extension function or property);</source>
          <target state="translated">&lt;code&gt;receiver&lt;/code&gt; （拡張関数またはプロパティのレシーバーパラメーター）;</target>
        </trans-unit>
        <trans-unit id="a98aea6224cfc44cd0422b175f55cd717c483718" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;receiver&lt;/code&gt; - the instance of the class used to retrieve the value of the property delegate.</source>
          <target state="translated">&lt;code&gt;receiver&lt;/code&gt; -プロパティデリゲートの値を取得するために使用されるクラスのインスタンス。</target>
        </trans-unit>
        <trans-unit id="c3da121f86146196f53573fe143d1c4f02c04011" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;receiver&lt;/code&gt; - the receiver which is used to modify the value of the property. For example, it should be a class instance if this is a member property of that class, or an extension receiver if this is a top level extension property.</source>
          <target state="translated">&lt;code&gt;receiver&lt;/code&gt; -プロパティの値を変更するために使用されるレシーバー。たとえば、これがそのクラスのメンバープロパティである場合はクラスインスタンスである必要があり、最上位の拡張プロパティである場合は拡張レシーバーである必要があります。</target>
        </trans-unit>
        <trans-unit id="6a781ede8edeceb338ed66f80a72f5f115f56011" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;receiver&lt;/code&gt; - the receiver which is used to obtain the value of the property delegate. For example, it should be a class instance if this is a member property of that class, or an extension receiver if this is a top level extension property.</source>
          <target state="translated">&lt;code&gt;receiver&lt;/code&gt; -プロパティデリゲートの値を取得するために使用されるレシーバー。たとえば、これがそのクラスのメンバープロパティである場合はクラスインスタンスである必要があり、最上位の拡張プロパティである場合は拡張レシーバーである必要があります。</target>
        </trans-unit>
        <trans-unit id="78b24734911f563b9a77668c2f9e12d696554423" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;receiver&lt;/code&gt; - the receiver which is used to obtain the value of the property. For example, it should be a class instance if this is a member property of that class, or an extension receiver if this is a top level extension property.</source>
          <target state="translated">&lt;code&gt;receiver&lt;/code&gt; -プロパティの値を取得するために使用されるレシーバー。たとえば、これがそのクラスのメンバープロパティである場合はクラスインスタンスである必要があり、最上位の拡張プロパティである場合は拡張レシーバーである必要があります。</target>
        </trans-unit>
        <trans-unit id="002bc8ba7fef19afe5c32f3a4329b439b851c81b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;receiver&lt;/code&gt;is used as an &lt;a href=&quot;annotations#annotation-use-site-targets&quot;&gt;annotation use-site target&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;receiver&lt;/code&gt; は、&lt;a href=&quot;annotations#annotation-use-site-targets&quot;&gt;アノテーションの使用サイトターゲット&lt;/a&gt;として使用されます</target>
        </trans-unit>
        <trans-unit id="3cd01de440d83b1fb95ce4ab9c8465f2d6dd4245" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reified&lt;/code&gt; marks a type parameter of an inline function as &lt;a href=&quot;inline-functions#reified-type-parameters&quot;&gt;accessible at runtime&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;reified&lt;/code&gt; は、インライン関数の型パラメーターを&lt;a href=&quot;inline-functions#reified-type-parameters&quot;&gt;実行時にアクセス可能&lt;/a&gt;としてマークします</target>
        </trans-unit>
        <trans-unit id="3a647b84307c2a1dabf7b72996b50831df922f5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rem&lt;/code&gt; operator</source>
          <target state="translated">&lt;code&gt;rem&lt;/code&gt; 演算子</target>
        </trans-unit>
        <trans-unit id="d74594c3c4e34a53b2bdf0e70926edc117855eb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;replaceWith&lt;/code&gt; - If present, specifies a code fragment which should be used as a replacement for the deprecated API usage.</source>
          <target state="translated">&lt;code&gt;replaceWith&lt;/code&gt; -存在する場合、廃止されたAPIの使用法の代わりとして使用されるコードフラグメントを指定します。</target>
        </trans-unit>
        <trans-unit id="9731b874ffaf46a10ba130d059f97ed608f406c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;replacement&lt;/code&gt; - A replacement expression that can include substitutions.</source>
          <target state="translated">&lt;code&gt;replacement&lt;/code&gt; -置換を含めることができる置換式。</target>
        </trans-unit>
        <trans-unit id="6787f23fad529d927833cc839ccfacf1d47d1c5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;replacement&lt;/code&gt; - A replacement expression that can include substitutions. See &lt;a href=&quot;-regex/replace-first#kotlin.text.Regex%24replaceFirst%28kotlin.CharSequence%2C+kotlin.String%29&quot;&gt;Regex.replaceFirst&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;replacement&lt;/code&gt; -置換を含めることができる置換式。詳細については、&lt;a href=&quot;-regex/replace-first#kotlin.text.Regex%24replaceFirst%28kotlin.CharSequence%2C+kotlin.String%29&quot;&gt;Regex.replaceFirst&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0c036a71ebab5e11a408004b8de144be4c01b78e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;replacement&lt;/code&gt; - A replacement expression that can include substitutions. See &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#appendReplacement(java.lang.StringBuffer,%20java.lang.String)&quot;&gt;Matcher.appendReplacement&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;replacement&lt;/code&gt; -置換を含めることができる置換式。詳細については、&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#appendReplacement(java.lang.StringBuffer,%20java.lang.String)&quot;&gt;Matcher.appendReplacement&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="757f261748dcbf83ee41e61ec7397a56574c415d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;replacement&lt;/code&gt; - A replacement expression that can include substitutions. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace&quot;&gt;String.prototype.replace&lt;/a&gt; function docs for details.</source>
          <target state="translated">&lt;code&gt;replacement&lt;/code&gt; -置換を含めることができる置換式。詳細については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace&quot;&gt;String.prototype.replace&lt;/a&gt;関数のドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="731ebf1eb0b6ebc6fb79eeaefce5f6364cf410c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;return&lt;/code&gt;&lt;a href=&quot;returns&quot;&gt;returns from the nearest enclosing function or anonymous function&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; &lt;a href=&quot;returns&quot;&gt;最も近い囲み関数または無名関数から&lt;/a&gt;戻ります</target>
        </trans-unit>
        <trans-unit id="ccc2d3f36614592ea4f6050d3d2c24e80066d487" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reversed()&lt;/code&gt; returns a new collection with the copies of the elements. So, if you change the original collection later, this won't affect the previously obtained results of &lt;code&gt;reversed()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reversed()&lt;/code&gt; は、要素のコピーを含む新しいコレクションを返します。そのため、後で元のコレクションを変更しても、以前に取得した &lt;code&gt;reversed()&lt;/code&gt; 結果には影響しません。</target>
        </trans-unit>
        <trans-unit id="11e8f77497a243623a39f155fcc2b2e549c562a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;round(x)&lt;/code&gt; is &lt;code&gt;x&lt;/code&gt; where &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt; or &lt;code&gt;+Inf&lt;/code&gt; or &lt;code&gt;-Inf&lt;/code&gt; or already a mathematical integer.</source>
          <target state="translated">&lt;code&gt;round(x)&lt;/code&gt; は &lt;code&gt;x&lt;/code&gt; です。ここで、 &lt;code&gt;x&lt;/code&gt; は &lt;code&gt;NaN&lt;/code&gt; または &lt;code&gt;+Inf&lt;/code&gt; または &lt;code&gt;-Inf&lt;/code&gt; またはすでに数学的な整数です。</target>
        </trans-unit>
        <trans-unit id="021a1d5581cc1e055ff999d6e5c3167953323279" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;roundToInt&lt;/code&gt;, &lt;code&gt;roundToLong&lt;/code&gt; (half to integer) extension functions;</source>
          <target state="translated">&lt;code&gt;roundToInt&lt;/code&gt; 、 &lt;code&gt;roundToLong&lt;/code&gt; （半分から整数）拡張関数。</target>
        </trans-unit>
        <trans-unit id="a7a48636595a73c48fb5fff1a432d18d2229d423" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;run()&lt;/code&gt;, &lt;code&gt;let()&lt;/code&gt;, and &lt;code&gt;with()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;run()&lt;/code&gt; 、 &lt;code&gt;let()&lt;/code&gt; 、および &lt;code&gt;with()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="53ad25e025c60c66a44e7a1cb485a6d06906b245" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;run&lt;/code&gt; does the same as &lt;code&gt;with&lt;/code&gt; but invokes as &lt;code&gt;let&lt;/code&gt; - as an extension function of the context object.</source>
          <target state="translated">&lt;code&gt;run&lt;/code&gt; は、 &lt;code&gt;with&lt;/code&gt; と同じですが、コンテキストオブジェクトの拡張関数として &lt;code&gt;let&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="bf8d9d17d64ff82469dbf5ae3e8a7363e3bf8950" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;run&lt;/code&gt; is useful when your lambda contains both the object initialization and the computation of the return value.</source>
          <target state="translated">&lt;code&gt;run&lt;/code&gt; は、ラムダにオブジェクトの初期化と戻り値の計算の両方が含まれている場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="02cd92347a4fd8b87df788ac3d5cb5598e8e2a5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;run&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt;, and &lt;code&gt;apply&lt;/code&gt; refer to the context object as a lambda receiver - by keyword &lt;code&gt;this&lt;/code&gt;. Hence, in their lambdas, the object is available as it would be in ordinary class functions. In most cases, you can omit &lt;code&gt;this&lt;/code&gt; when accessing the members of the receiver object, making the code shorter. On the other hand, if &lt;code&gt;this&lt;/code&gt; is omitted, it can be hard to distinguish between the receiver members and external objects or functions. So, having the context object as a receiver (&lt;code&gt;this&lt;/code&gt;) is recommended for lambdas that mainly operate on the object members: call its functions or assign properties.</source>
          <target state="translated">&lt;code&gt;run&lt;/code&gt; 、 &lt;code&gt;with&lt;/code&gt; 、 &lt;code&gt;apply&lt;/code&gt; は、コンテキストオブジェクトをラムダレシーバーとして参照します（キーワード &lt;code&gt;this&lt;/code&gt; )。したがって、それらのラムダでは、オブジェクトは通常のクラス関数と同じように使用できます。ほとんどの場合、レシーバーオブジェクトのメンバーにアクセスするときに &lt;code&gt;this&lt;/code&gt; を省略して、コードを短くすることができます。一方、 &lt;code&gt;this&lt;/code&gt; を省略した場合、レシーバーメンバーと外部オブジェクトまたは関数との区別が難しくなる可能性があります。したがって、コンテキストオブジェクトをレシーバー（ &lt;code&gt;this&lt;/code&gt; ）として持つことは、主にオブジェクトメンバーを操作するラムダ（関数の呼び出しまたはプロパティの割り当て）に推奨されます。</target>
        </trans-unit>
        <trans-unit id="e79e7d974f97240f7bc523276b3d8e231c76c029" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;runtimeOnly&lt;/code&gt; dependencies are available at runtime but are not visible during compilation of any module.</source>
          <target state="translated">&lt;code&gt;runtimeOnly&lt;/code&gt; 依存関係は実行時に使用できますが、モジュールのコンパイル中は表示されません。</target>
        </trans-unit>
        <trans-unit id="58a6240469f8a6ee6ff33c0e5cb5c16ca2afcb94" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scale&lt;/code&gt; - the scale of the resulting &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html&quot;&gt;BigDecimal&lt;/a&gt;, i.e. number of decimal places of the fractional part. By default 0.</source>
          <target state="translated">&lt;code&gt;scale&lt;/code&gt; -結果のスケール&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html&quot;&gt;をBigDecimal&lt;/a&gt;、小数部の小数点以下の桁数、すなわち。デフォルトは0です。</target>
        </trans-unit>
        <trans-unit id="ea3d126205772519dab1ad0222b7a38681bf26e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sealed&lt;/code&gt; declares a &lt;a href=&quot;sealed-classes&quot;&gt;sealed class&lt;/a&gt; (a class with restricted subclassing)</source>
          <target state="translated">&lt;code&gt;sealed&lt;/code&gt; &lt;a href=&quot;sealed-classes&quot;&gt;たクラス&lt;/a&gt;（サブクラス化が制限されたクラス）を宣言します</target>
        </trans-unit>
        <trans-unit id="20556a735d9463307d50afc8593af51bcb40d9d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;seatCount&lt;/code&gt;, which is &lt;code&gt;Car&lt;/code&gt;'s own property</source>
          <target state="translated">&lt;code&gt;seatCount&lt;/code&gt; &lt;code&gt;Car&lt;/code&gt; 自身のプロパティであるSeatCount</target>
        </trans-unit>
        <trans-unit id="d8fc07290c6f54ea4f72ca5abb9bad494c417569" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;second&lt;/code&gt; - Second value.</source>
          <target state="translated">&lt;code&gt;second&lt;/code&gt; -2番目の値。</target>
        </trans-unit>
        <trans-unit id="2285f25f1a0e8cc8b7f48cc6a7802b16c54b2f7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; (property setter);</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; （プロパティセッター）;</target>
        </trans-unit>
        <trans-unit id="0ee8ffdd88f78d8d595444de307c476608800ec7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setparam&lt;/code&gt; (property setter parameter);</source>
          <target state="translated">&lt;code&gt;setparam&lt;/code&gt; （プロパティセッターパラメーター）;</target>
        </trans-unit>
        <trans-unit id="098cc6c6492640dbb39b4e235003b429bc9ef092" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setparam&lt;/code&gt; is used as an &lt;a href=&quot;annotations#annotation-use-site-targets&quot;&gt;annotation use-site target&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;setparam&lt;/code&gt; は、&lt;a href=&quot;annotations#annotation-use-site-targets&quot;&gt;アノテーションの使用サイトターゲット&lt;/a&gt;として使用されます</target>
        </trans-unit>
        <trans-unit id="00470515b77bec859fa0fd291b1d7e77ca03663e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;seze&lt;/code&gt; - the size of one element in the array used to store bits.</source>
          <target state="translated">&lt;code&gt;seze&lt;/code&gt; -ビットを格納するために使用される配列の1つの要素のサイズ。</target>
        </trans-unit>
        <trans-unit id="96c489e6b5441f3f27632e207bd8669e506ee77b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shl(bits)&lt;/code&gt; &amp;ndash; signed shift left (Java's &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;shl(bits)&lt;/code&gt; &amp;ndash;符号付き左シフト（Javaの &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="4b70d011bff39eddcbc338c1187efb5ec89d1a27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shr(bits)&lt;/code&gt; &amp;ndash; signed shift right (Java's &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;shr(bits)&lt;/code&gt; &amp;ndash;符号付き右シフト（Javaの &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="e3f9cf744bac34c42acc68c934a8943b08244608" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sign(NaN)&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;sign(NaN)&lt;/code&gt; は &lt;code&gt;NaN&lt;/code&gt; です</target>
        </trans-unit>
        <trans-unit id="a9b8d8b2d35af1ec3f393781437b403ef99b39b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sin(NaN|+Inf|-Inf)&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;sin(NaN|+Inf|-Inf)&lt;/code&gt; は &lt;code&gt;NaN&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4c1eb584a9072c71fcaa6417c2a09246c0138d53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sinh(+Inf)&lt;/code&gt; is &lt;code&gt;+Inf&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;sinh(+Inf)&lt;/code&gt; は &lt;code&gt;+Inf&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b135da3058c9500d66aafb6a128281dbd15ca97b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sinh(-Inf)&lt;/code&gt; is &lt;code&gt;-Inf&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;sinh(-Inf)&lt;/code&gt; は &lt;code&gt;-Inf&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="85c95c02a351d629823df5a68e49b9f10c9f4edf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sinh(NaN)&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;sinh(NaN)&lt;/code&gt; は &lt;code&gt;NaN&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ebcd1833910fca27cdcbcdc254b29db060b5e998" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; -</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; -</target>
        </trans-unit>
        <trans-unit id="3cc3c43f4b02f8b21b31f647f391bfa5e465269e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; - the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; -各文字のシーケンスを取り込む要素の数は、正でなければならず、この文字列内の要素の数よりも大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="6ae2c5bcf4763c4f28a64b683a56e64ac50f0f01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; - the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; -各リストで取得する要素の数。正の数である必要があり、このコレクションの要素の数よりも大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="b0eabc070e472f9aea5636eafa863a9302747954" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; - the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; -各文字列で取得する要素の数。正の数である必要があり、この文字シーケンスの要素の数よりも大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="dc7f1044f1e44064883deade54887c5142dae0bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; - the number of elements to take in each window</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; -各ウィンドウで取得する要素の数</target>
        </trans-unit>
        <trans-unit id="41c63f30c69855986f80c66fba60df25156094b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; - the size in bytes of data of this type</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; -このタイプのデータのバイト単位のサイズ</target>
        </trans-unit>
        <trans-unit id="5b691a866956ce689f6b294e5168479679728613" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size_t&lt;/code&gt; and &lt;code&gt;ptrdiff_t&lt;/code&gt; (also &lt;code&gt;ssize_t&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;size_t&lt;/code&gt; および &lt;code&gt;ptrdiff_t&lt;/code&gt; （また &lt;code&gt;ssize_t&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="87cdc6f5c81965c63759c8bc93b97beee6c125e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sort*&lt;/code&gt; instead of &lt;code&gt;sorted*&lt;/code&gt; in the names of all sorting functions: &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/sort&quot;&gt;&lt;code&gt;sort()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/sort-descending&quot;&gt;&lt;code&gt;sortDescending()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/sort-by&quot;&gt;&lt;code&gt;sortBy()&lt;/code&gt;&lt;/a&gt;, and so on.</source>
          <target state="translated">&lt;code&gt;sort*&lt;/code&gt; すべての並べ替え関数の名前で、 &lt;code&gt;sorted*&lt;/code&gt; *の代わりにsort *を使用します：&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/sort&quot;&gt; &lt;code&gt;sort()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/sort-descending&quot;&gt; &lt;code&gt;sortDescending()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/sort-by&quot;&gt; &lt;code&gt;sortBy()&lt;/code&gt; &lt;/a&gt;など。</target>
        </trans-unit>
        <trans-unit id="20605ae3cabe36bbd227ce9c86b87f19406bd512" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sources&lt;/code&gt; (&lt;em&gt;required&lt;/em&gt;): An output path for the generated files.</source>
          <target state="translated">&lt;code&gt;sources&lt;/code&gt; （&lt;em&gt;必須&lt;/em&gt;）：生成されたファイルの出力パス。</target>
        </trans-unit>
        <trans-unit id="58fedc20a964ac6d3e409f1eb6f5b974b7d02b00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sqrt(x)&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt; when &lt;code&gt;x &amp;lt; 0&lt;/code&gt; or &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;sqrt(x)&lt;/code&gt; &lt;code&gt;x &amp;lt; 0&lt;/code&gt; または &lt;code&gt;x&lt;/code&gt; が &lt;code&gt;NaN&lt;/code&gt; の場合、sqrt（x）は &lt;code&gt;NaN&lt;/code&gt; です</target>
        </trans-unit>
        <trans-unit id="a8068f2545dd80f59f49a0506837766685a6522f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start&lt;/code&gt; - if &lt;code&gt;true&lt;/code&gt;, the thread is immediately started.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; - &lt;code&gt;true&lt;/code&gt; の場合、スレッドはすぐに開始されます。</target>
        </trans-unit>
        <trans-unit id="ff9aa0cd8a242744f68fb657ded03dd2b2d6f5b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;startIndex&lt;/code&gt; - An index to start search with, by default 0. Must be not less than zero and not greater than &lt;code&gt;input.length()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;startIndex&lt;/code&gt; -検索を開始するインデックス。デフォルトでは0です。ゼロ以上、 &lt;code&gt;input.length()&lt;/code&gt; 以下でなければなりません</target>
        </trans-unit>
        <trans-unit id="acdb8a0620e4c7b5130f3f413b7f675514ad6cea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;startIndex&lt;/code&gt; - The index of character to start searching at. The search proceeds backward toward the beginning of the string.</source>
          <target state="translated">&lt;code&gt;startIndex&lt;/code&gt; -検索を開始する文字のインデックス。検索は文字列の先頭に向かって後方に進みます。</target>
        </trans-unit>
        <trans-unit id="124ba5ac28f4badbe35200ad470134f178f03ec1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;startIndex&lt;/code&gt; - the beginning (inclusive) of the subrange of characters, 0 by default.</source>
          <target state="translated">&lt;code&gt;startIndex&lt;/code&gt; -文字のサブ範囲の開始（これを含む）、デフォルトでは0。</target>
        </trans-unit>
        <trans-unit id="9a1eefd9393380e662552de130993045e8c45f90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;startIndex&lt;/code&gt; - the beginning (inclusive) of the subrange to copy, 0 by default.</source>
          <target state="translated">&lt;code&gt;startIndex&lt;/code&gt; -コピーする部分範囲の開始（これを含む）、デフォルトでは0。</target>
        </trans-unit>
        <trans-unit id="6d7ba75f0fac0567e24fa448288b299f775f0dfe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;startIndex&lt;/code&gt; - the beginning (inclusive) of the subrange to decode, 0 by default.</source>
          <target state="translated">&lt;code&gt;startIndex&lt;/code&gt; -デコードする部分範囲の開始（これを含む）、デフォルトでは0。</target>
        </trans-unit>
        <trans-unit id="ee8df34a76b9d52df945d0dc5ba3c9ffb5bdc4e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;startIndex&lt;/code&gt; - the beginning (inclusive) of the substring to encode, 0 by default.</source>
          <target state="translated">&lt;code&gt;startIndex&lt;/code&gt; -エンコードする部分文字列の先頭（これを含む）、デフォルトでは0。</target>
        </trans-unit>
        <trans-unit id="32bc7b0935a3307d89f32516078796087b21372a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;startIndex&lt;/code&gt; - the beginning (inclusive) of the substring, 0 by default.</source>
          <target state="translated">&lt;code&gt;startIndex&lt;/code&gt; -サブストリングの開始（これを含む）、デフォルトでは0。</target>
        </trans-unit>
        <trans-unit id="835e8083c9240cc60a14ec539b52df0df483620f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;startIndex&lt;/code&gt; - the index of the first character to be removed.</source>
          <target state="translated">&lt;code&gt;startIndex&lt;/code&gt; -削除される最初の文字のインデックス。</target>
        </trans-unit>
        <trans-unit id="c012a03f38ecc253b52f1afffbc631db96db9a09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;startIndex&lt;/code&gt; - the index of the first character to be replaced.</source>
          <target state="translated">&lt;code&gt;startIndex&lt;/code&gt; -置き換えられる最初の文字のインデックス。</target>
        </trans-unit>
        <trans-unit id="b6a5e9aac01d2306cb7c6b7a7ea596a30e7639ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;startIndex&lt;/code&gt; - the start index (inclusive).</source>
          <target state="translated">&lt;code&gt;startIndex&lt;/code&gt; -開始インデックス（これを含む）。</target>
        </trans-unit>
        <trans-unit id="aad719fc94e4921fd31594c6d16dcb0ddb52cf98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;startIndex&lt;/code&gt; - the start offset (inclusive) of the substring to copy.</source>
          <target state="translated">&lt;code&gt;startIndex&lt;/code&gt; -コピーする部分文字列の開始オフセット（これを含む）。</target>
        </trans-unit>
        <trans-unit id="b72ad0e532783f6ba234cbbdc102b23306ca16e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;status&lt;/code&gt; - serves as a status code; by convention, a nonzero status code indicates abnormal termination.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; -ステータスコードとして機能します。慣例により、ゼロ以外のステータスコードは異常終了を示します。</target>
        </trans-unit>
        <trans-unit id="76e05e699805ca165800cfaf4cdbd31609cb5ed1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stdlib&lt;/code&gt; already makes use of contracts, which leads to improvements in the analyses described above. This part of contracts is &lt;strong&gt;stable&lt;/strong&gt;, meaning that you can benefit from the improved analysis right now without any additional opt-ins:</source>
          <target state="translated">&lt;code&gt;stdlib&lt;/code&gt; はすでにコントラクトを利用しているため、上記の分析が改善されます。契約のこの部分は&lt;strong&gt;安定し&lt;/strong&gt;ています。つまり、追加のオプトインなしで、改善された分析から今すぐメリットを得ることができます。</target>
        </trans-unit>
        <trans-unit id="727fd974271fc9099443f42a3b2ceeb5e2610178" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;step&lt;/code&gt; - the number of elements to move the window forward by on an each step, by default 1</source>
          <target state="translated">&lt;code&gt;step&lt;/code&gt; -各ステップでウィンドウを前方に移動する要素の数、デフォルトでは1</target>
        </trans-unit>
        <trans-unit id="dcd999b6301542cebc2fb677d779bd98681aaf0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;step&lt;/code&gt; defines a distance between first elements of two adjacent windows. By default the value is 1, so the result contains windows starting from all elements. If you increase the step to 2, you will receive only windows starting from odd elements: first, third, an so on.</source>
          <target state="translated">&lt;code&gt;step&lt;/code&gt; は、2つの隣接するウィンドウの最初の要素間の距離を定義します。デフォルトの値は1なので、結果にはすべての要素から始まるウィンドウが含まれます。ステップを2に増やすと、奇数の要素（最初、3番目など）から始まるウィンドウのみが表示されます。</target>
        </trans-unit>
        <trans-unit id="3d0d0c2c99afb5f31cdfb8aa7358f3f9d2409787" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strictEnums&lt;/code&gt; and &lt;code&gt;nonStrictEnums&lt;/code&gt; properties values are space-separated lists of the enums that should be generated as a Kotlin enum or as integral values correspondingly. If the enum is not included into any of these lists, then it is generated according to the heuristics.</source>
          <target state="translated">&lt;code&gt;strictEnums&lt;/code&gt; プロパティと &lt;code&gt;nonStrictEnums&lt;/code&gt; プロパティの値は、スペースで区切られた列挙型のリストであり、Kotlin列挙型または対応する整数値として生成する必要があります。列挙型がこれらのリストのいずれにも含まれていない場合は、ヒューリスティックに従って生成されます。</target>
        </trans-unit>
        <trans-unit id="fd1037cd9a47ac6bb5aed0cc042843d12462adcf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stubs&lt;/code&gt; &amp;ndash; only generate stubs needed for annotation processing;</source>
          <target state="translated">&lt;code&gt;stubs&lt;/code&gt; &amp;ndash;注釈処理に必要なスタブのみを生成します。</target>
        </trans-unit>
        <trans-unit id="88061555c9c98e794fcbabeb6346959556967b63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stubs&lt;/code&gt; (&lt;em&gt;required&lt;/em&gt;): An output path for the stub files. In other words, some temporary directory.</source>
          <target state="translated">&lt;code&gt;stubs&lt;/code&gt; （&lt;em&gt;必須&lt;/em&gt;）：スタブファイルの出力パス。つまり、いくつかの一時ディレクトリ。</target>
        </trans-unit>
        <trans-unit id="5237e34d8ca0b0aa26e70c25ae06d3415d09f9d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stubsAndApt&lt;/code&gt; &amp;ndash; generate stubs and run annotation processing.</source>
          <target state="translated">&lt;code&gt;stubsAndApt&lt;/code&gt; &amp;ndash;スタブを生成し、注釈処理を実行します。</target>
        </trans-unit>
        <trans-unit id="2bdb177a1a5e9df43693e64cf09b5a941dfeef82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suspend&lt;/code&gt; marks a function or lambda as suspending (usable as a &lt;a href=&quot;coroutines-overview&quot;&gt;coroutine&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;suspend&lt;/code&gt; は、関数またはラムダをサスペンドとしてマークします（&lt;a href=&quot;coroutines-overview&quot;&gt;コルーチン&lt;/a&gt;として使用可能）</target>
        </trans-unit>
        <trans-unit id="d88adc9894a2f1336ad6b9c663914539e72791a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tailrec&lt;/code&gt; marks a function as &lt;a href=&quot;functions#tail-recursive-functions&quot;&gt;tail-recursive&lt;/a&gt; (allowing the compiler to replace recursion with iteration)</source>
          <target state="translated">&lt;code&gt;tailrec&lt;/code&gt; は、関数を&lt;a href=&quot;functions#tail-recursive-functions&quot;&gt;末尾再帰&lt;/a&gt;としてマークします（コンパイラーが再帰を反復に置き換えることができるようにします）</target>
        </trans-unit>
        <trans-unit id="8d3d2939196993f9bab19d448225194c8a28b278" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;takeIf()&lt;/code&gt; and &lt;code&gt;takeUnless()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;takeIf()&lt;/code&gt; および &lt;code&gt;takeUnless()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c06bcfa7789a0124c5ed588357e1ea0f3463b180" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;takeIf&lt;/code&gt; and &lt;code&gt;takeUnless&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;takeIf&lt;/code&gt; と &lt;code&gt;takeUnless&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1f6b8bc7140372eea96f7957c76b434bd69770a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;takeIf&lt;/code&gt; and &lt;code&gt;takeUnless&lt;/code&gt; are especially useful together with scope functions. A good case is chaining them with &lt;code&gt;let&lt;/code&gt; for running a code block on objects that match the given predicate. To do this, call &lt;code&gt;takeIf&lt;/code&gt; on the object and then call &lt;code&gt;let&lt;/code&gt; with a safe call (&lt;code&gt;?&lt;/code&gt;). For objects that don't match the predicate, &lt;code&gt;takeIf&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; isn't invoked.</source>
          <target state="translated">&lt;code&gt;takeIf&lt;/code&gt; と &lt;code&gt;takeUnless&lt;/code&gt; は、スコープ関数と一緒に使用すると特に便利です。与えられた述語に一致するオブジェクトでコードブロックを実行するための &lt;code&gt;let&lt;/code&gt; でそれらをチェーンするのが良いケースです。これを行うには、オブジェクトで &lt;code&gt;takeIf&lt;/code&gt; を呼び出し &lt;code&gt;let&lt;/code&gt; から、安全な呼び出し（ &lt;code&gt;?&lt;/code&gt; ）でletを呼び出します。述語と一致しないオブジェクトの場合、 &lt;code&gt;takeIf&lt;/code&gt; は &lt;code&gt;null&lt;/code&gt; を返し、 &lt;code&gt;let&lt;/code&gt; は呼び出されません。</target>
        </trans-unit>
        <trans-unit id="eaac4c748ff74aef66b4d4bf6a589fa48436bfe5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;takeIf&lt;/code&gt; is like &lt;code&gt;filter&lt;/code&gt; for a single value. It checks whether the receiver meets the predicate, and returns the receiver, if it does or &lt;code&gt;null&lt;/code&gt; if it doesn't. Combined with an elvis-operator and early returns it allows to write constructs like:</source>
          <target state="translated">&lt;code&gt;takeIf&lt;/code&gt; は、単一の値に対する &lt;code&gt;filter&lt;/code&gt; ようなものです。レシーバーが述語に一致するかどうかをチェックし、一致する場合はレシーバーを返し、そうでない場合は &lt;code&gt;null&lt;/code&gt; を返します。elvis-operatorと組み合わせて、初期のリターンで次のような構成を書くことができます。</target>
        </trans-unit>
        <trans-unit id="c33be6cb907b12adc9119250bf308c128256a36d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;takeUnless&lt;/code&gt; is the same as &lt;code&gt;takeIf&lt;/code&gt;, but it takes the inverted predicate. It returns the receiver when it &lt;em&gt;doesn't&lt;/em&gt; meet the predicate and &lt;code&gt;null&lt;/code&gt; otherwise. So one of the examples above could be rewritten with &lt;code&gt;takeUnless&lt;/code&gt; as following:</source>
          <target state="translated">&lt;code&gt;takeUnless&lt;/code&gt; は同じです &lt;code&gt;takeIf&lt;/code&gt; が、それは逆述語を取ります。述語を満たさ&lt;em&gt;ない&lt;/em&gt;場合はレシーバを返し、そうでない場合は &lt;code&gt;null&lt;/code&gt; を返します。したがって、上記の例の1つは、次のように &lt;code&gt;takeUnless&lt;/code&gt; で書き換えることができます。</target>
        </trans-unit>
        <trans-unit id="4bb8daa78c89754426c090574adc1aff035196e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tan(NaN|+Inf|-Inf)&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;tan(NaN|+Inf|-Inf)&lt;/code&gt; は &lt;code&gt;NaN&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e2fbad78534aa0baffd2f5827a30977a3fd22e65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tanh(+Inf)&lt;/code&gt; is &lt;code&gt;1.0&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;tanh(+Inf)&lt;/code&gt; は &lt;code&gt;1.0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9d8705b536f611c5ef6af349994c52792dcf54e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tanh(-1.0)&lt;/code&gt; is &lt;code&gt;-Inf&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;tanh(-1.0)&lt;/code&gt; は &lt;code&gt;-Inf&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9ef017c48a59b4351fe87c214b953f31afbc8515" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tanh(-Inf)&lt;/code&gt; is &lt;code&gt;-1.0&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;tanh(-Inf)&lt;/code&gt; は &lt;code&gt;-1.0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9fb9734bbf8358d4f3a29ac0b6771bd430e1a78d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tanh(1.0)&lt;/code&gt; is &lt;code&gt;+Inf&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;tanh(1.0)&lt;/code&gt; は &lt;code&gt;+Inf&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="66d2f8e0730eaad57483b20b82eba676e897c62f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tanh(NaN)&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;tanh(NaN)&lt;/code&gt; は &lt;code&gt;NaN&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="962278e1ea50881e55b704575c8fdf7a4b75fc53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tanh(x)&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt; when &lt;code&gt;x &amp;gt; 1&lt;/code&gt; or &lt;code&gt;x &amp;lt; -1&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;tanh(x)&lt;/code&gt; &lt;code&gt;x &amp;gt; 1&lt;/code&gt; または &lt;code&gt;x &amp;lt; -1&lt;/code&gt; 場合、tanh（x）は &lt;code&gt;NaN&lt;/code&gt; です</target>
        </trans-unit>
        <trans-unit id="4b56280d6d0412a62dfb9d389803f8aac0959dcd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test&lt;/code&gt; is disabled, and the target's test task is used (e.g. &lt;code&gt;jvmTest&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; が無効になり、ターゲットのテストタスクが使用されます（例： &lt;code&gt;jvmTest&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b19f69b3755690b021fdcb189a2d765113e01501" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;text&lt;/code&gt; - text to append to file.</source>
          <target state="translated">&lt;code&gt;text&lt;/code&gt; -ファイルに追加するテキスト。</target>
        </trans-unit>
        <trans-unit id="584921280571d8eda0a4ddcb9fc92763ef7d199d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;text&lt;/code&gt; - text to write into file.</source>
          <target state="translated">&lt;code&gt;text&lt;/code&gt; -ファイルに書き込むテキスト。</target>
        </trans-unit>
        <trans-unit id="c94e2aaa2c54025cd0dd82fd1be34fc781dd96f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;textView&lt;/code&gt; is an extension property for &lt;code&gt;Activity&lt;/code&gt;, and it has the same type as declared in &lt;code&gt;activity_main.xml&lt;/code&gt; (so it is a &lt;code&gt;TextView&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;textView&lt;/code&gt; 用の拡張プロパティである &lt;code&gt;Activity&lt;/code&gt; とに宣言され、同じタイプを有する &lt;code&gt;activity_main.xml&lt;/code&gt; （それがあるので &lt;code&gt;TextView&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="6ca138f79a2155ce9eb77ce0d3226c80dba4dd46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;third&lt;/code&gt; - Third value.</source>
          <target state="translated">&lt;code&gt;third&lt;/code&gt; -3番目の値。</target>
        </trans-unit>
        <trans-unit id="59fb4725b2a41ff996479dec4539f3be6e290369" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thisOffset&lt;/code&gt; - the start offset in this char sequence of the substring to compare.</source>
          <target state="translated">&lt;code&gt;thisOffset&lt;/code&gt; -比較する部分文字列のこの文字シーケンスの開始オフセット。</target>
        </trans-unit>
        <trans-unit id="7651cc401a2cecd3313fc38f62a13aa291e1292c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thisOffset&lt;/code&gt; - the start offset in this string of the substring to compare.</source>
          <target state="translated">&lt;code&gt;thisOffset&lt;/code&gt; -比較するサブストリングのこのストリング内の開始オフセット。</target>
        </trans-unit>
        <trans-unit id="8681dc6c5b580e3d7caea60a99dbef13f55f9b2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thisRef&lt;/code&gt; &amp;mdash; must be the same or a supertype of the &lt;em&gt;property owner&lt;/em&gt; (for extension properties &amp;mdash; the type being extended);</source>
          <target state="translated">&lt;code&gt;thisRef&lt;/code&gt; &amp;mdash; &lt;em&gt;プロパティ所有者&lt;/em&gt;と同じかスーパータイプでなければなりません（拡張プロパティの場合&amp;mdash;拡張されるタイプ）。</target>
        </trans-unit>
        <trans-unit id="399a3d1a1e924f800c27694c35284415a0d323aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thisRef&lt;/code&gt; &amp;mdash; same as for &lt;code&gt;getValue()&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;thisRef&lt;/code&gt; &amp;mdash; &lt;code&gt;getValue()&lt;/code&gt; の場合と同じです。</target>
        </trans-unit>
        <trans-unit id="aa686d9597c69ad884e20b4066f00def78629496" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thisRef&lt;/code&gt; - the object for which the value is requested (not used).</source>
          <target state="translated">&lt;code&gt;thisRef&lt;/code&gt; -値が要求される（使用されない）オブジェクト。</target>
        </trans-unit>
        <trans-unit id="bb9497e6795b35429a4bd512b9801a1bd9351fcc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thisRef&lt;/code&gt; - the object for which the value is requested.</source>
          <target state="translated">&lt;code&gt;thisRef&lt;/code&gt; -値が要求されるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="abcb6cbc8d903620a1636bf866465fbc73df05c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;throw&lt;/code&gt; is also an expression, and its return type is the special class &lt;code&gt;Nothing&lt;/code&gt;, which does not have any instances. The compiler knows that an expression whose type is &lt;code&gt;Nothing&lt;/code&gt; will never return normally, and will therefore generally accept its use even where a different type would normally be required, such as after the &lt;a href=&quot;null-safety#elvis-operator&quot;&gt;Elvis operator&lt;/a&gt;. If you make a function that always throws, or that starts an infinite loop, you could declare its return type to be &lt;code&gt;Nothing&lt;/code&gt; in order to make the compiler aware of this. One fun example of this is the built-in function &lt;code&gt;TODO&lt;/code&gt;, which you can call in any expression (possibly supplying a string argument), and it raises a &lt;code&gt;NotImplementedError&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;throw&lt;/code&gt; も式であり、その戻り値の型はインスタンスを持たない特別なクラス &lt;code&gt;Nothing&lt;/code&gt; です。コンパイラーは、型が &lt;code&gt;Nothing&lt;/code&gt; の式が正常に返されることはないことを知っているため、&lt;a href=&quot;null-safety#elvis-operator&quot;&gt;Elvis演算子の&lt;/a&gt;後など、通常は別の型が必要な場合でも、その使用を受け入れます。常にスローする関数、または無限ループを開始する関数を作成する場合、コンパイラにこれを認識させるために、戻り値の型を &lt;code&gt;Nothing&lt;/code&gt; として宣言できます。これの楽しい例の1つは、組み込み関数 &lt;code&gt;TODO&lt;/code&gt; です。これは、任意の式で呼び出すことができ（文字列引数を指定する場合があります）、 &lt;code&gt;NotImplementedError&lt;/code&gt; を発生させます。</target>
        </trans-unit>
        <trans-unit id="746512bbbc5796ff33613f9c8ba4763c8e2df1ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;throw&lt;/code&gt; is an expression in Kotlin, so you can use it, for example, as part of an Elvis expression:</source>
          <target state="translated">&lt;code&gt;throw&lt;/code&gt; はKotlinの式なので、たとえばElvis式の一部として使用できます。</target>
        </trans-unit>
        <trans-unit id="82f0b362b52d255e00890f34eb5b6c90731fe6ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;throw&lt;/code&gt;&lt;a href=&quot;exceptions&quot;&gt;throws an exception&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;throw&lt;/code&gt; &lt;a href=&quot;exceptions&quot;&gt;例外をスローします&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="522b75ea192fc01f31126dceb76e4403d6efed86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;throwOnInvalidSequence&lt;/code&gt; - specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char &lt;code&gt;\uFFFD&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;throwOnInvalidSequence&lt;/code&gt; -不正なバイトシーケンスで例外をスローするか、置換文字 &lt;code&gt;\uFFFD&lt;/code&gt; 置き換えるかを指定します。</target>
        </trans-unit>
        <trans-unit id="0786bbec1c422619dd28386c34573a869b9d8118" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;throwOnInvalidSequence&lt;/code&gt; - specifies whether to throw an exception on malformed char sequence or replace.</source>
          <target state="translated">&lt;code&gt;throwOnInvalidSequence&lt;/code&gt; -不正な文字シーケンスで例外をスローするか、置換するかを指定します。</target>
        </trans-unit>
        <trans-unit id="1792b36896bac4d766607f8e3bc1828ec037cfd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toBigDecimal&lt;/code&gt; for &lt;code&gt;Int&lt;/code&gt;, &lt;code&gt;Long&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, and &lt;code&gt;BigInteger&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;toBigDecimal&lt;/code&gt; ため &lt;code&gt;Int&lt;/code&gt; 、 &lt;code&gt;Long&lt;/code&gt; 、 &lt;code&gt;Float&lt;/code&gt; 、 &lt;code&gt;Double&lt;/code&gt; 、および &lt;code&gt;BigInteger&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="fe5553087ec0f88c70336b42de18b8470324718a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toBigInteger&lt;/code&gt; for &lt;code&gt;Int&lt;/code&gt; and &lt;code&gt;Long&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;toBigInteger&lt;/code&gt; のため &lt;code&gt;Int&lt;/code&gt; と &lt;code&gt;Long&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4f7e08f507e6c7df158092b47787a4feb113953d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toBits&lt;/code&gt; and &lt;code&gt;toRawBits&lt;/code&gt; returning &lt;code&gt;Long&lt;/code&gt; for &lt;code&gt;Double&lt;/code&gt; and &lt;code&gt;Int&lt;/code&gt; for &lt;code&gt;Float&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;toBits&lt;/code&gt; と &lt;code&gt;toRawBits&lt;/code&gt; 返す &lt;code&gt;Long&lt;/code&gt; ために &lt;code&gt;Double&lt;/code&gt; と &lt;code&gt;Int&lt;/code&gt; のための &lt;code&gt;Float&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="8cc386b6e87bc3448b7797f22b1c5c03d88f6f6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toBits&lt;/code&gt;, &lt;code&gt;toRawBits&lt;/code&gt;, &lt;code&gt;Double.fromBits&lt;/code&gt; (these are in the &lt;code&gt;kotlin&lt;/code&gt; package).</source>
          <target state="translated">&lt;code&gt;toBits&lt;/code&gt; 、 &lt;code&gt;toRawBits&lt;/code&gt; 、 &lt;code&gt;Double.fromBits&lt;/code&gt; （これらは &lt;code&gt;kotlin&lt;/code&gt; パッケージにあります）。</target>
        </trans-unit>
        <trans-unit id="545b09bd6d4acfec1c751aec080997d656fe9ab9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toFreeze&lt;/code&gt; - an object intended to be frozen.</source>
          <target state="translated">&lt;code&gt;toFreeze&lt;/code&gt; -凍結することを目的としたオブジェクト。</target>
        </trans-unit>
        <trans-unit id="e4c0c56284f7d7d6ee2371715a2c8a8210aa4182" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toIndex&lt;/code&gt; - the end of the range (exclusive), must be in &lt;code&gt;fromIndex..array.size&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;toIndex&lt;/code&gt; -範囲の終わり（これを含まない）、 &lt;code&gt;fromIndex..array.size&lt;/code&gt; 内になければならない</target>
        </trans-unit>
        <trans-unit id="3589ae8a084d12124e3bc10fc6b2b2d3a3971bce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toString()&lt;/code&gt; of the form &lt;code&gt;&quot;User(name=John, age=42)&quot;&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; &lt;code&gt;&quot;User(name=John, age=42)&quot;&lt;/code&gt; 形式のtoString（） ;</target>
        </trans-unit>
        <trans-unit id="51154d9a1d6a4913e008e93d78cebb80aa948662" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toString()&lt;/code&gt; returns a string representation of the object, similar to &lt;code&gt;__str__()&lt;/code&gt; in Python (the default implementation is rather uninteresting, as it only returns the class name and something akin to the object's id)</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; は、Pythonの &lt;code&gt;__str__()&lt;/code&gt; と同様に、オブジェクトの文字列表現を返します（デフォルトの実装は、クラス名とオブジェクトのIDに似たものだけを返すため、かなり興味深いものではありません）。</target>
        </trans-unit>
        <trans-unit id="e8d872f4216b831cc8bc4d7f49dea5204e0416fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toString()&lt;/code&gt;, &lt;code&gt;equals()&lt;/code&gt;, and &lt;code&gt;hashCode()&lt;/code&gt;, which are inherited from &lt;code&gt;Any&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; &lt;code&gt;Any&lt;/code&gt; から継承されたtoString（）、 &lt;code&gt;equals()&lt;/code&gt; 、および &lt;code&gt;hashCode()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="638c9d74080f74c67b71667a2c185ea21e972ba5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transform&lt;/code&gt; -</source>
          <target state="translated">&lt;code&gt;transform&lt;/code&gt; -</target>
        </trans-unit>
        <trans-unit id="15c4b04e951d17c1a2e477f031d2bcf27cf9bdba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transform&lt;/code&gt; - function that takes the index of a character and the character itself and returns the result of the transform applied to the character.</source>
          <target state="translated">&lt;code&gt;transform&lt;/code&gt; -文字のインデックスと文字自体を取り、文字に適用された変換の結果を返す関数。</target>
        </trans-unit>
        <trans-unit id="039aa43b89df1fd9e312edea27e7540bd36beb5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transform&lt;/code&gt; - function that takes the index of an element and the element itself and returns the result of the transform applied to the element.</source>
          <target state="translated">&lt;code&gt;transform&lt;/code&gt; -要素のインデックスと要素自体を取り、要素に適用された変換の結果を返す関数。</target>
        </trans-unit>
        <trans-unit id="104dcd522cc3ee9799b1640335aabcab9d66b3b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this callable is &lt;code&gt;abstract&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; この呼び出し可能オブジェクトが &lt;code&gt;abstract&lt;/code&gt; ある場合はtrue。</target>
        </trans-unit>
        <trans-unit id="bef381db8bd06ce91772cba2de44905179068baf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this callable is &lt;code&gt;final&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; この呼び出し可能オブジェクトが &lt;code&gt;final&lt;/code&gt; の場合はtrueです。</target>
        </trans-unit>
        <trans-unit id="48e9436811c46e7ef269874f8b8c972bf249af4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this callable is &lt;code&gt;open&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; この呼び出し可能オブジェクトが &lt;code&gt;open&lt;/code&gt; いる場合はtrue。</target>
        </trans-unit>
        <trans-unit id="8e7040532b788db7e1881a404c2f6f57d9ec2ec6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this class is &lt;code&gt;abstract&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; このクラスが &lt;code&gt;abstract&lt;/code&gt; 場合はtrue。</target>
        </trans-unit>
        <trans-unit id="29cbfd008c683c372ccea25514e60950995208ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this class is &lt;code&gt;final&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; このクラスが &lt;code&gt;final&lt;/code&gt; の場合はtrueです。</target>
        </trans-unit>
        <trans-unit id="a0682ac2ca7d06f0fcf26167395972d601e74dc8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this class is &lt;code&gt;open&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; このクラスが &lt;code&gt;open&lt;/code&gt; いる場合はtrue。</target>
        </trans-unit>
        <trans-unit id="56d6f885f8db1cf343eb33f83893311ce3af6a58" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this class is &lt;code&gt;sealed&lt;/code&gt;. See the &lt;a href=&quot;../../../../../../docs/reference/sealed-classes&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; このクラスが &lt;code&gt;sealed&lt;/code&gt; いる場合はtrue。詳細については、&lt;a href=&quot;../../../../../../docs/reference/sealed-classes&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="6b071fdced7370b9c523bba505946c8904ca5851" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this class is a companion object. See the &lt;a href=&quot;../../../../../../docs/reference/object-declarations#companion-objects&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; このクラスがコンパニオンオブジェクトの場合はtrue。詳細については、&lt;a href=&quot;../../../../../../docs/reference/object-declarations#companion-objects&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="845c0cfe5e08f8ccdc3394fd10bcfbfd84a7e50e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this class is a data class. See the &lt;a href=&quot;../../../../../../docs/reference/data-classes&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; このクラスがデータクラスの場合はtrue。詳細については、&lt;a href=&quot;../../../../../../docs/reference/data-classes&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="6173885a56cf421523749e79e1c37be3556ce069" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this class is an inner class. See the &lt;a href=&quot;../../../../../../docs/reference/nested-classes#inner-classes&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; このクラスが内部クラスの場合はtrue。詳細については、&lt;a href=&quot;../../../../../../docs/reference/nested-classes#inner-classes&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="3da89216220cb9b19287d95d61d7699c69944807" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this function is &lt;code&gt;external&lt;/code&gt;. See the &lt;a href=&quot;../../../../../../docs/reference/java-interop#using-jni-with-kotlin&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; この関数が &lt;code&gt;external&lt;/code&gt; 場合はtrue。詳細については、&lt;a href=&quot;../../../../../../docs/reference/java-interop#using-jni-with-kotlin&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="92086a8ecd17c2c4c8bffc5df741e48dda9e5af9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this function is &lt;code&gt;infix&lt;/code&gt;. See the &lt;a href=&quot;../../../../../../docs/reference/functions#infix-notation&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; この関数が &lt;code&gt;infix&lt;/code&gt; の場合はtrue。詳細については、&lt;a href=&quot;../../../../../../docs/reference/functions#infix-notation&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="107d2be5f1d44fd574f06da199faec12b7a849ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this function is &lt;code&gt;inline&lt;/code&gt;. See the &lt;a href=&quot;../../../../../../docs/reference/inline-functions&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; この関数が &lt;code&gt;inline&lt;/code&gt; 場合はtrue。詳細については、&lt;a href=&quot;../../../../../../docs/reference/inline-functions&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="dffdc0c4a5c1dd507af4c9d86696578b69989817" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this function is &lt;code&gt;operator&lt;/code&gt;. See the &lt;a href=&quot;../../../../../../docs/reference/operator-overloading&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; この関数が &lt;code&gt;operator&lt;/code&gt; の場合はtrue。詳細については、&lt;a href=&quot;../../../../../../docs/reference/operator-overloading&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="1d7d894c3aad9ff0f0e72c2696fe7bfe07f5aef3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this is a suspending function.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; これが一時停止機能である場合はtrue。</target>
        </trans-unit>
        <trans-unit id="ef20cb76da715ecda07257a877b8973bf96552f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this parameter is &lt;code&gt;vararg&lt;/code&gt;. See the &lt;a href=&quot;../../../../../../docs/reference/functions#variable-number-of-arguments-varargs&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; このパラメータがある場合は &lt;code&gt;vararg&lt;/code&gt; 。詳細については、&lt;a href=&quot;../../../../../../docs/reference/functions#variable-number-of-arguments-varargs&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="b86debaee171b6be12d0c5af394bcd5ef11cf486" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this parameter is optional and can be omitted when making a call via &lt;a href=&quot;../-k-callable/call-by#kotlin.reflect.KCallable%24callBy%28kotlin.collections.Map%28%28kotlin.reflect.KParameter%2C+kotlin.Any%29%29%29&quot;&gt;KCallable.callBy&lt;/a&gt;, or &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; このパラメーターがオプションであり、&lt;a href=&quot;../-k-callable/call-by#kotlin.reflect.KCallable%24callBy%28kotlin.collections.Map%28%28kotlin.reflect.KParameter%2C+kotlin.Any%29%29%29&quot;&gt;KCallable.callBy&lt;/a&gt;を介して呼び出しを行うときに省略できる場合はtrue、そうでない場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="baf7d9d384a67ac6e59b989ce1119cdbbec9d4af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this property is &lt;code&gt;const&lt;/code&gt;. See the &lt;a href=&quot;../../../../../../docs/reference/properties#compile-time-constants&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; このプロパティが &lt;code&gt;const&lt;/code&gt; の場合はtrue。詳細については、&lt;a href=&quot;../../../../../../docs/reference/properties#compile-time-constants&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="9f86909c75ad3bc1f327b31e716a0fc67647217c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this property is &lt;code&gt;lateinit&lt;/code&gt;. See the &lt;a href=&quot;../../../../../../docs/reference/properties#late-initialized-properties&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; このプロパティがされている場合 &lt;code&gt;lateinit&lt;/code&gt; 。詳細については、&lt;a href=&quot;../../../../../../docs/reference/properties#late-initialized-properties&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="a2f2c3c702782f18fca73e673181765083a26fad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this type parameter is &lt;code&gt;reified&lt;/code&gt;. See the &lt;a href=&quot;../../../../../../docs/reference/inline-functions#reified-type-parameters&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; この型パラメーターが &lt;code&gt;reified&lt;/code&gt; いる場合はtrue。詳細については、&lt;a href=&quot;../../../../../../docs/reference/inline-functions#reified-type-parameters&quot;&gt;Kotlin言語のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="43312f027e03b0d0813f6bd37363cc691544b17a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this type was marked nullable in the source code.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; この型がソースコードでnull可能とマークされている場合はtrue。</target>
        </trans-unit>
        <trans-unit id="37f317994df4c5094e8b2eff3348d68fdc66f93d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2d588010212f4bda854e420b0e2fe0c3bfcf2c29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; specifies the 'true' value of the &lt;a href=&quot;basic-types#booleans&quot;&gt;Boolean type&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; は、&lt;a href=&quot;basic-types#booleans&quot;&gt;ブール型の&lt;/a&gt;「true」値を指定します</target>
        </trans-unit>
        <trans-unit id="def3b82ed42051cd1d682dd5d63d63bd8b451966" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; to ignore character case when comparing characters. By default &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 文字を比較するときに大文字と小文字を区別しない場合はtrue。デフォルトでは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c263006ed892c84d96985df25d92c169c705aa72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;truncate(x)&lt;/code&gt; is &lt;code&gt;x&lt;/code&gt; where &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt; or &lt;code&gt;+Inf&lt;/code&gt; or &lt;code&gt;-Inf&lt;/code&gt; or already a mathematical integer.</source>
          <target state="translated">&lt;code&gt;truncate(x)&lt;/code&gt; は &lt;code&gt;x&lt;/code&gt; です。ここで、 &lt;code&gt;x&lt;/code&gt; は &lt;code&gt;NaN&lt;/code&gt; 、 &lt;code&gt;+Inf&lt;/code&gt; 、 &lt;code&gt;-Inf&lt;/code&gt; 、またはすでに数学的な整数です。</target>
        </trans-unit>
        <trans-unit id="b005f49eb850051951850520142309885972d4b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;try&lt;/code&gt;&lt;a href=&quot;exceptions&quot;&gt;begins an exception handling block&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; &lt;a href=&quot;exceptions&quot;&gt;例外処理ブロックを開始します&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bc524b0c1455c19d99ad2f0f73cdfe3b44523b81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typealias&lt;/code&gt; declares a &lt;a href=&quot;type-aliases&quot;&gt;type alias&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;typealias&lt;/code&gt; は&lt;a href=&quot;type-aliases&quot;&gt;型エイリアスを&lt;/a&gt;宣言します</target>
        </trans-unit>
        <trans-unit id="a9f304545f689ccc427483b7e430c59224af092b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typedef&lt;/code&gt; are represented as &lt;code&gt;typealias&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;typedef&lt;/code&gt; は &lt;code&gt;typealias&lt;/code&gt; として表されます。</target>
        </trans-unit>
        <trans-unit id="82a10ed8d79d6bb179c17c581bca9efe81e14350" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ulp&lt;/code&gt; extension property;</source>
          <target state="translated">&lt;code&gt;ulp&lt;/code&gt; 拡張プロパティ。</target>
        </trans-unit>
        <trans-unit id="88894535390d48153d0df5237c35c261b817eee9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;until&lt;/code&gt; - must be positive.</source>
          <target state="translated">&lt;code&gt;until&lt;/code&gt; -正でなければなりません。</target>
        </trans-unit>
        <trans-unit id="70bdbcf3b6f6b264e85bd3eda2c1b89301be47b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use&lt;/code&gt; can be invoked on anything that implements the &lt;code&gt;Closeable&lt;/code&gt; interface, and when the &lt;code&gt;use&lt;/code&gt; block ends (whether normally or due to an exception), &lt;code&gt;close()&lt;/code&gt; will be called on the object upon which you invoked &lt;code&gt;use&lt;/code&gt;. If an exception is raised within the block or by &lt;code&gt;close()&lt;/code&gt;, it will bubble out of &lt;code&gt;use&lt;/code&gt;. If both the block and &lt;code&gt;close()&lt;/code&gt; raise, it's the exception from the block that will bubble out.</source>
          <target state="translated">&lt;code&gt;use&lt;/code&gt; 何で呼び出すことができ、その実装 &lt;code&gt;Closeable&lt;/code&gt; インターフェース、および時に &lt;code&gt;use&lt;/code&gt; （通常または例外のためにかどうか）ブロック端部は、 &lt;code&gt;close()&lt;/code&gt; あなたが呼び出されたときにオブジェクトで呼び出されます &lt;code&gt;use&lt;/code&gt; 。ブロック内で、または &lt;code&gt;close()&lt;/code&gt; によって例外が発生した場合、それは &lt;code&gt;use&lt;/code&gt; なくなります。ブロックと &lt;code&gt;close()&lt;/code&gt; の両方が発生した場合、それはブロックからの例外であり、バブルアウトします。</target>
        </trans-unit>
        <trans-unit id="3a7d080477ee6fa0bcb122170eea31fcee38caa5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ushr(bits)&lt;/code&gt; &amp;ndash; unsigned shift right (Java's &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;ushr(bits)&lt;/code&gt; &amp;ndash;符号なし右シフト（Javaの &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="1f2767a8e31b1f6772a122aac9c837c1e6c8702d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;val String.cstr: CValuesRef&amp;lt;ByteVar&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;val String.cstr: CValuesRef&amp;lt;ByteVar&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4087cad031bb61396a802e4efc05908ac3b667f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;val&lt;/code&gt; backing field reassignment in getter</source>
          <target state="translated">&lt;code&gt;val&lt;/code&gt; ゲッターでのvalバッキングフィールドの再割り当て</target>
        </trans-unit>
        <trans-unit id="3c47a16d0f9ef80aac46c5f31c7b824ae04dd75f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;val&lt;/code&gt; declares a read-only &lt;a href=&quot;properties&quot;&gt;property&lt;/a&gt; or &lt;a href=&quot;basic-syntax#defining-variables&quot;&gt;local variable&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;val&lt;/code&gt; は読み取り専用&lt;a href=&quot;properties&quot;&gt;プロパティ&lt;/a&gt;または&lt;a href=&quot;basic-syntax#defining-variables&quot;&gt;ローカル変数を&lt;/a&gt;宣言します</target>
        </trans-unit>
        <trans-unit id="02ec4497c1d4592ea4212ad5162dc01d2e4f19cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - The value of captured group.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -捕捉グループの値。</target>
        </trans-unit>
        <trans-unit id="23d64a7f06434d7ad3888dfa5b59c1bd1b67af84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - must be a &lt;a href=&quot;from-value#kotlinx.cinterop.StableRef.Companion%24fromValue%28kotlinx.cinterop.CPointer%28%28kotlinx.cinterop.CPointed%29%29%29%2Fvalue&quot;&gt;value&lt;/a&gt; of some &lt;a href=&quot;index&quot;&gt;StableRef&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; - ある&lt;a href=&quot;index&quot;&gt;StableRefの&lt;/a&gt;&lt;a href=&quot;from-value#kotlinx.cinterop.StableRef.Companion%24fromValue%28kotlinx.cinterop.CPointer%28%28kotlinx.cinterop.CPointed%29%29%29%2Fvalue&quot;&gt;値&lt;/a&gt;でなければならない</target>
        </trans-unit>
        <trans-unit id="d9770089e6b57a87a0f774b23d5a9ee78923e8ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - necessary annotation retention (RUNTIME, BINARY or SOURCE)</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -必要なアノテーションの保持（RUNTIME、BINARYまたはSOURCE）</target>
        </trans-unit>
        <trans-unit id="4e21c9b75cca874038882f9fe38fd5b9854e4620" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the new value to be assigned to this property.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -このプロパティに割り当てられる新しい値。</target>
        </trans-unit>
        <trans-unit id="48bfefd5893711d24831fcb82c147c77d10a70a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the qualifier to add to the declarations in the generated code. It must be a sequence of valid JavaScript identifiers separated by the &lt;code&gt;.&lt;/code&gt; character. Examples of valid qualifiers are: &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;bar.Baz&lt;/code&gt;, &lt;code&gt;_.$0.f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -生成されたコードの宣言に追加する修飾子。これは、で区切られた一連の有効なJavaScript識別子である必要があります &lt;code&gt;.&lt;/code&gt; キャラクター。有効な修飾子の例は、 &lt;code&gt;foo&lt;/code&gt; 、 &lt;code&gt;bar.Baz&lt;/code&gt; 、 &lt;code&gt;_.$0.f&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5ab46dca581ecbc08183d3f197bf6ab155c81e84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the underlying value.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -基本となる値。</target>
        </trans-unit>
        <trans-unit id="c735a93eb7b23f076be050f35df61961783a2985" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - the value to set.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; -設定する値。</target>
        </trans-unit>
        <trans-unit id="e03c7180b6c060e655d4e614262a11a520f50e0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;var ConsoleOutput = function (_, Kotlin) { ... }&lt;/code&gt;: this is the variable named after your Kotlin module. Its value is the result of an anonymous function call. The rest of the code is the function body.</source>
          <target state="translated">&lt;code&gt;var ConsoleOutput = function (_, Kotlin) { ... }&lt;/code&gt; ：これは、Kotlinモジュールにちなんで名付けられた変数です。その値は、無名関数呼び出しの結果です。コードの残りの部分は関数本体です。</target>
        </trans-unit>
        <trans-unit id="b9592e0a8ea83521987a70d32de67303547746c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;var println = Kotlin.kotlin.io.println_s8jyv4$;&lt;/code&gt;: a variable that refers to the &lt;code&gt;kotlin.io.println&lt;/code&gt; function from the passed in parameter &lt;code&gt;Kotlin&lt;/code&gt;. This is a way to import the standard &lt;code&gt;println&lt;/code&gt; function defined in &lt;code&gt;kotlin.js&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;var println = Kotlin.kotlin.io.println_s8jyv4$;&lt;/code&gt; ：渡されたパラメーター &lt;code&gt;Kotlin&lt;/code&gt; からの &lt;code&gt;kotlin.io.println&lt;/code&gt; 関数を参照する変数。これは、 &lt;code&gt;kotlin.js&lt;/code&gt; で定義されている標準の &lt;code&gt;println&lt;/code&gt; 関数をインポートする方法です。</target>
        </trans-unit>
        <trans-unit id="1bf2c9d03fd4b30bf37e4d093f10b03acda902f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;var&lt;/code&gt; declares a mutable &lt;a href=&quot;properties&quot;&gt;property&lt;/a&gt; or &lt;a href=&quot;basic-syntax#defining-variables&quot;&gt;local variable&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; は可変&lt;a href=&quot;properties&quot;&gt;プロパティ&lt;/a&gt;または&lt;a href=&quot;basic-syntax#defining-variables&quot;&gt;ローカル変数を&lt;/a&gt;宣言します</target>
        </trans-unit>
        <trans-unit id="5957c65f7fc9d13bc008ba085ac98603b4b442ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vararg&lt;/code&gt; allows &lt;a href=&quot;functions#variable-number-of-arguments-varargs&quot;&gt;passing a variable number of arguments for a parameter&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;vararg&lt;/code&gt; を使用&lt;a href=&quot;functions#variable-number-of-arguments-varargs&quot;&gt;すると、パラメーターに可変数の引数を渡す&lt;/a&gt;ことができます</target>
        </trans-unit>
        <trans-unit id="ec11f8c999f8da0fd10813eac21c62770702b3c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;verbose&lt;/code&gt;: Enable verbose output.</source>
          <target state="translated">&lt;code&gt;verbose&lt;/code&gt; ：詳細出力を有効にします。</target>
        </trans-unit>
        <trans-unit id="92c8a0d131c26de196669d8b5862b5f1f94f1c4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;version&lt;/code&gt; - the version in the following formats: &lt;code&gt;&amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;.&amp;lt;patch&amp;gt;&lt;/code&gt;, where major, minor and patch are non-negative integer numbers without leading zeros.</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; -次の形式のバージョン： &lt;code&gt;&amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;.&amp;lt;patch&amp;gt;&lt;/code&gt; 。ここで、major、minor、およびpatchは、先行ゼロのない非負の整数です。</target>
        </trans-unit>
        <trans-unit id="3fb87c17236c5dc7ef81b226bbf098fd0f7c1763" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;void*&lt;/code&gt; is mapped to &lt;code&gt;COpaquePointer&lt;/code&gt; &amp;ndash; the special pointer type which is the supertype for any other pointer type. So if the C function takes &lt;code&gt;void*&lt;/code&gt;, then the Kotlin binding accepts any &lt;code&gt;CPointer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;void*&lt;/code&gt; は &lt;code&gt;COpaquePointer&lt;/code&gt; (他のポインター型のスーパータイプである特別なポインター型）にマップされます。したがって、C関数が &lt;code&gt;void*&lt;/code&gt; 取る場合、Kotlinバインディングは任意の &lt;code&gt;CPointer&lt;/code&gt; を受け入れます。</target>
        </trans-unit>
        <trans-unit id="9d41555163d1ffa6cdb38c81185097c14023973e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wasm32&lt;/code&gt; for WebAssembly.</source>
          <target state="translated">&lt;code&gt;wasm32&lt;/code&gt; for WebAssembly。</target>
        </trans-unit>
        <trans-unit id="5500d7301e4bdb0a81de7eceee2cbdb55f314bf4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;when&lt;/code&gt; begins a &lt;a href=&quot;control-flow#when-expression&quot;&gt;when expression&lt;/a&gt; (executes one of the given branches)</source>
          <target state="translated">&lt;code&gt;when&lt;/code&gt; は&lt;a href=&quot;control-flow#when-expression&quot;&gt;when式を&lt;/a&gt;開始します（指定されたブランチの1つを実行します）</target>
        </trans-unit>
        <trans-unit id="24a7208dcca095d25e928eb5f0443e189a009f61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;where&lt;/code&gt; - a frozen object that was attempted to mutate</source>
          <target state="translated">&lt;code&gt;where&lt;/code&gt; -変異させることが試みられた、凍結対象</target>
        </trans-unit>
        <trans-unit id="cae7dd02ba7a7653467a24b815acb806ba2d1eba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;where&lt;/code&gt; specifies &lt;a href=&quot;generics#upper-bounds&quot;&gt;constraints for a generic type parameter&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;where&lt;/code&gt; &lt;a href=&quot;generics#upper-bounds&quot;&gt;で、ジェネリック型パラメーターの制約を&lt;/a&gt;指定します</target>
        </trans-unit>
        <trans-unit id="e968b996ca3fbf3427be432a96c253fea7a1f13e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;while&lt;/code&gt; begins a &lt;a href=&quot;control-flow#while-loops&quot;&gt;while loop&lt;/a&gt; (loop with precondition)</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; は、&lt;a href=&quot;control-flow#while-loops&quot;&gt;whileループ&lt;/a&gt;（前提条件付きループ）を開始します</target>
        </trans-unit>
        <trans-unit id="daff7d694f02b978f83b66b6dcc3d7f9927bd522" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;windowed()&lt;/code&gt; provides more flexibility with optional parameters:</source>
          <target state="translated">&lt;code&gt;windowed()&lt;/code&gt; は、オプションのパラメーターを使用して柔軟性を高めます。</target>
        </trans-unit>
        <trans-unit id="efc76a751bae9b1ccb9cc3574d3350ef9f6c1bef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;withSign&lt;/code&gt; extension function;</source>
          <target state="translated">&lt;code&gt;withSign&lt;/code&gt; 拡張関数;</target>
        </trans-unit>
        <trans-unit id="c7c34b39d0ccfed20a3765c04059a5d01125f3b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x ?: y&lt;/code&gt; evaluates &lt;code&gt;x&lt;/code&gt;, which becomes the result of the expression unless it's null, in which case you'll get &lt;code&gt;y&lt;/code&gt; instead (which ought to be of a non-nullable type). This is also known as the &quot;Elvis operator&quot;. You can even use it to perform an early return in case of null:</source>
          <target state="translated">&lt;code&gt;x ?: y&lt;/code&gt; は &lt;code&gt;x&lt;/code&gt; を評価します。これは、nullでない限り式の結果になります。その場合、代わりに &lt;code&gt;y&lt;/code&gt; が返されます（null不可の型である必要があります）。これは「Elvisオペレーター」とも呼ばれます。nullの場合、それを使用して早期復帰を実行することもできます。</target>
        </trans-unit>
        <trans-unit id="b3374ff1d1757994cb4187ba4a59ab8ec4e5c4cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x.nextTowards(y)&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt; if either &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; are &lt;code&gt;NaN&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x.nextTowards(y)&lt;/code&gt; であり、 &lt;code&gt;NaN&lt;/code&gt; のいずれかであれば &lt;code&gt;x&lt;/code&gt; または &lt;code&gt;y&lt;/code&gt; ある &lt;code&gt;NaN&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c214be437756d38ba63986462c6054d0ad4cccf7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x.roundToInt() == Int.MAX_VALUE&lt;/code&gt; when &lt;code&gt;x &amp;gt; Int.MAX_VALUE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x.roundToInt() == Int.MAX_VALUE&lt;/code&gt; &lt;code&gt;x &amp;gt; Int.MAX_VALUE&lt;/code&gt; 場合）</target>
        </trans-unit>
        <trans-unit id="d26413dcf8a274e128e35bc2646602784d83da34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x.roundToInt() == Int.MIN_VALUE&lt;/code&gt; when &lt;code&gt;x &amp;lt; Int.MIN_VALUE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x.roundToInt() == Int.MIN_VALUE&lt;/code&gt; &lt;code&gt;x &amp;lt; Int.MIN_VALUE&lt;/code&gt; 場合）</target>
        </trans-unit>
        <trans-unit id="d0c9eff6b586527c272cc1c787d42c0901156e84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x.roundToLong() == Long.MAX_VALUE&lt;/code&gt; when &lt;code&gt;x &amp;gt; Long.MAX_VALUE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x.roundToLong() == Long.MAX_VALUE&lt;/code&gt; とき &lt;code&gt;x &amp;gt; Long.MAX_VALUE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="612d7a72ebefaecf14c31091c444a2ebf1856013" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x.roundToLong() == Long.MIN_VALUE&lt;/code&gt; when &lt;code&gt;x &amp;lt; Long.MIN_VALUE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x.roundToLong() == Long.MIN_VALUE&lt;/code&gt; とき &lt;code&gt;x &amp;lt; Long.MIN_VALUE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="45980bc8190af90667d2abf96d483fbddc7515a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x.ulp&lt;/code&gt; is &lt;code&gt;+Inf&lt;/code&gt; when &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;+Inf&lt;/code&gt; or &lt;code&gt;-Inf&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x.ulp&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; が &lt;code&gt;+Inf&lt;/code&gt; または &lt;code&gt;-Inf&lt;/code&gt; の場合、x.ulpは &lt;code&gt;+Inf&lt;/code&gt; です</target>
        </trans-unit>
        <trans-unit id="f2d29bf16c333939cb9d3d3120668f3f53a8e7da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x?.y&lt;/code&gt; evaluates &lt;code&gt;x&lt;/code&gt;, and if it is not null, it evaluates &lt;code&gt;x.y&lt;/code&gt; (without reevaluating &lt;code&gt;x&lt;/code&gt;), whose result becomes the result of the expression - otherwise, you get null. This also works for functions, and it can be chained - for example, &lt;code&gt;x?.y()?.z?.w()&lt;/code&gt; will return null if any of &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;x.y()&lt;/code&gt;, or &lt;code&gt;x.y().z&lt;/code&gt; produce null; otherwise, it will return the result of &lt;code&gt;x.y().z.w()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x?.y&lt;/code&gt; は &lt;code&gt;x&lt;/code&gt; を評価し、nullでない場合は &lt;code&gt;x.y&lt;/code&gt; を評価し（ &lt;code&gt;x&lt;/code&gt; を再評価せず）、その結果は式の結果になります。それ以外の場合はnullになります。これは関数でも機能し、連鎖させることができます &lt;code&gt;x?.y()?.z?.w()&lt;/code&gt; たとえば、x？.y（）?. z？.w（）は、 &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;x.y()&lt;/code&gt; 、または &lt;code&gt;x.y().z&lt;/code&gt; いずれかがnullを生成した場合、nullを返します。それ以外の場合は、 &lt;code&gt;x.y().z.w()&lt;/code&gt; の結果を返します。</target>
        </trans-unit>
        <trans-unit id="4e69551c5c0c395c32af26818569bd49f6e7cd46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;xor(bits)&lt;/code&gt; &amp;ndash; bitwise xor</source>
          <target state="translated">&lt;code&gt;xor(bits)&lt;/code&gt; &amp;ndash;ビットごとのxor</target>
        </trans-unit>
        <trans-unit id="20792616e164307f0f6f1aaa93499e52a3e00558" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;xs union ys as Set&amp;lt;*&amp;gt;&lt;/code&gt; and &lt;code&gt;xs union (ys as Set&amp;lt;*&amp;gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;xs union ys as Set&amp;lt;*&amp;gt;&lt;/code&gt; および &lt;code&gt;xs union (ys as Set&amp;lt;*&amp;gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="09ebaf312aaa17dea995318ed31531f08cae6984" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ definedExternally }&lt;/code&gt; (for functions and property getters/setters).</source>
          <target state="translated">&lt;code&gt;{ definedExternally }&lt;/code&gt; (for functions and property getters/setters).</target>
        </trans-unit>
        <trans-unit id="1d141b7e10f3472c35c93ba55debb58d409df47f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{module}.js&lt;/code&gt;. The actual code from the application. All files are compiled into a single JavaScript file which has the same name as the module.</source>
          <target state="translated">&lt;code&gt;{module}.js&lt;/code&gt;. The actual code from the application. All files are compiled into a single JavaScript file which has the same name as the module.</target>
        </trans-unit>
        <trans-unit id="15d6193c8855ed9061fa77c50c2fd518055b41cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;||&lt;/code&gt; &amp;ndash; lazy disjunction</source>
          <target state="translated">&lt;code&gt;||&lt;/code&gt; &amp;ndash; lazy disjunction</target>
        </trans-unit>
        <trans-unit id="b7ffdc158a19f2718388e88f46a88dc27dc2f6d8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(optionally)&lt;/em&gt; the function &lt;a href=&quot;calls-in-place#kotlin.contracts.ContractBuilder%24callsInPlace%28kotlin.Function%28%28kotlin.contracts.ContractBuilder.callsInPlace.R%29%29%2C+kotlin.contracts.InvocationKind%29%2Flambda&quot;&gt;lambda&lt;/a&gt; is invoked the amount of times specified by the &lt;a href=&quot;calls-in-place#kotlin.contracts.ContractBuilder%24callsInPlace%28kotlin.Function%28%28kotlin.contracts.ContractBuilder.callsInPlace.R%29%29%2C+kotlin.contracts.InvocationKind%29%2Fkind&quot;&gt;kind&lt;/a&gt; parameter, see the &lt;a href=&quot;../-invocation-kind/index&quot;&gt;InvocationKind&lt;/a&gt; enum for possible values.</source>
          <target state="translated">&lt;em&gt;(optionally)&lt;/em&gt; the function &lt;a href=&quot;calls-in-place#kotlin.contracts.ContractBuilder%24callsInPlace%28kotlin.Function%28%28kotlin.contracts.ContractBuilder.callsInPlace.R%29%29%2C+kotlin.contracts.InvocationKind%29%2Flambda&quot;&gt;lambda&lt;/a&gt; is invoked the amount of times specified by the &lt;a href=&quot;calls-in-place#kotlin.contracts.ContractBuilder%24callsInPlace%28kotlin.Function%28%28kotlin.contracts.ContractBuilder.callsInPlace.R%29%29%2C+kotlin.contracts.InvocationKind%29%2Fkind&quot;&gt;kind&lt;/a&gt; parameter, see the &lt;a href=&quot;../-invocation-kind/index&quot;&gt;InvocationKind&lt;/a&gt; enum for possible values.</target>
        </trans-unit>
        <trans-unit id="8a41f3eb2dcb4f57ce41fe5fc3912a6b553f952d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;-n&lt;/code&gt; is optional, this flag is applied by default&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;code&gt;-n&lt;/code&gt; is optional, this flag is applied by default&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="45fabde5a853ee0c0f6ca31ceb7a1d324af44bec" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Association&lt;/em&gt; transformations allow building maps from the collection elements and certain values associated with them. In different association types, the elements can be either keys or values in the association map.</source>
          <target state="translated">&lt;em&gt;協会の&lt;/em&gt;変換はコレクション要素とそれらに関連付けられている特定の値からマップを構築することができます。さまざまな関連付けタイプでは、要素は関連付けマップのキーまたは値のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="d220051876daa0991641918f62919bf172ade4cf" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Below, we use OV for &quot;Older Version&quot;, and NV for &quot;Newer Version&quot;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;以下では、「古いバージョン」にはOV、「新しいバージョン」にはNVを使用します。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a7a04ea9849d8f6a36fd6cd2292526633888c4ff" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Component functions&lt;/em&gt; generated for data classes enable their use in &lt;a href=&quot;multi-declarations&quot;&gt;destructuring declarations&lt;/a&gt;:</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;データクラス用に生成された&lt;em&gt;コンポーネント関数&lt;/em&gt;は、&lt;a href=&quot;multi-declarations&quot;&gt;宣言の分解に&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="1c418bb5666878bb14d6e3e8fe48a36ecd607961" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Contracts&lt;/em&gt; allow a function to explicitly describe its behavior in a way which is understood by the compiler. Currently, two wide classes of cases are supported:</source>
          <target state="translated">&lt;em&gt;コントラクトを&lt;/em&gt;使用すると、関数はその動作をコンパイラーが理解できる方法で明示的に記述することができます。現在、2つの幅広いケースのクラスがサポートされています。</target>
        </trans-unit>
        <trans-unit id="a7bd76c53b54562067dbff0de767e7afb868c604" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Custom&lt;/em&gt; orders let you sort instances of any type in a way you like. Particularly, you can define an order for non-comparable objects or define an order other than natural for a comparable type. To define a custom order for a type, create a &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-comparator/index&quot;&gt;&lt;code&gt;Comparator&lt;/code&gt;&lt;/a&gt; for it. &lt;code&gt;Comparator&lt;/code&gt; contains the &lt;code&gt;compare()&lt;/code&gt; function: it takes two instances of a class and returns the integer result of the comparison between them. The result is interpreted in the same way as the result of a &lt;code&gt;compareTo()&lt;/code&gt; as is described above.</source>
          <target state="translated">&lt;em&gt;カスタム&lt;/em&gt;オーダーを使用すると、任意のタイプのインスタンスを好きな方法でソートできます。特に、比較不可能なオブジェクトの順序を定義したり、比較可能なタイプの自然ではない順序を定義したりできます。タイプのカスタム順序を定義するには、そのタイプの&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-comparator/index&quot;&gt; &lt;code&gt;Comparator&lt;/code&gt; &lt;/a&gt;を作成します。 &lt;code&gt;Comparator&lt;/code&gt; には、 &lt;code&gt;compare()&lt;/code&gt; 関数が含まれています。これは、クラスの2つのインスタンスを取り、それらの間の比較の整数結果を返します。結果は、上記の &lt;code&gt;compareTo()&lt;/code&gt; の結果と同じ方法で解釈されます。</target>
        </trans-unit>
        <trans-unit id="b13944a5a494260519e59ca05924a52b544b7ab7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;EduTools supports HTML and Markdown, so you can start editing with your preferred format, or even a combination of both.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;EduToolsはHTMLとMarkdownをサポートしているので、好みのフォーマットまたは両方の組み合わせで編集を開始できます。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="659a4e8346b2622d43a76804d7f1bd757f51adca" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Example:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Example:&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9423d073f2288278e51d4da68026e17ed0f5c6b1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Exercise: try removing the &lt;code&gt;sleep()&lt;/code&gt; from the program above and see the result.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;演習：上記のプログラムから &lt;code&gt;sleep()&lt;/code&gt; を削除してみて、結果を確認してください。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="19c51704cec4376067c7ccceefc40db5f7d4eee7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;If you have a course archive shared with you by your teacher or co-worker, use the &lt;strong&gt;Import Course&lt;/strong&gt; icon to open it. You can also log in to &lt;a href=&quot;https://stepik.org/&quot;&gt;Stepik&lt;/a&gt; with the corresponding link to see all the courses available to you on this MOOC platform.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;コースアーカイブを教師または同僚が共有している場合は、コースの&lt;strong&gt;インポート&lt;/strong&gt;アイコンを使用して開きます。対応するリンクを使用して&lt;a href=&quot;https://stepik.org/&quot;&gt;Stepikに&lt;/a&gt;ログインし、このMOOCプラットフォームで利用できるすべてのコースを表示することもできます。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="87b22b5d907267adae749869319e55244abf713c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;If you need additional files for the task, just add them and decide whether you want to make them visible to learners or not with the &lt;strong&gt;Course Creator -&amp;gt; Make Visible to / Hide from Student&lt;/strong&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;タスクに追加のファイルが必要な場合は、それらを追加し、&lt;strong&gt;コース作成者-&amp;gt;生徒に表示/非表示&lt;/strong&gt;で、それらを学習者に表示するかどうかを決定します。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3fa9e7b7c13f20dc7dbb1017d8ccafb64b41c1d6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;If you need to enable the course creation functionality later, you can go to &lt;strong&gt;Help Menu -&amp;gt; Enable Course Creator Features&lt;/strong&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;後でコース作成機能を有効にする必要がある場合は、&lt;strong&gt;[ヘルプ]メニュー-&amp;gt; [コース作成者の機能を有効にする]を選択します&lt;/strong&gt;。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="049b29b7fec5dec2dc83b37d60094f5eb72988a1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Keeping the Language Modern&lt;/em&gt; and &lt;em&gt;Comfortable Updates&lt;/em&gt; are among the fundamental principles in Kotlin Language Design. The former says that constructions which obstruct language evolution should be removed, and the latter says that this removal should be well-communicated beforehand to make code migration as smooth as possible.</source>
          <target state="translated">&lt;em&gt;言語を最新&lt;/em&gt;かつ&lt;em&gt;快適な更新に&lt;/em&gt;&lt;em&gt;保つことは&lt;/em&gt;、Kotlin言語設計の基本原則の1つです。前者は、言語の進化を妨げる構文を削除する必要があると言い、後者は、コードの移行をできるだけスムーズにするために、この削除を事前に十分に伝達する必要があると言っています。</target>
        </trans-unit>
        <trans-unit id="3576603244e907bdb431e808aa4334f0dfd3ee22" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Kotlin/Native&lt;/em&gt; follows the general tradition of Kotlin to provide excellent existing platform software interoperability. In the case of a native platform, the most important interoperability target is a C library. So &lt;em&gt;Kotlin/Native&lt;/em&gt; comes with a &lt;code&gt;cinterop&lt;/code&gt; tool, which can be used to quickly generate everything needed to interact with an external library.</source>
          <target state="translated">&lt;em&gt;Kotlin / Native&lt;/em&gt;は、&lt;em&gt;Kotlin&lt;/em&gt;の一般的な伝統に従って、優れた既存のプラットフォームソフトウェアの相互運用性を提供します。ネイティブプラットフォームの場合、最も重要な相互運用性のターゲットはCライブラリです。したがって、&lt;em&gt;Kotlin / Nativeに&lt;/em&gt;は &lt;code&gt;cinterop&lt;/code&gt; ツールが付属しており、これを使用して、外部ライブラリとのやり取りに必要なすべてのものをすばやく生成できます。</target>
        </trans-unit>
        <trans-unit id="4502b76c7c436bd8529b424c4bd0b5753f045a0c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Kotlin/Native&lt;/em&gt; interoperability</source>
          <target state="translated">&lt;em&gt;Kotlin /ネイティブの&lt;/em&gt;相互運用性</target>
        </trans-unit>
        <trans-unit id="4d5513502d6b608466dc3045dca786c40d13ab4f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Kotlin/Native&lt;/em&gt; interoperability with Swift/Objective-C</source>
          <target state="translated">&lt;em&gt;Kotlin /&lt;/em&gt; Swift / Objective-Cとの&lt;em&gt;ネイティブな&lt;/em&gt;相互運用性</target>
        </trans-unit>
        <trans-unit id="8f286d2c8f8e5b2a27bf2e5655ff3b65179fca09" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;List&lt;/em&gt; is an ordered collection with access to elements by indices &amp;ndash; integer numbers that reflect their position. Elements can occur more than once in a list. An example of a list is a sentence: it's a group of words, their order is important, and they can repeat.</source>
          <target state="translated">&lt;em&gt;リスト&lt;/em&gt;は、インデックス（要素の位置を反映する整数）によって要素にアクセスできる順序付けられたコレクションです。要素はリスト内で複数回出現する可能性があります。リストの例は文です。それは単語のグループであり、その順序は重要であり、繰り返すことができます。</target>
        </trans-unit>
        <trans-unit id="e1186b4dcc3eb6eaf3c22facbf09f539aca82e85" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Local reference&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ローカル参照&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="874fe0819e90b83c5e086ae59719653a39342041" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Map&lt;/em&gt; (or &lt;em&gt;dictionary&lt;/em&gt;) is a set of key-value pairs. Keys are unique, and each of them maps to exactly one value. The values can be duplicates. Maps are useful for storing logical connections between objects, for example, an employee's ID and their position.</source>
          <target state="translated">&lt;em&gt;マップ&lt;/em&gt;（または&lt;em&gt;辞書&lt;/em&gt;）は、キーと値のペアのセットです。キーは一意であり、各キーは1つの値にのみマップされます。値は重複する可能性があります。マップは、従業員のIDとその位置など、オブジェクト間の論理接続を保存するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="45c72534c997c0e4796b53d7f6858daa15ffa794" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt; for Java users: outer class does not see private members of its inner classes in Kotlin.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;Javaユーザーへの&lt;em&gt;注意&lt;/em&gt;：外部クラスには、Kotlinの内部クラスのプライベートメンバーは表示されません。</target>
        </trans-unit>
        <trans-unit id="63bb8ca23f3d7b64da126b72ed5f379b0c6c243d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: if you use a producer-object, say, &lt;code&gt;List&amp;lt;? extends Foo&amp;gt;&lt;/code&gt;, you are not allowed to call &lt;code&gt;add()&lt;/code&gt; or &lt;code&gt;set()&lt;/code&gt; on this object, but this does not mean that this object is &lt;strong&gt;immutable&lt;/strong&gt;: for example, nothing prevents you from calling &lt;code&gt;clear()&lt;/code&gt; to remove all items from the list, since &lt;code&gt;clear()&lt;/code&gt; does not take any parameters at all. The only thing guaranteed by wildcards (or other types of variance) is &lt;strong&gt;type safety&lt;/strong&gt;. Immutability is a completely different story.</source>
          <target state="translated">&lt;em&gt;注&lt;/em&gt;：プロデューサーオブジェクトを使用する場合、たとえば &lt;code&gt;List&amp;lt;? extends Foo&amp;gt;&lt;/code&gt; ます。このオブジェクトで &lt;code&gt;add()&lt;/code&gt; または &lt;code&gt;set()&lt;/code&gt; を呼び出すことはできませんが、これはこのオブジェクトが&lt;strong&gt;不変である&lt;/strong&gt;ことを意味しません。たとえば、 &lt;code&gt;clear()&lt;/code&gt; を呼び出してリストからすべての項目を削除することを妨げるものはありません、なぜなら &lt;code&gt;clear()&lt;/code&gt; はパラメータを取らないからです。ワイルドカード（またはその他の種類の差異）によって保証される唯一のものは、&lt;strong&gt;型の安全性&lt;/strong&gt;です。不変性はまったく別の話です。</target>
        </trans-unit>
        <trans-unit id="29c7a958d54264468bbbd1a360c401d54f68c450" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NPM Directory&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;NPMディレクトリ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="04e35c0933eb4c2013ee62c6eb2bdb148591cf07" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Non-literal&lt;/em&gt; values of function types with and without receiver are interchangeable, so that the receiver can stand in for the first parameter, and vice versa. For instance, a value of type &lt;code&gt;(A, B) -&amp;gt; C&lt;/code&gt; can be passed or assigned where a &lt;code&gt;A.(B) -&amp;gt; C&lt;/code&gt; is expected and the other way around:</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;レシーバーがある場合とない場合の関数タイプの&lt;em&gt;非リテラル&lt;/em&gt;値は交換可能であるため、レシーバーは最初のパラメーターを代行でき、その逆も可能です。たとえば、タイプ &lt;code&gt;(A, B) -&amp;gt; C&lt;/code&gt; 値は、 &lt;code&gt;A.(B) -&amp;gt; C&lt;/code&gt; が期待される場所に渡されるか、割り当てられます。</target>
        </trans-unit>
        <trans-unit id="1856aab5e71190a041ae8f7628b67cb8336e5f54" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: We'll be using IntelliJ IDEA 2018.3 EAP, Android Studio 3.2, Kotlin 1.3.21, Xcode 10.0, macOS 10.14, Gradle 4.7&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;注：IntelliJ IDEA 2018.3 EAP、Android Studio 3.2、Kotlin 1.3.21、Xcode 10.0、macOS 10.14、Gradle 4.7を使用します&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="59d2eea60da2292d1627875bc0a780b2c702f0f8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note:&lt;/em&gt; Future versions of Kotlin may change the algorithm of this seeded number generator so that it will return a sequence of values different from the current one for a given seed.</source>
          <target state="translated">&lt;em&gt;注：&lt;/em&gt; Kotlinの将来のバージョンでは、このシードされた数値ジェネレーターのアルゴリズムを変更して、特定のシードの現在の値とは異なる値のシーケンスを返すようにする可能性があります。</target>
        </trans-unit>
        <trans-unit id="82a2e8cc61c35f195f06ee34ae26d3c7b12520e3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note:&lt;/em&gt; Supporting the DWARF 2 specification means that the debugger tool recognizes Kotlin as C89, because before the DWARF 5 specification, there is no identifier for the Kotlin language type in specification.</source>
          <target state="translated">&lt;em&gt;注：&lt;/em&gt; DWARF 2仕様をサポートするとは、DWARF 5仕様の前は仕様にKotlin言語タイプの識別子がないため、デバッガーツールがKotlinをC89として認識することを意味します。</target>
        </trans-unit>
        <trans-unit id="040794cbb429ac9d018163b6bf3519024398ddfe" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt; that these operations, as well as all the others, are optimized for &lt;a href=&quot;basic-types&quot;&gt;Basic types&lt;/a&gt; and do not introduce overhead of function calls for them.</source>
          <target state="translated">&lt;em&gt;注&lt;/em&gt;これらの操作だけでなく、他のすべては、のために最適化されていることを&lt;a href=&quot;basic-types&quot;&gt;基本的なタイプ&lt;/a&gt;とオーバーヘッドそれらのための関数呼び出しの紹介はありません。</target>
        </trans-unit>
        <trans-unit id="dcf5f234032d0969342f82f537e56b60b5323593" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt; (identity checks) are not overloadable, so no conventions exist for them.</source>
          <target state="translated">&lt;em&gt;注&lt;/em&gt;： &lt;code&gt;===&lt;/code&gt; および &lt;code&gt;!==&lt;/code&gt; （IDチェック）はオーバーロード可能ではないため、これらの規則はありません。</target>
        </trans-unit>
        <trans-unit id="23bf6dc433043ea6e907335ee19d579468813fdb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: It is the caller's responsibility to close this reader.</source>
          <target state="translated">&lt;em&gt;注&lt;/em&gt;：このリーダーを閉じるのは呼び出し側の責任です。</target>
        </trans-unit>
        <trans-unit id="f7d0bfa2f21f7b6c88b288ddeadf76e1308af71d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: assignments are &lt;em&gt;NOT&lt;/em&gt; expressions in Kotlin.</source>
          <target state="translated">&lt;em&gt;注&lt;/em&gt;：Kotlinでは割り当ては式ではあり&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="0b2fe6bb5cbc7bd540eb87f54d19fe6afc7ecaa7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: star-projections are very much like Java's raw types, but safe.</source>
          <target state="translated">&lt;em&gt;注&lt;/em&gt;：star-projectionsはJavaのraw型と非常によく似ていますが、安全です。</target>
        </trans-unit>
        <trans-unit id="188f0e99ec34e6faf653bbe372fe89e0b1df1e99" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: the caller must close the underlying &lt;code&gt;BufferedReader&lt;/code&gt; when the iteration is finished; as the user may not complete the iteration loop (e.g. using a method like find() or any() on the iterator may terminate the iteration early.</source>
          <target state="translated">&lt;em&gt;注&lt;/em&gt;：反復が終了したら、呼び出し元は基礎となる &lt;code&gt;BufferedReader&lt;/code&gt; を閉じる必要があります。ユーザーが反復ループを完了できない可能性があるため（たとえば、イテレータでfind（）またはany（）などのメソッドを使用すると、反復が早く終了する可能性があります）。</target>
        </trans-unit>
        <trans-unit id="a6077463a7821fabdfcddc51e1d079b428ff632c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;PECS stands for Producer-Extends, Consumer-Super.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;PECSは、Producer-Extends、Consumer-Superの略です。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0d5f69854615ad613761dad73544b24609c7393e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;REPL&lt;/em&gt; (&lt;em&gt;Read-Eval-Print-Loop&lt;/em&gt;) is a tool for running Kotlin code interactively. REPL lets you evaluate expressions and code chunks without creating projects or even functions if you don't need them.</source>
          <target state="translated">&lt;em&gt;REPL&lt;/em&gt;（&lt;em&gt;Read-Eval-Print-Loop&lt;/em&gt;）は、Kotlinコードをインタラクティブに実行するためのツールです。REPLを使用すると、プロジェクトを作成せずに式やコードチャンクを評価したり、不要な場合は関数を評価したりできます。</target>
        </trans-unit>
        <trans-unit id="59a2e517268ae0cd8fd535db48b8568de9aff4ed" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Set&lt;/em&gt; is a collection of unique elements. It reflects the mathematical abstraction of set: a group of objects without repetitions. Generally, the order of set elements has no significance. For example, an alphabet is a set of letters.</source>
          <target state="translated">&lt;em&gt;セット&lt;/em&gt;はユニークな要素のコレクションです。これは、セットの数学的な抽象化、つまり、繰り返しのないオブジェクトのグループを反映しています。一般に、集合要素の順序は重要ではありません。たとえば、アルファベットは文字のセットです。</target>
        </trans-unit>
        <trans-unit id="631c0992c7446670a06fcd8ad234a30589710f5d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Stateful&lt;/em&gt; operations require a significant amount of state, usually proportional to the number of elements in a sequence.</source>
          <target state="translated">&lt;em&gt;ステートフル&lt;/em&gt;操作には、通常、シーケンス内の要素の数に比例するかなりの量の状態が必要です。</target>
        </trans-unit>
        <trans-unit id="5f6efe07b5f8e4e3dbf8a7561b88e3c9f1e4b50f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Stateless&lt;/em&gt; operations require no state and process each element independently, for example, &lt;a href=&quot;collection-transformations#mapping&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;collection-filtering&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;. Stateless operations can also require a small constant amount of state to process an element, for example, &lt;a href=&quot;collection-parts&quot;&gt;&lt;code&gt;take()&lt;/code&gt; or &lt;code&gt;drop()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;ステートレス&lt;/em&gt;操作には状態を必要とせず、独立して各要素を処理し、例えば、&lt;a href=&quot;collection-transformations#mapping&quot;&gt; &lt;code&gt;map()&lt;/code&gt; &lt;/a&gt;又は&lt;a href=&quot;collection-filtering&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt;。ステートレス操作では、要素を処理するために、一定の少量の状態が必要になる場合もあり&lt;a href=&quot;collection-parts&quot;&gt; &lt;code&gt;take()&lt;/code&gt; &lt;code&gt;drop()&lt;/code&gt; &lt;/a&gt;例：take（）またはdrop（））。</target>
        </trans-unit>
        <trans-unit id="50e5e63d3f187bbf7ba89581b75756435db1b274" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;This material was written by &lt;a href=&quot;https://eldhuset.net/&quot;&gt;Aasmund Eldhuset&lt;/a&gt;; it is owned by &lt;a href=&quot;https://www.khanacademy.org/&quot;&gt;Khan Academy&lt;/a&gt; and is licensed for use under &lt;a href=&quot;https://creativecommons.org/licenses/by-nc-sa/3.0/us/&quot;&gt;CC BY-NC-SA 3.0 US&lt;/a&gt;. Please note that this is not a part of Khan Academy's official product offering.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;この資料は&lt;a href=&quot;https://eldhuset.net/&quot;&gt;Aasmund Eldhuset&lt;/a&gt;によって作成されました。&lt;a href=&quot;https://www.khanacademy.org/&quot;&gt;Khan Academy&lt;/a&gt;が所有し、&lt;a href=&quot;https://creativecommons.org/licenses/by-nc-sa/3.0/us/&quot;&gt;CC BY-NC-SA 3.0 US&lt;/a&gt;での使用が許可されています。これはカーンアカデミーの公式製品の一部ではないことに注意してください。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="910f279e582ad2e5260799349d5443d8807a642f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Thread confinement&lt;/em&gt; is an approach to the problem of shared mutable state where all access to the particular shared state is confined to a single thread. It is typically used in UI applications, where all UI state is confined to the single event-dispatch/application thread. It is easy to apply with coroutines by using a</source>
          <target state="translated">&lt;em&gt;スレッドの制限&lt;/em&gt;は、特定の共有状態へのすべてのアクセスが単一のスレッドに制限される共有の可変状態の問題へのアプローチです。通常、UIアプリケーションで使用され、すべてのUI状態が単一のイベントディスパッチ/アプリケーションスレッドに限定されます。コルーチンを使用して簡単に適用できます</target>
        </trans-unit>
        <trans-unit id="706b737eee14b7f5a8c622b04efa8e01738bc90d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Warning:&lt;/em&gt; having the &lt;strong&gt;kotlin.code.style&lt;/strong&gt; option set may modify the code style scheme during a project import and may change the code style settings.</source>
          <target state="translated">&lt;em&gt;警告：&lt;/em&gt;持っ&lt;strong&gt;kotlin.code.style&lt;/strong&gt;オプションセットは、プロジェクトのインポート時にコードのスタイルスキームを変更することがあり、コードスタイルの設定を変更することがあります。</target>
        </trans-unit>
        <trans-unit id="a093b969f7d46881837e46d103727f5ff74971ee" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Zipping&lt;/em&gt; transformation is building pairs from elements with the same positions in both collections. In the Kotlin standard library, this is done by the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/zip&quot;&gt;&lt;code&gt;zip()&lt;/code&gt;&lt;/a&gt; extension function. When called on a collection or an array with another collection (array) as an argument, &lt;code&gt;zip()&lt;/code&gt; returns the &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Pair&lt;/code&gt; objects. The elements of the receiver collection are the first elements in these pairs. If the collections have different sizes, the result of the &lt;code&gt;zip()&lt;/code&gt; is the smaller size; the last elements of the larger collection are not included in the result. &lt;code&gt;zip()&lt;/code&gt; can also be called in the infix form &lt;code&gt;a zip b&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;圧縮&lt;/em&gt;変換は、両方のコレクションで同じ位置にある要素からペアを構築します。Kotlin標準ライブラリでは、これは&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/zip&quot;&gt; &lt;code&gt;zip()&lt;/code&gt; &lt;/a&gt;拡張関数によって行われます。コレクションまたは別のコレクション（配列）を引数として持つ配列で呼び出されると、 &lt;code&gt;zip()&lt;/code&gt; は &lt;code&gt;Pair&lt;/code&gt; オブジェクトの &lt;code&gt;List&lt;/code&gt; を返します。レシーバーコレクションの要素は、これらのペアの最初の要素です。コレクションのサイズが異なる場合、 &lt;code&gt;zip()&lt;/code&gt; の結果はサイズが小さくなります。大きなコレクションの最後の要素は結果に含まれません。 &lt;code&gt;zip()&lt;/code&gt; は、中置形式 &lt;code&gt;a zip b&lt;/code&gt; で呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="8a0ae4f8623f1204b137519166f3471d061141c5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;break&lt;/em&gt;. Terminates the nearest enclosing loop.</source>
          <target state="translated">&lt;em&gt;壊れる&lt;/em&gt;。最も近い囲みループを終了します。</target>
        </trans-unit>
        <trans-unit id="1fc9ae085051cd3bde519375f6ccb827b0ffca8a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;continue&lt;/em&gt;. Proceeds to the next step of the nearest enclosing loop.</source>
          <target state="translated">&lt;em&gt;続ける&lt;/em&gt;。最も近い囲みループの次のステップに進みます。</target>
        </trans-unit>
        <trans-unit id="2fae5fac1bba1876e2e3e8934d6a21a13581fb96" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;for&lt;/em&gt; loop iterates through anything that provides an iterator. This is equivalent to the &lt;code&gt;foreach&lt;/code&gt; loop in languages like C#. The syntax is as follows:</source>
          <target state="translated">&lt;em&gt;for&lt;/em&gt;ループは、イテレーターを提供するすべてのものを反復します。これは、C＃などの言語の &lt;code&gt;foreach&lt;/code&gt; ループに相当します。構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="024028479e6e97eb843fc2a724c8de4a52bce8fe" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;if&lt;/em&gt; branches can be blocks, and the last expression is the value of a block:</source>
          <target state="translated">&lt;em&gt;場合&lt;/em&gt;の枝はブロックすることができ、そして最後の式は、ブロックの値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="dea9927b516af2bd807f59e8615ba5e0b60ac8c6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;return&lt;/em&gt;. By default returns from the nearest enclosing function or &lt;a href=&quot;lambdas#anonymous-functions&quot;&gt;anonymous function&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;リターン&lt;/em&gt;。デフォルトでは、最も近い囲み関数または&lt;a href=&quot;lambdas#anonymous-functions&quot;&gt;無名関数&lt;/a&gt;から戻ります。</target>
        </trans-unit>
        <trans-unit id="6818df73127c5514eddaf002c7f2a1095842a492" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;stateful&lt;/em&gt; &amp;ndash; operations which require a significant amount of state, usually proportional to the number of elements in a sequence.</source>
          <target state="translated">&lt;em&gt;ステートフル&lt;/em&gt; &amp;ndash;かなりの量の状態を必要とする操作。通常、シーケンスの要素数に比例します。</target>
        </trans-unit>
        <trans-unit id="9a383ab6a7ce61301658faa8f457297f7587f38f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;stateless&lt;/em&gt; &amp;ndash; operations which require no state and process each element independently like &lt;a href=&quot;map&quot;&gt;kotlin.sequences.Sequence.map&lt;/a&gt;, &lt;a href=&quot;filter&quot;&gt;kotlin.sequences.Sequence.filter&lt;/a&gt;, or require a small constant amount of state to process an element, for example &lt;a href=&quot;take&quot;&gt;kotlin.sequences.Sequence.take&lt;/a&gt; or &lt;a href=&quot;drop&quot;&gt;kotlin.sequences.Sequence.drop&lt;/a&gt;;</source>
          <target state="translated">&lt;em&gt;ステートレス&lt;/em&gt; -ない状態を必要としないなど、それぞれ独立して要素を処理する操作&lt;a href=&quot;map&quot;&gt;kotlin.sequences.Sequence.map&lt;/a&gt;、&lt;a href=&quot;filter&quot;&gt;kotlin.sequences.Sequence.filter&lt;/a&gt;、又は例えば、要素を処理する状態の小さな一定量を必要&lt;a href=&quot;take&quot;&gt;kotlin.sequences.Sequence。 take&lt;/a&gt;または&lt;a href=&quot;drop&quot;&gt;kotlin.sequences.Sequence.drop&lt;/a&gt; ;</target>
        </trans-unit>
        <trans-unit id="f8f3cb42bf6ed30e905b895543705f8c4b226960" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;try&lt;/em&gt; is an expression, i.e. it may have a return value:</source>
          <target state="translated">&lt;em&gt;try&lt;/em&gt;は式です。つまり、戻り値がある場合があります。</target>
        </trans-unit>
        <trans-unit id="ee13dff39772084153285c9ab7db6f40f001178c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;val&lt;/em&gt; local variables - always except for &lt;a href=&quot;delegated-properties#local-delegated-properties-since-11&quot;&gt;local delegated properties&lt;/a&gt;;</source>
          <target state="translated">&lt;em&gt;val&lt;/em&gt;ローカル変数-常に&lt;a href=&quot;delegated-properties#local-delegated-properties-since-11&quot;&gt;ローカルの委任されたプロパティ&lt;/a&gt;を除く。</target>
        </trans-unit>
        <trans-unit id="dbbca77ad89d50bc4392cdeb284bc14af782494b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;val&lt;/em&gt; properties - if the property is private or internal or the check is performed in the same &lt;a href=&quot;visibility-modifiers#modules&quot;&gt;module&lt;/a&gt; where the property is declared. Smart casts aren't applicable to open properties or properties that have custom getters;</source>
          <target state="translated">&lt;em&gt;val&lt;/em&gt;プロパティ-プロパティがプライベートまたは内部であるか、プロパティが宣言されているのと同じ&lt;a href=&quot;visibility-modifiers#modules&quot;&gt;モジュール&lt;/a&gt;でチェックが実行される場合。スマートキャストは、オープンプロパティまたはカスタムゲッターを持つプロパティには適用できません。</target>
        </trans-unit>
        <trans-unit id="cfba4354a071acc509eef85bb2cde7f8f572beb6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;var&lt;/em&gt; local variables - if the variable is not modified between the check and the usage, is not captured in a lambda that modifies it, and is not a local delegated property;</source>
          <target state="translated">&lt;em&gt;var&lt;/em&gt;ローカル変数-チェックと使用の間に変数が変更されない場合、変数を変更するラムダにキャプチャされず、ローカルの委任プロパティではありません。</target>
        </trans-unit>
        <trans-unit id="ebb85acb44a1d6bdf51052766b0c4f41e4e6c8e8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;var&lt;/em&gt; properties - never (because the variable can be modified at any time by other code).</source>
          <target state="translated">&lt;em&gt;var&lt;/em&gt;プロパティ-しない（変数は他のコードによっていつでも変更できるため）。</target>
        </trans-unit>
        <trans-unit id="6a9ab26e9c7534ce384d0294db420889f6805e8f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;when&lt;/em&gt; can also be used as a replacement for an &lt;em&gt;if&lt;/em&gt;-&lt;em&gt;else&lt;/em&gt;&lt;em&gt;if&lt;/em&gt; chain. If no argument is supplied, the branch conditions are simply boolean expressions, and a branch is executed when its condition is true:</source>
          <target state="translated">&lt;em&gt;when&lt;/em&gt;は、&lt;em&gt;if&lt;/em&gt; - &lt;em&gt;else &lt;/em&gt;&lt;em&gt;if&lt;/em&gt;チェーンの代わりとしても使用できます。引数を指定しない場合、分岐条件はブール式になり、条件がtrueのときに分岐が実行されます。</target>
        </trans-unit>
        <trans-unit id="7152778e403c1ac4ea488ef3a7338a2fed9e905b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;when&lt;/em&gt; matches its argument against all branches sequentially until some branch condition is satisfied. &lt;em&gt;when&lt;/em&gt; can be used either as an expression or as a statement. If it is used as an expression, the value of the satisfied branch becomes the value of the overall expression. If it is used as a statement, the values of individual branches are ignored. (Just like with &lt;em&gt;if&lt;/em&gt;, each branch can be a block, and its value is the value of the last expression in the block.)</source>
          <target state="translated">&lt;em&gt;は、&lt;/em&gt;いくつかの分岐条件が満たされるまで、すべての分岐に対して引数を順番&lt;em&gt;に&lt;/em&gt;照合します。&lt;em&gt;when&lt;/em&gt;は、式またはステートメントとして使用できます。式として使用する場合、満たされたブランチの値が式全体の値になります。ステートメントとして使用した場合、個々のブランチの値は無視されます。（&lt;em&gt;if&lt;/em&gt;と同様に、各ブランチはブロックにすることができ、その値はブロック内の最後の式の値です。）</target>
        </trans-unit>
        <trans-unit id="c8e5919fb828e6c0e57dc91bc792845c60fbc090" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;when&lt;/em&gt; replaces the switch operator of C-like languages. In the simplest form it looks like this</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;Cのような言語のスイッチ演算子を置き換える&lt;em&gt;場合&lt;/em&gt;。最も単純な形では次のようになります</target>
        </trans-unit>
        <trans-unit id="cadb0d35f3f46fa49ecd548b003d7faa1bbbf6f0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;while&lt;/em&gt; and &lt;em&gt;do&lt;/em&gt;..&lt;em&gt;while&lt;/em&gt; work as usual</source>
          <target state="translated">&lt;em&gt;しばらく&lt;/em&gt;して&lt;em&gt;行う&lt;/em&gt;。.. &lt;em&gt;しばらく&lt;/em&gt;いつものように仕事</target>
        </trans-unit>
        <trans-unit id="e28d6974a292f791dfa9570cc846dfbebb1996ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Existentialism&quot;&gt;The Existential&lt;/a&gt; Transformation: Consumer in, Producer out!&lt;/strong&gt; :-)</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Existentialism&quot;&gt;実在する&lt;/a&gt;変革：コンシューマーイン、プロデューサーアウト！&lt;/strong&gt;:-)</target>
        </trans-unit>
        <trans-unit id="13cd3975ed9d952faf27bb193361480231851f32" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;AMD&lt;/strong&gt; is usually used on the client-side in the browser. The idea behind AMD is to load modules asynchronously, thus improving usability and performance.</source>
          <target state="translated">&lt;strong&gt;AMD&lt;/strong&gt;は通常、ブラウザのクライアント側で使用されます。AMDの背後にある考え方は、モジュールを非同期にロードすることで、使いやすさとパフォーマンスを向上させることです。</target>
        </trans-unit>
        <trans-unit id="e2eee24e834eab0cf33cffaf4ba989326f94f7f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Access to a link task.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;リンクタスクへのアクセス。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1f78c8faa5b7756989f20d6c8d362cd17ed051ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Access to a run task&lt;/strong&gt; (for executable binaries only). The &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin creates run tasks for all executable binaries of host platforms (Windows, Linux and macOS). Names of such tasks are based on binary names, e.g. &lt;code&gt;runReleaseExecutable&amp;lt;target-name&amp;gt;&lt;/code&gt; or &lt;code&gt;runFooDebugExecutable&amp;lt;target-name&amp;gt;&lt;/code&gt;. A run task can be accessed using the &lt;code&gt;runTask&lt;/code&gt; property of an executable binary.</source>
          <target state="translated">&lt;strong&gt;実行タスクへのアクセス&lt;/strong&gt;（実行可能バイナリのみ）。 &lt;code&gt;kotlin-multiplatform&lt;/code&gt; プラグインはホスト・プラットフォーム（Windows、Linux、およびMacOSの）のすべての実行可能バイナリの実行タスクを作成します。そのようなタスクの名前は、 &lt;code&gt;runReleaseExecutable&amp;lt;target-name&amp;gt;&lt;/code&gt; または &lt;code&gt;runFooDebugExecutable&amp;lt;target-name&amp;gt;&lt;/code&gt; などのバイナリ名に基づいています。実行タスクには、実行可能バイナリの &lt;code&gt;runTask&lt;/code&gt; プロパティを使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="ffb694371c68f79144ae5e974cc0bac3a52aefda" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Access to the output file.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;出力ファイルへのアクセス。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2cbc4c63ce2666097dc25aafd5454709270d0d5e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Additions in Incremental Releases (AIR)&lt;/strong&gt;: things can be added in an incremental release, removals and changes of behavior should be avoided and announced in a previous incremental release if necessary.</source>
          <target state="translated">&lt;strong&gt;インクリメンタルリリース（AIR）&lt;/strong&gt;での追加：&lt;strong&gt;インクリメンタルリリース&lt;/strong&gt;での追加が可能です。動作の削除や変更は避け、必要に応じて以前のインクリメンタルリリースで発表する必要があります。</target>
        </trans-unit>
        <trans-unit id="e3a06f48618a6881b4838d68e7146e16182e8956" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;All other experimental features, by default&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;デフォルトでは、他のすべての実験的機能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d73b60aede97b7d47d99bc8d4268962a141a28ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Author&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Author&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a884c1a4a2719a1b309626fcd958b7136a0ace1b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Available for&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;以下のために利用可能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="385f83ef45a08a7675930a15034fe1f85ec3a398" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Binary kind&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;バイナリ種類&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a60efc1de782ecd0c495005460eb05ffd095f88a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Comfortable Updates&lt;/strong&gt;. Incompatible changes, such as removing things from a language, may lead to painful migration from one version to the next if carried out without proper care. We will always announce such changes well in advance, mark things as deprecated and provide automated migration tools &lt;em&gt;before the change happens&lt;/em&gt;. By the time the language is changed we want most of the code in the world to be already updated and thus have no issues migrating to the new version.</source>
          <target state="translated">&lt;strong&gt;快適なアップデート&lt;/strong&gt;。言語からの削除など、互換性のない変更は、適切な注意を払わずに実行すると、あるバージョンから次のバージョンへの移行に苦痛をもたらす可能性があります。私たちは常にそのような変更を前もって十分に発表し、非推奨としてマークし&lt;em&gt;、変更が発生する前に&lt;/em&gt;自動移行ツールを提供します。言語が変更されるまでに、世界中のほとんどのコードが既に更新されていることを望んでいるため、新しいバージョンへの移行に問題はありません。</target>
        </trans-unit>
        <trans-unit id="4a90f28a34743ebe55cbb12c9c066936868abe54" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;CommonJS&lt;/strong&gt; is the module system used on the server-side, and in particular with node.js. Node modules all abide by this definition. CommonJS modules can also be used in the browser via &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;CommonJS&lt;/strong&gt;は、サーバー側、特にnode.jsで使用されるモジュールシステムです。ノードモジュールはすべてこの定義に従います。CommonJSモジュールは、&lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt;を介してブラウザーで使用することもできます。</target>
        </trans-unit>
        <trans-unit id="1195ec2bac12543bdb05c5a7c57c172f7bb32f0e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Compatibility&lt;/strong&gt;: Kotlin is fully compatible with JDK 6, ensuring that Kotlin applications can run on older Android devices with no issues. The Kotlin tooling is fully supported in Android Studio and compatible with the Android build system.</source>
          <target state="translated">&lt;strong&gt;互換性&lt;/strong&gt;：KotlinはJDK 6と完全に互換性があり、Kotlinアプリケーションが問題なく古いAndroidデバイスで実行できるようにします。KotlinツールはAndroid Studioで完全にサポートされており、Androidビルドシステムと互換性があります。</target>
        </trans-unit>
        <trans-unit id="c2ae471fc641370e12b5409285bdaee90823a077" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Compilation Time&lt;/strong&gt;: Kotlin supports efficient incremental compilation, so while there's some additional overhead for clean builds, &lt;a href=&quot;https://medium.com/keepsafe-engineering/kotlin-vs-java-compilation-speed-e6c174b39b5d&quot;&gt;incremental builds are usually as fast or faster than with Java&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;コンパイル時間&lt;/strong&gt;：Kotlinは効率的なインクリメンタルコンパイルをサポートしているため、クリーンビルドには追加のオーバーヘッドがいくつかあり&lt;a href=&quot;https://medium.com/keepsafe-engineering/kotlin-vs-java-compilation-speed-e6c174b39b5d&quot;&gt;ますが&lt;/a&gt;、インクリメンタルビルドは通常、Javaと同じかそれより高速です。</target>
        </trans-unit>
        <trans-unit id="f38fcdc20544f4bd9f6e680c2daf1906f6c4fd80" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Compilation.&lt;/strong&gt; Each binary is built on basis of some compilation available in the same target. The default value of this parameter depends on the binary type: &lt;code&gt;Test&lt;/code&gt; binaries are based on the &lt;code&gt;test&lt;/code&gt; compilation while other binaries - on the &lt;code&gt;main&lt;/code&gt; compilation.</source>
          <target state="translated">&lt;strong&gt;コンパイル。&lt;/strong&gt;各バイナリは、同じターゲットで利用可能なコンパイルに基づいて構築されています。このパラメータのデフォルト値は、バイナリタイプによって異なります。 &lt;code&gt;Test&lt;/code&gt; バイナリは &lt;code&gt;test&lt;/code&gt; コンパイルに基づいていますが、他のバイナリは &lt;code&gt;main&lt;/code&gt; コンパイルに基づいています。</target>
        </trans-unit>
        <trans-unit id="12d7a969ac1d8b31d7d77682b70cb08343ef279a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Component&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Component&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6ac230639a723040fdf0abd0778656ec5abd84a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Component&lt;/strong&gt;: Core language</source>
          <target state="translated">&lt;strong&gt;コンポーネント&lt;/strong&gt;：コア言語</target>
        </trans-unit>
        <trans-unit id="227fc1c09b15a2df831a0a95dbc64fd964bede49" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Component&lt;/strong&gt;: Kotlin/JVM</source>
          <target state="translated">&lt;strong&gt;コンポーネント&lt;/strong&gt;：Kotlin / JVM</target>
        </trans-unit>
        <trans-unit id="7570c0f126329c1405dbe8897b36472d6d303239" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Component&lt;/strong&gt;: kotlin-stdlib (JVM)</source>
          <target state="translated">&lt;strong&gt;コンポーネント&lt;/strong&gt;：kotlin-stdlib（JVM）</target>
        </trans-unit>
        <trans-unit id="4000e9f93b9f3c271b29de49b2a9e0b10cab6782" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Component&lt;/strong&gt;: other</source>
          <target state="translated">&lt;strong&gt;コンポーネント&lt;/strong&gt;：その他</target>
        </trans-unit>
        <trans-unit id="08d0f1462630b68dd58d9cdbdd352aa89e99d312" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Components&lt;/strong&gt;: Core language</source>
          <target state="translated">&lt;strong&gt;コンポーネント&lt;/strong&gt;：コア言語</target>
        </trans-unit>
        <trans-unit id="9db8723ef2c0043bd70e12ab4791d09224937133" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Constructor&lt;/strong&gt; Creates a new array of the specified &lt;a href=&quot;size#kotlin.BooleanArray%24size&quot;&gt;size&lt;/a&gt;, with all elements initialized to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;コンストラクタ&lt;/strong&gt;すべての要素が &lt;code&gt;false&lt;/code&gt; に初期化された、指定&lt;a href=&quot;size#kotlin.BooleanArray%24size&quot;&gt;さ&lt;/a&gt;れたサイズの新しい配列を作成します。</target>
        </trans-unit>
        <trans-unit id="2fa5199c1b27f8f9a99026303ae0a4378faad501" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Constructor&lt;/strong&gt; Creates a new array of the specified &lt;a href=&quot;size#kotlin.ByteArray%24size&quot;&gt;size&lt;/a&gt;, with all elements initialized to zero.</source>
          <target state="translated">&lt;strong&gt;コンストラクター&lt;/strong&gt;すべての要素をゼロに初期化して、指定&lt;a href=&quot;size#kotlin.ByteArray%24size&quot;&gt;さ&lt;/a&gt;れたサイズの新しい配列を作成します。</target>
        </trans-unit>
        <trans-unit id="bd6cf7b5ab4b4150353ed0a9e4a7cb00caff108d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Constructor&lt;/strong&gt; Creates a new array of the specified &lt;a href=&quot;size#kotlin.CharArray%24size&quot;&gt;size&lt;/a&gt;, with all elements initialized to null char (`\u0000').</source>
          <target state="translated">&lt;strong&gt;コンストラクター&lt;/strong&gt;すべての要素がnull文字（ `\ u0000 '）に初期化された、指定&lt;a href=&quot;size#kotlin.CharArray%24size&quot;&gt;さ&lt;/a&gt;れたサイズの新しい配列を作成します。</target>
        </trans-unit>
        <trans-unit id="c4a7d8f52ac7620beff100e289d8b02da39d85b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Constructor&lt;/strong&gt; Creates a new array of the specified &lt;a href=&quot;size#kotlin.DoubleArray%24size&quot;&gt;size&lt;/a&gt;, with all elements initialized to zero.</source>
          <target state="translated">&lt;strong&gt;コンストラクター&lt;/strong&gt;すべての要素をゼロに初期化して、指定&lt;a href=&quot;size#kotlin.DoubleArray%24size&quot;&gt;さ&lt;/a&gt;れたサイズの新しい配列を作成します。</target>
        </trans-unit>
        <trans-unit id="272ce437857108ed3f51611ec719d9d62bce42e3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Constructor&lt;/strong&gt; Creates a new array of the specified &lt;a href=&quot;size#kotlin.FloatArray%24size&quot;&gt;size&lt;/a&gt;, with all elements initialized to zero.</source>
          <target state="translated">&lt;strong&gt;コンストラクター&lt;/strong&gt;すべての要素をゼロに初期化して、指定&lt;a href=&quot;size#kotlin.FloatArray%24size&quot;&gt;さ&lt;/a&gt;れたサイズの新しい配列を作成します。</target>
        </trans-unit>
        <trans-unit id="39b826b50a38a1d30be53e1f28766e61502287c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Constructor&lt;/strong&gt; Creates a new array of the specified &lt;a href=&quot;size#kotlin.IntArray%24size&quot;&gt;size&lt;/a&gt;, with all elements initialized to zero.</source>
          <target state="translated">&lt;strong&gt;コンストラクター&lt;/strong&gt;すべての要素をゼロに初期化して、指定&lt;a href=&quot;size#kotlin.IntArray%24size&quot;&gt;さ&lt;/a&gt;れたサイズの新しい配列を作成します。</target>
        </trans-unit>
        <trans-unit id="6d03fb49a23f0ce8c38e59382849faa4a71f484c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Constructor&lt;/strong&gt; Creates a new array of the specified &lt;a href=&quot;size#kotlin.LongArray%24size&quot;&gt;size&lt;/a&gt;, with all elements initialized to zero.</source>
          <target state="translated">&lt;strong&gt;コンストラクター&lt;/strong&gt;すべての要素をゼロに初期化して、指定&lt;a href=&quot;size#kotlin.LongArray%24size&quot;&gt;さ&lt;/a&gt;れたサイズの新しい配列を作成します。</target>
        </trans-unit>
        <trans-unit id="813f2bea41ba6fef32ee0e8bc42727148fe8fccc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Constructor&lt;/strong&gt; Creates a new array of the specified &lt;a href=&quot;size#kotlin.ShortArray%24size&quot;&gt;size&lt;/a&gt;, with all elements initialized to zero.</source>
          <target state="translated">&lt;strong&gt;コンストラクター&lt;/strong&gt;すべての要素をゼロに初期化して、指定&lt;a href=&quot;size#kotlin.ShortArray%24size&quot;&gt;さ&lt;/a&gt;れたサイズの新しい配列を作成します。</target>
        </trans-unit>
        <trans-unit id="335d26c199adf06488a8913460409837d4075696" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Constructor&lt;/strong&gt; Creates a new instance of Pair.</source>
          <target state="translated">&lt;strong&gt;コンストラクター&lt;/strong&gt;ペアの新しいインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="773b394be7f65a95c85016d615a1c621ce6c3bc4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Constructor&lt;/strong&gt; Creates a regular expression from the specified &lt;a href=&quot;pattern#kotlin.text.Regex%24pattern&quot;&gt;pattern&lt;/a&gt; string and the specified set of &lt;a href=&quot;options#kotlin.text.Regex%24options&quot;&gt;options&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;コンストラクター&lt;/strong&gt;指定された&lt;a href=&quot;pattern#kotlin.text.Regex%24pattern&quot;&gt;パターン&lt;/a&gt;文字列と指定された&lt;a href=&quot;options#kotlin.text.Regex%24options&quot;&gt;オプションの&lt;/a&gt;セットから正規表現を作成します。</target>
        </trans-unit>
        <trans-unit id="2d15192253b231c1119607339e0a2590a4bb77e3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Constructor&lt;/strong&gt; Creates a version from all three components.</source>
          <target state="translated">&lt;strong&gt;コンストラクター&lt;/strong&gt; 3つのコンポーネントすべてからバージョンを作成します。</target>
        </trans-unit>
        <trans-unit id="9569df5f31e8b5de73e6d92b548ff29f2d98a7b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Constructor&lt;/strong&gt; creates an empty bit set with the specified &lt;a href=&quot;size&quot;&gt;size&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;コンストラクター&lt;/strong&gt;は、指定&lt;a href=&quot;size&quot;&gt;さ&lt;/a&gt;れたサイズで空のビットセットを作成します</target>
        </trans-unit>
        <trans-unit id="e0096f245c9fae0805031521bff1005fcb0b2f31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Copy runtime library files&lt;/strong&gt;. Indicates in what subfolder we want the &lt;code&gt;kotlin.js&lt;/code&gt; library to be output to. By default it is &lt;code&gt;lib&lt;/code&gt; which is why in the HTML we are referencing this path.</source>
          <target state="translated">&lt;strong&gt;ランタイムライブラリファイルをコピーします&lt;/strong&gt;。 &lt;code&gt;kotlin.js&lt;/code&gt; ライブラリを出力するサブフォルダーを示します。デフォルトでは &lt;code&gt;lib&lt;/code&gt; なので、HTMLではこのパスを参照しています。</target>
        </trans-unit>
        <trans-unit id="413b10e9ad8da201e3bf3c2f9c2446ab5e5202bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Add @OverrideInit to constructor to make it override Objective-C initializer</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; @OverrideInitをコンストラクターに追加して、Objective-C初期化子をオーバーライドする</target>
        </trans-unit>
        <trans-unit id="adf56d13cf05b3f392462e1af11305676e27e873" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Do not use Synchronized annotation in pure Kotlin/JS code</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;純粋なKotlin / JSコードでは同期アノテーションを使用しないでください</target>
        </trans-unit>
        <trans-unit id="452fddb0e520391a9f67bc97f96be7bea4bd264d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Do not use Synchronized annotation in pure Kotlin/Native code</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;純粋なKotlin /ネイティブコードで同期アノテーションを使用しないでください</target>
        </trans-unit>
        <trans-unit id="dfab3c6713337be01b7128770be5faa0fa8ff4f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Do not use Volatile annotation in pure Kotlin/JS code</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;純粋なKotlin / JSコードではVolatileアノテーションを使用しないでください</target>
        </trans-unit>
        <trans-unit id="48cec979b523be2447f63e1e317c3d78c8ec346b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Do not use Volatile annotation in pure Kotlin/Native code</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;純粋なKotlin /ネイティブコードでVolatileアノテーションを使用しないでください</target>
        </trans-unit>
        <trans-unit id="abe0bb35ec6506cafc1fd50dc083e5353ead7ec6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Provided for binary compatibility</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;バイナリ互換性のために提供されています</target>
        </trans-unit>
        <trans-unit id="1231e7a7a6d5a83c2cd105b0352613d2c669daac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Synchronization on any object is not supported on every platform and will be removed from the common standard library soon.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;オブジェクトの同期はすべてのプラットフォームでサポートされているわけではなく、まもなく共通標準ライブラリから削除されます。</target>
        </trans-unit>
        <trans-unit id="f426529b7537c1615991e33fc1bd17f18c166bbe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;整数と浮動小数点の引数を混合するこの「含む」操作には、あいまいなセマンティクスがあり、削除される予定です。</target>
        </trans-unit>
        <trans-unit id="752efaab5e33671c902096353a2f29f2232a126d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; This exception type is not supposed to be thrown or caught in common code and will be removed from kotlin-stdlib-common soon.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;この例外タイプは、一般的なコードでスローまたはキャッチされるものではなく、kotlin-stdlib-commonから間もなく削除されます。</target>
        </trans-unit>
        <trans-unit id="f6c8a88fa21880c017378826441e400ceb55798c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; This function creates a type which rarely makes sense for generic classes. For example, such type can only be used in signatures of members of that class. Use starProjectedType or createType() for clearer semantics.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;この関数は、ジェネリッククラスではめったに意味のない型を作成します。たとえば、そのようなタイプは、そのクラスのメンバーのシグニチャーでのみ使用できます。より明確なセマンティクスについては、starProjectedTypeまたはcreateType（）を使用してください。</target>
        </trans-unit>
        <trans-unit id="f6bbf8f9eac350e7835725133adee88cb6daeb2a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use 'iterator { }' function instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに 'iterator {}'関数を使用してください。</target>
        </trans-unit>
        <trans-unit id="447e915d652609535feb5b69ab9a433b444d89d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use 'java' property to get Java class corresponding to this Kotlin class or cast this instance to Any if you really want to get the runtime Java class of this implementation of KClass.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; Kclassのこの実装のランタイムJavaクラスを取得したい場合は、「java」プロパティを使用して、このKotlinクラスに対応するJavaクラスを取得するか、このインスタンスをAnyにキャストします。</target>
        </trans-unit>
        <trans-unit id="8bc948514b2df4ec7b49af73847c66c422a6ed1a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use 'sequence { }' function instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに 'sequence {}'関数を使用してください。</target>
        </trans-unit>
        <trans-unit id="124528a176dd411bf469d0f779b788eae05e15e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use 'waitForMultipleFutures' top-level function instead</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに「waitForMultipleFutures」トップレベル関数を使用してください</target>
        </trans-unit>
        <trans-unit id="2a85d8342cdd2702e8a490e130e9e49ba012a310" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use .asCPointer() instead</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに.asCPointer（）を使用してください</target>
        </trans-unit>
        <trans-unit id="3c1b654b2f837e72b5dbf3da907e460ec7e7cbf2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use CPointer&amp;lt;*&amp;gt;.asStableRef&amp;lt;T&amp;gt;() instead</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにCPointer &amp;lt;*&amp;gt;。asStableRef &amp;lt;T&amp;gt;（）を使用してください</target>
        </trans-unit>
        <trans-unit id="9c3a310a1e69ca97ad036df74b2c5f423341adda" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use Default companion object instead</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにデフォルトのコンパニオンオブジェクトを使用</target>
        </trans-unit>
        <trans-unit id="0d774f0846c9725096d6868d8250a661e8c97f71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use Random.nextDouble instead</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにRandom.nextDoubleを使用してください</target>
        </trans-unit>
        <trans-unit id="cca46c363e63f0970ef54a11a4bf2ba63e633ff7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use SequenceScope class instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにSequenceScopeクラスを使用してください。</target>
        </trans-unit>
        <trans-unit id="17d5f606b3230bf8deaf75eb0b98aaaae44c6e23" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use StableRef&amp;lt;T&amp;gt; instead</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにStableRef &amp;lt;T&amp;gt;を使用してください</target>
        </trans-unit>
        <trans-unit id="fdbc2696154545aa9ace3d52789ca4ac09a165c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use `definedExternally` instead</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに `definedExternally`を使用してください</target>
        </trans-unit>
        <trans-unit id="ba5914429156c8fc516a3f59beaf39b64a5e9cf8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use `external` modifier instead</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに `external`修飾子を使用してください</target>
        </trans-unit>
        <trans-unit id="58d5cf286d92237119359612e84665c034969d7c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use class literal and extension property `js` instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにクラスリテラルと拡張プロパティ `js`を使用してください。</target>
        </trans-unit>
        <trans-unit id="6de5f60695de863a66440239847cc9793b2b34e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use encodeToByteArray instead</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにencodeToByteArrayを使用してください</target>
        </trans-unit>
        <trans-unit id="fc9ed721d2dc4d3944528cb9641d6cef4c21af83" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use inline extension function with body using dynamic</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;動的を使用して本体でインライン拡張関数を使用する</target>
        </trans-unit>
        <trans-unit id="12c35b94f395f24afe7b8a4a286110b23a581b2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use kotlin.math.PI instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにkotlin.math.PIを使用してください。</target>
        </trans-unit>
        <trans-unit id="33efd05b987cdb7650f554bb37295f9999c0a2cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use kotlin.math.abs instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにkotlin.math.absを使用してください。</target>
        </trans-unit>
        <trans-unit id="f1cb5563ed7231c2dab46e4f16297df892fb2e3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use kotlin.math.acos instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにkotlin.math.acosを使用してください。</target>
        </trans-unit>
        <trans-unit id="996e58906ac50a84be19234bc9cde02bf073f083" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use kotlin.math.asin instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにkotlin.math.asinを使用してください。</target>
        </trans-unit>
        <trans-unit id="66a5d5ed239001acbd826d1714135e01284998ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use kotlin.math.atan instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにkotlin.math.atanを使用してください。</target>
        </trans-unit>
        <trans-unit id="fa95d4bb6ea3af355c890298bd2a4a41700b68b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use kotlin.math.atan2 instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにkotlin.math.atan2を使用してください。</target>
        </trans-unit>
        <trans-unit id="60143061b29098b9cb54a512540ac43d6f76ed28" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use kotlin.math.ceil instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにkotlin.math.ceilを使用してください。</target>
        </trans-unit>
        <trans-unit id="7c3f82eb454195f9e9e74a70809de173e944ec2a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use kotlin.math.cos instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにkotlin.math.cosを使用してください。</target>
        </trans-unit>
        <trans-unit id="bdcd7c3509a842b932a3f5944db27c5018dc94b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use kotlin.math.exp instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにkotlin.math.expを使用してください。</target>
        </trans-unit>
        <trans-unit id="8000773b5e7d1f1f4a888e5b5b80592a088ff6c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use kotlin.math.floor instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにkotlin.math.floorを使用してください。</target>
        </trans-unit>
        <trans-unit id="332d44171961144416b8a0033b7de5cccca96db0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use kotlin.math.ln instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにkotlin.math.lnを使用してください。</target>
        </trans-unit>
        <trans-unit id="b2debbe1367cb0ab7c89bd4b93284a48bcd20a66" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use kotlin.math.pow instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにkotlin.math.powを使用してください。</target>
        </trans-unit>
        <trans-unit id="cdfcdc89fe10b37e662854d2fc47c6d1e309ead4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use kotlin.math.round instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにkotlin.math.roundを使用してください。</target>
        </trans-unit>
        <trans-unit id="e419fa79027d809dbd2513aa857fe253bc15eaaf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use kotlin.math.sin instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにkotlin.math.sinを使用してください。</target>
        </trans-unit>
        <trans-unit id="7b26bc4743b50acba4d04d18114fa6c724fbf393" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use kotlin.math.sqrt instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにkotlin.math.sqrtを使用してください。</target>
        </trans-unit>
        <trans-unit id="73d824d8a988bfdb22175bdfe46aa11970bc50ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use kotlin.math.tan instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにkotlin.math.tanを使用してください。</target>
        </trans-unit>
        <trans-unit id="e1a0fcaa718d82676c10da684495162f92d28ffd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use maxOf or kotlin.math.max instead</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにmaxOfまたはkotlin.math.maxを使用してください</target>
        </trans-unit>
        <trans-unit id="43c145ae9a2a47596ce6ea35f59e6c3bd752792b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use minOf or kotlin.math.min instead</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにminOfまたはkotlin.math.minを使用してください</target>
        </trans-unit>
        <trans-unit id="19d5036d3460e6073e9a138258075298f58729d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use parameters named startIndex and endIndex.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; startIndexおよびendIndexという名前のパラメーターを使用します。</target>
        </trans-unit>
        <trans-unit id="b5ee97845fb9246123c98710d4231785a233821e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use plain Kotlin cast</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;プレーンなKotlinキャストを使用</target>
        </trans-unit>
        <trans-unit id="1324034f6ba898980547749a66a22ed7890795cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use plain Kotlin cast of NSString to String</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; NSStringからStringへの単純なKotlinキャストを使用</target>
        </trans-unit>
        <trans-unit id="f708de9bf5260b05b994eae510ba0be9bfd046e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use plain Kotlin cast of String to NSString</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; StringからNSStringへの単純なKotlinキャストを使用してください</target>
        </trans-unit>
        <trans-unit id="05de66863fa6c31537422d7c01f621dc7d7967c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use readBytes() overload without estimatedSize parameter</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; estimatedSizeパラメータなしでreadBytes（）オーバーロードを使用してください</target>
        </trans-unit>
        <trans-unit id="76f6f68dc5115acc51fbd095f0f8455c672005b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use rem(other) instead</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにrem（other）を使用してください</target>
        </trans-unit>
        <trans-unit id="1e53fcbffd3b20605c758a965a8df3af90dae79d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use removeAt(index) instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにremoveAt（index）を使用してください。</target>
        </trans-unit>
        <trans-unit id="b7829b593479752cbfa034815c42df9f02b2f7d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use sortWith(Comparator(comparison)) instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにsortWith（Comparator（comparison））を使用してください。</target>
        </trans-unit>
        <trans-unit id="24aed9d46b571a7cc738f91897e763352bd3582e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use sortWith(comparator) instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにsortWith（comparator）を使用してください。</target>
        </trans-unit>
        <trans-unit id="0a816493e0174c04dc5c78864f25874e05a19183" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use toDouble() instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにtoDouble（）を使用してください。</target>
        </trans-unit>
        <trans-unit id="b5615a77c7b7d1acb10a2e712e5261dc01e50710" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use toInt() instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにtoInt（）を使用してください。</target>
        </trans-unit>
        <trans-unit id="2ba0440eaf794b635c91c1633c00222cd8ba2f2e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use toInt(radix) instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにtoInt（radix）を使用してください。</target>
        </trans-unit>
        <trans-unit id="972da3dde07ec4f64208ca86fd24c347853620f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use top-level functions from kotlin.math package instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりにkotlin.mathパッケージのトップレベル関数を使用してください。</target>
        </trans-unit>
        <trans-unit id="bdd361edba9dde53887c45e30a98ecc6839d5370" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecation cycle&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;非推奨サイクル&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="92262314d78850fea262f10d209039e6c457c391" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Entry point&lt;/strong&gt; (for executable binaries only). By default the entry point for Kotlin/Native programs is a &lt;code&gt;main&lt;/code&gt; function located in the root package. This setting allows one to change this default and use a custom function as an entry point. For example it can be used to move the &lt;code&gt;main&lt;/code&gt; function from the root package.</source>
          <target state="translated">&lt;strong&gt;エントリポイント&lt;/strong&gt;（実行可能バイナリのみ）。デフォルトでは、Kotlin /ネイティブプログラムのエントリポイントは、ルートパッケージにある &lt;code&gt;main&lt;/code&gt; 関数です。この設定により、このデフォルトを変更し、カスタム関数をエントリポイントとして使用できます。たとえば、ルートパッケージから &lt;code&gt;main&lt;/code&gt; 関数を移動するために使用できます。</target>
        </trans-unit>
        <trans-unit id="68b0edbe9afeaffdc2715a7389f848e4f07af145" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Expressiveness&lt;/strong&gt;: Kotlin's innovative language features, such as its support for &lt;a href=&quot;type-safe-builders&quot;&gt;type-safe builders&lt;/a&gt; and &lt;a href=&quot;delegated-properties&quot;&gt;delegated properties&lt;/a&gt;, help build powerful and easy-to-use abstractions.</source>
          <target state="translated">&lt;strong&gt;表現力&lt;/strong&gt;：&lt;a href=&quot;type-safe-builders&quot;&gt;タイプセーフなビルダー&lt;/a&gt;や&lt;a href=&quot;delegated-properties&quot;&gt;委任されたプロパティの&lt;/a&gt;サポートなど、Kotlinの革新的な言語機能は、強力で使いやすい抽象化の構築に役立ちます。</target>
        </trans-unit>
        <trans-unit id="dd290df5d8dd8a41cfaa050e0a1c2c4990ee7f7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Factory method&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;工場法&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="01da2bfca3b0c6cd5afd856a346c9af2ed22f57a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Feedback Loop&lt;/strong&gt;. Going through deprecation cycles requires significant effort, so we want to minimize the number of incompatible changes we'll be making in the future. Apart from using our best judgement, we believe that trying things out in real life is the best way to validate a design. Before casting things in stone we want them battle-tested. This is why we use every opportunity to make early versions of our designs available in production versions of the language, but with &lt;em&gt;experimental&lt;/em&gt; status. Experimental features are not stable, they can be changed at any time, and the users that opt into using them do so explicitly to indicate that they are ready to deal with the future migration issues. These users provide invaluable feedback that we gather to iterate on the design and make it rock-solid.</source>
          <target state="translated">&lt;strong&gt;フィードバックループ&lt;/strong&gt;。非推奨サイクルを実行するにはかなりの労力が必要であるため、将来行われる互換性のない変更の数を最小限に抑えたいと考えています。最高の判断力を使用することとは別に、実際に物事を試すことがデザインを検証する最良の方法であると信じています。石で物を鋳造する前に、彼らに戦いのテストをしてもらいたい。このため、私たちはあらゆる機会を利用して、デザインの初期バージョンを本番バージョンの言語で利用できるようにしますが、&lt;em&gt;実験的な&lt;/em&gt;ステータスにしています。試験運用機能は安定しておらず、いつでも変更できます。また、それらを使用することを選択したユーザーは、将来の移行の問題に対処する準備ができていることを明示するために明示的に変更します。これらのユーザーは、設計を反復して堅固にするために収集する貴重なフィードバックを提供します。</target>
        </trans-unit>
        <trans-unit id="84e6e1d5c7013f461d0f8180960aec592e5418ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Footprint&lt;/strong&gt;: Kotlin has a very compact runtime library, which can be further reduced through the use of ProGuard. In a &lt;a href=&quot;https://blog.gouline.net/kotlin-production-tales-62b56057dc8a&quot;&gt;real application&lt;/a&gt;, the Kotlin runtime adds only a few hundred methods and less than 100K to the size of the .apk file.</source>
          <target state="translated">&lt;strong&gt;フットプリント&lt;/strong&gt;：Kotlinには非常にコンパクトなランタイムライブラリがあり、ProGuardを使用してさらに削減できます。では&lt;a href=&quot;https://blog.gouline.net/kotlin-production-tales-62b56057dc8a&quot;&gt;、実際のアプリケーション&lt;/a&gt;、Kotlinランタイムはわずか数百の方法との.apkファイルのサイズ未満100Kを追加します。</target>
        </trans-unit>
        <trans-unit id="ab66fec3d20ab10d72344a8b47e8045de00b0458" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Framework type&lt;/strong&gt; (only for Objective-C frameworks). By default a framework built by Kotlin/Native contains a dynamic library. But it's possible to replace it with a static library.</source>
          <target state="translated">&lt;strong&gt;フレームワークタイプ&lt;/strong&gt;（Objective-Cフレームワークのみ）。デフォルトでは、Kotlin / Nativeによって構築されたフレームワークには動的ライブラリが含まれています。ただし、静的ライブラリに置き換えることは可能です。</target>
        </trans-unit>
        <trans-unit id="57126d52087eba472a07f6b0dc82b2c9b74ad896" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fully Stable (FS)&lt;/strong&gt;: incremental releases are fully compatible, only optimizations and bug fixes happen. Feature releases are backwards compatible.</source>
          <target state="translated">&lt;strong&gt;完全に安定（FS）&lt;/strong&gt;：増分リリースは完全に互換性があり、最適化とバグ修正のみが行われます。機能リリースには下位互換性があります。</target>
        </trans-unit>
        <trans-unit id="5d722e5425cf5468a3cc51807165b09b74178e30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Getter&lt;/strong&gt; returns &lt;code&gt;true&lt;/code&gt; if JVM access checks are suppressed for this callable object. For a property, that means that all its accessors (getter, and setter for &lt;code&gt;var&lt;/code&gt; properties) are accessible.</source>
          <target state="translated">&lt;strong&gt;ゲッターは&lt;/strong&gt;返す &lt;code&gt;true&lt;/code&gt; JVMのアクセスチェックは、この呼び出し可能オブジェクトのために抑制されている場合。プロパティの場合、それはそのすべてのアクセサー（ &lt;code&gt;var&lt;/code&gt; プロパティのゲッター、セッター）にアクセスできることを意味します。</target>
        </trans-unit>
        <trans-unit id="893f88e4922c51e506a298efd0e349332ccff29b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; To correctly import the dependencies into the Kotlin/Native module, the Podfile must contain either &lt;a href=&quot;https://guides.cocoapods.org/syntax/podfile.html#use_modular_headers_bang&quot;&gt;&lt;code&gt;use_modular_headers!&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://guides.cocoapods.org/syntax/podfile.html#use_frameworks_bang&quot;&gt;&lt;code&gt;use_frameworks!&lt;/code&gt;&lt;/a&gt; directive.</source>
          <target state="translated">&lt;strong&gt;重要：&lt;/strong&gt;依存関係をKotlin / Nativeモジュールに正しくインポートするには、Podfileにuse_modular_headersが含まれている必要があります&lt;a href=&quot;https://guides.cocoapods.org/syntax/podfile.html#use_modular_headers_bang&quot;&gt; &lt;code&gt;use_modular_headers!&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://guides.cocoapods.org/syntax/podfile.html#use_frameworks_bang&quot;&gt; &lt;code&gt;use_frameworks!&lt;/code&gt; &lt;/a&gt;指令。</target>
        </trans-unit>
        <trans-unit id="fa5e5749e3c4a470f72fca590f3925968869b43c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Incompatible change type&lt;/strong&gt;: Behavioral</source>
          <target state="translated">&lt;strong&gt;互換性のない変更タイプ&lt;/strong&gt;：動作</target>
        </trans-unit>
        <trans-unit id="e9774a516db3294cc27043b7f776059e8e8e9244" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Incompatible change type&lt;/strong&gt;: Binary</source>
          <target state="translated">&lt;strong&gt;互換性のない変更タイプ&lt;/strong&gt;：バイナリ</target>
        </trans-unit>
        <trans-unit id="5f85eefcdfc6bf3de72be4d2ef5c7ab0771b8d4b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Incompatible change type&lt;/strong&gt;: Source</source>
          <target state="translated">&lt;strong&gt;互換性のない変更タイプ&lt;/strong&gt;：ソース</target>
        </trans-unit>
        <trans-unit id="08a3c86adb9c5648bfd57ffdaf07e8089b74133c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Incompatible change type&lt;/strong&gt;: behavioral</source>
          <target state="translated">&lt;strong&gt;互換性のない変更タイプ&lt;/strong&gt;：動作</target>
        </trans-unit>
        <trans-unit id="b44d63d70cba3bead47196e58ec9474c6ee1043e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Interacting with DOM elements&lt;/strong&gt;. Kotlin provides a series of statically typed interfaces to interact with the Document Object Model, allowing creation and update of DOM elements.</source>
          <target state="translated">&lt;strong&gt;DOM要素の操作&lt;/strong&gt;。Kotlinは一連の静的に型付けされたインターフェースを提供して、ドキュメントオブジェクトモデルと対話し、DOM要素の作成と更新を可能にします。</target>
        </trans-unit>
        <trans-unit id="5cc584a094e9383c6d524ed74cdac053c8d02dbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Interacting with graphics such as WebGL&lt;/strong&gt;. You can use Kotlin to create graphical elements on a web page using WebGL.</source>
          <target state="translated">&lt;strong&gt;WebGLなどのグラフィックスを操作する&lt;/strong&gt;。Kotlinを使用すると、WebGLを使用してWebページにグラフィック要素を作成できます。</target>
        </trans-unit>
        <trans-unit id="bc74b175415bdb2c6872627140daf87039a72fd5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Interoperability&lt;/strong&gt;: Kotlin is 100% interoperable with Java, allowing to use all existing Android libraries in a Kotlin application. This includes annotation processing, so databinding and Dagger work too.</source>
          <target state="translated">&lt;strong&gt;相互運用性&lt;/strong&gt;：KotlinはJavaと100％相互運用性があり、Kotlinアプリケーションで既存のすべてのAndroidライブラリを使用できます。これには注釈処理が含まれるため、データバインディングとダガーも機能します。</target>
        </trans-unit>
        <trans-unit id="2598c2f91d35e4a4317dc1430080d368da441adb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Interoperability&lt;/strong&gt;: Kotlin is fully compatible with all Java-based frameworks, which lets you stay on your familiar technology stack while reaping the benefits of a more modern language.</source>
          <target state="translated">&lt;strong&gt;相互運用性&lt;/strong&gt;：KotlinはすべてのJavaベースのフレームワークと完全に互換性があり、よりモダンな言語の利点を享受しながら、使い慣れたテクノロジースタックを維持できます。</target>
        </trans-unit>
        <trans-unit id="624797bf44bc3c55aa073bdf9a58f067cbae884b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Issue&lt;/strong&gt;: &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-13762&quot;&gt;KT-13762&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;発行&lt;/strong&gt;：&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-13762&quot;&gt;KT-13762&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6b67b5fcbcd7791fc278190ddce0be5d15901482" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Issue&lt;/strong&gt;: &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-16097&quot;&gt;KT-16097&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;発行&lt;/strong&gt;：&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-16097&quot;&gt;KT-16097&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="620a0df1083fbc6bc1ebf1e8bd34ea2a88bec618" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Issue&lt;/strong&gt;: &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-16310&quot;&gt;KT-16310&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;発行&lt;/strong&gt;：&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-16310&quot;&gt;KT-16310&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="42fbe3fe5033ce1298274704ce101b12010456ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Issue&lt;/strong&gt;: &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-16681&quot;&gt;KT-16681&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;発行&lt;/strong&gt;：&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-16681&quot;&gt;KT-16681&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="467037173e1ff7906572f023ecff56fc35ecbc52" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Issue&lt;/strong&gt;: &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-17176&quot;&gt;KT-17176&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;発行&lt;/strong&gt;：&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-17176&quot;&gt;KT-17176&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="178dd1bf94f5ea52efcdeccc09a4fe9599b66fab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Issue&lt;/strong&gt;: &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-17981&quot;&gt;KT-17981&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;発行&lt;/strong&gt;：&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-17981&quot;&gt;KT-17981&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5901c1a8cf2a133579a52a6cc3fe44c795fb6ade" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Issue&lt;/strong&gt;: &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-19489&quot;&gt;KT-19489&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;発行&lt;/strong&gt;：&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-19489&quot;&gt;KT-19489&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="61163eeade8a3c9c1e72e49f2a38b76ee8101c44" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Issue&lt;/strong&gt;: &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-19532&quot;&gt;KT-19532&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;発行&lt;/strong&gt;：&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-19532&quot;&gt;KT-19532&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c51480006ff5ed4b72b0cbda590360487f25ef30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Issue&lt;/strong&gt;: &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-19618&quot;&gt;KT-19618&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;発行&lt;/strong&gt;：&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-19618&quot;&gt;KT-19618&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4269bf35364cf5eef0c2aee3ffa7af7126c67b1b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Issue&lt;/strong&gt;: &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-19628&quot;&gt;KT-19628&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;発行&lt;/strong&gt;：&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-19628&quot;&gt;KT-19628&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="18e239b48fa6b77dfc46b4f8d7346e7a9ea8aab7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Issue&lt;/strong&gt;: &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-20772&quot;&gt;KT-20772&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;発行&lt;/strong&gt;：&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-20772&quot;&gt;KT-20772&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d2ec61a056ac534581d3f9ac63d2ad9837e704fe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Issue&lt;/strong&gt;: &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-20830&quot;&gt;KT-20830&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;発行&lt;/strong&gt;：&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-20830&quot;&gt;KT-20830&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e7ccb04df2d64748e20e2134c65deed513ffc4ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Issue&lt;/strong&gt;: &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-21049&quot;&gt;KT-21049&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;発行&lt;/strong&gt;：&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-21049&quot;&gt;KT-21049&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="362d124cfb6e8092d3b6b64a3c1c97c18411d09d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Issue&lt;/strong&gt;: &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-21354&quot;&gt;KT-21354&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;発行&lt;/strong&gt;：&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-21354&quot;&gt;KT-21354&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9c673a61bc8615e171b8adccc1ad84ac8e85d342" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Issue&lt;/strong&gt;: &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-21784&quot;&gt;KT-21784&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;発行&lt;/strong&gt;：&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-21784&quot;&gt;KT-21784&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5dfd5f1e36a2cdae750b38fa1f32ae31d60afb51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Issue&lt;/strong&gt;: &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-22517&quot;&gt;KT-22517&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;発行&lt;/strong&gt;：&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-22517&quot;&gt;KT-22517&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="789d4c884fa9a1b852dba0d6d48be30382573fe2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Issue&lt;/strong&gt;: &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-23153&quot;&gt;KT-23153&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;発行&lt;/strong&gt;：&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-23153&quot;&gt;KT-23153&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="beb1d34baf6f5e60bbf2274bd851226a0335294c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Issue&lt;/strong&gt;: &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-23277&quot;&gt;KT-23277&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;発行&lt;/strong&gt;：&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-23277&quot;&gt;KT-23277&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1ec687965b8bca3f04918c9027652dbc70762b91" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Issue&lt;/strong&gt;: &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-23799&quot;&gt;KT-23799&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;発行&lt;/strong&gt;：&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-23799&quot;&gt;KT-23799&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2a9b8117837a2658cae47906517066f191302558" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Issue&lt;/strong&gt;: &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-25287&quot;&gt;KT-25287&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;発行&lt;/strong&gt;：&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-25287&quot;&gt;KT-25287&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="842780bcd8ff9dbe2039445f6a9599270dc126ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Issue&lt;/strong&gt;: &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-9580&quot;&gt;KT-9580&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;発行&lt;/strong&gt;：&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-9580&quot;&gt;KT-9580&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3ffb22359482e55dfa802f06510821ee20651eb4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Issues&lt;/strong&gt;: &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-20588&quot;&gt;KT-20588&lt;/a&gt;, &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-20589&quot;&gt;KT-20589&lt;/a&gt;. See also &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-20171&quot;&gt;KT-20171&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;問題&lt;/strong&gt;：&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-20588&quot;&gt;KT-20588&lt;/a&gt;、&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-20589&quot;&gt;KT-20589&lt;/a&gt;。&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-20171&quot;&gt;KT-20171&lt;/a&gt;も参照</target>
        </trans-unit>
        <trans-unit id="73aba56311cb1950911e3d599f9eed16865c221a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Issues&lt;/strong&gt;: &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-21515&quot;&gt;KT-21515&lt;/a&gt;, &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-25333&quot;&gt;KT-25333&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;問題&lt;/strong&gt;：&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-21515&quot;&gt;KT-21515&lt;/a&gt;、&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-25333&quot;&gt;KT-25333&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="095db5bc99e8bc13e223afcb027bc0980992279c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Issues&lt;/strong&gt;: &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-24197&quot;&gt;KT-24197&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;問題&lt;/strong&gt;：&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-24197&quot;&gt;KT-24197&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="39e05aa1278ad7a2503bcfb3c1f1bfaa71410afd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Java type&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Javaタイプ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d15b37f51b2dba58ccf1543c881e55363f163dbf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Keeping the Language Modern&lt;/strong&gt;. We acknowledge that systems accumulate legacy over time. What had once been cutting-edge technology can be hopelessly outdated today. We have to evolve the language to keep it relevant to the needs of the users and up-to-date with their expectations. This includes not only adding new features, but also phasing out old ones that are no longer recommended for production use and have altogether become legacy.</source>
          <target state="translated">&lt;strong&gt;言語を現代に保つ&lt;/strong&gt;。私たちは、システムが時間の経過とともにレガシーを蓄積することを認めます。かつて最先端のテクノロジーであったものが、今日では絶望的に時代遅れになる可能性があります。言語を進化させて、ユーザーのニーズに関連し、最新の期待に応える必要があります。これには、新機能の追加だけでなく、本番環境での使用が推奨されなくなって完全にレガシーになった古い機能の段階的な廃止も含まれます。</target>
        </trans-unit>
        <trans-unit id="af07559b3d456b10e95e78f5cef72b66be05dda7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Kotlin mutable type&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Kotlin可変タイプ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a3795dcd10c1477ffbfd7ccdf4a52e9df4e62ac5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Kotlin read-only type&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Kotlin読み取り専用タイプ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bff39871f21339ee6d16c8c134fd8d15942da64b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Kotlin type&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;コトリンタイプ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f0a44911f381012dae69c91143484dfd2338561a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Kotlin/Native for Native&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Kotlin /ネイティブのネイティブ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4833f8621787b679730e7858ff9e5385cd3e49e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Last Updated&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;最終更新&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="def8d56e2c6c1c07fdbf780235a0372f93a0e796" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Learn Kotlin&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;コトリンを学ぶ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="44475f8a3f8a76a68fb693cb59a54ffa320ddf7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Learning Curve&lt;/strong&gt;: For a Java developer, getting started with Kotlin is very easy. The automated Java to Kotlin converter included in the Kotlin plugin helps with the first steps. &lt;a href=&quot;../tutorials/koans&quot;&gt;Kotlin Koans&lt;/a&gt; offer a guide through the key features of the language with a series of interactive exercises.</source>
          <target state="translated">&lt;strong&gt;学習曲線&lt;/strong&gt;：Java開発者にとって、Kotlinの使用は非常に簡単です。Kotlinプラグインに含まれる自動化されたJavaからKotlinへのコンバーターは、最初のステップを支援します。&lt;a href=&quot;../tutorials/koans&quot;&gt;Kotlin Koans&lt;/a&gt;は、一連のインタラクティブな演習で、言語の主要な機能をガイドします。</target>
        </trans-unit>
        <trans-unit id="0064e6430cb7af56de1b8fa85d7c711bb821be42" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Linker options.&lt;/strong&gt; Options passed to a system linker during binary building. One can use this setting to link against some native library.</source>
          <target state="translated">&lt;strong&gt;リンカーオプション。&lt;/strong&gt;バイナリ構築中にシステムリンカーに渡されるオプション。この設定を使用して、一部のネイティブライブラリにリンクできます。</target>
        </trans-unit>
        <trans-unit id="07ef1270cc6a5b78912b6586714ad317f0657ed1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Loaded platform type&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;搭載プラットフォームタイプ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6c229afb06419ddd0f84981c54ddfb0d1f7ca503" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MF&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;MF&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1633839bc9516bea2b216e788aac2b4d911688fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Migration&lt;/strong&gt;: Kotlin supports gradual, step by step migration of large codebases from Java to Kotlin. You can start writing new code in Kotlin while keeping older parts of your system in Java.</source>
          <target state="translated">&lt;strong&gt;移行&lt;/strong&gt;：Kotlinは、JavaからKotlinへの大規模なコードベースの段階的な段階的な&lt;strong&gt;移行を&lt;/strong&gt;サポートしています。システムの古い部分をJavaで維持しながら、Kotlinで新しいコードを書き始めることができます。</target>
        </trans-unit>
        <trans-unit id="5013d8104b487fadfcb9f6ec26b4d07e76e10250" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Mode for Binaries&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;バイナリのモード&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8a9e330b1c51ab2059298c572893a2b28833c886" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Mode for Sources&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ソースのモード&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b4818f9c5362c6e3c936951253cb1f7e858e0104" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module Kind&lt;/strong&gt;. Indicates what module standard to follow. This is covered in the &lt;a href=&quot;../working-with-modules/working-with-modules&quot;&gt;Working with Modules&lt;/a&gt; tutorial in more depth.</source>
          <target state="translated">&lt;strong&gt;モジュールの種類&lt;/strong&gt;。従うべきモジュール標準を示します。これについては&lt;a href=&quot;../working-with-modules/working-with-modules&quot;&gt;、モジュールの操作の&lt;/a&gt;チュートリアルで詳しく説明しています。</target>
        </trans-unit>
        <trans-unit id="1291d291c889d952f962f19be664239e51749e53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Moving fast (MF)&lt;/strong&gt;: no compatibility should be expected between even &lt;a href=&quot;kotlin-evolution#feature-releases-and-incremental-releases&quot;&gt;incremental releases&lt;/a&gt;, any functionality can be added, removed or changed without warning.</source>
          <target state="translated">&lt;strong&gt;高速移動（MF）&lt;/strong&gt;：&lt;a href=&quot;kotlin-evolution#feature-releases-and-incremental-releases&quot;&gt;増分リリース&lt;/a&gt;間でも互換性は期待できません。警告なしに機能を追加、削除、変更できます。</target>
        </trans-unit>
        <trans-unit id="28f8cd126dd8825e89ed3aa4dbc97f569647c6c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: On the JVM, if all of the parameters of the primary constructor have default values, the compiler will generate an additional parameterless constructor which will use the default values. This makes it easier to use Kotlin with libraries such as Jackson or JPA that create class instances through parameterless constructors.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：JVMでは、プライマリコンストラクターのすべてのパラメーターにデフォルト値がある場合、コンパイラーは、デフォルト値を使用する追加のパラメーターなしコンストラクターを生成します。これにより、パラメーターなしのコンストラクターを介してクラスインスタンスを作成するJacksonやJPAなどのライブラリーでKotlinを簡単に使用できるようになります。</target>
        </trans-unit>
        <trans-unit id="d89aa2209faf2c7b962a9fbb7cb927f54ba8d68e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: object declarations can't be local (i.e. be nested directly inside a function), but they can be nested into other object declarations or non-inner classes.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：オブジェクト宣言をローカルにすることはできません（つまり、関数内に直接ネストすることはできません）が、他のオブジェクト宣言または非内部クラスにネストすることはできます。</target>
        </trans-unit>
        <trans-unit id="66a7391836e79098f507df30b500cfdf387dae5f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: we could also use the standard class &lt;code&gt;Pair&lt;/code&gt; and have &lt;code&gt;function()&lt;/code&gt; return &lt;code&gt;Pair&amp;lt;Int, Status&amp;gt;&lt;/code&gt;, but it's often better to have your data named properly.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：標準クラス &lt;code&gt;Pair&lt;/code&gt; を使用して &lt;code&gt;function()&lt;/code&gt; で &lt;code&gt;Pair&amp;lt;Int, Status&amp;gt;&lt;/code&gt; 返すこともできますが、データに適切な名前を付ける方がよい場合がよくあります。</target>
        </trans-unit>
        <trans-unit id="920b4d9f7a2e2f012d737b1adc92132d3b2794a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note: this value should not be used in general code.&lt;/strong&gt; Using it outside of the context of &lt;code&gt;suspendCoroutineUninterceptedOrReturn&lt;/code&gt; function return value (including, but not limited to, storing this value in other properties, returning it from other functions, etc) can lead to unspecified behavior of the code.</source>
          <target state="translated">&lt;strong&gt;注：この値は一般的なコードでは使用しないでください。&lt;/strong&gt; &lt;code&gt;suspendCoroutineUninterceptedOrReturn&lt;/code&gt; 関数の戻り値（他のプロパティへのこの値の格納、他の関数からの戻り値を含むがこれらに限定されない）のコンテキスト外でそれを使用すると、コードの不特定の動作が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="31b1d1a1c1c67cb1e20686c6012118dbab4d7ed0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The plugin is based on the multiplatform project model and requires applying the &lt;code&gt;org.jetbrains.kotlin.multiplatform&lt;/code&gt; plugin. See details about the multiplatform plugin at the &lt;a href=&quot;../building-mpp-with-gradle&quot;&gt;corresponding page&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;プラグインはマルチプラットフォームプロジェクトモデルに基づいており、 &lt;code&gt;org.jetbrains.kotlin.multiplatform&lt;/code&gt; プラグインを適用する必要があります。マルチプラットフォームプラグインの詳細については、&lt;a href=&quot;../building-mpp-with-gradle&quot;&gt;対応するページをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="73c6216b6d115320c9b1ecc7efbf4142d2f0463f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; If using pre-release or EAP versions of the Kotlin plugin, the IDE may fail to open the generated project, giving a Gradle import &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-18835#focus=streamItem-27-2718879-0-0&quot;&gt;error&lt;/a&gt;. This is because the right Maven repository isn't referenced in the &lt;code&gt;build.gradle&lt;/code&gt; file, it can be resolved by adding the following entry &lt;em&gt;twice&lt;/em&gt;, into each of the &lt;code&gt;repositories { .. }&lt;/code&gt; blocks.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt; KotlinプラグインのプレリリースバージョンまたはEAPバージョンを使用している場合、IDEが生成されたプロジェクトを開けず、Gradleインポート&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-18835#focus=streamItem-27-2718879-0-0&quot;&gt;エラー&lt;/a&gt;が発生する可能性があります。これは、正しいMavenリポジトリが &lt;code&gt;build.gradle&lt;/code&gt; ファイルで参照されていないため &lt;code&gt;repositories { .. }&lt;/code&gt; 次のエントリを各リポジトリの{..}ブロックに&lt;em&gt;2回&lt;/em&gt;追加することで解決できます。</target>
        </trans-unit>
        <trans-unit id="f048dac293163b7f3a7598b49f61de73ac3ba9de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; It is the caller's responsibility to close both of these resources.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;これらの両方のリソースを閉じるのは呼び出し側の責任です。</target>
        </trans-unit>
        <trans-unit id="124d849e65ffd789b274bb9691889ca354bfd7d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; it is the caller's responsibility to close both of these resources.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;これらの両方のリソースを閉じるのは呼び出し側の責任であることに&lt;strong&gt;注意し&lt;/strong&gt;て&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="3e391a1d8a33528b8b5fbf5f4c42696126e3570c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: It is the caller's responsibility to close this stream.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：このストリームを閉じるのは呼び出し側の責任です。</target>
        </trans-unit>
        <trans-unit id="a41fbf1843bb637e2270153523b6af23d3f7972b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Output file name.&lt;/strong&gt; By default the output file name is based on binary name prefix or, if the name prefix isn't specified, on a project name. But it's possible to configure the output file name independently using the &lt;code&gt;baseName&lt;/code&gt; property. Note that final file name will be formed by adding system-dependent prefix and postfix to this base name. E.g. a &lt;code&gt;libfoo.so&lt;/code&gt; is produced for a Linux shared library with the base name &lt;code&gt;foo&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;出力ファイル名。&lt;/strong&gt;デフォルトでは、出力ファイル名はバイナリ名のプレフィックスに基づいています。名前のプレフィックスが指定されていない場合は、プロジェクト名に基づいています。ただし、 &lt;code&gt;baseName&lt;/code&gt; プロパティを使用して、出力ファイル名を個別に構成することが可能です。最終的なファイル名は、このベース名にシステム依存のプレフィックスとポストフィックスを追加することによって形成されることに注意してください。たとえば、ベース名が &lt;code&gt;foo&lt;/code&gt; の Linux共有ライブラリ用に &lt;code&gt;libfoo.so&lt;/code&gt; が生成されます。</target>
        </trans-unit>
        <trans-unit id="50ced6f5b30171a4a93c828cff28c5aae9265871" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Output file postfix&lt;/strong&gt;. Same as above, but in this case the compiler will append the contents of the selected file to the output.</source>
          <target state="translated">&lt;strong&gt;出力ファイルの接尾辞&lt;/strong&gt;。上記と同じですが、この場合、コンパイラーは選択したファイルの内容を出力に追加します。</target>
        </trans-unit>
        <trans-unit id="b7acbb24727c5dd951bd8fe4bdbacc1b0e5f3690" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Output file prefix&lt;/strong&gt;. We can prefix the output the compiler generates with additional JavaScript. In order to do so, we indicate the name of the file that contains the JavaScript we want in this box.</source>
          <target state="translated">&lt;strong&gt;出力ファイルの接頭辞&lt;/strong&gt;。コンパイラが生成する出力の前に追加のJavaScriptを付けることができます。これを行うには、必要なJavaScriptを含むファイルの名前をこのボックスに指定します。</target>
        </trans-unit>
        <trans-unit id="1f567fbc6441cccc58a14b74cbee1b61024c0b30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Performance&lt;/strong&gt;: A Kotlin application runs as fast as an equivalent Java one, thanks to very similar bytecode structure. With Kotlin's support for inline functions, code using lambdas often runs even faster than the same code written in Java.</source>
          <target state="translated">&lt;strong&gt;パフォーマンス&lt;/strong&gt;：Kotlinアプリケーションは、非常に類似したバイトコード構造のおかげで、同等のJavaアプリケーションと同じ速さで実行されます。Kotlinのインライン関数のサポートにより、ラムダを使用するコードは、Javaで記述された同じコードよりもさらに高速に実行されることがよくあります。</target>
        </trans-unit>
        <trans-unit id="8ff78e240531b65a1f2b3131a6ed9457cb776408" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Return&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="757d607f672c7334dae6f2d15467388440a9d89f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; An index of the first occurrence of &lt;a href=&quot;index-of#kotlin.text%24indexOf%28kotlin.CharSequence%2C+kotlin.Char%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fchar&quot;&gt;char&lt;/a&gt; or -1 if none is found.</source>
          <target state="translated">&lt;strong&gt;戻り値&lt;/strong&gt;最初に出現する&lt;a href=&quot;index-of#kotlin.text%24indexOf%28kotlin.CharSequence%2C+kotlin.Char%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fchar&quot;&gt;char&lt;/a&gt;のインデックス。見つからない場合は-1。</target>
        </trans-unit>
        <trans-unit id="7af850e676eb1f6ad07e246ecbc7648054a8e8f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; An index of the first occurrence of &lt;a href=&quot;index-of#kotlin.text%24indexOf%28kotlin.CharSequence%2C+kotlin.String%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstring&quot;&gt;string&lt;/a&gt; or &lt;code&gt;-1&lt;/code&gt; if none is found.</source>
          <target state="translated">&lt;strong&gt;戻り値&lt;/strong&gt;の最初の出現のアンインデックス&lt;a href=&quot;index-of#kotlin.text%24indexOf%28kotlin.CharSequence%2C+kotlin.String%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstring&quot;&gt;文字列&lt;/a&gt;または &lt;code&gt;-1&lt;/code&gt; 何も見つからなかった場合。</target>
        </trans-unit>
        <trans-unit id="5cd1a92de7d335131ff93dd7748a1b3c35c63499" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; An index of the first occurrence of &lt;a href=&quot;last-index-of#kotlin.text%24lastIndexOf%28kotlin.CharSequence%2C+kotlin.Char%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fchar&quot;&gt;char&lt;/a&gt; or -1 if none is found.</source>
          <target state="translated">&lt;strong&gt;戻り値&lt;/strong&gt;最初に出現する&lt;a href=&quot;last-index-of#kotlin.text%24lastIndexOf%28kotlin.CharSequence%2C+kotlin.Char%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fchar&quot;&gt;char&lt;/a&gt;のインデックス。見つからない場合は-1。</target>
        </trans-unit>
        <trans-unit id="4004685c44664daadd174c6a7248b58ad09d8306" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; An index of the first occurrence of &lt;a href=&quot;last-index-of#kotlin.text%24lastIndexOf%28kotlin.CharSequence%2C+kotlin.String%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstring&quot;&gt;string&lt;/a&gt; or -1 if none is found.</source>
          <target state="translated">&lt;strong&gt;戻り値&lt;/strong&gt;最初に出現する&lt;a href=&quot;last-index-of#kotlin.text%24lastIndexOf%28kotlin.CharSequence%2C+kotlin.String%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstring&quot;&gt;文字列&lt;/a&gt;のインデックス。見つからない場合は-1。</target>
        </trans-unit>
        <trans-unit id="7c2c91f69c38f6b0e99eb7c7f21b31b8ff2800c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; An index of the first occurrence of matched character from &lt;a href=&quot;index-of-any#kotlin.text%24indexOfAny%28kotlin.CharSequence%2C+kotlin.CharArray%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fchars&quot;&gt;chars&lt;/a&gt; or -1 if none of &lt;a href=&quot;index-of-any#kotlin.text%24indexOfAny%28kotlin.CharSequence%2C+kotlin.CharArray%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fchars&quot;&gt;chars&lt;/a&gt; are found.</source>
          <target state="translated">&lt;strong&gt;リターン&lt;/strong&gt;アンのからマッチした文字が最初に出現する位置のインデックス&lt;a href=&quot;index-of-any#kotlin.text%24indexOfAny%28kotlin.CharSequence%2C+kotlin.CharArray%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fchars&quot;&gt;文字&lt;/a&gt;または-1のいずれ場合は&lt;a href=&quot;index-of-any#kotlin.text%24indexOfAny%28kotlin.CharSequence%2C+kotlin.CharArray%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fchars&quot;&gt;文字が&lt;/a&gt;発見されません。</target>
        </trans-unit>
        <trans-unit id="ed38c40ddbaf9c9e8959cc88c45220bb74df65fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; An index of the last occurrence of matched character from &lt;a href=&quot;last-index-of-any#kotlin.text%24lastIndexOfAny%28kotlin.CharSequence%2C+kotlin.CharArray%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fchars&quot;&gt;chars&lt;/a&gt; or -1 if none of &lt;a href=&quot;last-index-of-any#kotlin.text%24lastIndexOfAny%28kotlin.CharSequence%2C+kotlin.CharArray%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fchars&quot;&gt;chars&lt;/a&gt; are found.</source>
          <target state="translated">&lt;strong&gt;リターン&lt;/strong&gt;からの一致した文字が最後に現れるのアンインデックス&lt;a href=&quot;last-index-of-any#kotlin.text%24lastIndexOfAny%28kotlin.CharSequence%2C+kotlin.CharArray%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fchars&quot;&gt;文字&lt;/a&gt;または-1のいずれ場合は&lt;a href=&quot;last-index-of-any#kotlin.text%24lastIndexOfAny%28kotlin.CharSequence%2C+kotlin.CharArray%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fchars&quot;&gt;文字が&lt;/a&gt;発見されません。</target>
        </trans-unit>
        <trans-unit id="476664da54ca5e12b023a38b5c0c9a78a17fb037" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; An instance of &lt;a href=&quot;../-match-group/index#kotlin.text.MatchGroup&quot;&gt;MatchGroup&lt;/a&gt; if the group with the specified &lt;a href=&quot;get#kotlin.text.MatchNamedGroupCollection%24get%28kotlin.String%29%2Fname&quot;&gt;name&lt;/a&gt; was matched or &lt;code&gt;null&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;strong&gt;戻り値&lt;/strong&gt;指定した&lt;a href=&quot;get#kotlin.text.MatchNamedGroupCollection%24get%28kotlin.String%29%2Fname&quot;&gt;名前の&lt;/a&gt;グループが一致した場合は&lt;a href=&quot;../-match-group/index#kotlin.text.MatchGroup&quot;&gt;MatchGroup&lt;/a&gt;のインスタンス、それ以外の場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3bef3966f2f05a88d0735518e95ca5d2dce9b767" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; An instance of &lt;a href=&quot;../-match-result/index&quot;&gt;MatchResult&lt;/a&gt; if match was found or &lt;code&gt;null&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;一致が見つかった場合は&lt;a href=&quot;../-match-result/index&quot;&gt;MatchResult&lt;/a&gt;のインスタンス、それ以外の場合は &lt;code&gt;null&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="e4d8f232464ef8dac9081a9a982d93b31bf500a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; An instance of MatchGroup if the group with the specified &lt;a href=&quot;get#kotlin.text%24get%28kotlin.text.MatchGroupCollection%2C+kotlin.String%29%2Fname&quot;&gt;name&lt;/a&gt; was matched or &lt;code&gt;null&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;strong&gt;戻り値&lt;/strong&gt;指定した&lt;a href=&quot;get#kotlin.text%24get%28kotlin.text.MatchGroupCollection%2C+kotlin.String%29%2Fname&quot;&gt;名前の&lt;/a&gt;グループが一致した場合はMatchGroupのインスタンス、それ以外の場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="935d5a6f8dc59afb1cfba02a19debb5e5421db4c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; An instance of MatchResult if match was found or &lt;code&gt;null&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;一致が見つかった場合はMatchResultのインスタンス、それ以外の場合は &lt;code&gt;null&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="bca80f4e95cb0ed398996067163cca3543f5227e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; An instance of MatchResult if the entire input matches or &lt;code&gt;null&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;入力全体が一致する場合はMatchResultのインスタンス、そうでない場合は &lt;code&gt;null&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="2378752e83bb2a757af3b5523444ded4dd6b04ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; File with relative path from &lt;a href=&quot;relative-to#kotlin.io%24relativeTo%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; to this.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;&lt;a href=&quot;relative-to#kotlin.io%24relativeTo%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;ベース&lt;/a&gt;からこれまでの相対パスを含むファイルを&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="05784c6721c79f3dbd32bc694f8a644402e66119" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; File with relative path from &lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; to this, or &lt;code&gt;null&lt;/code&gt; if this and base paths have different roots.</source>
          <target state="translated">&lt;strong&gt;リターン&lt;/strong&gt;相対からのパスとファイル&lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;ベース&lt;/a&gt;これまで、または &lt;code&gt;null&lt;/code&gt; の本とベースパスは異なるルーツを持っている場合。</target>
        </trans-unit>
        <trans-unit id="175b53596a618414d8f28838230010cdd2c26dc0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; File with relative path from &lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; to this, or &lt;code&gt;this&lt;/code&gt; if this and base paths have different roots.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;&lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;ベース&lt;/a&gt;からこれへの相対パス、または &lt;code&gt;this&lt;/code&gt; パスとベースパスのルートが異なる場合はこれを含むファイルを&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="21be04e13d02602636a5a7fb84162e15455167dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; Returns a char sequence of length at least &lt;a href=&quot;pad-end#kotlin.text%24padEnd%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Char%29%2Flength&quot;&gt;length&lt;/a&gt; consisting of &lt;code&gt;this&lt;/code&gt; char sequence appended with &lt;a href=&quot;pad-end#kotlin.text%24padEnd%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Char%29%2FpadChar&quot;&gt;padChar&lt;/a&gt; as many times as are necessary to reach that length.</source>
          <target state="translated">&lt;strong&gt;戻り値は、&lt;/strong&gt;少なくとも長さの文字列を返します&lt;a href=&quot;pad-end#kotlin.text%24padEnd%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Char%29%2Flength&quot;&gt;長さ&lt;/a&gt;からなる &lt;code&gt;this&lt;/code&gt; を付加文字列&lt;a href=&quot;pad-end#kotlin.text%24padEnd%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Char%29%2FpadChar&quot;&gt;padChar&lt;/a&gt;回数だけその長さに到達するために必要なように。</target>
        </trans-unit>
        <trans-unit id="e256ebaed480a7f0368eda36fd51bad6e41516d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; Returns a char sequence of length at least &lt;a href=&quot;pad-start#kotlin.text%24padStart%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Char%29%2Flength&quot;&gt;length&lt;/a&gt; consisting of &lt;code&gt;this&lt;/code&gt; char sequence prepended with &lt;a href=&quot;pad-start#kotlin.text%24padStart%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Char%29%2FpadChar&quot;&gt;padChar&lt;/a&gt; as many times as are necessary to reach that length.</source>
          <target state="translated">&lt;strong&gt;戻り値は、&lt;/strong&gt;少なくとも長さの文字列を返します&lt;a href=&quot;pad-start#kotlin.text%24padStart%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Char%29%2Flength&quot;&gt;長さ&lt;/a&gt;からなる &lt;code&gt;this&lt;/code&gt; 前に付加文字列&lt;a href=&quot;pad-start#kotlin.text%24padStart%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Char%29%2FpadChar&quot;&gt;padChar&lt;/a&gt;回数だけその長さに到達するために必要であるとして。</target>
        </trans-unit>
        <trans-unit id="f60d641eaede731f221b7060f1f3e9e4d481bc2e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; Returns a string of length at least &lt;a href=&quot;pad-end#kotlin.text%24padEnd%28kotlin.String%2C+kotlin.Int%2C+kotlin.Char%29%2Flength&quot;&gt;length&lt;/a&gt; consisting of &lt;code&gt;this&lt;/code&gt; string appended with &lt;a href=&quot;pad-end#kotlin.text%24padEnd%28kotlin.String%2C+kotlin.Int%2C+kotlin.Char%29%2FpadChar&quot;&gt;padChar&lt;/a&gt; as many times as are necessary to reach that length.</source>
          <target state="translated">&lt;strong&gt;Return &lt;/strong&gt; &lt;code&gt;this&lt;/code&gt; 長さに達するのに必要な回数&lt;a href=&quot;pad-end#kotlin.text%24padEnd%28kotlin.String%2C+kotlin.Int%2C+kotlin.Char%29%2FpadChar&quot;&gt;だけpadCharが&lt;/a&gt;追加されたこの文字列で構成される、少なくとも&lt;a href=&quot;pad-end#kotlin.text%24padEnd%28kotlin.String%2C+kotlin.Int%2C+kotlin.Char%29%2Flength&quot;&gt;長さの&lt;/a&gt;文字列を返します。</target>
        </trans-unit>
        <trans-unit id="3f0e97a5d1532dd289cbd00cb8febad2ebc006ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; Returns a string of length at least &lt;a href=&quot;pad-start#kotlin.text%24padStart%28kotlin.String%2C+kotlin.Int%2C+kotlin.Char%29%2Flength&quot;&gt;length&lt;/a&gt; consisting of &lt;code&gt;this&lt;/code&gt; string prepended with &lt;a href=&quot;pad-start#kotlin.text%24padStart%28kotlin.String%2C+kotlin.Int%2C+kotlin.Char%29%2FpadChar&quot;&gt;padChar&lt;/a&gt; as many times as are necessary to reach that length.</source>
          <target state="translated">&lt;strong&gt;戻り値は、&lt;/strong&gt;少なくとも長さの文字列を返します&lt;a href=&quot;pad-start#kotlin.text%24padStart%28kotlin.String%2C+kotlin.Int%2C+kotlin.Char%29%2Flength&quot;&gt;長さ&lt;/a&gt;からなる &lt;code&gt;this&lt;/code&gt; 前に付加文字列&lt;a href=&quot;pad-start#kotlin.text%24padStart%28kotlin.String%2C+kotlin.Int%2C+kotlin.Char%29%2FpadChar&quot;&gt;padChar&lt;/a&gt;回数だけその長さに到達するために必要なように。</target>
        </trans-unit>
        <trans-unit id="05d2bfaf1aa7e0d001ef17a623b8853662f84965" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; The &lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.Array%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">&lt;strong&gt;戻り&lt;/strong&gt;&lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.Array%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;先の&lt;/a&gt;マップを。</target>
        </trans-unit>
        <trans-unit id="778fbef5dee9882db535983ba2b4d6a30194cda7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; The &lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.Array%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">&lt;strong&gt;戻り&lt;/strong&gt;&lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.Array%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;先の&lt;/a&gt;マップを。</target>
        </trans-unit>
        <trans-unit id="bbacdc249ef59b7019772a93fea3a391cc671301" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; The &lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">&lt;strong&gt;戻り&lt;/strong&gt;&lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%29%2Fdestination&quot;&gt;先の&lt;/a&gt;マップを。</target>
        </trans-unit>
        <trans-unit id="971b1a111fa49abbc52dc55c9059a6defa065fb3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; The &lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">&lt;strong&gt;戻り&lt;/strong&gt;&lt;a href=&quot;group-by-to#kotlin.collections%24groupByTo%28kotlin.collections.Iterable%28%28kotlin.collections.groupByTo.T%29%29%2C+kotlin.collections.groupByTo.M%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.collections.groupByTo.T%2C+kotlin.collections.groupByTo.V%29%29%29%2Fdestination&quot;&gt;先の&lt;/a&gt;マップを。</target>
        </trans-unit>
        <trans-unit id="0b8ef7cc2d4624d80dc45bba07cbc871b1c65fd5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; The &lt;a href=&quot;group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">&lt;strong&gt;戻り&lt;/strong&gt;&lt;a href=&quot;group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%29%2Fdestination&quot;&gt;先の&lt;/a&gt;マップを。</target>
        </trans-unit>
        <trans-unit id="7a13a91417e9f4cda94ea862a2c14b5d12b50ec7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; The &lt;a href=&quot;group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">&lt;strong&gt;戻り&lt;/strong&gt;&lt;a href=&quot;group-by-to#kotlin.text%24groupByTo%28kotlin.CharSequence%2C+kotlin.text.groupByTo.M%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.Char%2C+kotlin.text.groupByTo.V%29%29%29%2Fdestination&quot;&gt;先の&lt;/a&gt;マップを。</target>
        </trans-unit>
        <trans-unit id="7bd830ad513290b53fb7d18b6c571053d207675d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; This method never returns normally.</source>
          <target state="translated">&lt;strong&gt;Return&lt;/strong&gt;このメソッドは通常は戻りません。</target>
        </trans-unit>
        <trans-unit id="f79b336185113f28a5e8c19738212cf11e2ce174" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; a &lt;a href=&quot;-map/index#kotlin.collections.Map&quot;&gt;Map&lt;/a&gt; associating the key of each group with the count of element in the group.</source>
          <target state="translated">&lt;strong&gt;戻る&lt;/strong&gt;&lt;a href=&quot;-map/index#kotlin.collections.Map&quot;&gt;地図を&lt;/a&gt;グループ内の要素の数と、各グループのキーを関連付けます。</target>
        </trans-unit>
        <trans-unit id="4b2bcc4c304883498cd841b079d1ea9f4ad7ec6c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; a &lt;a href=&quot;-map/index#kotlin.collections.Map&quot;&gt;Map&lt;/a&gt; associating the key of each group with the count of elements in the group.</source>
          <target state="translated">&lt;strong&gt;戻る&lt;/strong&gt;&lt;a href=&quot;-map/index#kotlin.collections.Map&quot;&gt;地図を&lt;/a&gt;グループ内の要素の数と、各グループのキーを関連付けます。</target>
        </trans-unit>
        <trans-unit id="92e4c78b65c9a633d5b3fde208c21636da22c900" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; a &lt;a href=&quot;-map/index#kotlin.collections.Map&quot;&gt;Map&lt;/a&gt; associating the key of each group with the result of accumulating the group elements.</source>
          <target state="translated">&lt;strong&gt;戻る&lt;/strong&gt;&lt;a href=&quot;-map/index#kotlin.collections.Map&quot;&gt;地図を&lt;/a&gt;グループ要素を蓄積する結果と各グループのキーを関連付けます。</target>
        </trans-unit>
        <trans-unit id="36136cc4d5676787a1a14efcd50d7d8b70d826c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; a &lt;a href=&quot;-map/index#kotlin.collections.Map&quot;&gt;Map&lt;/a&gt; associating the key of each group with the result of aggregation of the group elements.</source>
          <target state="translated">&lt;strong&gt;戻る&lt;/strong&gt;&lt;a href=&quot;-map/index#kotlin.collections.Map&quot;&gt;地図を&lt;/a&gt;グループ要素の集合の結果と、各グループのキーを関連付けます。</target>
        </trans-unit>
        <trans-unit id="294ff37c2322a4c56ecea7db52c0d54cd2b4f79b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; a byte array with this URL entire content.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;このURL全体のコンテンツを含むバイト配列を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="3cbc799d7826647bc9a71e6d72a766656ce46405" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; a file object corresponding to a newly-created directory.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;新しく作成されたディレクトリに対応するファイルオブジェクトを&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b965b504748aed686b87a58974f88b91857caabc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; a file object corresponding to a newly-created file.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;新しく作成されたファイルに対応するファイルオブジェクトを&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="02bcdfc6e31df51b1d65fca5b0cb566548dd0e8f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; a sequence of corresponding file lines. The sequence returned can be iterated only once.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;対応するファイル行のシーケンスを&lt;strong&gt;返し&lt;/strong&gt;ます。返されたシーケンスは1回だけ反復できます。</target>
        </trans-unit>
        <trans-unit id="2160e32351bd00d00c4490b91708257b5bca54ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; a string with this URL entire content.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;このURL全体のコンテンツを含む文字列を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="9ecc7ab2d534b07ebe5f3acac091a7bc6d580dbb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; concatenated this and &lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;relative&lt;/a&gt; paths, or just &lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;relative&lt;/a&gt; if it's absolute.</source>
          <target state="translated">&lt;strong&gt;戻り値は&lt;/strong&gt;これと連結し&lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;、相対&lt;/a&gt;パス、または単に&lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;相対的に&lt;/a&gt;それは絶対だ場合。</target>
        </trans-unit>
        <trans-unit id="31371dbb418b67ca7aa434b39b320ed1b192c649" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; concatenated this and &lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;relative&lt;/a&gt; paths, or just &lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;relative&lt;/a&gt; if it's absolute.</source>
          <target state="translated">&lt;strong&gt;戻り値は&lt;/strong&gt;これと連結し&lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;、相対&lt;/a&gt;パス、または単に&lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;相対的に&lt;/a&gt;それは絶対だ場合。</target>
        </trans-unit>
        <trans-unit id="0e3b041dfb6a04ced4ee7e624743c6da9c4f43f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; concatenated this.parent and &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;relative&lt;/a&gt; paths, or just &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;relative&lt;/a&gt; if it's absolute or this has no parent.</source>
          <target state="translated">&lt;strong&gt;戻り&lt;/strong&gt; this.parentと連結し&lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;、相対&lt;/a&gt;パス、または単に&lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;相対的に&lt;/a&gt;それは絶対だか、これに親がない場合。</target>
        </trans-unit>
        <trans-unit id="43a48306ba4c43d0088fb67cb705b208bcc9386a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; concatenated this.parent and &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;relative&lt;/a&gt; paths, or just &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;relative&lt;/a&gt; if it's absolute or this has no parent.</source>
          <target state="translated">&lt;strong&gt;戻り&lt;/strong&gt; this.parentと連結し&lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;、相対&lt;/a&gt;パス、または単に&lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;相対的に&lt;/a&gt;それは絶対だか、これに親がない場合。</target>
        </trans-unit>
        <trans-unit id="7b42f6092865f9dfce116ae493656407a723eb0d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; list of file lines.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;ファイル行のリストを&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="256270599d2a21266de9d3ca44caf6ec9a0edd62" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; normalized pathname with . and possibly .. removed.</source>
          <target state="translated">&lt;strong&gt;で&lt;/strong&gt;正規化されたパス名を&lt;strong&gt;返し&lt;/strong&gt;ます。そしておそらく..削除されました。</target>
        </trans-unit>
        <trans-unit id="6ce77fb5c185e1e599932236eccf578ac0149806" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; number of characters copied.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;コピーされた文字数を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="a1ecafc512de705dfc66f3c708cb522d48dec844" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; relative path from &lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; to this.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;&lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;ベース&lt;/a&gt;からこれ&lt;strong&gt;への&lt;/strong&gt;相対パスを&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="6ce25bd9a12866f3c99d0b4009527916b203f6dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; string representation of this object</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;このオブジェクトの文字列表現を&lt;strong&gt;返し&lt;/strong&gt;ます</target>
        </trans-unit>
        <trans-unit id="973b5f4d8230019a26ae4a00e23bd3985b1352da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the &lt;a href=&quot;aggregate-to#kotlin.collections%24aggregateTo%28kotlin.collections.Grouping%28%28kotlin.collections.aggregateTo.T%2C+kotlin.collections.aggregateTo.K%29%29%2C+kotlin.collections.aggregateTo.M%2C+kotlin.Function4%28%28kotlin.collections.aggregateTo.K%2C+kotlin.collections.aggregateTo.R%2C+kotlin.collections.aggregateTo.T%2C+kotlin.Boolean%2C+kotlin.collections.aggregateTo.R%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map associating the key of each group with the result of aggregation of the group elements.</source>
          <target state="translated">&lt;strong&gt;戻り&lt;/strong&gt;&lt;a href=&quot;aggregate-to#kotlin.collections%24aggregateTo%28kotlin.collections.Grouping%28%28kotlin.collections.aggregateTo.T%2C+kotlin.collections.aggregateTo.K%29%29%2C+kotlin.collections.aggregateTo.M%2C+kotlin.Function4%28%28kotlin.collections.aggregateTo.K%2C+kotlin.collections.aggregateTo.R%2C+kotlin.collections.aggregateTo.T%2C+kotlin.Boolean%2C+kotlin.collections.aggregateTo.R%29%29%29%2Fdestination&quot;&gt;先&lt;/a&gt;族元素の凝集の結果と、各グループのキーを関連付けるマップ。</target>
        </trans-unit>
        <trans-unit id="31f805614a95b3a152a4e8e3503fc9c1fa30a424" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the &lt;a href=&quot;copy-into#kotlin.collections%24copyInto%28kotlin.Array%28%28kotlin.collections.copyInto.T%29%29%2C+kotlin.Array%28%28kotlin.collections.copyInto.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2Fdestination&quot;&gt;destination&lt;/a&gt; array.</source>
          <target state="translated">&lt;strong&gt;戻り&lt;/strong&gt;&lt;a href=&quot;copy-into#kotlin.collections%24copyInto%28kotlin.Array%28%28kotlin.collections.copyInto.T%29%29%2C+kotlin.Array%28%28kotlin.collections.copyInto.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2Fdestination&quot;&gt;先の&lt;/a&gt;配列を。</target>
        </trans-unit>
        <trans-unit id="087c6dc8143f829497cf0861e5fbfaeadd61d939" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the &lt;a href=&quot;copy-into#kotlin.collections%24copyInto%28kotlin.UIntArray%2C+kotlin.UIntArray%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2Fdestination&quot;&gt;destination&lt;/a&gt; array.</source>
          <target state="translated">&lt;strong&gt;戻り&lt;/strong&gt;&lt;a href=&quot;copy-into#kotlin.collections%24copyInto%28kotlin.UIntArray%2C+kotlin.UIntArray%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2Fdestination&quot;&gt;先の&lt;/a&gt;配列を。</target>
        </trans-unit>
        <trans-unit id="2fa8216fba791e145052d8ac7b1b86596eaaf2af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the &lt;a href=&quot;copy-to#kotlin.io%24copyTo%28java.io.File%2C+java.io.File%2C+kotlin.Boolean%2C+kotlin.Int%29%2Ftarget&quot;&gt;target&lt;/a&gt; file.</source>
          <target state="translated">&lt;strong&gt;戻る&lt;/strong&gt;&lt;a href=&quot;copy-to#kotlin.io%24copyTo%28java.io.File%2C+java.io.File%2C+kotlin.Boolean%2C+kotlin.Int%29%2Ftarget&quot;&gt;ターゲット・&lt;/a&gt;ファイルを。</target>
        </trans-unit>
        <trans-unit id="27acc9ba82f869dfcfb4143708f8793837edb3f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the &lt;a href=&quot;each-count-to#kotlin.collections%24eachCountTo%28kotlin.collections.Grouping%28%28kotlin.collections.eachCountTo.T%2C+kotlin.collections.eachCountTo.K%29%29%2C+kotlin.collections.eachCountTo.M%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map associating the key of each group with the count of elements in the group.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;各グループのキーとグループ内の要素の数を関連付けた&lt;a href=&quot;each-count-to#kotlin.collections%24eachCountTo%28kotlin.collections.Grouping%28%28kotlin.collections.eachCountTo.T%2C+kotlin.collections.eachCountTo.K%29%29%2C+kotlin.collections.eachCountTo.M%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップを&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="cb5af6d228a8fe297ad2c9af4dd93e2e1552665f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the &lt;a href=&quot;fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.Function2%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map associating the key of each group with the result of accumulating the group elements.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;各グループのキーとグループ要素の累積結果を関連付けた&lt;a href=&quot;fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.Function2%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.R%29%29%2C+kotlin.Function3%28%28kotlin.collections.foldTo.K%2C+kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップを&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="2749e310c879a209eb22a1cb5a1bbb756f468c5e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the &lt;a href=&quot;fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.collections.foldTo.R%2C+kotlin.Function2%28%28kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map associating the key of each group with the result of accumulating the group elements.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;各グループのキーとグループ要素の累積結果を関連付けた&lt;a href=&quot;fold-to#kotlin.collections%24foldTo%28kotlin.collections.Grouping%28%28kotlin.collections.foldTo.T%2C+kotlin.collections.foldTo.K%29%29%2C+kotlin.collections.foldTo.M%2C+kotlin.collections.foldTo.R%2C+kotlin.Function2%28%28kotlin.collections.foldTo.R%2C+kotlin.collections.foldTo.T%2C+%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップを&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="6deb61e01cb64a5e31cdccfc2d658785b1ea8c2f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the &lt;a href=&quot;reduce-to#kotlin.collections%24reduceTo%28kotlin.collections.Grouping%28%28kotlin.collections.reduceTo.T%2C+kotlin.collections.reduceTo.K%29%29%2C+kotlin.collections.reduceTo.M%2C+kotlin.Function3%28%28kotlin.collections.reduceTo.K%2C+kotlin.collections.reduceTo.S%2C+kotlin.collections.reduceTo.T%2C+%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map associating the key of each group with the result of accumulating the group elements.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;各グループのキーとグループ要素の累積結果を関連付けた&lt;a href=&quot;reduce-to#kotlin.collections%24reduceTo%28kotlin.collections.Grouping%28%28kotlin.collections.reduceTo.T%2C+kotlin.collections.reduceTo.K%29%29%2C+kotlin.collections.reduceTo.M%2C+kotlin.Function3%28%28kotlin.collections.reduceTo.K%2C+kotlin.collections.reduceTo.S%2C+kotlin.collections.reduceTo.T%2C+%29%29%29%2Fdestination&quot;&gt;宛先&lt;/a&gt;マップを&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="6d4a378a10b965ebe2f261cbc1dd494566ffb215" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the destination map.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;目的地マップを&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="3ffdb26837bd49ca6323472de0c0724c658f82b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the element from the set equal to element, or &lt;code&gt;null&lt;/code&gt; if no such element found.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;セットと等しい要素から要素を&lt;strong&gt;返し&lt;/strong&gt; &lt;code&gt;null&lt;/code&gt; 。そのような要素が見つからない場合はnullを&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="6300c053d377865c4d06fbe7cdc2058630e2ced5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the element previously at the specified position.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;以前に指定された位置にある要素を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4b6efc09075ed5094d13d36ec3f3ad9b32b91055" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the element that has been removed.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;削除された要素を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="382bba963167e06f2f03ca507ecf8dcb8a28e37c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the entire content of this file as a String.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;このファイルのコンテンツ全体を文字列として&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="758a96abb0c21b8ac3df91694c8e0d2aa00171a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the entire content of this file as a byte array.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;このファイルのコンテンツ全体をバイト配列として&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="09490c594c8cba913ada9f3b5e30e509ed11661a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the execution result of &lt;a href=&quot;consume#kotlin.native.concurrent.Future%24consume%28kotlin.Function1%28%28kotlin.native.concurrent.Future.T%2C+kotlin.native.concurrent.Future.consume.R%29%29%29%2Fcode&quot;&gt;code&lt;/a&gt; consumed future's computaiton</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;未来の計算で消費された&lt;a href=&quot;consume#kotlin.native.concurrent.Future%24consume%28kotlin.Function1%28%28kotlin.native.concurrent.Future.T%2C+kotlin.native.concurrent.Future.consume.R%29%29%29%2Fcode&quot;&gt;コード&lt;/a&gt;の実行結果を&lt;strong&gt;返す&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cbf69a9f8d5e44e4110ffc060bd8888111cfb959" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the future with the computation result of &lt;a href=&quot;execute#kotlin.native.concurrent.Worker%24execute%28kotlin.native.concurrent.TransferMode%2C+kotlin.Function0%28%28kotlin.native.concurrent.Worker.execute.T1%29%29%2C+kotlin.Function1%28%28kotlin.native.concurrent.Worker.execute.T1%2C+kotlin.native.concurrent.Worker.execute.T2%29%29%29%2Fjob&quot;&gt;job&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;&lt;a href=&quot;execute#kotlin.native.concurrent.Worker%24execute%28kotlin.native.concurrent.TransferMode%2C+kotlin.Function0%28%28kotlin.native.concurrent.Worker.execute.T1%29%29%2C+kotlin.Function1%28%28kotlin.native.concurrent.Worker.execute.T1%2C+kotlin.native.concurrent.Worker.execute.T2%29%29%29%2Fjob&quot;&gt;ジョブの&lt;/a&gt;計算結果で未来を&lt;strong&gt;返す&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cf37076c8aa3610a021ccc6077cc4a6b7e081332" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the index of the element with the specified &lt;a href=&quot;binary-search-by#kotlin.collections%24binarySearchBy%28kotlin.collections.List%28%28kotlin.collections.binarySearchBy.T%29%29%2C+kotlin.collections.binarySearchBy.K%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.binarySearchBy.T%2C+kotlin.collections.binarySearchBy.K%29%29%29%2Fkey&quot;&gt;key&lt;/a&gt;, if it is contained in the list within the specified range; otherwise, the inverted insertion point &lt;code&gt;(-insertion point - 1)&lt;/code&gt;. The insertion point is defined as the index at which the element should be inserted, so that the list (or the specified subrange of list) still remains sorted.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;指定された範囲内のリストに含まれている場合、指定された&lt;a href=&quot;binary-search-by#kotlin.collections%24binarySearchBy%28kotlin.collections.List%28%28kotlin.collections.binarySearchBy.T%29%29%2C+kotlin.collections.binarySearchBy.K%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.binarySearchBy.T%2C+kotlin.collections.binarySearchBy.K%29%29%29%2Fkey&quot;&gt;キーを&lt;/a&gt;持つ要素のインデックスを&lt;strong&gt;返し&lt;/strong&gt;ます。それ以外の場合は、反転挿入ポイント &lt;code&gt;(-insertion point - 1)&lt;/code&gt; 。挿入ポイントは、要素が挿入されるインデックスとして定義されるため、リスト（またはリストの指定されたサブ範囲）はソートされたままになります。</target>
        </trans-unit>
        <trans-unit id="1a9e803d777b9557c6245e5dedc04acbbb5d503c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the index of the element, if it is contained in the array within the specified range; otherwise, the inverted insertion point &lt;code&gt;(-insertion point - 1)&lt;/code&gt;. The insertion point is defined as the index at which the element should be inserted, so that the array (or the specified subrange of array) still remains sorted according to the specified &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.Array%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+java.util.Comparator%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%29%2Fcomparator&quot;&gt;comparator&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;指定された範囲内の配列に含まれている場合、要素のインデックスを&lt;strong&gt;返し&lt;/strong&gt;ます。それ以外の場合は、反転挿入ポイント &lt;code&gt;(-insertion point - 1)&lt;/code&gt; 。挿入ポイントは、要素が挿入されるインデックスとして定義されるため、配列（または配列の指定されたサブ範囲）は、指定された&lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.Array%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+java.util.Comparator%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%29%2Fcomparator&quot;&gt;コンパレータ&lt;/a&gt;に従ってソートされたままになります。</target>
        </trans-unit>
        <trans-unit id="775f5fbcf66d03b13237514b6f1147dc2657d711" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the index of the element, if it is contained in the array within the specified range; otherwise, the inverted insertion point &lt;code&gt;(-insertion point - 1)&lt;/code&gt;. The insertion point is defined as the index at which the element should be inserted, so that the array (or the specified subrange of array) still remains sorted.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;指定された範囲内の配列に含まれている場合、要素のインデックスを&lt;strong&gt;返し&lt;/strong&gt;ます。それ以外の場合は、反転挿入ポイント &lt;code&gt;(-insertion point - 1)&lt;/code&gt; 。挿入ポイントは、要素（または指定された配列のサブ範囲）がソートされたままになるように、要素が挿入されるインデックスとして定義されます。</target>
        </trans-unit>
        <trans-unit id="4012a5fc0b31f5f794d06557456223ca53026758" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the index of the element, if it is contained in the list within the specified range; otherwise, the inverted insertion point &lt;code&gt;(-insertion point - 1)&lt;/code&gt;. The insertion point is defined as the index at which the element should be inserted, so that the list (or the specified subrange of list) still remains sorted according to the specified &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+kotlin.Comparator%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%29%2Fcomparator&quot;&gt;comparator&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;指定された範囲内のリストに含まれている場合は、要素のインデックスを&lt;strong&gt;返し&lt;/strong&gt;ます。それ以外の場合は、反転挿入ポイント &lt;code&gt;(-insertion point - 1)&lt;/code&gt; 。挿入ポイントは、要素が挿入されるインデックスとして定義されるため、リスト（またはリストの指定されたサブ範囲）は、指定された&lt;a href=&quot;binary-search#kotlin.collections%24binarySearch%28kotlin.collections.List%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.collections.binarySearch.T%2C+kotlin.Comparator%28%28kotlin.collections.binarySearch.T%29%29%2C+kotlin.Int%2C+kotlin.Int%29%2Fcomparator&quot;&gt;コンパレータ&lt;/a&gt;に従ってソートされたままになります。</target>
        </trans-unit>
        <trans-unit id="abae2c4f17052a4b6d596da5189044e957f8c2d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the index of the element, if it is contained in the list within the specified range; otherwise, the inverted insertion point &lt;code&gt;(-insertion point - 1)&lt;/code&gt;. The insertion point is defined as the index at which the element should be inserted, so that the list (or the specified subrange of list) still remains sorted.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;指定された範囲内のリストに含まれている場合は、要素のインデックスを&lt;strong&gt;返し&lt;/strong&gt;ます。それ以外の場合は、反転挿入ポイント &lt;code&gt;(-insertion point - 1)&lt;/code&gt; 。挿入ポイントは、要素が挿入されるインデックスとして定義されるため、リスト（またはリストの指定されたサブ範囲）はソートされたままになります。</target>
        </trans-unit>
        <trans-unit id="e5fe5f925a5408c0d4452496efd7d3368efdf5a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the index of the found element, if it is contained in the list within the specified range; otherwise, the inverted insertion point &lt;code&gt;(-insertion point - 1)&lt;/code&gt;. The insertion point is defined as the index at which the element should be inserted, so that the list (or the specified subrange of list) still remains sorted.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;指定された範囲内のリストに含まれている場合、見つかった要素のインデックスを&lt;strong&gt;返し&lt;/strong&gt;ます。それ以外の場合は、反転挿入ポイント &lt;code&gt;(-insertion point - 1)&lt;/code&gt; 。挿入ポイントは、要素が挿入されるインデックスとして定義されるため、リスト（またはリストの指定されたサブ範囲）はソートされたままになります。</target>
        </trans-unit>
        <trans-unit id="41464353a5432abc68472aa43a87fd4510b66d44" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the line read or &lt;code&gt;null&lt;/code&gt; if the input stream is redirected to a file and the end of file has been reached.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;読み込まれた行を&lt;strong&gt;返す&lt;/strong&gt;か、入力ストリームがファイルにリダイレクトされ、ファイルの終わりに達した場合は &lt;code&gt;null&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="00abd1476dcc6800f13251d34e163fce122295c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the new value</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;新しい値を&lt;strong&gt;返し&lt;/strong&gt;ます</target>
        </trans-unit>
        <trans-unit id="a73dc1ce77b3bdfeac35c82c9879a06dd45e6a03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the object itself</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;オブジェクト自体を&lt;strong&gt;返す&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="db93ac379ad2f180bcdfb49bb7c431587be8eb18" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the old value</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;古い値を&lt;strong&gt;返し&lt;/strong&gt;ます</target>
        </trans-unit>
        <trans-unit id="821843a1f954a65c716e7255aeb29be633cee248" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the previous value associated with the key, or &lt;code&gt;null&lt;/code&gt; if the key was not present in the map.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;キーに関連付けられた以前の値を&lt;strong&gt;返し&lt;/strong&gt;ます。キーがマップに存在しなかった場合は &lt;code&gt;null&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="adc207d839de621d9c31c133016cf8005e9b9252" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the previous value corresponding to the key.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;キーに対応する前の値を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="77648af26f413a409abe1497f04a2604b578679d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the property value.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;プロパティ値を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b34b5d7fb86e6028af57a8267e0f39b46a7b3497" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the result of &lt;a href=&quot;use#kotlin%24use%28kotlin.use.T%2C+kotlin.Function1%28%28kotlin.use.T%2C+kotlin.use.R%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; function invoked on this resource.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;このリソースで呼び出された&lt;a href=&quot;use#kotlin%24use%28kotlin.use.T%2C+kotlin.Function1%28%28kotlin.use.T%2C+kotlin.use.R%29%29%29%2Fblock&quot;&gt;ブロック&lt;/a&gt;関数の結果を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="bca380295624f3c8e722370e31c8fa7de0db445a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the result of &lt;a href=&quot;use#kotlin.io%24use%28kotlin.io.use.T%2C+kotlin.Function1%28%28kotlin.io.use.T%2C+kotlin.io.use.R%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; function invoked on this resource.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;このリソースで呼び出された&lt;a href=&quot;use#kotlin.io%24use%28kotlin.io.use.T%2C+kotlin.Function1%28%28kotlin.io.use.T%2C+kotlin.io.use.R%29%29%29%2Fblock&quot;&gt;ブロック&lt;/a&gt;関数の結果を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="ee7c24babc900efa5939c997b50c0afd279e1935" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the return value of the action.</source>
          <target state="translated">&lt;strong&gt;戻る&lt;/strong&gt;アクションの戻り値を。</target>
        </trans-unit>
        <trans-unit id="9acb31899c688723a198db0fea2351bf1f0c8851" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the string representation</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;文字列表現を&lt;strong&gt;返す&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7f1084fcaa9cd90ed762eab06c702383411ffc60" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the string representation of this object</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;このオブジェクトの文字列表現を&lt;strong&gt;返し&lt;/strong&gt;ます</target>
        </trans-unit>
        <trans-unit id="f76c792698e8a436238db69e950de4a32eeed2ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the string with corresponding file content.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;対応するファイルの内容を含む文字列を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="d71dec34f7b948fa103ad12f043f524e474772ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the value returned by &lt;a href=&quot;use-lines#kotlin.io%24useLines%28java.io.File%2C+java.nio.charset.Charset%2C+kotlin.Function1%28%28kotlin.sequences.Sequence%28%28kotlin.String%29%29%2C+kotlin.io.useLines.T%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;戻り&lt;/strong&gt;によって返された値&lt;a href=&quot;use-lines#kotlin.io%24useLines%28java.io.File%2C+java.nio.charset.Charset%2C+kotlin.Function1%28%28kotlin.sequences.Sequence%28%28kotlin.String%29%29%2C+kotlin.io.useLines.T%29%29%29%2Fblock&quot;&gt;のブロックを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2880c5e8f0aa4a6d8cef3a6f0ea6a2ff942c56c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; the value returned by &lt;a href=&quot;use-lines#kotlin.io%24useLines%28java.io.Reader%2C+kotlin.Function1%28%28kotlin.sequences.Sequence%28%28kotlin.String%29%29%2C+kotlin.io.useLines.T%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;戻り&lt;/strong&gt;によって返された値&lt;a href=&quot;use-lines#kotlin.io%24useLines%28java.io.Reader%2C+kotlin.Function1%28%28kotlin.sequences.Sequence%28%28kotlin.String%29%29%2C+kotlin.io.useLines.T%29%29%29%2Fblock&quot;&gt;のブロックを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="877b5cecaa2b252b9ab89b3416e672326a38f4a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; this element</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;この要素を&lt;strong&gt;返す&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="34c508021b5caa10d465c47f4cb1ab0f113c6cf9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; this value if it's greater than or equal to the &lt;a href=&quot;coerce-at-least#kotlin.ranges%24coerceAtLeast%28kotlin.Byte%2C+kotlin.Byte%29%2FminimumValue&quot;&gt;minimumValue&lt;/a&gt; or the &lt;a href=&quot;coerce-at-least#kotlin.ranges%24coerceAtLeast%28kotlin.Byte%2C+kotlin.Byte%29%2FminimumValue&quot;&gt;minimumValue&lt;/a&gt; otherwise.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;この値が&lt;a href=&quot;coerce-at-least#kotlin.ranges%24coerceAtLeast%28kotlin.Byte%2C+kotlin.Byte%29%2FminimumValue&quot;&gt;minimumValue&lt;/a&gt;以上の場合はこの値を&lt;strong&gt;返し&lt;/strong&gt;、そうでない場合は&lt;a href=&quot;coerce-at-least#kotlin.ranges%24coerceAtLeast%28kotlin.Byte%2C+kotlin.Byte%29%2FminimumValue&quot;&gt;minimumValueを返し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="61f5cd39885c1dc01b3d067d16a029be90fbaafa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; this value if it's greater than or equal to the &lt;a href=&quot;coerce-at-least#kotlin.ranges%24coerceAtLeast%28kotlin.UInt%2C+kotlin.UInt%29%2FminimumValue&quot;&gt;minimumValue&lt;/a&gt; or the &lt;a href=&quot;coerce-at-least#kotlin.ranges%24coerceAtLeast%28kotlin.UInt%2C+kotlin.UInt%29%2FminimumValue&quot;&gt;minimumValue&lt;/a&gt; otherwise.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;この値が&lt;a href=&quot;coerce-at-least#kotlin.ranges%24coerceAtLeast%28kotlin.UInt%2C+kotlin.UInt%29%2FminimumValue&quot;&gt;minimumValue&lt;/a&gt;以上の場合はこの値を&lt;strong&gt;返し&lt;/strong&gt;、そうでない場合は&lt;a href=&quot;coerce-at-least#kotlin.ranges%24coerceAtLeast%28kotlin.UInt%2C+kotlin.UInt%29%2FminimumValue&quot;&gt;minimumValueを返し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="eebc7780d22e4143183c2a2547d4154da295f048" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; this value if it's greater than or equal to the &lt;a href=&quot;coerce-at-least#kotlin.ranges%24coerceAtLeast%28kotlin.ranges.coerceAtLeast.T%2C+kotlin.ranges.coerceAtLeast.T%29%2FminimumValue&quot;&gt;minimumValue&lt;/a&gt; or the &lt;a href=&quot;coerce-at-least#kotlin.ranges%24coerceAtLeast%28kotlin.ranges.coerceAtLeast.T%2C+kotlin.ranges.coerceAtLeast.T%29%2FminimumValue&quot;&gt;minimumValue&lt;/a&gt; otherwise.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;この値が&lt;a href=&quot;coerce-at-least#kotlin.ranges%24coerceAtLeast%28kotlin.ranges.coerceAtLeast.T%2C+kotlin.ranges.coerceAtLeast.T%29%2FminimumValue&quot;&gt;minimumValue&lt;/a&gt;以上の場合はこの値を&lt;strong&gt;返し&lt;/strong&gt;、そうでない場合は&lt;a href=&quot;coerce-at-least#kotlin.ranges%24coerceAtLeast%28kotlin.ranges.coerceAtLeast.T%2C+kotlin.ranges.coerceAtLeast.T%29%2FminimumValue&quot;&gt;minimumValueを返し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="ef4840ed80dd804ff3a5986cc974374069431a7c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; this value if it's in the &lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.Int%2C+kotlin.ranges.ClosedRange%28%28kotlin.Int%29%29%29%2Frange&quot;&gt;range&lt;/a&gt;, or &lt;code&gt;range.start&lt;/code&gt; if this value is less than &lt;code&gt;range.start&lt;/code&gt;, or &lt;code&gt;range.endInclusive&lt;/code&gt; if this value is greater than &lt;code&gt;range.endInclusive&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;戻る&lt;/strong&gt;ことがでいた場合、この値を&lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.Int%2C+kotlin.ranges.ClosedRange%28%28kotlin.Int%29%29%29%2Frange&quot;&gt;範囲&lt;/a&gt;、または &lt;code&gt;range.start&lt;/code&gt; この値未満であれば &lt;code&gt;range.start&lt;/code&gt; 、または &lt;code&gt;range.endInclusive&lt;/code&gt; この値がより大きい場合 &lt;code&gt;range.endInclusive&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d381ed6089bee31cf9657f7884d7cd800b684ae8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; this value if it's in the &lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.UInt%2C+kotlin.ranges.ClosedRange%28%28kotlin.UInt%29%29%29%2Frange&quot;&gt;range&lt;/a&gt;, or &lt;code&gt;range.start&lt;/code&gt; if this value is less than &lt;code&gt;range.start&lt;/code&gt;, or &lt;code&gt;range.endInclusive&lt;/code&gt; if this value is greater than &lt;code&gt;range.endInclusive&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;戻る&lt;/strong&gt;ことがでいた場合、この値を&lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.UInt%2C+kotlin.ranges.ClosedRange%28%28kotlin.UInt%29%29%29%2Frange&quot;&gt;範囲&lt;/a&gt;、または &lt;code&gt;range.start&lt;/code&gt; この値未満であれば &lt;code&gt;range.start&lt;/code&gt; 、または &lt;code&gt;range.endInclusive&lt;/code&gt; この値がより大きい場合 &lt;code&gt;range.endInclusive&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8b9c6f76a81b7e32cbeffeef005b9ae1f6e6dd9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; this value if it's in the &lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.ranges.coerceIn.T%2C+kotlin.ranges.ClosedFloatingPointRange%28%28kotlin.ranges.coerceIn.T%29%29%29%2Frange&quot;&gt;range&lt;/a&gt;, or &lt;code&gt;range.start&lt;/code&gt; if this value is less than &lt;code&gt;range.start&lt;/code&gt;, or &lt;code&gt;range.endInclusive&lt;/code&gt; if this value is greater than &lt;code&gt;range.endInclusive&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;戻る&lt;/strong&gt;ことがでいた場合、この値を&lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.ranges.coerceIn.T%2C+kotlin.ranges.ClosedFloatingPointRange%28%28kotlin.ranges.coerceIn.T%29%29%29%2Frange&quot;&gt;範囲&lt;/a&gt;、または &lt;code&gt;range.start&lt;/code&gt; この値未満であれば &lt;code&gt;range.start&lt;/code&gt; 、または &lt;code&gt;range.endInclusive&lt;/code&gt; この値がより大きい場合 &lt;code&gt;range.endInclusive&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fde12900ed9a027692d5c5cf119165bf6b3ecab3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; this value if it's in the &lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.ranges.coerceIn.T%2C+kotlin.ranges.ClosedRange%28%28kotlin.ranges.coerceIn.T%29%29%29%2Frange&quot;&gt;range&lt;/a&gt;, or &lt;code&gt;range.start&lt;/code&gt; if this value is less than &lt;code&gt;range.start&lt;/code&gt;, or &lt;code&gt;range.endInclusive&lt;/code&gt; if this value is greater than &lt;code&gt;range.endInclusive&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;戻る&lt;/strong&gt;ことがでいた場合、この値を&lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.ranges.coerceIn.T%2C+kotlin.ranges.ClosedRange%28%28kotlin.ranges.coerceIn.T%29%29%29%2Frange&quot;&gt;範囲&lt;/a&gt;、または &lt;code&gt;range.start&lt;/code&gt; この値未満であれば &lt;code&gt;range.start&lt;/code&gt; 、または &lt;code&gt;range.endInclusive&lt;/code&gt; この値がより大きい場合 &lt;code&gt;range.endInclusive&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b9021d0804acac0d3fc3135ad5a9f3e1ffebbb5e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; this value if it's in the range, or &lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.Byte%2C+kotlin.Byte%2C+kotlin.Byte%29%2FminimumValue&quot;&gt;minimumValue&lt;/a&gt; if this value is less than &lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.Byte%2C+kotlin.Byte%2C+kotlin.Byte%29%2FminimumValue&quot;&gt;minimumValue&lt;/a&gt;, or &lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.Byte%2C+kotlin.Byte%2C+kotlin.Byte%29%2FmaximumValue&quot;&gt;maximumValue&lt;/a&gt; if this value is greater than &lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.Byte%2C+kotlin.Byte%2C+kotlin.Byte%29%2FmaximumValue&quot;&gt;maximumValue&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;戻る&lt;/strong&gt;それは範囲内だ、または場合は、この値を&lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.Byte%2C+kotlin.Byte%2C+kotlin.Byte%29%2FminimumValue&quot;&gt;最小値&lt;/a&gt;この値未満である場合に&lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.Byte%2C+kotlin.Byte%2C+kotlin.Byte%29%2FminimumValue&quot;&gt;最小値&lt;/a&gt;、または&lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.Byte%2C+kotlin.Byte%2C+kotlin.Byte%29%2FmaximumValue&quot;&gt;最大値&lt;/a&gt;この値がより大きければ&lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.Byte%2C+kotlin.Byte%2C+kotlin.Byte%29%2FmaximumValue&quot;&gt;最大値&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3ddf39adfe81fd55eda220beedb1ee0d92394473" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; this value if it's in the range, or &lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.UInt%29%2FminimumValue&quot;&gt;minimumValue&lt;/a&gt; if this value is less than &lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.UInt%29%2FminimumValue&quot;&gt;minimumValue&lt;/a&gt;, or &lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.UInt%29%2FmaximumValue&quot;&gt;maximumValue&lt;/a&gt; if this value is greater than &lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.UInt%29%2FmaximumValue&quot;&gt;maximumValue&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;戻る&lt;/strong&gt;それは範囲内だ、または場合は、この値を&lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.UInt%29%2FminimumValue&quot;&gt;最小値&lt;/a&gt;この値未満である場合に&lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.UInt%29%2FminimumValue&quot;&gt;最小値&lt;/a&gt;、または&lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.UInt%29%2FmaximumValue&quot;&gt;最大値&lt;/a&gt;この値がより大きければ&lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.UInt%29%2FmaximumValue&quot;&gt;最大値&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="da8513adee04030a29903e7fe3e8de8a045fa249" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; this value if it's in the range, or &lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.ranges.coerceIn.T%2C+kotlin.ranges.coerceIn.T%2C+kotlin.ranges.coerceIn.T%29%2FminimumValue&quot;&gt;minimumValue&lt;/a&gt; if this value is less than &lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.ranges.coerceIn.T%2C+kotlin.ranges.coerceIn.T%2C+kotlin.ranges.coerceIn.T%29%2FminimumValue&quot;&gt;minimumValue&lt;/a&gt;, or &lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.ranges.coerceIn.T%2C+kotlin.ranges.coerceIn.T%2C+kotlin.ranges.coerceIn.T%29%2FmaximumValue&quot;&gt;maximumValue&lt;/a&gt; if this value is greater than &lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.ranges.coerceIn.T%2C+kotlin.ranges.coerceIn.T%2C+kotlin.ranges.coerceIn.T%29%2FmaximumValue&quot;&gt;maximumValue&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;戻る&lt;/strong&gt;それは範囲内だ、または場合は、この値を&lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.ranges.coerceIn.T%2C+kotlin.ranges.coerceIn.T%2C+kotlin.ranges.coerceIn.T%29%2FminimumValue&quot;&gt;最小値&lt;/a&gt;この値未満である場合に&lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.ranges.coerceIn.T%2C+kotlin.ranges.coerceIn.T%2C+kotlin.ranges.coerceIn.T%29%2FminimumValue&quot;&gt;最小値&lt;/a&gt;、または&lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.ranges.coerceIn.T%2C+kotlin.ranges.coerceIn.T%2C+kotlin.ranges.coerceIn.T%29%2FmaximumValue&quot;&gt;最大値&lt;/a&gt;この値がより大きければ&lt;a href=&quot;coerce-in#kotlin.ranges%24coerceIn%28kotlin.ranges.coerceIn.T%2C+kotlin.ranges.coerceIn.T%2C+kotlin.ranges.coerceIn.T%29%2FmaximumValue&quot;&gt;最大値&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e6a83b42e6b05aeb66ee3667c04847973894c21f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; this value if it's less than or equal to the &lt;a href=&quot;coerce-at-most#kotlin.ranges%24coerceAtMost%28kotlin.Byte%2C+kotlin.Byte%29%2FmaximumValue&quot;&gt;maximumValue&lt;/a&gt; or the &lt;a href=&quot;coerce-at-most#kotlin.ranges%24coerceAtMost%28kotlin.Byte%2C+kotlin.Byte%29%2FmaximumValue&quot;&gt;maximumValue&lt;/a&gt; otherwise.</source>
          <target state="translated">&lt;strong&gt;戻る&lt;/strong&gt;それ未満か等しいだ場合は、この値を&lt;a href=&quot;coerce-at-most#kotlin.ranges%24coerceAtMost%28kotlin.Byte%2C+kotlin.Byte%29%2FmaximumValue&quot;&gt;最大値&lt;/a&gt;または&lt;a href=&quot;coerce-at-most#kotlin.ranges%24coerceAtMost%28kotlin.Byte%2C+kotlin.Byte%29%2FmaximumValue&quot;&gt;最大値&lt;/a&gt;そう。</target>
        </trans-unit>
        <trans-unit id="415d71faaefdfb66496a4853672627b7685ce559" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; this value if it's less than or equal to the &lt;a href=&quot;coerce-at-most#kotlin.ranges%24coerceAtMost%28kotlin.UInt%2C+kotlin.UInt%29%2FmaximumValue&quot;&gt;maximumValue&lt;/a&gt; or the &lt;a href=&quot;coerce-at-most#kotlin.ranges%24coerceAtMost%28kotlin.UInt%2C+kotlin.UInt%29%2FmaximumValue&quot;&gt;maximumValue&lt;/a&gt; otherwise.</source>
          <target state="translated">&lt;strong&gt;戻る&lt;/strong&gt;それ未満か等しいだ場合は、この値を&lt;a href=&quot;coerce-at-most#kotlin.ranges%24coerceAtMost%28kotlin.UInt%2C+kotlin.UInt%29%2FmaximumValue&quot;&gt;最大値&lt;/a&gt;または&lt;a href=&quot;coerce-at-most#kotlin.ranges%24coerceAtMost%28kotlin.UInt%2C+kotlin.UInt%29%2FmaximumValue&quot;&gt;最大値&lt;/a&gt;そう。</target>
        </trans-unit>
        <trans-unit id="69d49b427f4b8356fa72b73c611ce111cfb6a3cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; this value if it's less than or equal to the &lt;a href=&quot;coerce-at-most#kotlin.ranges%24coerceAtMost%28kotlin.ranges.coerceAtMost.T%2C+kotlin.ranges.coerceAtMost.T%29%2FmaximumValue&quot;&gt;maximumValue&lt;/a&gt; or the &lt;a href=&quot;coerce-at-most#kotlin.ranges%24coerceAtMost%28kotlin.ranges.coerceAtMost.T%2C+kotlin.ranges.coerceAtMost.T%29%2FmaximumValue&quot;&gt;maximumValue&lt;/a&gt; otherwise.</source>
          <target state="translated">&lt;strong&gt;戻る&lt;/strong&gt;それ未満か等しいだ場合は、この値を&lt;a href=&quot;coerce-at-most#kotlin.ranges%24coerceAtMost%28kotlin.ranges.coerceAtMost.T%2C+kotlin.ranges.coerceAtMost.T%29%2FmaximumValue&quot;&gt;最大値&lt;/a&gt;または&lt;a href=&quot;coerce-at-most#kotlin.ranges%24coerceAtMost%28kotlin.ranges.coerceAtMost.T%2C+kotlin.ranges.coerceAtMost.T%29%2FmaximumValue&quot;&gt;最大値&lt;/a&gt;そう。</target>
        </trans-unit>
        <trans-unit id="5c8431565522e77a3743ab915e75ae2d663f2102" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; true if at least one class has been added</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;少なくとも1つのクラスが追加されている場合はtrueを&lt;strong&gt;返し&lt;/strong&gt;ます</target>
        </trans-unit>
        <trans-unit id="ba374a632414a5a25926a487aeef7318cc5fb558" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; true if at least one class has been removed</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;少なくとも1つのクラスが削除されている場合はtrueを&lt;strong&gt;返し&lt;/strong&gt;ます</target>
        </trans-unit>
        <trans-unit id="30e4762dc58a5633f80c7697f27bcefe43ab3e6c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; true if entry was removed</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;エントリが削除された場合はtrueを&lt;strong&gt;返し&lt;/strong&gt;ます</target>
        </trans-unit>
        <trans-unit id="3e6a957e507bed24c04bb61e27887d53c7358b5e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; true if given object is null or frozen or permanent</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;指定されたオブジェクトがnull、フリーズ、または永続的な場合はtrueを&lt;strong&gt;返し&lt;/strong&gt;ます</target>
        </trans-unit>
        <trans-unit id="b696d4da0033f420d47d1bbedf50dfb69ddf49f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; true if successful</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;成功した場合はtrueを&lt;strong&gt;返し&lt;/strong&gt;ます</target>
        </trans-unit>
        <trans-unit id="8ed7c973c8bac9c74625fcc690e56d86eafdab1d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; true if successful, false if state is unchanged</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;成功した場合はtrue、状態が変更されていない場合はfalseを&lt;strong&gt;返し&lt;/strong&gt;ます</target>
        </trans-unit>
        <trans-unit id="4e5ff674d3474482f3927b47d78b290b63a5dbc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; true, if &lt;a href=&quot;equals#kotlin.collections.AbstractList%24equals%28kotlin.Any%29%2Fother&quot;&gt;other&lt;/a&gt; instance is a &lt;a href=&quot;../-list/index#kotlin.collections.List&quot;&gt;List&lt;/a&gt; of the same size, which contains the same elements in the same order.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;&lt;a href=&quot;equals#kotlin.collections.AbstractList%24equals%28kotlin.Any%29%2Fother&quot;&gt;他の&lt;/a&gt;インスタンスが同じ要素を同じ順序で含む同じサイズの&lt;a href=&quot;../-list/index#kotlin.collections.List&quot;&gt;リスト&lt;/a&gt;である場合、trueを&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="f2be18c39993e6037706a6b885d4b7f44d25972d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; true, if &lt;a href=&quot;equals#kotlin.collections.AbstractMap%24equals%28kotlin.Any%29%2Fother&quot;&gt;other&lt;/a&gt; instance is a &lt;a href=&quot;../-map/index#kotlin.collections.Map&quot;&gt;Map&lt;/a&gt; of the same size, all entries of which are contained in the &lt;a href=&quot;../-map/entries#kotlin.collections.Map%24entries&quot;&gt;entries&lt;/a&gt; set of this map.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;&lt;a href=&quot;equals#kotlin.collections.AbstractMap%24equals%28kotlin.Any%29%2Fother&quot;&gt;他の&lt;/a&gt;インスタンスが同じサイズの&lt;a href=&quot;../-map/index#kotlin.collections.Map&quot;&gt;マップ&lt;/a&gt;であり、そのすべてのエントリがこのマップの&lt;a href=&quot;../-map/entries#kotlin.collections.Map%24entries&quot;&gt;エントリ&lt;/a&gt;セットに含まれている場合、trueを&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="450a7bd83d6731d062006a06f22ecda84bb1eee0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; true, if &lt;a href=&quot;equals#kotlin.collections.AbstractMutableList%24equals%28kotlin.Any%29%2Fother&quot;&gt;other&lt;/a&gt; instance is a &lt;a href=&quot;../-list/index#kotlin.collections.List&quot;&gt;List&lt;/a&gt; of the same size, which contains the same elements in the same order.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;&lt;a href=&quot;equals#kotlin.collections.AbstractMutableList%24equals%28kotlin.Any%29%2Fother&quot;&gt;他の&lt;/a&gt;インスタンスが同じ要素を同じ順序で含む同じサイズの&lt;a href=&quot;../-list/index#kotlin.collections.List&quot;&gt;リスト&lt;/a&gt;である場合、trueを&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="1abd8ec71f7e048bc1e62d45b940a3252b3d95c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt; true, if &lt;a href=&quot;equals#kotlin.collections.AbstractSet%24equals%28kotlin.Any%29%2Fother&quot;&gt;other&lt;/a&gt; instance is a &lt;a href=&quot;../-set/index#kotlin.collections.Set&quot;&gt;Set&lt;/a&gt; of the same size, all elements of which are contained in this set.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;&lt;a href=&quot;equals#kotlin.collections.AbstractSet%24equals%28kotlin.Any%29%2Fother&quot;&gt;他の&lt;/a&gt;インスタンスが同じサイズの&lt;a href=&quot;../-set/index#kotlin.collections.Set&quot;&gt;セット&lt;/a&gt;であり、そのすべての要素がこのセットに含まれている場合、trueを&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="2f66e4f342e15e2c15a2c5623cf2e4761faf96ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;a href=&quot;../next-bytes#kotlin.random.Random%24nextBytes%28kotlin.ByteArray%29%2Farray&quot;&gt;array&lt;/a&gt; filled with random bytes.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;ランダムなバイトで満たされた&lt;a href=&quot;../next-bytes#kotlin.random.Random%24nextBytes%28kotlin.ByteArray%29%2Farray&quot;&gt;配列を&lt;/a&gt;&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b294601359b4f3d4c119ed3e5632a8f9d0da298e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;a href=&quot;../next-bytes#kotlin.random.Random%24nextBytes%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Int%29%2Farray&quot;&gt;array&lt;/a&gt; with the subrange filled with random bytes.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;ランダムなバイトで満たされた部分範囲を持つ&lt;a href=&quot;../next-bytes#kotlin.random.Random%24nextBytes%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Int%29%2Farray&quot;&gt;配列&lt;/a&gt;を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b508d54df04997a543b4f5556270eb1d055da965" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;a href=&quot;next-bytes#kotlin.random.Random%24nextBytes%28kotlin.ByteArray%29%2Farray&quot;&gt;array&lt;/a&gt; filled with random bytes.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;ランダムなバイトで満たされた&lt;a href=&quot;next-bytes#kotlin.random.Random%24nextBytes%28kotlin.ByteArray%29%2Farray&quot;&gt;配列を&lt;/a&gt;&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="d033dd5199671de0a3537e5f40b076e61d09144c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;a href=&quot;next-bytes#kotlin.random.Random%24nextBytes%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Int%29%2Farray&quot;&gt;array&lt;/a&gt; with the subrange filled with random bytes.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;ランダムなバイトで満たされた部分範囲を持つ&lt;a href=&quot;next-bytes#kotlin.random.Random%24nextBytes%28kotlin.ByteArray%2C+kotlin.Int%2C+kotlin.Int%29%2Farray&quot;&gt;配列&lt;/a&gt;を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="bab424612c2630fa157f921952352b21b3e669be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;a href=&quot;next-u-bytes#kotlin.random%24nextUBytes%28kotlin.random.Random%2C+kotlin.UByteArray%29%2Farray&quot;&gt;array&lt;/a&gt; filled with random bytes.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;ランダムなバイトで満たされた&lt;a href=&quot;next-u-bytes#kotlin.random%24nextUBytes%28kotlin.random.Random%2C+kotlin.UByteArray%29%2Farray&quot;&gt;配列を&lt;/a&gt;&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="a906e2a8cc578bed0acb2898690e9a676315ea74" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;a href=&quot;next-u-bytes#kotlin.random%24nextUBytes%28kotlin.random.Random%2C+kotlin.UByteArray%2C+kotlin.Int%2C+kotlin.Int%29%2Farray&quot;&gt;array&lt;/a&gt; with the subrange filled with random bytes.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;ランダムなバイトで満たされた部分範囲を持つ&lt;a href=&quot;next-u-bytes#kotlin.random%24nextUBytes%28kotlin.random.Random%2C+kotlin.UByteArray%2C+kotlin.Int%2C+kotlin.Int%29%2Farray&quot;&gt;配列&lt;/a&gt;を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="9b06b8e30941a46203783fa2263dcc56803e210d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;false&lt;/code&gt; if the copying was terminated, &lt;code&gt;true&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;コピーが終了した場合は &lt;code&gt;false&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;、それ以外の場合は &lt;code&gt;true&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="d85c6a1f6c8ee5b0b19cbadfd01fe4cef34ffe32" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; because the list is always modified as the result of this operation.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;この操作の結果としてリストが常に変更されるため、 &lt;code&gt;true&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="e99d6b7092ed9791a108813e7dd62b6bfd4c4564" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if any element was removed from the collection, &lt;code&gt;false&lt;/code&gt; if the collection was not modified.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;コレクションから要素が削除された場合は &lt;code&gt;true&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;、コレクションが変更されなかった場合は &lt;code&gt;false&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="eda7d2731274f6578b2d790d945d3f173dc467a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if any of the specified elements was added to the collection, &lt;code&gt;false&lt;/code&gt; if the collection was not modified.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;指定された要素のいずれかがコレクションに追加された場合は &lt;code&gt;true&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;、コレクションが変更されなかった場合は &lt;code&gt;false&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="c0914dec855b485e9447591d8b1d2ea762e7b625" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if any of the specified elements was removed from the collection, &lt;code&gt;false&lt;/code&gt; if the collection was not modified.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;指定された要素のいずれかがコレクションから削除された場合は &lt;code&gt;true&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;、コレクションが変更されなかった場合は &lt;code&gt;false&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4085e70ac8e0a282f24db18b8e39ab9afbcd3c90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if the element has been added, &lt;code&gt;false&lt;/code&gt; if the collection does not support duplicates and the element is already contained in the collection.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;要素が追加されている場合は &lt;code&gt;true&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;、コレクションが重複をサポートせず、要素がすでにコレクションに含まれている場合は &lt;code&gt;false&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="7c693fb6263911181b9191c3e80cefdba651bbc0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if the element has been added, &lt;code&gt;false&lt;/code&gt; if the element is already contained in the set.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;要素が追加されている場合は &lt;code&gt;true&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;、要素がすでにセットに含まれている場合は &lt;code&gt;false&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="be16cec8a6f631c29ffef54f22443552439f434d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if the element has been successfully removed; &lt;code&gt;false&lt;/code&gt; if it was not present in the collection.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;要素が正常に削除された場合は &lt;code&gt;true&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;ます。コレクションに存在しなかった場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="521a23e654976973f6c980fa65c69b6e1aba2f07" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if the file or directory is successfully deleted, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;ファイルまたはディレクトリが正常に削除された場合は &lt;code&gt;true&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="941a19bf827b2a2218dcdc25ef7e7c2983c7316b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if the list was changed as the result of the operation.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;操作の結果としてリストが変更された場合は &lt;code&gt;true&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="6dbadcd982d0682b5671bd12c74a9d49f1990220" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this path ends with &lt;a href=&quot;ends-with#kotlin.io%24endsWith%28java.io.File%2C+java.io.File%29%2Fother&quot;&gt;other&lt;/a&gt; path, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;このパスが&lt;a href=&quot;ends-with#kotlin.io%24endsWith%28java.io.File%2C+java.io.File%29%2Fother&quot;&gt;他の&lt;/a&gt;パスで終わる場合は &lt;code&gt;true&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="eceac9e8b9c56bf2844532ab7d9c753f88314b2f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this path ends with &lt;a href=&quot;ends-with#kotlin.io%24endsWith%28java.io.File%2C+kotlin.String%29%2Fother&quot;&gt;other&lt;/a&gt; path, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;このパスが&lt;a href=&quot;ends-with#kotlin.io%24endsWith%28java.io.File%2C+kotlin.String%29%2Fother&quot;&gt;他の&lt;/a&gt;パスで終わる場合は &lt;code&gt;true&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="ee6bf65ee9c660d8514a3a0e20e62b59d46c4af1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this path starts with &lt;a href=&quot;starts-with#kotlin.io%24startsWith%28java.io.File%2C+java.io.File%29%2Fother&quot;&gt;other&lt;/a&gt; path, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;このパスが&lt;a href=&quot;starts-with#kotlin.io%24startsWith%28java.io.File%2C+java.io.File%29%2Fother&quot;&gt;他の&lt;/a&gt;パスで始まる場合は &lt;code&gt;true&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="1e53e313286086d837575656b1cdb53b2d001f2b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt;, if &lt;a href=&quot;equals#kotlin.collections.AbstractMutableSet%24equals%28kotlin.Any%29%2Fother&quot;&gt;other&lt;/a&gt; instance is a &lt;a href=&quot;../-set/index#kotlin.collections.Set&quot;&gt;Set&lt;/a&gt; of the same size, all elements of which are contained in this set.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;&lt;a href=&quot;equals#kotlin.collections.AbstractMutableSet%24equals%28kotlin.Any%29%2Fother&quot;&gt;他の&lt;/a&gt;インスタンスが同じサイズの&lt;a href=&quot;../-set/index#kotlin.collections.Set&quot;&gt;セット&lt;/a&gt;であり、そのすべての要素がこのセットに含まれている場合、 &lt;code&gt;true&lt;/code&gt; を&lt;strong&gt;返し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="368c7c8580df5fcb5fb1ce96a7ec159ad5e111f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Scalability&lt;/strong&gt;: Kotlin's support for &lt;a href=&quot;coroutines-overview&quot;&gt;coroutines&lt;/a&gt; helps build server-side applications that scale to massive numbers of clients with modest hardware requirements.</source>
          <target state="translated">&lt;strong&gt;スケーラビリティ&lt;/strong&gt;：&lt;a href=&quot;coroutines-overview&quot;&gt;コルーチンのコルーチン&lt;/a&gt;のサポートにより、適度なハードウェア要件で膨大な数のクライアントに対応するサーバー側アプリケーションを構築できます。</target>
        </trans-unit>
        <trans-unit id="aba4f52264f8c7fb90641546ceab5aa6ef0435aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See Also&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;こちらもご覧ください&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5da23d00148c01b92b2648ebc9d47a24327f6f9c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Setter&lt;/strong&gt; if set to &lt;code&gt;true&lt;/code&gt;, suppresses JVM access checks for this callable object. For a property, both accessors are made accessible.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt; &lt;code&gt;true&lt;/code&gt; に設定されている場合、&lt;strong&gt;セッター&lt;/strong&gt;は、この呼び出し可能オブジェクトのJVMアクセスチェックを抑制します。プロパティの場合、両方のアクセサーがアクセス可能になります。</target>
        </trans-unit>
        <trans-unit id="a7b3df1e654a6e942881d7f23a5dd9163acdc64a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: Kotlin 1.3 discontinues the following deprecated binary artifacts:</source>
          <target state="translated">&lt;strong&gt;短い要約&lt;/strong&gt;：Kotlin 1.3は、以下の非推奨のバイナリアーティファクトを廃止します。</target>
        </trans-unit>
        <trans-unit id="0ee7a8bec6eac07ada028775fbc0f024763bf715" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: Kotlin 1.3 removes annotations from the package &lt;code&gt;org.jetbrains.annotations&lt;/code&gt; from stdlib and moves them to the separate artifacts shipped with the compiler: &lt;code&gt;annotations-13.0.jar&lt;/code&gt; and &lt;code&gt;mutability-annotations-compat.jar&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;簡単な要約&lt;/strong&gt;：Kotlin 1.3は、stdlibから &lt;code&gt;org.jetbrains.annotations&lt;/code&gt; パッケージから注釈を削除し、それらをコンパイラーに付属する個別のアーティファクト（ &lt;code&gt;annotations-13.0.jar&lt;/code&gt; および &lt;code&gt;mutability-annotations-compat.jar&lt;/code&gt; )に移動します。</target>
        </trans-unit>
        <trans-unit id="659a889770132f3b0feeaebd5b13b9345beab732" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: a smartcast on a member of one enum entry will be correctly applied to only this enum entry</source>
          <target state="translated">&lt;strong&gt;短い要約&lt;/strong&gt;：1つのenumエントリのメンバーのスマートキャストは、このenumエントリのみに正しく適用されます</target>
        </trans-unit>
        <trans-unit id="e4ed1ce28abf7c2908a12450ad4a20d59301ac2b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: errors in getter-target annotations will be reported properly in 1.3</source>
          <target state="translated">&lt;strong&gt;短い要約&lt;/strong&gt;：ゲッターターゲットアノテーションのエラーは1.3で正しく報告されます</target>
        </trans-unit>
        <trans-unit id="30f95d257cce069a40e0b758b5bce0880b543c01" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: evaluation order with respect to class initialization is changed in 1.3</source>
          <target state="translated">&lt;strong&gt;短い要約&lt;/strong&gt;：クラスの初期化に関する評価順序が1.3で変更されました</target>
        </trans-unit>
        <trans-unit id="cb5039733125761c8239ceec59a4f67ec35c203e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: getter-target annotations on annotations constructor parameters will be properly written to classfiles in 1.3</source>
          <target state="translated">&lt;strong&gt;短い要約&lt;/strong&gt;：アノテーションコンストラクタパラメータのゲッターターゲットアノテーションは、1.3のクラスファイルに適切に書き込まれます</target>
        </trans-unit>
        <trans-unit id="9a298a201b00abaeb62424fe5b38ab40d7cdf657" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: if an expression in for-loop range is a local variable updated in a loop body, this change affects loop execution. This is inconsistent with iterating over other containers, such as ranges, character sequences, and collections.</source>
          <target state="translated">&lt;strong&gt;短い要約&lt;/strong&gt;：forループ範囲の式がループ本体で更新されるローカル変数である場合、この変更はループの実行に影響します。これは、範囲、文字シーケンス、コレクションなどの他のコンテナの繰り返し処理と矛盾します。</target>
        </trans-unit>
        <trans-unit id="2a94db9866ff1d98a5e2105675817dabc0de5b17" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: in Kotlin 1.3, assigning single element to vararg is deprecated and should be replaced with consecutive spread and array construction.</source>
          <target state="translated">&lt;strong&gt;短い要約&lt;/strong&gt;：Kotlin 1.3では、varargへの単一の要素の割り当ては非推奨であり、連続的なスプレッドと配列の構築に置き換える必要があります。</target>
        </trans-unit>
        <trans-unit id="f789fff8850846faf65297cd9d5db55b6e891536" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: nullability assertions for Java-types annotated with not-null annotations will be generated more aggressively, causing code which passes &lt;code&gt;null&lt;/code&gt; here to fail faster.</source>
          <target state="translated">&lt;strong&gt;短い要約&lt;/strong&gt;：not-nullアノテーションで注釈が付けられたJavaタイプのnull可能性アサーションはより積極的に生成され、ここで &lt;code&gt;null&lt;/code&gt; を渡すコードがより速く失敗します。</target>
        </trans-unit>
        <trans-unit id="0790dd4b65c702a13059dd52c6010990cf99139f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: reassignment of the backing field of &lt;code&gt;val&lt;/code&gt;-property in its getter is now prohibited</source>
          <target state="translated">&lt;strong&gt;短い要約&lt;/strong&gt;：ゲッターでの &lt;code&gt;val&lt;/code&gt; プロパティのバッキングフィールドの再割り当ては禁止されました</target>
        </trans-unit>
        <trans-unit id="4ea0777c773b37a77ac450057f510d49b9f1cb32" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3 declaration of &lt;code&gt;mod&lt;/code&gt; operator is prohibited, as well as calls which resolve to such declarations</source>
          <target state="translated">&lt;strong&gt;要約&lt;/strong&gt;：Kotlin 1.3以降では &lt;code&gt;mod&lt;/code&gt; 演算子の宣言は禁止されており、そのような宣言を解決する呼び出しも禁止されています</target>
        </trans-unit>
        <trans-unit id="45036e88dcdf5c6c484175995dc3c64aa4c1a8aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3 local annotation classes are not supported</source>
          <target state="translated">&lt;strong&gt;短い要約&lt;/strong&gt;：Kotlin 1.3以降、ローカル注釈クラスはサポートされていません</target>
        </trans-unit>
        <trans-unit id="c4b03bea8c917ba8281ac12cba32cd7a5af14ba0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3 smartcasts on local delegated properties are not allowed</source>
          <target state="translated">&lt;strong&gt;短い要約&lt;/strong&gt;：ローカル委任されたプロパティでのKotlin 1.3スマートキャストは許可されていません</target>
        </trans-unit>
        <trans-unit id="d47f9e57b901e028b4815e78b12d5f6d1a456eb4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3, data classes are prohibited to override &lt;code&gt;copy()&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;短い要約&lt;/strong&gt;：Kotlin 1.3以降、データクラスは &lt;code&gt;copy()&lt;/code&gt; をオーバーライドすることが禁止されています</target>
        </trans-unit>
        <trans-unit id="9875f45a55dbc71204e25a03adacf85e874bd3d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3, ensure that the &lt;code&gt;toIndex&lt;/code&gt; argument of &lt;code&gt;Array.copyOfRange&lt;/code&gt;, which represents the exclusive end of the range being copied, is not greater than the array size and throw &lt;code&gt;IllegalArgumentException&lt;/code&gt; if it is.</source>
          <target state="translated">&lt;strong&gt;要約&lt;/strong&gt;：Kotlin 1.3以降、コピーされる範囲の排他的終了を表す &lt;code&gt;Array.copyOfRange&lt;/code&gt; の &lt;code&gt;toIndex&lt;/code&gt; 引数が配列サイズより大きくないことを確認し、そうである場合は &lt;code&gt;IllegalArgumentException&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="c85212b875bd3c20f73f2ebcc84885e20fcf7f17" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3, error about wrong annotation target will be properly reported when annotation with target &lt;code&gt;PARAMETER&lt;/code&gt; is applied to parameter's type</source>
          <target state="translated">&lt;strong&gt;簡単な要約&lt;/strong&gt;：Kotlin 1.3以降、ターゲット &lt;code&gt;PARAMETER&lt;/code&gt; を持つアノテーションがパラメーターのタイプに適用されると、間違ったアノテーションターゲットに関するエラーが適切に報告されます</target>
        </trans-unit>
        <trans-unit id="bf69aecb16d88c150cceda726ac8fdd9b8a437a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3, inner classes are not allowed to inherit &lt;code&gt;Throwable&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;短い要約&lt;/strong&gt;：Kotlin 1.3以降、内部クラスは &lt;code&gt;Throwable&lt;/code&gt; を継承できません</target>
        </trans-unit>
        <trans-unit id="408307590ffce3274f1ed85ddb1ed0ca1ea12b03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3, make sure &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;count&lt;/code&gt; and similar methods do not overflow for long sequences. See the Issue for the full list of affected methods.</source>
          <target state="translated">&lt;strong&gt;要約&lt;/strong&gt;：Kotlin 1.3以降、長いシーケンスで &lt;code&gt;index&lt;/code&gt; 、 &lt;code&gt;count&lt;/code&gt; などのメソッドがオーバーフローしないようにしてください。影響を受けるメソッドの完全なリストについては、問題を参照してください。</target>
        </trans-unit>
        <trans-unit id="ba7a0bd4ed579ebbb6934da310497aa38764dc3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3, nested classifiers (classes, object, interfaces, annotation classes, enum classes) in enum entries are prohibited</source>
          <target state="translated">&lt;strong&gt;短い要約&lt;/strong&gt;：Kotlin 1.3以降、列挙型エントリ内のネストされた分類子（クラス、オブジェクト、インターフェース、注釈クラス、列挙型クラス）は禁止されています</target>
        </trans-unit>
        <trans-unit id="f2f7b257e074a8a8fd3e28c4f3f9246cd86541d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3, only &lt;code&gt;SOURCE&lt;/code&gt; retention is allowed for annotations with target &lt;code&gt;EXPRESSION&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;簡単な要約&lt;/strong&gt;：Kotlin 1.3以降、ターゲットの &lt;code&gt;EXPRESSION&lt;/code&gt; を持つアノテーションでは &lt;code&gt;SOURCE&lt;/code&gt; リテンションのみが許可されます</target>
        </trans-unit>
        <trans-unit id="81f515e78c6041ef53594b1a17dd05e48bede5ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3, prohibit step value for integer progressions being the minimum negative value of its integer type (&lt;code&gt;Long&lt;/code&gt; or &lt;code&gt;Int&lt;/code&gt;), so that calling &lt;code&gt;IntProgression.fromClosedRange(0, 1, step = Int.MIN_VALUE)&lt;/code&gt; will throw &lt;code&gt;IllegalArgumentException&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;短い要約&lt;/strong&gt;：Kotlin 1.3以降、整数の進行のステップ値をその整数型（ &lt;code&gt;Long&lt;/code&gt; または &lt;code&gt;Int&lt;/code&gt; ）の最小の負の値にすることを禁止します。これにより、 &lt;code&gt;IntProgression.fromClosedRange(0, 1, step = Int.MIN_VALUE)&lt;/code&gt; を呼び出すと &lt;code&gt;IllegalArgumentException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="63da536ad803e75f1e57970ba0d317e351a3f5bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3, rules of visibility by short names are stricter for complex class hierarchies involving companion objects and nested classifiers.</source>
          <target state="translated">&lt;strong&gt;短い要約&lt;/strong&gt;：Kotlin 1.3以降、コンパニオンオブジェクトとネストされた分類子を含む複雑なクラス階層では、短い名前による可視性のルールがより厳しくなっています。</target>
        </trans-unit>
        <trans-unit id="6cc8e0cd30c4e9a6b4d5761550cefe94ffda129a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3, setting non-constant values as vararg annotation parameters is prohibited</source>
          <target state="translated">&lt;strong&gt;短い要約&lt;/strong&gt;：Kotlin 1.3以降、定数でない値を可変引数注釈パラメーターとして設定することは禁止されています</target>
        </trans-unit>
        <trans-unit id="ddaa338ce4bcf1b6176f1ca2bdbaf24a2d43fb82" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3, unify behavior of &lt;code&gt;split&lt;/code&gt; method by empty match regex across all platforms</source>
          <target state="translated">&lt;strong&gt;要約&lt;/strong&gt;：Kotlin 1.3以降、すべてのプラットフォームで空の一致正規表現を使用して、 &lt;code&gt;split&lt;/code&gt; メソッドの動作を統一します</target>
        </trans-unit>
        <trans-unit id="b3d48e0508d5a3312f1e060e051f6acb179d93d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Since&lt;/strong&gt; JDK 1.8</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;JDK 1.8 &lt;strong&gt;以降&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b5b1cb482aa105b0904961b456ea52c857a321c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Source&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Source&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8146f1ee5c295c4989c6751eed8a133b33324203" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Stable Incremental Releases (SIR)&lt;/strong&gt;: incremental releases are fully compatible, only optimizations and bug fixes happen. Any changes can be made in a &lt;a href=&quot;kotlin-evolution#feature-releases-and-incremental-releases&quot;&gt;feature release&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;安定した増分リリース（SIR）&lt;/strong&gt;：増分リリースは完全に互換性があり、最適化とバグ修正のみが行われます。&lt;a href=&quot;kotlin-evolution#feature-releases-and-incremental-releases&quot;&gt;機能リリース&lt;/a&gt;で変更を加えることができます。</target>
        </trans-unit>
        <trans-unit id="fafc0b1a9daa3668df46e9f30358b04853e27ffe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Status Entered at version&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;バージョンで入力されたステータス&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="37761219bd6b77fdffd94b251cc357d512620f32" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table of contents&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;目次&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9c4a46ba94390494470065adf7e6b2f83d2ff2b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The context object&lt;/strong&gt; is available as a receiver (&lt;code&gt;this&lt;/code&gt;). &lt;strong&gt;The return value&lt;/strong&gt; is the lambda result.</source>
          <target state="translated">&lt;strong&gt;コンテキストオブジェクト&lt;/strong&gt;は、レシーバー（ &lt;code&gt;this&lt;/code&gt; ）として使用できます。&lt;strong&gt;戻り値&lt;/strong&gt;はラムダ結果です。</target>
        </trans-unit>
        <trans-unit id="88215a82c793e942d2af897c557ba7684fa2ef06" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The context object&lt;/strong&gt; is available as a receiver (&lt;code&gt;this&lt;/code&gt;). &lt;strong&gt;The return value&lt;/strong&gt; is the object itself.</source>
          <target state="translated">&lt;strong&gt;コンテキストオブジェクト&lt;/strong&gt;は、レシーバー（ &lt;code&gt;this&lt;/code&gt; ）として使用できます。&lt;strong&gt;戻り値&lt;/strong&gt;はオブジェクト自体です。</target>
        </trans-unit>
        <trans-unit id="54de5f5c6c58d16df4367451081909208a5bcc0d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The context object&lt;/strong&gt; is available as an argument (&lt;code&gt;it&lt;/code&gt;). &lt;strong&gt;The return value&lt;/strong&gt; is the lambda result.</source>
          <target state="translated">&lt;strong&gt;コンテキストオブジェクト&lt;/strong&gt;は、引数（ &lt;code&gt;it&lt;/code&gt; ）として使用できます。&lt;strong&gt;戻り値&lt;/strong&gt;はラムダ結果です。</target>
        </trans-unit>
        <trans-unit id="953fcac7a2079b358a15b4680c6c75014d93ef81" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The context object&lt;/strong&gt; is available as an argument (&lt;code&gt;it&lt;/code&gt;). &lt;strong&gt;The return value&lt;/strong&gt; is the object itself.</source>
          <target state="translated">&lt;strong&gt;コンテキストオブジェクト&lt;/strong&gt;は、引数（ &lt;code&gt;it&lt;/code&gt; ）として使用できます。&lt;strong&gt;戻り値&lt;/strong&gt;はオブジェクト自体です。</target>
        </trans-unit>
        <trans-unit id="5871a70d1e542e89b7ab8b15ac3cc3874a37b906" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tooling&lt;/strong&gt;: In addition to great IDE support in general, Kotlin offers framework-specific tooling (for example, for Spring) in the plugin for IntelliJ IDEA Ultimate.</source>
          <target state="translated">&lt;strong&gt;ツール&lt;/strong&gt;：一般的な優れたIDEサポートに加えて、KotlinはIntelliJ IDEA Ultimateのプラグインでフレームワーク固有のツール（たとえば、Spring用）を提供します。</target>
        </trans-unit>
        <trans-unit id="71c5bff736c57fab5798aafd2d132e3b32e00919" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;UMD&lt;/strong&gt; tries to unify both models allowing these to be used either on the client or server.</source>
          <target state="translated">&lt;strong&gt;UMD&lt;/strong&gt;は両方のモデルの統合を試み、これらをクライアントまたはサーバーで使用できるようにします。</target>
        </trans-unit>
        <trans-unit id="c728986c73dfcd4771f2e125c05c49b6de5d4c6e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Working with server-side technology&lt;/strong&gt;. You can use Kotlin to interact with server-side JavaScript such as Node.js</source>
          <target state="translated">&lt;strong&gt;サーバー側のテクノロジーを使用する&lt;/strong&gt;。Kotlinを使用して、Node.jsなどのサーバーサイドJavaScriptを操作できます。</target>
        </trans-unit>
        <trans-unit id="1573775a40b4413b43276a7869672eadf61c04d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;foo.klib&lt;/strong&gt; when unpacked as &lt;strong&gt;foo/&lt;/strong&gt; gives us:</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;foo /&lt;/strong&gt;としてアンパックすると、&lt;strong&gt;foo.klib&lt;/strong&gt;は次のようになります。</target>
        </trans-unit>
        <trans-unit id="bf94185ef76323dec09fef0cbf20c3d5c523700f" translate="yes" xml:space="preserve">
          <source>@&lt;a href=&quot;index&quot;&gt;JvmDefault&lt;/a&gt; methods are excluded from interface delegation.</source>
          <target state="translated">@&lt;a href=&quot;index&quot;&gt;JvmDefault&lt;/a&gt; methods are excluded from interface delegation.</target>
        </trans-unit>
        <trans-unit id="a85269ecc4d736bf7f756267a46b4cd70390de5b" translate="yes" xml:space="preserve">
          <source>@JvmDefault</source>
          <target state="translated">@JvmDefault</target>
        </trans-unit>
        <trans-unit id="38367cdaa4e817128dc323103f0d5c6a9b4d10f0" translate="yes" xml:space="preserve">
          <source>@JvmStatic and @JvmField in companion of interfaces</source>
          <target state="translated">@JvmStatic and @JvmField in companion of interfaces</target>
        </trans-unit>
        <trans-unit id="93e9ecea8983e2a8a6ac905cc55324675716b123" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;#setting-up-targets&quot;&gt;target&lt;/a&gt; is a part of the build that is responsible for building, testing, and packaging a complete piece of software for one of the platforms. Therefore, a multiplatform project usually contains multiple targets.</source>
          <target state="translated">&lt;a href=&quot;#setting-up-targets&quot;&gt;ターゲットは&lt;/a&gt;、ビルドのテスト、およびプラットフォームのいずれかのソフトウェアの完全な作品をパッケージ化するための責任があるビルドの一部です。したがって、通常、マルチプラットフォームプロジェクトには複数のターゲットが含まれます。</target>
        </trans-unit>
        <trans-unit id="8b697eb28e0477b9900378779138d85233522e5d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../-future-state/index&quot;&gt;FutureState&lt;/a&gt; of this future</source>
          <target state="translated">&lt;a href=&quot;../-future-state/index&quot;&gt;FutureState&lt;/a&gt;この将来の</target>
        </trans-unit>
        <trans-unit id="25026241e77cf4069930d2a81998f1ff17f630fd" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel/index.html&quot;&gt;Channel&lt;/a&gt; is conceptually very similar to &lt;code&gt;BlockingQueue&lt;/code&gt;. One key difference is that instead of a blocking &lt;code&gt;put&lt;/code&gt; operation it has a suspending &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/send.html&quot;&gt;send&lt;/a&gt;, and instead of a blocking &lt;code&gt;take&lt;/code&gt; operation it has a suspending &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/receive.html&quot;&gt;receive&lt;/a&gt;.</source>
          <target state="translated">A &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel/index.html&quot;&gt;チャンネルは、&lt;/a&gt;概念的に非常によく似ている &lt;code&gt;BlockingQueue&lt;/code&gt; 。主な違いの1つは、ブロッキングの &lt;code&gt;put&lt;/code&gt; 操作の代わりに&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/send.html&quot;&gt;送信&lt;/a&gt;の中断があり、 &lt;code&gt;take&lt;/code&gt; のブロック操作の代わりに&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/receive.html&quot;&gt;受信&lt;/a&gt;の中断があることです。</target>
        </trans-unit>
        <trans-unit id="b58e2f469b88e2806e3ea71b6dc650ab9d539789" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;index&quot;&gt;Grouping&lt;/a&gt; structure serves as an intermediate step in group-and-fold operations: they group elements by their keys and then fold each group with some aggregating operation.</source>
          <target state="translated">&lt;a href=&quot;index&quot;&gt;グループ化&lt;/a&gt;構造は、グループおよび倍演算における中間ステップとして役立つ：それらそれらのキーによって族元素とは、いくつかの集計操作で各グループを折ります。</target>
        </trans-unit>
        <trans-unit id="335776bae2e0bd7845875238ad8bcbd05a6733c6" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;properties#late-initialized-properties-and-variables&quot;&gt;late-initialized&lt;/a&gt; property in an object or a companion object has a static backing field with the same visibility as the property setter.</source>
          <target state="translated">&lt;a href=&quot;properties#late-initialized-properties-and-variables&quot;&gt;後半の初期化&lt;/a&gt;オブジェクトまたはコンパニオンオブジェクトのプロパティは、プロパティのセッターと同じ可視性を持つ静的なバッキングフィールドを持っています。</target>
        </trans-unit>
        <trans-unit id="8a131d6c33e43901a9e73e6d096d64a24f2b4bf6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;for&lt;/code&gt; loop over a range or an array is compiled to an index-based loop that does not create an iterator object.</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; 範囲または配列に対するループはイテレータオブジェクトを作成できませんインデックスベースのループにコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="5eba7bd06ba05689a35417f4a2d10cd2c5491c37" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;break&lt;/em&gt; qualified with a label jumps to the execution point right after the loop marked with that label. A &lt;em&gt;continue&lt;/em&gt; proceeds to the next iteration of that loop.</source>
          <target state="translated">&lt;em&gt;ブレーク&lt;/em&gt;ラベルを持つ資格は右、そのラベルの付いたループの後に実行ポイントにジャンプします。Aは&lt;em&gt;引き続き&lt;/em&gt;そのループの次の繰り返しに進みます。</target>
        </trans-unit>
        <trans-unit id="810ff113834a8301e08e007d7f4d97785fa7d41b" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;common&lt;/em&gt; module contains code that is not specific to any platform, as well as declarations without implementation of platform-dependent APIs.</source>
          <target state="translated">&lt;em&gt;一般的な&lt;/em&gt;モジュールは、プラットフォーム依存のAPIを実装することなく、任意のプラットフォームに固有のないコード、ならびに宣言を含んでいます。</target>
        </trans-unit>
        <trans-unit id="8f2cbebae11ba3ce0b4a055abc4e44e360c81202" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;mutable&lt;/em&gt; interface that extends the corresponding read-only interface with write operations: adding, removing, and updating its elements.</source>
          <target state="translated">対応する読み取り専用インターフェースを、書き込み操作（要素の追加、削除、更新）で拡張する&lt;em&gt;変更可能な&lt;/em&gt;インターフェース。</target>
        </trans-unit>
        <trans-unit id="33e051bd23939b7cc0237b3b6664b35b7845b6d9" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;platform&lt;/em&gt; module contains implementations of platform-dependent declarations in the common module for a specific platform, as well as other platform-dependent code.</source>
          <target state="translated">&lt;em&gt;プラットフォーム&lt;/em&gt;モジュールは、特定のプラットフォーム用の共通モジュールにプラットフォーム依存の宣言、ならびに他のプラットフォームに依存するコードの実装を含んでいます。</target>
        </trans-unit>
        <trans-unit id="95129f3c56e36bede13a9f1dc15ab985f6e80cf9" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;read-only&lt;/em&gt; interface that provides operations for accessing collection elements.</source>
          <target state="translated">コレクション要素にアクセスするための操作を提供する&lt;em&gt;読み取り専用&lt;/em&gt;インターフェース。</target>
        </trans-unit>
        <trans-unit id="da52eb5eec241d05137b0082a603533ac5d1c95c" translate="yes" xml:space="preserve">
          <source>A Basic Kotlin/Native Application</source>
          <target state="translated">Kotlin/ネイティブアプリケーションの基本</target>
        </trans-unit>
        <trans-unit id="45fdff9421f438f4d7095c3e89f7e8657a2e2d21" translate="yes" xml:space="preserve">
          <source>A Comparator that orders strings ignoring character case.</source>
          <target state="translated">文字の大文字小文字を無視して文字列を発注するコンパレータです。</target>
        </trans-unit>
        <trans-unit id="b8368fc3f88edc8b7307923a1672190efe58c88b" translate="yes" xml:space="preserve">
          <source>A Kotlin property is compiled to the following Java elements:</source>
          <target state="translated">Kotlinプロパティは、以下のJava要素にコンパイルされています。</target>
        </trans-unit>
        <trans-unit id="52912edb0637c5b19a657c18414f717688261523" translate="yes" xml:space="preserve">
          <source>A Kotlin source set is a collection of Kotlin sources, along with their resources, dependencies, and language settings, which may take part in Kotlin compilations of one or more &lt;a href=&quot;#setting-up-targets&quot;&gt;targets&lt;/a&gt;.</source>
          <target state="translated">Kotlinソースセットは、リソース、依存関係、言語設定を含むKotlinソースのコレクションであり、1つまたは複数の&lt;a href=&quot;#setting-up-targets&quot;&gt;ターゲットの&lt;/a&gt; Kotlinコンパイルに参加できます。</target>
        </trans-unit>
        <trans-unit id="e9d72197be74b6ce3e9d239f43e83398938bba30" translate="yes" xml:space="preserve">
          <source>A UTF-16 &lt;em&gt;code unit&lt;/em&gt; is a 16-bit unsigned integral value that represents either one Unicode &lt;em&gt;code point&lt;/em&gt; (character code) or must be combined with another code unit to form a code unit. If this makes no sense, I strongly recommend &lt;a href=&quot;https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/&quot;&gt;Joel Spolsky's excellent essay on Unicode and its encodings&lt;/a&gt;. For most Western scripts, including English, all code points fit inside one code unit, so it's tempting to think of a code unit as a character - but that will lead astray once your code encounters non-Western scripts. A single UTF-16 code unit can be represented with single quotes, and has the type &lt;code&gt;Char&lt;/code&gt;:</source>
          <target state="translated">UTF-16 &lt;em&gt;コード単位&lt;/em&gt;は、1つのUnicode &lt;em&gt;コードポイント&lt;/em&gt;（文字コード）を表す16ビットの符号なし整数値であるか、別のコード単位と組み合わせてコード単位を形成する必要があります。これが意味をなさない場合は&lt;a href=&quot;https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/&quot;&gt;、Unicodeとそのエンコーディングに関するJoel Spolskyの優れたエッセイ&lt;/a&gt;を強くお勧めします。英語を含むほとんどの欧文スクリプトでは、すべてのコードポイントが1つのコードユニット内に収まるため、コードユニットを文字と考えたくなります。単一のUTF-16コード単位は単一引用符で表すことができ、タイプ &lt;code&gt;Char&lt;/code&gt; を持ちます。</target>
        </trans-unit>
        <trans-unit id="96c66067cd323127bbca005bcf884da823834a7c" translate="yes" xml:space="preserve">
          <source>A backing field will be generated for a property if it uses the default implementation of at least one of the accessors, or if a custom accessor references it through the &lt;code&gt;field&lt;/code&gt; identifier.</source>
          <target state="translated">プロパティが少なくとも1つのアクセサーのデフォルト実装を使用する場合、またはカスタムアクセサーが &lt;code&gt;field&lt;/code&gt; 識別子を通じてそれを参照する場合、プロパティのバッキングフィールドが生成されます。</target>
        </trans-unit>
        <trans-unit id="8ee4431e92fae7f00d11a4c7bbc04a214dd9d66e" translate="yes" xml:space="preserve">
          <source>A base class to simplify implementing iterators so that implementations only have to implement &lt;a href=&quot;-abstract-iterator/compute-next&quot;&gt;computeNext&lt;/a&gt; to implement the iterator, calling &lt;a href=&quot;-abstract-iterator/done&quot;&gt;done&lt;/a&gt; when the iteration is complete.</source>
          <target state="translated">イテレータの実装を簡素化する基本クラス。これにより、実装はイテレータを実装するために&lt;a href=&quot;-abstract-iterator/compute-next&quot;&gt;computeNext&lt;/a&gt;を実装するだけでよく、反復が完了したときに呼び出さ&lt;a href=&quot;-abstract-iterator/done&quot;&gt;れ&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="3cea63124cc4132c0ed5c37a6d8367f6e00ac701" translate="yes" xml:space="preserve">
          <source>A base class to simplify implementing iterators so that implementations only have to implement &lt;a href=&quot;../-abstract-iterator/compute-next&quot;&gt;computeNext&lt;/a&gt; to implement the iterator, calling &lt;a href=&quot;../-abstract-iterator/done&quot;&gt;done&lt;/a&gt; when the iteration is complete.</source>
          <target state="translated">イテレータの実装を簡素化する基本クラス。これにより、実装はイテレータを実装するために&lt;a href=&quot;../-abstract-iterator/compute-next&quot;&gt;computeNext&lt;/a&gt;を実装するだけでよく、反復が完了したときに呼び出さ&lt;a href=&quot;../-abstract-iterator/done&quot;&gt;れ&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="f2d9320495e89647cf476a32dde9596e3a857b4e" translate="yes" xml:space="preserve">
          <source>A base class to simplify implementing iterators so that implementations only have to implement &lt;a href=&quot;../../kotlin.collections/-abstract-iterator/compute-next&quot;&gt;computeNext&lt;/a&gt; to implement the iterator, calling &lt;a href=&quot;../../kotlin.collections/-abstract-iterator/done&quot;&gt;done&lt;/a&gt; when the iteration is complete.</source>
          <target state="translated">イテレータの実装を簡素化する基本クラス。これにより、実装はイテレータを実装するために&lt;a href=&quot;../../kotlin.collections/-abstract-iterator/compute-next&quot;&gt;computeNext&lt;/a&gt;を実装するだけでよく、反復が完了したときに呼び出さ&lt;a href=&quot;../../kotlin.collections/-abstract-iterator/done&quot;&gt;れ&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="6c00a104f4d876da7e0de80875ea0fca9e6228b1" translate="yes" xml:space="preserve">
          <source>A base class to simplify implementing iterators so that implementations only have to implement &lt;a href=&quot;compute-next&quot;&gt;computeNext&lt;/a&gt; to implement the iterator, calling &lt;a href=&quot;done&quot;&gt;done&lt;/a&gt; when the iteration is complete.</source>
          <target state="translated">イテレータの実装を簡素化する基本クラス。これにより、実装はイテレータを実装するために&lt;a href=&quot;compute-next&quot;&gt;computeNext&lt;/a&gt;を実装するだけでよく、反復が完了したときに呼び出さ&lt;a href=&quot;done&quot;&gt;れ&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="19e053ed1d26677db3c1fac7c3736abed6ea9733" translate="yes" xml:space="preserve">
          <source>A base exception class for file system exceptions.</source>
          <target state="translated">ファイルシステム例外のための基本的な例外クラスです。</target>
        </trans-unit>
        <trans-unit id="17d2682da31f89530133e0830b02d6e277febabd" translate="yes" xml:space="preserve">
          <source>A basic Kotlin/Native application</source>
          <target state="translated">基本的なKotlin/Nativeアプリケーション</target>
        </trans-unit>
        <trans-unit id="d974a0fa34d0efebf1481353e01453259f737f6f" translate="yes" xml:space="preserve">
          <source>A bound callable reference to a constructor of an &lt;a href=&quot;nested-classes#inner-classes&quot;&gt;&lt;em&gt;inner&lt;/em&gt; class&lt;/a&gt; can be obtained by providing an instance of the outer class:</source>
          <target state="translated">&lt;a href=&quot;nested-classes#inner-classes&quot;&gt;&lt;em&gt;内部&lt;/em&gt;クラスの&lt;/a&gt;コンストラクターへのバインドされた呼び出し可能な参照は、外部クラスのインスタンスを提供することによって取得できます。</target>
        </trans-unit>
        <trans-unit id="f7d449e106c2dd01f7bad1cb9f1a3185c3df00be" translate="yes" xml:space="preserve">
          <source>A bound callable reference to a member of &lt;code&gt;this&lt;/code&gt; can now be written without explicit receiver, &lt;code&gt;::foo&lt;/code&gt; instead of &lt;code&gt;this::foo&lt;/code&gt;. This also makes callable references more convenient to use in lambdas where you refer to a member of the outer receiver.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; のメンバーへのバインドされた呼び出し可能な参照は、明示的なレシーバー &lt;code&gt;::foo&lt;/code&gt; ではなく &lt;code&gt;this::foo&lt;/code&gt; ではなく書き込むことができます。これにより、外部レシーバーのメンバーを参照するラムダで呼び出し可能な参照を使用するのがより便利になります。</target>
        </trans-unit>
        <trans-unit id="af54ed951dc6c0df7451d7934b4ee5900cc312ff" translate="yes" xml:space="preserve">
          <source>A class and some of its members may be declared &lt;em&gt;abstract&lt;/em&gt;. An abstract member does not have an implementation in its class. Note that we do not need to annotate an abstract class or function with open &amp;ndash; it goes without saying.</source>
          <target state="translated">クラスとその一部のメンバーは、&lt;em&gt;抽象&lt;/em&gt;として宣言できます。抽象メンバーのクラスには実装がありません。抽象クラスまたは関数にopenで注釈を付ける必要がないことに注意してください。言うまでもありません。</target>
        </trans-unit>
        <trans-unit id="2d916b17d56fbffcf5346b00e40154040ae10b2d" translate="yes" xml:space="preserve">
          <source>A class in Kotlin can have a &lt;strong&gt;primary constructor&lt;/strong&gt; and one or more &lt;strong&gt;secondary constructors&lt;/strong&gt;. The primary constructor is part of the class header: it goes after the class name (and optional type parameters).</source>
          <target state="translated">Kotlinのクラスは、&lt;strong&gt;プライマリコンストラクター&lt;/strong&gt;と1つ以上の&lt;strong&gt;セカンダリコンストラク&lt;/strong&gt;&lt;strong&gt;ター&lt;/strong&gt;を持つことができます。プライマリコンストラクターはクラスヘッダーの一部です。クラスヘッダー（およびオプションの型パラメーター）の後に配置されます。</target>
        </trans-unit>
        <trans-unit id="2581bdce7795bc5c7972f832dbccf073db572d51" translate="yes" xml:space="preserve">
          <source>A class may be marked as &lt;em&gt;inner&lt;/em&gt; to be able to access members of outer class. Inner classes carry a reference to an object of an outer class:</source>
          <target state="translated">クラスは、外部クラスのメンバーにアクセスできるように&lt;em&gt;内部&lt;/em&gt;としてマークされる場合があります。内部クラスは外部クラスのオブジェクトへの参照を運びます：</target>
        </trans-unit>
        <trans-unit id="92d226d1baad9cba3a94880cd52b6b81a790b2eb" translate="yes" xml:space="preserve">
          <source>A class or object can implement one or more interfaces</source>
          <target state="translated">クラスまたはオブジェクトは、1 つまたは複数のインターフェイスを実装することができます。</target>
        </trans-unit>
        <trans-unit id="6255cfd7b0db95e252bcab8e422391b787945fb5" translate="yes" xml:space="preserve">
          <source>A classifier is either a class or a type parameter.</source>
          <target state="translated">分類器は、クラスまたは型パラメータのいずれかです。</target>
        </trans-unit>
        <trans-unit id="143cccd856d38d332ea2321a224af138247f001f" translate="yes" xml:space="preserve">
          <source>A collection of groups matched by the regular expression.</source>
          <target state="translated">正規表現でマッチしたグループの集合。</target>
        </trans-unit>
        <trans-unit id="eee2f18e3c71ecff01d92bb485de071476c1514d" translate="yes" xml:space="preserve">
          <source>A collection of random and frequently used idioms in Kotlin. If you have a favorite idiom, contribute it by sending a pull request.</source>
          <target state="translated">Kotlinで使われている熟語のうち、ランダムに使われている熟語を集めました。お気に入りのイディオムがあれば、プルリクエストを送って投稿してください。</target>
        </trans-unit>
        <trans-unit id="511cb0e51ab5e85b5eb1e5d405f7b137a592f5ca" translate="yes" xml:space="preserve">
          <source>A collection that holds pairs of objects (keys and values) and supports efficiently retrieving the value corresponding to each key. Map keys are unique; the map holds only one value for each key. Methods in this interface support only read-only access to the map; read-write access is supported through the &lt;a href=&quot;-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt; interface.</source>
          <target state="translated">オブジェクトのペア（キーと値）を保持し、各キーに対応する値の効率的な取得をサポートするコレクション。マップキーは一意です。マップは、キーごとに1つの値のみを保持します。このインターフェースのメソッドは、マップへの読み取り専用アクセスのみをサポートします。読み取り/書き込みアクセスは、&lt;a href=&quot;-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt;インターフェースを介してサポートされます。</target>
        </trans-unit>
        <trans-unit id="01996685e742dc461c512df4e58874c924c73fb3" translate="yes" xml:space="preserve">
          <source>A collection that holds pairs of objects (keys and values) and supports efficiently retrieving the value corresponding to each key. Map keys are unique; the map holds only one value for each key. Methods in this interface support only read-only access to the map; read-write access is supported through the &lt;a href=&quot;../-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt; interface.</source>
          <target state="translated">オブジェクトのペア（キーと値）を保持し、各キーに対応する値の効率的な取得をサポートするコレクション。マップキーは一意です。マップは、キーごとに1つの値のみを保持します。このインターフェースのメソッドは、マップへの読み取り専用アクセスのみをサポートします。読み取り/書き込みアクセスは、&lt;a href=&quot;../-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt;インターフェースを介してサポートされます。</target>
        </trans-unit>
        <trans-unit id="f85d7c05c3d6347785429ac7de5ac5f08bf6df2c" translate="yes" xml:space="preserve">
          <source>A collection that holds pairs of objects (keys and values) and supports efficiently retrieving the value corresponding to each key. Map keys are unique; the map holds only one value for each key. Methods in this interface support only read-only access to the map; read-write access is supported through the &lt;a href=&quot;../../kotlin.collections/-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt; interface.</source>
          <target state="translated">オブジェクトのペア（キーと値）を保持し、各キーに対応する値の効率的な取得をサポートするコレクション。マップキーは一意です。マップは、キーごとに1つの値のみを保持します。このインターフェースのメソッドは、マップへの読み取り専用アクセスのみをサポートします。読み取り/書き込みアクセスは、&lt;a href=&quot;../../kotlin.collections/-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt;インターフェースを介してサポートされます。</target>
        </trans-unit>
        <trans-unit id="c69b205e4aa0cebe9a9490cfb22f55fa6f540821" translate="yes" xml:space="preserve">
          <source>A collection usually contains a number of objects (this number may also be zero) of the same type. Objects in a collection are called &lt;em&gt;elements&lt;/em&gt; or &lt;em&gt;items&lt;/em&gt;. For example, all the students in a department form a collection that can be used to calculate their average age. The following collection types are relevant for Kotlin:</source>
          <target state="translated">コレクションには通常、同じタイプの多数のオブジェクト（この数はゼロの場合もあります）が含まれています。コレクション内のオブジェクトは、&lt;em&gt;要素&lt;/em&gt;または&lt;em&gt;アイテム&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。たとえば、学部のすべての学生は、平均年齢を計算するために使用できるコレクションを形成します。次のコレクションタイプはKotlinに関連しています。</target>
        </trans-unit>
        <trans-unit id="175c59b19f03ab5d1567024326bde1676fafedb1" translate="yes" xml:space="preserve">
          <source>A companion object is initialized when the class is loaded (typically the first time it's referenced by other code that is being executed), in a thread-safe manner. You can omit the name, in which case the name defaults to &lt;code&gt;Companion&lt;/code&gt;. A class can only have one companion object, and companion objects can not be nested.</source>
          <target state="translated">コンパニオンオブジェクトは、クラスが読み込まれるとき（通常は、実行されている他のコードによって初めて参照されるとき）に、スレッドセーフな方法で初期化されます。名前は省略できます。この場合、名前はデフォルトで &lt;code&gt;Companion&lt;/code&gt; になります。クラスは1つのコンパニオンオブジェクトしか持つことができず、コンパニオンオブジェクトはネストできません。</target>
        </trans-unit>
        <trans-unit id="43e56b8e00aa559396d1d511bf9a35cc2360f667" translate="yes" xml:space="preserve">
          <source>A compilation can interact with several native libraries. Interoperability with each of them can be configured in the &lt;code&gt;cinterops&lt;/code&gt; block of the compilation:</source>
          <target state="translated">コンパイルは、いくつかのネイティブライブラリと相互作用できます。それらのそれぞれとの相互運用性は、コンパイルの &lt;code&gt;cinterops&lt;/code&gt; ブロックで構成できます。</target>
        </trans-unit>
        <trans-unit id="f6495f45d3fda071f57e947dd220c2660ee90f5d" translate="yes" xml:space="preserve">
          <source>A constant holding the &quot;not a number&quot; value of Double.</source>
          <target state="translated">Doubleの「数ではない」値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="30692a914f3e7f3ae14fe112947452531613b0bd" translate="yes" xml:space="preserve">
          <source>A constant holding the &quot;not a number&quot; value of Float.</source>
          <target state="translated">Floatの「数値ではない」値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="eb6d02a80c28dde3d1c7927befecdfe1f558438e" translate="yes" xml:space="preserve">
          <source>A constant holding the largest positive finite value of Double.</source>
          <target state="translated">Doubleの最大の正の有限値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="2989475e6cbce89ab970feadcd9e679867516672" translate="yes" xml:space="preserve">
          <source>A constant holding the largest positive finite value of Float.</source>
          <target state="translated">Floatの最大の正の有限値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="9deb57dbacb37ea84980557ec3676888a4dd8cd7" translate="yes" xml:space="preserve">
          <source>A constant holding the maximum value an instance of Byte can have.</source>
          <target state="translated">Byteのインスタンスが持つことのできる最大値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="e9237724f82c02a362d8804f1d73d8111b1e5de4" translate="yes" xml:space="preserve">
          <source>A constant holding the maximum value an instance of Int can have.</source>
          <target state="translated">Intのインスタンスが持つことのできる最大値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="880d96fa44a753baecc4838563508808066ea7c7" translate="yes" xml:space="preserve">
          <source>A constant holding the maximum value an instance of Long can have.</source>
          <target state="translated">Longのインスタンスが持つことのできる最大値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="6a5ae584582a42ae1892a5735c2c49965bffbc8c" translate="yes" xml:space="preserve">
          <source>A constant holding the maximum value an instance of Short can have.</source>
          <target state="translated">Shortのインスタンスが持つことのできる最大値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="89c142885f7633d7c3f1e70f3b5624b1ce064ec8" translate="yes" xml:space="preserve">
          <source>A constant holding the maximum value an instance of UByte can have.</source>
          <target state="translated">UByteのインスタンスが持つことのできる最大値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="eaa523f900a184b2b64e09c8a0475f7fa4930003" translate="yes" xml:space="preserve">
          <source>A constant holding the maximum value an instance of UInt can have.</source>
          <target state="translated">UIntのインスタンスが持つことのできる最大値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="9692fe911e65777a2c7cfd9a9e8400f4bc8ea057" translate="yes" xml:space="preserve">
          <source>A constant holding the maximum value an instance of ULong can have.</source>
          <target state="translated">ULongのインスタンスが持つことのできる最大値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="9bebce3b30412feff7d8abce8c3364be5cc0cdbb" translate="yes" xml:space="preserve">
          <source>A constant holding the maximum value an instance of UShort can have.</source>
          <target state="translated">UShortのインスタンスが持つことができる最大値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="bee42d0098fafd184e2e83397f1d2a513cb2d77e" translate="yes" xml:space="preserve">
          <source>A constant holding the minimum value an instance of Byte can have.</source>
          <target state="translated">Byteのインスタンスが持つことができる最小値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="d58d9f259e307998f48730c6b7fbe854067f6bfd" translate="yes" xml:space="preserve">
          <source>A constant holding the minimum value an instance of Int can have.</source>
          <target state="translated">Intのインスタンスが持つことのできる最小値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="c6e578e54d55eab5518b163f87c31c1201e72d84" translate="yes" xml:space="preserve">
          <source>A constant holding the minimum value an instance of Long can have.</source>
          <target state="translated">Longのインスタンスが持つことができる最小値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="868ab3bc40bc62a822c10b5833cc89e85a51628a" translate="yes" xml:space="preserve">
          <source>A constant holding the minimum value an instance of Short can have.</source>
          <target state="translated">Shortのインスタンスが持つことができる最小値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="ccf44b38400048d909e04005a6fd563ac0bb50fd" translate="yes" xml:space="preserve">
          <source>A constant holding the minimum value an instance of UByte can have.</source>
          <target state="translated">UByteのインスタンスが持つことのできる最小値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="4a3b6e9f1701d7413715273c33ae58e20aab5bf6" translate="yes" xml:space="preserve">
          <source>A constant holding the minimum value an instance of UInt can have.</source>
          <target state="translated">UIntのインスタンスが持つことのできる最小値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="3d6d20e63abee79a15d65601c3502054a1bbe849" translate="yes" xml:space="preserve">
          <source>A constant holding the minimum value an instance of ULong can have.</source>
          <target state="translated">ULongのインスタンスが持つことができる最小値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="c1175037c9a4f35c03e808e0f86cd92e217f15b6" translate="yes" xml:space="preserve">
          <source>A constant holding the minimum value an instance of UShort can have.</source>
          <target state="translated">UShortのインスタンスが持つことができる最小値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="8544ed9c53cc314b5929a7e498f12172f1de72c6" translate="yes" xml:space="preserve">
          <source>A constant holding the negative infinity value of Double.</source>
          <target state="translated">ダブルの負の無限大値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="b5a021a6628a66324280168a3ef6aeab4793ae7a" translate="yes" xml:space="preserve">
          <source>A constant holding the negative infinity value of Float.</source>
          <target state="translated">Floatの負の無限大値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="dc990a7b75c1fc62fc79ffba1be1662475beb71c" translate="yes" xml:space="preserve">
          <source>A constant holding the positive infinity value of Double.</source>
          <target state="translated">ダブルの正の無限大値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="5a802ddd44d12a1f97ea67dc5856ed6b496d2f0c" translate="yes" xml:space="preserve">
          <source>A constant holding the positive infinity value of Float.</source>
          <target state="translated">Floatの正の無限大値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="fa8e069cbd16134923ae756d8c767a97045aa38a" translate="yes" xml:space="preserve">
          <source>A constant holding the smallest &lt;em&gt;positive&lt;/em&gt; nonzero value of Double.</source>
          <target state="translated">Doubleのゼロ以外の&lt;em&gt;正&lt;/em&gt;の最小値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="4b47db568bf42f4dfe288f9b3dc0feeaa0783de2" translate="yes" xml:space="preserve">
          <source>A constant holding the smallest &lt;em&gt;positive&lt;/em&gt; nonzero value of Float.</source>
          <target state="translated">Floatのゼロでない&lt;em&gt;正の&lt;/em&gt;非ゼロ値を保持する定数。</target>
        </trans-unit>
        <trans-unit id="926498e55ee5fc08eae4bd245e2c4e41ede1cc0d" translate="yes" xml:space="preserve">
          <source>A constructor can also have a visibility modifier. If you want to place one on the primary constructor (which you might want to do if you have a number of secondary constructors which all invoke a complicated primary constructor that you don't want to expose), you need to include the &lt;code&gt;constructor&lt;/code&gt; keyword: &lt;code&gt;class Person private constructor(val name: String)&lt;/code&gt;.</source>
          <target state="translated">コンストラクターは可視性修飾子を持つこともできます。1つをプライマリコンストラクターに配置する場合（公開したくない複雑なプライマリコンストラクターをすべて呼び出す複数のセカンダリコンストラクターがある場合に実行する場合があります）、 &lt;code&gt;constructor&lt;/code&gt; キーワードを含める必要があります。 &lt;code&gt;class Person private constructor(val name: String)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3d9df8683540fa7fd7e8194d96b7bd3db3b911b3" translate="yes" xml:space="preserve">
          <source>A contravariant type parameter may be used in the converse situations. It is left as an exercise to the reader to figure out the justifications for why these member signatures are legal:</source>
          <target state="translated">逆の状況では、逆の型のパラメータを使用することができます。これらのメンバーの署名がなぜ合法なのか、その正当性を理解するのは読者に委ねられています。</target>
        </trans-unit>
        <trans-unit id="5670eaf9dbc46e20b3dd5b3918e420cebd73b580" translate="yes" xml:space="preserve">
          <source>A coroutine is effectively a light-weight thread that can be suspended and resumed later. Coroutines are supported through &lt;a href=&quot;coroutines-overview#suspending-functions&quot;&gt;&lt;em&gt;suspending functions&lt;/em&gt;&lt;/a&gt;: a call to such a function can potentially suspend a coroutine, and to start a new coroutine we usually use an anonymous suspending functions (i.e. suspending lambdas).</source>
          <target state="translated">コルーチンは、後で中断して再開できる軽量スレッドです。コルーチンは&lt;a href=&quot;coroutines-overview#suspending-functions&quot;&gt;&lt;em&gt;サスペンド関数&lt;/em&gt;&lt;/a&gt;を通じてサポートされ&lt;em&gt;ます&lt;/em&gt;。そのような関数の呼び出しはコルーチンをサスペンドする可能性があり、新しいコルーチンを開始するには、通常、匿名のサスペンド関数（つまり、ラムダのサスペンド）を使用します。</target>
        </trans-unit>
        <trans-unit id="d4d17e0e3b6993ba4a64e4ec4230c5601c955d22" translate="yes" xml:space="preserve">
          <source>A couple of important points:</source>
          <target state="translated">いくつかの重要なポイントがあります。</target>
        </trans-unit>
        <trans-unit id="45f64193144cbc554e0a38cc5c4c77bcd8e4a9af" translate="yes" xml:space="preserve">
          <source>A dependency on a Kotlin module like &lt;code&gt;kotlin-stdlib&lt;/code&gt; or &lt;code&gt;kotlin-reflect&lt;/code&gt; may be added with the notation &lt;code&gt;kotlin(&quot;stdlib&quot;)&lt;/code&gt;, which is a shorthand for &lt;code&gt;&quot;org.jetbrains.kotlin:kotlin-stdlib&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;kotlin-stdlib&lt;/code&gt; や &lt;code&gt;kotlin-reflect&lt;/code&gt; などのKotlinモジュールへの依存関係は、 &lt;code&gt;&quot;org.jetbrains.kotlin:kotlin-stdlib&quot;&lt;/code&gt; 省略形である &lt;code&gt;kotlin(&quot;stdlib&quot;)&lt;/code&gt; という表記で追加できます。</target>
        </trans-unit>
        <trans-unit id="91b101275ae9e945ac8ffc8ad58a3c8e8fca496a" translate="yes" xml:space="preserve">
          <source>A deprecated API element is not recommended to use, typically because it's being phased out or a better alternative exists.</source>
          <target state="translated">非推奨のAPI要素の使用は推奨されていませんが、一般的には段階的に廃止されるか、より良い代替案が存在するからです。</target>
        </trans-unit>
        <trans-unit id="2e3e3a4dd2b277b86435f56d946bc991f64c9d8c" translate="yes" xml:space="preserve">
          <source>A destructuring declaration is compiled down to the following code:</source>
          <target state="translated">破壊宣言は、以下のコードまでコンパイルされています。</target>
        </trans-unit>
        <trans-unit id="b1ea0dc6a70400cbd441b35a9a471ecf74e22467" translate="yes" xml:space="preserve">
          <source>A discriminated union that encapsulates successful outcome with a value of type &lt;a href=&quot;-result/index#T&quot;&gt;T&lt;/a&gt; or a failure with an arbitrary &lt;a href=&quot;-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt; exception.</source>
          <target state="translated">タイプ&lt;a href=&quot;-result/index#T&quot;&gt;Tの&lt;/a&gt;値で成功した結果、または任意の&lt;a href=&quot;-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt;例外で失敗したものをカプセル化する識別された共用体。</target>
        </trans-unit>
        <trans-unit id="8b7b95d370a1a806d2326971406b36261b873df9" translate="yes" xml:space="preserve">
          <source>A discriminated union that encapsulates successful outcome with a value of type &lt;a href=&quot;../-result/index#T&quot;&gt;T&lt;/a&gt; or a failure with an arbitrary &lt;a href=&quot;../-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt; exception.</source>
          <target state="translated">タイプ&lt;a href=&quot;../-result/index#T&quot;&gt;Tの&lt;/a&gt;値で成功した結果、または任意の&lt;a href=&quot;../-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt;例外で失敗したものをカプセル化する識別された共用体。</target>
        </trans-unit>
        <trans-unit id="b814b7664581cb8b41c4524734427f1204119e25" translate="yes" xml:space="preserve">
          <source>A discriminated union that encapsulates successful outcome with a value of type &lt;a href=&quot;index#T&quot;&gt;T&lt;/a&gt; or a failure with an arbitrary &lt;a href=&quot;../-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt; exception.</source>
          <target state="translated">タイプ&lt;a href=&quot;index#T&quot;&gt;Tの&lt;/a&gt;値で成功した結果、または任意の&lt;a href=&quot;../-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt;例外で失敗したものをカプセル化する識別された共用体。</target>
        </trans-unit>
        <trans-unit id="885ace999309d3ae610756b592848e6502039c1c" translate="yes" xml:space="preserve">
          <source>A dynamic call always returns &lt;code&gt;dynamic&lt;/code&gt; as a result, so we can chain such calls freely:</source>
          <target state="translated">動的呼び出しは常に結果として &lt;code&gt;dynamic&lt;/code&gt; を返すため、そのような呼び出しを自由にチェーンできます。</target>
        </trans-unit>
        <trans-unit id="151037307ae97fa4bf6e5eff252ac79d71442a79" translate="yes" xml:space="preserve">
          <source>A familiar error pops up:</source>
          <target state="translated">おなじみのエラーがポップアップします。</target>
        </trans-unit>
        <trans-unit id="70a9d9b5433551b91cd818143cf29e9791b6c4f1" translate="yes" xml:space="preserve">
          <source>A few things are going on in this file, let's go through them one by one. The first entry is &lt;code&gt;headers&lt;/code&gt; which is the list of header files that we want to generate Kotlin stubs for. We can add multiple files to this entry, separating each one with a &lt;code&gt;\&lt;/code&gt; on a new line. In our case we only want &lt;code&gt;curl.h&lt;/code&gt;. The files we are referencing need to be relative to the folder where the definition file is, or be available on the system path (in our case it would be &lt;code&gt;/usr/include/curl&lt;/code&gt;).</source>
          <target state="translated">このファイルではいくつかのことが行われています。1つずつ見ていきましょう。最初のエントリは &lt;code&gt;headers&lt;/code&gt; で、Kotlinスタブを生成するヘッダーファイルのリストです。このエントリに複数のファイルを追加して、各行を改行で &lt;code&gt;\&lt;/code&gt; で区切ることができます。この例では、 &lt;code&gt;curl.h&lt;/code&gt; のみが必要です。ここで参照するファイルは、定義ファイルが存在するフォルダーからの相対パスであるか、システムパスで使用できる必要があります（この場合は &lt;code&gt;/usr/include/curl&lt;/code&gt; になります）。</target>
        </trans-unit>
        <trans-unit id="510af740ade381ab5a1d2be5727f07ffe4d836f3" translate="yes" xml:space="preserve">
          <source>A full example that shows how to integrate Kotlin with DCE and webpack to get a small bundle, can be found &lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/gradle/js-dce&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">KotlinをDCEおよびwebpackと統合して小さなバンドルを取得する方法を示す完全な例は、&lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/gradle/js-dce&quot;&gt;こちらにあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="29b239dcdbc1ff83c7abe8c86bbc963f9e130fe3" translate="yes" xml:space="preserve">
          <source>A function can take an arbitrary number of arguments, similarly to &lt;code&gt;*args&lt;/code&gt; in Python, but they must all be of the same type. Unlike Python, you may declare other positional parameters after the variadic one, but there can be at most one variadic parameter. If its type is &lt;code&gt;X&lt;/code&gt;, the type of the argument will be &lt;code&gt;XArray&lt;/code&gt; if &lt;code&gt;X&lt;/code&gt; is a primitive type and &lt;code&gt;Array&amp;lt;X&amp;gt;&lt;/code&gt; if not.</source>
          <target state="translated">関数は、Pythonの &lt;code&gt;*args&lt;/code&gt; と同様に、任意の数の引数を取ることができますが、それらはすべて同じ型でなければなりません。 Pythonとは異なり、可変パラメータの後に他の位置パラメータを宣言できますが、可変パラメータは最大で1つしか存在できません。型が &lt;code&gt;X&lt;/code&gt; の場合、引数の型は、 &lt;code&gt;X&lt;/code&gt; がプリミティブ型の場合は &lt;code&gt;XArray&lt;/code&gt; 、そうでない場合は &lt;code&gt;Array&amp;lt;X&amp;gt;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="2b72bc5ee521f65f909bfc29c7a45a7202b738a5" translate="yes" xml:space="preserve">
          <source>A function declared inside a class is called a &lt;em&gt;member function&lt;/em&gt; of that class. Like in Python, every invocation of a member function must be performed on an instance of the class, and the instance will be available during the execution of the function - but unlike Python, the function signature doesn't declare that: there is no explicit &lt;code&gt;self&lt;/code&gt; parameter. Instead, every member function can use the keyword &lt;code&gt;this&lt;/code&gt; to reference the current instance, without declaring it. Unlike Python, as long as there is no name conflict with an identically-named parameter or local variable, &lt;code&gt;this&lt;/code&gt; can be omitted. If we do this inside a &lt;code&gt;Person&lt;/code&gt; class with a &lt;code&gt;name&lt;/code&gt; property:</source>
          <target state="translated">クラス内で宣言された&lt;em&gt;関数&lt;/em&gt;は、そのクラスの&lt;em&gt;メンバー関数&lt;/em&gt;と呼ばれます。 Pythonと同様に、メンバー関数のすべての呼び出しはクラスのインスタンスで実行する必要があり、インスタンスは関数の実行中に使用可能になります-ただし、Pythonとは異なり、関数のシグネチャはそれを宣言していません：明示的なものはありません &lt;code&gt;self&lt;/code&gt; パラメータ。代わりに、すべてのメンバー関数は、キーワード &lt;code&gt;this&lt;/code&gt; を使用して、宣言せずに現在のインスタンスを参照できます。 Pythonとは異なり、同じ名前のパラメーターまたはローカル変数と名前が競合しない限り、 &lt;code&gt;this&lt;/code&gt; は省略できます。 &lt;code&gt;name&lt;/code&gt; プロパティを持つ &lt;code&gt;Person&lt;/code&gt; クラス内でこれを行う場合：</target>
        </trans-unit>
        <trans-unit id="1f3fb42e5f8df4a5f2decbeb129c38ad34d7032e" translate="yes" xml:space="preserve">
          <source>A function declaring the &lt;code&gt;callsInPlace&lt;/code&gt; effect must be &lt;em&gt;inline&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;callsInPlace&lt;/code&gt; 効果を宣言する関数は、&lt;em&gt;インラインである&lt;/em&gt;必要があります。</target>
        </trans-unit>
        <trans-unit id="2e4ec01c31a9366c1d3314f2cb2ad451913ce370" translate="yes" xml:space="preserve">
          <source>A function is said to call its functional parameter in place, if the functional parameter is only invoked while the execution has not been returned from the function, and the functional parameter cannot be invoked after the function is completed.</source>
          <target state="translated">関数の実行が関数から返されていない間にのみ関数パラメータが呼び出され、関数が完了した後に関数パラメータを呼び出すことができない場合、関数はその関数パラメータをその場で呼び出すと言われています。</target>
        </trans-unit>
        <trans-unit id="04a060e0c95f4ebd4ecee46f2d26f3e43540876c" translate="yes" xml:space="preserve">
          <source>A function literal with receiver is perhaps easiest to think of as an extension function in the form of a lambda expression. The declaration looks like an ordinary lambda expression; what makes it take a receiver is the context - it must be passed to a function that takes a function with receiver as a parameter, or assigned to a variable/property whose type is a function type with receiver. The only way to use a function with receiver is to invoke it on an instance of the receiver class, as if it were a member function or extension function. For example:</source>
          <target state="translated">receiver を持つ関数リテラルは、ラムダ式の形をした拡張関数と考えるのが最も簡単でしょう。宣言は通常のラムダ式のように見えますが、レシーバを受け取るためにはコンテキストが必要となります。receiver を持つ関数を使用する唯一の方法は、 receiver クラスのインスタンス上で、あたかもそれがメンバ関数または拡張関数であるかのように呼び出すことです。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="fe8fc5bd10645d91436f9c70cc1976194bd5f890" translate="yes" xml:space="preserve">
          <source>A function parameter is called in place, but it's unknown how many times it can be called.</source>
          <target state="translated">関数のパラメータはその場で呼び出されますが、何回呼び出すことができるかは不明です。</target>
        </trans-unit>
        <trans-unit id="0883615027d70df853616a3da883adc37485075c" translate="yes" xml:space="preserve">
          <source>A function parameter will be invoked exactly one time.</source>
          <target state="translated">関数パラメータは一度だけ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c0d39d6c5be7243d66cadcac831bd6f10f533753" translate="yes" xml:space="preserve">
          <source>A function parameter will be invoked one or more times.</source>
          <target state="translated">関数パラメータが1回以上呼び出されます。</target>
        </trans-unit>
        <trans-unit id="237b19a01d8b8d078f93e56a90a19c09f844bdf8" translate="yes" xml:space="preserve">
          <source>A function parameter will be invoked one time or not invoked at all.</source>
          <target state="translated">関数パラメータは1回だけ呼び出されるか、全く呼び出されません。</target>
        </trans-unit>
        <trans-unit id="8f00b34f2663621671200463d2cac2aa55d7e97c" translate="yes" xml:space="preserve">
          <source>A generic collection of elements that supports adding and removing elements.</source>
          <target state="translated">要素の追加と削除をサポートする汎用的な要素のコレクション。</target>
        </trans-unit>
        <trans-unit id="bbff83bb702ed0f6941e7ca039bc7bd867359b5a" translate="yes" xml:space="preserve">
          <source>A generic collection of elements. Methods in this interface support only read-only access to the collection; read/write access is supported through the &lt;a href=&quot;-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt; interface.</source>
          <target state="translated">要素の一般的なコレクション。このインターフェイスのメソッドは、コレクションへの読み取り専用アクセスのみをサポートします。読み取り/書き込みアクセスは、&lt;a href=&quot;-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;インターフェースを介してサポートされます。</target>
        </trans-unit>
        <trans-unit id="abea4bf71869abd4b455f4e16c8397c530a81f82" translate="yes" xml:space="preserve">
          <source>A generic collection of elements. Methods in this interface support only read-only access to the collection; read/write access is supported through the &lt;a href=&quot;../-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt; interface.</source>
          <target state="translated">要素の一般的なコレクション。このインターフェイスのメソッドは、コレクションへの読み取り専用アクセスのみをサポートします。読み取り/書き込みアクセスは、&lt;a href=&quot;../-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;インターフェースを介してサポートされます。</target>
        </trans-unit>
        <trans-unit id="b98a2fbb590152dca20ad79daa75978b2eac2dda" translate="yes" xml:space="preserve">
          <source>A generic collection of elements. Methods in this interface support only read-only access to the collection; read/write access is supported through the &lt;a href=&quot;../../kotlin.collections/-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt; interface.</source>
          <target state="translated">要素の一般的なコレクション。このインターフェイスのメソッドは、コレクションへの読み取り専用アクセスのみをサポートします。読み取り/書き込みアクセスは、&lt;a href=&quot;../../kotlin.collections/-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;インターフェースを介してサポートされます。</target>
        </trans-unit>
        <trans-unit id="7c38f7e29efee3c4f7385c8652c0172ab8569bbc" translate="yes" xml:space="preserve">
          <source>A generic ordered collection of elements that supports adding and removing elements.</source>
          <target state="translated">要素の追加と削除をサポートする、一般的な順序付き要素のコレクション。</target>
        </trans-unit>
        <trans-unit id="1f1affddde96d31df4551f7de92ce93f45561b90" translate="yes" xml:space="preserve">
          <source>A generic ordered collection of elements. Methods in this interface support only read-only access to the list; read/write access is supported through the &lt;a href=&quot;-mutable-list/index#kotlin.collections.MutableList&quot;&gt;MutableList&lt;/a&gt; interface.</source>
          <target state="translated">要素の一般的な順序付けられたコレクション。このインターフェイスのメソッドは、リストへの読み取り専用アクセスのみをサポートします。読み取り/書き込みアクセスは、&lt;a href=&quot;-mutable-list/index#kotlin.collections.MutableList&quot;&gt;MutableList&lt;/a&gt;インターフェースを介してサポートされます。</target>
        </trans-unit>
        <trans-unit id="dea2909eb1d1d0572168e9616d0bc2df8d12c27b" translate="yes" xml:space="preserve">
          <source>A generic ordered collection of elements. Methods in this interface support only read-only access to the list; read/write access is supported through the &lt;a href=&quot;../-mutable-list/index#kotlin.collections.MutableList&quot;&gt;MutableList&lt;/a&gt; interface.</source>
          <target state="translated">要素の一般的な順序付けられたコレクション。このインターフェイスのメソッドは、リストへの読み取り専用アクセスのみをサポートします。読み取り/書き込みアクセスは、&lt;a href=&quot;../-mutable-list/index#kotlin.collections.MutableList&quot;&gt;MutableList&lt;/a&gt;インターフェースを介してサポートされます。</target>
        </trans-unit>
        <trans-unit id="69b1b083bbdcd6a394a2a7149f189640c381fc48" translate="yes" xml:space="preserve">
          <source>A generic ordered collection of elements. Methods in this interface support only read-only access to the list; read/write access is supported through the &lt;a href=&quot;../../kotlin.collections/-mutable-list/index#kotlin.collections.MutableList&quot;&gt;MutableList&lt;/a&gt; interface.</source>
          <target state="translated">要素の一般的な順序付けられたコレクション。このインターフェイスのメソッドは、リストへの読み取り専用アクセスのみをサポートします。読み取り/書き込みアクセスは、&lt;a href=&quot;../../kotlin.collections/-mutable-list/index#kotlin.collections.MutableList&quot;&gt;MutableList&lt;/a&gt;インターフェースを介してサポートされます。</target>
        </trans-unit>
        <trans-unit id="bd7063c4dd2c9689622f1ed7af757167d730223a" translate="yes" xml:space="preserve">
          <source>A generic unordered collection of elements that does not support duplicate elements, and supports adding and removing elements.</source>
          <target state="translated">重複要素をサポートせず、要素の追加と削除をサポートする、一般的な順序のない要素のコレクション。</target>
        </trans-unit>
        <trans-unit id="9c0cd9b3c1101fe42ec4c546da093b3561f35c0a" translate="yes" xml:space="preserve">
          <source>A generic unordered collection of elements that does not support duplicate elements. Methods in this interface support only read-only access to the set; read/write access is supported through the &lt;a href=&quot;-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface.</source>
          <target state="translated">重複する要素をサポートしない、要素の一般的な順不同のコレクション。このインターフェイスのメソッドは、セットへの読み取り専用アクセスのみをサポートします。読み取り/書き込みアクセスは、&lt;a href=&quot;-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt;インターフェースを介してサポートされます。</target>
        </trans-unit>
        <trans-unit id="402b36a678feb8f00e85eafd3effc930783d66d2" translate="yes" xml:space="preserve">
          <source>A generic unordered collection of elements that does not support duplicate elements. Methods in this interface support only read-only access to the set; read/write access is supported through the &lt;a href=&quot;../-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface.</source>
          <target state="translated">重複する要素をサポートしない、要素の一般的な順不同のコレクション。このインターフェイスのメソッドは、セットへの読み取り専用アクセスのみをサポートします。読み取り/書き込みアクセスは、&lt;a href=&quot;../-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt;インターフェースを介してサポートされます。</target>
        </trans-unit>
        <trans-unit id="ddbe26555159afcb7715383695a1b59ee8ccd31a" translate="yes" xml:space="preserve">
          <source>A generic unordered collection of elements that does not support duplicate elements. Methods in this interface support only read-only access to the set; read/write access is supported through the &lt;a href=&quot;../../kotlin.collections/-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface.</source>
          <target state="translated">重複する要素をサポートしない、要素の一般的な順不同のコレクション。このインターフェイスのメソッドは、セットへの読み取り専用アクセスのみをサポートします。読み取り/書き込みアクセスは、&lt;a href=&quot;../../kotlin.collections/-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt;インターフェースを介してサポートされます。</target>
        </trans-unit>
        <trans-unit id="ce031fbd15cb09965c1695fb87cf32609c4660bd" translate="yes" xml:space="preserve">
          <source>A getter method, with the name calculated by prepending the &lt;code&gt;get&lt;/code&gt; prefix;</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; プレフィックスを前に付加することによって名前が計算される、getterメソッド。</target>
        </trans-unit>
        <trans-unit id="845d21e4688c200dd8d79ba0f6fcce97e344c534" translate="yes" xml:space="preserve">
          <source>A good example is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fold_(higher-order_function)&quot;&gt;functional programming idiom &lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; for collections, which takes an initial accumulator value and a combining function and builds its return value by consecutively combining current accumulator value with each collection element, replacing the accumulator:</source>
          <target state="translated">良い例は、コレクションの&lt;a href=&quot;https://en.wikipedia.org/wiki/Fold_(higher-order_function)&quot;&gt;関数型プログラミングイディオム &lt;code&gt;fold&lt;/code&gt; &lt;/a&gt;です。これは、初期アキュムレータ値と結合関数を取り、現在のアキュムレータ値を各コレクション要素と連続的に結合して、アキュムレータを置き換えることにより、その戻り値を構築します。</target>
        </trans-unit>
        <trans-unit id="6ff9f7dc904e80d0113b7f5b369e86536cb5fc57" translate="yes" xml:space="preserve">
          <source>A good example of such a requirement is a UI component with the job defined in its scope. If any of the UI's child tasks have failed, it is not always necessary to cancel (effectively kill) the whole UI component, but if UI component is destroyed (and its job is cancelled), then it is necessary to fail all child jobs as their results are no longer required.</source>
          <target state="translated">このような要件の良い例は、そのスコープに定義されたジョブを持つ UI コンポーネントです。UI の子タスクのいずれかが失敗した場合、UI コンポーネント全体をキャンセル(事実上 kill)する必要は常にあるわけではありませんが、UI コンポーネントが破壊された(そしてそのジョブがキャンセルされた)場合、その結果が不要になるため、すべての子ジョブを失敗させる必要があります。</target>
        </trans-unit>
        <trans-unit id="b906d5c24dc71d701d1a88f5123b99a35b02e657" translate="yes" xml:space="preserve">
          <source>A great resource to study Kotlin syntax and API of the Kotlin standard library are &lt;a href=&quot;koans&quot;&gt;Kotlin Koans&lt;/a&gt;.</source>
          <target state="translated">Kotlin標準ライブラリのKotlin構文とAPIを学習するための優れたリソースは、&lt;a href=&quot;koans&quot;&gt;Kotlin Koans&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="ebfffbfa83d34f87c675110d91e368618c92b537" translate="yes" xml:space="preserve">
          <source>A higher-order function is a function that takes functions as parameters, or returns a function.</source>
          <target state="translated">高次関数とは、関数を引数に取ったり、関数を返したりする関数のことです。</target>
        </trans-unit>
        <trans-unit id="9658b2ff766fe30712bdf6b1320de81dcddb8dd6" translate="yes" xml:space="preserve">
          <source>A key feature of the multiplatform project support is the possibility to express dependencies of common code on platform-specific parts through &lt;strong&gt;expected and actual declarations&lt;/strong&gt;. An expected declaration specifies an API (class, interface, annotation, top-level declaration etc.). An actual declaration is either a platform-dependent implementation of the API or a typealias referring to an existing implementation of the API in an external library. Here's an example:</source>
          <target state="translated">マルチプラットフォームプロジェクトサポートの主要な機能は、&lt;strong&gt;予想される宣言と実際の宣言&lt;/strong&gt;によって、プラットフォーム固有の部分に共通コードの依存関係を表現できることです。予想される宣言は、API（クラス、インターフェース、注釈、トップレベル宣言など）を指定します。実際の宣言は、プラットフォームに依存するAPIの実装、または外部ライブラリのAPIの既存の実装を参照するタイプエイリアスです。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="b4f9bcf6317a3efbfc27ffa627ae2315de75f99c" translate="yes" xml:space="preserve">
          <source>A key of this coroutine context element.</source>
          <target state="translated">このコルーチンコンテキスト要素のキー。</target>
        </trans-unit>
        <trans-unit id="a529167efcc4bc503564dbabfc673ed3f8365dca" translate="yes" xml:space="preserve">
          <source>A kind of the metadata this annotation encodes. Kotlin compiler recognizes the following kinds (see KotlinClassHeader.Kind):</source>
          <target state="translated">このアノテーションがエンコードするメタデータの種類。Kotlinコンパイラは以下の種類を認識します (KotlinClassHeader.Kindを参照)。</target>
        </trans-unit>
        <trans-unit id="af75e92b60e6e9dc75638e6104df4d818cedc25f" translate="yes" xml:space="preserve">
          <source>A lambda expression accepted by the &lt;code&gt;executable&lt;/code&gt; method in the example above is applied to each binary created and allows one to configure the binary (see the &lt;a href=&quot;#configuring-binaries&quot;&gt;corresponding section&lt;/a&gt;). Note that this lambda can be dropped if there is no need for additional configuration:</source>
          <target state="translated">上記の例の &lt;code&gt;executable&lt;/code&gt; メソッドで受け入れられるラムダ式は、作成された各バイナリに適用され、バイナリを構成できます（&lt;a href=&quot;#configuring-binaries&quot;&gt;対応するセクションを参照&lt;/a&gt;）。追加の構成が必要ない場合は、このラムダを削除できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="59e8c41c77e473f5d78a3b8f292109d63deab3c1" translate="yes" xml:space="preserve">
          <source>A lambda expression is always surrounded by curly braces, parameter declarations in the full syntactic form go inside curly braces and have optional type annotations, the body goes after an &lt;code&gt;-&amp;gt;&lt;/code&gt; sign. If the inferred return type of the lambda is not &lt;code&gt;Unit&lt;/code&gt;, the last (or possibly single) expression inside the lambda body is treated as the return value.</source>
          <target state="translated">ラムダ式は常に中括弧で囲まれ、完全な構文形式のパラメーター宣言は中括弧の中にあり、オプションの型注釈があり、本体は &lt;code&gt;-&amp;gt;&lt;/code&gt; 記号の後に続きます。推定されたラムダの戻り値の型が &lt;code&gt;Unit&lt;/code&gt; ではない場合、ラムダ本体内の最後の（またはおそらく単一の）式が戻り値として扱われます。</target>
        </trans-unit>
        <trans-unit id="0c65c1cb9c5a403c061be48bf269fbc9618b3e04" translate="yes" xml:space="preserve">
          <source>A lambda expression or anonymous function (as well as a &lt;a href=&quot;functions#local-functions&quot;&gt;local function&lt;/a&gt; and an &lt;a href=&quot;object-declarations#object-expressions&quot;&gt;object expression&lt;/a&gt;) can access its &lt;em&gt;closure&lt;/em&gt;, i.e. the variables declared in the outer scope. Unlike Java, the variables captured in the closure can be modified:</source>
          <target state="translated">ラムダ式または無名関数（および&lt;a href=&quot;functions#local-functions&quot;&gt;ローカル関数&lt;/a&gt;と&lt;a href=&quot;object-declarations#object-expressions&quot;&gt;オブジェクト式&lt;/a&gt;）は、その&lt;em&gt;クロージャー&lt;/em&gt;、つまり外部スコープで宣言された変数にアクセスできます。Javaとは異なり、クロージャでキャプチャされた変数は変更できます。</target>
        </trans-unit>
        <trans-unit id="bdff8d608ead4752a4b46042e230ea48bde67d92" translate="yes" xml:space="preserve">
          <source>A language is nothing without its ecosystem, so we pay extra attention to enabling smooth library evolution.</source>
          <target state="translated">言語はエコシステムなしでは成り立たないので、ライブラリをスムーズに進化させられるように細心の注意を払っています。</target>
        </trans-unit>
        <trans-unit id="cd15bacdd1c63ecfc6424c14d67180313bd1ad34" translate="yes" xml:space="preserve">
          <source>A library also needs &lt;code&gt;group&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt; to be set in the project:</source>
          <target state="translated">ライブラリには、プロジェクトで設定する &lt;code&gt;group&lt;/code&gt; と &lt;code&gt;version&lt;/code&gt; も必要です。</target>
        </trans-unit>
        <trans-unit id="a266d621f1143136ef1332f1d4e8fbf1937bb7bb" translate="yes" xml:space="preserve">
          <source>A library built from a multiplatform project may be published to a Maven repository with the &lt;a href=&quot;https://docs.gradle.org/current/userguide/publishing_maven.html&quot;&gt;&lt;code&gt;maven-publish&lt;/code&gt; Gradle plugin&lt;/a&gt;, which can be applied as follows:</source>
          <target state="translated">マルチプラットフォームプロジェクトからビルドされたライブラリは、次のように適用できる&lt;a href=&quot;https://docs.gradle.org/current/userguide/publishing_maven.html&quot;&gt; &lt;code&gt;maven-publish&lt;/code&gt; Gradleプラグイン&lt;/a&gt;を使用してMavenリポジトリに公開できます。</target>
        </trans-unit>
        <trans-unit id="0b4ed373cde6e9e1fa91e4fbb56a9c7598a75a2e" translate="yes" xml:space="preserve">
          <source>A library can be compiled against the JSR-305 annotations, but there's no need to make the annotations artifact (e.g. &lt;code&gt;jsr305.jar&lt;/code&gt;) a compile dependency for the library consumers. The Kotlin compiler can read the JSR-305 annotations from a library without the annotations present on the classpath.</source>
          <target state="translated">ライブラリはJSR-305アノテーションに対してコンパイルできますが、アノテーションアーティファクト（ &lt;code&gt;jsr305.jar&lt;/code&gt; など）をライブラリコンシューマのコンパイル依存関係にする必要はありません。Kotlinコンパイラは、クラスパスにアノテーションが存在しなくても、ライブラリからJSR-305アノテーションを読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="d047b9b14ef599793bf3ec4c60c343db64e1e53d" translate="yes" xml:space="preserve">
          <source>A library maintainer can add &lt;code&gt;@UnderMigration&lt;/code&gt; status to both type qualifier nicknames and type qualifier defaults:</source>
          <target state="translated">ライブラリメンテナは、 &lt;code&gt;@UnderMigration&lt;/code&gt; ステータスをタイプ修飾子のニックネームとタイプ修飾子のデフォルトの両方に追加できます。</target>
        </trans-unit>
        <trans-unit id="f4d698e33a9549340a4259e6c4d88d876edb0aa5" translate="yes" xml:space="preserve">
          <source>A list of additional compiler arguments</source>
          <target state="translated">追加のコンパイラ引数のリスト</target>
        </trans-unit>
        <trans-unit id="c050876c45d3b9009b108f91b92dee2ba3ce4a68" translate="yes" xml:space="preserve">
          <source>A list of matched indexed group values.</source>
          <target state="translated">一致したインデックス付きグループ値のリスト。</target>
        </trans-unit>
        <trans-unit id="0490e17c090278dca9d9c3e9c1918bb3f95d57dc" translate="yes" xml:space="preserve">
          <source>A local value initialised with an expression of a platform type may or may not have a type declaration:</source>
          <target state="translated">プラットフォーム型の式で初期化されたローカル値は、型宣言を持っている場合と持っていない場合があります。</target>
        </trans-unit>
        <trans-unit id="6082935bdff5b04031f6645a591c4c448c1b83ae" translate="yes" xml:space="preserve">
          <source>A look at how Kotlin compiles to JavaScript and the use cases for that.</source>
          <target state="translated">Kotlin がどのように JavaScript にコンパイルしているのか、そしてそのためのユースケースを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="c8130c12d930d04cefb1ed7e38d06b29b5e7dd90" translate="yes" xml:space="preserve">
          <source>A look at how to compile our first Kotlin/Native application and open it in an IDE</source>
          <target state="translated">最初のKotlin/NativeアプリケーションをコンパイルしてIDEで開く方法を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="385e8e945a580076e3df659a821033522dacc1b9" translate="yes" xml:space="preserve">
          <source>A look at how to use Gradle to target JavaScript.</source>
          <target state="translated">Gradleを使ってJavaScriptをターゲットにする方法を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="b89b4fa9c39dacaeb933d4650ccdc12e158979dd" translate="yes" xml:space="preserve">
          <source>A look at how to use IntelliJ IDEA to target JavaScript.</source>
          <target state="translated">IntelliJ IDEAを使ってJavaScriptをターゲットにする方法を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="71d661a8898d659e1e97814edf5572b07d03e2a4" translate="yes" xml:space="preserve">
          <source>A look at how to use Kotlin to interact with JavaScript modules.</source>
          <target state="translated">Kotlin を使って JavaScript モジュールを操作する方法を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="8b133e53c4710f53a8e5d137344f6ea855746c46" translate="yes" xml:space="preserve">
          <source>A look at how to use Maven to target JavaScript.</source>
          <target state="translated">Mavenを使ってJavaScriptをターゲットにする方法を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="5fcf68c5e070712c02ef2161e606659b7cf8046b" translate="yes" xml:space="preserve">
          <source>A look at how we can interact with the DOM as well as using JavaScript libraries</source>
          <target state="translated">JavaScript ライブラリを使用して DOM と対話する方法を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="c0d24229bab2798843cb2291cd6e6945e16df6ed" translate="yes" xml:space="preserve">
          <source>A marker annotation can have one of two severity &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-experimental/-level/index&quot;&gt;levels&lt;/a&gt; of informing about experimental API usage:</source>
          <target state="translated">マーカーアノテーションには、試験的なAPIの使用について通知する2つの重大度&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-experimental/-level/index&quot;&gt;レベルの&lt;/a&gt;いずれかを含めることができます。</target>
        </trans-unit>
        <trans-unit id="b054a659f1507dbdbd8b7a70edae51e942b5d321" translate="yes" xml:space="preserve">
          <source>A member function is a function that is defined inside a class or object:</source>
          <target state="translated">メンバ関数とは、クラスやオブジェクトの内部で定義されている関数のことです。</target>
        </trans-unit>
        <trans-unit id="4396cd5eb274f200a93bd95b26249891db5d5bc2" translate="yes" xml:space="preserve">
          <source>A member marked &lt;em&gt;override&lt;/em&gt; is itself open, i.e. it may be overridden in subclasses. If you want to prohibit re-overriding, use &lt;em&gt;final&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;オーバーライド&lt;/em&gt;とマークされたメンバーは、それ自体が開いています。つまり、サブクラスでオーバーライドされる場合があります。再オーバーライドを禁止する場合は、&lt;em&gt;finalを&lt;/em&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="33c9548e1a279573b42ec97cd1476aab155cc3b4" translate="yes" xml:space="preserve">
          <source>A modifiable collection that holds pairs of objects (keys and values) and supports efficiently retrieving the value corresponding to each key. Map keys are unique; the map holds only one value for each key.</source>
          <target state="translated">オブジェクトのペア(キーと値)を保持し、各キーに対応する値の効率的な取得をサポートする、変更可能なコレクション。マップのキーは一意であり、マップは各キーに対して 1 つの値のみを保持します。</target>
        </trans-unit>
        <trans-unit id="68902b1d8fd08c328f63d3b0ce175fa7604003a9" translate="yes" xml:space="preserve">
          <source>A more old-fashioned way is using an &lt;em&gt;update site&lt;/em&gt; directly:</source>
          <target state="translated">より昔ながらの方法は、&lt;em&gt;更新サイトを&lt;/em&gt;直接使用することです。</target>
        </trans-unit>
        <trans-unit id="bf066db04d9910e9f11c2b8beb3034ec52a9044a" translate="yes" xml:space="preserve">
          <source>A much larger part of the Kotlin standard library can now be used from code compiled to JavaScript. In particular, key classes such as collections (&lt;code&gt;ArrayList&lt;/code&gt;, &lt;code&gt;HashMap&lt;/code&gt; etc.), exceptions (&lt;code&gt;IllegalArgumentException&lt;/code&gt; etc.) and a few others (&lt;code&gt;StringBuilder&lt;/code&gt;, &lt;code&gt;Comparator&lt;/code&gt;) are now defined under the &lt;code&gt;kotlin&lt;/code&gt; package. On the JVM, the names are type aliases for the corresponding JDK classes, and on the JS, the classes are implemented in the Kotlin standard library.</source>
          <target state="translated">Kotlin標準ライブラリの大部分が、JavaScriptにコンパイルされたコードから使用できるようになりました。特に、コレクション（ &lt;code&gt;ArrayList&lt;/code&gt; 、 &lt;code&gt;HashMap&lt;/code&gt; など）、例外（ &lt;code&gt;IllegalArgumentException&lt;/code&gt; など）およびその他のいくつか（ &lt;code&gt;StringBuilder&lt;/code&gt; 、 &lt;code&gt;Comparator&lt;/code&gt; ）などの主要なクラスが &lt;code&gt;kotlin&lt;/code&gt; パッケージで定義されています。 JVMでは、名前は対応するJDKクラスのタイプエイリアスであり、JSでは、クラスはKotlin標準ライブラリに実装されています。</target>
        </trans-unit>
        <trans-unit id="ee493f380acc0a42b5e890932900078480680011" translate="yes" xml:space="preserve">
          <source>A multiplatform sample library is now created and imported into IntelliJ IDEA. Let's go to any &lt;code&gt;.kt&lt;/code&gt; file and rename the package with the IntelliJ IDEA action &lt;em&gt;Refactor | Rename&lt;/em&gt; action to &lt;code&gt;org.jetbrains.base64&lt;/code&gt; Let's just check everything is right with the project so far, the project structure should be:</source>
          <target state="translated">マルチプラットフォームサンプルライブラリが作成され、IntelliJ IDEAにインポートされます。 &lt;code&gt;.kt&lt;/code&gt; ファイルに移動して、IntelliJ IDEAアクション&lt;em&gt;Refactor |で&lt;/em&gt;パッケージの名前を変更しましょう&lt;em&gt;。&lt;/em&gt;アクションの&lt;em&gt;名前&lt;/em&gt;を &lt;code&gt;org.jetbrains.base64&lt;/code&gt; に変更します。これまでのところプロジェクトのすべてが正しいことを確認してみましょう。プロジェクト構造は次のようになります。</target>
        </trans-unit>
        <trans-unit id="f4b890960e943c6a1f6370a833c10f3876378c32" translate="yes" xml:space="preserve">
          <source>A naive way of translating these functions into Java would be this:</source>
          <target state="translated">これらの関数をJavaに翻訳する素朴な方法は、次のようなものでしょう。</target>
        </trans-unit>
        <trans-unit id="a39eaba88421ecc659e557c1c5917daff148999d" translate="yes" xml:space="preserve">
          <source>A new code style adoption might be a very natural process if it starts with a new project, when there's no code formatted in the old way. That is why starting from version 1.3, the Kotlin IntelliJ Plugin creates new projects with formatting from the Code Conventions document which is enabled by default.</source>
          <target state="translated">新しいコードスタイルの採用は、旧来の方法でフォーマットされたコードがない場合、新しいプロジェクトから開始すると、ごく自然な流れになるかもしれません。そのため、バージョン1.3から、Kotlin IntelliJプラグインは、デフォルトで有効になっているCode Conventionsドキュメントからのフォーマットで新しいプロジェクトを作成するようになりました。</target>
        </trans-unit>
        <trans-unit id="2ed3400a891a08f6fa6f1243321491e235535de8" translate="yes" xml:space="preserve">
          <source>A nice built-in delegated property is &lt;code&gt;lazy&lt;/code&gt;, which is a properly threadsafe implementation of the lazy loading pattern. The supplied lambda expression will only be evaluated once, the first time the property is accessed.</source>
          <target state="translated">組み込みのデリゲートされた優れたプロパティは &lt;code&gt;lazy&lt;/code&gt; です。これは、遅延読み込みパターンを適切にスレッドセーフに実装したものです。指定されたラムダ式は、プロパティに初めてアクセスしたときに1回だけ評価されます。</target>
        </trans-unit>
        <trans-unit id="05f9decb296cb438904b90a9f0f8cd0768c68ffb" translate="yes" xml:space="preserve">
          <source>A non-extension function: &lt;strong&gt;the context object&lt;/strong&gt; is passed as an argument, but inside the lambda, it's available as a receiver (&lt;code&gt;this&lt;/code&gt;). &lt;strong&gt;The return value&lt;/strong&gt; is the lambda result.</source>
          <target state="translated">非拡張関数：&lt;strong&gt;コンテキストオブジェクト&lt;/strong&gt;は引数として渡され&lt;strong&gt;ます&lt;/strong&gt;が、ラムダ内ではレシーバー（ &lt;code&gt;this&lt;/code&gt; ）として使用できます。&lt;strong&gt;戻り値&lt;/strong&gt;はラムダ結果です。</target>
        </trans-unit>
        <trans-unit id="e9556a99638ca78eba482514fb0afe050f158662" translate="yes" xml:space="preserve">
          <source>A number of packages are imported into every Kotlin file by default:</source>
          <target state="translated">デフォルトでは、多くのパッケージがすべての Kotlin ファイルにインポートされます。</target>
        </trans-unit>
        <trans-unit id="0690a89d31ce4555354ff36a78a338d800d8a6a1" translate="yes" xml:space="preserve">
          <source>A pair of an index of the first occurrence of matched string from &lt;a href=&quot;find-any-of#kotlin.text%24findAnyOf%28kotlin.CharSequence%2C+kotlin.collections.Collection%28%28kotlin.String%29%29%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstrings&quot;&gt;strings&lt;/a&gt; and the string matched or &lt;code&gt;null&lt;/code&gt; if none of &lt;a href=&quot;find-any-of#kotlin.text%24findAnyOf%28kotlin.CharSequence%2C+kotlin.collections.Collection%28%28kotlin.String%29%29%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstrings&quot;&gt;strings&lt;/a&gt; are found.</source>
          <target state="translated">マッチした文字列の最初の発生の指標の対&lt;a href=&quot;find-any-of#kotlin.text%24findAnyOf%28kotlin.CharSequence%2C+kotlin.collections.Collection%28%28kotlin.String%29%29%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstrings&quot;&gt;列&lt;/a&gt;とマッチした文字列または &lt;code&gt;null&lt;/code&gt; のいずれも場合&lt;a href=&quot;find-any-of#kotlin.text%24findAnyOf%28kotlin.CharSequence%2C+kotlin.collections.Collection%28%28kotlin.String%29%29%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstrings&quot;&gt;ストリングが&lt;/a&gt;見出されていません。</target>
        </trans-unit>
        <trans-unit id="6180f75d77d89f493537446a08bcc4c4a8c04dbd" translate="yes" xml:space="preserve">
          <source>A pair of an index of the last occurrence of matched string from &lt;a href=&quot;find-last-any-of#kotlin.text%24findLastAnyOf%28kotlin.CharSequence%2C+kotlin.collections.Collection%28%28kotlin.String%29%29%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstrings&quot;&gt;strings&lt;/a&gt; and the string matched or &lt;code&gt;null&lt;/code&gt; if none of &lt;a href=&quot;find-last-any-of#kotlin.text%24findLastAnyOf%28kotlin.CharSequence%2C+kotlin.collections.Collection%28%28kotlin.String%29%29%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstrings&quot;&gt;strings&lt;/a&gt; are found.</source>
          <target state="translated">マッチした文字列が最後に出現する位置のインデックスのペア&lt;a href=&quot;find-last-any-of#kotlin.text%24findLastAnyOf%28kotlin.CharSequence%2C+kotlin.collections.Collection%28%28kotlin.String%29%29%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstrings&quot;&gt;の文字列&lt;/a&gt;とマッチした文字列または &lt;code&gt;null&lt;/code&gt; のどれもあれば&lt;a href=&quot;find-last-any-of#kotlin.text%24findLastAnyOf%28kotlin.CharSequence%2C+kotlin.collections.Collection%28%28kotlin.String%29%29%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstrings&quot;&gt;、文字列が&lt;/a&gt;見つかりませんでした。</target>
        </trans-unit>
        <trans-unit id="a8c369ae3a10f910466f80e9aeb4feac05933ded" translate="yes" xml:space="preserve">
          <source>A parameter is optional in any of the two cases:</source>
          <target state="translated">2つのケースのいずれかで、パラメータはオプションです。</target>
        </trans-unit>
        <trans-unit id="d8e54db4b729c3b476717fda903eeba2bbf919bb" translate="yes" xml:space="preserve">
          <source>A parameter of a function (normally the last one) may be marked with &lt;code&gt;vararg&lt;/code&gt; modifier:</source>
          <target state="translated">関数のパラメーター（通常は最後のパラメーター）には、 &lt;code&gt;vararg&lt;/code&gt; 修飾子を付けることができます。</target>
        </trans-unit>
        <trans-unit id="7b5a662aaf33cd978719d71631ebb23d192f917f" translate="yes" xml:space="preserve">
          <source>A parameterless lambda does not need the arrow. A one-parameter lambda can choose to omit the parameter name and the arrow, in which case the parameter will be called &lt;code&gt;it&lt;/code&gt;:</source>
          <target state="translated">パラメータのないラムダには矢印は必要ありません。1つのパラメーターのラムダは、パラメーター名と矢印を省略することを選択できます。その場合、パラメーターは &lt;code&gt;it&lt;/code&gt; と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="974e5c50f4b27f1754c46fb5809df40f0b98cd08" translate="yes" xml:space="preserve">
          <source>A parent coroutine always waits for completion of all its children. Parent does not have to explicitly track all the children it launches and it does not have to use &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/join.html&quot;&gt;Job.join&lt;/a&gt; to wait for them at the end:</source>
          <target state="translated">親コルーチンは常に、そのすべての子の完了を待ちます。親は、起動するすべての子を明示的に追跡する必要はなく、最後に&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/join.html&quot;&gt;Job.join&lt;/a&gt;を使用してそれらを待機する必要もありません。</target>
        </trans-unit>
        <trans-unit id="8274e7e6404a74bf26de46501fa024c47c94d1b6" translate="yes" xml:space="preserve">
          <source>A particularly interesting operator is the function-call parenthesis pair, whose function name is &lt;code&gt;invoke&lt;/code&gt; - if you implement this, you'll be able to call instances of your class as if they were functions. You can even overload it in order to provide different function signatures.</source>
          <target state="translated">特に興味深い演算子は、関数と括弧のペアで、その関数名は &lt;code&gt;invoke&lt;/code&gt; です。これを実装すると、クラスのインスタンスを関数のように呼び出すことができます。さまざまな関数シグネチャを提供するために、オーバーロードすることもできます。</target>
        </trans-unit>
        <trans-unit id="c4af47ae608a7ac564d11609101a4fb4cd519dbf" translate="yes" xml:space="preserve">
          <source>A pipeline is a pattern where one coroutine is producing, possibly infinite, stream of values:</source>
          <target state="translated">パイプラインとは、1つのコアーチンが、無限に続く可能性のある値のストリームを生成するパターンのことです。</target>
        </trans-unit>
        <trans-unit id="9cde5f90c09a2d34b46b31e70319e1f078c94d7c" translate="yes" xml:space="preserve">
          <source>A plain &lt;code&gt;continue&lt;/code&gt; or &lt;code&gt;break&lt;/code&gt; works the same way as in Python: &lt;code&gt;continue&lt;/code&gt; skips to the next iteration of the innermost containing loop, and &lt;code&gt;break&lt;/code&gt; stops the loop. However, you can also &lt;em&gt;label&lt;/em&gt; your loops and reference the label in the &lt;code&gt;continue&lt;/code&gt; or &lt;code&gt;break&lt;/code&gt; statement in order to indicate which loop you want to affect. A label is an identifier followed by &lt;code&gt;@,&lt;/code&gt; e.g. &lt;code&gt;outer@&lt;/code&gt; (possibly followed by a space). For example, to generate primes:</source>
          <target state="translated">平野は &lt;code&gt;continue&lt;/code&gt; か、 &lt;code&gt;break&lt;/code&gt; Pythonで同じように動作します： &lt;code&gt;continue&lt;/code&gt; ループを含む最も内側の次の繰り返しにスキップして、 &lt;code&gt;break&lt;/code&gt; ループを停止します。しかし、あなたもできる&lt;em&gt;ラベル&lt;/em&gt;あなたのループをして、ラベルを参照し &lt;code&gt;continue&lt;/code&gt; か、 &lt;code&gt;break&lt;/code&gt; あなたが影響を与えるしたいループを示すために声明。ラベルが続く識別子です &lt;code&gt;@,&lt;/code&gt; 例えば &lt;code&gt;outer@&lt;/code&gt; （おそらく空白が続きます）。たとえば、素数を生成するには：</target>
        </trans-unit>
        <trans-unit id="6b2a30e494b907d8d4a62480d42d797547658d1c" translate="yes" xml:space="preserve">
          <source>A private field, with the same name as the property name (only for properties with backing fields).</source>
          <target state="translated">プロパティ名と同じ名前のプライベートフィールド(バッキングフィールドを持つプロパティのみ)。</target>
        </trans-unit>
        <trans-unit id="cf177bbbdaba44b6a20302adc2f02cfa544d58d1" translate="yes" xml:space="preserve">
          <source>A progression of values of type &lt;code&gt;Char&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Char&lt;/code&gt; 型の値のプログレッション。</target>
        </trans-unit>
        <trans-unit id="8000107831bfdde0265eaeae084010957d7238c6" translate="yes" xml:space="preserve">
          <source>A progression of values of type &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Int&lt;/code&gt; 型の値のプログレッション。</target>
        </trans-unit>
        <trans-unit id="39af8d75cced3cff348b69e44d892f081a434b7d" translate="yes" xml:space="preserve">
          <source>A progression of values of type &lt;code&gt;Long&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Long&lt;/code&gt; 型の値のプログレッション。</target>
        </trans-unit>
        <trans-unit id="9935e82fa581f03cd1527a988db2f66b9b8656e3" translate="yes" xml:space="preserve">
          <source>A progression of values of type &lt;code&gt;UInt&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;UInt&lt;/code&gt; の値の進行。</target>
        </trans-unit>
        <trans-unit id="83c8ff0fdfef1cd606459dfe6f47432c30195b62" translate="yes" xml:space="preserve">
          <source>A progression of values of type &lt;code&gt;ULong&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;ULong&lt;/code&gt; の値の進行。</target>
        </trans-unit>
        <trans-unit id="9afb968e6952d4b115b95334d2ddb1edc4507185" translate="yes" xml:space="preserve">
          <source>A property is really a &lt;em&gt;backing field&lt;/em&gt; (kind of a hidden variable inside the object) and two accessor functions: one that gets the value of the variable and one that sets the value. You can override one or both of the accessors (an accessor that is not overridden automatically gets the default behavior of just returning or setting the backing field directly). Inside an accessor, you can reference the backing field with &lt;code&gt;field&lt;/code&gt;. The setter accessor must take a parameter &lt;code&gt;value&lt;/code&gt;, which is the value that is being assigned to the property. A getter body could either be a one-line expression preceded by &lt;code&gt;=&lt;/code&gt; or a more complex body enclosed in curly braces, while a setter body typically includes an assignment and must therefore be enclosed in curly braces. If you want to validate that the age is nonnegative:</source>
          <target state="translated">プロパティは、実際には&lt;em&gt;バッキングフィールド&lt;/em&gt;（オブジェクト内の隠し変数の一種）と2つのアクセサ関数です。1つは変数の値を取得し、もう1つは値を設定します。1つまたは両方のアクセサーをオーバーライドできます（オーバーライドされないアクセサーは、直接バッキングフィールドを直接返すか設定するというデフォルトの動作を自動的に取得します）。アクセサー内では、フィールドでバッキングフィールドを参照でき &lt;code&gt;field&lt;/code&gt; 。セッターアクセサーは、プロパティに割り当てられている &lt;code&gt;value&lt;/code&gt; であるパラメーター値を取る必要があります。ゲッターボディは、 &lt;code&gt;=&lt;/code&gt; が前に付いた1行式のいずれかまたは、中かっこで囲まれたより複雑なボディですが、セッターボディには通常割り当てが含まれているため、中かっこで囲む必要があります。年齢が負でないことを検証したい場合：</target>
        </trans-unit>
        <trans-unit id="a19ce70086035d292f555ddf789a2fb77aacd274" translate="yes" xml:space="preserve">
          <source>A property reference can be used where a function with one parameter is expected:</source>
          <target state="translated">1つのパラメータを持つ関数が想定される場合には、プロパティ参照を使用することができます。</target>
        </trans-unit>
        <trans-unit id="a6b2d5794a9f9f912eb15fc71ef317fc16b05c80" translate="yes" xml:space="preserve">
          <source>A public function/method returning an expression of a platform type must declare its Kotlin type explicitly:</source>
          <target state="translated">プラットフォーム型の式を返すパブリック関数/メソッドは、そのKotlin型を明示的に宣言しなければなりません。</target>
        </trans-unit>
        <trans-unit id="e4a1aec6d30adc10a1404a818c58d50f87fa6758" translate="yes" xml:space="preserve">
          <source>A range defines a closed interval in the mathematical sense: it is defined by its two endpoint values which are both included in the range. Ranges are defined for comparable types: having an order, you can define whether an arbitrary instance is in the range between two given instances. The main operation on ranges is &lt;code&gt;contains&lt;/code&gt;, which is usually used in the form of &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;!in&lt;/code&gt; operators.</source>
          <target state="translated">範囲は、数学的な意味で閉区間を定義します。範囲は、範囲に含まれる2つのエンドポイント値によって定義されます。範囲は、比較可能なタイプに対して定義されます。順序があれば、任意のインスタンスが2つの特定のインスタンス間の範囲内にあるかどうかを定義できます。範囲の主な操作は &lt;code&gt;contains&lt;/code&gt; です。これは通常、 &lt;code&gt;in&lt;/code&gt; および &lt;code&gt;!in&lt;/code&gt; 演算子の形式で使用されます。</target>
        </trans-unit>
        <trans-unit id="221580726f1b79e1f121d9c5b8df4ee251854dbc" translate="yes" xml:space="preserve">
          <source>A range of values of type &lt;code&gt;Char&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Char&lt;/code&gt; 型の値の範囲。</target>
        </trans-unit>
        <trans-unit id="88a09d3e9acac0664732cf11d2c6dc04f33f89d1" translate="yes" xml:space="preserve">
          <source>A range of values of type &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Int&lt;/code&gt; 型の値の範囲。</target>
        </trans-unit>
        <trans-unit id="afabce3354f73cf6ff3d9c16c2e2674280dd51c5" translate="yes" xml:space="preserve">
          <source>A range of values of type &lt;code&gt;Long&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Long&lt;/code&gt; 型の値の範囲。</target>
        </trans-unit>
        <trans-unit id="3705abd4a846fe054235e2a95a61a48c4eca8a1a" translate="yes" xml:space="preserve">
          <source>A range of values of type &lt;code&gt;UInt&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;UInt&lt;/code&gt; の値の範囲。</target>
        </trans-unit>
        <trans-unit id="1fbd8e752a1a0bcc370402ee311644d3a214dac3" translate="yes" xml:space="preserve">
          <source>A range of values of type &lt;code&gt;ULong&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;ULong&lt;/code&gt; の値の範囲。</target>
        </trans-unit>
        <trans-unit id="3d7de3a9c56c0accab12ad13f686dcc554485ec9" translate="yes" xml:space="preserve">
          <source>A raw string is delimited by a triple quote (&lt;code&gt;&quot;&quot;&quot;&lt;/code&gt;), contains no escaping and can contain newlines and any other characters:</source>
          <target state="translated">生の文字列は三重引用符（ &lt;code&gt;&quot;&quot;&quot;&lt;/code&gt; ）で区切られ、エスケープは含まれず、改行やその他の文字を含めることができます。</target>
        </trans-unit>
        <trans-unit id="5a5516e9551d2bad807411e2391edbe31ebe1675" translate="yes" xml:space="preserve">
          <source>A read-only property type (the user is expecting a &lt;code&gt;Fruit&lt;/code&gt;, and gets an &lt;code&gt;Apple&lt;/code&gt;)</source>
          <target state="translated">読み取り専用のプロパティタイプ（ユーザーは &lt;code&gt;Fruit&lt;/code&gt; を期待し、 &lt;code&gt;Apple&lt;/code&gt; を取得します）</target>
        </trans-unit>
        <trans-unit id="f241038ca168a321172b12bd8867b3601fe6885b" translate="yes" xml:space="preserve">
          <source>A reference must be explicitly marked as nullable when &lt;em&gt;null&lt;/em&gt; value is possible.</source>
          <target state="translated">&lt;em&gt;null&lt;/em&gt;値が可能な場合、参照はnullableとして明示的にマークする必要があります。</target>
        </trans-unit>
        <trans-unit id="41955f6fcbb06b4c30b37a0afd31c657401c1d19" translate="yes" xml:space="preserve">
          <source>A regular module targets a specific platform and can either be a dependency of platform modules or depend on platform modules.</source>
          <target state="translated">通常のモジュールは特定のプラットフォームを対象としており、プラットフォームモジュールに依存しているか、プラットフォームモジュールに依存しているかのどちらかになります。</target>
        </trans-unit>
        <trans-unit id="34160be81c96c4d2ed1676174bf3ae4b23c8900e" translate="yes" xml:space="preserve">
          <source>A return type (as we've already seen)</source>
          <target state="translated">戻り値の型(すでに見てきたように</target>
        </trans-unit>
        <trans-unit id="83704591cb76256bc3b326e54a087a96c9a87430" translate="yes" xml:space="preserve">
          <source>A safe call can also be placed on the left side of an assignment. Then, if one of the receivers in the safe calls chain is null, the assignment is skipped, and the expression on the right is not evaluated at all:</source>
          <target state="translated">安全な呼び出しを代入の左側に配置することもできます。そして、安全な呼び出しチェーンの受信機の1つがNULLの場合、代入はスキップされ、右側の式は全く評価されません。</target>
        </trans-unit>
        <trans-unit id="26cb3840d4fca55e7e55b38fb5d4f493cd9e25ff" translate="yes" xml:space="preserve">
          <source>A sealed class is &lt;a href=&quot;classes#abstract-classes&quot;&gt;abstract&lt;/a&gt; by itself, it cannot be instantiated directly and can have &lt;em&gt;abstract&lt;/em&gt; members.</source>
          <target state="translated">シールドクラスはそれ自体が&lt;a href=&quot;classes#abstract-classes&quot;&gt;抽象&lt;/a&gt;クラスであり、直接インスタンス化することはできず、&lt;em&gt;抽象&lt;/em&gt;メンバーを持つことができます。</target>
        </trans-unit>
        <trans-unit id="8457cb4b6b370531b78c522f162b937449277750" translate="yes" xml:space="preserve">
          <source>A sequence that returns values through its iterator. The values are evaluated lazily, and the sequence is potentially infinite.</source>
          <target state="translated">イテレータを通して値を返すシーケンス.値は遅延的に評価され、シーケンスは無限になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="7265e100a83e4681e997a3291f0bd196c84d5b43" translate="yes" xml:space="preserve">
          <source>A series of complete step-by-step tutorials to walk you through how to accomplish different tasks in Kotlin, from Getting Started to writing Android applications and more. If you have a tutorial you'd like featured here, please let us know. We'll be happy to host it and give credit!</source>
          <target state="translated">Kotlin の入門編から Android アプリケーションの作成まで、Kotlin での様々なタスクを達成する方法をステップバイステップで説明する完全なチュートリアルシリーズです。ここで紹介したいチュートリアルがあれば、ぜひお知らせください。喜んでホストし、クレジットを提供します。</target>
        </trans-unit>
        <trans-unit id="4488cb2716f1ba3dca6886de2da7a5d7ed90ffb5" translate="yes" xml:space="preserve">
          <source>A set of extension functions was added for manipulating lists: &lt;code&gt;fill&lt;/code&gt;, &lt;code&gt;replaceAll&lt;/code&gt; and &lt;code&gt;shuffle&lt;/code&gt; for &lt;code&gt;MutableList&lt;/code&gt;, and &lt;code&gt;shuffled&lt;/code&gt; for read-only &lt;code&gt;List&lt;/code&gt;:</source>
          <target state="translated">：拡張機能のセットは、リストを操作するために添加した &lt;code&gt;fill&lt;/code&gt; 、 &lt;code&gt;replaceAll&lt;/code&gt; と &lt;code&gt;shuffle&lt;/code&gt; のため &lt;code&gt;MutableList&lt;/code&gt; 、および &lt;code&gt;shuffled&lt;/code&gt; 読み取り専用のための &lt;code&gt;List&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="62b64f509cf25a0a71280021d8d233038539b6d7" translate="yes" xml:space="preserve">
          <source>A set of factory methods is used for declaring elements of the &lt;code&gt;binaries&lt;/code&gt; collection. These methods allow one to specify what kinds of binaries are to be created and configure them. The following binary kinds are supported (note that not all the kinds are available for all native platforms):</source>
          <target state="translated">一連のファクトリメソッドは、 &lt;code&gt;binaries&lt;/code&gt; コレクションの要素を宣言するために使用されます。これらのメソッドを使用すると、作成するバイナリの種類を指定して構成できます。次のバイナリの種類がサポートされています（すべての種類がすべてのネイティブプラットフォームで使用できるわけではないことに注意してください）。</target>
        </trans-unit>
        <trans-unit id="55d25bafc109a837fa16e50504d1fe3a3785094d" translate="yes" xml:space="preserve">
          <source>A setter method, with the name calculated by prepending the &lt;code&gt;set&lt;/code&gt; prefix (only for &lt;code&gt;var&lt;/code&gt; properties);</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; プレフィックスを付加することによって名前が計算されるセッターメソッド（ &lt;code&gt;var&lt;/code&gt; プロパティの場合のみ）;</target>
        </trans-unit>
        <trans-unit id="a79440aad6b71d56ce4283f0e84514842d6f1254" translate="yes" xml:space="preserve">
          <source>A shorter way to define a &lt;code&gt;Comparator&lt;/code&gt; is the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.comparisons/compare-by&quot;&gt;&lt;code&gt;compareBy()&lt;/code&gt;&lt;/a&gt; function from the standard library. &lt;code&gt;compareBy()&lt;/code&gt; takes a lambda function that produces a &lt;code&gt;Comparable&lt;/code&gt; value from an instance and defines the custom order as the natural order of the produced values. With &lt;code&gt;compareBy()&lt;/code&gt;, the length comparator from the example above looks like this:</source>
          <target state="translated">&lt;code&gt;Comparator&lt;/code&gt; を定義する短い方法は、標準ライブラリの&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.comparisons/compare-by&quot;&gt; &lt;code&gt;compareBy()&lt;/code&gt; &lt;/a&gt;関数です。 &lt;code&gt;compareBy()&lt;/code&gt; は、インスタンスから &lt;code&gt;Comparable&lt;/code&gt; 値を生成するラムダ関数を取り、生成された値の自然順序としてカスタム順序を定義します。付 &lt;code&gt;compareBy()&lt;/code&gt; 、次のようになり、上記の例からの長さコンパレータ：</target>
        </trans-unit>
        <trans-unit id="c8d41cb6d401bf4d42a494408558f6a917e8029e" translate="yes" xml:space="preserve">
          <source>A significant part of the definitions goes in the &lt;code&gt;libnative_api.h&lt;/code&gt; file. It includes the definition of our Kotlin/Native library world:</source>
          <target state="translated">定義の重要な部分は &lt;code&gt;libnative_api.h&lt;/code&gt; ファイルにあります。Kotlin /ネイティブライブラリの世界の定義が含まれています。</target>
        </trans-unit>
        <trans-unit id="8c62e96107720a9bca1a776893d559e996f2f875" translate="yes" xml:space="preserve">
          <source>A single annotation without arguments may be placed on the same line as the corresponding declaration:</source>
          <target state="translated">引数のない単一の注釈は、対応する宣言と同じ行に置くことができます。</target>
        </trans-unit>
        <trans-unit id="2b436cfd5069ee133fe3275c0591a75add8ffd26" translate="yes" xml:space="preserve">
          <source>A source file may start with a package declaration:</source>
          <target state="translated">ソースファイルはパッケージ宣言で始まることがあります。</target>
        </trans-unit>
        <trans-unit id="021186335ce0a94c240ef97ae9b17e18e4801b7f" translate="yes" xml:space="preserve">
          <source>A source set by itself is platform-agnostic, but it can be considered platform-specific if it is only compiled for a single platform. A source set can, therefore, contain either common code shared between the platforms or platform-specific code.</source>
          <target state="translated">ソースセットはそれ自体がプラットフォームに依存しませんが、単一のプラットフォーム用にコンパイルされているだけであれば、プラットフォーム固有のコードとみなすことができます。そのため、ソースセットには、プラットフォーム間で共有される共通のコードか、プラットフォーム固有のコードのどちらかを含めることができます。</target>
        </trans-unit>
        <trans-unit id="e0c4b0ff108f076b7bc92f46447b67f1f632fcfb" translate="yes" xml:space="preserve">
          <source>A source set is not bound to be platform-specific or &quot;shared&quot;; what it's allowed to contain depends on its usage: a source set added to multiple compilations is limited to the common language features and dependencies, while a source set that is only used by a single target can have platform-specific dependencies, and its code may use language features specific to that target's platform.</source>
          <target state="translated">複数のコンパイルに追加されたソースセットは、共通の言語機能と依存関係に限定されますが、単一のターゲットでのみ使用されるソースセットは、プラットフォーム固有の依存関係を持つことができ、そのコードはそのターゲットのプラットフォーム固有の言語機能を使用することができます。</target>
        </trans-unit>
        <trans-unit id="cc425ab30bdba05aac08e3df265edc9f79e66b7c" translate="yes" xml:space="preserve">
          <source>A symbol that is declared inside an interface normally should be public. The only other legal visibility modifier is &lt;code&gt;private&lt;/code&gt;, which can only be used if the function body is supplied - that function may then be called by each class that implements the interface, but not by anyone else.</source>
          <target state="translated">インターフェース内で宣言されたシンボルは、通常、公開する必要があります。他の唯一の有効な可視性修飾子は &lt;code&gt;private&lt;/code&gt; です。これは、関数本体が指定されている場合にのみ使用できます。その関数は、インターフェイスを実装する各クラスによって呼び出されますが、他のユーザーによって呼び出されることはありません。</target>
        </trans-unit>
        <trans-unit id="32d61e578eecdd26bc4fc5d5cfb020754a651496" translate="yes" xml:space="preserve">
          <source>A syntactic variation of &lt;code&gt;run()&lt;/code&gt; is &lt;code&gt;let()&lt;/code&gt;, which takes an ordinary function type instead of a function type with receiver, so the expression that might be null will be referred to as &lt;code&gt;it&lt;/code&gt; instead of &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;run()&lt;/code&gt; の構文のバリエーションは &lt;code&gt;let()&lt;/code&gt; です。これは、レシーバーを持つ関数タイプではなく、通常の関数タイプを取るため、nullの可能性がある式は、 &lt;code&gt;this&lt;/code&gt; ではなく、 &lt;code&gt;it&lt;/code&gt; と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="f5545fc39ffaf26de75f2d70b8d37780f23c4704" translate="yes" xml:space="preserve">
          <source>A target is a part of the build responsible for compiling, testing, and packaging a piece of software aimed for one of the &lt;a href=&quot;#supported-platforms&quot;&gt;supported platforms&lt;/a&gt;.</source>
          <target state="translated">ターゲットは、&lt;a href=&quot;#supported-platforms&quot;&gt;サポートされているプラ​​ットフォームの&lt;/a&gt; 1つを対象としたソフトウェアのコンパイル、テスト、およびパッケージ化を行うビルドの一部です。</target>
        </trans-unit>
        <trans-unit id="999c54676b7660630ed4d00049d50a094fccdfab" translate="yes" xml:space="preserve">
          <source>A target that is not supported by the current host is ignored during build and therefore not published. A library author may want to set up builds and publishing from different hosts as required by the library target platforms.</source>
          <target state="translated">現在のホストでサポートされていないターゲットは、ビルド中に無視され、公開されません。ライブラリの作者は、ライブラリのターゲットプラットフォームが必要とするように、異なるホストからのビルドと公開を設定したいと思うかもしれません。</target>
        </trans-unit>
        <trans-unit id="96fcc60b3ab303801bc0dc081c98259cae3bf787" translate="yes" xml:space="preserve">
          <source>A test task is created under the name &lt;code&gt;&amp;lt;targetName&amp;gt;Test&lt;/code&gt; for each target that is suitable for testing. Run the &lt;code&gt;check&lt;/code&gt; task to run the tests for all targets.</source>
          <target state="translated">テストに適したターゲットごとに、 &lt;code&gt;&amp;lt;targetName&amp;gt;Test&lt;/code&gt; という名前でテストタスクが作成されます。実行 &lt;code&gt;check&lt;/code&gt; すべてのターゲットのテストを実行するタスクを。</target>
        </trans-unit>
        <trans-unit id="c9a04a4de5ccd8f9acab09df372876b6003bb150" translate="yes" xml:space="preserve">
          <source>A type alias allows you to define an alternative name for an existing type. This is most useful for generic types such as collections, as well as for function types. Here is an example:</source>
          <target state="translated">型のエイリアスを使用すると、既存の型の代替名を定義することができます。これは、関数型と同様に、コレクションのような汎用的な型に最も便利です。以下に例を示します。</target>
        </trans-unit>
        <trans-unit id="d9a02cc3c9a98a1f2eefa73c09ae2ace003cceec" translate="yes" xml:space="preserve">
          <source>A type-safe builder example</source>
          <target state="translated">型安全ビルダの例</target>
        </trans-unit>
        <trans-unit id="6c942af40c87105ce9bd9accffec18f0f29c5897" translate="yes" xml:space="preserve">
          <source>A value of a function type can be invoked by using its &lt;a href=&quot;operator-overloading#invoke&quot;&gt;&lt;code&gt;invoke(...)&lt;/code&gt; operator&lt;/a&gt;: &lt;code&gt;f.invoke(x)&lt;/code&gt; or just &lt;code&gt;f(x)&lt;/code&gt;.</source>
          <target state="translated">関数タイプの値は、その&lt;a href=&quot;operator-overloading#invoke&quot;&gt; &lt;code&gt;invoke(...)&lt;/code&gt; 演算子&lt;/a&gt;を使用して呼び出すことができます： &lt;code&gt;f.invoke(x)&lt;/code&gt; または単に &lt;code&gt;f(x)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3803ccd0cee93213eb0c6456398b134b14b2e36e" translate="yes" xml:space="preserve">
          <source>A variable only exists inside the &lt;em&gt;scope&lt;/em&gt; (curly-brace-enclosed block of code; more on that later) in which it has been declared - so a variable that's declared inside a loop only exists in that loop; you can't check its final value after the loop. Variables can be redeclared inside nested scopes - so if there's a parameter &lt;code&gt;x&lt;/code&gt; to a function and you create a loop and declare an &lt;code&gt;x&lt;/code&gt; inside that loop, the &lt;code&gt;x&lt;/code&gt; inside the loop is a different variable than the parameter &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">変数は、宣言された&lt;em&gt;スコープ&lt;/em&gt;（中括弧で囲まれたコードブロック、後で詳しく説明します）内にのみ存在します。したがって、ループ内で宣言された変数は、そのループ内にのみ存在します。ループ後に最終値を確認することはできません。変数は、ネストされたスコープ内で再宣言することができます-パラメータがありますので、場合 &lt;code&gt;x&lt;/code&gt; の関数には、あなたがループを作成し、宣言 &lt;code&gt;x&lt;/code&gt; そのループ内に、 &lt;code&gt;x&lt;/code&gt; ループ内では、パラメータとは異なる変数である &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2ee49960f9187f3de855aad0164b2243999549a6" translate="yes" xml:space="preserve">
          <source>A variable that doesn't refer to anything refers to &lt;code&gt;null&lt;/code&gt; (or you can say that the variable &quot;is null&quot;). As opposed to &lt;code&gt;None&lt;/code&gt; in Python, &lt;code&gt;null&lt;/code&gt; is not an object - it's just a keyword that is used to make a variable refer to nothing or to check if it does (that check must be performed with &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt;). Because nulls are a frequent source of programming errors, Kotlin encourages avoiding them as much as possible - a variable cannot actually be null unless it's been declared to allow for null, which you do by suffixing the type name with &lt;code&gt;?&lt;/code&gt;. For example:</source>
          <target state="translated">何も参照しない変数は &lt;code&gt;null&lt;/code&gt; を参照します（または、変数は「null」であると言えます）。Pythonの &lt;code&gt;None&lt;/code&gt; とは対照的に、 &lt;code&gt;null&lt;/code&gt; はオブジェクトではありません。これは、変数が何も参照しないようにするため、または参照するかどうかを確認するために使用される単なるキーワードです（ &lt;code&gt;==&lt;/code&gt; または &lt;code&gt;!=&lt;/code&gt; で確認する必要があります）。 nullはプログラミングエラーの頻繁な原因であるため、Kotlinはそれらを可能な限り回避することを推奨しています。nullを許可するように宣言されていない限り、変数を実際にnullにすることはできません &lt;code&gt;?&lt;/code&gt; 。例えば：</target>
        </trans-unit>
        <trans-unit id="2c75a304d0b9d2b04fc8b2ae831b34ab2f8b99cb" translate="yes" xml:space="preserve">
          <source>A vector of bits growing if necessary and allowing one to set/clear/read bits from it by a bit index.</source>
          <target state="translated">必要に応じて成長するビットのベクトルで、ビットインデックスによってそこからビットをセット/クリア/リードすることができます。</target>
        </trans-unit>
        <trans-unit id="3f447137bd99bb0df9c8a7342bebccf5cbfda3a7" translate="yes" xml:space="preserve">
          <source>A version of the Gradle project is used as a value for the &lt;code&gt;version&lt;/code&gt; field. Fields&lt;code&gt;summary&lt;/code&gt; and &lt;code&gt;homepage&lt;/code&gt; can be configured using the &lt;code&gt;cocoapods&lt;/code&gt; code block.</source>
          <target state="translated">Gradleプロジェクトの &lt;code&gt;version&lt;/code&gt; は、バージョンフィールドの値として使用されます。フィールドの &lt;code&gt;summary&lt;/code&gt; と &lt;code&gt;homepage&lt;/code&gt; は、 &lt;code&gt;cocoapods&lt;/code&gt; コードブロックを使用して構成できます。</target>
        </trans-unit>
        <trans-unit id="2b7d487bfac9fc377272b7fe65ffeb000fb2421c" translate="yes" xml:space="preserve">
          <source>A zero-based index of current iteration is passed as a parameter to &lt;a href=&quot;repeat#kotlin%24repeat%28kotlin.Int%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt;.</source>
          <target state="translated">現在の反復のゼロベースのインデックスがパラメーターとして&lt;a href=&quot;repeat#kotlin%24repeat%28kotlin.Int%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;actionに&lt;/a&gt;渡されます。</target>
        </trans-unit>
        <trans-unit id="83a7a5b782649abaa2ee5c51a6e8c21d46906a36" translate="yes" xml:space="preserve">
          <source>A: As Kotlin/Native needs to download a platform specific toolchain, you need to specify &lt;code&gt;-Dhttp.proxyHost=xxx -Dhttp.proxyPort=xxx&lt;/code&gt; as the compiler's or &lt;code&gt;gradlew&lt;/code&gt; arguments, or set it via the &lt;code&gt;JAVA_OPTS&lt;/code&gt; environment variable.</source>
          <target state="translated">A：Kotlin / Nativeはプラットフォーム固有のツールチェーンをダウンロードする必要があるため、コンパイラの引数または &lt;code&gt;gradlew&lt;/code&gt; 引数として &lt;code&gt;-Dhttp.proxyHost=xxx -Dhttp.proxyPort=xxx&lt;/code&gt; を指定するか、 &lt;code&gt;JAVA_OPTS&lt;/code&gt; 環境変数を介して設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="f48fa5d2280b5e4c31db2f6ac951ea7fe7772538" translate="yes" xml:space="preserve">
          <source>A: By default gradle plugin adds it on iOS target.</source>
          <target state="translated">A:gradleプラグインのデフォルトではiOSターゲットに追加されています。</target>
        </trans-unit>
        <trans-unit id="54f627a5de981e9923ac5206ecaba6b5056c6d69" translate="yes" xml:space="preserve">
          <source>A: Currently, singleton objects are immutable (i.e. frozen after creation), and it's generally considered good practise to have the global state immutable. If for some reason you need a mutable state inside such an object, use the &lt;code&gt;@konan.ThreadLocal&lt;/code&gt; annotation on the object. Also the &lt;code&gt;kotlin.native.concurrent.AtomicReference&lt;/code&gt; class could be used to store different pointers to frozen objects in a frozen object and automatically update them.</source>
          <target state="translated">A：現在、シングルトンオブジェクトは不変（つまり、作成後にフリーズ）であり、グローバル状態を不変にすることは、一般的には良い方法と考えられています。なんらかの理由でそのようなオブジェクト内で変更可能な状態が必要な場合は、オブジェクトで &lt;code&gt;@konan.ThreadLocal&lt;/code&gt; アノテーションを使用します。また、 &lt;code&gt;kotlin.native.concurrent.AtomicReference&lt;/code&gt; クラスを使用して、凍結されたオブジェクトへのさまざまなポインターを凍結されたオブジェクトに格納し、それらを自動的に更新することもできます。</target>
        </trans-unit>
        <trans-unit id="469aef55abc3b452c640ed57fd2b4a77ac9d9c2a" translate="yes" xml:space="preserve">
          <source>A: Define a top level function &lt;code&gt;fun main(args: Array&amp;lt;String&amp;gt;)&lt;/code&gt; or just &lt;code&gt;fun main()&lt;/code&gt; if you are not interested in passed arguments, please ensure it's not in a package. Also compiler switch &lt;code&gt;-entry&lt;/code&gt; could be used to make any function taking &lt;code&gt;Array&amp;lt;String&amp;gt;&lt;/code&gt; or no arguments and return &lt;code&gt;Unit&lt;/code&gt; as an entry point.</source>
          <target state="translated">A：トップレベルの関数 &lt;code&gt;fun main(args: Array&amp;lt;String&amp;gt;)&lt;/code&gt; 定義するか、渡された引数に関心がない場合は &lt;code&gt;fun main()&lt;/code&gt; を定義してください。パッケージに含まれていないことを確認してください。また、コンパイラスイッチ &lt;code&gt;-entry&lt;/code&gt; を使用して、 &lt;code&gt;Array&amp;lt;String&amp;gt;&lt;/code&gt; 引数として取る関数または引数なしの関数を作成し、 &lt;code&gt;Unit&lt;/code&gt; をエントリポイントとして返すこともできます。</target>
        </trans-unit>
        <trans-unit id="23a7f68b33d01081eaa44341c44994d7c2b4bc72" translate="yes" xml:space="preserve">
          <source>A: It likely happens, because you are trying to mutate a frozen object. An object can transfer to the frozen state either explicitly, as objects reachable from objects on which the &lt;code&gt;kotlin.native.concurrent.freeze&lt;/code&gt; is called, or implicitly (i.e. reachable from &lt;code&gt;enum&lt;/code&gt; or global singleton object - see the next question).</source>
          <target state="translated">A：おそらく、フリーズしたオブジェクトを変更しようとしているためです。オブジェクトは、 &lt;code&gt;kotlin.native.concurrent.freeze&lt;/code&gt; が呼び出されたオブジェクトから到達可能なオブジェクトとして明示的に、または暗黙的に（つまり、 &lt;code&gt;enum&lt;/code&gt; またはグローバルシングルトンオブジェクトから到達可能-次の質問を参照）、凍結状態に移行できます。</target>
        </trans-unit>
        <trans-unit id="bc0e72bdf6f524c2737d88889afe4af011df20fb" translate="yes" xml:space="preserve">
          <source>A: Kotlin/Native provides an automated memory management scheme, similar to what Java or Swift provides. The current implementation includes an automated reference counter with a cycle collector to collect cyclical garbage.</source>
          <target state="translated">A:Kotlin/Nativeは、JavaやSwiftが提供するものと同様の、自動化されたメモリ管理スキームを提供します。現在の実装には、周期的なガベージを収集するためのサイクルコレクタを備えた自動化された参照カウンタが含まれています。</target>
        </trans-unit>
        <trans-unit id="6430ac738ad0305a45bbf44b4a1ea65027089a78" translate="yes" xml:space="preserve">
          <source>A: One of the following should be done:</source>
          <target state="translated">A:次のいずれかを行う。</target>
        </trans-unit>
        <trans-unit id="fe5cae9a95608abbf572b32e151c3389de9906d9" translate="yes" xml:space="preserve">
          <source>A: Use the &lt;code&gt;-module-name&lt;/code&gt; compiler option or matching Gradle DSL statement, i.e.</source>
          <target state="translated">A： &lt;code&gt;-module-name&lt;/code&gt; コンパイラオプションまたは一致するGradle DSLステートメントを使用します。</target>
        </trans-unit>
        <trans-unit id="d178f6b7d7ab96c56c796a94a8ffd31fd8247adc" translate="yes" xml:space="preserve">
          <source>A: Use the &lt;code&gt;-produce dynamic&lt;/code&gt; compiler switch, or &lt;code&gt;binaries.sharedLib()&lt;/code&gt; in Gradle, i.e.</source>
          <target state="translated">A： &lt;code&gt;-produce dynamic&lt;/code&gt; コンパイラスイッチ、またはGradleの &lt;code&gt;binaries.sharedLib()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="583522dc14200ed2d6737834038b23fd2169fb2d" translate="yes" xml:space="preserve">
          <source>A: Use the &lt;code&gt;-produce static&lt;/code&gt; compiler switch, or &lt;code&gt;binaries.staticLib()&lt;/code&gt; in Gradle, i.e.</source>
          <target state="translated">A： &lt;code&gt;-produce static&lt;/code&gt; コンパイラスイッチを使用するか、Gradleで &lt;code&gt;binaries.staticLib()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="55ad722eb4893f232638d8208f5ef26172c240a1" translate="yes" xml:space="preserve">
          <source>A: Use the &lt;code&gt;baseName&lt;/code&gt; option. This will also set the module name.</source>
          <target state="translated">A： &lt;code&gt;baseName&lt;/code&gt; オプションを使用します。これにより、モジュール名も設定されます。</target>
        </trans-unit>
        <trans-unit id="8bdc6249aa90c585c50dc149a1ac486df2283f04" translate="yes" xml:space="preserve">
          <source>AIR</source>
          <target state="translated">AIR</target>
        </trans-unit>
        <trans-unit id="81297a2ee021a840a160551409407615f0d05b15" translate="yes" xml:space="preserve">
          <source>ANDROID</source>
          <target state="translated">ANDROID</target>
        </trans-unit>
        <trans-unit id="c7b386585a8cd45bbd249d61f6484c48e856d346" translate="yes" xml:space="preserve">
          <source>ANNOTATION_CLASS</source>
          <target state="translated">ANNOTATION_CLASS</target>
        </trans-unit>
        <trans-unit id="4a3a08afddace26444e6c02edee535eca390133a" translate="yes" xml:space="preserve">
          <source>AP/Javac options encoding</source>
          <target state="translated">AP/Javac エンコーディングオプション</target>
        </trans-unit>
        <trans-unit id="a4c5aa30008f131f9b717d9610a66f2353fd31d2" translate="yes" xml:space="preserve">
          <source>ARABIC_NUMBER</source>
          <target state="translated">ARABIC_NUMBER</target>
        </trans-unit>
        <trans-unit id="2b3110c25b23e7d1307e6fca7f13cd56712696aa" translate="yes" xml:space="preserve">
          <source>ARM32</source>
          <target state="translated">ARM32</target>
        </trans-unit>
        <trans-unit id="bb16ce026bf1a07a5455f7b9ddaf3fa1e5dc5686" translate="yes" xml:space="preserve">
          <source>ARM64</source>
          <target state="translated">ARM64</target>
        </trans-unit>
        <trans-unit id="22389c32b9d7ab2b2fdb4e3d99b9053c4e8d3d88" translate="yes" xml:space="preserve">
          <source>AT_LEAST_ONCE</source>
          <target state="translated">AT_LEAST_ONCE</target>
        </trans-unit>
        <trans-unit id="dcc1fcaf1557c4d05679436118b3946273a18903" translate="yes" xml:space="preserve">
          <source>AT_MOST_ONCE</source>
          <target state="translated">AT_MOST_ONCE</target>
        </trans-unit>
        <trans-unit id="49ade02a332b7c166aa17f14fd846c7d9e1bd27d" translate="yes" xml:space="preserve">
          <source>AWS Labs provides a &lt;a href=&quot;https://github.com/awslabs/serverless-photo-recognition&quot;&gt;sample project&lt;/a&gt; showing the use of Kotlin for writing &lt;a href=&quot;https://aws.amazon.com/lambda/&quot;&gt;AWS Lambda&lt;/a&gt; functions.</source>
          <target state="translated">AWS Labsは、&lt;a href=&quot;https://aws.amazon.com/lambda/&quot;&gt;AWS Lambda&lt;/a&gt;関数を作成するためのKotlinの使用を示す&lt;a href=&quot;https://github.com/awslabs/serverless-photo-recognition&quot;&gt;サンプルプロジェクト&lt;/a&gt;を提供しています。</target>
        </trans-unit>
        <trans-unit id="119f87452b9c604da175968848ba17b7bfa8e536" translate="yes" xml:space="preserve">
          <source>Absence of implicit conversions is rarely noticeable because the type is inferred from the context, and arithmetical operations are overloaded for appropriate conversions, for example</source>
          <target state="translated">暗黙の変換が存在しないことに気付くことはほとんどありませんが,これは型がコンテキストから推測され,適切な変換のために算術演算がオーバーロードされるからです.</target>
        </trans-unit>
        <trans-unit id="af4c6101610761ea26e2cfbf041a94da323abdcc" translate="yes" xml:space="preserve">
          <source>Abstract Classes</source>
          <target state="translated">抽象クラス</target>
        </trans-unit>
        <trans-unit id="32f08ac28cfa041c2b36410b7bb09baeffc3885e" translate="yes" xml:space="preserve">
          <source>Abstract classes</source>
          <target state="translated">抽象クラス</target>
        </trans-unit>
        <trans-unit id="8cac6657db372ec98eec0f1c267bc27922cdbf4d" translate="yes" xml:space="preserve">
          <source>Abstract classes are implicitly open, since they are useless if they don't have any concrete subclasses.</source>
          <target state="translated">抽象クラスは、具体的なサブクラスがないと意味がないので、暗黙のうちにオープンにしています。</target>
        </trans-unit>
        <trans-unit id="372af3b44fec0ec5a2dae9015dd5aa97b0e6f7cc" translate="yes" xml:space="preserve">
          <source>Abstract collections</source>
          <target state="translated">抽象的なコレクション</target>
        </trans-unit>
        <trans-unit id="62deadea5aa50c02c734a956de1e99c71e45bf05" translate="yes" xml:space="preserve">
          <source>AbstractCollection</source>
          <target state="translated">AbstractCollection</target>
        </trans-unit>
        <trans-unit id="ecc696822df6b79b8a28e672bebead3cbea32633" translate="yes" xml:space="preserve">
          <source>AbstractCoroutineContextElement</source>
          <target state="translated">AbstractCoroutineContextElement</target>
        </trans-unit>
        <trans-unit id="3fcebf45d4e6c238fc15c900d4cdbbe3983ba070" translate="yes" xml:space="preserve">
          <source>AbstractIterator</source>
          <target state="translated">AbstractIterator</target>
        </trans-unit>
        <trans-unit id="80b25eb6b4fc66c38a02c0db0db4701efc036bfe" translate="yes" xml:space="preserve">
          <source>AbstractList</source>
          <target state="translated">AbstractList</target>
        </trans-unit>
        <trans-unit id="e5b1267bb3362c3d2609d08b1cc8a480c087ece8" translate="yes" xml:space="preserve">
          <source>AbstractMap</source>
          <target state="translated">AbstractMap</target>
        </trans-unit>
        <trans-unit id="d196bcf450087d1563b9908b7c60861d7a7b03d3" translate="yes" xml:space="preserve">
          <source>AbstractMutableCollection</source>
          <target state="translated">AbstractMutableCollection</target>
        </trans-unit>
        <trans-unit id="cdab0b7c59398ffe8f8c4e2414f6fb32c45154f4" translate="yes" xml:space="preserve">
          <source>AbstractMutableList</source>
          <target state="translated">AbstractMutableList</target>
        </trans-unit>
        <trans-unit id="1dbbde4c21f402ba61eaeabc7559d1d8b069c230" translate="yes" xml:space="preserve">
          <source>AbstractMutableMap</source>
          <target state="translated">AbstractMutableMap</target>
        </trans-unit>
        <trans-unit id="29ae24d786bef4da7e776d19818073cb89a6fefb" translate="yes" xml:space="preserve">
          <source>AbstractMutableSet</source>
          <target state="translated">AbstractMutableSet</target>
        </trans-unit>
        <trans-unit id="ce89d8527dc144fe8623087bd9235422a835ad7f" translate="yes" xml:space="preserve">
          <source>AbstractSet</source>
          <target state="translated">AbstractSet</target>
        </trans-unit>
        <trans-unit id="78edc1854054dd0a65df4bf632ca35ca20d99437" translate="yes" xml:space="preserve">
          <source>AbstractWorker</source>
          <target state="translated">AbstractWorker</target>
        </trans-unit>
        <trans-unit id="54c67fd3d098f3a0f1411f92bb9d4b4763843d8c" translate="yes" xml:space="preserve">
          <source>Access to top-level properties (&lt;code&gt;document&lt;/code&gt;, &lt;code&gt;window&lt;/code&gt; etc.) in the browser environment.</source>
          <target state="translated">ブラウザ環境のトップレベルのプロパティ（ &lt;code&gt;document&lt;/code&gt; 、 &lt;code&gt;window&lt;/code&gt; など）へのアクセス。</target>
        </trans-unit>
        <trans-unit id="062b46dbf1f59a76df58f1a799356641383d7198" translate="yes" xml:space="preserve">
          <source>AccessDeniedException</source>
          <target state="translated">AccessDeniedException</target>
        </trans-unit>
        <trans-unit id="8a353ce773c51b184dc9ab781e4fce8619d42835" translate="yes" xml:space="preserve">
          <source>Accessing a &lt;code&gt;lateinit&lt;/code&gt; property before it has been initialized throws a special exception that clearly identifies the property being accessed and the fact that it hasn't been initialized.</source>
          <target state="translated">アクセス &lt;code&gt;lateinit&lt;/code&gt; それが初期化されている前に、プロパティは、明確にアクセスされているプロパティとそれが初期化されていないという事実を特定する特殊な例外をスローします。</target>
        </trans-unit>
        <trans-unit id="6f5a767ddc1bd76dea008380c3691401bac40d76" translate="yes" xml:space="preserve">
          <source>Accessing a map</source>
          <target state="translated">地図へのアクセス</target>
        </trans-unit>
        <trans-unit id="ded4c19079868702de4a0401515f9859ce6d0d41" translate="yes" xml:space="preserve">
          <source>Accessing binaries</source>
          <target state="translated">バイナリへのアクセス</target>
        </trans-unit>
        <trans-unit id="dc33d6b550c28222c845e121b06fbd0aed19e534" translate="yes" xml:space="preserve">
          <source>Accessing properties of an annotation instance</source>
          <target state="translated">アノテーション インスタンスのプロパティへのアクセス</target>
        </trans-unit>
        <trans-unit id="2593716ac51411fe9db10d5eff2682c068580793" translate="yes" xml:space="preserve">
          <source>Accessing static members</source>
          <target state="translated">静的メンバーへのアクセス</target>
        </trans-unit>
        <trans-unit id="cf842181d642477f23f2c69b279d1bfb3dc226bf" translate="yes" xml:space="preserve">
          <source>Accessing this property first time creates a keys view from &lt;a href=&quot;../-map/entries#kotlin.collections.Map%24entries&quot;&gt;entries&lt;/a&gt;. All subsequent accesses just return the created instance.</source>
          <target state="translated">このプロパティに初めてアクセスすると、&lt;a href=&quot;../-map/entries#kotlin.collections.Map%24entries&quot;&gt;エントリ&lt;/a&gt;からキービューが作成されます。後続のすべてのアクセスは、作成されたインスタンスを返すだけです。</target>
        </trans-unit>
        <trans-unit id="deda93269f212a2a0f24d9b71bae5f2f0178db44" translate="yes" xml:space="preserve">
          <source>Accessing this property first time creates a values view from &lt;a href=&quot;../-map/entries#kotlin.collections.Map%24entries&quot;&gt;entries&lt;/a&gt;. All subsequent accesses just return the created instance.</source>
          <target state="translated">このプロパティに初めてアクセスすると、&lt;a href=&quot;../-map/entries#kotlin.collections.Map%24entries&quot;&gt;エントリ&lt;/a&gt;から値ビューが作成されます。後続のすべてのアクセスは、作成されたインスタンスを返すだけです。</target>
        </trans-unit>
        <trans-unit id="547cfc7558e9e8755a8cea3edea36cf00e80e196" translate="yes" xml:space="preserve">
          <source>Accessor</source>
          <target state="translated">Accessor</target>
        </trans-unit>
        <trans-unit id="2d8b9d11aed9ad552693fdb8b7b4209cbca66a6c" translate="yes" xml:space="preserve">
          <source>According to Java's rules, &lt;code&gt;finalize()&lt;/code&gt; must not be &lt;em&gt;private&lt;/em&gt;.</source>
          <target state="translated">Javaのルールによると、 &lt;code&gt;finalize()&lt;/code&gt; は&lt;em&gt;privateであって&lt;/em&gt;はなりません。</target>
        </trans-unit>
        <trans-unit id="a6cd67dc89d8085d643ec218854da3053ee3016a" translate="yes" xml:space="preserve">
          <source>According to the Feedback Loop principle described above, we iterate on our designs in the open and release versions of the language where some features have the &lt;em&gt;experimental&lt;/em&gt; status and &lt;em&gt;are supposed to change&lt;/em&gt;. Experimental features can be added, changed or removed at any point and without warning. We make sure that experimental features can't be used accidentally by an unsuspecting user. Such features usually require some sort of an explicit opt-in either in the code or in the project configuration.</source>
          <target state="translated">上記のフィードバックループの原則に従って、一部の機能が&lt;em&gt;試験的な&lt;/em&gt;状態にあり&lt;em&gt;、変更されることが想定され&lt;/em&gt;ている言語のオープンバージョンとリリースバージョンで設計を繰り返し&lt;em&gt;ます&lt;/em&gt;。実験的な機能は、いつでも警告なしに追加、変更、または削除できます。疑いを持たないユーザーが実験的な機能を誤って使用しないようにしています。このような機能は通常、コードまたはプロジェクト構成のいずれかで何らかの明示的なオプトインを必要とします。</target>
        </trans-unit>
        <trans-unit id="3607a01777a8d5a65ab1d061a49e095a4fcb830f" translate="yes" xml:space="preserve">
          <source>Accumulates entries of this context starting with &lt;a href=&quot;../-coroutine-context/fold#kotlin.coroutines.CoroutineContext%24fold%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.coroutines.CoroutineContext.Element%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../-coroutine-context/fold#kotlin.coroutines.CoroutineContext%24fold%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.coroutines.CoroutineContext.Element%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element of this context.</source>
          <target state="translated">&lt;a href=&quot;../-coroutine-context/fold#kotlin.coroutines.CoroutineContext%24fold%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.coroutines.CoroutineContext.Element%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、左から右に現在のアキュムレータ値とこのコンテキストの各要素に&lt;a href=&quot;../-coroutine-context/fold#kotlin.coroutines.CoroutineContext%24fold%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.coroutines.CoroutineContext.Element%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用して、このコンテキストのエントリを累積します。</target>
        </trans-unit>
        <trans-unit id="71476199892facc6d22265c0f1d161804d8adacd" translate="yes" xml:space="preserve">
          <source>Accumulates entries of this context starting with &lt;a href=&quot;../-coroutine-context/fold#kotlin.coroutines.experimental.CoroutineContext%24fold%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.coroutines.experimental.CoroutineContext.Element%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../-coroutine-context/fold#kotlin.coroutines.experimental.CoroutineContext%24fold%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.coroutines.experimental.CoroutineContext.Element%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element of this context.</source>
          <target state="translated">&lt;a href=&quot;../-coroutine-context/fold#kotlin.coroutines.experimental.CoroutineContext%24fold%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.coroutines.experimental.CoroutineContext.Element%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、左から右に現在のアキュムレータ値とこのコンテキストの各要素に&lt;a href=&quot;../-coroutine-context/fold#kotlin.coroutines.experimental.CoroutineContext%24fold%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.coroutines.experimental.CoroutineContext.Element%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用して、このコンテキストのエントリを累積します。</target>
        </trans-unit>
        <trans-unit id="1c9c7f55c8a3f1326f6ed22f8562419c67d22168" translate="yes" xml:space="preserve">
          <source>Accumulates entries of this context starting with &lt;a href=&quot;../fold#kotlin.coroutines.CoroutineContext%24fold%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.coroutines.CoroutineContext.Element%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold#kotlin.coroutines.CoroutineContext%24fold%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.coroutines.CoroutineContext.Element%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element of this context.</source>
          <target state="translated">&lt;a href=&quot;../fold#kotlin.coroutines.CoroutineContext%24fold%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.coroutines.CoroutineContext.Element%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、左から右に現在のアキュムレータ値とこのコンテキストの各要素に&lt;a href=&quot;../fold#kotlin.coroutines.CoroutineContext%24fold%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.coroutines.CoroutineContext.Element%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用して、このコンテキストのエントリを累積します。</target>
        </trans-unit>
        <trans-unit id="3de8543e178b7990cb6f2a115af66f701d127724" translate="yes" xml:space="preserve">
          <source>Accumulates entries of this context starting with &lt;a href=&quot;../fold#kotlin.coroutines.experimental.CoroutineContext%24fold%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.coroutines.experimental.CoroutineContext.Element%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold#kotlin.coroutines.experimental.CoroutineContext%24fold%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.coroutines.experimental.CoroutineContext.Element%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element of this context.</source>
          <target state="translated">&lt;a href=&quot;../fold#kotlin.coroutines.experimental.CoroutineContext%24fold%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.coroutines.experimental.CoroutineContext.Element%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、左から右に現在のアキュムレータ値とこのコンテキストの各要素に&lt;a href=&quot;../fold#kotlin.coroutines.experimental.CoroutineContext%24fold%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.coroutines.experimental.CoroutineContext.Element%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用して、このコンテキストのエントリを累積します。</target>
        </trans-unit>
        <trans-unit id="1adebe0a3bc77b985c9e47524bc68db2419fad8a" translate="yes" xml:space="preserve">
          <source>Accumulates entries of this context starting with &lt;a href=&quot;fold#kotlin.coroutines.CoroutineContext%24fold%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.coroutines.CoroutineContext.Element%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold#kotlin.coroutines.CoroutineContext%24fold%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.coroutines.CoroutineContext.Element%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element of this context.</source>
          <target state="translated">&lt;a href=&quot;fold#kotlin.coroutines.CoroutineContext%24fold%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.coroutines.CoroutineContext.Element%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、左から右に現在のアキュムレータ値とこのコンテキストの各要素に&lt;a href=&quot;fold#kotlin.coroutines.CoroutineContext%24fold%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.coroutines.CoroutineContext.Element%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用して、このコンテキストのエントリを累積します。</target>
        </trans-unit>
        <trans-unit id="c92f86d300219c2b7ac9a5e2a77e5d21940fe204" translate="yes" xml:space="preserve">
          <source>Accumulates entries of this context starting with &lt;a href=&quot;fold#kotlin.coroutines.experimental.CoroutineContext%24fold%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.coroutines.experimental.CoroutineContext.Element%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold#kotlin.coroutines.experimental.CoroutineContext%24fold%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.coroutines.experimental.CoroutineContext.Element%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element of this context.</source>
          <target state="translated">&lt;a href=&quot;fold#kotlin.coroutines.experimental.CoroutineContext%24fold%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.coroutines.experimental.CoroutineContext.Element%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、左から右に現在のアキュムレータ値とこのコンテキストの各要素に&lt;a href=&quot;fold#kotlin.coroutines.experimental.CoroutineContext%24fold%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.coroutines.experimental.CoroutineContext.Element%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用して、このコンテキストのエントリを累積します。</target>
        </trans-unit>
        <trans-unit id="ca613627da9a2347675d12e71dfe561b2ca3d08c" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.Array%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.Array%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.Array%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、左から右への演算を現在のアキュムレータ値と各要素に適用&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.Array%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、値を累積します。</target>
        </trans-unit>
        <trans-unit id="a033a45ed69305a90908491839025cd1330b8b80" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.BooleanArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Boolean%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.BooleanArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Boolean%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.BooleanArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Boolean%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、左から右への演算を現在のアキュムレータ値と各要素に適用&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.BooleanArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Boolean%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、値を累積します。</target>
        </trans-unit>
        <trans-unit id="eedbdd10c9e0460e29309d06089006e375ac1524" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.ByteArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Byte%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.ByteArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Byte%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.ByteArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Byte%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、左から右への演算を現在のアキュムレータ値と各要素に適用&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.ByteArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Byte%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、値を累積します。</target>
        </trans-unit>
        <trans-unit id="d04ad6c29405e360d504c0484cb821e4b7cdba40" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.CharArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.CharArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.CharArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、左から右への演算を現在のアキュムレータ値と各要素に適用&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.CharArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、値を累積します。</target>
        </trans-unit>
        <trans-unit id="9300614531c5faad8417c38c3807a8958fcca8d3" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.DoubleArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Double%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.DoubleArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Double%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.DoubleArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Double%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、左から右への演算を現在のアキュムレータ値と各要素に適用&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.DoubleArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Double%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、値を累積します。</target>
        </trans-unit>
        <trans-unit id="bbfb3cfb0bb6b45869d1c0d2e8b792cc6c6e1d0e" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.FloatArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Float%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.FloatArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Float%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.FloatArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Float%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、左から右への演算を現在のアキュムレータ値と各要素に適用&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.FloatArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Float%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、値を累積します。</target>
        </trans-unit>
        <trans-unit id="de2163ecfe98e1dab5b357df8463499f8441fa90" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.IntArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Int%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.IntArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Int%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.IntArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Int%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、左から右への演算を現在のアキュムレータ値と各要素に適用&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.IntArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Int%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、値を累積します。</target>
        </trans-unit>
        <trans-unit id="9e6a2a3ce71cbd27c3bc7f7bd74565a550623525" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.LongArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Long%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.LongArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Long%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.LongArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Long%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、左から右への演算を現在のアキュムレータ値と各要素に適用&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.LongArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Long%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、値を累積します。</target>
        </trans-unit>
        <trans-unit id="7ee6675801a2685a51bef36ec4fae47a8f24dc5b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.ShortArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Short%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.ShortArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Short%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.ShortArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Short%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、左から右への演算を現在のアキュムレータ値と各要素に適用&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.ShortArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Short%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、値を累積します。</target>
        </trans-unit>
        <trans-unit id="82ecab0e80917b6717ae82989f4221409eb9b3a1" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.UByteArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.UByte%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.UByteArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.UByte%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.UByteArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.UByte%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、左から右への演算を現在のアキュムレータ値と各要素に適用&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.UByteArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.UByte%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、値を累積します。</target>
        </trans-unit>
        <trans-unit id="886f394ca69291a9fbedb65748a0bef3abd60318" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.UIntArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.UInt%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.UIntArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.UInt%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.UIntArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.UInt%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、左から右への演算を現在のアキュムレータ値と各要素に適用&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.UIntArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.UInt%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、値を累積します。</target>
        </trans-unit>
        <trans-unit id="793bb61c1b9580eb3f2b9fdc6e44752975fb3df5" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.ULongArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.ULong%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.ULongArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.ULong%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.ULongArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.ULong%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、左から右への演算を現在のアキュムレータ値と各要素に適用&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.ULongArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.ULong%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、値を累積します。</target>
        </trans-unit>
        <trans-unit id="810b5671858987b8e81ba9d528fb2e7adaa56b6b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.UShortArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.UShort%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.UShortArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.UShort%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.UShortArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.UShort%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、左から右への演算を現在のアキュムレータ値と各要素に適用&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.UShortArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.UShort%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、値を累積します。</target>
        </trans-unit>
        <trans-unit id="46b147ecd01a7992c75b767dbdf9a536e5f9ec8d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.collections.Iterable%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.collections.Iterable%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.collections.Iterable%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始まり、左から右への演算を現在のアキュムレータ値と各要素に適用&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.collections.Iterable%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Foperation&quot;&gt;して&lt;/a&gt;、値を累積します。</target>
        </trans-unit>
        <trans-unit id="91889b35d06dfea59afaa75a6ca8578533d73df4" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.Array%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.Array%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.Array%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;初期&lt;/a&gt;値から始めて、左から右に現在のアキュムレータ値と元の配列のインデックスを持つ各要素に&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.Array%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;操作&lt;/a&gt;を適用して、値を累積します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
